; ModuleID = 'tree-ssa-loop-im.c'
source_filename = "tree-ssa-loop-im.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.anon = type { %struct.htab*, %struct.VEC_mem_ref_p_heap*, %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap*, %struct.VEC_htab_t_heap*, %struct.pointer_map_t* }
%struct.VEC_mem_ref_p_heap = type { %struct.VEC_mem_ref_p_base }
%struct.VEC_mem_ref_p_base = type { i32, i32, [1 x %struct.mem_ref*] }
%struct.mem_ref = type { %union.tree_node*, i32, i32, %struct.bitmap_head_def*, %struct.VEC_mem_ref_locs_p_heap*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_mem_ref_locs_p_heap = type { %struct.VEC_mem_ref_locs_p_base }
%struct.VEC_mem_ref_locs_p_base = type { i32, i32, [1 x %struct.mem_ref_locs*] }
%struct.mem_ref_locs = type { %struct.VEC_mem_ref_loc_p_heap* }
%struct.VEC_mem_ref_loc_p_heap = type { %struct.VEC_mem_ref_loc_p_base }
%struct.VEC_mem_ref_loc_p_base = type { i32, i32, [1 x %struct.mem_ref_loc*] }
%struct.mem_ref_loc = type { %union.tree_node**, %union.gimple_statement_d* }
%struct.VEC_bitmap_heap = type { %struct.VEC_bitmap_base }
%struct.VEC_bitmap_base = type { i32, i32, [1 x %struct.bitmap_head_def*] }
%struct.VEC_htab_t_heap = type { %struct.VEC_htab_t_base }
%struct.VEC_htab_t_base = type { i32, i32, [1 x %struct.htab*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.real_value = type { i32, [3 x i64] }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.dom_walk_data = type { i8, void (%struct.dom_walk_data*, %struct.basic_block_def*, i8)*, void (%struct.dom_walk_data*, %struct.basic_block_def*)*, void (%struct.dom_walk_data*, %struct.basic_block_def*)*, i8*, %struct.VEC_void_p_heap*, i64, %struct.VEC_void_p_heap* }
%struct.VEC_void_p_heap = type { %struct.VEC_void_p_base }
%struct.VEC_void_p_base = type { i32, i32, [1 x i8*] }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.vop_to_refs_elt = type { i32, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.lim_aux_data = type { %struct.loop*, %struct.loop*, %struct.loop*, i32, %struct.depend* }
%struct.depend = type { %union.gimple_statement_d*, %struct.depend* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.affine_tree_combination = type { %union.tree_node*, %struct.double_int, i32, [8 x %struct.aff_comb_elt], %union.tree_node* }
%struct.aff_comb_elt = type { %union.tree_node*, %struct.double_int }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.fmt_data = type { %struct.loop*, %struct.loop* }

@.str = private unnamed_addr constant [19 x i8] c"tree-ssa-loop-im.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@flag_unswitch_loops = external dso_local global i32, align 4
@lsm_tmp_name_length = internal global i32 0, align 4, !dbg !0
@.str.2 = private unnamed_addr constant [5 x i8] c"_lsm\00", align 1
@lsm_tmp_name = internal global [41 x i8] zeroinitializer, align 16, !dbg !2896
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.3 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.4 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"_RE\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"_IM\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"F\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"_I\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@lim_aux_data_map = internal global %struct.pointer_map_t* null, align 8, !dbg !2901
@.str.12 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@memory_accesses = internal global %struct.anon zeroinitializer, align 8, !dbg !2903
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.13 = private unnamed_addr constant [22 x i8] c"Memory reference %u: \00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@.str.15 = private unnamed_addr constant [40 x i8] c"Basic block %d (loop %d -- depth %d):\0A\0A\00", align 1
@flag_unsafe_math_optimizations = external dso_local global i32, align 4
@flag_trapping_math = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [39 x i8] c"  invariant up to level %d, cost %d.\0A\0A\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.17 = private unnamed_addr constant [9 x i8] c"reciptmp\00", align 1
@dconst1 = external dso_local global %struct.real_value, align 8
@flag_var_tracking_assignments = external dso_local global i32, align 4
@.str.18 = private unnamed_addr constant [9 x i8] c"shifttmp\00", align 1
@.str.19 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.20 = private unnamed_addr constant [48 x i8] c"Querying dependencies of ref %u in loop %d: %s\0A\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"independent\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"dependent\00", align 1
@.str.23 = private unnamed_addr constant [40 x i8] c"Querying dependency of refs %u and %u: \00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"dependent.\0A\00", align 1
@.str.25 = private unnamed_addr constant [14 x i8] c"independent.\0A\00", align 1
@optimize = external dso_local global i32, align 4
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.26 = private unnamed_addr constant [27 x i8] c"Executing store motion of \00", align 1
@.str.27 = private unnamed_addr constant [15 x i8] c" from loop %d\0A\00", align 1
@.str.28 = private unnamed_addr constant [18 x i8] c"Moving statement\0A\00", align 1
@.str.29 = private unnamed_addr constant [28 x i8] c"(cost %u) out of loop %d.\0A\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @for_each_index(%union.tree_node** %addr_p, i8 (%union.tree_node*, %union.tree_node**, i8*)* %cbck, i8* %data) #0 !dbg !2918 {
entry:
  %retval = alloca i8, align 1
  %addr_p.addr = alloca %union.tree_node**, align 8
  %cbck.addr = alloca i8 (%union.tree_node*, %union.tree_node**, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %nxt = alloca %union.tree_node**, align 8
  %idx = alloca %union.tree_node**, align 8
  store %union.tree_node** %addr_p, %union.tree_node*** %addr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %addr_p.addr, metadata !2925, metadata !DIExpression()), !dbg !2926
  store i8 (%union.tree_node*, %union.tree_node**, i8*)* %cbck, i8 (%union.tree_node*, %union.tree_node**, i8*)** %cbck.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.tree_node*, %union.tree_node**, i8*)** %cbck.addr, metadata !2927, metadata !DIExpression()), !dbg !2928
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !2929, metadata !DIExpression()), !dbg !2930
  call void @llvm.dbg.declare(metadata %union.tree_node*** %nxt, metadata !2931, metadata !DIExpression()), !dbg !2932
  call void @llvm.dbg.declare(metadata %union.tree_node*** %idx, metadata !2933, metadata !DIExpression()), !dbg !2934
  br label %for.cond, !dbg !2935

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2936
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !2936
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !2936
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !2936
  %bf.load = load i64, i64* %2, align 8, !dbg !2936
  %bf.clear = and i64 %bf.load, 65535, !dbg !2936
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2936
  switch i32 %bf.cast, label %sw.default [
    i32 141, label %sw.bb
    i32 49, label %sw.bb1
    i32 48, label %sw.bb1
    i32 47, label %sw.bb1
    i32 42, label %sw.bb3
    i32 118, label %sw.bb3
    i32 43, label %sw.bb3
    i32 44, label %sw.bb3
    i32 41, label %sw.bb7
    i32 45, label %sw.bb16
    i32 46, label %sw.bb16
    i32 32, label %sw.bb27
    i32 34, label %sw.bb27
    i32 28, label %sw.bb27
    i32 36, label %sw.bb27
    i32 27, label %sw.bb27
    i32 26, label %sw.bb27
    i32 23, label %sw.bb27
    i32 24, label %sw.bb27
    i32 25, label %sw.bb27
    i32 51, label %sw.bb27
    i32 121, label %sw.bb28
    i32 152, label %sw.bb31
  ], !dbg !2940

sw.bb:                                            ; preds = %for.cond
  %3 = load i8 (%union.tree_node*, %union.tree_node**, i8*)*, i8 (%union.tree_node*, %union.tree_node**, i8*)** %cbck.addr, align 8, !dbg !2941
  %4 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2943
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !2944
  %6 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2945
  %7 = load i8*, i8** %data.addr, align 8, !dbg !2946
  %call = call zeroext i8 %3(%union.tree_node* %5, %union.tree_node** %6, i8* %7), !dbg !2941
  store i8 %call, i8* %retval, align 1, !dbg !2947
  br label %return, !dbg !2947

sw.bb1:                                           ; preds = %for.cond, %for.cond, %for.cond
  %8 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2948
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !2948
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !2948
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !2948
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !2948
  store %union.tree_node** %arrayidx, %union.tree_node*** %nxt, align 8, !dbg !2949
  %10 = load i8 (%union.tree_node*, %union.tree_node**, i8*)*, i8 (%union.tree_node*, %union.tree_node**, i8*)** %cbck.addr, align 8, !dbg !2950
  %11 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2951
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !2952
  %13 = load %union.tree_node**, %union.tree_node*** %nxt, align 8, !dbg !2953
  %14 = load i8*, i8** %data.addr, align 8, !dbg !2954
  %call2 = call zeroext i8 %10(%union.tree_node* %12, %union.tree_node** %13, i8* %14), !dbg !2950
  store i8 %call2, i8* %retval, align 1, !dbg !2955
  br label %return, !dbg !2955

sw.bb3:                                           ; preds = %for.cond, %for.cond, %for.cond, %for.cond
  %15 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2956
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !2956
  %exp4 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !2956
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !2956
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 0, !dbg !2956
  store %union.tree_node** %arrayidx6, %union.tree_node*** %nxt, align 8, !dbg !2957
  br label %sw.epilog, !dbg !2958

sw.bb7:                                           ; preds = %for.cond
  %17 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2959
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !2959
  %exp8 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !2959
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !2959
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 2, !dbg !2959
  store %union.tree_node** %arrayidx10, %union.tree_node*** %idx, align 8, !dbg !2960
  %19 = load %union.tree_node**, %union.tree_node*** %idx, align 8, !dbg !2961
  %20 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !2963
  %tobool = icmp ne %union.tree_node* %20, null, !dbg !2963
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2964

land.lhs.true:                                    ; preds = %sw.bb7
  %21 = load i8 (%union.tree_node*, %union.tree_node**, i8*)*, i8 (%union.tree_node*, %union.tree_node**, i8*)** %cbck.addr, align 8, !dbg !2965
  %22 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2966
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8, !dbg !2967
  %24 = load %union.tree_node**, %union.tree_node*** %idx, align 8, !dbg !2968
  %25 = load i8*, i8** %data.addr, align 8, !dbg !2969
  %call11 = call zeroext i8 %21(%union.tree_node* %23, %union.tree_node** %24, i8* %25), !dbg !2965
  %tobool12 = icmp ne i8 %call11, 0, !dbg !2965
  br i1 %tobool12, label %if.end, label %if.then, !dbg !2970

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !2971
  br label %return, !dbg !2971

if.end:                                           ; preds = %land.lhs.true, %sw.bb7
  %26 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2972
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !2972
  %exp13 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !2972
  %operands14 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp13, i32 0, i32 3, !dbg !2972
  %arrayidx15 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands14, i64 0, i64 0, !dbg !2972
  store %union.tree_node** %arrayidx15, %union.tree_node*** %nxt, align 8, !dbg !2973
  br label %sw.epilog, !dbg !2974

sw.bb16:                                          ; preds = %for.cond, %for.cond
  %28 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2975
  %29 = load %union.tree_node*, %union.tree_node** %28, align 8, !dbg !2975
  %exp17 = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !2975
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !2975
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 0, !dbg !2975
  store %union.tree_node** %arrayidx19, %union.tree_node*** %nxt, align 8, !dbg !2976
  %30 = load i8 (%union.tree_node*, %union.tree_node**, i8*)*, i8 (%union.tree_node*, %union.tree_node**, i8*)** %cbck.addr, align 8, !dbg !2977
  %31 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2979
  %32 = load %union.tree_node*, %union.tree_node** %31, align 8, !dbg !2980
  %33 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2981
  %34 = load %union.tree_node*, %union.tree_node** %33, align 8, !dbg !2981
  %exp20 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !2981
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !2981
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 1, !dbg !2981
  %35 = load i8*, i8** %data.addr, align 8, !dbg !2982
  %call23 = call zeroext i8 %30(%union.tree_node* %32, %union.tree_node** %arrayidx22, i8* %35), !dbg !2977
  %tobool24 = icmp ne i8 %call23, 0, !dbg !2977
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !2983

if.then25:                                        ; preds = %sw.bb16
  store i8 0, i8* %retval, align 1, !dbg !2984
  br label %return, !dbg !2984

if.end26:                                         ; preds = %sw.bb16
  br label %sw.epilog, !dbg !2985

sw.bb27:                                          ; preds = %for.cond, %for.cond, %for.cond, %for.cond, %for.cond, %for.cond, %for.cond, %for.cond, %for.cond, %for.cond
  store i8 1, i8* %retval, align 1, !dbg !2986
  br label %return, !dbg !2986

sw.bb28:                                          ; preds = %for.cond
  %36 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2987
  %37 = load %union.tree_node*, %union.tree_node** %36, align 8, !dbg !2987
  %call29 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %37), !dbg !2987
  %tobool30 = icmp ne i8 %call29, 0, !dbg !2987
  br i1 %tobool30, label %cond.false, label %cond.true, !dbg !2987

cond.true:                                        ; preds = %sw.bb28
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i32 321, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2987
  br label %cond.end, !dbg !2987

cond.false:                                       ; preds = %sw.bb28
  br label %cond.end, !dbg !2987

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2987
  store i8 1, i8* %retval, align 1, !dbg !2988
  br label %return, !dbg !2988

sw.bb31:                                          ; preds = %for.cond
  %38 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2989
  %39 = load %union.tree_node*, %union.tree_node** %38, align 8, !dbg !2989
  %exp32 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !2989
  %operands33 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp32, i32 0, i32 3, !dbg !2989
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands33, i64 0, i64 1, !dbg !2989
  store %union.tree_node** %arrayidx34, %union.tree_node*** %idx, align 8, !dbg !2990
  %40 = load %union.tree_node**, %union.tree_node*** %idx, align 8, !dbg !2991
  %41 = load %union.tree_node*, %union.tree_node** %40, align 8, !dbg !2993
  %tobool35 = icmp ne %union.tree_node* %41, null, !dbg !2993
  br i1 %tobool35, label %land.lhs.true36, label %if.end40, !dbg !2994

land.lhs.true36:                                  ; preds = %sw.bb31
  %42 = load i8 (%union.tree_node*, %union.tree_node**, i8*)*, i8 (%union.tree_node*, %union.tree_node**, i8*)** %cbck.addr, align 8, !dbg !2995
  %43 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !2996
  %44 = load %union.tree_node*, %union.tree_node** %43, align 8, !dbg !2997
  %45 = load %union.tree_node**, %union.tree_node*** %idx, align 8, !dbg !2998
  %46 = load i8*, i8** %data.addr, align 8, !dbg !2999
  %call37 = call zeroext i8 %42(%union.tree_node* %44, %union.tree_node** %45, i8* %46), !dbg !2995
  %tobool38 = icmp ne i8 %call37, 0, !dbg !2995
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !3000

if.then39:                                        ; preds = %land.lhs.true36
  store i8 0, i8* %retval, align 1, !dbg !3001
  br label %return, !dbg !3001

if.end40:                                         ; preds = %land.lhs.true36, %sw.bb31
  %47 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !3002
  %48 = load %union.tree_node*, %union.tree_node** %47, align 8, !dbg !3002
  %exp41 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !3002
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 3, !dbg !3002
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i64 0, i64 2, !dbg !3002
  store %union.tree_node** %arrayidx43, %union.tree_node*** %idx, align 8, !dbg !3003
  %49 = load %union.tree_node**, %union.tree_node*** %idx, align 8, !dbg !3004
  %50 = load %union.tree_node*, %union.tree_node** %49, align 8, !dbg !3006
  %tobool44 = icmp ne %union.tree_node* %50, null, !dbg !3006
  br i1 %tobool44, label %land.lhs.true45, label %if.end49, !dbg !3007

land.lhs.true45:                                  ; preds = %if.end40
  %51 = load i8 (%union.tree_node*, %union.tree_node**, i8*)*, i8 (%union.tree_node*, %union.tree_node**, i8*)** %cbck.addr, align 8, !dbg !3008
  %52 = load %union.tree_node**, %union.tree_node*** %addr_p.addr, align 8, !dbg !3009
  %53 = load %union.tree_node*, %union.tree_node** %52, align 8, !dbg !3010
  %54 = load %union.tree_node**, %union.tree_node*** %idx, align 8, !dbg !3011
  %55 = load i8*, i8** %data.addr, align 8, !dbg !3012
  %call46 = call zeroext i8 %51(%union.tree_node* %53, %union.tree_node** %54, i8* %55), !dbg !3008
  %tobool47 = icmp ne i8 %call46, 0, !dbg !3008
  br i1 %tobool47, label %if.end49, label %if.then48, !dbg !3013

if.then48:                                        ; preds = %land.lhs.true45
  store i8 0, i8* %retval, align 1, !dbg !3014
  br label %return, !dbg !3014

if.end49:                                         ; preds = %land.lhs.true45, %if.end40
  store i8 1, i8* %retval, align 1, !dbg !3015
  br label %return, !dbg !3015

sw.default:                                       ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i32 336, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3016
  br label %sw.epilog, !dbg !3017

sw.epilog:                                        ; preds = %sw.default, %if.end26, %if.end, %sw.bb3
  br label %for.inc, !dbg !3018

for.inc:                                          ; preds = %sw.epilog
  %56 = load %union.tree_node**, %union.tree_node*** %nxt, align 8, !dbg !3019
  store %union.tree_node** %56, %union.tree_node*** %addr_p.addr, align 8, !dbg !3020
  br label %for.cond, !dbg !3021, !llvm.loop !3022

return:                                           ; preds = %if.end49, %if.then48, %if.then39, %cond.end, %sw.bb27, %if.then25, %if.then, %sw.bb1, %sw.bb
  %57 = load i8, i8* %retval, align 1, !dbg !3025
  ret i8 %57, !dbg !3025
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @movement_possibility(%union.gimple_statement_d* %stmt) #0 !dbg !3026 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %ret = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3029, metadata !DIExpression()), !dbg !3030
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !3031, metadata !DIExpression()), !dbg !3032
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !3033, metadata !DIExpression()), !dbg !3034
  store i32 2, i32* %ret, align 4, !dbg !3034
  %0 = load i32, i32* @flag_unswitch_loops, align 4, !dbg !3035
  %tobool = icmp ne i32 %0, 0, !dbg !3035
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3037

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3038
  %call = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !3039
  %cmp = icmp eq i32 %call, 1, !dbg !3040
  br i1 %cmp, label %if.then, label %if.end, !dbg !3041

if.then:                                          ; preds = %land.lhs.true
  store i32 2, i32* %retval, align 4, !dbg !3042
  br label %return, !dbg !3042

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3044
  %call1 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %2), !dbg !3046
  %cmp2 = icmp eq %union.tree_node* %call1, null, !dbg !3047
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !3048

if.then3:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !3049
  br label %return, !dbg !3049

if.end4:                                          ; preds = %if.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3050
  %call5 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %3), !dbg !3052
  %tobool6 = icmp ne %union.tree_node* %call5, null, !dbg !3052
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !3053

if.then7:                                         ; preds = %if.end4
  store i32 0, i32* %retval, align 4, !dbg !3054
  br label %return, !dbg !3054

if.end8:                                          ; preds = %if.end4
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3055
  %call9 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %4), !dbg !3057
  %conv = zext i8 %call9 to i32, !dbg !3057
  %tobool10 = icmp ne i32 %conv, 0, !dbg !3057
  br i1 %tobool10, label %if.then22, label %lor.lhs.false, !dbg !3058

lor.lhs.false:                                    ; preds = %if.end8
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3059
  %call11 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %5), !dbg !3060
  %conv12 = zext i8 %call11 to i32, !dbg !3060
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !3060
  br i1 %tobool13, label %if.then22, label %lor.lhs.false14, !dbg !3061

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3062
  %call15 = call zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d* %6), !dbg !3063
  %conv16 = zext i8 %call15 to i32, !dbg !3063
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !3063
  br i1 %tobool17, label %if.then22, label %lor.lhs.false18, !dbg !3064

lor.lhs.false18:                                  ; preds = %lor.lhs.false14
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3065
  %call19 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %7), !dbg !3066
  %conv20 = zext i8 %call19 to i32, !dbg !3066
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !3066
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !3067

if.then22:                                        ; preds = %lor.lhs.false18, %lor.lhs.false14, %lor.lhs.false, %if.end8
  store i32 0, i32* %retval, align 4, !dbg !3068
  br label %return, !dbg !3068

if.end23:                                         ; preds = %lor.lhs.false18
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3069
  %call24 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %8), !dbg !3071
  %tobool25 = icmp ne i8 %call24, 0, !dbg !3071
  br i1 %tobool25, label %if.then26, label %if.else, !dbg !3072

if.then26:                                        ; preds = %if.end23
  store i32 1, i32* %ret, align 4, !dbg !3073
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3075
  %call27 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %9), !dbg !3076
  store %union.tree_node* %call27, %union.tree_node** %lhs, align 8, !dbg !3077
  br label %if.end34, !dbg !3078

if.else:                                          ; preds = %if.end23
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3079
  %call28 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %10), !dbg !3081
  %tobool29 = icmp ne i8 %call28, 0, !dbg !3081
  br i1 %tobool29, label %if.then30, label %if.else32, !dbg !3082

if.then30:                                        ; preds = %if.else
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3083
  %call31 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %11), !dbg !3084
  store %union.tree_node* %call31, %union.tree_node** %lhs, align 8, !dbg !3085
  br label %if.end33, !dbg !3086

if.else32:                                        ; preds = %if.else
  store i32 0, i32* %retval, align 4, !dbg !3087
  br label %return, !dbg !3087

if.end33:                                         ; preds = %if.then30
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then26
  %12 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3088
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3088
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !3088
  %bf.load = load i64, i64* %13, align 8, !dbg !3088
  %bf.clear = and i64 %bf.load, 65535, !dbg !3088
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3088
  %cmp35 = icmp eq i32 %bf.cast, 141, !dbg !3090
  br i1 %cmp35, label %land.lhs.true37, label %if.end44, !dbg !3091

land.lhs.true37:                                  ; preds = %if.end34
  %14 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3092
  %base38 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !3092
  %15 = bitcast %struct.tree_base* %base38 to i64*, !dbg !3092
  %bf.load39 = load i64, i64* %15, align 8, !dbg !3092
  %bf.lshr = lshr i64 %bf.load39, 22, !dbg !3092
  %bf.clear40 = and i64 %bf.lshr, 1, !dbg !3092
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !3092
  %tobool42 = icmp ne i32 %bf.cast41, 0, !dbg !3092
  br i1 %tobool42, label %if.then43, label %if.end44, !dbg !3093

if.then43:                                        ; preds = %land.lhs.true37
  store i32 0, i32* %retval, align 4, !dbg !3094
  br label %return, !dbg !3094

if.end44:                                         ; preds = %land.lhs.true37, %if.end34
  %16 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3095
  %base45 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !3095
  %17 = bitcast %struct.tree_base* %base45 to i64*, !dbg !3095
  %bf.load46 = load i64, i64* %17, align 8, !dbg !3095
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !3095
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !3095
  %cmp49 = icmp ne i32 %bf.cast48, 141, !dbg !3097
  br i1 %cmp49, label %if.then55, label %lor.lhs.false51, !dbg !3098

lor.lhs.false51:                                  ; preds = %if.end44
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3099
  %call52 = call zeroext i8 @gimple_could_trap_p(%union.gimple_statement_d* %18), !dbg !3100
  %conv53 = zext i8 %call52 to i32, !dbg !3100
  %tobool54 = icmp ne i32 %conv53, 0, !dbg !3100
  br i1 %tobool54, label %if.then55, label %if.end56, !dbg !3101

if.then55:                                        ; preds = %lor.lhs.false51, %if.end44
  store i32 1, i32* %retval, align 4, !dbg !3102
  br label %return, !dbg !3102

if.end56:                                         ; preds = %lor.lhs.false51
  %19 = load i32, i32* %ret, align 4, !dbg !3103
  store i32 %19, i32* %retval, align 4, !dbg !3104
  br label %return, !dbg !3104

return:                                           ; preds = %if.end56, %if.then55, %if.then43, %if.else32, %if.then22, %if.then7, %if.then3, %if.then
  %20 = load i32, i32* %retval, align 4, !dbg !3105
  ret i32 %20, !dbg !3105
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3106 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3110, metadata !DIExpression()), !dbg !3111
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3112
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3113
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3114
  %bf.load = load i32, i32* %1, align 8, !dbg !3114
  %bf.clear = and i32 %bf.load, 255, !dbg !3114
  ret i32 %bf.clear, !dbg !3115
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !3116 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3119, metadata !DIExpression()), !dbg !3120
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3121
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !3123
  %tobool = icmp ne i8 %call, 0, !dbg !3123
  br i1 %tobool, label %if.end, label %if.then, !dbg !3124

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3125
  br label %return, !dbg !3125

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3126
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !3127
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !3128
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !3128
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !3129
  br label %return, !dbg !3129

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3130
  ret %union.tree_node* %3, !dbg !3130
}

declare dso_local zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %stmt) #0 !dbg !3131 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3134, metadata !DIExpression()), !dbg !3135
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3136
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !3138
  %tobool = icmp ne i8 %call, 0, !dbg !3138
  br i1 %tobool, label %if.then, label %if.else, !dbg !3139

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3140
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !3141
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3142
  %bf.load = load i32, i32* %2, align 8, !dbg !3142
  %bf.lshr = lshr i32 %bf.load, 14, !dbg !3142
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3142
  %conv = trunc i32 %bf.clear to i8, !dbg !3140
  store i8 %conv, i8* %retval, align 1, !dbg !3143
  br label %return, !dbg !3143

if.else:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3144
  br label %return, !dbg !3144

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !3145
  ret i8 %3, !dbg !3145
}

declare dso_local zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !3146 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3147, metadata !DIExpression()), !dbg !3148
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3149
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3150
  %cmp = icmp eq i32 %call, 8, !dbg !3151
  %conv = zext i1 %cmp to i32, !dbg !3151
  %conv1 = trunc i32 %conv to i8, !dbg !3150
  ret i8 %conv1, !dbg !3152
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !3153 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3154, metadata !DIExpression()), !dbg !3155
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3156
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !3157
  ret %union.tree_node* %call, !dbg !3158
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !3159 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3160, metadata !DIExpression()), !dbg !3161
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3162
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3163
  %cmp = icmp eq i32 %call, 6, !dbg !3164
  %conv = zext i1 %cmp to i32, !dbg !3164
  %conv1 = trunc i32 %conv to i8, !dbg !3163
  ret i8 %conv1, !dbg !3165
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !3166 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3167, metadata !DIExpression()), !dbg !3168
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3169
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !3170
  ret %union.tree_node* %call, !dbg !3171
}

declare dso_local zeroext i8 @gimple_could_trap_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @get_lsm_tmp_name(%union.tree_node* %ref, i32 %n) #0 !dbg !3172 {
entry:
  %ref.addr = alloca %union.tree_node*, align 8
  %n.addr = alloca i32, align 4
  %ns = alloca [2 x i8], align 1
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !3175, metadata !DIExpression()), !dbg !3176
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3177, metadata !DIExpression()), !dbg !3178
  call void @llvm.dbg.declare(metadata [2 x i8]* %ns, metadata !3179, metadata !DIExpression()), !dbg !3181
  store i32 0, i32* @lsm_tmp_name_length, align 4, !dbg !3182
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3183
  call void @gen_lsm_tmp_name(%union.tree_node* %0), !dbg !3184
  call void @lsm_tmp_name_add(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)), !dbg !3185
  %1 = load i32, i32* %n.addr, align 4, !dbg !3186
  %cmp = icmp ult i32 %1, 10, !dbg !3188
  br i1 %cmp, label %if.then, label %if.end, !dbg !3189

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4, !dbg !3190
  %add = add i32 48, %2, !dbg !3192
  %conv = trunc i32 %add to i8, !dbg !3193
  %arrayidx = getelementptr inbounds [2 x i8], [2 x i8]* %ns, i64 0, i64 0, !dbg !3194
  store i8 %conv, i8* %arrayidx, align 1, !dbg !3195
  %arrayidx1 = getelementptr inbounds [2 x i8], [2 x i8]* %ns, i64 0, i64 1, !dbg !3196
  store i8 0, i8* %arrayidx1, align 1, !dbg !3197
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %ns, i64 0, i64 0, !dbg !3198
  call void @lsm_tmp_name_add(i8* %arraydecay), !dbg !3199
  br label %if.end, !dbg !3200

if.end:                                           ; preds = %if.then, %entry
  ret i8* getelementptr inbounds ([41 x i8], [41 x i8]* @lsm_tmp_name, i64 0, i64 0), !dbg !3201
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_lsm_tmp_name(%union.tree_node* %ref) #0 !dbg !3202 {
entry:
  %ref.addr = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !3205, metadata !DIExpression()), !dbg !3206
  call void @llvm.dbg.declare(metadata i8** %name, metadata !3207, metadata !DIExpression()), !dbg !3208
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3209
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3209
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3209
  %bf.load = load i64, i64* %1, align 8, !dbg !3209
  %bf.clear = and i64 %bf.load, 65535, !dbg !3209
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3209
  switch i32 %bf.cast, label %sw.default [
    i32 49, label %sw.bb
    i32 48, label %sw.bb
    i32 47, label %sw.bb
    i32 42, label %sw.bb1
    i32 118, label %sw.bb1
    i32 46, label %sw.bb1
    i32 43, label %sw.bb5
    i32 44, label %sw.bb9
    i32 41, label %sw.bb13
    i32 45, label %sw.bb20
    i32 141, label %sw.bb24
    i32 32, label %sw.bb25
    i32 34, label %sw.bb25
    i32 28, label %sw.bb30
    i32 36, label %sw.bb31
    i32 23, label %sw.bb32
  ], !dbg !3210

sw.bb:                                            ; preds = %entry, %entry, %entry
  %2 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3211
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !3211
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3211
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3211
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3211
  call void @gen_lsm_tmp_name(%union.tree_node* %3), !dbg !3213
  call void @lsm_tmp_name_add(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3214
  br label %sw.epilog, !dbg !3215

sw.bb1:                                           ; preds = %entry, %entry, %entry
  %4 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3216
  %exp2 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !3216
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !3216
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i64 0, i64 0, !dbg !3216
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8, !dbg !3216
  call void @gen_lsm_tmp_name(%union.tree_node* %5), !dbg !3217
  br label %sw.epilog, !dbg !3218

sw.bb5:                                           ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3219
  %exp6 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !3219
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !3219
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 0, !dbg !3219
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !3219
  call void @gen_lsm_tmp_name(%union.tree_node* %7), !dbg !3220
  call void @lsm_tmp_name_add(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0)), !dbg !3221
  br label %sw.epilog, !dbg !3222

sw.bb9:                                           ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3223
  %exp10 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !3223
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !3223
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 0, !dbg !3223
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !3223
  call void @gen_lsm_tmp_name(%union.tree_node* %9), !dbg !3224
  call void @lsm_tmp_name_add(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0)), !dbg !3225
  br label %sw.epilog, !dbg !3226

sw.bb13:                                          ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3227
  %exp14 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !3227
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 3, !dbg !3227
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i64 0, i64 0, !dbg !3227
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !3227
  call void @gen_lsm_tmp_name(%union.tree_node* %11), !dbg !3228
  call void @lsm_tmp_name_add(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3229
  %12 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3230
  %exp17 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !3230
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !3230
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 1, !dbg !3230
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !3230
  %call = call i8* @get_name(%union.tree_node* %13), !dbg !3231
  store i8* %call, i8** %name, align 8, !dbg !3232
  %14 = load i8*, i8** %name, align 8, !dbg !3233
  %tobool = icmp ne i8* %14, null, !dbg !3233
  br i1 %tobool, label %if.end, label %if.then, !dbg !3235

if.then:                                          ; preds = %sw.bb13
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i8** %name, align 8, !dbg !3236
  br label %if.end, !dbg !3237

if.end:                                           ; preds = %if.then, %sw.bb13
  %15 = load i8*, i8** %name, align 8, !dbg !3238
  call void @lsm_tmp_name_add(i8* %15), !dbg !3239
  br label %sw.epilog, !dbg !3240

sw.bb20:                                          ; preds = %entry
  %16 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3241
  %exp21 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !3241
  %operands22 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 3, !dbg !3241
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands22, i64 0, i64 0, !dbg !3241
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8, !dbg !3241
  call void @gen_lsm_tmp_name(%union.tree_node* %17), !dbg !3242
  call void @lsm_tmp_name_add(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0)), !dbg !3243
  br label %sw.epilog, !dbg !3244

sw.bb24:                                          ; preds = %entry
  %18 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3245
  %ssa_name = bitcast %union.tree_node* %18 to %struct.tree_ssa_name*, !dbg !3245
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !3245
  %19 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3245
  store %union.tree_node* %19, %union.tree_node** %ref.addr, align 8, !dbg !3246
  br label %sw.bb25, !dbg !3247

sw.bb25:                                          ; preds = %entry, %entry, %sw.bb24
  %20 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !3248
  %call26 = call i8* @get_name(%union.tree_node* %20), !dbg !3249
  store i8* %call26, i8** %name, align 8, !dbg !3250
  %21 = load i8*, i8** %name, align 8, !dbg !3251
  %tobool27 = icmp ne i8* %21, null, !dbg !3251
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !3253

if.then28:                                        ; preds = %sw.bb25
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i8** %name, align 8, !dbg !3254
  br label %if.end29, !dbg !3255

if.end29:                                         ; preds = %if.then28, %sw.bb25
  %22 = load i8*, i8** %name, align 8, !dbg !3256
  call void @lsm_tmp_name_add(i8* %22), !dbg !3257
  br label %sw.epilog, !dbg !3258

sw.bb30:                                          ; preds = %entry
  call void @lsm_tmp_name_add(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !3259
  br label %sw.epilog, !dbg !3260

sw.bb31:                                          ; preds = %entry
  call void @lsm_tmp_name_add(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0)), !dbg !3261
  br label %sw.epilog, !dbg !3262

sw.bb32:                                          ; preds = %entry
  br label %sw.epilog, !dbg !3263

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i32 1812, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3264
  br label %sw.epilog, !dbg !3265

sw.epilog:                                        ; preds = %sw.default, %sw.bb32, %sw.bb31, %sw.bb30, %if.end29, %sw.bb20, %if.end, %sw.bb9, %sw.bb5, %sw.bb1, %sw.bb
  ret void, !dbg !3266
}

; Function Attrs: noinline nounwind uwtable
define internal void @lsm_tmp_name_add(i8* %s) #0 !dbg !3267 {
entry:
  %s.addr = alloca i8*, align 8
  %l = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3270, metadata !DIExpression()), !dbg !3271
  call void @llvm.dbg.declare(metadata i32* %l, metadata !3272, metadata !DIExpression()), !dbg !3273
  %0 = load i8*, i8** %s.addr, align 8, !dbg !3274
  %call = call i64 @strlen(i8* %0), !dbg !3275
  %1 = load i32, i32* @lsm_tmp_name_length, align 4, !dbg !3276
  %conv = sext i32 %1 to i64, !dbg !3276
  %add = add i64 %call, %conv, !dbg !3277
  %conv1 = trunc i64 %add to i32, !dbg !3275
  store i32 %conv1, i32* %l, align 4, !dbg !3273
  %2 = load i32, i32* %l, align 4, !dbg !3278
  %cmp = icmp sgt i32 %2, 40, !dbg !3280
  br i1 %cmp, label %if.then, label %if.end, !dbg !3281

if.then:                                          ; preds = %entry
  br label %return, !dbg !3282

if.end:                                           ; preds = %entry
  %3 = load i32, i32* @lsm_tmp_name_length, align 4, !dbg !3283
  %idx.ext = sext i32 %3 to i64, !dbg !3284
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @lsm_tmp_name, i64 0, i64 0), i64 %idx.ext, !dbg !3284
  %4 = load i8*, i8** %s.addr, align 8, !dbg !3285
  %call3 = call i8* @strcpy(i8* %add.ptr, i8* %4), !dbg !3286
  %5 = load i32, i32* %l, align 4, !dbg !3287
  store i32 %5, i32* @lsm_tmp_name_length, align 4, !dbg !3288
  br label %return, !dbg !3289

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3289
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @tree_ssa_lim() #0 !dbg !3290 {
entry:
  call void @tree_ssa_lim_initialize(), !dbg !3293
  call void @analyze_memory_references(), !dbg !3294
  call void @determine_invariantness(), !dbg !3295
  call void @store_motion(), !dbg !3296
  call void @move_computations(), !dbg !3297
  call void @tree_ssa_lim_finalize(), !dbg !3298
  ret void, !dbg !3299
}

; Function Attrs: noinline nounwind uwtable
define internal void @tree_ssa_lim_initialize() #0 !dbg !3300 {
entry:
  %contains_call = alloca %struct.simple_bitmap_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %contains_call, metadata !3301, metadata !DIExpression()), !dbg !3313
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3314
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3314
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3314
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3314
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !3314
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !3314
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %2), !dbg !3315
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %contains_call, align 8, !dbg !3313
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !3316, metadata !DIExpression()), !dbg !3323
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3324, metadata !DIExpression()), !dbg !3325
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3326, metadata !DIExpression()), !dbg !3327
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %contains_call, align 8, !dbg !3328
  call void @sbitmap_zero(%struct.simple_bitmap_def* %3), !dbg !3329
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3330
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3330
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3330
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3330
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !3330
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3330
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 6, !dbg !3330
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3330
  store %struct.basic_block_def* %7, %struct.basic_block_def** %bb, align 8, !dbg !3330
  br label %for.cond, !dbg !3330

for.cond:                                         ; preds = %for.inc15, %entry
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3332
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3332
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3332
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !3332
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !3332
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 1, !dbg !3332
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3332
  %cmp = icmp ne %struct.basic_block_def* %8, %11, !dbg !3332
  br i1 %cmp, label %for.body, label %for.end17, !dbg !3330

for.body:                                         ; preds = %for.cond
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3334
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %12), !dbg !3337
  %13 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !3337
  %14 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3337
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !3337
  br label %for.cond5, !dbg !3338

for.cond5:                                        ; preds = %for.inc, %for.body
  %call6 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !3339
  %tobool = icmp ne i8 %call6, 0, !dbg !3341
  %lnot = xor i1 %tobool, true, !dbg !3341
  br i1 %lnot, label %for.body7, label %for.end, !dbg !3342

for.body7:                                        ; preds = %for.cond5
  %call8 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !3343
  %call9 = call zeroext i8 @nonpure_call_p(%union.gimple_statement_d* %call8), !dbg !3346
  %tobool10 = icmp ne i8 %call9, 0, !dbg !3346
  br i1 %tobool10, label %if.then, label %if.end, !dbg !3347

if.then:                                          ; preds = %for.body7
  br label %for.end, !dbg !3348

if.end:                                           ; preds = %for.body7
  br label %for.inc, !dbg !3349

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !3350
  br label %for.cond5, !dbg !3351, !llvm.loop !3352

for.end:                                          ; preds = %if.then, %for.cond5
  %call11 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !3354
  %tobool12 = icmp ne i8 %call11, 0, !dbg !3354
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !3356

if.then13:                                        ; preds = %for.end
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %contains_call, align 8, !dbg !3357
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3358
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !3359
  %17 = load i32, i32* %index, align 8, !dbg !3359
  call void @SET_BIT(%struct.simple_bitmap_def* %15, i32 %17), !dbg !3360
  br label %if.end14, !dbg !3360

if.end14:                                         ; preds = %if.then13, %for.end
  br label %for.inc15, !dbg !3361

for.inc15:                                        ; preds = %if.end14
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3332
  %next_bb16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 6, !dbg !3332
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb16, align 8, !dbg !3332
  store %struct.basic_block_def* %19, %struct.basic_block_def** %bb, align 8, !dbg !3332
  br label %for.cond, !dbg !3332, !llvm.loop !3362

for.end17:                                        ; preds = %for.cond
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3364
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !3364
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 4, !dbg !3364
  %21 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3364
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %21, i32 0, i32 3, !dbg !3366
  %22 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !3366
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 8, !dbg !3367
  %23 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3367
  store %struct.loop* %23, %struct.loop** %loop, align 8, !dbg !3368
  br label %for.cond19, !dbg !3369

for.cond19:                                       ; preds = %for.inc22, %for.end17
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3370
  %tobool20 = icmp ne %struct.loop* %24, null, !dbg !3372
  br i1 %tobool20, label %for.body21, label %for.end23, !dbg !3372

for.body21:                                       ; preds = %for.cond19
  %25 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3373
  %26 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %contains_call, align 8, !dbg !3374
  call void @fill_always_executed_in(%struct.loop* %25, %struct.simple_bitmap_def* %26), !dbg !3375
  br label %for.inc22, !dbg !3375

for.inc22:                                        ; preds = %for.body21
  %27 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3376
  %next = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 9, !dbg !3377
  %28 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !3377
  store %struct.loop* %28, %struct.loop** %loop, align 8, !dbg !3378
  br label %for.cond19, !dbg !3379, !llvm.loop !3380

for.end23:                                        ; preds = %for.cond19
  %29 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %contains_call, align 8, !dbg !3382
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %29, i32 0, i32 0, !dbg !3382
  %30 = load i8*, i8** %popcount, align 8, !dbg !3382
  call void @free(i8* %30), !dbg !3382
  %31 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %contains_call, align 8, !dbg !3382
  %32 = bitcast %struct.simple_bitmap_def* %31 to i8*, !dbg !3382
  call void @free(i8* %32), !dbg !3382
  %call24 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !3383
  store %struct.pointer_map_t* %call24, %struct.pointer_map_t** @lim_aux_data_map, align 8, !dbg !3384
  ret void, !dbg !3385
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_memory_references() #0 !dbg !3386 {
entry:
  %i = alloca i32, align 4
  %empty = alloca %struct.bitmap_head_def*, align 8
  %hempty = alloca %struct.htab*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3387, metadata !DIExpression()), !dbg !3388
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %empty, metadata !3389, metadata !DIExpression()), !dbg !3390
  call void @llvm.dbg.declare(metadata %struct.htab** %hempty, metadata !3391, metadata !DIExpression()), !dbg !3392
  %call = call %struct.htab* @htab_create(i64 100, i32 (i8*)* @memref_hash, i32 (i8*, i8*)* @memref_eq, void (i8*)* @memref_free), !dbg !3393
  store %struct.htab* %call, %struct.htab** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 0), align 8, !dbg !3394
  store %struct.VEC_mem_ref_p_heap* null, %struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), align 8, !dbg !3395
  %call1 = call i32 @number_of_loops(), !dbg !3396
  %call2 = call %struct.VEC_bitmap_heap* @VEC_bitmap_heap_alloc(i32 %call1), !dbg !3396
  store %struct.VEC_bitmap_heap* %call2, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2), align 8, !dbg !3397
  %call3 = call i32 @number_of_loops(), !dbg !3398
  %call4 = call %struct.VEC_bitmap_heap* @VEC_bitmap_heap_alloc(i32 %call3), !dbg !3398
  store %struct.VEC_bitmap_heap* %call4, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !3399
  %call5 = call i32 @number_of_loops(), !dbg !3400
  %call6 = call %struct.VEC_bitmap_heap* @VEC_bitmap_heap_alloc(i32 %call5), !dbg !3400
  store %struct.VEC_bitmap_heap* %call6, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !3401
  %call7 = call i32 @number_of_loops(), !dbg !3402
  %call8 = call %struct.VEC_htab_t_heap* @VEC_htab_t_heap_alloc(i32 %call7), !dbg !3402
  store %struct.VEC_htab_t_heap* %call8, %struct.VEC_htab_t_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 5), align 8, !dbg !3403
  store i32 0, i32* %i, align 4, !dbg !3404
  br label %for.cond, !dbg !3406

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3407
  %call9 = call i32 @number_of_loops(), !dbg !3409
  %cmp = icmp ult i32 %0, %call9, !dbg !3410
  br i1 %cmp, label %for.body, label %for.end, !dbg !3411

for.body:                                         ; preds = %for.cond
  %call10 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3412
  store %struct.bitmap_head_def* %call10, %struct.bitmap_head_def** %empty, align 8, !dbg !3414
  %1 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2), align 8, !dbg !3415
  %tobool = icmp ne %struct.VEC_bitmap_heap* %1, null, !dbg !3415
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3415

cond.true:                                        ; preds = %for.body
  %2 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2), align 8, !dbg !3415
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %2, i32 0, i32 0, !dbg !3415
  br label %cond.end, !dbg !3415

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !3415

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3415
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %empty, align 8, !dbg !3415
  %call11 = call %struct.bitmap_head_def** @VEC_bitmap_base_quick_push(%struct.VEC_bitmap_base* %cond, %struct.bitmap_head_def* %3), !dbg !3415
  %call12 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3416
  store %struct.bitmap_head_def* %call12, %struct.bitmap_head_def** %empty, align 8, !dbg !3417
  %4 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !3418
  %tobool13 = icmp ne %struct.VEC_bitmap_heap* %4, null, !dbg !3418
  br i1 %tobool13, label %cond.true14, label %cond.false16, !dbg !3418

cond.true14:                                      ; preds = %cond.end
  %5 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !3418
  %base15 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %5, i32 0, i32 0, !dbg !3418
  br label %cond.end17, !dbg !3418

cond.false16:                                     ; preds = %cond.end
  br label %cond.end17, !dbg !3418

cond.end17:                                       ; preds = %cond.false16, %cond.true14
  %cond18 = phi %struct.VEC_bitmap_base* [ %base15, %cond.true14 ], [ null, %cond.false16 ], !dbg !3418
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %empty, align 8, !dbg !3418
  %call19 = call %struct.bitmap_head_def** @VEC_bitmap_base_quick_push(%struct.VEC_bitmap_base* %cond18, %struct.bitmap_head_def* %6), !dbg !3418
  %call20 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3419
  store %struct.bitmap_head_def* %call20, %struct.bitmap_head_def** %empty, align 8, !dbg !3420
  %7 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !3421
  %tobool21 = icmp ne %struct.VEC_bitmap_heap* %7, null, !dbg !3421
  br i1 %tobool21, label %cond.true22, label %cond.false24, !dbg !3421

cond.true22:                                      ; preds = %cond.end17
  %8 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !3421
  %base23 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %8, i32 0, i32 0, !dbg !3421
  br label %cond.end25, !dbg !3421

cond.false24:                                     ; preds = %cond.end17
  br label %cond.end25, !dbg !3421

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi %struct.VEC_bitmap_base* [ %base23, %cond.true22 ], [ null, %cond.false24 ], !dbg !3421
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %empty, align 8, !dbg !3421
  %call27 = call %struct.bitmap_head_def** @VEC_bitmap_base_quick_push(%struct.VEC_bitmap_base* %cond26, %struct.bitmap_head_def* %9), !dbg !3421
  %call28 = call %struct.htab* @htab_create(i64 10, i32 (i8*)* @vtoe_hash, i32 (i8*, i8*)* @vtoe_eq, void (i8*)* @vtoe_free), !dbg !3422
  store %struct.htab* %call28, %struct.htab** %hempty, align 8, !dbg !3423
  %10 = load %struct.VEC_htab_t_heap*, %struct.VEC_htab_t_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 5), align 8, !dbg !3424
  %tobool29 = icmp ne %struct.VEC_htab_t_heap* %10, null, !dbg !3424
  br i1 %tobool29, label %cond.true30, label %cond.false32, !dbg !3424

cond.true30:                                      ; preds = %cond.end25
  %11 = load %struct.VEC_htab_t_heap*, %struct.VEC_htab_t_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 5), align 8, !dbg !3424
  %base31 = getelementptr inbounds %struct.VEC_htab_t_heap, %struct.VEC_htab_t_heap* %11, i32 0, i32 0, !dbg !3424
  br label %cond.end33, !dbg !3424

cond.false32:                                     ; preds = %cond.end25
  br label %cond.end33, !dbg !3424

cond.end33:                                       ; preds = %cond.false32, %cond.true30
  %cond34 = phi %struct.VEC_htab_t_base* [ %base31, %cond.true30 ], [ null, %cond.false32 ], !dbg !3424
  %12 = load %struct.htab*, %struct.htab** %hempty, align 8, !dbg !3424
  %call35 = call %struct.htab** @VEC_htab_t_base_quick_push(%struct.VEC_htab_t_base* %cond34, %struct.htab* %12), !dbg !3424
  br label %for.inc, !dbg !3425

for.inc:                                          ; preds = %cond.end33
  %13 = load i32, i32* %i, align 4, !dbg !3426
  %inc = add i32 %13, 1, !dbg !3426
  store i32 %inc, i32* %i, align 4, !dbg !3426
  br label %for.cond, !dbg !3427, !llvm.loop !3428

for.end:                                          ; preds = %for.cond
  store %struct.pointer_map_t* null, %struct.pointer_map_t** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 6), align 8, !dbg !3430
  call void @gather_mem_refs_in_loops(), !dbg !3431
  call void @create_vop_ref_mapping(), !dbg !3432
  ret void, !dbg !3433
}

; Function Attrs: noinline nounwind uwtable
define internal void @determine_invariantness() #0 !dbg !3434 {
entry:
  %walk_data = alloca %struct.dom_walk_data, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data* %walk_data, metadata !3435, metadata !DIExpression()), !dbg !3467
  %0 = bitcast %struct.dom_walk_data* %walk_data to i8*, !dbg !3468
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 64, i1 false), !dbg !3468
  %1 = bitcast %struct.dom_walk_data* %walk_data to i8*, !dbg !3469
  %bf.load = load i8, i8* %1, align 8, !dbg !3470
  %bf.clear = and i8 %bf.load, -4, !dbg !3470
  %bf.set = or i8 %bf.clear, 1, !dbg !3470
  store i8 %bf.set, i8* %1, align 8, !dbg !3470
  %before_dom_children = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 2, !dbg !3471
  store void (%struct.dom_walk_data*, %struct.basic_block_def*)* @determine_invariantness_stmt, void (%struct.dom_walk_data*, %struct.basic_block_def*)** %before_dom_children, align 8, !dbg !3472
  call void @init_walk_dominator_tree(%struct.dom_walk_data* %walk_data), !dbg !3473
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3474
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3474
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3474
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3474
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 0, !dbg !3474
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3474
  call void @walk_dominator_tree(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %4), !dbg !3475
  call void @fini_walk_dominator_tree(%struct.dom_walk_data* %walk_data), !dbg !3476
  ret void, !dbg !3477
}

; Function Attrs: noinline nounwind uwtable
define internal void @store_motion() #0 !dbg !3478 {
entry:
  %loop = alloca %struct.loop*, align 8
  %sm_executed = alloca %struct.bitmap_head_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3479, metadata !DIExpression()), !dbg !3480
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %sm_executed, metadata !3481, metadata !DIExpression()), !dbg !3482
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3483
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %sm_executed, align 8, !dbg !3482
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3484
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3484
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3484
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3484
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 3, !dbg !3486
  %2 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !3486
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 8, !dbg !3487
  %3 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3487
  store %struct.loop* %3, %struct.loop** %loop, align 8, !dbg !3488
  br label %for.cond, !dbg !3489

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3490
  %cmp = icmp ne %struct.loop* %4, null, !dbg !3492
  br i1 %cmp, label %for.body, label %for.end, !dbg !3493

for.body:                                         ; preds = %for.cond
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3494
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_executed, align 8, !dbg !3495
  call void @store_motion_loop(%struct.loop* %5, %struct.bitmap_head_def* %6), !dbg !3496
  br label %for.inc, !dbg !3496

for.inc:                                          ; preds = %for.body
  %7 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3497
  %next = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 9, !dbg !3498
  %8 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !3498
  store %struct.loop* %8, %struct.loop** %loop, align 8, !dbg !3499
  br label %for.cond, !dbg !3500, !llvm.loop !3501

for.end:                                          ; preds = %for.cond
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_executed, align 8, !dbg !3503
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %9), !dbg !3503
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %sm_executed, align 8, !dbg !3503
  call void @gsi_commit_edge_inserts(), !dbg !3504
  ret void, !dbg !3505
}

; Function Attrs: noinline nounwind uwtable
define internal void @move_computations() #0 !dbg !3506 {
entry:
  %walk_data = alloca %struct.dom_walk_data, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data* %walk_data, metadata !3507, metadata !DIExpression()), !dbg !3508
  %0 = bitcast %struct.dom_walk_data* %walk_data to i8*, !dbg !3509
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 64, i1 false), !dbg !3509
  %1 = bitcast %struct.dom_walk_data* %walk_data to i8*, !dbg !3510
  %bf.load = load i8, i8* %1, align 8, !dbg !3511
  %bf.clear = and i8 %bf.load, -4, !dbg !3511
  %bf.set = or i8 %bf.clear, 1, !dbg !3511
  store i8 %bf.set, i8* %1, align 8, !dbg !3511
  %before_dom_children = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 2, !dbg !3512
  store void (%struct.dom_walk_data*, %struct.basic_block_def*)* @move_computations_stmt, void (%struct.dom_walk_data*, %struct.basic_block_def*)** %before_dom_children, align 8, !dbg !3513
  call void @init_walk_dominator_tree(%struct.dom_walk_data* %walk_data), !dbg !3514
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3515
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3515
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3515
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3515
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 0, !dbg !3515
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3515
  call void @walk_dominator_tree(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %4), !dbg !3516
  call void @fini_walk_dominator_tree(%struct.dom_walk_data* %walk_data), !dbg !3517
  call void @gsi_commit_edge_inserts(), !dbg !3518
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3519
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3519
  %call = call zeroext i8 @need_ssa_update_p(%struct.function* %add.ptr1), !dbg !3521
  %tobool = icmp ne i8 %call, 0, !dbg !3521
  br i1 %tobool, label %if.then, label %if.end, !dbg !3522

if.then:                                          ; preds = %entry
  call void @rewrite_into_loop_closed_ssa(%struct.bitmap_head_def* null, i32 2048), !dbg !3523
  br label %if.end, !dbg !3523

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3524
}

; Function Attrs: noinline nounwind uwtable
define internal void @tree_ssa_lim_finalize() #0 !dbg !3525 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %b = alloca %struct.bitmap_head_def*, align 8
  %h = alloca %struct.htab*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3526, metadata !DIExpression()), !dbg !3527
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3528, metadata !DIExpression()), !dbg !3529
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %b, metadata !3530, metadata !DIExpression()), !dbg !3531
  call void @llvm.dbg.declare(metadata %struct.htab** %h, metadata !3532, metadata !DIExpression()), !dbg !3533
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3534
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3534
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3534
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3534
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3534
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3534
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !3534
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3534
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !3534
  br label %for.cond, !dbg !3534

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3536
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3536
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3536
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3536
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3536
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !3536
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3536
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !3536
  br i1 %cmp, label %for.body, label %for.end, !dbg !3534

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3538
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 2, !dbg !3540
  store i8* null, i8** %aux, align 8, !dbg !3541
  br label %for.inc, !dbg !3542

for.inc:                                          ; preds = %for.body
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3536
  %next_bb3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 6, !dbg !3536
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb3, align 8, !dbg !3536
  store %struct.basic_block_def* %10, %struct.basic_block_def** %bb, align 8, !dbg !3536
  br label %for.cond, !dbg !3536, !llvm.loop !3543

for.end:                                          ; preds = %for.cond
  %11 = load %struct.pointer_map_t*, %struct.pointer_map_t** @lim_aux_data_map, align 8, !dbg !3545
  call void @pointer_map_destroy(%struct.pointer_map_t* %11), !dbg !3546
  call void @VEC_mem_ref_p_heap_free(%struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1)), !dbg !3547
  %12 = load %struct.htab*, %struct.htab** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 0), align 8, !dbg !3548
  call void @htab_delete(%struct.htab* %12), !dbg !3549
  store i32 0, i32* %i, align 4, !dbg !3550
  br label %for.cond4, !dbg !3552

for.cond4:                                        ; preds = %for.inc7, %for.end
  %13 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2), align 8, !dbg !3553
  %tobool = icmp ne %struct.VEC_bitmap_heap* %13, null, !dbg !3553
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3553

cond.true:                                        ; preds = %for.cond4
  %14 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2), align 8, !dbg !3553
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %14, i32 0, i32 0, !dbg !3553
  br label %cond.end, !dbg !3553

cond.false:                                       ; preds = %for.cond4
  br label %cond.end, !dbg !3553

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3553
  %15 = load i32, i32* %i, align 4, !dbg !3553
  %call = call i32 @VEC_bitmap_base_iterate(%struct.VEC_bitmap_base* %cond, i32 %15, %struct.bitmap_head_def** %b), !dbg !3553
  %tobool5 = icmp ne i32 %call, 0, !dbg !3555
  br i1 %tobool5, label %for.body6, label %for.end8, !dbg !3555

for.body6:                                        ; preds = %cond.end
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %b, align 8, !dbg !3556
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %16), !dbg !3556
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %b, align 8, !dbg !3556
  br label %for.inc7, !dbg !3556

for.inc7:                                         ; preds = %for.body6
  %17 = load i32, i32* %i, align 4, !dbg !3557
  %inc = add i32 %17, 1, !dbg !3557
  store i32 %inc, i32* %i, align 4, !dbg !3557
  br label %for.cond4, !dbg !3558, !llvm.loop !3559

for.end8:                                         ; preds = %cond.end
  call void @VEC_bitmap_heap_free(%struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2)), !dbg !3561
  store i32 0, i32* %i, align 4, !dbg !3562
  br label %for.cond9, !dbg !3564

for.cond9:                                        ; preds = %for.inc19, %for.end8
  %18 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !3565
  %tobool10 = icmp ne %struct.VEC_bitmap_heap* %18, null, !dbg !3565
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !3565

cond.true11:                                      ; preds = %for.cond9
  %19 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !3565
  %base12 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %19, i32 0, i32 0, !dbg !3565
  br label %cond.end14, !dbg !3565

cond.false13:                                     ; preds = %for.cond9
  br label %cond.end14, !dbg !3565

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_bitmap_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !3565
  %20 = load i32, i32* %i, align 4, !dbg !3565
  %call16 = call i32 @VEC_bitmap_base_iterate(%struct.VEC_bitmap_base* %cond15, i32 %20, %struct.bitmap_head_def** %b), !dbg !3565
  %tobool17 = icmp ne i32 %call16, 0, !dbg !3567
  br i1 %tobool17, label %for.body18, label %for.end21, !dbg !3567

for.body18:                                       ; preds = %cond.end14
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %b, align 8, !dbg !3568
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %21), !dbg !3568
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %b, align 8, !dbg !3568
  br label %for.inc19, !dbg !3568

for.inc19:                                        ; preds = %for.body18
  %22 = load i32, i32* %i, align 4, !dbg !3569
  %inc20 = add i32 %22, 1, !dbg !3569
  store i32 %inc20, i32* %i, align 4, !dbg !3569
  br label %for.cond9, !dbg !3570, !llvm.loop !3571

for.end21:                                        ; preds = %cond.end14
  call void @VEC_bitmap_heap_free(%struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3)), !dbg !3573
  store i32 0, i32* %i, align 4, !dbg !3574
  br label %for.cond22, !dbg !3576

for.cond22:                                       ; preds = %for.inc32, %for.end21
  %23 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !3577
  %tobool23 = icmp ne %struct.VEC_bitmap_heap* %23, null, !dbg !3577
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !3577

cond.true24:                                      ; preds = %for.cond22
  %24 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !3577
  %base25 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %24, i32 0, i32 0, !dbg !3577
  br label %cond.end27, !dbg !3577

cond.false26:                                     ; preds = %for.cond22
  br label %cond.end27, !dbg !3577

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi %struct.VEC_bitmap_base* [ %base25, %cond.true24 ], [ null, %cond.false26 ], !dbg !3577
  %25 = load i32, i32* %i, align 4, !dbg !3577
  %call29 = call i32 @VEC_bitmap_base_iterate(%struct.VEC_bitmap_base* %cond28, i32 %25, %struct.bitmap_head_def** %b), !dbg !3577
  %tobool30 = icmp ne i32 %call29, 0, !dbg !3579
  br i1 %tobool30, label %for.body31, label %for.end34, !dbg !3579

for.body31:                                       ; preds = %cond.end27
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %b, align 8, !dbg !3580
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %26), !dbg !3580
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %b, align 8, !dbg !3580
  br label %for.inc32, !dbg !3580

for.inc32:                                        ; preds = %for.body31
  %27 = load i32, i32* %i, align 4, !dbg !3581
  %inc33 = add i32 %27, 1, !dbg !3581
  store i32 %inc33, i32* %i, align 4, !dbg !3581
  br label %for.cond22, !dbg !3582, !llvm.loop !3583

for.end34:                                        ; preds = %cond.end27
  call void @VEC_bitmap_heap_free(%struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4)), !dbg !3585
  store i32 0, i32* %i, align 4, !dbg !3586
  br label %for.cond35, !dbg !3588

for.cond35:                                       ; preds = %for.inc45, %for.end34
  %28 = load %struct.VEC_htab_t_heap*, %struct.VEC_htab_t_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 5), align 8, !dbg !3589
  %tobool36 = icmp ne %struct.VEC_htab_t_heap* %28, null, !dbg !3589
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !3589

cond.true37:                                      ; preds = %for.cond35
  %29 = load %struct.VEC_htab_t_heap*, %struct.VEC_htab_t_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 5), align 8, !dbg !3589
  %base38 = getelementptr inbounds %struct.VEC_htab_t_heap, %struct.VEC_htab_t_heap* %29, i32 0, i32 0, !dbg !3589
  br label %cond.end40, !dbg !3589

cond.false39:                                     ; preds = %for.cond35
  br label %cond.end40, !dbg !3589

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_htab_t_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !3589
  %30 = load i32, i32* %i, align 4, !dbg !3589
  %call42 = call i32 @VEC_htab_t_base_iterate(%struct.VEC_htab_t_base* %cond41, i32 %30, %struct.htab** %h), !dbg !3589
  %tobool43 = icmp ne i32 %call42, 0, !dbg !3591
  br i1 %tobool43, label %for.body44, label %for.end47, !dbg !3591

for.body44:                                       ; preds = %cond.end40
  %31 = load %struct.htab*, %struct.htab** %h, align 8, !dbg !3592
  call void @htab_delete(%struct.htab* %31), !dbg !3593
  br label %for.inc45, !dbg !3593

for.inc45:                                        ; preds = %for.body44
  %32 = load i32, i32* %i, align 4, !dbg !3594
  %inc46 = add i32 %32, 1, !dbg !3594
  store i32 %inc46, i32* %i, align 4, !dbg !3594
  br label %for.cond35, !dbg !3595, !llvm.loop !3596

for.end47:                                        ; preds = %cond.end40
  call void @VEC_htab_t_heap_free(%struct.VEC_htab_t_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 5)), !dbg !3598
  %33 = load %struct.pointer_map_t*, %struct.pointer_map_t** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 6), align 8, !dbg !3599
  %tobool48 = icmp ne %struct.pointer_map_t* %33, null, !dbg !3601
  br i1 %tobool48, label %if.then, label %if.end, !dbg !3602

if.then:                                          ; preds = %for.end47
  %34 = load %struct.pointer_map_t*, %struct.pointer_map_t** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 6), align 8, !dbg !3603
  call void @pointer_map_destroy(%struct.pointer_map_t* %34), !dbg !3604
  br label %if.end, !dbg !3604

if.end:                                           ; preds = %if.then, %for.end47
  ret void, !dbg !3605
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !3606 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3607, metadata !DIExpression()), !dbg !3608
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3609
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3610
  %cmp = icmp uge i32 %call, 6, !dbg !3611
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3612

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3613
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !3614
  %cmp2 = icmp ule i32 %call1, 9, !dbg !3615
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !3616
  %land.ext = zext i1 %2 to i32, !dbg !3612
  %conv = trunc i32 %land.ext to i8, !dbg !3610
  ret i8 %conv, !dbg !3617
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !3618 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3621, metadata !DIExpression()), !dbg !3622
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3623, metadata !DIExpression()), !dbg !3624
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3625
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !3627
  %tobool = icmp ne i8 %call, 0, !dbg !3627
  br i1 %tobool, label %if.then, label %if.else, !dbg !3628

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3629
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !3631
  %2 = load i32, i32* %i.addr, align 4, !dbg !3632
  %idxprom = zext i32 %2 to i64, !dbg !3631
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !3631
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3631
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !3633
  br label %return, !dbg !3633

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3634
  br label %return, !dbg !3634

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3635
  ret %union.tree_node* %4, !dbg !3635
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !3636 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3637, metadata !DIExpression()), !dbg !3638
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3639
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3640
  %cmp = icmp uge i32 %call, 1, !dbg !3641
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3642

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3643
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !3644
  %cmp2 = icmp ule i32 %call1, 9, !dbg !3645
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !3646
  %land.ext = zext i1 %2 to i32, !dbg !3642
  %conv = trunc i32 %land.ext to i8, !dbg !3640
  ret i8 %conv, !dbg !3647
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !3648 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3651, metadata !DIExpression()), !dbg !3652
  call void @llvm.dbg.declare(metadata i64* %off, metadata !3653, metadata !DIExpression()), !dbg !3654
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3655
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !3656
  %idxprom = zext i32 %call to i64, !dbg !3657
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !3657
  %1 = load i64, i64* %arrayidx, align 8, !dbg !3657
  store i64 %1, i64* %off, align 8, !dbg !3658
  %2 = load i64, i64* %off, align 8, !dbg !3659
  %cmp = icmp ne i64 %2, 0, !dbg !3659
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3659

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3659
  br label %cond.end, !dbg !3659

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3659

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3659
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3660
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !3661
  %5 = load i64, i64* %off, align 8, !dbg !3662
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !3663
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !3664
  ret %union.tree_node** %6, !dbg !3665
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !3666 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3669, metadata !DIExpression()), !dbg !3670
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3671
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3672
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !3673
  ret i32 %call1, !dbg !3674
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !3675 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3678, metadata !DIExpression()), !dbg !3679
  %0 = load i32, i32* %code.addr, align 4, !dbg !3680
  %idxprom = zext i32 %0 to i64, !dbg !3681
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !3681
  %1 = load i32, i32* %arrayidx, align 4, !dbg !3681
  ret i32 %1, !dbg !3682
}

declare dso_local i8* @get_name(%union.tree_node*) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i8* @strcpy(i8*, i8*) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !3683 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3686, metadata !DIExpression()), !dbg !3687
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3688, metadata !DIExpression()), !dbg !3689
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !3690, metadata !DIExpression()), !dbg !3691
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3692
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !3693
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !3694
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3695
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !3696
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !3697
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3698
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3699
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !3700
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !3701
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3702
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !3703
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !3704
  ret void, !dbg !3705
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3706 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3709, metadata !DIExpression()), !dbg !3710
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3711
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3711
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3712
  %conv = zext i1 %cmp to i32, !dbg !3712
  %conv1 = trunc i32 %conv to i8, !dbg !3713
  ret i8 %conv1, !dbg !3714
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @nonpure_call_p(%union.gimple_statement_d* %stmt) #0 !dbg !3715 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3718, metadata !DIExpression()), !dbg !3719
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3720
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3722
  %cmp = icmp ne i32 %call, 8, !dbg !3723
  br i1 %cmp, label %if.then, label %if.end, !dbg !3724

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3725
  br label %return, !dbg !3725

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3726
  %call1 = call zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d* %1), !dbg !3727
  store i8 %call1, i8* %retval, align 1, !dbg !3728
  br label %return, !dbg !3728

return:                                           ; preds = %if.end, %if.then
  %2 = load i8, i8* %retval, align 1, !dbg !3729
  ret i8 %2, !dbg !3729
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3730 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3733, metadata !DIExpression()), !dbg !3734
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3735
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3735
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !3736
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3736
  ret %union.gimple_statement_d* %1, !dbg !3737
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !3738 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !3742, metadata !DIExpression()), !dbg !3743
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3744
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !3745
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3745
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !3746
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !3746
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3747
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !3748
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !3749
  ret void, !dbg !3750
}

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !3751 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !3754, metadata !DIExpression()), !dbg !3755
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !3756, metadata !DIExpression()), !dbg !3757
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3758
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !3760
  %1 = load i8*, i8** %popcount, align 8, !dbg !3760
  %tobool = icmp ne i8* %1, null, !dbg !3758
  br i1 %tobool, label %if.then, label %if.end7, !dbg !3761

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !3762, metadata !DIExpression()), !dbg !3764
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3765
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !3765
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !3765
  %div = udiv i32 %3, 64, !dbg !3765
  %idxprom = zext i32 %div to i64, !dbg !3765
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !3765
  %4 = load i64, i64* %arrayidx, align 8, !dbg !3765
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !3765
  %rem = urem i32 %5, 64, !dbg !3765
  %sh_prom = zext i32 %rem to i64, !dbg !3765
  %shr = lshr i64 %4, %sh_prom, !dbg !3765
  %and = and i64 %shr, 1, !dbg !3765
  %conv = trunc i64 %and to i8, !dbg !3765
  store i8 %conv, i8* %oldbit, align 1, !dbg !3766
  %6 = load i8, i8* %oldbit, align 1, !dbg !3767
  %tobool1 = icmp ne i8 %6, 0, !dbg !3767
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !3769

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3770
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !3771
  %8 = load i8*, i8** %popcount3, align 8, !dbg !3771
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !3772
  %div4 = udiv i32 %9, 64, !dbg !3773
  %idxprom5 = zext i32 %div4 to i64, !dbg !3770
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !3770
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !3774
  %inc = add i8 %10, 1, !dbg !3774
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !3774
  br label %if.end, !dbg !3770

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !3775

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !3776
  %rem8 = urem i32 %11, 64, !dbg !3777
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !3778
  %shl = shl i64 1, %sh_prom9, !dbg !3778
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3779
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !3780
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !3781
  %div11 = udiv i32 %13, 64, !dbg !3782
  %idxprom12 = zext i32 %div11 to i64, !dbg !3779
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !3779
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !3783
  %or = or i64 %14, %shl, !dbg !3783
  store i64 %or, i64* %arrayidx13, align 8, !dbg !3783
  ret void, !dbg !3784
}

; Function Attrs: noinline nounwind uwtable
define internal void @fill_always_executed_in(%struct.loop* %loop, %struct.simple_bitmap_def* %contains_call) #0 !dbg !3785 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %contains_call.addr = alloca %struct.simple_bitmap_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %last = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %inn_loop = alloca %struct.loop*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3788, metadata !DIExpression()), !dbg !3789
  store %struct.simple_bitmap_def* %contains_call, %struct.simple_bitmap_def** %contains_call.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %contains_call.addr, metadata !3790, metadata !DIExpression()), !dbg !3791
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3792, metadata !DIExpression()), !dbg !3793
  store %struct.basic_block_def* null, %struct.basic_block_def** %bb, align 8, !dbg !3793
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !3794, metadata !DIExpression()), !dbg !3796
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last, metadata !3797, metadata !DIExpression()), !dbg !3798
  store %struct.basic_block_def* null, %struct.basic_block_def** %last, align 8, !dbg !3798
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3799, metadata !DIExpression()), !dbg !3800
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3801, metadata !DIExpression()), !dbg !3802
  call void @llvm.dbg.declare(metadata %struct.loop** %inn_loop, metadata !3803, metadata !DIExpression()), !dbg !3804
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3805
  store %struct.loop* %0, %struct.loop** %inn_loop, align 8, !dbg !3804
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3806
  %header = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 2, !dbg !3808
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3808
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 2, !dbg !3809
  %3 = load i8*, i8** %aux, align 8, !dbg !3809
  %tobool = icmp ne i8* %3, null, !dbg !3806
  br i1 %tobool, label %if.end48, label %if.then, !dbg !3810

if.then:                                          ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3811
  %call = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %4), !dbg !3813
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !3814
  store i32 0, i32* %i, align 4, !dbg !3815
  br label %for.cond, !dbg !3817

for.cond:                                         ; preds = %for.inc40, %if.then
  %5 = load i32, i32* %i, align 4, !dbg !3818
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3820
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 6, !dbg !3821
  %7 = load i32, i32* %num_nodes, align 4, !dbg !3821
  %cmp = icmp ult i32 %5, %7, !dbg !3822
  br i1 %cmp, label %for.body, label %for.end41, !dbg !3823

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3824, metadata !DIExpression()), !dbg !3832
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3833
  %9 = load i32, i32* %i, align 4, !dbg !3834
  %idxprom = zext i32 %9 to i64, !dbg !3833
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %8, i64 %idxprom, !dbg !3833
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3833
  store %struct.basic_block_def* %10, %struct.basic_block_def** %bb, align 8, !dbg !3835
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3836
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 3, !dbg !3838
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3838
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3839
  %call1 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %12, %struct.basic_block_def* %13), !dbg !3840
  %tobool2 = icmp ne i8 %call1, 0, !dbg !3840
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !3841

if.then3:                                         ; preds = %for.body
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3842
  store %struct.basic_block_def* %14, %struct.basic_block_def** %last, align 8, !dbg !3843
  br label %if.end, !dbg !3844

if.end:                                           ; preds = %if.then3, %for.body
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %contains_call.addr, align 8, !dbg !3845
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %15, i32 0, i32 3, !dbg !3845
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3845
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !3845
  %17 = load i32, i32* %index, align 8, !dbg !3845
  %div = udiv i32 %17, 64, !dbg !3845
  %idxprom4 = zext i32 %div to i64, !dbg !3845
  %arrayidx5 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom4, !dbg !3845
  %18 = load i64, i64* %arrayidx5, align 8, !dbg !3845
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3845
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 9, !dbg !3845
  %20 = load i32, i32* %index6, align 8, !dbg !3845
  %rem = urem i32 %20, 64, !dbg !3845
  %sh_prom = zext i32 %rem to i64, !dbg !3845
  %shr = lshr i64 %18, %sh_prom, !dbg !3845
  %and = and i64 %shr, 1, !dbg !3845
  %tobool7 = icmp ne i64 %and, 0, !dbg !3845
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !3847

if.then8:                                         ; preds = %if.end
  br label %for.end41, !dbg !3848

if.end9:                                          ; preds = %if.end
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3849
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 1, !dbg !3849
  %call10 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3849
  %22 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3849
  %23 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %22, i32 0, i32 0, !dbg !3849
  %24 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 0, !dbg !3849
  store i32 %24, i32* %23, align 8, !dbg !3849
  %25 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %22, i32 0, i32 1, !dbg !3849
  %26 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 1, !dbg !3849
  store %struct.VEC_edge_gc** %26, %struct.VEC_edge_gc*** %25, align 8, !dbg !3849
  %27 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3849
  %28 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3849
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 16, i1 false), !dbg !3849
  br label %for.cond11, !dbg !3849

for.cond11:                                       ; preds = %for.inc, %if.end9
  %29 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3851
  %30 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %29, i32 0, i32 0, !dbg !3851
  %31 = load i32, i32* %30, align 8, !dbg !3851
  %32 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %29, i32 0, i32 1, !dbg !3851
  %33 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %32, align 8, !dbg !3851
  %call12 = call zeroext i8 @ei_cond(i32 %31, %struct.VEC_edge_gc** %33, %struct.edge_def** %e), !dbg !3851
  %tobool13 = icmp ne i8 %call12, 0, !dbg !3849
  br i1 %tobool13, label %for.body14, label %for.end, !dbg !3849

for.body14:                                       ; preds = %for.cond11
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3853
  %35 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3855
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 1, !dbg !3856
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3856
  %call15 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %34, %struct.basic_block_def* %36), !dbg !3857
  %tobool16 = icmp ne i8 %call15, 0, !dbg !3857
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !3858

if.then17:                                        ; preds = %for.body14
  br label %for.end, !dbg !3859

if.end18:                                         ; preds = %for.body14
  br label %for.inc, !dbg !3860

for.inc:                                          ; preds = %if.end18
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3851
  br label %for.cond11, !dbg !3851, !llvm.loop !3861

for.end:                                          ; preds = %if.then17, %for.cond11
  %37 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3863
  %tobool19 = icmp ne %struct.edge_def* %37, null, !dbg !3863
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !3865

if.then20:                                        ; preds = %for.end
  br label %for.end41, !dbg !3866

if.end21:                                         ; preds = %for.end
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3867
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 13, !dbg !3869
  %39 = load i32, i32* %flags, align 8, !dbg !3869
  %and22 = and i32 %39, 4, !dbg !3870
  %tobool23 = icmp ne i32 %and22, 0, !dbg !3870
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !3871

if.then24:                                        ; preds = %if.end21
  br label %for.end41, !dbg !3872

if.end25:                                         ; preds = %if.end21
  %40 = load %struct.loop*, %struct.loop** %inn_loop, align 8, !dbg !3873
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3875
  %call26 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %40, %struct.basic_block_def* %41), !dbg !3876
  %tobool27 = icmp ne i8 %call26, 0, !dbg !3876
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !3877

if.then28:                                        ; preds = %if.end25
  br label %for.end41, !dbg !3878

if.end29:                                         ; preds = %if.end25
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3879
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 3, !dbg !3881
  %43 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3881
  %header30 = getelementptr inbounds %struct.loop, %struct.loop* %43, i32 0, i32 2, !dbg !3882
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %header30, align 8, !dbg !3882
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3883
  %cmp31 = icmp eq %struct.basic_block_def* %44, %45, !dbg !3884
  br i1 %cmp31, label %if.then32, label %if.end39, !dbg !3885

if.then32:                                        ; preds = %if.end29
  %46 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3886
  %latch33 = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 3, !dbg !3889
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %latch33, align 8, !dbg !3889
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3890
  %call34 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %47, %struct.basic_block_def* %48), !dbg !3891
  %tobool35 = icmp ne i8 %call34, 0, !dbg !3891
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !3892

if.then36:                                        ; preds = %if.then32
  br label %for.end41, !dbg !3893

if.end37:                                         ; preds = %if.then32
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3894
  %loop_father38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 3, !dbg !3895
  %50 = load %struct.loop*, %struct.loop** %loop_father38, align 8, !dbg !3895
  store %struct.loop* %50, %struct.loop** %inn_loop, align 8, !dbg !3896
  br label %if.end39, !dbg !3897

if.end39:                                         ; preds = %if.end37, %if.end29
  br label %for.inc40, !dbg !3898

for.inc40:                                        ; preds = %if.end39
  %51 = load i32, i32* %i, align 4, !dbg !3899
  %inc = add i32 %51, 1, !dbg !3899
  store i32 %inc, i32* %i, align 4, !dbg !3899
  br label %for.cond, !dbg !3900, !llvm.loop !3901

for.end41:                                        ; preds = %if.then36, %if.then28, %if.then24, %if.then20, %if.then8, %for.cond
  br label %while.body, !dbg !3903

while.body:                                       ; preds = %for.end41, %if.end46
  %52 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3904
  %53 = bitcast %struct.loop* %52 to i8*, !dbg !3904
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !3906
  %aux42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 2, !dbg !3907
  store i8* %53, i8** %aux42, align 8, !dbg !3908
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !3909
  %56 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3911
  %header43 = getelementptr inbounds %struct.loop, %struct.loop* %56, i32 0, i32 2, !dbg !3912
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %header43, align 8, !dbg !3912
  %cmp44 = icmp eq %struct.basic_block_def* %55, %57, !dbg !3913
  br i1 %cmp44, label %if.then45, label %if.end46, !dbg !3914

if.then45:                                        ; preds = %while.body
  br label %while.end, !dbg !3915

if.end46:                                         ; preds = %while.body
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !3916
  %call47 = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %58), !dbg !3917
  store %struct.basic_block_def* %call47, %struct.basic_block_def** %last, align 8, !dbg !3918
  br label %while.body, !dbg !3903, !llvm.loop !3919

while.end:                                        ; preds = %if.then45
  %59 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3921
  %60 = bitcast %struct.basic_block_def** %59 to i8*, !dbg !3921
  call void @free(i8* %60), !dbg !3922
  br label %if.end48, !dbg !3923

if.end48:                                         ; preds = %while.end, %entry
  %61 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3924
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %61, i32 0, i32 8, !dbg !3926
  %62 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3926
  store %struct.loop* %62, %struct.loop** %loop.addr, align 8, !dbg !3927
  br label %for.cond49, !dbg !3928

for.cond49:                                       ; preds = %for.inc52, %if.end48
  %63 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3929
  %tobool50 = icmp ne %struct.loop* %63, null, !dbg !3931
  br i1 %tobool50, label %for.body51, label %for.end53, !dbg !3931

for.body51:                                       ; preds = %for.cond49
  %64 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3932
  %65 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %contains_call.addr, align 8, !dbg !3933
  call void @fill_always_executed_in(%struct.loop* %64, %struct.simple_bitmap_def* %65), !dbg !3934
  br label %for.inc52, !dbg !3934

for.inc52:                                        ; preds = %for.body51
  %66 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3935
  %next = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 9, !dbg !3936
  %67 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !3936
  store %struct.loop* %67, %struct.loop** %loop.addr, align 8, !dbg !3937
  br label %for.cond49, !dbg !3938, !llvm.loop !3939

for.end53:                                        ; preds = %for.cond49
  ret void, !dbg !3941
}

declare dso_local void @free(i8*) #2

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !3942 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3948, metadata !DIExpression()), !dbg !3949
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3950
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !3951
  %1 = load i32, i32* %flags, align 8, !dbg !3951
  %and = and i32 %1, 512, !dbg !3952
  %tobool = icmp ne i32 %and, 0, !dbg !3952
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !3953

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3954
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !3955
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !3956
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !3956
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !3954
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !3957

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3958
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !3959
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !3960
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !3960
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !3961
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3961
  br label %cond.end, !dbg !3957

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !3957

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !3957
  ret %struct.gimple_seq_d* %cond, !dbg !3962
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !3963 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !3969, metadata !DIExpression()), !dbg !3970
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !3971
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !3971
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3971

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !3972
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !3973
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !3973
  br label %cond.end, !dbg !3971

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3971

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !3971
  ret %struct.gimple_seq_node_d* %cond, !dbg !3974
}

declare dso_local %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop*) #2

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !3975 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !3978, metadata !DIExpression()), !dbg !3979
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !3980, metadata !DIExpression()), !dbg !3981
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !3982
  store i32 0, i32* %index, align 8, !dbg !3983
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !3984
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !3985
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !3986
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !3987
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !3987
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !3987
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !3988 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3992, metadata !DIExpression()), !dbg !3993
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !3994, metadata !DIExpression()), !dbg !3995
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3996
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !3996
  %5 = load i32, i32* %4, align 8, !dbg !3996
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !3996
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !3996
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !3996
  %tobool = icmp ne i8 %call, 0, !dbg !3996
  br i1 %tobool, label %if.else, label %if.then, !dbg !3998

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3999
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !3999
  %10 = load i32, i32* %9, align 8, !dbg !3999
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !3999
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !3999
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !3999
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !4001
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !4002
  store i8 1, i8* %retval, align 1, !dbg !4003
  br label %return, !dbg !4003

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !4004
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !4006
  store i8 0, i8* %retval, align 1, !dbg !4007
  br label %return, !dbg !4007

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !4008
  ret i8 %15, !dbg !4008
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !4009 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !4013, metadata !DIExpression()), !dbg !4014
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4015
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !4015
  %1 = load i32, i32* %index, align 8, !dbg !4015
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4015
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !4015
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4015
  %5 = load i32, i32* %4, align 8, !dbg !4015
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4015
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4015
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4015
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !4015
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4015

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4015
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !4015
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !4015
  %11 = load i32, i32* %10, align 8, !dbg !4015
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !4015
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !4015
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !4015
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !4015
  br label %cond.end, !dbg !4015

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4015

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4015
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4015
  %cmp = icmp ult i32 %1, %call2, !dbg !4015
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !4015

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4015
  br label %cond.end5, !dbg !4015

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4015

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !4015
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4016
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !4017
  %15 = load i32, i32* %index7, align 8, !dbg !4018
  %inc = add i32 %15, 1, !dbg !4018
  store i32 %inc, i32* %index7, align 8, !dbg !4018
  ret void, !dbg !4019
}

declare dso_local %struct.basic_block_def* @get_immediate_dominator(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !4020 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !4023, metadata !DIExpression()), !dbg !4024
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !4025
  %3 = load i32, i32* %index, align 8, !dbg !4025
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4026
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !4026
  %6 = load i32, i32* %5, align 8, !dbg !4026
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !4026
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !4026
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !4026
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !4026
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4026

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4026
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !4026
  %11 = load i32, i32* %10, align 8, !dbg !4026
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !4026
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !4026
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !4026
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !4026
  br label %cond.end, !dbg !4026

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4026

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4026
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4026
  %cmp = icmp eq i32 %3, %call2, !dbg !4027
  %conv = zext i1 %cmp to i32, !dbg !4027
  %conv3 = trunc i32 %conv to i8, !dbg !4028
  ret i8 %conv3, !dbg !4029
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !4030 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !4033, metadata !DIExpression()), !dbg !4034
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4035
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4035
  %5 = load i32, i32* %4, align 8, !dbg !4035
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4035
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4035
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4035
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !4035
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4035

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4035
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !4035
  %10 = load i32, i32* %9, align 8, !dbg !4035
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !4035
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !4035
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !4035
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !4035
  br label %cond.end, !dbg !4035

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4035

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4035
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !4035
  %13 = load i32, i32* %index, align 8, !dbg !4035
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !4035
  ret %struct.edge_def* %call2, !dbg !4036
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !4037 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4042, metadata !DIExpression()), !dbg !4043
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4043
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4043
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4043

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4043
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !4043
  %2 = load i32, i32* %num, align 8, !dbg !4043
  br label %cond.end, !dbg !4043

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4043

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4043
  ret i32 %cond, !dbg !4043
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !4044 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !4047, metadata !DIExpression()), !dbg !4048
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !4049
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !4049
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !4049
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4049

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4049
  br label %cond.end, !dbg !4049

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4049

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4049
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !4050
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !4050
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !4051
  ret %struct.VEC_edge_gc* %5, !dbg !4052
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !4053 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4056, metadata !DIExpression()), !dbg !4057
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4058, metadata !DIExpression()), !dbg !4057
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4057
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4057
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4057

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4057
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4057
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !4057
  %3 = load i32, i32* %num, align 8, !dbg !4057
  %cmp = icmp ult i32 %1, %3, !dbg !4057
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4059
  %land.ext = zext i1 %4 to i32, !dbg !4057
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4057
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !4057
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4057
  %idxprom = zext i32 %6 to i64, !dbg !4057
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !4057
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4057
  ret %struct.edge_def* %7, !dbg !4057
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @memref_hash(i8* %obj) #0 !dbg !4060 {
entry:
  %obj.addr = alloca i8*, align 8
  %mem = alloca %struct.mem_ref*, align 8
  store i8* %obj, i8** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj.addr, metadata !4061, metadata !DIExpression()), !dbg !4062
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %mem, metadata !4063, metadata !DIExpression()), !dbg !4065
  %0 = load i8*, i8** %obj.addr, align 8, !dbg !4066
  %1 = bitcast i8* %0 to %struct.mem_ref*, !dbg !4067
  store %struct.mem_ref* %1, %struct.mem_ref** %mem, align 8, !dbg !4065
  %2 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4068
  %hash = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %2, i32 0, i32 2, !dbg !4069
  %3 = load i32, i32* %hash, align 4, !dbg !4069
  ret i32 %3, !dbg !4070
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @memref_eq(i8* %obj1, i8* %obj2) #0 !dbg !4071 {
entry:
  %obj1.addr = alloca i8*, align 8
  %obj2.addr = alloca i8*, align 8
  %mem1 = alloca %struct.mem_ref*, align 8
  store i8* %obj1, i8** %obj1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj1.addr, metadata !4072, metadata !DIExpression()), !dbg !4073
  store i8* %obj2, i8** %obj2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj2.addr, metadata !4074, metadata !DIExpression()), !dbg !4075
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %mem1, metadata !4076, metadata !DIExpression()), !dbg !4077
  %0 = load i8*, i8** %obj1.addr, align 8, !dbg !4078
  %1 = bitcast i8* %0 to %struct.mem_ref*, !dbg !4079
  store %struct.mem_ref* %1, %struct.mem_ref** %mem1, align 8, !dbg !4077
  %2 = load %struct.mem_ref*, %struct.mem_ref** %mem1, align 8, !dbg !4080
  %mem = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %2, i32 0, i32 0, !dbg !4081
  %3 = load %union.tree_node*, %union.tree_node** %mem, align 8, !dbg !4081
  %4 = load i8*, i8** %obj2.addr, align 8, !dbg !4082
  %5 = bitcast i8* %4 to %union.tree_node*, !dbg !4083
  %call = call i32 @operand_equal_p(%union.tree_node* %3, %union.tree_node* %5, i32 0), !dbg !4084
  ret i32 %call, !dbg !4085
}

; Function Attrs: noinline nounwind uwtable
define internal void @memref_free(i8* %obj) #0 !dbg !4086 {
entry:
  %obj.addr = alloca i8*, align 8
  %mem = alloca %struct.mem_ref*, align 8
  %i = alloca i32, align 4
  %accs = alloca %struct.mem_ref_locs*, align 8
  store i8* %obj, i8** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj.addr, metadata !4087, metadata !DIExpression()), !dbg !4088
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %mem, metadata !4089, metadata !DIExpression()), !dbg !4091
  %0 = load i8*, i8** %obj.addr, align 8, !dbg !4092
  %1 = bitcast i8* %0 to %struct.mem_ref*, !dbg !4093
  store %struct.mem_ref* %1, %struct.mem_ref** %mem, align 8, !dbg !4091
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4094, metadata !DIExpression()), !dbg !4095
  call void @llvm.dbg.declare(metadata %struct.mem_ref_locs** %accs, metadata !4096, metadata !DIExpression()), !dbg !4097
  %2 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4098
  %stored = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %2, i32 0, i32 3, !dbg !4098
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %stored, align 8, !dbg !4098
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %3), !dbg !4098
  %4 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4098
  %stored1 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %4, i32 0, i32 3, !dbg !4098
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %stored1, align 8, !dbg !4098
  %5 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4099
  %indep_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %5, i32 0, i32 6, !dbg !4099
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %indep_loop, align 8, !dbg !4099
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %6), !dbg !4099
  %7 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4099
  %indep_loop2 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %7, i32 0, i32 6, !dbg !4099
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %indep_loop2, align 8, !dbg !4099
  %8 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4100
  %dep_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %8, i32 0, i32 7, !dbg !4100
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dep_loop, align 8, !dbg !4100
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %9), !dbg !4100
  %10 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4100
  %dep_loop3 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %10, i32 0, i32 7, !dbg !4100
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %dep_loop3, align 8, !dbg !4100
  %11 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4101
  %indep_ref = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %11, i32 0, i32 8, !dbg !4101
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %indep_ref, align 8, !dbg !4101
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %12), !dbg !4101
  %13 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4101
  %indep_ref4 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %13, i32 0, i32 8, !dbg !4101
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %indep_ref4, align 8, !dbg !4101
  %14 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4102
  %dep_ref = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %14, i32 0, i32 9, !dbg !4102
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dep_ref, align 8, !dbg !4102
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %15), !dbg !4102
  %16 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4102
  %dep_ref5 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %16, i32 0, i32 9, !dbg !4102
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %dep_ref5, align 8, !dbg !4102
  store i32 0, i32* %i, align 4, !dbg !4103
  br label %for.cond, !dbg !4105

for.cond:                                         ; preds = %for.inc, %entry
  %17 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4106
  %accesses_in_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %17, i32 0, i32 4, !dbg !4106
  %18 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop, align 8, !dbg !4106
  %tobool = icmp ne %struct.VEC_mem_ref_locs_p_heap* %18, null, !dbg !4106
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4106

cond.true:                                        ; preds = %for.cond
  %19 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4106
  %accesses_in_loop6 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %19, i32 0, i32 4, !dbg !4106
  %20 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop6, align 8, !dbg !4106
  %base = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %20, i32 0, i32 0, !dbg !4106
  br label %cond.end, !dbg !4106

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4106

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_locs_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4106
  %21 = load i32, i32* %i, align 4, !dbg !4106
  %call = call i32 @VEC_mem_ref_locs_p_base_iterate(%struct.VEC_mem_ref_locs_p_base* %cond, i32 %21, %struct.mem_ref_locs** %accs), !dbg !4106
  %tobool7 = icmp ne i32 %call, 0, !dbg !4108
  br i1 %tobool7, label %for.body, label %for.end, !dbg !4108

for.body:                                         ; preds = %cond.end
  %22 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs, align 8, !dbg !4109
  call void @free_mem_ref_locs(%struct.mem_ref_locs* %22), !dbg !4110
  br label %for.inc, !dbg !4110

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %i, align 4, !dbg !4111
  %inc = add i32 %23, 1, !dbg !4111
  store i32 %inc, i32* %i, align 4, !dbg !4111
  br label %for.cond, !dbg !4112, !llvm.loop !4113

for.end:                                          ; preds = %cond.end
  %24 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4115
  %accesses_in_loop8 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %24, i32 0, i32 4, !dbg !4115
  call void @VEC_mem_ref_locs_p_heap_free(%struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop8), !dbg !4115
  %25 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4116
  %vops = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %25, i32 0, i32 5, !dbg !4116
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vops, align 8, !dbg !4116
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %26), !dbg !4116
  %27 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4116
  %vops9 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %27, i32 0, i32 5, !dbg !4116
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %vops9, align 8, !dbg !4116
  %28 = load %struct.mem_ref*, %struct.mem_ref** %mem, align 8, !dbg !4117
  %29 = bitcast %struct.mem_ref* %28 to i8*, !dbg !4117
  call void @free(i8* %29), !dbg !4118
  ret void, !dbg !4119
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_bitmap_heap* @VEC_bitmap_heap_alloc(i32 %alloc_) #0 !dbg !4120 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4123, metadata !DIExpression()), !dbg !4124
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4124
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !4124
  %1 = bitcast i8* %call to %struct.VEC_bitmap_heap*, !dbg !4124
  ret %struct.VEC_bitmap_heap* %1, !dbg !4124
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !4125 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4128
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4128
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !4128
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4128
  %tobool = icmp ne %struct.loops* %1, null, !dbg !4128
  br i1 %tobool, label %if.end, label %if.then, !dbg !4130

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4131
  br label %return, !dbg !4131

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4132
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4132
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !4132
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !4132
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !4132
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !4132
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !4132
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !4132

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4132
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4132
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !4132
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !4132
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !4132
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !4132
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !4132
  br label %cond.end, !dbg !4132

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4132

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4132
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !4132
  store i32 %call, i32* %retval, align 4, !dbg !4133
  br label %return, !dbg !4133

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !4134
  ret i32 %8, !dbg !4134
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_htab_t_heap* @VEC_htab_t_heap_alloc(i32 %alloc_) #0 !dbg !4135 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4138, metadata !DIExpression()), !dbg !4139
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4139
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !4139
  %1 = bitcast i8* %call to %struct.VEC_htab_t_heap*, !dbg !4139
  ret %struct.VEC_htab_t_heap* %1, !dbg !4139
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_head_def** @VEC_bitmap_base_quick_push(%struct.VEC_bitmap_base* %vec_, %struct.bitmap_head_def* %obj_) #0 !dbg !4140 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_base*, align 8
  %obj_.addr = alloca %struct.bitmap_head_def*, align 8
  %slot_ = alloca %struct.bitmap_head_def**, align 8
  store %struct.VEC_bitmap_base* %vec_, %struct.VEC_bitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_base** %vec_.addr, metadata !4145, metadata !DIExpression()), !dbg !4146
  store %struct.bitmap_head_def* %obj_, %struct.bitmap_head_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %obj_.addr, metadata !4147, metadata !DIExpression()), !dbg !4146
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %slot_, metadata !4148, metadata !DIExpression()), !dbg !4146
  %0 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !4146
  %num = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %0, i32 0, i32 0, !dbg !4146
  %1 = load i32, i32* %num, align 8, !dbg !4146
  %2 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !4146
  %alloc = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %2, i32 0, i32 1, !dbg !4146
  %3 = load i32, i32* %alloc, align 4, !dbg !4146
  %cmp = icmp ult i32 %1, %3, !dbg !4146
  %conv = zext i1 %cmp to i32, !dbg !4146
  %4 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !4146
  %vec = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %4, i32 0, i32 2, !dbg !4146
  %5 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !4146
  %num1 = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %5, i32 0, i32 0, !dbg !4146
  %6 = load i32, i32* %num1, align 8, !dbg !4146
  %inc = add i32 %6, 1, !dbg !4146
  store i32 %inc, i32* %num1, align 8, !dbg !4146
  %idxprom = zext i32 %6 to i64, !dbg !4146
  %arrayidx = getelementptr inbounds [1 x %struct.bitmap_head_def*], [1 x %struct.bitmap_head_def*]* %vec, i64 0, i64 %idxprom, !dbg !4146
  store %struct.bitmap_head_def** %arrayidx, %struct.bitmap_head_def*** %slot_, align 8, !dbg !4146
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %obj_.addr, align 8, !dbg !4146
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %slot_, align 8, !dbg !4146
  store %struct.bitmap_head_def* %7, %struct.bitmap_head_def** %8, align 8, !dbg !4146
  %9 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %slot_, align 8, !dbg !4146
  ret %struct.bitmap_head_def** %9, !dbg !4146
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vtoe_hash(i8* %obj) #0 !dbg !4149 {
entry:
  %obj.addr = alloca i8*, align 8
  %vtoe = alloca %struct.vop_to_refs_elt*, align 8
  store i8* %obj, i8** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj.addr, metadata !4150, metadata !DIExpression()), !dbg !4151
  call void @llvm.dbg.declare(metadata %struct.vop_to_refs_elt** %vtoe, metadata !4152, metadata !DIExpression()), !dbg !4154
  %0 = load i8*, i8** %obj.addr, align 8, !dbg !4155
  %1 = bitcast i8* %0 to %struct.vop_to_refs_elt*, !dbg !4156
  store %struct.vop_to_refs_elt* %1, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !4154
  %2 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !4157
  %uid = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %2, i32 0, i32 0, !dbg !4158
  %3 = load i32, i32* %uid, align 8, !dbg !4158
  ret i32 %3, !dbg !4159
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vtoe_eq(i8* %obj1, i8* %obj2) #0 !dbg !4160 {
entry:
  %obj1.addr = alloca i8*, align 8
  %obj2.addr = alloca i8*, align 8
  %vtoe = alloca %struct.vop_to_refs_elt*, align 8
  %uid = alloca i32*, align 8
  store i8* %obj1, i8** %obj1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj1.addr, metadata !4161, metadata !DIExpression()), !dbg !4162
  store i8* %obj2, i8** %obj2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj2.addr, metadata !4163, metadata !DIExpression()), !dbg !4164
  call void @llvm.dbg.declare(metadata %struct.vop_to_refs_elt** %vtoe, metadata !4165, metadata !DIExpression()), !dbg !4166
  %0 = load i8*, i8** %obj1.addr, align 8, !dbg !4167
  %1 = bitcast i8* %0 to %struct.vop_to_refs_elt*, !dbg !4168
  store %struct.vop_to_refs_elt* %1, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !4166
  call void @llvm.dbg.declare(metadata i32** %uid, metadata !4169, metadata !DIExpression()), !dbg !4171
  %2 = load i8*, i8** %obj2.addr, align 8, !dbg !4172
  %3 = bitcast i8* %2 to i32*, !dbg !4173
  store i32* %3, i32** %uid, align 8, !dbg !4171
  %4 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !4174
  %uid1 = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %4, i32 0, i32 0, !dbg !4175
  %5 = load i32, i32* %uid1, align 8, !dbg !4175
  %6 = load i32*, i32** %uid, align 8, !dbg !4176
  %7 = load i32, i32* %6, align 4, !dbg !4177
  %cmp = icmp eq i32 %5, %7, !dbg !4178
  %conv = zext i1 %cmp to i32, !dbg !4178
  ret i32 %conv, !dbg !4179
}

; Function Attrs: noinline nounwind uwtable
define internal void @vtoe_free(i8* %obj) #0 !dbg !4180 {
entry:
  %obj.addr = alloca i8*, align 8
  %vtoe = alloca %struct.vop_to_refs_elt*, align 8
  store i8* %obj, i8** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj.addr, metadata !4181, metadata !DIExpression()), !dbg !4182
  call void @llvm.dbg.declare(metadata %struct.vop_to_refs_elt** %vtoe, metadata !4183, metadata !DIExpression()), !dbg !4185
  %0 = load i8*, i8** %obj.addr, align 8, !dbg !4186
  %1 = bitcast i8* %0 to %struct.vop_to_refs_elt*, !dbg !4187
  store %struct.vop_to_refs_elt* %1, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !4185
  %2 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !4188
  %refs_all = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %2, i32 0, i32 1, !dbg !4188
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs_all, align 8, !dbg !4188
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %3), !dbg !4188
  %4 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !4188
  %refs_all1 = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %4, i32 0, i32 1, !dbg !4188
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %refs_all1, align 8, !dbg !4188
  %5 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !4189
  %refs_stored = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %5, i32 0, i32 2, !dbg !4189
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs_stored, align 8, !dbg !4189
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %6), !dbg !4189
  %7 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !4189
  %refs_stored2 = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %7, i32 0, i32 2, !dbg !4189
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %refs_stored2, align 8, !dbg !4189
  %8 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !4190
  %9 = bitcast %struct.vop_to_refs_elt* %8 to i8*, !dbg !4190
  call void @free(i8* %9), !dbg !4191
  ret void, !dbg !4192
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.htab** @VEC_htab_t_base_quick_push(%struct.VEC_htab_t_base* %vec_, %struct.htab* %obj_) #0 !dbg !4193 {
entry:
  %vec_.addr = alloca %struct.VEC_htab_t_base*, align 8
  %obj_.addr = alloca %struct.htab*, align 8
  %slot_ = alloca %struct.htab**, align 8
  store %struct.VEC_htab_t_base* %vec_, %struct.VEC_htab_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_htab_t_base** %vec_.addr, metadata !4198, metadata !DIExpression()), !dbg !4199
  store %struct.htab* %obj_, %struct.htab** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %obj_.addr, metadata !4200, metadata !DIExpression()), !dbg !4199
  call void @llvm.dbg.declare(metadata %struct.htab*** %slot_, metadata !4201, metadata !DIExpression()), !dbg !4199
  %0 = load %struct.VEC_htab_t_base*, %struct.VEC_htab_t_base** %vec_.addr, align 8, !dbg !4199
  %num = getelementptr inbounds %struct.VEC_htab_t_base, %struct.VEC_htab_t_base* %0, i32 0, i32 0, !dbg !4199
  %1 = load i32, i32* %num, align 8, !dbg !4199
  %2 = load %struct.VEC_htab_t_base*, %struct.VEC_htab_t_base** %vec_.addr, align 8, !dbg !4199
  %alloc = getelementptr inbounds %struct.VEC_htab_t_base, %struct.VEC_htab_t_base* %2, i32 0, i32 1, !dbg !4199
  %3 = load i32, i32* %alloc, align 4, !dbg !4199
  %cmp = icmp ult i32 %1, %3, !dbg !4199
  %conv = zext i1 %cmp to i32, !dbg !4199
  %4 = load %struct.VEC_htab_t_base*, %struct.VEC_htab_t_base** %vec_.addr, align 8, !dbg !4199
  %vec = getelementptr inbounds %struct.VEC_htab_t_base, %struct.VEC_htab_t_base* %4, i32 0, i32 2, !dbg !4199
  %5 = load %struct.VEC_htab_t_base*, %struct.VEC_htab_t_base** %vec_.addr, align 8, !dbg !4199
  %num1 = getelementptr inbounds %struct.VEC_htab_t_base, %struct.VEC_htab_t_base* %5, i32 0, i32 0, !dbg !4199
  %6 = load i32, i32* %num1, align 8, !dbg !4199
  %inc = add i32 %6, 1, !dbg !4199
  store i32 %inc, i32* %num1, align 8, !dbg !4199
  %idxprom = zext i32 %6 to i64, !dbg !4199
  %arrayidx = getelementptr inbounds [1 x %struct.htab*], [1 x %struct.htab*]* %vec, i64 0, i64 %idxprom, !dbg !4199
  store %struct.htab** %arrayidx, %struct.htab*** %slot_, align 8, !dbg !4199
  %7 = load %struct.htab*, %struct.htab** %obj_.addr, align 8, !dbg !4199
  %8 = load %struct.htab**, %struct.htab*** %slot_, align 8, !dbg !4199
  store %struct.htab* %7, %struct.htab** %8, align 8, !dbg !4199
  %9 = load %struct.htab**, %struct.htab*** %slot_, align 8, !dbg !4199
  ret %struct.htab** %9, !dbg !4199
}

; Function Attrs: noinline nounwind uwtable
define internal void @gather_mem_refs_in_loops() #0 !dbg !4202 {
entry:
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %loop = alloca %struct.loop*, align 8
  %li = alloca %struct.loop_iterator, align 8
  %clvo = alloca %struct.bitmap_head_def*, align 8
  %clvi = alloca %struct.bitmap_head_def*, align 8
  %lrefs = alloca %struct.bitmap_head_def*, align 8
  %alrefs = alloca %struct.bitmap_head_def*, align 8
  %alrefso = alloca %struct.bitmap_head_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4203, metadata !DIExpression()), !dbg !4204
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4205, metadata !DIExpression()), !dbg !4206
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4207, metadata !DIExpression()), !dbg !4208
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !4209, metadata !DIExpression()), !dbg !4215
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %clvo, metadata !4216, metadata !DIExpression()), !dbg !4217
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %clvi, metadata !4218, metadata !DIExpression()), !dbg !4219
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %lrefs, metadata !4220, metadata !DIExpression()), !dbg !4221
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %alrefs, metadata !4222, metadata !DIExpression()), !dbg !4223
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %alrefso, metadata !4224, metadata !DIExpression()), !dbg !4225
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4226
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4226
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4226
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4226
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4226
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4226
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4226
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4226
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !4226
  br label %for.cond, !dbg !4226

for.cond:                                         ; preds = %for.inc8, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4228
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4228
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4228
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4228
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4228
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4228
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4228
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4228
  br i1 %cmp, label %for.body, label %for.end10, !dbg !4226

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4230
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 3, !dbg !4232
  %9 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4232
  store %struct.loop* %9, %struct.loop** %loop, align 8, !dbg !4233
  %10 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4234
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4236
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !4236
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 4, !dbg !4236
  %12 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4236
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %12, i32 0, i32 3, !dbg !4237
  %13 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !4237
  %cmp4 = icmp eq %struct.loop* %10, %13, !dbg !4238
  br i1 %cmp4, label %if.then, label %if.end, !dbg !4239

if.then:                                          ; preds = %for.body
  br label %for.inc8, !dbg !4240

if.end:                                           ; preds = %for.body
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4241
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %14), !dbg !4243
  %15 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4243
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4243
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !4243
  br label %for.cond5, !dbg !4244

for.cond5:                                        ; preds = %for.inc, %if.end
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4245
  %tobool = icmp ne i8 %call, 0, !dbg !4247
  %lnot = xor i1 %tobool, true, !dbg !4247
  br i1 %lnot, label %for.body6, label %for.end, !dbg !4248

for.body6:                                        ; preds = %for.cond5
  %17 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4249
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4250
  call void @gather_mem_refs_stmt(%struct.loop* %17, %union.gimple_statement_d* %call7), !dbg !4251
  br label %for.inc, !dbg !4251

for.inc:                                          ; preds = %for.body6
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !4252
  br label %for.cond5, !dbg !4253, !llvm.loop !4254

for.end:                                          ; preds = %for.cond5
  br label %for.inc8, !dbg !4256

for.inc8:                                         ; preds = %for.end, %if.then
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4228
  %next_bb9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 6, !dbg !4228
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb9, align 8, !dbg !4228
  store %struct.basic_block_def* %19, %struct.basic_block_def** %bb, align 8, !dbg !4228
  br label %for.cond, !dbg !4228, !llvm.loop !4257

for.end10:                                        ; preds = %for.cond
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 2), !dbg !4259
  br label %for.cond11, !dbg !4259

for.cond11:                                       ; preds = %for.inc60, %for.end10
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4261
  %tobool12 = icmp ne %struct.loop* %20, null, !dbg !4259
  br i1 %tobool12, label %for.body13, label %for.end61, !dbg !4259

for.body13:                                       ; preds = %for.cond11
  %21 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2), align 8, !dbg !4263
  %tobool14 = icmp ne %struct.VEC_bitmap_heap* %21, null, !dbg !4263
  br i1 %tobool14, label %cond.true, label %cond.false, !dbg !4263

cond.true:                                        ; preds = %for.body13
  %22 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2), align 8, !dbg !4263
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %22, i32 0, i32 0, !dbg !4263
  br label %cond.end, !dbg !4263

cond.false:                                       ; preds = %for.body13
  br label %cond.end, !dbg !4263

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4263
  %23 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4263
  %num = getelementptr inbounds %struct.loop, %struct.loop* %23, i32 0, i32 0, !dbg !4263
  %24 = load i32, i32* %num, align 8, !dbg !4263
  %call15 = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond, i32 %24), !dbg !4263
  store %struct.bitmap_head_def* %call15, %struct.bitmap_head_def** %lrefs, align 8, !dbg !4265
  %25 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !4266
  %tobool16 = icmp ne %struct.VEC_bitmap_heap* %25, null, !dbg !4266
  br i1 %tobool16, label %cond.true17, label %cond.false19, !dbg !4266

cond.true17:                                      ; preds = %cond.end
  %26 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !4266
  %base18 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %26, i32 0, i32 0, !dbg !4266
  br label %cond.end20, !dbg !4266

cond.false19:                                     ; preds = %cond.end
  br label %cond.end20, !dbg !4266

cond.end20:                                       ; preds = %cond.false19, %cond.true17
  %cond21 = phi %struct.VEC_bitmap_base* [ %base18, %cond.true17 ], [ null, %cond.false19 ], !dbg !4266
  %27 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4266
  %num22 = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 0, !dbg !4266
  %28 = load i32, i32* %num22, align 8, !dbg !4266
  %call23 = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond21, i32 %28), !dbg !4266
  store %struct.bitmap_head_def* %call23, %struct.bitmap_head_def** %alrefs, align 8, !dbg !4267
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %alrefs, align 8, !dbg !4268
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lrefs, align 8, !dbg !4269
  %call24 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %29, %struct.bitmap_head_def* %30), !dbg !4270
  %31 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4271
  %call25 = call %struct.loop* @loop_outer(%struct.loop* %31), !dbg !4273
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4274
  %add.ptr26 = getelementptr inbounds %struct.function, %struct.function* %32, i64 0, !dbg !4274
  %x_current_loops27 = getelementptr inbounds %struct.function, %struct.function* %add.ptr26, i32 0, i32 4, !dbg !4274
  %33 = load %struct.loops*, %struct.loops** %x_current_loops27, align 8, !dbg !4274
  %tree_root28 = getelementptr inbounds %struct.loops, %struct.loops* %33, i32 0, i32 3, !dbg !4275
  %34 = load %struct.loop*, %struct.loop** %tree_root28, align 8, !dbg !4275
  %cmp29 = icmp eq %struct.loop* %call25, %34, !dbg !4276
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !4277

if.then30:                                        ; preds = %cond.end20
  br label %for.inc60, !dbg !4278

if.end31:                                         ; preds = %cond.end20
  %35 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !4279
  %tobool32 = icmp ne %struct.VEC_bitmap_heap* %35, null, !dbg !4279
  br i1 %tobool32, label %cond.true33, label %cond.false35, !dbg !4279

cond.true33:                                      ; preds = %if.end31
  %36 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !4279
  %base34 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %36, i32 0, i32 0, !dbg !4279
  br label %cond.end36, !dbg !4279

cond.false35:                                     ; preds = %if.end31
  br label %cond.end36, !dbg !4279

cond.end36:                                       ; preds = %cond.false35, %cond.true33
  %cond37 = phi %struct.VEC_bitmap_base* [ %base34, %cond.true33 ], [ null, %cond.false35 ], !dbg !4279
  %37 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4279
  %num38 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !4279
  %38 = load i32, i32* %num38, align 8, !dbg !4279
  %call39 = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond37, i32 %38), !dbg !4279
  store %struct.bitmap_head_def* %call39, %struct.bitmap_head_def** %clvi, align 8, !dbg !4280
  %39 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !4281
  %tobool40 = icmp ne %struct.VEC_bitmap_heap* %39, null, !dbg !4281
  br i1 %tobool40, label %cond.true41, label %cond.false43, !dbg !4281

cond.true41:                                      ; preds = %cond.end36
  %40 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !4281
  %base42 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %40, i32 0, i32 0, !dbg !4281
  br label %cond.end44, !dbg !4281

cond.false43:                                     ; preds = %cond.end36
  br label %cond.end44, !dbg !4281

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi %struct.VEC_bitmap_base* [ %base42, %cond.true41 ], [ null, %cond.false43 ], !dbg !4281
  %41 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4281
  %call46 = call %struct.loop* @loop_outer(%struct.loop* %41), !dbg !4281
  %num47 = getelementptr inbounds %struct.loop, %struct.loop* %call46, i32 0, i32 0, !dbg !4281
  %42 = load i32, i32* %num47, align 8, !dbg !4281
  %call48 = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond45, i32 %42), !dbg !4281
  store %struct.bitmap_head_def* %call48, %struct.bitmap_head_def** %clvo, align 8, !dbg !4282
  %43 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %clvo, align 8, !dbg !4283
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %clvi, align 8, !dbg !4284
  %call49 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %43, %struct.bitmap_head_def* %44), !dbg !4285
  %45 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !4286
  %tobool50 = icmp ne %struct.VEC_bitmap_heap* %45, null, !dbg !4286
  br i1 %tobool50, label %cond.true51, label %cond.false53, !dbg !4286

cond.true51:                                      ; preds = %cond.end44
  %46 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !4286
  %base52 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %46, i32 0, i32 0, !dbg !4286
  br label %cond.end54, !dbg !4286

cond.false53:                                     ; preds = %cond.end44
  br label %cond.end54, !dbg !4286

cond.end54:                                       ; preds = %cond.false53, %cond.true51
  %cond55 = phi %struct.VEC_bitmap_base* [ %base52, %cond.true51 ], [ null, %cond.false53 ], !dbg !4286
  %47 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4286
  %call56 = call %struct.loop* @loop_outer(%struct.loop* %47), !dbg !4286
  %num57 = getelementptr inbounds %struct.loop, %struct.loop* %call56, i32 0, i32 0, !dbg !4286
  %48 = load i32, i32* %num57, align 8, !dbg !4286
  %call58 = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond55, i32 %48), !dbg !4286
  store %struct.bitmap_head_def* %call58, %struct.bitmap_head_def** %alrefso, align 8, !dbg !4287
  %49 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %alrefso, align 8, !dbg !4288
  %50 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %alrefs, align 8, !dbg !4289
  %call59 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %49, %struct.bitmap_head_def* %50), !dbg !4290
  br label %for.inc60, !dbg !4291

for.inc60:                                        ; preds = %cond.end54, %if.then30
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !4261
  br label %for.cond11, !dbg !4261, !llvm.loop !4292

for.end61:                                        ; preds = %for.cond11
  ret void, !dbg !4294
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_vop_ref_mapping() #0 !dbg !4295 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !4296, metadata !DIExpression()), !dbg !4297
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4298, metadata !DIExpression()), !dbg !4299
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !4300
  br label %for.cond, !dbg !4300

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4302
  %tobool = icmp ne %struct.loop* %0, null, !dbg !4300
  br i1 %tobool, label %for.body, label %for.end, !dbg !4300

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4304
  call void @create_vop_ref_mapping_loop(%struct.loop* %1), !dbg !4306
  br label %for.inc, !dbg !4307

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !4302
  br label %for.cond, !dbg !4302, !llvm.loop !4308

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4310
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_mem_ref_locs_p_base_iterate(%struct.VEC_mem_ref_locs_p_base* %vec_, i32 %ix_, %struct.mem_ref_locs** %ptr) #0 !dbg !4311 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_mem_ref_locs_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.mem_ref_locs**, align 8
  store %struct.VEC_mem_ref_locs_p_base* %vec_, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_locs_p_base** %vec_.addr, metadata !4317, metadata !DIExpression()), !dbg !4318
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4319, metadata !DIExpression()), !dbg !4318
  store %struct.mem_ref_locs** %ptr, %struct.mem_ref_locs*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref_locs*** %ptr.addr, metadata !4320, metadata !DIExpression()), !dbg !4318
  %0 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !4321
  %tobool = icmp ne %struct.VEC_mem_ref_locs_p_base* %0, null, !dbg !4321
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4321

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4321
  %2 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !4321
  %num = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %2, i32 0, i32 0, !dbg !4321
  %3 = load i32, i32* %num, align 8, !dbg !4321
  %cmp = icmp ult i32 %1, %3, !dbg !4321
  br i1 %cmp, label %if.then, label %if.else, !dbg !4318

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !4323
  %vec = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %4, i32 0, i32 2, !dbg !4323
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4323
  %idxprom = zext i32 %5 to i64, !dbg !4323
  %arrayidx = getelementptr inbounds [1 x %struct.mem_ref_locs*], [1 x %struct.mem_ref_locs*]* %vec, i64 0, i64 %idxprom, !dbg !4323
  %6 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %arrayidx, align 8, !dbg !4323
  %7 = load %struct.mem_ref_locs**, %struct.mem_ref_locs*** %ptr.addr, align 8, !dbg !4323
  store %struct.mem_ref_locs* %6, %struct.mem_ref_locs** %7, align 8, !dbg !4323
  store i32 1, i32* %retval, align 4, !dbg !4323
  br label %return, !dbg !4323

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.mem_ref_locs**, %struct.mem_ref_locs*** %ptr.addr, align 8, !dbg !4325
  store %struct.mem_ref_locs* null, %struct.mem_ref_locs** %8, align 8, !dbg !4325
  store i32 0, i32* %retval, align 4, !dbg !4325
  br label %return, !dbg !4325

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4318
  ret i32 %9, !dbg !4318
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_mem_ref_locs(%struct.mem_ref_locs* %accs) #0 !dbg !4327 {
entry:
  %accs.addr = alloca %struct.mem_ref_locs*, align 8
  %i = alloca i32, align 4
  %loc = alloca %struct.mem_ref_loc*, align 8
  store %struct.mem_ref_locs* %accs, %struct.mem_ref_locs** %accs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref_locs** %accs.addr, metadata !4330, metadata !DIExpression()), !dbg !4331
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4332, metadata !DIExpression()), !dbg !4333
  call void @llvm.dbg.declare(metadata %struct.mem_ref_loc** %loc, metadata !4334, metadata !DIExpression()), !dbg !4335
  %0 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs.addr, align 8, !dbg !4336
  %tobool = icmp ne %struct.mem_ref_locs* %0, null, !dbg !4336
  br i1 %tobool, label %if.end, label %if.then, !dbg !4338

if.then:                                          ; preds = %entry
  br label %return, !dbg !4339

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4340
  br label %for.cond, !dbg !4342

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs.addr, align 8, !dbg !4343
  %locs = getelementptr inbounds %struct.mem_ref_locs, %struct.mem_ref_locs* %1, i32 0, i32 0, !dbg !4343
  %2 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %locs, align 8, !dbg !4343
  %tobool1 = icmp ne %struct.VEC_mem_ref_loc_p_heap* %2, null, !dbg !4343
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !4343

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs.addr, align 8, !dbg !4343
  %locs2 = getelementptr inbounds %struct.mem_ref_locs, %struct.mem_ref_locs* %3, i32 0, i32 0, !dbg !4343
  %4 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %locs2, align 8, !dbg !4343
  %base = getelementptr inbounds %struct.VEC_mem_ref_loc_p_heap, %struct.VEC_mem_ref_loc_p_heap* %4, i32 0, i32 0, !dbg !4343
  br label %cond.end, !dbg !4343

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4343

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_loc_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4343
  %5 = load i32, i32* %i, align 4, !dbg !4343
  %call = call i32 @VEC_mem_ref_loc_p_base_iterate(%struct.VEC_mem_ref_loc_p_base* %cond, i32 %5, %struct.mem_ref_loc** %loc), !dbg !4343
  %tobool3 = icmp ne i32 %call, 0, !dbg !4345
  br i1 %tobool3, label %for.body, label %for.end, !dbg !4345

for.body:                                         ; preds = %cond.end
  %6 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %loc, align 8, !dbg !4346
  %7 = bitcast %struct.mem_ref_loc* %6 to i8*, !dbg !4346
  call void @free(i8* %7), !dbg !4347
  br label %for.inc, !dbg !4347

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !4348
  %inc = add i32 %8, 1, !dbg !4348
  store i32 %inc, i32* %i, align 4, !dbg !4348
  br label %for.cond, !dbg !4349, !llvm.loop !4350

for.end:                                          ; preds = %cond.end
  %9 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs.addr, align 8, !dbg !4352
  %locs4 = getelementptr inbounds %struct.mem_ref_locs, %struct.mem_ref_locs* %9, i32 0, i32 0, !dbg !4352
  call void @VEC_mem_ref_loc_p_heap_free(%struct.VEC_mem_ref_loc_p_heap** %locs4), !dbg !4352
  %10 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs.addr, align 8, !dbg !4353
  %11 = bitcast %struct.mem_ref_locs* %10 to i8*, !dbg !4353
  call void @free(i8* %11), !dbg !4354
  br label %return, !dbg !4355

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !4355
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_mem_ref_locs_p_heap_free(%struct.VEC_mem_ref_locs_p_heap** %vec_) #0 !dbg !4356 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_locs_p_heap**, align 8
  store %struct.VEC_mem_ref_locs_p_heap** %vec_, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, metadata !4360, metadata !DIExpression()), !dbg !4361
  %0 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !4362
  %1 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %0, align 8, !dbg !4362
  %tobool = icmp ne %struct.VEC_mem_ref_locs_p_heap* %1, null, !dbg !4362
  br i1 %tobool, label %if.then, label %if.end, !dbg !4361

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !4362
  %3 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %2, align 8, !dbg !4362
  %4 = bitcast %struct.VEC_mem_ref_locs_p_heap* %3 to i8*, !dbg !4362
  call void @free(i8* %4), !dbg !4362
  br label %if.end, !dbg !4362

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !4361
  store %struct.VEC_mem_ref_locs_p_heap* null, %struct.VEC_mem_ref_locs_p_heap** %5, align 8, !dbg !4361
  ret void, !dbg !4361
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_mem_ref_loc_p_base_iterate(%struct.VEC_mem_ref_loc_p_base* %vec_, i32 %ix_, %struct.mem_ref_loc** %ptr) #0 !dbg !4364 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_mem_ref_loc_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.mem_ref_loc**, align 8
  store %struct.VEC_mem_ref_loc_p_base* %vec_, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_loc_p_base** %vec_.addr, metadata !4370, metadata !DIExpression()), !dbg !4371
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4372, metadata !DIExpression()), !dbg !4371
  store %struct.mem_ref_loc** %ptr, %struct.mem_ref_loc*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref_loc*** %ptr.addr, metadata !4373, metadata !DIExpression()), !dbg !4371
  %0 = load %struct.VEC_mem_ref_loc_p_base*, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8, !dbg !4374
  %tobool = icmp ne %struct.VEC_mem_ref_loc_p_base* %0, null, !dbg !4374
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4374

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4374
  %2 = load %struct.VEC_mem_ref_loc_p_base*, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8, !dbg !4374
  %num = getelementptr inbounds %struct.VEC_mem_ref_loc_p_base, %struct.VEC_mem_ref_loc_p_base* %2, i32 0, i32 0, !dbg !4374
  %3 = load i32, i32* %num, align 8, !dbg !4374
  %cmp = icmp ult i32 %1, %3, !dbg !4374
  br i1 %cmp, label %if.then, label %if.else, !dbg !4371

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_mem_ref_loc_p_base*, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8, !dbg !4376
  %vec = getelementptr inbounds %struct.VEC_mem_ref_loc_p_base, %struct.VEC_mem_ref_loc_p_base* %4, i32 0, i32 2, !dbg !4376
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4376
  %idxprom = zext i32 %5 to i64, !dbg !4376
  %arrayidx = getelementptr inbounds [1 x %struct.mem_ref_loc*], [1 x %struct.mem_ref_loc*]* %vec, i64 0, i64 %idxprom, !dbg !4376
  %6 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %arrayidx, align 8, !dbg !4376
  %7 = load %struct.mem_ref_loc**, %struct.mem_ref_loc*** %ptr.addr, align 8, !dbg !4376
  store %struct.mem_ref_loc* %6, %struct.mem_ref_loc** %7, align 8, !dbg !4376
  store i32 1, i32* %retval, align 4, !dbg !4376
  br label %return, !dbg !4376

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.mem_ref_loc**, %struct.mem_ref_loc*** %ptr.addr, align 8, !dbg !4378
  store %struct.mem_ref_loc* null, %struct.mem_ref_loc** %8, align 8, !dbg !4378
  store i32 0, i32* %retval, align 4, !dbg !4378
  br label %return, !dbg !4378

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4371
  ret i32 %9, !dbg !4371
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_mem_ref_loc_p_heap_free(%struct.VEC_mem_ref_loc_p_heap** %vec_) #0 !dbg !4380 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_loc_p_heap**, align 8
  store %struct.VEC_mem_ref_loc_p_heap** %vec_, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, metadata !4384, metadata !DIExpression()), !dbg !4385
  %0 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8, !dbg !4386
  %1 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %0, align 8, !dbg !4386
  %tobool = icmp ne %struct.VEC_mem_ref_loc_p_heap* %1, null, !dbg !4386
  br i1 %tobool, label %if.then, label %if.end, !dbg !4385

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8, !dbg !4386
  %3 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %2, align 8, !dbg !4386
  %4 = bitcast %struct.VEC_mem_ref_loc_p_heap* %3 to i8*, !dbg !4386
  call void @free(i8* %4), !dbg !4386
  br label %if.end, !dbg !4386

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8, !dbg !4385
  store %struct.VEC_mem_ref_loc_p_heap* null, %struct.VEC_mem_ref_loc_p_heap** %5, align 8, !dbg !4385
  ret void, !dbg !4385
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !4388 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !4393, metadata !DIExpression()), !dbg !4394
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4394
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !4394
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4394

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4394
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !4394
  %2 = load i32, i32* %num, align 8, !dbg !4394
  br label %cond.end, !dbg !4394

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4394

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4394
  ret i32 %cond, !dbg !4394
}

; Function Attrs: noinline nounwind uwtable
define internal void @gather_mem_refs_stmt(%struct.loop* %loop, %union.gimple_statement_d* %stmt) #0 !dbg !4395 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %mem = alloca %union.tree_node**, align 8
  %hash = alloca i32, align 4
  %slot = alloca i8**, align 8
  %ref = alloca %struct.mem_ref*, align 8
  %vname = alloca %union.tree_node*, align 8
  %is_stored = alloca i8, align 1
  %clvops = alloca %struct.bitmap_head_def*, align 8
  %id = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4398, metadata !DIExpression()), !dbg !4399
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4400, metadata !DIExpression()), !dbg !4401
  call void @llvm.dbg.declare(metadata %union.tree_node*** %mem, metadata !4402, metadata !DIExpression()), !dbg !4403
  store %union.tree_node** null, %union.tree_node*** %mem, align 8, !dbg !4403
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !4404, metadata !DIExpression()), !dbg !4405
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4406, metadata !DIExpression()), !dbg !4407
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref, metadata !4408, metadata !DIExpression()), !dbg !4409
  call void @llvm.dbg.declare(metadata %union.tree_node** %vname, metadata !4410, metadata !DIExpression()), !dbg !4411
  call void @llvm.dbg.declare(metadata i8* %is_stored, metadata !4412, metadata !DIExpression()), !dbg !4413
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %clvops, metadata !4414, metadata !DIExpression()), !dbg !4415
  call void @llvm.dbg.declare(metadata i32* %id, metadata !4416, metadata !DIExpression()), !dbg !4417
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4418
  %call = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %0), !dbg !4420
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !4420
  br i1 %tobool, label %if.end, label %if.then, !dbg !4421

if.then:                                          ; preds = %entry
  br label %if.end44, !dbg !4422

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4423
  %call1 = call %union.tree_node** @simple_mem_ref_in_stmt(%union.gimple_statement_d* %1, i8* %is_stored), !dbg !4424
  store %union.tree_node** %call1, %union.tree_node*** %mem, align 8, !dbg !4425
  %2 = load %union.tree_node**, %union.tree_node*** %mem, align 8, !dbg !4426
  %tobool2 = icmp ne %union.tree_node** %2, null, !dbg !4426
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !4428

if.then3:                                         ; preds = %if.end
  br label %fail, !dbg !4429

if.end4:                                          ; preds = %if.end
  %3 = load %union.tree_node**, %union.tree_node*** %mem, align 8, !dbg !4430
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !4431
  %call5 = call i32 @iterative_hash_expr(%union.tree_node* %4, i32 0), !dbg !4432
  store i32 %call5, i32* %hash, align 4, !dbg !4433
  %5 = load %struct.htab*, %struct.htab** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 0), align 8, !dbg !4434
  %6 = load %union.tree_node**, %union.tree_node*** %mem, align 8, !dbg !4435
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !4436
  %8 = bitcast %union.tree_node* %7 to i8*, !dbg !4436
  %9 = load i32, i32* %hash, align 4, !dbg !4437
  %call6 = call i8** @htab_find_slot_with_hash(%struct.htab* %5, i8* %8, i32 %9, i32 1), !dbg !4438
  store i8** %call6, i8*** %slot, align 8, !dbg !4439
  %10 = load i8**, i8*** %slot, align 8, !dbg !4440
  %11 = load i8*, i8** %10, align 8, !dbg !4442
  %tobool7 = icmp ne i8* %11, null, !dbg !4442
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !4443

if.then8:                                         ; preds = %if.end4
  %12 = load i8**, i8*** %slot, align 8, !dbg !4444
  %13 = load i8*, i8** %12, align 8, !dbg !4446
  %14 = bitcast i8* %13 to %struct.mem_ref*, !dbg !4447
  store %struct.mem_ref* %14, %struct.mem_ref** %ref, align 8, !dbg !4448
  %15 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4449
  %id9 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %15, i32 0, i32 1, !dbg !4450
  %16 = load i32, i32* %id9, align 8, !dbg !4450
  store i32 %16, i32* %id, align 4, !dbg !4451
  br label %if.end21, !dbg !4452

if.else:                                          ; preds = %if.end4
  %17 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), align 8, !dbg !4453
  %tobool10 = icmp ne %struct.VEC_mem_ref_p_heap* %17, null, !dbg !4453
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !4453

cond.true:                                        ; preds = %if.else
  %18 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), align 8, !dbg !4453
  %base = getelementptr inbounds %struct.VEC_mem_ref_p_heap, %struct.VEC_mem_ref_p_heap* %18, i32 0, i32 0, !dbg !4453
  br label %cond.end, !dbg !4453

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !4453

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4453
  %call11 = call i32 @VEC_mem_ref_p_base_length(%struct.VEC_mem_ref_p_base* %cond), !dbg !4453
  store i32 %call11, i32* %id, align 4, !dbg !4455
  %19 = load %union.tree_node**, %union.tree_node*** %mem, align 8, !dbg !4456
  %20 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !4457
  %21 = load i32, i32* %hash, align 4, !dbg !4458
  %22 = load i32, i32* %id, align 4, !dbg !4459
  %call12 = call %struct.mem_ref* @mem_ref_alloc(%union.tree_node* %20, i32 %21, i32 %22), !dbg !4460
  store %struct.mem_ref* %call12, %struct.mem_ref** %ref, align 8, !dbg !4461
  %23 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4462
  %call13 = call %struct.mem_ref** @VEC_mem_ref_p_heap_safe_push(%struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), %struct.mem_ref* %23), !dbg !4462
  %24 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4463
  %25 = bitcast %struct.mem_ref* %24 to i8*, !dbg !4463
  %26 = load i8**, i8*** %slot, align 8, !dbg !4464
  store i8* %25, i8** %26, align 8, !dbg !4465
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4466
  %tobool14 = icmp ne %struct._IO_FILE* %27, null, !dbg !4466
  br i1 %tobool14, label %land.lhs.true, label %if.end20, !dbg !4468

land.lhs.true:                                    ; preds = %cond.end
  %28 = load i32, i32* @dump_flags, align 4, !dbg !4469
  %and = and i32 %28, 8, !dbg !4470
  %tobool15 = icmp ne i32 %and, 0, !dbg !4470
  br i1 %tobool15, label %if.then16, label %if.end20, !dbg !4471

if.then16:                                        ; preds = %land.lhs.true
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4472
  %30 = load i32, i32* %id, align 4, !dbg !4474
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0), i32 %30), !dbg !4475
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4476
  %32 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4477
  %mem18 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %32, i32 0, i32 0, !dbg !4478
  %33 = load %union.tree_node*, %union.tree_node** %mem18, align 8, !dbg !4478
  call void @print_generic_expr(%struct._IO_FILE* %31, %union.tree_node* %33, i32 2), !dbg !4479
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4480
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !4481
  br label %if.end20, !dbg !4482

if.end20:                                         ; preds = %if.then16, %land.lhs.true, %cond.end
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then8
  %35 = load i8, i8* %is_stored, align 1, !dbg !4483
  %tobool22 = icmp ne i8 %35, 0, !dbg !4483
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !4485

if.then23:                                        ; preds = %if.end21
  %36 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4486
  %37 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4487
  call void @mark_ref_stored(%struct.mem_ref* %36, %struct.loop* %37), !dbg !4488
  br label %if.end24, !dbg !4488

if.end24:                                         ; preds = %if.then23, %if.end21
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4489
  %call25 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %38), !dbg !4491
  store %union.tree_node* %call25, %union.tree_node** %vname, align 8, !dbg !4492
  %cmp = icmp ne %union.tree_node* %call25, null, !dbg !4493
  br i1 %cmp, label %if.then26, label %if.end28, !dbg !4494

if.then26:                                        ; preds = %if.end24
  %39 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4495
  %vops = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %39, i32 0, i32 5, !dbg !4496
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vops, align 8, !dbg !4496
  %41 = load %union.tree_node*, %union.tree_node** %vname, align 8, !dbg !4497
  %ssa_name = bitcast %union.tree_node* %41 to %struct.tree_ssa_name*, !dbg !4497
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4497
  %42 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4497
  %decl_minimal = bitcast %union.tree_node* %42 to %struct.tree_decl_minimal*, !dbg !4497
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !4497
  %43 = load i32, i32* %uid, align 4, !dbg !4497
  %call27 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %40, i32 %43), !dbg !4498
  br label %if.end28, !dbg !4498

if.end28:                                         ; preds = %if.then26, %if.end24
  %44 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4499
  %45 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4500
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4501
  %47 = load %union.tree_node**, %union.tree_node*** %mem, align 8, !dbg !4502
  call void @record_mem_ref_loc(%struct.mem_ref* %44, %struct.loop* %45, %union.gimple_statement_d* %46, %union.tree_node** %47), !dbg !4503
  br label %if.end44, !dbg !4504

fail:                                             ; preds = %if.then3
  call void @llvm.dbg.label(metadata !4505), !dbg !4506
  %48 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !4507
  %tobool29 = icmp ne %struct.VEC_bitmap_heap* %48, null, !dbg !4507
  br i1 %tobool29, label %cond.true30, label %cond.false32, !dbg !4507

cond.true30:                                      ; preds = %fail
  %49 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !4507
  %base31 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %49, i32 0, i32 0, !dbg !4507
  br label %cond.end33, !dbg !4507

cond.false32:                                     ; preds = %fail
  br label %cond.end33, !dbg !4507

cond.end33:                                       ; preds = %cond.false32, %cond.true30
  %cond34 = phi %struct.VEC_bitmap_base* [ %base31, %cond.true30 ], [ null, %cond.false32 ], !dbg !4507
  %50 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4507
  %num = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 0, !dbg !4507
  %51 = load i32, i32* %num, align 8, !dbg !4507
  %call35 = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond34, i32 %51), !dbg !4507
  store %struct.bitmap_head_def* %call35, %struct.bitmap_head_def** %clvops, align 8, !dbg !4508
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4509
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %52), !dbg !4511
  store %union.tree_node* %call36, %union.tree_node** %vname, align 8, !dbg !4512
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !4513
  br i1 %cmp37, label %if.then38, label %if.end44, !dbg !4514

if.then38:                                        ; preds = %cond.end33
  %53 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %clvops, align 8, !dbg !4515
  %54 = load %union.tree_node*, %union.tree_node** %vname, align 8, !dbg !4516
  %ssa_name39 = bitcast %union.tree_node* %54 to %struct.tree_ssa_name*, !dbg !4516
  %var40 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name39, i32 0, i32 1, !dbg !4516
  %55 = load %union.tree_node*, %union.tree_node** %var40, align 8, !dbg !4516
  %decl_minimal41 = bitcast %union.tree_node* %55 to %struct.tree_decl_minimal*, !dbg !4516
  %uid42 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal41, i32 0, i32 2, !dbg !4516
  %56 = load i32, i32* %uid42, align 4, !dbg !4516
  %call43 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %53, i32 %56), !dbg !4517
  br label %if.end44, !dbg !4517

if.end44:                                         ; preds = %if.then, %if.end28, %if.then38, %cond.end33
  ret void, !dbg !4518
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !4519 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !4524, metadata !DIExpression()), !dbg !4525
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !4526, metadata !DIExpression()), !dbg !4527
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4528, metadata !DIExpression()), !dbg !4529
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !4530, metadata !DIExpression()), !dbg !4531
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4532, metadata !DIExpression()), !dbg !4533
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !4534, metadata !DIExpression()), !dbg !4535
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4536
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !4537
  store i32 0, i32* %idx, align 8, !dbg !4538
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4539
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !4539
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !4539
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4539
  %tobool = icmp ne %struct.loops* %2, null, !dbg !4539
  br i1 %tobool, label %if.end, label %if.then, !dbg !4541

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4542
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !4544
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !4545
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !4546
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !4547
  br label %return, !dbg !4548

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !4549
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !4549
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4550
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !4551
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !4552
  %6 = load i32, i32* %flags.addr, align 4, !dbg !4553
  %and = and i32 %6, 1, !dbg !4554
  %tobool3 = icmp ne i32 %and, 0, !dbg !4555
  %7 = zext i1 %tobool3 to i64, !dbg !4555
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !4555
  store i32 %cond, i32* %mn, align 4, !dbg !4556
  %8 = load i32, i32* %flags.addr, align 4, !dbg !4557
  %and4 = and i32 %8, 4, !dbg !4559
  %tobool5 = icmp ne i32 %and4, 0, !dbg !4559
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !4560

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !4561
  br label %for.cond, !dbg !4564

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4565
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !4565
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !4565
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !4565
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !4565
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !4565
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !4565
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !4565

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4565
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !4565
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !4565
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !4565
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !4565
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !4565
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !4565
  br label %cond.end, !dbg !4565

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4565

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4565
  %15 = load i32, i32* %i, align 4, !dbg !4565
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !4565
  %tobool15 = icmp ne i32 %call14, 0, !dbg !4567
  br i1 %tobool15, label %for.body, label %for.end, !dbg !4567

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4568
  %cmp = icmp ne %struct.loop* %16, null, !dbg !4570
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !4571

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4572
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !4573
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !4573
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !4574
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !4575

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4576
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !4577
  %20 = load i32, i32* %num, align 8, !dbg !4577
  %21 = load i32, i32* %mn, align 4, !dbg !4578
  %cmp18 = icmp sge i32 %20, %21, !dbg !4579
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !4580

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4581
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !4581
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !4581
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !4581
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !4581

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4581
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !4581
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !4581
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !4581
  br label %cond.end26, !dbg !4581

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !4581

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !4581
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4581
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !4581
  %27 = load i32, i32* %num28, align 8, !dbg !4581
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !4581
  br label %if.end30, !dbg !4581

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !4578

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !4582
  %inc = add i32 %28, 1, !dbg !4582
  store i32 %inc, i32* %i, align 4, !dbg !4582
  br label %for.cond, !dbg !4583, !llvm.loop !4584

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !4586

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !4587
  %and31 = and i32 %29, 2, !dbg !4589
  %tobool32 = icmp ne i32 %and31, 0, !dbg !4589
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !4590

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4591
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !4591
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !4591
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !4591
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !4594
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !4594
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !4595
  br label %for.cond36, !dbg !4596

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4597
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !4599
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !4599
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !4600
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !4601

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !4602

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4603
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !4604
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !4604
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !4605
  br label %for.cond36, !dbg !4606, !llvm.loop !4607

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !4609

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4610
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !4613
  %38 = load i32, i32* %num43, align 8, !dbg !4613
  %39 = load i32, i32* %mn, align 4, !dbg !4614
  %cmp44 = icmp sge i32 %38, %39, !dbg !4615
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !4616

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4617
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !4617
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !4617
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !4617
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !4617

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4617
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !4617
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !4617
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !4617
  br label %cond.end52, !dbg !4617

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !4617

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !4617
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4617
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !4617
  %45 = load i32, i32* %num54, align 8, !dbg !4617
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !4617
  br label %if.end56, !dbg !4617

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4618
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !4620
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !4620
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !4618
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !4621

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4622
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !4625
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !4625
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !4626
  br label %for.cond60, !dbg !4627

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4628
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !4630
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !4630
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !4631
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !4632

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !4633

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4634
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !4635
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !4635
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !4636
  br label %for.cond60, !dbg !4637, !llvm.loop !4638

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !4640

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4641
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !4643
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !4643
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !4644

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !4645

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4646
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !4647
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !4648
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !4609, !llvm.loop !4649

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !4651

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4652
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !4652
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !4652
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !4652
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !4654
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !4654
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !4655
  br label %while.body79, !dbg !4656

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4657
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !4660
  %60 = load i32, i32* %num80, align 8, !dbg !4660
  %61 = load i32, i32* %mn, align 4, !dbg !4661
  %cmp81 = icmp sge i32 %60, %61, !dbg !4662
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !4663

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4664
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !4664
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !4664
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !4664
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !4664

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4664
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !4664
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !4664
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !4664
  br label %cond.end89, !dbg !4664

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !4664

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !4664
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4664
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !4664
  %67 = load i32, i32* %num91, align 8, !dbg !4664
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !4664
  br label %if.end93, !dbg !4664

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4665
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !4667
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !4667
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !4668
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !4669

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4670
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !4671
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !4671
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !4672
  br label %if.end110, !dbg !4673

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !4674

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4676
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !4677
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !4678

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4679
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !4680
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !4680
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !4681
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !4682
  br i1 %75, label %while.body103, label %while.end105, !dbg !4674

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4683
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !4684
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !4685
  br label %while.cond99, !dbg !4674, !llvm.loop !4686

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4688
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !4690
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !4691

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !4692

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4693
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !4694
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !4694
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !4695
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !4656, !llvm.loop !4696

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4698
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !4699
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !4700
  br label %return, !dbg !4701

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !4701
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %vec_, i32 %ix_) #0 !dbg !4702 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_bitmap_base* %vec_, %struct.VEC_bitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_base** %vec_.addr, metadata !4707, metadata !DIExpression()), !dbg !4708
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4709, metadata !DIExpression()), !dbg !4708
  %0 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !4708
  %tobool = icmp ne %struct.VEC_bitmap_base* %0, null, !dbg !4708
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4708

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4708
  %2 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !4708
  %num = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %2, i32 0, i32 0, !dbg !4708
  %3 = load i32, i32* %num, align 8, !dbg !4708
  %cmp = icmp ult i32 %1, %3, !dbg !4708
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4710
  %land.ext = zext i1 %4 to i32, !dbg !4708
  %5 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !4708
  %vec = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %5, i32 0, i32 2, !dbg !4708
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4708
  %idxprom = zext i32 %6 to i64, !dbg !4708
  %arrayidx = getelementptr inbounds [1 x %struct.bitmap_head_def*], [1 x %struct.bitmap_head_def*]* %vec, i64 0, i64 %idxprom, !dbg !4708
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !4708
  ret %struct.bitmap_head_def* %7, !dbg !4708
}

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !4711 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4716, metadata !DIExpression()), !dbg !4717
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4718, metadata !DIExpression()), !dbg !4719
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4720
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !4720
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !4720
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !4720
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4720

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4720
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !4720
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !4720
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !4720
  br label %cond.end, !dbg !4720

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4720

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4720
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !4720
  store i32 %call, i32* %n, align 4, !dbg !4719
  %4 = load i32, i32* %n, align 4, !dbg !4721
  %cmp = icmp eq i32 %4, 0, !dbg !4723
  br i1 %cmp, label %if.then, label %if.end, !dbg !4724

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !4725
  br label %return, !dbg !4725

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4726
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !4726
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !4726
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !4726
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !4726

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4726
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !4726
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !4726
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !4726
  br label %cond.end8, !dbg !4726

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !4726

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !4726
  %9 = load i32, i32* %n, align 4, !dbg !4726
  %sub = sub i32 %9, 1, !dbg !4726
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !4726
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !4727
  br label %return, !dbg !4727

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !4728
  ret %struct.loop* %10, !dbg !4728
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !4729 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !4732, metadata !DIExpression()), !dbg !4733
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !4734, metadata !DIExpression()), !dbg !4735
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !4736, metadata !DIExpression()), !dbg !4737
  br label %while.cond, !dbg !4738

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4739
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !4739
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !4739
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !4739
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4739

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4739
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !4739
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !4739
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !4739
  br label %cond.end, !dbg !4739

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !4739

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4739
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4739
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !4739
  %5 = load i32, i32* %idx, align 8, !dbg !4739
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !4739
  %tobool2 = icmp ne i32 %call, 0, !dbg !4738
  br i1 %tobool2, label %while.body, label %while.end, !dbg !4738

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4740
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !4742
  %7 = load i32, i32* %idx3, align 8, !dbg !4743
  %inc = add i32 %7, 1, !dbg !4743
  store i32 %inc, i32* %idx3, align 8, !dbg !4743
  %8 = load i32, i32* %anum, align 4, !dbg !4744
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !4745
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !4746
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !4747
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !4748
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !4750
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !4750
  br i1 %tobool5, label %if.then, label %if.end, !dbg !4751

if.then:                                          ; preds = %while.body
  br label %return, !dbg !4752

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !4738, !llvm.loop !4753

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4755
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !4755
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !4755
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !4756
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !4757
  br label %return, !dbg !4758

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !4758
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !4759 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4760, metadata !DIExpression()), !dbg !4761
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4762
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !4764
  %tobool = icmp ne i8 %call, 0, !dbg !4764
  br i1 %tobool, label %if.end, label %if.then, !dbg !4765

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4766
  br label %return, !dbg !4766

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4767
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !4768
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !4769
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !4769
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !4770
  br label %return, !dbg !4770

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4771
  ret %union.tree_node* %3, !dbg !4771
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @simple_mem_ref_in_stmt(%union.gimple_statement_d* %stmt, i8* %is_store) #0 !dbg !4772 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %is_store.addr = alloca i8*, align 8
  %lhs = alloca %union.tree_node**, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4775, metadata !DIExpression()), !dbg !4776
  store i8* %is_store, i8** %is_store.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %is_store.addr, metadata !4777, metadata !DIExpression()), !dbg !4778
  call void @llvm.dbg.declare(metadata %union.tree_node*** %lhs, metadata !4779, metadata !DIExpression()), !dbg !4780
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4781, metadata !DIExpression()), !dbg !4782
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4783
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4785
  %cmp = icmp ne i32 %call, 6, !dbg !4786
  br i1 %cmp, label %if.then, label %if.end, !dbg !4787

if.then:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !4788
  br label %return, !dbg !4788

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4789
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !4790
  store i32 %call1, i32* %code, align 4, !dbg !4791
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4792
  %call2 = call %union.tree_node** @gimple_assign_lhs_ptr(%union.gimple_statement_d* %2), !dbg !4793
  store %union.tree_node** %call2, %union.tree_node*** %lhs, align 8, !dbg !4794
  %3 = load %union.tree_node**, %union.tree_node*** %lhs, align 8, !dbg !4795
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !4795
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4795
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !4795
  %bf.load = load i64, i64* %5, align 8, !dbg !4795
  %bf.clear = and i64 %bf.load, 65535, !dbg !4795
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4795
  %cmp3 = icmp eq i32 %bf.cast, 141, !dbg !4797
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !4798

if.then4:                                         ; preds = %if.end
  %6 = load i32, i32* %code, align 4, !dbg !4799
  %call5 = call i32 @get_gimple_rhs_class(i32 %6), !dbg !4802
  %cmp6 = icmp ne i32 %call5, 3, !dbg !4803
  br i1 %cmp6, label %if.then9, label %lor.lhs.false, !dbg !4804

lor.lhs.false:                                    ; preds = %if.then4
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4805
  %call7 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %7), !dbg !4806
  %call8 = call zeroext i8 @is_gimple_addressable(%union.tree_node* %call7), !dbg !4807
  %tobool = icmp ne i8 %call8, 0, !dbg !4807
  br i1 %tobool, label %if.end10, label %if.then9, !dbg !4808

if.then9:                                         ; preds = %lor.lhs.false, %if.then4
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !4809
  br label %return, !dbg !4809

if.end10:                                         ; preds = %lor.lhs.false
  %8 = load i8*, i8** %is_store.addr, align 8, !dbg !4810
  store i8 0, i8* %8, align 1, !dbg !4811
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4812
  %call11 = call %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %9), !dbg !4813
  store %union.tree_node** %call11, %union.tree_node*** %retval, align 8, !dbg !4814
  br label %return, !dbg !4814

if.else:                                          ; preds = %if.end
  %10 = load i32, i32* %code, align 4, !dbg !4815
  %cmp12 = icmp eq i32 %10, 141, !dbg !4817
  br i1 %cmp12, label %if.then19, label %lor.lhs.false13, !dbg !4818

lor.lhs.false13:                                  ; preds = %if.else
  %11 = load i32, i32* %code, align 4, !dbg !4819
  %call14 = call i32 @get_gimple_rhs_class(i32 %11), !dbg !4820
  %cmp15 = icmp eq i32 %call14, 3, !dbg !4821
  br i1 %cmp15, label %land.lhs.true, label %if.else20, !dbg !4822

land.lhs.true:                                    ; preds = %lor.lhs.false13
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4823
  %call16 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %12), !dbg !4824
  %call17 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call16), !dbg !4825
  %conv = zext i8 %call17 to i32, !dbg !4825
  %tobool18 = icmp ne i32 %conv, 0, !dbg !4825
  br i1 %tobool18, label %if.then19, label %if.else20, !dbg !4826

if.then19:                                        ; preds = %land.lhs.true, %if.else
  %13 = load i8*, i8** %is_store.addr, align 8, !dbg !4827
  store i8 1, i8* %13, align 1, !dbg !4829
  %14 = load %union.tree_node**, %union.tree_node*** %lhs, align 8, !dbg !4830
  store %union.tree_node** %14, %union.tree_node*** %retval, align 8, !dbg !4831
  br label %return, !dbg !4831

if.else20:                                        ; preds = %land.lhs.true, %lor.lhs.false13
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !4832
  br label %return, !dbg !4832

return:                                           ; preds = %if.else20, %if.then19, %if.end10, %if.then9, %if.then
  %15 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !4833
  ret %union.tree_node** %15, !dbg !4833
}

declare dso_local i32 @iterative_hash_expr(%union.tree_node*, i32) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_mem_ref_p_base_length(%struct.VEC_mem_ref_p_base* %vec_) #0 !dbg !4834 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_p_base*, align 8
  store %struct.VEC_mem_ref_p_base* %vec_, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_p_base** %vec_.addr, metadata !4839, metadata !DIExpression()), !dbg !4840
  %0 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !4840
  %tobool = icmp ne %struct.VEC_mem_ref_p_base* %0, null, !dbg !4840
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4840

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !4840
  %num = getelementptr inbounds %struct.VEC_mem_ref_p_base, %struct.VEC_mem_ref_p_base* %1, i32 0, i32 0, !dbg !4840
  %2 = load i32, i32* %num, align 8, !dbg !4840
  br label %cond.end, !dbg !4840

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4840

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4840
  ret i32 %cond, !dbg !4840
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_ref* @mem_ref_alloc(%union.tree_node* %mem, i32 %hash, i32 %id) #0 !dbg !4841 {
entry:
  %mem.addr = alloca %union.tree_node*, align 8
  %hash.addr = alloca i32, align 4
  %id.addr = alloca i32, align 4
  %ref = alloca %struct.mem_ref*, align 8
  store %union.tree_node* %mem, %union.tree_node** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %mem.addr, metadata !4844, metadata !DIExpression()), !dbg !4845
  store i32 %hash, i32* %hash.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %hash.addr, metadata !4846, metadata !DIExpression()), !dbg !4847
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !4848, metadata !DIExpression()), !dbg !4849
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref, metadata !4850, metadata !DIExpression()), !dbg !4851
  %call = call i8* @xmalloc(i64 72), !dbg !4852
  %0 = bitcast i8* %call to %struct.mem_ref*, !dbg !4852
  store %struct.mem_ref* %0, %struct.mem_ref** %ref, align 8, !dbg !4851
  %1 = load %union.tree_node*, %union.tree_node** %mem.addr, align 8, !dbg !4853
  %2 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4854
  %mem1 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %2, i32 0, i32 0, !dbg !4855
  store %union.tree_node* %1, %union.tree_node** %mem1, align 8, !dbg !4856
  %3 = load i32, i32* %id.addr, align 4, !dbg !4857
  %4 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4858
  %id2 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %4, i32 0, i32 1, !dbg !4859
  store i32 %3, i32* %id2, align 8, !dbg !4860
  %5 = load i32, i32* %hash.addr, align 4, !dbg !4861
  %6 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4862
  %hash3 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %6, i32 0, i32 2, !dbg !4863
  store i32 %5, i32* %hash3, align 4, !dbg !4864
  %call4 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4865
  %7 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4866
  %stored = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %7, i32 0, i32 3, !dbg !4867
  store %struct.bitmap_head_def* %call4, %struct.bitmap_head_def** %stored, align 8, !dbg !4868
  %call5 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4869
  %8 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4870
  %indep_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %8, i32 0, i32 6, !dbg !4871
  store %struct.bitmap_head_def* %call5, %struct.bitmap_head_def** %indep_loop, align 8, !dbg !4872
  %call6 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4873
  %9 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4874
  %dep_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %9, i32 0, i32 7, !dbg !4875
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** %dep_loop, align 8, !dbg !4876
  %call7 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4877
  %10 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4878
  %indep_ref = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %10, i32 0, i32 8, !dbg !4879
  store %struct.bitmap_head_def* %call7, %struct.bitmap_head_def** %indep_ref, align 8, !dbg !4880
  %call8 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4881
  %11 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4882
  %dep_ref = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %11, i32 0, i32 9, !dbg !4883
  store %struct.bitmap_head_def* %call8, %struct.bitmap_head_def** %dep_ref, align 8, !dbg !4884
  %12 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4885
  %accesses_in_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %12, i32 0, i32 4, !dbg !4886
  store %struct.VEC_mem_ref_locs_p_heap* null, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop, align 8, !dbg !4887
  %call9 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4888
  %13 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4889
  %vops = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %13, i32 0, i32 5, !dbg !4890
  store %struct.bitmap_head_def* %call9, %struct.bitmap_head_def** %vops, align 8, !dbg !4891
  %14 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !4892
  ret %struct.mem_ref* %14, !dbg !4893
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_ref** @VEC_mem_ref_p_heap_safe_push(%struct.VEC_mem_ref_p_heap** %vec_, %struct.mem_ref* %obj_) #0 !dbg !4894 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_p_heap**, align 8
  %obj_.addr = alloca %struct.mem_ref*, align 8
  store %struct.VEC_mem_ref_p_heap** %vec_, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_p_heap*** %vec_.addr, metadata !4899, metadata !DIExpression()), !dbg !4900
  store %struct.mem_ref* %obj_, %struct.mem_ref** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %obj_.addr, metadata !4901, metadata !DIExpression()), !dbg !4900
  %0 = load %struct.VEC_mem_ref_p_heap**, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8, !dbg !4900
  %call = call i32 @VEC_mem_ref_p_heap_reserve(%struct.VEC_mem_ref_p_heap** %0, i32 1), !dbg !4900
  %1 = load %struct.VEC_mem_ref_p_heap**, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8, !dbg !4900
  %2 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** %1, align 8, !dbg !4900
  %tobool = icmp ne %struct.VEC_mem_ref_p_heap* %2, null, !dbg !4900
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4900

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_mem_ref_p_heap**, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8, !dbg !4900
  %4 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** %3, align 8, !dbg !4900
  %base = getelementptr inbounds %struct.VEC_mem_ref_p_heap, %struct.VEC_mem_ref_p_heap* %4, i32 0, i32 0, !dbg !4900
  br label %cond.end, !dbg !4900

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4900

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4900
  %5 = load %struct.mem_ref*, %struct.mem_ref** %obj_.addr, align 8, !dbg !4900
  %call1 = call %struct.mem_ref** @VEC_mem_ref_p_base_quick_push(%struct.VEC_mem_ref_p_base* %cond, %struct.mem_ref* %5), !dbg !4900
  ret %struct.mem_ref** %call1, !dbg !4900
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_ref_stored(%struct.mem_ref* %ref, %struct.loop* %loop) #0 !dbg !4902 {
entry:
  %ref.addr = alloca %struct.mem_ref*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !4905, metadata !DIExpression()), !dbg !4906
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4907, metadata !DIExpression()), !dbg !4908
  br label %for.cond, !dbg !4909

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4910
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4913
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !4913
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !4913
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4913
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %2, i32 0, i32 3, !dbg !4914
  %3 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !4914
  %cmp = icmp ne %struct.loop* %0, %3, !dbg !4915
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4916

land.rhs:                                         ; preds = %for.cond
  %4 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !4917
  %stored = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %4, i32 0, i32 3, !dbg !4918
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %stored, align 8, !dbg !4918
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4919
  %num = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 0, !dbg !4920
  %7 = load i32, i32* %num, align 8, !dbg !4920
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %5, i32 %7), !dbg !4921
  %tobool = icmp ne i32 %call, 0, !dbg !4922
  %lnot = xor i1 %tobool, true, !dbg !4922
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ], !dbg !4923
  br i1 %8, label %for.body, label %for.end, !dbg !4924

for.body:                                         ; preds = %land.end
  %9 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !4925
  %stored1 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %9, i32 0, i32 3, !dbg !4926
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %stored1, align 8, !dbg !4926
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4927
  %num2 = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 0, !dbg !4928
  %12 = load i32, i32* %num2, align 8, !dbg !4928
  %call3 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %10, i32 %12), !dbg !4929
  br label %for.inc, !dbg !4929

for.inc:                                          ; preds = %for.body
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4930
  %call4 = call %struct.loop* @loop_outer(%struct.loop* %13), !dbg !4931
  store %struct.loop* %call4, %struct.loop** %loop.addr, align 8, !dbg !4932
  br label %for.cond, !dbg !4933, !llvm.loop !4934

for.end:                                          ; preds = %land.end
  ret void, !dbg !4936
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_mem_ref_loc(%struct.mem_ref* %ref, %struct.loop* %loop, %union.gimple_statement_d* %stmt, %union.tree_node** %loc) #0 !dbg !4937 {
entry:
  %ref.addr = alloca %struct.mem_ref*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %loc.addr = alloca %union.tree_node**, align 8
  %aref = alloca %struct.mem_ref_loc*, align 8
  %accs = alloca %struct.mem_ref_locs*, align 8
  %ril = alloca %struct.bitmap_head_def*, align 8
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !4940, metadata !DIExpression()), !dbg !4941
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4942, metadata !DIExpression()), !dbg !4943
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4944, metadata !DIExpression()), !dbg !4945
  store %union.tree_node** %loc, %union.tree_node*** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %loc.addr, metadata !4946, metadata !DIExpression()), !dbg !4947
  call void @llvm.dbg.declare(metadata %struct.mem_ref_loc** %aref, metadata !4948, metadata !DIExpression()), !dbg !4949
  %call = call i8* @xmalloc(i64 16), !dbg !4950
  %0 = bitcast i8* %call to %struct.mem_ref_loc*, !dbg !4950
  store %struct.mem_ref_loc* %0, %struct.mem_ref_loc** %aref, align 8, !dbg !4949
  call void @llvm.dbg.declare(metadata %struct.mem_ref_locs** %accs, metadata !4951, metadata !DIExpression()), !dbg !4952
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %ril, metadata !4953, metadata !DIExpression()), !dbg !4954
  %1 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2), align 8, !dbg !4955
  %tobool = icmp ne %struct.VEC_bitmap_heap* %1, null, !dbg !4955
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4955

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2), align 8, !dbg !4955
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %2, i32 0, i32 0, !dbg !4955
  br label %cond.end, !dbg !4955

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4955

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4955
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4955
  %num = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 0, !dbg !4955
  %4 = load i32, i32* %num, align 8, !dbg !4955
  %call1 = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond, i32 %4), !dbg !4955
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %ril, align 8, !dbg !4954
  %5 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !4956
  %accesses_in_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %5, i32 0, i32 4, !dbg !4956
  %6 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop, align 8, !dbg !4956
  %tobool2 = icmp ne %struct.VEC_mem_ref_locs_p_heap* %6, null, !dbg !4956
  br i1 %tobool2, label %cond.true3, label %cond.false6, !dbg !4956

cond.true3:                                       ; preds = %cond.end
  %7 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !4956
  %accesses_in_loop4 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %7, i32 0, i32 4, !dbg !4956
  %8 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop4, align 8, !dbg !4956
  %base5 = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %8, i32 0, i32 0, !dbg !4956
  br label %cond.end7, !dbg !4956

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !4956

cond.end7:                                        ; preds = %cond.false6, %cond.true3
  %cond8 = phi %struct.VEC_mem_ref_locs_p_base* [ %base5, %cond.true3 ], [ null, %cond.false6 ], !dbg !4956
  %call9 = call i32 @VEC_mem_ref_locs_p_base_length(%struct.VEC_mem_ref_locs_p_base* %cond8), !dbg !4956
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4958
  %num10 = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 0, !dbg !4959
  %10 = load i32, i32* %num10, align 8, !dbg !4959
  %cmp = icmp ule i32 %call9, %10, !dbg !4960
  br i1 %cmp, label %if.then, label %if.end, !dbg !4961

if.then:                                          ; preds = %cond.end7
  %11 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !4962
  %accesses_in_loop11 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %11, i32 0, i32 4, !dbg !4962
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4962
  %num12 = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 0, !dbg !4962
  %13 = load i32, i32* %num12, align 8, !dbg !4962
  %add = add nsw i32 %13, 1, !dbg !4962
  call void @VEC_mem_ref_locs_p_heap_safe_grow_cleared(%struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop11, i32 %add), !dbg !4962
  br label %if.end, !dbg !4962

if.end:                                           ; preds = %if.then, %cond.end7
  %14 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !4963
  %accesses_in_loop13 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %14, i32 0, i32 4, !dbg !4963
  %15 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop13, align 8, !dbg !4963
  %tobool14 = icmp ne %struct.VEC_mem_ref_locs_p_heap* %15, null, !dbg !4963
  br i1 %tobool14, label %cond.true15, label %cond.false18, !dbg !4963

cond.true15:                                      ; preds = %if.end
  %16 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !4963
  %accesses_in_loop16 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %16, i32 0, i32 4, !dbg !4963
  %17 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop16, align 8, !dbg !4963
  %base17 = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %17, i32 0, i32 0, !dbg !4963
  br label %cond.end19, !dbg !4963

cond.false18:                                     ; preds = %if.end
  br label %cond.end19, !dbg !4963

cond.end19:                                       ; preds = %cond.false18, %cond.true15
  %cond20 = phi %struct.VEC_mem_ref_locs_p_base* [ %base17, %cond.true15 ], [ null, %cond.false18 ], !dbg !4963
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4963
  %num21 = getelementptr inbounds %struct.loop, %struct.loop* %18, i32 0, i32 0, !dbg !4963
  %19 = load i32, i32* %num21, align 8, !dbg !4963
  %call22 = call %struct.mem_ref_locs* @VEC_mem_ref_locs_p_base_index(%struct.VEC_mem_ref_locs_p_base* %cond20, i32 %19), !dbg !4963
  store %struct.mem_ref_locs* %call22, %struct.mem_ref_locs** %accs, align 8, !dbg !4964
  %20 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs, align 8, !dbg !4965
  %tobool23 = icmp ne %struct.mem_ref_locs* %20, null, !dbg !4965
  br i1 %tobool23, label %if.end36, label %if.then24, !dbg !4967

if.then24:                                        ; preds = %cond.end19
  %call25 = call %struct.mem_ref_locs* @mem_ref_locs_alloc(), !dbg !4968
  store %struct.mem_ref_locs* %call25, %struct.mem_ref_locs** %accs, align 8, !dbg !4970
  %21 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !4971
  %accesses_in_loop26 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %21, i32 0, i32 4, !dbg !4971
  %22 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop26, align 8, !dbg !4971
  %tobool27 = icmp ne %struct.VEC_mem_ref_locs_p_heap* %22, null, !dbg !4971
  br i1 %tobool27, label %cond.true28, label %cond.false31, !dbg !4971

cond.true28:                                      ; preds = %if.then24
  %23 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !4971
  %accesses_in_loop29 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %23, i32 0, i32 4, !dbg !4971
  %24 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop29, align 8, !dbg !4971
  %base30 = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %24, i32 0, i32 0, !dbg !4971
  br label %cond.end32, !dbg !4971

cond.false31:                                     ; preds = %if.then24
  br label %cond.end32, !dbg !4971

cond.end32:                                       ; preds = %cond.false31, %cond.true28
  %cond33 = phi %struct.VEC_mem_ref_locs_p_base* [ %base30, %cond.true28 ], [ null, %cond.false31 ], !dbg !4971
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4971
  %num34 = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 0, !dbg !4971
  %26 = load i32, i32* %num34, align 8, !dbg !4971
  %27 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs, align 8, !dbg !4971
  %call35 = call %struct.mem_ref_locs* @VEC_mem_ref_locs_p_base_replace(%struct.VEC_mem_ref_locs_p_base* %cond33, i32 %26, %struct.mem_ref_locs* %27), !dbg !4971
  br label %if.end36, !dbg !4972

if.end36:                                         ; preds = %cond.end32, %cond.end19
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4973
  %29 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %aref, align 8, !dbg !4974
  %stmt37 = getelementptr inbounds %struct.mem_ref_loc, %struct.mem_ref_loc* %29, i32 0, i32 1, !dbg !4975
  store %union.gimple_statement_d* %28, %union.gimple_statement_d** %stmt37, align 8, !dbg !4976
  %30 = load %union.tree_node**, %union.tree_node*** %loc.addr, align 8, !dbg !4977
  %31 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %aref, align 8, !dbg !4978
  %ref38 = getelementptr inbounds %struct.mem_ref_loc, %struct.mem_ref_loc* %31, i32 0, i32 0, !dbg !4979
  store %union.tree_node** %30, %union.tree_node*** %ref38, align 8, !dbg !4980
  %32 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs, align 8, !dbg !4981
  %locs = getelementptr inbounds %struct.mem_ref_locs, %struct.mem_ref_locs* %32, i32 0, i32 0, !dbg !4981
  %33 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %aref, align 8, !dbg !4981
  %call39 = call %struct.mem_ref_loc** @VEC_mem_ref_loc_p_heap_safe_push(%struct.VEC_mem_ref_loc_p_heap** %locs, %struct.mem_ref_loc* %33), !dbg !4981
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ril, align 8, !dbg !4982
  %35 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !4983
  %id = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %35, i32 0, i32 1, !dbg !4984
  %36 = load i32, i32* %id, align 8, !dbg !4984
  %call40 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %34, i32 %36), !dbg !4985
  ret void, !dbg !4986
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !4987 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4990, metadata !DIExpression()), !dbg !4991
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4992, metadata !DIExpression()), !dbg !4993
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4994
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !4995
  store i32 %call, i32* %code, align 4, !dbg !4996
  %1 = load i32, i32* %code, align 4, !dbg !4997
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !4999
  %cmp = icmp eq i32 %call1, 3, !dbg !5000
  br i1 %cmp, label %if.then, label %if.end, !dbg !5001

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5002
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !5002
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !5002
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5002
  %bf.load = load i64, i64* %3, align 8, !dbg !5002
  %bf.clear = and i64 %bf.load, 65535, !dbg !5002
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5002
  store i32 %bf.cast, i32* %code, align 4, !dbg !5003
  br label %if.end, !dbg !5004

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !5005
  ret i32 %4, !dbg !5006
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_lhs_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5007 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5010, metadata !DIExpression()), !dbg !5011
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5012
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 0), !dbg !5013
  ret %union.tree_node** %call, !dbg !5014
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !5015 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5018, metadata !DIExpression()), !dbg !5019
  %0 = load i32, i32* %code.addr, align 4, !dbg !5020
  %idxprom = sext i32 %0 to i64, !dbg !5021
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !5021
  %1 = load i8, i8* %arrayidx, align 1, !dbg !5021
  %conv = zext i8 %1 to i32, !dbg !5022
  ret i32 %conv, !dbg !5023
}

declare dso_local zeroext i8 @is_gimple_addressable(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !5024 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5025, metadata !DIExpression()), !dbg !5026
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5027
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5028
  ret %union.tree_node* %call, !dbg !5029
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5030 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5031, metadata !DIExpression()), !dbg !5032
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5033
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 1), !dbg !5034
  ret %union.tree_node** %call, !dbg !5035
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !5036 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5037, metadata !DIExpression()), !dbg !5038
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5039, metadata !DIExpression()), !dbg !5040
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5041
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5042
  store i32 %call, i32* %code, align 4, !dbg !5040
  %1 = load i32, i32* %code, align 4, !dbg !5043
  %cmp = icmp eq i32 %1, 6, !dbg !5045
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5046

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !5047
  %cmp1 = icmp eq i32 %2, 1, !dbg !5048
  br i1 %cmp1, label %if.then, label %if.else, !dbg !5049

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5050
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !5051
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5052
  %bf.load = load i32, i32* %4, align 8, !dbg !5052
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5052
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !5053
  br label %return, !dbg !5053

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !5054
  %cmp2 = icmp eq i32 %5, 8, !dbg !5056
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !5057

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !5058
  br label %return, !dbg !5058

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5059
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !5060
  br label %return, !dbg !5060

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !5061
  ret i32 %6, !dbg !5061
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5062 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5065, metadata !DIExpression()), !dbg !5066
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5067, metadata !DIExpression()), !dbg !5068
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5069
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5071
  %tobool = icmp ne i8 %call, 0, !dbg !5071
  br i1 %tobool, label %if.then, label %if.else, !dbg !5072

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5073
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5075
  %2 = load i32, i32* %i.addr, align 4, !dbg !5076
  %idx.ext = zext i32 %2 to i64, !dbg !5077
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !5077
  store %union.tree_node** %add.ptr, %union.tree_node*** %retval, align 8, !dbg !5078
  br label %return, !dbg !5078

if.else:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !5079
  br label %return, !dbg !5079

return:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !5080
  ret %union.tree_node** %3, !dbg !5080
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_mem_ref_p_heap_reserve(%struct.VEC_mem_ref_p_heap** %vec_, i32 %alloc_) #0 !dbg !5081 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_mem_ref_p_heap** %vec_, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_p_heap*** %vec_.addr, metadata !5084, metadata !DIExpression()), !dbg !5085
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5086, metadata !DIExpression()), !dbg !5085
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5087, metadata !DIExpression()), !dbg !5085
  %0 = load %struct.VEC_mem_ref_p_heap**, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8, !dbg !5085
  %1 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** %0, align 8, !dbg !5085
  %tobool = icmp ne %struct.VEC_mem_ref_p_heap* %1, null, !dbg !5085
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5085

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_mem_ref_p_heap**, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8, !dbg !5085
  %3 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** %2, align 8, !dbg !5085
  %base = getelementptr inbounds %struct.VEC_mem_ref_p_heap, %struct.VEC_mem_ref_p_heap* %3, i32 0, i32 0, !dbg !5085
  br label %cond.end, !dbg !5085

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5085

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5085
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5085
  %call = call i32 @VEC_mem_ref_p_base_space(%struct.VEC_mem_ref_p_base* %cond, i32 %4), !dbg !5085
  %tobool1 = icmp ne i32 %call, 0, !dbg !5085
  %lnot = xor i1 %tobool1, true, !dbg !5085
  %lnot.ext = zext i1 %lnot to i32, !dbg !5085
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5085
  %5 = load i32, i32* %extend, align 4, !dbg !5088
  %tobool2 = icmp ne i32 %5, 0, !dbg !5088
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5085

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_mem_ref_p_heap**, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8, !dbg !5088
  %7 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** %6, align 8, !dbg !5088
  %8 = bitcast %struct.VEC_mem_ref_p_heap* %7 to i8*, !dbg !5088
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5088
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5088
  %10 = bitcast i8* %call3 to %struct.VEC_mem_ref_p_heap*, !dbg !5088
  %11 = load %struct.VEC_mem_ref_p_heap**, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8, !dbg !5088
  store %struct.VEC_mem_ref_p_heap* %10, %struct.VEC_mem_ref_p_heap** %11, align 8, !dbg !5088
  br label %if.end, !dbg !5088

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5085
  ret i32 %12, !dbg !5085
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_ref** @VEC_mem_ref_p_base_quick_push(%struct.VEC_mem_ref_p_base* %vec_, %struct.mem_ref* %obj_) #0 !dbg !5090 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_p_base*, align 8
  %obj_.addr = alloca %struct.mem_ref*, align 8
  %slot_ = alloca %struct.mem_ref**, align 8
  store %struct.VEC_mem_ref_p_base* %vec_, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_p_base** %vec_.addr, metadata !5094, metadata !DIExpression()), !dbg !5095
  store %struct.mem_ref* %obj_, %struct.mem_ref** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %obj_.addr, metadata !5096, metadata !DIExpression()), !dbg !5095
  call void @llvm.dbg.declare(metadata %struct.mem_ref*** %slot_, metadata !5097, metadata !DIExpression()), !dbg !5095
  %0 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !5095
  %num = getelementptr inbounds %struct.VEC_mem_ref_p_base, %struct.VEC_mem_ref_p_base* %0, i32 0, i32 0, !dbg !5095
  %1 = load i32, i32* %num, align 8, !dbg !5095
  %2 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !5095
  %alloc = getelementptr inbounds %struct.VEC_mem_ref_p_base, %struct.VEC_mem_ref_p_base* %2, i32 0, i32 1, !dbg !5095
  %3 = load i32, i32* %alloc, align 4, !dbg !5095
  %cmp = icmp ult i32 %1, %3, !dbg !5095
  %conv = zext i1 %cmp to i32, !dbg !5095
  %4 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !5095
  %vec = getelementptr inbounds %struct.VEC_mem_ref_p_base, %struct.VEC_mem_ref_p_base* %4, i32 0, i32 2, !dbg !5095
  %5 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !5095
  %num1 = getelementptr inbounds %struct.VEC_mem_ref_p_base, %struct.VEC_mem_ref_p_base* %5, i32 0, i32 0, !dbg !5095
  %6 = load i32, i32* %num1, align 8, !dbg !5095
  %inc = add i32 %6, 1, !dbg !5095
  store i32 %inc, i32* %num1, align 8, !dbg !5095
  %idxprom = zext i32 %6 to i64, !dbg !5095
  %arrayidx = getelementptr inbounds [1 x %struct.mem_ref*], [1 x %struct.mem_ref*]* %vec, i64 0, i64 %idxprom, !dbg !5095
  store %struct.mem_ref** %arrayidx, %struct.mem_ref*** %slot_, align 8, !dbg !5095
  %7 = load %struct.mem_ref*, %struct.mem_ref** %obj_.addr, align 8, !dbg !5095
  %8 = load %struct.mem_ref**, %struct.mem_ref*** %slot_, align 8, !dbg !5095
  store %struct.mem_ref* %7, %struct.mem_ref** %8, align 8, !dbg !5095
  %9 = load %struct.mem_ref**, %struct.mem_ref*** %slot_, align 8, !dbg !5095
  ret %struct.mem_ref** %9, !dbg !5095
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_mem_ref_p_base_space(%struct.VEC_mem_ref_p_base* %vec_, i32 %alloc_) #0 !dbg !5098 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_mem_ref_p_base* %vec_, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_p_base** %vec_.addr, metadata !5101, metadata !DIExpression()), !dbg !5102
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5103, metadata !DIExpression()), !dbg !5102
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5102
  %cmp = icmp sge i32 %0, 0, !dbg !5102
  %conv = zext i1 %cmp to i32, !dbg !5102
  %1 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !5102
  %tobool = icmp ne %struct.VEC_mem_ref_p_base* %1, null, !dbg !5102
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5102

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !5102
  %alloc = getelementptr inbounds %struct.VEC_mem_ref_p_base, %struct.VEC_mem_ref_p_base* %2, i32 0, i32 1, !dbg !5102
  %3 = load i32, i32* %alloc, align 4, !dbg !5102
  %4 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !5102
  %num = getelementptr inbounds %struct.VEC_mem_ref_p_base, %struct.VEC_mem_ref_p_base* %4, i32 0, i32 0, !dbg !5102
  %5 = load i32, i32* %num, align 8, !dbg !5102
  %sub = sub i32 %3, %5, !dbg !5102
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5102
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5102
  %conv2 = zext i1 %cmp1 to i32, !dbg !5102
  br label %cond.end, !dbg !5102

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5102
  %tobool3 = icmp ne i32 %7, 0, !dbg !5102
  %lnot = xor i1 %tobool3, true, !dbg !5102
  %lnot.ext = zext i1 %lnot to i32, !dbg !5102
  br label %cond.end, !dbg !5102

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5102
  ret i32 %cond, !dbg !5102
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_mem_ref_locs_p_base_length(%struct.VEC_mem_ref_locs_p_base* %vec_) #0 !dbg !5104 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_locs_p_base*, align 8
  store %struct.VEC_mem_ref_locs_p_base* %vec_, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_locs_p_base** %vec_.addr, metadata !5107, metadata !DIExpression()), !dbg !5108
  %0 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5108
  %tobool = icmp ne %struct.VEC_mem_ref_locs_p_base* %0, null, !dbg !5108
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5108

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5108
  %num = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %1, i32 0, i32 0, !dbg !5108
  %2 = load i32, i32* %num, align 8, !dbg !5108
  br label %cond.end, !dbg !5108

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5108

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5108
  ret i32 %cond, !dbg !5108
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_mem_ref_locs_p_heap_safe_grow_cleared(%struct.VEC_mem_ref_locs_p_heap** %vec_, i32 %size_) #0 !dbg !5109 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_locs_p_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_mem_ref_locs_p_heap** %vec_, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, metadata !5112, metadata !DIExpression()), !dbg !5113
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !5114, metadata !DIExpression()), !dbg !5113
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !5115, metadata !DIExpression()), !dbg !5113
  %0 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5113
  %1 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %0, align 8, !dbg !5113
  %tobool = icmp ne %struct.VEC_mem_ref_locs_p_heap* %1, null, !dbg !5113
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5113

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5113
  %3 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %2, align 8, !dbg !5113
  %base = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %3, i32 0, i32 0, !dbg !5113
  br label %cond.end, !dbg !5113

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5113

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_locs_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5113
  %call = call i32 @VEC_mem_ref_locs_p_base_length(%struct.VEC_mem_ref_locs_p_base* %cond), !dbg !5113
  store i32 %call, i32* %oldsize, align 4, !dbg !5113
  %4 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5113
  %5 = load i32, i32* %size_.addr, align 4, !dbg !5113
  call void @VEC_mem_ref_locs_p_heap_safe_grow(%struct.VEC_mem_ref_locs_p_heap** %4, i32 %5), !dbg !5113
  %6 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5113
  %7 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %6, align 8, !dbg !5113
  %tobool1 = icmp ne %struct.VEC_mem_ref_locs_p_heap* %7, null, !dbg !5113
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5113

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5113
  %9 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %8, align 8, !dbg !5113
  %base3 = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %9, i32 0, i32 0, !dbg !5113
  br label %cond.end5, !dbg !5113

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5113

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_mem_ref_locs_p_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !5113
  %call7 = call %struct.mem_ref_locs** @VEC_mem_ref_locs_p_base_address(%struct.VEC_mem_ref_locs_p_base* %cond6), !dbg !5113
  %10 = load i32, i32* %oldsize, align 4, !dbg !5113
  %idxprom = sext i32 %10 to i64, !dbg !5113
  %arrayidx = getelementptr inbounds %struct.mem_ref_locs*, %struct.mem_ref_locs** %call7, i64 %idxprom, !dbg !5113
  %11 = bitcast %struct.mem_ref_locs** %arrayidx to i8*, !dbg !5113
  %12 = load i32, i32* %size_.addr, align 4, !dbg !5113
  %13 = load i32, i32* %oldsize, align 4, !dbg !5113
  %sub = sub nsw i32 %12, %13, !dbg !5113
  %conv = sext i32 %sub to i64, !dbg !5113
  %mul = mul i64 8, %conv, !dbg !5113
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !5113
  ret void, !dbg !5113
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_ref_locs* @VEC_mem_ref_locs_p_base_index(%struct.VEC_mem_ref_locs_p_base* %vec_, i32 %ix_) #0 !dbg !5116 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_locs_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_mem_ref_locs_p_base* %vec_, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_locs_p_base** %vec_.addr, metadata !5119, metadata !DIExpression()), !dbg !5120
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5121, metadata !DIExpression()), !dbg !5120
  %0 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5120
  %tobool = icmp ne %struct.VEC_mem_ref_locs_p_base* %0, null, !dbg !5120
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5120

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5120
  %2 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5120
  %num = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %2, i32 0, i32 0, !dbg !5120
  %3 = load i32, i32* %num, align 8, !dbg !5120
  %cmp = icmp ult i32 %1, %3, !dbg !5120
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5122
  %land.ext = zext i1 %4 to i32, !dbg !5120
  %5 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5120
  %vec = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %5, i32 0, i32 2, !dbg !5120
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5120
  %idxprom = zext i32 %6 to i64, !dbg !5120
  %arrayidx = getelementptr inbounds [1 x %struct.mem_ref_locs*], [1 x %struct.mem_ref_locs*]* %vec, i64 0, i64 %idxprom, !dbg !5120
  %7 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %arrayidx, align 8, !dbg !5120
  ret %struct.mem_ref_locs* %7, !dbg !5120
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_ref_locs* @mem_ref_locs_alloc() #0 !dbg !5123 {
entry:
  %accs = alloca %struct.mem_ref_locs*, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref_locs** %accs, metadata !5126, metadata !DIExpression()), !dbg !5127
  %call = call i8* @xmalloc(i64 8), !dbg !5128
  %0 = bitcast i8* %call to %struct.mem_ref_locs*, !dbg !5128
  store %struct.mem_ref_locs* %0, %struct.mem_ref_locs** %accs, align 8, !dbg !5127
  %1 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs, align 8, !dbg !5129
  %locs = getelementptr inbounds %struct.mem_ref_locs, %struct.mem_ref_locs* %1, i32 0, i32 0, !dbg !5130
  store %struct.VEC_mem_ref_loc_p_heap* null, %struct.VEC_mem_ref_loc_p_heap** %locs, align 8, !dbg !5131
  %2 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs, align 8, !dbg !5132
  ret %struct.mem_ref_locs* %2, !dbg !5133
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_ref_locs* @VEC_mem_ref_locs_p_base_replace(%struct.VEC_mem_ref_locs_p_base* %vec_, i32 %ix_, %struct.mem_ref_locs* %obj_) #0 !dbg !5134 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_locs_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.mem_ref_locs*, align 8
  %old_obj_ = alloca %struct.mem_ref_locs*, align 8
  store %struct.VEC_mem_ref_locs_p_base* %vec_, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_locs_p_base** %vec_.addr, metadata !5138, metadata !DIExpression()), !dbg !5139
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5140, metadata !DIExpression()), !dbg !5139
  store %struct.mem_ref_locs* %obj_, %struct.mem_ref_locs** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref_locs** %obj_.addr, metadata !5141, metadata !DIExpression()), !dbg !5139
  call void @llvm.dbg.declare(metadata %struct.mem_ref_locs** %old_obj_, metadata !5142, metadata !DIExpression()), !dbg !5139
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !5139
  %1 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5139
  %num = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %1, i32 0, i32 0, !dbg !5139
  %2 = load i32, i32* %num, align 8, !dbg !5139
  %cmp = icmp ult i32 %0, %2, !dbg !5139
  %conv = zext i1 %cmp to i32, !dbg !5139
  %3 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5139
  %vec = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %3, i32 0, i32 2, !dbg !5139
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !5139
  %idxprom = zext i32 %4 to i64, !dbg !5139
  %arrayidx = getelementptr inbounds [1 x %struct.mem_ref_locs*], [1 x %struct.mem_ref_locs*]* %vec, i64 0, i64 %idxprom, !dbg !5139
  %5 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %arrayidx, align 8, !dbg !5139
  store %struct.mem_ref_locs* %5, %struct.mem_ref_locs** %old_obj_, align 8, !dbg !5139
  %6 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %obj_.addr, align 8, !dbg !5139
  %7 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5139
  %vec1 = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %7, i32 0, i32 2, !dbg !5139
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !5139
  %idxprom2 = zext i32 %8 to i64, !dbg !5139
  %arrayidx3 = getelementptr inbounds [1 x %struct.mem_ref_locs*], [1 x %struct.mem_ref_locs*]* %vec1, i64 0, i64 %idxprom2, !dbg !5139
  store %struct.mem_ref_locs* %6, %struct.mem_ref_locs** %arrayidx3, align 8, !dbg !5139
  %9 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %old_obj_, align 8, !dbg !5139
  ret %struct.mem_ref_locs* %9, !dbg !5139
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_ref_loc** @VEC_mem_ref_loc_p_heap_safe_push(%struct.VEC_mem_ref_loc_p_heap** %vec_, %struct.mem_ref_loc* %obj_) #0 !dbg !5143 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_loc_p_heap**, align 8
  %obj_.addr = alloca %struct.mem_ref_loc*, align 8
  store %struct.VEC_mem_ref_loc_p_heap** %vec_, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, metadata !5146, metadata !DIExpression()), !dbg !5147
  store %struct.mem_ref_loc* %obj_, %struct.mem_ref_loc** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref_loc** %obj_.addr, metadata !5148, metadata !DIExpression()), !dbg !5147
  %0 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8, !dbg !5147
  %call = call i32 @VEC_mem_ref_loc_p_heap_reserve(%struct.VEC_mem_ref_loc_p_heap** %0, i32 1), !dbg !5147
  %1 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8, !dbg !5147
  %2 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %1, align 8, !dbg !5147
  %tobool = icmp ne %struct.VEC_mem_ref_loc_p_heap* %2, null, !dbg !5147
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5147

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8, !dbg !5147
  %4 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %3, align 8, !dbg !5147
  %base = getelementptr inbounds %struct.VEC_mem_ref_loc_p_heap, %struct.VEC_mem_ref_loc_p_heap* %4, i32 0, i32 0, !dbg !5147
  br label %cond.end, !dbg !5147

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5147

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_loc_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5147
  %5 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %obj_.addr, align 8, !dbg !5147
  %call1 = call %struct.mem_ref_loc** @VEC_mem_ref_loc_p_base_quick_push(%struct.VEC_mem_ref_loc_p_base* %cond, %struct.mem_ref_loc* %5), !dbg !5147
  ret %struct.mem_ref_loc** %call1, !dbg !5147
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_mem_ref_locs_p_heap_safe_grow(%struct.VEC_mem_ref_locs_p_heap** %vec_, i32 %size_) #0 !dbg !5149 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_locs_p_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_mem_ref_locs_p_heap** %vec_, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, metadata !5150, metadata !DIExpression()), !dbg !5151
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !5152, metadata !DIExpression()), !dbg !5151
  %0 = load i32, i32* %size_.addr, align 4, !dbg !5151
  %cmp = icmp sge i32 %0, 0, !dbg !5151
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5151

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5151
  %2 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %1, align 8, !dbg !5151
  %tobool = icmp ne %struct.VEC_mem_ref_locs_p_heap* %2, null, !dbg !5151
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5151

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5151
  %4 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %3, align 8, !dbg !5151
  %base = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %4, i32 0, i32 0, !dbg !5151
  br label %cond.end, !dbg !5151

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !5151

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_locs_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5151
  %call = call i32 @VEC_mem_ref_locs_p_base_length(%struct.VEC_mem_ref_locs_p_base* %cond), !dbg !5151
  %5 = load i32, i32* %size_.addr, align 4, !dbg !5151
  %cmp1 = icmp ule i32 %call, %5, !dbg !5151
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !5153
  %land.ext = zext i1 %6 to i32, !dbg !5151
  %7 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5151
  %8 = load i32, i32* %size_.addr, align 4, !dbg !5151
  %9 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5151
  %10 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %9, align 8, !dbg !5151
  %tobool2 = icmp ne %struct.VEC_mem_ref_locs_p_heap* %10, null, !dbg !5151
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !5151

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5151
  %12 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %11, align 8, !dbg !5151
  %tobool4 = icmp ne %struct.VEC_mem_ref_locs_p_heap* %12, null, !dbg !5151
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !5151

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5151
  %14 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %13, align 8, !dbg !5151
  %base6 = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %14, i32 0, i32 0, !dbg !5151
  br label %cond.end8, !dbg !5151

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !5151

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_mem_ref_locs_p_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !5151
  %num = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %cond9, i32 0, i32 0, !dbg !5151
  %15 = load i32, i32* %num, align 8, !dbg !5151
  br label %cond.end11, !dbg !5151

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !5151

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !5151
  %sub = sub nsw i32 %8, %cond12, !dbg !5151
  %call13 = call i32 @VEC_mem_ref_locs_p_heap_reserve_exact(%struct.VEC_mem_ref_locs_p_heap** %7, i32 %sub), !dbg !5151
  %16 = load i32, i32* %size_.addr, align 4, !dbg !5151
  %17 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5151
  %18 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %17, align 8, !dbg !5151
  %tobool14 = icmp ne %struct.VEC_mem_ref_locs_p_heap* %18, null, !dbg !5151
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !5151

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5151
  %20 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %19, align 8, !dbg !5151
  %base16 = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %20, i32 0, i32 0, !dbg !5151
  br label %cond.end18, !dbg !5151

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !5151

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_mem_ref_locs_p_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !5151
  %num20 = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %cond19, i32 0, i32 0, !dbg !5151
  store i32 %16, i32* %num20, align 8, !dbg !5151
  ret void, !dbg !5151
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_ref_locs** @VEC_mem_ref_locs_p_base_address(%struct.VEC_mem_ref_locs_p_base* %vec_) #0 !dbg !5154 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_locs_p_base*, align 8
  store %struct.VEC_mem_ref_locs_p_base* %vec_, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_locs_p_base** %vec_.addr, metadata !5157, metadata !DIExpression()), !dbg !5158
  %0 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5158
  %tobool = icmp ne %struct.VEC_mem_ref_locs_p_base* %0, null, !dbg !5158
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5158

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5158
  %vec = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %1, i32 0, i32 2, !dbg !5158
  %arraydecay = getelementptr inbounds [1 x %struct.mem_ref_locs*], [1 x %struct.mem_ref_locs*]* %vec, i64 0, i64 0, !dbg !5158
  br label %cond.end, !dbg !5158

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5158

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mem_ref_locs** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !5158
  ret %struct.mem_ref_locs** %cond, !dbg !5158
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_mem_ref_locs_p_heap_reserve_exact(%struct.VEC_mem_ref_locs_p_heap** %vec_, i32 %alloc_) #0 !dbg !5159 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_locs_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_mem_ref_locs_p_heap** %vec_, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, metadata !5162, metadata !DIExpression()), !dbg !5163
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5164, metadata !DIExpression()), !dbg !5163
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5165, metadata !DIExpression()), !dbg !5163
  %0 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5163
  %1 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %0, align 8, !dbg !5163
  %tobool = icmp ne %struct.VEC_mem_ref_locs_p_heap* %1, null, !dbg !5163
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5163

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5163
  %3 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %2, align 8, !dbg !5163
  %base = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %3, i32 0, i32 0, !dbg !5163
  br label %cond.end, !dbg !5163

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5163

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_locs_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5163
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5163
  %call = call i32 @VEC_mem_ref_locs_p_base_space(%struct.VEC_mem_ref_locs_p_base* %cond, i32 %4), !dbg !5163
  %tobool1 = icmp ne i32 %call, 0, !dbg !5163
  %lnot = xor i1 %tobool1, true, !dbg !5163
  %lnot.ext = zext i1 %lnot to i32, !dbg !5163
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5163
  %5 = load i32, i32* %extend, align 4, !dbg !5166
  %tobool2 = icmp ne i32 %5, 0, !dbg !5166
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5163

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5166
  %7 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %6, align 8, !dbg !5166
  %8 = bitcast %struct.VEC_mem_ref_locs_p_heap* %7 to i8*, !dbg !5166
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5166
  %call3 = call i8* @vec_heap_p_reserve_exact(i8* %8, i32 %9), !dbg !5166
  %10 = bitcast i8* %call3 to %struct.VEC_mem_ref_locs_p_heap*, !dbg !5166
  %11 = load %struct.VEC_mem_ref_locs_p_heap**, %struct.VEC_mem_ref_locs_p_heap*** %vec_.addr, align 8, !dbg !5166
  store %struct.VEC_mem_ref_locs_p_heap* %10, %struct.VEC_mem_ref_locs_p_heap** %11, align 8, !dbg !5166
  br label %if.end, !dbg !5166

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5163
  ret i32 %12, !dbg !5163
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_mem_ref_locs_p_base_space(%struct.VEC_mem_ref_locs_p_base* %vec_, i32 %alloc_) #0 !dbg !5168 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_locs_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_mem_ref_locs_p_base* %vec_, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_locs_p_base** %vec_.addr, metadata !5171, metadata !DIExpression()), !dbg !5172
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5173, metadata !DIExpression()), !dbg !5172
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5172
  %cmp = icmp sge i32 %0, 0, !dbg !5172
  %conv = zext i1 %cmp to i32, !dbg !5172
  %1 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5172
  %tobool = icmp ne %struct.VEC_mem_ref_locs_p_base* %1, null, !dbg !5172
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5172

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5172
  %alloc = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %2, i32 0, i32 1, !dbg !5172
  %3 = load i32, i32* %alloc, align 4, !dbg !5172
  %4 = load %struct.VEC_mem_ref_locs_p_base*, %struct.VEC_mem_ref_locs_p_base** %vec_.addr, align 8, !dbg !5172
  %num = getelementptr inbounds %struct.VEC_mem_ref_locs_p_base, %struct.VEC_mem_ref_locs_p_base* %4, i32 0, i32 0, !dbg !5172
  %5 = load i32, i32* %num, align 8, !dbg !5172
  %sub = sub i32 %3, %5, !dbg !5172
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5172
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5172
  %conv2 = zext i1 %cmp1 to i32, !dbg !5172
  br label %cond.end, !dbg !5172

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5172
  %tobool3 = icmp ne i32 %7, 0, !dbg !5172
  %lnot = xor i1 %tobool3, true, !dbg !5172
  %lnot.ext = zext i1 %lnot to i32, !dbg !5172
  br label %cond.end, !dbg !5172

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5172
  ret i32 %cond, !dbg !5172
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_mem_ref_loc_p_heap_reserve(%struct.VEC_mem_ref_loc_p_heap** %vec_, i32 %alloc_) #0 !dbg !5174 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_loc_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_mem_ref_loc_p_heap** %vec_, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, metadata !5177, metadata !DIExpression()), !dbg !5178
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5179, metadata !DIExpression()), !dbg !5178
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5180, metadata !DIExpression()), !dbg !5178
  %0 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8, !dbg !5178
  %1 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %0, align 8, !dbg !5178
  %tobool = icmp ne %struct.VEC_mem_ref_loc_p_heap* %1, null, !dbg !5178
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5178

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8, !dbg !5178
  %3 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %2, align 8, !dbg !5178
  %base = getelementptr inbounds %struct.VEC_mem_ref_loc_p_heap, %struct.VEC_mem_ref_loc_p_heap* %3, i32 0, i32 0, !dbg !5178
  br label %cond.end, !dbg !5178

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5178

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_loc_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5178
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5178
  %call = call i32 @VEC_mem_ref_loc_p_base_space(%struct.VEC_mem_ref_loc_p_base* %cond, i32 %4), !dbg !5178
  %tobool1 = icmp ne i32 %call, 0, !dbg !5178
  %lnot = xor i1 %tobool1, true, !dbg !5178
  %lnot.ext = zext i1 %lnot to i32, !dbg !5178
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5178
  %5 = load i32, i32* %extend, align 4, !dbg !5181
  %tobool2 = icmp ne i32 %5, 0, !dbg !5181
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5178

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8, !dbg !5181
  %7 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %6, align 8, !dbg !5181
  %8 = bitcast %struct.VEC_mem_ref_loc_p_heap* %7 to i8*, !dbg !5181
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5181
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5181
  %10 = bitcast i8* %call3 to %struct.VEC_mem_ref_loc_p_heap*, !dbg !5181
  %11 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %vec_.addr, align 8, !dbg !5181
  store %struct.VEC_mem_ref_loc_p_heap* %10, %struct.VEC_mem_ref_loc_p_heap** %11, align 8, !dbg !5181
  br label %if.end, !dbg !5181

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5178
  ret i32 %12, !dbg !5178
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_ref_loc** @VEC_mem_ref_loc_p_base_quick_push(%struct.VEC_mem_ref_loc_p_base* %vec_, %struct.mem_ref_loc* %obj_) #0 !dbg !5183 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_loc_p_base*, align 8
  %obj_.addr = alloca %struct.mem_ref_loc*, align 8
  %slot_ = alloca %struct.mem_ref_loc**, align 8
  store %struct.VEC_mem_ref_loc_p_base* %vec_, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_loc_p_base** %vec_.addr, metadata !5187, metadata !DIExpression()), !dbg !5188
  store %struct.mem_ref_loc* %obj_, %struct.mem_ref_loc** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref_loc** %obj_.addr, metadata !5189, metadata !DIExpression()), !dbg !5188
  call void @llvm.dbg.declare(metadata %struct.mem_ref_loc*** %slot_, metadata !5190, metadata !DIExpression()), !dbg !5188
  %0 = load %struct.VEC_mem_ref_loc_p_base*, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8, !dbg !5188
  %num = getelementptr inbounds %struct.VEC_mem_ref_loc_p_base, %struct.VEC_mem_ref_loc_p_base* %0, i32 0, i32 0, !dbg !5188
  %1 = load i32, i32* %num, align 8, !dbg !5188
  %2 = load %struct.VEC_mem_ref_loc_p_base*, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8, !dbg !5188
  %alloc = getelementptr inbounds %struct.VEC_mem_ref_loc_p_base, %struct.VEC_mem_ref_loc_p_base* %2, i32 0, i32 1, !dbg !5188
  %3 = load i32, i32* %alloc, align 4, !dbg !5188
  %cmp = icmp ult i32 %1, %3, !dbg !5188
  %conv = zext i1 %cmp to i32, !dbg !5188
  %4 = load %struct.VEC_mem_ref_loc_p_base*, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8, !dbg !5188
  %vec = getelementptr inbounds %struct.VEC_mem_ref_loc_p_base, %struct.VEC_mem_ref_loc_p_base* %4, i32 0, i32 2, !dbg !5188
  %5 = load %struct.VEC_mem_ref_loc_p_base*, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8, !dbg !5188
  %num1 = getelementptr inbounds %struct.VEC_mem_ref_loc_p_base, %struct.VEC_mem_ref_loc_p_base* %5, i32 0, i32 0, !dbg !5188
  %6 = load i32, i32* %num1, align 8, !dbg !5188
  %inc = add i32 %6, 1, !dbg !5188
  store i32 %inc, i32* %num1, align 8, !dbg !5188
  %idxprom = zext i32 %6 to i64, !dbg !5188
  %arrayidx = getelementptr inbounds [1 x %struct.mem_ref_loc*], [1 x %struct.mem_ref_loc*]* %vec, i64 0, i64 %idxprom, !dbg !5188
  store %struct.mem_ref_loc** %arrayidx, %struct.mem_ref_loc*** %slot_, align 8, !dbg !5188
  %7 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %obj_.addr, align 8, !dbg !5188
  %8 = load %struct.mem_ref_loc**, %struct.mem_ref_loc*** %slot_, align 8, !dbg !5188
  store %struct.mem_ref_loc* %7, %struct.mem_ref_loc** %8, align 8, !dbg !5188
  %9 = load %struct.mem_ref_loc**, %struct.mem_ref_loc*** %slot_, align 8, !dbg !5188
  ret %struct.mem_ref_loc** %9, !dbg !5188
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_mem_ref_loc_p_base_space(%struct.VEC_mem_ref_loc_p_base* %vec_, i32 %alloc_) #0 !dbg !5191 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_loc_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_mem_ref_loc_p_base* %vec_, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_loc_p_base** %vec_.addr, metadata !5194, metadata !DIExpression()), !dbg !5195
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5196, metadata !DIExpression()), !dbg !5195
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5195
  %cmp = icmp sge i32 %0, 0, !dbg !5195
  %conv = zext i1 %cmp to i32, !dbg !5195
  %1 = load %struct.VEC_mem_ref_loc_p_base*, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8, !dbg !5195
  %tobool = icmp ne %struct.VEC_mem_ref_loc_p_base* %1, null, !dbg !5195
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5195

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_mem_ref_loc_p_base*, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8, !dbg !5195
  %alloc = getelementptr inbounds %struct.VEC_mem_ref_loc_p_base, %struct.VEC_mem_ref_loc_p_base* %2, i32 0, i32 1, !dbg !5195
  %3 = load i32, i32* %alloc, align 4, !dbg !5195
  %4 = load %struct.VEC_mem_ref_loc_p_base*, %struct.VEC_mem_ref_loc_p_base** %vec_.addr, align 8, !dbg !5195
  %num = getelementptr inbounds %struct.VEC_mem_ref_loc_p_base, %struct.VEC_mem_ref_loc_p_base* %4, i32 0, i32 0, !dbg !5195
  %5 = load i32, i32* %num, align 8, !dbg !5195
  %sub = sub i32 %3, %5, !dbg !5195
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5195
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5195
  %conv2 = zext i1 %cmp1 to i32, !dbg !5195
  br label %cond.end, !dbg !5195

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5195
  %tobool3 = icmp ne i32 %7, 0, !dbg !5195
  %lnot = xor i1 %tobool3, true, !dbg !5195
  %lnot.ext = zext i1 %lnot to i32, !dbg !5195
  br label %cond.end, !dbg !5195

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5195
  ret i32 %cond, !dbg !5195
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !5197 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5200, metadata !DIExpression()), !dbg !5201
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5201
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !5201
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !5201
  ret %struct.VEC_int_heap* %1, !dbg !5201
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !5202 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !5205, metadata !DIExpression()), !dbg !5206
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5207, metadata !DIExpression()), !dbg !5206
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !5208, metadata !DIExpression()), !dbg !5206
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5209
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !5209
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5209

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5209
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5209
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !5209
  %3 = load i32, i32* %num, align 8, !dbg !5209
  %cmp = icmp ult i32 %1, %3, !dbg !5209
  br i1 %cmp, label %if.then, label %if.else, !dbg !5206

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5211
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !5211
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5211
  %idxprom = zext i32 %5 to i64, !dbg !5211
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !5211
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !5211
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !5211
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !5211
  store i32 1, i32* %retval, align 4, !dbg !5211
  br label %return, !dbg !5211

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !5213
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !5213
  store i32 0, i32* %retval, align 4, !dbg !5213
  br label %return, !dbg !5213

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5206
  ret i32 %9, !dbg !5206
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !5215 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !5220, metadata !DIExpression()), !dbg !5221
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !5222, metadata !DIExpression()), !dbg !5221
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !5223, metadata !DIExpression()), !dbg !5221
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5221
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !5221
  %1 = load i32, i32* %num, align 4, !dbg !5221
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5221
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !5221
  %3 = load i32, i32* %alloc, align 4, !dbg !5221
  %cmp = icmp ult i32 %1, %3, !dbg !5221
  %conv = zext i1 %cmp to i32, !dbg !5221
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5221
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !5221
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5221
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !5221
  %6 = load i32, i32* %num1, align 4, !dbg !5221
  %inc = add i32 %6, 1, !dbg !5221
  store i32 %inc, i32* %num1, align 4, !dbg !5221
  %idxprom = zext i32 %6 to i64, !dbg !5221
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !5221
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !5221
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !5221
  %8 = load i32*, i32** %slot_, align 8, !dbg !5221
  store i32 %7, i32* %8, align 4, !dbg !5221
  %9 = load i32*, i32** %slot_, align 8, !dbg !5221
  ret i32* %9, !dbg !5221
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !5224 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !5227, metadata !DIExpression()), !dbg !5228
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5229, metadata !DIExpression()), !dbg !5228
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5228
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !5228
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5228

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5228
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5228
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !5228
  %3 = load i32, i32* %num, align 8, !dbg !5228
  %cmp = icmp ult i32 %1, %3, !dbg !5228
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5230
  %land.ext = zext i1 %4 to i32, !dbg !5228
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5228
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !5228
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5228
  %idxprom = zext i32 %6 to i64, !dbg !5228
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !5228
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !5228
  ret %struct.loop* %7, !dbg !5228
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !5231 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !5236, metadata !DIExpression()), !dbg !5237
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5238, metadata !DIExpression()), !dbg !5237
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !5239, metadata !DIExpression()), !dbg !5237
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5240
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !5240
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5240

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5240
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5240
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !5240
  %3 = load i32, i32* %num, align 4, !dbg !5240
  %cmp = icmp ult i32 %1, %3, !dbg !5240
  br i1 %cmp, label %if.then, label %if.else, !dbg !5237

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5242
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !5242
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5242
  %idxprom = zext i32 %5 to i64, !dbg !5242
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !5242
  %6 = load i32, i32* %arrayidx, align 4, !dbg !5242
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !5242
  store i32 %6, i32* %7, align 4, !dbg !5242
  store i32 1, i32* %retval, align 4, !dbg !5242
  br label %return, !dbg !5242

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !5244
  store i32 0, i32* %8, align 4, !dbg !5244
  store i32 0, i32* %retval, align 4, !dbg !5244
  br label %return, !dbg !5244

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5237
  ret i32 %9, !dbg !5237
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !5246 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !5249, metadata !DIExpression()), !dbg !5250
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5251
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5251
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5251
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5251
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !5251
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5251
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !5251
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5251

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5251
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5251
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !5251
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !5251
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !5251
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !5251
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !5251
  br label %cond.end, !dbg !5251

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5251

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5251
  %6 = load i32, i32* %num.addr, align 4, !dbg !5251
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !5251
  ret %struct.loop* %call, !dbg !5252
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !5253 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !5257, metadata !DIExpression()), !dbg !5258
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5259
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !5259
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !5259
  br i1 %tobool, label %if.then, label %if.end, !dbg !5258

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5259
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !5259
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !5259
  call void @free(i8* %4), !dbg !5259
  br label %if.end, !dbg !5259

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5258
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !5258
  ret void, !dbg !5258
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_vop_ref_mapping_loop(%struct.loop* %loop) #0 !dbg !5261 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %refs = alloca %struct.bitmap_head_def*, align 8
  %sloop = alloca %struct.loop*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %ref = alloca %struct.mem_ref*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5264, metadata !DIExpression()), !dbg !5265
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %refs, metadata !5266, metadata !DIExpression()), !dbg !5267
  %0 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2), align 8, !dbg !5268
  %tobool = icmp ne %struct.VEC_bitmap_heap* %0, null, !dbg !5268
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5268

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 2), align 8, !dbg !5268
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %1, i32 0, i32 0, !dbg !5268
  br label %cond.end, !dbg !5268

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5268

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5268
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5268
  %num = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 0, !dbg !5268
  %3 = load i32, i32* %num, align 8, !dbg !5268
  %call = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond, i32 %3), !dbg !5268
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %refs, align 8, !dbg !5267
  call void @llvm.dbg.declare(metadata %struct.loop** %sloop, metadata !5269, metadata !DIExpression()), !dbg !5270
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5271, metadata !DIExpression()), !dbg !5279
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5280, metadata !DIExpression()), !dbg !5281
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref, metadata !5282, metadata !DIExpression()), !dbg !5283
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs, align 8, !dbg !5284
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %4, i32 0, i32* %i), !dbg !5284
  br label %for.cond, !dbg !5284

for.cond:                                         ; preds = %for.inc13, %cond.end
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5286
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5284
  br i1 %tobool2, label %for.body, label %for.end14, !dbg !5284

for.body:                                         ; preds = %for.cond
  %5 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), align 8, !dbg !5288
  %tobool3 = icmp ne %struct.VEC_mem_ref_p_heap* %5, null, !dbg !5288
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !5288

cond.true4:                                       ; preds = %for.body
  %6 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), align 8, !dbg !5288
  %base5 = getelementptr inbounds %struct.VEC_mem_ref_p_heap, %struct.VEC_mem_ref_p_heap* %6, i32 0, i32 0, !dbg !5288
  br label %cond.end7, !dbg !5288

cond.false6:                                      ; preds = %for.body
  br label %cond.end7, !dbg !5288

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_mem_ref_p_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !5288
  %7 = load i32, i32* %i, align 4, !dbg !5288
  %call9 = call %struct.mem_ref* @VEC_mem_ref_p_base_index(%struct.VEC_mem_ref_p_base* %cond8, i32 %7), !dbg !5288
  store %struct.mem_ref* %call9, %struct.mem_ref** %ref, align 8, !dbg !5290
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5291
  store %struct.loop* %8, %struct.loop** %sloop, align 8, !dbg !5293
  br label %for.cond10, !dbg !5294

for.cond10:                                       ; preds = %for.inc, %cond.end7
  %9 = load %struct.loop*, %struct.loop** %sloop, align 8, !dbg !5295
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5297
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !5297
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5297
  %11 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5297
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %11, i32 0, i32 3, !dbg !5298
  %12 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !5298
  %cmp = icmp ne %struct.loop* %9, %12, !dbg !5299
  br i1 %cmp, label %for.body11, label %for.end, !dbg !5300

for.body11:                                       ; preds = %for.cond10
  %13 = load %struct.loop*, %struct.loop** %sloop, align 8, !dbg !5301
  %14 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !5302
  call void @add_vop_ref_mapping(%struct.loop* %13, %struct.mem_ref* %14), !dbg !5303
  br label %for.inc, !dbg !5303

for.inc:                                          ; preds = %for.body11
  %15 = load %struct.loop*, %struct.loop** %sloop, align 8, !dbg !5304
  %call12 = call %struct.loop* @loop_outer(%struct.loop* %15), !dbg !5305
  store %struct.loop* %call12, %struct.loop** %sloop, align 8, !dbg !5306
  br label %for.cond10, !dbg !5307, !llvm.loop !5308

for.end:                                          ; preds = %for.cond10
  br label %for.inc13, !dbg !5310

for.inc13:                                        ; preds = %for.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5286
  br label %for.cond, !dbg !5286, !llvm.loop !5311

for.end14:                                        ; preds = %for.cond
  ret void, !dbg !5313
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !5314 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5322, metadata !DIExpression()), !dbg !5323
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !5324, metadata !DIExpression()), !dbg !5325
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !5326, metadata !DIExpression()), !dbg !5327
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5328, metadata !DIExpression()), !dbg !5329
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !5330
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !5331
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !5331
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5332
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !5333
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !5334
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5335
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !5336
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !5337
  br label %while.body, !dbg !5338

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5339
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !5342
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !5342
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !5339
  br i1 %tobool, label %if.end, label %if.then, !dbg !5343

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5344
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !5346
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !5347
  br label %while.end, !dbg !5348

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5349
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !5351
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !5351
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !5352
  %9 = load i32, i32* %indx, align 8, !dbg !5352
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !5353
  %div = udiv i32 %10, 128, !dbg !5354
  %cmp = icmp uge i32 %9, %div, !dbg !5355
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !5356

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !5357

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5358
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !5359
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !5359
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !5360
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5360
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5361
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !5362
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !5363
  br label %while.body, !dbg !5338, !llvm.loop !5364

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5366
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5368
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !5368
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !5369
  %17 = load i32, i32* %indx9, align 8, !dbg !5369
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !5370
  %div10 = udiv i32 %18, 128, !dbg !5371
  %cmp11 = icmp ne i32 %17, %div10, !dbg !5372
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !5373

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5374
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !5375
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !5375
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !5376
  %21 = load i32, i32* %indx14, align 8, !dbg !5376
  %mul = mul i32 %21, 128, !dbg !5377
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !5378
  br label %if.end15, !dbg !5379

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !5380
  %div16 = udiv i32 %22, 64, !dbg !5381
  %rem = urem i32 %div16, 2, !dbg !5382
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5383
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !5384
  store i32 %rem, i32* %word_no, align 8, !dbg !5385
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5386
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !5387
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !5387
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !5388
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5389
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !5390
  %27 = load i32, i32* %word_no18, align 8, !dbg !5390
  %idxprom = zext i32 %27 to i64, !dbg !5386
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !5386
  %28 = load i64, i64* %arrayidx, align 8, !dbg !5386
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5391
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !5392
  store i64 %28, i64* %bits19, align 8, !dbg !5393
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !5394
  %rem20 = urem i32 %30, 64, !dbg !5395
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5396
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !5397
  %32 = load i64, i64* %bits21, align 8, !dbg !5398
  %sh_prom = zext i32 %rem20 to i64, !dbg !5398
  %shr = lshr i64 %32, %sh_prom, !dbg !5398
  store i64 %shr, i64* %bits21, align 8, !dbg !5398
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5399
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !5400
  %34 = load i64, i64* %bits22, align 8, !dbg !5400
  %tobool23 = icmp ne i64 %34, 0, !dbg !5401
  %lnot = xor i1 %tobool23, true, !dbg !5401
  %lnot.ext = zext i1 %lnot to i32, !dbg !5401
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !5402
  %add = add i32 %35, %lnot.ext, !dbg !5402
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !5402
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !5403
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !5404
  store i32 %36, i32* %37, align 4, !dbg !5405
  ret void, !dbg !5406
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5407 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5410, metadata !DIExpression()), !dbg !5411
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5412, metadata !DIExpression()), !dbg !5413
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5414
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5416
  %1 = load i64, i64* %bits, align 8, !dbg !5416
  %tobool = icmp ne i64 %1, 0, !dbg !5414
  br i1 %tobool, label %if.then, label %if.end, !dbg !5417

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !5418

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !5419), !dbg !5421
  br label %while.cond, !dbg !5422

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5423
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !5424
  %3 = load i64, i64* %bits1, align 8, !dbg !5424
  %and = and i64 %3, 1, !dbg !5425
  %tobool2 = icmp ne i64 %and, 0, !dbg !5426
  %lnot = xor i1 %tobool2, true, !dbg !5426
  br i1 %lnot, label %while.body, label %while.end, !dbg !5422

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5427
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !5429
  %5 = load i64, i64* %bits3, align 8, !dbg !5430
  %shr = lshr i64 %5, 1, !dbg !5430
  store i64 %shr, i64* %bits3, align 8, !dbg !5430
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !5431
  %7 = load i32, i32* %6, align 4, !dbg !5432
  %add = add i32 %7, 1, !dbg !5432
  store i32 %add, i32* %6, align 4, !dbg !5432
  br label %while.cond, !dbg !5422, !llvm.loop !5433

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !5435
  br label %return, !dbg !5435

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !5436
  %9 = load i32, i32* %8, align 4, !dbg !5437
  %add4 = add i32 %9, 64, !dbg !5438
  %sub = sub i32 %add4, 1, !dbg !5439
  %div = udiv i32 %sub, 64, !dbg !5440
  %mul = mul i32 %div, 64, !dbg !5441
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !5442
  store i32 %mul, i32* %10, align 4, !dbg !5443
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5444
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !5445
  %12 = load i32, i32* %word_no, align 8, !dbg !5446
  %inc = add i32 %12, 1, !dbg !5446
  store i32 %inc, i32* %word_no, align 8, !dbg !5446
  br label %while.body6, !dbg !5447

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !5448

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5450
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !5451
  %14 = load i32, i32* %word_no8, align 8, !dbg !5451
  %cmp = icmp ne i32 %14, 2, !dbg !5452
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !5448

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5453
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5455
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !5455
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !5456
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5457
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !5458
  %18 = load i32, i32* %word_no11, align 8, !dbg !5458
  %idxprom = zext i32 %18 to i64, !dbg !5453
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !5453
  %19 = load i64, i64* %arrayidx, align 8, !dbg !5453
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5459
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !5460
  store i64 %19, i64* %bits12, align 8, !dbg !5461
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5462
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !5464
  %22 = load i64, i64* %bits13, align 8, !dbg !5464
  %tobool14 = icmp ne i64 %22, 0, !dbg !5462
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !5465

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !5466

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !5467
  %24 = load i32, i32* %23, align 4, !dbg !5468
  %add17 = add i32 %24, 64, !dbg !5468
  store i32 %add17, i32* %23, align 4, !dbg !5468
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5469
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !5470
  %26 = load i32, i32* %word_no18, align 8, !dbg !5471
  %inc19 = add i32 %26, 1, !dbg !5471
  store i32 %inc19, i32* %word_no18, align 8, !dbg !5471
  br label %while.cond7, !dbg !5448, !llvm.loop !5472

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5474
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !5475
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !5475
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !5476
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5476
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5477
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !5478
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !5479
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5480
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !5482
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !5482
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !5480
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !5483

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !5484
  br label %return, !dbg !5484

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5485
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !5486
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !5486
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !5487
  %35 = load i32, i32* %indx, align 8, !dbg !5487
  %mul28 = mul i32 %35, 128, !dbg !5488
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !5489
  store i32 %mul28, i32* %36, align 4, !dbg !5490
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5491
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !5492
  store i32 0, i32* %word_no29, align 8, !dbg !5493
  br label %while.body6, !dbg !5447, !llvm.loop !5494

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !5496
  ret i8 %38, !dbg !5496
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_ref* @VEC_mem_ref_p_base_index(%struct.VEC_mem_ref_p_base* %vec_, i32 %ix_) #0 !dbg !5497 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_mem_ref_p_base* %vec_, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_p_base** %vec_.addr, metadata !5500, metadata !DIExpression()), !dbg !5501
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5502, metadata !DIExpression()), !dbg !5501
  %0 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !5501
  %tobool = icmp ne %struct.VEC_mem_ref_p_base* %0, null, !dbg !5501
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5501

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5501
  %2 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !5501
  %num = getelementptr inbounds %struct.VEC_mem_ref_p_base, %struct.VEC_mem_ref_p_base* %2, i32 0, i32 0, !dbg !5501
  %3 = load i32, i32* %num, align 8, !dbg !5501
  %cmp = icmp ult i32 %1, %3, !dbg !5501
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5503
  %land.ext = zext i1 %4 to i32, !dbg !5501
  %5 = load %struct.VEC_mem_ref_p_base*, %struct.VEC_mem_ref_p_base** %vec_.addr, align 8, !dbg !5501
  %vec = getelementptr inbounds %struct.VEC_mem_ref_p_base, %struct.VEC_mem_ref_p_base* %5, i32 0, i32 2, !dbg !5501
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5501
  %idxprom = zext i32 %6 to i64, !dbg !5501
  %arrayidx = getelementptr inbounds [1 x %struct.mem_ref*], [1 x %struct.mem_ref*]* %vec, i64 0, i64 %idxprom, !dbg !5501
  %7 = load %struct.mem_ref*, %struct.mem_ref** %arrayidx, align 8, !dbg !5501
  ret %struct.mem_ref* %7, !dbg !5501
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_vop_ref_mapping(%struct.loop* %loop, %struct.mem_ref* %ref) #0 !dbg !5504 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %ref.addr = alloca %struct.mem_ref*, align 8
  %map = alloca %struct.htab*, align 8
  %stored = alloca i8, align 1
  %clobbers = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %vop = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5507, metadata !DIExpression()), !dbg !5508
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !5509, metadata !DIExpression()), !dbg !5510
  call void @llvm.dbg.declare(metadata %struct.htab** %map, metadata !5511, metadata !DIExpression()), !dbg !5512
  %0 = load %struct.VEC_htab_t_heap*, %struct.VEC_htab_t_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 5), align 8, !dbg !5513
  %tobool = icmp ne %struct.VEC_htab_t_heap* %0, null, !dbg !5513
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5513

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_htab_t_heap*, %struct.VEC_htab_t_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 5), align 8, !dbg !5513
  %base = getelementptr inbounds %struct.VEC_htab_t_heap, %struct.VEC_htab_t_heap* %1, i32 0, i32 0, !dbg !5513
  br label %cond.end, !dbg !5513

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5513

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_htab_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5513
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5513
  %num = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 0, !dbg !5513
  %3 = load i32, i32* %num, align 8, !dbg !5513
  %call = call %struct.htab* @VEC_htab_t_base_index(%struct.VEC_htab_t_base* %cond, i32 %3), !dbg !5513
  store %struct.htab* %call, %struct.htab** %map, align 8, !dbg !5512
  call void @llvm.dbg.declare(metadata i8* %stored, metadata !5514, metadata !DIExpression()), !dbg !5515
  %4 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !5516
  %stored1 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %4, i32 0, i32 3, !dbg !5517
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %stored1, align 8, !dbg !5517
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5518
  %num2 = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 0, !dbg !5519
  %7 = load i32, i32* %num2, align 8, !dbg !5519
  %call3 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %5, i32 %7), !dbg !5520
  %conv = trunc i32 %call3 to i8, !dbg !5520
  store i8 %conv, i8* %stored, align 1, !dbg !5515
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %clobbers, metadata !5521, metadata !DIExpression()), !dbg !5522
  %8 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !5523
  %tobool4 = icmp ne %struct.VEC_bitmap_heap* %8, null, !dbg !5523
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !5523

cond.true5:                                       ; preds = %cond.end
  %9 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !5523
  %base6 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %9, i32 0, i32 0, !dbg !5523
  br label %cond.end8, !dbg !5523

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !5523

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_bitmap_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !5523
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5523
  %num10 = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 0, !dbg !5523
  %11 = load i32, i32* %num10, align 8, !dbg !5523
  %call11 = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond9, i32 %11), !dbg !5523
  store %struct.bitmap_head_def* %call11, %struct.bitmap_head_def** %clobbers, align 8, !dbg !5522
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5524, metadata !DIExpression()), !dbg !5525
  call void @llvm.dbg.declare(metadata i32* %vop, metadata !5526, metadata !DIExpression()), !dbg !5527
  %12 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !5528
  %vops = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %12, i32 0, i32 5, !dbg !5528
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vops, align 8, !dbg !5528
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %clobbers, align 8, !dbg !5528
  call void @bmp_iter_and_compl_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %13, %struct.bitmap_head_def* %14, i32 0, i32* %vop), !dbg !5528
  br label %for.cond, !dbg !5528

for.cond:                                         ; preds = %for.inc, %cond.end8
  %call12 = call zeroext i8 @bmp_iter_and_compl(%struct.bitmap_iterator* %bi, i32* %vop), !dbg !5530
  %tobool13 = icmp ne i8 %call12, 0, !dbg !5528
  br i1 %tobool13, label %for.body, label %for.end, !dbg !5528

for.body:                                         ; preds = %for.cond
  %15 = load %struct.htab*, %struct.htab** %map, align 8, !dbg !5532
  %16 = load i32, i32* %vop, align 4, !dbg !5534
  %17 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !5535
  %id = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %17, i32 0, i32 1, !dbg !5536
  %18 = load i32, i32* %id, align 8, !dbg !5536
  %19 = load i8, i8* %stored, align 1, !dbg !5537
  call void @record_vop_access(%struct.htab* %15, i32 %16, i32 %18, i8 zeroext %19), !dbg !5538
  br label %for.inc, !dbg !5539

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %vop), !dbg !5530
  br label %for.cond, !dbg !5530, !llvm.loop !5540

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5542
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5543 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5546, metadata !DIExpression()), !dbg !5547
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5548, metadata !DIExpression()), !dbg !5549
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5550
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5551
  %1 = load i64, i64* %bits, align 8, !dbg !5552
  %shr = lshr i64 %1, 1, !dbg !5552
  store i64 %shr, i64* %bits, align 8, !dbg !5552
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !5553
  %3 = load i32, i32* %2, align 4, !dbg !5554
  %add = add i32 %3, 1, !dbg !5554
  store i32 %add, i32* %2, align 4, !dbg !5554
  ret void, !dbg !5555
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.htab* @VEC_htab_t_base_index(%struct.VEC_htab_t_base* %vec_, i32 %ix_) #0 !dbg !5556 {
entry:
  %vec_.addr = alloca %struct.VEC_htab_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_htab_t_base* %vec_, %struct.VEC_htab_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_htab_t_base** %vec_.addr, metadata !5561, metadata !DIExpression()), !dbg !5562
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5563, metadata !DIExpression()), !dbg !5562
  %0 = load %struct.VEC_htab_t_base*, %struct.VEC_htab_t_base** %vec_.addr, align 8, !dbg !5562
  %tobool = icmp ne %struct.VEC_htab_t_base* %0, null, !dbg !5562
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5562

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5562
  %2 = load %struct.VEC_htab_t_base*, %struct.VEC_htab_t_base** %vec_.addr, align 8, !dbg !5562
  %num = getelementptr inbounds %struct.VEC_htab_t_base, %struct.VEC_htab_t_base* %2, i32 0, i32 0, !dbg !5562
  %3 = load i32, i32* %num, align 8, !dbg !5562
  %cmp = icmp ult i32 %1, %3, !dbg !5562
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5564
  %land.ext = zext i1 %4 to i32, !dbg !5562
  %5 = load %struct.VEC_htab_t_base*, %struct.VEC_htab_t_base** %vec_.addr, align 8, !dbg !5562
  %vec = getelementptr inbounds %struct.VEC_htab_t_base, %struct.VEC_htab_t_base* %5, i32 0, i32 2, !dbg !5562
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5562
  %idxprom = zext i32 %6 to i64, !dbg !5562
  %arrayidx = getelementptr inbounds [1 x %struct.htab*], [1 x %struct.htab*]* %vec, i64 0, i64 %idxprom, !dbg !5562
  %7 = load %struct.htab*, %struct.htab** %arrayidx, align 8, !dbg !5562
  ret %struct.htab* %7, !dbg !5562
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_and_compl_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map1, %struct.bitmap_head_def* %map2, i32 %start_bit, i32* %bit_no) #0 !dbg !5565 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map1.addr = alloca %struct.bitmap_head_def*, align 8
  %map2.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5568, metadata !DIExpression()), !dbg !5569
  store %struct.bitmap_head_def* %map1, %struct.bitmap_head_def** %map1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map1.addr, metadata !5570, metadata !DIExpression()), !dbg !5571
  store %struct.bitmap_head_def* %map2, %struct.bitmap_head_def** %map2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map2.addr, metadata !5572, metadata !DIExpression()), !dbg !5573
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !5574, metadata !DIExpression()), !dbg !5575
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5576, metadata !DIExpression()), !dbg !5577
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map1.addr, align 8, !dbg !5578
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !5579
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !5579
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5580
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !5581
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !5582
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map2.addr, align 8, !dbg !5583
  %first1 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 0, !dbg !5584
  %4 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first1, align 8, !dbg !5584
  %5 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5585
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %5, i32 0, i32 1, !dbg !5586
  store %struct.bitmap_element_def* %4, %struct.bitmap_element_def** %elt2, align 8, !dbg !5587
  br label %while.body, !dbg !5588

while.body:                                       ; preds = %entry, %if.end6
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5589
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !5592
  %7 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt12, align 8, !dbg !5592
  %tobool = icmp ne %struct.bitmap_element_def* %7, null, !dbg !5589
  br i1 %tobool, label %if.end, label %if.then, !dbg !5593

if.then:                                          ; preds = %while.body
  %8 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5594
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %8, i32 0, i32 0, !dbg !5596
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt13, align 8, !dbg !5597
  br label %while.end, !dbg !5598

if.end:                                           ; preds = %while.body
  %9 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5599
  %elt14 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %9, i32 0, i32 0, !dbg !5601
  %10 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt14, align 8, !dbg !5601
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %10, i32 0, i32 2, !dbg !5602
  %11 = load i32, i32* %indx, align 8, !dbg !5602
  %12 = load i32, i32* %start_bit.addr, align 4, !dbg !5603
  %div = udiv i32 %12, 128, !dbg !5604
  %cmp = icmp uge i32 %11, %div, !dbg !5605
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !5606

if.then5:                                         ; preds = %if.end
  br label %while.end, !dbg !5607

if.end6:                                          ; preds = %if.end
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5608
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 0, !dbg !5609
  %14 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt17, align 8, !dbg !5609
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %14, i32 0, i32 0, !dbg !5610
  %15 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5610
  %16 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5611
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %16, i32 0, i32 0, !dbg !5612
  store %struct.bitmap_element_def* %15, %struct.bitmap_element_def** %elt18, align 8, !dbg !5613
  br label %while.body, !dbg !5588, !llvm.loop !5614

while.end:                                        ; preds = %if.then5, %if.then
  br label %while.cond, !dbg !5616

while.cond:                                       ; preds = %while.body16, %while.end
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5617
  %elt29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 1, !dbg !5618
  %18 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt29, align 8, !dbg !5618
  %tobool10 = icmp ne %struct.bitmap_element_def* %18, null, !dbg !5617
  br i1 %tobool10, label %land.rhs, label %land.end, !dbg !5619

land.rhs:                                         ; preds = %while.cond
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5620
  %elt211 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 1, !dbg !5621
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt211, align 8, !dbg !5621
  %indx12 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !5622
  %21 = load i32, i32* %indx12, align 8, !dbg !5622
  %22 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5623
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %22, i32 0, i32 0, !dbg !5624
  %23 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !5624
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %23, i32 0, i32 2, !dbg !5625
  %24 = load i32, i32* %indx14, align 8, !dbg !5625
  %cmp15 = icmp ult i32 %21, %24, !dbg !5626
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %25 = phi i1 [ false, %while.cond ], [ %cmp15, %land.rhs ], !dbg !5627
  br i1 %25, label %while.body16, label %while.end20, !dbg !5616

while.body16:                                     ; preds = %land.end
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5628
  %elt217 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 1, !dbg !5629
  %27 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt217, align 8, !dbg !5629
  %next18 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %27, i32 0, i32 0, !dbg !5630
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next18, align 8, !dbg !5630
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5631
  %elt219 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 1, !dbg !5632
  store %struct.bitmap_element_def* %28, %struct.bitmap_element_def** %elt219, align 8, !dbg !5633
  br label %while.cond, !dbg !5616, !llvm.loop !5634

while.end20:                                      ; preds = %land.end
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5635
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !5637
  %31 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !5637
  %indx22 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %31, i32 0, i32 2, !dbg !5638
  %32 = load i32, i32* %indx22, align 8, !dbg !5638
  %33 = load i32, i32* %start_bit.addr, align 4, !dbg !5639
  %div23 = udiv i32 %33, 128, !dbg !5640
  %cmp24 = icmp ne i32 %32, %div23, !dbg !5641
  br i1 %cmp24, label %if.then25, label %if.end28, !dbg !5642

if.then25:                                        ; preds = %while.end20
  %34 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5643
  %elt126 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %34, i32 0, i32 0, !dbg !5644
  %35 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt126, align 8, !dbg !5644
  %indx27 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %35, i32 0, i32 2, !dbg !5645
  %36 = load i32, i32* %indx27, align 8, !dbg !5645
  %mul = mul i32 %36, 128, !dbg !5646
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !5647
  br label %if.end28, !dbg !5648

if.end28:                                         ; preds = %if.then25, %while.end20
  %37 = load i32, i32* %start_bit.addr, align 4, !dbg !5649
  %div29 = udiv i32 %37, 64, !dbg !5650
  %rem = urem i32 %div29, 2, !dbg !5651
  %38 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5652
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %38, i32 0, i32 2, !dbg !5653
  store i32 %rem, i32* %word_no, align 8, !dbg !5654
  %39 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5655
  %elt130 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %39, i32 0, i32 0, !dbg !5656
  %40 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt130, align 8, !dbg !5656
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %40, i32 0, i32 3, !dbg !5657
  %41 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5658
  %word_no31 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %41, i32 0, i32 2, !dbg !5659
  %42 = load i32, i32* %word_no31, align 8, !dbg !5659
  %idxprom = zext i32 %42 to i64, !dbg !5655
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !5655
  %43 = load i64, i64* %arrayidx, align 8, !dbg !5655
  %44 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5660
  %bits32 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %44, i32 0, i32 3, !dbg !5661
  store i64 %43, i64* %bits32, align 8, !dbg !5662
  %45 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5663
  %elt233 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %45, i32 0, i32 1, !dbg !5665
  %46 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt233, align 8, !dbg !5665
  %tobool34 = icmp ne %struct.bitmap_element_def* %46, null, !dbg !5663
  br i1 %tobool34, label %land.lhs.true, label %if.end47, !dbg !5666

land.lhs.true:                                    ; preds = %if.end28
  %47 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5667
  %elt135 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %47, i32 0, i32 0, !dbg !5668
  %48 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt135, align 8, !dbg !5668
  %indx36 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %48, i32 0, i32 2, !dbg !5669
  %49 = load i32, i32* %indx36, align 8, !dbg !5669
  %50 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5670
  %elt237 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %50, i32 0, i32 1, !dbg !5671
  %51 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt237, align 8, !dbg !5671
  %indx38 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %51, i32 0, i32 2, !dbg !5672
  %52 = load i32, i32* %indx38, align 8, !dbg !5672
  %cmp39 = icmp eq i32 %49, %52, !dbg !5673
  br i1 %cmp39, label %if.then40, label %if.end47, !dbg !5674

if.then40:                                        ; preds = %land.lhs.true
  %53 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5675
  %elt241 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %53, i32 0, i32 1, !dbg !5676
  %54 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt241, align 8, !dbg !5676
  %bits42 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %54, i32 0, i32 3, !dbg !5677
  %55 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5678
  %word_no43 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %55, i32 0, i32 2, !dbg !5679
  %56 = load i32, i32* %word_no43, align 8, !dbg !5679
  %idxprom44 = zext i32 %56 to i64, !dbg !5675
  %arrayidx45 = getelementptr inbounds [2 x i64], [2 x i64]* %bits42, i64 0, i64 %idxprom44, !dbg !5675
  %57 = load i64, i64* %arrayidx45, align 8, !dbg !5675
  %neg = xor i64 %57, -1, !dbg !5680
  %58 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5681
  %bits46 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %58, i32 0, i32 3, !dbg !5682
  %59 = load i64, i64* %bits46, align 8, !dbg !5683
  %and = and i64 %59, %neg, !dbg !5683
  store i64 %and, i64* %bits46, align 8, !dbg !5683
  br label %if.end47, !dbg !5681

if.end47:                                         ; preds = %if.then40, %land.lhs.true, %if.end28
  %60 = load i32, i32* %start_bit.addr, align 4, !dbg !5684
  %rem48 = urem i32 %60, 64, !dbg !5685
  %61 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5686
  %bits49 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %61, i32 0, i32 3, !dbg !5687
  %62 = load i64, i64* %bits49, align 8, !dbg !5688
  %sh_prom = zext i32 %rem48 to i64, !dbg !5688
  %shr = lshr i64 %62, %sh_prom, !dbg !5688
  store i64 %shr, i64* %bits49, align 8, !dbg !5688
  %63 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5689
  %bits50 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %63, i32 0, i32 3, !dbg !5690
  %64 = load i64, i64* %bits50, align 8, !dbg !5690
  %tobool51 = icmp ne i64 %64, 0, !dbg !5691
  %lnot = xor i1 %tobool51, true, !dbg !5691
  %lnot.ext = zext i1 %lnot to i32, !dbg !5691
  %65 = load i32, i32* %start_bit.addr, align 4, !dbg !5692
  %add = add i32 %65, %lnot.ext, !dbg !5692
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !5692
  %66 = load i32, i32* %start_bit.addr, align 4, !dbg !5693
  %67 = load i32*, i32** %bit_no.addr, align 8, !dbg !5694
  store i32 %66, i32* %67, align 4, !dbg !5695
  ret void, !dbg !5696
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_and_compl(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5697 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5698, metadata !DIExpression()), !dbg !5699
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5700, metadata !DIExpression()), !dbg !5701
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5702
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5704
  %1 = load i64, i64* %bits, align 8, !dbg !5704
  %tobool = icmp ne i64 %1, 0, !dbg !5702
  br i1 %tobool, label %if.then, label %if.end, !dbg !5705

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !5706

next_bit:                                         ; preds = %if.then29, %if.then
  call void @llvm.dbg.label(metadata !5707), !dbg !5709
  br label %while.cond, !dbg !5710

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5711
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !5712
  %3 = load i64, i64* %bits1, align 8, !dbg !5712
  %and = and i64 %3, 1, !dbg !5713
  %tobool2 = icmp ne i64 %and, 0, !dbg !5714
  %lnot = xor i1 %tobool2, true, !dbg !5714
  br i1 %lnot, label %while.body, label %while.end, !dbg !5710

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5715
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !5717
  %5 = load i64, i64* %bits3, align 8, !dbg !5718
  %shr = lshr i64 %5, 1, !dbg !5718
  store i64 %shr, i64* %bits3, align 8, !dbg !5718
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !5719
  %7 = load i32, i32* %6, align 4, !dbg !5720
  %add = add i32 %7, 1, !dbg !5720
  store i32 %add, i32* %6, align 4, !dbg !5720
  br label %while.cond, !dbg !5710, !llvm.loop !5721

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !5723
  br label %return, !dbg !5723

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !5724
  %9 = load i32, i32* %8, align 4, !dbg !5725
  %add4 = add i32 %9, 64, !dbg !5726
  %sub = sub i32 %add4, 1, !dbg !5727
  %div = udiv i32 %sub, 64, !dbg !5728
  %mul = mul i32 %div, 64, !dbg !5729
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !5730
  store i32 %mul, i32* %10, align 4, !dbg !5731
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5732
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !5733
  %12 = load i32, i32* %word_no, align 8, !dbg !5734
  %inc = add i32 %12, 1, !dbg !5734
  store i32 %inc, i32* %word_no, align 8, !dbg !5734
  br label %while.body6, !dbg !5735

while.body6:                                      ; preds = %if.end, %while.end53
  br label %while.cond7, !dbg !5736

while.cond7:                                      ; preds = %if.end30, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5738
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !5739
  %14 = load i32, i32* %word_no8, align 8, !dbg !5739
  %cmp = icmp ne i32 %14, 2, !dbg !5740
  br i1 %cmp, label %while.body9, label %while.end34, !dbg !5736

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5741
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5743
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !5743
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !5744
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5745
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !5746
  %18 = load i32, i32* %word_no11, align 8, !dbg !5746
  %idxprom = zext i32 %18 to i64, !dbg !5741
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !5741
  %19 = load i64, i64* %arrayidx, align 8, !dbg !5741
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5747
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !5748
  store i64 %19, i64* %bits12, align 8, !dbg !5749
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5750
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 1, !dbg !5752
  %22 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt2, align 8, !dbg !5752
  %tobool13 = icmp ne %struct.bitmap_element_def* %22, null, !dbg !5750
  br i1 %tobool13, label %land.lhs.true, label %if.end26, !dbg !5753

land.lhs.true:                                    ; preds = %while.body9
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5754
  %elt214 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 1, !dbg !5755
  %24 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt214, align 8, !dbg !5755
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %24, i32 0, i32 2, !dbg !5756
  %25 = load i32, i32* %indx, align 8, !dbg !5756
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5757
  %elt115 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 0, !dbg !5758
  %27 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt115, align 8, !dbg !5758
  %indx16 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %27, i32 0, i32 2, !dbg !5759
  %28 = load i32, i32* %indx16, align 8, !dbg !5759
  %cmp17 = icmp eq i32 %25, %28, !dbg !5760
  br i1 %cmp17, label %if.then18, label %if.end26, !dbg !5761

if.then18:                                        ; preds = %land.lhs.true
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5762
  %elt219 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 1, !dbg !5763
  %30 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt219, align 8, !dbg !5763
  %bits20 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %30, i32 0, i32 3, !dbg !5764
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5765
  %word_no21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 2, !dbg !5766
  %32 = load i32, i32* %word_no21, align 8, !dbg !5766
  %idxprom22 = zext i32 %32 to i64, !dbg !5762
  %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %bits20, i64 0, i64 %idxprom22, !dbg !5762
  %33 = load i64, i64* %arrayidx23, align 8, !dbg !5762
  %neg = xor i64 %33, -1, !dbg !5767
  %34 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5768
  %bits24 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %34, i32 0, i32 3, !dbg !5769
  %35 = load i64, i64* %bits24, align 8, !dbg !5770
  %and25 = and i64 %35, %neg, !dbg !5770
  store i64 %and25, i64* %bits24, align 8, !dbg !5770
  br label %if.end26, !dbg !5768

if.end26:                                         ; preds = %if.then18, %land.lhs.true, %while.body9
  %36 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5771
  %bits27 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %36, i32 0, i32 3, !dbg !5773
  %37 = load i64, i64* %bits27, align 8, !dbg !5773
  %tobool28 = icmp ne i64 %37, 0, !dbg !5771
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !5774

if.then29:                                        ; preds = %if.end26
  br label %next_bit, !dbg !5775

if.end30:                                         ; preds = %if.end26
  %38 = load i32*, i32** %bit_no.addr, align 8, !dbg !5776
  %39 = load i32, i32* %38, align 4, !dbg !5777
  %add31 = add i32 %39, 64, !dbg !5777
  store i32 %add31, i32* %38, align 4, !dbg !5777
  %40 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5778
  %word_no32 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %40, i32 0, i32 2, !dbg !5779
  %41 = load i32, i32* %word_no32, align 8, !dbg !5780
  %inc33 = add i32 %41, 1, !dbg !5780
  store i32 %inc33, i32* %word_no32, align 8, !dbg !5780
  br label %while.cond7, !dbg !5736, !llvm.loop !5781

while.end34:                                      ; preds = %while.cond7
  %42 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5783
  %elt135 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %42, i32 0, i32 0, !dbg !5784
  %43 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt135, align 8, !dbg !5784
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %43, i32 0, i32 0, !dbg !5785
  %44 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5785
  %45 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5786
  %elt136 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %45, i32 0, i32 0, !dbg !5787
  store %struct.bitmap_element_def* %44, %struct.bitmap_element_def** %elt136, align 8, !dbg !5788
  %46 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5789
  %elt137 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %46, i32 0, i32 0, !dbg !5791
  %47 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt137, align 8, !dbg !5791
  %tobool38 = icmp ne %struct.bitmap_element_def* %47, null, !dbg !5789
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !5792

if.then39:                                        ; preds = %while.end34
  store i8 0, i8* %retval, align 1, !dbg !5793
  br label %return, !dbg !5793

if.end40:                                         ; preds = %while.end34
  br label %while.cond41, !dbg !5794

while.cond41:                                     ; preds = %while.body49, %if.end40
  %48 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5795
  %elt242 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %48, i32 0, i32 1, !dbg !5796
  %49 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt242, align 8, !dbg !5796
  %tobool43 = icmp ne %struct.bitmap_element_def* %49, null, !dbg !5795
  br i1 %tobool43, label %land.rhs, label %land.end, !dbg !5797

land.rhs:                                         ; preds = %while.cond41
  %50 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5798
  %elt244 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %50, i32 0, i32 1, !dbg !5799
  %51 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt244, align 8, !dbg !5799
  %indx45 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %51, i32 0, i32 2, !dbg !5800
  %52 = load i32, i32* %indx45, align 8, !dbg !5800
  %53 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5801
  %elt146 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %53, i32 0, i32 0, !dbg !5802
  %54 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt146, align 8, !dbg !5802
  %indx47 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %54, i32 0, i32 2, !dbg !5803
  %55 = load i32, i32* %indx47, align 8, !dbg !5803
  %cmp48 = icmp ult i32 %52, %55, !dbg !5804
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond41
  %56 = phi i1 [ false, %while.cond41 ], [ %cmp48, %land.rhs ], !dbg !5805
  br i1 %56, label %while.body49, label %while.end53, !dbg !5794

while.body49:                                     ; preds = %land.end
  %57 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5806
  %elt250 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %57, i32 0, i32 1, !dbg !5807
  %58 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt250, align 8, !dbg !5807
  %next51 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %58, i32 0, i32 0, !dbg !5808
  %59 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next51, align 8, !dbg !5808
  %60 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5809
  %elt252 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %60, i32 0, i32 1, !dbg !5810
  store %struct.bitmap_element_def* %59, %struct.bitmap_element_def** %elt252, align 8, !dbg !5811
  br label %while.cond41, !dbg !5794, !llvm.loop !5812

while.end53:                                      ; preds = %land.end
  %61 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5813
  %elt154 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %61, i32 0, i32 0, !dbg !5814
  %62 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt154, align 8, !dbg !5814
  %indx55 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %62, i32 0, i32 2, !dbg !5815
  %63 = load i32, i32* %indx55, align 8, !dbg !5815
  %mul56 = mul i32 %63, 128, !dbg !5816
  %64 = load i32*, i32** %bit_no.addr, align 8, !dbg !5817
  store i32 %mul56, i32* %64, align 4, !dbg !5818
  %65 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5819
  %word_no57 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %65, i32 0, i32 2, !dbg !5820
  store i32 0, i32* %word_no57, align 8, !dbg !5821
  br label %while.body6, !dbg !5735, !llvm.loop !5822

return:                                           ; preds = %if.then39, %while.end
  %66 = load i8, i8* %retval, align 1, !dbg !5824
  ret i8 %66, !dbg !5824
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_vop_access(%struct.htab* %vop_to_refs, i32 %vop, i32 %ref, i8 zeroext %stored) #0 !dbg !5825 {
entry:
  %vop_to_refs.addr = alloca %struct.htab*, align 8
  %vop.addr = alloca i32, align 4
  %ref.addr = alloca i32, align 4
  %stored.addr = alloca i8, align 1
  %slot = alloca i8**, align 8
  %vtoe = alloca %struct.vop_to_refs_elt*, align 8
  store %struct.htab* %vop_to_refs, %struct.htab** %vop_to_refs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %vop_to_refs.addr, metadata !5828, metadata !DIExpression()), !dbg !5829
  store i32 %vop, i32* %vop.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vop.addr, metadata !5830, metadata !DIExpression()), !dbg !5831
  store i32 %ref, i32* %ref.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ref.addr, metadata !5832, metadata !DIExpression()), !dbg !5833
  store i8 %stored, i8* %stored.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %stored.addr, metadata !5834, metadata !DIExpression()), !dbg !5835
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5836, metadata !DIExpression()), !dbg !5837
  %0 = load %struct.htab*, %struct.htab** %vop_to_refs.addr, align 8, !dbg !5838
  %1 = bitcast i32* %vop.addr to i8*, !dbg !5839
  %2 = load i32, i32* %vop.addr, align 4, !dbg !5840
  %call = call i8** @htab_find_slot_with_hash(%struct.htab* %0, i8* %1, i32 %2, i32 1), !dbg !5841
  store i8** %call, i8*** %slot, align 8, !dbg !5837
  call void @llvm.dbg.declare(metadata %struct.vop_to_refs_elt** %vtoe, metadata !5842, metadata !DIExpression()), !dbg !5843
  %3 = load i8**, i8*** %slot, align 8, !dbg !5844
  %4 = load i8*, i8** %3, align 8, !dbg !5846
  %tobool = icmp ne i8* %4, null, !dbg !5846
  br i1 %tobool, label %if.else, label %if.then, !dbg !5847

if.then:                                          ; preds = %entry
  %call1 = call i8* @xmalloc(i64 24), !dbg !5848
  %5 = bitcast i8* %call1 to %struct.vop_to_refs_elt*, !dbg !5848
  store %struct.vop_to_refs_elt* %5, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !5850
  %6 = load i32, i32* %vop.addr, align 4, !dbg !5851
  %7 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !5852
  %uid = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %7, i32 0, i32 0, !dbg !5853
  store i32 %6, i32* %uid, align 8, !dbg !5854
  %call2 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !5855
  %8 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !5856
  %refs_all = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %8, i32 0, i32 1, !dbg !5857
  store %struct.bitmap_head_def* %call2, %struct.bitmap_head_def** %refs_all, align 8, !dbg !5858
  %call3 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !5859
  %9 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !5860
  %refs_stored = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %9, i32 0, i32 2, !dbg !5861
  store %struct.bitmap_head_def* %call3, %struct.bitmap_head_def** %refs_stored, align 8, !dbg !5862
  %10 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !5863
  %11 = bitcast %struct.vop_to_refs_elt* %10 to i8*, !dbg !5863
  %12 = load i8**, i8*** %slot, align 8, !dbg !5864
  store i8* %11, i8** %12, align 8, !dbg !5865
  br label %if.end, !dbg !5866

if.else:                                          ; preds = %entry
  %13 = load i8**, i8*** %slot, align 8, !dbg !5867
  %14 = load i8*, i8** %13, align 8, !dbg !5868
  %15 = bitcast i8* %14 to %struct.vop_to_refs_elt*, !dbg !5869
  store %struct.vop_to_refs_elt* %15, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !5870
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %16 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !5871
  %refs_all4 = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %16, i32 0, i32 1, !dbg !5872
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs_all4, align 8, !dbg !5872
  %18 = load i32, i32* %ref.addr, align 4, !dbg !5873
  %call5 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %17, i32 %18), !dbg !5874
  %19 = load i8, i8* %stored.addr, align 1, !dbg !5875
  %tobool6 = icmp ne i8 %19, 0, !dbg !5875
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !5877

if.then7:                                         ; preds = %if.end
  %20 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !5878
  %refs_stored8 = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %20, i32 0, i32 2, !dbg !5879
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs_stored8, align 8, !dbg !5879
  %22 = load i32, i32* %ref.addr, align 4, !dbg !5880
  %call9 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %21, i32 %22), !dbg !5881
  br label %if.end10, !dbg !5881

if.end10:                                         ; preds = %if.then7, %if.end
  ret void, !dbg !5882
}

; Function Attrs: noinline nounwind uwtable
define internal void @determine_invariantness_stmt(%struct.dom_walk_data* %dw_data, %struct.basic_block_def* %bb) #0 !dbg !5883 {
entry:
  %dw_data.addr = alloca %struct.dom_walk_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %pos = alloca i32, align 4
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %maybe_never = alloca i8, align 1
  %outermost = alloca %struct.loop*, align 8
  %lim_data = alloca %struct.lim_aux_data*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %lim_data24 = alloca %struct.lim_aux_data*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %ol1 = alloca %struct.loop*, align 8
  store %struct.dom_walk_data* %dw_data, %struct.dom_walk_data** %dw_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data** %dw_data.addr, metadata !5884, metadata !DIExpression()), !dbg !5885
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5886, metadata !DIExpression()), !dbg !5887
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !5888, metadata !DIExpression()), !dbg !5889
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5890, metadata !DIExpression()), !dbg !5891
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5892, metadata !DIExpression()), !dbg !5893
  call void @llvm.dbg.declare(metadata i8* %maybe_never, metadata !5894, metadata !DIExpression()), !dbg !5895
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5896
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 2, !dbg !5896
  %1 = load i8*, i8** %aux, align 8, !dbg !5896
  %2 = bitcast i8* %1 to %struct.loop*, !dbg !5896
  %cmp = icmp eq %struct.loop* %2, null, !dbg !5897
  %conv = zext i1 %cmp to i32, !dbg !5897
  %conv1 = trunc i32 %conv to i8, !dbg !5896
  store i8 %conv1, i8* %maybe_never, align 1, !dbg !5895
  call void @llvm.dbg.declare(metadata %struct.loop** %outermost, metadata !5898, metadata !DIExpression()), !dbg !5899
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5900
  %aux2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 2, !dbg !5900
  %4 = load i8*, i8** %aux2, align 8, !dbg !5900
  %5 = bitcast i8* %4 to %struct.loop*, !dbg !5900
  store %struct.loop* %5, %struct.loop** %outermost, align 8, !dbg !5899
  call void @llvm.dbg.declare(metadata %struct.lim_aux_data** %lim_data, metadata !5901, metadata !DIExpression()), !dbg !5902
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5903
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 3, !dbg !5905
  %7 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !5905
  %call = call %struct.loop* @loop_outer(%struct.loop* %7), !dbg !5906
  %tobool = icmp ne %struct.loop* %call, null, !dbg !5906
  br i1 %tobool, label %if.end, label %if.then, !dbg !5907

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !5908

if.end:                                           ; preds = %entry
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5909
  %tobool3 = icmp ne %struct._IO_FILE* %8, null, !dbg !5909
  br i1 %tobool3, label %land.lhs.true, label %if.end10, !dbg !5911

land.lhs.true:                                    ; preds = %if.end
  %9 = load i32, i32* @dump_flags, align 4, !dbg !5912
  %and = and i32 %9, 8, !dbg !5913
  %tobool4 = icmp ne i32 %and, 0, !dbg !5913
  br i1 %tobool4, label %if.then5, label %if.end10, !dbg !5914

if.then5:                                         ; preds = %land.lhs.true
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5915
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5916
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 9, !dbg !5917
  %12 = load i32, i32* %index, align 8, !dbg !5917
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5918
  %loop_father6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 3, !dbg !5919
  %14 = load %struct.loop*, %struct.loop** %loop_father6, align 8, !dbg !5919
  %num = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 0, !dbg !5920
  %15 = load i32, i32* %num, align 8, !dbg !5920
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5921
  %loop_father7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 3, !dbg !5922
  %17 = load %struct.loop*, %struct.loop** %loop_father7, align 8, !dbg !5922
  %call8 = call i32 @loop_depth(%struct.loop* %17), !dbg !5923
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.15, i64 0, i64 0), i32 %12, i32 %15, i32 %call8), !dbg !5924
  br label %if.end10, !dbg !5924

if.end10:                                         ; preds = %if.then5, %land.lhs.true, %if.end
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5925
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %18), !dbg !5927
  %19 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5927
  %20 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5927
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false), !dbg !5927
  br label %for.cond, !dbg !5928

for.cond:                                         ; preds = %for.inc, %if.end10
  %call11 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5929
  %tobool12 = icmp ne i8 %call11, 0, !dbg !5931
  %lnot = xor i1 %tobool12, true, !dbg !5931
  br i1 %lnot, label %for.body, label %for.end, !dbg !5932

for.body:                                         ; preds = %for.cond
  %call13 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5933
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %stmt, align 8, !dbg !5935
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5936
  %call14 = call i32 @movement_possibility(%union.gimple_statement_d* %21), !dbg !5937
  store i32 %call14, i32* %pos, align 4, !dbg !5938
  %22 = load i32, i32* %pos, align 4, !dbg !5939
  %cmp15 = icmp eq i32 %22, 0, !dbg !5941
  br i1 %cmp15, label %if.then17, label %if.end28, !dbg !5942

if.then17:                                        ; preds = %for.body
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5943
  %call18 = call zeroext i8 @nonpure_call_p(%union.gimple_statement_d* %23), !dbg !5946
  %tobool19 = icmp ne i8 %call18, 0, !dbg !5946
  br i1 %tobool19, label %if.then20, label %if.else, !dbg !5947

if.then20:                                        ; preds = %if.then17
  store i8 1, i8* %maybe_never, align 1, !dbg !5948
  store %struct.loop* null, %struct.loop** %outermost, align 8, !dbg !5950
  br label %if.end27, !dbg !5951

if.else:                                          ; preds = %if.then17
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5952
  %call21 = call zeroext i8 @stmt_makes_single_store(%union.gimple_statement_d* %24), !dbg !5954
  %tobool22 = icmp ne i8 %call21, 0, !dbg !5954
  br i1 %tobool22, label %if.then23, label %if.end26, !dbg !5955

if.then23:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.lim_aux_data** %lim_data24, metadata !5956, metadata !DIExpression()), !dbg !5958
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5959
  %call25 = call %struct.lim_aux_data* @init_lim_data(%union.gimple_statement_d* %25), !dbg !5960
  store %struct.lim_aux_data* %call25, %struct.lim_aux_data** %lim_data24, align 8, !dbg !5958
  %26 = load %struct.loop*, %struct.loop** %outermost, align 8, !dbg !5961
  %27 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data24, align 8, !dbg !5962
  %always_executed_in = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %27, i32 0, i32 2, !dbg !5963
  store %struct.loop* %26, %struct.loop** %always_executed_in, align 8, !dbg !5964
  br label %if.end26, !dbg !5965

if.end26:                                         ; preds = %if.then23, %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then20
  br label %for.inc, !dbg !5966

if.end28:                                         ; preds = %for.body
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5967
  %call29 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %28), !dbg !5969
  %conv30 = zext i8 %call29 to i32, !dbg !5969
  %tobool31 = icmp ne i32 %conv30, 0, !dbg !5969
  br i1 %tobool31, label %land.lhs.true32, label %if.end81, !dbg !5970

land.lhs.true32:                                  ; preds = %if.end28
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5971
  %call33 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %29), !dbg !5972
  %call34 = call i32 @get_gimple_rhs_class(i32 %call33), !dbg !5973
  %cmp35 = icmp eq i32 %call34, 1, !dbg !5974
  br i1 %cmp35, label %if.then37, label %if.end81, !dbg !5975

if.then37:                                        ; preds = %land.lhs.true32
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !5976, metadata !DIExpression()), !dbg !5978
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5979
  %call38 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %30), !dbg !5980
  store %union.tree_node* %call38, %union.tree_node** %op0, align 8, !dbg !5978
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !5981, metadata !DIExpression()), !dbg !5982
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5983
  %call39 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %31), !dbg !5984
  store %union.tree_node* %call39, %union.tree_node** %op1, align 8, !dbg !5982
  call void @llvm.dbg.declare(metadata %struct.loop** %ol1, metadata !5985, metadata !DIExpression()), !dbg !5986
  %32 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5987
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5988
  %call40 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %33), !dbg !5989
  %call41 = call %struct.loop* @outermost_invariant_loop(%union.tree_node* %32, %struct.loop* %call40), !dbg !5990
  store %struct.loop* %call41, %struct.loop** %ol1, align 8, !dbg !5986
  %34 = load i32, i32* %pos, align 4, !dbg !5991
  %cmp42 = icmp eq i32 %34, 2, !dbg !5993
  br i1 %cmp42, label %land.lhs.true44, label %if.end61, !dbg !5994

land.lhs.true44:                                  ; preds = %if.then37
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5995
  %call45 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %35), !dbg !5996
  %cmp46 = icmp eq i32 %call45, 75, !dbg !5997
  br i1 %cmp46, label %land.lhs.true48, label %if.end61, !dbg !5998

land.lhs.true48:                                  ; preds = %land.lhs.true44
  %36 = load i32, i32* @flag_unsafe_math_optimizations, align 4, !dbg !5999
  %tobool49 = icmp ne i32 %36, 0, !dbg !5999
  br i1 %tobool49, label %land.lhs.true50, label %if.end61, !dbg !6000

land.lhs.true50:                                  ; preds = %land.lhs.true48
  %37 = load i32, i32* @flag_trapping_math, align 4, !dbg !6001
  %tobool51 = icmp ne i32 %37, 0, !dbg !6001
  br i1 %tobool51, label %if.end61, label %land.lhs.true52, !dbg !6002

land.lhs.true52:                                  ; preds = %land.lhs.true50
  %38 = load %struct.loop*, %struct.loop** %ol1, align 8, !dbg !6003
  %cmp53 = icmp ne %struct.loop* %38, null, !dbg !6004
  br i1 %cmp53, label %land.lhs.true55, label %if.end61, !dbg !6005

land.lhs.true55:                                  ; preds = %land.lhs.true52
  %39 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6006
  %40 = load %struct.loop*, %struct.loop** %ol1, align 8, !dbg !6007
  %call56 = call %struct.loop* @outermost_invariant_loop(%union.tree_node* %39, %struct.loop* %40), !dbg !6008
  %cmp57 = icmp eq %struct.loop* %call56, null, !dbg !6009
  br i1 %cmp57, label %if.then59, label %if.end61, !dbg !6010

if.then59:                                        ; preds = %land.lhs.true55
  %call60 = call %union.gimple_statement_d* @rewrite_reciprocal(%struct.gimple_stmt_iterator* %bsi), !dbg !6011
  store %union.gimple_statement_d* %call60, %union.gimple_statement_d** %stmt, align 8, !dbg !6012
  br label %if.end61, !dbg !6013

if.end61:                                         ; preds = %if.then59, %land.lhs.true55, %land.lhs.true52, %land.lhs.true50, %land.lhs.true48, %land.lhs.true44, %if.then37
  %41 = load i32, i32* %pos, align 4, !dbg !6014
  %cmp62 = icmp eq i32 %41, 2, !dbg !6016
  br i1 %cmp62, label %land.lhs.true64, label %if.end80, !dbg !6017

land.lhs.true64:                                  ; preds = %if.end61
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6018
  %call65 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %42), !dbg !6019
  %cmp66 = icmp eq i32 %call65, 89, !dbg !6020
  br i1 %cmp66, label %land.lhs.true68, label %if.end80, !dbg !6021

land.lhs.true68:                                  ; preds = %land.lhs.true64
  %43 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6022
  %call69 = call i32 @integer_onep(%union.tree_node* %43), !dbg !6023
  %tobool70 = icmp ne i32 %call69, 0, !dbg !6023
  br i1 %tobool70, label %land.lhs.true71, label %if.end80, !dbg !6024

land.lhs.true71:                                  ; preds = %land.lhs.true68
  %44 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6025
  %base = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !6025
  %45 = bitcast %struct.tree_base* %base to i64*, !dbg !6025
  %bf.load = load i64, i64* %45, align 8, !dbg !6025
  %bf.clear = and i64 %bf.load, 65535, !dbg !6025
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6025
  %cmp72 = icmp eq i32 %bf.cast, 141, !dbg !6026
  br i1 %cmp72, label %land.lhs.true74, label %if.end80, !dbg !6027

land.lhs.true74:                                  ; preds = %land.lhs.true71
  %46 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6028
  %call75 = call zeroext i8 @has_single_use(%union.tree_node* %46), !dbg !6029
  %conv76 = zext i8 %call75 to i32, !dbg !6029
  %tobool77 = icmp ne i32 %conv76, 0, !dbg !6029
  br i1 %tobool77, label %if.then78, label %if.end80, !dbg !6030

if.then78:                                        ; preds = %land.lhs.true74
  %call79 = call %union.gimple_statement_d* @rewrite_bittest(%struct.gimple_stmt_iterator* %bsi), !dbg !6031
  store %union.gimple_statement_d* %call79, %union.gimple_statement_d** %stmt, align 8, !dbg !6032
  br label %if.end80, !dbg !6033

if.end80:                                         ; preds = %if.then78, %land.lhs.true74, %land.lhs.true71, %land.lhs.true68, %land.lhs.true64, %if.end61
  br label %if.end81, !dbg !6034

if.end81:                                         ; preds = %if.end80, %land.lhs.true32, %if.end28
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6035
  %call82 = call %struct.lim_aux_data* @init_lim_data(%union.gimple_statement_d* %47), !dbg !6036
  store %struct.lim_aux_data* %call82, %struct.lim_aux_data** %lim_data, align 8, !dbg !6037
  %48 = load %struct.loop*, %struct.loop** %outermost, align 8, !dbg !6038
  %49 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6039
  %always_executed_in83 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %49, i32 0, i32 2, !dbg !6040
  store %struct.loop* %48, %struct.loop** %always_executed_in83, align 8, !dbg !6041
  %50 = load i8, i8* %maybe_never, align 1, !dbg !6042
  %conv84 = zext i8 %50 to i32, !dbg !6042
  %tobool85 = icmp ne i32 %conv84, 0, !dbg !6042
  br i1 %tobool85, label %land.lhs.true86, label %if.end90, !dbg !6044

land.lhs.true86:                                  ; preds = %if.end81
  %51 = load i32, i32* %pos, align 4, !dbg !6045
  %cmp87 = icmp eq i32 %51, 1, !dbg !6046
  br i1 %cmp87, label %if.then89, label %if.end90, !dbg !6047

if.then89:                                        ; preds = %land.lhs.true86
  br label %for.inc, !dbg !6048

if.end90:                                         ; preds = %land.lhs.true86, %if.end81
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6049
  %53 = load i32, i32* %pos, align 4, !dbg !6051
  %cmp91 = icmp eq i32 %53, 1, !dbg !6052
  %conv92 = zext i1 %cmp91 to i32, !dbg !6052
  %conv93 = trunc i32 %conv92 to i8, !dbg !6051
  %call94 = call zeroext i8 @determine_max_movement(%union.gimple_statement_d* %52, i8 zeroext %conv93), !dbg !6053
  %tobool95 = icmp ne i8 %call94, 0, !dbg !6053
  br i1 %tobool95, label %if.end97, label %if.then96, !dbg !6054

if.then96:                                        ; preds = %if.end90
  %54 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6055
  %max_loop = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %54, i32 0, i32 0, !dbg !6057
  store %struct.loop* null, %struct.loop** %max_loop, align 8, !dbg !6058
  br label %for.inc, !dbg !6059

if.end97:                                         ; preds = %if.end90
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6060
  %tobool98 = icmp ne %struct._IO_FILE* %55, null, !dbg !6060
  br i1 %tobool98, label %land.lhs.true99, label %if.end106, !dbg !6062

land.lhs.true99:                                  ; preds = %if.end97
  %56 = load i32, i32* @dump_flags, align 4, !dbg !6063
  %and100 = and i32 %56, 8, !dbg !6064
  %tobool101 = icmp ne i32 %and100, 0, !dbg !6064
  br i1 %tobool101, label %if.then102, label %if.end106, !dbg !6065

if.then102:                                       ; preds = %land.lhs.true99
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6066
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6068
  call void @print_gimple_stmt(%struct._IO_FILE* %57, %union.gimple_statement_d* %58, i32 2, i32 0), !dbg !6069
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6070
  %60 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6071
  %max_loop103 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %60, i32 0, i32 0, !dbg !6072
  %61 = load %struct.loop*, %struct.loop** %max_loop103, align 8, !dbg !6072
  %call104 = call i32 @loop_depth(%struct.loop* %61), !dbg !6073
  %62 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6074
  %cost = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %62, i32 0, i32 3, !dbg !6075
  %63 = load i32, i32* %cost, align 8, !dbg !6075
  %call105 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.16, i64 0, i64 0), i32 %call104, i32 %63), !dbg !6076
  br label %if.end106, !dbg !6077

if.end106:                                        ; preds = %if.then102, %land.lhs.true99, %if.end97
  %64 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6078
  %cost107 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %64, i32 0, i32 3, !dbg !6080
  %65 = load i32, i32* %cost107, align 8, !dbg !6080
  %66 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6081
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %66, i64 59, !dbg !6081
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !6081
  %67 = load i32, i32* %value, align 8, !dbg !6081
  %cmp108 = icmp uge i32 %65, %67, !dbg !6082
  br i1 %cmp108, label %if.then110, label %if.end111, !dbg !6083

if.then110:                                       ; preds = %if.end106
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6084
  call void @set_profitable_level(%union.gimple_statement_d* %68), !dbg !6085
  br label %if.end111, !dbg !6085

if.end111:                                        ; preds = %if.then110, %if.end106
  br label %for.inc, !dbg !6086

for.inc:                                          ; preds = %if.end111, %if.then96, %if.then89, %if.end27
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !6087
  br label %for.cond, !dbg !6088, !llvm.loop !6089

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !6091
}

declare dso_local void @init_walk_dominator_tree(%struct.dom_walk_data*) #2

declare dso_local void @walk_dominator_tree(%struct.dom_walk_data*, %struct.basic_block_def*) #2

declare dso_local void @fini_walk_dominator_tree(%struct.dom_walk_data*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_depth(%struct.loop* %loop) #0 !dbg !6092 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6095, metadata !DIExpression()), !dbg !6096
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6097
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !6097
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !6097
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !6097
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6097

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6097
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !6097
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !6097
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !6097
  br label %cond.end, !dbg !6097

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6097

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6097
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !6097
  ret i32 %call, !dbg !6098
}

declare dso_local zeroext i8 @stmt_makes_single_store(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.lim_aux_data* @init_lim_data(%union.gimple_statement_d* %stmt) #0 !dbg !6099 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %p = alloca i8**, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6102, metadata !DIExpression()), !dbg !6103
  call void @llvm.dbg.declare(metadata i8*** %p, metadata !6104, metadata !DIExpression()), !dbg !6105
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @lim_aux_data_map, align 8, !dbg !6106
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6107
  %2 = bitcast %union.gimple_statement_d* %1 to i8*, !dbg !6107
  %call = call i8** @pointer_map_insert(%struct.pointer_map_t* %0, i8* %2), !dbg !6108
  store i8** %call, i8*** %p, align 8, !dbg !6105
  %call1 = call i8* @xcalloc(i64 1, i64 40), !dbg !6109
  %3 = bitcast i8* %call1 to %struct.lim_aux_data*, !dbg !6109
  %4 = bitcast %struct.lim_aux_data* %3 to i8*, !dbg !6109
  %5 = load i8**, i8*** %p, align 8, !dbg !6110
  store i8* %4, i8** %5, align 8, !dbg !6111
  %6 = load i8**, i8*** %p, align 8, !dbg !6112
  %7 = load i8*, i8** %6, align 8, !dbg !6113
  %8 = bitcast i8* %7 to %struct.lim_aux_data*, !dbg !6114
  ret %struct.lim_aux_data* %8, !dbg !6115
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !6116 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6117, metadata !DIExpression()), !dbg !6118
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6119
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6121
  %cmp = icmp uge i32 %call, 3, !dbg !6122
  br i1 %cmp, label %if.then, label %if.else, !dbg !6123

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6124
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !6125
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !6126
  br label %return, !dbg !6126

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6127
  br label %return, !dbg !6127

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6128
  ret %union.tree_node* %2, !dbg !6128
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @outermost_invariant_loop(%union.tree_node* %def, %struct.loop* %loop) #0 !dbg !6129 {
entry:
  %retval = alloca %struct.loop*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %def_bb = alloca %struct.basic_block_def*, align 8
  %max_loop = alloca %struct.loop*, align 8
  %lim_data = alloca %struct.lim_aux_data*, align 8
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !6132, metadata !DIExpression()), !dbg !6133
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6134, metadata !DIExpression()), !dbg !6135
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !6136, metadata !DIExpression()), !dbg !6137
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !6138, metadata !DIExpression()), !dbg !6139
  call void @llvm.dbg.declare(metadata %struct.loop** %max_loop, metadata !6140, metadata !DIExpression()), !dbg !6141
  call void @llvm.dbg.declare(metadata %struct.lim_aux_data** %lim_data, metadata !6142, metadata !DIExpression()), !dbg !6143
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6144
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6144
  br i1 %tobool, label %if.end, label %if.then, !dbg !6146

if.then:                                          ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6147
  %call = call %struct.loop* @superloop_at_depth(%struct.loop* %1, i32 1), !dbg !6148
  store %struct.loop* %call, %struct.loop** %retval, align 8, !dbg !6149
  br label %return, !dbg !6149

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6150
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6150
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6150
  %bf.load = load i64, i64* %3, align 8, !dbg !6150
  %bf.clear = and i64 %bf.load, 65535, !dbg !6150
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6150
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6152
  br i1 %cmp, label %if.then1, label %if.end5, !dbg !6153

if.then1:                                         ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6154
  %call2 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %4), !dbg !6154
  %tobool3 = icmp ne i8 %call2, 0, !dbg !6154
  br i1 %tobool3, label %cond.false, label %cond.true, !dbg !6154

cond.true:                                        ; preds = %if.then1
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i32 431, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6154
  br label %cond.end, !dbg !6154

cond.false:                                       ; preds = %if.then1
  br label %cond.end, !dbg !6154

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6154
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6156
  %call4 = call %struct.loop* @superloop_at_depth(%struct.loop* %5, i32 1), !dbg !6157
  store %struct.loop* %call4, %struct.loop** %retval, align 8, !dbg !6158
  br label %return, !dbg !6158

if.end5:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6159
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !6159
  %def_stmt6 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6159
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt6, align 8, !dbg !6159
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6160
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6161
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %8), !dbg !6162
  store %struct.basic_block_def* %call7, %struct.basic_block_def** %def_bb, align 8, !dbg !6163
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !6164
  %tobool8 = icmp ne %struct.basic_block_def* %9, null, !dbg !6164
  br i1 %tobool8, label %if.end11, label %if.then9, !dbg !6166

if.then9:                                         ; preds = %if.end5
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6167
  %call10 = call %struct.loop* @superloop_at_depth(%struct.loop* %10, i32 1), !dbg !6168
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !6169
  br label %return, !dbg !6169

if.end11:                                         ; preds = %if.end5
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6170
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !6171
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 3, !dbg !6172
  %13 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !6172
  %call12 = call %struct.loop* @find_common_loop(%struct.loop* %11, %struct.loop* %13), !dbg !6173
  store %struct.loop* %call12, %struct.loop** %max_loop, align 8, !dbg !6174
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6175
  %call13 = call %struct.lim_aux_data* @get_lim_data(%union.gimple_statement_d* %14), !dbg !6176
  store %struct.lim_aux_data* %call13, %struct.lim_aux_data** %lim_data, align 8, !dbg !6177
  %15 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6178
  %cmp14 = icmp ne %struct.lim_aux_data* %15, null, !dbg !6180
  br i1 %cmp14, label %land.lhs.true, label %if.end21, !dbg !6181

land.lhs.true:                                    ; preds = %if.end11
  %16 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6182
  %max_loop15 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %16, i32 0, i32 0, !dbg !6183
  %17 = load %struct.loop*, %struct.loop** %max_loop15, align 8, !dbg !6183
  %cmp16 = icmp ne %struct.loop* %17, null, !dbg !6184
  br i1 %cmp16, label %if.then17, label %if.end21, !dbg !6185

if.then17:                                        ; preds = %land.lhs.true
  %18 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !6186
  %19 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6187
  %max_loop18 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %19, i32 0, i32 0, !dbg !6188
  %20 = load %struct.loop*, %struct.loop** %max_loop18, align 8, !dbg !6188
  %call19 = call %struct.loop* @loop_outer(%struct.loop* %20), !dbg !6189
  %call20 = call %struct.loop* @find_common_loop(%struct.loop* %18, %struct.loop* %call19), !dbg !6190
  store %struct.loop* %call20, %struct.loop** %max_loop, align 8, !dbg !6191
  br label %if.end21, !dbg !6192

if.end21:                                         ; preds = %if.then17, %land.lhs.true, %if.end11
  %21 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !6193
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6195
  %cmp22 = icmp eq %struct.loop* %21, %22, !dbg !6196
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !6197

if.then23:                                        ; preds = %if.end21
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !6198
  br label %return, !dbg !6198

if.end24:                                         ; preds = %if.end21
  %23 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6199
  %24 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !6200
  %call25 = call i32 @loop_depth(%struct.loop* %24), !dbg !6201
  %add = add i32 %call25, 1, !dbg !6202
  %call26 = call %struct.loop* @superloop_at_depth(%struct.loop* %23, i32 %add), !dbg !6203
  store %struct.loop* %call26, %struct.loop** %max_loop, align 8, !dbg !6204
  %25 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !6205
  store %struct.loop* %25, %struct.loop** %retval, align 8, !dbg !6206
  br label %return, !dbg !6206

return:                                           ; preds = %if.end24, %if.then23, %if.then9, %cond.end, %if.then
  %26 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !6207
  ret %struct.loop* %26, !dbg !6207
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !6208 {
entry:
  %retval = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6212, metadata !DIExpression()), !dbg !6213
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6214, metadata !DIExpression()), !dbg !6215
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6216
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !6217
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !6215
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6218
  %tobool = icmp ne %struct.basic_block_def* %1, null, !dbg !6218
  br i1 %tobool, label %if.end, label %if.then, !dbg !6220

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !6221
  br label %return, !dbg !6221

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6222
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !6223
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !6223
  store %struct.loop* %3, %struct.loop** %retval, align 8, !dbg !6224
  br label %return, !dbg !6224

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !6225
  ret %struct.loop* %4, !dbg !6225
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @rewrite_reciprocal(%struct.gimple_stmt_iterator* %bsi) #0 !dbg !6226 {
entry:
  %bsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmt1 = alloca %union.gimple_statement_d*, align 8
  %stmt2 = alloca %union.gimple_statement_d*, align 8
  %var = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %real_one = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %list = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %bsi, %struct.gimple_stmt_iterator** %bsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %bsi.addr, metadata !6229, metadata !DIExpression()), !dbg !6230
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6231, metadata !DIExpression()), !dbg !6232
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1, metadata !6233, metadata !DIExpression()), !dbg !6234
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2, metadata !6235, metadata !DIExpression()), !dbg !6236
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6237, metadata !DIExpression()), !dbg !6238
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !6239, metadata !DIExpression()), !dbg !6240
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6241, metadata !DIExpression()), !dbg !6242
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6243, metadata !DIExpression()), !dbg !6244
  call void @llvm.dbg.declare(metadata %union.tree_node** %real_one, metadata !6245, metadata !DIExpression()), !dbg !6246
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6247, metadata !DIExpression()), !dbg !6248
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !6249
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !6250
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !6251
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6252
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !6253
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !6254
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6255
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !6255
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6255
  %3 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !6255
  store %union.tree_node* %3, %union.tree_node** %type, align 8, !dbg !6256
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6257
  %call3 = call %union.tree_node* @create_tmp_var(%union.tree_node* %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i64 0, i64 0)), !dbg !6258
  store %union.tree_node* %call3, %union.tree_node** %var, align 8, !dbg !6259
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6260
  %call4 = call zeroext i8 @add_referenced_var(%union.tree_node* %5), !dbg !6261
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6262
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !6262
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6262
  %7 = bitcast i40* %gimple_reg_flag to i64*, !dbg !6262
  %bf.load = load i64, i64* %7, align 8, !dbg !6263
  %bf.clear = and i64 %bf.load, -134217729, !dbg !6263
  %bf.set = or i64 %bf.clear, 134217728, !dbg !6263
  store i64 %bf.set, i64* %7, align 8, !dbg !6263
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6264
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6264
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !6264
  %bf.load5 = load i64, i64* %9, align 8, !dbg !6264
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !6264
  %bf.cast = trunc i64 %bf.clear6 to i32, !dbg !6264
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !6266
  br i1 %cmp, label %if.then, label %if.else, !dbg !6267

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6268, metadata !DIExpression()), !dbg !6270
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6271, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !6273, metadata !DIExpression()), !dbg !6274
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !6274
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6275
  %common7 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !6275
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !6275
  %11 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !6275
  %call9 = call %union.tree_node* @build_real(%union.tree_node* %11, %struct.real_value* byval(%struct.real_value) align 8 @dconst1), !dbg !6276
  store %union.tree_node* %call9, %union.tree_node** %real_one, align 8, !dbg !6277
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6278
  %type10 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !6278
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 6, !dbg !6278
  %bf.load11 = load i32, i32* %precision, align 4, !dbg !6278
  %bf.clear12 = and i32 %bf.load11, 1023, !dbg !6278
  %sh_prom = zext i32 %bf.clear12 to i64, !dbg !6278
  %shl = shl i64 1, %sh_prom, !dbg !6278
  %conv = trunc i64 %shl to i32, !dbg !6278
  store i32 %conv, i32* %len, align 4, !dbg !6279
  store i32 0, i32* %i, align 4, !dbg !6280
  br label %for.cond, !dbg !6282

for.cond:                                         ; preds = %for.inc, %if.then
  %13 = load i32, i32* %i, align 4, !dbg !6283
  %14 = load i32, i32* %len, align 4, !dbg !6285
  %cmp13 = icmp slt i32 %13, %14, !dbg !6286
  br i1 %cmp13, label %for.body, label %for.end, !dbg !6287

for.body:                                         ; preds = %for.cond
  %15 = load %union.tree_node*, %union.tree_node** %real_one, align 8, !dbg !6288
  %16 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !6288
  %call15 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %15, %union.tree_node* %16), !dbg !6288
  store %union.tree_node* %call15, %union.tree_node** %list, align 8, !dbg !6289
  br label %for.inc, !dbg !6290

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !6291
  %inc = add nsw i32 %17, 1, !dbg !6291
  store i32 %inc, i32* %i, align 4, !dbg !6291
  br label %for.cond, !dbg !6292, !llvm.loop !6293

for.end:                                          ; preds = %for.cond
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6295
  %19 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !6296
  %call16 = call %union.tree_node* @build_vector(%union.tree_node* %18, %union.tree_node* %19), !dbg !6297
  store %union.tree_node* %call16, %union.tree_node** %real_one, align 8, !dbg !6298
  br label %if.end, !dbg !6299

if.else:                                          ; preds = %entry
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6300
  %call17 = call %union.tree_node* @build_real(%union.tree_node* %20, %struct.real_value* byval(%struct.real_value) align 8 @dconst1), !dbg !6301
  store %union.tree_node* %call17, %union.tree_node** %real_one, align 8, !dbg !6302
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  %21 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6303
  %22 = load %union.tree_node*, %union.tree_node** %real_one, align 8, !dbg !6303
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6303
  %call18 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %23), !dbg !6303
  %call19 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 75, %union.tree_node* %21, %union.tree_node* %22, %union.tree_node* %call18), !dbg !6303
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %stmt1, align 8, !dbg !6304
  %24 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6305
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6306
  %call20 = call %union.tree_node* @make_ssa_name(%union.tree_node* %24, %union.gimple_statement_d* %25), !dbg !6307
  store %union.tree_node* %call20, %union.tree_node** %name, align 8, !dbg !6308
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6309
  %27 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6310
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %26, %union.tree_node* %27), !dbg !6311
  %28 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6312
  %29 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6312
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6312
  %call21 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %30), !dbg !6312
  %call22 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 65, %union.tree_node* %28, %union.tree_node* %29, %union.tree_node* %call21), !dbg !6312
  store %union.gimple_statement_d* %call22, %union.gimple_statement_d** %stmt2, align 8, !dbg !6313
  %31 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !6314
  %32 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6315
  %33 = bitcast %struct.gimple_stmt_iterator* %31 to i8*, !dbg !6315
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 24, i1 false), !dbg !6315
  %34 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !6316
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6317
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %34, %union.gimple_statement_d* %35, i32 0), !dbg !6318
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6319
  call void @gsi_replace(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %36, i8 zeroext 1), !dbg !6320
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6321
  ret %union.gimple_statement_d* %37, !dbg !6322
}

declare dso_local i32 @integer_onep(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_single_use(%union.tree_node* %var) #0 !dbg !6323 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6326, metadata !DIExpression()), !dbg !6327
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !6328, metadata !DIExpression()), !dbg !6332
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6333
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6333
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6333
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6332
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6334
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6336
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6337
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6337
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6338
  br i1 %cmp, label %if.then, label %if.end, !dbg !6339

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6340
  br label %return, !dbg !6340

if.end:                                           ; preds = %entry
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6341
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6343
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !6344
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next1, align 8, !dbg !6344
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !6345
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !6345
  %cmp3 = icmp eq %struct.ssa_use_operand_d* %4, %7, !dbg !6346
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !6347

if.then4:                                         ; preds = %if.end
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6348
  %next5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !6348
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next5, align 8, !dbg !6348
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 2, !dbg !6348
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6348
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6348
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %10), !dbg !6349
  %tobool = icmp ne i8 %call, 0, !dbg !6350
  %lnot = xor i1 %tobool, true, !dbg !6350
  %lnot.ext = zext i1 %lnot to i32, !dbg !6350
  %conv = trunc i32 %lnot.ext to i8, !dbg !6350
  store i8 %conv, i8* %retval, align 1, !dbg !6351
  br label %return, !dbg !6351

if.end6:                                          ; preds = %if.end
  %11 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !6352
  %tobool7 = icmp ne i32 %11, 0, !dbg !6352
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !6354

if.then8:                                         ; preds = %if.end6
  store i8 0, i8* %retval, align 1, !dbg !6355
  br label %return, !dbg !6355

if.end9:                                          ; preds = %if.end6
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6356
  %call10 = call zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d** null, %union.gimple_statement_d** null), !dbg !6357
  store i8 %call10, i8* %retval, align 1, !dbg !6358
  br label %return, !dbg !6358

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !6359
  ret i8 %13, !dbg !6359
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @rewrite_bittest(%struct.gimple_stmt_iterator* %bsi) #0 !dbg !6360 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %bsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %stmt1 = alloca %union.gimple_statement_d*, align 8
  %stmt2 = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %a = alloca %union.tree_node*, align 8
  %b = alloca %union.tree_node*, align 8
  %use = alloca %struct.ssa_use_operand_d*, align 8
  %rsi = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_stmt_iterator* %bsi, %struct.gimple_stmt_iterator** %bsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %bsi.addr, metadata !6361, metadata !DIExpression()), !dbg !6362
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6363, metadata !DIExpression()), !dbg !6364
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !6365, metadata !DIExpression()), !dbg !6366
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1, metadata !6367, metadata !DIExpression()), !dbg !6368
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2, metadata !6369, metadata !DIExpression()), !dbg !6370
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6371, metadata !DIExpression()), !dbg !6372
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6373, metadata !DIExpression()), !dbg !6374
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !6375, metadata !DIExpression()), !dbg !6376
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6377, metadata !DIExpression()), !dbg !6378
  call void @llvm.dbg.declare(metadata %union.tree_node** %a, metadata !6379, metadata !DIExpression()), !dbg !6380
  call void @llvm.dbg.declare(metadata %union.tree_node** %b, metadata !6381, metadata !DIExpression()), !dbg !6382
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use, metadata !6383, metadata !DIExpression()), !dbg !6384
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !6385
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !6386
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !6387
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6388
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !6389
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !6390
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6391
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6391
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6391
  %bf.load = load i64, i64* %3, align 8, !dbg !6391
  %bf.clear = and i64 %bf.load, 65535, !dbg !6391
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6391
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6393
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6394

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6395
  %call2 = call zeroext i8 @single_imm_use(%union.tree_node* %4, %struct.ssa_use_operand_d** %use, %union.gimple_statement_d** %use_stmt), !dbg !6396
  %tobool = icmp ne i8 %call2, 0, !dbg !6396
  br i1 %tobool, label %lor.lhs.false3, label %if.then, !dbg !6397

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !6398
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %5), !dbg !6399
  %cmp5 = icmp ne i32 %call4, 1, !dbg !6400
  br i1 %cmp5, label %if.then, label %if.end, !dbg !6401

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6402
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %retval, align 8, !dbg !6403
  br label %return, !dbg !6403

if.end:                                           ; preds = %lor.lhs.false3
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !6404
  %call6 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %7), !dbg !6406
  %8 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6407
  %cmp7 = icmp ne %union.tree_node* %call6, %8, !dbg !6408
  br i1 %cmp7, label %if.then17, label %lor.lhs.false8, !dbg !6409

lor.lhs.false8:                                   ; preds = %if.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !6410
  %call9 = call i32 @gimple_cond_code(%union.gimple_statement_d* %9), !dbg !6411
  %cmp10 = icmp ne i32 %call9, 102, !dbg !6412
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false13, !dbg !6413

land.lhs.true:                                    ; preds = %lor.lhs.false8
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !6414
  %call11 = call i32 @gimple_cond_code(%union.gimple_statement_d* %10), !dbg !6415
  %cmp12 = icmp ne i32 %call11, 101, !dbg !6416
  br i1 %cmp12, label %if.then17, label %lor.lhs.false13, !dbg !6417

lor.lhs.false13:                                  ; preds = %land.lhs.true, %lor.lhs.false8
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !6418
  %call14 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %11), !dbg !6419
  %call15 = call i32 @integer_zerop(%union.tree_node* %call14), !dbg !6420
  %tobool16 = icmp ne i32 %call15, 0, !dbg !6420
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !6421

if.then17:                                        ; preds = %lor.lhs.false13, %land.lhs.true, %if.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6422
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !6423
  br label %return, !dbg !6423

if.end18:                                         ; preds = %lor.lhs.false13
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6424
  %call19 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %13), !dbg !6424
  %ssa_name = bitcast %union.tree_node* %call19 to %struct.tree_ssa_name*, !dbg !6424
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6424
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6424
  store %union.gimple_statement_d* %14, %union.gimple_statement_d** %stmt1, align 8, !dbg !6425
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6426
  %call20 = call i32 @gimple_code(%union.gimple_statement_d* %15), !dbg !6428
  %cmp21 = icmp ne i32 %call20, 6, !dbg !6429
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !6430

if.then22:                                        ; preds = %if.end18
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6431
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %retval, align 8, !dbg !6432
  br label %return, !dbg !6432

if.end23:                                         ; preds = %if.end18
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6433
  %call24 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %17), !dbg !6433
  %cmp25 = icmp eq i32 %call24, 116, !dbg !6433
  br i1 %cmp25, label %if.then29, label %lor.lhs.false26, !dbg !6433

lor.lhs.false26:                                  ; preds = %if.end23
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6433
  %call27 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %18), !dbg !6433
  %cmp28 = icmp eq i32 %call27, 113, !dbg !6433
  br i1 %cmp28, label %if.then29, label %if.end47, !dbg !6435

if.then29:                                        ; preds = %lor.lhs.false26, %if.end23
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6436
  %call30 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %19), !dbg !6438
  store %union.tree_node* %call30, %union.tree_node** %t, align 8, !dbg !6439
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6440
  %base31 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !6440
  %21 = bitcast %struct.tree_base* %base31 to i64*, !dbg !6440
  %bf.load32 = load i64, i64* %21, align 8, !dbg !6440
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !6440
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !6440
  %cmp35 = icmp ne i32 %bf.cast34, 141, !dbg !6442
  br i1 %cmp35, label %if.then39, label %lor.lhs.false36, !dbg !6443

lor.lhs.false36:                                  ; preds = %if.then29
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6444
  %call37 = call zeroext i8 @has_single_use(%union.tree_node* %22), !dbg !6445
  %tobool38 = icmp ne i8 %call37, 0, !dbg !6445
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !6446

if.then39:                                        ; preds = %lor.lhs.false36, %if.then29
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6447
  store %union.gimple_statement_d* %23, %union.gimple_statement_d** %retval, align 8, !dbg !6448
  br label %return, !dbg !6448

if.end40:                                         ; preds = %lor.lhs.false36
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6449
  %ssa_name41 = bitcast %union.tree_node* %24 to %struct.tree_ssa_name*, !dbg !6449
  %def_stmt42 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name41, i32 0, i32 2, !dbg !6449
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt42, align 8, !dbg !6449
  store %union.gimple_statement_d* %25, %union.gimple_statement_d** %stmt1, align 8, !dbg !6450
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6451
  %call43 = call i32 @gimple_code(%union.gimple_statement_d* %26), !dbg !6453
  %cmp44 = icmp ne i32 %call43, 6, !dbg !6454
  br i1 %cmp44, label %if.then45, label %if.end46, !dbg !6455

if.then45:                                        ; preds = %if.end40
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6456
  store %union.gimple_statement_d* %27, %union.gimple_statement_d** %retval, align 8, !dbg !6457
  br label %return, !dbg !6457

if.end46:                                         ; preds = %if.end40
  br label %if.end47, !dbg !6458

if.end47:                                         ; preds = %if.end46, %lor.lhs.false26
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6459
  %call48 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %28), !dbg !6461
  %cmp49 = icmp ne i32 %call48, 84, !dbg !6462
  br i1 %cmp49, label %if.then54, label %lor.lhs.false50, !dbg !6463

lor.lhs.false50:                                  ; preds = %if.end47
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6464
  %call51 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %29), !dbg !6465
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6466
  %call52 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %30), !dbg !6467
  %cmp53 = icmp ne %struct.loop* %call51, %call52, !dbg !6468
  br i1 %cmp53, label %if.then54, label %if.end55, !dbg !6469

if.then54:                                        ; preds = %lor.lhs.false50, %if.end47
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6470
  store %union.gimple_statement_d* %31, %union.gimple_statement_d** %retval, align 8, !dbg !6471
  br label %return, !dbg !6471

if.end55:                                         ; preds = %lor.lhs.false50
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6472
  %call56 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %32), !dbg !6473
  store %union.tree_node* %call56, %union.tree_node** %a, align 8, !dbg !6474
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6475
  %call57 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %33), !dbg !6476
  store %union.tree_node* %call57, %union.tree_node** %b, align 8, !dbg !6477
  %34 = load %union.tree_node*, %union.tree_node** %b, align 8, !dbg !6478
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6480
  %call58 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %35), !dbg !6481
  %call59 = call %struct.loop* @outermost_invariant_loop(%union.tree_node* %34, %struct.loop* %call58), !dbg !6482
  %cmp60 = icmp ne %struct.loop* %call59, null, !dbg !6483
  br i1 %cmp60, label %land.lhs.true61, label %if.end84, !dbg !6484

land.lhs.true61:                                  ; preds = %if.end55
  %36 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !6485
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6486
  %call62 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %37), !dbg !6487
  %call63 = call %struct.loop* @outermost_invariant_loop(%union.tree_node* %36, %struct.loop* %call62), !dbg !6488
  %cmp64 = icmp eq %struct.loop* %call63, null, !dbg !6489
  br i1 %cmp64, label %if.then65, label %if.end84, !dbg !6490

if.then65:                                        ; preds = %land.lhs.true61
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %rsi, metadata !6491, metadata !DIExpression()), !dbg !6493
  %38 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !6494
  %common = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !6494
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6494
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6494
  %call66 = call %union.tree_node* @create_tmp_var(%union.tree_node* %39, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i64 0, i64 0)), !dbg !6495
  store %union.tree_node* %call66, %union.tree_node** %var, align 8, !dbg !6496
  %40 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6497
  %call67 = call zeroext i8 @add_referenced_var(%union.tree_node* %40), !dbg !6498
  %41 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !6499
  %common68 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !6499
  %type69 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common68, i32 0, i32 2, !dbg !6499
  %42 = load %union.tree_node*, %union.tree_node** %type69, align 8, !dbg !6499
  %43 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !6499
  %common70 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !6499
  %type71 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common70, i32 0, i32 2, !dbg !6499
  %44 = load %union.tree_node*, %union.tree_node** %type71, align 8, !dbg !6499
  %call72 = call %union.tree_node* @build_int_cst(%union.tree_node* %44, i64 1), !dbg !6499
  %45 = load %union.tree_node*, %union.tree_node** %b, align 8, !dbg !6499
  %call73 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 83, %union.tree_node* %42, %union.tree_node* %call72, %union.tree_node* %45), !dbg !6499
  store %union.tree_node* %call73, %union.tree_node** %t, align 8, !dbg !6500
  %46 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6501
  %47 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6501
  %call74 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %46, %union.tree_node* %47), !dbg !6501
  store %union.gimple_statement_d* %call74, %union.gimple_statement_d** %stmt1, align 8, !dbg !6502
  %48 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6503
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6504
  %call75 = call %union.tree_node* @make_ssa_name(%union.tree_node* %48, %union.gimple_statement_d* %49), !dbg !6505
  store %union.tree_node* %call75, %union.tree_node** %name, align 8, !dbg !6506
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6507
  %51 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6508
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %50, %union.tree_node* %51), !dbg !6509
  %52 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !6510
  %common76 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !6510
  %type77 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common76, i32 0, i32 2, !dbg !6510
  %53 = load %union.tree_node*, %union.tree_node** %type77, align 8, !dbg !6510
  %54 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !6510
  %55 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6510
  %call78 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 89, %union.tree_node* %53, %union.tree_node* %54, %union.tree_node* %55), !dbg !6510
  store %union.tree_node* %call78, %union.tree_node** %t, align 8, !dbg !6511
  %56 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6512
  %57 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6512
  %call79 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %56, %union.tree_node* %57), !dbg !6512
  store %union.gimple_statement_d* %call79, %union.gimple_statement_d** %stmt2, align 8, !dbg !6513
  %58 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6514
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6515
  %call80 = call %union.tree_node* @make_ssa_name(%union.tree_node* %58, %union.gimple_statement_d* %59), !dbg !6516
  store %union.tree_node* %call80, %union.tree_node** %name, align 8, !dbg !6517
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6518
  %61 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6519
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %60, %union.tree_node* %61), !dbg !6520
  %62 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !6521
  %63 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6521
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %62, %union.tree_node* %63), !dbg !6521
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !6522
  %65 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6523
  %common81 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !6523
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2, !dbg !6523
  %66 = load %union.tree_node*, %union.tree_node** %type82, align 8, !dbg !6523
  %call83 = call %union.tree_node* @build_int_cst_type(%union.tree_node* %66, i64 0), !dbg !6524
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %64, %union.tree_node* %call83), !dbg !6525
  %67 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !6526
  %68 = bitcast %struct.gimple_stmt_iterator* %rsi to i8*, !dbg !6527
  %69 = bitcast %struct.gimple_stmt_iterator* %67 to i8*, !dbg !6527
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 24, i1 false), !dbg !6527
  %70 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %bsi.addr, align 8, !dbg !6528
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6529
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %70, %union.gimple_statement_d* %71, i32 0), !dbg !6530
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6531
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %rsi, %union.gimple_statement_d* %72, i32 1), !dbg !6532
  call void @gsi_remove(%struct.gimple_stmt_iterator* %rsi, i8 zeroext 1), !dbg !6533
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6534
  store %union.gimple_statement_d* %73, %union.gimple_statement_d** %retval, align 8, !dbg !6535
  br label %return, !dbg !6535

if.end84:                                         ; preds = %land.lhs.true61, %if.end55
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6536
  store %union.gimple_statement_d* %74, %union.gimple_statement_d** %retval, align 8, !dbg !6537
  br label %return, !dbg !6537

return:                                           ; preds = %if.end84, %if.then65, %if.then54, %if.then45, %if.then39, %if.then22, %if.then17, %if.then
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6538
  ret %union.gimple_statement_d* %75, !dbg !6538
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @determine_max_movement(%union.gimple_statement_d* %stmt, i8 zeroext %must_preserve_exec) #0 !dbg !6539 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %must_preserve_exec.addr = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %loop = alloca %struct.loop*, align 8
  %level = alloca %struct.loop*, align 8
  %lim_data = alloca %struct.lim_aux_data*, align 8
  %val = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %ref = alloca %struct.mem_ref*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6542, metadata !DIExpression()), !dbg !6543
  store i8 %must_preserve_exec, i8* %must_preserve_exec.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %must_preserve_exec.addr, metadata !6544, metadata !DIExpression()), !dbg !6545
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6546, metadata !DIExpression()), !dbg !6547
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6548
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !6549
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !6547
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !6550, metadata !DIExpression()), !dbg !6551
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6552
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 3, !dbg !6553
  %2 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !6553
  store %struct.loop* %2, %struct.loop** %loop, align 8, !dbg !6551
  call void @llvm.dbg.declare(metadata %struct.loop** %level, metadata !6554, metadata !DIExpression()), !dbg !6555
  call void @llvm.dbg.declare(metadata %struct.lim_aux_data** %lim_data, metadata !6556, metadata !DIExpression()), !dbg !6557
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6558
  %call1 = call %struct.lim_aux_data* @get_lim_data(%union.gimple_statement_d* %3), !dbg !6559
  store %struct.lim_aux_data* %call1, %struct.lim_aux_data** %lim_data, align 8, !dbg !6557
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !6560, metadata !DIExpression()), !dbg !6561
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6562, metadata !DIExpression()), !dbg !6575
  %4 = load i8, i8* %must_preserve_exec.addr, align 1, !dbg !6576
  %tobool = icmp ne i8 %4, 0, !dbg !6576
  br i1 %tobool, label %if.then, label %if.else, !dbg !6578

if.then:                                          ; preds = %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6579
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 2, !dbg !6579
  %6 = load i8*, i8** %aux, align 8, !dbg !6579
  %7 = bitcast i8* %6 to %struct.loop*, !dbg !6579
  store %struct.loop* %7, %struct.loop** %level, align 8, !dbg !6580
  br label %if.end, !dbg !6581

if.else:                                          ; preds = %entry
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6582
  %call2 = call %struct.loop* @superloop_at_depth(%struct.loop* %8, i32 1), !dbg !6583
  store %struct.loop* %call2, %struct.loop** %level, align 8, !dbg !6584
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.loop*, %struct.loop** %level, align 8, !dbg !6585
  %10 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6586
  %max_loop = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %10, i32 0, i32 0, !dbg !6587
  store %struct.loop* %9, %struct.loop** %max_loop, align 8, !dbg !6588
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6589
  %call3 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %11, i32 1), !dbg !6589
  store %union.tree_node* %call3, %union.tree_node** %val, align 8, !dbg !6589
  br label %for.cond, !dbg !6589

for.cond:                                         ; preds = %for.inc, %if.end
  %call4 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6591
  %tobool5 = icmp ne i8 %call4, 0, !dbg !6591
  %lnot = xor i1 %tobool5, true, !dbg !6591
  br i1 %lnot, label %for.body, label %for.end, !dbg !6589

for.body:                                         ; preds = %for.cond
  %12 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6593
  %13 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6595
  %14 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6596
  %call6 = call zeroext i8 @add_dependency(%union.tree_node* %12, %struct.lim_aux_data* %13, %struct.loop* %14, i8 zeroext 1), !dbg !6597
  %tobool7 = icmp ne i8 %call6, 0, !dbg !6597
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !6598

if.then8:                                         ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !6599
  br label %return, !dbg !6599

if.end9:                                          ; preds = %for.body
  br label %for.inc, !dbg !6600

for.inc:                                          ; preds = %if.end9
  %call10 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !6591
  store %union.tree_node* %call10, %union.tree_node** %val, align 8, !dbg !6591
  br label %for.cond, !dbg !6591, !llvm.loop !6601

for.end:                                          ; preds = %for.cond
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6603
  %call11 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %15), !dbg !6605
  %tobool12 = icmp ne %union.tree_node* %call11, null, !dbg !6605
  br i1 %tobool12, label %if.then13, label %if.end33, !dbg !6606

if.then13:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref, metadata !6607, metadata !DIExpression()), !dbg !6609
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6610
  %call14 = call %struct.mem_ref* @mem_ref_in_stmt(%union.gimple_statement_d* %16), !dbg !6611
  store %struct.mem_ref* %call14, %struct.mem_ref** %ref, align 8, !dbg !6609
  %17 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !6612
  %tobool15 = icmp ne %struct.mem_ref* %17, null, !dbg !6612
  br i1 %tobool15, label %if.then16, label %if.else24, !dbg !6614

if.then16:                                        ; preds = %if.then13
  %18 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6615
  %max_loop17 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %18, i32 0, i32 0, !dbg !6617
  %19 = load %struct.loop*, %struct.loop** %max_loop17, align 8, !dbg !6617
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6618
  %21 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !6619
  %call18 = call %struct.loop* @outermost_indep_loop(%struct.loop* %19, %struct.loop* %20, %struct.mem_ref* %21), !dbg !6620
  %22 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6621
  %max_loop19 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %22, i32 0, i32 0, !dbg !6622
  store %struct.loop* %call18, %struct.loop** %max_loop19, align 8, !dbg !6623
  %23 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6624
  %max_loop20 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %23, i32 0, i32 0, !dbg !6626
  %24 = load %struct.loop*, %struct.loop** %max_loop20, align 8, !dbg !6626
  %tobool21 = icmp ne %struct.loop* %24, null, !dbg !6624
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !6627

if.then22:                                        ; preds = %if.then16
  store i8 0, i8* %retval, align 1, !dbg !6628
  br label %return, !dbg !6628

if.end23:                                         ; preds = %if.then16
  br label %if.end32, !dbg !6629

if.else24:                                        ; preds = %if.then13
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6630
  %call25 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %25), !dbg !6633
  store %union.tree_node* %call25, %union.tree_node** %val, align 8, !dbg !6634
  %cmp = icmp ne %union.tree_node* %call25, null, !dbg !6635
  br i1 %cmp, label %if.then26, label %if.end31, !dbg !6636

if.then26:                                        ; preds = %if.else24
  %26 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6637
  %27 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6640
  %28 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6641
  %call27 = call zeroext i8 @add_dependency(%union.tree_node* %26, %struct.lim_aux_data* %27, %struct.loop* %28, i8 zeroext 0), !dbg !6642
  %tobool28 = icmp ne i8 %call27, 0, !dbg !6642
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !6643

if.then29:                                        ; preds = %if.then26
  store i8 0, i8* %retval, align 1, !dbg !6644
  br label %return, !dbg !6644

if.end30:                                         ; preds = %if.then26
  br label %if.end31, !dbg !6645

if.end31:                                         ; preds = %if.end30, %if.else24
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %if.end23
  br label %if.end33, !dbg !6646

if.end33:                                         ; preds = %if.end32, %for.end
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6647
  %call34 = call i32 @stmt_cost(%union.gimple_statement_d* %29), !dbg !6648
  %30 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !6649
  %cost = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %30, i32 0, i32 3, !dbg !6650
  %31 = load i32, i32* %cost, align 8, !dbg !6651
  %add = add i32 %31, %call34, !dbg !6651
  store i32 %add, i32* %cost, align 8, !dbg !6651
  store i8 1, i8* %retval, align 1, !dbg !6652
  br label %return, !dbg !6652

return:                                           ; preds = %if.end33, %if.then29, %if.then22, %if.then8
  %32 = load i8, i8* %retval, align 1, !dbg !6653
  ret i8 %32, !dbg !6653
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_profitable_level(%union.gimple_statement_d* %stmt) #0 !dbg !6654 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6657, metadata !DIExpression()), !dbg !6658
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6659
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6660
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1), !dbg !6661
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 3, !dbg !6662
  %2 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !6662
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6663
  %call1 = call %struct.lim_aux_data* @get_lim_data(%union.gimple_statement_d* %3), !dbg !6664
  %max_loop = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %call1, i32 0, i32 0, !dbg !6665
  %4 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !6665
  call void @set_level(%union.gimple_statement_d* %0, %struct.loop* %2, %struct.loop* %4), !dbg !6666
  ret void, !dbg !6667
}

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6668 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6671, metadata !DIExpression()), !dbg !6672
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6673
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6674
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6675
  %1 = load i32, i32* %num_ops, align 4, !dbg !6675
  ret i32 %1, !dbg !6676
}

declare dso_local %struct.loop* @superloop_at_depth(%struct.loop*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !6677 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6680, metadata !DIExpression()), !dbg !6681
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6682
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6683
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !6684
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6684
  ret %struct.basic_block_def* %1, !dbg !6685
}

declare dso_local %struct.loop* @find_common_loop(%struct.loop*, %struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.lim_aux_data* @get_lim_data(%union.gimple_statement_d* %stmt) #0 !dbg !6686 {
entry:
  %retval = alloca %struct.lim_aux_data*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %p = alloca i8**, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6687, metadata !DIExpression()), !dbg !6688
  call void @llvm.dbg.declare(metadata i8*** %p, metadata !6689, metadata !DIExpression()), !dbg !6690
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @lim_aux_data_map, align 8, !dbg !6691
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6692
  %2 = bitcast %union.gimple_statement_d* %1 to i8*, !dbg !6692
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %2), !dbg !6693
  store i8** %call, i8*** %p, align 8, !dbg !6690
  %3 = load i8**, i8*** %p, align 8, !dbg !6694
  %tobool = icmp ne i8** %3, null, !dbg !6694
  br i1 %tobool, label %if.end, label %if.then, !dbg !6696

if.then:                                          ; preds = %entry
  store %struct.lim_aux_data* null, %struct.lim_aux_data** %retval, align 8, !dbg !6697
  br label %return, !dbg !6697

if.end:                                           ; preds = %entry
  %4 = load i8**, i8*** %p, align 8, !dbg !6698
  %5 = load i8*, i8** %4, align 8, !dbg !6699
  %6 = bitcast i8* %5 to %struct.lim_aux_data*, !dbg !6700
  store %struct.lim_aux_data* %6, %struct.lim_aux_data** %retval, align 8, !dbg !6701
  br label %return, !dbg !6701

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.lim_aux_data*, %struct.lim_aux_data** %retval, align 8, !dbg !6702
  ret %struct.lim_aux_data* %7, !dbg !6702
}

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_real(%union.tree_node*, %struct.real_value* byval(%struct.real_value) align 8) #2

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_vector(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !6703 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6706, metadata !DIExpression()), !dbg !6707
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6708, metadata !DIExpression()), !dbg !6709
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6710
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6710
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6711
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6712
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !6713
  ret %union.tree_node* %call, !dbg !6714
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !6715 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6718, metadata !DIExpression()), !dbg !6719
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !6720, metadata !DIExpression()), !dbg !6721
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6722
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6723
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !6724
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6725
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6725
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6727

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6728
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6728
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6728
  %bf.load = load i64, i64* %4, align 8, !dbg !6728
  %bf.clear = and i64 %bf.load, 65535, !dbg !6728
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6728
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6729
  br i1 %cmp, label %if.then, label %if.end, !dbg !6730

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6731
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6732
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !6732
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6732
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6733
  br label %if.end, !dbg !6732

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !6734
}

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @gsi_replace(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i8 zeroext) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !6735 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6738, metadata !DIExpression()), !dbg !6739
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6740, metadata !DIExpression()), !dbg !6741
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6742, metadata !DIExpression()), !dbg !6743
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6744
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6744
  %conv = zext i8 %call to i32, !dbg !6744
  %tobool = icmp ne i32 %conv, 0, !dbg !6744
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6744

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !6744
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6744
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !6744
  %cmp = icmp ult i32 %1, %call1, !dbg !6744
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6744

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6744
  br label %cond.end, !dbg !6744

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6744

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6744
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6745
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6746
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !6747
  %5 = load i32, i32* %i.addr, align 4, !dbg !6748
  %idxprom = zext i32 %5 to i64, !dbg !6747
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !6747
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !6749
  ret void, !dbg !6750
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !6751 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6752, metadata !DIExpression()), !dbg !6753
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6754
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6755
  %cmp = icmp eq i32 %call, 2, !dbg !6756
  %conv = zext i1 %cmp to i32, !dbg !6756
  %conv1 = trunc i32 %conv to i8, !dbg !6755
  ret i8 %conv1, !dbg !6757
}

declare dso_local zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d*, %struct.ssa_use_operand_d**, %union.gimple_statement_d**) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_imm_use(%union.tree_node* %var, %struct.ssa_use_operand_d** %use_p, %union.gimple_statement_d** %stmt) #0 !dbg !6758 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %use_p.addr = alloca %struct.ssa_use_operand_d**, align 8
  %stmt.addr = alloca %union.gimple_statement_d**, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6763, metadata !DIExpression()), !dbg !6764
  store %struct.ssa_use_operand_d** %use_p, %struct.ssa_use_operand_d*** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d*** %use_p.addr, metadata !6765, metadata !DIExpression()), !dbg !6766
  store %union.gimple_statement_d** %stmt, %union.gimple_statement_d*** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmt.addr, metadata !6767, metadata !DIExpression()), !dbg !6768
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !6769, metadata !DIExpression()), !dbg !6770
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6771
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6771
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6771
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6770
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6772
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6774
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6775
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6775
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6776
  br i1 %cmp, label %if.then, label %if.end, !dbg !6777

if.then:                                          ; preds = %entry
  br label %return_false, !dbg !6778

return_false:                                     ; preds = %if.then14, %if.else, %if.then
  call void @llvm.dbg.label(metadata !6779), !dbg !6781
  %4 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !6782
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %4, align 8, !dbg !6783
  %5 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !6784
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %5, align 8, !dbg !6785
  store i8 0, i8* %retval, align 1, !dbg !6786
  br label %return, !dbg !6786

if.end:                                           ; preds = %entry
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6787
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6789
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 1, !dbg !6790
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next1, align 8, !dbg !6790
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !6791
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !6791
  %cmp3 = icmp eq %struct.ssa_use_operand_d* %6, %9, !dbg !6792
  br i1 %cmp3, label %if.then4, label %if.end12, !dbg !6793

if.then4:                                         ; preds = %if.end
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6794
  %next5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 1, !dbg !6794
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next5, align 8, !dbg !6794
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !6794
  %stmt6 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6794
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !6794
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %12), !dbg !6797
  %tobool = icmp ne i8 %call, 0, !dbg !6797
  br i1 %tobool, label %if.else, label %if.then7, !dbg !6798

if.then7:                                         ; preds = %if.then4
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6799
  %next8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %13, i32 0, i32 1, !dbg !6801
  %14 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next8, align 8, !dbg !6801
  %15 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !6802
  store %struct.ssa_use_operand_d* %14, %struct.ssa_use_operand_d** %15, align 8, !dbg !6803
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6804
  %next9 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 1, !dbg !6805
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next9, align 8, !dbg !6805
  %loc10 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %17, i32 0, i32 2, !dbg !6806
  %stmt11 = bitcast %union.anon* %loc10 to %union.gimple_statement_d**, !dbg !6807
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt11, align 8, !dbg !6807
  %19 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !6808
  store %union.gimple_statement_d* %18, %union.gimple_statement_d** %19, align 8, !dbg !6809
  store i8 1, i8* %retval, align 1, !dbg !6810
  br label %return, !dbg !6810

if.else:                                          ; preds = %if.then4
  br label %return_false, !dbg !6811

if.end12:                                         ; preds = %if.end
  %20 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !6812
  %tobool13 = icmp ne i32 %20, 0, !dbg !6812
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !6814

if.then14:                                        ; preds = %if.end12
  br label %return_false, !dbg !6815

if.end15:                                         ; preds = %if.end12
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6816
  %22 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !6817
  %23 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !6818
  %call16 = call zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* %21, %struct.ssa_use_operand_d** %22, %union.gimple_statement_d** %23), !dbg !6819
  store i8 %call16, i8* %retval, align 1, !dbg !6820
  br label %return, !dbg !6820

return:                                           ; preds = %if.end15, %if.then7, %return_false
  %24 = load i8, i8* %retval, align 1, !dbg !6821
  ret i8 %24, !dbg !6821
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6822 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6823, metadata !DIExpression()), !dbg !6824
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6825
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6826
  ret %union.tree_node* %call, !dbg !6827
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !6828 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6829, metadata !DIExpression()), !dbg !6830
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6831
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6832
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6833
  %bf.load = load i32, i32* %1, align 8, !dbg !6833
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6833
  ret i32 %bf.lshr, !dbg !6834
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !6835 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6836, metadata !DIExpression()), !dbg !6837
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6838
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6839
  ret %union.tree_node* %call, !dbg !6840
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !6841 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6844, metadata !DIExpression()), !dbg !6845
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !6846, metadata !DIExpression()), !dbg !6847
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6848
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !6849
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6850
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6851
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !6852
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6852
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !6853
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6854
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6855
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !6856
  ret void, !dbg !6857
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !6858 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6859, metadata !DIExpression()), !dbg !6860
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !6861, metadata !DIExpression()), !dbg !6862
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6863
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6864
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !6865
  ret void, !dbg !6866
}

declare dso_local %union.tree_node* @build_int_cst_type(%union.tree_node*, i64) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !6867 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !6870, metadata !DIExpression()), !dbg !6871
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6872
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !6874
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6874
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !6875
  br i1 %cmp, label %if.then, label %if.end, !dbg !6876

if.then:                                          ; preds = %entry
  br label %return, !dbg !6877

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6878
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6879
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6879
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6880
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !6881
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !6881
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !6882
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !6883
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6884
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !6885
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !6885
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6886
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !6887
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !6887
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !6888
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !6889
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6890
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !6891
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !6892
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6893
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !6894
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !6895
  br label %return, !dbg !6896

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !6896
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !6897 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !6900, metadata !DIExpression()), !dbg !6901
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !6902, metadata !DIExpression()), !dbg !6903
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !6904, metadata !DIExpression()), !dbg !6905
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6906
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6906
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6908

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6909
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6909
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6909
  %bf.load = load i64, i64* %2, align 8, !dbg !6909
  %bf.clear = and i64 %bf.load, 65535, !dbg !6909
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6909
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6910
  br i1 %cmp, label %if.then, label %if.else, !dbg !6911

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6912
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !6913
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6914
  br label %if.end, !dbg !6912

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6915
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !6915
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6915
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !6917
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6918
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !6919
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !6920
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !6921
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !6922 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !6925, metadata !DIExpression()), !dbg !6926
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !6927, metadata !DIExpression()), !dbg !6928
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6929
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6930
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !6931
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6932
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6933
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6934
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6934
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6935
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !6936
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !6937
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6938
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6939
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !6940
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !6940
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !6941
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !6942
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6943
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6944
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !6945
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !6946
  ret void, !dbg !6947
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6948 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6952, metadata !DIExpression()), !dbg !6953
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6954, metadata !DIExpression()), !dbg !6955
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6956, metadata !DIExpression()), !dbg !6957
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6958
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6959
  %2 = load i32, i32* %flags.addr, align 4, !dbg !6960
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !6961
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6962
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !6963
  store i32 1, i32* %iter_type, align 4, !dbg !6964
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6965
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !6966
  ret %union.tree_node* %call, !dbg !6967
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6968 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6973, metadata !DIExpression()), !dbg !6974
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6975
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !6976
  %1 = load i8, i8* %done, align 8, !dbg !6976
  ret i8 %1, !dbg !6977
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @add_dependency(%union.tree_node* %def, %struct.lim_aux_data* %data, %struct.loop* %loop, i8 zeroext %add_cost) #0 !dbg !6978 {
entry:
  %retval = alloca i8, align 1
  %def.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca %struct.lim_aux_data*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %add_cost.addr = alloca i8, align 1
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %def_bb = alloca %struct.basic_block_def*, align 8
  %max_loop = alloca %struct.loop*, align 8
  %dep = alloca %struct.depend*, align 8
  %def_data = alloca %struct.lim_aux_data*, align 8
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !6981, metadata !DIExpression()), !dbg !6982
  store %struct.lim_aux_data* %data, %struct.lim_aux_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lim_aux_data** %data.addr, metadata !6983, metadata !DIExpression()), !dbg !6984
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6985, metadata !DIExpression()), !dbg !6986
  store i8 %add_cost, i8* %add_cost.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %add_cost.addr, metadata !6987, metadata !DIExpression()), !dbg !6988
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !6989, metadata !DIExpression()), !dbg !6990
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6991
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6991
  %def_stmt1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6991
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt1, align 8, !dbg !6991
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6990
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !6992, metadata !DIExpression()), !dbg !6993
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6994
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !6995
  store %struct.basic_block_def* %call, %struct.basic_block_def** %def_bb, align 8, !dbg !6993
  call void @llvm.dbg.declare(metadata %struct.loop** %max_loop, metadata !6996, metadata !DIExpression()), !dbg !6997
  call void @llvm.dbg.declare(metadata %struct.depend** %dep, metadata !6998, metadata !DIExpression()), !dbg !6999
  call void @llvm.dbg.declare(metadata %struct.lim_aux_data** %def_data, metadata !7000, metadata !DIExpression()), !dbg !7001
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !7002
  %tobool = icmp ne %struct.basic_block_def* %3, null, !dbg !7002
  br i1 %tobool, label %if.end, label %if.then, !dbg !7004

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !7005
  br label %return, !dbg !7005

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !7006
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7007
  %call2 = call %struct.loop* @outermost_invariant_loop(%union.tree_node* %4, %struct.loop* %5), !dbg !7008
  store %struct.loop* %call2, %struct.loop** %max_loop, align 8, !dbg !7009
  %6 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !7010
  %tobool3 = icmp ne %struct.loop* %6, null, !dbg !7010
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !7012

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !7013
  br label %return, !dbg !7013

if.end5:                                          ; preds = %if.end
  %7 = load %struct.lim_aux_data*, %struct.lim_aux_data** %data.addr, align 8, !dbg !7014
  %max_loop6 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %7, i32 0, i32 0, !dbg !7016
  %8 = load %struct.loop*, %struct.loop** %max_loop6, align 8, !dbg !7016
  %9 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !7017
  %call7 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %8, %struct.loop* %9), !dbg !7018
  %tobool8 = icmp ne i8 %call7, 0, !dbg !7018
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !7019

if.then9:                                         ; preds = %if.end5
  %10 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !7020
  %11 = load %struct.lim_aux_data*, %struct.lim_aux_data** %data.addr, align 8, !dbg !7021
  %max_loop10 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %11, i32 0, i32 0, !dbg !7022
  store %struct.loop* %10, %struct.loop** %max_loop10, align 8, !dbg !7023
  br label %if.end11, !dbg !7021

if.end11:                                         ; preds = %if.then9, %if.end5
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7024
  %call12 = call %struct.lim_aux_data* @get_lim_data(%union.gimple_statement_d* %12), !dbg !7025
  store %struct.lim_aux_data* %call12, %struct.lim_aux_data** %def_data, align 8, !dbg !7026
  %13 = load %struct.lim_aux_data*, %struct.lim_aux_data** %def_data, align 8, !dbg !7027
  %tobool13 = icmp ne %struct.lim_aux_data* %13, null, !dbg !7027
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !7029

if.then14:                                        ; preds = %if.end11
  store i8 1, i8* %retval, align 1, !dbg !7030
  br label %return, !dbg !7030

if.end15:                                         ; preds = %if.end11
  %14 = load i8, i8* %add_cost.addr, align 1, !dbg !7031
  %conv = zext i8 %14 to i32, !dbg !7031
  %tobool16 = icmp ne i32 %conv, 0, !dbg !7031
  br i1 %tobool16, label %land.lhs.true, label %if.end20, !dbg !7033

land.lhs.true:                                    ; preds = %if.end15
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !7034
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 3, !dbg !7035
  %16 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !7035
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7036
  %cmp = icmp eq %struct.loop* %16, %17, !dbg !7037
  br i1 %cmp, label %if.then18, label %if.end20, !dbg !7038

if.then18:                                        ; preds = %land.lhs.true
  %18 = load %struct.lim_aux_data*, %struct.lim_aux_data** %def_data, align 8, !dbg !7039
  %cost = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %18, i32 0, i32 3, !dbg !7040
  %19 = load i32, i32* %cost, align 8, !dbg !7040
  %20 = load %struct.lim_aux_data*, %struct.lim_aux_data** %data.addr, align 8, !dbg !7041
  %cost19 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %20, i32 0, i32 3, !dbg !7042
  %21 = load i32, i32* %cost19, align 8, !dbg !7043
  %add = add i32 %21, %19, !dbg !7043
  store i32 %add, i32* %cost19, align 8, !dbg !7043
  br label %if.end20, !dbg !7041

if.end20:                                         ; preds = %if.then18, %land.lhs.true, %if.end15
  %call21 = call i8* @xmalloc(i64 16), !dbg !7044
  %22 = bitcast i8* %call21 to %struct.depend*, !dbg !7044
  store %struct.depend* %22, %struct.depend** %dep, align 8, !dbg !7045
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7046
  %24 = load %struct.depend*, %struct.depend** %dep, align 8, !dbg !7047
  %stmt = getelementptr inbounds %struct.depend, %struct.depend* %24, i32 0, i32 0, !dbg !7048
  store %union.gimple_statement_d* %23, %union.gimple_statement_d** %stmt, align 8, !dbg !7049
  %25 = load %struct.lim_aux_data*, %struct.lim_aux_data** %data.addr, align 8, !dbg !7050
  %depends = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %25, i32 0, i32 4, !dbg !7051
  %26 = load %struct.depend*, %struct.depend** %depends, align 8, !dbg !7051
  %27 = load %struct.depend*, %struct.depend** %dep, align 8, !dbg !7052
  %next = getelementptr inbounds %struct.depend, %struct.depend* %27, i32 0, i32 1, !dbg !7053
  store %struct.depend* %26, %struct.depend** %next, align 8, !dbg !7054
  %28 = load %struct.depend*, %struct.depend** %dep, align 8, !dbg !7055
  %29 = load %struct.lim_aux_data*, %struct.lim_aux_data** %data.addr, align 8, !dbg !7056
  %depends22 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %29, i32 0, i32 4, !dbg !7057
  store %struct.depend* %28, %struct.depend** %depends22, align 8, !dbg !7058
  store i8 1, i8* %retval, align 1, !dbg !7059
  br label %return, !dbg !7059

return:                                           ; preds = %if.end20, %if.then14, %if.then4, %if.then
  %30 = load i8, i8* %retval, align 1, !dbg !7060
  ret i8 %30, !dbg !7060
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7061 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7064, metadata !DIExpression()), !dbg !7065
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !7066, metadata !DIExpression()), !dbg !7067
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7068
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !7070
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !7070
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !7068
  br i1 %tobool, label %if.then, label %if.end, !dbg !7071

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7072
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !7072
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !7072
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !7072
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !7072
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !7074
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7075
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !7076
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !7076
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !7077
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !7077
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7078
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !7079
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !7080
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7081
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !7082
  br label %return, !dbg !7082

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7083
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !7085
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !7085
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !7083
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !7086

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7087
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !7087
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !7087
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !7087
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !7087
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !7087
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !7089
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7090
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !7091
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !7091
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !7092
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !7092
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7093
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !7094
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !7095
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7096
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !7097
  br label %return, !dbg !7097

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7098
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !7099
  store i8 1, i8* %done, align 8, !dbg !7100
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7101
  br label %return, !dbg !7101

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7102
  ret %union.tree_node* %20, !dbg !7102
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.mem_ref* @mem_ref_in_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !7103 {
entry:
  %retval = alloca %struct.mem_ref*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %store = alloca i8, align 1
  %mem = alloca %union.tree_node**, align 8
  %hash = alloca i32, align 4
  %ref = alloca %struct.mem_ref*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7106, metadata !DIExpression()), !dbg !7107
  call void @llvm.dbg.declare(metadata i8* %store, metadata !7108, metadata !DIExpression()), !dbg !7109
  call void @llvm.dbg.declare(metadata %union.tree_node*** %mem, metadata !7110, metadata !DIExpression()), !dbg !7111
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7112
  %call = call %union.tree_node** @simple_mem_ref_in_stmt(%union.gimple_statement_d* %0, i8* %store), !dbg !7113
  store %union.tree_node** %call, %union.tree_node*** %mem, align 8, !dbg !7111
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !7114, metadata !DIExpression()), !dbg !7115
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref, metadata !7116, metadata !DIExpression()), !dbg !7117
  %1 = load %union.tree_node**, %union.tree_node*** %mem, align 8, !dbg !7118
  %tobool = icmp ne %union.tree_node** %1, null, !dbg !7118
  br i1 %tobool, label %if.end, label %if.then, !dbg !7120

if.then:                                          ; preds = %entry
  store %struct.mem_ref* null, %struct.mem_ref** %retval, align 8, !dbg !7121
  br label %return, !dbg !7121

if.end:                                           ; preds = %entry
  %2 = load i8, i8* %store, align 1, !dbg !7122
  %tobool1 = icmp ne i8 %2, 0, !dbg !7122
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7122

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7122
  br label %cond.end, !dbg !7122

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7122

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7122
  %3 = load %union.tree_node**, %union.tree_node*** %mem, align 8, !dbg !7123
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !7124
  %call2 = call i32 @iterative_hash_expr(%union.tree_node* %4, i32 0), !dbg !7125
  store i32 %call2, i32* %hash, align 4, !dbg !7126
  %5 = load %struct.htab*, %struct.htab** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 0), align 8, !dbg !7127
  %6 = load %union.tree_node**, %union.tree_node*** %mem, align 8, !dbg !7128
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !7129
  %8 = bitcast %union.tree_node* %7 to i8*, !dbg !7129
  %9 = load i32, i32* %hash, align 4, !dbg !7130
  %call3 = call i8* @htab_find_with_hash(%struct.htab* %5, i8* %8, i32 %9), !dbg !7131
  %10 = bitcast i8* %call3 to %struct.mem_ref*, !dbg !7132
  store %struct.mem_ref* %10, %struct.mem_ref** %ref, align 8, !dbg !7133
  %11 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !7134
  %cmp = icmp ne %struct.mem_ref* %11, null, !dbg !7134
  br i1 %cmp, label %cond.false5, label %cond.true4, !dbg !7134

cond.true4:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i32 650, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7134
  br label %cond.end6, !dbg !7134

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !7134

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !7134
  %12 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !7135
  store %struct.mem_ref* %12, %struct.mem_ref** %retval, align 8, !dbg !7136
  br label %return, !dbg !7136

return:                                           ; preds = %cond.end6, %if.then
  %13 = load %struct.mem_ref*, %struct.mem_ref** %retval, align 8, !dbg !7137
  ret %struct.mem_ref* %13, !dbg !7137
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @outermost_indep_loop(%struct.loop* %outer, %struct.loop* %loop, %struct.mem_ref* %ref) #0 !dbg !7138 {
entry:
  %retval = alloca %struct.loop*, align 8
  %outer.addr = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %ref.addr = alloca %struct.mem_ref*, align 8
  %aloop = alloca %struct.loop*, align 8
  store %struct.loop* %outer, %struct.loop** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %outer.addr, metadata !7141, metadata !DIExpression()), !dbg !7142
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7143, metadata !DIExpression()), !dbg !7144
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !7145, metadata !DIExpression()), !dbg !7146
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !7147, metadata !DIExpression()), !dbg !7148
  %0 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7149
  %stored = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %0, i32 0, i32 3, !dbg !7151
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %stored, align 8, !dbg !7151
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7152
  %num = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 0, !dbg !7153
  %3 = load i32, i32* %num, align 8, !dbg !7153
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %3), !dbg !7154
  %tobool = icmp ne i32 %call, 0, !dbg !7154
  br i1 %tobool, label %if.then, label %if.end, !dbg !7155

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !7156
  br label %return, !dbg !7156

if.end:                                           ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %outer.addr, align 8, !dbg !7157
  store %struct.loop* %4, %struct.loop** %aloop, align 8, !dbg !7159
  br label %for.cond, !dbg !7160

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7161
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7163
  %cmp = icmp ne %struct.loop* %5, %6, !dbg !7164
  br i1 %cmp, label %for.body, label %for.end, !dbg !7165

for.body:                                         ; preds = %for.cond
  %7 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7166
  %stored1 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %7, i32 0, i32 3, !dbg !7168
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %stored1, align 8, !dbg !7168
  %9 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7169
  %num2 = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 0, !dbg !7170
  %10 = load i32, i32* %num2, align 8, !dbg !7170
  %call3 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %8, i32 %10), !dbg !7171
  %tobool4 = icmp ne i32 %call3, 0, !dbg !7171
  br i1 %tobool4, label %if.end8, label %land.lhs.true, !dbg !7172

land.lhs.true:                                    ; preds = %for.body
  %11 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7173
  %12 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7174
  %call5 = call zeroext i8 @ref_indep_loop_p(%struct.loop* %11, %struct.mem_ref* %12), !dbg !7175
  %conv = zext i8 %call5 to i32, !dbg !7175
  %tobool6 = icmp ne i32 %conv, 0, !dbg !7175
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7176

if.then7:                                         ; preds = %land.lhs.true
  %13 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7177
  store %struct.loop* %13, %struct.loop** %retval, align 8, !dbg !7178
  br label %return, !dbg !7178

if.end8:                                          ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !7179

for.inc:                                          ; preds = %if.end8
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7180
  %15 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7181
  %call9 = call i32 @loop_depth(%struct.loop* %15), !dbg !7182
  %add = add i32 %call9, 1, !dbg !7183
  %call10 = call %struct.loop* @superloop_at_depth(%struct.loop* %14, i32 %add), !dbg !7184
  store %struct.loop* %call10, %struct.loop** %aloop, align 8, !dbg !7185
  br label %for.cond, !dbg !7186, !llvm.loop !7187

for.end:                                          ; preds = %for.cond
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7189
  %17 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7191
  %call11 = call zeroext i8 @ref_indep_loop_p(%struct.loop* %16, %struct.mem_ref* %17), !dbg !7192
  %tobool12 = icmp ne i8 %call11, 0, !dbg !7192
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !7193

if.then13:                                        ; preds = %for.end
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7194
  store %struct.loop* %18, %struct.loop** %retval, align 8, !dbg !7195
  br label %return, !dbg !7195

if.else:                                          ; preds = %for.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !7196
  br label %return, !dbg !7196

return:                                           ; preds = %if.else, %if.then13, %if.then7, %if.then
  %19 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !7197
  ret %struct.loop* %19, !dbg !7197
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @stmt_cost(%union.gimple_statement_d* %stmt) #0 !dbg !7198 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %cost = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7201, metadata !DIExpression()), !dbg !7202
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !7203, metadata !DIExpression()), !dbg !7204
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !7205, metadata !DIExpression()), !dbg !7206
  store i32 1, i32* %cost, align 4, !dbg !7206
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7207
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7209
  %cmp = icmp eq i32 %call, 1, !dbg !7210
  br i1 %cmp, label %if.then, label %if.end, !dbg !7211

if.then:                                          ; preds = %entry
  %1 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7212
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %1, i64 59, !dbg !7212
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !7212
  %2 = load i32, i32* %value, align 8, !dbg !7212
  store i32 %2, i32* %retval, align 4, !dbg !7213
  br label %return, !dbg !7213

if.end:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7214
  %call1 = call zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %3), !dbg !7216
  %tobool = icmp ne i8 %call1, 0, !dbg !7216
  br i1 %tobool, label %if.then2, label %if.end3, !dbg !7217

if.then2:                                         ; preds = %if.end
  %4 = load i32, i32* %cost, align 4, !dbg !7218
  %add = add i32 %4, 20, !dbg !7218
  store i32 %add, i32* %cost, align 4, !dbg !7218
  br label %if.end3, !dbg !7219

if.end3:                                          ; preds = %if.then2, %if.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7220
  %call4 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %5), !dbg !7222
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7222
  br i1 %tobool5, label %if.then6, label %if.end18, !dbg !7223

if.then6:                                         ; preds = %if.end3
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7224
  %call7 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %6), !dbg !7226
  store %union.tree_node* %call7, %union.tree_node** %fndecl, align 8, !dbg !7227
  %7 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7228
  %tobool8 = icmp ne %union.tree_node* %7, null, !dbg !7228
  br i1 %tobool8, label %land.lhs.true, label %if.end16, !dbg !7230

land.lhs.true:                                    ; preds = %if.then6
  %8 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7231
  %function_decl = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !7231
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !7231
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !7231
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !7231
  %bf.clear = and i32 %bf.lshr, 3, !dbg !7231
  %cmp9 = icmp eq i32 %bf.clear, 3, !dbg !7232
  br i1 %cmp9, label %land.lhs.true10, label %if.end16, !dbg !7233

land.lhs.true10:                                  ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7234
  %function_decl11 = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !7234
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl11, i32 0, i32 5, !dbg !7234
  %bf.load12 = load i32, i32* %function_code, align 8, !dbg !7234
  %bf.clear13 = and i32 %bf.load12, 2047, !dbg !7234
  %cmp14 = icmp eq i32 %bf.clear13, 428, !dbg !7235
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !7236

if.then15:                                        ; preds = %land.lhs.true10
  store i32 0, i32* %retval, align 4, !dbg !7237
  br label %return, !dbg !7237

if.end16:                                         ; preds = %land.lhs.true10, %land.lhs.true, %if.then6
  %10 = load i32, i32* %cost, align 4, !dbg !7238
  %add17 = add i32 %10, 20, !dbg !7239
  store i32 %add17, i32* %retval, align 4, !dbg !7240
  br label %return, !dbg !7240

if.end18:                                         ; preds = %if.end3
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7241
  %call19 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !7243
  %cmp20 = icmp ne i32 %call19, 6, !dbg !7244
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !7245

if.then21:                                        ; preds = %if.end18
  %12 = load i32, i32* %cost, align 4, !dbg !7246
  store i32 %12, i32* %retval, align 4, !dbg !7247
  br label %return, !dbg !7247

if.end22:                                         ; preds = %if.end18
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7248
  %call23 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %13), !dbg !7249
  switch i32 %call23, label %sw.default [
    i32 65, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 76, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 71, label %sw.bb
    i32 75, label %sw.bb
    i32 83, label %sw.bb25
    i32 84, label %sw.bb25
  ], !dbg !7250

sw.bb:                                            ; preds = %if.end22, %if.end22, %if.end22, %if.end22, %if.end22, %if.end22, %if.end22, %if.end22, %if.end22, %if.end22, %if.end22
  %14 = load i32, i32* %cost, align 4, !dbg !7251
  %add24 = add i32 %14, 20, !dbg !7251
  store i32 %add24, i32* %cost, align 4, !dbg !7251
  br label %sw.epilog, !dbg !7253

sw.bb25:                                          ; preds = %if.end22, %if.end22
  %15 = load i32, i32* %cost, align 4, !dbg !7254
  %add26 = add i32 %15, 20, !dbg !7254
  store i32 %add26, i32* %cost, align 4, !dbg !7254
  br label %sw.epilog, !dbg !7255

sw.default:                                       ; preds = %if.end22
  br label %sw.epilog, !dbg !7256

sw.epilog:                                        ; preds = %sw.default, %sw.bb25, %sw.bb
  %16 = load i32, i32* %cost, align 4, !dbg !7257
  store i32 %16, i32* %retval, align 4, !dbg !7258
  br label %return, !dbg !7258

return:                                           ; preds = %sw.epilog, %if.then21, %if.end16, %if.then15, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !7259
  ret i32 %17, !dbg !7259
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7260 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7263, metadata !DIExpression()), !dbg !7264
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7265, metadata !DIExpression()), !dbg !7266
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7267, metadata !DIExpression()), !dbg !7268
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7269
  %and = and i32 %0, 8, !dbg !7269
  %tobool = icmp ne i32 %and, 0, !dbg !7269
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !7269

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7269
  %and1 = and i32 %1, 2, !dbg !7269
  %tobool2 = icmp ne i32 %and1, 0, !dbg !7269
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !7269

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !7269
  %and3 = and i32 %2, 4, !dbg !7269
  %tobool4 = icmp ne i32 %and3, 0, !dbg !7269
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !7269

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7269
  %and6 = and i32 %3, 1, !dbg !7269
  %tobool7 = icmp ne i32 %and6, 0, !dbg !7269
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !7269

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.19, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7269
  br label %cond.end, !dbg !7269

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !7269

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7269
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7270
  %and8 = and i32 %4, 10, !dbg !7271
  %tobool9 = icmp ne i32 %and8, 0, !dbg !7271
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !7272

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7273
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !7274
  br label %cond.end12, !dbg !7272

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !7272

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !7272
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7275
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !7276
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !7277
  %7 = load i32, i32* %flags.addr, align 4, !dbg !7278
  %and14 = and i32 %7, 8, !dbg !7280
  %tobool15 = icmp ne i32 %and14, 0, !dbg !7280
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !7281

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7282
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !7283
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !7283
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !7282
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !7284

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7285
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !7286
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !7287
  br i1 %cmp, label %if.then, label %if.end, !dbg !7288

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7289
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !7290
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !7290
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !7291
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !7291
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7292
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !7293
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !7294
  br label %if.end, !dbg !7292

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !7295
  %and23 = and i32 %15, 5, !dbg !7296
  %tobool24 = icmp ne i32 %and23, 0, !dbg !7296
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !7297

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7298
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !7299
  br label %cond.end28, !dbg !7297

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !7297

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !7297
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7300
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !7301
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !7302
  %18 = load i32, i32* %flags.addr, align 4, !dbg !7303
  %and30 = and i32 %18, 4, !dbg !7305
  %tobool31 = icmp ne i32 %and30, 0, !dbg !7305
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !7306

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7307
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !7308
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !7308
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !7307
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !7309

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7310
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !7311
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !7312
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !7313

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7314
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !7315
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !7315
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !7316
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !7316
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7317
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !7318
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !7319
  br label %if.end42, !dbg !7317

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7320
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !7321
  store i8 0, i8* %done, align 8, !dbg !7322
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7323
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !7324
  store i32 0, i32* %phi_i, align 8, !dbg !7325
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7326
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !7327
  store i32 0, i32* %num_phi, align 4, !dbg !7328
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7329
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !7330
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7331
  ret void, !dbg !7332
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !7333 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7336, metadata !DIExpression()), !dbg !7337
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7338
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7340
  %tobool = icmp ne i8 %call, 0, !dbg !7340
  br i1 %tobool, label %if.end, label %if.then, !dbg !7341

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !7342
  br label %return, !dbg !7342

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7343
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7344
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7345
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !7346
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !7346
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !7347
  br label %return, !dbg !7347

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !7348
  ret %struct.def_optype_d* %3, !dbg !7348
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !7349 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7352, metadata !DIExpression()), !dbg !7353
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7354
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7356
  %tobool = icmp ne i8 %call, 0, !dbg !7356
  br i1 %tobool, label %if.end, label %if.then, !dbg !7357

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !7358
  br label %return, !dbg !7358

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7359
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7360
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7361
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !7362
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !7362
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !7363
  br label %return, !dbg !7363

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !7364
  ret %struct.use_optype_d* %3, !dbg !7364
}

declare dso_local zeroext i8 @flow_loop_nested_p(%struct.loop*, %struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !7365 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !7368, metadata !DIExpression()), !dbg !7369
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7370
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !7371
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !7371
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !7372
  ret %union.tree_node* %2, !dbg !7373
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !7374 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !7378, metadata !DIExpression()), !dbg !7379
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !7380
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7381
  ret %union.tree_node* %1, !dbg !7382
}

declare dso_local i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ref_indep_loop_p(%struct.loop* %loop, %struct.mem_ref* %ref) #0 !dbg !7383 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %ref.addr = alloca %struct.mem_ref*, align 8
  %ret = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7386, metadata !DIExpression()), !dbg !7387
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !7388, metadata !DIExpression()), !dbg !7389
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !7390, metadata !DIExpression()), !dbg !7391
  %0 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7392
  %indep_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %0, i32 0, i32 6, !dbg !7394
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %indep_loop, align 8, !dbg !7394
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7395
  %num = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 0, !dbg !7396
  %3 = load i32, i32* %num, align 8, !dbg !7396
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %3), !dbg !7397
  %tobool = icmp ne i32 %call, 0, !dbg !7397
  br i1 %tobool, label %if.then, label %if.end, !dbg !7398

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !7399
  br label %return, !dbg !7399

if.end:                                           ; preds = %entry
  %4 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7400
  %dep_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %4, i32 0, i32 7, !dbg !7402
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dep_loop, align 8, !dbg !7402
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7403
  %num1 = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 0, !dbg !7404
  %7 = load i32, i32* %num1, align 8, !dbg !7404
  %call2 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %5, i32 %7), !dbg !7405
  %tobool3 = icmp ne i32 %call2, 0, !dbg !7405
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !7406

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !7407
  br label %return, !dbg !7407

if.end5:                                          ; preds = %if.end
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7408
  %9 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7409
  %call6 = call zeroext i8 @ref_indep_loop_p_1(%struct.loop* %8, %struct.mem_ref* %9), !dbg !7410
  store i8 %call6, i8* %ret, align 1, !dbg !7411
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7412
  %tobool7 = icmp ne %struct._IO_FILE* %10, null, !dbg !7412
  br i1 %tobool7, label %land.lhs.true, label %if.end13, !dbg !7414

land.lhs.true:                                    ; preds = %if.end5
  %11 = load i32, i32* @dump_flags, align 4, !dbg !7415
  %and = and i32 %11, 8, !dbg !7416
  %tobool8 = icmp ne i32 %and, 0, !dbg !7416
  br i1 %tobool8, label %if.then9, label %if.end13, !dbg !7417

if.then9:                                         ; preds = %land.lhs.true
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7418
  %13 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7419
  %id = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %13, i32 0, i32 1, !dbg !7420
  %14 = load i32, i32* %id, align 8, !dbg !7420
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7421
  %num10 = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 0, !dbg !7422
  %16 = load i32, i32* %num10, align 8, !dbg !7422
  %17 = load i8, i8* %ret, align 1, !dbg !7423
  %conv = zext i8 %17 to i32, !dbg !7423
  %tobool11 = icmp ne i32 %conv, 0, !dbg !7423
  %18 = zext i1 %tobool11 to i64, !dbg !7423
  %cond = select i1 %tobool11, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i64 0, i64 0), !dbg !7423
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.20, i64 0, i64 0), i32 %14, i32 %16, i8* %cond), !dbg !7424
  br label %if.end13, !dbg !7424

if.end13:                                         ; preds = %if.then9, %land.lhs.true, %if.end5
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7425
  %20 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7426
  %21 = load i8, i8* %ret, align 1, !dbg !7427
  call void @record_indep_loop(%struct.loop* %19, %struct.mem_ref* %20, i8 zeroext %21), !dbg !7428
  %22 = load i8, i8* %ret, align 1, !dbg !7429
  store i8 %22, i8* %retval, align 1, !dbg !7430
  br label %return, !dbg !7430

return:                                           ; preds = %if.end13, %if.then4, %if.then
  %23 = load i8, i8* %retval, align 1, !dbg !7431
  ret i8 %23, !dbg !7431
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ref_indep_loop_p_1(%struct.loop* %loop, %struct.mem_ref* %ref) #0 !dbg !7432 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %ref.addr = alloca %struct.mem_ref*, align 8
  %clobbers = alloca %struct.bitmap_head_def*, align 8
  %refs_to_check = alloca %struct.bitmap_head_def*, align 8
  %refs = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %ret = alloca i8, align 1
  %stored = alloca i8, align 1
  %map = alloca %struct.htab*, align 8
  %aref = alloca %struct.mem_ref*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7433, metadata !DIExpression()), !dbg !7434
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !7435, metadata !DIExpression()), !dbg !7436
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %clobbers, metadata !7437, metadata !DIExpression()), !dbg !7438
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %refs_to_check, metadata !7439, metadata !DIExpression()), !dbg !7440
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %refs, metadata !7441, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7443, metadata !DIExpression()), !dbg !7444
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7445, metadata !DIExpression()), !dbg !7446
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !7447, metadata !DIExpression()), !dbg !7448
  store i8 1, i8* %ret, align 1, !dbg !7448
  call void @llvm.dbg.declare(metadata i8* %stored, metadata !7449, metadata !DIExpression()), !dbg !7450
  %0 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7451
  %stored1 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %0, i32 0, i32 3, !dbg !7452
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %stored1, align 8, !dbg !7452
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7453
  %num = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 0, !dbg !7454
  %3 = load i32, i32* %num, align 8, !dbg !7454
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %3), !dbg !7455
  %conv = trunc i32 %call to i8, !dbg !7455
  store i8 %conv, i8* %stored, align 1, !dbg !7450
  call void @llvm.dbg.declare(metadata %struct.htab** %map, metadata !7456, metadata !DIExpression()), !dbg !7457
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %aref, metadata !7458, metadata !DIExpression()), !dbg !7459
  %4 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !7460
  %tobool = icmp ne %struct.VEC_bitmap_heap* %4, null, !dbg !7460
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7460

cond.true:                                        ; preds = %entry
  %5 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 4), align 8, !dbg !7460
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %5, i32 0, i32 0, !dbg !7460
  br label %cond.end, !dbg !7460

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7460

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7460
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7460
  %num2 = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 0, !dbg !7460
  %7 = load i32, i32* %num2, align 8, !dbg !7460
  %call3 = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond, i32 %7), !dbg !7460
  store %struct.bitmap_head_def* %call3, %struct.bitmap_head_def** %clobbers, align 8, !dbg !7461
  %8 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7462
  %vops = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %8, i32 0, i32 5, !dbg !7464
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vops, align 8, !dbg !7464
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %clobbers, align 8, !dbg !7465
  %call4 = call zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def* %9, %struct.bitmap_head_def* %10), !dbg !7466
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7466
  br i1 %tobool5, label %if.then, label %if.end, !dbg !7467

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !7468
  br label %return, !dbg !7468

if.end:                                           ; preds = %cond.end
  %call6 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !7469
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** %refs_to_check, align 8, !dbg !7470
  %11 = load %struct.VEC_htab_t_heap*, %struct.VEC_htab_t_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 5), align 8, !dbg !7471
  %tobool7 = icmp ne %struct.VEC_htab_t_heap* %11, null, !dbg !7471
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !7471

cond.true8:                                       ; preds = %if.end
  %12 = load %struct.VEC_htab_t_heap*, %struct.VEC_htab_t_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 5), align 8, !dbg !7471
  %base9 = getelementptr inbounds %struct.VEC_htab_t_heap, %struct.VEC_htab_t_heap* %12, i32 0, i32 0, !dbg !7471
  br label %cond.end11, !dbg !7471

cond.false10:                                     ; preds = %if.end
  br label %cond.end11, !dbg !7471

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_htab_t_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !7471
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7471
  %num13 = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 0, !dbg !7471
  %14 = load i32, i32* %num13, align 8, !dbg !7471
  %call14 = call %struct.htab* @VEC_htab_t_base_index(%struct.VEC_htab_t_base* %cond12, i32 %14), !dbg !7471
  store %struct.htab* %call14, %struct.htab** %map, align 8, !dbg !7472
  %15 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7473
  %vops15 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %15, i32 0, i32 5, !dbg !7473
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vops15, align 8, !dbg !7473
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %clobbers, align 8, !dbg !7473
  call void @bmp_iter_and_compl_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %16, %struct.bitmap_head_def* %17, i32 0, i32* %i), !dbg !7473
  br label %for.cond, !dbg !7473

for.cond:                                         ; preds = %for.inc, %cond.end11
  %call16 = call zeroext i8 @bmp_iter_and_compl(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7475
  %tobool17 = icmp ne i8 %call16, 0, !dbg !7473
  br i1 %tobool17, label %for.body, label %for.end, !dbg !7473

for.body:                                         ; preds = %for.cond
  %18 = load i8, i8* %stored, align 1, !dbg !7477
  %tobool18 = icmp ne i8 %18, 0, !dbg !7477
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !7480

if.then19:                                        ; preds = %for.body
  %19 = load %struct.htab*, %struct.htab** %map, align 8, !dbg !7481
  %20 = load i32, i32* %i, align 4, !dbg !7482
  %call20 = call %struct.bitmap_head_def* @get_vop_accesses(%struct.htab* %19, i32 %20), !dbg !7483
  store %struct.bitmap_head_def* %call20, %struct.bitmap_head_def** %refs, align 8, !dbg !7484
  br label %if.end22, !dbg !7485

if.else:                                          ; preds = %for.body
  %21 = load %struct.htab*, %struct.htab** %map, align 8, !dbg !7486
  %22 = load i32, i32* %i, align 4, !dbg !7487
  %call21 = call %struct.bitmap_head_def* @get_vop_stores(%struct.htab* %21, i32 %22), !dbg !7488
  store %struct.bitmap_head_def* %call21, %struct.bitmap_head_def** %refs, align 8, !dbg !7489
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then19
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs_to_check, align 8, !dbg !7490
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs, align 8, !dbg !7491
  %call23 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %23, %struct.bitmap_head_def* %24), !dbg !7492
  br label %for.inc, !dbg !7493

for.inc:                                          ; preds = %if.end22
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7475
  br label %for.cond, !dbg !7475, !llvm.loop !7494

for.end:                                          ; preds = %for.cond
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs_to_check, align 8, !dbg !7496
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %25, i32 0, i32* %i), !dbg !7496
  br label %for.cond24, !dbg !7496

for.cond24:                                       ; preds = %for.inc39, %for.end
  %call25 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7498
  %tobool26 = icmp ne i8 %call25, 0, !dbg !7496
  br i1 %tobool26, label %for.body27, label %for.end40, !dbg !7496

for.body27:                                       ; preds = %for.cond24
  %26 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), align 8, !dbg !7500
  %tobool28 = icmp ne %struct.VEC_mem_ref_p_heap* %26, null, !dbg !7500
  br i1 %tobool28, label %cond.true29, label %cond.false31, !dbg !7500

cond.true29:                                      ; preds = %for.body27
  %27 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), align 8, !dbg !7500
  %base30 = getelementptr inbounds %struct.VEC_mem_ref_p_heap, %struct.VEC_mem_ref_p_heap* %27, i32 0, i32 0, !dbg !7500
  br label %cond.end32, !dbg !7500

cond.false31:                                     ; preds = %for.body27
  br label %cond.end32, !dbg !7500

cond.end32:                                       ; preds = %cond.false31, %cond.true29
  %cond33 = phi %struct.VEC_mem_ref_p_base* [ %base30, %cond.true29 ], [ null, %cond.false31 ], !dbg !7500
  %28 = load i32, i32* %i, align 4, !dbg !7500
  %call34 = call %struct.mem_ref* @VEC_mem_ref_p_base_index(%struct.VEC_mem_ref_p_base* %cond33, i32 %28), !dbg !7500
  store %struct.mem_ref* %call34, %struct.mem_ref** %aref, align 8, !dbg !7502
  %29 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7503
  %30 = load %struct.mem_ref*, %struct.mem_ref** %aref, align 8, !dbg !7505
  %call35 = call zeroext i8 @refs_independent_p(%struct.mem_ref* %29, %struct.mem_ref* %30), !dbg !7506
  %tobool36 = icmp ne i8 %call35, 0, !dbg !7506
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !7507

if.then37:                                        ; preds = %cond.end32
  store i8 0, i8* %ret, align 1, !dbg !7508
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7510
  %32 = load %struct.mem_ref*, %struct.mem_ref** %aref, align 8, !dbg !7511
  call void @record_indep_loop(%struct.loop* %31, %struct.mem_ref* %32, i8 zeroext 0), !dbg !7512
  br label %for.end40, !dbg !7513

if.end38:                                         ; preds = %cond.end32
  br label %for.inc39, !dbg !7514

for.inc39:                                        ; preds = %if.end38
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7498
  br label %for.cond24, !dbg !7498, !llvm.loop !7515

for.end40:                                        ; preds = %if.then37, %for.cond24
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs_to_check, align 8, !dbg !7517
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %33), !dbg !7517
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %refs_to_check, align 8, !dbg !7517
  %34 = load i8, i8* %ret, align 1, !dbg !7518
  store i8 %34, i8* %retval, align 1, !dbg !7519
  br label %return, !dbg !7519

return:                                           ; preds = %for.end40, %if.then
  %35 = load i8, i8* %retval, align 1, !dbg !7520
  ret i8 %35, !dbg !7520
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_indep_loop(%struct.loop* %loop, %struct.mem_ref* %ref, i8 zeroext %indep) #0 !dbg !7521 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %ref.addr = alloca %struct.mem_ref*, align 8
  %indep.addr = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7524, metadata !DIExpression()), !dbg !7525
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !7526, metadata !DIExpression()), !dbg !7527
  store i8 %indep, i8* %indep.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %indep.addr, metadata !7528, metadata !DIExpression()), !dbg !7529
  %0 = load i8, i8* %indep.addr, align 1, !dbg !7530
  %tobool = icmp ne i8 %0, 0, !dbg !7530
  br i1 %tobool, label %if.then, label %if.else, !dbg !7532

if.then:                                          ; preds = %entry
  %1 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7533
  %indep_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %1, i32 0, i32 6, !dbg !7534
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %indep_loop, align 8, !dbg !7534
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7535
  %num = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 0, !dbg !7536
  %4 = load i32, i32* %num, align 8, !dbg !7536
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %2, i32 %4), !dbg !7537
  br label %if.end, !dbg !7537

if.else:                                          ; preds = %entry
  %5 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !7538
  %dep_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %5, i32 0, i32 7, !dbg !7539
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dep_loop, align 8, !dbg !7539
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7540
  %num1 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 0, !dbg !7541
  %8 = load i32, i32* %num1, align 8, !dbg !7541
  %call2 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %6, i32 %8), !dbg !7542
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !7543
}

declare dso_local zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_head_def* @get_vop_accesses(%struct.htab* %vop_to_refs, i32 %vop) #0 !dbg !7544 {
entry:
  %vop_to_refs.addr = alloca %struct.htab*, align 8
  %vop.addr = alloca i32, align 4
  %vtoe = alloca %struct.vop_to_refs_elt*, align 8
  store %struct.htab* %vop_to_refs, %struct.htab** %vop_to_refs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %vop_to_refs.addr, metadata !7547, metadata !DIExpression()), !dbg !7548
  store i32 %vop, i32* %vop.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vop.addr, metadata !7549, metadata !DIExpression()), !dbg !7550
  call void @llvm.dbg.declare(metadata %struct.vop_to_refs_elt** %vtoe, metadata !7551, metadata !DIExpression()), !dbg !7552
  %0 = load %struct.htab*, %struct.htab** %vop_to_refs.addr, align 8, !dbg !7553
  %1 = bitcast i32* %vop.addr to i8*, !dbg !7554
  %2 = load i32, i32* %vop.addr, align 4, !dbg !7555
  %call = call i8* @htab_find_with_hash(%struct.htab* %0, i8* %1, i32 %2), !dbg !7556
  %3 = bitcast i8* %call to %struct.vop_to_refs_elt*, !dbg !7557
  store %struct.vop_to_refs_elt* %3, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !7552
  %4 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !7558
  %refs_all = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %4, i32 0, i32 1, !dbg !7559
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs_all, align 8, !dbg !7559
  ret %struct.bitmap_head_def* %5, !dbg !7560
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_head_def* @get_vop_stores(%struct.htab* %vop_to_refs, i32 %vop) #0 !dbg !7561 {
entry:
  %vop_to_refs.addr = alloca %struct.htab*, align 8
  %vop.addr = alloca i32, align 4
  %vtoe = alloca %struct.vop_to_refs_elt*, align 8
  store %struct.htab* %vop_to_refs, %struct.htab** %vop_to_refs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %vop_to_refs.addr, metadata !7562, metadata !DIExpression()), !dbg !7563
  store i32 %vop, i32* %vop.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vop.addr, metadata !7564, metadata !DIExpression()), !dbg !7565
  call void @llvm.dbg.declare(metadata %struct.vop_to_refs_elt** %vtoe, metadata !7566, metadata !DIExpression()), !dbg !7567
  %0 = load %struct.htab*, %struct.htab** %vop_to_refs.addr, align 8, !dbg !7568
  %1 = bitcast i32* %vop.addr to i8*, !dbg !7569
  %2 = load i32, i32* %vop.addr, align 4, !dbg !7570
  %call = call i8* @htab_find_with_hash(%struct.htab* %0, i8* %1, i32 %2), !dbg !7571
  %3 = bitcast i8* %call to %struct.vop_to_refs_elt*, !dbg !7572
  store %struct.vop_to_refs_elt* %3, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !7567
  %4 = load %struct.vop_to_refs_elt*, %struct.vop_to_refs_elt** %vtoe, align 8, !dbg !7573
  %refs_stored = getelementptr inbounds %struct.vop_to_refs_elt, %struct.vop_to_refs_elt* %4, i32 0, i32 2, !dbg !7574
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs_stored, align 8, !dbg !7574
  ret %struct.bitmap_head_def* %5, !dbg !7575
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @refs_independent_p(%struct.mem_ref* %ref1, %struct.mem_ref* %ref2) #0 !dbg !7576 {
entry:
  %retval = alloca i8, align 1
  %ref1.addr = alloca %struct.mem_ref*, align 8
  %ref2.addr = alloca %struct.mem_ref*, align 8
  store %struct.mem_ref* %ref1, %struct.mem_ref** %ref1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref1.addr, metadata !7579, metadata !DIExpression()), !dbg !7580
  store %struct.mem_ref* %ref2, %struct.mem_ref** %ref2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref2.addr, metadata !7581, metadata !DIExpression()), !dbg !7582
  %0 = load %struct.mem_ref*, %struct.mem_ref** %ref1.addr, align 8, !dbg !7583
  %1 = load %struct.mem_ref*, %struct.mem_ref** %ref2.addr, align 8, !dbg !7585
  %cmp = icmp eq %struct.mem_ref* %0, %1, !dbg !7586
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7587

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mem_ref*, %struct.mem_ref** %ref1.addr, align 8, !dbg !7588
  %indep_ref = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %2, i32 0, i32 8, !dbg !7589
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %indep_ref, align 8, !dbg !7589
  %4 = load %struct.mem_ref*, %struct.mem_ref** %ref2.addr, align 8, !dbg !7590
  %id = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %4, i32 0, i32 1, !dbg !7591
  %5 = load i32, i32* %id, align 8, !dbg !7591
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %3, i32 %5), !dbg !7592
  %tobool = icmp ne i32 %call, 0, !dbg !7592
  br i1 %tobool, label %if.then, label %if.end, !dbg !7593

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !7594
  br label %return, !dbg !7594

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.mem_ref*, %struct.mem_ref** %ref1.addr, align 8, !dbg !7595
  %dep_ref = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %6, i32 0, i32 9, !dbg !7597
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dep_ref, align 8, !dbg !7597
  %8 = load %struct.mem_ref*, %struct.mem_ref** %ref2.addr, align 8, !dbg !7598
  %id1 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %8, i32 0, i32 1, !dbg !7599
  %9 = load i32, i32* %id1, align 8, !dbg !7599
  %call2 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %7, i32 %9), !dbg !7600
  %tobool3 = icmp ne i32 %call2, 0, !dbg !7600
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !7601

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !7602
  br label %return, !dbg !7602

if.end5:                                          ; preds = %if.end
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7603
  %tobool6 = icmp ne %struct._IO_FILE* %10, null, !dbg !7603
  br i1 %tobool6, label %land.lhs.true, label %if.end12, !dbg !7605

land.lhs.true:                                    ; preds = %if.end5
  %11 = load i32, i32* @dump_flags, align 4, !dbg !7606
  %and = and i32 %11, 8, !dbg !7607
  %tobool7 = icmp ne i32 %and, 0, !dbg !7607
  br i1 %tobool7, label %if.then8, label %if.end12, !dbg !7608

if.then8:                                         ; preds = %land.lhs.true
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7609
  %13 = load %struct.mem_ref*, %struct.mem_ref** %ref1.addr, align 8, !dbg !7610
  %id9 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %13, i32 0, i32 1, !dbg !7611
  %14 = load i32, i32* %id9, align 8, !dbg !7611
  %15 = load %struct.mem_ref*, %struct.mem_ref** %ref2.addr, align 8, !dbg !7612
  %id10 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %15, i32 0, i32 1, !dbg !7613
  %16 = load i32, i32* %id10, align 8, !dbg !7613
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.23, i64 0, i64 0), i32 %14, i32 %16), !dbg !7614
  br label %if.end12, !dbg !7614

if.end12:                                         ; preds = %if.then8, %land.lhs.true, %if.end5
  %17 = load %struct.mem_ref*, %struct.mem_ref** %ref1.addr, align 8, !dbg !7615
  %mem = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %17, i32 0, i32 0, !dbg !7617
  %18 = load %union.tree_node*, %union.tree_node** %mem, align 8, !dbg !7617
  %19 = load %struct.mem_ref*, %struct.mem_ref** %ref2.addr, align 8, !dbg !7618
  %mem13 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %19, i32 0, i32 0, !dbg !7619
  %20 = load %union.tree_node*, %union.tree_node** %mem13, align 8, !dbg !7619
  %call14 = call zeroext i8 @mem_refs_may_alias_p(%union.tree_node* %18, %union.tree_node* %20, %struct.pointer_map_t** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 6)), !dbg !7620
  %tobool15 = icmp ne i8 %call14, 0, !dbg !7620
  br i1 %tobool15, label %if.then16, label %if.else, !dbg !7621

if.then16:                                        ; preds = %if.end12
  %21 = load %struct.mem_ref*, %struct.mem_ref** %ref1.addr, align 8, !dbg !7622
  %dep_ref17 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %21, i32 0, i32 9, !dbg !7624
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dep_ref17, align 8, !dbg !7624
  %23 = load %struct.mem_ref*, %struct.mem_ref** %ref2.addr, align 8, !dbg !7625
  %id18 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %23, i32 0, i32 1, !dbg !7626
  %24 = load i32, i32* %id18, align 8, !dbg !7626
  %call19 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %22, i32 %24), !dbg !7627
  %25 = load %struct.mem_ref*, %struct.mem_ref** %ref2.addr, align 8, !dbg !7628
  %dep_ref20 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %25, i32 0, i32 9, !dbg !7629
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dep_ref20, align 8, !dbg !7629
  %27 = load %struct.mem_ref*, %struct.mem_ref** %ref1.addr, align 8, !dbg !7630
  %id21 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %27, i32 0, i32 1, !dbg !7631
  %28 = load i32, i32* %id21, align 8, !dbg !7631
  %call22 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %26, i32 %28), !dbg !7632
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7633
  %tobool23 = icmp ne %struct._IO_FILE* %29, null, !dbg !7633
  br i1 %tobool23, label %land.lhs.true24, label %if.end29, !dbg !7635

land.lhs.true24:                                  ; preds = %if.then16
  %30 = load i32, i32* @dump_flags, align 4, !dbg !7636
  %and25 = and i32 %30, 8, !dbg !7637
  %tobool26 = icmp ne i32 %and25, 0, !dbg !7637
  br i1 %tobool26, label %if.then27, label %if.end29, !dbg !7638

if.then27:                                        ; preds = %land.lhs.true24
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7639
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i64 0, i64 0)), !dbg !7640
  br label %if.end29, !dbg !7640

if.end29:                                         ; preds = %if.then27, %land.lhs.true24, %if.then16
  store i8 0, i8* %retval, align 1, !dbg !7641
  br label %return, !dbg !7641

if.else:                                          ; preds = %if.end12
  %32 = load %struct.mem_ref*, %struct.mem_ref** %ref1.addr, align 8, !dbg !7642
  %indep_ref30 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %32, i32 0, i32 8, !dbg !7644
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %indep_ref30, align 8, !dbg !7644
  %34 = load %struct.mem_ref*, %struct.mem_ref** %ref2.addr, align 8, !dbg !7645
  %id31 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %34, i32 0, i32 1, !dbg !7646
  %35 = load i32, i32* %id31, align 8, !dbg !7646
  %call32 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %33, i32 %35), !dbg !7647
  %36 = load %struct.mem_ref*, %struct.mem_ref** %ref2.addr, align 8, !dbg !7648
  %indep_ref33 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %36, i32 0, i32 8, !dbg !7649
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %indep_ref33, align 8, !dbg !7649
  %38 = load %struct.mem_ref*, %struct.mem_ref** %ref1.addr, align 8, !dbg !7650
  %id34 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %38, i32 0, i32 1, !dbg !7651
  %39 = load i32, i32* %id34, align 8, !dbg !7651
  %call35 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %37, i32 %39), !dbg !7652
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7653
  %tobool36 = icmp ne %struct._IO_FILE* %40, null, !dbg !7653
  br i1 %tobool36, label %land.lhs.true37, label %if.end42, !dbg !7655

land.lhs.true37:                                  ; preds = %if.else
  %41 = load i32, i32* @dump_flags, align 4, !dbg !7656
  %and38 = and i32 %41, 8, !dbg !7657
  %tobool39 = icmp ne i32 %and38, 0, !dbg !7657
  br i1 %tobool39, label %if.then40, label %if.end42, !dbg !7658

if.then40:                                        ; preds = %land.lhs.true37
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7659
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.25, i64 0, i64 0)), !dbg !7660
  br label %if.end42, !dbg !7660

if.end42:                                         ; preds = %if.then40, %land.lhs.true37, %if.else
  store i8 1, i8* %retval, align 1, !dbg !7661
  br label %return, !dbg !7661

return:                                           ; preds = %if.end42, %if.end29, %if.then4, %if.then
  %43 = load i8, i8* %retval, align 1, !dbg !7662
  ret i8 %43, !dbg !7662
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @mem_refs_may_alias_p(%union.tree_node* %mem1, %union.tree_node* %mem2, %struct.pointer_map_t** %ttae_cache) #0 !dbg !7663 {
entry:
  %retval = alloca i8, align 1
  %mem1.addr = alloca %union.tree_node*, align 8
  %mem2.addr = alloca %union.tree_node*, align 8
  %ttae_cache.addr = alloca %struct.pointer_map_t**, align 8
  %size1 = alloca %struct.double_int, align 8
  %size2 = alloca %struct.double_int, align 8
  %off1 = alloca %struct.affine_tree_combination, align 8
  %off2 = alloca %struct.affine_tree_combination, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  store %union.tree_node* %mem1, %union.tree_node** %mem1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %mem1.addr, metadata !7667, metadata !DIExpression()), !dbg !7668
  store %union.tree_node* %mem2, %union.tree_node** %mem2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %mem2.addr, metadata !7669, metadata !DIExpression()), !dbg !7670
  store %struct.pointer_map_t** %ttae_cache, %struct.pointer_map_t*** %ttae_cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t*** %ttae_cache.addr, metadata !7671, metadata !DIExpression()), !dbg !7672
  call void @llvm.dbg.declare(metadata %struct.double_int* %size1, metadata !7673, metadata !DIExpression()), !dbg !7674
  call void @llvm.dbg.declare(metadata %struct.double_int* %size2, metadata !7675, metadata !DIExpression()), !dbg !7676
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %off1, metadata !7677, metadata !DIExpression()), !dbg !7694
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %off2, metadata !7695, metadata !DIExpression()), !dbg !7696
  %0 = load %union.tree_node*, %union.tree_node** %mem1.addr, align 8, !dbg !7697
  %1 = load %union.tree_node*, %union.tree_node** %mem2.addr, align 8, !dbg !7699
  %call = call zeroext i8 @refs_may_alias_p(%union.tree_node* %0, %union.tree_node* %1), !dbg !7700
  %tobool = icmp ne i8 %call, 0, !dbg !7700
  br i1 %tobool, label %if.end, label %if.then, !dbg !7701

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7702
  br label %return, !dbg !7702

if.end:                                           ; preds = %entry
  %2 = load i32, i32* @optimize, align 4, !dbg !7703
  %cmp = icmp slt i32 %2, 2, !dbg !7705
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !7706

if.then1:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !7707
  br label %return, !dbg !7707

if.end2:                                          ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %mem1.addr, align 8, !dbg !7708
  call void @get_inner_reference_aff(%union.tree_node* %3, %struct.affine_tree_combination* %off1, %struct.double_int* %size1), !dbg !7709
  %4 = load %union.tree_node*, %union.tree_node** %mem2.addr, align 8, !dbg !7710
  call void @get_inner_reference_aff(%union.tree_node* %4, %struct.affine_tree_combination* %off2, %struct.double_int* %size2), !dbg !7711
  %5 = load %struct.pointer_map_t**, %struct.pointer_map_t*** %ttae_cache.addr, align 8, !dbg !7712
  call void @aff_combination_expand(%struct.affine_tree_combination* %off1, %struct.pointer_map_t** %5), !dbg !7713
  %6 = load %struct.pointer_map_t**, %struct.pointer_map_t*** %ttae_cache.addr, align 8, !dbg !7714
  call void @aff_combination_expand(%struct.affine_tree_combination* %off2, %struct.pointer_map_t** %6), !dbg !7715
  %call3 = call { i64, i64 } @shwi_to_double_int(i64 -1), !dbg !7716
  %7 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7716
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !7716
  %9 = extractvalue { i64, i64 } %call3, 0, !dbg !7716
  store i64 %9, i64* %8, align 8, !dbg !7716
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !7716
  %11 = extractvalue { i64, i64 } %call3, 1, !dbg !7716
  store i64 %11, i64* %10, align 8, !dbg !7716
  %12 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7717
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !7717
  %14 = load i64, i64* %13, align 8, !dbg !7717
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !7717
  %16 = load i64, i64* %15, align 8, !dbg !7717
  call void @aff_combination_scale(%struct.affine_tree_combination* %off1, i64 %14, i64 %16), !dbg !7717
  call void @aff_combination_add(%struct.affine_tree_combination* %off2, %struct.affine_tree_combination* %off1), !dbg !7718
  %17 = bitcast %struct.double_int* %size1 to { i64, i64 }*, !dbg !7719
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 0, !dbg !7719
  %19 = load i64, i64* %18, align 8, !dbg !7719
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 1, !dbg !7719
  %21 = load i64, i64* %20, align 8, !dbg !7719
  %22 = bitcast %struct.double_int* %size2 to { i64, i64 }*, !dbg !7719
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %22, i32 0, i32 0, !dbg !7719
  %24 = load i64, i64* %23, align 8, !dbg !7719
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %22, i32 0, i32 1, !dbg !7719
  %26 = load i64, i64* %25, align 8, !dbg !7719
  %call4 = call zeroext i8 @cannot_overlap_p(%struct.affine_tree_combination* %off2, i64 %19, i64 %21, i64 %24, i64 %26), !dbg !7719
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7719
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !7721

if.then6:                                         ; preds = %if.end2
  store i8 0, i8* %retval, align 1, !dbg !7722
  br label %return, !dbg !7722

if.end7:                                          ; preds = %if.end2
  store i8 1, i8* %retval, align 1, !dbg !7723
  br label %return, !dbg !7723

return:                                           ; preds = %if.end7, %if.then6, %if.then1, %if.then
  %27 = load i8, i8* %retval, align 1, !dbg !7724
  ret i8 %27, !dbg !7724
}

declare dso_local zeroext i8 @refs_may_alias_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @get_inner_reference_aff(%union.tree_node*, %struct.affine_tree_combination*, %struct.double_int*) #2

declare dso_local void @aff_combination_expand(%struct.affine_tree_combination*, %struct.pointer_map_t**) #2

declare dso_local void @aff_combination_scale(%struct.affine_tree_combination*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal { i64, i64 } @shwi_to_double_int(i64 %cst) #0 !dbg !7725 {
entry:
  %retval = alloca %struct.double_int, align 8
  %cst.addr = alloca i64, align 8
  store i64 %cst, i64* %cst.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cst.addr, metadata !7728, metadata !DIExpression()), !dbg !7729
  call void @llvm.dbg.declare(metadata %struct.double_int* %retval, metadata !7730, metadata !DIExpression()), !dbg !7731
  %0 = load i64, i64* %cst.addr, align 8, !dbg !7732
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 0, !dbg !7733
  store i64 %0, i64* %low, align 8, !dbg !7734
  %1 = load i64, i64* %cst.addr, align 8, !dbg !7735
  %cmp = icmp slt i64 %1, 0, !dbg !7736
  %2 = zext i1 %cmp to i64, !dbg !7735
  %cond = select i1 %cmp, i32 -1, i32 0, !dbg !7735
  %conv = sext i32 %cond to i64, !dbg !7735
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 1, !dbg !7737
  store i64 %conv, i64* %high, align 8, !dbg !7738
  %3 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !7739
  %4 = load { i64, i64 }, { i64, i64 }* %3, align 8, !dbg !7739
  ret { i64, i64 } %4, !dbg !7739
}

declare dso_local void @aff_combination_add(%struct.affine_tree_combination*, %struct.affine_tree_combination*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cannot_overlap_p(%struct.affine_tree_combination* %diff, i64 %size1.coerce0, i64 %size1.coerce1, i64 %size2.coerce0, i64 %size2.coerce1) #0 !dbg !7740 {
entry:
  %retval = alloca i8, align 1
  %size1 = alloca %struct.double_int, align 8
  %size2 = alloca %struct.double_int, align 8
  %diff.addr = alloca %struct.affine_tree_combination*, align 8
  %d = alloca %struct.double_int, align 8
  %bound = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  %agg.tmp2 = alloca %struct.double_int, align 8
  %0 = bitcast %struct.double_int* %size1 to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %size1.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %size1.coerce1, i64* %2, align 8
  %3 = bitcast %struct.double_int* %size2 to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %size2.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %size2.coerce1, i64* %5, align 8
  store %struct.affine_tree_combination* %diff, %struct.affine_tree_combination** %diff.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination** %diff.addr, metadata !7744, metadata !DIExpression()), !dbg !7745
  call void @llvm.dbg.declare(metadata %struct.double_int* %size1, metadata !7746, metadata !DIExpression()), !dbg !7747
  call void @llvm.dbg.declare(metadata %struct.double_int* %size2, metadata !7748, metadata !DIExpression()), !dbg !7749
  call void @llvm.dbg.declare(metadata %struct.double_int* %d, metadata !7750, metadata !DIExpression()), !dbg !7751
  call void @llvm.dbg.declare(metadata %struct.double_int* %bound, metadata !7752, metadata !DIExpression()), !dbg !7753
  %6 = load %struct.affine_tree_combination*, %struct.affine_tree_combination** %diff.addr, align 8, !dbg !7754
  %n = getelementptr inbounds %struct.affine_tree_combination, %struct.affine_tree_combination* %6, i32 0, i32 2, !dbg !7756
  %7 = load i32, i32* %n, align 8, !dbg !7756
  %cmp = icmp ne i32 %7, 0, !dbg !7757
  br i1 %cmp, label %if.then, label %if.end, !dbg !7758

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7759
  br label %return, !dbg !7759

if.end:                                           ; preds = %entry
  %8 = load %struct.affine_tree_combination*, %struct.affine_tree_combination** %diff.addr, align 8, !dbg !7760
  %offset = getelementptr inbounds %struct.affine_tree_combination, %struct.affine_tree_combination* %8, i32 0, i32 1, !dbg !7761
  %9 = bitcast %struct.double_int* %d to i8*, !dbg !7761
  %10 = bitcast %struct.double_int* %offset to i8*, !dbg !7761
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false), !dbg !7761
  %11 = bitcast %struct.double_int* %d to { i64, i64 }*, !dbg !7762
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !7762
  %13 = load i64, i64* %12, align 8, !dbg !7762
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !7762
  %15 = load i64, i64* %14, align 8, !dbg !7762
  %call = call zeroext i8 @double_int_negative_p(i64 %13, i64 %15), !dbg !7762
  %tobool = icmp ne i8 %call, 0, !dbg !7762
  br i1 %tobool, label %if.then1, label %if.else, !dbg !7764

if.then1:                                         ; preds = %if.end
  %call3 = call { i64, i64 } @shwi_to_double_int(i64 -1), !dbg !7765
  %16 = bitcast %struct.double_int* %agg.tmp2 to { i64, i64 }*, !dbg !7765
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !7765
  %18 = extractvalue { i64, i64 } %call3, 0, !dbg !7765
  store i64 %18, i64* %17, align 8, !dbg !7765
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !7765
  %20 = extractvalue { i64, i64 } %call3, 1, !dbg !7765
  store i64 %20, i64* %19, align 8, !dbg !7765
  %21 = bitcast %struct.double_int* %size2 to { i64, i64 }*, !dbg !7767
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !7767
  %23 = load i64, i64* %22, align 8, !dbg !7767
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !7767
  %25 = load i64, i64* %24, align 8, !dbg !7767
  %26 = bitcast %struct.double_int* %agg.tmp2 to { i64, i64 }*, !dbg !7767
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !7767
  %28 = load i64, i64* %27, align 8, !dbg !7767
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !7767
  %30 = load i64, i64* %29, align 8, !dbg !7767
  %call4 = call { i64, i64 } @double_int_add(i64 %23, i64 %25, i64 %28, i64 %30), !dbg !7767
  %31 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7767
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !7767
  %33 = extractvalue { i64, i64 } %call4, 0, !dbg !7767
  store i64 %33, i64* %32, align 8, !dbg !7767
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !7767
  %35 = extractvalue { i64, i64 } %call4, 1, !dbg !7767
  store i64 %35, i64* %34, align 8, !dbg !7767
  %36 = bitcast %struct.double_int* %d to { i64, i64 }*, !dbg !7768
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !7768
  %38 = load i64, i64* %37, align 8, !dbg !7768
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !7768
  %40 = load i64, i64* %39, align 8, !dbg !7768
  %41 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7768
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0, !dbg !7768
  %43 = load i64, i64* %42, align 8, !dbg !7768
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1, !dbg !7768
  %45 = load i64, i64* %44, align 8, !dbg !7768
  %call5 = call { i64, i64 } @double_int_add(i64 %38, i64 %40, i64 %43, i64 %45), !dbg !7768
  %46 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !7768
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %46, i32 0, i32 0, !dbg !7768
  %48 = extractvalue { i64, i64 } %call5, 0, !dbg !7768
  store i64 %48, i64* %47, align 8, !dbg !7768
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %46, i32 0, i32 1, !dbg !7768
  %50 = extractvalue { i64, i64 } %call5, 1, !dbg !7768
  store i64 %50, i64* %49, align 8, !dbg !7768
  %51 = bitcast %struct.double_int* %bound to i8*, !dbg !7768
  %52 = bitcast %struct.double_int* %tmp to i8*, !dbg !7768
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 16, i1 false), !dbg !7768
  %53 = bitcast %struct.double_int* %bound to { i64, i64 }*, !dbg !7769
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %53, i32 0, i32 0, !dbg !7769
  %55 = load i64, i64* %54, align 8, !dbg !7769
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %53, i32 0, i32 1, !dbg !7769
  %57 = load i64, i64* %56, align 8, !dbg !7769
  %call6 = call zeroext i8 @double_int_negative_p(i64 %55, i64 %57), !dbg !7769
  store i8 %call6, i8* %retval, align 1, !dbg !7770
  br label %return, !dbg !7770

if.else:                                          ; preds = %if.end
  %58 = bitcast %struct.double_int* %size1 to { i64, i64 }*, !dbg !7771
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %58, i32 0, i32 0, !dbg !7771
  %60 = load i64, i64* %59, align 8, !dbg !7771
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %58, i32 0, i32 1, !dbg !7771
  %62 = load i64, i64* %61, align 8, !dbg !7771
  %63 = bitcast %struct.double_int* %d to { i64, i64 }*, !dbg !7771
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %63, i32 0, i32 0, !dbg !7771
  %65 = load i64, i64* %64, align 8, !dbg !7771
  %66 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %63, i32 0, i32 1, !dbg !7771
  %67 = load i64, i64* %66, align 8, !dbg !7771
  %call7 = call i32 @double_int_scmp(i64 %60, i64 %62, i64 %65, i64 %67), !dbg !7771
  %cmp8 = icmp sle i32 %call7, 0, !dbg !7773
  %conv = zext i1 %cmp8 to i32, !dbg !7773
  %conv9 = trunc i32 %conv to i8, !dbg !7771
  store i8 %conv9, i8* %retval, align 1, !dbg !7774
  br label %return, !dbg !7774

return:                                           ; preds = %if.else, %if.then1, %if.then
  %68 = load i8, i8* %retval, align 1, !dbg !7775
  ret i8 %68, !dbg !7775
}

declare dso_local zeroext i8 @double_int_negative_p(i64, i64) #2

declare dso_local { i64, i64 } @double_int_add(i64, i64, i64, i64) #2

declare dso_local i32 @double_int_scmp(i64, i64, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %stmt) #0 !dbg !7776 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7777, metadata !DIExpression()), !dbg !7778
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7779
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7780
  %conv = zext i8 %call to i32, !dbg !7780
  %tobool = icmp ne i32 %conv, 0, !dbg !7780
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7781

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7782
  %call1 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %1), !dbg !7783
  %tobool2 = icmp ne %union.tree_node* %call1, null, !dbg !7781
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !dbg !7784
  %land.ext = zext i1 %2 to i32, !dbg !7781
  %conv3 = trunc i32 %land.ext to i8, !dbg !7780
  ret i8 %conv3, !dbg !7785
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !7786 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7787, metadata !DIExpression()), !dbg !7788
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !7789, metadata !DIExpression()), !dbg !7790
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7791
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7792
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !7790
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7793
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7793
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7793
  %bf.load = load i64, i64* %2, align 8, !dbg !7793
  %bf.clear = and i64 %bf.load, 65535, !dbg !7793
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7793
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !7795
  br i1 %cmp, label %if.then, label %if.end, !dbg !7796

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7797
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !7797
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7797
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7797
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7797
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !7798
  br label %return, !dbg !7798

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7799
  br label %return, !dbg !7799

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7800
  ret %union.tree_node* %5, !dbg !7800
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !7801 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7802, metadata !DIExpression()), !dbg !7803
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7804
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7805
  ret %union.tree_node* %call, !dbg !7806
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_level(%union.gimple_statement_d* %stmt, %struct.loop* %orig_loop, %struct.loop* %level) #0 !dbg !7807 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %orig_loop.addr = alloca %struct.loop*, align 8
  %level.addr = alloca %struct.loop*, align 8
  %stmt_loop = alloca %struct.loop*, align 8
  %dep = alloca %struct.depend*, align 8
  %lim_data = alloca %struct.lim_aux_data*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7810, metadata !DIExpression()), !dbg !7811
  store %struct.loop* %orig_loop, %struct.loop** %orig_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %orig_loop.addr, metadata !7812, metadata !DIExpression()), !dbg !7813
  store %struct.loop* %level, %struct.loop** %level.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %level.addr, metadata !7814, metadata !DIExpression()), !dbg !7815
  call void @llvm.dbg.declare(metadata %struct.loop** %stmt_loop, metadata !7816, metadata !DIExpression()), !dbg !7817
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7818
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !7819
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 3, !dbg !7820
  %1 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !7820
  store %struct.loop* %1, %struct.loop** %stmt_loop, align 8, !dbg !7817
  call void @llvm.dbg.declare(metadata %struct.depend** %dep, metadata !7821, metadata !DIExpression()), !dbg !7822
  call void @llvm.dbg.declare(metadata %struct.lim_aux_data** %lim_data, metadata !7823, metadata !DIExpression()), !dbg !7824
  %2 = load %struct.loop*, %struct.loop** %orig_loop.addr, align 8, !dbg !7825
  %3 = load %struct.loop*, %struct.loop** %stmt_loop, align 8, !dbg !7826
  %call1 = call %struct.loop* @find_common_loop(%struct.loop* %2, %struct.loop* %3), !dbg !7827
  store %struct.loop* %call1, %struct.loop** %stmt_loop, align 8, !dbg !7828
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7829
  %call2 = call %struct.lim_aux_data* @get_lim_data(%union.gimple_statement_d* %4), !dbg !7830
  store %struct.lim_aux_data* %call2, %struct.lim_aux_data** %lim_data, align 8, !dbg !7831
  %5 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !7832
  %cmp = icmp ne %struct.lim_aux_data* %5, null, !dbg !7834
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7835

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !7836
  %tgt_loop = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %6, i32 0, i32 1, !dbg !7837
  %7 = load %struct.loop*, %struct.loop** %tgt_loop, align 8, !dbg !7837
  %cmp3 = icmp ne %struct.loop* %7, null, !dbg !7838
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7839

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.loop*, %struct.loop** %stmt_loop, align 8, !dbg !7840
  %9 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !7841
  %tgt_loop4 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %9, i32 0, i32 1, !dbg !7842
  %10 = load %struct.loop*, %struct.loop** %tgt_loop4, align 8, !dbg !7842
  %call5 = call %struct.loop* @loop_outer(%struct.loop* %10), !dbg !7843
  %call6 = call %struct.loop* @find_common_loop(%struct.loop* %8, %struct.loop* %call5), !dbg !7844
  store %struct.loop* %call6, %struct.loop** %stmt_loop, align 8, !dbg !7845
  br label %if.end, !dbg !7846

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %11 = load %struct.loop*, %struct.loop** %stmt_loop, align 8, !dbg !7847
  %12 = load %struct.loop*, %struct.loop** %level.addr, align 8, !dbg !7849
  %call7 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %11, %struct.loop* %12), !dbg !7850
  %tobool = icmp ne i8 %call7, 0, !dbg !7850
  br i1 %tobool, label %if.then8, label %if.end9, !dbg !7851

if.then8:                                         ; preds = %if.end
  br label %for.end, !dbg !7852

if.end9:                                          ; preds = %if.end
  %13 = load %struct.loop*, %struct.loop** %level.addr, align 8, !dbg !7853
  %14 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !7853
  %max_loop = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %14, i32 0, i32 0, !dbg !7853
  %15 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !7853
  %cmp10 = icmp eq %struct.loop* %13, %15, !dbg !7853
  br i1 %cmp10, label %cond.false, label %lor.lhs.false, !dbg !7853

lor.lhs.false:                                    ; preds = %if.end9
  %16 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !7853
  %max_loop11 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %16, i32 0, i32 0, !dbg !7853
  %17 = load %struct.loop*, %struct.loop** %max_loop11, align 8, !dbg !7853
  %18 = load %struct.loop*, %struct.loop** %level.addr, align 8, !dbg !7853
  %call12 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %17, %struct.loop* %18), !dbg !7853
  %conv = zext i8 %call12 to i32, !dbg !7853
  %tobool13 = icmp ne i32 %conv, 0, !dbg !7853
  br i1 %tobool13, label %cond.false, label %cond.true, !dbg !7853

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i32 731, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7853
  br label %cond.end, !dbg !7853

cond.false:                                       ; preds = %lor.lhs.false, %if.end9
  br label %cond.end, !dbg !7853

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7853
  %19 = load %struct.loop*, %struct.loop** %level.addr, align 8, !dbg !7854
  %20 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !7855
  %tgt_loop14 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %20, i32 0, i32 1, !dbg !7856
  store %struct.loop* %19, %struct.loop** %tgt_loop14, align 8, !dbg !7857
  %21 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !7858
  %depends = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %21, i32 0, i32 4, !dbg !7860
  %22 = load %struct.depend*, %struct.depend** %depends, align 8, !dbg !7860
  store %struct.depend* %22, %struct.depend** %dep, align 8, !dbg !7861
  br label %for.cond, !dbg !7862

for.cond:                                         ; preds = %for.inc, %cond.end
  %23 = load %struct.depend*, %struct.depend** %dep, align 8, !dbg !7863
  %tobool15 = icmp ne %struct.depend* %23, null, !dbg !7865
  br i1 %tobool15, label %for.body, label %for.end, !dbg !7865

for.body:                                         ; preds = %for.cond
  %24 = load %struct.depend*, %struct.depend** %dep, align 8, !dbg !7866
  %stmt16 = getelementptr inbounds %struct.depend, %struct.depend* %24, i32 0, i32 0, !dbg !7867
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt16, align 8, !dbg !7867
  %26 = load %struct.loop*, %struct.loop** %orig_loop.addr, align 8, !dbg !7868
  %27 = load %struct.loop*, %struct.loop** %level.addr, align 8, !dbg !7869
  call void @set_level(%union.gimple_statement_d* %25, %struct.loop* %26, %struct.loop* %27), !dbg !7870
  br label %for.inc, !dbg !7870

for.inc:                                          ; preds = %for.body
  %28 = load %struct.depend*, %struct.depend** %dep, align 8, !dbg !7871
  %next = getelementptr inbounds %struct.depend, %struct.depend* %28, i32 0, i32 1, !dbg !7872
  %29 = load %struct.depend*, %struct.depend** %next, align 8, !dbg !7872
  store %struct.depend* %29, %struct.depend** %dep, align 8, !dbg !7873
  br label %for.cond, !dbg !7874, !llvm.loop !7875

for.end:                                          ; preds = %if.then8, %for.cond
  ret void, !dbg !7877
}

; Function Attrs: noinline nounwind uwtable
define internal void @store_motion_loop(%struct.loop* %loop, %struct.bitmap_head_def* %sm_executed) #0 !dbg !7878 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %sm_executed.addr = alloca %struct.bitmap_head_def*, align 8
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %subloop = alloca %struct.loop*, align 8
  %sm_in_loop = alloca %struct.bitmap_head_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7881, metadata !DIExpression()), !dbg !7882
  store %struct.bitmap_head_def* %sm_executed, %struct.bitmap_head_def** %sm_executed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %sm_executed.addr, metadata !7883, metadata !DIExpression()), !dbg !7884
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits, metadata !7885, metadata !DIExpression()), !dbg !7891
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7892
  %call = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %0), !dbg !7893
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %exits, align 8, !dbg !7891
  call void @llvm.dbg.declare(metadata %struct.loop** %subloop, metadata !7894, metadata !DIExpression()), !dbg !7895
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %sm_in_loop, metadata !7896, metadata !DIExpression()), !dbg !7897
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !7898
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %sm_in_loop, align 8, !dbg !7897
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7899
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !7901
  %call2 = call zeroext i8 @loop_suitable_for_sm(%struct.loop* %1, %struct.VEC_edge_heap* %2), !dbg !7902
  %tobool = icmp ne i8 %call2, 0, !dbg !7902
  br i1 %tobool, label %if.then, label %if.end, !dbg !7903

if.then:                                          ; preds = %entry
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7904
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_executed.addr, align 8, !dbg !7906
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_in_loop, align 8, !dbg !7907
  call void @find_refs_for_sm(%struct.loop* %3, %struct.bitmap_head_def* %4, %struct.bitmap_head_def* %5), !dbg !7908
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7909
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_in_loop, align 8, !dbg !7910
  %8 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !7911
  call void @hoist_memory_references(%struct.loop* %6, %struct.bitmap_head_def* %7, %struct.VEC_edge_heap* %8), !dbg !7912
  br label %if.end, !dbg !7913

if.end:                                           ; preds = %if.then, %entry
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %exits), !dbg !7914
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_executed.addr, align 8, !dbg !7915
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_in_loop, align 8, !dbg !7916
  %call3 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %9, %struct.bitmap_head_def* %10), !dbg !7917
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7918
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 8, !dbg !7920
  %12 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !7920
  store %struct.loop* %12, %struct.loop** %subloop, align 8, !dbg !7921
  br label %for.cond, !dbg !7922

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load %struct.loop*, %struct.loop** %subloop, align 8, !dbg !7923
  %cmp = icmp ne %struct.loop* %13, null, !dbg !7925
  br i1 %cmp, label %for.body, label %for.end, !dbg !7926

for.body:                                         ; preds = %for.cond
  %14 = load %struct.loop*, %struct.loop** %subloop, align 8, !dbg !7927
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_executed.addr, align 8, !dbg !7928
  call void @store_motion_loop(%struct.loop* %14, %struct.bitmap_head_def* %15), !dbg !7929
  br label %for.inc, !dbg !7929

for.inc:                                          ; preds = %for.body
  %16 = load %struct.loop*, %struct.loop** %subloop, align 8, !dbg !7930
  %next = getelementptr inbounds %struct.loop, %struct.loop* %16, i32 0, i32 9, !dbg !7931
  %17 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !7931
  store %struct.loop* %17, %struct.loop** %subloop, align 8, !dbg !7932
  br label %for.cond, !dbg !7933, !llvm.loop !7934

for.end:                                          ; preds = %for.cond
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_executed.addr, align 8, !dbg !7936
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_in_loop, align 8, !dbg !7937
  %call4 = call zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def* %18, %struct.bitmap_head_def* %19), !dbg !7938
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_in_loop, align 8, !dbg !7939
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %20), !dbg !7939
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %sm_in_loop, align 8, !dbg !7939
  ret void, !dbg !7940
}

declare dso_local void @gsi_commit_edge_inserts() #2

declare dso_local %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loop_suitable_for_sm(%struct.loop* %loop, %struct.VEC_edge_heap* %exits) #0 !dbg !7941 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %exits.addr = alloca %struct.VEC_edge_heap*, align 8
  %i = alloca i32, align 4
  %ex = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7944, metadata !DIExpression()), !dbg !7945
  store %struct.VEC_edge_heap* %exits, %struct.VEC_edge_heap** %exits.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits.addr, metadata !7946, metadata !DIExpression()), !dbg !7947
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7948, metadata !DIExpression()), !dbg !7949
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ex, metadata !7950, metadata !DIExpression()), !dbg !7951
  store i32 0, i32* %i, align 4, !dbg !7952
  br label %for.cond, !dbg !7954

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits.addr, align 8, !dbg !7955
  %tobool = icmp ne %struct.VEC_edge_heap* %0, null, !dbg !7955
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7955

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits.addr, align 8, !dbg !7955
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %1, i32 0, i32 0, !dbg !7955
  br label %cond.end, !dbg !7955

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7955

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7955
  %2 = load i32, i32* %i, align 4, !dbg !7955
  %call = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %2, %struct.edge_def** %ex), !dbg !7955
  %tobool1 = icmp ne i32 %call, 0, !dbg !7957
  br i1 %tobool1, label %for.body, label %for.end, !dbg !7957

for.body:                                         ; preds = %cond.end
  %3 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !7958
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 7, !dbg !7960
  %4 = load i32, i32* %flags, align 8, !dbg !7960
  %and = and i32 %4, 2, !dbg !7961
  %tobool2 = icmp ne i32 %and, 0, !dbg !7961
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7962

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !7963
  br label %return, !dbg !7963

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !7964

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4, !dbg !7965
  %inc = add i32 %5, 1, !dbg !7965
  store i32 %inc, i32* %i, align 4, !dbg !7965
  br label %for.cond, !dbg !7966, !llvm.loop !7967

for.end:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !7969
  br label %return, !dbg !7969

return:                                           ; preds = %for.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !7970
  ret i8 %6, !dbg !7970
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_refs_for_sm(%struct.loop* %loop, %struct.bitmap_head_def* %sm_executed, %struct.bitmap_head_def* %refs_to_sm) #0 !dbg !7971 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %sm_executed.addr = alloca %struct.bitmap_head_def*, align 8
  %refs_to_sm.addr = alloca %struct.bitmap_head_def*, align 8
  %refs = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %ref = alloca %struct.mem_ref*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7974, metadata !DIExpression()), !dbg !7975
  store %struct.bitmap_head_def* %sm_executed, %struct.bitmap_head_def** %sm_executed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %sm_executed.addr, metadata !7976, metadata !DIExpression()), !dbg !7977
  store %struct.bitmap_head_def* %refs_to_sm, %struct.bitmap_head_def** %refs_to_sm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %refs_to_sm.addr, metadata !7978, metadata !DIExpression()), !dbg !7979
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %refs, metadata !7980, metadata !DIExpression()), !dbg !7981
  %0 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !7982
  %tobool = icmp ne %struct.VEC_bitmap_heap* %0, null, !dbg !7982
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7982

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !7982
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %1, i32 0, i32 0, !dbg !7982
  br label %cond.end, !dbg !7982

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7982

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7982
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7982
  %num = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 0, !dbg !7982
  %3 = load i32, i32* %num, align 8, !dbg !7982
  %call = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond, i32 %3), !dbg !7982
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %refs, align 8, !dbg !7981
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7983, metadata !DIExpression()), !dbg !7984
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7985, metadata !DIExpression()), !dbg !7986
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref, metadata !7987, metadata !DIExpression()), !dbg !7988
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs, align 8, !dbg !7989
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sm_executed.addr, align 8, !dbg !7989
  call void @bmp_iter_and_compl_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %4, %struct.bitmap_head_def* %5, i32 0, i32* %i), !dbg !7989
  br label %for.cond, !dbg !7989

for.cond:                                         ; preds = %for.inc, %cond.end
  %call1 = call zeroext i8 @bmp_iter_and_compl(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7991
  %tobool2 = icmp ne i8 %call1, 0, !dbg !7989
  br i1 %tobool2, label %for.body, label %for.end, !dbg !7989

for.body:                                         ; preds = %for.cond
  %6 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), align 8, !dbg !7993
  %tobool3 = icmp ne %struct.VEC_mem_ref_p_heap* %6, null, !dbg !7993
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !7993

cond.true4:                                       ; preds = %for.body
  %7 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), align 8, !dbg !7993
  %base5 = getelementptr inbounds %struct.VEC_mem_ref_p_heap, %struct.VEC_mem_ref_p_heap* %7, i32 0, i32 0, !dbg !7993
  br label %cond.end7, !dbg !7993

cond.false6:                                      ; preds = %for.body
  br label %cond.end7, !dbg !7993

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_mem_ref_p_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !7993
  %8 = load i32, i32* %i, align 4, !dbg !7993
  %call9 = call %struct.mem_ref* @VEC_mem_ref_p_base_index(%struct.VEC_mem_ref_p_base* %cond8, i32 %8), !dbg !7993
  store %struct.mem_ref* %call9, %struct.mem_ref** %ref, align 8, !dbg !7995
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7996
  %10 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !7998
  %call10 = call zeroext i8 @can_sm_ref_p(%struct.loop* %9, %struct.mem_ref* %10), !dbg !7999
  %tobool11 = icmp ne i8 %call10, 0, !dbg !7999
  br i1 %tobool11, label %if.then, label %if.end, !dbg !8000

if.then:                                          ; preds = %cond.end7
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs_to_sm.addr, align 8, !dbg !8001
  %12 = load i32, i32* %i, align 4, !dbg !8002
  %call12 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %11, i32 %12), !dbg !8003
  br label %if.end, !dbg !8003

if.end:                                           ; preds = %if.then, %cond.end7
  br label %for.inc, !dbg !8004

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7991
  br label %for.cond, !dbg !7991, !llvm.loop !8005

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8007
}

; Function Attrs: noinline nounwind uwtable
define internal void @hoist_memory_references(%struct.loop* %loop, %struct.bitmap_head_def* %mem_refs, %struct.VEC_edge_heap* %exits) #0 !dbg !8008 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %mem_refs.addr = alloca %struct.bitmap_head_def*, align 8
  %exits.addr = alloca %struct.VEC_edge_heap*, align 8
  %ref = alloca %struct.mem_ref*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8011, metadata !DIExpression()), !dbg !8012
  store %struct.bitmap_head_def* %mem_refs, %struct.bitmap_head_def** %mem_refs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %mem_refs.addr, metadata !8013, metadata !DIExpression()), !dbg !8014
  store %struct.VEC_edge_heap* %exits, %struct.VEC_edge_heap** %exits.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits.addr, metadata !8015, metadata !DIExpression()), !dbg !8016
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref, metadata !8017, metadata !DIExpression()), !dbg !8018
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8019, metadata !DIExpression()), !dbg !8020
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !8021, metadata !DIExpression()), !dbg !8022
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %mem_refs.addr, align 8, !dbg !8023
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %0, i32 0, i32* %i), !dbg !8023
  br label %for.cond, !dbg !8023

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8025
  %tobool = icmp ne i8 %call, 0, !dbg !8023
  br i1 %tobool, label %for.body, label %for.end, !dbg !8023

for.body:                                         ; preds = %for.cond
  %1 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), align 8, !dbg !8027
  %tobool1 = icmp ne %struct.VEC_mem_ref_p_heap* %1, null, !dbg !8027
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8027

cond.true:                                        ; preds = %for.body
  %2 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 1), align 8, !dbg !8027
  %base = getelementptr inbounds %struct.VEC_mem_ref_p_heap, %struct.VEC_mem_ref_p_heap* %2, i32 0, i32 0, !dbg !8027
  br label %cond.end, !dbg !8027

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !8027

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8027
  %3 = load i32, i32* %i, align 4, !dbg !8027
  %call2 = call %struct.mem_ref* @VEC_mem_ref_p_base_index(%struct.VEC_mem_ref_p_base* %cond, i32 %3), !dbg !8027
  store %struct.mem_ref* %call2, %struct.mem_ref** %ref, align 8, !dbg !8029
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8030
  %5 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits.addr, align 8, !dbg !8031
  %6 = load %struct.mem_ref*, %struct.mem_ref** %ref, align 8, !dbg !8032
  call void @execute_sm(%struct.loop* %4, %struct.VEC_edge_heap* %5, %struct.mem_ref* %6), !dbg !8033
  br label %for.inc, !dbg !8034

for.inc:                                          ; preds = %cond.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8025
  br label %for.cond, !dbg !8025, !llvm.loop !8035

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8037
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !8038 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !8042, metadata !DIExpression()), !dbg !8043
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !8044
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !8044
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !8044
  br i1 %tobool, label %if.then, label %if.end, !dbg !8043

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !8044
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !8044
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !8044
  call void @free(i8* %4), !dbg !8044
  br label %if.end, !dbg !8044

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !8043
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !8043
  ret void, !dbg !8043
}

declare dso_local zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !8046 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !8049, metadata !DIExpression()), !dbg !8050
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8051, metadata !DIExpression()), !dbg !8050
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !8052, metadata !DIExpression()), !dbg !8050
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8053
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !8053
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8053

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8053
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8053
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !8053
  %3 = load i32, i32* %num, align 8, !dbg !8053
  %cmp = icmp ult i32 %1, %3, !dbg !8053
  br i1 %cmp, label %if.then, label %if.else, !dbg !8050

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8055
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !8055
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8055
  %idxprom = zext i32 %5 to i64, !dbg !8055
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !8055
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !8055
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !8055
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !8055
  store i32 1, i32* %retval, align 4, !dbg !8055
  br label %return, !dbg !8055

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !8057
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !8057
  store i32 0, i32* %retval, align 4, !dbg !8057
  br label %return, !dbg !8057

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8050
  ret i32 %9, !dbg !8050
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @can_sm_ref_p(%struct.loop* %loop, %struct.mem_ref* %ref) #0 !dbg !8059 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %ref.addr = alloca %struct.mem_ref*, align 8
  %base = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8060, metadata !DIExpression()), !dbg !8061
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !8062, metadata !DIExpression()), !dbg !8063
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !8064, metadata !DIExpression()), !dbg !8065
  %0 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8066
  %stored = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %0, i32 0, i32 3, !dbg !8068
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %stored, align 8, !dbg !8068
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8069
  %num = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 0, !dbg !8070
  %3 = load i32, i32* %num, align 8, !dbg !8070
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %3), !dbg !8071
  %tobool = icmp ne i32 %call, 0, !dbg !8071
  br i1 %tobool, label %if.end, label %if.then, !dbg !8072

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8073
  br label %return, !dbg !8073

if.end:                                           ; preds = %entry
  %4 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8074
  %mem = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %4, i32 0, i32 0, !dbg !8074
  %5 = load %union.tree_node*, %union.tree_node** %mem, align 8, !dbg !8074
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !8074
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8074
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8074
  %call1 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %6), !dbg !8076
  %tobool2 = icmp ne i8 %call1, 0, !dbg !8076
  br i1 %tobool2, label %lor.lhs.false, label %if.then10, !dbg !8077

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8078
  %mem3 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %7, i32 0, i32 0, !dbg !8078
  %8 = load %union.tree_node*, %union.tree_node** %mem3, align 8, !dbg !8078
  %base4 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !8078
  %9 = bitcast %struct.tree_base* %base4 to i64*, !dbg !8078
  %bf.load = load i64, i64* %9, align 8, !dbg !8078
  %bf.lshr = lshr i64 %bf.load, 19, !dbg !8078
  %bf.clear = and i64 %bf.lshr, 1, !dbg !8078
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8078
  %tobool5 = icmp ne i32 %bf.cast, 0, !dbg !8078
  br i1 %tobool5, label %if.then10, label %lor.lhs.false6, !dbg !8079

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %10 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8080
  %mem7 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %10, i32 0, i32 0, !dbg !8081
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8082
  %12 = bitcast %struct.loop* %11 to i8*, !dbg !8082
  %call8 = call zeroext i8 @for_each_index(%union.tree_node** %mem7, i8 (%union.tree_node*, %union.tree_node**, i8*)* @may_move_till, i8* %12), !dbg !8083
  %tobool9 = icmp ne i8 %call8, 0, !dbg !8083
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !8084

if.then10:                                        ; preds = %lor.lhs.false6, %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !8085
  br label %return, !dbg !8085

if.end11:                                         ; preds = %lor.lhs.false6
  %13 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8086
  %mem12 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %13, i32 0, i32 0, !dbg !8087
  %14 = load %union.tree_node*, %union.tree_node** %mem12, align 8, !dbg !8087
  %call13 = call %union.tree_node* @get_base_address(%union.tree_node* %14), !dbg !8088
  store %union.tree_node* %call13, %union.tree_node** %base, align 8, !dbg !8089
  %15 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8090
  %mem14 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %15, i32 0, i32 0, !dbg !8092
  %16 = load %union.tree_node*, %union.tree_node** %mem14, align 8, !dbg !8092
  %call15 = call zeroext i8 @tree_could_trap_p(%union.tree_node* %16), !dbg !8093
  %conv = zext i8 %call15 to i32, !dbg !8093
  %tobool16 = icmp ne i32 %conv, 0, !dbg !8093
  br i1 %tobool16, label %land.lhs.true29, label %lor.lhs.false17, !dbg !8094

lor.lhs.false17:                                  ; preds = %if.end11
  %17 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8095
  %base18 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !8095
  %18 = bitcast %struct.tree_base* %base18 to i64*, !dbg !8095
  %bf.load19 = load i64, i64* %18, align 8, !dbg !8095
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !8095
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !8095
  %idxprom = sext i32 %bf.cast21 to i64, !dbg !8095
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8095
  %19 = load i32, i32* %arrayidx, align 4, !dbg !8095
  %cmp = icmp eq i32 %19, 3, !dbg !8095
  br i1 %cmp, label %land.lhs.true, label %if.end33, !dbg !8096

land.lhs.true:                                    ; preds = %lor.lhs.false17
  %20 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8097
  %base23 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !8097
  %21 = bitcast %struct.tree_base* %base23 to i64*, !dbg !8097
  %bf.load24 = load i64, i64* %21, align 8, !dbg !8097
  %bf.lshr25 = lshr i64 %bf.load24, 20, !dbg !8097
  %bf.clear26 = and i64 %bf.lshr25, 1, !dbg !8097
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !8097
  %tobool28 = icmp ne i32 %bf.cast27, 0, !dbg !8097
  br i1 %tobool28, label %land.lhs.true29, label %if.end33, !dbg !8098

land.lhs.true29:                                  ; preds = %land.lhs.true, %if.end11
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8099
  %23 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8100
  %call30 = call zeroext i8 @ref_always_accessed_p(%struct.loop* %22, %struct.mem_ref* %23, i8 zeroext 1), !dbg !8101
  %tobool31 = icmp ne i8 %call30, 0, !dbg !8101
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !8102

if.then32:                                        ; preds = %land.lhs.true29
  store i8 0, i8* %retval, align 1, !dbg !8103
  br label %return, !dbg !8103

if.end33:                                         ; preds = %land.lhs.true29, %land.lhs.true, %lor.lhs.false17
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8104
  %25 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8106
  %call34 = call zeroext i8 @ref_indep_loop_p(%struct.loop* %24, %struct.mem_ref* %25), !dbg !8107
  %tobool35 = icmp ne i8 %call34, 0, !dbg !8107
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !8108

if.then36:                                        ; preds = %if.end33
  store i8 0, i8* %retval, align 1, !dbg !8109
  br label %return, !dbg !8109

if.end37:                                         ; preds = %if.end33
  store i8 1, i8* %retval, align 1, !dbg !8110
  br label %return, !dbg !8110

return:                                           ; preds = %if.end37, %if.then36, %if.then32, %if.then10, %if.then
  %26 = load i8, i8* %retval, align 1, !dbg !8111
  ret i8 %26, !dbg !8111
}

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @may_move_till(%union.tree_node* %ref, %union.tree_node** %index, i8* %data) #0 !dbg !8112 {
entry:
  %retval = alloca i8, align 1
  %ref.addr = alloca %union.tree_node*, align 8
  %index.addr = alloca %union.tree_node**, align 8
  %data.addr = alloca i8*, align 8
  %loop = alloca %struct.loop*, align 8
  %max_loop = alloca %struct.loop*, align 8
  %step = alloca %union.tree_node*, align 8
  %lbound = alloca %union.tree_node*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !8113, metadata !DIExpression()), !dbg !8114
  store %union.tree_node** %index, %union.tree_node*** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %index.addr, metadata !8115, metadata !DIExpression()), !dbg !8116
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8117, metadata !DIExpression()), !dbg !8118
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !8119, metadata !DIExpression()), !dbg !8120
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8121
  %1 = bitcast i8* %0 to %struct.loop*, !dbg !8122
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !8120
  call void @llvm.dbg.declare(metadata %struct.loop** %max_loop, metadata !8123, metadata !DIExpression()), !dbg !8124
  %2 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !8125
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8125
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !8125
  %bf.load = load i64, i64* %3, align 8, !dbg !8125
  %bf.clear = and i64 %bf.load, 65535, !dbg !8125
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8125
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !8127
  br i1 %cmp, label %if.then, label %if.end9, !dbg !8128

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !8129, metadata !DIExpression()), !dbg !8131
  %4 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !8132
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !8132
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8132
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 3, !dbg !8132
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8132
  store %union.tree_node* %5, %union.tree_node** %step, align 8, !dbg !8131
  call void @llvm.dbg.declare(metadata %union.tree_node** %lbound, metadata !8133, metadata !DIExpression()), !dbg !8134
  %6 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !8135
  %exp1 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !8135
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !8135
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 2, !dbg !8135
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !8135
  store %union.tree_node* %7, %union.tree_node** %lbound, align 8, !dbg !8134
  %8 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !8136
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8137
  %call = call %struct.loop* @outermost_invariant_loop(%union.tree_node* %8, %struct.loop* %9), !dbg !8138
  store %struct.loop* %call, %struct.loop** %max_loop, align 8, !dbg !8139
  %10 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !8140
  %tobool = icmp ne %struct.loop* %10, null, !dbg !8140
  br i1 %tobool, label %if.end, label %if.then4, !dbg !8142

if.then4:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !8143
  br label %return, !dbg !8143

if.end:                                           ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %lbound, align 8, !dbg !8144
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8145
  %call5 = call %struct.loop* @outermost_invariant_loop(%union.tree_node* %11, %struct.loop* %12), !dbg !8146
  store %struct.loop* %call5, %struct.loop** %max_loop, align 8, !dbg !8147
  %13 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !8148
  %tobool6 = icmp ne %struct.loop* %13, null, !dbg !8148
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !8150

if.then7:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !8151
  br label %return, !dbg !8151

if.end8:                                          ; preds = %if.end
  br label %if.end9, !dbg !8152

if.end9:                                          ; preds = %if.end8, %entry
  %14 = load %union.tree_node**, %union.tree_node*** %index.addr, align 8, !dbg !8153
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !8154
  %16 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8155
  %call10 = call %struct.loop* @outermost_invariant_loop(%union.tree_node* %15, %struct.loop* %16), !dbg !8156
  store %struct.loop* %call10, %struct.loop** %max_loop, align 8, !dbg !8157
  %17 = load %struct.loop*, %struct.loop** %max_loop, align 8, !dbg !8158
  %tobool11 = icmp ne %struct.loop* %17, null, !dbg !8158
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !8160

if.then12:                                        ; preds = %if.end9
  store i8 0, i8* %retval, align 1, !dbg !8161
  br label %return, !dbg !8161

if.end13:                                         ; preds = %if.end9
  store i8 1, i8* %retval, align 1, !dbg !8162
  br label %return, !dbg !8162

return:                                           ; preds = %if.end13, %if.then12, %if.then7, %if.then4
  %18 = load i8, i8* %retval, align 1, !dbg !8163
  ret i8 %18, !dbg !8163
}

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

declare dso_local zeroext i8 @tree_could_trap_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ref_always_accessed_p(%struct.loop* %loop, %struct.mem_ref* %ref, i8 zeroext %stored_p) #0 !dbg !8164 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %ref.addr = alloca %struct.mem_ref*, align 8
  %stored_p.addr = alloca i8, align 1
  %locs = alloca %struct.VEC_mem_ref_loc_p_heap*, align 8
  %i = alloca i32, align 4
  %loc = alloca %struct.mem_ref_loc*, align 8
  %ret = alloca i8, align 1
  %must_exec = alloca %struct.loop*, align 8
  %base = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8167, metadata !DIExpression()), !dbg !8168
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !8169, metadata !DIExpression()), !dbg !8170
  store i8 %stored_p, i8* %stored_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %stored_p.addr, metadata !8171, metadata !DIExpression()), !dbg !8172
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_loc_p_heap** %locs, metadata !8173, metadata !DIExpression()), !dbg !8174
  store %struct.VEC_mem_ref_loc_p_heap* null, %struct.VEC_mem_ref_loc_p_heap** %locs, align 8, !dbg !8174
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8175, metadata !DIExpression()), !dbg !8176
  call void @llvm.dbg.declare(metadata %struct.mem_ref_loc** %loc, metadata !8177, metadata !DIExpression()), !dbg !8178
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !8179, metadata !DIExpression()), !dbg !8180
  store i8 0, i8* %ret, align 1, !dbg !8180
  call void @llvm.dbg.declare(metadata %struct.loop** %must_exec, metadata !8181, metadata !DIExpression()), !dbg !8182
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !8183, metadata !DIExpression()), !dbg !8184
  %0 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8185
  %mem = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %0, i32 0, i32 0, !dbg !8186
  %1 = load %union.tree_node*, %union.tree_node** %mem, align 8, !dbg !8186
  %call = call %union.tree_node* @get_base_address(%union.tree_node* %1), !dbg !8187
  store %union.tree_node* %call, %union.tree_node** %base, align 8, !dbg !8188
  %2 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8189
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8189
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8189
  %bf.load = load i64, i64* %3, align 8, !dbg !8189
  %bf.clear = and i64 %bf.load, 65535, !dbg !8189
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8189
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !8189
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8189

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8189
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !8189
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !8189
  %bf.load3 = load i64, i64* %5, align 8, !dbg !8189
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !8189
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !8189
  %cmp6 = icmp eq i32 %bf.cast5, 48, !dbg !8189
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !8189

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8189
  %base8 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8189
  %7 = bitcast %struct.tree_base* %base8 to i64*, !dbg !8189
  %bf.load9 = load i64, i64* %7, align 8, !dbg !8189
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !8189
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !8189
  %cmp12 = icmp eq i32 %bf.cast11, 49, !dbg !8189
  br i1 %cmp12, label %if.then, label %if.end, !dbg !8191

if.then:                                          ; preds = %lor.lhs.false7, %lor.lhs.false, %entry
  %8 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8192
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !8192
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8192
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8192
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8192
  store %union.tree_node* %9, %union.tree_node** %base, align 8, !dbg !8193
  br label %if.end, !dbg !8194

if.end:                                           ; preds = %if.then, %lor.lhs.false7
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8195
  %11 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8196
  call void @get_all_locs_in_loop(%struct.loop* %10, %struct.mem_ref* %11, %struct.VEC_mem_ref_loc_p_heap** %locs), !dbg !8197
  store i32 0, i32* %i, align 4, !dbg !8198
  br label %for.cond, !dbg !8200

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %locs, align 8, !dbg !8201
  %tobool = icmp ne %struct.VEC_mem_ref_loc_p_heap* %12, null, !dbg !8201
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8201

cond.true:                                        ; preds = %for.cond
  %13 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %locs, align 8, !dbg !8201
  %base13 = getelementptr inbounds %struct.VEC_mem_ref_loc_p_heap, %struct.VEC_mem_ref_loc_p_heap* %13, i32 0, i32 0, !dbg !8201
  br label %cond.end, !dbg !8201

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8201

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_loc_p_base* [ %base13, %cond.true ], [ null, %cond.false ], !dbg !8201
  %14 = load i32, i32* %i, align 4, !dbg !8201
  %call14 = call i32 @VEC_mem_ref_loc_p_base_iterate(%struct.VEC_mem_ref_loc_p_base* %cond, i32 %14, %struct.mem_ref_loc** %loc), !dbg !8201
  %tobool15 = icmp ne i32 %call14, 0, !dbg !8203
  br i1 %tobool15, label %for.body, label %for.end, !dbg !8203

for.body:                                         ; preds = %cond.end
  %15 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %loc, align 8, !dbg !8204
  %stmt = getelementptr inbounds %struct.mem_ref_loc, %struct.mem_ref_loc* %15, i32 0, i32 1, !dbg !8207
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8207
  %call16 = call %struct.lim_aux_data* @get_lim_data(%union.gimple_statement_d* %16), !dbg !8208
  %tobool17 = icmp ne %struct.lim_aux_data* %call16, null, !dbg !8208
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !8209

if.then18:                                        ; preds = %for.body
  br label %for.inc, !dbg !8210

if.end19:                                         ; preds = %for.body
  %17 = load i8, i8* %stored_p.addr, align 1, !dbg !8211
  %tobool20 = icmp ne i8 %17, 0, !dbg !8211
  br i1 %tobool20, label %if.then21, label %if.end58, !dbg !8213

if.then21:                                        ; preds = %if.end19
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !8214, metadata !DIExpression()), !dbg !8216
  %18 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %loc, align 8, !dbg !8217
  %stmt22 = getelementptr inbounds %struct.mem_ref_loc, %struct.mem_ref_loc* %18, i32 0, i32 1, !dbg !8219
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt22, align 8, !dbg !8219
  %call23 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %19), !dbg !8220
  %tobool24 = icmp ne %union.tree_node* %call23, null, !dbg !8220
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !8221

if.then25:                                        ; preds = %if.then21
  br label %for.inc, !dbg !8222

if.end26:                                         ; preds = %if.then21
  %20 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %loc, align 8, !dbg !8223
  %stmt27 = getelementptr inbounds %struct.mem_ref_loc, %struct.mem_ref_loc* %20, i32 0, i32 1, !dbg !8224
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt27, align 8, !dbg !8224
  %call28 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %21), !dbg !8225
  %call29 = call %union.tree_node* @get_base_address(%union.tree_node* %call28), !dbg !8226
  store %union.tree_node* %call29, %union.tree_node** %lhs, align 8, !dbg !8227
  %22 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8228
  %tobool30 = icmp ne %union.tree_node* %22, null, !dbg !8228
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !8230

if.then31:                                        ; preds = %if.end26
  br label %for.inc, !dbg !8231

if.end32:                                         ; preds = %if.end26
  %23 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8232
  %base33 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !8232
  %24 = bitcast %struct.tree_base* %base33 to i64*, !dbg !8232
  %bf.load34 = load i64, i64* %24, align 8, !dbg !8232
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !8232
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !8232
  %cmp37 = icmp eq i32 %bf.cast36, 47, !dbg !8232
  br i1 %cmp37, label %if.then50, label %lor.lhs.false38, !dbg !8232

lor.lhs.false38:                                  ; preds = %if.end32
  %25 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8232
  %base39 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !8232
  %26 = bitcast %struct.tree_base* %base39 to i64*, !dbg !8232
  %bf.load40 = load i64, i64* %26, align 8, !dbg !8232
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !8232
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !8232
  %cmp43 = icmp eq i32 %bf.cast42, 48, !dbg !8232
  br i1 %cmp43, label %if.then50, label %lor.lhs.false44, !dbg !8232

lor.lhs.false44:                                  ; preds = %lor.lhs.false38
  %27 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8232
  %base45 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !8232
  %28 = bitcast %struct.tree_base* %base45 to i64*, !dbg !8232
  %bf.load46 = load i64, i64* %28, align 8, !dbg !8232
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !8232
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !8232
  %cmp49 = icmp eq i32 %bf.cast48, 49, !dbg !8232
  br i1 %cmp49, label %if.then50, label %if.end54, !dbg !8234

if.then50:                                        ; preds = %lor.lhs.false44, %lor.lhs.false38, %if.end32
  %29 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8235
  %exp51 = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !8235
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !8235
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 0, !dbg !8235
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !8235
  store %union.tree_node* %30, %union.tree_node** %lhs, align 8, !dbg !8236
  br label %if.end54, !dbg !8237

if.end54:                                         ; preds = %if.then50, %lor.lhs.false44
  %31 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8238
  %32 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8240
  %cmp55 = icmp ne %union.tree_node* %31, %32, !dbg !8241
  br i1 %cmp55, label %if.then56, label %if.end57, !dbg !8242

if.then56:                                        ; preds = %if.end54
  br label %for.inc, !dbg !8243

if.end57:                                         ; preds = %if.end54
  br label %if.end58, !dbg !8244

if.end58:                                         ; preds = %if.end57, %if.end19
  %33 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %loc, align 8, !dbg !8245
  %stmt59 = getelementptr inbounds %struct.mem_ref_loc, %struct.mem_ref_loc* %33, i32 0, i32 1, !dbg !8246
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt59, align 8, !dbg !8246
  %call60 = call %struct.lim_aux_data* @get_lim_data(%union.gimple_statement_d* %34), !dbg !8247
  %always_executed_in = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %call60, i32 0, i32 2, !dbg !8248
  %35 = load %struct.loop*, %struct.loop** %always_executed_in, align 8, !dbg !8248
  store %struct.loop* %35, %struct.loop** %must_exec, align 8, !dbg !8249
  %36 = load %struct.loop*, %struct.loop** %must_exec, align 8, !dbg !8250
  %tobool61 = icmp ne %struct.loop* %36, null, !dbg !8250
  br i1 %tobool61, label %if.end63, label %if.then62, !dbg !8252

if.then62:                                        ; preds = %if.end58
  br label %for.inc, !dbg !8253

if.end63:                                         ; preds = %if.end58
  %37 = load %struct.loop*, %struct.loop** %must_exec, align 8, !dbg !8254
  %38 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8256
  %cmp64 = icmp eq %struct.loop* %37, %38, !dbg !8257
  br i1 %cmp64, label %if.then68, label %lor.lhs.false65, !dbg !8258

lor.lhs.false65:                                  ; preds = %if.end63
  %39 = load %struct.loop*, %struct.loop** %must_exec, align 8, !dbg !8259
  %40 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8260
  %call66 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %39, %struct.loop* %40), !dbg !8261
  %conv = zext i8 %call66 to i32, !dbg !8261
  %tobool67 = icmp ne i32 %conv, 0, !dbg !8261
  br i1 %tobool67, label %if.then68, label %if.end69, !dbg !8262

if.then68:                                        ; preds = %lor.lhs.false65, %if.end63
  store i8 1, i8* %ret, align 1, !dbg !8263
  br label %for.end, !dbg !8265

if.end69:                                         ; preds = %lor.lhs.false65
  br label %for.inc, !dbg !8266

for.inc:                                          ; preds = %if.end69, %if.then62, %if.then56, %if.then31, %if.then25, %if.then18
  %41 = load i32, i32* %i, align 4, !dbg !8267
  %inc = add i32 %41, 1, !dbg !8267
  store i32 %inc, i32* %i, align 4, !dbg !8267
  br label %for.cond, !dbg !8268, !llvm.loop !8269

for.end:                                          ; preds = %if.then68, %cond.end
  call void @VEC_mem_ref_loc_p_heap_free(%struct.VEC_mem_ref_loc_p_heap** %locs), !dbg !8271
  %42 = load i8, i8* %ret, align 1, !dbg !8272
  ret i8 %42, !dbg !8273
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_all_locs_in_loop(%struct.loop* %loop, %struct.mem_ref* %ref, %struct.VEC_mem_ref_loc_p_heap** %locs) #0 !dbg !8274 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %ref.addr = alloca %struct.mem_ref*, align 8
  %locs.addr = alloca %struct.VEC_mem_ref_loc_p_heap**, align 8
  %accs = alloca %struct.mem_ref_locs*, align 8
  %i = alloca i32, align 4
  %loc = alloca %struct.mem_ref_loc*, align 8
  %refs = alloca %struct.bitmap_head_def*, align 8
  %subloop = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8277, metadata !DIExpression()), !dbg !8278
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !8279, metadata !DIExpression()), !dbg !8280
  store %struct.VEC_mem_ref_loc_p_heap** %locs, %struct.VEC_mem_ref_loc_p_heap*** %locs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_loc_p_heap*** %locs.addr, metadata !8281, metadata !DIExpression()), !dbg !8282
  call void @llvm.dbg.declare(metadata %struct.mem_ref_locs** %accs, metadata !8283, metadata !DIExpression()), !dbg !8284
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8285, metadata !DIExpression()), !dbg !8286
  call void @llvm.dbg.declare(metadata %struct.mem_ref_loc** %loc, metadata !8287, metadata !DIExpression()), !dbg !8288
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %refs, metadata !8289, metadata !DIExpression()), !dbg !8290
  %0 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !8291
  %tobool = icmp ne %struct.VEC_bitmap_heap* %0, null, !dbg !8291
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8291

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** getelementptr inbounds (%struct.anon, %struct.anon* @memory_accesses, i32 0, i32 3), align 8, !dbg !8291
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %1, i32 0, i32 0, !dbg !8291
  br label %cond.end, !dbg !8291

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8291

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8291
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8291
  %num = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 0, !dbg !8291
  %3 = load i32, i32* %num, align 8, !dbg !8291
  %call = call %struct.bitmap_head_def* @VEC_bitmap_base_index(%struct.VEC_bitmap_base* %cond, i32 %3), !dbg !8291
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %refs, align 8, !dbg !8290
  call void @llvm.dbg.declare(metadata %struct.loop** %subloop, metadata !8292, metadata !DIExpression()), !dbg !8293
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %refs, align 8, !dbg !8294
  %5 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8296
  %id = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %5, i32 0, i32 1, !dbg !8297
  %6 = load i32, i32* %id, align 8, !dbg !8297
  %call1 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %4, i32 %6), !dbg !8298
  %tobool2 = icmp ne i32 %call1, 0, !dbg !8298
  br i1 %tobool2, label %if.end, label %if.then, !dbg !8299

if.then:                                          ; preds = %cond.end
  br label %for.end42, !dbg !8300

if.end:                                           ; preds = %cond.end
  %7 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8301
  %accesses_in_loop = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %7, i32 0, i32 4, !dbg !8301
  %8 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop, align 8, !dbg !8301
  %tobool3 = icmp ne %struct.VEC_mem_ref_locs_p_heap* %8, null, !dbg !8301
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !8301

cond.true4:                                       ; preds = %if.end
  %9 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8301
  %accesses_in_loop5 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %9, i32 0, i32 4, !dbg !8301
  %10 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop5, align 8, !dbg !8301
  %base6 = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %10, i32 0, i32 0, !dbg !8301
  br label %cond.end8, !dbg !8301

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !8301

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_mem_ref_locs_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !8301
  %call10 = call i32 @VEC_mem_ref_locs_p_base_length(%struct.VEC_mem_ref_locs_p_base* %cond9), !dbg !8301
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8303
  %num11 = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 0, !dbg !8304
  %12 = load i32, i32* %num11, align 8, !dbg !8304
  %cmp = icmp ugt i32 %call10, %12, !dbg !8305
  br i1 %cmp, label %if.then12, label %if.end37, !dbg !8306

if.then12:                                        ; preds = %cond.end8
  %13 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8307
  %accesses_in_loop13 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %13, i32 0, i32 4, !dbg !8307
  %14 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop13, align 8, !dbg !8307
  %tobool14 = icmp ne %struct.VEC_mem_ref_locs_p_heap* %14, null, !dbg !8307
  br i1 %tobool14, label %cond.true15, label %cond.false18, !dbg !8307

cond.true15:                                      ; preds = %if.then12
  %15 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8307
  %accesses_in_loop16 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %15, i32 0, i32 4, !dbg !8307
  %16 = load %struct.VEC_mem_ref_locs_p_heap*, %struct.VEC_mem_ref_locs_p_heap** %accesses_in_loop16, align 8, !dbg !8307
  %base17 = getelementptr inbounds %struct.VEC_mem_ref_locs_p_heap, %struct.VEC_mem_ref_locs_p_heap* %16, i32 0, i32 0, !dbg !8307
  br label %cond.end19, !dbg !8307

cond.false18:                                     ; preds = %if.then12
  br label %cond.end19, !dbg !8307

cond.end19:                                       ; preds = %cond.false18, %cond.true15
  %cond20 = phi %struct.VEC_mem_ref_locs_p_base* [ %base17, %cond.true15 ], [ null, %cond.false18 ], !dbg !8307
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8307
  %num21 = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 0, !dbg !8307
  %18 = load i32, i32* %num21, align 8, !dbg !8307
  %call22 = call %struct.mem_ref_locs* @VEC_mem_ref_locs_p_base_index(%struct.VEC_mem_ref_locs_p_base* %cond20, i32 %18), !dbg !8307
  store %struct.mem_ref_locs* %call22, %struct.mem_ref_locs** %accs, align 8, !dbg !8309
  %19 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs, align 8, !dbg !8310
  %tobool23 = icmp ne %struct.mem_ref_locs* %19, null, !dbg !8310
  br i1 %tobool23, label %if.then24, label %if.end36, !dbg !8312

if.then24:                                        ; preds = %cond.end19
  store i32 0, i32* %i, align 4, !dbg !8313
  br label %for.cond, !dbg !8316

for.cond:                                         ; preds = %for.inc, %if.then24
  %20 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs, align 8, !dbg !8317
  %locs25 = getelementptr inbounds %struct.mem_ref_locs, %struct.mem_ref_locs* %20, i32 0, i32 0, !dbg !8317
  %21 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %locs25, align 8, !dbg !8317
  %tobool26 = icmp ne %struct.VEC_mem_ref_loc_p_heap* %21, null, !dbg !8317
  br i1 %tobool26, label %cond.true27, label %cond.false30, !dbg !8317

cond.true27:                                      ; preds = %for.cond
  %22 = load %struct.mem_ref_locs*, %struct.mem_ref_locs** %accs, align 8, !dbg !8317
  %locs28 = getelementptr inbounds %struct.mem_ref_locs, %struct.mem_ref_locs* %22, i32 0, i32 0, !dbg !8317
  %23 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %locs28, align 8, !dbg !8317
  %base29 = getelementptr inbounds %struct.VEC_mem_ref_loc_p_heap, %struct.VEC_mem_ref_loc_p_heap* %23, i32 0, i32 0, !dbg !8317
  br label %cond.end31, !dbg !8317

cond.false30:                                     ; preds = %for.cond
  br label %cond.end31, !dbg !8317

cond.end31:                                       ; preds = %cond.false30, %cond.true27
  %cond32 = phi %struct.VEC_mem_ref_loc_p_base* [ %base29, %cond.true27 ], [ null, %cond.false30 ], !dbg !8317
  %24 = load i32, i32* %i, align 4, !dbg !8317
  %call33 = call i32 @VEC_mem_ref_loc_p_base_iterate(%struct.VEC_mem_ref_loc_p_base* %cond32, i32 %24, %struct.mem_ref_loc** %loc), !dbg !8317
  %tobool34 = icmp ne i32 %call33, 0, !dbg !8319
  br i1 %tobool34, label %for.body, label %for.end, !dbg !8319

for.body:                                         ; preds = %cond.end31
  %25 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %locs.addr, align 8, !dbg !8320
  %26 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %loc, align 8, !dbg !8320
  %call35 = call %struct.mem_ref_loc** @VEC_mem_ref_loc_p_heap_safe_push(%struct.VEC_mem_ref_loc_p_heap** %25, %struct.mem_ref_loc* %26), !dbg !8320
  br label %for.inc, !dbg !8320

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4, !dbg !8321
  %inc = add i32 %27, 1, !dbg !8321
  store i32 %inc, i32* %i, align 4, !dbg !8321
  br label %for.cond, !dbg !8322, !llvm.loop !8323

for.end:                                          ; preds = %cond.end31
  br label %if.end36, !dbg !8325

if.end36:                                         ; preds = %for.end, %cond.end19
  br label %if.end37, !dbg !8326

if.end37:                                         ; preds = %if.end36, %cond.end8
  %28 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8327
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %28, i32 0, i32 8, !dbg !8329
  %29 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !8329
  store %struct.loop* %29, %struct.loop** %subloop, align 8, !dbg !8330
  br label %for.cond38, !dbg !8331

for.cond38:                                       ; preds = %for.inc41, %if.end37
  %30 = load %struct.loop*, %struct.loop** %subloop, align 8, !dbg !8332
  %cmp39 = icmp ne %struct.loop* %30, null, !dbg !8334
  br i1 %cmp39, label %for.body40, label %for.end42, !dbg !8335

for.body40:                                       ; preds = %for.cond38
  %31 = load %struct.loop*, %struct.loop** %subloop, align 8, !dbg !8336
  %32 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8337
  %33 = load %struct.VEC_mem_ref_loc_p_heap**, %struct.VEC_mem_ref_loc_p_heap*** %locs.addr, align 8, !dbg !8338
  call void @get_all_locs_in_loop(%struct.loop* %31, %struct.mem_ref* %32, %struct.VEC_mem_ref_loc_p_heap** %33), !dbg !8339
  br label %for.inc41, !dbg !8339

for.inc41:                                        ; preds = %for.body40
  %34 = load %struct.loop*, %struct.loop** %subloop, align 8, !dbg !8340
  %next = getelementptr inbounds %struct.loop, %struct.loop* %34, i32 0, i32 9, !dbg !8341
  %35 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !8341
  store %struct.loop* %35, %struct.loop** %subloop, align 8, !dbg !8342
  br label %for.cond38, !dbg !8343, !llvm.loop !8344

for.end42:                                        ; preds = %if.then, %for.cond38
  ret void, !dbg !8346
}

; Function Attrs: noinline nounwind uwtable
define internal void @execute_sm(%struct.loop* %loop, %struct.VEC_edge_heap* %exits, %struct.mem_ref* %ref) #0 !dbg !8347 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %exits.addr = alloca %struct.VEC_edge_heap*, align 8
  %ref.addr = alloca %struct.mem_ref*, align 8
  %tmp_var = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %load = alloca %union.gimple_statement_d*, align 8
  %store = alloca %union.gimple_statement_d*, align 8
  %fmt_data = alloca %struct.fmt_data, align 8
  %ex = alloca %struct.edge_def*, align 8
  %lim_data = alloca %struct.lim_aux_data*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8350, metadata !DIExpression()), !dbg !8351
  store %struct.VEC_edge_heap* %exits, %struct.VEC_edge_heap** %exits.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits.addr, metadata !8352, metadata !DIExpression()), !dbg !8353
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !8354, metadata !DIExpression()), !dbg !8355
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp_var, metadata !8356, metadata !DIExpression()), !dbg !8357
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8358, metadata !DIExpression()), !dbg !8359
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %load, metadata !8360, metadata !DIExpression()), !dbg !8361
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %store, metadata !8362, metadata !DIExpression()), !dbg !8363
  call void @llvm.dbg.declare(metadata %struct.fmt_data* %fmt_data, metadata !8364, metadata !DIExpression()), !dbg !8365
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ex, metadata !8366, metadata !DIExpression()), !dbg !8367
  call void @llvm.dbg.declare(metadata %struct.lim_aux_data** %lim_data, metadata !8368, metadata !DIExpression()), !dbg !8369
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8370
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !8370
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8372

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !8373
  %and = and i32 %1, 8, !dbg !8374
  %tobool1 = icmp ne i32 %and, 0, !dbg !8374
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8375

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8376
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.26, i64 0, i64 0)), !dbg !8378
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8379
  %4 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8380
  %mem = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %4, i32 0, i32 0, !dbg !8381
  %5 = load %union.tree_node*, %union.tree_node** %mem, align 8, !dbg !8381
  call void @print_generic_expr(%struct._IO_FILE* %3, %union.tree_node* %5, i32 0), !dbg !8382
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8383
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8384
  %num = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 0, !dbg !8385
  %8 = load i32, i32* %num, align 8, !dbg !8385
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.27, i64 0, i64 0), i32 %8), !dbg !8386
  br label %if.end, !dbg !8387

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8388
  %mem3 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %9, i32 0, i32 0, !dbg !8388
  %10 = load %union.tree_node*, %union.tree_node** %mem3, align 8, !dbg !8388
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !8388
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8388
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8388
  %12 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8389
  %mem4 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %12, i32 0, i32 0, !dbg !8390
  %13 = load %union.tree_node*, %union.tree_node** %mem4, align 8, !dbg !8390
  %call5 = call i8* @get_lsm_tmp_name(%union.tree_node* %13, i32 -1), !dbg !8391
  %call6 = call %union.tree_node* @make_rename_temp(%union.tree_node* %11, i8* %call5), !dbg !8392
  store %union.tree_node* %call6, %union.tree_node** %tmp_var, align 8, !dbg !8393
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8394
  %loop7 = getelementptr inbounds %struct.fmt_data, %struct.fmt_data* %fmt_data, i32 0, i32 0, !dbg !8395
  store %struct.loop* %14, %struct.loop** %loop7, align 8, !dbg !8396
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8397
  %orig_loop = getelementptr inbounds %struct.fmt_data, %struct.fmt_data* %fmt_data, i32 0, i32 1, !dbg !8398
  store %struct.loop* %15, %struct.loop** %orig_loop, align 8, !dbg !8399
  %16 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8400
  %mem8 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %16, i32 0, i32 0, !dbg !8401
  %17 = bitcast %struct.fmt_data* %fmt_data to i8*, !dbg !8402
  %call9 = call zeroext i8 @for_each_index(%union.tree_node** %mem8, i8 (%union.tree_node*, %union.tree_node**, i8*)* @force_move_till, i8* %17), !dbg !8403
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8404
  %19 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8405
  %20 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !8406
  call void @rewrite_mem_refs(%struct.loop* %18, %struct.mem_ref* %19, %union.tree_node* %20), !dbg !8407
  %21 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !8408
  %22 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8408
  %mem10 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %22, i32 0, i32 0, !dbg !8408
  %23 = load %union.tree_node*, %union.tree_node** %mem10, align 8, !dbg !8408
  %call11 = call %union.tree_node* @unshare_expr(%union.tree_node* %23), !dbg !8408
  %call12 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %21, %union.tree_node* %call11), !dbg !8408
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %load, align 8, !dbg !8409
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %load, align 8, !dbg !8410
  %call13 = call %struct.lim_aux_data* @init_lim_data(%union.gimple_statement_d* %24), !dbg !8411
  store %struct.lim_aux_data* %call13, %struct.lim_aux_data** %lim_data, align 8, !dbg !8412
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8413
  %26 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !8414
  %max_loop = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %26, i32 0, i32 0, !dbg !8415
  store %struct.loop* %25, %struct.loop** %max_loop, align 8, !dbg !8416
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8417
  %28 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !8418
  %tgt_loop = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %28, i32 0, i32 1, !dbg !8419
  store %struct.loop* %27, %struct.loop** %tgt_loop, align 8, !dbg !8420
  %29 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8421
  %call14 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %29), !dbg !8422
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %load, align 8, !dbg !8423
  call void @gsi_insert_on_edge(%struct.edge_def* %call14, %union.gimple_statement_d* %30), !dbg !8424
  store i32 0, i32* %i, align 4, !dbg !8425
  br label %for.cond, !dbg !8427

for.cond:                                         ; preds = %for.inc, %if.end
  %31 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits.addr, align 8, !dbg !8428
  %tobool15 = icmp ne %struct.VEC_edge_heap* %31, null, !dbg !8428
  br i1 %tobool15, label %cond.true, label %cond.false, !dbg !8428

cond.true:                                        ; preds = %for.cond
  %32 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits.addr, align 8, !dbg !8428
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %32, i32 0, i32 0, !dbg !8428
  br label %cond.end, !dbg !8428

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8428

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8428
  %33 = load i32, i32* %i, align 4, !dbg !8428
  %call16 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %33, %struct.edge_def** %ex), !dbg !8428
  %tobool17 = icmp ne i32 %call16, 0, !dbg !8430
  br i1 %tobool17, label %for.body, label %for.end, !dbg !8430

for.body:                                         ; preds = %cond.end
  %34 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8431
  %mem18 = getelementptr inbounds %struct.mem_ref, %struct.mem_ref* %34, i32 0, i32 0, !dbg !8431
  %35 = load %union.tree_node*, %union.tree_node** %mem18, align 8, !dbg !8431
  %call19 = call %union.tree_node* @unshare_expr(%union.tree_node* %35), !dbg !8431
  %36 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !8431
  %call20 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call19, %union.tree_node* %36), !dbg !8431
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %store, align 8, !dbg !8433
  %37 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !8434
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %store, align 8, !dbg !8435
  call void @gsi_insert_on_edge(%struct.edge_def* %37, %union.gimple_statement_d* %38), !dbg !8436
  br label %for.inc, !dbg !8437

for.inc:                                          ; preds = %for.body
  %39 = load i32, i32* %i, align 4, !dbg !8438
  %inc = add i32 %39, 1, !dbg !8438
  store i32 %inc, i32* %i, align 4, !dbg !8438
  br label %for.cond, !dbg !8439, !llvm.loop !8440

for.end:                                          ; preds = %cond.end
  ret void, !dbg !8442
}

declare dso_local %union.tree_node* @make_rename_temp(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @force_move_till(%union.tree_node* %ref, %union.tree_node** %index, i8* %data) #0 !dbg !8443 {
entry:
  %ref.addr = alloca %union.tree_node*, align 8
  %index.addr = alloca %union.tree_node**, align 8
  %data.addr = alloca i8*, align 8
  %fmt_data = alloca %struct.fmt_data*, align 8
  %step = alloca %union.tree_node*, align 8
  %lbound = alloca %union.tree_node*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !8444, metadata !DIExpression()), !dbg !8445
  store %union.tree_node** %index, %union.tree_node*** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %index.addr, metadata !8446, metadata !DIExpression()), !dbg !8447
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8448, metadata !DIExpression()), !dbg !8449
  call void @llvm.dbg.declare(metadata %struct.fmt_data** %fmt_data, metadata !8450, metadata !DIExpression()), !dbg !8451
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8452
  %1 = bitcast i8* %0 to %struct.fmt_data*, !dbg !8453
  store %struct.fmt_data* %1, %struct.fmt_data** %fmt_data, align 8, !dbg !8451
  %2 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !8454
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8454
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !8454
  %bf.load = load i64, i64* %3, align 8, !dbg !8454
  %bf.clear = and i64 %bf.load, 65535, !dbg !8454
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8454
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !8456
  br i1 %cmp, label %if.then, label %if.end, !dbg !8457

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !8458, metadata !DIExpression()), !dbg !8460
  %4 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !8461
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !8461
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8461
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 3, !dbg !8461
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8461
  store %union.tree_node* %5, %union.tree_node** %step, align 8, !dbg !8460
  call void @llvm.dbg.declare(metadata %union.tree_node** %lbound, metadata !8462, metadata !DIExpression()), !dbg !8463
  %6 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !8464
  %exp1 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !8464
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !8464
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 2, !dbg !8464
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !8464
  store %union.tree_node* %7, %union.tree_node** %lbound, align 8, !dbg !8463
  %8 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !8465
  %9 = load %struct.fmt_data*, %struct.fmt_data** %fmt_data, align 8, !dbg !8466
  %orig_loop = getelementptr inbounds %struct.fmt_data, %struct.fmt_data* %9, i32 0, i32 1, !dbg !8467
  %10 = load %struct.loop*, %struct.loop** %orig_loop, align 8, !dbg !8467
  %11 = load %struct.fmt_data*, %struct.fmt_data** %fmt_data, align 8, !dbg !8468
  %loop = getelementptr inbounds %struct.fmt_data, %struct.fmt_data* %11, i32 0, i32 0, !dbg !8469
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8469
  call void @force_move_till_op(%union.tree_node* %8, %struct.loop* %10, %struct.loop* %12), !dbg !8470
  %13 = load %union.tree_node*, %union.tree_node** %lbound, align 8, !dbg !8471
  %14 = load %struct.fmt_data*, %struct.fmt_data** %fmt_data, align 8, !dbg !8472
  %orig_loop4 = getelementptr inbounds %struct.fmt_data, %struct.fmt_data* %14, i32 0, i32 1, !dbg !8473
  %15 = load %struct.loop*, %struct.loop** %orig_loop4, align 8, !dbg !8473
  %16 = load %struct.fmt_data*, %struct.fmt_data** %fmt_data, align 8, !dbg !8474
  %loop5 = getelementptr inbounds %struct.fmt_data, %struct.fmt_data* %16, i32 0, i32 0, !dbg !8475
  %17 = load %struct.loop*, %struct.loop** %loop5, align 8, !dbg !8475
  call void @force_move_till_op(%union.tree_node* %13, %struct.loop* %15, %struct.loop* %17), !dbg !8476
  br label %if.end, !dbg !8477

if.end:                                           ; preds = %if.then, %entry
  %18 = load %union.tree_node**, %union.tree_node*** %index.addr, align 8, !dbg !8478
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !8479
  %20 = load %struct.fmt_data*, %struct.fmt_data** %fmt_data, align 8, !dbg !8480
  %orig_loop6 = getelementptr inbounds %struct.fmt_data, %struct.fmt_data* %20, i32 0, i32 1, !dbg !8481
  %21 = load %struct.loop*, %struct.loop** %orig_loop6, align 8, !dbg !8481
  %22 = load %struct.fmt_data*, %struct.fmt_data** %fmt_data, align 8, !dbg !8482
  %loop7 = getelementptr inbounds %struct.fmt_data, %struct.fmt_data* %22, i32 0, i32 0, !dbg !8483
  %23 = load %struct.loop*, %struct.loop** %loop7, align 8, !dbg !8483
  call void @force_move_till_op(%union.tree_node* %19, %struct.loop* %21, %struct.loop* %23), !dbg !8484
  ret i8 1, !dbg !8485
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_mem_refs(%struct.loop* %loop, %struct.mem_ref* %ref, %union.tree_node* %tmp_var) #0 !dbg !8486 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %ref.addr = alloca %struct.mem_ref*, align 8
  %tmp_var.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %loc = alloca %struct.mem_ref_loc*, align 8
  %locs = alloca %struct.VEC_mem_ref_loc_p_heap*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8489, metadata !DIExpression()), !dbg !8490
  store %struct.mem_ref* %ref, %struct.mem_ref** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref** %ref.addr, metadata !8491, metadata !DIExpression()), !dbg !8492
  store %union.tree_node* %tmp_var, %union.tree_node** %tmp_var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp_var.addr, metadata !8493, metadata !DIExpression()), !dbg !8494
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8495, metadata !DIExpression()), !dbg !8496
  call void @llvm.dbg.declare(metadata %struct.mem_ref_loc** %loc, metadata !8497, metadata !DIExpression()), !dbg !8498
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_loc_p_heap** %locs, metadata !8499, metadata !DIExpression()), !dbg !8500
  store %struct.VEC_mem_ref_loc_p_heap* null, %struct.VEC_mem_ref_loc_p_heap** %locs, align 8, !dbg !8500
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8501
  %1 = load %struct.mem_ref*, %struct.mem_ref** %ref.addr, align 8, !dbg !8502
  call void @get_all_locs_in_loop(%struct.loop* %0, %struct.mem_ref* %1, %struct.VEC_mem_ref_loc_p_heap** %locs), !dbg !8503
  store i32 0, i32* %i, align 4, !dbg !8504
  br label %for.cond, !dbg !8506

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %locs, align 8, !dbg !8507
  %tobool = icmp ne %struct.VEC_mem_ref_loc_p_heap* %2, null, !dbg !8507
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8507

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_mem_ref_loc_p_heap*, %struct.VEC_mem_ref_loc_p_heap** %locs, align 8, !dbg !8507
  %base = getelementptr inbounds %struct.VEC_mem_ref_loc_p_heap, %struct.VEC_mem_ref_loc_p_heap* %3, i32 0, i32 0, !dbg !8507
  br label %cond.end, !dbg !8507

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8507

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_mem_ref_loc_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8507
  %4 = load i32, i32* %i, align 4, !dbg !8507
  %call = call i32 @VEC_mem_ref_loc_p_base_iterate(%struct.VEC_mem_ref_loc_p_base* %cond, i32 %4, %struct.mem_ref_loc** %loc), !dbg !8507
  %tobool1 = icmp ne i32 %call, 0, !dbg !8509
  br i1 %tobool1, label %for.body, label %for.end, !dbg !8509

for.body:                                         ; preds = %cond.end
  %5 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %loc, align 8, !dbg !8510
  %6 = load %union.tree_node*, %union.tree_node** %tmp_var.addr, align 8, !dbg !8511
  call void @rewrite_mem_ref_loc(%struct.mem_ref_loc* %5, %union.tree_node* %6), !dbg !8512
  br label %for.inc, !dbg !8512

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !8513
  %inc = add i32 %7, 1, !dbg !8513
  store i32 %inc, i32* %i, align 4, !dbg !8513
  br label %for.cond, !dbg !8514, !llvm.loop !8515

for.end:                                          ; preds = %cond.end
  call void @VEC_mem_ref_loc_p_heap_free(%struct.VEC_mem_ref_loc_p_heap** %locs), !dbg !8517
  ret void, !dbg !8518
}

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local void @gsi_insert_on_edge(%struct.edge_def*, %union.gimple_statement_d*) #2

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @force_move_till_op(%union.tree_node* %op, %struct.loop* %orig_loop, %struct.loop* %loop) #0 !dbg !8519 {
entry:
  %op.addr = alloca %union.tree_node*, align 8
  %orig_loop.addr = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !8522, metadata !DIExpression()), !dbg !8523
  store %struct.loop* %orig_loop, %struct.loop** %orig_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %orig_loop.addr, metadata !8524, metadata !DIExpression()), !dbg !8525
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8526, metadata !DIExpression()), !dbg !8527
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8528, metadata !DIExpression()), !dbg !8529
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !8530
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !8530
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8532

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !8533
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %1), !dbg !8534
  %conv = zext i8 %call to i32, !dbg !8534
  %tobool1 = icmp ne i32 %conv, 0, !dbg !8534
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8535

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !8536

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !8537
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8537
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !8537
  %bf.load = load i64, i64* %3, align 8, !dbg !8537
  %bf.clear = and i64 %bf.load, 65535, !dbg !8537
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8537
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !8537
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8537

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i32 1140, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8537
  br label %cond.end, !dbg !8537

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8537

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8537
  %4 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !8538
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !8538
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !8538
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8538
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %stmt, align 8, !dbg !8539
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8540
  %call3 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %6), !dbg !8542
  %tobool4 = icmp ne i8 %call3, 0, !dbg !8542
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !8543

if.then5:                                         ; preds = %cond.end
  br label %return, !dbg !8544

if.end6:                                          ; preds = %cond.end
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8545
  %8 = load %struct.loop*, %struct.loop** %orig_loop.addr, align 8, !dbg !8546
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8547
  call void @set_level(%union.gimple_statement_d* %7, %struct.loop* %8, %struct.loop* %9), !dbg !8548
  br label %return, !dbg !8549

return:                                           ; preds = %if.end6, %if.then5, %if.then
  ret void, !dbg !8549
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) #0 !dbg !8550 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8551, metadata !DIExpression()), !dbg !8552
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8553
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8554
  %cmp = icmp eq i32 %call, 18, !dbg !8555
  %conv = zext i1 %cmp to i32, !dbg !8555
  %conv1 = trunc i32 %conv to i8, !dbg !8554
  ret i8 %conv1, !dbg !8556
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_mem_ref_loc(%struct.mem_ref_loc* %loc, %union.tree_node* %tmp_var) #0 !dbg !8557 {
entry:
  %loc.addr = alloca %struct.mem_ref_loc*, align 8
  %tmp_var.addr = alloca %union.tree_node*, align 8
  store %struct.mem_ref_loc* %loc, %struct.mem_ref_loc** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mem_ref_loc** %loc.addr, metadata !8560, metadata !DIExpression()), !dbg !8561
  store %union.tree_node* %tmp_var, %union.tree_node** %tmp_var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp_var.addr, metadata !8562, metadata !DIExpression()), !dbg !8563
  %0 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %loc.addr, align 8, !dbg !8564
  %stmt = getelementptr inbounds %struct.mem_ref_loc, %struct.mem_ref_loc* %0, i32 0, i32 1, !dbg !8565
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8565
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %1), !dbg !8566
  %2 = load %union.tree_node*, %union.tree_node** %tmp_var.addr, align 8, !dbg !8567
  %3 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %loc.addr, align 8, !dbg !8568
  %ref = getelementptr inbounds %struct.mem_ref_loc, %struct.mem_ref_loc* %3, i32 0, i32 0, !dbg !8569
  %4 = load %union.tree_node**, %union.tree_node*** %ref, align 8, !dbg !8569
  store %union.tree_node* %2, %union.tree_node** %4, align 8, !dbg !8570
  %5 = load %struct.mem_ref_loc*, %struct.mem_ref_loc** %loc.addr, align 8, !dbg !8571
  %stmt1 = getelementptr inbounds %struct.mem_ref_loc, %struct.mem_ref_loc* %5, i32 0, i32 1, !dbg !8572
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !8572
  call void @update_stmt(%union.gimple_statement_d* %6), !dbg !8573
  ret void, !dbg !8574
}

declare dso_local void @mark_virtual_ops_for_renaming(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !8575 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8576, metadata !DIExpression()), !dbg !8577
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8578
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8580
  %tobool = icmp ne i8 %call, 0, !dbg !8580
  br i1 %tobool, label %if.then, label %if.end, !dbg !8581

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8582
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !8584
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8585
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !8586
  br label %if.end, !dbg !8587

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8588
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @move_computations_stmt(%struct.dom_walk_data* %dw_data, %struct.basic_block_def* %bb) #0 !dbg !8589 {
entry:
  %dw_data.addr = alloca %struct.dom_walk_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %level = alloca %struct.loop*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %cost = alloca i32, align 4
  %lim_data = alloca %struct.lim_aux_data*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.dom_walk_data* %dw_data, %struct.dom_walk_data** %dw_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data** %dw_data.addr, metadata !8590, metadata !DIExpression()), !dbg !8591
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8592, metadata !DIExpression()), !dbg !8593
  call void @llvm.dbg.declare(metadata %struct.loop** %level, metadata !8594, metadata !DIExpression()), !dbg !8595
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !8596, metadata !DIExpression()), !dbg !8597
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8598, metadata !DIExpression()), !dbg !8599
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !8600, metadata !DIExpression()), !dbg !8601
  store i32 0, i32* %cost, align 4, !dbg !8601
  call void @llvm.dbg.declare(metadata %struct.lim_aux_data** %lim_data, metadata !8602, metadata !DIExpression()), !dbg !8603
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8604
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 3, !dbg !8606
  %1 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !8606
  %call = call %struct.loop* @loop_outer(%struct.loop* %1), !dbg !8607
  %tobool = icmp ne %struct.loop* %call, null, !dbg !8607
  br i1 %tobool, label %if.end, label %if.then, !dbg !8608

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !8609

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8610
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %2), !dbg !8612
  %3 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !8612
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8612
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !8612
  br label %for.cond, !dbg !8613

for.cond:                                         ; preds = %if.end20, %if.then13, %if.then9, %if.then5, %if.end
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !8614
  %tobool2 = icmp ne i8 %call1, 0, !dbg !8616
  %lnot = xor i1 %tobool2, true, !dbg !8616
  br i1 %lnot, label %for.body, label %for.end, !dbg !8617

for.body:                                         ; preds = %for.cond
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !8618
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt, align 8, !dbg !8620
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8621
  %call4 = call %struct.lim_aux_data* @get_lim_data(%union.gimple_statement_d* %5), !dbg !8622
  store %struct.lim_aux_data* %call4, %struct.lim_aux_data** %lim_data, align 8, !dbg !8623
  %6 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !8624
  %cmp = icmp eq %struct.lim_aux_data* %6, null, !dbg !8626
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !8627

if.then5:                                         ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !8628
  br label %for.cond, !dbg !8630, !llvm.loop !8631

if.end6:                                          ; preds = %for.body
  %7 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !8633
  %cost7 = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %7, i32 0, i32 3, !dbg !8634
  %8 = load i32, i32* %cost7, align 8, !dbg !8634
  store i32 %8, i32* %cost, align 4, !dbg !8635
  %9 = load %struct.lim_aux_data*, %struct.lim_aux_data** %lim_data, align 8, !dbg !8636
  %tgt_loop = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %9, i32 0, i32 1, !dbg !8637
  %10 = load %struct.loop*, %struct.loop** %tgt_loop, align 8, !dbg !8637
  store %struct.loop* %10, %struct.loop** %level, align 8, !dbg !8638
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8639
  call void @clear_lim_data(%union.gimple_statement_d* %11), !dbg !8640
  %12 = load %struct.loop*, %struct.loop** %level, align 8, !dbg !8641
  %tobool8 = icmp ne %struct.loop* %12, null, !dbg !8641
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !8643

if.then9:                                         ; preds = %if.end6
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !8644
  br label %for.cond, !dbg !8646, !llvm.loop !8631

if.end10:                                         ; preds = %if.end6
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8647
  %call11 = call i32 @gimple_code(%union.gimple_statement_d* %13), !dbg !8649
  %cmp12 = icmp eq i32 %call11, 1, !dbg !8650
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !8651

if.then13:                                        ; preds = %if.end10
  br label %for.cond, !dbg !8652, !llvm.loop !8631

if.end14:                                         ; preds = %if.end10
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8653
  %tobool15 = icmp ne %struct._IO_FILE* %14, null, !dbg !8653
  br i1 %tobool15, label %land.lhs.true, label %if.end20, !dbg !8655

land.lhs.true:                                    ; preds = %if.end14
  %15 = load i32, i32* @dump_flags, align 4, !dbg !8656
  %and = and i32 %15, 8, !dbg !8657
  %tobool16 = icmp ne i32 %and, 0, !dbg !8657
  br i1 %tobool16, label %if.then17, label %if.end20, !dbg !8658

if.then17:                                        ; preds = %land.lhs.true
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8659
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i64 0, i64 0)), !dbg !8661
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8662
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8663
  call void @print_gimple_stmt(%struct._IO_FILE* %17, %union.gimple_statement_d* %18, i32 0, i32 0), !dbg !8664
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8665
  %20 = load i32, i32* %cost, align 4, !dbg !8666
  %21 = load %struct.loop*, %struct.loop** %level, align 8, !dbg !8667
  %num = getelementptr inbounds %struct.loop, %struct.loop* %21, i32 0, i32 0, !dbg !8668
  %22 = load i32, i32* %num, align 8, !dbg !8668
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.29, i64 0, i64 0), i32 %20, i32 %22), !dbg !8669
  br label %if.end20, !dbg !8670

if.end20:                                         ; preds = %if.then17, %land.lhs.true, %if.end14
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8671
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %23), !dbg !8672
  %24 = load %struct.loop*, %struct.loop** %level, align 8, !dbg !8673
  %call21 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %24), !dbg !8674
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8675
  call void @gsi_insert_on_edge(%struct.edge_def* %call21, %union.gimple_statement_d* %25), !dbg !8676
  call void @gsi_remove(%struct.gimple_stmt_iterator* %bsi, i8 zeroext 0), !dbg !8677
  br label %for.cond, !dbg !8678, !llvm.loop !8631

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !8679
}

declare dso_local zeroext i8 @need_ssa_update_p(%struct.function*) #2

declare dso_local void @rewrite_into_loop_closed_ssa(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @clear_lim_data(%union.gimple_statement_d* %stmt) #0 !dbg !8680 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %p = alloca i8**, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8681, metadata !DIExpression()), !dbg !8682
  call void @llvm.dbg.declare(metadata i8*** %p, metadata !8683, metadata !DIExpression()), !dbg !8684
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @lim_aux_data_map, align 8, !dbg !8685
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8686
  %2 = bitcast %union.gimple_statement_d* %1 to i8*, !dbg !8686
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %2), !dbg !8687
  store i8** %call, i8*** %p, align 8, !dbg !8684
  %3 = load i8**, i8*** %p, align 8, !dbg !8688
  %tobool = icmp ne i8** %3, null, !dbg !8688
  br i1 %tobool, label %if.end, label %if.then, !dbg !8690

if.then:                                          ; preds = %entry
  br label %return, !dbg !8691

if.end:                                           ; preds = %entry
  %4 = load i8**, i8*** %p, align 8, !dbg !8692
  %5 = load i8*, i8** %4, align 8, !dbg !8693
  %6 = bitcast i8* %5 to %struct.lim_aux_data*, !dbg !8694
  call void @free_lim_aux_data(%struct.lim_aux_data* %6), !dbg !8695
  %7 = load i8**, i8*** %p, align 8, !dbg !8696
  store i8* null, i8** %7, align 8, !dbg !8697
  br label %return, !dbg !8698

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !8698
}

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_lim_aux_data(%struct.lim_aux_data* %data) #0 !dbg !8699 {
entry:
  %data.addr = alloca %struct.lim_aux_data*, align 8
  %dep = alloca %struct.depend*, align 8
  %next = alloca %struct.depend*, align 8
  store %struct.lim_aux_data* %data, %struct.lim_aux_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lim_aux_data** %data.addr, metadata !8702, metadata !DIExpression()), !dbg !8703
  call void @llvm.dbg.declare(metadata %struct.depend** %dep, metadata !8704, metadata !DIExpression()), !dbg !8705
  call void @llvm.dbg.declare(metadata %struct.depend** %next, metadata !8706, metadata !DIExpression()), !dbg !8707
  %0 = load %struct.lim_aux_data*, %struct.lim_aux_data** %data.addr, align 8, !dbg !8708
  %depends = getelementptr inbounds %struct.lim_aux_data, %struct.lim_aux_data* %0, i32 0, i32 4, !dbg !8710
  %1 = load %struct.depend*, %struct.depend** %depends, align 8, !dbg !8710
  store %struct.depend* %1, %struct.depend** %dep, align 8, !dbg !8711
  br label %for.cond, !dbg !8712

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.depend*, %struct.depend** %dep, align 8, !dbg !8713
  %tobool = icmp ne %struct.depend* %2, null, !dbg !8715
  br i1 %tobool, label %for.body, label %for.end, !dbg !8715

for.body:                                         ; preds = %for.cond
  %3 = load %struct.depend*, %struct.depend** %dep, align 8, !dbg !8716
  %next1 = getelementptr inbounds %struct.depend, %struct.depend* %3, i32 0, i32 1, !dbg !8718
  %4 = load %struct.depend*, %struct.depend** %next1, align 8, !dbg !8718
  store %struct.depend* %4, %struct.depend** %next, align 8, !dbg !8719
  %5 = load %struct.depend*, %struct.depend** %dep, align 8, !dbg !8720
  %6 = bitcast %struct.depend* %5 to i8*, !dbg !8720
  call void @free(i8* %6), !dbg !8721
  br label %for.inc, !dbg !8722

for.inc:                                          ; preds = %for.body
  %7 = load %struct.depend*, %struct.depend** %next, align 8, !dbg !8723
  store %struct.depend* %7, %struct.depend** %dep, align 8, !dbg !8724
  br label %for.cond, !dbg !8725, !llvm.loop !8726

for.end:                                          ; preds = %for.cond
  %8 = load %struct.lim_aux_data*, %struct.lim_aux_data** %data.addr, align 8, !dbg !8728
  %9 = bitcast %struct.lim_aux_data* %8 to i8*, !dbg !8728
  call void @free(i8* %9), !dbg !8729
  ret void, !dbg !8730
}

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_mem_ref_p_heap_free(%struct.VEC_mem_ref_p_heap** %vec_) #0 !dbg !8731 {
entry:
  %vec_.addr = alloca %struct.VEC_mem_ref_p_heap**, align 8
  store %struct.VEC_mem_ref_p_heap** %vec_, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_mem_ref_p_heap*** %vec_.addr, metadata !8734, metadata !DIExpression()), !dbg !8735
  %0 = load %struct.VEC_mem_ref_p_heap**, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8, !dbg !8736
  %1 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** %0, align 8, !dbg !8736
  %tobool = icmp ne %struct.VEC_mem_ref_p_heap* %1, null, !dbg !8736
  br i1 %tobool, label %if.then, label %if.end, !dbg !8735

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_mem_ref_p_heap**, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8, !dbg !8736
  %3 = load %struct.VEC_mem_ref_p_heap*, %struct.VEC_mem_ref_p_heap** %2, align 8, !dbg !8736
  %4 = bitcast %struct.VEC_mem_ref_p_heap* %3 to i8*, !dbg !8736
  call void @free(i8* %4), !dbg !8736
  br label %if.end, !dbg !8736

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_mem_ref_p_heap**, %struct.VEC_mem_ref_p_heap*** %vec_.addr, align 8, !dbg !8735
  store %struct.VEC_mem_ref_p_heap* null, %struct.VEC_mem_ref_p_heap** %5, align 8, !dbg !8735
  ret void, !dbg !8735
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitmap_base_iterate(%struct.VEC_bitmap_base* %vec_, i32 %ix_, %struct.bitmap_head_def** %ptr) #0 !dbg !8738 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_bitmap_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.bitmap_head_def**, align 8
  store %struct.VEC_bitmap_base* %vec_, %struct.VEC_bitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_base** %vec_.addr, metadata !8741, metadata !DIExpression()), !dbg !8742
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8743, metadata !DIExpression()), !dbg !8742
  store %struct.bitmap_head_def** %ptr, %struct.bitmap_head_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %ptr.addr, metadata !8744, metadata !DIExpression()), !dbg !8742
  %0 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !8745
  %tobool = icmp ne %struct.VEC_bitmap_base* %0, null, !dbg !8745
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8745

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8745
  %2 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !8745
  %num = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %2, i32 0, i32 0, !dbg !8745
  %3 = load i32, i32* %num, align 8, !dbg !8745
  %cmp = icmp ult i32 %1, %3, !dbg !8745
  br i1 %cmp, label %if.then, label %if.else, !dbg !8742

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !8747
  %vec = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %4, i32 0, i32 2, !dbg !8747
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8747
  %idxprom = zext i32 %5 to i64, !dbg !8747
  %arrayidx = getelementptr inbounds [1 x %struct.bitmap_head_def*], [1 x %struct.bitmap_head_def*]* %vec, i64 0, i64 %idxprom, !dbg !8747
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !8747
  %7 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %ptr.addr, align 8, !dbg !8747
  store %struct.bitmap_head_def* %6, %struct.bitmap_head_def** %7, align 8, !dbg !8747
  store i32 1, i32* %retval, align 4, !dbg !8747
  br label %return, !dbg !8747

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %ptr.addr, align 8, !dbg !8749
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %8, align 8, !dbg !8749
  store i32 0, i32* %retval, align 4, !dbg !8749
  br label %return, !dbg !8749

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8742
  ret i32 %9, !dbg !8742
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_bitmap_heap_free(%struct.VEC_bitmap_heap** %vec_) #0 !dbg !8751 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_heap**, align 8
  store %struct.VEC_bitmap_heap** %vec_, %struct.VEC_bitmap_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_heap*** %vec_.addr, metadata !8755, metadata !DIExpression()), !dbg !8756
  %0 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !8757
  %1 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %0, align 8, !dbg !8757
  %tobool = icmp ne %struct.VEC_bitmap_heap* %1, null, !dbg !8757
  br i1 %tobool, label %if.then, label %if.end, !dbg !8756

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !8757
  %3 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %2, align 8, !dbg !8757
  %4 = bitcast %struct.VEC_bitmap_heap* %3 to i8*, !dbg !8757
  call void @free(i8* %4), !dbg !8757
  br label %if.end, !dbg !8757

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !8756
  store %struct.VEC_bitmap_heap* null, %struct.VEC_bitmap_heap** %5, align 8, !dbg !8756
  ret void, !dbg !8756
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_htab_t_base_iterate(%struct.VEC_htab_t_base* %vec_, i32 %ix_, %struct.htab** %ptr) #0 !dbg !8759 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_htab_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.htab**, align 8
  store %struct.VEC_htab_t_base* %vec_, %struct.VEC_htab_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_htab_t_base** %vec_.addr, metadata !8762, metadata !DIExpression()), !dbg !8763
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8764, metadata !DIExpression()), !dbg !8763
  store %struct.htab** %ptr, %struct.htab*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab*** %ptr.addr, metadata !8765, metadata !DIExpression()), !dbg !8763
  %0 = load %struct.VEC_htab_t_base*, %struct.VEC_htab_t_base** %vec_.addr, align 8, !dbg !8766
  %tobool = icmp ne %struct.VEC_htab_t_base* %0, null, !dbg !8766
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8766

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8766
  %2 = load %struct.VEC_htab_t_base*, %struct.VEC_htab_t_base** %vec_.addr, align 8, !dbg !8766
  %num = getelementptr inbounds %struct.VEC_htab_t_base, %struct.VEC_htab_t_base* %2, i32 0, i32 0, !dbg !8766
  %3 = load i32, i32* %num, align 8, !dbg !8766
  %cmp = icmp ult i32 %1, %3, !dbg !8766
  br i1 %cmp, label %if.then, label %if.else, !dbg !8763

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_htab_t_base*, %struct.VEC_htab_t_base** %vec_.addr, align 8, !dbg !8768
  %vec = getelementptr inbounds %struct.VEC_htab_t_base, %struct.VEC_htab_t_base* %4, i32 0, i32 2, !dbg !8768
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8768
  %idxprom = zext i32 %5 to i64, !dbg !8768
  %arrayidx = getelementptr inbounds [1 x %struct.htab*], [1 x %struct.htab*]* %vec, i64 0, i64 %idxprom, !dbg !8768
  %6 = load %struct.htab*, %struct.htab** %arrayidx, align 8, !dbg !8768
  %7 = load %struct.htab**, %struct.htab*** %ptr.addr, align 8, !dbg !8768
  store %struct.htab* %6, %struct.htab** %7, align 8, !dbg !8768
  store i32 1, i32* %retval, align 4, !dbg !8768
  br label %return, !dbg !8768

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.htab**, %struct.htab*** %ptr.addr, align 8, !dbg !8770
  store %struct.htab* null, %struct.htab** %8, align 8, !dbg !8770
  store i32 0, i32* %retval, align 4, !dbg !8770
  br label %return, !dbg !8770

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8763
  ret i32 %9, !dbg !8763
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_htab_t_heap_free(%struct.VEC_htab_t_heap** %vec_) #0 !dbg !8772 {
entry:
  %vec_.addr = alloca %struct.VEC_htab_t_heap**, align 8
  store %struct.VEC_htab_t_heap** %vec_, %struct.VEC_htab_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_htab_t_heap*** %vec_.addr, metadata !8776, metadata !DIExpression()), !dbg !8777
  %0 = load %struct.VEC_htab_t_heap**, %struct.VEC_htab_t_heap*** %vec_.addr, align 8, !dbg !8778
  %1 = load %struct.VEC_htab_t_heap*, %struct.VEC_htab_t_heap** %0, align 8, !dbg !8778
  %tobool = icmp ne %struct.VEC_htab_t_heap* %1, null, !dbg !8778
  br i1 %tobool, label %if.then, label %if.end, !dbg !8777

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_htab_t_heap**, %struct.VEC_htab_t_heap*** %vec_.addr, align 8, !dbg !8778
  %3 = load %struct.VEC_htab_t_heap*, %struct.VEC_htab_t_heap** %2, align 8, !dbg !8778
  %4 = bitcast %struct.VEC_htab_t_heap* %3 to i8*, !dbg !8778
  call void @free(i8* %4), !dbg !8778
  br label %if.end, !dbg !8778

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_htab_t_heap**, %struct.VEC_htab_t_heap*** %vec_.addr, align 8, !dbg !8777
  store %struct.VEC_htab_t_heap* null, %struct.VEC_htab_t_heap** %5, align 8, !dbg !8777
  ret void, !dbg !8777
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2914, !2915, !2916}
!llvm.ident = !{!2917}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "lsm_tmp_name_length", scope: !2, file: !3, line: 1725, type: !1467, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1369, globals: !2895, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-ssa-loop-im.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !338, !342, !348, !353, !358, !376, !383, !390, !396, !435, !461, !475, !479, !484, !489, !495, !618, !623, !630, !636, !1356}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !330, line: 31, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335, !336, !337}
!332 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!336 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!337 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!338 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !330, line: 91, baseType: !7, size: 32, elements: !339)
!339 = !{!340, !341}
!340 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!341 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !343, line: 363, baseType: !7, size: 32, elements: !344)
!343 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!344 = !{!345, !346, !347}
!345 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!346 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!347 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!348 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !343, line: 355, baseType: !7, size: 32, elements: !349)
!349 = !{!350, !351, !352}
!350 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!352 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!353 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !354, line: 474, baseType: !7, size: 32, elements: !355)
!354 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!355 = !{!356, !357}
!356 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!358 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !359)
!359 = !{!360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375}
!360 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!376 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !377)
!377 = !{!378, !379, !380, !381, !382}
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!383 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !384)
!384 = !{!385, !386, !387, !388, !389}
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!389 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "move_pos", file: !391, line: 770, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395}
!393 = !DIEnumerator(name: "MOVE_IMPOSSIBLE", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "MOVE_PRESERVE_EXECUTION", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "MOVE_POSSIBLE", value: 2, isUnsigned: true)
!396 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !397, line: 51, baseType: !7, size: 32, elements: !398)
!397 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!398 = !{!399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434}
!399 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!400 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!401 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!402 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!403 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!404 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!405 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!406 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!407 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!408 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!409 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!410 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!411 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!412 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!413 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!414 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!415 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!416 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!417 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!418 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!419 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!420 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!421 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!422 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!423 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!424 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!425 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!426 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!427 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!428 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!429 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!430 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!431 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!432 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!433 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!434 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!435 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !397, line: 727, baseType: !7, size: 32, elements: !436)
!436 = !{!437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460}
!437 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!438 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!439 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!440 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!441 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!442 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!443 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!444 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!445 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!446 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!447 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!448 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!449 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!450 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!451 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!452 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!453 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!454 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!455 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!456 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!457 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!458 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!459 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!460 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!461 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !343, line: 295, baseType: !7, size: 32, elements: !462)
!462 = !{!463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474}
!463 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!464 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!465 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!466 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!467 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!468 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!469 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!470 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!471 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!472 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!473 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!474 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!475 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !343, line: 912, baseType: !7, size: 32, elements: !476)
!476 = !{!477, !478}
!477 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!478 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!479 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !330, line: 498, baseType: !7, size: 32, elements: !480)
!480 = !{!481, !482, !483}
!481 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!482 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!483 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!484 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !485, line: 147, baseType: !7, size: 32, elements: !486)
!485 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!486 = !{!487, !488}
!487 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!488 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!489 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !397, line: 80, baseType: !7, size: 32, elements: !490)
!490 = !{!491, !492, !493, !494}
!491 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!492 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!493 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!494 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!495 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !496, line: 82, baseType: !7, size: 32, elements: !497)
!496 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!497 = !{!498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617}
!498 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!499 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!500 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!501 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!502 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!503 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!504 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!505 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!506 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!507 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!508 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!509 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!510 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!511 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!512 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!513 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!514 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!515 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!516 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!517 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!518 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!519 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!520 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!521 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!522 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!523 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!524 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!525 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!526 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!527 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!528 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!529 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!530 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!531 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!532 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!533 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!534 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!535 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!536 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!537 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!538 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!539 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!540 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!541 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!542 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!543 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!544 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!545 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!546 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!547 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!548 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!549 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!550 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!551 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!552 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!553 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!554 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!555 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!556 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!557 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!558 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!559 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!560 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!561 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!562 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!563 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!564 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!565 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!566 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!567 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!568 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!569 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!570 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!571 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!572 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!573 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!574 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!575 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!576 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!577 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!578 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!579 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!580 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!581 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!582 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!583 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!584 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!585 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!586 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!587 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!588 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!589 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!590 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!591 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!592 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!593 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!594 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!595 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!596 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!597 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!598 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!599 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!600 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!601 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!602 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!603 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!604 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!605 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!606 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!607 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!608 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!609 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!610 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!611 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!612 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!613 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!614 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!615 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!616 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!617 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!618 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !397, line: 4603, baseType: !7, size: 32, elements: !619)
!619 = !{!620, !621, !622}
!620 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!621 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!622 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!623 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !624, line: 119, baseType: !7, size: 32, elements: !625)
!624 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!625 = !{!626, !627, !628, !629}
!626 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!627 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!628 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!629 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!630 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !135, line: 205, baseType: !7, size: 32, elements: !631)
!631 = !{!632, !633, !634, !635}
!632 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!633 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!634 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!635 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!636 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !135, line: 220, baseType: !7, size: 32, elements: !637)
!637 = !{!638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355}
!638 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!639 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!640 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!641 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!642 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!643 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!644 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!645 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!646 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!647 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!648 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!649 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!650 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!651 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!652 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!653 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!654 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!655 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!656 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!657 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!658 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!659 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!660 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!661 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!662 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!663 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!664 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!665 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!666 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!667 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!668 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!669 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!670 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!671 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!672 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!673 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!674 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!675 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!676 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!677 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!678 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!679 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!680 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!681 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!682 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!683 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!684 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!685 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!686 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!687 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!688 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!689 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!690 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1355 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1356 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !1357)
!1357 = !{!1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368}
!1358 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!1359 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!1360 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!1361 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!1362 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!1363 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!1364 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!1365 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!1366 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!1367 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!1368 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!1369 = !{!134, !1370, !1654, !1702, !2759, !1735, !1639, !7, !1424, !2761, !2810, !2813, !2301, !2782, !2799, !2814, !2826, !2838, !2845, !2847, !2848, !489, !1467, !2849, !2800, !2770, !2783, !2787, !2861, !1943, !1916, !2874, !1500, !2887, !2882, !1681, !2890, !2218}
!1370 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1371, line: 56, baseType: !1372)
!1371 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1373, size: 64)
!1373 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1374)
!1374 = !{!1375, !1408, !1414, !1427, !1446, !1457, !1462, !1473, !1479, !1493, !1505, !1543, !2091, !2119, !2135, !2136, !2141, !2150, !2156, !2161, !2165, !2169, !2410, !2457, !2463, !2469, !2476, !2489, !2503, !2520, !2532, !2554, !2569, !2741}
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1373, file: !135, line: 3372, baseType: !1376, size: 64)
!1376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1377)
!1377 = !{!1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407}
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1376, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1376, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1376, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1376, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1376, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1376, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1376, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1376, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1376, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1376, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1376, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1376, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1376, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1376, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1376, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1376, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1376, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1376, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1376, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1376, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1376, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1376, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1376, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1376, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1376, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1376, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1376, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1376, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1376, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1376, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1373, file: !135, line: 3373, baseType: !1409, size: 192)
!1409 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1410)
!1410 = !{!1411, !1412, !1413}
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1409, file: !135, line: 403, baseType: !1376, size: 64)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1409, file: !135, line: 404, baseType: !1370, size: 64, offset: 64)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1409, file: !135, line: 405, baseType: !1370, size: 64, offset: 128)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1373, file: !135, line: 3374, baseType: !1415, size: 320)
!1415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1416)
!1416 = !{!1417, !1418}
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1415, file: !135, line: 1385, baseType: !1409, size: 192)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1415, file: !135, line: 1386, baseType: !1419, size: 128, offset: 192)
!1419 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1420, line: 58, baseType: !1421)
!1420 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1421 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1420, line: 54, size: 128, elements: !1422)
!1422 = !{!1423, !1425}
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1421, file: !1420, line: 56, baseType: !1424, size: 64)
!1424 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1421, file: !1420, line: 57, baseType: !1426, size: 64, offset: 64)
!1426 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1373, file: !135, line: 3375, baseType: !1428, size: 256)
!1428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1429)
!1429 = !{!1430, !1431}
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1428, file: !135, line: 1398, baseType: !1409, size: 192)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1428, file: !135, line: 1399, baseType: !1432, size: 64, offset: 192)
!1432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1433, size: 64)
!1433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1434, line: 52, size: 256, elements: !1435)
!1434 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1435 = !{!1436, !1437, !1438, !1439, !1440, !1441, !1442}
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1433, file: !1434, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1433, file: !1434, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1433, file: !1434, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1433, file: !1434, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1433, file: !1434, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1433, file: !1434, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1433, file: !1434, line: 62, baseType: !1443, size: 192, offset: 64)
!1443 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1424, size: 192, elements: !1444)
!1444 = !{!1445}
!1445 = !DISubrange(count: 3)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1373, file: !135, line: 3376, baseType: !1447, size: 256)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1448)
!1448 = !{!1449, !1450}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1447, file: !135, line: 1409, baseType: !1409, size: 192)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1447, file: !135, line: 1410, baseType: !1451, size: 64, offset: 192)
!1451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1452, size: 64)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1453, line: 27, size: 192, elements: !1454)
!1453 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1454 = !{!1455, !1456}
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1452, file: !1453, line: 29, baseType: !1419, size: 128)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1452, file: !1453, line: 30, baseType: !5, size: 32, offset: 128)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1373, file: !135, line: 3377, baseType: !1458, size: 256)
!1458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1459)
!1459 = !{!1460, !1461}
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1458, file: !135, line: 1438, baseType: !1409, size: 192)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1458, file: !135, line: 1439, baseType: !1370, size: 64, offset: 192)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1373, file: !135, line: 3378, baseType: !1463, size: 256)
!1463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1464)
!1464 = !{!1465, !1466, !1468}
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1463, file: !135, line: 1419, baseType: !1409, size: 192)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1463, file: !135, line: 1420, baseType: !1467, size: 32, offset: 192)
!1467 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1463, file: !135, line: 1421, baseType: !1469, size: 8, offset: 224)
!1469 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1470, size: 8, elements: !1471)
!1470 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1471 = !{!1472}
!1472 = !DISubrange(count: 1)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1373, file: !135, line: 3379, baseType: !1474, size: 320)
!1474 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1475)
!1475 = !{!1476, !1477, !1478}
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1474, file: !135, line: 1429, baseType: !1409, size: 192)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1474, file: !135, line: 1430, baseType: !1370, size: 64, offset: 192)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1474, file: !135, line: 1431, baseType: !1370, size: 64, offset: 256)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1373, file: !135, line: 3380, baseType: !1480, size: 320)
!1480 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1481)
!1481 = !{!1482, !1483}
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1480, file: !135, line: 1461, baseType: !1409, size: 192)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1480, file: !135, line: 1462, baseType: !1484, size: 128, offset: 192)
!1484 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1485, line: 31, size: 128, elements: !1486)
!1485 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1486 = !{!1487, !1491, !1492}
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1484, file: !1485, line: 32, baseType: !1488, size: 64)
!1488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1489, size: 64)
!1489 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1490)
!1490 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1484, file: !1485, line: 33, baseType: !7, size: 32, offset: 64)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1484, file: !1485, line: 34, baseType: !7, size: 32, offset: 96)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1373, file: !135, line: 3381, baseType: !1494, size: 384)
!1494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1495)
!1495 = !{!1496, !1497, !1502, !1503, !1504}
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1494, file: !135, line: 2508, baseType: !1409, size: 192)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1494, file: !135, line: 2509, baseType: !1498, size: 32, offset: 192)
!1498 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1499, line: 58, baseType: !1500)
!1499 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1500 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1501, line: 44, baseType: !7)
!1501 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1494, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1494, file: !135, line: 2511, baseType: !1370, size: 64, offset: 256)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1494, file: !135, line: 2512, baseType: !1370, size: 64, offset: 320)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1373, file: !135, line: 3382, baseType: !1506, size: 896)
!1506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1507)
!1507 = !{!1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1506, file: !135, line: 2653, baseType: !1494, size: 384)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1506, file: !135, line: 2654, baseType: !1370, size: 64, offset: 384)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1506, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1506, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1506, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1506, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1506, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1506, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1506, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1506, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1506, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1506, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1506, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1506, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1506, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1506, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1506, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1506, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1506, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1506, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1506, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1506, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1506, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1506, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1506, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1506, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1506, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1506, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1506, file: !135, line: 2705, baseType: !1370, size: 64, offset: 576)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1506, file: !135, line: 2706, baseType: !1370, size: 64, offset: 640)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1506, file: !135, line: 2707, baseType: !1370, size: 64, offset: 704)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1506, file: !135, line: 2708, baseType: !1370, size: 64, offset: 768)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1506, file: !135, line: 2711, baseType: !1541, size: 64, offset: 832)
!1541 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1542, size: 64)
!1542 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1373, file: !135, line: 3383, baseType: !1544, size: 960)
!1544 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1545)
!1545 = !{!1546, !1547}
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1544, file: !135, line: 2757, baseType: !1506, size: 896)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1544, file: !135, line: 2758, baseType: !1548, size: 64, offset: 896)
!1548 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1371, line: 50, baseType: !1549)
!1549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1550, size: 64)
!1550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1551, line: 240, size: 384, elements: !1552)
!1551 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1552 = !{!1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1550, file: !1551, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1550, file: !1551, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1550, file: !1551, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1550, file: !1551, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1550, file: !1551, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1550, file: !1551, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1550, file: !1551, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1550, file: !1551, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1550, file: !1551, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1550, file: !1551, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1550, file: !1551, line: 321, baseType: !1564, size: 320, offset: 64)
!1564 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1551, line: 315, size: 320, elements: !1565)
!1565 = !{!1566, !2024, !2026, !2089, !2090}
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1564, file: !1551, line: 316, baseType: !1567, size: 64)
!1567 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1568, size: 64, elements: !1471)
!1568 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1551, line: 183, baseType: !1569)
!1569 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1551, line: 166, size: 64, elements: !1570)
!1570 = !{!1571, !1572, !1573, !1576, !1577, !1585, !1586, !1598, !1601, !1663, !1664, !2001, !2014, !2021}
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1569, file: !1551, line: 168, baseType: !1467, size: 32)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1569, file: !1551, line: 169, baseType: !7, size: 32)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1569, file: !1551, line: 170, baseType: !1574, size: 64)
!1574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1575, size: 64)
!1575 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1470)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1569, file: !1551, line: 171, baseType: !1548, size: 64)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1569, file: !1551, line: 172, baseType: !1578, size: 64)
!1578 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1371, line: 53, baseType: !1579)
!1579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1580, size: 64)
!1580 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1551, line: 359, size: 128, elements: !1581)
!1581 = !{!1582, !1583}
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1580, file: !1551, line: 360, baseType: !1467, size: 32)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1580, file: !1551, line: 361, baseType: !1584, size: 64, offset: 64)
!1584 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1548, size: 64, elements: !1471)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1569, file: !1551, line: 173, baseType: !5, size: 32)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1569, file: !1551, line: 174, baseType: !1587, size: 32)
!1587 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1551, line: 133, baseType: !1588)
!1588 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1551, line: 115, size: 32, elements: !1589)
!1589 = !{!1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597}
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1588, file: !1551, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1588, file: !1551, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1588, file: !1551, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1588, file: !1551, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1588, file: !1551, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1588, file: !1551, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1588, file: !1551, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1588, file: !1551, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1569, file: !1551, line: 175, baseType: !1599, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1600, size: 64)
!1600 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1551, line: 175, flags: DIFlagFwdDecl)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1569, file: !1551, line: 176, baseType: !1602, size: 64)
!1602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1603, size: 64)
!1603 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1604, line: 75, size: 256, elements: !1605)
!1604 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1605 = !{!1606, !1620, !1621, !1622}
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1603, file: !1604, line: 76, baseType: !1607, size: 64)
!1607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1608, size: 64)
!1608 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1604, line: 68, baseType: !1609)
!1609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1604, line: 63, size: 320, elements: !1610)
!1610 = !{!1611, !1613, !1614, !1615}
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1609, file: !1604, line: 64, baseType: !1612, size: 64)
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1609, size: 64)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1609, file: !1604, line: 65, baseType: !1612, size: 64, offset: 64)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1609, file: !1604, line: 66, baseType: !7, size: 32, offset: 128)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1609, file: !1604, line: 67, baseType: !1616, size: 128, offset: 192)
!1616 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1617, size: 128, elements: !1618)
!1617 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1604, line: 29, baseType: !1424)
!1618 = !{!1619}
!1619 = !DISubrange(count: 2)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1603, file: !1604, line: 77, baseType: !1607, size: 64, offset: 64)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1603, file: !1604, line: 78, baseType: !7, size: 32, offset: 128)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1603, file: !1604, line: 79, baseType: !1623, size: 64, offset: 192)
!1623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1624, size: 64)
!1624 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1604, line: 49, baseType: !1625)
!1625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1604, line: 45, size: 832, elements: !1626)
!1626 = !{!1627, !1628, !1629}
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1625, file: !1604, line: 46, baseType: !1612, size: 64)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1625, file: !1604, line: 47, baseType: !1602, size: 64, offset: 64)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1625, file: !1604, line: 48, baseType: !1630, size: 704, offset: 128)
!1630 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1631, line: 164, size: 704, elements: !1632)
!1631 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1632 = !{!1633, !1634, !1645, !1646, !1647, !1648, !1649, !1650, !1655, !1659, !1660, !1661, !1662}
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1630, file: !1631, line: 166, baseType: !1426, size: 64)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1630, file: !1631, line: 167, baseType: !1635, size: 64, offset: 64)
!1635 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1636, size: 64)
!1636 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1631, line: 157, size: 192, elements: !1637)
!1637 = !{!1638, !1640, !1641}
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1636, file: !1631, line: 159, baseType: !1639, size: 64)
!1639 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1470, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1636, file: !1631, line: 160, baseType: !1635, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1636, file: !1631, line: 161, baseType: !1642, size: 32, offset: 128)
!1642 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1470, size: 32, elements: !1643)
!1643 = !{!1644}
!1644 = !DISubrange(count: 4)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1630, file: !1631, line: 168, baseType: !1639, size: 64, offset: 128)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1630, file: !1631, line: 169, baseType: !1639, size: 64, offset: 192)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1630, file: !1631, line: 170, baseType: !1639, size: 64, offset: 256)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1630, file: !1631, line: 171, baseType: !1426, size: 64, offset: 320)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1630, file: !1631, line: 172, baseType: !1467, size: 32, offset: 384)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1630, file: !1631, line: 176, baseType: !1651, size: 64, offset: 448)
!1651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1652, size: 64)
!1652 = !DISubroutineType(types: !1653)
!1653 = !{!1635, !1654, !1426}
!1654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1630, file: !1631, line: 177, baseType: !1656, size: 64, offset: 512)
!1656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1657, size: 64)
!1657 = !DISubroutineType(types: !1658)
!1658 = !{null, !1654, !1635}
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1630, file: !1631, line: 178, baseType: !1654, size: 64, offset: 576)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1630, file: !1631, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1630, file: !1631, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1630, file: !1631, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1569, file: !1551, line: 177, baseType: !1370, size: 64)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1569, file: !1551, line: 178, baseType: !1665, size: 64)
!1665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1666, size: 64)
!1666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !343, line: 217, size: 832, elements: !1667)
!1667 = !{!1668, !1913, !1914, !1915, !1971, !1975, !1976, !1977, !1995, !1996, !1997, !1998, !1999, !2000}
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1666, file: !343, line: 219, baseType: !1669, size: 64)
!1669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1670, size: 64)
!1670 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !343, line: 151, baseType: !1671)
!1671 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !343, line: 151, size: 128, elements: !1672)
!1672 = !{!1673}
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1671, file: !343, line: 151, baseType: !1674, size: 128)
!1674 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !343, line: 150, baseType: !1675)
!1675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !343, line: 150, size: 128, elements: !1676)
!1676 = !{!1677, !1678, !1679}
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1675, file: !343, line: 150, baseType: !7, size: 32)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1675, file: !343, line: 150, baseType: !7, size: 32, offset: 32)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1675, file: !343, line: 150, baseType: !1680, size: 64, offset: 64)
!1680 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1681, size: 64, elements: !1471)
!1681 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1371, line: 108, baseType: !1682)
!1682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1683, size: 64)
!1683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !343, line: 122, size: 512, elements: !1684)
!1684 = !{!1685, !1686, !1687, !1905, !1906, !1907, !1908, !1909, !1910, !1911}
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1683, file: !343, line: 124, baseType: !1665, size: 64)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1683, file: !343, line: 125, baseType: !1665, size: 64, offset: 64)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1683, file: !343, line: 131, baseType: !1688, size: 64, offset: 128)
!1688 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !343, line: 128, size: 64, elements: !1689)
!1689 = !{!1690, !1904}
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1688, file: !343, line: 129, baseType: !1691, size: 64)
!1691 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1371, line: 66, baseType: !1692)
!1692 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1693, size: 64)
!1693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !397, line: 143, size: 192, elements: !1694)
!1694 = !{!1695, !1902, !1903}
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1693, file: !397, line: 145, baseType: !1696, size: 64)
!1696 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1371, line: 69, baseType: !1697)
!1697 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1698, size: 64)
!1698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !397, line: 136, size: 192, elements: !1699)
!1699 = !{!1700, !1900, !1901}
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1698, file: !397, line: 137, baseType: !1701, size: 64)
!1701 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1371, line: 58, baseType: !1702)
!1702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1703, size: 64)
!1703 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !397, line: 737, size: 768, elements: !1704)
!1704 = !{!1705, !1722, !1755, !1761, !1766, !1771, !1778, !1784, !1790, !1795, !1809, !1814, !1820, !1825, !1835, !1840, !1858, !1865, !1872, !1878, !1883, !1889, !1895}
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1703, file: !397, line: 738, baseType: !1706, size: 256)
!1706 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !397, line: 271, size: 256, elements: !1707)
!1707 = !{!1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721}
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1706, file: !397, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1706, file: !397, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1706, file: !397, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1706, file: !397, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1706, file: !397, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1706, file: !397, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1706, file: !397, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1706, file: !397, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1706, file: !397, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1706, file: !397, line: 312, baseType: !7, size: 32, offset: 32)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1706, file: !397, line: 316, baseType: !1498, size: 32, offset: 64)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1706, file: !397, line: 319, baseType: !7, size: 32, offset: 96)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1706, file: !397, line: 323, baseType: !1665, size: 64, offset: 128)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1706, file: !397, line: 327, baseType: !1370, size: 64, offset: 192)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1703, file: !397, line: 739, baseType: !1723, size: 448)
!1723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !397, line: 350, size: 448, elements: !1724)
!1724 = !{!1725, !1753}
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1723, file: !397, line: 353, baseType: !1726, size: 384)
!1726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !397, line: 333, size: 384, elements: !1727)
!1727 = !{!1728, !1729, !1736}
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1726, file: !397, line: 336, baseType: !1706, size: 256)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1726, file: !397, line: 343, baseType: !1730, size: 64, offset: 256)
!1730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1731, size: 64)
!1731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !624, line: 37, size: 128, elements: !1732)
!1732 = !{!1733, !1734}
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1731, file: !624, line: 39, baseType: !1730, size: 64)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1731, file: !624, line: 40, baseType: !1735, size: 64, offset: 64)
!1735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1370, size: 64)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1726, file: !397, line: 344, baseType: !1737, size: 64, offset: 320)
!1737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !624, line: 45, size: 320, elements: !1739)
!1739 = !{!1740, !1741}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1738, file: !624, line: 47, baseType: !1737, size: 64)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1738, file: !624, line: 48, baseType: !1742, size: 256, offset: 64)
!1742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1743)
!1743 = !{!1744, !1746, !1747, !1752}
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1742, file: !135, line: 1884, baseType: !1745, size: 64)
!1745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1742, size: 64)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1742, file: !135, line: 1885, baseType: !1745, size: 64, offset: 64)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1742, file: !135, line: 1891, baseType: !1748, size: 64, offset: 128)
!1748 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1742, file: !135, line: 1891, size: 64, elements: !1749)
!1749 = !{!1750, !1751}
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1748, file: !135, line: 1891, baseType: !1701, size: 64)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1748, file: !135, line: 1891, baseType: !1370, size: 64)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1742, file: !135, line: 1892, baseType: !1735, size: 64, offset: 192)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1723, file: !397, line: 359, baseType: !1754, size: 64, offset: 384)
!1754 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1370, size: 64, elements: !1471)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1703, file: !397, line: 740, baseType: !1756, size: 512)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !397, line: 365, size: 512, elements: !1757)
!1757 = !{!1758, !1759, !1760}
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1756, file: !397, line: 368, baseType: !1726, size: 384)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1756, file: !397, line: 373, baseType: !1370, size: 64, offset: 384)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1756, file: !397, line: 374, baseType: !1370, size: 64, offset: 448)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1703, file: !397, line: 741, baseType: !1762, size: 576)
!1762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !397, line: 380, size: 576, elements: !1763)
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1762, file: !397, line: 383, baseType: !1756, size: 512)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1762, file: !397, line: 389, baseType: !1754, size: 64, offset: 512)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1703, file: !397, line: 742, baseType: !1767, size: 320)
!1767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !397, line: 395, size: 320, elements: !1768)
!1768 = !{!1769, !1770}
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1767, file: !397, line: 397, baseType: !1706, size: 256)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1767, file: !397, line: 400, baseType: !1691, size: 64, offset: 256)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1703, file: !397, line: 743, baseType: !1772, size: 448)
!1772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !397, line: 406, size: 448, elements: !1773)
!1773 = !{!1774, !1775, !1776, !1777}
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1772, file: !397, line: 408, baseType: !1706, size: 256)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1772, file: !397, line: 412, baseType: !1370, size: 64, offset: 256)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1772, file: !397, line: 420, baseType: !1370, size: 64, offset: 320)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1772, file: !397, line: 423, baseType: !1691, size: 64, offset: 384)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1703, file: !397, line: 744, baseType: !1779, size: 384)
!1779 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !397, line: 429, size: 384, elements: !1780)
!1780 = !{!1781, !1782, !1783}
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1779, file: !397, line: 431, baseType: !1706, size: 256)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1779, file: !397, line: 434, baseType: !1370, size: 64, offset: 256)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1779, file: !397, line: 437, baseType: !1691, size: 64, offset: 320)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1703, file: !397, line: 745, baseType: !1785, size: 384)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !397, line: 443, size: 384, elements: !1786)
!1786 = !{!1787, !1788, !1789}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1785, file: !397, line: 445, baseType: !1706, size: 256)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1785, file: !397, line: 449, baseType: !1370, size: 64, offset: 256)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1785, file: !397, line: 453, baseType: !1691, size: 64, offset: 320)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1703, file: !397, line: 746, baseType: !1791, size: 320)
!1791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !397, line: 459, size: 320, elements: !1792)
!1792 = !{!1793, !1794}
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1791, file: !397, line: 461, baseType: !1706, size: 256)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1791, file: !397, line: 464, baseType: !1370, size: 64, offset: 256)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1703, file: !397, line: 747, baseType: !1796, size: 768)
!1796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !397, line: 469, size: 768, elements: !1797)
!1797 = !{!1798, !1799, !1800, !1801, !1802}
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1796, file: !397, line: 471, baseType: !1706, size: 256)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1796, file: !397, line: 474, baseType: !7, size: 32, offset: 256)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1796, file: !397, line: 475, baseType: !7, size: 32, offset: 288)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1796, file: !397, line: 478, baseType: !1370, size: 64, offset: 320)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1796, file: !397, line: 481, baseType: !1803, size: 384, offset: 384)
!1803 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1804, size: 384, elements: !1471)
!1804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !1805)
!1805 = !{!1806, !1807, !1808}
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1804, file: !135, line: 1920, baseType: !1742, size: 256)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1804, file: !135, line: 1921, baseType: !1370, size: 64, offset: 256)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1804, file: !135, line: 1922, baseType: !1498, size: 32, offset: 320)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1703, file: !397, line: 748, baseType: !1810, size: 320)
!1810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !397, line: 487, size: 320, elements: !1811)
!1811 = !{!1812, !1813}
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1810, file: !397, line: 490, baseType: !1706, size: 256)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1810, file: !397, line: 494, baseType: !1467, size: 32, offset: 256)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1703, file: !397, line: 749, baseType: !1815, size: 384)
!1815 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !397, line: 500, size: 384, elements: !1816)
!1816 = !{!1817, !1818, !1819}
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1815, file: !397, line: 502, baseType: !1706, size: 256)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1815, file: !397, line: 506, baseType: !1691, size: 64, offset: 256)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1815, file: !397, line: 510, baseType: !1691, size: 64, offset: 320)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1703, file: !397, line: 750, baseType: !1821, size: 320)
!1821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !397, line: 529, size: 320, elements: !1822)
!1822 = !{!1823, !1824}
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1821, file: !397, line: 531, baseType: !1706, size: 256)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1821, file: !397, line: 540, baseType: !1691, size: 64, offset: 256)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1703, file: !397, line: 751, baseType: !1826, size: 704)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !397, line: 546, size: 704, elements: !1827)
!1827 = !{!1828, !1829, !1830, !1831, !1832, !1833, !1834}
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1826, file: !397, line: 549, baseType: !1756, size: 512)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1826, file: !397, line: 553, baseType: !1574, size: 64, offset: 512)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1826, file: !397, line: 557, baseType: !1490, size: 8, offset: 576)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1826, file: !397, line: 558, baseType: !1490, size: 8, offset: 584)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1826, file: !397, line: 559, baseType: !1490, size: 8, offset: 592)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1826, file: !397, line: 560, baseType: !1490, size: 8, offset: 600)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1826, file: !397, line: 566, baseType: !1754, size: 64, offset: 640)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1703, file: !397, line: 752, baseType: !1836, size: 384)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !397, line: 571, size: 384, elements: !1837)
!1837 = !{!1838, !1839}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1836, file: !397, line: 573, baseType: !1767, size: 320)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1836, file: !397, line: 577, baseType: !1370, size: 64, offset: 320)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1703, file: !397, line: 753, baseType: !1841, size: 576)
!1841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !397, line: 600, size: 576, elements: !1842)
!1842 = !{!1843, !1844, !1845, !1848, !1857}
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1841, file: !397, line: 602, baseType: !1767, size: 320)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1841, file: !397, line: 605, baseType: !1370, size: 64, offset: 320)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1841, file: !397, line: 609, baseType: !1846, size: 64, offset: 384)
!1846 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1847, line: 46, baseType: !1424)
!1847 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1841, file: !397, line: 612, baseType: !1849, size: 64, offset: 448)
!1849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1850, size: 64)
!1850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !397, line: 581, size: 320, elements: !1851)
!1851 = !{!1852, !1853, !1854, !1855, !1856}
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1850, file: !397, line: 583, baseType: !134, size: 32)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1850, file: !397, line: 586, baseType: !1370, size: 64, offset: 64)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1850, file: !397, line: 589, baseType: !1370, size: 64, offset: 128)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1850, file: !397, line: 592, baseType: !1370, size: 64, offset: 192)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1850, file: !397, line: 595, baseType: !1370, size: 64, offset: 256)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1841, file: !397, line: 616, baseType: !1691, size: 64, offset: 512)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1703, file: !397, line: 754, baseType: !1859, size: 512)
!1859 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !397, line: 622, size: 512, elements: !1860)
!1860 = !{!1861, !1862, !1863, !1864}
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1859, file: !397, line: 624, baseType: !1767, size: 320)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1859, file: !397, line: 628, baseType: !1370, size: 64, offset: 320)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1859, file: !397, line: 632, baseType: !1370, size: 64, offset: 384)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1859, file: !397, line: 636, baseType: !1370, size: 64, offset: 448)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1703, file: !397, line: 755, baseType: !1866, size: 704)
!1866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !397, line: 642, size: 704, elements: !1867)
!1867 = !{!1868, !1869, !1870, !1871}
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1866, file: !397, line: 644, baseType: !1859, size: 512)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1866, file: !397, line: 648, baseType: !1370, size: 64, offset: 512)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1866, file: !397, line: 652, baseType: !1370, size: 64, offset: 576)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1866, file: !397, line: 653, baseType: !1370, size: 64, offset: 640)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1703, file: !397, line: 756, baseType: !1873, size: 448)
!1873 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !397, line: 663, size: 448, elements: !1874)
!1874 = !{!1875, !1876, !1877}
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1873, file: !397, line: 665, baseType: !1767, size: 320)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1873, file: !397, line: 668, baseType: !1370, size: 64, offset: 320)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1873, file: !397, line: 673, baseType: !1370, size: 64, offset: 384)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1703, file: !397, line: 757, baseType: !1879, size: 384)
!1879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !397, line: 694, size: 384, elements: !1880)
!1880 = !{!1881, !1882}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1879, file: !397, line: 696, baseType: !1767, size: 320)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1879, file: !397, line: 699, baseType: !1370, size: 64, offset: 320)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1703, file: !397, line: 758, baseType: !1884, size: 384)
!1884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !397, line: 681, size: 384, elements: !1885)
!1885 = !{!1886, !1887, !1888}
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1884, file: !397, line: 683, baseType: !1706, size: 256)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1884, file: !397, line: 686, baseType: !1370, size: 64, offset: 256)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1884, file: !397, line: 689, baseType: !1370, size: 64, offset: 320)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1703, file: !397, line: 759, baseType: !1890, size: 384)
!1890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !397, line: 707, size: 384, elements: !1891)
!1891 = !{!1892, !1893, !1894}
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1890, file: !397, line: 709, baseType: !1706, size: 256)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1890, file: !397, line: 712, baseType: !1370, size: 64, offset: 256)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1890, file: !397, line: 712, baseType: !1370, size: 64, offset: 320)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1703, file: !397, line: 760, baseType: !1896, size: 320)
!1896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !397, line: 718, size: 320, elements: !1897)
!1897 = !{!1898, !1899}
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1896, file: !397, line: 720, baseType: !1706, size: 256)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1896, file: !397, line: 723, baseType: !1370, size: 64, offset: 256)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1698, file: !397, line: 138, baseType: !1697, size: 64, offset: 64)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1698, file: !397, line: 139, baseType: !1697, size: 64, offset: 128)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1693, file: !397, line: 146, baseType: !1696, size: 64, offset: 64)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1693, file: !397, line: 152, baseType: !1691, size: 64, offset: 128)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1688, file: !343, line: 130, baseType: !1548, size: 64)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1683, file: !343, line: 134, baseType: !1654, size: 64, offset: 192)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1683, file: !343, line: 137, baseType: !1370, size: 64, offset: 256)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1683, file: !343, line: 138, baseType: !1498, size: 32, offset: 320)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1683, file: !343, line: 142, baseType: !7, size: 32, offset: 352)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1683, file: !343, line: 144, baseType: !1467, size: 32, offset: 384)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1683, file: !343, line: 145, baseType: !1467, size: 32, offset: 416)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1683, file: !343, line: 146, baseType: !1912, size: 64, offset: 448)
!1912 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !343, line: 119, baseType: !1426)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1666, file: !343, line: 220, baseType: !1669, size: 64, offset: 64)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1666, file: !343, line: 223, baseType: !1654, size: 64, offset: 128)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1666, file: !343, line: 226, baseType: !1916, size: 64, offset: 192)
!1916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1917, size: 64)
!1917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 100, size: 1216, elements: !1918)
!1918 = !{!1919, !1920, !1921, !1922, !1923, !1928, !1929, !1930, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1961, !1969, !1970}
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1917, file: !330, line: 102, baseType: !1467, size: 32)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1917, file: !330, line: 105, baseType: !7, size: 32, offset: 32)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1917, file: !330, line: 108, baseType: !1665, size: 64, offset: 64)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1917, file: !330, line: 111, baseType: !1665, size: 64, offset: 128)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1917, file: !330, line: 114, baseType: !1924, size: 64, offset: 192)
!1924 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !330, line: 41, size: 64, elements: !1925)
!1925 = !{!1926, !1927}
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1924, file: !330, line: 42, baseType: !329, size: 32)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1924, file: !330, line: 43, baseType: !7, size: 32, offset: 32)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1917, file: !330, line: 117, baseType: !7, size: 32, offset: 256)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1917, file: !330, line: 120, baseType: !7, size: 32, offset: 288)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1917, file: !330, line: 123, baseType: !1931, size: 64, offset: 320)
!1931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1932, size: 64)
!1932 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !330, line: 87, baseType: !1933)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !330, line: 87, size: 128, elements: !1934)
!1934 = !{!1935}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1933, file: !330, line: 87, baseType: !1936, size: 128)
!1936 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !330, line: 85, baseType: !1937)
!1937 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !330, line: 85, size: 128, elements: !1938)
!1938 = !{!1939, !1940, !1941}
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1937, file: !330, line: 85, baseType: !7, size: 32)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1937, file: !330, line: 85, baseType: !7, size: 32, offset: 32)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1937, file: !330, line: 85, baseType: !1942, size: 64, offset: 64)
!1942 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1943, size: 64, elements: !1471)
!1943 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !330, line: 84, baseType: !1916)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1917, file: !330, line: 126, baseType: !1916, size: 64, offset: 384)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1917, file: !330, line: 129, baseType: !1916, size: 64, offset: 448)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1917, file: !330, line: 132, baseType: !1654, size: 64, offset: 512)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1917, file: !330, line: 139, baseType: !1370, size: 64, offset: 576)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1917, file: !330, line: 143, baseType: !1419, size: 128, offset: 640)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1917, file: !330, line: 146, baseType: !1419, size: 128, offset: 768)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1917, file: !330, line: 148, baseType: !1490, size: 8, offset: 896)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1917, file: !330, line: 149, baseType: !1490, size: 8, offset: 904)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1917, file: !330, line: 153, baseType: !338, size: 32, offset: 928)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1917, file: !330, line: 156, baseType: !1954, size: 64, offset: 960)
!1954 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1955, size: 64)
!1955 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !330, line: 48, size: 320, elements: !1956)
!1956 = !{!1957, !1958, !1959, !1960}
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1955, file: !330, line: 50, baseType: !1701, size: 64)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1955, file: !330, line: 59, baseType: !1419, size: 128, offset: 64)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1955, file: !330, line: 64, baseType: !1490, size: 8, offset: 192)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1955, file: !330, line: 67, baseType: !1954, size: 64, offset: 256)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1917, file: !330, line: 159, baseType: !1962, size: 64, offset: 1024)
!1962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1963, size: 64)
!1963 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !330, line: 72, size: 256, elements: !1964)
!1964 = !{!1965, !1966, !1967, !1968}
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1963, file: !330, line: 74, baseType: !1682, size: 64)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1963, file: !330, line: 77, baseType: !1962, size: 64, offset: 64)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1963, file: !330, line: 78, baseType: !1962, size: 64, offset: 128)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1963, file: !330, line: 81, baseType: !1962, size: 64, offset: 192)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1917, file: !330, line: 162, baseType: !1490, size: 8, offset: 1088)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1917, file: !330, line: 166, baseType: !1370, size: 64, offset: 1152)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1666, file: !343, line: 229, baseType: !1972, size: 128, offset: 256)
!1972 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1973, size: 128, elements: !1618)
!1973 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1974, size: 64)
!1974 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !343, line: 229, flags: DIFlagFwdDecl)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1666, file: !343, line: 232, baseType: !1665, size: 64, offset: 384)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1666, file: !343, line: 233, baseType: !1665, size: 64, offset: 448)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1666, file: !343, line: 238, baseType: !1978, size: 64, offset: 512)
!1978 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !343, line: 235, size: 64, elements: !1979)
!1979 = !{!1980, !1986}
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1978, file: !343, line: 236, baseType: !1981, size: 64)
!1981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1982, size: 64)
!1982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !343, line: 273, size: 128, elements: !1983)
!1983 = !{!1984, !1985}
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1982, file: !343, line: 275, baseType: !1691, size: 64)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1982, file: !343, line: 278, baseType: !1691, size: 64, offset: 64)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1978, file: !343, line: 237, baseType: !1987, size: 64)
!1987 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1988, size: 64)
!1988 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !343, line: 259, size: 320, elements: !1989)
!1989 = !{!1990, !1991, !1992, !1993, !1994}
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1988, file: !343, line: 261, baseType: !1548, size: 64)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1988, file: !343, line: 262, baseType: !1548, size: 64, offset: 64)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1988, file: !343, line: 266, baseType: !1548, size: 64, offset: 128)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1988, file: !343, line: 267, baseType: !1548, size: 64, offset: 192)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1988, file: !343, line: 270, baseType: !1467, size: 32, offset: 256)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1666, file: !343, line: 241, baseType: !1912, size: 64, offset: 576)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1666, file: !343, line: 244, baseType: !1467, size: 32, offset: 640)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1666, file: !343, line: 247, baseType: !1467, size: 32, offset: 672)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1666, file: !343, line: 250, baseType: !1467, size: 32, offset: 704)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1666, file: !343, line: 253, baseType: !1467, size: 32, offset: 736)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1666, file: !343, line: 256, baseType: !1467, size: 32, offset: 768)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1569, file: !1551, line: 179, baseType: !2002, size: 64)
!2002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2003, size: 64)
!2003 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1551, line: 150, baseType: !2004)
!2004 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1551, line: 142, size: 320, elements: !2005)
!2005 = !{!2006, !2007, !2008, !2009, !2012, !2013}
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2004, file: !1551, line: 144, baseType: !1370, size: 64)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2004, file: !1551, line: 145, baseType: !1548, size: 64, offset: 64)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2004, file: !1551, line: 146, baseType: !1548, size: 64, offset: 128)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2004, file: !1551, line: 147, baseType: !2010, size: 32, offset: 192)
!2010 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2011, line: 31, baseType: !1467)
!2011 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2004, file: !1551, line: 148, baseType: !7, size: 32, offset: 224)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2004, file: !1551, line: 149, baseType: !1490, size: 8, offset: 256)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1569, file: !1551, line: 180, baseType: !2015, size: 64)
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2016, size: 64)
!2016 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1551, line: 162, baseType: !2017)
!2017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1551, line: 159, size: 128, elements: !2018)
!2018 = !{!2019, !2020}
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2017, file: !1551, line: 160, baseType: !1370, size: 64)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2017, file: !1551, line: 161, baseType: !1426, size: 64, offset: 64)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1569, file: !1551, line: 181, baseType: !2022, size: 64)
!2022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2023, size: 64)
!2023 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1551, line: 181, flags: DIFlagFwdDecl)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1564, file: !1551, line: 317, baseType: !2025, size: 64)
!2025 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1426, size: 64, elements: !1471)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1564, file: !1551, line: 318, baseType: !2027, size: 320)
!2027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1551, line: 188, size: 320, elements: !2028)
!2028 = !{!2029, !2031, !2088}
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2027, file: !1551, line: 190, baseType: !2030, size: 192)
!2030 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1568, size: 192, elements: !1444)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2027, file: !1551, line: 193, baseType: !2032, size: 64, offset: 192)
!2032 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2033, size: 64)
!2033 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1551, line: 206, size: 320, elements: !2034)
!2034 = !{!2035, !2073, !2074, !2075, !2087}
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2033, file: !1551, line: 208, baseType: !2036, size: 64)
!2036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2037, size: 64)
!2037 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1371, line: 62, baseType: !2038)
!2038 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2039, line: 538, size: 256, elements: !2040)
!2039 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2040 = !{!2041, !2045, !2051, !2064}
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2038, file: !2039, line: 539, baseType: !2042, size: 32)
!2042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2039, line: 482, size: 32, elements: !2043)
!2043 = !{!2044}
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2042, file: !2039, line: 484, baseType: !7, size: 32)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2038, file: !2039, line: 540, baseType: !2046, size: 192)
!2046 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2039, line: 488, size: 192, elements: !2047)
!2047 = !{!2048, !2049, !2050}
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2046, file: !2039, line: 489, baseType: !2042, size: 32)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2046, file: !2039, line: 492, baseType: !1574, size: 64, offset: 64)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2046, file: !2039, line: 496, baseType: !1370, size: 64, offset: 128)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2038, file: !2039, line: 541, baseType: !2052, size: 256)
!2052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2039, line: 504, size: 256, elements: !2053)
!2053 = !{!2054, !2055, !2062, !2063}
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2052, file: !2039, line: 505, baseType: !2042, size: 32)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2052, file: !2039, line: 509, baseType: !2056, size: 64, offset: 64)
!2056 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2039, line: 501, baseType: !2057)
!2057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2058, size: 64)
!2058 = !DISubroutineType(types: !2059)
!2059 = !{null, !2060}
!2060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2061, size: 64)
!2061 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2052, file: !2039, line: 510, baseType: !2060, size: 64, offset: 128)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2052, file: !2039, line: 513, baseType: !2036, size: 64, offset: 192)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2038, file: !2039, line: 542, baseType: !2065, size: 128)
!2065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2039, line: 530, size: 128, elements: !2066)
!2066 = !{!2067, !2068}
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2065, file: !2039, line: 531, baseType: !2042, size: 32)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2065, file: !2039, line: 534, baseType: !2069, size: 64, offset: 64)
!2069 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2039, line: 525, baseType: !2070)
!2070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2071, size: 64)
!2071 = !DISubroutineType(types: !2072)
!2072 = !{!1490, !1370, !1574, !1424, !1424}
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2033, file: !1551, line: 211, baseType: !7, size: 32, offset: 64)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2033, file: !1551, line: 214, baseType: !1426, size: 64, offset: 128)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2033, file: !1551, line: 224, baseType: !2076, size: 64, offset: 192)
!2076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2077, size: 64)
!2077 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1551, line: 202, baseType: !2078)
!2078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1551, line: 202, size: 128, elements: !2079)
!2079 = !{!2080}
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2078, file: !1551, line: 202, baseType: !2081, size: 128)
!2081 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1551, line: 200, baseType: !2082)
!2082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1551, line: 200, size: 128, elements: !2083)
!2083 = !{!2084, !2085, !2086}
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2082, file: !1551, line: 200, baseType: !7, size: 32)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2082, file: !1551, line: 200, baseType: !7, size: 32, offset: 32)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2082, file: !1551, line: 200, baseType: !1584, size: 64, offset: 64)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2033, file: !1551, line: 234, baseType: !2076, size: 64, offset: 256)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2027, file: !1551, line: 197, baseType: !1426, size: 64, offset: 256)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1564, file: !1551, line: 319, baseType: !1433, size: 256)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1564, file: !1551, line: 320, baseType: !1452, size: 192)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1373, file: !135, line: 3384, baseType: !2092, size: 1472)
!2092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2093)
!2093 = !{!2094, !2115, !2116, !2117, !2118}
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2092, file: !135, line: 3115, baseType: !2095, size: 1216)
!2095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2096)
!2096 = !{!2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114}
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2095, file: !135, line: 2985, baseType: !1544, size: 960)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2095, file: !135, line: 2986, baseType: !1370, size: 64, offset: 960)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2095, file: !135, line: 2987, baseType: !1370, size: 64, offset: 1024)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2095, file: !135, line: 2988, baseType: !1370, size: 64, offset: 1088)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2095, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2095, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2095, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2095, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2095, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2095, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2095, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2095, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2095, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2095, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2095, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2095, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2095, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2095, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2092, file: !135, line: 3117, baseType: !1370, size: 64, offset: 1216)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2092, file: !135, line: 3119, baseType: !1370, size: 64, offset: 1280)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2092, file: !135, line: 3121, baseType: !1370, size: 64, offset: 1344)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2092, file: !135, line: 3123, baseType: !1370, size: 64, offset: 1408)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1373, file: !135, line: 3385, baseType: !2120, size: 1088)
!2120 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2121)
!2121 = !{!2122, !2123, !2124}
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2120, file: !135, line: 2875, baseType: !1544, size: 960)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2120, file: !135, line: 2876, baseType: !1548, size: 64, offset: 960)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2120, file: !135, line: 2877, baseType: !2125, size: 64, offset: 1024)
!2125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2126, size: 64)
!2126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !391, line: 172, size: 128, elements: !2127)
!2127 = !{!2128, !2129, !2130, !2131, !2132, !2133, !2134}
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2126, file: !391, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2126, file: !391, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2126, file: !391, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2126, file: !391, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2126, file: !391, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2126, file: !391, line: 195, baseType: !7, size: 32, offset: 32)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2126, file: !391, line: 199, baseType: !1370, size: 64, offset: 64)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1373, file: !135, line: 3386, baseType: !2095, size: 1216)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1373, file: !135, line: 3387, baseType: !2137, size: 1280)
!2137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2138)
!2138 = !{!2139, !2140}
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2137, file: !135, line: 3094, baseType: !2095, size: 1216)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2137, file: !135, line: 3095, baseType: !2125, size: 64, offset: 1216)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1373, file: !135, line: 3388, baseType: !2142, size: 1216)
!2142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2143)
!2143 = !{!2144, !2145, !2146, !2147, !2148, !2149}
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2142, file: !135, line: 2825, baseType: !1506, size: 896)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2142, file: !135, line: 2827, baseType: !1370, size: 64, offset: 896)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2142, file: !135, line: 2828, baseType: !1370, size: 64, offset: 960)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2142, file: !135, line: 2829, baseType: !1370, size: 64, offset: 1024)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2142, file: !135, line: 2830, baseType: !1370, size: 64, offset: 1088)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2142, file: !135, line: 2831, baseType: !1370, size: 64, offset: 1152)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1373, file: !135, line: 3389, baseType: !2151, size: 1024)
!2151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2152)
!2152 = !{!2153, !2154, !2155}
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2151, file: !135, line: 2851, baseType: !1544, size: 960)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2151, file: !135, line: 2852, baseType: !1467, size: 32, offset: 960)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2151, file: !135, line: 2853, baseType: !1467, size: 32, offset: 992)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1373, file: !135, line: 3390, baseType: !2157, size: 1024)
!2157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2158)
!2158 = !{!2159, !2160}
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2157, file: !135, line: 2858, baseType: !1544, size: 960)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2157, file: !135, line: 2859, baseType: !2125, size: 64, offset: 960)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1373, file: !135, line: 3391, baseType: !2162, size: 960)
!2162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2163)
!2163 = !{!2164}
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2162, file: !135, line: 2863, baseType: !1544, size: 960)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1373, file: !135, line: 3392, baseType: !2166, size: 1472)
!2166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2167)
!2167 = !{!2168}
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2166, file: !135, line: 3305, baseType: !2092, size: 1472)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1373, file: !135, line: 3393, baseType: !2170, size: 1792)
!2170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2171)
!2171 = !{!2172, !2173, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409}
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2170, file: !135, line: 3249, baseType: !2092, size: 1472)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2170, file: !135, line: 3251, baseType: !2174, size: 64, offset: 1472)
!2174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2175, size: 64)
!2175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2176, line: 463, size: 1152, elements: !2177)
!2176 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2177 = !{!2178, !2181, !2212, !2213, !2325, !2333, !2334, !2335, !2336, !2337, !2338, !2362, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388}
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2175, file: !2176, line: 464, baseType: !2179, size: 64)
!2179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2180, size: 64)
!2180 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2176, line: 464, flags: DIFlagFwdDecl)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2175, file: !2176, line: 467, baseType: !2182, size: 64, offset: 64)
!2182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2183, size: 64)
!2183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !343, line: 374, size: 640, elements: !2184)
!2184 = !{!2185, !2187, !2188, !2201, !2202, !2203, !2204, !2205, !2206, !2208, !2210, !2211}
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2183, file: !343, line: 377, baseType: !2186, size: 64)
!2186 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1371, line: 111, baseType: !1665)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2183, file: !343, line: 378, baseType: !2186, size: 64, offset: 64)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2183, file: !343, line: 381, baseType: !2189, size: 64, offset: 128)
!2189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2190, size: 64)
!2190 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !343, line: 282, baseType: !2191)
!2191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !343, line: 282, size: 128, elements: !2192)
!2192 = !{!2193}
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2191, file: !343, line: 282, baseType: !2194, size: 128)
!2194 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !343, line: 281, baseType: !2195)
!2195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !343, line: 281, size: 128, elements: !2196)
!2196 = !{!2197, !2198, !2199}
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2195, file: !343, line: 281, baseType: !7, size: 32)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2195, file: !343, line: 281, baseType: !7, size: 32, offset: 32)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2195, file: !343, line: 281, baseType: !2200, size: 64, offset: 64)
!2200 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2186, size: 64, elements: !1471)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2183, file: !343, line: 384, baseType: !1467, size: 32, offset: 192)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2183, file: !343, line: 387, baseType: !1467, size: 32, offset: 224)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2183, file: !343, line: 390, baseType: !1467, size: 32, offset: 256)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2183, file: !343, line: 394, baseType: !2189, size: 64, offset: 320)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2183, file: !343, line: 396, baseType: !342, size: 32, offset: 384)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2183, file: !343, line: 399, baseType: !2207, size: 64, offset: 416)
!2207 = !DICompositeType(tag: DW_TAG_array_type, baseType: !348, size: 64, elements: !1618)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2183, file: !343, line: 402, baseType: !2209, size: 64, offset: 480)
!2209 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1618)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2183, file: !343, line: 406, baseType: !1467, size: 32, offset: 544)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2183, file: !343, line: 409, baseType: !1467, size: 32, offset: 576)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2175, file: !2176, line: 470, baseType: !1692, size: 64, offset: 128)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2175, file: !2176, line: 473, baseType: !2214, size: 64, offset: 192)
!2214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2215, size: 64)
!2215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !391, line: 39, size: 1152, elements: !2216)
!2216 = !{!2217, !2264, !2277, !2289, !2290, !2302, !2303, !2307, !2308, !2309, !2310, !2311}
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2215, file: !391, line: 41, baseType: !2218, size: 64)
!2218 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !485, line: 144, baseType: !2219)
!2219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2220, size: 64)
!2220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !485, line: 100, size: 896, elements: !2221)
!2221 = !{!2222, !2228, !2233, !2238, !2240, !2241, !2242, !2243, !2244, !2245, !2250, !2252, !2253, !2258, !2263}
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2220, file: !485, line: 102, baseType: !2223, size: 64)
!2223 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !485, line: 52, baseType: !2224)
!2224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2225, size: 64)
!2225 = !DISubroutineType(types: !2226)
!2226 = !{!2227, !2060}
!2227 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !485, line: 47, baseType: !7)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2220, file: !485, line: 105, baseType: !2229, size: 64, offset: 64)
!2229 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !485, line: 59, baseType: !2230)
!2230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2231, size: 64)
!2231 = !DISubroutineType(types: !2232)
!2232 = !{!1467, !2060, !2060}
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2220, file: !485, line: 108, baseType: !2234, size: 64, offset: 128)
!2234 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !485, line: 63, baseType: !2235)
!2235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2236, size: 64)
!2236 = !DISubroutineType(types: !2237)
!2237 = !{null, !1654}
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2220, file: !485, line: 111, baseType: !2239, size: 64, offset: 192)
!2239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1654, size: 64)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2220, file: !485, line: 114, baseType: !1846, size: 64, offset: 256)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2220, file: !485, line: 117, baseType: !1846, size: 64, offset: 320)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2220, file: !485, line: 120, baseType: !1846, size: 64, offset: 384)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2220, file: !485, line: 124, baseType: !7, size: 32, offset: 448)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2220, file: !485, line: 128, baseType: !7, size: 32, offset: 480)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2220, file: !485, line: 131, baseType: !2246, size: 64, offset: 512)
!2246 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !485, line: 75, baseType: !2247)
!2247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2248, size: 64)
!2248 = !DISubroutineType(types: !2249)
!2249 = !{!1654, !1846, !1846}
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2220, file: !485, line: 132, baseType: !2251, size: 64, offset: 576)
!2251 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !485, line: 78, baseType: !2235)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2220, file: !485, line: 135, baseType: !1654, size: 64, offset: 640)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2220, file: !485, line: 136, baseType: !2254, size: 64, offset: 704)
!2254 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !485, line: 82, baseType: !2255)
!2255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2256, size: 64)
!2256 = !DISubroutineType(types: !2257)
!2257 = !{!1654, !1654, !1846, !1846}
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2220, file: !485, line: 137, baseType: !2259, size: 64, offset: 768)
!2259 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !485, line: 83, baseType: !2260)
!2260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2261, size: 64)
!2261 = !DISubroutineType(types: !2262)
!2262 = !{null, !1654, !1654}
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2220, file: !485, line: 141, baseType: !7, size: 32, offset: 832)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2215, file: !391, line: 48, baseType: !2265, size: 64, offset: 64)
!2265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2266, size: 64)
!2266 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !397, line: 35, baseType: !2267)
!2267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !397, line: 35, size: 128, elements: !2268)
!2268 = !{!2269}
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2267, file: !397, line: 35, baseType: !2270, size: 128)
!2270 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !397, line: 33, baseType: !2271)
!2271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !397, line: 33, size: 128, elements: !2272)
!2272 = !{!2273, !2274, !2275}
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2271, file: !397, line: 33, baseType: !7, size: 32)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2271, file: !397, line: 33, baseType: !7, size: 32, offset: 32)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2271, file: !397, line: 33, baseType: !2276, size: 64, offset: 64)
!2276 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1701, size: 64, elements: !1471)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2215, file: !391, line: 51, baseType: !2278, size: 64, offset: 128)
!2278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2279, size: 64)
!2279 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2280)
!2280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2281)
!2281 = !{!2282}
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2280, file: !135, line: 183, baseType: !2283, size: 128)
!2283 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2284)
!2284 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2285)
!2285 = !{!2286, !2287, !2288}
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2284, file: !135, line: 182, baseType: !7, size: 32)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2284, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2284, file: !135, line: 182, baseType: !1754, size: 64, offset: 64)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2215, file: !391, line: 54, baseType: !1370, size: 64, offset: 192)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2215, file: !391, line: 57, baseType: !2291, size: 128, offset: 256)
!2291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2292, line: 31, size: 128, elements: !2293)
!2292 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2293 = !{!2294, !2295, !2296, !2297, !2298, !2299, !2300}
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2291, file: !2292, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2291, file: !2292, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2291, file: !2292, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2291, file: !2292, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2291, file: !2292, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2291, file: !2292, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2291, file: !2292, line: 56, baseType: !2301, size: 64, offset: 64)
!2301 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1371, line: 47, baseType: !1602)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2215, file: !391, line: 60, baseType: !2291, size: 128, offset: 384)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2215, file: !391, line: 64, baseType: !2304, size: 64, offset: 512)
!2304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2305, size: 64)
!2305 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2306, line: 33, flags: DIFlagFwdDecl)
!2306 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2215, file: !391, line: 67, baseType: !1370, size: 64, offset: 576)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2215, file: !391, line: 73, baseType: !2218, size: 64, offset: 640)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2215, file: !391, line: 77, baseType: !2301, size: 64, offset: 704)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2215, file: !391, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2215, file: !391, line: 82, baseType: !2312, size: 320, offset: 832)
!2312 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !624, line: 62, size: 320, elements: !2313)
!2313 = !{!2314, !2320, !2321, !2322, !2323, !2324}
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2312, file: !624, line: 63, baseType: !2315, size: 64)
!2315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2316, size: 64)
!2316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !624, line: 56, size: 128, elements: !2317)
!2317 = !{!2318, !2319}
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2316, file: !624, line: 57, baseType: !2315, size: 64)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2316, file: !624, line: 58, baseType: !1469, size: 8, offset: 64)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2312, file: !624, line: 64, baseType: !7, size: 32, offset: 64)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2312, file: !624, line: 66, baseType: !7, size: 32, offset: 96)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2312, file: !624, line: 68, baseType: !1490, size: 8, offset: 128)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2312, file: !624, line: 70, baseType: !1730, size: 64, offset: 192)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2312, file: !624, line: 71, baseType: !1737, size: 64, offset: 256)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2175, file: !2176, line: 476, baseType: !2326, size: 64, offset: 256)
!2326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2327, size: 64)
!2327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !330, line: 187, size: 256, elements: !2328)
!2328 = !{!2329, !2330, !2331, !2332}
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2327, file: !330, line: 189, baseType: !1467, size: 32)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !2327, file: !330, line: 192, baseType: !1931, size: 64, offset: 64)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2327, file: !330, line: 197, baseType: !2218, size: 64, offset: 128)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !2327, file: !330, line: 200, baseType: !1916, size: 64, offset: 192)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2175, file: !2176, line: 479, baseType: !2218, size: 64, offset: 320)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2175, file: !2176, line: 484, baseType: !1370, size: 64, offset: 384)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2175, file: !2176, line: 488, baseType: !1370, size: 64, offset: 448)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2175, file: !2176, line: 493, baseType: !1370, size: 64, offset: 512)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2175, file: !2176, line: 496, baseType: !1370, size: 64, offset: 576)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2175, file: !2176, line: 501, baseType: !2339, size: 64, offset: 640)
!2339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2340, size: 64)
!2340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !354, line: 2355, size: 576, elements: !2341)
!2341 = !{!2342, !2345, !2346, !2347, !2348, !2350, !2351, !2356, !2357, !2358, !2359, !2360, !2361}
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2340, file: !354, line: 2356, baseType: !2343, size: 64)
!2343 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2344, size: 64)
!2344 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !354, line: 2356, flags: DIFlagFwdDecl)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2340, file: !354, line: 2357, baseType: !1574, size: 64, offset: 64)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2340, file: !354, line: 2358, baseType: !1467, size: 32, offset: 128)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2340, file: !354, line: 2359, baseType: !1467, size: 32, offset: 160)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2340, file: !354, line: 2360, baseType: !2349, size: 128, offset: 192)
!2349 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1467, size: 128, elements: !1643)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2340, file: !354, line: 2364, baseType: !1467, size: 32, offset: 320)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2340, file: !354, line: 2367, baseType: !2352, size: 128, offset: 384)
!2352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !354, line: 2349, size: 128, elements: !2353)
!2353 = !{!2354, !2355}
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2352, file: !354, line: 2351, baseType: !1548, size: 64)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2352, file: !354, line: 2352, baseType: !1426, size: 64, offset: 64)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2340, file: !354, line: 2371, baseType: !353, size: 32, offset: 512)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2340, file: !354, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2340, file: !354, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2340, file: !354, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2340, file: !354, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2340, file: !354, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2175, file: !2176, line: 504, baseType: !2363, size: 64, offset: 704)
!2363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2364, size: 64)
!2364 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2176, line: 504, flags: DIFlagFwdDecl)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2175, file: !2176, line: 507, baseType: !2218, size: 64, offset: 768)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2175, file: !2176, line: 510, baseType: !1467, size: 32, offset: 832)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2175, file: !2176, line: 513, baseType: !1467, size: 32, offset: 864)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2175, file: !2176, line: 516, baseType: !1498, size: 32, offset: 896)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2175, file: !2176, line: 519, baseType: !1498, size: 32, offset: 928)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2175, file: !2176, line: 522, baseType: !7, size: 32, offset: 960)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2175, file: !2176, line: 523, baseType: !7, size: 32, offset: 992)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2175, file: !2176, line: 528, baseType: !1574, size: 64, offset: 1024)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2175, file: !2176, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2175, file: !2176, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2175, file: !2176, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2175, file: !2176, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2175, file: !2176, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2175, file: !2176, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2175, file: !2176, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2175, file: !2176, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2175, file: !2176, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2175, file: !2176, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2175, file: !2176, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2175, file: !2176, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2175, file: !2176, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2175, file: !2176, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2175, file: !2176, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2175, file: !2176, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2170, file: !135, line: 3254, baseType: !1370, size: 64, offset: 1536)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2170, file: !135, line: 3257, baseType: !1370, size: 64, offset: 1600)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2170, file: !135, line: 3258, baseType: !1370, size: 64, offset: 1664)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2170, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2170, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2170, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2170, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2170, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2170, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2170, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2170, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2170, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2170, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2170, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2170, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2170, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2170, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2170, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2170, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2170, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2170, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1373, file: !135, line: 3394, baseType: !2411, size: 1344)
!2411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2412)
!2412 = !{!2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454}
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2411, file: !135, line: 2280, baseType: !1409, size: 192)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2411, file: !135, line: 2281, baseType: !1370, size: 64, offset: 192)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2411, file: !135, line: 2282, baseType: !1370, size: 64, offset: 256)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2411, file: !135, line: 2283, baseType: !1370, size: 64, offset: 320)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2411, file: !135, line: 2284, baseType: !1370, size: 64, offset: 384)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2411, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2411, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2411, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2411, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2411, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2411, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2411, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2411, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2411, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2411, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2411, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2411, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2411, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2411, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2411, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2411, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2411, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2411, file: !135, line: 2306, baseType: !2010, size: 32, offset: 544)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2411, file: !135, line: 2307, baseType: !1370, size: 64, offset: 576)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2411, file: !135, line: 2308, baseType: !1370, size: 64, offset: 640)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2411, file: !135, line: 2314, baseType: !2439, size: 64, offset: 704)
!2439 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2440)
!2440 = !{!2441, !2442, !2443}
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2439, file: !135, line: 2310, baseType: !1467, size: 32)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2439, file: !135, line: 2311, baseType: !1574, size: 64)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2439, file: !135, line: 2312, baseType: !2444, size: 64)
!2444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2445, size: 64)
!2445 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2411, file: !135, line: 2315, baseType: !1370, size: 64, offset: 768)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2411, file: !135, line: 2316, baseType: !1370, size: 64, offset: 832)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2411, file: !135, line: 2317, baseType: !1370, size: 64, offset: 896)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2411, file: !135, line: 2318, baseType: !1370, size: 64, offset: 960)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2411, file: !135, line: 2319, baseType: !1370, size: 64, offset: 1024)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2411, file: !135, line: 2320, baseType: !1370, size: 64, offset: 1088)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2411, file: !135, line: 2321, baseType: !1370, size: 64, offset: 1152)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2411, file: !135, line: 2322, baseType: !1370, size: 64, offset: 1216)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2411, file: !135, line: 2324, baseType: !2455, size: 64, offset: 1280)
!2455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2456, size: 64)
!2456 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1373, file: !135, line: 3395, baseType: !2458, size: 320)
!2458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2459)
!2459 = !{!2460, !2461, !2462}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2458, file: !135, line: 1470, baseType: !1409, size: 192)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2458, file: !135, line: 1471, baseType: !1370, size: 64, offset: 192)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2458, file: !135, line: 1472, baseType: !1370, size: 64, offset: 256)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1373, file: !135, line: 3396, baseType: !2464, size: 320)
!2464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2465)
!2465 = !{!2466, !2467, !2468}
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2464, file: !135, line: 1483, baseType: !1409, size: 192)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2464, file: !135, line: 1484, baseType: !1467, size: 32, offset: 192)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2464, file: !135, line: 1485, baseType: !1754, size: 64, offset: 256)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1373, file: !135, line: 3397, baseType: !2470, size: 384)
!2470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2471)
!2471 = !{!2472, !2473, !2474, !2475}
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2470, file: !135, line: 1830, baseType: !1409, size: 192)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2470, file: !135, line: 1831, baseType: !1498, size: 32, offset: 192)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2470, file: !135, line: 1832, baseType: !1370, size: 64, offset: 256)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2470, file: !135, line: 1835, baseType: !1754, size: 64, offset: 320)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1373, file: !135, line: 3398, baseType: !2477, size: 704)
!2477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2478)
!2478 = !{!2479, !2480, !2481, !2482, !2483, !2488}
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2477, file: !135, line: 1899, baseType: !1409, size: 192)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2477, file: !135, line: 1902, baseType: !1370, size: 64, offset: 192)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2477, file: !135, line: 1905, baseType: !1701, size: 64, offset: 256)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2477, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2477, file: !135, line: 1911, baseType: !2484, size: 64, offset: 384)
!2484 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2485, size: 64)
!2485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !391, line: 117, size: 128, elements: !2486)
!2486 = !{!2487}
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2485, file: !391, line: 120, baseType: !2291, size: 128)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2477, file: !135, line: 1914, baseType: !1742, size: 256, offset: 448)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1373, file: !135, line: 3399, baseType: !2490, size: 704)
!2490 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2491)
!2491 = !{!2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502}
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2490, file: !135, line: 2009, baseType: !1409, size: 192)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2490, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2490, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2490, file: !135, line: 2014, baseType: !1498, size: 32, offset: 224)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2490, file: !135, line: 2016, baseType: !1370, size: 64, offset: 256)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2490, file: !135, line: 2017, baseType: !2278, size: 64, offset: 320)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2490, file: !135, line: 2019, baseType: !1370, size: 64, offset: 384)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2490, file: !135, line: 2020, baseType: !1370, size: 64, offset: 448)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2490, file: !135, line: 2021, baseType: !1370, size: 64, offset: 512)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2490, file: !135, line: 2022, baseType: !1370, size: 64, offset: 576)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2490, file: !135, line: 2023, baseType: !1370, size: 64, offset: 640)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1373, file: !135, line: 3400, baseType: !2504, size: 832)
!2504 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2505)
!2505 = !{!2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515}
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2504, file: !135, line: 2431, baseType: !1409, size: 192)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2504, file: !135, line: 2433, baseType: !1370, size: 64, offset: 192)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2504, file: !135, line: 2434, baseType: !1370, size: 64, offset: 256)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2504, file: !135, line: 2435, baseType: !1370, size: 64, offset: 320)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2504, file: !135, line: 2436, baseType: !1370, size: 64, offset: 384)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2504, file: !135, line: 2437, baseType: !2278, size: 64, offset: 448)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2504, file: !135, line: 2438, baseType: !1370, size: 64, offset: 512)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2504, file: !135, line: 2440, baseType: !1370, size: 64, offset: 576)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2504, file: !135, line: 2441, baseType: !1370, size: 64, offset: 640)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2504, file: !135, line: 2443, baseType: !2516, size: 128, offset: 704)
!2516 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2517)
!2517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2518)
!2518 = !{!2519}
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2517, file: !135, line: 182, baseType: !2283, size: 128)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1373, file: !135, line: 3401, baseType: !2521, size: 320)
!2521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2522)
!2522 = !{!2523, !2524, !2531}
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2521, file: !135, line: 3329, baseType: !1409, size: 192)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2521, file: !135, line: 3330, baseType: !2525, size: 64, offset: 192)
!2525 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2526, size: 64)
!2526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2527)
!2527 = !{!2528, !2529, !2530}
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2526, file: !135, line: 3322, baseType: !2525, size: 64)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2526, file: !135, line: 3323, baseType: !2525, size: 64, offset: 64)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2526, file: !135, line: 3324, baseType: !1370, size: 64, offset: 128)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2521, file: !135, line: 3331, baseType: !2525, size: 64, offset: 256)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1373, file: !135, line: 3402, baseType: !2533, size: 256)
!2533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2534)
!2534 = !{!2535, !2536}
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2533, file: !135, line: 1541, baseType: !1409, size: 192)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2533, file: !135, line: 1542, baseType: !2537, size: 64, offset: 192)
!2537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2538, size: 64)
!2538 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2539)
!2539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2540)
!2540 = !{!2541}
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2539, file: !135, line: 1538, baseType: !2542, size: 192)
!2542 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2543)
!2543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2544)
!2544 = !{!2545, !2546, !2547}
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2543, file: !135, line: 1537, baseType: !7, size: 32)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2543, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2543, file: !135, line: 1537, baseType: !2548, size: 128, offset: 64)
!2548 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2549, size: 128, elements: !1471)
!2549 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2550)
!2550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2551)
!2551 = !{!2552, !2553}
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2550, file: !135, line: 1533, baseType: !1370, size: 64)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2550, file: !135, line: 1534, baseType: !1370, size: 64, offset: 64)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1373, file: !135, line: 3403, baseType: !2555, size: 512)
!2555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2556)
!2556 = !{!2557, !2558, !2559, !2560, !2566, !2567, !2568}
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2555, file: !135, line: 1939, baseType: !1409, size: 192)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2555, file: !135, line: 1940, baseType: !1498, size: 32, offset: 192)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2555, file: !135, line: 1941, baseType: !358, size: 32, offset: 224)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2555, file: !135, line: 1946, baseType: !2561, size: 32, offset: 256)
!2561 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2562)
!2562 = !{!2563, !2564, !2565}
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2561, file: !135, line: 1943, baseType: !376, size: 32)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2561, file: !135, line: 1944, baseType: !383, size: 32)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2561, file: !135, line: 1945, baseType: !134, size: 32)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2555, file: !135, line: 1950, baseType: !1691, size: 64, offset: 320)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2555, file: !135, line: 1951, baseType: !1691, size: 64, offset: 384)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2555, file: !135, line: 1953, baseType: !1754, size: 64, offset: 448)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1373, file: !135, line: 3404, baseType: !2570, size: 1664)
!2570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2571)
!2571 = !{!2572, !2573}
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2570, file: !135, line: 3338, baseType: !1409, size: 192)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2570, file: !135, line: 3341, baseType: !2574, size: 1472, offset: 192)
!2574 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2575, line: 410, size: 1472, elements: !2576)
!2575 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2576 = !{!2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740}
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2574, file: !2575, line: 412, baseType: !1467, size: 32)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2574, file: !2575, line: 413, baseType: !1467, size: 32, offset: 32)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2574, file: !2575, line: 414, baseType: !1467, size: 32, offset: 64)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2574, file: !2575, line: 415, baseType: !1467, size: 32, offset: 96)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2574, file: !2575, line: 416, baseType: !1467, size: 32, offset: 128)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2574, file: !2575, line: 417, baseType: !1467, size: 32, offset: 160)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2574, file: !2575, line: 418, baseType: !1490, size: 8, offset: 192)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2574, file: !2575, line: 419, baseType: !1490, size: 8, offset: 200)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2574, file: !2575, line: 420, baseType: !2586, size: 8, offset: 208)
!2586 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2574, file: !2575, line: 421, baseType: !2586, size: 8, offset: 216)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2574, file: !2575, line: 422, baseType: !2586, size: 8, offset: 224)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2574, file: !2575, line: 423, baseType: !2586, size: 8, offset: 232)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2574, file: !2575, line: 424, baseType: !2586, size: 8, offset: 240)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2574, file: !2575, line: 425, baseType: !2586, size: 8, offset: 248)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2574, file: !2575, line: 426, baseType: !2586, size: 8, offset: 256)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2574, file: !2575, line: 427, baseType: !2586, size: 8, offset: 264)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2574, file: !2575, line: 428, baseType: !2586, size: 8, offset: 272)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2574, file: !2575, line: 429, baseType: !2586, size: 8, offset: 280)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2574, file: !2575, line: 430, baseType: !2586, size: 8, offset: 288)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2574, file: !2575, line: 431, baseType: !2586, size: 8, offset: 296)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2574, file: !2575, line: 432, baseType: !2586, size: 8, offset: 304)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2574, file: !2575, line: 433, baseType: !2586, size: 8, offset: 312)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2574, file: !2575, line: 434, baseType: !2586, size: 8, offset: 320)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2574, file: !2575, line: 435, baseType: !2586, size: 8, offset: 328)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2574, file: !2575, line: 436, baseType: !2586, size: 8, offset: 336)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2574, file: !2575, line: 437, baseType: !2586, size: 8, offset: 344)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2574, file: !2575, line: 438, baseType: !2586, size: 8, offset: 352)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2574, file: !2575, line: 439, baseType: !2586, size: 8, offset: 360)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2574, file: !2575, line: 440, baseType: !2586, size: 8, offset: 368)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2574, file: !2575, line: 441, baseType: !2586, size: 8, offset: 376)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2574, file: !2575, line: 442, baseType: !2586, size: 8, offset: 384)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2574, file: !2575, line: 443, baseType: !2586, size: 8, offset: 392)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2574, file: !2575, line: 444, baseType: !2586, size: 8, offset: 400)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2574, file: !2575, line: 445, baseType: !2586, size: 8, offset: 408)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2574, file: !2575, line: 446, baseType: !2586, size: 8, offset: 416)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2574, file: !2575, line: 447, baseType: !2586, size: 8, offset: 424)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2574, file: !2575, line: 448, baseType: !2586, size: 8, offset: 432)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2574, file: !2575, line: 449, baseType: !2586, size: 8, offset: 440)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2574, file: !2575, line: 450, baseType: !2586, size: 8, offset: 448)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2574, file: !2575, line: 451, baseType: !2586, size: 8, offset: 456)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2574, file: !2575, line: 452, baseType: !2586, size: 8, offset: 464)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2574, file: !2575, line: 453, baseType: !2586, size: 8, offset: 472)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2574, file: !2575, line: 454, baseType: !2586, size: 8, offset: 480)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2574, file: !2575, line: 455, baseType: !2586, size: 8, offset: 488)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2574, file: !2575, line: 456, baseType: !2586, size: 8, offset: 496)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2574, file: !2575, line: 457, baseType: !2586, size: 8, offset: 504)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2574, file: !2575, line: 458, baseType: !2586, size: 8, offset: 512)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2574, file: !2575, line: 459, baseType: !2586, size: 8, offset: 520)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2574, file: !2575, line: 460, baseType: !2586, size: 8, offset: 528)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2574, file: !2575, line: 461, baseType: !2586, size: 8, offset: 536)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2574, file: !2575, line: 462, baseType: !2586, size: 8, offset: 544)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2574, file: !2575, line: 463, baseType: !2586, size: 8, offset: 552)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2574, file: !2575, line: 464, baseType: !2586, size: 8, offset: 560)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2574, file: !2575, line: 465, baseType: !2586, size: 8, offset: 568)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2574, file: !2575, line: 466, baseType: !2586, size: 8, offset: 576)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2574, file: !2575, line: 467, baseType: !2586, size: 8, offset: 584)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2574, file: !2575, line: 468, baseType: !2586, size: 8, offset: 592)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2574, file: !2575, line: 469, baseType: !2586, size: 8, offset: 600)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2574, file: !2575, line: 470, baseType: !2586, size: 8, offset: 608)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2574, file: !2575, line: 471, baseType: !2586, size: 8, offset: 616)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2574, file: !2575, line: 472, baseType: !2586, size: 8, offset: 624)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2574, file: !2575, line: 473, baseType: !2586, size: 8, offset: 632)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2574, file: !2575, line: 474, baseType: !2586, size: 8, offset: 640)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2574, file: !2575, line: 475, baseType: !2586, size: 8, offset: 648)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2574, file: !2575, line: 476, baseType: !2586, size: 8, offset: 656)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2574, file: !2575, line: 477, baseType: !2586, size: 8, offset: 664)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2574, file: !2575, line: 478, baseType: !2586, size: 8, offset: 672)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2574, file: !2575, line: 479, baseType: !2586, size: 8, offset: 680)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2574, file: !2575, line: 480, baseType: !2586, size: 8, offset: 688)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2574, file: !2575, line: 481, baseType: !2586, size: 8, offset: 696)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2574, file: !2575, line: 482, baseType: !2586, size: 8, offset: 704)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2574, file: !2575, line: 483, baseType: !2586, size: 8, offset: 712)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2574, file: !2575, line: 484, baseType: !2586, size: 8, offset: 720)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2574, file: !2575, line: 485, baseType: !2586, size: 8, offset: 728)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2574, file: !2575, line: 486, baseType: !2586, size: 8, offset: 736)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2574, file: !2575, line: 487, baseType: !2586, size: 8, offset: 744)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2574, file: !2575, line: 488, baseType: !2586, size: 8, offset: 752)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2574, file: !2575, line: 489, baseType: !2586, size: 8, offset: 760)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2574, file: !2575, line: 490, baseType: !2586, size: 8, offset: 768)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2574, file: !2575, line: 491, baseType: !2586, size: 8, offset: 776)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2574, file: !2575, line: 492, baseType: !2586, size: 8, offset: 784)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2574, file: !2575, line: 493, baseType: !2586, size: 8, offset: 792)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2574, file: !2575, line: 494, baseType: !2586, size: 8, offset: 800)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2574, file: !2575, line: 495, baseType: !2586, size: 8, offset: 808)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2574, file: !2575, line: 496, baseType: !2586, size: 8, offset: 816)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2574, file: !2575, line: 497, baseType: !2586, size: 8, offset: 824)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2574, file: !2575, line: 498, baseType: !2586, size: 8, offset: 832)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2574, file: !2575, line: 499, baseType: !2586, size: 8, offset: 840)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2574, file: !2575, line: 500, baseType: !2586, size: 8, offset: 848)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2574, file: !2575, line: 501, baseType: !2586, size: 8, offset: 856)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2574, file: !2575, line: 502, baseType: !2586, size: 8, offset: 864)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2574, file: !2575, line: 503, baseType: !2586, size: 8, offset: 872)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2574, file: !2575, line: 504, baseType: !2586, size: 8, offset: 880)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2574, file: !2575, line: 505, baseType: !2586, size: 8, offset: 888)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2574, file: !2575, line: 506, baseType: !2586, size: 8, offset: 896)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2574, file: !2575, line: 507, baseType: !2586, size: 8, offset: 904)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2574, file: !2575, line: 508, baseType: !2586, size: 8, offset: 912)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2574, file: !2575, line: 509, baseType: !2586, size: 8, offset: 920)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2574, file: !2575, line: 510, baseType: !2586, size: 8, offset: 928)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2574, file: !2575, line: 511, baseType: !2586, size: 8, offset: 936)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2574, file: !2575, line: 512, baseType: !2586, size: 8, offset: 944)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2574, file: !2575, line: 513, baseType: !2586, size: 8, offset: 952)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2574, file: !2575, line: 514, baseType: !2586, size: 8, offset: 960)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2574, file: !2575, line: 515, baseType: !2586, size: 8, offset: 968)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2574, file: !2575, line: 516, baseType: !2586, size: 8, offset: 976)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2574, file: !2575, line: 517, baseType: !2586, size: 8, offset: 984)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2574, file: !2575, line: 518, baseType: !2586, size: 8, offset: 992)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2574, file: !2575, line: 519, baseType: !2586, size: 8, offset: 1000)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2574, file: !2575, line: 520, baseType: !2586, size: 8, offset: 1008)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2574, file: !2575, line: 521, baseType: !2586, size: 8, offset: 1016)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2574, file: !2575, line: 522, baseType: !2586, size: 8, offset: 1024)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2574, file: !2575, line: 523, baseType: !2586, size: 8, offset: 1032)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2574, file: !2575, line: 524, baseType: !2586, size: 8, offset: 1040)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2574, file: !2575, line: 525, baseType: !2586, size: 8, offset: 1048)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2574, file: !2575, line: 526, baseType: !2586, size: 8, offset: 1056)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2574, file: !2575, line: 527, baseType: !2586, size: 8, offset: 1064)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2574, file: !2575, line: 528, baseType: !2586, size: 8, offset: 1072)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2574, file: !2575, line: 529, baseType: !2586, size: 8, offset: 1080)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2574, file: !2575, line: 530, baseType: !2586, size: 8, offset: 1088)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2574, file: !2575, line: 531, baseType: !2586, size: 8, offset: 1096)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2574, file: !2575, line: 532, baseType: !2586, size: 8, offset: 1104)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2574, file: !2575, line: 533, baseType: !2586, size: 8, offset: 1112)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2574, file: !2575, line: 534, baseType: !2586, size: 8, offset: 1120)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2574, file: !2575, line: 535, baseType: !2586, size: 8, offset: 1128)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2574, file: !2575, line: 536, baseType: !2586, size: 8, offset: 1136)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2574, file: !2575, line: 537, baseType: !2586, size: 8, offset: 1144)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2574, file: !2575, line: 538, baseType: !2586, size: 8, offset: 1152)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2574, file: !2575, line: 539, baseType: !2586, size: 8, offset: 1160)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2574, file: !2575, line: 540, baseType: !2586, size: 8, offset: 1168)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2574, file: !2575, line: 541, baseType: !2586, size: 8, offset: 1176)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2574, file: !2575, line: 542, baseType: !2586, size: 8, offset: 1184)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2574, file: !2575, line: 543, baseType: !2586, size: 8, offset: 1192)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2574, file: !2575, line: 544, baseType: !2586, size: 8, offset: 1200)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2574, file: !2575, line: 545, baseType: !2586, size: 8, offset: 1208)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2574, file: !2575, line: 546, baseType: !2586, size: 8, offset: 1216)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2574, file: !2575, line: 547, baseType: !2586, size: 8, offset: 1224)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2574, file: !2575, line: 548, baseType: !2586, size: 8, offset: 1232)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2574, file: !2575, line: 549, baseType: !2586, size: 8, offset: 1240)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2574, file: !2575, line: 550, baseType: !2586, size: 8, offset: 1248)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2574, file: !2575, line: 551, baseType: !2586, size: 8, offset: 1256)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2574, file: !2575, line: 552, baseType: !2586, size: 8, offset: 1264)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2574, file: !2575, line: 553, baseType: !2586, size: 8, offset: 1272)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2574, file: !2575, line: 554, baseType: !2586, size: 8, offset: 1280)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2574, file: !2575, line: 555, baseType: !2586, size: 8, offset: 1288)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2574, file: !2575, line: 556, baseType: !2586, size: 8, offset: 1296)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2574, file: !2575, line: 557, baseType: !2586, size: 8, offset: 1304)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2574, file: !2575, line: 558, baseType: !2586, size: 8, offset: 1312)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2574, file: !2575, line: 559, baseType: !2586, size: 8, offset: 1320)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2574, file: !2575, line: 560, baseType: !2586, size: 8, offset: 1328)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2574, file: !2575, line: 561, baseType: !2586, size: 8, offset: 1336)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2574, file: !2575, line: 562, baseType: !2586, size: 8, offset: 1344)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2574, file: !2575, line: 563, baseType: !2586, size: 8, offset: 1352)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2574, file: !2575, line: 564, baseType: !2586, size: 8, offset: 1360)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2574, file: !2575, line: 565, baseType: !2586, size: 8, offset: 1368)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2574, file: !2575, line: 566, baseType: !2586, size: 8, offset: 1376)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2574, file: !2575, line: 567, baseType: !2586, size: 8, offset: 1384)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2574, file: !2575, line: 568, baseType: !2586, size: 8, offset: 1392)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2574, file: !2575, line: 569, baseType: !2586, size: 8, offset: 1400)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2574, file: !2575, line: 570, baseType: !2586, size: 8, offset: 1408)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2574, file: !2575, line: 571, baseType: !2586, size: 8, offset: 1416)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2574, file: !2575, line: 572, baseType: !2586, size: 8, offset: 1424)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2574, file: !2575, line: 573, baseType: !2586, size: 8, offset: 1432)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2574, file: !2575, line: 574, baseType: !2586, size: 8, offset: 1440)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1373, file: !135, line: 3405, baseType: !2742, size: 384)
!2742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2743)
!2743 = !{!2744, !2745}
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2742, file: !135, line: 3353, baseType: !1409, size: 192)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2742, file: !135, line: 3356, baseType: !2746, size: 192, offset: 192)
!2746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2575, line: 578, size: 192, elements: !2747)
!2747 = !{!2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758}
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2746, file: !2575, line: 580, baseType: !1467, size: 32)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2746, file: !2575, line: 581, baseType: !1467, size: 32, offset: 32)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2746, file: !2575, line: 582, baseType: !1467, size: 32, offset: 64)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2746, file: !2575, line: 583, baseType: !1467, size: 32, offset: 96)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2746, file: !2575, line: 584, baseType: !1490, size: 8, offset: 128)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2746, file: !2575, line: 585, baseType: !1490, size: 8, offset: 136)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2746, file: !2575, line: 586, baseType: !1490, size: 8, offset: 144)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2746, file: !2575, line: 587, baseType: !1490, size: 8, offset: 152)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2746, file: !2575, line: 588, baseType: !1490, size: 8, offset: 160)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2746, file: !2575, line: 589, baseType: !1490, size: 8, offset: 168)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2746, file: !2575, line: 590, baseType: !1490, size: 8, offset: 176)
!2759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2760, size: 64)
!2760 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1703)
!2761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2762, size: 64)
!2762 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2763)
!2763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_ref", file: !3, line: 129, size: 576, elements: !2764)
!2764 = !{!2765, !2766, !2767, !2768, !2769, !2805, !2806, !2807, !2808, !2809}
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2763, file: !3, line: 131, baseType: !1370, size: 64)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2763, file: !3, line: 132, baseType: !7, size: 32, offset: 64)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !2763, file: !3, line: 134, baseType: !2227, size: 32, offset: 96)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "stored", scope: !2763, file: !3, line: 135, baseType: !2301, size: 64, offset: 128)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_in_loop", scope: !2763, file: !3, line: 137, baseType: !2770, size: 64, offset: 192)
!2770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2771, size: 64)
!2771 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_mem_ref_locs_p_heap", file: !3, line: 125, baseType: !2772)
!2772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_mem_ref_locs_p_heap", file: !3, line: 125, size: 128, elements: !2773)
!2773 = !{!2774}
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2772, file: !3, line: 125, baseType: !2775, size: 128)
!2775 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_mem_ref_locs_p_base", file: !3, line: 124, baseType: !2776)
!2776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_mem_ref_locs_p_base", file: !3, line: 124, size: 128, elements: !2777)
!2777 = !{!2778, !2779, !2780}
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2776, file: !3, line: 124, baseType: !7, size: 32)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2776, file: !3, line: 124, baseType: !7, size: 32, offset: 32)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2776, file: !3, line: 124, baseType: !2781, size: 64, offset: 64)
!2781 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2782, size: 64, elements: !1471)
!2782 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_ref_locs_p", file: !3, line: 122, baseType: !2783)
!2783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2784, size: 64)
!2784 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_ref_locs", file: !3, line: 119, size: 64, elements: !2785)
!2785 = !{!2786}
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "locs", scope: !2784, file: !3, line: 121, baseType: !2787, size: 64)
!2787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2788, size: 64)
!2788 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_mem_ref_loc_p_heap", file: !3, line: 115, baseType: !2789)
!2789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_mem_ref_loc_p_heap", file: !3, line: 115, size: 128, elements: !2790)
!2790 = !{!2791}
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2789, file: !3, line: 115, baseType: !2792, size: 128)
!2792 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_mem_ref_loc_p_base", file: !3, line: 114, baseType: !2793)
!2793 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_mem_ref_loc_p_base", file: !3, line: 114, size: 128, elements: !2794)
!2794 = !{!2795, !2796, !2797}
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2793, file: !3, line: 114, baseType: !7, size: 32)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2793, file: !3, line: 114, baseType: !7, size: 32, offset: 32)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2793, file: !3, line: 114, baseType: !2798, size: 64, offset: 64)
!2798 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2799, size: 64, elements: !1471)
!2799 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_ref_loc_p", file: !3, line: 112, baseType: !2800)
!2800 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2801, size: 64)
!2801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_ref_loc", file: !3, line: 108, size: 128, elements: !2802)
!2802 = !{!2803, !2804}
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !2801, file: !3, line: 110, baseType: !1735, size: 64)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2801, file: !3, line: 111, baseType: !1701, size: 64, offset: 64)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "vops", scope: !2763, file: !3, line: 140, baseType: !2301, size: 64, offset: 256)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "indep_loop", scope: !2763, file: !3, line: 146, baseType: !2301, size: 64, offset: 320)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "dep_loop", scope: !2763, file: !3, line: 153, baseType: !2301, size: 64, offset: 384)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "indep_ref", scope: !2763, file: !3, line: 155, baseType: !2301, size: 64, offset: 448)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "dep_ref", scope: !2763, file: !3, line: 157, baseType: !2301, size: 64, offset: 512)
!2810 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1371, line: 59, baseType: !2811)
!2811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2812, size: 64)
!2812 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1373)
!2813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2763, size: 64)
!2814 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2815, size: 64)
!2815 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitmap_heap", file: !3, line: 164, baseType: !2816)
!2816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitmap_heap", file: !3, line: 164, size: 128, elements: !2817)
!2817 = !{!2818}
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2816, file: !3, line: 164, baseType: !2819, size: 128)
!2819 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitmap_base", file: !3, line: 163, baseType: !2820)
!2820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitmap_base", file: !3, line: 163, size: 128, elements: !2821)
!2821 = !{!2822, !2823, !2824}
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2820, file: !3, line: 163, baseType: !7, size: 32)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2820, file: !3, line: 163, baseType: !7, size: 32, offset: 32)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2820, file: !3, line: 163, baseType: !2825, size: 64, offset: 64)
!2825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2301, size: 64, elements: !1471)
!2826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2827, size: 64)
!2827 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_htab_t_heap", file: !3, line: 167, baseType: !2828)
!2828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_htab_t_heap", file: !3, line: 167, size: 128, elements: !2829)
!2829 = !{!2830}
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2828, file: !3, line: 167, baseType: !2831, size: 128)
!2831 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_htab_t_base", file: !3, line: 166, baseType: !2832)
!2832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_htab_t_base", file: !3, line: 166, size: 128, elements: !2833)
!2833 = !{!2834, !2835, !2836}
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2832, file: !3, line: 166, baseType: !7, size: 32)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2832, file: !3, line: 166, baseType: !7, size: 32, offset: 32)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2832, file: !3, line: 166, baseType: !2837, size: 64, offset: 64)
!2837 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2218, size: 64, elements: !1471)
!2838 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2839, size: 64)
!2839 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2840)
!2840 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vop_to_refs_elt", file: !3, line: 1416, size: 192, elements: !2841)
!2841 = !{!2842, !2843, !2844}
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2840, file: !3, line: 1419, baseType: !7, size: 32)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "refs_all", scope: !2840, file: !3, line: 1422, baseType: !2301, size: 64, offset: 64)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "refs_stored", scope: !2840, file: !3, line: 1425, baseType: !2301, size: 64, offset: 128)
!2845 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2846, size: 64)
!2846 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!2847 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2840, size: 64)
!2848 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_ref_p", file: !3, line: 158, baseType: !2813)
!2849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2850, size: 64)
!2850 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_mem_ref_p_heap", file: !3, line: 161, baseType: !2851)
!2851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_mem_ref_p_heap", file: !3, line: 161, size: 128, elements: !2852)
!2852 = !{!2853}
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2851, file: !3, line: 161, baseType: !2854, size: 128)
!2854 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_mem_ref_p_base", file: !3, line: 160, baseType: !2855)
!2855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_mem_ref_p_base", file: !3, line: 160, size: 128, elements: !2856)
!2856 = !{!2857, !2858, !2859}
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2855, file: !3, line: 160, baseType: !7, size: 32)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2855, file: !3, line: 160, baseType: !7, size: 32, offset: 32)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2855, file: !3, line: 160, baseType: !2860, size: 64, offset: 64)
!2860 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2848, size: 64, elements: !1471)
!2861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2862, size: 64)
!2862 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2863, line: 32, baseType: !2864)
!2863 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2863, line: 32, size: 96, elements: !2865)
!2865 = !{!2866}
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2864, file: !2863, line: 32, baseType: !2867, size: 96)
!2867 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2863, line: 31, baseType: !2868)
!2868 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2863, line: 31, size: 96, elements: !2869)
!2869 = !{!2870, !2871, !2872}
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2868, file: !2863, line: 31, baseType: !7, size: 32)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2868, file: !2863, line: 31, baseType: !7, size: 32, offset: 32)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2868, file: !2863, line: 31, baseType: !2873, size: 32, offset: 64)
!2873 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1467, size: 32, elements: !1471)
!2874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2875, size: 64)
!2875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lim_aux_data", file: !3, line: 79, size: 320, elements: !2876)
!2876 = !{!2877, !2878, !2879, !2880, !2881}
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "max_loop", scope: !2875, file: !3, line: 81, baseType: !1916, size: 64)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "tgt_loop", scope: !2875, file: !3, line: 84, baseType: !1916, size: 64, offset: 64)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "always_executed_in", scope: !2875, file: !3, line: 87, baseType: !1916, size: 64, offset: 128)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !2875, file: !3, line: 92, baseType: !7, size: 32, offset: 192)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "depends", scope: !2875, file: !3, line: 95, baseType: !2882, size: 64, offset: 256)
!2882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2883, size: 64)
!2883 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "depend", file: !3, line: 71, size: 128, elements: !2884)
!2884 = !{!2885, !2886}
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2883, file: !3, line: 73, baseType: !1701, size: 64)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2883, file: !3, line: 74, baseType: !2882, size: 64, offset: 64)
!2887 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !624, line: 30, baseType: !2888)
!2888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2889, size: 64)
!2889 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !1742)
!2890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2891, size: 64)
!2891 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fmt_data", file: !3, line: 1153, size: 128, elements: !2892)
!2892 = !{!2893, !2894}
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "loop", scope: !2891, file: !3, line: 1155, baseType: !1916, size: 64)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "orig_loop", scope: !2891, file: !3, line: 1156, baseType: !1916, size: 64, offset: 64)
!2895 = !{!2896, !0, !2901, !2903}
!2896 = !DIGlobalVariableExpression(var: !2897, expr: !DIExpression())
!2897 = distinct !DIGlobalVariable(name: "lsm_tmp_name", scope: !2, file: !3, line: 1724, type: !2898, isLocal: true, isDefinition: true)
!2898 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1470, size: 328, elements: !2899)
!2899 = !{!2900}
!2900 = !DISubrange(count: 41)
!2901 = !DIGlobalVariableExpression(var: !2902, expr: !DIExpression())
!2902 = distinct !DIGlobalVariable(name: "lim_aux_data_map", scope: !2, file: !3, line: 104, type: !2304, isLocal: true, isDefinition: true)
!2903 = !DIGlobalVariableExpression(var: !2904, expr: !DIExpression())
!2904 = distinct !DIGlobalVariable(name: "memory_accesses", scope: !2, file: !3, line: 195, type: !2905, isLocal: true, isDefinition: true)
!2905 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 171, size: 448, elements: !2906)
!2906 = !{!2907, !2908, !2909, !2910, !2911, !2912, !2913}
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "refs", scope: !2905, file: !3, line: 174, baseType: !2218, size: 64)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "refs_list", scope: !2905, file: !3, line: 177, baseType: !2849, size: 64, offset: 64)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "refs_in_loop", scope: !2905, file: !3, line: 180, baseType: !2814, size: 64, offset: 128)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "all_refs_in_loop", scope: !2905, file: !3, line: 184, baseType: !2814, size: 64, offset: 192)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "clobbered_vops", scope: !2905, file: !3, line: 187, baseType: !2814, size: 64, offset: 256)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "vop_ref_map", scope: !2905, file: !3, line: 191, baseType: !2826, size: 64, offset: 320)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "ttae_cache", scope: !2905, file: !3, line: 194, baseType: !2304, size: 64, offset: 384)
!2914 = !{i32 7, !"Dwarf Version", i32 4}
!2915 = !{i32 2, !"Debug Info Version", i32 3}
!2916 = !{i32 1, !"wchar_size", i32 4}
!2917 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2918 = distinct !DISubprogram(name: "for_each_index", scope: !3, file: !3, line: 266, type: !2919, scopeLine: 267, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!2919 = !DISubroutineType(types: !2920)
!2920 = !{!1490, !1735, !2921, !1654}
!2921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2922, size: 64)
!2922 = !DISubroutineType(types: !2923)
!2923 = !{!1490, !1370, !1735, !1654}
!2924 = !{}
!2925 = !DILocalVariable(name: "addr_p", arg: 1, scope: !2918, file: !3, line: 266, type: !1735)
!2926 = !DILocation(line: 266, column: 23, scope: !2918)
!2927 = !DILocalVariable(name: "cbck", arg: 2, scope: !2918, file: !3, line: 266, type: !2921)
!2928 = !DILocation(line: 266, column: 38, scope: !2918)
!2929 = !DILocalVariable(name: "data", arg: 3, scope: !2918, file: !3, line: 266, type: !1654)
!2930 = !DILocation(line: 266, column: 74, scope: !2918)
!2931 = !DILocalVariable(name: "nxt", scope: !2918, file: !3, line: 268, type: !1735)
!2932 = !DILocation(line: 268, column: 9, scope: !2918)
!2933 = !DILocalVariable(name: "idx", scope: !2918, file: !3, line: 268, type: !1735)
!2934 = !DILocation(line: 268, column: 15, scope: !2918)
!2935 = !DILocation(line: 270, column: 3, scope: !2918)
!2936 = !DILocation(line: 272, column: 15, scope: !2937)
!2937 = distinct !DILexicalBlock(scope: !2938, file: !3, line: 271, column: 5)
!2938 = distinct !DILexicalBlock(scope: !2939, file: !3, line: 270, column: 3)
!2939 = distinct !DILexicalBlock(scope: !2918, file: !3, line: 270, column: 3)
!2940 = !DILocation(line: 272, column: 7, scope: !2937)
!2941 = !DILocation(line: 275, column: 11, scope: !2942)
!2942 = distinct !DILexicalBlock(scope: !2937, file: !3, line: 273, column: 2)
!2943 = !DILocation(line: 275, column: 18, scope: !2942)
!2944 = !DILocation(line: 275, column: 17, scope: !2942)
!2945 = !DILocation(line: 275, column: 26, scope: !2942)
!2946 = !DILocation(line: 275, column: 34, scope: !2942)
!2947 = !DILocation(line: 275, column: 4, scope: !2942)
!2948 = !DILocation(line: 280, column: 11, scope: !2942)
!2949 = !DILocation(line: 280, column: 8, scope: !2942)
!2950 = !DILocation(line: 281, column: 11, scope: !2942)
!2951 = !DILocation(line: 281, column: 18, scope: !2942)
!2952 = !DILocation(line: 281, column: 17, scope: !2942)
!2953 = !DILocation(line: 281, column: 26, scope: !2942)
!2954 = !DILocation(line: 281, column: 31, scope: !2942)
!2955 = !DILocation(line: 281, column: 4, scope: !2942)
!2956 = !DILocation(line: 287, column: 11, scope: !2942)
!2957 = !DILocation(line: 287, column: 8, scope: !2942)
!2958 = !DILocation(line: 288, column: 4, scope: !2942)
!2959 = !DILocation(line: 293, column: 11, scope: !2942)
!2960 = !DILocation(line: 293, column: 8, scope: !2942)
!2961 = !DILocation(line: 294, column: 9, scope: !2962)
!2962 = distinct !DILexicalBlock(scope: !2942, file: !3, line: 294, column: 8)
!2963 = !DILocation(line: 294, column: 8, scope: !2962)
!2964 = !DILocation(line: 295, column: 8, scope: !2962)
!2965 = !DILocation(line: 295, column: 12, scope: !2962)
!2966 = !DILocation(line: 295, column: 19, scope: !2962)
!2967 = !DILocation(line: 295, column: 18, scope: !2962)
!2968 = !DILocation(line: 295, column: 27, scope: !2962)
!2969 = !DILocation(line: 295, column: 32, scope: !2962)
!2970 = !DILocation(line: 294, column: 8, scope: !2942)
!2971 = !DILocation(line: 296, column: 6, scope: !2962)
!2972 = !DILocation(line: 298, column: 11, scope: !2942)
!2973 = !DILocation(line: 298, column: 8, scope: !2942)
!2974 = !DILocation(line: 299, column: 4, scope: !2942)
!2975 = !DILocation(line: 303, column: 11, scope: !2942)
!2976 = !DILocation(line: 303, column: 8, scope: !2942)
!2977 = !DILocation(line: 304, column: 9, scope: !2978)
!2978 = distinct !DILexicalBlock(scope: !2942, file: !3, line: 304, column: 8)
!2979 = !DILocation(line: 304, column: 16, scope: !2978)
!2980 = !DILocation(line: 304, column: 15, scope: !2978)
!2981 = !DILocation(line: 304, column: 25, scope: !2978)
!2982 = !DILocation(line: 304, column: 52, scope: !2978)
!2983 = !DILocation(line: 304, column: 8, scope: !2942)
!2984 = !DILocation(line: 305, column: 6, scope: !2978)
!2985 = !DILocation(line: 306, column: 4, scope: !2942)
!2986 = !DILocation(line: 318, column: 4, scope: !2942)
!2987 = !DILocation(line: 321, column: 4, scope: !2942)
!2988 = !DILocation(line: 322, column: 4, scope: !2942)
!2989 = !DILocation(line: 325, column: 11, scope: !2942)
!2990 = !DILocation(line: 325, column: 8, scope: !2942)
!2991 = !DILocation(line: 326, column: 9, scope: !2992)
!2992 = distinct !DILexicalBlock(scope: !2942, file: !3, line: 326, column: 8)
!2993 = !DILocation(line: 326, column: 8, scope: !2992)
!2994 = !DILocation(line: 327, column: 8, scope: !2992)
!2995 = !DILocation(line: 327, column: 12, scope: !2992)
!2996 = !DILocation(line: 327, column: 19, scope: !2992)
!2997 = !DILocation(line: 327, column: 18, scope: !2992)
!2998 = !DILocation(line: 327, column: 27, scope: !2992)
!2999 = !DILocation(line: 327, column: 32, scope: !2992)
!3000 = !DILocation(line: 326, column: 8, scope: !2942)
!3001 = !DILocation(line: 328, column: 6, scope: !2992)
!3002 = !DILocation(line: 329, column: 11, scope: !2942)
!3003 = !DILocation(line: 329, column: 8, scope: !2942)
!3004 = !DILocation(line: 330, column: 9, scope: !3005)
!3005 = distinct !DILexicalBlock(scope: !2942, file: !3, line: 330, column: 8)
!3006 = !DILocation(line: 330, column: 8, scope: !3005)
!3007 = !DILocation(line: 331, column: 8, scope: !3005)
!3008 = !DILocation(line: 331, column: 12, scope: !3005)
!3009 = !DILocation(line: 331, column: 19, scope: !3005)
!3010 = !DILocation(line: 331, column: 18, scope: !3005)
!3011 = !DILocation(line: 331, column: 27, scope: !3005)
!3012 = !DILocation(line: 331, column: 32, scope: !3005)
!3013 = !DILocation(line: 330, column: 8, scope: !2942)
!3014 = !DILocation(line: 332, column: 6, scope: !3005)
!3015 = !DILocation(line: 333, column: 4, scope: !2942)
!3016 = !DILocation(line: 336, column: 8, scope: !2942)
!3017 = !DILocation(line: 337, column: 2, scope: !2942)
!3018 = !DILocation(line: 338, column: 5, scope: !2937)
!3019 = !DILocation(line: 270, column: 21, scope: !2938)
!3020 = !DILocation(line: 270, column: 19, scope: !2938)
!3021 = !DILocation(line: 270, column: 3, scope: !2938)
!3022 = distinct !{!3022, !3023, !3024}
!3023 = !DILocation(line: 270, column: 3, scope: !2939)
!3024 = !DILocation(line: 338, column: 5, scope: !2939)
!3025 = !DILocation(line: 339, column: 1, scope: !2918)
!3026 = distinct !DISubprogram(name: "movement_possibility", scope: !3, file: !3, line: 349, type: !3027, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3027 = !DISubroutineType(types: !3028)
!3028 = !{!390, !1701}
!3029 = !DILocalVariable(name: "stmt", arg: 1, scope: !3026, file: !3, line: 349, type: !1701)
!3030 = !DILocation(line: 349, column: 30, scope: !3026)
!3031 = !DILocalVariable(name: "lhs", scope: !3026, file: !3, line: 351, type: !1370)
!3032 = !DILocation(line: 351, column: 8, scope: !3026)
!3033 = !DILocalVariable(name: "ret", scope: !3026, file: !3, line: 352, type: !390)
!3034 = !DILocation(line: 352, column: 17, scope: !3026)
!3035 = !DILocation(line: 354, column: 7, scope: !3036)
!3036 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 354, column: 7)
!3037 = !DILocation(line: 355, column: 7, scope: !3036)
!3038 = !DILocation(line: 355, column: 23, scope: !3036)
!3039 = !DILocation(line: 355, column: 10, scope: !3036)
!3040 = !DILocation(line: 355, column: 29, scope: !3036)
!3041 = !DILocation(line: 354, column: 7, scope: !3026)
!3042 = !DILocation(line: 359, column: 7, scope: !3043)
!3043 = distinct !DILexicalBlock(scope: !3036, file: !3, line: 356, column: 5)
!3044 = !DILocation(line: 362, column: 23, scope: !3045)
!3045 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 362, column: 7)
!3046 = !DILocation(line: 362, column: 7, scope: !3045)
!3047 = !DILocation(line: 362, column: 29, scope: !3045)
!3048 = !DILocation(line: 362, column: 7, scope: !3026)
!3049 = !DILocation(line: 363, column: 5, scope: !3045)
!3050 = !DILocation(line: 365, column: 20, scope: !3051)
!3051 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 365, column: 7)
!3052 = !DILocation(line: 365, column: 7, scope: !3051)
!3053 = !DILocation(line: 365, column: 7, scope: !3026)
!3054 = !DILocation(line: 366, column: 5, scope: !3051)
!3055 = !DILocation(line: 368, column: 23, scope: !3056)
!3056 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 368, column: 7)
!3057 = !DILocation(line: 368, column: 7, scope: !3056)
!3058 = !DILocation(line: 369, column: 7, scope: !3056)
!3059 = !DILocation(line: 369, column: 35, scope: !3056)
!3060 = !DILocation(line: 369, column: 10, scope: !3056)
!3061 = !DILocation(line: 370, column: 7, scope: !3056)
!3062 = !DILocation(line: 370, column: 35, scope: !3056)
!3063 = !DILocation(line: 370, column: 10, scope: !3056)
!3064 = !DILocation(line: 371, column: 7, scope: !3056)
!3065 = !DILocation(line: 371, column: 30, scope: !3056)
!3066 = !DILocation(line: 371, column: 10, scope: !3056)
!3067 = !DILocation(line: 368, column: 7, scope: !3026)
!3068 = !DILocation(line: 372, column: 5, scope: !3056)
!3069 = !DILocation(line: 374, column: 23, scope: !3070)
!3070 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 374, column: 7)
!3071 = !DILocation(line: 374, column: 7, scope: !3070)
!3072 = !DILocation(line: 374, column: 7, scope: !3026)
!3073 = !DILocation(line: 394, column: 11, scope: !3074)
!3074 = distinct !DILexicalBlock(scope: !3070, file: !3, line: 375, column: 5)
!3075 = !DILocation(line: 395, column: 30, scope: !3074)
!3076 = !DILocation(line: 395, column: 13, scope: !3074)
!3077 = !DILocation(line: 395, column: 11, scope: !3074)
!3078 = !DILocation(line: 396, column: 5, scope: !3074)
!3079 = !DILocation(line: 397, column: 30, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3070, file: !3, line: 397, column: 12)
!3081 = !DILocation(line: 397, column: 12, scope: !3080)
!3082 = !DILocation(line: 397, column: 12, scope: !3070)
!3083 = !DILocation(line: 398, column: 30, scope: !3080)
!3084 = !DILocation(line: 398, column: 11, scope: !3080)
!3085 = !DILocation(line: 398, column: 9, scope: !3080)
!3086 = !DILocation(line: 398, column: 5, scope: !3080)
!3087 = !DILocation(line: 400, column: 5, scope: !3080)
!3088 = !DILocation(line: 402, column: 7, scope: !3089)
!3089 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 402, column: 7)
!3090 = !DILocation(line: 402, column: 23, scope: !3089)
!3091 = !DILocation(line: 403, column: 7, scope: !3089)
!3092 = !DILocation(line: 403, column: 10, scope: !3089)
!3093 = !DILocation(line: 402, column: 7, scope: !3026)
!3094 = !DILocation(line: 404, column: 5, scope: !3089)
!3095 = !DILocation(line: 406, column: 7, scope: !3096)
!3096 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 406, column: 7)
!3097 = !DILocation(line: 406, column: 23, scope: !3096)
!3098 = !DILocation(line: 407, column: 7, scope: !3096)
!3099 = !DILocation(line: 407, column: 31, scope: !3096)
!3100 = !DILocation(line: 407, column: 10, scope: !3096)
!3101 = !DILocation(line: 406, column: 7, scope: !3026)
!3102 = !DILocation(line: 408, column: 5, scope: !3096)
!3103 = !DILocation(line: 410, column: 10, scope: !3026)
!3104 = !DILocation(line: 410, column: 3, scope: !3026)
!3105 = !DILocation(line: 411, column: 1, scope: !3026)
!3106 = distinct !DISubprogram(name: "gimple_code", scope: !397, file: !397, line: 1052, type: !3107, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3107 = !DISubroutineType(types: !3108)
!3108 = !{!396, !3109}
!3109 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1371, line: 60, baseType: !2759)
!3110 = !DILocalVariable(name: "g", arg: 1, scope: !3106, file: !397, line: 1052, type: !3109)
!3111 = !DILocation(line: 1052, column: 27, scope: !3106)
!3112 = !DILocation(line: 1054, column: 10, scope: !3106)
!3113 = !DILocation(line: 1054, column: 13, scope: !3106)
!3114 = !DILocation(line: 1054, column: 20, scope: !3106)
!3115 = !DILocation(line: 1054, column: 3, scope: !3106)
!3116 = distinct !DISubprogram(name: "gimple_vdef", scope: !397, file: !397, line: 1375, type: !3117, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3117 = !DISubroutineType(types: !3118)
!3118 = !{!1370, !3109}
!3119 = !DILocalVariable(name: "g", arg: 1, scope: !3116, file: !397, line: 1375, type: !3109)
!3120 = !DILocation(line: 1375, column: 27, scope: !3116)
!3121 = !DILocation(line: 1377, column: 28, scope: !3122)
!3122 = distinct !DILexicalBlock(scope: !3116, file: !397, line: 1377, column: 7)
!3123 = !DILocation(line: 1377, column: 8, scope: !3122)
!3124 = !DILocation(line: 1377, column: 7, scope: !3116)
!3125 = !DILocation(line: 1378, column: 5, scope: !3122)
!3126 = !DILocation(line: 1379, column: 10, scope: !3116)
!3127 = !DILocation(line: 1379, column: 13, scope: !3116)
!3128 = !DILocation(line: 1379, column: 23, scope: !3116)
!3129 = !DILocation(line: 1379, column: 3, scope: !3116)
!3130 = !DILocation(line: 1380, column: 1, scope: !3116)
!3131 = distinct !DISubprogram(name: "gimple_has_volatile_ops", scope: !397, file: !397, line: 1477, type: !3132, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3132 = !DISubroutineType(types: !3133)
!3133 = !{!1490, !3109}
!3134 = !DILocalVariable(name: "stmt", arg: 1, scope: !3131, file: !397, line: 1477, type: !3109)
!3135 = !DILocation(line: 1477, column: 39, scope: !3131)
!3136 = !DILocation(line: 1479, column: 27, scope: !3137)
!3137 = distinct !DILexicalBlock(scope: !3131, file: !397, line: 1479, column: 7)
!3138 = !DILocation(line: 1479, column: 7, scope: !3137)
!3139 = !DILocation(line: 1479, column: 7, scope: !3131)
!3140 = !DILocation(line: 1480, column: 12, scope: !3137)
!3141 = !DILocation(line: 1480, column: 18, scope: !3137)
!3142 = !DILocation(line: 1480, column: 25, scope: !3137)
!3143 = !DILocation(line: 1480, column: 5, scope: !3137)
!3144 = !DILocation(line: 1482, column: 5, scope: !3137)
!3145 = !DILocation(line: 1483, column: 1, scope: !3131)
!3146 = distinct !DISubprogram(name: "is_gimple_call", scope: !397, file: !397, line: 1870, type: !3132, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3147 = !DILocalVariable(name: "gs", arg: 1, scope: !3146, file: !397, line: 1870, type: !3109)
!3148 = !DILocation(line: 1870, column: 30, scope: !3146)
!3149 = !DILocation(line: 1872, column: 23, scope: !3146)
!3150 = !DILocation(line: 1872, column: 10, scope: !3146)
!3151 = !DILocation(line: 1872, column: 27, scope: !3146)
!3152 = !DILocation(line: 1872, column: 3, scope: !3146)
!3153 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !397, file: !397, line: 1878, type: !3117, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3154 = !DILocalVariable(name: "gs", arg: 1, scope: !3153, file: !397, line: 1878, type: !3109)
!3155 = !DILocation(line: 1878, column: 31, scope: !3153)
!3156 = !DILocation(line: 1881, column: 21, scope: !3153)
!3157 = !DILocation(line: 1881, column: 10, scope: !3153)
!3158 = !DILocation(line: 1881, column: 3, scope: !3153)
!3159 = distinct !DISubprogram(name: "is_gimple_assign", scope: !397, file: !397, line: 1677, type: !3132, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3160 = !DILocalVariable(name: "gs", arg: 1, scope: !3159, file: !397, line: 1677, type: !3109)
!3161 = !DILocation(line: 1677, column: 32, scope: !3159)
!3162 = !DILocation(line: 1679, column: 23, scope: !3159)
!3163 = !DILocation(line: 1679, column: 10, scope: !3159)
!3164 = !DILocation(line: 1679, column: 27, scope: !3159)
!3165 = !DILocation(line: 1679, column: 3, scope: !3159)
!3166 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !397, file: !397, line: 1694, type: !3117, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3167 = !DILocalVariable(name: "gs", arg: 1, scope: !3166, file: !397, line: 1694, type: !3109)
!3168 = !DILocation(line: 1694, column: 33, scope: !3166)
!3169 = !DILocation(line: 1697, column: 21, scope: !3166)
!3170 = !DILocation(line: 1697, column: 10, scope: !3166)
!3171 = !DILocation(line: 1697, column: 3, scope: !3166)
!3172 = distinct !DISubprogram(name: "get_lsm_tmp_name", scope: !3, file: !3, line: 1821, type: !3173, scopeLine: 1822, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3173 = !DISubroutineType(types: !3174)
!3174 = !{!1639, !1370, !7}
!3175 = !DILocalVariable(name: "ref", arg: 1, scope: !3172, file: !3, line: 1821, type: !1370)
!3176 = !DILocation(line: 1821, column: 24, scope: !3172)
!3177 = !DILocalVariable(name: "n", arg: 2, scope: !3172, file: !3, line: 1821, type: !7)
!3178 = !DILocation(line: 1821, column: 38, scope: !3172)
!3179 = !DILocalVariable(name: "ns", scope: !3172, file: !3, line: 1823, type: !3180)
!3180 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1470, size: 16, elements: !1618)
!3181 = !DILocation(line: 1823, column: 8, scope: !3172)
!3182 = !DILocation(line: 1825, column: 23, scope: !3172)
!3183 = !DILocation(line: 1826, column: 21, scope: !3172)
!3184 = !DILocation(line: 1826, column: 3, scope: !3172)
!3185 = !DILocation(line: 1827, column: 3, scope: !3172)
!3186 = !DILocation(line: 1828, column: 7, scope: !3187)
!3187 = distinct !DILexicalBlock(scope: !3172, file: !3, line: 1828, column: 7)
!3188 = !DILocation(line: 1828, column: 9, scope: !3187)
!3189 = !DILocation(line: 1828, column: 7, scope: !3172)
!3190 = !DILocation(line: 1830, column: 21, scope: !3191)
!3191 = distinct !DILexicalBlock(scope: !3187, file: !3, line: 1829, column: 5)
!3192 = !DILocation(line: 1830, column: 19, scope: !3191)
!3193 = !DILocation(line: 1830, column: 15, scope: !3191)
!3194 = !DILocation(line: 1830, column: 7, scope: !3191)
!3195 = !DILocation(line: 1830, column: 13, scope: !3191)
!3196 = !DILocation(line: 1831, column: 7, scope: !3191)
!3197 = !DILocation(line: 1831, column: 13, scope: !3191)
!3198 = !DILocation(line: 1832, column: 25, scope: !3191)
!3199 = !DILocation(line: 1832, column: 7, scope: !3191)
!3200 = !DILocation(line: 1833, column: 5, scope: !3191)
!3201 = !DILocation(line: 1834, column: 3, scope: !3172)
!3202 = distinct !DISubprogram(name: "gen_lsm_tmp_name", scope: !3, file: !3, line: 1744, type: !3203, scopeLine: 1745, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3203 = !DISubroutineType(types: !3204)
!3204 = !{null, !1370}
!3205 = !DILocalVariable(name: "ref", arg: 1, scope: !3202, file: !3, line: 1744, type: !1370)
!3206 = !DILocation(line: 1744, column: 24, scope: !3202)
!3207 = !DILocalVariable(name: "name", scope: !3202, file: !3, line: 1746, type: !1574)
!3208 = !DILocation(line: 1746, column: 15, scope: !3202)
!3209 = !DILocation(line: 1748, column: 11, scope: !3202)
!3210 = !DILocation(line: 1748, column: 3, scope: !3202)
!3211 = !DILocation(line: 1753, column: 25, scope: !3212)
!3212 = distinct !DILexicalBlock(scope: !3202, file: !3, line: 1749, column: 5)
!3213 = !DILocation(line: 1753, column: 7, scope: !3212)
!3214 = !DILocation(line: 1754, column: 7, scope: !3212)
!3215 = !DILocation(line: 1755, column: 7, scope: !3212)
!3216 = !DILocation(line: 1760, column: 25, scope: !3212)
!3217 = !DILocation(line: 1760, column: 7, scope: !3212)
!3218 = !DILocation(line: 1761, column: 7, scope: !3212)
!3219 = !DILocation(line: 1764, column: 25, scope: !3212)
!3220 = !DILocation(line: 1764, column: 7, scope: !3212)
!3221 = !DILocation(line: 1765, column: 7, scope: !3212)
!3222 = !DILocation(line: 1766, column: 7, scope: !3212)
!3223 = !DILocation(line: 1769, column: 25, scope: !3212)
!3224 = !DILocation(line: 1769, column: 7, scope: !3212)
!3225 = !DILocation(line: 1770, column: 7, scope: !3212)
!3226 = !DILocation(line: 1771, column: 7, scope: !3212)
!3227 = !DILocation(line: 1774, column: 25, scope: !3212)
!3228 = !DILocation(line: 1774, column: 7, scope: !3212)
!3229 = !DILocation(line: 1775, column: 7, scope: !3212)
!3230 = !DILocation(line: 1776, column: 24, scope: !3212)
!3231 = !DILocation(line: 1776, column: 14, scope: !3212)
!3232 = !DILocation(line: 1776, column: 12, scope: !3212)
!3233 = !DILocation(line: 1777, column: 12, scope: !3234)
!3234 = distinct !DILexicalBlock(scope: !3212, file: !3, line: 1777, column: 11)
!3235 = !DILocation(line: 1777, column: 11, scope: !3212)
!3236 = !DILocation(line: 1778, column: 7, scope: !3234)
!3237 = !DILocation(line: 1778, column: 2, scope: !3234)
!3238 = !DILocation(line: 1779, column: 25, scope: !3212)
!3239 = !DILocation(line: 1779, column: 7, scope: !3212)
!3240 = !DILocation(line: 1780, column: 7, scope: !3212)
!3241 = !DILocation(line: 1783, column: 25, scope: !3212)
!3242 = !DILocation(line: 1783, column: 7, scope: !3212)
!3243 = !DILocation(line: 1784, column: 7, scope: !3212)
!3244 = !DILocation(line: 1785, column: 7, scope: !3212)
!3245 = !DILocation(line: 1788, column: 13, scope: !3212)
!3246 = !DILocation(line: 1788, column: 11, scope: !3212)
!3247 = !DILocation(line: 1788, column: 7, scope: !3212)
!3248 = !DILocation(line: 1793, column: 24, scope: !3212)
!3249 = !DILocation(line: 1793, column: 14, scope: !3212)
!3250 = !DILocation(line: 1793, column: 12, scope: !3212)
!3251 = !DILocation(line: 1794, column: 12, scope: !3252)
!3252 = distinct !DILexicalBlock(scope: !3212, file: !3, line: 1794, column: 11)
!3253 = !DILocation(line: 1794, column: 11, scope: !3212)
!3254 = !DILocation(line: 1795, column: 7, scope: !3252)
!3255 = !DILocation(line: 1795, column: 2, scope: !3252)
!3256 = !DILocation(line: 1796, column: 25, scope: !3212)
!3257 = !DILocation(line: 1796, column: 7, scope: !3212)
!3258 = !DILocation(line: 1797, column: 7, scope: !3212)
!3259 = !DILocation(line: 1800, column: 7, scope: !3212)
!3260 = !DILocation(line: 1801, column: 7, scope: !3212)
!3261 = !DILocation(line: 1804, column: 7, scope: !3212)
!3262 = !DILocation(line: 1805, column: 7, scope: !3212)
!3263 = !DILocation(line: 1809, column: 7, scope: !3212)
!3264 = !DILocation(line: 1812, column: 7, scope: !3212)
!3265 = !DILocation(line: 1813, column: 5, scope: !3212)
!3266 = !DILocation(line: 1814, column: 1, scope: !3202)
!3267 = distinct !DISubprogram(name: "lsm_tmp_name_add", scope: !3, file: !3, line: 1730, type: !3268, scopeLine: 1731, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3268 = !DISubroutineType(types: !3269)
!3269 = !{null, !1574}
!3270 = !DILocalVariable(name: "s", arg: 1, scope: !3267, file: !3, line: 1730, type: !1574)
!3271 = !DILocation(line: 1730, column: 31, scope: !3267)
!3272 = !DILocalVariable(name: "l", scope: !3267, file: !3, line: 1732, type: !1467)
!3273 = !DILocation(line: 1732, column: 7, scope: !3267)
!3274 = !DILocation(line: 1732, column: 19, scope: !3267)
!3275 = !DILocation(line: 1732, column: 11, scope: !3267)
!3276 = !DILocation(line: 1732, column: 24, scope: !3267)
!3277 = !DILocation(line: 1732, column: 22, scope: !3267)
!3278 = !DILocation(line: 1733, column: 7, scope: !3279)
!3279 = distinct !DILexicalBlock(scope: !3267, file: !3, line: 1733, column: 7)
!3280 = !DILocation(line: 1733, column: 9, scope: !3279)
!3281 = !DILocation(line: 1733, column: 7, scope: !3267)
!3282 = !DILocation(line: 1734, column: 5, scope: !3279)
!3283 = !DILocation(line: 1736, column: 26, scope: !3267)
!3284 = !DILocation(line: 1736, column: 24, scope: !3267)
!3285 = !DILocation(line: 1736, column: 47, scope: !3267)
!3286 = !DILocation(line: 1736, column: 3, scope: !3267)
!3287 = !DILocation(line: 1737, column: 25, scope: !3267)
!3288 = !DILocation(line: 1737, column: 23, scope: !3267)
!3289 = !DILocation(line: 1738, column: 1, scope: !3267)
!3290 = distinct !DISubprogram(name: "tree_ssa_lim", scope: !3, file: !3, line: 2332, type: !3291, scopeLine: 2333, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3291 = !DISubroutineType(types: !3292)
!3292 = !{null}
!3293 = !DILocation(line: 2334, column: 3, scope: !3290)
!3294 = !DILocation(line: 2337, column: 3, scope: !3290)
!3295 = !DILocation(line: 2341, column: 3, scope: !3290)
!3296 = !DILocation(line: 2345, column: 3, scope: !3290)
!3297 = !DILocation(line: 2348, column: 3, scope: !3290)
!3298 = !DILocation(line: 2350, column: 3, scope: !3290)
!3299 = !DILocation(line: 2351, column: 1, scope: !3290)
!3300 = distinct !DISubprogram(name: "tree_ssa_lim_initialize", scope: !3, file: !3, line: 2260, type: !3291, scopeLine: 2261, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3301 = !DILocalVariable(name: "contains_call", scope: !3300, file: !3, line: 2262, type: !3302)
!3302 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !3303, line: 45, baseType: !3304)
!3303 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3305, size: 64)
!3305 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !3303, line: 39, size: 192, elements: !3306)
!3306 = !{!3307, !3309, !3310, !3311}
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !3305, file: !3303, line: 41, baseType: !3308, size: 64)
!3308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1490, size: 64)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !3305, file: !3303, line: 42, baseType: !7, size: 32, offset: 64)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3305, file: !3303, line: 43, baseType: !7, size: 32, offset: 96)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !3305, file: !3303, line: 44, baseType: !3312, size: 64, offset: 128)
!3312 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1424, size: 64, elements: !1471)
!3313 = !DILocation(line: 2262, column: 11, scope: !3300)
!3314 = !DILocation(line: 2262, column: 42, scope: !3300)
!3315 = !DILocation(line: 2262, column: 27, scope: !3300)
!3316 = !DILocalVariable(name: "bsi", scope: !3300, file: !3, line: 2263, type: !3317)
!3317 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !397, line: 265, baseType: !3318)
!3318 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !397, line: 254, size: 192, elements: !3319)
!3319 = !{!3320, !3321, !3322}
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3318, file: !397, line: 257, baseType: !1696, size: 64)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3318, file: !397, line: 263, baseType: !1691, size: 64, offset: 64)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3318, file: !397, line: 264, baseType: !2186, size: 64, offset: 128)
!3323 = !DILocation(line: 2263, column: 24, scope: !3300)
!3324 = !DILocalVariable(name: "loop", scope: !3300, file: !3, line: 2264, type: !1916)
!3325 = !DILocation(line: 2264, column: 16, scope: !3300)
!3326 = !DILocalVariable(name: "bb", scope: !3300, file: !3, line: 2265, type: !2186)
!3327 = !DILocation(line: 2265, column: 15, scope: !3300)
!3328 = !DILocation(line: 2267, column: 17, scope: !3300)
!3329 = !DILocation(line: 2267, column: 3, scope: !3300)
!3330 = !DILocation(line: 2268, column: 3, scope: !3331)
!3331 = distinct !DILexicalBlock(scope: !3300, file: !3, line: 2268, column: 3)
!3332 = !DILocation(line: 2268, column: 3, scope: !3333)
!3333 = distinct !DILexicalBlock(scope: !3331, file: !3, line: 2268, column: 3)
!3334 = !DILocation(line: 2270, column: 32, scope: !3335)
!3335 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 2270, column: 7)
!3336 = distinct !DILexicalBlock(scope: !3333, file: !3, line: 2269, column: 5)
!3337 = !DILocation(line: 2270, column: 18, scope: !3335)
!3338 = !DILocation(line: 2270, column: 12, scope: !3335)
!3339 = !DILocation(line: 2270, column: 38, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !3335, file: !3, line: 2270, column: 7)
!3341 = !DILocation(line: 2270, column: 37, scope: !3340)
!3342 = !DILocation(line: 2270, column: 7, scope: !3335)
!3343 = !DILocation(line: 2272, column: 24, scope: !3344)
!3344 = distinct !DILexicalBlock(scope: !3345, file: !3, line: 2272, column: 8)
!3345 = distinct !DILexicalBlock(scope: !3340, file: !3, line: 2271, column: 2)
!3346 = !DILocation(line: 2272, column: 8, scope: !3344)
!3347 = !DILocation(line: 2272, column: 8, scope: !3345)
!3348 = !DILocation(line: 2273, column: 6, scope: !3344)
!3349 = !DILocation(line: 2274, column: 2, scope: !3345)
!3350 = !DILocation(line: 2270, column: 55, scope: !3340)
!3351 = !DILocation(line: 2270, column: 7, scope: !3340)
!3352 = distinct !{!3352, !3342, !3353}
!3353 = !DILocation(line: 2274, column: 2, scope: !3335)
!3354 = !DILocation(line: 2276, column: 12, scope: !3355)
!3355 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 2276, column: 11)
!3356 = !DILocation(line: 2276, column: 11, scope: !3336)
!3357 = !DILocation(line: 2277, column: 11, scope: !3355)
!3358 = !DILocation(line: 2277, column: 26, scope: !3355)
!3359 = !DILocation(line: 2277, column: 30, scope: !3355)
!3360 = !DILocation(line: 2277, column: 2, scope: !3355)
!3361 = !DILocation(line: 2278, column: 5, scope: !3336)
!3362 = distinct !{!3362, !3330, !3363}
!3363 = !DILocation(line: 2278, column: 5, scope: !3331)
!3364 = !DILocation(line: 2280, column: 15, scope: !3365)
!3365 = distinct !DILexicalBlock(scope: !3300, file: !3, line: 2280, column: 3)
!3366 = !DILocation(line: 2280, column: 30, scope: !3365)
!3367 = !DILocation(line: 2280, column: 41, scope: !3365)
!3368 = !DILocation(line: 2280, column: 13, scope: !3365)
!3369 = !DILocation(line: 2280, column: 8, scope: !3365)
!3370 = !DILocation(line: 2280, column: 48, scope: !3371)
!3371 = distinct !DILexicalBlock(scope: !3365, file: !3, line: 2280, column: 3)
!3372 = !DILocation(line: 2280, column: 3, scope: !3365)
!3373 = !DILocation(line: 2281, column: 30, scope: !3371)
!3374 = !DILocation(line: 2281, column: 36, scope: !3371)
!3375 = !DILocation(line: 2281, column: 5, scope: !3371)
!3376 = !DILocation(line: 2280, column: 61, scope: !3371)
!3377 = !DILocation(line: 2280, column: 67, scope: !3371)
!3378 = !DILocation(line: 2280, column: 59, scope: !3371)
!3379 = !DILocation(line: 2280, column: 3, scope: !3371)
!3380 = distinct !{!3380, !3372, !3381}
!3381 = !DILocation(line: 2281, column: 49, scope: !3365)
!3382 = !DILocation(line: 2283, column: 3, scope: !3300)
!3383 = !DILocation(line: 2285, column: 22, scope: !3300)
!3384 = !DILocation(line: 2285, column: 20, scope: !3300)
!3385 = !DILocation(line: 2286, column: 1, scope: !3300)
!3386 = distinct !DISubprogram(name: "analyze_memory_references", scope: !3, file: !3, line: 1568, type: !3291, scopeLine: 1569, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3387 = !DILocalVariable(name: "i", scope: !3386, file: !3, line: 1570, type: !7)
!3388 = !DILocation(line: 1570, column: 12, scope: !3386)
!3389 = !DILocalVariable(name: "empty", scope: !3386, file: !3, line: 1571, type: !2301)
!3390 = !DILocation(line: 1571, column: 10, scope: !3386)
!3391 = !DILocalVariable(name: "hempty", scope: !3386, file: !3, line: 1572, type: !2218)
!3392 = !DILocation(line: 1572, column: 10, scope: !3386)
!3393 = !DILocation(line: 1575, column: 6, scope: !3386)
!3394 = !DILocation(line: 1575, column: 4, scope: !3386)
!3395 = !DILocation(line: 1576, column: 29, scope: !3386)
!3396 = !DILocation(line: 1577, column: 34, scope: !3386)
!3397 = !DILocation(line: 1577, column: 32, scope: !3386)
!3398 = !DILocation(line: 1579, column: 38, scope: !3386)
!3399 = !DILocation(line: 1579, column: 36, scope: !3386)
!3400 = !DILocation(line: 1581, column: 36, scope: !3386)
!3401 = !DILocation(line: 1581, column: 34, scope: !3386)
!3402 = !DILocation(line: 1583, column: 33, scope: !3386)
!3403 = !DILocation(line: 1583, column: 31, scope: !3386)
!3404 = !DILocation(line: 1586, column: 10, scope: !3405)
!3405 = distinct !DILexicalBlock(scope: !3386, file: !3, line: 1586, column: 3)
!3406 = !DILocation(line: 1586, column: 8, scope: !3405)
!3407 = !DILocation(line: 1586, column: 15, scope: !3408)
!3408 = distinct !DILexicalBlock(scope: !3405, file: !3, line: 1586, column: 3)
!3409 = !DILocation(line: 1586, column: 19, scope: !3408)
!3410 = !DILocation(line: 1586, column: 17, scope: !3408)
!3411 = !DILocation(line: 1586, column: 3, scope: !3405)
!3412 = !DILocation(line: 1588, column: 15, scope: !3413)
!3413 = distinct !DILexicalBlock(scope: !3408, file: !3, line: 1587, column: 5)
!3414 = !DILocation(line: 1588, column: 13, scope: !3413)
!3415 = !DILocation(line: 1589, column: 7, scope: !3413)
!3416 = !DILocation(line: 1590, column: 15, scope: !3413)
!3417 = !DILocation(line: 1590, column: 13, scope: !3413)
!3418 = !DILocation(line: 1591, column: 7, scope: !3413)
!3419 = !DILocation(line: 1592, column: 15, scope: !3413)
!3420 = !DILocation(line: 1592, column: 13, scope: !3413)
!3421 = !DILocation(line: 1593, column: 7, scope: !3413)
!3422 = !DILocation(line: 1594, column: 16, scope: !3413)
!3423 = !DILocation(line: 1594, column: 14, scope: !3413)
!3424 = !DILocation(line: 1595, column: 7, scope: !3413)
!3425 = !DILocation(line: 1596, column: 5, scope: !3413)
!3426 = !DILocation(line: 1586, column: 40, scope: !3408)
!3427 = !DILocation(line: 1586, column: 3, scope: !3408)
!3428 = distinct !{!3428, !3411, !3429}
!3429 = !DILocation(line: 1596, column: 5, scope: !3405)
!3430 = !DILocation(line: 1598, column: 30, scope: !3386)
!3431 = !DILocation(line: 1600, column: 3, scope: !3386)
!3432 = !DILocation(line: 1601, column: 3, scope: !3386)
!3433 = !DILocation(line: 1602, column: 1, scope: !3386)
!3434 = distinct !DISubprogram(name: "determine_invariantness", scope: !3, file: !3, line: 1006, type: !3291, scopeLine: 1007, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3435 = !DILocalVariable(name: "walk_data", scope: !3434, file: !3, line: 1008, type: !3436)
!3436 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dom_walk_data", file: !3437, line: 29, size: 512, elements: !3438)
!3437 = !DIFile(filename: "./domwalk.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3438 = !{!3439, !3440, !3445, !3449, !3450, !3451, !3465, !3466}
!3439 = !DIDerivedType(tag: DW_TAG_member, name: "dom_direction", scope: !3436, file: !3437, line: 35, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "initialize_block_local_data", scope: !3436, file: !3437, line: 46, baseType: !3441, size: 64, offset: 64)
!3441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3442, size: 64)
!3442 = !DISubroutineType(types: !3443)
!3443 = !{null, !3444, !2186, !1490}
!3444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3436, size: 64)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "before_dom_children", scope: !3436, file: !3437, line: 50, baseType: !3446, size: 64, offset: 128)
!3446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3447, size: 64)
!3447 = !DISubroutineType(types: !3448)
!3448 = !{null, !3444, !2186}
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "after_dom_children", scope: !3436, file: !3437, line: 53, baseType: !3446, size: 64, offset: 192)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "global_data", scope: !3436, file: !3437, line: 56, baseType: !1654, size: 64, offset: 256)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "block_data_stack", scope: !3436, file: !3437, line: 61, baseType: !3452, size: 64, offset: 320)
!3452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3453, size: 64)
!3453 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_void_p_heap", file: !3437, line: 23, baseType: !3454)
!3454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_void_p_heap", file: !3437, line: 23, size: 128, elements: !3455)
!3455 = !{!3456}
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3454, file: !3437, line: 23, baseType: !3457, size: 128)
!3457 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_void_p_base", file: !3437, line: 22, baseType: !3458)
!3458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_void_p_base", file: !3437, line: 22, size: 128, elements: !3459)
!3459 = !{!3460, !3461, !3462}
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3458, file: !3437, line: 22, baseType: !7, size: 32)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3458, file: !3437, line: 22, baseType: !7, size: 32, offset: 32)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3458, file: !3437, line: 22, baseType: !3463, size: 64, offset: 64)
!3463 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3464, size: 64, elements: !1471)
!3464 = !DIDerivedType(tag: DW_TAG_typedef, name: "void_p", file: !3437, line: 21, baseType: !1654)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "block_local_data_size", scope: !3436, file: !3437, line: 65, baseType: !1846, size: 64, offset: 384)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "free_block_data", scope: !3436, file: !3437, line: 71, baseType: !3452, size: 64, offset: 448)
!3467 = !DILocation(line: 1008, column: 24, scope: !3434)
!3468 = !DILocation(line: 1010, column: 3, scope: !3434)
!3469 = !DILocation(line: 1011, column: 13, scope: !3434)
!3470 = !DILocation(line: 1011, column: 27, scope: !3434)
!3471 = !DILocation(line: 1012, column: 13, scope: !3434)
!3472 = !DILocation(line: 1012, column: 33, scope: !3434)
!3473 = !DILocation(line: 1014, column: 3, scope: !3434)
!3474 = !DILocation(line: 1015, column: 36, scope: !3434)
!3475 = !DILocation(line: 1015, column: 3, scope: !3434)
!3476 = !DILocation(line: 1016, column: 3, scope: !3434)
!3477 = !DILocation(line: 1017, column: 1, scope: !3434)
!3478 = distinct !DISubprogram(name: "store_motion", scope: !3, file: !3, line: 2177, type: !3291, scopeLine: 2178, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3479 = !DILocalVariable(name: "loop", scope: !3478, file: !3, line: 2179, type: !1916)
!3480 = !DILocation(line: 2179, column: 16, scope: !3478)
!3481 = !DILocalVariable(name: "sm_executed", scope: !3478, file: !3, line: 2180, type: !2301)
!3482 = !DILocation(line: 2180, column: 10, scope: !3478)
!3483 = !DILocation(line: 2180, column: 24, scope: !3478)
!3484 = !DILocation(line: 2182, column: 15, scope: !3485)
!3485 = distinct !DILexicalBlock(scope: !3478, file: !3, line: 2182, column: 3)
!3486 = !DILocation(line: 2182, column: 30, scope: !3485)
!3487 = !DILocation(line: 2182, column: 41, scope: !3485)
!3488 = !DILocation(line: 2182, column: 13, scope: !3485)
!3489 = !DILocation(line: 2182, column: 8, scope: !3485)
!3490 = !DILocation(line: 2182, column: 48, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3485, file: !3, line: 2182, column: 3)
!3492 = !DILocation(line: 2182, column: 53, scope: !3491)
!3493 = !DILocation(line: 2182, column: 3, scope: !3485)
!3494 = !DILocation(line: 2183, column: 24, scope: !3491)
!3495 = !DILocation(line: 2183, column: 30, scope: !3491)
!3496 = !DILocation(line: 2183, column: 5, scope: !3491)
!3497 = !DILocation(line: 2182, column: 69, scope: !3491)
!3498 = !DILocation(line: 2182, column: 75, scope: !3491)
!3499 = !DILocation(line: 2182, column: 67, scope: !3491)
!3500 = !DILocation(line: 2182, column: 3, scope: !3491)
!3501 = distinct !{!3501, !3493, !3502}
!3502 = !DILocation(line: 2183, column: 41, scope: !3485)
!3503 = !DILocation(line: 2185, column: 3, scope: !3478)
!3504 = !DILocation(line: 2186, column: 3, scope: !3478)
!3505 = !DILocation(line: 2187, column: 1, scope: !3478)
!3506 = distinct !DISubprogram(name: "move_computations", scope: !3, file: !3, line: 1080, type: !3291, scopeLine: 1081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3507 = !DILocalVariable(name: "walk_data", scope: !3506, file: !3, line: 1082, type: !3436)
!3508 = !DILocation(line: 1082, column: 24, scope: !3506)
!3509 = !DILocation(line: 1084, column: 3, scope: !3506)
!3510 = !DILocation(line: 1085, column: 13, scope: !3506)
!3511 = !DILocation(line: 1085, column: 27, scope: !3506)
!3512 = !DILocation(line: 1086, column: 13, scope: !3506)
!3513 = !DILocation(line: 1086, column: 33, scope: !3506)
!3514 = !DILocation(line: 1088, column: 3, scope: !3506)
!3515 = !DILocation(line: 1089, column: 36, scope: !3506)
!3516 = !DILocation(line: 1089, column: 3, scope: !3506)
!3517 = !DILocation(line: 1090, column: 3, scope: !3506)
!3518 = !DILocation(line: 1092, column: 3, scope: !3506)
!3519 = !DILocation(line: 1093, column: 26, scope: !3520)
!3520 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 1093, column: 7)
!3521 = !DILocation(line: 1093, column: 7, scope: !3520)
!3522 = !DILocation(line: 1093, column: 7, scope: !3506)
!3523 = !DILocation(line: 1094, column: 5, scope: !3520)
!3524 = !DILocation(line: 1095, column: 1, scope: !3506)
!3525 = distinct !DISubprogram(name: "tree_ssa_lim_finalize", scope: !3, file: !3, line: 2291, type: !3291, scopeLine: 2292, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3526 = !DILocalVariable(name: "bb", scope: !3525, file: !3, line: 2293, type: !2186)
!3527 = !DILocation(line: 2293, column: 15, scope: !3525)
!3528 = !DILocalVariable(name: "i", scope: !3525, file: !3, line: 2294, type: !7)
!3529 = !DILocation(line: 2294, column: 12, scope: !3525)
!3530 = !DILocalVariable(name: "b", scope: !3525, file: !3, line: 2295, type: !2301)
!3531 = !DILocation(line: 2295, column: 10, scope: !3525)
!3532 = !DILocalVariable(name: "h", scope: !3525, file: !3, line: 2296, type: !2218)
!3533 = !DILocation(line: 2296, column: 10, scope: !3525)
!3534 = !DILocation(line: 2298, column: 3, scope: !3535)
!3535 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 2298, column: 3)
!3536 = !DILocation(line: 2298, column: 3, scope: !3537)
!3537 = distinct !DILexicalBlock(scope: !3535, file: !3, line: 2298, column: 3)
!3538 = !DILocation(line: 2300, column: 7, scope: !3539)
!3539 = distinct !DILexicalBlock(scope: !3537, file: !3, line: 2299, column: 5)
!3540 = !DILocation(line: 2300, column: 11, scope: !3539)
!3541 = !DILocation(line: 2300, column: 15, scope: !3539)
!3542 = !DILocation(line: 2301, column: 5, scope: !3539)
!3543 = distinct !{!3543, !3534, !3544}
!3544 = !DILocation(line: 2301, column: 5, scope: !3535)
!3545 = !DILocation(line: 2303, column: 24, scope: !3525)
!3546 = !DILocation(line: 2303, column: 3, scope: !3525)
!3547 = !DILocation(line: 2305, column: 3, scope: !3525)
!3548 = !DILocation(line: 2306, column: 32, scope: !3525)
!3549 = !DILocation(line: 2306, column: 3, scope: !3525)
!3550 = !DILocation(line: 2308, column: 10, scope: !3551)
!3551 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 2308, column: 3)
!3552 = !DILocation(line: 2308, column: 8, scope: !3551)
!3553 = !DILocation(line: 2308, column: 15, scope: !3554)
!3554 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 2308, column: 3)
!3555 = !DILocation(line: 2308, column: 3, scope: !3551)
!3556 = !DILocation(line: 2309, column: 5, scope: !3554)
!3557 = !DILocation(line: 2308, column: 74, scope: !3554)
!3558 = !DILocation(line: 2308, column: 3, scope: !3554)
!3559 = distinct !{!3559, !3555, !3560}
!3560 = !DILocation(line: 2309, column: 5, scope: !3551)
!3561 = !DILocation(line: 2310, column: 3, scope: !3525)
!3562 = !DILocation(line: 2312, column: 10, scope: !3563)
!3563 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 2312, column: 3)
!3564 = !DILocation(line: 2312, column: 8, scope: !3563)
!3565 = !DILocation(line: 2312, column: 15, scope: !3566)
!3566 = distinct !DILexicalBlock(scope: !3563, file: !3, line: 2312, column: 3)
!3567 = !DILocation(line: 2312, column: 3, scope: !3563)
!3568 = !DILocation(line: 2313, column: 5, scope: !3566)
!3569 = !DILocation(line: 2312, column: 78, scope: !3566)
!3570 = !DILocation(line: 2312, column: 3, scope: !3566)
!3571 = distinct !{!3571, !3567, !3572}
!3572 = !DILocation(line: 2313, column: 5, scope: !3563)
!3573 = !DILocation(line: 2314, column: 3, scope: !3525)
!3574 = !DILocation(line: 2316, column: 10, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 2316, column: 3)
!3576 = !DILocation(line: 2316, column: 8, scope: !3575)
!3577 = !DILocation(line: 2316, column: 15, scope: !3578)
!3578 = distinct !DILexicalBlock(scope: !3575, file: !3, line: 2316, column: 3)
!3579 = !DILocation(line: 2316, column: 3, scope: !3575)
!3580 = !DILocation(line: 2317, column: 5, scope: !3578)
!3581 = !DILocation(line: 2316, column: 76, scope: !3578)
!3582 = !DILocation(line: 2316, column: 3, scope: !3578)
!3583 = distinct !{!3583, !3579, !3584}
!3584 = !DILocation(line: 2317, column: 5, scope: !3575)
!3585 = !DILocation(line: 2318, column: 3, scope: !3525)
!3586 = !DILocation(line: 2320, column: 10, scope: !3587)
!3587 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 2320, column: 3)
!3588 = !DILocation(line: 2320, column: 8, scope: !3587)
!3589 = !DILocation(line: 2320, column: 15, scope: !3590)
!3590 = distinct !DILexicalBlock(scope: !3587, file: !3, line: 2320, column: 3)
!3591 = !DILocation(line: 2320, column: 3, scope: !3587)
!3592 = !DILocation(line: 2321, column: 18, scope: !3590)
!3593 = !DILocation(line: 2321, column: 5, scope: !3590)
!3594 = !DILocation(line: 2320, column: 73, scope: !3590)
!3595 = !DILocation(line: 2320, column: 3, scope: !3590)
!3596 = distinct !{!3596, !3591, !3597}
!3597 = !DILocation(line: 2321, column: 19, scope: !3587)
!3598 = !DILocation(line: 2322, column: 3, scope: !3525)
!3599 = !DILocation(line: 2324, column: 23, scope: !3600)
!3600 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 2324, column: 7)
!3601 = !DILocation(line: 2324, column: 7, scope: !3600)
!3602 = !DILocation(line: 2324, column: 7, scope: !3525)
!3603 = !DILocation(line: 2325, column: 42, scope: !3600)
!3604 = !DILocation(line: 2325, column: 5, scope: !3600)
!3605 = !DILocation(line: 2326, column: 1, scope: !3525)
!3606 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !397, file: !397, line: 1283, type: !3132, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3607 = !DILocalVariable(name: "g", arg: 1, scope: !3606, file: !397, line: 1283, type: !3109)
!3608 = !DILocation(line: 1283, column: 34, scope: !3606)
!3609 = !DILocation(line: 1285, column: 23, scope: !3606)
!3610 = !DILocation(line: 1285, column: 10, scope: !3606)
!3611 = !DILocation(line: 1285, column: 26, scope: !3606)
!3612 = !DILocation(line: 1285, column: 43, scope: !3606)
!3613 = !DILocation(line: 1285, column: 59, scope: !3606)
!3614 = !DILocation(line: 1285, column: 46, scope: !3606)
!3615 = !DILocation(line: 1285, column: 62, scope: !3606)
!3616 = !DILocation(line: 0, scope: !3606)
!3617 = !DILocation(line: 1285, column: 3, scope: !3606)
!3618 = distinct !DISubprogram(name: "gimple_op", scope: !397, file: !397, line: 1631, type: !3619, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3619 = !DISubroutineType(types: !3620)
!3620 = !{!1370, !3109, !7}
!3621 = !DILocalVariable(name: "gs", arg: 1, scope: !3618, file: !397, line: 1631, type: !3109)
!3622 = !DILocation(line: 1631, column: 25, scope: !3618)
!3623 = !DILocalVariable(name: "i", arg: 2, scope: !3618, file: !397, line: 1631, type: !7)
!3624 = !DILocation(line: 1631, column: 38, scope: !3618)
!3625 = !DILocation(line: 1633, column: 23, scope: !3626)
!3626 = distinct !DILexicalBlock(scope: !3618, file: !397, line: 1633, column: 7)
!3627 = !DILocation(line: 1633, column: 7, scope: !3626)
!3628 = !DILocation(line: 1633, column: 7, scope: !3618)
!3629 = !DILocation(line: 1638, column: 26, scope: !3630)
!3630 = distinct !DILexicalBlock(scope: !3626, file: !397, line: 1634, column: 5)
!3631 = !DILocation(line: 1638, column: 14, scope: !3630)
!3632 = !DILocation(line: 1638, column: 50, scope: !3630)
!3633 = !DILocation(line: 1638, column: 7, scope: !3630)
!3634 = !DILocation(line: 1641, column: 5, scope: !3626)
!3635 = !DILocation(line: 1642, column: 1, scope: !3618)
!3636 = distinct !DISubprogram(name: "gimple_has_ops", scope: !397, file: !397, line: 1274, type: !3132, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3637 = !DILocalVariable(name: "g", arg: 1, scope: !3636, file: !397, line: 1274, type: !3109)
!3638 = !DILocation(line: 1274, column: 30, scope: !3636)
!3639 = !DILocation(line: 1276, column: 23, scope: !3636)
!3640 = !DILocation(line: 1276, column: 10, scope: !3636)
!3641 = !DILocation(line: 1276, column: 26, scope: !3636)
!3642 = !DILocation(line: 1276, column: 41, scope: !3636)
!3643 = !DILocation(line: 1276, column: 57, scope: !3636)
!3644 = !DILocation(line: 1276, column: 44, scope: !3636)
!3645 = !DILocation(line: 1276, column: 60, scope: !3636)
!3646 = !DILocation(line: 0, scope: !3636)
!3647 = !DILocation(line: 1276, column: 3, scope: !3636)
!3648 = distinct !DISubprogram(name: "gimple_ops", scope: !397, file: !397, line: 1614, type: !3649, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3649 = !DISubroutineType(types: !3650)
!3650 = !{!1735, !1701}
!3651 = !DILocalVariable(name: "gs", arg: 1, scope: !3648, file: !397, line: 1614, type: !1701)
!3652 = !DILocation(line: 1614, column: 20, scope: !3648)
!3653 = !DILocalVariable(name: "off", scope: !3648, file: !397, line: 1616, type: !1846)
!3654 = !DILocation(line: 1616, column: 10, scope: !3648)
!3655 = !DILocation(line: 1621, column: 56, scope: !3648)
!3656 = !DILocation(line: 1621, column: 28, scope: !3648)
!3657 = !DILocation(line: 1621, column: 9, scope: !3648)
!3658 = !DILocation(line: 1621, column: 7, scope: !3648)
!3659 = !DILocation(line: 1622, column: 3, scope: !3648)
!3660 = !DILocation(line: 1624, column: 29, scope: !3648)
!3661 = !DILocation(line: 1624, column: 20, scope: !3648)
!3662 = !DILocation(line: 1624, column: 34, scope: !3648)
!3663 = !DILocation(line: 1624, column: 32, scope: !3648)
!3664 = !DILocation(line: 1624, column: 10, scope: !3648)
!3665 = !DILocation(line: 1624, column: 3, scope: !3648)
!3666 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !397, file: !397, line: 1073, type: !3667, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3667 = !DISubroutineType(types: !3668)
!3668 = !{!435, !1701}
!3669 = !DILocalVariable(name: "gs", arg: 1, scope: !3666, file: !397, line: 1073, type: !1701)
!3670 = !DILocation(line: 1073, column: 36, scope: !3666)
!3671 = !DILocation(line: 1075, column: 37, scope: !3666)
!3672 = !DILocation(line: 1075, column: 24, scope: !3666)
!3673 = !DILocation(line: 1075, column: 10, scope: !3666)
!3674 = !DILocation(line: 1075, column: 3, scope: !3666)
!3675 = distinct !DISubprogram(name: "gss_for_code", scope: !397, file: !397, line: 1061, type: !3676, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3676 = !DISubroutineType(types: !3677)
!3677 = !{!435, !396}
!3678 = !DILocalVariable(name: "code", arg: 1, scope: !3675, file: !397, line: 1061, type: !396)
!3679 = !DILocation(line: 1061, column: 32, scope: !3675)
!3680 = !DILocation(line: 1066, column: 24, scope: !3675)
!3681 = !DILocation(line: 1066, column: 10, scope: !3675)
!3682 = !DILocation(line: 1066, column: 3, scope: !3675)
!3683 = distinct !DISubprogram(name: "gsi_start_bb", scope: !397, file: !397, line: 4418, type: !3684, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3684 = !DISubroutineType(types: !3685)
!3685 = !{!3317, !2186}
!3686 = !DILocalVariable(name: "bb", arg: 1, scope: !3683, file: !397, line: 4418, type: !2186)
!3687 = !DILocation(line: 4418, column: 27, scope: !3683)
!3688 = !DILocalVariable(name: "i", scope: !3683, file: !397, line: 4420, type: !3317)
!3689 = !DILocation(line: 4420, column: 24, scope: !3683)
!3690 = !DILocalVariable(name: "seq", scope: !3683, file: !397, line: 4421, type: !1691)
!3691 = !DILocation(line: 4421, column: 14, scope: !3683)
!3692 = !DILocation(line: 4423, column: 17, scope: !3683)
!3693 = !DILocation(line: 4423, column: 9, scope: !3683)
!3694 = !DILocation(line: 4423, column: 7, scope: !3683)
!3695 = !DILocation(line: 4424, column: 29, scope: !3683)
!3696 = !DILocation(line: 4424, column: 11, scope: !3683)
!3697 = !DILocation(line: 4424, column: 5, scope: !3683)
!3698 = !DILocation(line: 4424, column: 9, scope: !3683)
!3699 = !DILocation(line: 4425, column: 11, scope: !3683)
!3700 = !DILocation(line: 4425, column: 5, scope: !3683)
!3701 = !DILocation(line: 4425, column: 9, scope: !3683)
!3702 = !DILocation(line: 4426, column: 10, scope: !3683)
!3703 = !DILocation(line: 4426, column: 5, scope: !3683)
!3704 = !DILocation(line: 4426, column: 8, scope: !3683)
!3705 = !DILocation(line: 4428, column: 3, scope: !3683)
!3706 = distinct !DISubprogram(name: "gsi_end_p", scope: !397, file: !397, line: 4467, type: !3707, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3707 = !DISubroutineType(types: !3708)
!3708 = !{!1490, !3317}
!3709 = !DILocalVariable(name: "i", arg: 1, scope: !3706, file: !397, line: 4467, type: !3317)
!3710 = !DILocation(line: 4467, column: 33, scope: !3706)
!3711 = !DILocation(line: 4469, column: 12, scope: !3706)
!3712 = !DILocation(line: 4469, column: 16, scope: !3706)
!3713 = !DILocation(line: 4469, column: 10, scope: !3706)
!3714 = !DILocation(line: 4469, column: 3, scope: !3706)
!3715 = distinct !DISubprogram(name: "nonpure_call_p", scope: !3, file: !3, line: 751, type: !3716, scopeLine: 752, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3716 = !DISubroutineType(types: !3717)
!3717 = !{!1490, !1701}
!3718 = !DILocalVariable(name: "stmt", arg: 1, scope: !3715, file: !3, line: 751, type: !1701)
!3719 = !DILocation(line: 751, column: 24, scope: !3715)
!3720 = !DILocation(line: 753, column: 20, scope: !3721)
!3721 = distinct !DILexicalBlock(scope: !3715, file: !3, line: 753, column: 7)
!3722 = !DILocation(line: 753, column: 7, scope: !3721)
!3723 = !DILocation(line: 753, column: 26, scope: !3721)
!3724 = !DILocation(line: 753, column: 7, scope: !3715)
!3725 = !DILocation(line: 754, column: 5, scope: !3721)
!3726 = !DILocation(line: 756, column: 35, scope: !3715)
!3727 = !DILocation(line: 756, column: 10, scope: !3715)
!3728 = !DILocation(line: 756, column: 3, scope: !3715)
!3729 = !DILocation(line: 757, column: 1, scope: !3715)
!3730 = distinct !DISubprogram(name: "gsi_stmt", scope: !397, file: !397, line: 4501, type: !3731, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3731 = !DISubroutineType(types: !3732)
!3732 = !{!1701, !3317}
!3733 = !DILocalVariable(name: "i", arg: 1, scope: !3730, file: !397, line: 4501, type: !3317)
!3734 = !DILocation(line: 4501, column: 32, scope: !3730)
!3735 = !DILocation(line: 4503, column: 12, scope: !3730)
!3736 = !DILocation(line: 4503, column: 17, scope: !3730)
!3737 = !DILocation(line: 4503, column: 3, scope: !3730)
!3738 = distinct !DISubprogram(name: "gsi_next", scope: !397, file: !397, line: 4485, type: !3739, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3739 = !DISubroutineType(types: !3740)
!3740 = !{null, !3741}
!3741 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3317, size: 64)
!3742 = !DILocalVariable(name: "i", arg: 1, scope: !3738, file: !397, line: 4485, type: !3741)
!3743 = !DILocation(line: 4485, column: 33, scope: !3738)
!3744 = !DILocation(line: 4487, column: 12, scope: !3738)
!3745 = !DILocation(line: 4487, column: 15, scope: !3738)
!3746 = !DILocation(line: 4487, column: 20, scope: !3738)
!3747 = !DILocation(line: 4487, column: 3, scope: !3738)
!3748 = !DILocation(line: 4487, column: 6, scope: !3738)
!3749 = !DILocation(line: 4487, column: 10, scope: !3738)
!3750 = !DILocation(line: 4488, column: 1, scope: !3738)
!3751 = distinct !DISubprogram(name: "SET_BIT", scope: !3303, file: !3303, line: 63, type: !3752, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3752 = !DISubroutineType(types: !3753)
!3753 = !{null, !3302, !7}
!3754 = !DILocalVariable(name: "map", arg: 1, scope: !3751, file: !3303, line: 63, type: !3302)
!3755 = !DILocation(line: 63, column: 18, scope: !3751)
!3756 = !DILocalVariable(name: "bitno", arg: 2, scope: !3751, file: !3303, line: 63, type: !7)
!3757 = !DILocation(line: 63, column: 36, scope: !3751)
!3758 = !DILocation(line: 65, column: 7, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3751, file: !3303, line: 65, column: 7)
!3760 = !DILocation(line: 65, column: 12, scope: !3759)
!3761 = !DILocation(line: 65, column: 7, scope: !3751)
!3762 = !DILocalVariable(name: "oldbit", scope: !3763, file: !3303, line: 67, type: !1490)
!3763 = distinct !DILexicalBlock(scope: !3759, file: !3303, line: 66, column: 5)
!3764 = !DILocation(line: 67, column: 12, scope: !3763)
!3765 = !DILocation(line: 68, column: 16, scope: !3763)
!3766 = !DILocation(line: 68, column: 14, scope: !3763)
!3767 = !DILocation(line: 69, column: 12, scope: !3768)
!3768 = distinct !DILexicalBlock(scope: !3763, file: !3303, line: 69, column: 11)
!3769 = !DILocation(line: 69, column: 11, scope: !3763)
!3770 = !DILocation(line: 70, column: 2, scope: !3768)
!3771 = !DILocation(line: 70, column: 7, scope: !3768)
!3772 = !DILocation(line: 70, column: 16, scope: !3768)
!3773 = !DILocation(line: 70, column: 22, scope: !3768)
!3774 = !DILocation(line: 70, column: 41, scope: !3768)
!3775 = !DILocation(line: 71, column: 5, scope: !3763)
!3776 = !DILocation(line: 73, column: 33, scope: !3751)
!3777 = !DILocation(line: 73, column: 40, scope: !3751)
!3778 = !DILocation(line: 73, column: 29, scope: !3751)
!3779 = !DILocation(line: 72, column: 3, scope: !3751)
!3780 = !DILocation(line: 72, column: 8, scope: !3751)
!3781 = !DILocation(line: 72, column: 13, scope: !3751)
!3782 = !DILocation(line: 72, column: 19, scope: !3751)
!3783 = !DILocation(line: 73, column: 5, scope: !3751)
!3784 = !DILocation(line: 74, column: 1, scope: !3751)
!3785 = distinct !DISubprogram(name: "fill_always_executed_in", scope: !3, file: !3, line: 2195, type: !3786, scopeLine: 2196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3786 = !DISubroutineType(types: !3787)
!3787 = !{null, !1916, !3302}
!3788 = !DILocalVariable(name: "loop", arg: 1, scope: !3785, file: !3, line: 2195, type: !1916)
!3789 = !DILocation(line: 2195, column: 39, scope: !3785)
!3790 = !DILocalVariable(name: "contains_call", arg: 2, scope: !3785, file: !3, line: 2195, type: !3302)
!3791 = !DILocation(line: 2195, column: 53, scope: !3785)
!3792 = !DILocalVariable(name: "bb", scope: !3785, file: !3, line: 2197, type: !2186)
!3793 = !DILocation(line: 2197, column: 15, scope: !3785)
!3794 = !DILocalVariable(name: "bbs", scope: !3785, file: !3, line: 2197, type: !3795)
!3795 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2186, size: 64)
!3796 = !DILocation(line: 2197, column: 27, scope: !3785)
!3797 = !DILocalVariable(name: "last", scope: !3785, file: !3, line: 2197, type: !2186)
!3798 = !DILocation(line: 2197, column: 32, scope: !3785)
!3799 = !DILocalVariable(name: "i", scope: !3785, file: !3, line: 2198, type: !7)
!3800 = !DILocation(line: 2198, column: 12, scope: !3785)
!3801 = !DILocalVariable(name: "e", scope: !3785, file: !3, line: 2199, type: !1681)
!3802 = !DILocation(line: 2199, column: 8, scope: !3785)
!3803 = !DILocalVariable(name: "inn_loop", scope: !3785, file: !3, line: 2200, type: !1916)
!3804 = !DILocation(line: 2200, column: 16, scope: !3785)
!3805 = !DILocation(line: 2200, column: 27, scope: !3785)
!3806 = !DILocation(line: 2202, column: 8, scope: !3807)
!3807 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 2202, column: 7)
!3808 = !DILocation(line: 2202, column: 14, scope: !3807)
!3809 = !DILocation(line: 2202, column: 22, scope: !3807)
!3810 = !DILocation(line: 2202, column: 7, scope: !3785)
!3811 = !DILocation(line: 2204, column: 41, scope: !3812)
!3812 = distinct !DILexicalBlock(scope: !3807, file: !3, line: 2203, column: 5)
!3813 = !DILocation(line: 2204, column: 13, scope: !3812)
!3814 = !DILocation(line: 2204, column: 11, scope: !3812)
!3815 = !DILocation(line: 2206, column: 14, scope: !3816)
!3816 = distinct !DILexicalBlock(scope: !3812, file: !3, line: 2206, column: 7)
!3817 = !DILocation(line: 2206, column: 12, scope: !3816)
!3818 = !DILocation(line: 2206, column: 19, scope: !3819)
!3819 = distinct !DILexicalBlock(scope: !3816, file: !3, line: 2206, column: 7)
!3820 = !DILocation(line: 2206, column: 23, scope: !3819)
!3821 = !DILocation(line: 2206, column: 29, scope: !3819)
!3822 = !DILocation(line: 2206, column: 21, scope: !3819)
!3823 = !DILocation(line: 2206, column: 7, scope: !3816)
!3824 = !DILocalVariable(name: "ei", scope: !3825, file: !3, line: 2208, type: !3826)
!3825 = distinct !DILexicalBlock(scope: !3819, file: !3, line: 2207, column: 2)
!3826 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !343, line: 682, baseType: !3827)
!3827 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 679, size: 128, elements: !3828)
!3828 = !{!3829, !3830}
!3829 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3827, file: !343, line: 680, baseType: !7, size: 32)
!3830 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !3827, file: !343, line: 681, baseType: !3831, size: 64, offset: 64)
!3831 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1669, size: 64)
!3832 = !DILocation(line: 2208, column: 18, scope: !3825)
!3833 = !DILocation(line: 2209, column: 9, scope: !3825)
!3834 = !DILocation(line: 2209, column: 13, scope: !3825)
!3835 = !DILocation(line: 2209, column: 7, scope: !3825)
!3836 = !DILocation(line: 2211, column: 40, scope: !3837)
!3837 = distinct !DILexicalBlock(scope: !3825, file: !3, line: 2211, column: 8)
!3838 = !DILocation(line: 2211, column: 46, scope: !3837)
!3839 = !DILocation(line: 2211, column: 53, scope: !3837)
!3840 = !DILocation(line: 2211, column: 8, scope: !3837)
!3841 = !DILocation(line: 2211, column: 8, scope: !3825)
!3842 = !DILocation(line: 2212, column: 13, scope: !3837)
!3843 = !DILocation(line: 2212, column: 11, scope: !3837)
!3844 = !DILocation(line: 2212, column: 6, scope: !3837)
!3845 = !DILocation(line: 2214, column: 8, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3825, file: !3, line: 2214, column: 8)
!3847 = !DILocation(line: 2214, column: 8, scope: !3825)
!3848 = !DILocation(line: 2215, column: 6, scope: !3846)
!3849 = !DILocation(line: 2217, column: 4, scope: !3850)
!3850 = distinct !DILexicalBlock(scope: !3825, file: !3, line: 2217, column: 4)
!3851 = !DILocation(line: 2217, column: 4, scope: !3852)
!3852 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 2217, column: 4)
!3853 = !DILocation(line: 2218, column: 34, scope: !3854)
!3854 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 2218, column: 10)
!3855 = !DILocation(line: 2218, column: 40, scope: !3854)
!3856 = !DILocation(line: 2218, column: 43, scope: !3854)
!3857 = !DILocation(line: 2218, column: 11, scope: !3854)
!3858 = !DILocation(line: 2218, column: 10, scope: !3852)
!3859 = !DILocation(line: 2219, column: 8, scope: !3854)
!3860 = !DILocation(line: 2218, column: 47, scope: !3854)
!3861 = distinct !{!3861, !3849, !3862}
!3862 = !DILocation(line: 2219, column: 8, scope: !3850)
!3863 = !DILocation(line: 2220, column: 8, scope: !3864)
!3864 = distinct !DILexicalBlock(scope: !3825, file: !3, line: 2220, column: 8)
!3865 = !DILocation(line: 2220, column: 8, scope: !3825)
!3866 = !DILocation(line: 2221, column: 6, scope: !3864)
!3867 = !DILocation(line: 2225, column: 8, scope: !3868)
!3868 = distinct !DILexicalBlock(scope: !3825, file: !3, line: 2225, column: 8)
!3869 = !DILocation(line: 2225, column: 12, scope: !3868)
!3870 = !DILocation(line: 2225, column: 18, scope: !3868)
!3871 = !DILocation(line: 2225, column: 8, scope: !3825)
!3872 = !DILocation(line: 2226, column: 6, scope: !3868)
!3873 = !DILocation(line: 2228, column: 32, scope: !3874)
!3874 = distinct !DILexicalBlock(scope: !3825, file: !3, line: 2228, column: 8)
!3875 = !DILocation(line: 2228, column: 42, scope: !3874)
!3876 = !DILocation(line: 2228, column: 9, scope: !3874)
!3877 = !DILocation(line: 2228, column: 8, scope: !3825)
!3878 = !DILocation(line: 2229, column: 6, scope: !3874)
!3879 = !DILocation(line: 2231, column: 8, scope: !3880)
!3880 = distinct !DILexicalBlock(scope: !3825, file: !3, line: 2231, column: 8)
!3881 = !DILocation(line: 2231, column: 12, scope: !3880)
!3882 = !DILocation(line: 2231, column: 25, scope: !3880)
!3883 = !DILocation(line: 2231, column: 35, scope: !3880)
!3884 = !DILocation(line: 2231, column: 32, scope: !3880)
!3885 = !DILocation(line: 2231, column: 8, scope: !3825)
!3886 = !DILocation(line: 2233, column: 45, scope: !3887)
!3887 = distinct !DILexicalBlock(scope: !3888, file: !3, line: 2233, column: 12)
!3888 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 2232, column: 6)
!3889 = !DILocation(line: 2233, column: 51, scope: !3887)
!3890 = !DILocation(line: 2233, column: 58, scope: !3887)
!3891 = !DILocation(line: 2233, column: 13, scope: !3887)
!3892 = !DILocation(line: 2233, column: 12, scope: !3888)
!3893 = !DILocation(line: 2234, column: 3, scope: !3887)
!3894 = !DILocation(line: 2238, column: 19, scope: !3888)
!3895 = !DILocation(line: 2238, column: 23, scope: !3888)
!3896 = !DILocation(line: 2238, column: 17, scope: !3888)
!3897 = !DILocation(line: 2239, column: 6, scope: !3888)
!3898 = !DILocation(line: 2240, column: 2, scope: !3825)
!3899 = !DILocation(line: 2206, column: 41, scope: !3819)
!3900 = !DILocation(line: 2206, column: 7, scope: !3819)
!3901 = distinct !{!3901, !3823, !3902}
!3902 = !DILocation(line: 2240, column: 2, scope: !3816)
!3903 = !DILocation(line: 2242, column: 7, scope: !3812)
!3904 = !DILocation(line: 2244, column: 16, scope: !3905)
!3905 = distinct !DILexicalBlock(scope: !3812, file: !3, line: 2243, column: 2)
!3906 = !DILocation(line: 2244, column: 4, scope: !3905)
!3907 = !DILocation(line: 2244, column: 10, scope: !3905)
!3908 = !DILocation(line: 2244, column: 14, scope: !3905)
!3909 = !DILocation(line: 2245, column: 8, scope: !3910)
!3910 = distinct !DILexicalBlock(scope: !3905, file: !3, line: 2245, column: 8)
!3911 = !DILocation(line: 2245, column: 16, scope: !3910)
!3912 = !DILocation(line: 2245, column: 22, scope: !3910)
!3913 = !DILocation(line: 2245, column: 13, scope: !3910)
!3914 = !DILocation(line: 2245, column: 8, scope: !3905)
!3915 = !DILocation(line: 2246, column: 6, scope: !3910)
!3916 = !DILocation(line: 2247, column: 52, scope: !3905)
!3917 = !DILocation(line: 2247, column: 11, scope: !3905)
!3918 = !DILocation(line: 2247, column: 9, scope: !3905)
!3919 = distinct !{!3919, !3903, !3920}
!3920 = !DILocation(line: 2248, column: 2, scope: !3812)
!3921 = !DILocation(line: 2250, column: 13, scope: !3812)
!3922 = !DILocation(line: 2250, column: 7, scope: !3812)
!3923 = !DILocation(line: 2251, column: 5, scope: !3812)
!3924 = !DILocation(line: 2253, column: 15, scope: !3925)
!3925 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 2253, column: 3)
!3926 = !DILocation(line: 2253, column: 21, scope: !3925)
!3927 = !DILocation(line: 2253, column: 13, scope: !3925)
!3928 = !DILocation(line: 2253, column: 8, scope: !3925)
!3929 = !DILocation(line: 2253, column: 28, scope: !3930)
!3930 = distinct !DILexicalBlock(scope: !3925, file: !3, line: 2253, column: 3)
!3931 = !DILocation(line: 2253, column: 3, scope: !3925)
!3932 = !DILocation(line: 2254, column: 30, scope: !3930)
!3933 = !DILocation(line: 2254, column: 36, scope: !3930)
!3934 = !DILocation(line: 2254, column: 5, scope: !3930)
!3935 = !DILocation(line: 2253, column: 41, scope: !3930)
!3936 = !DILocation(line: 2253, column: 47, scope: !3930)
!3937 = !DILocation(line: 2253, column: 39, scope: !3930)
!3938 = !DILocation(line: 2253, column: 3, scope: !3930)
!3939 = distinct !{!3939, !3931, !3940}
!3940 = !DILocation(line: 2254, column: 49, scope: !3925)
!3941 = !DILocation(line: 2255, column: 1, scope: !3785)
!3942 = distinct !DISubprogram(name: "bb_seq", scope: !397, file: !397, line: 237, type: !3943, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3943 = !DISubroutineType(types: !3944)
!3944 = !{!1691, !3945}
!3945 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1371, line: 112, baseType: !3946)
!3946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3947, size: 64)
!3947 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1666)
!3948 = !DILocalVariable(name: "bb", arg: 1, scope: !3942, file: !397, line: 237, type: !3945)
!3949 = !DILocation(line: 237, column: 27, scope: !3942)
!3950 = !DILocation(line: 239, column: 13, scope: !3942)
!3951 = !DILocation(line: 239, column: 17, scope: !3942)
!3952 = !DILocation(line: 239, column: 23, scope: !3942)
!3953 = !DILocation(line: 239, column: 33, scope: !3942)
!3954 = !DILocation(line: 239, column: 36, scope: !3942)
!3955 = !DILocation(line: 239, column: 40, scope: !3942)
!3956 = !DILocation(line: 239, column: 43, scope: !3942)
!3957 = !DILocation(line: 239, column: 10, scope: !3942)
!3958 = !DILocation(line: 239, column: 53, scope: !3942)
!3959 = !DILocation(line: 239, column: 57, scope: !3942)
!3960 = !DILocation(line: 239, column: 60, scope: !3942)
!3961 = !DILocation(line: 239, column: 68, scope: !3942)
!3962 = !DILocation(line: 239, column: 3, scope: !3942)
!3963 = distinct !DISubprogram(name: "gimple_seq_first", scope: !397, file: !397, line: 159, type: !3964, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3964 = !DISubroutineType(types: !3965)
!3965 = !{!1696, !3966}
!3966 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1371, line: 67, baseType: !3967)
!3967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3968, size: 64)
!3968 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1693)
!3969 = !DILocalVariable(name: "s", arg: 1, scope: !3963, file: !397, line: 159, type: !3966)
!3970 = !DILocation(line: 159, column: 36, scope: !3963)
!3971 = !DILocation(line: 161, column: 10, scope: !3963)
!3972 = !DILocation(line: 161, column: 14, scope: !3963)
!3973 = !DILocation(line: 161, column: 17, scope: !3963)
!3974 = !DILocation(line: 161, column: 3, scope: !3963)
!3975 = distinct !DISubprogram(name: "ei_start_1", scope: !343, file: !343, line: 696, type: !3976, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3976 = !DISubroutineType(types: !3977)
!3977 = !{!3826, !3831}
!3978 = !DILocalVariable(name: "ev", arg: 1, scope: !3975, file: !343, line: 696, type: !3831)
!3979 = !DILocation(line: 696, column: 28, scope: !3975)
!3980 = !DILocalVariable(name: "i", scope: !3975, file: !343, line: 698, type: !3826)
!3981 = !DILocation(line: 698, column: 17, scope: !3975)
!3982 = !DILocation(line: 700, column: 5, scope: !3975)
!3983 = !DILocation(line: 700, column: 11, scope: !3975)
!3984 = !DILocation(line: 701, column: 17, scope: !3975)
!3985 = !DILocation(line: 701, column: 5, scope: !3975)
!3986 = !DILocation(line: 701, column: 15, scope: !3975)
!3987 = !DILocation(line: 703, column: 3, scope: !3975)
!3988 = distinct !DISubprogram(name: "ei_cond", scope: !343, file: !343, line: 771, type: !3989, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!3989 = !DISubroutineType(types: !3990)
!3990 = !{!1490, !3826, !3991}
!3991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1681, size: 64)
!3992 = !DILocalVariable(name: "ei", arg: 1, scope: !3988, file: !343, line: 771, type: !3826)
!3993 = !DILocation(line: 771, column: 24, scope: !3988)
!3994 = !DILocalVariable(name: "p", arg: 2, scope: !3988, file: !343, line: 771, type: !3991)
!3995 = !DILocation(line: 771, column: 34, scope: !3988)
!3996 = !DILocation(line: 773, column: 8, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3988, file: !343, line: 773, column: 7)
!3998 = !DILocation(line: 773, column: 7, scope: !3988)
!3999 = !DILocation(line: 775, column: 12, scope: !4000)
!4000 = distinct !DILexicalBlock(scope: !3997, file: !343, line: 774, column: 5)
!4001 = !DILocation(line: 775, column: 8, scope: !4000)
!4002 = !DILocation(line: 775, column: 10, scope: !4000)
!4003 = !DILocation(line: 776, column: 7, scope: !4000)
!4004 = !DILocation(line: 780, column: 8, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !3997, file: !343, line: 779, column: 5)
!4006 = !DILocation(line: 780, column: 10, scope: !4005)
!4007 = !DILocation(line: 781, column: 7, scope: !4005)
!4008 = !DILocation(line: 783, column: 1, scope: !3988)
!4009 = distinct !DISubprogram(name: "ei_next", scope: !343, file: !343, line: 736, type: !4010, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4010 = !DISubroutineType(types: !4011)
!4011 = !{null, !4012}
!4012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3826, size: 64)
!4013 = !DILocalVariable(name: "i", arg: 1, scope: !4009, file: !343, line: 736, type: !4012)
!4014 = !DILocation(line: 736, column: 25, scope: !4009)
!4015 = !DILocation(line: 738, column: 3, scope: !4009)
!4016 = !DILocation(line: 739, column: 3, scope: !4009)
!4017 = !DILocation(line: 739, column: 6, scope: !4009)
!4018 = !DILocation(line: 739, column: 11, scope: !4009)
!4019 = !DILocation(line: 740, column: 1, scope: !4009)
!4020 = distinct !DISubprogram(name: "ei_end_p", scope: !343, file: !343, line: 721, type: !4021, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4021 = !DISubroutineType(types: !4022)
!4022 = !{!1490, !3826}
!4023 = !DILocalVariable(name: "i", arg: 1, scope: !4020, file: !343, line: 721, type: !3826)
!4024 = !DILocation(line: 721, column: 25, scope: !4020)
!4025 = !DILocation(line: 723, column: 13, scope: !4020)
!4026 = !DILocation(line: 723, column: 22, scope: !4020)
!4027 = !DILocation(line: 723, column: 19, scope: !4020)
!4028 = !DILocation(line: 723, column: 10, scope: !4020)
!4029 = !DILocation(line: 723, column: 3, scope: !4020)
!4030 = distinct !DISubprogram(name: "ei_edge", scope: !343, file: !343, line: 752, type: !4031, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4031 = !DISubroutineType(types: !4032)
!4032 = !{!1681, !3826}
!4033 = !DILocalVariable(name: "i", arg: 1, scope: !4030, file: !343, line: 752, type: !3826)
!4034 = !DILocation(line: 752, column: 24, scope: !4030)
!4035 = !DILocation(line: 754, column: 10, scope: !4030)
!4036 = !DILocation(line: 754, column: 3, scope: !4030)
!4037 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !343, file: !343, line: 150, type: !4038, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4038 = !DISubroutineType(types: !4039)
!4039 = !{!7, !4040}
!4040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4041, size: 64)
!4041 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1674)
!4042 = !DILocalVariable(name: "vec_", arg: 1, scope: !4037, file: !343, line: 150, type: !4040)
!4043 = !DILocation(line: 150, column: 1, scope: !4037)
!4044 = distinct !DISubprogram(name: "ei_container", scope: !343, file: !343, line: 685, type: !4045, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4045 = !DISubroutineType(types: !4046)
!4046 = !{!1669, !3826}
!4047 = !DILocalVariable(name: "i", arg: 1, scope: !4044, file: !343, line: 685, type: !3826)
!4048 = !DILocation(line: 685, column: 29, scope: !4044)
!4049 = !DILocation(line: 687, column: 3, scope: !4044)
!4050 = !DILocation(line: 688, column: 13, scope: !4044)
!4051 = !DILocation(line: 688, column: 10, scope: !4044)
!4052 = !DILocation(line: 688, column: 3, scope: !4044)
!4053 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !343, file: !343, line: 150, type: !4054, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4054 = !DISubroutineType(types: !4055)
!4055 = !{!1681, !4040, !7}
!4056 = !DILocalVariable(name: "vec_", arg: 1, scope: !4053, file: !343, line: 150, type: !4040)
!4057 = !DILocation(line: 150, column: 1, scope: !4053)
!4058 = !DILocalVariable(name: "ix_", arg: 2, scope: !4053, file: !343, line: 150, type: !7)
!4059 = !DILocation(line: 0, scope: !4053)
!4060 = distinct !DISubprogram(name: "memref_hash", scope: !3, file: !3, line: 1181, type: !2225, scopeLine: 1182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4061 = !DILocalVariable(name: "obj", arg: 1, scope: !4060, file: !3, line: 1181, type: !2060)
!4062 = !DILocation(line: 1181, column: 26, scope: !4060)
!4063 = !DILocalVariable(name: "mem", scope: !4060, file: !3, line: 1183, type: !4064)
!4064 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2761)
!4065 = !DILocation(line: 1183, column: 31, scope: !4060)
!4066 = !DILocation(line: 1183, column: 62, scope: !4060)
!4067 = !DILocation(line: 1183, column: 37, scope: !4060)
!4068 = !DILocation(line: 1185, column: 10, scope: !4060)
!4069 = !DILocation(line: 1185, column: 15, scope: !4060)
!4070 = !DILocation(line: 1185, column: 3, scope: !4060)
!4071 = distinct !DISubprogram(name: "memref_eq", scope: !3, file: !3, line: 1192, type: !2231, scopeLine: 1193, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4072 = !DILocalVariable(name: "obj1", arg: 1, scope: !4071, file: !3, line: 1192, type: !2060)
!4073 = !DILocation(line: 1192, column: 24, scope: !4071)
!4074 = !DILocalVariable(name: "obj2", arg: 2, scope: !4071, file: !3, line: 1192, type: !2060)
!4075 = !DILocation(line: 1192, column: 42, scope: !4071)
!4076 = !DILocalVariable(name: "mem1", scope: !4071, file: !3, line: 1194, type: !4064)
!4077 = !DILocation(line: 1194, column: 31, scope: !4071)
!4078 = !DILocation(line: 1194, column: 63, scope: !4071)
!4079 = !DILocation(line: 1194, column: 38, scope: !4071)
!4080 = !DILocation(line: 1196, column: 27, scope: !4071)
!4081 = !DILocation(line: 1196, column: 33, scope: !4071)
!4082 = !DILocation(line: 1196, column: 51, scope: !4071)
!4083 = !DILocation(line: 1196, column: 38, scope: !4071)
!4084 = !DILocation(line: 1196, column: 10, scope: !4071)
!4085 = !DILocation(line: 1196, column: 3, scope: !4071)
!4086 = distinct !DISubprogram(name: "memref_free", scope: !3, file: !3, line: 1219, type: !2236, scopeLine: 1220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4087 = !DILocalVariable(name: "obj", arg: 1, scope: !4086, file: !3, line: 1219, type: !1654)
!4088 = !DILocation(line: 1219, column: 20, scope: !4086)
!4089 = !DILocalVariable(name: "mem", scope: !4086, file: !3, line: 1221, type: !4090)
!4090 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2813)
!4091 = !DILocation(line: 1221, column: 25, scope: !4086)
!4092 = !DILocation(line: 1221, column: 50, scope: !4086)
!4093 = !DILocation(line: 1221, column: 31, scope: !4086)
!4094 = !DILocalVariable(name: "i", scope: !4086, file: !3, line: 1222, type: !7)
!4095 = !DILocation(line: 1222, column: 12, scope: !4086)
!4096 = !DILocalVariable(name: "accs", scope: !4086, file: !3, line: 1223, type: !2782)
!4097 = !DILocation(line: 1223, column: 18, scope: !4086)
!4098 = !DILocation(line: 1225, column: 3, scope: !4086)
!4099 = !DILocation(line: 1226, column: 3, scope: !4086)
!4100 = !DILocation(line: 1227, column: 3, scope: !4086)
!4101 = !DILocation(line: 1228, column: 3, scope: !4086)
!4102 = !DILocation(line: 1229, column: 3, scope: !4086)
!4103 = !DILocation(line: 1231, column: 10, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4086, file: !3, line: 1231, column: 3)
!4105 = !DILocation(line: 1231, column: 8, scope: !4104)
!4106 = !DILocation(line: 1231, column: 15, scope: !4107)
!4107 = distinct !DILexicalBlock(scope: !4104, file: !3, line: 1231, column: 3)
!4108 = !DILocation(line: 1231, column: 3, scope: !4104)
!4109 = !DILocation(line: 1232, column: 24, scope: !4107)
!4110 = !DILocation(line: 1232, column: 5, scope: !4107)
!4111 = !DILocation(line: 1231, column: 78, scope: !4107)
!4112 = !DILocation(line: 1231, column: 3, scope: !4107)
!4113 = distinct !{!4113, !4108, !4114}
!4114 = !DILocation(line: 1232, column: 28, scope: !4104)
!4115 = !DILocation(line: 1233, column: 3, scope: !4086)
!4116 = !DILocation(line: 1235, column: 3, scope: !4086)
!4117 = !DILocation(line: 1236, column: 9, scope: !4086)
!4118 = !DILocation(line: 1236, column: 3, scope: !4086)
!4119 = !DILocation(line: 1237, column: 1, scope: !4086)
!4120 = distinct !DISubprogram(name: "VEC_bitmap_heap_alloc", scope: !3, file: !3, line: 164, type: !4121, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4121 = !DISubroutineType(types: !4122)
!4122 = !{!2814, !1467}
!4123 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4120, file: !3, line: 164, type: !1467)
!4124 = !DILocation(line: 164, column: 1, scope: !4120)
!4125 = distinct !DISubprogram(name: "number_of_loops", scope: !330, file: !330, line: 459, type: !4126, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4126 = !DISubroutineType(types: !4127)
!4127 = !{!7}
!4128 = !DILocation(line: 461, column: 8, scope: !4129)
!4129 = distinct !DILexicalBlock(scope: !4125, file: !330, line: 461, column: 7)
!4130 = !DILocation(line: 461, column: 7, scope: !4125)
!4131 = !DILocation(line: 462, column: 5, scope: !4129)
!4132 = !DILocation(line: 464, column: 10, scope: !4125)
!4133 = !DILocation(line: 464, column: 3, scope: !4125)
!4134 = !DILocation(line: 465, column: 1, scope: !4125)
!4135 = distinct !DISubprogram(name: "VEC_htab_t_heap_alloc", scope: !3, file: !3, line: 167, type: !4136, scopeLine: 167, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4136 = !DISubroutineType(types: !4137)
!4137 = !{!2826, !1467}
!4138 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4135, file: !3, line: 167, type: !1467)
!4139 = !DILocation(line: 167, column: 1, scope: !4135)
!4140 = distinct !DISubprogram(name: "VEC_bitmap_base_quick_push", scope: !3, file: !3, line: 163, type: !4141, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4141 = !DISubroutineType(types: !4142)
!4142 = !{!4143, !4144, !2301}
!4143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2301, size: 64)
!4144 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2819, size: 64)
!4145 = !DILocalVariable(name: "vec_", arg: 1, scope: !4140, file: !3, line: 163, type: !4144)
!4146 = !DILocation(line: 163, column: 1, scope: !4140)
!4147 = !DILocalVariable(name: "obj_", arg: 2, scope: !4140, file: !3, line: 163, type: !2301)
!4148 = !DILocalVariable(name: "slot_", scope: !4140, file: !3, line: 163, type: !4143)
!4149 = distinct !DISubprogram(name: "vtoe_hash", scope: !3, file: !3, line: 1431, type: !2225, scopeLine: 1432, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4150 = !DILocalVariable(name: "obj", arg: 1, scope: !4149, file: !3, line: 1431, type: !2060)
!4151 = !DILocation(line: 1431, column: 24, scope: !4149)
!4152 = !DILocalVariable(name: "vtoe", scope: !4149, file: !3, line: 1433, type: !4153)
!4153 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2838)
!4154 = !DILocation(line: 1433, column: 39, scope: !4149)
!4155 = !DILocation(line: 1434, column: 38, scope: !4149)
!4156 = !DILocation(line: 1434, column: 5, scope: !4149)
!4157 = !DILocation(line: 1436, column: 10, scope: !4149)
!4158 = !DILocation(line: 1436, column: 16, scope: !4149)
!4159 = !DILocation(line: 1436, column: 3, scope: !4149)
!4160 = distinct !DISubprogram(name: "vtoe_eq", scope: !3, file: !3, line: 1443, type: !2231, scopeLine: 1444, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4161 = !DILocalVariable(name: "obj1", arg: 1, scope: !4160, file: !3, line: 1443, type: !2060)
!4162 = !DILocation(line: 1443, column: 22, scope: !4160)
!4163 = !DILocalVariable(name: "obj2", arg: 2, scope: !4160, file: !3, line: 1443, type: !2060)
!4164 = !DILocation(line: 1443, column: 40, scope: !4160)
!4165 = !DILocalVariable(name: "vtoe", scope: !4160, file: !3, line: 1445, type: !4153)
!4166 = !DILocation(line: 1445, column: 39, scope: !4160)
!4167 = !DILocation(line: 1446, column: 38, scope: !4160)
!4168 = !DILocation(line: 1446, column: 5, scope: !4160)
!4169 = !DILocalVariable(name: "uid", scope: !4160, file: !3, line: 1447, type: !4170)
!4170 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2845)
!4171 = !DILocation(line: 1447, column: 25, scope: !4160)
!4172 = !DILocation(line: 1447, column: 50, scope: !4160)
!4173 = !DILocation(line: 1447, column: 31, scope: !4160)
!4174 = !DILocation(line: 1449, column: 10, scope: !4160)
!4175 = !DILocation(line: 1449, column: 16, scope: !4160)
!4176 = !DILocation(line: 1449, column: 24, scope: !4160)
!4177 = !DILocation(line: 1449, column: 23, scope: !4160)
!4178 = !DILocation(line: 1449, column: 20, scope: !4160)
!4179 = !DILocation(line: 1449, column: 3, scope: !4160)
!4180 = distinct !DISubprogram(name: "vtoe_free", scope: !3, file: !3, line: 1455, type: !2236, scopeLine: 1456, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4181 = !DILocalVariable(name: "obj", arg: 1, scope: !4180, file: !3, line: 1455, type: !1654)
!4182 = !DILocation(line: 1455, column: 18, scope: !4180)
!4183 = !DILocalVariable(name: "vtoe", scope: !4180, file: !3, line: 1457, type: !4184)
!4184 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2847)
!4185 = !DILocation(line: 1457, column: 33, scope: !4180)
!4186 = !DILocation(line: 1458, column: 32, scope: !4180)
!4187 = !DILocation(line: 1458, column: 5, scope: !4180)
!4188 = !DILocation(line: 1460, column: 3, scope: !4180)
!4189 = !DILocation(line: 1461, column: 3, scope: !4180)
!4190 = !DILocation(line: 1462, column: 9, scope: !4180)
!4191 = !DILocation(line: 1462, column: 3, scope: !4180)
!4192 = !DILocation(line: 1463, column: 1, scope: !4180)
!4193 = distinct !DISubprogram(name: "VEC_htab_t_base_quick_push", scope: !3, file: !3, line: 166, type: !4194, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4194 = !DISubroutineType(types: !4195)
!4195 = !{!4196, !4197, !2218}
!4196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2218, size: 64)
!4197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2831, size: 64)
!4198 = !DILocalVariable(name: "vec_", arg: 1, scope: !4193, file: !3, line: 166, type: !4197)
!4199 = !DILocation(line: 166, column: 1, scope: !4193)
!4200 = !DILocalVariable(name: "obj_", arg: 2, scope: !4193, file: !3, line: 166, type: !2218)
!4201 = !DILocalVariable(name: "slot_", scope: !4193, file: !3, line: 166, type: !4196)
!4202 = distinct !DISubprogram(name: "gather_mem_refs_in_loops", scope: !3, file: !3, line: 1373, type: !3291, scopeLine: 1374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4203 = !DILocalVariable(name: "bsi", scope: !4202, file: !3, line: 1375, type: !3317)
!4204 = !DILocation(line: 1375, column: 24, scope: !4202)
!4205 = !DILocalVariable(name: "bb", scope: !4202, file: !3, line: 1376, type: !2186)
!4206 = !DILocation(line: 1376, column: 15, scope: !4202)
!4207 = !DILocalVariable(name: "loop", scope: !4202, file: !3, line: 1377, type: !1916)
!4208 = !DILocation(line: 1377, column: 16, scope: !4202)
!4209 = !DILocalVariable(name: "li", scope: !4202, file: !3, line: 1378, type: !4210)
!4210 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !330, line: 515, baseType: !4211)
!4211 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !330, line: 508, size: 128, elements: !4212)
!4212 = !{!4213, !4214}
!4213 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !4211, file: !330, line: 511, baseType: !2861, size: 64)
!4214 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !4211, file: !330, line: 514, baseType: !7, size: 32, offset: 64)
!4215 = !DILocation(line: 1378, column: 17, scope: !4202)
!4216 = !DILocalVariable(name: "clvo", scope: !4202, file: !3, line: 1379, type: !2301)
!4217 = !DILocation(line: 1379, column: 10, scope: !4202)
!4218 = !DILocalVariable(name: "clvi", scope: !4202, file: !3, line: 1379, type: !2301)
!4219 = !DILocation(line: 1379, column: 16, scope: !4202)
!4220 = !DILocalVariable(name: "lrefs", scope: !4202, file: !3, line: 1380, type: !2301)
!4221 = !DILocation(line: 1380, column: 10, scope: !4202)
!4222 = !DILocalVariable(name: "alrefs", scope: !4202, file: !3, line: 1380, type: !2301)
!4223 = !DILocation(line: 1380, column: 17, scope: !4202)
!4224 = !DILocalVariable(name: "alrefso", scope: !4202, file: !3, line: 1380, type: !2301)
!4225 = !DILocation(line: 1380, column: 25, scope: !4202)
!4226 = !DILocation(line: 1382, column: 3, scope: !4227)
!4227 = distinct !DILexicalBlock(scope: !4202, file: !3, line: 1382, column: 3)
!4228 = !DILocation(line: 1382, column: 3, scope: !4229)
!4229 = distinct !DILexicalBlock(scope: !4227, file: !3, line: 1382, column: 3)
!4230 = !DILocation(line: 1384, column: 14, scope: !4231)
!4231 = distinct !DILexicalBlock(scope: !4229, file: !3, line: 1383, column: 5)
!4232 = !DILocation(line: 1384, column: 18, scope: !4231)
!4233 = !DILocation(line: 1384, column: 12, scope: !4231)
!4234 = !DILocation(line: 1385, column: 11, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 1385, column: 11)
!4236 = !DILocation(line: 1385, column: 19, scope: !4235)
!4237 = !DILocation(line: 1385, column: 34, scope: !4235)
!4238 = !DILocation(line: 1385, column: 16, scope: !4235)
!4239 = !DILocation(line: 1385, column: 11, scope: !4231)
!4240 = !DILocation(line: 1386, column: 2, scope: !4235)
!4241 = !DILocation(line: 1388, column: 32, scope: !4242)
!4242 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 1388, column: 7)
!4243 = !DILocation(line: 1388, column: 18, scope: !4242)
!4244 = !DILocation(line: 1388, column: 12, scope: !4242)
!4245 = !DILocation(line: 1388, column: 38, scope: !4246)
!4246 = distinct !DILexicalBlock(scope: !4242, file: !3, line: 1388, column: 7)
!4247 = !DILocation(line: 1388, column: 37, scope: !4246)
!4248 = !DILocation(line: 1388, column: 7, scope: !4242)
!4249 = !DILocation(line: 1389, column: 24, scope: !4246)
!4250 = !DILocation(line: 1389, column: 30, scope: !4246)
!4251 = !DILocation(line: 1389, column: 2, scope: !4246)
!4252 = !DILocation(line: 1388, column: 55, scope: !4246)
!4253 = !DILocation(line: 1388, column: 7, scope: !4246)
!4254 = distinct !{!4254, !4248, !4255}
!4255 = !DILocation(line: 1389, column: 44, scope: !4242)
!4256 = !DILocation(line: 1390, column: 5, scope: !4231)
!4257 = distinct !{!4257, !4226, !4258}
!4258 = !DILocation(line: 1390, column: 5, scope: !4227)
!4259 = !DILocation(line: 1394, column: 3, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4202, file: !3, line: 1394, column: 3)
!4261 = !DILocation(line: 1394, column: 3, scope: !4262)
!4262 = distinct !DILexicalBlock(scope: !4260, file: !3, line: 1394, column: 3)
!4263 = !DILocation(line: 1396, column: 15, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4262, file: !3, line: 1395, column: 5)
!4265 = !DILocation(line: 1396, column: 13, scope: !4264)
!4266 = !DILocation(line: 1397, column: 16, scope: !4264)
!4267 = !DILocation(line: 1397, column: 14, scope: !4264)
!4268 = !DILocation(line: 1398, column: 24, scope: !4264)
!4269 = !DILocation(line: 1398, column: 32, scope: !4264)
!4270 = !DILocation(line: 1398, column: 7, scope: !4264)
!4271 = !DILocation(line: 1400, column: 23, scope: !4272)
!4272 = distinct !DILexicalBlock(scope: !4264, file: !3, line: 1400, column: 11)
!4273 = !DILocation(line: 1400, column: 11, scope: !4272)
!4274 = !DILocation(line: 1400, column: 32, scope: !4272)
!4275 = !DILocation(line: 1400, column: 47, scope: !4272)
!4276 = !DILocation(line: 1400, column: 29, scope: !4272)
!4277 = !DILocation(line: 1400, column: 11, scope: !4264)
!4278 = !DILocation(line: 1401, column: 2, scope: !4272)
!4279 = !DILocation(line: 1403, column: 14, scope: !4264)
!4280 = !DILocation(line: 1403, column: 12, scope: !4264)
!4281 = !DILocation(line: 1404, column: 14, scope: !4264)
!4282 = !DILocation(line: 1404, column: 12, scope: !4264)
!4283 = !DILocation(line: 1406, column: 24, scope: !4264)
!4284 = !DILocation(line: 1406, column: 30, scope: !4264)
!4285 = !DILocation(line: 1406, column: 7, scope: !4264)
!4286 = !DILocation(line: 1408, column: 17, scope: !4264)
!4287 = !DILocation(line: 1408, column: 15, scope: !4264)
!4288 = !DILocation(line: 1410, column: 24, scope: !4264)
!4289 = !DILocation(line: 1410, column: 33, scope: !4264)
!4290 = !DILocation(line: 1410, column: 7, scope: !4264)
!4291 = !DILocation(line: 1411, column: 5, scope: !4264)
!4292 = distinct !{!4292, !4259, !4293}
!4293 = !DILocation(line: 1411, column: 5, scope: !4260)
!4294 = !DILocation(line: 1412, column: 1, scope: !4202)
!4295 = distinct !DISubprogram(name: "create_vop_ref_mapping", scope: !3, file: !3, line: 1554, type: !3291, scopeLine: 1555, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4296 = !DILocalVariable(name: "li", scope: !4295, file: !3, line: 1556, type: !4210)
!4297 = !DILocation(line: 1556, column: 17, scope: !4295)
!4298 = !DILocalVariable(name: "loop", scope: !4295, file: !3, line: 1557, type: !1916)
!4299 = !DILocation(line: 1557, column: 16, scope: !4295)
!4300 = !DILocation(line: 1559, column: 3, scope: !4301)
!4301 = distinct !DILexicalBlock(scope: !4295, file: !3, line: 1559, column: 3)
!4302 = !DILocation(line: 1559, column: 3, scope: !4303)
!4303 = distinct !DILexicalBlock(scope: !4301, file: !3, line: 1559, column: 3)
!4304 = !DILocation(line: 1561, column: 36, scope: !4305)
!4305 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1560, column: 5)
!4306 = !DILocation(line: 1561, column: 7, scope: !4305)
!4307 = !DILocation(line: 1562, column: 5, scope: !4305)
!4308 = distinct !{!4308, !4300, !4309}
!4309 = !DILocation(line: 1562, column: 5, scope: !4301)
!4310 = !DILocation(line: 1563, column: 1, scope: !4295)
!4311 = distinct !DISubprogram(name: "VEC_mem_ref_locs_p_base_iterate", scope: !3, file: !3, line: 124, type: !4312, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4312 = !DISubroutineType(types: !4313)
!4313 = !{!1467, !4314, !7, !4316}
!4314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4315, size: 64)
!4315 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2775)
!4316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2782, size: 64)
!4317 = !DILocalVariable(name: "vec_", arg: 1, scope: !4311, file: !3, line: 124, type: !4314)
!4318 = !DILocation(line: 124, column: 1, scope: !4311)
!4319 = !DILocalVariable(name: "ix_", arg: 2, scope: !4311, file: !3, line: 124, type: !7)
!4320 = !DILocalVariable(name: "ptr", arg: 3, scope: !4311, file: !3, line: 124, type: !4316)
!4321 = !DILocation(line: 124, column: 1, scope: !4322)
!4322 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 124, column: 1)
!4323 = !DILocation(line: 124, column: 1, scope: !4324)
!4324 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 124, column: 1)
!4325 = !DILocation(line: 124, column: 1, scope: !4326)
!4326 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 124, column: 1)
!4327 = distinct !DISubprogram(name: "free_mem_ref_locs", scope: !3, file: !3, line: 1202, type: !4328, scopeLine: 1203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4328 = !DISubroutineType(types: !4329)
!4329 = !{null, !2782}
!4330 = !DILocalVariable(name: "accs", arg: 1, scope: !4327, file: !3, line: 1202, type: !2782)
!4331 = !DILocation(line: 1202, column: 35, scope: !4327)
!4332 = !DILocalVariable(name: "i", scope: !4327, file: !3, line: 1204, type: !7)
!4333 = !DILocation(line: 1204, column: 12, scope: !4327)
!4334 = !DILocalVariable(name: "loc", scope: !4327, file: !3, line: 1205, type: !2799)
!4335 = !DILocation(line: 1205, column: 17, scope: !4327)
!4336 = !DILocation(line: 1207, column: 8, scope: !4337)
!4337 = distinct !DILexicalBlock(scope: !4327, file: !3, line: 1207, column: 7)
!4338 = !DILocation(line: 1207, column: 7, scope: !4327)
!4339 = !DILocation(line: 1208, column: 5, scope: !4337)
!4340 = !DILocation(line: 1210, column: 10, scope: !4341)
!4341 = distinct !DILexicalBlock(scope: !4327, file: !3, line: 1210, column: 3)
!4342 = !DILocation(line: 1210, column: 8, scope: !4341)
!4343 = !DILocation(line: 1210, column: 15, scope: !4344)
!4344 = distinct !DILexicalBlock(scope: !4341, file: !3, line: 1210, column: 3)
!4345 = !DILocation(line: 1210, column: 3, scope: !4341)
!4346 = !DILocation(line: 1211, column: 11, scope: !4344)
!4347 = !DILocation(line: 1211, column: 5, scope: !4344)
!4348 = !DILocation(line: 1210, column: 65, scope: !4344)
!4349 = !DILocation(line: 1210, column: 3, scope: !4344)
!4350 = distinct !{!4350, !4345, !4351}
!4351 = !DILocation(line: 1211, column: 14, scope: !4341)
!4352 = !DILocation(line: 1212, column: 3, scope: !4327)
!4353 = !DILocation(line: 1213, column: 9, scope: !4327)
!4354 = !DILocation(line: 1213, column: 3, scope: !4327)
!4355 = !DILocation(line: 1214, column: 1, scope: !4327)
!4356 = distinct !DISubprogram(name: "VEC_mem_ref_locs_p_heap_free", scope: !3, file: !3, line: 125, type: !4357, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4357 = !DISubroutineType(types: !4358)
!4358 = !{null, !4359}
!4359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2770, size: 64)
!4360 = !DILocalVariable(name: "vec_", arg: 1, scope: !4356, file: !3, line: 125, type: !4359)
!4361 = !DILocation(line: 125, column: 1, scope: !4356)
!4362 = !DILocation(line: 125, column: 1, scope: !4363)
!4363 = distinct !DILexicalBlock(scope: !4356, file: !3, line: 125, column: 1)
!4364 = distinct !DISubprogram(name: "VEC_mem_ref_loc_p_base_iterate", scope: !3, file: !3, line: 114, type: !4365, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4365 = !DISubroutineType(types: !4366)
!4366 = !{!1467, !4367, !7, !4369}
!4367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4368, size: 64)
!4368 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2792)
!4369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2799, size: 64)
!4370 = !DILocalVariable(name: "vec_", arg: 1, scope: !4364, file: !3, line: 114, type: !4367)
!4371 = !DILocation(line: 114, column: 1, scope: !4364)
!4372 = !DILocalVariable(name: "ix_", arg: 2, scope: !4364, file: !3, line: 114, type: !7)
!4373 = !DILocalVariable(name: "ptr", arg: 3, scope: !4364, file: !3, line: 114, type: !4369)
!4374 = !DILocation(line: 114, column: 1, scope: !4375)
!4375 = distinct !DILexicalBlock(scope: !4364, file: !3, line: 114, column: 1)
!4376 = !DILocation(line: 114, column: 1, scope: !4377)
!4377 = distinct !DILexicalBlock(scope: !4375, file: !3, line: 114, column: 1)
!4378 = !DILocation(line: 114, column: 1, scope: !4379)
!4379 = distinct !DILexicalBlock(scope: !4375, file: !3, line: 114, column: 1)
!4380 = distinct !DISubprogram(name: "VEC_mem_ref_loc_p_heap_free", scope: !3, file: !3, line: 115, type: !4381, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4381 = !DISubroutineType(types: !4382)
!4382 = !{null, !4383}
!4383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2787, size: 64)
!4384 = !DILocalVariable(name: "vec_", arg: 1, scope: !4380, file: !3, line: 115, type: !4383)
!4385 = !DILocation(line: 115, column: 1, scope: !4380)
!4386 = !DILocation(line: 115, column: 1, scope: !4387)
!4387 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 115, column: 1)
!4388 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !330, file: !330, line: 85, type: !4389, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4389 = !DISubroutineType(types: !4390)
!4390 = !{!7, !4391}
!4391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4392, size: 64)
!4392 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1936)
!4393 = !DILocalVariable(name: "vec_", arg: 1, scope: !4388, file: !330, line: 85, type: !4391)
!4394 = !DILocation(line: 85, column: 1, scope: !4388)
!4395 = distinct !DISubprogram(name: "gather_mem_refs_stmt", scope: !3, file: !3, line: 1316, type: !4396, scopeLine: 1317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4396 = !DISubroutineType(types: !4397)
!4397 = !{null, !1916, !1701}
!4398 = !DILocalVariable(name: "loop", arg: 1, scope: !4395, file: !3, line: 1316, type: !1916)
!4399 = !DILocation(line: 1316, column: 36, scope: !4395)
!4400 = !DILocalVariable(name: "stmt", arg: 2, scope: !4395, file: !3, line: 1316, type: !1701)
!4401 = !DILocation(line: 1316, column: 49, scope: !4395)
!4402 = !DILocalVariable(name: "mem", scope: !4395, file: !3, line: 1318, type: !1735)
!4403 = !DILocation(line: 1318, column: 9, scope: !4395)
!4404 = !DILocalVariable(name: "hash", scope: !4395, file: !3, line: 1319, type: !2227)
!4405 = !DILocation(line: 1319, column: 13, scope: !4395)
!4406 = !DILocalVariable(name: "slot", scope: !4395, file: !3, line: 1320, type: !2239)
!4407 = !DILocation(line: 1320, column: 8, scope: !4395)
!4408 = !DILocalVariable(name: "ref", scope: !4395, file: !3, line: 1321, type: !2848)
!4409 = !DILocation(line: 1321, column: 13, scope: !4395)
!4410 = !DILocalVariable(name: "vname", scope: !4395, file: !3, line: 1322, type: !1370)
!4411 = !DILocation(line: 1322, column: 8, scope: !4395)
!4412 = !DILocalVariable(name: "is_stored", scope: !4395, file: !3, line: 1323, type: !1490)
!4413 = !DILocation(line: 1323, column: 8, scope: !4395)
!4414 = !DILocalVariable(name: "clvops", scope: !4395, file: !3, line: 1324, type: !2301)
!4415 = !DILocation(line: 1324, column: 10, scope: !4395)
!4416 = !DILocalVariable(name: "id", scope: !4395, file: !3, line: 1325, type: !7)
!4417 = !DILocation(line: 1325, column: 12, scope: !4395)
!4418 = !DILocation(line: 1327, column: 21, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1327, column: 7)
!4420 = !DILocation(line: 1327, column: 8, scope: !4419)
!4421 = !DILocation(line: 1327, column: 7, scope: !4395)
!4422 = !DILocation(line: 1328, column: 5, scope: !4419)
!4423 = !DILocation(line: 1330, column: 33, scope: !4395)
!4424 = !DILocation(line: 1330, column: 9, scope: !4395)
!4425 = !DILocation(line: 1330, column: 7, scope: !4395)
!4426 = !DILocation(line: 1331, column: 8, scope: !4427)
!4427 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1331, column: 7)
!4428 = !DILocation(line: 1331, column: 7, scope: !4395)
!4429 = !DILocation(line: 1332, column: 5, scope: !4427)
!4430 = !DILocation(line: 1334, column: 32, scope: !4395)
!4431 = !DILocation(line: 1334, column: 31, scope: !4395)
!4432 = !DILocation(line: 1334, column: 10, scope: !4395)
!4433 = !DILocation(line: 1334, column: 8, scope: !4395)
!4434 = !DILocation(line: 1335, column: 52, scope: !4395)
!4435 = !DILocation(line: 1335, column: 59, scope: !4395)
!4436 = !DILocation(line: 1335, column: 58, scope: !4395)
!4437 = !DILocation(line: 1335, column: 64, scope: !4395)
!4438 = !DILocation(line: 1335, column: 10, scope: !4395)
!4439 = !DILocation(line: 1335, column: 8, scope: !4395)
!4440 = !DILocation(line: 1337, column: 8, scope: !4441)
!4441 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1337, column: 7)
!4442 = !DILocation(line: 1337, column: 7, scope: !4441)
!4443 = !DILocation(line: 1337, column: 7, scope: !4395)
!4444 = !DILocation(line: 1339, column: 26, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4441, file: !3, line: 1338, column: 5)
!4446 = !DILocation(line: 1339, column: 25, scope: !4445)
!4447 = !DILocation(line: 1339, column: 13, scope: !4445)
!4448 = !DILocation(line: 1339, column: 11, scope: !4445)
!4449 = !DILocation(line: 1340, column: 12, scope: !4445)
!4450 = !DILocation(line: 1340, column: 17, scope: !4445)
!4451 = !DILocation(line: 1340, column: 10, scope: !4445)
!4452 = !DILocation(line: 1341, column: 5, scope: !4445)
!4453 = !DILocation(line: 1344, column: 12, scope: !4454)
!4454 = distinct !DILexicalBlock(scope: !4441, file: !3, line: 1343, column: 5)
!4455 = !DILocation(line: 1344, column: 10, scope: !4454)
!4456 = !DILocation(line: 1345, column: 29, scope: !4454)
!4457 = !DILocation(line: 1345, column: 28, scope: !4454)
!4458 = !DILocation(line: 1345, column: 34, scope: !4454)
!4459 = !DILocation(line: 1345, column: 40, scope: !4454)
!4460 = !DILocation(line: 1345, column: 13, scope: !4454)
!4461 = !DILocation(line: 1345, column: 11, scope: !4454)
!4462 = !DILocation(line: 1346, column: 7, scope: !4454)
!4463 = !DILocation(line: 1347, column: 15, scope: !4454)
!4464 = !DILocation(line: 1347, column: 8, scope: !4454)
!4465 = !DILocation(line: 1347, column: 13, scope: !4454)
!4466 = !DILocation(line: 1349, column: 11, scope: !4467)
!4467 = distinct !DILexicalBlock(scope: !4454, file: !3, line: 1349, column: 11)
!4468 = !DILocation(line: 1349, column: 21, scope: !4467)
!4469 = !DILocation(line: 1349, column: 25, scope: !4467)
!4470 = !DILocation(line: 1349, column: 36, scope: !4467)
!4471 = !DILocation(line: 1349, column: 11, scope: !4454)
!4472 = !DILocation(line: 1351, column: 13, scope: !4473)
!4473 = distinct !DILexicalBlock(scope: !4467, file: !3, line: 1350, column: 2)
!4474 = !DILocation(line: 1351, column: 49, scope: !4473)
!4475 = !DILocation(line: 1351, column: 4, scope: !4473)
!4476 = !DILocation(line: 1352, column: 24, scope: !4473)
!4477 = !DILocation(line: 1352, column: 35, scope: !4473)
!4478 = !DILocation(line: 1352, column: 40, scope: !4473)
!4479 = !DILocation(line: 1352, column: 4, scope: !4473)
!4480 = !DILocation(line: 1353, column: 13, scope: !4473)
!4481 = !DILocation(line: 1353, column: 4, scope: !4473)
!4482 = !DILocation(line: 1354, column: 2, scope: !4473)
!4483 = !DILocation(line: 1356, column: 7, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1356, column: 7)
!4485 = !DILocation(line: 1356, column: 7, scope: !4395)
!4486 = !DILocation(line: 1357, column: 22, scope: !4484)
!4487 = !DILocation(line: 1357, column: 27, scope: !4484)
!4488 = !DILocation(line: 1357, column: 5, scope: !4484)
!4489 = !DILocation(line: 1359, column: 29, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1359, column: 7)
!4491 = !DILocation(line: 1359, column: 16, scope: !4490)
!4492 = !DILocation(line: 1359, column: 14, scope: !4490)
!4493 = !DILocation(line: 1359, column: 36, scope: !4490)
!4494 = !DILocation(line: 1359, column: 7, scope: !4395)
!4495 = !DILocation(line: 1360, column: 21, scope: !4490)
!4496 = !DILocation(line: 1360, column: 26, scope: !4490)
!4497 = !DILocation(line: 1360, column: 32, scope: !4490)
!4498 = !DILocation(line: 1360, column: 5, scope: !4490)
!4499 = !DILocation(line: 1361, column: 23, scope: !4395)
!4500 = !DILocation(line: 1361, column: 28, scope: !4395)
!4501 = !DILocation(line: 1361, column: 34, scope: !4395)
!4502 = !DILocation(line: 1361, column: 40, scope: !4395)
!4503 = !DILocation(line: 1361, column: 3, scope: !4395)
!4504 = !DILocation(line: 1362, column: 3, scope: !4395)
!4505 = !DILabel(scope: !4395, name: "fail", file: !3, line: 1364)
!4506 = !DILocation(line: 1364, column: 1, scope: !4395)
!4507 = !DILocation(line: 1365, column: 12, scope: !4395)
!4508 = !DILocation(line: 1365, column: 10, scope: !4395)
!4509 = !DILocation(line: 1366, column: 29, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1366, column: 7)
!4511 = !DILocation(line: 1366, column: 16, scope: !4510)
!4512 = !DILocation(line: 1366, column: 14, scope: !4510)
!4513 = !DILocation(line: 1366, column: 36, scope: !4510)
!4514 = !DILocation(line: 1366, column: 7, scope: !4395)
!4515 = !DILocation(line: 1367, column: 21, scope: !4510)
!4516 = !DILocation(line: 1367, column: 29, scope: !4510)
!4517 = !DILocation(line: 1367, column: 5, scope: !4510)
!4518 = !DILocation(line: 1368, column: 1, scope: !4395)
!4519 = distinct !DISubprogram(name: "fel_init", scope: !330, file: !330, line: 535, type: !4520, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4520 = !DISubroutineType(types: !4521)
!4521 = !{null, !4522, !4523, !7}
!4522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4210, size: 64)
!4523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1943, size: 64)
!4524 = !DILocalVariable(name: "li", arg: 1, scope: !4519, file: !330, line: 535, type: !4522)
!4525 = !DILocation(line: 535, column: 26, scope: !4519)
!4526 = !DILocalVariable(name: "loop", arg: 2, scope: !4519, file: !330, line: 535, type: !4523)
!4527 = !DILocation(line: 535, column: 38, scope: !4519)
!4528 = !DILocalVariable(name: "flags", arg: 3, scope: !4519, file: !330, line: 535, type: !7)
!4529 = !DILocation(line: 535, column: 53, scope: !4519)
!4530 = !DILocalVariable(name: "aloop", scope: !4519, file: !330, line: 537, type: !1916)
!4531 = !DILocation(line: 537, column: 16, scope: !4519)
!4532 = !DILocalVariable(name: "i", scope: !4519, file: !330, line: 538, type: !7)
!4533 = !DILocation(line: 538, column: 12, scope: !4519)
!4534 = !DILocalVariable(name: "mn", scope: !4519, file: !330, line: 539, type: !1467)
!4535 = !DILocation(line: 539, column: 7, scope: !4519)
!4536 = !DILocation(line: 541, column: 3, scope: !4519)
!4537 = !DILocation(line: 541, column: 7, scope: !4519)
!4538 = !DILocation(line: 541, column: 11, scope: !4519)
!4539 = !DILocation(line: 542, column: 8, scope: !4540)
!4540 = distinct !DILexicalBlock(scope: !4519, file: !330, line: 542, column: 7)
!4541 = !DILocation(line: 542, column: 7, scope: !4519)
!4542 = !DILocation(line: 544, column: 7, scope: !4543)
!4543 = distinct !DILexicalBlock(scope: !4540, file: !330, line: 543, column: 5)
!4544 = !DILocation(line: 544, column: 11, scope: !4543)
!4545 = !DILocation(line: 544, column: 20, scope: !4543)
!4546 = !DILocation(line: 545, column: 8, scope: !4543)
!4547 = !DILocation(line: 545, column: 13, scope: !4543)
!4548 = !DILocation(line: 546, column: 7, scope: !4543)
!4549 = !DILocation(line: 549, column: 18, scope: !4519)
!4550 = !DILocation(line: 549, column: 3, scope: !4519)
!4551 = !DILocation(line: 549, column: 7, scope: !4519)
!4552 = !DILocation(line: 549, column: 16, scope: !4519)
!4553 = !DILocation(line: 550, column: 9, scope: !4519)
!4554 = !DILocation(line: 550, column: 15, scope: !4519)
!4555 = !DILocation(line: 550, column: 8, scope: !4519)
!4556 = !DILocation(line: 550, column: 6, scope: !4519)
!4557 = !DILocation(line: 552, column: 7, scope: !4558)
!4558 = distinct !DILexicalBlock(scope: !4519, file: !330, line: 552, column: 7)
!4559 = !DILocation(line: 552, column: 13, scope: !4558)
!4560 = !DILocation(line: 552, column: 7, scope: !4519)
!4561 = !DILocation(line: 554, column: 14, scope: !4562)
!4562 = distinct !DILexicalBlock(scope: !4563, file: !330, line: 554, column: 7)
!4563 = distinct !DILexicalBlock(scope: !4558, file: !330, line: 553, column: 5)
!4564 = !DILocation(line: 554, column: 12, scope: !4562)
!4565 = !DILocation(line: 554, column: 19, scope: !4566)
!4566 = distinct !DILexicalBlock(scope: !4562, file: !330, line: 554, column: 7)
!4567 = !DILocation(line: 554, column: 7, scope: !4562)
!4568 = !DILocation(line: 555, column: 6, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4566, file: !330, line: 555, column: 6)
!4570 = !DILocation(line: 555, column: 12, scope: !4569)
!4571 = !DILocation(line: 556, column: 6, scope: !4569)
!4572 = !DILocation(line: 556, column: 9, scope: !4569)
!4573 = !DILocation(line: 556, column: 16, scope: !4569)
!4574 = !DILocation(line: 556, column: 22, scope: !4569)
!4575 = !DILocation(line: 557, column: 6, scope: !4569)
!4576 = !DILocation(line: 557, column: 9, scope: !4569)
!4577 = !DILocation(line: 557, column: 16, scope: !4569)
!4578 = !DILocation(line: 557, column: 23, scope: !4569)
!4579 = !DILocation(line: 557, column: 20, scope: !4569)
!4580 = !DILocation(line: 555, column: 6, scope: !4566)
!4581 = !DILocation(line: 558, column: 4, scope: !4569)
!4582 = !DILocation(line: 554, column: 75, scope: !4566)
!4583 = !DILocation(line: 554, column: 7, scope: !4566)
!4584 = distinct !{!4584, !4567, !4585}
!4585 = !DILocation(line: 558, column: 4, scope: !4562)
!4586 = !DILocation(line: 559, column: 5, scope: !4563)
!4587 = !DILocation(line: 560, column: 12, scope: !4588)
!4588 = distinct !DILexicalBlock(scope: !4558, file: !330, line: 560, column: 12)
!4589 = !DILocation(line: 560, column: 18, scope: !4588)
!4590 = !DILocation(line: 560, column: 12, scope: !4558)
!4591 = !DILocation(line: 563, column: 20, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4593, file: !330, line: 563, column: 7)
!4593 = distinct !DILexicalBlock(scope: !4588, file: !330, line: 561, column: 5)
!4594 = !DILocation(line: 563, column: 35, scope: !4592)
!4595 = !DILocation(line: 563, column: 18, scope: !4592)
!4596 = !DILocation(line: 563, column: 12, scope: !4592)
!4597 = !DILocation(line: 564, column: 5, scope: !4598)
!4598 = distinct !DILexicalBlock(scope: !4592, file: !330, line: 563, column: 7)
!4599 = !DILocation(line: 564, column: 12, scope: !4598)
!4600 = !DILocation(line: 564, column: 18, scope: !4598)
!4601 = !DILocation(line: 563, column: 7, scope: !4592)
!4602 = !DILocation(line: 566, column: 2, scope: !4598)
!4603 = !DILocation(line: 565, column: 13, scope: !4598)
!4604 = !DILocation(line: 565, column: 20, scope: !4598)
!4605 = !DILocation(line: 565, column: 11, scope: !4598)
!4606 = !DILocation(line: 563, column: 7, scope: !4598)
!4607 = distinct !{!4607, !4601, !4608}
!4608 = !DILocation(line: 566, column: 2, scope: !4592)
!4609 = !DILocation(line: 568, column: 7, scope: !4593)
!4610 = !DILocation(line: 570, column: 8, scope: !4611)
!4611 = distinct !DILexicalBlock(scope: !4612, file: !330, line: 570, column: 8)
!4612 = distinct !DILexicalBlock(scope: !4593, file: !330, line: 569, column: 2)
!4613 = !DILocation(line: 570, column: 15, scope: !4611)
!4614 = !DILocation(line: 570, column: 22, scope: !4611)
!4615 = !DILocation(line: 570, column: 19, scope: !4611)
!4616 = !DILocation(line: 570, column: 8, scope: !4612)
!4617 = !DILocation(line: 571, column: 6, scope: !4611)
!4618 = !DILocation(line: 573, column: 8, scope: !4619)
!4619 = distinct !DILexicalBlock(scope: !4612, file: !330, line: 573, column: 8)
!4620 = !DILocation(line: 573, column: 15, scope: !4619)
!4621 = !DILocation(line: 573, column: 8, scope: !4612)
!4622 = !DILocation(line: 575, column: 21, scope: !4623)
!4623 = distinct !DILexicalBlock(scope: !4624, file: !330, line: 575, column: 8)
!4624 = distinct !DILexicalBlock(scope: !4619, file: !330, line: 574, column: 6)
!4625 = !DILocation(line: 575, column: 28, scope: !4623)
!4626 = !DILocation(line: 575, column: 19, scope: !4623)
!4627 = !DILocation(line: 575, column: 13, scope: !4623)
!4628 = !DILocation(line: 576, column: 6, scope: !4629)
!4629 = distinct !DILexicalBlock(scope: !4623, file: !330, line: 575, column: 8)
!4630 = !DILocation(line: 576, column: 13, scope: !4629)
!4631 = !DILocation(line: 576, column: 19, scope: !4629)
!4632 = !DILocation(line: 575, column: 8, scope: !4623)
!4633 = !DILocation(line: 578, column: 3, scope: !4629)
!4634 = !DILocation(line: 577, column: 14, scope: !4629)
!4635 = !DILocation(line: 577, column: 21, scope: !4629)
!4636 = !DILocation(line: 577, column: 12, scope: !4629)
!4637 = !DILocation(line: 575, column: 8, scope: !4629)
!4638 = distinct !{!4638, !4632, !4639}
!4639 = !DILocation(line: 578, column: 3, scope: !4623)
!4640 = !DILocation(line: 579, column: 6, scope: !4624)
!4641 = !DILocation(line: 580, column: 26, scope: !4642)
!4642 = distinct !DILexicalBlock(scope: !4619, file: !330, line: 580, column: 13)
!4643 = !DILocation(line: 580, column: 14, scope: !4642)
!4644 = !DILocation(line: 580, column: 13, scope: !4619)
!4645 = !DILocation(line: 581, column: 6, scope: !4642)
!4646 = !DILocation(line: 583, column: 26, scope: !4642)
!4647 = !DILocation(line: 583, column: 14, scope: !4642)
!4648 = !DILocation(line: 583, column: 12, scope: !4642)
!4649 = distinct !{!4649, !4609, !4650}
!4650 = !DILocation(line: 584, column: 2, scope: !4593)
!4651 = !DILocation(line: 585, column: 5, scope: !4593)
!4652 = !DILocation(line: 589, column: 15, scope: !4653)
!4653 = distinct !DILexicalBlock(scope: !4588, file: !330, line: 587, column: 5)
!4654 = !DILocation(line: 589, column: 30, scope: !4653)
!4655 = !DILocation(line: 589, column: 13, scope: !4653)
!4656 = !DILocation(line: 590, column: 7, scope: !4653)
!4657 = !DILocation(line: 592, column: 8, scope: !4658)
!4658 = distinct !DILexicalBlock(scope: !4659, file: !330, line: 592, column: 8)
!4659 = distinct !DILexicalBlock(scope: !4653, file: !330, line: 591, column: 2)
!4660 = !DILocation(line: 592, column: 15, scope: !4658)
!4661 = !DILocation(line: 592, column: 22, scope: !4658)
!4662 = !DILocation(line: 592, column: 19, scope: !4658)
!4663 = !DILocation(line: 592, column: 8, scope: !4659)
!4664 = !DILocation(line: 593, column: 6, scope: !4658)
!4665 = !DILocation(line: 595, column: 8, scope: !4666)
!4666 = distinct !DILexicalBlock(scope: !4659, file: !330, line: 595, column: 8)
!4667 = !DILocation(line: 595, column: 15, scope: !4666)
!4668 = !DILocation(line: 595, column: 21, scope: !4666)
!4669 = !DILocation(line: 595, column: 8, scope: !4659)
!4670 = !DILocation(line: 596, column: 14, scope: !4666)
!4671 = !DILocation(line: 596, column: 21, scope: !4666)
!4672 = !DILocation(line: 596, column: 12, scope: !4666)
!4673 = !DILocation(line: 596, column: 6, scope: !4666)
!4674 = !DILocation(line: 599, column: 8, scope: !4675)
!4675 = distinct !DILexicalBlock(scope: !4666, file: !330, line: 598, column: 6)
!4676 = !DILocation(line: 599, column: 15, scope: !4675)
!4677 = !DILocation(line: 599, column: 21, scope: !4675)
!4678 = !DILocation(line: 599, column: 29, scope: !4675)
!4679 = !DILocation(line: 599, column: 32, scope: !4675)
!4680 = !DILocation(line: 599, column: 39, scope: !4675)
!4681 = !DILocation(line: 599, column: 44, scope: !4675)
!4682 = !DILocation(line: 0, scope: !4675)
!4683 = !DILocation(line: 600, column: 23, scope: !4675)
!4684 = !DILocation(line: 600, column: 11, scope: !4675)
!4685 = !DILocation(line: 600, column: 9, scope: !4675)
!4686 = distinct !{!4686, !4674, !4687}
!4687 = !DILocation(line: 600, column: 28, scope: !4675)
!4688 = !DILocation(line: 601, column: 12, scope: !4689)
!4689 = distinct !DILexicalBlock(scope: !4675, file: !330, line: 601, column: 12)
!4690 = !DILocation(line: 601, column: 18, scope: !4689)
!4691 = !DILocation(line: 601, column: 12, scope: !4675)
!4692 = !DILocation(line: 602, column: 3, scope: !4689)
!4693 = !DILocation(line: 603, column: 16, scope: !4675)
!4694 = !DILocation(line: 603, column: 23, scope: !4675)
!4695 = !DILocation(line: 603, column: 14, scope: !4675)
!4696 = distinct !{!4696, !4656, !4697}
!4697 = !DILocation(line: 605, column: 2, scope: !4653)
!4698 = !DILocation(line: 608, column: 13, scope: !4519)
!4699 = !DILocation(line: 608, column: 17, scope: !4519)
!4700 = !DILocation(line: 608, column: 3, scope: !4519)
!4701 = !DILocation(line: 609, column: 1, scope: !4519)
!4702 = distinct !DISubprogram(name: "VEC_bitmap_base_index", scope: !3, file: !3, line: 163, type: !4703, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4703 = !DISubroutineType(types: !4704)
!4704 = !{!2301, !4705, !7}
!4705 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4706, size: 64)
!4706 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2819)
!4707 = !DILocalVariable(name: "vec_", arg: 1, scope: !4702, file: !3, line: 163, type: !4705)
!4708 = !DILocation(line: 163, column: 1, scope: !4702)
!4709 = !DILocalVariable(name: "ix_", arg: 2, scope: !4702, file: !3, line: 163, type: !7)
!4710 = !DILocation(line: 0, scope: !4702)
!4711 = distinct !DISubprogram(name: "loop_outer", scope: !330, file: !330, line: 434, type: !4712, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4712 = !DISubroutineType(types: !4713)
!4713 = !{!1916, !4714}
!4714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4715, size: 64)
!4715 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1917)
!4716 = !DILocalVariable(name: "loop", arg: 1, scope: !4711, file: !330, line: 434, type: !4714)
!4717 = !DILocation(line: 434, column: 32, scope: !4711)
!4718 = !DILocalVariable(name: "n", scope: !4711, file: !330, line: 436, type: !7)
!4719 = !DILocation(line: 436, column: 12, scope: !4711)
!4720 = !DILocation(line: 436, column: 16, scope: !4711)
!4721 = !DILocation(line: 438, column: 7, scope: !4722)
!4722 = distinct !DILexicalBlock(scope: !4711, file: !330, line: 438, column: 7)
!4723 = !DILocation(line: 438, column: 9, scope: !4722)
!4724 = !DILocation(line: 438, column: 7, scope: !4711)
!4725 = !DILocation(line: 439, column: 5, scope: !4722)
!4726 = !DILocation(line: 441, column: 10, scope: !4711)
!4727 = !DILocation(line: 441, column: 3, scope: !4711)
!4728 = !DILocation(line: 442, column: 1, scope: !4711)
!4729 = distinct !DISubprogram(name: "fel_next", scope: !330, file: !330, line: 518, type: !4730, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4730 = !DISubroutineType(types: !4731)
!4731 = !{null, !4522, !4523}
!4732 = !DILocalVariable(name: "li", arg: 1, scope: !4729, file: !330, line: 518, type: !4522)
!4733 = !DILocation(line: 518, column: 26, scope: !4729)
!4734 = !DILocalVariable(name: "loop", arg: 2, scope: !4729, file: !330, line: 518, type: !4523)
!4735 = !DILocation(line: 518, column: 38, scope: !4729)
!4736 = !DILocalVariable(name: "anum", scope: !4729, file: !330, line: 520, type: !1467)
!4737 = !DILocation(line: 520, column: 7, scope: !4729)
!4738 = !DILocation(line: 522, column: 3, scope: !4729)
!4739 = !DILocation(line: 522, column: 10, scope: !4729)
!4740 = !DILocation(line: 524, column: 7, scope: !4741)
!4741 = distinct !DILexicalBlock(scope: !4729, file: !330, line: 523, column: 5)
!4742 = !DILocation(line: 524, column: 11, scope: !4741)
!4743 = !DILocation(line: 524, column: 14, scope: !4741)
!4744 = !DILocation(line: 525, column: 25, scope: !4741)
!4745 = !DILocation(line: 525, column: 15, scope: !4741)
!4746 = !DILocation(line: 525, column: 8, scope: !4741)
!4747 = !DILocation(line: 525, column: 13, scope: !4741)
!4748 = !DILocation(line: 526, column: 12, scope: !4749)
!4749 = distinct !DILexicalBlock(scope: !4741, file: !330, line: 526, column: 11)
!4750 = !DILocation(line: 526, column: 11, scope: !4749)
!4751 = !DILocation(line: 526, column: 11, scope: !4741)
!4752 = !DILocation(line: 527, column: 2, scope: !4749)
!4753 = distinct !{!4753, !4738, !4754}
!4754 = !DILocation(line: 528, column: 5, scope: !4729)
!4755 = !DILocation(line: 530, column: 3, scope: !4729)
!4756 = !DILocation(line: 531, column: 4, scope: !4729)
!4757 = !DILocation(line: 531, column: 9, scope: !4729)
!4758 = !DILocation(line: 532, column: 1, scope: !4729)
!4759 = distinct !DISubprogram(name: "gimple_vuse", scope: !397, file: !397, line: 1365, type: !3117, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4760 = !DILocalVariable(name: "g", arg: 1, scope: !4759, file: !397, line: 1365, type: !3109)
!4761 = !DILocation(line: 1365, column: 27, scope: !4759)
!4762 = !DILocation(line: 1367, column: 28, scope: !4763)
!4763 = distinct !DILexicalBlock(scope: !4759, file: !397, line: 1367, column: 7)
!4764 = !DILocation(line: 1367, column: 8, scope: !4763)
!4765 = !DILocation(line: 1367, column: 7, scope: !4759)
!4766 = !DILocation(line: 1368, column: 5, scope: !4763)
!4767 = !DILocation(line: 1369, column: 10, scope: !4759)
!4768 = !DILocation(line: 1369, column: 13, scope: !4759)
!4769 = !DILocation(line: 1369, column: 23, scope: !4759)
!4770 = !DILocation(line: 1369, column: 3, scope: !4759)
!4771 = !DILocation(line: 1370, column: 1, scope: !4759)
!4772 = distinct !DISubprogram(name: "simple_mem_ref_in_stmt", scope: !3, file: !3, line: 600, type: !4773, scopeLine: 601, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4773 = !DISubroutineType(types: !4774)
!4774 = !{!1735, !1701, !3308}
!4775 = !DILocalVariable(name: "stmt", arg: 1, scope: !4772, file: !3, line: 600, type: !1701)
!4776 = !DILocation(line: 600, column: 32, scope: !4772)
!4777 = !DILocalVariable(name: "is_store", arg: 2, scope: !4772, file: !3, line: 600, type: !3308)
!4778 = !DILocation(line: 600, column: 44, scope: !4772)
!4779 = !DILocalVariable(name: "lhs", scope: !4772, file: !3, line: 602, type: !1735)
!4780 = !DILocation(line: 602, column: 9, scope: !4772)
!4781 = !DILocalVariable(name: "code", scope: !4772, file: !3, line: 603, type: !134)
!4782 = !DILocation(line: 603, column: 18, scope: !4772)
!4783 = !DILocation(line: 606, column: 20, scope: !4784)
!4784 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 606, column: 7)
!4785 = !DILocation(line: 606, column: 7, scope: !4784)
!4786 = !DILocation(line: 606, column: 26, scope: !4784)
!4787 = !DILocation(line: 606, column: 7, scope: !4772)
!4788 = !DILocation(line: 607, column: 5, scope: !4784)
!4789 = !DILocation(line: 609, column: 34, scope: !4772)
!4790 = !DILocation(line: 609, column: 10, scope: !4772)
!4791 = !DILocation(line: 609, column: 8, scope: !4772)
!4792 = !DILocation(line: 611, column: 32, scope: !4772)
!4793 = !DILocation(line: 611, column: 9, scope: !4772)
!4794 = !DILocation(line: 611, column: 7, scope: !4772)
!4795 = !DILocation(line: 613, column: 7, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 613, column: 7)
!4797 = !DILocation(line: 613, column: 24, scope: !4796)
!4798 = !DILocation(line: 613, column: 7, scope: !4772)
!4799 = !DILocation(line: 615, column: 33, scope: !4800)
!4800 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 615, column: 11)
!4801 = distinct !DILexicalBlock(scope: !4796, file: !3, line: 614, column: 5)
!4802 = !DILocation(line: 615, column: 11, scope: !4800)
!4803 = !DILocation(line: 615, column: 39, scope: !4800)
!4804 = !DILocation(line: 616, column: 4, scope: !4800)
!4805 = !DILocation(line: 616, column: 51, scope: !4800)
!4806 = !DILocation(line: 616, column: 31, scope: !4800)
!4807 = !DILocation(line: 616, column: 8, scope: !4800)
!4808 = !DILocation(line: 615, column: 11, scope: !4801)
!4809 = !DILocation(line: 617, column: 2, scope: !4800)
!4810 = !DILocation(line: 619, column: 8, scope: !4801)
!4811 = !DILocation(line: 619, column: 17, scope: !4801)
!4812 = !DILocation(line: 620, column: 38, scope: !4801)
!4813 = !DILocation(line: 620, column: 14, scope: !4801)
!4814 = !DILocation(line: 620, column: 7, scope: !4801)
!4815 = !DILocation(line: 622, column: 12, scope: !4816)
!4816 = distinct !DILexicalBlock(scope: !4796, file: !3, line: 622, column: 12)
!4817 = !DILocation(line: 622, column: 17, scope: !4816)
!4818 = !DILocation(line: 623, column: 5, scope: !4816)
!4819 = !DILocation(line: 623, column: 31, scope: !4816)
!4820 = !DILocation(line: 623, column: 9, scope: !4816)
!4821 = !DILocation(line: 623, column: 37, scope: !4816)
!4822 = !DILocation(line: 624, column: 9, scope: !4816)
!4823 = !DILocation(line: 624, column: 57, scope: !4816)
!4824 = !DILocation(line: 624, column: 37, scope: !4816)
!4825 = !DILocation(line: 624, column: 12, scope: !4816)
!4826 = !DILocation(line: 622, column: 12, scope: !4796)
!4827 = !DILocation(line: 626, column: 8, scope: !4828)
!4828 = distinct !DILexicalBlock(scope: !4816, file: !3, line: 625, column: 5)
!4829 = !DILocation(line: 626, column: 17, scope: !4828)
!4830 = !DILocation(line: 627, column: 14, scope: !4828)
!4831 = !DILocation(line: 627, column: 7, scope: !4828)
!4832 = !DILocation(line: 630, column: 5, scope: !4816)
!4833 = !DILocation(line: 631, column: 1, scope: !4772)
!4834 = distinct !DISubprogram(name: "VEC_mem_ref_p_base_length", scope: !3, file: !3, line: 160, type: !4835, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4835 = !DISubroutineType(types: !4836)
!4836 = !{!7, !4837}
!4837 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4838, size: 64)
!4838 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2854)
!4839 = !DILocalVariable(name: "vec_", arg: 1, scope: !4834, file: !3, line: 160, type: !4837)
!4840 = !DILocation(line: 160, column: 1, scope: !4834)
!4841 = distinct !DISubprogram(name: "mem_ref_alloc", scope: !3, file: !3, line: 1243, type: !4842, scopeLine: 1244, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4842 = !DISubroutineType(types: !4843)
!4843 = !{!2848, !1370, !7, !7}
!4844 = !DILocalVariable(name: "mem", arg: 1, scope: !4841, file: !3, line: 1243, type: !1370)
!4845 = !DILocation(line: 1243, column: 21, scope: !4841)
!4846 = !DILocalVariable(name: "hash", arg: 2, scope: !4841, file: !3, line: 1243, type: !7)
!4847 = !DILocation(line: 1243, column: 35, scope: !4841)
!4848 = !DILocalVariable(name: "id", arg: 3, scope: !4841, file: !3, line: 1243, type: !7)
!4849 = !DILocation(line: 1243, column: 50, scope: !4841)
!4850 = !DILocalVariable(name: "ref", scope: !4841, file: !3, line: 1245, type: !2848)
!4851 = !DILocation(line: 1245, column: 13, scope: !4841)
!4852 = !DILocation(line: 1245, column: 19, scope: !4841)
!4853 = !DILocation(line: 1246, column: 14, scope: !4841)
!4854 = !DILocation(line: 1246, column: 3, scope: !4841)
!4855 = !DILocation(line: 1246, column: 8, scope: !4841)
!4856 = !DILocation(line: 1246, column: 12, scope: !4841)
!4857 = !DILocation(line: 1247, column: 13, scope: !4841)
!4858 = !DILocation(line: 1247, column: 3, scope: !4841)
!4859 = !DILocation(line: 1247, column: 8, scope: !4841)
!4860 = !DILocation(line: 1247, column: 11, scope: !4841)
!4861 = !DILocation(line: 1248, column: 15, scope: !4841)
!4862 = !DILocation(line: 1248, column: 3, scope: !4841)
!4863 = !DILocation(line: 1248, column: 8, scope: !4841)
!4864 = !DILocation(line: 1248, column: 13, scope: !4841)
!4865 = !DILocation(line: 1249, column: 17, scope: !4841)
!4866 = !DILocation(line: 1249, column: 3, scope: !4841)
!4867 = !DILocation(line: 1249, column: 8, scope: !4841)
!4868 = !DILocation(line: 1249, column: 15, scope: !4841)
!4869 = !DILocation(line: 1250, column: 21, scope: !4841)
!4870 = !DILocation(line: 1250, column: 3, scope: !4841)
!4871 = !DILocation(line: 1250, column: 8, scope: !4841)
!4872 = !DILocation(line: 1250, column: 19, scope: !4841)
!4873 = !DILocation(line: 1251, column: 19, scope: !4841)
!4874 = !DILocation(line: 1251, column: 3, scope: !4841)
!4875 = !DILocation(line: 1251, column: 8, scope: !4841)
!4876 = !DILocation(line: 1251, column: 17, scope: !4841)
!4877 = !DILocation(line: 1252, column: 20, scope: !4841)
!4878 = !DILocation(line: 1252, column: 3, scope: !4841)
!4879 = !DILocation(line: 1252, column: 8, scope: !4841)
!4880 = !DILocation(line: 1252, column: 18, scope: !4841)
!4881 = !DILocation(line: 1253, column: 18, scope: !4841)
!4882 = !DILocation(line: 1253, column: 3, scope: !4841)
!4883 = !DILocation(line: 1253, column: 8, scope: !4841)
!4884 = !DILocation(line: 1253, column: 16, scope: !4841)
!4885 = !DILocation(line: 1254, column: 3, scope: !4841)
!4886 = !DILocation(line: 1254, column: 8, scope: !4841)
!4887 = !DILocation(line: 1254, column: 25, scope: !4841)
!4888 = !DILocation(line: 1255, column: 15, scope: !4841)
!4889 = !DILocation(line: 1255, column: 3, scope: !4841)
!4890 = !DILocation(line: 1255, column: 8, scope: !4841)
!4891 = !DILocation(line: 1255, column: 13, scope: !4841)
!4892 = !DILocation(line: 1257, column: 10, scope: !4841)
!4893 = !DILocation(line: 1257, column: 3, scope: !4841)
!4894 = distinct !DISubprogram(name: "VEC_mem_ref_p_heap_safe_push", scope: !3, file: !3, line: 161, type: !4895, scopeLine: 161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4895 = !DISubroutineType(types: !4896)
!4896 = !{!4897, !4898, !2848}
!4897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2848, size: 64)
!4898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2849, size: 64)
!4899 = !DILocalVariable(name: "vec_", arg: 1, scope: !4894, file: !3, line: 161, type: !4898)
!4900 = !DILocation(line: 161, column: 1, scope: !4894)
!4901 = !DILocalVariable(name: "obj_", arg: 2, scope: !4894, file: !3, line: 161, type: !2848)
!4902 = distinct !DISubprogram(name: "mark_ref_stored", scope: !3, file: !3, line: 1301, type: !4903, scopeLine: 1302, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4903 = !DISubroutineType(types: !4904)
!4904 = !{null, !2848, !1916}
!4905 = !DILocalVariable(name: "ref", arg: 1, scope: !4902, file: !3, line: 1301, type: !2848)
!4906 = !DILocation(line: 1301, column: 28, scope: !4902)
!4907 = !DILocalVariable(name: "loop", arg: 2, scope: !4902, file: !3, line: 1301, type: !1916)
!4908 = !DILocation(line: 1301, column: 46, scope: !4902)
!4909 = !DILocation(line: 1303, column: 3, scope: !4902)
!4910 = !DILocation(line: 1304, column: 8, scope: !4911)
!4911 = distinct !DILexicalBlock(scope: !4912, file: !3, line: 1303, column: 3)
!4912 = distinct !DILexicalBlock(scope: !4902, file: !3, line: 1303, column: 3)
!4913 = !DILocation(line: 1304, column: 16, scope: !4911)
!4914 = !DILocation(line: 1304, column: 31, scope: !4911)
!4915 = !DILocation(line: 1304, column: 13, scope: !4911)
!4916 = !DILocation(line: 1305, column: 8, scope: !4911)
!4917 = !DILocation(line: 1305, column: 26, scope: !4911)
!4918 = !DILocation(line: 1305, column: 31, scope: !4911)
!4919 = !DILocation(line: 1305, column: 39, scope: !4911)
!4920 = !DILocation(line: 1305, column: 45, scope: !4911)
!4921 = !DILocation(line: 1305, column: 12, scope: !4911)
!4922 = !DILocation(line: 1305, column: 11, scope: !4911)
!4923 = !DILocation(line: 0, scope: !4911)
!4924 = !DILocation(line: 1303, column: 3, scope: !4912)
!4925 = !DILocation(line: 1307, column: 21, scope: !4911)
!4926 = !DILocation(line: 1307, column: 26, scope: !4911)
!4927 = !DILocation(line: 1307, column: 34, scope: !4911)
!4928 = !DILocation(line: 1307, column: 40, scope: !4911)
!4929 = !DILocation(line: 1307, column: 5, scope: !4911)
!4930 = !DILocation(line: 1306, column: 27, scope: !4911)
!4931 = !DILocation(line: 1306, column: 15, scope: !4911)
!4932 = !DILocation(line: 1306, column: 13, scope: !4911)
!4933 = !DILocation(line: 1303, column: 3, scope: !4911)
!4934 = distinct !{!4934, !4924, !4935}
!4935 = !DILocation(line: 1307, column: 43, scope: !4912)
!4936 = !DILocation(line: 1308, column: 1, scope: !4902)
!4937 = distinct !DISubprogram(name: "record_mem_ref_loc", scope: !3, file: !3, line: 1274, type: !4938, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4938 = !DISubroutineType(types: !4939)
!4939 = !{null, !2848, !1916, !1701, !1735}
!4940 = !DILocalVariable(name: "ref", arg: 1, scope: !4937, file: !3, line: 1274, type: !2848)
!4941 = !DILocation(line: 1274, column: 31, scope: !4937)
!4942 = !DILocalVariable(name: "loop", arg: 2, scope: !4937, file: !3, line: 1274, type: !1916)
!4943 = !DILocation(line: 1274, column: 49, scope: !4937)
!4944 = !DILocalVariable(name: "stmt", arg: 3, scope: !4937, file: !3, line: 1274, type: !1701)
!4945 = !DILocation(line: 1274, column: 62, scope: !4937)
!4946 = !DILocalVariable(name: "loc", arg: 4, scope: !4937, file: !3, line: 1274, type: !1735)
!4947 = !DILocation(line: 1274, column: 74, scope: !4937)
!4948 = !DILocalVariable(name: "aref", scope: !4937, file: !3, line: 1276, type: !2799)
!4949 = !DILocation(line: 1276, column: 17, scope: !4937)
!4950 = !DILocation(line: 1276, column: 24, scope: !4937)
!4951 = !DILocalVariable(name: "accs", scope: !4937, file: !3, line: 1277, type: !2782)
!4952 = !DILocation(line: 1277, column: 18, scope: !4937)
!4953 = !DILocalVariable(name: "ril", scope: !4937, file: !3, line: 1278, type: !2301)
!4954 = !DILocation(line: 1278, column: 10, scope: !4937)
!4955 = !DILocation(line: 1278, column: 16, scope: !4937)
!4956 = !DILocation(line: 1280, column: 7, scope: !4957)
!4957 = distinct !DILexicalBlock(scope: !4937, file: !3, line: 1280, column: 7)
!4958 = !DILocation(line: 1281, column: 21, scope: !4957)
!4959 = !DILocation(line: 1281, column: 27, scope: !4957)
!4960 = !DILocation(line: 1281, column: 7, scope: !4957)
!4961 = !DILocation(line: 1280, column: 7, scope: !4937)
!4962 = !DILocation(line: 1282, column: 5, scope: !4957)
!4963 = !DILocation(line: 1284, column: 10, scope: !4937)
!4964 = !DILocation(line: 1284, column: 8, scope: !4937)
!4965 = !DILocation(line: 1285, column: 8, scope: !4966)
!4966 = distinct !DILexicalBlock(scope: !4937, file: !3, line: 1285, column: 7)
!4967 = !DILocation(line: 1285, column: 7, scope: !4937)
!4968 = !DILocation(line: 1287, column: 14, scope: !4969)
!4969 = distinct !DILexicalBlock(scope: !4966, file: !3, line: 1286, column: 5)
!4970 = !DILocation(line: 1287, column: 12, scope: !4969)
!4971 = !DILocation(line: 1288, column: 7, scope: !4969)
!4972 = !DILocation(line: 1289, column: 5, scope: !4969)
!4973 = !DILocation(line: 1291, column: 16, scope: !4937)
!4974 = !DILocation(line: 1291, column: 3, scope: !4937)
!4975 = !DILocation(line: 1291, column: 9, scope: !4937)
!4976 = !DILocation(line: 1291, column: 14, scope: !4937)
!4977 = !DILocation(line: 1292, column: 15, scope: !4937)
!4978 = !DILocation(line: 1292, column: 3, scope: !4937)
!4979 = !DILocation(line: 1292, column: 9, scope: !4937)
!4980 = !DILocation(line: 1292, column: 13, scope: !4937)
!4981 = !DILocation(line: 1294, column: 3, scope: !4937)
!4982 = !DILocation(line: 1295, column: 19, scope: !4937)
!4983 = !DILocation(line: 1295, column: 24, scope: !4937)
!4984 = !DILocation(line: 1295, column: 29, scope: !4937)
!4985 = !DILocation(line: 1295, column: 3, scope: !4937)
!4986 = !DILocation(line: 1296, column: 1, scope: !4937)
!4987 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !397, file: !397, line: 1815, type: !4988, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!4988 = !DISubroutineType(types: !4989)
!4989 = !{!134, !3109}
!4990 = !DILocalVariable(name: "gs", arg: 1, scope: !4987, file: !397, line: 1815, type: !3109)
!4991 = !DILocation(line: 1815, column: 38, scope: !4987)
!4992 = !DILocalVariable(name: "code", scope: !4987, file: !397, line: 1817, type: !134)
!4993 = !DILocation(line: 1817, column: 18, scope: !4987)
!4994 = !DILocation(line: 1820, column: 28, scope: !4987)
!4995 = !DILocation(line: 1820, column: 10, scope: !4987)
!4996 = !DILocation(line: 1820, column: 8, scope: !4987)
!4997 = !DILocation(line: 1821, column: 29, scope: !4998)
!4998 = distinct !DILexicalBlock(scope: !4987, file: !397, line: 1821, column: 7)
!4999 = !DILocation(line: 1821, column: 7, scope: !4998)
!5000 = !DILocation(line: 1821, column: 35, scope: !4998)
!5001 = !DILocation(line: 1821, column: 7, scope: !4987)
!5002 = !DILocation(line: 1822, column: 12, scope: !4998)
!5003 = !DILocation(line: 1822, column: 10, scope: !4998)
!5004 = !DILocation(line: 1822, column: 5, scope: !4998)
!5005 = !DILocation(line: 1824, column: 10, scope: !4987)
!5006 = !DILocation(line: 1824, column: 3, scope: !4987)
!5007 = distinct !DISubprogram(name: "gimple_assign_lhs_ptr", scope: !397, file: !397, line: 1704, type: !5008, scopeLine: 1705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5008 = !DISubroutineType(types: !5009)
!5009 = !{!1735, !3109}
!5010 = !DILocalVariable(name: "gs", arg: 1, scope: !5007, file: !397, line: 1704, type: !3109)
!5011 = !DILocation(line: 1704, column: 37, scope: !5007)
!5012 = !DILocation(line: 1707, column: 25, scope: !5007)
!5013 = !DILocation(line: 1707, column: 10, scope: !5007)
!5014 = !DILocation(line: 1707, column: 3, scope: !5007)
!5015 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !397, file: !397, line: 1686, type: !5016, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5016 = !DISubroutineType(types: !5017)
!5017 = !{!489, !134}
!5018 = !DILocalVariable(name: "code", arg: 1, scope: !5015, file: !397, line: 1686, type: !134)
!5019 = !DILocation(line: 1686, column: 38, scope: !5015)
!5020 = !DILocation(line: 1688, column: 63, scope: !5015)
!5021 = !DILocation(line: 1688, column: 34, scope: !5015)
!5022 = !DILocation(line: 1688, column: 10, scope: !5015)
!5023 = !DILocation(line: 1688, column: 3, scope: !5015)
!5024 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !397, file: !397, line: 1727, type: !3117, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5025 = !DILocalVariable(name: "gs", arg: 1, scope: !5024, file: !397, line: 1727, type: !3109)
!5026 = !DILocation(line: 1727, column: 34, scope: !5024)
!5027 = !DILocation(line: 1730, column: 21, scope: !5024)
!5028 = !DILocation(line: 1730, column: 10, scope: !5024)
!5029 = !DILocation(line: 1730, column: 3, scope: !5024)
!5030 = distinct !DISubprogram(name: "gimple_assign_rhs1_ptr", scope: !397, file: !397, line: 1738, type: !5008, scopeLine: 1739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5031 = !DILocalVariable(name: "gs", arg: 1, scope: !5030, file: !397, line: 1738, type: !3109)
!5032 = !DILocation(line: 1738, column: 38, scope: !5030)
!5033 = !DILocation(line: 1741, column: 25, scope: !5030)
!5034 = !DILocation(line: 1741, column: 10, scope: !5030)
!5035 = !DILocation(line: 1741, column: 3, scope: !5030)
!5036 = distinct !DISubprogram(name: "gimple_expr_code", scope: !397, file: !397, line: 1438, type: !4988, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5037 = !DILocalVariable(name: "stmt", arg: 1, scope: !5036, file: !397, line: 1438, type: !3109)
!5038 = !DILocation(line: 1438, column: 32, scope: !5036)
!5039 = !DILocalVariable(name: "code", scope: !5036, file: !397, line: 1440, type: !396)
!5040 = !DILocation(line: 1440, column: 20, scope: !5036)
!5041 = !DILocation(line: 1440, column: 40, scope: !5036)
!5042 = !DILocation(line: 1440, column: 27, scope: !5036)
!5043 = !DILocation(line: 1441, column: 7, scope: !5044)
!5044 = distinct !DILexicalBlock(scope: !5036, file: !397, line: 1441, column: 7)
!5045 = !DILocation(line: 1441, column: 12, scope: !5044)
!5046 = !DILocation(line: 1441, column: 29, scope: !5044)
!5047 = !DILocation(line: 1441, column: 32, scope: !5044)
!5048 = !DILocation(line: 1441, column: 37, scope: !5044)
!5049 = !DILocation(line: 1441, column: 7, scope: !5036)
!5050 = !DILocation(line: 1442, column: 29, scope: !5044)
!5051 = !DILocation(line: 1442, column: 35, scope: !5044)
!5052 = !DILocation(line: 1442, column: 42, scope: !5044)
!5053 = !DILocation(line: 1442, column: 5, scope: !5044)
!5054 = !DILocation(line: 1443, column: 12, scope: !5055)
!5055 = distinct !DILexicalBlock(scope: !5044, file: !397, line: 1443, column: 12)
!5056 = !DILocation(line: 1443, column: 17, scope: !5055)
!5057 = !DILocation(line: 1443, column: 12, scope: !5044)
!5058 = !DILocation(line: 1444, column: 5, scope: !5055)
!5059 = !DILocation(line: 1446, column: 5, scope: !5055)
!5060 = !DILocation(line: 1448, column: 5, scope: !5036)
!5061 = !DILocation(line: 1450, column: 1, scope: !5036)
!5062 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !397, file: !397, line: 1647, type: !5063, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5063 = !DISubroutineType(types: !5064)
!5064 = !{!1735, !3109, !7}
!5065 = !DILocalVariable(name: "gs", arg: 1, scope: !5062, file: !397, line: 1647, type: !3109)
!5066 = !DILocation(line: 1647, column: 29, scope: !5062)
!5067 = !DILocalVariable(name: "i", arg: 2, scope: !5062, file: !397, line: 1647, type: !7)
!5068 = !DILocation(line: 1647, column: 42, scope: !5062)
!5069 = !DILocation(line: 1649, column: 23, scope: !5070)
!5070 = distinct !DILexicalBlock(scope: !5062, file: !397, line: 1649, column: 7)
!5071 = !DILocation(line: 1649, column: 7, scope: !5070)
!5072 = !DILocation(line: 1649, column: 7, scope: !5062)
!5073 = !DILocation(line: 1654, column: 26, scope: !5074)
!5074 = distinct !DILexicalBlock(scope: !5070, file: !397, line: 1650, column: 5)
!5075 = !DILocation(line: 1654, column: 14, scope: !5074)
!5076 = !DILocation(line: 1654, column: 52, scope: !5074)
!5077 = !DILocation(line: 1654, column: 50, scope: !5074)
!5078 = !DILocation(line: 1654, column: 7, scope: !5074)
!5079 = !DILocation(line: 1657, column: 5, scope: !5070)
!5080 = !DILocation(line: 1658, column: 1, scope: !5062)
!5081 = distinct !DISubprogram(name: "VEC_mem_ref_p_heap_reserve", scope: !3, file: !3, line: 161, type: !5082, scopeLine: 161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5082 = !DISubroutineType(types: !5083)
!5083 = !{!1467, !4898, !1467}
!5084 = !DILocalVariable(name: "vec_", arg: 1, scope: !5081, file: !3, line: 161, type: !4898)
!5085 = !DILocation(line: 161, column: 1, scope: !5081)
!5086 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5081, file: !3, line: 161, type: !1467)
!5087 = !DILocalVariable(name: "extend", scope: !5081, file: !3, line: 161, type: !1467)
!5088 = !DILocation(line: 161, column: 1, scope: !5089)
!5089 = distinct !DILexicalBlock(scope: !5081, file: !3, line: 161, column: 1)
!5090 = distinct !DISubprogram(name: "VEC_mem_ref_p_base_quick_push", scope: !3, file: !3, line: 160, type: !5091, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5091 = !DISubroutineType(types: !5092)
!5092 = !{!4897, !5093, !2848}
!5093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2854, size: 64)
!5094 = !DILocalVariable(name: "vec_", arg: 1, scope: !5090, file: !3, line: 160, type: !5093)
!5095 = !DILocation(line: 160, column: 1, scope: !5090)
!5096 = !DILocalVariable(name: "obj_", arg: 2, scope: !5090, file: !3, line: 160, type: !2848)
!5097 = !DILocalVariable(name: "slot_", scope: !5090, file: !3, line: 160, type: !4897)
!5098 = distinct !DISubprogram(name: "VEC_mem_ref_p_base_space", scope: !3, file: !3, line: 160, type: !5099, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5099 = !DISubroutineType(types: !5100)
!5100 = !{!1467, !5093, !1467}
!5101 = !DILocalVariable(name: "vec_", arg: 1, scope: !5098, file: !3, line: 160, type: !5093)
!5102 = !DILocation(line: 160, column: 1, scope: !5098)
!5103 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5098, file: !3, line: 160, type: !1467)
!5104 = distinct !DISubprogram(name: "VEC_mem_ref_locs_p_base_length", scope: !3, file: !3, line: 124, type: !5105, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5105 = !DISubroutineType(types: !5106)
!5106 = !{!7, !4314}
!5107 = !DILocalVariable(name: "vec_", arg: 1, scope: !5104, file: !3, line: 124, type: !4314)
!5108 = !DILocation(line: 124, column: 1, scope: !5104)
!5109 = distinct !DISubprogram(name: "VEC_mem_ref_locs_p_heap_safe_grow_cleared", scope: !3, file: !3, line: 125, type: !5110, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5110 = !DISubroutineType(types: !5111)
!5111 = !{null, !4359, !1467}
!5112 = !DILocalVariable(name: "vec_", arg: 1, scope: !5109, file: !3, line: 125, type: !4359)
!5113 = !DILocation(line: 125, column: 1, scope: !5109)
!5114 = !DILocalVariable(name: "size_", arg: 2, scope: !5109, file: !3, line: 125, type: !1467)
!5115 = !DILocalVariable(name: "oldsize", scope: !5109, file: !3, line: 125, type: !1467)
!5116 = distinct !DISubprogram(name: "VEC_mem_ref_locs_p_base_index", scope: !3, file: !3, line: 124, type: !5117, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5117 = !DISubroutineType(types: !5118)
!5118 = !{!2782, !4314, !7}
!5119 = !DILocalVariable(name: "vec_", arg: 1, scope: !5116, file: !3, line: 124, type: !4314)
!5120 = !DILocation(line: 124, column: 1, scope: !5116)
!5121 = !DILocalVariable(name: "ix_", arg: 2, scope: !5116, file: !3, line: 124, type: !7)
!5122 = !DILocation(line: 0, scope: !5116)
!5123 = distinct !DISubprogram(name: "mem_ref_locs_alloc", scope: !3, file: !3, line: 1263, type: !5124, scopeLine: 1264, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5124 = !DISubroutineType(types: !5125)
!5125 = !{!2782}
!5126 = !DILocalVariable(name: "accs", scope: !5123, file: !3, line: 1265, type: !2782)
!5127 = !DILocation(line: 1265, column: 18, scope: !5123)
!5128 = !DILocation(line: 1265, column: 25, scope: !5123)
!5129 = !DILocation(line: 1266, column: 3, scope: !5123)
!5130 = !DILocation(line: 1266, column: 9, scope: !5123)
!5131 = !DILocation(line: 1266, column: 14, scope: !5123)
!5132 = !DILocation(line: 1267, column: 10, scope: !5123)
!5133 = !DILocation(line: 1267, column: 3, scope: !5123)
!5134 = distinct !DISubprogram(name: "VEC_mem_ref_locs_p_base_replace", scope: !3, file: !3, line: 124, type: !5135, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5135 = !DISubroutineType(types: !5136)
!5136 = !{!2782, !5137, !7, !2782}
!5137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2775, size: 64)
!5138 = !DILocalVariable(name: "vec_", arg: 1, scope: !5134, file: !3, line: 124, type: !5137)
!5139 = !DILocation(line: 124, column: 1, scope: !5134)
!5140 = !DILocalVariable(name: "ix_", arg: 2, scope: !5134, file: !3, line: 124, type: !7)
!5141 = !DILocalVariable(name: "obj_", arg: 3, scope: !5134, file: !3, line: 124, type: !2782)
!5142 = !DILocalVariable(name: "old_obj_", scope: !5134, file: !3, line: 124, type: !2782)
!5143 = distinct !DISubprogram(name: "VEC_mem_ref_loc_p_heap_safe_push", scope: !3, file: !3, line: 115, type: !5144, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5144 = !DISubroutineType(types: !5145)
!5145 = !{!4369, !4383, !2799}
!5146 = !DILocalVariable(name: "vec_", arg: 1, scope: !5143, file: !3, line: 115, type: !4383)
!5147 = !DILocation(line: 115, column: 1, scope: !5143)
!5148 = !DILocalVariable(name: "obj_", arg: 2, scope: !5143, file: !3, line: 115, type: !2799)
!5149 = distinct !DISubprogram(name: "VEC_mem_ref_locs_p_heap_safe_grow", scope: !3, file: !3, line: 125, type: !5110, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5150 = !DILocalVariable(name: "vec_", arg: 1, scope: !5149, file: !3, line: 125, type: !4359)
!5151 = !DILocation(line: 125, column: 1, scope: !5149)
!5152 = !DILocalVariable(name: "size_", arg: 2, scope: !5149, file: !3, line: 125, type: !1467)
!5153 = !DILocation(line: 0, scope: !5149)
!5154 = distinct !DISubprogram(name: "VEC_mem_ref_locs_p_base_address", scope: !3, file: !3, line: 124, type: !5155, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5155 = !DISubroutineType(types: !5156)
!5156 = !{!4316, !5137}
!5157 = !DILocalVariable(name: "vec_", arg: 1, scope: !5154, file: !3, line: 124, type: !5137)
!5158 = !DILocation(line: 124, column: 1, scope: !5154)
!5159 = distinct !DISubprogram(name: "VEC_mem_ref_locs_p_heap_reserve_exact", scope: !3, file: !3, line: 125, type: !5160, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5160 = !DISubroutineType(types: !5161)
!5161 = !{!1467, !4359, !1467}
!5162 = !DILocalVariable(name: "vec_", arg: 1, scope: !5159, file: !3, line: 125, type: !4359)
!5163 = !DILocation(line: 125, column: 1, scope: !5159)
!5164 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5159, file: !3, line: 125, type: !1467)
!5165 = !DILocalVariable(name: "extend", scope: !5159, file: !3, line: 125, type: !1467)
!5166 = !DILocation(line: 125, column: 1, scope: !5167)
!5167 = distinct !DILexicalBlock(scope: !5159, file: !3, line: 125, column: 1)
!5168 = distinct !DISubprogram(name: "VEC_mem_ref_locs_p_base_space", scope: !3, file: !3, line: 124, type: !5169, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5169 = !DISubroutineType(types: !5170)
!5170 = !{!1467, !5137, !1467}
!5171 = !DILocalVariable(name: "vec_", arg: 1, scope: !5168, file: !3, line: 124, type: !5137)
!5172 = !DILocation(line: 124, column: 1, scope: !5168)
!5173 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5168, file: !3, line: 124, type: !1467)
!5174 = distinct !DISubprogram(name: "VEC_mem_ref_loc_p_heap_reserve", scope: !3, file: !3, line: 115, type: !5175, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5175 = !DISubroutineType(types: !5176)
!5176 = !{!1467, !4383, !1467}
!5177 = !DILocalVariable(name: "vec_", arg: 1, scope: !5174, file: !3, line: 115, type: !4383)
!5178 = !DILocation(line: 115, column: 1, scope: !5174)
!5179 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5174, file: !3, line: 115, type: !1467)
!5180 = !DILocalVariable(name: "extend", scope: !5174, file: !3, line: 115, type: !1467)
!5181 = !DILocation(line: 115, column: 1, scope: !5182)
!5182 = distinct !DILexicalBlock(scope: !5174, file: !3, line: 115, column: 1)
!5183 = distinct !DISubprogram(name: "VEC_mem_ref_loc_p_base_quick_push", scope: !3, file: !3, line: 114, type: !5184, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5184 = !DISubroutineType(types: !5185)
!5185 = !{!4369, !5186, !2799}
!5186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2792, size: 64)
!5187 = !DILocalVariable(name: "vec_", arg: 1, scope: !5183, file: !3, line: 114, type: !5186)
!5188 = !DILocation(line: 114, column: 1, scope: !5183)
!5189 = !DILocalVariable(name: "obj_", arg: 2, scope: !5183, file: !3, line: 114, type: !2799)
!5190 = !DILocalVariable(name: "slot_", scope: !5183, file: !3, line: 114, type: !4369)
!5191 = distinct !DISubprogram(name: "VEC_mem_ref_loc_p_base_space", scope: !3, file: !3, line: 114, type: !5192, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5192 = !DISubroutineType(types: !5193)
!5193 = !{!1467, !5186, !1467}
!5194 = !DILocalVariable(name: "vec_", arg: 1, scope: !5191, file: !3, line: 114, type: !5186)
!5195 = !DILocation(line: 114, column: 1, scope: !5191)
!5196 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5191, file: !3, line: 114, type: !1467)
!5197 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !2863, file: !2863, line: 32, type: !5198, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5198 = !DISubroutineType(types: !5199)
!5199 = !{!2861, !1467}
!5200 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5197, file: !2863, line: 32, type: !1467)
!5201 = !DILocation(line: 32, column: 1, scope: !5197)
!5202 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !330, file: !330, line: 85, type: !5203, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5203 = !DISubroutineType(types: !5204)
!5204 = !{!1467, !4391, !7, !4523}
!5205 = !DILocalVariable(name: "vec_", arg: 1, scope: !5202, file: !330, line: 85, type: !4391)
!5206 = !DILocation(line: 85, column: 1, scope: !5202)
!5207 = !DILocalVariable(name: "ix_", arg: 2, scope: !5202, file: !330, line: 85, type: !7)
!5208 = !DILocalVariable(name: "ptr", arg: 3, scope: !5202, file: !330, line: 85, type: !4523)
!5209 = !DILocation(line: 85, column: 1, scope: !5210)
!5210 = distinct !DILexicalBlock(scope: !5202, file: !330, line: 85, column: 1)
!5211 = !DILocation(line: 85, column: 1, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !5210, file: !330, line: 85, column: 1)
!5213 = !DILocation(line: 85, column: 1, scope: !5214)
!5214 = distinct !DILexicalBlock(scope: !5210, file: !330, line: 85, column: 1)
!5215 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2863, file: !2863, line: 31, type: !5216, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5216 = !DISubroutineType(types: !5217)
!5217 = !{!5218, !5219, !1467}
!5218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1467, size: 64)
!5219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2867, size: 64)
!5220 = !DILocalVariable(name: "vec_", arg: 1, scope: !5215, file: !2863, line: 31, type: !5219)
!5221 = !DILocation(line: 31, column: 1, scope: !5215)
!5222 = !DILocalVariable(name: "obj_", arg: 2, scope: !5215, file: !2863, line: 31, type: !1467)
!5223 = !DILocalVariable(name: "slot_", scope: !5215, file: !2863, line: 31, type: !5218)
!5224 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !330, file: !330, line: 85, type: !5225, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5225 = !DISubroutineType(types: !5226)
!5226 = !{!1943, !4391, !7}
!5227 = !DILocalVariable(name: "vec_", arg: 1, scope: !5224, file: !330, line: 85, type: !4391)
!5228 = !DILocation(line: 85, column: 1, scope: !5224)
!5229 = !DILocalVariable(name: "ix_", arg: 2, scope: !5224, file: !330, line: 85, type: !7)
!5230 = !DILocation(line: 0, scope: !5224)
!5231 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !2863, file: !2863, line: 31, type: !5232, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5232 = !DISubroutineType(types: !5233)
!5233 = !{!1467, !5234, !7, !5218}
!5234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5235, size: 64)
!5235 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2867)
!5236 = !DILocalVariable(name: "vec_", arg: 1, scope: !5231, file: !2863, line: 31, type: !5234)
!5237 = !DILocation(line: 31, column: 1, scope: !5231)
!5238 = !DILocalVariable(name: "ix_", arg: 2, scope: !5231, file: !2863, line: 31, type: !7)
!5239 = !DILocalVariable(name: "ptr", arg: 3, scope: !5231, file: !2863, line: 31, type: !5218)
!5240 = !DILocation(line: 31, column: 1, scope: !5241)
!5241 = distinct !DILexicalBlock(scope: !5231, file: !2863, line: 31, column: 1)
!5242 = !DILocation(line: 31, column: 1, scope: !5243)
!5243 = distinct !DILexicalBlock(scope: !5241, file: !2863, line: 31, column: 1)
!5244 = !DILocation(line: 31, column: 1, scope: !5245)
!5245 = distinct !DILexicalBlock(scope: !5241, file: !2863, line: 31, column: 1)
!5246 = distinct !DISubprogram(name: "get_loop", scope: !330, file: !330, line: 417, type: !5247, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5247 = !DISubroutineType(types: !5248)
!5248 = !{!1916, !7}
!5249 = !DILocalVariable(name: "num", arg: 1, scope: !5246, file: !330, line: 417, type: !7)
!5250 = !DILocation(line: 417, column: 20, scope: !5246)
!5251 = !DILocation(line: 419, column: 10, scope: !5246)
!5252 = !DILocation(line: 419, column: 3, scope: !5246)
!5253 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2863, file: !2863, line: 32, type: !5254, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5254 = !DISubroutineType(types: !5255)
!5255 = !{null, !5256}
!5256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2861, size: 64)
!5257 = !DILocalVariable(name: "vec_", arg: 1, scope: !5253, file: !2863, line: 32, type: !5256)
!5258 = !DILocation(line: 32, column: 1, scope: !5253)
!5259 = !DILocation(line: 32, column: 1, scope: !5260)
!5260 = distinct !DILexicalBlock(scope: !5253, file: !2863, line: 32, column: 1)
!5261 = distinct !DISubprogram(name: "create_vop_ref_mapping_loop", scope: !3, file: !3, line: 1534, type: !5262, scopeLine: 1535, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5262 = !DISubroutineType(types: !5263)
!5263 = !{null, !1916}
!5264 = !DILocalVariable(name: "loop", arg: 1, scope: !5261, file: !3, line: 1534, type: !1916)
!5265 = !DILocation(line: 1534, column: 43, scope: !5261)
!5266 = !DILocalVariable(name: "refs", scope: !5261, file: !3, line: 1536, type: !2301)
!5267 = !DILocation(line: 1536, column: 10, scope: !5261)
!5268 = !DILocation(line: 1536, column: 17, scope: !5261)
!5269 = !DILocalVariable(name: "sloop", scope: !5261, file: !3, line: 1537, type: !1916)
!5270 = !DILocation(line: 1537, column: 16, scope: !5261)
!5271 = !DILocalVariable(name: "bi", scope: !5261, file: !3, line: 1538, type: !5272)
!5272 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1604, line: 218, baseType: !5273)
!5273 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1604, line: 203, size: 256, elements: !5274)
!5274 = !{!5275, !5276, !5277, !5278}
!5275 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !5273, file: !1604, line: 206, baseType: !1607, size: 64)
!5276 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !5273, file: !1604, line: 209, baseType: !1607, size: 64, offset: 64)
!5277 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !5273, file: !1604, line: 212, baseType: !7, size: 32, offset: 128)
!5278 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !5273, file: !1604, line: 217, baseType: !1617, size: 64, offset: 192)
!5279 = !DILocation(line: 1538, column: 19, scope: !5261)
!5280 = !DILocalVariable(name: "i", scope: !5261, file: !3, line: 1539, type: !7)
!5281 = !DILocation(line: 1539, column: 12, scope: !5261)
!5282 = !DILocalVariable(name: "ref", scope: !5261, file: !3, line: 1540, type: !2848)
!5283 = !DILocation(line: 1540, column: 13, scope: !5261)
!5284 = !DILocation(line: 1542, column: 3, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5261, file: !3, line: 1542, column: 3)
!5286 = !DILocation(line: 1542, column: 3, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !5285, file: !3, line: 1542, column: 3)
!5288 = !DILocation(line: 1544, column: 13, scope: !5289)
!5289 = distinct !DILexicalBlock(scope: !5287, file: !3, line: 1543, column: 5)
!5290 = !DILocation(line: 1544, column: 11, scope: !5289)
!5291 = !DILocation(line: 1545, column: 20, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 1545, column: 7)
!5293 = !DILocation(line: 1545, column: 18, scope: !5292)
!5294 = !DILocation(line: 1545, column: 12, scope: !5292)
!5295 = !DILocation(line: 1545, column: 26, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !5292, file: !3, line: 1545, column: 7)
!5297 = !DILocation(line: 1545, column: 35, scope: !5296)
!5298 = !DILocation(line: 1545, column: 50, scope: !5296)
!5299 = !DILocation(line: 1545, column: 32, scope: !5296)
!5300 = !DILocation(line: 1545, column: 7, scope: !5292)
!5301 = !DILocation(line: 1546, column: 23, scope: !5296)
!5302 = !DILocation(line: 1546, column: 30, scope: !5296)
!5303 = !DILocation(line: 1546, column: 2, scope: !5296)
!5304 = !DILocation(line: 1545, column: 81, scope: !5296)
!5305 = !DILocation(line: 1545, column: 69, scope: !5296)
!5306 = !DILocation(line: 1545, column: 67, scope: !5296)
!5307 = !DILocation(line: 1545, column: 7, scope: !5296)
!5308 = distinct !{!5308, !5300, !5309}
!5309 = !DILocation(line: 1546, column: 33, scope: !5292)
!5310 = !DILocation(line: 1547, column: 5, scope: !5289)
!5311 = distinct !{!5311, !5284, !5312}
!5312 = !DILocation(line: 1547, column: 5, scope: !5285)
!5313 = !DILocation(line: 1548, column: 1, scope: !5261)
!5314 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1604, file: !1604, line: 224, type: !5315, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5315 = !DISubroutineType(types: !5316)
!5316 = !{null, !5317, !5318, !7, !5321}
!5317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5272, size: 64)
!5318 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1371, line: 48, baseType: !5319)
!5319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5320, size: 64)
!5320 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1603)
!5321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!5322 = !DILocalVariable(name: "bi", arg: 1, scope: !5314, file: !1604, line: 224, type: !5317)
!5323 = !DILocation(line: 224, column: 37, scope: !5314)
!5324 = !DILocalVariable(name: "map", arg: 2, scope: !5314, file: !1604, line: 224, type: !5318)
!5325 = !DILocation(line: 224, column: 54, scope: !5314)
!5326 = !DILocalVariable(name: "start_bit", arg: 3, scope: !5314, file: !1604, line: 225, type: !7)
!5327 = !DILocation(line: 225, column: 15, scope: !5314)
!5328 = !DILocalVariable(name: "bit_no", arg: 4, scope: !5314, file: !1604, line: 225, type: !5321)
!5329 = !DILocation(line: 225, column: 36, scope: !5314)
!5330 = !DILocation(line: 227, column: 14, scope: !5314)
!5331 = !DILocation(line: 227, column: 19, scope: !5314)
!5332 = !DILocation(line: 227, column: 3, scope: !5314)
!5333 = !DILocation(line: 227, column: 7, scope: !5314)
!5334 = !DILocation(line: 227, column: 12, scope: !5314)
!5335 = !DILocation(line: 228, column: 3, scope: !5314)
!5336 = !DILocation(line: 228, column: 7, scope: !5314)
!5337 = !DILocation(line: 228, column: 12, scope: !5314)
!5338 = !DILocation(line: 231, column: 3, scope: !5314)
!5339 = !DILocation(line: 233, column: 12, scope: !5340)
!5340 = distinct !DILexicalBlock(scope: !5341, file: !1604, line: 233, column: 11)
!5341 = distinct !DILexicalBlock(scope: !5314, file: !1604, line: 232, column: 5)
!5342 = !DILocation(line: 233, column: 16, scope: !5340)
!5343 = !DILocation(line: 233, column: 11, scope: !5341)
!5344 = !DILocation(line: 235, column: 4, scope: !5345)
!5345 = distinct !DILexicalBlock(scope: !5340, file: !1604, line: 234, column: 2)
!5346 = !DILocation(line: 235, column: 8, scope: !5345)
!5347 = !DILocation(line: 235, column: 13, scope: !5345)
!5348 = !DILocation(line: 236, column: 4, scope: !5345)
!5349 = !DILocation(line: 239, column: 11, scope: !5350)
!5350 = distinct !DILexicalBlock(scope: !5341, file: !1604, line: 239, column: 11)
!5351 = !DILocation(line: 239, column: 15, scope: !5350)
!5352 = !DILocation(line: 239, column: 21, scope: !5350)
!5353 = !DILocation(line: 239, column: 29, scope: !5350)
!5354 = !DILocation(line: 239, column: 39, scope: !5350)
!5355 = !DILocation(line: 239, column: 26, scope: !5350)
!5356 = !DILocation(line: 239, column: 11, scope: !5341)
!5357 = !DILocation(line: 240, column: 2, scope: !5350)
!5358 = !DILocation(line: 241, column: 18, scope: !5341)
!5359 = !DILocation(line: 241, column: 22, scope: !5341)
!5360 = !DILocation(line: 241, column: 28, scope: !5341)
!5361 = !DILocation(line: 241, column: 7, scope: !5341)
!5362 = !DILocation(line: 241, column: 11, scope: !5341)
!5363 = !DILocation(line: 241, column: 16, scope: !5341)
!5364 = distinct !{!5364, !5338, !5365}
!5365 = !DILocation(line: 242, column: 5, scope: !5314)
!5366 = !DILocation(line: 245, column: 7, scope: !5367)
!5367 = distinct !DILexicalBlock(scope: !5314, file: !1604, line: 245, column: 7)
!5368 = !DILocation(line: 245, column: 11, scope: !5367)
!5369 = !DILocation(line: 245, column: 17, scope: !5367)
!5370 = !DILocation(line: 245, column: 25, scope: !5367)
!5371 = !DILocation(line: 245, column: 35, scope: !5367)
!5372 = !DILocation(line: 245, column: 22, scope: !5367)
!5373 = !DILocation(line: 245, column: 7, scope: !5314)
!5374 = !DILocation(line: 246, column: 17, scope: !5367)
!5375 = !DILocation(line: 246, column: 21, scope: !5367)
!5376 = !DILocation(line: 246, column: 27, scope: !5367)
!5377 = !DILocation(line: 246, column: 32, scope: !5367)
!5378 = !DILocation(line: 246, column: 15, scope: !5367)
!5379 = !DILocation(line: 246, column: 5, scope: !5367)
!5380 = !DILocation(line: 249, column: 17, scope: !5314)
!5381 = !DILocation(line: 249, column: 27, scope: !5314)
!5382 = !DILocation(line: 249, column: 46, scope: !5314)
!5383 = !DILocation(line: 249, column: 3, scope: !5314)
!5384 = !DILocation(line: 249, column: 7, scope: !5314)
!5385 = !DILocation(line: 249, column: 15, scope: !5314)
!5386 = !DILocation(line: 250, column: 14, scope: !5314)
!5387 = !DILocation(line: 250, column: 18, scope: !5314)
!5388 = !DILocation(line: 250, column: 24, scope: !5314)
!5389 = !DILocation(line: 250, column: 29, scope: !5314)
!5390 = !DILocation(line: 250, column: 33, scope: !5314)
!5391 = !DILocation(line: 250, column: 3, scope: !5314)
!5392 = !DILocation(line: 250, column: 7, scope: !5314)
!5393 = !DILocation(line: 250, column: 12, scope: !5314)
!5394 = !DILocation(line: 251, column: 16, scope: !5314)
!5395 = !DILocation(line: 251, column: 26, scope: !5314)
!5396 = !DILocation(line: 251, column: 3, scope: !5314)
!5397 = !DILocation(line: 251, column: 7, scope: !5314)
!5398 = !DILocation(line: 251, column: 12, scope: !5314)
!5399 = !DILocation(line: 257, column: 17, scope: !5314)
!5400 = !DILocation(line: 257, column: 21, scope: !5314)
!5401 = !DILocation(line: 257, column: 16, scope: !5314)
!5402 = !DILocation(line: 257, column: 13, scope: !5314)
!5403 = !DILocation(line: 259, column: 13, scope: !5314)
!5404 = !DILocation(line: 259, column: 4, scope: !5314)
!5405 = !DILocation(line: 259, column: 11, scope: !5314)
!5406 = !DILocation(line: 260, column: 1, scope: !5314)
!5407 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1604, file: !1604, line: 393, type: !5408, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5408 = !DISubroutineType(types: !5409)
!5409 = !{!1490, !5317, !5321}
!5410 = !DILocalVariable(name: "bi", arg: 1, scope: !5407, file: !1604, line: 393, type: !5317)
!5411 = !DILocation(line: 393, column: 32, scope: !5407)
!5412 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5407, file: !1604, line: 393, type: !5321)
!5413 = !DILocation(line: 393, column: 46, scope: !5407)
!5414 = !DILocation(line: 396, column: 7, scope: !5415)
!5415 = distinct !DILexicalBlock(scope: !5407, file: !1604, line: 396, column: 7)
!5416 = !DILocation(line: 396, column: 11, scope: !5415)
!5417 = !DILocation(line: 396, column: 7, scope: !5407)
!5418 = !DILocation(line: 397, column: 5, scope: !5415)
!5419 = !DILabel(scope: !5420, name: "next_bit", file: !1604, line: 398)
!5420 = distinct !DILexicalBlock(scope: !5415, file: !1604, line: 397, column: 5)
!5421 = !DILocation(line: 398, column: 5, scope: !5420)
!5422 = !DILocation(line: 399, column: 7, scope: !5420)
!5423 = !DILocation(line: 399, column: 16, scope: !5420)
!5424 = !DILocation(line: 399, column: 20, scope: !5420)
!5425 = !DILocation(line: 399, column: 25, scope: !5420)
!5426 = !DILocation(line: 399, column: 14, scope: !5420)
!5427 = !DILocation(line: 401, column: 4, scope: !5428)
!5428 = distinct !DILexicalBlock(scope: !5420, file: !1604, line: 400, column: 2)
!5429 = !DILocation(line: 401, column: 8, scope: !5428)
!5430 = !DILocation(line: 401, column: 13, scope: !5428)
!5431 = !DILocation(line: 402, column: 5, scope: !5428)
!5432 = !DILocation(line: 402, column: 12, scope: !5428)
!5433 = distinct !{!5433, !5422, !5434}
!5434 = !DILocation(line: 403, column: 2, scope: !5420)
!5435 = !DILocation(line: 404, column: 7, scope: !5420)
!5436 = !DILocation(line: 410, column: 16, scope: !5407)
!5437 = !DILocation(line: 410, column: 15, scope: !5407)
!5438 = !DILocation(line: 410, column: 23, scope: !5407)
!5439 = !DILocation(line: 410, column: 42, scope: !5407)
!5440 = !DILocation(line: 411, column: 7, scope: !5407)
!5441 = !DILocation(line: 411, column: 26, scope: !5407)
!5442 = !DILocation(line: 410, column: 4, scope: !5407)
!5443 = !DILocation(line: 410, column: 11, scope: !5407)
!5444 = !DILocation(line: 412, column: 3, scope: !5407)
!5445 = !DILocation(line: 412, column: 7, scope: !5407)
!5446 = !DILocation(line: 412, column: 14, scope: !5407)
!5447 = !DILocation(line: 414, column: 3, scope: !5407)
!5448 = !DILocation(line: 417, column: 7, scope: !5449)
!5449 = distinct !DILexicalBlock(scope: !5407, file: !1604, line: 415, column: 5)
!5450 = !DILocation(line: 417, column: 14, scope: !5449)
!5451 = !DILocation(line: 417, column: 18, scope: !5449)
!5452 = !DILocation(line: 417, column: 26, scope: !5449)
!5453 = !DILocation(line: 419, column: 15, scope: !5454)
!5454 = distinct !DILexicalBlock(scope: !5449, file: !1604, line: 418, column: 2)
!5455 = !DILocation(line: 419, column: 19, scope: !5454)
!5456 = !DILocation(line: 419, column: 25, scope: !5454)
!5457 = !DILocation(line: 419, column: 30, scope: !5454)
!5458 = !DILocation(line: 419, column: 34, scope: !5454)
!5459 = !DILocation(line: 419, column: 4, scope: !5454)
!5460 = !DILocation(line: 419, column: 8, scope: !5454)
!5461 = !DILocation(line: 419, column: 13, scope: !5454)
!5462 = !DILocation(line: 420, column: 8, scope: !5463)
!5463 = distinct !DILexicalBlock(scope: !5454, file: !1604, line: 420, column: 8)
!5464 = !DILocation(line: 420, column: 12, scope: !5463)
!5465 = !DILocation(line: 420, column: 8, scope: !5454)
!5466 = !DILocation(line: 421, column: 6, scope: !5463)
!5467 = !DILocation(line: 422, column: 5, scope: !5454)
!5468 = !DILocation(line: 422, column: 12, scope: !5454)
!5469 = !DILocation(line: 423, column: 4, scope: !5454)
!5470 = !DILocation(line: 423, column: 8, scope: !5454)
!5471 = !DILocation(line: 423, column: 15, scope: !5454)
!5472 = distinct !{!5472, !5448, !5473}
!5473 = !DILocation(line: 424, column: 2, scope: !5449)
!5474 = !DILocation(line: 427, column: 18, scope: !5449)
!5475 = !DILocation(line: 427, column: 22, scope: !5449)
!5476 = !DILocation(line: 427, column: 28, scope: !5449)
!5477 = !DILocation(line: 427, column: 7, scope: !5449)
!5478 = !DILocation(line: 427, column: 11, scope: !5449)
!5479 = !DILocation(line: 427, column: 16, scope: !5449)
!5480 = !DILocation(line: 428, column: 12, scope: !5481)
!5481 = distinct !DILexicalBlock(scope: !5449, file: !1604, line: 428, column: 11)
!5482 = !DILocation(line: 428, column: 16, scope: !5481)
!5483 = !DILocation(line: 428, column: 11, scope: !5449)
!5484 = !DILocation(line: 429, column: 2, scope: !5481)
!5485 = !DILocation(line: 430, column: 17, scope: !5449)
!5486 = !DILocation(line: 430, column: 21, scope: !5449)
!5487 = !DILocation(line: 430, column: 27, scope: !5449)
!5488 = !DILocation(line: 430, column: 32, scope: !5449)
!5489 = !DILocation(line: 430, column: 8, scope: !5449)
!5490 = !DILocation(line: 430, column: 15, scope: !5449)
!5491 = !DILocation(line: 431, column: 7, scope: !5449)
!5492 = !DILocation(line: 431, column: 11, scope: !5449)
!5493 = !DILocation(line: 431, column: 19, scope: !5449)
!5494 = distinct !{!5494, !5447, !5495}
!5495 = !DILocation(line: 432, column: 5, scope: !5407)
!5496 = !DILocation(line: 433, column: 1, scope: !5407)
!5497 = distinct !DISubprogram(name: "VEC_mem_ref_p_base_index", scope: !3, file: !3, line: 160, type: !5498, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5498 = !DISubroutineType(types: !5499)
!5499 = !{!2848, !4837, !7}
!5500 = !DILocalVariable(name: "vec_", arg: 1, scope: !5497, file: !3, line: 160, type: !4837)
!5501 = !DILocation(line: 160, column: 1, scope: !5497)
!5502 = !DILocalVariable(name: "ix_", arg: 2, scope: !5497, file: !3, line: 160, type: !7)
!5503 = !DILocation(line: 0, scope: !5497)
!5504 = distinct !DISubprogram(name: "add_vop_ref_mapping", scope: !3, file: !3, line: 1515, type: !5505, scopeLine: 1516, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5505 = !DISubroutineType(types: !5506)
!5506 = !{null, !1916, !2848}
!5507 = !DILocalVariable(name: "loop", arg: 1, scope: !5504, file: !3, line: 1515, type: !1916)
!5508 = !DILocation(line: 1515, column: 35, scope: !5504)
!5509 = !DILocalVariable(name: "ref", arg: 2, scope: !5504, file: !3, line: 1515, type: !2848)
!5510 = !DILocation(line: 1515, column: 51, scope: !5504)
!5511 = !DILocalVariable(name: "map", scope: !5504, file: !3, line: 1517, type: !2218)
!5512 = !DILocation(line: 1517, column: 10, scope: !5504)
!5513 = !DILocation(line: 1517, column: 16, scope: !5504)
!5514 = !DILocalVariable(name: "stored", scope: !5504, file: !3, line: 1518, type: !1490)
!5515 = !DILocation(line: 1518, column: 8, scope: !5504)
!5516 = !DILocation(line: 1518, column: 31, scope: !5504)
!5517 = !DILocation(line: 1518, column: 36, scope: !5504)
!5518 = !DILocation(line: 1518, column: 44, scope: !5504)
!5519 = !DILocation(line: 1518, column: 50, scope: !5504)
!5520 = !DILocation(line: 1518, column: 17, scope: !5504)
!5521 = !DILocalVariable(name: "clobbers", scope: !5504, file: !3, line: 1519, type: !2301)
!5522 = !DILocation(line: 1519, column: 10, scope: !5504)
!5523 = !DILocation(line: 1519, column: 21, scope: !5504)
!5524 = !DILocalVariable(name: "bi", scope: !5504, file: !3, line: 1521, type: !5272)
!5525 = !DILocation(line: 1521, column: 19, scope: !5504)
!5526 = !DILocalVariable(name: "vop", scope: !5504, file: !3, line: 1522, type: !7)
!5527 = !DILocation(line: 1522, column: 12, scope: !5504)
!5528 = !DILocation(line: 1524, column: 3, scope: !5529)
!5529 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 1524, column: 3)
!5530 = !DILocation(line: 1524, column: 3, scope: !5531)
!5531 = distinct !DILexicalBlock(scope: !5529, file: !3, line: 1524, column: 3)
!5532 = !DILocation(line: 1526, column: 26, scope: !5533)
!5533 = distinct !DILexicalBlock(scope: !5531, file: !3, line: 1525, column: 5)
!5534 = !DILocation(line: 1526, column: 31, scope: !5533)
!5535 = !DILocation(line: 1526, column: 36, scope: !5533)
!5536 = !DILocation(line: 1526, column: 41, scope: !5533)
!5537 = !DILocation(line: 1526, column: 45, scope: !5533)
!5538 = !DILocation(line: 1526, column: 7, scope: !5533)
!5539 = !DILocation(line: 1527, column: 5, scope: !5533)
!5540 = distinct !{!5540, !5528, !5541}
!5541 = !DILocation(line: 1527, column: 5, scope: !5529)
!5542 = !DILocation(line: 1528, column: 1, scope: !5504)
!5543 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1604, file: !1604, line: 382, type: !5544, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5544 = !DISubroutineType(types: !5545)
!5545 = !{null, !5317, !5321}
!5546 = !DILocalVariable(name: "bi", arg: 1, scope: !5543, file: !1604, line: 382, type: !5317)
!5547 = !DILocation(line: 382, column: 33, scope: !5543)
!5548 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5543, file: !1604, line: 382, type: !5321)
!5549 = !DILocation(line: 382, column: 47, scope: !5543)
!5550 = !DILocation(line: 384, column: 3, scope: !5543)
!5551 = !DILocation(line: 384, column: 7, scope: !5543)
!5552 = !DILocation(line: 384, column: 12, scope: !5543)
!5553 = !DILocation(line: 385, column: 4, scope: !5543)
!5554 = !DILocation(line: 385, column: 11, scope: !5543)
!5555 = !DILocation(line: 386, column: 1, scope: !5543)
!5556 = distinct !DISubprogram(name: "VEC_htab_t_base_index", scope: !3, file: !3, line: 166, type: !5557, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5557 = !DISubroutineType(types: !5558)
!5558 = !{!2218, !5559, !7}
!5559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5560, size: 64)
!5560 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2831)
!5561 = !DILocalVariable(name: "vec_", arg: 1, scope: !5556, file: !3, line: 166, type: !5559)
!5562 = !DILocation(line: 166, column: 1, scope: !5556)
!5563 = !DILocalVariable(name: "ix_", arg: 2, scope: !5556, file: !3, line: 166, type: !7)
!5564 = !DILocation(line: 0, scope: !5556)
!5565 = distinct !DISubprogram(name: "bmp_iter_and_compl_init", scope: !1604, file: !1604, line: 334, type: !5566, scopeLine: 336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5566 = !DISubroutineType(types: !5567)
!5567 = !{null, !5317, !5318, !5318, !7, !5321}
!5568 = !DILocalVariable(name: "bi", arg: 1, scope: !5565, file: !1604, line: 334, type: !5317)
!5569 = !DILocation(line: 334, column: 43, scope: !5565)
!5570 = !DILocalVariable(name: "map1", arg: 2, scope: !5565, file: !1604, line: 334, type: !5318)
!5571 = !DILocation(line: 334, column: 60, scope: !5565)
!5572 = !DILocalVariable(name: "map2", arg: 3, scope: !5565, file: !1604, line: 334, type: !5318)
!5573 = !DILocation(line: 334, column: 79, scope: !5565)
!5574 = !DILocalVariable(name: "start_bit", arg: 4, scope: !5565, file: !1604, line: 335, type: !7)
!5575 = !DILocation(line: 335, column: 14, scope: !5565)
!5576 = !DILocalVariable(name: "bit_no", arg: 5, scope: !5565, file: !1604, line: 335, type: !5321)
!5577 = !DILocation(line: 335, column: 35, scope: !5565)
!5578 = !DILocation(line: 337, column: 14, scope: !5565)
!5579 = !DILocation(line: 337, column: 20, scope: !5565)
!5580 = !DILocation(line: 337, column: 3, scope: !5565)
!5581 = !DILocation(line: 337, column: 7, scope: !5565)
!5582 = !DILocation(line: 337, column: 12, scope: !5565)
!5583 = !DILocation(line: 338, column: 14, scope: !5565)
!5584 = !DILocation(line: 338, column: 20, scope: !5565)
!5585 = !DILocation(line: 338, column: 3, scope: !5565)
!5586 = !DILocation(line: 338, column: 7, scope: !5565)
!5587 = !DILocation(line: 338, column: 12, scope: !5565)
!5588 = !DILocation(line: 341, column: 3, scope: !5565)
!5589 = !DILocation(line: 343, column: 12, scope: !5590)
!5590 = distinct !DILexicalBlock(scope: !5591, file: !1604, line: 343, column: 11)
!5591 = distinct !DILexicalBlock(scope: !5565, file: !1604, line: 342, column: 5)
!5592 = !DILocation(line: 343, column: 16, scope: !5590)
!5593 = !DILocation(line: 343, column: 11, scope: !5591)
!5594 = !DILocation(line: 345, column: 4, scope: !5595)
!5595 = distinct !DILexicalBlock(scope: !5590, file: !1604, line: 344, column: 2)
!5596 = !DILocation(line: 345, column: 8, scope: !5595)
!5597 = !DILocation(line: 345, column: 13, scope: !5595)
!5598 = !DILocation(line: 346, column: 4, scope: !5595)
!5599 = !DILocation(line: 349, column: 11, scope: !5600)
!5600 = distinct !DILexicalBlock(scope: !5591, file: !1604, line: 349, column: 11)
!5601 = !DILocation(line: 349, column: 15, scope: !5600)
!5602 = !DILocation(line: 349, column: 21, scope: !5600)
!5603 = !DILocation(line: 349, column: 29, scope: !5600)
!5604 = !DILocation(line: 349, column: 39, scope: !5600)
!5605 = !DILocation(line: 349, column: 26, scope: !5600)
!5606 = !DILocation(line: 349, column: 11, scope: !5591)
!5607 = !DILocation(line: 350, column: 2, scope: !5600)
!5608 = !DILocation(line: 351, column: 18, scope: !5591)
!5609 = !DILocation(line: 351, column: 22, scope: !5591)
!5610 = !DILocation(line: 351, column: 28, scope: !5591)
!5611 = !DILocation(line: 351, column: 7, scope: !5591)
!5612 = !DILocation(line: 351, column: 11, scope: !5591)
!5613 = !DILocation(line: 351, column: 16, scope: !5591)
!5614 = distinct !{!5614, !5588, !5615}
!5615 = !DILocation(line: 352, column: 5, scope: !5565)
!5616 = !DILocation(line: 355, column: 3, scope: !5565)
!5617 = !DILocation(line: 355, column: 10, scope: !5565)
!5618 = !DILocation(line: 355, column: 14, scope: !5565)
!5619 = !DILocation(line: 355, column: 19, scope: !5565)
!5620 = !DILocation(line: 355, column: 22, scope: !5565)
!5621 = !DILocation(line: 355, column: 26, scope: !5565)
!5622 = !DILocation(line: 355, column: 32, scope: !5565)
!5623 = !DILocation(line: 355, column: 39, scope: !5565)
!5624 = !DILocation(line: 355, column: 43, scope: !5565)
!5625 = !DILocation(line: 355, column: 49, scope: !5565)
!5626 = !DILocation(line: 355, column: 37, scope: !5565)
!5627 = !DILocation(line: 0, scope: !5565)
!5628 = !DILocation(line: 356, column: 16, scope: !5565)
!5629 = !DILocation(line: 356, column: 20, scope: !5565)
!5630 = !DILocation(line: 356, column: 26, scope: !5565)
!5631 = !DILocation(line: 356, column: 5, scope: !5565)
!5632 = !DILocation(line: 356, column: 9, scope: !5565)
!5633 = !DILocation(line: 356, column: 14, scope: !5565)
!5634 = distinct !{!5634, !5616, !5630}
!5635 = !DILocation(line: 360, column: 7, scope: !5636)
!5636 = distinct !DILexicalBlock(scope: !5565, file: !1604, line: 360, column: 7)
!5637 = !DILocation(line: 360, column: 11, scope: !5636)
!5638 = !DILocation(line: 360, column: 17, scope: !5636)
!5639 = !DILocation(line: 360, column: 25, scope: !5636)
!5640 = !DILocation(line: 360, column: 35, scope: !5636)
!5641 = !DILocation(line: 360, column: 22, scope: !5636)
!5642 = !DILocation(line: 360, column: 7, scope: !5565)
!5643 = !DILocation(line: 361, column: 17, scope: !5636)
!5644 = !DILocation(line: 361, column: 21, scope: !5636)
!5645 = !DILocation(line: 361, column: 27, scope: !5636)
!5646 = !DILocation(line: 361, column: 32, scope: !5636)
!5647 = !DILocation(line: 361, column: 15, scope: !5636)
!5648 = !DILocation(line: 361, column: 5, scope: !5636)
!5649 = !DILocation(line: 363, column: 17, scope: !5565)
!5650 = !DILocation(line: 363, column: 27, scope: !5565)
!5651 = !DILocation(line: 363, column: 46, scope: !5565)
!5652 = !DILocation(line: 363, column: 3, scope: !5565)
!5653 = !DILocation(line: 363, column: 7, scope: !5565)
!5654 = !DILocation(line: 363, column: 15, scope: !5565)
!5655 = !DILocation(line: 364, column: 14, scope: !5565)
!5656 = !DILocation(line: 364, column: 18, scope: !5565)
!5657 = !DILocation(line: 364, column: 24, scope: !5565)
!5658 = !DILocation(line: 364, column: 29, scope: !5565)
!5659 = !DILocation(line: 364, column: 33, scope: !5565)
!5660 = !DILocation(line: 364, column: 3, scope: !5565)
!5661 = !DILocation(line: 364, column: 7, scope: !5565)
!5662 = !DILocation(line: 364, column: 12, scope: !5565)
!5663 = !DILocation(line: 365, column: 7, scope: !5664)
!5664 = distinct !DILexicalBlock(scope: !5565, file: !1604, line: 365, column: 7)
!5665 = !DILocation(line: 365, column: 11, scope: !5664)
!5666 = !DILocation(line: 365, column: 16, scope: !5664)
!5667 = !DILocation(line: 365, column: 19, scope: !5664)
!5668 = !DILocation(line: 365, column: 23, scope: !5664)
!5669 = !DILocation(line: 365, column: 29, scope: !5664)
!5670 = !DILocation(line: 365, column: 37, scope: !5664)
!5671 = !DILocation(line: 365, column: 41, scope: !5664)
!5672 = !DILocation(line: 365, column: 47, scope: !5664)
!5673 = !DILocation(line: 365, column: 34, scope: !5664)
!5674 = !DILocation(line: 365, column: 7, scope: !5565)
!5675 = !DILocation(line: 366, column: 18, scope: !5664)
!5676 = !DILocation(line: 366, column: 22, scope: !5664)
!5677 = !DILocation(line: 366, column: 28, scope: !5664)
!5678 = !DILocation(line: 366, column: 33, scope: !5664)
!5679 = !DILocation(line: 366, column: 37, scope: !5664)
!5680 = !DILocation(line: 366, column: 17, scope: !5664)
!5681 = !DILocation(line: 366, column: 5, scope: !5664)
!5682 = !DILocation(line: 366, column: 9, scope: !5664)
!5683 = !DILocation(line: 366, column: 14, scope: !5664)
!5684 = !DILocation(line: 367, column: 16, scope: !5565)
!5685 = !DILocation(line: 367, column: 26, scope: !5565)
!5686 = !DILocation(line: 367, column: 3, scope: !5565)
!5687 = !DILocation(line: 367, column: 7, scope: !5565)
!5688 = !DILocation(line: 367, column: 12, scope: !5565)
!5689 = !DILocation(line: 373, column: 17, scope: !5565)
!5690 = !DILocation(line: 373, column: 21, scope: !5565)
!5691 = !DILocation(line: 373, column: 16, scope: !5565)
!5692 = !DILocation(line: 373, column: 13, scope: !5565)
!5693 = !DILocation(line: 375, column: 13, scope: !5565)
!5694 = !DILocation(line: 375, column: 4, scope: !5565)
!5695 = !DILocation(line: 375, column: 11, scope: !5565)
!5696 = !DILocation(line: 376, column: 1, scope: !5565)
!5697 = distinct !DISubprogram(name: "bmp_iter_and_compl", scope: !1604, file: !1604, line: 507, type: !5408, scopeLine: 508, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5698 = !DILocalVariable(name: "bi", arg: 1, scope: !5697, file: !1604, line: 507, type: !5317)
!5699 = !DILocation(line: 507, column: 38, scope: !5697)
!5700 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5697, file: !1604, line: 507, type: !5321)
!5701 = !DILocation(line: 507, column: 52, scope: !5697)
!5702 = !DILocation(line: 510, column: 7, scope: !5703)
!5703 = distinct !DILexicalBlock(scope: !5697, file: !1604, line: 510, column: 7)
!5704 = !DILocation(line: 510, column: 11, scope: !5703)
!5705 = !DILocation(line: 510, column: 7, scope: !5697)
!5706 = !DILocation(line: 511, column: 5, scope: !5703)
!5707 = !DILabel(scope: !5708, name: "next_bit", file: !1604, line: 512)
!5708 = distinct !DILexicalBlock(scope: !5703, file: !1604, line: 511, column: 5)
!5709 = !DILocation(line: 512, column: 5, scope: !5708)
!5710 = !DILocation(line: 513, column: 7, scope: !5708)
!5711 = !DILocation(line: 513, column: 16, scope: !5708)
!5712 = !DILocation(line: 513, column: 20, scope: !5708)
!5713 = !DILocation(line: 513, column: 25, scope: !5708)
!5714 = !DILocation(line: 513, column: 14, scope: !5708)
!5715 = !DILocation(line: 515, column: 4, scope: !5716)
!5716 = distinct !DILexicalBlock(scope: !5708, file: !1604, line: 514, column: 2)
!5717 = !DILocation(line: 515, column: 8, scope: !5716)
!5718 = !DILocation(line: 515, column: 13, scope: !5716)
!5719 = !DILocation(line: 516, column: 5, scope: !5716)
!5720 = !DILocation(line: 516, column: 12, scope: !5716)
!5721 = distinct !{!5721, !5710, !5722}
!5722 = !DILocation(line: 517, column: 2, scope: !5708)
!5723 = !DILocation(line: 518, column: 7, scope: !5708)
!5724 = !DILocation(line: 524, column: 16, scope: !5697)
!5725 = !DILocation(line: 524, column: 15, scope: !5697)
!5726 = !DILocation(line: 524, column: 23, scope: !5697)
!5727 = !DILocation(line: 524, column: 42, scope: !5697)
!5728 = !DILocation(line: 525, column: 7, scope: !5697)
!5729 = !DILocation(line: 525, column: 26, scope: !5697)
!5730 = !DILocation(line: 524, column: 4, scope: !5697)
!5731 = !DILocation(line: 524, column: 11, scope: !5697)
!5732 = !DILocation(line: 526, column: 3, scope: !5697)
!5733 = !DILocation(line: 526, column: 7, scope: !5697)
!5734 = !DILocation(line: 526, column: 14, scope: !5697)
!5735 = !DILocation(line: 528, column: 3, scope: !5697)
!5736 = !DILocation(line: 531, column: 7, scope: !5737)
!5737 = distinct !DILexicalBlock(scope: !5697, file: !1604, line: 529, column: 5)
!5738 = !DILocation(line: 531, column: 14, scope: !5737)
!5739 = !DILocation(line: 531, column: 18, scope: !5737)
!5740 = !DILocation(line: 531, column: 26, scope: !5737)
!5741 = !DILocation(line: 533, column: 15, scope: !5742)
!5742 = distinct !DILexicalBlock(scope: !5737, file: !1604, line: 532, column: 2)
!5743 = !DILocation(line: 533, column: 19, scope: !5742)
!5744 = !DILocation(line: 533, column: 25, scope: !5742)
!5745 = !DILocation(line: 533, column: 30, scope: !5742)
!5746 = !DILocation(line: 533, column: 34, scope: !5742)
!5747 = !DILocation(line: 533, column: 4, scope: !5742)
!5748 = !DILocation(line: 533, column: 8, scope: !5742)
!5749 = !DILocation(line: 533, column: 13, scope: !5742)
!5750 = !DILocation(line: 534, column: 8, scope: !5751)
!5751 = distinct !DILexicalBlock(scope: !5742, file: !1604, line: 534, column: 8)
!5752 = !DILocation(line: 534, column: 12, scope: !5751)
!5753 = !DILocation(line: 534, column: 17, scope: !5751)
!5754 = !DILocation(line: 534, column: 20, scope: !5751)
!5755 = !DILocation(line: 534, column: 24, scope: !5751)
!5756 = !DILocation(line: 534, column: 30, scope: !5751)
!5757 = !DILocation(line: 534, column: 38, scope: !5751)
!5758 = !DILocation(line: 534, column: 42, scope: !5751)
!5759 = !DILocation(line: 534, column: 48, scope: !5751)
!5760 = !DILocation(line: 534, column: 35, scope: !5751)
!5761 = !DILocation(line: 534, column: 8, scope: !5742)
!5762 = !DILocation(line: 535, column: 19, scope: !5751)
!5763 = !DILocation(line: 535, column: 23, scope: !5751)
!5764 = !DILocation(line: 535, column: 29, scope: !5751)
!5765 = !DILocation(line: 535, column: 34, scope: !5751)
!5766 = !DILocation(line: 535, column: 38, scope: !5751)
!5767 = !DILocation(line: 535, column: 18, scope: !5751)
!5768 = !DILocation(line: 535, column: 6, scope: !5751)
!5769 = !DILocation(line: 535, column: 10, scope: !5751)
!5770 = !DILocation(line: 535, column: 15, scope: !5751)
!5771 = !DILocation(line: 536, column: 8, scope: !5772)
!5772 = distinct !DILexicalBlock(scope: !5742, file: !1604, line: 536, column: 8)
!5773 = !DILocation(line: 536, column: 12, scope: !5772)
!5774 = !DILocation(line: 536, column: 8, scope: !5742)
!5775 = !DILocation(line: 537, column: 6, scope: !5772)
!5776 = !DILocation(line: 538, column: 5, scope: !5742)
!5777 = !DILocation(line: 538, column: 12, scope: !5742)
!5778 = !DILocation(line: 539, column: 4, scope: !5742)
!5779 = !DILocation(line: 539, column: 8, scope: !5742)
!5780 = !DILocation(line: 539, column: 15, scope: !5742)
!5781 = distinct !{!5781, !5736, !5782}
!5782 = !DILocation(line: 540, column: 2, scope: !5737)
!5783 = !DILocation(line: 543, column: 18, scope: !5737)
!5784 = !DILocation(line: 543, column: 22, scope: !5737)
!5785 = !DILocation(line: 543, column: 28, scope: !5737)
!5786 = !DILocation(line: 543, column: 7, scope: !5737)
!5787 = !DILocation(line: 543, column: 11, scope: !5737)
!5788 = !DILocation(line: 543, column: 16, scope: !5737)
!5789 = !DILocation(line: 544, column: 12, scope: !5790)
!5790 = distinct !DILexicalBlock(scope: !5737, file: !1604, line: 544, column: 11)
!5791 = !DILocation(line: 544, column: 16, scope: !5790)
!5792 = !DILocation(line: 544, column: 11, scope: !5737)
!5793 = !DILocation(line: 545, column: 2, scope: !5790)
!5794 = !DILocation(line: 548, column: 7, scope: !5737)
!5795 = !DILocation(line: 548, column: 14, scope: !5737)
!5796 = !DILocation(line: 548, column: 18, scope: !5737)
!5797 = !DILocation(line: 548, column: 23, scope: !5737)
!5798 = !DILocation(line: 548, column: 26, scope: !5737)
!5799 = !DILocation(line: 548, column: 30, scope: !5737)
!5800 = !DILocation(line: 548, column: 36, scope: !5737)
!5801 = !DILocation(line: 548, column: 43, scope: !5737)
!5802 = !DILocation(line: 548, column: 47, scope: !5737)
!5803 = !DILocation(line: 548, column: 53, scope: !5737)
!5804 = !DILocation(line: 548, column: 41, scope: !5737)
!5805 = !DILocation(line: 0, scope: !5737)
!5806 = !DILocation(line: 549, column: 13, scope: !5737)
!5807 = !DILocation(line: 549, column: 17, scope: !5737)
!5808 = !DILocation(line: 549, column: 23, scope: !5737)
!5809 = !DILocation(line: 549, column: 2, scope: !5737)
!5810 = !DILocation(line: 549, column: 6, scope: !5737)
!5811 = !DILocation(line: 549, column: 11, scope: !5737)
!5812 = distinct !{!5812, !5794, !5808}
!5813 = !DILocation(line: 551, column: 17, scope: !5737)
!5814 = !DILocation(line: 551, column: 21, scope: !5737)
!5815 = !DILocation(line: 551, column: 27, scope: !5737)
!5816 = !DILocation(line: 551, column: 32, scope: !5737)
!5817 = !DILocation(line: 551, column: 8, scope: !5737)
!5818 = !DILocation(line: 551, column: 15, scope: !5737)
!5819 = !DILocation(line: 552, column: 7, scope: !5737)
!5820 = !DILocation(line: 552, column: 11, scope: !5737)
!5821 = !DILocation(line: 552, column: 19, scope: !5737)
!5822 = distinct !{!5822, !5735, !5823}
!5823 = !DILocation(line: 553, column: 5, scope: !5697)
!5824 = !DILocation(line: 554, column: 1, scope: !5697)
!5825 = distinct !DISubprogram(name: "record_vop_access", scope: !3, file: !3, line: 1469, type: !5826, scopeLine: 1470, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5826 = !DISubroutineType(types: !5827)
!5827 = !{null, !2218, !7, !7, !1490}
!5828 = !DILocalVariable(name: "vop_to_refs", arg: 1, scope: !5825, file: !3, line: 1469, type: !2218)
!5829 = !DILocation(line: 1469, column: 27, scope: !5825)
!5830 = !DILocalVariable(name: "vop", arg: 2, scope: !5825, file: !3, line: 1469, type: !7)
!5831 = !DILocation(line: 1469, column: 49, scope: !5825)
!5832 = !DILocalVariable(name: "ref", arg: 3, scope: !5825, file: !3, line: 1469, type: !7)
!5833 = !DILocation(line: 1469, column: 63, scope: !5825)
!5834 = !DILocalVariable(name: "stored", arg: 4, scope: !5825, file: !3, line: 1469, type: !1490)
!5835 = !DILocation(line: 1469, column: 73, scope: !5825)
!5836 = !DILocalVariable(name: "slot", scope: !5825, file: !3, line: 1471, type: !2239)
!5837 = !DILocation(line: 1471, column: 10, scope: !5825)
!5838 = !DILocation(line: 1471, column: 43, scope: !5825)
!5839 = !DILocation(line: 1471, column: 56, scope: !5825)
!5840 = !DILocation(line: 1471, column: 62, scope: !5825)
!5841 = !DILocation(line: 1471, column: 17, scope: !5825)
!5842 = !DILocalVariable(name: "vtoe", scope: !5825, file: !3, line: 1472, type: !2847)
!5843 = !DILocation(line: 1472, column: 27, scope: !5825)
!5844 = !DILocation(line: 1474, column: 9, scope: !5845)
!5845 = distinct !DILexicalBlock(scope: !5825, file: !3, line: 1474, column: 7)
!5846 = !DILocation(line: 1474, column: 8, scope: !5845)
!5847 = !DILocation(line: 1474, column: 7, scope: !5825)
!5848 = !DILocation(line: 1476, column: 14, scope: !5849)
!5849 = distinct !DILexicalBlock(scope: !5845, file: !3, line: 1475, column: 5)
!5850 = !DILocation(line: 1476, column: 12, scope: !5849)
!5851 = !DILocation(line: 1477, column: 19, scope: !5849)
!5852 = !DILocation(line: 1477, column: 7, scope: !5849)
!5853 = !DILocation(line: 1477, column: 13, scope: !5849)
!5854 = !DILocation(line: 1477, column: 17, scope: !5849)
!5855 = !DILocation(line: 1478, column: 24, scope: !5849)
!5856 = !DILocation(line: 1478, column: 7, scope: !5849)
!5857 = !DILocation(line: 1478, column: 13, scope: !5849)
!5858 = !DILocation(line: 1478, column: 22, scope: !5849)
!5859 = !DILocation(line: 1479, column: 27, scope: !5849)
!5860 = !DILocation(line: 1479, column: 7, scope: !5849)
!5861 = !DILocation(line: 1479, column: 13, scope: !5849)
!5862 = !DILocation(line: 1479, column: 25, scope: !5849)
!5863 = !DILocation(line: 1480, column: 15, scope: !5849)
!5864 = !DILocation(line: 1480, column: 8, scope: !5849)
!5865 = !DILocation(line: 1480, column: 13, scope: !5849)
!5866 = !DILocation(line: 1481, column: 5, scope: !5849)
!5867 = !DILocation(line: 1483, column: 40, scope: !5845)
!5868 = !DILocation(line: 1483, column: 39, scope: !5845)
!5869 = !DILocation(line: 1483, column: 12, scope: !5845)
!5870 = !DILocation(line: 1483, column: 10, scope: !5845)
!5871 = !DILocation(line: 1485, column: 19, scope: !5825)
!5872 = !DILocation(line: 1485, column: 25, scope: !5825)
!5873 = !DILocation(line: 1485, column: 35, scope: !5825)
!5874 = !DILocation(line: 1485, column: 3, scope: !5825)
!5875 = !DILocation(line: 1486, column: 7, scope: !5876)
!5876 = distinct !DILexicalBlock(scope: !5825, file: !3, line: 1486, column: 7)
!5877 = !DILocation(line: 1486, column: 7, scope: !5825)
!5878 = !DILocation(line: 1487, column: 21, scope: !5876)
!5879 = !DILocation(line: 1487, column: 27, scope: !5876)
!5880 = !DILocation(line: 1487, column: 40, scope: !5876)
!5881 = !DILocation(line: 1487, column: 5, scope: !5876)
!5882 = !DILocation(line: 1488, column: 1, scope: !5825)
!5883 = distinct !DISubprogram(name: "determine_invariantness_stmt", scope: !3, file: !3, line: 906, type: !3447, scopeLine: 908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!5884 = !DILocalVariable(name: "dw_data", arg: 1, scope: !5883, file: !3, line: 906, type: !3444)
!5885 = !DILocation(line: 906, column: 53, scope: !5883)
!5886 = !DILocalVariable(name: "bb", arg: 2, scope: !5883, file: !3, line: 907, type: !2186)
!5887 = !DILocation(line: 907, column: 22, scope: !5883)
!5888 = !DILocalVariable(name: "pos", scope: !5883, file: !3, line: 909, type: !390)
!5889 = !DILocation(line: 909, column: 17, scope: !5883)
!5890 = !DILocalVariable(name: "bsi", scope: !5883, file: !3, line: 910, type: !3317)
!5891 = !DILocation(line: 910, column: 24, scope: !5883)
!5892 = !DILocalVariable(name: "stmt", scope: !5883, file: !3, line: 911, type: !1701)
!5893 = !DILocation(line: 911, column: 10, scope: !5883)
!5894 = !DILocalVariable(name: "maybe_never", scope: !5883, file: !3, line: 912, type: !1490)
!5895 = !DILocation(line: 912, column: 8, scope: !5883)
!5896 = !DILocation(line: 912, column: 22, scope: !5883)
!5897 = !DILocation(line: 912, column: 46, scope: !5883)
!5898 = !DILocalVariable(name: "outermost", scope: !5883, file: !3, line: 913, type: !1916)
!5899 = !DILocation(line: 913, column: 16, scope: !5883)
!5900 = !DILocation(line: 913, column: 28, scope: !5883)
!5901 = !DILocalVariable(name: "lim_data", scope: !5883, file: !3, line: 914, type: !2874)
!5902 = !DILocation(line: 914, column: 24, scope: !5883)
!5903 = !DILocation(line: 916, column: 20, scope: !5904)
!5904 = distinct !DILexicalBlock(scope: !5883, file: !3, line: 916, column: 7)
!5905 = !DILocation(line: 916, column: 24, scope: !5904)
!5906 = !DILocation(line: 916, column: 8, scope: !5904)
!5907 = !DILocation(line: 916, column: 7, scope: !5883)
!5908 = !DILocation(line: 917, column: 5, scope: !5904)
!5909 = !DILocation(line: 919, column: 7, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !5883, file: !3, line: 919, column: 7)
!5911 = !DILocation(line: 919, column: 17, scope: !5910)
!5912 = !DILocation(line: 919, column: 21, scope: !5910)
!5913 = !DILocation(line: 919, column: 32, scope: !5910)
!5914 = !DILocation(line: 919, column: 7, scope: !5883)
!5915 = !DILocation(line: 920, column: 14, scope: !5910)
!5916 = !DILocation(line: 921, column: 7, scope: !5910)
!5917 = !DILocation(line: 921, column: 11, scope: !5910)
!5918 = !DILocation(line: 921, column: 18, scope: !5910)
!5919 = !DILocation(line: 921, column: 22, scope: !5910)
!5920 = !DILocation(line: 921, column: 35, scope: !5910)
!5921 = !DILocation(line: 921, column: 52, scope: !5910)
!5922 = !DILocation(line: 921, column: 56, scope: !5910)
!5923 = !DILocation(line: 921, column: 40, scope: !5910)
!5924 = !DILocation(line: 920, column: 5, scope: !5910)
!5925 = !DILocation(line: 923, column: 28, scope: !5926)
!5926 = distinct !DILexicalBlock(scope: !5883, file: !3, line: 923, column: 3)
!5927 = !DILocation(line: 923, column: 14, scope: !5926)
!5928 = !DILocation(line: 923, column: 8, scope: !5926)
!5929 = !DILocation(line: 923, column: 34, scope: !5930)
!5930 = distinct !DILexicalBlock(scope: !5926, file: !3, line: 923, column: 3)
!5931 = !DILocation(line: 923, column: 33, scope: !5930)
!5932 = !DILocation(line: 923, column: 3, scope: !5926)
!5933 = !DILocation(line: 925, column: 14, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5930, file: !3, line: 924, column: 5)
!5935 = !DILocation(line: 925, column: 12, scope: !5934)
!5936 = !DILocation(line: 927, column: 35, scope: !5934)
!5937 = !DILocation(line: 927, column: 13, scope: !5934)
!5938 = !DILocation(line: 927, column: 11, scope: !5934)
!5939 = !DILocation(line: 928, column: 11, scope: !5940)
!5940 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 928, column: 11)
!5941 = !DILocation(line: 928, column: 15, scope: !5940)
!5942 = !DILocation(line: 928, column: 11, scope: !5934)
!5943 = !DILocation(line: 930, column: 24, scope: !5944)
!5944 = distinct !DILexicalBlock(scope: !5945, file: !3, line: 930, column: 8)
!5945 = distinct !DILexicalBlock(scope: !5940, file: !3, line: 929, column: 2)
!5946 = !DILocation(line: 930, column: 8, scope: !5944)
!5947 = !DILocation(line: 930, column: 8, scope: !5945)
!5948 = !DILocation(line: 932, column: 20, scope: !5949)
!5949 = distinct !DILexicalBlock(scope: !5944, file: !3, line: 931, column: 6)
!5950 = !DILocation(line: 933, column: 18, scope: !5949)
!5951 = !DILocation(line: 934, column: 6, scope: !5949)
!5952 = !DILocation(line: 937, column: 38, scope: !5953)
!5953 = distinct !DILexicalBlock(scope: !5944, file: !3, line: 937, column: 13)
!5954 = !DILocation(line: 937, column: 13, scope: !5953)
!5955 = !DILocation(line: 937, column: 13, scope: !5944)
!5956 = !DILocalVariable(name: "lim_data", scope: !5957, file: !3, line: 939, type: !2874)
!5957 = distinct !DILexicalBlock(scope: !5953, file: !3, line: 938, column: 6)
!5958 = !DILocation(line: 939, column: 29, scope: !5957)
!5959 = !DILocation(line: 939, column: 55, scope: !5957)
!5960 = !DILocation(line: 939, column: 40, scope: !5957)
!5961 = !DILocation(line: 940, column: 39, scope: !5957)
!5962 = !DILocation(line: 940, column: 8, scope: !5957)
!5963 = !DILocation(line: 940, column: 18, scope: !5957)
!5964 = !DILocation(line: 940, column: 37, scope: !5957)
!5965 = !DILocation(line: 941, column: 6, scope: !5957)
!5966 = !DILocation(line: 942, column: 4, scope: !5945)
!5967 = !DILocation(line: 945, column: 29, scope: !5968)
!5968 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 945, column: 11)
!5969 = !DILocation(line: 945, column: 11, scope: !5968)
!5970 = !DILocation(line: 946, column: 4, scope: !5968)
!5971 = !DILocation(line: 946, column: 54, scope: !5968)
!5972 = !DILocation(line: 946, column: 30, scope: !5968)
!5973 = !DILocation(line: 946, column: 8, scope: !5968)
!5974 = !DILocation(line: 947, column: 8, scope: !5968)
!5975 = !DILocation(line: 945, column: 11, scope: !5934)
!5976 = !DILocalVariable(name: "op0", scope: !5977, file: !3, line: 949, type: !1370)
!5977 = distinct !DILexicalBlock(scope: !5968, file: !3, line: 948, column: 2)
!5978 = !DILocation(line: 949, column: 9, scope: !5977)
!5979 = !DILocation(line: 949, column: 35, scope: !5977)
!5980 = !DILocation(line: 949, column: 15, scope: !5977)
!5981 = !DILocalVariable(name: "op1", scope: !5977, file: !3, line: 950, type: !1370)
!5982 = !DILocation(line: 950, column: 9, scope: !5977)
!5983 = !DILocation(line: 950, column: 35, scope: !5977)
!5984 = !DILocation(line: 950, column: 15, scope: !5977)
!5985 = !DILocalVariable(name: "ol1", scope: !5977, file: !3, line: 951, type: !1916)
!5986 = !DILocation(line: 951, column: 17, scope: !5977)
!5987 = !DILocation(line: 951, column: 49, scope: !5977)
!5988 = !DILocation(line: 952, column: 28, scope: !5977)
!5989 = !DILocation(line: 952, column: 6, scope: !5977)
!5990 = !DILocation(line: 951, column: 23, scope: !5977)
!5991 = !DILocation(line: 956, column: 8, scope: !5992)
!5992 = distinct !DILexicalBlock(scope: !5977, file: !3, line: 956, column: 8)
!5993 = !DILocation(line: 956, column: 12, scope: !5992)
!5994 = !DILocation(line: 957, column: 8, scope: !5992)
!5995 = !DILocation(line: 957, column: 35, scope: !5992)
!5996 = !DILocation(line: 957, column: 11, scope: !5992)
!5997 = !DILocation(line: 957, column: 41, scope: !5992)
!5998 = !DILocation(line: 958, column: 8, scope: !5992)
!5999 = !DILocation(line: 958, column: 11, scope: !5992)
!6000 = !DILocation(line: 959, column: 8, scope: !5992)
!6001 = !DILocation(line: 959, column: 12, scope: !5992)
!6002 = !DILocation(line: 960, column: 8, scope: !5992)
!6003 = !DILocation(line: 960, column: 11, scope: !5992)
!6004 = !DILocation(line: 960, column: 15, scope: !5992)
!6005 = !DILocation(line: 961, column: 8, scope: !5992)
!6006 = !DILocation(line: 961, column: 37, scope: !5992)
!6007 = !DILocation(line: 961, column: 42, scope: !5992)
!6008 = !DILocation(line: 961, column: 11, scope: !5992)
!6009 = !DILocation(line: 961, column: 47, scope: !5992)
!6010 = !DILocation(line: 956, column: 8, scope: !5977)
!6011 = !DILocation(line: 962, column: 13, scope: !5992)
!6012 = !DILocation(line: 962, column: 11, scope: !5992)
!6013 = !DILocation(line: 962, column: 6, scope: !5992)
!6014 = !DILocation(line: 967, column: 8, scope: !6015)
!6015 = distinct !DILexicalBlock(scope: !5977, file: !3, line: 967, column: 8)
!6016 = !DILocation(line: 967, column: 12, scope: !6015)
!6017 = !DILocation(line: 968, column: 8, scope: !6015)
!6018 = !DILocation(line: 968, column: 35, scope: !6015)
!6019 = !DILocation(line: 968, column: 11, scope: !6015)
!6020 = !DILocation(line: 968, column: 41, scope: !6015)
!6021 = !DILocation(line: 969, column: 8, scope: !6015)
!6022 = !DILocation(line: 969, column: 25, scope: !6015)
!6023 = !DILocation(line: 969, column: 11, scope: !6015)
!6024 = !DILocation(line: 970, column: 8, scope: !6015)
!6025 = !DILocation(line: 970, column: 11, scope: !6015)
!6026 = !DILocation(line: 970, column: 27, scope: !6015)
!6027 = !DILocation(line: 971, column: 8, scope: !6015)
!6028 = !DILocation(line: 971, column: 27, scope: !6015)
!6029 = !DILocation(line: 971, column: 11, scope: !6015)
!6030 = !DILocation(line: 967, column: 8, scope: !5977)
!6031 = !DILocation(line: 972, column: 13, scope: !6015)
!6032 = !DILocation(line: 972, column: 11, scope: !6015)
!6033 = !DILocation(line: 972, column: 6, scope: !6015)
!6034 = !DILocation(line: 973, column: 2, scope: !5977)
!6035 = !DILocation(line: 975, column: 33, scope: !5934)
!6036 = !DILocation(line: 975, column: 18, scope: !5934)
!6037 = !DILocation(line: 975, column: 16, scope: !5934)
!6038 = !DILocation(line: 976, column: 38, scope: !5934)
!6039 = !DILocation(line: 976, column: 7, scope: !5934)
!6040 = !DILocation(line: 976, column: 17, scope: !5934)
!6041 = !DILocation(line: 976, column: 36, scope: !5934)
!6042 = !DILocation(line: 978, column: 11, scope: !6043)
!6043 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 978, column: 11)
!6044 = !DILocation(line: 978, column: 23, scope: !6043)
!6045 = !DILocation(line: 978, column: 26, scope: !6043)
!6046 = !DILocation(line: 978, column: 30, scope: !6043)
!6047 = !DILocation(line: 978, column: 11, scope: !5934)
!6048 = !DILocation(line: 979, column: 2, scope: !6043)
!6049 = !DILocation(line: 981, column: 36, scope: !6050)
!6050 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 981, column: 11)
!6051 = !DILocation(line: 981, column: 42, scope: !6050)
!6052 = !DILocation(line: 981, column: 46, scope: !6050)
!6053 = !DILocation(line: 981, column: 12, scope: !6050)
!6054 = !DILocation(line: 981, column: 11, scope: !5934)
!6055 = !DILocation(line: 983, column: 4, scope: !6056)
!6056 = distinct !DILexicalBlock(scope: !6050, file: !3, line: 982, column: 2)
!6057 = !DILocation(line: 983, column: 14, scope: !6056)
!6058 = !DILocation(line: 983, column: 23, scope: !6056)
!6059 = !DILocation(line: 984, column: 4, scope: !6056)
!6060 = !DILocation(line: 987, column: 11, scope: !6061)
!6061 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 987, column: 11)
!6062 = !DILocation(line: 987, column: 21, scope: !6061)
!6063 = !DILocation(line: 987, column: 25, scope: !6061)
!6064 = !DILocation(line: 987, column: 36, scope: !6061)
!6065 = !DILocation(line: 987, column: 11, scope: !5934)
!6066 = !DILocation(line: 989, column: 23, scope: !6067)
!6067 = distinct !DILexicalBlock(scope: !6061, file: !3, line: 988, column: 2)
!6068 = !DILocation(line: 989, column: 34, scope: !6067)
!6069 = !DILocation(line: 989, column: 4, scope: !6067)
!6070 = !DILocation(line: 990, column: 13, scope: !6067)
!6071 = !DILocation(line: 991, column: 18, scope: !6067)
!6072 = !DILocation(line: 991, column: 28, scope: !6067)
!6073 = !DILocation(line: 991, column: 6, scope: !6067)
!6074 = !DILocation(line: 992, column: 6, scope: !6067)
!6075 = !DILocation(line: 992, column: 16, scope: !6067)
!6076 = !DILocation(line: 990, column: 4, scope: !6067)
!6077 = !DILocation(line: 993, column: 2, scope: !6067)
!6078 = !DILocation(line: 995, column: 11, scope: !6079)
!6079 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 995, column: 11)
!6080 = !DILocation(line: 995, column: 21, scope: !6079)
!6081 = !DILocation(line: 995, column: 29, scope: !6079)
!6082 = !DILocation(line: 995, column: 26, scope: !6079)
!6083 = !DILocation(line: 995, column: 11, scope: !5934)
!6084 = !DILocation(line: 996, column: 24, scope: !6079)
!6085 = !DILocation(line: 996, column: 2, scope: !6079)
!6086 = !DILocation(line: 997, column: 5, scope: !5934)
!6087 = !DILocation(line: 923, column: 51, scope: !5930)
!6088 = !DILocation(line: 923, column: 3, scope: !5930)
!6089 = distinct !{!6089, !5932, !6090}
!6090 = !DILocation(line: 997, column: 5, scope: !5926)
!6091 = !DILocation(line: 998, column: 1, scope: !5883)
!6092 = distinct !DISubprogram(name: "loop_depth", scope: !330, file: !330, line: 425, type: !6093, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6093 = !DISubroutineType(types: !6094)
!6094 = !{!7, !4714}
!6095 = !DILocalVariable(name: "loop", arg: 1, scope: !6092, file: !330, line: 425, type: !4714)
!6096 = !DILocation(line: 425, column: 32, scope: !6092)
!6097 = !DILocation(line: 427, column: 10, scope: !6092)
!6098 = !DILocation(line: 427, column: 3, scope: !6092)
!6099 = distinct !DISubprogram(name: "init_lim_data", scope: !3, file: !3, line: 207, type: !6100, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6100 = !DISubroutineType(types: !6101)
!6101 = !{!2874, !1701}
!6102 = !DILocalVariable(name: "stmt", arg: 1, scope: !6099, file: !3, line: 207, type: !1701)
!6103 = !DILocation(line: 207, column: 23, scope: !6099)
!6104 = !DILocalVariable(name: "p", scope: !6099, file: !3, line: 209, type: !2239)
!6105 = !DILocation(line: 209, column: 10, scope: !6099)
!6106 = !DILocation(line: 209, column: 34, scope: !6099)
!6107 = !DILocation(line: 209, column: 52, scope: !6099)
!6108 = !DILocation(line: 209, column: 14, scope: !6099)
!6109 = !DILocation(line: 211, column: 8, scope: !6099)
!6110 = !DILocation(line: 211, column: 4, scope: !6099)
!6111 = !DILocation(line: 211, column: 6, scope: !6099)
!6112 = !DILocation(line: 212, column: 35, scope: !6099)
!6113 = !DILocation(line: 212, column: 34, scope: !6099)
!6114 = !DILocation(line: 212, column: 10, scope: !6099)
!6115 = !DILocation(line: 212, column: 3, scope: !6099)
!6116 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !397, file: !397, line: 1759, type: !3117, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6117 = !DILocalVariable(name: "gs", arg: 1, scope: !6116, file: !397, line: 1759, type: !3109)
!6118 = !DILocation(line: 1759, column: 34, scope: !6116)
!6119 = !DILocation(line: 1763, column: 23, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6116, file: !397, line: 1763, column: 7)
!6121 = !DILocation(line: 1763, column: 7, scope: !6120)
!6122 = !DILocation(line: 1763, column: 27, scope: !6120)
!6123 = !DILocation(line: 1763, column: 7, scope: !6116)
!6124 = !DILocation(line: 1764, column: 23, scope: !6120)
!6125 = !DILocation(line: 1764, column: 12, scope: !6120)
!6126 = !DILocation(line: 1764, column: 5, scope: !6120)
!6127 = !DILocation(line: 1766, column: 5, scope: !6120)
!6128 = !DILocation(line: 1767, column: 1, scope: !6116)
!6129 = distinct !DISubprogram(name: "outermost_invariant_loop", scope: !3, file: !3, line: 419, type: !6130, scopeLine: 420, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6130 = !DISubroutineType(types: !6131)
!6131 = !{!1916, !1370, !1916}
!6132 = !DILocalVariable(name: "def", arg: 1, scope: !6129, file: !3, line: 419, type: !1370)
!6133 = !DILocation(line: 419, column: 32, scope: !6129)
!6134 = !DILocalVariable(name: "loop", arg: 2, scope: !6129, file: !3, line: 419, type: !1916)
!6135 = !DILocation(line: 419, column: 50, scope: !6129)
!6136 = !DILocalVariable(name: "def_stmt", scope: !6129, file: !3, line: 421, type: !1701)
!6137 = !DILocation(line: 421, column: 10, scope: !6129)
!6138 = !DILocalVariable(name: "def_bb", scope: !6129, file: !3, line: 422, type: !2186)
!6139 = !DILocation(line: 422, column: 15, scope: !6129)
!6140 = !DILocalVariable(name: "max_loop", scope: !6129, file: !3, line: 423, type: !1916)
!6141 = !DILocation(line: 423, column: 16, scope: !6129)
!6142 = !DILocalVariable(name: "lim_data", scope: !6129, file: !3, line: 424, type: !2874)
!6143 = !DILocation(line: 424, column: 24, scope: !6129)
!6144 = !DILocation(line: 426, column: 8, scope: !6145)
!6145 = distinct !DILexicalBlock(scope: !6129, file: !3, line: 426, column: 7)
!6146 = !DILocation(line: 426, column: 7, scope: !6129)
!6147 = !DILocation(line: 427, column: 32, scope: !6145)
!6148 = !DILocation(line: 427, column: 12, scope: !6145)
!6149 = !DILocation(line: 427, column: 5, scope: !6145)
!6150 = !DILocation(line: 429, column: 7, scope: !6151)
!6151 = distinct !DILexicalBlock(scope: !6129, file: !3, line: 429, column: 7)
!6152 = !DILocation(line: 429, column: 23, scope: !6151)
!6153 = !DILocation(line: 429, column: 7, scope: !6129)
!6154 = !DILocation(line: 431, column: 7, scope: !6155)
!6155 = distinct !DILexicalBlock(scope: !6151, file: !3, line: 430, column: 5)
!6156 = !DILocation(line: 432, column: 34, scope: !6155)
!6157 = !DILocation(line: 432, column: 14, scope: !6155)
!6158 = !DILocation(line: 432, column: 7, scope: !6155)
!6159 = !DILocation(line: 435, column: 14, scope: !6129)
!6160 = !DILocation(line: 435, column: 12, scope: !6129)
!6161 = !DILocation(line: 436, column: 23, scope: !6129)
!6162 = !DILocation(line: 436, column: 12, scope: !6129)
!6163 = !DILocation(line: 436, column: 10, scope: !6129)
!6164 = !DILocation(line: 437, column: 8, scope: !6165)
!6165 = distinct !DILexicalBlock(scope: !6129, file: !3, line: 437, column: 7)
!6166 = !DILocation(line: 437, column: 7, scope: !6129)
!6167 = !DILocation(line: 438, column: 32, scope: !6165)
!6168 = !DILocation(line: 438, column: 12, scope: !6165)
!6169 = !DILocation(line: 438, column: 5, scope: !6165)
!6170 = !DILocation(line: 440, column: 32, scope: !6129)
!6171 = !DILocation(line: 440, column: 38, scope: !6129)
!6172 = !DILocation(line: 440, column: 46, scope: !6129)
!6173 = !DILocation(line: 440, column: 14, scope: !6129)
!6174 = !DILocation(line: 440, column: 12, scope: !6129)
!6175 = !DILocation(line: 442, column: 28, scope: !6129)
!6176 = !DILocation(line: 442, column: 14, scope: !6129)
!6177 = !DILocation(line: 442, column: 12, scope: !6129)
!6178 = !DILocation(line: 443, column: 7, scope: !6179)
!6179 = distinct !DILexicalBlock(scope: !6129, file: !3, line: 443, column: 7)
!6180 = !DILocation(line: 443, column: 16, scope: !6179)
!6181 = !DILocation(line: 443, column: 24, scope: !6179)
!6182 = !DILocation(line: 443, column: 27, scope: !6179)
!6183 = !DILocation(line: 443, column: 37, scope: !6179)
!6184 = !DILocation(line: 443, column: 46, scope: !6179)
!6185 = !DILocation(line: 443, column: 7, scope: !6129)
!6186 = !DILocation(line: 444, column: 34, scope: !6179)
!6187 = !DILocation(line: 445, column: 18, scope: !6179)
!6188 = !DILocation(line: 445, column: 28, scope: !6179)
!6189 = !DILocation(line: 445, column: 6, scope: !6179)
!6190 = !DILocation(line: 444, column: 16, scope: !6179)
!6191 = !DILocation(line: 444, column: 14, scope: !6179)
!6192 = !DILocation(line: 444, column: 5, scope: !6179)
!6193 = !DILocation(line: 446, column: 7, scope: !6194)
!6194 = distinct !DILexicalBlock(scope: !6129, file: !3, line: 446, column: 7)
!6195 = !DILocation(line: 446, column: 19, scope: !6194)
!6196 = !DILocation(line: 446, column: 16, scope: !6194)
!6197 = !DILocation(line: 446, column: 7, scope: !6129)
!6198 = !DILocation(line: 447, column: 5, scope: !6194)
!6199 = !DILocation(line: 448, column: 34, scope: !6129)
!6200 = !DILocation(line: 448, column: 52, scope: !6129)
!6201 = !DILocation(line: 448, column: 40, scope: !6129)
!6202 = !DILocation(line: 448, column: 62, scope: !6129)
!6203 = !DILocation(line: 448, column: 14, scope: !6129)
!6204 = !DILocation(line: 448, column: 12, scope: !6129)
!6205 = !DILocation(line: 450, column: 10, scope: !6129)
!6206 = !DILocation(line: 450, column: 3, scope: !6129)
!6207 = !DILocation(line: 451, column: 1, scope: !6129)
!6208 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !6209, file: !6209, line: 617, type: !6210, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6209 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!6210 = !DISubroutineType(types: !6211)
!6211 = !{!1916, !1701}
!6212 = !DILocalVariable(name: "stmt", arg: 1, scope: !6208, file: !6209, line: 617, type: !1701)
!6213 = !DILocation(line: 617, column: 30, scope: !6208)
!6214 = !DILocalVariable(name: "bb", scope: !6208, file: !6209, line: 619, type: !2186)
!6215 = !DILocation(line: 619, column: 15, scope: !6208)
!6216 = !DILocation(line: 619, column: 31, scope: !6208)
!6217 = !DILocation(line: 619, column: 20, scope: !6208)
!6218 = !DILocation(line: 620, column: 8, scope: !6219)
!6219 = distinct !DILexicalBlock(scope: !6208, file: !6209, line: 620, column: 7)
!6220 = !DILocation(line: 620, column: 7, scope: !6208)
!6221 = !DILocation(line: 621, column: 5, scope: !6219)
!6222 = !DILocation(line: 623, column: 10, scope: !6208)
!6223 = !DILocation(line: 623, column: 14, scope: !6208)
!6224 = !DILocation(line: 623, column: 3, scope: !6208)
!6225 = !DILocation(line: 624, column: 1, scope: !6208)
!6226 = distinct !DISubprogram(name: "rewrite_reciprocal", scope: !3, file: !3, line: 762, type: !6227, scopeLine: 763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6227 = !DISubroutineType(types: !6228)
!6228 = !{!1701, !3741}
!6229 = !DILocalVariable(name: "bsi", arg: 1, scope: !6226, file: !3, line: 762, type: !3741)
!6230 = !DILocation(line: 762, column: 43, scope: !6226)
!6231 = !DILocalVariable(name: "stmt", scope: !6226, file: !3, line: 764, type: !1701)
!6232 = !DILocation(line: 764, column: 10, scope: !6226)
!6233 = !DILocalVariable(name: "stmt1", scope: !6226, file: !3, line: 764, type: !1701)
!6234 = !DILocation(line: 764, column: 16, scope: !6226)
!6235 = !DILocalVariable(name: "stmt2", scope: !6226, file: !3, line: 764, type: !1701)
!6236 = !DILocation(line: 764, column: 23, scope: !6226)
!6237 = !DILocalVariable(name: "var", scope: !6226, file: !3, line: 765, type: !1370)
!6238 = !DILocation(line: 765, column: 8, scope: !6226)
!6239 = !DILocalVariable(name: "name", scope: !6226, file: !3, line: 765, type: !1370)
!6240 = !DILocation(line: 765, column: 13, scope: !6226)
!6241 = !DILocalVariable(name: "lhs", scope: !6226, file: !3, line: 765, type: !1370)
!6242 = !DILocation(line: 765, column: 19, scope: !6226)
!6243 = !DILocalVariable(name: "type", scope: !6226, file: !3, line: 765, type: !1370)
!6244 = !DILocation(line: 765, column: 24, scope: !6226)
!6245 = !DILocalVariable(name: "real_one", scope: !6226, file: !3, line: 766, type: !1370)
!6246 = !DILocation(line: 766, column: 8, scope: !6226)
!6247 = !DILocalVariable(name: "gsi", scope: !6226, file: !3, line: 767, type: !3317)
!6248 = !DILocation(line: 767, column: 24, scope: !6226)
!6249 = !DILocation(line: 769, column: 21, scope: !6226)
!6250 = !DILocation(line: 769, column: 10, scope: !6226)
!6251 = !DILocation(line: 769, column: 8, scope: !6226)
!6252 = !DILocation(line: 770, column: 28, scope: !6226)
!6253 = !DILocation(line: 770, column: 9, scope: !6226)
!6254 = !DILocation(line: 770, column: 7, scope: !6226)
!6255 = !DILocation(line: 771, column: 10, scope: !6226)
!6256 = !DILocation(line: 771, column: 8, scope: !6226)
!6257 = !DILocation(line: 773, column: 25, scope: !6226)
!6258 = !DILocation(line: 773, column: 9, scope: !6226)
!6259 = !DILocation(line: 773, column: 7, scope: !6226)
!6260 = !DILocation(line: 774, column: 23, scope: !6226)
!6261 = !DILocation(line: 774, column: 3, scope: !6226)
!6262 = !DILocation(line: 775, column: 3, scope: !6226)
!6263 = !DILocation(line: 775, column: 27, scope: !6226)
!6264 = !DILocation(line: 778, column: 7, scope: !6265)
!6265 = distinct !DILexicalBlock(scope: !6226, file: !3, line: 778, column: 7)
!6266 = !DILocation(line: 778, column: 24, scope: !6265)
!6267 = !DILocation(line: 778, column: 7, scope: !6226)
!6268 = !DILocalVariable(name: "i", scope: !6269, file: !3, line: 780, type: !1467)
!6269 = distinct !DILexicalBlock(scope: !6265, file: !3, line: 779, column: 5)
!6270 = !DILocation(line: 780, column: 11, scope: !6269)
!6271 = !DILocalVariable(name: "len", scope: !6269, file: !3, line: 780, type: !1467)
!6272 = !DILocation(line: 780, column: 14, scope: !6269)
!6273 = !DILocalVariable(name: "list", scope: !6269, file: !3, line: 781, type: !1370)
!6274 = !DILocation(line: 781, column: 12, scope: !6269)
!6275 = !DILocation(line: 782, column: 30, scope: !6269)
!6276 = !DILocation(line: 782, column: 18, scope: !6269)
!6277 = !DILocation(line: 782, column: 16, scope: !6269)
!6278 = !DILocation(line: 783, column: 13, scope: !6269)
!6279 = !DILocation(line: 783, column: 11, scope: !6269)
!6280 = !DILocation(line: 784, column: 14, scope: !6281)
!6281 = distinct !DILexicalBlock(scope: !6269, file: !3, line: 784, column: 7)
!6282 = !DILocation(line: 784, column: 12, scope: !6281)
!6283 = !DILocation(line: 784, column: 19, scope: !6284)
!6284 = distinct !DILexicalBlock(scope: !6281, file: !3, line: 784, column: 7)
!6285 = !DILocation(line: 784, column: 23, scope: !6284)
!6286 = !DILocation(line: 784, column: 21, scope: !6284)
!6287 = !DILocation(line: 784, column: 7, scope: !6281)
!6288 = !DILocation(line: 785, column: 9, scope: !6284)
!6289 = !DILocation(line: 785, column: 7, scope: !6284)
!6290 = !DILocation(line: 785, column: 2, scope: !6284)
!6291 = !DILocation(line: 784, column: 29, scope: !6284)
!6292 = !DILocation(line: 784, column: 7, scope: !6284)
!6293 = distinct !{!6293, !6287, !6294}
!6294 = !DILocation(line: 785, column: 9, scope: !6281)
!6295 = !DILocation(line: 786, column: 32, scope: !6269)
!6296 = !DILocation(line: 786, column: 38, scope: !6269)
!6297 = !DILocation(line: 786, column: 18, scope: !6269)
!6298 = !DILocation(line: 786, column: 16, scope: !6269)
!6299 = !DILocation(line: 787, column: 5, scope: !6269)
!6300 = !DILocation(line: 789, column: 28, scope: !6265)
!6301 = !DILocation(line: 789, column: 16, scope: !6265)
!6302 = !DILocation(line: 789, column: 14, scope: !6265)
!6303 = !DILocation(line: 791, column: 11, scope: !6226)
!6304 = !DILocation(line: 791, column: 9, scope: !6226)
!6305 = !DILocation(line: 793, column: 25, scope: !6226)
!6306 = !DILocation(line: 793, column: 30, scope: !6226)
!6307 = !DILocation(line: 793, column: 10, scope: !6226)
!6308 = !DILocation(line: 793, column: 8, scope: !6226)
!6309 = !DILocation(line: 794, column: 26, scope: !6226)
!6310 = !DILocation(line: 794, column: 33, scope: !6226)
!6311 = !DILocation(line: 794, column: 3, scope: !6226)
!6312 = !DILocation(line: 796, column: 11, scope: !6226)
!6313 = !DILocation(line: 796, column: 9, scope: !6226)
!6314 = !DILocation(line: 802, column: 10, scope: !6226)
!6315 = !DILocation(line: 802, column: 9, scope: !6226)
!6316 = !DILocation(line: 803, column: 22, scope: !6226)
!6317 = !DILocation(line: 803, column: 27, scope: !6226)
!6318 = !DILocation(line: 803, column: 3, scope: !6226)
!6319 = !DILocation(line: 804, column: 22, scope: !6226)
!6320 = !DILocation(line: 804, column: 3, scope: !6226)
!6321 = !DILocation(line: 807, column: 10, scope: !6226)
!6322 = !DILocation(line: 807, column: 3, scope: !6226)
!6323 = distinct !DISubprogram(name: "has_single_use", scope: !6209, file: !6209, line: 350, type: !6324, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6324 = !DISubroutineType(types: !6325)
!6325 = !{!1490, !2810}
!6326 = !DILocalVariable(name: "var", arg: 1, scope: !6323, file: !6209, line: 350, type: !2810)
!6327 = !DILocation(line: 350, column: 28, scope: !6323)
!6328 = !DILocalVariable(name: "ptr", scope: !6323, file: !6209, line: 352, type: !6329)
!6329 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6330)
!6330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6331, size: 64)
!6331 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2889)
!6332 = !DILocation(line: 352, column: 34, scope: !6323)
!6333 = !DILocation(line: 352, column: 42, scope: !6323)
!6334 = !DILocation(line: 355, column: 7, scope: !6335)
!6335 = distinct !DILexicalBlock(scope: !6323, file: !6209, line: 355, column: 7)
!6336 = !DILocation(line: 355, column: 14, scope: !6335)
!6337 = !DILocation(line: 355, column: 19, scope: !6335)
!6338 = !DILocation(line: 355, column: 11, scope: !6335)
!6339 = !DILocation(line: 355, column: 7, scope: !6323)
!6340 = !DILocation(line: 356, column: 5, scope: !6335)
!6341 = !DILocation(line: 359, column: 7, scope: !6342)
!6342 = distinct !DILexicalBlock(scope: !6323, file: !6209, line: 359, column: 7)
!6343 = !DILocation(line: 359, column: 14, scope: !6342)
!6344 = !DILocation(line: 359, column: 19, scope: !6342)
!6345 = !DILocation(line: 359, column: 25, scope: !6342)
!6346 = !DILocation(line: 359, column: 11, scope: !6342)
!6347 = !DILocation(line: 359, column: 7, scope: !6323)
!6348 = !DILocation(line: 360, column: 30, scope: !6342)
!6349 = !DILocation(line: 360, column: 13, scope: !6342)
!6350 = !DILocation(line: 360, column: 12, scope: !6342)
!6351 = !DILocation(line: 360, column: 5, scope: !6342)
!6352 = !DILocation(line: 363, column: 8, scope: !6353)
!6353 = distinct !DILexicalBlock(scope: !6323, file: !6209, line: 363, column: 7)
!6354 = !DILocation(line: 363, column: 7, scope: !6323)
!6355 = !DILocation(line: 364, column: 5, scope: !6353)
!6356 = !DILocation(line: 366, column: 28, scope: !6323)
!6357 = !DILocation(line: 366, column: 10, scope: !6323)
!6358 = !DILocation(line: 366, column: 3, scope: !6323)
!6359 = !DILocation(line: 367, column: 1, scope: !6323)
!6360 = distinct !DISubprogram(name: "rewrite_bittest", scope: !3, file: !3, line: 814, type: !6227, scopeLine: 815, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6361 = !DILocalVariable(name: "bsi", arg: 1, scope: !6360, file: !3, line: 814, type: !3741)
!6362 = !DILocation(line: 814, column: 40, scope: !6360)
!6363 = !DILocalVariable(name: "stmt", scope: !6360, file: !3, line: 816, type: !1701)
!6364 = !DILocation(line: 816, column: 10, scope: !6360)
!6365 = !DILocalVariable(name: "use_stmt", scope: !6360, file: !3, line: 816, type: !1701)
!6366 = !DILocation(line: 816, column: 16, scope: !6360)
!6367 = !DILocalVariable(name: "stmt1", scope: !6360, file: !3, line: 816, type: !1701)
!6368 = !DILocation(line: 816, column: 26, scope: !6360)
!6369 = !DILocalVariable(name: "stmt2", scope: !6360, file: !3, line: 816, type: !1701)
!6370 = !DILocation(line: 816, column: 33, scope: !6360)
!6371 = !DILocalVariable(name: "lhs", scope: !6360, file: !3, line: 817, type: !1370)
!6372 = !DILocation(line: 817, column: 8, scope: !6360)
!6373 = !DILocalVariable(name: "var", scope: !6360, file: !3, line: 817, type: !1370)
!6374 = !DILocation(line: 817, column: 13, scope: !6360)
!6375 = !DILocalVariable(name: "name", scope: !6360, file: !3, line: 817, type: !1370)
!6376 = !DILocation(line: 817, column: 18, scope: !6360)
!6377 = !DILocalVariable(name: "t", scope: !6360, file: !3, line: 817, type: !1370)
!6378 = !DILocation(line: 817, column: 24, scope: !6360)
!6379 = !DILocalVariable(name: "a", scope: !6360, file: !3, line: 817, type: !1370)
!6380 = !DILocation(line: 817, column: 27, scope: !6360)
!6381 = !DILocalVariable(name: "b", scope: !6360, file: !3, line: 817, type: !1370)
!6382 = !DILocation(line: 817, column: 30, scope: !6360)
!6383 = !DILocalVariable(name: "use", scope: !6360, file: !3, line: 818, type: !2887)
!6384 = !DILocation(line: 818, column: 17, scope: !6360)
!6385 = !DILocation(line: 820, column: 21, scope: !6360)
!6386 = !DILocation(line: 820, column: 10, scope: !6360)
!6387 = !DILocation(line: 820, column: 8, scope: !6360)
!6388 = !DILocation(line: 821, column: 28, scope: !6360)
!6389 = !DILocation(line: 821, column: 9, scope: !6360)
!6390 = !DILocation(line: 821, column: 7, scope: !6360)
!6391 = !DILocation(line: 824, column: 7, scope: !6392)
!6392 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 824, column: 7)
!6393 = !DILocation(line: 824, column: 23, scope: !6392)
!6394 = !DILocation(line: 825, column: 7, scope: !6392)
!6395 = !DILocation(line: 825, column: 27, scope: !6392)
!6396 = !DILocation(line: 825, column: 11, scope: !6392)
!6397 = !DILocation(line: 826, column: 7, scope: !6392)
!6398 = !DILocation(line: 826, column: 23, scope: !6392)
!6399 = !DILocation(line: 826, column: 10, scope: !6392)
!6400 = !DILocation(line: 826, column: 33, scope: !6392)
!6401 = !DILocation(line: 824, column: 7, scope: !6360)
!6402 = !DILocation(line: 827, column: 12, scope: !6392)
!6403 = !DILocation(line: 827, column: 5, scope: !6392)
!6404 = !DILocation(line: 828, column: 24, scope: !6405)
!6405 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 828, column: 7)
!6406 = !DILocation(line: 828, column: 7, scope: !6405)
!6407 = !DILocation(line: 828, column: 37, scope: !6405)
!6408 = !DILocation(line: 828, column: 34, scope: !6405)
!6409 = !DILocation(line: 829, column: 7, scope: !6405)
!6410 = !DILocation(line: 829, column: 29, scope: !6405)
!6411 = !DILocation(line: 829, column: 11, scope: !6405)
!6412 = !DILocation(line: 829, column: 39, scope: !6405)
!6413 = !DILocation(line: 830, column: 4, scope: !6405)
!6414 = !DILocation(line: 830, column: 25, scope: !6405)
!6415 = !DILocation(line: 830, column: 7, scope: !6405)
!6416 = !DILocation(line: 830, column: 35, scope: !6405)
!6417 = !DILocation(line: 831, column: 7, scope: !6405)
!6418 = !DILocation(line: 831, column: 43, scope: !6405)
!6419 = !DILocation(line: 831, column: 26, scope: !6405)
!6420 = !DILocation(line: 831, column: 11, scope: !6405)
!6421 = !DILocation(line: 828, column: 7, scope: !6360)
!6422 = !DILocation(line: 832, column: 12, scope: !6405)
!6423 = !DILocation(line: 832, column: 5, scope: !6405)
!6424 = !DILocation(line: 835, column: 11, scope: !6360)
!6425 = !DILocation(line: 835, column: 9, scope: !6360)
!6426 = !DILocation(line: 836, column: 20, scope: !6427)
!6427 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 836, column: 7)
!6428 = !DILocation(line: 836, column: 7, scope: !6427)
!6429 = !DILocation(line: 836, column: 27, scope: !6427)
!6430 = !DILocation(line: 836, column: 7, scope: !6360)
!6431 = !DILocation(line: 837, column: 12, scope: !6427)
!6432 = !DILocation(line: 837, column: 5, scope: !6427)
!6433 = !DILocation(line: 840, column: 7, scope: !6434)
!6434 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 840, column: 7)
!6435 = !DILocation(line: 840, column: 7, scope: !6360)
!6436 = !DILocation(line: 842, column: 31, scope: !6437)
!6437 = distinct !DILexicalBlock(scope: !6434, file: !3, line: 841, column: 5)
!6438 = !DILocation(line: 842, column: 11, scope: !6437)
!6439 = !DILocation(line: 842, column: 9, scope: !6437)
!6440 = !DILocation(line: 843, column: 11, scope: !6441)
!6441 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 843, column: 11)
!6442 = !DILocation(line: 843, column: 25, scope: !6441)
!6443 = !DILocation(line: 844, column: 4, scope: !6441)
!6444 = !DILocation(line: 844, column: 24, scope: !6441)
!6445 = !DILocation(line: 844, column: 8, scope: !6441)
!6446 = !DILocation(line: 843, column: 11, scope: !6437)
!6447 = !DILocation(line: 845, column: 9, scope: !6441)
!6448 = !DILocation(line: 845, column: 2, scope: !6441)
!6449 = !DILocation(line: 846, column: 15, scope: !6437)
!6450 = !DILocation(line: 846, column: 13, scope: !6437)
!6451 = !DILocation(line: 847, column: 24, scope: !6452)
!6452 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 847, column: 11)
!6453 = !DILocation(line: 847, column: 11, scope: !6452)
!6454 = !DILocation(line: 847, column: 31, scope: !6452)
!6455 = !DILocation(line: 847, column: 11, scope: !6437)
!6456 = !DILocation(line: 848, column: 9, scope: !6452)
!6457 = !DILocation(line: 848, column: 2, scope: !6452)
!6458 = !DILocation(line: 849, column: 5, scope: !6437)
!6459 = !DILocation(line: 853, column: 31, scope: !6460)
!6460 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 853, column: 7)
!6461 = !DILocation(line: 853, column: 7, scope: !6460)
!6462 = !DILocation(line: 853, column: 38, scope: !6460)
!6463 = !DILocation(line: 854, column: 7, scope: !6460)
!6464 = !DILocation(line: 854, column: 32, scope: !6460)
!6465 = !DILocation(line: 854, column: 10, scope: !6460)
!6466 = !DILocation(line: 854, column: 64, scope: !6460)
!6467 = !DILocation(line: 854, column: 42, scope: !6460)
!6468 = !DILocation(line: 854, column: 39, scope: !6460)
!6469 = !DILocation(line: 853, column: 7, scope: !6360)
!6470 = !DILocation(line: 855, column: 12, scope: !6460)
!6471 = !DILocation(line: 855, column: 5, scope: !6460)
!6472 = !DILocation(line: 857, column: 27, scope: !6360)
!6473 = !DILocation(line: 857, column: 7, scope: !6360)
!6474 = !DILocation(line: 857, column: 5, scope: !6360)
!6475 = !DILocation(line: 858, column: 27, scope: !6360)
!6476 = !DILocation(line: 858, column: 7, scope: !6360)
!6477 = !DILocation(line: 858, column: 5, scope: !6360)
!6478 = !DILocation(line: 860, column: 33, scope: !6479)
!6479 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 860, column: 7)
!6480 = !DILocation(line: 860, column: 58, scope: !6479)
!6481 = !DILocation(line: 860, column: 36, scope: !6479)
!6482 = !DILocation(line: 860, column: 7, scope: !6479)
!6483 = !DILocation(line: 860, column: 66, scope: !6479)
!6484 = !DILocation(line: 861, column: 7, scope: !6479)
!6485 = !DILocation(line: 861, column: 36, scope: !6479)
!6486 = !DILocation(line: 861, column: 61, scope: !6479)
!6487 = !DILocation(line: 861, column: 39, scope: !6479)
!6488 = !DILocation(line: 861, column: 10, scope: !6479)
!6489 = !DILocation(line: 861, column: 69, scope: !6479)
!6490 = !DILocation(line: 860, column: 7, scope: !6360)
!6491 = !DILocalVariable(name: "rsi", scope: !6492, file: !3, line: 863, type: !3317)
!6492 = distinct !DILexicalBlock(scope: !6479, file: !3, line: 862, column: 5)
!6493 = !DILocation(line: 863, column: 28, scope: !6492)
!6494 = !DILocation(line: 866, column: 29, scope: !6492)
!6495 = !DILocation(line: 866, column: 13, scope: !6492)
!6496 = !DILocation(line: 866, column: 11, scope: !6492)
!6497 = !DILocation(line: 867, column: 27, scope: !6492)
!6498 = !DILocation(line: 867, column: 7, scope: !6492)
!6499 = !DILocation(line: 868, column: 11, scope: !6492)
!6500 = !DILocation(line: 868, column: 9, scope: !6492)
!6501 = !DILocation(line: 870, column: 15, scope: !6492)
!6502 = !DILocation(line: 870, column: 13, scope: !6492)
!6503 = !DILocation(line: 871, column: 29, scope: !6492)
!6504 = !DILocation(line: 871, column: 34, scope: !6492)
!6505 = !DILocation(line: 871, column: 14, scope: !6492)
!6506 = !DILocation(line: 871, column: 12, scope: !6492)
!6507 = !DILocation(line: 872, column: 30, scope: !6492)
!6508 = !DILocation(line: 872, column: 37, scope: !6492)
!6509 = !DILocation(line: 872, column: 7, scope: !6492)
!6510 = !DILocation(line: 875, column: 11, scope: !6492)
!6511 = !DILocation(line: 875, column: 9, scope: !6492)
!6512 = !DILocation(line: 876, column: 15, scope: !6492)
!6513 = !DILocation(line: 876, column: 13, scope: !6492)
!6514 = !DILocation(line: 877, column: 29, scope: !6492)
!6515 = !DILocation(line: 877, column: 34, scope: !6492)
!6516 = !DILocation(line: 877, column: 14, scope: !6492)
!6517 = !DILocation(line: 877, column: 12, scope: !6492)
!6518 = !DILocation(line: 878, column: 30, scope: !6492)
!6519 = !DILocation(line: 878, column: 37, scope: !6492)
!6520 = !DILocation(line: 878, column: 7, scope: !6492)
!6521 = !DILocation(line: 882, column: 7, scope: !6492)
!6522 = !DILocation(line: 883, column: 28, scope: !6492)
!6523 = !DILocation(line: 883, column: 58, scope: !6492)
!6524 = !DILocation(line: 883, column: 38, scope: !6492)
!6525 = !DILocation(line: 883, column: 7, scope: !6492)
!6526 = !DILocation(line: 889, column: 14, scope: !6492)
!6527 = !DILocation(line: 889, column: 13, scope: !6492)
!6528 = !DILocation(line: 890, column: 26, scope: !6492)
!6529 = !DILocation(line: 890, column: 31, scope: !6492)
!6530 = !DILocation(line: 890, column: 7, scope: !6492)
!6531 = !DILocation(line: 891, column: 32, scope: !6492)
!6532 = !DILocation(line: 891, column: 7, scope: !6492)
!6533 = !DILocation(line: 892, column: 7, scope: !6492)
!6534 = !DILocation(line: 894, column: 14, scope: !6492)
!6535 = !DILocation(line: 894, column: 7, scope: !6492)
!6536 = !DILocation(line: 897, column: 10, scope: !6360)
!6537 = !DILocation(line: 897, column: 3, scope: !6360)
!6538 = !DILocation(line: 898, column: 1, scope: !6360)
!6539 = distinct !DISubprogram(name: "determine_max_movement", scope: !3, file: !3, line: 665, type: !6540, scopeLine: 666, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6540 = !DISubroutineType(types: !6541)
!6541 = !{!1490, !1701, !1490}
!6542 = !DILocalVariable(name: "stmt", arg: 1, scope: !6539, file: !3, line: 665, type: !1701)
!6543 = !DILocation(line: 665, column: 32, scope: !6539)
!6544 = !DILocalVariable(name: "must_preserve_exec", arg: 2, scope: !6539, file: !3, line: 665, type: !1490)
!6545 = !DILocation(line: 665, column: 43, scope: !6539)
!6546 = !DILocalVariable(name: "bb", scope: !6539, file: !3, line: 667, type: !2186)
!6547 = !DILocation(line: 667, column: 15, scope: !6539)
!6548 = !DILocation(line: 667, column: 31, scope: !6539)
!6549 = !DILocation(line: 667, column: 20, scope: !6539)
!6550 = !DILocalVariable(name: "loop", scope: !6539, file: !3, line: 668, type: !1916)
!6551 = !DILocation(line: 668, column: 16, scope: !6539)
!6552 = !DILocation(line: 668, column: 23, scope: !6539)
!6553 = !DILocation(line: 668, column: 27, scope: !6539)
!6554 = !DILocalVariable(name: "level", scope: !6539, file: !3, line: 669, type: !1916)
!6555 = !DILocation(line: 669, column: 16, scope: !6539)
!6556 = !DILocalVariable(name: "lim_data", scope: !6539, file: !3, line: 670, type: !2874)
!6557 = !DILocation(line: 670, column: 24, scope: !6539)
!6558 = !DILocation(line: 670, column: 49, scope: !6539)
!6559 = !DILocation(line: 670, column: 35, scope: !6539)
!6560 = !DILocalVariable(name: "val", scope: !6539, file: !3, line: 671, type: !1370)
!6561 = !DILocation(line: 671, column: 8, scope: !6539)
!6562 = !DILocalVariable(name: "iter", scope: !6539, file: !3, line: 672, type: !6563)
!6563 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !624, line: 140, baseType: !6564)
!6564 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !624, line: 131, size: 320, elements: !6565)
!6565 = !{!6566, !6567, !6568, !6570, !6572, !6573, !6574}
!6566 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !6564, file: !624, line: 133, baseType: !1490, size: 8)
!6567 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !6564, file: !624, line: 134, baseType: !623, size: 32, offset: 32)
!6568 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !6564, file: !624, line: 135, baseType: !6569, size: 64, offset: 64)
!6569 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !624, line: 42, baseType: !1730)
!6570 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !6564, file: !624, line: 136, baseType: !6571, size: 64, offset: 128)
!6571 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !624, line: 50, baseType: !1737)
!6572 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !6564, file: !624, line: 137, baseType: !1467, size: 32, offset: 192)
!6573 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !6564, file: !624, line: 138, baseType: !1467, size: 32, offset: 224)
!6574 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !6564, file: !624, line: 139, baseType: !1701, size: 64, offset: 256)
!6575 = !DILocation(line: 672, column: 15, scope: !6539)
!6576 = !DILocation(line: 674, column: 7, scope: !6577)
!6577 = distinct !DILexicalBlock(scope: !6539, file: !3, line: 674, column: 7)
!6578 = !DILocation(line: 674, column: 7, scope: !6539)
!6579 = !DILocation(line: 675, column: 13, scope: !6577)
!6580 = !DILocation(line: 675, column: 11, scope: !6577)
!6581 = !DILocation(line: 675, column: 5, scope: !6577)
!6582 = !DILocation(line: 677, column: 33, scope: !6577)
!6583 = !DILocation(line: 677, column: 13, scope: !6577)
!6584 = !DILocation(line: 677, column: 11, scope: !6577)
!6585 = !DILocation(line: 678, column: 24, scope: !6539)
!6586 = !DILocation(line: 678, column: 3, scope: !6539)
!6587 = !DILocation(line: 678, column: 13, scope: !6539)
!6588 = !DILocation(line: 678, column: 22, scope: !6539)
!6589 = !DILocation(line: 680, column: 3, scope: !6590)
!6590 = distinct !DILexicalBlock(scope: !6539, file: !3, line: 680, column: 3)
!6591 = !DILocation(line: 680, column: 3, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6590, file: !3, line: 680, column: 3)
!6593 = !DILocation(line: 681, column: 26, scope: !6594)
!6594 = distinct !DILexicalBlock(scope: !6592, file: !3, line: 681, column: 9)
!6595 = !DILocation(line: 681, column: 31, scope: !6594)
!6596 = !DILocation(line: 681, column: 41, scope: !6594)
!6597 = !DILocation(line: 681, column: 10, scope: !6594)
!6598 = !DILocation(line: 681, column: 9, scope: !6592)
!6599 = !DILocation(line: 682, column: 7, scope: !6594)
!6600 = !DILocation(line: 681, column: 51, scope: !6594)
!6601 = distinct !{!6601, !6589, !6602}
!6602 = !DILocation(line: 682, column: 14, scope: !6590)
!6603 = !DILocation(line: 684, column: 20, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6539, file: !3, line: 684, column: 7)
!6605 = !DILocation(line: 684, column: 7, scope: !6604)
!6606 = !DILocation(line: 684, column: 7, scope: !6539)
!6607 = !DILocalVariable(name: "ref", scope: !6608, file: !3, line: 686, type: !2848)
!6608 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 685, column: 5)
!6609 = !DILocation(line: 686, column: 17, scope: !6608)
!6610 = !DILocation(line: 686, column: 40, scope: !6608)
!6611 = !DILocation(line: 686, column: 23, scope: !6608)
!6612 = !DILocation(line: 688, column: 11, scope: !6613)
!6613 = distinct !DILexicalBlock(scope: !6608, file: !3, line: 688, column: 11)
!6614 = !DILocation(line: 688, column: 11, scope: !6608)
!6615 = !DILocation(line: 691, column: 29, scope: !6616)
!6616 = distinct !DILexicalBlock(scope: !6613, file: !3, line: 689, column: 2)
!6617 = !DILocation(line: 691, column: 39, scope: !6616)
!6618 = !DILocation(line: 691, column: 49, scope: !6616)
!6619 = !DILocation(line: 691, column: 55, scope: !6616)
!6620 = !DILocation(line: 691, column: 7, scope: !6616)
!6621 = !DILocation(line: 690, column: 4, scope: !6616)
!6622 = !DILocation(line: 690, column: 14, scope: !6616)
!6623 = !DILocation(line: 691, column: 5, scope: !6616)
!6624 = !DILocation(line: 692, column: 9, scope: !6625)
!6625 = distinct !DILexicalBlock(scope: !6616, file: !3, line: 692, column: 8)
!6626 = !DILocation(line: 692, column: 19, scope: !6625)
!6627 = !DILocation(line: 692, column: 8, scope: !6616)
!6628 = !DILocation(line: 693, column: 6, scope: !6625)
!6629 = !DILocation(line: 694, column: 2, scope: !6616)
!6630 = !DILocation(line: 697, column: 28, scope: !6631)
!6631 = distinct !DILexicalBlock(scope: !6632, file: !3, line: 697, column: 8)
!6632 = distinct !DILexicalBlock(scope: !6613, file: !3, line: 696, column: 2)
!6633 = !DILocation(line: 697, column: 15, scope: !6631)
!6634 = !DILocation(line: 697, column: 13, scope: !6631)
!6635 = !DILocation(line: 697, column: 35, scope: !6631)
!6636 = !DILocation(line: 697, column: 8, scope: !6632)
!6637 = !DILocation(line: 699, column: 29, scope: !6638)
!6638 = distinct !DILexicalBlock(scope: !6639, file: !3, line: 699, column: 12)
!6639 = distinct !DILexicalBlock(scope: !6631, file: !3, line: 698, column: 6)
!6640 = !DILocation(line: 699, column: 34, scope: !6638)
!6641 = !DILocation(line: 699, column: 44, scope: !6638)
!6642 = !DILocation(line: 699, column: 13, scope: !6638)
!6643 = !DILocation(line: 699, column: 12, scope: !6639)
!6644 = !DILocation(line: 700, column: 3, scope: !6638)
!6645 = !DILocation(line: 701, column: 6, scope: !6639)
!6646 = !DILocation(line: 703, column: 5, scope: !6608)
!6647 = !DILocation(line: 705, column: 32, scope: !6539)
!6648 = !DILocation(line: 705, column: 21, scope: !6539)
!6649 = !DILocation(line: 705, column: 3, scope: !6539)
!6650 = !DILocation(line: 705, column: 13, scope: !6539)
!6651 = !DILocation(line: 705, column: 18, scope: !6539)
!6652 = !DILocation(line: 707, column: 3, scope: !6539)
!6653 = !DILocation(line: 708, column: 1, scope: !6539)
!6654 = distinct !DISubprogram(name: "set_profitable_level", scope: !3, file: !3, line: 743, type: !6655, scopeLine: 744, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6655 = !DISubroutineType(types: !6656)
!6656 = !{null, !1701}
!6657 = !DILocalVariable(name: "stmt", arg: 1, scope: !6654, file: !3, line: 743, type: !1701)
!6658 = !DILocation(line: 743, column: 30, scope: !6654)
!6659 = !DILocation(line: 745, column: 14, scope: !6654)
!6660 = !DILocation(line: 745, column: 31, scope: !6654)
!6661 = !DILocation(line: 745, column: 20, scope: !6654)
!6662 = !DILocation(line: 745, column: 38, scope: !6654)
!6663 = !DILocation(line: 745, column: 65, scope: !6654)
!6664 = !DILocation(line: 745, column: 51, scope: !6654)
!6665 = !DILocation(line: 745, column: 72, scope: !6654)
!6666 = !DILocation(line: 745, column: 3, scope: !6654)
!6667 = !DILocation(line: 746, column: 1, scope: !6654)
!6668 = distinct !DISubprogram(name: "gimple_num_ops", scope: !397, file: !397, line: 1596, type: !6669, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6669 = !DISubroutineType(types: !6670)
!6670 = !{!7, !3109}
!6671 = !DILocalVariable(name: "gs", arg: 1, scope: !6668, file: !397, line: 1596, type: !3109)
!6672 = !DILocation(line: 1596, column: 30, scope: !6668)
!6673 = !DILocation(line: 1598, column: 10, scope: !6668)
!6674 = !DILocation(line: 1598, column: 14, scope: !6668)
!6675 = !DILocation(line: 1598, column: 21, scope: !6668)
!6676 = !DILocation(line: 1598, column: 3, scope: !6668)
!6677 = distinct !DISubprogram(name: "gimple_bb", scope: !397, file: !397, line: 1112, type: !6678, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6678 = !DISubroutineType(types: !6679)
!6679 = !{!1665, !3109}
!6680 = !DILocalVariable(name: "g", arg: 1, scope: !6677, file: !397, line: 1112, type: !3109)
!6681 = !DILocation(line: 1112, column: 25, scope: !6677)
!6682 = !DILocation(line: 1114, column: 10, scope: !6677)
!6683 = !DILocation(line: 1114, column: 13, scope: !6677)
!6684 = !DILocation(line: 1114, column: 20, scope: !6677)
!6685 = !DILocation(line: 1114, column: 3, scope: !6677)
!6686 = distinct !DISubprogram(name: "get_lim_data", scope: !3, file: !3, line: 216, type: !6100, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6687 = !DILocalVariable(name: "stmt", arg: 1, scope: !6686, file: !3, line: 216, type: !1701)
!6688 = !DILocation(line: 216, column: 22, scope: !6686)
!6689 = !DILocalVariable(name: "p", scope: !6686, file: !3, line: 218, type: !2239)
!6690 = !DILocation(line: 218, column: 10, scope: !6686)
!6691 = !DILocation(line: 218, column: 36, scope: !6686)
!6692 = !DILocation(line: 218, column: 54, scope: !6686)
!6693 = !DILocation(line: 218, column: 14, scope: !6686)
!6694 = !DILocation(line: 219, column: 8, scope: !6695)
!6695 = distinct !DILexicalBlock(scope: !6686, file: !3, line: 219, column: 7)
!6696 = !DILocation(line: 219, column: 7, scope: !6686)
!6697 = !DILocation(line: 220, column: 5, scope: !6695)
!6698 = !DILocation(line: 222, column: 35, scope: !6686)
!6699 = !DILocation(line: 222, column: 34, scope: !6686)
!6700 = !DILocation(line: 222, column: 10, scope: !6686)
!6701 = !DILocation(line: 222, column: 3, scope: !6686)
!6702 = !DILocation(line: 223, column: 1, scope: !6686)
!6703 = distinct !DISubprogram(name: "make_ssa_name", scope: !6209, file: !6209, line: 1245, type: !6704, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6704 = !DISubroutineType(types: !6705)
!6705 = !{!1370, !1370, !1701}
!6706 = !DILocalVariable(name: "var", arg: 1, scope: !6703, file: !6209, line: 1245, type: !1370)
!6707 = !DILocation(line: 1245, column: 21, scope: !6703)
!6708 = !DILocalVariable(name: "stmt", arg: 2, scope: !6703, file: !6209, line: 1245, type: !1701)
!6709 = !DILocation(line: 1245, column: 33, scope: !6703)
!6710 = !DILocation(line: 1247, column: 28, scope: !6703)
!6711 = !DILocation(line: 1247, column: 34, scope: !6703)
!6712 = !DILocation(line: 1247, column: 39, scope: !6703)
!6713 = !DILocation(line: 1247, column: 10, scope: !6703)
!6714 = !DILocation(line: 1247, column: 3, scope: !6703)
!6715 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !397, file: !397, line: 1714, type: !6716, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6716 = !DISubroutineType(types: !6717)
!6717 = !{null, !1701, !1370}
!6718 = !DILocalVariable(name: "gs", arg: 1, scope: !6715, file: !397, line: 1714, type: !1701)
!6719 = !DILocation(line: 1714, column: 31, scope: !6715)
!6720 = !DILocalVariable(name: "lhs", arg: 2, scope: !6715, file: !397, line: 1714, type: !1370)
!6721 = !DILocation(line: 1714, column: 40, scope: !6715)
!6722 = !DILocation(line: 1717, column: 18, scope: !6715)
!6723 = !DILocation(line: 1717, column: 25, scope: !6715)
!6724 = !DILocation(line: 1717, column: 3, scope: !6715)
!6725 = !DILocation(line: 1719, column: 7, scope: !6726)
!6726 = distinct !DILexicalBlock(scope: !6715, file: !397, line: 1719, column: 7)
!6727 = !DILocation(line: 1719, column: 11, scope: !6726)
!6728 = !DILocation(line: 1719, column: 14, scope: !6726)
!6729 = !DILocation(line: 1719, column: 30, scope: !6726)
!6730 = !DILocation(line: 1719, column: 7, scope: !6715)
!6731 = !DILocation(line: 1720, column: 31, scope: !6726)
!6732 = !DILocation(line: 1720, column: 5, scope: !6726)
!6733 = !DILocation(line: 1720, column: 29, scope: !6726)
!6734 = !DILocation(line: 1721, column: 1, scope: !6715)
!6735 = distinct !DISubprogram(name: "gimple_set_op", scope: !397, file: !397, line: 1663, type: !6736, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6736 = !DISubroutineType(types: !6737)
!6737 = !{null, !1701, !7, !1370}
!6738 = !DILocalVariable(name: "gs", arg: 1, scope: !6735, file: !397, line: 1663, type: !1701)
!6739 = !DILocation(line: 1663, column: 23, scope: !6735)
!6740 = !DILocalVariable(name: "i", arg: 2, scope: !6735, file: !397, line: 1663, type: !7)
!6741 = !DILocation(line: 1663, column: 36, scope: !6735)
!6742 = !DILocalVariable(name: "op", arg: 3, scope: !6735, file: !397, line: 1663, type: !1370)
!6743 = !DILocation(line: 1663, column: 44, scope: !6735)
!6744 = !DILocation(line: 1665, column: 3, scope: !6735)
!6745 = !DILocation(line: 1671, column: 24, scope: !6735)
!6746 = !DILocation(line: 1671, column: 15, scope: !6735)
!6747 = !DILocation(line: 1671, column: 3, scope: !6735)
!6748 = !DILocation(line: 1671, column: 19, scope: !6735)
!6749 = !DILocation(line: 1671, column: 22, scope: !6735)
!6750 = !DILocation(line: 1672, column: 1, scope: !6735)
!6751 = distinct !DISubprogram(name: "is_gimple_debug", scope: !397, file: !397, line: 3249, type: !3132, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6752 = !DILocalVariable(name: "gs", arg: 1, scope: !6751, file: !397, line: 3249, type: !3109)
!6753 = !DILocation(line: 3249, column: 31, scope: !6751)
!6754 = !DILocation(line: 3251, column: 23, scope: !6751)
!6755 = !DILocation(line: 3251, column: 10, scope: !6751)
!6756 = !DILocation(line: 3251, column: 27, scope: !6751)
!6757 = !DILocation(line: 3251, column: 3, scope: !6751)
!6758 = distinct !DISubprogram(name: "single_imm_use", scope: !6209, file: !6209, line: 373, type: !6759, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6759 = !DISubroutineType(types: !6760)
!6760 = !{!1490, !2810, !6761, !6762}
!6761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2887, size: 64)
!6762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1701, size: 64)
!6763 = !DILocalVariable(name: "var", arg: 1, scope: !6758, file: !6209, line: 373, type: !2810)
!6764 = !DILocation(line: 373, column: 28, scope: !6758)
!6765 = !DILocalVariable(name: "use_p", arg: 2, scope: !6758, file: !6209, line: 373, type: !6761)
!6766 = !DILocation(line: 373, column: 48, scope: !6758)
!6767 = !DILocalVariable(name: "stmt", arg: 3, scope: !6758, file: !6209, line: 373, type: !6762)
!6768 = !DILocation(line: 373, column: 63, scope: !6758)
!6769 = !DILocalVariable(name: "ptr", scope: !6758, file: !6209, line: 375, type: !6329)
!6770 = !DILocation(line: 375, column: 34, scope: !6758)
!6771 = !DILocation(line: 375, column: 42, scope: !6758)
!6772 = !DILocation(line: 378, column: 7, scope: !6773)
!6773 = distinct !DILexicalBlock(scope: !6758, file: !6209, line: 378, column: 7)
!6774 = !DILocation(line: 378, column: 14, scope: !6773)
!6775 = !DILocation(line: 378, column: 19, scope: !6773)
!6776 = !DILocation(line: 378, column: 11, scope: !6773)
!6777 = !DILocation(line: 378, column: 7, scope: !6758)
!6778 = !DILocation(line: 379, column: 5, scope: !6773)
!6779 = !DILabel(scope: !6780, name: "return_false", file: !6209, line: 380)
!6780 = distinct !DILexicalBlock(scope: !6773, file: !6209, line: 379, column: 5)
!6781 = !DILocation(line: 380, column: 5, scope: !6780)
!6782 = !DILocation(line: 381, column: 8, scope: !6780)
!6783 = !DILocation(line: 381, column: 14, scope: !6780)
!6784 = !DILocation(line: 382, column: 8, scope: !6780)
!6785 = !DILocation(line: 382, column: 13, scope: !6780)
!6786 = !DILocation(line: 383, column: 7, scope: !6780)
!6787 = !DILocation(line: 387, column: 7, scope: !6788)
!6788 = distinct !DILexicalBlock(scope: !6758, file: !6209, line: 387, column: 7)
!6789 = !DILocation(line: 387, column: 14, scope: !6788)
!6790 = !DILocation(line: 387, column: 19, scope: !6788)
!6791 = !DILocation(line: 387, column: 25, scope: !6788)
!6792 = !DILocation(line: 387, column: 11, scope: !6788)
!6793 = !DILocation(line: 387, column: 7, scope: !6758)
!6794 = !DILocation(line: 389, column: 29, scope: !6795)
!6795 = distinct !DILexicalBlock(scope: !6796, file: !6209, line: 389, column: 11)
!6796 = distinct !DILexicalBlock(scope: !6788, file: !6209, line: 388, column: 5)
!6797 = !DILocation(line: 389, column: 12, scope: !6795)
!6798 = !DILocation(line: 389, column: 11, scope: !6796)
!6799 = !DILocation(line: 391, column: 13, scope: !6800)
!6800 = distinct !DILexicalBlock(scope: !6795, file: !6209, line: 390, column: 2)
!6801 = !DILocation(line: 391, column: 18, scope: !6800)
!6802 = !DILocation(line: 391, column: 5, scope: !6800)
!6803 = !DILocation(line: 391, column: 11, scope: !6800)
!6804 = !DILocation(line: 392, column: 12, scope: !6800)
!6805 = !DILocation(line: 392, column: 17, scope: !6800)
!6806 = !DILocation(line: 392, column: 23, scope: !6800)
!6807 = !DILocation(line: 392, column: 27, scope: !6800)
!6808 = !DILocation(line: 392, column: 5, scope: !6800)
!6809 = !DILocation(line: 392, column: 10, scope: !6800)
!6810 = !DILocation(line: 393, column: 4, scope: !6800)
!6811 = !DILocation(line: 396, column: 2, scope: !6795)
!6812 = !DILocation(line: 400, column: 8, scope: !6813)
!6813 = distinct !DILexicalBlock(scope: !6758, file: !6209, line: 400, column: 7)
!6814 = !DILocation(line: 400, column: 7, scope: !6758)
!6815 = !DILocation(line: 401, column: 5, scope: !6813)
!6816 = !DILocation(line: 403, column: 28, scope: !6758)
!6817 = !DILocation(line: 403, column: 33, scope: !6758)
!6818 = !DILocation(line: 403, column: 40, scope: !6758)
!6819 = !DILocation(line: 403, column: 10, scope: !6758)
!6820 = !DILocation(line: 403, column: 3, scope: !6758)
!6821 = !DILocation(line: 404, column: 1, scope: !6758)
!6822 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !397, file: !397, line: 2241, type: !3117, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6823 = !DILocalVariable(name: "gs", arg: 1, scope: !6822, file: !397, line: 2241, type: !3109)
!6824 = !DILocation(line: 2241, column: 31, scope: !6822)
!6825 = !DILocation(line: 2244, column: 21, scope: !6822)
!6826 = !DILocation(line: 2244, column: 10, scope: !6822)
!6827 = !DILocation(line: 2244, column: 3, scope: !6822)
!6828 = distinct !DISubprogram(name: "gimple_cond_code", scope: !397, file: !397, line: 2221, type: !4988, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6829 = !DILocalVariable(name: "gs", arg: 1, scope: !6828, file: !397, line: 2221, type: !3109)
!6830 = !DILocation(line: 2221, column: 32, scope: !6828)
!6831 = !DILocation(line: 2224, column: 27, scope: !6828)
!6832 = !DILocation(line: 2224, column: 31, scope: !6828)
!6833 = !DILocation(line: 2224, column: 38, scope: !6828)
!6834 = !DILocation(line: 2224, column: 3, scope: !6828)
!6835 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !397, file: !397, line: 2271, type: !3117, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6836 = !DILocalVariable(name: "gs", arg: 1, scope: !6835, file: !397, line: 2271, type: !3109)
!6837 = !DILocation(line: 2271, column: 31, scope: !6835)
!6838 = !DILocation(line: 2274, column: 21, scope: !6835)
!6839 = !DILocation(line: 2274, column: 10, scope: !6835)
!6840 = !DILocation(line: 2274, column: 3, scope: !6835)
!6841 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !6209, file: !6209, line: 233, type: !6842, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6842 = !DISubroutineType(types: !6843)
!6843 = !{null, !2887, !1370}
!6844 = !DILocalVariable(name: "use", arg: 1, scope: !6841, file: !6209, line: 233, type: !2887)
!6845 = !DILocation(line: 233, column: 37, scope: !6841)
!6846 = !DILocalVariable(name: "val", arg: 2, scope: !6841, file: !6209, line: 233, type: !1370)
!6847 = !DILocation(line: 233, column: 47, scope: !6841)
!6848 = !DILocation(line: 235, column: 19, scope: !6841)
!6849 = !DILocation(line: 235, column: 3, scope: !6841)
!6850 = !DILocation(line: 236, column: 17, scope: !6841)
!6851 = !DILocation(line: 236, column: 5, scope: !6841)
!6852 = !DILocation(line: 236, column: 10, scope: !6841)
!6853 = !DILocation(line: 236, column: 15, scope: !6841)
!6854 = !DILocation(line: 237, column: 17, scope: !6841)
!6855 = !DILocation(line: 237, column: 22, scope: !6841)
!6856 = !DILocation(line: 237, column: 3, scope: !6841)
!6857 = !DILocation(line: 238, column: 1, scope: !6841)
!6858 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !397, file: !397, line: 2292, type: !6716, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6859 = !DILocalVariable(name: "gs", arg: 1, scope: !6858, file: !397, line: 2292, type: !1701)
!6860 = !DILocation(line: 2292, column: 29, scope: !6858)
!6861 = !DILocalVariable(name: "rhs", arg: 2, scope: !6858, file: !397, line: 2292, type: !1370)
!6862 = !DILocation(line: 2292, column: 38, scope: !6858)
!6863 = !DILocation(line: 2295, column: 18, scope: !6858)
!6864 = !DILocation(line: 2295, column: 25, scope: !6858)
!6865 = !DILocation(line: 2295, column: 3, scope: !6858)
!6866 = !DILocation(line: 2296, column: 1, scope: !6858)
!6867 = distinct !DISubprogram(name: "delink_imm_use", scope: !6209, file: !6209, line: 188, type: !6868, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6868 = !DISubroutineType(types: !6869)
!6869 = !{null, !2888}
!6870 = !DILocalVariable(name: "linknode", arg: 1, scope: !6867, file: !6209, line: 188, type: !2888)
!6871 = !DILocation(line: 188, column: 36, scope: !6867)
!6872 = !DILocation(line: 191, column: 7, scope: !6873)
!6873 = distinct !DILexicalBlock(scope: !6867, file: !6209, line: 191, column: 7)
!6874 = !DILocation(line: 191, column: 17, scope: !6873)
!6875 = !DILocation(line: 191, column: 22, scope: !6873)
!6876 = !DILocation(line: 191, column: 7, scope: !6867)
!6877 = !DILocation(line: 192, column: 5, scope: !6873)
!6878 = !DILocation(line: 194, column: 26, scope: !6867)
!6879 = !DILocation(line: 194, column: 36, scope: !6867)
!6880 = !DILocation(line: 194, column: 3, scope: !6867)
!6881 = !DILocation(line: 194, column: 13, scope: !6867)
!6882 = !DILocation(line: 194, column: 19, scope: !6867)
!6883 = !DILocation(line: 194, column: 24, scope: !6867)
!6884 = !DILocation(line: 195, column: 26, scope: !6867)
!6885 = !DILocation(line: 195, column: 36, scope: !6867)
!6886 = !DILocation(line: 195, column: 3, scope: !6867)
!6887 = !DILocation(line: 195, column: 13, scope: !6867)
!6888 = !DILocation(line: 195, column: 19, scope: !6867)
!6889 = !DILocation(line: 195, column: 24, scope: !6867)
!6890 = !DILocation(line: 196, column: 3, scope: !6867)
!6891 = !DILocation(line: 196, column: 13, scope: !6867)
!6892 = !DILocation(line: 196, column: 18, scope: !6867)
!6893 = !DILocation(line: 197, column: 3, scope: !6867)
!6894 = !DILocation(line: 197, column: 13, scope: !6867)
!6895 = !DILocation(line: 197, column: 18, scope: !6867)
!6896 = !DILocation(line: 198, column: 1, scope: !6867)
!6897 = distinct !DISubprogram(name: "link_imm_use", scope: !6209, file: !6209, line: 214, type: !6898, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6898 = !DISubroutineType(types: !6899)
!6899 = !{null, !2888, !1370}
!6900 = !DILocalVariable(name: "linknode", arg: 1, scope: !6897, file: !6209, line: 214, type: !2888)
!6901 = !DILocation(line: 214, column: 34, scope: !6897)
!6902 = !DILocalVariable(name: "def", arg: 2, scope: !6897, file: !6209, line: 214, type: !1370)
!6903 = !DILocation(line: 214, column: 49, scope: !6897)
!6904 = !DILocalVariable(name: "root", scope: !6897, file: !6209, line: 216, type: !2888)
!6905 = !DILocation(line: 216, column: 22, scope: !6897)
!6906 = !DILocation(line: 218, column: 8, scope: !6907)
!6907 = distinct !DILexicalBlock(scope: !6897, file: !6209, line: 218, column: 7)
!6908 = !DILocation(line: 218, column: 12, scope: !6907)
!6909 = !DILocation(line: 218, column: 15, scope: !6907)
!6910 = !DILocation(line: 218, column: 31, scope: !6907)
!6911 = !DILocation(line: 218, column: 7, scope: !6897)
!6912 = !DILocation(line: 219, column: 5, scope: !6907)
!6913 = !DILocation(line: 219, column: 15, scope: !6907)
!6914 = !DILocation(line: 219, column: 20, scope: !6907)
!6915 = !DILocation(line: 222, column: 16, scope: !6916)
!6916 = distinct !DILexicalBlock(scope: !6907, file: !6209, line: 221, column: 5)
!6917 = !DILocation(line: 222, column: 12, scope: !6916)
!6918 = !DILocation(line: 227, column: 29, scope: !6916)
!6919 = !DILocation(line: 227, column: 39, scope: !6916)
!6920 = !DILocation(line: 227, column: 7, scope: !6916)
!6921 = !DILocation(line: 229, column: 1, scope: !6897)
!6922 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !6209, file: !6209, line: 202, type: !6923, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6923 = !DISubroutineType(types: !6924)
!6924 = !{null, !2888, !2888}
!6925 = !DILocalVariable(name: "linknode", arg: 1, scope: !6922, file: !6209, line: 202, type: !2888)
!6926 = !DILocation(line: 202, column: 42, scope: !6922)
!6927 = !DILocalVariable(name: "list", arg: 2, scope: !6922, file: !6209, line: 202, type: !2888)
!6928 = !DILocation(line: 202, column: 71, scope: !6922)
!6929 = !DILocation(line: 206, column: 20, scope: !6922)
!6930 = !DILocation(line: 206, column: 3, scope: !6922)
!6931 = !DILocation(line: 206, column: 13, scope: !6922)
!6932 = !DILocation(line: 206, column: 18, scope: !6922)
!6933 = !DILocation(line: 207, column: 20, scope: !6922)
!6934 = !DILocation(line: 207, column: 26, scope: !6922)
!6935 = !DILocation(line: 207, column: 3, scope: !6922)
!6936 = !DILocation(line: 207, column: 13, scope: !6922)
!6937 = !DILocation(line: 207, column: 18, scope: !6922)
!6938 = !DILocation(line: 208, column: 22, scope: !6922)
!6939 = !DILocation(line: 208, column: 3, scope: !6922)
!6940 = !DILocation(line: 208, column: 9, scope: !6922)
!6941 = !DILocation(line: 208, column: 15, scope: !6922)
!6942 = !DILocation(line: 208, column: 20, scope: !6922)
!6943 = !DILocation(line: 209, column: 16, scope: !6922)
!6944 = !DILocation(line: 209, column: 3, scope: !6922)
!6945 = !DILocation(line: 209, column: 9, scope: !6922)
!6946 = !DILocation(line: 209, column: 14, scope: !6922)
!6947 = !DILocation(line: 210, column: 1, scope: !6922)
!6948 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !6209, file: !6209, line: 792, type: !6949, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6949 = !DISubroutineType(types: !6950)
!6950 = !{!1370, !6951, !1701, !1467}
!6951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6563, size: 64)
!6952 = !DILocalVariable(name: "ptr", arg: 1, scope: !6948, file: !6209, line: 792, type: !6951)
!6953 = !DILocation(line: 792, column: 33, scope: !6948)
!6954 = !DILocalVariable(name: "stmt", arg: 2, scope: !6948, file: !6209, line: 792, type: !1701)
!6955 = !DILocation(line: 792, column: 45, scope: !6948)
!6956 = !DILocalVariable(name: "flags", arg: 3, scope: !6948, file: !6209, line: 792, type: !1467)
!6957 = !DILocation(line: 792, column: 55, scope: !6948)
!6958 = !DILocation(line: 794, column: 17, scope: !6948)
!6959 = !DILocation(line: 794, column: 22, scope: !6948)
!6960 = !DILocation(line: 794, column: 28, scope: !6948)
!6961 = !DILocation(line: 794, column: 3, scope: !6948)
!6962 = !DILocation(line: 795, column: 3, scope: !6948)
!6963 = !DILocation(line: 795, column: 8, scope: !6948)
!6964 = !DILocation(line: 795, column: 18, scope: !6948)
!6965 = !DILocation(line: 796, column: 29, scope: !6948)
!6966 = !DILocation(line: 796, column: 10, scope: !6948)
!6967 = !DILocation(line: 796, column: 3, scope: !6948)
!6968 = distinct !DISubprogram(name: "op_iter_done", scope: !6209, file: !6209, line: 652, type: !6969, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6969 = !DISubroutineType(types: !6970)
!6970 = !{!1490, !6971}
!6971 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6972, size: 64)
!6972 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6563)
!6973 = !DILocalVariable(name: "ptr", arg: 1, scope: !6968, file: !6209, line: 652, type: !6971)
!6974 = !DILocation(line: 652, column: 34, scope: !6968)
!6975 = !DILocation(line: 654, column: 10, scope: !6968)
!6976 = !DILocation(line: 654, column: 15, scope: !6968)
!6977 = !DILocation(line: 654, column: 3, scope: !6968)
!6978 = distinct !DISubprogram(name: "add_dependency", scope: !3, file: !3, line: 466, type: !6979, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!6979 = !DISubroutineType(types: !6980)
!6980 = !{!1490, !1370, !2874, !1916, !1490}
!6981 = !DILocalVariable(name: "def", arg: 1, scope: !6978, file: !3, line: 466, type: !1370)
!6982 = !DILocation(line: 466, column: 22, scope: !6978)
!6983 = !DILocalVariable(name: "data", arg: 2, scope: !6978, file: !3, line: 466, type: !2874)
!6984 = !DILocation(line: 466, column: 48, scope: !6978)
!6985 = !DILocalVariable(name: "loop", arg: 3, scope: !6978, file: !3, line: 466, type: !1916)
!6986 = !DILocation(line: 466, column: 67, scope: !6978)
!6987 = !DILocalVariable(name: "add_cost", arg: 4, scope: !6978, file: !3, line: 467, type: !1490)
!6988 = !DILocation(line: 467, column: 8, scope: !6978)
!6989 = !DILocalVariable(name: "def_stmt", scope: !6978, file: !3, line: 469, type: !1701)
!6990 = !DILocation(line: 469, column: 10, scope: !6978)
!6991 = !DILocation(line: 469, column: 21, scope: !6978)
!6992 = !DILocalVariable(name: "def_bb", scope: !6978, file: !3, line: 470, type: !2186)
!6993 = !DILocation(line: 470, column: 15, scope: !6978)
!6994 = !DILocation(line: 470, column: 35, scope: !6978)
!6995 = !DILocation(line: 470, column: 24, scope: !6978)
!6996 = !DILocalVariable(name: "max_loop", scope: !6978, file: !3, line: 471, type: !1916)
!6997 = !DILocation(line: 471, column: 16, scope: !6978)
!6998 = !DILocalVariable(name: "dep", scope: !6978, file: !3, line: 472, type: !2882)
!6999 = !DILocation(line: 472, column: 18, scope: !6978)
!7000 = !DILocalVariable(name: "def_data", scope: !6978, file: !3, line: 473, type: !2874)
!7001 = !DILocation(line: 473, column: 24, scope: !6978)
!7002 = !DILocation(line: 475, column: 8, scope: !7003)
!7003 = distinct !DILexicalBlock(scope: !6978, file: !3, line: 475, column: 7)
!7004 = !DILocation(line: 475, column: 7, scope: !6978)
!7005 = !DILocation(line: 476, column: 5, scope: !7003)
!7006 = !DILocation(line: 478, column: 40, scope: !6978)
!7007 = !DILocation(line: 478, column: 45, scope: !6978)
!7008 = !DILocation(line: 478, column: 14, scope: !6978)
!7009 = !DILocation(line: 478, column: 12, scope: !6978)
!7010 = !DILocation(line: 479, column: 8, scope: !7011)
!7011 = distinct !DILexicalBlock(scope: !6978, file: !3, line: 479, column: 7)
!7012 = !DILocation(line: 479, column: 7, scope: !6978)
!7013 = !DILocation(line: 480, column: 5, scope: !7011)
!7014 = !DILocation(line: 482, column: 27, scope: !7015)
!7015 = distinct !DILexicalBlock(scope: !6978, file: !3, line: 482, column: 7)
!7016 = !DILocation(line: 482, column: 33, scope: !7015)
!7017 = !DILocation(line: 482, column: 43, scope: !7015)
!7018 = !DILocation(line: 482, column: 7, scope: !7015)
!7019 = !DILocation(line: 482, column: 7, scope: !6978)
!7020 = !DILocation(line: 483, column: 22, scope: !7015)
!7021 = !DILocation(line: 483, column: 5, scope: !7015)
!7022 = !DILocation(line: 483, column: 11, scope: !7015)
!7023 = !DILocation(line: 483, column: 20, scope: !7015)
!7024 = !DILocation(line: 485, column: 28, scope: !6978)
!7025 = !DILocation(line: 485, column: 14, scope: !6978)
!7026 = !DILocation(line: 485, column: 12, scope: !6978)
!7027 = !DILocation(line: 486, column: 8, scope: !7028)
!7028 = distinct !DILexicalBlock(scope: !6978, file: !3, line: 486, column: 7)
!7029 = !DILocation(line: 486, column: 7, scope: !6978)
!7030 = !DILocation(line: 487, column: 5, scope: !7028)
!7031 = !DILocation(line: 489, column: 7, scope: !7032)
!7032 = distinct !DILexicalBlock(scope: !6978, file: !3, line: 489, column: 7)
!7033 = !DILocation(line: 494, column: 7, scope: !7032)
!7034 = !DILocation(line: 494, column: 10, scope: !7032)
!7035 = !DILocation(line: 494, column: 18, scope: !7032)
!7036 = !DILocation(line: 494, column: 33, scope: !7032)
!7037 = !DILocation(line: 494, column: 30, scope: !7032)
!7038 = !DILocation(line: 489, column: 7, scope: !6978)
!7039 = !DILocation(line: 495, column: 19, scope: !7032)
!7040 = !DILocation(line: 495, column: 29, scope: !7032)
!7041 = !DILocation(line: 495, column: 5, scope: !7032)
!7042 = !DILocation(line: 495, column: 11, scope: !7032)
!7043 = !DILocation(line: 495, column: 16, scope: !7032)
!7044 = !DILocation(line: 497, column: 9, scope: !6978)
!7045 = !DILocation(line: 497, column: 7, scope: !6978)
!7046 = !DILocation(line: 498, column: 15, scope: !6978)
!7047 = !DILocation(line: 498, column: 3, scope: !6978)
!7048 = !DILocation(line: 498, column: 8, scope: !6978)
!7049 = !DILocation(line: 498, column: 13, scope: !6978)
!7050 = !DILocation(line: 499, column: 15, scope: !6978)
!7051 = !DILocation(line: 499, column: 21, scope: !6978)
!7052 = !DILocation(line: 499, column: 3, scope: !6978)
!7053 = !DILocation(line: 499, column: 8, scope: !6978)
!7054 = !DILocation(line: 499, column: 13, scope: !6978)
!7055 = !DILocation(line: 500, column: 19, scope: !6978)
!7056 = !DILocation(line: 500, column: 3, scope: !6978)
!7057 = !DILocation(line: 500, column: 9, scope: !6978)
!7058 = !DILocation(line: 500, column: 17, scope: !6978)
!7059 = !DILocation(line: 502, column: 3, scope: !6978)
!7060 = !DILocation(line: 503, column: 1, scope: !6978)
!7061 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !6209, file: !6209, line: 699, type: !7062, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7062 = !DISubroutineType(types: !7063)
!7063 = !{!1370, !6951}
!7064 = !DILocalVariable(name: "ptr", arg: 1, scope: !7061, file: !6209, line: 699, type: !6951)
!7065 = !DILocation(line: 699, column: 33, scope: !7061)
!7066 = !DILocalVariable(name: "val", scope: !7061, file: !6209, line: 701, type: !1370)
!7067 = !DILocation(line: 701, column: 8, scope: !7061)
!7068 = !DILocation(line: 705, column: 7, scope: !7069)
!7069 = distinct !DILexicalBlock(scope: !7061, file: !6209, line: 705, column: 7)
!7070 = !DILocation(line: 705, column: 12, scope: !7069)
!7071 = !DILocation(line: 705, column: 7, scope: !7061)
!7072 = !DILocation(line: 707, column: 13, scope: !7073)
!7073 = distinct !DILexicalBlock(scope: !7069, file: !6209, line: 706, column: 5)
!7074 = !DILocation(line: 707, column: 11, scope: !7073)
!7075 = !DILocation(line: 708, column: 19, scope: !7073)
!7076 = !DILocation(line: 708, column: 24, scope: !7073)
!7077 = !DILocation(line: 708, column: 30, scope: !7073)
!7078 = !DILocation(line: 708, column: 7, scope: !7073)
!7079 = !DILocation(line: 708, column: 12, scope: !7073)
!7080 = !DILocation(line: 708, column: 17, scope: !7073)
!7081 = !DILocation(line: 709, column: 14, scope: !7073)
!7082 = !DILocation(line: 709, column: 7, scope: !7073)
!7083 = !DILocation(line: 711, column: 7, scope: !7084)
!7084 = distinct !DILexicalBlock(scope: !7061, file: !6209, line: 711, column: 7)
!7085 = !DILocation(line: 711, column: 12, scope: !7084)
!7086 = !DILocation(line: 711, column: 7, scope: !7061)
!7087 = !DILocation(line: 713, column: 13, scope: !7088)
!7088 = distinct !DILexicalBlock(scope: !7084, file: !6209, line: 712, column: 5)
!7089 = !DILocation(line: 713, column: 11, scope: !7088)
!7090 = !DILocation(line: 714, column: 19, scope: !7088)
!7091 = !DILocation(line: 714, column: 24, scope: !7088)
!7092 = !DILocation(line: 714, column: 30, scope: !7088)
!7093 = !DILocation(line: 714, column: 7, scope: !7088)
!7094 = !DILocation(line: 714, column: 12, scope: !7088)
!7095 = !DILocation(line: 714, column: 17, scope: !7088)
!7096 = !DILocation(line: 715, column: 14, scope: !7088)
!7097 = !DILocation(line: 715, column: 7, scope: !7088)
!7098 = !DILocation(line: 718, column: 3, scope: !7061)
!7099 = !DILocation(line: 718, column: 8, scope: !7061)
!7100 = !DILocation(line: 718, column: 13, scope: !7061)
!7101 = !DILocation(line: 719, column: 3, scope: !7061)
!7102 = !DILocation(line: 721, column: 1, scope: !7061)
!7103 = distinct !DISubprogram(name: "mem_ref_in_stmt", scope: !3, file: !3, line: 636, type: !7104, scopeLine: 637, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7104 = !DISubroutineType(types: !7105)
!7105 = !{!2848, !1701}
!7106 = !DILocalVariable(name: "stmt", arg: 1, scope: !7103, file: !3, line: 636, type: !1701)
!7107 = !DILocation(line: 636, column: 25, scope: !7103)
!7108 = !DILocalVariable(name: "store", scope: !7103, file: !3, line: 638, type: !1490)
!7109 = !DILocation(line: 638, column: 8, scope: !7103)
!7110 = !DILocalVariable(name: "mem", scope: !7103, file: !3, line: 639, type: !1735)
!7111 = !DILocation(line: 639, column: 9, scope: !7103)
!7112 = !DILocation(line: 639, column: 39, scope: !7103)
!7113 = !DILocation(line: 639, column: 15, scope: !7103)
!7114 = !DILocalVariable(name: "hash", scope: !7103, file: !3, line: 640, type: !2227)
!7115 = !DILocation(line: 640, column: 13, scope: !7103)
!7116 = !DILocalVariable(name: "ref", scope: !7103, file: !3, line: 641, type: !2848)
!7117 = !DILocation(line: 641, column: 13, scope: !7103)
!7118 = !DILocation(line: 643, column: 8, scope: !7119)
!7119 = distinct !DILexicalBlock(scope: !7103, file: !3, line: 643, column: 7)
!7120 = !DILocation(line: 643, column: 7, scope: !7103)
!7121 = !DILocation(line: 644, column: 5, scope: !7119)
!7122 = !DILocation(line: 645, column: 3, scope: !7103)
!7123 = !DILocation(line: 647, column: 32, scope: !7103)
!7124 = !DILocation(line: 647, column: 31, scope: !7103)
!7125 = !DILocation(line: 647, column: 10, scope: !7103)
!7126 = !DILocation(line: 647, column: 8, scope: !7103)
!7127 = !DILocation(line: 648, column: 58, scope: !7103)
!7128 = !DILocation(line: 648, column: 65, scope: !7103)
!7129 = !DILocation(line: 648, column: 64, scope: !7103)
!7130 = !DILocation(line: 648, column: 70, scope: !7103)
!7131 = !DILocation(line: 648, column: 21, scope: !7103)
!7132 = !DILocation(line: 648, column: 9, scope: !7103)
!7133 = !DILocation(line: 648, column: 7, scope: !7103)
!7134 = !DILocation(line: 650, column: 3, scope: !7103)
!7135 = !DILocation(line: 651, column: 10, scope: !7103)
!7136 = !DILocation(line: 651, column: 3, scope: !7103)
!7137 = !DILocation(line: 652, column: 1, scope: !7103)
!7138 = distinct !DISubprogram(name: "outermost_indep_loop", scope: !3, file: !3, line: 575, type: !7139, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7139 = !DISubroutineType(types: !7140)
!7140 = !{!1916, !1916, !1916, !2848}
!7141 = !DILocalVariable(name: "outer", arg: 1, scope: !7138, file: !3, line: 575, type: !1916)
!7142 = !DILocation(line: 575, column: 36, scope: !7138)
!7143 = !DILocalVariable(name: "loop", arg: 2, scope: !7138, file: !3, line: 575, type: !1916)
!7144 = !DILocation(line: 575, column: 56, scope: !7138)
!7145 = !DILocalVariable(name: "ref", arg: 3, scope: !7138, file: !3, line: 575, type: !2848)
!7146 = !DILocation(line: 575, column: 72, scope: !7138)
!7147 = !DILocalVariable(name: "aloop", scope: !7138, file: !3, line: 577, type: !1916)
!7148 = !DILocation(line: 577, column: 16, scope: !7138)
!7149 = !DILocation(line: 579, column: 21, scope: !7150)
!7150 = distinct !DILexicalBlock(scope: !7138, file: !3, line: 579, column: 7)
!7151 = !DILocation(line: 579, column: 26, scope: !7150)
!7152 = !DILocation(line: 579, column: 34, scope: !7150)
!7153 = !DILocation(line: 579, column: 40, scope: !7150)
!7154 = !DILocation(line: 579, column: 7, scope: !7150)
!7155 = !DILocation(line: 579, column: 7, scope: !7138)
!7156 = !DILocation(line: 580, column: 5, scope: !7150)
!7157 = !DILocation(line: 582, column: 16, scope: !7158)
!7158 = distinct !DILexicalBlock(scope: !7138, file: !3, line: 582, column: 3)
!7159 = !DILocation(line: 582, column: 14, scope: !7158)
!7160 = !DILocation(line: 582, column: 8, scope: !7158)
!7161 = !DILocation(line: 583, column: 8, scope: !7162)
!7162 = distinct !DILexicalBlock(scope: !7158, file: !3, line: 582, column: 3)
!7163 = !DILocation(line: 583, column: 17, scope: !7162)
!7164 = !DILocation(line: 583, column: 14, scope: !7162)
!7165 = !DILocation(line: 582, column: 3, scope: !7158)
!7166 = !DILocation(line: 585, column: 24, scope: !7167)
!7167 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 585, column: 9)
!7168 = !DILocation(line: 585, column: 29, scope: !7167)
!7169 = !DILocation(line: 585, column: 37, scope: !7167)
!7170 = !DILocation(line: 585, column: 44, scope: !7167)
!7171 = !DILocation(line: 585, column: 10, scope: !7167)
!7172 = !DILocation(line: 586, column: 2, scope: !7167)
!7173 = !DILocation(line: 586, column: 23, scope: !7167)
!7174 = !DILocation(line: 586, column: 30, scope: !7167)
!7175 = !DILocation(line: 586, column: 5, scope: !7167)
!7176 = !DILocation(line: 585, column: 9, scope: !7162)
!7177 = !DILocation(line: 587, column: 14, scope: !7167)
!7178 = !DILocation(line: 587, column: 7, scope: !7167)
!7179 = !DILocation(line: 586, column: 33, scope: !7167)
!7180 = !DILocation(line: 584, column: 36, scope: !7162)
!7181 = !DILocation(line: 584, column: 54, scope: !7162)
!7182 = !DILocation(line: 584, column: 42, scope: !7162)
!7183 = !DILocation(line: 584, column: 61, scope: !7162)
!7184 = !DILocation(line: 584, column: 16, scope: !7162)
!7185 = !DILocation(line: 584, column: 14, scope: !7162)
!7186 = !DILocation(line: 582, column: 3, scope: !7162)
!7187 = distinct !{!7187, !7165, !7188}
!7188 = !DILocation(line: 587, column: 14, scope: !7158)
!7189 = !DILocation(line: 589, column: 25, scope: !7190)
!7190 = distinct !DILexicalBlock(scope: !7138, file: !3, line: 589, column: 7)
!7191 = !DILocation(line: 589, column: 31, scope: !7190)
!7192 = !DILocation(line: 589, column: 7, scope: !7190)
!7193 = !DILocation(line: 589, column: 7, scope: !7138)
!7194 = !DILocation(line: 590, column: 12, scope: !7190)
!7195 = !DILocation(line: 590, column: 5, scope: !7190)
!7196 = !DILocation(line: 592, column: 5, scope: !7190)
!7197 = !DILocation(line: 593, column: 1, scope: !7138)
!7198 = distinct !DISubprogram(name: "stmt_cost", scope: !3, file: !3, line: 510, type: !7199, scopeLine: 511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7199 = !DISubroutineType(types: !7200)
!7200 = !{!7, !1701}
!7201 = !DILocalVariable(name: "stmt", arg: 1, scope: !7198, file: !3, line: 510, type: !1701)
!7202 = !DILocation(line: 510, column: 19, scope: !7198)
!7203 = !DILocalVariable(name: "fndecl", scope: !7198, file: !3, line: 512, type: !1370)
!7204 = !DILocation(line: 512, column: 8, scope: !7198)
!7205 = !DILocalVariable(name: "cost", scope: !7198, file: !3, line: 513, type: !7)
!7206 = !DILocation(line: 513, column: 12, scope: !7198)
!7207 = !DILocation(line: 516, column: 20, scope: !7208)
!7208 = distinct !DILexicalBlock(scope: !7198, file: !3, line: 516, column: 7)
!7209 = !DILocation(line: 516, column: 7, scope: !7208)
!7210 = !DILocation(line: 516, column: 26, scope: !7208)
!7211 = !DILocation(line: 516, column: 7, scope: !7198)
!7212 = !DILocation(line: 517, column: 12, scope: !7208)
!7213 = !DILocation(line: 517, column: 5, scope: !7208)
!7214 = !DILocation(line: 520, column: 35, scope: !7215)
!7215 = distinct !DILexicalBlock(scope: !7198, file: !3, line: 520, column: 7)
!7216 = !DILocation(line: 520, column: 7, scope: !7215)
!7217 = !DILocation(line: 520, column: 7, scope: !7198)
!7218 = !DILocation(line: 521, column: 10, scope: !7215)
!7219 = !DILocation(line: 521, column: 5, scope: !7215)
!7220 = !DILocation(line: 523, column: 23, scope: !7221)
!7221 = distinct !DILexicalBlock(scope: !7198, file: !3, line: 523, column: 7)
!7222 = !DILocation(line: 523, column: 7, scope: !7221)
!7223 = !DILocation(line: 523, column: 7, scope: !7198)
!7224 = !DILocation(line: 529, column: 36, scope: !7225)
!7225 = distinct !DILexicalBlock(scope: !7221, file: !3, line: 524, column: 5)
!7226 = !DILocation(line: 529, column: 16, scope: !7225)
!7227 = !DILocation(line: 529, column: 14, scope: !7225)
!7228 = !DILocation(line: 530, column: 11, scope: !7229)
!7229 = distinct !DILexicalBlock(scope: !7225, file: !3, line: 530, column: 11)
!7230 = !DILocation(line: 531, column: 4, scope: !7229)
!7231 = !DILocation(line: 531, column: 7, scope: !7229)
!7232 = !DILocation(line: 531, column: 36, scope: !7229)
!7233 = !DILocation(line: 532, column: 4, scope: !7229)
!7234 = !DILocation(line: 532, column: 7, scope: !7229)
!7235 = !DILocation(line: 532, column: 35, scope: !7229)
!7236 = !DILocation(line: 530, column: 11, scope: !7225)
!7237 = !DILocation(line: 533, column: 2, scope: !7229)
!7238 = !DILocation(line: 535, column: 14, scope: !7225)
!7239 = !DILocation(line: 535, column: 19, scope: !7225)
!7240 = !DILocation(line: 535, column: 7, scope: !7225)
!7241 = !DILocation(line: 538, column: 20, scope: !7242)
!7242 = distinct !DILexicalBlock(scope: !7198, file: !3, line: 538, column: 7)
!7243 = !DILocation(line: 538, column: 7, scope: !7242)
!7244 = !DILocation(line: 538, column: 26, scope: !7242)
!7245 = !DILocation(line: 538, column: 7, scope: !7198)
!7246 = !DILocation(line: 539, column: 12, scope: !7242)
!7247 = !DILocation(line: 539, column: 5, scope: !7242)
!7248 = !DILocation(line: 541, column: 35, scope: !7198)
!7249 = !DILocation(line: 541, column: 11, scope: !7198)
!7250 = !DILocation(line: 541, column: 3, scope: !7198)
!7251 = !DILocation(line: 555, column: 12, scope: !7252)
!7252 = distinct !DILexicalBlock(scope: !7198, file: !3, line: 542, column: 5)
!7253 = !DILocation(line: 556, column: 7, scope: !7252)
!7254 = !DILocation(line: 560, column: 12, scope: !7252)
!7255 = !DILocation(line: 561, column: 7, scope: !7252)
!7256 = !DILocation(line: 564, column: 7, scope: !7252)
!7257 = !DILocation(line: 567, column: 10, scope: !7198)
!7258 = !DILocation(line: 567, column: 3, scope: !7198)
!7259 = !DILocation(line: 568, column: 1, scope: !7198)
!7260 = distinct !DISubprogram(name: "op_iter_init", scope: !6209, file: !6209, line: 742, type: !7261, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7261 = !DISubroutineType(types: !7262)
!7262 = !{null, !6951, !1701, !1467}
!7263 = !DILocalVariable(name: "ptr", arg: 1, scope: !7260, file: !6209, line: 742, type: !6951)
!7264 = !DILocation(line: 742, column: 28, scope: !7260)
!7265 = !DILocalVariable(name: "stmt", arg: 2, scope: !7260, file: !6209, line: 742, type: !1701)
!7266 = !DILocation(line: 742, column: 40, scope: !7260)
!7267 = !DILocalVariable(name: "flags", arg: 3, scope: !7260, file: !6209, line: 742, type: !1467)
!7268 = !DILocation(line: 742, column: 50, scope: !7260)
!7269 = !DILocation(line: 746, column: 3, scope: !7260)
!7270 = !DILocation(line: 748, column: 16, scope: !7260)
!7271 = !DILocation(line: 748, column: 22, scope: !7260)
!7272 = !DILocation(line: 748, column: 15, scope: !7260)
!7273 = !DILocation(line: 748, column: 68, scope: !7260)
!7274 = !DILocation(line: 748, column: 52, scope: !7260)
!7275 = !DILocation(line: 748, column: 3, scope: !7260)
!7276 = !DILocation(line: 748, column: 8, scope: !7260)
!7277 = !DILocation(line: 748, column: 13, scope: !7260)
!7278 = !DILocation(line: 749, column: 9, scope: !7279)
!7279 = distinct !DILexicalBlock(scope: !7260, file: !6209, line: 749, column: 7)
!7280 = !DILocation(line: 749, column: 15, scope: !7279)
!7281 = !DILocation(line: 750, column: 7, scope: !7279)
!7282 = !DILocation(line: 750, column: 10, scope: !7279)
!7283 = !DILocation(line: 750, column: 15, scope: !7279)
!7284 = !DILocation(line: 751, column: 7, scope: !7279)
!7285 = !DILocation(line: 751, column: 23, scope: !7279)
!7286 = !DILocation(line: 751, column: 10, scope: !7279)
!7287 = !DILocation(line: 751, column: 29, scope: !7279)
!7288 = !DILocation(line: 749, column: 7, scope: !7260)
!7289 = !DILocation(line: 752, column: 17, scope: !7279)
!7290 = !DILocation(line: 752, column: 22, scope: !7279)
!7291 = !DILocation(line: 752, column: 28, scope: !7279)
!7292 = !DILocation(line: 752, column: 5, scope: !7279)
!7293 = !DILocation(line: 752, column: 10, scope: !7279)
!7294 = !DILocation(line: 752, column: 15, scope: !7279)
!7295 = !DILocation(line: 753, column: 16, scope: !7260)
!7296 = !DILocation(line: 753, column: 22, scope: !7260)
!7297 = !DILocation(line: 753, column: 15, scope: !7260)
!7298 = !DILocation(line: 753, column: 68, scope: !7260)
!7299 = !DILocation(line: 753, column: 52, scope: !7260)
!7300 = !DILocation(line: 753, column: 3, scope: !7260)
!7301 = !DILocation(line: 753, column: 8, scope: !7260)
!7302 = !DILocation(line: 753, column: 13, scope: !7260)
!7303 = !DILocation(line: 754, column: 9, scope: !7304)
!7304 = distinct !DILexicalBlock(scope: !7260, file: !6209, line: 754, column: 7)
!7305 = !DILocation(line: 754, column: 15, scope: !7304)
!7306 = !DILocation(line: 755, column: 7, scope: !7304)
!7307 = !DILocation(line: 755, column: 10, scope: !7304)
!7308 = !DILocation(line: 755, column: 15, scope: !7304)
!7309 = !DILocation(line: 756, column: 7, scope: !7304)
!7310 = !DILocation(line: 756, column: 23, scope: !7304)
!7311 = !DILocation(line: 756, column: 10, scope: !7304)
!7312 = !DILocation(line: 756, column: 29, scope: !7304)
!7313 = !DILocation(line: 754, column: 7, scope: !7260)
!7314 = !DILocation(line: 757, column: 17, scope: !7304)
!7315 = !DILocation(line: 757, column: 22, scope: !7304)
!7316 = !DILocation(line: 757, column: 28, scope: !7304)
!7317 = !DILocation(line: 757, column: 5, scope: !7304)
!7318 = !DILocation(line: 757, column: 10, scope: !7304)
!7319 = !DILocation(line: 757, column: 15, scope: !7304)
!7320 = !DILocation(line: 758, column: 3, scope: !7260)
!7321 = !DILocation(line: 758, column: 8, scope: !7260)
!7322 = !DILocation(line: 758, column: 13, scope: !7260)
!7323 = !DILocation(line: 760, column: 3, scope: !7260)
!7324 = !DILocation(line: 760, column: 8, scope: !7260)
!7325 = !DILocation(line: 760, column: 14, scope: !7260)
!7326 = !DILocation(line: 761, column: 3, scope: !7260)
!7327 = !DILocation(line: 761, column: 8, scope: !7260)
!7328 = !DILocation(line: 761, column: 16, scope: !7260)
!7329 = !DILocation(line: 762, column: 3, scope: !7260)
!7330 = !DILocation(line: 762, column: 8, scope: !7260)
!7331 = !DILocation(line: 762, column: 17, scope: !7260)
!7332 = !DILocation(line: 763, column: 1, scope: !7260)
!7333 = distinct !DISubprogram(name: "gimple_def_ops", scope: !397, file: !397, line: 1292, type: !7334, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7334 = !DISubroutineType(types: !7335)
!7335 = !{!1730, !3109}
!7336 = !DILocalVariable(name: "g", arg: 1, scope: !7333, file: !397, line: 1292, type: !3109)
!7337 = !DILocation(line: 1292, column: 30, scope: !7333)
!7338 = !DILocation(line: 1294, column: 24, scope: !7339)
!7339 = distinct !DILexicalBlock(scope: !7333, file: !397, line: 1294, column: 7)
!7340 = !DILocation(line: 1294, column: 8, scope: !7339)
!7341 = !DILocation(line: 1294, column: 7, scope: !7333)
!7342 = !DILocation(line: 1295, column: 5, scope: !7339)
!7343 = !DILocation(line: 1296, column: 10, scope: !7333)
!7344 = !DILocation(line: 1296, column: 13, scope: !7333)
!7345 = !DILocation(line: 1296, column: 19, scope: !7333)
!7346 = !DILocation(line: 1296, column: 26, scope: !7333)
!7347 = !DILocation(line: 1296, column: 3, scope: !7333)
!7348 = !DILocation(line: 1297, column: 1, scope: !7333)
!7349 = distinct !DISubprogram(name: "gimple_use_ops", scope: !397, file: !397, line: 1313, type: !7350, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7350 = !DISubroutineType(types: !7351)
!7351 = !{!1737, !3109}
!7352 = !DILocalVariable(name: "g", arg: 1, scope: !7349, file: !397, line: 1313, type: !3109)
!7353 = !DILocation(line: 1313, column: 30, scope: !7349)
!7354 = !DILocation(line: 1315, column: 24, scope: !7355)
!7355 = distinct !DILexicalBlock(scope: !7349, file: !397, line: 1315, column: 7)
!7356 = !DILocation(line: 1315, column: 8, scope: !7355)
!7357 = !DILocation(line: 1315, column: 7, scope: !7349)
!7358 = !DILocation(line: 1316, column: 5, scope: !7355)
!7359 = !DILocation(line: 1317, column: 10, scope: !7349)
!7360 = !DILocation(line: 1317, column: 13, scope: !7349)
!7361 = !DILocation(line: 1317, column: 19, scope: !7349)
!7362 = !DILocation(line: 1317, column: 26, scope: !7349)
!7363 = !DILocation(line: 1317, column: 3, scope: !7349)
!7364 = !DILocation(line: 1318, column: 1, scope: !7349)
!7365 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !6209, file: !6209, line: 427, type: !7366, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7366 = !DISubroutineType(types: !7367)
!7367 = !{!1370, !2887}
!7368 = !DILocalVariable(name: "use", arg: 1, scope: !7365, file: !6209, line: 427, type: !2887)
!7369 = !DILocation(line: 427, column: 33, scope: !7365)
!7370 = !DILocation(line: 429, column: 12, scope: !7365)
!7371 = !DILocation(line: 429, column: 17, scope: !7365)
!7372 = !DILocation(line: 429, column: 10, scope: !7365)
!7373 = !DILocation(line: 429, column: 3, scope: !7365)
!7374 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !6209, file: !6209, line: 434, type: !7375, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7375 = !DISubroutineType(types: !7376)
!7376 = !{!1370, !7377}
!7377 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !624, line: 27, baseType: !1735)
!7378 = !DILocalVariable(name: "def", arg: 1, scope: !7374, file: !6209, line: 434, type: !7377)
!7379 = !DILocation(line: 434, column: 33, scope: !7374)
!7380 = !DILocation(line: 436, column: 11, scope: !7374)
!7381 = !DILocation(line: 436, column: 10, scope: !7374)
!7382 = !DILocation(line: 436, column: 3, scope: !7374)
!7383 = distinct !DISubprogram(name: "ref_indep_loop_p", scope: !3, file: !3, line: 2054, type: !7384, scopeLine: 2055, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7384 = !DISubroutineType(types: !7385)
!7385 = !{!1490, !1916, !2848}
!7386 = !DILocalVariable(name: "loop", arg: 1, scope: !7383, file: !3, line: 2054, type: !1916)
!7387 = !DILocation(line: 2054, column: 32, scope: !7383)
!7388 = !DILocalVariable(name: "ref", arg: 2, scope: !7383, file: !3, line: 2054, type: !2848)
!7389 = !DILocation(line: 2054, column: 48, scope: !7383)
!7390 = !DILocalVariable(name: "ret", scope: !7383, file: !3, line: 2056, type: !1490)
!7391 = !DILocation(line: 2056, column: 8, scope: !7383)
!7392 = !DILocation(line: 2058, column: 21, scope: !7393)
!7393 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 2058, column: 7)
!7394 = !DILocation(line: 2058, column: 26, scope: !7393)
!7395 = !DILocation(line: 2058, column: 38, scope: !7393)
!7396 = !DILocation(line: 2058, column: 44, scope: !7393)
!7397 = !DILocation(line: 2058, column: 7, scope: !7393)
!7398 = !DILocation(line: 2058, column: 7, scope: !7383)
!7399 = !DILocation(line: 2059, column: 5, scope: !7393)
!7400 = !DILocation(line: 2060, column: 21, scope: !7401)
!7401 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 2060, column: 7)
!7402 = !DILocation(line: 2060, column: 26, scope: !7401)
!7403 = !DILocation(line: 2060, column: 36, scope: !7401)
!7404 = !DILocation(line: 2060, column: 42, scope: !7401)
!7405 = !DILocation(line: 2060, column: 7, scope: !7401)
!7406 = !DILocation(line: 2060, column: 7, scope: !7383)
!7407 = !DILocation(line: 2061, column: 5, scope: !7401)
!7408 = !DILocation(line: 2063, column: 29, scope: !7383)
!7409 = !DILocation(line: 2063, column: 35, scope: !7383)
!7410 = !DILocation(line: 2063, column: 9, scope: !7383)
!7411 = !DILocation(line: 2063, column: 7, scope: !7383)
!7412 = !DILocation(line: 2065, column: 7, scope: !7413)
!7413 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 2065, column: 7)
!7414 = !DILocation(line: 2065, column: 17, scope: !7413)
!7415 = !DILocation(line: 2065, column: 21, scope: !7413)
!7416 = !DILocation(line: 2065, column: 32, scope: !7413)
!7417 = !DILocation(line: 2065, column: 7, scope: !7383)
!7418 = !DILocation(line: 2066, column: 14, scope: !7413)
!7419 = !DILocation(line: 2067, column: 7, scope: !7413)
!7420 = !DILocation(line: 2067, column: 12, scope: !7413)
!7421 = !DILocation(line: 2067, column: 16, scope: !7413)
!7422 = !DILocation(line: 2067, column: 22, scope: !7413)
!7423 = !DILocation(line: 2067, column: 27, scope: !7413)
!7424 = !DILocation(line: 2066, column: 5, scope: !7413)
!7425 = !DILocation(line: 2069, column: 22, scope: !7383)
!7426 = !DILocation(line: 2069, column: 28, scope: !7383)
!7427 = !DILocation(line: 2069, column: 33, scope: !7383)
!7428 = !DILocation(line: 2069, column: 3, scope: !7383)
!7429 = !DILocation(line: 2071, column: 10, scope: !7383)
!7430 = !DILocation(line: 2071, column: 3, scope: !7383)
!7431 = !DILocation(line: 2072, column: 1, scope: !7383)
!7432 = distinct !DISubprogram(name: "ref_indep_loop_p_1", scope: !3, file: !3, line: 2008, type: !7384, scopeLine: 2009, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7433 = !DILocalVariable(name: "loop", arg: 1, scope: !7432, file: !3, line: 2008, type: !1916)
!7434 = !DILocation(line: 2008, column: 34, scope: !7432)
!7435 = !DILocalVariable(name: "ref", arg: 2, scope: !7432, file: !3, line: 2008, type: !2848)
!7436 = !DILocation(line: 2008, column: 50, scope: !7432)
!7437 = !DILocalVariable(name: "clobbers", scope: !7432, file: !3, line: 2010, type: !2301)
!7438 = !DILocation(line: 2010, column: 10, scope: !7432)
!7439 = !DILocalVariable(name: "refs_to_check", scope: !7432, file: !3, line: 2010, type: !2301)
!7440 = !DILocation(line: 2010, column: 20, scope: !7432)
!7441 = !DILocalVariable(name: "refs", scope: !7432, file: !3, line: 2010, type: !2301)
!7442 = !DILocation(line: 2010, column: 35, scope: !7432)
!7443 = !DILocalVariable(name: "i", scope: !7432, file: !3, line: 2011, type: !7)
!7444 = !DILocation(line: 2011, column: 12, scope: !7432)
!7445 = !DILocalVariable(name: "bi", scope: !7432, file: !3, line: 2012, type: !5272)
!7446 = !DILocation(line: 2012, column: 19, scope: !7432)
!7447 = !DILocalVariable(name: "ret", scope: !7432, file: !3, line: 2013, type: !1490)
!7448 = !DILocation(line: 2013, column: 8, scope: !7432)
!7449 = !DILocalVariable(name: "stored", scope: !7432, file: !3, line: 2013, type: !1490)
!7450 = !DILocation(line: 2013, column: 20, scope: !7432)
!7451 = !DILocation(line: 2013, column: 43, scope: !7432)
!7452 = !DILocation(line: 2013, column: 48, scope: !7432)
!7453 = !DILocation(line: 2013, column: 56, scope: !7432)
!7454 = !DILocation(line: 2013, column: 62, scope: !7432)
!7455 = !DILocation(line: 2013, column: 29, scope: !7432)
!7456 = !DILocalVariable(name: "map", scope: !7432, file: !3, line: 2014, type: !2218)
!7457 = !DILocation(line: 2014, column: 10, scope: !7432)
!7458 = !DILocalVariable(name: "aref", scope: !7432, file: !3, line: 2015, type: !2848)
!7459 = !DILocation(line: 2015, column: 13, scope: !7432)
!7460 = !DILocation(line: 2018, column: 14, scope: !7432)
!7461 = !DILocation(line: 2018, column: 12, scope: !7432)
!7462 = !DILocation(line: 2019, column: 27, scope: !7463)
!7463 = distinct !DILexicalBlock(scope: !7432, file: !3, line: 2019, column: 7)
!7464 = !DILocation(line: 2019, column: 32, scope: !7463)
!7465 = !DILocation(line: 2019, column: 38, scope: !7463)
!7466 = !DILocation(line: 2019, column: 7, scope: !7463)
!7467 = !DILocation(line: 2019, column: 7, scope: !7432)
!7468 = !DILocation(line: 2020, column: 5, scope: !7463)
!7469 = !DILocation(line: 2022, column: 19, scope: !7432)
!7470 = !DILocation(line: 2022, column: 17, scope: !7432)
!7471 = !DILocation(line: 2024, column: 9, scope: !7432)
!7472 = !DILocation(line: 2024, column: 7, scope: !7432)
!7473 = !DILocation(line: 2025, column: 3, scope: !7474)
!7474 = distinct !DILexicalBlock(scope: !7432, file: !3, line: 2025, column: 3)
!7475 = !DILocation(line: 2025, column: 3, scope: !7476)
!7476 = distinct !DILexicalBlock(scope: !7474, file: !3, line: 2025, column: 3)
!7477 = !DILocation(line: 2027, column: 11, scope: !7478)
!7478 = distinct !DILexicalBlock(scope: !7479, file: !3, line: 2027, column: 11)
!7479 = distinct !DILexicalBlock(scope: !7476, file: !3, line: 2026, column: 5)
!7480 = !DILocation(line: 2027, column: 11, scope: !7479)
!7481 = !DILocation(line: 2028, column: 27, scope: !7478)
!7482 = !DILocation(line: 2028, column: 32, scope: !7478)
!7483 = !DILocation(line: 2028, column: 9, scope: !7478)
!7484 = !DILocation(line: 2028, column: 7, scope: !7478)
!7485 = !DILocation(line: 2028, column: 2, scope: !7478)
!7486 = !DILocation(line: 2030, column: 25, scope: !7478)
!7487 = !DILocation(line: 2030, column: 30, scope: !7478)
!7488 = !DILocation(line: 2030, column: 9, scope: !7478)
!7489 = !DILocation(line: 2030, column: 7, scope: !7478)
!7490 = !DILocation(line: 2032, column: 24, scope: !7479)
!7491 = !DILocation(line: 2032, column: 39, scope: !7479)
!7492 = !DILocation(line: 2032, column: 7, scope: !7479)
!7493 = !DILocation(line: 2033, column: 5, scope: !7479)
!7494 = distinct !{!7494, !7473, !7495}
!7495 = !DILocation(line: 2033, column: 5, scope: !7474)
!7496 = !DILocation(line: 2035, column: 3, scope: !7497)
!7497 = distinct !DILexicalBlock(scope: !7432, file: !3, line: 2035, column: 3)
!7498 = !DILocation(line: 2035, column: 3, scope: !7499)
!7499 = distinct !DILexicalBlock(scope: !7497, file: !3, line: 2035, column: 3)
!7500 = !DILocation(line: 2037, column: 14, scope: !7501)
!7501 = distinct !DILexicalBlock(scope: !7499, file: !3, line: 2036, column: 5)
!7502 = !DILocation(line: 2037, column: 12, scope: !7501)
!7503 = !DILocation(line: 2038, column: 32, scope: !7504)
!7504 = distinct !DILexicalBlock(scope: !7501, file: !3, line: 2038, column: 11)
!7505 = !DILocation(line: 2038, column: 37, scope: !7504)
!7506 = !DILocation(line: 2038, column: 12, scope: !7504)
!7507 = !DILocation(line: 2038, column: 11, scope: !7501)
!7508 = !DILocation(line: 2040, column: 8, scope: !7509)
!7509 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 2039, column: 2)
!7510 = !DILocation(line: 2041, column: 23, scope: !7509)
!7511 = !DILocation(line: 2041, column: 29, scope: !7509)
!7512 = !DILocation(line: 2041, column: 4, scope: !7509)
!7513 = !DILocation(line: 2042, column: 4, scope: !7509)
!7514 = !DILocation(line: 2044, column: 5, scope: !7501)
!7515 = distinct !{!7515, !7496, !7516}
!7516 = !DILocation(line: 2044, column: 5, scope: !7497)
!7517 = !DILocation(line: 2046, column: 3, scope: !7432)
!7518 = !DILocation(line: 2047, column: 10, scope: !7432)
!7519 = !DILocation(line: 2047, column: 3, scope: !7432)
!7520 = !DILocation(line: 2048, column: 1, scope: !7432)
!7521 = distinct !DISubprogram(name: "record_indep_loop", scope: !3, file: !3, line: 1996, type: !7522, scopeLine: 1997, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7522 = !DISubroutineType(types: !7523)
!7523 = !{null, !1916, !2848, !1490}
!7524 = !DILocalVariable(name: "loop", arg: 1, scope: !7521, file: !3, line: 1996, type: !1916)
!7525 = !DILocation(line: 1996, column: 33, scope: !7521)
!7526 = !DILocalVariable(name: "ref", arg: 2, scope: !7521, file: !3, line: 1996, type: !2848)
!7527 = !DILocation(line: 1996, column: 49, scope: !7521)
!7528 = !DILocalVariable(name: "indep", arg: 3, scope: !7521, file: !3, line: 1996, type: !1490)
!7529 = !DILocation(line: 1996, column: 59, scope: !7521)
!7530 = !DILocation(line: 1998, column: 7, scope: !7531)
!7531 = distinct !DILexicalBlock(scope: !7521, file: !3, line: 1998, column: 7)
!7532 = !DILocation(line: 1998, column: 7, scope: !7521)
!7533 = !DILocation(line: 1999, column: 21, scope: !7531)
!7534 = !DILocation(line: 1999, column: 26, scope: !7531)
!7535 = !DILocation(line: 1999, column: 38, scope: !7531)
!7536 = !DILocation(line: 1999, column: 44, scope: !7531)
!7537 = !DILocation(line: 1999, column: 5, scope: !7531)
!7538 = !DILocation(line: 2001, column: 21, scope: !7531)
!7539 = !DILocation(line: 2001, column: 26, scope: !7531)
!7540 = !DILocation(line: 2001, column: 36, scope: !7531)
!7541 = !DILocation(line: 2001, column: 42, scope: !7531)
!7542 = !DILocation(line: 2001, column: 5, scope: !7531)
!7543 = !DILocation(line: 2002, column: 1, scope: !7521)
!7544 = distinct !DISubprogram(name: "get_vop_accesses", scope: !3, file: !3, line: 1494, type: !7545, scopeLine: 1495, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7545 = !DISubroutineType(types: !7546)
!7546 = !{!2301, !2218, !7}
!7547 = !DILocalVariable(name: "vop_to_refs", arg: 1, scope: !7544, file: !3, line: 1494, type: !2218)
!7548 = !DILocation(line: 1494, column: 26, scope: !7544)
!7549 = !DILocalVariable(name: "vop", arg: 2, scope: !7544, file: !3, line: 1494, type: !7)
!7550 = !DILocation(line: 1494, column: 48, scope: !7544)
!7551 = !DILocalVariable(name: "vtoe", scope: !7544, file: !3, line: 1496, type: !4184)
!7552 = !DILocation(line: 1496, column: 33, scope: !7544)
!7553 = !DILocation(line: 1497, column: 53, scope: !7544)
!7554 = !DILocation(line: 1497, column: 66, scope: !7544)
!7555 = !DILocation(line: 1497, column: 72, scope: !7544)
!7556 = !DILocation(line: 1497, column: 32, scope: !7544)
!7557 = !DILocation(line: 1497, column: 5, scope: !7544)
!7558 = !DILocation(line: 1498, column: 10, scope: !7544)
!7559 = !DILocation(line: 1498, column: 16, scope: !7544)
!7560 = !DILocation(line: 1498, column: 3, scope: !7544)
!7561 = distinct !DISubprogram(name: "get_vop_stores", scope: !3, file: !3, line: 1505, type: !7545, scopeLine: 1506, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7562 = !DILocalVariable(name: "vop_to_refs", arg: 1, scope: !7561, file: !3, line: 1505, type: !2218)
!7563 = !DILocation(line: 1505, column: 24, scope: !7561)
!7564 = !DILocalVariable(name: "vop", arg: 2, scope: !7561, file: !3, line: 1505, type: !7)
!7565 = !DILocation(line: 1505, column: 46, scope: !7561)
!7566 = !DILocalVariable(name: "vtoe", scope: !7561, file: !3, line: 1507, type: !4184)
!7567 = !DILocation(line: 1507, column: 33, scope: !7561)
!7568 = !DILocation(line: 1508, column: 53, scope: !7561)
!7569 = !DILocation(line: 1508, column: 66, scope: !7561)
!7570 = !DILocation(line: 1508, column: 72, scope: !7561)
!7571 = !DILocation(line: 1508, column: 32, scope: !7561)
!7572 = !DILocation(line: 1508, column: 5, scope: !7561)
!7573 = !DILocation(line: 1509, column: 10, scope: !7561)
!7574 = !DILocation(line: 1509, column: 16, scope: !7561)
!7575 = !DILocation(line: 1509, column: 3, scope: !7561)
!7576 = distinct !DISubprogram(name: "refs_independent_p", scope: !3, file: !3, line: 1961, type: !7577, scopeLine: 1962, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7577 = !DISubroutineType(types: !7578)
!7578 = !{!1490, !2848, !2848}
!7579 = !DILocalVariable(name: "ref1", arg: 1, scope: !7576, file: !3, line: 1961, type: !2848)
!7580 = !DILocation(line: 1961, column: 31, scope: !7576)
!7581 = !DILocalVariable(name: "ref2", arg: 2, scope: !7576, file: !3, line: 1961, type: !2848)
!7582 = !DILocation(line: 1961, column: 47, scope: !7576)
!7583 = !DILocation(line: 1963, column: 7, scope: !7584)
!7584 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 1963, column: 7)
!7585 = !DILocation(line: 1963, column: 15, scope: !7584)
!7586 = !DILocation(line: 1963, column: 12, scope: !7584)
!7587 = !DILocation(line: 1964, column: 7, scope: !7584)
!7588 = !DILocation(line: 1964, column: 24, scope: !7584)
!7589 = !DILocation(line: 1964, column: 30, scope: !7584)
!7590 = !DILocation(line: 1964, column: 41, scope: !7584)
!7591 = !DILocation(line: 1964, column: 47, scope: !7584)
!7592 = !DILocation(line: 1964, column: 10, scope: !7584)
!7593 = !DILocation(line: 1963, column: 7, scope: !7576)
!7594 = !DILocation(line: 1965, column: 5, scope: !7584)
!7595 = !DILocation(line: 1966, column: 21, scope: !7596)
!7596 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 1966, column: 7)
!7597 = !DILocation(line: 1966, column: 27, scope: !7596)
!7598 = !DILocation(line: 1966, column: 36, scope: !7596)
!7599 = !DILocation(line: 1966, column: 42, scope: !7596)
!7600 = !DILocation(line: 1966, column: 7, scope: !7596)
!7601 = !DILocation(line: 1966, column: 7, scope: !7576)
!7602 = !DILocation(line: 1967, column: 5, scope: !7596)
!7603 = !DILocation(line: 1969, column: 7, scope: !7604)
!7604 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 1969, column: 7)
!7605 = !DILocation(line: 1969, column: 17, scope: !7604)
!7606 = !DILocation(line: 1969, column: 21, scope: !7604)
!7607 = !DILocation(line: 1969, column: 32, scope: !7604)
!7608 = !DILocation(line: 1969, column: 7, scope: !7576)
!7609 = !DILocation(line: 1970, column: 14, scope: !7604)
!7610 = !DILocation(line: 1971, column: 7, scope: !7604)
!7611 = !DILocation(line: 1971, column: 13, scope: !7604)
!7612 = !DILocation(line: 1971, column: 17, scope: !7604)
!7613 = !DILocation(line: 1971, column: 23, scope: !7604)
!7614 = !DILocation(line: 1970, column: 5, scope: !7604)
!7615 = !DILocation(line: 1973, column: 29, scope: !7616)
!7616 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 1973, column: 7)
!7617 = !DILocation(line: 1973, column: 35, scope: !7616)
!7618 = !DILocation(line: 1973, column: 40, scope: !7616)
!7619 = !DILocation(line: 1973, column: 46, scope: !7616)
!7620 = !DILocation(line: 1973, column: 7, scope: !7616)
!7621 = !DILocation(line: 1973, column: 7, scope: !7576)
!7622 = !DILocation(line: 1976, column: 23, scope: !7623)
!7623 = distinct !DILexicalBlock(scope: !7616, file: !3, line: 1975, column: 5)
!7624 = !DILocation(line: 1976, column: 29, scope: !7623)
!7625 = !DILocation(line: 1976, column: 38, scope: !7623)
!7626 = !DILocation(line: 1976, column: 44, scope: !7623)
!7627 = !DILocation(line: 1976, column: 7, scope: !7623)
!7628 = !DILocation(line: 1977, column: 23, scope: !7623)
!7629 = !DILocation(line: 1977, column: 29, scope: !7623)
!7630 = !DILocation(line: 1977, column: 38, scope: !7623)
!7631 = !DILocation(line: 1977, column: 44, scope: !7623)
!7632 = !DILocation(line: 1977, column: 7, scope: !7623)
!7633 = !DILocation(line: 1978, column: 11, scope: !7634)
!7634 = distinct !DILexicalBlock(scope: !7623, file: !3, line: 1978, column: 11)
!7635 = !DILocation(line: 1978, column: 21, scope: !7634)
!7636 = !DILocation(line: 1978, column: 25, scope: !7634)
!7637 = !DILocation(line: 1978, column: 36, scope: !7634)
!7638 = !DILocation(line: 1978, column: 11, scope: !7623)
!7639 = !DILocation(line: 1979, column: 11, scope: !7634)
!7640 = !DILocation(line: 1979, column: 2, scope: !7634)
!7641 = !DILocation(line: 1980, column: 7, scope: !7623)
!7642 = !DILocation(line: 1984, column: 23, scope: !7643)
!7643 = distinct !DILexicalBlock(scope: !7616, file: !3, line: 1983, column: 5)
!7644 = !DILocation(line: 1984, column: 29, scope: !7643)
!7645 = !DILocation(line: 1984, column: 40, scope: !7643)
!7646 = !DILocation(line: 1984, column: 46, scope: !7643)
!7647 = !DILocation(line: 1984, column: 7, scope: !7643)
!7648 = !DILocation(line: 1985, column: 23, scope: !7643)
!7649 = !DILocation(line: 1985, column: 29, scope: !7643)
!7650 = !DILocation(line: 1985, column: 40, scope: !7643)
!7651 = !DILocation(line: 1985, column: 46, scope: !7643)
!7652 = !DILocation(line: 1985, column: 7, scope: !7643)
!7653 = !DILocation(line: 1986, column: 11, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !7643, file: !3, line: 1986, column: 11)
!7655 = !DILocation(line: 1986, column: 21, scope: !7654)
!7656 = !DILocation(line: 1986, column: 25, scope: !7654)
!7657 = !DILocation(line: 1986, column: 36, scope: !7654)
!7658 = !DILocation(line: 1986, column: 11, scope: !7643)
!7659 = !DILocation(line: 1987, column: 11, scope: !7654)
!7660 = !DILocation(line: 1987, column: 2, scope: !7654)
!7661 = !DILocation(line: 1988, column: 7, scope: !7643)
!7662 = !DILocation(line: 1990, column: 1, scope: !7576)
!7663 = distinct !DISubprogram(name: "mem_refs_may_alias_p", scope: !3, file: !3, line: 1635, type: !7664, scopeLine: 1636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7664 = !DISubroutineType(types: !7665)
!7665 = !{!1490, !1370, !1370, !7666}
!7666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2304, size: 64)
!7667 = !DILocalVariable(name: "mem1", arg: 1, scope: !7663, file: !3, line: 1635, type: !1370)
!7668 = !DILocation(line: 1635, column: 28, scope: !7663)
!7669 = !DILocalVariable(name: "mem2", arg: 2, scope: !7663, file: !3, line: 1635, type: !1370)
!7670 = !DILocation(line: 1635, column: 39, scope: !7663)
!7671 = !DILocalVariable(name: "ttae_cache", arg: 3, scope: !7663, file: !3, line: 1635, type: !7666)
!7672 = !DILocation(line: 1635, column: 68, scope: !7663)
!7673 = !DILocalVariable(name: "size1", scope: !7663, file: !3, line: 1640, type: !1419)
!7674 = !DILocation(line: 1640, column: 14, scope: !7663)
!7675 = !DILocalVariable(name: "size2", scope: !7663, file: !3, line: 1640, type: !1419)
!7676 = !DILocation(line: 1640, column: 21, scope: !7663)
!7677 = !DILocalVariable(name: "off1", scope: !7663, file: !3, line: 1641, type: !7678)
!7678 = !DIDerivedType(tag: DW_TAG_typedef, name: "aff_tree", file: !7679, line: 59, baseType: !7680)
!7679 = !DIFile(filename: "./tree-affine.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "affine_tree_combination", file: !7679, line: 36, size: 1856, elements: !7681)
!7681 = !{!7682, !7683, !7684, !7685, !7693}
!7682 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !7680, file: !7679, line: 39, baseType: !1370, size: 64)
!7683 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !7680, file: !7679, line: 42, baseType: !1419, size: 128, offset: 64)
!7684 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !7680, file: !7679, line: 45, baseType: !7, size: 32, offset: 192)
!7685 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !7680, file: !7679, line: 53, baseType: !7686, size: 1536, offset: 256)
!7686 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7687, size: 1536, elements: !7691)
!7687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "aff_comb_elt", file: !7679, line: 27, size: 192, elements: !7688)
!7688 = !{!7689, !7690}
!7689 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !7687, file: !7679, line: 30, baseType: !1370, size: 64)
!7690 = !DIDerivedType(tag: DW_TAG_member, name: "coef", scope: !7687, file: !7679, line: 33, baseType: !1419, size: 128, offset: 64)
!7691 = !{!7692}
!7692 = !DISubrange(count: 8)
!7693 = !DIDerivedType(tag: DW_TAG_member, name: "rest", scope: !7680, file: !7679, line: 58, baseType: !1370, size: 64, offset: 1792)
!7694 = !DILocation(line: 1641, column: 12, scope: !7663)
!7695 = !DILocalVariable(name: "off2", scope: !7663, file: !3, line: 1641, type: !7678)
!7696 = !DILocation(line: 1641, column: 18, scope: !7663)
!7697 = !DILocation(line: 1644, column: 26, scope: !7698)
!7698 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 1644, column: 7)
!7699 = !DILocation(line: 1644, column: 32, scope: !7698)
!7700 = !DILocation(line: 1644, column: 8, scope: !7698)
!7701 = !DILocation(line: 1644, column: 7, scope: !7663)
!7702 = !DILocation(line: 1645, column: 5, scope: !7698)
!7703 = !DILocation(line: 1649, column: 7, scope: !7704)
!7704 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 1649, column: 7)
!7705 = !DILocation(line: 1649, column: 16, scope: !7704)
!7706 = !DILocation(line: 1649, column: 7, scope: !7663)
!7707 = !DILocation(line: 1650, column: 5, scope: !7704)
!7708 = !DILocation(line: 1652, column: 28, scope: !7663)
!7709 = !DILocation(line: 1652, column: 3, scope: !7663)
!7710 = !DILocation(line: 1653, column: 28, scope: !7663)
!7711 = !DILocation(line: 1653, column: 3, scope: !7663)
!7712 = !DILocation(line: 1654, column: 34, scope: !7663)
!7713 = !DILocation(line: 1654, column: 3, scope: !7663)
!7714 = !DILocation(line: 1655, column: 34, scope: !7663)
!7715 = !DILocation(line: 1655, column: 3, scope: !7663)
!7716 = !DILocation(line: 1656, column: 33, scope: !7663)
!7717 = !DILocation(line: 1656, column: 3, scope: !7663)
!7718 = !DILocation(line: 1657, column: 3, scope: !7663)
!7719 = !DILocation(line: 1659, column: 7, scope: !7720)
!7720 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 1659, column: 7)
!7721 = !DILocation(line: 1659, column: 7, scope: !7663)
!7722 = !DILocation(line: 1660, column: 5, scope: !7720)
!7723 = !DILocation(line: 1662, column: 3, scope: !7663)
!7724 = !DILocation(line: 1663, column: 1, scope: !7663)
!7725 = distinct !DISubprogram(name: "shwi_to_double_int", scope: !1420, file: !1420, line: 72, type: !7726, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7726 = !DISubroutineType(types: !7727)
!7727 = !{!1419, !1426}
!7728 = !DILocalVariable(name: "cst", arg: 1, scope: !7725, file: !1420, line: 72, type: !1426)
!7729 = !DILocation(line: 72, column: 35, scope: !7725)
!7730 = !DILocalVariable(name: "r", scope: !7725, file: !1420, line: 74, type: !1419)
!7731 = !DILocation(line: 74, column: 14, scope: !7725)
!7732 = !DILocation(line: 76, column: 36, scope: !7725)
!7733 = !DILocation(line: 76, column: 5, scope: !7725)
!7734 = !DILocation(line: 76, column: 9, scope: !7725)
!7735 = !DILocation(line: 77, column: 12, scope: !7725)
!7736 = !DILocation(line: 77, column: 16, scope: !7725)
!7737 = !DILocation(line: 77, column: 5, scope: !7725)
!7738 = !DILocation(line: 77, column: 10, scope: !7725)
!7739 = !DILocation(line: 79, column: 3, scope: !7725)
!7740 = distinct !DISubprogram(name: "cannot_overlap_p", scope: !3, file: !3, line: 1608, type: !7741, scopeLine: 1609, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7741 = !DISubroutineType(types: !7742)
!7742 = !{!1490, !7743, !1419, !1419}
!7743 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7678, size: 64)
!7744 = !DILocalVariable(name: "diff", arg: 1, scope: !7740, file: !3, line: 1608, type: !7743)
!7745 = !DILocation(line: 1608, column: 29, scope: !7740)
!7746 = !DILocalVariable(name: "size1", arg: 2, scope: !7740, file: !3, line: 1608, type: !1419)
!7747 = !DILocation(line: 1608, column: 46, scope: !7740)
!7748 = !DILocalVariable(name: "size2", arg: 3, scope: !7740, file: !3, line: 1608, type: !1419)
!7749 = !DILocation(line: 1608, column: 64, scope: !7740)
!7750 = !DILocalVariable(name: "d", scope: !7740, file: !3, line: 1610, type: !1419)
!7751 = !DILocation(line: 1610, column: 14, scope: !7740)
!7752 = !DILocalVariable(name: "bound", scope: !7740, file: !3, line: 1610, type: !1419)
!7753 = !DILocation(line: 1610, column: 17, scope: !7740)
!7754 = !DILocation(line: 1613, column: 7, scope: !7755)
!7755 = distinct !DILexicalBlock(scope: !7740, file: !3, line: 1613, column: 7)
!7756 = !DILocation(line: 1613, column: 13, scope: !7755)
!7757 = !DILocation(line: 1613, column: 15, scope: !7755)
!7758 = !DILocation(line: 1613, column: 7, scope: !7740)
!7759 = !DILocation(line: 1614, column: 5, scope: !7755)
!7760 = !DILocation(line: 1616, column: 7, scope: !7740)
!7761 = !DILocation(line: 1616, column: 13, scope: !7740)
!7762 = !DILocation(line: 1617, column: 7, scope: !7763)
!7763 = distinct !DILexicalBlock(scope: !7740, file: !3, line: 1617, column: 7)
!7764 = !DILocation(line: 1617, column: 7, scope: !7740)
!7765 = !DILocation(line: 1621, column: 57, scope: !7766)
!7766 = distinct !DILexicalBlock(scope: !7763, file: !3, line: 1618, column: 5)
!7767 = !DILocation(line: 1621, column: 34, scope: !7766)
!7768 = !DILocation(line: 1621, column: 15, scope: !7766)
!7769 = !DILocation(line: 1622, column: 14, scope: !7766)
!7770 = !DILocation(line: 1622, column: 7, scope: !7766)
!7771 = !DILocation(line: 1627, column: 14, scope: !7772)
!7772 = distinct !DILexicalBlock(scope: !7763, file: !3, line: 1625, column: 5)
!7773 = !DILocation(line: 1627, column: 41, scope: !7772)
!7774 = !DILocation(line: 1627, column: 7, scope: !7772)
!7775 = !DILocation(line: 1629, column: 1, scope: !7740)
!7776 = distinct !DISubprogram(name: "gimple_references_memory_p", scope: !397, file: !397, line: 1499, type: !3716, scopeLine: 1500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7777 = !DILocalVariable(name: "stmt", arg: 1, scope: !7776, file: !397, line: 1499, type: !1701)
!7778 = !DILocation(line: 1499, column: 36, scope: !7776)
!7779 = !DILocation(line: 1501, column: 30, scope: !7776)
!7780 = !DILocation(line: 1501, column: 10, scope: !7776)
!7781 = !DILocation(line: 1501, column: 36, scope: !7776)
!7782 = !DILocation(line: 1501, column: 52, scope: !7776)
!7783 = !DILocation(line: 1501, column: 39, scope: !7776)
!7784 = !DILocation(line: 0, scope: !7776)
!7785 = !DILocation(line: 1501, column: 3, scope: !7776)
!7786 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !397, file: !397, line: 1954, type: !3117, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7787 = !DILocalVariable(name: "gs", arg: 1, scope: !7786, file: !397, line: 1954, type: !3109)
!7788 = !DILocation(line: 1954, column: 34, scope: !7786)
!7789 = !DILocalVariable(name: "addr", scope: !7786, file: !397, line: 1956, type: !1370)
!7790 = !DILocation(line: 1956, column: 8, scope: !7786)
!7791 = !DILocation(line: 1956, column: 31, scope: !7786)
!7792 = !DILocation(line: 1956, column: 15, scope: !7786)
!7793 = !DILocation(line: 1957, column: 7, scope: !7794)
!7794 = distinct !DILexicalBlock(scope: !7786, file: !397, line: 1957, column: 7)
!7795 = !DILocation(line: 1957, column: 24, scope: !7794)
!7796 = !DILocation(line: 1957, column: 7, scope: !7786)
!7797 = !DILocation(line: 1958, column: 12, scope: !7794)
!7798 = !DILocation(line: 1958, column: 5, scope: !7794)
!7799 = !DILocation(line: 1959, column: 3, scope: !7786)
!7800 = !DILocation(line: 1960, column: 1, scope: !7786)
!7801 = distinct !DISubprogram(name: "gimple_call_fn", scope: !397, file: !397, line: 1911, type: !3117, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7802 = !DILocalVariable(name: "gs", arg: 1, scope: !7801, file: !397, line: 1911, type: !3109)
!7803 = !DILocation(line: 1911, column: 30, scope: !7801)
!7804 = !DILocation(line: 1914, column: 21, scope: !7801)
!7805 = !DILocation(line: 1914, column: 10, scope: !7801)
!7806 = !DILocation(line: 1914, column: 3, scope: !7801)
!7807 = distinct !DISubprogram(name: "set_level", scope: !3, file: !3, line: 716, type: !7808, scopeLine: 717, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7808 = !DISubroutineType(types: !7809)
!7809 = !{null, !1701, !1916, !1916}
!7810 = !DILocalVariable(name: "stmt", arg: 1, scope: !7807, file: !3, line: 716, type: !1701)
!7811 = !DILocation(line: 716, column: 19, scope: !7807)
!7812 = !DILocalVariable(name: "orig_loop", arg: 2, scope: !7807, file: !3, line: 716, type: !1916)
!7813 = !DILocation(line: 716, column: 38, scope: !7807)
!7814 = !DILocalVariable(name: "level", arg: 3, scope: !7807, file: !3, line: 716, type: !1916)
!7815 = !DILocation(line: 716, column: 62, scope: !7807)
!7816 = !DILocalVariable(name: "stmt_loop", scope: !7807, file: !3, line: 718, type: !1916)
!7817 = !DILocation(line: 718, column: 16, scope: !7807)
!7818 = !DILocation(line: 718, column: 39, scope: !7807)
!7819 = !DILocation(line: 718, column: 28, scope: !7807)
!7820 = !DILocation(line: 718, column: 46, scope: !7807)
!7821 = !DILocalVariable(name: "dep", scope: !7807, file: !3, line: 719, type: !2882)
!7822 = !DILocation(line: 719, column: 18, scope: !7807)
!7823 = !DILocalVariable(name: "lim_data", scope: !7807, file: !3, line: 720, type: !2874)
!7824 = !DILocation(line: 720, column: 24, scope: !7807)
!7825 = !DILocation(line: 722, column: 33, scope: !7807)
!7826 = !DILocation(line: 722, column: 44, scope: !7807)
!7827 = !DILocation(line: 722, column: 15, scope: !7807)
!7828 = !DILocation(line: 722, column: 13, scope: !7807)
!7829 = !DILocation(line: 723, column: 28, scope: !7807)
!7830 = !DILocation(line: 723, column: 14, scope: !7807)
!7831 = !DILocation(line: 723, column: 12, scope: !7807)
!7832 = !DILocation(line: 724, column: 7, scope: !7833)
!7833 = distinct !DILexicalBlock(scope: !7807, file: !3, line: 724, column: 7)
!7834 = !DILocation(line: 724, column: 16, scope: !7833)
!7835 = !DILocation(line: 724, column: 24, scope: !7833)
!7836 = !DILocation(line: 724, column: 27, scope: !7833)
!7837 = !DILocation(line: 724, column: 37, scope: !7833)
!7838 = !DILocation(line: 724, column: 46, scope: !7833)
!7839 = !DILocation(line: 724, column: 7, scope: !7807)
!7840 = !DILocation(line: 725, column: 35, scope: !7833)
!7841 = !DILocation(line: 726, column: 19, scope: !7833)
!7842 = !DILocation(line: 726, column: 29, scope: !7833)
!7843 = !DILocation(line: 726, column: 7, scope: !7833)
!7844 = !DILocation(line: 725, column: 17, scope: !7833)
!7845 = !DILocation(line: 725, column: 15, scope: !7833)
!7846 = !DILocation(line: 725, column: 5, scope: !7833)
!7847 = !DILocation(line: 727, column: 27, scope: !7848)
!7848 = distinct !DILexicalBlock(scope: !7807, file: !3, line: 727, column: 7)
!7849 = !DILocation(line: 727, column: 38, scope: !7848)
!7850 = !DILocation(line: 727, column: 7, scope: !7848)
!7851 = !DILocation(line: 727, column: 7, scope: !7807)
!7852 = !DILocation(line: 728, column: 5, scope: !7848)
!7853 = !DILocation(line: 730, column: 3, scope: !7807)
!7854 = !DILocation(line: 733, column: 24, scope: !7807)
!7855 = !DILocation(line: 733, column: 3, scope: !7807)
!7856 = !DILocation(line: 733, column: 13, scope: !7807)
!7857 = !DILocation(line: 733, column: 22, scope: !7807)
!7858 = !DILocation(line: 734, column: 14, scope: !7859)
!7859 = distinct !DILexicalBlock(scope: !7807, file: !3, line: 734, column: 3)
!7860 = !DILocation(line: 734, column: 24, scope: !7859)
!7861 = !DILocation(line: 734, column: 12, scope: !7859)
!7862 = !DILocation(line: 734, column: 8, scope: !7859)
!7863 = !DILocation(line: 734, column: 33, scope: !7864)
!7864 = distinct !DILexicalBlock(scope: !7859, file: !3, line: 734, column: 3)
!7865 = !DILocation(line: 734, column: 3, scope: !7859)
!7866 = !DILocation(line: 735, column: 16, scope: !7864)
!7867 = !DILocation(line: 735, column: 21, scope: !7864)
!7868 = !DILocation(line: 735, column: 27, scope: !7864)
!7869 = !DILocation(line: 735, column: 38, scope: !7864)
!7870 = !DILocation(line: 735, column: 5, scope: !7864)
!7871 = !DILocation(line: 734, column: 44, scope: !7864)
!7872 = !DILocation(line: 734, column: 49, scope: !7864)
!7873 = !DILocation(line: 734, column: 42, scope: !7864)
!7874 = !DILocation(line: 734, column: 3, scope: !7864)
!7875 = distinct !{!7875, !7865, !7876}
!7876 = !DILocation(line: 735, column: 43, scope: !7859)
!7877 = !DILocation(line: 736, column: 1, scope: !7807)
!7878 = distinct !DISubprogram(name: "store_motion_loop", scope: !3, file: !3, line: 2153, type: !7879, scopeLine: 2154, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7879 = !DISubroutineType(types: !7880)
!7880 = !{null, !1916, !2301}
!7881 = !DILocalVariable(name: "loop", arg: 1, scope: !7878, file: !3, line: 2153, type: !1916)
!7882 = !DILocation(line: 2153, column: 33, scope: !7878)
!7883 = !DILocalVariable(name: "sm_executed", arg: 2, scope: !7878, file: !3, line: 2153, type: !2301)
!7884 = !DILocation(line: 2153, column: 46, scope: !7878)
!7885 = !DILocalVariable(name: "exits", scope: !7878, file: !3, line: 2155, type: !7886)
!7886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7887, size: 64)
!7887 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !343, line: 152, baseType: !7888)
!7888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !343, line: 152, size: 128, elements: !7889)
!7889 = !{!7890}
!7890 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !7888, file: !343, line: 152, baseType: !1674, size: 128)
!7891 = !DILocation(line: 2155, column: 21, scope: !7878)
!7892 = !DILocation(line: 2155, column: 50, scope: !7878)
!7893 = !DILocation(line: 2155, column: 29, scope: !7878)
!7894 = !DILocalVariable(name: "subloop", scope: !7878, file: !3, line: 2156, type: !1916)
!7895 = !DILocation(line: 2156, column: 16, scope: !7878)
!7896 = !DILocalVariable(name: "sm_in_loop", scope: !7878, file: !3, line: 2157, type: !2301)
!7897 = !DILocation(line: 2157, column: 10, scope: !7878)
!7898 = !DILocation(line: 2157, column: 23, scope: !7878)
!7899 = !DILocation(line: 2159, column: 29, scope: !7900)
!7900 = distinct !DILexicalBlock(scope: !7878, file: !3, line: 2159, column: 7)
!7901 = !DILocation(line: 2159, column: 35, scope: !7900)
!7902 = !DILocation(line: 2159, column: 7, scope: !7900)
!7903 = !DILocation(line: 2159, column: 7, scope: !7878)
!7904 = !DILocation(line: 2161, column: 25, scope: !7905)
!7905 = distinct !DILexicalBlock(scope: !7900, file: !3, line: 2160, column: 5)
!7906 = !DILocation(line: 2161, column: 31, scope: !7905)
!7907 = !DILocation(line: 2161, column: 44, scope: !7905)
!7908 = !DILocation(line: 2161, column: 7, scope: !7905)
!7909 = !DILocation(line: 2162, column: 32, scope: !7905)
!7910 = !DILocation(line: 2162, column: 38, scope: !7905)
!7911 = !DILocation(line: 2162, column: 50, scope: !7905)
!7912 = !DILocation(line: 2162, column: 7, scope: !7905)
!7913 = !DILocation(line: 2163, column: 5, scope: !7905)
!7914 = !DILocation(line: 2164, column: 3, scope: !7878)
!7915 = !DILocation(line: 2166, column: 20, scope: !7878)
!7916 = !DILocation(line: 2166, column: 33, scope: !7878)
!7917 = !DILocation(line: 2166, column: 3, scope: !7878)
!7918 = !DILocation(line: 2167, column: 18, scope: !7919)
!7919 = distinct !DILexicalBlock(scope: !7878, file: !3, line: 2167, column: 3)
!7920 = !DILocation(line: 2167, column: 24, scope: !7919)
!7921 = !DILocation(line: 2167, column: 16, scope: !7919)
!7922 = !DILocation(line: 2167, column: 8, scope: !7919)
!7923 = !DILocation(line: 2167, column: 31, scope: !7924)
!7924 = distinct !DILexicalBlock(scope: !7919, file: !3, line: 2167, column: 3)
!7925 = !DILocation(line: 2167, column: 39, scope: !7924)
!7926 = !DILocation(line: 2167, column: 3, scope: !7919)
!7927 = !DILocation(line: 2168, column: 24, scope: !7924)
!7928 = !DILocation(line: 2168, column: 33, scope: !7924)
!7929 = !DILocation(line: 2168, column: 5, scope: !7924)
!7930 = !DILocation(line: 2167, column: 58, scope: !7924)
!7931 = !DILocation(line: 2167, column: 67, scope: !7924)
!7932 = !DILocation(line: 2167, column: 56, scope: !7924)
!7933 = !DILocation(line: 2167, column: 3, scope: !7924)
!7934 = distinct !{!7934, !7926, !7935}
!7935 = !DILocation(line: 2168, column: 44, scope: !7919)
!7936 = !DILocation(line: 2169, column: 26, scope: !7878)
!7937 = !DILocation(line: 2169, column: 39, scope: !7878)
!7938 = !DILocation(line: 2169, column: 3, scope: !7878)
!7939 = !DILocation(line: 2170, column: 3, scope: !7878)
!7940 = !DILocation(line: 2171, column: 1, scope: !7878)
!7941 = distinct !DISubprogram(name: "loop_suitable_for_sm", scope: !3, file: !3, line: 2135, type: !7942, scopeLine: 2137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7942 = !DISubroutineType(types: !7943)
!7943 = !{!1490, !1916, !7886}
!7944 = !DILocalVariable(name: "loop", arg: 1, scope: !7941, file: !3, line: 2135, type: !1916)
!7945 = !DILocation(line: 2135, column: 36, scope: !7941)
!7946 = !DILocalVariable(name: "exits", arg: 2, scope: !7941, file: !3, line: 2136, type: !7886)
!7947 = !DILocation(line: 2136, column: 27, scope: !7941)
!7948 = !DILocalVariable(name: "i", scope: !7941, file: !3, line: 2138, type: !7)
!7949 = !DILocation(line: 2138, column: 12, scope: !7941)
!7950 = !DILocalVariable(name: "ex", scope: !7941, file: !3, line: 2139, type: !1681)
!7951 = !DILocation(line: 2139, column: 8, scope: !7941)
!7952 = !DILocation(line: 2141, column: 10, scope: !7953)
!7953 = distinct !DILexicalBlock(scope: !7941, file: !3, line: 2141, column: 3)
!7954 = !DILocation(line: 2141, column: 8, scope: !7953)
!7955 = !DILocation(line: 2141, column: 15, scope: !7956)
!7956 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 2141, column: 3)
!7957 = !DILocation(line: 2141, column: 3, scope: !7953)
!7958 = !DILocation(line: 2142, column: 9, scope: !7959)
!7959 = distinct !DILexicalBlock(scope: !7956, file: !3, line: 2142, column: 9)
!7960 = !DILocation(line: 2142, column: 13, scope: !7959)
!7961 = !DILocation(line: 2142, column: 19, scope: !7959)
!7962 = !DILocation(line: 2142, column: 9, scope: !7956)
!7963 = !DILocation(line: 2143, column: 7, scope: !7959)
!7964 = !DILocation(line: 2142, column: 21, scope: !7959)
!7965 = !DILocation(line: 2141, column: 50, scope: !7956)
!7966 = !DILocation(line: 2141, column: 3, scope: !7956)
!7967 = distinct !{!7967, !7957, !7968}
!7968 = !DILocation(line: 2143, column: 14, scope: !7953)
!7969 = !DILocation(line: 2145, column: 3, scope: !7941)
!7970 = !DILocation(line: 2146, column: 1, scope: !7941)
!7971 = distinct !DISubprogram(name: "find_refs_for_sm", scope: !3, file: !3, line: 2114, type: !7972, scopeLine: 2115, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!7972 = !DISubroutineType(types: !7973)
!7973 = !{null, !1916, !2301, !2301}
!7974 = !DILocalVariable(name: "loop", arg: 1, scope: !7971, file: !3, line: 2114, type: !1916)
!7975 = !DILocation(line: 2114, column: 32, scope: !7971)
!7976 = !DILocalVariable(name: "sm_executed", arg: 2, scope: !7971, file: !3, line: 2114, type: !2301)
!7977 = !DILocation(line: 2114, column: 45, scope: !7971)
!7978 = !DILocalVariable(name: "refs_to_sm", arg: 3, scope: !7971, file: !3, line: 2114, type: !2301)
!7979 = !DILocation(line: 2114, column: 65, scope: !7971)
!7980 = !DILocalVariable(name: "refs", scope: !7971, file: !3, line: 2116, type: !2301)
!7981 = !DILocation(line: 2116, column: 10, scope: !7971)
!7982 = !DILocation(line: 2116, column: 17, scope: !7971)
!7983 = !DILocalVariable(name: "i", scope: !7971, file: !3, line: 2118, type: !7)
!7984 = !DILocation(line: 2118, column: 12, scope: !7971)
!7985 = !DILocalVariable(name: "bi", scope: !7971, file: !3, line: 2119, type: !5272)
!7986 = !DILocation(line: 2119, column: 19, scope: !7971)
!7987 = !DILocalVariable(name: "ref", scope: !7971, file: !3, line: 2120, type: !2848)
!7988 = !DILocation(line: 2120, column: 13, scope: !7971)
!7989 = !DILocation(line: 2122, column: 3, scope: !7990)
!7990 = distinct !DILexicalBlock(scope: !7971, file: !3, line: 2122, column: 3)
!7991 = !DILocation(line: 2122, column: 3, scope: !7992)
!7992 = distinct !DILexicalBlock(scope: !7990, file: !3, line: 2122, column: 3)
!7993 = !DILocation(line: 2124, column: 13, scope: !7994)
!7994 = distinct !DILexicalBlock(scope: !7992, file: !3, line: 2123, column: 5)
!7995 = !DILocation(line: 2124, column: 11, scope: !7994)
!7996 = !DILocation(line: 2125, column: 25, scope: !7997)
!7997 = distinct !DILexicalBlock(scope: !7994, file: !3, line: 2125, column: 11)
!7998 = !DILocation(line: 2125, column: 31, scope: !7997)
!7999 = !DILocation(line: 2125, column: 11, scope: !7997)
!8000 = !DILocation(line: 2125, column: 11, scope: !7994)
!8001 = !DILocation(line: 2126, column: 18, scope: !7997)
!8002 = !DILocation(line: 2126, column: 30, scope: !7997)
!8003 = !DILocation(line: 2126, column: 2, scope: !7997)
!8004 = !DILocation(line: 2127, column: 5, scope: !7994)
!8005 = distinct !{!8005, !7989, !8006}
!8006 = !DILocation(line: 2127, column: 5, scope: !7990)
!8007 = !DILocation(line: 2128, column: 1, scope: !7971)
!8008 = distinct !DISubprogram(name: "hoist_memory_references", scope: !3, file: !3, line: 1889, type: !8009, scopeLine: 1891, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8009 = !DISubroutineType(types: !8010)
!8010 = !{null, !1916, !2301, !7886}
!8011 = !DILocalVariable(name: "loop", arg: 1, scope: !8008, file: !3, line: 1889, type: !1916)
!8012 = !DILocation(line: 1889, column: 39, scope: !8008)
!8013 = !DILocalVariable(name: "mem_refs", arg: 2, scope: !8008, file: !3, line: 1889, type: !2301)
!8014 = !DILocation(line: 1889, column: 52, scope: !8008)
!8015 = !DILocalVariable(name: "exits", arg: 3, scope: !8008, file: !3, line: 1890, type: !7886)
!8016 = !DILocation(line: 1890, column: 23, scope: !8008)
!8017 = !DILocalVariable(name: "ref", scope: !8008, file: !3, line: 1892, type: !2848)
!8018 = !DILocation(line: 1892, column: 13, scope: !8008)
!8019 = !DILocalVariable(name: "i", scope: !8008, file: !3, line: 1893, type: !7)
!8020 = !DILocation(line: 1893, column: 13, scope: !8008)
!8021 = !DILocalVariable(name: "bi", scope: !8008, file: !3, line: 1894, type: !5272)
!8022 = !DILocation(line: 1894, column: 19, scope: !8008)
!8023 = !DILocation(line: 1896, column: 3, scope: !8024)
!8024 = distinct !DILexicalBlock(scope: !8008, file: !3, line: 1896, column: 3)
!8025 = !DILocation(line: 1896, column: 3, scope: !8026)
!8026 = distinct !DILexicalBlock(scope: !8024, file: !3, line: 1896, column: 3)
!8027 = !DILocation(line: 1898, column: 13, scope: !8028)
!8028 = distinct !DILexicalBlock(scope: !8026, file: !3, line: 1897, column: 5)
!8029 = !DILocation(line: 1898, column: 11, scope: !8028)
!8030 = !DILocation(line: 1899, column: 19, scope: !8028)
!8031 = !DILocation(line: 1899, column: 25, scope: !8028)
!8032 = !DILocation(line: 1899, column: 32, scope: !8028)
!8033 = !DILocation(line: 1899, column: 7, scope: !8028)
!8034 = !DILocation(line: 1900, column: 5, scope: !8028)
!8035 = distinct !{!8035, !8023, !8036}
!8036 = !DILocation(line: 1900, column: 5, scope: !8024)
!8037 = !DILocation(line: 1901, column: 1, scope: !8008)
!8038 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !343, file: !343, line: 152, type: !8039, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8039 = !DISubroutineType(types: !8040)
!8040 = !{null, !8041}
!8041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7886, size: 64)
!8042 = !DILocalVariable(name: "vec_", arg: 1, scope: !8038, file: !343, line: 152, type: !8041)
!8043 = !DILocation(line: 152, column: 1, scope: !8038)
!8044 = !DILocation(line: 152, column: 1, scope: !8045)
!8045 = distinct !DILexicalBlock(scope: !8038, file: !343, line: 152, column: 1)
!8046 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !343, file: !343, line: 150, type: !8047, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8047 = !DISubroutineType(types: !8048)
!8048 = !{!1467, !4040, !7, !3991}
!8049 = !DILocalVariable(name: "vec_", arg: 1, scope: !8046, file: !343, line: 150, type: !4040)
!8050 = !DILocation(line: 150, column: 1, scope: !8046)
!8051 = !DILocalVariable(name: "ix_", arg: 2, scope: !8046, file: !343, line: 150, type: !7)
!8052 = !DILocalVariable(name: "ptr", arg: 3, scope: !8046, file: !343, line: 150, type: !3991)
!8053 = !DILocation(line: 150, column: 1, scope: !8054)
!8054 = distinct !DILexicalBlock(scope: !8046, file: !343, line: 150, column: 1)
!8055 = !DILocation(line: 150, column: 1, scope: !8056)
!8056 = distinct !DILexicalBlock(scope: !8054, file: !343, line: 150, column: 1)
!8057 = !DILocation(line: 150, column: 1, scope: !8058)
!8058 = distinct !DILexicalBlock(scope: !8054, file: !343, line: 150, column: 1)
!8059 = distinct !DISubprogram(name: "can_sm_ref_p", scope: !3, file: !3, line: 2077, type: !7384, scopeLine: 2078, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8060 = !DILocalVariable(name: "loop", arg: 1, scope: !8059, file: !3, line: 2077, type: !1916)
!8061 = !DILocation(line: 2077, column: 28, scope: !8059)
!8062 = !DILocalVariable(name: "ref", arg: 2, scope: !8059, file: !3, line: 2077, type: !2848)
!8063 = !DILocation(line: 2077, column: 44, scope: !8059)
!8064 = !DILocalVariable(name: "base", scope: !8059, file: !3, line: 2079, type: !1370)
!8065 = !DILocation(line: 2079, column: 8, scope: !8059)
!8066 = !DILocation(line: 2082, column: 22, scope: !8067)
!8067 = distinct !DILexicalBlock(scope: !8059, file: !3, line: 2082, column: 7)
!8068 = !DILocation(line: 2082, column: 27, scope: !8067)
!8069 = !DILocation(line: 2082, column: 35, scope: !8067)
!8070 = !DILocation(line: 2082, column: 41, scope: !8067)
!8071 = !DILocation(line: 2082, column: 8, scope: !8067)
!8072 = !DILocation(line: 2082, column: 7, scope: !8059)
!8073 = !DILocation(line: 2083, column: 5, scope: !8067)
!8074 = !DILocation(line: 2086, column: 28, scope: !8075)
!8075 = distinct !DILexicalBlock(scope: !8059, file: !3, line: 2086, column: 7)
!8076 = !DILocation(line: 2086, column: 8, scope: !8075)
!8077 = !DILocation(line: 2087, column: 7, scope: !8075)
!8078 = !DILocation(line: 2087, column: 10, scope: !8075)
!8079 = !DILocation(line: 2088, column: 7, scope: !8075)
!8080 = !DILocation(line: 2088, column: 28, scope: !8075)
!8081 = !DILocation(line: 2088, column: 33, scope: !8075)
!8082 = !DILocation(line: 2088, column: 53, scope: !8075)
!8083 = !DILocation(line: 2088, column: 11, scope: !8075)
!8084 = !DILocation(line: 2086, column: 7, scope: !8059)
!8085 = !DILocation(line: 2089, column: 5, scope: !8075)
!8086 = !DILocation(line: 2095, column: 28, scope: !8059)
!8087 = !DILocation(line: 2095, column: 33, scope: !8059)
!8088 = !DILocation(line: 2095, column: 10, scope: !8059)
!8089 = !DILocation(line: 2095, column: 8, scope: !8059)
!8090 = !DILocation(line: 2096, column: 27, scope: !8091)
!8091 = distinct !DILexicalBlock(scope: !8059, file: !3, line: 2096, column: 7)
!8092 = !DILocation(line: 2096, column: 32, scope: !8091)
!8093 = !DILocation(line: 2096, column: 8, scope: !8091)
!8094 = !DILocation(line: 2097, column: 8, scope: !8091)
!8095 = !DILocation(line: 2097, column: 12, scope: !8091)
!8096 = !DILocation(line: 2097, column: 26, scope: !8091)
!8097 = !DILocation(line: 2097, column: 29, scope: !8091)
!8098 = !DILocation(line: 2098, column: 7, scope: !8091)
!8099 = !DILocation(line: 2098, column: 34, scope: !8091)
!8100 = !DILocation(line: 2098, column: 40, scope: !8091)
!8101 = !DILocation(line: 2098, column: 11, scope: !8091)
!8102 = !DILocation(line: 2096, column: 7, scope: !8059)
!8103 = !DILocation(line: 2099, column: 5, scope: !8091)
!8104 = !DILocation(line: 2103, column: 26, scope: !8105)
!8105 = distinct !DILexicalBlock(scope: !8059, file: !3, line: 2103, column: 7)
!8106 = !DILocation(line: 2103, column: 32, scope: !8105)
!8107 = !DILocation(line: 2103, column: 8, scope: !8105)
!8108 = !DILocation(line: 2103, column: 7, scope: !8059)
!8109 = !DILocation(line: 2104, column: 5, scope: !8105)
!8110 = !DILocation(line: 2106, column: 3, scope: !8059)
!8111 = !DILocation(line: 2107, column: 1, scope: !8059)
!8112 = distinct !DISubprogram(name: "may_move_till", scope: !3, file: !3, line: 1101, type: !2922, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8113 = !DILocalVariable(name: "ref", arg: 1, scope: !8112, file: !3, line: 1101, type: !1370)
!8114 = !DILocation(line: 1101, column: 21, scope: !8112)
!8115 = !DILocalVariable(name: "index", arg: 2, scope: !8112, file: !3, line: 1101, type: !1735)
!8116 = !DILocation(line: 1101, column: 32, scope: !8112)
!8117 = !DILocalVariable(name: "data", arg: 3, scope: !8112, file: !3, line: 1101, type: !1654)
!8118 = !DILocation(line: 1101, column: 45, scope: !8112)
!8119 = !DILocalVariable(name: "loop", scope: !8112, file: !3, line: 1103, type: !1916)
!8120 = !DILocation(line: 1103, column: 16, scope: !8112)
!8121 = !DILocation(line: 1103, column: 39, scope: !8112)
!8122 = !DILocation(line: 1103, column: 23, scope: !8112)
!8123 = !DILocalVariable(name: "max_loop", scope: !8112, file: !3, line: 1103, type: !1916)
!8124 = !DILocation(line: 1103, column: 46, scope: !8112)
!8125 = !DILocation(line: 1107, column: 7, scope: !8126)
!8126 = distinct !DILexicalBlock(scope: !8112, file: !3, line: 1107, column: 7)
!8127 = !DILocation(line: 1107, column: 23, scope: !8126)
!8128 = !DILocation(line: 1107, column: 7, scope: !8112)
!8129 = !DILocalVariable(name: "step", scope: !8130, file: !3, line: 1109, type: !1370)
!8130 = distinct !DILexicalBlock(scope: !8126, file: !3, line: 1108, column: 5)
!8131 = !DILocation(line: 1109, column: 12, scope: !8130)
!8132 = !DILocation(line: 1109, column: 19, scope: !8130)
!8133 = !DILocalVariable(name: "lbound", scope: !8130, file: !3, line: 1110, type: !1370)
!8134 = !DILocation(line: 1110, column: 12, scope: !8130)
!8135 = !DILocation(line: 1110, column: 21, scope: !8130)
!8136 = !DILocation(line: 1112, column: 44, scope: !8130)
!8137 = !DILocation(line: 1112, column: 50, scope: !8130)
!8138 = !DILocation(line: 1112, column: 18, scope: !8130)
!8139 = !DILocation(line: 1112, column: 16, scope: !8130)
!8140 = !DILocation(line: 1113, column: 12, scope: !8141)
!8141 = distinct !DILexicalBlock(scope: !8130, file: !3, line: 1113, column: 11)
!8142 = !DILocation(line: 1113, column: 11, scope: !8130)
!8143 = !DILocation(line: 1114, column: 2, scope: !8141)
!8144 = !DILocation(line: 1116, column: 44, scope: !8130)
!8145 = !DILocation(line: 1116, column: 52, scope: !8130)
!8146 = !DILocation(line: 1116, column: 18, scope: !8130)
!8147 = !DILocation(line: 1116, column: 16, scope: !8130)
!8148 = !DILocation(line: 1117, column: 12, scope: !8149)
!8149 = distinct !DILexicalBlock(scope: !8130, file: !3, line: 1117, column: 11)
!8150 = !DILocation(line: 1117, column: 11, scope: !8130)
!8151 = !DILocation(line: 1118, column: 2, scope: !8149)
!8152 = !DILocation(line: 1119, column: 5, scope: !8130)
!8153 = !DILocation(line: 1121, column: 41, scope: !8112)
!8154 = !DILocation(line: 1121, column: 40, scope: !8112)
!8155 = !DILocation(line: 1121, column: 48, scope: !8112)
!8156 = !DILocation(line: 1121, column: 14, scope: !8112)
!8157 = !DILocation(line: 1121, column: 12, scope: !8112)
!8158 = !DILocation(line: 1122, column: 8, scope: !8159)
!8159 = distinct !DILexicalBlock(scope: !8112, file: !3, line: 1122, column: 7)
!8160 = !DILocation(line: 1122, column: 7, scope: !8112)
!8161 = !DILocation(line: 1123, column: 5, scope: !8159)
!8162 = !DILocation(line: 1125, column: 3, scope: !8112)
!8163 = !DILocation(line: 1126, column: 1, scope: !8112)
!8164 = distinct !DISubprogram(name: "ref_always_accessed_p", scope: !3, file: !3, line: 1907, type: !8165, scopeLine: 1908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8165 = !DISubroutineType(types: !8166)
!8166 = !{!1490, !1916, !2848, !1490}
!8167 = !DILocalVariable(name: "loop", arg: 1, scope: !8164, file: !3, line: 1907, type: !1916)
!8168 = !DILocation(line: 1907, column: 37, scope: !8164)
!8169 = !DILocalVariable(name: "ref", arg: 2, scope: !8164, file: !3, line: 1907, type: !2848)
!8170 = !DILocation(line: 1907, column: 53, scope: !8164)
!8171 = !DILocalVariable(name: "stored_p", arg: 3, scope: !8164, file: !3, line: 1907, type: !1490)
!8172 = !DILocation(line: 1907, column: 63, scope: !8164)
!8173 = !DILocalVariable(name: "locs", scope: !8164, file: !3, line: 1909, type: !2787)
!8174 = !DILocation(line: 1909, column: 30, scope: !8164)
!8175 = !DILocalVariable(name: "i", scope: !8164, file: !3, line: 1910, type: !7)
!8176 = !DILocation(line: 1910, column: 12, scope: !8164)
!8177 = !DILocalVariable(name: "loc", scope: !8164, file: !3, line: 1911, type: !2799)
!8178 = !DILocation(line: 1911, column: 17, scope: !8164)
!8179 = !DILocalVariable(name: "ret", scope: !8164, file: !3, line: 1912, type: !1490)
!8180 = !DILocation(line: 1912, column: 8, scope: !8164)
!8181 = !DILocalVariable(name: "must_exec", scope: !8164, file: !3, line: 1913, type: !1916)
!8182 = !DILocation(line: 1913, column: 16, scope: !8164)
!8183 = !DILocalVariable(name: "base", scope: !8164, file: !3, line: 1914, type: !1370)
!8184 = !DILocation(line: 1914, column: 8, scope: !8164)
!8185 = !DILocation(line: 1916, column: 28, scope: !8164)
!8186 = !DILocation(line: 1916, column: 33, scope: !8164)
!8187 = !DILocation(line: 1916, column: 10, scope: !8164)
!8188 = !DILocation(line: 1916, column: 8, scope: !8164)
!8189 = !DILocation(line: 1917, column: 7, scope: !8190)
!8190 = distinct !DILexicalBlock(scope: !8164, file: !3, line: 1917, column: 7)
!8191 = !DILocation(line: 1917, column: 7, scope: !8164)
!8192 = !DILocation(line: 1918, column: 12, scope: !8190)
!8193 = !DILocation(line: 1918, column: 10, scope: !8190)
!8194 = !DILocation(line: 1918, column: 5, scope: !8190)
!8195 = !DILocation(line: 1920, column: 25, scope: !8164)
!8196 = !DILocation(line: 1920, column: 31, scope: !8164)
!8197 = !DILocation(line: 1920, column: 3, scope: !8164)
!8198 = !DILocation(line: 1921, column: 10, scope: !8199)
!8199 = distinct !DILexicalBlock(scope: !8164, file: !3, line: 1921, column: 3)
!8200 = !DILocation(line: 1921, column: 8, scope: !8199)
!8201 = !DILocation(line: 1921, column: 15, scope: !8202)
!8202 = distinct !DILexicalBlock(scope: !8199, file: !3, line: 1921, column: 3)
!8203 = !DILocation(line: 1921, column: 3, scope: !8199)
!8204 = !DILocation(line: 1923, column: 26, scope: !8205)
!8205 = distinct !DILexicalBlock(scope: !8206, file: !3, line: 1923, column: 11)
!8206 = distinct !DILexicalBlock(scope: !8202, file: !3, line: 1922, column: 5)
!8207 = !DILocation(line: 1923, column: 31, scope: !8205)
!8208 = !DILocation(line: 1923, column: 12, scope: !8205)
!8209 = !DILocation(line: 1923, column: 11, scope: !8206)
!8210 = !DILocation(line: 1924, column: 2, scope: !8205)
!8211 = !DILocation(line: 1928, column: 11, scope: !8212)
!8212 = distinct !DILexicalBlock(scope: !8206, file: !3, line: 1928, column: 11)
!8213 = !DILocation(line: 1928, column: 11, scope: !8206)
!8214 = !DILocalVariable(name: "lhs", scope: !8215, file: !3, line: 1930, type: !1370)
!8215 = distinct !DILexicalBlock(scope: !8212, file: !3, line: 1929, column: 2)
!8216 = !DILocation(line: 1930, column: 9, scope: !8215)
!8217 = !DILocation(line: 1931, column: 25, scope: !8218)
!8218 = distinct !DILexicalBlock(scope: !8215, file: !3, line: 1931, column: 8)
!8219 = !DILocation(line: 1931, column: 30, scope: !8218)
!8220 = !DILocation(line: 1931, column: 9, scope: !8218)
!8221 = !DILocation(line: 1931, column: 8, scope: !8215)
!8222 = !DILocation(line: 1932, column: 6, scope: !8218)
!8223 = !DILocation(line: 1933, column: 44, scope: !8215)
!8224 = !DILocation(line: 1933, column: 49, scope: !8215)
!8225 = !DILocation(line: 1933, column: 28, scope: !8215)
!8226 = !DILocation(line: 1933, column: 10, scope: !8215)
!8227 = !DILocation(line: 1933, column: 8, scope: !8215)
!8228 = !DILocation(line: 1934, column: 9, scope: !8229)
!8229 = distinct !DILexicalBlock(scope: !8215, file: !3, line: 1934, column: 8)
!8230 = !DILocation(line: 1934, column: 8, scope: !8215)
!8231 = !DILocation(line: 1935, column: 6, scope: !8229)
!8232 = !DILocation(line: 1936, column: 8, scope: !8233)
!8233 = distinct !DILexicalBlock(scope: !8215, file: !3, line: 1936, column: 8)
!8234 = !DILocation(line: 1936, column: 8, scope: !8215)
!8235 = !DILocation(line: 1937, column: 12, scope: !8233)
!8236 = !DILocation(line: 1937, column: 10, scope: !8233)
!8237 = !DILocation(line: 1937, column: 6, scope: !8233)
!8238 = !DILocation(line: 1938, column: 8, scope: !8239)
!8239 = distinct !DILexicalBlock(scope: !8215, file: !3, line: 1938, column: 8)
!8240 = !DILocation(line: 1938, column: 15, scope: !8239)
!8241 = !DILocation(line: 1938, column: 12, scope: !8239)
!8242 = !DILocation(line: 1938, column: 8, scope: !8215)
!8243 = !DILocation(line: 1939, column: 6, scope: !8239)
!8244 = !DILocation(line: 1940, column: 2, scope: !8215)
!8245 = !DILocation(line: 1942, column: 33, scope: !8206)
!8246 = !DILocation(line: 1942, column: 38, scope: !8206)
!8247 = !DILocation(line: 1942, column: 19, scope: !8206)
!8248 = !DILocation(line: 1942, column: 45, scope: !8206)
!8249 = !DILocation(line: 1942, column: 17, scope: !8206)
!8250 = !DILocation(line: 1943, column: 12, scope: !8251)
!8251 = distinct !DILexicalBlock(scope: !8206, file: !3, line: 1943, column: 11)
!8252 = !DILocation(line: 1943, column: 11, scope: !8206)
!8253 = !DILocation(line: 1944, column: 2, scope: !8251)
!8254 = !DILocation(line: 1946, column: 11, scope: !8255)
!8255 = distinct !DILexicalBlock(scope: !8206, file: !3, line: 1946, column: 11)
!8256 = !DILocation(line: 1946, column: 24, scope: !8255)
!8257 = !DILocation(line: 1946, column: 21, scope: !8255)
!8258 = !DILocation(line: 1947, column: 4, scope: !8255)
!8259 = !DILocation(line: 1947, column: 27, scope: !8255)
!8260 = !DILocation(line: 1947, column: 38, scope: !8255)
!8261 = !DILocation(line: 1947, column: 7, scope: !8255)
!8262 = !DILocation(line: 1946, column: 11, scope: !8206)
!8263 = !DILocation(line: 1949, column: 8, scope: !8264)
!8264 = distinct !DILexicalBlock(scope: !8255, file: !3, line: 1948, column: 2)
!8265 = !DILocation(line: 1950, column: 4, scope: !8264)
!8266 = !DILocation(line: 1952, column: 5, scope: !8206)
!8267 = !DILocation(line: 1921, column: 59, scope: !8202)
!8268 = !DILocation(line: 1921, column: 3, scope: !8202)
!8269 = distinct !{!8269, !8203, !8270}
!8270 = !DILocation(line: 1952, column: 5, scope: !8199)
!8271 = !DILocation(line: 1953, column: 3, scope: !8164)
!8272 = !DILocation(line: 1955, column: 10, scope: !8164)
!8273 = !DILocation(line: 1955, column: 3, scope: !8164)
!8274 = distinct !DISubprogram(name: "get_all_locs_in_loop", scope: !3, file: !3, line: 1678, type: !8275, scopeLine: 1680, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8275 = !DISubroutineType(types: !8276)
!8276 = !{null, !1916, !2848, !4383}
!8277 = !DILocalVariable(name: "loop", arg: 1, scope: !8274, file: !3, line: 1678, type: !1916)
!8278 = !DILocation(line: 1678, column: 36, scope: !8274)
!8279 = !DILocalVariable(name: "ref", arg: 2, scope: !8274, file: !3, line: 1678, type: !2848)
!8280 = !DILocation(line: 1678, column: 52, scope: !8274)
!8281 = !DILocalVariable(name: "locs", arg: 3, scope: !8274, file: !3, line: 1679, type: !4383)
!8282 = !DILocation(line: 1679, column: 37, scope: !8274)
!8283 = !DILocalVariable(name: "accs", scope: !8274, file: !3, line: 1681, type: !2782)
!8284 = !DILocation(line: 1681, column: 18, scope: !8274)
!8285 = !DILocalVariable(name: "i", scope: !8274, file: !3, line: 1682, type: !7)
!8286 = !DILocation(line: 1682, column: 12, scope: !8274)
!8287 = !DILocalVariable(name: "loc", scope: !8274, file: !3, line: 1683, type: !2799)
!8288 = !DILocation(line: 1683, column: 17, scope: !8274)
!8289 = !DILocalVariable(name: "refs", scope: !8274, file: !3, line: 1684, type: !2301)
!8290 = !DILocation(line: 1684, column: 10, scope: !8274)
!8291 = !DILocation(line: 1684, column: 17, scope: !8274)
!8292 = !DILocalVariable(name: "subloop", scope: !8274, file: !3, line: 1686, type: !1916)
!8293 = !DILocation(line: 1686, column: 16, scope: !8274)
!8294 = !DILocation(line: 1688, column: 22, scope: !8295)
!8295 = distinct !DILexicalBlock(scope: !8274, file: !3, line: 1688, column: 7)
!8296 = !DILocation(line: 1688, column: 28, scope: !8295)
!8297 = !DILocation(line: 1688, column: 33, scope: !8295)
!8298 = !DILocation(line: 1688, column: 8, scope: !8295)
!8299 = !DILocation(line: 1688, column: 7, scope: !8274)
!8300 = !DILocation(line: 1689, column: 5, scope: !8295)
!8301 = !DILocation(line: 1691, column: 7, scope: !8302)
!8302 = distinct !DILexicalBlock(scope: !8274, file: !3, line: 1691, column: 7)
!8303 = !DILocation(line: 1692, column: 20, scope: !8302)
!8304 = !DILocation(line: 1692, column: 26, scope: !8302)
!8305 = !DILocation(line: 1692, column: 7, scope: !8302)
!8306 = !DILocation(line: 1691, column: 7, scope: !8274)
!8307 = !DILocation(line: 1694, column: 14, scope: !8308)
!8308 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 1693, column: 5)
!8309 = !DILocation(line: 1694, column: 12, scope: !8308)
!8310 = !DILocation(line: 1695, column: 11, scope: !8311)
!8311 = distinct !DILexicalBlock(scope: !8308, file: !3, line: 1695, column: 11)
!8312 = !DILocation(line: 1695, column: 11, scope: !8308)
!8313 = !DILocation(line: 1697, column: 11, scope: !8314)
!8314 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 1697, column: 4)
!8315 = distinct !DILexicalBlock(scope: !8311, file: !3, line: 1696, column: 2)
!8316 = !DILocation(line: 1697, column: 9, scope: !8314)
!8317 = !DILocation(line: 1697, column: 16, scope: !8318)
!8318 = distinct !DILexicalBlock(scope: !8314, file: !3, line: 1697, column: 4)
!8319 = !DILocation(line: 1697, column: 4, scope: !8314)
!8320 = !DILocation(line: 1698, column: 6, scope: !8318)
!8321 = !DILocation(line: 1697, column: 66, scope: !8318)
!8322 = !DILocation(line: 1697, column: 4, scope: !8318)
!8323 = distinct !{!8323, !8319, !8324}
!8324 = !DILocation(line: 1698, column: 6, scope: !8314)
!8325 = !DILocation(line: 1699, column: 2, scope: !8315)
!8326 = !DILocation(line: 1700, column: 5, scope: !8308)
!8327 = !DILocation(line: 1702, column: 18, scope: !8328)
!8328 = distinct !DILexicalBlock(scope: !8274, file: !3, line: 1702, column: 3)
!8329 = !DILocation(line: 1702, column: 24, scope: !8328)
!8330 = !DILocation(line: 1702, column: 16, scope: !8328)
!8331 = !DILocation(line: 1702, column: 8, scope: !8328)
!8332 = !DILocation(line: 1702, column: 31, scope: !8333)
!8333 = distinct !DILexicalBlock(scope: !8328, file: !3, line: 1702, column: 3)
!8334 = !DILocation(line: 1702, column: 39, scope: !8333)
!8335 = !DILocation(line: 1702, column: 3, scope: !8328)
!8336 = !DILocation(line: 1703, column: 27, scope: !8333)
!8337 = !DILocation(line: 1703, column: 36, scope: !8333)
!8338 = !DILocation(line: 1703, column: 41, scope: !8333)
!8339 = !DILocation(line: 1703, column: 5, scope: !8333)
!8340 = !DILocation(line: 1702, column: 58, scope: !8333)
!8341 = !DILocation(line: 1702, column: 67, scope: !8333)
!8342 = !DILocation(line: 1702, column: 56, scope: !8333)
!8343 = !DILocation(line: 1702, column: 3, scope: !8333)
!8344 = distinct !{!8344, !8335, !8345}
!8345 = !DILocation(line: 1703, column: 45, scope: !8328)
!8346 = !DILocation(line: 1704, column: 1, scope: !8274)
!8347 = distinct !DISubprogram(name: "execute_sm", scope: !3, file: !3, line: 1843, type: !8348, scopeLine: 1844, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8348 = !DISubroutineType(types: !8349)
!8349 = !{null, !1916, !7886, !2848}
!8350 = !DILocalVariable(name: "loop", arg: 1, scope: !8347, file: !3, line: 1843, type: !1916)
!8351 = !DILocation(line: 1843, column: 26, scope: !8347)
!8352 = !DILocalVariable(name: "exits", arg: 2, scope: !8347, file: !3, line: 1843, type: !7886)
!8353 = !DILocation(line: 1843, column: 50, scope: !8347)
!8354 = !DILocalVariable(name: "ref", arg: 3, scope: !8347, file: !3, line: 1843, type: !2848)
!8355 = !DILocation(line: 1843, column: 67, scope: !8347)
!8356 = !DILocalVariable(name: "tmp_var", scope: !8347, file: !3, line: 1845, type: !1370)
!8357 = !DILocation(line: 1845, column: 8, scope: !8347)
!8358 = !DILocalVariable(name: "i", scope: !8347, file: !3, line: 1846, type: !7)
!8359 = !DILocation(line: 1846, column: 12, scope: !8347)
!8360 = !DILocalVariable(name: "load", scope: !8347, file: !3, line: 1847, type: !1701)
!8361 = !DILocation(line: 1847, column: 10, scope: !8347)
!8362 = !DILocalVariable(name: "store", scope: !8347, file: !3, line: 1847, type: !1701)
!8363 = !DILocation(line: 1847, column: 16, scope: !8347)
!8364 = !DILocalVariable(name: "fmt_data", scope: !8347, file: !3, line: 1848, type: !2891)
!8365 = !DILocation(line: 1848, column: 19, scope: !8347)
!8366 = !DILocalVariable(name: "ex", scope: !8347, file: !3, line: 1849, type: !1681)
!8367 = !DILocation(line: 1849, column: 8, scope: !8347)
!8368 = !DILocalVariable(name: "lim_data", scope: !8347, file: !3, line: 1850, type: !2874)
!8369 = !DILocation(line: 1850, column: 24, scope: !8347)
!8370 = !DILocation(line: 1852, column: 7, scope: !8371)
!8371 = distinct !DILexicalBlock(scope: !8347, file: !3, line: 1852, column: 7)
!8372 = !DILocation(line: 1852, column: 17, scope: !8371)
!8373 = !DILocation(line: 1852, column: 21, scope: !8371)
!8374 = !DILocation(line: 1852, column: 32, scope: !8371)
!8375 = !DILocation(line: 1852, column: 7, scope: !8347)
!8376 = !DILocation(line: 1854, column: 16, scope: !8377)
!8377 = distinct !DILexicalBlock(scope: !8371, file: !3, line: 1853, column: 5)
!8378 = !DILocation(line: 1854, column: 7, scope: !8377)
!8379 = !DILocation(line: 1855, column: 27, scope: !8377)
!8380 = !DILocation(line: 1855, column: 38, scope: !8377)
!8381 = !DILocation(line: 1855, column: 43, scope: !8377)
!8382 = !DILocation(line: 1855, column: 7, scope: !8377)
!8383 = !DILocation(line: 1856, column: 16, scope: !8377)
!8384 = !DILocation(line: 1856, column: 46, scope: !8377)
!8385 = !DILocation(line: 1856, column: 52, scope: !8377)
!8386 = !DILocation(line: 1856, column: 7, scope: !8377)
!8387 = !DILocation(line: 1857, column: 5, scope: !8377)
!8388 = !DILocation(line: 1859, column: 31, scope: !8347)
!8389 = !DILocation(line: 1860, column: 28, scope: !8347)
!8390 = !DILocation(line: 1860, column: 33, scope: !8347)
!8391 = !DILocation(line: 1860, column: 10, scope: !8347)
!8392 = !DILocation(line: 1859, column: 13, scope: !8347)
!8393 = !DILocation(line: 1859, column: 11, scope: !8347)
!8394 = !DILocation(line: 1862, column: 19, scope: !8347)
!8395 = !DILocation(line: 1862, column: 12, scope: !8347)
!8396 = !DILocation(line: 1862, column: 17, scope: !8347)
!8397 = !DILocation(line: 1863, column: 24, scope: !8347)
!8398 = !DILocation(line: 1863, column: 12, scope: !8347)
!8399 = !DILocation(line: 1863, column: 22, scope: !8347)
!8400 = !DILocation(line: 1864, column: 20, scope: !8347)
!8401 = !DILocation(line: 1864, column: 25, scope: !8347)
!8402 = !DILocation(line: 1864, column: 47, scope: !8347)
!8403 = !DILocation(line: 1864, column: 3, scope: !8347)
!8404 = !DILocation(line: 1866, column: 21, scope: !8347)
!8405 = !DILocation(line: 1866, column: 27, scope: !8347)
!8406 = !DILocation(line: 1866, column: 32, scope: !8347)
!8407 = !DILocation(line: 1866, column: 3, scope: !8347)
!8408 = !DILocation(line: 1869, column: 10, scope: !8347)
!8409 = !DILocation(line: 1869, column: 8, scope: !8347)
!8410 = !DILocation(line: 1870, column: 29, scope: !8347)
!8411 = !DILocation(line: 1870, column: 14, scope: !8347)
!8412 = !DILocation(line: 1870, column: 12, scope: !8347)
!8413 = !DILocation(line: 1871, column: 24, scope: !8347)
!8414 = !DILocation(line: 1871, column: 3, scope: !8347)
!8415 = !DILocation(line: 1871, column: 13, scope: !8347)
!8416 = !DILocation(line: 1871, column: 22, scope: !8347)
!8417 = !DILocation(line: 1872, column: 24, scope: !8347)
!8418 = !DILocation(line: 1872, column: 3, scope: !8347)
!8419 = !DILocation(line: 1872, column: 13, scope: !8347)
!8420 = !DILocation(line: 1872, column: 22, scope: !8347)
!8421 = !DILocation(line: 1876, column: 40, scope: !8347)
!8422 = !DILocation(line: 1876, column: 23, scope: !8347)
!8423 = !DILocation(line: 1876, column: 47, scope: !8347)
!8424 = !DILocation(line: 1876, column: 3, scope: !8347)
!8425 = !DILocation(line: 1878, column: 10, scope: !8426)
!8426 = distinct !DILexicalBlock(scope: !8347, file: !3, line: 1878, column: 3)
!8427 = !DILocation(line: 1878, column: 8, scope: !8426)
!8428 = !DILocation(line: 1878, column: 15, scope: !8429)
!8429 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 1878, column: 3)
!8430 = !DILocation(line: 1878, column: 3, scope: !8426)
!8431 = !DILocation(line: 1880, column: 15, scope: !8432)
!8432 = distinct !DILexicalBlock(scope: !8429, file: !3, line: 1879, column: 5)
!8433 = !DILocation(line: 1880, column: 13, scope: !8432)
!8434 = !DILocation(line: 1881, column: 27, scope: !8432)
!8435 = !DILocation(line: 1881, column: 31, scope: !8432)
!8436 = !DILocation(line: 1881, column: 7, scope: !8432)
!8437 = !DILocation(line: 1882, column: 5, scope: !8432)
!8438 = !DILocation(line: 1878, column: 50, scope: !8429)
!8439 = !DILocation(line: 1878, column: 3, scope: !8429)
!8440 = distinct !{!8440, !8430, !8441}
!8441 = !DILocation(line: 1882, column: 5, scope: !8426)
!8442 = !DILocation(line: 1883, column: 1, scope: !8347)
!8443 = distinct !DISubprogram(name: "force_move_till", scope: !3, file: !3, line: 1160, type: !2922, scopeLine: 1161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8444 = !DILocalVariable(name: "ref", arg: 1, scope: !8443, file: !3, line: 1160, type: !1370)
!8445 = !DILocation(line: 1160, column: 23, scope: !8443)
!8446 = !DILocalVariable(name: "index", arg: 2, scope: !8443, file: !3, line: 1160, type: !1735)
!8447 = !DILocation(line: 1160, column: 34, scope: !8443)
!8448 = !DILocalVariable(name: "data", arg: 3, scope: !8443, file: !3, line: 1160, type: !1654)
!8449 = !DILocation(line: 1160, column: 47, scope: !8443)
!8450 = !DILocalVariable(name: "fmt_data", scope: !8443, file: !3, line: 1162, type: !2890)
!8451 = !DILocation(line: 1162, column: 20, scope: !8443)
!8452 = !DILocation(line: 1162, column: 51, scope: !8443)
!8453 = !DILocation(line: 1162, column: 31, scope: !8443)
!8454 = !DILocation(line: 1164, column: 7, scope: !8455)
!8455 = distinct !DILexicalBlock(scope: !8443, file: !3, line: 1164, column: 7)
!8456 = !DILocation(line: 1164, column: 23, scope: !8455)
!8457 = !DILocation(line: 1164, column: 7, scope: !8443)
!8458 = !DILocalVariable(name: "step", scope: !8459, file: !3, line: 1166, type: !1370)
!8459 = distinct !DILexicalBlock(scope: !8455, file: !3, line: 1165, column: 5)
!8460 = !DILocation(line: 1166, column: 12, scope: !8459)
!8461 = !DILocation(line: 1166, column: 19, scope: !8459)
!8462 = !DILocalVariable(name: "lbound", scope: !8459, file: !3, line: 1167, type: !1370)
!8463 = !DILocation(line: 1167, column: 12, scope: !8459)
!8464 = !DILocation(line: 1167, column: 21, scope: !8459)
!8465 = !DILocation(line: 1169, column: 27, scope: !8459)
!8466 = !DILocation(line: 1169, column: 33, scope: !8459)
!8467 = !DILocation(line: 1169, column: 43, scope: !8459)
!8468 = !DILocation(line: 1169, column: 54, scope: !8459)
!8469 = !DILocation(line: 1169, column: 64, scope: !8459)
!8470 = !DILocation(line: 1169, column: 7, scope: !8459)
!8471 = !DILocation(line: 1170, column: 27, scope: !8459)
!8472 = !DILocation(line: 1170, column: 35, scope: !8459)
!8473 = !DILocation(line: 1170, column: 45, scope: !8459)
!8474 = !DILocation(line: 1170, column: 56, scope: !8459)
!8475 = !DILocation(line: 1170, column: 66, scope: !8459)
!8476 = !DILocation(line: 1170, column: 7, scope: !8459)
!8477 = !DILocation(line: 1171, column: 5, scope: !8459)
!8478 = !DILocation(line: 1173, column: 24, scope: !8443)
!8479 = !DILocation(line: 1173, column: 23, scope: !8443)
!8480 = !DILocation(line: 1173, column: 31, scope: !8443)
!8481 = !DILocation(line: 1173, column: 41, scope: !8443)
!8482 = !DILocation(line: 1173, column: 52, scope: !8443)
!8483 = !DILocation(line: 1173, column: 62, scope: !8443)
!8484 = !DILocation(line: 1173, column: 3, scope: !8443)
!8485 = !DILocation(line: 1175, column: 3, scope: !8443)
!8486 = distinct !DISubprogram(name: "rewrite_mem_refs", scope: !3, file: !3, line: 1709, type: !8487, scopeLine: 1710, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8487 = !DISubroutineType(types: !8488)
!8488 = !{null, !1916, !2848, !1370}
!8489 = !DILocalVariable(name: "loop", arg: 1, scope: !8486, file: !3, line: 1709, type: !1916)
!8490 = !DILocation(line: 1709, column: 32, scope: !8486)
!8491 = !DILocalVariable(name: "ref", arg: 2, scope: !8486, file: !3, line: 1709, type: !2848)
!8492 = !DILocation(line: 1709, column: 48, scope: !8486)
!8493 = !DILocalVariable(name: "tmp_var", arg: 3, scope: !8486, file: !3, line: 1709, type: !1370)
!8494 = !DILocation(line: 1709, column: 58, scope: !8486)
!8495 = !DILocalVariable(name: "i", scope: !8486, file: !3, line: 1711, type: !7)
!8496 = !DILocation(line: 1711, column: 12, scope: !8486)
!8497 = !DILocalVariable(name: "loc", scope: !8486, file: !3, line: 1712, type: !2799)
!8498 = !DILocation(line: 1712, column: 17, scope: !8486)
!8499 = !DILocalVariable(name: "locs", scope: !8486, file: !3, line: 1713, type: !2787)
!8500 = !DILocation(line: 1713, column: 30, scope: !8486)
!8501 = !DILocation(line: 1715, column: 25, scope: !8486)
!8502 = !DILocation(line: 1715, column: 31, scope: !8486)
!8503 = !DILocation(line: 1715, column: 3, scope: !8486)
!8504 = !DILocation(line: 1716, column: 10, scope: !8505)
!8505 = distinct !DILexicalBlock(scope: !8486, file: !3, line: 1716, column: 3)
!8506 = !DILocation(line: 1716, column: 8, scope: !8505)
!8507 = !DILocation(line: 1716, column: 15, scope: !8508)
!8508 = distinct !DILexicalBlock(scope: !8505, file: !3, line: 1716, column: 3)
!8509 = !DILocation(line: 1716, column: 3, scope: !8505)
!8510 = !DILocation(line: 1717, column: 26, scope: !8508)
!8511 = !DILocation(line: 1717, column: 31, scope: !8508)
!8512 = !DILocation(line: 1717, column: 5, scope: !8508)
!8513 = !DILocation(line: 1716, column: 59, scope: !8508)
!8514 = !DILocation(line: 1716, column: 3, scope: !8508)
!8515 = distinct !{!8515, !8509, !8516}
!8516 = !DILocation(line: 1717, column: 38, scope: !8505)
!8517 = !DILocation(line: 1718, column: 3, scope: !8486)
!8518 = !DILocation(line: 1719, column: 1, scope: !8486)
!8519 = distinct !DISubprogram(name: "force_move_till_op", scope: !3, file: !3, line: 1132, type: !8520, scopeLine: 1133, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8520 = !DISubroutineType(types: !8521)
!8521 = !{null, !1370, !1916, !1916}
!8522 = !DILocalVariable(name: "op", arg: 1, scope: !8519, file: !3, line: 1132, type: !1370)
!8523 = !DILocation(line: 1132, column: 26, scope: !8519)
!8524 = !DILocalVariable(name: "orig_loop", arg: 2, scope: !8519, file: !3, line: 1132, type: !1916)
!8525 = !DILocation(line: 1132, column: 43, scope: !8519)
!8526 = !DILocalVariable(name: "loop", arg: 3, scope: !8519, file: !3, line: 1132, type: !1916)
!8527 = !DILocation(line: 1132, column: 67, scope: !8519)
!8528 = !DILocalVariable(name: "stmt", scope: !8519, file: !3, line: 1134, type: !1701)
!8529 = !DILocation(line: 1134, column: 10, scope: !8519)
!8530 = !DILocation(line: 1136, column: 8, scope: !8531)
!8531 = distinct !DILexicalBlock(scope: !8519, file: !3, line: 1136, column: 7)
!8532 = !DILocation(line: 1137, column: 7, scope: !8531)
!8533 = !DILocation(line: 1137, column: 35, scope: !8531)
!8534 = !DILocation(line: 1137, column: 10, scope: !8531)
!8535 = !DILocation(line: 1136, column: 7, scope: !8519)
!8536 = !DILocation(line: 1138, column: 5, scope: !8531)
!8537 = !DILocation(line: 1140, column: 3, scope: !8519)
!8538 = !DILocation(line: 1142, column: 10, scope: !8519)
!8539 = !DILocation(line: 1142, column: 8, scope: !8519)
!8540 = !DILocation(line: 1143, column: 21, scope: !8541)
!8541 = distinct !DILexicalBlock(scope: !8519, file: !3, line: 1143, column: 7)
!8542 = !DILocation(line: 1143, column: 7, scope: !8541)
!8543 = !DILocation(line: 1143, column: 7, scope: !8519)
!8544 = !DILocation(line: 1144, column: 5, scope: !8541)
!8545 = !DILocation(line: 1146, column: 14, scope: !8519)
!8546 = !DILocation(line: 1146, column: 20, scope: !8519)
!8547 = !DILocation(line: 1146, column: 31, scope: !8519)
!8548 = !DILocation(line: 1146, column: 3, scope: !8519)
!8549 = !DILocation(line: 1147, column: 1, scope: !8519)
!8550 = distinct !DISubprogram(name: "gimple_nop_p", scope: !397, file: !397, line: 4304, type: !3132, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8551 = !DILocalVariable(name: "g", arg: 1, scope: !8550, file: !397, line: 4304, type: !3109)
!8552 = !DILocation(line: 4304, column: 28, scope: !8550)
!8553 = !DILocation(line: 4306, column: 23, scope: !8550)
!8554 = !DILocation(line: 4306, column: 10, scope: !8550)
!8555 = !DILocation(line: 4306, column: 26, scope: !8550)
!8556 = !DILocation(line: 4306, column: 3, scope: !8550)
!8557 = distinct !DISubprogram(name: "rewrite_mem_ref_loc", scope: !3, file: !3, line: 1668, type: !8558, scopeLine: 1669, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8558 = !DISubroutineType(types: !8559)
!8559 = !{null, !2799, !1370}
!8560 = !DILocalVariable(name: "loc", arg: 1, scope: !8557, file: !3, line: 1668, type: !2799)
!8561 = !DILocation(line: 1668, column: 36, scope: !8557)
!8562 = !DILocalVariable(name: "tmp_var", arg: 2, scope: !8557, file: !3, line: 1668, type: !1370)
!8563 = !DILocation(line: 1668, column: 46, scope: !8557)
!8564 = !DILocation(line: 1670, column: 34, scope: !8557)
!8565 = !DILocation(line: 1670, column: 39, scope: !8557)
!8566 = !DILocation(line: 1670, column: 3, scope: !8557)
!8567 = !DILocation(line: 1671, column: 15, scope: !8557)
!8568 = !DILocation(line: 1671, column: 4, scope: !8557)
!8569 = !DILocation(line: 1671, column: 9, scope: !8557)
!8570 = !DILocation(line: 1671, column: 13, scope: !8557)
!8571 = !DILocation(line: 1672, column: 16, scope: !8557)
!8572 = !DILocation(line: 1672, column: 21, scope: !8557)
!8573 = !DILocation(line: 1672, column: 3, scope: !8557)
!8574 = !DILocation(line: 1673, column: 1, scope: !8557)
!8575 = distinct !DISubprogram(name: "update_stmt", scope: !397, file: !397, line: 1456, type: !6655, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8576 = !DILocalVariable(name: "s", arg: 1, scope: !8575, file: !397, line: 1456, type: !1701)
!8577 = !DILocation(line: 1456, column: 21, scope: !8575)
!8578 = !DILocation(line: 1458, column: 23, scope: !8579)
!8579 = distinct !DILexicalBlock(scope: !8575, file: !397, line: 1458, column: 7)
!8580 = !DILocation(line: 1458, column: 7, scope: !8579)
!8581 = !DILocation(line: 1458, column: 7, scope: !8575)
!8582 = !DILocation(line: 1460, column: 28, scope: !8583)
!8583 = distinct !DILexicalBlock(scope: !8579, file: !397, line: 1459, column: 5)
!8584 = !DILocation(line: 1460, column: 7, scope: !8583)
!8585 = !DILocation(line: 1461, column: 29, scope: !8583)
!8586 = !DILocation(line: 1461, column: 7, scope: !8583)
!8587 = !DILocation(line: 1462, column: 5, scope: !8583)
!8588 = !DILocation(line: 1463, column: 1, scope: !8575)
!8589 = distinct !DISubprogram(name: "move_computations_stmt", scope: !3, file: !3, line: 1024, type: !3447, scopeLine: 1026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8590 = !DILocalVariable(name: "dw_data", arg: 1, scope: !8589, file: !3, line: 1024, type: !3444)
!8591 = !DILocation(line: 1024, column: 47, scope: !8589)
!8592 = !DILocalVariable(name: "bb", arg: 2, scope: !8589, file: !3, line: 1025, type: !2186)
!8593 = !DILocation(line: 1025, column: 16, scope: !8589)
!8594 = !DILocalVariable(name: "level", scope: !8589, file: !3, line: 1027, type: !1916)
!8595 = !DILocation(line: 1027, column: 16, scope: !8589)
!8596 = !DILocalVariable(name: "bsi", scope: !8589, file: !3, line: 1028, type: !3317)
!8597 = !DILocation(line: 1028, column: 24, scope: !8589)
!8598 = !DILocalVariable(name: "stmt", scope: !8589, file: !3, line: 1029, type: !1701)
!8599 = !DILocation(line: 1029, column: 10, scope: !8589)
!8600 = !DILocalVariable(name: "cost", scope: !8589, file: !3, line: 1030, type: !7)
!8601 = !DILocation(line: 1030, column: 12, scope: !8589)
!8602 = !DILocalVariable(name: "lim_data", scope: !8589, file: !3, line: 1031, type: !2874)
!8603 = !DILocation(line: 1031, column: 24, scope: !8589)
!8604 = !DILocation(line: 1033, column: 20, scope: !8605)
!8605 = distinct !DILexicalBlock(scope: !8589, file: !3, line: 1033, column: 7)
!8606 = !DILocation(line: 1033, column: 24, scope: !8605)
!8607 = !DILocation(line: 1033, column: 8, scope: !8605)
!8608 = !DILocation(line: 1033, column: 7, scope: !8589)
!8609 = !DILocation(line: 1034, column: 5, scope: !8605)
!8610 = !DILocation(line: 1036, column: 28, scope: !8611)
!8611 = distinct !DILexicalBlock(scope: !8589, file: !3, line: 1036, column: 3)
!8612 = !DILocation(line: 1036, column: 14, scope: !8611)
!8613 = !DILocation(line: 1036, column: 8, scope: !8611)
!8614 = !DILocation(line: 1036, column: 34, scope: !8615)
!8615 = distinct !DILexicalBlock(scope: !8611, file: !3, line: 1036, column: 3)
!8616 = !DILocation(line: 1036, column: 33, scope: !8615)
!8617 = !DILocation(line: 1036, column: 3, scope: !8611)
!8618 = !DILocation(line: 1038, column: 14, scope: !8619)
!8619 = distinct !DILexicalBlock(scope: !8615, file: !3, line: 1037, column: 5)
!8620 = !DILocation(line: 1038, column: 12, scope: !8619)
!8621 = !DILocation(line: 1040, column: 32, scope: !8619)
!8622 = !DILocation(line: 1040, column: 18, scope: !8619)
!8623 = !DILocation(line: 1040, column: 16, scope: !8619)
!8624 = !DILocation(line: 1041, column: 11, scope: !8625)
!8625 = distinct !DILexicalBlock(scope: !8619, file: !3, line: 1041, column: 11)
!8626 = !DILocation(line: 1041, column: 20, scope: !8625)
!8627 = !DILocation(line: 1041, column: 11, scope: !8619)
!8628 = !DILocation(line: 1043, column: 4, scope: !8629)
!8629 = distinct !DILexicalBlock(scope: !8625, file: !3, line: 1042, column: 2)
!8630 = !DILocation(line: 1044, column: 4, scope: !8629)
!8631 = distinct !{!8631, !8617, !8632}
!8632 = !DILocation(line: 1073, column: 5, scope: !8611)
!8633 = !DILocation(line: 1047, column: 14, scope: !8619)
!8634 = !DILocation(line: 1047, column: 24, scope: !8619)
!8635 = !DILocation(line: 1047, column: 12, scope: !8619)
!8636 = !DILocation(line: 1048, column: 15, scope: !8619)
!8637 = !DILocation(line: 1048, column: 25, scope: !8619)
!8638 = !DILocation(line: 1048, column: 13, scope: !8619)
!8639 = !DILocation(line: 1049, column: 23, scope: !8619)
!8640 = !DILocation(line: 1049, column: 7, scope: !8619)
!8641 = !DILocation(line: 1051, column: 12, scope: !8642)
!8642 = distinct !DILexicalBlock(scope: !8619, file: !3, line: 1051, column: 11)
!8643 = !DILocation(line: 1051, column: 11, scope: !8619)
!8644 = !DILocation(line: 1053, column: 4, scope: !8645)
!8645 = distinct !DILexicalBlock(scope: !8642, file: !3, line: 1052, column: 2)
!8646 = !DILocation(line: 1054, column: 4, scope: !8645)
!8647 = !DILocation(line: 1059, column: 24, scope: !8648)
!8648 = distinct !DILexicalBlock(scope: !8619, file: !3, line: 1059, column: 11)
!8649 = !DILocation(line: 1059, column: 11, scope: !8648)
!8650 = !DILocation(line: 1059, column: 30, scope: !8648)
!8651 = !DILocation(line: 1059, column: 11, scope: !8619)
!8652 = !DILocation(line: 1060, column: 2, scope: !8648)
!8653 = !DILocation(line: 1062, column: 11, scope: !8654)
!8654 = distinct !DILexicalBlock(scope: !8619, file: !3, line: 1062, column: 11)
!8655 = !DILocation(line: 1062, column: 21, scope: !8654)
!8656 = !DILocation(line: 1062, column: 25, scope: !8654)
!8657 = !DILocation(line: 1062, column: 36, scope: !8654)
!8658 = !DILocation(line: 1062, column: 11, scope: !8619)
!8659 = !DILocation(line: 1064, column: 13, scope: !8660)
!8660 = distinct !DILexicalBlock(scope: !8654, file: !3, line: 1063, column: 2)
!8661 = !DILocation(line: 1064, column: 4, scope: !8660)
!8662 = !DILocation(line: 1065, column: 23, scope: !8660)
!8663 = !DILocation(line: 1065, column: 34, scope: !8660)
!8664 = !DILocation(line: 1065, column: 4, scope: !8660)
!8665 = !DILocation(line: 1066, column: 13, scope: !8660)
!8666 = !DILocation(line: 1067, column: 6, scope: !8660)
!8667 = !DILocation(line: 1067, column: 12, scope: !8660)
!8668 = !DILocation(line: 1067, column: 19, scope: !8660)
!8669 = !DILocation(line: 1066, column: 4, scope: !8660)
!8670 = !DILocation(line: 1068, column: 2, scope: !8660)
!8671 = !DILocation(line: 1070, column: 38, scope: !8619)
!8672 = !DILocation(line: 1070, column: 7, scope: !8619)
!8673 = !DILocation(line: 1071, column: 48, scope: !8619)
!8674 = !DILocation(line: 1071, column: 27, scope: !8619)
!8675 = !DILocation(line: 1071, column: 56, scope: !8619)
!8676 = !DILocation(line: 1071, column: 7, scope: !8619)
!8677 = !DILocation(line: 1072, column: 7, scope: !8619)
!8678 = !DILocation(line: 1036, column: 3, scope: !8615)
!8679 = !DILocation(line: 1074, column: 1, scope: !8589)
!8680 = distinct !DISubprogram(name: "clear_lim_data", scope: !3, file: !3, line: 241, type: !6655, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8681 = !DILocalVariable(name: "stmt", arg: 1, scope: !8680, file: !3, line: 241, type: !1701)
!8682 = !DILocation(line: 241, column: 24, scope: !8680)
!8683 = !DILocalVariable(name: "p", scope: !8680, file: !3, line: 243, type: !2239)
!8684 = !DILocation(line: 243, column: 10, scope: !8680)
!8685 = !DILocation(line: 243, column: 36, scope: !8680)
!8686 = !DILocation(line: 243, column: 54, scope: !8680)
!8687 = !DILocation(line: 243, column: 14, scope: !8680)
!8688 = !DILocation(line: 244, column: 8, scope: !8689)
!8689 = distinct !DILexicalBlock(scope: !8680, file: !3, line: 244, column: 7)
!8690 = !DILocation(line: 244, column: 7, scope: !8680)
!8691 = !DILocation(line: 245, column: 5, scope: !8689)
!8692 = !DILocation(line: 247, column: 47, scope: !8680)
!8693 = !DILocation(line: 247, column: 46, scope: !8680)
!8694 = !DILocation(line: 247, column: 22, scope: !8680)
!8695 = !DILocation(line: 247, column: 3, scope: !8680)
!8696 = !DILocation(line: 248, column: 4, scope: !8680)
!8697 = !DILocation(line: 248, column: 6, scope: !8680)
!8698 = !DILocation(line: 249, column: 1, scope: !8680)
!8699 = distinct !DISubprogram(name: "free_lim_aux_data", scope: !3, file: !3, line: 228, type: !8700, scopeLine: 229, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8700 = !DISubroutineType(types: !8701)
!8701 = !{null, !2874}
!8702 = !DILocalVariable(name: "data", arg: 1, scope: !8699, file: !3, line: 228, type: !2874)
!8703 = !DILocation(line: 228, column: 41, scope: !8699)
!8704 = !DILocalVariable(name: "dep", scope: !8699, file: !3, line: 230, type: !2882)
!8705 = !DILocation(line: 230, column: 18, scope: !8699)
!8706 = !DILocalVariable(name: "next", scope: !8699, file: !3, line: 230, type: !2882)
!8707 = !DILocation(line: 230, column: 24, scope: !8699)
!8708 = !DILocation(line: 232, column: 14, scope: !8709)
!8709 = distinct !DILexicalBlock(scope: !8699, file: !3, line: 232, column: 3)
!8710 = !DILocation(line: 232, column: 20, scope: !8709)
!8711 = !DILocation(line: 232, column: 12, scope: !8709)
!8712 = !DILocation(line: 232, column: 8, scope: !8709)
!8713 = !DILocation(line: 232, column: 29, scope: !8714)
!8714 = distinct !DILexicalBlock(scope: !8709, file: !3, line: 232, column: 3)
!8715 = !DILocation(line: 232, column: 3, scope: !8709)
!8716 = !DILocation(line: 234, column: 14, scope: !8717)
!8717 = distinct !DILexicalBlock(scope: !8714, file: !3, line: 233, column: 5)
!8718 = !DILocation(line: 234, column: 19, scope: !8717)
!8719 = !DILocation(line: 234, column: 12, scope: !8717)
!8720 = !DILocation(line: 235, column: 13, scope: !8717)
!8721 = !DILocation(line: 235, column: 7, scope: !8717)
!8722 = !DILocation(line: 236, column: 5, scope: !8717)
!8723 = !DILocation(line: 232, column: 40, scope: !8714)
!8724 = !DILocation(line: 232, column: 38, scope: !8714)
!8725 = !DILocation(line: 232, column: 3, scope: !8714)
!8726 = distinct !{!8726, !8715, !8727}
!8727 = !DILocation(line: 236, column: 5, scope: !8709)
!8728 = !DILocation(line: 237, column: 9, scope: !8699)
!8729 = !DILocation(line: 237, column: 3, scope: !8699)
!8730 = !DILocation(line: 238, column: 1, scope: !8699)
!8731 = distinct !DISubprogram(name: "VEC_mem_ref_p_heap_free", scope: !3, file: !3, line: 161, type: !8732, scopeLine: 161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8732 = !DISubroutineType(types: !8733)
!8733 = !{null, !4898}
!8734 = !DILocalVariable(name: "vec_", arg: 1, scope: !8731, file: !3, line: 161, type: !4898)
!8735 = !DILocation(line: 161, column: 1, scope: !8731)
!8736 = !DILocation(line: 161, column: 1, scope: !8737)
!8737 = distinct !DILexicalBlock(scope: !8731, file: !3, line: 161, column: 1)
!8738 = distinct !DISubprogram(name: "VEC_bitmap_base_iterate", scope: !3, file: !3, line: 163, type: !8739, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8739 = !DISubroutineType(types: !8740)
!8740 = !{!1467, !4705, !7, !4143}
!8741 = !DILocalVariable(name: "vec_", arg: 1, scope: !8738, file: !3, line: 163, type: !4705)
!8742 = !DILocation(line: 163, column: 1, scope: !8738)
!8743 = !DILocalVariable(name: "ix_", arg: 2, scope: !8738, file: !3, line: 163, type: !7)
!8744 = !DILocalVariable(name: "ptr", arg: 3, scope: !8738, file: !3, line: 163, type: !4143)
!8745 = !DILocation(line: 163, column: 1, scope: !8746)
!8746 = distinct !DILexicalBlock(scope: !8738, file: !3, line: 163, column: 1)
!8747 = !DILocation(line: 163, column: 1, scope: !8748)
!8748 = distinct !DILexicalBlock(scope: !8746, file: !3, line: 163, column: 1)
!8749 = !DILocation(line: 163, column: 1, scope: !8750)
!8750 = distinct !DILexicalBlock(scope: !8746, file: !3, line: 163, column: 1)
!8751 = distinct !DISubprogram(name: "VEC_bitmap_heap_free", scope: !3, file: !3, line: 164, type: !8752, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8752 = !DISubroutineType(types: !8753)
!8753 = !{null, !8754}
!8754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2814, size: 64)
!8755 = !DILocalVariable(name: "vec_", arg: 1, scope: !8751, file: !3, line: 164, type: !8754)
!8756 = !DILocation(line: 164, column: 1, scope: !8751)
!8757 = !DILocation(line: 164, column: 1, scope: !8758)
!8758 = distinct !DILexicalBlock(scope: !8751, file: !3, line: 164, column: 1)
!8759 = distinct !DISubprogram(name: "VEC_htab_t_base_iterate", scope: !3, file: !3, line: 166, type: !8760, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8760 = !DISubroutineType(types: !8761)
!8761 = !{!1467, !5559, !7, !4196}
!8762 = !DILocalVariable(name: "vec_", arg: 1, scope: !8759, file: !3, line: 166, type: !5559)
!8763 = !DILocation(line: 166, column: 1, scope: !8759)
!8764 = !DILocalVariable(name: "ix_", arg: 2, scope: !8759, file: !3, line: 166, type: !7)
!8765 = !DILocalVariable(name: "ptr", arg: 3, scope: !8759, file: !3, line: 166, type: !4196)
!8766 = !DILocation(line: 166, column: 1, scope: !8767)
!8767 = distinct !DILexicalBlock(scope: !8759, file: !3, line: 166, column: 1)
!8768 = !DILocation(line: 166, column: 1, scope: !8769)
!8769 = distinct !DILexicalBlock(scope: !8767, file: !3, line: 166, column: 1)
!8770 = !DILocation(line: 166, column: 1, scope: !8771)
!8771 = distinct !DILexicalBlock(scope: !8767, file: !3, line: 166, column: 1)
!8772 = distinct !DISubprogram(name: "VEC_htab_t_heap_free", scope: !3, file: !3, line: 167, type: !8773, scopeLine: 167, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2924)
!8773 = !DISubroutineType(types: !8774)
!8774 = !{null, !8775}
!8775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2826, size: 64)
!8776 = !DILocalVariable(name: "vec_", arg: 1, scope: !8772, file: !3, line: 167, type: !8775)
!8777 = !DILocation(line: 167, column: 1, scope: !8772)
!8778 = !DILocation(line: 167, column: 1, scope: !8779)
!8779 = distinct !DILexicalBlock(scope: !8772, file: !3, line: 167, column: 1)
