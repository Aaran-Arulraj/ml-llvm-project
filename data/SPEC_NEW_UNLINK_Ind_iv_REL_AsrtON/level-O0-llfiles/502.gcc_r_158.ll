; ModuleID = 'expmed.c'
source_filename = "expmed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.optab_d = type { i32, i8*, i8, void (%struct.optab_d*, i8*, i8, i32)*, [87 x %struct.optab_handlers] }
%struct.optab_handlers = type { i32 }
%struct.insn_data = type { i8*, %union.anon.0, %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.insn_operand_data*, i8, i8, i8, i8 }
%union.anon.0 = type { i8* }
%struct.insn_operand_data = type { i32 (%struct.rtx_def*, i32)*, i8*, i16, i8, i8 }
%struct.rtl_hooks = type { %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i64, i64*)*, %struct.rtx_def* (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (i32, %struct.rtx_def*)* }
%struct.real_value = type { i32, [3 x i64] }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.diagnostic_info = type opaque
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.real_format = type { void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, %struct.real_value*, i64*)*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%union.gimple_statement_d = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.alg_hash_entry = type { i64, i32, i32, %struct.mult_cost, i8 }
%struct.mult_cost = type { i16, i16 }
%struct.anon = type { %struct.rtx_def, [2 x %union.rtunion_def], %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %union.rtunion_def, %struct.rtx_def, %union.rtunion_def }
%struct.mem_attrs = type { %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i8 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.algorithm = type { %struct.mult_cost, i16, [32 x i32], [32 x i8] }

@x_rtl = external dso_local global %struct.rtl_data, align 8
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@zero_cost = internal global [2 x i32] zeroinitializer, align 4, !dbg !0
@class_narrowest_mode = external dso_local constant [18 x i8], align 16
@add_cost = internal global [2 x [87 x i32]] zeroinitializer, align 16, !dbg !3379
@neg_cost = internal global [2 x [87 x i32]] zeroinitializer, align 16, !dbg !3382
@mul_cost = internal global [2 x [87 x i32]] zeroinitializer, align 16, !dbg !3394
@sdiv_cost = internal global [2 x [87 x i32]] zeroinitializer, align 16, !dbg !3396
@udiv_cost = internal global [2 x [87 x i32]] zeroinitializer, align 16, !dbg !3398
@sdiv_pow2_cheap = internal global [2 x [87 x i8]] zeroinitializer, align 16, !dbg !3372
@smod_pow2_cheap = internal global [2 x [87 x i8]] zeroinitializer, align 16, !dbg !3377
@mode_wider = external dso_local constant [87 x i8], align 16
@mode_size = external dso_local global [87 x i8], align 16
@mul_widen_cost = internal global [2 x [87 x i32]] zeroinitializer, align 16, !dbg !3400
@mul_highpart_cost = internal global [2 x [87 x i32]] zeroinitializer, align 16, !dbg !3402
@shift_cost = internal global [2 x [87 x [32 x i32]]] zeroinitializer, align 16, !dbg !3384
@shiftsub1_cost = internal global [2 x [87 x [32 x i32]]] zeroinitializer, align 16, !dbg !3392
@shiftsub0_cost = internal global [2 x [87 x [32 x i32]]] zeroinitializer, align 16, !dbg !3390
@shiftadd_cost = internal global [2 x [87 x [32 x i32]]] zeroinitializer, align 16, !dbg !3388
@optab_table = external dso_local global [159 x %struct.optab_d], align 16
@insn_data = external dso_local constant [0 x %struct.insn_data], align 8
@.str = private unnamed_addr constant [9 x i8] c"expmed.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@word_mode = external dso_local global i32, align 4
@rtx_class = external dso_local constant [139 x i32], align 16
@mode_class = external dso_local constant [87 x i8], align 16
@rtl_hooks = external dso_local global %struct.rtl_hooks, align 8
@flag_trapv = external dso_local global i32, align 4
@dconst2 = external dso_local global %struct.real_value, align 8
@expand_divmod.last_div_const = internal global i64 0, align 8, !dbg !3364
@expand_divmod.ext_op1 = internal global i64 0, align 8, !dbg !3370
@mode_mask_array = external dso_local constant [87 x i64], align 16
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@ix86_branch_cost = external dso_local global i32, align 4
@optimize = external dso_local global i32, align 4
@real_format_for_mode = external dso_local global [7 x %struct.real_format*], align 16
@mode_inner = external dso_local constant [87 x i8], align 16
@flag_finite_math_only = external dso_local global i32, align 4
@flag_signaling_nans = external dso_local global i32, align 4
@byte_mode = external dso_local global i32, align 4
@volatile_ok = external dso_local global i32, align 4
@mode_nunits = external dso_local constant [87 x i8], align 16
@targetm = external dso_local global %struct.gcc_target, align 8
@alg_hash = internal global [1031 x %struct.alg_hash_entry] zeroinitializer, align 16, !dbg !3404

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_expmed() #0 !dbg !3421 {
entry:
  %all = alloca %struct.anon, align 8
  %pow2 = alloca [32 x %struct.rtx_def*], align 16
  %cint = alloca [32 x %struct.rtx_def*], align 16
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %mode = alloca i32, align 4
  %wider_mode = alloca i32, align 4
  %speed = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.anon* %all, metadata !3424, metadata !DIExpression()), !dbg !3459
  call void @llvm.dbg.declare(metadata [32 x %struct.rtx_def*]* %pow2, metadata !3460, metadata !DIExpression()), !dbg !3462
  call void @llvm.dbg.declare(metadata [32 x %struct.rtx_def*]* %cint, metadata !3463, metadata !DIExpression()), !dbg !3464
  call void @llvm.dbg.declare(metadata i32* %m, metadata !3465, metadata !DIExpression()), !dbg !3466
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3467, metadata !DIExpression()), !dbg !3468
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !3469, metadata !DIExpression()), !dbg !3470
  call void @llvm.dbg.declare(metadata i32* %wider_mode, metadata !3471, metadata !DIExpression()), !dbg !3472
  call void @llvm.dbg.declare(metadata i32* %speed, metadata !3473, metadata !DIExpression()), !dbg !3474
  store i32 1, i32* %m, align 4, !dbg !3475
  br label %for.cond, !dbg !3477

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %m, align 4, !dbg !3478
  %cmp = icmp slt i32 %0, 32, !dbg !3480
  br i1 %cmp, label %for.body, label %for.end, !dbg !3481

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %m, align 4, !dbg !3482
  %sh_prom = zext i32 %1 to i64, !dbg !3482
  %shl = shl i64 1, %sh_prom, !dbg !3482
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %shl), !dbg !3482
  %2 = load i32, i32* %m, align 4, !dbg !3484
  %idxprom = sext i32 %2 to i64, !dbg !3485
  %arrayidx = getelementptr inbounds [32 x %struct.rtx_def*], [32 x %struct.rtx_def*]* %pow2, i64 0, i64 %idxprom, !dbg !3485
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8, !dbg !3486
  %3 = load i32, i32* %m, align 4, !dbg !3487
  %conv = sext i32 %3 to i64, !dbg !3487
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv), !dbg !3487
  %4 = load i32, i32* %m, align 4, !dbg !3488
  %idxprom2 = sext i32 %4 to i64, !dbg !3489
  %arrayidx3 = getelementptr inbounds [32 x %struct.rtx_def*], [32 x %struct.rtx_def*]* %cint, i64 0, i64 %idxprom2, !dbg !3489
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx3, align 8, !dbg !3490
  br label %for.inc, !dbg !3491

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %m, align 4, !dbg !3492
  %inc = add nsw i32 %5, 1, !dbg !3492
  store i32 %inc, i32* %m, align 4, !dbg !3492
  br label %for.cond, !dbg !3493, !llvm.loop !3494

for.end:                                          ; preds = %for.cond
  %6 = bitcast %struct.anon* %all to i8*, !dbg !3496
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 936, i1 false), !dbg !3496
  %reg = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3497
  %7 = bitcast %struct.rtx_def* %reg to i32*, !dbg !3497
  %bf.load = load i32, i32* %7, align 8, !dbg !3497
  %bf.clear = and i32 %bf.load, -65536, !dbg !3497
  %bf.set = or i32 %bf.clear, 37, !dbg !3497
  store i32 %bf.set, i32* %7, align 8, !dbg !3497
  %reg4 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3498
  %call5 = call i32 @rhs_regno(%struct.rtx_def* %reg4), !dbg !3498
  %reg6 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3498
  call void @df_ref_change_reg_with_loc(i32 %call5, i32 58, %struct.rtx_def* %reg6), !dbg !3498
  %reg7 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3498
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %reg7, i32 0, i32 1, !dbg !3498
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3498
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3498
  %rt_uint = bitcast %union.rtunion_def* %arrayidx8 to i32*, !dbg !3498
  store i32 58, i32* %rt_uint, align 8, !dbg !3498
  %plus = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 2, !dbg !3499
  %8 = bitcast %struct.rtx_def* %plus to i32*, !dbg !3499
  %bf.load9 = load i32, i32* %8, align 8, !dbg !3499
  %bf.clear10 = and i32 %bf.load9, -65536, !dbg !3499
  %bf.set11 = or i32 %bf.clear10, 49, !dbg !3499
  store i32 %bf.set11, i32* %8, align 8, !dbg !3499
  %reg12 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3500
  %plus13 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 2, !dbg !3501
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %plus13, i32 0, i32 1, !dbg !3501
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !3501
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !3501
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !3501
  store %struct.rtx_def* %reg12, %struct.rtx_def** %rt_rtx, align 8, !dbg !3502
  %reg17 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3503
  %plus18 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 2, !dbg !3504
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %plus18, i32 0, i32 1, !dbg !3504
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !3504
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 1, !dbg !3504
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !3504
  store %struct.rtx_def* %reg17, %struct.rtx_def** %rt_rtx22, align 8, !dbg !3505
  %neg = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 4, !dbg !3506
  %9 = bitcast %struct.rtx_def* %neg to i32*, !dbg !3506
  %bf.load23 = load i32, i32* %9, align 8, !dbg !3506
  %bf.clear24 = and i32 %bf.load23, -65536, !dbg !3506
  %bf.set25 = or i32 %bf.clear24, 51, !dbg !3506
  store i32 %bf.set25, i32* %9, align 8, !dbg !3506
  %reg26 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3507
  %neg27 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 4, !dbg !3508
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %neg27, i32 0, i32 1, !dbg !3508
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !3508
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 0, !dbg !3508
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !3508
  store %struct.rtx_def* %reg26, %struct.rtx_def** %rt_rtx31, align 8, !dbg !3509
  %mult = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 5, !dbg !3510
  %10 = bitcast %struct.rtx_def* %mult to i32*, !dbg !3510
  %bf.load32 = load i32, i32* %10, align 8, !dbg !3510
  %bf.clear33 = and i32 %bf.load32, -65536, !dbg !3510
  %bf.set34 = or i32 %bf.clear33, 52, !dbg !3510
  store i32 %bf.set34, i32* %10, align 8, !dbg !3510
  %reg35 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3511
  %mult36 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 5, !dbg !3512
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %mult36, i32 0, i32 1, !dbg !3512
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !3512
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 0, !dbg !3512
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !3512
  store %struct.rtx_def* %reg35, %struct.rtx_def** %rt_rtx40, align 8, !dbg !3513
  %reg41 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3514
  %mult42 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 5, !dbg !3515
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %mult42, i32 0, i32 1, !dbg !3515
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !3515
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 1, !dbg !3515
  %rt_rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**, !dbg !3515
  store %struct.rtx_def* %reg41, %struct.rtx_def** %rt_rtx46, align 8, !dbg !3516
  %sdiv = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 7, !dbg !3517
  %11 = bitcast %struct.rtx_def* %sdiv to i32*, !dbg !3517
  %bf.load47 = load i32, i32* %11, align 8, !dbg !3517
  %bf.clear48 = and i32 %bf.load47, -65536, !dbg !3517
  %bf.set49 = or i32 %bf.clear48, 55, !dbg !3517
  store i32 %bf.set49, i32* %11, align 8, !dbg !3517
  %reg50 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3518
  %sdiv51 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 7, !dbg !3519
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %sdiv51, i32 0, i32 1, !dbg !3519
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !3519
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 0, !dbg !3519
  %rt_rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**, !dbg !3519
  store %struct.rtx_def* %reg50, %struct.rtx_def** %rt_rtx55, align 8, !dbg !3520
  %reg56 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3521
  %sdiv57 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 7, !dbg !3522
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %sdiv57, i32 0, i32 1, !dbg !3522
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !3522
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 1, !dbg !3522
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !3522
  store %struct.rtx_def* %reg56, %struct.rtx_def** %rt_rtx61, align 8, !dbg !3523
  %udiv = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 9, !dbg !3524
  %12 = bitcast %struct.rtx_def* %udiv to i32*, !dbg !3524
  %bf.load62 = load i32, i32* %12, align 8, !dbg !3524
  %bf.clear63 = and i32 %bf.load62, -65536, !dbg !3524
  %bf.set64 = or i32 %bf.clear63, 59, !dbg !3524
  store i32 %bf.set64, i32* %12, align 8, !dbg !3524
  %reg65 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3525
  %udiv66 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 9, !dbg !3526
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %udiv66, i32 0, i32 1, !dbg !3526
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !3526
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 0, !dbg !3526
  %rt_rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**, !dbg !3526
  store %struct.rtx_def* %reg65, %struct.rtx_def** %rt_rtx70, align 8, !dbg !3527
  %reg71 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3528
  %udiv72 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 9, !dbg !3529
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %udiv72, i32 0, i32 1, !dbg !3529
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !3529
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 1, !dbg !3529
  %rt_rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**, !dbg !3529
  store %struct.rtx_def* %reg71, %struct.rtx_def** %rt_rtx76, align 8, !dbg !3530
  %sdiv_32 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 12, !dbg !3531
  %13 = bitcast %struct.rtx_def* %sdiv_32 to i32*, !dbg !3531
  %bf.load77 = load i32, i32* %13, align 8, !dbg !3531
  %bf.clear78 = and i32 %bf.load77, -65536, !dbg !3531
  %bf.set79 = or i32 %bf.clear78, 55, !dbg !3531
  store i32 %bf.set79, i32* %13, align 8, !dbg !3531
  %reg80 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3532
  %sdiv_3281 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 12, !dbg !3533
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %sdiv_3281, i32 0, i32 1, !dbg !3533
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !3533
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 0, !dbg !3533
  %rt_rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**, !dbg !3533
  store %struct.rtx_def* %reg80, %struct.rtx_def** %rt_rtx85, align 8, !dbg !3534
  %call86 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32), !dbg !3535
  %sdiv_3287 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 12, !dbg !3536
  %u88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %sdiv_3287, i32 0, i32 1, !dbg !3536
  %fld89 = bitcast %union.u* %u88 to [1 x %union.rtunion_def]*, !dbg !3536
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i64 0, i64 1, !dbg !3536
  %rt_rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**, !dbg !3536
  store %struct.rtx_def* %call86, %struct.rtx_def** %rt_rtx91, align 8, !dbg !3537
  %smod_32 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 14, !dbg !3538
  %14 = bitcast %struct.rtx_def* %smod_32 to i32*, !dbg !3538
  %bf.load92 = load i32, i32* %14, align 8, !dbg !3538
  %bf.clear93 = and i32 %bf.load92, -65536, !dbg !3538
  %bf.set94 = or i32 %bf.clear93, 58, !dbg !3538
  store i32 %bf.set94, i32* %14, align 8, !dbg !3538
  %reg95 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3539
  %smod_3296 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 14, !dbg !3540
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %smod_3296, i32 0, i32 1, !dbg !3540
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !3540
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 0, !dbg !3540
  %rt_rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**, !dbg !3540
  store %struct.rtx_def* %reg95, %struct.rtx_def** %rt_rtx100, align 8, !dbg !3541
  %sdiv_32101 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 12, !dbg !3542
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %sdiv_32101, i32 0, i32 1, !dbg !3542
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !3542
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 1, !dbg !3542
  %rt_rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**, !dbg !3542
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx105, align 8, !dbg !3542
  %smod_32106 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 14, !dbg !3543
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %smod_32106, i32 0, i32 1, !dbg !3543
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !3543
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 1, !dbg !3543
  %rt_rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**, !dbg !3543
  store %struct.rtx_def* %15, %struct.rtx_def** %rt_rtx110, align 8, !dbg !3544
  %zext = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 11, !dbg !3545
  %16 = bitcast %struct.rtx_def* %zext to i32*, !dbg !3545
  %bf.load111 = load i32, i32* %16, align 8, !dbg !3545
  %bf.clear112 = and i32 %bf.load111, -65536, !dbg !3545
  %bf.set113 = or i32 %bf.clear112, 99, !dbg !3545
  store i32 %bf.set113, i32* %16, align 8, !dbg !3545
  %reg114 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3546
  %zext115 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 11, !dbg !3547
  %u116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %zext115, i32 0, i32 1, !dbg !3547
  %fld117 = bitcast %union.u* %u116 to [1 x %union.rtunion_def]*, !dbg !3547
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i64 0, i64 0, !dbg !3547
  %rt_rtx119 = bitcast %union.rtunion_def* %arrayidx118 to %struct.rtx_def**, !dbg !3547
  store %struct.rtx_def* %reg114, %struct.rtx_def** %rt_rtx119, align 8, !dbg !3548
  %wide_mult = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 16, !dbg !3549
  %17 = bitcast %struct.rtx_def* %wide_mult to i32*, !dbg !3549
  %bf.load120 = load i32, i32* %17, align 8, !dbg !3549
  %bf.clear121 = and i32 %bf.load120, -65536, !dbg !3549
  %bf.set122 = or i32 %bf.clear121, 52, !dbg !3549
  store i32 %bf.set122, i32* %17, align 8, !dbg !3549
  %zext123 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 11, !dbg !3550
  %wide_mult124 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 16, !dbg !3551
  %u125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %wide_mult124, i32 0, i32 1, !dbg !3551
  %fld126 = bitcast %union.u* %u125 to [1 x %union.rtunion_def]*, !dbg !3551
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i64 0, i64 0, !dbg !3551
  %rt_rtx128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**, !dbg !3551
  store %struct.rtx_def* %zext123, %struct.rtx_def** %rt_rtx128, align 8, !dbg !3552
  %zext129 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 11, !dbg !3553
  %wide_mult130 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 16, !dbg !3554
  %u131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %wide_mult130, i32 0, i32 1, !dbg !3554
  %fld132 = bitcast %union.u* %u131 to [1 x %union.rtunion_def]*, !dbg !3554
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i64 0, i64 1, !dbg !3554
  %rt_rtx134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtx_def**, !dbg !3554
  store %struct.rtx_def* %zext129, %struct.rtx_def** %rt_rtx134, align 8, !dbg !3555
  %wide_lshr = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 18, !dbg !3556
  %18 = bitcast %struct.rtx_def* %wide_lshr to i32*, !dbg !3556
  %bf.load135 = load i32, i32* %18, align 8, !dbg !3556
  %bf.clear136 = and i32 %bf.load135, -65536, !dbg !3556
  %bf.set137 = or i32 %bf.clear136, 68, !dbg !3556
  store i32 %bf.set137, i32* %18, align 8, !dbg !3556
  %wide_mult138 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 16, !dbg !3557
  %wide_lshr139 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 18, !dbg !3558
  %u140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %wide_lshr139, i32 0, i32 1, !dbg !3558
  %fld141 = bitcast %union.u* %u140 to [1 x %union.rtunion_def]*, !dbg !3558
  %arrayidx142 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld141, i64 0, i64 0, !dbg !3558
  %rt_rtx143 = bitcast %union.rtunion_def* %arrayidx142 to %struct.rtx_def**, !dbg !3558
  store %struct.rtx_def* %wide_mult138, %struct.rtx_def** %rt_rtx143, align 8, !dbg !3559
  %wide_trunc = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 20, !dbg !3560
  %19 = bitcast %struct.rtx_def* %wide_trunc to i32*, !dbg !3560
  %bf.load144 = load i32, i32* %19, align 8, !dbg !3560
  %bf.clear145 = and i32 %bf.load144, -65536, !dbg !3560
  %bf.set146 = or i32 %bf.clear145, 100, !dbg !3560
  store i32 %bf.set146, i32* %19, align 8, !dbg !3560
  %wide_lshr147 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 18, !dbg !3561
  %wide_trunc148 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 20, !dbg !3562
  %u149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %wide_trunc148, i32 0, i32 1, !dbg !3562
  %fld150 = bitcast %union.u* %u149 to [1 x %union.rtunion_def]*, !dbg !3562
  %arrayidx151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld150, i64 0, i64 0, !dbg !3562
  %rt_rtx152 = bitcast %union.rtunion_def* %arrayidx151 to %struct.rtx_def**, !dbg !3562
  store %struct.rtx_def* %wide_lshr147, %struct.rtx_def** %rt_rtx152, align 8, !dbg !3563
  %shift = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 21, !dbg !3564
  %20 = bitcast %struct.rtx_def* %shift to i32*, !dbg !3564
  %bf.load153 = load i32, i32* %20, align 8, !dbg !3564
  %bf.clear154 = and i32 %bf.load153, -65536, !dbg !3564
  %bf.set155 = or i32 %bf.clear154, 65, !dbg !3564
  store i32 %bf.set155, i32* %20, align 8, !dbg !3564
  %reg156 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3565
  %shift157 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 21, !dbg !3566
  %u158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %shift157, i32 0, i32 1, !dbg !3566
  %fld159 = bitcast %union.u* %u158 to [1 x %union.rtunion_def]*, !dbg !3566
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i64 0, i64 0, !dbg !3566
  %rt_rtx161 = bitcast %union.rtunion_def* %arrayidx160 to %struct.rtx_def**, !dbg !3566
  store %struct.rtx_def* %reg156, %struct.rtx_def** %rt_rtx161, align 8, !dbg !3567
  %shift_mult = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 23, !dbg !3568
  %21 = bitcast %struct.rtx_def* %shift_mult to i32*, !dbg !3568
  %bf.load162 = load i32, i32* %21, align 8, !dbg !3568
  %bf.clear163 = and i32 %bf.load162, -65536, !dbg !3568
  %bf.set164 = or i32 %bf.clear163, 52, !dbg !3568
  store i32 %bf.set164, i32* %21, align 8, !dbg !3568
  %reg165 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3569
  %shift_mult166 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 23, !dbg !3570
  %u167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %shift_mult166, i32 0, i32 1, !dbg !3570
  %fld168 = bitcast %union.u* %u167 to [1 x %union.rtunion_def]*, !dbg !3570
  %arrayidx169 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld168, i64 0, i64 0, !dbg !3570
  %rt_rtx170 = bitcast %union.rtunion_def* %arrayidx169 to %struct.rtx_def**, !dbg !3570
  store %struct.rtx_def* %reg165, %struct.rtx_def** %rt_rtx170, align 8, !dbg !3571
  %shift_add = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 25, !dbg !3572
  %22 = bitcast %struct.rtx_def* %shift_add to i32*, !dbg !3572
  %bf.load171 = load i32, i32* %22, align 8, !dbg !3572
  %bf.clear172 = and i32 %bf.load171, -65536, !dbg !3572
  %bf.set173 = or i32 %bf.clear172, 49, !dbg !3572
  store i32 %bf.set173, i32* %22, align 8, !dbg !3572
  %shift_mult174 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 23, !dbg !3573
  %shift_add175 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 25, !dbg !3574
  %u176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %shift_add175, i32 0, i32 1, !dbg !3574
  %fld177 = bitcast %union.u* %u176 to [1 x %union.rtunion_def]*, !dbg !3574
  %arrayidx178 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld177, i64 0, i64 0, !dbg !3574
  %rt_rtx179 = bitcast %union.rtunion_def* %arrayidx178 to %struct.rtx_def**, !dbg !3574
  store %struct.rtx_def* %shift_mult174, %struct.rtx_def** %rt_rtx179, align 8, !dbg !3575
  %reg180 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3576
  %shift_add181 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 25, !dbg !3577
  %u182 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %shift_add181, i32 0, i32 1, !dbg !3577
  %fld183 = bitcast %union.u* %u182 to [1 x %union.rtunion_def]*, !dbg !3577
  %arrayidx184 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld183, i64 0, i64 1, !dbg !3577
  %rt_rtx185 = bitcast %union.rtunion_def* %arrayidx184 to %struct.rtx_def**, !dbg !3577
  store %struct.rtx_def* %reg180, %struct.rtx_def** %rt_rtx185, align 8, !dbg !3578
  %shift_sub0 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 27, !dbg !3579
  %23 = bitcast %struct.rtx_def* %shift_sub0 to i32*, !dbg !3579
  %bf.load186 = load i32, i32* %23, align 8, !dbg !3579
  %bf.clear187 = and i32 %bf.load186, -65536, !dbg !3579
  %bf.set188 = or i32 %bf.clear187, 50, !dbg !3579
  store i32 %bf.set188, i32* %23, align 8, !dbg !3579
  %shift_mult189 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 23, !dbg !3580
  %shift_sub0190 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 27, !dbg !3581
  %u191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %shift_sub0190, i32 0, i32 1, !dbg !3581
  %fld192 = bitcast %union.u* %u191 to [1 x %union.rtunion_def]*, !dbg !3581
  %arrayidx193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld192, i64 0, i64 0, !dbg !3581
  %rt_rtx194 = bitcast %union.rtunion_def* %arrayidx193 to %struct.rtx_def**, !dbg !3581
  store %struct.rtx_def* %shift_mult189, %struct.rtx_def** %rt_rtx194, align 8, !dbg !3582
  %reg195 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3583
  %shift_sub0196 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 27, !dbg !3584
  %u197 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %shift_sub0196, i32 0, i32 1, !dbg !3584
  %fld198 = bitcast %union.u* %u197 to [1 x %union.rtunion_def]*, !dbg !3584
  %arrayidx199 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld198, i64 0, i64 1, !dbg !3584
  %rt_rtx200 = bitcast %union.rtunion_def* %arrayidx199 to %struct.rtx_def**, !dbg !3584
  store %struct.rtx_def* %reg195, %struct.rtx_def** %rt_rtx200, align 8, !dbg !3585
  %shift_sub1 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 29, !dbg !3586
  %24 = bitcast %struct.rtx_def* %shift_sub1 to i32*, !dbg !3586
  %bf.load201 = load i32, i32* %24, align 8, !dbg !3586
  %bf.clear202 = and i32 %bf.load201, -65536, !dbg !3586
  %bf.set203 = or i32 %bf.clear202, 50, !dbg !3586
  store i32 %bf.set203, i32* %24, align 8, !dbg !3586
  %reg204 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3587
  %shift_sub1205 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 29, !dbg !3588
  %u206 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %shift_sub1205, i32 0, i32 1, !dbg !3588
  %fld207 = bitcast %union.u* %u206 to [1 x %union.rtunion_def]*, !dbg !3588
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i64 0, i64 0, !dbg !3588
  %rt_rtx209 = bitcast %union.rtunion_def* %arrayidx208 to %struct.rtx_def**, !dbg !3588
  store %struct.rtx_def* %reg204, %struct.rtx_def** %rt_rtx209, align 8, !dbg !3589
  %shift_mult210 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 23, !dbg !3590
  %shift_sub1211 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 29, !dbg !3591
  %u212 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %shift_sub1211, i32 0, i32 1, !dbg !3591
  %fld213 = bitcast %union.u* %u212 to [1 x %union.rtunion_def]*, !dbg !3591
  %arrayidx214 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld213, i64 0, i64 1, !dbg !3591
  %rt_rtx215 = bitcast %union.rtunion_def* %arrayidx214 to %struct.rtx_def**, !dbg !3591
  store %struct.rtx_def* %shift_mult210, %struct.rtx_def** %rt_rtx215, align 8, !dbg !3592
  store i32 0, i32* %speed, align 4, !dbg !3593
  br label %for.cond216, !dbg !3595

for.cond216:                                      ; preds = %for.inc528, %for.end
  %25 = load i32, i32* %speed, align 4, !dbg !3596
  %cmp217 = icmp slt i32 %25, 2, !dbg !3598
  br i1 %cmp217, label %for.body219, label %for.end530, !dbg !3599

for.body219:                                      ; preds = %for.cond216
  %26 = load i32, i32* %speed, align 4, !dbg !3600
  %conv220 = trunc i32 %26 to i8, !dbg !3600
  store i8 %conv220, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 42), align 2, !dbg !3602
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !3603
  %28 = load i32, i32* %speed, align 4, !dbg !3604
  %conv221 = trunc i32 %28 to i8, !dbg !3604
  %call222 = call i32 @rtx_cost(%struct.rtx_def* %27, i32 23, i8 zeroext %conv221), !dbg !3605
  %29 = load i32, i32* %speed, align 4, !dbg !3606
  %idxprom223 = sext i32 %29 to i64, !dbg !3607
  %arrayidx224 = getelementptr inbounds [2 x i32], [2 x i32]* @zero_cost, i64 0, i64 %idxprom223, !dbg !3607
  store i32 %call222, i32* %arrayidx224, align 4, !dbg !3608
  %30 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 2), align 2, !dbg !3609
  %conv225 = zext i8 %30 to i32, !dbg !3609
  store i32 %conv225, i32* %mode, align 4, !dbg !3611
  br label %for.cond226, !dbg !3612

for.cond226:                                      ; preds = %for.inc523, %for.body219
  %31 = load i32, i32* %mode, align 4, !dbg !3613
  %cmp227 = icmp ne i32 %31, 0, !dbg !3615
  br i1 %cmp227, label %for.body229, label %for.end527, !dbg !3616

for.body229:                                      ; preds = %for.cond226
  %32 = load i32, i32* %mode, align 4, !dbg !3617
  %reg230 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 0, !dbg !3617
  %33 = bitcast %struct.rtx_def* %reg230 to i32*, !dbg !3617
  %bf.load231 = load i32, i32* %33, align 8, !dbg !3617
  %bf.value = and i32 %32, 255, !dbg !3617
  %bf.shl = shl i32 %bf.value, 16, !dbg !3617
  %bf.clear232 = and i32 %bf.load231, -16711681, !dbg !3617
  %bf.set233 = or i32 %bf.clear232, %bf.shl, !dbg !3617
  store i32 %bf.set233, i32* %33, align 8, !dbg !3617
  %34 = load i32, i32* %mode, align 4, !dbg !3619
  %plus234 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 2, !dbg !3619
  %35 = bitcast %struct.rtx_def* %plus234 to i32*, !dbg !3619
  %bf.load235 = load i32, i32* %35, align 8, !dbg !3619
  %bf.value236 = and i32 %34, 255, !dbg !3619
  %bf.shl237 = shl i32 %bf.value236, 16, !dbg !3619
  %bf.clear238 = and i32 %bf.load235, -16711681, !dbg !3619
  %bf.set239 = or i32 %bf.clear238, %bf.shl237, !dbg !3619
  store i32 %bf.set239, i32* %35, align 8, !dbg !3619
  %36 = load i32, i32* %mode, align 4, !dbg !3620
  %neg240 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 4, !dbg !3620
  %37 = bitcast %struct.rtx_def* %neg240 to i32*, !dbg !3620
  %bf.load241 = load i32, i32* %37, align 8, !dbg !3620
  %bf.value242 = and i32 %36, 255, !dbg !3620
  %bf.shl243 = shl i32 %bf.value242, 16, !dbg !3620
  %bf.clear244 = and i32 %bf.load241, -16711681, !dbg !3620
  %bf.set245 = or i32 %bf.clear244, %bf.shl243, !dbg !3620
  store i32 %bf.set245, i32* %37, align 8, !dbg !3620
  %38 = load i32, i32* %mode, align 4, !dbg !3621
  %mult246 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 5, !dbg !3621
  %39 = bitcast %struct.rtx_def* %mult246 to i32*, !dbg !3621
  %bf.load247 = load i32, i32* %39, align 8, !dbg !3621
  %bf.value248 = and i32 %38, 255, !dbg !3621
  %bf.shl249 = shl i32 %bf.value248, 16, !dbg !3621
  %bf.clear250 = and i32 %bf.load247, -16711681, !dbg !3621
  %bf.set251 = or i32 %bf.clear250, %bf.shl249, !dbg !3621
  store i32 %bf.set251, i32* %39, align 8, !dbg !3621
  %40 = load i32, i32* %mode, align 4, !dbg !3622
  %sdiv252 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 7, !dbg !3622
  %41 = bitcast %struct.rtx_def* %sdiv252 to i32*, !dbg !3622
  %bf.load253 = load i32, i32* %41, align 8, !dbg !3622
  %bf.value254 = and i32 %40, 255, !dbg !3622
  %bf.shl255 = shl i32 %bf.value254, 16, !dbg !3622
  %bf.clear256 = and i32 %bf.load253, -16711681, !dbg !3622
  %bf.set257 = or i32 %bf.clear256, %bf.shl255, !dbg !3622
  store i32 %bf.set257, i32* %41, align 8, !dbg !3622
  %42 = load i32, i32* %mode, align 4, !dbg !3623
  %udiv258 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 9, !dbg !3623
  %43 = bitcast %struct.rtx_def* %udiv258 to i32*, !dbg !3623
  %bf.load259 = load i32, i32* %43, align 8, !dbg !3623
  %bf.value260 = and i32 %42, 255, !dbg !3623
  %bf.shl261 = shl i32 %bf.value260, 16, !dbg !3623
  %bf.clear262 = and i32 %bf.load259, -16711681, !dbg !3623
  %bf.set263 = or i32 %bf.clear262, %bf.shl261, !dbg !3623
  store i32 %bf.set263, i32* %43, align 8, !dbg !3623
  %44 = load i32, i32* %mode, align 4, !dbg !3624
  %sdiv_32264 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 12, !dbg !3624
  %45 = bitcast %struct.rtx_def* %sdiv_32264 to i32*, !dbg !3624
  %bf.load265 = load i32, i32* %45, align 8, !dbg !3624
  %bf.value266 = and i32 %44, 255, !dbg !3624
  %bf.shl267 = shl i32 %bf.value266, 16, !dbg !3624
  %bf.clear268 = and i32 %bf.load265, -16711681, !dbg !3624
  %bf.set269 = or i32 %bf.clear268, %bf.shl267, !dbg !3624
  store i32 %bf.set269, i32* %45, align 8, !dbg !3624
  %46 = load i32, i32* %mode, align 4, !dbg !3625
  %smod_32270 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 14, !dbg !3625
  %47 = bitcast %struct.rtx_def* %smod_32270 to i32*, !dbg !3625
  %bf.load271 = load i32, i32* %47, align 8, !dbg !3625
  %bf.value272 = and i32 %46, 255, !dbg !3625
  %bf.shl273 = shl i32 %bf.value272, 16, !dbg !3625
  %bf.clear274 = and i32 %bf.load271, -16711681, !dbg !3625
  %bf.set275 = or i32 %bf.clear274, %bf.shl273, !dbg !3625
  store i32 %bf.set275, i32* %47, align 8, !dbg !3625
  %48 = load i32, i32* %mode, align 4, !dbg !3626
  %wide_trunc276 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 20, !dbg !3626
  %49 = bitcast %struct.rtx_def* %wide_trunc276 to i32*, !dbg !3626
  %bf.load277 = load i32, i32* %49, align 8, !dbg !3626
  %bf.value278 = and i32 %48, 255, !dbg !3626
  %bf.shl279 = shl i32 %bf.value278, 16, !dbg !3626
  %bf.clear280 = and i32 %bf.load277, -16711681, !dbg !3626
  %bf.set281 = or i32 %bf.clear280, %bf.shl279, !dbg !3626
  store i32 %bf.set281, i32* %49, align 8, !dbg !3626
  %50 = load i32, i32* %mode, align 4, !dbg !3627
  %shift282 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 21, !dbg !3627
  %51 = bitcast %struct.rtx_def* %shift282 to i32*, !dbg !3627
  %bf.load283 = load i32, i32* %51, align 8, !dbg !3627
  %bf.value284 = and i32 %50, 255, !dbg !3627
  %bf.shl285 = shl i32 %bf.value284, 16, !dbg !3627
  %bf.clear286 = and i32 %bf.load283, -16711681, !dbg !3627
  %bf.set287 = or i32 %bf.clear286, %bf.shl285, !dbg !3627
  store i32 %bf.set287, i32* %51, align 8, !dbg !3627
  %52 = load i32, i32* %mode, align 4, !dbg !3628
  %shift_mult288 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 23, !dbg !3628
  %53 = bitcast %struct.rtx_def* %shift_mult288 to i32*, !dbg !3628
  %bf.load289 = load i32, i32* %53, align 8, !dbg !3628
  %bf.value290 = and i32 %52, 255, !dbg !3628
  %bf.shl291 = shl i32 %bf.value290, 16, !dbg !3628
  %bf.clear292 = and i32 %bf.load289, -16711681, !dbg !3628
  %bf.set293 = or i32 %bf.clear292, %bf.shl291, !dbg !3628
  store i32 %bf.set293, i32* %53, align 8, !dbg !3628
  %54 = load i32, i32* %mode, align 4, !dbg !3629
  %shift_add294 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 25, !dbg !3629
  %55 = bitcast %struct.rtx_def* %shift_add294 to i32*, !dbg !3629
  %bf.load295 = load i32, i32* %55, align 8, !dbg !3629
  %bf.value296 = and i32 %54, 255, !dbg !3629
  %bf.shl297 = shl i32 %bf.value296, 16, !dbg !3629
  %bf.clear298 = and i32 %bf.load295, -16711681, !dbg !3629
  %bf.set299 = or i32 %bf.clear298, %bf.shl297, !dbg !3629
  store i32 %bf.set299, i32* %55, align 8, !dbg !3629
  %56 = load i32, i32* %mode, align 4, !dbg !3630
  %shift_sub0300 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 27, !dbg !3630
  %57 = bitcast %struct.rtx_def* %shift_sub0300 to i32*, !dbg !3630
  %bf.load301 = load i32, i32* %57, align 8, !dbg !3630
  %bf.value302 = and i32 %56, 255, !dbg !3630
  %bf.shl303 = shl i32 %bf.value302, 16, !dbg !3630
  %bf.clear304 = and i32 %bf.load301, -16711681, !dbg !3630
  %bf.set305 = or i32 %bf.clear304, %bf.shl303, !dbg !3630
  store i32 %bf.set305, i32* %57, align 8, !dbg !3630
  %58 = load i32, i32* %mode, align 4, !dbg !3631
  %shift_sub1306 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 29, !dbg !3631
  %59 = bitcast %struct.rtx_def* %shift_sub1306 to i32*, !dbg !3631
  %bf.load307 = load i32, i32* %59, align 8, !dbg !3631
  %bf.value308 = and i32 %58, 255, !dbg !3631
  %bf.shl309 = shl i32 %bf.value308, 16, !dbg !3631
  %bf.clear310 = and i32 %bf.load307, -16711681, !dbg !3631
  %bf.set311 = or i32 %bf.clear310, %bf.shl309, !dbg !3631
  store i32 %bf.set311, i32* %59, align 8, !dbg !3631
  %plus312 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 2, !dbg !3632
  %60 = load i32, i32* %speed, align 4, !dbg !3633
  %conv313 = trunc i32 %60 to i8, !dbg !3633
  %call314 = call i32 @rtx_cost(%struct.rtx_def* %plus312, i32 23, i8 zeroext %conv313), !dbg !3634
  %61 = load i32, i32* %speed, align 4, !dbg !3635
  %idxprom315 = sext i32 %61 to i64, !dbg !3636
  %arrayidx316 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom315, !dbg !3636
  %62 = load i32, i32* %mode, align 4, !dbg !3637
  %idxprom317 = zext i32 %62 to i64, !dbg !3636
  %arrayidx318 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx316, i64 0, i64 %idxprom317, !dbg !3636
  store i32 %call314, i32* %arrayidx318, align 4, !dbg !3638
  %neg319 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 4, !dbg !3639
  %63 = load i32, i32* %speed, align 4, !dbg !3640
  %conv320 = trunc i32 %63 to i8, !dbg !3640
  %call321 = call i32 @rtx_cost(%struct.rtx_def* %neg319, i32 23, i8 zeroext %conv320), !dbg !3641
  %64 = load i32, i32* %speed, align 4, !dbg !3642
  %idxprom322 = sext i32 %64 to i64, !dbg !3643
  %arrayidx323 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @neg_cost, i64 0, i64 %idxprom322, !dbg !3643
  %65 = load i32, i32* %mode, align 4, !dbg !3644
  %idxprom324 = zext i32 %65 to i64, !dbg !3643
  %arrayidx325 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx323, i64 0, i64 %idxprom324, !dbg !3643
  store i32 %call321, i32* %arrayidx325, align 4, !dbg !3645
  %mult326 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 5, !dbg !3646
  %66 = load i32, i32* %speed, align 4, !dbg !3647
  %conv327 = trunc i32 %66 to i8, !dbg !3647
  %call328 = call i32 @rtx_cost(%struct.rtx_def* %mult326, i32 23, i8 zeroext %conv327), !dbg !3648
  %67 = load i32, i32* %speed, align 4, !dbg !3649
  %idxprom329 = sext i32 %67 to i64, !dbg !3650
  %arrayidx330 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @mul_cost, i64 0, i64 %idxprom329, !dbg !3650
  %68 = load i32, i32* %mode, align 4, !dbg !3651
  %idxprom331 = zext i32 %68 to i64, !dbg !3650
  %arrayidx332 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx330, i64 0, i64 %idxprom331, !dbg !3650
  store i32 %call328, i32* %arrayidx332, align 4, !dbg !3652
  %sdiv333 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 7, !dbg !3653
  %69 = load i32, i32* %speed, align 4, !dbg !3654
  %conv334 = trunc i32 %69 to i8, !dbg !3654
  %call335 = call i32 @rtx_cost(%struct.rtx_def* %sdiv333, i32 23, i8 zeroext %conv334), !dbg !3655
  %70 = load i32, i32* %speed, align 4, !dbg !3656
  %idxprom336 = sext i32 %70 to i64, !dbg !3657
  %arrayidx337 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @sdiv_cost, i64 0, i64 %idxprom336, !dbg !3657
  %71 = load i32, i32* %mode, align 4, !dbg !3658
  %idxprom338 = zext i32 %71 to i64, !dbg !3657
  %arrayidx339 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx337, i64 0, i64 %idxprom338, !dbg !3657
  store i32 %call335, i32* %arrayidx339, align 4, !dbg !3659
  %udiv340 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 9, !dbg !3660
  %72 = load i32, i32* %speed, align 4, !dbg !3661
  %conv341 = trunc i32 %72 to i8, !dbg !3661
  %call342 = call i32 @rtx_cost(%struct.rtx_def* %udiv340, i32 23, i8 zeroext %conv341), !dbg !3662
  %73 = load i32, i32* %speed, align 4, !dbg !3663
  %idxprom343 = sext i32 %73 to i64, !dbg !3664
  %arrayidx344 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @udiv_cost, i64 0, i64 %idxprom343, !dbg !3664
  %74 = load i32, i32* %mode, align 4, !dbg !3665
  %idxprom345 = zext i32 %74 to i64, !dbg !3664
  %arrayidx346 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx344, i64 0, i64 %idxprom345, !dbg !3664
  store i32 %call342, i32* %arrayidx346, align 4, !dbg !3666
  %sdiv_32347 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 12, !dbg !3667
  %75 = load i32, i32* %speed, align 4, !dbg !3668
  %conv348 = trunc i32 %75 to i8, !dbg !3668
  %call349 = call i32 @rtx_cost(%struct.rtx_def* %sdiv_32347, i32 23, i8 zeroext %conv348), !dbg !3669
  %76 = load i32, i32* %speed, align 4, !dbg !3670
  %idxprom350 = sext i32 %76 to i64, !dbg !3671
  %arrayidx351 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom350, !dbg !3671
  %77 = load i32, i32* %mode, align 4, !dbg !3672
  %idxprom352 = zext i32 %77 to i64, !dbg !3671
  %arrayidx353 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx351, i64 0, i64 %idxprom352, !dbg !3671
  %78 = load i32, i32* %arrayidx353, align 4, !dbg !3671
  %mul = mul nsw i32 2, %78, !dbg !3673
  %cmp354 = icmp sle i32 %call349, %mul, !dbg !3674
  %conv355 = zext i1 %cmp354 to i32, !dbg !3674
  %conv356 = trunc i32 %conv355 to i8, !dbg !3675
  %79 = load i32, i32* %speed, align 4, !dbg !3676
  %idxprom357 = sext i32 %79 to i64, !dbg !3677
  %arrayidx358 = getelementptr inbounds [2 x [87 x i8]], [2 x [87 x i8]]* @sdiv_pow2_cheap, i64 0, i64 %idxprom357, !dbg !3677
  %80 = load i32, i32* %mode, align 4, !dbg !3678
  %idxprom359 = zext i32 %80 to i64, !dbg !3677
  %arrayidx360 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx358, i64 0, i64 %idxprom359, !dbg !3677
  store i8 %conv356, i8* %arrayidx360, align 1, !dbg !3679
  %smod_32361 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 14, !dbg !3680
  %81 = load i32, i32* %speed, align 4, !dbg !3681
  %conv362 = trunc i32 %81 to i8, !dbg !3681
  %call363 = call i32 @rtx_cost(%struct.rtx_def* %smod_32361, i32 23, i8 zeroext %conv362), !dbg !3682
  %82 = load i32, i32* %speed, align 4, !dbg !3683
  %idxprom364 = sext i32 %82 to i64, !dbg !3684
  %arrayidx365 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom364, !dbg !3684
  %83 = load i32, i32* %mode, align 4, !dbg !3685
  %idxprom366 = zext i32 %83 to i64, !dbg !3684
  %arrayidx367 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx365, i64 0, i64 %idxprom366, !dbg !3684
  %84 = load i32, i32* %arrayidx367, align 4, !dbg !3684
  %mul368 = mul nsw i32 4, %84, !dbg !3686
  %cmp369 = icmp sle i32 %call363, %mul368, !dbg !3687
  %conv370 = zext i1 %cmp369 to i32, !dbg !3687
  %conv371 = trunc i32 %conv370 to i8, !dbg !3688
  %85 = load i32, i32* %speed, align 4, !dbg !3689
  %idxprom372 = sext i32 %85 to i64, !dbg !3690
  %arrayidx373 = getelementptr inbounds [2 x [87 x i8]], [2 x [87 x i8]]* @smod_pow2_cheap, i64 0, i64 %idxprom372, !dbg !3690
  %86 = load i32, i32* %mode, align 4, !dbg !3691
  %idxprom374 = zext i32 %86 to i64, !dbg !3690
  %arrayidx375 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx373, i64 0, i64 %idxprom374, !dbg !3690
  store i8 %conv371, i8* %arrayidx375, align 1, !dbg !3692
  %87 = load i32, i32* %mode, align 4, !dbg !3693
  %idxprom376 = zext i32 %87 to i64, !dbg !3693
  %arrayidx377 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom376, !dbg !3693
  %88 = load i8, i8* %arrayidx377, align 1, !dbg !3693
  %conv378 = zext i8 %88 to i32, !dbg !3693
  store i32 %conv378, i32* %wider_mode, align 4, !dbg !3694
  %89 = load i32, i32* %wider_mode, align 4, !dbg !3695
  %cmp379 = icmp ne i32 %89, 0, !dbg !3697
  br i1 %cmp379, label %if.then, label %if.end, !dbg !3698

if.then:                                          ; preds = %for.body229
  %90 = load i32, i32* %wider_mode, align 4, !dbg !3699
  %zext381 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 11, !dbg !3699
  %91 = bitcast %struct.rtx_def* %zext381 to i32*, !dbg !3699
  %bf.load382 = load i32, i32* %91, align 8, !dbg !3699
  %bf.value383 = and i32 %90, 255, !dbg !3699
  %bf.shl384 = shl i32 %bf.value383, 16, !dbg !3699
  %bf.clear385 = and i32 %bf.load382, -16711681, !dbg !3699
  %bf.set386 = or i32 %bf.clear385, %bf.shl384, !dbg !3699
  store i32 %bf.set386, i32* %91, align 8, !dbg !3699
  %92 = load i32, i32* %wider_mode, align 4, !dbg !3701
  %wide_mult387 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 16, !dbg !3701
  %93 = bitcast %struct.rtx_def* %wide_mult387 to i32*, !dbg !3701
  %bf.load388 = load i32, i32* %93, align 8, !dbg !3701
  %bf.value389 = and i32 %92, 255, !dbg !3701
  %bf.shl390 = shl i32 %bf.value389, 16, !dbg !3701
  %bf.clear391 = and i32 %bf.load388, -16711681, !dbg !3701
  %bf.set392 = or i32 %bf.clear391, %bf.shl390, !dbg !3701
  store i32 %bf.set392, i32* %93, align 8, !dbg !3701
  %94 = load i32, i32* %wider_mode, align 4, !dbg !3702
  %wide_lshr393 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 18, !dbg !3702
  %95 = bitcast %struct.rtx_def* %wide_lshr393 to i32*, !dbg !3702
  %bf.load394 = load i32, i32* %95, align 8, !dbg !3702
  %bf.value395 = and i32 %94, 255, !dbg !3702
  %bf.shl396 = shl i32 %bf.value395, 16, !dbg !3702
  %bf.clear397 = and i32 %bf.load394, -16711681, !dbg !3702
  %bf.set398 = or i32 %bf.clear397, %bf.shl396, !dbg !3702
  store i32 %bf.set398, i32* %95, align 8, !dbg !3702
  %96 = load i32, i32* %mode, align 4, !dbg !3703
  %idxprom399 = zext i32 %96 to i64, !dbg !3703
  %arrayidx400 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom399, !dbg !3703
  %97 = load i8, i8* %arrayidx400, align 1, !dbg !3703
  %conv401 = zext i8 %97 to i16, !dbg !3703
  %conv402 = zext i16 %conv401 to i32, !dbg !3703
  %mul403 = mul nsw i32 %conv402, 8, !dbg !3703
  %conv404 = trunc i32 %mul403 to i16, !dbg !3703
  %conv405 = zext i16 %conv404 to i64, !dbg !3703
  %call406 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv405), !dbg !3703
  %wide_lshr407 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 18, !dbg !3704
  %u408 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %wide_lshr407, i32 0, i32 1, !dbg !3704
  %fld409 = bitcast %union.u* %u408 to [1 x %union.rtunion_def]*, !dbg !3704
  %arrayidx410 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld409, i64 0, i64 1, !dbg !3704
  %rt_rtx411 = bitcast %union.rtunion_def* %arrayidx410 to %struct.rtx_def**, !dbg !3704
  store %struct.rtx_def* %call406, %struct.rtx_def** %rt_rtx411, align 8, !dbg !3705
  %wide_mult412 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 16, !dbg !3706
  %98 = load i32, i32* %speed, align 4, !dbg !3707
  %conv413 = trunc i32 %98 to i8, !dbg !3707
  %call414 = call i32 @rtx_cost(%struct.rtx_def* %wide_mult412, i32 23, i8 zeroext %conv413), !dbg !3708
  %99 = load i32, i32* %speed, align 4, !dbg !3709
  %idxprom415 = sext i32 %99 to i64, !dbg !3710
  %arrayidx416 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @mul_widen_cost, i64 0, i64 %idxprom415, !dbg !3710
  %100 = load i32, i32* %wider_mode, align 4, !dbg !3711
  %idxprom417 = zext i32 %100 to i64, !dbg !3710
  %arrayidx418 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx416, i64 0, i64 %idxprom417, !dbg !3710
  store i32 %call414, i32* %arrayidx418, align 4, !dbg !3712
  %wide_trunc419 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 20, !dbg !3713
  %101 = load i32, i32* %speed, align 4, !dbg !3714
  %conv420 = trunc i32 %101 to i8, !dbg !3714
  %call421 = call i32 @rtx_cost(%struct.rtx_def* %wide_trunc419, i32 23, i8 zeroext %conv420), !dbg !3715
  %102 = load i32, i32* %speed, align 4, !dbg !3716
  %idxprom422 = sext i32 %102 to i64, !dbg !3717
  %arrayidx423 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @mul_highpart_cost, i64 0, i64 %idxprom422, !dbg !3717
  %103 = load i32, i32* %mode, align 4, !dbg !3718
  %idxprom424 = zext i32 %103 to i64, !dbg !3717
  %arrayidx425 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx423, i64 0, i64 %idxprom424, !dbg !3717
  store i32 %call421, i32* %arrayidx425, align 4, !dbg !3719
  br label %if.end, !dbg !3720

if.end:                                           ; preds = %if.then, %for.body229
  %104 = load i32, i32* %speed, align 4, !dbg !3721
  %idxprom426 = sext i32 %104 to i64, !dbg !3722
  %arrayidx427 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom426, !dbg !3722
  %105 = load i32, i32* %mode, align 4, !dbg !3723
  %idxprom428 = zext i32 %105 to i64, !dbg !3722
  %arrayidx429 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx427, i64 0, i64 %idxprom428, !dbg !3722
  %arrayidx430 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx429, i64 0, i64 0, !dbg !3722
  store i32 0, i32* %arrayidx430, align 16, !dbg !3724
  %106 = load i32, i32* %speed, align 4, !dbg !3725
  %idxprom431 = sext i32 %106 to i64, !dbg !3726
  %arrayidx432 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom431, !dbg !3726
  %107 = load i32, i32* %mode, align 4, !dbg !3727
  %idxprom433 = zext i32 %107 to i64, !dbg !3726
  %arrayidx434 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx432, i64 0, i64 %idxprom433, !dbg !3726
  %108 = load i32, i32* %arrayidx434, align 4, !dbg !3726
  %109 = load i32, i32* %speed, align 4, !dbg !3728
  %idxprom435 = sext i32 %109 to i64, !dbg !3729
  %arrayidx436 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftsub1_cost, i64 0, i64 %idxprom435, !dbg !3729
  %110 = load i32, i32* %mode, align 4, !dbg !3730
  %idxprom437 = zext i32 %110 to i64, !dbg !3729
  %arrayidx438 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx436, i64 0, i64 %idxprom437, !dbg !3729
  %arrayidx439 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx438, i64 0, i64 0, !dbg !3729
  store i32 %108, i32* %arrayidx439, align 16, !dbg !3731
  %111 = load i32, i32* %speed, align 4, !dbg !3732
  %idxprom440 = sext i32 %111 to i64, !dbg !3733
  %arrayidx441 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftsub0_cost, i64 0, i64 %idxprom440, !dbg !3733
  %112 = load i32, i32* %mode, align 4, !dbg !3734
  %idxprom442 = zext i32 %112 to i64, !dbg !3733
  %arrayidx443 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx441, i64 0, i64 %idxprom442, !dbg !3733
  %arrayidx444 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx443, i64 0, i64 0, !dbg !3733
  store i32 %108, i32* %arrayidx444, align 16, !dbg !3735
  %113 = load i32, i32* %speed, align 4, !dbg !3736
  %idxprom445 = sext i32 %113 to i64, !dbg !3737
  %arrayidx446 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftadd_cost, i64 0, i64 %idxprom445, !dbg !3737
  %114 = load i32, i32* %mode, align 4, !dbg !3738
  %idxprom447 = zext i32 %114 to i64, !dbg !3737
  %arrayidx448 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx446, i64 0, i64 %idxprom447, !dbg !3737
  %arrayidx449 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx448, i64 0, i64 0, !dbg !3737
  store i32 %108, i32* %arrayidx449, align 16, !dbg !3739
  %115 = load i32, i32* %mode, align 4, !dbg !3740
  %idxprom450 = zext i32 %115 to i64, !dbg !3740
  %arrayidx451 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom450, !dbg !3740
  %116 = load i8, i8* %arrayidx451, align 1, !dbg !3740
  %conv452 = zext i8 %116 to i16, !dbg !3740
  %conv453 = zext i16 %conv452 to i32, !dbg !3740
  %mul454 = mul nsw i32 %conv453, 8, !dbg !3740
  %conv455 = trunc i32 %mul454 to i16, !dbg !3740
  %conv456 = zext i16 %conv455 to i32, !dbg !3740
  %cmp457 = icmp slt i32 32, %conv456, !dbg !3740
  br i1 %cmp457, label %cond.true, label %cond.false, !dbg !3740

cond.true:                                        ; preds = %if.end
  br label %cond.end, !dbg !3740

cond.false:                                       ; preds = %if.end
  %117 = load i32, i32* %mode, align 4, !dbg !3740
  %idxprom459 = zext i32 %117 to i64, !dbg !3740
  %arrayidx460 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom459, !dbg !3740
  %118 = load i8, i8* %arrayidx460, align 1, !dbg !3740
  %conv461 = zext i8 %118 to i16, !dbg !3740
  %conv462 = zext i16 %conv461 to i32, !dbg !3740
  %mul463 = mul nsw i32 %conv462, 8, !dbg !3740
  %conv464 = trunc i32 %mul463 to i16, !dbg !3740
  %conv465 = zext i16 %conv464 to i32, !dbg !3740
  br label %cond.end, !dbg !3740

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 32, %cond.true ], [ %conv465, %cond.false ], !dbg !3740
  store i32 %cond, i32* %n, align 4, !dbg !3741
  store i32 1, i32* %m, align 4, !dbg !3742
  br label %for.cond466, !dbg !3744

for.cond466:                                      ; preds = %for.inc520, %cond.end
  %119 = load i32, i32* %m, align 4, !dbg !3745
  %120 = load i32, i32* %n, align 4, !dbg !3747
  %cmp467 = icmp slt i32 %119, %120, !dbg !3748
  br i1 %cmp467, label %for.body469, label %for.end522, !dbg !3749

for.body469:                                      ; preds = %for.cond466
  %121 = load i32, i32* %m, align 4, !dbg !3750
  %idxprom470 = sext i32 %121 to i64, !dbg !3752
  %arrayidx471 = getelementptr inbounds [32 x %struct.rtx_def*], [32 x %struct.rtx_def*]* %cint, i64 0, i64 %idxprom470, !dbg !3752
  %122 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx471, align 8, !dbg !3752
  %shift472 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 21, !dbg !3753
  %u473 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %shift472, i32 0, i32 1, !dbg !3753
  %fld474 = bitcast %union.u* %u473 to [1 x %union.rtunion_def]*, !dbg !3753
  %arrayidx475 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld474, i64 0, i64 1, !dbg !3753
  %rt_rtx476 = bitcast %union.rtunion_def* %arrayidx475 to %struct.rtx_def**, !dbg !3753
  store %struct.rtx_def* %122, %struct.rtx_def** %rt_rtx476, align 8, !dbg !3754
  %123 = load i32, i32* %m, align 4, !dbg !3755
  %idxprom477 = sext i32 %123 to i64, !dbg !3756
  %arrayidx478 = getelementptr inbounds [32 x %struct.rtx_def*], [32 x %struct.rtx_def*]* %pow2, i64 0, i64 %idxprom477, !dbg !3756
  %124 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx478, align 8, !dbg !3756
  %shift_mult479 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 23, !dbg !3757
  %u480 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %shift_mult479, i32 0, i32 1, !dbg !3757
  %fld481 = bitcast %union.u* %u480 to [1 x %union.rtunion_def]*, !dbg !3757
  %arrayidx482 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld481, i64 0, i64 1, !dbg !3757
  %rt_rtx483 = bitcast %union.rtunion_def* %arrayidx482 to %struct.rtx_def**, !dbg !3757
  store %struct.rtx_def* %124, %struct.rtx_def** %rt_rtx483, align 8, !dbg !3758
  %shift484 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 21, !dbg !3759
  %125 = load i32, i32* %speed, align 4, !dbg !3760
  %conv485 = trunc i32 %125 to i8, !dbg !3760
  %call486 = call i32 @rtx_cost(%struct.rtx_def* %shift484, i32 23, i8 zeroext %conv485), !dbg !3761
  %126 = load i32, i32* %speed, align 4, !dbg !3762
  %idxprom487 = sext i32 %126 to i64, !dbg !3763
  %arrayidx488 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom487, !dbg !3763
  %127 = load i32, i32* %mode, align 4, !dbg !3764
  %idxprom489 = zext i32 %127 to i64, !dbg !3763
  %arrayidx490 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx488, i64 0, i64 %idxprom489, !dbg !3763
  %128 = load i32, i32* %m, align 4, !dbg !3765
  %idxprom491 = sext i32 %128 to i64, !dbg !3763
  %arrayidx492 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx490, i64 0, i64 %idxprom491, !dbg !3763
  store i32 %call486, i32* %arrayidx492, align 4, !dbg !3766
  %shift_add493 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 25, !dbg !3767
  %129 = load i32, i32* %speed, align 4, !dbg !3768
  %conv494 = trunc i32 %129 to i8, !dbg !3768
  %call495 = call i32 @rtx_cost(%struct.rtx_def* %shift_add493, i32 23, i8 zeroext %conv494), !dbg !3769
  %130 = load i32, i32* %speed, align 4, !dbg !3770
  %idxprom496 = sext i32 %130 to i64, !dbg !3771
  %arrayidx497 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftadd_cost, i64 0, i64 %idxprom496, !dbg !3771
  %131 = load i32, i32* %mode, align 4, !dbg !3772
  %idxprom498 = zext i32 %131 to i64, !dbg !3771
  %arrayidx499 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx497, i64 0, i64 %idxprom498, !dbg !3771
  %132 = load i32, i32* %m, align 4, !dbg !3773
  %idxprom500 = sext i32 %132 to i64, !dbg !3771
  %arrayidx501 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx499, i64 0, i64 %idxprom500, !dbg !3771
  store i32 %call495, i32* %arrayidx501, align 4, !dbg !3774
  %shift_sub0502 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 27, !dbg !3775
  %133 = load i32, i32* %speed, align 4, !dbg !3776
  %conv503 = trunc i32 %133 to i8, !dbg !3776
  %call504 = call i32 @rtx_cost(%struct.rtx_def* %shift_sub0502, i32 23, i8 zeroext %conv503), !dbg !3777
  %134 = load i32, i32* %speed, align 4, !dbg !3778
  %idxprom505 = sext i32 %134 to i64, !dbg !3779
  %arrayidx506 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftsub0_cost, i64 0, i64 %idxprom505, !dbg !3779
  %135 = load i32, i32* %mode, align 4, !dbg !3780
  %idxprom507 = zext i32 %135 to i64, !dbg !3779
  %arrayidx508 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx506, i64 0, i64 %idxprom507, !dbg !3779
  %136 = load i32, i32* %m, align 4, !dbg !3781
  %idxprom509 = sext i32 %136 to i64, !dbg !3779
  %arrayidx510 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx508, i64 0, i64 %idxprom509, !dbg !3779
  store i32 %call504, i32* %arrayidx510, align 4, !dbg !3782
  %shift_sub1511 = getelementptr inbounds %struct.anon, %struct.anon* %all, i32 0, i32 29, !dbg !3783
  %137 = load i32, i32* %speed, align 4, !dbg !3784
  %conv512 = trunc i32 %137 to i8, !dbg !3784
  %call513 = call i32 @rtx_cost(%struct.rtx_def* %shift_sub1511, i32 23, i8 zeroext %conv512), !dbg !3785
  %138 = load i32, i32* %speed, align 4, !dbg !3786
  %idxprom514 = sext i32 %138 to i64, !dbg !3787
  %arrayidx515 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftsub1_cost, i64 0, i64 %idxprom514, !dbg !3787
  %139 = load i32, i32* %mode, align 4, !dbg !3788
  %idxprom516 = zext i32 %139 to i64, !dbg !3787
  %arrayidx517 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx515, i64 0, i64 %idxprom516, !dbg !3787
  %140 = load i32, i32* %m, align 4, !dbg !3789
  %idxprom518 = sext i32 %140 to i64, !dbg !3787
  %arrayidx519 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx517, i64 0, i64 %idxprom518, !dbg !3787
  store i32 %call513, i32* %arrayidx519, align 4, !dbg !3790
  br label %for.inc520, !dbg !3791

for.inc520:                                       ; preds = %for.body469
  %141 = load i32, i32* %m, align 4, !dbg !3792
  %inc521 = add nsw i32 %141, 1, !dbg !3792
  store i32 %inc521, i32* %m, align 4, !dbg !3792
  br label %for.cond466, !dbg !3793, !llvm.loop !3794

for.end522:                                       ; preds = %for.cond466
  br label %for.inc523, !dbg !3796

for.inc523:                                       ; preds = %for.end522
  %142 = load i32, i32* %mode, align 4, !dbg !3797
  %idxprom524 = zext i32 %142 to i64, !dbg !3797
  %arrayidx525 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom524, !dbg !3797
  %143 = load i8, i8* %arrayidx525, align 1, !dbg !3797
  %conv526 = zext i8 %143 to i32, !dbg !3797
  store i32 %conv526, i32* %mode, align 4, !dbg !3798
  br label %for.cond226, !dbg !3799, !llvm.loop !3800

for.end527:                                       ; preds = %for.cond226
  br label %for.inc528, !dbg !3802

for.inc528:                                       ; preds = %for.end527
  %144 = load i32, i32* %speed, align 4, !dbg !3803
  %inc529 = add nsw i32 %144, 1, !dbg !3803
  store i32 %inc529, i32* %speed, align 4, !dbg !3803
  br label %for.cond216, !dbg !3804, !llvm.loop !3805

for.end530:                                       ; preds = %for.cond216
  call void @default_rtl_profile(), !dbg !3807
  ret void, !dbg !3808
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local void @df_ref_change_reg_with_loc(i32, i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !3809 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3815, metadata !DIExpression()), !dbg !3816
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3817
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !3817
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3817
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3817
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !3817
  %1 = load i32, i32* %rt_uint, align 8, !dbg !3817
  ret i32 %1, !dbg !3818
}

declare dso_local i32 @rtx_cost(%struct.rtx_def*, i32, i8 zeroext) #2

declare dso_local void @default_rtl_profile() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @negate_rtx(i32 %mode, %struct.rtx_def* %x) #0 !dbg !3819 {
entry:
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3822, metadata !DIExpression()), !dbg !3823
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3824, metadata !DIExpression()), !dbg !3825
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !3826, metadata !DIExpression()), !dbg !3827
  %0 = load i32, i32* %mode.addr, align 4, !dbg !3828
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3829
  %2 = load i32, i32* %mode.addr, align 4, !dbg !3830
  %call = call %struct.rtx_def* @simplify_unary_operation(i32 51, i32 %0, %struct.rtx_def* %1, i32 %2), !dbg !3831
  store %struct.rtx_def* %call, %struct.rtx_def** %result, align 8, !dbg !3827
  %3 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !3832
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !3834
  br i1 %cmp, label %if.then, label %if.end, !dbg !3835

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !3836
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3837
  %call1 = call %struct.rtx_def* @expand_unop(i32 %4, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %5, %struct.rtx_def* null, i32 0), !dbg !3838
  store %struct.rtx_def* %call1, %struct.rtx_def** %result, align 8, !dbg !3839
  br label %if.end, !dbg !3840

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !3841
  ret %struct.rtx_def* %6, !dbg !3842
}

declare dso_local %struct.rtx_def* @simplify_unary_operation(i32, i32, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @expand_unop(i32, %struct.optab_d*, %struct.rtx_def*, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mode_for_extraction(i32 %pattern, i32 %opno) #0 !dbg !3843 {
entry:
  %retval = alloca i32, align 4
  %pattern.addr = alloca i32, align 4
  %opno.addr = alloca i32, align 4
  %data = alloca %struct.insn_data*, align 8
  store i32 %pattern, i32* %pattern.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pattern.addr, metadata !3846, metadata !DIExpression()), !dbg !3847
  store i32 %opno, i32* %opno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opno.addr, metadata !3848, metadata !DIExpression()), !dbg !3849
  call void @llvm.dbg.declare(metadata %struct.insn_data** %data, metadata !3850, metadata !DIExpression()), !dbg !3897
  %0 = load i32, i32* %pattern.addr, align 4, !dbg !3898
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
  ], !dbg !3899

sw.bb:                                            ; preds = %entry
  store %struct.insn_data* getelementptr inbounds ([0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 2181), %struct.insn_data** %data, align 8, !dbg !3900
  br label %sw.epilog, !dbg !3904

sw.bb1:                                           ; preds = %entry
  store %struct.insn_data* getelementptr inbounds ([0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 2179), %struct.insn_data** %data, align 8, !dbg !3905
  br label %sw.epilog, !dbg !3908

sw.bb2:                                           ; preds = %entry
  store %struct.insn_data* getelementptr inbounds ([0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 2180), %struct.insn_data** %data, align 8, !dbg !3909
  br label %sw.epilog, !dbg !3912

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 334, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3913
  br label %sw.epilog, !dbg !3914

sw.epilog:                                        ; preds = %sw.default, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i32, i32* %opno.addr, align 4, !dbg !3915
  %cmp = icmp eq i32 %1, -1, !dbg !3917
  br i1 %cmp, label %if.then, label %if.end, !dbg !3918

if.then:                                          ; preds = %sw.epilog
  store i32 0, i32* %retval, align 4, !dbg !3919
  br label %return, !dbg !3919

if.end:                                           ; preds = %sw.epilog
  %2 = load %struct.insn_data*, %struct.insn_data** %data, align 8, !dbg !3920
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %2, i32 0, i32 3, !dbg !3922
  %3 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !3922
  %4 = load i32, i32* %opno.addr, align 4, !dbg !3923
  %idxprom = sext i32 %4 to i64, !dbg !3920
  %arrayidx = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %3, i64 %idxprom, !dbg !3920
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx, i32 0, i32 2, !dbg !3924
  %bf.load = load i16, i16* %mode, align 8, !dbg !3924
  %bf.cast = zext i16 %bf.load to i32, !dbg !3924
  %cmp3 = icmp eq i32 %bf.cast, 0, !dbg !3925
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !3926

if.then4:                                         ; preds = %if.end
  %5 = load i32, i32* @word_mode, align 4, !dbg !3927
  store i32 %5, i32* %retval, align 4, !dbg !3928
  br label %return, !dbg !3928

if.end5:                                          ; preds = %if.end
  %6 = load %struct.insn_data*, %struct.insn_data** %data, align 8, !dbg !3929
  %operand6 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %6, i32 0, i32 3, !dbg !3930
  %7 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand6, align 8, !dbg !3930
  %8 = load i32, i32* %opno.addr, align 4, !dbg !3931
  %idxprom7 = sext i32 %8 to i64, !dbg !3929
  %arrayidx8 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %7, i64 %idxprom7, !dbg !3929
  %mode9 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx8, i32 0, i32 2, !dbg !3932
  %bf.load10 = load i16, i16* %mode9, align 8, !dbg !3932
  %bf.cast11 = zext i16 %bf.load10 to i32, !dbg !3932
  store i32 %bf.cast11, i32* %retval, align 4, !dbg !3933
  br label %return, !dbg !3933

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3934
  ret i32 %9, !dbg !3934
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @store_bit_field(%struct.rtx_def* %str_rtx, i64 %bitsize, i64 %bitnum, i32 %fieldmode, %struct.rtx_def* %value) #0 !dbg !3935 {
entry:
  %str_rtx.addr = alloca %struct.rtx_def*, align 8
  %bitsize.addr = alloca i64, align 8
  %bitnum.addr = alloca i64, align 8
  %fieldmode.addr = alloca i32, align 4
  %value.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %str_rtx, %struct.rtx_def** %str_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %str_rtx.addr, metadata !3938, metadata !DIExpression()), !dbg !3939
  store i64 %bitsize, i64* %bitsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitsize.addr, metadata !3940, metadata !DIExpression()), !dbg !3941
  store i64 %bitnum, i64* %bitnum.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitnum.addr, metadata !3942, metadata !DIExpression()), !dbg !3943
  store i32 %fieldmode, i32* %fieldmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fieldmode.addr, metadata !3944, metadata !DIExpression()), !dbg !3945
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value.addr, metadata !3946, metadata !DIExpression()), !dbg !3947
  %0 = load %struct.rtx_def*, %struct.rtx_def** %str_rtx.addr, align 8, !dbg !3948
  %1 = load i64, i64* %bitsize.addr, align 8, !dbg !3950
  %2 = load i64, i64* %bitnum.addr, align 8, !dbg !3951
  %3 = load i32, i32* %fieldmode.addr, align 4, !dbg !3952
  %4 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !3953
  %call = call zeroext i8 @store_bit_field_1(%struct.rtx_def* %0, i64 %1, i64 %2, i32 %3, %struct.rtx_def* %4, i8 zeroext 1), !dbg !3954
  %tobool = icmp ne i8 %call, 0, !dbg !3954
  br i1 %tobool, label %if.end, label %if.then, !dbg !3955

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 856, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3956
  br label %if.end, !dbg !3956

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3957
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @store_bit_field_1(%struct.rtx_def* %str_rtx, i64 %bitsize, i64 %bitnum, i32 %fieldmode, %struct.rtx_def* %value, i8 zeroext %fallback_p) #0 !dbg !3958 {
entry:
  %retval = alloca i8, align 1
  %str_rtx.addr = alloca %struct.rtx_def*, align 8
  %bitsize.addr = alloca i64, align 8
  %bitnum.addr = alloca i64, align 8
  %fieldmode.addr = alloca i32, align 4
  %value.addr = alloca %struct.rtx_def*, align 8
  %fallback_p.addr = alloca i8, align 1
  %unit = alloca i32, align 4
  %offset = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %byte_offset = alloca i32, align 4
  %orig_value = alloca %struct.rtx_def*, align 8
  %op_mode = alloca i32, align 4
  %inner_mode_size = alloca i32, align 4
  %outer_mode_size = alloca i32, align 4
  %difference = alloca i32, align 4
  %outermode = alloca i32, align 4
  %innermode = alloca i32, align 4
  %icode = alloca i32, align 4
  %pos = alloca i32, align 4
  %rtxpos = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %mode0 = alloca i32, align 4
  %mode1 = alloca i32, align 4
  %mode2 = alloca i32, align 4
  %imode = alloca i32, align 4
  %icode415 = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %start = alloca %struct.rtx_def*, align 8
  %arg0 = alloca %struct.rtx_def*, align 8
  %backwards = alloca i32, align 4
  %nwords = alloca i32, align 4
  %i = alloca i32, align 4
  %last = alloca %struct.rtx_def*, align 8
  %wordnum = alloca i32, align 4
  %bit_offset = alloca i32, align 4
  %value_word = alloca %struct.rtx_def*, align 8
  %xbitpos = alloca i32, align 4
  %value1 = alloca %struct.rtx_def*, align 8
  %xop0 = alloca %struct.rtx_def*, align 8
  %last724 = alloca %struct.rtx_def*, align 8
  %pat726 = alloca %struct.rtx_def*, align 8
  %copy_back = alloca i8, align 1
  %tem = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %bestmode = alloca i32, align 4
  %last954 = alloca %struct.rtx_def*, align 8
  %tempreg = alloca %struct.rtx_def*, align 8
  %xop0955 = alloca %struct.rtx_def*, align 8
  %xoffset = alloca i64, align 8
  %xbitpos956 = alloca i64, align 8
  store %struct.rtx_def* %str_rtx, %struct.rtx_def** %str_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %str_rtx.addr, metadata !3961, metadata !DIExpression()), !dbg !3962
  store i64 %bitsize, i64* %bitsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitsize.addr, metadata !3963, metadata !DIExpression()), !dbg !3964
  store i64 %bitnum, i64* %bitnum.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitnum.addr, metadata !3965, metadata !DIExpression()), !dbg !3966
  store i32 %fieldmode, i32* %fieldmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fieldmode.addr, metadata !3967, metadata !DIExpression()), !dbg !3968
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value.addr, metadata !3969, metadata !DIExpression()), !dbg !3970
  store i8 %fallback_p, i8* %fallback_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fallback_p.addr, metadata !3971, metadata !DIExpression()), !dbg !3972
  call void @llvm.dbg.declare(metadata i32* %unit, metadata !3973, metadata !DIExpression()), !dbg !3974
  %0 = load %struct.rtx_def*, %struct.rtx_def** %str_rtx.addr, align 8, !dbg !3975
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3975
  %bf.load = load i32, i32* %1, align 8, !dbg !3975
  %bf.clear = and i32 %bf.load, 65535, !dbg !3975
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !3975
  %2 = zext i1 %cmp to i64, !dbg !3976
  %cond = select i1 %cmp, i32 8, i32 32, !dbg !3976
  store i32 %cond, i32* %unit, align 4, !dbg !3974
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !3977, metadata !DIExpression()), !dbg !3978
  call void @llvm.dbg.declare(metadata i64* %bitpos, metadata !3979, metadata !DIExpression()), !dbg !3980
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0, metadata !3981, metadata !DIExpression()), !dbg !3982
  %3 = load %struct.rtx_def*, %struct.rtx_def** %str_rtx.addr, align 8, !dbg !3983
  store %struct.rtx_def* %3, %struct.rtx_def** %op0, align 8, !dbg !3982
  call void @llvm.dbg.declare(metadata i32* %byte_offset, metadata !3984, metadata !DIExpression()), !dbg !3985
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig_value, metadata !3986, metadata !DIExpression()), !dbg !3987
  call void @llvm.dbg.declare(metadata i32* %op_mode, metadata !3988, metadata !DIExpression()), !dbg !3989
  %call = call i32 @mode_for_extraction(i32 0, i32 3), !dbg !3990
  store i32 %call, i32* %op_mode, align 4, !dbg !3989
  br label %while.cond, !dbg !3991

while.cond:                                       ; preds = %if.end, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !3992
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !3992
  %bf.load1 = load i32, i32* %5, align 8, !dbg !3992
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !3992
  %cmp3 = icmp eq i32 %bf.clear2, 39, !dbg !3993
  br i1 %cmp3, label %while.body, label %while.end, !dbg !3991

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %inner_mode_size, metadata !3994, metadata !DIExpression()), !dbg !3996
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !3997
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !3997
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3997
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3997
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3997
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3997
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !3997
  %bf.load4 = load i32, i32* %8, align 8, !dbg !3997
  %bf.lshr = lshr i32 %bf.load4, 16, !dbg !3997
  %bf.clear5 = and i32 %bf.lshr, 255, !dbg !3997
  %idxprom = zext i32 %bf.clear5 to i64, !dbg !3997
  %arrayidx6 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !3997
  %9 = load i8, i8* %arrayidx6, align 1, !dbg !3997
  %conv = zext i8 %9 to i16, !dbg !3997
  %conv7 = zext i16 %conv to i32, !dbg !3997
  store i32 %conv7, i32* %inner_mode_size, align 4, !dbg !3996
  call void @llvm.dbg.declare(metadata i32* %outer_mode_size, metadata !3998, metadata !DIExpression()), !dbg !3999
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4000
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4000
  %bf.load8 = load i32, i32* %11, align 8, !dbg !4000
  %bf.lshr9 = lshr i32 %bf.load8, 16, !dbg !4000
  %bf.clear10 = and i32 %bf.lshr9, 255, !dbg !4000
  %idxprom11 = zext i32 %bf.clear10 to i64, !dbg !4000
  %arrayidx12 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom11, !dbg !4000
  %12 = load i8, i8* %arrayidx12, align 1, !dbg !4000
  %conv13 = zext i8 %12 to i16, !dbg !4000
  %conv14 = zext i16 %conv13 to i32, !dbg !4000
  store i32 %conv14, i32* %outer_mode_size, align 4, !dbg !3999
  store i32 0, i32* %byte_offset, align 4, !dbg !4001
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4002
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !4002
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !4002
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 1, !dbg !4002
  %rt_uint = bitcast %union.rtunion_def* %arrayidx17 to i32*, !dbg !4002
  %14 = load i32, i32* %rt_uint, align 8, !dbg !4002
  %cmp18 = icmp eq i32 %14, 0, !dbg !4004
  br i1 %cmp18, label %land.lhs.true, label %if.else, !dbg !4005

land.lhs.true:                                    ; preds = %while.body
  %15 = load i32, i32* %inner_mode_size, align 4, !dbg !4006
  %16 = load i32, i32* %outer_mode_size, align 4, !dbg !4007
  %cmp20 = icmp slt i32 %15, %16, !dbg !4008
  br i1 %cmp20, label %if.then, label %if.else, !dbg !4009

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %difference, metadata !4010, metadata !DIExpression()), !dbg !4012
  %17 = load i32, i32* %inner_mode_size, align 4, !dbg !4013
  %18 = load i32, i32* %outer_mode_size, align 4, !dbg !4014
  %sub = sub nsw i32 %17, %18, !dbg !4015
  store i32 %sub, i32* %difference, align 4, !dbg !4012
  br label %if.end, !dbg !4016

if.else:                                          ; preds = %land.lhs.true, %while.body
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4017
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !4017
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !4017
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 1, !dbg !4017
  %rt_uint25 = bitcast %union.rtunion_def* %arrayidx24 to i32*, !dbg !4017
  %20 = load i32, i32* %rt_uint25, align 8, !dbg !4017
  store i32 %20, i32* %byte_offset, align 4, !dbg !4018
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %21 = load i32, i32* %byte_offset, align 4, !dbg !4019
  %mul = mul nsw i32 %21, 8, !dbg !4020
  %conv26 = sext i32 %mul to i64, !dbg !4019
  %22 = load i64, i64* %bitnum.addr, align 8, !dbg !4021
  %add = add i64 %22, %conv26, !dbg !4021
  store i64 %add, i64* %bitnum.addr, align 8, !dbg !4021
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4022
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !4022
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !4022
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !4022
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !4022
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !4022
  store %struct.rtx_def* %24, %struct.rtx_def** %op0, align 8, !dbg !4023
  br label %while.cond, !dbg !3991, !llvm.loop !4024

while.end:                                        ; preds = %while.cond
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4026
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !4026
  %bf.load31 = load i32, i32* %26, align 8, !dbg !4026
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !4026
  %cmp33 = icmp eq i32 %bf.clear32, 37, !dbg !4026
  br i1 %cmp33, label %land.lhs.true35, label %if.end49, !dbg !4028

land.lhs.true35:                                  ; preds = %while.end
  %27 = load i64, i64* %bitnum.addr, align 8, !dbg !4029
  %28 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4030
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !4030
  %bf.load36 = load i32, i32* %29, align 8, !dbg !4030
  %bf.lshr37 = lshr i32 %bf.load36, 16, !dbg !4030
  %bf.clear38 = and i32 %bf.lshr37, 255, !dbg !4030
  %idxprom39 = zext i32 %bf.clear38 to i64, !dbg !4030
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom39, !dbg !4030
  %30 = load i8, i8* %arrayidx40, align 1, !dbg !4030
  %conv41 = zext i8 %30 to i16, !dbg !4030
  %conv42 = zext i16 %conv41 to i32, !dbg !4030
  %mul43 = mul nsw i32 %conv42, 8, !dbg !4030
  %conv44 = trunc i32 %mul43 to i16, !dbg !4030
  %conv45 = zext i16 %conv44 to i64, !dbg !4030
  %cmp46 = icmp uge i64 %27, %conv45, !dbg !4031
  br i1 %cmp46, label %if.then48, label %if.end49, !dbg !4032

if.then48:                                        ; preds = %land.lhs.true35
  store i8 1, i8* %retval, align 1, !dbg !4033
  br label %return, !dbg !4033

if.end49:                                         ; preds = %land.lhs.true35, %while.end
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4034
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !4034
  %bf.load50 = load i32, i32* %32, align 8, !dbg !4034
  %bf.lshr51 = lshr i32 %bf.load50, 16, !dbg !4034
  %bf.clear52 = and i32 %bf.lshr51, 255, !dbg !4034
  %idxprom53 = zext i32 %bf.clear52 to i64, !dbg !4034
  %arrayidx54 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom53, !dbg !4034
  %33 = load i8, i8* %arrayidx54, align 1, !dbg !4034
  %conv55 = zext i8 %33 to i32, !dbg !4034
  %cmp56 = icmp eq i32 %conv55, 12, !dbg !4034
  br i1 %cmp56, label %land.lhs.true102, label %lor.lhs.false, !dbg !4034

lor.lhs.false:                                    ; preds = %if.end49
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4034
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !4034
  %bf.load58 = load i32, i32* %35, align 8, !dbg !4034
  %bf.lshr59 = lshr i32 %bf.load58, 16, !dbg !4034
  %bf.clear60 = and i32 %bf.lshr59, 255, !dbg !4034
  %idxprom61 = zext i32 %bf.clear60 to i64, !dbg !4034
  %arrayidx62 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom61, !dbg !4034
  %36 = load i8, i8* %arrayidx62, align 1, !dbg !4034
  %conv63 = zext i8 %36 to i32, !dbg !4034
  %cmp64 = icmp eq i32 %conv63, 17, !dbg !4034
  br i1 %cmp64, label %land.lhs.true102, label %lor.lhs.false66, !dbg !4034

lor.lhs.false66:                                  ; preds = %lor.lhs.false
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4034
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !4034
  %bf.load67 = load i32, i32* %38, align 8, !dbg !4034
  %bf.lshr68 = lshr i32 %bf.load67, 16, !dbg !4034
  %bf.clear69 = and i32 %bf.lshr68, 255, !dbg !4034
  %idxprom70 = zext i32 %bf.clear69 to i64, !dbg !4034
  %arrayidx71 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom70, !dbg !4034
  %39 = load i8, i8* %arrayidx71, align 1, !dbg !4034
  %conv72 = zext i8 %39 to i32, !dbg !4034
  %cmp73 = icmp eq i32 %conv72, 13, !dbg !4034
  br i1 %cmp73, label %land.lhs.true102, label %lor.lhs.false75, !dbg !4034

lor.lhs.false75:                                  ; preds = %lor.lhs.false66
  %40 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4034
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !4034
  %bf.load76 = load i32, i32* %41, align 8, !dbg !4034
  %bf.lshr77 = lshr i32 %bf.load76, 16, !dbg !4034
  %bf.clear78 = and i32 %bf.lshr77, 255, !dbg !4034
  %idxprom79 = zext i32 %bf.clear78 to i64, !dbg !4034
  %arrayidx80 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom79, !dbg !4034
  %42 = load i8, i8* %arrayidx80, align 1, !dbg !4034
  %conv81 = zext i8 %42 to i32, !dbg !4034
  %cmp82 = icmp eq i32 %conv81, 14, !dbg !4034
  br i1 %cmp82, label %land.lhs.true102, label %lor.lhs.false84, !dbg !4034

lor.lhs.false84:                                  ; preds = %lor.lhs.false75
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4034
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !4034
  %bf.load85 = load i32, i32* %44, align 8, !dbg !4034
  %bf.lshr86 = lshr i32 %bf.load85, 16, !dbg !4034
  %bf.clear87 = and i32 %bf.lshr86, 255, !dbg !4034
  %idxprom88 = zext i32 %bf.clear87 to i64, !dbg !4034
  %arrayidx89 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom88, !dbg !4034
  %45 = load i8, i8* %arrayidx89, align 1, !dbg !4034
  %conv90 = zext i8 %45 to i32, !dbg !4034
  %cmp91 = icmp eq i32 %conv90, 15, !dbg !4034
  br i1 %cmp91, label %land.lhs.true102, label %lor.lhs.false93, !dbg !4034

lor.lhs.false93:                                  ; preds = %lor.lhs.false84
  %46 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4034
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !4034
  %bf.load94 = load i32, i32* %47, align 8, !dbg !4034
  %bf.lshr95 = lshr i32 %bf.load94, 16, !dbg !4034
  %bf.clear96 = and i32 %bf.lshr95, 255, !dbg !4034
  %idxprom97 = zext i32 %bf.clear96 to i64, !dbg !4034
  %arrayidx98 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom97, !dbg !4034
  %48 = load i8, i8* %arrayidx98, align 1, !dbg !4034
  %conv99 = zext i8 %48 to i32, !dbg !4034
  %cmp100 = icmp eq i32 %conv99, 16, !dbg !4034
  br i1 %cmp100, label %land.lhs.true102, label %if.end244, !dbg !4036

land.lhs.true102:                                 ; preds = %lor.lhs.false93, %lor.lhs.false84, %lor.lhs.false75, %lor.lhs.false66, %lor.lhs.false, %if.end49
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4037
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !4037
  %bf.load103 = load i32, i32* %50, align 8, !dbg !4037
  %bf.clear104 = and i32 %bf.load103, 65535, !dbg !4037
  %cmp105 = icmp eq i32 %bf.clear104, 43, !dbg !4037
  br i1 %cmp105, label %if.end244, label %land.lhs.true107, !dbg !4038

land.lhs.true107:                                 ; preds = %land.lhs.true102
  %51 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4039
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !4039
  %bf.load108 = load i32, i32* %52, align 8, !dbg !4039
  %bf.lshr109 = lshr i32 %bf.load108, 16, !dbg !4039
  %bf.clear110 = and i32 %bf.lshr109, 255, !dbg !4039
  %idxprom111 = sext i32 %bf.clear110 to i64, !dbg !4039
  %arrayidx112 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 131, i32 4), i64 0, i64 %idxprom111, !dbg !4039
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx112, i32 0, i32 0, !dbg !4040
  %53 = load i32, i32* %insn_code, align 4, !dbg !4040
  %cmp113 = icmp ne i32 %53, 2956, !dbg !4041
  br i1 %cmp113, label %land.lhs.true115, label %if.end244, !dbg !4042

land.lhs.true115:                                 ; preds = %land.lhs.true107
  %54 = load i32, i32* %fieldmode.addr, align 4, !dbg !4043
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4044
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !4044
  %bf.load116 = load i32, i32* %56, align 8, !dbg !4044
  %bf.lshr117 = lshr i32 %bf.load116, 16, !dbg !4044
  %bf.clear118 = and i32 %bf.lshr117, 255, !dbg !4044
  %idxprom119 = zext i32 %bf.clear118 to i64, !dbg !4044
  %arrayidx120 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom119, !dbg !4044
  %57 = load i8, i8* %arrayidx120, align 1, !dbg !4044
  %conv121 = zext i8 %57 to i32, !dbg !4044
  %cmp122 = icmp eq i32 %54, %conv121, !dbg !4045
  br i1 %cmp122, label %land.lhs.true124, label %if.end244, !dbg !4046

land.lhs.true124:                                 ; preds = %land.lhs.true115
  %58 = load i64, i64* %bitsize.addr, align 8, !dbg !4047
  %59 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4048
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !4048
  %bf.load125 = load i32, i32* %60, align 8, !dbg !4048
  %bf.lshr126 = lshr i32 %bf.load125, 16, !dbg !4048
  %bf.clear127 = and i32 %bf.lshr126, 255, !dbg !4048
  %idxprom128 = zext i32 %bf.clear127 to i64, !dbg !4048
  %arrayidx129 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom128, !dbg !4048
  %61 = load i8, i8* %arrayidx129, align 1, !dbg !4048
  %conv130 = zext i8 %61 to i32, !dbg !4048
  %idxprom131 = zext i32 %conv130 to i64, !dbg !4048
  %arrayidx132 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom131, !dbg !4048
  %62 = load i8, i8* %arrayidx132, align 1, !dbg !4048
  %conv133 = zext i8 %62 to i16, !dbg !4048
  %conv134 = zext i16 %conv133 to i32, !dbg !4048
  %mul135 = mul nsw i32 %conv134, 8, !dbg !4048
  %conv136 = trunc i32 %mul135 to i16, !dbg !4048
  %conv137 = zext i16 %conv136 to i64, !dbg !4048
  %cmp138 = icmp eq i64 %58, %conv137, !dbg !4049
  br i1 %cmp138, label %land.lhs.true140, label %if.end244, !dbg !4050

land.lhs.true140:                                 ; preds = %land.lhs.true124
  %63 = load i64, i64* %bitnum.addr, align 8, !dbg !4051
  %64 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4052
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !4052
  %bf.load141 = load i32, i32* %65, align 8, !dbg !4052
  %bf.lshr142 = lshr i32 %bf.load141, 16, !dbg !4052
  %bf.clear143 = and i32 %bf.lshr142, 255, !dbg !4052
  %idxprom144 = zext i32 %bf.clear143 to i64, !dbg !4052
  %arrayidx145 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom144, !dbg !4052
  %66 = load i8, i8* %arrayidx145, align 1, !dbg !4052
  %conv146 = zext i8 %66 to i32, !dbg !4052
  %idxprom147 = zext i32 %conv146 to i64, !dbg !4052
  %arrayidx148 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom147, !dbg !4052
  %67 = load i8, i8* %arrayidx148, align 1, !dbg !4052
  %conv149 = zext i8 %67 to i16, !dbg !4052
  %conv150 = zext i16 %conv149 to i32, !dbg !4052
  %mul151 = mul nsw i32 %conv150, 8, !dbg !4052
  %conv152 = trunc i32 %mul151 to i16, !dbg !4052
  %conv153 = zext i16 %conv152 to i64, !dbg !4052
  %rem = urem i64 %63, %conv153, !dbg !4053
  %tobool = icmp ne i64 %rem, 0, !dbg !4053
  br i1 %tobool, label %if.end244, label %if.then154, !dbg !4054

if.then154:                                       ; preds = %land.lhs.true140
  call void @llvm.dbg.declare(metadata i32* %outermode, metadata !4055, metadata !DIExpression()), !dbg !4057
  %68 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4058
  %69 = bitcast %struct.rtx_def* %68 to i32*, !dbg !4058
  %bf.load155 = load i32, i32* %69, align 8, !dbg !4058
  %bf.lshr156 = lshr i32 %bf.load155, 16, !dbg !4058
  %bf.clear157 = and i32 %bf.lshr156, 255, !dbg !4058
  store i32 %bf.clear157, i32* %outermode, align 4, !dbg !4057
  call void @llvm.dbg.declare(metadata i32* %innermode, metadata !4059, metadata !DIExpression()), !dbg !4060
  %70 = load i32, i32* %outermode, align 4, !dbg !4061
  %idxprom158 = zext i32 %70 to i64, !dbg !4061
  %arrayidx159 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom158, !dbg !4061
  %71 = load i8, i8* %arrayidx159, align 1, !dbg !4061
  %conv160 = zext i8 %71 to i32, !dbg !4061
  store i32 %conv160, i32* %innermode, align 4, !dbg !4060
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !4062, metadata !DIExpression()), !dbg !4063
  %72 = load i32, i32* %outermode, align 4, !dbg !4064
  %idxprom161 = sext i32 %72 to i64, !dbg !4064
  %arrayidx162 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 131, i32 4), i64 0, i64 %idxprom161, !dbg !4064
  %insn_code163 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx162, i32 0, i32 0, !dbg !4065
  %73 = load i32, i32* %insn_code163, align 4, !dbg !4065
  store i32 %73, i32* %icode, align 4, !dbg !4063
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !4066, metadata !DIExpression()), !dbg !4067
  %74 = load i64, i64* %bitnum.addr, align 8, !dbg !4068
  %75 = load i32, i32* %innermode, align 4, !dbg !4069
  %idxprom164 = zext i32 %75 to i64, !dbg !4069
  %arrayidx165 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom164, !dbg !4069
  %76 = load i8, i8* %arrayidx165, align 1, !dbg !4069
  %conv166 = zext i8 %76 to i16, !dbg !4069
  %conv167 = zext i16 %conv166 to i32, !dbg !4069
  %mul168 = mul nsw i32 %conv167, 8, !dbg !4069
  %conv169 = trunc i32 %mul168 to i16, !dbg !4069
  %conv170 = zext i16 %conv169 to i64, !dbg !4069
  %div = udiv i64 %74, %conv170, !dbg !4070
  %conv171 = trunc i64 %div to i32, !dbg !4068
  store i32 %conv171, i32* %pos, align 4, !dbg !4067
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtxpos, metadata !4071, metadata !DIExpression()), !dbg !4072
  %77 = load i32, i32* %pos, align 4, !dbg !4073
  %conv172 = sext i32 %77 to i64, !dbg !4073
  %call173 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv172), !dbg !4073
  store %struct.rtx_def* %call173, %struct.rtx_def** %rtxpos, align 8, !dbg !4072
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !4074, metadata !DIExpression()), !dbg !4075
  %78 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4076
  store %struct.rtx_def* %78, %struct.rtx_def** %src, align 8, !dbg !4075
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !4077, metadata !DIExpression()), !dbg !4078
  %79 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4079
  store %struct.rtx_def* %79, %struct.rtx_def** %dest, align 8, !dbg !4078
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !4080, metadata !DIExpression()), !dbg !4081
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !4082, metadata !DIExpression()), !dbg !4083
  call void @llvm.dbg.declare(metadata i32* %mode0, metadata !4084, metadata !DIExpression()), !dbg !4085
  %80 = load i32, i32* %icode, align 4, !dbg !4086
  %idxprom174 = sext i32 %80 to i64, !dbg !4087
  %arrayidx175 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom174, !dbg !4087
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx175, i32 0, i32 3, !dbg !4088
  %81 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !4088
  %arrayidx176 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %81, i64 0, !dbg !4087
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx176, i32 0, i32 2, !dbg !4089
  %bf.load177 = load i16, i16* %mode, align 8, !dbg !4089
  %bf.cast = zext i16 %bf.load177 to i32, !dbg !4089
  store i32 %bf.cast, i32* %mode0, align 4, !dbg !4085
  call void @llvm.dbg.declare(metadata i32* %mode1, metadata !4090, metadata !DIExpression()), !dbg !4091
  %82 = load i32, i32* %icode, align 4, !dbg !4092
  %idxprom178 = sext i32 %82 to i64, !dbg !4093
  %arrayidx179 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom178, !dbg !4093
  %operand180 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx179, i32 0, i32 3, !dbg !4094
  %83 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand180, align 8, !dbg !4094
  %arrayidx181 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %83, i64 1, !dbg !4093
  %mode182 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx181, i32 0, i32 2, !dbg !4095
  %bf.load183 = load i16, i16* %mode182, align 8, !dbg !4095
  %bf.cast184 = zext i16 %bf.load183 to i32, !dbg !4095
  store i32 %bf.cast184, i32* %mode1, align 4, !dbg !4091
  call void @llvm.dbg.declare(metadata i32* %mode2, metadata !4096, metadata !DIExpression()), !dbg !4097
  %84 = load i32, i32* %icode, align 4, !dbg !4098
  %idxprom185 = sext i32 %84 to i64, !dbg !4099
  %arrayidx186 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom185, !dbg !4099
  %operand187 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx186, i32 0, i32 3, !dbg !4100
  %85 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand187, align 8, !dbg !4100
  %arrayidx188 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %85, i64 2, !dbg !4099
  %mode189 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx188, i32 0, i32 2, !dbg !4101
  %bf.load190 = load i16, i16* %mode189, align 8, !dbg !4101
  %bf.cast191 = zext i16 %bf.load190 to i32, !dbg !4101
  store i32 %bf.cast191, i32* %mode2, align 4, !dbg !4097
  call void @start_sequence(), !dbg !4102
  %86 = load i32, i32* %icode, align 4, !dbg !4103
  %idxprom192 = sext i32 %86 to i64, !dbg !4105
  %arrayidx193 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom192, !dbg !4105
  %operand194 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx193, i32 0, i32 3, !dbg !4106
  %87 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand194, align 8, !dbg !4106
  %arrayidx195 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %87, i64 1, !dbg !4105
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx195, i32 0, i32 0, !dbg !4107
  %88 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !4107
  %89 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4108
  %90 = load i32, i32* %mode1, align 4, !dbg !4109
  %call196 = call i32 %88(%struct.rtx_def* %89, i32 %90), !dbg !4110
  %tobool197 = icmp ne i32 %call196, 0, !dbg !4110
  br i1 %tobool197, label %if.end200, label %if.then198, !dbg !4111

if.then198:                                       ; preds = %if.then154
  %91 = load i32, i32* %mode1, align 4, !dbg !4112
  %92 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4113
  %call199 = call %struct.rtx_def* @copy_to_mode_reg(i32 %91, %struct.rtx_def* %92), !dbg !4114
  store %struct.rtx_def* %call199, %struct.rtx_def** %src, align 8, !dbg !4115
  br label %if.end200, !dbg !4116

if.end200:                                        ; preds = %if.then198, %if.then154
  %93 = load i32, i32* %icode, align 4, !dbg !4117
  %idxprom201 = sext i32 %93 to i64, !dbg !4119
  %arrayidx202 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom201, !dbg !4119
  %operand203 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx202, i32 0, i32 3, !dbg !4120
  %94 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand203, align 8, !dbg !4120
  %arrayidx204 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %94, i64 2, !dbg !4119
  %predicate205 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx204, i32 0, i32 0, !dbg !4121
  %95 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate205, align 8, !dbg !4121
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rtxpos, align 8, !dbg !4122
  %97 = load i32, i32* %mode2, align 4, !dbg !4123
  %call206 = call i32 %95(%struct.rtx_def* %96, i32 %97), !dbg !4124
  %tobool207 = icmp ne i32 %call206, 0, !dbg !4124
  br i1 %tobool207, label %if.end210, label %if.then208, !dbg !4125

if.then208:                                       ; preds = %if.end200
  %98 = load i32, i32* %mode1, align 4, !dbg !4126
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rtxpos, align 8, !dbg !4127
  %call209 = call %struct.rtx_def* @copy_to_mode_reg(i32 %98, %struct.rtx_def* %99), !dbg !4128
  store %struct.rtx_def* %call209, %struct.rtx_def** %rtxpos, align 8, !dbg !4129
  br label %if.end210, !dbg !4130

if.end210:                                        ; preds = %if.then208, %if.end200
  %100 = load i32, i32* %icode, align 4, !dbg !4131
  %idxprom211 = sext i32 %100 to i64, !dbg !4131
  %arrayidx212 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom211, !dbg !4131
  %operand213 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx212, i32 0, i32 3, !dbg !4131
  %101 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand213, align 8, !dbg !4131
  %arrayidx214 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %101, i64 0, !dbg !4131
  %predicate215 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx214, i32 0, i32 0, !dbg !4131
  %102 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate215, align 8, !dbg !4131
  %103 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4131
  %104 = load i32, i32* %mode0, align 4, !dbg !4131
  %call216 = call i32 %102(%struct.rtx_def* %103, i32 %104), !dbg !4131
  %tobool217 = icmp ne i32 %call216, 0, !dbg !4131
  br i1 %tobool217, label %land.lhs.true218, label %cond.true, !dbg !4131

land.lhs.true218:                                 ; preds = %if.end210
  %105 = load i32, i32* %icode, align 4, !dbg !4131
  %idxprom219 = sext i32 %105 to i64, !dbg !4131
  %arrayidx220 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom219, !dbg !4131
  %operand221 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx220, i32 0, i32 3, !dbg !4131
  %106 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand221, align 8, !dbg !4131
  %arrayidx222 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %106, i64 1, !dbg !4131
  %predicate223 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx222, i32 0, i32 0, !dbg !4131
  %107 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate223, align 8, !dbg !4131
  %108 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4131
  %109 = load i32, i32* %mode1, align 4, !dbg !4131
  %call224 = call i32 %107(%struct.rtx_def* %108, i32 %109), !dbg !4131
  %tobool225 = icmp ne i32 %call224, 0, !dbg !4131
  br i1 %tobool225, label %land.lhs.true226, label %cond.true, !dbg !4131

land.lhs.true226:                                 ; preds = %land.lhs.true218
  %110 = load i32, i32* %icode, align 4, !dbg !4131
  %idxprom227 = sext i32 %110 to i64, !dbg !4131
  %arrayidx228 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom227, !dbg !4131
  %operand229 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx228, i32 0, i32 3, !dbg !4131
  %111 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand229, align 8, !dbg !4131
  %arrayidx230 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %111, i64 2, !dbg !4131
  %predicate231 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx230, i32 0, i32 0, !dbg !4131
  %112 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate231, align 8, !dbg !4131
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rtxpos, align 8, !dbg !4131
  %114 = load i32, i32* %mode2, align 4, !dbg !4131
  %call232 = call i32 %112(%struct.rtx_def* %113, i32 %114), !dbg !4131
  %tobool233 = icmp ne i32 %call232, 0, !dbg !4131
  br i1 %tobool233, label %cond.false, label %cond.true, !dbg !4131

cond.true:                                        ; preds = %land.lhs.true226, %land.lhs.true218, %if.end210
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 453, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4131
  br label %cond.end, !dbg !4131

cond.false:                                       ; preds = %land.lhs.true226
  br label %cond.end, !dbg !4131

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond234 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4131
  %115 = load i32, i32* %icode, align 4, !dbg !4132
  %idxprom235 = sext i32 %115 to i64, !dbg !4132
  %arrayidx236 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom235, !dbg !4132
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx236, i32 0, i32 2, !dbg !4132
  %116 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !4132
  %117 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4133
  %118 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4134
  %119 = load %struct.rtx_def*, %struct.rtx_def** %rtxpos, align 8, !dbg !4135
  %call237 = call %struct.rtx_def* (%struct.rtx_def*, ...) %116(%struct.rtx_def* %117, %struct.rtx_def* %118, %struct.rtx_def* %119), !dbg !4132
  store %struct.rtx_def* %call237, %struct.rtx_def** %pat, align 8, !dbg !4136
  %call238 = call %struct.rtx_def* @get_insns(), !dbg !4137
  store %struct.rtx_def* %call238, %struct.rtx_def** %seq, align 8, !dbg !4138
  call void @end_sequence(), !dbg !4139
  %120 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4140
  %tobool239 = icmp ne %struct.rtx_def* %120, null, !dbg !4140
  br i1 %tobool239, label %if.then240, label %if.end243, !dbg !4142

if.then240:                                       ; preds = %cond.end
  %121 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !4143
  %call241 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %121), !dbg !4145
  %122 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4146
  %call242 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %122), !dbg !4147
  store i8 1, i8* %retval, align 1, !dbg !4148
  br label %return, !dbg !4148

if.end243:                                        ; preds = %cond.end
  br label %if.end244, !dbg !4149

if.end244:                                        ; preds = %if.end243, %land.lhs.true140, %land.lhs.true124, %land.lhs.true115, %land.lhs.true107, %land.lhs.true102, %lor.lhs.false93
  %123 = load i64, i64* %bitnum.addr, align 8, !dbg !4150
  %124 = load i32, i32* %unit, align 4, !dbg !4151
  %conv245 = zext i32 %124 to i64, !dbg !4151
  %div246 = udiv i64 %123, %conv245, !dbg !4152
  store i64 %div246, i64* %offset, align 8, !dbg !4153
  %125 = load i64, i64* %bitnum.addr, align 8, !dbg !4154
  %126 = load i32, i32* %unit, align 4, !dbg !4155
  %conv247 = zext i32 %126 to i64, !dbg !4155
  %rem248 = urem i64 %125, %conv247, !dbg !4156
  store i64 %rem248, i64* %bitpos, align 8, !dbg !4157
  %127 = load i64, i64* %bitnum.addr, align 8, !dbg !4158
  %rem249 = urem i64 %127, 32, !dbg !4159
  %div250 = udiv i64 %rem249, 8, !dbg !4160
  %128 = load i64, i64* %offset, align 8, !dbg !4161
  %mul251 = mul i64 %128, 4, !dbg !4162
  %add252 = add i64 %div250, %mul251, !dbg !4163
  %conv253 = trunc i64 %add252 to i32, !dbg !4164
  store i32 %conv253, i32* %byte_offset, align 4, !dbg !4165
  %129 = load i64, i64* %bitpos, align 8, !dbg !4166
  %cmp254 = icmp eq i64 %129, 0, !dbg !4168
  br i1 %cmp254, label %land.lhs.true256, label %if.end351, !dbg !4169

land.lhs.true256:                                 ; preds = %if.end244
  %130 = load i64, i64* %bitsize.addr, align 8, !dbg !4170
  %131 = load i32, i32* %fieldmode.addr, align 4, !dbg !4171
  %idxprom257 = zext i32 %131 to i64, !dbg !4171
  %arrayidx258 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom257, !dbg !4171
  %132 = load i8, i8* %arrayidx258, align 1, !dbg !4171
  %conv259 = zext i8 %132 to i16, !dbg !4171
  %conv260 = zext i16 %conv259 to i32, !dbg !4171
  %mul261 = mul nsw i32 %conv260, 8, !dbg !4171
  %conv262 = trunc i32 %mul261 to i16, !dbg !4171
  %conv263 = zext i16 %conv262 to i64, !dbg !4171
  %cmp264 = icmp eq i64 %130, %conv263, !dbg !4172
  br i1 %cmp264, label %land.lhs.true266, label %if.end351, !dbg !4173

land.lhs.true266:                                 ; preds = %land.lhs.true256
  %133 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4174
  %134 = bitcast %struct.rtx_def* %133 to i32*, !dbg !4174
  %bf.load267 = load i32, i32* %134, align 8, !dbg !4174
  %bf.clear268 = and i32 %bf.load267, 65535, !dbg !4174
  %cmp269 = icmp eq i32 %bf.clear268, 43, !dbg !4174
  br i1 %cmp269, label %cond.false300, label %cond.true271, !dbg !4175

cond.true271:                                     ; preds = %land.lhs.true266
  %135 = load i32, i32* %fieldmode.addr, align 4, !dbg !4176
  %idxprom272 = zext i32 %135 to i64, !dbg !4176
  %arrayidx273 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom272, !dbg !4176
  %136 = load i8, i8* %arrayidx273, align 1, !dbg !4176
  %conv274 = zext i8 %136 to i16, !dbg !4176
  %conv275 = zext i16 %conv274 to i32, !dbg !4176
  %cmp276 = icmp sge i32 %conv275, 4, !dbg !4177
  br i1 %cmp276, label %land.lhs.true292, label %lor.lhs.false278, !dbg !4178

lor.lhs.false278:                                 ; preds = %cond.true271
  %137 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4179
  %138 = bitcast %struct.rtx_def* %137 to i32*, !dbg !4179
  %bf.load279 = load i32, i32* %138, align 8, !dbg !4179
  %bf.lshr280 = lshr i32 %bf.load279, 16, !dbg !4179
  %bf.clear281 = and i32 %bf.lshr280, 255, !dbg !4179
  %idxprom282 = zext i32 %bf.clear281 to i64, !dbg !4179
  %arrayidx283 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom282, !dbg !4179
  %139 = load i8, i8* %arrayidx283, align 1, !dbg !4179
  %conv284 = zext i8 %139 to i16, !dbg !4179
  %conv285 = zext i16 %conv284 to i32, !dbg !4179
  %140 = load i32, i32* %fieldmode.addr, align 4, !dbg !4180
  %idxprom286 = zext i32 %140 to i64, !dbg !4180
  %arrayidx287 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom286, !dbg !4180
  %141 = load i8, i8* %arrayidx287, align 1, !dbg !4180
  %conv288 = zext i8 %141 to i16, !dbg !4180
  %conv289 = zext i16 %conv288 to i32, !dbg !4180
  %cmp290 = icmp eq i32 %conv285, %conv289, !dbg !4181
  br i1 %cmp290, label %land.lhs.true292, label %if.end351, !dbg !4182

land.lhs.true292:                                 ; preds = %lor.lhs.false278, %cond.true271
  %142 = load i32, i32* %byte_offset, align 4, !dbg !4183
  %143 = load i32, i32* %fieldmode.addr, align 4, !dbg !4184
  %idxprom293 = zext i32 %143 to i64, !dbg !4184
  %arrayidx294 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom293, !dbg !4184
  %144 = load i8, i8* %arrayidx294, align 1, !dbg !4184
  %conv295 = zext i8 %144 to i16, !dbg !4184
  %conv296 = zext i16 %conv295 to i32, !dbg !4184
  %rem297 = srem i32 %142, %conv296, !dbg !4185
  %cmp298 = icmp eq i32 %rem297, 0, !dbg !4186
  br i1 %cmp298, label %if.then330, label %if.end351, !dbg !4187

cond.false300:                                    ; preds = %land.lhs.true266
  br i1 false, label %lor.lhs.false301, label %if.then330, !dbg !4188

lor.lhs.false301:                                 ; preds = %cond.false300
  %145 = load i64, i64* %offset, align 8, !dbg !4189
  %mul302 = mul i64 %145, 8, !dbg !4190
  %146 = load i64, i64* %bitsize.addr, align 8, !dbg !4191
  %rem303 = urem i64 %mul302, %146, !dbg !4192
  %cmp304 = icmp eq i64 %rem303, 0, !dbg !4193
  br i1 %cmp304, label %land.lhs.true306, label %if.end351, !dbg !4194

land.lhs.true306:                                 ; preds = %lor.lhs.false301
  %147 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4195
  %u307 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1, !dbg !4195
  %fld308 = bitcast %union.u* %u307 to [1 x %union.rtunion_def]*, !dbg !4195
  %arrayidx309 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld308, i64 0, i64 1, !dbg !4195
  %rt_mem = bitcast %union.rtunion_def* %arrayidx309 to %struct.mem_attrs**, !dbg !4195
  %148 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !4195
  %cmp310 = icmp ne %struct.mem_attrs* %148, null, !dbg !4195
  br i1 %cmp310, label %cond.true312, label %cond.false317, !dbg !4195

cond.true312:                                     ; preds = %land.lhs.true306
  %149 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4195
  %u313 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1, !dbg !4195
  %fld314 = bitcast %union.u* %u313 to [1 x %union.rtunion_def]*, !dbg !4195
  %arrayidx315 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld314, i64 0, i64 1, !dbg !4195
  %rt_mem316 = bitcast %union.rtunion_def* %arrayidx315 to %struct.mem_attrs**, !dbg !4195
  %150 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem316, align 8, !dbg !4195
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %150, i32 0, i32 4, !dbg !4195
  %151 = load i32, i32* %align, align 4, !dbg !4195
  br label %cond.end318, !dbg !4195

cond.false317:                                    ; preds = %land.lhs.true306
  br label %cond.end318, !dbg !4195

cond.end318:                                      ; preds = %cond.false317, %cond.true312
  %cond319 = phi i32 [ %151, %cond.true312 ], [ 8, %cond.false317 ], !dbg !4195
  %152 = load i32, i32* %fieldmode.addr, align 4, !dbg !4196
  %idxprom320 = zext i32 %152 to i64, !dbg !4196
  %arrayidx321 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom320, !dbg !4196
  %153 = load i8, i8* %arrayidx321, align 1, !dbg !4196
  %conv322 = zext i8 %153 to i16, !dbg !4196
  %conv323 = zext i16 %conv322 to i32, !dbg !4196
  %mul324 = mul nsw i32 %conv323, 8, !dbg !4196
  %conv325 = trunc i32 %mul324 to i16, !dbg !4196
  %conv326 = zext i16 %conv325 to i32, !dbg !4196
  %rem327 = urem i32 %cond319, %conv326, !dbg !4197
  %cmp328 = icmp eq i32 %rem327, 0, !dbg !4198
  br i1 %cmp328, label %if.then330, label %if.end351, !dbg !4175

if.then330:                                       ; preds = %cond.end318, %cond.false300, %land.lhs.true292
  %154 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4199
  %155 = bitcast %struct.rtx_def* %154 to i32*, !dbg !4199
  %bf.load331 = load i32, i32* %155, align 8, !dbg !4199
  %bf.clear332 = and i32 %bf.load331, 65535, !dbg !4199
  %cmp333 = icmp eq i32 %bf.clear332, 43, !dbg !4199
  br i1 %cmp333, label %if.then335, label %if.else337, !dbg !4202

if.then335:                                       ; preds = %if.then330
  %156 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4203
  %157 = load i32, i32* %fieldmode.addr, align 4, !dbg !4203
  %158 = load i64, i64* %offset, align 8, !dbg !4203
  %call336 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %156, i32 %157, i64 %158, i32 1, i32 1), !dbg !4203
  store %struct.rtx_def* %call336, %struct.rtx_def** %op0, align 8, !dbg !4204
  br label %if.end349, !dbg !4205

if.else337:                                       ; preds = %if.then330
  %159 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4206
  %160 = bitcast %struct.rtx_def* %159 to i32*, !dbg !4206
  %bf.load338 = load i32, i32* %160, align 8, !dbg !4206
  %bf.lshr339 = lshr i32 %bf.load338, 16, !dbg !4206
  %bf.clear340 = and i32 %bf.lshr339, 255, !dbg !4206
  %161 = load i32, i32* %fieldmode.addr, align 4, !dbg !4208
  %cmp341 = icmp ne i32 %bf.clear340, %161, !dbg !4209
  br i1 %cmp341, label %if.then343, label %if.end348, !dbg !4210

if.then343:                                       ; preds = %if.else337
  %162 = load i32, i32* %fieldmode.addr, align 4, !dbg !4211
  %163 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4212
  %164 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4213
  %165 = bitcast %struct.rtx_def* %164 to i32*, !dbg !4213
  %bf.load344 = load i32, i32* %165, align 8, !dbg !4213
  %bf.lshr345 = lshr i32 %bf.load344, 16, !dbg !4213
  %bf.clear346 = and i32 %bf.lshr345, 255, !dbg !4213
  %166 = load i32, i32* %byte_offset, align 4, !dbg !4214
  %call347 = call %struct.rtx_def* @simplify_gen_subreg(i32 %162, %struct.rtx_def* %163, i32 %bf.clear346, i32 %166), !dbg !4215
  store %struct.rtx_def* %call347, %struct.rtx_def** %op0, align 8, !dbg !4216
  br label %if.end348, !dbg !4217

if.end348:                                        ; preds = %if.then343, %if.else337
  br label %if.end349

if.end349:                                        ; preds = %if.end348, %if.then335
  %167 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4218
  %168 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4219
  %call350 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %167, %struct.rtx_def* %168), !dbg !4220
  store i8 1, i8* %retval, align 1, !dbg !4221
  br label %return, !dbg !4221

if.end351:                                        ; preds = %cond.end318, %lor.lhs.false301, %land.lhs.true292, %lor.lhs.false278, %land.lhs.true256, %if.end244
  call void @llvm.dbg.declare(metadata i32* %imode, metadata !4222, metadata !DIExpression()), !dbg !4224
  %169 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4225
  %170 = bitcast %struct.rtx_def* %169 to i32*, !dbg !4225
  %bf.load352 = load i32, i32* %170, align 8, !dbg !4225
  %bf.lshr353 = lshr i32 %bf.load352, 16, !dbg !4225
  %bf.clear354 = and i32 %bf.lshr353, 255, !dbg !4225
  %call355 = call i32 @int_mode_for_mode(i32 %bf.clear354), !dbg !4226
  store i32 %call355, i32* %imode, align 4, !dbg !4224
  %171 = load i32, i32* %imode, align 4, !dbg !4227
  %172 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4229
  %173 = bitcast %struct.rtx_def* %172 to i32*, !dbg !4229
  %bf.load356 = load i32, i32* %173, align 8, !dbg !4229
  %bf.lshr357 = lshr i32 %bf.load356, 16, !dbg !4229
  %bf.clear358 = and i32 %bf.lshr357, 255, !dbg !4229
  %cmp359 = icmp ne i32 %171, %bf.clear358, !dbg !4230
  br i1 %cmp359, label %if.then361, label %if.end377, !dbg !4231

if.then361:                                       ; preds = %if.end351
  %174 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4232
  %175 = bitcast %struct.rtx_def* %174 to i32*, !dbg !4232
  %bf.load362 = load i32, i32* %175, align 8, !dbg !4232
  %bf.clear363 = and i32 %bf.load362, 65535, !dbg !4232
  %cmp364 = icmp eq i32 %bf.clear363, 43, !dbg !4232
  br i1 %cmp364, label %if.then366, label %if.else368, !dbg !4235

if.then366:                                       ; preds = %if.then361
  %176 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4236
  %177 = load i32, i32* %imode, align 4, !dbg !4236
  %call367 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %176, i32 %177, i64 0, i32 1, i32 1), !dbg !4236
  store %struct.rtx_def* %call367, %struct.rtx_def** %op0, align 8, !dbg !4237
  br label %if.end376, !dbg !4238

if.else368:                                       ; preds = %if.then361
  %178 = load i32, i32* %imode, align 4, !dbg !4239
  %cmp369 = icmp ne i32 %178, 1, !dbg !4239
  br i1 %cmp369, label %cond.false372, label %cond.true371, !dbg !4239

cond.true371:                                     ; preds = %if.else368
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 508, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4239
  br label %cond.end373, !dbg !4239

cond.false372:                                    ; preds = %if.else368
  br label %cond.end373, !dbg !4239

cond.end373:                                      ; preds = %cond.false372, %cond.true371
  %cond374 = phi i32 [ 0, %cond.true371 ], [ 0, %cond.false372 ], !dbg !4239
  %179 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !4241
  %180 = load i32, i32* %imode, align 4, !dbg !4242
  %181 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4243
  %call375 = call %struct.rtx_def* %179(i32 %180, %struct.rtx_def* %181), !dbg !4241
  store %struct.rtx_def* %call375, %struct.rtx_def** %op0, align 8, !dbg !4244
  br label %if.end376

if.end376:                                        ; preds = %cond.end373, %if.then366
  br label %if.end377, !dbg !4245

if.end377:                                        ; preds = %if.end376, %if.end351
  %182 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4246
  %183 = bitcast %struct.rtx_def* %182 to i32*, !dbg !4246
  %bf.load378 = load i32, i32* %183, align 8, !dbg !4246
  %bf.clear379 = and i32 %bf.load378, 65535, !dbg !4246
  %cmp380 = icmp eq i32 %bf.clear379, 43, !dbg !4246
  br i1 %cmp380, label %if.then382, label %if.end384, !dbg !4248

if.then382:                                       ; preds = %if.end377
  %184 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4249
  %call383 = call %struct.rtx_def* @shallow_copy_rtx_stat(%struct.rtx_def* %184), !dbg !4249
  store %struct.rtx_def* %call383, %struct.rtx_def** %op0, align 8, !dbg !4251
  %185 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4252
  call void @set_mem_alias_set(%struct.rtx_def* %185, i32 0), !dbg !4253
  %186 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4254
  call void @set_mem_expr(%struct.rtx_def* %186, %union.tree_node* null), !dbg !4255
  br label %if.end384, !dbg !4256

if.end384:                                        ; preds = %if.then382, %if.end377
  %187 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4257
  %188 = bitcast %struct.rtx_def* %187 to i32*, !dbg !4257
  %bf.load385 = load i32, i32* %188, align 8, !dbg !4257
  %bf.clear386 = and i32 %bf.load385, 65535, !dbg !4257
  %cmp387 = icmp eq i32 %bf.clear386, 43, !dbg !4257
  br i1 %cmp387, label %if.end509, label %land.lhs.true389, !dbg !4259

land.lhs.true389:                                 ; preds = %if.end384
  br i1 false, label %cond.true390, label %cond.false395, !dbg !4260

cond.true390:                                     ; preds = %land.lhs.true389
  %189 = load i64, i64* %bitpos, align 8, !dbg !4261
  %190 = load i64, i64* %bitsize.addr, align 8, !dbg !4262
  %add391 = add i64 %189, %190, !dbg !4263
  %191 = load i32, i32* %unit, align 4, !dbg !4264
  %conv392 = zext i32 %191 to i64, !dbg !4264
  %cmp393 = icmp eq i64 %add391, %conv392, !dbg !4265
  br i1 %cmp393, label %land.lhs.true398, label %if.end509, !dbg !4266

cond.false395:                                    ; preds = %land.lhs.true389
  %192 = load i64, i64* %bitpos, align 8, !dbg !4267
  %cmp396 = icmp eq i64 %192, 0, !dbg !4268
  br i1 %cmp396, label %land.lhs.true398, label %if.end509, !dbg !4260

land.lhs.true398:                                 ; preds = %cond.false395, %cond.true390
  %193 = load i64, i64* %bitsize.addr, align 8, !dbg !4269
  %194 = load i32, i32* %fieldmode.addr, align 4, !dbg !4270
  %idxprom399 = zext i32 %194 to i64, !dbg !4270
  %arrayidx400 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom399, !dbg !4270
  %195 = load i8, i8* %arrayidx400, align 1, !dbg !4270
  %conv401 = zext i8 %195 to i16, !dbg !4270
  %conv402 = zext i16 %conv401 to i32, !dbg !4270
  %mul403 = mul nsw i32 %conv402, 8, !dbg !4270
  %conv404 = trunc i32 %mul403 to i16, !dbg !4270
  %conv405 = zext i16 %conv404 to i64, !dbg !4270
  %cmp406 = icmp eq i64 %193, %conv405, !dbg !4271
  br i1 %cmp406, label %land.lhs.true408, label %if.end509, !dbg !4272

land.lhs.true408:                                 ; preds = %land.lhs.true398
  %196 = load i32, i32* %fieldmode.addr, align 4, !dbg !4273
  %idxprom409 = sext i32 %196 to i64, !dbg !4273
  %arrayidx410 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 61, i32 4), i64 0, i64 %idxprom409, !dbg !4273
  %insn_code411 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx410, i32 0, i32 0, !dbg !4274
  %197 = load i32, i32* %insn_code411, align 4, !dbg !4274
  %cmp412 = icmp ne i32 %197, 2956, !dbg !4275
  br i1 %cmp412, label %if.then414, label %if.end509, !dbg !4276

if.then414:                                       ; preds = %land.lhs.true408
  call void @llvm.dbg.declare(metadata i32* %icode415, metadata !4277, metadata !DIExpression()), !dbg !4279
  %198 = load i32, i32* %fieldmode.addr, align 4, !dbg !4280
  %idxprom416 = sext i32 %198 to i64, !dbg !4280
  %arrayidx417 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 61, i32 4), i64 0, i64 %idxprom416, !dbg !4280
  %insn_code418 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx417, i32 0, i32 0, !dbg !4281
  %199 = load i32, i32* %insn_code418, align 4, !dbg !4281
  store i32 %199, i32* %icode415, align 4, !dbg !4279
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4282, metadata !DIExpression()), !dbg !4283
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %start, metadata !4284, metadata !DIExpression()), !dbg !4285
  %call419 = call %struct.rtx_def* @get_last_insn(), !dbg !4286
  store %struct.rtx_def* %call419, %struct.rtx_def** %start, align 8, !dbg !4285
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %arg0, metadata !4287, metadata !DIExpression()), !dbg !4288
  %200 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4289
  store %struct.rtx_def* %200, %struct.rtx_def** %arg0, align 8, !dbg !4288
  %201 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4290
  %202 = bitcast %struct.rtx_def* %201 to i32*, !dbg !4290
  %bf.load420 = load i32, i32* %202, align 8, !dbg !4290
  %bf.clear421 = and i32 %bf.load420, 65535, !dbg !4290
  %cmp422 = icmp eq i32 %bf.clear421, 30, !dbg !4290
  br i1 %cmp422, label %if.then429, label %lor.lhs.false424, !dbg !4292

lor.lhs.false424:                                 ; preds = %if.then414
  %203 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4293
  %204 = bitcast %struct.rtx_def* %203 to i32*, !dbg !4293
  %bf.load425 = load i32, i32* %204, align 8, !dbg !4293
  %bf.clear426 = and i32 %bf.load425, 65535, !dbg !4293
  %cmp427 = icmp eq i32 %bf.clear426, 37, !dbg !4293
  br i1 %cmp427, label %if.then429, label %if.else431, !dbg !4294

if.then429:                                       ; preds = %lor.lhs.false424, %if.then414
  %205 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !4295
  %206 = load i32, i32* %fieldmode.addr, align 4, !dbg !4296
  %207 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4297
  %call430 = call %struct.rtx_def* %205(i32 %206, %struct.rtx_def* %207), !dbg !4295
  store %struct.rtx_def* %call430, %struct.rtx_def** %value.addr, align 8, !dbg !4298
  br label %if.end449, !dbg !4299

if.else431:                                       ; preds = %lor.lhs.false424
  %208 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4300
  %209 = bitcast %struct.rtx_def* %208 to i32*, !dbg !4300
  %bf.load432 = load i32, i32* %209, align 8, !dbg !4300
  %bf.clear433 = and i32 %bf.load432, 65535, !dbg !4300
  %cmp434 = icmp eq i32 %bf.clear433, 45, !dbg !4302
  br i1 %cmp434, label %if.end448, label %lor.lhs.false436, !dbg !4303

lor.lhs.false436:                                 ; preds = %if.else431
  %210 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4304
  %211 = bitcast %struct.rtx_def* %210 to i32*, !dbg !4304
  %bf.load437 = load i32, i32* %211, align 8, !dbg !4304
  %bf.clear438 = and i32 %bf.load437, 65535, !dbg !4304
  %cmp439 = icmp eq i32 %bf.clear438, 44, !dbg !4305
  br i1 %cmp439, label %if.end448, label %lor.lhs.false441, !dbg !4306

lor.lhs.false441:                                 ; preds = %lor.lhs.false436
  %212 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4307
  %213 = bitcast %struct.rtx_def* %212 to i32*, !dbg !4307
  %bf.load442 = load i32, i32* %213, align 8, !dbg !4307
  %bf.clear443 = and i32 %bf.load442, 65535, !dbg !4307
  %cmp444 = icmp eq i32 %bf.clear443, 35, !dbg !4308
  br i1 %cmp444, label %if.end448, label %if.then446, !dbg !4309

if.then446:                                       ; preds = %lor.lhs.false441
  %214 = load i32, i32* %fieldmode.addr, align 4, !dbg !4310
  %215 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4311
  %call447 = call %struct.rtx_def* @convert_to_mode(i32 %214, %struct.rtx_def* %215, i32 0), !dbg !4312
  store %struct.rtx_def* %call447, %struct.rtx_def** %value.addr, align 8, !dbg !4313
  br label %if.end448, !dbg !4314

if.end448:                                        ; preds = %if.then446, %lor.lhs.false441, %lor.lhs.false436, %if.else431
  br label %if.end449

if.end449:                                        ; preds = %if.end448, %if.then429
  %216 = load i32, i32* %icode415, align 4, !dbg !4315
  %idxprom450 = sext i32 %216 to i64, !dbg !4317
  %arrayidx451 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom450, !dbg !4317
  %operand452 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx451, i32 0, i32 3, !dbg !4318
  %217 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand452, align 8, !dbg !4318
  %arrayidx453 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %217, i64 1, !dbg !4317
  %predicate454 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx453, i32 0, i32 0, !dbg !4319
  %218 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate454, align 8, !dbg !4319
  %219 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4320
  %220 = load i32, i32* %fieldmode.addr, align 4, !dbg !4321
  %call455 = call i32 %218(%struct.rtx_def* %219, i32 %220), !dbg !4322
  %tobool456 = icmp ne i32 %call455, 0, !dbg !4322
  br i1 %tobool456, label %if.end459, label %if.then457, !dbg !4323

if.then457:                                       ; preds = %if.end449
  %221 = load i32, i32* %fieldmode.addr, align 4, !dbg !4324
  %222 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4325
  %call458 = call %struct.rtx_def* @copy_to_mode_reg(i32 %221, %struct.rtx_def* %222), !dbg !4326
  store %struct.rtx_def* %call458, %struct.rtx_def** %value.addr, align 8, !dbg !4327
  br label %if.end459, !dbg !4328

if.end459:                                        ; preds = %if.then457, %if.end449
  %223 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4329
  %224 = bitcast %struct.rtx_def* %223 to i32*, !dbg !4329
  %bf.load460 = load i32, i32* %224, align 8, !dbg !4329
  %bf.clear461 = and i32 %bf.load460, 65535, !dbg !4329
  %cmp462 = icmp eq i32 %bf.clear461, 39, !dbg !4331
  br i1 %cmp462, label %if.then464, label %if.end494, !dbg !4332

if.then464:                                       ; preds = %if.end459
  %225 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4333
  %u465 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %225, i32 0, i32 1, !dbg !4333
  %fld466 = bitcast %union.u* %u465 to [1 x %union.rtunion_def]*, !dbg !4333
  %arrayidx467 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld466, i64 0, i64 0, !dbg !4333
  %rt_rtx468 = bitcast %union.rtunion_def* %arrayidx467 to %struct.rtx_def**, !dbg !4333
  %226 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx468, align 8, !dbg !4333
  %227 = bitcast %struct.rtx_def* %226 to i32*, !dbg !4333
  %bf.load469 = load i32, i32* %227, align 8, !dbg !4333
  %bf.lshr470 = lshr i32 %bf.load469, 16, !dbg !4333
  %bf.clear471 = and i32 %bf.lshr470, 255, !dbg !4333
  %228 = load i32, i32* %fieldmode.addr, align 4, !dbg !4333
  %cmp472 = icmp eq i32 %bf.clear471, %228, !dbg !4333
  br i1 %cmp472, label %cond.false487, label %lor.lhs.false474, !dbg !4333

lor.lhs.false474:                                 ; preds = %if.then464
  %229 = load i32, i32* %fieldmode.addr, align 4, !dbg !4333
  %idxprom475 = zext i32 %229 to i64, !dbg !4333
  %arrayidx476 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom475, !dbg !4333
  %230 = load i8, i8* %arrayidx476, align 1, !dbg !4333
  %conv477 = zext i8 %230 to i32, !dbg !4333
  %cmp478 = icmp eq i32 %conv477, 2, !dbg !4333
  br i1 %cmp478, label %cond.false487, label %lor.lhs.false480, !dbg !4333

lor.lhs.false480:                                 ; preds = %lor.lhs.false474
  %231 = load i32, i32* %fieldmode.addr, align 4, !dbg !4333
  %idxprom481 = zext i32 %231 to i64, !dbg !4333
  %arrayidx482 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom481, !dbg !4333
  %232 = load i8, i8* %arrayidx482, align 1, !dbg !4333
  %conv483 = zext i8 %232 to i32, !dbg !4333
  %cmp484 = icmp eq i32 %conv483, 3, !dbg !4333
  br i1 %cmp484, label %cond.false487, label %cond.true486, !dbg !4333

cond.true486:                                     ; preds = %lor.lhs.false480
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 563, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4333
  br label %cond.end488, !dbg !4333

cond.false487:                                    ; preds = %lor.lhs.false480, %lor.lhs.false474, %if.then464
  br label %cond.end488, !dbg !4333

cond.end488:                                      ; preds = %cond.false487, %cond.true486
  %cond489 = phi i32 [ 0, %cond.true486 ], [ 0, %cond.false487 ], !dbg !4333
  %233 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4335
  %u490 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %233, i32 0, i32 1, !dbg !4335
  %fld491 = bitcast %union.u* %u490 to [1 x %union.rtunion_def]*, !dbg !4335
  %arrayidx492 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld491, i64 0, i64 0, !dbg !4335
  %rt_rtx493 = bitcast %union.rtunion_def* %arrayidx492 to %struct.rtx_def**, !dbg !4335
  %234 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx493, align 8, !dbg !4335
  store %struct.rtx_def* %234, %struct.rtx_def** %arg0, align 8, !dbg !4336
  br label %if.end494, !dbg !4337

if.end494:                                        ; preds = %cond.end488, %if.end459
  %235 = load i32, i32* %icode415, align 4, !dbg !4338
  %idxprom495 = sext i32 %235 to i64, !dbg !4338
  %arrayidx496 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom495, !dbg !4338
  %genfun497 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx496, i32 0, i32 2, !dbg !4338
  %236 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun497, align 8, !dbg !4338
  %237 = load i32, i32* %fieldmode.addr, align 4, !dbg !4339
  %238 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8, !dbg !4340
  %239 = load i64, i64* %bitnum.addr, align 8, !dbg !4341
  %rem498 = urem i64 %239, 32, !dbg !4342
  %div499 = udiv i64 %rem498, 8, !dbg !4343
  %240 = load i64, i64* %offset, align 8, !dbg !4344
  %mul500 = mul i64 %240, 4, !dbg !4345
  %add501 = add i64 %div499, %mul500, !dbg !4346
  %conv502 = trunc i64 %add501 to i32, !dbg !4347
  %call503 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %237, %struct.rtx_def* %238, i32 %conv502), !dbg !4348
  %241 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4349
  %call504 = call %struct.rtx_def* (%struct.rtx_def*, ...) %236(%struct.rtx_def* %call503, %struct.rtx_def* %241), !dbg !4338
  store %struct.rtx_def* %call504, %struct.rtx_def** %insn, align 8, !dbg !4350
  %242 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4351
  %tobool505 = icmp ne %struct.rtx_def* %242, null, !dbg !4351
  br i1 %tobool505, label %if.then506, label %if.end508, !dbg !4353

if.then506:                                       ; preds = %if.end494
  %243 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4354
  %call507 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %243), !dbg !4356
  store i8 1, i8* %retval, align 1, !dbg !4357
  br label %return, !dbg !4357

if.end508:                                        ; preds = %if.end494
  %244 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8, !dbg !4358
  call void @delete_insns_since(%struct.rtx_def* %244), !dbg !4359
  br label %if.end509, !dbg !4360

if.end509:                                        ; preds = %if.end508, %land.lhs.true408, %land.lhs.true398, %cond.false395, %cond.true390, %if.end384
  %245 = load i64, i64* %bitsize.addr, align 8, !dbg !4361
  %cmp510 = icmp ugt i64 %245, 32, !dbg !4363
  br i1 %cmp510, label %if.then512, label %if.end574, !dbg !4364

if.then512:                                       ; preds = %if.end509
  call void @llvm.dbg.declare(metadata i32* %backwards, metadata !4365, metadata !DIExpression()), !dbg !4367
  store i32 0, i32* %backwards, align 4, !dbg !4367
  call void @llvm.dbg.declare(metadata i32* %nwords, metadata !4368, metadata !DIExpression()), !dbg !4369
  %246 = load i64, i64* %bitsize.addr, align 8, !dbg !4370
  %add513 = add i64 %246, 31, !dbg !4371
  %div514 = udiv i64 %add513, 32, !dbg !4372
  %conv515 = trunc i64 %div514 to i32, !dbg !4373
  store i32 %conv515, i32* %nwords, align 4, !dbg !4369
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4374, metadata !DIExpression()), !dbg !4375
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !4376, metadata !DIExpression()), !dbg !4377
  %247 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4378
  %248 = bitcast %struct.rtx_def* %247 to i32*, !dbg !4378
  %bf.load516 = load i32, i32* %248, align 8, !dbg !4378
  %bf.lshr517 = lshr i32 %bf.load516, 16, !dbg !4378
  %bf.clear518 = and i32 %bf.lshr517, 255, !dbg !4378
  store i32 %bf.clear518, i32* %fieldmode.addr, align 4, !dbg !4379
  %249 = load i32, i32* %fieldmode.addr, align 4, !dbg !4380
  %cmp519 = icmp eq i32 %249, 0, !dbg !4382
  br i1 %cmp519, label %if.then521, label %if.end524, !dbg !4383

if.then521:                                       ; preds = %if.then512
  %250 = load i32, i32* %nwords, align 4, !dbg !4384
  %mul522 = mul i32 %250, 32, !dbg !4385
  %call523 = call i32 @smallest_mode_for_size(i32 %mul522, i32 2), !dbg !4386
  store i32 %call523, i32* %fieldmode.addr, align 4, !dbg !4387
  br label %if.end524, !dbg !4388

if.end524:                                        ; preds = %if.then521, %if.then512
  %call525 = call %struct.rtx_def* @get_last_insn(), !dbg !4389
  store %struct.rtx_def* %call525, %struct.rtx_def** %last, align 8, !dbg !4390
  store i32 0, i32* %i, align 4, !dbg !4391
  br label %for.cond, !dbg !4393

for.cond:                                         ; preds = %for.inc, %if.end524
  %251 = load i32, i32* %i, align 4, !dbg !4394
  %252 = load i32, i32* %nwords, align 4, !dbg !4396
  %cmp526 = icmp ult i32 %251, %252, !dbg !4397
  br i1 %cmp526, label %for.body, label %for.end, !dbg !4398

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %wordnum, metadata !4399, metadata !DIExpression()), !dbg !4401
  %253 = load i32, i32* %backwards, align 4, !dbg !4402
  %tobool528 = icmp ne i32 %253, 0, !dbg !4402
  br i1 %tobool528, label %cond.true529, label %cond.false532, !dbg !4402

cond.true529:                                     ; preds = %for.body
  %254 = load i32, i32* %nwords, align 4, !dbg !4403
  %255 = load i32, i32* %i, align 4, !dbg !4404
  %sub530 = sub i32 %254, %255, !dbg !4405
  %sub531 = sub i32 %sub530, 1, !dbg !4406
  br label %cond.end533, !dbg !4402

cond.false532:                                    ; preds = %for.body
  %256 = load i32, i32* %i, align 4, !dbg !4407
  br label %cond.end533, !dbg !4402

cond.end533:                                      ; preds = %cond.false532, %cond.true529
  %cond534 = phi i32 [ %sub531, %cond.true529 ], [ %256, %cond.false532 ], !dbg !4402
  store i32 %cond534, i32* %wordnum, align 4, !dbg !4401
  call void @llvm.dbg.declare(metadata i32* %bit_offset, metadata !4408, metadata !DIExpression()), !dbg !4409
  %257 = load i32, i32* %backwards, align 4, !dbg !4410
  %tobool535 = icmp ne i32 %257, 0, !dbg !4410
  br i1 %tobool535, label %cond.true536, label %cond.false551, !dbg !4410

cond.true536:                                     ; preds = %cond.end533
  %258 = load i64, i64* %bitsize.addr, align 8, !dbg !4411
  %conv537 = trunc i64 %258 to i32, !dbg !4411
  %259 = load i32, i32* %i, align 4, !dbg !4411
  %add538 = add nsw i32 %259, 1, !dbg !4411
  %mul539 = mul nsw i32 %add538, 32, !dbg !4411
  %sub540 = sub nsw i32 %conv537, %mul539, !dbg !4411
  %cmp541 = icmp sgt i32 %sub540, 0, !dbg !4411
  br i1 %cmp541, label %cond.true543, label %cond.false548, !dbg !4411

cond.true543:                                     ; preds = %cond.true536
  %260 = load i64, i64* %bitsize.addr, align 8, !dbg !4411
  %conv544 = trunc i64 %260 to i32, !dbg !4411
  %261 = load i32, i32* %i, align 4, !dbg !4411
  %add545 = add nsw i32 %261, 1, !dbg !4411
  %mul546 = mul nsw i32 %add545, 32, !dbg !4411
  %sub547 = sub nsw i32 %conv544, %mul546, !dbg !4411
  br label %cond.end549, !dbg !4411

cond.false548:                                    ; preds = %cond.true536
  br label %cond.end549, !dbg !4411

cond.end549:                                      ; preds = %cond.false548, %cond.true543
  %cond550 = phi i32 [ %sub547, %cond.true543 ], [ 0, %cond.false548 ], !dbg !4411
  br label %cond.end553, !dbg !4410

cond.false551:                                    ; preds = %cond.end533
  %262 = load i32, i32* %i, align 4, !dbg !4412
  %mul552 = mul nsw i32 %262, 32, !dbg !4413
  br label %cond.end553, !dbg !4410

cond.end553:                                      ; preds = %cond.false551, %cond.end549
  %cond554 = phi i32 [ %cond550, %cond.end549 ], [ %mul552, %cond.false551 ], !dbg !4410
  store i32 %cond554, i32* %bit_offset, align 4, !dbg !4409
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value_word, metadata !4414, metadata !DIExpression()), !dbg !4415
  %263 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4416
  %264 = load i32, i32* %wordnum, align 4, !dbg !4417
  %265 = load i32, i32* %fieldmode.addr, align 4, !dbg !4418
  %call555 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %263, i32 %264, i32 %265), !dbg !4419
  store %struct.rtx_def* %call555, %struct.rtx_def** %value_word, align 8, !dbg !4415
  %266 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4420
  %267 = load i64, i64* %bitsize.addr, align 8, !dbg !4422
  %268 = load i32, i32* %i, align 4, !dbg !4422
  %mul556 = mul i32 %268, 32, !dbg !4422
  %conv557 = zext i32 %mul556 to i64, !dbg !4422
  %sub558 = sub i64 %267, %conv557, !dbg !4422
  %cmp559 = icmp ult i64 32, %sub558, !dbg !4422
  br i1 %cmp559, label %cond.true561, label %cond.false562, !dbg !4422

cond.true561:                                     ; preds = %cond.end553
  br label %cond.end566, !dbg !4422

cond.false562:                                    ; preds = %cond.end553
  %269 = load i64, i64* %bitsize.addr, align 8, !dbg !4422
  %270 = load i32, i32* %i, align 4, !dbg !4422
  %mul563 = mul i32 %270, 32, !dbg !4422
  %conv564 = zext i32 %mul563 to i64, !dbg !4422
  %sub565 = sub i64 %269, %conv564, !dbg !4422
  br label %cond.end566, !dbg !4422

cond.end566:                                      ; preds = %cond.false562, %cond.true561
  %cond567 = phi i64 [ 32, %cond.true561 ], [ %sub565, %cond.false562 ], !dbg !4422
  %271 = load i64, i64* %bitnum.addr, align 8, !dbg !4423
  %272 = load i32, i32* %bit_offset, align 4, !dbg !4424
  %conv568 = zext i32 %272 to i64, !dbg !4424
  %add569 = add i64 %271, %conv568, !dbg !4425
  %273 = load i32, i32* @word_mode, align 4, !dbg !4426
  %274 = load %struct.rtx_def*, %struct.rtx_def** %value_word, align 8, !dbg !4427
  %275 = load i8, i8* %fallback_p.addr, align 1, !dbg !4428
  %call570 = call zeroext i8 @store_bit_field_1(%struct.rtx_def* %266, i64 %cond567, i64 %add569, i32 %273, %struct.rtx_def* %274, i8 zeroext %275), !dbg !4429
  %tobool571 = icmp ne i8 %call570, 0, !dbg !4429
  br i1 %tobool571, label %if.end573, label %if.then572, !dbg !4430

if.then572:                                       ; preds = %cond.end566
  %276 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !4431
  call void @delete_insns_since(%struct.rtx_def* %276), !dbg !4433
  store i8 0, i8* %retval, align 1, !dbg !4434
  br label %return, !dbg !4434

if.end573:                                        ; preds = %cond.end566
  br label %for.inc, !dbg !4435

for.inc:                                          ; preds = %if.end573
  %277 = load i32, i32* %i, align 4, !dbg !4436
  %inc = add i32 %277, 1, !dbg !4436
  store i32 %inc, i32* %i, align 4, !dbg !4436
  br label %for.cond, !dbg !4437, !llvm.loop !4438

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4440
  br label %return, !dbg !4440

if.end574:                                        ; preds = %if.end509
  %278 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4441
  %279 = bitcast %struct.rtx_def* %278 to i32*, !dbg !4441
  %bf.load575 = load i32, i32* %279, align 8, !dbg !4441
  %bf.clear576 = and i32 %bf.load575, 65535, !dbg !4441
  %cmp577 = icmp eq i32 %bf.clear576, 43, !dbg !4441
  br i1 %cmp577, label %if.end637, label %if.then579, !dbg !4443

if.then579:                                       ; preds = %if.end574
  %280 = load i64, i64* %offset, align 8, !dbg !4444
  %cmp580 = icmp ne i64 %280, 0, !dbg !4447
  br i1 %cmp580, label %if.then592, label %lor.lhs.false582, !dbg !4448

lor.lhs.false582:                                 ; preds = %if.then579
  %281 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4449
  %282 = bitcast %struct.rtx_def* %281 to i32*, !dbg !4449
  %bf.load583 = load i32, i32* %282, align 8, !dbg !4449
  %bf.lshr584 = lshr i32 %bf.load583, 16, !dbg !4449
  %bf.clear585 = and i32 %bf.lshr584, 255, !dbg !4449
  %idxprom586 = zext i32 %bf.clear585 to i64, !dbg !4449
  %arrayidx587 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom586, !dbg !4449
  %283 = load i8, i8* %arrayidx587, align 1, !dbg !4449
  %conv588 = zext i8 %283 to i16, !dbg !4449
  %conv589 = zext i16 %conv588 to i32, !dbg !4449
  %cmp590 = icmp sgt i32 %conv589, 4, !dbg !4450
  br i1 %cmp590, label %if.then592, label %if.end636, !dbg !4451

if.then592:                                       ; preds = %lor.lhs.false582, %if.then579
  %284 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4452
  %285 = bitcast %struct.rtx_def* %284 to i32*, !dbg !4452
  %bf.load593 = load i32, i32* %285, align 8, !dbg !4452
  %bf.clear594 = and i32 %bf.load593, 65535, !dbg !4452
  %cmp595 = icmp eq i32 %bf.clear594, 37, !dbg !4452
  br i1 %cmp595, label %if.end631, label %if.then597, !dbg !4455

if.then597:                                       ; preds = %if.then592
  %286 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4456
  %287 = bitcast %struct.rtx_def* %286 to i32*, !dbg !4456
  %bf.load598 = load i32, i32* %287, align 8, !dbg !4456
  %bf.clear599 = and i32 %bf.load598, 65535, !dbg !4456
  %cmp600 = icmp eq i32 %bf.clear599, 39, !dbg !4456
  br i1 %cmp600, label %land.lhs.true602, label %cond.true623, !dbg !4456

land.lhs.true602:                                 ; preds = %if.then597
  %288 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4456
  %289 = bitcast %struct.rtx_def* %288 to i32*, !dbg !4456
  %bf.load603 = load i32, i32* %289, align 8, !dbg !4456
  %bf.lshr604 = lshr i32 %bf.load603, 16, !dbg !4456
  %bf.clear605 = and i32 %bf.lshr604, 255, !dbg !4456
  %idxprom606 = zext i32 %bf.clear605 to i64, !dbg !4456
  %arrayidx607 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom606, !dbg !4456
  %290 = load i8, i8* %arrayidx607, align 1, !dbg !4456
  %conv608 = zext i8 %290 to i16, !dbg !4456
  %conv609 = zext i16 %conv608 to i32, !dbg !4456
  %291 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4456
  %u610 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %291, i32 0, i32 1, !dbg !4456
  %fld611 = bitcast %union.u* %u610 to [1 x %union.rtunion_def]*, !dbg !4456
  %arrayidx612 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld611, i64 0, i64 0, !dbg !4456
  %rt_rtx613 = bitcast %union.rtunion_def* %arrayidx612 to %struct.rtx_def**, !dbg !4456
  %292 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx613, align 8, !dbg !4456
  %293 = bitcast %struct.rtx_def* %292 to i32*, !dbg !4456
  %bf.load614 = load i32, i32* %293, align 8, !dbg !4456
  %bf.lshr615 = lshr i32 %bf.load614, 16, !dbg !4456
  %bf.clear616 = and i32 %bf.lshr615, 255, !dbg !4456
  %idxprom617 = zext i32 %bf.clear616 to i64, !dbg !4456
  %arrayidx618 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom617, !dbg !4456
  %294 = load i8, i8* %arrayidx618, align 1, !dbg !4456
  %conv619 = zext i8 %294 to i16, !dbg !4456
  %conv620 = zext i16 %conv619 to i32, !dbg !4456
  %cmp621 = icmp eq i32 %conv609, %conv620, !dbg !4456
  br i1 %cmp621, label %cond.false624, label %cond.true623, !dbg !4456

cond.true623:                                     ; preds = %land.lhs.true602, %if.then597
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 648, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4456
  br label %cond.end625, !dbg !4456

cond.false624:                                    ; preds = %land.lhs.true602
  br label %cond.end625, !dbg !4456

cond.end625:                                      ; preds = %cond.false624, %cond.true623
  %cond626 = phi i32 [ 0, %cond.true623 ], [ 0, %cond.false624 ], !dbg !4456
  %295 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4458
  %u627 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %295, i32 0, i32 1, !dbg !4458
  %fld628 = bitcast %union.u* %u627 to [1 x %union.rtunion_def]*, !dbg !4458
  %arrayidx629 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld628, i64 0, i64 0, !dbg !4458
  %rt_rtx630 = bitcast %union.rtunion_def* %arrayidx629 to %struct.rtx_def**, !dbg !4458
  %296 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx630, align 8, !dbg !4458
  store %struct.rtx_def* %296, %struct.rtx_def** %op0, align 8, !dbg !4459
  br label %if.end631, !dbg !4460

if.end631:                                        ; preds = %cond.end625, %if.then592
  %call632 = call i32 @mode_for_size(i32 32, i32 2, i32 0), !dbg !4461
  %297 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4462
  %298 = load i64, i64* %offset, align 8, !dbg !4463
  %mul633 = mul i64 %298, 4, !dbg !4464
  %conv634 = trunc i64 %mul633 to i32, !dbg !4465
  %call635 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %call632, %struct.rtx_def* %297, i32 %conv634), !dbg !4466
  store %struct.rtx_def* %call635, %struct.rtx_def** %op0, align 8, !dbg !4467
  br label %if.end636, !dbg !4468

if.end636:                                        ; preds = %if.end631, %lor.lhs.false582
  store i64 0, i64* %offset, align 8, !dbg !4469
  br label %if.end637, !dbg !4470

if.end637:                                        ; preds = %if.end636, %if.end574
  %299 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4471
  store %struct.rtx_def* %299, %struct.rtx_def** %orig_value, align 8, !dbg !4472
  %300 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4473
  %301 = bitcast %struct.rtx_def* %300 to i32*, !dbg !4473
  %bf.load638 = load i32, i32* %301, align 8, !dbg !4473
  %bf.lshr639 = lshr i32 %bf.load638, 16, !dbg !4473
  %bf.clear640 = and i32 %bf.lshr639, 255, !dbg !4473
  %cmp641 = icmp ne i32 %bf.clear640, 0, !dbg !4475
  br i1 %cmp641, label %land.lhs.true643, label %if.end672, !dbg !4476

land.lhs.true643:                                 ; preds = %if.end637
  %302 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4477
  %303 = bitcast %struct.rtx_def* %302 to i32*, !dbg !4477
  %bf.load644 = load i32, i32* %303, align 8, !dbg !4477
  %bf.lshr645 = lshr i32 %bf.load644, 16, !dbg !4477
  %bf.clear646 = and i32 %bf.lshr645, 255, !dbg !4477
  %idxprom647 = zext i32 %bf.clear646 to i64, !dbg !4477
  %arrayidx648 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom647, !dbg !4477
  %304 = load i8, i8* %arrayidx648, align 1, !dbg !4477
  %conv649 = zext i8 %304 to i32, !dbg !4477
  %cmp650 = icmp ne i32 %conv649, 2, !dbg !4478
  br i1 %cmp650, label %land.lhs.true652, label %if.end672, !dbg !4479

land.lhs.true652:                                 ; preds = %land.lhs.true643
  %305 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4480
  %306 = bitcast %struct.rtx_def* %305 to i32*, !dbg !4480
  %bf.load653 = load i32, i32* %306, align 8, !dbg !4480
  %bf.lshr654 = lshr i32 %bf.load653, 16, !dbg !4480
  %bf.clear655 = and i32 %bf.lshr654, 255, !dbg !4480
  %idxprom656 = zext i32 %bf.clear655 to i64, !dbg !4480
  %arrayidx657 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom656, !dbg !4480
  %307 = load i8, i8* %arrayidx657, align 1, !dbg !4480
  %conv658 = zext i8 %307 to i32, !dbg !4480
  %cmp659 = icmp ne i32 %conv658, 3, !dbg !4481
  br i1 %cmp659, label %if.then661, label %if.end672, !dbg !4482

if.then661:                                       ; preds = %land.lhs.true652
  %308 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4483
  %309 = bitcast %struct.rtx_def* %308 to i32*, !dbg !4483
  %bf.load662 = load i32, i32* %309, align 8, !dbg !4483
  %bf.lshr663 = lshr i32 %bf.load662, 16, !dbg !4483
  %bf.clear664 = and i32 %bf.lshr663, 255, !dbg !4483
  %call665 = call i32 @int_mode_for_mode(i32 %bf.clear664), !dbg !4485
  %call666 = call %struct.rtx_def* @gen_reg_rtx(i32 %call665), !dbg !4486
  store %struct.rtx_def* %call666, %struct.rtx_def** %value.addr, align 8, !dbg !4487
  %310 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !4488
  %311 = load %struct.rtx_def*, %struct.rtx_def** %orig_value, align 8, !dbg !4489
  %312 = bitcast %struct.rtx_def* %311 to i32*, !dbg !4489
  %bf.load667 = load i32, i32* %312, align 8, !dbg !4489
  %bf.lshr668 = lshr i32 %bf.load667, 16, !dbg !4489
  %bf.clear669 = and i32 %bf.lshr668, 255, !dbg !4489
  %313 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4490
  %call670 = call %struct.rtx_def* %310(i32 %bf.clear669, %struct.rtx_def* %313), !dbg !4488
  %314 = load %struct.rtx_def*, %struct.rtx_def** %orig_value, align 8, !dbg !4491
  %call671 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call670, %struct.rtx_def* %314), !dbg !4492
  br label %if.end672, !dbg !4493

if.end672:                                        ; preds = %if.then661, %land.lhs.true652, %land.lhs.true643, %if.end637
  %315 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4494
  %316 = bitcast %struct.rtx_def* %315 to i32*, !dbg !4494
  %bf.load673 = load i32, i32* %316, align 8, !dbg !4494
  %bf.lshr674 = lshr i32 %bf.load673, 16, !dbg !4494
  %bf.clear675 = and i32 %bf.lshr674, 255, !dbg !4494
  %cmp676 = icmp ne i32 %bf.clear675, 1, !dbg !4496
  br i1 %cmp676, label %land.lhs.true678, label %if.end879, !dbg !4497

land.lhs.true678:                                 ; preds = %if.end672
  %317 = load i64, i64* %bitsize.addr, align 8, !dbg !4498
  %cmp679 = icmp ugt i64 %317, 0, !dbg !4499
  br i1 %cmp679, label %land.lhs.true681, label %if.end879, !dbg !4500

land.lhs.true681:                                 ; preds = %land.lhs.true678
  %318 = load i32, i32* %op_mode, align 4, !dbg !4501
  %idxprom682 = zext i32 %318 to i64, !dbg !4501
  %arrayidx683 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom682, !dbg !4501
  %319 = load i8, i8* %arrayidx683, align 1, !dbg !4501
  %conv684 = zext i8 %319 to i16, !dbg !4501
  %conv685 = zext i16 %conv684 to i32, !dbg !4501
  %mul686 = mul nsw i32 %conv685, 8, !dbg !4501
  %conv687 = trunc i32 %mul686 to i16, !dbg !4501
  %conv688 = zext i16 %conv687 to i64, !dbg !4501
  %320 = load i64, i64* %bitsize.addr, align 8, !dbg !4502
  %cmp689 = icmp uge i64 %conv688, %320, !dbg !4503
  br i1 %cmp689, label %land.lhs.true691, label %if.end879, !dbg !4504

land.lhs.true691:                                 ; preds = %land.lhs.true681
  %321 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4505
  %322 = bitcast %struct.rtx_def* %321 to i32*, !dbg !4505
  %bf.load692 = load i32, i32* %322, align 8, !dbg !4505
  %bf.clear693 = and i32 %bf.load692, 65535, !dbg !4505
  %cmp694 = icmp eq i32 %bf.clear693, 37, !dbg !4505
  br i1 %cmp694, label %land.lhs.true701, label %lor.lhs.false696, !dbg !4506

lor.lhs.false696:                                 ; preds = %land.lhs.true691
  %323 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4507
  %324 = bitcast %struct.rtx_def* %323 to i32*, !dbg !4507
  %bf.load697 = load i32, i32* %324, align 8, !dbg !4507
  %bf.clear698 = and i32 %bf.load697, 65535, !dbg !4507
  %cmp699 = icmp eq i32 %bf.clear698, 39, !dbg !4508
  br i1 %cmp699, label %land.lhs.true701, label %land.lhs.true712, !dbg !4509

land.lhs.true701:                                 ; preds = %lor.lhs.false696, %land.lhs.true691
  %325 = load i64, i64* %bitsize.addr, align 8, !dbg !4510
  %326 = load i64, i64* %bitpos, align 8, !dbg !4511
  %add702 = add i64 %325, %326, !dbg !4512
  %327 = load i32, i32* %op_mode, align 4, !dbg !4513
  %idxprom703 = zext i32 %327 to i64, !dbg !4513
  %arrayidx704 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom703, !dbg !4513
  %328 = load i8, i8* %arrayidx704, align 1, !dbg !4513
  %conv705 = zext i8 %328 to i16, !dbg !4513
  %conv706 = zext i16 %conv705 to i32, !dbg !4513
  %mul707 = mul nsw i32 %conv706, 8, !dbg !4513
  %conv708 = trunc i32 %mul707 to i16, !dbg !4513
  %conv709 = zext i16 %conv708 to i64, !dbg !4513
  %cmp710 = icmp ugt i64 %add702, %conv709, !dbg !4514
  br i1 %cmp710, label %if.end879, label %land.lhs.true712, !dbg !4515

land.lhs.true712:                                 ; preds = %land.lhs.true701, %lor.lhs.false696
  %329 = load %struct.insn_operand_data*, %struct.insn_operand_data** getelementptr inbounds ([0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 2181, i32 3), align 8, !dbg !4516
  %arrayidx713 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %329, i64 1, !dbg !4517
  %predicate714 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx713, i32 0, i32 0, !dbg !4518
  %330 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate714, align 8, !dbg !4518
  %331 = load i64, i64* %bitsize.addr, align 8, !dbg !4519
  %call715 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %331), !dbg !4519
  %call716 = call i32 %330(%struct.rtx_def* %call715, i32 0), !dbg !4517
  %tobool717 = icmp ne i32 %call716, 0, !dbg !4517
  br i1 %tobool717, label %land.lhs.true718, label %if.end879, !dbg !4520

land.lhs.true718:                                 ; preds = %land.lhs.true712
  %332 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4521
  %call719 = call zeroext i8 @check_predicate_volatile_ok(i32 2181, i32 0, %struct.rtx_def* %332, i32 0), !dbg !4522
  %conv720 = zext i8 %call719 to i32, !dbg !4522
  %tobool721 = icmp ne i32 %conv720, 0, !dbg !4522
  br i1 %tobool721, label %if.then722, label %if.end879, !dbg !4523

if.then722:                                       ; preds = %land.lhs.true718
  call void @llvm.dbg.declare(metadata i32* %xbitpos, metadata !4524, metadata !DIExpression()), !dbg !4526
  %333 = load i64, i64* %bitpos, align 8, !dbg !4527
  %conv723 = trunc i64 %333 to i32, !dbg !4527
  store i32 %conv723, i32* %xbitpos, align 4, !dbg !4526
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value1, metadata !4528, metadata !DIExpression()), !dbg !4529
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !4530, metadata !DIExpression()), !dbg !4531
  %334 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4532
  store %struct.rtx_def* %334, %struct.rtx_def** %xop0, align 8, !dbg !4531
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last724, metadata !4533, metadata !DIExpression()), !dbg !4534
  %call725 = call %struct.rtx_def* @get_last_insn(), !dbg !4535
  store %struct.rtx_def* %call725, %struct.rtx_def** %last724, align 8, !dbg !4534
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat726, metadata !4536, metadata !DIExpression()), !dbg !4537
  call void @llvm.dbg.declare(metadata i8* %copy_back, metadata !4538, metadata !DIExpression()), !dbg !4539
  store i8 0, i8* %copy_back, align 1, !dbg !4539
  %335 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4540
  %336 = bitcast %struct.rtx_def* %335 to i32*, !dbg !4540
  %bf.load727 = load i32, i32* %336, align 8, !dbg !4540
  %bf.clear728 = and i32 %bf.load727, 65535, !dbg !4540
  %cmp729 = icmp eq i32 %bf.clear728, 43, !dbg !4540
  br i1 %cmp729, label %if.then731, label %if.end733, !dbg !4542

if.then731:                                       ; preds = %if.then722
  %337 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4543
  %338 = load i32, i32* @byte_mode, align 4, !dbg !4543
  %339 = load i64, i64* %offset, align 8, !dbg !4543
  %call732 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %337, i32 %338, i64 %339, i32 1, i32 1), !dbg !4543
  store %struct.rtx_def* %call732, %struct.rtx_def** %xop0, align 8, !dbg !4544
  br label %if.end733, !dbg !4545

if.end733:                                        ; preds = %if.then731, %if.then722
  %340 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4546
  %341 = bitcast %struct.rtx_def* %340 to i32*, !dbg !4546
  %bf.load734 = load i32, i32* %341, align 8, !dbg !4546
  %bf.clear735 = and i32 %bf.load734, 65535, !dbg !4546
  %cmp736 = icmp eq i32 %bf.clear735, 39, !dbg !4548
  br i1 %cmp736, label %if.then738, label %if.end748, !dbg !4549

if.then738:                                       ; preds = %if.end733
  %342 = load i32, i32* %op_mode, align 4, !dbg !4550
  %343 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4551
  %u739 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %343, i32 0, i32 1, !dbg !4551
  %fld740 = bitcast %union.u* %u739 to [1 x %union.rtunion_def]*, !dbg !4551
  %arrayidx741 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld740, i64 0, i64 0, !dbg !4551
  %rt_rtx742 = bitcast %union.rtunion_def* %arrayidx741 to %struct.rtx_def**, !dbg !4551
  %344 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx742, align 8, !dbg !4551
  %345 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4552
  %u743 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %345, i32 0, i32 1, !dbg !4552
  %fld744 = bitcast %union.u* %u743 to [1 x %union.rtunion_def]*, !dbg !4552
  %arrayidx745 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld744, i64 0, i64 1, !dbg !4552
  %rt_uint746 = bitcast %union.rtunion_def* %arrayidx745 to i32*, !dbg !4552
  %346 = load i32, i32* %rt_uint746, align 8, !dbg !4552
  %call747 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %342, %struct.rtx_def* %344, i32 %346), !dbg !4553
  store %struct.rtx_def* %call747, %struct.rtx_def** %xop0, align 8, !dbg !4554
  br label %if.end748, !dbg !4555

if.end748:                                        ; preds = %if.then738, %if.end733
  %347 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4556
  %348 = bitcast %struct.rtx_def* %347 to i32*, !dbg !4556
  %bf.load749 = load i32, i32* %348, align 8, !dbg !4556
  %bf.clear750 = and i32 %bf.load749, 65535, !dbg !4556
  %cmp751 = icmp eq i32 %bf.clear750, 37, !dbg !4556
  br i1 %cmp751, label %land.lhs.true753, label %if.end761, !dbg !4558

land.lhs.true753:                                 ; preds = %if.end748
  %349 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4559
  %350 = bitcast %struct.rtx_def* %349 to i32*, !dbg !4559
  %bf.load754 = load i32, i32* %350, align 8, !dbg !4559
  %bf.lshr755 = lshr i32 %bf.load754, 16, !dbg !4559
  %bf.clear756 = and i32 %bf.lshr755, 255, !dbg !4559
  %351 = load i32, i32* %op_mode, align 4, !dbg !4560
  %cmp757 = icmp ne i32 %bf.clear756, %351, !dbg !4561
  br i1 %cmp757, label %if.then759, label %if.end761, !dbg !4562

if.then759:                                       ; preds = %land.lhs.true753
  %352 = load i32, i32* %op_mode, align 4, !dbg !4563
  %353 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4564
  %call760 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %352, %struct.rtx_def* %353), !dbg !4565
  store %struct.rtx_def* %call760, %struct.rtx_def** %xop0, align 8, !dbg !4566
  br label %if.end761, !dbg !4567

if.end761:                                        ; preds = %if.then759, %land.lhs.true753, %if.end748
  %354 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4568
  %355 = bitcast %struct.rtx_def* %354 to i32*, !dbg !4568
  %bf.load762 = load i32, i32* %355, align 8, !dbg !4568
  %bf.clear763 = and i32 %bf.load762, 65535, !dbg !4568
  %cmp764 = icmp eq i32 %bf.clear763, 39, !dbg !4570
  br i1 %cmp764, label %land.lhs.true766, label %if.end779, !dbg !4571

land.lhs.true766:                                 ; preds = %if.end761
  %356 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4572
  %u767 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %356, i32 0, i32 1, !dbg !4572
  %fld768 = bitcast %union.u* %u767 to [1 x %union.rtunion_def]*, !dbg !4572
  %arrayidx769 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld768, i64 0, i64 0, !dbg !4572
  %rt_rtx770 = bitcast %union.rtunion_def* %arrayidx769 to %struct.rtx_def**, !dbg !4572
  %357 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx770, align 8, !dbg !4572
  %358 = bitcast %struct.rtx_def* %357 to i32*, !dbg !4572
  %bf.load771 = load i32, i32* %358, align 8, !dbg !4572
  %bf.clear772 = and i32 %bf.load771, 65535, !dbg !4572
  %cmp773 = icmp eq i32 %bf.clear772, 37, !dbg !4572
  br i1 %cmp773, label %land.lhs.true775, label %if.end779, !dbg !4573

land.lhs.true775:                                 ; preds = %land.lhs.true766
  br i1 true, label %if.end779, label %if.then776, !dbg !4574

if.then776:                                       ; preds = %land.lhs.true775
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !4575, metadata !DIExpression()), !dbg !4577
  %359 = load i32, i32* %op_mode, align 4, !dbg !4578
  %call777 = call %struct.rtx_def* @gen_reg_rtx(i32 %359), !dbg !4579
  store %struct.rtx_def* %call777, %struct.rtx_def** %tem, align 8, !dbg !4577
  %360 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !4580
  %361 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4581
  %call778 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %360, %struct.rtx_def* %361), !dbg !4582
  %362 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !4583
  store %struct.rtx_def* %362, %struct.rtx_def** %xop0, align 8, !dbg !4584
  store i8 1, i8* %copy_back, align 1, !dbg !4585
  br label %if.end779, !dbg !4586

if.end779:                                        ; preds = %if.then776, %land.lhs.true775, %land.lhs.true766, %if.end761
  %363 = load i32, i32* %op_mode, align 4, !dbg !4587
  %idxprom780 = zext i32 %363 to i64, !dbg !4587
  %arrayidx781 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom780, !dbg !4587
  %364 = load i8, i8* %arrayidx781, align 1, !dbg !4587
  %conv782 = zext i8 %364 to i16, !dbg !4587
  %conv783 = zext i16 %conv782 to i32, !dbg !4587
  %mul784 = mul nsw i32 %conv783, 8, !dbg !4587
  %conv785 = trunc i32 %mul784 to i16, !dbg !4587
  %conv786 = zext i16 %conv785 to i32, !dbg !4587
  store i32 %conv786, i32* %unit, align 4, !dbg !4588
  %365 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4589
  store %struct.rtx_def* %365, %struct.rtx_def** %value1, align 8, !dbg !4590
  %366 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4591
  %367 = bitcast %struct.rtx_def* %366 to i32*, !dbg !4591
  %bf.load787 = load i32, i32* %367, align 8, !dbg !4591
  %bf.lshr788 = lshr i32 %bf.load787, 16, !dbg !4591
  %bf.clear789 = and i32 %bf.lshr788, 255, !dbg !4591
  %368 = load i32, i32* %op_mode, align 4, !dbg !4593
  %cmp790 = icmp ne i32 %bf.clear789, %368, !dbg !4594
  br i1 %cmp790, label %if.then792, label %if.end860, !dbg !4595

if.then792:                                       ; preds = %if.end779
  %369 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4596
  %370 = bitcast %struct.rtx_def* %369 to i32*, !dbg !4596
  %bf.load793 = load i32, i32* %370, align 8, !dbg !4596
  %bf.lshr794 = lshr i32 %bf.load793, 16, !dbg !4596
  %bf.clear795 = and i32 %bf.lshr794, 255, !dbg !4596
  %idxprom796 = zext i32 %bf.clear795 to i64, !dbg !4596
  %arrayidx797 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom796, !dbg !4596
  %371 = load i8, i8* %arrayidx797, align 1, !dbg !4596
  %conv798 = zext i8 %371 to i16, !dbg !4596
  %conv799 = zext i16 %conv798 to i32, !dbg !4596
  %mul800 = mul nsw i32 %conv799, 8, !dbg !4596
  %conv801 = trunc i32 %mul800 to i16, !dbg !4596
  %conv802 = zext i16 %conv801 to i64, !dbg !4596
  %372 = load i64, i64* %bitsize.addr, align 8, !dbg !4599
  %cmp803 = icmp uge i64 %conv802, %372, !dbg !4600
  br i1 %cmp803, label %if.then805, label %if.else838, !dbg !4601

if.then805:                                       ; preds = %if.then792
  %373 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4602
  %374 = bitcast %struct.rtx_def* %373 to i32*, !dbg !4602
  %bf.load806 = load i32, i32* %374, align 8, !dbg !4602
  %bf.lshr807 = lshr i32 %bf.load806, 16, !dbg !4602
  %bf.clear808 = and i32 %bf.lshr807, 255, !dbg !4602
  %idxprom809 = zext i32 %bf.clear808 to i64, !dbg !4602
  %arrayidx810 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom809, !dbg !4602
  %375 = load i8, i8* %arrayidx810, align 1, !dbg !4602
  %conv811 = zext i8 %375 to i16, !dbg !4602
  %conv812 = zext i16 %conv811 to i32, !dbg !4602
  %376 = load i32, i32* %op_mode, align 4, !dbg !4605
  %idxprom813 = zext i32 %376 to i64, !dbg !4605
  %arrayidx814 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom813, !dbg !4605
  %377 = load i8, i8* %arrayidx814, align 1, !dbg !4605
  %conv815 = zext i8 %377 to i16, !dbg !4605
  %conv816 = zext i16 %conv815 to i32, !dbg !4605
  %cmp817 = icmp slt i32 %conv812, %conv816, !dbg !4606
  br i1 %cmp817, label %if.then819, label %if.else835, !dbg !4607

if.then819:                                       ; preds = %if.then805
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !4608, metadata !DIExpression()), !dbg !4610
  %378 = load i32, i32* %op_mode, align 4, !dbg !4611
  %379 = load %struct.rtx_def*, %struct.rtx_def** %value1, align 8, !dbg !4612
  %380 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4613
  %381 = bitcast %struct.rtx_def* %380 to i32*, !dbg !4613
  %bf.load820 = load i32, i32* %381, align 8, !dbg !4613
  %bf.lshr821 = lshr i32 %bf.load820, 16, !dbg !4613
  %bf.clear822 = and i32 %bf.lshr821, 255, !dbg !4613
  %call823 = call %struct.rtx_def* @simplify_subreg(i32 %378, %struct.rtx_def* %379, i32 %bf.clear822, i32 0), !dbg !4614
  store %struct.rtx_def* %call823, %struct.rtx_def** %tmp, align 8, !dbg !4615
  %382 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4616
  %tobool824 = icmp ne %struct.rtx_def* %382, null, !dbg !4616
  br i1 %tobool824, label %if.end834, label %if.then825, !dbg !4618

if.then825:                                       ; preds = %if.then819
  %383 = load i32, i32* %op_mode, align 4, !dbg !4619
  %384 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4620
  %385 = bitcast %struct.rtx_def* %384 to i32*, !dbg !4620
  %bf.load826 = load i32, i32* %385, align 8, !dbg !4620
  %bf.lshr827 = lshr i32 %bf.load826, 16, !dbg !4620
  %bf.clear828 = and i32 %bf.lshr827, 255, !dbg !4620
  %386 = load %struct.rtx_def*, %struct.rtx_def** %value1, align 8, !dbg !4621
  %call829 = call %struct.rtx_def* @force_reg(i32 %bf.clear828, %struct.rtx_def* %386), !dbg !4622
  %387 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4623
  %388 = bitcast %struct.rtx_def* %387 to i32*, !dbg !4623
  %bf.load830 = load i32, i32* %388, align 8, !dbg !4623
  %bf.lshr831 = lshr i32 %bf.load830, 16, !dbg !4623
  %bf.clear832 = and i32 %bf.lshr831, 255, !dbg !4623
  %call833 = call %struct.rtx_def* @simplify_gen_subreg(i32 %383, %struct.rtx_def* %call829, i32 %bf.clear832, i32 0), !dbg !4624
  store %struct.rtx_def* %call833, %struct.rtx_def** %tmp, align 8, !dbg !4625
  br label %if.end834, !dbg !4626

if.end834:                                        ; preds = %if.then825, %if.then819
  %389 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4627
  store %struct.rtx_def* %389, %struct.rtx_def** %value1, align 8, !dbg !4628
  br label %if.end837, !dbg !4629

if.else835:                                       ; preds = %if.then805
  %390 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !4630
  %391 = load i32, i32* %op_mode, align 4, !dbg !4631
  %392 = load %struct.rtx_def*, %struct.rtx_def** %value1, align 8, !dbg !4632
  %call836 = call %struct.rtx_def* %390(i32 %391, %struct.rtx_def* %392), !dbg !4630
  store %struct.rtx_def* %call836, %struct.rtx_def** %value1, align 8, !dbg !4633
  br label %if.end837

if.end837:                                        ; preds = %if.else835, %if.end834
  br label %if.end859, !dbg !4634

if.else838:                                       ; preds = %if.then792
  %393 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4635
  %394 = bitcast %struct.rtx_def* %393 to i32*, !dbg !4635
  %bf.load839 = load i32, i32* %394, align 8, !dbg !4635
  %bf.clear840 = and i32 %bf.load839, 65535, !dbg !4635
  %cmp841 = icmp eq i32 %bf.clear840, 30, !dbg !4635
  br i1 %cmp841, label %if.then843, label %if.else847, !dbg !4637

if.then843:                                       ; preds = %if.else838
  %395 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4638
  %u844 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %395, i32 0, i32 1, !dbg !4638
  %hwint = bitcast %union.u* %u844 to [1 x i64]*, !dbg !4638
  %arrayidx845 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4638
  %396 = load i64, i64* %arrayidx845, align 8, !dbg !4638
  %397 = load i32, i32* %op_mode, align 4, !dbg !4639
  %call846 = call %struct.rtx_def* @gen_int_mode(i64 %396, i32 %397), !dbg !4640
  store %struct.rtx_def* %call846, %struct.rtx_def** %value1, align 8, !dbg !4641
  br label %if.end858, !dbg !4642

if.else847:                                       ; preds = %if.else838
  %398 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4643
  %399 = bitcast %struct.rtx_def* %398 to i32*, !dbg !4643
  %bf.load848 = load i32, i32* %399, align 8, !dbg !4643
  %bf.clear849 = and i32 %bf.load848, 65535, !dbg !4643
  %idxprom850 = sext i32 %bf.clear849 to i64, !dbg !4643
  %arrayidx851 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom850, !dbg !4643
  %400 = load i32, i32* %arrayidx851, align 4, !dbg !4643
  %cmp852 = icmp eq i32 %400, 9, !dbg !4643
  br i1 %cmp852, label %cond.false855, label %cond.true854, !dbg !4643

cond.true854:                                     ; preds = %if.else847
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 765, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4643
  br label %cond.end856, !dbg !4643

cond.false855:                                    ; preds = %if.else847
  br label %cond.end856, !dbg !4643

cond.end856:                                      ; preds = %cond.false855, %cond.true854
  %cond857 = phi i32 [ 0, %cond.true854 ], [ 0, %cond.false855 ], !dbg !4643
  br label %if.end858

if.end858:                                        ; preds = %cond.end856, %if.then843
  br label %if.end859

if.end859:                                        ; preds = %if.end858, %if.end837
  br label %if.end860, !dbg !4644

if.end860:                                        ; preds = %if.end859, %if.end779
  %401 = load %struct.insn_operand_data*, %struct.insn_operand_data** getelementptr inbounds ([0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 2181, i32 3), align 8, !dbg !4645
  %arrayidx861 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %401, i64 3, !dbg !4647
  %predicate862 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx861, i32 0, i32 0, !dbg !4648
  %402 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate862, align 8, !dbg !4648
  %403 = load %struct.rtx_def*, %struct.rtx_def** %value1, align 8, !dbg !4649
  %404 = load i32, i32* %op_mode, align 4, !dbg !4650
  %call863 = call i32 %402(%struct.rtx_def* %403, i32 %404), !dbg !4651
  %tobool864 = icmp ne i32 %call863, 0, !dbg !4651
  br i1 %tobool864, label %if.end867, label %if.then865, !dbg !4652

if.then865:                                       ; preds = %if.end860
  %405 = load i32, i32* %op_mode, align 4, !dbg !4653
  %406 = load %struct.rtx_def*, %struct.rtx_def** %value1, align 8, !dbg !4654
  %call866 = call %struct.rtx_def* @force_reg(i32 %405, %struct.rtx_def* %406), !dbg !4655
  store %struct.rtx_def* %call866, %struct.rtx_def** %value1, align 8, !dbg !4656
  br label %if.end867, !dbg !4657

if.end867:                                        ; preds = %if.then865, %if.end860
  %407 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4658
  %408 = load i64, i64* %bitsize.addr, align 8, !dbg !4659
  %call868 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %408), !dbg !4659
  %409 = load i32, i32* %xbitpos, align 4, !dbg !4660
  %conv869 = sext i32 %409 to i64, !dbg !4660
  %call870 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv869), !dbg !4660
  %410 = load %struct.rtx_def*, %struct.rtx_def** %value1, align 8, !dbg !4661
  %call871 = call %struct.rtx_def* @gen_insv(%struct.rtx_def* %407, %struct.rtx_def* %call868, %struct.rtx_def* %call870, %struct.rtx_def* %410), !dbg !4662
  store %struct.rtx_def* %call871, %struct.rtx_def** %pat726, align 8, !dbg !4663
  %411 = load %struct.rtx_def*, %struct.rtx_def** %pat726, align 8, !dbg !4664
  %tobool872 = icmp ne %struct.rtx_def* %411, null, !dbg !4664
  br i1 %tobool872, label %if.then873, label %if.end878, !dbg !4666

if.then873:                                       ; preds = %if.end867
  %412 = load %struct.rtx_def*, %struct.rtx_def** %pat726, align 8, !dbg !4667
  %call874 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %412), !dbg !4669
  %413 = load i8, i8* %copy_back, align 1, !dbg !4670
  %tobool875 = icmp ne i8 %413, 0, !dbg !4670
  br i1 %tobool875, label %if.then876, label %if.end877, !dbg !4672

if.then876:                                       ; preds = %if.then873
  %414 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4673
  %415 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4674
  call void @convert_move(%struct.rtx_def* %414, %struct.rtx_def* %415, i32 1), !dbg !4675
  br label %if.end877, !dbg !4675

if.end877:                                        ; preds = %if.then876, %if.then873
  store i8 1, i8* %retval, align 1, !dbg !4676
  br label %return, !dbg !4676

if.end878:                                        ; preds = %if.end867
  %416 = load %struct.rtx_def*, %struct.rtx_def** %last724, align 8, !dbg !4677
  call void @delete_insns_since(%struct.rtx_def* %416), !dbg !4678
  br label %if.end879, !dbg !4679

if.end879:                                        ; preds = %if.end878, %land.lhs.true718, %land.lhs.true712, %land.lhs.true701, %land.lhs.true681, %land.lhs.true678, %if.end672
  %417 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4680
  %418 = bitcast %struct.rtx_def* %417 to i32*, !dbg !4680
  %bf.load880 = load i32, i32* %418, align 8, !dbg !4680
  %bf.clear881 = and i32 %bf.load880, 65535, !dbg !4680
  %cmp882 = icmp eq i32 %bf.clear881, 43, !dbg !4680
  br i1 %cmp882, label %if.then884, label %if.end982, !dbg !4682

if.then884:                                       ; preds = %if.end879
  call void @llvm.dbg.declare(metadata i32* %bestmode, metadata !4683, metadata !DIExpression()), !dbg !4685
  %419 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4686
  %420 = bitcast %struct.rtx_def* %419 to i32*, !dbg !4686
  %bf.load885 = load i32, i32* %420, align 8, !dbg !4686
  %bf.lshr886 = lshr i32 %bf.load885, 16, !dbg !4686
  %bf.clear887 = and i32 %bf.lshr886, 255, !dbg !4686
  %cmp888 = icmp eq i32 %bf.clear887, 1, !dbg !4688
  br i1 %cmp888, label %if.then907, label %lor.lhs.false890, !dbg !4689

lor.lhs.false890:                                 ; preds = %if.then884
  %421 = load i32, i32* %op_mode, align 4, !dbg !4690
  %cmp891 = icmp ne i32 %421, 87, !dbg !4691
  br i1 %cmp891, label %land.lhs.true893, label %if.else935, !dbg !4692

land.lhs.true893:                                 ; preds = %lor.lhs.false890
  %422 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4693
  %423 = bitcast %struct.rtx_def* %422 to i32*, !dbg !4693
  %bf.load894 = load i32, i32* %423, align 8, !dbg !4693
  %bf.lshr895 = lshr i32 %bf.load894, 16, !dbg !4693
  %bf.clear896 = and i32 %bf.lshr895, 255, !dbg !4693
  %idxprom897 = zext i32 %bf.clear896 to i64, !dbg !4693
  %arrayidx898 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom897, !dbg !4693
  %424 = load i8, i8* %arrayidx898, align 1, !dbg !4693
  %conv899 = zext i8 %424 to i16, !dbg !4693
  %conv900 = zext i16 %conv899 to i32, !dbg !4693
  %425 = load i32, i32* %op_mode, align 4, !dbg !4694
  %idxprom901 = zext i32 %425 to i64, !dbg !4694
  %arrayidx902 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom901, !dbg !4694
  %426 = load i8, i8* %arrayidx902, align 1, !dbg !4694
  %conv903 = zext i8 %426 to i16, !dbg !4694
  %conv904 = zext i16 %conv903 to i32, !dbg !4694
  %cmp905 = icmp sgt i32 %conv900, %conv904, !dbg !4695
  br i1 %cmp905, label %if.then907, label %if.else935, !dbg !4696

if.then907:                                       ; preds = %land.lhs.true893, %if.then884
  %427 = load i64, i64* %bitsize.addr, align 8, !dbg !4697
  %conv908 = trunc i64 %427 to i32, !dbg !4697
  %428 = load i64, i64* %bitnum.addr, align 8, !dbg !4698
  %conv909 = trunc i64 %428 to i32, !dbg !4698
  %429 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4699
  %u910 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %429, i32 0, i32 1, !dbg !4699
  %fld911 = bitcast %union.u* %u910 to [1 x %union.rtunion_def]*, !dbg !4699
  %arrayidx912 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld911, i64 0, i64 1, !dbg !4699
  %rt_mem913 = bitcast %union.rtunion_def* %arrayidx912 to %struct.mem_attrs**, !dbg !4699
  %430 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem913, align 8, !dbg !4699
  %cmp914 = icmp ne %struct.mem_attrs* %430, null, !dbg !4699
  br i1 %cmp914, label %cond.true916, label %cond.false922, !dbg !4699

cond.true916:                                     ; preds = %if.then907
  %431 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4699
  %u917 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %431, i32 0, i32 1, !dbg !4699
  %fld918 = bitcast %union.u* %u917 to [1 x %union.rtunion_def]*, !dbg !4699
  %arrayidx919 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld918, i64 0, i64 1, !dbg !4699
  %rt_mem920 = bitcast %union.rtunion_def* %arrayidx919 to %struct.mem_attrs**, !dbg !4699
  %432 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem920, align 8, !dbg !4699
  %align921 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %432, i32 0, i32 4, !dbg !4699
  %433 = load i32, i32* %align921, align 4, !dbg !4699
  br label %cond.end923, !dbg !4699

cond.false922:                                    ; preds = %if.then907
  br label %cond.end923, !dbg !4699

cond.end923:                                      ; preds = %cond.false922, %cond.true916
  %cond924 = phi i32 [ %433, %cond.true916 ], [ 8, %cond.false922 ], !dbg !4699
  %434 = load i32, i32* %op_mode, align 4, !dbg !4700
  %cmp925 = icmp eq i32 %434, 87, !dbg !4701
  br i1 %cmp925, label %cond.true927, label %cond.false928, !dbg !4700

cond.true927:                                     ; preds = %cond.end923
  br label %cond.end929, !dbg !4700

cond.false928:                                    ; preds = %cond.end923
  %435 = load i32, i32* %op_mode, align 4, !dbg !4702
  br label %cond.end929, !dbg !4700

cond.end929:                                      ; preds = %cond.false928, %cond.true927
  %cond930 = phi i32 [ 0, %cond.true927 ], [ %435, %cond.false928 ], !dbg !4700
  %436 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4703
  %437 = bitcast %struct.rtx_def* %436 to i32*, !dbg !4703
  %bf.load931 = load i32, i32* %437, align 8, !dbg !4703
  %bf.lshr932 = lshr i32 %bf.load931, 27, !dbg !4703
  %bf.clear933 = and i32 %bf.lshr932, 1, !dbg !4703
  %call934 = call i32 @get_best_mode(i32 %conv908, i32 %conv909, i32 %cond924, i32 %cond930, i32 %bf.clear933), !dbg !4704
  store i32 %call934, i32* %bestmode, align 4, !dbg !4705
  br label %if.end939, !dbg !4706

if.else935:                                       ; preds = %land.lhs.true893, %lor.lhs.false890
  %438 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4707
  %439 = bitcast %struct.rtx_def* %438 to i32*, !dbg !4707
  %bf.load936 = load i32, i32* %439, align 8, !dbg !4707
  %bf.lshr937 = lshr i32 %bf.load936, 16, !dbg !4707
  %bf.clear938 = and i32 %bf.lshr937, 255, !dbg !4707
  store i32 %bf.clear938, i32* %bestmode, align 4, !dbg !4708
  br label %if.end939

if.end939:                                        ; preds = %if.else935, %cond.end929
  %440 = load i32, i32* %bestmode, align 4, !dbg !4709
  %cmp940 = icmp ne i32 %440, 0, !dbg !4711
  br i1 %cmp940, label %land.lhs.true942, label %if.end981, !dbg !4712

land.lhs.true942:                                 ; preds = %if.end939
  %441 = load i32, i32* %bestmode, align 4, !dbg !4713
  %idxprom943 = zext i32 %441 to i64, !dbg !4713
  %arrayidx944 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom943, !dbg !4713
  %442 = load i8, i8* %arrayidx944, align 1, !dbg !4713
  %conv945 = zext i8 %442 to i16, !dbg !4713
  %conv946 = zext i16 %conv945 to i32, !dbg !4713
  %443 = load i32, i32* %fieldmode.addr, align 4, !dbg !4714
  %idxprom947 = zext i32 %443 to i64, !dbg !4714
  %arrayidx948 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom947, !dbg !4714
  %444 = load i8, i8* %arrayidx948, align 1, !dbg !4714
  %conv949 = zext i8 %444 to i16, !dbg !4714
  %conv950 = zext i16 %conv949 to i32, !dbg !4714
  %cmp951 = icmp sge i32 %conv946, %conv950, !dbg !4715
  br i1 %cmp951, label %if.then953, label %if.end981, !dbg !4716

if.then953:                                       ; preds = %land.lhs.true942
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last954, metadata !4717, metadata !DIExpression()), !dbg !4719
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tempreg, metadata !4720, metadata !DIExpression()), !dbg !4721
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0955, metadata !4722, metadata !DIExpression()), !dbg !4723
  call void @llvm.dbg.declare(metadata i64* %xoffset, metadata !4724, metadata !DIExpression()), !dbg !4725
  call void @llvm.dbg.declare(metadata i64* %xbitpos956, metadata !4726, metadata !DIExpression()), !dbg !4727
  %call957 = call %struct.rtx_def* @get_last_insn(), !dbg !4728
  store %struct.rtx_def* %call957, %struct.rtx_def** %last954, align 8, !dbg !4729
  %445 = load i32, i32* %bestmode, align 4, !dbg !4730
  %idxprom958 = zext i32 %445 to i64, !dbg !4730
  %arrayidx959 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom958, !dbg !4730
  %446 = load i8, i8* %arrayidx959, align 1, !dbg !4730
  %conv960 = zext i8 %446 to i16, !dbg !4730
  %conv961 = zext i16 %conv960 to i32, !dbg !4730
  %mul962 = mul nsw i32 %conv961, 8, !dbg !4730
  %conv963 = trunc i32 %mul962 to i16, !dbg !4730
  %conv964 = zext i16 %conv963 to i32, !dbg !4730
  store i32 %conv964, i32* %unit, align 4, !dbg !4731
  %447 = load i64, i64* %bitnum.addr, align 8, !dbg !4732
  %448 = load i32, i32* %unit, align 4, !dbg !4733
  %conv965 = zext i32 %448 to i64, !dbg !4733
  %div966 = udiv i64 %447, %conv965, !dbg !4734
  %449 = load i32, i32* %bestmode, align 4, !dbg !4735
  %idxprom967 = zext i32 %449 to i64, !dbg !4735
  %arrayidx968 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom967, !dbg !4735
  %450 = load i8, i8* %arrayidx968, align 1, !dbg !4735
  %conv969 = zext i8 %450 to i16, !dbg !4735
  %conv970 = zext i16 %conv969 to i64, !dbg !4735
  %mul971 = mul i64 %div966, %conv970, !dbg !4736
  store i64 %mul971, i64* %xoffset, align 8, !dbg !4737
  %451 = load i64, i64* %bitnum.addr, align 8, !dbg !4738
  %452 = load i32, i32* %unit, align 4, !dbg !4739
  %conv972 = zext i32 %452 to i64, !dbg !4739
  %rem973 = urem i64 %451, %conv972, !dbg !4740
  store i64 %rem973, i64* %xbitpos956, align 8, !dbg !4741
  %453 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4742
  %454 = load i32, i32* %bestmode, align 4, !dbg !4742
  %455 = load i64, i64* %xoffset, align 8, !dbg !4742
  %call974 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %453, i32 %454, i64 %455, i32 1, i32 1), !dbg !4742
  store %struct.rtx_def* %call974, %struct.rtx_def** %xop0955, align 8, !dbg !4743
  %456 = load %struct.rtx_def*, %struct.rtx_def** %xop0955, align 8, !dbg !4744
  %call975 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %456), !dbg !4745
  store %struct.rtx_def* %call975, %struct.rtx_def** %tempreg, align 8, !dbg !4746
  %457 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !4747
  %458 = load i64, i64* %bitsize.addr, align 8, !dbg !4749
  %459 = load i64, i64* %xbitpos956, align 8, !dbg !4750
  %460 = load i32, i32* %fieldmode.addr, align 4, !dbg !4751
  %461 = load %struct.rtx_def*, %struct.rtx_def** %orig_value, align 8, !dbg !4752
  %call976 = call zeroext i8 @store_bit_field_1(%struct.rtx_def* %457, i64 %458, i64 %459, i32 %460, %struct.rtx_def* %461, i8 zeroext 0), !dbg !4753
  %tobool977 = icmp ne i8 %call976, 0, !dbg !4753
  br i1 %tobool977, label %if.then978, label %if.end980, !dbg !4754

if.then978:                                       ; preds = %if.then953
  %462 = load %struct.rtx_def*, %struct.rtx_def** %xop0955, align 8, !dbg !4755
  %463 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !4757
  %call979 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %462, %struct.rtx_def* %463), !dbg !4758
  store i8 1, i8* %retval, align 1, !dbg !4759
  br label %return, !dbg !4759

if.end980:                                        ; preds = %if.then953
  %464 = load %struct.rtx_def*, %struct.rtx_def** %last954, align 8, !dbg !4760
  call void @delete_insns_since(%struct.rtx_def* %464), !dbg !4761
  br label %if.end981, !dbg !4762

if.end981:                                        ; preds = %if.end980, %land.lhs.true942, %if.end939
  br label %if.end982, !dbg !4763

if.end982:                                        ; preds = %if.end981, %if.end879
  %465 = load i8, i8* %fallback_p.addr, align 1, !dbg !4764
  %tobool983 = icmp ne i8 %465, 0, !dbg !4764
  br i1 %tobool983, label %if.end985, label %if.then984, !dbg !4766

if.then984:                                       ; preds = %if.end982
  store i8 0, i8* %retval, align 1, !dbg !4767
  br label %return, !dbg !4767

if.end985:                                        ; preds = %if.end982
  %466 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4768
  %467 = load i64, i64* %offset, align 8, !dbg !4769
  %468 = load i64, i64* %bitsize.addr, align 8, !dbg !4770
  %469 = load i64, i64* %bitpos, align 8, !dbg !4771
  %470 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !4772
  call void @store_fixed_bit_field(%struct.rtx_def* %466, i64 %467, i64 %468, i64 %469, %struct.rtx_def* %470), !dbg !4773
  store i8 1, i8* %retval, align 1, !dbg !4774
  br label %return, !dbg !4774

return:                                           ; preds = %if.end985, %if.then984, %if.then978, %if.end877, %for.end, %if.then572, %if.then506, %if.end349, %if.then240, %if.then48
  %471 = load i8, i8* %retval, align 1, !dbg !4775
  ret i8 %471, !dbg !4775
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %str_rtx, i64 %bitsize, i64 %bitnum, i32 %unsignedp, %struct.rtx_def* %target, i32 %mode, i32 %tmode) #0 !dbg !4776 {
entry:
  %str_rtx.addr = alloca %struct.rtx_def*, align 8
  %bitsize.addr = alloca i64, align 8
  %bitnum.addr = alloca i64, align 8
  %unsignedp.addr = alloca i32, align 4
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %tmode.addr = alloca i32, align 4
  store %struct.rtx_def* %str_rtx, %struct.rtx_def** %str_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %str_rtx.addr, metadata !4779, metadata !DIExpression()), !dbg !4780
  store i64 %bitsize, i64* %bitsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitsize.addr, metadata !4781, metadata !DIExpression()), !dbg !4782
  store i64 %bitnum, i64* %bitnum.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitnum.addr, metadata !4783, metadata !DIExpression()), !dbg !4784
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !4785, metadata !DIExpression()), !dbg !4786
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !4787, metadata !DIExpression()), !dbg !4788
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4789, metadata !DIExpression()), !dbg !4790
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !4791, metadata !DIExpression()), !dbg !4792
  %0 = load %struct.rtx_def*, %struct.rtx_def** %str_rtx.addr, align 8, !dbg !4793
  %1 = load i64, i64* %bitsize.addr, align 8, !dbg !4794
  %2 = load i64, i64* %bitnum.addr, align 8, !dbg !4795
  %3 = load i32, i32* %unsignedp.addr, align 4, !dbg !4796
  %4 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4797
  %5 = load i32, i32* %mode.addr, align 4, !dbg !4798
  %6 = load i32, i32* %tmode.addr, align 4, !dbg !4799
  %call = call %struct.rtx_def* @extract_bit_field_1(%struct.rtx_def* %0, i64 %1, i64 %2, i32 %3, %struct.rtx_def* %4, i32 %5, i32 %6, i8 zeroext 1), !dbg !4800
  ret %struct.rtx_def* %call, !dbg !4801
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @extract_bit_field_1(%struct.rtx_def* %str_rtx, i64 %bitsize, i64 %bitnum, i32 %unsignedp, %struct.rtx_def* %target, i32 %mode, i32 %tmode, i8 zeroext %fallback_p) #0 !dbg !4802 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %str_rtx.addr = alloca %struct.rtx_def*, align 8
  %bitsize.addr = alloca i64, align 8
  %bitnum.addr = alloca i64, align 8
  %unsignedp.addr = alloca i32, align 4
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %tmode.addr = alloca i32, align 4
  %fallback_p.addr = alloca i8, align 1
  %unit = alloca i32, align 4
  %offset = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %int_mode = alloca i32, align 4
  %ext_mode = alloca i32, align 4
  %mode1 = alloca i32, align 4
  %icode = alloca i32, align 4
  %byte_offset = alloca i32, align 4
  %new_mode = alloca i32, align 4
  %nunits = alloca i32, align 4
  %outermode = alloca i32, align 4
  %innermode = alloca i32, align 4
  %icode303 = alloca i32, align 4
  %pos = alloca i64, align 8
  %rtxpos = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %mode0 = alloca i32, align 4
  %mode1321 = alloca i32, align 4
  %mode2 = alloca i32, align 4
  %imode = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %subreg = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  %sub591 = alloca %struct.rtx_def*, align 8
  %nwords = alloca i32, align 4
  %i = alloca i32, align 4
  %wordnum = alloca i32, align 4
  %bit_offset = alloca i32, align 4
  %target_part = alloca %struct.rtx_def*, align 8
  %result_part = alloca %struct.rtx_def*, align 8
  %i671 = alloca i32, align 4
  %total_words = alloca i32, align 4
  %xbitpos = alloca i64, align 8
  %xoffset = alloca i64, align 8
  %bitsize_rtx = alloca %struct.rtx_def*, align 8
  %bitpos_rtx = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %xop0 = alloca %struct.rtx_def*, align 8
  %xtarget = alloca %struct.rtx_def*, align 8
  %xspec_target = alloca %struct.rtx_def*, align 8
  %xspec_target_subreg = alloca %struct.rtx_def*, align 8
  %pat816 = alloca %struct.rtx_def*, align 8
  %bestmode = alloca i32, align 4
  %xoffset978 = alloca i64, align 8
  %xbitpos979 = alloca i64, align 8
  %last1004 = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  %xop01005 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %str_rtx, %struct.rtx_def** %str_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %str_rtx.addr, metadata !4805, metadata !DIExpression()), !dbg !4806
  store i64 %bitsize, i64* %bitsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitsize.addr, metadata !4807, metadata !DIExpression()), !dbg !4808
  store i64 %bitnum, i64* %bitnum.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitnum.addr, metadata !4809, metadata !DIExpression()), !dbg !4810
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !4811, metadata !DIExpression()), !dbg !4812
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !4813, metadata !DIExpression()), !dbg !4814
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4815, metadata !DIExpression()), !dbg !4816
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !4817, metadata !DIExpression()), !dbg !4818
  store i8 %fallback_p, i8* %fallback_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fallback_p.addr, metadata !4819, metadata !DIExpression()), !dbg !4820
  call void @llvm.dbg.declare(metadata i32* %unit, metadata !4821, metadata !DIExpression()), !dbg !4822
  %0 = load %struct.rtx_def*, %struct.rtx_def** %str_rtx.addr, align 8, !dbg !4823
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4823
  %bf.load = load i32, i32* %1, align 8, !dbg !4823
  %bf.clear = and i32 %bf.load, 65535, !dbg !4823
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !4823
  %2 = zext i1 %cmp to i64, !dbg !4824
  %cond = select i1 %cmp, i32 8, i32 32, !dbg !4824
  store i32 %cond, i32* %unit, align 4, !dbg !4822
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !4825, metadata !DIExpression()), !dbg !4826
  call void @llvm.dbg.declare(metadata i64* %bitpos, metadata !4827, metadata !DIExpression()), !dbg !4828
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0, metadata !4829, metadata !DIExpression()), !dbg !4830
  %3 = load %struct.rtx_def*, %struct.rtx_def** %str_rtx.addr, align 8, !dbg !4831
  store %struct.rtx_def* %3, %struct.rtx_def** %op0, align 8, !dbg !4830
  call void @llvm.dbg.declare(metadata i32* %int_mode, metadata !4832, metadata !DIExpression()), !dbg !4833
  call void @llvm.dbg.declare(metadata i32* %ext_mode, metadata !4834, metadata !DIExpression()), !dbg !4835
  call void @llvm.dbg.declare(metadata i32* %mode1, metadata !4836, metadata !DIExpression()), !dbg !4837
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !4838, metadata !DIExpression()), !dbg !4839
  call void @llvm.dbg.declare(metadata i32* %byte_offset, metadata !4840, metadata !DIExpression()), !dbg !4841
  %4 = load i32, i32* %tmode.addr, align 4, !dbg !4842
  %cmp1 = icmp eq i32 %4, 0, !dbg !4844
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4845

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %mode.addr, align 4, !dbg !4846
  store i32 %5, i32* %tmode.addr, align 4, !dbg !4847
  br label %if.end, !dbg !4848

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !4849

while.cond:                                       ; preds = %while.body, %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4850
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4850
  %bf.load2 = load i32, i32* %7, align 8, !dbg !4850
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !4850
  %cmp4 = icmp eq i32 %bf.clear3, 39, !dbg !4851
  br i1 %cmp4, label %while.body, label %while.end, !dbg !4849

while.body:                                       ; preds = %while.cond
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4852
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4852
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4852
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !4852
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4852
  %9 = load i32, i32* %rt_uint, align 8, !dbg !4852
  %mul = mul i32 %9, 8, !dbg !4854
  %conv = zext i32 %mul to i64, !dbg !4852
  %10 = load i64, i64* %bitnum.addr, align 8, !dbg !4855
  %add = add i64 %10, %conv, !dbg !4855
  store i64 %add, i64* %bitnum.addr, align 8, !dbg !4855
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4856
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4856
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !4856
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 0, !dbg !4856
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !4856
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4856
  store %struct.rtx_def* %12, %struct.rtx_def** %op0, align 8, !dbg !4857
  br label %while.cond, !dbg !4849, !llvm.loop !4858

while.end:                                        ; preds = %while.cond
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4860
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !4860
  %bf.load8 = load i32, i32* %14, align 8, !dbg !4860
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !4860
  %cmp10 = icmp eq i32 %bf.clear9, 37, !dbg !4860
  br i1 %cmp10, label %land.lhs.true, label %if.end23, !dbg !4862

land.lhs.true:                                    ; preds = %while.end
  %15 = load i64, i64* %bitnum.addr, align 8, !dbg !4863
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4864
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !4864
  %bf.load12 = load i32, i32* %17, align 8, !dbg !4864
  %bf.lshr = lshr i32 %bf.load12, 16, !dbg !4864
  %bf.clear13 = and i32 %bf.lshr, 255, !dbg !4864
  %idxprom = zext i32 %bf.clear13 to i64, !dbg !4864
  %arrayidx14 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !4864
  %18 = load i8, i8* %arrayidx14, align 1, !dbg !4864
  %conv15 = zext i8 %18 to i16, !dbg !4864
  %conv16 = zext i16 %conv15 to i32, !dbg !4864
  %mul17 = mul nsw i32 %conv16, 8, !dbg !4864
  %conv18 = trunc i32 %mul17 to i16, !dbg !4864
  %conv19 = zext i16 %conv18 to i64, !dbg !4864
  %cmp20 = icmp uge i64 %15, %conv19, !dbg !4865
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !4866

if.then22:                                        ; preds = %land.lhs.true
  %19 = load i32, i32* %tmode.addr, align 4, !dbg !4867
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %19), !dbg !4868
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !4869
  br label %return, !dbg !4869

if.end23:                                         ; preds = %land.lhs.true, %while.end
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4870
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !4870
  %bf.load24 = load i32, i32* %21, align 8, !dbg !4870
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !4870
  %cmp26 = icmp eq i32 %bf.clear25, 37, !dbg !4870
  br i1 %cmp26, label %land.lhs.true28, label %if.end51, !dbg !4872

land.lhs.true28:                                  ; preds = %if.end23
  %22 = load i32, i32* %mode.addr, align 4, !dbg !4873
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4874
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !4874
  %bf.load29 = load i32, i32* %24, align 8, !dbg !4874
  %bf.lshr30 = lshr i32 %bf.load29, 16, !dbg !4874
  %bf.clear31 = and i32 %bf.lshr30, 255, !dbg !4874
  %cmp32 = icmp eq i32 %22, %bf.clear31, !dbg !4875
  br i1 %cmp32, label %land.lhs.true34, label %if.end51, !dbg !4876

land.lhs.true34:                                  ; preds = %land.lhs.true28
  %25 = load i64, i64* %bitnum.addr, align 8, !dbg !4877
  %cmp35 = icmp eq i64 %25, 0, !dbg !4878
  br i1 %cmp35, label %land.lhs.true37, label %if.end51, !dbg !4879

land.lhs.true37:                                  ; preds = %land.lhs.true34
  %26 = load i64, i64* %bitsize.addr, align 8, !dbg !4880
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4881
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !4881
  %bf.load38 = load i32, i32* %28, align 8, !dbg !4881
  %bf.lshr39 = lshr i32 %bf.load38, 16, !dbg !4881
  %bf.clear40 = and i32 %bf.lshr39, 255, !dbg !4881
  %idxprom41 = zext i32 %bf.clear40 to i64, !dbg !4881
  %arrayidx42 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom41, !dbg !4881
  %29 = load i8, i8* %arrayidx42, align 1, !dbg !4881
  %conv43 = zext i8 %29 to i16, !dbg !4881
  %conv44 = zext i16 %conv43 to i32, !dbg !4881
  %mul45 = mul nsw i32 %conv44, 8, !dbg !4881
  %conv46 = trunc i32 %mul45 to i16, !dbg !4881
  %conv47 = zext i16 %conv46 to i64, !dbg !4881
  %cmp48 = icmp eq i64 %26, %conv47, !dbg !4882
  br i1 %cmp48, label %if.then50, label %if.end51, !dbg !4883

if.then50:                                        ; preds = %land.lhs.true37
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4884
  store %struct.rtx_def* %30, %struct.rtx_def** %retval, align 8, !dbg !4886
  br label %return, !dbg !4886

if.end51:                                         ; preds = %land.lhs.true37, %land.lhs.true34, %land.lhs.true28, %if.end23
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4887
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !4887
  %bf.load52 = load i32, i32* %32, align 8, !dbg !4887
  %bf.lshr53 = lshr i32 %bf.load52, 16, !dbg !4887
  %bf.clear54 = and i32 %bf.lshr53, 255, !dbg !4887
  %idxprom55 = zext i32 %bf.clear54 to i64, !dbg !4887
  %arrayidx56 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom55, !dbg !4887
  %33 = load i8, i8* %arrayidx56, align 1, !dbg !4887
  %conv57 = zext i8 %33 to i32, !dbg !4887
  %cmp58 = icmp eq i32 %conv57, 12, !dbg !4887
  br i1 %cmp58, label %land.lhs.true104, label %lor.lhs.false, !dbg !4887

lor.lhs.false:                                    ; preds = %if.end51
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4887
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !4887
  %bf.load60 = load i32, i32* %35, align 8, !dbg !4887
  %bf.lshr61 = lshr i32 %bf.load60, 16, !dbg !4887
  %bf.clear62 = and i32 %bf.lshr61, 255, !dbg !4887
  %idxprom63 = zext i32 %bf.clear62 to i64, !dbg !4887
  %arrayidx64 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom63, !dbg !4887
  %36 = load i8, i8* %arrayidx64, align 1, !dbg !4887
  %conv65 = zext i8 %36 to i32, !dbg !4887
  %cmp66 = icmp eq i32 %conv65, 17, !dbg !4887
  br i1 %cmp66, label %land.lhs.true104, label %lor.lhs.false68, !dbg !4887

lor.lhs.false68:                                  ; preds = %lor.lhs.false
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4887
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !4887
  %bf.load69 = load i32, i32* %38, align 8, !dbg !4887
  %bf.lshr70 = lshr i32 %bf.load69, 16, !dbg !4887
  %bf.clear71 = and i32 %bf.lshr70, 255, !dbg !4887
  %idxprom72 = zext i32 %bf.clear71 to i64, !dbg !4887
  %arrayidx73 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom72, !dbg !4887
  %39 = load i8, i8* %arrayidx73, align 1, !dbg !4887
  %conv74 = zext i8 %39 to i32, !dbg !4887
  %cmp75 = icmp eq i32 %conv74, 13, !dbg !4887
  br i1 %cmp75, label %land.lhs.true104, label %lor.lhs.false77, !dbg !4887

lor.lhs.false77:                                  ; preds = %lor.lhs.false68
  %40 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4887
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !4887
  %bf.load78 = load i32, i32* %41, align 8, !dbg !4887
  %bf.lshr79 = lshr i32 %bf.load78, 16, !dbg !4887
  %bf.clear80 = and i32 %bf.lshr79, 255, !dbg !4887
  %idxprom81 = zext i32 %bf.clear80 to i64, !dbg !4887
  %arrayidx82 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom81, !dbg !4887
  %42 = load i8, i8* %arrayidx82, align 1, !dbg !4887
  %conv83 = zext i8 %42 to i32, !dbg !4887
  %cmp84 = icmp eq i32 %conv83, 14, !dbg !4887
  br i1 %cmp84, label %land.lhs.true104, label %lor.lhs.false86, !dbg !4887

lor.lhs.false86:                                  ; preds = %lor.lhs.false77
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4887
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !4887
  %bf.load87 = load i32, i32* %44, align 8, !dbg !4887
  %bf.lshr88 = lshr i32 %bf.load87, 16, !dbg !4887
  %bf.clear89 = and i32 %bf.lshr88, 255, !dbg !4887
  %idxprom90 = zext i32 %bf.clear89 to i64, !dbg !4887
  %arrayidx91 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom90, !dbg !4887
  %45 = load i8, i8* %arrayidx91, align 1, !dbg !4887
  %conv92 = zext i8 %45 to i32, !dbg !4887
  %cmp93 = icmp eq i32 %conv92, 15, !dbg !4887
  br i1 %cmp93, label %land.lhs.true104, label %lor.lhs.false95, !dbg !4887

lor.lhs.false95:                                  ; preds = %lor.lhs.false86
  %46 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4887
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !4887
  %bf.load96 = load i32, i32* %47, align 8, !dbg !4887
  %bf.lshr97 = lshr i32 %bf.load96, 16, !dbg !4887
  %bf.clear98 = and i32 %bf.lshr97, 255, !dbg !4887
  %idxprom99 = zext i32 %bf.clear98 to i64, !dbg !4887
  %arrayidx100 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom99, !dbg !4887
  %48 = load i8, i8* %arrayidx100, align 1, !dbg !4887
  %conv101 = zext i8 %48 to i32, !dbg !4887
  %cmp102 = icmp eq i32 %conv101, 16, !dbg !4887
  br i1 %cmp102, label %land.lhs.true104, label %if.end198, !dbg !4889

land.lhs.true104:                                 ; preds = %lor.lhs.false95, %lor.lhs.false86, %lor.lhs.false77, %lor.lhs.false68, %lor.lhs.false, %if.end51
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4890
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !4890
  %bf.load105 = load i32, i32* %50, align 8, !dbg !4890
  %bf.clear106 = and i32 %bf.load105, 65535, !dbg !4890
  %cmp107 = icmp eq i32 %bf.clear106, 43, !dbg !4890
  br i1 %cmp107, label %if.end198, label %land.lhs.true109, !dbg !4891

land.lhs.true109:                                 ; preds = %land.lhs.true104
  %51 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4892
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !4892
  %bf.load110 = load i32, i32* %52, align 8, !dbg !4892
  %bf.lshr111 = lshr i32 %bf.load110, 16, !dbg !4892
  %bf.clear112 = and i32 %bf.lshr111, 255, !dbg !4892
  %idxprom113 = zext i32 %bf.clear112 to i64, !dbg !4892
  %arrayidx114 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom113, !dbg !4892
  %53 = load i8, i8* %arrayidx114, align 1, !dbg !4892
  %conv115 = zext i8 %53 to i32, !dbg !4892
  %54 = load i32, i32* %tmode.addr, align 4, !dbg !4893
  %cmp116 = icmp ne i32 %conv115, %54, !dbg !4894
  br i1 %cmp116, label %if.then118, label %if.end198, !dbg !4895

if.then118:                                       ; preds = %land.lhs.true109
  call void @llvm.dbg.declare(metadata i32* %new_mode, metadata !4896, metadata !DIExpression()), !dbg !4898
  call void @llvm.dbg.declare(metadata i32* %nunits, metadata !4899, metadata !DIExpression()), !dbg !4900
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4901
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !4901
  %bf.load119 = load i32, i32* %56, align 8, !dbg !4901
  %bf.lshr120 = lshr i32 %bf.load119, 16, !dbg !4901
  %bf.clear121 = and i32 %bf.lshr120, 255, !dbg !4901
  %idxprom122 = zext i32 %bf.clear121 to i64, !dbg !4901
  %arrayidx123 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_nunits, i64 0, i64 %idxprom122, !dbg !4901
  %57 = load i8, i8* %arrayidx123, align 1, !dbg !4901
  %conv124 = zext i8 %57 to i32, !dbg !4901
  store i32 %conv124, i32* %nunits, align 4, !dbg !4900
  %58 = load i32, i32* %tmode.addr, align 4, !dbg !4902
  %idxprom125 = zext i32 %58 to i64, !dbg !4902
  %arrayidx126 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom125, !dbg !4902
  %59 = load i8, i8* %arrayidx126, align 1, !dbg !4902
  %conv127 = zext i8 %59 to i32, !dbg !4902
  %cmp128 = icmp eq i32 %conv127, 8, !dbg !4904
  br i1 %cmp128, label %if.then130, label %if.else, !dbg !4905

if.then130:                                       ; preds = %if.then118
  store i32 78, i32* %new_mode, align 4, !dbg !4906
  br label %if.end163, !dbg !4907

if.else:                                          ; preds = %if.then118
  %60 = load i32, i32* %tmode.addr, align 4, !dbg !4908
  %idxprom131 = zext i32 %60 to i64, !dbg !4908
  %arrayidx132 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom131, !dbg !4908
  %61 = load i8, i8* %arrayidx132, align 1, !dbg !4908
  %conv133 = zext i8 %61 to i32, !dbg !4908
  %cmp134 = icmp eq i32 %conv133, 4, !dbg !4910
  br i1 %cmp134, label %if.then136, label %if.else137, !dbg !4911

if.then136:                                       ; preds = %if.else
  store i32 0, i32* %new_mode, align 4, !dbg !4912
  br label %if.end162, !dbg !4913

if.else137:                                       ; preds = %if.else
  %62 = load i32, i32* %tmode.addr, align 4, !dbg !4914
  %idxprom138 = zext i32 %62 to i64, !dbg !4914
  %arrayidx139 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom138, !dbg !4914
  %63 = load i8, i8* %arrayidx139, align 1, !dbg !4914
  %conv140 = zext i8 %63 to i32, !dbg !4914
  %cmp141 = icmp eq i32 %conv140, 5, !dbg !4916
  br i1 %cmp141, label %if.then143, label %if.else144, !dbg !4917

if.then143:                                       ; preds = %if.else137
  store i32 0, i32* %new_mode, align 4, !dbg !4918
  br label %if.end161, !dbg !4919

if.else144:                                       ; preds = %if.else137
  %64 = load i32, i32* %tmode.addr, align 4, !dbg !4920
  %idxprom145 = zext i32 %64 to i64, !dbg !4920
  %arrayidx146 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom145, !dbg !4920
  %65 = load i8, i8* %arrayidx146, align 1, !dbg !4920
  %conv147 = zext i8 %65 to i32, !dbg !4920
  %cmp148 = icmp eq i32 %conv147, 6, !dbg !4922
  br i1 %cmp148, label %if.then150, label %if.else151, !dbg !4923

if.then150:                                       ; preds = %if.else144
  store i32 0, i32* %new_mode, align 4, !dbg !4924
  br label %if.end160, !dbg !4925

if.else151:                                       ; preds = %if.else144
  %66 = load i32, i32* %tmode.addr, align 4, !dbg !4926
  %idxprom152 = zext i32 %66 to i64, !dbg !4926
  %arrayidx153 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom152, !dbg !4926
  %67 = load i8, i8* %arrayidx153, align 1, !dbg !4926
  %conv154 = zext i8 %67 to i32, !dbg !4926
  %cmp155 = icmp eq i32 %conv154, 7, !dbg !4928
  br i1 %cmp155, label %if.then157, label %if.else158, !dbg !4929

if.then157:                                       ; preds = %if.else151
  store i32 0, i32* %new_mode, align 4, !dbg !4930
  br label %if.end159, !dbg !4931

if.else158:                                       ; preds = %if.else151
  store i32 55, i32* %new_mode, align 4, !dbg !4932
  br label %if.end159

if.end159:                                        ; preds = %if.else158, %if.then157
  br label %if.end160

if.end160:                                        ; preds = %if.end159, %if.then150
  br label %if.end161

if.end161:                                        ; preds = %if.end160, %if.then143
  br label %if.end162

if.end162:                                        ; preds = %if.end161, %if.then136
  br label %if.end163

if.end163:                                        ; preds = %if.end162, %if.then130
  br label %for.cond, !dbg !4933

for.cond:                                         ; preds = %for.inc, %if.end163
  %68 = load i32, i32* %new_mode, align 4, !dbg !4934
  %cmp164 = icmp ne i32 %68, 0, !dbg !4937
  br i1 %cmp164, label %for.body, label %for.end, !dbg !4938

for.body:                                         ; preds = %for.cond
  %69 = load i32, i32* %new_mode, align 4, !dbg !4939
  %idxprom166 = zext i32 %69 to i64, !dbg !4939
  %arrayidx167 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_nunits, i64 0, i64 %idxprom166, !dbg !4939
  %70 = load i8, i8* %arrayidx167, align 1, !dbg !4939
  %conv168 = zext i8 %70 to i32, !dbg !4939
  %71 = load i32, i32* %nunits, align 4, !dbg !4941
  %cmp169 = icmp eq i32 %conv168, %71, !dbg !4942
  br i1 %cmp169, label %land.lhs.true171, label %if.end189, !dbg !4943

land.lhs.true171:                                 ; preds = %for.body
  %72 = load i32, i32* %new_mode, align 4, !dbg !4944
  %idxprom172 = zext i32 %72 to i64, !dbg !4944
  %arrayidx173 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom172, !dbg !4944
  %73 = load i8, i8* %arrayidx173, align 1, !dbg !4944
  %conv174 = zext i8 %73 to i16, !dbg !4944
  %conv175 = zext i16 %conv174 to i32, !dbg !4944
  %74 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4945
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !4945
  %bf.load176 = load i32, i32* %75, align 8, !dbg !4945
  %bf.lshr177 = lshr i32 %bf.load176, 16, !dbg !4945
  %bf.clear178 = and i32 %bf.lshr177, 255, !dbg !4945
  %idxprom179 = zext i32 %bf.clear178 to i64, !dbg !4945
  %arrayidx180 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom179, !dbg !4945
  %76 = load i8, i8* %arrayidx180, align 1, !dbg !4945
  %conv181 = zext i8 %76 to i16, !dbg !4945
  %conv182 = zext i16 %conv181 to i32, !dbg !4945
  %cmp183 = icmp eq i32 %conv175, %conv182, !dbg !4946
  br i1 %cmp183, label %land.lhs.true185, label %if.end189, !dbg !4947

land.lhs.true185:                                 ; preds = %land.lhs.true171
  %77 = load i8 (i32)*, i8 (i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 59), align 8, !dbg !4948
  %78 = load i32, i32* %new_mode, align 4, !dbg !4949
  %call186 = call zeroext i8 %77(i32 %78), !dbg !4950
  %conv187 = zext i8 %call186 to i32, !dbg !4950
  %tobool = icmp ne i32 %conv187, 0, !dbg !4950
  br i1 %tobool, label %if.then188, label %if.end189, !dbg !4951

if.then188:                                       ; preds = %land.lhs.true185
  br label %for.end, !dbg !4952

if.end189:                                        ; preds = %land.lhs.true185, %land.lhs.true171, %for.body
  br label %for.inc, !dbg !4953

for.inc:                                          ; preds = %if.end189
  %79 = load i32, i32* %new_mode, align 4, !dbg !4954
  %idxprom190 = zext i32 %79 to i64, !dbg !4954
  %arrayidx191 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom190, !dbg !4954
  %80 = load i8, i8* %arrayidx191, align 1, !dbg !4954
  %conv192 = zext i8 %80 to i32, !dbg !4954
  store i32 %conv192, i32* %new_mode, align 4, !dbg !4955
  br label %for.cond, !dbg !4956, !llvm.loop !4957

for.end:                                          ; preds = %if.then188, %for.cond
  %81 = load i32, i32* %new_mode, align 4, !dbg !4959
  %cmp193 = icmp ne i32 %81, 0, !dbg !4961
  br i1 %cmp193, label %if.then195, label %if.end197, !dbg !4962

if.then195:                                       ; preds = %for.end
  %82 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !4963
  %83 = load i32, i32* %new_mode, align 4, !dbg !4964
  %84 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4965
  %call196 = call %struct.rtx_def* %82(i32 %83, %struct.rtx_def* %84), !dbg !4963
  store %struct.rtx_def* %call196, %struct.rtx_def** %op0, align 8, !dbg !4966
  br label %if.end197, !dbg !4967

if.end197:                                        ; preds = %if.then195, %for.end
  br label %if.end198, !dbg !4968

if.end198:                                        ; preds = %if.end197, %land.lhs.true109, %land.lhs.true104, %lor.lhs.false95
  %85 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4969
  %86 = bitcast %struct.rtx_def* %85 to i32*, !dbg !4969
  %bf.load199 = load i32, i32* %86, align 8, !dbg !4969
  %bf.lshr200 = lshr i32 %bf.load199, 16, !dbg !4969
  %bf.clear201 = and i32 %bf.lshr200, 255, !dbg !4969
  %idxprom202 = zext i32 %bf.clear201 to i64, !dbg !4969
  %arrayidx203 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom202, !dbg !4969
  %87 = load i8, i8* %arrayidx203, align 1, !dbg !4969
  %conv204 = zext i8 %87 to i32, !dbg !4969
  %cmp205 = icmp eq i32 %conv204, 12, !dbg !4969
  br i1 %cmp205, label %land.lhs.true252, label %lor.lhs.false207, !dbg !4969

lor.lhs.false207:                                 ; preds = %if.end198
  %88 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4969
  %89 = bitcast %struct.rtx_def* %88 to i32*, !dbg !4969
  %bf.load208 = load i32, i32* %89, align 8, !dbg !4969
  %bf.lshr209 = lshr i32 %bf.load208, 16, !dbg !4969
  %bf.clear210 = and i32 %bf.lshr209, 255, !dbg !4969
  %idxprom211 = zext i32 %bf.clear210 to i64, !dbg !4969
  %arrayidx212 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom211, !dbg !4969
  %90 = load i8, i8* %arrayidx212, align 1, !dbg !4969
  %conv213 = zext i8 %90 to i32, !dbg !4969
  %cmp214 = icmp eq i32 %conv213, 17, !dbg !4969
  br i1 %cmp214, label %land.lhs.true252, label %lor.lhs.false216, !dbg !4969

lor.lhs.false216:                                 ; preds = %lor.lhs.false207
  %91 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4969
  %92 = bitcast %struct.rtx_def* %91 to i32*, !dbg !4969
  %bf.load217 = load i32, i32* %92, align 8, !dbg !4969
  %bf.lshr218 = lshr i32 %bf.load217, 16, !dbg !4969
  %bf.clear219 = and i32 %bf.lshr218, 255, !dbg !4969
  %idxprom220 = zext i32 %bf.clear219 to i64, !dbg !4969
  %arrayidx221 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom220, !dbg !4969
  %93 = load i8, i8* %arrayidx221, align 1, !dbg !4969
  %conv222 = zext i8 %93 to i32, !dbg !4969
  %cmp223 = icmp eq i32 %conv222, 13, !dbg !4969
  br i1 %cmp223, label %land.lhs.true252, label %lor.lhs.false225, !dbg !4969

lor.lhs.false225:                                 ; preds = %lor.lhs.false216
  %94 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4969
  %95 = bitcast %struct.rtx_def* %94 to i32*, !dbg !4969
  %bf.load226 = load i32, i32* %95, align 8, !dbg !4969
  %bf.lshr227 = lshr i32 %bf.load226, 16, !dbg !4969
  %bf.clear228 = and i32 %bf.lshr227, 255, !dbg !4969
  %idxprom229 = zext i32 %bf.clear228 to i64, !dbg !4969
  %arrayidx230 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom229, !dbg !4969
  %96 = load i8, i8* %arrayidx230, align 1, !dbg !4969
  %conv231 = zext i8 %96 to i32, !dbg !4969
  %cmp232 = icmp eq i32 %conv231, 14, !dbg !4969
  br i1 %cmp232, label %land.lhs.true252, label %lor.lhs.false234, !dbg !4969

lor.lhs.false234:                                 ; preds = %lor.lhs.false225
  %97 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4969
  %98 = bitcast %struct.rtx_def* %97 to i32*, !dbg !4969
  %bf.load235 = load i32, i32* %98, align 8, !dbg !4969
  %bf.lshr236 = lshr i32 %bf.load235, 16, !dbg !4969
  %bf.clear237 = and i32 %bf.lshr236, 255, !dbg !4969
  %idxprom238 = zext i32 %bf.clear237 to i64, !dbg !4969
  %arrayidx239 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom238, !dbg !4969
  %99 = load i8, i8* %arrayidx239, align 1, !dbg !4969
  %conv240 = zext i8 %99 to i32, !dbg !4969
  %cmp241 = icmp eq i32 %conv240, 15, !dbg !4969
  br i1 %cmp241, label %land.lhs.true252, label %lor.lhs.false243, !dbg !4969

lor.lhs.false243:                                 ; preds = %lor.lhs.false234
  %100 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4969
  %101 = bitcast %struct.rtx_def* %100 to i32*, !dbg !4969
  %bf.load244 = load i32, i32* %101, align 8, !dbg !4969
  %bf.lshr245 = lshr i32 %bf.load244, 16, !dbg !4969
  %bf.clear246 = and i32 %bf.lshr245, 255, !dbg !4969
  %idxprom247 = zext i32 %bf.clear246 to i64, !dbg !4969
  %arrayidx248 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom247, !dbg !4969
  %102 = load i8, i8* %arrayidx248, align 1, !dbg !4969
  %conv249 = zext i8 %102 to i32, !dbg !4969
  %cmp250 = icmp eq i32 %conv249, 16, !dbg !4969
  br i1 %cmp250, label %land.lhs.true252, label %if.end414, !dbg !4971

land.lhs.true252:                                 ; preds = %lor.lhs.false243, %lor.lhs.false234, %lor.lhs.false225, %lor.lhs.false216, %lor.lhs.false207, %if.end198
  %103 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4972
  %104 = bitcast %struct.rtx_def* %103 to i32*, !dbg !4972
  %bf.load253 = load i32, i32* %104, align 8, !dbg !4972
  %bf.clear254 = and i32 %bf.load253, 65535, !dbg !4972
  %cmp255 = icmp eq i32 %bf.clear254, 43, !dbg !4972
  br i1 %cmp255, label %if.end414, label %land.lhs.true257, !dbg !4973

land.lhs.true257:                                 ; preds = %land.lhs.true252
  %105 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4974
  %106 = bitcast %struct.rtx_def* %105 to i32*, !dbg !4974
  %bf.load258 = load i32, i32* %106, align 8, !dbg !4974
  %bf.lshr259 = lshr i32 %bf.load258, 16, !dbg !4974
  %bf.clear260 = and i32 %bf.lshr259, 255, !dbg !4974
  %idxprom261 = sext i32 %bf.clear260 to i64, !dbg !4974
  %arrayidx262 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 132, i32 4), i64 0, i64 %idxprom261, !dbg !4974
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx262, i32 0, i32 0, !dbg !4975
  %107 = load i32, i32* %insn_code, align 4, !dbg !4975
  %cmp263 = icmp ne i32 %107, 2956, !dbg !4976
  br i1 %cmp263, label %land.lhs.true265, label %if.end414, !dbg !4977

land.lhs.true265:                                 ; preds = %land.lhs.true257
  %108 = load i64, i64* %bitnum.addr, align 8, !dbg !4978
  %109 = load i64, i64* %bitsize.addr, align 8, !dbg !4979
  %add266 = add i64 %108, %109, !dbg !4980
  %sub = sub i64 %add266, 1, !dbg !4981
  %110 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4982
  %111 = bitcast %struct.rtx_def* %110 to i32*, !dbg !4982
  %bf.load267 = load i32, i32* %111, align 8, !dbg !4982
  %bf.lshr268 = lshr i32 %bf.load267, 16, !dbg !4982
  %bf.clear269 = and i32 %bf.lshr268, 255, !dbg !4982
  %idxprom270 = zext i32 %bf.clear269 to i64, !dbg !4982
  %arrayidx271 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom270, !dbg !4982
  %112 = load i8, i8* %arrayidx271, align 1, !dbg !4982
  %conv272 = zext i8 %112 to i32, !dbg !4982
  %idxprom273 = zext i32 %conv272 to i64, !dbg !4982
  %arrayidx274 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom273, !dbg !4982
  %113 = load i8, i8* %arrayidx274, align 1, !dbg !4982
  %conv275 = zext i8 %113 to i16, !dbg !4982
  %conv276 = zext i16 %conv275 to i32, !dbg !4982
  %mul277 = mul nsw i32 %conv276, 8, !dbg !4982
  %conv278 = trunc i32 %mul277 to i16, !dbg !4982
  %conv279 = zext i16 %conv278 to i64, !dbg !4982
  %div = udiv i64 %sub, %conv279, !dbg !4983
  %114 = load i64, i64* %bitnum.addr, align 8, !dbg !4984
  %115 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4985
  %116 = bitcast %struct.rtx_def* %115 to i32*, !dbg !4985
  %bf.load280 = load i32, i32* %116, align 8, !dbg !4985
  %bf.lshr281 = lshr i32 %bf.load280, 16, !dbg !4985
  %bf.clear282 = and i32 %bf.lshr281, 255, !dbg !4985
  %idxprom283 = zext i32 %bf.clear282 to i64, !dbg !4985
  %arrayidx284 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom283, !dbg !4985
  %117 = load i8, i8* %arrayidx284, align 1, !dbg !4985
  %conv285 = zext i8 %117 to i32, !dbg !4985
  %idxprom286 = zext i32 %conv285 to i64, !dbg !4985
  %arrayidx287 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom286, !dbg !4985
  %118 = load i8, i8* %arrayidx287, align 1, !dbg !4985
  %conv288 = zext i8 %118 to i16, !dbg !4985
  %conv289 = zext i16 %conv288 to i32, !dbg !4985
  %mul290 = mul nsw i32 %conv289, 8, !dbg !4985
  %conv291 = trunc i32 %mul290 to i16, !dbg !4985
  %conv292 = zext i16 %conv291 to i64, !dbg !4985
  %div293 = udiv i64 %114, %conv292, !dbg !4986
  %cmp294 = icmp eq i64 %div, %div293, !dbg !4987
  br i1 %cmp294, label %if.then296, label %if.end414, !dbg !4988

if.then296:                                       ; preds = %land.lhs.true265
  call void @llvm.dbg.declare(metadata i32* %outermode, metadata !4989, metadata !DIExpression()), !dbg !4991
  %119 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !4992
  %120 = bitcast %struct.rtx_def* %119 to i32*, !dbg !4992
  %bf.load297 = load i32, i32* %120, align 8, !dbg !4992
  %bf.lshr298 = lshr i32 %bf.load297, 16, !dbg !4992
  %bf.clear299 = and i32 %bf.lshr298, 255, !dbg !4992
  store i32 %bf.clear299, i32* %outermode, align 4, !dbg !4991
  call void @llvm.dbg.declare(metadata i32* %innermode, metadata !4993, metadata !DIExpression()), !dbg !4994
  %121 = load i32, i32* %outermode, align 4, !dbg !4995
  %idxprom300 = zext i32 %121 to i64, !dbg !4995
  %arrayidx301 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom300, !dbg !4995
  %122 = load i8, i8* %arrayidx301, align 1, !dbg !4995
  %conv302 = zext i8 %122 to i32, !dbg !4995
  store i32 %conv302, i32* %innermode, align 4, !dbg !4994
  call void @llvm.dbg.declare(metadata i32* %icode303, metadata !4996, metadata !DIExpression()), !dbg !4997
  %123 = load i32, i32* %outermode, align 4, !dbg !4998
  %idxprom304 = sext i32 %123 to i64, !dbg !4998
  %arrayidx305 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 132, i32 4), i64 0, i64 %idxprom304, !dbg !4998
  %insn_code306 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx305, i32 0, i32 0, !dbg !4999
  %124 = load i32, i32* %insn_code306, align 4, !dbg !4999
  store i32 %124, i32* %icode303, align 4, !dbg !4997
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !5000, metadata !DIExpression()), !dbg !5001
  %125 = load i64, i64* %bitnum.addr, align 8, !dbg !5002
  %126 = load i32, i32* %innermode, align 4, !dbg !5003
  %idxprom307 = zext i32 %126 to i64, !dbg !5003
  %arrayidx308 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom307, !dbg !5003
  %127 = load i8, i8* %arrayidx308, align 1, !dbg !5003
  %conv309 = zext i8 %127 to i16, !dbg !5003
  %conv310 = zext i16 %conv309 to i32, !dbg !5003
  %mul311 = mul nsw i32 %conv310, 8, !dbg !5003
  %conv312 = trunc i32 %mul311 to i16, !dbg !5003
  %conv313 = zext i16 %conv312 to i64, !dbg !5003
  %div314 = udiv i64 %125, %conv313, !dbg !5004
  store i64 %div314, i64* %pos, align 8, !dbg !5001
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtxpos, metadata !5005, metadata !DIExpression()), !dbg !5006
  %128 = load i64, i64* %pos, align 8, !dbg !5007
  %call315 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %128), !dbg !5007
  store %struct.rtx_def* %call315, %struct.rtx_def** %rtxpos, align 8, !dbg !5006
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !5008, metadata !DIExpression()), !dbg !5009
  %129 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5010
  store %struct.rtx_def* %129, %struct.rtx_def** %src, align 8, !dbg !5009
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !5011, metadata !DIExpression()), !dbg !5012
  store %struct.rtx_def* null, %struct.rtx_def** %dest, align 8, !dbg !5012
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !5013, metadata !DIExpression()), !dbg !5014
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !5015, metadata !DIExpression()), !dbg !5016
  call void @llvm.dbg.declare(metadata i32* %mode0, metadata !5017, metadata !DIExpression()), !dbg !5018
  %130 = load i32, i32* %icode303, align 4, !dbg !5019
  %idxprom316 = sext i32 %130 to i64, !dbg !5020
  %arrayidx317 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom316, !dbg !5020
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx317, i32 0, i32 3, !dbg !5021
  %131 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !5021
  %arrayidx318 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %131, i64 0, !dbg !5020
  %mode319 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx318, i32 0, i32 2, !dbg !5022
  %bf.load320 = load i16, i16* %mode319, align 8, !dbg !5022
  %bf.cast = zext i16 %bf.load320 to i32, !dbg !5022
  store i32 %bf.cast, i32* %mode0, align 4, !dbg !5018
  call void @llvm.dbg.declare(metadata i32* %mode1321, metadata !5023, metadata !DIExpression()), !dbg !5024
  %132 = load i32, i32* %icode303, align 4, !dbg !5025
  %idxprom322 = sext i32 %132 to i64, !dbg !5026
  %arrayidx323 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom322, !dbg !5026
  %operand324 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx323, i32 0, i32 3, !dbg !5027
  %133 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand324, align 8, !dbg !5027
  %arrayidx325 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %133, i64 1, !dbg !5026
  %mode326 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx325, i32 0, i32 2, !dbg !5028
  %bf.load327 = load i16, i16* %mode326, align 8, !dbg !5028
  %bf.cast328 = zext i16 %bf.load327 to i32, !dbg !5028
  store i32 %bf.cast328, i32* %mode1321, align 4, !dbg !5024
  call void @llvm.dbg.declare(metadata i32* %mode2, metadata !5029, metadata !DIExpression()), !dbg !5030
  %134 = load i32, i32* %icode303, align 4, !dbg !5031
  %idxprom329 = sext i32 %134 to i64, !dbg !5032
  %arrayidx330 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom329, !dbg !5032
  %operand331 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx330, i32 0, i32 3, !dbg !5033
  %135 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand331, align 8, !dbg !5033
  %arrayidx332 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %135, i64 2, !dbg !5032
  %mode333 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx332, i32 0, i32 2, !dbg !5034
  %bf.load334 = load i16, i16* %mode333, align 8, !dbg !5034
  %bf.cast335 = zext i16 %bf.load334 to i32, !dbg !5034
  store i32 %bf.cast335, i32* %mode2, align 4, !dbg !5030
  %136 = load i32, i32* %innermode, align 4, !dbg !5035
  %137 = load i32, i32* %tmode.addr, align 4, !dbg !5037
  %cmp336 = icmp eq i32 %136, %137, !dbg !5038
  br i1 %cmp336, label %if.then341, label %lor.lhs.false338, !dbg !5039

lor.lhs.false338:                                 ; preds = %if.then296
  %138 = load i32, i32* %innermode, align 4, !dbg !5040
  %139 = load i32, i32* %mode.addr, align 4, !dbg !5041
  %cmp339 = icmp eq i32 %138, %139, !dbg !5042
  br i1 %cmp339, label %if.then341, label %if.end342, !dbg !5043

if.then341:                                       ; preds = %lor.lhs.false338, %if.then296
  %140 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5044
  store %struct.rtx_def* %140, %struct.rtx_def** %dest, align 8, !dbg !5045
  br label %if.end342, !dbg !5046

if.end342:                                        ; preds = %if.then341, %lor.lhs.false338
  %141 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5047
  %tobool343 = icmp ne %struct.rtx_def* %141, null, !dbg !5047
  br i1 %tobool343, label %if.end346, label %if.then344, !dbg !5049

if.then344:                                       ; preds = %if.end342
  %142 = load i32, i32* %innermode, align 4, !dbg !5050
  %call345 = call %struct.rtx_def* @gen_reg_rtx(i32 %142), !dbg !5051
  store %struct.rtx_def* %call345, %struct.rtx_def** %dest, align 8, !dbg !5052
  br label %if.end346, !dbg !5053

if.end346:                                        ; preds = %if.then344, %if.end342
  call void @start_sequence(), !dbg !5054
  %143 = load i32, i32* %icode303, align 4, !dbg !5055
  %idxprom347 = sext i32 %143 to i64, !dbg !5057
  %arrayidx348 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom347, !dbg !5057
  %operand349 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx348, i32 0, i32 3, !dbg !5058
  %144 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand349, align 8, !dbg !5058
  %arrayidx350 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %144, i64 0, !dbg !5057
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx350, i32 0, i32 0, !dbg !5059
  %145 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !5059
  %146 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5060
  %147 = load i32, i32* %mode0, align 4, !dbg !5061
  %call351 = call i32 %145(%struct.rtx_def* %146, i32 %147), !dbg !5062
  %tobool352 = icmp ne i32 %call351, 0, !dbg !5062
  br i1 %tobool352, label %if.end355, label %if.then353, !dbg !5063

if.then353:                                       ; preds = %if.end346
  %148 = load i32, i32* %mode0, align 4, !dbg !5064
  %149 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5065
  %call354 = call %struct.rtx_def* @copy_to_mode_reg(i32 %148, %struct.rtx_def* %149), !dbg !5066
  store %struct.rtx_def* %call354, %struct.rtx_def** %dest, align 8, !dbg !5067
  br label %if.end355, !dbg !5068

if.end355:                                        ; preds = %if.then353, %if.end346
  %150 = load i32, i32* %icode303, align 4, !dbg !5069
  %idxprom356 = sext i32 %150 to i64, !dbg !5071
  %arrayidx357 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom356, !dbg !5071
  %operand358 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx357, i32 0, i32 3, !dbg !5072
  %151 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand358, align 8, !dbg !5072
  %arrayidx359 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %151, i64 1, !dbg !5071
  %predicate360 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx359, i32 0, i32 0, !dbg !5073
  %152 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate360, align 8, !dbg !5073
  %153 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5074
  %154 = load i32, i32* %mode1321, align 4, !dbg !5075
  %call361 = call i32 %152(%struct.rtx_def* %153, i32 %154), !dbg !5076
  %tobool362 = icmp ne i32 %call361, 0, !dbg !5076
  br i1 %tobool362, label %if.end365, label %if.then363, !dbg !5077

if.then363:                                       ; preds = %if.end355
  %155 = load i32, i32* %mode1321, align 4, !dbg !5078
  %156 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5079
  %call364 = call %struct.rtx_def* @copy_to_mode_reg(i32 %155, %struct.rtx_def* %156), !dbg !5080
  store %struct.rtx_def* %call364, %struct.rtx_def** %src, align 8, !dbg !5081
  br label %if.end365, !dbg !5082

if.end365:                                        ; preds = %if.then363, %if.end355
  %157 = load i32, i32* %icode303, align 4, !dbg !5083
  %idxprom366 = sext i32 %157 to i64, !dbg !5085
  %arrayidx367 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom366, !dbg !5085
  %operand368 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx367, i32 0, i32 3, !dbg !5086
  %158 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand368, align 8, !dbg !5086
  %arrayidx369 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %158, i64 2, !dbg !5085
  %predicate370 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx369, i32 0, i32 0, !dbg !5087
  %159 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate370, align 8, !dbg !5087
  %160 = load %struct.rtx_def*, %struct.rtx_def** %rtxpos, align 8, !dbg !5088
  %161 = load i32, i32* %mode2, align 4, !dbg !5089
  %call371 = call i32 %159(%struct.rtx_def* %160, i32 %161), !dbg !5090
  %tobool372 = icmp ne i32 %call371, 0, !dbg !5090
  br i1 %tobool372, label %if.end375, label %if.then373, !dbg !5091

if.then373:                                       ; preds = %if.end365
  %162 = load i32, i32* %mode1321, align 4, !dbg !5092
  %163 = load %struct.rtx_def*, %struct.rtx_def** %rtxpos, align 8, !dbg !5093
  %call374 = call %struct.rtx_def* @copy_to_mode_reg(i32 %162, %struct.rtx_def* %163), !dbg !5094
  store %struct.rtx_def* %call374, %struct.rtx_def** %rtxpos, align 8, !dbg !5095
  br label %if.end375, !dbg !5096

if.end375:                                        ; preds = %if.then373, %if.end365
  %164 = load i32, i32* %icode303, align 4, !dbg !5097
  %idxprom376 = sext i32 %164 to i64, !dbg !5097
  %arrayidx377 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom376, !dbg !5097
  %operand378 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx377, i32 0, i32 3, !dbg !5097
  %165 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand378, align 8, !dbg !5097
  %arrayidx379 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %165, i64 0, !dbg !5097
  %predicate380 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx379, i32 0, i32 0, !dbg !5097
  %166 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate380, align 8, !dbg !5097
  %167 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5097
  %168 = load i32, i32* %mode0, align 4, !dbg !5097
  %call381 = call i32 %166(%struct.rtx_def* %167, i32 %168), !dbg !5097
  %tobool382 = icmp ne i32 %call381, 0, !dbg !5097
  br i1 %tobool382, label %land.lhs.true383, label %cond.true, !dbg !5097

land.lhs.true383:                                 ; preds = %if.end375
  %169 = load i32, i32* %icode303, align 4, !dbg !5097
  %idxprom384 = sext i32 %169 to i64, !dbg !5097
  %arrayidx385 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom384, !dbg !5097
  %operand386 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx385, i32 0, i32 3, !dbg !5097
  %170 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand386, align 8, !dbg !5097
  %arrayidx387 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %170, i64 1, !dbg !5097
  %predicate388 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx387, i32 0, i32 0, !dbg !5097
  %171 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate388, align 8, !dbg !5097
  %172 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5097
  %173 = load i32, i32* %mode1321, align 4, !dbg !5097
  %call389 = call i32 %171(%struct.rtx_def* %172, i32 %173), !dbg !5097
  %tobool390 = icmp ne i32 %call389, 0, !dbg !5097
  br i1 %tobool390, label %land.lhs.true391, label %cond.true, !dbg !5097

land.lhs.true391:                                 ; preds = %land.lhs.true383
  %174 = load i32, i32* %icode303, align 4, !dbg !5097
  %idxprom392 = sext i32 %174 to i64, !dbg !5097
  %arrayidx393 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom392, !dbg !5097
  %operand394 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx393, i32 0, i32 3, !dbg !5097
  %175 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand394, align 8, !dbg !5097
  %arrayidx395 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %175, i64 2, !dbg !5097
  %predicate396 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx395, i32 0, i32 0, !dbg !5097
  %176 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate396, align 8, !dbg !5097
  %177 = load %struct.rtx_def*, %struct.rtx_def** %rtxpos, align 8, !dbg !5097
  %178 = load i32, i32* %mode2, align 4, !dbg !5097
  %call397 = call i32 %176(%struct.rtx_def* %177, i32 %178), !dbg !5097
  %tobool398 = icmp ne i32 %call397, 0, !dbg !5097
  br i1 %tobool398, label %cond.false, label %cond.true, !dbg !5097

cond.true:                                        ; preds = %land.lhs.true391, %land.lhs.true383, %if.end375
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1288, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5097
  br label %cond.end, !dbg !5097

cond.false:                                       ; preds = %land.lhs.true391
  br label %cond.end, !dbg !5097

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond399 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5097
  %179 = load i32, i32* %icode303, align 4, !dbg !5098
  %idxprom400 = sext i32 %179 to i64, !dbg !5098
  %arrayidx401 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom400, !dbg !5098
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx401, i32 0, i32 2, !dbg !5098
  %180 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !5098
  %181 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5099
  %182 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5100
  %183 = load %struct.rtx_def*, %struct.rtx_def** %rtxpos, align 8, !dbg !5101
  %call402 = call %struct.rtx_def* (%struct.rtx_def*, ...) %180(%struct.rtx_def* %181, %struct.rtx_def* %182, %struct.rtx_def* %183), !dbg !5098
  store %struct.rtx_def* %call402, %struct.rtx_def** %pat, align 8, !dbg !5102
  %call403 = call %struct.rtx_def* @get_insns(), !dbg !5103
  store %struct.rtx_def* %call403, %struct.rtx_def** %seq, align 8, !dbg !5104
  call void @end_sequence(), !dbg !5105
  %184 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !5106
  %tobool404 = icmp ne %struct.rtx_def* %184, null, !dbg !5106
  br i1 %tobool404, label %if.then405, label %if.end413, !dbg !5108

if.then405:                                       ; preds = %cond.end
  %185 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !5109
  %call406 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %185), !dbg !5111
  %186 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !5112
  %call407 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %186), !dbg !5113
  %187 = load i32, i32* %mode0, align 4, !dbg !5114
  %188 = load i32, i32* %mode.addr, align 4, !dbg !5116
  %cmp408 = icmp ne i32 %187, %188, !dbg !5117
  br i1 %cmp408, label %if.then410, label %if.end412, !dbg !5118

if.then410:                                       ; preds = %if.then405
  %189 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !5119
  %190 = load i32, i32* %tmode.addr, align 4, !dbg !5120
  %191 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5121
  %call411 = call %struct.rtx_def* %189(i32 %190, %struct.rtx_def* %191), !dbg !5119
  store %struct.rtx_def* %call411, %struct.rtx_def** %retval, align 8, !dbg !5122
  br label %return, !dbg !5122

if.end412:                                        ; preds = %if.then405
  %192 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5123
  store %struct.rtx_def* %192, %struct.rtx_def** %retval, align 8, !dbg !5124
  br label %return, !dbg !5124

if.end413:                                        ; preds = %cond.end
  br label %if.end414, !dbg !5125

if.end414:                                        ; preds = %if.end413, %land.lhs.true265, %land.lhs.true257, %land.lhs.true252, %lor.lhs.false243
  call void @llvm.dbg.declare(metadata i32* %imode, metadata !5126, metadata !DIExpression()), !dbg !5128
  %193 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5129
  %194 = bitcast %struct.rtx_def* %193 to i32*, !dbg !5129
  %bf.load415 = load i32, i32* %194, align 8, !dbg !5129
  %bf.lshr416 = lshr i32 %bf.load415, 16, !dbg !5129
  %bf.clear417 = and i32 %bf.lshr416, 255, !dbg !5129
  %call418 = call i32 @int_mode_for_mode(i32 %bf.clear417), !dbg !5130
  store i32 %call418, i32* %imode, align 4, !dbg !5128
  %195 = load i32, i32* %imode, align 4, !dbg !5131
  %196 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5133
  %197 = bitcast %struct.rtx_def* %196 to i32*, !dbg !5133
  %bf.load419 = load i32, i32* %197, align 8, !dbg !5133
  %bf.lshr420 = lshr i32 %bf.load419, 16, !dbg !5133
  %bf.clear421 = and i32 %bf.lshr420, 255, !dbg !5133
  %cmp422 = icmp ne i32 %195, %bf.clear421, !dbg !5134
  br i1 %cmp422, label %if.then424, label %if.end490, !dbg !5135

if.then424:                                       ; preds = %if.end414
  %198 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5136
  %199 = bitcast %struct.rtx_def* %198 to i32*, !dbg !5136
  %bf.load425 = load i32, i32* %199, align 8, !dbg !5136
  %bf.clear426 = and i32 %bf.load425, 65535, !dbg !5136
  %cmp427 = icmp eq i32 %bf.clear426, 43, !dbg !5136
  br i1 %cmp427, label %if.then429, label %if.else431, !dbg !5139

if.then429:                                       ; preds = %if.then424
  %200 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5140
  %201 = load i32, i32* %imode, align 4, !dbg !5140
  %call430 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %200, i32 %201, i64 0, i32 1, i32 1), !dbg !5140
  store %struct.rtx_def* %call430, %struct.rtx_def** %op0, align 8, !dbg !5141
  br label %if.end489, !dbg !5142

if.else431:                                       ; preds = %if.then424
  %202 = load i32, i32* %imode, align 4, !dbg !5143
  %cmp432 = icmp ne i32 %202, 1, !dbg !5145
  br i1 %cmp432, label %if.then434, label %if.else443, !dbg !5146

if.then434:                                       ; preds = %if.else431
  %203 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !5147
  %204 = load i32, i32* %imode, align 4, !dbg !5149
  %205 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5150
  %call435 = call %struct.rtx_def* %203(i32 %204, %struct.rtx_def* %205), !dbg !5147
  store %struct.rtx_def* %call435, %struct.rtx_def** %op0, align 8, !dbg !5151
  %206 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5152
  %207 = bitcast %struct.rtx_def* %206 to i32*, !dbg !5152
  %bf.load436 = load i32, i32* %207, align 8, !dbg !5152
  %bf.clear437 = and i32 %bf.load436, 65535, !dbg !5152
  %cmp438 = icmp eq i32 %bf.clear437, 39, !dbg !5154
  br i1 %cmp438, label %if.then440, label %if.end442, !dbg !5155

if.then440:                                       ; preds = %if.then434
  %208 = load i32, i32* %imode, align 4, !dbg !5156
  %209 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5157
  %call441 = call %struct.rtx_def* @force_reg(i32 %208, %struct.rtx_def* %209), !dbg !5158
  store %struct.rtx_def* %call441, %struct.rtx_def** %op0, align 8, !dbg !5159
  br label %if.end442, !dbg !5160

if.end442:                                        ; preds = %if.then440, %if.then434
  br label %if.end488, !dbg !5161

if.else443:                                       ; preds = %if.else431
  %210 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5162
  %211 = bitcast %struct.rtx_def* %210 to i32*, !dbg !5162
  %bf.load444 = load i32, i32* %211, align 8, !dbg !5162
  %bf.clear445 = and i32 %bf.load444, 65535, !dbg !5162
  %cmp446 = icmp eq i32 %bf.clear445, 37, !dbg !5162
  br i1 %cmp446, label %if.then448, label %if.else473, !dbg !5164

if.then448:                                       ; preds = %if.else443
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !5165, metadata !DIExpression()), !dbg !5167
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subreg, metadata !5168, metadata !DIExpression()), !dbg !5169
  %212 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5170
  %213 = bitcast %struct.rtx_def* %212 to i32*, !dbg !5170
  %bf.load449 = load i32, i32* %213, align 8, !dbg !5170
  %bf.lshr450 = lshr i32 %bf.load449, 16, !dbg !5170
  %bf.clear451 = and i32 %bf.lshr450, 255, !dbg !5170
  %idxprom452 = zext i32 %bf.clear451 to i64, !dbg !5170
  %arrayidx453 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom452, !dbg !5170
  %214 = load i8, i8* %arrayidx453, align 1, !dbg !5170
  %conv454 = zext i8 %214 to i16, !dbg !5170
  %conv455 = zext i16 %conv454 to i32, !dbg !5170
  %mul456 = mul nsw i32 %conv455, 8, !dbg !5170
  %conv457 = trunc i32 %mul456 to i16, !dbg !5170
  %conv458 = zext i16 %conv457 to i32, !dbg !5170
  %call459 = call i32 @smallest_mode_for_size(i32 %conv458, i32 2), !dbg !5171
  store i32 %call459, i32* %imode, align 4, !dbg !5172
  %215 = load i32, i32* %imode, align 4, !dbg !5173
  %call460 = call %struct.rtx_def* @gen_reg_rtx(i32 %215), !dbg !5174
  store %struct.rtx_def* %call460, %struct.rtx_def** %reg, align 8, !dbg !5175
  %216 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5176
  %217 = bitcast %struct.rtx_def* %216 to i32*, !dbg !5176
  %bf.load461 = load i32, i32* %217, align 8, !dbg !5176
  %bf.lshr462 = lshr i32 %bf.load461, 16, !dbg !5176
  %bf.clear463 = and i32 %bf.lshr462, 255, !dbg !5176
  %218 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5177
  %call464 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %bf.clear463, %struct.rtx_def* %218), !dbg !5178
  store %struct.rtx_def* %call464, %struct.rtx_def** %subreg, align 8, !dbg !5179
  %219 = load %struct.rtx_def*, %struct.rtx_def** %subreg, align 8, !dbg !5180
  %220 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5181
  %call465 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %219, %struct.rtx_def* %220), !dbg !5182
  %221 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5183
  store %struct.rtx_def* %221, %struct.rtx_def** %op0, align 8, !dbg !5184
  %222 = load %struct.rtx_def*, %struct.rtx_def** %subreg, align 8, !dbg !5185
  %u466 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %222, i32 0, i32 1, !dbg !5185
  %fld467 = bitcast %union.u* %u466 to [1 x %union.rtunion_def]*, !dbg !5185
  %arrayidx468 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld467, i64 0, i64 1, !dbg !5185
  %rt_uint469 = bitcast %union.rtunion_def* %arrayidx468 to i32*, !dbg !5185
  %223 = load i32, i32* %rt_uint469, align 8, !dbg !5185
  %mul470 = mul i32 %223, 8, !dbg !5186
  %conv471 = zext i32 %mul470 to i64, !dbg !5185
  %224 = load i64, i64* %bitnum.addr, align 8, !dbg !5187
  %add472 = add i64 %224, %conv471, !dbg !5187
  store i64 %add472, i64* %bitnum.addr, align 8, !dbg !5187
  br label %if.end487, !dbg !5188

if.else473:                                       ; preds = %if.else443
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem, metadata !5189, metadata !DIExpression()), !dbg !5191
  %225 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5192
  %226 = bitcast %struct.rtx_def* %225 to i32*, !dbg !5192
  %bf.load474 = load i32, i32* %226, align 8, !dbg !5192
  %bf.lshr475 = lshr i32 %bf.load474, 16, !dbg !5192
  %bf.clear476 = and i32 %bf.lshr475, 255, !dbg !5192
  %227 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5193
  %228 = bitcast %struct.rtx_def* %227 to i32*, !dbg !5193
  %bf.load477 = load i32, i32* %228, align 8, !dbg !5193
  %bf.lshr478 = lshr i32 %bf.load477, 16, !dbg !5193
  %bf.clear479 = and i32 %bf.lshr478, 255, !dbg !5193
  %idxprom480 = zext i32 %bf.clear479 to i64, !dbg !5193
  %arrayidx481 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom480, !dbg !5193
  %229 = load i8, i8* %arrayidx481, align 1, !dbg !5193
  %conv482 = zext i8 %229 to i16, !dbg !5193
  %conv483 = zext i16 %conv482 to i64, !dbg !5193
  %call484 = call %struct.rtx_def* @assign_stack_temp(i32 %bf.clear476, i64 %conv483, i32 0), !dbg !5194
  store %struct.rtx_def* %call484, %struct.rtx_def** %mem, align 8, !dbg !5191
  %230 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !5195
  %231 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5196
  %call485 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %230, %struct.rtx_def* %231), !dbg !5197
  %232 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !5198
  %call486 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %232, i32 1, i64 0, i32 1, i32 1), !dbg !5198
  store %struct.rtx_def* %call486, %struct.rtx_def** %op0, align 8, !dbg !5199
  br label %if.end487

if.end487:                                        ; preds = %if.else473, %if.then448
  br label %if.end488

if.end488:                                        ; preds = %if.end487, %if.end442
  br label %if.end489

if.end489:                                        ; preds = %if.end488, %if.then429
  br label %if.end490, !dbg !5200

if.end490:                                        ; preds = %if.end489, %if.end414
  %233 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5201
  %234 = bitcast %struct.rtx_def* %233 to i32*, !dbg !5201
  %bf.load491 = load i32, i32* %234, align 8, !dbg !5201
  %bf.clear492 = and i32 %bf.load491, 65535, !dbg !5201
  %cmp493 = icmp eq i32 %bf.clear492, 43, !dbg !5201
  br i1 %cmp493, label %if.then495, label %if.end497, !dbg !5203

if.then495:                                       ; preds = %if.end490
  %235 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5204
  %call496 = call %struct.rtx_def* @shallow_copy_rtx_stat(%struct.rtx_def* %235), !dbg !5204
  store %struct.rtx_def* %call496, %struct.rtx_def** %op0, align 8, !dbg !5206
  %236 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5207
  call void @set_mem_alias_set(%struct.rtx_def* %236, i32 0), !dbg !5208
  %237 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5209
  call void @set_mem_expr(%struct.rtx_def* %237, %union.tree_node* null), !dbg !5210
  br label %if.end497, !dbg !5211

if.end497:                                        ; preds = %if.then495, %if.end490
  %238 = load i64, i64* %bitnum.addr, align 8, !dbg !5212
  %239 = load i32, i32* %unit, align 4, !dbg !5213
  %conv498 = zext i32 %239 to i64, !dbg !5213
  %rem = urem i64 %238, %conv498, !dbg !5214
  store i64 %rem, i64* %bitpos, align 8, !dbg !5215
  %240 = load i64, i64* %bitnum.addr, align 8, !dbg !5216
  %241 = load i32, i32* %unit, align 4, !dbg !5217
  %conv499 = zext i32 %241 to i64, !dbg !5217
  %div500 = udiv i64 %240, %conv499, !dbg !5218
  store i64 %div500, i64* %offset, align 8, !dbg !5219
  %242 = load i64, i64* %bitpos, align 8, !dbg !5220
  %div501 = udiv i64 %242, 8, !dbg !5221
  %243 = load i64, i64* %offset, align 8, !dbg !5222
  %mul502 = mul i64 %243, 4, !dbg !5223
  %add503 = add i64 %div501, %mul502, !dbg !5224
  %conv504 = trunc i64 %add503 to i32, !dbg !5220
  store i32 %conv504, i32* %byte_offset, align 4, !dbg !5225
  %244 = load i32, i32* %tmode.addr, align 4, !dbg !5226
  %idxprom505 = zext i32 %244 to i64, !dbg !5226
  %arrayidx506 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom505, !dbg !5226
  %245 = load i8, i8* %arrayidx506, align 1, !dbg !5226
  %conv507 = zext i8 %245 to i32, !dbg !5226
  %cmp508 = icmp eq i32 %conv507, 2, !dbg !5226
  br i1 %cmp508, label %cond.true516, label %lor.lhs.false510, !dbg !5226

lor.lhs.false510:                                 ; preds = %if.end497
  %246 = load i32, i32* %tmode.addr, align 4, !dbg !5226
  %idxprom511 = zext i32 %246 to i64, !dbg !5226
  %arrayidx512 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom511, !dbg !5226
  %247 = load i8, i8* %arrayidx512, align 1, !dbg !5226
  %conv513 = zext i8 %247 to i32, !dbg !5226
  %cmp514 = icmp eq i32 %conv513, 3, !dbg !5226
  br i1 %cmp514, label %cond.true516, label %cond.false522, !dbg !5226

cond.true516:                                     ; preds = %lor.lhs.false510, %if.end497
  %248 = load i64, i64* %bitsize.addr, align 8, !dbg !5227
  %conv517 = trunc i64 %248 to i32, !dbg !5227
  %249 = load i32, i32* %tmode.addr, align 4, !dbg !5228
  %idxprom518 = zext i32 %249 to i64, !dbg !5228
  %arrayidx519 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom518, !dbg !5228
  %250 = load i8, i8* %arrayidx519, align 1, !dbg !5228
  %conv520 = zext i8 %250 to i32, !dbg !5228
  %call521 = call i32 @mode_for_size(i32 %conv517, i32 %conv520, i32 0), !dbg !5229
  br label %cond.end523, !dbg !5226

cond.false522:                                    ; preds = %lor.lhs.false510
  %251 = load i32, i32* %mode.addr, align 4, !dbg !5230
  br label %cond.end523, !dbg !5226

cond.end523:                                      ; preds = %cond.false522, %cond.true516
  %cond524 = phi i32 [ %call521, %cond.true516 ], [ %251, %cond.false522 ], !dbg !5226
  store i32 %cond524, i32* %mode1, align 4, !dbg !5231
  %252 = load i64, i64* %bitsize.addr, align 8, !dbg !5232
  %cmp525 = icmp uge i64 %252, 32, !dbg !5234
  br i1 %cmp525, label %land.lhs.true527, label %lor.lhs.false541, !dbg !5235

land.lhs.true527:                                 ; preds = %cond.end523
  %253 = load i64, i64* %bitsize.addr, align 8, !dbg !5236
  %254 = load i32, i32* %mode.addr, align 4, !dbg !5237
  %idxprom528 = zext i32 %254 to i64, !dbg !5237
  %arrayidx529 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom528, !dbg !5237
  %255 = load i8, i8* %arrayidx529, align 1, !dbg !5237
  %conv530 = zext i8 %255 to i16, !dbg !5237
  %conv531 = zext i16 %conv530 to i32, !dbg !5237
  %mul532 = mul nsw i32 %conv531, 8, !dbg !5237
  %conv533 = trunc i32 %mul532 to i16, !dbg !5237
  %conv534 = zext i16 %conv533 to i64, !dbg !5237
  %cmp535 = icmp eq i64 %253, %conv534, !dbg !5238
  br i1 %cmp535, label %land.lhs.true537, label %lor.lhs.false541, !dbg !5239

land.lhs.true537:                                 ; preds = %land.lhs.true527
  %256 = load i64, i64* %bitpos, align 8, !dbg !5240
  %rem538 = urem i64 %256, 32, !dbg !5241
  %cmp539 = icmp eq i64 %rem538, 0, !dbg !5242
  br i1 %cmp539, label %land.lhs.true552, label %lor.lhs.false541, !dbg !5243

lor.lhs.false541:                                 ; preds = %land.lhs.true537, %land.lhs.true527, %cond.end523
  %257 = load i32, i32* %mode1, align 4, !dbg !5244
  %cmp542 = icmp ne i32 %257, 1, !dbg !5245
  br i1 %cmp542, label %land.lhs.true544, label %if.end607, !dbg !5246

land.lhs.true544:                                 ; preds = %lor.lhs.false541
  br i1 false, label %cond.true545, label %cond.false549, !dbg !5247

cond.true545:                                     ; preds = %land.lhs.true544
  %258 = load i64, i64* %bitpos, align 8, !dbg !5248
  %259 = load i64, i64* %bitsize.addr, align 8, !dbg !5249
  %add546 = add i64 %258, %259, !dbg !5250
  %cmp547 = icmp eq i64 %add546, 32, !dbg !5251
  br i1 %cmp547, label %land.lhs.true552, label %if.end607, !dbg !5252

cond.false549:                                    ; preds = %land.lhs.true544
  %260 = load i64, i64* %bitpos, align 8, !dbg !5253
  %cmp550 = icmp eq i64 %260, 0, !dbg !5254
  br i1 %cmp550, label %land.lhs.true552, label %if.end607, !dbg !5247

land.lhs.true552:                                 ; preds = %cond.false549, %cond.true545, %land.lhs.true537
  %261 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5255
  %262 = bitcast %struct.rtx_def* %261 to i32*, !dbg !5255
  %bf.load553 = load i32, i32* %262, align 8, !dbg !5255
  %bf.clear554 = and i32 %bf.load553, 65535, !dbg !5255
  %cmp555 = icmp eq i32 %bf.clear554, 43, !dbg !5255
  br i1 %cmp555, label %lor.lhs.false572, label %land.lhs.true557, !dbg !5256

land.lhs.true557:                                 ; preds = %land.lhs.true552
  %263 = load i32, i32* %mode1, align 4, !dbg !5257
  %idxprom558 = zext i32 %263 to i64, !dbg !5257
  %arrayidx559 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom558, !dbg !5257
  %264 = load i8, i8* %arrayidx559, align 1, !dbg !5257
  %conv560 = zext i8 %264 to i16, !dbg !5257
  %conv561 = zext i16 %conv560 to i32, !dbg !5257
  %cmp562 = icmp ne i32 %conv561, 0, !dbg !5258
  br i1 %cmp562, label %land.lhs.true564, label %lor.lhs.false572, !dbg !5259

land.lhs.true564:                                 ; preds = %land.lhs.true557
  %265 = load i32, i32* %byte_offset, align 4, !dbg !5260
  %266 = load i32, i32* %mode1, align 4, !dbg !5261
  %idxprom565 = zext i32 %266 to i64, !dbg !5261
  %arrayidx566 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom565, !dbg !5261
  %267 = load i8, i8* %arrayidx566, align 1, !dbg !5261
  %conv567 = zext i8 %267 to i16, !dbg !5261
  %conv568 = zext i16 %conv567 to i32, !dbg !5261
  %rem569 = srem i32 %265, %conv568, !dbg !5262
  %cmp570 = icmp eq i32 %rem569, 0, !dbg !5263
  br i1 %cmp570, label %if.then577, label %lor.lhs.false572, !dbg !5264

lor.lhs.false572:                                 ; preds = %land.lhs.true564, %land.lhs.true557, %land.lhs.true552
  %268 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5265
  %269 = bitcast %struct.rtx_def* %268 to i32*, !dbg !5265
  %bf.load573 = load i32, i32* %269, align 8, !dbg !5265
  %bf.clear574 = and i32 %bf.load573, 65535, !dbg !5265
  %cmp575 = icmp eq i32 %bf.clear574, 43, !dbg !5265
  br i1 %cmp575, label %if.then577, label %if.end607, !dbg !5266

if.then577:                                       ; preds = %lor.lhs.false572, %land.lhs.true564
  %270 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5267
  %271 = bitcast %struct.rtx_def* %270 to i32*, !dbg !5267
  %bf.load578 = load i32, i32* %271, align 8, !dbg !5267
  %bf.clear579 = and i32 %bf.load578, 65535, !dbg !5267
  %cmp580 = icmp eq i32 %bf.clear579, 43, !dbg !5267
  br i1 %cmp580, label %if.then582, label %if.else584, !dbg !5270

if.then582:                                       ; preds = %if.then577
  %272 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5271
  %273 = load i32, i32* %mode1, align 4, !dbg !5271
  %274 = load i64, i64* %offset, align 8, !dbg !5271
  %call583 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %272, i32 %273, i64 %274, i32 1, i32 1), !dbg !5271
  store %struct.rtx_def* %call583, %struct.rtx_def** %op0, align 8, !dbg !5272
  br label %if.end601, !dbg !5273

if.else584:                                       ; preds = %if.then577
  %275 = load i32, i32* %mode1, align 4, !dbg !5274
  %276 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5276
  %277 = bitcast %struct.rtx_def* %276 to i32*, !dbg !5276
  %bf.load585 = load i32, i32* %277, align 8, !dbg !5276
  %bf.lshr586 = lshr i32 %bf.load585, 16, !dbg !5276
  %bf.clear587 = and i32 %bf.lshr586, 255, !dbg !5276
  %cmp588 = icmp ne i32 %275, %bf.clear587, !dbg !5277
  br i1 %cmp588, label %if.then590, label %if.end600, !dbg !5278

if.then590:                                       ; preds = %if.else584
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sub591, metadata !5279, metadata !DIExpression()), !dbg !5281
  %278 = load i32, i32* %mode1, align 4, !dbg !5282
  %279 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5283
  %280 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5284
  %281 = bitcast %struct.rtx_def* %280 to i32*, !dbg !5284
  %bf.load592 = load i32, i32* %281, align 8, !dbg !5284
  %bf.lshr593 = lshr i32 %bf.load592, 16, !dbg !5284
  %bf.clear594 = and i32 %bf.lshr593, 255, !dbg !5284
  %282 = load i32, i32* %byte_offset, align 4, !dbg !5285
  %call595 = call %struct.rtx_def* @simplify_gen_subreg(i32 %278, %struct.rtx_def* %279, i32 %bf.clear594, i32 %282), !dbg !5286
  store %struct.rtx_def* %call595, %struct.rtx_def** %sub591, align 8, !dbg !5281
  %283 = load %struct.rtx_def*, %struct.rtx_def** %sub591, align 8, !dbg !5287
  %cmp596 = icmp eq %struct.rtx_def* %283, null, !dbg !5289
  br i1 %cmp596, label %if.then598, label %if.end599, !dbg !5290

if.then598:                                       ; preds = %if.then590
  br label %no_subreg_mode_swap, !dbg !5291

if.end599:                                        ; preds = %if.then590
  %284 = load %struct.rtx_def*, %struct.rtx_def** %sub591, align 8, !dbg !5292
  store %struct.rtx_def* %284, %struct.rtx_def** %op0, align 8, !dbg !5293
  br label %if.end600, !dbg !5294

if.end600:                                        ; preds = %if.end599, %if.else584
  br label %if.end601

if.end601:                                        ; preds = %if.end600, %if.then582
  %285 = load i32, i32* %mode1, align 4, !dbg !5295
  %286 = load i32, i32* %mode.addr, align 4, !dbg !5297
  %cmp602 = icmp ne i32 %285, %286, !dbg !5298
  br i1 %cmp602, label %if.then604, label %if.end606, !dbg !5299

if.then604:                                       ; preds = %if.end601
  %287 = load i32, i32* %tmode.addr, align 4, !dbg !5300
  %288 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5301
  %289 = load i32, i32* %unsignedp.addr, align 4, !dbg !5302
  %call605 = call %struct.rtx_def* @convert_to_mode(i32 %287, %struct.rtx_def* %288, i32 %289), !dbg !5303
  store %struct.rtx_def* %call605, %struct.rtx_def** %retval, align 8, !dbg !5304
  br label %return, !dbg !5304

if.end606:                                        ; preds = %if.end601
  %290 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5305
  store %struct.rtx_def* %290, %struct.rtx_def** %retval, align 8, !dbg !5306
  br label %return, !dbg !5306

if.end607:                                        ; preds = %lor.lhs.false572, %cond.false549, %cond.true545, %lor.lhs.false541
  br label %no_subreg_mode_swap, !dbg !5307

no_subreg_mode_swap:                              ; preds = %if.end607, %if.then598
  call void @llvm.dbg.label(metadata !5308), !dbg !5309
  %291 = load i64, i64* %bitsize.addr, align 8, !dbg !5310
  %cmp608 = icmp ugt i64 %291, 32, !dbg !5312
  br i1 %cmp608, label %if.then610, label %if.end711, !dbg !5313

if.then610:                                       ; preds = %no_subreg_mode_swap
  call void @llvm.dbg.declare(metadata i32* %nwords, metadata !5314, metadata !DIExpression()), !dbg !5316
  %292 = load i64, i64* %bitsize.addr, align 8, !dbg !5317
  %add611 = add i64 %292, 31, !dbg !5318
  %div612 = udiv i64 %add611, 32, !dbg !5319
  %conv613 = trunc i64 %div612 to i32, !dbg !5320
  store i32 %conv613, i32* %nwords, align 4, !dbg !5316
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5321, metadata !DIExpression()), !dbg !5322
  %293 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5323
  %cmp614 = icmp eq %struct.rtx_def* %293, null, !dbg !5325
  br i1 %cmp614, label %if.then621, label %lor.lhs.false616, !dbg !5326

lor.lhs.false616:                                 ; preds = %if.then610
  %294 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5327
  %295 = bitcast %struct.rtx_def* %294 to i32*, !dbg !5327
  %bf.load617 = load i32, i32* %295, align 8, !dbg !5327
  %bf.clear618 = and i32 %bf.load617, 65535, !dbg !5327
  %cmp619 = icmp eq i32 %bf.clear618, 37, !dbg !5327
  br i1 %cmp619, label %if.end623, label %if.then621, !dbg !5328

if.then621:                                       ; preds = %lor.lhs.false616, %if.then610
  %296 = load i32, i32* %mode.addr, align 4, !dbg !5329
  %call622 = call %struct.rtx_def* @gen_reg_rtx(i32 %296), !dbg !5330
  store %struct.rtx_def* %call622, %struct.rtx_def** %target.addr, align 8, !dbg !5331
  br label %if.end623, !dbg !5332

if.end623:                                        ; preds = %if.then621, %lor.lhs.false616
  %297 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5333
  %call624 = call %struct.rtx_def* @emit_clobber(%struct.rtx_def* %297), !dbg !5334
  store i32 0, i32* %i, align 4, !dbg !5335
  br label %for.cond625, !dbg !5337

for.cond625:                                      ; preds = %for.inc656, %if.end623
  %298 = load i32, i32* %i, align 4, !dbg !5338
  %299 = load i32, i32* %nwords, align 4, !dbg !5340
  %cmp626 = icmp ult i32 %298, %299, !dbg !5341
  br i1 %cmp626, label %for.body628, label %for.end657, !dbg !5342

for.body628:                                      ; preds = %for.cond625
  call void @llvm.dbg.declare(metadata i32* %wordnum, metadata !5343, metadata !DIExpression()), !dbg !5345
  %300 = load i32, i32* %i, align 4, !dbg !5346
  store i32 %300, i32* %wordnum, align 4, !dbg !5345
  call void @llvm.dbg.declare(metadata i32* %bit_offset, metadata !5347, metadata !DIExpression()), !dbg !5348
  %301 = load i32, i32* %i, align 4, !dbg !5349
  %mul629 = mul nsw i32 %301, 32, !dbg !5350
  store i32 %mul629, i32* %bit_offset, align 4, !dbg !5348
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target_part, metadata !5351, metadata !DIExpression()), !dbg !5352
  %302 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5353
  %303 = load i32, i32* %wordnum, align 4, !dbg !5354
  %call630 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %302, i32 %303, i32 1, i32 0), !dbg !5355
  store %struct.rtx_def* %call630, %struct.rtx_def** %target_part, align 8, !dbg !5352
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result_part, metadata !5356, metadata !DIExpression()), !dbg !5357
  %304 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5358
  %305 = load i64, i64* %bitsize.addr, align 8, !dbg !5359
  %306 = load i32, i32* %i, align 4, !dbg !5359
  %mul631 = mul i32 %306, 32, !dbg !5359
  %conv632 = zext i32 %mul631 to i64, !dbg !5359
  %sub633 = sub i64 %305, %conv632, !dbg !5359
  %cmp634 = icmp ult i64 32, %sub633, !dbg !5359
  br i1 %cmp634, label %cond.true636, label %cond.false637, !dbg !5359

cond.true636:                                     ; preds = %for.body628
  br label %cond.end641, !dbg !5359

cond.false637:                                    ; preds = %for.body628
  %307 = load i64, i64* %bitsize.addr, align 8, !dbg !5359
  %308 = load i32, i32* %i, align 4, !dbg !5359
  %mul638 = mul i32 %308, 32, !dbg !5359
  %conv639 = zext i32 %mul638 to i64, !dbg !5359
  %sub640 = sub i64 %307, %conv639, !dbg !5359
  br label %cond.end641, !dbg !5359

cond.end641:                                      ; preds = %cond.false637, %cond.true636
  %cond642 = phi i64 [ 32, %cond.true636 ], [ %sub640, %cond.false637 ], !dbg !5359
  %309 = load i64, i64* %bitnum.addr, align 8, !dbg !5360
  %310 = load i32, i32* %bit_offset, align 4, !dbg !5361
  %conv643 = zext i32 %310 to i64, !dbg !5361
  %add644 = add i64 %309, %conv643, !dbg !5362
  %311 = load %struct.rtx_def*, %struct.rtx_def** %target_part, align 8, !dbg !5363
  %312 = load i32, i32* %mode.addr, align 4, !dbg !5364
  %313 = load i32, i32* @word_mode, align 4, !dbg !5365
  %call645 = call %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %304, i64 %cond642, i64 %add644, i32 1, %struct.rtx_def* %311, i32 %312, i32 %313), !dbg !5366
  store %struct.rtx_def* %call645, %struct.rtx_def** %result_part, align 8, !dbg !5357
  %314 = load %struct.rtx_def*, %struct.rtx_def** %target_part, align 8, !dbg !5367
  %tobool646 = icmp ne %struct.rtx_def* %314, null, !dbg !5367
  br i1 %tobool646, label %cond.false648, label %cond.true647, !dbg !5367

cond.true647:                                     ; preds = %cond.end641
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1456, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5367
  br label %cond.end649, !dbg !5367

cond.false648:                                    ; preds = %cond.end641
  br label %cond.end649, !dbg !5367

cond.end649:                                      ; preds = %cond.false648, %cond.true647
  %cond650 = phi i32 [ 0, %cond.true647 ], [ 0, %cond.false648 ], !dbg !5367
  %315 = load %struct.rtx_def*, %struct.rtx_def** %result_part, align 8, !dbg !5368
  %316 = load %struct.rtx_def*, %struct.rtx_def** %target_part, align 8, !dbg !5370
  %cmp651 = icmp ne %struct.rtx_def* %315, %316, !dbg !5371
  br i1 %cmp651, label %if.then653, label %if.end655, !dbg !5372

if.then653:                                       ; preds = %cond.end649
  %317 = load %struct.rtx_def*, %struct.rtx_def** %target_part, align 8, !dbg !5373
  %318 = load %struct.rtx_def*, %struct.rtx_def** %result_part, align 8, !dbg !5374
  %call654 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %317, %struct.rtx_def* %318), !dbg !5375
  br label %if.end655, !dbg !5375

if.end655:                                        ; preds = %if.then653, %cond.end649
  br label %for.inc656, !dbg !5376

for.inc656:                                       ; preds = %if.end655
  %319 = load i32, i32* %i, align 4, !dbg !5377
  %inc = add i32 %319, 1, !dbg !5377
  store i32 %inc, i32* %i, align 4, !dbg !5377
  br label %for.cond625, !dbg !5378, !llvm.loop !5379

for.end657:                                       ; preds = %for.cond625
  %320 = load i32, i32* %unsignedp.addr, align 4, !dbg !5381
  %tobool658 = icmp ne i32 %320, 0, !dbg !5381
  br i1 %tobool658, label %if.then659, label %if.end690, !dbg !5383

if.then659:                                       ; preds = %for.end657
  %321 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5384
  %322 = bitcast %struct.rtx_def* %321 to i32*, !dbg !5384
  %bf.load660 = load i32, i32* %322, align 8, !dbg !5384
  %bf.lshr661 = lshr i32 %bf.load660, 16, !dbg !5384
  %bf.clear662 = and i32 %bf.lshr661, 255, !dbg !5384
  %idxprom663 = zext i32 %bf.clear662 to i64, !dbg !5384
  %arrayidx664 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom663, !dbg !5384
  %323 = load i8, i8* %arrayidx664, align 1, !dbg !5384
  %conv665 = zext i8 %323 to i16, !dbg !5384
  %conv666 = zext i16 %conv665 to i32, !dbg !5384
  %324 = load i32, i32* %nwords, align 4, !dbg !5387
  %mul667 = mul i32 %324, 4, !dbg !5388
  %cmp668 = icmp ugt i32 %conv666, %mul667, !dbg !5389
  br i1 %cmp668, label %if.then670, label %if.end689, !dbg !5390

if.then670:                                       ; preds = %if.then659
  call void @llvm.dbg.declare(metadata i32* %i671, metadata !5391, metadata !DIExpression()), !dbg !5393
  call void @llvm.dbg.declare(metadata i32* %total_words, metadata !5394, metadata !DIExpression()), !dbg !5395
  %325 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5396
  %326 = bitcast %struct.rtx_def* %325 to i32*, !dbg !5396
  %bf.load672 = load i32, i32* %326, align 8, !dbg !5396
  %bf.lshr673 = lshr i32 %bf.load672, 16, !dbg !5396
  %bf.clear674 = and i32 %bf.lshr673, 255, !dbg !5396
  %idxprom675 = zext i32 %bf.clear674 to i64, !dbg !5396
  %arrayidx676 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom675, !dbg !5396
  %327 = load i8, i8* %arrayidx676, align 1, !dbg !5396
  %conv677 = zext i8 %327 to i16, !dbg !5396
  %conv678 = zext i16 %conv677 to i32, !dbg !5396
  %div679 = sdiv i32 %conv678, 4, !dbg !5397
  store i32 %div679, i32* %total_words, align 4, !dbg !5398
  %328 = load i32, i32* %nwords, align 4, !dbg !5399
  store i32 %328, i32* %i671, align 4, !dbg !5401
  br label %for.cond680, !dbg !5402

for.cond680:                                      ; preds = %for.inc686, %if.then670
  %329 = load i32, i32* %i671, align 4, !dbg !5403
  %330 = load i32, i32* %total_words, align 4, !dbg !5405
  %cmp681 = icmp ult i32 %329, %330, !dbg !5406
  br i1 %cmp681, label %for.body683, label %for.end688, !dbg !5407

for.body683:                                      ; preds = %for.cond680
  %331 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5408
  %332 = load i32, i32* %i671, align 4, !dbg !5409
  %call684 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %331, i32 %332, i32 1, i32 0), !dbg !5410
  %333 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5411
  %call685 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call684, %struct.rtx_def* %333), !dbg !5412
  br label %for.inc686, !dbg !5412

for.inc686:                                       ; preds = %for.body683
  %334 = load i32, i32* %i671, align 4, !dbg !5413
  %inc687 = add i32 %334, 1, !dbg !5413
  store i32 %inc687, i32* %i671, align 4, !dbg !5413
  br label %for.cond680, !dbg !5414, !llvm.loop !5415

for.end688:                                       ; preds = %for.cond680
  br label %if.end689, !dbg !5417

if.end689:                                        ; preds = %for.end688, %if.then659
  %335 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5418
  store %struct.rtx_def* %335, %struct.rtx_def** %retval, align 8, !dbg !5419
  br label %return, !dbg !5419

if.end690:                                        ; preds = %for.end657
  %336 = load i32, i32* %mode.addr, align 4, !dbg !5420
  %337 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5421
  %338 = load i32, i32* %mode.addr, align 4, !dbg !5422
  %idxprom691 = zext i32 %338 to i64, !dbg !5422
  %arrayidx692 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom691, !dbg !5422
  %339 = load i8, i8* %arrayidx692, align 1, !dbg !5422
  %conv693 = zext i8 %339 to i16, !dbg !5422
  %conv694 = zext i16 %conv693 to i32, !dbg !5422
  %mul695 = mul nsw i32 %conv694, 8, !dbg !5422
  %conv696 = trunc i32 %mul695 to i16, !dbg !5422
  %conv697 = zext i16 %conv696 to i64, !dbg !5422
  %340 = load i64, i64* %bitsize.addr, align 8, !dbg !5423
  %sub698 = sub i64 %conv697, %340, !dbg !5424
  %call699 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %sub698), !dbg !5425
  %call700 = call %struct.rtx_def* @expand_shift(i32 83, i32 %336, %struct.rtx_def* %337, %union.tree_node* %call699, %struct.rtx_def* null, i32 0), !dbg !5426
  store %struct.rtx_def* %call700, %struct.rtx_def** %target.addr, align 8, !dbg !5427
  %341 = load i32, i32* %mode.addr, align 4, !dbg !5428
  %342 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5429
  %343 = load i32, i32* %mode.addr, align 4, !dbg !5430
  %idxprom701 = zext i32 %343 to i64, !dbg !5430
  %arrayidx702 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom701, !dbg !5430
  %344 = load i8, i8* %arrayidx702, align 1, !dbg !5430
  %conv703 = zext i8 %344 to i16, !dbg !5430
  %conv704 = zext i16 %conv703 to i32, !dbg !5430
  %mul705 = mul nsw i32 %conv704, 8, !dbg !5430
  %conv706 = trunc i32 %mul705 to i16, !dbg !5430
  %conv707 = zext i16 %conv706 to i64, !dbg !5430
  %345 = load i64, i64* %bitsize.addr, align 8, !dbg !5431
  %sub708 = sub i64 %conv707, %345, !dbg !5432
  %call709 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %sub708), !dbg !5433
  %call710 = call %struct.rtx_def* @expand_shift(i32 84, i32 %341, %struct.rtx_def* %342, %union.tree_node* %call709, %struct.rtx_def* null, i32 0), !dbg !5434
  store %struct.rtx_def* %call710, %struct.rtx_def** %retval, align 8, !dbg !5435
  br label %return, !dbg !5435

if.end711:                                        ; preds = %no_subreg_mode_swap
  %346 = load i32, i32* %tmode.addr, align 4, !dbg !5436
  %call712 = call i32 @int_mode_for_mode(i32 %346), !dbg !5437
  store i32 %call712, i32* %int_mode, align 4, !dbg !5438
  %347 = load i32, i32* %int_mode, align 4, !dbg !5439
  %cmp713 = icmp eq i32 %347, 1, !dbg !5441
  br i1 %cmp713, label %if.then715, label %if.end717, !dbg !5442

if.then715:                                       ; preds = %if.end711
  %348 = load i32, i32* %mode.addr, align 4, !dbg !5443
  %call716 = call i32 @int_mode_for_mode(i32 %348), !dbg !5444
  store i32 %call716, i32* %int_mode, align 4, !dbg !5445
  br label %if.end717, !dbg !5446

if.end717:                                        ; preds = %if.then715, %if.end711
  %349 = load i32, i32* %int_mode, align 4, !dbg !5447
  %cmp718 = icmp ne i32 %349, 1, !dbg !5447
  br i1 %cmp718, label %cond.false721, label %cond.true720, !dbg !5447

cond.true720:                                     ; preds = %if.end717
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1503, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5447
  br label %cond.end722, !dbg !5447

cond.false721:                                    ; preds = %if.end717
  br label %cond.end722, !dbg !5447

cond.end722:                                      ; preds = %cond.false721, %cond.true720
  %cond723 = phi i32 [ 0, %cond.true720 ], [ 0, %cond.false721 ], !dbg !5447
  %350 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5448
  %351 = bitcast %struct.rtx_def* %350 to i32*, !dbg !5448
  %bf.load724 = load i32, i32* %351, align 8, !dbg !5448
  %bf.clear725 = and i32 %bf.load724, 65535, !dbg !5448
  %cmp726 = icmp eq i32 %bf.clear725, 43, !dbg !5448
  br i1 %cmp726, label %if.end754, label %if.then728, !dbg !5450

if.then728:                                       ; preds = %cond.end722
  %352 = load i64, i64* %offset, align 8, !dbg !5451
  %cmp729 = icmp ne i64 %352, 0, !dbg !5454
  br i1 %cmp729, label %if.then741, label %lor.lhs.false731, !dbg !5455

lor.lhs.false731:                                 ; preds = %if.then728
  %353 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5456
  %354 = bitcast %struct.rtx_def* %353 to i32*, !dbg !5456
  %bf.load732 = load i32, i32* %354, align 8, !dbg !5456
  %bf.lshr733 = lshr i32 %bf.load732, 16, !dbg !5456
  %bf.clear734 = and i32 %bf.lshr733, 255, !dbg !5456
  %idxprom735 = zext i32 %bf.clear734 to i64, !dbg !5456
  %arrayidx736 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom735, !dbg !5456
  %355 = load i8, i8* %arrayidx736, align 1, !dbg !5456
  %conv737 = zext i8 %355 to i16, !dbg !5456
  %conv738 = zext i16 %conv737 to i32, !dbg !5456
  %cmp739 = icmp sgt i32 %conv738, 4, !dbg !5457
  br i1 %cmp739, label %if.then741, label %if.end753, !dbg !5458

if.then741:                                       ; preds = %lor.lhs.false731, %if.then728
  %356 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5459
  %357 = bitcast %struct.rtx_def* %356 to i32*, !dbg !5459
  %bf.load742 = load i32, i32* %357, align 8, !dbg !5459
  %bf.clear743 = and i32 %bf.load742, 65535, !dbg !5459
  %cmp744 = icmp eq i32 %bf.clear743, 37, !dbg !5459
  br i1 %cmp744, label %if.end748, label %if.then746, !dbg !5462

if.then746:                                       ; preds = %if.then741
  %358 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5463
  %call747 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %358), !dbg !5464
  store %struct.rtx_def* %call747, %struct.rtx_def** %op0, align 8, !dbg !5465
  br label %if.end748, !dbg !5466

if.end748:                                        ; preds = %if.then746, %if.then741
  %call749 = call i32 @mode_for_size(i32 32, i32 2, i32 0), !dbg !5467
  %359 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5468
  %360 = load i64, i64* %offset, align 8, !dbg !5469
  %mul750 = mul i64 %360, 4, !dbg !5470
  %conv751 = trunc i64 %mul750 to i32, !dbg !5471
  %call752 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %call749, %struct.rtx_def* %359, i32 %conv751), !dbg !5472
  store %struct.rtx_def* %call752, %struct.rtx_def** %op0, align 8, !dbg !5473
  br label %if.end753, !dbg !5474

if.end753:                                        ; preds = %if.end748, %lor.lhs.false731
  store i64 0, i64* %offset, align 8, !dbg !5475
  br label %if.end754, !dbg !5476

if.end754:                                        ; preds = %if.end753, %cond.end722
  %361 = load i32, i32* %unsignedp.addr, align 4, !dbg !5477
  %tobool755 = icmp ne i32 %361, 0, !dbg !5477
  %362 = zext i1 %tobool755 to i64, !dbg !5477
  %cond756 = select i1 %tobool755, i32 2, i32 1, !dbg !5477
  %call757 = call i32 @mode_for_extraction(i32 %cond756, i32 0), !dbg !5478
  store i32 %call757, i32* %ext_mode, align 4, !dbg !5479
  %363 = load i32, i32* %unsignedp.addr, align 4, !dbg !5480
  %tobool758 = icmp ne i32 %363, 0, !dbg !5480
  %364 = zext i1 %tobool758 to i64, !dbg !5480
  %cond759 = select i1 %tobool758, i32 2180, i32 2179, !dbg !5480
  store i32 %cond759, i32* %icode, align 4, !dbg !5481
  %365 = load i32, i32* %ext_mode, align 4, !dbg !5482
  %cmp760 = icmp ne i32 %365, 87, !dbg !5484
  br i1 %cmp760, label %land.lhs.true762, label %if.end913, !dbg !5485

land.lhs.true762:                                 ; preds = %if.end754
  %366 = load i64, i64* %bitsize.addr, align 8, !dbg !5486
  %cmp763 = icmp ugt i64 %366, 0, !dbg !5487
  br i1 %cmp763, label %land.lhs.true765, label %if.end913, !dbg !5488

land.lhs.true765:                                 ; preds = %land.lhs.true762
  %367 = load i32, i32* %ext_mode, align 4, !dbg !5489
  %idxprom766 = zext i32 %367 to i64, !dbg !5489
  %arrayidx767 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom766, !dbg !5489
  %368 = load i8, i8* %arrayidx767, align 1, !dbg !5489
  %conv768 = zext i8 %368 to i16, !dbg !5489
  %conv769 = zext i16 %conv768 to i32, !dbg !5489
  %mul770 = mul nsw i32 %conv769, 8, !dbg !5489
  %conv771 = trunc i32 %mul770 to i16, !dbg !5489
  %conv772 = zext i16 %conv771 to i64, !dbg !5489
  %369 = load i64, i64* %bitsize.addr, align 8, !dbg !5490
  %cmp773 = icmp uge i64 %conv772, %369, !dbg !5491
  br i1 %cmp773, label %land.lhs.true775, label %if.end913, !dbg !5492

land.lhs.true775:                                 ; preds = %land.lhs.true765
  %370 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5493
  %371 = bitcast %struct.rtx_def* %370 to i32*, !dbg !5493
  %bf.load776 = load i32, i32* %371, align 8, !dbg !5493
  %bf.clear777 = and i32 %bf.load776, 65535, !dbg !5493
  %cmp778 = icmp eq i32 %bf.clear777, 39, !dbg !5494
  br i1 %cmp778, label %land.lhs.true780, label %land.lhs.true786, !dbg !5495

land.lhs.true780:                                 ; preds = %land.lhs.true775
  %372 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5496
  %373 = bitcast %struct.rtx_def* %372 to i32*, !dbg !5496
  %bf.load781 = load i32, i32* %373, align 8, !dbg !5496
  %bf.lshr782 = lshr i32 %bf.load781, 16, !dbg !5496
  %bf.clear783 = and i32 %bf.lshr782, 255, !dbg !5496
  %374 = load i32, i32* %ext_mode, align 4, !dbg !5497
  %cmp784 = icmp ne i32 %bf.clear783, %374, !dbg !5498
  br i1 %cmp784, label %if.end913, label %land.lhs.true786, !dbg !5499

land.lhs.true786:                                 ; preds = %land.lhs.true780, %land.lhs.true775
  %375 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5500
  %376 = bitcast %struct.rtx_def* %375 to i32*, !dbg !5500
  %bf.load787 = load i32, i32* %376, align 8, !dbg !5500
  %bf.clear788 = and i32 %bf.load787, 65535, !dbg !5500
  %cmp789 = icmp eq i32 %bf.clear788, 37, !dbg !5500
  br i1 %cmp789, label %land.lhs.true796, label %lor.lhs.false791, !dbg !5501

lor.lhs.false791:                                 ; preds = %land.lhs.true786
  %377 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5502
  %378 = bitcast %struct.rtx_def* %377 to i32*, !dbg !5502
  %bf.load792 = load i32, i32* %378, align 8, !dbg !5502
  %bf.clear793 = and i32 %bf.load792, 65535, !dbg !5502
  %cmp794 = icmp eq i32 %bf.clear793, 39, !dbg !5503
  br i1 %cmp794, label %land.lhs.true796, label %land.lhs.true807, !dbg !5504

land.lhs.true796:                                 ; preds = %lor.lhs.false791, %land.lhs.true786
  %379 = load i64, i64* %bitsize.addr, align 8, !dbg !5505
  %380 = load i64, i64* %bitpos, align 8, !dbg !5506
  %add797 = add i64 %379, %380, !dbg !5507
  %381 = load i32, i32* %ext_mode, align 4, !dbg !5508
  %idxprom798 = zext i32 %381 to i64, !dbg !5508
  %arrayidx799 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom798, !dbg !5508
  %382 = load i8, i8* %arrayidx799, align 1, !dbg !5508
  %conv800 = zext i8 %382 to i16, !dbg !5508
  %conv801 = zext i16 %conv800 to i32, !dbg !5508
  %mul802 = mul nsw i32 %conv801, 8, !dbg !5508
  %conv803 = trunc i32 %mul802 to i16, !dbg !5508
  %conv804 = zext i16 %conv803 to i64, !dbg !5508
  %cmp805 = icmp ugt i64 %add797, %conv804, !dbg !5509
  br i1 %cmp805, label %if.end913, label %land.lhs.true807, !dbg !5510

land.lhs.true807:                                 ; preds = %land.lhs.true796, %lor.lhs.false791
  %383 = load i32, i32* %icode, align 4, !dbg !5511
  %384 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5512
  %385 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5513
  %386 = bitcast %struct.rtx_def* %385 to i32*, !dbg !5513
  %bf.load808 = load i32, i32* %386, align 8, !dbg !5513
  %bf.lshr809 = lshr i32 %bf.load808, 16, !dbg !5513
  %bf.clear810 = and i32 %bf.lshr809, 255, !dbg !5513
  %call811 = call zeroext i8 @check_predicate_volatile_ok(i32 %383, i32 1, %struct.rtx_def* %384, i32 %bf.clear810), !dbg !5514
  %conv812 = zext i8 %call811 to i32, !dbg !5514
  %tobool813 = icmp ne i32 %conv812, 0, !dbg !5514
  br i1 %tobool813, label %if.then814, label %if.end913, !dbg !5515

if.then814:                                       ; preds = %land.lhs.true807
  call void @llvm.dbg.declare(metadata i64* %xbitpos, metadata !5516, metadata !DIExpression()), !dbg !5518
  %387 = load i64, i64* %bitpos, align 8, !dbg !5519
  store i64 %387, i64* %xbitpos, align 8, !dbg !5518
  call void @llvm.dbg.declare(metadata i64* %xoffset, metadata !5520, metadata !DIExpression()), !dbg !5521
  %388 = load i64, i64* %offset, align 8, !dbg !5522
  store i64 %388, i64* %xoffset, align 8, !dbg !5521
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %bitsize_rtx, metadata !5523, metadata !DIExpression()), !dbg !5524
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %bitpos_rtx, metadata !5525, metadata !DIExpression()), !dbg !5526
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !5527, metadata !DIExpression()), !dbg !5528
  %call815 = call %struct.rtx_def* @get_last_insn(), !dbg !5529
  store %struct.rtx_def* %call815, %struct.rtx_def** %last, align 8, !dbg !5528
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !5530, metadata !DIExpression()), !dbg !5531
  %389 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5532
  store %struct.rtx_def* %389, %struct.rtx_def** %xop0, align 8, !dbg !5531
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xtarget, metadata !5533, metadata !DIExpression()), !dbg !5534
  %390 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5535
  store %struct.rtx_def* %390, %struct.rtx_def** %xtarget, align 8, !dbg !5534
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xspec_target, metadata !5536, metadata !DIExpression()), !dbg !5537
  %391 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5538
  store %struct.rtx_def* %391, %struct.rtx_def** %xspec_target, align 8, !dbg !5537
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xspec_target_subreg, metadata !5539, metadata !DIExpression()), !dbg !5540
  store %struct.rtx_def* null, %struct.rtx_def** %xspec_target_subreg, align 8, !dbg !5540
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat816, metadata !5541, metadata !DIExpression()), !dbg !5542
  %392 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !5543
  %393 = bitcast %struct.rtx_def* %392 to i32*, !dbg !5543
  %bf.load817 = load i32, i32* %393, align 8, !dbg !5543
  %bf.clear818 = and i32 %bf.load817, 65535, !dbg !5543
  %cmp819 = icmp eq i32 %bf.clear818, 37, !dbg !5543
  br i1 %cmp819, label %land.lhs.true821, label %if.end829, !dbg !5545

land.lhs.true821:                                 ; preds = %if.then814
  %394 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !5546
  %395 = bitcast %struct.rtx_def* %394 to i32*, !dbg !5546
  %bf.load822 = load i32, i32* %395, align 8, !dbg !5546
  %bf.lshr823 = lshr i32 %bf.load822, 16, !dbg !5546
  %bf.clear824 = and i32 %bf.lshr823, 255, !dbg !5546
  %396 = load i32, i32* %ext_mode, align 4, !dbg !5547
  %cmp825 = icmp ne i32 %bf.clear824, %396, !dbg !5548
  br i1 %cmp825, label %if.then827, label %if.end829, !dbg !5549

if.then827:                                       ; preds = %land.lhs.true821
  %397 = load i32, i32* %ext_mode, align 4, !dbg !5550
  %398 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !5551
  %call828 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %397, %struct.rtx_def* %398), !dbg !5552
  store %struct.rtx_def* %call828, %struct.rtx_def** %xop0, align 8, !dbg !5553
  br label %if.end829, !dbg !5554

if.end829:                                        ; preds = %if.then827, %land.lhs.true821, %if.then814
  %399 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !5555
  %400 = bitcast %struct.rtx_def* %399 to i32*, !dbg !5555
  %bf.load830 = load i32, i32* %400, align 8, !dbg !5555
  %bf.clear831 = and i32 %bf.load830, 65535, !dbg !5555
  %cmp832 = icmp eq i32 %bf.clear831, 43, !dbg !5555
  br i1 %cmp832, label %if.then834, label %if.end836, !dbg !5557

if.then834:                                       ; preds = %if.end829
  %401 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !5558
  %402 = load i32, i32* @byte_mode, align 4, !dbg !5558
  %403 = load i64, i64* %xoffset, align 8, !dbg !5558
  %call835 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %401, i32 %402, i64 %403, i32 1, i32 1), !dbg !5558
  store %struct.rtx_def* %call835, %struct.rtx_def** %xop0, align 8, !dbg !5559
  br label %if.end836, !dbg !5560

if.end836:                                        ; preds = %if.then834, %if.end829
  %404 = load i32, i32* %ext_mode, align 4, !dbg !5561
  %idxprom837 = zext i32 %404 to i64, !dbg !5561
  %arrayidx838 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom837, !dbg !5561
  %405 = load i8, i8* %arrayidx838, align 1, !dbg !5561
  %conv839 = zext i8 %405 to i16, !dbg !5561
  %conv840 = zext i16 %conv839 to i32, !dbg !5561
  %mul841 = mul nsw i32 %conv840, 8, !dbg !5561
  %conv842 = trunc i32 %mul841 to i16, !dbg !5561
  %conv843 = zext i16 %conv842 to i32, !dbg !5561
  store i32 %conv843, i32* %unit, align 4, !dbg !5562
  %406 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5563
  %cmp844 = icmp eq %struct.rtx_def* %406, null, !dbg !5565
  br i1 %cmp844, label %if.then846, label %if.end848, !dbg !5566

if.then846:                                       ; preds = %if.end836
  %407 = load i32, i32* %tmode.addr, align 4, !dbg !5567
  %call847 = call %struct.rtx_def* @gen_reg_rtx(i32 %407), !dbg !5568
  store %struct.rtx_def* %call847, %struct.rtx_def** %xspec_target, align 8, !dbg !5569
  store %struct.rtx_def* %call847, %struct.rtx_def** %xtarget, align 8, !dbg !5570
  br label %if.end848, !dbg !5571

if.end848:                                        ; preds = %if.then846, %if.end836
  %408 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5572
  %409 = bitcast %struct.rtx_def* %408 to i32*, !dbg !5572
  %bf.load849 = load i32, i32* %409, align 8, !dbg !5572
  %bf.lshr850 = lshr i32 %bf.load849, 16, !dbg !5572
  %bf.clear851 = and i32 %bf.lshr850, 255, !dbg !5572
  %410 = load i32, i32* %ext_mode, align 4, !dbg !5574
  %cmp852 = icmp ne i32 %bf.clear851, %410, !dbg !5575
  br i1 %cmp852, label %if.then854, label %if.end879, !dbg !5576

if.then854:                                       ; preds = %if.end848
  %411 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5577
  %412 = bitcast %struct.rtx_def* %411 to i32*, !dbg !5577
  %bf.load855 = load i32, i32* %412, align 8, !dbg !5577
  %bf.clear856 = and i32 %bf.load855, 65535, !dbg !5577
  %cmp857 = icmp eq i32 %bf.clear856, 37, !dbg !5577
  br i1 %cmp857, label %if.then859, label %if.else876, !dbg !5580

if.then859:                                       ; preds = %if.then854
  %413 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !5581
  %414 = load i32, i32* %ext_mode, align 4, !dbg !5583
  %415 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5584
  %call860 = call %struct.rtx_def* %413(i32 %414, %struct.rtx_def* %415), !dbg !5581
  store %struct.rtx_def* %call860, %struct.rtx_def** %xtarget, align 8, !dbg !5585
  %416 = load i32, i32* %ext_mode, align 4, !dbg !5586
  %idxprom861 = zext i32 %416 to i64, !dbg !5586
  %arrayidx862 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom861, !dbg !5586
  %417 = load i8, i8* %arrayidx862, align 1, !dbg !5586
  %conv863 = zext i8 %417 to i16, !dbg !5586
  %conv864 = zext i16 %conv863 to i32, !dbg !5586
  %418 = load %struct.rtx_def*, %struct.rtx_def** %xspec_target, align 8, !dbg !5588
  %419 = bitcast %struct.rtx_def* %418 to i32*, !dbg !5588
  %bf.load865 = load i32, i32* %419, align 8, !dbg !5588
  %bf.lshr866 = lshr i32 %bf.load865, 16, !dbg !5588
  %bf.clear867 = and i32 %bf.lshr866, 255, !dbg !5588
  %idxprom868 = zext i32 %bf.clear867 to i64, !dbg !5588
  %arrayidx869 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom868, !dbg !5588
  %420 = load i8, i8* %arrayidx869, align 1, !dbg !5588
  %conv870 = zext i8 %420 to i16, !dbg !5588
  %conv871 = zext i16 %conv870 to i32, !dbg !5588
  %cmp872 = icmp sgt i32 %conv864, %conv871, !dbg !5589
  br i1 %cmp872, label %if.then874, label %if.end875, !dbg !5590

if.then874:                                       ; preds = %if.then859
  %421 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5591
  store %struct.rtx_def* %421, %struct.rtx_def** %xspec_target_subreg, align 8, !dbg !5592
  br label %if.end875, !dbg !5593

if.end875:                                        ; preds = %if.then874, %if.then859
  br label %if.end878, !dbg !5594

if.else876:                                       ; preds = %if.then854
  %422 = load i32, i32* %ext_mode, align 4, !dbg !5595
  %call877 = call %struct.rtx_def* @gen_reg_rtx(i32 %422), !dbg !5596
  store %struct.rtx_def* %call877, %struct.rtx_def** %xtarget, align 8, !dbg !5597
  br label %if.end878

if.end878:                                        ; preds = %if.else876, %if.end875
  br label %if.end879, !dbg !5598

if.end879:                                        ; preds = %if.end878, %if.end848
  %423 = load i32, i32* %icode, align 4, !dbg !5599
  %idxprom880 = sext i32 %423 to i64, !dbg !5601
  %arrayidx881 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom880, !dbg !5601
  %operand882 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx881, i32 0, i32 3, !dbg !5602
  %424 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand882, align 8, !dbg !5602
  %arrayidx883 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %424, i64 0, !dbg !5601
  %predicate884 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx883, i32 0, i32 0, !dbg !5603
  %425 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate884, align 8, !dbg !5603
  %426 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5604
  %427 = load i32, i32* %ext_mode, align 4, !dbg !5605
  %call885 = call i32 %425(%struct.rtx_def* %426, i32 %427), !dbg !5601
  %tobool886 = icmp ne i32 %call885, 0, !dbg !5601
  br i1 %tobool886, label %if.end889, label %if.then887, !dbg !5606

if.then887:                                       ; preds = %if.end879
  %428 = load i32, i32* %ext_mode, align 4, !dbg !5607
  %call888 = call %struct.rtx_def* @gen_reg_rtx(i32 %428), !dbg !5608
  store %struct.rtx_def* %call888, %struct.rtx_def** %xtarget, align 8, !dbg !5609
  br label %if.end889, !dbg !5610

if.end889:                                        ; preds = %if.then887, %if.end879
  %429 = load i64, i64* %bitsize.addr, align 8, !dbg !5611
  %call890 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %429), !dbg !5611
  store %struct.rtx_def* %call890, %struct.rtx_def** %bitsize_rtx, align 8, !dbg !5612
  %430 = load i64, i64* %xbitpos, align 8, !dbg !5613
  %call891 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %430), !dbg !5613
  store %struct.rtx_def* %call891, %struct.rtx_def** %bitpos_rtx, align 8, !dbg !5614
  %431 = load i32, i32* %unsignedp.addr, align 4, !dbg !5615
  %tobool892 = icmp ne i32 %431, 0, !dbg !5615
  br i1 %tobool892, label %cond.true893, label %cond.false895, !dbg !5615

cond.true893:                                     ; preds = %if.end889
  %432 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5616
  %433 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !5617
  %434 = load %struct.rtx_def*, %struct.rtx_def** %bitsize_rtx, align 8, !dbg !5618
  %435 = load %struct.rtx_def*, %struct.rtx_def** %bitpos_rtx, align 8, !dbg !5619
  %call894 = call %struct.rtx_def* @gen_extzv(%struct.rtx_def* %432, %struct.rtx_def* %433, %struct.rtx_def* %434, %struct.rtx_def* %435), !dbg !5620
  br label %cond.end897, !dbg !5615

cond.false895:                                    ; preds = %if.end889
  %436 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5621
  %437 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !5622
  %438 = load %struct.rtx_def*, %struct.rtx_def** %bitsize_rtx, align 8, !dbg !5623
  %439 = load %struct.rtx_def*, %struct.rtx_def** %bitpos_rtx, align 8, !dbg !5624
  %call896 = call %struct.rtx_def* @gen_extv(%struct.rtx_def* %436, %struct.rtx_def* %437, %struct.rtx_def* %438, %struct.rtx_def* %439), !dbg !5625
  br label %cond.end897, !dbg !5615

cond.end897:                                      ; preds = %cond.false895, %cond.true893
  %cond898 = phi %struct.rtx_def* [ %call894, %cond.true893 ], [ %call896, %cond.false895 ], !dbg !5615
  store %struct.rtx_def* %cond898, %struct.rtx_def** %pat816, align 8, !dbg !5626
  %440 = load %struct.rtx_def*, %struct.rtx_def** %pat816, align 8, !dbg !5627
  %tobool899 = icmp ne %struct.rtx_def* %440, null, !dbg !5627
  br i1 %tobool899, label %if.then900, label %if.end912, !dbg !5629

if.then900:                                       ; preds = %cond.end897
  %441 = load %struct.rtx_def*, %struct.rtx_def** %pat816, align 8, !dbg !5630
  %call901 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %441), !dbg !5632
  %442 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5633
  %443 = load %struct.rtx_def*, %struct.rtx_def** %xspec_target, align 8, !dbg !5635
  %cmp902 = icmp eq %struct.rtx_def* %442, %443, !dbg !5636
  br i1 %cmp902, label %if.then904, label %if.end905, !dbg !5637

if.then904:                                       ; preds = %if.then900
  %444 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5638
  store %struct.rtx_def* %444, %struct.rtx_def** %retval, align 8, !dbg !5639
  br label %return, !dbg !5639

if.end905:                                        ; preds = %if.then900
  %445 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5640
  %446 = load %struct.rtx_def*, %struct.rtx_def** %xspec_target_subreg, align 8, !dbg !5642
  %cmp906 = icmp eq %struct.rtx_def* %445, %446, !dbg !5643
  br i1 %cmp906, label %if.then908, label %if.end909, !dbg !5644

if.then908:                                       ; preds = %if.end905
  %447 = load %struct.rtx_def*, %struct.rtx_def** %xspec_target, align 8, !dbg !5645
  store %struct.rtx_def* %447, %struct.rtx_def** %retval, align 8, !dbg !5646
  br label %return, !dbg !5646

if.end909:                                        ; preds = %if.end905
  %448 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5647
  %449 = load i32, i32* %mode.addr, align 4, !dbg !5648
  %450 = load i32, i32* %tmode.addr, align 4, !dbg !5649
  %451 = load i32, i32* %unsignedp.addr, align 4, !dbg !5650
  %conv910 = trunc i32 %451 to i8, !dbg !5650
  %call911 = call %struct.rtx_def* @convert_extracted_bit_field(%struct.rtx_def* %448, i32 %449, i32 %450, i8 zeroext %conv910), !dbg !5651
  store %struct.rtx_def* %call911, %struct.rtx_def** %retval, align 8, !dbg !5652
  br label %return, !dbg !5652

if.end912:                                        ; preds = %cond.end897
  %452 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !5653
  call void @delete_insns_since(%struct.rtx_def* %452), !dbg !5654
  br label %if.end913, !dbg !5655

if.end913:                                        ; preds = %if.end912, %land.lhs.true807, %land.lhs.true796, %land.lhs.true780, %land.lhs.true765, %land.lhs.true762, %if.end754
  %453 = load i32, i32* %ext_mode, align 4, !dbg !5656
  %cmp914 = icmp ne i32 %453, 87, !dbg !5658
  br i1 %cmp914, label %land.lhs.true916, label %if.end1015, !dbg !5659

land.lhs.true916:                                 ; preds = %if.end913
  %454 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5660
  %455 = bitcast %struct.rtx_def* %454 to i32*, !dbg !5660
  %bf.load917 = load i32, i32* %455, align 8, !dbg !5660
  %bf.clear918 = and i32 %bf.load917, 65535, !dbg !5660
  %cmp919 = icmp eq i32 %bf.clear918, 43, !dbg !5660
  br i1 %cmp919, label %if.then921, label %if.end1015, !dbg !5661

if.then921:                                       ; preds = %land.lhs.true916
  call void @llvm.dbg.declare(metadata i32* %bestmode, metadata !5662, metadata !DIExpression()), !dbg !5664
  %456 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5665
  %457 = bitcast %struct.rtx_def* %456 to i32*, !dbg !5665
  %bf.load922 = load i32, i32* %457, align 8, !dbg !5665
  %bf.lshr923 = lshr i32 %bf.load922, 16, !dbg !5665
  %bf.clear924 = and i32 %bf.lshr923, 255, !dbg !5665
  %cmp925 = icmp eq i32 %bf.clear924, 1, !dbg !5667
  br i1 %cmp925, label %if.then944, label %lor.lhs.false927, !dbg !5668

lor.lhs.false927:                                 ; preds = %if.then921
  %458 = load i32, i32* %ext_mode, align 4, !dbg !5669
  %cmp928 = icmp ne i32 %458, 87, !dbg !5670
  br i1 %cmp928, label %land.lhs.true930, label %if.else970, !dbg !5671

land.lhs.true930:                                 ; preds = %lor.lhs.false927
  %459 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5672
  %460 = bitcast %struct.rtx_def* %459 to i32*, !dbg !5672
  %bf.load931 = load i32, i32* %460, align 8, !dbg !5672
  %bf.lshr932 = lshr i32 %bf.load931, 16, !dbg !5672
  %bf.clear933 = and i32 %bf.lshr932, 255, !dbg !5672
  %idxprom934 = zext i32 %bf.clear933 to i64, !dbg !5672
  %arrayidx935 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom934, !dbg !5672
  %461 = load i8, i8* %arrayidx935, align 1, !dbg !5672
  %conv936 = zext i8 %461 to i16, !dbg !5672
  %conv937 = zext i16 %conv936 to i32, !dbg !5672
  %462 = load i32, i32* %ext_mode, align 4, !dbg !5673
  %idxprom938 = zext i32 %462 to i64, !dbg !5673
  %arrayidx939 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom938, !dbg !5673
  %463 = load i8, i8* %arrayidx939, align 1, !dbg !5673
  %conv940 = zext i8 %463 to i16, !dbg !5673
  %conv941 = zext i16 %conv940 to i32, !dbg !5673
  %cmp942 = icmp sgt i32 %conv937, %conv941, !dbg !5674
  br i1 %cmp942, label %if.then944, label %if.else970, !dbg !5675

if.then944:                                       ; preds = %land.lhs.true930, %if.then921
  %464 = load i64, i64* %bitsize.addr, align 8, !dbg !5676
  %conv945 = trunc i64 %464 to i32, !dbg !5676
  %465 = load i64, i64* %bitnum.addr, align 8, !dbg !5677
  %conv946 = trunc i64 %465 to i32, !dbg !5677
  %466 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5678
  %u947 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %466, i32 0, i32 1, !dbg !5678
  %fld948 = bitcast %union.u* %u947 to [1 x %union.rtunion_def]*, !dbg !5678
  %arrayidx949 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld948, i64 0, i64 1, !dbg !5678
  %rt_mem = bitcast %union.rtunion_def* %arrayidx949 to %struct.mem_attrs**, !dbg !5678
  %467 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !5678
  %cmp950 = icmp ne %struct.mem_attrs* %467, null, !dbg !5678
  br i1 %cmp950, label %cond.true952, label %cond.false957, !dbg !5678

cond.true952:                                     ; preds = %if.then944
  %468 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5678
  %u953 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %468, i32 0, i32 1, !dbg !5678
  %fld954 = bitcast %union.u* %u953 to [1 x %union.rtunion_def]*, !dbg !5678
  %arrayidx955 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld954, i64 0, i64 1, !dbg !5678
  %rt_mem956 = bitcast %union.rtunion_def* %arrayidx955 to %struct.mem_attrs**, !dbg !5678
  %469 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem956, align 8, !dbg !5678
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %469, i32 0, i32 4, !dbg !5678
  %470 = load i32, i32* %align, align 4, !dbg !5678
  br label %cond.end958, !dbg !5678

cond.false957:                                    ; preds = %if.then944
  br label %cond.end958, !dbg !5678

cond.end958:                                      ; preds = %cond.false957, %cond.true952
  %cond959 = phi i32 [ %470, %cond.true952 ], [ 8, %cond.false957 ], !dbg !5678
  %471 = load i32, i32* %ext_mode, align 4, !dbg !5679
  %cmp960 = icmp eq i32 %471, 87, !dbg !5680
  br i1 %cmp960, label %cond.true962, label %cond.false963, !dbg !5679

cond.true962:                                     ; preds = %cond.end958
  br label %cond.end964, !dbg !5679

cond.false963:                                    ; preds = %cond.end958
  %472 = load i32, i32* %ext_mode, align 4, !dbg !5681
  br label %cond.end964, !dbg !5679

cond.end964:                                      ; preds = %cond.false963, %cond.true962
  %cond965 = phi i32 [ 0, %cond.true962 ], [ %472, %cond.false963 ], !dbg !5679
  %473 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5682
  %474 = bitcast %struct.rtx_def* %473 to i32*, !dbg !5682
  %bf.load966 = load i32, i32* %474, align 8, !dbg !5682
  %bf.lshr967 = lshr i32 %bf.load966, 27, !dbg !5682
  %bf.clear968 = and i32 %bf.lshr967, 1, !dbg !5682
  %call969 = call i32 @get_best_mode(i32 %conv945, i32 %conv946, i32 %cond959, i32 %cond965, i32 %bf.clear968), !dbg !5683
  store i32 %call969, i32* %bestmode, align 4, !dbg !5684
  br label %if.end974, !dbg !5685

if.else970:                                       ; preds = %land.lhs.true930, %lor.lhs.false927
  %475 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5686
  %476 = bitcast %struct.rtx_def* %475 to i32*, !dbg !5686
  %bf.load971 = load i32, i32* %476, align 8, !dbg !5686
  %bf.lshr972 = lshr i32 %bf.load971, 16, !dbg !5686
  %bf.clear973 = and i32 %bf.lshr972, 255, !dbg !5686
  store i32 %bf.clear973, i32* %bestmode, align 4, !dbg !5687
  br label %if.end974

if.end974:                                        ; preds = %if.else970, %cond.end964
  %477 = load i32, i32* %bestmode, align 4, !dbg !5688
  %cmp975 = icmp ne i32 %477, 0, !dbg !5690
  br i1 %cmp975, label %if.then977, label %if.end1014, !dbg !5691

if.then977:                                       ; preds = %if.end974
  call void @llvm.dbg.declare(metadata i64* %xoffset978, metadata !5692, metadata !DIExpression()), !dbg !5694
  call void @llvm.dbg.declare(metadata i64* %xbitpos979, metadata !5695, metadata !DIExpression()), !dbg !5696
  %478 = load i32, i32* %bestmode, align 4, !dbg !5697
  %idxprom980 = zext i32 %478 to i64, !dbg !5697
  %arrayidx981 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom980, !dbg !5697
  %479 = load i8, i8* %arrayidx981, align 1, !dbg !5697
  %conv982 = zext i8 %479 to i16, !dbg !5697
  %conv983 = zext i16 %conv982 to i32, !dbg !5697
  %mul984 = mul nsw i32 %conv983, 8, !dbg !5697
  %conv985 = trunc i32 %mul984 to i16, !dbg !5697
  %conv986 = zext i16 %conv985 to i32, !dbg !5697
  store i32 %conv986, i32* %unit, align 4, !dbg !5698
  %480 = load i64, i64* %bitnum.addr, align 8, !dbg !5699
  %481 = load i32, i32* %unit, align 4, !dbg !5700
  %conv987 = zext i32 %481 to i64, !dbg !5700
  %div988 = udiv i64 %480, %conv987, !dbg !5701
  %482 = load i32, i32* %bestmode, align 4, !dbg !5702
  %idxprom989 = zext i32 %482 to i64, !dbg !5702
  %arrayidx990 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom989, !dbg !5702
  %483 = load i8, i8* %arrayidx990, align 1, !dbg !5702
  %conv991 = zext i8 %483 to i16, !dbg !5702
  %conv992 = zext i16 %conv991 to i64, !dbg !5702
  %mul993 = mul i64 %div988, %conv992, !dbg !5703
  store i64 %mul993, i64* %xoffset978, align 8, !dbg !5704
  %484 = load i64, i64* %bitnum.addr, align 8, !dbg !5705
  %485 = load i32, i32* %unit, align 4, !dbg !5706
  %conv994 = zext i32 %485 to i64, !dbg !5706
  %rem995 = urem i64 %484, %conv994, !dbg !5707
  store i64 %rem995, i64* %xbitpos979, align 8, !dbg !5708
  %486 = load i64, i64* %xoffset978, align 8, !dbg !5709
  %mul996 = mul i64 %486, 8, !dbg !5711
  %487 = load i32, i32* %unit, align 4, !dbg !5712
  %conv997 = zext i32 %487 to i64, !dbg !5712
  %add998 = add i64 %mul996, %conv997, !dbg !5713
  %488 = load i64, i64* %offset, align 8, !dbg !5714
  %mul999 = mul i64 %488, 8, !dbg !5715
  %489 = load i64, i64* %bitsize.addr, align 8, !dbg !5716
  %add1000 = add i64 %mul999, %489, !dbg !5717
  %cmp1001 = icmp uge i64 %add998, %add1000, !dbg !5718
  br i1 %cmp1001, label %if.then1003, label %if.end1013, !dbg !5719

if.then1003:                                      ; preds = %if.then977
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last1004, metadata !5720, metadata !DIExpression()), !dbg !5722
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !5723, metadata !DIExpression()), !dbg !5724
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop01005, metadata !5725, metadata !DIExpression()), !dbg !5726
  %call1006 = call %struct.rtx_def* @get_last_insn(), !dbg !5727
  store %struct.rtx_def* %call1006, %struct.rtx_def** %last1004, align 8, !dbg !5728
  %490 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5729
  %491 = load i32, i32* %bestmode, align 4, !dbg !5729
  %492 = load i64, i64* %xoffset978, align 8, !dbg !5729
  %call1007 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %490, i32 %491, i64 %492, i32 1, i32 1), !dbg !5729
  store %struct.rtx_def* %call1007, %struct.rtx_def** %xop01005, align 8, !dbg !5730
  %493 = load i32, i32* %bestmode, align 4, !dbg !5731
  %494 = load %struct.rtx_def*, %struct.rtx_def** %xop01005, align 8, !dbg !5732
  %call1008 = call %struct.rtx_def* @force_reg(i32 %493, %struct.rtx_def* %494), !dbg !5733
  store %struct.rtx_def* %call1008, %struct.rtx_def** %xop01005, align 8, !dbg !5734
  %495 = load %struct.rtx_def*, %struct.rtx_def** %xop01005, align 8, !dbg !5735
  %496 = load i64, i64* %bitsize.addr, align 8, !dbg !5736
  %497 = load i64, i64* %xbitpos979, align 8, !dbg !5737
  %498 = load i32, i32* %unsignedp.addr, align 4, !dbg !5738
  %499 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5739
  %500 = load i32, i32* %mode.addr, align 4, !dbg !5740
  %501 = load i32, i32* %tmode.addr, align 4, !dbg !5741
  %call1009 = call %struct.rtx_def* @extract_bit_field_1(%struct.rtx_def* %495, i64 %496, i64 %497, i32 %498, %struct.rtx_def* %499, i32 %500, i32 %501, i8 zeroext 0), !dbg !5742
  store %struct.rtx_def* %call1009, %struct.rtx_def** %result, align 8, !dbg !5743
  %502 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !5744
  %tobool1010 = icmp ne %struct.rtx_def* %502, null, !dbg !5744
  br i1 %tobool1010, label %if.then1011, label %if.end1012, !dbg !5746

if.then1011:                                      ; preds = %if.then1003
  %503 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !5747
  store %struct.rtx_def* %503, %struct.rtx_def** %retval, align 8, !dbg !5748
  br label %return, !dbg !5748

if.end1012:                                       ; preds = %if.then1003
  %504 = load %struct.rtx_def*, %struct.rtx_def** %last1004, align 8, !dbg !5749
  call void @delete_insns_since(%struct.rtx_def* %504), !dbg !5750
  br label %if.end1013, !dbg !5751

if.end1013:                                       ; preds = %if.end1012, %if.then977
  br label %if.end1014, !dbg !5752

if.end1014:                                       ; preds = %if.end1013, %if.end974
  br label %if.end1015, !dbg !5753

if.end1015:                                       ; preds = %if.end1014, %land.lhs.true916, %if.end913
  %505 = load i8, i8* %fallback_p.addr, align 1, !dbg !5754
  %tobool1016 = icmp ne i8 %505, 0, !dbg !5754
  br i1 %tobool1016, label %if.end1018, label %if.then1017, !dbg !5756

if.then1017:                                      ; preds = %if.end1015
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !5757
  br label %return, !dbg !5757

if.end1018:                                       ; preds = %if.end1015
  %506 = load i32, i32* %int_mode, align 4, !dbg !5758
  %507 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !5759
  %508 = load i64, i64* %offset, align 8, !dbg !5760
  %509 = load i64, i64* %bitsize.addr, align 8, !dbg !5761
  %510 = load i64, i64* %bitpos, align 8, !dbg !5762
  %511 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5763
  %512 = load i32, i32* %unsignedp.addr, align 4, !dbg !5764
  %call1019 = call %struct.rtx_def* @extract_fixed_bit_field(i32 %506, %struct.rtx_def* %507, i64 %508, i64 %509, i64 %510, %struct.rtx_def* %511, i32 %512), !dbg !5765
  store %struct.rtx_def* %call1019, %struct.rtx_def** %target.addr, align 8, !dbg !5766
  %513 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5767
  %514 = load i32, i32* %mode.addr, align 4, !dbg !5768
  %515 = load i32, i32* %tmode.addr, align 4, !dbg !5769
  %516 = load i32, i32* %unsignedp.addr, align 4, !dbg !5770
  %conv1020 = trunc i32 %516 to i8, !dbg !5770
  %call1021 = call %struct.rtx_def* @convert_extracted_bit_field(%struct.rtx_def* %513, i32 %514, i32 %515, i8 zeroext %conv1020), !dbg !5771
  store %struct.rtx_def* %call1021, %struct.rtx_def** %retval, align 8, !dbg !5772
  br label %return, !dbg !5772

return:                                           ; preds = %if.end1018, %if.then1017, %if.then1011, %if.end909, %if.then908, %if.then904, %if.end690, %if.end689, %if.end606, %if.then604, %if.end412, %if.then410, %if.then50, %if.then22
  %517 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5773
  ret %struct.rtx_def* %517, !dbg !5773
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @extract_low_bits(i32 %mode, i32 %src_mode, %struct.rtx_def* %src) #0 !dbg !5774 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %src_mode.addr = alloca i32, align 4
  %src.addr = alloca %struct.rtx_def*, align 8
  %int_mode = alloca i32, align 4
  %src_int_mode = alloca i32, align 4
  %byte = alloca i32, align 4
  %ret = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5777, metadata !DIExpression()), !dbg !5778
  store i32 %src_mode, i32* %src_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_mode.addr, metadata !5779, metadata !DIExpression()), !dbg !5780
  store %struct.rtx_def* %src, %struct.rtx_def** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src.addr, metadata !5781, metadata !DIExpression()), !dbg !5782
  call void @llvm.dbg.declare(metadata i32* %int_mode, metadata !5783, metadata !DIExpression()), !dbg !5784
  call void @llvm.dbg.declare(metadata i32* %src_int_mode, metadata !5785, metadata !DIExpression()), !dbg !5786
  %0 = load i32, i32* %mode.addr, align 4, !dbg !5787
  %1 = load i32, i32* %src_mode.addr, align 4, !dbg !5789
  %cmp = icmp eq i32 %0, %1, !dbg !5790
  br i1 %cmp, label %if.then, label %if.end, !dbg !5791

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5792
  store %struct.rtx_def* %2, %struct.rtx_def** %retval, align 8, !dbg !5793
  br label %return, !dbg !5793

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5794
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !5794
  %bf.load = load i32, i32* %4, align 8, !dbg !5794
  %bf.clear = and i32 %bf.load, 65535, !dbg !5794
  %idxprom = sext i32 %bf.clear to i64, !dbg !5794
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !5794
  %5 = load i32, i32* %arrayidx, align 4, !dbg !5794
  %cmp1 = icmp eq i32 %5, 9, !dbg !5794
  br i1 %cmp1, label %if.then2, label %if.end18, !dbg !5796

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %byte, metadata !5797, metadata !DIExpression()), !dbg !5799
  %6 = load i32, i32* %mode.addr, align 4, !dbg !5800
  %7 = load i32, i32* %src_mode.addr, align 4, !dbg !5801
  %call = call i32 @subreg_lowpart_offset(i32 %6, i32 %7), !dbg !5802
  store i32 %call, i32* %byte, align 4, !dbg !5799
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %ret, metadata !5803, metadata !DIExpression()), !dbg !5804
  %8 = load i32, i32* %mode.addr, align 4, !dbg !5805
  %9 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5806
  %10 = load i32, i32* %src_mode.addr, align 4, !dbg !5807
  %11 = load i32, i32* %byte, align 4, !dbg !5808
  %call3 = call %struct.rtx_def* @simplify_subreg(i32 %8, %struct.rtx_def* %9, i32 %10, i32 %11), !dbg !5809
  store %struct.rtx_def* %call3, %struct.rtx_def** %ret, align 8, !dbg !5804
  %12 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8, !dbg !5810
  %tobool = icmp ne %struct.rtx_def* %12, null, !dbg !5810
  br i1 %tobool, label %if.then4, label %if.end5, !dbg !5812

if.then4:                                         ; preds = %if.then2
  %13 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8, !dbg !5813
  store %struct.rtx_def* %13, %struct.rtx_def** %retval, align 8, !dbg !5814
  br label %return, !dbg !5814

if.end5:                                          ; preds = %if.then2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5815
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !5815
  %bf.load6 = load i32, i32* %15, align 8, !dbg !5815
  %bf.lshr = lshr i32 %bf.load6, 16, !dbg !5815
  %bf.clear7 = and i32 %bf.lshr, 255, !dbg !5815
  %cmp8 = icmp eq i32 %bf.clear7, 0, !dbg !5817
  br i1 %cmp8, label %if.then11, label %lor.lhs.false, !dbg !5818

lor.lhs.false:                                    ; preds = %if.end5
  %16 = load i32, i32* %mode.addr, align 4, !dbg !5819
  %17 = load i32, i32* %src_mode.addr, align 4, !dbg !5820
  %18 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5821
  %19 = load i32, i32* %byte, align 4, !dbg !5822
  %call9 = call zeroext i8 @validate_subreg(i32 %16, i32 %17, %struct.rtx_def* %18, i32 %19), !dbg !5823
  %tobool10 = icmp ne i8 %call9, 0, !dbg !5823
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !5824

if.then11:                                        ; preds = %lor.lhs.false, %if.end5
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !5825
  br label %return, !dbg !5825

if.end12:                                         ; preds = %lor.lhs.false
  %20 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5826
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5826
  %bf.load13 = load i32, i32* %21, align 8, !dbg !5826
  %bf.lshr14 = lshr i32 %bf.load13, 16, !dbg !5826
  %bf.clear15 = and i32 %bf.lshr14, 255, !dbg !5826
  %22 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5827
  %call16 = call %struct.rtx_def* @force_reg(i32 %bf.clear15, %struct.rtx_def* %22), !dbg !5828
  store %struct.rtx_def* %call16, %struct.rtx_def** %src.addr, align 8, !dbg !5829
  %23 = load i32, i32* %mode.addr, align 4, !dbg !5830
  %24 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5831
  %25 = load i32, i32* %byte, align 4, !dbg !5832
  %call17 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %23, %struct.rtx_def* %24, i32 %25), !dbg !5833
  store %struct.rtx_def* %call17, %struct.rtx_def** %retval, align 8, !dbg !5834
  br label %return, !dbg !5834

if.end18:                                         ; preds = %if.end
  %26 = load i32, i32* %mode.addr, align 4, !dbg !5835
  %idxprom19 = zext i32 %26 to i64, !dbg !5835
  %arrayidx20 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom19, !dbg !5835
  %27 = load i8, i8* %arrayidx20, align 1, !dbg !5835
  %conv = zext i8 %27 to i32, !dbg !5835
  %cmp21 = icmp eq i32 %conv, 1, !dbg !5837
  br i1 %cmp21, label %if.then29, label %lor.lhs.false23, !dbg !5838

lor.lhs.false23:                                  ; preds = %if.end18
  %28 = load i32, i32* %src_mode.addr, align 4, !dbg !5839
  %idxprom24 = zext i32 %28 to i64, !dbg !5839
  %arrayidx25 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom24, !dbg !5839
  %29 = load i8, i8* %arrayidx25, align 1, !dbg !5839
  %conv26 = zext i8 %29 to i32, !dbg !5839
  %cmp27 = icmp eq i32 %conv26, 1, !dbg !5840
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !5841

if.then29:                                        ; preds = %lor.lhs.false23, %if.end18
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !5842
  br label %return, !dbg !5842

if.end30:                                         ; preds = %lor.lhs.false23
  %30 = load i32, i32* %mode.addr, align 4, !dbg !5843
  %idxprom31 = zext i32 %30 to i64, !dbg !5843
  %arrayidx32 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom31, !dbg !5843
  %31 = load i8, i8* %arrayidx32, align 1, !dbg !5843
  %conv33 = zext i8 %31 to i16, !dbg !5843
  %conv34 = zext i16 %conv33 to i32, !dbg !5843
  %mul = mul nsw i32 %conv34, 8, !dbg !5843
  %conv35 = trunc i32 %mul to i16, !dbg !5843
  %conv36 = zext i16 %conv35 to i32, !dbg !5843
  %32 = load i32, i32* %src_mode.addr, align 4, !dbg !5845
  %idxprom37 = zext i32 %32 to i64, !dbg !5845
  %arrayidx38 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom37, !dbg !5845
  %33 = load i8, i8* %arrayidx38, align 1, !dbg !5845
  %conv39 = zext i8 %33 to i16, !dbg !5845
  %conv40 = zext i16 %conv39 to i32, !dbg !5845
  %mul41 = mul nsw i32 %conv40, 8, !dbg !5845
  %conv42 = trunc i32 %mul41 to i16, !dbg !5845
  %conv43 = zext i16 %conv42 to i32, !dbg !5845
  %cmp44 = icmp eq i32 %conv36, %conv43, !dbg !5846
  br i1 %cmp44, label %land.lhs.true, label %if.end54, !dbg !5847

land.lhs.true:                                    ; preds = %if.end30
  %34 = load i32, i32* %mode.addr, align 4, !dbg !5848
  %35 = load i32, i32* %src_mode.addr, align 4, !dbg !5848
  %call46 = call zeroext i8 @ix86_modes_tieable_p(i32 %34, i32 %35), !dbg !5848
  %conv47 = zext i8 %call46 to i32, !dbg !5848
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !5848
  br i1 %tobool48, label %if.then49, label %if.end54, !dbg !5849

if.then49:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !5850, metadata !DIExpression()), !dbg !5852
  %36 = load i32, i32* %mode.addr, align 4, !dbg !5853
  %37 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5854
  %call50 = call %struct.rtx_def* @gen_lowpart_common(i32 %36, %struct.rtx_def* %37), !dbg !5855
  store %struct.rtx_def* %call50, %struct.rtx_def** %x, align 8, !dbg !5852
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5856
  %tobool51 = icmp ne %struct.rtx_def* %38, null, !dbg !5856
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !5858

if.then52:                                        ; preds = %if.then49
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5859
  store %struct.rtx_def* %39, %struct.rtx_def** %retval, align 8, !dbg !5860
  br label %return, !dbg !5860

if.end53:                                         ; preds = %if.then49
  br label %if.end54, !dbg !5861

if.end54:                                         ; preds = %if.end53, %land.lhs.true, %if.end30
  %40 = load i32, i32* %src_mode.addr, align 4, !dbg !5862
  %call55 = call i32 @int_mode_for_mode(i32 %40), !dbg !5863
  store i32 %call55, i32* %src_int_mode, align 4, !dbg !5864
  %41 = load i32, i32* %mode.addr, align 4, !dbg !5865
  %call56 = call i32 @int_mode_for_mode(i32 %41), !dbg !5866
  store i32 %call56, i32* %int_mode, align 4, !dbg !5867
  %42 = load i32, i32* %src_int_mode, align 4, !dbg !5868
  %cmp57 = icmp eq i32 %42, 1, !dbg !5870
  br i1 %cmp57, label %if.then62, label %lor.lhs.false59, !dbg !5871

lor.lhs.false59:                                  ; preds = %if.end54
  %43 = load i32, i32* %int_mode, align 4, !dbg !5872
  %cmp60 = icmp eq i32 %43, 1, !dbg !5873
  br i1 %cmp60, label %if.then62, label %if.end63, !dbg !5874

if.then62:                                        ; preds = %lor.lhs.false59, %if.end54
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !5875
  br label %return, !dbg !5875

if.end63:                                         ; preds = %lor.lhs.false59
  %44 = load i32, i32* %src_int_mode, align 4, !dbg !5876
  %45 = load i32, i32* %src_mode.addr, align 4, !dbg !5876
  %call64 = call zeroext i8 @ix86_modes_tieable_p(i32 %44, i32 %45), !dbg !5876
  %tobool65 = icmp ne i8 %call64, 0, !dbg !5876
  br i1 %tobool65, label %if.end67, label %if.then66, !dbg !5878

if.then66:                                        ; preds = %if.end63
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !5879
  br label %return, !dbg !5879

if.end67:                                         ; preds = %if.end63
  %46 = load i32, i32* %int_mode, align 4, !dbg !5880
  %47 = load i32, i32* %mode.addr, align 4, !dbg !5880
  %call68 = call zeroext i8 @ix86_modes_tieable_p(i32 %46, i32 %47), !dbg !5880
  %tobool69 = icmp ne i8 %call68, 0, !dbg !5880
  br i1 %tobool69, label %if.end71, label %if.then70, !dbg !5882

if.then70:                                        ; preds = %if.end67
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !5883
  br label %return, !dbg !5883

if.end71:                                         ; preds = %if.end67
  %48 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !5884
  %49 = load i32, i32* %src_int_mode, align 4, !dbg !5885
  %50 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5886
  %call72 = call %struct.rtx_def* %48(i32 %49, %struct.rtx_def* %50), !dbg !5884
  store %struct.rtx_def* %call72, %struct.rtx_def** %src.addr, align 8, !dbg !5887
  %51 = load i32, i32* %int_mode, align 4, !dbg !5888
  %52 = load i32, i32* %src_int_mode, align 4, !dbg !5889
  %53 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5890
  %call73 = call %struct.rtx_def* @convert_modes(i32 %51, i32 %52, %struct.rtx_def* %53, i32 1), !dbg !5891
  store %struct.rtx_def* %call73, %struct.rtx_def** %src.addr, align 8, !dbg !5892
  %54 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !5893
  %55 = load i32, i32* %mode.addr, align 4, !dbg !5894
  %56 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5895
  %call74 = call %struct.rtx_def* %54(i32 %55, %struct.rtx_def* %56), !dbg !5893
  store %struct.rtx_def* %call74, %struct.rtx_def** %src.addr, align 8, !dbg !5896
  %57 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5897
  store %struct.rtx_def* %57, %struct.rtx_def** %retval, align 8, !dbg !5898
  br label %return, !dbg !5898

return:                                           ; preds = %if.end71, %if.then70, %if.then66, %if.then62, %if.then52, %if.then29, %if.end12, %if.then11, %if.then4, %if.then
  %58 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5899
  ret %struct.rtx_def* %58, !dbg !5899
}

declare dso_local i32 @subreg_lowpart_offset(i32, i32) #2

declare dso_local %struct.rtx_def* @simplify_subreg(i32, %struct.rtx_def*, i32, i32) #2

declare dso_local zeroext i8 @validate_subreg(i32, i32, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_SUBREG(i32, %struct.rtx_def*, i32) #2

declare dso_local zeroext i8 @ix86_modes_tieable_p(i32, i32) #2

declare dso_local %struct.rtx_def* @gen_lowpart_common(i32, %struct.rtx_def*) #2

declare dso_local i32 @int_mode_for_mode(i32) #2

declare dso_local %struct.rtx_def* @convert_modes(i32, i32, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_inc(%struct.rtx_def* %target, %struct.rtx_def* %inc) #0 !dbg !5900 {
entry:
  %target.addr = alloca %struct.rtx_def*, align 8
  %inc.addr = alloca %struct.rtx_def*, align 8
  %value = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !5903, metadata !DIExpression()), !dbg !5904
  store %struct.rtx_def* %inc, %struct.rtx_def** %inc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %inc.addr, metadata !5905, metadata !DIExpression()), !dbg !5906
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !5907, metadata !DIExpression()), !dbg !5908
  %0 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5909
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5909
  %bf.load = load i32, i32* %1, align 8, !dbg !5909
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5909
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5909
  %2 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5910
  %3 = load %struct.rtx_def*, %struct.rtx_def** %inc.addr, align 8, !dbg !5911
  %4 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5912
  %call = call %struct.rtx_def* @expand_binop(i32 %bf.clear, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %2, %struct.rtx_def* %3, %struct.rtx_def* %4, i32 0, i32 3), !dbg !5913
  store %struct.rtx_def* %call, %struct.rtx_def** %value, align 8, !dbg !5908
  %5 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !5914
  %6 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5916
  %cmp = icmp ne %struct.rtx_def* %5, %6, !dbg !5917
  br i1 %cmp, label %if.then, label %if.end, !dbg !5918

if.then:                                          ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5919
  %8 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !5920
  %call1 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %7, %struct.rtx_def* %8), !dbg !5921
  br label %if.end, !dbg !5921

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5922
}

declare dso_local %struct.rtx_def* @expand_binop(i32, %struct.optab_d*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_dec(%struct.rtx_def* %target, %struct.rtx_def* %dec) #0 !dbg !5923 {
entry:
  %target.addr = alloca %struct.rtx_def*, align 8
  %dec.addr = alloca %struct.rtx_def*, align 8
  %value = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !5924, metadata !DIExpression()), !dbg !5925
  store %struct.rtx_def* %dec, %struct.rtx_def** %dec.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dec.addr, metadata !5926, metadata !DIExpression()), !dbg !5927
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !5928, metadata !DIExpression()), !dbg !5929
  %0 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5930
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5930
  %bf.load = load i32, i32* %1, align 8, !dbg !5930
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5930
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5930
  %2 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5931
  %3 = load %struct.rtx_def*, %struct.rtx_def** %dec.addr, align 8, !dbg !5932
  %4 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5933
  %call = call %struct.rtx_def* @expand_binop(i32 %bf.clear, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %2, %struct.rtx_def* %3, %struct.rtx_def* %4, i32 0, i32 3), !dbg !5934
  store %struct.rtx_def* %call, %struct.rtx_def** %value, align 8, !dbg !5929
  %5 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !5935
  %6 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5937
  %cmp = icmp ne %struct.rtx_def* %5, %6, !dbg !5938
  br i1 %cmp, label %if.then, label %if.end, !dbg !5939

if.then:                                          ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5940
  %8 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !5941
  %call1 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %7, %struct.rtx_def* %8), !dbg !5942
  br label %if.end, !dbg !5942

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5943
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_shift(i32 %code, i32 %mode, %struct.rtx_def* %shifted, %union.tree_node* %amount, %struct.rtx_def* %target, i32 %unsignedp) #0 !dbg !5944 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %shifted.addr = alloca %struct.rtx_def*, align 8
  %amount.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %op1 = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %left = alloca i32, align 4
  %rotate = alloca i32, align 4
  %lshift_optab = alloca %struct.optab_d*, align 8
  %rshift_arith_optab = alloca %struct.optab_d*, align 8
  %rshift_uns_optab = alloca %struct.optab_d*, align 8
  %lrotate_optab = alloca %struct.optab_d*, align 8
  %rrotate_optab = alloca %struct.optab_d*, align 8
  %op1_mode = alloca i32, align 4
  %attempt = alloca i32, align 4
  %speed = alloca i8, align 1
  %i = alloca i32, align 4
  %methods = alloca i32, align 4
  %subtarget = alloca %struct.rtx_def*, align 8
  %new_amount = alloca %union.tree_node*, align 8
  %other_amount = alloca %union.tree_node*, align 8
  %temp1 = alloca %struct.rtx_def*, align 8
  %type = alloca %union.tree_node*, align 8
  %methods1 = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5947, metadata !DIExpression()), !dbg !5948
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5949, metadata !DIExpression()), !dbg !5950
  store %struct.rtx_def* %shifted, %struct.rtx_def** %shifted.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %shifted.addr, metadata !5951, metadata !DIExpression()), !dbg !5952
  store %union.tree_node* %amount, %union.tree_node** %amount.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %amount.addr, metadata !5953, metadata !DIExpression()), !dbg !5954
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !5955, metadata !DIExpression()), !dbg !5956
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !5957, metadata !DIExpression()), !dbg !5958
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1, metadata !5959, metadata !DIExpression()), !dbg !5960
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !5961, metadata !DIExpression()), !dbg !5962
  store %struct.rtx_def* null, %struct.rtx_def** %temp, align 8, !dbg !5962
  call void @llvm.dbg.declare(metadata i32* %left, metadata !5963, metadata !DIExpression()), !dbg !5964
  %0 = load i32, i32* %code.addr, align 4, !dbg !5965
  %cmp = icmp eq i32 %0, 83, !dbg !5966
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !5967

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %code.addr, align 4, !dbg !5968
  %cmp1 = icmp eq i32 %1, 85, !dbg !5969
  br label %lor.end, !dbg !5967

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32, !dbg !5967
  store i32 %lor.ext, i32* %left, align 4, !dbg !5964
  call void @llvm.dbg.declare(metadata i32* %rotate, metadata !5970, metadata !DIExpression()), !dbg !5971
  %3 = load i32, i32* %code.addr, align 4, !dbg !5972
  %cmp2 = icmp eq i32 %3, 85, !dbg !5973
  br i1 %cmp2, label %lor.end5, label %lor.rhs3, !dbg !5974

lor.rhs3:                                         ; preds = %lor.end
  %4 = load i32, i32* %code.addr, align 4, !dbg !5975
  %cmp4 = icmp eq i32 %4, 86, !dbg !5976
  br label %lor.end5, !dbg !5974

lor.end5:                                         ; preds = %lor.rhs3, %lor.end
  %5 = phi i1 [ true, %lor.end ], [ %cmp4, %lor.rhs3 ]
  %lor.ext6 = zext i1 %5 to i32, !dbg !5974
  store i32 %lor.ext6, i32* %rotate, align 4, !dbg !5971
  call void @llvm.dbg.declare(metadata %struct.optab_d** %lshift_optab, metadata !5977, metadata !DIExpression()), !dbg !5995
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), %struct.optab_d** %lshift_optab, align 8, !dbg !5995
  call void @llvm.dbg.declare(metadata %struct.optab_d** %rshift_arith_optab, metadata !5996, metadata !DIExpression()), !dbg !5997
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46), %struct.optab_d** %rshift_arith_optab, align 8, !dbg !5997
  call void @llvm.dbg.declare(metadata %struct.optab_d** %rshift_uns_optab, metadata !5998, metadata !DIExpression()), !dbg !5999
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), %struct.optab_d** %rshift_uns_optab, align 8, !dbg !5999
  call void @llvm.dbg.declare(metadata %struct.optab_d** %lrotate_optab, metadata !6000, metadata !DIExpression()), !dbg !6001
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 47), %struct.optab_d** %lrotate_optab, align 8, !dbg !6001
  call void @llvm.dbg.declare(metadata %struct.optab_d** %rrotate_optab, metadata !6002, metadata !DIExpression()), !dbg !6003
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 48), %struct.optab_d** %rrotate_optab, align 8, !dbg !6003
  call void @llvm.dbg.declare(metadata i32* %op1_mode, metadata !6004, metadata !DIExpression()), !dbg !6005
  call void @llvm.dbg.declare(metadata i32* %attempt, metadata !6006, metadata !DIExpression()), !dbg !6007
  call void @llvm.dbg.declare(metadata i8* %speed, metadata !6008, metadata !DIExpression()), !dbg !6009
  %call = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !6010
  store i8 %call, i8* %speed, align 1, !dbg !6009
  %6 = load %union.tree_node*, %union.tree_node** %amount.addr, align 8, !dbg !6011
  %call7 = call %struct.rtx_def* @expand_normal(%union.tree_node* %6), !dbg !6012
  store %struct.rtx_def* %call7, %struct.rtx_def** %op1, align 8, !dbg !6013
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6014
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !6014
  %bf.load = load i32, i32* %8, align 8, !dbg !6014
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6014
  %bf.clear = and i32 %bf.lshr, 255, !dbg !6014
  store i32 %bf.clear, i32* %op1_mode, align 4, !dbg !6015
  %9 = load i32, i32* %mode.addr, align 4, !dbg !6016
  %idxprom = zext i32 %9 to i64, !dbg !6016
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !6016
  %10 = load i8, i8* %arrayidx, align 1, !dbg !6016
  %conv = zext i8 %10 to i32, !dbg !6016
  %cmp8 = icmp eq i32 %conv, 12, !dbg !6016
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false, !dbg !6016

lor.lhs.false:                                    ; preds = %lor.end5
  %11 = load i32, i32* %mode.addr, align 4, !dbg !6016
  %idxprom10 = zext i32 %11 to i64, !dbg !6016
  %arrayidx11 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom10, !dbg !6016
  %12 = load i8, i8* %arrayidx11, align 1, !dbg !6016
  %conv12 = zext i8 %12 to i32, !dbg !6016
  %cmp13 = icmp eq i32 %conv12, 17, !dbg !6016
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false15, !dbg !6016

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %13 = load i32, i32* %mode.addr, align 4, !dbg !6016
  %idxprom16 = zext i32 %13 to i64, !dbg !6016
  %arrayidx17 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom16, !dbg !6016
  %14 = load i8, i8* %arrayidx17, align 1, !dbg !6016
  %conv18 = zext i8 %14 to i32, !dbg !6016
  %cmp19 = icmp eq i32 %conv18, 13, !dbg !6016
  br i1 %cmp19, label %land.lhs.true, label %lor.lhs.false21, !dbg !6016

lor.lhs.false21:                                  ; preds = %lor.lhs.false15
  %15 = load i32, i32* %mode.addr, align 4, !dbg !6016
  %idxprom22 = zext i32 %15 to i64, !dbg !6016
  %arrayidx23 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom22, !dbg !6016
  %16 = load i8, i8* %arrayidx23, align 1, !dbg !6016
  %conv24 = zext i8 %16 to i32, !dbg !6016
  %cmp25 = icmp eq i32 %conv24, 14, !dbg !6016
  br i1 %cmp25, label %land.lhs.true, label %lor.lhs.false27, !dbg !6016

lor.lhs.false27:                                  ; preds = %lor.lhs.false21
  %17 = load i32, i32* %mode.addr, align 4, !dbg !6016
  %idxprom28 = zext i32 %17 to i64, !dbg !6016
  %arrayidx29 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom28, !dbg !6016
  %18 = load i8, i8* %arrayidx29, align 1, !dbg !6016
  %conv30 = zext i8 %18 to i32, !dbg !6016
  %cmp31 = icmp eq i32 %conv30, 15, !dbg !6016
  br i1 %cmp31, label %land.lhs.true, label %lor.lhs.false33, !dbg !6016

lor.lhs.false33:                                  ; preds = %lor.lhs.false27
  %19 = load i32, i32* %mode.addr, align 4, !dbg !6016
  %idxprom34 = zext i32 %19 to i64, !dbg !6016
  %arrayidx35 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom34, !dbg !6016
  %20 = load i8, i8* %arrayidx35, align 1, !dbg !6016
  %conv36 = zext i8 %20 to i32, !dbg !6016
  %cmp37 = icmp eq i32 %conv36, 16, !dbg !6016
  br i1 %cmp37, label %land.lhs.true, label %if.end, !dbg !6018

land.lhs.true:                                    ; preds = %lor.lhs.false33, %lor.lhs.false27, %lor.lhs.false21, %lor.lhs.false15, %lor.lhs.false, %lor.end5
  %21 = load i32, i32* %op1_mode, align 4, !dbg !6019
  %idxprom39 = zext i32 %21 to i64, !dbg !6019
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom39, !dbg !6019
  %22 = load i8, i8* %arrayidx40, align 1, !dbg !6019
  %conv41 = zext i8 %22 to i32, !dbg !6019
  %cmp42 = icmp eq i32 %conv41, 12, !dbg !6019
  br i1 %cmp42, label %if.then, label %lor.lhs.false44, !dbg !6019

lor.lhs.false44:                                  ; preds = %land.lhs.true
  %23 = load i32, i32* %op1_mode, align 4, !dbg !6019
  %idxprom45 = zext i32 %23 to i64, !dbg !6019
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom45, !dbg !6019
  %24 = load i8, i8* %arrayidx46, align 1, !dbg !6019
  %conv47 = zext i8 %24 to i32, !dbg !6019
  %cmp48 = icmp eq i32 %conv47, 17, !dbg !6019
  br i1 %cmp48, label %if.then, label %lor.lhs.false50, !dbg !6019

lor.lhs.false50:                                  ; preds = %lor.lhs.false44
  %25 = load i32, i32* %op1_mode, align 4, !dbg !6019
  %idxprom51 = zext i32 %25 to i64, !dbg !6019
  %arrayidx52 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom51, !dbg !6019
  %26 = load i8, i8* %arrayidx52, align 1, !dbg !6019
  %conv53 = zext i8 %26 to i32, !dbg !6019
  %cmp54 = icmp eq i32 %conv53, 13, !dbg !6019
  br i1 %cmp54, label %if.then, label %lor.lhs.false56, !dbg !6019

lor.lhs.false56:                                  ; preds = %lor.lhs.false50
  %27 = load i32, i32* %op1_mode, align 4, !dbg !6019
  %idxprom57 = zext i32 %27 to i64, !dbg !6019
  %arrayidx58 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom57, !dbg !6019
  %28 = load i8, i8* %arrayidx58, align 1, !dbg !6019
  %conv59 = zext i8 %28 to i32, !dbg !6019
  %cmp60 = icmp eq i32 %conv59, 14, !dbg !6019
  br i1 %cmp60, label %if.then, label %lor.lhs.false62, !dbg !6019

lor.lhs.false62:                                  ; preds = %lor.lhs.false56
  %29 = load i32, i32* %op1_mode, align 4, !dbg !6019
  %idxprom63 = zext i32 %29 to i64, !dbg !6019
  %arrayidx64 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom63, !dbg !6019
  %30 = load i8, i8* %arrayidx64, align 1, !dbg !6019
  %conv65 = zext i8 %30 to i32, !dbg !6019
  %cmp66 = icmp eq i32 %conv65, 15, !dbg !6019
  br i1 %cmp66, label %if.then, label %lor.lhs.false68, !dbg !6019

lor.lhs.false68:                                  ; preds = %lor.lhs.false62
  %31 = load i32, i32* %op1_mode, align 4, !dbg !6019
  %idxprom69 = zext i32 %31 to i64, !dbg !6019
  %arrayidx70 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom69, !dbg !6019
  %32 = load i8, i8* %arrayidx70, align 1, !dbg !6019
  %conv71 = zext i8 %32 to i32, !dbg !6019
  %cmp72 = icmp eq i32 %conv71, 16, !dbg !6019
  br i1 %cmp72, label %if.then, label %if.end, !dbg !6020

if.then:                                          ; preds = %lor.lhs.false68, %lor.lhs.false62, %lor.lhs.false56, %lor.lhs.false50, %lor.lhs.false44, %land.lhs.true
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 49), %struct.optab_d** %lshift_optab, align 8, !dbg !6021
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 51), %struct.optab_d** %rshift_arith_optab, align 8, !dbg !6023
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 50), %struct.optab_d** %rshift_uns_optab, align 8, !dbg !6024
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 52), %struct.optab_d** %lrotate_optab, align 8, !dbg !6025
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 53), %struct.optab_d** %rrotate_optab, align 8, !dbg !6026
  br label %if.end, !dbg !6027

if.end:                                           ; preds = %if.then, %lor.lhs.false68, %lor.lhs.false33
  %33 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6028
  %34 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6030
  %cmp74 = icmp eq %struct.rtx_def* %33, %34, !dbg !6031
  br i1 %cmp74, label %if.then76, label %if.end77, !dbg !6032

if.then76:                                        ; preds = %if.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %shifted.addr, align 8, !dbg !6033
  store %struct.rtx_def* %35, %struct.rtx_def** %retval, align 8, !dbg !6034
  br label %return, !dbg !6034

if.end77:                                         ; preds = %if.end
  %36 = load i32, i32* %code.addr, align 4, !dbg !6035
  %cmp78 = icmp eq i32 %36, 83, !dbg !6037
  br i1 %cmp78, label %land.lhs.true80, label %if.end148, !dbg !6038

land.lhs.true80:                                  ; preds = %if.end77
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6039
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !6039
  %bf.load81 = load i32, i32* %38, align 8, !dbg !6039
  %bf.clear82 = and i32 %bf.load81, 65535, !dbg !6039
  %cmp83 = icmp eq i32 %bf.clear82, 30, !dbg !6039
  br i1 %cmp83, label %land.lhs.true85, label %if.end148, !dbg !6040

land.lhs.true85:                                  ; preds = %land.lhs.true80
  %39 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6041
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !6041
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !6041
  %arrayidx86 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !6041
  %40 = load i64, i64* %arrayidx86, align 8, !dbg !6041
  %cmp87 = icmp sgt i64 %40, 0, !dbg !6042
  br i1 %cmp87, label %land.lhs.true89, label %if.end148, !dbg !6043

land.lhs.true89:                                  ; preds = %land.lhs.true85
  %41 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6044
  %u90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !6044
  %hwint91 = bitcast %union.u* %u90 to [1 x i64]*, !dbg !6044
  %arrayidx92 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint91, i64 0, i64 0, !dbg !6044
  %42 = load i64, i64* %arrayidx92, align 8, !dbg !6044
  %43 = load i32, i32* %mode.addr, align 4, !dbg !6045
  %idxprom93 = zext i32 %43 to i64, !dbg !6045
  %arrayidx94 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom93, !dbg !6045
  %44 = load i8, i8* %arrayidx94, align 1, !dbg !6045
  %conv95 = zext i8 %44 to i16, !dbg !6045
  %conv96 = zext i16 %conv95 to i32, !dbg !6045
  %mul = mul nsw i32 %conv96, 8, !dbg !6045
  %conv97 = trunc i32 %mul to i16, !dbg !6045
  %conv98 = zext i16 %conv97 to i64, !dbg !6045
  %cmp99 = icmp slt i64 %42, %conv98, !dbg !6046
  br i1 %cmp99, label %land.lhs.true101, label %if.end148, !dbg !6047

land.lhs.true101:                                 ; preds = %land.lhs.true89
  %45 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6048
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !6048
  %hwint103 = bitcast %union.u* %u102 to [1 x i64]*, !dbg !6048
  %arrayidx104 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint103, i64 0, i64 0, !dbg !6048
  %46 = load i64, i64* %arrayidx104, align 8, !dbg !6048
  %cmp105 = icmp slt i64 %46, 32, !dbg !6049
  br i1 %cmp105, label %land.lhs.true107, label %if.end148, !dbg !6050

land.lhs.true107:                                 ; preds = %land.lhs.true101
  %47 = load i8, i8* %speed, align 1, !dbg !6051
  %idxprom108 = zext i8 %47 to i64, !dbg !6052
  %arrayidx109 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom108, !dbg !6052
  %48 = load i32, i32* %mode.addr, align 4, !dbg !6053
  %idxprom110 = zext i32 %48 to i64, !dbg !6052
  %arrayidx111 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx109, i64 0, i64 %idxprom110, !dbg !6052
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6054
  %u112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !6054
  %hwint113 = bitcast %union.u* %u112 to [1 x i64]*, !dbg !6054
  %arrayidx114 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint113, i64 0, i64 0, !dbg !6054
  %50 = load i64, i64* %arrayidx114, align 8, !dbg !6054
  %arrayidx115 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx111, i64 0, i64 %50, !dbg !6052
  %51 = load i32, i32* %arrayidx115, align 4, !dbg !6052
  %conv116 = sext i32 %51 to i64, !dbg !6052
  %52 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6055
  %u117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !6055
  %hwint118 = bitcast %union.u* %u117 to [1 x i64]*, !dbg !6055
  %arrayidx119 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint118, i64 0, i64 0, !dbg !6055
  %53 = load i64, i64* %arrayidx119, align 8, !dbg !6055
  %54 = load i8, i8* %speed, align 1, !dbg !6056
  %idxprom120 = zext i8 %54 to i64, !dbg !6057
  %arrayidx121 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom120, !dbg !6057
  %55 = load i32, i32* %mode.addr, align 4, !dbg !6058
  %idxprom122 = zext i32 %55 to i64, !dbg !6057
  %arrayidx123 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx121, i64 0, i64 %idxprom122, !dbg !6057
  %56 = load i32, i32* %arrayidx123, align 4, !dbg !6057
  %conv124 = sext i32 %56 to i64, !dbg !6057
  %mul125 = mul nsw i64 %53, %conv124, !dbg !6059
  %cmp126 = icmp sgt i64 %conv116, %mul125, !dbg !6060
  br i1 %cmp126, label %land.lhs.true128, label %if.end148, !dbg !6061

land.lhs.true128:                                 ; preds = %land.lhs.true107
  %57 = load i8, i8* %speed, align 1, !dbg !6062
  %idxprom129 = zext i8 %57 to i64, !dbg !6063
  %arrayidx130 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom129, !dbg !6063
  %58 = load i32, i32* %mode.addr, align 4, !dbg !6064
  %idxprom131 = zext i32 %58 to i64, !dbg !6063
  %arrayidx132 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx130, i64 0, i64 %idxprom131, !dbg !6063
  %59 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6065
  %u133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !6065
  %hwint134 = bitcast %union.u* %u133 to [1 x i64]*, !dbg !6065
  %arrayidx135 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint134, i64 0, i64 0, !dbg !6065
  %60 = load i64, i64* %arrayidx135, align 8, !dbg !6065
  %arrayidx136 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx132, i64 0, i64 %60, !dbg !6063
  %61 = load i32, i32* %arrayidx136, align 4, !dbg !6063
  %cmp137 = icmp ne i32 %61, 2147483647, !dbg !6066
  br i1 %cmp137, label %if.then139, label %if.end148, !dbg !6067

if.then139:                                       ; preds = %land.lhs.true128
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6068, metadata !DIExpression()), !dbg !6070
  store i32 0, i32* %i, align 4, !dbg !6071
  br label %for.cond, !dbg !6073

for.cond:                                         ; preds = %for.inc, %if.then139
  %62 = load i32, i32* %i, align 4, !dbg !6074
  %conv140 = sext i32 %62 to i64, !dbg !6074
  %63 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6076
  %u141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !6076
  %hwint142 = bitcast %union.u* %u141 to [1 x i64]*, !dbg !6076
  %arrayidx143 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint142, i64 0, i64 0, !dbg !6076
  %64 = load i64, i64* %arrayidx143, align 8, !dbg !6076
  %cmp144 = icmp slt i64 %conv140, %64, !dbg !6077
  br i1 %cmp144, label %for.body, label %for.end, !dbg !6078

for.body:                                         ; preds = %for.cond
  %65 = load i32, i32* %mode.addr, align 4, !dbg !6079
  %66 = load %struct.rtx_def*, %struct.rtx_def** %shifted.addr, align 8, !dbg !6081
  %call146 = call %struct.rtx_def* @force_reg(i32 %65, %struct.rtx_def* %66), !dbg !6082
  store %struct.rtx_def* %call146, %struct.rtx_def** %temp, align 8, !dbg !6083
  %67 = load i32, i32* %mode.addr, align 4, !dbg !6084
  %68 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6085
  %69 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6086
  %70 = load i32, i32* %unsignedp.addr, align 4, !dbg !6087
  %call147 = call %struct.rtx_def* @expand_binop(i32 %67, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %68, %struct.rtx_def* %69, %struct.rtx_def* null, i32 %70, i32 3), !dbg !6088
  store %struct.rtx_def* %call147, %struct.rtx_def** %shifted.addr, align 8, !dbg !6089
  br label %for.inc, !dbg !6090

for.inc:                                          ; preds = %for.body
  %71 = load i32, i32* %i, align 4, !dbg !6091
  %inc = add nsw i32 %71, 1, !dbg !6091
  store i32 %inc, i32* %i, align 4, !dbg !6091
  br label %for.cond, !dbg !6092, !llvm.loop !6093

for.end:                                          ; preds = %for.cond
  %72 = load %struct.rtx_def*, %struct.rtx_def** %shifted.addr, align 8, !dbg !6095
  store %struct.rtx_def* %72, %struct.rtx_def** %retval, align 8, !dbg !6096
  br label %return, !dbg !6096

if.end148:                                        ; preds = %land.lhs.true128, %land.lhs.true107, %land.lhs.true101, %land.lhs.true89, %land.lhs.true85, %land.lhs.true80, %if.end77
  store i32 0, i32* %attempt, align 4, !dbg !6097
  br label %for.cond149, !dbg !6099

for.cond149:                                      ; preds = %for.inc278, %if.end148
  %73 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6100
  %cmp150 = icmp eq %struct.rtx_def* %73, null, !dbg !6102
  br i1 %cmp150, label %land.rhs, label %land.end, !dbg !6103

land.rhs:                                         ; preds = %for.cond149
  %74 = load i32, i32* %attempt, align 4, !dbg !6104
  %cmp152 = icmp slt i32 %74, 3, !dbg !6105
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond149
  %75 = phi i1 [ false, %for.cond149 ], [ %cmp152, %land.rhs ], !dbg !6106
  br i1 %75, label %for.body154, label %for.end280, !dbg !6107

for.body154:                                      ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %methods, metadata !6108, metadata !DIExpression()), !dbg !6110
  %76 = load i32, i32* %attempt, align 4, !dbg !6111
  %cmp155 = icmp eq i32 %76, 0, !dbg !6113
  br i1 %cmp155, label %if.then157, label %if.else, !dbg !6114

if.then157:                                       ; preds = %for.body154
  store i32 0, i32* %methods, align 4, !dbg !6115
  br label %if.end163, !dbg !6116

if.else:                                          ; preds = %for.body154
  %77 = load i32, i32* %attempt, align 4, !dbg !6117
  %cmp158 = icmp eq i32 %77, 1, !dbg !6119
  br i1 %cmp158, label %if.then160, label %if.else161, !dbg !6120

if.then160:                                       ; preds = %if.else
  store i32 2, i32* %methods, align 4, !dbg !6121
  br label %if.end162, !dbg !6122

if.else161:                                       ; preds = %if.else
  store i32 3, i32* %methods, align 4, !dbg !6123
  br label %if.end162

if.end162:                                        ; preds = %if.else161, %if.then160
  br label %if.end163

if.end163:                                        ; preds = %if.end162, %if.then157
  %78 = load i32, i32* %rotate, align 4, !dbg !6124
  %tobool = icmp ne i32 %78, 0, !dbg !6124
  br i1 %tobool, label %if.then164, label %if.else245, !dbg !6126

if.then164:                                       ; preds = %if.end163
  %79 = load i32, i32* %methods, align 4, !dbg !6127
  %cmp165 = icmp eq i32 %79, 2, !dbg !6130
  br i1 %cmp165, label %if.then167, label %if.else168, !dbg !6131

if.then167:                                       ; preds = %if.then164
  br label %for.inc278, !dbg !6132

if.else168:                                       ; preds = %if.then164
  %80 = load i32, i32* %methods, align 4, !dbg !6133
  %cmp169 = icmp eq i32 %80, 3, !dbg !6135
  br i1 %cmp169, label %if.then171, label %if.end237, !dbg !6136

if.then171:                                       ; preds = %if.else168
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget, metadata !6137, metadata !DIExpression()), !dbg !6139
  %81 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6140
  %82 = load %struct.rtx_def*, %struct.rtx_def** %shifted.addr, align 8, !dbg !6141
  %cmp172 = icmp eq %struct.rtx_def* %81, %82, !dbg !6142
  br i1 %cmp172, label %cond.true, label %cond.false, !dbg !6140

cond.true:                                        ; preds = %if.then171
  br label %cond.end, !dbg !6140

cond.false:                                       ; preds = %if.then171
  %83 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6143
  br label %cond.end, !dbg !6140

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ null, %cond.true ], [ %83, %cond.false ], !dbg !6140
  store %struct.rtx_def* %cond, %struct.rtx_def** %subtarget, align 8, !dbg !6139
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_amount, metadata !6144, metadata !DIExpression()), !dbg !6145
  call void @llvm.dbg.declare(metadata %union.tree_node** %other_amount, metadata !6146, metadata !DIExpression()), !dbg !6147
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp1, metadata !6148, metadata !DIExpression()), !dbg !6149
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6150, metadata !DIExpression()), !dbg !6151
  %84 = load %union.tree_node*, %union.tree_node** %amount.addr, align 8, !dbg !6152
  %common = bitcast %union.tree_node* %84 to %struct.tree_common*, !dbg !6152
  %type174 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6152
  %85 = load %union.tree_node*, %union.tree_node** %type174, align 8, !dbg !6152
  store %union.tree_node* %85, %union.tree_node** %type, align 8, !dbg !6151
  %86 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6153
  %87 = bitcast %struct.rtx_def* %86 to i32*, !dbg !6153
  %bf.load175 = load i32, i32* %87, align 8, !dbg !6153
  %bf.lshr176 = lshr i32 %bf.load175, 16, !dbg !6153
  %bf.clear177 = and i32 %bf.lshr176, 255, !dbg !6153
  %88 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6155
  %base = bitcast %union.tree_node* %88 to %struct.tree_base*, !dbg !6155
  %89 = bitcast %struct.tree_base* %base to i64*, !dbg !6155
  %bf.load178 = load i64, i64* %89, align 8, !dbg !6155
  %bf.clear179 = and i64 %bf.load178, 65535, !dbg !6155
  %bf.cast = trunc i64 %bf.clear179 to i32, !dbg !6155
  %cmp180 = icmp eq i32 %bf.cast, 14, !dbg !6155
  br i1 %cmp180, label %cond.true182, label %cond.false184, !dbg !6155

cond.true182:                                     ; preds = %cond.end
  %90 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6155
  %call183 = call i32 @vector_type_mode(%union.tree_node* %90), !dbg !6155
  br label %cond.end190, !dbg !6155

cond.false184:                                    ; preds = %cond.end
  %91 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6155
  %type185 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !6155
  %mode186 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type185, i32 0, i32 6, !dbg !6155
  %bf.load187 = load i32, i32* %mode186, align 4, !dbg !6155
  %bf.lshr188 = lshr i32 %bf.load187, 16, !dbg !6155
  %bf.clear189 = and i32 %bf.lshr188, 255, !dbg !6155
  br label %cond.end190, !dbg !6155

cond.end190:                                      ; preds = %cond.false184, %cond.true182
  %cond191 = phi i32 [ %call183, %cond.true182 ], [ %bf.clear189, %cond.false184 ], !dbg !6155
  %cmp192 = icmp ne i32 %bf.clear177, %cond191, !dbg !6156
  br i1 %cmp192, label %land.lhs.true194, label %if.end218, !dbg !6157

land.lhs.true194:                                 ; preds = %cond.end190
  %92 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6158
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !6158
  %bf.load195 = load i32, i32* %93, align 8, !dbg !6158
  %bf.lshr196 = lshr i32 %bf.load195, 16, !dbg !6158
  %bf.clear197 = and i32 %bf.lshr196, 255, !dbg !6158
  %cmp198 = icmp ne i32 %bf.clear197, 0, !dbg !6159
  br i1 %cmp198, label %if.then200, label %if.end218, !dbg !6160

if.then200:                                       ; preds = %land.lhs.true194
  %94 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6161
  %base201 = bitcast %union.tree_node* %94 to %struct.tree_base*, !dbg !6161
  %95 = bitcast %struct.tree_base* %base201 to i64*, !dbg !6161
  %bf.load202 = load i64, i64* %95, align 8, !dbg !6161
  %bf.clear203 = and i64 %bf.load202, 65535, !dbg !6161
  %bf.cast204 = trunc i64 %bf.clear203 to i32, !dbg !6161
  %cmp205 = icmp eq i32 %bf.cast204, 14, !dbg !6161
  br i1 %cmp205, label %cond.true207, label %cond.false209, !dbg !6161

cond.true207:                                     ; preds = %if.then200
  %96 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6161
  %call208 = call i32 @vector_type_mode(%union.tree_node* %96), !dbg !6161
  br label %cond.end215, !dbg !6161

cond.false209:                                    ; preds = %if.then200
  %97 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6161
  %type210 = bitcast %union.tree_node* %97 to %struct.tree_type*, !dbg !6161
  %mode211 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type210, i32 0, i32 6, !dbg !6161
  %bf.load212 = load i32, i32* %mode211, align 4, !dbg !6161
  %bf.lshr213 = lshr i32 %bf.load212, 16, !dbg !6161
  %bf.clear214 = and i32 %bf.lshr213, 255, !dbg !6161
  br label %cond.end215, !dbg !6161

cond.end215:                                      ; preds = %cond.false209, %cond.true207
  %cond216 = phi i32 [ %call208, %cond.true207 ], [ %bf.clear214, %cond.false209 ], !dbg !6161
  %98 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6162
  %call217 = call %struct.rtx_def* @convert_to_mode(i32 %cond216, %struct.rtx_def* %98, i32 1), !dbg !6163
  store %struct.rtx_def* %call217, %struct.rtx_def** %op1, align 8, !dbg !6164
  br label %if.end218, !dbg !6165

if.end218:                                        ; preds = %cond.end215, %land.lhs.true194, %cond.end190
  %99 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6166
  %100 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6167
  %call219 = call %union.tree_node* @make_tree(%union.tree_node* %99, %struct.rtx_def* %100), !dbg !6168
  store %union.tree_node* %call219, %union.tree_node** %new_amount, align 8, !dbg !6169
  %101 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6170
  %102 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6170
  %103 = load i32, i32* %mode.addr, align 4, !dbg !6170
  %idxprom220 = zext i32 %103 to i64, !dbg !6170
  %arrayidx221 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom220, !dbg !6170
  %104 = load i8, i8* %arrayidx221, align 1, !dbg !6170
  %conv222 = zext i8 %104 to i16, !dbg !6170
  %conv223 = zext i16 %conv222 to i32, !dbg !6170
  %mul224 = mul nsw i32 %conv223, 8, !dbg !6170
  %conv225 = trunc i32 %mul224 to i16, !dbg !6170
  %conv226 = zext i16 %conv225 to i64, !dbg !6170
  %call227 = call %union.tree_node* @build_int_cst(%union.tree_node* %102, i64 %conv226), !dbg !6170
  %105 = load %union.tree_node*, %union.tree_node** %new_amount, align 8, !dbg !6170
  %call228 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %101, %union.tree_node* %call227, %union.tree_node* %105), !dbg !6170
  store %union.tree_node* %call228, %union.tree_node** %other_amount, align 8, !dbg !6171
  %106 = load i32, i32* %mode.addr, align 4, !dbg !6172
  %107 = load %struct.rtx_def*, %struct.rtx_def** %shifted.addr, align 8, !dbg !6173
  %call229 = call %struct.rtx_def* @force_reg(i32 %106, %struct.rtx_def* %107), !dbg !6174
  store %struct.rtx_def* %call229, %struct.rtx_def** %shifted.addr, align 8, !dbg !6175
  %108 = load i32, i32* %left, align 4, !dbg !6176
  %tobool230 = icmp ne i32 %108, 0, !dbg !6176
  %109 = zext i1 %tobool230 to i64, !dbg !6176
  %cond231 = select i1 %tobool230, i32 83, i32 84, !dbg !6176
  %110 = load i32, i32* %mode.addr, align 4, !dbg !6177
  %111 = load %struct.rtx_def*, %struct.rtx_def** %shifted.addr, align 8, !dbg !6178
  %112 = load %union.tree_node*, %union.tree_node** %new_amount, align 8, !dbg !6179
  %call232 = call %struct.rtx_def* @expand_shift(i32 %cond231, i32 %110, %struct.rtx_def* %111, %union.tree_node* %112, %struct.rtx_def* null, i32 1), !dbg !6180
  store %struct.rtx_def* %call232, %struct.rtx_def** %temp, align 8, !dbg !6181
  %113 = load i32, i32* %left, align 4, !dbg !6182
  %tobool233 = icmp ne i32 %113, 0, !dbg !6182
  %114 = zext i1 %tobool233 to i64, !dbg !6182
  %cond234 = select i1 %tobool233, i32 84, i32 83, !dbg !6182
  %115 = load i32, i32* %mode.addr, align 4, !dbg !6183
  %116 = load %struct.rtx_def*, %struct.rtx_def** %shifted.addr, align 8, !dbg !6184
  %117 = load %union.tree_node*, %union.tree_node** %other_amount, align 8, !dbg !6185
  %118 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !6186
  %call235 = call %struct.rtx_def* @expand_shift(i32 %cond234, i32 %115, %struct.rtx_def* %116, %union.tree_node* %117, %struct.rtx_def* %118, i32 1), !dbg !6187
  store %struct.rtx_def* %call235, %struct.rtx_def** %temp1, align 8, !dbg !6188
  %119 = load i32, i32* %mode.addr, align 4, !dbg !6189
  %120 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6190
  %121 = load %struct.rtx_def*, %struct.rtx_def** %temp1, align 8, !dbg !6191
  %122 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6192
  %123 = load i32, i32* %unsignedp.addr, align 4, !dbg !6193
  %124 = load i32, i32* %methods, align 4, !dbg !6194
  %call236 = call %struct.rtx_def* @expand_binop(i32 %119, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %120, %struct.rtx_def* %121, %struct.rtx_def* %122, i32 %123, i32 %124), !dbg !6195
  store %struct.rtx_def* %call236, %struct.rtx_def** %retval, align 8, !dbg !6196
  br label %return, !dbg !6196

if.end237:                                        ; preds = %if.else168
  br label %if.end238

if.end238:                                        ; preds = %if.end237
  %125 = load i32, i32* %mode.addr, align 4, !dbg !6197
  %126 = load i32, i32* %left, align 4, !dbg !6198
  %tobool239 = icmp ne i32 %126, 0, !dbg !6198
  br i1 %tobool239, label %cond.true240, label %cond.false241, !dbg !6198

cond.true240:                                     ; preds = %if.end238
  %127 = load %struct.optab_d*, %struct.optab_d** %lrotate_optab, align 8, !dbg !6199
  br label %cond.end242, !dbg !6198

cond.false241:                                    ; preds = %if.end238
  %128 = load %struct.optab_d*, %struct.optab_d** %rrotate_optab, align 8, !dbg !6200
  br label %cond.end242, !dbg !6198

cond.end242:                                      ; preds = %cond.false241, %cond.true240
  %cond243 = phi %struct.optab_d* [ %127, %cond.true240 ], [ %128, %cond.false241 ], !dbg !6198
  %129 = load %struct.rtx_def*, %struct.rtx_def** %shifted.addr, align 8, !dbg !6201
  %130 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6202
  %131 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6203
  %132 = load i32, i32* %unsignedp.addr, align 4, !dbg !6204
  %133 = load i32, i32* %methods, align 4, !dbg !6205
  %call244 = call %struct.rtx_def* @expand_binop(i32 %125, %struct.optab_d* %cond243, %struct.rtx_def* %129, %struct.rtx_def* %130, %struct.rtx_def* %131, i32 %132, i32 %133), !dbg !6206
  store %struct.rtx_def* %call244, %struct.rtx_def** %temp, align 8, !dbg !6207
  br label %if.end255, !dbg !6208

if.else245:                                       ; preds = %if.end163
  %134 = load i32, i32* %unsignedp.addr, align 4, !dbg !6209
  %tobool246 = icmp ne i32 %134, 0, !dbg !6209
  br i1 %tobool246, label %if.then247, label %if.end254, !dbg !6211

if.then247:                                       ; preds = %if.else245
  %135 = load i32, i32* %mode.addr, align 4, !dbg !6212
  %136 = load i32, i32* %left, align 4, !dbg !6213
  %tobool248 = icmp ne i32 %136, 0, !dbg !6213
  br i1 %tobool248, label %cond.true249, label %cond.false250, !dbg !6213

cond.true249:                                     ; preds = %if.then247
  %137 = load %struct.optab_d*, %struct.optab_d** %lshift_optab, align 8, !dbg !6214
  br label %cond.end251, !dbg !6213

cond.false250:                                    ; preds = %if.then247
  %138 = load %struct.optab_d*, %struct.optab_d** %rshift_uns_optab, align 8, !dbg !6215
  br label %cond.end251, !dbg !6213

cond.end251:                                      ; preds = %cond.false250, %cond.true249
  %cond252 = phi %struct.optab_d* [ %137, %cond.true249 ], [ %138, %cond.false250 ], !dbg !6213
  %139 = load %struct.rtx_def*, %struct.rtx_def** %shifted.addr, align 8, !dbg !6216
  %140 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6217
  %141 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6218
  %142 = load i32, i32* %unsignedp.addr, align 4, !dbg !6219
  %143 = load i32, i32* %methods, align 4, !dbg !6220
  %call253 = call %struct.rtx_def* @expand_binop(i32 %135, %struct.optab_d* %cond252, %struct.rtx_def* %139, %struct.rtx_def* %140, %struct.rtx_def* %141, i32 %142, i32 %143), !dbg !6221
  store %struct.rtx_def* %call253, %struct.rtx_def** %temp, align 8, !dbg !6222
  br label %if.end254, !dbg !6223

if.end254:                                        ; preds = %cond.end251, %if.else245
  br label %if.end255

if.end255:                                        ; preds = %if.end254, %cond.end242
  %144 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6224
  %cmp256 = icmp eq %struct.rtx_def* %144, null, !dbg !6226
  br i1 %cmp256, label %land.lhs.true258, label %if.end277, !dbg !6227

land.lhs.true258:                                 ; preds = %if.end255
  %145 = load i32, i32* %rotate, align 4, !dbg !6228
  %tobool259 = icmp ne i32 %145, 0, !dbg !6228
  br i1 %tobool259, label %if.end277, label %land.lhs.true260, !dbg !6229

land.lhs.true260:                                 ; preds = %land.lhs.true258
  %146 = load i32, i32* %unsignedp.addr, align 4, !dbg !6230
  %tobool261 = icmp ne i32 %146, 0, !dbg !6230
  br i1 %tobool261, label %lor.lhs.false262, label %if.then267, !dbg !6231

lor.lhs.false262:                                 ; preds = %land.lhs.true260
  %147 = load i32, i32* %left, align 4, !dbg !6232
  %tobool263 = icmp ne i32 %147, 0, !dbg !6232
  br i1 %tobool263, label %if.end277, label %land.lhs.true264, !dbg !6233

land.lhs.true264:                                 ; preds = %lor.lhs.false262
  %148 = load i32, i32* %methods, align 4, !dbg !6234
  %cmp265 = icmp eq i32 %148, 2, !dbg !6235
  br i1 %cmp265, label %if.then267, label %if.end277, !dbg !6236

if.then267:                                       ; preds = %land.lhs.true264, %land.lhs.true260
  call void @llvm.dbg.declare(metadata i32* %methods1, metadata !6237, metadata !DIExpression()), !dbg !6239
  %149 = load i32, i32* %methods, align 4, !dbg !6240
  store i32 %149, i32* %methods1, align 4, !dbg !6239
  %150 = load i32, i32* %unsignedp.addr, align 4, !dbg !6241
  %tobool268 = icmp ne i32 %150, 0, !dbg !6241
  br i1 %tobool268, label %if.then269, label %if.end270, !dbg !6243

if.then269:                                       ; preds = %if.then267
  store i32 4, i32* %methods1, align 4, !dbg !6244
  br label %if.end270, !dbg !6245

if.end270:                                        ; preds = %if.then269, %if.then267
  %151 = load i32, i32* %mode.addr, align 4, !dbg !6246
  %152 = load i32, i32* %left, align 4, !dbg !6247
  %tobool271 = icmp ne i32 %152, 0, !dbg !6247
  br i1 %tobool271, label %cond.true272, label %cond.false273, !dbg !6247

cond.true272:                                     ; preds = %if.end270
  %153 = load %struct.optab_d*, %struct.optab_d** %lshift_optab, align 8, !dbg !6248
  br label %cond.end274, !dbg !6247

cond.false273:                                    ; preds = %if.end270
  %154 = load %struct.optab_d*, %struct.optab_d** %rshift_arith_optab, align 8, !dbg !6249
  br label %cond.end274, !dbg !6247

cond.end274:                                      ; preds = %cond.false273, %cond.true272
  %cond275 = phi %struct.optab_d* [ %153, %cond.true272 ], [ %154, %cond.false273 ], !dbg !6247
  %155 = load %struct.rtx_def*, %struct.rtx_def** %shifted.addr, align 8, !dbg !6250
  %156 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !6251
  %157 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6252
  %158 = load i32, i32* %unsignedp.addr, align 4, !dbg !6253
  %159 = load i32, i32* %methods1, align 4, !dbg !6254
  %call276 = call %struct.rtx_def* @expand_binop(i32 %151, %struct.optab_d* %cond275, %struct.rtx_def* %155, %struct.rtx_def* %156, %struct.rtx_def* %157, i32 %158, i32 %159), !dbg !6255
  store %struct.rtx_def* %call276, %struct.rtx_def** %temp, align 8, !dbg !6256
  br label %if.end277, !dbg !6257

if.end277:                                        ; preds = %cond.end274, %land.lhs.true264, %lor.lhs.false262, %land.lhs.true258, %if.end255
  br label %for.inc278, !dbg !6258

for.inc278:                                       ; preds = %if.end277, %if.then167
  %160 = load i32, i32* %attempt, align 4, !dbg !6259
  %inc279 = add nsw i32 %160, 1, !dbg !6259
  store i32 %inc279, i32* %attempt, align 4, !dbg !6259
  br label %for.cond149, !dbg !6260, !llvm.loop !6261

for.end280:                                       ; preds = %land.end
  %161 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6263
  %tobool281 = icmp ne %struct.rtx_def* %161, null, !dbg !6263
  br i1 %tobool281, label %cond.false283, label %cond.true282, !dbg !6263

cond.true282:                                     ; preds = %for.end280
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2274, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6263
  br label %cond.end284, !dbg !6263

cond.false283:                                    ; preds = %for.end280
  br label %cond.end284, !dbg !6263

cond.end284:                                      ; preds = %cond.false283, %cond.true282
  %cond285 = phi i32 [ 0, %cond.true282 ], [ 0, %cond.false283 ], !dbg !6263
  %162 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6264
  store %struct.rtx_def* %162, %struct.rtx_def** %retval, align 8, !dbg !6265
  br label %return, !dbg !6265

return:                                           ; preds = %cond.end284, %if.end218, %for.end, %if.then76
  %163 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6266
  ret %struct.rtx_def* %163, !dbg !6266
}

declare dso_local zeroext i8 @optimize_insn_for_speed_p() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_normal(%union.tree_node* %exp) #0 !dbg !6267 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6270, metadata !DIExpression()), !dbg !6271
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6272
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* null, i32 0, i32 0, %struct.rtx_def** null), !dbg !6273
  ret %struct.rtx_def* %call, !dbg !6274
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local %struct.rtx_def* @convert_to_mode(i32, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @make_tree(%union.tree_node* %type, %struct.rtx_def* %x) #0 !dbg !6275 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %t = alloca %union.tree_node*, align 8
  %hi = alloca i64, align 8
  %d = alloca %struct.real_value, align 8
  %units = alloca i32, align 4
  %itype = alloca %union.tree_node*, align 8
  %t44 = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %elt = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6278, metadata !DIExpression()), !dbg !6279
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6280, metadata !DIExpression()), !dbg !6281
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6282, metadata !DIExpression()), !dbg !6283
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6284
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6284
  %bf.load = load i32, i32* %1, align 8, !dbg !6284
  %bf.clear = and i32 %bf.load, 65535, !dbg !6284
  switch i32 %bf.clear, label %sw.default [
    i32 30, label %sw.bb
    i32 32, label %sw.bb23
    i32 33, label %sw.bb40
    i32 49, label %sw.bb56
    i32 50, label %sw.bb67
    i32 51, label %sw.bb79
    i32 52, label %sw.bb86
    i32 65, label %sw.bb98
    i32 68, label %sw.bb110
    i32 67, label %sw.bb124
    i32 55, label %sw.bb138
    i32 59, label %sw.bb161
    i32 98, label %sw.bb175
    i32 99, label %sw.bb175
    i32 35, label %sw.bb194
    i32 45, label %sw.bb200
  ], !dbg !6285

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %hi, metadata !6286, metadata !DIExpression()), !dbg !6289
  store i64 0, i64* %hi, align 8, !dbg !6289
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6290
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !6290
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !6290
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !6290
  %3 = load i64, i64* %arrayidx, align 8, !dbg !6290
  %cmp = icmp slt i64 %3, 0, !dbg !6292
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6293

land.lhs.true:                                    ; preds = %sw.bb
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6294
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6294
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !6294
  %bf.load1 = load i64, i64* %5, align 8, !dbg !6294
  %bf.lshr = lshr i64 %bf.load1, 21, !dbg !6294
  %bf.clear2 = and i64 %bf.lshr, 1, !dbg !6294
  %bf.cast = trunc i64 %bf.clear2 to i32, !dbg !6294
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !6294
  br i1 %tobool, label %land.lhs.true3, label %if.then, !dbg !6295

land.lhs.true3:                                   ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6296
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6296
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !6296
  %bf.load5 = load i64, i64* %7, align 8, !dbg !6296
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !6296
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !6296
  %cmp8 = icmp eq i32 %bf.cast7, 14, !dbg !6296
  br i1 %cmp8, label %cond.true, label %cond.false, !dbg !6296

cond.true:                                        ; preds = %land.lhs.true3
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6296
  %call = call i32 @vector_type_mode(%union.tree_node* %8), !dbg !6296
  br label %cond.end, !dbg !6296

cond.false:                                       ; preds = %land.lhs.true3
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6296
  %type9 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !6296
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 6, !dbg !6296
  %bf.load10 = load i32, i32* %mode, align 4, !dbg !6296
  %bf.lshr11 = lshr i32 %bf.load10, 16, !dbg !6296
  %bf.clear12 = and i32 %bf.lshr11, 255, !dbg !6296
  br label %cond.end, !dbg !6296

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear12, %cond.false ], !dbg !6296
  %idxprom = zext i32 %cond to i64, !dbg !6296
  %arrayidx13 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !6296
  %10 = load i8, i8* %arrayidx13, align 1, !dbg !6296
  %conv = zext i8 %10 to i16, !dbg !6296
  %conv14 = zext i16 %conv to i32, !dbg !6296
  %mul = mul nsw i32 %conv14, 8, !dbg !6296
  %conv15 = trunc i32 %mul to i16, !dbg !6296
  %conv16 = zext i16 %conv15 to i32, !dbg !6296
  %cmp17 = icmp slt i32 %conv16, 64, !dbg !6297
  br i1 %cmp17, label %if.end, label %if.then, !dbg !6298

if.then:                                          ; preds = %cond.end, %land.lhs.true
  store i64 -1, i64* %hi, align 8, !dbg !6299
  br label %if.end, !dbg !6300

if.end:                                           ; preds = %if.then, %cond.end, %sw.bb
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6301
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6302
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !6302
  %hwint20 = bitcast %union.u* %u19 to [1 x i64]*, !dbg !6302
  %arrayidx21 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint20, i64 0, i64 0, !dbg !6302
  %13 = load i64, i64* %arrayidx21, align 8, !dbg !6302
  %14 = load i64, i64* %hi, align 8, !dbg !6303
  %call22 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %11, i64 %13, i64 %14), !dbg !6304
  store %union.tree_node* %call22, %union.tree_node** %t, align 8, !dbg !6305
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6306
  store %union.tree_node* %15, %union.tree_node** %retval, align 8, !dbg !6307
  br label %return, !dbg !6307

sw.bb23:                                          ; preds = %entry
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6308
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !6308
  %bf.load24 = load i32, i32* %17, align 8, !dbg !6308
  %bf.lshr25 = lshr i32 %bf.load24, 16, !dbg !6308
  %bf.clear26 = and i32 %bf.lshr25, 255, !dbg !6308
  %cmp27 = icmp eq i32 %bf.clear26, 0, !dbg !6310
  br i1 %cmp27, label %if.then29, label %if.else, !dbg !6311

if.then29:                                        ; preds = %sw.bb23
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6312
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6313
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !6313
  %hwint31 = bitcast %union.u* %u30 to [1 x i64]*, !dbg !6313
  %arrayidx32 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint31, i64 0, i64 0, !dbg !6313
  %20 = load i64, i64* %arrayidx32, align 8, !dbg !6313
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6314
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !6314
  %hwint34 = bitcast %union.u* %u33 to [1 x i64]*, !dbg !6314
  %arrayidx35 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint34, i64 0, i64 1, !dbg !6314
  %22 = load i64, i64* %arrayidx35, align 8, !dbg !6314
  %call36 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %18, i64 %20, i64 %22), !dbg !6315
  store %union.tree_node* %call36, %union.tree_node** %t, align 8, !dbg !6316
  br label %if.end39, !dbg !6317

if.else:                                          ; preds = %sw.bb23
  call void @llvm.dbg.declare(metadata %struct.real_value* %d, metadata !6318, metadata !DIExpression()), !dbg !6320
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6321
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !6321
  %rv = bitcast %union.u* %u37 to %struct.real_value*, !dbg !6321
  %24 = bitcast %struct.real_value* %d to i8*, !dbg !6321
  %25 = bitcast %struct.real_value* %rv to i8*, !dbg !6321
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 32, i1 false), !dbg !6321
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6322
  %call38 = call %union.tree_node* @build_real(%union.tree_node* %26, %struct.real_value* byval(%struct.real_value) align 8 %d), !dbg !6323
  store %union.tree_node* %call38, %union.tree_node** %t, align 8, !dbg !6324
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then29
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6325
  store %union.tree_node* %27, %union.tree_node** %retval, align 8, !dbg !6326
  br label %return, !dbg !6326

sw.bb40:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %units, metadata !6327, metadata !DIExpression()), !dbg !6329
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6330
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !6330
  %fld = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !6330
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6330
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtvec_def**, !dbg !6330
  %29 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6330
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %29, i32 0, i32 0, !dbg !6330
  %30 = load i32, i32* %num_elem, align 8, !dbg !6330
  store i32 %30, i32* %units, align 4, !dbg !6329
  call void @llvm.dbg.declare(metadata %union.tree_node** %itype, metadata !6331, metadata !DIExpression()), !dbg !6332
  %31 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6333
  %common = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !6333
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6333
  %32 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !6333
  store %union.tree_node* %32, %union.tree_node** %itype, align 8, !dbg !6332
  call void @llvm.dbg.declare(metadata %union.tree_node** %t44, metadata !6334, metadata !DIExpression()), !dbg !6335
  store %union.tree_node* null, %union.tree_node** %t44, align 8, !dbg !6335
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6336, metadata !DIExpression()), !dbg !6337
  %33 = load i32, i32* %units, align 4, !dbg !6338
  %sub = sub nsw i32 %33, 1, !dbg !6340
  store i32 %sub, i32* %i, align 4, !dbg !6341
  br label %for.cond, !dbg !6342

for.cond:                                         ; preds = %for.inc, %sw.bb40
  %34 = load i32, i32* %i, align 4, !dbg !6343
  %cmp45 = icmp sge i32 %34, 0, !dbg !6345
  br i1 %cmp45, label %for.body, label %for.end, !dbg !6346

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %elt, metadata !6347, metadata !DIExpression()), !dbg !6349
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6350
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !6350
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !6350
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 0, !dbg !6350
  %rt_rtvec50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtvec_def**, !dbg !6350
  %36 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec50, align 8, !dbg !6350
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %36, i32 0, i32 1, !dbg !6350
  %37 = load i32, i32* %i, align 4, !dbg !6350
  %idxprom51 = sext i32 %37 to i64, !dbg !6350
  %arrayidx52 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom51, !dbg !6350
  %38 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx52, align 8, !dbg !6350
  store %struct.rtx_def* %38, %struct.rtx_def** %elt, align 8, !dbg !6349
  %39 = load %union.tree_node*, %union.tree_node** %itype, align 8, !dbg !6351
  %40 = load %struct.rtx_def*, %struct.rtx_def** %elt, align 8, !dbg !6351
  %call53 = call %union.tree_node* @make_tree(%union.tree_node* %39, %struct.rtx_def* %40), !dbg !6351
  %41 = load %union.tree_node*, %union.tree_node** %t44, align 8, !dbg !6351
  %call54 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call53, %union.tree_node* %41), !dbg !6351
  store %union.tree_node* %call54, %union.tree_node** %t44, align 8, !dbg !6352
  br label %for.inc, !dbg !6353

for.inc:                                          ; preds = %for.body
  %42 = load i32, i32* %i, align 4, !dbg !6354
  %dec = add nsw i32 %42, -1, !dbg !6354
  store i32 %dec, i32* %i, align 4, !dbg !6354
  br label %for.cond, !dbg !6355, !llvm.loop !6356

for.end:                                          ; preds = %for.cond
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6358
  %44 = load %union.tree_node*, %union.tree_node** %t44, align 8, !dbg !6359
  %call55 = call %union.tree_node* @build_vector(%union.tree_node* %43, %union.tree_node* %44), !dbg !6360
  store %union.tree_node* %call55, %union.tree_node** %retval, align 8, !dbg !6361
  br label %return, !dbg !6361

sw.bb56:                                          ; preds = %entry
  %45 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6362
  %46 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6362
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6362
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !6362
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !6362
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 0, !dbg !6362
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**, !dbg !6362
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6362
  %call60 = call %union.tree_node* @make_tree(%union.tree_node* %46, %struct.rtx_def* %48), !dbg !6362
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6362
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6362
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !6362
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !6362
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 1, !dbg !6362
  %rt_rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**, !dbg !6362
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx64, align 8, !dbg !6362
  %call65 = call %union.tree_node* @make_tree(%union.tree_node* %49, %struct.rtx_def* %51), !dbg !6362
  %call66 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %45, %union.tree_node* %call60, %union.tree_node* %call65), !dbg !6362
  store %union.tree_node* %call66, %union.tree_node** %retval, align 8, !dbg !6363
  br label %return, !dbg !6363

sw.bb67:                                          ; preds = %entry
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6364
  %53 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6364
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6364
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !6364
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !6364
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 0, !dbg !6364
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !6364
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx71, align 8, !dbg !6364
  %call72 = call %union.tree_node* @make_tree(%union.tree_node* %53, %struct.rtx_def* %55), !dbg !6364
  %56 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6364
  %57 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6364
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !6364
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !6364
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 1, !dbg !6364
  %rt_rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**, !dbg !6364
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx76, align 8, !dbg !6364
  %call77 = call %union.tree_node* @make_tree(%union.tree_node* %56, %struct.rtx_def* %58), !dbg !6364
  %call78 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %52, %union.tree_node* %call72, %union.tree_node* %call77), !dbg !6364
  store %union.tree_node* %call78, %union.tree_node** %retval, align 8, !dbg !6365
  br label %return, !dbg !6365

sw.bb79:                                          ; preds = %entry
  %59 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6366
  %60 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6366
  %61 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6366
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !6366
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !6366
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 0, !dbg !6366
  %rt_rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**, !dbg !6366
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx83, align 8, !dbg !6366
  %call84 = call %union.tree_node* @make_tree(%union.tree_node* %60, %struct.rtx_def* %62), !dbg !6366
  %call85 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %59, %union.tree_node* %call84), !dbg !6366
  store %union.tree_node* %call85, %union.tree_node** %retval, align 8, !dbg !6367
  br label %return, !dbg !6367

sw.bb86:                                          ; preds = %entry
  %63 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6368
  %64 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6368
  %65 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6368
  %u87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !6368
  %fld88 = bitcast %union.u* %u87 to [1 x %union.rtunion_def]*, !dbg !6368
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i64 0, i64 0, !dbg !6368
  %rt_rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**, !dbg !6368
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx90, align 8, !dbg !6368
  %call91 = call %union.tree_node* @make_tree(%union.tree_node* %64, %struct.rtx_def* %66), !dbg !6368
  %67 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6368
  %68 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6368
  %u92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !6368
  %fld93 = bitcast %union.u* %u92 to [1 x %union.rtunion_def]*, !dbg !6368
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i64 0, i64 1, !dbg !6368
  %rt_rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**, !dbg !6368
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx95, align 8, !dbg !6368
  %call96 = call %union.tree_node* @make_tree(%union.tree_node* %67, %struct.rtx_def* %69), !dbg !6368
  %call97 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %63, %union.tree_node* %call91, %union.tree_node* %call96), !dbg !6368
  store %union.tree_node* %call97, %union.tree_node** %retval, align 8, !dbg !6369
  br label %return, !dbg !6369

sw.bb98:                                          ; preds = %entry
  %70 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6370
  %71 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6370
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6370
  %u99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !6370
  %fld100 = bitcast %union.u* %u99 to [1 x %union.rtunion_def]*, !dbg !6370
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i64 0, i64 0, !dbg !6370
  %rt_rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**, !dbg !6370
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx102, align 8, !dbg !6370
  %call103 = call %union.tree_node* @make_tree(%union.tree_node* %71, %struct.rtx_def* %73), !dbg !6370
  %74 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6370
  %75 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6370
  %u104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !6370
  %fld105 = bitcast %union.u* %u104 to [1 x %union.rtunion_def]*, !dbg !6370
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i64 0, i64 1, !dbg !6370
  %rt_rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**, !dbg !6370
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx107, align 8, !dbg !6370
  %call108 = call %union.tree_node* @make_tree(%union.tree_node* %74, %struct.rtx_def* %76), !dbg !6370
  %call109 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 83, %union.tree_node* %70, %union.tree_node* %call103, %union.tree_node* %call108), !dbg !6370
  store %union.tree_node* %call109, %union.tree_node** %retval, align 8, !dbg !6371
  br label %return, !dbg !6371

sw.bb110:                                         ; preds = %entry
  %77 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6372
  %call111 = call %union.tree_node* @unsigned_type_for(%union.tree_node* %77), !dbg !6373
  store %union.tree_node* %call111, %union.tree_node** %t, align 8, !dbg !6374
  %78 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6375
  %79 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6375
  %80 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6375
  %81 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6375
  %u112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !6375
  %fld113 = bitcast %union.u* %u112 to [1 x %union.rtunion_def]*, !dbg !6375
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i64 0, i64 0, !dbg !6375
  %rt_rtx115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**, !dbg !6375
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx115, align 8, !dbg !6375
  %call116 = call %union.tree_node* @make_tree(%union.tree_node* %80, %struct.rtx_def* %82), !dbg !6375
  %83 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6375
  %84 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6375
  %u117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !6375
  %fld118 = bitcast %union.u* %u117 to [1 x %union.rtunion_def]*, !dbg !6375
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i64 0, i64 1, !dbg !6375
  %rt_rtx120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtx_def**, !dbg !6375
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx120, align 8, !dbg !6375
  %call121 = call %union.tree_node* @make_tree(%union.tree_node* %83, %struct.rtx_def* %85), !dbg !6375
  %call122 = call %union.tree_node* @build2_stat(i32 84, %union.tree_node* %79, %union.tree_node* %call116, %union.tree_node* %call121), !dbg !6375
  %call123 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %78, %union.tree_node* %call122), !dbg !6375
  store %union.tree_node* %call123, %union.tree_node** %retval, align 8, !dbg !6376
  br label %return, !dbg !6376

sw.bb124:                                         ; preds = %entry
  %86 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6377
  %call125 = call %union.tree_node* @signed_type_for(%union.tree_node* %86), !dbg !6378
  store %union.tree_node* %call125, %union.tree_node** %t, align 8, !dbg !6379
  %87 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6380
  %88 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6380
  %89 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6380
  %90 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6380
  %u126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1, !dbg !6380
  %fld127 = bitcast %union.u* %u126 to [1 x %union.rtunion_def]*, !dbg !6380
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i64 0, i64 0, !dbg !6380
  %rt_rtx129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**, !dbg !6380
  %91 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx129, align 8, !dbg !6380
  %call130 = call %union.tree_node* @make_tree(%union.tree_node* %89, %struct.rtx_def* %91), !dbg !6380
  %92 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6380
  %93 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6380
  %u131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1, !dbg !6380
  %fld132 = bitcast %union.u* %u131 to [1 x %union.rtunion_def]*, !dbg !6380
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i64 0, i64 1, !dbg !6380
  %rt_rtx134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtx_def**, !dbg !6380
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx134, align 8, !dbg !6380
  %call135 = call %union.tree_node* @make_tree(%union.tree_node* %92, %struct.rtx_def* %94), !dbg !6380
  %call136 = call %union.tree_node* @build2_stat(i32 84, %union.tree_node* %88, %union.tree_node* %call130, %union.tree_node* %call135), !dbg !6380
  %call137 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %87, %union.tree_node* %call136), !dbg !6380
  store %union.tree_node* %call137, %union.tree_node** %retval, align 8, !dbg !6381
  br label %return, !dbg !6381

sw.bb138:                                         ; preds = %entry
  %95 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6382
  %base139 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !6382
  %96 = bitcast %struct.tree_base* %base139 to i64*, !dbg !6382
  %bf.load140 = load i64, i64* %96, align 8, !dbg !6382
  %bf.clear141 = and i64 %bf.load140, 65535, !dbg !6382
  %bf.cast142 = trunc i64 %bf.clear141 to i32, !dbg !6382
  %cmp143 = icmp ne i32 %bf.cast142, 9, !dbg !6384
  br i1 %cmp143, label %if.then145, label %if.else147, !dbg !6385

if.then145:                                       ; preds = %sw.bb138
  %97 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6386
  %call146 = call %union.tree_node* @signed_type_for(%union.tree_node* %97), !dbg !6387
  store %union.tree_node* %call146, %union.tree_node** %t, align 8, !dbg !6388
  br label %if.end148, !dbg !6389

if.else147:                                       ; preds = %sw.bb138
  %98 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6390
  store %union.tree_node* %98, %union.tree_node** %t, align 8, !dbg !6391
  br label %if.end148

if.end148:                                        ; preds = %if.else147, %if.then145
  %99 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6392
  %100 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6392
  %101 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6392
  %102 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6392
  %u149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1, !dbg !6392
  %fld150 = bitcast %union.u* %u149 to [1 x %union.rtunion_def]*, !dbg !6392
  %arrayidx151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld150, i64 0, i64 0, !dbg !6392
  %rt_rtx152 = bitcast %union.rtunion_def* %arrayidx151 to %struct.rtx_def**, !dbg !6392
  %103 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx152, align 8, !dbg !6392
  %call153 = call %union.tree_node* @make_tree(%union.tree_node* %101, %struct.rtx_def* %103), !dbg !6392
  %104 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6392
  %105 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6392
  %u154 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1, !dbg !6392
  %fld155 = bitcast %union.u* %u154 to [1 x %union.rtunion_def]*, !dbg !6392
  %arrayidx156 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld155, i64 0, i64 1, !dbg !6392
  %rt_rtx157 = bitcast %union.rtunion_def* %arrayidx156 to %struct.rtx_def**, !dbg !6392
  %106 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx157, align 8, !dbg !6392
  %call158 = call %union.tree_node* @make_tree(%union.tree_node* %104, %struct.rtx_def* %106), !dbg !6392
  %call159 = call %union.tree_node* @build2_stat(i32 67, %union.tree_node* %100, %union.tree_node* %call153, %union.tree_node* %call158), !dbg !6392
  %call160 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %99, %union.tree_node* %call159), !dbg !6392
  store %union.tree_node* %call160, %union.tree_node** %retval, align 8, !dbg !6393
  br label %return, !dbg !6393

sw.bb161:                                         ; preds = %entry
  %107 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6394
  %call162 = call %union.tree_node* @unsigned_type_for(%union.tree_node* %107), !dbg !6395
  store %union.tree_node* %call162, %union.tree_node** %t, align 8, !dbg !6396
  %108 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6397
  %109 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6397
  %110 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6397
  %111 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6397
  %u163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1, !dbg !6397
  %fld164 = bitcast %union.u* %u163 to [1 x %union.rtunion_def]*, !dbg !6397
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i64 0, i64 0, !dbg !6397
  %rt_rtx166 = bitcast %union.rtunion_def* %arrayidx165 to %struct.rtx_def**, !dbg !6397
  %112 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx166, align 8, !dbg !6397
  %call167 = call %union.tree_node* @make_tree(%union.tree_node* %110, %struct.rtx_def* %112), !dbg !6397
  %113 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6397
  %114 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6397
  %u168 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1, !dbg !6397
  %fld169 = bitcast %union.u* %u168 to [1 x %union.rtunion_def]*, !dbg !6397
  %arrayidx170 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld169, i64 0, i64 1, !dbg !6397
  %rt_rtx171 = bitcast %union.rtunion_def* %arrayidx170 to %struct.rtx_def**, !dbg !6397
  %115 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx171, align 8, !dbg !6397
  %call172 = call %union.tree_node* @make_tree(%union.tree_node* %113, %struct.rtx_def* %115), !dbg !6397
  %call173 = call %union.tree_node* @build2_stat(i32 67, %union.tree_node* %109, %union.tree_node* %call167, %union.tree_node* %call172), !dbg !6397
  %call174 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %108, %union.tree_node* %call173), !dbg !6397
  store %union.tree_node* %call174, %union.tree_node** %retval, align 8, !dbg !6398
  br label %return, !dbg !6398

sw.bb175:                                         ; preds = %entry, %entry
  %116 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 2), align 8, !dbg !6399
  %117 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6400
  %u176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %117, i32 0, i32 1, !dbg !6400
  %fld177 = bitcast %union.u* %u176 to [1 x %union.rtunion_def]*, !dbg !6400
  %arrayidx178 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld177, i64 0, i64 0, !dbg !6400
  %rt_rtx179 = bitcast %union.rtunion_def* %arrayidx178 to %struct.rtx_def**, !dbg !6400
  %118 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx179, align 8, !dbg !6400
  %119 = bitcast %struct.rtx_def* %118 to i32*, !dbg !6400
  %bf.load180 = load i32, i32* %119, align 8, !dbg !6400
  %bf.lshr181 = lshr i32 %bf.load180, 16, !dbg !6400
  %bf.clear182 = and i32 %bf.lshr181, 255, !dbg !6400
  %120 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6401
  %121 = bitcast %struct.rtx_def* %120 to i32*, !dbg !6401
  %bf.load183 = load i32, i32* %121, align 8, !dbg !6401
  %bf.clear184 = and i32 %bf.load183, 65535, !dbg !6401
  %cmp185 = icmp eq i32 %bf.clear184, 99, !dbg !6402
  %conv186 = zext i1 %cmp185 to i32, !dbg !6402
  %call187 = call %union.tree_node* %116(i32 %bf.clear182, i32 %conv186), !dbg !6403
  store %union.tree_node* %call187, %union.tree_node** %t, align 8, !dbg !6404
  %122 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6405
  %123 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6405
  %124 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6405
  %u188 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1, !dbg !6405
  %fld189 = bitcast %union.u* %u188 to [1 x %union.rtunion_def]*, !dbg !6405
  %arrayidx190 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld189, i64 0, i64 0, !dbg !6405
  %rt_rtx191 = bitcast %union.rtunion_def* %arrayidx190 to %struct.rtx_def**, !dbg !6405
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx191, align 8, !dbg !6405
  %call192 = call %union.tree_node* @make_tree(%union.tree_node* %123, %struct.rtx_def* %125), !dbg !6405
  %call193 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %122, %union.tree_node* %call192), !dbg !6405
  store %union.tree_node* %call193, %union.tree_node** %retval, align 8, !dbg !6406
  br label %return, !dbg !6406

sw.bb194:                                         ; preds = %entry
  %126 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6407
  %127 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6408
  %u195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1, !dbg !6408
  %fld196 = bitcast %union.u* %u195 to [1 x %union.rtunion_def]*, !dbg !6408
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i64 0, i64 0, !dbg !6408
  %rt_rtx198 = bitcast %union.rtunion_def* %arrayidx197 to %struct.rtx_def**, !dbg !6408
  %128 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx198, align 8, !dbg !6408
  %call199 = call %union.tree_node* @make_tree(%union.tree_node* %126, %struct.rtx_def* %128), !dbg !6409
  store %union.tree_node* %call199, %union.tree_node** %retval, align 8, !dbg !6410
  br label %return, !dbg !6410

sw.bb200:                                         ; preds = %entry
  %129 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6411
  %130 = bitcast %struct.rtx_def* %129 to i32*, !dbg !6411
  %bf.load201 = load i32, i32* %130, align 8, !dbg !6411
  %bf.lshr202 = lshr i32 %bf.load201, 26, !dbg !6411
  %bf.clear203 = and i32 %bf.lshr202, 1, !dbg !6411
  %tobool204 = icmp ne i32 %bf.clear203, 0, !dbg !6411
  br i1 %tobool204, label %cond.true205, label %cond.false206, !dbg !6411

cond.true205:                                     ; preds = %sw.bb200
  br label %cond.end210, !dbg !6411

cond.false206:                                    ; preds = %sw.bb200
  %131 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6411
  %u207 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1, !dbg !6411
  %fld208 = bitcast %union.u* %u207 to [1 x %union.rtunion_def]*, !dbg !6411
  %arrayidx209 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld208, i64 0, i64 2, !dbg !6411
  %rt_tree = bitcast %union.rtunion_def* %arrayidx209 to %union.tree_node**, !dbg !6411
  %132 = load %union.tree_node*, %union.tree_node** %rt_tree, align 8, !dbg !6411
  br label %cond.end210, !dbg !6411

cond.end210:                                      ; preds = %cond.false206, %cond.true205
  %cond211 = phi %union.tree_node* [ null, %cond.true205 ], [ %132, %cond.false206 ], !dbg !6411
  store %union.tree_node* %cond211, %union.tree_node** %t, align 8, !dbg !6412
  %133 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6413
  %tobool212 = icmp ne %union.tree_node* %133, null, !dbg !6413
  br i1 %tobool212, label %if.then213, label %if.end216, !dbg !6415

if.then213:                                       ; preds = %cond.end210
  %134 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6416
  %135 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6416
  %call214 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %135), !dbg !6416
  %call215 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %134, %union.tree_node* %call214), !dbg !6416
  store %union.tree_node* %call215, %union.tree_node** %retval, align 8, !dbg !6417
  br label %return, !dbg !6417

if.end216:                                        ; preds = %cond.end210
  br label %sw.default, !dbg !6413

sw.default:                                       ; preds = %entry, %if.end216
  %136 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6418
  %137 = bitcast %struct.rtx_def* %136 to i32*, !dbg !6418
  %bf.load217 = load i32, i32* %137, align 8, !dbg !6418
  %bf.clear218 = and i32 %bf.load217, 65535, !dbg !6418
  %cmp219 = icmp eq i32 %bf.clear218, 8, !dbg !6418
  br i1 %cmp219, label %cond.true235, label %lor.lhs.false, !dbg !6418

lor.lhs.false:                                    ; preds = %sw.default
  %138 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6418
  %139 = bitcast %struct.rtx_def* %138 to i32*, !dbg !6418
  %bf.load221 = load i32, i32* %139, align 8, !dbg !6418
  %bf.clear222 = and i32 %bf.load221, 65535, !dbg !6418
  %cmp223 = icmp eq i32 %bf.clear222, 7, !dbg !6418
  br i1 %cmp223, label %cond.true235, label %lor.lhs.false225, !dbg !6418

lor.lhs.false225:                                 ; preds = %lor.lhs.false
  %140 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6418
  %141 = bitcast %struct.rtx_def* %140 to i32*, !dbg !6418
  %bf.load226 = load i32, i32* %141, align 8, !dbg !6418
  %bf.clear227 = and i32 %bf.load226, 65535, !dbg !6418
  %cmp228 = icmp eq i32 %bf.clear227, 9, !dbg !6418
  br i1 %cmp228, label %cond.true235, label %lor.lhs.false230, !dbg !6418

lor.lhs.false230:                                 ; preds = %lor.lhs.false225
  %142 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6418
  %143 = bitcast %struct.rtx_def* %142 to i32*, !dbg !6418
  %bf.load231 = load i32, i32* %143, align 8, !dbg !6418
  %bf.clear232 = and i32 %bf.load231, 65535, !dbg !6418
  %cmp233 = icmp eq i32 %bf.clear232, 10, !dbg !6418
  br i1 %cmp233, label %cond.true235, label %cond.false240, !dbg !6418

cond.true235:                                     ; preds = %lor.lhs.false230, %lor.lhs.false225, %lor.lhs.false, %sw.default
  %144 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6418
  %u236 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1, !dbg !6418
  %fld237 = bitcast %union.u* %u236 to [1 x %union.rtunion_def]*, !dbg !6418
  %arrayidx238 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld237, i64 0, i64 4, !dbg !6418
  %rt_int = bitcast %union.rtunion_def* %arrayidx238 to i32*, !dbg !6418
  %145 = load i32, i32* %rt_int, align 8, !dbg !6418
  %call239 = call i32 @locator_location(i32 %145), !dbg !6418
  br label %cond.end241, !dbg !6418

cond.false240:                                    ; preds = %lor.lhs.false230
  br label %cond.end241, !dbg !6418

cond.end241:                                      ; preds = %cond.false240, %cond.true235
  %cond242 = phi i32 [ %call239, %cond.true235 ], [ 0, %cond.false240 ], !dbg !6418
  %146 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6418
  %call243 = call %union.tree_node* @build_decl_stat(i32 %cond242, i32 32, %union.tree_node* null, %union.tree_node* %146), !dbg !6418
  store %union.tree_node* %call243, %union.tree_node** %t, align 8, !dbg !6419
  %147 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6420
  %base244 = bitcast %union.tree_node* %147 to %struct.tree_base*, !dbg !6420
  %148 = bitcast %struct.tree_base* %base244 to i64*, !dbg !6420
  %bf.load245 = load i64, i64* %148, align 8, !dbg !6420
  %bf.clear246 = and i64 %bf.load245, 65535, !dbg !6420
  %bf.cast247 = trunc i64 %bf.clear246 to i32, !dbg !6420
  %cmp248 = icmp eq i32 %bf.cast247, 10, !dbg !6420
  br i1 %cmp248, label %if.then257, label %lor.lhs.false250, !dbg !6420

lor.lhs.false250:                                 ; preds = %cond.end241
  %149 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6420
  %base251 = bitcast %union.tree_node* %149 to %struct.tree_base*, !dbg !6420
  %150 = bitcast %struct.tree_base* %base251 to i64*, !dbg !6420
  %bf.load252 = load i64, i64* %150, align 8, !dbg !6420
  %bf.clear253 = and i64 %bf.load252, 65535, !dbg !6420
  %bf.cast254 = trunc i64 %bf.clear253 to i32, !dbg !6420
  %cmp255 = icmp eq i32 %bf.cast254, 12, !dbg !6420
  br i1 %cmp255, label %if.then257, label %if.end282, !dbg !6422

if.then257:                                       ; preds = %lor.lhs.false250, %cond.end241
  %151 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6423
  %base258 = bitcast %union.tree_node* %151 to %struct.tree_base*, !dbg !6423
  %152 = bitcast %struct.tree_base* %base258 to i64*, !dbg !6423
  %bf.load259 = load i64, i64* %152, align 8, !dbg !6423
  %bf.clear260 = and i64 %bf.load259, 65535, !dbg !6423
  %bf.cast261 = trunc i64 %bf.clear260 to i32, !dbg !6423
  %cmp262 = icmp eq i32 %bf.cast261, 14, !dbg !6423
  br i1 %cmp262, label %cond.true264, label %cond.false266, !dbg !6423

cond.true264:                                     ; preds = %if.then257
  %153 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6423
  %call265 = call i32 @vector_type_mode(%union.tree_node* %153), !dbg !6423
  br label %cond.end272, !dbg !6423

cond.false266:                                    ; preds = %if.then257
  %154 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6423
  %type267 = bitcast %union.tree_node* %154 to %struct.tree_type*, !dbg !6423
  %mode268 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type267, i32 0, i32 6, !dbg !6423
  %bf.load269 = load i32, i32* %mode268, align 4, !dbg !6423
  %bf.lshr270 = lshr i32 %bf.load269, 16, !dbg !6423
  %bf.clear271 = and i32 %bf.lshr270, 255, !dbg !6423
  br label %cond.end272, !dbg !6423

cond.end272:                                      ; preds = %cond.false266, %cond.true264
  %cond273 = phi i32 [ %call265, %cond.true264 ], [ %bf.clear271, %cond.false266 ], !dbg !6423
  %155 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6424
  %156 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6425
  %common274 = bitcast %union.tree_node* %156 to %struct.tree_common*, !dbg !6425
  %type275 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common274, i32 0, i32 2, !dbg !6425
  %157 = load %union.tree_node*, %union.tree_node** %type275, align 8, !dbg !6425
  %base276 = bitcast %union.tree_node* %157 to %struct.tree_base*, !dbg !6425
  %158 = bitcast %struct.tree_base* %base276 to i64*, !dbg !6425
  %bf.load277 = load i64, i64* %158, align 8, !dbg !6425
  %bf.lshr278 = lshr i64 %bf.load277, 56, !dbg !6425
  %bf.cast279 = trunc i64 %bf.lshr278 to i32, !dbg !6425
  %conv280 = trunc i32 %bf.cast279 to i8, !dbg !6425
  %call281 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 %cond273, %struct.rtx_def* %155, i8 zeroext %conv280), !dbg !6426
  store %struct.rtx_def* %call281, %struct.rtx_def** %x.addr, align 8, !dbg !6427
  br label %if.end282, !dbg !6428

if.end282:                                        ; preds = %cond.end272, %lor.lhs.false250
  %159 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6429
  %160 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6430
  %decl_with_rtl = bitcast %union.tree_node* %160 to %struct.tree_decl_with_rtl*, !dbg !6431
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !6432
  store %struct.rtx_def* %159, %struct.rtx_def** %rtl, align 8, !dbg !6433
  %161 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6434
  store %union.tree_node* %161, %union.tree_node** %retval, align 8, !dbg !6435
  br label %return, !dbg !6435

return:                                           ; preds = %if.end282, %if.then213, %sw.bb194, %sw.bb175, %sw.bb161, %if.end148, %sw.bb124, %sw.bb110, %sw.bb98, %sw.bb86, %sw.bb79, %sw.bb67, %sw.bb56, %for.end, %if.end39, %if.end
  %162 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6436
  ret %union.tree_node* %162, !dbg !6436
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_mult(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %unsignedp) #0 !dbg !6437 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %variant = alloca i32, align 4
  %algorithm = alloca %struct.algorithm, align 4
  %max_cost = alloca i32, align 4
  %speed = alloca i8, align 1
  %coeff = alloca i64, align 8
  %fake_reg = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %shift = alloca i32, align 4
  %temp147 = alloca %struct.rtx_def*, align 8
  %d = alloca %struct.real_value, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6440, metadata !DIExpression()), !dbg !6441
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !6442, metadata !DIExpression()), !dbg !6443
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !6444, metadata !DIExpression()), !dbg !6445
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !6446, metadata !DIExpression()), !dbg !6447
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !6448, metadata !DIExpression()), !dbg !6449
  call void @llvm.dbg.declare(metadata i32* %variant, metadata !6450, metadata !DIExpression()), !dbg !6451
  call void @llvm.dbg.declare(metadata %struct.algorithm* %algorithm, metadata !6452, metadata !DIExpression()), !dbg !6453
  call void @llvm.dbg.declare(metadata i32* %max_cost, metadata !6454, metadata !DIExpression()), !dbg !6455
  call void @llvm.dbg.declare(metadata i8* %speed, metadata !6456, metadata !DIExpression()), !dbg !6457
  %call = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !6458
  store i8 %call, i8* %speed, align 1, !dbg !6457
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6459
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6461
  %cmp = icmp eq %struct.rtx_def* %0, %1, !dbg !6462
  br i1 %cmp, label %if.then, label %if.end, !dbg !6463

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6464
  store %struct.rtx_def* %2, %struct.rtx_def** %retval, align 8, !dbg !6465
  br label %return, !dbg !6465

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6466
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !6468
  %cmp1 = icmp eq %struct.rtx_def* %3, %4, !dbg !6469
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !6470

if.then2:                                         ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6471
  store %struct.rtx_def* %5, %struct.rtx_def** %retval, align 8, !dbg !6472
  br label %return, !dbg !6472

if.end3:                                          ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6473
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !6475
  %cmp4 = icmp eq %struct.rtx_def* %6, %7, !dbg !6476
  br i1 %cmp4, label %if.then5, label %if.end10, !dbg !6477

if.then5:                                         ; preds = %if.end3
  %8 = load i32, i32* %mode.addr, align 4, !dbg !6478
  %9 = load i32, i32* %mode.addr, align 4, !dbg !6479
  %idxprom = zext i32 %9 to i64, !dbg !6479
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !6479
  %10 = load i8, i8* %arrayidx, align 1, !dbg !6479
  %conv = zext i8 %10 to i32, !dbg !6479
  %cmp6 = icmp eq i32 %conv, 2, !dbg !6480
  br i1 %cmp6, label %land.lhs.true, label %land.end, !dbg !6481

land.lhs.true:                                    ; preds = %if.then5
  %11 = load i32, i32* %unsignedp.addr, align 4, !dbg !6482
  %tobool = icmp ne i32 %11, 0, !dbg !6482
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6483

land.rhs:                                         ; preds = %land.lhs.true
  %12 = load i32, i32* @flag_trapv, align 4, !dbg !6484
  %tobool8 = icmp ne i32 %12, 0, !dbg !6483
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.then5
  %13 = phi i1 [ false, %land.lhs.true ], [ false, %if.then5 ], [ %tobool8, %land.rhs ], !dbg !6485
  %14 = zext i1 %13 to i64, !dbg !6479
  %cond = select i1 %13, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 65), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), !dbg !6479
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6486
  %16 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6487
  %call9 = call %struct.rtx_def* @expand_unop(i32 %8, %struct.optab_d* %cond, %struct.rtx_def* %15, %struct.rtx_def* %16, i32 0), !dbg !6488
  store %struct.rtx_def* %call9, %struct.rtx_def** %retval, align 8, !dbg !6489
  br label %return, !dbg !6489

if.end10:                                         ; preds = %if.end3
  %17 = load i32, i32* %mode.addr, align 4, !dbg !6490
  %idxprom11 = zext i32 %17 to i64, !dbg !6490
  %arrayidx12 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom11, !dbg !6490
  %18 = load i8, i8* %arrayidx12, align 1, !dbg !6490
  %conv13 = zext i8 %18 to i32, !dbg !6490
  %cmp14 = icmp eq i32 %conv13, 2, !dbg !6490
  br i1 %cmp14, label %land.lhs.true21, label %lor.lhs.false, !dbg !6490

lor.lhs.false:                                    ; preds = %if.end10
  %19 = load i32, i32* %mode.addr, align 4, !dbg !6490
  %idxprom16 = zext i32 %19 to i64, !dbg !6490
  %arrayidx17 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom16, !dbg !6490
  %20 = load i8, i8* %arrayidx17, align 1, !dbg !6490
  %conv18 = zext i8 %20 to i32, !dbg !6490
  %cmp19 = icmp eq i32 %conv18, 3, !dbg !6490
  br i1 %cmp19, label %land.lhs.true21, label %if.end141, !dbg !6492

land.lhs.true21:                                  ; preds = %lor.lhs.false, %if.end10
  %21 = load i32, i32* %unsignedp.addr, align 4, !dbg !6493
  %tobool22 = icmp ne i32 %21, 0, !dbg !6493
  br i1 %tobool22, label %if.then25, label %lor.lhs.false23, !dbg !6494

lor.lhs.false23:                                  ; preds = %land.lhs.true21
  %22 = load i32, i32* @flag_trapv, align 4, !dbg !6495
  %tobool24 = icmp ne i32 %22, 0, !dbg !6495
  br i1 %tobool24, label %if.end141, label %if.then25, !dbg !6496

if.then25:                                        ; preds = %lor.lhs.false23, %land.lhs.true21
  call void @llvm.dbg.declare(metadata i64* %coeff, metadata !6497, metadata !DIExpression()), !dbg !6499
  store i64 0, i64* %coeff, align 8, !dbg !6499
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %fake_reg, metadata !6500, metadata !DIExpression()), !dbg !6501
  %23 = load i32, i32* %mode.addr, align 4, !dbg !6502
  %call26 = call %struct.rtx_def* @gen_raw_REG(i32 %23, i32 58), !dbg !6503
  store %struct.rtx_def* %call26, %struct.rtx_def** %fake_reg, align 8, !dbg !6501
  %24 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6504
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !6504
  %bf.load = load i32, i32* %25, align 8, !dbg !6504
  %bf.clear = and i32 %bf.load, 65535, !dbg !6504
  %cmp27 = icmp eq i32 %bf.clear, 30, !dbg !6504
  br i1 %cmp27, label %if.then29, label %if.else71, !dbg !6506

if.then29:                                        ; preds = %if.then25
  %26 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6507
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !6507
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !6507
  %arrayidx30 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !6507
  %27 = load i64, i64* %arrayidx30, align 8, !dbg !6507
  %cmp31 = icmp slt i64 %27, 0, !dbg !6510
  br i1 %cmp31, label %land.lhs.true33, label %if.else, !dbg !6511

land.lhs.true33:                                  ; preds = %if.then29
  %28 = load i32, i32* %mode.addr, align 4, !dbg !6512
  %idxprom34 = zext i32 %28 to i64, !dbg !6512
  %arrayidx35 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom34, !dbg !6512
  %29 = load i8, i8* %arrayidx35, align 1, !dbg !6512
  %conv36 = zext i8 %29 to i16, !dbg !6512
  %conv37 = zext i16 %conv36 to i32, !dbg !6512
  %mul = mul nsw i32 %conv37, 8, !dbg !6512
  %conv38 = trunc i32 %mul to i16, !dbg !6512
  %conv39 = zext i16 %conv38 to i32, !dbg !6512
  %cmp40 = icmp sgt i32 %conv39, 64, !dbg !6513
  br i1 %cmp40, label %if.then42, label %if.else, !dbg !6514

if.then42:                                        ; preds = %land.lhs.true33
  %30 = load i32, i32* %mode.addr, align 4, !dbg !6515
  %31 = load %struct.rtx_def*, %struct.rtx_def** %fake_reg, align 8, !dbg !6515
  %32 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6515
  %call43 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %30, %struct.rtx_def* %31, %struct.rtx_def* %32), !dbg !6515
  %33 = load i8, i8* %speed, align 1, !dbg !6517
  %call44 = call i32 @rtx_cost(%struct.rtx_def* %call43, i32 23, i8 zeroext %33), !dbg !6518
  %34 = load i8, i8* %speed, align 1, !dbg !6519
  %idxprom45 = zext i8 %34 to i64, !dbg !6520
  %arrayidx46 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @neg_cost, i64 0, i64 %idxprom45, !dbg !6520
  %35 = load i32, i32* %mode.addr, align 4, !dbg !6521
  %idxprom47 = zext i32 %35 to i64, !dbg !6520
  %arrayidx48 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx46, i64 0, i64 %idxprom47, !dbg !6520
  %36 = load i32, i32* %arrayidx48, align 4, !dbg !6520
  %sub = sub nsw i32 %call44, %36, !dbg !6522
  store i32 %sub, i32* %max_cost, align 4, !dbg !6523
  %37 = load i32, i32* %max_cost, align 4, !dbg !6524
  %cmp49 = icmp sgt i32 %37, 0, !dbg !6526
  br i1 %cmp49, label %land.lhs.true51, label %if.end66, !dbg !6527

land.lhs.true51:                                  ; preds = %if.then42
  %38 = load i32, i32* %mode.addr, align 4, !dbg !6528
  %39 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6529
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !6529
  %hwint53 = bitcast %union.u* %u52 to [1 x i64]*, !dbg !6529
  %arrayidx54 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint53, i64 0, i64 0, !dbg !6529
  %40 = load i64, i64* %arrayidx54, align 8, !dbg !6529
  %sub55 = sub nsw i64 0, %40, !dbg !6530
  %41 = load i32, i32* %max_cost, align 4, !dbg !6531
  %call56 = call zeroext i8 @choose_mult_variant(i32 %38, i64 %sub55, %struct.algorithm* %algorithm, i32* %variant, i32 %41), !dbg !6532
  %conv57 = zext i8 %call56 to i32, !dbg !6532
  %tobool58 = icmp ne i32 %conv57, 0, !dbg !6532
  br i1 %tobool58, label %if.then59, label %if.end66, !dbg !6533

if.then59:                                        ; preds = %land.lhs.true51
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !6534, metadata !DIExpression()), !dbg !6536
  %42 = load i32, i32* %mode.addr, align 4, !dbg !6537
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6538
  %44 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6539
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !6539
  %hwint61 = bitcast %union.u* %u60 to [1 x i64]*, !dbg !6539
  %arrayidx62 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint61, i64 0, i64 0, !dbg !6539
  %45 = load i64, i64* %arrayidx62, align 8, !dbg !6539
  %sub63 = sub nsw i64 0, %45, !dbg !6540
  %46 = load i32, i32* %variant, align 4, !dbg !6541
  %call64 = call %struct.rtx_def* @expand_mult_const(i32 %42, %struct.rtx_def* %43, i64 %sub63, %struct.rtx_def* null, %struct.algorithm* %algorithm, i32 %46), !dbg !6542
  store %struct.rtx_def* %call64, %struct.rtx_def** %temp, align 8, !dbg !6536
  %47 = load i32, i32* %mode.addr, align 4, !dbg !6543
  %48 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6544
  %49 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6545
  %call65 = call %struct.rtx_def* @expand_unop(i32 %47, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %48, %struct.rtx_def* %49, i32 0), !dbg !6546
  store %struct.rtx_def* %call65, %struct.rtx_def** %retval, align 8, !dbg !6547
  br label %return, !dbg !6547

if.end66:                                         ; preds = %land.lhs.true51, %if.then42
  br label %if.end70, !dbg !6548

if.else:                                          ; preds = %land.lhs.true33, %if.then29
  %50 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6549
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !6549
  %hwint68 = bitcast %union.u* %u67 to [1 x i64]*, !dbg !6549
  %arrayidx69 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint68, i64 0, i64 0, !dbg !6549
  %51 = load i64, i64* %arrayidx69, align 8, !dbg !6549
  store i64 %51, i64* %coeff, align 8, !dbg !6550
  br label %if.end70

if.end70:                                         ; preds = %if.else, %if.end66
  br label %if.end119, !dbg !6551

if.else71:                                        ; preds = %if.then25
  %52 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6552
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !6552
  %bf.load72 = load i32, i32* %53, align 8, !dbg !6552
  %bf.clear73 = and i32 %bf.load72, 65535, !dbg !6552
  %cmp74 = icmp eq i32 %bf.clear73, 32, !dbg !6554
  br i1 %cmp74, label %if.then76, label %if.end118, !dbg !6555

if.then76:                                        ; preds = %if.else71
  %54 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6556
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !6556
  %hwint78 = bitcast %union.u* %u77 to [1 x i64]*, !dbg !6556
  %arrayidx79 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint78, i64 0, i64 1, !dbg !6556
  %55 = load i64, i64* %arrayidx79, align 8, !dbg !6556
  %cmp80 = icmp eq i64 %55, 0, !dbg !6559
  br i1 %cmp80, label %land.lhs.true82, label %if.else92, !dbg !6560

land.lhs.true82:                                  ; preds = %if.then76
  %56 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6561
  %u83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !6561
  %hwint84 = bitcast %union.u* %u83 to [1 x i64]*, !dbg !6561
  %arrayidx85 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint84, i64 0, i64 0, !dbg !6561
  %57 = load i64, i64* %arrayidx85, align 8, !dbg !6561
  %cmp86 = icmp sgt i64 %57, 0, !dbg !6562
  br i1 %cmp86, label %if.then88, label %if.else92, !dbg !6563

if.then88:                                        ; preds = %land.lhs.true82
  %58 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6564
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !6564
  %hwint90 = bitcast %union.u* %u89 to [1 x i64]*, !dbg !6564
  %arrayidx91 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint90, i64 0, i64 0, !dbg !6564
  %59 = load i64, i64* %arrayidx91, align 8, !dbg !6564
  store i64 %59, i64* %coeff, align 8, !dbg !6565
  br label %if.end117, !dbg !6566

if.else92:                                        ; preds = %land.lhs.true82, %if.then76
  %60 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6567
  %u93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !6567
  %hwint94 = bitcast %union.u* %u93 to [1 x i64]*, !dbg !6567
  %arrayidx95 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint94, i64 0, i64 0, !dbg !6567
  %61 = load i64, i64* %arrayidx95, align 8, !dbg !6567
  %cmp96 = icmp eq i64 %61, 0, !dbg !6569
  br i1 %cmp96, label %land.lhs.true98, label %if.end116, !dbg !6570

land.lhs.true98:                                  ; preds = %if.else92
  %62 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6571
  %u99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !6571
  %hwint100 = bitcast %union.u* %u99 to [1 x i64]*, !dbg !6571
  %arrayidx101 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint100, i64 0, i64 1, !dbg !6571
  %63 = load i64, i64* %arrayidx101, align 8, !dbg !6571
  %64 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6571
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !6571
  %hwint103 = bitcast %union.u* %u102 to [1 x i64]*, !dbg !6571
  %arrayidx104 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint103, i64 0, i64 1, !dbg !6571
  %65 = load i64, i64* %arrayidx104, align 8, !dbg !6571
  %sub105 = sub nsw i64 %65, 1, !dbg !6571
  %and = and i64 %63, %sub105, !dbg !6571
  %cmp106 = icmp eq i64 %and, 0, !dbg !6571
  br i1 %cmp106, label %if.then108, label %if.end116, !dbg !6572

if.then108:                                       ; preds = %land.lhs.true98
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !6573, metadata !DIExpression()), !dbg !6575
  %66 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6576
  %u109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !6576
  %hwint110 = bitcast %union.u* %u109 to [1 x i64]*, !dbg !6576
  %arrayidx111 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint110, i64 0, i64 1, !dbg !6576
  %67 = load i64, i64* %arrayidx111, align 8, !dbg !6576
  %call112 = call i32 @floor_log2(i64 %67), !dbg !6577
  %add = add nsw i32 %call112, 64, !dbg !6578
  store i32 %add, i32* %shift, align 4, !dbg !6575
  %68 = load i32, i32* %mode.addr, align 4, !dbg !6579
  %69 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6580
  %70 = load i32, i32* %shift, align 4, !dbg !6581
  %conv113 = sext i32 %70 to i64, !dbg !6581
  %call114 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv113), !dbg !6582
  %71 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6583
  %72 = load i32, i32* %unsignedp.addr, align 4, !dbg !6584
  %call115 = call %struct.rtx_def* @expand_shift(i32 83, i32 %68, %struct.rtx_def* %69, %union.tree_node* %call114, %struct.rtx_def* %71, i32 %72), !dbg !6585
  store %struct.rtx_def* %call115, %struct.rtx_def** %retval, align 8, !dbg !6586
  br label %return, !dbg !6586

if.end116:                                        ; preds = %land.lhs.true98, %if.else92
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.then88
  br label %if.end118, !dbg !6587

if.end118:                                        ; preds = %if.end117, %if.else71
  br label %if.end119

if.end119:                                        ; preds = %if.end118, %if.end70
  %73 = load i64, i64* %coeff, align 8, !dbg !6588
  %cmp120 = icmp ne i64 %73, 0, !dbg !6590
  br i1 %cmp120, label %if.then122, label %if.end140, !dbg !6591

if.then122:                                       ; preds = %if.end119
  %74 = load i64, i64* %coeff, align 8, !dbg !6592
  %75 = load i64, i64* %coeff, align 8, !dbg !6592
  %sub123 = sub nsw i64 %75, 1, !dbg !6592
  %and124 = and i64 %74, %sub123, !dbg !6592
  %cmp125 = icmp eq i64 %and124, 0, !dbg !6592
  br i1 %cmp125, label %if.then127, label %if.end132, !dbg !6595

if.then127:                                       ; preds = %if.then122
  %76 = load i32, i32* %mode.addr, align 4, !dbg !6596
  %77 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6597
  %78 = load i64, i64* %coeff, align 8, !dbg !6598
  %call128 = call i32 @floor_log2(i64 %78), !dbg !6599
  %conv129 = sext i32 %call128 to i64, !dbg !6599
  %call130 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv129), !dbg !6600
  %79 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6601
  %80 = load i32, i32* %unsignedp.addr, align 4, !dbg !6602
  %call131 = call %struct.rtx_def* @expand_shift(i32 83, i32 %76, %struct.rtx_def* %77, %union.tree_node* %call130, %struct.rtx_def* %79, i32 %80), !dbg !6603
  store %struct.rtx_def* %call131, %struct.rtx_def** %retval, align 8, !dbg !6604
  br label %return, !dbg !6604

if.end132:                                        ; preds = %if.then122
  %81 = load i32, i32* %mode.addr, align 4, !dbg !6605
  %82 = load %struct.rtx_def*, %struct.rtx_def** %fake_reg, align 8, !dbg !6605
  %83 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6605
  %call133 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %81, %struct.rtx_def* %82, %struct.rtx_def* %83), !dbg !6605
  %84 = load i8, i8* %speed, align 1, !dbg !6606
  %call134 = call i32 @rtx_cost(%struct.rtx_def* %call133, i32 23, i8 zeroext %84), !dbg !6607
  store i32 %call134, i32* %max_cost, align 4, !dbg !6608
  %85 = load i32, i32* %mode.addr, align 4, !dbg !6609
  %86 = load i64, i64* %coeff, align 8, !dbg !6611
  %87 = load i32, i32* %max_cost, align 4, !dbg !6612
  %call135 = call zeroext i8 @choose_mult_variant(i32 %85, i64 %86, %struct.algorithm* %algorithm, i32* %variant, i32 %87), !dbg !6613
  %tobool136 = icmp ne i8 %call135, 0, !dbg !6613
  br i1 %tobool136, label %if.then137, label %if.end139, !dbg !6614

if.then137:                                       ; preds = %if.end132
  %88 = load i32, i32* %mode.addr, align 4, !dbg !6615
  %89 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6616
  %90 = load i64, i64* %coeff, align 8, !dbg !6617
  %91 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6618
  %92 = load i32, i32* %variant, align 4, !dbg !6619
  %call138 = call %struct.rtx_def* @expand_mult_const(i32 %88, %struct.rtx_def* %89, i64 %90, %struct.rtx_def* %91, %struct.algorithm* %algorithm, i32 %92), !dbg !6620
  store %struct.rtx_def* %call138, %struct.rtx_def** %retval, align 8, !dbg !6621
  br label %return, !dbg !6621

if.end139:                                        ; preds = %if.end132
  br label %if.end140, !dbg !6622

if.end140:                                        ; preds = %if.end139, %if.end119
  br label %if.end141, !dbg !6623

if.end141:                                        ; preds = %if.end140, %lor.lhs.false23, %lor.lhs.false
  %93 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6624
  %94 = bitcast %struct.rtx_def* %93 to i32*, !dbg !6624
  %bf.load142 = load i32, i32* %94, align 8, !dbg !6624
  %bf.clear143 = and i32 %bf.load142, 65535, !dbg !6624
  %cmp144 = icmp eq i32 %bf.clear143, 32, !dbg !6626
  br i1 %cmp144, label %if.then146, label %if.end148, !dbg !6627

if.then146:                                       ; preds = %if.end141
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp147, metadata !6628, metadata !DIExpression()), !dbg !6630
  %95 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6631
  store %struct.rtx_def* %95, %struct.rtx_def** %temp147, align 8, !dbg !6630
  %96 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6632
  store %struct.rtx_def* %96, %struct.rtx_def** %op0.addr, align 8, !dbg !6633
  %97 = load %struct.rtx_def*, %struct.rtx_def** %temp147, align 8, !dbg !6634
  store %struct.rtx_def* %97, %struct.rtx_def** %op1.addr, align 8, !dbg !6635
  br label %if.end148, !dbg !6636

if.end148:                                        ; preds = %if.then146, %if.end141
  %98 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6637
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !6637
  %bf.load149 = load i32, i32* %99, align 8, !dbg !6637
  %bf.clear150 = and i32 %bf.load149, 65535, !dbg !6637
  %cmp151 = icmp eq i32 %bf.clear150, 32, !dbg !6639
  br i1 %cmp151, label %land.lhs.true153, label %if.end175, !dbg !6640

land.lhs.true153:                                 ; preds = %if.end148
  %100 = load i32, i32* %mode.addr, align 4, !dbg !6641
  %idxprom154 = zext i32 %100 to i64, !dbg !6641
  %arrayidx155 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom154, !dbg !6641
  %101 = load i8, i8* %arrayidx155, align 1, !dbg !6641
  %conv156 = zext i8 %101 to i32, !dbg !6641
  %cmp157 = icmp eq i32 %conv156, 8, !dbg !6641
  br i1 %cmp157, label %if.then165, label %lor.lhs.false159, !dbg !6641

lor.lhs.false159:                                 ; preds = %land.lhs.true153
  %102 = load i32, i32* %mode.addr, align 4, !dbg !6641
  %idxprom160 = zext i32 %102 to i64, !dbg !6641
  %arrayidx161 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom160, !dbg !6641
  %103 = load i8, i8* %arrayidx161, align 1, !dbg !6641
  %conv162 = zext i8 %103 to i32, !dbg !6641
  %cmp163 = icmp eq i32 %conv162, 9, !dbg !6641
  br i1 %cmp163, label %if.then165, label %if.end175, !dbg !6642

if.then165:                                       ; preds = %lor.lhs.false159, %land.lhs.true153
  call void @llvm.dbg.declare(metadata %struct.real_value* %d, metadata !6643, metadata !DIExpression()), !dbg !6645
  %104 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6646
  %u166 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1, !dbg !6646
  %rv = bitcast %union.u* %u166 to %struct.real_value*, !dbg !6646
  %105 = bitcast %struct.real_value* %d to i8*, !dbg !6646
  %106 = bitcast %struct.real_value* %rv to i8*, !dbg !6646
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 32, i1 false), !dbg !6646
  %call167 = call zeroext i8 @real_compare(i32 101, %struct.real_value* %d, %struct.real_value* @dconst2), !dbg !6647
  %tobool168 = icmp ne i8 %call167, 0, !dbg !6647
  br i1 %tobool168, label %if.then169, label %if.end174, !dbg !6649

if.then169:                                       ; preds = %if.then165
  %107 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6650
  %108 = bitcast %struct.rtx_def* %107 to i32*, !dbg !6650
  %bf.load170 = load i32, i32* %108, align 8, !dbg !6650
  %bf.lshr = lshr i32 %bf.load170, 16, !dbg !6650
  %bf.clear171 = and i32 %bf.lshr, 255, !dbg !6650
  %109 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6652
  %call172 = call %struct.rtx_def* @force_reg(i32 %bf.clear171, %struct.rtx_def* %109), !dbg !6653
  store %struct.rtx_def* %call172, %struct.rtx_def** %op0.addr, align 8, !dbg !6654
  %110 = load i32, i32* %mode.addr, align 4, !dbg !6655
  %111 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6656
  %112 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6657
  %113 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6658
  %114 = load i32, i32* %unsignedp.addr, align 4, !dbg !6659
  %call173 = call %struct.rtx_def* @expand_binop(i32 %110, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %111, %struct.rtx_def* %112, %struct.rtx_def* %113, i32 %114, i32 3), !dbg !6660
  store %struct.rtx_def* %call173, %struct.rtx_def** %retval, align 8, !dbg !6661
  br label %return, !dbg !6661

if.end174:                                        ; preds = %if.then165
  br label %if.end175, !dbg !6662

if.end175:                                        ; preds = %if.end174, %lor.lhs.false159, %if.end148
  %115 = load i32, i32* %mode.addr, align 4, !dbg !6663
  %116 = load i32, i32* %unsignedp.addr, align 4, !dbg !6664
  %tobool176 = icmp ne i32 %116, 0, !dbg !6664
  br i1 %tobool176, label %land.end185, label %land.lhs.true177, !dbg !6665

land.lhs.true177:                                 ; preds = %if.end175
  %117 = load i32, i32* @flag_trapv, align 4, !dbg !6666
  %tobool178 = icmp ne i32 %117, 0, !dbg !6666
  br i1 %tobool178, label %land.rhs179, label %land.end185, !dbg !6667

land.rhs179:                                      ; preds = %land.lhs.true177
  %118 = load i32, i32* %mode.addr, align 4, !dbg !6668
  %idxprom180 = zext i32 %118 to i64, !dbg !6668
  %arrayidx181 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom180, !dbg !6668
  %119 = load i8, i8* %arrayidx181, align 1, !dbg !6668
  %conv182 = zext i8 %119 to i32, !dbg !6668
  %cmp183 = icmp eq i32 %conv182, 2, !dbg !6669
  br label %land.end185

land.end185:                                      ; preds = %land.rhs179, %land.lhs.true177, %if.end175
  %120 = phi i1 [ false, %land.lhs.true177 ], [ false, %if.end175 ], [ %cmp183, %land.rhs179 ], !dbg !6670
  %121 = zext i1 %120 to i64, !dbg !6671
  %cond186 = select i1 %120, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 17), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16), !dbg !6671
  %122 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6672
  %123 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6673
  %124 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6674
  %125 = load i32, i32* %unsignedp.addr, align 4, !dbg !6675
  %call187 = call %struct.rtx_def* @expand_binop(i32 %115, %struct.optab_d* %cond186, %struct.rtx_def* %122, %struct.rtx_def* %123, %struct.rtx_def* %124, i32 %125, i32 3), !dbg !6676
  store %struct.rtx_def* %call187, %struct.rtx_def** %op0.addr, align 8, !dbg !6677
  %126 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6678
  %tobool188 = icmp ne %struct.rtx_def* %126, null, !dbg !6678
  br i1 %tobool188, label %cond.false, label %cond.true, !dbg !6678

cond.true:                                        ; preds = %land.end185
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3253, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6678
  br label %cond.end, !dbg !6678

cond.false:                                       ; preds = %land.end185
  br label %cond.end, !dbg !6678

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond189 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6678
  %127 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6679
  store %struct.rtx_def* %127, %struct.rtx_def** %retval, align 8, !dbg !6680
  br label %return, !dbg !6680

return:                                           ; preds = %cond.end, %if.then169, %if.then137, %if.then127, %if.then108, %if.then59, %land.end, %if.then2, %if.then
  %128 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6681
  ret %struct.rtx_def* %128, !dbg !6681
}

declare dso_local %struct.rtx_def* @gen_raw_REG(i32, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @choose_mult_variant(i32 %mode, i64 %val, %struct.algorithm* %alg, i32* %variant, i32 %mult_cost) #0 !dbg !6682 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %val.addr = alloca i64, align 8
  %alg.addr = alloca %struct.algorithm*, align 8
  %variant.addr = alloca i32*, align 8
  %mult_cost.addr = alloca i32, align 4
  %alg2 = alloca %struct.algorithm, align 4
  %limit = alloca %struct.mult_cost, align 2
  %op_cost = alloca i32, align 4
  %speed = alloca i8, align 1
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6686, metadata !DIExpression()), !dbg !6687
  store i64 %val, i64* %val.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val.addr, metadata !6688, metadata !DIExpression()), !dbg !6689
  store %struct.algorithm* %alg, %struct.algorithm** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.algorithm** %alg.addr, metadata !6690, metadata !DIExpression()), !dbg !6691
  store i32* %variant, i32** %variant.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %variant.addr, metadata !6692, metadata !DIExpression()), !dbg !6693
  store i32 %mult_cost, i32* %mult_cost.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mult_cost.addr, metadata !6694, metadata !DIExpression()), !dbg !6695
  call void @llvm.dbg.declare(metadata %struct.algorithm* %alg2, metadata !6696, metadata !DIExpression()), !dbg !6697
  call void @llvm.dbg.declare(metadata %struct.mult_cost* %limit, metadata !6698, metadata !DIExpression()), !dbg !6699
  call void @llvm.dbg.declare(metadata i32* %op_cost, metadata !6700, metadata !DIExpression()), !dbg !6701
  call void @llvm.dbg.declare(metadata i8* %speed, metadata !6702, metadata !DIExpression()), !dbg !6703
  %call = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !6704
  store i8 %call, i8* %speed, align 1, !dbg !6703
  %0 = load i32, i32* %mult_cost.addr, align 4, !dbg !6705
  %cmp = icmp slt i32 %0, 0, !dbg !6707
  br i1 %cmp, label %if.then, label %if.end, !dbg !6708

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6709
  br label %return, !dbg !6709

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4, !dbg !6710
  %idxprom = zext i32 %1 to i64, !dbg !6710
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !6710
  %2 = load i8, i8* %arrayidx, align 1, !dbg !6710
  %conv = zext i8 %2 to i16, !dbg !6710
  %conv1 = zext i16 %conv to i32, !dbg !6710
  %mul = mul nsw i32 %conv1, 8, !dbg !6710
  %conv2 = trunc i32 %mul to i16, !dbg !6710
  %conv3 = zext i16 %conv2 to i32, !dbg !6710
  %mul4 = mul nsw i32 2, %conv3, !dbg !6711
  %3 = load i8, i8* %speed, align 1, !dbg !6712
  %idxprom5 = zext i8 %3 to i64, !dbg !6713
  %arrayidx6 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom5, !dbg !6713
  %4 = load i32, i32* %mode.addr, align 4, !dbg !6714
  %idxprom7 = zext i32 %4 to i64, !dbg !6713
  %arrayidx8 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx6, i64 0, i64 %idxprom7, !dbg !6713
  %5 = load i32, i32* %arrayidx8, align 4, !dbg !6713
  %mul9 = mul nsw i32 %mul4, %5, !dbg !6715
  store i32 %mul9, i32* %op_cost, align 4, !dbg !6716
  %6 = load i32, i32* %mult_cost.addr, align 4, !dbg !6717
  %7 = load i32, i32* %op_cost, align 4, !dbg !6719
  %cmp10 = icmp sgt i32 %6, %7, !dbg !6720
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !6721

if.then12:                                        ; preds = %if.end
  %8 = load i32, i32* %op_cost, align 4, !dbg !6722
  store i32 %8, i32* %mult_cost.addr, align 4, !dbg !6723
  br label %if.end13, !dbg !6724

if.end13:                                         ; preds = %if.then12, %if.end
  %9 = load i32*, i32** %variant.addr, align 8, !dbg !6725
  store i32 0, i32* %9, align 4, !dbg !6726
  %10 = load i32, i32* %mult_cost.addr, align 4, !dbg !6727
  %conv14 = trunc i32 %10 to i16, !dbg !6727
  %cost = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %limit, i32 0, i32 0, !dbg !6728
  store i16 %conv14, i16* %cost, align 2, !dbg !6729
  %11 = load i32, i32* %mult_cost.addr, align 4, !dbg !6730
  %conv15 = trunc i32 %11 to i16, !dbg !6730
  %latency = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %limit, i32 0, i32 1, !dbg !6731
  store i16 %conv15, i16* %latency, align 2, !dbg !6732
  %12 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6733
  %13 = load i64, i64* %val.addr, align 8, !dbg !6734
  %14 = load i32, i32* %mode.addr, align 4, !dbg !6735
  call void @synth_mult(%struct.algorithm* %12, i64 %13, %struct.mult_cost* %limit, i32 %14), !dbg !6736
  %15 = load i32, i32* %mode.addr, align 4, !dbg !6737
  %idxprom16 = zext i32 %15 to i64, !dbg !6737
  %arrayidx17 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom16, !dbg !6737
  %16 = load i8, i8* %arrayidx17, align 1, !dbg !6737
  %conv18 = zext i8 %16 to i16, !dbg !6737
  %conv19 = zext i16 %conv18 to i32, !dbg !6737
  %mul20 = mul nsw i32 %conv19, 8, !dbg !6737
  %conv21 = trunc i32 %mul20 to i16, !dbg !6737
  %conv22 = zext i16 %conv21 to i32, !dbg !6737
  %cmp23 = icmp sge i32 32, %conv22, !dbg !6739
  br i1 %cmp23, label %if.then25, label %if.end102, !dbg !6740

if.then25:                                        ; preds = %if.end13
  %17 = load i8, i8* %speed, align 1, !dbg !6741
  %idxprom26 = zext i8 %17 to i64, !dbg !6743
  %arrayidx27 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @neg_cost, i64 0, i64 %idxprom26, !dbg !6743
  %18 = load i32, i32* %mode.addr, align 4, !dbg !6744
  %idxprom28 = zext i32 %18 to i64, !dbg !6743
  %arrayidx29 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx27, i64 0, i64 %idxprom28, !dbg !6743
  %19 = load i32, i32* %arrayidx29, align 4, !dbg !6743
  store i32 %19, i32* %op_cost, align 4, !dbg !6745
  %20 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6746
  %cost30 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %20, i32 0, i32 0, !dbg !6746
  %cost31 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost30, i32 0, i32 0, !dbg !6746
  %21 = load i16, i16* %cost31, align 4, !dbg !6746
  %conv32 = sext i16 %21 to i32, !dbg !6746
  %22 = load i32, i32* %mult_cost.addr, align 4, !dbg !6746
  %cmp33 = icmp slt i32 %conv32, %22, !dbg !6746
  br i1 %cmp33, label %if.then45, label %lor.lhs.false, !dbg !6746

lor.lhs.false:                                    ; preds = %if.then25
  %23 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6746
  %cost35 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %23, i32 0, i32 0, !dbg !6746
  %cost36 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost35, i32 0, i32 0, !dbg !6746
  %24 = load i16, i16* %cost36, align 4, !dbg !6746
  %conv37 = sext i16 %24 to i32, !dbg !6746
  %25 = load i32, i32* %mult_cost.addr, align 4, !dbg !6746
  %cmp38 = icmp eq i32 %conv37, %25, !dbg !6746
  br i1 %cmp38, label %land.lhs.true, label %if.else, !dbg !6746

land.lhs.true:                                    ; preds = %lor.lhs.false
  %26 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6746
  %cost40 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %26, i32 0, i32 0, !dbg !6746
  %latency41 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost40, i32 0, i32 1, !dbg !6746
  %27 = load i16, i16* %latency41, align 2, !dbg !6746
  %conv42 = sext i16 %27 to i32, !dbg !6746
  %28 = load i32, i32* %mult_cost.addr, align 4, !dbg !6746
  %cmp43 = icmp slt i32 %conv42, %28, !dbg !6746
  br i1 %cmp43, label %if.then45, label %if.else, !dbg !6748

if.then45:                                        ; preds = %land.lhs.true, %if.then25
  %29 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6749
  %cost46 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %29, i32 0, i32 0, !dbg !6751
  %cost47 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost46, i32 0, i32 0, !dbg !6752
  %30 = load i16, i16* %cost47, align 4, !dbg !6752
  %conv48 = sext i16 %30 to i32, !dbg !6749
  %31 = load i32, i32* %op_cost, align 4, !dbg !6753
  %sub = sub nsw i32 %conv48, %31, !dbg !6754
  %conv49 = trunc i32 %sub to i16, !dbg !6749
  %cost50 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %limit, i32 0, i32 0, !dbg !6755
  store i16 %conv49, i16* %cost50, align 2, !dbg !6756
  %32 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6757
  %cost51 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %32, i32 0, i32 0, !dbg !6758
  %latency52 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost51, i32 0, i32 1, !dbg !6759
  %33 = load i16, i16* %latency52, align 2, !dbg !6759
  %conv53 = sext i16 %33 to i32, !dbg !6757
  %34 = load i32, i32* %op_cost, align 4, !dbg !6760
  %sub54 = sub nsw i32 %conv53, %34, !dbg !6761
  %conv55 = trunc i32 %sub54 to i16, !dbg !6757
  %latency56 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %limit, i32 0, i32 1, !dbg !6762
  store i16 %conv55, i16* %latency56, align 2, !dbg !6763
  br label %if.end63, !dbg !6764

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %35 = load i32, i32* %mult_cost.addr, align 4, !dbg !6765
  %36 = load i32, i32* %op_cost, align 4, !dbg !6767
  %sub57 = sub nsw i32 %35, %36, !dbg !6768
  %conv58 = trunc i32 %sub57 to i16, !dbg !6765
  %cost59 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %limit, i32 0, i32 0, !dbg !6769
  store i16 %conv58, i16* %cost59, align 2, !dbg !6770
  %37 = load i32, i32* %mult_cost.addr, align 4, !dbg !6771
  %38 = load i32, i32* %op_cost, align 4, !dbg !6772
  %sub60 = sub nsw i32 %37, %38, !dbg !6773
  %conv61 = trunc i32 %sub60 to i16, !dbg !6771
  %latency62 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %limit, i32 0, i32 1, !dbg !6774
  store i16 %conv61, i16* %latency62, align 2, !dbg !6775
  br label %if.end63

if.end63:                                         ; preds = %if.else, %if.then45
  %39 = load i64, i64* %val.addr, align 8, !dbg !6776
  %sub64 = sub nsw i64 0, %39, !dbg !6777
  %40 = load i32, i32* %mode.addr, align 4, !dbg !6778
  call void @synth_mult(%struct.algorithm* %alg2, i64 %sub64, %struct.mult_cost* %limit, i32 %40), !dbg !6779
  %41 = load i32, i32* %op_cost, align 4, !dbg !6780
  %cost65 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %alg2, i32 0, i32 0, !dbg !6781
  %cost66 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost65, i32 0, i32 0, !dbg !6782
  %42 = load i16, i16* %cost66, align 4, !dbg !6783
  %conv67 = sext i16 %42 to i32, !dbg !6783
  %add = add nsw i32 %conv67, %41, !dbg !6783
  %conv68 = trunc i32 %add to i16, !dbg !6783
  store i16 %conv68, i16* %cost66, align 4, !dbg !6783
  %43 = load i32, i32* %op_cost, align 4, !dbg !6784
  %cost69 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %alg2, i32 0, i32 0, !dbg !6785
  %latency70 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost69, i32 0, i32 1, !dbg !6786
  %44 = load i16, i16* %latency70, align 2, !dbg !6787
  %conv71 = sext i16 %44 to i32, !dbg !6787
  %add72 = add nsw i32 %conv71, %43, !dbg !6787
  %conv73 = trunc i32 %add72 to i16, !dbg !6787
  store i16 %conv73, i16* %latency70, align 2, !dbg !6787
  %cost74 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %alg2, i32 0, i32 0, !dbg !6788
  %cost75 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost74, i32 0, i32 0, !dbg !6788
  %45 = load i16, i16* %cost75, align 4, !dbg !6788
  %conv76 = sext i16 %45 to i32, !dbg !6788
  %46 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6788
  %cost77 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %46, i32 0, i32 0, !dbg !6788
  %cost78 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost77, i32 0, i32 0, !dbg !6788
  %47 = load i16, i16* %cost78, align 4, !dbg !6788
  %conv79 = sext i16 %47 to i32, !dbg !6788
  %cmp80 = icmp slt i32 %conv76, %conv79, !dbg !6788
  br i1 %cmp80, label %if.then100, label %lor.lhs.false82, !dbg !6788

lor.lhs.false82:                                  ; preds = %if.end63
  %cost83 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %alg2, i32 0, i32 0, !dbg !6788
  %cost84 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost83, i32 0, i32 0, !dbg !6788
  %48 = load i16, i16* %cost84, align 4, !dbg !6788
  %conv85 = sext i16 %48 to i32, !dbg !6788
  %49 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6788
  %cost86 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %49, i32 0, i32 0, !dbg !6788
  %cost87 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost86, i32 0, i32 0, !dbg !6788
  %50 = load i16, i16* %cost87, align 4, !dbg !6788
  %conv88 = sext i16 %50 to i32, !dbg !6788
  %cmp89 = icmp eq i32 %conv85, %conv88, !dbg !6788
  br i1 %cmp89, label %land.lhs.true91, label %if.end101, !dbg !6788

land.lhs.true91:                                  ; preds = %lor.lhs.false82
  %cost92 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %alg2, i32 0, i32 0, !dbg !6788
  %latency93 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost92, i32 0, i32 1, !dbg !6788
  %51 = load i16, i16* %latency93, align 2, !dbg !6788
  %conv94 = sext i16 %51 to i32, !dbg !6788
  %52 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6788
  %cost95 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %52, i32 0, i32 0, !dbg !6788
  %latency96 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost95, i32 0, i32 1, !dbg !6788
  %53 = load i16, i16* %latency96, align 2, !dbg !6788
  %conv97 = sext i16 %53 to i32, !dbg !6788
  %cmp98 = icmp slt i32 %conv94, %conv97, !dbg !6788
  br i1 %cmp98, label %if.then100, label %if.end101, !dbg !6790

if.then100:                                       ; preds = %land.lhs.true91, %if.end63
  %54 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6791
  %55 = bitcast %struct.algorithm* %54 to i8*, !dbg !6792
  %56 = bitcast %struct.algorithm* %alg2 to i8*, !dbg !6792
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 168, i1 false), !dbg !6792
  %57 = load i32*, i32** %variant.addr, align 8, !dbg !6793
  store i32 1, i32* %57, align 4, !dbg !6794
  br label %if.end101, !dbg !6795

if.end101:                                        ; preds = %if.then100, %land.lhs.true91, %lor.lhs.false82
  br label %if.end102, !dbg !6796

if.end102:                                        ; preds = %if.end101, %if.end13
  %58 = load i8, i8* %speed, align 1, !dbg !6797
  %idxprom103 = zext i8 %58 to i64, !dbg !6798
  %arrayidx104 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom103, !dbg !6798
  %59 = load i32, i32* %mode.addr, align 4, !dbg !6799
  %idxprom105 = zext i32 %59 to i64, !dbg !6798
  %arrayidx106 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx104, i64 0, i64 %idxprom105, !dbg !6798
  %60 = load i32, i32* %arrayidx106, align 4, !dbg !6798
  store i32 %60, i32* %op_cost, align 4, !dbg !6800
  %61 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6801
  %cost107 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %61, i32 0, i32 0, !dbg !6801
  %cost108 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost107, i32 0, i32 0, !dbg !6801
  %62 = load i16, i16* %cost108, align 4, !dbg !6801
  %conv109 = sext i16 %62 to i32, !dbg !6801
  %63 = load i32, i32* %mult_cost.addr, align 4, !dbg !6801
  %cmp110 = icmp slt i32 %conv109, %63, !dbg !6801
  br i1 %cmp110, label %if.then124, label %lor.lhs.false112, !dbg !6801

lor.lhs.false112:                                 ; preds = %if.end102
  %64 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6801
  %cost113 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %64, i32 0, i32 0, !dbg !6801
  %cost114 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost113, i32 0, i32 0, !dbg !6801
  %65 = load i16, i16* %cost114, align 4, !dbg !6801
  %conv115 = sext i16 %65 to i32, !dbg !6801
  %66 = load i32, i32* %mult_cost.addr, align 4, !dbg !6801
  %cmp116 = icmp eq i32 %conv115, %66, !dbg !6801
  br i1 %cmp116, label %land.lhs.true118, label %if.else137, !dbg !6801

land.lhs.true118:                                 ; preds = %lor.lhs.false112
  %67 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6801
  %cost119 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %67, i32 0, i32 0, !dbg !6801
  %latency120 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost119, i32 0, i32 1, !dbg !6801
  %68 = load i16, i16* %latency120, align 2, !dbg !6801
  %conv121 = sext i16 %68 to i32, !dbg !6801
  %69 = load i32, i32* %mult_cost.addr, align 4, !dbg !6801
  %cmp122 = icmp slt i32 %conv121, %69, !dbg !6801
  br i1 %cmp122, label %if.then124, label %if.else137, !dbg !6803

if.then124:                                       ; preds = %land.lhs.true118, %if.end102
  %70 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6804
  %cost125 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %70, i32 0, i32 0, !dbg !6806
  %cost126 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost125, i32 0, i32 0, !dbg !6807
  %71 = load i16, i16* %cost126, align 4, !dbg !6807
  %conv127 = sext i16 %71 to i32, !dbg !6804
  %72 = load i32, i32* %op_cost, align 4, !dbg !6808
  %sub128 = sub nsw i32 %conv127, %72, !dbg !6809
  %conv129 = trunc i32 %sub128 to i16, !dbg !6804
  %cost130 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %limit, i32 0, i32 0, !dbg !6810
  store i16 %conv129, i16* %cost130, align 2, !dbg !6811
  %73 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6812
  %cost131 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %73, i32 0, i32 0, !dbg !6813
  %latency132 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost131, i32 0, i32 1, !dbg !6814
  %74 = load i16, i16* %latency132, align 2, !dbg !6814
  %conv133 = sext i16 %74 to i32, !dbg !6812
  %75 = load i32, i32* %op_cost, align 4, !dbg !6815
  %sub134 = sub nsw i32 %conv133, %75, !dbg !6816
  %conv135 = trunc i32 %sub134 to i16, !dbg !6812
  %latency136 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %limit, i32 0, i32 1, !dbg !6817
  store i16 %conv135, i16* %latency136, align 2, !dbg !6818
  br label %if.end144, !dbg !6819

if.else137:                                       ; preds = %land.lhs.true118, %lor.lhs.false112
  %76 = load i32, i32* %mult_cost.addr, align 4, !dbg !6820
  %77 = load i32, i32* %op_cost, align 4, !dbg !6822
  %sub138 = sub nsw i32 %76, %77, !dbg !6823
  %conv139 = trunc i32 %sub138 to i16, !dbg !6820
  %cost140 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %limit, i32 0, i32 0, !dbg !6824
  store i16 %conv139, i16* %cost140, align 2, !dbg !6825
  %78 = load i32, i32* %mult_cost.addr, align 4, !dbg !6826
  %79 = load i32, i32* %op_cost, align 4, !dbg !6827
  %sub141 = sub nsw i32 %78, %79, !dbg !6828
  %conv142 = trunc i32 %sub141 to i16, !dbg !6826
  %latency143 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %limit, i32 0, i32 1, !dbg !6829
  store i16 %conv142, i16* %latency143, align 2, !dbg !6830
  br label %if.end144

if.end144:                                        ; preds = %if.else137, %if.then124
  %80 = load i64, i64* %val.addr, align 8, !dbg !6831
  %sub145 = sub nsw i64 %80, 1, !dbg !6832
  %81 = load i32, i32* %mode.addr, align 4, !dbg !6833
  call void @synth_mult(%struct.algorithm* %alg2, i64 %sub145, %struct.mult_cost* %limit, i32 %81), !dbg !6834
  %82 = load i32, i32* %op_cost, align 4, !dbg !6835
  %cost146 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %alg2, i32 0, i32 0, !dbg !6836
  %cost147 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost146, i32 0, i32 0, !dbg !6837
  %83 = load i16, i16* %cost147, align 4, !dbg !6838
  %conv148 = sext i16 %83 to i32, !dbg !6838
  %add149 = add nsw i32 %conv148, %82, !dbg !6838
  %conv150 = trunc i32 %add149 to i16, !dbg !6838
  store i16 %conv150, i16* %cost147, align 4, !dbg !6838
  %84 = load i32, i32* %op_cost, align 4, !dbg !6839
  %cost151 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %alg2, i32 0, i32 0, !dbg !6840
  %latency152 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost151, i32 0, i32 1, !dbg !6841
  %85 = load i16, i16* %latency152, align 2, !dbg !6842
  %conv153 = sext i16 %85 to i32, !dbg !6842
  %add154 = add nsw i32 %conv153, %84, !dbg !6842
  %conv155 = trunc i32 %add154 to i16, !dbg !6842
  store i16 %conv155, i16* %latency152, align 2, !dbg !6842
  %cost156 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %alg2, i32 0, i32 0, !dbg !6843
  %cost157 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost156, i32 0, i32 0, !dbg !6843
  %86 = load i16, i16* %cost157, align 4, !dbg !6843
  %conv158 = sext i16 %86 to i32, !dbg !6843
  %87 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6843
  %cost159 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %87, i32 0, i32 0, !dbg !6843
  %cost160 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost159, i32 0, i32 0, !dbg !6843
  %88 = load i16, i16* %cost160, align 4, !dbg !6843
  %conv161 = sext i16 %88 to i32, !dbg !6843
  %cmp162 = icmp slt i32 %conv158, %conv161, !dbg !6843
  br i1 %cmp162, label %if.then182, label %lor.lhs.false164, !dbg !6843

lor.lhs.false164:                                 ; preds = %if.end144
  %cost165 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %alg2, i32 0, i32 0, !dbg !6843
  %cost166 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost165, i32 0, i32 0, !dbg !6843
  %89 = load i16, i16* %cost166, align 4, !dbg !6843
  %conv167 = sext i16 %89 to i32, !dbg !6843
  %90 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6843
  %cost168 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %90, i32 0, i32 0, !dbg !6843
  %cost169 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost168, i32 0, i32 0, !dbg !6843
  %91 = load i16, i16* %cost169, align 4, !dbg !6843
  %conv170 = sext i16 %91 to i32, !dbg !6843
  %cmp171 = icmp eq i32 %conv167, %conv170, !dbg !6843
  br i1 %cmp171, label %land.lhs.true173, label %if.end183, !dbg !6843

land.lhs.true173:                                 ; preds = %lor.lhs.false164
  %cost174 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %alg2, i32 0, i32 0, !dbg !6843
  %latency175 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost174, i32 0, i32 1, !dbg !6843
  %92 = load i16, i16* %latency175, align 2, !dbg !6843
  %conv176 = sext i16 %92 to i32, !dbg !6843
  %93 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6843
  %cost177 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %93, i32 0, i32 0, !dbg !6843
  %latency178 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost177, i32 0, i32 1, !dbg !6843
  %94 = load i16, i16* %latency178, align 2, !dbg !6843
  %conv179 = sext i16 %94 to i32, !dbg !6843
  %cmp180 = icmp slt i32 %conv176, %conv179, !dbg !6843
  br i1 %cmp180, label %if.then182, label %if.end183, !dbg !6845

if.then182:                                       ; preds = %land.lhs.true173, %if.end144
  %95 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6846
  %96 = bitcast %struct.algorithm* %95 to i8*, !dbg !6847
  %97 = bitcast %struct.algorithm* %alg2 to i8*, !dbg !6847
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %96, i8* align 4 %97, i64 168, i1 false), !dbg !6847
  %98 = load i32*, i32** %variant.addr, align 8, !dbg !6848
  store i32 2, i32* %98, align 4, !dbg !6849
  br label %if.end183, !dbg !6850

if.end183:                                        ; preds = %if.then182, %land.lhs.true173, %lor.lhs.false164
  %99 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6851
  %cost184 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %99, i32 0, i32 0, !dbg !6851
  %cost185 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost184, i32 0, i32 0, !dbg !6851
  %100 = load i16, i16* %cost185, align 4, !dbg !6851
  %conv186 = sext i16 %100 to i32, !dbg !6851
  %101 = load i32, i32* %mult_cost.addr, align 4, !dbg !6851
  %cmp187 = icmp slt i32 %conv186, %101, !dbg !6851
  br i1 %cmp187, label %lor.end, label %lor.rhs, !dbg !6851

lor.rhs:                                          ; preds = %if.end183
  %102 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6851
  %cost189 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %102, i32 0, i32 0, !dbg !6851
  %cost190 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost189, i32 0, i32 0, !dbg !6851
  %103 = load i16, i16* %cost190, align 4, !dbg !6851
  %conv191 = sext i16 %103 to i32, !dbg !6851
  %104 = load i32, i32* %mult_cost.addr, align 4, !dbg !6851
  %cmp192 = icmp eq i32 %conv191, %104, !dbg !6851
  br i1 %cmp192, label %land.rhs, label %land.end, !dbg !6851

land.rhs:                                         ; preds = %lor.rhs
  %105 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6851
  %cost194 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %105, i32 0, i32 0, !dbg !6851
  %latency195 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost194, i32 0, i32 1, !dbg !6851
  %106 = load i16, i16* %latency195, align 2, !dbg !6851
  %conv196 = sext i16 %106 to i32, !dbg !6851
  %107 = load i32, i32* %mult_cost.addr, align 4, !dbg !6851
  %cmp197 = icmp slt i32 %conv196, %107, !dbg !6851
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %108 = phi i1 [ false, %lor.rhs ], [ %cmp197, %land.rhs ], !dbg !6852
  br label %lor.end, !dbg !6851

lor.end:                                          ; preds = %land.end, %if.end183
  %109 = phi i1 [ true, %if.end183 ], [ %108, %land.end ]
  %lor.ext = zext i1 %109 to i32, !dbg !6851
  %conv199 = trunc i32 %lor.ext to i8, !dbg !6851
  store i8 %conv199, i8* %retval, align 1, !dbg !6853
  br label %return, !dbg !6853

return:                                           ; preds = %lor.end, %if.then
  %110 = load i8, i8* %retval, align 1, !dbg !6854
  ret i8 %110, !dbg !6854
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_mult_const(i32 %mode, %struct.rtx_def* %op0, i64 %val, %struct.rtx_def* %target, %struct.algorithm* %alg, i32 %variant) #0 !dbg !6855 {
entry:
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %val.addr = alloca i64, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %alg.addr = alloca %struct.algorithm*, align 8
  %variant.addr = alloca i32, align 4
  %val_so_far = alloca i64, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %accum = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %opno = alloca i32, align 4
  %nmode = alloca i32, align 4
  %log = alloca i32, align 4
  %shift_subtarget = alloca %struct.rtx_def*, align 8
  %add_target = alloca %struct.rtx_def*, align 8
  %accum_target = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6860, metadata !DIExpression()), !dbg !6861
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !6862, metadata !DIExpression()), !dbg !6863
  store i64 %val, i64* %val.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val.addr, metadata !6864, metadata !DIExpression()), !dbg !6865
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !6866, metadata !DIExpression()), !dbg !6867
  store %struct.algorithm* %alg, %struct.algorithm** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.algorithm** %alg.addr, metadata !6868, metadata !DIExpression()), !dbg !6869
  store i32 %variant, i32* %variant.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %variant.addr, metadata !6870, metadata !DIExpression()), !dbg !6871
  call void @llvm.dbg.declare(metadata i64* %val_so_far, metadata !6872, metadata !DIExpression()), !dbg !6873
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6874, metadata !DIExpression()), !dbg !6875
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %accum, metadata !6876, metadata !DIExpression()), !dbg !6877
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !6878, metadata !DIExpression()), !dbg !6879
  call void @llvm.dbg.declare(metadata i32* %opno, metadata !6880, metadata !DIExpression()), !dbg !6881
  call void @llvm.dbg.declare(metadata i32* %nmode, metadata !6882, metadata !DIExpression()), !dbg !6883
  %0 = load i32, i32* %mode.addr, align 4, !dbg !6884
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6885
  %call = call %struct.rtx_def* @force_reg(i32 %0, %struct.rtx_def* %1), !dbg !6886
  store %struct.rtx_def* %call, %struct.rtx_def** %op0.addr, align 8, !dbg !6887
  %2 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6888
  %op = getelementptr inbounds %struct.algorithm, %struct.algorithm* %2, i32 0, i32 2, !dbg !6890
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* %op, i64 0, i64 0, !dbg !6888
  %3 = load i32, i32* %arrayidx, align 4, !dbg !6888
  %cmp = icmp eq i32 %3, 1, !dbg !6891
  br i1 %cmp, label %if.then, label %if.else, !dbg !6892

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !6893
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6895
  %call1 = call %struct.rtx_def* @copy_to_mode_reg(i32 %4, %struct.rtx_def* %5), !dbg !6896
  store %struct.rtx_def* %call1, %struct.rtx_def** %accum, align 8, !dbg !6897
  store i64 0, i64* %val_so_far, align 8, !dbg !6898
  br label %if.end8, !dbg !6899

if.else:                                          ; preds = %entry
  %6 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6900
  %op2 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %6, i32 0, i32 2, !dbg !6902
  %arrayidx3 = getelementptr inbounds [32 x i32], [32 x i32]* %op2, i64 0, i64 0, !dbg !6900
  %7 = load i32, i32* %arrayidx3, align 4, !dbg !6900
  %cmp4 = icmp eq i32 %7, 2, !dbg !6903
  br i1 %cmp4, label %if.then5, label %if.else7, !dbg !6904

if.then5:                                         ; preds = %if.else
  %8 = load i32, i32* %mode.addr, align 4, !dbg !6905
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6907
  %call6 = call %struct.rtx_def* @copy_to_mode_reg(i32 %8, %struct.rtx_def* %9), !dbg !6908
  store %struct.rtx_def* %call6, %struct.rtx_def** %accum, align 8, !dbg !6909
  store i64 1, i64* %val_so_far, align 8, !dbg !6910
  br label %if.end, !dbg !6911

if.else7:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2994, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6912
  br label %if.end

if.end:                                           ; preds = %if.else7, %if.then5
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then
  store i32 1, i32* %opno, align 4, !dbg !6913
  br label %for.cond, !dbg !6915

for.cond:                                         ; preds = %for.inc, %if.end8
  %10 = load i32, i32* %opno, align 4, !dbg !6916
  %11 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6918
  %ops = getelementptr inbounds %struct.algorithm, %struct.algorithm* %11, i32 0, i32 1, !dbg !6919
  %12 = load i16, i16* %ops, align 4, !dbg !6919
  %conv = sext i16 %12 to i32, !dbg !6918
  %cmp9 = icmp slt i32 %10, %conv, !dbg !6920
  br i1 %cmp9, label %for.body, label %for.end, !dbg !6921

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %log, metadata !6922, metadata !DIExpression()), !dbg !6924
  %13 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6925
  %log11 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %13, i32 0, i32 3, !dbg !6926
  %14 = load i32, i32* %opno, align 4, !dbg !6927
  %idxprom = sext i32 %14 to i64, !dbg !6925
  %arrayidx12 = getelementptr inbounds [32 x i8], [32 x i8]* %log11, i64 0, i64 %idxprom, !dbg !6925
  %15 = load i8, i8* %arrayidx12, align 1, !dbg !6925
  %conv13 = sext i8 %15 to i32, !dbg !6925
  store i32 %conv13, i32* %log, align 4, !dbg !6924
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %shift_subtarget, metadata !6928, metadata !DIExpression()), !dbg !6929
  %16 = load i32, i32* @optimize, align 4, !dbg !6930
  %tobool = icmp ne i32 %16, 0, !dbg !6930
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6930

cond.true:                                        ; preds = %for.body
  br label %cond.end, !dbg !6930

cond.false:                                       ; preds = %for.body
  %17 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !6931
  br label %cond.end, !dbg !6930

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ null, %cond.true ], [ %17, %cond.false ], !dbg !6930
  store %struct.rtx_def* %cond, %struct.rtx_def** %shift_subtarget, align 8, !dbg !6929
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %add_target, metadata !6932, metadata !DIExpression()), !dbg !6933
  %18 = load i32, i32* %opno, align 4, !dbg !6934
  %19 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6935
  %ops14 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %19, i32 0, i32 1, !dbg !6936
  %20 = load i16, i16* %ops14, align 4, !dbg !6936
  %conv15 = sext i16 %20 to i32, !dbg !6935
  %sub = sub nsw i32 %conv15, 1, !dbg !6937
  %cmp16 = icmp eq i32 %18, %sub, !dbg !6938
  br i1 %cmp16, label %land.lhs.true, label %cond.false26, !dbg !6939

land.lhs.true:                                    ; preds = %cond.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6940
  %cmp18 = icmp ne %struct.rtx_def* %21, null, !dbg !6941
  br i1 %cmp18, label %land.lhs.true20, label %cond.false26, !dbg !6942

land.lhs.true20:                                  ; preds = %land.lhs.true
  %22 = load i32, i32* %variant.addr, align 4, !dbg !6943
  %cmp21 = icmp ne i32 %22, 2, !dbg !6944
  br i1 %cmp21, label %land.lhs.true23, label %cond.false26, !dbg !6945

land.lhs.true23:                                  ; preds = %land.lhs.true20
  %23 = load i32, i32* @optimize, align 4, !dbg !6946
  %tobool24 = icmp ne i32 %23, 0, !dbg !6946
  br i1 %tobool24, label %cond.false26, label %cond.true25, !dbg !6947

cond.true25:                                      ; preds = %land.lhs.true23
  %24 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6948
  br label %cond.end27, !dbg !6947

cond.false26:                                     ; preds = %land.lhs.true23, %land.lhs.true20, %land.lhs.true, %cond.end
  br label %cond.end27, !dbg !6947

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi %struct.rtx_def* [ %24, %cond.true25 ], [ null, %cond.false26 ], !dbg !6947
  store %struct.rtx_def* %cond28, %struct.rtx_def** %add_target, align 8, !dbg !6933
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %accum_target, metadata !6949, metadata !DIExpression()), !dbg !6950
  %25 = load i32, i32* @optimize, align 4, !dbg !6951
  %tobool29 = icmp ne i32 %25, 0, !dbg !6951
  br i1 %tobool29, label %cond.true30, label %cond.false31, !dbg !6951

cond.true30:                                      ; preds = %cond.end27
  br label %cond.end32, !dbg !6951

cond.false31:                                     ; preds = %cond.end27
  %26 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !6952
  br label %cond.end32, !dbg !6951

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi %struct.rtx_def* [ null, %cond.true30 ], [ %26, %cond.false31 ], !dbg !6951
  store %struct.rtx_def* %cond33, %struct.rtx_def** %accum_target, align 8, !dbg !6950
  %27 = load %struct.algorithm*, %struct.algorithm** %alg.addr, align 8, !dbg !6953
  %op34 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %27, i32 0, i32 2, !dbg !6954
  %28 = load i32, i32* %opno, align 4, !dbg !6955
  %idxprom35 = sext i32 %28 to i64, !dbg !6953
  %arrayidx36 = getelementptr inbounds [32 x i32], [32 x i32]* %op34, i64 0, i64 %idxprom35, !dbg !6953
  %29 = load i32, i32* %arrayidx36, align 4, !dbg !6953
  switch i32 %29, label %sw.default [
    i32 3, label %sw.bb
    i32 4, label %sw.bb40
    i32 5, label %sw.bb53
    i32 8, label %sw.bb67
    i32 9, label %sw.bb81
    i32 6, label %sw.bb95
    i32 7, label %sw.bb109
  ], !dbg !6956

sw.bb:                                            ; preds = %cond.end32
  %30 = load i32, i32* %mode.addr, align 4, !dbg !6957
  %31 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !6959
  %32 = load i32, i32* %log, align 4, !dbg !6960
  %conv37 = sext i32 %32 to i64, !dbg !6960
  %call38 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv37), !dbg !6961
  %call39 = call %struct.rtx_def* @expand_shift(i32 83, i32 %30, %struct.rtx_def* %31, %union.tree_node* %call38, %struct.rtx_def* null, i32 0), !dbg !6962
  store %struct.rtx_def* %call39, %struct.rtx_def** %accum, align 8, !dbg !6963
  %33 = load i32, i32* %log, align 4, !dbg !6964
  %34 = load i64, i64* %val_so_far, align 8, !dbg !6965
  %sh_prom = zext i32 %33 to i64, !dbg !6965
  %shl = shl i64 %34, %sh_prom, !dbg !6965
  store i64 %shl, i64* %val_so_far, align 8, !dbg !6965
  br label %sw.epilog, !dbg !6966

sw.bb40:                                          ; preds = %cond.end32
  %35 = load i32, i32* %mode.addr, align 4, !dbg !6967
  %36 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6968
  %37 = load i32, i32* %log, align 4, !dbg !6969
  %conv41 = sext i32 %37 to i64, !dbg !6969
  %call42 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv41), !dbg !6970
  %call43 = call %struct.rtx_def* @expand_shift(i32 83, i32 %35, %struct.rtx_def* %36, %union.tree_node* %call42, %struct.rtx_def* null, i32 0), !dbg !6971
  store %struct.rtx_def* %call43, %struct.rtx_def** %tem, align 8, !dbg !6972
  %38 = load i32, i32* %mode.addr, align 4, !dbg !6973
  %39 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !6973
  %40 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !6973
  %call44 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %38, %struct.rtx_def* %39, %struct.rtx_def* %40), !dbg !6973
  %41 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !6974
  %tobool45 = icmp ne %struct.rtx_def* %41, null, !dbg !6974
  br i1 %tobool45, label %cond.true46, label %cond.false47, !dbg !6974

cond.true46:                                      ; preds = %sw.bb40
  %42 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !6975
  br label %cond.end48, !dbg !6974

cond.false47:                                     ; preds = %sw.bb40
  %43 = load %struct.rtx_def*, %struct.rtx_def** %accum_target, align 8, !dbg !6976
  br label %cond.end48, !dbg !6974

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond49 = phi %struct.rtx_def* [ %42, %cond.true46 ], [ %43, %cond.false47 ], !dbg !6974
  %call50 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call44, %struct.rtx_def* %cond49), !dbg !6977
  store %struct.rtx_def* %call50, %struct.rtx_def** %accum, align 8, !dbg !6978
  %44 = load i32, i32* %log, align 4, !dbg !6979
  %sh_prom51 = zext i32 %44 to i64, !dbg !6980
  %shl52 = shl i64 1, %sh_prom51, !dbg !6980
  %45 = load i64, i64* %val_so_far, align 8, !dbg !6981
  %add = add nsw i64 %45, %shl52, !dbg !6981
  store i64 %add, i64* %val_so_far, align 8, !dbg !6981
  br label %sw.epilog, !dbg !6982

sw.bb53:                                          ; preds = %cond.end32
  %46 = load i32, i32* %mode.addr, align 4, !dbg !6983
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6984
  %48 = load i32, i32* %log, align 4, !dbg !6985
  %conv54 = sext i32 %48 to i64, !dbg !6985
  %call55 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv54), !dbg !6986
  %call56 = call %struct.rtx_def* @expand_shift(i32 83, i32 %46, %struct.rtx_def* %47, %union.tree_node* %call55, %struct.rtx_def* null, i32 0), !dbg !6987
  store %struct.rtx_def* %call56, %struct.rtx_def** %tem, align 8, !dbg !6988
  %49 = load i32, i32* %mode.addr, align 4, !dbg !6989
  %50 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !6989
  %51 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !6989
  %call57 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %49, %struct.rtx_def* %50, %struct.rtx_def* %51), !dbg !6989
  %52 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !6990
  %tobool58 = icmp ne %struct.rtx_def* %52, null, !dbg !6990
  br i1 %tobool58, label %cond.true59, label %cond.false60, !dbg !6990

cond.true59:                                      ; preds = %sw.bb53
  %53 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !6991
  br label %cond.end61, !dbg !6990

cond.false60:                                     ; preds = %sw.bb53
  %54 = load %struct.rtx_def*, %struct.rtx_def** %accum_target, align 8, !dbg !6992
  br label %cond.end61, !dbg !6990

cond.end61:                                       ; preds = %cond.false60, %cond.true59
  %cond62 = phi %struct.rtx_def* [ %53, %cond.true59 ], [ %54, %cond.false60 ], !dbg !6990
  %call63 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call57, %struct.rtx_def* %cond62), !dbg !6993
  store %struct.rtx_def* %call63, %struct.rtx_def** %accum, align 8, !dbg !6994
  %55 = load i32, i32* %log, align 4, !dbg !6995
  %sh_prom64 = zext i32 %55 to i64, !dbg !6996
  %shl65 = shl i64 1, %sh_prom64, !dbg !6996
  %56 = load i64, i64* %val_so_far, align 8, !dbg !6997
  %sub66 = sub nsw i64 %56, %shl65, !dbg !6997
  store i64 %sub66, i64* %val_so_far, align 8, !dbg !6997
  br label %sw.epilog, !dbg !6998

sw.bb67:                                          ; preds = %cond.end32
  %57 = load i32, i32* %mode.addr, align 4, !dbg !6999
  %58 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7000
  %59 = load i32, i32* %log, align 4, !dbg !7001
  %conv68 = sext i32 %59 to i64, !dbg !7001
  %call69 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv68), !dbg !7002
  %60 = load %struct.rtx_def*, %struct.rtx_def** %shift_subtarget, align 8, !dbg !7003
  %call70 = call %struct.rtx_def* @expand_shift(i32 83, i32 %57, %struct.rtx_def* %58, %union.tree_node* %call69, %struct.rtx_def* %60, i32 0), !dbg !7004
  store %struct.rtx_def* %call70, %struct.rtx_def** %accum, align 8, !dbg !7005
  %61 = load i32, i32* %mode.addr, align 4, !dbg !7006
  %62 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7006
  %63 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7006
  %call71 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %61, %struct.rtx_def* %62, %struct.rtx_def* %63), !dbg !7006
  %64 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !7007
  %tobool72 = icmp ne %struct.rtx_def* %64, null, !dbg !7007
  br i1 %tobool72, label %cond.true73, label %cond.false74, !dbg !7007

cond.true73:                                      ; preds = %sw.bb67
  %65 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !7008
  br label %cond.end75, !dbg !7007

cond.false74:                                     ; preds = %sw.bb67
  %66 = load %struct.rtx_def*, %struct.rtx_def** %accum_target, align 8, !dbg !7009
  br label %cond.end75, !dbg !7007

cond.end75:                                       ; preds = %cond.false74, %cond.true73
  %cond76 = phi %struct.rtx_def* [ %65, %cond.true73 ], [ %66, %cond.false74 ], !dbg !7007
  %call77 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call71, %struct.rtx_def* %cond76), !dbg !7010
  store %struct.rtx_def* %call77, %struct.rtx_def** %accum, align 8, !dbg !7011
  %67 = load i64, i64* %val_so_far, align 8, !dbg !7012
  %68 = load i32, i32* %log, align 4, !dbg !7013
  %sh_prom78 = zext i32 %68 to i64, !dbg !7014
  %shl79 = shl i64 %67, %sh_prom78, !dbg !7014
  %add80 = add nsw i64 %shl79, 1, !dbg !7015
  store i64 %add80, i64* %val_so_far, align 8, !dbg !7016
  br label %sw.epilog, !dbg !7017

sw.bb81:                                          ; preds = %cond.end32
  %69 = load i32, i32* %mode.addr, align 4, !dbg !7018
  %70 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7019
  %71 = load i32, i32* %log, align 4, !dbg !7020
  %conv82 = sext i32 %71 to i64, !dbg !7020
  %call83 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv82), !dbg !7021
  %72 = load %struct.rtx_def*, %struct.rtx_def** %shift_subtarget, align 8, !dbg !7022
  %call84 = call %struct.rtx_def* @expand_shift(i32 83, i32 %69, %struct.rtx_def* %70, %union.tree_node* %call83, %struct.rtx_def* %72, i32 0), !dbg !7023
  store %struct.rtx_def* %call84, %struct.rtx_def** %accum, align 8, !dbg !7024
  %73 = load i32, i32* %mode.addr, align 4, !dbg !7025
  %74 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7025
  %75 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7025
  %call85 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %73, %struct.rtx_def* %74, %struct.rtx_def* %75), !dbg !7025
  %76 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !7026
  %tobool86 = icmp ne %struct.rtx_def* %76, null, !dbg !7026
  br i1 %tobool86, label %cond.true87, label %cond.false88, !dbg !7026

cond.true87:                                      ; preds = %sw.bb81
  %77 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !7027
  br label %cond.end89, !dbg !7026

cond.false88:                                     ; preds = %sw.bb81
  %78 = load %struct.rtx_def*, %struct.rtx_def** %accum_target, align 8, !dbg !7028
  br label %cond.end89, !dbg !7026

cond.end89:                                       ; preds = %cond.false88, %cond.true87
  %cond90 = phi %struct.rtx_def* [ %77, %cond.true87 ], [ %78, %cond.false88 ], !dbg !7026
  %call91 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call85, %struct.rtx_def* %cond90), !dbg !7029
  store %struct.rtx_def* %call91, %struct.rtx_def** %accum, align 8, !dbg !7030
  %79 = load i64, i64* %val_so_far, align 8, !dbg !7031
  %80 = load i32, i32* %log, align 4, !dbg !7032
  %sh_prom92 = zext i32 %80 to i64, !dbg !7033
  %shl93 = shl i64 %79, %sh_prom92, !dbg !7033
  %sub94 = sub nsw i64 %shl93, 1, !dbg !7034
  store i64 %sub94, i64* %val_so_far, align 8, !dbg !7035
  br label %sw.epilog, !dbg !7036

sw.bb95:                                          ; preds = %cond.end32
  %81 = load i32, i32* %mode.addr, align 4, !dbg !7037
  %82 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7038
  %83 = load i32, i32* %log, align 4, !dbg !7039
  %conv96 = sext i32 %83 to i64, !dbg !7039
  %call97 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv96), !dbg !7040
  %call98 = call %struct.rtx_def* @expand_shift(i32 83, i32 %81, %struct.rtx_def* %82, %union.tree_node* %call97, %struct.rtx_def* null, i32 0), !dbg !7041
  store %struct.rtx_def* %call98, %struct.rtx_def** %tem, align 8, !dbg !7042
  %84 = load i32, i32* %mode.addr, align 4, !dbg !7043
  %85 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7043
  %86 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7043
  %call99 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %84, %struct.rtx_def* %85, %struct.rtx_def* %86), !dbg !7043
  %87 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !7044
  %tobool100 = icmp ne %struct.rtx_def* %87, null, !dbg !7044
  br i1 %tobool100, label %cond.true101, label %cond.false102, !dbg !7044

cond.true101:                                     ; preds = %sw.bb95
  %88 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !7045
  br label %cond.end103, !dbg !7044

cond.false102:                                    ; preds = %sw.bb95
  %89 = load %struct.rtx_def*, %struct.rtx_def** %accum_target, align 8, !dbg !7046
  br label %cond.end103, !dbg !7044

cond.end103:                                      ; preds = %cond.false102, %cond.true101
  %cond104 = phi %struct.rtx_def* [ %88, %cond.true101 ], [ %89, %cond.false102 ], !dbg !7044
  %call105 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call99, %struct.rtx_def* %cond104), !dbg !7047
  store %struct.rtx_def* %call105, %struct.rtx_def** %accum, align 8, !dbg !7048
  %90 = load i64, i64* %val_so_far, align 8, !dbg !7049
  %91 = load i32, i32* %log, align 4, !dbg !7050
  %sh_prom106 = zext i32 %91 to i64, !dbg !7051
  %shl107 = shl i64 %90, %sh_prom106, !dbg !7051
  %92 = load i64, i64* %val_so_far, align 8, !dbg !7052
  %add108 = add nsw i64 %92, %shl107, !dbg !7052
  store i64 %add108, i64* %val_so_far, align 8, !dbg !7052
  br label %sw.epilog, !dbg !7053

sw.bb109:                                         ; preds = %cond.end32
  %93 = load i32, i32* %mode.addr, align 4, !dbg !7054
  %94 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7055
  %95 = load i32, i32* %log, align 4, !dbg !7056
  %conv110 = sext i32 %95 to i64, !dbg !7056
  %call111 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv110), !dbg !7057
  %call112 = call %struct.rtx_def* @expand_shift(i32 83, i32 %93, %struct.rtx_def* %94, %union.tree_node* %call111, %struct.rtx_def* null, i32 0), !dbg !7058
  store %struct.rtx_def* %call112, %struct.rtx_def** %tem, align 8, !dbg !7059
  %96 = load i32, i32* %mode.addr, align 4, !dbg !7060
  %97 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7060
  %98 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7060
  %call113 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %96, %struct.rtx_def* %97, %struct.rtx_def* %98), !dbg !7060
  %99 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !7061
  %tobool114 = icmp ne %struct.rtx_def* %99, null, !dbg !7061
  br i1 %tobool114, label %cond.true115, label %cond.false116, !dbg !7061

cond.true115:                                     ; preds = %sw.bb109
  %100 = load %struct.rtx_def*, %struct.rtx_def** %add_target, align 8, !dbg !7062
  br label %cond.end122, !dbg !7061

cond.false116:                                    ; preds = %sw.bb109
  %101 = load i32, i32* @optimize, align 4, !dbg !7063
  %tobool117 = icmp ne i32 %101, 0, !dbg !7063
  br i1 %tobool117, label %cond.true118, label %cond.false119, !dbg !7063

cond.true118:                                     ; preds = %cond.false116
  br label %cond.end120, !dbg !7063

cond.false119:                                    ; preds = %cond.false116
  %102 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7064
  br label %cond.end120, !dbg !7063

cond.end120:                                      ; preds = %cond.false119, %cond.true118
  %cond121 = phi %struct.rtx_def* [ null, %cond.true118 ], [ %102, %cond.false119 ], !dbg !7063
  br label %cond.end122, !dbg !7061

cond.end122:                                      ; preds = %cond.end120, %cond.true115
  %cond123 = phi %struct.rtx_def* [ %100, %cond.true115 ], [ %cond121, %cond.end120 ], !dbg !7061
  %call124 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call113, %struct.rtx_def* %cond123), !dbg !7065
  store %struct.rtx_def* %call124, %struct.rtx_def** %accum, align 8, !dbg !7066
  %103 = load i64, i64* %val_so_far, align 8, !dbg !7067
  %104 = load i32, i32* %log, align 4, !dbg !7068
  %sh_prom125 = zext i32 %104 to i64, !dbg !7069
  %shl126 = shl i64 %103, %sh_prom125, !dbg !7069
  %105 = load i64, i64* %val_so_far, align 8, !dbg !7070
  %sub127 = sub nsw i64 %shl126, %105, !dbg !7071
  store i64 %sub127, i64* %val_so_far, align 8, !dbg !7072
  br label %sw.epilog, !dbg !7073

sw.default:                                       ; preds = %cond.end32
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3072, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7074
  br label %sw.epilog, !dbg !7075

sw.epilog:                                        ; preds = %sw.default, %cond.end122, %cond.end103, %cond.end89, %cond.end75, %cond.end61, %cond.end48, %sw.bb
  %106 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7076
  store %struct.rtx_def* %106, %struct.rtx_def** %tem, align 8, !dbg !7077
  %107 = load i32, i32* %mode.addr, align 4, !dbg !7078
  store i32 %107, i32* %nmode, align 4, !dbg !7079
  %108 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7080
  %109 = bitcast %struct.rtx_def* %108 to i32*, !dbg !7080
  %bf.load = load i32, i32* %109, align 8, !dbg !7080
  %bf.clear = and i32 %bf.load, 65535, !dbg !7080
  %cmp128 = icmp eq i32 %bf.clear, 39, !dbg !7082
  br i1 %cmp128, label %if.then130, label %if.end135, !dbg !7083

if.then130:                                       ; preds = %sw.epilog
  %110 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7084
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1, !dbg !7084
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7084
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7084
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx131 to %struct.rtx_def**, !dbg !7084
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7084
  %112 = bitcast %struct.rtx_def* %111 to i32*, !dbg !7084
  %bf.load132 = load i32, i32* %112, align 8, !dbg !7084
  %bf.lshr = lshr i32 %bf.load132, 16, !dbg !7084
  %bf.clear133 = and i32 %bf.lshr, 255, !dbg !7084
  store i32 %bf.clear133, i32* %nmode, align 4, !dbg !7086
  %113 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !7087
  %114 = load i32, i32* %nmode, align 4, !dbg !7088
  %115 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7089
  %call134 = call %struct.rtx_def* %113(i32 %114, %struct.rtx_def* %115), !dbg !7087
  store %struct.rtx_def* %call134, %struct.rtx_def** %tem, align 8, !dbg !7090
  br label %if.end135, !dbg !7091

if.end135:                                        ; preds = %if.then130, %sw.epilog
  %call136 = call %struct.rtx_def* @get_last_insn(), !dbg !7092
  store %struct.rtx_def* %call136, %struct.rtx_def** %insn, align 8, !dbg !7093
  %116 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7094
  %117 = load i32, i32* %nmode, align 4, !dbg !7095
  %118 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7095
  %119 = load i64, i64* %val_so_far, align 8, !dbg !7095
  %call137 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %119), !dbg !7095
  %call138 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %117, %struct.rtx_def* %118, %struct.rtx_def* %call137), !dbg !7095
  %call139 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %116, i32 4, %struct.rtx_def* %call138), !dbg !7096
  br label %for.inc, !dbg !7097

for.inc:                                          ; preds = %if.end135
  %120 = load i32, i32* %opno, align 4, !dbg !7098
  %inc = add nsw i32 %120, 1, !dbg !7098
  store i32 %inc, i32* %opno, align 4, !dbg !7098
  br label %for.cond, !dbg !7099, !llvm.loop !7100

for.end:                                          ; preds = %for.cond
  %121 = load i32, i32* %variant.addr, align 4, !dbg !7102
  %cmp140 = icmp eq i32 %121, 1, !dbg !7104
  br i1 %cmp140, label %if.then142, label %if.else145, !dbg !7105

if.then142:                                       ; preds = %for.end
  %122 = load i64, i64* %val_so_far, align 8, !dbg !7106
  %sub143 = sub nsw i64 0, %122, !dbg !7108
  store i64 %sub143, i64* %val_so_far, align 8, !dbg !7109
  %123 = load i32, i32* %mode.addr, align 4, !dbg !7110
  %124 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7111
  %125 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7112
  %call144 = call %struct.rtx_def* @expand_unop(i32 %123, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %124, %struct.rtx_def* %125, i32 0), !dbg !7113
  store %struct.rtx_def* %call144, %struct.rtx_def** %accum, align 8, !dbg !7114
  br label %if.end153, !dbg !7115

if.else145:                                       ; preds = %for.end
  %126 = load i32, i32* %variant.addr, align 4, !dbg !7116
  %cmp146 = icmp eq i32 %126, 2, !dbg !7118
  br i1 %cmp146, label %if.then148, label %if.end152, !dbg !7119

if.then148:                                       ; preds = %if.else145
  %127 = load i64, i64* %val_so_far, align 8, !dbg !7120
  %add149 = add nsw i64 %127, 1, !dbg !7122
  store i64 %add149, i64* %val_so_far, align 8, !dbg !7123
  %128 = load i32, i32* %mode.addr, align 4, !dbg !7124
  %129 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7124
  %130 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7124
  %call150 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %128, %struct.rtx_def* %129, %struct.rtx_def* %130), !dbg !7124
  %131 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7125
  %call151 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call150, %struct.rtx_def* %131), !dbg !7126
  store %struct.rtx_def* %call151, %struct.rtx_def** %accum, align 8, !dbg !7127
  br label %if.end152, !dbg !7128

if.end152:                                        ; preds = %if.then148, %if.else145
  br label %if.end153

if.end153:                                        ; preds = %if.end152, %if.then142
  %132 = load i32, i32* %mode.addr, align 4, !dbg !7129
  %idxprom154 = zext i32 %132 to i64, !dbg !7129
  %arrayidx155 = getelementptr inbounds [87 x i64], [87 x i64]* @mode_mask_array, i64 0, i64 %idxprom154, !dbg !7129
  %133 = load i64, i64* %arrayidx155, align 8, !dbg !7129
  %134 = load i64, i64* %val.addr, align 8, !dbg !7130
  %and = and i64 %134, %133, !dbg !7130
  store i64 %and, i64* %val.addr, align 8, !dbg !7130
  %135 = load i32, i32* %mode.addr, align 4, !dbg !7131
  %idxprom156 = zext i32 %135 to i64, !dbg !7131
  %arrayidx157 = getelementptr inbounds [87 x i64], [87 x i64]* @mode_mask_array, i64 0, i64 %idxprom156, !dbg !7131
  %136 = load i64, i64* %arrayidx157, align 8, !dbg !7131
  %137 = load i64, i64* %val_so_far, align 8, !dbg !7132
  %and158 = and i64 %137, %136, !dbg !7132
  store i64 %and158, i64* %val_so_far, align 8, !dbg !7132
  %138 = load i64, i64* %val.addr, align 8, !dbg !7133
  %139 = load i64, i64* %val_so_far, align 8, !dbg !7133
  %cmp159 = icmp eq i64 %138, %139, !dbg !7133
  br i1 %cmp159, label %cond.false162, label %cond.true161, !dbg !7133

cond.true161:                                     ; preds = %if.end153
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3108, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7133
  br label %cond.end163, !dbg !7133

cond.false162:                                    ; preds = %if.end153
  br label %cond.end163, !dbg !7133

cond.end163:                                      ; preds = %cond.false162, %cond.true161
  %cond164 = phi i32 [ 0, %cond.true161 ], [ 0, %cond.false162 ], !dbg !7133
  %140 = load %struct.rtx_def*, %struct.rtx_def** %accum, align 8, !dbg !7134
  ret %struct.rtx_def* %140, !dbg !7135
}

declare dso_local i32 @floor_log2(i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local zeroext i8 @real_compare(i32, %struct.real_value*, %struct.real_value*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ceil_log2(i64 %x) #0 !dbg !7136 {
entry:
  %x.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !7139, metadata !DIExpression()), !dbg !7140
  %0 = load i64, i64* %x.addr, align 8, !dbg !7141
  %sub = sub i64 %0, 1, !dbg !7142
  %call = call i32 @floor_log2(i64 %sub), !dbg !7143
  %add = add nsw i32 %call, 1, !dbg !7144
  ret i32 %add, !dbg !7145
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_mult_highpart_adjust(i32 %mode, %struct.rtx_def* %adj_operand, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %unsignedp) #0 !dbg !7146 {
entry:
  %mode.addr = alloca i32, align 4
  %adj_operand.addr = alloca %struct.rtx_def*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %tem = alloca %struct.rtx_def*, align 8
  %adj_code = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !7149, metadata !DIExpression()), !dbg !7150
  store %struct.rtx_def* %adj_operand, %struct.rtx_def** %adj_operand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adj_operand.addr, metadata !7151, metadata !DIExpression()), !dbg !7152
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !7153, metadata !DIExpression()), !dbg !7154
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !7155, metadata !DIExpression()), !dbg !7156
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !7157, metadata !DIExpression()), !dbg !7158
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !7159, metadata !DIExpression()), !dbg !7160
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !7161, metadata !DIExpression()), !dbg !7162
  call void @llvm.dbg.declare(metadata i32* %adj_code, metadata !7163, metadata !DIExpression()), !dbg !7164
  %0 = load i32, i32* %unsignedp.addr, align 4, !dbg !7165
  %tobool = icmp ne i32 %0, 0, !dbg !7165
  %1 = zext i1 %tobool to i64, !dbg !7165
  %cond = select i1 %tobool, i32 49, i32 50, !dbg !7165
  store i32 %cond, i32* %adj_code, align 4, !dbg !7164
  %2 = load i32, i32* %mode.addr, align 4, !dbg !7166
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7167
  %4 = load i32, i32* %mode.addr, align 4, !dbg !7168
  %idxprom = zext i32 %4 to i64, !dbg !7168
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !7168
  %5 = load i8, i8* %arrayidx, align 1, !dbg !7168
  %conv = zext i8 %5 to i16, !dbg !7168
  %conv1 = zext i16 %conv to i32, !dbg !7168
  %mul = mul nsw i32 %conv1, 8, !dbg !7168
  %conv2 = trunc i32 %mul to i16, !dbg !7168
  %conv3 = zext i16 %conv2 to i32, !dbg !7168
  %sub = sub nsw i32 %conv3, 1, !dbg !7169
  %conv4 = sext i32 %sub to i64, !dbg !7168
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv4), !dbg !7170
  %call5 = call %struct.rtx_def* @expand_shift(i32 84, i32 %2, %struct.rtx_def* %3, %union.tree_node* %call, %struct.rtx_def* null, i32 0), !dbg !7171
  store %struct.rtx_def* %call5, %struct.rtx_def** %tem, align 8, !dbg !7172
  %6 = load i32, i32* %mode.addr, align 4, !dbg !7173
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7174
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7175
  %call6 = call %struct.rtx_def* @expand_and(i32 %6, %struct.rtx_def* %7, %struct.rtx_def* %8, %struct.rtx_def* null), !dbg !7176
  store %struct.rtx_def* %call6, %struct.rtx_def** %tem, align 8, !dbg !7177
  %9 = load i32, i32* %adj_code, align 4, !dbg !7178
  %10 = load i32, i32* %mode.addr, align 4, !dbg !7178
  %11 = load %struct.rtx_def*, %struct.rtx_def** %adj_operand.addr, align 8, !dbg !7178
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7178
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %9, i32 %10, %struct.rtx_def* %11, %struct.rtx_def* %12), !dbg !7178
  %13 = load %struct.rtx_def*, %struct.rtx_def** %adj_operand.addr, align 8, !dbg !7179
  %call8 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call7, %struct.rtx_def* %13), !dbg !7180
  store %struct.rtx_def* %call8, %struct.rtx_def** %adj_operand.addr, align 8, !dbg !7181
  %14 = load i32, i32* %mode.addr, align 4, !dbg !7182
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7183
  %16 = load i32, i32* %mode.addr, align 4, !dbg !7184
  %idxprom9 = zext i32 %16 to i64, !dbg !7184
  %arrayidx10 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom9, !dbg !7184
  %17 = load i8, i8* %arrayidx10, align 1, !dbg !7184
  %conv11 = zext i8 %17 to i16, !dbg !7184
  %conv12 = zext i16 %conv11 to i32, !dbg !7184
  %mul13 = mul nsw i32 %conv12, 8, !dbg !7184
  %conv14 = trunc i32 %mul13 to i16, !dbg !7184
  %conv15 = zext i16 %conv14 to i32, !dbg !7184
  %sub16 = sub nsw i32 %conv15, 1, !dbg !7185
  %conv17 = sext i32 %sub16 to i64, !dbg !7184
  %call18 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv17), !dbg !7186
  %call19 = call %struct.rtx_def* @expand_shift(i32 84, i32 %14, %struct.rtx_def* %15, %union.tree_node* %call18, %struct.rtx_def* null, i32 0), !dbg !7187
  store %struct.rtx_def* %call19, %struct.rtx_def** %tem, align 8, !dbg !7188
  %18 = load i32, i32* %mode.addr, align 4, !dbg !7189
  %19 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7190
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7191
  %call20 = call %struct.rtx_def* @expand_and(i32 %18, %struct.rtx_def* %19, %struct.rtx_def* %20, %struct.rtx_def* null), !dbg !7192
  store %struct.rtx_def* %call20, %struct.rtx_def** %tem, align 8, !dbg !7193
  %21 = load i32, i32* %adj_code, align 4, !dbg !7194
  %22 = load i32, i32* %mode.addr, align 4, !dbg !7194
  %23 = load %struct.rtx_def*, %struct.rtx_def** %adj_operand.addr, align 8, !dbg !7194
  %24 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7194
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %21, i32 %22, %struct.rtx_def* %23, %struct.rtx_def* %24), !dbg !7194
  %25 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7195
  %call22 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call21, %struct.rtx_def* %25), !dbg !7196
  store %struct.rtx_def* %call22, %struct.rtx_def** %target.addr, align 8, !dbg !7197
  %26 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7198
  ret %struct.rtx_def* %26, !dbg !7199
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_and(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target) #0 !dbg !7200 {
entry:
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !7203, metadata !DIExpression()), !dbg !7204
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !7205, metadata !DIExpression()), !dbg !7206
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !7207, metadata !DIExpression()), !dbg !7208
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !7209, metadata !DIExpression()), !dbg !7210
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !7211, metadata !DIExpression()), !dbg !7212
  store %struct.rtx_def* null, %struct.rtx_def** %tem, align 8, !dbg !7212
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7213
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7213
  %bf.load = load i32, i32* %1, align 8, !dbg !7213
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7213
  %bf.clear = and i32 %bf.lshr, 255, !dbg !7213
  %cmp = icmp eq i32 %bf.clear, 0, !dbg !7215
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7216

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7217
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !7217
  %bf.load1 = load i32, i32* %3, align 8, !dbg !7217
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !7217
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !7217
  %cmp4 = icmp eq i32 %bf.clear3, 0, !dbg !7218
  br i1 %cmp4, label %if.then, label %if.end, !dbg !7219

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32, i32* %mode.addr, align 4, !dbg !7220
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7221
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7222
  %call = call %struct.rtx_def* @simplify_binary_operation(i32 61, i32 %4, %struct.rtx_def* %5, %struct.rtx_def* %6), !dbg !7223
  store %struct.rtx_def* %call, %struct.rtx_def** %tem, align 8, !dbg !7224
  br label %if.end, !dbg !7225

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7226
  %cmp5 = icmp eq %struct.rtx_def* %7, null, !dbg !7228
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !7229

if.then6:                                         ; preds = %if.end
  %8 = load i32, i32* %mode.addr, align 4, !dbg !7230
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7231
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7232
  %11 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7233
  %call7 = call %struct.rtx_def* @expand_binop(i32 %8, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %9, %struct.rtx_def* %10, %struct.rtx_def* %11, i32 0, i32 3), !dbg !7234
  store %struct.rtx_def* %call7, %struct.rtx_def** %tem, align 8, !dbg !7235
  br label %if.end8, !dbg !7236

if.end8:                                          ; preds = %if.then6, %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7237
  %cmp9 = icmp eq %struct.rtx_def* %12, null, !dbg !7239
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !7240

if.then10:                                        ; preds = %if.end8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7241
  store %struct.rtx_def* %13, %struct.rtx_def** %target.addr, align 8, !dbg !7242
  br label %if.end15, !dbg !7243

if.else:                                          ; preds = %if.end8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7244
  %15 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7246
  %cmp11 = icmp ne %struct.rtx_def* %14, %15, !dbg !7247
  br i1 %cmp11, label %if.then12, label %if.end14, !dbg !7248

if.then12:                                        ; preds = %if.else
  %16 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7249
  %17 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !7250
  %call13 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %16, %struct.rtx_def* %17), !dbg !7251
  br label %if.end14, !dbg !7251

if.end14:                                         ; preds = %if.then12, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then10
  %18 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7252
  ret %struct.rtx_def* %18, !dbg !7253
}

declare dso_local %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_divmod(i32 %rem_flag, i32 %code, i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %unsignedp) #0 !dbg !3366 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %rem_flag.addr = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %compute_mode = alloca i32, align 4
  %tquotient = alloca %struct.rtx_def*, align 8
  %quotient = alloca %struct.rtx_def*, align 8
  %remainder = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %size = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %optab1 = alloca %struct.optab_d*, align 8
  %optab2 = alloca %struct.optab_d*, align 8
  %op1_is_constant = alloca i32, align 4
  %op1_is_pow2 = alloca i32, align 4
  %max_cost = alloca i32, align 4
  %extra_cost = alloca i32, align 4
  %speed = alloca i8, align 1
  %mh = alloca i64, align 8
  %pre_shift = alloca i32, align 4
  %post_shift = alloca i32, align 4
  %dummy = alloca i32, align 4
  %ml = alloca %struct.rtx_def*, align 8
  %d = alloca i64, align 8
  %t1 = alloca %struct.rtx_def*, align 8
  %t2 = alloca %struct.rtx_def*, align 8
  %t3 = alloca %struct.rtx_def*, align 8
  %t4 = alloca %struct.rtx_def*, align 8
  %t1402 = alloca %struct.rtx_def*, align 8
  %t2403 = alloca %struct.rtx_def*, align 8
  %ml501 = alloca i64, align 8
  %lgup = alloca i32, align 4
  %post_shift502 = alloca i32, align 4
  %mlr = alloca %struct.rtx_def*, align 8
  %d503 = alloca i64, align 8
  %abs_d = alloca i64, align 8
  %t1705 = alloca %struct.rtx_def*, align 8
  %t2706 = alloca %struct.rtx_def*, align 8
  %t3707 = alloca %struct.rtx_def*, align 8
  %t1758 = alloca %struct.rtx_def*, align 8
  %t2759 = alloca %struct.rtx_def*, align 8
  %t3760 = alloca %struct.rtx_def*, align 8
  %t4761 = alloca %struct.rtx_def*, align 8
  %mh895 = alloca i64, align 8
  %pre_shift896 = alloca i32, align 4
  %lgup897 = alloca i32, align 4
  %post_shift898 = alloca i32, align 4
  %d899 = alloca i64, align 8
  %ml903 = alloca %struct.rtx_def*, align 8
  %t1929 = alloca %struct.rtx_def*, align 8
  %t2930 = alloca %struct.rtx_def*, align 8
  %t3931 = alloca %struct.rtx_def*, align 8
  %t4932 = alloca %struct.rtx_def*, align 8
  %nsign = alloca %struct.rtx_def*, align 8
  %t1985 = alloca %struct.rtx_def*, align 8
  %t2986 = alloca %struct.rtx_def*, align 8
  %t3987 = alloca %struct.rtx_def*, align 8
  %t4988 = alloca %struct.rtx_def*, align 8
  %t5 = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %label1 = alloca %struct.rtx_def*, align 8
  %label2 = alloca %struct.rtx_def*, align 8
  %label3 = alloca %struct.rtx_def*, align 8
  %label4 = alloca %struct.rtx_def*, align 8
  %label5 = alloca %struct.rtx_def*, align 8
  %adjusted_op0 = alloca %struct.rtx_def*, align 8
  %tem1059 = alloca %struct.rtx_def*, align 8
  %t11115 = alloca %struct.rtx_def*, align 8
  %t21116 = alloca %struct.rtx_def*, align 8
  %t31117 = alloca %struct.rtx_def*, align 8
  %d1118 = alloca i64, align 8
  %lab = alloca %struct.rtx_def*, align 8
  %label1179 = alloca %struct.rtx_def*, align 8
  %label11189 = alloca %struct.rtx_def*, align 8
  %label21190 = alloca %struct.rtx_def*, align 8
  %adjusted_op01191 = alloca %struct.rtx_def*, align 8
  %tem1192 = alloca %struct.rtx_def*, align 8
  %t11229 = alloca %struct.rtx_def*, align 8
  %t21230 = alloca %struct.rtx_def*, align 8
  %t31231 = alloca %struct.rtx_def*, align 8
  %d1232 = alloca i64, align 8
  %lab1248 = alloca %struct.rtx_def*, align 8
  %tem1294 = alloca %struct.rtx_def*, align 8
  %label1295 = alloca %struct.rtx_def*, align 8
  %label11306 = alloca %struct.rtx_def*, align 8
  %label21307 = alloca %struct.rtx_def*, align 8
  %label31308 = alloca %struct.rtx_def*, align 8
  %label41309 = alloca %struct.rtx_def*, align 8
  %label51310 = alloca %struct.rtx_def*, align 8
  %adjusted_op01311 = alloca %struct.rtx_def*, align 8
  %tem1312 = alloca %struct.rtx_def*, align 8
  %d1359 = alloca i64, align 8
  %ml1363 = alloca i64, align 8
  %pre_shift1364 = alloca i32, align 4
  %t11365 = alloca %struct.rtx_def*, align 8
  %tem1386 = alloca %struct.rtx_def*, align 8
  %label1387 = alloca %struct.rtx_def*, align 8
  %tem1395 = alloca %struct.rtx_def*, align 8
  %abs_rem = alloca %struct.rtx_def*, align 8
  %abs_op1 = alloca %struct.rtx_def*, align 8
  %tem1405 = alloca %struct.rtx_def*, align 8
  %mask = alloca %struct.rtx_def*, align 8
  %label1406 = alloca %struct.rtx_def*, align 8
  %tem1414 = alloca %struct.rtx_def*, align 8
  store i32 %rem_flag, i32* %rem_flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rem_flag.addr, metadata !7254, metadata !DIExpression()), !dbg !7255
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7256, metadata !DIExpression()), !dbg !7257
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !7258, metadata !DIExpression()), !dbg !7259
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !7260, metadata !DIExpression()), !dbg !7261
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !7262, metadata !DIExpression()), !dbg !7263
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !7264, metadata !DIExpression()), !dbg !7265
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !7266, metadata !DIExpression()), !dbg !7267
  call void @llvm.dbg.declare(metadata i32* %compute_mode, metadata !7268, metadata !DIExpression()), !dbg !7269
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tquotient, metadata !7270, metadata !DIExpression()), !dbg !7271
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %quotient, metadata !7272, metadata !DIExpression()), !dbg !7273
  store %struct.rtx_def* null, %struct.rtx_def** %quotient, align 8, !dbg !7273
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %remainder, metadata !7274, metadata !DIExpression()), !dbg !7275
  store %struct.rtx_def* null, %struct.rtx_def** %remainder, align 8, !dbg !7275
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !7276, metadata !DIExpression()), !dbg !7277
  call void @llvm.dbg.declare(metadata i32* %size, metadata !7278, metadata !DIExpression()), !dbg !7279
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7280, metadata !DIExpression()), !dbg !7281
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !7282, metadata !DIExpression()), !dbg !7283
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optab1, metadata !7284, metadata !DIExpression()), !dbg !7285
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optab2, metadata !7286, metadata !DIExpression()), !dbg !7287
  call void @llvm.dbg.declare(metadata i32* %op1_is_constant, metadata !7288, metadata !DIExpression()), !dbg !7289
  call void @llvm.dbg.declare(metadata i32* %op1_is_pow2, metadata !7290, metadata !DIExpression()), !dbg !7291
  store i32 0, i32* %op1_is_pow2, align 4, !dbg !7291
  call void @llvm.dbg.declare(metadata i32* %max_cost, metadata !7292, metadata !DIExpression()), !dbg !7293
  call void @llvm.dbg.declare(metadata i32* %extra_cost, metadata !7294, metadata !DIExpression()), !dbg !7295
  call void @llvm.dbg.declare(metadata i8* %speed, metadata !7296, metadata !DIExpression()), !dbg !7297
  %call = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !7298
  store i8 %call, i8* %speed, align 1, !dbg !7297
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7299
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7299
  %bf.load = load i32, i32* %1, align 8, !dbg !7299
  %bf.clear = and i32 %bf.load, 65535, !dbg !7299
  %cmp = icmp eq i32 %bf.clear, 30, !dbg !7299
  %conv = zext i1 %cmp to i32, !dbg !7299
  store i32 %conv, i32* %op1_is_constant, align 4, !dbg !7300
  %2 = load i32, i32* %op1_is_constant, align 4, !dbg !7301
  %tobool = icmp ne i32 %2, 0, !dbg !7301
  br i1 %tobool, label %if.then, label %if.end14, !dbg !7303

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7304
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7304
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !7304
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !7304
  %4 = load i64, i64* %arrayidx, align 8, !dbg !7304
  store i64 %4, i64* @expand_divmod.ext_op1, align 8, !dbg !7306
  %5 = load i32, i32* %unsignedp.addr, align 4, !dbg !7307
  %tobool1 = icmp ne i32 %5, 0, !dbg !7307
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !7309

if.then2:                                         ; preds = %if.then
  %6 = load i32, i32* %mode.addr, align 4, !dbg !7310
  %idxprom = zext i32 %6 to i64, !dbg !7310
  %arrayidx3 = getelementptr inbounds [87 x i64], [87 x i64]* @mode_mask_array, i64 0, i64 %idxprom, !dbg !7310
  %7 = load i64, i64* %arrayidx3, align 8, !dbg !7310
  %8 = load i64, i64* @expand_divmod.ext_op1, align 8, !dbg !7311
  %and = and i64 %8, %7, !dbg !7311
  store i64 %and, i64* @expand_divmod.ext_op1, align 8, !dbg !7311
  br label %if.end, !dbg !7312

if.end:                                           ; preds = %if.then2, %if.then
  %9 = load i64, i64* @expand_divmod.ext_op1, align 8, !dbg !7313
  %10 = load i64, i64* @expand_divmod.ext_op1, align 8, !dbg !7313
  %sub = sub nsw i64 %10, 1, !dbg !7313
  %and4 = and i64 %9, %sub, !dbg !7313
  %cmp5 = icmp eq i64 %and4, 0, !dbg !7313
  br i1 %cmp5, label %lor.end, label %lor.rhs, !dbg !7314

lor.rhs:                                          ; preds = %if.end
  %11 = load i32, i32* %unsignedp.addr, align 4, !dbg !7315
  %tobool7 = icmp ne i32 %11, 0, !dbg !7315
  br i1 %tobool7, label %land.end, label %land.rhs, !dbg !7316

land.rhs:                                         ; preds = %lor.rhs
  %12 = load i64, i64* @expand_divmod.ext_op1, align 8, !dbg !7317
  %sub8 = sub nsw i64 0, %12, !dbg !7317
  %13 = load i64, i64* @expand_divmod.ext_op1, align 8, !dbg !7317
  %sub9 = sub nsw i64 0, %13, !dbg !7317
  %sub10 = sub nsw i64 %sub9, 1, !dbg !7317
  %and11 = and i64 %sub8, %sub10, !dbg !7317
  %cmp12 = icmp eq i64 %and11, 0, !dbg !7317
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %14 = phi i1 [ false, %lor.rhs ], [ %cmp12, %land.rhs ], !dbg !7318
  br label %lor.end, !dbg !7314

lor.end:                                          ; preds = %land.end, %if.end
  %15 = phi i1 [ true, %if.end ], [ %14, %land.end ]
  %lor.ext = zext i1 %15 to i32, !dbg !7314
  store i32 %lor.ext, i32* %op1_is_pow2, align 4, !dbg !7319
  br label %if.end14, !dbg !7320

if.end14:                                         ; preds = %lor.end, %entry
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7321
  %17 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !7323
  %cmp15 = icmp eq %struct.rtx_def* %16, %17, !dbg !7324
  br i1 %cmp15, label %if.then17, label %if.end19, !dbg !7325

if.then17:                                        ; preds = %if.end14
  %18 = load i32, i32* %rem_flag.addr, align 4, !dbg !7326
  %tobool18 = icmp ne i32 %18, 0, !dbg !7326
  br i1 %tobool18, label %cond.true, label %cond.false, !dbg !7326

cond.true:                                        ; preds = %if.then17
  %19 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7327
  br label %cond.end, !dbg !7326

cond.false:                                       ; preds = %if.then17
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7328
  br label %cond.end, !dbg !7326

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %19, %cond.true ], [ %20, %cond.false ], !dbg !7326
  store %struct.rtx_def* %cond, %struct.rtx_def** %retval, align 8, !dbg !7329
  br label %return, !dbg !7329

if.end19:                                         ; preds = %if.end14
  %21 = load i32, i32* %unsignedp.addr, align 4, !dbg !7330
  %tobool20 = icmp ne i32 %21, 0, !dbg !7330
  br i1 %tobool20, label %if.end37, label %land.lhs.true, !dbg !7332

land.lhs.true:                                    ; preds = %if.end19
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7333
  %23 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !7334
  %cmp21 = icmp eq %struct.rtx_def* %22, %23, !dbg !7335
  br i1 %cmp21, label %if.then23, label %if.end37, !dbg !7336

if.then23:                                        ; preds = %land.lhs.true
  %24 = load i32, i32* %rem_flag.addr, align 4, !dbg !7337
  %tobool24 = icmp ne i32 %24, 0, !dbg !7337
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !7340

if.then25:                                        ; preds = %if.then23
  %25 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7341
  store %struct.rtx_def* %25, %struct.rtx_def** %retval, align 8, !dbg !7342
  br label %return, !dbg !7342

if.end26:                                         ; preds = %if.then23
  %26 = load i32, i32* %mode.addr, align 4, !dbg !7343
  %27 = load i32, i32* @flag_trapv, align 4, !dbg !7344
  %tobool27 = icmp ne i32 %27, 0, !dbg !7344
  br i1 %tobool27, label %land.rhs28, label %land.end34, !dbg !7345

land.rhs28:                                       ; preds = %if.end26
  %28 = load i32, i32* %mode.addr, align 4, !dbg !7346
  %idxprom29 = zext i32 %28 to i64, !dbg !7346
  %arrayidx30 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom29, !dbg !7346
  %29 = load i8, i8* %arrayidx30, align 1, !dbg !7346
  %conv31 = zext i8 %29 to i32, !dbg !7346
  %cmp32 = icmp eq i32 %conv31, 2, !dbg !7347
  br label %land.end34

land.end34:                                       ; preds = %land.rhs28, %if.end26
  %30 = phi i1 [ false, %if.end26 ], [ %cmp32, %land.rhs28 ], !dbg !7348
  %31 = zext i1 %30 to i64, !dbg !7344
  %cond35 = select i1 %30, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 65), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), !dbg !7344
  %32 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7349
  %33 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7350
  %call36 = call %struct.rtx_def* @expand_unop(i32 %26, %struct.optab_d* %cond35, %struct.rtx_def* %32, %struct.rtx_def* %33, i32 0), !dbg !7351
  store %struct.rtx_def* %call36, %struct.rtx_def** %retval, align 8, !dbg !7352
  br label %return, !dbg !7352

if.end37:                                         ; preds = %land.lhs.true, %if.end19
  %34 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7353
  %tobool38 = icmp ne %struct.rtx_def* %34, null, !dbg !7353
  br i1 %tobool38, label %land.lhs.true39, label %if.end77, !dbg !7355

land.lhs.true39:                                  ; preds = %if.end37
  %35 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7356
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !7356
  %bf.load40 = load i32, i32* %36, align 8, !dbg !7356
  %bf.clear41 = and i32 %bf.load40, 65535, !dbg !7356
  %cmp42 = icmp eq i32 %bf.clear41, 37, !dbg !7356
  br i1 %cmp42, label %land.lhs.true44, label %lor.lhs.false, !dbg !7357

land.lhs.true44:                                  ; preds = %land.lhs.true39
  %37 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7358
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !7358
  %bf.load45 = load i32, i32* %38, align 8, !dbg !7358
  %bf.lshr = lshr i32 %bf.load45, 31, !dbg !7358
  %tobool46 = icmp ne i32 %bf.lshr, 0, !dbg !7358
  br i1 %tobool46, label %if.then76, label %lor.lhs.false, !dbg !7359

lor.lhs.false:                                    ; preds = %land.lhs.true44, %land.lhs.true39
  %39 = load i32, i32* %rem_flag.addr, align 4, !dbg !7360
  %tobool47 = icmp ne i32 %39, 0, !dbg !7360
  br i1 %tobool47, label %land.lhs.true50, label %lor.lhs.false48, !dbg !7361

lor.lhs.false48:                                  ; preds = %lor.lhs.false
  %40 = load i32, i32* %op1_is_constant, align 4, !dbg !7362
  %tobool49 = icmp ne i32 %40, 0, !dbg !7362
  br i1 %tobool49, label %land.lhs.true50, label %lor.lhs.false63, !dbg !7363

land.lhs.true50:                                  ; preds = %lor.lhs.false48, %lor.lhs.false
  %41 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7364
  %42 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7365
  %call51 = call i32 @reg_mentioned_p(%struct.rtx_def* %41, %struct.rtx_def* %42), !dbg !7366
  %tobool52 = icmp ne i32 %call51, 0, !dbg !7366
  br i1 %tobool52, label %if.then76, label %lor.lhs.false53, !dbg !7367

lor.lhs.false53:                                  ; preds = %land.lhs.true50
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7368
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !7368
  %bf.load54 = load i32, i32* %44, align 8, !dbg !7368
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !7368
  %cmp56 = icmp eq i32 %bf.clear55, 43, !dbg !7368
  br i1 %cmp56, label %land.lhs.true58, label %lor.lhs.false63, !dbg !7369

land.lhs.true58:                                  ; preds = %lor.lhs.false53
  %45 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7370
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !7370
  %bf.load59 = load i32, i32* %46, align 8, !dbg !7370
  %bf.clear60 = and i32 %bf.load59, 65535, !dbg !7370
  %cmp61 = icmp eq i32 %bf.clear60, 43, !dbg !7370
  br i1 %cmp61, label %if.then76, label %lor.lhs.false63, !dbg !7371

lor.lhs.false63:                                  ; preds = %land.lhs.true58, %lor.lhs.false53, %lor.lhs.false48
  %47 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7372
  %48 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7373
  %call64 = call i32 @reg_mentioned_p(%struct.rtx_def* %47, %struct.rtx_def* %48), !dbg !7374
  %tobool65 = icmp ne i32 %call64, 0, !dbg !7374
  br i1 %tobool65, label %if.then76, label %lor.lhs.false66, !dbg !7375

lor.lhs.false66:                                  ; preds = %lor.lhs.false63
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7376
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !7376
  %bf.load67 = load i32, i32* %50, align 8, !dbg !7376
  %bf.clear68 = and i32 %bf.load67, 65535, !dbg !7376
  %cmp69 = icmp eq i32 %bf.clear68, 43, !dbg !7376
  br i1 %cmp69, label %land.lhs.true71, label %if.end77, !dbg !7377

land.lhs.true71:                                  ; preds = %lor.lhs.false66
  %51 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7378
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !7378
  %bf.load72 = load i32, i32* %52, align 8, !dbg !7378
  %bf.clear73 = and i32 %bf.load72, 65535, !dbg !7378
  %cmp74 = icmp eq i32 %bf.clear73, 43, !dbg !7378
  br i1 %cmp74, label %if.then76, label %if.end77, !dbg !7379

if.then76:                                        ; preds = %land.lhs.true71, %lor.lhs.false63, %land.lhs.true58, %land.lhs.true50, %land.lhs.true44
  store %struct.rtx_def* null, %struct.rtx_def** %target.addr, align 8, !dbg !7380
  br label %if.end77, !dbg !7381

if.end77:                                         ; preds = %if.then76, %land.lhs.true71, %lor.lhs.false66, %if.end37
  %53 = load i32, i32* %op1_is_pow2, align 4, !dbg !7382
  %tobool78 = icmp ne i32 %53, 0, !dbg !7382
  br i1 %tobool78, label %land.lhs.true79, label %cond.false85, !dbg !7383

land.lhs.true79:                                  ; preds = %if.end77
  %54 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7384
  %55 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7385
  %cmp80 = icmp ne %struct.rtx_def* %54, %55, !dbg !7386
  br i1 %cmp80, label %cond.true82, label %cond.false85, !dbg !7387

cond.true82:                                      ; preds = %land.lhs.true79
  %56 = load i32, i32* %unsignedp.addr, align 4, !dbg !7388
  %tobool83 = icmp ne i32 %56, 0, !dbg !7388
  %57 = zext i1 %tobool83 to i64, !dbg !7388
  %cond84 = select i1 %tobool83, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46), !dbg !7388
  br label %cond.end88, !dbg !7387

cond.false85:                                     ; preds = %land.lhs.true79, %if.end77
  %58 = load i32, i32* %unsignedp.addr, align 4, !dbg !7389
  %tobool86 = icmp ne i32 %58, 0, !dbg !7389
  %59 = zext i1 %tobool86 to i64, !dbg !7389
  %cond87 = select i1 %tobool86, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 34), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), !dbg !7389
  br label %cond.end88, !dbg !7387

cond.end88:                                       ; preds = %cond.false85, %cond.true82
  %cond89 = phi %struct.optab_d* [ %cond84, %cond.true82 ], [ %cond87, %cond.false85 ], !dbg !7387
  store %struct.optab_d* %cond89, %struct.optab_d** %optab1, align 8, !dbg !7390
  %60 = load i32, i32* %op1_is_pow2, align 4, !dbg !7391
  %tobool90 = icmp ne i32 %60, 0, !dbg !7391
  br i1 %tobool90, label %land.lhs.true91, label %cond.false95, !dbg !7392

land.lhs.true91:                                  ; preds = %cond.end88
  %61 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7393
  %62 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7394
  %cmp92 = icmp ne %struct.rtx_def* %61, %62, !dbg !7395
  br i1 %cmp92, label %cond.true94, label %cond.false95, !dbg !7396

cond.true94:                                      ; preds = %land.lhs.true91
  %63 = load %struct.optab_d*, %struct.optab_d** %optab1, align 8, !dbg !7397
  br label %cond.end98, !dbg !7396

cond.false95:                                     ; preds = %land.lhs.true91, %cond.end88
  %64 = load i32, i32* %unsignedp.addr, align 4, !dbg !7398
  %tobool96 = icmp ne i32 %64, 0, !dbg !7398
  %65 = zext i1 %tobool96 to i64, !dbg !7398
  %cond97 = select i1 %tobool96, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 35), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33), !dbg !7398
  br label %cond.end98, !dbg !7396

cond.end98:                                       ; preds = %cond.false95, %cond.true94
  %cond99 = phi %struct.optab_d* [ %63, %cond.true94 ], [ %cond97, %cond.false95 ], !dbg !7396
  store %struct.optab_d* %cond99, %struct.optab_d** %optab2, align 8, !dbg !7399
  %66 = load i32, i32* %mode.addr, align 4, !dbg !7400
  store i32 %66, i32* %compute_mode, align 4, !dbg !7402
  br label %for.cond, !dbg !7403

for.cond:                                         ; preds = %for.inc, %cond.end98
  %67 = load i32, i32* %compute_mode, align 4, !dbg !7404
  %cmp100 = icmp ne i32 %67, 0, !dbg !7406
  br i1 %cmp100, label %for.body, label %for.end, !dbg !7407

for.body:                                         ; preds = %for.cond
  %68 = load %struct.optab_d*, %struct.optab_d** %optab1, align 8, !dbg !7408
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %68, i32 0, i32 4, !dbg !7408
  %69 = load i32, i32* %compute_mode, align 4, !dbg !7408
  %idxprom102 = sext i32 %69 to i64, !dbg !7408
  %arrayidx103 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom102, !dbg !7408
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx103, i32 0, i32 0, !dbg !7410
  %70 = load i32, i32* %insn_code, align 4, !dbg !7410
  %cmp104 = icmp ne i32 %70, 2956, !dbg !7411
  br i1 %cmp104, label %if.then113, label %lor.lhs.false106, !dbg !7412

lor.lhs.false106:                                 ; preds = %for.body
  %71 = load %struct.optab_d*, %struct.optab_d** %optab2, align 8, !dbg !7413
  %handlers107 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %71, i32 0, i32 4, !dbg !7413
  %72 = load i32, i32* %compute_mode, align 4, !dbg !7413
  %idxprom108 = sext i32 %72 to i64, !dbg !7413
  %arrayidx109 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers107, i64 0, i64 %idxprom108, !dbg !7413
  %insn_code110 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx109, i32 0, i32 0, !dbg !7414
  %73 = load i32, i32* %insn_code110, align 4, !dbg !7414
  %cmp111 = icmp ne i32 %73, 2956, !dbg !7415
  br i1 %cmp111, label %if.then113, label %if.end114, !dbg !7416

if.then113:                                       ; preds = %lor.lhs.false106, %for.body
  br label %for.end, !dbg !7417

if.end114:                                        ; preds = %lor.lhs.false106
  br label %for.inc, !dbg !7418

for.inc:                                          ; preds = %if.end114
  %74 = load i32, i32* %compute_mode, align 4, !dbg !7419
  %idxprom115 = zext i32 %74 to i64, !dbg !7419
  %arrayidx116 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom115, !dbg !7419
  %75 = load i8, i8* %arrayidx116, align 1, !dbg !7419
  %conv117 = zext i8 %75 to i32, !dbg !7419
  store i32 %conv117, i32* %compute_mode, align 4, !dbg !7420
  br label %for.cond, !dbg !7421, !llvm.loop !7422

for.end:                                          ; preds = %if.then113, %for.cond
  %76 = load i32, i32* %compute_mode, align 4, !dbg !7424
  %cmp118 = icmp eq i32 %76, 0, !dbg !7426
  br i1 %cmp118, label %if.then120, label %if.end137, !dbg !7427

if.then120:                                       ; preds = %for.end
  %77 = load i32, i32* %mode.addr, align 4, !dbg !7428
  store i32 %77, i32* %compute_mode, align 4, !dbg !7430
  br label %for.cond121, !dbg !7431

for.cond121:                                      ; preds = %for.inc132, %if.then120
  %78 = load i32, i32* %compute_mode, align 4, !dbg !7432
  %cmp122 = icmp ne i32 %78, 0, !dbg !7434
  br i1 %cmp122, label %for.body124, label %for.end136, !dbg !7435

for.body124:                                      ; preds = %for.cond121
  %79 = load %struct.optab_d*, %struct.optab_d** %optab1, align 8, !dbg !7436
  %80 = load i32, i32* %compute_mode, align 4, !dbg !7438
  %call125 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %79, i32 %80), !dbg !7439
  %tobool126 = icmp ne %struct.rtx_def* %call125, null, !dbg !7439
  br i1 %tobool126, label %if.then130, label %lor.lhs.false127, !dbg !7440

lor.lhs.false127:                                 ; preds = %for.body124
  %81 = load %struct.optab_d*, %struct.optab_d** %optab2, align 8, !dbg !7441
  %82 = load i32, i32* %compute_mode, align 4, !dbg !7442
  %call128 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %81, i32 %82), !dbg !7443
  %tobool129 = icmp ne %struct.rtx_def* %call128, null, !dbg !7443
  br i1 %tobool129, label %if.then130, label %if.end131, !dbg !7444

if.then130:                                       ; preds = %lor.lhs.false127, %for.body124
  br label %for.end136, !dbg !7445

if.end131:                                        ; preds = %lor.lhs.false127
  br label %for.inc132, !dbg !7446

for.inc132:                                       ; preds = %if.end131
  %83 = load i32, i32* %compute_mode, align 4, !dbg !7447
  %idxprom133 = zext i32 %83 to i64, !dbg !7447
  %arrayidx134 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom133, !dbg !7447
  %84 = load i8, i8* %arrayidx134, align 1, !dbg !7447
  %conv135 = zext i8 %84 to i32, !dbg !7447
  store i32 %conv135, i32* %compute_mode, align 4, !dbg !7448
  br label %for.cond121, !dbg !7449, !llvm.loop !7450

for.end136:                                       ; preds = %if.then130, %for.cond121
  br label %if.end137, !dbg !7451

if.end137:                                        ; preds = %for.end136, %for.end
  %85 = load i32, i32* %compute_mode, align 4, !dbg !7452
  %cmp138 = icmp eq i32 %85, 0, !dbg !7454
  br i1 %cmp138, label %if.then140, label %if.end141, !dbg !7455

if.then140:                                       ; preds = %if.end137
  %86 = load i32, i32* %mode.addr, align 4, !dbg !7456
  store i32 %86, i32* %compute_mode, align 4, !dbg !7457
  br label %if.end141, !dbg !7458

if.end141:                                        ; preds = %if.then140, %if.end137
  %87 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7459
  %tobool142 = icmp ne %struct.rtx_def* %87, null, !dbg !7459
  br i1 %tobool142, label %land.lhs.true143, label %if.else, !dbg !7461

land.lhs.true143:                                 ; preds = %if.end141
  %88 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7462
  %89 = bitcast %struct.rtx_def* %88 to i32*, !dbg !7462
  %bf.load144 = load i32, i32* %89, align 8, !dbg !7462
  %bf.lshr145 = lshr i32 %bf.load144, 16, !dbg !7462
  %bf.clear146 = and i32 %bf.lshr145, 255, !dbg !7462
  %90 = load i32, i32* %compute_mode, align 4, !dbg !7463
  %cmp147 = icmp eq i32 %bf.clear146, %90, !dbg !7464
  br i1 %cmp147, label %if.then149, label %if.else, !dbg !7465

if.then149:                                       ; preds = %land.lhs.true143
  %91 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7466
  store %struct.rtx_def* %91, %struct.rtx_def** %tquotient, align 8, !dbg !7467
  br label %if.end151, !dbg !7468

if.else:                                          ; preds = %land.lhs.true143, %if.end141
  %92 = load i32, i32* %compute_mode, align 4, !dbg !7469
  %call150 = call %struct.rtx_def* @gen_reg_rtx(i32 %92), !dbg !7470
  store %struct.rtx_def* %call150, %struct.rtx_def** %tquotient, align 8, !dbg !7471
  br label %if.end151

if.end151:                                        ; preds = %if.else, %if.then149
  %93 = load i32, i32* %compute_mode, align 4, !dbg !7472
  %idxprom152 = zext i32 %93 to i64, !dbg !7472
  %arrayidx153 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom152, !dbg !7472
  %94 = load i8, i8* %arrayidx153, align 1, !dbg !7472
  %conv154 = zext i8 %94 to i16, !dbg !7472
  %conv155 = zext i16 %conv154 to i32, !dbg !7472
  %mul = mul nsw i32 %conv155, 8, !dbg !7472
  %conv156 = trunc i32 %mul to i16, !dbg !7472
  %conv157 = zext i16 %conv156 to i32, !dbg !7472
  store i32 %conv157, i32* %size, align 4, !dbg !7473
  %95 = load i32, i32* %unsignedp.addr, align 4, !dbg !7474
  %tobool158 = icmp ne i32 %95, 0, !dbg !7474
  br i1 %tobool158, label %cond.true159, label %cond.false164, !dbg !7474

cond.true159:                                     ; preds = %if.end151
  %96 = load i8, i8* %speed, align 1, !dbg !7475
  %idxprom160 = zext i8 %96 to i64, !dbg !7476
  %arrayidx161 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @udiv_cost, i64 0, i64 %idxprom160, !dbg !7476
  %97 = load i32, i32* %compute_mode, align 4, !dbg !7477
  %idxprom162 = zext i32 %97 to i64, !dbg !7476
  %arrayidx163 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx161, i64 0, i64 %idxprom162, !dbg !7476
  %98 = load i32, i32* %arrayidx163, align 4, !dbg !7476
  br label %cond.end169, !dbg !7474

cond.false164:                                    ; preds = %if.end151
  %99 = load i8, i8* %speed, align 1, !dbg !7478
  %idxprom165 = zext i8 %99 to i64, !dbg !7479
  %arrayidx166 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @sdiv_cost, i64 0, i64 %idxprom165, !dbg !7479
  %100 = load i32, i32* %compute_mode, align 4, !dbg !7480
  %idxprom167 = zext i32 %100 to i64, !dbg !7479
  %arrayidx168 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx166, i64 0, i64 %idxprom167, !dbg !7479
  %101 = load i32, i32* %arrayidx168, align 4, !dbg !7479
  br label %cond.end169, !dbg !7474

cond.end169:                                      ; preds = %cond.false164, %cond.true159
  %cond170 = phi i32 [ %98, %cond.true159 ], [ %101, %cond.false164 ], !dbg !7474
  store i32 %cond170, i32* %max_cost, align 4, !dbg !7481
  %102 = load i32, i32* %rem_flag.addr, align 4, !dbg !7482
  %tobool171 = icmp ne i32 %102, 0, !dbg !7482
  br i1 %tobool171, label %land.lhs.true172, label %if.end193, !dbg !7484

land.lhs.true172:                                 ; preds = %cond.end169
  %103 = load i64, i64* @expand_divmod.last_div_const, align 8, !dbg !7485
  %cmp173 = icmp ne i64 %103, 0, !dbg !7486
  br i1 %cmp173, label %land.lhs.true175, label %if.then183, !dbg !7487

land.lhs.true175:                                 ; preds = %land.lhs.true172
  %104 = load i32, i32* %op1_is_constant, align 4, !dbg !7488
  %tobool176 = icmp ne i32 %104, 0, !dbg !7488
  br i1 %tobool176, label %land.lhs.true177, label %if.then183, !dbg !7489

land.lhs.true177:                                 ; preds = %land.lhs.true175
  %105 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7490
  %u178 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1, !dbg !7490
  %hwint179 = bitcast %union.u* %u178 to [1 x i64]*, !dbg !7490
  %arrayidx180 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint179, i64 0, i64 0, !dbg !7490
  %106 = load i64, i64* %arrayidx180, align 8, !dbg !7490
  %107 = load i64, i64* @expand_divmod.last_div_const, align 8, !dbg !7491
  %cmp181 = icmp eq i64 %106, %107, !dbg !7492
  br i1 %cmp181, label %if.end193, label %if.then183, !dbg !7493

if.then183:                                       ; preds = %land.lhs.true177, %land.lhs.true175, %land.lhs.true172
  %108 = load i8, i8* %speed, align 1, !dbg !7494
  %idxprom184 = zext i8 %108 to i64, !dbg !7495
  %arrayidx185 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @mul_cost, i64 0, i64 %idxprom184, !dbg !7495
  %109 = load i32, i32* %compute_mode, align 4, !dbg !7496
  %idxprom186 = zext i32 %109 to i64, !dbg !7495
  %arrayidx187 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx185, i64 0, i64 %idxprom186, !dbg !7495
  %110 = load i32, i32* %arrayidx187, align 4, !dbg !7495
  %111 = load i8, i8* %speed, align 1, !dbg !7497
  %idxprom188 = zext i8 %111 to i64, !dbg !7498
  %arrayidx189 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom188, !dbg !7498
  %112 = load i32, i32* %compute_mode, align 4, !dbg !7499
  %idxprom190 = zext i32 %112 to i64, !dbg !7498
  %arrayidx191 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx189, i64 0, i64 %idxprom190, !dbg !7498
  %113 = load i32, i32* %arrayidx191, align 4, !dbg !7498
  %add = add nsw i32 %110, %113, !dbg !7500
  %114 = load i32, i32* %max_cost, align 4, !dbg !7501
  %sub192 = sub nsw i32 %114, %add, !dbg !7501
  store i32 %sub192, i32* %max_cost, align 4, !dbg !7501
  br label %if.end193, !dbg !7502

if.end193:                                        ; preds = %if.then183, %land.lhs.true177, %cond.end169
  %115 = load i32, i32* %rem_flag.addr, align 4, !dbg !7503
  %tobool194 = icmp ne i32 %115, 0, !dbg !7503
  br i1 %tobool194, label %cond.false201, label %land.lhs.true195, !dbg !7504

land.lhs.true195:                                 ; preds = %if.end193
  %116 = load i32, i32* %op1_is_constant, align 4, !dbg !7505
  %tobool196 = icmp ne i32 %116, 0, !dbg !7505
  br i1 %tobool196, label %cond.true197, label %cond.false201, !dbg !7506

cond.true197:                                     ; preds = %land.lhs.true195
  %117 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7507
  %u198 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %117, i32 0, i32 1, !dbg !7507
  %hwint199 = bitcast %union.u* %u198 to [1 x i64]*, !dbg !7507
  %arrayidx200 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint199, i64 0, i64 0, !dbg !7507
  %118 = load i64, i64* %arrayidx200, align 8, !dbg !7507
  br label %cond.end202, !dbg !7506

cond.false201:                                    ; preds = %land.lhs.true195, %if.end193
  br label %cond.end202, !dbg !7506

cond.end202:                                      ; preds = %cond.false201, %cond.true197
  %cond203 = phi i64 [ %118, %cond.true197 ], [ 0, %cond.false201 ], !dbg !7506
  store i64 %cond203, i64* @expand_divmod.last_div_const, align 8, !dbg !7508
  %119 = load i32, i32* %compute_mode, align 4, !dbg !7509
  %120 = load i32, i32* %mode.addr, align 4, !dbg !7511
  %cmp204 = icmp ne i32 %119, %120, !dbg !7512
  br i1 %cmp204, label %if.then206, label %if.end244, !dbg !7513

if.then206:                                       ; preds = %cond.end202
  %121 = load i32, i32* %compute_mode, align 4, !dbg !7514
  %122 = load i32, i32* %mode.addr, align 4, !dbg !7516
  %123 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7517
  %124 = load i32, i32* %unsignedp.addr, align 4, !dbg !7518
  %call207 = call %struct.rtx_def* @convert_modes(i32 %121, i32 %122, %struct.rtx_def* %123, i32 %124), !dbg !7519
  store %struct.rtx_def* %call207, %struct.rtx_def** %op0.addr, align 8, !dbg !7520
  %125 = load i32, i32* %compute_mode, align 4, !dbg !7521
  %126 = load i32, i32* %mode.addr, align 4, !dbg !7522
  %127 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7523
  %128 = load i32, i32* %unsignedp.addr, align 4, !dbg !7524
  %call208 = call %struct.rtx_def* @convert_modes(i32 %125, i32 %126, %struct.rtx_def* %127, i32 %128), !dbg !7525
  store %struct.rtx_def* %call208, %struct.rtx_def** %op1.addr, align 8, !dbg !7526
  %129 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7527
  %130 = bitcast %struct.rtx_def* %129 to i32*, !dbg !7527
  %bf.load209 = load i32, i32* %130, align 8, !dbg !7527
  %bf.clear210 = and i32 %bf.load209, 65535, !dbg !7527
  %cmp211 = icmp eq i32 %bf.clear210, 30, !dbg !7527
  %conv212 = zext i1 %cmp211 to i32, !dbg !7527
  store i32 %conv212, i32* %op1_is_constant, align 4, !dbg !7528
  %131 = load i32, i32* %op1_is_constant, align 4, !dbg !7529
  %tobool213 = icmp ne i32 %131, 0, !dbg !7529
  br i1 %tobool213, label %land.rhs214, label %land.end243, !dbg !7530

land.rhs214:                                      ; preds = %if.then206
  %132 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7531
  %u215 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %132, i32 0, i32 1, !dbg !7531
  %hwint216 = bitcast %union.u* %u215 to [1 x i64]*, !dbg !7531
  %arrayidx217 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint216, i64 0, i64 0, !dbg !7531
  %133 = load i64, i64* %arrayidx217, align 8, !dbg !7531
  %134 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7531
  %u218 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %134, i32 0, i32 1, !dbg !7531
  %hwint219 = bitcast %union.u* %u218 to [1 x i64]*, !dbg !7531
  %arrayidx220 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint219, i64 0, i64 0, !dbg !7531
  %135 = load i64, i64* %arrayidx220, align 8, !dbg !7531
  %sub221 = sub nsw i64 %135, 1, !dbg !7531
  %and222 = and i64 %133, %sub221, !dbg !7531
  %cmp223 = icmp eq i64 %and222, 0, !dbg !7531
  br i1 %cmp223, label %lor.end241, label %lor.rhs225, !dbg !7532

lor.rhs225:                                       ; preds = %land.rhs214
  %136 = load i32, i32* %unsignedp.addr, align 4, !dbg !7533
  %tobool226 = icmp ne i32 %136, 0, !dbg !7533
  br i1 %tobool226, label %land.end240, label %land.rhs227, !dbg !7534

land.rhs227:                                      ; preds = %lor.rhs225
  %137 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7535
  %u228 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %137, i32 0, i32 1, !dbg !7535
  %hwint229 = bitcast %union.u* %u228 to [1 x i64]*, !dbg !7535
  %arrayidx230 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint229, i64 0, i64 0, !dbg !7535
  %138 = load i64, i64* %arrayidx230, align 8, !dbg !7535
  %sub231 = sub nsw i64 0, %138, !dbg !7535
  %139 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7535
  %u232 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1, !dbg !7535
  %hwint233 = bitcast %union.u* %u232 to [1 x i64]*, !dbg !7535
  %arrayidx234 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint233, i64 0, i64 0, !dbg !7535
  %140 = load i64, i64* %arrayidx234, align 8, !dbg !7535
  %sub235 = sub nsw i64 0, %140, !dbg !7535
  %sub236 = sub nsw i64 %sub235, 1, !dbg !7535
  %and237 = and i64 %sub231, %sub236, !dbg !7535
  %cmp238 = icmp eq i64 %and237, 0, !dbg !7535
  br label %land.end240

land.end240:                                      ; preds = %land.rhs227, %lor.rhs225
  %141 = phi i1 [ false, %lor.rhs225 ], [ %cmp238, %land.rhs227 ], !dbg !7536
  br label %lor.end241, !dbg !7532

lor.end241:                                       ; preds = %land.end240, %land.rhs214
  %142 = phi i1 [ true, %land.rhs214 ], [ %141, %land.end240 ]
  br label %land.end243

land.end243:                                      ; preds = %lor.end241, %if.then206
  %143 = phi i1 [ false, %if.then206 ], [ %142, %lor.end241 ], !dbg !7536
  %land.ext = zext i1 %143 to i32, !dbg !7530
  store i32 %land.ext, i32* %op1_is_pow2, align 4, !dbg !7537
  br label %if.end244, !dbg !7538

if.end244:                                        ; preds = %land.end243, %cond.end202
  %144 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7539
  %145 = bitcast %struct.rtx_def* %144 to i32*, !dbg !7539
  %bf.load245 = load i32, i32* %145, align 8, !dbg !7539
  %bf.clear246 = and i32 %bf.load245, 65535, !dbg !7539
  %cmp247 = icmp eq i32 %bf.clear246, 43, !dbg !7539
  br i1 %cmp247, label %land.lhs.true249, label %if.end256, !dbg !7541

land.lhs.true249:                                 ; preds = %if.end244
  %146 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7542
  %147 = bitcast %struct.rtx_def* %146 to i32*, !dbg !7542
  %bf.load250 = load i32, i32* %147, align 8, !dbg !7542
  %bf.lshr251 = lshr i32 %bf.load250, 27, !dbg !7542
  %bf.clear252 = and i32 %bf.lshr251, 1, !dbg !7542
  %tobool253 = icmp ne i32 %bf.clear252, 0, !dbg !7542
  br i1 %tobool253, label %if.then254, label %if.end256, !dbg !7543

if.then254:                                       ; preds = %land.lhs.true249
  %148 = load i32, i32* %compute_mode, align 4, !dbg !7544
  %149 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7545
  %call255 = call %struct.rtx_def* @force_reg(i32 %148, %struct.rtx_def* %149), !dbg !7546
  store %struct.rtx_def* %call255, %struct.rtx_def** %op0.addr, align 8, !dbg !7547
  br label %if.end256, !dbg !7548

if.end256:                                        ; preds = %if.then254, %land.lhs.true249, %if.end244
  %150 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7549
  %151 = bitcast %struct.rtx_def* %150 to i32*, !dbg !7549
  %bf.load257 = load i32, i32* %151, align 8, !dbg !7549
  %bf.clear258 = and i32 %bf.load257, 65535, !dbg !7549
  %cmp259 = icmp eq i32 %bf.clear258, 43, !dbg !7549
  br i1 %cmp259, label %land.lhs.true261, label %if.end268, !dbg !7551

land.lhs.true261:                                 ; preds = %if.end256
  %152 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7552
  %153 = bitcast %struct.rtx_def* %152 to i32*, !dbg !7552
  %bf.load262 = load i32, i32* %153, align 8, !dbg !7552
  %bf.lshr263 = lshr i32 %bf.load262, 27, !dbg !7552
  %bf.clear264 = and i32 %bf.lshr263, 1, !dbg !7552
  %tobool265 = icmp ne i32 %bf.clear264, 0, !dbg !7552
  br i1 %tobool265, label %if.then266, label %if.end268, !dbg !7553

if.then266:                                       ; preds = %land.lhs.true261
  %154 = load i32, i32* %compute_mode, align 4, !dbg !7554
  %155 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7555
  %call267 = call %struct.rtx_def* @force_reg(i32 %154, %struct.rtx_def* %155), !dbg !7556
  store %struct.rtx_def* %call267, %struct.rtx_def** %op1.addr, align 8, !dbg !7557
  br label %if.end268, !dbg !7558

if.end268:                                        ; preds = %if.then266, %land.lhs.true261, %if.end256
  %156 = load i32, i32* %rem_flag.addr, align 4, !dbg !7559
  %tobool269 = icmp ne i32 %156, 0, !dbg !7559
  br i1 %tobool269, label %if.then272, label %lor.lhs.false270, !dbg !7561

lor.lhs.false270:                                 ; preds = %if.end268
  %157 = load i32, i32* %op1_is_constant, align 4, !dbg !7562
  %tobool271 = icmp ne i32 %157, 0, !dbg !7562
  br i1 %tobool271, label %if.then272, label %if.end274, !dbg !7563

if.then272:                                       ; preds = %lor.lhs.false270, %if.end268
  %158 = load i32, i32* %compute_mode, align 4, !dbg !7564
  %159 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7565
  %call273 = call %struct.rtx_def* @force_reg(i32 %158, %struct.rtx_def* %159), !dbg !7566
  store %struct.rtx_def* %call273, %struct.rtx_def** %op0.addr, align 8, !dbg !7567
  br label %if.end274, !dbg !7568

if.end274:                                        ; preds = %if.then272, %lor.lhs.false270
  %call275 = call %struct.rtx_def* @get_last_insn(), !dbg !7569
  store %struct.rtx_def* %call275, %struct.rtx_def** %last, align 8, !dbg !7570
  %160 = load i32, i32* %unsignedp.addr, align 4, !dbg !7571
  %tobool276 = icmp ne i32 %160, 0, !dbg !7571
  br i1 %tobool276, label %if.then277, label %if.end292, !dbg !7573

if.then277:                                       ; preds = %if.end274
  %161 = load i32, i32* %code.addr, align 4, !dbg !7574
  %cmp278 = icmp eq i32 %161, 69, !dbg !7577
  br i1 %cmp278, label %if.then280, label %if.end281, !dbg !7578

if.then280:                                       ; preds = %if.then277
  store i32 67, i32* %code.addr, align 4, !dbg !7579
  br label %if.end281, !dbg !7580

if.end281:                                        ; preds = %if.then280, %if.then277
  %162 = load i32, i32* %code.addr, align 4, !dbg !7581
  %cmp282 = icmp eq i32 %162, 73, !dbg !7583
  br i1 %cmp282, label %if.then284, label %if.end285, !dbg !7584

if.then284:                                       ; preds = %if.end281
  store i32 71, i32* %code.addr, align 4, !dbg !7585
  br label %if.end285, !dbg !7586

if.end285:                                        ; preds = %if.then284, %if.end281
  %163 = load i32, i32* %code.addr, align 4, !dbg !7587
  %cmp286 = icmp eq i32 %163, 76, !dbg !7589
  br i1 %cmp286, label %land.lhs.true288, label %if.end291, !dbg !7590

land.lhs.true288:                                 ; preds = %if.end285
  %164 = load i32, i32* %op1_is_pow2, align 4, !dbg !7591
  %tobool289 = icmp ne i32 %164, 0, !dbg !7591
  br i1 %tobool289, label %if.then290, label %if.end291, !dbg !7592

if.then290:                                       ; preds = %land.lhs.true288
  store i32 67, i32* %code.addr, align 4, !dbg !7593
  br label %if.end291, !dbg !7594

if.end291:                                        ; preds = %if.then290, %land.lhs.true288, %if.end285
  br label %if.end292, !dbg !7595

if.end292:                                        ; preds = %if.end291, %if.end274
  %165 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7596
  %166 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7598
  %cmp293 = icmp ne %struct.rtx_def* %165, %166, !dbg !7599
  br i1 %cmp293, label %if.then295, label %if.end1440, !dbg !7600

if.then295:                                       ; preds = %if.end292
  %167 = load i32, i32* %code.addr, align 4, !dbg !7601
  switch i32 %167, label %sw.default [
    i32 71, label %sw.bb
    i32 67, label %sw.bb
    i32 69, label %sw.bb889
    i32 73, label %sw.bb889
    i32 68, label %sw.bb1099
    i32 72, label %sw.bb1099
    i32 76, label %sw.bb1353
    i32 70, label %sw.bb1383
    i32 74, label %sw.bb1383
  ], !dbg !7602

sw.bb:                                            ; preds = %if.then295, %if.then295
  %168 = load i32, i32* %op1_is_constant, align 4, !dbg !7603
  %tobool296 = icmp ne i32 %168, 0, !dbg !7603
  br i1 %tobool296, label %if.then297, label %if.end888, !dbg !7606

if.then297:                                       ; preds = %sw.bb
  %169 = load i32, i32* %unsignedp.addr, align 4, !dbg !7607
  %tobool298 = icmp ne i32 %169, 0, !dbg !7607
  br i1 %tobool298, label %if.then299, label %if.else500, !dbg !7610

if.then299:                                       ; preds = %if.then297
  call void @llvm.dbg.declare(metadata i64* %mh, metadata !7611, metadata !DIExpression()), !dbg !7613
  call void @llvm.dbg.declare(metadata i32* %pre_shift, metadata !7614, metadata !DIExpression()), !dbg !7615
  call void @llvm.dbg.declare(metadata i32* %post_shift, metadata !7616, metadata !DIExpression()), !dbg !7617
  call void @llvm.dbg.declare(metadata i32* %dummy, metadata !7618, metadata !DIExpression()), !dbg !7619
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %ml, metadata !7620, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.declare(metadata i64* %d, metadata !7622, metadata !DIExpression()), !dbg !7623
  %170 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7624
  %u300 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %170, i32 0, i32 1, !dbg !7624
  %hwint301 = bitcast %union.u* %u300 to [1 x i64]*, !dbg !7624
  %arrayidx302 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint301, i64 0, i64 0, !dbg !7624
  %171 = load i64, i64* %arrayidx302, align 8, !dbg !7624
  %172 = load i32, i32* %compute_mode, align 4, !dbg !7625
  %idxprom303 = zext i32 %172 to i64, !dbg !7625
  %arrayidx304 = getelementptr inbounds [87 x i64], [87 x i64]* @mode_mask_array, i64 0, i64 %idxprom303, !dbg !7625
  %173 = load i64, i64* %arrayidx304, align 8, !dbg !7625
  %and305 = and i64 %171, %173, !dbg !7626
  store i64 %and305, i64* %d, align 8, !dbg !7623
  %174 = load i64, i64* %d, align 8, !dbg !7627
  %175 = load i64, i64* %d, align 8, !dbg !7627
  %sub306 = sub i64 %175, 1, !dbg !7627
  %and307 = and i64 %174, %sub306, !dbg !7627
  %cmp308 = icmp eq i64 %and307, 0, !dbg !7627
  br i1 %cmp308, label %if.then310, label %if.else325, !dbg !7629

if.then310:                                       ; preds = %if.then299
  %176 = load i64, i64* %d, align 8, !dbg !7630
  %call311 = call i32 @floor_log2(i64 %176), !dbg !7632
  store i32 %call311, i32* %pre_shift, align 4, !dbg !7633
  %177 = load i32, i32* %rem_flag.addr, align 4, !dbg !7634
  %tobool312 = icmp ne i32 %177, 0, !dbg !7634
  br i1 %tobool312, label %if.then313, label %if.end321, !dbg !7636

if.then313:                                       ; preds = %if.then310
  %178 = load i32, i32* %compute_mode, align 4, !dbg !7637
  %179 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7639
  %180 = load i32, i32* %pre_shift, align 4, !dbg !7640
  %sh_prom = zext i32 %180 to i64, !dbg !7640
  %shl = shl i64 1, %sh_prom, !dbg !7640
  %sub314 = sub nsw i64 %shl, 1, !dbg !7640
  %call315 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub314), !dbg !7640
  %181 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !7641
  %call316 = call %struct.rtx_def* @expand_binop(i32 %178, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %179, %struct.rtx_def* %call315, %struct.rtx_def* %181, i32 1, i32 3), !dbg !7642
  store %struct.rtx_def* %call316, %struct.rtx_def** %remainder, align 8, !dbg !7643
  %182 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !7644
  %tobool317 = icmp ne %struct.rtx_def* %182, null, !dbg !7644
  br i1 %tobool317, label %if.then318, label %if.end320, !dbg !7646

if.then318:                                       ; preds = %if.then313
  %183 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !7647
  %184 = load i32, i32* %mode.addr, align 4, !dbg !7648
  %185 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !7649
  %call319 = call %struct.rtx_def* %183(i32 %184, %struct.rtx_def* %185), !dbg !7647
  store %struct.rtx_def* %call319, %struct.rtx_def** %retval, align 8, !dbg !7650
  br label %return, !dbg !7650

if.end320:                                        ; preds = %if.then313
  br label %if.end321, !dbg !7651

if.end321:                                        ; preds = %if.end320, %if.then310
  %186 = load i32, i32* %compute_mode, align 4, !dbg !7652
  %187 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7653
  %188 = load i32, i32* %pre_shift, align 4, !dbg !7654
  %conv322 = sext i32 %188 to i64, !dbg !7654
  %call323 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv322), !dbg !7655
  %189 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !7656
  %call324 = call %struct.rtx_def* @expand_shift(i32 84, i32 %186, %struct.rtx_def* %187, %union.tree_node* %call323, %struct.rtx_def* %189, i32 1), !dbg !7657
  store %struct.rtx_def* %call324, %struct.rtx_def** %quotient, align 8, !dbg !7658
  br label %if.end440, !dbg !7659

if.else325:                                       ; preds = %if.then299
  %190 = load i32, i32* %size, align 4, !dbg !7660
  %cmp326 = icmp sle i32 %190, 64, !dbg !7662
  br i1 %cmp326, label %if.then328, label %if.else438, !dbg !7663

if.then328:                                       ; preds = %if.else325
  %191 = load i64, i64* %d, align 8, !dbg !7664
  %192 = load i32, i32* %size, align 4, !dbg !7667
  %sub329 = sub nsw i32 %192, 1, !dbg !7668
  %sh_prom330 = zext i32 %sub329 to i64, !dbg !7669
  %shl331 = shl i64 1, %sh_prom330, !dbg !7669
  %cmp332 = icmp uge i64 %191, %shl331, !dbg !7670
  br i1 %cmp332, label %if.then334, label %if.else336, !dbg !7671

if.then334:                                       ; preds = %if.then328
  %193 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !7672
  %194 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7674
  %195 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7675
  %196 = load i32, i32* %compute_mode, align 4, !dbg !7676
  %call335 = call %struct.rtx_def* @emit_store_flag_force(%struct.rtx_def* %193, i32 86, %struct.rtx_def* %194, %struct.rtx_def* %195, i32 %196, i32 1, i32 1), !dbg !7677
  store %struct.rtx_def* %call335, %struct.rtx_def** %quotient, align 8, !dbg !7678
  br label %if.end437, !dbg !7679

if.else336:                                       ; preds = %if.then328
  %197 = load i64, i64* %d, align 8, !dbg !7680
  %198 = load i32, i32* %size, align 4, !dbg !7682
  %199 = load i32, i32* %size, align 4, !dbg !7683
  %call337 = call i64 @choose_multiplier(i64 %197, i32 %198, i32 %199, %struct.rtx_def** %ml, i32* %post_shift, i32* %dummy), !dbg !7684
  store i64 %call337, i64* %mh, align 8, !dbg !7685
  %200 = load i64, i64* %mh, align 8, !dbg !7686
  %cmp338 = icmp ne i64 %200, 0, !dbg !7688
  br i1 %cmp338, label %land.lhs.true340, label %if.else356, !dbg !7689

land.lhs.true340:                                 ; preds = %if.else336
  %201 = load i64, i64* %d, align 8, !dbg !7690
  %and341 = and i64 %201, 1, !dbg !7691
  %cmp342 = icmp eq i64 %and341, 0, !dbg !7692
  br i1 %cmp342, label %if.then344, label %if.else356, !dbg !7693

if.then344:                                       ; preds = %land.lhs.true340
  %202 = load i64, i64* %d, align 8, !dbg !7694
  %203 = load i64, i64* %d, align 8, !dbg !7696
  %sub345 = sub i64 0, %203, !dbg !7697
  %and346 = and i64 %202, %sub345, !dbg !7698
  %call347 = call i32 @floor_log2(i64 %and346), !dbg !7699
  store i32 %call347, i32* %pre_shift, align 4, !dbg !7700
  %204 = load i64, i64* %d, align 8, !dbg !7701
  %205 = load i32, i32* %pre_shift, align 4, !dbg !7702
  %sh_prom348 = zext i32 %205 to i64, !dbg !7703
  %shr = lshr i64 %204, %sh_prom348, !dbg !7703
  %206 = load i32, i32* %size, align 4, !dbg !7704
  %207 = load i32, i32* %size, align 4, !dbg !7705
  %208 = load i32, i32* %pre_shift, align 4, !dbg !7706
  %sub349 = sub nsw i32 %207, %208, !dbg !7707
  %call350 = call i64 @choose_multiplier(i64 %shr, i32 %206, i32 %sub349, %struct.rtx_def** %ml, i32* %post_shift, i32* %dummy), !dbg !7708
  store i64 %call350, i64* %mh, align 8, !dbg !7709
  %209 = load i64, i64* %mh, align 8, !dbg !7710
  %tobool351 = icmp ne i64 %209, 0, !dbg !7710
  br i1 %tobool351, label %cond.true352, label %cond.false353, !dbg !7710

cond.true352:                                     ; preds = %if.then344
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4096, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7710
  br label %cond.end354, !dbg !7710

cond.false353:                                    ; preds = %if.then344
  br label %cond.end354, !dbg !7710

cond.end354:                                      ; preds = %cond.false353, %cond.true352
  %cond355 = phi i32 [ 0, %cond.true352 ], [ 0, %cond.false353 ], !dbg !7710
  br label %if.end357, !dbg !7711

if.else356:                                       ; preds = %land.lhs.true340, %if.else336
  store i32 0, i32* %pre_shift, align 4, !dbg !7712
  br label %if.end357

if.end357:                                        ; preds = %if.else356, %cond.end354
  %210 = load i64, i64* %mh, align 8, !dbg !7713
  %cmp358 = icmp ne i64 %210, 0, !dbg !7715
  br i1 %cmp358, label %if.then360, label %if.else401, !dbg !7716

if.then360:                                       ; preds = %if.end357
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t1, metadata !7717, metadata !DIExpression()), !dbg !7719
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t2, metadata !7720, metadata !DIExpression()), !dbg !7721
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t3, metadata !7722, metadata !DIExpression()), !dbg !7723
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t4, metadata !7724, metadata !DIExpression()), !dbg !7725
  %211 = load i32, i32* %post_shift, align 4, !dbg !7726
  %sub361 = sub nsw i32 %211, 1, !dbg !7728
  %cmp362 = icmp sge i32 %sub361, 32, !dbg !7729
  br i1 %cmp362, label %if.then364, label %if.end365, !dbg !7730

if.then364:                                       ; preds = %if.then360
  br label %fail1, !dbg !7731

if.end365:                                        ; preds = %if.then360
  %212 = load i8, i8* %speed, align 1, !dbg !7732
  %idxprom366 = zext i8 %212 to i64, !dbg !7733
  %arrayidx367 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom366, !dbg !7733
  %213 = load i32, i32* %compute_mode, align 4, !dbg !7734
  %idxprom368 = zext i32 %213 to i64, !dbg !7733
  %arrayidx369 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx367, i64 0, i64 %idxprom368, !dbg !7733
  %214 = load i32, i32* %post_shift, align 4, !dbg !7735
  %sub370 = sub nsw i32 %214, 1, !dbg !7736
  %idxprom371 = sext i32 %sub370 to i64, !dbg !7733
  %arrayidx372 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx369, i64 0, i64 %idxprom371, !dbg !7733
  %215 = load i32, i32* %arrayidx372, align 4, !dbg !7733
  %216 = load i8, i8* %speed, align 1, !dbg !7737
  %idxprom373 = zext i8 %216 to i64, !dbg !7738
  %arrayidx374 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom373, !dbg !7738
  %217 = load i32, i32* %compute_mode, align 4, !dbg !7739
  %idxprom375 = zext i32 %217 to i64, !dbg !7738
  %arrayidx376 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx374, i64 0, i64 %idxprom375, !dbg !7738
  %arrayidx377 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx376, i64 0, i64 1, !dbg !7738
  %218 = load i32, i32* %arrayidx377, align 4, !dbg !7738
  %add378 = add nsw i32 %215, %218, !dbg !7740
  %219 = load i8, i8* %speed, align 1, !dbg !7741
  %idxprom379 = zext i8 %219 to i64, !dbg !7742
  %arrayidx380 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom379, !dbg !7742
  %220 = load i32, i32* %compute_mode, align 4, !dbg !7743
  %idxprom381 = zext i32 %220 to i64, !dbg !7742
  %arrayidx382 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx380, i64 0, i64 %idxprom381, !dbg !7742
  %221 = load i32, i32* %arrayidx382, align 4, !dbg !7742
  %mul383 = mul nsw i32 2, %221, !dbg !7744
  %add384 = add nsw i32 %add378, %mul383, !dbg !7745
  store i32 %add384, i32* %extra_cost, align 4, !dbg !7746
  %222 = load i32, i32* %compute_mode, align 4, !dbg !7747
  %223 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7748
  %224 = load %struct.rtx_def*, %struct.rtx_def** %ml, align 8, !dbg !7749
  %225 = load i32, i32* %max_cost, align 4, !dbg !7750
  %226 = load i32, i32* %extra_cost, align 4, !dbg !7751
  %sub385 = sub nsw i32 %225, %226, !dbg !7752
  %call386 = call %struct.rtx_def* @expand_mult_highpart(i32 %222, %struct.rtx_def* %223, %struct.rtx_def* %224, %struct.rtx_def* null, i32 1, i32 %sub385), !dbg !7753
  store %struct.rtx_def* %call386, %struct.rtx_def** %t1, align 8, !dbg !7754
  %227 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !7755
  %cmp387 = icmp eq %struct.rtx_def* %227, null, !dbg !7757
  br i1 %cmp387, label %if.then389, label %if.end390, !dbg !7758

if.then389:                                       ; preds = %if.end365
  br label %fail1, !dbg !7759

if.end390:                                        ; preds = %if.end365
  %228 = load i32, i32* %compute_mode, align 4, !dbg !7760
  %229 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7760
  %230 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !7760
  %call391 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %228, %struct.rtx_def* %229, %struct.rtx_def* %230), !dbg !7760
  %call392 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call391, %struct.rtx_def* null), !dbg !7761
  store %struct.rtx_def* %call392, %struct.rtx_def** %t2, align 8, !dbg !7762
  %231 = load i32, i32* %compute_mode, align 4, !dbg !7763
  %232 = load %struct.rtx_def*, %struct.rtx_def** %t2, align 8, !dbg !7764
  %call393 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 1), !dbg !7765
  %call394 = call %struct.rtx_def* @expand_shift(i32 84, i32 %231, %struct.rtx_def* %232, %union.tree_node* %call393, %struct.rtx_def* null, i32 1), !dbg !7766
  store %struct.rtx_def* %call394, %struct.rtx_def** %t3, align 8, !dbg !7767
  %233 = load i32, i32* %compute_mode, align 4, !dbg !7768
  %234 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !7768
  %235 = load %struct.rtx_def*, %struct.rtx_def** %t3, align 8, !dbg !7768
  %call395 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %233, %struct.rtx_def* %234, %struct.rtx_def* %235), !dbg !7768
  %call396 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call395, %struct.rtx_def* null), !dbg !7769
  store %struct.rtx_def* %call396, %struct.rtx_def** %t4, align 8, !dbg !7770
  %236 = load i32, i32* %compute_mode, align 4, !dbg !7771
  %237 = load %struct.rtx_def*, %struct.rtx_def** %t4, align 8, !dbg !7772
  %238 = load i32, i32* %post_shift, align 4, !dbg !7773
  %sub397 = sub nsw i32 %238, 1, !dbg !7774
  %conv398 = sext i32 %sub397 to i64, !dbg !7773
  %call399 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv398), !dbg !7775
  %239 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !7776
  %call400 = call %struct.rtx_def* @expand_shift(i32 84, i32 %236, %struct.rtx_def* %237, %union.tree_node* %call399, %struct.rtx_def* %239, i32 1), !dbg !7777
  store %struct.rtx_def* %call400, %struct.rtx_def** %quotient, align 8, !dbg !7778
  br label %if.end436, !dbg !7779

if.else401:                                       ; preds = %if.end357
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t1402, metadata !7780, metadata !DIExpression()), !dbg !7782
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t2403, metadata !7783, metadata !DIExpression()), !dbg !7784
  %240 = load i32, i32* %pre_shift, align 4, !dbg !7785
  %cmp404 = icmp sge i32 %240, 32, !dbg !7787
  br i1 %cmp404, label %if.then409, label %lor.lhs.false406, !dbg !7788

lor.lhs.false406:                                 ; preds = %if.else401
  %241 = load i32, i32* %post_shift, align 4, !dbg !7789
  %cmp407 = icmp sge i32 %241, 32, !dbg !7790
  br i1 %cmp407, label %if.then409, label %if.end410, !dbg !7791

if.then409:                                       ; preds = %lor.lhs.false406, %if.else401
  br label %fail1, !dbg !7792

if.end410:                                        ; preds = %lor.lhs.false406
  %242 = load i32, i32* %compute_mode, align 4, !dbg !7793
  %243 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7794
  %244 = load i32, i32* %pre_shift, align 4, !dbg !7795
  %conv411 = sext i32 %244 to i64, !dbg !7795
  %call412 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv411), !dbg !7796
  %call413 = call %struct.rtx_def* @expand_shift(i32 84, i32 %242, %struct.rtx_def* %243, %union.tree_node* %call412, %struct.rtx_def* null, i32 1), !dbg !7797
  store %struct.rtx_def* %call413, %struct.rtx_def** %t1402, align 8, !dbg !7798
  %245 = load i8, i8* %speed, align 1, !dbg !7799
  %idxprom414 = zext i8 %245 to i64, !dbg !7800
  %arrayidx415 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom414, !dbg !7800
  %246 = load i32, i32* %compute_mode, align 4, !dbg !7801
  %idxprom416 = zext i32 %246 to i64, !dbg !7800
  %arrayidx417 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx415, i64 0, i64 %idxprom416, !dbg !7800
  %247 = load i32, i32* %pre_shift, align 4, !dbg !7802
  %idxprom418 = sext i32 %247 to i64, !dbg !7800
  %arrayidx419 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx417, i64 0, i64 %idxprom418, !dbg !7800
  %248 = load i32, i32* %arrayidx419, align 4, !dbg !7800
  %249 = load i8, i8* %speed, align 1, !dbg !7803
  %idxprom420 = zext i8 %249 to i64, !dbg !7804
  %arrayidx421 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom420, !dbg !7804
  %250 = load i32, i32* %compute_mode, align 4, !dbg !7805
  %idxprom422 = zext i32 %250 to i64, !dbg !7804
  %arrayidx423 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx421, i64 0, i64 %idxprom422, !dbg !7804
  %251 = load i32, i32* %post_shift, align 4, !dbg !7806
  %idxprom424 = sext i32 %251 to i64, !dbg !7804
  %arrayidx425 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx423, i64 0, i64 %idxprom424, !dbg !7804
  %252 = load i32, i32* %arrayidx425, align 4, !dbg !7804
  %add426 = add nsw i32 %248, %252, !dbg !7807
  store i32 %add426, i32* %extra_cost, align 4, !dbg !7808
  %253 = load i32, i32* %compute_mode, align 4, !dbg !7809
  %254 = load %struct.rtx_def*, %struct.rtx_def** %t1402, align 8, !dbg !7810
  %255 = load %struct.rtx_def*, %struct.rtx_def** %ml, align 8, !dbg !7811
  %256 = load i32, i32* %max_cost, align 4, !dbg !7812
  %257 = load i32, i32* %extra_cost, align 4, !dbg !7813
  %sub427 = sub nsw i32 %256, %257, !dbg !7814
  %call428 = call %struct.rtx_def* @expand_mult_highpart(i32 %253, %struct.rtx_def* %254, %struct.rtx_def* %255, %struct.rtx_def* null, i32 1, i32 %sub427), !dbg !7815
  store %struct.rtx_def* %call428, %struct.rtx_def** %t2403, align 8, !dbg !7816
  %258 = load %struct.rtx_def*, %struct.rtx_def** %t2403, align 8, !dbg !7817
  %cmp429 = icmp eq %struct.rtx_def* %258, null, !dbg !7819
  br i1 %cmp429, label %if.then431, label %if.end432, !dbg !7820

if.then431:                                       ; preds = %if.end410
  br label %fail1, !dbg !7821

if.end432:                                        ; preds = %if.end410
  %259 = load i32, i32* %compute_mode, align 4, !dbg !7822
  %260 = load %struct.rtx_def*, %struct.rtx_def** %t2403, align 8, !dbg !7823
  %261 = load i32, i32* %post_shift, align 4, !dbg !7824
  %conv433 = sext i32 %261 to i64, !dbg !7824
  %call434 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv433), !dbg !7825
  %262 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !7826
  %call435 = call %struct.rtx_def* @expand_shift(i32 84, i32 %259, %struct.rtx_def* %260, %union.tree_node* %call434, %struct.rtx_def* %262, i32 1), !dbg !7827
  store %struct.rtx_def* %call435, %struct.rtx_def** %quotient, align 8, !dbg !7828
  br label %if.end436

if.end436:                                        ; preds = %if.end432, %if.end390
  br label %if.end437

if.end437:                                        ; preds = %if.end436, %if.then334
  br label %if.end439, !dbg !7829

if.else438:                                       ; preds = %if.else325
  br label %sw.epilog, !dbg !7830

if.end439:                                        ; preds = %if.end437
  br label %if.end440

if.end440:                                        ; preds = %if.end439, %if.end321
  %call441 = call %struct.rtx_def* @get_last_insn(), !dbg !7831
  store %struct.rtx_def* %call441, %struct.rtx_def** %insn, align 8, !dbg !7832
  %263 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7833
  %264 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7835
  %cmp442 = icmp ne %struct.rtx_def* %263, %264, !dbg !7836
  br i1 %cmp442, label %land.lhs.true444, label %if.end499, !dbg !7837

land.lhs.true444:                                 ; preds = %if.end440
  %265 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7838
  %266 = bitcast %struct.rtx_def* %265 to i32*, !dbg !7838
  %bf.load445 = load i32, i32* %266, align 8, !dbg !7838
  %bf.clear446 = and i32 %bf.load445, 65535, !dbg !7838
  %cmp447 = icmp eq i32 %bf.clear446, 8, !dbg !7838
  br i1 %cmp447, label %cond.true464, label %lor.lhs.false449, !dbg !7838

lor.lhs.false449:                                 ; preds = %land.lhs.true444
  %267 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7838
  %268 = bitcast %struct.rtx_def* %267 to i32*, !dbg !7838
  %bf.load450 = load i32, i32* %268, align 8, !dbg !7838
  %bf.clear451 = and i32 %bf.load450, 65535, !dbg !7838
  %cmp452 = icmp eq i32 %bf.clear451, 7, !dbg !7838
  br i1 %cmp452, label %cond.true464, label %lor.lhs.false454, !dbg !7838

lor.lhs.false454:                                 ; preds = %lor.lhs.false449
  %269 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7838
  %270 = bitcast %struct.rtx_def* %269 to i32*, !dbg !7838
  %bf.load455 = load i32, i32* %270, align 8, !dbg !7838
  %bf.clear456 = and i32 %bf.load455, 65535, !dbg !7838
  %cmp457 = icmp eq i32 %bf.clear456, 9, !dbg !7838
  br i1 %cmp457, label %cond.true464, label %lor.lhs.false459, !dbg !7838

lor.lhs.false459:                                 ; preds = %lor.lhs.false454
  %271 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7838
  %272 = bitcast %struct.rtx_def* %271 to i32*, !dbg !7838
  %bf.load460 = load i32, i32* %272, align 8, !dbg !7838
  %bf.clear461 = and i32 %bf.load460, 65535, !dbg !7838
  %cmp462 = icmp eq i32 %bf.clear461, 10, !dbg !7838
  br i1 %cmp462, label %cond.true464, label %cond.false484, !dbg !7838

cond.true464:                                     ; preds = %lor.lhs.false459, %lor.lhs.false454, %lor.lhs.false449, %land.lhs.true444
  %273 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7838
  %u465 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %273, i32 0, i32 1, !dbg !7838
  %fld = bitcast %union.u* %u465 to [1 x %union.rtunion_def]*, !dbg !7838
  %arrayidx466 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !7838
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx466 to %struct.rtx_def**, !dbg !7838
  %274 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7838
  %275 = bitcast %struct.rtx_def* %274 to i32*, !dbg !7838
  %bf.load467 = load i32, i32* %275, align 8, !dbg !7838
  %bf.clear468 = and i32 %bf.load467, 65535, !dbg !7838
  %cmp469 = icmp eq i32 %bf.clear468, 23, !dbg !7838
  br i1 %cmp469, label %cond.true471, label %cond.false476, !dbg !7838

cond.true471:                                     ; preds = %cond.true464
  %276 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7838
  %u472 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %276, i32 0, i32 1, !dbg !7838
  %fld473 = bitcast %union.u* %u472 to [1 x %union.rtunion_def]*, !dbg !7838
  %arrayidx474 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld473, i64 0, i64 5, !dbg !7838
  %rt_rtx475 = bitcast %union.rtunion_def* %arrayidx474 to %struct.rtx_def**, !dbg !7838
  %277 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx475, align 8, !dbg !7838
  br label %cond.end482, !dbg !7838

cond.false476:                                    ; preds = %cond.true464
  %278 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7838
  %279 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7838
  %u477 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %279, i32 0, i32 1, !dbg !7838
  %fld478 = bitcast %union.u* %u477 to [1 x %union.rtunion_def]*, !dbg !7838
  %arrayidx479 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld478, i64 0, i64 5, !dbg !7838
  %rt_rtx480 = bitcast %union.rtunion_def* %arrayidx479 to %struct.rtx_def**, !dbg !7838
  %280 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx480, align 8, !dbg !7838
  %call481 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %278, %struct.rtx_def* %280), !dbg !7838
  br label %cond.end482, !dbg !7838

cond.end482:                                      ; preds = %cond.false476, %cond.true471
  %cond483 = phi %struct.rtx_def* [ %277, %cond.true471 ], [ %call481, %cond.false476 ], !dbg !7838
  br label %cond.end485, !dbg !7838

cond.false484:                                    ; preds = %lor.lhs.false459
  br label %cond.end485, !dbg !7838

cond.end485:                                      ; preds = %cond.false484, %cond.end482
  %cond486 = phi %struct.rtx_def* [ %cond483, %cond.end482 ], [ null, %cond.false484 ], !dbg !7838
  store %struct.rtx_def* %cond486, %struct.rtx_def** %set, align 8, !dbg !7839
  %cmp487 = icmp ne %struct.rtx_def* %cond486, null, !dbg !7840
  br i1 %cmp487, label %land.lhs.true489, label %if.end499, !dbg !7841

land.lhs.true489:                                 ; preds = %cond.end485
  %281 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !7842
  %u490 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %281, i32 0, i32 1, !dbg !7842
  %fld491 = bitcast %union.u* %u490 to [1 x %union.rtunion_def]*, !dbg !7842
  %arrayidx492 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld491, i64 0, i64 0, !dbg !7842
  %rt_rtx493 = bitcast %union.rtunion_def* %arrayidx492 to %struct.rtx_def**, !dbg !7842
  %282 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx493, align 8, !dbg !7842
  %283 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !7843
  %cmp494 = icmp eq %struct.rtx_def* %282, %283, !dbg !7844
  br i1 %cmp494, label %if.then496, label %if.end499, !dbg !7845

if.then496:                                       ; preds = %land.lhs.true489
  %284 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7846
  %285 = load i32, i32* %compute_mode, align 4, !dbg !7847
  %286 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7847
  %287 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7847
  %call497 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 59, i32 %285, %struct.rtx_def* %286, %struct.rtx_def* %287), !dbg !7847
  %call498 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %284, i32 4, %struct.rtx_def* %call497), !dbg !7848
  br label %if.end499, !dbg !7848

if.end499:                                        ; preds = %if.then496, %land.lhs.true489, %cond.end485, %if.end440
  br label %if.end887, !dbg !7849

if.else500:                                       ; preds = %if.then297
  call void @llvm.dbg.declare(metadata i64* %ml501, metadata !7850, metadata !DIExpression()), !dbg !7852
  call void @llvm.dbg.declare(metadata i32* %lgup, metadata !7853, metadata !DIExpression()), !dbg !7854
  call void @llvm.dbg.declare(metadata i32* %post_shift502, metadata !7855, metadata !DIExpression()), !dbg !7856
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mlr, metadata !7857, metadata !DIExpression()), !dbg !7858
  call void @llvm.dbg.declare(metadata i64* %d503, metadata !7859, metadata !DIExpression()), !dbg !7860
  %288 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7861
  %u504 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %288, i32 0, i32 1, !dbg !7861
  %hwint505 = bitcast %union.u* %u504 to [1 x i64]*, !dbg !7861
  %arrayidx506 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint505, i64 0, i64 0, !dbg !7861
  %289 = load i64, i64* %arrayidx506, align 8, !dbg !7861
  store i64 %289, i64* %d503, align 8, !dbg !7860
  call void @llvm.dbg.declare(metadata i64* %abs_d, metadata !7862, metadata !DIExpression()), !dbg !7863
  %290 = load i64, i64* %d503, align 8, !dbg !7864
  %cmp507 = icmp sge i64 %290, 0, !dbg !7865
  br i1 %cmp507, label %cond.true509, label %cond.false510, !dbg !7864

cond.true509:                                     ; preds = %if.else500
  %291 = load i64, i64* %d503, align 8, !dbg !7866
  br label %cond.end512, !dbg !7864

cond.false510:                                    ; preds = %if.else500
  %292 = load i64, i64* %d503, align 8, !dbg !7867
  %sub511 = sub i64 0, %292, !dbg !7868
  br label %cond.end512, !dbg !7864

cond.end512:                                      ; preds = %cond.false510, %cond.true509
  %cond513 = phi i64 [ %291, %cond.true509 ], [ %sub511, %cond.false510 ], !dbg !7864
  store i64 %cond513, i64* %abs_d, align 8, !dbg !7869
  %293 = load i32, i32* %rem_flag.addr, align 4, !dbg !7870
  %tobool514 = icmp ne i32 %293, 0, !dbg !7870
  br i1 %tobool514, label %land.lhs.true515, label %if.end520, !dbg !7872

land.lhs.true515:                                 ; preds = %cond.end512
  %294 = load i64, i64* %d503, align 8, !dbg !7873
  %cmp516 = icmp slt i64 %294, 0, !dbg !7874
  br i1 %cmp516, label %if.then518, label %if.end520, !dbg !7875

if.then518:                                       ; preds = %land.lhs.true515
  %295 = load i64, i64* %abs_d, align 8, !dbg !7876
  store i64 %295, i64* %d503, align 8, !dbg !7878
  %296 = load i64, i64* %abs_d, align 8, !dbg !7879
  %297 = load i32, i32* %compute_mode, align 4, !dbg !7880
  %call519 = call %struct.rtx_def* @gen_int_mode(i64 %296, i32 %297), !dbg !7881
  store %struct.rtx_def* %call519, %struct.rtx_def** %op1.addr, align 8, !dbg !7882
  br label %if.end520, !dbg !7883

if.end520:                                        ; preds = %if.then518, %land.lhs.true515, %cond.end512
  %298 = load i64, i64* %d503, align 8, !dbg !7884
  %cmp521 = icmp eq i64 %298, 1, !dbg !7886
  br i1 %cmp521, label %if.then523, label %if.else524, !dbg !7887

if.then523:                                       ; preds = %if.end520
  %299 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7888
  store %struct.rtx_def* %299, %struct.rtx_def** %quotient, align 8, !dbg !7889
  br label %if.end825, !dbg !7890

if.else524:                                       ; preds = %if.end520
  %300 = load i64, i64* %d503, align 8, !dbg !7891
  %cmp525 = icmp eq i64 %300, -1, !dbg !7893
  br i1 %cmp525, label %if.then527, label %if.else529, !dbg !7894

if.then527:                                       ; preds = %if.else524
  %301 = load i32, i32* %compute_mode, align 4, !dbg !7895
  %302 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7896
  %303 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !7897
  %call528 = call %struct.rtx_def* @expand_unop(i32 %301, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %302, %struct.rtx_def* %303, i32 0), !dbg !7898
  store %struct.rtx_def* %call528, %struct.rtx_def** %quotient, align 8, !dbg !7899
  br label %if.end824, !dbg !7900

if.else529:                                       ; preds = %if.else524
  %304 = load i32, i32* %size, align 4, !dbg !7901
  %cmp530 = icmp sge i32 64, %304, !dbg !7903
  br i1 %cmp530, label %land.lhs.true532, label %if.else544, !dbg !7904

land.lhs.true532:                                 ; preds = %if.else529
  %305 = load i64, i64* %abs_d, align 8, !dbg !7905
  %306 = load i32, i32* %size, align 4, !dbg !7906
  %sub533 = sub nsw i32 %306, 1, !dbg !7907
  %sh_prom534 = zext i32 %sub533 to i64, !dbg !7908
  %shl535 = shl i64 1, %sh_prom534, !dbg !7908
  %cmp536 = icmp eq i64 %305, %shl535, !dbg !7909
  br i1 %cmp536, label %if.then538, label %if.else544, !dbg !7910

if.then538:                                       ; preds = %land.lhs.true532
  %307 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !7911
  %308 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7913
  %309 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7914
  %310 = load i32, i32* %compute_mode, align 4, !dbg !7915
  %call539 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %307, i32 81, %struct.rtx_def* %308, %struct.rtx_def* %309, i32 %310, i32 1, i32 1), !dbg !7916
  store %struct.rtx_def* %call539, %struct.rtx_def** %quotient, align 8, !dbg !7917
  %311 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !7918
  %cmp540 = icmp eq %struct.rtx_def* %311, null, !dbg !7920
  br i1 %cmp540, label %if.then542, label %if.end543, !dbg !7921

if.then542:                                       ; preds = %if.then538
  br label %fail1, !dbg !7922

if.end543:                                        ; preds = %if.then538
  br label %if.end823, !dbg !7923

if.else544:                                       ; preds = %land.lhs.true532, %if.else529
  %312 = load i64, i64* %d503, align 8, !dbg !7924
  %313 = load i64, i64* %d503, align 8, !dbg !7924
  %sub545 = sub nsw i64 %313, 1, !dbg !7924
  %and546 = and i64 %312, %sub545, !dbg !7924
  %cmp547 = icmp eq i64 %and546, 0, !dbg !7924
  br i1 %cmp547, label %land.lhs.true549, label %if.else581, !dbg !7926

land.lhs.true549:                                 ; preds = %if.else544
  %314 = load i32, i32* %rem_flag.addr, align 4, !dbg !7927
  %tobool550 = icmp ne i32 %314, 0, !dbg !7927
  br i1 %tobool550, label %cond.true551, label %cond.false558, !dbg !7928

cond.true551:                                     ; preds = %land.lhs.true549
  %315 = load i8, i8* %speed, align 1, !dbg !7929
  %idxprom552 = zext i8 %315 to i64, !dbg !7930
  %arrayidx553 = getelementptr inbounds [2 x [87 x i8]], [2 x [87 x i8]]* @smod_pow2_cheap, i64 0, i64 %idxprom552, !dbg !7930
  %316 = load i32, i32* %compute_mode, align 4, !dbg !7931
  %idxprom554 = zext i32 %316 to i64, !dbg !7930
  %arrayidx555 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx553, i64 0, i64 %idxprom554, !dbg !7930
  %317 = load i8, i8* %arrayidx555, align 1, !dbg !7930
  %conv556 = zext i8 %317 to i32, !dbg !7930
  %tobool557 = icmp ne i32 %conv556, 0, !dbg !7930
  br i1 %tobool557, label %land.lhs.true565, label %if.else581, !dbg !7927

cond.false558:                                    ; preds = %land.lhs.true549
  %318 = load i8, i8* %speed, align 1, !dbg !7932
  %idxprom559 = zext i8 %318 to i64, !dbg !7933
  %arrayidx560 = getelementptr inbounds [2 x [87 x i8]], [2 x [87 x i8]]* @sdiv_pow2_cheap, i64 0, i64 %idxprom559, !dbg !7933
  %319 = load i32, i32* %compute_mode, align 4, !dbg !7934
  %idxprom561 = zext i32 %319 to i64, !dbg !7933
  %arrayidx562 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx560, i64 0, i64 %idxprom561, !dbg !7933
  %320 = load i8, i8* %arrayidx562, align 1, !dbg !7933
  %conv563 = zext i8 %320 to i32, !dbg !7933
  %tobool564 = icmp ne i32 %conv563, 0, !dbg !7933
  br i1 %tobool564, label %land.lhs.true565, label %if.else581, !dbg !7928

land.lhs.true565:                                 ; preds = %cond.false558, %cond.true551
  %321 = load i32, i32* %rem_flag.addr, align 4, !dbg !7935
  %tobool566 = icmp ne i32 %321, 0, !dbg !7935
  %322 = zext i1 %tobool566 to i64, !dbg !7935
  %cond567 = select i1 %tobool566, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 36), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), !dbg !7935
  %handlers568 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %cond567, i32 0, i32 4, !dbg !7935
  %323 = load i32, i32* %compute_mode, align 4, !dbg !7935
  %idxprom569 = sext i32 %323 to i64, !dbg !7935
  %arrayidx570 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers568, i64 0, i64 %idxprom569, !dbg !7935
  %insn_code571 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx570, i32 0, i32 0, !dbg !7936
  %324 = load i32, i32* %insn_code571, align 4, !dbg !7936
  %cmp572 = icmp ne i32 %324, 2956, !dbg !7937
  br i1 %cmp572, label %if.then580, label %lor.lhs.false574, !dbg !7938

lor.lhs.false574:                                 ; preds = %land.lhs.true565
  %325 = load i32, i32* %compute_mode, align 4, !dbg !7939
  %idxprom575 = sext i32 %325 to i64, !dbg !7939
  %arrayidx576 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33, i32 4), i64 0, i64 %idxprom575, !dbg !7939
  %insn_code577 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx576, i32 0, i32 0, !dbg !7940
  %326 = load i32, i32* %insn_code577, align 4, !dbg !7940
  %cmp578 = icmp ne i32 %326, 2956, !dbg !7941
  br i1 %cmp578, label %if.then580, label %if.else581, !dbg !7942

if.then580:                                       ; preds = %lor.lhs.false574, %land.lhs.true565
  br label %if.end822, !dbg !7942

if.else581:                                       ; preds = %lor.lhs.false574, %cond.false558, %cond.true551, %if.else544
  %327 = load i64, i64* %abs_d, align 8, !dbg !7943
  %328 = load i64, i64* %abs_d, align 8, !dbg !7943
  %sub582 = sub i64 %328, 1, !dbg !7943
  %and583 = and i64 %327, %sub582, !dbg !7943
  %cmp584 = icmp eq i64 %and583, 0, !dbg !7943
  br i1 %cmp584, label %if.then586, label %if.else690, !dbg !7945

if.then586:                                       ; preds = %if.else581
  %329 = load i32, i32* %rem_flag.addr, align 4, !dbg !7946
  %tobool587 = icmp ne i32 %329, 0, !dbg !7946
  br i1 %tobool587, label %if.then588, label %if.end594, !dbg !7949

if.then588:                                       ; preds = %if.then586
  %330 = load i32, i32* %compute_mode, align 4, !dbg !7950
  %331 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7952
  %332 = load i64, i64* %d503, align 8, !dbg !7953
  %call589 = call %struct.rtx_def* @expand_smod_pow2(i32 %330, %struct.rtx_def* %331, i64 %332), !dbg !7954
  store %struct.rtx_def* %call589, %struct.rtx_def** %remainder, align 8, !dbg !7955
  %333 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !7956
  %tobool590 = icmp ne %struct.rtx_def* %333, null, !dbg !7956
  br i1 %tobool590, label %if.then591, label %if.end593, !dbg !7958

if.then591:                                       ; preds = %if.then588
  %334 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !7959
  %335 = load i32, i32* %mode.addr, align 4, !dbg !7960
  %336 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !7961
  %call592 = call %struct.rtx_def* %334(i32 %335, %struct.rtx_def* %336), !dbg !7959
  store %struct.rtx_def* %call592, %struct.rtx_def** %retval, align 8, !dbg !7962
  br label %return, !dbg !7962

if.end593:                                        ; preds = %if.then588
  br label %if.end594, !dbg !7963

if.end594:                                        ; preds = %if.end593, %if.then586
  %337 = load i8, i8* %speed, align 1, !dbg !7964
  %idxprom595 = zext i8 %337 to i64, !dbg !7966
  %arrayidx596 = getelementptr inbounds [2 x [87 x i8]], [2 x [87 x i8]]* @sdiv_pow2_cheap, i64 0, i64 %idxprom595, !dbg !7966
  %338 = load i32, i32* %compute_mode, align 4, !dbg !7967
  %idxprom597 = zext i32 %338 to i64, !dbg !7966
  %arrayidx598 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx596, i64 0, i64 %idxprom597, !dbg !7966
  %339 = load i8, i8* %arrayidx598, align 1, !dbg !7966
  %conv599 = zext i8 %339 to i32, !dbg !7966
  %tobool600 = icmp ne i32 %conv599, 0, !dbg !7966
  br i1 %tobool600, label %land.lhs.true601, label %if.else616, !dbg !7968

land.lhs.true601:                                 ; preds = %if.end594
  %340 = load i32, i32* %compute_mode, align 4, !dbg !7969
  %idxprom602 = sext i32 %340 to i64, !dbg !7969
  %arrayidx603 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31, i32 4), i64 0, i64 %idxprom602, !dbg !7969
  %insn_code604 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx603, i32 0, i32 0, !dbg !7970
  %341 = load i32, i32* %insn_code604, align 4, !dbg !7970
  %cmp605 = icmp ne i32 %341, 2956, !dbg !7971
  br i1 %cmp605, label %if.then613, label %lor.lhs.false607, !dbg !7972

lor.lhs.false607:                                 ; preds = %land.lhs.true601
  %342 = load i32, i32* %compute_mode, align 4, !dbg !7973
  %idxprom608 = sext i32 %342 to i64, !dbg !7973
  %arrayidx609 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33, i32 4), i64 0, i64 %idxprom608, !dbg !7973
  %insn_code610 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx609, i32 0, i32 0, !dbg !7974
  %343 = load i32, i32* %insn_code610, align 4, !dbg !7974
  %cmp611 = icmp ne i32 %343, 2956, !dbg !7975
  br i1 %cmp611, label %if.then613, label %if.else616, !dbg !7976

if.then613:                                       ; preds = %lor.lhs.false607, %land.lhs.true601
  %344 = load i32, i32* %compute_mode, align 4, !dbg !7977
  %345 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7978
  %346 = load i64, i64* %abs_d, align 8, !dbg !7979
  %347 = load i32, i32* %compute_mode, align 4, !dbg !7980
  %call614 = call %struct.rtx_def* @gen_int_mode(i64 %346, i32 %347), !dbg !7981
  %call615 = call %struct.rtx_def* @expand_divmod(i32 0, i32 67, i32 %344, %struct.rtx_def* %345, %struct.rtx_def* %call614, %struct.rtx_def* null, i32 0), !dbg !7982
  store %struct.rtx_def* %call615, %struct.rtx_def** %quotient, align 8, !dbg !7983
  br label %if.end618, !dbg !7984

if.else616:                                       ; preds = %lor.lhs.false607, %if.end594
  %348 = load i32, i32* %compute_mode, align 4, !dbg !7985
  %349 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7986
  %350 = load i64, i64* %abs_d, align 8, !dbg !7987
  %call617 = call %struct.rtx_def* @expand_sdiv_pow2(i32 %348, %struct.rtx_def* %349, i64 %350), !dbg !7988
  store %struct.rtx_def* %call617, %struct.rtx_def** %quotient, align 8, !dbg !7989
  br label %if.end618

if.end618:                                        ; preds = %if.else616, %if.then613
  %351 = load i64, i64* %d503, align 8, !dbg !7990
  %cmp619 = icmp slt i64 %351, 0, !dbg !7992
  br i1 %cmp619, label %if.then621, label %if.end689, !dbg !7993

if.then621:                                       ; preds = %if.end618
  %call622 = call %struct.rtx_def* @get_last_insn(), !dbg !7994
  store %struct.rtx_def* %call622, %struct.rtx_def** %insn, align 8, !dbg !7996
  %352 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7997
  %353 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7999
  %cmp623 = icmp ne %struct.rtx_def* %352, %353, !dbg !8000
  br i1 %cmp623, label %land.lhs.true625, label %if.end687, !dbg !8001

land.lhs.true625:                                 ; preds = %if.then621
  %354 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8002
  %355 = bitcast %struct.rtx_def* %354 to i32*, !dbg !8002
  %bf.load626 = load i32, i32* %355, align 8, !dbg !8002
  %bf.clear627 = and i32 %bf.load626, 65535, !dbg !8002
  %cmp628 = icmp eq i32 %bf.clear627, 8, !dbg !8002
  br i1 %cmp628, label %cond.true645, label %lor.lhs.false630, !dbg !8002

lor.lhs.false630:                                 ; preds = %land.lhs.true625
  %356 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8002
  %357 = bitcast %struct.rtx_def* %356 to i32*, !dbg !8002
  %bf.load631 = load i32, i32* %357, align 8, !dbg !8002
  %bf.clear632 = and i32 %bf.load631, 65535, !dbg !8002
  %cmp633 = icmp eq i32 %bf.clear632, 7, !dbg !8002
  br i1 %cmp633, label %cond.true645, label %lor.lhs.false635, !dbg !8002

lor.lhs.false635:                                 ; preds = %lor.lhs.false630
  %358 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8002
  %359 = bitcast %struct.rtx_def* %358 to i32*, !dbg !8002
  %bf.load636 = load i32, i32* %359, align 8, !dbg !8002
  %bf.clear637 = and i32 %bf.load636, 65535, !dbg !8002
  %cmp638 = icmp eq i32 %bf.clear637, 9, !dbg !8002
  br i1 %cmp638, label %cond.true645, label %lor.lhs.false640, !dbg !8002

lor.lhs.false640:                                 ; preds = %lor.lhs.false635
  %360 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8002
  %361 = bitcast %struct.rtx_def* %360 to i32*, !dbg !8002
  %bf.load641 = load i32, i32* %361, align 8, !dbg !8002
  %bf.clear642 = and i32 %bf.load641, 65535, !dbg !8002
  %cmp643 = icmp eq i32 %bf.clear642, 10, !dbg !8002
  br i1 %cmp643, label %cond.true645, label %cond.false667, !dbg !8002

cond.true645:                                     ; preds = %lor.lhs.false640, %lor.lhs.false635, %lor.lhs.false630, %land.lhs.true625
  %362 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8002
  %u646 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %362, i32 0, i32 1, !dbg !8002
  %fld647 = bitcast %union.u* %u646 to [1 x %union.rtunion_def]*, !dbg !8002
  %arrayidx648 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld647, i64 0, i64 5, !dbg !8002
  %rt_rtx649 = bitcast %union.rtunion_def* %arrayidx648 to %struct.rtx_def**, !dbg !8002
  %363 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx649, align 8, !dbg !8002
  %364 = bitcast %struct.rtx_def* %363 to i32*, !dbg !8002
  %bf.load650 = load i32, i32* %364, align 8, !dbg !8002
  %bf.clear651 = and i32 %bf.load650, 65535, !dbg !8002
  %cmp652 = icmp eq i32 %bf.clear651, 23, !dbg !8002
  br i1 %cmp652, label %cond.true654, label %cond.false659, !dbg !8002

cond.true654:                                     ; preds = %cond.true645
  %365 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8002
  %u655 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %365, i32 0, i32 1, !dbg !8002
  %fld656 = bitcast %union.u* %u655 to [1 x %union.rtunion_def]*, !dbg !8002
  %arrayidx657 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld656, i64 0, i64 5, !dbg !8002
  %rt_rtx658 = bitcast %union.rtunion_def* %arrayidx657 to %struct.rtx_def**, !dbg !8002
  %366 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx658, align 8, !dbg !8002
  br label %cond.end665, !dbg !8002

cond.false659:                                    ; preds = %cond.true645
  %367 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8002
  %368 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8002
  %u660 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %368, i32 0, i32 1, !dbg !8002
  %fld661 = bitcast %union.u* %u660 to [1 x %union.rtunion_def]*, !dbg !8002
  %arrayidx662 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld661, i64 0, i64 5, !dbg !8002
  %rt_rtx663 = bitcast %union.rtunion_def* %arrayidx662 to %struct.rtx_def**, !dbg !8002
  %369 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx663, align 8, !dbg !8002
  %call664 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %367, %struct.rtx_def* %369), !dbg !8002
  br label %cond.end665, !dbg !8002

cond.end665:                                      ; preds = %cond.false659, %cond.true654
  %cond666 = phi %struct.rtx_def* [ %366, %cond.true654 ], [ %call664, %cond.false659 ], !dbg !8002
  br label %cond.end668, !dbg !8002

cond.false667:                                    ; preds = %lor.lhs.false640
  br label %cond.end668, !dbg !8002

cond.end668:                                      ; preds = %cond.false667, %cond.end665
  %cond669 = phi %struct.rtx_def* [ %cond666, %cond.end665 ], [ null, %cond.false667 ], !dbg !8002
  store %struct.rtx_def* %cond669, %struct.rtx_def** %set, align 8, !dbg !8003
  %cmp670 = icmp ne %struct.rtx_def* %cond669, null, !dbg !8004
  br i1 %cmp670, label %land.lhs.true672, label %if.end687, !dbg !8005

land.lhs.true672:                                 ; preds = %cond.end668
  %370 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !8006
  %u673 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %370, i32 0, i32 1, !dbg !8006
  %fld674 = bitcast %union.u* %u673 to [1 x %union.rtunion_def]*, !dbg !8006
  %arrayidx675 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld674, i64 0, i64 0, !dbg !8006
  %rt_rtx676 = bitcast %union.rtunion_def* %arrayidx675 to %struct.rtx_def**, !dbg !8006
  %371 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx676, align 8, !dbg !8006
  %372 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8007
  %cmp677 = icmp eq %struct.rtx_def* %371, %372, !dbg !8008
  br i1 %cmp677, label %land.lhs.true679, label %if.end687, !dbg !8009

land.lhs.true679:                                 ; preds = %land.lhs.true672
  %373 = load i64, i64* %abs_d, align 8, !dbg !8010
  %cmp680 = icmp ult i64 %373, -9223372036854775808, !dbg !8011
  br i1 %cmp680, label %if.then682, label %if.end687, !dbg !8012

if.then682:                                       ; preds = %land.lhs.true679
  %374 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8013
  %375 = load i32, i32* %compute_mode, align 4, !dbg !8014
  %376 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8014
  %377 = load i64, i64* %abs_d, align 8, !dbg !8014
  %378 = load i32, i32* %compute_mode, align 4, !dbg !8014
  %call683 = call i64 @trunc_int_for_mode(i64 %377, i32 %378), !dbg !8014
  %call684 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call683), !dbg !8014
  %call685 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 55, i32 %375, %struct.rtx_def* %376, %struct.rtx_def* %call684), !dbg !8014
  %call686 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %374, i32 4, %struct.rtx_def* %call685), !dbg !8015
  br label %if.end687, !dbg !8015

if.end687:                                        ; preds = %if.then682, %land.lhs.true679, %land.lhs.true672, %cond.end668, %if.then621
  %379 = load i32, i32* %compute_mode, align 4, !dbg !8016
  %380 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8017
  %381 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8018
  %call688 = call %struct.rtx_def* @expand_unop(i32 %379, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %380, %struct.rtx_def* %381, i32 0), !dbg !8019
  store %struct.rtx_def* %call688, %struct.rtx_def** %quotient, align 8, !dbg !8020
  br label %if.end689, !dbg !8021

if.end689:                                        ; preds = %if.end687, %if.end618
  br label %if.end821, !dbg !8022

if.else690:                                       ; preds = %if.else581
  %382 = load i32, i32* %size, align 4, !dbg !8023
  %cmp691 = icmp sle i32 %382, 64, !dbg !8025
  br i1 %cmp691, label %if.then693, label %if.else819, !dbg !8026

if.then693:                                       ; preds = %if.else690
  %383 = load i64, i64* %abs_d, align 8, !dbg !8027
  %384 = load i32, i32* %size, align 4, !dbg !8029
  %385 = load i32, i32* %size, align 4, !dbg !8030
  %sub694 = sub nsw i32 %385, 1, !dbg !8031
  %call695 = call i64 @choose_multiplier(i64 %383, i32 %384, i32 %sub694, %struct.rtx_def** %mlr, i32* %post_shift502, i32* %lgup), !dbg !8032
  %386 = load %struct.rtx_def*, %struct.rtx_def** %mlr, align 8, !dbg !8033
  %u696 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %386, i32 0, i32 1, !dbg !8033
  %hwint697 = bitcast %union.u* %u696 to [1 x i64]*, !dbg !8033
  %arrayidx698 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint697, i64 0, i64 0, !dbg !8033
  %387 = load i64, i64* %arrayidx698, align 8, !dbg !8033
  store i64 %387, i64* %ml501, align 8, !dbg !8034
  %388 = load i64, i64* %ml501, align 8, !dbg !8035
  %389 = load i32, i32* %size, align 4, !dbg !8037
  %sub699 = sub nsw i32 %389, 1, !dbg !8038
  %sh_prom700 = zext i32 %sub699 to i64, !dbg !8039
  %shl701 = shl i64 1, %sh_prom700, !dbg !8039
  %cmp702 = icmp ult i64 %388, %shl701, !dbg !8040
  br i1 %cmp702, label %if.then704, label %if.else757, !dbg !8041

if.then704:                                       ; preds = %if.then693
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t1705, metadata !8042, metadata !DIExpression()), !dbg !8044
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t2706, metadata !8045, metadata !DIExpression()), !dbg !8046
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t3707, metadata !8047, metadata !DIExpression()), !dbg !8048
  %390 = load i32, i32* %post_shift502, align 4, !dbg !8049
  %cmp708 = icmp sge i32 %390, 32, !dbg !8051
  br i1 %cmp708, label %if.then714, label %lor.lhs.false710, !dbg !8052

lor.lhs.false710:                                 ; preds = %if.then704
  %391 = load i32, i32* %size, align 4, !dbg !8053
  %sub711 = sub nsw i32 %391, 1, !dbg !8054
  %cmp712 = icmp sge i32 %sub711, 32, !dbg !8055
  br i1 %cmp712, label %if.then714, label %if.end715, !dbg !8056

if.then714:                                       ; preds = %lor.lhs.false710, %if.then704
  br label %fail1, !dbg !8057

if.end715:                                        ; preds = %lor.lhs.false710
  %392 = load i8, i8* %speed, align 1, !dbg !8058
  %idxprom716 = zext i8 %392 to i64, !dbg !8059
  %arrayidx717 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom716, !dbg !8059
  %393 = load i32, i32* %compute_mode, align 4, !dbg !8060
  %idxprom718 = zext i32 %393 to i64, !dbg !8059
  %arrayidx719 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx717, i64 0, i64 %idxprom718, !dbg !8059
  %394 = load i32, i32* %post_shift502, align 4, !dbg !8061
  %idxprom720 = sext i32 %394 to i64, !dbg !8059
  %arrayidx721 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx719, i64 0, i64 %idxprom720, !dbg !8059
  %395 = load i32, i32* %arrayidx721, align 4, !dbg !8059
  %396 = load i8, i8* %speed, align 1, !dbg !8062
  %idxprom722 = zext i8 %396 to i64, !dbg !8063
  %arrayidx723 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom722, !dbg !8063
  %397 = load i32, i32* %compute_mode, align 4, !dbg !8064
  %idxprom724 = zext i32 %397 to i64, !dbg !8063
  %arrayidx725 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx723, i64 0, i64 %idxprom724, !dbg !8063
  %398 = load i32, i32* %size, align 4, !dbg !8065
  %sub726 = sub nsw i32 %398, 1, !dbg !8066
  %idxprom727 = sext i32 %sub726 to i64, !dbg !8063
  %arrayidx728 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx725, i64 0, i64 %idxprom727, !dbg !8063
  %399 = load i32, i32* %arrayidx728, align 4, !dbg !8063
  %add729 = add nsw i32 %395, %399, !dbg !8067
  %400 = load i8, i8* %speed, align 1, !dbg !8068
  %idxprom730 = zext i8 %400 to i64, !dbg !8069
  %arrayidx731 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom730, !dbg !8069
  %401 = load i32, i32* %compute_mode, align 4, !dbg !8070
  %idxprom732 = zext i32 %401 to i64, !dbg !8069
  %arrayidx733 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx731, i64 0, i64 %idxprom732, !dbg !8069
  %402 = load i32, i32* %arrayidx733, align 4, !dbg !8069
  %add734 = add nsw i32 %add729, %402, !dbg !8071
  store i32 %add734, i32* %extra_cost, align 4, !dbg !8072
  %403 = load i32, i32* %compute_mode, align 4, !dbg !8073
  %404 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8074
  %405 = load %struct.rtx_def*, %struct.rtx_def** %mlr, align 8, !dbg !8075
  %406 = load i32, i32* %max_cost, align 4, !dbg !8076
  %407 = load i32, i32* %extra_cost, align 4, !dbg !8077
  %sub735 = sub nsw i32 %406, %407, !dbg !8078
  %call736 = call %struct.rtx_def* @expand_mult_highpart(i32 %403, %struct.rtx_def* %404, %struct.rtx_def* %405, %struct.rtx_def* null, i32 0, i32 %sub735), !dbg !8079
  store %struct.rtx_def* %call736, %struct.rtx_def** %t1705, align 8, !dbg !8080
  %408 = load %struct.rtx_def*, %struct.rtx_def** %t1705, align 8, !dbg !8081
  %cmp737 = icmp eq %struct.rtx_def* %408, null, !dbg !8083
  br i1 %cmp737, label %if.then739, label %if.end740, !dbg !8084

if.then739:                                       ; preds = %if.end715
  br label %fail1, !dbg !8085

if.end740:                                        ; preds = %if.end715
  %409 = load i32, i32* %compute_mode, align 4, !dbg !8086
  %410 = load %struct.rtx_def*, %struct.rtx_def** %t1705, align 8, !dbg !8087
  %411 = load i32, i32* %post_shift502, align 4, !dbg !8088
  %conv741 = sext i32 %411 to i64, !dbg !8088
  %call742 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv741), !dbg !8089
  %call743 = call %struct.rtx_def* @expand_shift(i32 84, i32 %409, %struct.rtx_def* %410, %union.tree_node* %call742, %struct.rtx_def* null, i32 0), !dbg !8090
  store %struct.rtx_def* %call743, %struct.rtx_def** %t2706, align 8, !dbg !8091
  %412 = load i32, i32* %compute_mode, align 4, !dbg !8092
  %413 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8093
  %414 = load i32, i32* %size, align 4, !dbg !8094
  %sub744 = sub nsw i32 %414, 1, !dbg !8095
  %conv745 = sext i32 %sub744 to i64, !dbg !8094
  %call746 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv745), !dbg !8096
  %call747 = call %struct.rtx_def* @expand_shift(i32 84, i32 %412, %struct.rtx_def* %413, %union.tree_node* %call746, %struct.rtx_def* null, i32 0), !dbg !8097
  store %struct.rtx_def* %call747, %struct.rtx_def** %t3707, align 8, !dbg !8098
  %415 = load i64, i64* %d503, align 8, !dbg !8099
  %cmp748 = icmp slt i64 %415, 0, !dbg !8101
  br i1 %cmp748, label %if.then750, label %if.else753, !dbg !8102

if.then750:                                       ; preds = %if.end740
  %416 = load i32, i32* %compute_mode, align 4, !dbg !8103
  %417 = load %struct.rtx_def*, %struct.rtx_def** %t3707, align 8, !dbg !8103
  %418 = load %struct.rtx_def*, %struct.rtx_def** %t2706, align 8, !dbg !8103
  %call751 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %416, %struct.rtx_def* %417, %struct.rtx_def* %418), !dbg !8103
  %419 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !8104
  %call752 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call751, %struct.rtx_def* %419), !dbg !8105
  store %struct.rtx_def* %call752, %struct.rtx_def** %quotient, align 8, !dbg !8106
  br label %if.end756, !dbg !8107

if.else753:                                       ; preds = %if.end740
  %420 = load i32, i32* %compute_mode, align 4, !dbg !8108
  %421 = load %struct.rtx_def*, %struct.rtx_def** %t2706, align 8, !dbg !8108
  %422 = load %struct.rtx_def*, %struct.rtx_def** %t3707, align 8, !dbg !8108
  %call754 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %420, %struct.rtx_def* %421, %struct.rtx_def* %422), !dbg !8108
  %423 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !8109
  %call755 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call754, %struct.rtx_def* %423), !dbg !8110
  store %struct.rtx_def* %call755, %struct.rtx_def** %quotient, align 8, !dbg !8111
  br label %if.end756

if.end756:                                        ; preds = %if.else753, %if.then750
  br label %if.end818, !dbg !8112

if.else757:                                       ; preds = %if.then693
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t1758, metadata !8113, metadata !DIExpression()), !dbg !8115
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t2759, metadata !8116, metadata !DIExpression()), !dbg !8117
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t3760, metadata !8118, metadata !DIExpression()), !dbg !8119
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t4761, metadata !8120, metadata !DIExpression()), !dbg !8121
  %424 = load i32, i32* %post_shift502, align 4, !dbg !8122
  %cmp762 = icmp sge i32 %424, 32, !dbg !8124
  br i1 %cmp762, label %if.then768, label %lor.lhs.false764, !dbg !8125

lor.lhs.false764:                                 ; preds = %if.else757
  %425 = load i32, i32* %size, align 4, !dbg !8126
  %sub765 = sub nsw i32 %425, 1, !dbg !8127
  %cmp766 = icmp sge i32 %sub765, 32, !dbg !8128
  br i1 %cmp766, label %if.then768, label %if.end769, !dbg !8129

if.then768:                                       ; preds = %lor.lhs.false764, %if.else757
  br label %fail1, !dbg !8130

if.end769:                                        ; preds = %lor.lhs.false764
  %426 = load i32, i32* %size, align 4, !dbg !8131
  %sub770 = sub nsw i32 %426, 1, !dbg !8132
  %sh_prom771 = zext i32 %sub770 to i64, !dbg !8133
  %shl772 = shl i64 -1, %sh_prom771, !dbg !8133
  %427 = load i64, i64* %ml501, align 8, !dbg !8134
  %or = or i64 %427, %shl772, !dbg !8134
  store i64 %or, i64* %ml501, align 8, !dbg !8134
  %428 = load i64, i64* %ml501, align 8, !dbg !8135
  %429 = load i32, i32* %compute_mode, align 4, !dbg !8136
  %call773 = call %struct.rtx_def* @gen_int_mode(i64 %428, i32 %429), !dbg !8137
  store %struct.rtx_def* %call773, %struct.rtx_def** %mlr, align 8, !dbg !8138
  %430 = load i8, i8* %speed, align 1, !dbg !8139
  %idxprom774 = zext i8 %430 to i64, !dbg !8140
  %arrayidx775 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom774, !dbg !8140
  %431 = load i32, i32* %compute_mode, align 4, !dbg !8141
  %idxprom776 = zext i32 %431 to i64, !dbg !8140
  %arrayidx777 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx775, i64 0, i64 %idxprom776, !dbg !8140
  %432 = load i32, i32* %post_shift502, align 4, !dbg !8142
  %idxprom778 = sext i32 %432 to i64, !dbg !8140
  %arrayidx779 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx777, i64 0, i64 %idxprom778, !dbg !8140
  %433 = load i32, i32* %arrayidx779, align 4, !dbg !8140
  %434 = load i8, i8* %speed, align 1, !dbg !8143
  %idxprom780 = zext i8 %434 to i64, !dbg !8144
  %arrayidx781 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom780, !dbg !8144
  %435 = load i32, i32* %compute_mode, align 4, !dbg !8145
  %idxprom782 = zext i32 %435 to i64, !dbg !8144
  %arrayidx783 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx781, i64 0, i64 %idxprom782, !dbg !8144
  %436 = load i32, i32* %size, align 4, !dbg !8146
  %sub784 = sub nsw i32 %436, 1, !dbg !8147
  %idxprom785 = sext i32 %sub784 to i64, !dbg !8144
  %arrayidx786 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx783, i64 0, i64 %idxprom785, !dbg !8144
  %437 = load i32, i32* %arrayidx786, align 4, !dbg !8144
  %add787 = add nsw i32 %433, %437, !dbg !8148
  %438 = load i8, i8* %speed, align 1, !dbg !8149
  %idxprom788 = zext i8 %438 to i64, !dbg !8150
  %arrayidx789 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom788, !dbg !8150
  %439 = load i32, i32* %compute_mode, align 4, !dbg !8151
  %idxprom790 = zext i32 %439 to i64, !dbg !8150
  %arrayidx791 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx789, i64 0, i64 %idxprom790, !dbg !8150
  %440 = load i32, i32* %arrayidx791, align 4, !dbg !8150
  %mul792 = mul nsw i32 2, %440, !dbg !8152
  %add793 = add nsw i32 %add787, %mul792, !dbg !8153
  store i32 %add793, i32* %extra_cost, align 4, !dbg !8154
  %441 = load i32, i32* %compute_mode, align 4, !dbg !8155
  %442 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8156
  %443 = load %struct.rtx_def*, %struct.rtx_def** %mlr, align 8, !dbg !8157
  %444 = load i32, i32* %max_cost, align 4, !dbg !8158
  %445 = load i32, i32* %extra_cost, align 4, !dbg !8159
  %sub794 = sub nsw i32 %444, %445, !dbg !8160
  %call795 = call %struct.rtx_def* @expand_mult_highpart(i32 %441, %struct.rtx_def* %442, %struct.rtx_def* %443, %struct.rtx_def* null, i32 0, i32 %sub794), !dbg !8161
  store %struct.rtx_def* %call795, %struct.rtx_def** %t1758, align 8, !dbg !8162
  %446 = load %struct.rtx_def*, %struct.rtx_def** %t1758, align 8, !dbg !8163
  %cmp796 = icmp eq %struct.rtx_def* %446, null, !dbg !8165
  br i1 %cmp796, label %if.then798, label %if.end799, !dbg !8166

if.then798:                                       ; preds = %if.end769
  br label %fail1, !dbg !8167

if.end799:                                        ; preds = %if.end769
  %447 = load i32, i32* %compute_mode, align 4, !dbg !8168
  %448 = load %struct.rtx_def*, %struct.rtx_def** %t1758, align 8, !dbg !8168
  %449 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8168
  %call800 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %447, %struct.rtx_def* %448, %struct.rtx_def* %449), !dbg !8168
  %call801 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call800, %struct.rtx_def* null), !dbg !8169
  store %struct.rtx_def* %call801, %struct.rtx_def** %t2759, align 8, !dbg !8170
  %450 = load i32, i32* %compute_mode, align 4, !dbg !8171
  %451 = load %struct.rtx_def*, %struct.rtx_def** %t2759, align 8, !dbg !8172
  %452 = load i32, i32* %post_shift502, align 4, !dbg !8173
  %conv802 = sext i32 %452 to i64, !dbg !8173
  %call803 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv802), !dbg !8174
  %call804 = call %struct.rtx_def* @expand_shift(i32 84, i32 %450, %struct.rtx_def* %451, %union.tree_node* %call803, %struct.rtx_def* null, i32 0), !dbg !8175
  store %struct.rtx_def* %call804, %struct.rtx_def** %t3760, align 8, !dbg !8176
  %453 = load i32, i32* %compute_mode, align 4, !dbg !8177
  %454 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8178
  %455 = load i32, i32* %size, align 4, !dbg !8179
  %sub805 = sub nsw i32 %455, 1, !dbg !8180
  %conv806 = sext i32 %sub805 to i64, !dbg !8179
  %call807 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv806), !dbg !8181
  %call808 = call %struct.rtx_def* @expand_shift(i32 84, i32 %453, %struct.rtx_def* %454, %union.tree_node* %call807, %struct.rtx_def* null, i32 0), !dbg !8182
  store %struct.rtx_def* %call808, %struct.rtx_def** %t4761, align 8, !dbg !8183
  %456 = load i64, i64* %d503, align 8, !dbg !8184
  %cmp809 = icmp slt i64 %456, 0, !dbg !8186
  br i1 %cmp809, label %if.then811, label %if.else814, !dbg !8187

if.then811:                                       ; preds = %if.end799
  %457 = load i32, i32* %compute_mode, align 4, !dbg !8188
  %458 = load %struct.rtx_def*, %struct.rtx_def** %t4761, align 8, !dbg !8188
  %459 = load %struct.rtx_def*, %struct.rtx_def** %t3760, align 8, !dbg !8188
  %call812 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %457, %struct.rtx_def* %458, %struct.rtx_def* %459), !dbg !8188
  %460 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !8189
  %call813 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call812, %struct.rtx_def* %460), !dbg !8190
  store %struct.rtx_def* %call813, %struct.rtx_def** %quotient, align 8, !dbg !8191
  br label %if.end817, !dbg !8192

if.else814:                                       ; preds = %if.end799
  %461 = load i32, i32* %compute_mode, align 4, !dbg !8193
  %462 = load %struct.rtx_def*, %struct.rtx_def** %t3760, align 8, !dbg !8193
  %463 = load %struct.rtx_def*, %struct.rtx_def** %t4761, align 8, !dbg !8193
  %call815 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %461, %struct.rtx_def* %462, %struct.rtx_def* %463), !dbg !8193
  %464 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !8194
  %call816 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call815, %struct.rtx_def* %464), !dbg !8195
  store %struct.rtx_def* %call816, %struct.rtx_def** %quotient, align 8, !dbg !8196
  br label %if.end817

if.end817:                                        ; preds = %if.else814, %if.then811
  br label %if.end818

if.end818:                                        ; preds = %if.end817, %if.end756
  br label %if.end820, !dbg !8197

if.else819:                                       ; preds = %if.else690
  br label %sw.epilog, !dbg !8198

if.end820:                                        ; preds = %if.end818
  br label %if.end821

if.end821:                                        ; preds = %if.end820, %if.end689
  br label %if.end822

if.end822:                                        ; preds = %if.end821, %if.then580
  br label %if.end823

if.end823:                                        ; preds = %if.end822, %if.end543
  br label %if.end824

if.end824:                                        ; preds = %if.end823, %if.then527
  br label %if.end825

if.end825:                                        ; preds = %if.end824, %if.then523
  %call826 = call %struct.rtx_def* @get_last_insn(), !dbg !8199
  store %struct.rtx_def* %call826, %struct.rtx_def** %insn, align 8, !dbg !8200
  %465 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8201
  %466 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8203
  %cmp827 = icmp ne %struct.rtx_def* %465, %466, !dbg !8204
  br i1 %cmp827, label %land.lhs.true829, label %if.end886, !dbg !8205

land.lhs.true829:                                 ; preds = %if.end825
  %467 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8206
  %468 = bitcast %struct.rtx_def* %467 to i32*, !dbg !8206
  %bf.load830 = load i32, i32* %468, align 8, !dbg !8206
  %bf.clear831 = and i32 %bf.load830, 65535, !dbg !8206
  %cmp832 = icmp eq i32 %bf.clear831, 8, !dbg !8206
  br i1 %cmp832, label %cond.true849, label %lor.lhs.false834, !dbg !8206

lor.lhs.false834:                                 ; preds = %land.lhs.true829
  %469 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8206
  %470 = bitcast %struct.rtx_def* %469 to i32*, !dbg !8206
  %bf.load835 = load i32, i32* %470, align 8, !dbg !8206
  %bf.clear836 = and i32 %bf.load835, 65535, !dbg !8206
  %cmp837 = icmp eq i32 %bf.clear836, 7, !dbg !8206
  br i1 %cmp837, label %cond.true849, label %lor.lhs.false839, !dbg !8206

lor.lhs.false839:                                 ; preds = %lor.lhs.false834
  %471 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8206
  %472 = bitcast %struct.rtx_def* %471 to i32*, !dbg !8206
  %bf.load840 = load i32, i32* %472, align 8, !dbg !8206
  %bf.clear841 = and i32 %bf.load840, 65535, !dbg !8206
  %cmp842 = icmp eq i32 %bf.clear841, 9, !dbg !8206
  br i1 %cmp842, label %cond.true849, label %lor.lhs.false844, !dbg !8206

lor.lhs.false844:                                 ; preds = %lor.lhs.false839
  %473 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8206
  %474 = bitcast %struct.rtx_def* %473 to i32*, !dbg !8206
  %bf.load845 = load i32, i32* %474, align 8, !dbg !8206
  %bf.clear846 = and i32 %bf.load845, 65535, !dbg !8206
  %cmp847 = icmp eq i32 %bf.clear846, 10, !dbg !8206
  br i1 %cmp847, label %cond.true849, label %cond.false871, !dbg !8206

cond.true849:                                     ; preds = %lor.lhs.false844, %lor.lhs.false839, %lor.lhs.false834, %land.lhs.true829
  %475 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8206
  %u850 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %475, i32 0, i32 1, !dbg !8206
  %fld851 = bitcast %union.u* %u850 to [1 x %union.rtunion_def]*, !dbg !8206
  %arrayidx852 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld851, i64 0, i64 5, !dbg !8206
  %rt_rtx853 = bitcast %union.rtunion_def* %arrayidx852 to %struct.rtx_def**, !dbg !8206
  %476 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx853, align 8, !dbg !8206
  %477 = bitcast %struct.rtx_def* %476 to i32*, !dbg !8206
  %bf.load854 = load i32, i32* %477, align 8, !dbg !8206
  %bf.clear855 = and i32 %bf.load854, 65535, !dbg !8206
  %cmp856 = icmp eq i32 %bf.clear855, 23, !dbg !8206
  br i1 %cmp856, label %cond.true858, label %cond.false863, !dbg !8206

cond.true858:                                     ; preds = %cond.true849
  %478 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8206
  %u859 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %478, i32 0, i32 1, !dbg !8206
  %fld860 = bitcast %union.u* %u859 to [1 x %union.rtunion_def]*, !dbg !8206
  %arrayidx861 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld860, i64 0, i64 5, !dbg !8206
  %rt_rtx862 = bitcast %union.rtunion_def* %arrayidx861 to %struct.rtx_def**, !dbg !8206
  %479 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx862, align 8, !dbg !8206
  br label %cond.end869, !dbg !8206

cond.false863:                                    ; preds = %cond.true849
  %480 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8206
  %481 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8206
  %u864 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %481, i32 0, i32 1, !dbg !8206
  %fld865 = bitcast %union.u* %u864 to [1 x %union.rtunion_def]*, !dbg !8206
  %arrayidx866 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld865, i64 0, i64 5, !dbg !8206
  %rt_rtx867 = bitcast %union.rtunion_def* %arrayidx866 to %struct.rtx_def**, !dbg !8206
  %482 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx867, align 8, !dbg !8206
  %call868 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %480, %struct.rtx_def* %482), !dbg !8206
  br label %cond.end869, !dbg !8206

cond.end869:                                      ; preds = %cond.false863, %cond.true858
  %cond870 = phi %struct.rtx_def* [ %479, %cond.true858 ], [ %call868, %cond.false863 ], !dbg !8206
  br label %cond.end872, !dbg !8206

cond.false871:                                    ; preds = %lor.lhs.false844
  br label %cond.end872, !dbg !8206

cond.end872:                                      ; preds = %cond.false871, %cond.end869
  %cond873 = phi %struct.rtx_def* [ %cond870, %cond.end869 ], [ null, %cond.false871 ], !dbg !8206
  store %struct.rtx_def* %cond873, %struct.rtx_def** %set, align 8, !dbg !8207
  %cmp874 = icmp ne %struct.rtx_def* %cond873, null, !dbg !8208
  br i1 %cmp874, label %land.lhs.true876, label %if.end886, !dbg !8209

land.lhs.true876:                                 ; preds = %cond.end872
  %483 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !8210
  %u877 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %483, i32 0, i32 1, !dbg !8210
  %fld878 = bitcast %union.u* %u877 to [1 x %union.rtunion_def]*, !dbg !8210
  %arrayidx879 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld878, i64 0, i64 0, !dbg !8210
  %rt_rtx880 = bitcast %union.rtunion_def* %arrayidx879 to %struct.rtx_def**, !dbg !8210
  %484 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx880, align 8, !dbg !8210
  %485 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8211
  %cmp881 = icmp eq %struct.rtx_def* %484, %485, !dbg !8212
  br i1 %cmp881, label %if.then883, label %if.end886, !dbg !8213

if.then883:                                       ; preds = %land.lhs.true876
  %486 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8214
  %487 = load i32, i32* %compute_mode, align 4, !dbg !8215
  %488 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8215
  %489 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8215
  %call884 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 55, i32 %487, %struct.rtx_def* %488, %struct.rtx_def* %489), !dbg !8215
  %call885 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %486, i32 4, %struct.rtx_def* %call884), !dbg !8216
  br label %if.end886, !dbg !8216

if.end886:                                        ; preds = %if.then883, %land.lhs.true876, %cond.end872, %if.end825
  br label %if.end887

if.end887:                                        ; preds = %if.end886, %if.end499
  br label %sw.epilog, !dbg !8217

if.end888:                                        ; preds = %sw.bb
  br label %fail1, !dbg !7603

fail1:                                            ; preds = %if.end888, %if.then798, %if.then768, %if.then739, %if.then714, %if.then542, %if.then431, %if.then409, %if.then389, %if.then364
  call void @llvm.dbg.label(metadata !8218), !dbg !8219
  %490 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8220
  call void @delete_insns_since(%struct.rtx_def* %490), !dbg !8221
  br label %sw.epilog, !dbg !8222

sw.bb889:                                         ; preds = %if.then295, %if.then295
  %491 = load i32, i32* %op1_is_constant, align 4, !dbg !8223
  %tobool890 = icmp ne i32 %491, 0, !dbg !8223
  br i1 %tobool890, label %land.lhs.true891, label %if.end1006, !dbg !8225

land.lhs.true891:                                 ; preds = %sw.bb889
  %492 = load i32, i32* %size, align 4, !dbg !8226
  %cmp892 = icmp sge i32 64, %492, !dbg !8227
  br i1 %cmp892, label %if.then894, label %if.end1006, !dbg !8228

if.then894:                                       ; preds = %land.lhs.true891
  call void @llvm.dbg.declare(metadata i64* %mh895, metadata !8229, metadata !DIExpression()), !dbg !8231
  call void @llvm.dbg.declare(metadata i32* %pre_shift896, metadata !8232, metadata !DIExpression()), !dbg !8233
  call void @llvm.dbg.declare(metadata i32* %lgup897, metadata !8234, metadata !DIExpression()), !dbg !8235
  call void @llvm.dbg.declare(metadata i32* %post_shift898, metadata !8236, metadata !DIExpression()), !dbg !8237
  call void @llvm.dbg.declare(metadata i64* %d899, metadata !8238, metadata !DIExpression()), !dbg !8239
  %493 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8240
  %u900 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %493, i32 0, i32 1, !dbg !8240
  %hwint901 = bitcast %union.u* %u900 to [1 x i64]*, !dbg !8240
  %arrayidx902 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint901, i64 0, i64 0, !dbg !8240
  %494 = load i64, i64* %arrayidx902, align 8, !dbg !8240
  store i64 %494, i64* %d899, align 8, !dbg !8239
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %ml903, metadata !8241, metadata !DIExpression()), !dbg !8242
  %495 = load i64, i64* %d899, align 8, !dbg !8243
  %cmp904 = icmp sgt i64 %495, 0, !dbg !8245
  br i1 %cmp904, label %if.then906, label %if.else984, !dbg !8246

if.then906:                                       ; preds = %if.then894
  %496 = load i64, i64* %d899, align 8, !dbg !8247
  %497 = load i64, i64* %d899, align 8, !dbg !8247
  %sub907 = sub nsw i64 %497, 1, !dbg !8247
  %and908 = and i64 %496, %sub907, !dbg !8247
  %cmp909 = icmp eq i64 %and908, 0, !dbg !8247
  br i1 %cmp909, label %if.then911, label %if.else928, !dbg !8250

if.then911:                                       ; preds = %if.then906
  %498 = load i64, i64* %d899, align 8, !dbg !8251
  %call912 = call i32 @floor_log2(i64 %498), !dbg !8253
  store i32 %call912, i32* %pre_shift896, align 4, !dbg !8254
  %499 = load i32, i32* %rem_flag.addr, align 4, !dbg !8255
  %tobool913 = icmp ne i32 %499, 0, !dbg !8255
  br i1 %tobool913, label %if.then914, label %if.end924, !dbg !8257

if.then914:                                       ; preds = %if.then911
  %500 = load i32, i32* %compute_mode, align 4, !dbg !8258
  %501 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8260
  %502 = load i32, i32* %pre_shift896, align 4, !dbg !8261
  %sh_prom915 = zext i32 %502 to i64, !dbg !8261
  %shl916 = shl i64 1, %sh_prom915, !dbg !8261
  %sub917 = sub nsw i64 %shl916, 1, !dbg !8261
  %call918 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub917), !dbg !8261
  %503 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8262
  %call919 = call %struct.rtx_def* @expand_binop(i32 %500, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %501, %struct.rtx_def* %call918, %struct.rtx_def* %503, i32 0, i32 3), !dbg !8263
  store %struct.rtx_def* %call919, %struct.rtx_def** %remainder, align 8, !dbg !8264
  %504 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8265
  %tobool920 = icmp ne %struct.rtx_def* %504, null, !dbg !8265
  br i1 %tobool920, label %if.then921, label %if.end923, !dbg !8267

if.then921:                                       ; preds = %if.then914
  %505 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !8268
  %506 = load i32, i32* %mode.addr, align 4, !dbg !8269
  %507 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8270
  %call922 = call %struct.rtx_def* %505(i32 %506, %struct.rtx_def* %507), !dbg !8268
  store %struct.rtx_def* %call922, %struct.rtx_def** %retval, align 8, !dbg !8271
  br label %return, !dbg !8271

if.end923:                                        ; preds = %if.then914
  br label %if.end924, !dbg !8272

if.end924:                                        ; preds = %if.end923, %if.then911
  %508 = load i32, i32* %compute_mode, align 4, !dbg !8273
  %509 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8274
  %510 = load i32, i32* %pre_shift896, align 4, !dbg !8275
  %conv925 = sext i32 %510 to i64, !dbg !8275
  %call926 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv925), !dbg !8276
  %511 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !8277
  %call927 = call %struct.rtx_def* @expand_shift(i32 84, i32 %508, %struct.rtx_def* %509, %union.tree_node* %call926, %struct.rtx_def* %511, i32 0), !dbg !8278
  store %struct.rtx_def* %call927, %struct.rtx_def** %quotient, align 8, !dbg !8279
  br label %if.end983, !dbg !8280

if.else928:                                       ; preds = %if.then906
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t1929, metadata !8281, metadata !DIExpression()), !dbg !8283
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t2930, metadata !8284, metadata !DIExpression()), !dbg !8285
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t3931, metadata !8286, metadata !DIExpression()), !dbg !8287
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t4932, metadata !8288, metadata !DIExpression()), !dbg !8289
  %512 = load i64, i64* %d899, align 8, !dbg !8290
  %513 = load i32, i32* %size, align 4, !dbg !8291
  %514 = load i32, i32* %size, align 4, !dbg !8292
  %sub933 = sub nsw i32 %514, 1, !dbg !8293
  %call934 = call i64 @choose_multiplier(i64 %512, i32 %513, i32 %sub933, %struct.rtx_def** %ml903, i32* %post_shift898, i32* %lgup897), !dbg !8294
  store i64 %call934, i64* %mh895, align 8, !dbg !8295
  %515 = load i64, i64* %mh895, align 8, !dbg !8296
  %tobool935 = icmp ne i64 %515, 0, !dbg !8296
  br i1 %tobool935, label %cond.true936, label %cond.false937, !dbg !8296

cond.true936:                                     ; preds = %if.else928
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4398, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8296
  br label %cond.end938, !dbg !8296

cond.false937:                                    ; preds = %if.else928
  br label %cond.end938, !dbg !8296

cond.end938:                                      ; preds = %cond.false937, %cond.true936
  %cond939 = phi i32 [ 0, %cond.true936 ], [ 0, %cond.false937 ], !dbg !8296
  %516 = load i32, i32* %post_shift898, align 4, !dbg !8297
  %cmp940 = icmp slt i32 %516, 32, !dbg !8299
  br i1 %cmp940, label %land.lhs.true942, label %if.end982, !dbg !8300

land.lhs.true942:                                 ; preds = %cond.end938
  %517 = load i32, i32* %size, align 4, !dbg !8301
  %sub943 = sub nsw i32 %517, 1, !dbg !8302
  %cmp944 = icmp slt i32 %sub943, 32, !dbg !8303
  br i1 %cmp944, label %if.then946, label %if.end982, !dbg !8304

if.then946:                                       ; preds = %land.lhs.true942
  %518 = load i32, i32* %compute_mode, align 4, !dbg !8305
  %519 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8307
  %520 = load i32, i32* %size, align 4, !dbg !8308
  %sub947 = sub nsw i32 %520, 1, !dbg !8309
  %conv948 = sext i32 %sub947 to i64, !dbg !8308
  %call949 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv948), !dbg !8310
  %call950 = call %struct.rtx_def* @expand_shift(i32 84, i32 %518, %struct.rtx_def* %519, %union.tree_node* %call949, %struct.rtx_def* null, i32 0), !dbg !8311
  store %struct.rtx_def* %call950, %struct.rtx_def** %t1929, align 8, !dbg !8312
  %521 = load i32, i32* %compute_mode, align 4, !dbg !8313
  %522 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8314
  %523 = load %struct.rtx_def*, %struct.rtx_def** %t1929, align 8, !dbg !8315
  %call951 = call %struct.rtx_def* @expand_binop(i32 %521, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %522, %struct.rtx_def* %523, %struct.rtx_def* null, i32 0, i32 2), !dbg !8316
  store %struct.rtx_def* %call951, %struct.rtx_def** %t2930, align 8, !dbg !8317
  %524 = load i8, i8* %speed, align 1, !dbg !8318
  %idxprom952 = zext i8 %524 to i64, !dbg !8319
  %arrayidx953 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom952, !dbg !8319
  %525 = load i32, i32* %compute_mode, align 4, !dbg !8320
  %idxprom954 = zext i32 %525 to i64, !dbg !8319
  %arrayidx955 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx953, i64 0, i64 %idxprom954, !dbg !8319
  %526 = load i32, i32* %post_shift898, align 4, !dbg !8321
  %idxprom956 = sext i32 %526 to i64, !dbg !8319
  %arrayidx957 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx955, i64 0, i64 %idxprom956, !dbg !8319
  %527 = load i32, i32* %arrayidx957, align 4, !dbg !8319
  %528 = load i8, i8* %speed, align 1, !dbg !8322
  %idxprom958 = zext i8 %528 to i64, !dbg !8323
  %arrayidx959 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom958, !dbg !8323
  %529 = load i32, i32* %compute_mode, align 4, !dbg !8324
  %idxprom960 = zext i32 %529 to i64, !dbg !8323
  %arrayidx961 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx959, i64 0, i64 %idxprom960, !dbg !8323
  %530 = load i32, i32* %size, align 4, !dbg !8325
  %sub962 = sub nsw i32 %530, 1, !dbg !8326
  %idxprom963 = sext i32 %sub962 to i64, !dbg !8323
  %arrayidx964 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx961, i64 0, i64 %idxprom963, !dbg !8323
  %531 = load i32, i32* %arrayidx964, align 4, !dbg !8323
  %add965 = add nsw i32 %527, %531, !dbg !8327
  %532 = load i8, i8* %speed, align 1, !dbg !8328
  %idxprom966 = zext i8 %532 to i64, !dbg !8329
  %arrayidx967 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom966, !dbg !8329
  %533 = load i32, i32* %compute_mode, align 4, !dbg !8330
  %idxprom968 = zext i32 %533 to i64, !dbg !8329
  %arrayidx969 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx967, i64 0, i64 %idxprom968, !dbg !8329
  %534 = load i32, i32* %arrayidx969, align 4, !dbg !8329
  %mul970 = mul nsw i32 2, %534, !dbg !8331
  %add971 = add nsw i32 %add965, %mul970, !dbg !8332
  store i32 %add971, i32* %extra_cost, align 4, !dbg !8333
  %535 = load i32, i32* %compute_mode, align 4, !dbg !8334
  %536 = load %struct.rtx_def*, %struct.rtx_def** %t2930, align 8, !dbg !8335
  %537 = load %struct.rtx_def*, %struct.rtx_def** %ml903, align 8, !dbg !8336
  %538 = load i32, i32* %max_cost, align 4, !dbg !8337
  %539 = load i32, i32* %extra_cost, align 4, !dbg !8338
  %sub972 = sub nsw i32 %538, %539, !dbg !8339
  %call973 = call %struct.rtx_def* @expand_mult_highpart(i32 %535, %struct.rtx_def* %536, %struct.rtx_def* %537, %struct.rtx_def* null, i32 1, i32 %sub972), !dbg !8340
  store %struct.rtx_def* %call973, %struct.rtx_def** %t3931, align 8, !dbg !8341
  %540 = load %struct.rtx_def*, %struct.rtx_def** %t3931, align 8, !dbg !8342
  %cmp974 = icmp ne %struct.rtx_def* %540, null, !dbg !8344
  br i1 %cmp974, label %if.then976, label %if.end981, !dbg !8345

if.then976:                                       ; preds = %if.then946
  %541 = load i32, i32* %compute_mode, align 4, !dbg !8346
  %542 = load %struct.rtx_def*, %struct.rtx_def** %t3931, align 8, !dbg !8348
  %543 = load i32, i32* %post_shift898, align 4, !dbg !8349
  %conv977 = sext i32 %543 to i64, !dbg !8349
  %call978 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv977), !dbg !8350
  %call979 = call %struct.rtx_def* @expand_shift(i32 84, i32 %541, %struct.rtx_def* %542, %union.tree_node* %call978, %struct.rtx_def* null, i32 1), !dbg !8351
  store %struct.rtx_def* %call979, %struct.rtx_def** %t4932, align 8, !dbg !8352
  %544 = load i32, i32* %compute_mode, align 4, !dbg !8353
  %545 = load %struct.rtx_def*, %struct.rtx_def** %t4932, align 8, !dbg !8354
  %546 = load %struct.rtx_def*, %struct.rtx_def** %t1929, align 8, !dbg !8355
  %547 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !8356
  %call980 = call %struct.rtx_def* @expand_binop(i32 %544, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %545, %struct.rtx_def* %546, %struct.rtx_def* %547, i32 0, i32 2), !dbg !8357
  store %struct.rtx_def* %call980, %struct.rtx_def** %quotient, align 8, !dbg !8358
  br label %if.end981, !dbg !8359

if.end981:                                        ; preds = %if.then976, %if.then946
  br label %if.end982, !dbg !8360

if.end982:                                        ; preds = %if.end981, %land.lhs.true942, %cond.end938
  br label %if.end983

if.end983:                                        ; preds = %if.end982, %if.end924
  br label %if.end1005, !dbg !8361

if.else984:                                       ; preds = %if.then894
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %nsign, metadata !8362, metadata !DIExpression()), !dbg !8364
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t1985, metadata !8365, metadata !DIExpression()), !dbg !8366
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t2986, metadata !8367, metadata !DIExpression()), !dbg !8368
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t3987, metadata !8369, metadata !DIExpression()), !dbg !8370
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t4988, metadata !8371, metadata !DIExpression()), !dbg !8372
  %548 = load i32, i32* %compute_mode, align 4, !dbg !8373
  %549 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8373
  %550 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !8373
  %call989 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %548, %struct.rtx_def* %549, %struct.rtx_def* %550), !dbg !8373
  %call990 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call989, %struct.rtx_def* null), !dbg !8374
  store %struct.rtx_def* %call990, %struct.rtx_def** %t1985, align 8, !dbg !8375
  %551 = load i32, i32* %compute_mode, align 4, !dbg !8376
  %552 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8377
  %553 = load %struct.rtx_def*, %struct.rtx_def** %t1985, align 8, !dbg !8378
  %call991 = call %struct.rtx_def* @expand_binop(i32 %551, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %552, %struct.rtx_def* %553, %struct.rtx_def* null, i32 0, i32 2), !dbg !8379
  store %struct.rtx_def* %call991, %struct.rtx_def** %t2986, align 8, !dbg !8380
  %554 = load i32, i32* %compute_mode, align 4, !dbg !8381
  %555 = load %struct.rtx_def*, %struct.rtx_def** %t2986, align 8, !dbg !8382
  %556 = load i32, i32* %size, align 4, !dbg !8383
  %sub992 = sub nsw i32 %556, 1, !dbg !8384
  %conv993 = sext i32 %sub992 to i64, !dbg !8383
  %call994 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv993), !dbg !8385
  %call995 = call %struct.rtx_def* @expand_shift(i32 84, i32 %554, %struct.rtx_def* %555, %union.tree_node* %call994, %struct.rtx_def* null, i32 0), !dbg !8386
  store %struct.rtx_def* %call995, %struct.rtx_def** %nsign, align 8, !dbg !8387
  %557 = load i32, i32* %compute_mode, align 4, !dbg !8388
  %558 = load %struct.rtx_def*, %struct.rtx_def** %t1985, align 8, !dbg !8388
  %559 = load %struct.rtx_def*, %struct.rtx_def** %nsign, align 8, !dbg !8388
  %call996 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %557, %struct.rtx_def* %558, %struct.rtx_def* %559), !dbg !8388
  %call997 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call996, %struct.rtx_def* null), !dbg !8389
  store %struct.rtx_def* %call997, %struct.rtx_def** %t3987, align 8, !dbg !8390
  %560 = load i32, i32* %compute_mode, align 4, !dbg !8391
  %561 = load %struct.rtx_def*, %struct.rtx_def** %t3987, align 8, !dbg !8392
  %562 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8393
  %call998 = call %struct.rtx_def* @expand_divmod(i32 0, i32 67, i32 %560, %struct.rtx_def* %561, %struct.rtx_def* %562, %struct.rtx_def* null, i32 0), !dbg !8394
  store %struct.rtx_def* %call998, %struct.rtx_def** %t4988, align 8, !dbg !8395
  %563 = load %struct.rtx_def*, %struct.rtx_def** %t4988, align 8, !dbg !8396
  %tobool999 = icmp ne %struct.rtx_def* %563, null, !dbg !8396
  br i1 %tobool999, label %if.then1000, label %if.end1004, !dbg !8398

if.then1000:                                      ; preds = %if.else984
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t5, metadata !8399, metadata !DIExpression()), !dbg !8401
  %564 = load i32, i32* %compute_mode, align 4, !dbg !8402
  %565 = load %struct.rtx_def*, %struct.rtx_def** %nsign, align 8, !dbg !8403
  %call1001 = call %struct.rtx_def* @expand_unop(i32 %564, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69), %struct.rtx_def* %565, %struct.rtx_def* null, i32 0), !dbg !8404
  store %struct.rtx_def* %call1001, %struct.rtx_def** %t5, align 8, !dbg !8405
  %566 = load i32, i32* %compute_mode, align 4, !dbg !8406
  %567 = load %struct.rtx_def*, %struct.rtx_def** %t4988, align 8, !dbg !8406
  %568 = load %struct.rtx_def*, %struct.rtx_def** %t5, align 8, !dbg !8406
  %call1002 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %566, %struct.rtx_def* %567, %struct.rtx_def* %568), !dbg !8406
  %569 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !8407
  %call1003 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call1002, %struct.rtx_def* %569), !dbg !8408
  store %struct.rtx_def* %call1003, %struct.rtx_def** %quotient, align 8, !dbg !8409
  br label %if.end1004, !dbg !8410

if.end1004:                                       ; preds = %if.then1000, %if.else984
  br label %if.end1005

if.end1005:                                       ; preds = %if.end1004, %if.end983
  br label %if.end1006, !dbg !8411

if.end1006:                                       ; preds = %if.end1005, %land.lhs.true891, %sw.bb889
  %570 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8412
  %cmp1007 = icmp ne %struct.rtx_def* %570, null, !dbg !8414
  br i1 %cmp1007, label %if.then1009, label %if.end1010, !dbg !8415

if.then1009:                                      ; preds = %if.end1006
  br label %sw.epilog, !dbg !8416

if.end1010:                                       ; preds = %if.end1006
  %571 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8417
  call void @delete_insns_since(%struct.rtx_def* %571), !dbg !8418
  %572 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8419
  %cmp1011 = icmp eq %struct.rtx_def* %572, null, !dbg !8421
  br i1 %cmp1011, label %if.then1019, label %lor.lhs.false1013, !dbg !8422

lor.lhs.false1013:                                ; preds = %if.end1010
  %573 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8423
  %574 = bitcast %struct.rtx_def* %573 to i32*, !dbg !8423
  %bf.load1014 = load i32, i32* %574, align 8, !dbg !8423
  %bf.lshr1015 = lshr i32 %bf.load1014, 16, !dbg !8423
  %bf.clear1016 = and i32 %bf.lshr1015, 255, !dbg !8423
  %575 = load i32, i32* %compute_mode, align 4, !dbg !8424
  %cmp1017 = icmp ne i32 %bf.clear1016, %575, !dbg !8425
  br i1 %cmp1017, label %if.then1019, label %if.end1021, !dbg !8426

if.then1019:                                      ; preds = %lor.lhs.false1013, %if.end1010
  %576 = load i32, i32* %compute_mode, align 4, !dbg !8427
  %call1020 = call %struct.rtx_def* @gen_reg_rtx(i32 %576), !dbg !8428
  store %struct.rtx_def* %call1020, %struct.rtx_def** %target.addr, align 8, !dbg !8429
  br label %if.end1021, !dbg !8430

if.end1021:                                       ; preds = %if.then1019, %lor.lhs.false1013
  %577 = load i32, i32* %rem_flag.addr, align 4, !dbg !8431
  %tobool1022 = icmp ne i32 %577, 0, !dbg !8431
  br i1 %tobool1022, label %if.then1023, label %if.else1034, !dbg !8433

if.then1023:                                      ; preds = %if.end1021
  %578 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8434
  %579 = bitcast %struct.rtx_def* %578 to i32*, !dbg !8434
  %bf.load1024 = load i32, i32* %579, align 8, !dbg !8434
  %bf.clear1025 = and i32 %bf.load1024, 65535, !dbg !8434
  %cmp1026 = icmp eq i32 %bf.clear1025, 37, !dbg !8434
  br i1 %cmp1026, label %cond.true1028, label %cond.false1029, !dbg !8434

cond.true1028:                                    ; preds = %if.then1023
  %580 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8436
  br label %cond.end1031, !dbg !8434

cond.false1029:                                   ; preds = %if.then1023
  %581 = load i32, i32* %compute_mode, align 4, !dbg !8437
  %call1030 = call %struct.rtx_def* @gen_reg_rtx(i32 %581), !dbg !8438
  br label %cond.end1031, !dbg !8434

cond.end1031:                                     ; preds = %cond.false1029, %cond.true1028
  %cond1032 = phi %struct.rtx_def* [ %580, %cond.true1028 ], [ %call1030, %cond.false1029 ], !dbg !8434
  store %struct.rtx_def* %cond1032, %struct.rtx_def** %remainder, align 8, !dbg !8439
  %582 = load i32, i32* %compute_mode, align 4, !dbg !8440
  %call1033 = call %struct.rtx_def* @gen_reg_rtx(i32 %582), !dbg !8441
  store %struct.rtx_def* %call1033, %struct.rtx_def** %quotient, align 8, !dbg !8442
  br label %if.end1045, !dbg !8443

if.else1034:                                      ; preds = %if.end1021
  %583 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8444
  %584 = bitcast %struct.rtx_def* %583 to i32*, !dbg !8444
  %bf.load1035 = load i32, i32* %584, align 8, !dbg !8444
  %bf.clear1036 = and i32 %bf.load1035, 65535, !dbg !8444
  %cmp1037 = icmp eq i32 %bf.clear1036, 37, !dbg !8444
  br i1 %cmp1037, label %cond.true1039, label %cond.false1040, !dbg !8444

cond.true1039:                                    ; preds = %if.else1034
  %585 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8446
  br label %cond.end1042, !dbg !8444

cond.false1040:                                   ; preds = %if.else1034
  %586 = load i32, i32* %compute_mode, align 4, !dbg !8447
  %call1041 = call %struct.rtx_def* @gen_reg_rtx(i32 %586), !dbg !8448
  br label %cond.end1042, !dbg !8444

cond.end1042:                                     ; preds = %cond.false1040, %cond.true1039
  %cond1043 = phi %struct.rtx_def* [ %585, %cond.true1039 ], [ %call1041, %cond.false1040 ], !dbg !8444
  store %struct.rtx_def* %cond1043, %struct.rtx_def** %quotient, align 8, !dbg !8449
  %587 = load i32, i32* %compute_mode, align 4, !dbg !8450
  %call1044 = call %struct.rtx_def* @gen_reg_rtx(i32 %587), !dbg !8451
  store %struct.rtx_def* %call1044, %struct.rtx_def** %remainder, align 8, !dbg !8452
  br label %if.end1045

if.end1045:                                       ; preds = %cond.end1042, %cond.end1031
  %588 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8453
  %589 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8455
  %590 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8456
  %591 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8457
  %call1046 = call i32 @expand_twoval_binop(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33), %struct.rtx_def* %588, %struct.rtx_def* %589, %struct.rtx_def* %590, %struct.rtx_def* %591, i32 0), !dbg !8458
  %tobool1047 = icmp ne i32 %call1046, 0, !dbg !8458
  br i1 %tobool1047, label %if.then1048, label %if.end1058, !dbg !8459

if.then1048:                                      ; preds = %if.end1045
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !8460, metadata !DIExpression()), !dbg !8462
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !8463, metadata !DIExpression()), !dbg !8464
  %call1049 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8465
  store %struct.rtx_def* %call1049, %struct.rtx_def** %label, align 8, !dbg !8464
  %592 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8466
  %593 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8467
  %594 = load i32, i32* %compute_mode, align 4, !dbg !8468
  %595 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8469
  call void @do_cmp_and_jump(%struct.rtx_def* %592, %struct.rtx_def* %593, i32 81, i32 %594, %struct.rtx_def* %595), !dbg !8470
  %596 = load i32, i32* %compute_mode, align 4, !dbg !8471
  %597 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8472
  %598 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8473
  %call1050 = call %struct.rtx_def* @expand_binop(i32 %596, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %597, %struct.rtx_def* %598, %struct.rtx_def* null, i32 0, i32 2), !dbg !8474
  store %struct.rtx_def* %call1050, %struct.rtx_def** %tem, align 8, !dbg !8475
  %599 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !8476
  %600 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8477
  %601 = load i32, i32* %compute_mode, align 4, !dbg !8478
  %602 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8479
  call void @do_cmp_and_jump(%struct.rtx_def* %599, %struct.rtx_def* %600, i32 82, i32 %601, %struct.rtx_def* %602), !dbg !8480
  %603 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8481
  %604 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !8482
  call void @expand_dec(%struct.rtx_def* %603, %struct.rtx_def* %604), !dbg !8483
  %605 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8484
  %606 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8485
  call void @expand_inc(%struct.rtx_def* %605, %struct.rtx_def* %606), !dbg !8486
  %607 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8487
  %call1051 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %607), !dbg !8488
  %608 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !8489
  %609 = load i32, i32* %mode.addr, align 4, !dbg !8490
  %610 = load i32, i32* %rem_flag.addr, align 4, !dbg !8491
  %tobool1052 = icmp ne i32 %610, 0, !dbg !8491
  br i1 %tobool1052, label %cond.true1053, label %cond.false1054, !dbg !8491

cond.true1053:                                    ; preds = %if.then1048
  %611 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8492
  br label %cond.end1055, !dbg !8491

cond.false1054:                                   ; preds = %if.then1048
  %612 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8493
  br label %cond.end1055, !dbg !8491

cond.end1055:                                     ; preds = %cond.false1054, %cond.true1053
  %cond1056 = phi %struct.rtx_def* [ %611, %cond.true1053 ], [ %612, %cond.false1054 ], !dbg !8491
  %call1057 = call %struct.rtx_def* %608(i32 %609, %struct.rtx_def* %cond1056), !dbg !8489
  store %struct.rtx_def* %call1057, %struct.rtx_def** %retval, align 8, !dbg !8494
  br label %return, !dbg !8494

if.end1058:                                       ; preds = %if.end1045
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label1, metadata !8495, metadata !DIExpression()), !dbg !8497
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label2, metadata !8498, metadata !DIExpression()), !dbg !8499
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label3, metadata !8500, metadata !DIExpression()), !dbg !8501
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label4, metadata !8502, metadata !DIExpression()), !dbg !8503
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label5, metadata !8504, metadata !DIExpression()), !dbg !8505
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adjusted_op0, metadata !8506, metadata !DIExpression()), !dbg !8507
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem1059, metadata !8508, metadata !DIExpression()), !dbg !8509
  %613 = load i32, i32* %compute_mode, align 4, !dbg !8510
  %call1060 = call %struct.rtx_def* @gen_reg_rtx(i32 %613), !dbg !8511
  store %struct.rtx_def* %call1060, %struct.rtx_def** %quotient, align 8, !dbg !8512
  %614 = load i32, i32* %compute_mode, align 4, !dbg !8513
  %615 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8514
  %call1061 = call %struct.rtx_def* @copy_to_mode_reg(i32 %614, %struct.rtx_def* %615), !dbg !8515
  store %struct.rtx_def* %call1061, %struct.rtx_def** %adjusted_op0, align 8, !dbg !8516
  %call1062 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8517
  store %struct.rtx_def* %call1062, %struct.rtx_def** %label1, align 8, !dbg !8518
  %call1063 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8519
  store %struct.rtx_def* %call1063, %struct.rtx_def** %label2, align 8, !dbg !8520
  %call1064 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8521
  store %struct.rtx_def* %call1064, %struct.rtx_def** %label3, align 8, !dbg !8522
  %call1065 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8523
  store %struct.rtx_def* %call1065, %struct.rtx_def** %label4, align 8, !dbg !8524
  %call1066 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8525
  store %struct.rtx_def* %call1066, %struct.rtx_def** %label5, align 8, !dbg !8526
  %616 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8527
  %617 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8528
  %618 = load i32, i32* %compute_mode, align 4, !dbg !8529
  %619 = load %struct.rtx_def*, %struct.rtx_def** %label2, align 8, !dbg !8530
  call void @do_cmp_and_jump(%struct.rtx_def* %616, %struct.rtx_def* %617, i32 85, i32 %618, %struct.rtx_def* %619), !dbg !8531
  %620 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op0, align 8, !dbg !8532
  %621 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8533
  %622 = load i32, i32* %compute_mode, align 4, !dbg !8534
  %623 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8, !dbg !8535
  call void @do_cmp_and_jump(%struct.rtx_def* %620, %struct.rtx_def* %621, i32 85, i32 %622, %struct.rtx_def* %623), !dbg !8536
  %624 = load i32, i32* %compute_mode, align 4, !dbg !8537
  %625 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op0, align 8, !dbg !8538
  %626 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8539
  %627 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8540
  %call1067 = call %struct.rtx_def* @expand_binop(i32 %624, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), %struct.rtx_def* %625, %struct.rtx_def* %626, %struct.rtx_def* %627, i32 0, i32 3), !dbg !8541
  store %struct.rtx_def* %call1067, %struct.rtx_def** %tem1059, align 8, !dbg !8542
  %628 = load %struct.rtx_def*, %struct.rtx_def** %tem1059, align 8, !dbg !8543
  %629 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8545
  %cmp1068 = icmp ne %struct.rtx_def* %628, %629, !dbg !8546
  br i1 %cmp1068, label %if.then1070, label %if.end1072, !dbg !8547

if.then1070:                                      ; preds = %if.end1058
  %630 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8548
  %631 = load %struct.rtx_def*, %struct.rtx_def** %tem1059, align 8, !dbg !8549
  %call1071 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %630, %struct.rtx_def* %631), !dbg !8550
  br label %if.end1072, !dbg !8550

if.end1072:                                       ; preds = %if.then1070, %if.end1058
  %632 = load %struct.rtx_def*, %struct.rtx_def** %label5, align 8, !dbg !8551
  %call1073 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %632), !dbg !8552
  %call1074 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call1073), !dbg !8553
  %call1075 = call %struct.rtx_def* @emit_barrier(), !dbg !8554
  %633 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8, !dbg !8555
  %call1076 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %633), !dbg !8556
  %634 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op0, align 8, !dbg !8557
  %635 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !8558
  call void @expand_inc(%struct.rtx_def* %634, %struct.rtx_def* %635), !dbg !8559
  %636 = load %struct.rtx_def*, %struct.rtx_def** %label4, align 8, !dbg !8560
  %call1077 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %636), !dbg !8561
  %call1078 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call1077), !dbg !8562
  %call1079 = call %struct.rtx_def* @emit_barrier(), !dbg !8563
  %637 = load %struct.rtx_def*, %struct.rtx_def** %label2, align 8, !dbg !8564
  %call1080 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %637), !dbg !8565
  %638 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op0, align 8, !dbg !8566
  %639 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8567
  %640 = load i32, i32* %compute_mode, align 4, !dbg !8568
  %641 = load %struct.rtx_def*, %struct.rtx_def** %label3, align 8, !dbg !8569
  call void @do_cmp_and_jump(%struct.rtx_def* %638, %struct.rtx_def* %639, i32 83, i32 %640, %struct.rtx_def* %641), !dbg !8570
  %642 = load i32, i32* %compute_mode, align 4, !dbg !8571
  %643 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op0, align 8, !dbg !8572
  %644 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8573
  %645 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8574
  %call1081 = call %struct.rtx_def* @expand_binop(i32 %642, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), %struct.rtx_def* %643, %struct.rtx_def* %644, %struct.rtx_def* %645, i32 0, i32 3), !dbg !8575
  store %struct.rtx_def* %call1081, %struct.rtx_def** %tem1059, align 8, !dbg !8576
  %646 = load %struct.rtx_def*, %struct.rtx_def** %tem1059, align 8, !dbg !8577
  %647 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8579
  %cmp1082 = icmp ne %struct.rtx_def* %646, %647, !dbg !8580
  br i1 %cmp1082, label %if.then1084, label %if.end1086, !dbg !8581

if.then1084:                                      ; preds = %if.end1072
  %648 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8582
  %649 = load %struct.rtx_def*, %struct.rtx_def** %tem1059, align 8, !dbg !8583
  %call1085 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %648, %struct.rtx_def* %649), !dbg !8584
  br label %if.end1086, !dbg !8584

if.end1086:                                       ; preds = %if.then1084, %if.end1072
  %650 = load %struct.rtx_def*, %struct.rtx_def** %label5, align 8, !dbg !8585
  %call1087 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %650), !dbg !8586
  %call1088 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call1087), !dbg !8587
  %call1089 = call %struct.rtx_def* @emit_barrier(), !dbg !8588
  %651 = load %struct.rtx_def*, %struct.rtx_def** %label3, align 8, !dbg !8589
  %call1090 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %651), !dbg !8590
  %652 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op0, align 8, !dbg !8591
  %653 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !8592
  call void @expand_dec(%struct.rtx_def* %652, %struct.rtx_def* %653), !dbg !8593
  %654 = load %struct.rtx_def*, %struct.rtx_def** %label4, align 8, !dbg !8594
  %call1091 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %654), !dbg !8595
  %655 = load i32, i32* %compute_mode, align 4, !dbg !8596
  %656 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op0, align 8, !dbg !8597
  %657 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8598
  %658 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8599
  %call1092 = call %struct.rtx_def* @expand_binop(i32 %655, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), %struct.rtx_def* %656, %struct.rtx_def* %657, %struct.rtx_def* %658, i32 0, i32 3), !dbg !8600
  store %struct.rtx_def* %call1092, %struct.rtx_def** %tem1059, align 8, !dbg !8601
  %659 = load %struct.rtx_def*, %struct.rtx_def** %tem1059, align 8, !dbg !8602
  %660 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8604
  %cmp1093 = icmp ne %struct.rtx_def* %659, %660, !dbg !8605
  br i1 %cmp1093, label %if.then1095, label %if.end1097, !dbg !8606

if.then1095:                                      ; preds = %if.end1086
  %661 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8607
  %662 = load %struct.rtx_def*, %struct.rtx_def** %tem1059, align 8, !dbg !8608
  %call1096 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %661, %struct.rtx_def* %662), !dbg !8609
  br label %if.end1097, !dbg !8609

if.end1097:                                       ; preds = %if.then1095, %if.end1086
  %663 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8610
  %664 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !8611
  call void @expand_dec(%struct.rtx_def* %663, %struct.rtx_def* %664), !dbg !8612
  %665 = load %struct.rtx_def*, %struct.rtx_def** %label5, align 8, !dbg !8613
  %call1098 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %665), !dbg !8614
  br label %sw.epilog, !dbg !8615

sw.bb1099:                                        ; preds = %if.then295, %if.then295
  %666 = load i32, i32* %unsignedp.addr, align 4, !dbg !8616
  %tobool1100 = icmp ne i32 %666, 0, !dbg !8616
  br i1 %tobool1100, label %if.then1101, label %if.else1209, !dbg !8618

if.then1101:                                      ; preds = %sw.bb1099
  %667 = load i32, i32* %op1_is_constant, align 4, !dbg !8619
  %tobool1102 = icmp ne i32 %667, 0, !dbg !8619
  br i1 %tobool1102, label %land.lhs.true1103, label %if.end1140, !dbg !8622

land.lhs.true1103:                                ; preds = %if.then1101
  %668 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8623
  %u1104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %668, i32 0, i32 1, !dbg !8623
  %hwint1105 = bitcast %union.u* %u1104 to [1 x i64]*, !dbg !8623
  %arrayidx1106 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint1105, i64 0, i64 0, !dbg !8623
  %669 = load i64, i64* %arrayidx1106, align 8, !dbg !8623
  %670 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8623
  %u1107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %670, i32 0, i32 1, !dbg !8623
  %hwint1108 = bitcast %union.u* %u1107 to [1 x i64]*, !dbg !8623
  %arrayidx1109 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint1108, i64 0, i64 0, !dbg !8623
  %671 = load i64, i64* %arrayidx1109, align 8, !dbg !8623
  %sub1110 = sub nsw i64 %671, 1, !dbg !8623
  %and1111 = and i64 %669, %sub1110, !dbg !8623
  %cmp1112 = icmp eq i64 %and1111, 0, !dbg !8623
  br i1 %cmp1112, label %if.then1114, label %if.end1140, !dbg !8624

if.then1114:                                      ; preds = %land.lhs.true1103
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t11115, metadata !8625, metadata !DIExpression()), !dbg !8627
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t21116, metadata !8628, metadata !DIExpression()), !dbg !8629
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t31117, metadata !8630, metadata !DIExpression()), !dbg !8631
  call void @llvm.dbg.declare(metadata i64* %d1118, metadata !8632, metadata !DIExpression()), !dbg !8633
  %672 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8634
  %u1119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %672, i32 0, i32 1, !dbg !8634
  %hwint1120 = bitcast %union.u* %u1119 to [1 x i64]*, !dbg !8634
  %arrayidx1121 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint1120, i64 0, i64 0, !dbg !8634
  %673 = load i64, i64* %arrayidx1121, align 8, !dbg !8634
  store i64 %673, i64* %d1118, align 8, !dbg !8633
  %674 = load i32, i32* %compute_mode, align 4, !dbg !8635
  %675 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8636
  %676 = load i64, i64* %d1118, align 8, !dbg !8637
  %call1122 = call i32 @floor_log2(i64 %676), !dbg !8638
  %conv1123 = sext i32 %call1122 to i64, !dbg !8638
  %call1124 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv1123), !dbg !8639
  %677 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !8640
  %call1125 = call %struct.rtx_def* @expand_shift(i32 84, i32 %674, %struct.rtx_def* %675, %union.tree_node* %call1124, %struct.rtx_def* %677, i32 1), !dbg !8641
  store %struct.rtx_def* %call1125, %struct.rtx_def** %t11115, align 8, !dbg !8642
  %678 = load i32, i32* %compute_mode, align 4, !dbg !8643
  %679 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8644
  %680 = load i64, i64* %d1118, align 8, !dbg !8645
  %sub1126 = sub i64 %680, 1, !dbg !8645
  %call1127 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub1126), !dbg !8645
  %call1128 = call %struct.rtx_def* @expand_binop(i32 %678, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %679, %struct.rtx_def* %call1127, %struct.rtx_def* null, i32 1, i32 3), !dbg !8646
  store %struct.rtx_def* %call1128, %struct.rtx_def** %t21116, align 8, !dbg !8647
  %681 = load i32, i32* %compute_mode, align 4, !dbg !8648
  %call1129 = call %struct.rtx_def* @gen_reg_rtx(i32 %681), !dbg !8649
  store %struct.rtx_def* %call1129, %struct.rtx_def** %t31117, align 8, !dbg !8650
  %682 = load %struct.rtx_def*, %struct.rtx_def** %t31117, align 8, !dbg !8651
  %683 = load %struct.rtx_def*, %struct.rtx_def** %t21116, align 8, !dbg !8652
  %684 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8653
  %685 = load i32, i32* %compute_mode, align 4, !dbg !8654
  %call1130 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %682, i32 80, %struct.rtx_def* %683, %struct.rtx_def* %684, i32 %685, i32 1, i32 1), !dbg !8655
  store %struct.rtx_def* %call1130, %struct.rtx_def** %t31117, align 8, !dbg !8656
  %686 = load %struct.rtx_def*, %struct.rtx_def** %t31117, align 8, !dbg !8657
  %cmp1131 = icmp eq %struct.rtx_def* %686, null, !dbg !8659
  br i1 %cmp1131, label %if.then1133, label %if.else1136, !dbg !8660

if.then1133:                                      ; preds = %if.then1114
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lab, metadata !8661, metadata !DIExpression()), !dbg !8663
  %call1134 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8664
  store %struct.rtx_def* %call1134, %struct.rtx_def** %lab, align 8, !dbg !8665
  %687 = load %struct.rtx_def*, %struct.rtx_def** %t21116, align 8, !dbg !8666
  %688 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8667
  %689 = load i32, i32* %compute_mode, align 4, !dbg !8668
  %690 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8, !dbg !8669
  call void @do_cmp_and_jump(%struct.rtx_def* %687, %struct.rtx_def* %688, i32 81, i32 %689, %struct.rtx_def* %690), !dbg !8670
  %691 = load %struct.rtx_def*, %struct.rtx_def** %t11115, align 8, !dbg !8671
  %692 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !8672
  call void @expand_inc(%struct.rtx_def* %691, %struct.rtx_def* %692), !dbg !8673
  %693 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8, !dbg !8674
  %call1135 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %693), !dbg !8675
  %694 = load %struct.rtx_def*, %struct.rtx_def** %t11115, align 8, !dbg !8676
  store %struct.rtx_def* %694, %struct.rtx_def** %quotient, align 8, !dbg !8677
  br label %if.end1139, !dbg !8678

if.else1136:                                      ; preds = %if.then1114
  %695 = load i32, i32* %compute_mode, align 4, !dbg !8679
  %696 = load %struct.rtx_def*, %struct.rtx_def** %t11115, align 8, !dbg !8679
  %697 = load %struct.rtx_def*, %struct.rtx_def** %t31117, align 8, !dbg !8679
  %call1137 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %695, %struct.rtx_def* %696, %struct.rtx_def* %697), !dbg !8679
  %698 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !8680
  %call1138 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call1137, %struct.rtx_def* %698), !dbg !8681
  store %struct.rtx_def* %call1138, %struct.rtx_def** %quotient, align 8, !dbg !8682
  br label %if.end1139

if.end1139:                                       ; preds = %if.else1136, %if.then1133
  br label %sw.epilog, !dbg !8683

if.end1140:                                       ; preds = %land.lhs.true1103, %if.then1101
  %699 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8684
  %cmp1141 = icmp eq %struct.rtx_def* %699, null, !dbg !8686
  br i1 %cmp1141, label %if.then1149, label %lor.lhs.false1143, !dbg !8687

lor.lhs.false1143:                                ; preds = %if.end1140
  %700 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8688
  %701 = bitcast %struct.rtx_def* %700 to i32*, !dbg !8688
  %bf.load1144 = load i32, i32* %701, align 8, !dbg !8688
  %bf.lshr1145 = lshr i32 %bf.load1144, 16, !dbg !8688
  %bf.clear1146 = and i32 %bf.lshr1145, 255, !dbg !8688
  %702 = load i32, i32* %compute_mode, align 4, !dbg !8689
  %cmp1147 = icmp ne i32 %bf.clear1146, %702, !dbg !8690
  br i1 %cmp1147, label %if.then1149, label %if.end1151, !dbg !8691

if.then1149:                                      ; preds = %lor.lhs.false1143, %if.end1140
  %703 = load i32, i32* %compute_mode, align 4, !dbg !8692
  %call1150 = call %struct.rtx_def* @gen_reg_rtx(i32 %703), !dbg !8693
  store %struct.rtx_def* %call1150, %struct.rtx_def** %target.addr, align 8, !dbg !8694
  br label %if.end1151, !dbg !8695

if.end1151:                                       ; preds = %if.then1149, %lor.lhs.false1143
  %704 = load i32, i32* %rem_flag.addr, align 4, !dbg !8696
  %tobool1152 = icmp ne i32 %704, 0, !dbg !8696
  br i1 %tobool1152, label %if.then1153, label %if.else1164, !dbg !8698

if.then1153:                                      ; preds = %if.end1151
  %705 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8699
  %706 = bitcast %struct.rtx_def* %705 to i32*, !dbg !8699
  %bf.load1154 = load i32, i32* %706, align 8, !dbg !8699
  %bf.clear1155 = and i32 %bf.load1154, 65535, !dbg !8699
  %cmp1156 = icmp eq i32 %bf.clear1155, 37, !dbg !8699
  br i1 %cmp1156, label %cond.true1158, label %cond.false1159, !dbg !8699

cond.true1158:                                    ; preds = %if.then1153
  %707 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8701
  br label %cond.end1161, !dbg !8699

cond.false1159:                                   ; preds = %if.then1153
  %708 = load i32, i32* %compute_mode, align 4, !dbg !8702
  %call1160 = call %struct.rtx_def* @gen_reg_rtx(i32 %708), !dbg !8703
  br label %cond.end1161, !dbg !8699

cond.end1161:                                     ; preds = %cond.false1159, %cond.true1158
  %cond1162 = phi %struct.rtx_def* [ %707, %cond.true1158 ], [ %call1160, %cond.false1159 ], !dbg !8699
  store %struct.rtx_def* %cond1162, %struct.rtx_def** %remainder, align 8, !dbg !8704
  %709 = load i32, i32* %compute_mode, align 4, !dbg !8705
  %call1163 = call %struct.rtx_def* @gen_reg_rtx(i32 %709), !dbg !8706
  store %struct.rtx_def* %call1163, %struct.rtx_def** %quotient, align 8, !dbg !8707
  br label %if.end1175, !dbg !8708

if.else1164:                                      ; preds = %if.end1151
  %710 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8709
  %711 = bitcast %struct.rtx_def* %710 to i32*, !dbg !8709
  %bf.load1165 = load i32, i32* %711, align 8, !dbg !8709
  %bf.clear1166 = and i32 %bf.load1165, 65535, !dbg !8709
  %cmp1167 = icmp eq i32 %bf.clear1166, 37, !dbg !8709
  br i1 %cmp1167, label %cond.true1169, label %cond.false1170, !dbg !8709

cond.true1169:                                    ; preds = %if.else1164
  %712 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8711
  br label %cond.end1172, !dbg !8709

cond.false1170:                                   ; preds = %if.else1164
  %713 = load i32, i32* %compute_mode, align 4, !dbg !8712
  %call1171 = call %struct.rtx_def* @gen_reg_rtx(i32 %713), !dbg !8713
  br label %cond.end1172, !dbg !8709

cond.end1172:                                     ; preds = %cond.false1170, %cond.true1169
  %cond1173 = phi %struct.rtx_def* [ %712, %cond.true1169 ], [ %call1171, %cond.false1170 ], !dbg !8709
  store %struct.rtx_def* %cond1173, %struct.rtx_def** %quotient, align 8, !dbg !8714
  %714 = load i32, i32* %compute_mode, align 4, !dbg !8715
  %call1174 = call %struct.rtx_def* @gen_reg_rtx(i32 %714), !dbg !8716
  store %struct.rtx_def* %call1174, %struct.rtx_def** %remainder, align 8, !dbg !8717
  br label %if.end1175

if.end1175:                                       ; preds = %cond.end1172, %cond.end1161
  %715 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8718
  %716 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8720
  %717 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8721
  %718 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8722
  %call1176 = call i32 @expand_twoval_binop(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 35), %struct.rtx_def* %715, %struct.rtx_def* %716, %struct.rtx_def* %717, %struct.rtx_def* %718, i32 1), !dbg !8723
  %tobool1177 = icmp ne i32 %call1176, 0, !dbg !8723
  br i1 %tobool1177, label %if.then1178, label %if.end1188, !dbg !8724

if.then1178:                                      ; preds = %if.end1175
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label1179, metadata !8725, metadata !DIExpression()), !dbg !8727
  %call1180 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8728
  store %struct.rtx_def* %call1180, %struct.rtx_def** %label1179, align 8, !dbg !8727
  %719 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8729
  %720 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8730
  %721 = load i32, i32* %compute_mode, align 4, !dbg !8731
  %722 = load %struct.rtx_def*, %struct.rtx_def** %label1179, align 8, !dbg !8732
  call void @do_cmp_and_jump(%struct.rtx_def* %719, %struct.rtx_def* %720, i32 81, i32 %721, %struct.rtx_def* %722), !dbg !8733
  %723 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8734
  %724 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !8735
  call void @expand_inc(%struct.rtx_def* %723, %struct.rtx_def* %724), !dbg !8736
  %725 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8737
  %726 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8738
  call void @expand_dec(%struct.rtx_def* %725, %struct.rtx_def* %726), !dbg !8739
  %727 = load %struct.rtx_def*, %struct.rtx_def** %label1179, align 8, !dbg !8740
  %call1181 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %727), !dbg !8741
  %728 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !8742
  %729 = load i32, i32* %mode.addr, align 4, !dbg !8743
  %730 = load i32, i32* %rem_flag.addr, align 4, !dbg !8744
  %tobool1182 = icmp ne i32 %730, 0, !dbg !8744
  br i1 %tobool1182, label %cond.true1183, label %cond.false1184, !dbg !8744

cond.true1183:                                    ; preds = %if.then1178
  %731 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8745
  br label %cond.end1185, !dbg !8744

cond.false1184:                                   ; preds = %if.then1178
  %732 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8746
  br label %cond.end1185, !dbg !8744

cond.end1185:                                     ; preds = %cond.false1184, %cond.true1183
  %cond1186 = phi %struct.rtx_def* [ %731, %cond.true1183 ], [ %732, %cond.false1184 ], !dbg !8744
  %call1187 = call %struct.rtx_def* %728(i32 %729, %struct.rtx_def* %cond1186), !dbg !8742
  store %struct.rtx_def* %call1187, %struct.rtx_def** %retval, align 8, !dbg !8747
  br label %return, !dbg !8747

if.end1188:                                       ; preds = %if.end1175
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label11189, metadata !8748, metadata !DIExpression()), !dbg !8750
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label21190, metadata !8751, metadata !DIExpression()), !dbg !8752
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adjusted_op01191, metadata !8753, metadata !DIExpression()), !dbg !8754
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem1192, metadata !8755, metadata !DIExpression()), !dbg !8756
  %733 = load i32, i32* %compute_mode, align 4, !dbg !8757
  %call1193 = call %struct.rtx_def* @gen_reg_rtx(i32 %733), !dbg !8758
  store %struct.rtx_def* %call1193, %struct.rtx_def** %quotient, align 8, !dbg !8759
  %734 = load i32, i32* %compute_mode, align 4, !dbg !8760
  %735 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8761
  %call1194 = call %struct.rtx_def* @copy_to_mode_reg(i32 %734, %struct.rtx_def* %735), !dbg !8762
  store %struct.rtx_def* %call1194, %struct.rtx_def** %adjusted_op01191, align 8, !dbg !8763
  %call1195 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8764
  store %struct.rtx_def* %call1195, %struct.rtx_def** %label11189, align 8, !dbg !8765
  %call1196 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8766
  store %struct.rtx_def* %call1196, %struct.rtx_def** %label21190, align 8, !dbg !8767
  %736 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op01191, align 8, !dbg !8768
  %737 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8769
  %738 = load i32, i32* %compute_mode, align 4, !dbg !8770
  %739 = load %struct.rtx_def*, %struct.rtx_def** %label11189, align 8, !dbg !8771
  call void @do_cmp_and_jump(%struct.rtx_def* %736, %struct.rtx_def* %737, i32 80, i32 %738, %struct.rtx_def* %739), !dbg !8772
  %740 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8773
  %741 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8774
  %call1197 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %740, %struct.rtx_def* %741), !dbg !8775
  %742 = load %struct.rtx_def*, %struct.rtx_def** %label21190, align 8, !dbg !8776
  %call1198 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %742), !dbg !8777
  %call1199 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call1198), !dbg !8778
  %call1200 = call %struct.rtx_def* @emit_barrier(), !dbg !8779
  %743 = load %struct.rtx_def*, %struct.rtx_def** %label11189, align 8, !dbg !8780
  %call1201 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %743), !dbg !8781
  %744 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op01191, align 8, !dbg !8782
  %745 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !8783
  call void @expand_dec(%struct.rtx_def* %744, %struct.rtx_def* %745), !dbg !8784
  %746 = load i32, i32* %compute_mode, align 4, !dbg !8785
  %747 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op01191, align 8, !dbg !8786
  %748 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8787
  %749 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8788
  %call1202 = call %struct.rtx_def* @expand_binop(i32 %746, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 34), %struct.rtx_def* %747, %struct.rtx_def* %748, %struct.rtx_def* %749, i32 1, i32 3), !dbg !8789
  store %struct.rtx_def* %call1202, %struct.rtx_def** %tem1192, align 8, !dbg !8790
  %750 = load %struct.rtx_def*, %struct.rtx_def** %tem1192, align 8, !dbg !8791
  %751 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8793
  %cmp1203 = icmp ne %struct.rtx_def* %750, %751, !dbg !8794
  br i1 %cmp1203, label %if.then1205, label %if.end1207, !dbg !8795

if.then1205:                                      ; preds = %if.end1188
  %752 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8796
  %753 = load %struct.rtx_def*, %struct.rtx_def** %tem1192, align 8, !dbg !8797
  %call1206 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %752, %struct.rtx_def* %753), !dbg !8798
  br label %if.end1207, !dbg !8798

if.end1207:                                       ; preds = %if.then1205, %if.end1188
  %754 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8799
  %755 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !8800
  call void @expand_inc(%struct.rtx_def* %754, %struct.rtx_def* %755), !dbg !8801
  %756 = load %struct.rtx_def*, %struct.rtx_def** %label21190, align 8, !dbg !8802
  %call1208 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %756), !dbg !8803
  br label %if.end1352, !dbg !8804

if.else1209:                                      ; preds = %sw.bb1099
  %757 = load i32, i32* %op1_is_constant, align 4, !dbg !8805
  %tobool1210 = icmp ne i32 %757, 0, !dbg !8805
  br i1 %tobool1210, label %land.lhs.true1211, label %if.end1255, !dbg !8808

land.lhs.true1211:                                ; preds = %if.else1209
  %758 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8809
  %u1212 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %758, i32 0, i32 1, !dbg !8809
  %hwint1213 = bitcast %union.u* %u1212 to [1 x i64]*, !dbg !8809
  %arrayidx1214 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint1213, i64 0, i64 0, !dbg !8809
  %759 = load i64, i64* %arrayidx1214, align 8, !dbg !8809
  %760 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8809
  %u1215 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %760, i32 0, i32 1, !dbg !8809
  %hwint1216 = bitcast %union.u* %u1215 to [1 x i64]*, !dbg !8809
  %arrayidx1217 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint1216, i64 0, i64 0, !dbg !8809
  %761 = load i64, i64* %arrayidx1217, align 8, !dbg !8809
  %sub1218 = sub nsw i64 %761, 1, !dbg !8809
  %and1219 = and i64 %759, %sub1218, !dbg !8809
  %cmp1220 = icmp eq i64 %and1219, 0, !dbg !8809
  br i1 %cmp1220, label %land.lhs.true1222, label %if.end1255, !dbg !8810

land.lhs.true1222:                                ; preds = %land.lhs.true1211
  %762 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8811
  %u1223 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %762, i32 0, i32 1, !dbg !8811
  %hwint1224 = bitcast %union.u* %u1223 to [1 x i64]*, !dbg !8811
  %arrayidx1225 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint1224, i64 0, i64 0, !dbg !8811
  %763 = load i64, i64* %arrayidx1225, align 8, !dbg !8811
  %cmp1226 = icmp sge i64 %763, 0, !dbg !8812
  br i1 %cmp1226, label %if.then1228, label %if.end1255, !dbg !8813

if.then1228:                                      ; preds = %land.lhs.true1222
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t11229, metadata !8814, metadata !DIExpression()), !dbg !8816
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t21230, metadata !8817, metadata !DIExpression()), !dbg !8818
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t31231, metadata !8819, metadata !DIExpression()), !dbg !8820
  call void @llvm.dbg.declare(metadata i64* %d1232, metadata !8821, metadata !DIExpression()), !dbg !8822
  %764 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8823
  %u1233 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %764, i32 0, i32 1, !dbg !8823
  %hwint1234 = bitcast %union.u* %u1233 to [1 x i64]*, !dbg !8823
  %arrayidx1235 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint1234, i64 0, i64 0, !dbg !8823
  %765 = load i64, i64* %arrayidx1235, align 8, !dbg !8823
  store i64 %765, i64* %d1232, align 8, !dbg !8822
  %766 = load i32, i32* %compute_mode, align 4, !dbg !8824
  %767 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8825
  %768 = load i64, i64* %d1232, align 8, !dbg !8826
  %call1236 = call i32 @floor_log2(i64 %768), !dbg !8827
  %conv1237 = sext i32 %call1236 to i64, !dbg !8827
  %call1238 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv1237), !dbg !8828
  %769 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !8829
  %call1239 = call %struct.rtx_def* @expand_shift(i32 84, i32 %766, %struct.rtx_def* %767, %union.tree_node* %call1238, %struct.rtx_def* %769, i32 0), !dbg !8830
  store %struct.rtx_def* %call1239, %struct.rtx_def** %t11229, align 8, !dbg !8831
  %770 = load i32, i32* %compute_mode, align 4, !dbg !8832
  %771 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8833
  %772 = load i64, i64* %d1232, align 8, !dbg !8834
  %sub1240 = sub i64 %772, 1, !dbg !8834
  %call1241 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub1240), !dbg !8834
  %call1242 = call %struct.rtx_def* @expand_binop(i32 %770, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %771, %struct.rtx_def* %call1241, %struct.rtx_def* null, i32 1, i32 3), !dbg !8835
  store %struct.rtx_def* %call1242, %struct.rtx_def** %t21230, align 8, !dbg !8836
  %773 = load i32, i32* %compute_mode, align 4, !dbg !8837
  %call1243 = call %struct.rtx_def* @gen_reg_rtx(i32 %773), !dbg !8838
  store %struct.rtx_def* %call1243, %struct.rtx_def** %t31231, align 8, !dbg !8839
  %774 = load %struct.rtx_def*, %struct.rtx_def** %t31231, align 8, !dbg !8840
  %775 = load %struct.rtx_def*, %struct.rtx_def** %t21230, align 8, !dbg !8841
  %776 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8842
  %777 = load i32, i32* %compute_mode, align 4, !dbg !8843
  %call1244 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %774, i32 80, %struct.rtx_def* %775, %struct.rtx_def* %776, i32 %777, i32 1, i32 1), !dbg !8844
  store %struct.rtx_def* %call1244, %struct.rtx_def** %t31231, align 8, !dbg !8845
  %778 = load %struct.rtx_def*, %struct.rtx_def** %t31231, align 8, !dbg !8846
  %cmp1245 = icmp eq %struct.rtx_def* %778, null, !dbg !8848
  br i1 %cmp1245, label %if.then1247, label %if.else1251, !dbg !8849

if.then1247:                                      ; preds = %if.then1228
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lab1248, metadata !8850, metadata !DIExpression()), !dbg !8852
  %call1249 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8853
  store %struct.rtx_def* %call1249, %struct.rtx_def** %lab1248, align 8, !dbg !8854
  %779 = load %struct.rtx_def*, %struct.rtx_def** %t21230, align 8, !dbg !8855
  %780 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8856
  %781 = load i32, i32* %compute_mode, align 4, !dbg !8857
  %782 = load %struct.rtx_def*, %struct.rtx_def** %lab1248, align 8, !dbg !8858
  call void @do_cmp_and_jump(%struct.rtx_def* %779, %struct.rtx_def* %780, i32 81, i32 %781, %struct.rtx_def* %782), !dbg !8859
  %783 = load %struct.rtx_def*, %struct.rtx_def** %t11229, align 8, !dbg !8860
  %784 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !8861
  call void @expand_inc(%struct.rtx_def* %783, %struct.rtx_def* %784), !dbg !8862
  %785 = load %struct.rtx_def*, %struct.rtx_def** %lab1248, align 8, !dbg !8863
  %call1250 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %785), !dbg !8864
  %786 = load %struct.rtx_def*, %struct.rtx_def** %t11229, align 8, !dbg !8865
  store %struct.rtx_def* %786, %struct.rtx_def** %quotient, align 8, !dbg !8866
  br label %if.end1254, !dbg !8867

if.else1251:                                      ; preds = %if.then1228
  %787 = load i32, i32* %compute_mode, align 4, !dbg !8868
  %788 = load %struct.rtx_def*, %struct.rtx_def** %t11229, align 8, !dbg !8868
  %789 = load %struct.rtx_def*, %struct.rtx_def** %t31231, align 8, !dbg !8868
  %call1252 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %787, %struct.rtx_def* %788, %struct.rtx_def* %789), !dbg !8868
  %790 = load %struct.rtx_def*, %struct.rtx_def** %tquotient, align 8, !dbg !8869
  %call1253 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call1252, %struct.rtx_def* %790), !dbg !8870
  store %struct.rtx_def* %call1253, %struct.rtx_def** %quotient, align 8, !dbg !8871
  br label %if.end1254

if.end1254:                                       ; preds = %if.else1251, %if.then1247
  br label %sw.epilog, !dbg !8872

if.end1255:                                       ; preds = %land.lhs.true1222, %land.lhs.true1211, %if.else1209
  %791 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8873
  %cmp1256 = icmp eq %struct.rtx_def* %791, null, !dbg !8875
  br i1 %cmp1256, label %if.then1264, label %lor.lhs.false1258, !dbg !8876

lor.lhs.false1258:                                ; preds = %if.end1255
  %792 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8877
  %793 = bitcast %struct.rtx_def* %792 to i32*, !dbg !8877
  %bf.load1259 = load i32, i32* %793, align 8, !dbg !8877
  %bf.lshr1260 = lshr i32 %bf.load1259, 16, !dbg !8877
  %bf.clear1261 = and i32 %bf.lshr1260, 255, !dbg !8877
  %794 = load i32, i32* %compute_mode, align 4, !dbg !8878
  %cmp1262 = icmp ne i32 %bf.clear1261, %794, !dbg !8879
  br i1 %cmp1262, label %if.then1264, label %if.end1266, !dbg !8880

if.then1264:                                      ; preds = %lor.lhs.false1258, %if.end1255
  %795 = load i32, i32* %compute_mode, align 4, !dbg !8881
  %call1265 = call %struct.rtx_def* @gen_reg_rtx(i32 %795), !dbg !8882
  store %struct.rtx_def* %call1265, %struct.rtx_def** %target.addr, align 8, !dbg !8883
  br label %if.end1266, !dbg !8884

if.end1266:                                       ; preds = %if.then1264, %lor.lhs.false1258
  %796 = load i32, i32* %rem_flag.addr, align 4, !dbg !8885
  %tobool1267 = icmp ne i32 %796, 0, !dbg !8885
  br i1 %tobool1267, label %if.then1268, label %if.else1279, !dbg !8887

if.then1268:                                      ; preds = %if.end1266
  %797 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8888
  %798 = bitcast %struct.rtx_def* %797 to i32*, !dbg !8888
  %bf.load1269 = load i32, i32* %798, align 8, !dbg !8888
  %bf.clear1270 = and i32 %bf.load1269, 65535, !dbg !8888
  %cmp1271 = icmp eq i32 %bf.clear1270, 37, !dbg !8888
  br i1 %cmp1271, label %cond.true1273, label %cond.false1274, !dbg !8888

cond.true1273:                                    ; preds = %if.then1268
  %799 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8890
  br label %cond.end1276, !dbg !8888

cond.false1274:                                   ; preds = %if.then1268
  %800 = load i32, i32* %compute_mode, align 4, !dbg !8891
  %call1275 = call %struct.rtx_def* @gen_reg_rtx(i32 %800), !dbg !8892
  br label %cond.end1276, !dbg !8888

cond.end1276:                                     ; preds = %cond.false1274, %cond.true1273
  %cond1277 = phi %struct.rtx_def* [ %799, %cond.true1273 ], [ %call1275, %cond.false1274 ], !dbg !8888
  store %struct.rtx_def* %cond1277, %struct.rtx_def** %remainder, align 8, !dbg !8893
  %801 = load i32, i32* %compute_mode, align 4, !dbg !8894
  %call1278 = call %struct.rtx_def* @gen_reg_rtx(i32 %801), !dbg !8895
  store %struct.rtx_def* %call1278, %struct.rtx_def** %quotient, align 8, !dbg !8896
  br label %if.end1290, !dbg !8897

if.else1279:                                      ; preds = %if.end1266
  %802 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8898
  %803 = bitcast %struct.rtx_def* %802 to i32*, !dbg !8898
  %bf.load1280 = load i32, i32* %803, align 8, !dbg !8898
  %bf.clear1281 = and i32 %bf.load1280, 65535, !dbg !8898
  %cmp1282 = icmp eq i32 %bf.clear1281, 37, !dbg !8898
  br i1 %cmp1282, label %cond.true1284, label %cond.false1285, !dbg !8898

cond.true1284:                                    ; preds = %if.else1279
  %804 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8900
  br label %cond.end1287, !dbg !8898

cond.false1285:                                   ; preds = %if.else1279
  %805 = load i32, i32* %compute_mode, align 4, !dbg !8901
  %call1286 = call %struct.rtx_def* @gen_reg_rtx(i32 %805), !dbg !8902
  br label %cond.end1287, !dbg !8898

cond.end1287:                                     ; preds = %cond.false1285, %cond.true1284
  %cond1288 = phi %struct.rtx_def* [ %804, %cond.true1284 ], [ %call1286, %cond.false1285 ], !dbg !8898
  store %struct.rtx_def* %cond1288, %struct.rtx_def** %quotient, align 8, !dbg !8903
  %806 = load i32, i32* %compute_mode, align 4, !dbg !8904
  %call1289 = call %struct.rtx_def* @gen_reg_rtx(i32 %806), !dbg !8905
  store %struct.rtx_def* %call1289, %struct.rtx_def** %remainder, align 8, !dbg !8906
  br label %if.end1290

if.end1290:                                       ; preds = %cond.end1287, %cond.end1276
  %807 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8907
  %808 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8909
  %809 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8910
  %810 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8911
  %call1291 = call i32 @expand_twoval_binop(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33), %struct.rtx_def* %807, %struct.rtx_def* %808, %struct.rtx_def* %809, %struct.rtx_def* %810, i32 0), !dbg !8912
  %tobool1292 = icmp ne i32 %call1291, 0, !dbg !8912
  br i1 %tobool1292, label %if.then1293, label %if.end1305, !dbg !8913

if.then1293:                                      ; preds = %if.end1290
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem1294, metadata !8914, metadata !DIExpression()), !dbg !8916
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label1295, metadata !8917, metadata !DIExpression()), !dbg !8918
  %call1296 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8919
  store %struct.rtx_def* %call1296, %struct.rtx_def** %label1295, align 8, !dbg !8918
  %811 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8920
  %812 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8921
  %813 = load i32, i32* %compute_mode, align 4, !dbg !8922
  %814 = load %struct.rtx_def*, %struct.rtx_def** %label1295, align 8, !dbg !8923
  call void @do_cmp_and_jump(%struct.rtx_def* %811, %struct.rtx_def* %812, i32 81, i32 %813, %struct.rtx_def* %814), !dbg !8924
  %815 = load i32, i32* %compute_mode, align 4, !dbg !8925
  %816 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8926
  %817 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8927
  %call1297 = call %struct.rtx_def* @expand_binop(i32 %815, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %816, %struct.rtx_def* %817, %struct.rtx_def* null, i32 0, i32 2), !dbg !8928
  store %struct.rtx_def* %call1297, %struct.rtx_def** %tem1294, align 8, !dbg !8929
  %818 = load %struct.rtx_def*, %struct.rtx_def** %tem1294, align 8, !dbg !8930
  %819 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8931
  %820 = load i32, i32* %compute_mode, align 4, !dbg !8932
  %821 = load %struct.rtx_def*, %struct.rtx_def** %label1295, align 8, !dbg !8933
  call void @do_cmp_and_jump(%struct.rtx_def* %818, %struct.rtx_def* %819, i32 85, i32 %820, %struct.rtx_def* %821), !dbg !8934
  %822 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8935
  %823 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !8936
  call void @expand_inc(%struct.rtx_def* %822, %struct.rtx_def* %823), !dbg !8937
  %824 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8938
  %825 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8939
  call void @expand_dec(%struct.rtx_def* %824, %struct.rtx_def* %825), !dbg !8940
  %826 = load %struct.rtx_def*, %struct.rtx_def** %label1295, align 8, !dbg !8941
  %call1298 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %826), !dbg !8942
  %827 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !8943
  %828 = load i32, i32* %mode.addr, align 4, !dbg !8944
  %829 = load i32, i32* %rem_flag.addr, align 4, !dbg !8945
  %tobool1299 = icmp ne i32 %829, 0, !dbg !8945
  br i1 %tobool1299, label %cond.true1300, label %cond.false1301, !dbg !8945

cond.true1300:                                    ; preds = %if.then1293
  %830 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !8946
  br label %cond.end1302, !dbg !8945

cond.false1301:                                   ; preds = %if.then1293
  %831 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8947
  br label %cond.end1302, !dbg !8945

cond.end1302:                                     ; preds = %cond.false1301, %cond.true1300
  %cond1303 = phi %struct.rtx_def* [ %830, %cond.true1300 ], [ %831, %cond.false1301 ], !dbg !8945
  %call1304 = call %struct.rtx_def* %827(i32 %828, %struct.rtx_def* %cond1303), !dbg !8943
  store %struct.rtx_def* %call1304, %struct.rtx_def** %retval, align 8, !dbg !8948
  br label %return, !dbg !8948

if.end1305:                                       ; preds = %if.end1290
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label11306, metadata !8949, metadata !DIExpression()), !dbg !8951
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label21307, metadata !8952, metadata !DIExpression()), !dbg !8953
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label31308, metadata !8954, metadata !DIExpression()), !dbg !8955
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label41309, metadata !8956, metadata !DIExpression()), !dbg !8957
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label51310, metadata !8958, metadata !DIExpression()), !dbg !8959
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adjusted_op01311, metadata !8960, metadata !DIExpression()), !dbg !8961
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem1312, metadata !8962, metadata !DIExpression()), !dbg !8963
  %832 = load i32, i32* %compute_mode, align 4, !dbg !8964
  %call1313 = call %struct.rtx_def* @gen_reg_rtx(i32 %832), !dbg !8965
  store %struct.rtx_def* %call1313, %struct.rtx_def** %quotient, align 8, !dbg !8966
  %833 = load i32, i32* %compute_mode, align 4, !dbg !8967
  %834 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8968
  %call1314 = call %struct.rtx_def* @copy_to_mode_reg(i32 %833, %struct.rtx_def* %834), !dbg !8969
  store %struct.rtx_def* %call1314, %struct.rtx_def** %adjusted_op01311, align 8, !dbg !8970
  %call1315 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8971
  store %struct.rtx_def* %call1315, %struct.rtx_def** %label11306, align 8, !dbg !8972
  %call1316 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8973
  store %struct.rtx_def* %call1316, %struct.rtx_def** %label21307, align 8, !dbg !8974
  %call1317 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8975
  store %struct.rtx_def* %call1317, %struct.rtx_def** %label31308, align 8, !dbg !8976
  %call1318 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8977
  store %struct.rtx_def* %call1318, %struct.rtx_def** %label41309, align 8, !dbg !8978
  %call1319 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8979
  store %struct.rtx_def* %call1319, %struct.rtx_def** %label51310, align 8, !dbg !8980
  %835 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8981
  %836 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8982
  %837 = load i32, i32* %compute_mode, align 4, !dbg !8983
  %838 = load %struct.rtx_def*, %struct.rtx_def** %label21307, align 8, !dbg !8984
  call void @do_cmp_and_jump(%struct.rtx_def* %835, %struct.rtx_def* %836, i32 85, i32 %837, %struct.rtx_def* %838), !dbg !8985
  %839 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op01311, align 8, !dbg !8986
  %840 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8987
  %841 = load i32, i32* %compute_mode, align 4, !dbg !8988
  %842 = load %struct.rtx_def*, %struct.rtx_def** %label11306, align 8, !dbg !8989
  call void @do_cmp_and_jump(%struct.rtx_def* %839, %struct.rtx_def* %840, i32 83, i32 %841, %struct.rtx_def* %842), !dbg !8990
  %843 = load i32, i32* %compute_mode, align 4, !dbg !8991
  %844 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op01311, align 8, !dbg !8992
  %845 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8993
  %846 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8994
  %call1320 = call %struct.rtx_def* @expand_binop(i32 %843, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), %struct.rtx_def* %844, %struct.rtx_def* %845, %struct.rtx_def* %846, i32 0, i32 3), !dbg !8995
  store %struct.rtx_def* %call1320, %struct.rtx_def** %tem1312, align 8, !dbg !8996
  %847 = load %struct.rtx_def*, %struct.rtx_def** %tem1312, align 8, !dbg !8997
  %848 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !8999
  %cmp1321 = icmp ne %struct.rtx_def* %847, %848, !dbg !9000
  br i1 %cmp1321, label %if.then1323, label %if.end1325, !dbg !9001

if.then1323:                                      ; preds = %if.end1305
  %849 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9002
  %850 = load %struct.rtx_def*, %struct.rtx_def** %tem1312, align 8, !dbg !9003
  %call1324 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %849, %struct.rtx_def* %850), !dbg !9004
  br label %if.end1325, !dbg !9004

if.end1325:                                       ; preds = %if.then1323, %if.end1305
  %851 = load %struct.rtx_def*, %struct.rtx_def** %label51310, align 8, !dbg !9005
  %call1326 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %851), !dbg !9006
  %call1327 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call1326), !dbg !9007
  %call1328 = call %struct.rtx_def* @emit_barrier(), !dbg !9008
  %852 = load %struct.rtx_def*, %struct.rtx_def** %label11306, align 8, !dbg !9009
  %call1329 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %852), !dbg !9010
  %853 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op01311, align 8, !dbg !9011
  %854 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !9012
  call void @expand_dec(%struct.rtx_def* %853, %struct.rtx_def* %854), !dbg !9013
  %855 = load %struct.rtx_def*, %struct.rtx_def** %label41309, align 8, !dbg !9014
  %call1330 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %855), !dbg !9015
  %call1331 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call1330), !dbg !9016
  %call1332 = call %struct.rtx_def* @emit_barrier(), !dbg !9017
  %856 = load %struct.rtx_def*, %struct.rtx_def** %label21307, align 8, !dbg !9018
  %call1333 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %856), !dbg !9019
  %857 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op01311, align 8, !dbg !9020
  %858 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !9021
  %859 = load i32, i32* %compute_mode, align 4, !dbg !9022
  %860 = load %struct.rtx_def*, %struct.rtx_def** %label31308, align 8, !dbg !9023
  call void @do_cmp_and_jump(%struct.rtx_def* %857, %struct.rtx_def* %858, i32 85, i32 %859, %struct.rtx_def* %860), !dbg !9024
  %861 = load i32, i32* %compute_mode, align 4, !dbg !9025
  %862 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op01311, align 8, !dbg !9026
  %863 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9027
  %864 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9028
  %call1334 = call %struct.rtx_def* @expand_binop(i32 %861, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), %struct.rtx_def* %862, %struct.rtx_def* %863, %struct.rtx_def* %864, i32 0, i32 3), !dbg !9029
  store %struct.rtx_def* %call1334, %struct.rtx_def** %tem1312, align 8, !dbg !9030
  %865 = load %struct.rtx_def*, %struct.rtx_def** %tem1312, align 8, !dbg !9031
  %866 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9033
  %cmp1335 = icmp ne %struct.rtx_def* %865, %866, !dbg !9034
  br i1 %cmp1335, label %if.then1337, label %if.end1339, !dbg !9035

if.then1337:                                      ; preds = %if.end1325
  %867 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9036
  %868 = load %struct.rtx_def*, %struct.rtx_def** %tem1312, align 8, !dbg !9037
  %call1338 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %867, %struct.rtx_def* %868), !dbg !9038
  br label %if.end1339, !dbg !9038

if.end1339:                                       ; preds = %if.then1337, %if.end1325
  %869 = load %struct.rtx_def*, %struct.rtx_def** %label51310, align 8, !dbg !9039
  %call1340 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %869), !dbg !9040
  %call1341 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call1340), !dbg !9041
  %call1342 = call %struct.rtx_def* @emit_barrier(), !dbg !9042
  %870 = load %struct.rtx_def*, %struct.rtx_def** %label31308, align 8, !dbg !9043
  %call1343 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %870), !dbg !9044
  %871 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op01311, align 8, !dbg !9045
  %872 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !9046
  call void @expand_inc(%struct.rtx_def* %871, %struct.rtx_def* %872), !dbg !9047
  %873 = load %struct.rtx_def*, %struct.rtx_def** %label41309, align 8, !dbg !9048
  %call1344 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %873), !dbg !9049
  %874 = load i32, i32* %compute_mode, align 4, !dbg !9050
  %875 = load %struct.rtx_def*, %struct.rtx_def** %adjusted_op01311, align 8, !dbg !9051
  %876 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9052
  %877 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9053
  %call1345 = call %struct.rtx_def* @expand_binop(i32 %874, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), %struct.rtx_def* %875, %struct.rtx_def* %876, %struct.rtx_def* %877, i32 0, i32 3), !dbg !9054
  store %struct.rtx_def* %call1345, %struct.rtx_def** %tem1312, align 8, !dbg !9055
  %878 = load %struct.rtx_def*, %struct.rtx_def** %tem1312, align 8, !dbg !9056
  %879 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9058
  %cmp1346 = icmp ne %struct.rtx_def* %878, %879, !dbg !9059
  br i1 %cmp1346, label %if.then1348, label %if.end1350, !dbg !9060

if.then1348:                                      ; preds = %if.end1339
  %880 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9061
  %881 = load %struct.rtx_def*, %struct.rtx_def** %tem1312, align 8, !dbg !9062
  %call1349 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %880, %struct.rtx_def* %881), !dbg !9063
  br label %if.end1350, !dbg !9063

if.end1350:                                       ; preds = %if.then1348, %if.end1339
  %882 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9064
  %883 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !9065
  call void @expand_inc(%struct.rtx_def* %882, %struct.rtx_def* %883), !dbg !9066
  %884 = load %struct.rtx_def*, %struct.rtx_def** %label51310, align 8, !dbg !9067
  %call1351 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %884), !dbg !9068
  br label %if.end1352

if.end1352:                                       ; preds = %if.end1350, %if.end1207
  br label %sw.epilog, !dbg !9069

sw.bb1353:                                        ; preds = %if.then295
  %885 = load i32, i32* %op1_is_constant, align 4, !dbg !9070
  %tobool1354 = icmp ne i32 %885, 0, !dbg !9070
  br i1 %tobool1354, label %land.lhs.true1355, label %if.end1382, !dbg !9072

land.lhs.true1355:                                ; preds = %sw.bb1353
  %886 = load i32, i32* %size, align 4, !dbg !9073
  %cmp1356 = icmp sge i32 64, %886, !dbg !9074
  br i1 %cmp1356, label %if.then1358, label %if.end1382, !dbg !9075

if.then1358:                                      ; preds = %land.lhs.true1355
  call void @llvm.dbg.declare(metadata i64* %d1359, metadata !9076, metadata !DIExpression()), !dbg !9078
  %887 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9079
  %u1360 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %887, i32 0, i32 1, !dbg !9079
  %hwint1361 = bitcast %union.u* %u1360 to [1 x i64]*, !dbg !9079
  %arrayidx1362 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint1361, i64 0, i64 0, !dbg !9079
  %888 = load i64, i64* %arrayidx1362, align 8, !dbg !9079
  store i64 %888, i64* %d1359, align 8, !dbg !9078
  call void @llvm.dbg.declare(metadata i64* %ml1363, metadata !9080, metadata !DIExpression()), !dbg !9081
  call void @llvm.dbg.declare(metadata i32* %pre_shift1364, metadata !9082, metadata !DIExpression()), !dbg !9083
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t11365, metadata !9084, metadata !DIExpression()), !dbg !9085
  %889 = load i64, i64* %d1359, align 8, !dbg !9086
  %890 = load i64, i64* %d1359, align 8, !dbg !9087
  %sub1366 = sub nsw i64 0, %890, !dbg !9088
  %and1367 = and i64 %889, %sub1366, !dbg !9089
  %call1368 = call i32 @floor_log2(i64 %and1367), !dbg !9090
  store i32 %call1368, i32* %pre_shift1364, align 4, !dbg !9091
  %891 = load i64, i64* %d1359, align 8, !dbg !9092
  %892 = load i32, i32* %pre_shift1364, align 4, !dbg !9093
  %sh_prom1369 = zext i32 %892 to i64, !dbg !9094
  %shr1370 = ashr i64 %891, %sh_prom1369, !dbg !9094
  %893 = load i32, i32* %size, align 4, !dbg !9095
  %call1371 = call i64 @invert_mod2n(i64 %shr1370, i32 %893), !dbg !9096
  store i64 %call1371, i64* %ml1363, align 8, !dbg !9097
  %894 = load i32, i32* %compute_mode, align 4, !dbg !9098
  %895 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9099
  %896 = load i32, i32* %pre_shift1364, align 4, !dbg !9100
  %conv1372 = sext i32 %896 to i64, !dbg !9100
  %call1373 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv1372), !dbg !9101
  %897 = load i32, i32* %unsignedp.addr, align 4, !dbg !9102
  %call1374 = call %struct.rtx_def* @expand_shift(i32 84, i32 %894, %struct.rtx_def* %895, %union.tree_node* %call1373, %struct.rtx_def* null, i32 %897), !dbg !9103
  store %struct.rtx_def* %call1374, %struct.rtx_def** %t11365, align 8, !dbg !9104
  %898 = load i32, i32* %compute_mode, align 4, !dbg !9105
  %899 = load %struct.rtx_def*, %struct.rtx_def** %t11365, align 8, !dbg !9106
  %900 = load i64, i64* %ml1363, align 8, !dbg !9107
  %901 = load i32, i32* %compute_mode, align 4, !dbg !9108
  %call1375 = call %struct.rtx_def* @gen_int_mode(i64 %900, i32 %901), !dbg !9109
  %call1376 = call %struct.rtx_def* @expand_mult(i32 %898, %struct.rtx_def* %899, %struct.rtx_def* %call1375, %struct.rtx_def* null, i32 1), !dbg !9110
  store %struct.rtx_def* %call1376, %struct.rtx_def** %quotient, align 8, !dbg !9111
  %call1377 = call %struct.rtx_def* @get_last_insn(), !dbg !9112
  store %struct.rtx_def* %call1377, %struct.rtx_def** %insn, align 8, !dbg !9113
  %902 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9114
  %903 = load i32, i32* %unsignedp.addr, align 4, !dbg !9115
  %tobool1378 = icmp ne i32 %903, 0, !dbg !9115
  %904 = zext i1 %tobool1378 to i64, !dbg !9115
  %cond1379 = select i1 %tobool1378, i32 59, i32 55, !dbg !9115
  %905 = load i32, i32* %compute_mode, align 4, !dbg !9115
  %906 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9115
  %907 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9115
  %call1380 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %cond1379, i32 %905, %struct.rtx_def* %906, %struct.rtx_def* %907), !dbg !9115
  %call1381 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %902, i32 4, %struct.rtx_def* %call1380), !dbg !9116
  br label %if.end1382, !dbg !9117

if.end1382:                                       ; preds = %if.then1358, %land.lhs.true1355, %sw.bb1353
  br label %sw.epilog, !dbg !9118

sw.bb1383:                                        ; preds = %if.then295, %if.then295
  %908 = load i32, i32* %unsignedp.addr, align 4, !dbg !9119
  %tobool1384 = icmp ne i32 %908, 0, !dbg !9119
  br i1 %tobool1384, label %if.then1385, label %if.else1404, !dbg !9121

if.then1385:                                      ; preds = %sw.bb1383
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem1386, metadata !9122, metadata !DIExpression()), !dbg !9124
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label1387, metadata !9125, metadata !DIExpression()), !dbg !9126
  %call1388 = call %struct.rtx_def* @gen_label_rtx(), !dbg !9127
  store %struct.rtx_def* %call1388, %struct.rtx_def** %label1387, align 8, !dbg !9128
  %909 = load i32, i32* %compute_mode, align 4, !dbg !9129
  %call1389 = call %struct.rtx_def* @gen_reg_rtx(i32 %909), !dbg !9130
  store %struct.rtx_def* %call1389, %struct.rtx_def** %quotient, align 8, !dbg !9131
  %910 = load i32, i32* %compute_mode, align 4, !dbg !9132
  %call1390 = call %struct.rtx_def* @gen_reg_rtx(i32 %910), !dbg !9133
  store %struct.rtx_def* %call1390, %struct.rtx_def** %remainder, align 8, !dbg !9134
  %911 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9135
  %912 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9137
  %913 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9138
  %914 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9139
  %call1391 = call i32 @expand_twoval_binop(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 35), %struct.rtx_def* %911, %struct.rtx_def* %912, %struct.rtx_def* %913, %struct.rtx_def* %914, i32 1), !dbg !9140
  %cmp1392 = icmp eq i32 %call1391, 0, !dbg !9141
  br i1 %cmp1392, label %if.then1394, label %if.end1399, !dbg !9142

if.then1394:                                      ; preds = %if.then1385
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem1395, metadata !9143, metadata !DIExpression()), !dbg !9145
  %915 = load i32, i32* %compute_mode, align 4, !dbg !9146
  %916 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9147
  %917 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9148
  %918 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9149
  %call1396 = call %struct.rtx_def* @expand_binop(i32 %915, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 34), %struct.rtx_def* %916, %struct.rtx_def* %917, %struct.rtx_def* %918, i32 1, i32 3), !dbg !9150
  store %struct.rtx_def* %call1396, %struct.rtx_def** %quotient, align 8, !dbg !9151
  %919 = load i32, i32* %compute_mode, align 4, !dbg !9152
  %920 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9153
  %921 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9154
  %call1397 = call %struct.rtx_def* @expand_mult(i32 %919, %struct.rtx_def* %920, %struct.rtx_def* %921, %struct.rtx_def* null, i32 1), !dbg !9155
  store %struct.rtx_def* %call1397, %struct.rtx_def** %tem1395, align 8, !dbg !9156
  %922 = load i32, i32* %compute_mode, align 4, !dbg !9157
  %923 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9158
  %924 = load %struct.rtx_def*, %struct.rtx_def** %tem1395, align 8, !dbg !9159
  %925 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9160
  %call1398 = call %struct.rtx_def* @expand_binop(i32 %922, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %923, %struct.rtx_def* %924, %struct.rtx_def* %925, i32 1, i32 3), !dbg !9161
  store %struct.rtx_def* %call1398, %struct.rtx_def** %remainder, align 8, !dbg !9162
  br label %if.end1399, !dbg !9163

if.end1399:                                       ; preds = %if.then1394, %if.then1385
  %926 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9164
  %call1400 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %926, i64 -1), !dbg !9165
  store %struct.rtx_def* %call1400, %struct.rtx_def** %tem1386, align 8, !dbg !9166
  %927 = load i32, i32* %compute_mode, align 4, !dbg !9167
  %928 = load %struct.rtx_def*, %struct.rtx_def** %tem1386, align 8, !dbg !9168
  %call1401 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 1), !dbg !9169
  %call1402 = call %struct.rtx_def* @expand_shift(i32 84, i32 %927, %struct.rtx_def* %928, %union.tree_node* %call1401, %struct.rtx_def* null, i32 1), !dbg !9170
  store %struct.rtx_def* %call1402, %struct.rtx_def** %tem1386, align 8, !dbg !9171
  %929 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9172
  %930 = load %struct.rtx_def*, %struct.rtx_def** %tem1386, align 8, !dbg !9173
  %931 = load i32, i32* %compute_mode, align 4, !dbg !9174
  %932 = load %struct.rtx_def*, %struct.rtx_def** %label1387, align 8, !dbg !9175
  call void @do_cmp_and_jump(%struct.rtx_def* %929, %struct.rtx_def* %930, i32 88, i32 %931, %struct.rtx_def* %932), !dbg !9176
  %933 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9177
  %934 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !9178
  call void @expand_inc(%struct.rtx_def* %933, %struct.rtx_def* %934), !dbg !9179
  %935 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9180
  %936 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9181
  call void @expand_dec(%struct.rtx_def* %935, %struct.rtx_def* %936), !dbg !9182
  %937 = load %struct.rtx_def*, %struct.rtx_def** %label1387, align 8, !dbg !9183
  %call1403 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %937), !dbg !9184
  br label %if.end1433, !dbg !9185

if.else1404:                                      ; preds = %sw.bb1383
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %abs_rem, metadata !9186, metadata !DIExpression()), !dbg !9188
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %abs_op1, metadata !9189, metadata !DIExpression()), !dbg !9190
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem1405, metadata !9191, metadata !DIExpression()), !dbg !9192
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mask, metadata !9193, metadata !DIExpression()), !dbg !9194
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label1406, metadata !9195, metadata !DIExpression()), !dbg !9196
  %call1407 = call %struct.rtx_def* @gen_label_rtx(), !dbg !9197
  store %struct.rtx_def* %call1407, %struct.rtx_def** %label1406, align 8, !dbg !9198
  %938 = load i32, i32* %compute_mode, align 4, !dbg !9199
  %call1408 = call %struct.rtx_def* @gen_reg_rtx(i32 %938), !dbg !9200
  store %struct.rtx_def* %call1408, %struct.rtx_def** %quotient, align 8, !dbg !9201
  %939 = load i32, i32* %compute_mode, align 4, !dbg !9202
  %call1409 = call %struct.rtx_def* @gen_reg_rtx(i32 %939), !dbg !9203
  store %struct.rtx_def* %call1409, %struct.rtx_def** %remainder, align 8, !dbg !9204
  %940 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9205
  %941 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9207
  %942 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9208
  %943 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9209
  %call1410 = call i32 @expand_twoval_binop(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33), %struct.rtx_def* %940, %struct.rtx_def* %941, %struct.rtx_def* %942, %struct.rtx_def* %943, i32 0), !dbg !9210
  %cmp1411 = icmp eq i32 %call1410, 0, !dbg !9211
  br i1 %cmp1411, label %if.then1413, label %if.end1418, !dbg !9212

if.then1413:                                      ; preds = %if.else1404
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem1414, metadata !9213, metadata !DIExpression()), !dbg !9215
  %944 = load i32, i32* %compute_mode, align 4, !dbg !9216
  %945 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9217
  %946 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9218
  %947 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9219
  %call1415 = call %struct.rtx_def* @expand_binop(i32 %944, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), %struct.rtx_def* %945, %struct.rtx_def* %946, %struct.rtx_def* %947, i32 0, i32 3), !dbg !9220
  store %struct.rtx_def* %call1415, %struct.rtx_def** %quotient, align 8, !dbg !9221
  %948 = load i32, i32* %compute_mode, align 4, !dbg !9222
  %949 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9223
  %950 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9224
  %call1416 = call %struct.rtx_def* @expand_mult(i32 %948, %struct.rtx_def* %949, %struct.rtx_def* %950, %struct.rtx_def* null, i32 0), !dbg !9225
  store %struct.rtx_def* %call1416, %struct.rtx_def** %tem1414, align 8, !dbg !9226
  %951 = load i32, i32* %compute_mode, align 4, !dbg !9227
  %952 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9228
  %953 = load %struct.rtx_def*, %struct.rtx_def** %tem1414, align 8, !dbg !9229
  %954 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9230
  %call1417 = call %struct.rtx_def* @expand_binop(i32 %951, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %952, %struct.rtx_def* %953, %struct.rtx_def* %954, i32 0, i32 3), !dbg !9231
  store %struct.rtx_def* %call1417, %struct.rtx_def** %remainder, align 8, !dbg !9232
  br label %if.end1418, !dbg !9233

if.end1418:                                       ; preds = %if.then1413, %if.else1404
  %955 = load i32, i32* %compute_mode, align 4, !dbg !9234
  %956 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9235
  %call1419 = call %struct.rtx_def* @expand_abs(i32 %955, %struct.rtx_def* %956, %struct.rtx_def* null, i32 1, i32 0), !dbg !9236
  store %struct.rtx_def* %call1419, %struct.rtx_def** %abs_rem, align 8, !dbg !9237
  %957 = load i32, i32* %compute_mode, align 4, !dbg !9238
  %958 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9239
  %call1420 = call %struct.rtx_def* @expand_abs(i32 %957, %struct.rtx_def* %958, %struct.rtx_def* null, i32 1, i32 0), !dbg !9240
  store %struct.rtx_def* %call1420, %struct.rtx_def** %abs_op1, align 8, !dbg !9241
  %959 = load i32, i32* %compute_mode, align 4, !dbg !9242
  %960 = load %struct.rtx_def*, %struct.rtx_def** %abs_rem, align 8, !dbg !9243
  %call1421 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 1), !dbg !9244
  %call1422 = call %struct.rtx_def* @expand_shift(i32 83, i32 %959, %struct.rtx_def* %960, %union.tree_node* %call1421, %struct.rtx_def* null, i32 1), !dbg !9245
  store %struct.rtx_def* %call1422, %struct.rtx_def** %tem1405, align 8, !dbg !9246
  %961 = load %struct.rtx_def*, %struct.rtx_def** %tem1405, align 8, !dbg !9247
  %962 = load %struct.rtx_def*, %struct.rtx_def** %abs_op1, align 8, !dbg !9248
  %963 = load i32, i32* %compute_mode, align 4, !dbg !9249
  %964 = load %struct.rtx_def*, %struct.rtx_def** %label1406, align 8, !dbg !9250
  call void @do_cmp_and_jump(%struct.rtx_def* %961, %struct.rtx_def* %962, i32 89, i32 %963, %struct.rtx_def* %964), !dbg !9251
  %965 = load i32, i32* %compute_mode, align 4, !dbg !9252
  %966 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9253
  %967 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9254
  %call1423 = call %struct.rtx_def* @expand_binop(i32 %965, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %966, %struct.rtx_def* %967, %struct.rtx_def* null, i32 0, i32 2), !dbg !9255
  store %struct.rtx_def* %call1423, %struct.rtx_def** %tem1405, align 8, !dbg !9256
  %968 = load i32, i32* %compute_mode, align 4, !dbg !9257
  %969 = load %struct.rtx_def*, %struct.rtx_def** %tem1405, align 8, !dbg !9258
  %970 = load i32, i32* %size, align 4, !dbg !9259
  %sub1424 = sub nsw i32 %970, 1, !dbg !9260
  %conv1425 = sext i32 %sub1424 to i64, !dbg !9259
  %call1426 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv1425), !dbg !9261
  %call1427 = call %struct.rtx_def* @expand_shift(i32 84, i32 %968, %struct.rtx_def* %969, %union.tree_node* %call1426, %struct.rtx_def* null, i32 0), !dbg !9262
  store %struct.rtx_def* %call1427, %struct.rtx_def** %mask, align 8, !dbg !9263
  %971 = load i32, i32* %compute_mode, align 4, !dbg !9264
  %972 = load %struct.rtx_def*, %struct.rtx_def** %mask, align 8, !dbg !9265
  %973 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !9266
  %call1428 = call %struct.rtx_def* @expand_binop(i32 %971, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %972, %struct.rtx_def* %973, %struct.rtx_def* null, i32 0, i32 2), !dbg !9267
  store %struct.rtx_def* %call1428, %struct.rtx_def** %tem1405, align 8, !dbg !9268
  %974 = load i32, i32* %compute_mode, align 4, !dbg !9269
  %975 = load %struct.rtx_def*, %struct.rtx_def** %tem1405, align 8, !dbg !9270
  %976 = load %struct.rtx_def*, %struct.rtx_def** %mask, align 8, !dbg !9271
  %call1429 = call %struct.rtx_def* @expand_binop(i32 %974, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %975, %struct.rtx_def* %976, %struct.rtx_def* null, i32 0, i32 2), !dbg !9272
  store %struct.rtx_def* %call1429, %struct.rtx_def** %tem1405, align 8, !dbg !9273
  %977 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9274
  %978 = load %struct.rtx_def*, %struct.rtx_def** %tem1405, align 8, !dbg !9275
  call void @expand_inc(%struct.rtx_def* %977, %struct.rtx_def* %978), !dbg !9276
  %979 = load i32, i32* %compute_mode, align 4, !dbg !9277
  %980 = load %struct.rtx_def*, %struct.rtx_def** %mask, align 8, !dbg !9278
  %981 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9279
  %call1430 = call %struct.rtx_def* @expand_binop(i32 %979, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %980, %struct.rtx_def* %981, %struct.rtx_def* null, i32 0, i32 2), !dbg !9280
  store %struct.rtx_def* %call1430, %struct.rtx_def** %tem1405, align 8, !dbg !9281
  %982 = load i32, i32* %compute_mode, align 4, !dbg !9282
  %983 = load %struct.rtx_def*, %struct.rtx_def** %tem1405, align 8, !dbg !9283
  %984 = load %struct.rtx_def*, %struct.rtx_def** %mask, align 8, !dbg !9284
  %call1431 = call %struct.rtx_def* @expand_binop(i32 %982, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %983, %struct.rtx_def* %984, %struct.rtx_def* null, i32 0, i32 2), !dbg !9285
  store %struct.rtx_def* %call1431, %struct.rtx_def** %tem1405, align 8, !dbg !9286
  %985 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9287
  %986 = load %struct.rtx_def*, %struct.rtx_def** %tem1405, align 8, !dbg !9288
  call void @expand_dec(%struct.rtx_def* %985, %struct.rtx_def* %986), !dbg !9289
  %987 = load %struct.rtx_def*, %struct.rtx_def** %label1406, align 8, !dbg !9290
  %call1432 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %987), !dbg !9291
  br label %if.end1433

if.end1433:                                       ; preds = %if.end1418, %if.end1399
  %988 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !9292
  %989 = load i32, i32* %mode.addr, align 4, !dbg !9293
  %990 = load i32, i32* %rem_flag.addr, align 4, !dbg !9294
  %tobool1434 = icmp ne i32 %990, 0, !dbg !9294
  br i1 %tobool1434, label %cond.true1435, label %cond.false1436, !dbg !9294

cond.true1435:                                    ; preds = %if.end1433
  %991 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9295
  br label %cond.end1437, !dbg !9294

cond.false1436:                                   ; preds = %if.end1433
  %992 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9296
  br label %cond.end1437, !dbg !9294

cond.end1437:                                     ; preds = %cond.false1436, %cond.true1435
  %cond1438 = phi %struct.rtx_def* [ %991, %cond.true1435 ], [ %992, %cond.false1436 ], !dbg !9294
  %call1439 = call %struct.rtx_def* %988(i32 %989, %struct.rtx_def* %cond1438), !dbg !9292
  store %struct.rtx_def* %call1439, %struct.rtx_def** %retval, align 8, !dbg !9297
  br label %return, !dbg !9297

sw.default:                                       ; preds = %if.then295
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4856, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9298
  br label %sw.epilog, !dbg !9299

sw.epilog:                                        ; preds = %sw.default, %if.end1382, %if.end1352, %if.end1254, %if.end1139, %if.end1097, %if.then1009, %fail1, %if.end887, %if.else819, %if.else438
  br label %if.end1440, !dbg !9299

if.end1440:                                       ; preds = %sw.epilog, %if.end292
  %993 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9300
  %cmp1441 = icmp eq %struct.rtx_def* %993, null, !dbg !9302
  br i1 %cmp1441, label %if.then1443, label %if.end1507, !dbg !9303

if.then1443:                                      ; preds = %if.end1440
  %994 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9304
  %tobool1444 = icmp ne %struct.rtx_def* %994, null, !dbg !9304
  br i1 %tobool1444, label %land.lhs.true1445, label %if.end1452, !dbg !9307

land.lhs.true1445:                                ; preds = %if.then1443
  %995 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9308
  %996 = bitcast %struct.rtx_def* %995 to i32*, !dbg !9308
  %bf.load1446 = load i32, i32* %996, align 8, !dbg !9308
  %bf.lshr1447 = lshr i32 %bf.load1446, 16, !dbg !9308
  %bf.clear1448 = and i32 %bf.lshr1447, 255, !dbg !9308
  %997 = load i32, i32* %compute_mode, align 4, !dbg !9309
  %cmp1449 = icmp ne i32 %bf.clear1448, %997, !dbg !9310
  br i1 %cmp1449, label %if.then1451, label %if.end1452, !dbg !9311

if.then1451:                                      ; preds = %land.lhs.true1445
  store %struct.rtx_def* null, %struct.rtx_def** %target.addr, align 8, !dbg !9312
  br label %if.end1452, !dbg !9313

if.end1452:                                       ; preds = %if.then1451, %land.lhs.true1445, %if.then1443
  %998 = load i32, i32* %rem_flag.addr, align 4, !dbg !9314
  %tobool1453 = icmp ne i32 %998, 0, !dbg !9314
  br i1 %tobool1453, label %if.then1454, label %if.end1478, !dbg !9316

if.then1454:                                      ; preds = %if.end1452
  %999 = load i32, i32* %compute_mode, align 4, !dbg !9317
  %1000 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9319
  %1001 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9320
  %1002 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9321
  %1003 = load i32, i32* %unsignedp.addr, align 4, !dbg !9322
  %1004 = load %struct.optab_d*, %struct.optab_d** %optab2, align 8, !dbg !9323
  %handlers1455 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %1004, i32 0, i32 4, !dbg !9323
  %1005 = load i32, i32* %compute_mode, align 4, !dbg !9323
  %idxprom1456 = sext i32 %1005 to i64, !dbg !9323
  %arrayidx1457 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers1455, i64 0, i64 %idxprom1456, !dbg !9323
  %insn_code1458 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx1457, i32 0, i32 0, !dbg !9324
  %1006 = load i32, i32* %insn_code1458, align 4, !dbg !9324
  %cmp1459 = icmp ne i32 %1006, 2956, !dbg !9325
  %1007 = zext i1 %cmp1459 to i64, !dbg !9326
  %cond1461 = select i1 %cmp1459, i32 0, i32 2, !dbg !9326
  %call1462 = call %struct.rtx_def* @sign_expand_binop(i32 %999, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 37), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 36), %struct.rtx_def* %1000, %struct.rtx_def* %1001, %struct.rtx_def* %1002, i32 %1003, i32 %cond1461), !dbg !9327
  store %struct.rtx_def* %call1462, %struct.rtx_def** %remainder, align 8, !dbg !9328
  %1008 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9329
  %cmp1463 = icmp eq %struct.rtx_def* %1008, null, !dbg !9331
  br i1 %cmp1463, label %if.then1465, label %if.end1473, !dbg !9332

if.then1465:                                      ; preds = %if.then1454
  %1009 = load i32, i32* %compute_mode, align 4, !dbg !9333
  %call1466 = call %struct.rtx_def* @gen_reg_rtx(i32 %1009), !dbg !9335
  store %struct.rtx_def* %call1466, %struct.rtx_def** %remainder, align 8, !dbg !9336
  %1010 = load i32, i32* %unsignedp.addr, align 4, !dbg !9337
  %tobool1467 = icmp ne i32 %1010, 0, !dbg !9337
  %1011 = zext i1 %tobool1467 to i64, !dbg !9337
  %cond1468 = select i1 %tobool1467, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 35), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33), !dbg !9337
  %1012 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9339
  %1013 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9340
  %1014 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9341
  %1015 = load i32, i32* %unsignedp.addr, align 4, !dbg !9342
  %call1469 = call i32 @expand_twoval_binop(%struct.optab_d* %cond1468, %struct.rtx_def* %1012, %struct.rtx_def* %1013, %struct.rtx_def* null, %struct.rtx_def* %1014, i32 %1015), !dbg !9343
  %tobool1470 = icmp ne i32 %call1469, 0, !dbg !9343
  br i1 %tobool1470, label %if.end1472, label %if.then1471, !dbg !9344

if.then1471:                                      ; preds = %if.then1465
  store %struct.rtx_def* null, %struct.rtx_def** %remainder, align 8, !dbg !9345
  br label %if.end1472, !dbg !9346

if.end1472:                                       ; preds = %if.then1471, %if.then1465
  br label %if.end1473, !dbg !9347

if.end1473:                                       ; preds = %if.end1472, %if.then1454
  %1016 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9348
  %tobool1474 = icmp ne %struct.rtx_def* %1016, null, !dbg !9348
  br i1 %tobool1474, label %if.then1475, label %if.end1477, !dbg !9350

if.then1475:                                      ; preds = %if.end1473
  %1017 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !9351
  %1018 = load i32, i32* %mode.addr, align 4, !dbg !9352
  %1019 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9353
  %call1476 = call %struct.rtx_def* %1017(i32 %1018, %struct.rtx_def* %1019), !dbg !9351
  store %struct.rtx_def* %call1476, %struct.rtx_def** %retval, align 8, !dbg !9354
  br label %return, !dbg !9354

if.end1477:                                       ; preds = %if.end1473
  br label %if.end1478, !dbg !9355

if.end1478:                                       ; preds = %if.end1477, %if.end1452
  %1020 = load i32, i32* %compute_mode, align 4, !dbg !9356
  %1021 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9357
  %1022 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9358
  %1023 = load i32, i32* %rem_flag.addr, align 4, !dbg !9359
  %tobool1479 = icmp ne i32 %1023, 0, !dbg !9359
  br i1 %tobool1479, label %cond.true1480, label %cond.false1481, !dbg !9359

cond.true1480:                                    ; preds = %if.end1478
  br label %cond.end1482, !dbg !9359

cond.false1481:                                   ; preds = %if.end1478
  %1024 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9360
  br label %cond.end1482, !dbg !9359

cond.end1482:                                     ; preds = %cond.false1481, %cond.true1480
  %cond1483 = phi %struct.rtx_def* [ null, %cond.true1480 ], [ %1024, %cond.false1481 ], !dbg !9359
  %1025 = load i32, i32* %unsignedp.addr, align 4, !dbg !9361
  %1026 = load %struct.optab_d*, %struct.optab_d** %optab2, align 8, !dbg !9362
  %handlers1484 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %1026, i32 0, i32 4, !dbg !9362
  %1027 = load i32, i32* %compute_mode, align 4, !dbg !9362
  %idxprom1485 = sext i32 %1027 to i64, !dbg !9362
  %arrayidx1486 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers1484, i64 0, i64 %idxprom1485, !dbg !9362
  %insn_code1487 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx1486, i32 0, i32 0, !dbg !9363
  %1028 = load i32, i32* %insn_code1487, align 4, !dbg !9363
  %cmp1488 = icmp ne i32 %1028, 2956, !dbg !9364
  %1029 = zext i1 %cmp1488 to i64, !dbg !9365
  %cond1490 = select i1 %cmp1488, i32 0, i32 2, !dbg !9365
  %call1491 = call %struct.rtx_def* @sign_expand_binop(i32 %1020, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 34), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), %struct.rtx_def* %1021, %struct.rtx_def* %1022, %struct.rtx_def* %cond1483, i32 %1025, i32 %cond1490), !dbg !9366
  store %struct.rtx_def* %call1491, %struct.rtx_def** %quotient, align 8, !dbg !9367
  %1030 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9368
  %cmp1492 = icmp eq %struct.rtx_def* %1030, null, !dbg !9370
  br i1 %cmp1492, label %if.then1494, label %if.end1506, !dbg !9371

if.then1494:                                      ; preds = %cond.end1482
  %1031 = load i32, i32* %compute_mode, align 4, !dbg !9372
  %call1495 = call %struct.rtx_def* @gen_reg_rtx(i32 %1031), !dbg !9374
  store %struct.rtx_def* %call1495, %struct.rtx_def** %quotient, align 8, !dbg !9375
  %1032 = load i32, i32* %unsignedp.addr, align 4, !dbg !9376
  %tobool1496 = icmp ne i32 %1032, 0, !dbg !9376
  %1033 = zext i1 %tobool1496 to i64, !dbg !9376
  %cond1497 = select i1 %tobool1496, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 35), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33), !dbg !9376
  %1034 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9378
  %1035 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9379
  %1036 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9380
  %1037 = load i32, i32* %unsignedp.addr, align 4, !dbg !9381
  %call1498 = call i32 @expand_twoval_binop(%struct.optab_d* %cond1497, %struct.rtx_def* %1034, %struct.rtx_def* %1035, %struct.rtx_def* %1036, %struct.rtx_def* null, i32 %1037), !dbg !9382
  %tobool1499 = icmp ne i32 %call1498, 0, !dbg !9382
  br i1 %tobool1499, label %if.end1505, label %if.then1500, !dbg !9383

if.then1500:                                      ; preds = %if.then1494
  store %struct.rtx_def* null, %struct.rtx_def** %quotient, align 8, !dbg !9384
  %1038 = load i32, i32* %rem_flag.addr, align 4, !dbg !9386
  %tobool1501 = icmp ne i32 %1038, 0, !dbg !9386
  br i1 %tobool1501, label %if.end1504, label %if.then1502, !dbg !9388

if.then1502:                                      ; preds = %if.then1500
  %1039 = load i32, i32* %compute_mode, align 4, !dbg !9389
  %1040 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9390
  %1041 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9391
  %1042 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9392
  %1043 = load i32, i32* %unsignedp.addr, align 4, !dbg !9393
  %call1503 = call %struct.rtx_def* @sign_expand_binop(i32 %1039, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 34), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), %struct.rtx_def* %1040, %struct.rtx_def* %1041, %struct.rtx_def* %1042, i32 %1043, i32 3), !dbg !9394
  store %struct.rtx_def* %call1503, %struct.rtx_def** %quotient, align 8, !dbg !9395
  br label %if.end1504, !dbg !9396

if.end1504:                                       ; preds = %if.then1502, %if.then1500
  br label %if.end1505, !dbg !9397

if.end1505:                                       ; preds = %if.end1504, %if.then1494
  br label %if.end1506, !dbg !9398

if.end1506:                                       ; preds = %if.end1505, %cond.end1482
  br label %if.end1507, !dbg !9399

if.end1507:                                       ; preds = %if.end1506, %if.end1440
  %1044 = load i32, i32* %rem_flag.addr, align 4, !dbg !9400
  %tobool1508 = icmp ne i32 %1044, 0, !dbg !9400
  br i1 %tobool1508, label %if.then1509, label %if.end1539, !dbg !9402

if.then1509:                                      ; preds = %if.end1507
  %1045 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9403
  %tobool1510 = icmp ne %struct.rtx_def* %1045, null, !dbg !9403
  br i1 %tobool1510, label %land.lhs.true1511, label %if.end1518, !dbg !9406

land.lhs.true1511:                                ; preds = %if.then1509
  %1046 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9407
  %1047 = bitcast %struct.rtx_def* %1046 to i32*, !dbg !9407
  %bf.load1512 = load i32, i32* %1047, align 8, !dbg !9407
  %bf.lshr1513 = lshr i32 %bf.load1512, 16, !dbg !9407
  %bf.clear1514 = and i32 %bf.lshr1513, 255, !dbg !9407
  %1048 = load i32, i32* %compute_mode, align 4, !dbg !9408
  %cmp1515 = icmp ne i32 %bf.clear1514, %1048, !dbg !9409
  br i1 %cmp1515, label %if.then1517, label %if.end1518, !dbg !9410

if.then1517:                                      ; preds = %land.lhs.true1511
  store %struct.rtx_def* null, %struct.rtx_def** %target.addr, align 8, !dbg !9411
  br label %if.end1518, !dbg !9412

if.end1518:                                       ; preds = %if.then1517, %land.lhs.true1511, %if.then1509
  %1049 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9413
  %cmp1519 = icmp eq %struct.rtx_def* %1049, null, !dbg !9415
  br i1 %cmp1519, label %if.then1521, label %if.else1535, !dbg !9416

if.then1521:                                      ; preds = %if.end1518
  %1050 = load i32, i32* %compute_mode, align 4, !dbg !9417
  %1051 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9419
  %1052 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9420
  %1053 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9421
  %1054 = load i32, i32* %unsignedp.addr, align 4, !dbg !9422
  %call1522 = call %struct.rtx_def* @sign_expand_binop(i32 %1050, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 37), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 36), %struct.rtx_def* %1051, %struct.rtx_def* %1052, %struct.rtx_def* %1053, i32 %1054, i32 3), !dbg !9423
  store %struct.rtx_def* %call1522, %struct.rtx_def** %remainder, align 8, !dbg !9424
  %1055 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9425
  %tobool1523 = icmp ne %struct.rtx_def* %1055, null, !dbg !9425
  br i1 %tobool1523, label %if.end1534, label %if.then1524, !dbg !9427

if.then1524:                                      ; preds = %if.then1521
  %1056 = load i32, i32* %compute_mode, align 4, !dbg !9428
  %call1525 = call %struct.rtx_def* @gen_reg_rtx(i32 %1056), !dbg !9430
  store %struct.rtx_def* %call1525, %struct.rtx_def** %remainder, align 8, !dbg !9431
  %1057 = load i32, i32* %unsignedp.addr, align 4, !dbg !9432
  %tobool1526 = icmp ne i32 %1057, 0, !dbg !9432
  %1058 = zext i1 %tobool1526 to i64, !dbg !9432
  %cond1527 = select i1 %tobool1526, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 35), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33), !dbg !9432
  %1059 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9434
  %1060 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9435
  %1061 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9436
  %1062 = load i32, i32* %unsignedp.addr, align 4, !dbg !9437
  %tobool1528 = icmp ne i32 %1062, 0, !dbg !9437
  %1063 = zext i1 %tobool1528 to i64, !dbg !9437
  %cond1529 = select i1 %tobool1528, i32 60, i32 58, !dbg !9437
  %call1530 = call zeroext i8 @expand_twoval_binop_libfunc(%struct.optab_d* %cond1527, %struct.rtx_def* %1059, %struct.rtx_def* %1060, %struct.rtx_def* null, %struct.rtx_def* %1061, i32 %cond1529), !dbg !9438
  %tobool1531 = icmp ne i8 %call1530, 0, !dbg !9438
  br i1 %tobool1531, label %if.end1533, label %if.then1532, !dbg !9439

if.then1532:                                      ; preds = %if.then1524
  store %struct.rtx_def* null, %struct.rtx_def** %remainder, align 8, !dbg !9440
  br label %if.end1533, !dbg !9441

if.end1533:                                       ; preds = %if.then1532, %if.then1524
  br label %if.end1534, !dbg !9442

if.end1534:                                       ; preds = %if.end1533, %if.then1521
  br label %if.end1538, !dbg !9443

if.else1535:                                      ; preds = %if.end1518
  %1064 = load i32, i32* %compute_mode, align 4, !dbg !9444
  %1065 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9446
  %1066 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9447
  %1067 = load i32, i32* %unsignedp.addr, align 4, !dbg !9448
  %call1536 = call %struct.rtx_def* @expand_mult(i32 %1064, %struct.rtx_def* %1065, %struct.rtx_def* %1066, %struct.rtx_def* null, i32 %1067), !dbg !9449
  store %struct.rtx_def* %call1536, %struct.rtx_def** %remainder, align 8, !dbg !9450
  %1068 = load i32, i32* %compute_mode, align 4, !dbg !9451
  %1069 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9452
  %1070 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9453
  %1071 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9454
  %1072 = load i32, i32* %unsignedp.addr, align 4, !dbg !9455
  %call1537 = call %struct.rtx_def* @expand_binop(i32 %1068, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %1069, %struct.rtx_def* %1070, %struct.rtx_def* %1071, i32 %1072, i32 3), !dbg !9456
  store %struct.rtx_def* %call1537, %struct.rtx_def** %remainder, align 8, !dbg !9457
  br label %if.end1538

if.end1538:                                       ; preds = %if.else1535, %if.end1534
  br label %if.end1539, !dbg !9458

if.end1539:                                       ; preds = %if.end1538, %if.end1507
  %1073 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !9459
  %1074 = load i32, i32* %mode.addr, align 4, !dbg !9460
  %1075 = load i32, i32* %rem_flag.addr, align 4, !dbg !9461
  %tobool1540 = icmp ne i32 %1075, 0, !dbg !9461
  br i1 %tobool1540, label %cond.true1541, label %cond.false1542, !dbg !9461

cond.true1541:                                    ; preds = %if.end1539
  %1076 = load %struct.rtx_def*, %struct.rtx_def** %remainder, align 8, !dbg !9462
  br label %cond.end1543, !dbg !9461

cond.false1542:                                   ; preds = %if.end1539
  %1077 = load %struct.rtx_def*, %struct.rtx_def** %quotient, align 8, !dbg !9463
  br label %cond.end1543, !dbg !9461

cond.end1543:                                     ; preds = %cond.false1542, %cond.true1541
  %cond1544 = phi %struct.rtx_def* [ %1076, %cond.true1541 ], [ %1077, %cond.false1542 ], !dbg !9461
  %call1545 = call %struct.rtx_def* %1073(i32 %1074, %struct.rtx_def* %cond1544), !dbg !9459
  store %struct.rtx_def* %call1545, %struct.rtx_def** %retval, align 8, !dbg !9464
  br label %return, !dbg !9464

return:                                           ; preds = %cond.end1543, %if.then1475, %cond.end1437, %cond.end1302, %cond.end1185, %cond.end1055, %if.then921, %if.then591, %if.then318, %land.end34, %if.then25, %cond.end
  %1078 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9465
  ret %struct.rtx_def* %1078, !dbg !9465
}

declare dso_local i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @optab_libfunc(%struct.optab_d*, i32) #2

declare dso_local %struct.rtx_def* @gen_reg_rtx(i32) #2

declare dso_local %struct.rtx_def* @get_last_insn() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_store_flag_force(%struct.rtx_def* %target, i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1, i32 %mode, i32 %unsignedp, i32 %normalizep) #0 !dbg !9466 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %normalizep.addr = alloca i32, align 4
  %tem = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %trueval = alloca %struct.rtx_def*, align 8
  %falseval = alloca %struct.rtx_def*, align 8
  %rcode = alloca i32, align 4
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9469, metadata !DIExpression()), !dbg !9470
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !9471, metadata !DIExpression()), !dbg !9472
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !9473, metadata !DIExpression()), !dbg !9474
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !9475, metadata !DIExpression()), !dbg !9476
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9477, metadata !DIExpression()), !dbg !9478
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !9479, metadata !DIExpression()), !dbg !9480
  store i32 %normalizep, i32* %normalizep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %normalizep.addr, metadata !9481, metadata !DIExpression()), !dbg !9482
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !9483, metadata !DIExpression()), !dbg !9484
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !9485, metadata !DIExpression()), !dbg !9486
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %trueval, metadata !9487, metadata !DIExpression()), !dbg !9488
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %falseval, metadata !9489, metadata !DIExpression()), !dbg !9490
  %0 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9491
  %1 = load i32, i32* %code.addr, align 4, !dbg !9492
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9493
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9494
  %4 = load i32, i32* %mode.addr, align 4, !dbg !9495
  %5 = load i32, i32* %unsignedp.addr, align 4, !dbg !9496
  %6 = load i32, i32* %normalizep.addr, align 4, !dbg !9497
  %call = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %0, i32 %1, %struct.rtx_def* %2, %struct.rtx_def* %3, i32 %4, i32 %5, i32 %6), !dbg !9498
  store %struct.rtx_def* %call, %struct.rtx_def** %tem, align 8, !dbg !9499
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !9500
  %cmp = icmp ne %struct.rtx_def* %7, null, !dbg !9502
  br i1 %cmp, label %if.then, label %if.end, !dbg !9503

if.then:                                          ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !9504
  store %struct.rtx_def* %8, %struct.rtx_def** %retval, align 8, !dbg !9505
  br label %return, !dbg !9505

if.end:                                           ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9506
  %tobool = icmp ne %struct.rtx_def* %9, null, !dbg !9506
  br i1 %tobool, label %if.end3, label %if.then1, !dbg !9508

if.then1:                                         ; preds = %if.end
  %10 = load i32, i32* @word_mode, align 4, !dbg !9509
  %call2 = call %struct.rtx_def* @gen_reg_rtx(i32 %10), !dbg !9510
  store %struct.rtx_def* %call2, %struct.rtx_def** %target.addr, align 8, !dbg !9511
  br label %if.end3, !dbg !9512

if.end3:                                          ; preds = %if.then1, %if.end
  %11 = load i32, i32* %normalizep.addr, align 4, !dbg !9513
  %tobool4 = icmp ne i32 %11, 0, !dbg !9513
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !9513

cond.true:                                        ; preds = %if.end3
  %12 = load i32, i32* %normalizep.addr, align 4, !dbg !9514
  %conv = sext i32 %12 to i64, !dbg !9514
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv), !dbg !9514
  br label %cond.end, !dbg !9513

cond.false:                                       ; preds = %if.end3
  %13 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !9515
  br label %cond.end, !dbg !9513

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %call5, %cond.true ], [ %13, %cond.false ], !dbg !9513
  store %struct.rtx_def* %cond, %struct.rtx_def** %trueval, align 8, !dbg !9516
  %14 = load i32, i32* %code.addr, align 4, !dbg !9517
  %cmp6 = icmp eq i32 %14, 80, !dbg !9519
  br i1 %cmp6, label %land.lhs.true, label %if.end24, !dbg !9520

land.lhs.true:                                    ; preds = %cond.end
  %15 = load i32, i32* %mode.addr, align 4, !dbg !9521
  %idxprom = zext i32 %15 to i64, !dbg !9521
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !9521
  %16 = load i8, i8* %arrayidx, align 1, !dbg !9521
  %conv8 = zext i8 %16 to i32, !dbg !9521
  %cmp9 = icmp eq i32 %conv8, 2, !dbg !9522
  br i1 %cmp9, label %land.lhs.true11, label %if.end24, !dbg !9523

land.lhs.true11:                                  ; preds = %land.lhs.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9524
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !9524
  %bf.load = load i32, i32* %18, align 8, !dbg !9524
  %bf.clear = and i32 %bf.load, 65535, !dbg !9524
  %cmp12 = icmp eq i32 %bf.clear, 37, !dbg !9524
  br i1 %cmp12, label %land.lhs.true14, label %if.end24, !dbg !9525

land.lhs.true14:                                  ; preds = %land.lhs.true11
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9526
  %20 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9527
  %cmp15 = icmp eq %struct.rtx_def* %19, %20, !dbg !9528
  br i1 %cmp15, label %land.lhs.true17, label %if.end24, !dbg !9529

land.lhs.true17:                                  ; preds = %land.lhs.true14
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9530
  %22 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !9531
  %cmp18 = icmp eq %struct.rtx_def* %21, %22, !dbg !9532
  br i1 %cmp18, label %if.then20, label %if.end24, !dbg !9533

if.then20:                                        ; preds = %land.lhs.true17
  %call21 = call %struct.rtx_def* @gen_label_rtx(), !dbg !9534
  store %struct.rtx_def* %call21, %struct.rtx_def** %label, align 8, !dbg !9536
  %23 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9537
  %24 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !9538
  %25 = load i32, i32* %unsignedp.addr, align 4, !dbg !9539
  %26 = load i32, i32* %mode.addr, align 4, !dbg !9540
  %27 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !9541
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %23, %struct.rtx_def* %24, i32 81, i32 %25, i32 %26, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* %27, i32 -1), !dbg !9542
  %28 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9543
  %29 = load %struct.rtx_def*, %struct.rtx_def** %trueval, align 8, !dbg !9544
  %call22 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %28, %struct.rtx_def* %29), !dbg !9545
  %30 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !9546
  %call23 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %30), !dbg !9547
  %31 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9548
  store %struct.rtx_def* %31, %struct.rtx_def** %retval, align 8, !dbg !9549
  br label %return, !dbg !9549

if.end24:                                         ; preds = %land.lhs.true17, %land.lhs.true14, %land.lhs.true11, %land.lhs.true, %cond.end
  %32 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9550
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !9550
  %bf.load25 = load i32, i32* %33, align 8, !dbg !9550
  %bf.clear26 = and i32 %bf.load25, 65535, !dbg !9550
  %cmp27 = icmp eq i32 %bf.clear26, 37, !dbg !9550
  br i1 %cmp27, label %lor.lhs.false, label %if.then34, !dbg !9552

lor.lhs.false:                                    ; preds = %if.end24
  %34 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9553
  %35 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9554
  %call29 = call i32 @reg_mentioned_p(%struct.rtx_def* %34, %struct.rtx_def* %35), !dbg !9555
  %tobool30 = icmp ne i32 %call29, 0, !dbg !9555
  br i1 %tobool30, label %if.then34, label %lor.lhs.false31, !dbg !9556

lor.lhs.false31:                                  ; preds = %lor.lhs.false
  %36 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9557
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9558
  %call32 = call i32 @reg_mentioned_p(%struct.rtx_def* %36, %struct.rtx_def* %37), !dbg !9559
  %tobool33 = icmp ne i32 %call32, 0, !dbg !9559
  br i1 %tobool33, label %if.then34, label %if.end38, !dbg !9560

if.then34:                                        ; preds = %lor.lhs.false31, %lor.lhs.false, %if.end24
  %38 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9561
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !9561
  %bf.load35 = load i32, i32* %39, align 8, !dbg !9561
  %bf.lshr = lshr i32 %bf.load35, 16, !dbg !9561
  %bf.clear36 = and i32 %bf.lshr, 255, !dbg !9561
  %call37 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear36), !dbg !9562
  store %struct.rtx_def* %call37, %struct.rtx_def** %target.addr, align 8, !dbg !9563
  br label %if.end38, !dbg !9564

if.end38:                                         ; preds = %if.then34, %lor.lhs.false31
  %40 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !9565
  store %struct.rtx_def* %40, %struct.rtx_def** %falseval, align 8, !dbg !9566
  %41 = load i32, i32* %code.addr, align 4, !dbg !9567
  %42 = load i32, i32* %mode.addr, align 4, !dbg !9569
  %call39 = call i32 @can_compare_p(i32 %41, i32 %42, i32 0), !dbg !9570
  %tobool40 = icmp ne i32 %call39, 0, !dbg !9570
  br i1 %tobool40, label %if.end316, label %land.lhs.true41, !dbg !9571

land.lhs.true41:                                  ; preds = %if.end38
  %43 = load i32, i32* %mode.addr, align 4, !dbg !9572
  %idxprom42 = zext i32 %43 to i64, !dbg !9572
  %arrayidx43 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom42, !dbg !9572
  %44 = load i8, i8* %arrayidx43, align 1, !dbg !9572
  %conv44 = zext i8 %44 to i32, !dbg !9572
  %cmp45 = icmp eq i32 %conv44, 8, !dbg !9572
  br i1 %cmp45, label %lor.lhs.false65, label %lor.lhs.false47, !dbg !9572

lor.lhs.false47:                                  ; preds = %land.lhs.true41
  %45 = load i32, i32* %mode.addr, align 4, !dbg !9572
  %idxprom48 = zext i32 %45 to i64, !dbg !9572
  %arrayidx49 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom48, !dbg !9572
  %46 = load i8, i8* %arrayidx49, align 1, !dbg !9572
  %conv50 = zext i8 %46 to i32, !dbg !9572
  %cmp51 = icmp eq i32 %conv50, 9, !dbg !9572
  br i1 %cmp51, label %lor.lhs.false65, label %lor.lhs.false53, !dbg !9572

lor.lhs.false53:                                  ; preds = %lor.lhs.false47
  %47 = load i32, i32* %mode.addr, align 4, !dbg !9572
  %idxprom54 = zext i32 %47 to i64, !dbg !9572
  %arrayidx55 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom54, !dbg !9572
  %48 = load i8, i8* %arrayidx55, align 1, !dbg !9572
  %conv56 = zext i8 %48 to i32, !dbg !9572
  %cmp57 = icmp eq i32 %conv56, 11, !dbg !9572
  br i1 %cmp57, label %lor.lhs.false65, label %lor.lhs.false59, !dbg !9572

lor.lhs.false59:                                  ; preds = %lor.lhs.false53
  %49 = load i32, i32* %mode.addr, align 4, !dbg !9572
  %idxprom60 = zext i32 %49 to i64, !dbg !9572
  %arrayidx61 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom60, !dbg !9572
  %50 = load i8, i8* %arrayidx61, align 1, !dbg !9572
  %conv62 = zext i8 %50 to i32, !dbg !9572
  %cmp63 = icmp eq i32 %conv62, 17, !dbg !9572
  br i1 %cmp63, label %lor.lhs.false65, label %if.then278, !dbg !9573

lor.lhs.false65:                                  ; preds = %lor.lhs.false59, %lor.lhs.false53, %lor.lhs.false47, %land.lhs.true41
  %51 = load i32, i32* %code.addr, align 4, !dbg !9574
  %cmp66 = icmp eq i32 %51, 91, !dbg !9575
  br i1 %cmp66, label %if.then278, label %lor.lhs.false68, !dbg !9576

lor.lhs.false68:                                  ; preds = %lor.lhs.false65
  %52 = load i32, i32* %code.addr, align 4, !dbg !9577
  %cmp69 = icmp eq i32 %52, 90, !dbg !9578
  br i1 %cmp69, label %if.then278, label %lor.lhs.false71, !dbg !9579

lor.lhs.false71:                                  ; preds = %lor.lhs.false68
  %53 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom72 = zext i32 %53 to i64, !dbg !9580
  %arrayidx73 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom72, !dbg !9580
  %54 = load i8, i8* %arrayidx73, align 1, !dbg !9580
  %conv74 = zext i8 %54 to i32, !dbg !9580
  %cmp75 = icmp eq i32 %conv74, 8, !dbg !9580
  br i1 %cmp75, label %land.lhs.true95, label %lor.lhs.false77, !dbg !9580

lor.lhs.false77:                                  ; preds = %lor.lhs.false71
  %55 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom78 = zext i32 %55 to i64, !dbg !9580
  %arrayidx79 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom78, !dbg !9580
  %56 = load i8, i8* %arrayidx79, align 1, !dbg !9580
  %conv80 = zext i8 %56 to i32, !dbg !9580
  %cmp81 = icmp eq i32 %conv80, 9, !dbg !9580
  br i1 %cmp81, label %land.lhs.true95, label %lor.lhs.false83, !dbg !9580

lor.lhs.false83:                                  ; preds = %lor.lhs.false77
  %57 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom84 = zext i32 %57 to i64, !dbg !9580
  %arrayidx85 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom84, !dbg !9580
  %58 = load i8, i8* %arrayidx85, align 1, !dbg !9580
  %conv86 = zext i8 %58 to i32, !dbg !9580
  %cmp87 = icmp eq i32 %conv86, 11, !dbg !9580
  br i1 %cmp87, label %land.lhs.true95, label %lor.lhs.false89, !dbg !9580

lor.lhs.false89:                                  ; preds = %lor.lhs.false83
  %59 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom90 = zext i32 %59 to i64, !dbg !9580
  %arrayidx91 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom90, !dbg !9580
  %60 = load i8, i8* %arrayidx91, align 1, !dbg !9580
  %conv92 = zext i8 %60 to i32, !dbg !9580
  %cmp93 = icmp eq i32 %conv92, 17, !dbg !9580
  br i1 %cmp93, label %land.lhs.true95, label %land.lhs.true166, !dbg !9580

land.lhs.true95:                                  ; preds = %lor.lhs.false89, %lor.lhs.false83, %lor.lhs.false77, %lor.lhs.false71
  %61 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom96 = zext i32 %61 to i64, !dbg !9580
  %arrayidx97 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom96, !dbg !9580
  %62 = load i8, i8* %arrayidx97, align 1, !dbg !9580
  %conv98 = zext i8 %62 to i32, !dbg !9580
  %cmp99 = icmp eq i32 %conv98, 8, !dbg !9580
  br i1 %cmp99, label %cond.true107, label %lor.lhs.false101, !dbg !9580

lor.lhs.false101:                                 ; preds = %land.lhs.true95
  %63 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom102 = zext i32 %63 to i64, !dbg !9580
  %arrayidx103 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom102, !dbg !9580
  %64 = load i8, i8* %arrayidx103, align 1, !dbg !9580
  %conv104 = zext i8 %64 to i32, !dbg !9580
  %cmp105 = icmp eq i32 %conv104, 9, !dbg !9580
  br i1 %cmp105, label %cond.true107, label %cond.false108, !dbg !9580

cond.true107:                                     ; preds = %lor.lhs.false101, %land.lhs.true95
  %65 = load i32, i32* %mode.addr, align 4, !dbg !9580
  br label %cond.end112, !dbg !9580

cond.false108:                                    ; preds = %lor.lhs.false101
  %66 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom109 = zext i32 %66 to i64, !dbg !9580
  %arrayidx110 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom109, !dbg !9580
  %67 = load i8, i8* %arrayidx110, align 1, !dbg !9580
  %conv111 = zext i8 %67 to i32, !dbg !9580
  br label %cond.end112, !dbg !9580

cond.end112:                                      ; preds = %cond.false108, %cond.true107
  %cond113 = phi i32 [ %65, %cond.true107 ], [ %conv111, %cond.false108 ], !dbg !9580
  %idxprom114 = zext i32 %cond113 to i64, !dbg !9580
  %arrayidx115 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom114, !dbg !9580
  %68 = load i8, i8* %arrayidx115, align 1, !dbg !9580
  %conv116 = zext i8 %68 to i32, !dbg !9580
  %cmp117 = icmp eq i32 %conv116, 9, !dbg !9580
  br i1 %cmp117, label %cond.true119, label %cond.false138, !dbg !9580

cond.true119:                                     ; preds = %cond.end112
  %69 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom120 = zext i32 %69 to i64, !dbg !9580
  %arrayidx121 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom120, !dbg !9580
  %70 = load i8, i8* %arrayidx121, align 1, !dbg !9580
  %conv122 = zext i8 %70 to i32, !dbg !9580
  %cmp123 = icmp eq i32 %conv122, 8, !dbg !9580
  br i1 %cmp123, label %cond.true131, label %lor.lhs.false125, !dbg !9580

lor.lhs.false125:                                 ; preds = %cond.true119
  %71 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom126 = zext i32 %71 to i64, !dbg !9580
  %arrayidx127 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom126, !dbg !9580
  %72 = load i8, i8* %arrayidx127, align 1, !dbg !9580
  %conv128 = zext i8 %72 to i32, !dbg !9580
  %cmp129 = icmp eq i32 %conv128, 9, !dbg !9580
  br i1 %cmp129, label %cond.true131, label %cond.false132, !dbg !9580

cond.true131:                                     ; preds = %lor.lhs.false125, %cond.true119
  %73 = load i32, i32* %mode.addr, align 4, !dbg !9580
  br label %cond.end136, !dbg !9580

cond.false132:                                    ; preds = %lor.lhs.false125
  %74 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom133 = zext i32 %74 to i64, !dbg !9580
  %arrayidx134 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom133, !dbg !9580
  %75 = load i8, i8* %arrayidx134, align 1, !dbg !9580
  %conv135 = zext i8 %75 to i32, !dbg !9580
  br label %cond.end136, !dbg !9580

cond.end136:                                      ; preds = %cond.false132, %cond.true131
  %cond137 = phi i32 [ %73, %cond.true131 ], [ %conv135, %cond.false132 ], !dbg !9580
  %sub = sub i32 %cond137, 42, !dbg !9580
  %add = add i32 %sub, 4, !dbg !9580
  br label %cond.end158, !dbg !9580

cond.false138:                                    ; preds = %cond.end112
  %76 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom139 = zext i32 %76 to i64, !dbg !9580
  %arrayidx140 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom139, !dbg !9580
  %77 = load i8, i8* %arrayidx140, align 1, !dbg !9580
  %conv141 = zext i8 %77 to i32, !dbg !9580
  %cmp142 = icmp eq i32 %conv141, 8, !dbg !9580
  br i1 %cmp142, label %cond.true150, label %lor.lhs.false144, !dbg !9580

lor.lhs.false144:                                 ; preds = %cond.false138
  %78 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom145 = zext i32 %78 to i64, !dbg !9580
  %arrayidx146 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom145, !dbg !9580
  %79 = load i8, i8* %arrayidx146, align 1, !dbg !9580
  %conv147 = zext i8 %79 to i32, !dbg !9580
  %cmp148 = icmp eq i32 %conv147, 9, !dbg !9580
  br i1 %cmp148, label %cond.true150, label %cond.false151, !dbg !9580

cond.true150:                                     ; preds = %lor.lhs.false144, %cond.false138
  %80 = load i32, i32* %mode.addr, align 4, !dbg !9580
  br label %cond.end155, !dbg !9580

cond.false151:                                    ; preds = %lor.lhs.false144
  %81 = load i32, i32* %mode.addr, align 4, !dbg !9580
  %idxprom152 = zext i32 %81 to i64, !dbg !9580
  %arrayidx153 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom152, !dbg !9580
  %82 = load i8, i8* %arrayidx153, align 1, !dbg !9580
  %conv154 = zext i8 %82 to i32, !dbg !9580
  br label %cond.end155, !dbg !9580

cond.end155:                                      ; preds = %cond.false151, %cond.true150
  %cond156 = phi i32 [ %80, %cond.true150 ], [ %conv154, %cond.false151 ], !dbg !9580
  %sub157 = sub i32 %cond156, 38, !dbg !9580
  br label %cond.end158, !dbg !9580

cond.end158:                                      ; preds = %cond.end155, %cond.end136
  %cond159 = phi i32 [ %add, %cond.end136 ], [ %sub157, %cond.end155 ], !dbg !9580
  %idxprom160 = zext i32 %cond159 to i64, !dbg !9580
  %arrayidx161 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom160, !dbg !9580
  %83 = load %struct.real_format*, %struct.real_format** %arrayidx161, align 8, !dbg !9580
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %83, i32 0, i32 11, !dbg !9580
  %84 = load i8, i8* %has_nans, align 2, !dbg !9580
  %conv162 = zext i8 %84 to i32, !dbg !9580
  %tobool163 = icmp ne i32 %conv162, 0, !dbg !9580
  br i1 %tobool163, label %land.lhs.true164, label %land.lhs.true166, !dbg !9580

land.lhs.true164:                                 ; preds = %cond.end158
  %85 = load i32, i32* @flag_finite_math_only, align 4, !dbg !9580
  %tobool165 = icmp ne i32 %85, 0, !dbg !9580
  br i1 %tobool165, label %land.lhs.true166, label %lor.lhs.false172, !dbg !9581

land.lhs.true166:                                 ; preds = %land.lhs.true164, %cond.end158, %lor.lhs.false89
  %86 = load i32, i32* %code.addr, align 4, !dbg !9582
  %cmp167 = icmp eq i32 %86, 97, !dbg !9583
  br i1 %cmp167, label %if.then278, label %lor.lhs.false169, !dbg !9584

lor.lhs.false169:                                 ; preds = %land.lhs.true166
  %87 = load i32, i32* %code.addr, align 4, !dbg !9585
  %cmp170 = icmp eq i32 %87, 92, !dbg !9586
  br i1 %cmp170, label %if.then278, label %lor.lhs.false172, !dbg !9587

lor.lhs.false172:                                 ; preds = %lor.lhs.false169, %land.lhs.true164
  %88 = load i32, i32* @flag_signaling_nans, align 4, !dbg !9588
  %tobool173 = icmp ne i32 %88, 0, !dbg !9588
  br i1 %tobool173, label %land.lhs.true174, label %land.lhs.true272, !dbg !9588

land.lhs.true174:                                 ; preds = %lor.lhs.false172
  %89 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom175 = zext i32 %89 to i64, !dbg !9588
  %arrayidx176 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom175, !dbg !9588
  %90 = load i8, i8* %arrayidx176, align 1, !dbg !9588
  %conv177 = zext i8 %90 to i32, !dbg !9588
  %cmp178 = icmp eq i32 %conv177, 8, !dbg !9588
  br i1 %cmp178, label %land.lhs.true198, label %lor.lhs.false180, !dbg !9588

lor.lhs.false180:                                 ; preds = %land.lhs.true174
  %91 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom181 = zext i32 %91 to i64, !dbg !9588
  %arrayidx182 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom181, !dbg !9588
  %92 = load i8, i8* %arrayidx182, align 1, !dbg !9588
  %conv183 = zext i8 %92 to i32, !dbg !9588
  %cmp184 = icmp eq i32 %conv183, 9, !dbg !9588
  br i1 %cmp184, label %land.lhs.true198, label %lor.lhs.false186, !dbg !9588

lor.lhs.false186:                                 ; preds = %lor.lhs.false180
  %93 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom187 = zext i32 %93 to i64, !dbg !9588
  %arrayidx188 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom187, !dbg !9588
  %94 = load i8, i8* %arrayidx188, align 1, !dbg !9588
  %conv189 = zext i8 %94 to i32, !dbg !9588
  %cmp190 = icmp eq i32 %conv189, 11, !dbg !9588
  br i1 %cmp190, label %land.lhs.true198, label %lor.lhs.false192, !dbg !9588

lor.lhs.false192:                                 ; preds = %lor.lhs.false186
  %95 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom193 = zext i32 %95 to i64, !dbg !9588
  %arrayidx194 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom193, !dbg !9588
  %96 = load i8, i8* %arrayidx194, align 1, !dbg !9588
  %conv195 = zext i8 %96 to i32, !dbg !9588
  %cmp196 = icmp eq i32 %conv195, 17, !dbg !9588
  br i1 %cmp196, label %land.lhs.true198, label %land.lhs.true272, !dbg !9588

land.lhs.true198:                                 ; preds = %lor.lhs.false192, %lor.lhs.false186, %lor.lhs.false180, %land.lhs.true174
  %97 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom199 = zext i32 %97 to i64, !dbg !9588
  %arrayidx200 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom199, !dbg !9588
  %98 = load i8, i8* %arrayidx200, align 1, !dbg !9588
  %conv201 = zext i8 %98 to i32, !dbg !9588
  %cmp202 = icmp eq i32 %conv201, 8, !dbg !9588
  br i1 %cmp202, label %cond.true210, label %lor.lhs.false204, !dbg !9588

lor.lhs.false204:                                 ; preds = %land.lhs.true198
  %99 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom205 = zext i32 %99 to i64, !dbg !9588
  %arrayidx206 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom205, !dbg !9588
  %100 = load i8, i8* %arrayidx206, align 1, !dbg !9588
  %conv207 = zext i8 %100 to i32, !dbg !9588
  %cmp208 = icmp eq i32 %conv207, 9, !dbg !9588
  br i1 %cmp208, label %cond.true210, label %cond.false211, !dbg !9588

cond.true210:                                     ; preds = %lor.lhs.false204, %land.lhs.true198
  %101 = load i32, i32* %mode.addr, align 4, !dbg !9588
  br label %cond.end215, !dbg !9588

cond.false211:                                    ; preds = %lor.lhs.false204
  %102 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom212 = zext i32 %102 to i64, !dbg !9588
  %arrayidx213 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom212, !dbg !9588
  %103 = load i8, i8* %arrayidx213, align 1, !dbg !9588
  %conv214 = zext i8 %103 to i32, !dbg !9588
  br label %cond.end215, !dbg !9588

cond.end215:                                      ; preds = %cond.false211, %cond.true210
  %cond216 = phi i32 [ %101, %cond.true210 ], [ %conv214, %cond.false211 ], !dbg !9588
  %idxprom217 = zext i32 %cond216 to i64, !dbg !9588
  %arrayidx218 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom217, !dbg !9588
  %104 = load i8, i8* %arrayidx218, align 1, !dbg !9588
  %conv219 = zext i8 %104 to i32, !dbg !9588
  %cmp220 = icmp eq i32 %conv219, 9, !dbg !9588
  br i1 %cmp220, label %cond.true222, label %cond.false243, !dbg !9588

cond.true222:                                     ; preds = %cond.end215
  %105 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom223 = zext i32 %105 to i64, !dbg !9588
  %arrayidx224 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom223, !dbg !9588
  %106 = load i8, i8* %arrayidx224, align 1, !dbg !9588
  %conv225 = zext i8 %106 to i32, !dbg !9588
  %cmp226 = icmp eq i32 %conv225, 8, !dbg !9588
  br i1 %cmp226, label %cond.true234, label %lor.lhs.false228, !dbg !9588

lor.lhs.false228:                                 ; preds = %cond.true222
  %107 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom229 = zext i32 %107 to i64, !dbg !9588
  %arrayidx230 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom229, !dbg !9588
  %108 = load i8, i8* %arrayidx230, align 1, !dbg !9588
  %conv231 = zext i8 %108 to i32, !dbg !9588
  %cmp232 = icmp eq i32 %conv231, 9, !dbg !9588
  br i1 %cmp232, label %cond.true234, label %cond.false235, !dbg !9588

cond.true234:                                     ; preds = %lor.lhs.false228, %cond.true222
  %109 = load i32, i32* %mode.addr, align 4, !dbg !9588
  br label %cond.end239, !dbg !9588

cond.false235:                                    ; preds = %lor.lhs.false228
  %110 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom236 = zext i32 %110 to i64, !dbg !9588
  %arrayidx237 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom236, !dbg !9588
  %111 = load i8, i8* %arrayidx237, align 1, !dbg !9588
  %conv238 = zext i8 %111 to i32, !dbg !9588
  br label %cond.end239, !dbg !9588

cond.end239:                                      ; preds = %cond.false235, %cond.true234
  %cond240 = phi i32 [ %109, %cond.true234 ], [ %conv238, %cond.false235 ], !dbg !9588
  %sub241 = sub i32 %cond240, 42, !dbg !9588
  %add242 = add i32 %sub241, 4, !dbg !9588
  br label %cond.end263, !dbg !9588

cond.false243:                                    ; preds = %cond.end215
  %112 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom244 = zext i32 %112 to i64, !dbg !9588
  %arrayidx245 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom244, !dbg !9588
  %113 = load i8, i8* %arrayidx245, align 1, !dbg !9588
  %conv246 = zext i8 %113 to i32, !dbg !9588
  %cmp247 = icmp eq i32 %conv246, 8, !dbg !9588
  br i1 %cmp247, label %cond.true255, label %lor.lhs.false249, !dbg !9588

lor.lhs.false249:                                 ; preds = %cond.false243
  %114 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom250 = zext i32 %114 to i64, !dbg !9588
  %arrayidx251 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom250, !dbg !9588
  %115 = load i8, i8* %arrayidx251, align 1, !dbg !9588
  %conv252 = zext i8 %115 to i32, !dbg !9588
  %cmp253 = icmp eq i32 %conv252, 9, !dbg !9588
  br i1 %cmp253, label %cond.true255, label %cond.false256, !dbg !9588

cond.true255:                                     ; preds = %lor.lhs.false249, %cond.false243
  %116 = load i32, i32* %mode.addr, align 4, !dbg !9588
  br label %cond.end260, !dbg !9588

cond.false256:                                    ; preds = %lor.lhs.false249
  %117 = load i32, i32* %mode.addr, align 4, !dbg !9588
  %idxprom257 = zext i32 %117 to i64, !dbg !9588
  %arrayidx258 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom257, !dbg !9588
  %118 = load i8, i8* %arrayidx258, align 1, !dbg !9588
  %conv259 = zext i8 %118 to i32, !dbg !9588
  br label %cond.end260, !dbg !9588

cond.end260:                                      ; preds = %cond.false256, %cond.true255
  %cond261 = phi i32 [ %116, %cond.true255 ], [ %conv259, %cond.false256 ], !dbg !9588
  %sub262 = sub i32 %cond261, 38, !dbg !9588
  br label %cond.end263, !dbg !9588

cond.end263:                                      ; preds = %cond.end260, %cond.end239
  %cond264 = phi i32 [ %add242, %cond.end239 ], [ %sub262, %cond.end260 ], !dbg !9588
  %idxprom265 = zext i32 %cond264 to i64, !dbg !9588
  %arrayidx266 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom265, !dbg !9588
  %119 = load %struct.real_format*, %struct.real_format** %arrayidx266, align 8, !dbg !9588
  %has_nans267 = getelementptr inbounds %struct.real_format, %struct.real_format* %119, i32 0, i32 11, !dbg !9588
  %120 = load i8, i8* %has_nans267, align 2, !dbg !9588
  %conv268 = zext i8 %120 to i32, !dbg !9588
  %tobool269 = icmp ne i32 %conv268, 0, !dbg !9588
  br i1 %tobool269, label %land.lhs.true270, label %land.lhs.true272, !dbg !9588

land.lhs.true270:                                 ; preds = %cond.end263
  %121 = load i32, i32* @flag_finite_math_only, align 4, !dbg !9588
  %tobool271 = icmp ne i32 %121, 0, !dbg !9588
  br i1 %tobool271, label %land.lhs.true272, label %if.end316, !dbg !9589

land.lhs.true272:                                 ; preds = %land.lhs.true270, %cond.end263, %lor.lhs.false192, %lor.lhs.false172
  %122 = load i32, i32* %code.addr, align 4, !dbg !9590
  %cmp273 = icmp eq i32 %122, 81, !dbg !9591
  br i1 %cmp273, label %if.then278, label %lor.lhs.false275, !dbg !9592

lor.lhs.false275:                                 ; preds = %land.lhs.true272
  %123 = load i32, i32* %code.addr, align 4, !dbg !9593
  %cmp276 = icmp eq i32 %123, 80, !dbg !9594
  br i1 %cmp276, label %if.then278, label %if.end316, !dbg !9595

if.then278:                                       ; preds = %lor.lhs.false275, %land.lhs.true272, %lor.lhs.false169, %land.lhs.true166, %lor.lhs.false68, %lor.lhs.false65, %lor.lhs.false59
  call void @llvm.dbg.declare(metadata i32* %rcode, metadata !9596, metadata !DIExpression()), !dbg !9598
  %124 = load i32, i32* %mode.addr, align 4, !dbg !9599
  %idxprom279 = zext i32 %124 to i64, !dbg !9599
  %arrayidx280 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom279, !dbg !9599
  %125 = load i8, i8* %arrayidx280, align 1, !dbg !9599
  %conv281 = zext i8 %125 to i32, !dbg !9599
  %cmp282 = icmp eq i32 %conv281, 8, !dbg !9599
  br i1 %cmp282, label %if.then302, label %lor.lhs.false284, !dbg !9599

lor.lhs.false284:                                 ; preds = %if.then278
  %126 = load i32, i32* %mode.addr, align 4, !dbg !9599
  %idxprom285 = zext i32 %126 to i64, !dbg !9599
  %arrayidx286 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom285, !dbg !9599
  %127 = load i8, i8* %arrayidx286, align 1, !dbg !9599
  %conv287 = zext i8 %127 to i32, !dbg !9599
  %cmp288 = icmp eq i32 %conv287, 9, !dbg !9599
  br i1 %cmp288, label %if.then302, label %lor.lhs.false290, !dbg !9599

lor.lhs.false290:                                 ; preds = %lor.lhs.false284
  %128 = load i32, i32* %mode.addr, align 4, !dbg !9599
  %idxprom291 = zext i32 %128 to i64, !dbg !9599
  %arrayidx292 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom291, !dbg !9599
  %129 = load i8, i8* %arrayidx292, align 1, !dbg !9599
  %conv293 = zext i8 %129 to i32, !dbg !9599
  %cmp294 = icmp eq i32 %conv293, 11, !dbg !9599
  br i1 %cmp294, label %if.then302, label %lor.lhs.false296, !dbg !9599

lor.lhs.false296:                                 ; preds = %lor.lhs.false290
  %130 = load i32, i32* %mode.addr, align 4, !dbg !9599
  %idxprom297 = zext i32 %130 to i64, !dbg !9599
  %arrayidx298 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom297, !dbg !9599
  %131 = load i8, i8* %arrayidx298, align 1, !dbg !9599
  %conv299 = zext i8 %131 to i32, !dbg !9599
  %cmp300 = icmp eq i32 %conv299, 17, !dbg !9599
  br i1 %cmp300, label %if.then302, label %if.else, !dbg !9601

if.then302:                                       ; preds = %lor.lhs.false296, %lor.lhs.false290, %lor.lhs.false284, %if.then278
  %132 = load i32, i32* %code.addr, align 4, !dbg !9602
  %call303 = call i32 @reverse_condition_maybe_unordered(i32 %132), !dbg !9603
  store i32 %call303, i32* %rcode, align 4, !dbg !9604
  br label %if.end305, !dbg !9605

if.else:                                          ; preds = %lor.lhs.false296
  %133 = load i32, i32* %code.addr, align 4, !dbg !9606
  %call304 = call i32 @reverse_condition(i32 %133), !dbg !9607
  store i32 %call304, i32* %rcode, align 4, !dbg !9608
  br label %if.end305

if.end305:                                        ; preds = %if.else, %if.then302
  %134 = load i32, i32* %rcode, align 4, !dbg !9609
  %135 = load i32, i32* %mode.addr, align 4, !dbg !9611
  %call306 = call i32 @can_compare_p(i32 %134, i32 %135, i32 0), !dbg !9612
  %tobool307 = icmp ne i32 %call306, 0, !dbg !9612
  br i1 %tobool307, label %if.then314, label %lor.lhs.false308, !dbg !9613

lor.lhs.false308:                                 ; preds = %if.end305
  %136 = load i32, i32* %code.addr, align 4, !dbg !9614
  %cmp309 = icmp eq i32 %136, 91, !dbg !9615
  br i1 %cmp309, label %land.lhs.true311, label %if.end315, !dbg !9616

land.lhs.true311:                                 ; preds = %lor.lhs.false308
  %137 = load i32, i32* %mode.addr, align 4, !dbg !9617
  %call312 = call i32 @can_compare_p(i32 91, i32 %137, i32 0), !dbg !9618
  %tobool313 = icmp ne i32 %call312, 0, !dbg !9618
  br i1 %tobool313, label %if.end315, label %if.then314, !dbg !9619

if.then314:                                       ; preds = %land.lhs.true311, %if.end305
  %138 = load %struct.rtx_def*, %struct.rtx_def** %trueval, align 8, !dbg !9620
  store %struct.rtx_def* %138, %struct.rtx_def** %falseval, align 8, !dbg !9622
  %139 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !9623
  store %struct.rtx_def* %139, %struct.rtx_def** %trueval, align 8, !dbg !9624
  %140 = load i32, i32* %rcode, align 4, !dbg !9625
  store i32 %140, i32* %code.addr, align 4, !dbg !9626
  br label %if.end315, !dbg !9627

if.end315:                                        ; preds = %if.then314, %land.lhs.true311, %lor.lhs.false308
  br label %if.end316, !dbg !9628

if.end316:                                        ; preds = %if.end315, %lor.lhs.false275, %land.lhs.true270, %if.end38
  %141 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9629
  %142 = load %struct.rtx_def*, %struct.rtx_def** %trueval, align 8, !dbg !9630
  %call317 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %141, %struct.rtx_def* %142), !dbg !9631
  %call318 = call %struct.rtx_def* @gen_label_rtx(), !dbg !9632
  store %struct.rtx_def* %call318, %struct.rtx_def** %label, align 8, !dbg !9633
  %143 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9634
  %144 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9635
  %145 = load i32, i32* %code.addr, align 4, !dbg !9636
  %146 = load i32, i32* %unsignedp.addr, align 4, !dbg !9637
  %147 = load i32, i32* %mode.addr, align 4, !dbg !9638
  %148 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !9639
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %143, %struct.rtx_def* %144, i32 %145, i32 %146, i32 %147, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* %148, i32 -1), !dbg !9640
  %149 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9641
  %150 = load %struct.rtx_def*, %struct.rtx_def** %falseval, align 8, !dbg !9642
  %call319 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %149, %struct.rtx_def* %150), !dbg !9643
  %151 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !9644
  %call320 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %151), !dbg !9645
  %152 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9646
  store %struct.rtx_def* %152, %struct.rtx_def** %retval, align 8, !dbg !9647
  br label %return, !dbg !9647

return:                                           ; preds = %if.end316, %if.then20, %if.then
  %153 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9648
  ret %struct.rtx_def* %153, !dbg !9648
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @choose_multiplier(i64 %d, i32 %n, i32 %precision, %struct.rtx_def** %multiplier_ptr, i32* %post_shift_ptr, i32* %lgup_ptr) #0 !dbg !9649 {
entry:
  %retval = alloca i64, align 8
  %d.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  %precision.addr = alloca i32, align 4
  %multiplier_ptr.addr = alloca %struct.rtx_def**, align 8
  %post_shift_ptr.addr = alloca i32*, align 8
  %lgup_ptr.addr = alloca i32*, align 8
  %mhigh_hi = alloca i64, align 8
  %mlow_hi = alloca i64, align 8
  %mhigh_lo = alloca i64, align 8
  %mlow_lo = alloca i64, align 8
  %lgup = alloca i32, align 4
  %post_shift = alloca i32, align 4
  %pow = alloca i32, align 4
  %pow2 = alloca i32, align 4
  %nl = alloca i64, align 8
  %dummy1 = alloca i64, align 8
  %nh = alloca i64, align 8
  %dummy2 = alloca i64, align 8
  %ml_lo = alloca i64, align 8
  %mh_lo = alloca i64, align 8
  %mask = alloca i64, align 8
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !9653, metadata !DIExpression()), !dbg !9654
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !9655, metadata !DIExpression()), !dbg !9656
  store i32 %precision, i32* %precision.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %precision.addr, metadata !9657, metadata !DIExpression()), !dbg !9658
  store %struct.rtx_def** %multiplier_ptr, %struct.rtx_def*** %multiplier_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %multiplier_ptr.addr, metadata !9659, metadata !DIExpression()), !dbg !9660
  store i32* %post_shift_ptr, i32** %post_shift_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %post_shift_ptr.addr, metadata !9661, metadata !DIExpression()), !dbg !9662
  store i32* %lgup_ptr, i32** %lgup_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %lgup_ptr.addr, metadata !9663, metadata !DIExpression()), !dbg !9664
  call void @llvm.dbg.declare(metadata i64* %mhigh_hi, metadata !9665, metadata !DIExpression()), !dbg !9666
  call void @llvm.dbg.declare(metadata i64* %mlow_hi, metadata !9667, metadata !DIExpression()), !dbg !9668
  call void @llvm.dbg.declare(metadata i64* %mhigh_lo, metadata !9669, metadata !DIExpression()), !dbg !9670
  call void @llvm.dbg.declare(metadata i64* %mlow_lo, metadata !9671, metadata !DIExpression()), !dbg !9672
  call void @llvm.dbg.declare(metadata i32* %lgup, metadata !9673, metadata !DIExpression()), !dbg !9674
  call void @llvm.dbg.declare(metadata i32* %post_shift, metadata !9675, metadata !DIExpression()), !dbg !9676
  call void @llvm.dbg.declare(metadata i32* %pow, metadata !9677, metadata !DIExpression()), !dbg !9678
  call void @llvm.dbg.declare(metadata i32* %pow2, metadata !9679, metadata !DIExpression()), !dbg !9680
  call void @llvm.dbg.declare(metadata i64* %nl, metadata !9681, metadata !DIExpression()), !dbg !9682
  call void @llvm.dbg.declare(metadata i64* %dummy1, metadata !9683, metadata !DIExpression()), !dbg !9684
  call void @llvm.dbg.declare(metadata i64* %nh, metadata !9685, metadata !DIExpression()), !dbg !9686
  call void @llvm.dbg.declare(metadata i64* %dummy2, metadata !9687, metadata !DIExpression()), !dbg !9688
  %0 = load i64, i64* %d.addr, align 8, !dbg !9689
  %call = call i32 @ceil_log2(i64 %0), !dbg !9690
  store i32 %call, i32* %lgup, align 4, !dbg !9691
  %1 = load i32, i32* %lgup, align 4, !dbg !9692
  %2 = load i32, i32* %n.addr, align 4, !dbg !9692
  %cmp = icmp sle i32 %1, %2, !dbg !9692
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9692

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3296, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9692
  br label %cond.end, !dbg !9692

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9692

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9692
  %3 = load i32, i32* %n.addr, align 4, !dbg !9693
  %4 = load i32, i32* %lgup, align 4, !dbg !9694
  %add = add nsw i32 %3, %4, !dbg !9695
  store i32 %add, i32* %pow, align 4, !dbg !9696
  %5 = load i32, i32* %n.addr, align 4, !dbg !9697
  %6 = load i32, i32* %lgup, align 4, !dbg !9698
  %add1 = add nsw i32 %5, %6, !dbg !9699
  %7 = load i32, i32* %precision.addr, align 4, !dbg !9700
  %sub = sub nsw i32 %add1, %7, !dbg !9701
  store i32 %sub, i32* %pow2, align 4, !dbg !9702
  %8 = load i32, i32* %pow, align 4, !dbg !9703
  %cmp2 = icmp ne i32 %8, 128, !dbg !9703
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !9703

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3304, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9703
  br label %cond.end5, !dbg !9703

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9703

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !9703
  %9 = load i32, i32* %pow, align 4, !dbg !9704
  %cmp7 = icmp sge i32 %9, 64, !dbg !9706
  br i1 %cmp7, label %if.then, label %if.else, !dbg !9707

if.then:                                          ; preds = %cond.end5
  %10 = load i32, i32* %pow, align 4, !dbg !9708
  %sub8 = sub nsw i32 %10, 64, !dbg !9710
  %sh_prom = zext i32 %sub8 to i64, !dbg !9711
  %shl = shl i64 1, %sh_prom, !dbg !9711
  store i64 %shl, i64* %nh, align 8, !dbg !9712
  store i64 0, i64* %nl, align 8, !dbg !9713
  br label %if.end, !dbg !9714

if.else:                                          ; preds = %cond.end5
  store i64 0, i64* %nh, align 8, !dbg !9715
  %11 = load i32, i32* %pow, align 4, !dbg !9717
  %sh_prom9 = zext i32 %11 to i64, !dbg !9718
  %shl10 = shl i64 1, %sh_prom9, !dbg !9718
  store i64 %shl10, i64* %nl, align 8, !dbg !9719
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load i64, i64* %nl, align 8, !dbg !9720
  %13 = load i64, i64* %nh, align 8, !dbg !9721
  %14 = load i64, i64* %d.addr, align 8, !dbg !9722
  %call11 = call i32 @div_and_round_double(i32 67, i32 1, i64 %12, i64 %13, i64 %14, i64 0, i64* %mlow_lo, i64* %mlow_hi, i64* %dummy1, i64* %dummy2), !dbg !9723
  %15 = load i32, i32* %pow2, align 4, !dbg !9724
  %cmp12 = icmp sge i32 %15, 64, !dbg !9726
  br i1 %cmp12, label %if.then13, label %if.else17, !dbg !9727

if.then13:                                        ; preds = %if.end
  %16 = load i32, i32* %pow2, align 4, !dbg !9728
  %sub14 = sub nsw i32 %16, 64, !dbg !9729
  %sh_prom15 = zext i32 %sub14 to i64, !dbg !9730
  %shl16 = shl i64 1, %sh_prom15, !dbg !9730
  %17 = load i64, i64* %nh, align 8, !dbg !9731
  %or = or i64 %17, %shl16, !dbg !9731
  store i64 %or, i64* %nh, align 8, !dbg !9731
  br label %if.end21, !dbg !9732

if.else17:                                        ; preds = %if.end
  %18 = load i32, i32* %pow2, align 4, !dbg !9733
  %sh_prom18 = zext i32 %18 to i64, !dbg !9734
  %shl19 = shl i64 1, %sh_prom18, !dbg !9734
  %19 = load i64, i64* %nl, align 8, !dbg !9735
  %or20 = or i64 %19, %shl19, !dbg !9735
  store i64 %or20, i64* %nl, align 8, !dbg !9735
  br label %if.end21

if.end21:                                         ; preds = %if.else17, %if.then13
  %20 = load i64, i64* %nl, align 8, !dbg !9736
  %21 = load i64, i64* %nh, align 8, !dbg !9737
  %22 = load i64, i64* %d.addr, align 8, !dbg !9738
  %call22 = call i32 @div_and_round_double(i32 67, i32 1, i64 %20, i64 %21, i64 %22, i64 0, i64* %mhigh_lo, i64* %mhigh_hi, i64* %dummy1, i64* %dummy2), !dbg !9739
  %23 = load i64, i64* %mhigh_hi, align 8, !dbg !9740
  %tobool = icmp ne i64 %23, 0, !dbg !9740
  br i1 %tobool, label %lor.lhs.false, label %cond.false26, !dbg !9740

lor.lhs.false:                                    ; preds = %if.end21
  %24 = load i64, i64* %nh, align 8, !dbg !9740
  %25 = load i64, i64* %d.addr, align 8, !dbg !9740
  %sub23 = sub i64 %24, %25, !dbg !9740
  %26 = load i64, i64* %d.addr, align 8, !dbg !9740
  %cmp24 = icmp ult i64 %sub23, %26, !dbg !9740
  br i1 %cmp24, label %cond.false26, label %cond.true25, !dbg !9740

cond.true25:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3328, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9740
  br label %cond.end27, !dbg !9740

cond.false26:                                     ; preds = %lor.lhs.false, %if.end21
  br label %cond.end27, !dbg !9740

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi i32 [ 0, %cond.true25 ], [ 0, %cond.false26 ], !dbg !9740
  %27 = load i64, i64* %mhigh_hi, align 8, !dbg !9741
  %cmp29 = icmp sle i64 %27, 1, !dbg !9741
  br i1 %cmp29, label %land.lhs.true, label %cond.true31, !dbg !9741

land.lhs.true:                                    ; preds = %cond.end27
  %28 = load i64, i64* %mlow_hi, align 8, !dbg !9741
  %cmp30 = icmp sle i64 %28, 1, !dbg !9741
  br i1 %cmp30, label %cond.false32, label %cond.true31, !dbg !9741

cond.true31:                                      ; preds = %land.lhs.true, %cond.end27
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3329, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9741
  br label %cond.end33, !dbg !9741

cond.false32:                                     ; preds = %land.lhs.true
  br label %cond.end33, !dbg !9741

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond34 = phi i32 [ 0, %cond.true31 ], [ 0, %cond.false32 ], !dbg !9741
  %29 = load i64, i64* %mlow_hi, align 8, !dbg !9742
  %30 = load i64, i64* %mhigh_hi, align 8, !dbg !9742
  %cmp35 = icmp slt i64 %29, %30, !dbg !9742
  br i1 %cmp35, label %cond.false41, label %lor.lhs.false36, !dbg !9742

lor.lhs.false36:                                  ; preds = %cond.end33
  %31 = load i64, i64* %mlow_hi, align 8, !dbg !9742
  %32 = load i64, i64* %mhigh_hi, align 8, !dbg !9742
  %cmp37 = icmp eq i64 %31, %32, !dbg !9742
  br i1 %cmp37, label %land.lhs.true38, label %cond.true40, !dbg !9742

land.lhs.true38:                                  ; preds = %lor.lhs.false36
  %33 = load i64, i64* %mlow_lo, align 8, !dbg !9742
  %34 = load i64, i64* %mhigh_lo, align 8, !dbg !9742
  %cmp39 = icmp ult i64 %33, %34, !dbg !9742
  br i1 %cmp39, label %cond.false41, label %cond.true40, !dbg !9742

cond.true40:                                      ; preds = %land.lhs.true38, %lor.lhs.false36
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3332, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9742
  br label %cond.end42, !dbg !9742

cond.false41:                                     ; preds = %land.lhs.true38, %cond.end33
  br label %cond.end42, !dbg !9742

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond43 = phi i32 [ 0, %cond.true40 ], [ 0, %cond.false41 ], !dbg !9742
  %35 = load i32, i32* %lgup, align 4, !dbg !9743
  store i32 %35, i32* %post_shift, align 4, !dbg !9745
  br label %for.cond, !dbg !9746

for.cond:                                         ; preds = %for.inc, %cond.end42
  %36 = load i32, i32* %post_shift, align 4, !dbg !9747
  %cmp44 = icmp sgt i32 %36, 0, !dbg !9749
  br i1 %cmp44, label %for.body, label %for.end, !dbg !9750

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %ml_lo, metadata !9751, metadata !DIExpression()), !dbg !9753
  %37 = load i64, i64* %mlow_hi, align 8, !dbg !9754
  %shl45 = shl i64 %37, 63, !dbg !9755
  %38 = load i64, i64* %mlow_lo, align 8, !dbg !9756
  %shr = lshr i64 %38, 1, !dbg !9757
  %or46 = or i64 %shl45, %shr, !dbg !9758
  store i64 %or46, i64* %ml_lo, align 8, !dbg !9753
  call void @llvm.dbg.declare(metadata i64* %mh_lo, metadata !9759, metadata !DIExpression()), !dbg !9760
  %39 = load i64, i64* %mhigh_hi, align 8, !dbg !9761
  %shl47 = shl i64 %39, 63, !dbg !9762
  %40 = load i64, i64* %mhigh_lo, align 8, !dbg !9763
  %shr48 = lshr i64 %40, 1, !dbg !9764
  %or49 = or i64 %shl47, %shr48, !dbg !9765
  store i64 %or49, i64* %mh_lo, align 8, !dbg !9760
  %41 = load i64, i64* %ml_lo, align 8, !dbg !9766
  %42 = load i64, i64* %mh_lo, align 8, !dbg !9768
  %cmp50 = icmp uge i64 %41, %42, !dbg !9769
  br i1 %cmp50, label %if.then51, label %if.end52, !dbg !9770

if.then51:                                        ; preds = %for.body
  br label %for.end, !dbg !9771

if.end52:                                         ; preds = %for.body
  store i64 0, i64* %mlow_hi, align 8, !dbg !9772
  %43 = load i64, i64* %ml_lo, align 8, !dbg !9773
  store i64 %43, i64* %mlow_lo, align 8, !dbg !9774
  store i64 0, i64* %mhigh_hi, align 8, !dbg !9775
  %44 = load i64, i64* %mh_lo, align 8, !dbg !9776
  store i64 %44, i64* %mhigh_lo, align 8, !dbg !9777
  br label %for.inc, !dbg !9778

for.inc:                                          ; preds = %if.end52
  %45 = load i32, i32* %post_shift, align 4, !dbg !9779
  %dec = add nsw i32 %45, -1, !dbg !9779
  store i32 %dec, i32* %post_shift, align 4, !dbg !9779
  br label %for.cond, !dbg !9780, !llvm.loop !9781

for.end:                                          ; preds = %if.then51, %for.cond
  %46 = load i32, i32* %post_shift, align 4, !dbg !9783
  %47 = load i32*, i32** %post_shift_ptr.addr, align 8, !dbg !9784
  store i32 %46, i32* %47, align 4, !dbg !9785
  %48 = load i32, i32* %lgup, align 4, !dbg !9786
  %49 = load i32*, i32** %lgup_ptr.addr, align 8, !dbg !9787
  store i32 %48, i32* %49, align 4, !dbg !9788
  %50 = load i32, i32* %n.addr, align 4, !dbg !9789
  %cmp53 = icmp slt i32 %50, 64, !dbg !9791
  br i1 %cmp53, label %if.then54, label %if.else61, !dbg !9792

if.then54:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i64* %mask, metadata !9793, metadata !DIExpression()), !dbg !9795
  %51 = load i32, i32* %n.addr, align 4, !dbg !9796
  %sh_prom55 = zext i32 %51 to i64, !dbg !9797
  %shl56 = shl i64 1, %sh_prom55, !dbg !9797
  %sub57 = sub i64 %shl56, 1, !dbg !9798
  store i64 %sub57, i64* %mask, align 8, !dbg !9795
  %52 = load i64, i64* %mhigh_lo, align 8, !dbg !9799
  %53 = load i64, i64* %mask, align 8, !dbg !9799
  %and = and i64 %52, %53, !dbg !9799
  %call58 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %and), !dbg !9799
  %54 = load %struct.rtx_def**, %struct.rtx_def*** %multiplier_ptr.addr, align 8, !dbg !9800
  store %struct.rtx_def* %call58, %struct.rtx_def** %54, align 8, !dbg !9801
  %55 = load i64, i64* %mhigh_lo, align 8, !dbg !9802
  %56 = load i64, i64* %mask, align 8, !dbg !9803
  %cmp59 = icmp uge i64 %55, %56, !dbg !9804
  %conv = zext i1 %cmp59 to i32, !dbg !9804
  %conv60 = sext i32 %conv to i64, !dbg !9802
  store i64 %conv60, i64* %retval, align 8, !dbg !9805
  br label %return, !dbg !9805

if.else61:                                        ; preds = %for.end
  %57 = load i64, i64* %mhigh_lo, align 8, !dbg !9806
  %call62 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %57), !dbg !9806
  %58 = load %struct.rtx_def**, %struct.rtx_def*** %multiplier_ptr.addr, align 8, !dbg !9808
  store %struct.rtx_def* %call62, %struct.rtx_def** %58, align 8, !dbg !9809
  %59 = load i64, i64* %mhigh_hi, align 8, !dbg !9810
  store i64 %59, i64* %retval, align 8, !dbg !9811
  br label %return, !dbg !9811

return:                                           ; preds = %if.else61, %if.then54
  %60 = load i64, i64* %retval, align 8, !dbg !9812
  ret i64 %60, !dbg !9812
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_mult_highpart(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %unsignedp, i32 %max_cost) #0 !dbg !9813 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %max_cost.addr = alloca i32, align 4
  %wider_mode = alloca i32, align 4
  %cnst1 = alloca i64, align 8
  %extra_cost = alloca i32, align 4
  %sign_adjust = alloca i8, align 1
  %variant = alloca i32, align 4
  %alg = alloca %struct.algorithm, align 4
  %tem = alloca %struct.rtx_def*, align 8
  %speed = alloca i8, align 1
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9816, metadata !DIExpression()), !dbg !9817
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !9818, metadata !DIExpression()), !dbg !9819
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !9820, metadata !DIExpression()), !dbg !9821
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9822, metadata !DIExpression()), !dbg !9823
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !9824, metadata !DIExpression()), !dbg !9825
  store i32 %max_cost, i32* %max_cost.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_cost.addr, metadata !9826, metadata !DIExpression()), !dbg !9827
  call void @llvm.dbg.declare(metadata i32* %wider_mode, metadata !9828, metadata !DIExpression()), !dbg !9829
  %0 = load i32, i32* %mode.addr, align 4, !dbg !9830
  %idxprom = zext i32 %0 to i64, !dbg !9830
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom, !dbg !9830
  %1 = load i8, i8* %arrayidx, align 1, !dbg !9830
  %conv = zext i8 %1 to i32, !dbg !9830
  store i32 %conv, i32* %wider_mode, align 4, !dbg !9829
  call void @llvm.dbg.declare(metadata i64* %cnst1, metadata !9831, metadata !DIExpression()), !dbg !9832
  call void @llvm.dbg.declare(metadata i32* %extra_cost, metadata !9833, metadata !DIExpression()), !dbg !9834
  call void @llvm.dbg.declare(metadata i8* %sign_adjust, metadata !9835, metadata !DIExpression()), !dbg !9836
  store i8 0, i8* %sign_adjust, align 1, !dbg !9836
  call void @llvm.dbg.declare(metadata i32* %variant, metadata !9837, metadata !DIExpression()), !dbg !9838
  call void @llvm.dbg.declare(metadata %struct.algorithm* %alg, metadata !9839, metadata !DIExpression()), !dbg !9840
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !9841, metadata !DIExpression()), !dbg !9842
  call void @llvm.dbg.declare(metadata i8* %speed, metadata !9843, metadata !DIExpression()), !dbg !9844
  %call = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !9845
  store i8 %call, i8* %speed, align 1, !dbg !9844
  %2 = load i32, i32* %mode.addr, align 4, !dbg !9846
  %idxprom1 = zext i32 %2 to i64, !dbg !9846
  %arrayidx2 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1, !dbg !9846
  %3 = load i8, i8* %arrayidx2, align 1, !dbg !9846
  %conv3 = zext i8 %3 to i32, !dbg !9846
  %cmp = icmp eq i32 %conv3, 8, !dbg !9846
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !9846

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !9846
  %idxprom5 = zext i32 %4 to i64, !dbg !9846
  %arrayidx6 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom5, !dbg !9846
  %5 = load i8, i8* %arrayidx6, align 1, !dbg !9846
  %conv7 = zext i8 %5 to i32, !dbg !9846
  %cmp8 = icmp eq i32 %conv7, 9, !dbg !9846
  br i1 %cmp8, label %cond.true, label %cond.false, !dbg !9846

cond.true:                                        ; preds = %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3574, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9846
  br label %cond.end, !dbg !9846

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !9846

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9846
  %6 = load i32, i32* %mode.addr, align 4, !dbg !9847
  %idxprom10 = zext i32 %6 to i64, !dbg !9847
  %arrayidx11 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom10, !dbg !9847
  %7 = load i8, i8* %arrayidx11, align 1, !dbg !9847
  %conv12 = zext i8 %7 to i16, !dbg !9847
  %conv13 = zext i16 %conv12 to i32, !dbg !9847
  %mul = mul nsw i32 %conv13, 8, !dbg !9847
  %conv14 = trunc i32 %mul to i16, !dbg !9847
  %conv15 = zext i16 %conv14 to i32, !dbg !9847
  %cmp16 = icmp sle i32 %conv15, 64, !dbg !9847
  br i1 %cmp16, label %cond.false19, label %cond.true18, !dbg !9847

cond.true18:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3576, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9847
  br label %cond.end20, !dbg !9847

cond.false19:                                     ; preds = %cond.end
  br label %cond.end20, !dbg !9847

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ 0, %cond.true18 ], [ 0, %cond.false19 ], !dbg !9847
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9848
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !9848
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !9848
  %arrayidx22 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !9848
  %9 = load i64, i64* %arrayidx22, align 8, !dbg !9848
  %10 = load i32, i32* %mode.addr, align 4, !dbg !9849
  %idxprom23 = zext i32 %10 to i64, !dbg !9849
  %arrayidx24 = getelementptr inbounds [87 x i64], [87 x i64]* @mode_mask_array, i64 0, i64 %idxprom23, !dbg !9849
  %11 = load i64, i64* %arrayidx24, align 8, !dbg !9849
  %and = and i64 %9, %11, !dbg !9850
  store i64 %and, i64* %cnst1, align 8, !dbg !9851
  %12 = load i32, i32* %wider_mode, align 4, !dbg !9852
  %idxprom25 = zext i32 %12 to i64, !dbg !9852
  %arrayidx26 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom25, !dbg !9852
  %13 = load i8, i8* %arrayidx26, align 1, !dbg !9852
  %conv27 = zext i8 %13 to i16, !dbg !9852
  %conv28 = zext i16 %conv27 to i32, !dbg !9852
  %mul29 = mul nsw i32 %conv28, 8, !dbg !9852
  %conv30 = trunc i32 %mul29 to i16, !dbg !9852
  %conv31 = zext i16 %conv30 to i32, !dbg !9852
  %cmp32 = icmp sgt i32 %conv31, 32, !dbg !9854
  br i1 %cmp32, label %if.then, label %if.end, !dbg !9855

if.then:                                          ; preds = %cond.end20
  %14 = load i32, i32* %mode.addr, align 4, !dbg !9856
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9857
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9858
  %17 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9859
  %18 = load i32, i32* %unsignedp.addr, align 4, !dbg !9860
  %19 = load i32, i32* %max_cost.addr, align 4, !dbg !9861
  %call34 = call %struct.rtx_def* @expand_mult_highpart_optab(i32 %14, %struct.rtx_def* %15, %struct.rtx_def* %16, %struct.rtx_def* %17, i32 %18, i32 %19), !dbg !9862
  store %struct.rtx_def* %call34, %struct.rtx_def** %retval, align 8, !dbg !9863
  br label %return, !dbg !9863

if.end:                                           ; preds = %cond.end20
  %20 = load i8, i8* %speed, align 1, !dbg !9864
  %idxprom35 = zext i8 %20 to i64, !dbg !9865
  %arrayidx36 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom35, !dbg !9865
  %21 = load i32, i32* %mode.addr, align 4, !dbg !9866
  %idxprom37 = zext i32 %21 to i64, !dbg !9865
  %arrayidx38 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx36, i64 0, i64 %idxprom37, !dbg !9865
  %22 = load i32, i32* %mode.addr, align 4, !dbg !9867
  %idxprom39 = zext i32 %22 to i64, !dbg !9867
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom39, !dbg !9867
  %23 = load i8, i8* %arrayidx40, align 1, !dbg !9867
  %conv41 = zext i8 %23 to i16, !dbg !9867
  %conv42 = zext i16 %conv41 to i32, !dbg !9867
  %mul43 = mul nsw i32 %conv42, 8, !dbg !9867
  %conv44 = trunc i32 %mul43 to i16, !dbg !9867
  %conv45 = zext i16 %conv44 to i32, !dbg !9867
  %sub = sub nsw i32 %conv45, 1, !dbg !9868
  %idxprom46 = sext i32 %sub to i64, !dbg !9865
  %arrayidx47 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx38, i64 0, i64 %idxprom46, !dbg !9865
  %24 = load i32, i32* %arrayidx47, align 4, !dbg !9865
  store i32 %24, i32* %extra_cost, align 4, !dbg !9869
  %25 = load i32, i32* %unsignedp.addr, align 4, !dbg !9870
  %tobool = icmp ne i32 %25, 0, !dbg !9870
  br i1 %tobool, label %if.end63, label %land.lhs.true, !dbg !9872

land.lhs.true:                                    ; preds = %if.end
  %26 = load i64, i64* %cnst1, align 8, !dbg !9873
  %27 = load i32, i32* %mode.addr, align 4, !dbg !9874
  %idxprom48 = zext i32 %27 to i64, !dbg !9874
  %arrayidx49 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom48, !dbg !9874
  %28 = load i8, i8* %arrayidx49, align 1, !dbg !9874
  %conv50 = zext i8 %28 to i16, !dbg !9874
  %conv51 = zext i16 %conv50 to i32, !dbg !9874
  %mul52 = mul nsw i32 %conv51, 8, !dbg !9874
  %conv53 = trunc i32 %mul52 to i16, !dbg !9874
  %conv54 = zext i16 %conv53 to i32, !dbg !9874
  %sub55 = sub nsw i32 %conv54, 1, !dbg !9875
  %sh_prom = zext i32 %sub55 to i64, !dbg !9876
  %shr = lshr i64 %26, %sh_prom, !dbg !9876
  %and56 = and i64 %shr, 1, !dbg !9877
  %tobool57 = icmp ne i64 %and56, 0, !dbg !9877
  br i1 %tobool57, label %if.then58, label %if.end63, !dbg !9878

if.then58:                                        ; preds = %land.lhs.true
  store i8 1, i8* %sign_adjust, align 1, !dbg !9879
  %29 = load i8, i8* %speed, align 1, !dbg !9881
  %idxprom59 = zext i8 %29 to i64, !dbg !9882
  %arrayidx60 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom59, !dbg !9882
  %30 = load i32, i32* %mode.addr, align 4, !dbg !9883
  %idxprom61 = zext i32 %30 to i64, !dbg !9882
  %arrayidx62 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx60, i64 0, i64 %idxprom61, !dbg !9882
  %31 = load i32, i32* %arrayidx62, align 4, !dbg !9882
  %32 = load i32, i32* %extra_cost, align 4, !dbg !9884
  %add = add nsw i32 %32, %31, !dbg !9884
  store i32 %add, i32* %extra_cost, align 4, !dbg !9884
  br label %if.end63, !dbg !9885

if.end63:                                         ; preds = %if.then58, %land.lhs.true, %if.end
  %33 = load i32, i32* %wider_mode, align 4, !dbg !9886
  %34 = load i64, i64* %cnst1, align 8, !dbg !9888
  %35 = load i32, i32* %max_cost.addr, align 4, !dbg !9889
  %36 = load i32, i32* %extra_cost, align 4, !dbg !9890
  %sub64 = sub nsw i32 %35, %36, !dbg !9891
  %call65 = call zeroext i8 @choose_mult_variant(i32 %33, i64 %34, %struct.algorithm* %alg, i32* %variant, i32 %sub64), !dbg !9892
  %tobool66 = icmp ne i8 %call65, 0, !dbg !9892
  br i1 %tobool66, label %if.then67, label %if.end83, !dbg !9893

if.then67:                                        ; preds = %if.end63
  %37 = load i32, i32* %mode.addr, align 4, !dbg !9894
  %38 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9896
  %39 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9897
  %40 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9898
  %41 = load i32, i32* %unsignedp.addr, align 4, !dbg !9899
  %cost = getelementptr inbounds %struct.algorithm, %struct.algorithm* %alg, i32 0, i32 0, !dbg !9900
  %cost68 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost, i32 0, i32 0, !dbg !9901
  %42 = load i16, i16* %cost68, align 4, !dbg !9901
  %conv69 = sext i16 %42 to i32, !dbg !9902
  %43 = load i32, i32* %extra_cost, align 4, !dbg !9903
  %add70 = add nsw i32 %conv69, %43, !dbg !9904
  %call71 = call %struct.rtx_def* @expand_mult_highpart_optab(i32 %37, %struct.rtx_def* %38, %struct.rtx_def* %39, %struct.rtx_def* %40, i32 %41, i32 %add70), !dbg !9905
  store %struct.rtx_def* %call71, %struct.rtx_def** %tem, align 8, !dbg !9906
  %44 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !9907
  %tobool72 = icmp ne %struct.rtx_def* %44, null, !dbg !9907
  br i1 %tobool72, label %if.then73, label %if.end74, !dbg !9909

if.then73:                                        ; preds = %if.then67
  %45 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !9910
  store %struct.rtx_def* %45, %struct.rtx_def** %retval, align 8, !dbg !9911
  br label %return, !dbg !9911

if.end74:                                         ; preds = %if.then67
  %46 = load i32, i32* %wider_mode, align 4, !dbg !9912
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9913
  %48 = load i32, i32* %unsignedp.addr, align 4, !dbg !9914
  %call75 = call %struct.rtx_def* @convert_to_mode(i32 %46, %struct.rtx_def* %47, i32 %48), !dbg !9915
  store %struct.rtx_def* %call75, %struct.rtx_def** %tem, align 8, !dbg !9916
  %49 = load i32, i32* %wider_mode, align 4, !dbg !9917
  %50 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !9918
  %51 = load i64, i64* %cnst1, align 8, !dbg !9919
  %52 = load i32, i32* %variant, align 4, !dbg !9920
  %call76 = call %struct.rtx_def* @expand_mult_const(i32 %49, %struct.rtx_def* %50, i64 %51, %struct.rtx_def* null, %struct.algorithm* %alg, i32 %52), !dbg !9921
  store %struct.rtx_def* %call76, %struct.rtx_def** %tem, align 8, !dbg !9922
  %53 = load i32, i32* %mode.addr, align 4, !dbg !9923
  %54 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !9924
  %call77 = call %struct.rtx_def* @extract_high_half(i32 %53, %struct.rtx_def* %54), !dbg !9925
  store %struct.rtx_def* %call77, %struct.rtx_def** %tem, align 8, !dbg !9926
  %55 = load i8, i8* %sign_adjust, align 1, !dbg !9927
  %tobool78 = icmp ne i8 %55, 0, !dbg !9927
  br i1 %tobool78, label %if.then79, label %if.end82, !dbg !9929

if.then79:                                        ; preds = %if.end74
  %56 = load i32, i32* %mode.addr, align 4, !dbg !9930
  %57 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !9930
  %58 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9930
  %call80 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %56, %struct.rtx_def* %57, %struct.rtx_def* %58), !dbg !9930
  %59 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !9931
  %call81 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call80, %struct.rtx_def* %59), !dbg !9932
  store %struct.rtx_def* %call81, %struct.rtx_def** %tem, align 8, !dbg !9933
  br label %if.end82, !dbg !9934

if.end82:                                         ; preds = %if.then79, %if.end74
  %60 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !9935
  store %struct.rtx_def* %60, %struct.rtx_def** %retval, align 8, !dbg !9936
  br label %return, !dbg !9936

if.end83:                                         ; preds = %if.end63
  %61 = load i32, i32* %mode.addr, align 4, !dbg !9937
  %62 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9938
  %63 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9939
  %64 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9940
  %65 = load i32, i32* %unsignedp.addr, align 4, !dbg !9941
  %66 = load i32, i32* %max_cost.addr, align 4, !dbg !9942
  %call84 = call %struct.rtx_def* @expand_mult_highpart_optab(i32 %61, %struct.rtx_def* %62, %struct.rtx_def* %63, %struct.rtx_def* %64, i32 %65, i32 %66), !dbg !9943
  store %struct.rtx_def* %call84, %struct.rtx_def** %retval, align 8, !dbg !9944
  br label %return, !dbg !9944

return:                                           ; preds = %if.end83, %if.end82, %if.then73, %if.then
  %67 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9945
  ret %struct.rtx_def* %67, !dbg !9945
}

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_int_mode(i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %target, i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1, i32 %mode, i32 %unsignedp, i32 %normalizep) #0 !dbg !9946 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %normalizep.addr = alloca i32, align 4
  %target_mode = alloca i32, align 4
  %rcode = alloca i32, align 4
  %subtarget = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %trueval = alloca %struct.rtx_def*, align 8
  %first_code = alloca i32, align 4
  %and_them = alloca i8, align 1
  %want_add = alloca i32, align 4
  %want_add475 = alloca i32, align 4
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9947, metadata !DIExpression()), !dbg !9948
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !9949, metadata !DIExpression()), !dbg !9950
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !9951, metadata !DIExpression()), !dbg !9952
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !9953, metadata !DIExpression()), !dbg !9954
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9955, metadata !DIExpression()), !dbg !9956
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !9957, metadata !DIExpression()), !dbg !9958
  store i32 %normalizep, i32* %normalizep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %normalizep.addr, metadata !9959, metadata !DIExpression()), !dbg !9960
  call void @llvm.dbg.declare(metadata i32* %target_mode, metadata !9961, metadata !DIExpression()), !dbg !9962
  %0 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9963
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !9963
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9963

cond.true:                                        ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9964
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !9964
  %bf.load = load i32, i32* %2, align 8, !dbg !9964
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9964
  %bf.clear = and i32 %bf.lshr, 255, !dbg !9964
  br label %cond.end, !dbg !9963

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9963

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %bf.clear, %cond.true ], [ 0, %cond.false ], !dbg !9963
  store i32 %cond, i32* %target_mode, align 4, !dbg !9962
  call void @llvm.dbg.declare(metadata i32* %rcode, metadata !9965, metadata !DIExpression()), !dbg !9966
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget, metadata !9967, metadata !DIExpression()), !dbg !9968
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !9969, metadata !DIExpression()), !dbg !9970
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9971, metadata !DIExpression()), !dbg !9972
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %trueval, metadata !9973, metadata !DIExpression()), !dbg !9974
  %3 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9975
  %4 = load i32, i32* %code.addr, align 4, !dbg !9976
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9977
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !9978
  %7 = load i32, i32* %mode.addr, align 4, !dbg !9979
  %8 = load i32, i32* %unsignedp.addr, align 4, !dbg !9980
  %9 = load i32, i32* %normalizep.addr, align 4, !dbg !9981
  %10 = load i32, i32* %target_mode, align 4, !dbg !9982
  %call = call %struct.rtx_def* @emit_store_flag_1(%struct.rtx_def* %3, i32 %4, %struct.rtx_def* %5, %struct.rtx_def* %6, i32 %7, i32 %8, i32 %9, i32 %10), !dbg !9983
  store %struct.rtx_def* %call, %struct.rtx_def** %tem, align 8, !dbg !9984
  %11 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !9985
  %tobool1 = icmp ne %struct.rtx_def* %11, null, !dbg !9985
  br i1 %tobool1, label %if.then, label %if.end, !dbg !9987

if.then:                                          ; preds = %cond.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !9988
  store %struct.rtx_def* %12, %struct.rtx_def** %retval, align 8, !dbg !9989
  br label %return, !dbg !9989

if.end:                                           ; preds = %cond.end
  %call2 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !9990
  %tobool3 = icmp ne i8 %call2, 0, !dbg !9990
  br i1 %tobool3, label %cond.false5, label %cond.true4, !dbg !9990

cond.true4:                                       ; preds = %if.end
  br label %cond.end6, !dbg !9990

cond.false5:                                      ; preds = %if.end
  %13 = load i32, i32* @ix86_branch_cost, align 4, !dbg !9990
  br label %cond.end6, !dbg !9990

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 2, %cond.true4 ], [ %13, %cond.false5 ], !dbg !9990
  %cmp = icmp eq i32 %cond7, 0, !dbg !9992
  br i1 %cmp, label %if.then8, label %if.end9, !dbg !9993

if.then8:                                         ; preds = %cond.end6
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9994
  br label %return, !dbg !9994

if.end9:                                          ; preds = %cond.end6
  %14 = load i32, i32* %normalizep.addr, align 4, !dbg !9995
  %cmp10 = icmp eq i32 %14, 0, !dbg !9997
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !9998

if.then11:                                        ; preds = %if.end9
  store i32 1, i32* %normalizep.addr, align 4, !dbg !9999
  br label %if.end12, !dbg !10002

if.end12:                                         ; preds = %if.then11, %if.end9
  %call13 = call %struct.rtx_def* @get_last_insn(), !dbg !10003
  store %struct.rtx_def* %call13, %struct.rtx_def** %last, align 8, !dbg !10004
  %15 = load i32, i32* @optimize, align 4, !dbg !10005
  %tobool14 = icmp ne i32 %15, 0, !dbg !10005
  br i1 %tobool14, label %cond.false17, label %land.lhs.true, !dbg !10006

land.lhs.true:                                    ; preds = %if.end12
  %16 = load i32, i32* %target_mode, align 4, !dbg !10007
  %17 = load i32, i32* %mode.addr, align 4, !dbg !10008
  %cmp15 = icmp eq i32 %16, %17, !dbg !10009
  br i1 %cmp15, label %cond.true16, label %cond.false17, !dbg !10010

cond.true16:                                      ; preds = %land.lhs.true
  %18 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10011
  br label %cond.end18, !dbg !10010

cond.false17:                                     ; preds = %land.lhs.true, %if.end12
  br label %cond.end18, !dbg !10010

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi %struct.rtx_def* [ %18, %cond.true16 ], [ null, %cond.false17 ], !dbg !10010
  store %struct.rtx_def* %cond19, %struct.rtx_def** %subtarget, align 8, !dbg !10012
  %19 = load i32, i32* %normalizep.addr, align 4, !dbg !10013
  %tobool20 = icmp ne i32 %19, 0, !dbg !10013
  br i1 %tobool20, label %cond.true21, label %cond.false22, !dbg !10013

cond.true21:                                      ; preds = %cond.end18
  %20 = load i32, i32* %normalizep.addr, align 4, !dbg !10013
  br label %cond.end23, !dbg !10013

cond.false22:                                     ; preds = %cond.end18
  br label %cond.end23, !dbg !10013

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i32 [ %20, %cond.true21 ], [ 1, %cond.false22 ], !dbg !10013
  %conv = sext i32 %cond24 to i64, !dbg !10013
  %call25 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv), !dbg !10013
  store %struct.rtx_def* %call25, %struct.rtx_def** %trueval, align 8, !dbg !10014
  %21 = load i32, i32* %mode.addr, align 4, !dbg !10015
  %idxprom = zext i32 %21 to i64, !dbg !10015
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !10015
  %22 = load i8, i8* %arrayidx, align 1, !dbg !10015
  %conv26 = zext i8 %22 to i32, !dbg !10015
  %cmp27 = icmp eq i32 %conv26, 8, !dbg !10017
  br i1 %cmp27, label %if.then29, label %if.end420, !dbg !10018

if.then29:                                        ; preds = %cond.end23
  call void @llvm.dbg.declare(metadata i32* %first_code, metadata !10019, metadata !DIExpression()), !dbg !10021
  call void @llvm.dbg.declare(metadata i8* %and_them, metadata !10022, metadata !DIExpression()), !dbg !10023
  %23 = load i32, i32* %code.addr, align 4, !dbg !10024
  %call30 = call i32 @reverse_condition_maybe_unordered(i32 %23), !dbg !10025
  store i32 %call30, i32* %rcode, align 4, !dbg !10026
  %24 = load i32, i32* %rcode, align 4, !dbg !10027
  %25 = load i32, i32* %mode.addr, align 4, !dbg !10029
  %call31 = call i32 @can_compare_p(i32 %24, i32 %25, i32 2), !dbg !10030
  %tobool32 = icmp ne i32 %call31, 0, !dbg !10030
  br i1 %tobool32, label %land.lhs.true33, label %if.end281, !dbg !10031

land.lhs.true33:                                  ; preds = %if.then29
  %26 = load i32, i32* %code.addr, align 4, !dbg !10032
  %cmp34 = icmp eq i32 %26, 91, !dbg !10033
  br i1 %cmp34, label %if.then245, label %lor.lhs.false, !dbg !10034

lor.lhs.false:                                    ; preds = %land.lhs.true33
  %27 = load i32, i32* %code.addr, align 4, !dbg !10035
  %cmp36 = icmp eq i32 %27, 90, !dbg !10036
  br i1 %cmp36, label %if.then245, label %lor.lhs.false38, !dbg !10037

lor.lhs.false38:                                  ; preds = %lor.lhs.false
  %28 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom39 = zext i32 %28 to i64, !dbg !10038
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom39, !dbg !10038
  %29 = load i8, i8* %arrayidx40, align 1, !dbg !10038
  %conv41 = zext i8 %29 to i32, !dbg !10038
  %cmp42 = icmp eq i32 %conv41, 8, !dbg !10038
  br i1 %cmp42, label %land.lhs.true62, label %lor.lhs.false44, !dbg !10038

lor.lhs.false44:                                  ; preds = %lor.lhs.false38
  %30 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom45 = zext i32 %30 to i64, !dbg !10038
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom45, !dbg !10038
  %31 = load i8, i8* %arrayidx46, align 1, !dbg !10038
  %conv47 = zext i8 %31 to i32, !dbg !10038
  %cmp48 = icmp eq i32 %conv47, 9, !dbg !10038
  br i1 %cmp48, label %land.lhs.true62, label %lor.lhs.false50, !dbg !10038

lor.lhs.false50:                                  ; preds = %lor.lhs.false44
  %32 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom51 = zext i32 %32 to i64, !dbg !10038
  %arrayidx52 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom51, !dbg !10038
  %33 = load i8, i8* %arrayidx52, align 1, !dbg !10038
  %conv53 = zext i8 %33 to i32, !dbg !10038
  %cmp54 = icmp eq i32 %conv53, 11, !dbg !10038
  br i1 %cmp54, label %land.lhs.true62, label %lor.lhs.false56, !dbg !10038

lor.lhs.false56:                                  ; preds = %lor.lhs.false50
  %34 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom57 = zext i32 %34 to i64, !dbg !10038
  %arrayidx58 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom57, !dbg !10038
  %35 = load i8, i8* %arrayidx58, align 1, !dbg !10038
  %conv59 = zext i8 %35 to i32, !dbg !10038
  %cmp60 = icmp eq i32 %conv59, 17, !dbg !10038
  br i1 %cmp60, label %land.lhs.true62, label %land.lhs.true133, !dbg !10038

land.lhs.true62:                                  ; preds = %lor.lhs.false56, %lor.lhs.false50, %lor.lhs.false44, %lor.lhs.false38
  %36 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom63 = zext i32 %36 to i64, !dbg !10038
  %arrayidx64 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom63, !dbg !10038
  %37 = load i8, i8* %arrayidx64, align 1, !dbg !10038
  %conv65 = zext i8 %37 to i32, !dbg !10038
  %cmp66 = icmp eq i32 %conv65, 8, !dbg !10038
  br i1 %cmp66, label %cond.true74, label %lor.lhs.false68, !dbg !10038

lor.lhs.false68:                                  ; preds = %land.lhs.true62
  %38 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom69 = zext i32 %38 to i64, !dbg !10038
  %arrayidx70 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom69, !dbg !10038
  %39 = load i8, i8* %arrayidx70, align 1, !dbg !10038
  %conv71 = zext i8 %39 to i32, !dbg !10038
  %cmp72 = icmp eq i32 %conv71, 9, !dbg !10038
  br i1 %cmp72, label %cond.true74, label %cond.false75, !dbg !10038

cond.true74:                                      ; preds = %lor.lhs.false68, %land.lhs.true62
  %40 = load i32, i32* %mode.addr, align 4, !dbg !10038
  br label %cond.end79, !dbg !10038

cond.false75:                                     ; preds = %lor.lhs.false68
  %41 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom76 = zext i32 %41 to i64, !dbg !10038
  %arrayidx77 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom76, !dbg !10038
  %42 = load i8, i8* %arrayidx77, align 1, !dbg !10038
  %conv78 = zext i8 %42 to i32, !dbg !10038
  br label %cond.end79, !dbg !10038

cond.end79:                                       ; preds = %cond.false75, %cond.true74
  %cond80 = phi i32 [ %40, %cond.true74 ], [ %conv78, %cond.false75 ], !dbg !10038
  %idxprom81 = zext i32 %cond80 to i64, !dbg !10038
  %arrayidx82 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom81, !dbg !10038
  %43 = load i8, i8* %arrayidx82, align 1, !dbg !10038
  %conv83 = zext i8 %43 to i32, !dbg !10038
  %cmp84 = icmp eq i32 %conv83, 9, !dbg !10038
  br i1 %cmp84, label %cond.true86, label %cond.false105, !dbg !10038

cond.true86:                                      ; preds = %cond.end79
  %44 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom87 = zext i32 %44 to i64, !dbg !10038
  %arrayidx88 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom87, !dbg !10038
  %45 = load i8, i8* %arrayidx88, align 1, !dbg !10038
  %conv89 = zext i8 %45 to i32, !dbg !10038
  %cmp90 = icmp eq i32 %conv89, 8, !dbg !10038
  br i1 %cmp90, label %cond.true98, label %lor.lhs.false92, !dbg !10038

lor.lhs.false92:                                  ; preds = %cond.true86
  %46 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom93 = zext i32 %46 to i64, !dbg !10038
  %arrayidx94 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom93, !dbg !10038
  %47 = load i8, i8* %arrayidx94, align 1, !dbg !10038
  %conv95 = zext i8 %47 to i32, !dbg !10038
  %cmp96 = icmp eq i32 %conv95, 9, !dbg !10038
  br i1 %cmp96, label %cond.true98, label %cond.false99, !dbg !10038

cond.true98:                                      ; preds = %lor.lhs.false92, %cond.true86
  %48 = load i32, i32* %mode.addr, align 4, !dbg !10038
  br label %cond.end103, !dbg !10038

cond.false99:                                     ; preds = %lor.lhs.false92
  %49 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom100 = zext i32 %49 to i64, !dbg !10038
  %arrayidx101 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom100, !dbg !10038
  %50 = load i8, i8* %arrayidx101, align 1, !dbg !10038
  %conv102 = zext i8 %50 to i32, !dbg !10038
  br label %cond.end103, !dbg !10038

cond.end103:                                      ; preds = %cond.false99, %cond.true98
  %cond104 = phi i32 [ %48, %cond.true98 ], [ %conv102, %cond.false99 ], !dbg !10038
  %sub = sub i32 %cond104, 42, !dbg !10038
  %add = add i32 %sub, 4, !dbg !10038
  br label %cond.end125, !dbg !10038

cond.false105:                                    ; preds = %cond.end79
  %51 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom106 = zext i32 %51 to i64, !dbg !10038
  %arrayidx107 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom106, !dbg !10038
  %52 = load i8, i8* %arrayidx107, align 1, !dbg !10038
  %conv108 = zext i8 %52 to i32, !dbg !10038
  %cmp109 = icmp eq i32 %conv108, 8, !dbg !10038
  br i1 %cmp109, label %cond.true117, label %lor.lhs.false111, !dbg !10038

lor.lhs.false111:                                 ; preds = %cond.false105
  %53 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom112 = zext i32 %53 to i64, !dbg !10038
  %arrayidx113 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom112, !dbg !10038
  %54 = load i8, i8* %arrayidx113, align 1, !dbg !10038
  %conv114 = zext i8 %54 to i32, !dbg !10038
  %cmp115 = icmp eq i32 %conv114, 9, !dbg !10038
  br i1 %cmp115, label %cond.true117, label %cond.false118, !dbg !10038

cond.true117:                                     ; preds = %lor.lhs.false111, %cond.false105
  %55 = load i32, i32* %mode.addr, align 4, !dbg !10038
  br label %cond.end122, !dbg !10038

cond.false118:                                    ; preds = %lor.lhs.false111
  %56 = load i32, i32* %mode.addr, align 4, !dbg !10038
  %idxprom119 = zext i32 %56 to i64, !dbg !10038
  %arrayidx120 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom119, !dbg !10038
  %57 = load i8, i8* %arrayidx120, align 1, !dbg !10038
  %conv121 = zext i8 %57 to i32, !dbg !10038
  br label %cond.end122, !dbg !10038

cond.end122:                                      ; preds = %cond.false118, %cond.true117
  %cond123 = phi i32 [ %55, %cond.true117 ], [ %conv121, %cond.false118 ], !dbg !10038
  %sub124 = sub i32 %cond123, 38, !dbg !10038
  br label %cond.end125, !dbg !10038

cond.end125:                                      ; preds = %cond.end122, %cond.end103
  %cond126 = phi i32 [ %add, %cond.end103 ], [ %sub124, %cond.end122 ], !dbg !10038
  %idxprom127 = zext i32 %cond126 to i64, !dbg !10038
  %arrayidx128 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom127, !dbg !10038
  %58 = load %struct.real_format*, %struct.real_format** %arrayidx128, align 8, !dbg !10038
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %58, i32 0, i32 11, !dbg !10038
  %59 = load i8, i8* %has_nans, align 2, !dbg !10038
  %conv129 = zext i8 %59 to i32, !dbg !10038
  %tobool130 = icmp ne i32 %conv129, 0, !dbg !10038
  br i1 %tobool130, label %land.lhs.true131, label %land.lhs.true133, !dbg !10038

land.lhs.true131:                                 ; preds = %cond.end125
  %60 = load i32, i32* @flag_finite_math_only, align 4, !dbg !10038
  %tobool132 = icmp ne i32 %60, 0, !dbg !10038
  br i1 %tobool132, label %land.lhs.true133, label %lor.lhs.false139, !dbg !10039

land.lhs.true133:                                 ; preds = %land.lhs.true131, %cond.end125, %lor.lhs.false56
  %61 = load i32, i32* %code.addr, align 4, !dbg !10040
  %cmp134 = icmp eq i32 %61, 97, !dbg !10041
  br i1 %cmp134, label %if.then245, label %lor.lhs.false136, !dbg !10042

lor.lhs.false136:                                 ; preds = %land.lhs.true133
  %62 = load i32, i32* %code.addr, align 4, !dbg !10043
  %cmp137 = icmp eq i32 %62, 92, !dbg !10044
  br i1 %cmp137, label %if.then245, label %lor.lhs.false139, !dbg !10045

lor.lhs.false139:                                 ; preds = %lor.lhs.false136, %land.lhs.true131
  %63 = load i32, i32* @flag_signaling_nans, align 4, !dbg !10046
  %tobool140 = icmp ne i32 %63, 0, !dbg !10046
  br i1 %tobool140, label %land.lhs.true141, label %land.lhs.true239, !dbg !10046

land.lhs.true141:                                 ; preds = %lor.lhs.false139
  %64 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom142 = zext i32 %64 to i64, !dbg !10046
  %arrayidx143 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom142, !dbg !10046
  %65 = load i8, i8* %arrayidx143, align 1, !dbg !10046
  %conv144 = zext i8 %65 to i32, !dbg !10046
  %cmp145 = icmp eq i32 %conv144, 8, !dbg !10046
  br i1 %cmp145, label %land.lhs.true165, label %lor.lhs.false147, !dbg !10046

lor.lhs.false147:                                 ; preds = %land.lhs.true141
  %66 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom148 = zext i32 %66 to i64, !dbg !10046
  %arrayidx149 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom148, !dbg !10046
  %67 = load i8, i8* %arrayidx149, align 1, !dbg !10046
  %conv150 = zext i8 %67 to i32, !dbg !10046
  %cmp151 = icmp eq i32 %conv150, 9, !dbg !10046
  br i1 %cmp151, label %land.lhs.true165, label %lor.lhs.false153, !dbg !10046

lor.lhs.false153:                                 ; preds = %lor.lhs.false147
  %68 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom154 = zext i32 %68 to i64, !dbg !10046
  %arrayidx155 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom154, !dbg !10046
  %69 = load i8, i8* %arrayidx155, align 1, !dbg !10046
  %conv156 = zext i8 %69 to i32, !dbg !10046
  %cmp157 = icmp eq i32 %conv156, 11, !dbg !10046
  br i1 %cmp157, label %land.lhs.true165, label %lor.lhs.false159, !dbg !10046

lor.lhs.false159:                                 ; preds = %lor.lhs.false153
  %70 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom160 = zext i32 %70 to i64, !dbg !10046
  %arrayidx161 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom160, !dbg !10046
  %71 = load i8, i8* %arrayidx161, align 1, !dbg !10046
  %conv162 = zext i8 %71 to i32, !dbg !10046
  %cmp163 = icmp eq i32 %conv162, 17, !dbg !10046
  br i1 %cmp163, label %land.lhs.true165, label %land.lhs.true239, !dbg !10046

land.lhs.true165:                                 ; preds = %lor.lhs.false159, %lor.lhs.false153, %lor.lhs.false147, %land.lhs.true141
  %72 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom166 = zext i32 %72 to i64, !dbg !10046
  %arrayidx167 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom166, !dbg !10046
  %73 = load i8, i8* %arrayidx167, align 1, !dbg !10046
  %conv168 = zext i8 %73 to i32, !dbg !10046
  %cmp169 = icmp eq i32 %conv168, 8, !dbg !10046
  br i1 %cmp169, label %cond.true177, label %lor.lhs.false171, !dbg !10046

lor.lhs.false171:                                 ; preds = %land.lhs.true165
  %74 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom172 = zext i32 %74 to i64, !dbg !10046
  %arrayidx173 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom172, !dbg !10046
  %75 = load i8, i8* %arrayidx173, align 1, !dbg !10046
  %conv174 = zext i8 %75 to i32, !dbg !10046
  %cmp175 = icmp eq i32 %conv174, 9, !dbg !10046
  br i1 %cmp175, label %cond.true177, label %cond.false178, !dbg !10046

cond.true177:                                     ; preds = %lor.lhs.false171, %land.lhs.true165
  %76 = load i32, i32* %mode.addr, align 4, !dbg !10046
  br label %cond.end182, !dbg !10046

cond.false178:                                    ; preds = %lor.lhs.false171
  %77 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom179 = zext i32 %77 to i64, !dbg !10046
  %arrayidx180 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom179, !dbg !10046
  %78 = load i8, i8* %arrayidx180, align 1, !dbg !10046
  %conv181 = zext i8 %78 to i32, !dbg !10046
  br label %cond.end182, !dbg !10046

cond.end182:                                      ; preds = %cond.false178, %cond.true177
  %cond183 = phi i32 [ %76, %cond.true177 ], [ %conv181, %cond.false178 ], !dbg !10046
  %idxprom184 = zext i32 %cond183 to i64, !dbg !10046
  %arrayidx185 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom184, !dbg !10046
  %79 = load i8, i8* %arrayidx185, align 1, !dbg !10046
  %conv186 = zext i8 %79 to i32, !dbg !10046
  %cmp187 = icmp eq i32 %conv186, 9, !dbg !10046
  br i1 %cmp187, label %cond.true189, label %cond.false210, !dbg !10046

cond.true189:                                     ; preds = %cond.end182
  %80 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom190 = zext i32 %80 to i64, !dbg !10046
  %arrayidx191 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom190, !dbg !10046
  %81 = load i8, i8* %arrayidx191, align 1, !dbg !10046
  %conv192 = zext i8 %81 to i32, !dbg !10046
  %cmp193 = icmp eq i32 %conv192, 8, !dbg !10046
  br i1 %cmp193, label %cond.true201, label %lor.lhs.false195, !dbg !10046

lor.lhs.false195:                                 ; preds = %cond.true189
  %82 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom196 = zext i32 %82 to i64, !dbg !10046
  %arrayidx197 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom196, !dbg !10046
  %83 = load i8, i8* %arrayidx197, align 1, !dbg !10046
  %conv198 = zext i8 %83 to i32, !dbg !10046
  %cmp199 = icmp eq i32 %conv198, 9, !dbg !10046
  br i1 %cmp199, label %cond.true201, label %cond.false202, !dbg !10046

cond.true201:                                     ; preds = %lor.lhs.false195, %cond.true189
  %84 = load i32, i32* %mode.addr, align 4, !dbg !10046
  br label %cond.end206, !dbg !10046

cond.false202:                                    ; preds = %lor.lhs.false195
  %85 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom203 = zext i32 %85 to i64, !dbg !10046
  %arrayidx204 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom203, !dbg !10046
  %86 = load i8, i8* %arrayidx204, align 1, !dbg !10046
  %conv205 = zext i8 %86 to i32, !dbg !10046
  br label %cond.end206, !dbg !10046

cond.end206:                                      ; preds = %cond.false202, %cond.true201
  %cond207 = phi i32 [ %84, %cond.true201 ], [ %conv205, %cond.false202 ], !dbg !10046
  %sub208 = sub i32 %cond207, 42, !dbg !10046
  %add209 = add i32 %sub208, 4, !dbg !10046
  br label %cond.end230, !dbg !10046

cond.false210:                                    ; preds = %cond.end182
  %87 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom211 = zext i32 %87 to i64, !dbg !10046
  %arrayidx212 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom211, !dbg !10046
  %88 = load i8, i8* %arrayidx212, align 1, !dbg !10046
  %conv213 = zext i8 %88 to i32, !dbg !10046
  %cmp214 = icmp eq i32 %conv213, 8, !dbg !10046
  br i1 %cmp214, label %cond.true222, label %lor.lhs.false216, !dbg !10046

lor.lhs.false216:                                 ; preds = %cond.false210
  %89 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom217 = zext i32 %89 to i64, !dbg !10046
  %arrayidx218 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom217, !dbg !10046
  %90 = load i8, i8* %arrayidx218, align 1, !dbg !10046
  %conv219 = zext i8 %90 to i32, !dbg !10046
  %cmp220 = icmp eq i32 %conv219, 9, !dbg !10046
  br i1 %cmp220, label %cond.true222, label %cond.false223, !dbg !10046

cond.true222:                                     ; preds = %lor.lhs.false216, %cond.false210
  %91 = load i32, i32* %mode.addr, align 4, !dbg !10046
  br label %cond.end227, !dbg !10046

cond.false223:                                    ; preds = %lor.lhs.false216
  %92 = load i32, i32* %mode.addr, align 4, !dbg !10046
  %idxprom224 = zext i32 %92 to i64, !dbg !10046
  %arrayidx225 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom224, !dbg !10046
  %93 = load i8, i8* %arrayidx225, align 1, !dbg !10046
  %conv226 = zext i8 %93 to i32, !dbg !10046
  br label %cond.end227, !dbg !10046

cond.end227:                                      ; preds = %cond.false223, %cond.true222
  %cond228 = phi i32 [ %91, %cond.true222 ], [ %conv226, %cond.false223 ], !dbg !10046
  %sub229 = sub i32 %cond228, 38, !dbg !10046
  br label %cond.end230, !dbg !10046

cond.end230:                                      ; preds = %cond.end227, %cond.end206
  %cond231 = phi i32 [ %add209, %cond.end206 ], [ %sub229, %cond.end227 ], !dbg !10046
  %idxprom232 = zext i32 %cond231 to i64, !dbg !10046
  %arrayidx233 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom232, !dbg !10046
  %94 = load %struct.real_format*, %struct.real_format** %arrayidx233, align 8, !dbg !10046
  %has_nans234 = getelementptr inbounds %struct.real_format, %struct.real_format* %94, i32 0, i32 11, !dbg !10046
  %95 = load i8, i8* %has_nans234, align 2, !dbg !10046
  %conv235 = zext i8 %95 to i32, !dbg !10046
  %tobool236 = icmp ne i32 %conv235, 0, !dbg !10046
  br i1 %tobool236, label %land.lhs.true237, label %land.lhs.true239, !dbg !10046

land.lhs.true237:                                 ; preds = %cond.end230
  %96 = load i32, i32* @flag_finite_math_only, align 4, !dbg !10046
  %tobool238 = icmp ne i32 %96, 0, !dbg !10046
  br i1 %tobool238, label %land.lhs.true239, label %if.end281, !dbg !10047

land.lhs.true239:                                 ; preds = %land.lhs.true237, %cond.end230, %lor.lhs.false159, %lor.lhs.false139
  %97 = load i32, i32* %code.addr, align 4, !dbg !10048
  %cmp240 = icmp eq i32 %97, 81, !dbg !10049
  br i1 %cmp240, label %if.then245, label %lor.lhs.false242, !dbg !10050

lor.lhs.false242:                                 ; preds = %land.lhs.true239
  %98 = load i32, i32* %code.addr, align 4, !dbg !10051
  %cmp243 = icmp eq i32 %98, 80, !dbg !10052
  br i1 %cmp243, label %if.then245, label %if.end281, !dbg !10053

if.then245:                                       ; preds = %lor.lhs.false242, %land.lhs.true239, %lor.lhs.false136, %land.lhs.true133, %lor.lhs.false, %land.lhs.true33
  call void @llvm.dbg.declare(metadata i32* %want_add, metadata !10054, metadata !DIExpression()), !dbg !10056
  %99 = load i32, i32* %normalizep.addr, align 4, !dbg !10057
  %cmp246 = icmp eq i32 %99, -1, !dbg !10058
  br i1 %cmp246, label %lor.end, label %lor.rhs, !dbg !10059

lor.rhs:                                          ; preds = %if.then245
  br label %lor.end, !dbg !10059

lor.end:                                          ; preds = %lor.rhs, %if.then245
  %100 = phi i1 [ true, %if.then245 ], [ false, %lor.rhs ]
  %lor.ext = zext i1 %100 to i32, !dbg !10059
  store i32 %lor.ext, i32* %want_add, align 4, !dbg !10056
  %101 = load i32, i32* %want_add, align 4, !dbg !10060
  %tobool248 = icmp ne i32 %101, 0, !dbg !10060
  br i1 %tobool248, label %land.lhs.true249, label %if.else, !dbg !10062

land.lhs.true249:                                 ; preds = %lor.end
  %102 = load i32, i32* %normalizep.addr, align 4, !dbg !10063
  %conv250 = sext i32 %102 to i64, !dbg !10063
  %call251 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv250), !dbg !10063
  %call252 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10064
  %call253 = call i32 @rtx_cost(%struct.rtx_def* %call251, i32 49, i8 zeroext %call252), !dbg !10065
  %cmp254 = icmp eq i32 %call253, 0, !dbg !10066
  br i1 %cmp254, label %if.then256, label %if.else, !dbg !10067

if.then256:                                       ; preds = %land.lhs.true249
  %103 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10068
  %104 = load i32, i32* %rcode, align 4, !dbg !10070
  %105 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10071
  %106 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10072
  %107 = load i32, i32* %mode.addr, align 4, !dbg !10073
  %108 = load i32, i32* %target_mode, align 4, !dbg !10074
  %call257 = call %struct.rtx_def* @emit_store_flag_1(%struct.rtx_def* %103, i32 %104, %struct.rtx_def* %105, %struct.rtx_def* %106, i32 %107, i32 0, i32 1, i32 %108), !dbg !10075
  store %struct.rtx_def* %call257, %struct.rtx_def** %tem, align 8, !dbg !10076
  %109 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10077
  %tobool258 = icmp ne %struct.rtx_def* %109, null, !dbg !10077
  br i1 %tobool258, label %if.then259, label %if.end263, !dbg !10079

if.then259:                                       ; preds = %if.then256
  %110 = load i32, i32* %target_mode, align 4, !dbg !10080
  %111 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10081
  %112 = load i32, i32* %normalizep.addr, align 4, !dbg !10082
  %conv260 = sext i32 %112 to i64, !dbg !10082
  %call261 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv260), !dbg !10082
  %113 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10083
  %call262 = call %struct.rtx_def* @expand_binop(i32 %110, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %111, %struct.rtx_def* %call261, %struct.rtx_def* %113, i32 0, i32 2), !dbg !10084
  store %struct.rtx_def* %call262, %struct.rtx_def** %retval, align 8, !dbg !10085
  br label %return, !dbg !10085

if.end263:                                        ; preds = %if.then256
  br label %if.end280, !dbg !10086

if.else:                                          ; preds = %land.lhs.true249, %lor.end
  %114 = load i32, i32* %want_add, align 4, !dbg !10087
  %tobool264 = icmp ne i32 %114, 0, !dbg !10087
  br i1 %tobool264, label %if.end279, label %land.lhs.true265, !dbg !10089

land.lhs.true265:                                 ; preds = %if.else
  %115 = load %struct.rtx_def*, %struct.rtx_def** %trueval, align 8, !dbg !10090
  %call266 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10091
  %call267 = call i32 @rtx_cost(%struct.rtx_def* %115, i32 63, i8 zeroext %call266), !dbg !10092
  %cmp268 = icmp eq i32 %call267, 0, !dbg !10093
  br i1 %cmp268, label %if.then270, label %if.end279, !dbg !10094

if.then270:                                       ; preds = %land.lhs.true265
  %116 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10095
  %117 = load i32, i32* %rcode, align 4, !dbg !10097
  %118 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10098
  %119 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10099
  %120 = load i32, i32* %mode.addr, align 4, !dbg !10100
  %121 = load i32, i32* %normalizep.addr, align 4, !dbg !10101
  %122 = load i32, i32* %target_mode, align 4, !dbg !10102
  %call271 = call %struct.rtx_def* @emit_store_flag_1(%struct.rtx_def* %116, i32 %117, %struct.rtx_def* %118, %struct.rtx_def* %119, i32 %120, i32 0, i32 %121, i32 %122), !dbg !10103
  store %struct.rtx_def* %call271, %struct.rtx_def** %tem, align 8, !dbg !10104
  %123 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10105
  %tobool272 = icmp ne %struct.rtx_def* %123, null, !dbg !10105
  br i1 %tobool272, label %if.then273, label %if.end278, !dbg !10107

if.then273:                                       ; preds = %if.then270
  %124 = load i32, i32* %target_mode, align 4, !dbg !10108
  %125 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10109
  %126 = load %struct.rtx_def*, %struct.rtx_def** %trueval, align 8, !dbg !10110
  %127 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10111
  %128 = load %struct.rtx_def*, %struct.rtx_def** %trueval, align 8, !dbg !10112
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1, !dbg !10112
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !10112
  %arrayidx274 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !10112
  %129 = load i64, i64* %arrayidx274, align 8, !dbg !10112
  %cmp275 = icmp sge i64 %129, 0, !dbg !10113
  %conv276 = zext i1 %cmp275 to i32, !dbg !10113
  %call277 = call %struct.rtx_def* @expand_binop(i32 %124, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %125, %struct.rtx_def* %126, %struct.rtx_def* %127, i32 %conv276, i32 2), !dbg !10114
  store %struct.rtx_def* %call277, %struct.rtx_def** %retval, align 8, !dbg !10115
  br label %return, !dbg !10115

if.end278:                                        ; preds = %if.then270
  br label %if.end279, !dbg !10116

if.end279:                                        ; preds = %if.end278, %land.lhs.true265, %if.else
  br label %if.end280

if.end280:                                        ; preds = %if.end279, %if.end263
  br label %if.end281, !dbg !10117

if.end281:                                        ; preds = %if.end280, %lor.lhs.false242, %land.lhs.true237, %if.then29
  %130 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10118
  call void @delete_insns_since(%struct.rtx_def* %130), !dbg !10119
  %131 = load i32, i32* %code.addr, align 4, !dbg !10120
  %cmp282 = icmp eq i32 %131, 91, !dbg !10122
  br i1 %cmp282, label %if.then287, label %lor.lhs.false284, !dbg !10123

lor.lhs.false284:                                 ; preds = %if.end281
  %132 = load i32, i32* %code.addr, align 4, !dbg !10124
  %cmp285 = icmp eq i32 %132, 90, !dbg !10125
  br i1 %cmp285, label %if.then287, label %if.end288, !dbg !10126

if.then287:                                       ; preds = %lor.lhs.false284, %if.end281
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10127
  br label %return, !dbg !10127

if.end288:                                        ; preds = %lor.lhs.false284
  %133 = load i32, i32* %code.addr, align 4, !dbg !10128
  %134 = load i32, i32* %mode.addr, align 4, !dbg !10129
  %call289 = call zeroext i8 @split_comparison(i32 %133, i32 %134, i32* %first_code, i32* %code.addr), !dbg !10130
  store i8 %call289, i8* %and_them, align 1, !dbg !10131
  %135 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom290 = zext i32 %135 to i64, !dbg !10132
  %arrayidx291 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom290, !dbg !10132
  %136 = load i8, i8* %arrayidx291, align 1, !dbg !10132
  %conv292 = zext i8 %136 to i32, !dbg !10132
  %cmp293 = icmp eq i32 %conv292, 8, !dbg !10132
  br i1 %cmp293, label %land.lhs.true313, label %lor.lhs.false295, !dbg !10132

lor.lhs.false295:                                 ; preds = %if.end288
  %137 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom296 = zext i32 %137 to i64, !dbg !10132
  %arrayidx297 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom296, !dbg !10132
  %138 = load i8, i8* %arrayidx297, align 1, !dbg !10132
  %conv298 = zext i8 %138 to i32, !dbg !10132
  %cmp299 = icmp eq i32 %conv298, 9, !dbg !10132
  br i1 %cmp299, label %land.lhs.true313, label %lor.lhs.false301, !dbg !10132

lor.lhs.false301:                                 ; preds = %lor.lhs.false295
  %139 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom302 = zext i32 %139 to i64, !dbg !10132
  %arrayidx303 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom302, !dbg !10132
  %140 = load i8, i8* %arrayidx303, align 1, !dbg !10132
  %conv304 = zext i8 %140 to i32, !dbg !10132
  %cmp305 = icmp eq i32 %conv304, 11, !dbg !10132
  br i1 %cmp305, label %land.lhs.true313, label %lor.lhs.false307, !dbg !10132

lor.lhs.false307:                                 ; preds = %lor.lhs.false301
  %141 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom308 = zext i32 %141 to i64, !dbg !10132
  %arrayidx309 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom308, !dbg !10132
  %142 = load i8, i8* %arrayidx309, align 1, !dbg !10132
  %conv310 = zext i8 %142 to i32, !dbg !10132
  %cmp311 = icmp eq i32 %conv310, 17, !dbg !10132
  br i1 %cmp311, label %land.lhs.true313, label %if.then387, !dbg !10132

land.lhs.true313:                                 ; preds = %lor.lhs.false307, %lor.lhs.false301, %lor.lhs.false295, %if.end288
  %143 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom314 = zext i32 %143 to i64, !dbg !10132
  %arrayidx315 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom314, !dbg !10132
  %144 = load i8, i8* %arrayidx315, align 1, !dbg !10132
  %conv316 = zext i8 %144 to i32, !dbg !10132
  %cmp317 = icmp eq i32 %conv316, 8, !dbg !10132
  br i1 %cmp317, label %cond.true325, label %lor.lhs.false319, !dbg !10132

lor.lhs.false319:                                 ; preds = %land.lhs.true313
  %145 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom320 = zext i32 %145 to i64, !dbg !10132
  %arrayidx321 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom320, !dbg !10132
  %146 = load i8, i8* %arrayidx321, align 1, !dbg !10132
  %conv322 = zext i8 %146 to i32, !dbg !10132
  %cmp323 = icmp eq i32 %conv322, 9, !dbg !10132
  br i1 %cmp323, label %cond.true325, label %cond.false326, !dbg !10132

cond.true325:                                     ; preds = %lor.lhs.false319, %land.lhs.true313
  %147 = load i32, i32* %mode.addr, align 4, !dbg !10132
  br label %cond.end330, !dbg !10132

cond.false326:                                    ; preds = %lor.lhs.false319
  %148 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom327 = zext i32 %148 to i64, !dbg !10132
  %arrayidx328 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom327, !dbg !10132
  %149 = load i8, i8* %arrayidx328, align 1, !dbg !10132
  %conv329 = zext i8 %149 to i32, !dbg !10132
  br label %cond.end330, !dbg !10132

cond.end330:                                      ; preds = %cond.false326, %cond.true325
  %cond331 = phi i32 [ %147, %cond.true325 ], [ %conv329, %cond.false326 ], !dbg !10132
  %idxprom332 = zext i32 %cond331 to i64, !dbg !10132
  %arrayidx333 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom332, !dbg !10132
  %150 = load i8, i8* %arrayidx333, align 1, !dbg !10132
  %conv334 = zext i8 %150 to i32, !dbg !10132
  %cmp335 = icmp eq i32 %conv334, 9, !dbg !10132
  br i1 %cmp335, label %cond.true337, label %cond.false358, !dbg !10132

cond.true337:                                     ; preds = %cond.end330
  %151 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom338 = zext i32 %151 to i64, !dbg !10132
  %arrayidx339 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom338, !dbg !10132
  %152 = load i8, i8* %arrayidx339, align 1, !dbg !10132
  %conv340 = zext i8 %152 to i32, !dbg !10132
  %cmp341 = icmp eq i32 %conv340, 8, !dbg !10132
  br i1 %cmp341, label %cond.true349, label %lor.lhs.false343, !dbg !10132

lor.lhs.false343:                                 ; preds = %cond.true337
  %153 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom344 = zext i32 %153 to i64, !dbg !10132
  %arrayidx345 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom344, !dbg !10132
  %154 = load i8, i8* %arrayidx345, align 1, !dbg !10132
  %conv346 = zext i8 %154 to i32, !dbg !10132
  %cmp347 = icmp eq i32 %conv346, 9, !dbg !10132
  br i1 %cmp347, label %cond.true349, label %cond.false350, !dbg !10132

cond.true349:                                     ; preds = %lor.lhs.false343, %cond.true337
  %155 = load i32, i32* %mode.addr, align 4, !dbg !10132
  br label %cond.end354, !dbg !10132

cond.false350:                                    ; preds = %lor.lhs.false343
  %156 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom351 = zext i32 %156 to i64, !dbg !10132
  %arrayidx352 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom351, !dbg !10132
  %157 = load i8, i8* %arrayidx352, align 1, !dbg !10132
  %conv353 = zext i8 %157 to i32, !dbg !10132
  br label %cond.end354, !dbg !10132

cond.end354:                                      ; preds = %cond.false350, %cond.true349
  %cond355 = phi i32 [ %155, %cond.true349 ], [ %conv353, %cond.false350 ], !dbg !10132
  %sub356 = sub i32 %cond355, 42, !dbg !10132
  %add357 = add i32 %sub356, 4, !dbg !10132
  br label %cond.end378, !dbg !10132

cond.false358:                                    ; preds = %cond.end330
  %158 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom359 = zext i32 %158 to i64, !dbg !10132
  %arrayidx360 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom359, !dbg !10132
  %159 = load i8, i8* %arrayidx360, align 1, !dbg !10132
  %conv361 = zext i8 %159 to i32, !dbg !10132
  %cmp362 = icmp eq i32 %conv361, 8, !dbg !10132
  br i1 %cmp362, label %cond.true370, label %lor.lhs.false364, !dbg !10132

lor.lhs.false364:                                 ; preds = %cond.false358
  %160 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom365 = zext i32 %160 to i64, !dbg !10132
  %arrayidx366 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom365, !dbg !10132
  %161 = load i8, i8* %arrayidx366, align 1, !dbg !10132
  %conv367 = zext i8 %161 to i32, !dbg !10132
  %cmp368 = icmp eq i32 %conv367, 9, !dbg !10132
  br i1 %cmp368, label %cond.true370, label %cond.false371, !dbg !10132

cond.true370:                                     ; preds = %lor.lhs.false364, %cond.false358
  %162 = load i32, i32* %mode.addr, align 4, !dbg !10132
  br label %cond.end375, !dbg !10132

cond.false371:                                    ; preds = %lor.lhs.false364
  %163 = load i32, i32* %mode.addr, align 4, !dbg !10132
  %idxprom372 = zext i32 %163 to i64, !dbg !10132
  %arrayidx373 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom372, !dbg !10132
  %164 = load i8, i8* %arrayidx373, align 1, !dbg !10132
  %conv374 = zext i8 %164 to i32, !dbg !10132
  br label %cond.end375, !dbg !10132

cond.end375:                                      ; preds = %cond.false371, %cond.true370
  %cond376 = phi i32 [ %162, %cond.true370 ], [ %conv374, %cond.false371 ], !dbg !10132
  %sub377 = sub i32 %cond376, 38, !dbg !10132
  br label %cond.end378, !dbg !10132

cond.end378:                                      ; preds = %cond.end375, %cond.end354
  %cond379 = phi i32 [ %add357, %cond.end354 ], [ %sub377, %cond.end375 ], !dbg !10132
  %idxprom380 = zext i32 %cond379 to i64, !dbg !10132
  %arrayidx381 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom380, !dbg !10132
  %165 = load %struct.real_format*, %struct.real_format** %arrayidx381, align 8, !dbg !10132
  %has_nans382 = getelementptr inbounds %struct.real_format, %struct.real_format* %165, i32 0, i32 11, !dbg !10132
  %166 = load i8, i8* %has_nans382, align 2, !dbg !10132
  %conv383 = zext i8 %166 to i32, !dbg !10132
  %tobool384 = icmp ne i32 %conv383, 0, !dbg !10132
  br i1 %tobool384, label %land.lhs.true385, label %if.then387, !dbg !10132

land.lhs.true385:                                 ; preds = %cond.end378
  %167 = load i32, i32* @flag_finite_math_only, align 4, !dbg !10132
  %tobool386 = icmp ne i32 %167, 0, !dbg !10132
  br i1 %tobool386, label %if.then387, label %if.end398, !dbg !10134

if.then387:                                       ; preds = %land.lhs.true385, %cond.end378, %lor.lhs.false307
  %168 = load i32, i32* %first_code, align 4, !dbg !10135
  %169 = load i8, i8* %and_them, align 1, !dbg !10135
  %conv388 = zext i8 %169 to i32, !dbg !10135
  %tobool389 = icmp ne i32 %conv388, 0, !dbg !10135
  %170 = zext i1 %tobool389 to i64, !dbg !10135
  %cond390 = select i1 %tobool389, i32 91, i32 90, !dbg !10135
  %cmp391 = icmp eq i32 %168, %cond390, !dbg !10135
  br i1 %cmp391, label %cond.false394, label %cond.true393, !dbg !10135

cond.true393:                                     ; preds = %if.then387
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 5541, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10135
  br label %cond.end395, !dbg !10135

cond.false394:                                    ; preds = %if.then387
  br label %cond.end395, !dbg !10135

cond.end395:                                      ; preds = %cond.false394, %cond.true393
  %cond396 = phi i32 [ 0, %cond.true393 ], [ 0, %cond.false394 ], !dbg !10135
  %171 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10137
  %172 = load i32, i32* %code.addr, align 4, !dbg !10138
  %173 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10139
  %174 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10140
  %175 = load i32, i32* %mode.addr, align 4, !dbg !10141
  %176 = load i32, i32* %normalizep.addr, align 4, !dbg !10142
  %177 = load i32, i32* %target_mode, align 4, !dbg !10143
  %call397 = call %struct.rtx_def* @emit_store_flag_1(%struct.rtx_def* %171, i32 %172, %struct.rtx_def* %173, %struct.rtx_def* %174, i32 %175, i32 0, i32 %176, i32 %177), !dbg !10144
  store %struct.rtx_def* %call397, %struct.rtx_def** %retval, align 8, !dbg !10145
  br label %return, !dbg !10145

if.end398:                                        ; preds = %land.lhs.true385
  %178 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10146
  %179 = load i32, i32* %first_code, align 4, !dbg !10147
  %180 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10148
  %181 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10149
  %182 = load i32, i32* %mode.addr, align 4, !dbg !10150
  %183 = load i32, i32* %normalizep.addr, align 4, !dbg !10151
  %184 = load i32, i32* %target_mode, align 4, !dbg !10152
  %call399 = call %struct.rtx_def* @emit_store_flag_1(%struct.rtx_def* %178, i32 %179, %struct.rtx_def* %180, %struct.rtx_def* %181, i32 %182, i32 0, i32 %183, i32 %184), !dbg !10153
  store %struct.rtx_def* %call399, %struct.rtx_def** %tem, align 8, !dbg !10154
  %185 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10155
  %cmp400 = icmp eq %struct.rtx_def* %185, null, !dbg !10157
  br i1 %cmp400, label %if.then402, label %if.end403, !dbg !10158

if.then402:                                       ; preds = %if.end398
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10159
  br label %return, !dbg !10159

if.end403:                                        ; preds = %if.end398
  %186 = load i8, i8* %and_them, align 1, !dbg !10160
  %tobool404 = icmp ne i8 %186, 0, !dbg !10160
  br i1 %tobool404, label %if.then405, label %if.else410, !dbg !10162

if.then405:                                       ; preds = %if.end403
  %187 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10163
  %188 = load i32, i32* %code.addr, align 4, !dbg !10164
  %189 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10165
  %190 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10166
  %191 = load i32, i32* %mode.addr, align 4, !dbg !10167
  %192 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10168
  %193 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10169
  %194 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10170
  %195 = bitcast %struct.rtx_def* %194 to i32*, !dbg !10170
  %bf.load406 = load i32, i32* %195, align 8, !dbg !10170
  %bf.lshr407 = lshr i32 %bf.load406, 16, !dbg !10170
  %bf.clear408 = and i32 %bf.lshr407, 255, !dbg !10170
  %call409 = call %struct.rtx_def* @emit_conditional_move(%struct.rtx_def* %187, i32 %188, %struct.rtx_def* %189, %struct.rtx_def* %190, i32 %191, %struct.rtx_def* %192, %struct.rtx_def* %193, i32 %bf.clear408, i32 0), !dbg !10171
  store %struct.rtx_def* %call409, %struct.rtx_def** %tem, align 8, !dbg !10172
  br label %if.end415, !dbg !10173

if.else410:                                       ; preds = %if.end403
  %196 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10174
  %197 = load i32, i32* %code.addr, align 4, !dbg !10175
  %198 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10176
  %199 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10177
  %200 = load i32, i32* %mode.addr, align 4, !dbg !10178
  %201 = load %struct.rtx_def*, %struct.rtx_def** %trueval, align 8, !dbg !10179
  %202 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10180
  %203 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10181
  %204 = bitcast %struct.rtx_def* %203 to i32*, !dbg !10181
  %bf.load411 = load i32, i32* %204, align 8, !dbg !10181
  %bf.lshr412 = lshr i32 %bf.load411, 16, !dbg !10181
  %bf.clear413 = and i32 %bf.lshr412, 255, !dbg !10181
  %call414 = call %struct.rtx_def* @emit_conditional_move(%struct.rtx_def* %196, i32 %197, %struct.rtx_def* %198, %struct.rtx_def* %199, i32 %200, %struct.rtx_def* %201, %struct.rtx_def* %202, i32 %bf.clear413, i32 0), !dbg !10182
  store %struct.rtx_def* %call414, %struct.rtx_def** %tem, align 8, !dbg !10183
  br label %if.end415

if.end415:                                        ; preds = %if.else410, %if.then405
  %205 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10184
  %cmp416 = icmp eq %struct.rtx_def* %205, null, !dbg !10186
  br i1 %cmp416, label %if.then418, label %if.end419, !dbg !10187

if.then418:                                       ; preds = %if.end415
  %206 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10188
  call void @delete_insns_since(%struct.rtx_def* %206), !dbg !10189
  br label %if.end419, !dbg !10189

if.end419:                                        ; preds = %if.then418, %if.end415
  %207 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10190
  store %struct.rtx_def* %207, %struct.rtx_def** %retval, align 8, !dbg !10191
  br label %return, !dbg !10191

if.end420:                                        ; preds = %cond.end23
  %208 = load i32, i32* %mode.addr, align 4, !dbg !10192
  %idxprom421 = zext i32 %208 to i64, !dbg !10192
  %arrayidx422 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom421, !dbg !10192
  %209 = load i8, i8* %arrayidx422, align 1, !dbg !10192
  %conv423 = zext i8 %209 to i32, !dbg !10192
  %cmp424 = icmp ne i32 %conv423, 2, !dbg !10194
  br i1 %cmp424, label %if.then426, label %if.end427, !dbg !10195

if.then426:                                       ; preds = %if.end420
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10196
  br label %return, !dbg !10196

if.end427:                                        ; preds = %if.end420
  %210 = load i32, i32* %code.addr, align 4, !dbg !10197
  %cmp428 = icmp eq i32 %210, 81, !dbg !10199
  br i1 %cmp428, label %land.lhs.true433, label %lor.lhs.false430, !dbg !10200

lor.lhs.false430:                                 ; preds = %if.end427
  %211 = load i32, i32* %code.addr, align 4, !dbg !10201
  %cmp431 = icmp eq i32 %211, 80, !dbg !10202
  br i1 %cmp431, label %land.lhs.true433, label %if.end452, !dbg !10203

land.lhs.true433:                                 ; preds = %lor.lhs.false430, %if.end427
  %212 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10204
  %213 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10205
  %cmp434 = icmp ne %struct.rtx_def* %212, %213, !dbg !10206
  br i1 %cmp434, label %if.then436, label %if.end452, !dbg !10207

if.then436:                                       ; preds = %land.lhs.true433
  %214 = load i32, i32* %mode.addr, align 4, !dbg !10208
  %215 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10210
  %216 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10211
  %217 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10212
  %call437 = call %struct.rtx_def* @expand_binop(i32 %214, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %215, %struct.rtx_def* %216, %struct.rtx_def* %217, i32 1, i32 2), !dbg !10213
  store %struct.rtx_def* %call437, %struct.rtx_def** %tem, align 8, !dbg !10214
  %218 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10215
  %cmp438 = icmp eq %struct.rtx_def* %218, null, !dbg !10217
  br i1 %cmp438, label %if.then440, label %if.end442, !dbg !10218

if.then440:                                       ; preds = %if.then436
  %219 = load i32, i32* %mode.addr, align 4, !dbg !10219
  %220 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10220
  %221 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10221
  %222 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10222
  %call441 = call %struct.rtx_def* @expand_binop(i32 %219, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %220, %struct.rtx_def* %221, %struct.rtx_def* %222, i32 1, i32 2), !dbg !10223
  store %struct.rtx_def* %call441, %struct.rtx_def** %tem, align 8, !dbg !10224
  br label %if.end442, !dbg !10225

if.end442:                                        ; preds = %if.then440, %if.then436
  %223 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10226
  %cmp443 = icmp ne %struct.rtx_def* %223, null, !dbg !10228
  br i1 %cmp443, label %if.then445, label %if.end447, !dbg !10229

if.then445:                                       ; preds = %if.end442
  %224 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10230
  %225 = load i32, i32* %code.addr, align 4, !dbg !10231
  %226 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10232
  %227 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10233
  %228 = load i32, i32* %mode.addr, align 4, !dbg !10234
  %229 = load i32, i32* %unsignedp.addr, align 4, !dbg !10235
  %230 = load i32, i32* %normalizep.addr, align 4, !dbg !10236
  %call446 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %224, i32 %225, %struct.rtx_def* %226, %struct.rtx_def* %227, i32 %228, i32 %229, i32 %230), !dbg !10237
  store %struct.rtx_def* %call446, %struct.rtx_def** %tem, align 8, !dbg !10238
  br label %if.end447, !dbg !10239

if.end447:                                        ; preds = %if.then445, %if.end442
  %231 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10240
  %cmp448 = icmp ne %struct.rtx_def* %231, null, !dbg !10242
  br i1 %cmp448, label %if.then450, label %if.end451, !dbg !10243

if.then450:                                       ; preds = %if.end447
  %232 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10244
  store %struct.rtx_def* %232, %struct.rtx_def** %retval, align 8, !dbg !10245
  br label %return, !dbg !10245

if.end451:                                        ; preds = %if.end447
  %233 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10246
  call void @delete_insns_since(%struct.rtx_def* %233), !dbg !10247
  br label %if.end452, !dbg !10248

if.end452:                                        ; preds = %if.end451, %land.lhs.true433, %lor.lhs.false430
  %234 = load i32, i32* %code.addr, align 4, !dbg !10249
  %call453 = call i32 @reverse_condition(i32 %234), !dbg !10250
  store i32 %call453, i32* %rcode, align 4, !dbg !10251
  %235 = load i32, i32* %rcode, align 4, !dbg !10252
  %236 = load i32, i32* %mode.addr, align 4, !dbg !10254
  %call454 = call i32 @can_compare_p(i32 %235, i32 %236, i32 2), !dbg !10255
  %tobool455 = icmp ne i32 %call454, 0, !dbg !10255
  br i1 %tobool455, label %land.lhs.true456, label %if.end523, !dbg !10256

land.lhs.true456:                                 ; preds = %if.end452
  %237 = load i32, i32* %mode.addr, align 4, !dbg !10257
  %idxprom457 = sext i32 %237 to i64, !dbg !10257
  %arrayidx458 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 117, i32 4), i64 0, i64 %idxprom457, !dbg !10257
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx458, i32 0, i32 0, !dbg !10258
  %238 = load i32, i32* %insn_code, align 4, !dbg !10258
  %cmp459 = icmp eq i32 %238, 2956, !dbg !10259
  br i1 %cmp459, label %land.lhs.true461, label %if.then474, !dbg !10260

land.lhs.true461:                                 ; preds = %land.lhs.true456
  %239 = load i32, i32* %code.addr, align 4, !dbg !10261
  %cmp462 = icmp eq i32 %239, 80, !dbg !10262
  br i1 %cmp462, label %land.lhs.true464, label %if.then474, !dbg !10263

land.lhs.true464:                                 ; preds = %land.lhs.true461
  %240 = load i32, i32* %mode.addr, align 4, !dbg !10264
  %idxprom465 = zext i32 %240 to i64, !dbg !10264
  %arrayidx466 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom465, !dbg !10264
  %241 = load i8, i8* %arrayidx466, align 1, !dbg !10264
  %conv467 = zext i8 %241 to i16, !dbg !10264
  %conv468 = zext i16 %conv467 to i32, !dbg !10264
  %cmp469 = icmp slt i32 %conv468, 4, !dbg !10265
  br i1 %cmp469, label %land.lhs.true471, label %if.then474, !dbg !10266

land.lhs.true471:                                 ; preds = %land.lhs.true464
  %242 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10267
  %243 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10268
  %cmp472 = icmp eq %struct.rtx_def* %242, %243, !dbg !10269
  br i1 %cmp472, label %if.end523, label %if.then474, !dbg !10270

if.then474:                                       ; preds = %land.lhs.true471, %land.lhs.true464, %land.lhs.true461, %land.lhs.true456
  call void @llvm.dbg.declare(metadata i32* %want_add475, metadata !10271, metadata !DIExpression()), !dbg !10273
  %244 = load i32, i32* %normalizep.addr, align 4, !dbg !10274
  %cmp476 = icmp eq i32 %244, -1, !dbg !10275
  br i1 %cmp476, label %lor.end479, label %lor.rhs478, !dbg !10276

lor.rhs478:                                       ; preds = %if.then474
  br label %lor.end479, !dbg !10276

lor.end479:                                       ; preds = %lor.rhs478, %if.then474
  %245 = phi i1 [ true, %if.then474 ], [ false, %lor.rhs478 ]
  %lor.ext480 = zext i1 %245 to i32, !dbg !10276
  store i32 %lor.ext480, i32* %want_add475, align 4, !dbg !10273
  %246 = load i32, i32* %want_add475, align 4, !dbg !10277
  %tobool481 = icmp ne i32 %246, 0, !dbg !10277
  br i1 %tobool481, label %land.lhs.true482, label %if.else498, !dbg !10279

land.lhs.true482:                                 ; preds = %lor.end479
  %247 = load i32, i32* %normalizep.addr, align 4, !dbg !10280
  %conv483 = sext i32 %247 to i64, !dbg !10280
  %call484 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv483), !dbg !10280
  %call485 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10281
  %call486 = call i32 @rtx_cost(%struct.rtx_def* %call484, i32 49, i8 zeroext %call485), !dbg !10282
  %cmp487 = icmp eq i32 %call486, 0, !dbg !10283
  br i1 %cmp487, label %if.then489, label %if.else498, !dbg !10284

if.then489:                                       ; preds = %land.lhs.true482
  %248 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10285
  %249 = load i32, i32* %rcode, align 4, !dbg !10287
  %250 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10288
  %251 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10289
  %252 = load i32, i32* %mode.addr, align 4, !dbg !10290
  %253 = load i32, i32* %target_mode, align 4, !dbg !10291
  %call490 = call %struct.rtx_def* @emit_store_flag_1(%struct.rtx_def* %248, i32 %249, %struct.rtx_def* %250, %struct.rtx_def* %251, i32 %252, i32 0, i32 1, i32 %253), !dbg !10292
  store %struct.rtx_def* %call490, %struct.rtx_def** %tem, align 8, !dbg !10293
  %254 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10294
  %cmp491 = icmp ne %struct.rtx_def* %254, null, !dbg !10296
  br i1 %cmp491, label %if.then493, label %if.end497, !dbg !10297

if.then493:                                       ; preds = %if.then489
  %255 = load i32, i32* %target_mode, align 4, !dbg !10298
  %256 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10299
  %257 = load i32, i32* %normalizep.addr, align 4, !dbg !10300
  %conv494 = sext i32 %257 to i64, !dbg !10300
  %call495 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv494), !dbg !10300
  %258 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10301
  %call496 = call %struct.rtx_def* @expand_binop(i32 %255, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %256, %struct.rtx_def* %call495, %struct.rtx_def* %258, i32 0, i32 2), !dbg !10302
  store %struct.rtx_def* %call496, %struct.rtx_def** %tem, align 8, !dbg !10303
  br label %if.end497, !dbg !10304

if.end497:                                        ; preds = %if.then493, %if.then489
  br label %if.end518, !dbg !10305

if.else498:                                       ; preds = %land.lhs.true482, %lor.end479
  %259 = load i32, i32* %want_add475, align 4, !dbg !10306
  %tobool499 = icmp ne i32 %259, 0, !dbg !10306
  br i1 %tobool499, label %if.end517, label %land.lhs.true500, !dbg !10308

land.lhs.true500:                                 ; preds = %if.else498
  %260 = load %struct.rtx_def*, %struct.rtx_def** %trueval, align 8, !dbg !10309
  %call501 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10310
  %call502 = call i32 @rtx_cost(%struct.rtx_def* %260, i32 63, i8 zeroext %call501), !dbg !10311
  %cmp503 = icmp eq i32 %call502, 0, !dbg !10312
  br i1 %cmp503, label %if.then505, label %if.end517, !dbg !10313

if.then505:                                       ; preds = %land.lhs.true500
  %261 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10314
  %262 = load i32, i32* %rcode, align 4, !dbg !10316
  %263 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10317
  %264 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10318
  %265 = load i32, i32* %mode.addr, align 4, !dbg !10319
  %266 = load i32, i32* %normalizep.addr, align 4, !dbg !10320
  %267 = load i32, i32* %target_mode, align 4, !dbg !10321
  %call506 = call %struct.rtx_def* @emit_store_flag_1(%struct.rtx_def* %261, i32 %262, %struct.rtx_def* %263, %struct.rtx_def* %264, i32 %265, i32 0, i32 %266, i32 %267), !dbg !10322
  store %struct.rtx_def* %call506, %struct.rtx_def** %tem, align 8, !dbg !10323
  %268 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10324
  %cmp507 = icmp ne %struct.rtx_def* %268, null, !dbg !10326
  br i1 %cmp507, label %if.then509, label %if.end516, !dbg !10327

if.then509:                                       ; preds = %if.then505
  %269 = load i32, i32* %target_mode, align 4, !dbg !10328
  %270 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10329
  %271 = load %struct.rtx_def*, %struct.rtx_def** %trueval, align 8, !dbg !10330
  %272 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10331
  %273 = load %struct.rtx_def*, %struct.rtx_def** %trueval, align 8, !dbg !10332
  %u510 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %273, i32 0, i32 1, !dbg !10332
  %hwint511 = bitcast %union.u* %u510 to [1 x i64]*, !dbg !10332
  %arrayidx512 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint511, i64 0, i64 0, !dbg !10332
  %274 = load i64, i64* %arrayidx512, align 8, !dbg !10332
  %cmp513 = icmp sge i64 %274, 0, !dbg !10333
  %conv514 = zext i1 %cmp513 to i32, !dbg !10333
  %call515 = call %struct.rtx_def* @expand_binop(i32 %269, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %270, %struct.rtx_def* %271, %struct.rtx_def* %272, i32 %conv514, i32 2), !dbg !10334
  store %struct.rtx_def* %call515, %struct.rtx_def** %tem, align 8, !dbg !10335
  br label %if.end516, !dbg !10336

if.end516:                                        ; preds = %if.then509, %if.then505
  br label %if.end517, !dbg !10337

if.end517:                                        ; preds = %if.end516, %land.lhs.true500, %if.else498
  br label %if.end518

if.end518:                                        ; preds = %if.end517, %if.end497
  %275 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10338
  %cmp519 = icmp ne %struct.rtx_def* %275, null, !dbg !10340
  br i1 %cmp519, label %if.then521, label %if.end522, !dbg !10341

if.then521:                                       ; preds = %if.end518
  %276 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10342
  store %struct.rtx_def* %276, %struct.rtx_def** %retval, align 8, !dbg !10343
  br label %return, !dbg !10343

if.end522:                                        ; preds = %if.end518
  %277 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10344
  call void @delete_insns_since(%struct.rtx_def* %277), !dbg !10345
  br label %if.end523, !dbg !10346

if.end523:                                        ; preds = %if.end522, %land.lhs.true471, %if.end452
  %278 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10347
  %279 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10349
  %cmp524 = icmp ne %struct.rtx_def* %278, %279, !dbg !10350
  br i1 %cmp524, label %if.then547, label %lor.lhs.false526, !dbg !10351

lor.lhs.false526:                                 ; preds = %if.end523
  %280 = load i32, i32* %code.addr, align 4, !dbg !10352
  %cmp527 = icmp ne i32 %280, 81, !dbg !10353
  br i1 %cmp527, label %land.lhs.true529, label %if.end548, !dbg !10354

land.lhs.true529:                                 ; preds = %lor.lhs.false526
  %281 = load i32, i32* %code.addr, align 4, !dbg !10355
  %cmp530 = icmp ne i32 %281, 80, !dbg !10356
  br i1 %cmp530, label %land.lhs.true532, label %if.end548, !dbg !10357

land.lhs.true532:                                 ; preds = %land.lhs.true529
  %call533 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10358
  %tobool534 = icmp ne i8 %call533, 0, !dbg !10358
  br i1 %tobool534, label %cond.false536, label %cond.true535, !dbg !10358

cond.true535:                                     ; preds = %land.lhs.true532
  br label %cond.end537, !dbg !10358

cond.false536:                                    ; preds = %land.lhs.true532
  %282 = load i32, i32* @ix86_branch_cost, align 4, !dbg !10358
  br label %cond.end537, !dbg !10358

cond.end537:                                      ; preds = %cond.false536, %cond.true535
  %cond538 = phi i32 [ 2, %cond.true535 ], [ %282, %cond.false536 ], !dbg !10358
  %cmp539 = icmp sle i32 %cond538, 1, !dbg !10359
  br i1 %cmp539, label %if.then547, label %lor.lhs.false541, !dbg !10360

lor.lhs.false541:                                 ; preds = %cond.end537
  %283 = load i32, i32* %code.addr, align 4, !dbg !10361
  %cmp542 = icmp ne i32 %283, 84, !dbg !10362
  br i1 %cmp542, label %land.lhs.true544, label %if.end548, !dbg !10363

land.lhs.true544:                                 ; preds = %lor.lhs.false541
  %284 = load i32, i32* %code.addr, align 4, !dbg !10364
  %cmp545 = icmp ne i32 %284, 83, !dbg !10365
  br i1 %cmp545, label %if.then547, label %if.end548, !dbg !10366

if.then547:                                       ; preds = %land.lhs.true544, %cond.end537, %if.end523
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10367
  br label %return, !dbg !10367

if.end548:                                        ; preds = %land.lhs.true544, %lor.lhs.false541, %land.lhs.true529, %lor.lhs.false526
  store %struct.rtx_def* null, %struct.rtx_def** %tem, align 8, !dbg !10368
  %285 = load i32, i32* %code.addr, align 4, !dbg !10369
  %cmp549 = icmp eq i32 %285, 84, !dbg !10371
  br i1 %cmp549, label %if.then551, label %if.end561, !dbg !10372

if.then551:                                       ; preds = %if.end548
  %286 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10373
  %287 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10376
  %call552 = call i32 @rtx_equal_p(%struct.rtx_def* %286, %struct.rtx_def* %287), !dbg !10377
  %tobool553 = icmp ne i32 %call552, 0, !dbg !10377
  br i1 %tobool553, label %if.then554, label %if.end555, !dbg !10378

if.then554:                                       ; preds = %if.then551
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8, !dbg !10379
  br label %if.end555, !dbg !10380

if.end555:                                        ; preds = %if.then554, %if.then551
  %288 = load i32, i32* %mode.addr, align 4, !dbg !10381
  %289 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10382
  %290 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !10383
  %291 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10384
  %call556 = call %struct.rtx_def* @expand_binop(i32 %288, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %289, %struct.rtx_def* %290, %struct.rtx_def* %291, i32 0, i32 2), !dbg !10385
  store %struct.rtx_def* %call556, %struct.rtx_def** %tem, align 8, !dbg !10386
  %292 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10387
  %tobool557 = icmp ne %struct.rtx_def* %292, null, !dbg !10387
  br i1 %tobool557, label %if.then558, label %if.end560, !dbg !10389

if.then558:                                       ; preds = %if.end555
  %293 = load i32, i32* %mode.addr, align 4, !dbg !10390
  %294 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10391
  %295 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10392
  %296 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10393
  %call559 = call %struct.rtx_def* @expand_binop(i32 %293, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %294, %struct.rtx_def* %295, %struct.rtx_def* %296, i32 0, i32 2), !dbg !10394
  store %struct.rtx_def* %call559, %struct.rtx_def** %tem, align 8, !dbg !10395
  br label %if.end560, !dbg !10396

if.end560:                                        ; preds = %if.then558, %if.end555
  br label %if.end561, !dbg !10397

if.end561:                                        ; preds = %if.end560, %if.end548
  %297 = load i32, i32* %code.addr, align 4, !dbg !10398
  %cmp562 = icmp eq i32 %297, 83, !dbg !10400
  br i1 %cmp562, label %if.then564, label %if.end580, !dbg !10401

if.then564:                                       ; preds = %if.end561
  %298 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10402
  %299 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10405
  %call565 = call i32 @rtx_equal_p(%struct.rtx_def* %298, %struct.rtx_def* %299), !dbg !10406
  %tobool566 = icmp ne i32 %call565, 0, !dbg !10406
  br i1 %tobool566, label %if.then567, label %if.end568, !dbg !10407

if.then567:                                       ; preds = %if.then564
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8, !dbg !10408
  br label %if.end568, !dbg !10409

if.end568:                                        ; preds = %if.then567, %if.then564
  %300 = load i32, i32* %mode.addr, align 4, !dbg !10410
  %301 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10411
  %302 = load i32, i32* %mode.addr, align 4, !dbg !10412
  %idxprom569 = zext i32 %302 to i64, !dbg !10412
  %arrayidx570 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom569, !dbg !10412
  %303 = load i8, i8* %arrayidx570, align 1, !dbg !10412
  %conv571 = zext i8 %303 to i16, !dbg !10412
  %conv572 = zext i16 %conv571 to i32, !dbg !10412
  %mul = mul nsw i32 %conv572, 8, !dbg !10412
  %conv573 = trunc i32 %mul to i16, !dbg !10412
  %conv574 = zext i16 %conv573 to i32, !dbg !10412
  %sub575 = sub nsw i32 %conv574, 1, !dbg !10412
  %conv576 = sext i32 %sub575 to i64, !dbg !10412
  %call577 = call %union.tree_node* @size_int_kind(i64 %conv576, i32 0), !dbg !10412
  %304 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10413
  %call578 = call %struct.rtx_def* @expand_shift(i32 84, i32 %300, %struct.rtx_def* %301, %union.tree_node* %call577, %struct.rtx_def* %304, i32 0), !dbg !10414
  store %struct.rtx_def* %call578, %struct.rtx_def** %tem, align 8, !dbg !10415
  %305 = load i32, i32* %mode.addr, align 4, !dbg !10416
  %306 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10417
  %307 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10418
  %308 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10419
  %call579 = call %struct.rtx_def* @expand_binop(i32 %305, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %306, %struct.rtx_def* %307, %struct.rtx_def* %308, i32 0, i32 2), !dbg !10420
  store %struct.rtx_def* %call579, %struct.rtx_def** %tem, align 8, !dbg !10421
  br label %if.end580, !dbg !10422

if.end580:                                        ; preds = %if.end568, %if.end561
  %309 = load i32, i32* %code.addr, align 4, !dbg !10423
  %cmp581 = icmp eq i32 %309, 81, !dbg !10425
  br i1 %cmp581, label %if.then586, label %lor.lhs.false583, !dbg !10426

lor.lhs.false583:                                 ; preds = %if.end580
  %310 = load i32, i32* %code.addr, align 4, !dbg !10427
  %cmp584 = icmp eq i32 %310, 80, !dbg !10428
  br i1 %cmp584, label %if.then586, label %if.end654, !dbg !10429

if.then586:                                       ; preds = %lor.lhs.false583, %if.end580
  %311 = load i32, i32* %mode.addr, align 4, !dbg !10430
  %idxprom587 = sext i32 %311 to i64, !dbg !10430
  %arrayidx588 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 66, i32 4), i64 0, i64 %idxprom587, !dbg !10430
  %insn_code589 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx588, i32 0, i32 0, !dbg !10433
  %312 = load i32, i32* %insn_code589, align 4, !dbg !10433
  %cmp590 = icmp ne i32 %312, 2956, !dbg !10434
  br i1 %cmp590, label %if.then592, label %if.else594, !dbg !10435

if.then592:                                       ; preds = %if.then586
  %313 = load i32, i32* %mode.addr, align 4, !dbg !10436
  %314 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10437
  %315 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10438
  %call593 = call %struct.rtx_def* @expand_unop(i32 %313, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 66), %struct.rtx_def* %314, %struct.rtx_def* %315, i32 1), !dbg !10439
  store %struct.rtx_def* %call593, %struct.rtx_def** %tem, align 8, !dbg !10440
  br label %if.end613, !dbg !10441

if.else594:                                       ; preds = %if.then586
  %316 = load i32, i32* %mode.addr, align 4, !dbg !10442
  %idxprom595 = sext i32 %316 to i64, !dbg !10442
  %arrayidx596 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 70, i32 4), i64 0, i64 %idxprom595, !dbg !10442
  %insn_code597 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx596, i32 0, i32 0, !dbg !10444
  %317 = load i32, i32* %insn_code597, align 4, !dbg !10444
  %cmp598 = icmp ne i32 %317, 2956, !dbg !10445
  br i1 %cmp598, label %if.then600, label %if.else602, !dbg !10446

if.then600:                                       ; preds = %if.else594
  %318 = load i32, i32* %mode.addr, align 4, !dbg !10447
  %319 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10448
  %320 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10449
  %call601 = call %struct.rtx_def* @expand_unop(i32 %318, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 70), %struct.rtx_def* %319, %struct.rtx_def* %320, i32 1), !dbg !10450
  store %struct.rtx_def* %call601, %struct.rtx_def** %tem, align 8, !dbg !10451
  br label %if.end612, !dbg !10452

if.else602:                                       ; preds = %if.else594
  %321 = load i32, i32* %mode.addr, align 4, !dbg !10453
  %idxprom603 = zext i32 %321 to i64, !dbg !10453
  %arrayidx604 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom603, !dbg !10453
  %322 = load i8, i8* %arrayidx604, align 1, !dbg !10453
  %conv605 = zext i8 %322 to i16, !dbg !10453
  %conv606 = zext i16 %conv605 to i32, !dbg !10453
  %cmp607 = icmp slt i32 %conv606, 4, !dbg !10455
  br i1 %cmp607, label %if.then609, label %if.end611, !dbg !10456

if.then609:                                       ; preds = %if.else602
  %323 = load i32, i32* @word_mode, align 4, !dbg !10457
  %324 = load i32, i32* %mode.addr, align 4, !dbg !10459
  %325 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10460
  %call610 = call %struct.rtx_def* @convert_modes(i32 %323, i32 %324, %struct.rtx_def* %325, i32 1), !dbg !10461
  store %struct.rtx_def* %call610, %struct.rtx_def** %tem, align 8, !dbg !10462
  %326 = load i32, i32* @word_mode, align 4, !dbg !10463
  store i32 %326, i32* %mode.addr, align 4, !dbg !10464
  br label %if.end611, !dbg !10465

if.end611:                                        ; preds = %if.then609, %if.else602
  br label %if.end612

if.end612:                                        ; preds = %if.end611, %if.then600
  br label %if.end613

if.end613:                                        ; preds = %if.end612, %if.then592
  %327 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10466
  %cmp614 = icmp ne %struct.rtx_def* %327, null, !dbg !10468
  br i1 %cmp614, label %if.then616, label %if.end624, !dbg !10469

if.then616:                                       ; preds = %if.end613
  %328 = load i32, i32* %code.addr, align 4, !dbg !10470
  %cmp617 = icmp eq i32 %328, 81, !dbg !10473
  br i1 %cmp617, label %if.then619, label %if.else621, !dbg !10474

if.then619:                                       ; preds = %if.then616
  %329 = load i32, i32* %mode.addr, align 4, !dbg !10475
  %330 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10476
  %331 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !10477
  %332 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10478
  %call620 = call %struct.rtx_def* @expand_binop(i32 %329, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %330, %struct.rtx_def* %331, %struct.rtx_def* %332, i32 0, i32 2), !dbg !10479
  store %struct.rtx_def* %call620, %struct.rtx_def** %tem, align 8, !dbg !10480
  br label %if.end623, !dbg !10481

if.else621:                                       ; preds = %if.then616
  %333 = load i32, i32* %mode.addr, align 4, !dbg !10482
  %334 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10483
  %335 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10484
  %call622 = call %struct.rtx_def* @expand_unop(i32 %333, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %334, %struct.rtx_def* %335, i32 0), !dbg !10485
  store %struct.rtx_def* %call622, %struct.rtx_def** %tem, align 8, !dbg !10486
  br label %if.end623

if.end623:                                        ; preds = %if.else621, %if.then619
  br label %if.end624, !dbg !10487

if.end624:                                        ; preds = %if.end623, %if.end613
  %336 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10488
  %cmp625 = icmp eq %struct.rtx_def* %336, null, !dbg !10490
  br i1 %cmp625, label %land.lhs.true627, label %if.end653, !dbg !10491

land.lhs.true627:                                 ; preds = %if.end624
  %337 = load i32, i32* %code.addr, align 4, !dbg !10492
  %cmp628 = icmp eq i32 %337, 80, !dbg !10493
  br i1 %cmp628, label %if.then639, label %lor.lhs.false630, !dbg !10494

lor.lhs.false630:                                 ; preds = %land.lhs.true627
  %call631 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10495
  %tobool632 = icmp ne i8 %call631, 0, !dbg !10495
  br i1 %tobool632, label %cond.false634, label %cond.true633, !dbg !10495

cond.true633:                                     ; preds = %lor.lhs.false630
  br label %cond.end635, !dbg !10495

cond.false634:                                    ; preds = %lor.lhs.false630
  %338 = load i32, i32* @ix86_branch_cost, align 4, !dbg !10495
  br label %cond.end635, !dbg !10495

cond.end635:                                      ; preds = %cond.false634, %cond.true633
  %cond636 = phi i32 [ 2, %cond.true633 ], [ %338, %cond.false634 ], !dbg !10495
  %cmp637 = icmp sgt i32 %cond636, 1, !dbg !10496
  br i1 %cmp637, label %if.then639, label %if.end653, !dbg !10497

if.then639:                                       ; preds = %cond.end635, %land.lhs.true627
  %339 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10498
  %340 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10501
  %call640 = call i32 @rtx_equal_p(%struct.rtx_def* %339, %struct.rtx_def* %340), !dbg !10502
  %tobool641 = icmp ne i32 %call640, 0, !dbg !10502
  br i1 %tobool641, label %if.then642, label %if.end643, !dbg !10503

if.then642:                                       ; preds = %if.then639
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8, !dbg !10504
  br label %if.end643, !dbg !10505

if.end643:                                        ; preds = %if.then642, %if.then639
  %341 = load i32, i32* %mode.addr, align 4, !dbg !10506
  %342 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10507
  %343 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10508
  %call644 = call %struct.rtx_def* @expand_unop(i32 %341, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %342, %struct.rtx_def* %343, i32 0), !dbg !10509
  store %struct.rtx_def* %call644, %struct.rtx_def** %tem, align 8, !dbg !10510
  %344 = load i32, i32* %mode.addr, align 4, !dbg !10511
  %345 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10512
  %346 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10513
  %347 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10514
  %call645 = call %struct.rtx_def* @expand_binop(i32 %344, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %345, %struct.rtx_def* %346, %struct.rtx_def* %347, i32 0, i32 2), !dbg !10515
  store %struct.rtx_def* %call645, %struct.rtx_def** %tem, align 8, !dbg !10516
  %348 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10517
  %tobool646 = icmp ne %struct.rtx_def* %348, null, !dbg !10517
  br i1 %tobool646, label %land.lhs.true647, label %if.end652, !dbg !10519

land.lhs.true647:                                 ; preds = %if.end643
  %349 = load i32, i32* %code.addr, align 4, !dbg !10520
  %cmp648 = icmp eq i32 %349, 81, !dbg !10521
  br i1 %cmp648, label %if.then650, label %if.end652, !dbg !10522

if.then650:                                       ; preds = %land.lhs.true647
  %350 = load i32, i32* %mode.addr, align 4, !dbg !10523
  %351 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10524
  %352 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10525
  %call651 = call %struct.rtx_def* @expand_unop(i32 %350, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69), %struct.rtx_def* %351, %struct.rtx_def* %352, i32 0), !dbg !10526
  store %struct.rtx_def* %call651, %struct.rtx_def** %tem, align 8, !dbg !10527
  br label %if.end652, !dbg !10528

if.end652:                                        ; preds = %if.then650, %land.lhs.true647, %if.end643
  br label %if.end653, !dbg !10529

if.end653:                                        ; preds = %if.end652, %cond.end635, %if.end624
  br label %if.end654, !dbg !10530

if.end654:                                        ; preds = %if.end653, %lor.lhs.false583
  %353 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10531
  %tobool655 = icmp ne %struct.rtx_def* %353, null, !dbg !10531
  br i1 %tobool655, label %land.lhs.true656, label %if.end672, !dbg !10533

land.lhs.true656:                                 ; preds = %if.end654
  %354 = load i32, i32* %normalizep.addr, align 4, !dbg !10534
  %tobool657 = icmp ne i32 %354, 0, !dbg !10534
  br i1 %tobool657, label %if.then658, label %if.end672, !dbg !10535

if.then658:                                       ; preds = %land.lhs.true656
  %355 = load i32, i32* %mode.addr, align 4, !dbg !10536
  %356 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10537
  %357 = load i32, i32* %mode.addr, align 4, !dbg !10538
  %idxprom659 = zext i32 %357 to i64, !dbg !10538
  %arrayidx660 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom659, !dbg !10538
  %358 = load i8, i8* %arrayidx660, align 1, !dbg !10538
  %conv661 = zext i8 %358 to i16, !dbg !10538
  %conv662 = zext i16 %conv661 to i32, !dbg !10538
  %mul663 = mul nsw i32 %conv662, 8, !dbg !10538
  %conv664 = trunc i32 %mul663 to i16, !dbg !10538
  %conv665 = zext i16 %conv664 to i32, !dbg !10538
  %sub666 = sub nsw i32 %conv665, 1, !dbg !10538
  %conv667 = sext i32 %sub666 to i64, !dbg !10538
  %call668 = call %union.tree_node* @size_int_kind(i64 %conv667, i32 0), !dbg !10538
  %359 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10539
  %360 = load i32, i32* %normalizep.addr, align 4, !dbg !10540
  %cmp669 = icmp eq i32 %360, 1, !dbg !10541
  %conv670 = zext i1 %cmp669 to i32, !dbg !10541
  %call671 = call %struct.rtx_def* @expand_shift(i32 84, i32 %355, %struct.rtx_def* %356, %union.tree_node* %call668, %struct.rtx_def* %359, i32 %conv670), !dbg !10542
  store %struct.rtx_def* %call671, %struct.rtx_def** %tem, align 8, !dbg !10543
  br label %if.end672, !dbg !10544

if.end672:                                        ; preds = %if.then658, %land.lhs.true656, %if.end654
  %361 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10545
  %tobool673 = icmp ne %struct.rtx_def* %361, null, !dbg !10545
  br i1 %tobool673, label %if.then674, label %if.else691, !dbg !10547

if.then674:                                       ; preds = %if.end672
  %362 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10548
  %tobool675 = icmp ne %struct.rtx_def* %362, null, !dbg !10548
  br i1 %tobool675, label %if.else677, label %if.then676, !dbg !10551

if.then676:                                       ; preds = %if.then674
  br label %if.end690, !dbg !10551

if.else677:                                       ; preds = %if.then674
  %363 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10552
  %364 = bitcast %struct.rtx_def* %363 to i32*, !dbg !10552
  %bf.load678 = load i32, i32* %364, align 8, !dbg !10552
  %bf.lshr679 = lshr i32 %bf.load678, 16, !dbg !10552
  %bf.clear680 = and i32 %bf.lshr679, 255, !dbg !10552
  %365 = load i32, i32* %target_mode, align 4, !dbg !10554
  %cmp681 = icmp ne i32 %bf.clear680, %365, !dbg !10555
  br i1 %cmp681, label %if.then683, label %if.else684, !dbg !10556

if.then683:                                       ; preds = %if.else677
  %366 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10557
  %367 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10559
  call void @convert_move(%struct.rtx_def* %366, %struct.rtx_def* %367, i32 0), !dbg !10560
  %368 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10561
  store %struct.rtx_def* %368, %struct.rtx_def** %tem, align 8, !dbg !10562
  br label %if.end689, !dbg !10563

if.else684:                                       ; preds = %if.else677
  %369 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !10564
  %tobool685 = icmp ne %struct.rtx_def* %369, null, !dbg !10564
  br i1 %tobool685, label %if.end688, label %if.then686, !dbg !10566

if.then686:                                       ; preds = %if.else684
  %370 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10567
  %371 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10569
  %call687 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %370, %struct.rtx_def* %371), !dbg !10570
  %372 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10571
  store %struct.rtx_def* %372, %struct.rtx_def** %tem, align 8, !dbg !10572
  br label %if.end688, !dbg !10573

if.end688:                                        ; preds = %if.then686, %if.else684
  br label %if.end689

if.end689:                                        ; preds = %if.end688, %if.then683
  br label %if.end690

if.end690:                                        ; preds = %if.end689, %if.then676
  br label %if.end692, !dbg !10574

if.else691:                                       ; preds = %if.end672
  %373 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10575
  call void @delete_insns_since(%struct.rtx_def* %373), !dbg !10576
  br label %if.end692

if.end692:                                        ; preds = %if.else691, %if.end690
  %374 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !10577
  store %struct.rtx_def* %374, %struct.rtx_def** %retval, align 8, !dbg !10578
  br label %return, !dbg !10578

return:                                           ; preds = %if.end692, %if.then547, %if.then521, %if.then450, %if.then426, %if.end419, %if.then402, %cond.end395, %if.then287, %if.then273, %if.then259, %if.then8, %if.then
  %375 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !10579
  ret %struct.rtx_def* %375, !dbg !10579
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_smod_pow2(i32 %mode, %struct.rtx_def* %op0, i64 %d) #0 !dbg !10580 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %d.addr = alloca i64, align 8
  %masklow = alloca i64, align 8
  %maskhigh = alloca i64, align 8
  %result = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %shift = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %logd = alloca i32, align 4
  %signmask = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !10583, metadata !DIExpression()), !dbg !10584
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !10585, metadata !DIExpression()), !dbg !10586
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !10587, metadata !DIExpression()), !dbg !10588
  call void @llvm.dbg.declare(metadata i64* %masklow, metadata !10589, metadata !DIExpression()), !dbg !10590
  call void @llvm.dbg.declare(metadata i64* %maskhigh, metadata !10591, metadata !DIExpression()), !dbg !10592
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !10593, metadata !DIExpression()), !dbg !10594
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !10595, metadata !DIExpression()), !dbg !10596
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %shift, metadata !10597, metadata !DIExpression()), !dbg !10598
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !10599, metadata !DIExpression()), !dbg !10600
  call void @llvm.dbg.declare(metadata i32* %logd, metadata !10601, metadata !DIExpression()), !dbg !10602
  %0 = load i64, i64* %d.addr, align 8, !dbg !10603
  %call = call i32 @floor_log2(i64 %0), !dbg !10604
  store i32 %call, i32* %logd, align 4, !dbg !10605
  %1 = load i32, i32* %mode.addr, align 4, !dbg !10606
  %call1 = call %struct.rtx_def* @gen_reg_rtx(i32 %1), !dbg !10607
  store %struct.rtx_def* %call1, %struct.rtx_def** %result, align 8, !dbg !10608
  %call2 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10609
  %tobool = icmp ne i8 %call2, 0, !dbg !10609
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10609

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !10609

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* @ix86_branch_cost, align 4, !dbg !10609
  br label %cond.end, !dbg !10609

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 2, %cond.true ], [ %2, %cond.false ], !dbg !10609
  %cmp = icmp sge i32 %cond, 2, !dbg !10611
  br i1 %cmp, label %land.lhs.true, label %if.end39, !dbg !10612

land.lhs.true:                                    ; preds = %cond.end
  %call3 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10613
  %conv = zext i8 %call3 to i32, !dbg !10613
  %tobool4 = icmp ne i32 %conv, 0, !dbg !10613
  br i1 %tobool4, label %if.then, label %if.end39, !dbg !10614

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %signmask, metadata !10615, metadata !DIExpression()), !dbg !10617
  %3 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10618
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10619
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10620
  %6 = load i32, i32* %mode.addr, align 4, !dbg !10621
  %call5 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %3, i32 85, %struct.rtx_def* %4, %struct.rtx_def* %5, i32 %6, i32 0, i32 -1), !dbg !10622
  store %struct.rtx_def* %call5, %struct.rtx_def** %signmask, align 8, !dbg !10617
  %7 = load %struct.rtx_def*, %struct.rtx_def** %signmask, align 8, !dbg !10623
  %tobool6 = icmp ne %struct.rtx_def* %7, null, !dbg !10623
  br i1 %tobool6, label %if.then7, label %if.end38, !dbg !10625

if.then7:                                         ; preds = %if.then
  %8 = load i32, i32* %mode.addr, align 4, !dbg !10626
  %9 = load %struct.rtx_def*, %struct.rtx_def** %signmask, align 8, !dbg !10628
  %call8 = call %struct.rtx_def* @force_reg(i32 %8, %struct.rtx_def* %9), !dbg !10629
  store %struct.rtx_def* %call8, %struct.rtx_def** %signmask, align 8, !dbg !10630
  %10 = load i32, i32* %logd, align 4, !dbg !10631
  %sh_prom = zext i32 %10 to i64, !dbg !10632
  %shl = shl i64 1, %sh_prom, !dbg !10632
  %sub = sub nsw i64 %shl, 1, !dbg !10633
  store i64 %sub, i64* %masklow, align 8, !dbg !10634
  %11 = load i32, i32* %mode.addr, align 4, !dbg !10635
  %idxprom = zext i32 %11 to i64, !dbg !10635
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !10635
  %12 = load i8, i8* %arrayidx, align 1, !dbg !10635
  %conv9 = zext i8 %12 to i16, !dbg !10635
  %conv10 = zext i16 %conv9 to i32, !dbg !10635
  %mul = mul nsw i32 %conv10, 8, !dbg !10635
  %conv11 = trunc i32 %mul to i16, !dbg !10635
  %conv12 = zext i16 %conv11 to i32, !dbg !10635
  %13 = load i32, i32* %logd, align 4, !dbg !10635
  %sub13 = sub nsw i32 %conv12, %13, !dbg !10635
  %conv14 = sext i32 %sub13 to i64, !dbg !10635
  %call15 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv14), !dbg !10635
  store %struct.rtx_def* %call15, %struct.rtx_def** %shift, align 8, !dbg !10636
  %14 = load i32, i32* %mode.addr, align 4, !dbg !10637
  %15 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10637
  %16 = load %struct.rtx_def*, %struct.rtx_def** %shift, align 8, !dbg !10637
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 68, i32 %14, %struct.rtx_def* %15, %struct.rtx_def* %16), !dbg !10637
  store %struct.rtx_def* %call16, %struct.rtx_def** %temp, align 8, !dbg !10638
  %17 = load i32, i32* %mode.addr, align 4, !dbg !10639
  %idxprom17 = sext i32 %17 to i64, !dbg !10639
  %arrayidx18 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45, i32 4), i64 0, i64 %idxprom17, !dbg !10639
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx18, i32 0, i32 0, !dbg !10641
  %18 = load i32, i32* %insn_code, align 4, !dbg !10641
  %cmp19 = icmp eq i32 %18, 2956, !dbg !10642
  br i1 %cmp19, label %if.then25, label %lor.lhs.false, !dbg !10643

lor.lhs.false:                                    ; preds = %if.then7
  %19 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10644
  %call21 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10645
  %call22 = call i32 @rtx_cost(%struct.rtx_def* %19, i32 23, i8 zeroext %call21), !dbg !10646
  %cmp23 = icmp sgt i32 %call22, 8, !dbg !10647
  br i1 %cmp23, label %if.then25, label %if.else, !dbg !10648

if.then25:                                        ; preds = %lor.lhs.false, %if.then7
  %20 = load i32, i32* %mode.addr, align 4, !dbg !10649
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10651
  %22 = load %struct.rtx_def*, %struct.rtx_def** %signmask, align 8, !dbg !10652
  %call26 = call %struct.rtx_def* @expand_binop(i32 %20, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %21, %struct.rtx_def* %22, %struct.rtx_def* null, i32 1, i32 3), !dbg !10653
  store %struct.rtx_def* %call26, %struct.rtx_def** %temp, align 8, !dbg !10654
  %23 = load i32, i32* %mode.addr, align 4, !dbg !10655
  %24 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10656
  %25 = load %struct.rtx_def*, %struct.rtx_def** %signmask, align 8, !dbg !10657
  %call27 = call %struct.rtx_def* @expand_binop(i32 %23, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %24, %struct.rtx_def* %25, %struct.rtx_def* null, i32 1, i32 3), !dbg !10658
  store %struct.rtx_def* %call27, %struct.rtx_def** %temp, align 8, !dbg !10659
  %26 = load i32, i32* %mode.addr, align 4, !dbg !10660
  %27 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10661
  %28 = load i64, i64* %masklow, align 8, !dbg !10662
  %call28 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %28), !dbg !10662
  %call29 = call %struct.rtx_def* @expand_binop(i32 %26, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %27, %struct.rtx_def* %call28, %struct.rtx_def* null, i32 1, i32 3), !dbg !10663
  store %struct.rtx_def* %call29, %struct.rtx_def** %temp, align 8, !dbg !10664
  %29 = load i32, i32* %mode.addr, align 4, !dbg !10665
  %30 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10666
  %31 = load %struct.rtx_def*, %struct.rtx_def** %signmask, align 8, !dbg !10667
  %call30 = call %struct.rtx_def* @expand_binop(i32 %29, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %30, %struct.rtx_def* %31, %struct.rtx_def* null, i32 1, i32 3), !dbg !10668
  store %struct.rtx_def* %call30, %struct.rtx_def** %temp, align 8, !dbg !10669
  %32 = load i32, i32* %mode.addr, align 4, !dbg !10670
  %33 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10671
  %34 = load %struct.rtx_def*, %struct.rtx_def** %signmask, align 8, !dbg !10672
  %call31 = call %struct.rtx_def* @expand_binop(i32 %32, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %33, %struct.rtx_def* %34, %struct.rtx_def* null, i32 1, i32 3), !dbg !10673
  store %struct.rtx_def* %call31, %struct.rtx_def** %temp, align 8, !dbg !10674
  br label %if.end, !dbg !10675

if.else:                                          ; preds = %lor.lhs.false
  %35 = load i32, i32* %mode.addr, align 4, !dbg !10676
  %36 = load %struct.rtx_def*, %struct.rtx_def** %signmask, align 8, !dbg !10678
  %37 = load %struct.rtx_def*, %struct.rtx_def** %shift, align 8, !dbg !10679
  %call32 = call %struct.rtx_def* @expand_binop(i32 %35, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), %struct.rtx_def* %36, %struct.rtx_def* %37, %struct.rtx_def* null, i32 1, i32 3), !dbg !10680
  store %struct.rtx_def* %call32, %struct.rtx_def** %signmask, align 8, !dbg !10681
  %38 = load i32, i32* %mode.addr, align 4, !dbg !10682
  %39 = load %struct.rtx_def*, %struct.rtx_def** %signmask, align 8, !dbg !10683
  %call33 = call %struct.rtx_def* @force_reg(i32 %38, %struct.rtx_def* %39), !dbg !10684
  store %struct.rtx_def* %call33, %struct.rtx_def** %signmask, align 8, !dbg !10685
  %40 = load i32, i32* %mode.addr, align 4, !dbg !10686
  %41 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10687
  %42 = load %struct.rtx_def*, %struct.rtx_def** %signmask, align 8, !dbg !10688
  %call34 = call %struct.rtx_def* @expand_binop(i32 %40, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %41, %struct.rtx_def* %42, %struct.rtx_def* null, i32 1, i32 3), !dbg !10689
  store %struct.rtx_def* %call34, %struct.rtx_def** %temp, align 8, !dbg !10690
  %43 = load i32, i32* %mode.addr, align 4, !dbg !10691
  %44 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10692
  %45 = load i64, i64* %masklow, align 8, !dbg !10693
  %call35 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %45), !dbg !10693
  %call36 = call %struct.rtx_def* @expand_binop(i32 %43, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %44, %struct.rtx_def* %call35, %struct.rtx_def* null, i32 1, i32 3), !dbg !10694
  store %struct.rtx_def* %call36, %struct.rtx_def** %temp, align 8, !dbg !10695
  %46 = load i32, i32* %mode.addr, align 4, !dbg !10696
  %47 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10697
  %48 = load %struct.rtx_def*, %struct.rtx_def** %signmask, align 8, !dbg !10698
  %call37 = call %struct.rtx_def* @expand_binop(i32 %46, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %47, %struct.rtx_def* %48, %struct.rtx_def* null, i32 1, i32 3), !dbg !10699
  store %struct.rtx_def* %call37, %struct.rtx_def** %temp, align 8, !dbg !10700
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then25
  %49 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10701
  store %struct.rtx_def* %49, %struct.rtx_def** %retval, align 8, !dbg !10702
  br label %return, !dbg !10702

if.end38:                                         ; preds = %if.then
  br label %if.end39, !dbg !10703

if.end39:                                         ; preds = %if.end38, %land.lhs.true, %cond.end
  %50 = load i32, i32* %logd, align 4, !dbg !10704
  %sh_prom40 = zext i32 %50 to i64, !dbg !10705
  %shl41 = shl i64 1, %sh_prom40, !dbg !10705
  %sub42 = sub nsw i64 %shl41, 1, !dbg !10706
  store i64 %sub42, i64* %masklow, align 8, !dbg !10707
  %51 = load i32, i32* %mode.addr, align 4, !dbg !10708
  %idxprom43 = zext i32 %51 to i64, !dbg !10708
  %arrayidx44 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom43, !dbg !10708
  %52 = load i8, i8* %arrayidx44, align 1, !dbg !10708
  %conv45 = zext i8 %52 to i16, !dbg !10708
  %conv46 = zext i16 %conv45 to i32, !dbg !10708
  %mul47 = mul nsw i32 %conv46, 8, !dbg !10708
  %conv48 = trunc i32 %mul47 to i16, !dbg !10708
  %conv49 = zext i16 %conv48 to i32, !dbg !10708
  %cmp50 = icmp sle i32 %conv49, 64, !dbg !10710
  br i1 %cmp50, label %if.then52, label %if.else63, !dbg !10711

if.then52:                                        ; preds = %if.end39
  %53 = load i32, i32* %mode.addr, align 4, !dbg !10712
  %idxprom53 = zext i32 %53 to i64, !dbg !10712
  %arrayidx54 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom53, !dbg !10712
  %54 = load i8, i8* %arrayidx54, align 1, !dbg !10712
  %conv55 = zext i8 %54 to i16, !dbg !10712
  %conv56 = zext i16 %conv55 to i32, !dbg !10712
  %mul57 = mul nsw i32 %conv56, 8, !dbg !10712
  %conv58 = trunc i32 %mul57 to i16, !dbg !10712
  %conv59 = zext i16 %conv58 to i32, !dbg !10712
  %sub60 = sub nsw i32 %conv59, 1, !dbg !10714
  %sh_prom61 = zext i32 %sub60 to i64, !dbg !10715
  %shl62 = shl i64 -1, %sh_prom61, !dbg !10715
  %55 = load i64, i64* %masklow, align 8, !dbg !10716
  %or = or i64 %55, %shl62, !dbg !10716
  store i64 %or, i64* %masklow, align 8, !dbg !10716
  store i64 -1, i64* %maskhigh, align 8, !dbg !10717
  br label %if.end75, !dbg !10718

if.else63:                                        ; preds = %if.end39
  %56 = load i32, i32* %mode.addr, align 4, !dbg !10719
  %idxprom64 = zext i32 %56 to i64, !dbg !10719
  %arrayidx65 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom64, !dbg !10719
  %57 = load i8, i8* %arrayidx65, align 1, !dbg !10719
  %conv66 = zext i8 %57 to i16, !dbg !10719
  %conv67 = zext i16 %conv66 to i32, !dbg !10719
  %mul68 = mul nsw i32 %conv67, 8, !dbg !10719
  %conv69 = trunc i32 %mul68 to i16, !dbg !10719
  %conv70 = zext i16 %conv69 to i32, !dbg !10719
  %sub71 = sub nsw i32 %conv70, 64, !dbg !10720
  %sub72 = sub nsw i32 %sub71, 1, !dbg !10721
  %sh_prom73 = zext i32 %sub72 to i64, !dbg !10722
  %shl74 = shl i64 -1, %sh_prom73, !dbg !10722
  store i64 %shl74, i64* %maskhigh, align 8, !dbg !10723
  br label %if.end75

if.end75:                                         ; preds = %if.else63, %if.then52
  %58 = load i32, i32* %mode.addr, align 4, !dbg !10724
  %59 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10725
  %60 = load i64, i64* %masklow, align 8, !dbg !10726
  %61 = load i64, i64* %maskhigh, align 8, !dbg !10727
  %62 = load i32, i32* %mode.addr, align 4, !dbg !10728
  %call76 = call %struct.rtx_def* @immed_double_const(i64 %60, i64 %61, i32 %62), !dbg !10729
  %63 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10730
  %call77 = call %struct.rtx_def* @expand_binop(i32 %58, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %59, %struct.rtx_def* %call76, %struct.rtx_def* %63, i32 1, i32 3), !dbg !10731
  store %struct.rtx_def* %call77, %struct.rtx_def** %temp, align 8, !dbg !10732
  %64 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10733
  %65 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10735
  %cmp78 = icmp ne %struct.rtx_def* %64, %65, !dbg !10736
  br i1 %cmp78, label %if.then80, label %if.end82, !dbg !10737

if.then80:                                        ; preds = %if.end75
  %66 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10738
  %67 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10739
  %call81 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %66, %struct.rtx_def* %67), !dbg !10740
  br label %if.end82, !dbg !10740

if.end82:                                         ; preds = %if.then80, %if.end75
  %call83 = call %struct.rtx_def* @gen_label_rtx(), !dbg !10741
  store %struct.rtx_def* %call83, %struct.rtx_def** %label, align 8, !dbg !10742
  %68 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10743
  %69 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10744
  %70 = load i32, i32* %mode.addr, align 4, !dbg !10745
  %71 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !10746
  call void @do_cmp_and_jump(%struct.rtx_def* %68, %struct.rtx_def* %69, i32 82, i32 %70, %struct.rtx_def* %71), !dbg !10747
  %72 = load i32, i32* %mode.addr, align 4, !dbg !10748
  %73 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10749
  %74 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !10750
  %75 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10751
  %call84 = call %struct.rtx_def* @expand_binop(i32 %72, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %73, %struct.rtx_def* %74, %struct.rtx_def* %75, i32 0, i32 3), !dbg !10752
  store %struct.rtx_def* %call84, %struct.rtx_def** %temp, align 8, !dbg !10753
  %76 = load i32, i32* %logd, align 4, !dbg !10754
  %sh_prom85 = zext i32 %76 to i64, !dbg !10755
  %shl86 = shl i64 -1, %sh_prom85, !dbg !10755
  store i64 %shl86, i64* %masklow, align 8, !dbg !10756
  store i64 -1, i64* %maskhigh, align 8, !dbg !10757
  %77 = load i32, i32* %mode.addr, align 4, !dbg !10758
  %78 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10759
  %79 = load i64, i64* %masklow, align 8, !dbg !10760
  %80 = load i64, i64* %maskhigh, align 8, !dbg !10761
  %81 = load i32, i32* %mode.addr, align 4, !dbg !10762
  %call87 = call %struct.rtx_def* @immed_double_const(i64 %79, i64 %80, i32 %81), !dbg !10763
  %82 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10764
  %call88 = call %struct.rtx_def* @expand_binop(i32 %77, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %78, %struct.rtx_def* %call87, %struct.rtx_def* %82, i32 1, i32 3), !dbg !10765
  store %struct.rtx_def* %call88, %struct.rtx_def** %temp, align 8, !dbg !10766
  %83 = load i32, i32* %mode.addr, align 4, !dbg !10767
  %84 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10768
  %85 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !10769
  %86 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10770
  %call89 = call %struct.rtx_def* @expand_binop(i32 %83, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %84, %struct.rtx_def* %85, %struct.rtx_def* %86, i32 0, i32 3), !dbg !10771
  store %struct.rtx_def* %call89, %struct.rtx_def** %temp, align 8, !dbg !10772
  %87 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10773
  %88 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10775
  %cmp90 = icmp ne %struct.rtx_def* %87, %88, !dbg !10776
  br i1 %cmp90, label %if.then92, label %if.end94, !dbg !10777

if.then92:                                        ; preds = %if.end82
  %89 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10778
  %90 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10779
  %call93 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %89, %struct.rtx_def* %90), !dbg !10780
  br label %if.end94, !dbg !10780

if.end94:                                         ; preds = %if.then92, %if.end82
  %91 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !10781
  %call95 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %91), !dbg !10782
  %92 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !10783
  store %struct.rtx_def* %92, %struct.rtx_def** %retval, align 8, !dbg !10784
  br label %return, !dbg !10784

return:                                           ; preds = %if.end94, %if.end
  %93 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !10785
  ret %struct.rtx_def* %93, !dbg !10785
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_sdiv_pow2(i32 %mode, %struct.rtx_def* %op0, i64 %d) #0 !dbg !10786 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %d.addr = alloca i64, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %shift = alloca %union.tree_node*, align 8
  %logd = alloca i32, align 4
  %temp2 = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %ushift = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !10787, metadata !DIExpression()), !dbg !10788
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !10789, metadata !DIExpression()), !dbg !10790
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !10791, metadata !DIExpression()), !dbg !10792
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !10793, metadata !DIExpression()), !dbg !10794
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !10795, metadata !DIExpression()), !dbg !10796
  call void @llvm.dbg.declare(metadata %union.tree_node** %shift, metadata !10797, metadata !DIExpression()), !dbg !10798
  call void @llvm.dbg.declare(metadata i32* %logd, metadata !10799, metadata !DIExpression()), !dbg !10800
  %0 = load i64, i64* %d.addr, align 8, !dbg !10801
  %call = call i32 @floor_log2(i64 %0), !dbg !10802
  store i32 %call, i32* %logd, align 4, !dbg !10803
  %1 = load i32, i32* %logd, align 4, !dbg !10804
  %conv = sext i32 %1 to i64, !dbg !10804
  %call1 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !10805
  store %union.tree_node* %call1, %union.tree_node** %shift, align 8, !dbg !10806
  %2 = load i64, i64* %d.addr, align 8, !dbg !10807
  %cmp = icmp eq i64 %2, 2, !dbg !10809
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !10810

land.lhs.true:                                    ; preds = %entry
  %call3 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10811
  %tobool = icmp ne i8 %call3, 0, !dbg !10811
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10811

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end, !dbg !10811

cond.false:                                       ; preds = %land.lhs.true
  %3 = load i32, i32* @ix86_branch_cost, align 4, !dbg !10811
  br label %cond.end, !dbg !10811

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 2, %cond.true ], [ %3, %cond.false ], !dbg !10811
  %cmp4 = icmp sge i32 %cond, 1, !dbg !10812
  br i1 %cmp4, label %if.then, label %if.end, !dbg !10813

if.then:                                          ; preds = %cond.end
  %4 = load i32, i32* %mode.addr, align 4, !dbg !10814
  %call6 = call %struct.rtx_def* @gen_reg_rtx(i32 %4), !dbg !10816
  store %struct.rtx_def* %call6, %struct.rtx_def** %temp, align 8, !dbg !10817
  %5 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10818
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10819
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10820
  %8 = load i32, i32* %mode.addr, align 4, !dbg !10821
  %call7 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %5, i32 85, %struct.rtx_def* %6, %struct.rtx_def* %7, i32 %8, i32 0, i32 1), !dbg !10822
  store %struct.rtx_def* %call7, %struct.rtx_def** %temp, align 8, !dbg !10823
  %9 = load i32, i32* %mode.addr, align 4, !dbg !10824
  %10 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10825
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10826
  %call8 = call %struct.rtx_def* @expand_binop(i32 %9, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %10, %struct.rtx_def* %11, %struct.rtx_def* null, i32 0, i32 3), !dbg !10827
  store %struct.rtx_def* %call8, %struct.rtx_def** %temp, align 8, !dbg !10828
  %12 = load i32, i32* %mode.addr, align 4, !dbg !10829
  %13 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10830
  %14 = load %union.tree_node*, %union.tree_node** %shift, align 8, !dbg !10831
  %call9 = call %struct.rtx_def* @expand_shift(i32 84, i32 %12, %struct.rtx_def* %13, %union.tree_node* %14, %struct.rtx_def* null, i32 0), !dbg !10832
  store %struct.rtx_def* %call9, %struct.rtx_def** %retval, align 8, !dbg !10833
  br label %return, !dbg !10833

if.end:                                           ; preds = %cond.end, %entry
  %call10 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10834
  %tobool11 = icmp ne i8 %call10, 0, !dbg !10834
  br i1 %tobool11, label %cond.false13, label %cond.true12, !dbg !10834

cond.true12:                                      ; preds = %if.end
  br label %cond.end14, !dbg !10834

cond.false13:                                     ; preds = %if.end
  %15 = load i32, i32* @ix86_branch_cost, align 4, !dbg !10834
  br label %cond.end14, !dbg !10834

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i32 [ 2, %cond.true12 ], [ %15, %cond.false13 ], !dbg !10834
  %cmp16 = icmp sge i32 %cond15, 2, !dbg !10836
  br i1 %cmp16, label %if.then18, label %if.end30, !dbg !10837

if.then18:                                        ; preds = %cond.end14
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp2, metadata !10838, metadata !DIExpression()), !dbg !10840
  call void @do_pending_stack_adjust(), !dbg !10841
  call void @start_sequence(), !dbg !10842
  %16 = load i32, i32* %mode.addr, align 4, !dbg !10843
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10844
  %call19 = call %struct.rtx_def* @copy_to_mode_reg(i32 %16, %struct.rtx_def* %17), !dbg !10845
  store %struct.rtx_def* %call19, %struct.rtx_def** %temp2, align 8, !dbg !10846
  %18 = load i32, i32* %mode.addr, align 4, !dbg !10847
  %19 = load %struct.rtx_def*, %struct.rtx_def** %temp2, align 8, !dbg !10848
  %20 = load i64, i64* %d.addr, align 8, !dbg !10849
  %sub = sub nsw i64 %20, 1, !dbg !10849
  %call20 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub), !dbg !10849
  %call21 = call %struct.rtx_def* @expand_binop(i32 %18, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %19, %struct.rtx_def* %call20, %struct.rtx_def* null, i32 0, i32 3), !dbg !10850
  store %struct.rtx_def* %call21, %struct.rtx_def** %temp, align 8, !dbg !10851
  %21 = load i32, i32* %mode.addr, align 4, !dbg !10852
  %22 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10853
  %call22 = call %struct.rtx_def* @force_reg(i32 %21, %struct.rtx_def* %22), !dbg !10854
  store %struct.rtx_def* %call22, %struct.rtx_def** %temp, align 8, !dbg !10855
  %23 = load %struct.rtx_def*, %struct.rtx_def** %temp2, align 8, !dbg !10856
  %24 = load %struct.rtx_def*, %struct.rtx_def** %temp2, align 8, !dbg !10857
  %25 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10858
  %26 = load i32, i32* %mode.addr, align 4, !dbg !10859
  %27 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10860
  %28 = load %struct.rtx_def*, %struct.rtx_def** %temp2, align 8, !dbg !10861
  %29 = load i32, i32* %mode.addr, align 4, !dbg !10862
  %call23 = call %struct.rtx_def* @emit_conditional_move(%struct.rtx_def* %23, i32 85, %struct.rtx_def* %24, %struct.rtx_def* %25, i32 %26, %struct.rtx_def* %27, %struct.rtx_def* %28, i32 %29, i32 0), !dbg !10863
  store %struct.rtx_def* %call23, %struct.rtx_def** %temp2, align 8, !dbg !10864
  %30 = load %struct.rtx_def*, %struct.rtx_def** %temp2, align 8, !dbg !10865
  %tobool24 = icmp ne %struct.rtx_def* %30, null, !dbg !10865
  br i1 %tobool24, label %if.then25, label %if.end29, !dbg !10867

if.then25:                                        ; preds = %if.then18
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !10868, metadata !DIExpression()), !dbg !10870
  %call26 = call %struct.rtx_def* @get_insns(), !dbg !10871
  store %struct.rtx_def* %call26, %struct.rtx_def** %seq, align 8, !dbg !10870
  call void @end_sequence(), !dbg !10872
  %31 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10873
  %call27 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %31), !dbg !10874
  %32 = load i32, i32* %mode.addr, align 4, !dbg !10875
  %33 = load %struct.rtx_def*, %struct.rtx_def** %temp2, align 8, !dbg !10876
  %34 = load %union.tree_node*, %union.tree_node** %shift, align 8, !dbg !10877
  %call28 = call %struct.rtx_def* @expand_shift(i32 84, i32 %32, %struct.rtx_def* %33, %union.tree_node* %34, %struct.rtx_def* null, i32 0), !dbg !10878
  store %struct.rtx_def* %call28, %struct.rtx_def** %retval, align 8, !dbg !10879
  br label %return, !dbg !10879

if.end29:                                         ; preds = %if.then18
  call void @end_sequence(), !dbg !10880
  br label %if.end30, !dbg !10881

if.end30:                                         ; preds = %if.end29, %cond.end14
  %call31 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10882
  %tobool32 = icmp ne i8 %call31, 0, !dbg !10882
  br i1 %tobool32, label %cond.false34, label %cond.true33, !dbg !10882

cond.true33:                                      ; preds = %if.end30
  br label %cond.end35, !dbg !10882

cond.false34:                                     ; preds = %if.end30
  %35 = load i32, i32* @ix86_branch_cost, align 4, !dbg !10882
  br label %cond.end35, !dbg !10882

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi i32 [ 2, %cond.true33 ], [ %35, %cond.false34 ], !dbg !10882
  %cmp37 = icmp sge i32 %cond36, 2, !dbg !10884
  br i1 %cmp37, label %if.then39, label %if.end66, !dbg !10885

if.then39:                                        ; preds = %cond.end35
  call void @llvm.dbg.declare(metadata i32* %ushift, metadata !10886, metadata !DIExpression()), !dbg !10888
  %36 = load i32, i32* %mode.addr, align 4, !dbg !10889
  %idxprom = zext i32 %36 to i64, !dbg !10889
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !10889
  %37 = load i8, i8* %arrayidx, align 1, !dbg !10889
  %conv40 = zext i8 %37 to i16, !dbg !10889
  %conv41 = zext i16 %conv40 to i32, !dbg !10889
  %mul = mul nsw i32 %conv41, 8, !dbg !10889
  %conv42 = trunc i32 %mul to i16, !dbg !10889
  %conv43 = zext i16 %conv42 to i32, !dbg !10889
  %38 = load i32, i32* %logd, align 4, !dbg !10890
  %sub44 = sub nsw i32 %conv43, %38, !dbg !10891
  store i32 %sub44, i32* %ushift, align 4, !dbg !10888
  %39 = load i32, i32* %mode.addr, align 4, !dbg !10892
  %call45 = call %struct.rtx_def* @gen_reg_rtx(i32 %39), !dbg !10893
  store %struct.rtx_def* %call45, %struct.rtx_def** %temp, align 8, !dbg !10894
  %40 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10895
  %41 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10896
  %42 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10897
  %43 = load i32, i32* %mode.addr, align 4, !dbg !10898
  %call46 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %40, i32 85, %struct.rtx_def* %41, %struct.rtx_def* %42, i32 %43, i32 0, i32 -1), !dbg !10899
  store %struct.rtx_def* %call46, %struct.rtx_def** %temp, align 8, !dbg !10900
  %call47 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !10901
  %idxprom48 = zext i8 %call47 to i64, !dbg !10903
  %arrayidx49 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom48, !dbg !10903
  %44 = load i32, i32* %mode.addr, align 4, !dbg !10904
  %idxprom50 = zext i32 %44 to i64, !dbg !10903
  %arrayidx51 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx49, i64 0, i64 %idxprom50, !dbg !10903
  %45 = load i32, i32* %ushift, align 4, !dbg !10905
  %idxprom52 = sext i32 %45 to i64, !dbg !10903
  %arrayidx53 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx51, i64 0, i64 %idxprom52, !dbg !10903
  %46 = load i32, i32* %arrayidx53, align 4, !dbg !10903
  %cmp54 = icmp sgt i32 %46, 4, !dbg !10906
  br i1 %cmp54, label %if.then56, label %if.else, !dbg !10907

if.then56:                                        ; preds = %if.then39
  %47 = load i32, i32* %mode.addr, align 4, !dbg !10908
  %48 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10909
  %49 = load i64, i64* %d.addr, align 8, !dbg !10910
  %sub57 = sub nsw i64 %49, 1, !dbg !10910
  %call58 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub57), !dbg !10910
  %call59 = call %struct.rtx_def* @expand_binop(i32 %47, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %48, %struct.rtx_def* %call58, %struct.rtx_def* null, i32 0, i32 3), !dbg !10911
  store %struct.rtx_def* %call59, %struct.rtx_def** %temp, align 8, !dbg !10912
  br label %if.end63, !dbg !10913

if.else:                                          ; preds = %if.then39
  %50 = load i32, i32* %mode.addr, align 4, !dbg !10914
  %51 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10915
  %52 = load i32, i32* %ushift, align 4, !dbg !10916
  %conv60 = sext i32 %52 to i64, !dbg !10916
  %call61 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv60), !dbg !10917
  %call62 = call %struct.rtx_def* @expand_shift(i32 84, i32 %50, %struct.rtx_def* %51, %union.tree_node* %call61, %struct.rtx_def* null, i32 1), !dbg !10918
  store %struct.rtx_def* %call62, %struct.rtx_def** %temp, align 8, !dbg !10919
  br label %if.end63

if.end63:                                         ; preds = %if.else, %if.then56
  %53 = load i32, i32* %mode.addr, align 4, !dbg !10920
  %54 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10921
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10922
  %call64 = call %struct.rtx_def* @expand_binop(i32 %53, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %54, %struct.rtx_def* %55, %struct.rtx_def* null, i32 0, i32 3), !dbg !10923
  store %struct.rtx_def* %call64, %struct.rtx_def** %temp, align 8, !dbg !10924
  %56 = load i32, i32* %mode.addr, align 4, !dbg !10925
  %57 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10926
  %58 = load %union.tree_node*, %union.tree_node** %shift, align 8, !dbg !10927
  %call65 = call %struct.rtx_def* @expand_shift(i32 84, i32 %56, %struct.rtx_def* %57, %union.tree_node* %58, %struct.rtx_def* null, i32 0), !dbg !10928
  store %struct.rtx_def* %call65, %struct.rtx_def** %retval, align 8, !dbg !10929
  br label %return, !dbg !10929

if.end66:                                         ; preds = %cond.end35
  %call67 = call %struct.rtx_def* @gen_label_rtx(), !dbg !10930
  store %struct.rtx_def* %call67, %struct.rtx_def** %label, align 8, !dbg !10931
  %59 = load i32, i32* %mode.addr, align 4, !dbg !10932
  %60 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10933
  %call68 = call %struct.rtx_def* @copy_to_mode_reg(i32 %59, %struct.rtx_def* %60), !dbg !10934
  store %struct.rtx_def* %call68, %struct.rtx_def** %temp, align 8, !dbg !10935
  %61 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10936
  %62 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10937
  %63 = load i32, i32* %mode.addr, align 4, !dbg !10938
  %64 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !10939
  call void @do_cmp_and_jump(%struct.rtx_def* %61, %struct.rtx_def* %62, i32 82, i32 %63, %struct.rtx_def* %64), !dbg !10940
  %65 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10941
  %66 = load i64, i64* %d.addr, align 8, !dbg !10942
  %sub69 = sub nsw i64 %66, 1, !dbg !10942
  %call70 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub69), !dbg !10942
  call void @expand_inc(%struct.rtx_def* %65, %struct.rtx_def* %call70), !dbg !10943
  %67 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !10944
  %call71 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %67), !dbg !10945
  %68 = load i32, i32* %mode.addr, align 4, !dbg !10946
  %69 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10947
  %70 = load %union.tree_node*, %union.tree_node** %shift, align 8, !dbg !10948
  %call72 = call %struct.rtx_def* @expand_shift(i32 84, i32 %68, %struct.rtx_def* %69, %union.tree_node* %70, %struct.rtx_def* null, i32 0), !dbg !10949
  store %struct.rtx_def* %call72, %struct.rtx_def** %retval, align 8, !dbg !10950
  br label %return, !dbg !10950

return:                                           ; preds = %if.end66, %if.end63, %if.then25, %if.then
  %71 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !10951
  ret %struct.rtx_def* %71, !dbg !10951
}

declare dso_local i64 @trunc_int_for_mode(i64, i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @delete_insns_since(%struct.rtx_def*) #2

declare dso_local i32 @expand_twoval_binop(%struct.optab_d*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @gen_label_rtx() #2

; Function Attrs: noinline nounwind uwtable
define internal void @do_cmp_and_jump(%struct.rtx_def* %arg1, %struct.rtx_def* %arg2, i32 %op, i32 %mode, %struct.rtx_def* %label) #0 !dbg !10952 {
entry:
  %arg1.addr = alloca %struct.rtx_def*, align 8
  %arg2.addr = alloca %struct.rtx_def*, align 8
  %op.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %label.addr = alloca %struct.rtx_def*, align 8
  %unsignedp = alloca i32, align 4
  store %struct.rtx_def* %arg1, %struct.rtx_def** %arg1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %arg1.addr, metadata !10955, metadata !DIExpression()), !dbg !10956
  store %struct.rtx_def* %arg2, %struct.rtx_def** %arg2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %arg2.addr, metadata !10957, metadata !DIExpression()), !dbg !10958
  store i32 %op, i32* %op.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op.addr, metadata !10959, metadata !DIExpression()), !dbg !10960
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !10961, metadata !DIExpression()), !dbg !10962
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label.addr, metadata !10963, metadata !DIExpression()), !dbg !10964
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !10965, metadata !DIExpression()), !dbg !10966
  %0 = load i32, i32* %op.addr, align 4, !dbg !10967
  %cmp = icmp eq i32 %0, 89, !dbg !10968
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !10969

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %op.addr, align 4, !dbg !10970
  %cmp1 = icmp eq i32 %1, 88, !dbg !10971
  br i1 %cmp1, label %lor.end, label %lor.lhs.false2, !dbg !10972

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %op.addr, align 4, !dbg !10973
  %cmp3 = icmp eq i32 %2, 87, !dbg !10974
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !10975

lor.rhs:                                          ; preds = %lor.lhs.false2
  %3 = load i32, i32* %op.addr, align 4, !dbg !10976
  %cmp4 = icmp eq i32 %3, 86, !dbg !10977
  br label %lor.end, !dbg !10975

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false2, %lor.lhs.false, %entry
  %4 = phi i1 [ true, %lor.lhs.false2 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp4, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !10975
  store i32 %lor.ext, i32* %unsignedp, align 4, !dbg !10966
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arg1.addr, align 8, !dbg !10978
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arg2.addr, align 8, !dbg !10979
  %7 = load i32, i32* %op.addr, align 4, !dbg !10980
  %8 = load i32, i32* %unsignedp, align 4, !dbg !10981
  %9 = load i32, i32* %mode.addr, align 4, !dbg !10982
  %10 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !10983
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %5, %struct.rtx_def* %6, i32 %7, i32 %8, i32 %9, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* %10, i32 -1), !dbg !10984
  ret void, !dbg !10985
}

declare dso_local %struct.rtx_def* @emit_label(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @copy_to_mode_reg(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_jump_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_jump(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_barrier() #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @invert_mod2n(i64 %x, i32 %n) #0 !dbg !10986 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  %mask = alloca i64, align 8
  %y = alloca i64, align 8
  %nbit = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !10989, metadata !DIExpression()), !dbg !10990
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !10991, metadata !DIExpression()), !dbg !10992
  call void @llvm.dbg.declare(metadata i64* %mask, metadata !10993, metadata !DIExpression()), !dbg !10994
  call void @llvm.dbg.declare(metadata i64* %y, metadata !10995, metadata !DIExpression()), !dbg !10996
  %0 = load i64, i64* %x.addr, align 8, !dbg !10997
  store i64 %0, i64* %y, align 8, !dbg !10996
  call void @llvm.dbg.declare(metadata i32* %nbit, metadata !10998, metadata !DIExpression()), !dbg !10999
  store i32 3, i32* %nbit, align 4, !dbg !10999
  %1 = load i32, i32* %n.addr, align 4, !dbg !11000
  %cmp = icmp eq i32 %1, 64, !dbg !11001
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11000

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !11000

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4, !dbg !11002
  %sh_prom = zext i32 %2 to i64, !dbg !11003
  %shl = shl i64 1, %sh_prom, !dbg !11003
  %sub = sub i64 %shl, 1, !dbg !11004
  br label %cond.end, !dbg !11000

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %sub, %cond.false ], !dbg !11000
  store i64 %cond, i64* %mask, align 8, !dbg !11005
  br label %while.cond, !dbg !11006

while.cond:                                       ; preds = %while.body, %cond.end
  %3 = load i32, i32* %nbit, align 4, !dbg !11007
  %4 = load i32, i32* %n.addr, align 4, !dbg !11008
  %cmp1 = icmp slt i32 %3, %4, !dbg !11009
  br i1 %cmp1, label %while.body, label %while.end, !dbg !11006

while.body:                                       ; preds = %while.cond
  %5 = load i64, i64* %y, align 8, !dbg !11010
  %6 = load i64, i64* %x.addr, align 8, !dbg !11012
  %7 = load i64, i64* %y, align 8, !dbg !11013
  %mul = mul i64 %6, %7, !dbg !11014
  %sub2 = sub i64 2, %mul, !dbg !11015
  %mul3 = mul i64 %5, %sub2, !dbg !11016
  %8 = load i64, i64* %mask, align 8, !dbg !11017
  %and = and i64 %mul3, %8, !dbg !11018
  store i64 %and, i64* %y, align 8, !dbg !11019
  %9 = load i32, i32* %nbit, align 4, !dbg !11020
  %mul4 = mul nsw i32 %9, 2, !dbg !11020
  store i32 %mul4, i32* %nbit, align 4, !dbg !11020
  br label %while.cond, !dbg !11006, !llvm.loop !11021

while.end:                                        ; preds = %while.cond
  %10 = load i64, i64* %y, align 8, !dbg !11023
  ret i64 %10, !dbg !11024
}

declare dso_local %struct.rtx_def* @plus_constant(%struct.rtx_def*, i64) #2

declare dso_local %struct.rtx_def* @expand_abs(i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

declare dso_local %struct.rtx_def* @sign_expand_binop(i32, %struct.optab_d*, %struct.optab_d*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

declare dso_local zeroext i8 @expand_twoval_binop_libfunc(%struct.optab_d*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local %union.tree_node* @build_int_cst_wide(%union.tree_node*, i64, i64) #2

declare dso_local %union.tree_node* @build_real(%union.tree_node*, %struct.real_value* byval(%struct.real_value) align 8) #2

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_vector(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @unsigned_type_for(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @signed_type_for(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @locator_location(i32) #2

declare dso_local %struct.rtx_def* @convert_memory_address_addr_space(i32, %struct.rtx_def*, i8 zeroext) #2

declare dso_local %struct.rtx_def* @simplify_binary_operation(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @emit_store_flag_1(%struct.rtx_def* %target, i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1, i32 %mode, i32 %unsignedp, i32 %normalizep, i32 %target_mode) #0 !dbg !11025 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %normalizep.addr = alloca i32, align 4
  %target_mode.addr = alloca i32, align 4
  %subtarget = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  %compare_mode = alloca i32, align 4
  %mclass = alloca i32, align 4
  %scode = alloca i32, align 4
  %tem = alloca %struct.rtx_def*, align 8
  %op00 = alloca %struct.rtx_def*, align 8
  %op01 = alloca %struct.rtx_def*, align 8
  %op0h = alloca %struct.rtx_def*, align 8
  %optab_mode = alloca i32, align 4
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !11028, metadata !DIExpression()), !dbg !11029
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !11030, metadata !DIExpression()), !dbg !11031
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !11032, metadata !DIExpression()), !dbg !11033
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !11034, metadata !DIExpression()), !dbg !11035
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11036, metadata !DIExpression()), !dbg !11037
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !11038, metadata !DIExpression()), !dbg !11039
  store i32 %normalizep, i32* %normalizep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %normalizep.addr, metadata !11040, metadata !DIExpression()), !dbg !11041
  store i32 %target_mode, i32* %target_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %target_mode.addr, metadata !11042, metadata !DIExpression()), !dbg !11043
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget, metadata !11044, metadata !DIExpression()), !dbg !11045
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !11046, metadata !DIExpression()), !dbg !11047
  call void @llvm.dbg.declare(metadata i32* %compare_mode, metadata !11048, metadata !DIExpression()), !dbg !11049
  call void @llvm.dbg.declare(metadata i32* %mclass, metadata !11050, metadata !DIExpression()), !dbg !11051
  call void @llvm.dbg.declare(metadata i32* %scode, metadata !11052, metadata !DIExpression()), !dbg !11053
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !11054, metadata !DIExpression()), !dbg !11055
  %0 = load i32, i32* %unsignedp.addr, align 4, !dbg !11056
  %tobool = icmp ne i32 %0, 0, !dbg !11056
  br i1 %tobool, label %if.then, label %if.end, !dbg !11058

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %code.addr, align 4, !dbg !11059
  %call = call i32 @unsigned_condition(i32 %1), !dbg !11060
  store i32 %call, i32* %code.addr, align 4, !dbg !11061
  br label %if.end, !dbg !11062

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %code.addr, align 4, !dbg !11063
  %call1 = call i32 @swap_condition(i32 %2), !dbg !11064
  store i32 %call1, i32* %scode, align 4, !dbg !11065
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11066
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11068
  %call2 = call zeroext i8 @swap_commutative_operands_p(%struct.rtx_def* %3, %struct.rtx_def* %4), !dbg !11069
  %tobool3 = icmp ne i8 %call2, 0, !dbg !11069
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !11070

if.then4:                                         ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11071
  store %struct.rtx_def* %5, %struct.rtx_def** %tem, align 8, !dbg !11073
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11074
  store %struct.rtx_def* %6, %struct.rtx_def** %op0.addr, align 8, !dbg !11075
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11076
  store %struct.rtx_def* %7, %struct.rtx_def** %op1.addr, align 8, !dbg !11077
  %8 = load i32, i32* %code.addr, align 4, !dbg !11078
  %call5 = call i32 @swap_condition(i32 %8), !dbg !11079
  store i32 %call5, i32* %code.addr, align 4, !dbg !11080
  br label %if.end6, !dbg !11081

if.end6:                                          ; preds = %if.then4, %if.end
  %9 = load i32, i32* %mode.addr, align 4, !dbg !11082
  %cmp = icmp eq i32 %9, 0, !dbg !11084
  br i1 %cmp, label %if.then7, label %if.end8, !dbg !11085

if.then7:                                         ; preds = %if.end6
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11086
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !11086
  %bf.load = load i32, i32* %11, align 8, !dbg !11086
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !11086
  %bf.clear = and i32 %bf.lshr, 255, !dbg !11086
  store i32 %bf.clear, i32* %mode.addr, align 4, !dbg !11087
  br label %if.end8, !dbg !11088

if.end8:                                          ; preds = %if.then7, %if.end6
  %12 = load i32, i32* %code.addr, align 4, !dbg !11089
  switch i32 %12, label %sw.default [
    i32 85, label %sw.bb
    i32 84, label %sw.bb12
    i32 82, label %sw.bb16
    i32 83, label %sw.bb20
    i32 86, label %sw.bb24
    i32 89, label %sw.bb28
  ], !dbg !11090

sw.bb:                                            ; preds = %if.end8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11091
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !11094
  %cmp9 = icmp eq %struct.rtx_def* %13, %14, !dbg !11095
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !11096

if.then10:                                        ; preds = %sw.bb
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11097
  store %struct.rtx_def* %15, %struct.rtx_def** %op1.addr, align 8, !dbg !11098
  store i32 84, i32* %code.addr, align 4, !dbg !11099
  br label %if.end11, !dbg !11100

if.end11:                                         ; preds = %if.then10, %sw.bb
  br label %sw.epilog, !dbg !11101

sw.bb12:                                          ; preds = %if.end8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11102
  %17 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !11104
  %cmp13 = icmp eq %struct.rtx_def* %16, %17, !dbg !11105
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !11106

if.then14:                                        ; preds = %sw.bb12
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11107
  store %struct.rtx_def* %18, %struct.rtx_def** %op1.addr, align 8, !dbg !11108
  store i32 85, i32* %code.addr, align 4, !dbg !11109
  br label %if.end15, !dbg !11110

if.end15:                                         ; preds = %if.then14, %sw.bb12
  br label %sw.epilog, !dbg !11111

sw.bb16:                                          ; preds = %if.end8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11112
  %20 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !11114
  %cmp17 = icmp eq %struct.rtx_def* %19, %20, !dbg !11115
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !11116

if.then18:                                        ; preds = %sw.bb16
  %21 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11117
  store %struct.rtx_def* %21, %struct.rtx_def** %op1.addr, align 8, !dbg !11118
  store i32 83, i32* %code.addr, align 4, !dbg !11119
  br label %if.end19, !dbg !11120

if.end19:                                         ; preds = %if.then18, %sw.bb16
  br label %sw.epilog, !dbg !11121

sw.bb20:                                          ; preds = %if.end8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11122
  %23 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !11124
  %cmp21 = icmp eq %struct.rtx_def* %22, %23, !dbg !11125
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !11126

if.then22:                                        ; preds = %sw.bb20
  %24 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11127
  store %struct.rtx_def* %24, %struct.rtx_def** %op1.addr, align 8, !dbg !11128
  store i32 82, i32* %code.addr, align 4, !dbg !11129
  br label %if.end23, !dbg !11130

if.end23:                                         ; preds = %if.then22, %sw.bb20
  br label %sw.epilog, !dbg !11131

sw.bb24:                                          ; preds = %if.end8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11132
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !11134
  %cmp25 = icmp eq %struct.rtx_def* %25, %26, !dbg !11135
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !11136

if.then26:                                        ; preds = %sw.bb24
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11137
  store %struct.rtx_def* %27, %struct.rtx_def** %op1.addr, align 8, !dbg !11138
  store i32 80, i32* %code.addr, align 4, !dbg !11139
  br label %if.end27, !dbg !11140

if.end27:                                         ; preds = %if.then26, %sw.bb24
  br label %sw.epilog, !dbg !11141

sw.bb28:                                          ; preds = %if.end8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11142
  %29 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !11144
  %cmp29 = icmp eq %struct.rtx_def* %28, %29, !dbg !11145
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !11146

if.then30:                                        ; preds = %sw.bb28
  %30 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11147
  store %struct.rtx_def* %30, %struct.rtx_def** %op1.addr, align 8, !dbg !11148
  store i32 81, i32* %code.addr, align 4, !dbg !11149
  br label %if.end31, !dbg !11150

if.end31:                                         ; preds = %if.then30, %sw.bb28
  br label %sw.epilog, !dbg !11151

sw.default:                                       ; preds = %if.end8
  br label %sw.epilog, !dbg !11152

sw.epilog:                                        ; preds = %sw.default, %if.end31, %if.end27, %if.end23, %if.end19, %if.end15, %if.end11
  %31 = load i32, i32* %mode.addr, align 4, !dbg !11153
  %idxprom = zext i32 %31 to i64, !dbg !11153
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !11153
  %32 = load i8, i8* %arrayidx, align 1, !dbg !11153
  %conv = zext i8 %32 to i16, !dbg !11153
  %conv32 = zext i16 %conv to i32, !dbg !11153
  %mul = mul nsw i32 %conv32, 8, !dbg !11153
  %conv33 = trunc i32 %mul to i16, !dbg !11153
  %conv34 = zext i16 %conv33 to i32, !dbg !11153
  %cmp35 = icmp eq i32 %conv34, 64, !dbg !11155
  br i1 %cmp35, label %land.lhs.true, label %if.end118, !dbg !11156

land.lhs.true:                                    ; preds = %sw.epilog
  %33 = load i32, i32* %mode.addr, align 4, !dbg !11157
  %idxprom37 = zext i32 %33 to i64, !dbg !11157
  %arrayidx38 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom37, !dbg !11157
  %34 = load i8, i8* %arrayidx38, align 1, !dbg !11157
  %conv39 = zext i8 %34 to i32, !dbg !11157
  %cmp40 = icmp eq i32 %conv39, 2, !dbg !11158
  br i1 %cmp40, label %land.lhs.true42, label %if.end118, !dbg !11159

land.lhs.true42:                                  ; preds = %land.lhs.true
  %35 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11160
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !11160
  %bf.load43 = load i32, i32* %36, align 8, !dbg !11160
  %bf.clear44 = and i32 %bf.load43, 65535, !dbg !11160
  %cmp45 = icmp eq i32 %bf.clear44, 43, !dbg !11160
  br i1 %cmp45, label %lor.lhs.false, label %if.then51, !dbg !11161

lor.lhs.false:                                    ; preds = %land.lhs.true42
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11162
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !11162
  %bf.load47 = load i32, i32* %38, align 8, !dbg !11162
  %bf.lshr48 = lshr i32 %bf.load47, 27, !dbg !11162
  %bf.clear49 = and i32 %bf.lshr48, 1, !dbg !11162
  %tobool50 = icmp ne i32 %bf.clear49, 0, !dbg !11162
  br i1 %tobool50, label %if.end118, label %if.then51, !dbg !11163

if.then51:                                        ; preds = %lor.lhs.false, %land.lhs.true42
  %39 = load i32, i32* %code.addr, align 4, !dbg !11164
  %cmp52 = icmp eq i32 %39, 81, !dbg !11167
  br i1 %cmp52, label %land.lhs.true57, label %lor.lhs.false54, !dbg !11168

lor.lhs.false54:                                  ; preds = %if.then51
  %40 = load i32, i32* %code.addr, align 4, !dbg !11169
  %cmp55 = icmp eq i32 %40, 80, !dbg !11170
  br i1 %cmp55, label %land.lhs.true57, label %if.else, !dbg !11171

land.lhs.true57:                                  ; preds = %lor.lhs.false54, %if.then51
  %41 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11172
  %42 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11173
  %cmp58 = icmp eq %struct.rtx_def* %41, %42, !dbg !11174
  br i1 %cmp58, label %if.then63, label %lor.lhs.false60, !dbg !11175

lor.lhs.false60:                                  ; preds = %land.lhs.true57
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11176
  %44 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !11177
  %cmp61 = icmp eq %struct.rtx_def* %43, %44, !dbg !11178
  br i1 %cmp61, label %if.then63, label %if.else, !dbg !11179

if.then63:                                        ; preds = %lor.lhs.false60, %land.lhs.true57
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op00, metadata !11180, metadata !DIExpression()), !dbg !11182
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op01, metadata !11183, metadata !DIExpression()), !dbg !11184
  %45 = load i32, i32* @word_mode, align 4, !dbg !11185
  %46 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11186
  %47 = load i32, i32* %mode.addr, align 4, !dbg !11187
  %call64 = call %struct.rtx_def* @simplify_gen_subreg(i32 %45, %struct.rtx_def* %46, i32 %47, i32 0), !dbg !11188
  store %struct.rtx_def* %call64, %struct.rtx_def** %op00, align 8, !dbg !11189
  %48 = load i32, i32* @word_mode, align 4, !dbg !11190
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11191
  %50 = load i32, i32* %mode.addr, align 4, !dbg !11192
  %call65 = call %struct.rtx_def* @simplify_gen_subreg(i32 %48, %struct.rtx_def* %49, i32 %50, i32 4), !dbg !11193
  store %struct.rtx_def* %call65, %struct.rtx_def** %op01, align 8, !dbg !11194
  %51 = load i32, i32* @word_mode, align 4, !dbg !11195
  %52 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11196
  %53 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11197
  %cmp66 = icmp eq %struct.rtx_def* %52, %53, !dbg !11198
  %54 = zext i1 %cmp66 to i64, !dbg !11196
  %cond = select i1 %cmp66, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), !dbg !11196
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op00, align 8, !dbg !11199
  %56 = load %struct.rtx_def*, %struct.rtx_def** %op01, align 8, !dbg !11200
  %57 = load i32, i32* %unsignedp.addr, align 4, !dbg !11201
  %call68 = call %struct.rtx_def* @expand_binop(i32 %51, %struct.optab_d* %cond, %struct.rtx_def* %55, %struct.rtx_def* %56, %struct.rtx_def* null, i32 %57, i32 0), !dbg !11202
  store %struct.rtx_def* %call68, %struct.rtx_def** %tem, align 8, !dbg !11203
  %58 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11204
  %cmp69 = icmp ne %struct.rtx_def* %58, null, !dbg !11206
  br i1 %cmp69, label %if.then71, label %if.end73, !dbg !11207

if.then71:                                        ; preds = %if.then63
  %59 = load i32, i32* %code.addr, align 4, !dbg !11208
  %60 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11209
  %61 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11210
  %62 = load i32, i32* @word_mode, align 4, !dbg !11211
  %63 = load i32, i32* %unsignedp.addr, align 4, !dbg !11212
  %64 = load i32, i32* %normalizep.addr, align 4, !dbg !11213
  %call72 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* null, i32 %59, %struct.rtx_def* %60, %struct.rtx_def* %61, i32 %62, i32 %63, i32 %64), !dbg !11214
  store %struct.rtx_def* %call72, %struct.rtx_def** %tem, align 8, !dbg !11215
  br label %if.end73, !dbg !11216

if.end73:                                         ; preds = %if.then71, %if.then63
  br label %if.end88, !dbg !11217

if.else:                                          ; preds = %lor.lhs.false60, %lor.lhs.false54
  %65 = load i32, i32* %code.addr, align 4, !dbg !11218
  %cmp74 = icmp eq i32 %65, 85, !dbg !11220
  br i1 %cmp74, label %land.lhs.true79, label %lor.lhs.false76, !dbg !11221

lor.lhs.false76:                                  ; preds = %if.else
  %66 = load i32, i32* %code.addr, align 4, !dbg !11222
  %cmp77 = icmp eq i32 %66, 82, !dbg !11223
  br i1 %cmp77, label %land.lhs.true79, label %if.else86, !dbg !11224

land.lhs.true79:                                  ; preds = %lor.lhs.false76, %if.else
  %67 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11225
  %68 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11226
  %cmp80 = icmp eq %struct.rtx_def* %67, %68, !dbg !11227
  br i1 %cmp80, label %if.then82, label %if.else86, !dbg !11228

if.then82:                                        ; preds = %land.lhs.true79
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0h, metadata !11229, metadata !DIExpression()), !dbg !11231
  %69 = load i32, i32* @word_mode, align 4, !dbg !11232
  %70 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11233
  %71 = load i32, i32* %mode.addr, align 4, !dbg !11234
  %72 = load i32, i32* @word_mode, align 4, !dbg !11235
  %73 = load i32, i32* %mode.addr, align 4, !dbg !11236
  %call83 = call i32 @subreg_highpart_offset(i32 %72, i32 %73), !dbg !11237
  %call84 = call %struct.rtx_def* @simplify_gen_subreg(i32 %69, %struct.rtx_def* %70, i32 %71, i32 %call83), !dbg !11238
  store %struct.rtx_def* %call84, %struct.rtx_def** %op0h, align 8, !dbg !11239
  %74 = load i32, i32* %code.addr, align 4, !dbg !11240
  %75 = load %struct.rtx_def*, %struct.rtx_def** %op0h, align 8, !dbg !11241
  %76 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11242
  %77 = load i32, i32* @word_mode, align 4, !dbg !11243
  %78 = load i32, i32* %unsignedp.addr, align 4, !dbg !11244
  %79 = load i32, i32* %normalizep.addr, align 4, !dbg !11245
  %call85 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* null, i32 %74, %struct.rtx_def* %75, %struct.rtx_def* %76, i32 %77, i32 %78, i32 %79), !dbg !11246
  store %struct.rtx_def* %call85, %struct.rtx_def** %tem, align 8, !dbg !11247
  br label %if.end87, !dbg !11248

if.else86:                                        ; preds = %land.lhs.true79, %lor.lhs.false76
  store %struct.rtx_def* null, %struct.rtx_def** %tem, align 8, !dbg !11249
  br label %if.end87

if.end87:                                         ; preds = %if.else86, %if.then82
  br label %if.end88

if.end88:                                         ; preds = %if.end87, %if.end73
  %80 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11250
  %tobool89 = icmp ne %struct.rtx_def* %80, null, !dbg !11250
  br i1 %tobool89, label %if.then90, label %if.end117, !dbg !11252

if.then90:                                        ; preds = %if.end88
  %81 = load i32, i32* %target_mode.addr, align 4, !dbg !11253
  %cmp91 = icmp eq i32 %81, 0, !dbg !11256
  br i1 %cmp91, label %if.then99, label %lor.lhs.false93, !dbg !11257

lor.lhs.false93:                                  ; preds = %if.then90
  %82 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11258
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !11258
  %bf.load94 = load i32, i32* %83, align 8, !dbg !11258
  %bf.lshr95 = lshr i32 %bf.load94, 16, !dbg !11258
  %bf.clear96 = and i32 %bf.lshr95, 255, !dbg !11258
  %84 = load i32, i32* %target_mode.addr, align 4, !dbg !11259
  %cmp97 = icmp eq i32 %bf.clear96, %84, !dbg !11260
  br i1 %cmp97, label %if.then99, label %if.end100, !dbg !11261

if.then99:                                        ; preds = %lor.lhs.false93, %if.then90
  %85 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11262
  store %struct.rtx_def* %85, %struct.rtx_def** %retval, align 8, !dbg !11263
  br label %return, !dbg !11263

if.end100:                                        ; preds = %lor.lhs.false93
  %86 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11264
  %tobool101 = icmp ne %struct.rtx_def* %86, null, !dbg !11264
  br i1 %tobool101, label %if.end104, label %if.then102, !dbg !11266

if.then102:                                       ; preds = %if.end100
  %87 = load i32, i32* %target_mode.addr, align 4, !dbg !11267
  %call103 = call %struct.rtx_def* @gen_reg_rtx(i32 %87), !dbg !11268
  store %struct.rtx_def* %call103, %struct.rtx_def** %target.addr, align 8, !dbg !11269
  br label %if.end104, !dbg !11270

if.end104:                                        ; preds = %if.then102, %if.end100
  %88 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11271
  %89 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11272
  %90 = load i32, i32* %normalizep.addr, align 4, !dbg !11273
  %tobool105 = icmp ne i32 %90, 0, !dbg !11273
  br i1 %tobool105, label %cond.true, label %cond.false, !dbg !11273

cond.true:                                        ; preds = %if.end104
  %91 = load i32, i32* %normalizep.addr, align 4, !dbg !11274
  br label %cond.end, !dbg !11273

cond.false:                                       ; preds = %if.end104
  br label %cond.end, !dbg !11273

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond106 = phi i32 [ %91, %cond.true ], [ 1, %cond.false ], !dbg !11273
  %conv107 = sext i32 %cond106 to i64, !dbg !11275
  %92 = load i32, i32* @word_mode, align 4, !dbg !11276
  %idxprom108 = zext i32 %92 to i64, !dbg !11276
  %arrayidx109 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom108, !dbg !11276
  %93 = load i8, i8* %arrayidx109, align 1, !dbg !11276
  %conv110 = zext i8 %93 to i16, !dbg !11276
  %conv111 = zext i16 %conv110 to i32, !dbg !11276
  %mul112 = mul nsw i32 %conv111, 8, !dbg !11276
  %conv113 = trunc i32 %mul112 to i16, !dbg !11276
  %conv114 = zext i16 %conv113 to i32, !dbg !11276
  %sub = sub nsw i32 %conv114, 1, !dbg !11277
  %sh_prom = zext i32 %sub to i64, !dbg !11278
  %shl = shl i64 1, %sh_prom, !dbg !11278
  %and = and i64 %conv107, %shl, !dbg !11279
  %cmp115 = icmp eq i64 0, %and, !dbg !11280
  %conv116 = zext i1 %cmp115 to i32, !dbg !11280
  call void @convert_move(%struct.rtx_def* %88, %struct.rtx_def* %89, i32 %conv116), !dbg !11281
  %94 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11282
  store %struct.rtx_def* %94, %struct.rtx_def** %retval, align 8, !dbg !11283
  br label %return, !dbg !11283

if.end117:                                        ; preds = %if.end88
  br label %if.end118, !dbg !11284

if.end118:                                        ; preds = %if.end117, %lor.lhs.false, %land.lhs.true, %sw.epilog
  %95 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11285
  %96 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11287
  %cmp119 = icmp eq %struct.rtx_def* %95, %96, !dbg !11288
  br i1 %cmp119, label %land.lhs.true121, label %if.end207, !dbg !11289

land.lhs.true121:                                 ; preds = %if.end118
  %97 = load i32, i32* %code.addr, align 4, !dbg !11290
  %cmp122 = icmp eq i32 %97, 85, !dbg !11291
  br i1 %cmp122, label %land.lhs.true127, label %lor.lhs.false124, !dbg !11292

lor.lhs.false124:                                 ; preds = %land.lhs.true121
  %98 = load i32, i32* %code.addr, align 4, !dbg !11293
  %cmp125 = icmp eq i32 %98, 82, !dbg !11294
  br i1 %cmp125, label %land.lhs.true127, label %if.end207, !dbg !11295

land.lhs.true127:                                 ; preds = %lor.lhs.false124, %land.lhs.true121
  %99 = load i32, i32* %mode.addr, align 4, !dbg !11296
  %idxprom128 = zext i32 %99 to i64, !dbg !11296
  %arrayidx129 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom128, !dbg !11296
  %100 = load i8, i8* %arrayidx129, align 1, !dbg !11296
  %conv130 = zext i8 %100 to i32, !dbg !11296
  %cmp131 = icmp eq i32 %conv130, 2, !dbg !11297
  br i1 %cmp131, label %land.lhs.true133, label %if.end207, !dbg !11298

land.lhs.true133:                                 ; preds = %land.lhs.true127
  %101 = load i32, i32* %normalizep.addr, align 4, !dbg !11299
  %tobool134 = icmp ne i32 %101, 0, !dbg !11299
  br i1 %tobool134, label %if.then162, label %lor.lhs.false135, !dbg !11300

lor.lhs.false135:                                 ; preds = %land.lhs.true133
  br i1 true, label %if.then162, label %lor.lhs.false136, !dbg !11301

lor.lhs.false136:                                 ; preds = %lor.lhs.false135
  %102 = load i32, i32* %mode.addr, align 4, !dbg !11302
  %idxprom137 = zext i32 %102 to i64, !dbg !11302
  %arrayidx138 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom137, !dbg !11302
  %103 = load i8, i8* %arrayidx138, align 1, !dbg !11302
  %conv139 = zext i8 %103 to i16, !dbg !11302
  %conv140 = zext i16 %conv139 to i32, !dbg !11302
  %mul141 = mul nsw i32 %conv140, 8, !dbg !11302
  %conv142 = trunc i32 %mul141 to i16, !dbg !11302
  %conv143 = zext i16 %conv142 to i32, !dbg !11302
  %cmp144 = icmp sle i32 %conv143, 64, !dbg !11303
  br i1 %cmp144, label %land.lhs.true146, label %if.end207, !dbg !11304

land.lhs.true146:                                 ; preds = %lor.lhs.false136
  %104 = load i32, i32* %mode.addr, align 4, !dbg !11305
  %idxprom147 = zext i32 %104 to i64, !dbg !11305
  %arrayidx148 = getelementptr inbounds [87 x i64], [87 x i64]* @mode_mask_array, i64 0, i64 %idxprom147, !dbg !11305
  %105 = load i64, i64* %arrayidx148, align 8, !dbg !11305
  %and149 = and i64 1, %105, !dbg !11306
  %106 = load i32, i32* %mode.addr, align 4, !dbg !11307
  %idxprom150 = zext i32 %106 to i64, !dbg !11307
  %arrayidx151 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom150, !dbg !11307
  %107 = load i8, i8* %arrayidx151, align 1, !dbg !11307
  %conv152 = zext i8 %107 to i16, !dbg !11307
  %conv153 = zext i16 %conv152 to i32, !dbg !11307
  %mul154 = mul nsw i32 %conv153, 8, !dbg !11307
  %conv155 = trunc i32 %mul154 to i16, !dbg !11307
  %conv156 = zext i16 %conv155 to i32, !dbg !11307
  %sub157 = sub nsw i32 %conv156, 1, !dbg !11308
  %sh_prom158 = zext i32 %sub157 to i64, !dbg !11309
  %shl159 = shl i64 1, %sh_prom158, !dbg !11309
  %cmp160 = icmp eq i64 %and149, %shl159, !dbg !11310
  br i1 %cmp160, label %if.then162, label %if.end207, !dbg !11311

if.then162:                                       ; preds = %land.lhs.true146, %lor.lhs.false135, %land.lhs.true133
  %108 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11312
  store %struct.rtx_def* %108, %struct.rtx_def** %subtarget, align 8, !dbg !11314
  %109 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11315
  %tobool163 = icmp ne %struct.rtx_def* %109, null, !dbg !11315
  br i1 %tobool163, label %if.else165, label %if.then164, !dbg !11317

if.then164:                                       ; preds = %if.then162
  %110 = load i32, i32* %mode.addr, align 4, !dbg !11318
  store i32 %110, i32* %target_mode.addr, align 4, !dbg !11319
  br label %if.end179, !dbg !11320

if.else165:                                       ; preds = %if.then162
  %111 = load i32, i32* %target_mode.addr, align 4, !dbg !11321
  %idxprom166 = zext i32 %111 to i64, !dbg !11321
  %arrayidx167 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom166, !dbg !11321
  %112 = load i8, i8* %arrayidx167, align 1, !dbg !11321
  %conv168 = zext i8 %112 to i16, !dbg !11321
  %conv169 = zext i16 %conv168 to i32, !dbg !11321
  %113 = load i32, i32* %mode.addr, align 4, !dbg !11323
  %idxprom170 = zext i32 %113 to i64, !dbg !11323
  %arrayidx171 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom170, !dbg !11323
  %114 = load i8, i8* %arrayidx171, align 1, !dbg !11323
  %conv172 = zext i8 %114 to i16, !dbg !11323
  %conv173 = zext i16 %conv172 to i32, !dbg !11323
  %cmp174 = icmp sgt i32 %conv169, %conv173, !dbg !11324
  br i1 %cmp174, label %if.then176, label %if.end178, !dbg !11325

if.then176:                                       ; preds = %if.else165
  %115 = load i32, i32* %target_mode.addr, align 4, !dbg !11326
  %116 = load i32, i32* %mode.addr, align 4, !dbg !11328
  %117 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11329
  %call177 = call %struct.rtx_def* @convert_modes(i32 %115, i32 %116, %struct.rtx_def* %117, i32 0), !dbg !11330
  store %struct.rtx_def* %call177, %struct.rtx_def** %op0.addr, align 8, !dbg !11331
  %118 = load i32, i32* %target_mode.addr, align 4, !dbg !11332
  store i32 %118, i32* %mode.addr, align 4, !dbg !11333
  br label %if.end178, !dbg !11334

if.end178:                                        ; preds = %if.then176, %if.else165
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %if.then164
  %119 = load i32, i32* %target_mode.addr, align 4, !dbg !11335
  %120 = load i32, i32* %mode.addr, align 4, !dbg !11337
  %cmp180 = icmp ne i32 %119, %120, !dbg !11338
  br i1 %cmp180, label %if.then182, label %if.end183, !dbg !11339

if.then182:                                       ; preds = %if.end179
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8, !dbg !11340
  br label %if.end183, !dbg !11341

if.end183:                                        ; preds = %if.then182, %if.end179
  %121 = load i32, i32* %code.addr, align 4, !dbg !11342
  %cmp184 = icmp eq i32 %121, 82, !dbg !11344
  br i1 %cmp184, label %if.then186, label %if.end188, !dbg !11345

if.then186:                                       ; preds = %if.end183
  %122 = load i32, i32* %mode.addr, align 4, !dbg !11346
  %123 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11347
  %call187 = call %struct.rtx_def* @expand_unop(i32 %122, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69), %struct.rtx_def* %123, %struct.rtx_def* null, i32 0), !dbg !11348
  store %struct.rtx_def* %call187, %struct.rtx_def** %op0.addr, align 8, !dbg !11349
  br label %if.end188, !dbg !11350

if.end188:                                        ; preds = %if.then186, %if.end183
  %124 = load i32, i32* %mode.addr, align 4, !dbg !11351
  %125 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11353
  %126 = load i32, i32* %mode.addr, align 4, !dbg !11354
  %idxprom189 = zext i32 %126 to i64, !dbg !11354
  %arrayidx190 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom189, !dbg !11354
  %127 = load i8, i8* %arrayidx190, align 1, !dbg !11354
  %conv191 = zext i8 %127 to i16, !dbg !11354
  %conv192 = zext i16 %conv191 to i32, !dbg !11354
  %mul193 = mul nsw i32 %conv192, 8, !dbg !11354
  %conv194 = trunc i32 %mul193 to i16, !dbg !11354
  %conv195 = zext i16 %conv194 to i32, !dbg !11354
  %sub196 = sub nsw i32 %conv195, 1, !dbg !11354
  %conv197 = sext i32 %sub196 to i64, !dbg !11354
  %call198 = call %union.tree_node* @size_int_kind(i64 %conv197, i32 0), !dbg !11354
  %128 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !11355
  %129 = load i32, i32* %normalizep.addr, align 4, !dbg !11356
  %cmp199 = icmp ne i32 %129, -1, !dbg !11357
  %conv200 = zext i1 %cmp199 to i32, !dbg !11357
  %call201 = call %struct.rtx_def* @expand_shift(i32 84, i32 %124, %struct.rtx_def* %125, %union.tree_node* %call198, %struct.rtx_def* %128, i32 %conv200), !dbg !11358
  store %struct.rtx_def* %call201, %struct.rtx_def** %op0.addr, align 8, !dbg !11359
  %130 = load i32, i32* %mode.addr, align 4, !dbg !11360
  %131 = load i32, i32* %target_mode.addr, align 4, !dbg !11362
  %cmp202 = icmp ne i32 %130, %131, !dbg !11363
  br i1 %cmp202, label %if.then204, label %if.end206, !dbg !11364

if.then204:                                       ; preds = %if.end188
  %132 = load i32, i32* %target_mode.addr, align 4, !dbg !11365
  %133 = load i32, i32* %mode.addr, align 4, !dbg !11366
  %134 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11367
  %call205 = call %struct.rtx_def* @convert_modes(i32 %132, i32 %133, %struct.rtx_def* %134, i32 0), !dbg !11368
  store %struct.rtx_def* %call205, %struct.rtx_def** %op0.addr, align 8, !dbg !11369
  br label %if.end206, !dbg !11370

if.end206:                                        ; preds = %if.then204, %if.end188
  %135 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11371
  store %struct.rtx_def* %135, %struct.rtx_def** %retval, align 8, !dbg !11372
  br label %return, !dbg !11372

if.end207:                                        ; preds = %land.lhs.true146, %lor.lhs.false136, %land.lhs.true127, %lor.lhs.false124, %if.end118
  %136 = load i32, i32* %mode.addr, align 4, !dbg !11373
  %idxprom208 = zext i32 %136 to i64, !dbg !11373
  %arrayidx209 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom208, !dbg !11373
  %137 = load i8, i8* %arrayidx209, align 1, !dbg !11373
  %conv210 = zext i8 %137 to i32, !dbg !11373
  store i32 %conv210, i32* %mclass, align 4, !dbg !11374
  %138 = load i32, i32* %mode.addr, align 4, !dbg !11375
  store i32 %138, i32* %compare_mode, align 4, !dbg !11377
  br label %for.cond, !dbg !11378

for.cond:                                         ; preds = %for.inc, %if.end207
  %139 = load i32, i32* %compare_mode, align 4, !dbg !11379
  %cmp211 = icmp ne i32 %139, 0, !dbg !11381
  br i1 %cmp211, label %for.body, label %for.end, !dbg !11382

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %optab_mode, metadata !11383, metadata !DIExpression()), !dbg !11385
  %140 = load i32, i32* %mclass, align 4, !dbg !11386
  %cmp213 = icmp eq i32 %140, 1, !dbg !11387
  br i1 %cmp213, label %cond.true215, label %cond.false216, !dbg !11386

cond.true215:                                     ; preds = %for.body
  br label %cond.end217, !dbg !11386

cond.false216:                                    ; preds = %for.body
  %141 = load i32, i32* %compare_mode, align 4, !dbg !11388
  br label %cond.end217, !dbg !11386

cond.end217:                                      ; preds = %cond.false216, %cond.true215
  %cond218 = phi i32 [ 2, %cond.true215 ], [ %141, %cond.false216 ], !dbg !11386
  store i32 %cond218, i32* %optab_mode, align 4, !dbg !11385
  %142 = load i32, i32* %optab_mode, align 4, !dbg !11389
  %idxprom219 = sext i32 %142 to i64, !dbg !11389
  %arrayidx220 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 117, i32 4), i64 0, i64 %idxprom219, !dbg !11389
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx220, i32 0, i32 0, !dbg !11390
  %143 = load i32, i32* %insn_code, align 4, !dbg !11390
  store i32 %143, i32* %icode, align 4, !dbg !11391
  %144 = load i32, i32* %icode, align 4, !dbg !11392
  %cmp221 = icmp ne i32 %144, 2956, !dbg !11394
  br i1 %cmp221, label %if.then223, label %if.end239, !dbg !11395

if.then223:                                       ; preds = %cond.end217
  call void @do_pending_stack_adjust(), !dbg !11396
  %145 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11398
  %146 = load i32, i32* %icode, align 4, !dbg !11399
  %147 = load i32, i32* %code.addr, align 4, !dbg !11400
  %148 = load i32, i32* %mode.addr, align 4, !dbg !11401
  %149 = load i32, i32* %compare_mode, align 4, !dbg !11402
  %150 = load i32, i32* %unsignedp.addr, align 4, !dbg !11403
  %151 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11404
  %152 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11405
  %153 = load i32, i32* %normalizep.addr, align 4, !dbg !11406
  %154 = load i32, i32* %target_mode.addr, align 4, !dbg !11407
  %call224 = call %struct.rtx_def* @emit_cstore(%struct.rtx_def* %145, i32 %146, i32 %147, i32 %148, i32 %149, i32 %150, %struct.rtx_def* %151, %struct.rtx_def* %152, i32 %153, i32 %154), !dbg !11408
  store %struct.rtx_def* %call224, %struct.rtx_def** %tem, align 8, !dbg !11409
  %155 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11410
  %tobool225 = icmp ne %struct.rtx_def* %155, null, !dbg !11410
  br i1 %tobool225, label %if.then226, label %if.end227, !dbg !11412

if.then226:                                       ; preds = %if.then223
  %156 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11413
  store %struct.rtx_def* %156, %struct.rtx_def** %retval, align 8, !dbg !11414
  br label %return, !dbg !11414

if.end227:                                        ; preds = %if.then223
  %157 = load i32, i32* %mode.addr, align 4, !dbg !11415
  %idxprom228 = zext i32 %157 to i64, !dbg !11415
  %arrayidx229 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom228, !dbg !11415
  %158 = load i8, i8* %arrayidx229, align 1, !dbg !11415
  %conv230 = zext i8 %158 to i32, !dbg !11415
  %cmp231 = icmp eq i32 %conv230, 8, !dbg !11417
  br i1 %cmp231, label %if.then233, label %if.end238, !dbg !11418

if.then233:                                       ; preds = %if.end227
  %159 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11419
  %160 = load i32, i32* %icode, align 4, !dbg !11421
  %161 = load i32, i32* %scode, align 4, !dbg !11422
  %162 = load i32, i32* %mode.addr, align 4, !dbg !11423
  %163 = load i32, i32* %compare_mode, align 4, !dbg !11424
  %164 = load i32, i32* %unsignedp.addr, align 4, !dbg !11425
  %165 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11426
  %166 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11427
  %167 = load i32, i32* %normalizep.addr, align 4, !dbg !11428
  %168 = load i32, i32* %target_mode.addr, align 4, !dbg !11429
  %call234 = call %struct.rtx_def* @emit_cstore(%struct.rtx_def* %159, i32 %160, i32 %161, i32 %162, i32 %163, i32 %164, %struct.rtx_def* %165, %struct.rtx_def* %166, i32 %167, i32 %168), !dbg !11430
  store %struct.rtx_def* %call234, %struct.rtx_def** %tem, align 8, !dbg !11431
  %169 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11432
  %tobool235 = icmp ne %struct.rtx_def* %169, null, !dbg !11432
  br i1 %tobool235, label %if.then236, label %if.end237, !dbg !11434

if.then236:                                       ; preds = %if.then233
  %170 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11435
  store %struct.rtx_def* %170, %struct.rtx_def** %retval, align 8, !dbg !11436
  br label %return, !dbg !11436

if.end237:                                        ; preds = %if.then233
  br label %if.end238, !dbg !11437

if.end238:                                        ; preds = %if.end237, %if.end227
  br label %for.end, !dbg !11438

if.end239:                                        ; preds = %cond.end217
  br label %for.inc, !dbg !11439

for.inc:                                          ; preds = %if.end239
  %171 = load i32, i32* %compare_mode, align 4, !dbg !11440
  %idxprom240 = zext i32 %171 to i64, !dbg !11440
  %arrayidx241 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom240, !dbg !11440
  %172 = load i8, i8* %arrayidx241, align 1, !dbg !11440
  %conv242 = zext i8 %172 to i32, !dbg !11440
  store i32 %conv242, i32* %compare_mode, align 4, !dbg !11441
  br label %for.cond, !dbg !11442, !llvm.loop !11443

for.end:                                          ; preds = %if.end238, %for.cond
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11445
  br label %return, !dbg !11445

return:                                           ; preds = %for.end, %if.then236, %if.then226, %if.end206, %cond.end, %if.then99
  %173 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !11446
  ret %struct.rtx_def* %173, !dbg !11446
}

declare dso_local i32 @reverse_condition_maybe_unordered(i32) #2

declare dso_local i32 @can_compare_p(i32, i32, i32) #2

declare dso_local zeroext i8 @split_comparison(i32, i32, i32*, i32*) #2

declare dso_local %struct.rtx_def* @emit_conditional_move(%struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

declare dso_local i32 @reverse_condition(i32) #2

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

declare dso_local void @convert_move(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local void @do_compare_rtx_and_jump(%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local void @start_sequence() #2

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local void @end_sequence() #2

declare dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #2

declare dso_local %struct.rtx_def* @simplify_gen_subreg(i32, %struct.rtx_def*, i32, i32) #2

declare dso_local %struct.rtx_def* @shallow_copy_rtx_stat(%struct.rtx_def*) #2

declare dso_local void @set_mem_alias_set(%struct.rtx_def*, i32) #2

declare dso_local void @set_mem_expr(%struct.rtx_def*, %union.tree_node*) #2

declare dso_local i32 @smallest_mode_for_size(i32, i32) #2

declare dso_local %struct.rtx_def* @operand_subword_force(%struct.rtx_def*, i32, i32) #2

declare dso_local i32 @mode_for_size(i32, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @check_predicate_volatile_ok(i32 %icode, i32 %opno, %struct.rtx_def* %x, i32 %mode) #0 !dbg !11447 {
entry:
  %icode.addr = alloca i32, align 4
  %opno.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %save_volatile_ok = alloca i8, align 1
  %result = alloca i8, align 1
  store i32 %icode, i32* %icode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %icode.addr, metadata !11450, metadata !DIExpression()), !dbg !11451
  store i32 %opno, i32* %opno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opno.addr, metadata !11452, metadata !DIExpression()), !dbg !11453
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !11454, metadata !DIExpression()), !dbg !11455
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11456, metadata !DIExpression()), !dbg !11457
  call void @llvm.dbg.declare(metadata i8* %save_volatile_ok, metadata !11458, metadata !DIExpression()), !dbg !11459
  call void @llvm.dbg.declare(metadata i8* %result, metadata !11460, metadata !DIExpression()), !dbg !11461
  %0 = load i32, i32* @volatile_ok, align 4, !dbg !11462
  %conv = trunc i32 %0 to i8, !dbg !11462
  store i8 %conv, i8* %save_volatile_ok, align 1, !dbg !11463
  %1 = load i32, i32* %icode.addr, align 4, !dbg !11464
  %idxprom = sext i32 %1 to i64, !dbg !11465
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, !dbg !11465
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3, !dbg !11466
  %2 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !11466
  %3 = load i32, i32* %opno.addr, align 4, !dbg !11467
  %idxprom1 = sext i32 %3 to i64, !dbg !11465
  %arrayidx2 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %2, i64 %idxprom1, !dbg !11465
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx2, i32 0, i32 0, !dbg !11468
  %4 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !11468
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11469
  %6 = load i32, i32* %mode.addr, align 4, !dbg !11470
  %call = call i32 %4(%struct.rtx_def* %5, i32 %6), !dbg !11465
  %conv3 = trunc i32 %call to i8, !dbg !11465
  store i8 %conv3, i8* %result, align 1, !dbg !11471
  %7 = load i8, i8* %save_volatile_ok, align 1, !dbg !11472
  %conv4 = zext i8 %7 to i32, !dbg !11472
  store i32 %conv4, i32* @volatile_ok, align 4, !dbg !11473
  %8 = load i8, i8* %result, align 1, !dbg !11474
  ret i8 %8, !dbg !11475
}

declare dso_local %struct.rtx_def* @gen_lowpart_SUBREG(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_insv(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @get_best_mode(i32, i32, i32, i32, i32) #2

declare dso_local %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @store_fixed_bit_field(%struct.rtx_def* %op0, i64 %offset, i64 %bitsize, i64 %bitpos, %struct.rtx_def* %value) #0 !dbg !11476 {
entry:
  %op0.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca i64, align 8
  %bitsize.addr = alloca i64, align 8
  %bitpos.addr = alloca i64, align 8
  %value.addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %total_bits = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %all_zero = alloca i32, align 4
  %all_one = alloca i32, align 4
  %v = alloca i64, align 8
  %must_and = alloca i32, align 4
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !11479, metadata !DIExpression()), !dbg !11480
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !11481, metadata !DIExpression()), !dbg !11482
  store i64 %bitsize, i64* %bitsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitsize.addr, metadata !11483, metadata !DIExpression()), !dbg !11484
  store i64 %bitpos, i64* %bitpos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitpos.addr, metadata !11485, metadata !DIExpression()), !dbg !11486
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value.addr, metadata !11487, metadata !DIExpression()), !dbg !11488
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !11489, metadata !DIExpression()), !dbg !11490
  call void @llvm.dbg.declare(metadata i32* %total_bits, metadata !11491, metadata !DIExpression()), !dbg !11492
  store i32 32, i32* %total_bits, align 4, !dbg !11492
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !11493, metadata !DIExpression()), !dbg !11494
  call void @llvm.dbg.declare(metadata i32* %all_zero, metadata !11495, metadata !DIExpression()), !dbg !11496
  store i32 0, i32* %all_zero, align 4, !dbg !11496
  call void @llvm.dbg.declare(metadata i32* %all_one, metadata !11497, metadata !DIExpression()), !dbg !11498
  store i32 0, i32* %all_one, align 4, !dbg !11498
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11499
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !11499
  %bf.load = load i32, i32* %1, align 8, !dbg !11499
  %bf.clear = and i32 %bf.load, 65535, !dbg !11499
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !11499
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !11501

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11502
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !11502
  %bf.load1 = load i32, i32* %3, align 8, !dbg !11502
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !11502
  %cmp3 = icmp eq i32 %bf.clear2, 39, !dbg !11503
  br i1 %cmp3, label %if.then, label %if.else, !dbg !11504

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i64, i64* %offset.addr, align 8, !dbg !11505
  %tobool = icmp ne i64 %4, 0, !dbg !11505
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11505

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 888, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11505
  br label %cond.end, !dbg !11505

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !11505

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11505
  %5 = load i64, i64* %bitsize.addr, align 8, !dbg !11507
  %6 = load i64, i64* %bitpos.addr, align 8, !dbg !11509
  %add = add i64 %5, %6, !dbg !11510
  %cmp4 = icmp ugt i64 %add, 32, !dbg !11511
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !11512

if.then5:                                         ; preds = %cond.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11513
  %8 = load i64, i64* %bitsize.addr, align 8, !dbg !11515
  %9 = load i64, i64* %bitpos.addr, align 8, !dbg !11516
  %10 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11517
  call void @store_split_bit_field(%struct.rtx_def* %7, i64 %8, i64 %9, %struct.rtx_def* %10), !dbg !11518
  br label %if.end189, !dbg !11519

if.end:                                           ; preds = %cond.end
  br label %if.end88, !dbg !11520

if.else:                                          ; preds = %lor.lhs.false
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11521
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !11521
  %bf.load6 = load i32, i32* %12, align 8, !dbg !11521
  %bf.lshr = lshr i32 %bf.load6, 16, !dbg !11521
  %bf.clear7 = and i32 %bf.lshr, 255, !dbg !11521
  store i32 %bf.clear7, i32* %mode, align 4, !dbg !11523
  %13 = load i32, i32* %mode, align 4, !dbg !11524
  %idxprom = zext i32 %13 to i64, !dbg !11524
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !11524
  %14 = load i8, i8* %arrayidx, align 1, !dbg !11524
  %conv = zext i8 %14 to i16, !dbg !11524
  %conv8 = zext i16 %conv to i32, !dbg !11524
  %mul = mul nsw i32 %conv8, 8, !dbg !11524
  %conv9 = trunc i32 %mul to i16, !dbg !11524
  %conv10 = zext i16 %conv9 to i32, !dbg !11524
  %cmp11 = icmp eq i32 %conv10, 0, !dbg !11526
  br i1 %cmp11, label %if.then30, label %lor.lhs.false13, !dbg !11527

lor.lhs.false13:                                  ; preds = %if.else
  %15 = load i32, i32* %mode, align 4, !dbg !11528
  %idxprom14 = zext i32 %15 to i64, !dbg !11528
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom14, !dbg !11528
  %16 = load i8, i8* %arrayidx15, align 1, !dbg !11528
  %conv16 = zext i8 %16 to i16, !dbg !11528
  %conv17 = zext i16 %conv16 to i32, !dbg !11528
  %mul18 = mul nsw i32 %conv17, 8, !dbg !11528
  %conv19 = trunc i32 %mul18 to i16, !dbg !11528
  %conv20 = zext i16 %conv19 to i32, !dbg !11528
  %17 = load i32, i32* @word_mode, align 4, !dbg !11529
  %idxprom21 = zext i32 %17 to i64, !dbg !11529
  %arrayidx22 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom21, !dbg !11529
  %18 = load i8, i8* %arrayidx22, align 1, !dbg !11529
  %conv23 = zext i8 %18 to i16, !dbg !11529
  %conv24 = zext i16 %conv23 to i32, !dbg !11529
  %mul25 = mul nsw i32 %conv24, 8, !dbg !11529
  %conv26 = trunc i32 %mul25 to i16, !dbg !11529
  %conv27 = zext i16 %conv26 to i32, !dbg !11529
  %cmp28 = icmp sgt i32 %conv20, %conv27, !dbg !11530
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !11531

if.then30:                                        ; preds = %lor.lhs.false13, %if.else
  %19 = load i32, i32* @word_mode, align 4, !dbg !11532
  store i32 %19, i32* %mode, align 4, !dbg !11533
  br label %if.end31, !dbg !11534

if.end31:                                         ; preds = %if.then30, %lor.lhs.false13
  %20 = load i64, i64* %bitsize.addr, align 8, !dbg !11535
  %conv32 = trunc i64 %20 to i32, !dbg !11535
  %21 = load i64, i64* %bitpos.addr, align 8, !dbg !11536
  %22 = load i64, i64* %offset.addr, align 8, !dbg !11537
  %mul33 = mul i64 %22, 8, !dbg !11538
  %add34 = add i64 %21, %mul33, !dbg !11539
  %conv35 = trunc i64 %add34 to i32, !dbg !11536
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11540
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !11540
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11540
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !11540
  %rt_mem = bitcast %union.rtunion_def* %arrayidx36 to %struct.mem_attrs**, !dbg !11540
  %24 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !11540
  %cmp37 = icmp ne %struct.mem_attrs* %24, null, !dbg !11540
  br i1 %cmp37, label %cond.true39, label %cond.false44, !dbg !11540

cond.true39:                                      ; preds = %if.end31
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11540
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !11540
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !11540
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 1, !dbg !11540
  %rt_mem43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.mem_attrs**, !dbg !11540
  %26 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem43, align 8, !dbg !11540
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %26, i32 0, i32 4, !dbg !11540
  %27 = load i32, i32* %align, align 4, !dbg !11540
  br label %cond.end45, !dbg !11540

cond.false44:                                     ; preds = %if.end31
  br label %cond.end45, !dbg !11540

cond.end45:                                       ; preds = %cond.false44, %cond.true39
  %cond46 = phi i32 [ %27, %cond.true39 ], [ 8, %cond.false44 ], !dbg !11540
  %28 = load i32, i32* %mode, align 4, !dbg !11541
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11542
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !11542
  %bf.load47 = load i32, i32* %30, align 8, !dbg !11542
  %bf.lshr48 = lshr i32 %bf.load47, 27, !dbg !11542
  %bf.clear49 = and i32 %bf.lshr48, 1, !dbg !11542
  %call = call i32 @get_best_mode(i32 %conv32, i32 %conv35, i32 %cond46, i32 %28, i32 %bf.clear49), !dbg !11543
  store i32 %call, i32* %mode, align 4, !dbg !11544
  %31 = load i32, i32* %mode, align 4, !dbg !11545
  %cmp50 = icmp eq i32 %31, 0, !dbg !11547
  br i1 %cmp50, label %if.then52, label %if.end55, !dbg !11548

if.then52:                                        ; preds = %cond.end45
  %32 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11549
  %33 = load i64, i64* %bitsize.addr, align 8, !dbg !11551
  %34 = load i64, i64* %bitpos.addr, align 8, !dbg !11552
  %35 = load i64, i64* %offset.addr, align 8, !dbg !11553
  %mul53 = mul i64 %35, 8, !dbg !11554
  %add54 = add i64 %34, %mul53, !dbg !11555
  %36 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11556
  call void @store_split_bit_field(%struct.rtx_def* %32, i64 %33, i64 %add54, %struct.rtx_def* %36), !dbg !11557
  br label %if.end189, !dbg !11558

if.end55:                                         ; preds = %cond.end45
  %37 = load i32, i32* %mode, align 4, !dbg !11559
  %idxprom56 = zext i32 %37 to i64, !dbg !11559
  %arrayidx57 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom56, !dbg !11559
  %38 = load i8, i8* %arrayidx57, align 1, !dbg !11559
  %conv58 = zext i8 %38 to i16, !dbg !11559
  %conv59 = zext i16 %conv58 to i32, !dbg !11559
  %mul60 = mul nsw i32 %conv59, 8, !dbg !11559
  %conv61 = trunc i32 %mul60 to i16, !dbg !11559
  %conv62 = zext i16 %conv61 to i32, !dbg !11559
  store i32 %conv62, i32* %total_bits, align 4, !dbg !11560
  %39 = load i64, i64* %bitpos.addr, align 8, !dbg !11561
  %40 = load i32, i32* %total_bits, align 4, !dbg !11563
  %conv63 = zext i32 %40 to i64, !dbg !11563
  %cmp64 = icmp uge i64 %39, %conv63, !dbg !11564
  br i1 %cmp64, label %if.then66, label %if.end78, !dbg !11565

if.then66:                                        ; preds = %if.end55
  %41 = load i64, i64* %bitpos.addr, align 8, !dbg !11566
  %42 = load i32, i32* %total_bits, align 4, !dbg !11568
  %conv67 = zext i32 %42 to i64, !dbg !11568
  %div = udiv i64 %41, %conv67, !dbg !11569
  %43 = load i32, i32* %total_bits, align 4, !dbg !11570
  %div68 = udiv i32 %43, 8, !dbg !11571
  %conv69 = zext i32 %div68 to i64, !dbg !11572
  %mul70 = mul i64 %div, %conv69, !dbg !11573
  %44 = load i64, i64* %offset.addr, align 8, !dbg !11574
  %add71 = add i64 %44, %mul70, !dbg !11574
  store i64 %add71, i64* %offset.addr, align 8, !dbg !11574
  %45 = load i64, i64* %bitpos.addr, align 8, !dbg !11575
  %46 = load i32, i32* %total_bits, align 4, !dbg !11576
  %conv72 = zext i32 %46 to i64, !dbg !11576
  %div73 = udiv i64 %45, %conv72, !dbg !11577
  %47 = load i32, i32* %total_bits, align 4, !dbg !11578
  %div74 = udiv i32 %47, 8, !dbg !11579
  %conv75 = zext i32 %div74 to i64, !dbg !11580
  %mul76 = mul i64 %div73, %conv75, !dbg !11581
  %mul77 = mul i64 %mul76, 8, !dbg !11582
  %48 = load i64, i64* %bitpos.addr, align 8, !dbg !11583
  %sub = sub i64 %48, %mul77, !dbg !11583
  store i64 %sub, i64* %bitpos.addr, align 8, !dbg !11583
  br label %if.end78, !dbg !11584

if.end78:                                         ; preds = %if.then66, %if.end55
  %49 = load i64, i64* %offset.addr, align 8, !dbg !11585
  %50 = load i32, i32* %total_bits, align 4, !dbg !11586
  %div79 = udiv i32 %50, 8, !dbg !11587
  %conv80 = zext i32 %div79 to i64, !dbg !11588
  %rem = urem i64 %49, %conv80, !dbg !11589
  %mul81 = mul i64 %rem, 8, !dbg !11590
  %51 = load i64, i64* %bitpos.addr, align 8, !dbg !11591
  %add82 = add i64 %51, %mul81, !dbg !11591
  store i64 %add82, i64* %bitpos.addr, align 8, !dbg !11591
  %52 = load i64, i64* %offset.addr, align 8, !dbg !11592
  %53 = load i32, i32* %total_bits, align 4, !dbg !11593
  %div83 = udiv i32 %53, 8, !dbg !11594
  %conv84 = zext i32 %div83 to i64, !dbg !11595
  %rem85 = urem i64 %52, %conv84, !dbg !11596
  %54 = load i64, i64* %offset.addr, align 8, !dbg !11597
  %sub86 = sub i64 %54, %rem85, !dbg !11597
  store i64 %sub86, i64* %offset.addr, align 8, !dbg !11597
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11598
  %56 = load i32, i32* %mode, align 4, !dbg !11598
  %57 = load i64, i64* %offset.addr, align 8, !dbg !11598
  %call87 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %55, i32 %56, i64 %57, i32 1, i32 1), !dbg !11598
  store %struct.rtx_def* %call87, %struct.rtx_def** %op0.addr, align 8, !dbg !11599
  br label %if.end88

if.end88:                                         ; preds = %if.end78, %if.end
  %58 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11600
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !11600
  %bf.load89 = load i32, i32* %59, align 8, !dbg !11600
  %bf.lshr90 = lshr i32 %bf.load89, 16, !dbg !11600
  %bf.clear91 = and i32 %bf.lshr90, 255, !dbg !11600
  store i32 %bf.clear91, i32* %mode, align 4, !dbg !11601
  %60 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11602
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !11602
  %bf.load92 = load i32, i32* %61, align 8, !dbg !11602
  %bf.clear93 = and i32 %bf.load92, 65535, !dbg !11602
  %cmp94 = icmp eq i32 %bf.clear93, 30, !dbg !11602
  br i1 %cmp94, label %if.then96, label %if.else126, !dbg !11604

if.then96:                                        ; preds = %if.end88
  call void @llvm.dbg.declare(metadata i64* %v, metadata !11605, metadata !DIExpression()), !dbg !11607
  %62 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11608
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !11608
  %hwint = bitcast %union.u* %u97 to [1 x i64]*, !dbg !11608
  %arrayidx98 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !11608
  %63 = load i64, i64* %arrayidx98, align 8, !dbg !11608
  store i64 %63, i64* %v, align 8, !dbg !11607
  %64 = load i64, i64* %bitsize.addr, align 8, !dbg !11609
  %cmp99 = icmp ult i64 %64, 64, !dbg !11611
  br i1 %cmp99, label %if.then101, label %if.end103, !dbg !11612

if.then101:                                       ; preds = %if.then96
  %65 = load i64, i64* %bitsize.addr, align 8, !dbg !11613
  %shl = shl i64 1, %65, !dbg !11614
  %sub102 = sub nsw i64 %shl, 1, !dbg !11615
  %66 = load i64, i64* %v, align 8, !dbg !11616
  %and = and i64 %66, %sub102, !dbg !11616
  store i64 %and, i64* %v, align 8, !dbg !11616
  br label %if.end103, !dbg !11617

if.end103:                                        ; preds = %if.then101, %if.then96
  %67 = load i64, i64* %v, align 8, !dbg !11618
  %cmp104 = icmp eq i64 %67, 0, !dbg !11620
  br i1 %cmp104, label %if.then106, label %if.else107, !dbg !11621

if.then106:                                       ; preds = %if.end103
  store i32 1, i32* %all_zero, align 4, !dbg !11622
  br label %if.end122, !dbg !11623

if.else107:                                       ; preds = %if.end103
  %68 = load i64, i64* %bitsize.addr, align 8, !dbg !11624
  %cmp108 = icmp ult i64 %68, 64, !dbg !11626
  br i1 %cmp108, label %land.lhs.true, label %lor.lhs.false114, !dbg !11627

land.lhs.true:                                    ; preds = %if.else107
  %69 = load i64, i64* %v, align 8, !dbg !11628
  %70 = load i64, i64* %bitsize.addr, align 8, !dbg !11629
  %shl110 = shl i64 1, %70, !dbg !11630
  %sub111 = sub nsw i64 %shl110, 1, !dbg !11631
  %cmp112 = icmp eq i64 %69, %sub111, !dbg !11632
  br i1 %cmp112, label %if.then120, label %lor.lhs.false114, !dbg !11633

lor.lhs.false114:                                 ; preds = %land.lhs.true, %if.else107
  %71 = load i64, i64* %bitsize.addr, align 8, !dbg !11634
  %cmp115 = icmp eq i64 %71, 64, !dbg !11635
  br i1 %cmp115, label %land.lhs.true117, label %if.end121, !dbg !11636

land.lhs.true117:                                 ; preds = %lor.lhs.false114
  %72 = load i64, i64* %v, align 8, !dbg !11637
  %cmp118 = icmp eq i64 %72, -1, !dbg !11638
  br i1 %cmp118, label %if.then120, label %if.end121, !dbg !11639

if.then120:                                       ; preds = %land.lhs.true117, %land.lhs.true
  store i32 1, i32* %all_one, align 4, !dbg !11640
  br label %if.end121, !dbg !11641

if.end121:                                        ; preds = %if.then120, %land.lhs.true117, %lor.lhs.false114
  br label %if.end122

if.end122:                                        ; preds = %if.end121, %if.then106
  %73 = load i32, i32* %mode, align 4, !dbg !11642
  %74 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11643
  %75 = load i64, i64* %bitpos.addr, align 8, !dbg !11644
  %conv123 = trunc i64 %75 to i32, !dbg !11644
  %76 = load i64, i64* %bitsize.addr, align 8, !dbg !11645
  %conv124 = trunc i64 %76 to i32, !dbg !11645
  %call125 = call %struct.rtx_def* @lshift_value(i32 %73, %struct.rtx_def* %74, i32 %conv123, i32 %conv124), !dbg !11646
  store %struct.rtx_def* %call125, %struct.rtx_def** %value.addr, align 8, !dbg !11647
  br label %if.end169, !dbg !11648

if.else126:                                       ; preds = %if.end88
  call void @llvm.dbg.declare(metadata i32* %must_and, metadata !11649, metadata !DIExpression()), !dbg !11651
  %77 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11652
  %78 = bitcast %struct.rtx_def* %77 to i32*, !dbg !11652
  %bf.load127 = load i32, i32* %78, align 8, !dbg !11652
  %bf.lshr128 = lshr i32 %bf.load127, 16, !dbg !11652
  %bf.clear129 = and i32 %bf.lshr128, 255, !dbg !11652
  %idxprom130 = zext i32 %bf.clear129 to i64, !dbg !11652
  %arrayidx131 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom130, !dbg !11652
  %79 = load i8, i8* %arrayidx131, align 1, !dbg !11652
  %conv132 = zext i8 %79 to i16, !dbg !11652
  %conv133 = zext i16 %conv132 to i32, !dbg !11652
  %mul134 = mul nsw i32 %conv133, 8, !dbg !11652
  %conv135 = trunc i32 %mul134 to i16, !dbg !11652
  %conv136 = zext i16 %conv135 to i64, !dbg !11652
  %80 = load i64, i64* %bitsize.addr, align 8, !dbg !11653
  %cmp137 = icmp ne i64 %conv136, %80, !dbg !11654
  br i1 %cmp137, label %land.rhs, label %land.end, !dbg !11655

land.rhs:                                         ; preds = %if.else126
  %81 = load i64, i64* %bitpos.addr, align 8, !dbg !11656
  %82 = load i64, i64* %bitsize.addr, align 8, !dbg !11657
  %add139 = add i64 %81, %82, !dbg !11658
  %83 = load i32, i32* %mode, align 4, !dbg !11659
  %idxprom140 = zext i32 %83 to i64, !dbg !11659
  %arrayidx141 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom140, !dbg !11659
  %84 = load i8, i8* %arrayidx141, align 1, !dbg !11659
  %conv142 = zext i8 %84 to i16, !dbg !11659
  %conv143 = zext i16 %conv142 to i32, !dbg !11659
  %mul144 = mul nsw i32 %conv143, 8, !dbg !11659
  %conv145 = trunc i32 %mul144 to i16, !dbg !11659
  %conv146 = zext i16 %conv145 to i64, !dbg !11659
  %cmp147 = icmp ne i64 %add139, %conv146, !dbg !11660
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else126
  %85 = phi i1 [ false, %if.else126 ], [ %cmp147, %land.rhs ], !dbg !11661
  %land.ext = zext i1 %85 to i32, !dbg !11655
  store i32 %land.ext, i32* %must_and, align 4, !dbg !11651
  %86 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11662
  %87 = bitcast %struct.rtx_def* %86 to i32*, !dbg !11662
  %bf.load149 = load i32, i32* %87, align 8, !dbg !11662
  %bf.lshr150 = lshr i32 %bf.load149, 16, !dbg !11662
  %bf.clear151 = and i32 %bf.lshr150, 255, !dbg !11662
  %88 = load i32, i32* %mode, align 4, !dbg !11664
  %cmp152 = icmp ne i32 %bf.clear151, %88, !dbg !11665
  br i1 %cmp152, label %if.then154, label %if.end156, !dbg !11666

if.then154:                                       ; preds = %land.end
  %89 = load i32, i32* %mode, align 4, !dbg !11667
  %90 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11668
  %call155 = call %struct.rtx_def* @convert_to_mode(i32 %89, %struct.rtx_def* %90, i32 1), !dbg !11669
  store %struct.rtx_def* %call155, %struct.rtx_def** %value.addr, align 8, !dbg !11670
  br label %if.end156, !dbg !11671

if.end156:                                        ; preds = %if.then154, %land.end
  %91 = load i32, i32* %must_and, align 4, !dbg !11672
  %tobool157 = icmp ne i32 %91, 0, !dbg !11672
  br i1 %tobool157, label %if.then158, label %if.end162, !dbg !11674

if.then158:                                       ; preds = %if.end156
  %92 = load i32, i32* %mode, align 4, !dbg !11675
  %93 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11676
  %94 = load i32, i32* %mode, align 4, !dbg !11677
  %95 = load i64, i64* %bitsize.addr, align 8, !dbg !11678
  %conv159 = trunc i64 %95 to i32, !dbg !11678
  %call160 = call %struct.rtx_def* @mask_rtx(i32 %94, i32 0, i32 %conv159, i32 0), !dbg !11679
  %call161 = call %struct.rtx_def* @expand_binop(i32 %92, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %93, %struct.rtx_def* %call160, %struct.rtx_def* null, i32 1, i32 3), !dbg !11680
  store %struct.rtx_def* %call161, %struct.rtx_def** %value.addr, align 8, !dbg !11681
  br label %if.end162, !dbg !11682

if.end162:                                        ; preds = %if.then158, %if.end156
  %96 = load i64, i64* %bitpos.addr, align 8, !dbg !11683
  %cmp163 = icmp ugt i64 %96, 0, !dbg !11685
  br i1 %cmp163, label %if.then165, label %if.end168, !dbg !11686

if.then165:                                       ; preds = %if.end162
  %97 = load i32, i32* %mode, align 4, !dbg !11687
  %98 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11688
  %99 = load i64, i64* %bitpos.addr, align 8, !dbg !11689
  %call166 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %99), !dbg !11690
  %call167 = call %struct.rtx_def* @expand_shift(i32 83, i32 %97, %struct.rtx_def* %98, %union.tree_node* %call166, %struct.rtx_def* null, i32 1), !dbg !11691
  store %struct.rtx_def* %call167, %struct.rtx_def** %value.addr, align 8, !dbg !11692
  br label %if.end168, !dbg !11693

if.end168:                                        ; preds = %if.then165, %if.end162
  br label %if.end169

if.end169:                                        ; preds = %if.end168, %if.end122
  %100 = load i32, i32* %mode, align 4, !dbg !11694
  %101 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11695
  %call170 = call %struct.rtx_def* @force_reg(i32 %100, %struct.rtx_def* %101), !dbg !11696
  store %struct.rtx_def* %call170, %struct.rtx_def** %temp, align 8, !dbg !11697
  %102 = load i32, i32* %all_one, align 4, !dbg !11698
  %tobool171 = icmp ne i32 %102, 0, !dbg !11698
  br i1 %tobool171, label %if.end178, label %if.then172, !dbg !11700

if.then172:                                       ; preds = %if.end169
  %103 = load i32, i32* %mode, align 4, !dbg !11701
  %104 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !11703
  %105 = load i32, i32* %mode, align 4, !dbg !11704
  %106 = load i64, i64* %bitpos.addr, align 8, !dbg !11705
  %conv173 = trunc i64 %106 to i32, !dbg !11705
  %107 = load i64, i64* %bitsize.addr, align 8, !dbg !11706
  %conv174 = trunc i64 %107 to i32, !dbg !11706
  %call175 = call %struct.rtx_def* @mask_rtx(i32 %105, i32 %conv173, i32 %conv174, i32 1), !dbg !11707
  %call176 = call %struct.rtx_def* @expand_binop(i32 %103, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %104, %struct.rtx_def* %call175, %struct.rtx_def* null, i32 1, i32 3), !dbg !11708
  store %struct.rtx_def* %call176, %struct.rtx_def** %temp, align 8, !dbg !11709
  %108 = load i32, i32* %mode, align 4, !dbg !11710
  %109 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !11711
  %call177 = call %struct.rtx_def* @force_reg(i32 %108, %struct.rtx_def* %109), !dbg !11712
  store %struct.rtx_def* %call177, %struct.rtx_def** %temp, align 8, !dbg !11713
  br label %if.end178, !dbg !11714

if.end178:                                        ; preds = %if.then172, %if.end169
  %110 = load i32, i32* %all_zero, align 4, !dbg !11715
  %tobool179 = icmp ne i32 %110, 0, !dbg !11715
  br i1 %tobool179, label %if.end183, label %if.then180, !dbg !11717

if.then180:                                       ; preds = %if.end178
  %111 = load i32, i32* %mode, align 4, !dbg !11718
  %112 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !11720
  %113 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11721
  %call181 = call %struct.rtx_def* @expand_binop(i32 %111, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %112, %struct.rtx_def* %113, %struct.rtx_def* null, i32 1, i32 3), !dbg !11722
  store %struct.rtx_def* %call181, %struct.rtx_def** %temp, align 8, !dbg !11723
  %114 = load i32, i32* %mode, align 4, !dbg !11724
  %115 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !11725
  %call182 = call %struct.rtx_def* @force_reg(i32 %114, %struct.rtx_def* %115), !dbg !11726
  store %struct.rtx_def* %call182, %struct.rtx_def** %temp, align 8, !dbg !11727
  br label %if.end183, !dbg !11728

if.end183:                                        ; preds = %if.then180, %if.end178
  %116 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11729
  %117 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !11731
  %cmp184 = icmp ne %struct.rtx_def* %116, %117, !dbg !11732
  br i1 %cmp184, label %if.then186, label %if.end189, !dbg !11733

if.then186:                                       ; preds = %if.end183
  %118 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11734
  %call187 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %118), !dbg !11736
  store %struct.rtx_def* %call187, %struct.rtx_def** %op0.addr, align 8, !dbg !11737
  %119 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11738
  %120 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !11739
  %call188 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %119, %struct.rtx_def* %120), !dbg !11740
  br label %if.end189, !dbg !11741

if.end189:                                        ; preds = %if.then5, %if.then52, %if.then186, %if.end183
  ret void, !dbg !11742
}

; Function Attrs: noinline nounwind uwtable
define internal void @store_split_bit_field(%struct.rtx_def* %op0, i64 %bitsize, i64 %bitpos, %struct.rtx_def* %value) #0 !dbg !11743 {
entry:
  %op0.addr = alloca %struct.rtx_def*, align 8
  %bitsize.addr = alloca i64, align 8
  %bitpos.addr = alloca i64, align 8
  %value.addr = alloca %struct.rtx_def*, align 8
  %unit = alloca i32, align 4
  %bitsdone = alloca i32, align 4
  %word = alloca %struct.rtx_def*, align 8
  %thissize = alloca i64, align 8
  %part = alloca %struct.rtx_def*, align 8
  %word56 = alloca %struct.rtx_def*, align 8
  %thispos = alloca i64, align 8
  %offset = alloca i64, align 8
  %word_offset = alloca i32, align 4
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !11746, metadata !DIExpression()), !dbg !11747
  store i64 %bitsize, i64* %bitsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitsize.addr, metadata !11748, metadata !DIExpression()), !dbg !11749
  store i64 %bitpos, i64* %bitpos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitpos.addr, metadata !11750, metadata !DIExpression()), !dbg !11751
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value.addr, metadata !11752, metadata !DIExpression()), !dbg !11753
  call void @llvm.dbg.declare(metadata i32* %unit, metadata !11754, metadata !DIExpression()), !dbg !11755
  call void @llvm.dbg.declare(metadata i32* %bitsdone, metadata !11756, metadata !DIExpression()), !dbg !11757
  store i32 0, i32* %bitsdone, align 4, !dbg !11757
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11758
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !11758
  %bf.load = load i32, i32* %1, align 8, !dbg !11758
  %bf.clear = and i32 %bf.load, 65535, !dbg !11758
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !11758
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !11760

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11761
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !11761
  %bf.load1 = load i32, i32* %3, align 8, !dbg !11761
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !11761
  %cmp3 = icmp eq i32 %bf.clear2, 39, !dbg !11762
  br i1 %cmp3, label %if.then, label %if.else, !dbg !11763

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 32, i32* %unit, align 4, !dbg !11764
  br label %if.end, !dbg !11765

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11766
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !11766
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11766
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !11766
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !11766
  %5 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !11766
  %cmp4 = icmp ne %struct.mem_attrs* %5, null, !dbg !11766
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !11766

cond.true:                                        ; preds = %if.else
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11766
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !11766
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !11766
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !11766
  %rt_mem8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.mem_attrs**, !dbg !11766
  %7 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem8, align 8, !dbg !11766
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %7, i32 0, i32 4, !dbg !11766
  %8 = load i32, i32* %align, align 4, !dbg !11766
  br label %cond.end, !dbg !11766

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !11766

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %8, %cond.true ], [ 8, %cond.false ], !dbg !11766
  %cmp9 = icmp ult i32 %cond, 32, !dbg !11766
  br i1 %cmp9, label %cond.true10, label %cond.false25, !dbg !11766

cond.true10:                                      ; preds = %cond.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11766
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !11766
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !11766
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 1, !dbg !11766
  %rt_mem14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.mem_attrs**, !dbg !11766
  %10 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem14, align 8, !dbg !11766
  %cmp15 = icmp ne %struct.mem_attrs* %10, null, !dbg !11766
  br i1 %cmp15, label %cond.true16, label %cond.false22, !dbg !11766

cond.true16:                                      ; preds = %cond.true10
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11766
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !11766
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !11766
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 1, !dbg !11766
  %rt_mem20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.mem_attrs**, !dbg !11766
  %12 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem20, align 8, !dbg !11766
  %align21 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %12, i32 0, i32 4, !dbg !11766
  %13 = load i32, i32* %align21, align 4, !dbg !11766
  br label %cond.end23, !dbg !11766

cond.false22:                                     ; preds = %cond.true10
  br label %cond.end23, !dbg !11766

cond.end23:                                       ; preds = %cond.false22, %cond.true16
  %cond24 = phi i32 [ %13, %cond.true16 ], [ 8, %cond.false22 ], !dbg !11766
  br label %cond.end26, !dbg !11766

cond.false25:                                     ; preds = %cond.end
  br label %cond.end26, !dbg !11766

cond.end26:                                       ; preds = %cond.false25, %cond.end23
  %cond27 = phi i32 [ %cond24, %cond.end23 ], [ 32, %cond.false25 ], !dbg !11766
  store i32 %cond27, i32* %unit, align 4, !dbg !11767
  br label %if.end

if.end:                                           ; preds = %cond.end26, %if.then
  %14 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11768
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !11768
  %bf.load28 = load i32, i32* %15, align 8, !dbg !11768
  %bf.clear29 = and i32 %bf.load28, 65535, !dbg !11768
  %idxprom = sext i32 %bf.clear29 to i64, !dbg !11768
  %arrayidx30 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !11768
  %16 = load i32, i32* %arrayidx30, align 4, !dbg !11768
  %cmp31 = icmp eq i32 %16, 9, !dbg !11768
  br i1 %cmp31, label %land.lhs.true, label %if.end53, !dbg !11770

land.lhs.true:                                    ; preds = %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11771
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !11771
  %bf.load32 = load i32, i32* %18, align 8, !dbg !11771
  %bf.clear33 = and i32 %bf.load32, 65535, !dbg !11771
  %cmp34 = icmp eq i32 %bf.clear33, 30, !dbg !11771
  br i1 %cmp34, label %if.end53, label %if.then35, !dbg !11772

if.then35:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %word, metadata !11773, metadata !DIExpression()), !dbg !11775
  %19 = load i32, i32* @word_mode, align 4, !dbg !11776
  %20 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11777
  %call = call %struct.rtx_def* @gen_lowpart_common(i32 %19, %struct.rtx_def* %20), !dbg !11778
  store %struct.rtx_def* %call, %struct.rtx_def** %word, align 8, !dbg !11775
  %21 = load %struct.rtx_def*, %struct.rtx_def** %word, align 8, !dbg !11779
  %tobool = icmp ne %struct.rtx_def* %21, null, !dbg !11779
  br i1 %tobool, label %land.lhs.true36, label %if.else39, !dbg !11781

land.lhs.true36:                                  ; preds = %if.then35
  %22 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11782
  %23 = load %struct.rtx_def*, %struct.rtx_def** %word, align 8, !dbg !11783
  %cmp37 = icmp ne %struct.rtx_def* %22, %23, !dbg !11784
  br i1 %cmp37, label %if.then38, label %if.else39, !dbg !11785

if.then38:                                        ; preds = %land.lhs.true36
  %24 = load %struct.rtx_def*, %struct.rtx_def** %word, align 8, !dbg !11786
  store %struct.rtx_def* %24, %struct.rtx_def** %value.addr, align 8, !dbg !11787
  br label %if.end52, !dbg !11788

if.else39:                                        ; preds = %land.lhs.true36, %if.then35
  %25 = load i32, i32* @word_mode, align 4, !dbg !11789
  %26 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11790
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !11790
  %bf.load40 = load i32, i32* %27, align 8, !dbg !11790
  %bf.lshr = lshr i32 %bf.load40, 16, !dbg !11790
  %bf.clear41 = and i32 %bf.lshr, 255, !dbg !11790
  %cmp42 = icmp ne i32 %bf.clear41, 0, !dbg !11791
  br i1 %cmp42, label %cond.true43, label %cond.false47, !dbg !11790

cond.true43:                                      ; preds = %if.else39
  %28 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11792
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !11792
  %bf.load44 = load i32, i32* %29, align 8, !dbg !11792
  %bf.lshr45 = lshr i32 %bf.load44, 16, !dbg !11792
  %bf.clear46 = and i32 %bf.lshr45, 255, !dbg !11792
  br label %cond.end48, !dbg !11790

cond.false47:                                     ; preds = %if.else39
  %30 = load i32, i32* @word_mode, align 4, !dbg !11793
  br label %cond.end48, !dbg !11790

cond.end48:                                       ; preds = %cond.false47, %cond.true43
  %cond49 = phi i32 [ %bf.clear46, %cond.true43 ], [ %30, %cond.false47 ], !dbg !11790
  %31 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11794
  %call50 = call %struct.rtx_def* @force_reg(i32 %cond49, %struct.rtx_def* %31), !dbg !11795
  %call51 = call %struct.rtx_def* @gen_lowpart_common(i32 %25, %struct.rtx_def* %call50), !dbg !11796
  store %struct.rtx_def* %call51, %struct.rtx_def** %value.addr, align 8, !dbg !11797
  br label %if.end52

if.end52:                                         ; preds = %cond.end48, %if.then38
  br label %if.end53, !dbg !11798

if.end53:                                         ; preds = %if.end52, %land.lhs.true, %if.end
  br label %while.cond, !dbg !11799

while.cond:                                       ; preds = %if.end130, %if.end53
  %32 = load i32, i32* %bitsdone, align 4, !dbg !11800
  %conv = zext i32 %32 to i64, !dbg !11800
  %33 = load i64, i64* %bitsize.addr, align 8, !dbg !11801
  %cmp54 = icmp ult i64 %conv, %33, !dbg !11802
  br i1 %cmp54, label %while.body, label %while.end, !dbg !11799

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i64* %thissize, metadata !11803, metadata !DIExpression()), !dbg !11805
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %part, metadata !11806, metadata !DIExpression()), !dbg !11807
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %word56, metadata !11808, metadata !DIExpression()), !dbg !11809
  call void @llvm.dbg.declare(metadata i64* %thispos, metadata !11810, metadata !DIExpression()), !dbg !11811
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !11812, metadata !DIExpression()), !dbg !11813
  %34 = load i64, i64* %bitpos.addr, align 8, !dbg !11814
  %35 = load i32, i32* %bitsdone, align 4, !dbg !11815
  %conv57 = zext i32 %35 to i64, !dbg !11815
  %add = add i64 %34, %conv57, !dbg !11816
  %36 = load i32, i32* %unit, align 4, !dbg !11817
  %conv58 = zext i32 %36 to i64, !dbg !11817
  %div = udiv i64 %add, %conv58, !dbg !11818
  store i64 %div, i64* %offset, align 8, !dbg !11819
  %37 = load i64, i64* %bitpos.addr, align 8, !dbg !11820
  %38 = load i32, i32* %bitsdone, align 4, !dbg !11821
  %conv59 = zext i32 %38 to i64, !dbg !11821
  %add60 = add i64 %37, %conv59, !dbg !11822
  %39 = load i32, i32* %unit, align 4, !dbg !11823
  %conv61 = zext i32 %39 to i64, !dbg !11823
  %rem = urem i64 %add60, %conv61, !dbg !11824
  store i64 %rem, i64* %thispos, align 8, !dbg !11825
  %40 = load i64, i64* %bitsize.addr, align 8, !dbg !11826
  %41 = load i32, i32* %bitsdone, align 4, !dbg !11826
  %conv62 = zext i32 %41 to i64, !dbg !11826
  %sub = sub i64 %40, %conv62, !dbg !11826
  %cmp63 = icmp ult i64 %sub, 32, !dbg !11826
  br i1 %cmp63, label %cond.true65, label %cond.false68, !dbg !11826

cond.true65:                                      ; preds = %while.body
  %42 = load i64, i64* %bitsize.addr, align 8, !dbg !11826
  %43 = load i32, i32* %bitsdone, align 4, !dbg !11826
  %conv66 = zext i32 %43 to i64, !dbg !11826
  %sub67 = sub i64 %42, %conv66, !dbg !11826
  br label %cond.end69, !dbg !11826

cond.false68:                                     ; preds = %while.body
  br label %cond.end69, !dbg !11826

cond.end69:                                       ; preds = %cond.false68, %cond.true65
  %cond70 = phi i64 [ %sub67, %cond.true65 ], [ 32, %cond.false68 ], !dbg !11826
  store i64 %cond70, i64* %thissize, align 8, !dbg !11827
  %44 = load i64, i64* %thissize, align 8, !dbg !11828
  %45 = load i32, i32* %unit, align 4, !dbg !11828
  %conv71 = zext i32 %45 to i64, !dbg !11828
  %46 = load i64, i64* %thispos, align 8, !dbg !11828
  %sub72 = sub i64 %conv71, %46, !dbg !11828
  %cmp73 = icmp ult i64 %44, %sub72, !dbg !11828
  br i1 %cmp73, label %cond.true75, label %cond.false76, !dbg !11828

cond.true75:                                      ; preds = %cond.end69
  %47 = load i64, i64* %thissize, align 8, !dbg !11828
  br label %cond.end79, !dbg !11828

cond.false76:                                     ; preds = %cond.end69
  %48 = load i32, i32* %unit, align 4, !dbg !11828
  %conv77 = zext i32 %48 to i64, !dbg !11828
  %49 = load i64, i64* %thispos, align 8, !dbg !11828
  %sub78 = sub i64 %conv77, %49, !dbg !11828
  br label %cond.end79, !dbg !11828

cond.end79:                                       ; preds = %cond.false76, %cond.true75
  %cond80 = phi i64 [ %47, %cond.true75 ], [ %sub78, %cond.false76 ], !dbg !11828
  store i64 %cond80, i64* %thissize, align 8, !dbg !11829
  %50 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11830
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !11830
  %bf.load81 = load i32, i32* %51, align 8, !dbg !11830
  %bf.clear82 = and i32 %bf.load81, 65535, !dbg !11830
  %cmp83 = icmp eq i32 %bf.clear82, 30, !dbg !11830
  br i1 %cmp83, label %if.then85, label %if.else90, !dbg !11834

if.then85:                                        ; preds = %cond.end79
  %52 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11835
  %u86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !11835
  %hwint = bitcast %union.u* %u86 to [1 x i64]*, !dbg !11835
  %arrayidx87 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !11835
  %53 = load i64, i64* %arrayidx87, align 8, !dbg !11835
  %54 = load i32, i32* %bitsdone, align 4, !dbg !11835
  %sh_prom = zext i32 %54 to i64, !dbg !11835
  %shr = lshr i64 %53, %sh_prom, !dbg !11835
  %55 = load i64, i64* %thissize, align 8, !dbg !11835
  %shl = shl i64 1, %55, !dbg !11835
  %sub88 = sub nsw i64 %shl, 1, !dbg !11835
  %and = and i64 %shr, %sub88, !dbg !11835
  %call89 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %and), !dbg !11835
  store %struct.rtx_def* %call89, %struct.rtx_def** %part, align 8, !dbg !11836
  br label %if.end93, !dbg !11837

if.else90:                                        ; preds = %cond.end79
  %56 = load i32, i32* @word_mode, align 4, !dbg !11838
  %57 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11839
  %58 = load i64, i64* %thissize, align 8, !dbg !11840
  %59 = load i32, i32* %bitsdone, align 4, !dbg !11841
  %conv91 = zext i32 %59 to i64, !dbg !11841
  %call92 = call %struct.rtx_def* @extract_fixed_bit_field(i32 %56, %struct.rtx_def* %57, i64 0, i64 %58, i64 %conv91, %struct.rtx_def* null, i32 1), !dbg !11842
  store %struct.rtx_def* %call92, %struct.rtx_def** %part, align 8, !dbg !11843
  br label %if.end93

if.end93:                                         ; preds = %if.else90, %if.then85
  %60 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11844
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !11844
  %bf.load94 = load i32, i32* %61, align 8, !dbg !11844
  %bf.clear95 = and i32 %bf.load94, 65535, !dbg !11844
  %cmp96 = icmp eq i32 %bf.clear95, 39, !dbg !11846
  br i1 %cmp96, label %if.then98, label %if.else117, !dbg !11847

if.then98:                                        ; preds = %if.end93
  call void @llvm.dbg.declare(metadata i32* %word_offset, metadata !11848, metadata !DIExpression()), !dbg !11850
  %62 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11851
  %u99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !11851
  %fld100 = bitcast %union.u* %u99 to [1 x %union.rtunion_def]*, !dbg !11851
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i64 0, i64 1, !dbg !11851
  %rt_uint = bitcast %union.rtunion_def* %arrayidx101 to i32*, !dbg !11851
  %63 = load i32, i32* %rt_uint, align 8, !dbg !11851
  %div102 = udiv i32 %63, 4, !dbg !11852
  %conv103 = zext i32 %div102 to i64, !dbg !11853
  %64 = load i64, i64* %offset, align 8, !dbg !11854
  %add104 = add i64 %conv103, %64, !dbg !11855
  %conv105 = trunc i64 %add104 to i32, !dbg !11853
  store i32 %conv105, i32* %word_offset, align 4, !dbg !11850
  %65 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11856
  %u106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !11856
  %fld107 = bitcast %union.u* %u106 to [1 x %union.rtunion_def]*, !dbg !11856
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i64 0, i64 0, !dbg !11856
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**, !dbg !11856
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11856
  %67 = load i32, i32* %word_offset, align 4, !dbg !11857
  %68 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11858
  %u109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !11858
  %fld110 = bitcast %union.u* %u109 to [1 x %union.rtunion_def]*, !dbg !11858
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i64 0, i64 0, !dbg !11858
  %rt_rtx112 = bitcast %union.rtunion_def* %arrayidx111 to %struct.rtx_def**, !dbg !11858
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx112, align 8, !dbg !11858
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !11858
  %bf.load113 = load i32, i32* %70, align 8, !dbg !11858
  %bf.lshr114 = lshr i32 %bf.load113, 16, !dbg !11858
  %bf.clear115 = and i32 %bf.lshr114, 255, !dbg !11858
  %call116 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %66, i32 %67, i32 %bf.clear115), !dbg !11859
  store %struct.rtx_def* %call116, %struct.rtx_def** %word56, align 8, !dbg !11860
  store i64 0, i64* %offset, align 8, !dbg !11861
  br label %if.end130, !dbg !11862

if.else117:                                       ; preds = %if.end93
  %71 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11863
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !11863
  %bf.load118 = load i32, i32* %72, align 8, !dbg !11863
  %bf.clear119 = and i32 %bf.load118, 65535, !dbg !11863
  %cmp120 = icmp eq i32 %bf.clear119, 37, !dbg !11863
  br i1 %cmp120, label %if.then122, label %if.else128, !dbg !11865

if.then122:                                       ; preds = %if.else117
  %73 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11866
  %74 = load i64, i64* %offset, align 8, !dbg !11868
  %conv123 = trunc i64 %74 to i32, !dbg !11868
  %75 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11869
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !11869
  %bf.load124 = load i32, i32* %76, align 8, !dbg !11869
  %bf.lshr125 = lshr i32 %bf.load124, 16, !dbg !11869
  %bf.clear126 = and i32 %bf.lshr125, 255, !dbg !11869
  %call127 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %73, i32 %conv123, i32 %bf.clear126), !dbg !11870
  store %struct.rtx_def* %call127, %struct.rtx_def** %word56, align 8, !dbg !11871
  store i64 0, i64* %offset, align 8, !dbg !11872
  br label %if.end129, !dbg !11873

if.else128:                                       ; preds = %if.else117
  %77 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11874
  store %struct.rtx_def* %77, %struct.rtx_def** %word56, align 8, !dbg !11875
  br label %if.end129

if.end129:                                        ; preds = %if.else128, %if.then122
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.then98
  %78 = load %struct.rtx_def*, %struct.rtx_def** %word56, align 8, !dbg !11876
  %79 = load i64, i64* %offset, align 8, !dbg !11877
  %80 = load i32, i32* %unit, align 4, !dbg !11878
  %conv131 = zext i32 %80 to i64, !dbg !11878
  %mul = mul i64 %79, %conv131, !dbg !11879
  %div132 = udiv i64 %mul, 8, !dbg !11880
  %81 = load i64, i64* %thissize, align 8, !dbg !11881
  %82 = load i64, i64* %thispos, align 8, !dbg !11882
  %83 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8, !dbg !11883
  call void @store_fixed_bit_field(%struct.rtx_def* %78, i64 %div132, i64 %81, i64 %82, %struct.rtx_def* %83), !dbg !11884
  %84 = load i64, i64* %thissize, align 8, !dbg !11885
  %85 = load i32, i32* %bitsdone, align 4, !dbg !11886
  %conv133 = zext i32 %85 to i64, !dbg !11886
  %add134 = add i64 %conv133, %84, !dbg !11886
  %conv135 = trunc i64 %add134 to i32, !dbg !11886
  store i32 %conv135, i32* %bitsdone, align 4, !dbg !11886
  br label %while.cond, !dbg !11799, !llvm.loop !11887

while.end:                                        ; preds = %while.cond
  ret void, !dbg !11889
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @lshift_value(i32 %mode, %struct.rtx_def* %value, i32 %bitpos, i32 %bitsize) #0 !dbg !11890 {
entry:
  %mode.addr = alloca i32, align 4
  %value.addr = alloca %struct.rtx_def*, align 8
  %bitpos.addr = alloca i32, align 4
  %bitsize.addr = alloca i32, align 4
  %v = alloca i64, align 8
  %low = alloca i64, align 8
  %high = alloca i64, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11893, metadata !DIExpression()), !dbg !11894
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value.addr, metadata !11895, metadata !DIExpression()), !dbg !11896
  store i32 %bitpos, i32* %bitpos.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitpos.addr, metadata !11897, metadata !DIExpression()), !dbg !11898
  store i32 %bitsize, i32* %bitsize.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitsize.addr, metadata !11899, metadata !DIExpression()), !dbg !11900
  call void @llvm.dbg.declare(metadata i64* %v, metadata !11901, metadata !DIExpression()), !dbg !11902
  %0 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !11903
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !11903
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !11903
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !11903
  %1 = load i64, i64* %arrayidx, align 8, !dbg !11903
  store i64 %1, i64* %v, align 8, !dbg !11902
  call void @llvm.dbg.declare(metadata i64* %low, metadata !11904, metadata !DIExpression()), !dbg !11905
  call void @llvm.dbg.declare(metadata i64* %high, metadata !11906, metadata !DIExpression()), !dbg !11907
  %2 = load i32, i32* %bitsize.addr, align 4, !dbg !11908
  %cmp = icmp slt i32 %2, 64, !dbg !11910
  br i1 %cmp, label %if.then, label %if.end, !dbg !11911

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bitsize.addr, align 4, !dbg !11912
  %sh_prom = zext i32 %3 to i64, !dbg !11913
  %shl = shl i64 -1, %sh_prom, !dbg !11913
  %neg = xor i64 %shl, -1, !dbg !11914
  %4 = load i64, i64* %v, align 8, !dbg !11915
  %and = and i64 %4, %neg, !dbg !11915
  store i64 %and, i64* %v, align 8, !dbg !11915
  br label %if.end, !dbg !11916

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %bitpos.addr, align 4, !dbg !11917
  %cmp1 = icmp slt i32 %5, 64, !dbg !11919
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !11920

if.then2:                                         ; preds = %if.end
  %6 = load i64, i64* %v, align 8, !dbg !11921
  %7 = load i32, i32* %bitpos.addr, align 4, !dbg !11923
  %sh_prom3 = zext i32 %7 to i64, !dbg !11924
  %shl4 = shl i64 %6, %sh_prom3, !dbg !11924
  store i64 %shl4, i64* %low, align 8, !dbg !11925
  %8 = load i32, i32* %bitpos.addr, align 4, !dbg !11926
  %cmp5 = icmp sgt i32 %8, 0, !dbg !11927
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !11926

cond.true:                                        ; preds = %if.then2
  %9 = load i64, i64* %v, align 8, !dbg !11928
  %10 = load i32, i32* %bitpos.addr, align 4, !dbg !11929
  %sub = sub nsw i32 64, %10, !dbg !11930
  %sh_prom6 = zext i32 %sub to i64, !dbg !11931
  %shr = lshr i64 %9, %sh_prom6, !dbg !11931
  br label %cond.end, !dbg !11926

cond.false:                                       ; preds = %if.then2
  br label %cond.end, !dbg !11926

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %shr, %cond.true ], [ 0, %cond.false ], !dbg !11926
  store i64 %cond, i64* %high, align 8, !dbg !11932
  br label %if.end10, !dbg !11933

if.else:                                          ; preds = %if.end
  store i64 0, i64* %low, align 8, !dbg !11934
  %11 = load i64, i64* %v, align 8, !dbg !11936
  %12 = load i32, i32* %bitpos.addr, align 4, !dbg !11937
  %sub7 = sub nsw i32 %12, 64, !dbg !11938
  %sh_prom8 = zext i32 %sub7 to i64, !dbg !11939
  %shl9 = shl i64 %11, %sh_prom8, !dbg !11939
  store i64 %shl9, i64* %high, align 8, !dbg !11940
  br label %if.end10

if.end10:                                         ; preds = %if.else, %cond.end
  %13 = load i64, i64* %low, align 8, !dbg !11941
  %14 = load i64, i64* %high, align 8, !dbg !11942
  %15 = load i32, i32* %mode.addr, align 4, !dbg !11943
  %call = call %struct.rtx_def* @immed_double_const(i64 %13, i64 %14, i32 %15), !dbg !11944
  ret %struct.rtx_def* %call, !dbg !11945
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @mask_rtx(i32 %mode, i32 %bitpos, i32 %bitsize, i32 %complement) #0 !dbg !11946 {
entry:
  %mode.addr = alloca i32, align 4
  %bitpos.addr = alloca i32, align 4
  %bitsize.addr = alloca i32, align 4
  %complement.addr = alloca i32, align 4
  %masklow = alloca i64, align 8
  %maskhigh = alloca i64, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11949, metadata !DIExpression()), !dbg !11950
  store i32 %bitpos, i32* %bitpos.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitpos.addr, metadata !11951, metadata !DIExpression()), !dbg !11952
  store i32 %bitsize, i32* %bitsize.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitsize.addr, metadata !11953, metadata !DIExpression()), !dbg !11954
  store i32 %complement, i32* %complement.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %complement.addr, metadata !11955, metadata !DIExpression()), !dbg !11956
  call void @llvm.dbg.declare(metadata i64* %masklow, metadata !11957, metadata !DIExpression()), !dbg !11958
  call void @llvm.dbg.declare(metadata i64* %maskhigh, metadata !11959, metadata !DIExpression()), !dbg !11960
  %0 = load i32, i32* %bitsize.addr, align 4, !dbg !11961
  %cmp = icmp eq i32 %0, 0, !dbg !11963
  br i1 %cmp, label %if.then, label %if.else, !dbg !11964

if.then:                                          ; preds = %entry
  store i64 0, i64* %masklow, align 8, !dbg !11965
  br label %if.end4, !dbg !11966

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %bitpos.addr, align 4, !dbg !11967
  %cmp1 = icmp slt i32 %1, 64, !dbg !11969
  br i1 %cmp1, label %if.then2, label %if.else3, !dbg !11970

if.then2:                                         ; preds = %if.else
  %2 = load i32, i32* %bitpos.addr, align 4, !dbg !11971
  %sh_prom = zext i32 %2 to i64, !dbg !11972
  %shl = shl i64 -1, %sh_prom, !dbg !11972
  store i64 %shl, i64* %masklow, align 8, !dbg !11973
  br label %if.end, !dbg !11974

if.else3:                                         ; preds = %if.else
  store i64 0, i64* %masklow, align 8, !dbg !11975
  br label %if.end

if.end:                                           ; preds = %if.else3, %if.then2
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  %3 = load i32, i32* %bitpos.addr, align 4, !dbg !11976
  %4 = load i32, i32* %bitsize.addr, align 4, !dbg !11978
  %add = add nsw i32 %3, %4, !dbg !11979
  %cmp5 = icmp slt i32 %add, 64, !dbg !11980
  br i1 %cmp5, label %if.then6, label %if.end9, !dbg !11981

if.then6:                                         ; preds = %if.end4
  %5 = load i32, i32* %bitpos.addr, align 4, !dbg !11982
  %sub = sub nsw i32 64, %5, !dbg !11983
  %6 = load i32, i32* %bitsize.addr, align 4, !dbg !11984
  %sub7 = sub nsw i32 %sub, %6, !dbg !11985
  %sh_prom8 = zext i32 %sub7 to i64, !dbg !11986
  %shr = lshr i64 -1, %sh_prom8, !dbg !11986
  %7 = load i64, i64* %masklow, align 8, !dbg !11987
  %and = and i64 %7, %shr, !dbg !11987
  store i64 %and, i64* %masklow, align 8, !dbg !11987
  br label %if.end9, !dbg !11988

if.end9:                                          ; preds = %if.then6, %if.end4
  %8 = load i32, i32* %bitpos.addr, align 4, !dbg !11989
  %cmp10 = icmp sle i32 %8, 64, !dbg !11991
  br i1 %cmp10, label %if.then11, label %if.else12, !dbg !11992

if.then11:                                        ; preds = %if.end9
  store i64 -1, i64* %maskhigh, align 8, !dbg !11993
  br label %if.end16, !dbg !11994

if.else12:                                        ; preds = %if.end9
  %9 = load i32, i32* %bitpos.addr, align 4, !dbg !11995
  %sub13 = sub nsw i32 %9, 64, !dbg !11996
  %sh_prom14 = zext i32 %sub13 to i64, !dbg !11997
  %shl15 = shl i64 -1, %sh_prom14, !dbg !11997
  store i64 %shl15, i64* %maskhigh, align 8, !dbg !11998
  br label %if.end16

if.end16:                                         ; preds = %if.else12, %if.then11
  %10 = load i32, i32* %bitsize.addr, align 4, !dbg !11999
  %cmp17 = icmp eq i32 %10, 0, !dbg !12001
  br i1 %cmp17, label %if.then18, label %if.else19, !dbg !12002

if.then18:                                        ; preds = %if.end16
  store i64 0, i64* %maskhigh, align 8, !dbg !12003
  br label %if.end30, !dbg !12004

if.else19:                                        ; preds = %if.end16
  %11 = load i32, i32* %bitpos.addr, align 4, !dbg !12005
  %12 = load i32, i32* %bitsize.addr, align 4, !dbg !12007
  %add20 = add nsw i32 %11, %12, !dbg !12008
  %cmp21 = icmp sgt i32 %add20, 64, !dbg !12009
  br i1 %cmp21, label %if.then22, label %if.else28, !dbg !12010

if.then22:                                        ; preds = %if.else19
  %13 = load i32, i32* %bitpos.addr, align 4, !dbg !12011
  %sub23 = sub nsw i32 128, %13, !dbg !12012
  %14 = load i32, i32* %bitsize.addr, align 4, !dbg !12013
  %sub24 = sub nsw i32 %sub23, %14, !dbg !12014
  %sh_prom25 = zext i32 %sub24 to i64, !dbg !12015
  %shr26 = lshr i64 -1, %sh_prom25, !dbg !12015
  %15 = load i64, i64* %maskhigh, align 8, !dbg !12016
  %and27 = and i64 %15, %shr26, !dbg !12016
  store i64 %and27, i64* %maskhigh, align 8, !dbg !12016
  br label %if.end29, !dbg !12017

if.else28:                                        ; preds = %if.else19
  store i64 0, i64* %maskhigh, align 8, !dbg !12018
  br label %if.end29

if.end29:                                         ; preds = %if.else28, %if.then22
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then18
  %16 = load i32, i32* %complement.addr, align 4, !dbg !12019
  %tobool = icmp ne i32 %16, 0, !dbg !12019
  br i1 %tobool, label %if.then31, label %if.end33, !dbg !12021

if.then31:                                        ; preds = %if.end30
  %17 = load i64, i64* %maskhigh, align 8, !dbg !12022
  %neg = xor i64 %17, -1, !dbg !12024
  store i64 %neg, i64* %maskhigh, align 8, !dbg !12025
  %18 = load i64, i64* %masklow, align 8, !dbg !12026
  %neg32 = xor i64 %18, -1, !dbg !12027
  store i64 %neg32, i64* %masklow, align 8, !dbg !12028
  br label %if.end33, !dbg !12029

if.end33:                                         ; preds = %if.then31, %if.end30
  %19 = load i64, i64* %masklow, align 8, !dbg !12030
  %20 = load i64, i64* %maskhigh, align 8, !dbg !12031
  %21 = load i32, i32* %mode.addr, align 4, !dbg !12032
  %call = call %struct.rtx_def* @immed_double_const(i64 %19, i64 %20, i32 %21), !dbg !12033
  ret %struct.rtx_def* %call, !dbg !12034
}

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @extract_fixed_bit_field(i32 %tmode, %struct.rtx_def* %op0, i64 %offset, i64 %bitsize, i64 %bitpos, %struct.rtx_def* %target, i32 %unsignedp) #0 !dbg !12035 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %tmode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca i64, align 8
  %bitsize.addr = alloca i64, align 8
  %bitpos.addr = alloca i64, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %total_bits = alloca i32, align 4
  %mode = alloca i32, align 4
  %amount = alloca %union.tree_node*, align 8
  %subtarget = alloca %struct.rtx_def*, align 8
  %amount141 = alloca %union.tree_node*, align 8
  %subtarget152 = alloca %struct.rtx_def*, align 8
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !12038, metadata !DIExpression()), !dbg !12039
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !12040, metadata !DIExpression()), !dbg !12041
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !12042, metadata !DIExpression()), !dbg !12043
  store i64 %bitsize, i64* %bitsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitsize.addr, metadata !12044, metadata !DIExpression()), !dbg !12045
  store i64 %bitpos, i64* %bitpos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitpos.addr, metadata !12046, metadata !DIExpression()), !dbg !12047
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !12048, metadata !DIExpression()), !dbg !12049
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !12050, metadata !DIExpression()), !dbg !12051
  call void @llvm.dbg.declare(metadata i32* %total_bits, metadata !12052, metadata !DIExpression()), !dbg !12053
  store i32 32, i32* %total_bits, align 4, !dbg !12053
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !12054, metadata !DIExpression()), !dbg !12055
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12056
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !12056
  %bf.load = load i32, i32* %1, align 8, !dbg !12056
  %bf.clear = and i32 %bf.load, 65535, !dbg !12056
  %cmp = icmp eq i32 %bf.clear, 39, !dbg !12058
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !12059

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12060
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !12060
  %bf.load1 = load i32, i32* %3, align 8, !dbg !12060
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !12060
  %cmp3 = icmp eq i32 %bf.clear2, 37, !dbg !12060
  br i1 %cmp3, label %if.then, label %if.else, !dbg !12061

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i64, i64* %bitsize.addr, align 8, !dbg !12062
  %5 = load i64, i64* %bitpos.addr, align 8, !dbg !12065
  %add = add i64 %4, %5, !dbg !12066
  %cmp4 = icmp ugt i64 %add, 32, !dbg !12067
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !12068

if.then5:                                         ; preds = %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12069
  %7 = load i64, i64* %bitsize.addr, align 8, !dbg !12070
  %8 = load i64, i64* %bitpos.addr, align 8, !dbg !12071
  %9 = load i32, i32* %unsignedp.addr, align 4, !dbg !12072
  %call = call %struct.rtx_def* @extract_split_bit_field(%struct.rtx_def* %6, i64 %7, i64 %8, i32 %9), !dbg !12073
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !12074
  br label %return, !dbg !12074

if.end:                                           ; preds = %if.then
  br label %if.end55, !dbg !12075

if.else:                                          ; preds = %lor.lhs.false
  %10 = load i64, i64* %bitsize.addr, align 8, !dbg !12076
  %conv = trunc i64 %10 to i32, !dbg !12076
  %11 = load i64, i64* %bitpos.addr, align 8, !dbg !12078
  %12 = load i64, i64* %offset.addr, align 8, !dbg !12079
  %mul = mul i64 %12, 8, !dbg !12080
  %add6 = add i64 %11, %mul, !dbg !12081
  %conv7 = trunc i64 %add6 to i32, !dbg !12078
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12082
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !12082
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12082
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !12082
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !12082
  %14 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !12082
  %cmp8 = icmp ne %struct.mem_attrs* %14, null, !dbg !12082
  br i1 %cmp8, label %cond.true, label %cond.false, !dbg !12082

cond.true:                                        ; preds = %if.else
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12082
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !12082
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !12082
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 1, !dbg !12082
  %rt_mem13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.mem_attrs**, !dbg !12082
  %16 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem13, align 8, !dbg !12082
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %16, i32 0, i32 4, !dbg !12082
  %17 = load i32, i32* %align, align 4, !dbg !12082
  br label %cond.end, !dbg !12082

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !12082

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %17, %cond.true ], [ 8, %cond.false ], !dbg !12082
  %18 = load i32, i32* @word_mode, align 4, !dbg !12083
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12084
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !12084
  %bf.load14 = load i32, i32* %20, align 8, !dbg !12084
  %bf.lshr = lshr i32 %bf.load14, 27, !dbg !12084
  %bf.clear15 = and i32 %bf.lshr, 1, !dbg !12084
  %call16 = call i32 @get_best_mode(i32 %conv, i32 %conv7, i32 %cond, i32 %18, i32 %bf.clear15), !dbg !12085
  store i32 %call16, i32* %mode, align 4, !dbg !12086
  %21 = load i32, i32* %mode, align 4, !dbg !12087
  %cmp17 = icmp eq i32 %21, 0, !dbg !12089
  br i1 %cmp17, label %if.then19, label %if.end23, !dbg !12090

if.then19:                                        ; preds = %cond.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12091
  %23 = load i64, i64* %bitsize.addr, align 8, !dbg !12092
  %24 = load i64, i64* %bitpos.addr, align 8, !dbg !12093
  %25 = load i64, i64* %offset.addr, align 8, !dbg !12094
  %mul20 = mul i64 %25, 8, !dbg !12095
  %add21 = add i64 %24, %mul20, !dbg !12096
  %26 = load i32, i32* %unsignedp.addr, align 4, !dbg !12097
  %call22 = call %struct.rtx_def* @extract_split_bit_field(%struct.rtx_def* %22, i64 %23, i64 %add21, i32 %26), !dbg !12098
  store %struct.rtx_def* %call22, %struct.rtx_def** %retval, align 8, !dbg !12099
  br label %return, !dbg !12099

if.end23:                                         ; preds = %cond.end
  %27 = load i32, i32* %mode, align 4, !dbg !12100
  %idxprom = zext i32 %27 to i64, !dbg !12100
  %arrayidx24 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !12100
  %28 = load i8, i8* %arrayidx24, align 1, !dbg !12100
  %conv25 = zext i8 %28 to i16, !dbg !12100
  %conv26 = zext i16 %conv25 to i32, !dbg !12100
  %mul27 = mul nsw i32 %conv26, 8, !dbg !12100
  %conv28 = trunc i32 %mul27 to i16, !dbg !12100
  %conv29 = zext i16 %conv28 to i32, !dbg !12100
  store i32 %conv29, i32* %total_bits, align 4, !dbg !12101
  %29 = load i64, i64* %bitpos.addr, align 8, !dbg !12102
  %30 = load i32, i32* %total_bits, align 4, !dbg !12104
  %conv30 = zext i32 %30 to i64, !dbg !12104
  %cmp31 = icmp uge i64 %29, %conv30, !dbg !12105
  br i1 %cmp31, label %if.then33, label %if.end45, !dbg !12106

if.then33:                                        ; preds = %if.end23
  %31 = load i64, i64* %bitpos.addr, align 8, !dbg !12107
  %32 = load i32, i32* %total_bits, align 4, !dbg !12109
  %conv34 = zext i32 %32 to i64, !dbg !12109
  %div = udiv i64 %31, %conv34, !dbg !12110
  %33 = load i32, i32* %total_bits, align 4, !dbg !12111
  %div35 = udiv i32 %33, 8, !dbg !12112
  %conv36 = zext i32 %div35 to i64, !dbg !12113
  %mul37 = mul i64 %div, %conv36, !dbg !12114
  %34 = load i64, i64* %offset.addr, align 8, !dbg !12115
  %add38 = add i64 %34, %mul37, !dbg !12115
  store i64 %add38, i64* %offset.addr, align 8, !dbg !12115
  %35 = load i64, i64* %bitpos.addr, align 8, !dbg !12116
  %36 = load i32, i32* %total_bits, align 4, !dbg !12117
  %conv39 = zext i32 %36 to i64, !dbg !12117
  %div40 = udiv i64 %35, %conv39, !dbg !12118
  %37 = load i32, i32* %total_bits, align 4, !dbg !12119
  %div41 = udiv i32 %37, 8, !dbg !12120
  %conv42 = zext i32 %div41 to i64, !dbg !12121
  %mul43 = mul i64 %div40, %conv42, !dbg !12122
  %mul44 = mul i64 %mul43, 8, !dbg !12123
  %38 = load i64, i64* %bitpos.addr, align 8, !dbg !12124
  %sub = sub i64 %38, %mul44, !dbg !12124
  store i64 %sub, i64* %bitpos.addr, align 8, !dbg !12124
  br label %if.end45, !dbg !12125

if.end45:                                         ; preds = %if.then33, %if.end23
  %39 = load i64, i64* %offset.addr, align 8, !dbg !12126
  %40 = load i32, i32* %total_bits, align 4, !dbg !12127
  %div46 = udiv i32 %40, 8, !dbg !12128
  %conv47 = zext i32 %div46 to i64, !dbg !12129
  %rem = urem i64 %39, %conv47, !dbg !12130
  %mul48 = mul i64 %rem, 8, !dbg !12131
  %41 = load i64, i64* %bitpos.addr, align 8, !dbg !12132
  %add49 = add i64 %41, %mul48, !dbg !12132
  store i64 %add49, i64* %bitpos.addr, align 8, !dbg !12132
  %42 = load i64, i64* %offset.addr, align 8, !dbg !12133
  %43 = load i32, i32* %total_bits, align 4, !dbg !12134
  %div50 = udiv i32 %43, 8, !dbg !12135
  %conv51 = zext i32 %div50 to i64, !dbg !12136
  %rem52 = urem i64 %42, %conv51, !dbg !12137
  %44 = load i64, i64* %offset.addr, align 8, !dbg !12138
  %sub53 = sub i64 %44, %rem52, !dbg !12138
  store i64 %sub53, i64* %offset.addr, align 8, !dbg !12138
  %45 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12139
  %46 = load i32, i32* %mode, align 4, !dbg !12139
  %47 = load i64, i64* %offset.addr, align 8, !dbg !12139
  %call54 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %45, i32 %46, i64 %47, i32 1, i32 1), !dbg !12139
  store %struct.rtx_def* %call54, %struct.rtx_def** %op0.addr, align 8, !dbg !12140
  br label %if.end55

if.end55:                                         ; preds = %if.end45, %if.end
  %48 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12141
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !12141
  %bf.load56 = load i32, i32* %49, align 8, !dbg !12141
  %bf.lshr57 = lshr i32 %bf.load56, 16, !dbg !12141
  %bf.clear58 = and i32 %bf.lshr57, 255, !dbg !12141
  store i32 %bf.clear58, i32* %mode, align 4, !dbg !12142
  %50 = load i32, i32* %unsignedp.addr, align 4, !dbg !12143
  %tobool = icmp ne i32 %50, 0, !dbg !12143
  br i1 %tobool, label %if.then59, label %if.end105, !dbg !12145

if.then59:                                        ; preds = %if.end55
  %51 = load i64, i64* %bitpos.addr, align 8, !dbg !12146
  %tobool60 = icmp ne i64 %51, 0, !dbg !12146
  br i1 %tobool60, label %if.then61, label %if.end78, !dbg !12149

if.then61:                                        ; preds = %if.then59
  call void @llvm.dbg.declare(metadata %union.tree_node** %amount, metadata !12150, metadata !DIExpression()), !dbg !12152
  %52 = load i64, i64* %bitpos.addr, align 8, !dbg !12153
  %call62 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %52), !dbg !12154
  store %union.tree_node* %call62, %union.tree_node** %amount, align 8, !dbg !12152
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget, metadata !12155, metadata !DIExpression()), !dbg !12156
  %53 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !12157
  %cmp63 = icmp ne %struct.rtx_def* %53, null, !dbg !12158
  br i1 %cmp63, label %land.lhs.true, label %cond.false70, !dbg !12159

land.lhs.true:                                    ; preds = %if.then61
  %54 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !12160
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !12160
  %bf.load65 = load i32, i32* %55, align 8, !dbg !12160
  %bf.clear66 = and i32 %bf.load65, 65535, !dbg !12160
  %cmp67 = icmp eq i32 %bf.clear66, 37, !dbg !12160
  br i1 %cmp67, label %cond.true69, label %cond.false70, !dbg !12157

cond.true69:                                      ; preds = %land.lhs.true
  %56 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !12161
  br label %cond.end71, !dbg !12157

cond.false70:                                     ; preds = %land.lhs.true, %if.then61
  br label %cond.end71, !dbg !12157

cond.end71:                                       ; preds = %cond.false70, %cond.true69
  %cond72 = phi %struct.rtx_def* [ %56, %cond.true69 ], [ null, %cond.false70 ], !dbg !12157
  store %struct.rtx_def* %cond72, %struct.rtx_def** %subtarget, align 8, !dbg !12156
  %57 = load i32, i32* %tmode.addr, align 4, !dbg !12162
  %58 = load i32, i32* %mode, align 4, !dbg !12164
  %cmp73 = icmp ne i32 %57, %58, !dbg !12165
  br i1 %cmp73, label %if.then75, label %if.end76, !dbg !12166

if.then75:                                        ; preds = %cond.end71
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8, !dbg !12167
  br label %if.end76, !dbg !12168

if.end76:                                         ; preds = %if.then75, %cond.end71
  %59 = load i32, i32* %mode, align 4, !dbg !12169
  %60 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12170
  %61 = load %union.tree_node*, %union.tree_node** %amount, align 8, !dbg !12171
  %62 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !12172
  %call77 = call %struct.rtx_def* @expand_shift(i32 84, i32 %59, %struct.rtx_def* %60, %union.tree_node* %61, %struct.rtx_def* %62, i32 1), !dbg !12173
  store %struct.rtx_def* %call77, %struct.rtx_def** %op0.addr, align 8, !dbg !12174
  br label %if.end78, !dbg !12175

if.end78:                                         ; preds = %if.end76, %if.then59
  %63 = load i32, i32* %mode, align 4, !dbg !12176
  %64 = load i32, i32* %tmode.addr, align 4, !dbg !12178
  %cmp79 = icmp ne i32 %63, %64, !dbg !12179
  br i1 %cmp79, label %if.then81, label %if.end83, !dbg !12180

if.then81:                                        ; preds = %if.end78
  %65 = load i32, i32* %tmode.addr, align 4, !dbg !12181
  %66 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12182
  %call82 = call %struct.rtx_def* @convert_to_mode(i32 %65, %struct.rtx_def* %66, i32 1), !dbg !12183
  store %struct.rtx_def* %call82, %struct.rtx_def** %op0.addr, align 8, !dbg !12184
  br label %if.end83, !dbg !12185

if.end83:                                         ; preds = %if.then81, %if.end78
  %67 = load i32, i32* %mode, align 4, !dbg !12186
  %idxprom84 = zext i32 %67 to i64, !dbg !12186
  %arrayidx85 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom84, !dbg !12186
  %68 = load i8, i8* %arrayidx85, align 1, !dbg !12186
  %conv86 = zext i8 %68 to i16, !dbg !12186
  %conv87 = zext i16 %conv86 to i32, !dbg !12186
  %mul88 = mul nsw i32 %conv87, 8, !dbg !12186
  %conv89 = trunc i32 %mul88 to i16, !dbg !12186
  %conv90 = zext i16 %conv89 to i64, !dbg !12186
  %69 = load i64, i64* %bitpos.addr, align 8, !dbg !12188
  %70 = load i64, i64* %bitsize.addr, align 8, !dbg !12189
  %add91 = add i64 %69, %70, !dbg !12190
  %cmp92 = icmp ne i64 %conv90, %add91, !dbg !12191
  br i1 %cmp92, label %if.then94, label %if.end104, !dbg !12192

if.then94:                                        ; preds = %if.end83
  %71 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12193
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !12193
  %bf.load95 = load i32, i32* %72, align 8, !dbg !12193
  %bf.lshr96 = lshr i32 %bf.load95, 16, !dbg !12193
  %bf.clear97 = and i32 %bf.lshr96, 255, !dbg !12193
  %73 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12194
  %74 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12195
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !12195
  %bf.load98 = load i32, i32* %75, align 8, !dbg !12195
  %bf.lshr99 = lshr i32 %bf.load98, 16, !dbg !12195
  %bf.clear100 = and i32 %bf.lshr99, 255, !dbg !12195
  %76 = load i64, i64* %bitsize.addr, align 8, !dbg !12196
  %conv101 = trunc i64 %76 to i32, !dbg !12196
  %call102 = call %struct.rtx_def* @mask_rtx(i32 %bf.clear100, i32 0, i32 %conv101, i32 0), !dbg !12197
  %77 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !12198
  %call103 = call %struct.rtx_def* @expand_binop(i32 %bf.clear97, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %73, %struct.rtx_def* %call102, %struct.rtx_def* %77, i32 1, i32 3), !dbg !12199
  store %struct.rtx_def* %call103, %struct.rtx_def** %retval, align 8, !dbg !12200
  br label %return, !dbg !12200

if.end104:                                        ; preds = %if.end83
  %78 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12201
  store %struct.rtx_def* %78, %struct.rtx_def** %retval, align 8, !dbg !12202
  br label %return, !dbg !12202

if.end105:                                        ; preds = %if.end55
  %79 = load i32, i32* %mode, align 4, !dbg !12203
  %80 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12204
  %call106 = call %struct.rtx_def* @force_reg(i32 %79, %struct.rtx_def* %80), !dbg !12205
  store %struct.rtx_def* %call106, %struct.rtx_def** %op0.addr, align 8, !dbg !12206
  %81 = load i32, i32* %mode, align 4, !dbg !12207
  %82 = load i32, i32* %tmode.addr, align 4, !dbg !12209
  %cmp107 = icmp ne i32 %81, %82, !dbg !12210
  br i1 %cmp107, label %if.then109, label %if.end110, !dbg !12211

if.then109:                                       ; preds = %if.end105
  store %struct.rtx_def* null, %struct.rtx_def** %target.addr, align 8, !dbg !12212
  br label %if.end110, !dbg !12213

if.end110:                                        ; preds = %if.then109, %if.end105
  %83 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 2), align 2, !dbg !12214
  %conv111 = zext i8 %83 to i32, !dbg !12214
  store i32 %conv111, i32* %mode, align 4, !dbg !12216
  br label %for.cond, !dbg !12217

for.cond:                                         ; preds = %for.inc, %if.end110
  %84 = load i32, i32* %mode, align 4, !dbg !12218
  %cmp112 = icmp ne i32 %84, 0, !dbg !12220
  br i1 %cmp112, label %for.body, label %for.end, !dbg !12221

for.body:                                         ; preds = %for.cond
  %85 = load i32, i32* %mode, align 4, !dbg !12222
  %idxprom114 = zext i32 %85 to i64, !dbg !12222
  %arrayidx115 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom114, !dbg !12222
  %86 = load i8, i8* %arrayidx115, align 1, !dbg !12222
  %conv116 = zext i8 %86 to i16, !dbg !12222
  %conv117 = zext i16 %conv116 to i32, !dbg !12222
  %mul118 = mul nsw i32 %conv117, 8, !dbg !12222
  %conv119 = trunc i32 %mul118 to i16, !dbg !12222
  %conv120 = zext i16 %conv119 to i64, !dbg !12222
  %87 = load i64, i64* %bitsize.addr, align 8, !dbg !12224
  %88 = load i64, i64* %bitpos.addr, align 8, !dbg !12225
  %add121 = add i64 %87, %88, !dbg !12226
  %cmp122 = icmp uge i64 %conv120, %add121, !dbg !12227
  br i1 %cmp122, label %if.then124, label %if.end126, !dbg !12228

if.then124:                                       ; preds = %for.body
  %89 = load i32, i32* %mode, align 4, !dbg !12229
  %90 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12231
  %call125 = call %struct.rtx_def* @convert_to_mode(i32 %89, %struct.rtx_def* %90, i32 0), !dbg !12232
  store %struct.rtx_def* %call125, %struct.rtx_def** %op0.addr, align 8, !dbg !12233
  br label %for.end, !dbg !12234

if.end126:                                        ; preds = %for.body
  br label %for.inc, !dbg !12225

for.inc:                                          ; preds = %if.end126
  %91 = load i32, i32* %mode, align 4, !dbg !12235
  %idxprom127 = zext i32 %91 to i64, !dbg !12235
  %arrayidx128 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom127, !dbg !12235
  %92 = load i8, i8* %arrayidx128, align 1, !dbg !12235
  %conv129 = zext i8 %92 to i32, !dbg !12235
  store i32 %conv129, i32* %mode, align 4, !dbg !12236
  br label %for.cond, !dbg !12237, !llvm.loop !12238

for.end:                                          ; preds = %if.then124, %for.cond
  %93 = load i32, i32* %mode, align 4, !dbg !12240
  %idxprom130 = zext i32 %93 to i64, !dbg !12240
  %arrayidx131 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom130, !dbg !12240
  %94 = load i8, i8* %arrayidx131, align 1, !dbg !12240
  %conv132 = zext i8 %94 to i16, !dbg !12240
  %conv133 = zext i16 %conv132 to i32, !dbg !12240
  %mul134 = mul nsw i32 %conv133, 8, !dbg !12240
  %conv135 = trunc i32 %mul134 to i16, !dbg !12240
  %conv136 = zext i16 %conv135 to i64, !dbg !12240
  %95 = load i64, i64* %bitsize.addr, align 8, !dbg !12242
  %96 = load i64, i64* %bitpos.addr, align 8, !dbg !12243
  %add137 = add i64 %95, %96, !dbg !12244
  %cmp138 = icmp ne i64 %conv136, %add137, !dbg !12245
  br i1 %cmp138, label %if.then140, label %if.end165, !dbg !12246

if.then140:                                       ; preds = %for.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %amount141, metadata !12247, metadata !DIExpression()), !dbg !12249
  %97 = load i32, i32* %mode, align 4, !dbg !12250
  %idxprom142 = zext i32 %97 to i64, !dbg !12250
  %arrayidx143 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom142, !dbg !12250
  %98 = load i8, i8* %arrayidx143, align 1, !dbg !12250
  %conv144 = zext i8 %98 to i16, !dbg !12250
  %conv145 = zext i16 %conv144 to i32, !dbg !12250
  %mul146 = mul nsw i32 %conv145, 8, !dbg !12250
  %conv147 = trunc i32 %mul146 to i16, !dbg !12250
  %conv148 = zext i16 %conv147 to i64, !dbg !12250
  %99 = load i64, i64* %bitsize.addr, align 8, !dbg !12251
  %100 = load i64, i64* %bitpos.addr, align 8, !dbg !12252
  %add149 = add i64 %99, %100, !dbg !12253
  %sub150 = sub i64 %conv148, %add149, !dbg !12254
  %call151 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %sub150), !dbg !12255
  store %union.tree_node* %call151, %union.tree_node** %amount141, align 8, !dbg !12249
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget152, metadata !12256, metadata !DIExpression()), !dbg !12257
  %101 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !12258
  %cmp153 = icmp ne %struct.rtx_def* %101, null, !dbg !12259
  br i1 %cmp153, label %land.lhs.true155, label %cond.false161, !dbg !12260

land.lhs.true155:                                 ; preds = %if.then140
  %102 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !12261
  %103 = bitcast %struct.rtx_def* %102 to i32*, !dbg !12261
  %bf.load156 = load i32, i32* %103, align 8, !dbg !12261
  %bf.clear157 = and i32 %bf.load156, 65535, !dbg !12261
  %cmp158 = icmp eq i32 %bf.clear157, 37, !dbg !12261
  br i1 %cmp158, label %cond.true160, label %cond.false161, !dbg !12258

cond.true160:                                     ; preds = %land.lhs.true155
  %104 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !12262
  br label %cond.end162, !dbg !12258

cond.false161:                                    ; preds = %land.lhs.true155, %if.then140
  br label %cond.end162, !dbg !12258

cond.end162:                                      ; preds = %cond.false161, %cond.true160
  %cond163 = phi %struct.rtx_def* [ %104, %cond.true160 ], [ null, %cond.false161 ], !dbg !12258
  store %struct.rtx_def* %cond163, %struct.rtx_def** %subtarget152, align 8, !dbg !12257
  %105 = load i32, i32* %mode, align 4, !dbg !12263
  %106 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12264
  %107 = load %union.tree_node*, %union.tree_node** %amount141, align 8, !dbg !12265
  %108 = load %struct.rtx_def*, %struct.rtx_def** %subtarget152, align 8, !dbg !12266
  %call164 = call %struct.rtx_def* @expand_shift(i32 83, i32 %105, %struct.rtx_def* %106, %union.tree_node* %107, %struct.rtx_def* %108, i32 1), !dbg !12267
  store %struct.rtx_def* %call164, %struct.rtx_def** %op0.addr, align 8, !dbg !12268
  br label %if.end165, !dbg !12269

if.end165:                                        ; preds = %cond.end162, %for.end
  %109 = load i32, i32* %mode, align 4, !dbg !12270
  %110 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12271
  %111 = load i32, i32* %mode, align 4, !dbg !12272
  %idxprom166 = zext i32 %111 to i64, !dbg !12272
  %arrayidx167 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom166, !dbg !12272
  %112 = load i8, i8* %arrayidx167, align 1, !dbg !12272
  %conv168 = zext i8 %112 to i16, !dbg !12272
  %conv169 = zext i16 %conv168 to i32, !dbg !12272
  %mul170 = mul nsw i32 %conv169, 8, !dbg !12272
  %conv171 = trunc i32 %mul170 to i16, !dbg !12272
  %conv172 = zext i16 %conv171 to i64, !dbg !12272
  %113 = load i64, i64* %bitsize.addr, align 8, !dbg !12273
  %sub173 = sub i64 %conv172, %113, !dbg !12274
  %call174 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %sub173), !dbg !12275
  %114 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !12276
  %call175 = call %struct.rtx_def* @expand_shift(i32 84, i32 %109, %struct.rtx_def* %110, %union.tree_node* %call174, %struct.rtx_def* %114, i32 0), !dbg !12277
  store %struct.rtx_def* %call175, %struct.rtx_def** %retval, align 8, !dbg !12278
  br label %return, !dbg !12278

return:                                           ; preds = %if.end165, %if.end104, %if.then94, %if.then19, %if.then5
  %115 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !12279
  ret %struct.rtx_def* %115, !dbg !12279
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @extract_split_bit_field(%struct.rtx_def* %op0, i64 %bitsize, i64 %bitpos, i32 %unsignedp) #0 !dbg !12280 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %bitsize.addr = alloca i64, align 8
  %bitpos.addr = alloca i64, align 8
  %unsignedp.addr = alloca i32, align 4
  %unit = alloca i32, align 4
  %bitsdone = alloca i32, align 4
  %result = alloca %struct.rtx_def*, align 8
  %first = alloca i32, align 4
  %thissize = alloca i64, align 8
  %part = alloca %struct.rtx_def*, align 8
  %word = alloca %struct.rtx_def*, align 8
  %thispos = alloca i64, align 8
  %offset = alloca i64, align 8
  %word_offset = alloca i32, align 4
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !12283, metadata !DIExpression()), !dbg !12284
  store i64 %bitsize, i64* %bitsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitsize.addr, metadata !12285, metadata !DIExpression()), !dbg !12286
  store i64 %bitpos, i64* %bitpos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitpos.addr, metadata !12287, metadata !DIExpression()), !dbg !12288
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !12289, metadata !DIExpression()), !dbg !12290
  call void @llvm.dbg.declare(metadata i32* %unit, metadata !12291, metadata !DIExpression()), !dbg !12292
  call void @llvm.dbg.declare(metadata i32* %bitsdone, metadata !12293, metadata !DIExpression()), !dbg !12294
  store i32 0, i32* %bitsdone, align 4, !dbg !12294
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !12295, metadata !DIExpression()), !dbg !12296
  store %struct.rtx_def* null, %struct.rtx_def** %result, align 8, !dbg !12296
  call void @llvm.dbg.declare(metadata i32* %first, metadata !12297, metadata !DIExpression()), !dbg !12298
  store i32 1, i32* %first, align 4, !dbg !12298
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12299
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !12299
  %bf.load = load i32, i32* %1, align 8, !dbg !12299
  %bf.clear = and i32 %bf.load, 65535, !dbg !12299
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !12299
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !12301

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12302
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !12302
  %bf.load1 = load i32, i32* %3, align 8, !dbg !12302
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !12302
  %cmp3 = icmp eq i32 %bf.clear2, 39, !dbg !12303
  br i1 %cmp3, label %if.then, label %if.else, !dbg !12304

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 32, i32* %unit, align 4, !dbg !12305
  br label %if.end, !dbg !12306

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12307
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !12307
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12307
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !12307
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !12307
  %5 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !12307
  %cmp4 = icmp ne %struct.mem_attrs* %5, null, !dbg !12307
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !12307

cond.true:                                        ; preds = %if.else
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12307
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !12307
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !12307
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !12307
  %rt_mem8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.mem_attrs**, !dbg !12307
  %7 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem8, align 8, !dbg !12307
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %7, i32 0, i32 4, !dbg !12307
  %8 = load i32, i32* %align, align 4, !dbg !12307
  br label %cond.end, !dbg !12307

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !12307

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %8, %cond.true ], [ 8, %cond.false ], !dbg !12307
  %cmp9 = icmp ult i32 %cond, 32, !dbg !12307
  br i1 %cmp9, label %cond.true10, label %cond.false25, !dbg !12307

cond.true10:                                      ; preds = %cond.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12307
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !12307
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !12307
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 1, !dbg !12307
  %rt_mem14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.mem_attrs**, !dbg !12307
  %10 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem14, align 8, !dbg !12307
  %cmp15 = icmp ne %struct.mem_attrs* %10, null, !dbg !12307
  br i1 %cmp15, label %cond.true16, label %cond.false22, !dbg !12307

cond.true16:                                      ; preds = %cond.true10
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12307
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !12307
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !12307
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 1, !dbg !12307
  %rt_mem20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.mem_attrs**, !dbg !12307
  %12 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem20, align 8, !dbg !12307
  %align21 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %12, i32 0, i32 4, !dbg !12307
  %13 = load i32, i32* %align21, align 4, !dbg !12307
  br label %cond.end23, !dbg !12307

cond.false22:                                     ; preds = %cond.true10
  br label %cond.end23, !dbg !12307

cond.end23:                                       ; preds = %cond.false22, %cond.true16
  %cond24 = phi i32 [ %13, %cond.true16 ], [ 8, %cond.false22 ], !dbg !12307
  br label %cond.end26, !dbg !12307

cond.false25:                                     ; preds = %cond.end
  br label %cond.end26, !dbg !12307

cond.end26:                                       ; preds = %cond.false25, %cond.end23
  %cond27 = phi i32 [ %cond24, %cond.end23 ], [ 32, %cond.false25 ], !dbg !12307
  store i32 %cond27, i32* %unit, align 4, !dbg !12308
  br label %if.end

if.end:                                           ; preds = %cond.end26, %if.then
  br label %while.cond, !dbg !12309

while.cond:                                       ; preds = %if.end107, %if.end
  %14 = load i32, i32* %bitsdone, align 4, !dbg !12310
  %conv = zext i32 %14 to i64, !dbg !12310
  %15 = load i64, i64* %bitsize.addr, align 8, !dbg !12311
  %cmp28 = icmp ult i64 %conv, %15, !dbg !12312
  br i1 %cmp28, label %while.body, label %while.end, !dbg !12309

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i64* %thissize, metadata !12313, metadata !DIExpression()), !dbg !12315
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %part, metadata !12316, metadata !DIExpression()), !dbg !12317
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %word, metadata !12318, metadata !DIExpression()), !dbg !12319
  call void @llvm.dbg.declare(metadata i64* %thispos, metadata !12320, metadata !DIExpression()), !dbg !12321
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !12322, metadata !DIExpression()), !dbg !12323
  %16 = load i64, i64* %bitpos.addr, align 8, !dbg !12324
  %17 = load i32, i32* %bitsdone, align 4, !dbg !12325
  %conv30 = zext i32 %17 to i64, !dbg !12325
  %add = add i64 %16, %conv30, !dbg !12326
  %18 = load i32, i32* %unit, align 4, !dbg !12327
  %conv31 = zext i32 %18 to i64, !dbg !12327
  %div = udiv i64 %add, %conv31, !dbg !12328
  store i64 %div, i64* %offset, align 8, !dbg !12329
  %19 = load i64, i64* %bitpos.addr, align 8, !dbg !12330
  %20 = load i32, i32* %bitsdone, align 4, !dbg !12331
  %conv32 = zext i32 %20 to i64, !dbg !12331
  %add33 = add i64 %19, %conv32, !dbg !12332
  %21 = load i32, i32* %unit, align 4, !dbg !12333
  %conv34 = zext i32 %21 to i64, !dbg !12333
  %rem = urem i64 %add33, %conv34, !dbg !12334
  store i64 %rem, i64* %thispos, align 8, !dbg !12335
  %22 = load i64, i64* %bitsize.addr, align 8, !dbg !12336
  %23 = load i32, i32* %bitsdone, align 4, !dbg !12336
  %conv35 = zext i32 %23 to i64, !dbg !12336
  %sub = sub i64 %22, %conv35, !dbg !12336
  %cmp36 = icmp ult i64 %sub, 32, !dbg !12336
  br i1 %cmp36, label %cond.true38, label %cond.false41, !dbg !12336

cond.true38:                                      ; preds = %while.body
  %24 = load i64, i64* %bitsize.addr, align 8, !dbg !12336
  %25 = load i32, i32* %bitsdone, align 4, !dbg !12336
  %conv39 = zext i32 %25 to i64, !dbg !12336
  %sub40 = sub i64 %24, %conv39, !dbg !12336
  br label %cond.end42, !dbg !12336

cond.false41:                                     ; preds = %while.body
  br label %cond.end42, !dbg !12336

cond.end42:                                       ; preds = %cond.false41, %cond.true38
  %cond43 = phi i64 [ %sub40, %cond.true38 ], [ 32, %cond.false41 ], !dbg !12336
  store i64 %cond43, i64* %thissize, align 8, !dbg !12337
  %26 = load i64, i64* %thissize, align 8, !dbg !12338
  %27 = load i32, i32* %unit, align 4, !dbg !12338
  %conv44 = zext i32 %27 to i64, !dbg !12338
  %28 = load i64, i64* %thispos, align 8, !dbg !12338
  %sub45 = sub i64 %conv44, %28, !dbg !12338
  %cmp46 = icmp ult i64 %26, %sub45, !dbg !12338
  br i1 %cmp46, label %cond.true48, label %cond.false49, !dbg !12338

cond.true48:                                      ; preds = %cond.end42
  %29 = load i64, i64* %thissize, align 8, !dbg !12338
  br label %cond.end52, !dbg !12338

cond.false49:                                     ; preds = %cond.end42
  %30 = load i32, i32* %unit, align 4, !dbg !12338
  %conv50 = zext i32 %30 to i64, !dbg !12338
  %31 = load i64, i64* %thispos, align 8, !dbg !12338
  %sub51 = sub i64 %conv50, %31, !dbg !12338
  br label %cond.end52, !dbg !12338

cond.end52:                                       ; preds = %cond.false49, %cond.true48
  %cond53 = phi i64 [ %29, %cond.true48 ], [ %sub51, %cond.false49 ], !dbg !12338
  store i64 %cond53, i64* %thissize, align 8, !dbg !12339
  %32 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12340
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !12340
  %bf.load54 = load i32, i32* %33, align 8, !dbg !12340
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !12340
  %cmp56 = icmp eq i32 %bf.clear55, 39, !dbg !12342
  br i1 %cmp56, label %if.then58, label %if.else75, !dbg !12343

if.then58:                                        ; preds = %cond.end52
  call void @llvm.dbg.declare(metadata i32* %word_offset, metadata !12344, metadata !DIExpression()), !dbg !12346
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12347
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !12347
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !12347
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 1, !dbg !12347
  %rt_uint = bitcast %union.rtunion_def* %arrayidx61 to i32*, !dbg !12347
  %35 = load i32, i32* %rt_uint, align 8, !dbg !12347
  %div62 = udiv i32 %35, 4, !dbg !12348
  %conv63 = zext i32 %div62 to i64, !dbg !12349
  %36 = load i64, i64* %offset, align 8, !dbg !12350
  %add64 = add i64 %conv63, %36, !dbg !12351
  %conv65 = trunc i64 %add64 to i32, !dbg !12349
  store i32 %conv65, i32* %word_offset, align 4, !dbg !12346
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12352
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !12352
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !12352
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 0, !dbg !12352
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**, !dbg !12352
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !12352
  %39 = load i32, i32* %word_offset, align 4, !dbg !12353
  %40 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12354
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !12354
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !12354
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 0, !dbg !12354
  %rt_rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**, !dbg !12354
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx72, align 8, !dbg !12354
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !12354
  %bf.load73 = load i32, i32* %42, align 8, !dbg !12354
  %bf.lshr = lshr i32 %bf.load73, 16, !dbg !12354
  %bf.clear74 = and i32 %bf.lshr, 255, !dbg !12354
  %call = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %38, i32 %39, i32 %bf.clear74), !dbg !12355
  store %struct.rtx_def* %call, %struct.rtx_def** %word, align 8, !dbg !12356
  store i64 0, i64* %offset, align 8, !dbg !12357
  br label %if.end88, !dbg !12358

if.else75:                                        ; preds = %cond.end52
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12359
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !12359
  %bf.load76 = load i32, i32* %44, align 8, !dbg !12359
  %bf.clear77 = and i32 %bf.load76, 65535, !dbg !12359
  %cmp78 = icmp eq i32 %bf.clear77, 37, !dbg !12359
  br i1 %cmp78, label %if.then80, label %if.else86, !dbg !12361

if.then80:                                        ; preds = %if.else75
  %45 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12362
  %46 = load i64, i64* %offset, align 8, !dbg !12364
  %conv81 = trunc i64 %46 to i32, !dbg !12364
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12365
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !12365
  %bf.load82 = load i32, i32* %48, align 8, !dbg !12365
  %bf.lshr83 = lshr i32 %bf.load82, 16, !dbg !12365
  %bf.clear84 = and i32 %bf.lshr83, 255, !dbg !12365
  %call85 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %45, i32 %conv81, i32 %bf.clear84), !dbg !12366
  store %struct.rtx_def* %call85, %struct.rtx_def** %word, align 8, !dbg !12367
  store i64 0, i64* %offset, align 8, !dbg !12368
  br label %if.end87, !dbg !12369

if.else86:                                        ; preds = %if.else75
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !12370
  store %struct.rtx_def* %49, %struct.rtx_def** %word, align 8, !dbg !12371
  br label %if.end87

if.end87:                                         ; preds = %if.else86, %if.then80
  br label %if.end88

if.end88:                                         ; preds = %if.end87, %if.then58
  %50 = load i32, i32* @word_mode, align 4, !dbg !12372
  %51 = load %struct.rtx_def*, %struct.rtx_def** %word, align 8, !dbg !12373
  %52 = load i64, i64* %offset, align 8, !dbg !12374
  %53 = load i32, i32* %unit, align 4, !dbg !12375
  %conv89 = zext i32 %53 to i64, !dbg !12375
  %mul = mul i64 %52, %conv89, !dbg !12376
  %div90 = udiv i64 %mul, 8, !dbg !12377
  %54 = load i64, i64* %thissize, align 8, !dbg !12378
  %55 = load i64, i64* %thispos, align 8, !dbg !12379
  %call91 = call %struct.rtx_def* @extract_fixed_bit_field(i32 %50, %struct.rtx_def* %51, i64 %div90, i64 %54, i64 %55, %struct.rtx_def* null, i32 1), !dbg !12380
  store %struct.rtx_def* %call91, %struct.rtx_def** %part, align 8, !dbg !12381
  %56 = load i64, i64* %thissize, align 8, !dbg !12382
  %57 = load i32, i32* %bitsdone, align 4, !dbg !12383
  %conv92 = zext i32 %57 to i64, !dbg !12383
  %add93 = add i64 %conv92, %56, !dbg !12383
  %conv94 = trunc i64 %add93 to i32, !dbg !12383
  store i32 %conv94, i32* %bitsdone, align 4, !dbg !12383
  %58 = load i32, i32* %bitsdone, align 4, !dbg !12384
  %conv95 = zext i32 %58 to i64, !dbg !12384
  %59 = load i64, i64* %thissize, align 8, !dbg !12388
  %cmp96 = icmp ne i64 %conv95, %59, !dbg !12389
  br i1 %cmp96, label %if.then98, label %if.end103, !dbg !12390

if.then98:                                        ; preds = %if.end88
  %60 = load i32, i32* @word_mode, align 4, !dbg !12391
  %61 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8, !dbg !12392
  %62 = load i32, i32* %bitsdone, align 4, !dbg !12393
  %conv99 = zext i32 %62 to i64, !dbg !12393
  %63 = load i64, i64* %thissize, align 8, !dbg !12394
  %sub100 = sub i64 %conv99, %63, !dbg !12395
  %call101 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %sub100), !dbg !12396
  %call102 = call %struct.rtx_def* @expand_shift(i32 83, i32 %60, %struct.rtx_def* %61, %union.tree_node* %call101, %struct.rtx_def* null, i32 1), !dbg !12397
  store %struct.rtx_def* %call102, %struct.rtx_def** %part, align 8, !dbg !12398
  br label %if.end103, !dbg !12399

if.end103:                                        ; preds = %if.then98, %if.end88
  %64 = load i32, i32* %first, align 4, !dbg !12400
  %tobool = icmp ne i32 %64, 0, !dbg !12400
  br i1 %tobool, label %if.then104, label %if.else105, !dbg !12402

if.then104:                                       ; preds = %if.end103
  %65 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8, !dbg !12403
  store %struct.rtx_def* %65, %struct.rtx_def** %result, align 8, !dbg !12404
  br label %if.end107, !dbg !12405

if.else105:                                       ; preds = %if.end103
  %66 = load i32, i32* @word_mode, align 4, !dbg !12406
  %67 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8, !dbg !12407
  %68 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !12408
  %call106 = call %struct.rtx_def* @expand_binop(i32 %66, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %67, %struct.rtx_def* %68, %struct.rtx_def* null, i32 1, i32 3), !dbg !12409
  store %struct.rtx_def* %call106, %struct.rtx_def** %result, align 8, !dbg !12410
  br label %if.end107

if.end107:                                        ; preds = %if.else105, %if.then104
  store i32 0, i32* %first, align 4, !dbg !12411
  br label %while.cond, !dbg !12309, !llvm.loop !12412

while.end:                                        ; preds = %while.cond
  %69 = load i32, i32* %unsignedp.addr, align 4, !dbg !12414
  %tobool108 = icmp ne i32 %69, 0, !dbg !12414
  br i1 %tobool108, label %if.then109, label %if.end110, !dbg !12416

if.then109:                                       ; preds = %while.end
  %70 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !12417
  store %struct.rtx_def* %70, %struct.rtx_def** %retval, align 8, !dbg !12418
  br label %return, !dbg !12418

if.end110:                                        ; preds = %while.end
  %71 = load i32, i32* @word_mode, align 4, !dbg !12419
  %72 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !12420
  %73 = load i64, i64* %bitsize.addr, align 8, !dbg !12421
  %sub111 = sub i64 32, %73, !dbg !12422
  %call112 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %sub111), !dbg !12423
  %call113 = call %struct.rtx_def* @expand_shift(i32 83, i32 %71, %struct.rtx_def* %72, %union.tree_node* %call112, %struct.rtx_def* null, i32 0), !dbg !12424
  store %struct.rtx_def* %call113, %struct.rtx_def** %result, align 8, !dbg !12425
  %74 = load i32, i32* @word_mode, align 4, !dbg !12426
  %75 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !12427
  %76 = load i64, i64* %bitsize.addr, align 8, !dbg !12428
  %sub114 = sub i64 32, %76, !dbg !12429
  %call115 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %sub114), !dbg !12430
  %call116 = call %struct.rtx_def* @expand_shift(i32 84, i32 %74, %struct.rtx_def* %75, %union.tree_node* %call115, %struct.rtx_def* null, i32 0), !dbg !12431
  store %struct.rtx_def* %call116, %struct.rtx_def** %retval, align 8, !dbg !12432
  br label %return, !dbg !12432

return:                                           ; preds = %if.end110, %if.then109
  %77 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !12433
  ret %struct.rtx_def* %77, !dbg !12433
}

declare dso_local %struct.rtx_def* @immed_double_const(i64, i64, i32) #2

declare dso_local %struct.rtx_def* @assign_stack_temp(i32, i64, i32) #2

declare dso_local %struct.rtx_def* @emit_clobber(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @operand_subword(%struct.rtx_def*, i32, i32, i32) #2

declare dso_local %struct.rtx_def* @gen_extzv(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_extv(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @convert_extracted_bit_field(%struct.rtx_def* %x, i32 %mode, i32 %tmode, i8 zeroext %unsignedp) #0 !dbg !12434 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %tmode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i8, align 1
  %smode = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !12437, metadata !DIExpression()), !dbg !12438
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !12439, metadata !DIExpression()), !dbg !12440
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !12441, metadata !DIExpression()), !dbg !12442
  store i8 %unsignedp, i8* %unsignedp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %unsignedp.addr, metadata !12443, metadata !DIExpression()), !dbg !12444
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12445
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !12445
  %bf.load = load i32, i32* %1, align 8, !dbg !12445
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !12445
  %bf.clear = and i32 %bf.lshr, 255, !dbg !12445
  %2 = load i32, i32* %tmode.addr, align 4, !dbg !12447
  %cmp = icmp eq i32 %bf.clear, %2, !dbg !12448
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !12449

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12450
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !12450
  %bf.load1 = load i32, i32* %4, align 8, !dbg !12450
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !12450
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !12450
  %5 = load i32, i32* %mode.addr, align 4, !dbg !12451
  %cmp4 = icmp eq i32 %bf.clear3, %5, !dbg !12452
  br i1 %cmp4, label %if.then, label %if.end, !dbg !12453

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12454
  store %struct.rtx_def* %6, %struct.rtx_def** %retval, align 8, !dbg !12455
  br label %return, !dbg !12455

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i32, i32* %tmode.addr, align 4, !dbg !12456
  %idxprom = zext i32 %7 to i64, !dbg !12456
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !12456
  %8 = load i8, i8* %arrayidx, align 1, !dbg !12456
  %conv = zext i8 %8 to i32, !dbg !12456
  %cmp5 = icmp eq i32 %conv, 2, !dbg !12456
  br i1 %cmp5, label %if.end24, label %lor.lhs.false7, !dbg !12456

lor.lhs.false7:                                   ; preds = %if.end
  %9 = load i32, i32* %tmode.addr, align 4, !dbg !12456
  %idxprom8 = zext i32 %9 to i64, !dbg !12456
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom8, !dbg !12456
  %10 = load i8, i8* %arrayidx9, align 1, !dbg !12456
  %conv10 = zext i8 %10 to i32, !dbg !12456
  %cmp11 = icmp eq i32 %conv10, 3, !dbg !12456
  br i1 %cmp11, label %if.end24, label %if.then13, !dbg !12458

if.then13:                                        ; preds = %lor.lhs.false7
  call void @llvm.dbg.declare(metadata i32* %smode, metadata !12459, metadata !DIExpression()), !dbg !12461
  %11 = load i32, i32* %tmode.addr, align 4, !dbg !12462
  %idxprom14 = zext i32 %11 to i64, !dbg !12462
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom14, !dbg !12462
  %12 = load i8, i8* %arrayidx15, align 1, !dbg !12462
  %conv16 = zext i8 %12 to i16, !dbg !12462
  %conv17 = zext i16 %conv16 to i32, !dbg !12462
  %mul = mul nsw i32 %conv17, 8, !dbg !12462
  %conv18 = trunc i32 %mul to i16, !dbg !12462
  %conv19 = zext i16 %conv18 to i32, !dbg !12462
  %call = call i32 @mode_for_size(i32 %conv19, i32 2, i32 0), !dbg !12463
  store i32 %call, i32* %smode, align 4, !dbg !12464
  %13 = load i32, i32* %smode, align 4, !dbg !12465
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12466
  %15 = load i8, i8* %unsignedp.addr, align 1, !dbg !12467
  %conv20 = zext i8 %15 to i32, !dbg !12467
  %call21 = call %struct.rtx_def* @convert_to_mode(i32 %13, %struct.rtx_def* %14, i32 %conv20), !dbg !12468
  store %struct.rtx_def* %call21, %struct.rtx_def** %x.addr, align 8, !dbg !12469
  %16 = load i32, i32* %smode, align 4, !dbg !12470
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12471
  %call22 = call %struct.rtx_def* @force_reg(i32 %16, %struct.rtx_def* %17), !dbg !12472
  store %struct.rtx_def* %call22, %struct.rtx_def** %x.addr, align 8, !dbg !12473
  %18 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !12474
  %19 = load i32, i32* %tmode.addr, align 4, !dbg !12475
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12476
  %call23 = call %struct.rtx_def* %18(i32 %19, %struct.rtx_def* %20), !dbg !12474
  store %struct.rtx_def* %call23, %struct.rtx_def** %retval, align 8, !dbg !12477
  br label %return, !dbg !12477

if.end24:                                         ; preds = %lor.lhs.false7, %if.end
  %21 = load i32, i32* %tmode.addr, align 4, !dbg !12478
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12479
  %23 = load i8, i8* %unsignedp.addr, align 1, !dbg !12480
  %conv25 = zext i8 %23 to i32, !dbg !12480
  %call26 = call %struct.rtx_def* @convert_to_mode(i32 %21, %struct.rtx_def* %22, i32 %conv25), !dbg !12481
  store %struct.rtx_def* %call26, %struct.rtx_def** %retval, align 8, !dbg !12482
  br label %return, !dbg !12482

return:                                           ; preds = %if.end24, %if.then13, %if.then
  %24 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !12483
  ret %struct.rtx_def* %24, !dbg !12483
}

declare dso_local %struct.rtx_def* @expand_expr_real(%union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @synth_mult(%struct.algorithm* %alg_out, i64 %t, %struct.mult_cost* %cost_limit, i32 %mode) #0 !dbg !12484 {
entry:
  %alg_out.addr = alloca %struct.algorithm*, align 8
  %t.addr = alloca i64, align 8
  %cost_limit.addr = alloca %struct.mult_cost*, align 8
  %mode.addr = alloca i32, align 4
  %m = alloca i32, align 4
  %alg_in = alloca %struct.algorithm*, align 8
  %best_alg = alloca %struct.algorithm*, align 8
  %best_cost = alloca %struct.mult_cost, align 2
  %new_limit = alloca %struct.mult_cost, align 2
  %op_cost = alloca i32, align 4
  %op_latency = alloca i32, align 4
  %orig_t = alloca i64, align 8
  %q = alloca i64, align 8
  %maxm = alloca i32, align 4
  %hash_index = alloca i32, align 4
  %cache_hit = alloca i8, align 1
  %cache_alg = alloca i32, align 4
  %speed = alloca i8, align 1
  %x = alloca %struct.algorithm*, align 8
  %x349 = alloca %struct.algorithm*, align 8
  %w = alloca i64, align 8
  %x431 = alloca %struct.algorithm*, align 8
  %x492 = alloca %struct.algorithm*, align 8
  %x567 = alloca %struct.algorithm*, align 8
  %d = alloca i64, align 8
  %x694 = alloca %struct.algorithm*, align 8
  %x812 = alloca %struct.algorithm*, align 8
  %x897 = alloca %struct.algorithm*, align 8
  %x976 = alloca %struct.algorithm*, align 8
  store %struct.algorithm* %alg_out, %struct.algorithm** %alg_out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.algorithm** %alg_out.addr, metadata !12489, metadata !DIExpression()), !dbg !12490
  store i64 %t, i64* %t.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %t.addr, metadata !12491, metadata !DIExpression()), !dbg !12492
  store %struct.mult_cost* %cost_limit, %struct.mult_cost** %cost_limit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mult_cost** %cost_limit.addr, metadata !12493, metadata !DIExpression()), !dbg !12494
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !12495, metadata !DIExpression()), !dbg !12496
  call void @llvm.dbg.declare(metadata i32* %m, metadata !12497, metadata !DIExpression()), !dbg !12498
  call void @llvm.dbg.declare(metadata %struct.algorithm** %alg_in, metadata !12499, metadata !DIExpression()), !dbg !12500
  call void @llvm.dbg.declare(metadata %struct.algorithm** %best_alg, metadata !12501, metadata !DIExpression()), !dbg !12502
  call void @llvm.dbg.declare(metadata %struct.mult_cost* %best_cost, metadata !12503, metadata !DIExpression()), !dbg !12504
  call void @llvm.dbg.declare(metadata %struct.mult_cost* %new_limit, metadata !12505, metadata !DIExpression()), !dbg !12506
  call void @llvm.dbg.declare(metadata i32* %op_cost, metadata !12507, metadata !DIExpression()), !dbg !12508
  call void @llvm.dbg.declare(metadata i32* %op_latency, metadata !12509, metadata !DIExpression()), !dbg !12510
  call void @llvm.dbg.declare(metadata i64* %orig_t, metadata !12511, metadata !DIExpression()), !dbg !12512
  %0 = load i64, i64* %t.addr, align 8, !dbg !12513
  store i64 %0, i64* %orig_t, align 8, !dbg !12512
  call void @llvm.dbg.declare(metadata i64* %q, metadata !12514, metadata !DIExpression()), !dbg !12515
  call void @llvm.dbg.declare(metadata i32* %maxm, metadata !12516, metadata !DIExpression()), !dbg !12517
  %1 = load i32, i32* %mode.addr, align 4, !dbg !12518
  %idxprom = zext i32 %1 to i64, !dbg !12518
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !12518
  %2 = load i8, i8* %arrayidx, align 1, !dbg !12518
  %conv = zext i8 %2 to i16, !dbg !12518
  %conv1 = zext i16 %conv to i32, !dbg !12518
  %mul = mul nsw i32 %conv1, 8, !dbg !12518
  %conv2 = trunc i32 %mul to i16, !dbg !12518
  %conv3 = zext i16 %conv2 to i32, !dbg !12518
  %cmp = icmp slt i32 32, %conv3, !dbg !12518
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !12518

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !12518

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !12518
  %idxprom5 = zext i32 %3 to i64, !dbg !12518
  %arrayidx6 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom5, !dbg !12518
  %4 = load i8, i8* %arrayidx6, align 1, !dbg !12518
  %conv7 = zext i8 %4 to i16, !dbg !12518
  %conv8 = zext i16 %conv7 to i32, !dbg !12518
  %mul9 = mul nsw i32 %conv8, 8, !dbg !12518
  %conv10 = trunc i32 %mul9 to i16, !dbg !12518
  %conv11 = zext i16 %conv10 to i32, !dbg !12518
  br label %cond.end, !dbg !12518

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 32, %cond.true ], [ %conv11, %cond.false ], !dbg !12518
  store i32 %cond, i32* %maxm, align 4, !dbg !12517
  call void @llvm.dbg.declare(metadata i32* %hash_index, metadata !12519, metadata !DIExpression()), !dbg !12520
  call void @llvm.dbg.declare(metadata i8* %cache_hit, metadata !12521, metadata !DIExpression()), !dbg !12522
  store i8 0, i8* %cache_hit, align 1, !dbg !12522
  call void @llvm.dbg.declare(metadata i32* %cache_alg, metadata !12523, metadata !DIExpression()), !dbg !12524
  store i32 1, i32* %cache_alg, align 4, !dbg !12524
  call void @llvm.dbg.declare(metadata i8* %speed, metadata !12525, metadata !DIExpression()), !dbg !12526
  %call = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !12527
  store i8 %call, i8* %speed, align 1, !dbg !12526
  %5 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12528
  %cost = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %5, i32 0, i32 0, !dbg !12529
  %6 = load i16, i16* %cost, align 2, !dbg !12529
  %conv12 = sext i16 %6 to i32, !dbg !12528
  %add = add nsw i32 %conv12, 1, !dbg !12530
  %conv13 = trunc i32 %add to i16, !dbg !12528
  %7 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !12531
  %cost14 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %7, i32 0, i32 0, !dbg !12532
  %cost15 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost14, i32 0, i32 0, !dbg !12533
  store i16 %conv13, i16* %cost15, align 4, !dbg !12534
  %8 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12535
  %latency = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %8, i32 0, i32 1, !dbg !12536
  %9 = load i16, i16* %latency, align 2, !dbg !12536
  %conv16 = sext i16 %9 to i32, !dbg !12535
  %add17 = add nsw i32 %conv16, 1, !dbg !12537
  %conv18 = trunc i32 %add17 to i16, !dbg !12535
  %10 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !12538
  %cost19 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %10, i32 0, i32 0, !dbg !12539
  %latency20 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost19, i32 0, i32 1, !dbg !12540
  store i16 %conv18, i16* %latency20, align 2, !dbg !12541
  %11 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12542
  %cost21 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %11, i32 0, i32 0, !dbg !12544
  %12 = load i16, i16* %cost21, align 2, !dbg !12544
  %conv22 = sext i16 %12 to i32, !dbg !12542
  %cmp23 = icmp slt i32 %conv22, 0, !dbg !12545
  br i1 %cmp23, label %if.then, label %lor.lhs.false, !dbg !12546

lor.lhs.false:                                    ; preds = %cond.end
  %13 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12547
  %cost25 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %13, i32 0, i32 0, !dbg !12548
  %14 = load i16, i16* %cost25, align 2, !dbg !12548
  %conv26 = sext i16 %14 to i32, !dbg !12547
  %cmp27 = icmp eq i32 %conv26, 0, !dbg !12549
  br i1 %cmp27, label %land.lhs.true, label %if.end, !dbg !12550

land.lhs.true:                                    ; preds = %lor.lhs.false
  %15 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12551
  %latency29 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %15, i32 0, i32 1, !dbg !12552
  %16 = load i16, i16* %latency29, align 2, !dbg !12552
  %conv30 = sext i16 %16 to i32, !dbg !12551
  %cmp31 = icmp sle i32 %conv30, 0, !dbg !12553
  br i1 %cmp31, label %if.then, label %if.end, !dbg !12554

if.then:                                          ; preds = %land.lhs.true, %cond.end
  br label %return, !dbg !12555

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %17 = load i32, i32* %mode.addr, align 4, !dbg !12556
  %idxprom33 = zext i32 %17 to i64, !dbg !12556
  %arrayidx34 = getelementptr inbounds [87 x i64], [87 x i64]* @mode_mask_array, i64 0, i64 %idxprom33, !dbg !12556
  %18 = load i64, i64* %arrayidx34, align 8, !dbg !12556
  %19 = load i64, i64* %t.addr, align 8, !dbg !12557
  %and = and i64 %19, %18, !dbg !12557
  store i64 %and, i64* %t.addr, align 8, !dbg !12557
  %20 = load i64, i64* %t.addr, align 8, !dbg !12558
  %cmp35 = icmp eq i64 %20, 1, !dbg !12560
  br i1 %cmp35, label %if.then37, label %if.end43, !dbg !12561

if.then37:                                        ; preds = %if.end
  %21 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !12562
  %ops = getelementptr inbounds %struct.algorithm, %struct.algorithm* %21, i32 0, i32 1, !dbg !12564
  store i16 1, i16* %ops, align 4, !dbg !12565
  %22 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !12566
  %cost38 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %22, i32 0, i32 0, !dbg !12567
  %cost39 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost38, i32 0, i32 0, !dbg !12568
  store i16 0, i16* %cost39, align 4, !dbg !12569
  %23 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !12570
  %cost40 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %23, i32 0, i32 0, !dbg !12571
  %latency41 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost40, i32 0, i32 1, !dbg !12572
  store i16 0, i16* %latency41, align 2, !dbg !12573
  %24 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !12574
  %op = getelementptr inbounds %struct.algorithm, %struct.algorithm* %24, i32 0, i32 2, !dbg !12575
  %arrayidx42 = getelementptr inbounds [32 x i32], [32 x i32]* %op, i64 0, i64 0, !dbg !12574
  store i32 2, i32* %arrayidx42, align 4, !dbg !12576
  br label %return, !dbg !12577

if.end43:                                         ; preds = %if.end
  %25 = load i64, i64* %t.addr, align 8, !dbg !12578
  %cmp44 = icmp eq i64 %25, 0, !dbg !12580
  br i1 %cmp44, label %if.then46, label %if.end81, !dbg !12581

if.then46:                                        ; preds = %if.end43
  %26 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12582
  %cost47 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %26, i32 0, i32 0, !dbg !12582
  %27 = load i16, i16* %cost47, align 2, !dbg !12582
  %conv48 = sext i16 %27 to i32, !dbg !12582
  %28 = load i8, i8* %speed, align 1, !dbg !12582
  %idxprom49 = zext i8 %28 to i64, !dbg !12582
  %arrayidx50 = getelementptr inbounds [2 x i32], [2 x i32]* @zero_cost, i64 0, i64 %idxprom49, !dbg !12582
  %29 = load i32, i32* %arrayidx50, align 4, !dbg !12582
  %cmp51 = icmp slt i32 %conv48, %29, !dbg !12582
  br i1 %cmp51, label %if.then67, label %lor.lhs.false53, !dbg !12582

lor.lhs.false53:                                  ; preds = %if.then46
  %30 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12582
  %cost54 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %30, i32 0, i32 0, !dbg !12582
  %31 = load i16, i16* %cost54, align 2, !dbg !12582
  %conv55 = sext i16 %31 to i32, !dbg !12582
  %32 = load i8, i8* %speed, align 1, !dbg !12582
  %idxprom56 = zext i8 %32 to i64, !dbg !12582
  %arrayidx57 = getelementptr inbounds [2 x i32], [2 x i32]* @zero_cost, i64 0, i64 %idxprom56, !dbg !12582
  %33 = load i32, i32* %arrayidx57, align 4, !dbg !12582
  %cmp58 = icmp eq i32 %conv55, %33, !dbg !12582
  br i1 %cmp58, label %land.lhs.true60, label %if.else, !dbg !12582

land.lhs.true60:                                  ; preds = %lor.lhs.false53
  %34 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12582
  %latency61 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %34, i32 0, i32 1, !dbg !12582
  %35 = load i16, i16* %latency61, align 2, !dbg !12582
  %conv62 = sext i16 %35 to i32, !dbg !12582
  %36 = load i8, i8* %speed, align 1, !dbg !12582
  %idxprom63 = zext i8 %36 to i64, !dbg !12582
  %arrayidx64 = getelementptr inbounds [2 x i32], [2 x i32]* @zero_cost, i64 0, i64 %idxprom63, !dbg !12582
  %37 = load i32, i32* %arrayidx64, align 4, !dbg !12582
  %cmp65 = icmp slt i32 %conv62, %37, !dbg !12582
  br i1 %cmp65, label %if.then67, label %if.else, !dbg !12585

if.then67:                                        ; preds = %land.lhs.true60, %if.then46
  br label %return, !dbg !12586

if.else:                                          ; preds = %land.lhs.true60, %lor.lhs.false53
  %38 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !12587
  %ops68 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %38, i32 0, i32 1, !dbg !12589
  store i16 1, i16* %ops68, align 4, !dbg !12590
  %39 = load i8, i8* %speed, align 1, !dbg !12591
  %idxprom69 = zext i8 %39 to i64, !dbg !12592
  %arrayidx70 = getelementptr inbounds [2 x i32], [2 x i32]* @zero_cost, i64 0, i64 %idxprom69, !dbg !12592
  %40 = load i32, i32* %arrayidx70, align 4, !dbg !12592
  %conv71 = trunc i32 %40 to i16, !dbg !12592
  %41 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !12593
  %cost72 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %41, i32 0, i32 0, !dbg !12594
  %cost73 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost72, i32 0, i32 0, !dbg !12595
  store i16 %conv71, i16* %cost73, align 4, !dbg !12596
  %42 = load i8, i8* %speed, align 1, !dbg !12597
  %idxprom74 = zext i8 %42 to i64, !dbg !12598
  %arrayidx75 = getelementptr inbounds [2 x i32], [2 x i32]* @zero_cost, i64 0, i64 %idxprom74, !dbg !12598
  %43 = load i32, i32* %arrayidx75, align 4, !dbg !12598
  %conv76 = trunc i32 %43 to i16, !dbg !12598
  %44 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !12599
  %cost77 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %44, i32 0, i32 0, !dbg !12600
  %latency78 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost77, i32 0, i32 1, !dbg !12601
  store i16 %conv76, i16* %latency78, align 2, !dbg !12602
  %45 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !12603
  %op79 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %45, i32 0, i32 2, !dbg !12604
  %arrayidx80 = getelementptr inbounds [32 x i32], [32 x i32]* %op79, i64 0, i64 0, !dbg !12603
  store i32 1, i32* %arrayidx80, align 4, !dbg !12605
  br label %return, !dbg !12606

if.end81:                                         ; preds = %if.end43
  %46 = alloca i8, i64 168, align 16, !dbg !12607
  %47 = bitcast i8* %46 to %struct.algorithm*, !dbg !12607
  store %struct.algorithm* %47, %struct.algorithm** %alg_in, align 8, !dbg !12608
  %48 = alloca i8, i64 168, align 16, !dbg !12609
  %49 = bitcast i8* %48 to %struct.algorithm*, !dbg !12609
  store %struct.algorithm* %49, %struct.algorithm** %best_alg, align 8, !dbg !12610
  %50 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12611
  %51 = bitcast %struct.mult_cost* %best_cost to i8*, !dbg !12612
  %52 = bitcast %struct.mult_cost* %50 to i8*, !dbg !12612
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %51, i8* align 2 %52, i64 4, i1 false), !dbg !12612
  %53 = load i64, i64* %t.addr, align 8, !dbg !12613
  %54 = load i32, i32* %mode.addr, align 4, !dbg !12614
  %conv82 = zext i32 %54 to i64, !dbg !12615
  %xor = xor i64 %53, %conv82, !dbg !12616
  %55 = load i8, i8* %speed, align 1, !dbg !12617
  %conv83 = zext i8 %55 to i32, !dbg !12617
  %mul84 = mul nsw i32 %conv83, 256, !dbg !12618
  %conv85 = sext i32 %mul84 to i64, !dbg !12619
  %xor86 = xor i64 %xor, %conv85, !dbg !12620
  %rem = urem i64 %xor86, 1031, !dbg !12621
  %conv87 = trunc i64 %rem to i32, !dbg !12622
  store i32 %conv87, i32* %hash_index, align 4, !dbg !12623
  %56 = load i32, i32* %hash_index, align 4, !dbg !12624
  %idxprom88 = sext i32 %56 to i64, !dbg !12626
  %arrayidx89 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom88, !dbg !12626
  %t90 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx89, i32 0, i32 0, !dbg !12627
  %57 = load i64, i64* %t90, align 8, !dbg !12627
  %58 = load i64, i64* %t.addr, align 8, !dbg !12628
  %cmp91 = icmp eq i64 %57, %58, !dbg !12629
  br i1 %cmp91, label %land.lhs.true93, label %if.end193, !dbg !12630

land.lhs.true93:                                  ; preds = %if.end81
  %59 = load i32, i32* %hash_index, align 4, !dbg !12631
  %idxprom94 = sext i32 %59 to i64, !dbg !12632
  %arrayidx95 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom94, !dbg !12632
  %mode96 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx95, i32 0, i32 1, !dbg !12633
  %60 = load i32, i32* %mode96, align 8, !dbg !12633
  %61 = load i32, i32* %mode.addr, align 4, !dbg !12634
  %cmp97 = icmp eq i32 %60, %61, !dbg !12635
  br i1 %cmp97, label %land.lhs.true99, label %if.end193, !dbg !12636

land.lhs.true99:                                  ; preds = %land.lhs.true93
  %62 = load i32, i32* %hash_index, align 4, !dbg !12637
  %idxprom100 = sext i32 %62 to i64, !dbg !12638
  %arrayidx101 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom100, !dbg !12638
  %mode102 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx101, i32 0, i32 1, !dbg !12639
  %63 = load i32, i32* %mode102, align 8, !dbg !12639
  %64 = load i32, i32* %mode.addr, align 4, !dbg !12640
  %cmp103 = icmp eq i32 %63, %64, !dbg !12641
  br i1 %cmp103, label %land.lhs.true105, label %if.end193, !dbg !12642

land.lhs.true105:                                 ; preds = %land.lhs.true99
  %65 = load i32, i32* %hash_index, align 4, !dbg !12643
  %idxprom106 = sext i32 %65 to i64, !dbg !12644
  %arrayidx107 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom106, !dbg !12644
  %speed108 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx107, i32 0, i32 4, !dbg !12645
  %66 = load i8, i8* %speed108, align 4, !dbg !12645
  %conv109 = zext i8 %66 to i32, !dbg !12644
  %67 = load i8, i8* %speed, align 1, !dbg !12646
  %conv110 = zext i8 %67 to i32, !dbg !12646
  %cmp111 = icmp eq i32 %conv109, %conv110, !dbg !12647
  br i1 %cmp111, label %land.lhs.true113, label %if.end193, !dbg !12648

land.lhs.true113:                                 ; preds = %land.lhs.true105
  %68 = load i32, i32* %hash_index, align 4, !dbg !12649
  %idxprom114 = sext i32 %68 to i64, !dbg !12650
  %arrayidx115 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom114, !dbg !12650
  %alg = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx115, i32 0, i32 2, !dbg !12651
  %69 = load i32, i32* %alg, align 4, !dbg !12651
  %cmp116 = icmp ne i32 %69, 0, !dbg !12652
  br i1 %cmp116, label %if.then118, label %if.end193, !dbg !12653

if.then118:                                       ; preds = %land.lhs.true113
  %70 = load i32, i32* %hash_index, align 4, !dbg !12654
  %idxprom119 = sext i32 %70 to i64, !dbg !12656
  %arrayidx120 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom119, !dbg !12656
  %alg121 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx120, i32 0, i32 2, !dbg !12657
  %71 = load i32, i32* %alg121, align 4, !dbg !12657
  store i32 %71, i32* %cache_alg, align 4, !dbg !12658
  %72 = load i32, i32* %cache_alg, align 4, !dbg !12659
  %cmp122 = icmp eq i32 %72, 10, !dbg !12661
  br i1 %cmp122, label %if.then124, label %if.else156, !dbg !12662

if.then124:                                       ; preds = %if.then118
  %73 = load i32, i32* %hash_index, align 4, !dbg !12663
  %idxprom125 = sext i32 %73 to i64, !dbg !12663
  %arrayidx126 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom125, !dbg !12663
  %cost127 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx126, i32 0, i32 3, !dbg !12663
  %cost128 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost127, i32 0, i32 0, !dbg !12663
  %74 = load i16, i16* %cost128, align 8, !dbg !12663
  %conv129 = sext i16 %74 to i32, !dbg !12663
  %75 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12663
  %cost130 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %75, i32 0, i32 0, !dbg !12663
  %76 = load i16, i16* %cost130, align 2, !dbg !12663
  %conv131 = sext i16 %76 to i32, !dbg !12663
  %cmp132 = icmp slt i32 %conv129, %conv131, !dbg !12663
  br i1 %cmp132, label %if.end155, label %lor.lhs.false134, !dbg !12663

lor.lhs.false134:                                 ; preds = %if.then124
  %77 = load i32, i32* %hash_index, align 4, !dbg !12663
  %idxprom135 = sext i32 %77 to i64, !dbg !12663
  %arrayidx136 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom135, !dbg !12663
  %cost137 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx136, i32 0, i32 3, !dbg !12663
  %cost138 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost137, i32 0, i32 0, !dbg !12663
  %78 = load i16, i16* %cost138, align 8, !dbg !12663
  %conv139 = sext i16 %78 to i32, !dbg !12663
  %79 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12663
  %cost140 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %79, i32 0, i32 0, !dbg !12663
  %80 = load i16, i16* %cost140, align 2, !dbg !12663
  %conv141 = sext i16 %80 to i32, !dbg !12663
  %cmp142 = icmp eq i32 %conv139, %conv141, !dbg !12663
  br i1 %cmp142, label %land.lhs.true144, label %if.then154, !dbg !12663

land.lhs.true144:                                 ; preds = %lor.lhs.false134
  %81 = load i32, i32* %hash_index, align 4, !dbg !12663
  %idxprom145 = sext i32 %81 to i64, !dbg !12663
  %arrayidx146 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom145, !dbg !12663
  %cost147 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx146, i32 0, i32 3, !dbg !12663
  %latency148 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost147, i32 0, i32 1, !dbg !12663
  %82 = load i16, i16* %latency148, align 2, !dbg !12663
  %conv149 = sext i16 %82 to i32, !dbg !12663
  %83 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12663
  %latency150 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %83, i32 0, i32 1, !dbg !12663
  %84 = load i16, i16* %latency150, align 2, !dbg !12663
  %conv151 = sext i16 %84 to i32, !dbg !12663
  %cmp152 = icmp slt i32 %conv149, %conv151, !dbg !12663
  br i1 %cmp152, label %if.end155, label %if.then154, !dbg !12666

if.then154:                                       ; preds = %land.lhs.true144, %lor.lhs.false134
  br label %return, !dbg !12667

if.end155:                                        ; preds = %land.lhs.true144, %if.then124
  br label %if.end192, !dbg !12668

if.else156:                                       ; preds = %if.then118
  %85 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12669
  %cost157 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %85, i32 0, i32 0, !dbg !12669
  %86 = load i16, i16* %cost157, align 2, !dbg !12669
  %conv158 = sext i16 %86 to i32, !dbg !12669
  %87 = load i32, i32* %hash_index, align 4, !dbg !12669
  %idxprom159 = sext i32 %87 to i64, !dbg !12669
  %arrayidx160 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom159, !dbg !12669
  %cost161 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx160, i32 0, i32 3, !dbg !12669
  %cost162 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost161, i32 0, i32 0, !dbg !12669
  %88 = load i16, i16* %cost162, align 8, !dbg !12669
  %conv163 = sext i16 %88 to i32, !dbg !12669
  %cmp164 = icmp slt i32 %conv158, %conv163, !dbg !12669
  br i1 %cmp164, label %if.then186, label %lor.lhs.false166, !dbg !12669

lor.lhs.false166:                                 ; preds = %if.else156
  %89 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12669
  %cost167 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %89, i32 0, i32 0, !dbg !12669
  %90 = load i16, i16* %cost167, align 2, !dbg !12669
  %conv168 = sext i16 %90 to i32, !dbg !12669
  %91 = load i32, i32* %hash_index, align 4, !dbg !12669
  %idxprom169 = sext i32 %91 to i64, !dbg !12669
  %arrayidx170 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom169, !dbg !12669
  %cost171 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx170, i32 0, i32 3, !dbg !12669
  %cost172 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost171, i32 0, i32 0, !dbg !12669
  %92 = load i16, i16* %cost172, align 8, !dbg !12669
  %conv173 = sext i16 %92 to i32, !dbg !12669
  %cmp174 = icmp eq i32 %conv168, %conv173, !dbg !12669
  br i1 %cmp174, label %land.lhs.true176, label %if.end187, !dbg !12669

land.lhs.true176:                                 ; preds = %lor.lhs.false166
  %93 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !12669
  %latency177 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %93, i32 0, i32 1, !dbg !12669
  %94 = load i16, i16* %latency177, align 2, !dbg !12669
  %conv178 = sext i16 %94 to i32, !dbg !12669
  %95 = load i32, i32* %hash_index, align 4, !dbg !12669
  %idxprom179 = sext i32 %95 to i64, !dbg !12669
  %arrayidx180 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom179, !dbg !12669
  %cost181 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx180, i32 0, i32 3, !dbg !12669
  %latency182 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost181, i32 0, i32 1, !dbg !12669
  %96 = load i16, i16* %latency182, align 2, !dbg !12669
  %conv183 = sext i16 %96 to i32, !dbg !12669
  %cmp184 = icmp slt i32 %conv178, %conv183, !dbg !12669
  br i1 %cmp184, label %if.then186, label %if.end187, !dbg !12672

if.then186:                                       ; preds = %land.lhs.true176, %if.else156
  br label %return, !dbg !12673

if.end187:                                        ; preds = %land.lhs.true176, %lor.lhs.false166
  store i8 1, i8* %cache_hit, align 1, !dbg !12674
  %97 = load i32, i32* %cache_alg, align 4, !dbg !12675
  switch i32 %97, label %sw.default [
    i32 3, label %sw.bb
    i32 4, label %sw.bb188
    i32 5, label %sw.bb188
    i32 6, label %sw.bb189
    i32 7, label %sw.bb189
    i32 8, label %sw.bb190
    i32 9, label %sw.bb191
  ], !dbg !12676

sw.bb:                                            ; preds = %if.end187
  br label %do_alg_shift, !dbg !12677

sw.bb188:                                         ; preds = %if.end187, %if.end187
  br label %do_alg_addsub_t_m2, !dbg !12679

sw.bb189:                                         ; preds = %if.end187, %if.end187
  br label %do_alg_addsub_factor, !dbg !12680

sw.bb190:                                         ; preds = %if.end187
  br label %do_alg_add_t2_m, !dbg !12681

sw.bb191:                                         ; preds = %if.end187
  br label %do_alg_sub_t2_m, !dbg !12682

sw.default:                                       ; preds = %if.end187
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2530, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12683
  br label %sw.epilog, !dbg !12684

sw.epilog:                                        ; preds = %sw.default
  br label %if.end192

if.end192:                                        ; preds = %sw.epilog, %if.end155
  br label %if.end193, !dbg !12685

if.end193:                                        ; preds = %if.end192, %land.lhs.true113, %land.lhs.true105, %land.lhs.true99, %land.lhs.true93, %if.end81
  %98 = load i64, i64* %t.addr, align 8, !dbg !12686
  %and194 = and i64 %98, 1, !dbg !12688
  %cmp195 = icmp eq i64 %and194, 0, !dbg !12689
  br i1 %cmp195, label %if.then197, label %if.end365, !dbg !12690

if.then197:                                       ; preds = %if.end193
  br label %do_alg_shift, !dbg !12691

do_alg_shift:                                     ; preds = %if.then197, %sw.bb
  call void @llvm.dbg.label(metadata !12692), !dbg !12694
  %99 = load i64, i64* %t.addr, align 8, !dbg !12695
  %100 = load i64, i64* %t.addr, align 8, !dbg !12696
  %sub = sub i64 0, %100, !dbg !12697
  %and198 = and i64 %99, %sub, !dbg !12698
  %call199 = call i32 @floor_log2(i64 %and198), !dbg !12699
  store i32 %call199, i32* %m, align 4, !dbg !12700
  %101 = load i32, i32* %m, align 4, !dbg !12701
  %102 = load i32, i32* %maxm, align 4, !dbg !12703
  %cmp200 = icmp slt i32 %101, %102, !dbg !12704
  br i1 %cmp200, label %if.then202, label %if.end362, !dbg !12705

if.then202:                                       ; preds = %do_alg_shift
  %103 = load i64, i64* %t.addr, align 8, !dbg !12706
  %104 = load i32, i32* %m, align 4, !dbg !12708
  %sh_prom = zext i32 %104 to i64, !dbg !12709
  %shr = lshr i64 %103, %sh_prom, !dbg !12709
  store i64 %shr, i64* %q, align 8, !dbg !12710
  %105 = load i32, i32* %m, align 4, !dbg !12711
  %106 = load i8, i8* %speed, align 1, !dbg !12712
  %idxprom203 = zext i8 %106 to i64, !dbg !12713
  %arrayidx204 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom203, !dbg !12713
  %107 = load i32, i32* %mode.addr, align 4, !dbg !12714
  %idxprom205 = zext i32 %107 to i64, !dbg !12713
  %arrayidx206 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx204, i64 0, i64 %idxprom205, !dbg !12713
  %108 = load i32, i32* %arrayidx206, align 4, !dbg !12713
  %mul207 = mul nsw i32 %105, %108, !dbg !12715
  store i32 %mul207, i32* %op_cost, align 4, !dbg !12716
  %109 = load i8, i8* %speed, align 1, !dbg !12717
  %idxprom208 = zext i8 %109 to i64, !dbg !12719
  %arrayidx209 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom208, !dbg !12719
  %110 = load i32, i32* %mode.addr, align 4, !dbg !12720
  %idxprom210 = zext i32 %110 to i64, !dbg !12719
  %arrayidx211 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx209, i64 0, i64 %idxprom210, !dbg !12719
  %111 = load i32, i32* %m, align 4, !dbg !12721
  %idxprom212 = sext i32 %111 to i64, !dbg !12719
  %arrayidx213 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx211, i64 0, i64 %idxprom212, !dbg !12719
  %112 = load i32, i32* %arrayidx213, align 4, !dbg !12719
  %113 = load i32, i32* %op_cost, align 4, !dbg !12722
  %cmp214 = icmp slt i32 %112, %113, !dbg !12723
  br i1 %cmp214, label %if.then216, label %if.end223, !dbg !12724

if.then216:                                       ; preds = %if.then202
  %114 = load i8, i8* %speed, align 1, !dbg !12725
  %idxprom217 = zext i8 %114 to i64, !dbg !12726
  %arrayidx218 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom217, !dbg !12726
  %115 = load i32, i32* %mode.addr, align 4, !dbg !12727
  %idxprom219 = zext i32 %115 to i64, !dbg !12726
  %arrayidx220 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx218, i64 0, i64 %idxprom219, !dbg !12726
  %116 = load i32, i32* %m, align 4, !dbg !12728
  %idxprom221 = sext i32 %116 to i64, !dbg !12726
  %arrayidx222 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx220, i64 0, i64 %idxprom221, !dbg !12726
  %117 = load i32, i32* %arrayidx222, align 4, !dbg !12726
  store i32 %117, i32* %op_cost, align 4, !dbg !12729
  br label %if.end223, !dbg !12730

if.end223:                                        ; preds = %if.then216, %if.then202
  %cost224 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12731
  %118 = load i16, i16* %cost224, align 2, !dbg !12731
  %conv225 = sext i16 %118 to i32, !dbg !12732
  %119 = load i32, i32* %op_cost, align 4, !dbg !12733
  %sub226 = sub nsw i32 %conv225, %119, !dbg !12734
  %conv227 = trunc i32 %sub226 to i16, !dbg !12732
  %cost228 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 0, !dbg !12735
  store i16 %conv227, i16* %cost228, align 2, !dbg !12736
  %latency229 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !12737
  %120 = load i16, i16* %latency229, align 2, !dbg !12737
  %conv230 = sext i16 %120 to i32, !dbg !12738
  %121 = load i32, i32* %op_cost, align 4, !dbg !12739
  %sub231 = sub nsw i32 %conv230, %121, !dbg !12740
  %conv232 = trunc i32 %sub231 to i16, !dbg !12738
  %latency233 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 1, !dbg !12741
  store i16 %conv232, i16* %latency233, align 2, !dbg !12742
  %122 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12743
  %123 = load i64, i64* %q, align 8, !dbg !12744
  %124 = load i32, i32* %mode.addr, align 4, !dbg !12745
  call void @synth_mult(%struct.algorithm* %122, i64 %123, %struct.mult_cost* %new_limit, i32 %124), !dbg !12746
  %125 = load i32, i32* %op_cost, align 4, !dbg !12747
  %126 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12748
  %cost234 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %126, i32 0, i32 0, !dbg !12749
  %cost235 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost234, i32 0, i32 0, !dbg !12750
  %127 = load i16, i16* %cost235, align 4, !dbg !12751
  %conv236 = sext i16 %127 to i32, !dbg !12751
  %add237 = add nsw i32 %conv236, %125, !dbg !12751
  %conv238 = trunc i32 %add237 to i16, !dbg !12751
  store i16 %conv238, i16* %cost235, align 4, !dbg !12751
  %128 = load i32, i32* %op_cost, align 4, !dbg !12752
  %129 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12753
  %cost239 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %129, i32 0, i32 0, !dbg !12754
  %latency240 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost239, i32 0, i32 1, !dbg !12755
  %130 = load i16, i16* %latency240, align 2, !dbg !12756
  %conv241 = sext i16 %130 to i32, !dbg !12756
  %add242 = add nsw i32 %conv241, %128, !dbg !12756
  %conv243 = trunc i32 %add242 to i16, !dbg !12756
  store i16 %conv243, i16* %latency240, align 2, !dbg !12756
  %131 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12757
  %cost244 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %131, i32 0, i32 0, !dbg !12757
  %cost245 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost244, i32 0, i32 0, !dbg !12757
  %132 = load i16, i16* %cost245, align 4, !dbg !12757
  %conv246 = sext i16 %132 to i32, !dbg !12757
  %cost247 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12757
  %133 = load i16, i16* %cost247, align 2, !dbg !12757
  %conv248 = sext i16 %133 to i32, !dbg !12757
  %cmp249 = icmp slt i32 %conv246, %conv248, !dbg !12757
  br i1 %cmp249, label %if.then267, label %lor.lhs.false251, !dbg !12757

lor.lhs.false251:                                 ; preds = %if.end223
  %134 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12757
  %cost252 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %134, i32 0, i32 0, !dbg !12757
  %cost253 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost252, i32 0, i32 0, !dbg !12757
  %135 = load i16, i16* %cost253, align 4, !dbg !12757
  %conv254 = sext i16 %135 to i32, !dbg !12757
  %cost255 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12757
  %136 = load i16, i16* %cost255, align 2, !dbg !12757
  %conv256 = sext i16 %136 to i32, !dbg !12757
  %cmp257 = icmp eq i32 %conv254, %conv256, !dbg !12757
  br i1 %cmp257, label %land.lhs.true259, label %if.end277, !dbg !12757

land.lhs.true259:                                 ; preds = %lor.lhs.false251
  %137 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12757
  %cost260 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %137, i32 0, i32 0, !dbg !12757
  %latency261 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost260, i32 0, i32 1, !dbg !12757
  %138 = load i16, i16* %latency261, align 2, !dbg !12757
  %conv262 = sext i16 %138 to i32, !dbg !12757
  %latency263 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !12757
  %139 = load i16, i16* %latency263, align 2, !dbg !12757
  %conv264 = sext i16 %139 to i32, !dbg !12757
  %cmp265 = icmp slt i32 %conv262, %conv264, !dbg !12757
  br i1 %cmp265, label %if.then267, label %if.end277, !dbg !12759

if.then267:                                       ; preds = %land.lhs.true259, %if.end223
  call void @llvm.dbg.declare(metadata %struct.algorithm** %x, metadata !12760, metadata !DIExpression()), !dbg !12762
  %140 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12763
  %cost268 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %140, i32 0, i32 0, !dbg !12764
  %141 = bitcast %struct.mult_cost* %best_cost to i8*, !dbg !12764
  %142 = bitcast %struct.mult_cost* %cost268 to i8*, !dbg !12764
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %141, i8* align 4 %142, i64 4, i1 false), !dbg !12764
  %143 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12765
  store %struct.algorithm* %143, %struct.algorithm** %x, align 8, !dbg !12766
  %144 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12767
  store %struct.algorithm* %144, %struct.algorithm** %alg_in, align 8, !dbg !12768
  %145 = load %struct.algorithm*, %struct.algorithm** %x, align 8, !dbg !12769
  store %struct.algorithm* %145, %struct.algorithm** %best_alg, align 8, !dbg !12770
  %146 = load i32, i32* %m, align 4, !dbg !12771
  %conv269 = trunc i32 %146 to i8, !dbg !12771
  %147 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12772
  %log = getelementptr inbounds %struct.algorithm, %struct.algorithm* %147, i32 0, i32 3, !dbg !12773
  %148 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12774
  %ops270 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %148, i32 0, i32 1, !dbg !12775
  %149 = load i16, i16* %ops270, align 4, !dbg !12775
  %idxprom271 = sext i16 %149 to i64, !dbg !12772
  %arrayidx272 = getelementptr inbounds [32 x i8], [32 x i8]* %log, i64 0, i64 %idxprom271, !dbg !12772
  store i8 %conv269, i8* %arrayidx272, align 1, !dbg !12776
  %150 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12777
  %op273 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %150, i32 0, i32 2, !dbg !12778
  %151 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12779
  %ops274 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %151, i32 0, i32 1, !dbg !12780
  %152 = load i16, i16* %ops274, align 4, !dbg !12780
  %idxprom275 = sext i16 %152 to i64, !dbg !12777
  %arrayidx276 = getelementptr inbounds [32 x i32], [32 x i32]* %op273, i64 0, i64 %idxprom275, !dbg !12777
  store i32 3, i32* %arrayidx276, align 4, !dbg !12781
  br label %if.end277, !dbg !12782

if.end277:                                        ; preds = %if.then267, %land.lhs.true259, %lor.lhs.false251
  %153 = load i64, i64* %orig_t, align 8, !dbg !12783
  %cmp278 = icmp slt i64 %153, 0, !dbg !12785
  br i1 %cmp278, label %if.then280, label %if.end361, !dbg !12786

if.then280:                                       ; preds = %if.end277
  %154 = load i64, i64* %orig_t, align 8, !dbg !12787
  %neg = xor i64 %154, -1, !dbg !12789
  %155 = load i32, i32* %m, align 4, !dbg !12790
  %sh_prom281 = zext i32 %155 to i64, !dbg !12791
  %shr282 = lshr i64 %neg, %sh_prom281, !dbg !12791
  %neg283 = xor i64 %shr282, -1, !dbg !12792
  store i64 %neg283, i64* %q, align 8, !dbg !12793
  %156 = load i32, i32* %m, align 4, !dbg !12794
  %157 = load i8, i8* %speed, align 1, !dbg !12795
  %idxprom284 = zext i8 %157 to i64, !dbg !12796
  %arrayidx285 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom284, !dbg !12796
  %158 = load i32, i32* %mode.addr, align 4, !dbg !12797
  %idxprom286 = zext i32 %158 to i64, !dbg !12796
  %arrayidx287 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx285, i64 0, i64 %idxprom286, !dbg !12796
  %159 = load i32, i32* %arrayidx287, align 4, !dbg !12796
  %mul288 = mul nsw i32 %156, %159, !dbg !12798
  store i32 %mul288, i32* %op_cost, align 4, !dbg !12799
  %160 = load i8, i8* %speed, align 1, !dbg !12800
  %idxprom289 = zext i8 %160 to i64, !dbg !12802
  %arrayidx290 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom289, !dbg !12802
  %161 = load i32, i32* %mode.addr, align 4, !dbg !12803
  %idxprom291 = zext i32 %161 to i64, !dbg !12802
  %arrayidx292 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx290, i64 0, i64 %idxprom291, !dbg !12802
  %162 = load i32, i32* %m, align 4, !dbg !12804
  %idxprom293 = sext i32 %162 to i64, !dbg !12802
  %arrayidx294 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx292, i64 0, i64 %idxprom293, !dbg !12802
  %163 = load i32, i32* %arrayidx294, align 4, !dbg !12802
  %164 = load i32, i32* %op_cost, align 4, !dbg !12805
  %cmp295 = icmp slt i32 %163, %164, !dbg !12806
  br i1 %cmp295, label %if.then297, label %if.end304, !dbg !12807

if.then297:                                       ; preds = %if.then280
  %165 = load i8, i8* %speed, align 1, !dbg !12808
  %idxprom298 = zext i8 %165 to i64, !dbg !12809
  %arrayidx299 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom298, !dbg !12809
  %166 = load i32, i32* %mode.addr, align 4, !dbg !12810
  %idxprom300 = zext i32 %166 to i64, !dbg !12809
  %arrayidx301 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx299, i64 0, i64 %idxprom300, !dbg !12809
  %167 = load i32, i32* %m, align 4, !dbg !12811
  %idxprom302 = sext i32 %167 to i64, !dbg !12809
  %arrayidx303 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx301, i64 0, i64 %idxprom302, !dbg !12809
  %168 = load i32, i32* %arrayidx303, align 4, !dbg !12809
  store i32 %168, i32* %op_cost, align 4, !dbg !12812
  br label %if.end304, !dbg !12813

if.end304:                                        ; preds = %if.then297, %if.then280
  %cost305 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12814
  %169 = load i16, i16* %cost305, align 2, !dbg !12814
  %conv306 = sext i16 %169 to i32, !dbg !12815
  %170 = load i32, i32* %op_cost, align 4, !dbg !12816
  %sub307 = sub nsw i32 %conv306, %170, !dbg !12817
  %conv308 = trunc i32 %sub307 to i16, !dbg !12815
  %cost309 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 0, !dbg !12818
  store i16 %conv308, i16* %cost309, align 2, !dbg !12819
  %latency310 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !12820
  %171 = load i16, i16* %latency310, align 2, !dbg !12820
  %conv311 = sext i16 %171 to i32, !dbg !12821
  %172 = load i32, i32* %op_cost, align 4, !dbg !12822
  %sub312 = sub nsw i32 %conv311, %172, !dbg !12823
  %conv313 = trunc i32 %sub312 to i16, !dbg !12821
  %latency314 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 1, !dbg !12824
  store i16 %conv313, i16* %latency314, align 2, !dbg !12825
  %173 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12826
  %174 = load i64, i64* %q, align 8, !dbg !12827
  %175 = load i32, i32* %mode.addr, align 4, !dbg !12828
  call void @synth_mult(%struct.algorithm* %173, i64 %174, %struct.mult_cost* %new_limit, i32 %175), !dbg !12829
  %176 = load i32, i32* %op_cost, align 4, !dbg !12830
  %177 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12831
  %cost315 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %177, i32 0, i32 0, !dbg !12832
  %cost316 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost315, i32 0, i32 0, !dbg !12833
  %178 = load i16, i16* %cost316, align 4, !dbg !12834
  %conv317 = sext i16 %178 to i32, !dbg !12834
  %add318 = add nsw i32 %conv317, %176, !dbg !12834
  %conv319 = trunc i32 %add318 to i16, !dbg !12834
  store i16 %conv319, i16* %cost316, align 4, !dbg !12834
  %179 = load i32, i32* %op_cost, align 4, !dbg !12835
  %180 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12836
  %cost320 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %180, i32 0, i32 0, !dbg !12837
  %latency321 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost320, i32 0, i32 1, !dbg !12838
  %181 = load i16, i16* %latency321, align 2, !dbg !12839
  %conv322 = sext i16 %181 to i32, !dbg !12839
  %add323 = add nsw i32 %conv322, %179, !dbg !12839
  %conv324 = trunc i32 %add323 to i16, !dbg !12839
  store i16 %conv324, i16* %latency321, align 2, !dbg !12839
  %182 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12840
  %cost325 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %182, i32 0, i32 0, !dbg !12840
  %cost326 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost325, i32 0, i32 0, !dbg !12840
  %183 = load i16, i16* %cost326, align 4, !dbg !12840
  %conv327 = sext i16 %183 to i32, !dbg !12840
  %cost328 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12840
  %184 = load i16, i16* %cost328, align 2, !dbg !12840
  %conv329 = sext i16 %184 to i32, !dbg !12840
  %cmp330 = icmp slt i32 %conv327, %conv329, !dbg !12840
  br i1 %cmp330, label %if.then348, label %lor.lhs.false332, !dbg !12840

lor.lhs.false332:                                 ; preds = %if.end304
  %185 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12840
  %cost333 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %185, i32 0, i32 0, !dbg !12840
  %cost334 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost333, i32 0, i32 0, !dbg !12840
  %186 = load i16, i16* %cost334, align 4, !dbg !12840
  %conv335 = sext i16 %186 to i32, !dbg !12840
  %cost336 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12840
  %187 = load i16, i16* %cost336, align 2, !dbg !12840
  %conv337 = sext i16 %187 to i32, !dbg !12840
  %cmp338 = icmp eq i32 %conv335, %conv337, !dbg !12840
  br i1 %cmp338, label %land.lhs.true340, label %if.end360, !dbg !12840

land.lhs.true340:                                 ; preds = %lor.lhs.false332
  %188 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12840
  %cost341 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %188, i32 0, i32 0, !dbg !12840
  %latency342 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost341, i32 0, i32 1, !dbg !12840
  %189 = load i16, i16* %latency342, align 2, !dbg !12840
  %conv343 = sext i16 %189 to i32, !dbg !12840
  %latency344 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !12840
  %190 = load i16, i16* %latency344, align 2, !dbg !12840
  %conv345 = sext i16 %190 to i32, !dbg !12840
  %cmp346 = icmp slt i32 %conv343, %conv345, !dbg !12840
  br i1 %cmp346, label %if.then348, label %if.end360, !dbg !12842

if.then348:                                       ; preds = %land.lhs.true340, %if.end304
  call void @llvm.dbg.declare(metadata %struct.algorithm** %x349, metadata !12843, metadata !DIExpression()), !dbg !12845
  %191 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12846
  %cost350 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %191, i32 0, i32 0, !dbg !12847
  %192 = bitcast %struct.mult_cost* %best_cost to i8*, !dbg !12847
  %193 = bitcast %struct.mult_cost* %cost350 to i8*, !dbg !12847
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %192, i8* align 4 %193, i64 4, i1 false), !dbg !12847
  %194 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12848
  store %struct.algorithm* %194, %struct.algorithm** %x349, align 8, !dbg !12849
  %195 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12850
  store %struct.algorithm* %195, %struct.algorithm** %alg_in, align 8, !dbg !12851
  %196 = load %struct.algorithm*, %struct.algorithm** %x349, align 8, !dbg !12852
  store %struct.algorithm* %196, %struct.algorithm** %best_alg, align 8, !dbg !12853
  %197 = load i32, i32* %m, align 4, !dbg !12854
  %conv351 = trunc i32 %197 to i8, !dbg !12854
  %198 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12855
  %log352 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %198, i32 0, i32 3, !dbg !12856
  %199 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12857
  %ops353 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %199, i32 0, i32 1, !dbg !12858
  %200 = load i16, i16* %ops353, align 4, !dbg !12858
  %idxprom354 = sext i16 %200 to i64, !dbg !12855
  %arrayidx355 = getelementptr inbounds [32 x i8], [32 x i8]* %log352, i64 0, i64 %idxprom354, !dbg !12855
  store i8 %conv351, i8* %arrayidx355, align 1, !dbg !12859
  %201 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12860
  %op356 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %201, i32 0, i32 2, !dbg !12861
  %202 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12862
  %ops357 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %202, i32 0, i32 1, !dbg !12863
  %203 = load i16, i16* %ops357, align 4, !dbg !12863
  %idxprom358 = sext i16 %203 to i64, !dbg !12860
  %arrayidx359 = getelementptr inbounds [32 x i32], [32 x i32]* %op356, i64 0, i64 %idxprom358, !dbg !12860
  store i32 3, i32* %arrayidx359, align 4, !dbg !12864
  br label %if.end360, !dbg !12865

if.end360:                                        ; preds = %if.then348, %land.lhs.true340, %lor.lhs.false332
  br label %if.end361, !dbg !12866

if.end361:                                        ; preds = %if.end360, %if.end277
  br label %if.end362, !dbg !12867

if.end362:                                        ; preds = %if.end361, %do_alg_shift
  %204 = load i8, i8* %cache_hit, align 1, !dbg !12868
  %tobool = icmp ne i8 %204, 0, !dbg !12868
  br i1 %tobool, label %if.then363, label %if.end364, !dbg !12870

if.then363:                                       ; preds = %if.end362
  br label %done, !dbg !12871

if.end364:                                        ; preds = %if.end362
  br label %if.end365, !dbg !12872

if.end365:                                        ; preds = %if.end364, %if.end193
  %205 = load i64, i64* %t.addr, align 8, !dbg !12873
  %and366 = and i64 %205, 1, !dbg !12875
  %cmp367 = icmp ne i64 %and366, 0, !dbg !12876
  br i1 %cmp367, label %if.then369, label %if.end583, !dbg !12877

if.then369:                                       ; preds = %if.end365
  call void @llvm.dbg.declare(metadata i64* %w, metadata !12878, metadata !DIExpression()), !dbg !12880
  br label %do_alg_addsub_t_m2, !dbg !12881

do_alg_addsub_t_m2:                               ; preds = %if.then369, %sw.bb188
  call void @llvm.dbg.label(metadata !12882), !dbg !12883
  store i64 1, i64* %w, align 8, !dbg !12884
  br label %for.cond, !dbg !12886

for.cond:                                         ; preds = %for.inc, %do_alg_addsub_t_m2
  %206 = load i64, i64* %w, align 8, !dbg !12887
  %207 = load i64, i64* %t.addr, align 8, !dbg !12889
  %and370 = and i64 %206, %207, !dbg !12890
  %cmp371 = icmp ne i64 %and370, 0, !dbg !12891
  br i1 %cmp371, label %for.body, label %for.end, !dbg !12892

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !12892

for.inc:                                          ; preds = %for.body
  %208 = load i64, i64* %w, align 8, !dbg !12893
  %shl = shl i64 %208, 1, !dbg !12893
  store i64 %shl, i64* %w, align 8, !dbg !12893
  br label %for.cond, !dbg !12894, !llvm.loop !12895

for.end:                                          ; preds = %for.cond
  %209 = load i64, i64* %w, align 8, !dbg !12897
  %cmp373 = icmp eq i64 %209, 0, !dbg !12899
  br i1 %cmp373, label %if.then381, label %lor.lhs.false375, !dbg !12900

lor.lhs.false375:                                 ; preds = %for.end
  %210 = load i64, i64* %w, align 8, !dbg !12901
  %cmp376 = icmp ugt i64 %210, 2, !dbg !12902
  br i1 %cmp376, label %land.lhs.true378, label %if.else442, !dbg !12903

land.lhs.true378:                                 ; preds = %lor.lhs.false375
  %211 = load i64, i64* %t.addr, align 8, !dbg !12904
  %cmp379 = icmp ne i64 %211, 3, !dbg !12905
  br i1 %cmp379, label %if.then381, label %if.else442, !dbg !12906

if.then381:                                       ; preds = %land.lhs.true378, %for.end
  %212 = load i8, i8* %speed, align 1, !dbg !12907
  %idxprom382 = zext i8 %212 to i64, !dbg !12909
  %arrayidx383 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom382, !dbg !12909
  %213 = load i32, i32* %mode.addr, align 4, !dbg !12910
  %idxprom384 = zext i32 %213 to i64, !dbg !12909
  %arrayidx385 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx383, i64 0, i64 %idxprom384, !dbg !12909
  %214 = load i32, i32* %arrayidx385, align 4, !dbg !12909
  store i32 %214, i32* %op_cost, align 4, !dbg !12911
  %cost386 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12912
  %215 = load i16, i16* %cost386, align 2, !dbg !12912
  %conv387 = sext i16 %215 to i32, !dbg !12913
  %216 = load i32, i32* %op_cost, align 4, !dbg !12914
  %sub388 = sub nsw i32 %conv387, %216, !dbg !12915
  %conv389 = trunc i32 %sub388 to i16, !dbg !12913
  %cost390 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 0, !dbg !12916
  store i16 %conv389, i16* %cost390, align 2, !dbg !12917
  %latency391 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !12918
  %217 = load i16, i16* %latency391, align 2, !dbg !12918
  %conv392 = sext i16 %217 to i32, !dbg !12919
  %218 = load i32, i32* %op_cost, align 4, !dbg !12920
  %sub393 = sub nsw i32 %conv392, %218, !dbg !12921
  %conv394 = trunc i32 %sub393 to i16, !dbg !12919
  %latency395 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 1, !dbg !12922
  store i16 %conv394, i16* %latency395, align 2, !dbg !12923
  %219 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12924
  %220 = load i64, i64* %t.addr, align 8, !dbg !12925
  %add396 = add i64 %220, 1, !dbg !12926
  %221 = load i32, i32* %mode.addr, align 4, !dbg !12927
  call void @synth_mult(%struct.algorithm* %219, i64 %add396, %struct.mult_cost* %new_limit, i32 %221), !dbg !12928
  %222 = load i32, i32* %op_cost, align 4, !dbg !12929
  %223 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12930
  %cost397 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %223, i32 0, i32 0, !dbg !12931
  %cost398 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost397, i32 0, i32 0, !dbg !12932
  %224 = load i16, i16* %cost398, align 4, !dbg !12933
  %conv399 = sext i16 %224 to i32, !dbg !12933
  %add400 = add nsw i32 %conv399, %222, !dbg !12933
  %conv401 = trunc i32 %add400 to i16, !dbg !12933
  store i16 %conv401, i16* %cost398, align 4, !dbg !12933
  %225 = load i32, i32* %op_cost, align 4, !dbg !12934
  %226 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12935
  %cost402 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %226, i32 0, i32 0, !dbg !12936
  %latency403 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost402, i32 0, i32 1, !dbg !12937
  %227 = load i16, i16* %latency403, align 2, !dbg !12938
  %conv404 = sext i16 %227 to i32, !dbg !12938
  %add405 = add nsw i32 %conv404, %225, !dbg !12938
  %conv406 = trunc i32 %add405 to i16, !dbg !12938
  store i16 %conv406, i16* %latency403, align 2, !dbg !12938
  %228 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12939
  %cost407 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %228, i32 0, i32 0, !dbg !12939
  %cost408 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost407, i32 0, i32 0, !dbg !12939
  %229 = load i16, i16* %cost408, align 4, !dbg !12939
  %conv409 = sext i16 %229 to i32, !dbg !12939
  %cost410 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12939
  %230 = load i16, i16* %cost410, align 2, !dbg !12939
  %conv411 = sext i16 %230 to i32, !dbg !12939
  %cmp412 = icmp slt i32 %conv409, %conv411, !dbg !12939
  br i1 %cmp412, label %if.then430, label %lor.lhs.false414, !dbg !12939

lor.lhs.false414:                                 ; preds = %if.then381
  %231 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12939
  %cost415 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %231, i32 0, i32 0, !dbg !12939
  %cost416 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost415, i32 0, i32 0, !dbg !12939
  %232 = load i16, i16* %cost416, align 4, !dbg !12939
  %conv417 = sext i16 %232 to i32, !dbg !12939
  %cost418 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12939
  %233 = load i16, i16* %cost418, align 2, !dbg !12939
  %conv419 = sext i16 %233 to i32, !dbg !12939
  %cmp420 = icmp eq i32 %conv417, %conv419, !dbg !12939
  br i1 %cmp420, label %land.lhs.true422, label %if.end441, !dbg !12939

land.lhs.true422:                                 ; preds = %lor.lhs.false414
  %234 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12939
  %cost423 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %234, i32 0, i32 0, !dbg !12939
  %latency424 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost423, i32 0, i32 1, !dbg !12939
  %235 = load i16, i16* %latency424, align 2, !dbg !12939
  %conv425 = sext i16 %235 to i32, !dbg !12939
  %latency426 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !12939
  %236 = load i16, i16* %latency426, align 2, !dbg !12939
  %conv427 = sext i16 %236 to i32, !dbg !12939
  %cmp428 = icmp slt i32 %conv425, %conv427, !dbg !12939
  br i1 %cmp428, label %if.then430, label %if.end441, !dbg !12941

if.then430:                                       ; preds = %land.lhs.true422, %if.then381
  call void @llvm.dbg.declare(metadata %struct.algorithm** %x431, metadata !12942, metadata !DIExpression()), !dbg !12944
  %237 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12945
  %cost432 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %237, i32 0, i32 0, !dbg !12946
  %238 = bitcast %struct.mult_cost* %best_cost to i8*, !dbg !12946
  %239 = bitcast %struct.mult_cost* %cost432 to i8*, !dbg !12946
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %238, i8* align 4 %239, i64 4, i1 false), !dbg !12946
  %240 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12947
  store %struct.algorithm* %240, %struct.algorithm** %x431, align 8, !dbg !12948
  %241 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12949
  store %struct.algorithm* %241, %struct.algorithm** %alg_in, align 8, !dbg !12950
  %242 = load %struct.algorithm*, %struct.algorithm** %x431, align 8, !dbg !12951
  store %struct.algorithm* %242, %struct.algorithm** %best_alg, align 8, !dbg !12952
  %243 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12953
  %log433 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %243, i32 0, i32 3, !dbg !12954
  %244 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12955
  %ops434 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %244, i32 0, i32 1, !dbg !12956
  %245 = load i16, i16* %ops434, align 4, !dbg !12956
  %idxprom435 = sext i16 %245 to i64, !dbg !12953
  %arrayidx436 = getelementptr inbounds [32 x i8], [32 x i8]* %log433, i64 0, i64 %idxprom435, !dbg !12953
  store i8 0, i8* %arrayidx436, align 1, !dbg !12957
  %246 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12958
  %op437 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %246, i32 0, i32 2, !dbg !12959
  %247 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !12960
  %ops438 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %247, i32 0, i32 1, !dbg !12961
  %248 = load i16, i16* %ops438, align 4, !dbg !12961
  %idxprom439 = sext i16 %248 to i64, !dbg !12958
  %arrayidx440 = getelementptr inbounds [32 x i32], [32 x i32]* %op437, i64 0, i64 %idxprom439, !dbg !12958
  store i32 5, i32* %arrayidx440, align 4, !dbg !12962
  br label %if.end441, !dbg !12963

if.end441:                                        ; preds = %if.then430, %land.lhs.true422, %lor.lhs.false414
  br label %if.end503, !dbg !12964

if.else442:                                       ; preds = %land.lhs.true378, %lor.lhs.false375
  %249 = load i8, i8* %speed, align 1, !dbg !12965
  %idxprom443 = zext i8 %249 to i64, !dbg !12967
  %arrayidx444 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom443, !dbg !12967
  %250 = load i32, i32* %mode.addr, align 4, !dbg !12968
  %idxprom445 = zext i32 %250 to i64, !dbg !12967
  %arrayidx446 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx444, i64 0, i64 %idxprom445, !dbg !12967
  %251 = load i32, i32* %arrayidx446, align 4, !dbg !12967
  store i32 %251, i32* %op_cost, align 4, !dbg !12969
  %cost447 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12970
  %252 = load i16, i16* %cost447, align 2, !dbg !12970
  %conv448 = sext i16 %252 to i32, !dbg !12971
  %253 = load i32, i32* %op_cost, align 4, !dbg !12972
  %sub449 = sub nsw i32 %conv448, %253, !dbg !12973
  %conv450 = trunc i32 %sub449 to i16, !dbg !12971
  %cost451 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 0, !dbg !12974
  store i16 %conv450, i16* %cost451, align 2, !dbg !12975
  %latency452 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !12976
  %254 = load i16, i16* %latency452, align 2, !dbg !12976
  %conv453 = sext i16 %254 to i32, !dbg !12977
  %255 = load i32, i32* %op_cost, align 4, !dbg !12978
  %sub454 = sub nsw i32 %conv453, %255, !dbg !12979
  %conv455 = trunc i32 %sub454 to i16, !dbg !12977
  %latency456 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 1, !dbg !12980
  store i16 %conv455, i16* %latency456, align 2, !dbg !12981
  %256 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12982
  %257 = load i64, i64* %t.addr, align 8, !dbg !12983
  %sub457 = sub i64 %257, 1, !dbg !12984
  %258 = load i32, i32* %mode.addr, align 4, !dbg !12985
  call void @synth_mult(%struct.algorithm* %256, i64 %sub457, %struct.mult_cost* %new_limit, i32 %258), !dbg !12986
  %259 = load i32, i32* %op_cost, align 4, !dbg !12987
  %260 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12988
  %cost458 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %260, i32 0, i32 0, !dbg !12989
  %cost459 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost458, i32 0, i32 0, !dbg !12990
  %261 = load i16, i16* %cost459, align 4, !dbg !12991
  %conv460 = sext i16 %261 to i32, !dbg !12991
  %add461 = add nsw i32 %conv460, %259, !dbg !12991
  %conv462 = trunc i32 %add461 to i16, !dbg !12991
  store i16 %conv462, i16* %cost459, align 4, !dbg !12991
  %262 = load i32, i32* %op_cost, align 4, !dbg !12992
  %263 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12993
  %cost463 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %263, i32 0, i32 0, !dbg !12994
  %latency464 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost463, i32 0, i32 1, !dbg !12995
  %264 = load i16, i16* %latency464, align 2, !dbg !12996
  %conv465 = sext i16 %264 to i32, !dbg !12996
  %add466 = add nsw i32 %conv465, %262, !dbg !12996
  %conv467 = trunc i32 %add466 to i16, !dbg !12996
  store i16 %conv467, i16* %latency464, align 2, !dbg !12996
  %265 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12997
  %cost468 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %265, i32 0, i32 0, !dbg !12997
  %cost469 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost468, i32 0, i32 0, !dbg !12997
  %266 = load i16, i16* %cost469, align 4, !dbg !12997
  %conv470 = sext i16 %266 to i32, !dbg !12997
  %cost471 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12997
  %267 = load i16, i16* %cost471, align 2, !dbg !12997
  %conv472 = sext i16 %267 to i32, !dbg !12997
  %cmp473 = icmp slt i32 %conv470, %conv472, !dbg !12997
  br i1 %cmp473, label %if.then491, label %lor.lhs.false475, !dbg !12997

lor.lhs.false475:                                 ; preds = %if.else442
  %268 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12997
  %cost476 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %268, i32 0, i32 0, !dbg !12997
  %cost477 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost476, i32 0, i32 0, !dbg !12997
  %269 = load i16, i16* %cost477, align 4, !dbg !12997
  %conv478 = sext i16 %269 to i32, !dbg !12997
  %cost479 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !12997
  %270 = load i16, i16* %cost479, align 2, !dbg !12997
  %conv480 = sext i16 %270 to i32, !dbg !12997
  %cmp481 = icmp eq i32 %conv478, %conv480, !dbg !12997
  br i1 %cmp481, label %land.lhs.true483, label %if.end502, !dbg !12997

land.lhs.true483:                                 ; preds = %lor.lhs.false475
  %271 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !12997
  %cost484 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %271, i32 0, i32 0, !dbg !12997
  %latency485 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost484, i32 0, i32 1, !dbg !12997
  %272 = load i16, i16* %latency485, align 2, !dbg !12997
  %conv486 = sext i16 %272 to i32, !dbg !12997
  %latency487 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !12997
  %273 = load i16, i16* %latency487, align 2, !dbg !12997
  %conv488 = sext i16 %273 to i32, !dbg !12997
  %cmp489 = icmp slt i32 %conv486, %conv488, !dbg !12997
  br i1 %cmp489, label %if.then491, label %if.end502, !dbg !12999

if.then491:                                       ; preds = %land.lhs.true483, %if.else442
  call void @llvm.dbg.declare(metadata %struct.algorithm** %x492, metadata !13000, metadata !DIExpression()), !dbg !13002
  %274 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13003
  %cost493 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %274, i32 0, i32 0, !dbg !13004
  %275 = bitcast %struct.mult_cost* %best_cost to i8*, !dbg !13004
  %276 = bitcast %struct.mult_cost* %cost493 to i8*, !dbg !13004
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %275, i8* align 4 %276, i64 4, i1 false), !dbg !13004
  %277 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13005
  store %struct.algorithm* %277, %struct.algorithm** %x492, align 8, !dbg !13006
  %278 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13007
  store %struct.algorithm* %278, %struct.algorithm** %alg_in, align 8, !dbg !13008
  %279 = load %struct.algorithm*, %struct.algorithm** %x492, align 8, !dbg !13009
  store %struct.algorithm* %279, %struct.algorithm** %best_alg, align 8, !dbg !13010
  %280 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13011
  %log494 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %280, i32 0, i32 3, !dbg !13012
  %281 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13013
  %ops495 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %281, i32 0, i32 1, !dbg !13014
  %282 = load i16, i16* %ops495, align 4, !dbg !13014
  %idxprom496 = sext i16 %282 to i64, !dbg !13011
  %arrayidx497 = getelementptr inbounds [32 x i8], [32 x i8]* %log494, i64 0, i64 %idxprom496, !dbg !13011
  store i8 0, i8* %arrayidx497, align 1, !dbg !13015
  %283 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13016
  %op498 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %283, i32 0, i32 2, !dbg !13017
  %284 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13018
  %ops499 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %284, i32 0, i32 1, !dbg !13019
  %285 = load i16, i16* %ops499, align 4, !dbg !13019
  %idxprom500 = sext i16 %285 to i64, !dbg !13016
  %arrayidx501 = getelementptr inbounds [32 x i32], [32 x i32]* %op498, i64 0, i64 %idxprom500, !dbg !13016
  store i32 4, i32* %arrayidx501, align 4, !dbg !13020
  br label %if.end502, !dbg !13021

if.end502:                                        ; preds = %if.then491, %land.lhs.true483, %lor.lhs.false475
  br label %if.end503

if.end503:                                        ; preds = %if.end502, %if.end441
  %286 = load i64, i64* %orig_t, align 8, !dbg !13022
  %sub504 = sub i64 0, %286, !dbg !13023
  %add505 = add i64 %sub504, 1, !dbg !13024
  %call506 = call i32 @exact_log2(i64 %add505), !dbg !13025
  store i32 %call506, i32* %m, align 4, !dbg !13026
  %287 = load i32, i32* %m, align 4, !dbg !13027
  %cmp507 = icmp sge i32 %287, 0, !dbg !13029
  br i1 %cmp507, label %land.lhs.true509, label %if.end579, !dbg !13030

land.lhs.true509:                                 ; preds = %if.end503
  %288 = load i32, i32* %m, align 4, !dbg !13031
  %289 = load i32, i32* %maxm, align 4, !dbg !13032
  %cmp510 = icmp slt i32 %288, %289, !dbg !13033
  br i1 %cmp510, label %if.then512, label %if.end579, !dbg !13034

if.then512:                                       ; preds = %land.lhs.true509
  %290 = load i8, i8* %speed, align 1, !dbg !13035
  %idxprom513 = zext i8 %290 to i64, !dbg !13037
  %arrayidx514 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftsub1_cost, i64 0, i64 %idxprom513, !dbg !13037
  %291 = load i32, i32* %mode.addr, align 4, !dbg !13038
  %idxprom515 = zext i32 %291 to i64, !dbg !13037
  %arrayidx516 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx514, i64 0, i64 %idxprom515, !dbg !13037
  %292 = load i32, i32* %m, align 4, !dbg !13039
  %idxprom517 = sext i32 %292 to i64, !dbg !13037
  %arrayidx518 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx516, i64 0, i64 %idxprom517, !dbg !13037
  %293 = load i32, i32* %arrayidx518, align 4, !dbg !13037
  store i32 %293, i32* %op_cost, align 4, !dbg !13040
  %cost519 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13041
  %294 = load i16, i16* %cost519, align 2, !dbg !13041
  %conv520 = sext i16 %294 to i32, !dbg !13042
  %295 = load i32, i32* %op_cost, align 4, !dbg !13043
  %sub521 = sub nsw i32 %conv520, %295, !dbg !13044
  %conv522 = trunc i32 %sub521 to i16, !dbg !13042
  %cost523 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 0, !dbg !13045
  store i16 %conv522, i16* %cost523, align 2, !dbg !13046
  %latency524 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13047
  %296 = load i16, i16* %latency524, align 2, !dbg !13047
  %conv525 = sext i16 %296 to i32, !dbg !13048
  %297 = load i32, i32* %op_cost, align 4, !dbg !13049
  %sub526 = sub nsw i32 %conv525, %297, !dbg !13050
  %conv527 = trunc i32 %sub526 to i16, !dbg !13048
  %latency528 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 1, !dbg !13051
  store i16 %conv527, i16* %latency528, align 2, !dbg !13052
  %298 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13053
  %299 = load i64, i64* %orig_t, align 8, !dbg !13054
  %sub529 = sub i64 0, %299, !dbg !13055
  %add530 = add i64 %sub529, 1, !dbg !13056
  %300 = load i32, i32* %m, align 4, !dbg !13057
  %sh_prom531 = zext i32 %300 to i64, !dbg !13058
  %shr532 = lshr i64 %add530, %sh_prom531, !dbg !13058
  %301 = load i32, i32* %mode.addr, align 4, !dbg !13059
  call void @synth_mult(%struct.algorithm* %298, i64 %shr532, %struct.mult_cost* %new_limit, i32 %301), !dbg !13060
  %302 = load i32, i32* %op_cost, align 4, !dbg !13061
  %303 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13062
  %cost533 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %303, i32 0, i32 0, !dbg !13063
  %cost534 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost533, i32 0, i32 0, !dbg !13064
  %304 = load i16, i16* %cost534, align 4, !dbg !13065
  %conv535 = sext i16 %304 to i32, !dbg !13065
  %add536 = add nsw i32 %conv535, %302, !dbg !13065
  %conv537 = trunc i32 %add536 to i16, !dbg !13065
  store i16 %conv537, i16* %cost534, align 4, !dbg !13065
  %305 = load i32, i32* %op_cost, align 4, !dbg !13066
  %306 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13067
  %cost538 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %306, i32 0, i32 0, !dbg !13068
  %latency539 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost538, i32 0, i32 1, !dbg !13069
  %307 = load i16, i16* %latency539, align 2, !dbg !13070
  %conv540 = sext i16 %307 to i32, !dbg !13070
  %add541 = add nsw i32 %conv540, %305, !dbg !13070
  %conv542 = trunc i32 %add541 to i16, !dbg !13070
  store i16 %conv542, i16* %latency539, align 2, !dbg !13070
  %308 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13071
  %cost543 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %308, i32 0, i32 0, !dbg !13071
  %cost544 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost543, i32 0, i32 0, !dbg !13071
  %309 = load i16, i16* %cost544, align 4, !dbg !13071
  %conv545 = sext i16 %309 to i32, !dbg !13071
  %cost546 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13071
  %310 = load i16, i16* %cost546, align 2, !dbg !13071
  %conv547 = sext i16 %310 to i32, !dbg !13071
  %cmp548 = icmp slt i32 %conv545, %conv547, !dbg !13071
  br i1 %cmp548, label %if.then566, label %lor.lhs.false550, !dbg !13071

lor.lhs.false550:                                 ; preds = %if.then512
  %311 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13071
  %cost551 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %311, i32 0, i32 0, !dbg !13071
  %cost552 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost551, i32 0, i32 0, !dbg !13071
  %312 = load i16, i16* %cost552, align 4, !dbg !13071
  %conv553 = sext i16 %312 to i32, !dbg !13071
  %cost554 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13071
  %313 = load i16, i16* %cost554, align 2, !dbg !13071
  %conv555 = sext i16 %313 to i32, !dbg !13071
  %cmp556 = icmp eq i32 %conv553, %conv555, !dbg !13071
  br i1 %cmp556, label %land.lhs.true558, label %if.end578, !dbg !13071

land.lhs.true558:                                 ; preds = %lor.lhs.false550
  %314 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13071
  %cost559 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %314, i32 0, i32 0, !dbg !13071
  %latency560 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost559, i32 0, i32 1, !dbg !13071
  %315 = load i16, i16* %latency560, align 2, !dbg !13071
  %conv561 = sext i16 %315 to i32, !dbg !13071
  %latency562 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13071
  %316 = load i16, i16* %latency562, align 2, !dbg !13071
  %conv563 = sext i16 %316 to i32, !dbg !13071
  %cmp564 = icmp slt i32 %conv561, %conv563, !dbg !13071
  br i1 %cmp564, label %if.then566, label %if.end578, !dbg !13073

if.then566:                                       ; preds = %land.lhs.true558, %if.then512
  call void @llvm.dbg.declare(metadata %struct.algorithm** %x567, metadata !13074, metadata !DIExpression()), !dbg !13076
  %317 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13077
  %cost568 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %317, i32 0, i32 0, !dbg !13078
  %318 = bitcast %struct.mult_cost* %best_cost to i8*, !dbg !13078
  %319 = bitcast %struct.mult_cost* %cost568 to i8*, !dbg !13078
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %318, i8* align 4 %319, i64 4, i1 false), !dbg !13078
  %320 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13079
  store %struct.algorithm* %320, %struct.algorithm** %x567, align 8, !dbg !13080
  %321 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13081
  store %struct.algorithm* %321, %struct.algorithm** %alg_in, align 8, !dbg !13082
  %322 = load %struct.algorithm*, %struct.algorithm** %x567, align 8, !dbg !13083
  store %struct.algorithm* %322, %struct.algorithm** %best_alg, align 8, !dbg !13084
  %323 = load i32, i32* %m, align 4, !dbg !13085
  %conv569 = trunc i32 %323 to i8, !dbg !13085
  %324 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13086
  %log570 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %324, i32 0, i32 3, !dbg !13087
  %325 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13088
  %ops571 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %325, i32 0, i32 1, !dbg !13089
  %326 = load i16, i16* %ops571, align 4, !dbg !13089
  %idxprom572 = sext i16 %326 to i64, !dbg !13086
  %arrayidx573 = getelementptr inbounds [32 x i8], [32 x i8]* %log570, i64 0, i64 %idxprom572, !dbg !13086
  store i8 %conv569, i8* %arrayidx573, align 1, !dbg !13090
  %327 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13091
  %op574 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %327, i32 0, i32 2, !dbg !13092
  %328 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13093
  %ops575 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %328, i32 0, i32 1, !dbg !13094
  %329 = load i16, i16* %ops575, align 4, !dbg !13094
  %idxprom576 = sext i16 %329 to i64, !dbg !13091
  %arrayidx577 = getelementptr inbounds [32 x i32], [32 x i32]* %op574, i64 0, i64 %idxprom576, !dbg !13091
  store i32 5, i32* %arrayidx577, align 4, !dbg !13095
  br label %if.end578, !dbg !13096

if.end578:                                        ; preds = %if.then566, %land.lhs.true558, %lor.lhs.false550
  br label %if.end579, !dbg !13097

if.end579:                                        ; preds = %if.end578, %land.lhs.true509, %if.end503
  %330 = load i8, i8* %cache_hit, align 1, !dbg !13098
  %tobool580 = icmp ne i8 %330, 0, !dbg !13098
  br i1 %tobool580, label %if.then581, label %if.end582, !dbg !13100

if.then581:                                       ; preds = %if.end579
  br label %done, !dbg !13101

if.end582:                                        ; preds = %if.end579
  br label %if.end583, !dbg !13102

if.end583:                                        ; preds = %if.end582, %if.end365
  br label %do_alg_addsub_factor, !dbg !13103

do_alg_addsub_factor:                             ; preds = %if.end583, %sw.bb189
  call void @llvm.dbg.label(metadata !13104), !dbg !13105
  %331 = load i64, i64* %t.addr, align 8, !dbg !13106
  %sub584 = sub i64 %331, 1, !dbg !13108
  %call585 = call i32 @floor_log2(i64 %sub584), !dbg !13109
  store i32 %call585, i32* %m, align 4, !dbg !13110
  br label %for.cond586, !dbg !13111

for.cond586:                                      ; preds = %for.inc825, %do_alg_addsub_factor
  %332 = load i32, i32* %m, align 4, !dbg !13112
  %cmp587 = icmp sge i32 %332, 2, !dbg !13114
  br i1 %cmp587, label %for.body589, label %for.end826, !dbg !13115

for.body589:                                      ; preds = %for.cond586
  call void @llvm.dbg.declare(metadata i64* %d, metadata !13116, metadata !DIExpression()), !dbg !13118
  %333 = load i32, i32* %m, align 4, !dbg !13119
  %sh_prom590 = zext i32 %333 to i64, !dbg !13120
  %shl591 = shl i64 1, %sh_prom590, !dbg !13120
  %add592 = add i64 %shl591, 1, !dbg !13121
  store i64 %add592, i64* %d, align 8, !dbg !13122
  %334 = load i64, i64* %t.addr, align 8, !dbg !13123
  %335 = load i64, i64* %d, align 8, !dbg !13125
  %rem593 = urem i64 %334, %335, !dbg !13126
  %cmp594 = icmp eq i64 %rem593, 0, !dbg !13127
  br i1 %cmp594, label %land.lhs.true596, label %if.end706, !dbg !13128

land.lhs.true596:                                 ; preds = %for.body589
  %336 = load i64, i64* %t.addr, align 8, !dbg !13129
  %337 = load i64, i64* %d, align 8, !dbg !13130
  %cmp597 = icmp ugt i64 %336, %337, !dbg !13131
  br i1 %cmp597, label %land.lhs.true599, label %if.end706, !dbg !13132

land.lhs.true599:                                 ; preds = %land.lhs.true596
  %338 = load i32, i32* %m, align 4, !dbg !13133
  %339 = load i32, i32* %maxm, align 4, !dbg !13134
  %cmp600 = icmp slt i32 %338, %339, !dbg !13135
  br i1 %cmp600, label %land.lhs.true602, label %if.end706, !dbg !13136

land.lhs.true602:                                 ; preds = %land.lhs.true599
  %340 = load i8, i8* %cache_hit, align 1, !dbg !13137
  %tobool603 = icmp ne i8 %340, 0, !dbg !13137
  br i1 %tobool603, label %lor.lhs.false604, label %if.then607, !dbg !13138

lor.lhs.false604:                                 ; preds = %land.lhs.true602
  %341 = load i32, i32* %cache_alg, align 4, !dbg !13139
  %cmp605 = icmp eq i32 %341, 6, !dbg !13140
  br i1 %cmp605, label %if.then607, label %if.end706, !dbg !13141

if.then607:                                       ; preds = %lor.lhs.false604, %land.lhs.true602
  %342 = load i8, i8* %speed, align 1, !dbg !13142
  %idxprom608 = zext i8 %342 to i64, !dbg !13144
  %arrayidx609 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom608, !dbg !13144
  %343 = load i32, i32* %mode.addr, align 4, !dbg !13145
  %idxprom610 = zext i32 %343 to i64, !dbg !13144
  %arrayidx611 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx609, i64 0, i64 %idxprom610, !dbg !13144
  %344 = load i32, i32* %arrayidx611, align 4, !dbg !13144
  %345 = load i8, i8* %speed, align 1, !dbg !13146
  %idxprom612 = zext i8 %345 to i64, !dbg !13147
  %arrayidx613 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom612, !dbg !13147
  %346 = load i32, i32* %mode.addr, align 4, !dbg !13148
  %idxprom614 = zext i32 %346 to i64, !dbg !13147
  %arrayidx615 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx613, i64 0, i64 %idxprom614, !dbg !13147
  %347 = load i32, i32* %m, align 4, !dbg !13149
  %idxprom616 = sext i32 %347 to i64, !dbg !13147
  %arrayidx617 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx615, i64 0, i64 %idxprom616, !dbg !13147
  %348 = load i32, i32* %arrayidx617, align 4, !dbg !13147
  %add618 = add nsw i32 %344, %348, !dbg !13150
  store i32 %add618, i32* %op_cost, align 4, !dbg !13151
  %349 = load i8, i8* %speed, align 1, !dbg !13152
  %idxprom619 = zext i8 %349 to i64, !dbg !13154
  %arrayidx620 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftadd_cost, i64 0, i64 %idxprom619, !dbg !13154
  %350 = load i32, i32* %mode.addr, align 4, !dbg !13155
  %idxprom621 = zext i32 %350 to i64, !dbg !13154
  %arrayidx622 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx620, i64 0, i64 %idxprom621, !dbg !13154
  %351 = load i32, i32* %m, align 4, !dbg !13156
  %idxprom623 = sext i32 %351 to i64, !dbg !13154
  %arrayidx624 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx622, i64 0, i64 %idxprom623, !dbg !13154
  %352 = load i32, i32* %arrayidx624, align 4, !dbg !13154
  %353 = load i32, i32* %op_cost, align 4, !dbg !13157
  %cmp625 = icmp slt i32 %352, %353, !dbg !13158
  br i1 %cmp625, label %if.then627, label %if.else634, !dbg !13159

if.then627:                                       ; preds = %if.then607
  %354 = load i8, i8* %speed, align 1, !dbg !13160
  %idxprom628 = zext i8 %354 to i64, !dbg !13162
  %arrayidx629 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftadd_cost, i64 0, i64 %idxprom628, !dbg !13162
  %355 = load i32, i32* %mode.addr, align 4, !dbg !13163
  %idxprom630 = zext i32 %355 to i64, !dbg !13162
  %arrayidx631 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx629, i64 0, i64 %idxprom630, !dbg !13162
  %356 = load i32, i32* %m, align 4, !dbg !13164
  %idxprom632 = sext i32 %356 to i64, !dbg !13162
  %arrayidx633 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx631, i64 0, i64 %idxprom632, !dbg !13162
  %357 = load i32, i32* %arrayidx633, align 4, !dbg !13162
  store i32 %357, i32* %op_cost, align 4, !dbg !13165
  %358 = load i32, i32* %op_cost, align 4, !dbg !13166
  store i32 %358, i32* %op_latency, align 4, !dbg !13167
  br label %if.end639, !dbg !13168

if.else634:                                       ; preds = %if.then607
  %359 = load i8, i8* %speed, align 1, !dbg !13169
  %idxprom635 = zext i8 %359 to i64, !dbg !13170
  %arrayidx636 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom635, !dbg !13170
  %360 = load i32, i32* %mode.addr, align 4, !dbg !13171
  %idxprom637 = zext i32 %360 to i64, !dbg !13170
  %arrayidx638 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx636, i64 0, i64 %idxprom637, !dbg !13170
  %361 = load i32, i32* %arrayidx638, align 4, !dbg !13170
  store i32 %361, i32* %op_latency, align 4, !dbg !13172
  br label %if.end639

if.end639:                                        ; preds = %if.else634, %if.then627
  %cost640 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13173
  %362 = load i16, i16* %cost640, align 2, !dbg !13173
  %conv641 = sext i16 %362 to i32, !dbg !13174
  %363 = load i32, i32* %op_cost, align 4, !dbg !13175
  %sub642 = sub nsw i32 %conv641, %363, !dbg !13176
  %conv643 = trunc i32 %sub642 to i16, !dbg !13174
  %cost644 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 0, !dbg !13177
  store i16 %conv643, i16* %cost644, align 2, !dbg !13178
  %latency645 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13179
  %364 = load i16, i16* %latency645, align 2, !dbg !13179
  %conv646 = sext i16 %364 to i32, !dbg !13180
  %365 = load i32, i32* %op_latency, align 4, !dbg !13181
  %sub647 = sub nsw i32 %conv646, %365, !dbg !13182
  %conv648 = trunc i32 %sub647 to i16, !dbg !13180
  %latency649 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 1, !dbg !13183
  store i16 %conv648, i16* %latency649, align 2, !dbg !13184
  %366 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13185
  %367 = load i64, i64* %t.addr, align 8, !dbg !13186
  %368 = load i64, i64* %d, align 8, !dbg !13187
  %div = udiv i64 %367, %368, !dbg !13188
  %369 = load i32, i32* %mode.addr, align 4, !dbg !13189
  call void @synth_mult(%struct.algorithm* %366, i64 %div, %struct.mult_cost* %new_limit, i32 %369), !dbg !13190
  %370 = load i32, i32* %op_cost, align 4, !dbg !13191
  %371 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13192
  %cost650 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %371, i32 0, i32 0, !dbg !13193
  %cost651 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost650, i32 0, i32 0, !dbg !13194
  %372 = load i16, i16* %cost651, align 4, !dbg !13195
  %conv652 = sext i16 %372 to i32, !dbg !13195
  %add653 = add nsw i32 %conv652, %370, !dbg !13195
  %conv654 = trunc i32 %add653 to i16, !dbg !13195
  store i16 %conv654, i16* %cost651, align 4, !dbg !13195
  %373 = load i32, i32* %op_latency, align 4, !dbg !13196
  %374 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13197
  %cost655 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %374, i32 0, i32 0, !dbg !13198
  %latency656 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost655, i32 0, i32 1, !dbg !13199
  %375 = load i16, i16* %latency656, align 2, !dbg !13200
  %conv657 = sext i16 %375 to i32, !dbg !13200
  %add658 = add nsw i32 %conv657, %373, !dbg !13200
  %conv659 = trunc i32 %add658 to i16, !dbg !13200
  store i16 %conv659, i16* %latency656, align 2, !dbg !13200
  %376 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13201
  %cost660 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %376, i32 0, i32 0, !dbg !13203
  %latency661 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost660, i32 0, i32 1, !dbg !13204
  %377 = load i16, i16* %latency661, align 2, !dbg !13204
  %conv662 = sext i16 %377 to i32, !dbg !13201
  %378 = load i32, i32* %op_cost, align 4, !dbg !13205
  %cmp663 = icmp slt i32 %conv662, %378, !dbg !13206
  br i1 %cmp663, label %if.then665, label %if.end669, !dbg !13207

if.then665:                                       ; preds = %if.end639
  %379 = load i32, i32* %op_cost, align 4, !dbg !13208
  %conv666 = trunc i32 %379 to i16, !dbg !13208
  %380 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13209
  %cost667 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %380, i32 0, i32 0, !dbg !13210
  %latency668 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost667, i32 0, i32 1, !dbg !13211
  store i16 %conv666, i16* %latency668, align 2, !dbg !13212
  br label %if.end669, !dbg !13209

if.end669:                                        ; preds = %if.then665, %if.end639
  %381 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13213
  %cost670 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %381, i32 0, i32 0, !dbg !13213
  %cost671 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost670, i32 0, i32 0, !dbg !13213
  %382 = load i16, i16* %cost671, align 4, !dbg !13213
  %conv672 = sext i16 %382 to i32, !dbg !13213
  %cost673 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13213
  %383 = load i16, i16* %cost673, align 2, !dbg !13213
  %conv674 = sext i16 %383 to i32, !dbg !13213
  %cmp675 = icmp slt i32 %conv672, %conv674, !dbg !13213
  br i1 %cmp675, label %if.then693, label %lor.lhs.false677, !dbg !13213

lor.lhs.false677:                                 ; preds = %if.end669
  %384 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13213
  %cost678 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %384, i32 0, i32 0, !dbg !13213
  %cost679 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost678, i32 0, i32 0, !dbg !13213
  %385 = load i16, i16* %cost679, align 4, !dbg !13213
  %conv680 = sext i16 %385 to i32, !dbg !13213
  %cost681 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13213
  %386 = load i16, i16* %cost681, align 2, !dbg !13213
  %conv682 = sext i16 %386 to i32, !dbg !13213
  %cmp683 = icmp eq i32 %conv680, %conv682, !dbg !13213
  br i1 %cmp683, label %land.lhs.true685, label %if.end705, !dbg !13213

land.lhs.true685:                                 ; preds = %lor.lhs.false677
  %387 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13213
  %cost686 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %387, i32 0, i32 0, !dbg !13213
  %latency687 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost686, i32 0, i32 1, !dbg !13213
  %388 = load i16, i16* %latency687, align 2, !dbg !13213
  %conv688 = sext i16 %388 to i32, !dbg !13213
  %latency689 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13213
  %389 = load i16, i16* %latency689, align 2, !dbg !13213
  %conv690 = sext i16 %389 to i32, !dbg !13213
  %cmp691 = icmp slt i32 %conv688, %conv690, !dbg !13213
  br i1 %cmp691, label %if.then693, label %if.end705, !dbg !13215

if.then693:                                       ; preds = %land.lhs.true685, %if.end669
  call void @llvm.dbg.declare(metadata %struct.algorithm** %x694, metadata !13216, metadata !DIExpression()), !dbg !13218
  %390 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13219
  %cost695 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %390, i32 0, i32 0, !dbg !13220
  %391 = bitcast %struct.mult_cost* %best_cost to i8*, !dbg !13220
  %392 = bitcast %struct.mult_cost* %cost695 to i8*, !dbg !13220
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %391, i8* align 4 %392, i64 4, i1 false), !dbg !13220
  %393 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13221
  store %struct.algorithm* %393, %struct.algorithm** %x694, align 8, !dbg !13222
  %394 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13223
  store %struct.algorithm* %394, %struct.algorithm** %alg_in, align 8, !dbg !13224
  %395 = load %struct.algorithm*, %struct.algorithm** %x694, align 8, !dbg !13225
  store %struct.algorithm* %395, %struct.algorithm** %best_alg, align 8, !dbg !13226
  %396 = load i32, i32* %m, align 4, !dbg !13227
  %conv696 = trunc i32 %396 to i8, !dbg !13227
  %397 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13228
  %log697 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %397, i32 0, i32 3, !dbg !13229
  %398 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13230
  %ops698 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %398, i32 0, i32 1, !dbg !13231
  %399 = load i16, i16* %ops698, align 4, !dbg !13231
  %idxprom699 = sext i16 %399 to i64, !dbg !13228
  %arrayidx700 = getelementptr inbounds [32 x i8], [32 x i8]* %log697, i64 0, i64 %idxprom699, !dbg !13228
  store i8 %conv696, i8* %arrayidx700, align 1, !dbg !13232
  %400 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13233
  %op701 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %400, i32 0, i32 2, !dbg !13234
  %401 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13235
  %ops702 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %401, i32 0, i32 1, !dbg !13236
  %402 = load i16, i16* %ops702, align 4, !dbg !13236
  %idxprom703 = sext i16 %402 to i64, !dbg !13233
  %arrayidx704 = getelementptr inbounds [32 x i32], [32 x i32]* %op701, i64 0, i64 %idxprom703, !dbg !13233
  store i32 6, i32* %arrayidx704, align 4, !dbg !13237
  br label %if.end705, !dbg !13238

if.end705:                                        ; preds = %if.then693, %land.lhs.true685, %lor.lhs.false677
  br label %for.end826, !dbg !13239

if.end706:                                        ; preds = %lor.lhs.false604, %land.lhs.true599, %land.lhs.true596, %for.body589
  %403 = load i32, i32* %m, align 4, !dbg !13240
  %sh_prom707 = zext i32 %403 to i64, !dbg !13241
  %shl708 = shl i64 1, %sh_prom707, !dbg !13241
  %sub709 = sub i64 %shl708, 1, !dbg !13242
  store i64 %sub709, i64* %d, align 8, !dbg !13243
  %404 = load i64, i64* %t.addr, align 8, !dbg !13244
  %405 = load i64, i64* %d, align 8, !dbg !13246
  %rem710 = urem i64 %404, %405, !dbg !13247
  %cmp711 = icmp eq i64 %rem710, 0, !dbg !13248
  br i1 %cmp711, label %land.lhs.true713, label %if.end824, !dbg !13249

land.lhs.true713:                                 ; preds = %if.end706
  %406 = load i64, i64* %t.addr, align 8, !dbg !13250
  %407 = load i64, i64* %d, align 8, !dbg !13251
  %cmp714 = icmp ugt i64 %406, %407, !dbg !13252
  br i1 %cmp714, label %land.lhs.true716, label %if.end824, !dbg !13253

land.lhs.true716:                                 ; preds = %land.lhs.true713
  %408 = load i32, i32* %m, align 4, !dbg !13254
  %409 = load i32, i32* %maxm, align 4, !dbg !13255
  %cmp717 = icmp slt i32 %408, %409, !dbg !13256
  br i1 %cmp717, label %land.lhs.true719, label %if.end824, !dbg !13257

land.lhs.true719:                                 ; preds = %land.lhs.true716
  %410 = load i8, i8* %cache_hit, align 1, !dbg !13258
  %tobool720 = icmp ne i8 %410, 0, !dbg !13258
  br i1 %tobool720, label %lor.lhs.false721, label %if.then724, !dbg !13259

lor.lhs.false721:                                 ; preds = %land.lhs.true719
  %411 = load i32, i32* %cache_alg, align 4, !dbg !13260
  %cmp722 = icmp eq i32 %411, 7, !dbg !13261
  br i1 %cmp722, label %if.then724, label %if.end824, !dbg !13262

if.then724:                                       ; preds = %lor.lhs.false721, %land.lhs.true719
  %412 = load i8, i8* %speed, align 1, !dbg !13263
  %idxprom725 = zext i8 %412 to i64, !dbg !13265
  %arrayidx726 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom725, !dbg !13265
  %413 = load i32, i32* %mode.addr, align 4, !dbg !13266
  %idxprom727 = zext i32 %413 to i64, !dbg !13265
  %arrayidx728 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx726, i64 0, i64 %idxprom727, !dbg !13265
  %414 = load i32, i32* %arrayidx728, align 4, !dbg !13265
  %415 = load i8, i8* %speed, align 1, !dbg !13267
  %idxprom729 = zext i8 %415 to i64, !dbg !13268
  %arrayidx730 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom729, !dbg !13268
  %416 = load i32, i32* %mode.addr, align 4, !dbg !13269
  %idxprom731 = zext i32 %416 to i64, !dbg !13268
  %arrayidx732 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx730, i64 0, i64 %idxprom731, !dbg !13268
  %417 = load i32, i32* %m, align 4, !dbg !13270
  %idxprom733 = sext i32 %417 to i64, !dbg !13268
  %arrayidx734 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx732, i64 0, i64 %idxprom733, !dbg !13268
  %418 = load i32, i32* %arrayidx734, align 4, !dbg !13268
  %add735 = add nsw i32 %414, %418, !dbg !13271
  store i32 %add735, i32* %op_cost, align 4, !dbg !13272
  %419 = load i8, i8* %speed, align 1, !dbg !13273
  %idxprom736 = zext i8 %419 to i64, !dbg !13275
  %arrayidx737 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftsub0_cost, i64 0, i64 %idxprom736, !dbg !13275
  %420 = load i32, i32* %mode.addr, align 4, !dbg !13276
  %idxprom738 = zext i32 %420 to i64, !dbg !13275
  %arrayidx739 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx737, i64 0, i64 %idxprom738, !dbg !13275
  %421 = load i32, i32* %m, align 4, !dbg !13277
  %idxprom740 = sext i32 %421 to i64, !dbg !13275
  %arrayidx741 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx739, i64 0, i64 %idxprom740, !dbg !13275
  %422 = load i32, i32* %arrayidx741, align 4, !dbg !13275
  %423 = load i32, i32* %op_cost, align 4, !dbg !13278
  %cmp742 = icmp slt i32 %422, %423, !dbg !13279
  br i1 %cmp742, label %if.then744, label %if.else751, !dbg !13280

if.then744:                                       ; preds = %if.then724
  %424 = load i8, i8* %speed, align 1, !dbg !13281
  %idxprom745 = zext i8 %424 to i64, !dbg !13283
  %arrayidx746 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftsub0_cost, i64 0, i64 %idxprom745, !dbg !13283
  %425 = load i32, i32* %mode.addr, align 4, !dbg !13284
  %idxprom747 = zext i32 %425 to i64, !dbg !13283
  %arrayidx748 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx746, i64 0, i64 %idxprom747, !dbg !13283
  %426 = load i32, i32* %m, align 4, !dbg !13285
  %idxprom749 = sext i32 %426 to i64, !dbg !13283
  %arrayidx750 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx748, i64 0, i64 %idxprom749, !dbg !13283
  %427 = load i32, i32* %arrayidx750, align 4, !dbg !13283
  store i32 %427, i32* %op_cost, align 4, !dbg !13286
  %428 = load i32, i32* %op_cost, align 4, !dbg !13287
  store i32 %428, i32* %op_latency, align 4, !dbg !13288
  br label %if.end756, !dbg !13289

if.else751:                                       ; preds = %if.then724
  %429 = load i8, i8* %speed, align 1, !dbg !13290
  %idxprom752 = zext i8 %429 to i64, !dbg !13291
  %arrayidx753 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom752, !dbg !13291
  %430 = load i32, i32* %mode.addr, align 4, !dbg !13292
  %idxprom754 = zext i32 %430 to i64, !dbg !13291
  %arrayidx755 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx753, i64 0, i64 %idxprom754, !dbg !13291
  %431 = load i32, i32* %arrayidx755, align 4, !dbg !13291
  store i32 %431, i32* %op_latency, align 4, !dbg !13293
  br label %if.end756

if.end756:                                        ; preds = %if.else751, %if.then744
  %cost757 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13294
  %432 = load i16, i16* %cost757, align 2, !dbg !13294
  %conv758 = sext i16 %432 to i32, !dbg !13295
  %433 = load i32, i32* %op_cost, align 4, !dbg !13296
  %sub759 = sub nsw i32 %conv758, %433, !dbg !13297
  %conv760 = trunc i32 %sub759 to i16, !dbg !13295
  %cost761 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 0, !dbg !13298
  store i16 %conv760, i16* %cost761, align 2, !dbg !13299
  %latency762 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13300
  %434 = load i16, i16* %latency762, align 2, !dbg !13300
  %conv763 = sext i16 %434 to i32, !dbg !13301
  %435 = load i32, i32* %op_latency, align 4, !dbg !13302
  %sub764 = sub nsw i32 %conv763, %435, !dbg !13303
  %conv765 = trunc i32 %sub764 to i16, !dbg !13301
  %latency766 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 1, !dbg !13304
  store i16 %conv765, i16* %latency766, align 2, !dbg !13305
  %436 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13306
  %437 = load i64, i64* %t.addr, align 8, !dbg !13307
  %438 = load i64, i64* %d, align 8, !dbg !13308
  %div767 = udiv i64 %437, %438, !dbg !13309
  %439 = load i32, i32* %mode.addr, align 4, !dbg !13310
  call void @synth_mult(%struct.algorithm* %436, i64 %div767, %struct.mult_cost* %new_limit, i32 %439), !dbg !13311
  %440 = load i32, i32* %op_cost, align 4, !dbg !13312
  %441 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13313
  %cost768 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %441, i32 0, i32 0, !dbg !13314
  %cost769 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost768, i32 0, i32 0, !dbg !13315
  %442 = load i16, i16* %cost769, align 4, !dbg !13316
  %conv770 = sext i16 %442 to i32, !dbg !13316
  %add771 = add nsw i32 %conv770, %440, !dbg !13316
  %conv772 = trunc i32 %add771 to i16, !dbg !13316
  store i16 %conv772, i16* %cost769, align 4, !dbg !13316
  %443 = load i32, i32* %op_latency, align 4, !dbg !13317
  %444 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13318
  %cost773 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %444, i32 0, i32 0, !dbg !13319
  %latency774 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost773, i32 0, i32 1, !dbg !13320
  %445 = load i16, i16* %latency774, align 2, !dbg !13321
  %conv775 = sext i16 %445 to i32, !dbg !13321
  %add776 = add nsw i32 %conv775, %443, !dbg !13321
  %conv777 = trunc i32 %add776 to i16, !dbg !13321
  store i16 %conv777, i16* %latency774, align 2, !dbg !13321
  %446 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13322
  %cost778 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %446, i32 0, i32 0, !dbg !13324
  %latency779 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost778, i32 0, i32 1, !dbg !13325
  %447 = load i16, i16* %latency779, align 2, !dbg !13325
  %conv780 = sext i16 %447 to i32, !dbg !13322
  %448 = load i32, i32* %op_cost, align 4, !dbg !13326
  %cmp781 = icmp slt i32 %conv780, %448, !dbg !13327
  br i1 %cmp781, label %if.then783, label %if.end787, !dbg !13328

if.then783:                                       ; preds = %if.end756
  %449 = load i32, i32* %op_cost, align 4, !dbg !13329
  %conv784 = trunc i32 %449 to i16, !dbg !13329
  %450 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13330
  %cost785 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %450, i32 0, i32 0, !dbg !13331
  %latency786 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost785, i32 0, i32 1, !dbg !13332
  store i16 %conv784, i16* %latency786, align 2, !dbg !13333
  br label %if.end787, !dbg !13330

if.end787:                                        ; preds = %if.then783, %if.end756
  %451 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13334
  %cost788 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %451, i32 0, i32 0, !dbg !13334
  %cost789 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost788, i32 0, i32 0, !dbg !13334
  %452 = load i16, i16* %cost789, align 4, !dbg !13334
  %conv790 = sext i16 %452 to i32, !dbg !13334
  %cost791 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13334
  %453 = load i16, i16* %cost791, align 2, !dbg !13334
  %conv792 = sext i16 %453 to i32, !dbg !13334
  %cmp793 = icmp slt i32 %conv790, %conv792, !dbg !13334
  br i1 %cmp793, label %if.then811, label %lor.lhs.false795, !dbg !13334

lor.lhs.false795:                                 ; preds = %if.end787
  %454 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13334
  %cost796 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %454, i32 0, i32 0, !dbg !13334
  %cost797 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost796, i32 0, i32 0, !dbg !13334
  %455 = load i16, i16* %cost797, align 4, !dbg !13334
  %conv798 = sext i16 %455 to i32, !dbg !13334
  %cost799 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13334
  %456 = load i16, i16* %cost799, align 2, !dbg !13334
  %conv800 = sext i16 %456 to i32, !dbg !13334
  %cmp801 = icmp eq i32 %conv798, %conv800, !dbg !13334
  br i1 %cmp801, label %land.lhs.true803, label %if.end823, !dbg !13334

land.lhs.true803:                                 ; preds = %lor.lhs.false795
  %457 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13334
  %cost804 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %457, i32 0, i32 0, !dbg !13334
  %latency805 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost804, i32 0, i32 1, !dbg !13334
  %458 = load i16, i16* %latency805, align 2, !dbg !13334
  %conv806 = sext i16 %458 to i32, !dbg !13334
  %latency807 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13334
  %459 = load i16, i16* %latency807, align 2, !dbg !13334
  %conv808 = sext i16 %459 to i32, !dbg !13334
  %cmp809 = icmp slt i32 %conv806, %conv808, !dbg !13334
  br i1 %cmp809, label %if.then811, label %if.end823, !dbg !13336

if.then811:                                       ; preds = %land.lhs.true803, %if.end787
  call void @llvm.dbg.declare(metadata %struct.algorithm** %x812, metadata !13337, metadata !DIExpression()), !dbg !13339
  %460 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13340
  %cost813 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %460, i32 0, i32 0, !dbg !13341
  %461 = bitcast %struct.mult_cost* %best_cost to i8*, !dbg !13341
  %462 = bitcast %struct.mult_cost* %cost813 to i8*, !dbg !13341
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %461, i8* align 4 %462, i64 4, i1 false), !dbg !13341
  %463 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13342
  store %struct.algorithm* %463, %struct.algorithm** %x812, align 8, !dbg !13343
  %464 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13344
  store %struct.algorithm* %464, %struct.algorithm** %alg_in, align 8, !dbg !13345
  %465 = load %struct.algorithm*, %struct.algorithm** %x812, align 8, !dbg !13346
  store %struct.algorithm* %465, %struct.algorithm** %best_alg, align 8, !dbg !13347
  %466 = load i32, i32* %m, align 4, !dbg !13348
  %conv814 = trunc i32 %466 to i8, !dbg !13348
  %467 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13349
  %log815 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %467, i32 0, i32 3, !dbg !13350
  %468 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13351
  %ops816 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %468, i32 0, i32 1, !dbg !13352
  %469 = load i16, i16* %ops816, align 4, !dbg !13352
  %idxprom817 = sext i16 %469 to i64, !dbg !13349
  %arrayidx818 = getelementptr inbounds [32 x i8], [32 x i8]* %log815, i64 0, i64 %idxprom817, !dbg !13349
  store i8 %conv814, i8* %arrayidx818, align 1, !dbg !13353
  %470 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13354
  %op819 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %470, i32 0, i32 2, !dbg !13355
  %471 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13356
  %ops820 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %471, i32 0, i32 1, !dbg !13357
  %472 = load i16, i16* %ops820, align 4, !dbg !13357
  %idxprom821 = sext i16 %472 to i64, !dbg !13354
  %arrayidx822 = getelementptr inbounds [32 x i32], [32 x i32]* %op819, i64 0, i64 %idxprom821, !dbg !13354
  store i32 7, i32* %arrayidx822, align 4, !dbg !13358
  br label %if.end823, !dbg !13359

if.end823:                                        ; preds = %if.then811, %land.lhs.true803, %lor.lhs.false795
  br label %for.end826, !dbg !13360

if.end824:                                        ; preds = %lor.lhs.false721, %land.lhs.true716, %land.lhs.true713, %if.end706
  br label %for.inc825, !dbg !13361

for.inc825:                                       ; preds = %if.end824
  %473 = load i32, i32* %m, align 4, !dbg !13362
  %dec = add nsw i32 %473, -1, !dbg !13362
  store i32 %dec, i32* %m, align 4, !dbg !13362
  br label %for.cond586, !dbg !13363, !llvm.loop !13364

for.end826:                                       ; preds = %if.end823, %if.end705, %for.cond586
  %474 = load i8, i8* %cache_hit, align 1, !dbg !13366
  %tobool827 = icmp ne i8 %474, 0, !dbg !13366
  br i1 %tobool827, label %if.then828, label %if.end829, !dbg !13368

if.then828:                                       ; preds = %for.end826
  br label %done, !dbg !13369

if.end829:                                        ; preds = %for.end826
  %475 = load i64, i64* %t.addr, align 8, !dbg !13370
  %and830 = and i64 %475, 1, !dbg !13372
  %cmp831 = icmp ne i64 %and830, 0, !dbg !13373
  br i1 %cmp831, label %if.then833, label %if.end992, !dbg !13374

if.then833:                                       ; preds = %if.end829
  br label %do_alg_add_t2_m, !dbg !13375

do_alg_add_t2_m:                                  ; preds = %if.then833, %sw.bb190
  call void @llvm.dbg.label(metadata !13376), !dbg !13378
  %476 = load i64, i64* %t.addr, align 8, !dbg !13379
  %sub834 = sub i64 %476, 1, !dbg !13380
  store i64 %sub834, i64* %q, align 8, !dbg !13381
  %477 = load i64, i64* %q, align 8, !dbg !13382
  %478 = load i64, i64* %q, align 8, !dbg !13383
  %sub835 = sub i64 0, %478, !dbg !13384
  %and836 = and i64 %477, %sub835, !dbg !13385
  store i64 %and836, i64* %q, align 8, !dbg !13386
  %479 = load i64, i64* %q, align 8, !dbg !13387
  %call837 = call i32 @exact_log2(i64 %479), !dbg !13388
  store i32 %call837, i32* %m, align 4, !dbg !13389
  %480 = load i32, i32* %m, align 4, !dbg !13390
  %cmp838 = icmp sge i32 %480, 0, !dbg !13392
  br i1 %cmp838, label %land.lhs.true840, label %if.end909, !dbg !13393

land.lhs.true840:                                 ; preds = %do_alg_add_t2_m
  %481 = load i32, i32* %m, align 4, !dbg !13394
  %482 = load i32, i32* %maxm, align 4, !dbg !13395
  %cmp841 = icmp slt i32 %481, %482, !dbg !13396
  br i1 %cmp841, label %if.then843, label %if.end909, !dbg !13397

if.then843:                                       ; preds = %land.lhs.true840
  %483 = load i8, i8* %speed, align 1, !dbg !13398
  %idxprom844 = zext i8 %483 to i64, !dbg !13400
  %arrayidx845 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftadd_cost, i64 0, i64 %idxprom844, !dbg !13400
  %484 = load i32, i32* %mode.addr, align 4, !dbg !13401
  %idxprom846 = zext i32 %484 to i64, !dbg !13400
  %arrayidx847 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx845, i64 0, i64 %idxprom846, !dbg !13400
  %485 = load i32, i32* %m, align 4, !dbg !13402
  %idxprom848 = sext i32 %485 to i64, !dbg !13400
  %arrayidx849 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx847, i64 0, i64 %idxprom848, !dbg !13400
  %486 = load i32, i32* %arrayidx849, align 4, !dbg !13400
  store i32 %486, i32* %op_cost, align 4, !dbg !13403
  %cost850 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13404
  %487 = load i16, i16* %cost850, align 2, !dbg !13404
  %conv851 = sext i16 %487 to i32, !dbg !13405
  %488 = load i32, i32* %op_cost, align 4, !dbg !13406
  %sub852 = sub nsw i32 %conv851, %488, !dbg !13407
  %conv853 = trunc i32 %sub852 to i16, !dbg !13405
  %cost854 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 0, !dbg !13408
  store i16 %conv853, i16* %cost854, align 2, !dbg !13409
  %latency855 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13410
  %489 = load i16, i16* %latency855, align 2, !dbg !13410
  %conv856 = sext i16 %489 to i32, !dbg !13411
  %490 = load i32, i32* %op_cost, align 4, !dbg !13412
  %sub857 = sub nsw i32 %conv856, %490, !dbg !13413
  %conv858 = trunc i32 %sub857 to i16, !dbg !13411
  %latency859 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 1, !dbg !13414
  store i16 %conv858, i16* %latency859, align 2, !dbg !13415
  %491 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13416
  %492 = load i64, i64* %t.addr, align 8, !dbg !13417
  %sub860 = sub i64 %492, 1, !dbg !13418
  %493 = load i32, i32* %m, align 4, !dbg !13419
  %sh_prom861 = zext i32 %493 to i64, !dbg !13420
  %shr862 = lshr i64 %sub860, %sh_prom861, !dbg !13420
  %494 = load i32, i32* %mode.addr, align 4, !dbg !13421
  call void @synth_mult(%struct.algorithm* %491, i64 %shr862, %struct.mult_cost* %new_limit, i32 %494), !dbg !13422
  %495 = load i32, i32* %op_cost, align 4, !dbg !13423
  %496 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13424
  %cost863 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %496, i32 0, i32 0, !dbg !13425
  %cost864 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost863, i32 0, i32 0, !dbg !13426
  %497 = load i16, i16* %cost864, align 4, !dbg !13427
  %conv865 = sext i16 %497 to i32, !dbg !13427
  %add866 = add nsw i32 %conv865, %495, !dbg !13427
  %conv867 = trunc i32 %add866 to i16, !dbg !13427
  store i16 %conv867, i16* %cost864, align 4, !dbg !13427
  %498 = load i32, i32* %op_cost, align 4, !dbg !13428
  %499 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13429
  %cost868 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %499, i32 0, i32 0, !dbg !13430
  %latency869 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost868, i32 0, i32 1, !dbg !13431
  %500 = load i16, i16* %latency869, align 2, !dbg !13432
  %conv870 = sext i16 %500 to i32, !dbg !13432
  %add871 = add nsw i32 %conv870, %498, !dbg !13432
  %conv872 = trunc i32 %add871 to i16, !dbg !13432
  store i16 %conv872, i16* %latency869, align 2, !dbg !13432
  %501 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13433
  %cost873 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %501, i32 0, i32 0, !dbg !13433
  %cost874 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost873, i32 0, i32 0, !dbg !13433
  %502 = load i16, i16* %cost874, align 4, !dbg !13433
  %conv875 = sext i16 %502 to i32, !dbg !13433
  %cost876 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13433
  %503 = load i16, i16* %cost876, align 2, !dbg !13433
  %conv877 = sext i16 %503 to i32, !dbg !13433
  %cmp878 = icmp slt i32 %conv875, %conv877, !dbg !13433
  br i1 %cmp878, label %if.then896, label %lor.lhs.false880, !dbg !13433

lor.lhs.false880:                                 ; preds = %if.then843
  %504 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13433
  %cost881 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %504, i32 0, i32 0, !dbg !13433
  %cost882 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost881, i32 0, i32 0, !dbg !13433
  %505 = load i16, i16* %cost882, align 4, !dbg !13433
  %conv883 = sext i16 %505 to i32, !dbg !13433
  %cost884 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13433
  %506 = load i16, i16* %cost884, align 2, !dbg !13433
  %conv885 = sext i16 %506 to i32, !dbg !13433
  %cmp886 = icmp eq i32 %conv883, %conv885, !dbg !13433
  br i1 %cmp886, label %land.lhs.true888, label %if.end908, !dbg !13433

land.lhs.true888:                                 ; preds = %lor.lhs.false880
  %507 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13433
  %cost889 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %507, i32 0, i32 0, !dbg !13433
  %latency890 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost889, i32 0, i32 1, !dbg !13433
  %508 = load i16, i16* %latency890, align 2, !dbg !13433
  %conv891 = sext i16 %508 to i32, !dbg !13433
  %latency892 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13433
  %509 = load i16, i16* %latency892, align 2, !dbg !13433
  %conv893 = sext i16 %509 to i32, !dbg !13433
  %cmp894 = icmp slt i32 %conv891, %conv893, !dbg !13433
  br i1 %cmp894, label %if.then896, label %if.end908, !dbg !13435

if.then896:                                       ; preds = %land.lhs.true888, %if.then843
  call void @llvm.dbg.declare(metadata %struct.algorithm** %x897, metadata !13436, metadata !DIExpression()), !dbg !13438
  %510 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13439
  %cost898 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %510, i32 0, i32 0, !dbg !13440
  %511 = bitcast %struct.mult_cost* %best_cost to i8*, !dbg !13440
  %512 = bitcast %struct.mult_cost* %cost898 to i8*, !dbg !13440
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %511, i8* align 4 %512, i64 4, i1 false), !dbg !13440
  %513 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13441
  store %struct.algorithm* %513, %struct.algorithm** %x897, align 8, !dbg !13442
  %514 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13443
  store %struct.algorithm* %514, %struct.algorithm** %alg_in, align 8, !dbg !13444
  %515 = load %struct.algorithm*, %struct.algorithm** %x897, align 8, !dbg !13445
  store %struct.algorithm* %515, %struct.algorithm** %best_alg, align 8, !dbg !13446
  %516 = load i32, i32* %m, align 4, !dbg !13447
  %conv899 = trunc i32 %516 to i8, !dbg !13447
  %517 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13448
  %log900 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %517, i32 0, i32 3, !dbg !13449
  %518 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13450
  %ops901 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %518, i32 0, i32 1, !dbg !13451
  %519 = load i16, i16* %ops901, align 4, !dbg !13451
  %idxprom902 = sext i16 %519 to i64, !dbg !13448
  %arrayidx903 = getelementptr inbounds [32 x i8], [32 x i8]* %log900, i64 0, i64 %idxprom902, !dbg !13448
  store i8 %conv899, i8* %arrayidx903, align 1, !dbg !13452
  %520 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13453
  %op904 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %520, i32 0, i32 2, !dbg !13454
  %521 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13455
  %ops905 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %521, i32 0, i32 1, !dbg !13456
  %522 = load i16, i16* %ops905, align 4, !dbg !13456
  %idxprom906 = sext i16 %522 to i64, !dbg !13453
  %arrayidx907 = getelementptr inbounds [32 x i32], [32 x i32]* %op904, i64 0, i64 %idxprom906, !dbg !13453
  store i32 8, i32* %arrayidx907, align 4, !dbg !13457
  br label %if.end908, !dbg !13458

if.end908:                                        ; preds = %if.then896, %land.lhs.true888, %lor.lhs.false880
  br label %if.end909, !dbg !13459

if.end909:                                        ; preds = %if.end908, %land.lhs.true840, %do_alg_add_t2_m
  %523 = load i8, i8* %cache_hit, align 1, !dbg !13460
  %tobool910 = icmp ne i8 %523, 0, !dbg !13460
  br i1 %tobool910, label %if.then911, label %if.end912, !dbg !13462

if.then911:                                       ; preds = %if.end909
  br label %done, !dbg !13463

if.end912:                                        ; preds = %if.end909
  br label %do_alg_sub_t2_m, !dbg !13460

do_alg_sub_t2_m:                                  ; preds = %if.end912, %sw.bb191
  call void @llvm.dbg.label(metadata !13464), !dbg !13465
  %524 = load i64, i64* %t.addr, align 8, !dbg !13466
  %add913 = add i64 %524, 1, !dbg !13467
  store i64 %add913, i64* %q, align 8, !dbg !13468
  %525 = load i64, i64* %q, align 8, !dbg !13469
  %526 = load i64, i64* %q, align 8, !dbg !13470
  %sub914 = sub i64 0, %526, !dbg !13471
  %and915 = and i64 %525, %sub914, !dbg !13472
  store i64 %and915, i64* %q, align 8, !dbg !13473
  %527 = load i64, i64* %q, align 8, !dbg !13474
  %call916 = call i32 @exact_log2(i64 %527), !dbg !13475
  store i32 %call916, i32* %m, align 4, !dbg !13476
  %528 = load i32, i32* %m, align 4, !dbg !13477
  %cmp917 = icmp sge i32 %528, 0, !dbg !13479
  br i1 %cmp917, label %land.lhs.true919, label %if.end988, !dbg !13480

land.lhs.true919:                                 ; preds = %do_alg_sub_t2_m
  %529 = load i32, i32* %m, align 4, !dbg !13481
  %530 = load i32, i32* %maxm, align 4, !dbg !13482
  %cmp920 = icmp slt i32 %529, %530, !dbg !13483
  br i1 %cmp920, label %if.then922, label %if.end988, !dbg !13484

if.then922:                                       ; preds = %land.lhs.true919
  %531 = load i8, i8* %speed, align 1, !dbg !13485
  %idxprom923 = zext i8 %531 to i64, !dbg !13487
  %arrayidx924 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shiftsub0_cost, i64 0, i64 %idxprom923, !dbg !13487
  %532 = load i32, i32* %mode.addr, align 4, !dbg !13488
  %idxprom925 = zext i32 %532 to i64, !dbg !13487
  %arrayidx926 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx924, i64 0, i64 %idxprom925, !dbg !13487
  %533 = load i32, i32* %m, align 4, !dbg !13489
  %idxprom927 = sext i32 %533 to i64, !dbg !13487
  %arrayidx928 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx926, i64 0, i64 %idxprom927, !dbg !13487
  %534 = load i32, i32* %arrayidx928, align 4, !dbg !13487
  store i32 %534, i32* %op_cost, align 4, !dbg !13490
  %cost929 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13491
  %535 = load i16, i16* %cost929, align 2, !dbg !13491
  %conv930 = sext i16 %535 to i32, !dbg !13492
  %536 = load i32, i32* %op_cost, align 4, !dbg !13493
  %sub931 = sub nsw i32 %conv930, %536, !dbg !13494
  %conv932 = trunc i32 %sub931 to i16, !dbg !13492
  %cost933 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 0, !dbg !13495
  store i16 %conv932, i16* %cost933, align 2, !dbg !13496
  %latency934 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13497
  %537 = load i16, i16* %latency934, align 2, !dbg !13497
  %conv935 = sext i16 %537 to i32, !dbg !13498
  %538 = load i32, i32* %op_cost, align 4, !dbg !13499
  %sub936 = sub nsw i32 %conv935, %538, !dbg !13500
  %conv937 = trunc i32 %sub936 to i16, !dbg !13498
  %latency938 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %new_limit, i32 0, i32 1, !dbg !13501
  store i16 %conv937, i16* %latency938, align 2, !dbg !13502
  %539 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13503
  %540 = load i64, i64* %t.addr, align 8, !dbg !13504
  %add939 = add i64 %540, 1, !dbg !13505
  %541 = load i32, i32* %m, align 4, !dbg !13506
  %sh_prom940 = zext i32 %541 to i64, !dbg !13507
  %shr941 = lshr i64 %add939, %sh_prom940, !dbg !13507
  %542 = load i32, i32* %mode.addr, align 4, !dbg !13508
  call void @synth_mult(%struct.algorithm* %539, i64 %shr941, %struct.mult_cost* %new_limit, i32 %542), !dbg !13509
  %543 = load i32, i32* %op_cost, align 4, !dbg !13510
  %544 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13511
  %cost942 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %544, i32 0, i32 0, !dbg !13512
  %cost943 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost942, i32 0, i32 0, !dbg !13513
  %545 = load i16, i16* %cost943, align 4, !dbg !13514
  %conv944 = sext i16 %545 to i32, !dbg !13514
  %add945 = add nsw i32 %conv944, %543, !dbg !13514
  %conv946 = trunc i32 %add945 to i16, !dbg !13514
  store i16 %conv946, i16* %cost943, align 4, !dbg !13514
  %546 = load i32, i32* %op_cost, align 4, !dbg !13515
  %547 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13516
  %cost947 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %547, i32 0, i32 0, !dbg !13517
  %latency948 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost947, i32 0, i32 1, !dbg !13518
  %548 = load i16, i16* %latency948, align 2, !dbg !13519
  %conv949 = sext i16 %548 to i32, !dbg !13519
  %add950 = add nsw i32 %conv949, %546, !dbg !13519
  %conv951 = trunc i32 %add950 to i16, !dbg !13519
  store i16 %conv951, i16* %latency948, align 2, !dbg !13519
  %549 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13520
  %cost952 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %549, i32 0, i32 0, !dbg !13520
  %cost953 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost952, i32 0, i32 0, !dbg !13520
  %550 = load i16, i16* %cost953, align 4, !dbg !13520
  %conv954 = sext i16 %550 to i32, !dbg !13520
  %cost955 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13520
  %551 = load i16, i16* %cost955, align 2, !dbg !13520
  %conv956 = sext i16 %551 to i32, !dbg !13520
  %cmp957 = icmp slt i32 %conv954, %conv956, !dbg !13520
  br i1 %cmp957, label %if.then975, label %lor.lhs.false959, !dbg !13520

lor.lhs.false959:                                 ; preds = %if.then922
  %552 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13520
  %cost960 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %552, i32 0, i32 0, !dbg !13520
  %cost961 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost960, i32 0, i32 0, !dbg !13520
  %553 = load i16, i16* %cost961, align 4, !dbg !13520
  %conv962 = sext i16 %553 to i32, !dbg !13520
  %cost963 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13520
  %554 = load i16, i16* %cost963, align 2, !dbg !13520
  %conv964 = sext i16 %554 to i32, !dbg !13520
  %cmp965 = icmp eq i32 %conv962, %conv964, !dbg !13520
  br i1 %cmp965, label %land.lhs.true967, label %if.end987, !dbg !13520

land.lhs.true967:                                 ; preds = %lor.lhs.false959
  %555 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13520
  %cost968 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %555, i32 0, i32 0, !dbg !13520
  %latency969 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost968, i32 0, i32 1, !dbg !13520
  %556 = load i16, i16* %latency969, align 2, !dbg !13520
  %conv970 = sext i16 %556 to i32, !dbg !13520
  %latency971 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13520
  %557 = load i16, i16* %latency971, align 2, !dbg !13520
  %conv972 = sext i16 %557 to i32, !dbg !13520
  %cmp973 = icmp slt i32 %conv970, %conv972, !dbg !13520
  br i1 %cmp973, label %if.then975, label %if.end987, !dbg !13522

if.then975:                                       ; preds = %land.lhs.true967, %if.then922
  call void @llvm.dbg.declare(metadata %struct.algorithm** %x976, metadata !13523, metadata !DIExpression()), !dbg !13525
  %558 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13526
  %cost977 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %558, i32 0, i32 0, !dbg !13527
  %559 = bitcast %struct.mult_cost* %best_cost to i8*, !dbg !13527
  %560 = bitcast %struct.mult_cost* %cost977 to i8*, !dbg !13527
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %559, i8* align 4 %560, i64 4, i1 false), !dbg !13527
  %561 = load %struct.algorithm*, %struct.algorithm** %alg_in, align 8, !dbg !13528
  store %struct.algorithm* %561, %struct.algorithm** %x976, align 8, !dbg !13529
  %562 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13530
  store %struct.algorithm* %562, %struct.algorithm** %alg_in, align 8, !dbg !13531
  %563 = load %struct.algorithm*, %struct.algorithm** %x976, align 8, !dbg !13532
  store %struct.algorithm* %563, %struct.algorithm** %best_alg, align 8, !dbg !13533
  %564 = load i32, i32* %m, align 4, !dbg !13534
  %conv978 = trunc i32 %564 to i8, !dbg !13534
  %565 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13535
  %log979 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %565, i32 0, i32 3, !dbg !13536
  %566 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13537
  %ops980 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %566, i32 0, i32 1, !dbg !13538
  %567 = load i16, i16* %ops980, align 4, !dbg !13538
  %idxprom981 = sext i16 %567 to i64, !dbg !13535
  %arrayidx982 = getelementptr inbounds [32 x i8], [32 x i8]* %log979, i64 0, i64 %idxprom981, !dbg !13535
  store i8 %conv978, i8* %arrayidx982, align 1, !dbg !13539
  %568 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13540
  %op983 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %568, i32 0, i32 2, !dbg !13541
  %569 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13542
  %ops984 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %569, i32 0, i32 1, !dbg !13543
  %570 = load i16, i16* %ops984, align 4, !dbg !13543
  %idxprom985 = sext i16 %570 to i64, !dbg !13540
  %arrayidx986 = getelementptr inbounds [32 x i32], [32 x i32]* %op983, i64 0, i64 %idxprom985, !dbg !13540
  store i32 9, i32* %arrayidx986, align 4, !dbg !13544
  br label %if.end987, !dbg !13545

if.end987:                                        ; preds = %if.then975, %land.lhs.true967, %lor.lhs.false959
  br label %if.end988, !dbg !13546

if.end988:                                        ; preds = %if.end987, %land.lhs.true919, %do_alg_sub_t2_m
  %571 = load i8, i8* %cache_hit, align 1, !dbg !13547
  %tobool989 = icmp ne i8 %571, 0, !dbg !13547
  br i1 %tobool989, label %if.then990, label %if.end991, !dbg !13549

if.then990:                                       ; preds = %if.end988
  br label %done, !dbg !13550

if.end991:                                        ; preds = %if.end988
  br label %if.end992, !dbg !13551

if.end992:                                        ; preds = %if.end991, %if.end829
  br label %done, !dbg !13552

done:                                             ; preds = %if.end992, %if.then990, %if.then911, %if.then828, %if.then581, %if.then363
  call void @llvm.dbg.label(metadata !13553), !dbg !13554
  %cost993 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13555
  %572 = load i16, i16* %cost993, align 2, !dbg !13555
  %conv994 = sext i16 %572 to i32, !dbg !13555
  %573 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !13555
  %cost995 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %573, i32 0, i32 0, !dbg !13555
  %574 = load i16, i16* %cost995, align 2, !dbg !13555
  %conv996 = sext i16 %574 to i32, !dbg !13555
  %cmp997 = icmp slt i32 %conv994, %conv996, !dbg !13555
  br i1 %cmp997, label %if.end1029, label %lor.lhs.false999, !dbg !13555

lor.lhs.false999:                                 ; preds = %done
  %cost1000 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13555
  %575 = load i16, i16* %cost1000, align 2, !dbg !13555
  %conv1001 = sext i16 %575 to i32, !dbg !13555
  %576 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !13555
  %cost1002 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %576, i32 0, i32 0, !dbg !13555
  %577 = load i16, i16* %cost1002, align 2, !dbg !13555
  %conv1003 = sext i16 %577 to i32, !dbg !13555
  %cmp1004 = icmp eq i32 %conv1001, %conv1003, !dbg !13555
  br i1 %cmp1004, label %land.lhs.true1006, label %if.then1013, !dbg !13555

land.lhs.true1006:                                ; preds = %lor.lhs.false999
  %latency1007 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13555
  %578 = load i16, i16* %latency1007, align 2, !dbg !13555
  %conv1008 = sext i16 %578 to i32, !dbg !13555
  %579 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !13555
  %latency1009 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %579, i32 0, i32 1, !dbg !13555
  %580 = load i16, i16* %latency1009, align 2, !dbg !13555
  %conv1010 = sext i16 %580 to i32, !dbg !13555
  %cmp1011 = icmp slt i32 %conv1008, %conv1010, !dbg !13555
  br i1 %cmp1011, label %if.end1029, label %if.then1013, !dbg !13557

if.then1013:                                      ; preds = %land.lhs.true1006, %lor.lhs.false999
  %581 = load i64, i64* %t.addr, align 8, !dbg !13558
  %582 = load i32, i32* %hash_index, align 4, !dbg !13560
  %idxprom1014 = sext i32 %582 to i64, !dbg !13561
  %arrayidx1015 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom1014, !dbg !13561
  %t1016 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx1015, i32 0, i32 0, !dbg !13562
  store i64 %581, i64* %t1016, align 8, !dbg !13563
  %583 = load i32, i32* %mode.addr, align 4, !dbg !13564
  %584 = load i32, i32* %hash_index, align 4, !dbg !13565
  %idxprom1017 = sext i32 %584 to i64, !dbg !13566
  %arrayidx1018 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom1017, !dbg !13566
  %mode1019 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx1018, i32 0, i32 1, !dbg !13567
  store i32 %583, i32* %mode1019, align 8, !dbg !13568
  %585 = load i8, i8* %speed, align 1, !dbg !13569
  %586 = load i32, i32* %hash_index, align 4, !dbg !13570
  %idxprom1020 = sext i32 %586 to i64, !dbg !13571
  %arrayidx1021 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom1020, !dbg !13571
  %speed1022 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx1021, i32 0, i32 4, !dbg !13572
  store i8 %585, i8* %speed1022, align 4, !dbg !13573
  %587 = load i32, i32* %hash_index, align 4, !dbg !13574
  %idxprom1023 = sext i32 %587 to i64, !dbg !13575
  %arrayidx1024 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom1023, !dbg !13575
  %alg1025 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx1024, i32 0, i32 2, !dbg !13576
  store i32 10, i32* %alg1025, align 4, !dbg !13577
  %588 = load i32, i32* %hash_index, align 4, !dbg !13578
  %idxprom1026 = sext i32 %588 to i64, !dbg !13579
  %arrayidx1027 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom1026, !dbg !13579
  %cost1028 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx1027, i32 0, i32 3, !dbg !13580
  %589 = load %struct.mult_cost*, %struct.mult_cost** %cost_limit.addr, align 8, !dbg !13581
  %590 = bitcast %struct.mult_cost* %cost1028 to i8*, !dbg !13582
  %591 = bitcast %struct.mult_cost* %589 to i8*, !dbg !13582
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %590, i8* align 2 %591, i64 4, i1 false), !dbg !13582
  br label %return, !dbg !13583

if.end1029:                                       ; preds = %land.lhs.true1006, %done
  %592 = load i8, i8* %cache_hit, align 1, !dbg !13584
  %tobool1030 = icmp ne i8 %592, 0, !dbg !13584
  br i1 %tobool1030, label %if.end1058, label %if.then1031, !dbg !13586

if.then1031:                                      ; preds = %if.end1029
  %593 = load i64, i64* %t.addr, align 8, !dbg !13587
  %594 = load i32, i32* %hash_index, align 4, !dbg !13589
  %idxprom1032 = sext i32 %594 to i64, !dbg !13590
  %arrayidx1033 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom1032, !dbg !13590
  %t1034 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx1033, i32 0, i32 0, !dbg !13591
  store i64 %593, i64* %t1034, align 8, !dbg !13592
  %595 = load i32, i32* %mode.addr, align 4, !dbg !13593
  %596 = load i32, i32* %hash_index, align 4, !dbg !13594
  %idxprom1035 = sext i32 %596 to i64, !dbg !13595
  %arrayidx1036 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom1035, !dbg !13595
  %mode1037 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx1036, i32 0, i32 1, !dbg !13596
  store i32 %595, i32* %mode1037, align 8, !dbg !13597
  %597 = load i8, i8* %speed, align 1, !dbg !13598
  %598 = load i32, i32* %hash_index, align 4, !dbg !13599
  %idxprom1038 = sext i32 %598 to i64, !dbg !13600
  %arrayidx1039 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom1038, !dbg !13600
  %speed1040 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx1039, i32 0, i32 4, !dbg !13601
  store i8 %597, i8* %speed1040, align 4, !dbg !13602
  %599 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13603
  %op1041 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %599, i32 0, i32 2, !dbg !13604
  %600 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13605
  %ops1042 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %600, i32 0, i32 1, !dbg !13606
  %601 = load i16, i16* %ops1042, align 4, !dbg !13606
  %idxprom1043 = sext i16 %601 to i64, !dbg !13603
  %arrayidx1044 = getelementptr inbounds [32 x i32], [32 x i32]* %op1041, i64 0, i64 %idxprom1043, !dbg !13603
  %602 = load i32, i32* %arrayidx1044, align 4, !dbg !13603
  %603 = load i32, i32* %hash_index, align 4, !dbg !13607
  %idxprom1045 = sext i32 %603 to i64, !dbg !13608
  %arrayidx1046 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom1045, !dbg !13608
  %alg1047 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx1046, i32 0, i32 2, !dbg !13609
  store i32 %602, i32* %alg1047, align 4, !dbg !13610
  %cost1048 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 0, !dbg !13611
  %604 = load i16, i16* %cost1048, align 2, !dbg !13611
  %605 = load i32, i32* %hash_index, align 4, !dbg !13612
  %idxprom1049 = sext i32 %605 to i64, !dbg !13613
  %arrayidx1050 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom1049, !dbg !13613
  %cost1051 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx1050, i32 0, i32 3, !dbg !13614
  %cost1052 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost1051, i32 0, i32 0, !dbg !13615
  store i16 %604, i16* %cost1052, align 8, !dbg !13616
  %latency1053 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %best_cost, i32 0, i32 1, !dbg !13617
  %606 = load i16, i16* %latency1053, align 2, !dbg !13617
  %607 = load i32, i32* %hash_index, align 4, !dbg !13618
  %idxprom1054 = sext i32 %607 to i64, !dbg !13619
  %arrayidx1055 = getelementptr inbounds [1031 x %struct.alg_hash_entry], [1031 x %struct.alg_hash_entry]* @alg_hash, i64 0, i64 %idxprom1054, !dbg !13619
  %cost1056 = getelementptr inbounds %struct.alg_hash_entry, %struct.alg_hash_entry* %arrayidx1055, i32 0, i32 3, !dbg !13620
  %latency1057 = getelementptr inbounds %struct.mult_cost, %struct.mult_cost* %cost1056, i32 0, i32 1, !dbg !13621
  store i16 %606, i16* %latency1057, align 2, !dbg !13622
  br label %if.end1058, !dbg !13623

if.end1058:                                       ; preds = %if.then1031, %if.end1029
  %608 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13624
  %ops1059 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %608, i32 0, i32 1, !dbg !13626
  %609 = load i16, i16* %ops1059, align 4, !dbg !13626
  %conv1060 = sext i16 %609 to i32, !dbg !13624
  %cmp1061 = icmp eq i32 %conv1060, 32, !dbg !13627
  br i1 %cmp1061, label %if.then1063, label %if.end1064, !dbg !13628

if.then1063:                                      ; preds = %if.end1058
  br label %return, !dbg !13629

if.end1064:                                       ; preds = %if.end1058
  %610 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13630
  %ops1065 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %610, i32 0, i32 1, !dbg !13631
  %611 = load i16, i16* %ops1065, align 4, !dbg !13631
  %conv1066 = sext i16 %611 to i32, !dbg !13630
  %add1067 = add nsw i32 %conv1066, 1, !dbg !13632
  %conv1068 = trunc i32 %add1067 to i16, !dbg !13630
  %612 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !13633
  %ops1069 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %612, i32 0, i32 1, !dbg !13634
  store i16 %conv1068, i16* %ops1069, align 4, !dbg !13635
  %613 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !13636
  %cost1070 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %613, i32 0, i32 0, !dbg !13637
  %614 = bitcast %struct.mult_cost* %cost1070 to i8*, !dbg !13638
  %615 = bitcast %struct.mult_cost* %best_cost to i8*, !dbg !13638
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %614, i8* align 2 %615, i64 4, i1 false), !dbg !13638
  %616 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !13639
  %op1071 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %616, i32 0, i32 2, !dbg !13640
  %arraydecay = getelementptr inbounds [32 x i32], [32 x i32]* %op1071, i64 0, i64 0, !dbg !13641
  %617 = bitcast i32* %arraydecay to i8*, !dbg !13641
  %618 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13642
  %op1072 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %618, i32 0, i32 2, !dbg !13643
  %arraydecay1073 = getelementptr inbounds [32 x i32], [32 x i32]* %op1072, i64 0, i64 0, !dbg !13641
  %619 = bitcast i32* %arraydecay1073 to i8*, !dbg !13641
  %620 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !13644
  %ops1074 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %620, i32 0, i32 1, !dbg !13645
  %621 = load i16, i16* %ops1074, align 4, !dbg !13645
  %conv1075 = sext i16 %621 to i64, !dbg !13644
  %mul1076 = mul i64 %conv1075, 4, !dbg !13646
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %617, i8* align 4 %619, i64 %mul1076, i1 false), !dbg !13641
  %622 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !13647
  %log1077 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %622, i32 0, i32 3, !dbg !13648
  %arraydecay1078 = getelementptr inbounds [32 x i8], [32 x i8]* %log1077, i64 0, i64 0, !dbg !13649
  %623 = load %struct.algorithm*, %struct.algorithm** %best_alg, align 8, !dbg !13650
  %log1079 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %623, i32 0, i32 3, !dbg !13651
  %arraydecay1080 = getelementptr inbounds [32 x i8], [32 x i8]* %log1079, i64 0, i64 0, !dbg !13649
  %624 = load %struct.algorithm*, %struct.algorithm** %alg_out.addr, align 8, !dbg !13652
  %ops1081 = getelementptr inbounds %struct.algorithm, %struct.algorithm* %624, i32 0, i32 1, !dbg !13653
  %625 = load i16, i16* %ops1081, align 4, !dbg !13653
  %conv1082 = sext i16 %625 to i64, !dbg !13652
  %mul1083 = mul i64 %conv1082, 1, !dbg !13654
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %arraydecay1078, i8* align 4 %arraydecay1080, i64 %mul1083, i1 false), !dbg !13649
  br label %return, !dbg !13655

return:                                           ; preds = %if.end1064, %if.then1063, %if.then1013, %if.then186, %if.then154, %if.else, %if.then67, %if.then37, %if.then
  ret void, !dbg !13655
}

declare dso_local i32 @exact_log2(i64) #2

declare dso_local i32 @div_and_round_double(i32, i32, i64, i64, i64, i64, i64*, i64*, i64*, i64*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_mult_highpart_optab(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %unsignedp, i32 %max_cost) #0 !dbg !13656 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %max_cost.addr = alloca i32, align 4
  %narrow_op1 = alloca %struct.rtx_def*, align 8
  %wider_mode = alloca i32, align 4
  %moptab = alloca %struct.optab_d*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %size = alloca i32, align 4
  %speed = alloca i8, align 1
  %insns = alloca %struct.rtx_def*, align 8
  %wop0 = alloca %struct.rtx_def*, align 8
  %wop1 = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !13657, metadata !DIExpression()), !dbg !13658
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !13659, metadata !DIExpression()), !dbg !13660
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !13661, metadata !DIExpression()), !dbg !13662
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !13663, metadata !DIExpression()), !dbg !13664
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !13665, metadata !DIExpression()), !dbg !13666
  store i32 %max_cost, i32* %max_cost.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_cost.addr, metadata !13667, metadata !DIExpression()), !dbg !13668
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %narrow_op1, metadata !13669, metadata !DIExpression()), !dbg !13670
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !13671
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !13671
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !13671
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !13671
  %1 = load i64, i64* %arrayidx, align 8, !dbg !13671
  %2 = load i32, i32* %mode.addr, align 4, !dbg !13672
  %call = call %struct.rtx_def* @gen_int_mode(i64 %1, i32 %2), !dbg !13673
  store %struct.rtx_def* %call, %struct.rtx_def** %narrow_op1, align 8, !dbg !13670
  call void @llvm.dbg.declare(metadata i32* %wider_mode, metadata !13674, metadata !DIExpression()), !dbg !13675
  call void @llvm.dbg.declare(metadata %struct.optab_d** %moptab, metadata !13676, metadata !DIExpression()), !dbg !13677
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !13678, metadata !DIExpression()), !dbg !13679
  call void @llvm.dbg.declare(metadata i32* %size, metadata !13680, metadata !DIExpression()), !dbg !13681
  call void @llvm.dbg.declare(metadata i8* %speed, metadata !13682, metadata !DIExpression()), !dbg !13683
  %call1 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !13684
  store i8 %call1, i8* %speed, align 1, !dbg !13683
  %3 = load i32, i32* %mode.addr, align 4, !dbg !13685
  %idxprom = zext i32 %3 to i64, !dbg !13685
  %arrayidx2 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !13685
  %4 = load i8, i8* %arrayidx2, align 1, !dbg !13685
  %conv = zext i8 %4 to i32, !dbg !13685
  %cmp = icmp eq i32 %conv, 8, !dbg !13685
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !13685

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32, i32* %mode.addr, align 4, !dbg !13685
  %idxprom4 = zext i32 %5 to i64, !dbg !13685
  %arrayidx5 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom4, !dbg !13685
  %6 = load i8, i8* %arrayidx5, align 1, !dbg !13685
  %conv6 = zext i8 %6 to i32, !dbg !13685
  %cmp7 = icmp eq i32 %conv6, 9, !dbg !13685
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !13685

cond.true:                                        ; preds = %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3461, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13685
  br label %cond.end, !dbg !13685

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !13685

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13685
  %7 = load i32, i32* %mode.addr, align 4, !dbg !13686
  %idxprom9 = zext i32 %7 to i64, !dbg !13686
  %arrayidx10 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom9, !dbg !13686
  %8 = load i8, i8* %arrayidx10, align 1, !dbg !13686
  %conv11 = zext i8 %8 to i32, !dbg !13686
  store i32 %conv11, i32* %wider_mode, align 4, !dbg !13687
  %9 = load i32, i32* %mode.addr, align 4, !dbg !13688
  %idxprom12 = zext i32 %9 to i64, !dbg !13688
  %arrayidx13 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom12, !dbg !13688
  %10 = load i8, i8* %arrayidx13, align 1, !dbg !13688
  %conv14 = zext i8 %10 to i16, !dbg !13688
  %conv15 = zext i16 %conv14 to i32, !dbg !13688
  %mul = mul nsw i32 %conv15, 8, !dbg !13688
  %conv16 = trunc i32 %mul to i16, !dbg !13688
  %conv17 = zext i16 %conv16 to i32, !dbg !13688
  store i32 %conv17, i32* %size, align 4, !dbg !13689
  %11 = load i8, i8* %speed, align 1, !dbg !13690
  %idxprom18 = zext i8 %11 to i64, !dbg !13692
  %arrayidx19 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @mul_highpart_cost, i64 0, i64 %idxprom18, !dbg !13692
  %12 = load i32, i32* %mode.addr, align 4, !dbg !13693
  %idxprom20 = zext i32 %12 to i64, !dbg !13692
  %arrayidx21 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx19, i64 0, i64 %idxprom20, !dbg !13692
  %13 = load i32, i32* %arrayidx21, align 4, !dbg !13692
  %14 = load i32, i32* %max_cost.addr, align 4, !dbg !13694
  %cmp22 = icmp slt i32 %13, %14, !dbg !13695
  br i1 %cmp22, label %if.then, label %if.end28, !dbg !13696

if.then:                                          ; preds = %cond.end
  %15 = load i32, i32* %unsignedp.addr, align 4, !dbg !13697
  %tobool = icmp ne i32 %15, 0, !dbg !13697
  %16 = zext i1 %tobool to i64, !dbg !13697
  %cond24 = select i1 %tobool, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 19), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 18), !dbg !13697
  store %struct.optab_d* %cond24, %struct.optab_d** %moptab, align 8, !dbg !13699
  %17 = load i32, i32* %mode.addr, align 4, !dbg !13700
  %18 = load %struct.optab_d*, %struct.optab_d** %moptab, align 8, !dbg !13701
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !13702
  %20 = load %struct.rtx_def*, %struct.rtx_def** %narrow_op1, align 8, !dbg !13703
  %21 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !13704
  %22 = load i32, i32* %unsignedp.addr, align 4, !dbg !13705
  %call25 = call %struct.rtx_def* @expand_binop(i32 %17, %struct.optab_d* %18, %struct.rtx_def* %19, %struct.rtx_def* %20, %struct.rtx_def* %21, i32 %22, i32 0), !dbg !13706
  store %struct.rtx_def* %call25, %struct.rtx_def** %tem, align 8, !dbg !13707
  %23 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13708
  %tobool26 = icmp ne %struct.rtx_def* %23, null, !dbg !13708
  br i1 %tobool26, label %if.then27, label %if.end, !dbg !13710

if.then27:                                        ; preds = %if.then
  %24 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13711
  store %struct.rtx_def* %24, %struct.rtx_def** %retval, align 8, !dbg !13712
  br label %return, !dbg !13712

if.end:                                           ; preds = %if.then
  br label %if.end28, !dbg !13713

if.end28:                                         ; preds = %if.end, %cond.end
  %25 = load i32, i32* %size, align 4, !dbg !13714
  %sub = sub nsw i32 %25, 1, !dbg !13716
  %cmp29 = icmp slt i32 %sub, 32, !dbg !13717
  br i1 %cmp29, label %land.lhs.true, label %if.end59, !dbg !13718

land.lhs.true:                                    ; preds = %if.end28
  %26 = load i8, i8* %speed, align 1, !dbg !13719
  %idxprom31 = zext i8 %26 to i64, !dbg !13720
  %arrayidx32 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @mul_highpart_cost, i64 0, i64 %idxprom31, !dbg !13720
  %27 = load i32, i32* %mode.addr, align 4, !dbg !13721
  %idxprom33 = zext i32 %27 to i64, !dbg !13720
  %arrayidx34 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx32, i64 0, i64 %idxprom33, !dbg !13720
  %28 = load i32, i32* %arrayidx34, align 4, !dbg !13720
  %29 = load i8, i8* %speed, align 1, !dbg !13722
  %idxprom35 = zext i8 %29 to i64, !dbg !13723
  %arrayidx36 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom35, !dbg !13723
  %30 = load i32, i32* %mode.addr, align 4, !dbg !13724
  %idxprom37 = zext i32 %30 to i64, !dbg !13723
  %arrayidx38 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx36, i64 0, i64 %idxprom37, !dbg !13723
  %31 = load i32, i32* %size, align 4, !dbg !13725
  %sub39 = sub nsw i32 %31, 1, !dbg !13726
  %idxprom40 = sext i32 %sub39 to i64, !dbg !13723
  %arrayidx41 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx38, i64 0, i64 %idxprom40, !dbg !13723
  %32 = load i32, i32* %arrayidx41, align 4, !dbg !13723
  %mul42 = mul nsw i32 2, %32, !dbg !13727
  %add = add nsw i32 %28, %mul42, !dbg !13728
  %33 = load i8, i8* %speed, align 1, !dbg !13729
  %idxprom43 = zext i8 %33 to i64, !dbg !13730
  %arrayidx44 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom43, !dbg !13730
  %34 = load i32, i32* %mode.addr, align 4, !dbg !13731
  %idxprom45 = zext i32 %34 to i64, !dbg !13730
  %arrayidx46 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx44, i64 0, i64 %idxprom45, !dbg !13730
  %35 = load i32, i32* %arrayidx46, align 4, !dbg !13730
  %mul47 = mul nsw i32 4, %35, !dbg !13732
  %add48 = add nsw i32 %add, %mul47, !dbg !13733
  %36 = load i32, i32* %max_cost.addr, align 4, !dbg !13734
  %cmp49 = icmp slt i32 %add48, %36, !dbg !13735
  br i1 %cmp49, label %if.then51, label %if.end59, !dbg !13736

if.then51:                                        ; preds = %land.lhs.true
  %37 = load i32, i32* %unsignedp.addr, align 4, !dbg !13737
  %tobool52 = icmp ne i32 %37, 0, !dbg !13737
  %38 = zext i1 %tobool52 to i64, !dbg !13737
  %cond53 = select i1 %tobool52, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 18), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 19), !dbg !13737
  store %struct.optab_d* %cond53, %struct.optab_d** %moptab, align 8, !dbg !13739
  %39 = load i32, i32* %mode.addr, align 4, !dbg !13740
  %40 = load %struct.optab_d*, %struct.optab_d** %moptab, align 8, !dbg !13741
  %41 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !13742
  %42 = load %struct.rtx_def*, %struct.rtx_def** %narrow_op1, align 8, !dbg !13743
  %43 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !13744
  %44 = load i32, i32* %unsignedp.addr, align 4, !dbg !13745
  %call54 = call %struct.rtx_def* @expand_binop(i32 %39, %struct.optab_d* %40, %struct.rtx_def* %41, %struct.rtx_def* %42, %struct.rtx_def* %43, i32 %44, i32 0), !dbg !13746
  store %struct.rtx_def* %call54, %struct.rtx_def** %tem, align 8, !dbg !13747
  %45 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13748
  %tobool55 = icmp ne %struct.rtx_def* %45, null, !dbg !13748
  br i1 %tobool55, label %if.then56, label %if.end58, !dbg !13750

if.then56:                                        ; preds = %if.then51
  %46 = load i32, i32* %mode.addr, align 4, !dbg !13751
  %47 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13752
  %48 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !13753
  %49 = load %struct.rtx_def*, %struct.rtx_def** %narrow_op1, align 8, !dbg !13754
  %50 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13755
  %51 = load i32, i32* %unsignedp.addr, align 4, !dbg !13756
  %call57 = call %struct.rtx_def* @expand_mult_highpart_adjust(i32 %46, %struct.rtx_def* %47, %struct.rtx_def* %48, %struct.rtx_def* %49, %struct.rtx_def* %50, i32 %51), !dbg !13757
  store %struct.rtx_def* %call57, %struct.rtx_def** %retval, align 8, !dbg !13758
  br label %return, !dbg !13758

if.end58:                                         ; preds = %if.then51
  br label %if.end59, !dbg !13759

if.end59:                                         ; preds = %if.end58, %land.lhs.true, %if.end28
  %52 = load i32, i32* %unsignedp.addr, align 4, !dbg !13760
  %tobool60 = icmp ne i32 %52, 0, !dbg !13760
  %53 = zext i1 %tobool60 to i64, !dbg !13760
  %cond61 = select i1 %tobool60, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 21), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 20), !dbg !13760
  store %struct.optab_d* %cond61, %struct.optab_d** %moptab, align 8, !dbg !13761
  %54 = load %struct.optab_d*, %struct.optab_d** %moptab, align 8, !dbg !13762
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %54, i32 0, i32 4, !dbg !13762
  %55 = load i32, i32* %wider_mode, align 4, !dbg !13762
  %idxprom62 = sext i32 %55 to i64, !dbg !13762
  %arrayidx63 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom62, !dbg !13762
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx63, i32 0, i32 0, !dbg !13764
  %56 = load i32, i32* %insn_code, align 4, !dbg !13764
  %cmp64 = icmp ne i32 %56, 2956, !dbg !13765
  br i1 %cmp64, label %land.lhs.true66, label %if.end79, !dbg !13766

land.lhs.true66:                                  ; preds = %if.end59
  %57 = load i8, i8* %speed, align 1, !dbg !13767
  %idxprom67 = zext i8 %57 to i64, !dbg !13768
  %arrayidx68 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @mul_widen_cost, i64 0, i64 %idxprom67, !dbg !13768
  %58 = load i32, i32* %wider_mode, align 4, !dbg !13769
  %idxprom69 = zext i32 %58 to i64, !dbg !13768
  %arrayidx70 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx68, i64 0, i64 %idxprom69, !dbg !13768
  %59 = load i32, i32* %arrayidx70, align 4, !dbg !13768
  %60 = load i32, i32* %max_cost.addr, align 4, !dbg !13770
  %cmp71 = icmp slt i32 %59, %60, !dbg !13771
  br i1 %cmp71, label %if.then73, label %if.end79, !dbg !13772

if.then73:                                        ; preds = %land.lhs.true66
  %61 = load i32, i32* %wider_mode, align 4, !dbg !13773
  %62 = load %struct.optab_d*, %struct.optab_d** %moptab, align 8, !dbg !13775
  %63 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !13776
  %64 = load %struct.rtx_def*, %struct.rtx_def** %narrow_op1, align 8, !dbg !13777
  %65 = load i32, i32* %unsignedp.addr, align 4, !dbg !13778
  %call74 = call %struct.rtx_def* @expand_binop(i32 %61, %struct.optab_d* %62, %struct.rtx_def* %63, %struct.rtx_def* %64, %struct.rtx_def* null, i32 %65, i32 2), !dbg !13779
  store %struct.rtx_def* %call74, %struct.rtx_def** %tem, align 8, !dbg !13780
  %66 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13781
  %tobool75 = icmp ne %struct.rtx_def* %66, null, !dbg !13781
  br i1 %tobool75, label %if.then76, label %if.end78, !dbg !13783

if.then76:                                        ; preds = %if.then73
  %67 = load i32, i32* %mode.addr, align 4, !dbg !13784
  %68 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13785
  %call77 = call %struct.rtx_def* @extract_high_half(i32 %67, %struct.rtx_def* %68), !dbg !13786
  store %struct.rtx_def* %call77, %struct.rtx_def** %retval, align 8, !dbg !13787
  br label %return, !dbg !13787

if.end78:                                         ; preds = %if.then73
  br label %if.end79, !dbg !13788

if.end79:                                         ; preds = %if.end78, %land.lhs.true66, %if.end59
  %69 = load i32, i32* %wider_mode, align 4, !dbg !13789
  %idxprom80 = sext i32 %69 to i64, !dbg !13789
  %arrayidx81 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16, i32 4), i64 0, i64 %idxprom80, !dbg !13789
  %insn_code82 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx81, i32 0, i32 0, !dbg !13791
  %70 = load i32, i32* %insn_code82, align 4, !dbg !13791
  %cmp83 = icmp ne i32 %70, 2956, !dbg !13792
  br i1 %cmp83, label %land.lhs.true85, label %if.end114, !dbg !13793

land.lhs.true85:                                  ; preds = %if.end79
  %71 = load i32, i32* %size, align 4, !dbg !13794
  %sub86 = sub nsw i32 %71, 1, !dbg !13795
  %cmp87 = icmp slt i32 %sub86, 32, !dbg !13796
  br i1 %cmp87, label %land.lhs.true89, label %if.end114, !dbg !13797

land.lhs.true89:                                  ; preds = %land.lhs.true85
  %72 = load i8, i8* %speed, align 1, !dbg !13798
  %idxprom90 = zext i8 %72 to i64, !dbg !13799
  %arrayidx91 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @mul_cost, i64 0, i64 %idxprom90, !dbg !13799
  %73 = load i32, i32* %wider_mode, align 4, !dbg !13800
  %idxprom92 = zext i32 %73 to i64, !dbg !13799
  %arrayidx93 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx91, i64 0, i64 %idxprom92, !dbg !13799
  %74 = load i32, i32* %arrayidx93, align 4, !dbg !13799
  %75 = load i8, i8* %speed, align 1, !dbg !13801
  %idxprom94 = zext i8 %75 to i64, !dbg !13802
  %arrayidx95 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom94, !dbg !13802
  %76 = load i32, i32* %mode.addr, align 4, !dbg !13803
  %idxprom96 = zext i32 %76 to i64, !dbg !13802
  %arrayidx97 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx95, i64 0, i64 %idxprom96, !dbg !13802
  %77 = load i32, i32* %size, align 4, !dbg !13804
  %sub98 = sub nsw i32 %77, 1, !dbg !13805
  %idxprom99 = sext i32 %sub98 to i64, !dbg !13802
  %arrayidx100 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx97, i64 0, i64 %idxprom99, !dbg !13802
  %78 = load i32, i32* %arrayidx100, align 4, !dbg !13802
  %add101 = add nsw i32 %74, %78, !dbg !13806
  %79 = load i32, i32* %max_cost.addr, align 4, !dbg !13807
  %cmp102 = icmp slt i32 %add101, %79, !dbg !13808
  br i1 %cmp102, label %if.then104, label %if.end114, !dbg !13809

if.then104:                                       ; preds = %land.lhs.true89
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !13810, metadata !DIExpression()), !dbg !13812
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %wop0, metadata !13813, metadata !DIExpression()), !dbg !13814
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %wop1, metadata !13815, metadata !DIExpression()), !dbg !13816
  call void @start_sequence(), !dbg !13817
  %80 = load i32, i32* %wider_mode, align 4, !dbg !13818
  %81 = load i32, i32* %mode.addr, align 4, !dbg !13819
  %82 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !13820
  %83 = load i32, i32* %unsignedp.addr, align 4, !dbg !13821
  %call105 = call %struct.rtx_def* @convert_modes(i32 %80, i32 %81, %struct.rtx_def* %82, i32 %83), !dbg !13822
  store %struct.rtx_def* %call105, %struct.rtx_def** %wop0, align 8, !dbg !13823
  %84 = load i32, i32* %wider_mode, align 4, !dbg !13824
  %85 = load i32, i32* %mode.addr, align 4, !dbg !13825
  %86 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !13826
  %87 = load i32, i32* %unsignedp.addr, align 4, !dbg !13827
  %call106 = call %struct.rtx_def* @convert_modes(i32 %84, i32 %85, %struct.rtx_def* %86, i32 %87), !dbg !13828
  store %struct.rtx_def* %call106, %struct.rtx_def** %wop1, align 8, !dbg !13829
  %88 = load i32, i32* %wider_mode, align 4, !dbg !13830
  %89 = load %struct.rtx_def*, %struct.rtx_def** %wop0, align 8, !dbg !13831
  %90 = load %struct.rtx_def*, %struct.rtx_def** %wop1, align 8, !dbg !13832
  %91 = load i32, i32* %unsignedp.addr, align 4, !dbg !13833
  %call107 = call %struct.rtx_def* @expand_binop(i32 %88, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16), %struct.rtx_def* %89, %struct.rtx_def* %90, %struct.rtx_def* null, i32 %91, i32 2), !dbg !13834
  store %struct.rtx_def* %call107, %struct.rtx_def** %tem, align 8, !dbg !13835
  %call108 = call %struct.rtx_def* @get_insns(), !dbg !13836
  store %struct.rtx_def* %call108, %struct.rtx_def** %insns, align 8, !dbg !13837
  call void @end_sequence(), !dbg !13838
  %92 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13839
  %tobool109 = icmp ne %struct.rtx_def* %92, null, !dbg !13839
  br i1 %tobool109, label %if.then110, label %if.end113, !dbg !13841

if.then110:                                       ; preds = %if.then104
  %93 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !13842
  %call111 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %93), !dbg !13844
  %94 = load i32, i32* %mode.addr, align 4, !dbg !13845
  %95 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13846
  %call112 = call %struct.rtx_def* @extract_high_half(i32 %94, %struct.rtx_def* %95), !dbg !13847
  store %struct.rtx_def* %call112, %struct.rtx_def** %retval, align 8, !dbg !13848
  br label %return, !dbg !13848

if.end113:                                        ; preds = %if.then104
  br label %if.end114, !dbg !13849

if.end114:                                        ; preds = %if.end113, %land.lhs.true89, %land.lhs.true85, %if.end79
  %96 = load i32, i32* %unsignedp.addr, align 4, !dbg !13850
  %tobool115 = icmp ne i32 %96, 0, !dbg !13850
  %97 = zext i1 %tobool115 to i64, !dbg !13850
  %cond116 = select i1 %tobool115, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 20), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 21), !dbg !13850
  store %struct.optab_d* %cond116, %struct.optab_d** %moptab, align 8, !dbg !13851
  %98 = load %struct.optab_d*, %struct.optab_d** %moptab, align 8, !dbg !13852
  %handlers117 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %98, i32 0, i32 4, !dbg !13852
  %99 = load i32, i32* %wider_mode, align 4, !dbg !13852
  %idxprom118 = sext i32 %99 to i64, !dbg !13852
  %arrayidx119 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers117, i64 0, i64 %idxprom118, !dbg !13852
  %insn_code120 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx119, i32 0, i32 0, !dbg !13854
  %100 = load i32, i32* %insn_code120, align 4, !dbg !13854
  %cmp121 = icmp ne i32 %100, 2956, !dbg !13855
  br i1 %cmp121, label %land.lhs.true123, label %if.end158, !dbg !13856

land.lhs.true123:                                 ; preds = %if.end114
  %101 = load i32, i32* %size, align 4, !dbg !13857
  %sub124 = sub nsw i32 %101, 1, !dbg !13858
  %cmp125 = icmp slt i32 %sub124, 32, !dbg !13859
  br i1 %cmp125, label %land.lhs.true127, label %if.end158, !dbg !13860

land.lhs.true127:                                 ; preds = %land.lhs.true123
  %102 = load i8, i8* %speed, align 1, !dbg !13861
  %idxprom128 = zext i8 %102 to i64, !dbg !13862
  %arrayidx129 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @mul_widen_cost, i64 0, i64 %idxprom128, !dbg !13862
  %103 = load i32, i32* %wider_mode, align 4, !dbg !13863
  %idxprom130 = zext i32 %103 to i64, !dbg !13862
  %arrayidx131 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx129, i64 0, i64 %idxprom130, !dbg !13862
  %104 = load i32, i32* %arrayidx131, align 4, !dbg !13862
  %105 = load i8, i8* %speed, align 1, !dbg !13864
  %idxprom132 = zext i8 %105 to i64, !dbg !13865
  %arrayidx133 = getelementptr inbounds [2 x [87 x [32 x i32]]], [2 x [87 x [32 x i32]]]* @shift_cost, i64 0, i64 %idxprom132, !dbg !13865
  %106 = load i32, i32* %mode.addr, align 4, !dbg !13866
  %idxprom134 = zext i32 %106 to i64, !dbg !13865
  %arrayidx135 = getelementptr inbounds [87 x [32 x i32]], [87 x [32 x i32]]* %arrayidx133, i64 0, i64 %idxprom134, !dbg !13865
  %107 = load i32, i32* %size, align 4, !dbg !13867
  %sub136 = sub nsw i32 %107, 1, !dbg !13868
  %idxprom137 = sext i32 %sub136 to i64, !dbg !13865
  %arrayidx138 = getelementptr inbounds [32 x i32], [32 x i32]* %arrayidx135, i64 0, i64 %idxprom137, !dbg !13865
  %108 = load i32, i32* %arrayidx138, align 4, !dbg !13865
  %mul139 = mul nsw i32 2, %108, !dbg !13869
  %add140 = add nsw i32 %104, %mul139, !dbg !13870
  %109 = load i8, i8* %speed, align 1, !dbg !13871
  %idxprom141 = zext i8 %109 to i64, !dbg !13872
  %arrayidx142 = getelementptr inbounds [2 x [87 x i32]], [2 x [87 x i32]]* @add_cost, i64 0, i64 %idxprom141, !dbg !13872
  %110 = load i32, i32* %mode.addr, align 4, !dbg !13873
  %idxprom143 = zext i32 %110 to i64, !dbg !13872
  %arrayidx144 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx142, i64 0, i64 %idxprom143, !dbg !13872
  %111 = load i32, i32* %arrayidx144, align 4, !dbg !13872
  %mul145 = mul nsw i32 4, %111, !dbg !13874
  %add146 = add nsw i32 %add140, %mul145, !dbg !13875
  %112 = load i32, i32* %max_cost.addr, align 4, !dbg !13876
  %cmp147 = icmp slt i32 %add146, %112, !dbg !13877
  br i1 %cmp147, label %if.then149, label %if.end158, !dbg !13878

if.then149:                                       ; preds = %land.lhs.true127
  %113 = load i32, i32* %wider_mode, align 4, !dbg !13879
  %114 = load %struct.optab_d*, %struct.optab_d** %moptab, align 8, !dbg !13881
  %115 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !13882
  %116 = load %struct.rtx_def*, %struct.rtx_def** %narrow_op1, align 8, !dbg !13883
  %117 = load i32, i32* %unsignedp.addr, align 4, !dbg !13884
  %tobool150 = icmp ne i32 %117, 0, !dbg !13885
  %lnot = xor i1 %tobool150, true, !dbg !13885
  %lnot.ext = zext i1 %lnot to i32, !dbg !13885
  %call151 = call %struct.rtx_def* @expand_binop(i32 %113, %struct.optab_d* %114, %struct.rtx_def* %115, %struct.rtx_def* %116, %struct.rtx_def* null, i32 %lnot.ext, i32 2), !dbg !13886
  store %struct.rtx_def* %call151, %struct.rtx_def** %tem, align 8, !dbg !13887
  %118 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13888
  %cmp152 = icmp ne %struct.rtx_def* %118, null, !dbg !13890
  br i1 %cmp152, label %if.then154, label %if.end157, !dbg !13891

if.then154:                                       ; preds = %if.then149
  %119 = load i32, i32* %mode.addr, align 4, !dbg !13892
  %120 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13894
  %call155 = call %struct.rtx_def* @extract_high_half(i32 %119, %struct.rtx_def* %120), !dbg !13895
  store %struct.rtx_def* %call155, %struct.rtx_def** %tem, align 8, !dbg !13896
  %121 = load i32, i32* %mode.addr, align 4, !dbg !13897
  %122 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !13898
  %123 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !13899
  %124 = load %struct.rtx_def*, %struct.rtx_def** %narrow_op1, align 8, !dbg !13900
  %125 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !13901
  %126 = load i32, i32* %unsignedp.addr, align 4, !dbg !13902
  %call156 = call %struct.rtx_def* @expand_mult_highpart_adjust(i32 %121, %struct.rtx_def* %122, %struct.rtx_def* %123, %struct.rtx_def* %124, %struct.rtx_def* %125, i32 %126), !dbg !13903
  store %struct.rtx_def* %call156, %struct.rtx_def** %retval, align 8, !dbg !13904
  br label %return, !dbg !13904

if.end157:                                        ; preds = %if.then149
  br label %if.end158, !dbg !13905

if.end158:                                        ; preds = %if.end157, %land.lhs.true127, %land.lhs.true123, %if.end114
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !13906
  br label %return, !dbg !13906

return:                                           ; preds = %if.end158, %if.then154, %if.then110, %if.then76, %if.then56, %if.then27
  %127 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !13907
  ret %struct.rtx_def* %127, !dbg !13907
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @extract_high_half(i32 %mode, %struct.rtx_def* %op) #0 !dbg !13908 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %wider_mode = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !13909, metadata !DIExpression()), !dbg !13910
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op.addr, metadata !13911, metadata !DIExpression()), !dbg !13912
  call void @llvm.dbg.declare(metadata i32* %wider_mode, metadata !13913, metadata !DIExpression()), !dbg !13914
  %0 = load i32, i32* %mode.addr, align 4, !dbg !13915
  %1 = load i32, i32* @word_mode, align 4, !dbg !13917
  %cmp = icmp eq i32 %0, %1, !dbg !13918
  br i1 %cmp, label %if.then, label %if.end, !dbg !13919

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !13920
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !13921
  %call = call %struct.rtx_def* @gen_highpart(i32 %2, %struct.rtx_def* %3), !dbg !13922
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !13923
  br label %return, !dbg !13923

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !13924
  %idxprom = zext i32 %4 to i64, !dbg !13924
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !13924
  %5 = load i8, i8* %arrayidx, align 1, !dbg !13924
  %conv = zext i8 %5 to i32, !dbg !13924
  %cmp1 = icmp eq i32 %conv, 8, !dbg !13924
  br i1 %cmp1, label %cond.true, label %lor.lhs.false, !dbg !13924

lor.lhs.false:                                    ; preds = %if.end
  %6 = load i32, i32* %mode.addr, align 4, !dbg !13924
  %idxprom3 = zext i32 %6 to i64, !dbg !13924
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom3, !dbg !13924
  %7 = load i8, i8* %arrayidx4, align 1, !dbg !13924
  %conv5 = zext i8 %7 to i32, !dbg !13924
  %cmp6 = icmp eq i32 %conv5, 9, !dbg !13924
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !13924

cond.true:                                        ; preds = %lor.lhs.false, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3439, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13924
  br label %cond.end, !dbg !13924

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !13924

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13924
  %8 = load i32, i32* %mode.addr, align 4, !dbg !13925
  %idxprom8 = zext i32 %8 to i64, !dbg !13925
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom8, !dbg !13925
  %9 = load i8, i8* %arrayidx9, align 1, !dbg !13925
  %conv10 = zext i8 %9 to i32, !dbg !13925
  store i32 %conv10, i32* %wider_mode, align 4, !dbg !13926
  %10 = load i32, i32* %wider_mode, align 4, !dbg !13927
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !13928
  %12 = load i32, i32* %mode.addr, align 4, !dbg !13929
  %idxprom11 = zext i32 %12 to i64, !dbg !13929
  %arrayidx12 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom11, !dbg !13929
  %13 = load i8, i8* %arrayidx12, align 1, !dbg !13929
  %conv13 = zext i8 %13 to i16, !dbg !13929
  %conv14 = zext i16 %conv13 to i32, !dbg !13929
  %mul = mul nsw i32 %conv14, 8, !dbg !13929
  %conv15 = trunc i32 %mul to i16, !dbg !13929
  %conv16 = zext i16 %conv15 to i64, !dbg !13929
  %call17 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv16), !dbg !13930
  %call18 = call %struct.rtx_def* @expand_shift(i32 84, i32 %10, %struct.rtx_def* %11, %union.tree_node* %call17, %struct.rtx_def* null, i32 1), !dbg !13931
  store %struct.rtx_def* %call18, %struct.rtx_def** %op.addr, align 8, !dbg !13932
  %14 = load i32, i32* %mode.addr, align 4, !dbg !13933
  %15 = load i32, i32* %wider_mode, align 4, !dbg !13934
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !13935
  %call19 = call %struct.rtx_def* @convert_modes(i32 %14, i32 %15, %struct.rtx_def* %16, i32 0), !dbg !13936
  store %struct.rtx_def* %call19, %struct.rtx_def** %retval, align 8, !dbg !13937
  br label %return, !dbg !13937

return:                                           ; preds = %cond.end, %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !13938
  ret %struct.rtx_def* %17, !dbg !13938
}

declare dso_local %struct.rtx_def* @gen_highpart(i32, %struct.rtx_def*) #2

declare dso_local void @do_pending_stack_adjust() #2

declare dso_local i32 @unsigned_condition(i32) #2

declare dso_local i32 @swap_condition(i32) #2

declare dso_local zeroext i8 @swap_commutative_operands_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @subreg_highpart_offset(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @emit_cstore(%struct.rtx_def* %target, i32 %icode, i32 %code, i32 %mode, i32 %compare_mode, i32 %unsignedp, %struct.rtx_def* %x, %struct.rtx_def* %y, i32 %normalizep, i32 %target_mode) #0 !dbg !13939 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %icode.addr = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %compare_mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %normalizep.addr = alloca i32, align 4
  %target_mode.addr = alloca i32, align 4
  %op0 = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %comparison = alloca %struct.rtx_def*, align 8
  %subtarget = alloca %struct.rtx_def*, align 8
  %pattern = alloca %struct.rtx_def*, align 8
  %result_mode = alloca i32, align 4
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !13942, metadata !DIExpression()), !dbg !13943
  store i32 %icode, i32* %icode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %icode.addr, metadata !13944, metadata !DIExpression()), !dbg !13945
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !13946, metadata !DIExpression()), !dbg !13947
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !13948, metadata !DIExpression()), !dbg !13949
  store i32 %compare_mode, i32* %compare_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %compare_mode.addr, metadata !13950, metadata !DIExpression()), !dbg !13951
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !13952, metadata !DIExpression()), !dbg !13953
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !13954, metadata !DIExpression()), !dbg !13955
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !13956, metadata !DIExpression()), !dbg !13957
  store i32 %normalizep, i32* %normalizep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %normalizep.addr, metadata !13958, metadata !DIExpression()), !dbg !13959
  store i32 %target_mode, i32* %target_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %target_mode.addr, metadata !13960, metadata !DIExpression()), !dbg !13961
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0, metadata !13962, metadata !DIExpression()), !dbg !13963
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !13964, metadata !DIExpression()), !dbg !13965
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %comparison, metadata !13966, metadata !DIExpression()), !dbg !13967
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget, metadata !13968, metadata !DIExpression()), !dbg !13969
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern, metadata !13970, metadata !DIExpression()), !dbg !13971
  call void @llvm.dbg.declare(metadata i32* %result_mode, metadata !13972, metadata !DIExpression()), !dbg !13973
  %0 = load i32, i32* %icode.addr, align 4, !dbg !13974
  %idxprom = sext i32 %0 to i64, !dbg !13975
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, !dbg !13975
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3, !dbg !13976
  %1 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !13976
  %arrayidx1 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %1, i64 0, !dbg !13975
  %mode2 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx1, i32 0, i32 2, !dbg !13977
  %bf.load = load i16, i16* %mode2, align 8, !dbg !13977
  %bf.cast = zext i16 %bf.load to i32, !dbg !13977
  store i32 %bf.cast, i32* %result_mode, align 4, !dbg !13973
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !13978
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !13979
  %2 = load i32, i32* %icode.addr, align 4, !dbg !13980
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !13981
  %4 = load i32, i32* %mode.addr, align 4, !dbg !13982
  %5 = load i32, i32* %compare_mode.addr, align 4, !dbg !13983
  %6 = load i32, i32* %unsignedp.addr, align 4, !dbg !13984
  %call3 = call %struct.rtx_def* @prepare_operand(i32 %2, %struct.rtx_def* %3, i32 2, i32 %4, i32 %5, i32 %6), !dbg !13985
  store %struct.rtx_def* %call3, %struct.rtx_def** %x.addr, align 8, !dbg !13986
  %7 = load i32, i32* %icode.addr, align 4, !dbg !13987
  %8 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !13988
  %9 = load i32, i32* %mode.addr, align 4, !dbg !13989
  %10 = load i32, i32* %compare_mode.addr, align 4, !dbg !13990
  %11 = load i32, i32* %unsignedp.addr, align 4, !dbg !13991
  %call4 = call %struct.rtx_def* @prepare_operand(i32 %7, %struct.rtx_def* %8, i32 3, i32 %9, i32 %10, i32 %11), !dbg !13992
  store %struct.rtx_def* %call4, %struct.rtx_def** %y.addr, align 8, !dbg !13993
  %12 = load i32, i32* %code.addr, align 4, !dbg !13994
  %13 = load i32, i32* %result_mode, align 4, !dbg !13994
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !13994
  %15 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !13994
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %12, i32 %13, %struct.rtx_def* %14, %struct.rtx_def* %15), !dbg !13994
  store %struct.rtx_def* %call5, %struct.rtx_def** %comparison, align 8, !dbg !13995
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !13996
  %tobool = icmp ne %struct.rtx_def* %16, null, !dbg !13996
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !13998

lor.lhs.false:                                    ; preds = %entry
  %17 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !13999
  %tobool6 = icmp ne %struct.rtx_def* %17, null, !dbg !13999
  br i1 %tobool6, label %lor.lhs.false7, label %if.then, !dbg !14000

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %18 = load i32, i32* %icode.addr, align 4, !dbg !14001
  %idxprom8 = zext i32 %18 to i64, !dbg !14002
  %arrayidx9 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom8, !dbg !14002
  %operand10 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx9, i32 0, i32 3, !dbg !14003
  %19 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand10, align 8, !dbg !14003
  %arrayidx11 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %19, i64 2, !dbg !14002
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx11, i32 0, i32 0, !dbg !14004
  %20 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !14004
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !14005
  %22 = load i32, i32* %icode.addr, align 4, !dbg !14006
  %idxprom12 = zext i32 %22 to i64, !dbg !14007
  %arrayidx13 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom12, !dbg !14007
  %operand14 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx13, i32 0, i32 3, !dbg !14008
  %23 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand14, align 8, !dbg !14008
  %arrayidx15 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %23, i64 2, !dbg !14007
  %mode16 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx15, i32 0, i32 2, !dbg !14009
  %bf.load17 = load i16, i16* %mode16, align 8, !dbg !14009
  %bf.cast18 = zext i16 %bf.load17 to i32, !dbg !14009
  %call19 = call i32 %20(%struct.rtx_def* %21, i32 %bf.cast18), !dbg !14002
  %tobool20 = icmp ne i32 %call19, 0, !dbg !14002
  br i1 %tobool20, label %lor.lhs.false21, label %if.then, !dbg !14010

lor.lhs.false21:                                  ; preds = %lor.lhs.false7
  %24 = load i32, i32* %icode.addr, align 4, !dbg !14011
  %idxprom22 = zext i32 %24 to i64, !dbg !14012
  %arrayidx23 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom22, !dbg !14012
  %operand24 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx23, i32 0, i32 3, !dbg !14013
  %25 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand24, align 8, !dbg !14013
  %arrayidx25 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %25, i64 3, !dbg !14012
  %predicate26 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx25, i32 0, i32 0, !dbg !14014
  %26 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate26, align 8, !dbg !14014
  %27 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !14015
  %28 = load i32, i32* %icode.addr, align 4, !dbg !14016
  %idxprom27 = zext i32 %28 to i64, !dbg !14017
  %arrayidx28 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom27, !dbg !14017
  %operand29 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx28, i32 0, i32 3, !dbg !14018
  %29 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand29, align 8, !dbg !14018
  %arrayidx30 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %29, i64 3, !dbg !14017
  %mode31 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx30, i32 0, i32 2, !dbg !14019
  %bf.load32 = load i16, i16* %mode31, align 8, !dbg !14019
  %bf.cast33 = zext i16 %bf.load32 to i32, !dbg !14019
  %call34 = call i32 %26(%struct.rtx_def* %27, i32 %bf.cast33), !dbg !14012
  %tobool35 = icmp ne i32 %call34, 0, !dbg !14012
  br i1 %tobool35, label %lor.lhs.false36, label %if.then, !dbg !14020

lor.lhs.false36:                                  ; preds = %lor.lhs.false21
  %30 = load i32, i32* %icode.addr, align 4, !dbg !14021
  %idxprom37 = zext i32 %30 to i64, !dbg !14022
  %arrayidx38 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom37, !dbg !14022
  %operand39 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx38, i32 0, i32 3, !dbg !14023
  %31 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand39, align 8, !dbg !14023
  %arrayidx40 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %31, i64 1, !dbg !14022
  %predicate41 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx40, i32 0, i32 0, !dbg !14024
  %32 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate41, align 8, !dbg !14024
  %33 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !14025
  %call42 = call i32 %32(%struct.rtx_def* %33, i32 0), !dbg !14022
  %tobool43 = icmp ne i32 %call42, 0, !dbg !14022
  br i1 %tobool43, label %if.end, label %if.then, !dbg !14026

if.then:                                          ; preds = %lor.lhs.false36, %lor.lhs.false21, %lor.lhs.false7, %lor.lhs.false, %entry
  %34 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !14027
  call void @delete_insns_since(%struct.rtx_def* %34), !dbg !14029
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !14030
  br label %return, !dbg !14030

if.end:                                           ; preds = %lor.lhs.false36
  %35 = load i32, i32* %target_mode.addr, align 4, !dbg !14031
  %cmp = icmp eq i32 %35, 0, !dbg !14033
  br i1 %cmp, label %if.then44, label %if.end45, !dbg !14034

if.then44:                                        ; preds = %if.end
  %36 = load i32, i32* %result_mode, align 4, !dbg !14035
  store i32 %36, i32* %target_mode.addr, align 4, !dbg !14036
  br label %if.end45, !dbg !14037

if.end45:                                         ; preds = %if.then44, %if.end
  %37 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !14038
  %tobool46 = icmp ne %struct.rtx_def* %37, null, !dbg !14038
  br i1 %tobool46, label %if.end49, label %if.then47, !dbg !14040

if.then47:                                        ; preds = %if.end45
  %38 = load i32, i32* %target_mode.addr, align 4, !dbg !14041
  %call48 = call %struct.rtx_def* @gen_reg_rtx(i32 %38), !dbg !14042
  store %struct.rtx_def* %call48, %struct.rtx_def** %target.addr, align 8, !dbg !14043
  br label %if.end49, !dbg !14044

if.end49:                                         ; preds = %if.then47, %if.end45
  %39 = load i32, i32* @optimize, align 4, !dbg !14045
  %tobool50 = icmp ne i32 %39, 0, !dbg !14045
  br i1 %tobool50, label %if.then59, label %lor.lhs.false51, !dbg !14047

lor.lhs.false51:                                  ; preds = %if.end49
  %40 = load i32, i32* %icode.addr, align 4, !dbg !14048
  %idxprom52 = sext i32 %40 to i64, !dbg !14049
  %arrayidx53 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom52, !dbg !14049
  %operand54 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx53, i32 0, i32 3, !dbg !14050
  %41 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand54, align 8, !dbg !14050
  %arrayidx55 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %41, i64 0, !dbg !14049
  %predicate56 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx55, i32 0, i32 0, !dbg !14051
  %42 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate56, align 8, !dbg !14051
  %43 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !14052
  %44 = load i32, i32* %result_mode, align 4, !dbg !14053
  %call57 = call i32 %42(%struct.rtx_def* %43, i32 %44), !dbg !14049
  %tobool58 = icmp ne i32 %call57, 0, !dbg !14049
  br i1 %tobool58, label %if.else, label %if.then59, !dbg !14054

if.then59:                                        ; preds = %lor.lhs.false51, %if.end49
  %45 = load i32, i32* %result_mode, align 4, !dbg !14055
  %call60 = call %struct.rtx_def* @gen_reg_rtx(i32 %45), !dbg !14056
  store %struct.rtx_def* %call60, %struct.rtx_def** %subtarget, align 8, !dbg !14057
  br label %if.end61, !dbg !14058

if.else:                                          ; preds = %lor.lhs.false51
  %46 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !14059
  store %struct.rtx_def* %46, %struct.rtx_def** %subtarget, align 8, !dbg !14060
  br label %if.end61

if.end61:                                         ; preds = %if.else, %if.then59
  %47 = load i32, i32* %icode.addr, align 4, !dbg !14061
  %idxprom62 = zext i32 %47 to i64, !dbg !14061
  %arrayidx63 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom62, !dbg !14061
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx63, i32 0, i32 2, !dbg !14061
  %48 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !14061
  %49 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !14062
  %50 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !14063
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !14064
  %52 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !14065
  %call64 = call %struct.rtx_def* (%struct.rtx_def*, ...) %48(%struct.rtx_def* %49, %struct.rtx_def* %50, %struct.rtx_def* %51, %struct.rtx_def* %52), !dbg !14061
  store %struct.rtx_def* %call64, %struct.rtx_def** %pattern, align 8, !dbg !14066
  %53 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !14067
  %tobool65 = icmp ne %struct.rtx_def* %53, null, !dbg !14067
  br i1 %tobool65, label %if.end67, label %if.then66, !dbg !14069

if.then66:                                        ; preds = %if.end61
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !14070
  br label %return, !dbg !14070

if.end67:                                         ; preds = %if.end61
  %54 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !14071
  %call68 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %54), !dbg !14072
  %55 = load i32, i32* %target_mode.addr, align 4, !dbg !14073
  %idxprom69 = zext i32 %55 to i64, !dbg !14073
  %arrayidx70 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom69, !dbg !14073
  %56 = load i8, i8* %arrayidx70, align 1, !dbg !14073
  %conv = zext i8 %56 to i16, !dbg !14073
  %conv71 = zext i16 %conv to i32, !dbg !14073
  %57 = load i32, i32* %result_mode, align 4, !dbg !14075
  %idxprom72 = zext i32 %57 to i64, !dbg !14075
  %arrayidx73 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom72, !dbg !14075
  %58 = load i8, i8* %arrayidx73, align 1, !dbg !14075
  %conv74 = zext i8 %58 to i16, !dbg !14075
  %conv75 = zext i16 %conv74 to i32, !dbg !14075
  %cmp76 = icmp sgt i32 %conv71, %conv75, !dbg !14076
  br i1 %cmp76, label %if.then78, label %if.else96, !dbg !14077

if.then78:                                        ; preds = %if.end67
  %59 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !14078
  %60 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !14080
  %61 = load i32, i32* %result_mode, align 4, !dbg !14081
  %idxprom79 = zext i32 %61 to i64, !dbg !14081
  %arrayidx80 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom79, !dbg !14081
  %62 = load i8, i8* %arrayidx80, align 1, !dbg !14081
  %conv81 = zext i8 %62 to i16, !dbg !14081
  %conv82 = zext i16 %conv81 to i32, !dbg !14081
  %mul = mul nsw i32 %conv82, 8, !dbg !14081
  %conv83 = trunc i32 %mul to i16, !dbg !14081
  %conv84 = zext i16 %conv83 to i32, !dbg !14081
  %cmp85 = icmp sle i32 %conv84, 64, !dbg !14082
  br i1 %cmp85, label %land.rhs, label %land.end, !dbg !14083

land.rhs:                                         ; preds = %if.then78
  %63 = load i32, i32* %result_mode, align 4, !dbg !14084
  %idxprom87 = zext i32 %63 to i64, !dbg !14084
  %arrayidx88 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom87, !dbg !14084
  %64 = load i8, i8* %arrayidx88, align 1, !dbg !14084
  %conv89 = zext i8 %64 to i16, !dbg !14084
  %conv90 = zext i16 %conv89 to i32, !dbg !14084
  %mul91 = mul nsw i32 %conv90, 8, !dbg !14084
  %conv92 = trunc i32 %mul91 to i16, !dbg !14084
  %conv93 = zext i16 %conv92 to i32, !dbg !14084
  %sub = sub nsw i32 %conv93, 1, !dbg !14085
  %sh_prom = zext i32 %sub to i64, !dbg !14086
  %shl = shl i64 1, %sh_prom, !dbg !14086
  %and = and i64 1, %shl, !dbg !14087
  %cmp94 = icmp eq i64 0, %and, !dbg !14088
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then78
  %65 = phi i1 [ false, %if.then78 ], [ %cmp94, %land.rhs ], !dbg !14089
  %land.ext = zext i1 %65 to i32, !dbg !14083
  call void @convert_move(%struct.rtx_def* %59, %struct.rtx_def* %60, i32 %land.ext), !dbg !14090
  %66 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !14091
  store %struct.rtx_def* %66, %struct.rtx_def** %op0, align 8, !dbg !14092
  %67 = load i32, i32* %target_mode.addr, align 4, !dbg !14093
  store i32 %67, i32* %result_mode, align 4, !dbg !14094
  br label %if.end97, !dbg !14095

if.else96:                                        ; preds = %if.end67
  %68 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !14096
  store %struct.rtx_def* %68, %struct.rtx_def** %op0, align 8, !dbg !14097
  br label %if.end97

if.end97:                                         ; preds = %if.else96, %land.end
  %69 = load i32, i32* @optimize, align 4, !dbg !14098
  %tobool98 = icmp ne i32 %69, 0, !dbg !14098
  br i1 %tobool98, label %if.then99, label %if.end100, !dbg !14100

if.then99:                                        ; preds = %if.end97
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8, !dbg !14101
  br label %if.end100, !dbg !14102

if.end100:                                        ; preds = %if.then99, %if.end97
  %70 = load i32, i32* %normalizep.addr, align 4, !dbg !14103
  %cmp101 = icmp eq i32 %70, 0, !dbg !14105
  br i1 %cmp101, label %if.then106, label %lor.lhs.false103, !dbg !14106

lor.lhs.false103:                                 ; preds = %if.end100
  %71 = load i32, i32* %normalizep.addr, align 4, !dbg !14107
  %cmp104 = icmp eq i32 %71, 1, !dbg !14108
  br i1 %cmp104, label %if.then106, label %if.else107, !dbg !14109

if.then106:                                       ; preds = %lor.lhs.false103, %if.end100
  br label %if.end158, !dbg !14109

if.else107:                                       ; preds = %lor.lhs.false103
  %72 = load i32, i32* %normalizep.addr, align 4, !dbg !14110
  %sub108 = sub nsw i32 0, %72, !dbg !14112
  %cmp109 = icmp eq i32 %sub108, 1, !dbg !14113
  br i1 %cmp109, label %if.then111, label %if.else113, !dbg !14114

if.then111:                                       ; preds = %if.else107
  %73 = load i32, i32* %result_mode, align 4, !dbg !14115
  %74 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !14116
  %75 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !14117
  %call112 = call %struct.rtx_def* @expand_unop(i32 %73, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %74, %struct.rtx_def* %75, i32 0), !dbg !14118
  store %struct.rtx_def* %call112, %struct.rtx_def** %op0, align 8, !dbg !14119
  br label %if.end157, !dbg !14120

if.else113:                                       ; preds = %if.else107
  %76 = load i32, i32* %result_mode, align 4, !dbg !14121
  %idxprom114 = zext i32 %76 to i64, !dbg !14121
  %arrayidx115 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom114, !dbg !14121
  %77 = load i8, i8* %arrayidx115, align 1, !dbg !14121
  %conv116 = zext i8 %77 to i16, !dbg !14121
  %conv117 = zext i16 %conv116 to i32, !dbg !14121
  %mul118 = mul nsw i32 %conv117, 8, !dbg !14121
  %conv119 = trunc i32 %mul118 to i16, !dbg !14121
  %conv120 = zext i16 %conv119 to i32, !dbg !14121
  %cmp121 = icmp sle i32 %conv120, 64, !dbg !14123
  br i1 %cmp121, label %land.lhs.true, label %if.else149, !dbg !14124

land.lhs.true:                                    ; preds = %if.else113
  %78 = load i32, i32* %result_mode, align 4, !dbg !14125
  %idxprom123 = zext i32 %78 to i64, !dbg !14125
  %arrayidx124 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom123, !dbg !14125
  %79 = load i8, i8* %arrayidx124, align 1, !dbg !14125
  %conv125 = zext i8 %79 to i16, !dbg !14125
  %conv126 = zext i16 %conv125 to i32, !dbg !14125
  %mul127 = mul nsw i32 %conv126, 8, !dbg !14125
  %conv128 = trunc i32 %mul127 to i16, !dbg !14125
  %conv129 = zext i16 %conv128 to i32, !dbg !14125
  %sub130 = sub nsw i32 %conv129, 1, !dbg !14126
  %sh_prom131 = zext i32 %sub130 to i64, !dbg !14127
  %shl132 = shl i64 1, %sh_prom131, !dbg !14127
  %and133 = and i64 1, %shl132, !dbg !14128
  %tobool134 = icmp ne i64 %and133, 0, !dbg !14128
  br i1 %tobool134, label %if.then135, label %if.else149, !dbg !14129

if.then135:                                       ; preds = %land.lhs.true
  %80 = load i32, i32* %result_mode, align 4, !dbg !14130
  %81 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !14131
  %82 = load i32, i32* %result_mode, align 4, !dbg !14132
  %idxprom136 = zext i32 %82 to i64, !dbg !14132
  %arrayidx137 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom136, !dbg !14132
  %83 = load i8, i8* %arrayidx137, align 1, !dbg !14132
  %conv138 = zext i8 %83 to i16, !dbg !14132
  %conv139 = zext i16 %conv138 to i32, !dbg !14132
  %mul140 = mul nsw i32 %conv139, 8, !dbg !14132
  %conv141 = trunc i32 %mul140 to i16, !dbg !14132
  %conv142 = zext i16 %conv141 to i32, !dbg !14132
  %sub143 = sub nsw i32 %conv142, 1, !dbg !14132
  %conv144 = sext i32 %sub143 to i64, !dbg !14132
  %call145 = call %union.tree_node* @size_int_kind(i64 %conv144, i32 0), !dbg !14132
  %84 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !14133
  %85 = load i32, i32* %normalizep.addr, align 4, !dbg !14134
  %cmp146 = icmp eq i32 %85, 1, !dbg !14135
  %conv147 = zext i1 %cmp146 to i32, !dbg !14135
  %call148 = call %struct.rtx_def* @expand_shift(i32 84, i32 %80, %struct.rtx_def* %81, %union.tree_node* %call145, %struct.rtx_def* %84, i32 %conv147), !dbg !14136
  store %struct.rtx_def* %call148, %struct.rtx_def** %op0, align 8, !dbg !14137
  br label %if.end156, !dbg !14138

if.else149:                                       ; preds = %land.lhs.true, %if.else113
  %86 = load i32, i32* %result_mode, align 4, !dbg !14139
  %87 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !14141
  %88 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !14142
  %89 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !14143
  %call150 = call %struct.rtx_def* @expand_and(i32 %86, %struct.rtx_def* %87, %struct.rtx_def* %88, %struct.rtx_def* %89), !dbg !14144
  store %struct.rtx_def* %call150, %struct.rtx_def** %op0, align 8, !dbg !14145
  %90 = load i32, i32* %normalizep.addr, align 4, !dbg !14146
  %cmp151 = icmp eq i32 %90, -1, !dbg !14148
  br i1 %cmp151, label %if.then153, label %if.end155, !dbg !14149

if.then153:                                       ; preds = %if.else149
  %91 = load i32, i32* %result_mode, align 4, !dbg !14150
  %92 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !14151
  %93 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !14152
  %call154 = call %struct.rtx_def* @expand_unop(i32 %91, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %92, %struct.rtx_def* %93, i32 0), !dbg !14153
  store %struct.rtx_def* %call154, %struct.rtx_def** %op0, align 8, !dbg !14154
  br label %if.end155, !dbg !14155

if.end155:                                        ; preds = %if.then153, %if.else149
  br label %if.end156

if.end156:                                        ; preds = %if.end155, %if.then135
  br label %if.end157

if.end157:                                        ; preds = %if.end156, %if.then111
  br label %if.end158

if.end158:                                        ; preds = %if.end157, %if.then106
  %94 = load i32, i32* %target_mode.addr, align 4, !dbg !14156
  %95 = load i32, i32* %result_mode, align 4, !dbg !14158
  %cmp159 = icmp ne i32 %94, %95, !dbg !14159
  br i1 %cmp159, label %if.then161, label %if.else162, !dbg !14160

if.then161:                                       ; preds = %if.end158
  %96 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !14161
  %97 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !14163
  call void @convert_move(%struct.rtx_def* %96, %struct.rtx_def* %97, i32 0), !dbg !14164
  %98 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !14165
  store %struct.rtx_def* %98, %struct.rtx_def** %retval, align 8, !dbg !14166
  br label %return, !dbg !14166

if.else162:                                       ; preds = %if.end158
  %99 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !14167
  store %struct.rtx_def* %99, %struct.rtx_def** %retval, align 8, !dbg !14168
  br label %return, !dbg !14168

return:                                           ; preds = %if.else162, %if.then161, %if.then66, %if.then
  %100 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !14169
  ret %struct.rtx_def* %100, !dbg !14169
}

declare dso_local %struct.rtx_def* @prepare_operand(i32, %struct.rtx_def*, i32, i32, i32, i32) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3417, !3418, !3419}
!llvm.ident = !{!3420}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "zero_cost", scope: !2, file: !3, line: 101, type: !3416, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !2298, globals: !3363, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "expmed.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !150, !169, !176, !183, !377, !520, !542, !705, !711, !2203, !2218, !2225, !2230, !2243, !2277, !2282, !2289}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !146, line: 474, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149}
!148 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !151, line: 280, baseType: !7, size: 32, elements: !152)
!151 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!152 = !{!153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168}
!153 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!154 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!155 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!156 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!157 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!158 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!159 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!160 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!169 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !151, line: 1817, baseType: !7, size: 32, elements: !170)
!170 = !{!171, !172, !173, !174, !175}
!171 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !151, line: 1805, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !151, line: 39, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376}
!185 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!190 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!191 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!192 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!193 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!194 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!195 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!196 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!197 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!198 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!199 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!200 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!201 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!202 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!203 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!204 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!205 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!206 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!207 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!208 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!209 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!210 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!213 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!214 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!215 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!216 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!217 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!218 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!219 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!220 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!221 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!222 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!223 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!224 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!225 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!226 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!228 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!229 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!230 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!231 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!232 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!233 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!234 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!235 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!236 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!237 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!238 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!239 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!240 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!241 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!242 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!243 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!244 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!245 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!246 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!247 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!248 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!249 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!250 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!251 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!252 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!253 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!254 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!255 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!256 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!257 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!258 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!259 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!260 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!261 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!262 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!263 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!264 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!265 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!266 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!267 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!268 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!269 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!270 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!271 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!272 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!273 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!274 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!275 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!277 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!278 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!279 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!280 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!281 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!282 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!283 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!284 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!285 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!286 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!287 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!288 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!289 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!290 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!291 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!292 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!293 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!294 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!295 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!296 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!297 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!298 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!299 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!300 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!301 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!302 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!303 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!304 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!305 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!307 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!308 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!309 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!310 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!311 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!312 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!313 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!314 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!315 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!316 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!317 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!318 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!319 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!320 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!321 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!322 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!323 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!324 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!325 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!326 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!327 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!328 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!329 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!330 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!331 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!332 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!333 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!334 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!335 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!336 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!337 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!349 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!350 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!351 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!352 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!353 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!354 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!355 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!356 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!357 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!358 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!359 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!360 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!361 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!370 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!371 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!372 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!373 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!374 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!375 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!376 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !378, line: 45, baseType: !7, size: 32, elements: !379)
!378 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!379 = !{!380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519}
!380 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!381 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!382 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!383 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!384 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!385 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!386 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!387 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!388 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!389 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!390 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!391 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!392 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!393 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!394 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!395 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!396 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!397 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!398 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!399 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!400 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!401 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!402 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!403 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!404 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!405 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!406 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!407 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!408 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!409 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!410 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!411 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!412 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!413 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!414 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!415 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!416 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!417 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!418 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!419 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!420 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!421 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!422 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!423 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!424 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!425 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!426 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!427 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!428 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!429 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!430 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!431 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!432 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!433 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!434 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!435 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!436 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!437 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!438 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!439 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!440 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!441 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!442 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!443 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!444 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!445 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!446 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!447 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!448 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!449 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!450 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!451 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!452 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!453 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!454 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!455 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!456 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!457 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!458 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!459 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!460 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!461 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!462 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!463 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!464 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!465 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!466 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!467 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!468 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!469 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!470 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!471 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!472 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!473 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!474 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!475 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!476 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!477 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!478 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!479 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!480 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!481 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!482 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!483 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!484 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!485 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!486 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!487 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!488 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!489 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!490 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!491 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!492 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!493 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!494 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!495 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!496 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!497 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!498 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!499 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!500 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!501 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!502 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!503 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!504 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!505 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!506 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!507 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!508 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!509 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!510 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!511 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!512 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!513 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!514 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!515 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!516 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!517 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!518 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!519 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!520 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !521, line: 36, baseType: !7, size: 32, elements: !522)
!521 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!522 = !{!523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541}
!523 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!524 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!525 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!526 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!527 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!528 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!529 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!530 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!531 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!532 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!533 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!534 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!535 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!536 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!537 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!538 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!539 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!540 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!541 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!542 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_index", file: !543, line: 76, baseType: !7, size: 32, elements: !544)
!543 = !DIFile(filename: "./optabs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!544 = !{!545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704}
!545 = !DIEnumerator(name: "OTI_ssadd", value: 0, isUnsigned: true)
!546 = !DIEnumerator(name: "OTI_usadd", value: 1, isUnsigned: true)
!547 = !DIEnumerator(name: "OTI_sssub", value: 2, isUnsigned: true)
!548 = !DIEnumerator(name: "OTI_ussub", value: 3, isUnsigned: true)
!549 = !DIEnumerator(name: "OTI_ssmul", value: 4, isUnsigned: true)
!550 = !DIEnumerator(name: "OTI_usmul", value: 5, isUnsigned: true)
!551 = !DIEnumerator(name: "OTI_ssdiv", value: 6, isUnsigned: true)
!552 = !DIEnumerator(name: "OTI_usdiv", value: 7, isUnsigned: true)
!553 = !DIEnumerator(name: "OTI_ssneg", value: 8, isUnsigned: true)
!554 = !DIEnumerator(name: "OTI_usneg", value: 9, isUnsigned: true)
!555 = !DIEnumerator(name: "OTI_ssashl", value: 10, isUnsigned: true)
!556 = !DIEnumerator(name: "OTI_usashl", value: 11, isUnsigned: true)
!557 = !DIEnumerator(name: "OTI_add", value: 12, isUnsigned: true)
!558 = !DIEnumerator(name: "OTI_addv", value: 13, isUnsigned: true)
!559 = !DIEnumerator(name: "OTI_sub", value: 14, isUnsigned: true)
!560 = !DIEnumerator(name: "OTI_subv", value: 15, isUnsigned: true)
!561 = !DIEnumerator(name: "OTI_smul", value: 16, isUnsigned: true)
!562 = !DIEnumerator(name: "OTI_smulv", value: 17, isUnsigned: true)
!563 = !DIEnumerator(name: "OTI_smul_highpart", value: 18, isUnsigned: true)
!564 = !DIEnumerator(name: "OTI_umul_highpart", value: 19, isUnsigned: true)
!565 = !DIEnumerator(name: "OTI_smul_widen", value: 20, isUnsigned: true)
!566 = !DIEnumerator(name: "OTI_umul_widen", value: 21, isUnsigned: true)
!567 = !DIEnumerator(name: "OTI_usmul_widen", value: 22, isUnsigned: true)
!568 = !DIEnumerator(name: "OTI_smadd_widen", value: 23, isUnsigned: true)
!569 = !DIEnumerator(name: "OTI_umadd_widen", value: 24, isUnsigned: true)
!570 = !DIEnumerator(name: "OTI_ssmadd_widen", value: 25, isUnsigned: true)
!571 = !DIEnumerator(name: "OTI_usmadd_widen", value: 26, isUnsigned: true)
!572 = !DIEnumerator(name: "OTI_smsub_widen", value: 27, isUnsigned: true)
!573 = !DIEnumerator(name: "OTI_umsub_widen", value: 28, isUnsigned: true)
!574 = !DIEnumerator(name: "OTI_ssmsub_widen", value: 29, isUnsigned: true)
!575 = !DIEnumerator(name: "OTI_usmsub_widen", value: 30, isUnsigned: true)
!576 = !DIEnumerator(name: "OTI_sdiv", value: 31, isUnsigned: true)
!577 = !DIEnumerator(name: "OTI_sdivv", value: 32, isUnsigned: true)
!578 = !DIEnumerator(name: "OTI_sdivmod", value: 33, isUnsigned: true)
!579 = !DIEnumerator(name: "OTI_udiv", value: 34, isUnsigned: true)
!580 = !DIEnumerator(name: "OTI_udivmod", value: 35, isUnsigned: true)
!581 = !DIEnumerator(name: "OTI_smod", value: 36, isUnsigned: true)
!582 = !DIEnumerator(name: "OTI_umod", value: 37, isUnsigned: true)
!583 = !DIEnumerator(name: "OTI_fmod", value: 38, isUnsigned: true)
!584 = !DIEnumerator(name: "OTI_remainder", value: 39, isUnsigned: true)
!585 = !DIEnumerator(name: "OTI_ftrunc", value: 40, isUnsigned: true)
!586 = !DIEnumerator(name: "OTI_and", value: 41, isUnsigned: true)
!587 = !DIEnumerator(name: "OTI_ior", value: 42, isUnsigned: true)
!588 = !DIEnumerator(name: "OTI_xor", value: 43, isUnsigned: true)
!589 = !DIEnumerator(name: "OTI_ashl", value: 44, isUnsigned: true)
!590 = !DIEnumerator(name: "OTI_lshr", value: 45, isUnsigned: true)
!591 = !DIEnumerator(name: "OTI_ashr", value: 46, isUnsigned: true)
!592 = !DIEnumerator(name: "OTI_rotl", value: 47, isUnsigned: true)
!593 = !DIEnumerator(name: "OTI_rotr", value: 48, isUnsigned: true)
!594 = !DIEnumerator(name: "OTI_vashl", value: 49, isUnsigned: true)
!595 = !DIEnumerator(name: "OTI_vlshr", value: 50, isUnsigned: true)
!596 = !DIEnumerator(name: "OTI_vashr", value: 51, isUnsigned: true)
!597 = !DIEnumerator(name: "OTI_vrotl", value: 52, isUnsigned: true)
!598 = !DIEnumerator(name: "OTI_vrotr", value: 53, isUnsigned: true)
!599 = !DIEnumerator(name: "OTI_smin", value: 54, isUnsigned: true)
!600 = !DIEnumerator(name: "OTI_smax", value: 55, isUnsigned: true)
!601 = !DIEnumerator(name: "OTI_umin", value: 56, isUnsigned: true)
!602 = !DIEnumerator(name: "OTI_umax", value: 57, isUnsigned: true)
!603 = !DIEnumerator(name: "OTI_pow", value: 58, isUnsigned: true)
!604 = !DIEnumerator(name: "OTI_atan2", value: 59, isUnsigned: true)
!605 = !DIEnumerator(name: "OTI_mov", value: 60, isUnsigned: true)
!606 = !DIEnumerator(name: "OTI_movstrict", value: 61, isUnsigned: true)
!607 = !DIEnumerator(name: "OTI_movmisalign", value: 62, isUnsigned: true)
!608 = !DIEnumerator(name: "OTI_storent", value: 63, isUnsigned: true)
!609 = !DIEnumerator(name: "OTI_neg", value: 64, isUnsigned: true)
!610 = !DIEnumerator(name: "OTI_negv", value: 65, isUnsigned: true)
!611 = !DIEnumerator(name: "OTI_abs", value: 66, isUnsigned: true)
!612 = !DIEnumerator(name: "OTI_absv", value: 67, isUnsigned: true)
!613 = !DIEnumerator(name: "OTI_bswap", value: 68, isUnsigned: true)
!614 = !DIEnumerator(name: "OTI_one_cmpl", value: 69, isUnsigned: true)
!615 = !DIEnumerator(name: "OTI_ffs", value: 70, isUnsigned: true)
!616 = !DIEnumerator(name: "OTI_clz", value: 71, isUnsigned: true)
!617 = !DIEnumerator(name: "OTI_ctz", value: 72, isUnsigned: true)
!618 = !DIEnumerator(name: "OTI_popcount", value: 73, isUnsigned: true)
!619 = !DIEnumerator(name: "OTI_parity", value: 74, isUnsigned: true)
!620 = !DIEnumerator(name: "OTI_sqrt", value: 75, isUnsigned: true)
!621 = !DIEnumerator(name: "OTI_sincos", value: 76, isUnsigned: true)
!622 = !DIEnumerator(name: "OTI_sin", value: 77, isUnsigned: true)
!623 = !DIEnumerator(name: "OTI_asin", value: 78, isUnsigned: true)
!624 = !DIEnumerator(name: "OTI_cos", value: 79, isUnsigned: true)
!625 = !DIEnumerator(name: "OTI_acos", value: 80, isUnsigned: true)
!626 = !DIEnumerator(name: "OTI_exp", value: 81, isUnsigned: true)
!627 = !DIEnumerator(name: "OTI_exp10", value: 82, isUnsigned: true)
!628 = !DIEnumerator(name: "OTI_exp2", value: 83, isUnsigned: true)
!629 = !DIEnumerator(name: "OTI_expm1", value: 84, isUnsigned: true)
!630 = !DIEnumerator(name: "OTI_ldexp", value: 85, isUnsigned: true)
!631 = !DIEnumerator(name: "OTI_scalb", value: 86, isUnsigned: true)
!632 = !DIEnumerator(name: "OTI_significand", value: 87, isUnsigned: true)
!633 = !DIEnumerator(name: "OTI_logb", value: 88, isUnsigned: true)
!634 = !DIEnumerator(name: "OTI_ilogb", value: 89, isUnsigned: true)
!635 = !DIEnumerator(name: "OTI_log", value: 90, isUnsigned: true)
!636 = !DIEnumerator(name: "OTI_log10", value: 91, isUnsigned: true)
!637 = !DIEnumerator(name: "OTI_log2", value: 92, isUnsigned: true)
!638 = !DIEnumerator(name: "OTI_log1p", value: 93, isUnsigned: true)
!639 = !DIEnumerator(name: "OTI_floor", value: 94, isUnsigned: true)
!640 = !DIEnumerator(name: "OTI_ceil", value: 95, isUnsigned: true)
!641 = !DIEnumerator(name: "OTI_btrunc", value: 96, isUnsigned: true)
!642 = !DIEnumerator(name: "OTI_round", value: 97, isUnsigned: true)
!643 = !DIEnumerator(name: "OTI_nearbyint", value: 98, isUnsigned: true)
!644 = !DIEnumerator(name: "OTI_rint", value: 99, isUnsigned: true)
!645 = !DIEnumerator(name: "OTI_tan", value: 100, isUnsigned: true)
!646 = !DIEnumerator(name: "OTI_atan", value: 101, isUnsigned: true)
!647 = !DIEnumerator(name: "OTI_copysign", value: 102, isUnsigned: true)
!648 = !DIEnumerator(name: "OTI_signbit", value: 103, isUnsigned: true)
!649 = !DIEnumerator(name: "OTI_isinf", value: 104, isUnsigned: true)
!650 = !DIEnumerator(name: "OTI_cmp", value: 105, isUnsigned: true)
!651 = !DIEnumerator(name: "OTI_ucmp", value: 106, isUnsigned: true)
!652 = !DIEnumerator(name: "OTI_eq", value: 107, isUnsigned: true)
!653 = !DIEnumerator(name: "OTI_ne", value: 108, isUnsigned: true)
!654 = !DIEnumerator(name: "OTI_gt", value: 109, isUnsigned: true)
!655 = !DIEnumerator(name: "OTI_ge", value: 110, isUnsigned: true)
!656 = !DIEnumerator(name: "OTI_lt", value: 111, isUnsigned: true)
!657 = !DIEnumerator(name: "OTI_le", value: 112, isUnsigned: true)
!658 = !DIEnumerator(name: "OTI_unord", value: 113, isUnsigned: true)
!659 = !DIEnumerator(name: "OTI_strlen", value: 114, isUnsigned: true)
!660 = !DIEnumerator(name: "OTI_cbranch", value: 115, isUnsigned: true)
!661 = !DIEnumerator(name: "OTI_cmov", value: 116, isUnsigned: true)
!662 = !DIEnumerator(name: "OTI_cstore", value: 117, isUnsigned: true)
!663 = !DIEnumerator(name: "OTI_ctrap", value: 118, isUnsigned: true)
!664 = !DIEnumerator(name: "OTI_push", value: 119, isUnsigned: true)
!665 = !DIEnumerator(name: "OTI_addcc", value: 120, isUnsigned: true)
!666 = !DIEnumerator(name: "OTI_reduc_smax", value: 121, isUnsigned: true)
!667 = !DIEnumerator(name: "OTI_reduc_umax", value: 122, isUnsigned: true)
!668 = !DIEnumerator(name: "OTI_reduc_smin", value: 123, isUnsigned: true)
!669 = !DIEnumerator(name: "OTI_reduc_umin", value: 124, isUnsigned: true)
!670 = !DIEnumerator(name: "OTI_reduc_splus", value: 125, isUnsigned: true)
!671 = !DIEnumerator(name: "OTI_reduc_uplus", value: 126, isUnsigned: true)
!672 = !DIEnumerator(name: "OTI_ssum_widen", value: 127, isUnsigned: true)
!673 = !DIEnumerator(name: "OTI_usum_widen", value: 128, isUnsigned: true)
!674 = !DIEnumerator(name: "OTI_sdot_prod", value: 129, isUnsigned: true)
!675 = !DIEnumerator(name: "OTI_udot_prod", value: 130, isUnsigned: true)
!676 = !DIEnumerator(name: "OTI_vec_set", value: 131, isUnsigned: true)
!677 = !DIEnumerator(name: "OTI_vec_extract", value: 132, isUnsigned: true)
!678 = !DIEnumerator(name: "OTI_vec_extract_even", value: 133, isUnsigned: true)
!679 = !DIEnumerator(name: "OTI_vec_extract_odd", value: 134, isUnsigned: true)
!680 = !DIEnumerator(name: "OTI_vec_interleave_high", value: 135, isUnsigned: true)
!681 = !DIEnumerator(name: "OTI_vec_interleave_low", value: 136, isUnsigned: true)
!682 = !DIEnumerator(name: "OTI_vec_init", value: 137, isUnsigned: true)
!683 = !DIEnumerator(name: "OTI_vec_shl", value: 138, isUnsigned: true)
!684 = !DIEnumerator(name: "OTI_vec_shr", value: 139, isUnsigned: true)
!685 = !DIEnumerator(name: "OTI_vec_realign_load", value: 140, isUnsigned: true)
!686 = !DIEnumerator(name: "OTI_vec_widen_umult_hi", value: 141, isUnsigned: true)
!687 = !DIEnumerator(name: "OTI_vec_widen_umult_lo", value: 142, isUnsigned: true)
!688 = !DIEnumerator(name: "OTI_vec_widen_smult_hi", value: 143, isUnsigned: true)
!689 = !DIEnumerator(name: "OTI_vec_widen_smult_lo", value: 144, isUnsigned: true)
!690 = !DIEnumerator(name: "OTI_vec_unpacks_hi", value: 145, isUnsigned: true)
!691 = !DIEnumerator(name: "OTI_vec_unpacks_lo", value: 146, isUnsigned: true)
!692 = !DIEnumerator(name: "OTI_vec_unpacku_hi", value: 147, isUnsigned: true)
!693 = !DIEnumerator(name: "OTI_vec_unpacku_lo", value: 148, isUnsigned: true)
!694 = !DIEnumerator(name: "OTI_vec_unpacks_float_hi", value: 149, isUnsigned: true)
!695 = !DIEnumerator(name: "OTI_vec_unpacks_float_lo", value: 150, isUnsigned: true)
!696 = !DIEnumerator(name: "OTI_vec_unpacku_float_hi", value: 151, isUnsigned: true)
!697 = !DIEnumerator(name: "OTI_vec_unpacku_float_lo", value: 152, isUnsigned: true)
!698 = !DIEnumerator(name: "OTI_vec_pack_trunc", value: 153, isUnsigned: true)
!699 = !DIEnumerator(name: "OTI_vec_pack_usat", value: 154, isUnsigned: true)
!700 = !DIEnumerator(name: "OTI_vec_pack_ssat", value: 155, isUnsigned: true)
!701 = !DIEnumerator(name: "OTI_vec_pack_sfix_trunc", value: 156, isUnsigned: true)
!702 = !DIEnumerator(name: "OTI_vec_pack_ufix_trunc", value: 157, isUnsigned: true)
!703 = !DIEnumerator(name: "OTI_powi", value: 158, isUnsigned: true)
!704 = !DIEnumerator(name: "OTI_MAX", value: 159, isUnsigned: true)
!705 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "extraction_pattern", file: !706, line: 798, baseType: !7, size: 32, elements: !707)
!706 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!707 = !{!708, !709, !710}
!708 = !DIEnumerator(name: "EP_insv", value: 0, isUnsigned: true)
!709 = !DIEnumerator(name: "EP_extv", value: 1, isUnsigned: true)
!710 = !DIEnumerator(name: "EP_extzv", value: 2, isUnsigned: true)
!711 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_code", file: !712, line: 7, baseType: !7, size: 32, elements: !713)
!712 = !DIFile(filename: "./insn-codes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!713 = !{!714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202}
!714 = !DIEnumerator(name: "CODE_FOR_x86_fnstsw_1", value: 30, isUnsigned: true)
!715 = !DIEnumerator(name: "CODE_FOR_x86_sahf_1", value: 31, isUnsigned: true)
!716 = !DIEnumerator(name: "CODE_FOR_popsi1", value: 41, isUnsigned: true)
!717 = !DIEnumerator(name: "CODE_FOR_movsi_insv_1", value: 63, isUnsigned: true)
!718 = !DIEnumerator(name: "CODE_FOR_swapxf", value: 83, isUnsigned: true)
!719 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2_and", value: 84, isUnsigned: true)
!720 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2_32", value: 92, isUnsigned: true)
!721 = !DIEnumerator(name: "CODE_FOR_extendhisi2", value: 94, isUnsigned: true)
!722 = !DIEnumerator(name: "CODE_FOR_extendqihi2", value: 95, isUnsigned: true)
!723 = !DIEnumerator(name: "CODE_FOR_extendqisi2", value: 96, isUnsigned: true)
!724 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop", value: 110, isUnsigned: true)
!725 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop", value: 111, isUnsigned: true)
!726 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi_sse", value: 116, isUnsigned: true)
!727 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi_sse", value: 117, isUnsigned: true)
!728 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_fisttp_i387_1", value: 118, isUnsigned: true)
!729 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_fisttp_i387_1", value: 119, isUnsigned: true)
!730 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_fisttp_i387_1", value: 120, isUnsigned: true)
!731 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp", value: 121, isUnsigned: true)
!732 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp", value: 122, isUnsigned: true)
!733 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp", value: 123, isUnsigned: true)
!734 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp_with_temp", value: 124, isUnsigned: true)
!735 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp_with_temp", value: 125, isUnsigned: true)
!736 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp_with_temp", value: 126, isUnsigned: true)
!737 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387", value: 130, isUnsigned: true)
!738 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_with_temp", value: 131, isUnsigned: true)
!739 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387", value: 132, isUnsigned: true)
!740 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387", value: 133, isUnsigned: true)
!741 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_with_temp", value: 134, isUnsigned: true)
!742 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_with_temp", value: 135, isUnsigned: true)
!743 = !DIEnumerator(name: "CODE_FOR_x86_fnstcw_1", value: 136, isUnsigned: true)
!744 = !DIEnumerator(name: "CODE_FOR_x86_fldcw_1", value: 137, isUnsigned: true)
!745 = !DIEnumerator(name: "CODE_FOR_floatdisf2_i387_with_xmm", value: 185, isUnsigned: true)
!746 = !DIEnumerator(name: "CODE_FOR_floatdidf2_i387_with_xmm", value: 186, isUnsigned: true)
!747 = !DIEnumerator(name: "CODE_FOR_floatdixf2_i387_with_xmm", value: 187, isUnsigned: true)
!748 = !DIEnumerator(name: "CODE_FOR_addqi3_cc", value: 195, isUnsigned: true)
!749 = !DIEnumerator(name: "CODE_FOR_addqi_ext_1", value: 219, isUnsigned: true)
!750 = !DIEnumerator(name: "CODE_FOR_divqi3", value: 271, isUnsigned: true)
!751 = !DIEnumerator(name: "CODE_FOR_udivqi3", value: 272, isUnsigned: true)
!752 = !DIEnumerator(name: "CODE_FOR_andqi_ext_0", value: 298, isUnsigned: true)
!753 = !DIEnumerator(name: "CODE_FOR_copysignsf3_const", value: 367, isUnsigned: true)
!754 = !DIEnumerator(name: "CODE_FOR_copysigndf3_const", value: 368, isUnsigned: true)
!755 = !DIEnumerator(name: "CODE_FOR_copysigntf3_const", value: 369, isUnsigned: true)
!756 = !DIEnumerator(name: "CODE_FOR_copysignsf3_var", value: 370, isUnsigned: true)
!757 = !DIEnumerator(name: "CODE_FOR_copysigndf3_var", value: 371, isUnsigned: true)
!758 = !DIEnumerator(name: "CODE_FOR_copysigntf3_var", value: 372, isUnsigned: true)
!759 = !DIEnumerator(name: "CODE_FOR_x86_shld", value: 382, isUnsigned: true)
!760 = !DIEnumerator(name: "CODE_FOR_x86_shrd", value: 395, isUnsigned: true)
!761 = !DIEnumerator(name: "CODE_FOR_ix86_rotldi3", value: 438, isUnsigned: true)
!762 = !DIEnumerator(name: "CODE_FOR_ix86_rotrdi3", value: 447, isUnsigned: true)
!763 = !DIEnumerator(name: "CODE_FOR_jump", value: 478, isUnsigned: true)
!764 = !DIEnumerator(name: "CODE_FOR_blockage", value: 487, isUnsigned: true)
!765 = !DIEnumerator(name: "CODE_FOR_prologue_use", value: 489, isUnsigned: true)
!766 = !DIEnumerator(name: "CODE_FOR_return_internal", value: 490, isUnsigned: true)
!767 = !DIEnumerator(name: "CODE_FOR_return_internal_long", value: 491, isUnsigned: true)
!768 = !DIEnumerator(name: "CODE_FOR_return_pop_internal", value: 492, isUnsigned: true)
!769 = !DIEnumerator(name: "CODE_FOR_return_indirect_internal", value: 493, isUnsigned: true)
!770 = !DIEnumerator(name: "CODE_FOR_nop", value: 494, isUnsigned: true)
!771 = !DIEnumerator(name: "CODE_FOR_vswapmov", value: 495, isUnsigned: true)
!772 = !DIEnumerator(name: "CODE_FOR_pad", value: 496, isUnsigned: true)
!773 = !DIEnumerator(name: "CODE_FOR_set_got", value: 497, isUnsigned: true)
!774 = !DIEnumerator(name: "CODE_FOR_set_got_labelled", value: 498, isUnsigned: true)
!775 = !DIEnumerator(name: "CODE_FOR_eh_return_internal", value: 499, isUnsigned: true)
!776 = !DIEnumerator(name: "CODE_FOR_leave", value: 500, isUnsigned: true)
!777 = !DIEnumerator(name: "CODE_FOR_ctzsi2", value: 503, isUnsigned: true)
!778 = !DIEnumerator(name: "CODE_FOR_clzsi2_abm", value: 504, isUnsigned: true)
!779 = !DIEnumerator(name: "CODE_FOR_bsr", value: 505, isUnsigned: true)
!780 = !DIEnumerator(name: "CODE_FOR_popcounthi2", value: 506, isUnsigned: true)
!781 = !DIEnumerator(name: "CODE_FOR_popcountsi2", value: 507, isUnsigned: true)
!782 = !DIEnumerator(name: "CODE_FOR_bswaphi_lowpart", value: 514, isUnsigned: true)
!783 = !DIEnumerator(name: "CODE_FOR_clzhi2_abm", value: 515, isUnsigned: true)
!784 = !DIEnumerator(name: "CODE_FOR_paritydi2_cmp", value: 517, isUnsigned: true)
!785 = !DIEnumerator(name: "CODE_FOR_paritysi2_cmp", value: 518, isUnsigned: true)
!786 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop_unspec", value: 573, isUnsigned: true)
!787 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop_unspec", value: 574, isUnsigned: true)
!788 = !DIEnumerator(name: "CODE_FOR_sqrtxf2", value: 575, isUnsigned: true)
!789 = !DIEnumerator(name: "CODE_FOR_sqrt_extendsfxf2_i387", value: 576, isUnsigned: true)
!790 = !DIEnumerator(name: "CODE_FOR_sqrt_extenddfxf2_i387", value: 577, isUnsigned: true)
!791 = !DIEnumerator(name: "CODE_FOR_fpremxf4_i387", value: 581, isUnsigned: true)
!792 = !DIEnumerator(name: "CODE_FOR_fprem1xf4_i387", value: 582, isUnsigned: true)
!793 = !DIEnumerator(name: "CODE_FOR_sincosxf3", value: 589, isUnsigned: true)
!794 = !DIEnumerator(name: "CODE_FOR_sincos_extendsfxf3_i387", value: 590, isUnsigned: true)
!795 = !DIEnumerator(name: "CODE_FOR_sincos_extenddfxf3_i387", value: 591, isUnsigned: true)
!796 = !DIEnumerator(name: "CODE_FOR_fptanxf4_i387", value: 592, isUnsigned: true)
!797 = !DIEnumerator(name: "CODE_FOR_fptan_extendsfxf4_i387", value: 593, isUnsigned: true)
!798 = !DIEnumerator(name: "CODE_FOR_fptan_extenddfxf4_i387", value: 594, isUnsigned: true)
!799 = !DIEnumerator(name: "CODE_FOR_fpatan_extendsfxf3_i387", value: 596, isUnsigned: true)
!800 = !DIEnumerator(name: "CODE_FOR_fpatan_extenddfxf3_i387", value: 597, isUnsigned: true)
!801 = !DIEnumerator(name: "CODE_FOR_fyl2xxf3_i387", value: 598, isUnsigned: true)
!802 = !DIEnumerator(name: "CODE_FOR_fyl2x_extendsfxf3_i387", value: 599, isUnsigned: true)
!803 = !DIEnumerator(name: "CODE_FOR_fyl2x_extenddfxf3_i387", value: 600, isUnsigned: true)
!804 = !DIEnumerator(name: "CODE_FOR_fyl2xp1xf3_i387", value: 601, isUnsigned: true)
!805 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extendsfxf3_i387", value: 602, isUnsigned: true)
!806 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extenddfxf3_i387", value: 603, isUnsigned: true)
!807 = !DIEnumerator(name: "CODE_FOR_fxtractxf3_i387", value: 604, isUnsigned: true)
!808 = !DIEnumerator(name: "CODE_FOR_fxtract_extendsfxf3_i387", value: 605, isUnsigned: true)
!809 = !DIEnumerator(name: "CODE_FOR_fxtract_extenddfxf3_i387", value: 606, isUnsigned: true)
!810 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsf2", value: 609, isUnsigned: true)
!811 = !DIEnumerator(name: "CODE_FOR_sse4_1_rounddf2", value: 610, isUnsigned: true)
!812 = !DIEnumerator(name: "CODE_FOR_rintxf2", value: 611, isUnsigned: true)
!813 = !DIEnumerator(name: "CODE_FOR_fistdi2", value: 613, isUnsigned: true)
!814 = !DIEnumerator(name: "CODE_FOR_fistdi2_with_temp", value: 614, isUnsigned: true)
!815 = !DIEnumerator(name: "CODE_FOR_fisthi2", value: 617, isUnsigned: true)
!816 = !DIEnumerator(name: "CODE_FOR_fistsi2", value: 618, isUnsigned: true)
!817 = !DIEnumerator(name: "CODE_FOR_fisthi2_with_temp", value: 619, isUnsigned: true)
!818 = !DIEnumerator(name: "CODE_FOR_fistsi2_with_temp", value: 620, isUnsigned: true)
!819 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor", value: 621, isUnsigned: true)
!820 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor_i387", value: 622, isUnsigned: true)
!821 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor", value: 626, isUnsigned: true)
!822 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor_with_temp", value: 627, isUnsigned: true)
!823 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor", value: 628, isUnsigned: true)
!824 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor", value: 629, isUnsigned: true)
!825 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor_with_temp", value: 630, isUnsigned: true)
!826 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor_with_temp", value: 631, isUnsigned: true)
!827 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil", value: 632, isUnsigned: true)
!828 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil_i387", value: 633, isUnsigned: true)
!829 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil", value: 637, isUnsigned: true)
!830 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil_with_temp", value: 638, isUnsigned: true)
!831 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil", value: 639, isUnsigned: true)
!832 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil", value: 640, isUnsigned: true)
!833 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil_with_temp", value: 641, isUnsigned: true)
!834 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil_with_temp", value: 642, isUnsigned: true)
!835 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc", value: 643, isUnsigned: true)
!836 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc_i387", value: 644, isUnsigned: true)
!837 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm", value: 645, isUnsigned: true)
!838 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm_i387", value: 646, isUnsigned: true)
!839 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387", value: 647, isUnsigned: true)
!840 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387", value: 648, isUnsigned: true)
!841 = !DIEnumerator(name: "CODE_FOR_fxamxf2_i387", value: 649, isUnsigned: true)
!842 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387_with_temp", value: 650, isUnsigned: true)
!843 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387_with_temp", value: 651, isUnsigned: true)
!844 = !DIEnumerator(name: "CODE_FOR_cld", value: 652, isUnsigned: true)
!845 = !DIEnumerator(name: "CODE_FOR_smaxsf3", value: 681, isUnsigned: true)
!846 = !DIEnumerator(name: "CODE_FOR_sminsf3", value: 682, isUnsigned: true)
!847 = !DIEnumerator(name: "CODE_FOR_smaxdf3", value: 683, isUnsigned: true)
!848 = !DIEnumerator(name: "CODE_FOR_smindf3", value: 684, isUnsigned: true)
!849 = !DIEnumerator(name: "CODE_FOR_pro_epilogue_adjust_stack_1", value: 693, isUnsigned: true)
!850 = !DIEnumerator(name: "CODE_FOR_allocate_stack_worker_32", value: 694, isUnsigned: true)
!851 = !DIEnumerator(name: "CODE_FOR_trap", value: 701, isUnsigned: true)
!852 = !DIEnumerator(name: "CODE_FOR_stack_protect_set_si", value: 704, isUnsigned: true)
!853 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_set_si", value: 705, isUnsigned: true)
!854 = !DIEnumerator(name: "CODE_FOR_stack_protect_test_si", value: 706, isUnsigned: true)
!855 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_test_si", value: 707, isUnsigned: true)
!856 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32qi", value: 708, isUnsigned: true)
!857 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32hi", value: 709, isUnsigned: true)
!858 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32si", value: 710, isUnsigned: true)
!859 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcbsi", value: 715, isUnsigned: true)
!860 = !DIEnumerator(name: "CODE_FOR_sse_movntdi", value: 728, isUnsigned: true)
!861 = !DIEnumerator(name: "CODE_FOR_mmx_rcpv2sf2", value: 736, isUnsigned: true)
!862 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit1v2sf3", value: 737, isUnsigned: true)
!863 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit2v2sf3", value: 738, isUnsigned: true)
!864 = !DIEnumerator(name: "CODE_FOR_mmx_rsqrtv2sf2", value: 739, isUnsigned: true)
!865 = !DIEnumerator(name: "CODE_FOR_mmx_rsqit1v2sf3", value: 740, isUnsigned: true)
!866 = !DIEnumerator(name: "CODE_FOR_mmx_haddv2sf3", value: 741, isUnsigned: true)
!867 = !DIEnumerator(name: "CODE_FOR_mmx_hsubv2sf3", value: 742, isUnsigned: true)
!868 = !DIEnumerator(name: "CODE_FOR_mmx_addsubv2sf3", value: 743, isUnsigned: true)
!869 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2sf3", value: 745, isUnsigned: true)
!870 = !DIEnumerator(name: "CODE_FOR_mmx_gev2sf3", value: 746, isUnsigned: true)
!871 = !DIEnumerator(name: "CODE_FOR_mmx_pf2id", value: 747, isUnsigned: true)
!872 = !DIEnumerator(name: "CODE_FOR_mmx_pf2iw", value: 748, isUnsigned: true)
!873 = !DIEnumerator(name: "CODE_FOR_mmx_pi2fw", value: 749, isUnsigned: true)
!874 = !DIEnumerator(name: "CODE_FOR_mmx_floatv2si2", value: 750, isUnsigned: true)
!875 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2sf2", value: 751, isUnsigned: true)
!876 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv4hi3", value: 782, isUnsigned: true)
!877 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv2si3", value: 783, isUnsigned: true)
!878 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv4hi3", value: 784, isUnsigned: true)
!879 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv2si3", value: 785, isUnsigned: true)
!880 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv1di3", value: 786, isUnsigned: true)
!881 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv4hi3", value: 787, isUnsigned: true)
!882 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv2si3", value: 788, isUnsigned: true)
!883 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv1di3", value: 789, isUnsigned: true)
!884 = !DIEnumerator(name: "CODE_FOR_mmx_gtv8qi3", value: 793, isUnsigned: true)
!885 = !DIEnumerator(name: "CODE_FOR_mmx_gtv4hi3", value: 794, isUnsigned: true)
!886 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2si3", value: 795, isUnsigned: true)
!887 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv8qi3", value: 796, isUnsigned: true)
!888 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv4hi3", value: 797, isUnsigned: true)
!889 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv2si3", value: 798, isUnsigned: true)
!890 = !DIEnumerator(name: "CODE_FOR_mmx_packsswb", value: 808, isUnsigned: true)
!891 = !DIEnumerator(name: "CODE_FOR_mmx_packssdw", value: 809, isUnsigned: true)
!892 = !DIEnumerator(name: "CODE_FOR_mmx_packuswb", value: 810, isUnsigned: true)
!893 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhbw", value: 811, isUnsigned: true)
!894 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklbw", value: 812, isUnsigned: true)
!895 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhwd", value: 813, isUnsigned: true)
!896 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklwd", value: 814, isUnsigned: true)
!897 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhdq", value: 815, isUnsigned: true)
!898 = !DIEnumerator(name: "CODE_FOR_mmx_punpckldq", value: 816, isUnsigned: true)
!899 = !DIEnumerator(name: "CODE_FOR_mmx_pextrw", value: 818, isUnsigned: true)
!900 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw_1", value: 819, isUnsigned: true)
!901 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2si2", value: 820, isUnsigned: true)
!902 = !DIEnumerator(name: "CODE_FOR_mmx_psadbw", value: 828, isUnsigned: true)
!903 = !DIEnumerator(name: "CODE_FOR_mmx_pmovmskb", value: 829, isUnsigned: true)
!904 = !DIEnumerator(name: "CODE_FOR_movdi_to_sse", value: 853, isUnsigned: true)
!905 = !DIEnumerator(name: "CODE_FOR_avx_movups", value: 854, isUnsigned: true)
!906 = !DIEnumerator(name: "CODE_FOR_avx_movupd", value: 855, isUnsigned: true)
!907 = !DIEnumerator(name: "CODE_FOR_avx_movups256", value: 856, isUnsigned: true)
!908 = !DIEnumerator(name: "CODE_FOR_avx_movupd256", value: 857, isUnsigned: true)
!909 = !DIEnumerator(name: "CODE_FOR_sse2_movq128", value: 858, isUnsigned: true)
!910 = !DIEnumerator(name: "CODE_FOR_sse_movups", value: 859, isUnsigned: true)
!911 = !DIEnumerator(name: "CODE_FOR_sse2_movupd", value: 860, isUnsigned: true)
!912 = !DIEnumerator(name: "CODE_FOR_avx_movdqu256", value: 861, isUnsigned: true)
!913 = !DIEnumerator(name: "CODE_FOR_avx_movdqu", value: 862, isUnsigned: true)
!914 = !DIEnumerator(name: "CODE_FOR_sse2_movdqu", value: 863, isUnsigned: true)
!915 = !DIEnumerator(name: "CODE_FOR_avx_movntv4sf", value: 864, isUnsigned: true)
!916 = !DIEnumerator(name: "CODE_FOR_avx_movntv2df", value: 865, isUnsigned: true)
!917 = !DIEnumerator(name: "CODE_FOR_avx_movntv8sf", value: 866, isUnsigned: true)
!918 = !DIEnumerator(name: "CODE_FOR_avx_movntv4df", value: 867, isUnsigned: true)
!919 = !DIEnumerator(name: "CODE_FOR_sse_movntv4sf", value: 868, isUnsigned: true)
!920 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2df", value: 869, isUnsigned: true)
!921 = !DIEnumerator(name: "CODE_FOR_avx_movntv4di", value: 870, isUnsigned: true)
!922 = !DIEnumerator(name: "CODE_FOR_avx_movntv2di", value: 871, isUnsigned: true)
!923 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2di", value: 872, isUnsigned: true)
!924 = !DIEnumerator(name: "CODE_FOR_sse2_movntsi", value: 873, isUnsigned: true)
!925 = !DIEnumerator(name: "CODE_FOR_avx_lddqu256", value: 874, isUnsigned: true)
!926 = !DIEnumerator(name: "CODE_FOR_avx_lddqu", value: 875, isUnsigned: true)
!927 = !DIEnumerator(name: "CODE_FOR_sse3_lddqu", value: 876, isUnsigned: true)
!928 = !DIEnumerator(name: "CODE_FOR_sse_vmaddv4sf3", value: 893, isUnsigned: true)
!929 = !DIEnumerator(name: "CODE_FOR_sse_vmsubv4sf3", value: 894, isUnsigned: true)
!930 = !DIEnumerator(name: "CODE_FOR_sse2_vmaddv2df3", value: 895, isUnsigned: true)
!931 = !DIEnumerator(name: "CODE_FOR_sse2_vmsubv2df3", value: 896, isUnsigned: true)
!932 = !DIEnumerator(name: "CODE_FOR_sse_vmmulv4sf3", value: 905, isUnsigned: true)
!933 = !DIEnumerator(name: "CODE_FOR_sse2_vmmulv2df3", value: 906, isUnsigned: true)
!934 = !DIEnumerator(name: "CODE_FOR_avx_divv4sf3", value: 907, isUnsigned: true)
!935 = !DIEnumerator(name: "CODE_FOR_avx_divv2df3", value: 908, isUnsigned: true)
!936 = !DIEnumerator(name: "CODE_FOR_avx_divv8sf3", value: 909, isUnsigned: true)
!937 = !DIEnumerator(name: "CODE_FOR_avx_divv4df3", value: 910, isUnsigned: true)
!938 = !DIEnumerator(name: "CODE_FOR_sse_divv4sf3", value: 913, isUnsigned: true)
!939 = !DIEnumerator(name: "CODE_FOR_sse2_divv2df3", value: 914, isUnsigned: true)
!940 = !DIEnumerator(name: "CODE_FOR_sse_vmdivv4sf3", value: 917, isUnsigned: true)
!941 = !DIEnumerator(name: "CODE_FOR_sse2_vmdivv2df3", value: 918, isUnsigned: true)
!942 = !DIEnumerator(name: "CODE_FOR_avx_rcpv8sf2", value: 919, isUnsigned: true)
!943 = !DIEnumerator(name: "CODE_FOR_sse_rcpv4sf2", value: 920, isUnsigned: true)
!944 = !DIEnumerator(name: "CODE_FOR_sse_vmrcpv4sf2", value: 922, isUnsigned: true)
!945 = !DIEnumerator(name: "CODE_FOR_avx_sqrtv8sf2", value: 923, isUnsigned: true)
!946 = !DIEnumerator(name: "CODE_FOR_sse_sqrtv4sf2", value: 924, isUnsigned: true)
!947 = !DIEnumerator(name: "CODE_FOR_sqrtv4df2", value: 925, isUnsigned: true)
!948 = !DIEnumerator(name: "CODE_FOR_sqrtv2df2", value: 926, isUnsigned: true)
!949 = !DIEnumerator(name: "CODE_FOR_sse_vmsqrtv4sf2", value: 929, isUnsigned: true)
!950 = !DIEnumerator(name: "CODE_FOR_sse2_vmsqrtv2df2", value: 930, isUnsigned: true)
!951 = !DIEnumerator(name: "CODE_FOR_avx_rsqrtv8sf2", value: 931, isUnsigned: true)
!952 = !DIEnumerator(name: "CODE_FOR_sse_rsqrtv4sf2", value: 932, isUnsigned: true)
!953 = !DIEnumerator(name: "CODE_FOR_sse_vmrsqrtv4sf2", value: 934, isUnsigned: true)
!954 = !DIEnumerator(name: "CODE_FOR_sse_vmsmaxv4sf3", value: 963, isUnsigned: true)
!955 = !DIEnumerator(name: "CODE_FOR_sse_vmsminv4sf3", value: 964, isUnsigned: true)
!956 = !DIEnumerator(name: "CODE_FOR_sse2_vmsmaxv2df3", value: 965, isUnsigned: true)
!957 = !DIEnumerator(name: "CODE_FOR_sse2_vmsminv2df3", value: 966, isUnsigned: true)
!958 = !DIEnumerator(name: "CODE_FOR_avx_addsubv8sf3", value: 979, isUnsigned: true)
!959 = !DIEnumerator(name: "CODE_FOR_avx_addsubv4df3", value: 980, isUnsigned: true)
!960 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv4sf3", value: 982, isUnsigned: true)
!961 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv2df3", value: 984, isUnsigned: true)
!962 = !DIEnumerator(name: "CODE_FOR_avx_haddv4df3", value: 985, isUnsigned: true)
!963 = !DIEnumerator(name: "CODE_FOR_avx_hsubv4df3", value: 986, isUnsigned: true)
!964 = !DIEnumerator(name: "CODE_FOR_avx_haddv8sf3", value: 987, isUnsigned: true)
!965 = !DIEnumerator(name: "CODE_FOR_avx_hsubv8sf3", value: 988, isUnsigned: true)
!966 = !DIEnumerator(name: "CODE_FOR_sse3_haddv4sf3", value: 991, isUnsigned: true)
!967 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv4sf3", value: 992, isUnsigned: true)
!968 = !DIEnumerator(name: "CODE_FOR_sse3_haddv2df3", value: 995, isUnsigned: true)
!969 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv2df3", value: 996, isUnsigned: true)
!970 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv4sf3", value: 997, isUnsigned: true)
!971 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv2df3", value: 998, isUnsigned: true)
!972 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv8sf3", value: 999, isUnsigned: true)
!973 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv4df3", value: 1000, isUnsigned: true)
!974 = !DIEnumerator(name: "CODE_FOR_avx_cmpssv4sf3", value: 1001, isUnsigned: true)
!975 = !DIEnumerator(name: "CODE_FOR_avx_cmpsdv2df3", value: 1002, isUnsigned: true)
!976 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpsf3", value: 1007, isUnsigned: true)
!977 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpdf3", value: 1008, isUnsigned: true)
!978 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpv4sf3", value: 1009, isUnsigned: true)
!979 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpv2df3", value: 1010, isUnsigned: true)
!980 = !DIEnumerator(name: "CODE_FOR_sse_vmmaskcmpv4sf3", value: 1011, isUnsigned: true)
!981 = !DIEnumerator(name: "CODE_FOR_sse2_vmmaskcmpv2df3", value: 1012, isUnsigned: true)
!982 = !DIEnumerator(name: "CODE_FOR_sse_comi", value: 1013, isUnsigned: true)
!983 = !DIEnumerator(name: "CODE_FOR_sse2_comi", value: 1014, isUnsigned: true)
!984 = !DIEnumerator(name: "CODE_FOR_sse_ucomi", value: 1015, isUnsigned: true)
!985 = !DIEnumerator(name: "CODE_FOR_sse2_ucomi", value: 1016, isUnsigned: true)
!986 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4sf3", value: 1017, isUnsigned: true)
!987 = !DIEnumerator(name: "CODE_FOR_avx_andnotv2df3", value: 1018, isUnsigned: true)
!988 = !DIEnumerator(name: "CODE_FOR_avx_andnotv8sf3", value: 1019, isUnsigned: true)
!989 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4df3", value: 1020, isUnsigned: true)
!990 = !DIEnumerator(name: "CODE_FOR_sse_andnotv4sf3", value: 1021, isUnsigned: true)
!991 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2df3", value: 1022, isUnsigned: true)
!992 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv8sf4256", value: 1057, isUnsigned: true)
!993 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4df4256", value: 1058, isUnsigned: true)
!994 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv8sf4256", value: 1059, isUnsigned: true)
!995 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4df4256", value: 1060, isUnsigned: true)
!996 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv8sf4256", value: 1061, isUnsigned: true)
!997 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4df4256", value: 1062, isUnsigned: true)
!998 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv8sf4256", value: 1063, isUnsigned: true)
!999 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4df4256", value: 1064, isUnsigned: true)
!1000 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsf4", value: 1065, isUnsigned: true)
!1001 = !DIEnumerator(name: "CODE_FOR_fma4_fmadddf4", value: 1066, isUnsigned: true)
!1002 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4sf4", value: 1067, isUnsigned: true)
!1003 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv2df4", value: 1068, isUnsigned: true)
!1004 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv4sf4", value: 1069, isUnsigned: true)
!1005 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv2df4", value: 1070, isUnsigned: true)
!1006 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubsf4", value: 1071, isUnsigned: true)
!1007 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubdf4", value: 1072, isUnsigned: true)
!1008 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4sf4", value: 1073, isUnsigned: true)
!1009 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv2df4", value: 1074, isUnsigned: true)
!1010 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv4sf4", value: 1075, isUnsigned: true)
!1011 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv2df4", value: 1076, isUnsigned: true)
!1012 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddsf4", value: 1077, isUnsigned: true)
!1013 = !DIEnumerator(name: "CODE_FOR_fma4_fnmadddf4", value: 1078, isUnsigned: true)
!1014 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4sf4", value: 1079, isUnsigned: true)
!1015 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv2df4", value: 1080, isUnsigned: true)
!1016 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv4sf4", value: 1081, isUnsigned: true)
!1017 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv2df4", value: 1082, isUnsigned: true)
!1018 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubsf4", value: 1083, isUnsigned: true)
!1019 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubdf4", value: 1084, isUnsigned: true)
!1020 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4sf4", value: 1085, isUnsigned: true)
!1021 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv2df4", value: 1086, isUnsigned: true)
!1022 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv4sf4", value: 1087, isUnsigned: true)
!1023 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv2df4", value: 1088, isUnsigned: true)
!1024 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv8sf4256", value: 1089, isUnsigned: true)
!1025 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4df4256", value: 1090, isUnsigned: true)
!1026 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv8sf4256", value: 1091, isUnsigned: true)
!1027 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4df4256", value: 1092, isUnsigned: true)
!1028 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv8sf4256", value: 1093, isUnsigned: true)
!1029 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4df4256", value: 1094, isUnsigned: true)
!1030 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv8sf4256", value: 1095, isUnsigned: true)
!1031 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4df4256", value: 1096, isUnsigned: true)
!1032 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4sf4", value: 1097, isUnsigned: true)
!1033 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv2df4", value: 1098, isUnsigned: true)
!1034 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4sf4", value: 1099, isUnsigned: true)
!1035 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv2df4", value: 1100, isUnsigned: true)
!1036 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4sf4", value: 1101, isUnsigned: true)
!1037 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv2df4", value: 1102, isUnsigned: true)
!1038 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4sf4", value: 1103, isUnsigned: true)
!1039 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv2df4", value: 1104, isUnsigned: true)
!1040 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv4sf4", value: 1105, isUnsigned: true)
!1041 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv2df4", value: 1106, isUnsigned: true)
!1042 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv4sf4", value: 1107, isUnsigned: true)
!1043 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv2df4", value: 1108, isUnsigned: true)
!1044 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv4sf4", value: 1109, isUnsigned: true)
!1045 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv2df4", value: 1110, isUnsigned: true)
!1046 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv4sf4", value: 1111, isUnsigned: true)
!1047 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv2df4", value: 1112, isUnsigned: true)
!1048 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv8sf4", value: 1113, isUnsigned: true)
!1049 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4df4", value: 1114, isUnsigned: true)
!1050 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4sf4", value: 1115, isUnsigned: true)
!1051 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv2df4", value: 1116, isUnsigned: true)
!1052 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv8sf4", value: 1117, isUnsigned: true)
!1053 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4df4", value: 1118, isUnsigned: true)
!1054 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4sf4", value: 1119, isUnsigned: true)
!1055 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv2df4", value: 1120, isUnsigned: true)
!1056 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv8sf4", value: 1121, isUnsigned: true)
!1057 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4df4", value: 1122, isUnsigned: true)
!1058 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4sf4", value: 1123, isUnsigned: true)
!1059 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv2df4", value: 1124, isUnsigned: true)
!1060 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv8sf4", value: 1125, isUnsigned: true)
!1061 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4df4", value: 1126, isUnsigned: true)
!1062 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4sf4", value: 1127, isUnsigned: true)
!1063 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv2df4", value: 1128, isUnsigned: true)
!1064 = !DIEnumerator(name: "CODE_FOR_sse_cvtpi2ps", value: 1129, isUnsigned: true)
!1065 = !DIEnumerator(name: "CODE_FOR_sse_cvtps2pi", value: 1130, isUnsigned: true)
!1066 = !DIEnumerator(name: "CODE_FOR_sse_cvttps2pi", value: 1131, isUnsigned: true)
!1067 = !DIEnumerator(name: "CODE_FOR_sse_cvtsi2ss", value: 1133, isUnsigned: true)
!1068 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si", value: 1134, isUnsigned: true)
!1069 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si_2", value: 1135, isUnsigned: true)
!1070 = !DIEnumerator(name: "CODE_FOR_sse_cvttss2si", value: 1136, isUnsigned: true)
!1071 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps", value: 1137, isUnsigned: true)
!1072 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps256", value: 1138, isUnsigned: true)
!1073 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2ps", value: 1139, isUnsigned: true)
!1074 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq", value: 1140, isUnsigned: true)
!1075 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq256", value: 1141, isUnsigned: true)
!1076 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2dq", value: 1142, isUnsigned: true)
!1077 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq", value: 1143, isUnsigned: true)
!1078 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq256", value: 1144, isUnsigned: true)
!1079 = !DIEnumerator(name: "CODE_FOR_sse2_cvttps2dq", value: 1145, isUnsigned: true)
!1080 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpi2pd", value: 1146, isUnsigned: true)
!1081 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2pi", value: 1147, isUnsigned: true)
!1082 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2pi", value: 1148, isUnsigned: true)
!1083 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsi2sd", value: 1150, isUnsigned: true)
!1084 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si", value: 1151, isUnsigned: true)
!1085 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si_2", value: 1152, isUnsigned: true)
!1086 = !DIEnumerator(name: "CODE_FOR_sse2_cvttsd2si", value: 1153, isUnsigned: true)
!1087 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2pd256", value: 1154, isUnsigned: true)
!1088 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2pd", value: 1155, isUnsigned: true)
!1089 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2dq256", value: 1156, isUnsigned: true)
!1090 = !DIEnumerator(name: "CODE_FOR_avx_cvttpd2dq256", value: 1158, isUnsigned: true)
!1091 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2ss", value: 1161, isUnsigned: true)
!1092 = !DIEnumerator(name: "CODE_FOR_sse2_cvtss2sd", value: 1163, isUnsigned: true)
!1093 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2ps256", value: 1164, isUnsigned: true)
!1094 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2pd256", value: 1166, isUnsigned: true)
!1095 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2pd", value: 1167, isUnsigned: true)
!1096 = !DIEnumerator(name: "CODE_FOR_sse_movhlps", value: 1169, isUnsigned: true)
!1097 = !DIEnumerator(name: "CODE_FOR_sse_movlhps", value: 1171, isUnsigned: true)
!1098 = !DIEnumerator(name: "CODE_FOR_avx_unpckhps256", value: 1172, isUnsigned: true)
!1099 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4sf", value: 1174, isUnsigned: true)
!1100 = !DIEnumerator(name: "CODE_FOR_avx_unpcklps256", value: 1175, isUnsigned: true)
!1101 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4sf", value: 1177, isUnsigned: true)
!1102 = !DIEnumerator(name: "CODE_FOR_avx_movshdup256", value: 1178, isUnsigned: true)
!1103 = !DIEnumerator(name: "CODE_FOR_sse3_movshdup", value: 1179, isUnsigned: true)
!1104 = !DIEnumerator(name: "CODE_FOR_avx_movsldup256", value: 1180, isUnsigned: true)
!1105 = !DIEnumerator(name: "CODE_FOR_sse3_movsldup", value: 1181, isUnsigned: true)
!1106 = !DIEnumerator(name: "CODE_FOR_avx_shufps256_1", value: 1182, isUnsigned: true)
!1107 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4sf", value: 1185, isUnsigned: true)
!1108 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4si", value: 1186, isUnsigned: true)
!1109 = !DIEnumerator(name: "CODE_FOR_sse_storehps", value: 1187, isUnsigned: true)
!1110 = !DIEnumerator(name: "CODE_FOR_sse_loadhps", value: 1189, isUnsigned: true)
!1111 = !DIEnumerator(name: "CODE_FOR_sse_storelps", value: 1191, isUnsigned: true)
!1112 = !DIEnumerator(name: "CODE_FOR_sse_loadlps", value: 1193, isUnsigned: true)
!1113 = !DIEnumerator(name: "CODE_FOR_sse_movss", value: 1195, isUnsigned: true)
!1114 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf_0", value: 1209, isUnsigned: true)
!1115 = !DIEnumerator(name: "CODE_FOR_vec_setv4si_0", value: 1210, isUnsigned: true)
!1116 = !DIEnumerator(name: "CODE_FOR_sse4_1_insertps", value: 1214, isUnsigned: true)
!1117 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4di", value: 1216, isUnsigned: true)
!1118 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4df", value: 1217, isUnsigned: true)
!1119 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4di", value: 1218, isUnsigned: true)
!1120 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4df", value: 1219, isUnsigned: true)
!1121 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8si", value: 1220, isUnsigned: true)
!1122 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8sf", value: 1221, isUnsigned: true)
!1123 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8si", value: 1222, isUnsigned: true)
!1124 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8sf", value: 1223, isUnsigned: true)
!1125 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v16hi", value: 1224, isUnsigned: true)
!1126 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v16hi", value: 1225, isUnsigned: true)
!1127 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v32qi", value: 1226, isUnsigned: true)
!1128 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v32qi", value: 1227, isUnsigned: true)
!1129 = !DIEnumerator(name: "CODE_FOR_avx_unpckhpd256", value: 1230, isUnsigned: true)
!1130 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256_1", value: 1238, isUnsigned: true)
!1131 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2di", value: 1240, isUnsigned: true)
!1132 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2di", value: 1242, isUnsigned: true)
!1133 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2df", value: 1245, isUnsigned: true)
!1134 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2di", value: 1246, isUnsigned: true)
!1135 = !DIEnumerator(name: "CODE_FOR_sse2_storehpd", value: 1248, isUnsigned: true)
!1136 = !DIEnumerator(name: "CODE_FOR_sse2_storelpd", value: 1249, isUnsigned: true)
!1137 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd", value: 1251, isUnsigned: true)
!1138 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd", value: 1253, isUnsigned: true)
!1139 = !DIEnumerator(name: "CODE_FOR_sse2_movsd", value: 1257, isUnsigned: true)
!1140 = !DIEnumerator(name: "CODE_FOR_vec_dupv2df", value: 1259, isUnsigned: true)
!1141 = !DIEnumerator(name: "CODE_FOR_mulv16qi3", value: 1295, isUnsigned: true)
!1142 = !DIEnumerator(name: "CODE_FOR_mulv2di3", value: 1311, isUnsigned: true)
!1143 = !DIEnumerator(name: "CODE_FOR_ashrv8hi3", value: 1314, isUnsigned: true)
!1144 = !DIEnumerator(name: "CODE_FOR_ashrv4si3", value: 1315, isUnsigned: true)
!1145 = !DIEnumerator(name: "CODE_FOR_sse2_lshrv1ti3", value: 1320, isUnsigned: true)
!1146 = !DIEnumerator(name: "CODE_FOR_lshrv8hi3", value: 1321, isUnsigned: true)
!1147 = !DIEnumerator(name: "CODE_FOR_lshrv4si3", value: 1322, isUnsigned: true)
!1148 = !DIEnumerator(name: "CODE_FOR_lshrv2di3", value: 1323, isUnsigned: true)
!1149 = !DIEnumerator(name: "CODE_FOR_sse2_ashlv1ti3", value: 1328, isUnsigned: true)
!1150 = !DIEnumerator(name: "CODE_FOR_ashlv8hi3", value: 1329, isUnsigned: true)
!1151 = !DIEnumerator(name: "CODE_FOR_ashlv4si3", value: 1330, isUnsigned: true)
!1152 = !DIEnumerator(name: "CODE_FOR_ashlv2di3", value: 1331, isUnsigned: true)
!1153 = !DIEnumerator(name: "CODE_FOR_sse2_gtv16qi3", value: 1368, isUnsigned: true)
!1154 = !DIEnumerator(name: "CODE_FOR_sse2_gtv8hi3", value: 1369, isUnsigned: true)
!1155 = !DIEnumerator(name: "CODE_FOR_sse2_gtv4si3", value: 1370, isUnsigned: true)
!1156 = !DIEnumerator(name: "CODE_FOR_sse4_2_gtv2di3", value: 1371, isUnsigned: true)
!1157 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv16qi3", value: 1384, isUnsigned: true)
!1158 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv8hi3", value: 1385, isUnsigned: true)
!1159 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv4si3", value: 1386, isUnsigned: true)
!1160 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2di3", value: 1387, isUnsigned: true)
!1161 = !DIEnumerator(name: "CODE_FOR_sse2_packsswb", value: 1441, isUnsigned: true)
!1162 = !DIEnumerator(name: "CODE_FOR_sse2_packssdw", value: 1443, isUnsigned: true)
!1163 = !DIEnumerator(name: "CODE_FOR_sse2_packuswb", value: 1445, isUnsigned: true)
!1164 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv16qi", value: 1447, isUnsigned: true)
!1165 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv16qi", value: 1449, isUnsigned: true)
!1166 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv8hi", value: 1451, isUnsigned: true)
!1167 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv8hi", value: 1453, isUnsigned: true)
!1168 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4si", value: 1455, isUnsigned: true)
!1169 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4si", value: 1457, isUnsigned: true)
!1170 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd_1", value: 1469, isUnsigned: true)
!1171 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw_1", value: 1470, isUnsigned: true)
!1172 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw_1", value: 1471, isUnsigned: true)
!1173 = !DIEnumerator(name: "CODE_FOR_sse2_loadld", value: 1473, isUnsigned: true)
!1174 = !DIEnumerator(name: "CODE_FOR_sse2_stored", value: 1474, isUnsigned: true)
!1175 = !DIEnumerator(name: "CODE_FOR_vec_concatv2di", value: 1492, isUnsigned: true)
!1176 = !DIEnumerator(name: "CODE_FOR_sse2_psadbw", value: 1498, isUnsigned: true)
!1177 = !DIEnumerator(name: "CODE_FOR_avx_movmskps256", value: 1499, isUnsigned: true)
!1178 = !DIEnumerator(name: "CODE_FOR_avx_movmskpd256", value: 1500, isUnsigned: true)
!1179 = !DIEnumerator(name: "CODE_FOR_sse_movmskps", value: 1501, isUnsigned: true)
!1180 = !DIEnumerator(name: "CODE_FOR_sse2_movmskpd", value: 1502, isUnsigned: true)
!1181 = !DIEnumerator(name: "CODE_FOR_sse2_pmovmskb", value: 1503, isUnsigned: true)
!1182 = !DIEnumerator(name: "CODE_FOR_sse_ldmxcsr", value: 1505, isUnsigned: true)
!1183 = !DIEnumerator(name: "CODE_FOR_sse_stmxcsr", value: 1506, isUnsigned: true)
!1184 = !DIEnumerator(name: "CODE_FOR_sse2_clflush", value: 1508, isUnsigned: true)
!1185 = !DIEnumerator(name: "CODE_FOR_sse3_mwait", value: 1511, isUnsigned: true)
!1186 = !DIEnumerator(name: "CODE_FOR_sse3_monitor", value: 1512, isUnsigned: true)
!1187 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv8hi3", value: 1514, isUnsigned: true)
!1188 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv4hi3", value: 1515, isUnsigned: true)
!1189 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv4si3", value: 1517, isUnsigned: true)
!1190 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv2si3", value: 1518, isUnsigned: true)
!1191 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv8hi3", value: 1520, isUnsigned: true)
!1192 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv4hi3", value: 1521, isUnsigned: true)
!1193 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv8hi3", value: 1523, isUnsigned: true)
!1194 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv4hi3", value: 1524, isUnsigned: true)
!1195 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv4si3", value: 1526, isUnsigned: true)
!1196 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv2si3", value: 1527, isUnsigned: true)
!1197 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv8hi3", value: 1529, isUnsigned: true)
!1198 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv4hi3", value: 1530, isUnsigned: true)
!1199 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw128", value: 1532, isUnsigned: true)
!1200 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw", value: 1533, isUnsigned: true)
!1201 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv16qi3", value: 1538, isUnsigned: true)
!1202 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv8qi3", value: 1539, isUnsigned: true)
!1203 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv16qi3", value: 1543, isUnsigned: true)
!1204 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8hi3", value: 1544, isUnsigned: true)
!1205 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4si3", value: 1545, isUnsigned: true)
!1206 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8qi3", value: 1546, isUnsigned: true)
!1207 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4hi3", value: 1547, isUnsigned: true)
!1208 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv2si3", value: 1548, isUnsigned: true)
!1209 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrti", value: 1550, isUnsigned: true)
!1210 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrdi", value: 1551, isUnsigned: true)
!1211 = !DIEnumerator(name: "CODE_FOR_absv16qi2", value: 1552, isUnsigned: true)
!1212 = !DIEnumerator(name: "CODE_FOR_absv8hi2", value: 1553, isUnsigned: true)
!1213 = !DIEnumerator(name: "CODE_FOR_absv4si2", value: 1554, isUnsigned: true)
!1214 = !DIEnumerator(name: "CODE_FOR_absv8qi2", value: 1555, isUnsigned: true)
!1215 = !DIEnumerator(name: "CODE_FOR_absv4hi2", value: 1556, isUnsigned: true)
!1216 = !DIEnumerator(name: "CODE_FOR_absv2si2", value: 1557, isUnsigned: true)
!1217 = !DIEnumerator(name: "CODE_FOR_sse4a_movntsf", value: 1558, isUnsigned: true)
!1218 = !DIEnumerator(name: "CODE_FOR_sse4a_movntdf", value: 1559, isUnsigned: true)
!1219 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv4sf", value: 1560, isUnsigned: true)
!1220 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv2df", value: 1561, isUnsigned: true)
!1221 = !DIEnumerator(name: "CODE_FOR_sse4a_extrqi", value: 1562, isUnsigned: true)
!1222 = !DIEnumerator(name: "CODE_FOR_sse4a_extrq", value: 1563, isUnsigned: true)
!1223 = !DIEnumerator(name: "CODE_FOR_sse4a_insertqi", value: 1564, isUnsigned: true)
!1224 = !DIEnumerator(name: "CODE_FOR_sse4a_insertq", value: 1565, isUnsigned: true)
!1225 = !DIEnumerator(name: "CODE_FOR_avx_blendps", value: 1566, isUnsigned: true)
!1226 = !DIEnumerator(name: "CODE_FOR_avx_blendpd", value: 1567, isUnsigned: true)
!1227 = !DIEnumerator(name: "CODE_FOR_avx_blendps256", value: 1568, isUnsigned: true)
!1228 = !DIEnumerator(name: "CODE_FOR_avx_blendpd256", value: 1569, isUnsigned: true)
!1229 = !DIEnumerator(name: "CODE_FOR_avx_blendvps", value: 1570, isUnsigned: true)
!1230 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd", value: 1571, isUnsigned: true)
!1231 = !DIEnumerator(name: "CODE_FOR_avx_blendvps256", value: 1572, isUnsigned: true)
!1232 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd256", value: 1573, isUnsigned: true)
!1233 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendps", value: 1574, isUnsigned: true)
!1234 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendpd", value: 1575, isUnsigned: true)
!1235 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvps", value: 1576, isUnsigned: true)
!1236 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvpd", value: 1577, isUnsigned: true)
!1237 = !DIEnumerator(name: "CODE_FOR_avx_dpps", value: 1578, isUnsigned: true)
!1238 = !DIEnumerator(name: "CODE_FOR_avx_dppd", value: 1579, isUnsigned: true)
!1239 = !DIEnumerator(name: "CODE_FOR_avx_dpps256", value: 1580, isUnsigned: true)
!1240 = !DIEnumerator(name: "CODE_FOR_avx_dppd256", value: 1581, isUnsigned: true)
!1241 = !DIEnumerator(name: "CODE_FOR_sse4_1_dpps", value: 1582, isUnsigned: true)
!1242 = !DIEnumerator(name: "CODE_FOR_sse4_1_dppd", value: 1583, isUnsigned: true)
!1243 = !DIEnumerator(name: "CODE_FOR_sse4_1_movntdqa", value: 1584, isUnsigned: true)
!1244 = !DIEnumerator(name: "CODE_FOR_sse4_1_mpsadbw", value: 1586, isUnsigned: true)
!1245 = !DIEnumerator(name: "CODE_FOR_sse4_1_packusdw", value: 1588, isUnsigned: true)
!1246 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendvb", value: 1590, isUnsigned: true)
!1247 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendw", value: 1592, isUnsigned: true)
!1248 = !DIEnumerator(name: "CODE_FOR_sse4_1_phminposuw", value: 1593, isUnsigned: true)
!1249 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv8qiv8hi2", value: 1594, isUnsigned: true)
!1250 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4qiv4si2", value: 1596, isUnsigned: true)
!1251 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2qiv2di2", value: 1598, isUnsigned: true)
!1252 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4hiv4si2", value: 1600, isUnsigned: true)
!1253 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2hiv2di2", value: 1602, isUnsigned: true)
!1254 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2siv2di2", value: 1604, isUnsigned: true)
!1255 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv8qiv8hi2", value: 1606, isUnsigned: true)
!1256 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4qiv4si2", value: 1608, isUnsigned: true)
!1257 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2qiv2di2", value: 1610, isUnsigned: true)
!1258 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4hiv4si2", value: 1612, isUnsigned: true)
!1259 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2hiv2di2", value: 1614, isUnsigned: true)
!1260 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2siv2di2", value: 1616, isUnsigned: true)
!1261 = !DIEnumerator(name: "CODE_FOR_avx_vtestps", value: 1618, isUnsigned: true)
!1262 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd", value: 1619, isUnsigned: true)
!1263 = !DIEnumerator(name: "CODE_FOR_avx_vtestps256", value: 1620, isUnsigned: true)
!1264 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd256", value: 1621, isUnsigned: true)
!1265 = !DIEnumerator(name: "CODE_FOR_avx_ptest256", value: 1622, isUnsigned: true)
!1266 = !DIEnumerator(name: "CODE_FOR_sse4_1_ptest", value: 1623, isUnsigned: true)
!1267 = !DIEnumerator(name: "CODE_FOR_avx_roundps256", value: 1624, isUnsigned: true)
!1268 = !DIEnumerator(name: "CODE_FOR_avx_roundpd256", value: 1625, isUnsigned: true)
!1269 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundps", value: 1626, isUnsigned: true)
!1270 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundpd", value: 1627, isUnsigned: true)
!1271 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundss", value: 1630, isUnsigned: true)
!1272 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsd", value: 1631, isUnsigned: true)
!1273 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr", value: 1632, isUnsigned: true)
!1274 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestri", value: 1633, isUnsigned: true)
!1275 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestrm", value: 1634, isUnsigned: true)
!1276 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr_cconly", value: 1635, isUnsigned: true)
!1277 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr", value: 1636, isUnsigned: true)
!1278 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistri", value: 1637, isUnsigned: true)
!1279 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistrm", value: 1638, isUnsigned: true)
!1280 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr_cconly", value: 1639, isUnsigned: true)
!1281 = !DIEnumerator(name: "CODE_FOR_xop_pmacsww", value: 1640, isUnsigned: true)
!1282 = !DIEnumerator(name: "CODE_FOR_xop_pmacssww", value: 1641, isUnsigned: true)
!1283 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdd", value: 1642, isUnsigned: true)
!1284 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdd", value: 1643, isUnsigned: true)
!1285 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdql", value: 1644, isUnsigned: true)
!1286 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdqh", value: 1645, isUnsigned: true)
!1287 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdql", value: 1646, isUnsigned: true)
!1288 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_low", value: 1647, isUnsigned: true)
!1289 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdqh", value: 1648, isUnsigned: true)
!1290 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_high", value: 1649, isUnsigned: true)
!1291 = !DIEnumerator(name: "CODE_FOR_xop_pmacsswd", value: 1650, isUnsigned: true)
!1292 = !DIEnumerator(name: "CODE_FOR_xop_pmacswd", value: 1651, isUnsigned: true)
!1293 = !DIEnumerator(name: "CODE_FOR_xop_pmadcsswd", value: 1652, isUnsigned: true)
!1294 = !DIEnumerator(name: "CODE_FOR_xop_pmadcswd", value: 1653, isUnsigned: true)
!1295 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16qi", value: 1654, isUnsigned: true)
!1296 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8hi", value: 1655, isUnsigned: true)
!1297 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4si", value: 1656, isUnsigned: true)
!1298 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2di", value: 1657, isUnsigned: true)
!1299 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4sf", value: 1658, isUnsigned: true)
!1300 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2df", value: 1659, isUnsigned: true)
!1301 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v32qi256", value: 1660, isUnsigned: true)
!1302 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16hi256", value: 1661, isUnsigned: true)
!1303 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8si256", value: 1662, isUnsigned: true)
!1304 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4di256", value: 1663, isUnsigned: true)
!1305 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8sf256", value: 1664, isUnsigned: true)
!1306 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4df256", value: 1665, isUnsigned: true)
!1307 = !DIEnumerator(name: "CODE_FOR_xop_phaddbw", value: 1666, isUnsigned: true)
!1308 = !DIEnumerator(name: "CODE_FOR_xop_phaddbd", value: 1667, isUnsigned: true)
!1309 = !DIEnumerator(name: "CODE_FOR_xop_phaddbq", value: 1668, isUnsigned: true)
!1310 = !DIEnumerator(name: "CODE_FOR_xop_phaddwd", value: 1669, isUnsigned: true)
!1311 = !DIEnumerator(name: "CODE_FOR_xop_phaddwq", value: 1670, isUnsigned: true)
!1312 = !DIEnumerator(name: "CODE_FOR_xop_phadddq", value: 1671, isUnsigned: true)
!1313 = !DIEnumerator(name: "CODE_FOR_xop_phaddubw", value: 1672, isUnsigned: true)
!1314 = !DIEnumerator(name: "CODE_FOR_xop_phaddubd", value: 1673, isUnsigned: true)
!1315 = !DIEnumerator(name: "CODE_FOR_xop_phaddubq", value: 1674, isUnsigned: true)
!1316 = !DIEnumerator(name: "CODE_FOR_xop_phadduwd", value: 1675, isUnsigned: true)
!1317 = !DIEnumerator(name: "CODE_FOR_xop_phadduwq", value: 1676, isUnsigned: true)
!1318 = !DIEnumerator(name: "CODE_FOR_xop_phaddudq", value: 1677, isUnsigned: true)
!1319 = !DIEnumerator(name: "CODE_FOR_xop_phsubbw", value: 1678, isUnsigned: true)
!1320 = !DIEnumerator(name: "CODE_FOR_xop_phsubwd", value: 1679, isUnsigned: true)
!1321 = !DIEnumerator(name: "CODE_FOR_xop_phsubdq", value: 1680, isUnsigned: true)
!1322 = !DIEnumerator(name: "CODE_FOR_xop_pperm", value: 1681, isUnsigned: true)
!1323 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v2di_v4si", value: 1682, isUnsigned: true)
!1324 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v4si_v8hi", value: 1683, isUnsigned: true)
!1325 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v8hi_v16qi", value: 1684, isUnsigned: true)
!1326 = !DIEnumerator(name: "CODE_FOR_xop_rotlv16qi3", value: 1685, isUnsigned: true)
!1327 = !DIEnumerator(name: "CODE_FOR_xop_rotlv8hi3", value: 1686, isUnsigned: true)
!1328 = !DIEnumerator(name: "CODE_FOR_xop_rotlv4si3", value: 1687, isUnsigned: true)
!1329 = !DIEnumerator(name: "CODE_FOR_xop_rotlv2di3", value: 1688, isUnsigned: true)
!1330 = !DIEnumerator(name: "CODE_FOR_xop_rotrv16qi3", value: 1689, isUnsigned: true)
!1331 = !DIEnumerator(name: "CODE_FOR_xop_rotrv8hi3", value: 1690, isUnsigned: true)
!1332 = !DIEnumerator(name: "CODE_FOR_xop_rotrv4si3", value: 1691, isUnsigned: true)
!1333 = !DIEnumerator(name: "CODE_FOR_xop_rotrv2di3", value: 1692, isUnsigned: true)
!1334 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv16qi3", value: 1693, isUnsigned: true)
!1335 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv8hi3", value: 1694, isUnsigned: true)
!1336 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv4si3", value: 1695, isUnsigned: true)
!1337 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv2di3", value: 1696, isUnsigned: true)
!1338 = !DIEnumerator(name: "CODE_FOR_xop_ashlv16qi3", value: 1697, isUnsigned: true)
!1339 = !DIEnumerator(name: "CODE_FOR_xop_ashlv8hi3", value: 1698, isUnsigned: true)
!1340 = !DIEnumerator(name: "CODE_FOR_xop_ashlv4si3", value: 1699, isUnsigned: true)
!1341 = !DIEnumerator(name: "CODE_FOR_xop_ashlv2di3", value: 1700, isUnsigned: true)
!1342 = !DIEnumerator(name: "CODE_FOR_xop_lshlv16qi3", value: 1701, isUnsigned: true)
!1343 = !DIEnumerator(name: "CODE_FOR_xop_lshlv8hi3", value: 1702, isUnsigned: true)
!1344 = !DIEnumerator(name: "CODE_FOR_xop_lshlv4si3", value: 1703, isUnsigned: true)
!1345 = !DIEnumerator(name: "CODE_FOR_xop_lshlv2di3", value: 1704, isUnsigned: true)
!1346 = !DIEnumerator(name: "CODE_FOR_xop_frczv4sf2", value: 1705, isUnsigned: true)
!1347 = !DIEnumerator(name: "CODE_FOR_xop_frczv2df2", value: 1706, isUnsigned: true)
!1348 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv4sf2", value: 1707, isUnsigned: true)
!1349 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv2df2", value: 1708, isUnsigned: true)
!1350 = !DIEnumerator(name: "CODE_FOR_xop_frczv8sf2256", value: 1709, isUnsigned: true)
!1351 = !DIEnumerator(name: "CODE_FOR_xop_frczv4df2256", value: 1710, isUnsigned: true)
!1352 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv16qi3", value: 1711, isUnsigned: true)
!1353 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv8hi3", value: 1712, isUnsigned: true)
!1354 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv4si3", value: 1713, isUnsigned: true)
!1355 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv2di3", value: 1714, isUnsigned: true)
!1356 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv16qi3", value: 1715, isUnsigned: true)
!1357 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv8hi3", value: 1716, isUnsigned: true)
!1358 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv4si3", value: 1717, isUnsigned: true)
!1359 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv2di3", value: 1718, isUnsigned: true)
!1360 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v16qi3", value: 1719, isUnsigned: true)
!1361 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v8hi3", value: 1720, isUnsigned: true)
!1362 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v4si3", value: 1721, isUnsigned: true)
!1363 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v2di3", value: 1722, isUnsigned: true)
!1364 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv16qi3", value: 1723, isUnsigned: true)
!1365 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv8hi3", value: 1724, isUnsigned: true)
!1366 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv4si3", value: 1725, isUnsigned: true)
!1367 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv2di3", value: 1726, isUnsigned: true)
!1368 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4sf3", value: 1727, isUnsigned: true)
!1369 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v2df3", value: 1728, isUnsigned: true)
!1370 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v8sf3", value: 1729, isUnsigned: true)
!1371 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4df3", value: 1730, isUnsigned: true)
!1372 = !DIEnumerator(name: "CODE_FOR_aesenc", value: 1732, isUnsigned: true)
!1373 = !DIEnumerator(name: "CODE_FOR_aesenclast", value: 1734, isUnsigned: true)
!1374 = !DIEnumerator(name: "CODE_FOR_aesdec", value: 1736, isUnsigned: true)
!1375 = !DIEnumerator(name: "CODE_FOR_aesdeclast", value: 1738, isUnsigned: true)
!1376 = !DIEnumerator(name: "CODE_FOR_aesimc", value: 1739, isUnsigned: true)
!1377 = !DIEnumerator(name: "CODE_FOR_aeskeygenassist", value: 1740, isUnsigned: true)
!1378 = !DIEnumerator(name: "CODE_FOR_pclmulqdq", value: 1742, isUnsigned: true)
!1379 = !DIEnumerator(name: "CODE_FOR_vec_dupv8si", value: 1745, isUnsigned: true)
!1380 = !DIEnumerator(name: "CODE_FOR_vec_dupv8sf", value: 1746, isUnsigned: true)
!1381 = !DIEnumerator(name: "CODE_FOR_vec_dupv4di", value: 1747, isUnsigned: true)
!1382 = !DIEnumerator(name: "CODE_FOR_vec_dupv4df", value: 1748, isUnsigned: true)
!1383 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v32qi", value: 1749, isUnsigned: true)
!1384 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v16hi", value: 1750, isUnsigned: true)
!1385 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8si", value: 1751, isUnsigned: true)
!1386 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4di", value: 1752, isUnsigned: true)
!1387 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8sf", value: 1753, isUnsigned: true)
!1388 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4df", value: 1754, isUnsigned: true)
!1389 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4sf3", value: 1762, isUnsigned: true)
!1390 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv2df3", value: 1763, isUnsigned: true)
!1391 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv8sf3", value: 1764, isUnsigned: true)
!1392 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4df3", value: 1765, isUnsigned: true)
!1393 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4di", value: 1772, isUnsigned: true)
!1394 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4df", value: 1773, isUnsigned: true)
!1395 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4di", value: 1774, isUnsigned: true)
!1396 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4df", value: 1775, isUnsigned: true)
!1397 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8si", value: 1776, isUnsigned: true)
!1398 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8sf", value: 1777, isUnsigned: true)
!1399 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8si", value: 1778, isUnsigned: true)
!1400 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8sf", value: 1779, isUnsigned: true)
!1401 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v16hi", value: 1780, isUnsigned: true)
!1402 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v16hi", value: 1781, isUnsigned: true)
!1403 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v32qi", value: 1782, isUnsigned: true)
!1404 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v32qi", value: 1783, isUnsigned: true)
!1405 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps", value: 1784, isUnsigned: true)
!1406 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd", value: 1785, isUnsigned: true)
!1407 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps256", value: 1786, isUnsigned: true)
!1408 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd256", value: 1787, isUnsigned: true)
!1409 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps", value: 1788, isUnsigned: true)
!1410 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd", value: 1789, isUnsigned: true)
!1411 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps256", value: 1790, isUnsigned: true)
!1412 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd256", value: 1791, isUnsigned: true)
!1413 = !DIEnumerator(name: "CODE_FOR_avx_si256_si", value: 1792, isUnsigned: true)
!1414 = !DIEnumerator(name: "CODE_FOR_avx_ps256_ps", value: 1793, isUnsigned: true)
!1415 = !DIEnumerator(name: "CODE_FOR_avx_pd256_pd", value: 1794, isUnsigned: true)
!1416 = !DIEnumerator(name: "CODE_FOR_avx_si_si256", value: 1795, isUnsigned: true)
!1417 = !DIEnumerator(name: "CODE_FOR_avx_ps_ps256", value: 1796, isUnsigned: true)
!1418 = !DIEnumerator(name: "CODE_FOR_avx_pd_pd256", value: 1797, isUnsigned: true)
!1419 = !DIEnumerator(name: "CODE_FOR_memory_barrier_nosse", value: 1804, isUnsigned: true)
!1420 = !DIEnumerator(name: "CODE_FOR_sync_double_compare_and_swapdi", value: 1808, isUnsigned: true)
!1421 = !DIEnumerator(name: "CODE_FOR_sync_old_addqi", value: 1810, isUnsigned: true)
!1422 = !DIEnumerator(name: "CODE_FOR_sync_old_addhi", value: 1811, isUnsigned: true)
!1423 = !DIEnumerator(name: "CODE_FOR_sync_old_addsi", value: 1812, isUnsigned: true)
!1424 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setqi", value: 1813, isUnsigned: true)
!1425 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_sethi", value: 1814, isUnsigned: true)
!1426 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setsi", value: 1815, isUnsigned: true)
!1427 = !DIEnumerator(name: "CODE_FOR_sync_addqi", value: 1816, isUnsigned: true)
!1428 = !DIEnumerator(name: "CODE_FOR_sync_addhi", value: 1817, isUnsigned: true)
!1429 = !DIEnumerator(name: "CODE_FOR_sync_addsi", value: 1818, isUnsigned: true)
!1430 = !DIEnumerator(name: "CODE_FOR_sync_subqi", value: 1819, isUnsigned: true)
!1431 = !DIEnumerator(name: "CODE_FOR_sync_subhi", value: 1820, isUnsigned: true)
!1432 = !DIEnumerator(name: "CODE_FOR_sync_subsi", value: 1821, isUnsigned: true)
!1433 = !DIEnumerator(name: "CODE_FOR_sync_andqi", value: 1822, isUnsigned: true)
!1434 = !DIEnumerator(name: "CODE_FOR_sync_iorqi", value: 1823, isUnsigned: true)
!1435 = !DIEnumerator(name: "CODE_FOR_sync_xorqi", value: 1824, isUnsigned: true)
!1436 = !DIEnumerator(name: "CODE_FOR_sync_andhi", value: 1825, isUnsigned: true)
!1437 = !DIEnumerator(name: "CODE_FOR_sync_iorhi", value: 1826, isUnsigned: true)
!1438 = !DIEnumerator(name: "CODE_FOR_sync_xorhi", value: 1827, isUnsigned: true)
!1439 = !DIEnumerator(name: "CODE_FOR_sync_andsi", value: 1828, isUnsigned: true)
!1440 = !DIEnumerator(name: "CODE_FOR_sync_iorsi", value: 1829, isUnsigned: true)
!1441 = !DIEnumerator(name: "CODE_FOR_sync_xorsi", value: 1830, isUnsigned: true)
!1442 = !DIEnumerator(name: "CODE_FOR_cbranchqi4", value: 1831, isUnsigned: true)
!1443 = !DIEnumerator(name: "CODE_FOR_cbranchhi4", value: 1832, isUnsigned: true)
!1444 = !DIEnumerator(name: "CODE_FOR_cbranchsi4", value: 1833, isUnsigned: true)
!1445 = !DIEnumerator(name: "CODE_FOR_cbranchdi4", value: 1834, isUnsigned: true)
!1446 = !DIEnumerator(name: "CODE_FOR_cstoreqi4", value: 1835, isUnsigned: true)
!1447 = !DIEnumerator(name: "CODE_FOR_cstorehi4", value: 1836, isUnsigned: true)
!1448 = !DIEnumerator(name: "CODE_FOR_cstoresi4", value: 1837, isUnsigned: true)
!1449 = !DIEnumerator(name: "CODE_FOR_cmpsi_1", value: 1838, isUnsigned: true)
!1450 = !DIEnumerator(name: "CODE_FOR_cmpqi_ext_3", value: 1839, isUnsigned: true)
!1451 = !DIEnumerator(name: "CODE_FOR_cbranchxf4", value: 1840, isUnsigned: true)
!1452 = !DIEnumerator(name: "CODE_FOR_cstorexf4", value: 1841, isUnsigned: true)
!1453 = !DIEnumerator(name: "CODE_FOR_cbranchsf4", value: 1842, isUnsigned: true)
!1454 = !DIEnumerator(name: "CODE_FOR_cbranchdf4", value: 1843, isUnsigned: true)
!1455 = !DIEnumerator(name: "CODE_FOR_cstoresf4", value: 1844, isUnsigned: true)
!1456 = !DIEnumerator(name: "CODE_FOR_cstoredf4", value: 1845, isUnsigned: true)
!1457 = !DIEnumerator(name: "CODE_FOR_cbranchcc4", value: 1846, isUnsigned: true)
!1458 = !DIEnumerator(name: "CODE_FOR_cstorecc4", value: 1847, isUnsigned: true)
!1459 = !DIEnumerator(name: "CODE_FOR_movsi", value: 1855, isUnsigned: true)
!1460 = !DIEnumerator(name: "CODE_FOR_movhi", value: 1856, isUnsigned: true)
!1461 = !DIEnumerator(name: "CODE_FOR_movstricthi", value: 1857, isUnsigned: true)
!1462 = !DIEnumerator(name: "CODE_FOR_movqi", value: 1858, isUnsigned: true)
!1463 = !DIEnumerator(name: "CODE_FOR_movstrictqi", value: 1859, isUnsigned: true)
!1464 = !DIEnumerator(name: "CODE_FOR_movdi", value: 1860, isUnsigned: true)
!1465 = !DIEnumerator(name: "CODE_FOR_movoi", value: 1863, isUnsigned: true)
!1466 = !DIEnumerator(name: "CODE_FOR_movti", value: 1864, isUnsigned: true)
!1467 = !DIEnumerator(name: "CODE_FOR_movcdi", value: 1866, isUnsigned: true)
!1468 = !DIEnumerator(name: "CODE_FOR_movsf", value: 1867, isUnsigned: true)
!1469 = !DIEnumerator(name: "CODE_FOR_movdf", value: 1870, isUnsigned: true)
!1470 = !DIEnumerator(name: "CODE_FOR_movxf", value: 1874, isUnsigned: true)
!1471 = !DIEnumerator(name: "CODE_FOR_movtf", value: 1877, isUnsigned: true)
!1472 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2", value: 1887, isUnsigned: true)
!1473 = !DIEnumerator(name: "CODE_FOR_zero_extendqihi2", value: 1889, isUnsigned: true)
!1474 = !DIEnumerator(name: "CODE_FOR_zero_extendqisi2", value: 1893, isUnsigned: true)
!1475 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2", value: 1897, isUnsigned: true)
!1476 = !DIEnumerator(name: "CODE_FOR_extendsidi2", value: 1900, isUnsigned: true)
!1477 = !DIEnumerator(name: "CODE_FOR_extendsfdf2", value: 1907, isUnsigned: true)
!1478 = !DIEnumerator(name: "CODE_FOR_extendsfxf2", value: 1909, isUnsigned: true)
!1479 = !DIEnumerator(name: "CODE_FOR_extenddfxf2", value: 1910, isUnsigned: true)
!1480 = !DIEnumerator(name: "CODE_FOR_truncdfsf2", value: 1911, isUnsigned: true)
!1481 = !DIEnumerator(name: "CODE_FOR_truncdfsf2_with_temp", value: 1913, isUnsigned: true)
!1482 = !DIEnumerator(name: "CODE_FOR_truncxfsf2", value: 1915, isUnsigned: true)
!1483 = !DIEnumerator(name: "CODE_FOR_truncxfdf2", value: 1916, isUnsigned: true)
!1484 = !DIEnumerator(name: "CODE_FOR_fix_truncxfdi2", value: 1921, isUnsigned: true)
!1485 = !DIEnumerator(name: "CODE_FOR_fix_truncsfdi2", value: 1922, isUnsigned: true)
!1486 = !DIEnumerator(name: "CODE_FOR_fix_truncdfdi2", value: 1923, isUnsigned: true)
!1487 = !DIEnumerator(name: "CODE_FOR_fix_truncxfsi2", value: 1924, isUnsigned: true)
!1488 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi2", value: 1925, isUnsigned: true)
!1489 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi2", value: 1926, isUnsigned: true)
!1490 = !DIEnumerator(name: "CODE_FOR_fix_truncsfhi2", value: 1927, isUnsigned: true)
!1491 = !DIEnumerator(name: "CODE_FOR_fix_truncdfhi2", value: 1928, isUnsigned: true)
!1492 = !DIEnumerator(name: "CODE_FOR_fix_truncxfhi2", value: 1929, isUnsigned: true)
!1493 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfsi2", value: 1930, isUnsigned: true)
!1494 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfsi2", value: 1931, isUnsigned: true)
!1495 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfhi2", value: 1934, isUnsigned: true)
!1496 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfhi2", value: 1935, isUnsigned: true)
!1497 = !DIEnumerator(name: "CODE_FOR_floathisf2", value: 1962, isUnsigned: true)
!1498 = !DIEnumerator(name: "CODE_FOR_floathidf2", value: 1963, isUnsigned: true)
!1499 = !DIEnumerator(name: "CODE_FOR_floathixf2", value: 1964, isUnsigned: true)
!1500 = !DIEnumerator(name: "CODE_FOR_floatsisf2", value: 1974, isUnsigned: true)
!1501 = !DIEnumerator(name: "CODE_FOR_floatdisf2", value: 1975, isUnsigned: true)
!1502 = !DIEnumerator(name: "CODE_FOR_floatsidf2", value: 1976, isUnsigned: true)
!1503 = !DIEnumerator(name: "CODE_FOR_floatdidf2", value: 1977, isUnsigned: true)
!1504 = !DIEnumerator(name: "CODE_FOR_floatsixf2", value: 1978, isUnsigned: true)
!1505 = !DIEnumerator(name: "CODE_FOR_floatdixf2", value: 1979, isUnsigned: true)
!1506 = !DIEnumerator(name: "CODE_FOR_floatunssisf2", value: 2028, isUnsigned: true)
!1507 = !DIEnumerator(name: "CODE_FOR_floatunssidf2", value: 2029, isUnsigned: true)
!1508 = !DIEnumerator(name: "CODE_FOR_floatunssixf2", value: 2030, isUnsigned: true)
!1509 = !DIEnumerator(name: "CODE_FOR_addqi3", value: 2031, isUnsigned: true)
!1510 = !DIEnumerator(name: "CODE_FOR_addhi3", value: 2032, isUnsigned: true)
!1511 = !DIEnumerator(name: "CODE_FOR_addsi3", value: 2033, isUnsigned: true)
!1512 = !DIEnumerator(name: "CODE_FOR_adddi3", value: 2034, isUnsigned: true)
!1513 = !DIEnumerator(name: "CODE_FOR_subqi3", value: 2040, isUnsigned: true)
!1514 = !DIEnumerator(name: "CODE_FOR_subhi3", value: 2041, isUnsigned: true)
!1515 = !DIEnumerator(name: "CODE_FOR_subsi3", value: 2042, isUnsigned: true)
!1516 = !DIEnumerator(name: "CODE_FOR_subdi3", value: 2043, isUnsigned: true)
!1517 = !DIEnumerator(name: "CODE_FOR_addqi3_carry", value: 2045, isUnsigned: true)
!1518 = !DIEnumerator(name: "CODE_FOR_subqi3_carry", value: 2046, isUnsigned: true)
!1519 = !DIEnumerator(name: "CODE_FOR_addhi3_carry", value: 2047, isUnsigned: true)
!1520 = !DIEnumerator(name: "CODE_FOR_subhi3_carry", value: 2048, isUnsigned: true)
!1521 = !DIEnumerator(name: "CODE_FOR_addsi3_carry", value: 2049, isUnsigned: true)
!1522 = !DIEnumerator(name: "CODE_FOR_subsi3_carry", value: 2050, isUnsigned: true)
!1523 = !DIEnumerator(name: "CODE_FOR_adddi3_carry", value: 2051, isUnsigned: true)
!1524 = !DIEnumerator(name: "CODE_FOR_subdi3_carry", value: 2052, isUnsigned: true)
!1525 = !DIEnumerator(name: "CODE_FOR_addxf3", value: 2053, isUnsigned: true)
!1526 = !DIEnumerator(name: "CODE_FOR_subxf3", value: 2054, isUnsigned: true)
!1527 = !DIEnumerator(name: "CODE_FOR_addsf3", value: 2055, isUnsigned: true)
!1528 = !DIEnumerator(name: "CODE_FOR_subsf3", value: 2056, isUnsigned: true)
!1529 = !DIEnumerator(name: "CODE_FOR_adddf3", value: 2057, isUnsigned: true)
!1530 = !DIEnumerator(name: "CODE_FOR_subdf3", value: 2058, isUnsigned: true)
!1531 = !DIEnumerator(name: "CODE_FOR_mulhi3", value: 2059, isUnsigned: true)
!1532 = !DIEnumerator(name: "CODE_FOR_mulsi3", value: 2060, isUnsigned: true)
!1533 = !DIEnumerator(name: "CODE_FOR_mulqi3", value: 2061, isUnsigned: true)
!1534 = !DIEnumerator(name: "CODE_FOR_mulsidi3", value: 2062, isUnsigned: true)
!1535 = !DIEnumerator(name: "CODE_FOR_umulsidi3", value: 2063, isUnsigned: true)
!1536 = !DIEnumerator(name: "CODE_FOR_mulqihi3", value: 2064, isUnsigned: true)
!1537 = !DIEnumerator(name: "CODE_FOR_umulqihi3", value: 2065, isUnsigned: true)
!1538 = !DIEnumerator(name: "CODE_FOR_smulsi3_highpart", value: 2066, isUnsigned: true)
!1539 = !DIEnumerator(name: "CODE_FOR_umulsi3_highpart", value: 2067, isUnsigned: true)
!1540 = !DIEnumerator(name: "CODE_FOR_mulxf3", value: 2068, isUnsigned: true)
!1541 = !DIEnumerator(name: "CODE_FOR_mulsf3", value: 2069, isUnsigned: true)
!1542 = !DIEnumerator(name: "CODE_FOR_muldf3", value: 2070, isUnsigned: true)
!1543 = !DIEnumerator(name: "CODE_FOR_divxf3", value: 2071, isUnsigned: true)
!1544 = !DIEnumerator(name: "CODE_FOR_divdf3", value: 2072, isUnsigned: true)
!1545 = !DIEnumerator(name: "CODE_FOR_divsf3", value: 2073, isUnsigned: true)
!1546 = !DIEnumerator(name: "CODE_FOR_divmodhi4", value: 2074, isUnsigned: true)
!1547 = !DIEnumerator(name: "CODE_FOR_divmodsi4", value: 2075, isUnsigned: true)
!1548 = !DIEnumerator(name: "CODE_FOR_udivmodhi4", value: 2078, isUnsigned: true)
!1549 = !DIEnumerator(name: "CODE_FOR_udivmodsi4", value: 2079, isUnsigned: true)
!1550 = !DIEnumerator(name: "CODE_FOR_testsi_ccno_1", value: 2082, isUnsigned: true)
!1551 = !DIEnumerator(name: "CODE_FOR_testqi_ccz_1", value: 2083, isUnsigned: true)
!1552 = !DIEnumerator(name: "CODE_FOR_testqi_ext_ccno_0", value: 2084, isUnsigned: true)
!1553 = !DIEnumerator(name: "CODE_FOR_andqi3", value: 2088, isUnsigned: true)
!1554 = !DIEnumerator(name: "CODE_FOR_andhi3", value: 2089, isUnsigned: true)
!1555 = !DIEnumerator(name: "CODE_FOR_andsi3", value: 2090, isUnsigned: true)
!1556 = !DIEnumerator(name: "CODE_FOR_iorqi3", value: 2096, isUnsigned: true)
!1557 = !DIEnumerator(name: "CODE_FOR_xorqi3", value: 2097, isUnsigned: true)
!1558 = !DIEnumerator(name: "CODE_FOR_iorhi3", value: 2098, isUnsigned: true)
!1559 = !DIEnumerator(name: "CODE_FOR_xorhi3", value: 2099, isUnsigned: true)
!1560 = !DIEnumerator(name: "CODE_FOR_iorsi3", value: 2100, isUnsigned: true)
!1561 = !DIEnumerator(name: "CODE_FOR_xorsi3", value: 2101, isUnsigned: true)
!1562 = !DIEnumerator(name: "CODE_FOR_xorqi_cc_ext_1", value: 2106, isUnsigned: true)
!1563 = !DIEnumerator(name: "CODE_FOR_negqi2", value: 2107, isUnsigned: true)
!1564 = !DIEnumerator(name: "CODE_FOR_neghi2", value: 2108, isUnsigned: true)
!1565 = !DIEnumerator(name: "CODE_FOR_negsi2", value: 2109, isUnsigned: true)
!1566 = !DIEnumerator(name: "CODE_FOR_negdi2", value: 2110, isUnsigned: true)
!1567 = !DIEnumerator(name: "CODE_FOR_abssf2", value: 2112, isUnsigned: true)
!1568 = !DIEnumerator(name: "CODE_FOR_negsf2", value: 2113, isUnsigned: true)
!1569 = !DIEnumerator(name: "CODE_FOR_absdf2", value: 2114, isUnsigned: true)
!1570 = !DIEnumerator(name: "CODE_FOR_negdf2", value: 2115, isUnsigned: true)
!1571 = !DIEnumerator(name: "CODE_FOR_absxf2", value: 2116, isUnsigned: true)
!1572 = !DIEnumerator(name: "CODE_FOR_negxf2", value: 2117, isUnsigned: true)
!1573 = !DIEnumerator(name: "CODE_FOR_abstf2", value: 2118, isUnsigned: true)
!1574 = !DIEnumerator(name: "CODE_FOR_negtf2", value: 2119, isUnsigned: true)
!1575 = !DIEnumerator(name: "CODE_FOR_copysignsf3", value: 2125, isUnsigned: true)
!1576 = !DIEnumerator(name: "CODE_FOR_copysigndf3", value: 2126, isUnsigned: true)
!1577 = !DIEnumerator(name: "CODE_FOR_copysigntf3", value: 2127, isUnsigned: true)
!1578 = !DIEnumerator(name: "CODE_FOR_one_cmplqi2", value: 2134, isUnsigned: true)
!1579 = !DIEnumerator(name: "CODE_FOR_one_cmplhi2", value: 2135, isUnsigned: true)
!1580 = !DIEnumerator(name: "CODE_FOR_one_cmplsi2", value: 2136, isUnsigned: true)
!1581 = !DIEnumerator(name: "CODE_FOR_ashldi3", value: 2142, isUnsigned: true)
!1582 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_1", value: 2145, isUnsigned: true)
!1583 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_2", value: 2146, isUnsigned: true)
!1584 = !DIEnumerator(name: "CODE_FOR_ashlsi3", value: 2147, isUnsigned: true)
!1585 = !DIEnumerator(name: "CODE_FOR_ashlhi3", value: 2150, isUnsigned: true)
!1586 = !DIEnumerator(name: "CODE_FOR_ashlqi3", value: 2151, isUnsigned: true)
!1587 = !DIEnumerator(name: "CODE_FOR_ashrdi3", value: 2152, isUnsigned: true)
!1588 = !DIEnumerator(name: "CODE_FOR_x86_64_shift_adj_3", value: 2153, isUnsigned: true)
!1589 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_3", value: 2156, isUnsigned: true)
!1590 = !DIEnumerator(name: "CODE_FOR_ashrsi3_31", value: 2157, isUnsigned: true)
!1591 = !DIEnumerator(name: "CODE_FOR_ashrsi3", value: 2158, isUnsigned: true)
!1592 = !DIEnumerator(name: "CODE_FOR_ashrhi3", value: 2159, isUnsigned: true)
!1593 = !DIEnumerator(name: "CODE_FOR_ashrqi3", value: 2160, isUnsigned: true)
!1594 = !DIEnumerator(name: "CODE_FOR_lshrdi3", value: 2161, isUnsigned: true)
!1595 = !DIEnumerator(name: "CODE_FOR_lshrsi3", value: 2164, isUnsigned: true)
!1596 = !DIEnumerator(name: "CODE_FOR_lshrhi3", value: 2165, isUnsigned: true)
!1597 = !DIEnumerator(name: "CODE_FOR_lshrqi3", value: 2166, isUnsigned: true)
!1598 = !DIEnumerator(name: "CODE_FOR_rotldi3", value: 2167, isUnsigned: true)
!1599 = !DIEnumerator(name: "CODE_FOR_rotlsi3", value: 2169, isUnsigned: true)
!1600 = !DIEnumerator(name: "CODE_FOR_rotlhi3", value: 2170, isUnsigned: true)
!1601 = !DIEnumerator(name: "CODE_FOR_rotlqi3", value: 2172, isUnsigned: true)
!1602 = !DIEnumerator(name: "CODE_FOR_rotrdi3", value: 2173, isUnsigned: true)
!1603 = !DIEnumerator(name: "CODE_FOR_rotrsi3", value: 2175, isUnsigned: true)
!1604 = !DIEnumerator(name: "CODE_FOR_rotrhi3", value: 2176, isUnsigned: true)
!1605 = !DIEnumerator(name: "CODE_FOR_rotrqi3", value: 2178, isUnsigned: true)
!1606 = !DIEnumerator(name: "CODE_FOR_extv", value: 2179, isUnsigned: true)
!1607 = !DIEnumerator(name: "CODE_FOR_extzv", value: 2180, isUnsigned: true)
!1608 = !DIEnumerator(name: "CODE_FOR_insv", value: 2181, isUnsigned: true)
!1609 = !DIEnumerator(name: "CODE_FOR_indirect_jump", value: 2200, isUnsigned: true)
!1610 = !DIEnumerator(name: "CODE_FOR_tablejump", value: 2201, isUnsigned: true)
!1611 = !DIEnumerator(name: "CODE_FOR_call_pop", value: 2204, isUnsigned: true)
!1612 = !DIEnumerator(name: "CODE_FOR_call", value: 2205, isUnsigned: true)
!1613 = !DIEnumerator(name: "CODE_FOR_sibcall", value: 2206, isUnsigned: true)
!1614 = !DIEnumerator(name: "CODE_FOR_call_value_pop", value: 2207, isUnsigned: true)
!1615 = !DIEnumerator(name: "CODE_FOR_call_value", value: 2208, isUnsigned: true)
!1616 = !DIEnumerator(name: "CODE_FOR_sibcall_value", value: 2209, isUnsigned: true)
!1617 = !DIEnumerator(name: "CODE_FOR_untyped_call", value: 2210, isUnsigned: true)
!1618 = !DIEnumerator(name: "CODE_FOR_memory_blockage", value: 2211, isUnsigned: true)
!1619 = !DIEnumerator(name: "CODE_FOR_return", value: 2212, isUnsigned: true)
!1620 = !DIEnumerator(name: "CODE_FOR_prologue", value: 2213, isUnsigned: true)
!1621 = !DIEnumerator(name: "CODE_FOR_epilogue", value: 2214, isUnsigned: true)
!1622 = !DIEnumerator(name: "CODE_FOR_sibcall_epilogue", value: 2215, isUnsigned: true)
!1623 = !DIEnumerator(name: "CODE_FOR_eh_return", value: 2216, isUnsigned: true)
!1624 = !DIEnumerator(name: "CODE_FOR_ffssi2", value: 2218, isUnsigned: true)
!1625 = !DIEnumerator(name: "CODE_FOR_ffs_cmove", value: 2219, isUnsigned: true)
!1626 = !DIEnumerator(name: "CODE_FOR_clzsi2", value: 2221, isUnsigned: true)
!1627 = !DIEnumerator(name: "CODE_FOR_bswapsi2", value: 2222, isUnsigned: true)
!1628 = !DIEnumerator(name: "CODE_FOR_clzhi2", value: 2223, isUnsigned: true)
!1629 = !DIEnumerator(name: "CODE_FOR_paritydi2", value: 2224, isUnsigned: true)
!1630 = !DIEnumerator(name: "CODE_FOR_paritysi2", value: 2226, isUnsigned: true)
!1631 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_32", value: 2228, isUnsigned: true)
!1632 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_64", value: 2229, isUnsigned: true)
!1633 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_32", value: 2230, isUnsigned: true)
!1634 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_64", value: 2231, isUnsigned: true)
!1635 = !DIEnumerator(name: "CODE_FOR_tls_dynamic_gnu2_32", value: 2233, isUnsigned: true)
!1636 = !DIEnumerator(name: "CODE_FOR_rsqrtsf2", value: 2240, isUnsigned: true)
!1637 = !DIEnumerator(name: "CODE_FOR_sqrtsf2", value: 2241, isUnsigned: true)
!1638 = !DIEnumerator(name: "CODE_FOR_sqrtdf2", value: 2242, isUnsigned: true)
!1639 = !DIEnumerator(name: "CODE_FOR_fmodxf3", value: 2243, isUnsigned: true)
!1640 = !DIEnumerator(name: "CODE_FOR_fmodsf3", value: 2244, isUnsigned: true)
!1641 = !DIEnumerator(name: "CODE_FOR_fmoddf3", value: 2245, isUnsigned: true)
!1642 = !DIEnumerator(name: "CODE_FOR_remainderxf3", value: 2246, isUnsigned: true)
!1643 = !DIEnumerator(name: "CODE_FOR_remaindersf3", value: 2247, isUnsigned: true)
!1644 = !DIEnumerator(name: "CODE_FOR_remainderdf3", value: 2248, isUnsigned: true)
!1645 = !DIEnumerator(name: "CODE_FOR_sincossf3", value: 2255, isUnsigned: true)
!1646 = !DIEnumerator(name: "CODE_FOR_sincosdf3", value: 2256, isUnsigned: true)
!1647 = !DIEnumerator(name: "CODE_FOR_tanxf2", value: 2257, isUnsigned: true)
!1648 = !DIEnumerator(name: "CODE_FOR_tansf2", value: 2258, isUnsigned: true)
!1649 = !DIEnumerator(name: "CODE_FOR_tandf2", value: 2259, isUnsigned: true)
!1650 = !DIEnumerator(name: "CODE_FOR_atan2xf3", value: 2260, isUnsigned: true)
!1651 = !DIEnumerator(name: "CODE_FOR_atan2sf3", value: 2261, isUnsigned: true)
!1652 = !DIEnumerator(name: "CODE_FOR_atan2df3", value: 2262, isUnsigned: true)
!1653 = !DIEnumerator(name: "CODE_FOR_atanxf2", value: 2263, isUnsigned: true)
!1654 = !DIEnumerator(name: "CODE_FOR_atansf2", value: 2264, isUnsigned: true)
!1655 = !DIEnumerator(name: "CODE_FOR_atandf2", value: 2265, isUnsigned: true)
!1656 = !DIEnumerator(name: "CODE_FOR_asinxf2", value: 2266, isUnsigned: true)
!1657 = !DIEnumerator(name: "CODE_FOR_asinsf2", value: 2267, isUnsigned: true)
!1658 = !DIEnumerator(name: "CODE_FOR_asindf2", value: 2268, isUnsigned: true)
!1659 = !DIEnumerator(name: "CODE_FOR_acosxf2", value: 2269, isUnsigned: true)
!1660 = !DIEnumerator(name: "CODE_FOR_acossf2", value: 2270, isUnsigned: true)
!1661 = !DIEnumerator(name: "CODE_FOR_acosdf2", value: 2271, isUnsigned: true)
!1662 = !DIEnumerator(name: "CODE_FOR_logxf2", value: 2272, isUnsigned: true)
!1663 = !DIEnumerator(name: "CODE_FOR_logsf2", value: 2273, isUnsigned: true)
!1664 = !DIEnumerator(name: "CODE_FOR_logdf2", value: 2274, isUnsigned: true)
!1665 = !DIEnumerator(name: "CODE_FOR_log10xf2", value: 2275, isUnsigned: true)
!1666 = !DIEnumerator(name: "CODE_FOR_log10sf2", value: 2276, isUnsigned: true)
!1667 = !DIEnumerator(name: "CODE_FOR_log10df2", value: 2277, isUnsigned: true)
!1668 = !DIEnumerator(name: "CODE_FOR_log2xf2", value: 2278, isUnsigned: true)
!1669 = !DIEnumerator(name: "CODE_FOR_log2sf2", value: 2279, isUnsigned: true)
!1670 = !DIEnumerator(name: "CODE_FOR_log2df2", value: 2280, isUnsigned: true)
!1671 = !DIEnumerator(name: "CODE_FOR_log1pxf2", value: 2281, isUnsigned: true)
!1672 = !DIEnumerator(name: "CODE_FOR_log1psf2", value: 2282, isUnsigned: true)
!1673 = !DIEnumerator(name: "CODE_FOR_log1pdf2", value: 2283, isUnsigned: true)
!1674 = !DIEnumerator(name: "CODE_FOR_logbxf2", value: 2284, isUnsigned: true)
!1675 = !DIEnumerator(name: "CODE_FOR_logbsf2", value: 2285, isUnsigned: true)
!1676 = !DIEnumerator(name: "CODE_FOR_logbdf2", value: 2286, isUnsigned: true)
!1677 = !DIEnumerator(name: "CODE_FOR_ilogbxf2", value: 2287, isUnsigned: true)
!1678 = !DIEnumerator(name: "CODE_FOR_ilogbsf2", value: 2288, isUnsigned: true)
!1679 = !DIEnumerator(name: "CODE_FOR_ilogbdf2", value: 2289, isUnsigned: true)
!1680 = !DIEnumerator(name: "CODE_FOR_expNcorexf3", value: 2290, isUnsigned: true)
!1681 = !DIEnumerator(name: "CODE_FOR_expxf2", value: 2291, isUnsigned: true)
!1682 = !DIEnumerator(name: "CODE_FOR_expsf2", value: 2292, isUnsigned: true)
!1683 = !DIEnumerator(name: "CODE_FOR_expdf2", value: 2293, isUnsigned: true)
!1684 = !DIEnumerator(name: "CODE_FOR_exp10xf2", value: 2294, isUnsigned: true)
!1685 = !DIEnumerator(name: "CODE_FOR_exp10sf2", value: 2295, isUnsigned: true)
!1686 = !DIEnumerator(name: "CODE_FOR_exp10df2", value: 2296, isUnsigned: true)
!1687 = !DIEnumerator(name: "CODE_FOR_exp2xf2", value: 2297, isUnsigned: true)
!1688 = !DIEnumerator(name: "CODE_FOR_exp2sf2", value: 2298, isUnsigned: true)
!1689 = !DIEnumerator(name: "CODE_FOR_exp2df2", value: 2299, isUnsigned: true)
!1690 = !DIEnumerator(name: "CODE_FOR_expm1xf2", value: 2300, isUnsigned: true)
!1691 = !DIEnumerator(name: "CODE_FOR_expm1sf2", value: 2301, isUnsigned: true)
!1692 = !DIEnumerator(name: "CODE_FOR_expm1df2", value: 2302, isUnsigned: true)
!1693 = !DIEnumerator(name: "CODE_FOR_ldexpxf3", value: 2303, isUnsigned: true)
!1694 = !DIEnumerator(name: "CODE_FOR_ldexpsf3", value: 2304, isUnsigned: true)
!1695 = !DIEnumerator(name: "CODE_FOR_ldexpdf3", value: 2305, isUnsigned: true)
!1696 = !DIEnumerator(name: "CODE_FOR_scalbxf3", value: 2306, isUnsigned: true)
!1697 = !DIEnumerator(name: "CODE_FOR_scalbsf3", value: 2307, isUnsigned: true)
!1698 = !DIEnumerator(name: "CODE_FOR_scalbdf3", value: 2308, isUnsigned: true)
!1699 = !DIEnumerator(name: "CODE_FOR_significandxf2", value: 2309, isUnsigned: true)
!1700 = !DIEnumerator(name: "CODE_FOR_significandsf2", value: 2310, isUnsigned: true)
!1701 = !DIEnumerator(name: "CODE_FOR_significanddf2", value: 2311, isUnsigned: true)
!1702 = !DIEnumerator(name: "CODE_FOR_rintsf2", value: 2312, isUnsigned: true)
!1703 = !DIEnumerator(name: "CODE_FOR_rintdf2", value: 2313, isUnsigned: true)
!1704 = !DIEnumerator(name: "CODE_FOR_roundsf2", value: 2314, isUnsigned: true)
!1705 = !DIEnumerator(name: "CODE_FOR_rounddf2", value: 2315, isUnsigned: true)
!1706 = !DIEnumerator(name: "CODE_FOR_lrintxfhi2", value: 2325, isUnsigned: true)
!1707 = !DIEnumerator(name: "CODE_FOR_lrintxfsi2", value: 2326, isUnsigned: true)
!1708 = !DIEnumerator(name: "CODE_FOR_lrintxfdi2", value: 2327, isUnsigned: true)
!1709 = !DIEnumerator(name: "CODE_FOR_lrintsfsi2", value: 2328, isUnsigned: true)
!1710 = !DIEnumerator(name: "CODE_FOR_lrintdfsi2", value: 2329, isUnsigned: true)
!1711 = !DIEnumerator(name: "CODE_FOR_lroundsfsi2", value: 2330, isUnsigned: true)
!1712 = !DIEnumerator(name: "CODE_FOR_lrounddfsi2", value: 2331, isUnsigned: true)
!1713 = !DIEnumerator(name: "CODE_FOR_floorxf2", value: 2333, isUnsigned: true)
!1714 = !DIEnumerator(name: "CODE_FOR_floorsf2", value: 2334, isUnsigned: true)
!1715 = !DIEnumerator(name: "CODE_FOR_floordf2", value: 2335, isUnsigned: true)
!1716 = !DIEnumerator(name: "CODE_FOR_lfloorxfhi2", value: 2345, isUnsigned: true)
!1717 = !DIEnumerator(name: "CODE_FOR_lfloorxfsi2", value: 2346, isUnsigned: true)
!1718 = !DIEnumerator(name: "CODE_FOR_lfloorxfdi2", value: 2347, isUnsigned: true)
!1719 = !DIEnumerator(name: "CODE_FOR_lfloorsfsi2", value: 2348, isUnsigned: true)
!1720 = !DIEnumerator(name: "CODE_FOR_lfloordfsi2", value: 2349, isUnsigned: true)
!1721 = !DIEnumerator(name: "CODE_FOR_ceilxf2", value: 2351, isUnsigned: true)
!1722 = !DIEnumerator(name: "CODE_FOR_ceilsf2", value: 2352, isUnsigned: true)
!1723 = !DIEnumerator(name: "CODE_FOR_ceildf2", value: 2353, isUnsigned: true)
!1724 = !DIEnumerator(name: "CODE_FOR_lceilxfhi2", value: 2363, isUnsigned: true)
!1725 = !DIEnumerator(name: "CODE_FOR_lceilxfsi2", value: 2364, isUnsigned: true)
!1726 = !DIEnumerator(name: "CODE_FOR_lceilxfdi2", value: 2365, isUnsigned: true)
!1727 = !DIEnumerator(name: "CODE_FOR_lceilsfsi2", value: 2366, isUnsigned: true)
!1728 = !DIEnumerator(name: "CODE_FOR_lceildfsi2", value: 2367, isUnsigned: true)
!1729 = !DIEnumerator(name: "CODE_FOR_btruncxf2", value: 2369, isUnsigned: true)
!1730 = !DIEnumerator(name: "CODE_FOR_btruncsf2", value: 2370, isUnsigned: true)
!1731 = !DIEnumerator(name: "CODE_FOR_btruncdf2", value: 2371, isUnsigned: true)
!1732 = !DIEnumerator(name: "CODE_FOR_nearbyintxf2", value: 2373, isUnsigned: true)
!1733 = !DIEnumerator(name: "CODE_FOR_nearbyintsf2", value: 2374, isUnsigned: true)
!1734 = !DIEnumerator(name: "CODE_FOR_nearbyintdf2", value: 2375, isUnsigned: true)
!1735 = !DIEnumerator(name: "CODE_FOR_isinfxf2", value: 2378, isUnsigned: true)
!1736 = !DIEnumerator(name: "CODE_FOR_isinfsf2", value: 2379, isUnsigned: true)
!1737 = !DIEnumerator(name: "CODE_FOR_isinfdf2", value: 2380, isUnsigned: true)
!1738 = !DIEnumerator(name: "CODE_FOR_signbitsf2", value: 2381, isUnsigned: true)
!1739 = !DIEnumerator(name: "CODE_FOR_signbitdf2", value: 2382, isUnsigned: true)
!1740 = !DIEnumerator(name: "CODE_FOR_signbitxf2", value: 2383, isUnsigned: true)
!1741 = !DIEnumerator(name: "CODE_FOR_movmemsi", value: 2384, isUnsigned: true)
!1742 = !DIEnumerator(name: "CODE_FOR_strmov", value: 2385, isUnsigned: true)
!1743 = !DIEnumerator(name: "CODE_FOR_strmov_singleop", value: 2386, isUnsigned: true)
!1744 = !DIEnumerator(name: "CODE_FOR_rep_mov", value: 2387, isUnsigned: true)
!1745 = !DIEnumerator(name: "CODE_FOR_setmemsi", value: 2388, isUnsigned: true)
!1746 = !DIEnumerator(name: "CODE_FOR_strset", value: 2389, isUnsigned: true)
!1747 = !DIEnumerator(name: "CODE_FOR_strset_singleop", value: 2390, isUnsigned: true)
!1748 = !DIEnumerator(name: "CODE_FOR_rep_stos", value: 2391, isUnsigned: true)
!1749 = !DIEnumerator(name: "CODE_FOR_cmpstrnsi", value: 2392, isUnsigned: true)
!1750 = !DIEnumerator(name: "CODE_FOR_cmpintqi", value: 2393, isUnsigned: true)
!1751 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_nz_1", value: 2394, isUnsigned: true)
!1752 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_1", value: 2395, isUnsigned: true)
!1753 = !DIEnumerator(name: "CODE_FOR_strlensi", value: 2396, isUnsigned: true)
!1754 = !DIEnumerator(name: "CODE_FOR_strlendi", value: 2397, isUnsigned: true)
!1755 = !DIEnumerator(name: "CODE_FOR_strlenqi_1", value: 2398, isUnsigned: true)
!1756 = !DIEnumerator(name: "CODE_FOR_movqicc", value: 2401, isUnsigned: true)
!1757 = !DIEnumerator(name: "CODE_FOR_movhicc", value: 2402, isUnsigned: true)
!1758 = !DIEnumerator(name: "CODE_FOR_movsicc", value: 2403, isUnsigned: true)
!1759 = !DIEnumerator(name: "CODE_FOR_x86_movsicc_0_m1", value: 2404, isUnsigned: true)
!1760 = !DIEnumerator(name: "CODE_FOR_movsfcc", value: 2406, isUnsigned: true)
!1761 = !DIEnumerator(name: "CODE_FOR_movdfcc", value: 2407, isUnsigned: true)
!1762 = !DIEnumerator(name: "CODE_FOR_movxfcc", value: 2408, isUnsigned: true)
!1763 = !DIEnumerator(name: "CODE_FOR_addqicc", value: 2411, isUnsigned: true)
!1764 = !DIEnumerator(name: "CODE_FOR_addhicc", value: 2412, isUnsigned: true)
!1765 = !DIEnumerator(name: "CODE_FOR_addsicc", value: 2413, isUnsigned: true)
!1766 = !DIEnumerator(name: "CODE_FOR_allocate_stack", value: 2414, isUnsigned: true)
!1767 = !DIEnumerator(name: "CODE_FOR_probe_stack", value: 2415, isUnsigned: true)
!1768 = !DIEnumerator(name: "CODE_FOR_builtin_setjmp_receiver", value: 2416, isUnsigned: true)
!1769 = !DIEnumerator(name: "CODE_FOR_prefetch", value: 2486, isUnsigned: true)
!1770 = !DIEnumerator(name: "CODE_FOR_stack_protect_set", value: 2487, isUnsigned: true)
!1771 = !DIEnumerator(name: "CODE_FOR_stack_protect_test", value: 2488, isUnsigned: true)
!1772 = !DIEnumerator(name: "CODE_FOR_rdpmc", value: 2489, isUnsigned: true)
!1773 = !DIEnumerator(name: "CODE_FOR_rdtsc", value: 2490, isUnsigned: true)
!1774 = !DIEnumerator(name: "CODE_FOR_rdtscp", value: 2491, isUnsigned: true)
!1775 = !DIEnumerator(name: "CODE_FOR_lwp_llwpcb", value: 2492, isUnsigned: true)
!1776 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcb", value: 2493, isUnsigned: true)
!1777 = !DIEnumerator(name: "CODE_FOR_lwp_lwpvalsi3", value: 2494, isUnsigned: true)
!1778 = !DIEnumerator(name: "CODE_FOR_lwp_lwpinssi3", value: 2495, isUnsigned: true)
!1779 = !DIEnumerator(name: "CODE_FOR_movv8qi", value: 2496, isUnsigned: true)
!1780 = !DIEnumerator(name: "CODE_FOR_movv4hi", value: 2497, isUnsigned: true)
!1781 = !DIEnumerator(name: "CODE_FOR_movv2si", value: 2498, isUnsigned: true)
!1782 = !DIEnumerator(name: "CODE_FOR_movv1di", value: 2499, isUnsigned: true)
!1783 = !DIEnumerator(name: "CODE_FOR_movv2sf", value: 2500, isUnsigned: true)
!1784 = !DIEnumerator(name: "CODE_FOR_pushv8qi1", value: 2506, isUnsigned: true)
!1785 = !DIEnumerator(name: "CODE_FOR_pushv4hi1", value: 2507, isUnsigned: true)
!1786 = !DIEnumerator(name: "CODE_FOR_pushv2si1", value: 2508, isUnsigned: true)
!1787 = !DIEnumerator(name: "CODE_FOR_pushv1di1", value: 2509, isUnsigned: true)
!1788 = !DIEnumerator(name: "CODE_FOR_pushv2sf1", value: 2510, isUnsigned: true)
!1789 = !DIEnumerator(name: "CODE_FOR_movmisalignv8qi", value: 2511, isUnsigned: true)
!1790 = !DIEnumerator(name: "CODE_FOR_movmisalignv4hi", value: 2512, isUnsigned: true)
!1791 = !DIEnumerator(name: "CODE_FOR_movmisalignv2si", value: 2513, isUnsigned: true)
!1792 = !DIEnumerator(name: "CODE_FOR_movmisalignv1di", value: 2514, isUnsigned: true)
!1793 = !DIEnumerator(name: "CODE_FOR_movmisalignv2sf", value: 2515, isUnsigned: true)
!1794 = !DIEnumerator(name: "CODE_FOR_mmx_addv2sf3", value: 2516, isUnsigned: true)
!1795 = !DIEnumerator(name: "CODE_FOR_mmx_subv2sf3", value: 2517, isUnsigned: true)
!1796 = !DIEnumerator(name: "CODE_FOR_mmx_subrv2sf3", value: 2518, isUnsigned: true)
!1797 = !DIEnumerator(name: "CODE_FOR_mmx_mulv2sf3", value: 2519, isUnsigned: true)
!1798 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv2sf3", value: 2520, isUnsigned: true)
!1799 = !DIEnumerator(name: "CODE_FOR_mmx_sminv2sf3", value: 2521, isUnsigned: true)
!1800 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2sf3", value: 2522, isUnsigned: true)
!1801 = !DIEnumerator(name: "CODE_FOR_vec_setv2sf", value: 2523, isUnsigned: true)
!1802 = !DIEnumerator(name: "CODE_FOR_vec_extractv2sf", value: 2526, isUnsigned: true)
!1803 = !DIEnumerator(name: "CODE_FOR_vec_initv2sf", value: 2527, isUnsigned: true)
!1804 = !DIEnumerator(name: "CODE_FOR_mmx_addv8qi3", value: 2528, isUnsigned: true)
!1805 = !DIEnumerator(name: "CODE_FOR_mmx_subv8qi3", value: 2529, isUnsigned: true)
!1806 = !DIEnumerator(name: "CODE_FOR_mmx_addv4hi3", value: 2530, isUnsigned: true)
!1807 = !DIEnumerator(name: "CODE_FOR_mmx_subv4hi3", value: 2531, isUnsigned: true)
!1808 = !DIEnumerator(name: "CODE_FOR_mmx_addv2si3", value: 2532, isUnsigned: true)
!1809 = !DIEnumerator(name: "CODE_FOR_mmx_subv2si3", value: 2533, isUnsigned: true)
!1810 = !DIEnumerator(name: "CODE_FOR_mmx_addv1di3", value: 2534, isUnsigned: true)
!1811 = !DIEnumerator(name: "CODE_FOR_mmx_subv1di3", value: 2535, isUnsigned: true)
!1812 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv8qi3", value: 2536, isUnsigned: true)
!1813 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv8qi3", value: 2537, isUnsigned: true)
!1814 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv8qi3", value: 2538, isUnsigned: true)
!1815 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv8qi3", value: 2539, isUnsigned: true)
!1816 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv4hi3", value: 2540, isUnsigned: true)
!1817 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv4hi3", value: 2541, isUnsigned: true)
!1818 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv4hi3", value: 2542, isUnsigned: true)
!1819 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv4hi3", value: 2543, isUnsigned: true)
!1820 = !DIEnumerator(name: "CODE_FOR_mmx_mulv4hi3", value: 2544, isUnsigned: true)
!1821 = !DIEnumerator(name: "CODE_FOR_mmx_smulv4hi3_highpart", value: 2545, isUnsigned: true)
!1822 = !DIEnumerator(name: "CODE_FOR_mmx_umulv4hi3_highpart", value: 2546, isUnsigned: true)
!1823 = !DIEnumerator(name: "CODE_FOR_mmx_pmaddwd", value: 2547, isUnsigned: true)
!1824 = !DIEnumerator(name: "CODE_FOR_mmx_pmulhrwv4hi3", value: 2548, isUnsigned: true)
!1825 = !DIEnumerator(name: "CODE_FOR_sse2_umulv1siv1di3", value: 2549, isUnsigned: true)
!1826 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv4hi3", value: 2550, isUnsigned: true)
!1827 = !DIEnumerator(name: "CODE_FOR_mmx_sminv4hi3", value: 2551, isUnsigned: true)
!1828 = !DIEnumerator(name: "CODE_FOR_mmx_umaxv8qi3", value: 2552, isUnsigned: true)
!1829 = !DIEnumerator(name: "CODE_FOR_mmx_uminv8qi3", value: 2553, isUnsigned: true)
!1830 = !DIEnumerator(name: "CODE_FOR_mmx_eqv8qi3", value: 2554, isUnsigned: true)
!1831 = !DIEnumerator(name: "CODE_FOR_mmx_eqv4hi3", value: 2555, isUnsigned: true)
!1832 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2si3", value: 2556, isUnsigned: true)
!1833 = !DIEnumerator(name: "CODE_FOR_mmx_andv8qi3", value: 2557, isUnsigned: true)
!1834 = !DIEnumerator(name: "CODE_FOR_mmx_iorv8qi3", value: 2558, isUnsigned: true)
!1835 = !DIEnumerator(name: "CODE_FOR_mmx_xorv8qi3", value: 2559, isUnsigned: true)
!1836 = !DIEnumerator(name: "CODE_FOR_mmx_andv4hi3", value: 2560, isUnsigned: true)
!1837 = !DIEnumerator(name: "CODE_FOR_mmx_iorv4hi3", value: 2561, isUnsigned: true)
!1838 = !DIEnumerator(name: "CODE_FOR_mmx_xorv4hi3", value: 2562, isUnsigned: true)
!1839 = !DIEnumerator(name: "CODE_FOR_mmx_andv2si3", value: 2563, isUnsigned: true)
!1840 = !DIEnumerator(name: "CODE_FOR_mmx_iorv2si3", value: 2564, isUnsigned: true)
!1841 = !DIEnumerator(name: "CODE_FOR_mmx_xorv2si3", value: 2565, isUnsigned: true)
!1842 = !DIEnumerator(name: "CODE_FOR_mmx_pinsrw", value: 2566, isUnsigned: true)
!1843 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw", value: 2567, isUnsigned: true)
!1844 = !DIEnumerator(name: "CODE_FOR_vec_setv2si", value: 2568, isUnsigned: true)
!1845 = !DIEnumerator(name: "CODE_FOR_vec_extractv2si", value: 2571, isUnsigned: true)
!1846 = !DIEnumerator(name: "CODE_FOR_vec_initv2si", value: 2572, isUnsigned: true)
!1847 = !DIEnumerator(name: "CODE_FOR_vec_setv4hi", value: 2573, isUnsigned: true)
!1848 = !DIEnumerator(name: "CODE_FOR_vec_extractv4hi", value: 2574, isUnsigned: true)
!1849 = !DIEnumerator(name: "CODE_FOR_vec_initv4hi", value: 2575, isUnsigned: true)
!1850 = !DIEnumerator(name: "CODE_FOR_vec_setv8qi", value: 2576, isUnsigned: true)
!1851 = !DIEnumerator(name: "CODE_FOR_vec_extractv8qi", value: 2577, isUnsigned: true)
!1852 = !DIEnumerator(name: "CODE_FOR_vec_initv8qi", value: 2578, isUnsigned: true)
!1853 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv8qi3", value: 2579, isUnsigned: true)
!1854 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv4hi3", value: 2580, isUnsigned: true)
!1855 = !DIEnumerator(name: "CODE_FOR_mmx_maskmovq", value: 2581, isUnsigned: true)
!1856 = !DIEnumerator(name: "CODE_FOR_mmx_emms", value: 2582, isUnsigned: true)
!1857 = !DIEnumerator(name: "CODE_FOR_mmx_femms", value: 2583, isUnsigned: true)
!1858 = !DIEnumerator(name: "CODE_FOR_movv32qi", value: 2584, isUnsigned: true)
!1859 = !DIEnumerator(name: "CODE_FOR_movv16hi", value: 2585, isUnsigned: true)
!1860 = !DIEnumerator(name: "CODE_FOR_movv8si", value: 2586, isUnsigned: true)
!1861 = !DIEnumerator(name: "CODE_FOR_movv4di", value: 2587, isUnsigned: true)
!1862 = !DIEnumerator(name: "CODE_FOR_movv8sf", value: 2588, isUnsigned: true)
!1863 = !DIEnumerator(name: "CODE_FOR_movv4df", value: 2589, isUnsigned: true)
!1864 = !DIEnumerator(name: "CODE_FOR_movv16qi", value: 2590, isUnsigned: true)
!1865 = !DIEnumerator(name: "CODE_FOR_movv8hi", value: 2591, isUnsigned: true)
!1866 = !DIEnumerator(name: "CODE_FOR_movv4si", value: 2592, isUnsigned: true)
!1867 = !DIEnumerator(name: "CODE_FOR_movv2di", value: 2593, isUnsigned: true)
!1868 = !DIEnumerator(name: "CODE_FOR_movv1ti", value: 2594, isUnsigned: true)
!1869 = !DIEnumerator(name: "CODE_FOR_movv4sf", value: 2595, isUnsigned: true)
!1870 = !DIEnumerator(name: "CODE_FOR_movv2df", value: 2596, isUnsigned: true)
!1871 = !DIEnumerator(name: "CODE_FOR_pushv32qi1", value: 2600, isUnsigned: true)
!1872 = !DIEnumerator(name: "CODE_FOR_pushv16hi1", value: 2601, isUnsigned: true)
!1873 = !DIEnumerator(name: "CODE_FOR_pushv8si1", value: 2602, isUnsigned: true)
!1874 = !DIEnumerator(name: "CODE_FOR_pushv4di1", value: 2603, isUnsigned: true)
!1875 = !DIEnumerator(name: "CODE_FOR_pushv8sf1", value: 2604, isUnsigned: true)
!1876 = !DIEnumerator(name: "CODE_FOR_pushv4df1", value: 2605, isUnsigned: true)
!1877 = !DIEnumerator(name: "CODE_FOR_pushv16qi1", value: 2606, isUnsigned: true)
!1878 = !DIEnumerator(name: "CODE_FOR_pushv8hi1", value: 2607, isUnsigned: true)
!1879 = !DIEnumerator(name: "CODE_FOR_pushv4si1", value: 2608, isUnsigned: true)
!1880 = !DIEnumerator(name: "CODE_FOR_pushv2di1", value: 2609, isUnsigned: true)
!1881 = !DIEnumerator(name: "CODE_FOR_pushv1ti1", value: 2610, isUnsigned: true)
!1882 = !DIEnumerator(name: "CODE_FOR_pushv4sf1", value: 2611, isUnsigned: true)
!1883 = !DIEnumerator(name: "CODE_FOR_pushv2df1", value: 2612, isUnsigned: true)
!1884 = !DIEnumerator(name: "CODE_FOR_movmisalignv32qi", value: 2613, isUnsigned: true)
!1885 = !DIEnumerator(name: "CODE_FOR_movmisalignv16hi", value: 2614, isUnsigned: true)
!1886 = !DIEnumerator(name: "CODE_FOR_movmisalignv8si", value: 2615, isUnsigned: true)
!1887 = !DIEnumerator(name: "CODE_FOR_movmisalignv4di", value: 2616, isUnsigned: true)
!1888 = !DIEnumerator(name: "CODE_FOR_movmisalignv8sf", value: 2617, isUnsigned: true)
!1889 = !DIEnumerator(name: "CODE_FOR_movmisalignv4df", value: 2618, isUnsigned: true)
!1890 = !DIEnumerator(name: "CODE_FOR_movmisalignv16qi", value: 2619, isUnsigned: true)
!1891 = !DIEnumerator(name: "CODE_FOR_movmisalignv8hi", value: 2620, isUnsigned: true)
!1892 = !DIEnumerator(name: "CODE_FOR_movmisalignv4si", value: 2621, isUnsigned: true)
!1893 = !DIEnumerator(name: "CODE_FOR_movmisalignv2di", value: 2622, isUnsigned: true)
!1894 = !DIEnumerator(name: "CODE_FOR_movmisalignv1ti", value: 2623, isUnsigned: true)
!1895 = !DIEnumerator(name: "CODE_FOR_movmisalignv4sf", value: 2624, isUnsigned: true)
!1896 = !DIEnumerator(name: "CODE_FOR_movmisalignv2df", value: 2625, isUnsigned: true)
!1897 = !DIEnumerator(name: "CODE_FOR_storentv4sf", value: 2626, isUnsigned: true)
!1898 = !DIEnumerator(name: "CODE_FOR_storentv2df", value: 2627, isUnsigned: true)
!1899 = !DIEnumerator(name: "CODE_FOR_storentsf", value: 2628, isUnsigned: true)
!1900 = !DIEnumerator(name: "CODE_FOR_storentdf", value: 2629, isUnsigned: true)
!1901 = !DIEnumerator(name: "CODE_FOR_storentv2di", value: 2630, isUnsigned: true)
!1902 = !DIEnumerator(name: "CODE_FOR_storentsi", value: 2631, isUnsigned: true)
!1903 = !DIEnumerator(name: "CODE_FOR_absv4sf2", value: 2632, isUnsigned: true)
!1904 = !DIEnumerator(name: "CODE_FOR_negv4sf2", value: 2633, isUnsigned: true)
!1905 = !DIEnumerator(name: "CODE_FOR_absv2df2", value: 2634, isUnsigned: true)
!1906 = !DIEnumerator(name: "CODE_FOR_negv2df2", value: 2635, isUnsigned: true)
!1907 = !DIEnumerator(name: "CODE_FOR_addv8sf3", value: 2636, isUnsigned: true)
!1908 = !DIEnumerator(name: "CODE_FOR_subv8sf3", value: 2637, isUnsigned: true)
!1909 = !DIEnumerator(name: "CODE_FOR_addv4df3", value: 2638, isUnsigned: true)
!1910 = !DIEnumerator(name: "CODE_FOR_subv4df3", value: 2639, isUnsigned: true)
!1911 = !DIEnumerator(name: "CODE_FOR_addv4sf3", value: 2640, isUnsigned: true)
!1912 = !DIEnumerator(name: "CODE_FOR_subv4sf3", value: 2641, isUnsigned: true)
!1913 = !DIEnumerator(name: "CODE_FOR_addv2df3", value: 2642, isUnsigned: true)
!1914 = !DIEnumerator(name: "CODE_FOR_subv2df3", value: 2643, isUnsigned: true)
!1915 = !DIEnumerator(name: "CODE_FOR_mulv8sf3", value: 2644, isUnsigned: true)
!1916 = !DIEnumerator(name: "CODE_FOR_mulv4df3", value: 2645, isUnsigned: true)
!1917 = !DIEnumerator(name: "CODE_FOR_mulv4sf3", value: 2646, isUnsigned: true)
!1918 = !DIEnumerator(name: "CODE_FOR_mulv2df3", value: 2647, isUnsigned: true)
!1919 = !DIEnumerator(name: "CODE_FOR_divv8sf3", value: 2648, isUnsigned: true)
!1920 = !DIEnumerator(name: "CODE_FOR_divv4df3", value: 2649, isUnsigned: true)
!1921 = !DIEnumerator(name: "CODE_FOR_divv4sf3", value: 2650, isUnsigned: true)
!1922 = !DIEnumerator(name: "CODE_FOR_divv2df3", value: 2651, isUnsigned: true)
!1923 = !DIEnumerator(name: "CODE_FOR_sqrtv8sf2", value: 2652, isUnsigned: true)
!1924 = !DIEnumerator(name: "CODE_FOR_sqrtv4sf2", value: 2653, isUnsigned: true)
!1925 = !DIEnumerator(name: "CODE_FOR_rsqrtv8sf2", value: 2654, isUnsigned: true)
!1926 = !DIEnumerator(name: "CODE_FOR_rsqrtv4sf2", value: 2655, isUnsigned: true)
!1927 = !DIEnumerator(name: "CODE_FOR_smaxv8sf3", value: 2656, isUnsigned: true)
!1928 = !DIEnumerator(name: "CODE_FOR_sminv8sf3", value: 2657, isUnsigned: true)
!1929 = !DIEnumerator(name: "CODE_FOR_smaxv4df3", value: 2658, isUnsigned: true)
!1930 = !DIEnumerator(name: "CODE_FOR_sminv4df3", value: 2659, isUnsigned: true)
!1931 = !DIEnumerator(name: "CODE_FOR_smaxv4sf3", value: 2660, isUnsigned: true)
!1932 = !DIEnumerator(name: "CODE_FOR_sminv4sf3", value: 2661, isUnsigned: true)
!1933 = !DIEnumerator(name: "CODE_FOR_smaxv2df3", value: 2662, isUnsigned: true)
!1934 = !DIEnumerator(name: "CODE_FOR_sminv2df3", value: 2663, isUnsigned: true)
!1935 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v4sf", value: 2664, isUnsigned: true)
!1936 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v2df", value: 2665, isUnsigned: true)
!1937 = !DIEnumerator(name: "CODE_FOR_reduc_smax_v4sf", value: 2666, isUnsigned: true)
!1938 = !DIEnumerator(name: "CODE_FOR_reduc_smin_v4sf", value: 2667, isUnsigned: true)
!1939 = !DIEnumerator(name: "CODE_FOR_vcondv4sf", value: 2668, isUnsigned: true)
!1940 = !DIEnumerator(name: "CODE_FOR_vcondv2df", value: 2669, isUnsigned: true)
!1941 = !DIEnumerator(name: "CODE_FOR_andv8sf3", value: 2670, isUnsigned: true)
!1942 = !DIEnumerator(name: "CODE_FOR_iorv8sf3", value: 2671, isUnsigned: true)
!1943 = !DIEnumerator(name: "CODE_FOR_xorv8sf3", value: 2672, isUnsigned: true)
!1944 = !DIEnumerator(name: "CODE_FOR_andv4df3", value: 2673, isUnsigned: true)
!1945 = !DIEnumerator(name: "CODE_FOR_iorv4df3", value: 2674, isUnsigned: true)
!1946 = !DIEnumerator(name: "CODE_FOR_xorv4df3", value: 2675, isUnsigned: true)
!1947 = !DIEnumerator(name: "CODE_FOR_andv4sf3", value: 2676, isUnsigned: true)
!1948 = !DIEnumerator(name: "CODE_FOR_iorv4sf3", value: 2677, isUnsigned: true)
!1949 = !DIEnumerator(name: "CODE_FOR_xorv4sf3", value: 2678, isUnsigned: true)
!1950 = !DIEnumerator(name: "CODE_FOR_andv2df3", value: 2679, isUnsigned: true)
!1951 = !DIEnumerator(name: "CODE_FOR_iorv2df3", value: 2680, isUnsigned: true)
!1952 = !DIEnumerator(name: "CODE_FOR_xorv2df3", value: 2681, isUnsigned: true)
!1953 = !DIEnumerator(name: "CODE_FOR_copysignv4sf3", value: 2682, isUnsigned: true)
!1954 = !DIEnumerator(name: "CODE_FOR_copysignv2df3", value: 2683, isUnsigned: true)
!1955 = !DIEnumerator(name: "CODE_FOR_sse2_cvtudq2ps", value: 2684, isUnsigned: true)
!1956 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2dq", value: 2685, isUnsigned: true)
!1957 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2dq", value: 2686, isUnsigned: true)
!1958 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2ps", value: 2687, isUnsigned: true)
!1959 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4sf", value: 2688, isUnsigned: true)
!1960 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4sf", value: 2689, isUnsigned: true)
!1961 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v8hi", value: 2690, isUnsigned: true)
!1962 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v8hi", value: 2691, isUnsigned: true)
!1963 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v8hi", value: 2692, isUnsigned: true)
!1964 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v8hi", value: 2693, isUnsigned: true)
!1965 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v4si", value: 2694, isUnsigned: true)
!1966 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v4si", value: 2695, isUnsigned: true)
!1967 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v4si", value: 2696, isUnsigned: true)
!1968 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v4si", value: 2697, isUnsigned: true)
!1969 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2df", value: 2698, isUnsigned: true)
!1970 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_trunc_v2df", value: 2699, isUnsigned: true)
!1971 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_v2df", value: 2700, isUnsigned: true)
!1972 = !DIEnumerator(name: "CODE_FOR_sse_movhlps_exp", value: 2701, isUnsigned: true)
!1973 = !DIEnumerator(name: "CODE_FOR_sse_movlhps_exp", value: 2702, isUnsigned: true)
!1974 = !DIEnumerator(name: "CODE_FOR_avx_shufps256", value: 2703, isUnsigned: true)
!1975 = !DIEnumerator(name: "CODE_FOR_sse_shufps", value: 2704, isUnsigned: true)
!1976 = !DIEnumerator(name: "CODE_FOR_sse_loadhps_exp", value: 2705, isUnsigned: true)
!1977 = !DIEnumerator(name: "CODE_FOR_sse_loadlps_exp", value: 2706, isUnsigned: true)
!1978 = !DIEnumerator(name: "CODE_FOR_vec_dupv4sf", value: 2707, isUnsigned: true)
!1979 = !DIEnumerator(name: "CODE_FOR_vec_initv16qi", value: 2708, isUnsigned: true)
!1980 = !DIEnumerator(name: "CODE_FOR_vec_initv8hi", value: 2709, isUnsigned: true)
!1981 = !DIEnumerator(name: "CODE_FOR_vec_initv4si", value: 2710, isUnsigned: true)
!1982 = !DIEnumerator(name: "CODE_FOR_vec_initv2di", value: 2711, isUnsigned: true)
!1983 = !DIEnumerator(name: "CODE_FOR_vec_initv4sf", value: 2712, isUnsigned: true)
!1984 = !DIEnumerator(name: "CODE_FOR_vec_initv2df", value: 2713, isUnsigned: true)
!1985 = !DIEnumerator(name: "CODE_FOR_vec_setv16qi", value: 2715, isUnsigned: true)
!1986 = !DIEnumerator(name: "CODE_FOR_vec_setv8hi", value: 2716, isUnsigned: true)
!1987 = !DIEnumerator(name: "CODE_FOR_vec_setv4si", value: 2717, isUnsigned: true)
!1988 = !DIEnumerator(name: "CODE_FOR_vec_setv2di", value: 2718, isUnsigned: true)
!1989 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf", value: 2719, isUnsigned: true)
!1990 = !DIEnumerator(name: "CODE_FOR_vec_setv2df", value: 2720, isUnsigned: true)
!1991 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v32qi", value: 2722, isUnsigned: true)
!1992 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v16hi", value: 2723, isUnsigned: true)
!1993 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8si", value: 2724, isUnsigned: true)
!1994 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4di", value: 2725, isUnsigned: true)
!1995 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8sf", value: 2726, isUnsigned: true)
!1996 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4df", value: 2727, isUnsigned: true)
!1997 = !DIEnumerator(name: "CODE_FOR_vec_extractv16qi", value: 2729, isUnsigned: true)
!1998 = !DIEnumerator(name: "CODE_FOR_vec_extractv8hi", value: 2730, isUnsigned: true)
!1999 = !DIEnumerator(name: "CODE_FOR_vec_extractv4si", value: 2731, isUnsigned: true)
!2000 = !DIEnumerator(name: "CODE_FOR_vec_extractv2di", value: 2732, isUnsigned: true)
!2001 = !DIEnumerator(name: "CODE_FOR_vec_extractv4sf", value: 2733, isUnsigned: true)
!2002 = !DIEnumerator(name: "CODE_FOR_vec_extractv2df", value: 2734, isUnsigned: true)
!2003 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2df", value: 2735, isUnsigned: true)
!2004 = !DIEnumerator(name: "CODE_FOR_avx_movddup256", value: 2736, isUnsigned: true)
!2005 = !DIEnumerator(name: "CODE_FOR_avx_unpcklpd256", value: 2737, isUnsigned: true)
!2006 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2df", value: 2738, isUnsigned: true)
!2007 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256", value: 2741, isUnsigned: true)
!2008 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd", value: 2742, isUnsigned: true)
!2009 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4sf", value: 2743, isUnsigned: true)
!2010 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2df", value: 2744, isUnsigned: true)
!2011 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2di", value: 2745, isUnsigned: true)
!2012 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4si", value: 2746, isUnsigned: true)
!2013 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8hi", value: 2747, isUnsigned: true)
!2014 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv16qi", value: 2748, isUnsigned: true)
!2015 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4df", value: 2749, isUnsigned: true)
!2016 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8sf", value: 2750, isUnsigned: true)
!2017 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4sf", value: 2751, isUnsigned: true)
!2018 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2df", value: 2752, isUnsigned: true)
!2019 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2di", value: 2753, isUnsigned: true)
!2020 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4si", value: 2754, isUnsigned: true)
!2021 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8hi", value: 2755, isUnsigned: true)
!2022 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv16qi", value: 2756, isUnsigned: true)
!2023 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4df", value: 2757, isUnsigned: true)
!2024 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8sf", value: 2758, isUnsigned: true)
!2025 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd_exp", value: 2761, isUnsigned: true)
!2026 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd_exp", value: 2763, isUnsigned: true)
!2027 = !DIEnumerator(name: "CODE_FOR_negv16qi2", value: 2765, isUnsigned: true)
!2028 = !DIEnumerator(name: "CODE_FOR_negv8hi2", value: 2766, isUnsigned: true)
!2029 = !DIEnumerator(name: "CODE_FOR_negv4si2", value: 2767, isUnsigned: true)
!2030 = !DIEnumerator(name: "CODE_FOR_negv2di2", value: 2768, isUnsigned: true)
!2031 = !DIEnumerator(name: "CODE_FOR_addv16qi3", value: 2769, isUnsigned: true)
!2032 = !DIEnumerator(name: "CODE_FOR_subv16qi3", value: 2770, isUnsigned: true)
!2033 = !DIEnumerator(name: "CODE_FOR_addv8hi3", value: 2771, isUnsigned: true)
!2034 = !DIEnumerator(name: "CODE_FOR_subv8hi3", value: 2772, isUnsigned: true)
!2035 = !DIEnumerator(name: "CODE_FOR_addv4si3", value: 2773, isUnsigned: true)
!2036 = !DIEnumerator(name: "CODE_FOR_subv4si3", value: 2774, isUnsigned: true)
!2037 = !DIEnumerator(name: "CODE_FOR_addv2di3", value: 2775, isUnsigned: true)
!2038 = !DIEnumerator(name: "CODE_FOR_subv2di3", value: 2776, isUnsigned: true)
!2039 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv16qi3", value: 2777, isUnsigned: true)
!2040 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv16qi3", value: 2778, isUnsigned: true)
!2041 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv16qi3", value: 2779, isUnsigned: true)
!2042 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv16qi3", value: 2780, isUnsigned: true)
!2043 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv8hi3", value: 2781, isUnsigned: true)
!2044 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv8hi3", value: 2782, isUnsigned: true)
!2045 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv8hi3", value: 2783, isUnsigned: true)
!2046 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv8hi3", value: 2784, isUnsigned: true)
!2047 = !DIEnumerator(name: "CODE_FOR_mulv8hi3", value: 2786, isUnsigned: true)
!2048 = !DIEnumerator(name: "CODE_FOR_smulv8hi3_highpart", value: 2787, isUnsigned: true)
!2049 = !DIEnumerator(name: "CODE_FOR_umulv8hi3_highpart", value: 2788, isUnsigned: true)
!2050 = !DIEnumerator(name: "CODE_FOR_sse2_umulv2siv2di3", value: 2789, isUnsigned: true)
!2051 = !DIEnumerator(name: "CODE_FOR_sse4_1_mulv2siv2di3", value: 2790, isUnsigned: true)
!2052 = !DIEnumerator(name: "CODE_FOR_sse2_pmaddwd", value: 2791, isUnsigned: true)
!2053 = !DIEnumerator(name: "CODE_FOR_mulv4si3", value: 2792, isUnsigned: true)
!2054 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v8hi", value: 2795, isUnsigned: true)
!2055 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v8hi", value: 2796, isUnsigned: true)
!2056 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v8hi", value: 2797, isUnsigned: true)
!2057 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v8hi", value: 2798, isUnsigned: true)
!2058 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v4si", value: 2799, isUnsigned: true)
!2059 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v4si", value: 2800, isUnsigned: true)
!2060 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v4si", value: 2801, isUnsigned: true)
!2061 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v4si", value: 2802, isUnsigned: true)
!2062 = !DIEnumerator(name: "CODE_FOR_sdot_prodv8hi", value: 2803, isUnsigned: true)
!2063 = !DIEnumerator(name: "CODE_FOR_udot_prodv4si", value: 2804, isUnsigned: true)
!2064 = !DIEnumerator(name: "CODE_FOR_vec_shl_v16qi", value: 2805, isUnsigned: true)
!2065 = !DIEnumerator(name: "CODE_FOR_vec_shl_v8hi", value: 2806, isUnsigned: true)
!2066 = !DIEnumerator(name: "CODE_FOR_vec_shl_v4si", value: 2807, isUnsigned: true)
!2067 = !DIEnumerator(name: "CODE_FOR_vec_shl_v2di", value: 2808, isUnsigned: true)
!2068 = !DIEnumerator(name: "CODE_FOR_vec_shr_v16qi", value: 2809, isUnsigned: true)
!2069 = !DIEnumerator(name: "CODE_FOR_vec_shr_v8hi", value: 2810, isUnsigned: true)
!2070 = !DIEnumerator(name: "CODE_FOR_vec_shr_v4si", value: 2811, isUnsigned: true)
!2071 = !DIEnumerator(name: "CODE_FOR_vec_shr_v2di", value: 2812, isUnsigned: true)
!2072 = !DIEnumerator(name: "CODE_FOR_umaxv16qi3", value: 2813, isUnsigned: true)
!2073 = !DIEnumerator(name: "CODE_FOR_uminv16qi3", value: 2814, isUnsigned: true)
!2074 = !DIEnumerator(name: "CODE_FOR_smaxv8hi3", value: 2815, isUnsigned: true)
!2075 = !DIEnumerator(name: "CODE_FOR_sminv8hi3", value: 2816, isUnsigned: true)
!2076 = !DIEnumerator(name: "CODE_FOR_umaxv8hi3", value: 2817, isUnsigned: true)
!2077 = !DIEnumerator(name: "CODE_FOR_smaxv16qi3", value: 2818, isUnsigned: true)
!2078 = !DIEnumerator(name: "CODE_FOR_smaxv4si3", value: 2819, isUnsigned: true)
!2079 = !DIEnumerator(name: "CODE_FOR_smaxv2di3", value: 2820, isUnsigned: true)
!2080 = !DIEnumerator(name: "CODE_FOR_umaxv4si3", value: 2821, isUnsigned: true)
!2081 = !DIEnumerator(name: "CODE_FOR_umaxv2di3", value: 2822, isUnsigned: true)
!2082 = !DIEnumerator(name: "CODE_FOR_sminv16qi3", value: 2823, isUnsigned: true)
!2083 = !DIEnumerator(name: "CODE_FOR_sminv4si3", value: 2824, isUnsigned: true)
!2084 = !DIEnumerator(name: "CODE_FOR_sminv2di3", value: 2825, isUnsigned: true)
!2085 = !DIEnumerator(name: "CODE_FOR_uminv8hi3", value: 2826, isUnsigned: true)
!2086 = !DIEnumerator(name: "CODE_FOR_uminv4si3", value: 2827, isUnsigned: true)
!2087 = !DIEnumerator(name: "CODE_FOR_uminv2di3", value: 2828, isUnsigned: true)
!2088 = !DIEnumerator(name: "CODE_FOR_sse2_eqv16qi3", value: 2829, isUnsigned: true)
!2089 = !DIEnumerator(name: "CODE_FOR_sse2_eqv8hi3", value: 2830, isUnsigned: true)
!2090 = !DIEnumerator(name: "CODE_FOR_sse2_eqv4si3", value: 2831, isUnsigned: true)
!2091 = !DIEnumerator(name: "CODE_FOR_sse4_1_eqv2di3", value: 2832, isUnsigned: true)
!2092 = !DIEnumerator(name: "CODE_FOR_vcondv16qi", value: 2833, isUnsigned: true)
!2093 = !DIEnumerator(name: "CODE_FOR_vcondv8hi", value: 2834, isUnsigned: true)
!2094 = !DIEnumerator(name: "CODE_FOR_vcondv4si", value: 2835, isUnsigned: true)
!2095 = !DIEnumerator(name: "CODE_FOR_vcondv2di", value: 2836, isUnsigned: true)
!2096 = !DIEnumerator(name: "CODE_FOR_vconduv16qi", value: 2837, isUnsigned: true)
!2097 = !DIEnumerator(name: "CODE_FOR_vconduv8hi", value: 2838, isUnsigned: true)
!2098 = !DIEnumerator(name: "CODE_FOR_vconduv4si", value: 2839, isUnsigned: true)
!2099 = !DIEnumerator(name: "CODE_FOR_vconduv2di", value: 2840, isUnsigned: true)
!2100 = !DIEnumerator(name: "CODE_FOR_one_cmplv16qi2", value: 2841, isUnsigned: true)
!2101 = !DIEnumerator(name: "CODE_FOR_one_cmplv8hi2", value: 2842, isUnsigned: true)
!2102 = !DIEnumerator(name: "CODE_FOR_one_cmplv4si2", value: 2843, isUnsigned: true)
!2103 = !DIEnumerator(name: "CODE_FOR_one_cmplv2di2", value: 2844, isUnsigned: true)
!2104 = !DIEnumerator(name: "CODE_FOR_andv16qi3", value: 2845, isUnsigned: true)
!2105 = !DIEnumerator(name: "CODE_FOR_iorv16qi3", value: 2846, isUnsigned: true)
!2106 = !DIEnumerator(name: "CODE_FOR_xorv16qi3", value: 2847, isUnsigned: true)
!2107 = !DIEnumerator(name: "CODE_FOR_andv8hi3", value: 2848, isUnsigned: true)
!2108 = !DIEnumerator(name: "CODE_FOR_iorv8hi3", value: 2849, isUnsigned: true)
!2109 = !DIEnumerator(name: "CODE_FOR_xorv8hi3", value: 2850, isUnsigned: true)
!2110 = !DIEnumerator(name: "CODE_FOR_andv4si3", value: 2851, isUnsigned: true)
!2111 = !DIEnumerator(name: "CODE_FOR_iorv4si3", value: 2852, isUnsigned: true)
!2112 = !DIEnumerator(name: "CODE_FOR_xorv4si3", value: 2853, isUnsigned: true)
!2113 = !DIEnumerator(name: "CODE_FOR_andv2di3", value: 2854, isUnsigned: true)
!2114 = !DIEnumerator(name: "CODE_FOR_iorv2di3", value: 2855, isUnsigned: true)
!2115 = !DIEnumerator(name: "CODE_FOR_xorv2di3", value: 2856, isUnsigned: true)
!2116 = !DIEnumerator(name: "CODE_FOR_andtf3", value: 2857, isUnsigned: true)
!2117 = !DIEnumerator(name: "CODE_FOR_iortf3", value: 2858, isUnsigned: true)
!2118 = !DIEnumerator(name: "CODE_FOR_xortf3", value: 2859, isUnsigned: true)
!2119 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v8hi", value: 2860, isUnsigned: true)
!2120 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v4si", value: 2861, isUnsigned: true)
!2121 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2di", value: 2862, isUnsigned: true)
!2122 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd", value: 2863, isUnsigned: true)
!2123 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw", value: 2864, isUnsigned: true)
!2124 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw", value: 2865, isUnsigned: true)
!2125 = !DIEnumerator(name: "CODE_FOR_sse2_loadd", value: 2866, isUnsigned: true)
!2126 = !DIEnumerator(name: "CODE_FOR_sse_storeq", value: 2869, isUnsigned: true)
!2127 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v16qi", value: 2871, isUnsigned: true)
!2128 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v16qi", value: 2872, isUnsigned: true)
!2129 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v16qi", value: 2873, isUnsigned: true)
!2130 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v16qi", value: 2874, isUnsigned: true)
!2131 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v8hi", value: 2875, isUnsigned: true)
!2132 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v8hi", value: 2876, isUnsigned: true)
!2133 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v8hi", value: 2877, isUnsigned: true)
!2134 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v8hi", value: 2878, isUnsigned: true)
!2135 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v4si", value: 2879, isUnsigned: true)
!2136 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4si", value: 2880, isUnsigned: true)
!2137 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v4si", value: 2881, isUnsigned: true)
!2138 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4si", value: 2882, isUnsigned: true)
!2139 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv16qi3", value: 2883, isUnsigned: true)
!2140 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv8hi3", value: 2884, isUnsigned: true)
!2141 = !DIEnumerator(name: "CODE_FOR_sse2_maskmovdqu", value: 2885, isUnsigned: true)
!2142 = !DIEnumerator(name: "CODE_FOR_sse_sfence", value: 2886, isUnsigned: true)
!2143 = !DIEnumerator(name: "CODE_FOR_sse2_mfence", value: 2887, isUnsigned: true)
!2144 = !DIEnumerator(name: "CODE_FOR_sse2_lfence", value: 2888, isUnsigned: true)
!2145 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv8hi3", value: 2889, isUnsigned: true)
!2146 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv4hi3", value: 2890, isUnsigned: true)
!2147 = !DIEnumerator(name: "CODE_FOR_rotlv16qi3", value: 2895, isUnsigned: true)
!2148 = !DIEnumerator(name: "CODE_FOR_rotlv8hi3", value: 2896, isUnsigned: true)
!2149 = !DIEnumerator(name: "CODE_FOR_rotlv4si3", value: 2897, isUnsigned: true)
!2150 = !DIEnumerator(name: "CODE_FOR_rotlv2di3", value: 2898, isUnsigned: true)
!2151 = !DIEnumerator(name: "CODE_FOR_rotrv16qi3", value: 2899, isUnsigned: true)
!2152 = !DIEnumerator(name: "CODE_FOR_rotrv8hi3", value: 2900, isUnsigned: true)
!2153 = !DIEnumerator(name: "CODE_FOR_rotrv4si3", value: 2901, isUnsigned: true)
!2154 = !DIEnumerator(name: "CODE_FOR_rotrv2di3", value: 2902, isUnsigned: true)
!2155 = !DIEnumerator(name: "CODE_FOR_vrotrv16qi3", value: 2903, isUnsigned: true)
!2156 = !DIEnumerator(name: "CODE_FOR_vrotrv8hi3", value: 2904, isUnsigned: true)
!2157 = !DIEnumerator(name: "CODE_FOR_vrotrv4si3", value: 2905, isUnsigned: true)
!2158 = !DIEnumerator(name: "CODE_FOR_vrotrv2di3", value: 2906, isUnsigned: true)
!2159 = !DIEnumerator(name: "CODE_FOR_vrotlv16qi3", value: 2907, isUnsigned: true)
!2160 = !DIEnumerator(name: "CODE_FOR_vrotlv8hi3", value: 2908, isUnsigned: true)
!2161 = !DIEnumerator(name: "CODE_FOR_vrotlv4si3", value: 2909, isUnsigned: true)
!2162 = !DIEnumerator(name: "CODE_FOR_vrotlv2di3", value: 2910, isUnsigned: true)
!2163 = !DIEnumerator(name: "CODE_FOR_vlshrv16qi3", value: 2911, isUnsigned: true)
!2164 = !DIEnumerator(name: "CODE_FOR_vlshrv8hi3", value: 2912, isUnsigned: true)
!2165 = !DIEnumerator(name: "CODE_FOR_vlshrv4si3", value: 2913, isUnsigned: true)
!2166 = !DIEnumerator(name: "CODE_FOR_vashrv16qi3", value: 2914, isUnsigned: true)
!2167 = !DIEnumerator(name: "CODE_FOR_vashrv8hi3", value: 2915, isUnsigned: true)
!2168 = !DIEnumerator(name: "CODE_FOR_vashrv4si3", value: 2916, isUnsigned: true)
!2169 = !DIEnumerator(name: "CODE_FOR_vashlv16qi3", value: 2917, isUnsigned: true)
!2170 = !DIEnumerator(name: "CODE_FOR_vashlv8hi3", value: 2918, isUnsigned: true)
!2171 = !DIEnumerator(name: "CODE_FOR_vashlv4si3", value: 2919, isUnsigned: true)
!2172 = !DIEnumerator(name: "CODE_FOR_ashlv16qi3", value: 2920, isUnsigned: true)
!2173 = !DIEnumerator(name: "CODE_FOR_lshlv16qi3", value: 2921, isUnsigned: true)
!2174 = !DIEnumerator(name: "CODE_FOR_ashrv16qi3", value: 2922, isUnsigned: true)
!2175 = !DIEnumerator(name: "CODE_FOR_ashrv2di3", value: 2923, isUnsigned: true)
!2176 = !DIEnumerator(name: "CODE_FOR_avx_vzeroall", value: 2924, isUnsigned: true)
!2177 = !DIEnumerator(name: "CODE_FOR_avx_vzeroupper", value: 2925, isUnsigned: true)
!2178 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv2df", value: 2932, isUnsigned: true)
!2179 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4df", value: 2933, isUnsigned: true)
!2180 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4sf", value: 2934, isUnsigned: true)
!2181 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv8sf", value: 2935, isUnsigned: true)
!2182 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8si3", value: 2936, isUnsigned: true)
!2183 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8sf3", value: 2937, isUnsigned: true)
!2184 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v4df3", value: 2938, isUnsigned: true)
!2185 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v32qi", value: 2939, isUnsigned: true)
!2186 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v16hi", value: 2940, isUnsigned: true)
!2187 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8si", value: 2941, isUnsigned: true)
!2188 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4di", value: 2942, isUnsigned: true)
!2189 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8sf", value: 2943, isUnsigned: true)
!2190 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4df", value: 2944, isUnsigned: true)
!2191 = !DIEnumerator(name: "CODE_FOR_vec_initv32qi", value: 2945, isUnsigned: true)
!2192 = !DIEnumerator(name: "CODE_FOR_vec_initv16hi", value: 2946, isUnsigned: true)
!2193 = !DIEnumerator(name: "CODE_FOR_vec_initv8si", value: 2947, isUnsigned: true)
!2194 = !DIEnumerator(name: "CODE_FOR_vec_initv4di", value: 2948, isUnsigned: true)
!2195 = !DIEnumerator(name: "CODE_FOR_vec_initv8sf", value: 2949, isUnsigned: true)
!2196 = !DIEnumerator(name: "CODE_FOR_vec_initv4df", value: 2950, isUnsigned: true)
!2197 = !DIEnumerator(name: "CODE_FOR_memory_barrier", value: 2951, isUnsigned: true)
!2198 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapqi", value: 2952, isUnsigned: true)
!2199 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swaphi", value: 2953, isUnsigned: true)
!2200 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapsi", value: 2954, isUnsigned: true)
!2201 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapdi", value: 2955, isUnsigned: true)
!2202 = !DIEnumerator(name: "CODE_FOR_nothing", value: 2956, isUnsigned: true)
!2203 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !378, line: 60, baseType: !7, size: 32, elements: !2204)
!2204 = !{!2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217}
!2205 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!2206 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!2207 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!2208 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!2209 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!2210 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!2211 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!2212 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!2213 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!2214 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!2215 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!2216 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!2217 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!2218 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_methods", file: !706, line: 291, baseType: !7, size: 32, elements: !2219)
!2219 = !{!2220, !2221, !2222, !2223, !2224}
!2220 = !DIEnumerator(name: "OPTAB_DIRECT", value: 0, isUnsigned: true)
!2221 = !DIEnumerator(name: "OPTAB_LIB", value: 1, isUnsigned: true)
!2222 = !DIEnumerator(name: "OPTAB_WIDEN", value: 2, isUnsigned: true)
!2223 = !DIEnumerator(name: "OPTAB_LIB_WIDEN", value: 3, isUnsigned: true)
!2224 = !DIEnumerator(name: "OPTAB_MUST_WIDEN", value: 4, isUnsigned: true)
!2225 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mult_variant", file: !3, line: 2389, baseType: !7, size: 32, elements: !2226)
!2226 = !{!2227, !2228, !2229}
!2227 = !DIEnumerator(name: "basic_variant", value: 0, isUnsigned: true)
!2228 = !DIEnumerator(name: "negate_variant", value: 1, isUnsigned: true)
!2229 = !DIEnumerator(name: "add_variant", value: 2, isUnsigned: true)
!2230 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "alg_code", file: !3, line: 2278, baseType: !7, size: 32, elements: !2231)
!2231 = !{!2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242}
!2232 = !DIEnumerator(name: "alg_unknown", value: 0, isUnsigned: true)
!2233 = !DIEnumerator(name: "alg_zero", value: 1, isUnsigned: true)
!2234 = !DIEnumerator(name: "alg_m", value: 2, isUnsigned: true)
!2235 = !DIEnumerator(name: "alg_shift", value: 3, isUnsigned: true)
!2236 = !DIEnumerator(name: "alg_add_t_m2", value: 4, isUnsigned: true)
!2237 = !DIEnumerator(name: "alg_sub_t_m2", value: 5, isUnsigned: true)
!2238 = !DIEnumerator(name: "alg_add_factor", value: 6, isUnsigned: true)
!2239 = !DIEnumerator(name: "alg_sub_factor", value: 7, isUnsigned: true)
!2240 = !DIEnumerator(name: "alg_add_t2_m", value: 8, isUnsigned: true)
!2241 = !DIEnumerator(name: "alg_sub_t2_m", value: 9, isUnsigned: true)
!2242 = !DIEnumerator(name: "alg_impossible", value: 10, isUnsigned: true)
!2243 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !378, line: 836, baseType: !7, size: 32, elements: !2244)
!2244 = !{!2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276}
!2245 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!2246 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!2247 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!2248 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!2249 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!2250 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!2251 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!2252 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!2253 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!2254 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!2255 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!2256 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!2257 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!2258 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!2259 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!2260 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!2261 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!2262 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!2263 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!2264 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!2265 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!2266 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!2267 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!2268 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!2269 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!2270 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!2271 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!2272 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!2273 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!2274 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!2275 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!2276 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!2277 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "can_compare_purpose", file: !543, line: 737, baseType: !7, size: 32, elements: !2278)
!2278 = !{!2279, !2280, !2281}
!2279 = !DIEnumerator(name: "ccp_jump", value: 0, isUnsigned: true)
!2280 = !DIEnumerator(name: "ccp_cmov", value: 1, isUnsigned: true)
!2281 = !DIEnumerator(name: "ccp_store_flag", value: 2, isUnsigned: true)
!2282 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !151, line: 4288, baseType: !7, size: 32, elements: !2283)
!2283 = !{!2284, !2285, !2286, !2287, !2288}
!2284 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!2285 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!2286 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!2287 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!2288 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!2289 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "expand_modifier", file: !706, line: 52, baseType: !7, size: 32, elements: !2290)
!2290 = !{!2291, !2292, !2293, !2294, !2295, !2296, !2297}
!2291 = !DIEnumerator(name: "EXPAND_NORMAL", value: 0, isUnsigned: true)
!2292 = !DIEnumerator(name: "EXPAND_STACK_PARM", value: 1, isUnsigned: true)
!2293 = !DIEnumerator(name: "EXPAND_SUM", value: 2, isUnsigned: true)
!2294 = !DIEnumerator(name: "EXPAND_CONST_ADDRESS", value: 3, isUnsigned: true)
!2295 = !DIEnumerator(name: "EXPAND_INITIALIZER", value: 4, isUnsigned: true)
!2296 = !DIEnumerator(name: "EXPAND_WRITE", value: 5, isUnsigned: true)
!2297 = !DIEnumerator(name: "EXPAND_MEMORY", value: 6, isUnsigned: true)
!2298 = !{!2299, !5, !2300, !2301, !2325, !377, !520, !183, !2545, !2422, !2412, !3345, !2375, !3347, !7}
!2299 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2300 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2301 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !2302, line: 50, baseType: !2303)
!2302 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2304, size: 64)
!2304 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !378, line: 240, size: 384, elements: !2305)
!2305 = !{!2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316}
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2304, file: !378, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2304, file: !378, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !2304, file: !378, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2304, file: !378, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !2304, file: !378, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !2304, file: !378, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !2304, file: !378, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2304, file: !378, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !2304, file: !378, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !2304, file: !378, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2304, file: !378, line: 321, baseType: !2317, size: 320, offset: 64)
!2317 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !378, line: 315, size: 320, elements: !2318)
!2318 = !{!2319, !3312, !3314, !3343, !3344}
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2317, file: !378, line: 316, baseType: !2320, size: 64)
!2320 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2321, size: 64, elements: !2340)
!2321 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !378, line: 183, baseType: !2322)
!2322 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !378, line: 166, size: 64, elements: !2323)
!2323 = !{!2324, !2326, !2327, !2331, !2332, !2342, !2343, !2355, !2358, !2421, !3290, !3291, !3302, !3309}
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !2322, file: !378, line: 168, baseType: !2325, size: 32)
!2325 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !2322, file: !378, line: 169, baseType: !7, size: 32)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !2322, file: !378, line: 170, baseType: !2328, size: 64)
!2328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2329, size: 64)
!2329 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2330)
!2330 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !2322, file: !378, line: 171, baseType: !2301, size: 64)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !2322, file: !378, line: 172, baseType: !2333, size: 64)
!2333 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !2302, line: 53, baseType: !2334)
!2334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2335, size: 64)
!2335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !378, line: 359, size: 128, elements: !2336)
!2336 = !{!2337, !2338}
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !2335, file: !378, line: 360, baseType: !2325, size: 32)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !2335, file: !378, line: 361, baseType: !2339, size: 64, offset: 64)
!2339 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2301, size: 64, elements: !2340)
!2340 = !{!2341}
!2341 = !DISubrange(count: 1)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !2322, file: !378, line: 173, baseType: !5, size: 32)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !2322, file: !378, line: 174, baseType: !2344, size: 32)
!2344 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !378, line: 133, baseType: !2345)
!2345 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !378, line: 115, size: 32, elements: !2346)
!2346 = !{!2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354}
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !2345, file: !378, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !2345, file: !378, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !2345, file: !378, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !2345, file: !378, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !2345, file: !378, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !2345, file: !378, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !2345, file: !378, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !2345, file: !378, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !2322, file: !378, line: 175, baseType: !2356, size: 64)
!2356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2357, size: 64)
!2357 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !378, line: 175, flags: DIFlagFwdDecl)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !2322, file: !378, line: 176, baseType: !2359, size: 64)
!2359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2360, size: 64)
!2360 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2361, line: 75, size: 256, elements: !2362)
!2361 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2362 = !{!2363, !2378, !2379, !2380}
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2360, file: !2361, line: 76, baseType: !2364, size: 64)
!2364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2365, size: 64)
!2365 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2361, line: 68, baseType: !2366)
!2366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2361, line: 63, size: 320, elements: !2367)
!2367 = !{!2368, !2370, !2371, !2372}
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2366, file: !2361, line: 64, baseType: !2369, size: 64)
!2369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2366, size: 64)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2366, file: !2361, line: 65, baseType: !2369, size: 64, offset: 64)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2366, file: !2361, line: 66, baseType: !7, size: 32, offset: 128)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2366, file: !2361, line: 67, baseType: !2373, size: 128, offset: 192)
!2373 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2374, size: 128, elements: !2376)
!2374 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2361, line: 29, baseType: !2375)
!2375 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!2376 = !{!2377}
!2377 = !DISubrange(count: 2)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2360, file: !2361, line: 77, baseType: !2364, size: 64, offset: 64)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2360, file: !2361, line: 78, baseType: !7, size: 32, offset: 128)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2360, file: !2361, line: 79, baseType: !2381, size: 64, offset: 192)
!2381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2382, size: 64)
!2382 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2361, line: 49, baseType: !2383)
!2383 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2361, line: 45, size: 832, elements: !2384)
!2384 = !{!2385, !2386, !2387}
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2383, file: !2361, line: 46, baseType: !2369, size: 64)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2383, file: !2361, line: 47, baseType: !2359, size: 64, offset: 64)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2383, file: !2361, line: 48, baseType: !2388, size: 704, offset: 128)
!2388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2389, line: 164, size: 704, elements: !2390)
!2389 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2390 = !{!2391, !2392, !2403, !2404, !2405, !2406, !2407, !2408, !2413, !2417, !2418, !2419, !2420}
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2388, file: !2389, line: 166, baseType: !2299, size: 64)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2388, file: !2389, line: 167, baseType: !2393, size: 64, offset: 64)
!2393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2394, size: 64)
!2394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2389, line: 157, size: 192, elements: !2395)
!2395 = !{!2396, !2398, !2399}
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2394, file: !2389, line: 159, baseType: !2397, size: 64)
!2397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2330, size: 64)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2394, file: !2389, line: 160, baseType: !2393, size: 64, offset: 64)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2394, file: !2389, line: 161, baseType: !2400, size: 32, offset: 128)
!2400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2330, size: 32, elements: !2401)
!2401 = !{!2402}
!2402 = !DISubrange(count: 4)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2388, file: !2389, line: 168, baseType: !2397, size: 64, offset: 128)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2388, file: !2389, line: 169, baseType: !2397, size: 64, offset: 192)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2388, file: !2389, line: 170, baseType: !2397, size: 64, offset: 256)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2388, file: !2389, line: 171, baseType: !2299, size: 64, offset: 320)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2388, file: !2389, line: 172, baseType: !2325, size: 32, offset: 384)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2388, file: !2389, line: 176, baseType: !2409, size: 64, offset: 448)
!2409 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2410, size: 64)
!2410 = !DISubroutineType(types: !2411)
!2411 = !{!2393, !2412, !2299}
!2412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2388, file: !2389, line: 177, baseType: !2414, size: 64, offset: 512)
!2414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2415, size: 64)
!2415 = !DISubroutineType(types: !2416)
!2416 = !{null, !2412, !2393}
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2388, file: !2389, line: 178, baseType: !2412, size: 64, offset: 576)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2388, file: !2389, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2388, file: !2389, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2388, file: !2389, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !2322, file: !378, line: 177, baseType: !2422, size: 64)
!2422 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !2302, line: 56, baseType: !2423)
!2423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2424, size: 64)
!2424 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !151, line: 3371, size: 1792, elements: !2425)
!2425 = !{!2426, !2459, !2465, !2476, !2495, !2506, !2511, !2518, !2524, !2538, !2550, !2588, !2593, !2621, !2629, !2630, !2635, !2644, !2650, !2655, !2659, !2663, !2914, !2963, !2969, !2976, !2983, !3009, !3034, !3051, !3063, !3085, !3100, !3272}
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2424, file: !151, line: 3372, baseType: !2427, size: 64)
!2427 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !151, line: 360, size: 64, elements: !2428)
!2428 = !{!2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458}
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2427, file: !151, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !2427, file: !151, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !2427, file: !151, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !2427, file: !151, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !2427, file: !151, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !2427, file: !151, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !2427, file: !151, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !2427, file: !151, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !2427, file: !151, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !2427, file: !151, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !2427, file: !151, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !2427, file: !151, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !2427, file: !151, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !2427, file: !151, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !2427, file: !151, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !2427, file: !151, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !2427, file: !151, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !2427, file: !151, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2427, file: !151, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2427, file: !151, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2427, file: !151, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2427, file: !151, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2427, file: !151, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2427, file: !151, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2427, file: !151, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2427, file: !151, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !2427, file: !151, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !2427, file: !151, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !2427, file: !151, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !2427, file: !151, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2424, file: !151, line: 3373, baseType: !2460, size: 192)
!2460 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !151, line: 402, size: 192, elements: !2461)
!2461 = !{!2462, !2463, !2464}
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2460, file: !151, line: 403, baseType: !2427, size: 64)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !2460, file: !151, line: 404, baseType: !2422, size: 64, offset: 64)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2460, file: !151, line: 405, baseType: !2422, size: 64, offset: 128)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2424, file: !151, line: 3374, baseType: !2466, size: 320)
!2466 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !151, line: 1384, size: 320, elements: !2467)
!2467 = !{!2468, !2469}
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2466, file: !151, line: 1385, baseType: !2460, size: 192)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2466, file: !151, line: 1386, baseType: !2470, size: 128, offset: 192)
!2470 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !2471, line: 58, baseType: !2472)
!2471 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2472 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2471, line: 54, size: 128, elements: !2473)
!2473 = !{!2474, !2475}
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !2472, file: !2471, line: 56, baseType: !2375, size: 64)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !2472, file: !2471, line: 57, baseType: !2299, size: 64, offset: 64)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !2424, file: !151, line: 3375, baseType: !2477, size: 256)
!2477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !151, line: 1397, size: 256, elements: !2478)
!2478 = !{!2479, !2480}
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2477, file: !151, line: 1398, baseType: !2460, size: 192)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !2477, file: !151, line: 1399, baseType: !2481, size: 64, offset: 192)
!2481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2482, size: 64)
!2482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !2483, line: 52, size: 256, elements: !2484)
!2483 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2484 = !{!2485, !2486, !2487, !2488, !2489, !2490, !2491}
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !2482, file: !2483, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !2482, file: !2483, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !2482, file: !2483, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !2482, file: !2483, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2482, file: !2483, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !2482, file: !2483, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !2482, file: !2483, line: 62, baseType: !2492, size: 192, offset: 64)
!2492 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2375, size: 192, elements: !2493)
!2493 = !{!2494}
!2494 = !DISubrange(count: 3)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !2424, file: !151, line: 3376, baseType: !2496, size: 256)
!2496 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !151, line: 1408, size: 256, elements: !2497)
!2497 = !{!2498, !2499}
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2496, file: !151, line: 1409, baseType: !2460, size: 192)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !2496, file: !151, line: 1410, baseType: !2500, size: 64, offset: 192)
!2500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2501, size: 64)
!2501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !2502, line: 27, size: 192, elements: !2503)
!2502 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2503 = !{!2504, !2505}
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2501, file: !2502, line: 29, baseType: !2470, size: 128)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2501, file: !2502, line: 30, baseType: !5, size: 32, offset: 128)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !2424, file: !151, line: 3377, baseType: !2507, size: 256)
!2507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !151, line: 1437, size: 256, elements: !2508)
!2508 = !{!2509, !2510}
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2507, file: !151, line: 1438, baseType: !2460, size: 192)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2507, file: !151, line: 1439, baseType: !2422, size: 64, offset: 192)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2424, file: !151, line: 3378, baseType: !2512, size: 256)
!2512 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !151, line: 1418, size: 256, elements: !2513)
!2513 = !{!2514, !2515, !2516}
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2512, file: !151, line: 1419, baseType: !2460, size: 192)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2512, file: !151, line: 1420, baseType: !2325, size: 32, offset: 192)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2512, file: !151, line: 1421, baseType: !2517, size: 8, offset: 224)
!2517 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2330, size: 8, elements: !2340)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !2424, file: !151, line: 3379, baseType: !2519, size: 320)
!2519 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !151, line: 1428, size: 320, elements: !2520)
!2520 = !{!2521, !2522, !2523}
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2519, file: !151, line: 1429, baseType: !2460, size: 192)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !2519, file: !151, line: 1430, baseType: !2422, size: 64, offset: 192)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !2519, file: !151, line: 1431, baseType: !2422, size: 64, offset: 256)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !2424, file: !151, line: 3380, baseType: !2525, size: 320)
!2525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !151, line: 1460, size: 320, elements: !2526)
!2526 = !{!2527, !2528}
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2525, file: !151, line: 1461, baseType: !2460, size: 192)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2525, file: !151, line: 1462, baseType: !2529, size: 128, offset: 192)
!2529 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !2530, line: 31, size: 128, elements: !2531)
!2530 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2531 = !{!2532, !2536, !2537}
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2529, file: !2530, line: 32, baseType: !2533, size: 64)
!2533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2534, size: 64)
!2534 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2535)
!2535 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2529, file: !2530, line: 33, baseType: !7, size: 32, offset: 64)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !2529, file: !2530, line: 34, baseType: !7, size: 32, offset: 96)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !2424, file: !151, line: 3381, baseType: !2539, size: 384)
!2539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !151, line: 2507, size: 384, elements: !2540)
!2540 = !{!2541, !2542, !2547, !2548, !2549}
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2539, file: !151, line: 2508, baseType: !2460, size: 192)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2539, file: !151, line: 2509, baseType: !2543, size: 32, offset: 192)
!2543 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !2544, line: 58, baseType: !2545)
!2544 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2545 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !2546, line: 44, baseType: !7)
!2546 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2539, file: !151, line: 2510, baseType: !7, size: 32, offset: 224)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2539, file: !151, line: 2511, baseType: !2422, size: 64, offset: 256)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2539, file: !151, line: 2512, baseType: !2422, size: 64, offset: 320)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !2424, file: !151, line: 3382, baseType: !2551, size: 896)
!2551 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !151, line: 2652, size: 896, elements: !2552)
!2552 = !{!2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585}
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2551, file: !151, line: 2653, baseType: !2539, size: 384)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2551, file: !151, line: 2654, baseType: !2422, size: 64, offset: 384)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2551, file: !151, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !2551, file: !151, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !2551, file: !151, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !2551, file: !151, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2551, file: !151, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !2551, file: !151, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !2551, file: !151, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !2551, file: !151, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2551, file: !151, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2551, file: !151, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2551, file: !151, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2551, file: !151, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2551, file: !151, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2551, file: !151, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2551, file: !151, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !2551, file: !151, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !2551, file: !151, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !2551, file: !151, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !2551, file: !151, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !2551, file: !151, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !2551, file: !151, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !2551, file: !151, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !2551, file: !151, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !2551, file: !151, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !2551, file: !151, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2551, file: !151, line: 2703, baseType: !7, size: 32, offset: 512)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2551, file: !151, line: 2705, baseType: !2422, size: 64, offset: 576)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2551, file: !151, line: 2706, baseType: !2422, size: 64, offset: 640)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2551, file: !151, line: 2707, baseType: !2422, size: 64, offset: 704)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2551, file: !151, line: 2708, baseType: !2422, size: 64, offset: 768)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2551, file: !151, line: 2711, baseType: !2586, size: 64, offset: 832)
!2586 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2587, size: 64)
!2587 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !151, line: 2711, flags: DIFlagFwdDecl)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !2424, file: !151, line: 3383, baseType: !2589, size: 960)
!2589 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !151, line: 2756, size: 960, elements: !2590)
!2590 = !{!2591, !2592}
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2589, file: !151, line: 2757, baseType: !2551, size: 896)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2589, file: !151, line: 2758, baseType: !2301, size: 64, offset: 896)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !2424, file: !151, line: 3384, baseType: !2594, size: 1472)
!2594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !151, line: 3114, size: 1472, elements: !2595)
!2595 = !{!2596, !2617, !2618, !2619, !2620}
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2594, file: !151, line: 3115, baseType: !2597, size: 1216)
!2597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !151, line: 2984, size: 1216, elements: !2598)
!2598 = !{!2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616}
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2597, file: !151, line: 2985, baseType: !2589, size: 960)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2597, file: !151, line: 2986, baseType: !2422, size: 64, offset: 960)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2597, file: !151, line: 2987, baseType: !2422, size: 64, offset: 1024)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2597, file: !151, line: 2988, baseType: !2422, size: 64, offset: 1088)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2597, file: !151, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2597, file: !151, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2597, file: !151, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2597, file: !151, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2597, file: !151, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2597, file: !151, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2597, file: !151, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2597, file: !151, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2597, file: !151, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2597, file: !151, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2597, file: !151, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2597, file: !151, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2597, file: !151, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2597, file: !151, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2594, file: !151, line: 3117, baseType: !2422, size: 64, offset: 1216)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2594, file: !151, line: 3119, baseType: !2422, size: 64, offset: 1280)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2594, file: !151, line: 3121, baseType: !2422, size: 64, offset: 1344)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2594, file: !151, line: 3123, baseType: !2422, size: 64, offset: 1408)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !2424, file: !151, line: 3385, baseType: !2622, size: 1088)
!2622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !151, line: 2874, size: 1088, elements: !2623)
!2623 = !{!2624, !2625, !2626}
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2622, file: !151, line: 2875, baseType: !2589, size: 960)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2622, file: !151, line: 2876, baseType: !2301, size: 64, offset: 960)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2622, file: !151, line: 2877, baseType: !2627, size: 64, offset: 1024)
!2627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2628, size: 64)
!2628 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !151, line: 2856, flags: DIFlagFwdDecl)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !2424, file: !151, line: 3386, baseType: !2597, size: 1216)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !2424, file: !151, line: 3387, baseType: !2631, size: 1280)
!2631 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !151, line: 3093, size: 1280, elements: !2632)
!2632 = !{!2633, !2634}
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2631, file: !151, line: 3094, baseType: !2597, size: 1216)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2631, file: !151, line: 3095, baseType: !2627, size: 64, offset: 1216)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !2424, file: !151, line: 3388, baseType: !2636, size: 1216)
!2636 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !151, line: 2824, size: 1216, elements: !2637)
!2637 = !{!2638, !2639, !2640, !2641, !2642, !2643}
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2636, file: !151, line: 2825, baseType: !2551, size: 896)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2636, file: !151, line: 2827, baseType: !2422, size: 64, offset: 896)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2636, file: !151, line: 2828, baseType: !2422, size: 64, offset: 960)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2636, file: !151, line: 2829, baseType: !2422, size: 64, offset: 1024)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2636, file: !151, line: 2830, baseType: !2422, size: 64, offset: 1088)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2636, file: !151, line: 2831, baseType: !2422, size: 64, offset: 1152)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !2424, file: !151, line: 3389, baseType: !2645, size: 1024)
!2645 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !151, line: 2850, size: 1024, elements: !2646)
!2646 = !{!2647, !2648, !2649}
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2645, file: !151, line: 2851, baseType: !2589, size: 960)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2645, file: !151, line: 2852, baseType: !2325, size: 32, offset: 960)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2645, file: !151, line: 2853, baseType: !2325, size: 32, offset: 992)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !2424, file: !151, line: 3390, baseType: !2651, size: 1024)
!2651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !151, line: 2857, size: 1024, elements: !2652)
!2652 = !{!2653, !2654}
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2651, file: !151, line: 2858, baseType: !2589, size: 960)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2651, file: !151, line: 2859, baseType: !2627, size: 64, offset: 960)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !2424, file: !151, line: 3391, baseType: !2656, size: 960)
!2656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !151, line: 2862, size: 960, elements: !2657)
!2657 = !{!2658}
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2656, file: !151, line: 2863, baseType: !2589, size: 960)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !2424, file: !151, line: 3392, baseType: !2660, size: 1472)
!2660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !151, line: 3304, size: 1472, elements: !2661)
!2661 = !{!2662}
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2660, file: !151, line: 3305, baseType: !2594, size: 1472)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2424, file: !151, line: 3393, baseType: !2664, size: 1792)
!2664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !151, line: 3248, size: 1792, elements: !2665)
!2665 = !{!2666, !2667, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913}
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2664, file: !151, line: 3249, baseType: !2594, size: 1472)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2664, file: !151, line: 3251, baseType: !2668, size: 64, offset: 1472)
!2668 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2669, size: 64)
!2669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2670, line: 463, size: 1152, elements: !2671)
!2670 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2671 = !{!2672, !2675, !2779, !2780, !2783, !2786, !2838, !2839, !2840, !2841, !2842, !2866, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892}
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2669, file: !2670, line: 464, baseType: !2673, size: 64)
!2673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2674, size: 64)
!2674 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2670, line: 464, flags: DIFlagFwdDecl)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2669, file: !2670, line: 467, baseType: !2676, size: 64, offset: 64)
!2676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2677, size: 64)
!2677 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !2678)
!2678 = !{!2679, !2754, !2755, !2768, !2769, !2770, !2771, !2772, !2773, !2775, !2777, !2778}
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2677, file: !135, line: 377, baseType: !2680, size: 64)
!2680 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !2302, line: 111, baseType: !2681)
!2681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2682, size: 64)
!2682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !2683)
!2683 = !{!2684, !2719, !2720, !2721, !2724, !2728, !2729, !2730, !2748, !2749, !2750, !2751, !2752, !2753}
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2682, file: !135, line: 219, baseType: !2685, size: 64)
!2685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2686, size: 64)
!2686 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !2687)
!2687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !2688)
!2688 = !{!2689}
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2687, file: !135, line: 151, baseType: !2690, size: 128)
!2690 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !2691)
!2691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !2692)
!2692 = !{!2693, !2694, !2695}
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2691, file: !135, line: 150, baseType: !7, size: 32)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2691, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2691, file: !135, line: 150, baseType: !2696, size: 64, offset: 64)
!2696 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2697, size: 64, elements: !2340)
!2697 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !2302, line: 108, baseType: !2698)
!2698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2699, size: 64)
!2699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !2700)
!2700 = !{!2701, !2702, !2703, !2711, !2712, !2713, !2714, !2715, !2716, !2717}
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2699, file: !135, line: 124, baseType: !2681, size: 64)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2699, file: !135, line: 125, baseType: !2681, size: 64, offset: 64)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2699, file: !135, line: 131, baseType: !2704, size: 64, offset: 128)
!2704 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !2705)
!2705 = !{!2706, !2710}
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2704, file: !135, line: 129, baseType: !2707, size: 64)
!2707 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !2302, line: 66, baseType: !2708)
!2708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2709, size: 64)
!2709 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !2302, line: 65, flags: DIFlagFwdDecl)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2704, file: !135, line: 130, baseType: !2301, size: 64)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2699, file: !135, line: 134, baseType: !2412, size: 64, offset: 192)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2699, file: !135, line: 137, baseType: !2422, size: 64, offset: 256)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2699, file: !135, line: 138, baseType: !2543, size: 32, offset: 320)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2699, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2699, file: !135, line: 144, baseType: !2325, size: 32, offset: 384)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2699, file: !135, line: 145, baseType: !2325, size: 32, offset: 416)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2699, file: !135, line: 146, baseType: !2718, size: 64, offset: 448)
!2718 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !2299)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2682, file: !135, line: 220, baseType: !2685, size: 64, offset: 64)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2682, file: !135, line: 223, baseType: !2412, size: 64, offset: 128)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2682, file: !135, line: 226, baseType: !2722, size: 64, offset: 192)
!2722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2723, size: 64)
!2723 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !135, line: 185, flags: DIFlagFwdDecl)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2682, file: !135, line: 229, baseType: !2725, size: 128, offset: 256)
!2725 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2726, size: 128, elements: !2376)
!2726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2727, size: 64)
!2727 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2682, file: !135, line: 232, baseType: !2681, size: 64, offset: 384)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2682, file: !135, line: 233, baseType: !2681, size: 64, offset: 448)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2682, file: !135, line: 238, baseType: !2731, size: 64, offset: 512)
!2731 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !2732)
!2732 = !{!2733, !2739}
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2731, file: !135, line: 236, baseType: !2734, size: 64)
!2734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2735, size: 64)
!2735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !2736)
!2736 = !{!2737, !2738}
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2735, file: !135, line: 275, baseType: !2707, size: 64)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2735, file: !135, line: 278, baseType: !2707, size: 64, offset: 64)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2731, file: !135, line: 237, baseType: !2740, size: 64)
!2740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2741, size: 64)
!2741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !2742)
!2742 = !{!2743, !2744, !2745, !2746, !2747}
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2741, file: !135, line: 261, baseType: !2301, size: 64)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2741, file: !135, line: 262, baseType: !2301, size: 64, offset: 64)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2741, file: !135, line: 266, baseType: !2301, size: 64, offset: 128)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2741, file: !135, line: 267, baseType: !2301, size: 64, offset: 192)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2741, file: !135, line: 270, baseType: !2325, size: 32, offset: 256)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2682, file: !135, line: 241, baseType: !2718, size: 64, offset: 576)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2682, file: !135, line: 244, baseType: !2325, size: 32, offset: 640)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2682, file: !135, line: 247, baseType: !2325, size: 32, offset: 672)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2682, file: !135, line: 250, baseType: !2325, size: 32, offset: 704)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2682, file: !135, line: 253, baseType: !2325, size: 32, offset: 736)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2682, file: !135, line: 256, baseType: !2325, size: 32, offset: 768)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2677, file: !135, line: 378, baseType: !2680, size: 64, offset: 64)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2677, file: !135, line: 381, baseType: !2756, size: 64, offset: 128)
!2756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2757, size: 64)
!2757 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !2758)
!2758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !2759)
!2759 = !{!2760}
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2758, file: !135, line: 282, baseType: !2761, size: 128)
!2761 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !2762)
!2762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !2763)
!2763 = !{!2764, !2765, !2766}
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2762, file: !135, line: 281, baseType: !7, size: 32)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2762, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2762, file: !135, line: 281, baseType: !2767, size: 64, offset: 64)
!2767 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2680, size: 64, elements: !2340)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2677, file: !135, line: 384, baseType: !2325, size: 32, offset: 192)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2677, file: !135, line: 387, baseType: !2325, size: 32, offset: 224)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2677, file: !135, line: 390, baseType: !2325, size: 32, offset: 256)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2677, file: !135, line: 394, baseType: !2756, size: 64, offset: 320)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2677, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2677, file: !135, line: 399, baseType: !2774, size: 64, offset: 416)
!2774 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !2376)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2677, file: !135, line: 402, baseType: !2776, size: 64, offset: 480)
!2776 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !2376)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2677, file: !135, line: 406, baseType: !2325, size: 32, offset: 544)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2677, file: !135, line: 409, baseType: !2325, size: 32, offset: 576)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2669, file: !2670, line: 470, baseType: !2708, size: 64, offset: 128)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2669, file: !2670, line: 473, baseType: !2781, size: 64, offset: 192)
!2781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2782, size: 64)
!2782 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2670, line: 166, flags: DIFlagFwdDecl)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2669, file: !2670, line: 476, baseType: !2784, size: 64, offset: 256)
!2784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2785, size: 64)
!2785 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2670, line: 476, flags: DIFlagFwdDecl)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2669, file: !2670, line: 479, baseType: !2787, size: 64, offset: 320)
!2787 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2788, line: 144, baseType: !2789)
!2788 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2790, size: 64)
!2790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2788, line: 100, size: 896, elements: !2791)
!2791 = !{!2792, !2800, !2805, !2810, !2812, !2815, !2816, !2817, !2818, !2819, !2824, !2826, !2827, !2832, !2837}
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2790, file: !2788, line: 102, baseType: !2793, size: 64)
!2793 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2788, line: 52, baseType: !2794)
!2794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2795, size: 64)
!2795 = !DISubroutineType(types: !2796)
!2796 = !{!2797, !2798}
!2797 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2788, line: 47, baseType: !7)
!2798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2799, size: 64)
!2799 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2790, file: !2788, line: 105, baseType: !2801, size: 64, offset: 64)
!2801 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2788, line: 59, baseType: !2802)
!2802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2803, size: 64)
!2803 = !DISubroutineType(types: !2804)
!2804 = !{!2325, !2798, !2798}
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2790, file: !2788, line: 108, baseType: !2806, size: 64, offset: 128)
!2806 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2788, line: 63, baseType: !2807)
!2807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2808, size: 64)
!2808 = !DISubroutineType(types: !2809)
!2809 = !{null, !2412}
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2790, file: !2788, line: 111, baseType: !2811, size: 64, offset: 192)
!2811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2412, size: 64)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2790, file: !2788, line: 114, baseType: !2813, size: 64, offset: 256)
!2813 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2814, line: 46, baseType: !2375)
!2814 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2790, file: !2788, line: 117, baseType: !2813, size: 64, offset: 320)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2790, file: !2788, line: 120, baseType: !2813, size: 64, offset: 384)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2790, file: !2788, line: 124, baseType: !7, size: 32, offset: 448)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2790, file: !2788, line: 128, baseType: !7, size: 32, offset: 480)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2790, file: !2788, line: 131, baseType: !2820, size: 64, offset: 512)
!2820 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2788, line: 75, baseType: !2821)
!2821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2822, size: 64)
!2822 = !DISubroutineType(types: !2823)
!2823 = !{!2412, !2813, !2813}
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2790, file: !2788, line: 132, baseType: !2825, size: 64, offset: 576)
!2825 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2788, line: 78, baseType: !2807)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2790, file: !2788, line: 135, baseType: !2412, size: 64, offset: 640)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2790, file: !2788, line: 136, baseType: !2828, size: 64, offset: 704)
!2828 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2788, line: 82, baseType: !2829)
!2829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2830, size: 64)
!2830 = !DISubroutineType(types: !2831)
!2831 = !{!2412, !2412, !2813, !2813}
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2790, file: !2788, line: 137, baseType: !2833, size: 64, offset: 768)
!2833 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2788, line: 83, baseType: !2834)
!2834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2835, size: 64)
!2835 = !DISubroutineType(types: !2836)
!2836 = !{null, !2412, !2412}
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2790, file: !2788, line: 141, baseType: !7, size: 32, offset: 832)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2669, file: !2670, line: 484, baseType: !2422, size: 64, offset: 384)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2669, file: !2670, line: 488, baseType: !2422, size: 64, offset: 448)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2669, file: !2670, line: 493, baseType: !2422, size: 64, offset: 512)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2669, file: !2670, line: 496, baseType: !2422, size: 64, offset: 576)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2669, file: !2670, line: 501, baseType: !2843, size: 64, offset: 640)
!2843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2844, size: 64)
!2844 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !146, line: 2355, size: 576, elements: !2845)
!2845 = !{!2846, !2849, !2850, !2851, !2852, !2854, !2855, !2860, !2861, !2862, !2863, !2864, !2865}
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2844, file: !146, line: 2356, baseType: !2847, size: 64)
!2847 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2848, size: 64)
!2848 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !146, line: 2356, flags: DIFlagFwdDecl)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2844, file: !146, line: 2357, baseType: !2328, size: 64, offset: 64)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2844, file: !146, line: 2358, baseType: !2325, size: 32, offset: 128)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2844, file: !146, line: 2359, baseType: !2325, size: 32, offset: 160)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2844, file: !146, line: 2360, baseType: !2853, size: 128, offset: 192)
!2853 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2325, size: 128, elements: !2401)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2844, file: !146, line: 2364, baseType: !2325, size: 32, offset: 320)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2844, file: !146, line: 2367, baseType: !2856, size: 128, offset: 384)
!2856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !146, line: 2349, size: 128, elements: !2857)
!2857 = !{!2858, !2859}
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2856, file: !146, line: 2351, baseType: !2301, size: 64)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2856, file: !146, line: 2352, baseType: !2299, size: 64, offset: 64)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2844, file: !146, line: 2371, baseType: !145, size: 32, offset: 512)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2844, file: !146, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2844, file: !146, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2844, file: !146, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2844, file: !146, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2844, file: !146, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2669, file: !2670, line: 504, baseType: !2867, size: 64, offset: 704)
!2867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2868, size: 64)
!2868 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2670, line: 504, flags: DIFlagFwdDecl)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2669, file: !2670, line: 507, baseType: !2787, size: 64, offset: 768)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2669, file: !2670, line: 510, baseType: !2325, size: 32, offset: 832)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2669, file: !2670, line: 513, baseType: !2325, size: 32, offset: 864)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2669, file: !2670, line: 516, baseType: !2543, size: 32, offset: 896)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2669, file: !2670, line: 519, baseType: !2543, size: 32, offset: 928)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2669, file: !2670, line: 522, baseType: !7, size: 32, offset: 960)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2669, file: !2670, line: 523, baseType: !7, size: 32, offset: 992)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2669, file: !2670, line: 528, baseType: !2328, size: 64, offset: 1024)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2669, file: !2670, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2669, file: !2670, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2669, file: !2670, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2669, file: !2670, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2669, file: !2670, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2669, file: !2670, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2669, file: !2670, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2669, file: !2670, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2669, file: !2670, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2669, file: !2670, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2669, file: !2670, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2669, file: !2670, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2669, file: !2670, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2669, file: !2670, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2669, file: !2670, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2669, file: !2670, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2664, file: !151, line: 3254, baseType: !2422, size: 64, offset: 1536)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2664, file: !151, line: 3257, baseType: !2422, size: 64, offset: 1600)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2664, file: !151, line: 3258, baseType: !2422, size: 64, offset: 1664)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2664, file: !151, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2664, file: !151, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2664, file: !151, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2664, file: !151, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2664, file: !151, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2664, file: !151, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2664, file: !151, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2664, file: !151, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2664, file: !151, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2664, file: !151, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2664, file: !151, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2664, file: !151, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2664, file: !151, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2664, file: !151, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2664, file: !151, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2664, file: !151, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2664, file: !151, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2664, file: !151, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2424, file: !151, line: 3394, baseType: !2915, size: 1344)
!2915 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !151, line: 2279, size: 1344, elements: !2916)
!2916 = !{!2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2942, !2943, !2944, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960}
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2915, file: !151, line: 2280, baseType: !2460, size: 192)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2915, file: !151, line: 2281, baseType: !2422, size: 64, offset: 192)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2915, file: !151, line: 2282, baseType: !2422, size: 64, offset: 256)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2915, file: !151, line: 2283, baseType: !2422, size: 64, offset: 320)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2915, file: !151, line: 2284, baseType: !2422, size: 64, offset: 384)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2915, file: !151, line: 2285, baseType: !7, size: 32, offset: 448)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2915, file: !151, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2915, file: !151, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2915, file: !151, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2915, file: !151, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2915, file: !151, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2915, file: !151, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2915, file: !151, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2915, file: !151, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2915, file: !151, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2915, file: !151, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2915, file: !151, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2915, file: !151, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2915, file: !151, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2915, file: !151, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2915, file: !151, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2915, file: !151, line: 2305, baseType: !7, size: 32, offset: 512)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2915, file: !151, line: 2306, baseType: !2940, size: 32, offset: 544)
!2940 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2941, line: 31, baseType: !2325)
!2941 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2915, file: !151, line: 2307, baseType: !2422, size: 64, offset: 576)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2915, file: !151, line: 2308, baseType: !2422, size: 64, offset: 640)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2915, file: !151, line: 2314, baseType: !2945, size: 64, offset: 704)
!2945 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !151, line: 2309, size: 64, elements: !2946)
!2946 = !{!2947, !2948, !2949}
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2945, file: !151, line: 2310, baseType: !2325, size: 32)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2945, file: !151, line: 2311, baseType: !2328, size: 64)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2945, file: !151, line: 2312, baseType: !2950, size: 64)
!2950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2951, size: 64)
!2951 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !151, line: 2277, flags: DIFlagFwdDecl)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2915, file: !151, line: 2315, baseType: !2422, size: 64, offset: 768)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2915, file: !151, line: 2316, baseType: !2422, size: 64, offset: 832)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2915, file: !151, line: 2317, baseType: !2422, size: 64, offset: 896)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2915, file: !151, line: 2318, baseType: !2422, size: 64, offset: 960)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2915, file: !151, line: 2319, baseType: !2422, size: 64, offset: 1024)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2915, file: !151, line: 2320, baseType: !2422, size: 64, offset: 1088)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2915, file: !151, line: 2321, baseType: !2422, size: 64, offset: 1152)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2915, file: !151, line: 2322, baseType: !2422, size: 64, offset: 1216)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2915, file: !151, line: 2324, baseType: !2961, size: 64, offset: 1280)
!2961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2962, size: 64)
!2962 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !151, line: 2324, flags: DIFlagFwdDecl)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2424, file: !151, line: 3395, baseType: !2964, size: 320)
!2964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !151, line: 1469, size: 320, elements: !2965)
!2965 = !{!2966, !2967, !2968}
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2964, file: !151, line: 1470, baseType: !2460, size: 192)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2964, file: !151, line: 1471, baseType: !2422, size: 64, offset: 192)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2964, file: !151, line: 1472, baseType: !2422, size: 64, offset: 256)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2424, file: !151, line: 3396, baseType: !2970, size: 320)
!2970 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !151, line: 1482, size: 320, elements: !2971)
!2971 = !{!2972, !2973, !2974}
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2970, file: !151, line: 1483, baseType: !2460, size: 192)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2970, file: !151, line: 1484, baseType: !2325, size: 32, offset: 192)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2970, file: !151, line: 1485, baseType: !2975, size: 64, offset: 256)
!2975 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2422, size: 64, elements: !2340)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !2424, file: !151, line: 3397, baseType: !2977, size: 384)
!2977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !151, line: 1829, size: 384, elements: !2978)
!2978 = !{!2979, !2980, !2981, !2982}
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2977, file: !151, line: 1830, baseType: !2460, size: 192)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2977, file: !151, line: 1831, baseType: !2543, size: 32, offset: 192)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2977, file: !151, line: 1832, baseType: !2422, size: 64, offset: 256)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2977, file: !151, line: 1835, baseType: !2975, size: 64, offset: 320)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2424, file: !151, line: 3398, baseType: !2984, size: 704)
!2984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !151, line: 1898, size: 704, elements: !2985)
!2985 = !{!2986, !2987, !2988, !2992, !2993, !2996}
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2984, file: !151, line: 1899, baseType: !2460, size: 192)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2984, file: !151, line: 1902, baseType: !2422, size: 64, offset: 192)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2984, file: !151, line: 1905, baseType: !2989, size: 64, offset: 256)
!2989 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !2302, line: 58, baseType: !2990)
!2990 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2991, size: 64)
!2991 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !2302, line: 57, flags: DIFlagFwdDecl)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2984, file: !151, line: 1908, baseType: !7, size: 32, offset: 320)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2984, file: !151, line: 1911, baseType: !2994, size: 64, offset: 384)
!2994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2995, size: 64)
!2995 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !151, line: 1876, flags: DIFlagFwdDecl)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2984, file: !151, line: 1914, baseType: !2997, size: 256, offset: 448)
!2997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !151, line: 1883, size: 256, elements: !2998)
!2998 = !{!2999, !3001, !3002, !3007}
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2997, file: !151, line: 1884, baseType: !3000, size: 64)
!3000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2997, size: 64)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2997, file: !151, line: 1885, baseType: !3000, size: 64, offset: 64)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2997, file: !151, line: 1891, baseType: !3003, size: 64, offset: 128)
!3003 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2997, file: !151, line: 1891, size: 64, elements: !3004)
!3004 = !{!3005, !3006}
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3003, file: !151, line: 1891, baseType: !2989, size: 64)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !3003, file: !151, line: 1891, baseType: !2422, size: 64)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2997, file: !151, line: 1892, baseType: !3008, size: 64, offset: 192)
!3008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2422, size: 64)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2424, file: !151, line: 3399, baseType: !3010, size: 704)
!3010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !151, line: 2008, size: 704, elements: !3011)
!3011 = !{!3012, !3013, !3014, !3015, !3016, !3017, !3029, !3030, !3031, !3032, !3033}
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3010, file: !151, line: 2009, baseType: !2460, size: 192)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3010, file: !151, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !3010, file: !151, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3010, file: !151, line: 2014, baseType: !2543, size: 32, offset: 224)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3010, file: !151, line: 2016, baseType: !2422, size: 64, offset: 256)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !3010, file: !151, line: 2017, baseType: !3018, size: 64, offset: 320)
!3018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3019, size: 64)
!3019 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !151, line: 183, baseType: !3020)
!3020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !151, line: 183, size: 128, elements: !3021)
!3021 = !{!3022}
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3020, file: !151, line: 183, baseType: !3023, size: 128)
!3023 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !151, line: 182, baseType: !3024)
!3024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !151, line: 182, size: 128, elements: !3025)
!3025 = !{!3026, !3027, !3028}
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3024, file: !151, line: 182, baseType: !7, size: 32)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3024, file: !151, line: 182, baseType: !7, size: 32, offset: 32)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3024, file: !151, line: 182, baseType: !2975, size: 64, offset: 64)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !3010, file: !151, line: 2019, baseType: !2422, size: 64, offset: 384)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !3010, file: !151, line: 2020, baseType: !2422, size: 64, offset: 448)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3010, file: !151, line: 2021, baseType: !2422, size: 64, offset: 512)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !3010, file: !151, line: 2022, baseType: !2422, size: 64, offset: 576)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !3010, file: !151, line: 2023, baseType: !2422, size: 64, offset: 640)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2424, file: !151, line: 3400, baseType: !3035, size: 832)
!3035 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !151, line: 2430, size: 832, elements: !3036)
!3036 = !{!3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046}
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3035, file: !151, line: 2431, baseType: !2460, size: 192)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3035, file: !151, line: 2433, baseType: !2422, size: 64, offset: 192)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !3035, file: !151, line: 2434, baseType: !2422, size: 64, offset: 256)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !3035, file: !151, line: 2435, baseType: !2422, size: 64, offset: 320)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !3035, file: !151, line: 2436, baseType: !2422, size: 64, offset: 384)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !3035, file: !151, line: 2437, baseType: !3018, size: 64, offset: 448)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !3035, file: !151, line: 2438, baseType: !2422, size: 64, offset: 512)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !3035, file: !151, line: 2440, baseType: !2422, size: 64, offset: 576)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !3035, file: !151, line: 2441, baseType: !2422, size: 64, offset: 640)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !3035, file: !151, line: 2443, baseType: !3047, size: 128, offset: 704)
!3047 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !151, line: 182, baseType: !3048)
!3048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !151, line: 182, size: 128, elements: !3049)
!3049 = !{!3050}
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3048, file: !151, line: 182, baseType: !3023, size: 128)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !2424, file: !151, line: 3401, baseType: !3052, size: 320)
!3052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !151, line: 3327, size: 320, elements: !3053)
!3053 = !{!3054, !3055, !3062}
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3052, file: !151, line: 3329, baseType: !2460, size: 192)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !3052, file: !151, line: 3330, baseType: !3056, size: 64, offset: 192)
!3056 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3057, size: 64)
!3057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !151, line: 3320, size: 192, elements: !3058)
!3058 = !{!3059, !3060, !3061}
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3057, file: !151, line: 3322, baseType: !3056, size: 64)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3057, file: !151, line: 3323, baseType: !3056, size: 64, offset: 64)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3057, file: !151, line: 3324, baseType: !2422, size: 64, offset: 128)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !3052, file: !151, line: 3331, baseType: !3056, size: 64, offset: 256)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !2424, file: !151, line: 3402, baseType: !3064, size: 256)
!3064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !151, line: 1540, size: 256, elements: !3065)
!3065 = !{!3066, !3067}
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3064, file: !151, line: 1541, baseType: !2460, size: 192)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !3064, file: !151, line: 1542, baseType: !3068, size: 64, offset: 192)
!3068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3069, size: 64)
!3069 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !151, line: 1538, baseType: !3070)
!3070 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !151, line: 1538, size: 192, elements: !3071)
!3071 = !{!3072}
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3070, file: !151, line: 1538, baseType: !3073, size: 192)
!3073 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !151, line: 1537, baseType: !3074)
!3074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !151, line: 1537, size: 192, elements: !3075)
!3075 = !{!3076, !3077, !3078}
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3074, file: !151, line: 1537, baseType: !7, size: 32)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3074, file: !151, line: 1537, baseType: !7, size: 32, offset: 32)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3074, file: !151, line: 1537, baseType: !3079, size: 128, offset: 64)
!3079 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3080, size: 128, elements: !2340)
!3080 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !151, line: 1535, baseType: !3081)
!3081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !151, line: 1532, size: 128, elements: !3082)
!3082 = !{!3083, !3084}
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3081, file: !151, line: 1533, baseType: !2422, size: 64)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3081, file: !151, line: 1534, baseType: !2422, size: 64, offset: 64)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !2424, file: !151, line: 3403, baseType: !3086, size: 512)
!3086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !151, line: 1938, size: 512, elements: !3087)
!3087 = !{!3088, !3089, !3090, !3091, !3097, !3098, !3099}
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3086, file: !151, line: 1939, baseType: !2460, size: 192)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3086, file: !151, line: 1940, baseType: !2543, size: 32, offset: 192)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3086, file: !151, line: 1941, baseType: !150, size: 32, offset: 224)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3086, file: !151, line: 1946, baseType: !3092, size: 32, offset: 256)
!3092 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !151, line: 1942, size: 32, elements: !3093)
!3093 = !{!3094, !3095, !3096}
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !3092, file: !151, line: 1943, baseType: !169, size: 32)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !3092, file: !151, line: 1944, baseType: !176, size: 32)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !3092, file: !151, line: 1945, baseType: !183, size: 32)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !3086, file: !151, line: 1950, baseType: !2707, size: 64, offset: 320)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !3086, file: !151, line: 1951, baseType: !2707, size: 64, offset: 384)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3086, file: !151, line: 1953, baseType: !2975, size: 64, offset: 448)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !2424, file: !151, line: 3404, baseType: !3101, size: 1664)
!3101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !151, line: 3337, size: 1664, elements: !3102)
!3102 = !{!3103, !3104}
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3101, file: !151, line: 3338, baseType: !2460, size: 192)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3101, file: !151, line: 3341, baseType: !3105, size: 1472, offset: 192)
!3105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !3106, line: 410, size: 1472, elements: !3107)
!3106 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3107 = !{!3108, !3109, !3110, !3111, !3112, !3113, !3114, !3115, !3116, !3118, !3119, !3120, !3121, !3122, !3123, !3124, !3125, !3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3135, !3136, !3137, !3138, !3139, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147, !3148, !3149, !3150, !3151, !3152, !3153, !3154, !3155, !3156, !3157, !3158, !3159, !3160, !3161, !3162, !3163, !3164, !3165, !3166, !3167, !3168, !3169, !3170, !3171, !3172, !3173, !3174, !3175, !3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3191, !3192, !3193, !3194, !3195, !3196, !3197, !3198, !3199, !3200, !3201, !3202, !3203, !3204, !3205, !3206, !3207, !3208, !3209, !3210, !3211, !3212, !3213, !3214, !3215, !3216, !3217, !3218, !3219, !3220, !3221, !3222, !3223, !3224, !3225, !3226, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3238, !3239, !3240, !3241, !3242, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263, !3264, !3265, !3266, !3267, !3268, !3269, !3270, !3271}
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !3105, file: !3106, line: 412, baseType: !2325, size: 32)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !3105, file: !3106, line: 413, baseType: !2325, size: 32, offset: 32)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !3105, file: !3106, line: 414, baseType: !2325, size: 32, offset: 64)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !3105, file: !3106, line: 415, baseType: !2325, size: 32, offset: 96)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !3105, file: !3106, line: 416, baseType: !2325, size: 32, offset: 128)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !3105, file: !3106, line: 417, baseType: !2325, size: 32, offset: 160)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !3105, file: !3106, line: 418, baseType: !2535, size: 8, offset: 192)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !3105, file: !3106, line: 419, baseType: !2535, size: 8, offset: 200)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !3105, file: !3106, line: 420, baseType: !3117, size: 8, offset: 208)
!3117 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !3105, file: !3106, line: 421, baseType: !3117, size: 8, offset: 216)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !3105, file: !3106, line: 422, baseType: !3117, size: 8, offset: 224)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !3105, file: !3106, line: 423, baseType: !3117, size: 8, offset: 232)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !3105, file: !3106, line: 424, baseType: !3117, size: 8, offset: 240)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !3105, file: !3106, line: 425, baseType: !3117, size: 8, offset: 248)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !3105, file: !3106, line: 426, baseType: !3117, size: 8, offset: 256)
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !3105, file: !3106, line: 427, baseType: !3117, size: 8, offset: 264)
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !3105, file: !3106, line: 428, baseType: !3117, size: 8, offset: 272)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !3105, file: !3106, line: 429, baseType: !3117, size: 8, offset: 280)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !3105, file: !3106, line: 430, baseType: !3117, size: 8, offset: 288)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !3105, file: !3106, line: 431, baseType: !3117, size: 8, offset: 296)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !3105, file: !3106, line: 432, baseType: !3117, size: 8, offset: 304)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !3105, file: !3106, line: 433, baseType: !3117, size: 8, offset: 312)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !3105, file: !3106, line: 434, baseType: !3117, size: 8, offset: 320)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !3105, file: !3106, line: 435, baseType: !3117, size: 8, offset: 328)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !3105, file: !3106, line: 436, baseType: !3117, size: 8, offset: 336)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !3105, file: !3106, line: 437, baseType: !3117, size: 8, offset: 344)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !3105, file: !3106, line: 438, baseType: !3117, size: 8, offset: 352)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !3105, file: !3106, line: 439, baseType: !3117, size: 8, offset: 360)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !3105, file: !3106, line: 440, baseType: !3117, size: 8, offset: 368)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !3105, file: !3106, line: 441, baseType: !3117, size: 8, offset: 376)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !3105, file: !3106, line: 442, baseType: !3117, size: 8, offset: 384)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !3105, file: !3106, line: 443, baseType: !3117, size: 8, offset: 392)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !3105, file: !3106, line: 444, baseType: !3117, size: 8, offset: 400)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !3105, file: !3106, line: 445, baseType: !3117, size: 8, offset: 408)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !3105, file: !3106, line: 446, baseType: !3117, size: 8, offset: 416)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !3105, file: !3106, line: 447, baseType: !3117, size: 8, offset: 424)
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !3105, file: !3106, line: 448, baseType: !3117, size: 8, offset: 432)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !3105, file: !3106, line: 449, baseType: !3117, size: 8, offset: 440)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !3105, file: !3106, line: 450, baseType: !3117, size: 8, offset: 448)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !3105, file: !3106, line: 451, baseType: !3117, size: 8, offset: 456)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !3105, file: !3106, line: 452, baseType: !3117, size: 8, offset: 464)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !3105, file: !3106, line: 453, baseType: !3117, size: 8, offset: 472)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !3105, file: !3106, line: 454, baseType: !3117, size: 8, offset: 480)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !3105, file: !3106, line: 455, baseType: !3117, size: 8, offset: 488)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !3105, file: !3106, line: 456, baseType: !3117, size: 8, offset: 496)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !3105, file: !3106, line: 457, baseType: !3117, size: 8, offset: 504)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !3105, file: !3106, line: 458, baseType: !3117, size: 8, offset: 512)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !3105, file: !3106, line: 459, baseType: !3117, size: 8, offset: 520)
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !3105, file: !3106, line: 460, baseType: !3117, size: 8, offset: 528)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !3105, file: !3106, line: 461, baseType: !3117, size: 8, offset: 536)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !3105, file: !3106, line: 462, baseType: !3117, size: 8, offset: 544)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !3105, file: !3106, line: 463, baseType: !3117, size: 8, offset: 552)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !3105, file: !3106, line: 464, baseType: !3117, size: 8, offset: 560)
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !3105, file: !3106, line: 465, baseType: !3117, size: 8, offset: 568)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !3105, file: !3106, line: 466, baseType: !3117, size: 8, offset: 576)
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !3105, file: !3106, line: 467, baseType: !3117, size: 8, offset: 584)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !3105, file: !3106, line: 468, baseType: !3117, size: 8, offset: 592)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !3105, file: !3106, line: 469, baseType: !3117, size: 8, offset: 600)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !3105, file: !3106, line: 470, baseType: !3117, size: 8, offset: 608)
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !3105, file: !3106, line: 471, baseType: !3117, size: 8, offset: 616)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !3105, file: !3106, line: 472, baseType: !3117, size: 8, offset: 624)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !3105, file: !3106, line: 473, baseType: !3117, size: 8, offset: 632)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !3105, file: !3106, line: 474, baseType: !3117, size: 8, offset: 640)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !3105, file: !3106, line: 475, baseType: !3117, size: 8, offset: 648)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !3105, file: !3106, line: 476, baseType: !3117, size: 8, offset: 656)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !3105, file: !3106, line: 477, baseType: !3117, size: 8, offset: 664)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !3105, file: !3106, line: 478, baseType: !3117, size: 8, offset: 672)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !3105, file: !3106, line: 479, baseType: !3117, size: 8, offset: 680)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !3105, file: !3106, line: 480, baseType: !3117, size: 8, offset: 688)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !3105, file: !3106, line: 481, baseType: !3117, size: 8, offset: 696)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !3105, file: !3106, line: 482, baseType: !3117, size: 8, offset: 704)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !3105, file: !3106, line: 483, baseType: !3117, size: 8, offset: 712)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !3105, file: !3106, line: 484, baseType: !3117, size: 8, offset: 720)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !3105, file: !3106, line: 485, baseType: !3117, size: 8, offset: 728)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !3105, file: !3106, line: 486, baseType: !3117, size: 8, offset: 736)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !3105, file: !3106, line: 487, baseType: !3117, size: 8, offset: 744)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !3105, file: !3106, line: 488, baseType: !3117, size: 8, offset: 752)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !3105, file: !3106, line: 489, baseType: !3117, size: 8, offset: 760)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !3105, file: !3106, line: 490, baseType: !3117, size: 8, offset: 768)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !3105, file: !3106, line: 491, baseType: !3117, size: 8, offset: 776)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !3105, file: !3106, line: 492, baseType: !3117, size: 8, offset: 784)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !3105, file: !3106, line: 493, baseType: !3117, size: 8, offset: 792)
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !3105, file: !3106, line: 494, baseType: !3117, size: 8, offset: 800)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !3105, file: !3106, line: 495, baseType: !3117, size: 8, offset: 808)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !3105, file: !3106, line: 496, baseType: !3117, size: 8, offset: 816)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !3105, file: !3106, line: 497, baseType: !3117, size: 8, offset: 824)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !3105, file: !3106, line: 498, baseType: !3117, size: 8, offset: 832)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !3105, file: !3106, line: 499, baseType: !3117, size: 8, offset: 840)
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !3105, file: !3106, line: 500, baseType: !3117, size: 8, offset: 848)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !3105, file: !3106, line: 501, baseType: !3117, size: 8, offset: 856)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !3105, file: !3106, line: 502, baseType: !3117, size: 8, offset: 864)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !3105, file: !3106, line: 503, baseType: !3117, size: 8, offset: 872)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !3105, file: !3106, line: 504, baseType: !3117, size: 8, offset: 880)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !3105, file: !3106, line: 505, baseType: !3117, size: 8, offset: 888)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !3105, file: !3106, line: 506, baseType: !3117, size: 8, offset: 896)
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !3105, file: !3106, line: 507, baseType: !3117, size: 8, offset: 904)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !3105, file: !3106, line: 508, baseType: !3117, size: 8, offset: 912)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !3105, file: !3106, line: 509, baseType: !3117, size: 8, offset: 920)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !3105, file: !3106, line: 510, baseType: !3117, size: 8, offset: 928)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !3105, file: !3106, line: 511, baseType: !3117, size: 8, offset: 936)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !3105, file: !3106, line: 512, baseType: !3117, size: 8, offset: 944)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !3105, file: !3106, line: 513, baseType: !3117, size: 8, offset: 952)
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !3105, file: !3106, line: 514, baseType: !3117, size: 8, offset: 960)
!3212 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !3105, file: !3106, line: 515, baseType: !3117, size: 8, offset: 968)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !3105, file: !3106, line: 516, baseType: !3117, size: 8, offset: 976)
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !3105, file: !3106, line: 517, baseType: !3117, size: 8, offset: 984)
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !3105, file: !3106, line: 518, baseType: !3117, size: 8, offset: 992)
!3216 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !3105, file: !3106, line: 519, baseType: !3117, size: 8, offset: 1000)
!3217 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !3105, file: !3106, line: 520, baseType: !3117, size: 8, offset: 1008)
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !3105, file: !3106, line: 521, baseType: !3117, size: 8, offset: 1016)
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !3105, file: !3106, line: 522, baseType: !3117, size: 8, offset: 1024)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !3105, file: !3106, line: 523, baseType: !3117, size: 8, offset: 1032)
!3221 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !3105, file: !3106, line: 524, baseType: !3117, size: 8, offset: 1040)
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !3105, file: !3106, line: 525, baseType: !3117, size: 8, offset: 1048)
!3223 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !3105, file: !3106, line: 526, baseType: !3117, size: 8, offset: 1056)
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !3105, file: !3106, line: 527, baseType: !3117, size: 8, offset: 1064)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !3105, file: !3106, line: 528, baseType: !3117, size: 8, offset: 1072)
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !3105, file: !3106, line: 529, baseType: !3117, size: 8, offset: 1080)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !3105, file: !3106, line: 530, baseType: !3117, size: 8, offset: 1088)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !3105, file: !3106, line: 531, baseType: !3117, size: 8, offset: 1096)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !3105, file: !3106, line: 532, baseType: !3117, size: 8, offset: 1104)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !3105, file: !3106, line: 533, baseType: !3117, size: 8, offset: 1112)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !3105, file: !3106, line: 534, baseType: !3117, size: 8, offset: 1120)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !3105, file: !3106, line: 535, baseType: !3117, size: 8, offset: 1128)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !3105, file: !3106, line: 536, baseType: !3117, size: 8, offset: 1136)
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !3105, file: !3106, line: 537, baseType: !3117, size: 8, offset: 1144)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !3105, file: !3106, line: 538, baseType: !3117, size: 8, offset: 1152)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !3105, file: !3106, line: 539, baseType: !3117, size: 8, offset: 1160)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !3105, file: !3106, line: 540, baseType: !3117, size: 8, offset: 1168)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !3105, file: !3106, line: 541, baseType: !3117, size: 8, offset: 1176)
!3239 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !3105, file: !3106, line: 542, baseType: !3117, size: 8, offset: 1184)
!3240 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !3105, file: !3106, line: 543, baseType: !3117, size: 8, offset: 1192)
!3241 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !3105, file: !3106, line: 544, baseType: !3117, size: 8, offset: 1200)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !3105, file: !3106, line: 545, baseType: !3117, size: 8, offset: 1208)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !3105, file: !3106, line: 546, baseType: !3117, size: 8, offset: 1216)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !3105, file: !3106, line: 547, baseType: !3117, size: 8, offset: 1224)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !3105, file: !3106, line: 548, baseType: !3117, size: 8, offset: 1232)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !3105, file: !3106, line: 549, baseType: !3117, size: 8, offset: 1240)
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !3105, file: !3106, line: 550, baseType: !3117, size: 8, offset: 1248)
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !3105, file: !3106, line: 551, baseType: !3117, size: 8, offset: 1256)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !3105, file: !3106, line: 552, baseType: !3117, size: 8, offset: 1264)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !3105, file: !3106, line: 553, baseType: !3117, size: 8, offset: 1272)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !3105, file: !3106, line: 554, baseType: !3117, size: 8, offset: 1280)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !3105, file: !3106, line: 555, baseType: !3117, size: 8, offset: 1288)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !3105, file: !3106, line: 556, baseType: !3117, size: 8, offset: 1296)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !3105, file: !3106, line: 557, baseType: !3117, size: 8, offset: 1304)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !3105, file: !3106, line: 558, baseType: !3117, size: 8, offset: 1312)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !3105, file: !3106, line: 559, baseType: !3117, size: 8, offset: 1320)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !3105, file: !3106, line: 560, baseType: !3117, size: 8, offset: 1328)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !3105, file: !3106, line: 561, baseType: !3117, size: 8, offset: 1336)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !3105, file: !3106, line: 562, baseType: !3117, size: 8, offset: 1344)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !3105, file: !3106, line: 563, baseType: !3117, size: 8, offset: 1352)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !3105, file: !3106, line: 564, baseType: !3117, size: 8, offset: 1360)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !3105, file: !3106, line: 565, baseType: !3117, size: 8, offset: 1368)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !3105, file: !3106, line: 566, baseType: !3117, size: 8, offset: 1376)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !3105, file: !3106, line: 567, baseType: !3117, size: 8, offset: 1384)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !3105, file: !3106, line: 568, baseType: !3117, size: 8, offset: 1392)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !3105, file: !3106, line: 569, baseType: !3117, size: 8, offset: 1400)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !3105, file: !3106, line: 570, baseType: !3117, size: 8, offset: 1408)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !3105, file: !3106, line: 571, baseType: !3117, size: 8, offset: 1416)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !3105, file: !3106, line: 572, baseType: !3117, size: 8, offset: 1424)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !3105, file: !3106, line: 573, baseType: !3117, size: 8, offset: 1432)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !3105, file: !3106, line: 574, baseType: !3117, size: 8, offset: 1440)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !2424, file: !151, line: 3405, baseType: !3273, size: 384)
!3273 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !151, line: 3352, size: 384, elements: !3274)
!3274 = !{!3275, !3276}
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3273, file: !151, line: 3353, baseType: !2460, size: 192)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3273, file: !151, line: 3356, baseType: !3277, size: 192, offset: 192)
!3277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !3106, line: 578, size: 192, elements: !3278)
!3278 = !{!3279, !3280, !3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288, !3289}
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3277, file: !3106, line: 580, baseType: !2325, size: 32)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3277, file: !3106, line: 581, baseType: !2325, size: 32, offset: 32)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3277, file: !3106, line: 582, baseType: !2325, size: 32, offset: 64)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3277, file: !3106, line: 583, baseType: !2325, size: 32, offset: 96)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3277, file: !3106, line: 584, baseType: !2535, size: 8, offset: 128)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3277, file: !3106, line: 585, baseType: !2535, size: 8, offset: 136)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3277, file: !3106, line: 586, baseType: !2535, size: 8, offset: 144)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3277, file: !3106, line: 587, baseType: !2535, size: 8, offset: 152)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3277, file: !3106, line: 588, baseType: !2535, size: 8, offset: 160)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3277, file: !3106, line: 589, baseType: !2535, size: 8, offset: 168)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3277, file: !3106, line: 590, baseType: !2535, size: 8, offset: 176)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !2322, file: !378, line: 178, baseType: !2681, size: 64)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !2322, file: !378, line: 179, baseType: !3292, size: 64)
!3292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3293, size: 64)
!3293 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !378, line: 150, baseType: !3294)
!3294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !378, line: 142, size: 320, elements: !3295)
!3295 = !{!3296, !3297, !3298, !3299, !3300, !3301}
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3294, file: !378, line: 144, baseType: !2422, size: 64)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3294, file: !378, line: 145, baseType: !2301, size: 64, offset: 64)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3294, file: !378, line: 146, baseType: !2301, size: 64, offset: 128)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3294, file: !378, line: 147, baseType: !2940, size: 32, offset: 192)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3294, file: !378, line: 148, baseType: !7, size: 32, offset: 224)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !3294, file: !378, line: 149, baseType: !2535, size: 8, offset: 256)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !2322, file: !378, line: 180, baseType: !3303, size: 64)
!3303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3304, size: 64)
!3304 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !378, line: 162, baseType: !3305)
!3305 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !378, line: 159, size: 128, elements: !3306)
!3306 = !{!3307, !3308}
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3305, file: !378, line: 160, baseType: !2422, size: 64)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3305, file: !378, line: 161, baseType: !2299, size: 64, offset: 64)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !2322, file: !378, line: 181, baseType: !3310, size: 64)
!3310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3311, size: 64)
!3311 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !378, line: 181, flags: DIFlagFwdDecl)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !2317, file: !378, line: 317, baseType: !3313, size: 64)
!3313 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2299, size: 64, elements: !2340)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !2317, file: !378, line: 318, baseType: !3315, size: 320)
!3315 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !378, line: 188, size: 320, elements: !3316)
!3316 = !{!3317, !3319, !3342}
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3315, file: !378, line: 190, baseType: !3318, size: 192)
!3318 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2321, size: 192, elements: !2493)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3315, file: !378, line: 193, baseType: !3320, size: 64, offset: 192)
!3320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3321, size: 64)
!3321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !378, line: 206, size: 320, elements: !3322)
!3322 = !{!3323, !3327, !3328, !3329, !3341}
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !3321, file: !378, line: 208, baseType: !3324, size: 64)
!3324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3325, size: 64)
!3325 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !2302, line: 62, baseType: !3326)
!3326 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2302, line: 61, flags: DIFlagFwdDecl)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !3321, file: !378, line: 211, baseType: !7, size: 32, offset: 64)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3321, file: !378, line: 214, baseType: !2299, size: 64, offset: 128)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !3321, file: !378, line: 224, baseType: !3330, size: 64, offset: 192)
!3330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3331, size: 64)
!3331 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !378, line: 202, baseType: !3332)
!3332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !378, line: 202, size: 128, elements: !3333)
!3333 = !{!3334}
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3332, file: !378, line: 202, baseType: !3335, size: 128)
!3335 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !378, line: 200, baseType: !3336)
!3336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !378, line: 200, size: 128, elements: !3337)
!3337 = !{!3338, !3339, !3340}
!3338 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3336, file: !378, line: 200, baseType: !7, size: 32)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3336, file: !378, line: 200, baseType: !7, size: 32, offset: 32)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3336, file: !378, line: 200, baseType: !2339, size: 64, offset: 64)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !3321, file: !378, line: 234, baseType: !3330, size: 64, offset: 256)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3315, file: !378, line: 197, baseType: !2299, size: 64, offset: 256)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !2317, file: !378, line: 319, baseType: !2482, size: 256)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !2317, file: !378, line: 320, baseType: !2501, size: 192)
!3345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3346, size: 64)
!3346 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2482)
!3347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3348, size: 64)
!3348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "algorithm", file: !3, line: 2340, size: 1344, elements: !3349)
!3349 = !{!3350, !3356, !3357, !3361}
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !3348, file: !3, line: 2342, baseType: !3351, size: 32)
!3351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mult_cost", file: !3, line: 2302, size: 32, elements: !3352)
!3352 = !{!3353, !3355}
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !3351, file: !3, line: 2303, baseType: !3354, size: 16)
!3354 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "latency", scope: !3351, file: !3, line: 2304, baseType: !3354, size: 16, offset: 16)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3348, file: !3, line: 2343, baseType: !3354, size: 16, offset: 32)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3348, file: !3, line: 2349, baseType: !3358, size: 1024, offset: 64)
!3358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2230, size: 1024, elements: !3359)
!3359 = !{!3360}
!3360 = !DISubrange(count: 32)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "log", scope: !3348, file: !3, line: 2350, baseType: !3362, size: 256, offset: 1088)
!3362 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2330, size: 256, elements: !3359)
!3363 = !{!3364, !3370, !3372, !3377, !0, !3379, !3382, !3384, !3388, !3390, !3392, !3394, !3396, !3398, !3400, !3402, !3404}
!3364 = !DIGlobalVariableExpression(var: !3365, expr: !DIExpression())
!3365 = distinct !DIGlobalVariable(name: "last_div_const", scope: !3366, file: !3, line: 3856, type: !2299, isLocal: true, isDefinition: true)
!3366 = distinct !DISubprogram(name: "expand_divmod", scope: !3, file: !3, line: 3844, type: !3367, scopeLine: 3846, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!3367 = !DISubroutineType(types: !3368)
!3368 = !{!2301, !2325, !183, !5, !2301, !2301, !2301, !2325}
!3369 = !{}
!3370 = !DIGlobalVariableExpression(var: !3371, expr: !DIExpression())
!3371 = distinct !DIGlobalVariable(name: "ext_op1", scope: !3366, file: !3, line: 3857, type: !2299, isLocal: true, isDefinition: true)
!3372 = !DIGlobalVariableExpression(var: !3373, expr: !DIExpression())
!3373 = distinct !DIGlobalVariable(name: "sdiv_pow2_cheap", scope: !2, file: !3, line: 67, type: !3374, isLocal: true, isDefinition: true)
!3374 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2535, size: 1392, elements: !3375)
!3375 = !{!2377, !3376}
!3376 = !DISubrange(count: 87)
!3377 = !DIGlobalVariableExpression(var: !3378, expr: !DIExpression())
!3378 = distinct !DIGlobalVariable(name: "smod_pow2_cheap", scope: !2, file: !3, line: 68, type: !3374, isLocal: true, isDefinition: true)
!3379 = !DIGlobalVariableExpression(var: !3380, expr: !DIExpression())
!3380 = distinct !DIGlobalVariable(name: "add_cost", scope: !2, file: !3, line: 102, type: !3381, isLocal: true, isDefinition: true)
!3381 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2325, size: 5568, elements: !3375)
!3382 = !DIGlobalVariableExpression(var: !3383, expr: !DIExpression())
!3383 = distinct !DIGlobalVariable(name: "neg_cost", scope: !2, file: !3, line: 103, type: !3381, isLocal: true, isDefinition: true)
!3384 = !DIGlobalVariableExpression(var: !3385, expr: !DIExpression())
!3385 = distinct !DIGlobalVariable(name: "shift_cost", scope: !2, file: !3, line: 104, type: !3386, isLocal: true, isDefinition: true)
!3386 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2325, size: 178176, elements: !3387)
!3387 = !{!2377, !3376, !3360}
!3388 = !DIGlobalVariableExpression(var: !3389, expr: !DIExpression())
!3389 = distinct !DIGlobalVariable(name: "shiftadd_cost", scope: !2, file: !3, line: 105, type: !3386, isLocal: true, isDefinition: true)
!3390 = !DIGlobalVariableExpression(var: !3391, expr: !DIExpression())
!3391 = distinct !DIGlobalVariable(name: "shiftsub0_cost", scope: !2, file: !3, line: 106, type: !3386, isLocal: true, isDefinition: true)
!3392 = !DIGlobalVariableExpression(var: !3393, expr: !DIExpression())
!3393 = distinct !DIGlobalVariable(name: "shiftsub1_cost", scope: !2, file: !3, line: 107, type: !3386, isLocal: true, isDefinition: true)
!3394 = !DIGlobalVariableExpression(var: !3395, expr: !DIExpression())
!3395 = distinct !DIGlobalVariable(name: "mul_cost", scope: !2, file: !3, line: 108, type: !3381, isLocal: true, isDefinition: true)
!3396 = !DIGlobalVariableExpression(var: !3397, expr: !DIExpression())
!3397 = distinct !DIGlobalVariable(name: "sdiv_cost", scope: !2, file: !3, line: 109, type: !3381, isLocal: true, isDefinition: true)
!3398 = !DIGlobalVariableExpression(var: !3399, expr: !DIExpression())
!3399 = distinct !DIGlobalVariable(name: "udiv_cost", scope: !2, file: !3, line: 110, type: !3381, isLocal: true, isDefinition: true)
!3400 = !DIGlobalVariableExpression(var: !3401, expr: !DIExpression())
!3401 = distinct !DIGlobalVariable(name: "mul_widen_cost", scope: !2, file: !3, line: 111, type: !3381, isLocal: true, isDefinition: true)
!3402 = !DIGlobalVariableExpression(var: !3403, expr: !DIExpression())
!3403 = distinct !DIGlobalVariable(name: "mul_highpart_cost", scope: !2, file: !3, line: 112, type: !3381, isLocal: true, isDefinition: true)
!3404 = !DIGlobalVariableExpression(var: !3405, expr: !DIExpression())
!3405 = distinct !DIGlobalVariable(name: "alg_hash", scope: !2, file: !3, line: 2383, type: !3406, isLocal: true, isDefinition: true)
!3406 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3407, size: 197952, elements: !3414)
!3407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alg_hash_entry", file: !3, line: 2354, size: 192, elements: !3408)
!3408 = !{!3409, !3410, !3411, !3412, !3413}
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !3407, file: !3, line: 2356, baseType: !2375, size: 64)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3407, file: !3, line: 2359, baseType: !5, size: 32, offset: 64)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "alg", scope: !3407, file: !3, line: 2362, baseType: !2230, size: 32, offset: 96)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !3407, file: !3, line: 2367, baseType: !3351, size: 32, offset: 128)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "speed", scope: !3407, file: !3, line: 2370, baseType: !2535, size: 8, offset: 160)
!3414 = !{!3415}
!3415 = !DISubrange(count: 1031)
!3416 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2325, size: 64, elements: !2376)
!3417 = !{i32 7, !"Dwarf Version", i32 4}
!3418 = !{i32 2, !"Debug Info Version", i32 3}
!3419 = !{i32 1, !"wchar_size", i32 4}
!3420 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3421 = distinct !DISubprogram(name: "init_expmed", scope: !3, file: !3, line: 115, type: !3422, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!3422 = !DISubroutineType(types: !3423)
!3423 = !{null}
!3424 = !DILocalVariable(name: "all", scope: !3421, file: !3, line: 136, type: !3425)
!3425 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3421, file: !3, line: 117, size: 7488, elements: !3426)
!3426 = !{!3427, !3428, !3430, !3431, !3432, !3433, !3434, !3435, !3436, !3437, !3438, !3439, !3440, !3441, !3442, !3443, !3444, !3445, !3446, !3447, !3448, !3449, !3450, !3451, !3452, !3453, !3454, !3455, !3456, !3457, !3458}
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3425, file: !3, line: 119, baseType: !2304, size: 384)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "reg_fld", scope: !3425, file: !3, line: 119, baseType: !3429, size: 128, offset: 384)
!3429 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2321, size: 128, elements: !2376)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "plus", scope: !3425, file: !3, line: 120, baseType: !2304, size: 384, offset: 512)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "plus_fld1", scope: !3425, file: !3, line: 120, baseType: !2321, size: 64, offset: 896)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "neg", scope: !3425, file: !3, line: 121, baseType: !2304, size: 384, offset: 960)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "mult", scope: !3425, file: !3, line: 122, baseType: !2304, size: 384, offset: 1344)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "mult_fld1", scope: !3425, file: !3, line: 122, baseType: !2321, size: 64, offset: 1728)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "sdiv", scope: !3425, file: !3, line: 123, baseType: !2304, size: 384, offset: 1792)
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "sdiv_fld1", scope: !3425, file: !3, line: 123, baseType: !2321, size: 64, offset: 2176)
!3437 = !DIDerivedType(tag: DW_TAG_member, name: "udiv", scope: !3425, file: !3, line: 124, baseType: !2304, size: 384, offset: 2240)
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "udiv_fld1", scope: !3425, file: !3, line: 124, baseType: !2321, size: 64, offset: 2624)
!3439 = !DIDerivedType(tag: DW_TAG_member, name: "zext", scope: !3425, file: !3, line: 125, baseType: !2304, size: 384, offset: 2688)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "sdiv_32", scope: !3425, file: !3, line: 126, baseType: !2304, size: 384, offset: 3072)
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "sdiv_32_fld1", scope: !3425, file: !3, line: 126, baseType: !2321, size: 64, offset: 3456)
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "smod_32", scope: !3425, file: !3, line: 127, baseType: !2304, size: 384, offset: 3520)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "smod_32_fld1", scope: !3425, file: !3, line: 127, baseType: !2321, size: 64, offset: 3904)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "wide_mult", scope: !3425, file: !3, line: 128, baseType: !2304, size: 384, offset: 3968)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "wide_mult_fld1", scope: !3425, file: !3, line: 128, baseType: !2321, size: 64, offset: 4352)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "wide_lshr", scope: !3425, file: !3, line: 129, baseType: !2304, size: 384, offset: 4416)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "wide_lshr_fld1", scope: !3425, file: !3, line: 129, baseType: !2321, size: 64, offset: 4800)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "wide_trunc", scope: !3425, file: !3, line: 130, baseType: !2304, size: 384, offset: 4864)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "shift", scope: !3425, file: !3, line: 131, baseType: !2304, size: 384, offset: 5248)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "shift_fld1", scope: !3425, file: !3, line: 131, baseType: !2321, size: 64, offset: 5632)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "shift_mult", scope: !3425, file: !3, line: 132, baseType: !2304, size: 384, offset: 5696)
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "shift_mult_fld1", scope: !3425, file: !3, line: 132, baseType: !2321, size: 64, offset: 6080)
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "shift_add", scope: !3425, file: !3, line: 133, baseType: !2304, size: 384, offset: 6144)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "shift_add_fld1", scope: !3425, file: !3, line: 133, baseType: !2321, size: 64, offset: 6528)
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "shift_sub0", scope: !3425, file: !3, line: 134, baseType: !2304, size: 384, offset: 6592)
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "shift_sub0_fld1", scope: !3425, file: !3, line: 134, baseType: !2321, size: 64, offset: 6976)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "shift_sub1", scope: !3425, file: !3, line: 135, baseType: !2304, size: 384, offset: 7040)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "shift_sub1_fld1", scope: !3425, file: !3, line: 135, baseType: !2321, size: 64, offset: 7424)
!3459 = !DILocation(line: 136, column: 5, scope: !3421)
!3460 = !DILocalVariable(name: "pow2", scope: !3421, file: !3, line: 138, type: !3461)
!3461 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2301, size: 2048, elements: !3359)
!3462 = !DILocation(line: 138, column: 7, scope: !3421)
!3463 = !DILocalVariable(name: "cint", scope: !3421, file: !3, line: 139, type: !3461)
!3464 = !DILocation(line: 139, column: 7, scope: !3421)
!3465 = !DILocalVariable(name: "m", scope: !3421, file: !3, line: 140, type: !2325)
!3466 = !DILocation(line: 140, column: 7, scope: !3421)
!3467 = !DILocalVariable(name: "n", scope: !3421, file: !3, line: 140, type: !2325)
!3468 = !DILocation(line: 140, column: 10, scope: !3421)
!3469 = !DILocalVariable(name: "mode", scope: !3421, file: !3, line: 141, type: !5)
!3470 = !DILocation(line: 141, column: 21, scope: !3421)
!3471 = !DILocalVariable(name: "wider_mode", scope: !3421, file: !3, line: 141, type: !5)
!3472 = !DILocation(line: 141, column: 27, scope: !3421)
!3473 = !DILocalVariable(name: "speed", scope: !3421, file: !3, line: 142, type: !2325)
!3474 = !DILocation(line: 142, column: 7, scope: !3421)
!3475 = !DILocation(line: 145, column: 10, scope: !3476)
!3476 = distinct !DILexicalBlock(scope: !3421, file: !3, line: 145, column: 3)
!3477 = !DILocation(line: 145, column: 8, scope: !3476)
!3478 = !DILocation(line: 145, column: 15, scope: !3479)
!3479 = distinct !DILexicalBlock(scope: !3476, file: !3, line: 145, column: 3)
!3480 = !DILocation(line: 145, column: 17, scope: !3479)
!3481 = !DILocation(line: 145, column: 3, scope: !3476)
!3482 = !DILocation(line: 147, column: 17, scope: !3483)
!3483 = distinct !DILexicalBlock(scope: !3479, file: !3, line: 146, column: 5)
!3484 = !DILocation(line: 147, column: 12, scope: !3483)
!3485 = !DILocation(line: 147, column: 7, scope: !3483)
!3486 = !DILocation(line: 147, column: 15, scope: !3483)
!3487 = !DILocation(line: 148, column: 17, scope: !3483)
!3488 = !DILocation(line: 148, column: 12, scope: !3483)
!3489 = !DILocation(line: 148, column: 7, scope: !3483)
!3490 = !DILocation(line: 148, column: 15, scope: !3483)
!3491 = !DILocation(line: 149, column: 5, scope: !3483)
!3492 = !DILocation(line: 145, column: 39, scope: !3479)
!3493 = !DILocation(line: 145, column: 3, scope: !3479)
!3494 = distinct !{!3494, !3481, !3495}
!3495 = !DILocation(line: 149, column: 5, scope: !3476)
!3496 = !DILocation(line: 150, column: 3, scope: !3421)
!3497 = !DILocation(line: 152, column: 3, scope: !3421)
!3498 = !DILocation(line: 154, column: 3, scope: !3421)
!3499 = !DILocation(line: 156, column: 3, scope: !3421)
!3500 = !DILocation(line: 157, column: 30, scope: !3421)
!3501 = !DILocation(line: 157, column: 3, scope: !3421)
!3502 = !DILocation(line: 157, column: 23, scope: !3421)
!3503 = !DILocation(line: 158, column: 30, scope: !3421)
!3504 = !DILocation(line: 158, column: 3, scope: !3421)
!3505 = !DILocation(line: 158, column: 23, scope: !3421)
!3506 = !DILocation(line: 160, column: 3, scope: !3421)
!3507 = !DILocation(line: 161, column: 29, scope: !3421)
!3508 = !DILocation(line: 161, column: 3, scope: !3421)
!3509 = !DILocation(line: 161, column: 22, scope: !3421)
!3510 = !DILocation(line: 163, column: 3, scope: !3421)
!3511 = !DILocation(line: 164, column: 30, scope: !3421)
!3512 = !DILocation(line: 164, column: 3, scope: !3421)
!3513 = !DILocation(line: 164, column: 23, scope: !3421)
!3514 = !DILocation(line: 165, column: 30, scope: !3421)
!3515 = !DILocation(line: 165, column: 3, scope: !3421)
!3516 = !DILocation(line: 165, column: 23, scope: !3421)
!3517 = !DILocation(line: 167, column: 3, scope: !3421)
!3518 = !DILocation(line: 168, column: 30, scope: !3421)
!3519 = !DILocation(line: 168, column: 3, scope: !3421)
!3520 = !DILocation(line: 168, column: 23, scope: !3421)
!3521 = !DILocation(line: 169, column: 30, scope: !3421)
!3522 = !DILocation(line: 169, column: 3, scope: !3421)
!3523 = !DILocation(line: 169, column: 23, scope: !3421)
!3524 = !DILocation(line: 171, column: 3, scope: !3421)
!3525 = !DILocation(line: 172, column: 30, scope: !3421)
!3526 = !DILocation(line: 172, column: 3, scope: !3421)
!3527 = !DILocation(line: 172, column: 23, scope: !3421)
!3528 = !DILocation(line: 173, column: 30, scope: !3421)
!3529 = !DILocation(line: 173, column: 3, scope: !3421)
!3530 = !DILocation(line: 173, column: 23, scope: !3421)
!3531 = !DILocation(line: 175, column: 3, scope: !3421)
!3532 = !DILocation(line: 176, column: 33, scope: !3421)
!3533 = !DILocation(line: 176, column: 3, scope: !3421)
!3534 = !DILocation(line: 176, column: 26, scope: !3421)
!3535 = !DILocation(line: 177, column: 64, scope: !3421)
!3536 = !DILocation(line: 177, column: 3, scope: !3421)
!3537 = !DILocation(line: 177, column: 26, scope: !3421)
!3538 = !DILocation(line: 179, column: 3, scope: !3421)
!3539 = !DILocation(line: 180, column: 33, scope: !3421)
!3540 = !DILocation(line: 180, column: 3, scope: !3421)
!3541 = !DILocation(line: 180, column: 26, scope: !3421)
!3542 = !DILocation(line: 181, column: 28, scope: !3421)
!3543 = !DILocation(line: 181, column: 3, scope: !3421)
!3544 = !DILocation(line: 181, column: 26, scope: !3421)
!3545 = !DILocation(line: 183, column: 3, scope: !3421)
!3546 = !DILocation(line: 184, column: 30, scope: !3421)
!3547 = !DILocation(line: 184, column: 3, scope: !3421)
!3548 = !DILocation(line: 184, column: 23, scope: !3421)
!3549 = !DILocation(line: 186, column: 3, scope: !3421)
!3550 = !DILocation(line: 187, column: 35, scope: !3421)
!3551 = !DILocation(line: 187, column: 3, scope: !3421)
!3552 = !DILocation(line: 187, column: 28, scope: !3421)
!3553 = !DILocation(line: 188, column: 35, scope: !3421)
!3554 = !DILocation(line: 188, column: 3, scope: !3421)
!3555 = !DILocation(line: 188, column: 28, scope: !3421)
!3556 = !DILocation(line: 190, column: 3, scope: !3421)
!3557 = !DILocation(line: 191, column: 35, scope: !3421)
!3558 = !DILocation(line: 191, column: 3, scope: !3421)
!3559 = !DILocation(line: 191, column: 28, scope: !3421)
!3560 = !DILocation(line: 193, column: 3, scope: !3421)
!3561 = !DILocation(line: 194, column: 36, scope: !3421)
!3562 = !DILocation(line: 194, column: 3, scope: !3421)
!3563 = !DILocation(line: 194, column: 29, scope: !3421)
!3564 = !DILocation(line: 196, column: 3, scope: !3421)
!3565 = !DILocation(line: 197, column: 31, scope: !3421)
!3566 = !DILocation(line: 197, column: 3, scope: !3421)
!3567 = !DILocation(line: 197, column: 24, scope: !3421)
!3568 = !DILocation(line: 199, column: 3, scope: !3421)
!3569 = !DILocation(line: 200, column: 36, scope: !3421)
!3570 = !DILocation(line: 200, column: 3, scope: !3421)
!3571 = !DILocation(line: 200, column: 29, scope: !3421)
!3572 = !DILocation(line: 202, column: 3, scope: !3421)
!3573 = !DILocation(line: 203, column: 35, scope: !3421)
!3574 = !DILocation(line: 203, column: 3, scope: !3421)
!3575 = !DILocation(line: 203, column: 28, scope: !3421)
!3576 = !DILocation(line: 204, column: 35, scope: !3421)
!3577 = !DILocation(line: 204, column: 3, scope: !3421)
!3578 = !DILocation(line: 204, column: 28, scope: !3421)
!3579 = !DILocation(line: 206, column: 3, scope: !3421)
!3580 = !DILocation(line: 207, column: 36, scope: !3421)
!3581 = !DILocation(line: 207, column: 3, scope: !3421)
!3582 = !DILocation(line: 207, column: 29, scope: !3421)
!3583 = !DILocation(line: 208, column: 36, scope: !3421)
!3584 = !DILocation(line: 208, column: 3, scope: !3421)
!3585 = !DILocation(line: 208, column: 29, scope: !3421)
!3586 = !DILocation(line: 210, column: 3, scope: !3421)
!3587 = !DILocation(line: 211, column: 36, scope: !3421)
!3588 = !DILocation(line: 211, column: 3, scope: !3421)
!3589 = !DILocation(line: 211, column: 29, scope: !3421)
!3590 = !DILocation(line: 212, column: 36, scope: !3421)
!3591 = !DILocation(line: 212, column: 3, scope: !3421)
!3592 = !DILocation(line: 212, column: 29, scope: !3421)
!3593 = !DILocation(line: 214, column: 14, scope: !3594)
!3594 = distinct !DILexicalBlock(scope: !3421, file: !3, line: 214, column: 3)
!3595 = !DILocation(line: 214, column: 8, scope: !3594)
!3596 = !DILocation(line: 214, column: 19, scope: !3597)
!3597 = distinct !DILexicalBlock(scope: !3594, file: !3, line: 214, column: 3)
!3598 = !DILocation(line: 214, column: 25, scope: !3597)
!3599 = !DILocation(line: 214, column: 3, scope: !3594)
!3600 = !DILocation(line: 216, column: 32, scope: !3601)
!3601 = distinct !DILexicalBlock(scope: !3597, file: !3, line: 215, column: 5)
!3602 = !DILocation(line: 216, column: 30, scope: !3601)
!3603 = !DILocation(line: 217, column: 36, scope: !3601)
!3604 = !DILocation(line: 217, column: 53, scope: !3601)
!3605 = !DILocation(line: 217, column: 26, scope: !3601)
!3606 = !DILocation(line: 217, column: 17, scope: !3601)
!3607 = !DILocation(line: 217, column: 7, scope: !3601)
!3608 = !DILocation(line: 217, column: 24, scope: !3601)
!3609 = !DILocation(line: 219, column: 19, scope: !3610)
!3610 = distinct !DILexicalBlock(scope: !3601, file: !3, line: 219, column: 7)
!3611 = !DILocation(line: 219, column: 17, scope: !3610)
!3612 = !DILocation(line: 219, column: 12, scope: !3610)
!3613 = !DILocation(line: 220, column: 5, scope: !3614)
!3614 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 219, column: 7)
!3615 = !DILocation(line: 220, column: 10, scope: !3614)
!3616 = !DILocation(line: 219, column: 7, scope: !3610)
!3617 = !DILocation(line: 223, column: 4, scope: !3618)
!3618 = distinct !DILexicalBlock(scope: !3614, file: !3, line: 222, column: 2)
!3619 = !DILocation(line: 224, column: 4, scope: !3618)
!3620 = !DILocation(line: 225, column: 4, scope: !3618)
!3621 = !DILocation(line: 226, column: 4, scope: !3618)
!3622 = !DILocation(line: 227, column: 4, scope: !3618)
!3623 = !DILocation(line: 228, column: 4, scope: !3618)
!3624 = !DILocation(line: 229, column: 4, scope: !3618)
!3625 = !DILocation(line: 230, column: 4, scope: !3618)
!3626 = !DILocation(line: 231, column: 4, scope: !3618)
!3627 = !DILocation(line: 232, column: 4, scope: !3618)
!3628 = !DILocation(line: 233, column: 4, scope: !3618)
!3629 = !DILocation(line: 234, column: 4, scope: !3618)
!3630 = !DILocation(line: 235, column: 4, scope: !3618)
!3631 = !DILocation(line: 236, column: 4, scope: !3618)
!3632 = !DILocation(line: 238, column: 43, scope: !3618)
!3633 = !DILocation(line: 238, column: 54, scope: !3618)
!3634 = !DILocation(line: 238, column: 28, scope: !3618)
!3635 = !DILocation(line: 238, column: 13, scope: !3618)
!3636 = !DILocation(line: 238, column: 4, scope: !3618)
!3637 = !DILocation(line: 238, column: 20, scope: !3618)
!3638 = !DILocation(line: 238, column: 26, scope: !3618)
!3639 = !DILocation(line: 239, column: 43, scope: !3618)
!3640 = !DILocation(line: 239, column: 53, scope: !3618)
!3641 = !DILocation(line: 239, column: 28, scope: !3618)
!3642 = !DILocation(line: 239, column: 13, scope: !3618)
!3643 = !DILocation(line: 239, column: 4, scope: !3618)
!3644 = !DILocation(line: 239, column: 20, scope: !3618)
!3645 = !DILocation(line: 239, column: 26, scope: !3618)
!3646 = !DILocation(line: 240, column: 43, scope: !3618)
!3647 = !DILocation(line: 240, column: 54, scope: !3618)
!3648 = !DILocation(line: 240, column: 28, scope: !3618)
!3649 = !DILocation(line: 240, column: 13, scope: !3618)
!3650 = !DILocation(line: 240, column: 4, scope: !3618)
!3651 = !DILocation(line: 240, column: 20, scope: !3618)
!3652 = !DILocation(line: 240, column: 26, scope: !3618)
!3653 = !DILocation(line: 241, column: 44, scope: !3618)
!3654 = !DILocation(line: 241, column: 55, scope: !3618)
!3655 = !DILocation(line: 241, column: 29, scope: !3618)
!3656 = !DILocation(line: 241, column: 14, scope: !3618)
!3657 = !DILocation(line: 241, column: 4, scope: !3618)
!3658 = !DILocation(line: 241, column: 21, scope: !3618)
!3659 = !DILocation(line: 241, column: 27, scope: !3618)
!3660 = !DILocation(line: 242, column: 44, scope: !3618)
!3661 = !DILocation(line: 242, column: 55, scope: !3618)
!3662 = !DILocation(line: 242, column: 29, scope: !3618)
!3663 = !DILocation(line: 242, column: 14, scope: !3618)
!3664 = !DILocation(line: 242, column: 4, scope: !3618)
!3665 = !DILocation(line: 242, column: 21, scope: !3618)
!3666 = !DILocation(line: 242, column: 27, scope: !3618)
!3667 = !DILocation(line: 244, column: 51, scope: !3618)
!3668 = !DILocation(line: 244, column: 65, scope: !3618)
!3669 = !DILocation(line: 244, column: 36, scope: !3618)
!3670 = !DILocation(line: 245, column: 31, scope: !3618)
!3671 = !DILocation(line: 245, column: 22, scope: !3618)
!3672 = !DILocation(line: 245, column: 38, scope: !3618)
!3673 = !DILocation(line: 245, column: 20, scope: !3618)
!3674 = !DILocation(line: 245, column: 15, scope: !3618)
!3675 = !DILocation(line: 244, column: 35, scope: !3618)
!3676 = !DILocation(line: 244, column: 20, scope: !3618)
!3677 = !DILocation(line: 244, column: 4, scope: !3618)
!3678 = !DILocation(line: 244, column: 27, scope: !3618)
!3679 = !DILocation(line: 244, column: 33, scope: !3618)
!3680 = !DILocation(line: 246, column: 51, scope: !3618)
!3681 = !DILocation(line: 246, column: 65, scope: !3618)
!3682 = !DILocation(line: 246, column: 36, scope: !3618)
!3683 = !DILocation(line: 247, column: 31, scope: !3618)
!3684 = !DILocation(line: 247, column: 22, scope: !3618)
!3685 = !DILocation(line: 247, column: 38, scope: !3618)
!3686 = !DILocation(line: 247, column: 20, scope: !3618)
!3687 = !DILocation(line: 247, column: 15, scope: !3618)
!3688 = !DILocation(line: 246, column: 35, scope: !3618)
!3689 = !DILocation(line: 246, column: 20, scope: !3618)
!3690 = !DILocation(line: 246, column: 4, scope: !3618)
!3691 = !DILocation(line: 246, column: 27, scope: !3618)
!3692 = !DILocation(line: 246, column: 33, scope: !3618)
!3693 = !DILocation(line: 249, column: 17, scope: !3618)
!3694 = !DILocation(line: 249, column: 15, scope: !3618)
!3695 = !DILocation(line: 250, column: 8, scope: !3696)
!3696 = distinct !DILexicalBlock(scope: !3618, file: !3, line: 250, column: 8)
!3697 = !DILocation(line: 250, column: 19, scope: !3696)
!3698 = !DILocation(line: 250, column: 8, scope: !3618)
!3699 = !DILocation(line: 252, column: 8, scope: !3700)
!3700 = distinct !DILexicalBlock(scope: !3696, file: !3, line: 251, column: 6)
!3701 = !DILocation(line: 253, column: 8, scope: !3700)
!3702 = !DILocation(line: 254, column: 8, scope: !3700)
!3703 = !DILocation(line: 255, column: 35, scope: !3700)
!3704 = !DILocation(line: 255, column: 8, scope: !3700)
!3705 = !DILocation(line: 255, column: 33, scope: !3700)
!3706 = !DILocation(line: 258, column: 27, scope: !3700)
!3707 = !DILocation(line: 258, column: 43, scope: !3700)
!3708 = !DILocation(line: 258, column: 12, scope: !3700)
!3709 = !DILocation(line: 257, column: 23, scope: !3700)
!3710 = !DILocation(line: 257, column: 8, scope: !3700)
!3711 = !DILocation(line: 257, column: 30, scope: !3700)
!3712 = !DILocation(line: 258, column: 10, scope: !3700)
!3713 = !DILocation(line: 260, column: 27, scope: !3700)
!3714 = !DILocation(line: 260, column: 44, scope: !3700)
!3715 = !DILocation(line: 260, column: 12, scope: !3700)
!3716 = !DILocation(line: 259, column: 26, scope: !3700)
!3717 = !DILocation(line: 259, column: 8, scope: !3700)
!3718 = !DILocation(line: 259, column: 33, scope: !3700)
!3719 = !DILocation(line: 260, column: 10, scope: !3700)
!3720 = !DILocation(line: 261, column: 6, scope: !3700)
!3721 = !DILocation(line: 263, column: 15, scope: !3618)
!3722 = !DILocation(line: 263, column: 4, scope: !3618)
!3723 = !DILocation(line: 263, column: 22, scope: !3618)
!3724 = !DILocation(line: 263, column: 31, scope: !3618)
!3725 = !DILocation(line: 265, column: 50, scope: !3618)
!3726 = !DILocation(line: 265, column: 41, scope: !3618)
!3727 = !DILocation(line: 265, column: 57, scope: !3618)
!3728 = !DILocation(line: 265, column: 23, scope: !3618)
!3729 = !DILocation(line: 265, column: 8, scope: !3618)
!3730 = !DILocation(line: 265, column: 30, scope: !3618)
!3731 = !DILocation(line: 265, column: 39, scope: !3618)
!3732 = !DILocation(line: 264, column: 51, scope: !3618)
!3733 = !DILocation(line: 264, column: 36, scope: !3618)
!3734 = !DILocation(line: 264, column: 58, scope: !3618)
!3735 = !DILocation(line: 265, column: 6, scope: !3618)
!3736 = !DILocation(line: 264, column: 18, scope: !3618)
!3737 = !DILocation(line: 264, column: 4, scope: !3618)
!3738 = !DILocation(line: 264, column: 25, scope: !3618)
!3739 = !DILocation(line: 264, column: 34, scope: !3618)
!3740 = !DILocation(line: 267, column: 8, scope: !3618)
!3741 = !DILocation(line: 267, column: 6, scope: !3618)
!3742 = !DILocation(line: 268, column: 11, scope: !3743)
!3743 = distinct !DILexicalBlock(scope: !3618, file: !3, line: 268, column: 4)
!3744 = !DILocation(line: 268, column: 9, scope: !3743)
!3745 = !DILocation(line: 268, column: 16, scope: !3746)
!3746 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 268, column: 4)
!3747 = !DILocation(line: 268, column: 20, scope: !3746)
!3748 = !DILocation(line: 268, column: 18, scope: !3746)
!3749 = !DILocation(line: 268, column: 4, scope: !3743)
!3750 = !DILocation(line: 270, column: 36, scope: !3751)
!3751 = distinct !DILexicalBlock(scope: !3746, file: !3, line: 269, column: 6)
!3752 = !DILocation(line: 270, column: 31, scope: !3751)
!3753 = !DILocation(line: 270, column: 8, scope: !3751)
!3754 = !DILocation(line: 270, column: 29, scope: !3751)
!3755 = !DILocation(line: 271, column: 41, scope: !3751)
!3756 = !DILocation(line: 271, column: 36, scope: !3751)
!3757 = !DILocation(line: 271, column: 8, scope: !3751)
!3758 = !DILocation(line: 271, column: 34, scope: !3751)
!3759 = !DILocation(line: 273, column: 52, scope: !3751)
!3760 = !DILocation(line: 273, column: 64, scope: !3751)
!3761 = !DILocation(line: 273, column: 37, scope: !3751)
!3762 = !DILocation(line: 273, column: 19, scope: !3751)
!3763 = !DILocation(line: 273, column: 8, scope: !3751)
!3764 = !DILocation(line: 273, column: 26, scope: !3751)
!3765 = !DILocation(line: 273, column: 32, scope: !3751)
!3766 = !DILocation(line: 273, column: 35, scope: !3751)
!3767 = !DILocation(line: 274, column: 55, scope: !3751)
!3768 = !DILocation(line: 274, column: 71, scope: !3751)
!3769 = !DILocation(line: 274, column: 40, scope: !3751)
!3770 = !DILocation(line: 274, column: 22, scope: !3751)
!3771 = !DILocation(line: 274, column: 8, scope: !3751)
!3772 = !DILocation(line: 274, column: 29, scope: !3751)
!3773 = !DILocation(line: 274, column: 35, scope: !3751)
!3774 = !DILocation(line: 274, column: 38, scope: !3751)
!3775 = !DILocation(line: 275, column: 56, scope: !3751)
!3776 = !DILocation(line: 275, column: 73, scope: !3751)
!3777 = !DILocation(line: 275, column: 41, scope: !3751)
!3778 = !DILocation(line: 275, column: 23, scope: !3751)
!3779 = !DILocation(line: 275, column: 8, scope: !3751)
!3780 = !DILocation(line: 275, column: 30, scope: !3751)
!3781 = !DILocation(line: 275, column: 36, scope: !3751)
!3782 = !DILocation(line: 275, column: 39, scope: !3751)
!3783 = !DILocation(line: 276, column: 56, scope: !3751)
!3784 = !DILocation(line: 276, column: 73, scope: !3751)
!3785 = !DILocation(line: 276, column: 41, scope: !3751)
!3786 = !DILocation(line: 276, column: 23, scope: !3751)
!3787 = !DILocation(line: 276, column: 8, scope: !3751)
!3788 = !DILocation(line: 276, column: 30, scope: !3751)
!3789 = !DILocation(line: 276, column: 36, scope: !3751)
!3790 = !DILocation(line: 276, column: 39, scope: !3751)
!3791 = !DILocation(line: 277, column: 6, scope: !3751)
!3792 = !DILocation(line: 268, column: 24, scope: !3746)
!3793 = !DILocation(line: 268, column: 4, scope: !3746)
!3794 = distinct !{!3794, !3749, !3795}
!3795 = !DILocation(line: 277, column: 6, scope: !3743)
!3796 = !DILocation(line: 278, column: 2, scope: !3618)
!3797 = !DILocation(line: 221, column: 12, scope: !3614)
!3798 = !DILocation(line: 221, column: 10, scope: !3614)
!3799 = !DILocation(line: 219, column: 7, scope: !3614)
!3800 = distinct !{!3800, !3616, !3801}
!3801 = !DILocation(line: 278, column: 2, scope: !3610)
!3802 = !DILocation(line: 279, column: 5, scope: !3601)
!3803 = !DILocation(line: 214, column: 35, scope: !3597)
!3804 = !DILocation(line: 214, column: 3, scope: !3597)
!3805 = distinct !{!3805, !3599, !3806}
!3806 = !DILocation(line: 279, column: 5, scope: !3594)
!3807 = !DILocation(line: 280, column: 3, scope: !3421)
!3808 = !DILocation(line: 281, column: 1, scope: !3421)
!3809 = distinct !DISubprogram(name: "rhs_regno", scope: !378, file: !378, line: 1051, type: !3810, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!3810 = !DISubroutineType(types: !3811)
!3811 = !{!7, !3812}
!3812 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !2302, line: 51, baseType: !3813)
!3813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3814, size: 64)
!3814 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2304)
!3815 = !DILocalVariable(name: "x", arg: 1, scope: !3809, file: !378, line: 1051, type: !3812)
!3816 = !DILocation(line: 1051, column: 22, scope: !3809)
!3817 = !DILocation(line: 1053, column: 10, scope: !3809)
!3818 = !DILocation(line: 1053, column: 3, scope: !3809)
!3819 = distinct !DISubprogram(name: "negate_rtx", scope: !3, file: !3, line: 288, type: !3820, scopeLine: 289, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!3820 = !DISubroutineType(types: !3821)
!3821 = !{!2301, !5, !2301}
!3822 = !DILocalVariable(name: "mode", arg: 1, scope: !3819, file: !3, line: 288, type: !5)
!3823 = !DILocation(line: 288, column: 31, scope: !3819)
!3824 = !DILocalVariable(name: "x", arg: 2, scope: !3819, file: !3, line: 288, type: !2301)
!3825 = !DILocation(line: 288, column: 41, scope: !3819)
!3826 = !DILocalVariable(name: "result", scope: !3819, file: !3, line: 290, type: !2301)
!3827 = !DILocation(line: 290, column: 7, scope: !3819)
!3828 = !DILocation(line: 290, column: 47, scope: !3819)
!3829 = !DILocation(line: 290, column: 53, scope: !3819)
!3830 = !DILocation(line: 290, column: 56, scope: !3819)
!3831 = !DILocation(line: 290, column: 16, scope: !3819)
!3832 = !DILocation(line: 292, column: 7, scope: !3833)
!3833 = distinct !DILexicalBlock(scope: !3819, file: !3, line: 292, column: 7)
!3834 = !DILocation(line: 292, column: 14, scope: !3833)
!3835 = !DILocation(line: 292, column: 7, scope: !3819)
!3836 = !DILocation(line: 293, column: 27, scope: !3833)
!3837 = !DILocation(line: 293, column: 44, scope: !3833)
!3838 = !DILocation(line: 293, column: 14, scope: !3833)
!3839 = !DILocation(line: 293, column: 12, scope: !3833)
!3840 = !DILocation(line: 293, column: 5, scope: !3833)
!3841 = !DILocation(line: 295, column: 10, scope: !3819)
!3842 = !DILocation(line: 295, column: 3, scope: !3819)
!3843 = distinct !DISubprogram(name: "mode_for_extraction", scope: !3, file: !3, line: 303, type: !3844, scopeLine: 304, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!3844 = !DISubroutineType(types: !3845)
!3845 = !{!5, !705, !2325}
!3846 = !DILocalVariable(name: "pattern", arg: 1, scope: !3843, file: !3, line: 303, type: !705)
!3847 = !DILocation(line: 303, column: 46, scope: !3843)
!3848 = !DILocalVariable(name: "opno", arg: 2, scope: !3843, file: !3, line: 303, type: !2325)
!3849 = !DILocation(line: 303, column: 59, scope: !3843)
!3850 = !DILocalVariable(name: "data", scope: !3843, file: !3, line: 305, type: !3851)
!3851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3852, size: 64)
!3852 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3853)
!3853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "insn_data", file: !3854, line: 273, size: 320, elements: !3855)
!3854 = !DIFile(filename: "./recog.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3855 = !{!3856, !3858, !3870, !3876, !3893, !3894, !3895, !3896}
!3856 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3853, file: !3854, line: 275, baseType: !3857, size: 64)
!3857 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2328)
!3858 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3853, file: !3854, line: 281, baseType: !3859, size: 64, offset: 64)
!3859 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3853, file: !3854, line: 277, size: 64, elements: !3860)
!3860 = !{!3861, !3862, !3864}
!3861 = !DIDerivedType(tag: DW_TAG_member, name: "single", scope: !3859, file: !3854, line: 278, baseType: !2328, size: 64)
!3862 = !DIDerivedType(tag: DW_TAG_member, name: "multi", scope: !3859, file: !3854, line: 279, baseType: !3863, size: 64)
!3863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3857, size: 64)
!3864 = !DIDerivedType(tag: DW_TAG_member, name: "function", scope: !3859, file: !3854, line: 280, baseType: !3865, size: 64)
!3865 = !DIDerivedType(tag: DW_TAG_typedef, name: "insn_output_fn", file: !3854, line: 250, baseType: !3866)
!3866 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3867, size: 64)
!3867 = !DISubroutineType(types: !3868)
!3868 = !{!2328, !3869, !2301}
!3869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2301, size: 64)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "genfun", scope: !3853, file: !3854, line: 289, baseType: !3871, size: 64, offset: 128)
!3871 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3872)
!3872 = !DIDerivedType(tag: DW_TAG_typedef, name: "insn_gen_fn", file: !3854, line: 251, baseType: !3873)
!3873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3874, size: 64)
!3874 = !DISubroutineType(types: !3875)
!3875 = !{!2301, !2301, null}
!3876 = !DIDerivedType(tag: DW_TAG_member, name: "operand", scope: !3853, file: !3854, line: 290, baseType: !3877, size: 64, offset: 192)
!3877 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3878)
!3878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3879, size: 64)
!3879 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3880)
!3880 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "insn_operand_data", file: !3854, line: 253, size: 192, elements: !3881)
!3881 = !{!3882, !3888, !3889, !3891, !3892}
!3882 = !DIDerivedType(tag: DW_TAG_member, name: "predicate", scope: !3880, file: !3854, line: 255, baseType: !3883, size: 64)
!3883 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3884)
!3884 = !DIDerivedType(tag: DW_TAG_typedef, name: "insn_operand_predicate_fn", file: !3854, line: 249, baseType: !3885)
!3885 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3886, size: 64)
!3886 = !DISubroutineType(types: !3887)
!3887 = !{!2325, !2301, !5}
!3888 = !DIDerivedType(tag: DW_TAG_member, name: "constraint", scope: !3880, file: !3854, line: 257, baseType: !3857, size: 64, offset: 64)
!3889 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3880, file: !3854, line: 259, baseType: !3890, size: 16, offset: 128, flags: DIFlagBitField, extraData: i64 128)
!3890 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!3891 = !DIDerivedType(tag: DW_TAG_member, name: "strict_low", scope: !3880, file: !3854, line: 261, baseType: !2329, size: 8, offset: 144)
!3892 = !DIDerivedType(tag: DW_TAG_member, name: "eliminable", scope: !3880, file: !3854, line: 263, baseType: !2329, size: 8, offset: 152)
!3893 = !DIDerivedType(tag: DW_TAG_member, name: "n_operands", scope: !3853, file: !3854, line: 292, baseType: !2329, size: 8, offset: 256)
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "n_dups", scope: !3853, file: !3854, line: 293, baseType: !2329, size: 8, offset: 264)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "n_alternatives", scope: !3853, file: !3854, line: 294, baseType: !2329, size: 8, offset: 272)
!3896 = !DIDerivedType(tag: DW_TAG_member, name: "output_format", scope: !3853, file: !3854, line: 295, baseType: !2329, size: 8, offset: 280)
!3897 = !DILocation(line: 305, column: 27, scope: !3843)
!3898 = !DILocation(line: 307, column: 11, scope: !3843)
!3899 = !DILocation(line: 307, column: 3, scope: !3843)
!3900 = !DILocation(line: 312, column: 9, scope: !3901)
!3901 = distinct !DILexicalBlock(scope: !3902, file: !3, line: 311, column: 2)
!3902 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 310, column: 11)
!3903 = distinct !DILexicalBlock(scope: !3843, file: !3, line: 308, column: 5)
!3904 = !DILocation(line: 313, column: 4, scope: !3901)
!3905 = !DILocation(line: 320, column: 9, scope: !3906)
!3906 = distinct !DILexicalBlock(scope: !3907, file: !3, line: 319, column: 2)
!3907 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 318, column: 11)
!3908 = !DILocation(line: 321, column: 4, scope: !3906)
!3909 = !DILocation(line: 328, column: 9, scope: !3910)
!3910 = distinct !DILexicalBlock(scope: !3911, file: !3, line: 327, column: 2)
!3911 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 326, column: 11)
!3912 = !DILocation(line: 329, column: 4, scope: !3910)
!3913 = !DILocation(line: 334, column: 7, scope: !3903)
!3914 = !DILocation(line: 335, column: 5, scope: !3903)
!3915 = !DILocation(line: 337, column: 7, scope: !3916)
!3916 = distinct !DILexicalBlock(scope: !3843, file: !3, line: 337, column: 7)
!3917 = !DILocation(line: 337, column: 12, scope: !3916)
!3918 = !DILocation(line: 337, column: 7, scope: !3843)
!3919 = !DILocation(line: 338, column: 5, scope: !3916)
!3920 = !DILocation(line: 342, column: 7, scope: !3921)
!3921 = distinct !DILexicalBlock(scope: !3843, file: !3, line: 342, column: 7)
!3922 = !DILocation(line: 342, column: 13, scope: !3921)
!3923 = !DILocation(line: 342, column: 21, scope: !3921)
!3924 = !DILocation(line: 342, column: 27, scope: !3921)
!3925 = !DILocation(line: 342, column: 32, scope: !3921)
!3926 = !DILocation(line: 342, column: 7, scope: !3843)
!3927 = !DILocation(line: 343, column: 12, scope: !3921)
!3928 = !DILocation(line: 343, column: 5, scope: !3921)
!3929 = !DILocation(line: 344, column: 10, scope: !3843)
!3930 = !DILocation(line: 344, column: 16, scope: !3843)
!3931 = !DILocation(line: 344, column: 24, scope: !3843)
!3932 = !DILocation(line: 344, column: 30, scope: !3843)
!3933 = !DILocation(line: 344, column: 3, scope: !3843)
!3934 = !DILocation(line: 345, column: 1, scope: !3843)
!3935 = distinct !DISubprogram(name: "store_bit_field", scope: !3, file: !3, line: 851, type: !3936, scopeLine: 854, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!3936 = !DISubroutineType(types: !3937)
!3937 = !{null, !2301, !2375, !2375, !5, !2301}
!3938 = !DILocalVariable(name: "str_rtx", arg: 1, scope: !3935, file: !3, line: 851, type: !2301)
!3939 = !DILocation(line: 851, column: 22, scope: !3935)
!3940 = !DILocalVariable(name: "bitsize", arg: 2, scope: !3935, file: !3, line: 851, type: !2375)
!3941 = !DILocation(line: 851, column: 54, scope: !3935)
!3942 = !DILocalVariable(name: "bitnum", arg: 3, scope: !3935, file: !3, line: 852, type: !2375)
!3943 = !DILocation(line: 852, column: 27, scope: !3935)
!3944 = !DILocalVariable(name: "fieldmode", arg: 4, scope: !3935, file: !3, line: 852, type: !5)
!3945 = !DILocation(line: 852, column: 53, scope: !3935)
!3946 = !DILocalVariable(name: "value", arg: 5, scope: !3935, file: !3, line: 853, type: !2301)
!3947 = !DILocation(line: 853, column: 8, scope: !3935)
!3948 = !DILocation(line: 855, column: 27, scope: !3949)
!3949 = distinct !DILexicalBlock(scope: !3935, file: !3, line: 855, column: 7)
!3950 = !DILocation(line: 855, column: 36, scope: !3949)
!3951 = !DILocation(line: 855, column: 45, scope: !3949)
!3952 = !DILocation(line: 855, column: 53, scope: !3949)
!3953 = !DILocation(line: 855, column: 64, scope: !3949)
!3954 = !DILocation(line: 855, column: 8, scope: !3949)
!3955 = !DILocation(line: 855, column: 7, scope: !3935)
!3956 = !DILocation(line: 856, column: 5, scope: !3949)
!3957 = !DILocation(line: 857, column: 1, scope: !3935)
!3958 = distinct !DISubprogram(name: "store_bit_field_1", scope: !3, file: !3, line: 371, type: !3959, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!3959 = !DISubroutineType(types: !3960)
!3960 = !{!2535, !2301, !2375, !2375, !5, !2301, !2535}
!3961 = !DILocalVariable(name: "str_rtx", arg: 1, scope: !3958, file: !3, line: 371, type: !2301)
!3962 = !DILocation(line: 371, column: 24, scope: !3958)
!3963 = !DILocalVariable(name: "bitsize", arg: 2, scope: !3958, file: !3, line: 371, type: !2375)
!3964 = !DILocation(line: 371, column: 56, scope: !3958)
!3965 = !DILocalVariable(name: "bitnum", arg: 3, scope: !3958, file: !3, line: 372, type: !2375)
!3966 = !DILocation(line: 372, column: 29, scope: !3958)
!3967 = !DILocalVariable(name: "fieldmode", arg: 4, scope: !3958, file: !3, line: 372, type: !5)
!3968 = !DILocation(line: 372, column: 55, scope: !3958)
!3969 = !DILocalVariable(name: "value", arg: 5, scope: !3958, file: !3, line: 373, type: !2301)
!3970 = !DILocation(line: 373, column: 10, scope: !3958)
!3971 = !DILocalVariable(name: "fallback_p", arg: 6, scope: !3958, file: !3, line: 373, type: !2535)
!3972 = !DILocation(line: 373, column: 22, scope: !3958)
!3973 = !DILocalVariable(name: "unit", scope: !3958, file: !3, line: 375, type: !7)
!3974 = !DILocation(line: 375, column: 16, scope: !3958)
!3975 = !DILocation(line: 376, column: 8, scope: !3958)
!3976 = !DILocation(line: 376, column: 7, scope: !3958)
!3977 = !DILocalVariable(name: "offset", scope: !3958, file: !3, line: 377, type: !2375)
!3978 = !DILocation(line: 377, column: 26, scope: !3958)
!3979 = !DILocalVariable(name: "bitpos", scope: !3958, file: !3, line: 377, type: !2375)
!3980 = !DILocation(line: 377, column: 34, scope: !3958)
!3981 = !DILocalVariable(name: "op0", scope: !3958, file: !3, line: 378, type: !2301)
!3982 = !DILocation(line: 378, column: 7, scope: !3958)
!3983 = !DILocation(line: 378, column: 13, scope: !3958)
!3984 = !DILocalVariable(name: "byte_offset", scope: !3958, file: !3, line: 379, type: !2325)
!3985 = !DILocation(line: 379, column: 7, scope: !3958)
!3986 = !DILocalVariable(name: "orig_value", scope: !3958, file: !3, line: 380, type: !2301)
!3987 = !DILocation(line: 380, column: 7, scope: !3958)
!3988 = !DILocalVariable(name: "op_mode", scope: !3958, file: !3, line: 382, type: !5)
!3989 = !DILocation(line: 382, column: 21, scope: !3958)
!3990 = !DILocation(line: 382, column: 31, scope: !3958)
!3991 = !DILocation(line: 384, column: 3, scope: !3958)
!3992 = !DILocation(line: 384, column: 10, scope: !3958)
!3993 = !DILocation(line: 384, column: 25, scope: !3958)
!3994 = !DILocalVariable(name: "inner_mode_size", scope: !3995, file: !3, line: 391, type: !2325)
!3995 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 385, column: 5)
!3996 = !DILocation(line: 391, column: 11, scope: !3995)
!3997 = !DILocation(line: 391, column: 29, scope: !3995)
!3998 = !DILocalVariable(name: "outer_mode_size", scope: !3995, file: !3, line: 392, type: !2325)
!3999 = !DILocation(line: 392, column: 11, scope: !3995)
!4000 = !DILocation(line: 392, column: 29, scope: !3995)
!4001 = !DILocation(line: 394, column: 19, scope: !3995)
!4002 = !DILocation(line: 397, column: 11, scope: !4003)
!4003 = distinct !DILexicalBlock(scope: !3995, file: !3, line: 397, column: 11)
!4004 = !DILocation(line: 397, column: 29, scope: !4003)
!4005 = !DILocation(line: 397, column: 34, scope: !4003)
!4006 = !DILocation(line: 397, column: 37, scope: !4003)
!4007 = !DILocation(line: 397, column: 55, scope: !4003)
!4008 = !DILocation(line: 397, column: 53, scope: !4003)
!4009 = !DILocation(line: 397, column: 11, scope: !3995)
!4010 = !DILocalVariable(name: "difference", scope: !4011, file: !3, line: 399, type: !2325)
!4011 = distinct !DILexicalBlock(scope: !4003, file: !3, line: 398, column: 2)
!4012 = !DILocation(line: 399, column: 8, scope: !4011)
!4013 = !DILocation(line: 399, column: 21, scope: !4011)
!4014 = !DILocation(line: 399, column: 39, scope: !4011)
!4015 = !DILocation(line: 399, column: 37, scope: !4011)
!4016 = !DILocation(line: 405, column: 2, scope: !4011)
!4017 = !DILocation(line: 407, column: 16, scope: !4003)
!4018 = !DILocation(line: 407, column: 14, scope: !4003)
!4019 = !DILocation(line: 409, column: 17, scope: !3995)
!4020 = !DILocation(line: 409, column: 29, scope: !3995)
!4021 = !DILocation(line: 409, column: 14, scope: !3995)
!4022 = !DILocation(line: 410, column: 13, scope: !3995)
!4023 = !DILocation(line: 410, column: 11, scope: !3995)
!4024 = distinct !{!4024, !3991, !4025}
!4025 = !DILocation(line: 411, column: 5, scope: !3958)
!4026 = !DILocation(line: 416, column: 7, scope: !4027)
!4027 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 416, column: 7)
!4028 = !DILocation(line: 416, column: 19, scope: !4027)
!4029 = !DILocation(line: 416, column: 22, scope: !4027)
!4030 = !DILocation(line: 416, column: 32, scope: !4027)
!4031 = !DILocation(line: 416, column: 29, scope: !4027)
!4032 = !DILocation(line: 416, column: 7, scope: !3958)
!4033 = !DILocation(line: 417, column: 5, scope: !4027)
!4034 = !DILocation(line: 421, column: 7, scope: !4035)
!4035 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 421, column: 7)
!4036 = !DILocation(line: 422, column: 7, scope: !4035)
!4037 = !DILocation(line: 422, column: 11, scope: !4035)
!4038 = !DILocation(line: 423, column: 7, scope: !4035)
!4039 = !DILocation(line: 423, column: 11, scope: !4035)
!4040 = !DILocation(line: 423, column: 58, scope: !4035)
!4041 = !DILocation(line: 424, column: 4, scope: !4035)
!4042 = !DILocation(line: 425, column: 7, scope: !4035)
!4043 = !DILocation(line: 425, column: 10, scope: !4035)
!4044 = !DILocation(line: 425, column: 23, scope: !4035)
!4045 = !DILocation(line: 425, column: 20, scope: !4035)
!4046 = !DILocation(line: 426, column: 7, scope: !4035)
!4047 = !DILocation(line: 426, column: 10, scope: !4035)
!4048 = !DILocation(line: 426, column: 21, scope: !4035)
!4049 = !DILocation(line: 426, column: 18, scope: !4035)
!4050 = !DILocation(line: 427, column: 7, scope: !4035)
!4051 = !DILocation(line: 427, column: 12, scope: !4035)
!4052 = !DILocation(line: 427, column: 21, scope: !4035)
!4053 = !DILocation(line: 427, column: 19, scope: !4035)
!4054 = !DILocation(line: 421, column: 7, scope: !3958)
!4055 = !DILocalVariable(name: "outermode", scope: !4056, file: !3, line: 429, type: !5)
!4056 = distinct !DILexicalBlock(scope: !4035, file: !3, line: 428, column: 5)
!4057 = !DILocation(line: 429, column: 25, scope: !4056)
!4058 = !DILocation(line: 429, column: 37, scope: !4056)
!4059 = !DILocalVariable(name: "innermode", scope: !4056, file: !3, line: 430, type: !5)
!4060 = !DILocation(line: 430, column: 25, scope: !4056)
!4061 = !DILocation(line: 430, column: 37, scope: !4056)
!4062 = !DILocalVariable(name: "icode", scope: !4056, file: !3, line: 431, type: !2325)
!4063 = !DILocation(line: 431, column: 11, scope: !4056)
!4064 = !DILocation(line: 431, column: 25, scope: !4056)
!4065 = !DILocation(line: 431, column: 67, scope: !4056)
!4066 = !DILocalVariable(name: "pos", scope: !4056, file: !3, line: 432, type: !2325)
!4067 = !DILocation(line: 432, column: 11, scope: !4056)
!4068 = !DILocation(line: 432, column: 17, scope: !4056)
!4069 = !DILocation(line: 432, column: 26, scope: !4056)
!4070 = !DILocation(line: 432, column: 24, scope: !4056)
!4071 = !DILocalVariable(name: "rtxpos", scope: !4056, file: !3, line: 433, type: !2301)
!4072 = !DILocation(line: 433, column: 11, scope: !4056)
!4073 = !DILocation(line: 433, column: 20, scope: !4056)
!4074 = !DILocalVariable(name: "src", scope: !4056, file: !3, line: 434, type: !2301)
!4075 = !DILocation(line: 434, column: 11, scope: !4056)
!4076 = !DILocation(line: 434, column: 17, scope: !4056)
!4077 = !DILocalVariable(name: "dest", scope: !4056, file: !3, line: 435, type: !2301)
!4078 = !DILocation(line: 435, column: 11, scope: !4056)
!4079 = !DILocation(line: 435, column: 18, scope: !4056)
!4080 = !DILocalVariable(name: "pat", scope: !4056, file: !3, line: 436, type: !2301)
!4081 = !DILocation(line: 436, column: 11, scope: !4056)
!4082 = !DILocalVariable(name: "seq", scope: !4056, file: !3, line: 436, type: !2301)
!4083 = !DILocation(line: 436, column: 16, scope: !4056)
!4084 = !DILocalVariable(name: "mode0", scope: !4056, file: !3, line: 437, type: !5)
!4085 = !DILocation(line: 437, column: 25, scope: !4056)
!4086 = !DILocation(line: 437, column: 43, scope: !4056)
!4087 = !DILocation(line: 437, column: 33, scope: !4056)
!4088 = !DILocation(line: 437, column: 50, scope: !4056)
!4089 = !DILocation(line: 437, column: 61, scope: !4056)
!4090 = !DILocalVariable(name: "mode1", scope: !4056, file: !3, line: 438, type: !5)
!4091 = !DILocation(line: 438, column: 25, scope: !4056)
!4092 = !DILocation(line: 438, column: 43, scope: !4056)
!4093 = !DILocation(line: 438, column: 33, scope: !4056)
!4094 = !DILocation(line: 438, column: 50, scope: !4056)
!4095 = !DILocation(line: 438, column: 61, scope: !4056)
!4096 = !DILocalVariable(name: "mode2", scope: !4056, file: !3, line: 439, type: !5)
!4097 = !DILocation(line: 439, column: 25, scope: !4056)
!4098 = !DILocation(line: 439, column: 43, scope: !4056)
!4099 = !DILocation(line: 439, column: 33, scope: !4056)
!4100 = !DILocation(line: 439, column: 50, scope: !4056)
!4101 = !DILocation(line: 439, column: 61, scope: !4056)
!4102 = !DILocation(line: 441, column: 7, scope: !4056)
!4103 = !DILocation(line: 443, column: 25, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4056, file: !3, line: 443, column: 11)
!4105 = !DILocation(line: 443, column: 15, scope: !4104)
!4106 = !DILocation(line: 443, column: 32, scope: !4104)
!4107 = !DILocation(line: 443, column: 43, scope: !4104)
!4108 = !DILocation(line: 443, column: 55, scope: !4104)
!4109 = !DILocation(line: 443, column: 60, scope: !4104)
!4110 = !DILocation(line: 443, column: 13, scope: !4104)
!4111 = !DILocation(line: 443, column: 11, scope: !4056)
!4112 = !DILocation(line: 444, column: 26, scope: !4104)
!4113 = !DILocation(line: 444, column: 33, scope: !4104)
!4114 = !DILocation(line: 444, column: 8, scope: !4104)
!4115 = !DILocation(line: 444, column: 6, scope: !4104)
!4116 = !DILocation(line: 444, column: 2, scope: !4104)
!4117 = !DILocation(line: 446, column: 25, scope: !4118)
!4118 = distinct !DILexicalBlock(scope: !4056, file: !3, line: 446, column: 11)
!4119 = !DILocation(line: 446, column: 15, scope: !4118)
!4120 = !DILocation(line: 446, column: 32, scope: !4118)
!4121 = !DILocation(line: 446, column: 43, scope: !4118)
!4122 = !DILocation(line: 446, column: 55, scope: !4118)
!4123 = !DILocation(line: 446, column: 63, scope: !4118)
!4124 = !DILocation(line: 446, column: 13, scope: !4118)
!4125 = !DILocation(line: 446, column: 11, scope: !4056)
!4126 = !DILocation(line: 447, column: 29, scope: !4118)
!4127 = !DILocation(line: 447, column: 36, scope: !4118)
!4128 = !DILocation(line: 447, column: 11, scope: !4118)
!4129 = !DILocation(line: 447, column: 9, scope: !4118)
!4130 = !DILocation(line: 447, column: 2, scope: !4118)
!4131 = !DILocation(line: 451, column: 7, scope: !4056)
!4132 = !DILocation(line: 454, column: 13, scope: !4056)
!4133 = !DILocation(line: 454, column: 30, scope: !4056)
!4134 = !DILocation(line: 454, column: 36, scope: !4056)
!4135 = !DILocation(line: 454, column: 41, scope: !4056)
!4136 = !DILocation(line: 454, column: 11, scope: !4056)
!4137 = !DILocation(line: 455, column: 13, scope: !4056)
!4138 = !DILocation(line: 455, column: 11, scope: !4056)
!4139 = !DILocation(line: 456, column: 7, scope: !4056)
!4140 = !DILocation(line: 457, column: 11, scope: !4141)
!4141 = distinct !DILexicalBlock(scope: !4056, file: !3, line: 457, column: 11)
!4142 = !DILocation(line: 457, column: 11, scope: !4056)
!4143 = !DILocation(line: 459, column: 15, scope: !4144)
!4144 = distinct !DILexicalBlock(scope: !4141, file: !3, line: 458, column: 2)
!4145 = !DILocation(line: 459, column: 4, scope: !4144)
!4146 = !DILocation(line: 460, column: 15, scope: !4144)
!4147 = !DILocation(line: 460, column: 4, scope: !4144)
!4148 = !DILocation(line: 461, column: 4, scope: !4144)
!4149 = !DILocation(line: 463, column: 5, scope: !4056)
!4150 = !DILocation(line: 472, column: 12, scope: !3958)
!4151 = !DILocation(line: 472, column: 21, scope: !3958)
!4152 = !DILocation(line: 472, column: 19, scope: !3958)
!4153 = !DILocation(line: 472, column: 10, scope: !3958)
!4154 = !DILocation(line: 473, column: 12, scope: !3958)
!4155 = !DILocation(line: 473, column: 21, scope: !3958)
!4156 = !DILocation(line: 473, column: 19, scope: !3958)
!4157 = !DILocation(line: 473, column: 10, scope: !3958)
!4158 = !DILocation(line: 474, column: 18, scope: !3958)
!4159 = !DILocation(line: 474, column: 25, scope: !3958)
!4160 = !DILocation(line: 474, column: 42, scope: !3958)
!4161 = !DILocation(line: 475, column: 20, scope: !3958)
!4162 = !DILocation(line: 475, column: 27, scope: !3958)
!4163 = !DILocation(line: 475, column: 17, scope: !3958)
!4164 = !DILocation(line: 474, column: 17, scope: !3958)
!4165 = !DILocation(line: 474, column: 15, scope: !3958)
!4166 = !DILocation(line: 477, column: 7, scope: !4167)
!4167 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 477, column: 7)
!4168 = !DILocation(line: 477, column: 14, scope: !4167)
!4169 = !DILocation(line: 478, column: 7, scope: !4167)
!4170 = !DILocation(line: 478, column: 10, scope: !4167)
!4171 = !DILocation(line: 478, column: 21, scope: !4167)
!4172 = !DILocation(line: 478, column: 18, scope: !4167)
!4173 = !DILocation(line: 479, column: 7, scope: !4167)
!4174 = !DILocation(line: 479, column: 12, scope: !4167)
!4175 = !DILocation(line: 477, column: 7, scope: !3958)
!4176 = !DILocation(line: 480, column: 8, scope: !4167)
!4177 = !DILocation(line: 480, column: 34, scope: !4167)
!4178 = !DILocation(line: 481, column: 7, scope: !4167)
!4179 = !DILocation(line: 481, column: 10, scope: !4167)
!4180 = !DILocation(line: 481, column: 44, scope: !4167)
!4181 = !DILocation(line: 481, column: 41, scope: !4167)
!4182 = !DILocation(line: 482, column: 7, scope: !4167)
!4183 = !DILocation(line: 482, column: 10, scope: !4167)
!4184 = !DILocation(line: 482, column: 24, scope: !4167)
!4185 = !DILocation(line: 482, column: 22, scope: !4167)
!4186 = !DILocation(line: 482, column: 50, scope: !4167)
!4187 = !DILocation(line: 479, column: 11, scope: !4167)
!4188 = !DILocation(line: 484, column: 7, scope: !4167)
!4189 = !DILocation(line: 484, column: 11, scope: !4167)
!4190 = !DILocation(line: 484, column: 18, scope: !4167)
!4191 = !DILocation(line: 484, column: 36, scope: !4167)
!4192 = !DILocation(line: 484, column: 34, scope: !4167)
!4193 = !DILocation(line: 484, column: 44, scope: !4167)
!4194 = !DILocation(line: 485, column: 4, scope: !4167)
!4195 = !DILocation(line: 485, column: 7, scope: !4167)
!4196 = !DILocation(line: 485, column: 25, scope: !4167)
!4197 = !DILocation(line: 485, column: 23, scope: !4167)
!4198 = !DILocation(line: 485, column: 54, scope: !4167)
!4199 = !DILocation(line: 487, column: 11, scope: !4200)
!4200 = distinct !DILexicalBlock(scope: !4201, file: !3, line: 487, column: 11)
!4201 = distinct !DILexicalBlock(scope: !4167, file: !3, line: 486, column: 5)
!4202 = !DILocation(line: 487, column: 11, scope: !4201)
!4203 = !DILocation(line: 488, column: 8, scope: !4200)
!4204 = !DILocation(line: 488, column: 6, scope: !4200)
!4205 = !DILocation(line: 488, column: 2, scope: !4200)
!4206 = !DILocation(line: 489, column: 16, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4200, file: !3, line: 489, column: 16)
!4208 = !DILocation(line: 489, column: 34, scope: !4207)
!4209 = !DILocation(line: 489, column: 31, scope: !4207)
!4210 = !DILocation(line: 489, column: 16, scope: !4200)
!4211 = !DILocation(line: 490, column: 29, scope: !4207)
!4212 = !DILocation(line: 490, column: 40, scope: !4207)
!4213 = !DILocation(line: 490, column: 45, scope: !4207)
!4214 = !DILocation(line: 491, column: 8, scope: !4207)
!4215 = !DILocation(line: 490, column: 8, scope: !4207)
!4216 = !DILocation(line: 490, column: 6, scope: !4207)
!4217 = !DILocation(line: 490, column: 2, scope: !4207)
!4218 = !DILocation(line: 492, column: 23, scope: !4201)
!4219 = !DILocation(line: 492, column: 28, scope: !4201)
!4220 = !DILocation(line: 492, column: 7, scope: !4201)
!4221 = !DILocation(line: 493, column: 7, scope: !4201)
!4222 = !DILocalVariable(name: "imode", scope: !4223, file: !3, line: 501, type: !5)
!4223 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 500, column: 3)
!4224 = !DILocation(line: 501, column: 23, scope: !4223)
!4225 = !DILocation(line: 501, column: 50, scope: !4223)
!4226 = !DILocation(line: 501, column: 31, scope: !4223)
!4227 = !DILocation(line: 502, column: 9, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4223, file: !3, line: 502, column: 9)
!4229 = !DILocation(line: 502, column: 18, scope: !4228)
!4230 = !DILocation(line: 502, column: 15, scope: !4228)
!4231 = !DILocation(line: 502, column: 9, scope: !4223)
!4232 = !DILocation(line: 504, column: 6, scope: !4233)
!4233 = distinct !DILexicalBlock(scope: !4234, file: !3, line: 504, column: 6)
!4234 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 503, column: 7)
!4235 = !DILocation(line: 504, column: 6, scope: !4234)
!4236 = !DILocation(line: 505, column: 10, scope: !4233)
!4237 = !DILocation(line: 505, column: 8, scope: !4233)
!4238 = !DILocation(line: 505, column: 4, scope: !4233)
!4239 = !DILocation(line: 508, column: 6, scope: !4240)
!4240 = distinct !DILexicalBlock(scope: !4233, file: !3, line: 507, column: 4)
!4241 = !DILocation(line: 509, column: 12, scope: !4240)
!4242 = !DILocation(line: 509, column: 25, scope: !4240)
!4243 = !DILocation(line: 509, column: 32, scope: !4240)
!4244 = !DILocation(line: 509, column: 10, scope: !4240)
!4245 = !DILocation(line: 511, column: 7, scope: !4234)
!4246 = !DILocation(line: 516, column: 7, scope: !4247)
!4247 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 516, column: 7)
!4248 = !DILocation(line: 516, column: 7, scope: !3958)
!4249 = !DILocation(line: 518, column: 13, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4247, file: !3, line: 517, column: 5)
!4251 = !DILocation(line: 518, column: 11, scope: !4250)
!4252 = !DILocation(line: 519, column: 26, scope: !4250)
!4253 = !DILocation(line: 519, column: 7, scope: !4250)
!4254 = !DILocation(line: 520, column: 21, scope: !4250)
!4255 = !DILocation(line: 520, column: 7, scope: !4250)
!4256 = !DILocation(line: 521, column: 5, scope: !4250)
!4257 = !DILocation(line: 534, column: 8, scope: !4258)
!4258 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 534, column: 7)
!4259 = !DILocation(line: 535, column: 7, scope: !4258)
!4260 = !DILocation(line: 536, column: 7, scope: !4258)
!4261 = !DILocation(line: 535, column: 30, scope: !4258)
!4262 = !DILocation(line: 535, column: 39, scope: !4258)
!4263 = !DILocation(line: 535, column: 37, scope: !4258)
!4264 = !DILocation(line: 535, column: 50, scope: !4258)
!4265 = !DILocation(line: 535, column: 47, scope: !4258)
!4266 = !DILocation(line: 535, column: 11, scope: !4258)
!4267 = !DILocation(line: 535, column: 57, scope: !4258)
!4268 = !DILocation(line: 535, column: 64, scope: !4258)
!4269 = !DILocation(line: 536, column: 10, scope: !4258)
!4270 = !DILocation(line: 536, column: 21, scope: !4258)
!4271 = !DILocation(line: 536, column: 18, scope: !4258)
!4272 = !DILocation(line: 537, column: 7, scope: !4258)
!4273 = !DILocation(line: 537, column: 11, scope: !4258)
!4274 = !DILocation(line: 537, column: 55, scope: !4258)
!4275 = !DILocation(line: 538, column: 4, scope: !4258)
!4276 = !DILocation(line: 534, column: 7, scope: !3958)
!4277 = !DILocalVariable(name: "icode", scope: !4278, file: !3, line: 540, type: !2325)
!4278 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 539, column: 5)
!4279 = !DILocation(line: 540, column: 11, scope: !4278)
!4280 = !DILocation(line: 540, column: 19, scope: !4278)
!4281 = !DILocation(line: 540, column: 63, scope: !4278)
!4282 = !DILocalVariable(name: "insn", scope: !4278, file: !3, line: 541, type: !2301)
!4283 = !DILocation(line: 541, column: 11, scope: !4278)
!4284 = !DILocalVariable(name: "start", scope: !4278, file: !3, line: 542, type: !2301)
!4285 = !DILocation(line: 542, column: 11, scope: !4278)
!4286 = !DILocation(line: 542, column: 19, scope: !4278)
!4287 = !DILocalVariable(name: "arg0", scope: !4278, file: !3, line: 543, type: !2301)
!4288 = !DILocation(line: 543, column: 11, scope: !4278)
!4289 = !DILocation(line: 543, column: 18, scope: !4278)
!4290 = !DILocation(line: 546, column: 11, scope: !4291)
!4291 = distinct !DILexicalBlock(scope: !4278, file: !3, line: 546, column: 11)
!4292 = !DILocation(line: 546, column: 31, scope: !4291)
!4293 = !DILocation(line: 546, column: 34, scope: !4291)
!4294 = !DILocation(line: 546, column: 11, scope: !4278)
!4295 = !DILocation(line: 547, column: 10, scope: !4291)
!4296 = !DILocation(line: 547, column: 23, scope: !4291)
!4297 = !DILocation(line: 547, column: 34, scope: !4291)
!4298 = !DILocation(line: 547, column: 8, scope: !4291)
!4299 = !DILocation(line: 547, column: 2, scope: !4291)
!4300 = !DILocation(line: 548, column: 18, scope: !4301)
!4301 = distinct !DILexicalBlock(scope: !4291, file: !3, line: 548, column: 16)
!4302 = !DILocation(line: 548, column: 35, scope: !4301)
!4303 = !DILocation(line: 549, column: 4, scope: !4301)
!4304 = !DILocation(line: 549, column: 7, scope: !4301)
!4305 = !DILocation(line: 549, column: 24, scope: !4301)
!4306 = !DILocation(line: 550, column: 4, scope: !4301)
!4307 = !DILocation(line: 550, column: 7, scope: !4301)
!4308 = !DILocation(line: 550, column: 24, scope: !4301)
!4309 = !DILocation(line: 548, column: 16, scope: !4291)
!4310 = !DILocation(line: 551, column: 27, scope: !4301)
!4311 = !DILocation(line: 551, column: 38, scope: !4301)
!4312 = !DILocation(line: 551, column: 10, scope: !4301)
!4313 = !DILocation(line: 551, column: 8, scope: !4301)
!4314 = !DILocation(line: 551, column: 2, scope: !4301)
!4315 = !DILocation(line: 553, column: 25, scope: !4316)
!4316 = distinct !DILexicalBlock(scope: !4278, file: !3, line: 553, column: 11)
!4317 = !DILocation(line: 553, column: 15, scope: !4316)
!4318 = !DILocation(line: 553, column: 32, scope: !4316)
!4319 = !DILocation(line: 553, column: 43, scope: !4316)
!4320 = !DILocation(line: 553, column: 55, scope: !4316)
!4321 = !DILocation(line: 553, column: 62, scope: !4316)
!4322 = !DILocation(line: 553, column: 13, scope: !4316)
!4323 = !DILocation(line: 553, column: 11, scope: !4278)
!4324 = !DILocation(line: 554, column: 28, scope: !4316)
!4325 = !DILocation(line: 554, column: 39, scope: !4316)
!4326 = !DILocation(line: 554, column: 10, scope: !4316)
!4327 = !DILocation(line: 554, column: 8, scope: !4316)
!4328 = !DILocation(line: 554, column: 2, scope: !4316)
!4329 = !DILocation(line: 556, column: 11, scope: !4330)
!4330 = distinct !DILexicalBlock(scope: !4278, file: !3, line: 556, column: 11)
!4331 = !DILocation(line: 556, column: 26, scope: !4330)
!4332 = !DILocation(line: 556, column: 11, scope: !4278)
!4333 = !DILocation(line: 561, column: 4, scope: !4334)
!4334 = distinct !DILexicalBlock(scope: !4330, file: !3, line: 557, column: 2)
!4335 = !DILocation(line: 564, column: 11, scope: !4334)
!4336 = !DILocation(line: 564, column: 9, scope: !4334)
!4337 = !DILocation(line: 565, column: 2, scope: !4334)
!4338 = !DILocation(line: 567, column: 15, scope: !4278)
!4339 = !DILocation(line: 568, column: 21, scope: !4278)
!4340 = !DILocation(line: 568, column: 32, scope: !4278)
!4341 = !DILocation(line: 569, column: 8, scope: !4278)
!4342 = !DILocation(line: 569, column: 15, scope: !4278)
!4343 = !DILocation(line: 569, column: 32, scope: !4278)
!4344 = !DILocation(line: 570, column: 10, scope: !4278)
!4345 = !DILocation(line: 570, column: 17, scope: !4278)
!4346 = !DILocation(line: 570, column: 7, scope: !4278)
!4347 = !DILocation(line: 569, column: 7, scope: !4278)
!4348 = !DILocation(line: 568, column: 5, scope: !4278)
!4349 = !DILocation(line: 571, column: 7, scope: !4278)
!4350 = !DILocation(line: 567, column: 12, scope: !4278)
!4351 = !DILocation(line: 572, column: 11, scope: !4352)
!4352 = distinct !DILexicalBlock(scope: !4278, file: !3, line: 572, column: 11)
!4353 = !DILocation(line: 572, column: 11, scope: !4278)
!4354 = !DILocation(line: 574, column: 15, scope: !4355)
!4355 = distinct !DILexicalBlock(scope: !4352, file: !3, line: 573, column: 2)
!4356 = !DILocation(line: 574, column: 4, scope: !4355)
!4357 = !DILocation(line: 575, column: 4, scope: !4355)
!4358 = !DILocation(line: 577, column: 27, scope: !4278)
!4359 = !DILocation(line: 577, column: 7, scope: !4278)
!4360 = !DILocation(line: 578, column: 5, scope: !4278)
!4361 = !DILocation(line: 582, column: 7, scope: !4362)
!4362 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 582, column: 7)
!4363 = !DILocation(line: 582, column: 15, scope: !4362)
!4364 = !DILocation(line: 582, column: 7, scope: !3958)
!4365 = !DILocalVariable(name: "backwards", scope: !4366, file: !3, line: 590, type: !7)
!4366 = distinct !DILexicalBlock(scope: !4362, file: !3, line: 583, column: 5)
!4367 = !DILocation(line: 590, column: 20, scope: !4366)
!4368 = !DILocalVariable(name: "nwords", scope: !4366, file: !3, line: 591, type: !7)
!4369 = !DILocation(line: 591, column: 20, scope: !4366)
!4370 = !DILocation(line: 591, column: 30, scope: !4366)
!4371 = !DILocation(line: 591, column: 38, scope: !4366)
!4372 = !DILocation(line: 591, column: 61, scope: !4366)
!4373 = !DILocation(line: 591, column: 29, scope: !4366)
!4374 = !DILocalVariable(name: "i", scope: !4366, file: !3, line: 592, type: !7)
!4375 = !DILocation(line: 592, column: 20, scope: !4366)
!4376 = !DILocalVariable(name: "last", scope: !4366, file: !3, line: 593, type: !2301)
!4377 = !DILocation(line: 593, column: 11, scope: !4366)
!4378 = !DILocation(line: 600, column: 19, scope: !4366)
!4379 = !DILocation(line: 600, column: 17, scope: !4366)
!4380 = !DILocation(line: 601, column: 11, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4366, file: !3, line: 601, column: 11)
!4382 = !DILocation(line: 601, column: 21, scope: !4381)
!4383 = !DILocation(line: 601, column: 11, scope: !4366)
!4384 = !DILocation(line: 602, column: 38, scope: !4381)
!4385 = !DILocation(line: 602, column: 45, scope: !4381)
!4386 = !DILocation(line: 602, column: 14, scope: !4381)
!4387 = !DILocation(line: 602, column: 12, scope: !4381)
!4388 = !DILocation(line: 602, column: 2, scope: !4381)
!4389 = !DILocation(line: 604, column: 14, scope: !4366)
!4390 = !DILocation(line: 604, column: 12, scope: !4366)
!4391 = !DILocation(line: 605, column: 14, scope: !4392)
!4392 = distinct !DILexicalBlock(scope: !4366, file: !3, line: 605, column: 7)
!4393 = !DILocation(line: 605, column: 12, scope: !4392)
!4394 = !DILocation(line: 605, column: 19, scope: !4395)
!4395 = distinct !DILexicalBlock(scope: !4392, file: !3, line: 605, column: 7)
!4396 = !DILocation(line: 605, column: 23, scope: !4395)
!4397 = !DILocation(line: 605, column: 21, scope: !4395)
!4398 = !DILocation(line: 605, column: 7, scope: !4392)
!4399 = !DILocalVariable(name: "wordnum", scope: !4400, file: !3, line: 609, type: !7)
!4400 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 606, column: 2)
!4401 = !DILocation(line: 609, column: 17, scope: !4400)
!4402 = !DILocation(line: 609, column: 28, scope: !4400)
!4403 = !DILocation(line: 609, column: 40, scope: !4400)
!4404 = !DILocation(line: 609, column: 49, scope: !4400)
!4405 = !DILocation(line: 609, column: 47, scope: !4400)
!4406 = !DILocation(line: 609, column: 51, scope: !4400)
!4407 = !DILocation(line: 609, column: 57, scope: !4400)
!4408 = !DILocalVariable(name: "bit_offset", scope: !4400, file: !3, line: 610, type: !7)
!4409 = !DILocation(line: 610, column: 17, scope: !4400)
!4410 = !DILocation(line: 610, column: 31, scope: !4400)
!4411 = !DILocation(line: 611, column: 12, scope: !4400)
!4412 = !DILocation(line: 614, column: 18, scope: !4400)
!4413 = !DILocation(line: 614, column: 20, scope: !4400)
!4414 = !DILocalVariable(name: "value_word", scope: !4400, file: !3, line: 615, type: !2301)
!4415 = !DILocation(line: 615, column: 8, scope: !4400)
!4416 = !DILocation(line: 615, column: 44, scope: !4400)
!4417 = !DILocation(line: 615, column: 51, scope: !4400)
!4418 = !DILocation(line: 615, column: 60, scope: !4400)
!4419 = !DILocation(line: 615, column: 21, scope: !4400)
!4420 = !DILocation(line: 617, column: 28, scope: !4421)
!4421 = distinct !DILexicalBlock(scope: !4400, file: !3, line: 617, column: 8)
!4422 = !DILocation(line: 617, column: 33, scope: !4421)
!4423 = !DILocation(line: 619, column: 7, scope: !4421)
!4424 = !DILocation(line: 619, column: 16, scope: !4421)
!4425 = !DILocation(line: 619, column: 14, scope: !4421)
!4426 = !DILocation(line: 619, column: 28, scope: !4421)
!4427 = !DILocation(line: 620, column: 7, scope: !4421)
!4428 = !DILocation(line: 620, column: 19, scope: !4421)
!4429 = !DILocation(line: 617, column: 9, scope: !4421)
!4430 = !DILocation(line: 617, column: 8, scope: !4400)
!4431 = !DILocation(line: 622, column: 28, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4421, file: !3, line: 621, column: 6)
!4433 = !DILocation(line: 622, column: 8, scope: !4432)
!4434 = !DILocation(line: 623, column: 8, scope: !4432)
!4435 = !DILocation(line: 625, column: 2, scope: !4400)
!4436 = !DILocation(line: 605, column: 32, scope: !4395)
!4437 = !DILocation(line: 605, column: 7, scope: !4395)
!4438 = distinct !{!4438, !4398, !4439}
!4439 = !DILocation(line: 625, column: 2, scope: !4392)
!4440 = !DILocation(line: 626, column: 7, scope: !4366)
!4441 = !DILocation(line: 635, column: 8, scope: !4442)
!4442 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 635, column: 7)
!4443 = !DILocation(line: 635, column: 7, scope: !3958)
!4444 = !DILocation(line: 637, column: 11, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4446, file: !3, line: 637, column: 11)
!4446 = distinct !DILexicalBlock(scope: !4442, file: !3, line: 636, column: 5)
!4447 = !DILocation(line: 637, column: 18, scope: !4445)
!4448 = !DILocation(line: 638, column: 4, scope: !4445)
!4449 = !DILocation(line: 638, column: 7, scope: !4445)
!4450 = !DILocation(line: 638, column: 38, scope: !4445)
!4451 = !DILocation(line: 637, column: 11, scope: !4446)
!4452 = !DILocation(line: 640, column: 9, scope: !4453)
!4453 = distinct !DILexicalBlock(scope: !4454, file: !3, line: 640, column: 8)
!4454 = distinct !DILexicalBlock(scope: !4445, file: !3, line: 639, column: 2)
!4455 = !DILocation(line: 640, column: 8, scope: !4454)
!4456 = !DILocation(line: 646, column: 8, scope: !4457)
!4457 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 641, column: 6)
!4458 = !DILocation(line: 649, column: 14, scope: !4457)
!4459 = !DILocation(line: 649, column: 12, scope: !4457)
!4460 = !DILocation(line: 650, column: 6, scope: !4457)
!4461 = !DILocation(line: 651, column: 26, scope: !4454)
!4462 = !DILocation(line: 652, column: 19, scope: !4454)
!4463 = !DILocation(line: 652, column: 25, scope: !4454)
!4464 = !DILocation(line: 652, column: 32, scope: !4454)
!4465 = !DILocation(line: 652, column: 24, scope: !4454)
!4466 = !DILocation(line: 651, column: 10, scope: !4454)
!4467 = !DILocation(line: 651, column: 8, scope: !4454)
!4468 = !DILocation(line: 653, column: 2, scope: !4454)
!4469 = !DILocation(line: 654, column: 14, scope: !4446)
!4470 = !DILocation(line: 655, column: 5, scope: !4446)
!4471 = !DILocation(line: 661, column: 16, scope: !3958)
!4472 = !DILocation(line: 661, column: 14, scope: !3958)
!4473 = !DILocation(line: 662, column: 7, scope: !4474)
!4474 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 662, column: 7)
!4475 = !DILocation(line: 662, column: 24, scope: !4474)
!4476 = !DILocation(line: 663, column: 7, scope: !4474)
!4477 = !DILocation(line: 663, column: 10, scope: !4474)
!4478 = !DILocation(line: 663, column: 44, scope: !4474)
!4479 = !DILocation(line: 664, column: 7, scope: !4474)
!4480 = !DILocation(line: 664, column: 10, scope: !4474)
!4481 = !DILocation(line: 664, column: 44, scope: !4474)
!4482 = !DILocation(line: 662, column: 7, scope: !3958)
!4483 = !DILocation(line: 666, column: 47, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 665, column: 5)
!4485 = !DILocation(line: 666, column: 28, scope: !4484)
!4486 = !DILocation(line: 666, column: 15, scope: !4484)
!4487 = !DILocation(line: 666, column: 13, scope: !4484)
!4488 = !DILocation(line: 667, column: 23, scope: !4484)
!4489 = !DILocation(line: 667, column: 36, scope: !4484)
!4490 = !DILocation(line: 667, column: 59, scope: !4484)
!4491 = !DILocation(line: 667, column: 67, scope: !4484)
!4492 = !DILocation(line: 667, column: 7, scope: !4484)
!4493 = !DILocation(line: 668, column: 5, scope: !4484)
!4494 = !DILocation(line: 674, column: 10, scope: !4495)
!4495 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 673, column: 7)
!4496 = !DILocation(line: 674, column: 27, scope: !4495)
!4497 = !DILocation(line: 675, column: 7, scope: !4495)
!4498 = !DILocation(line: 675, column: 10, scope: !4495)
!4499 = !DILocation(line: 675, column: 18, scope: !4495)
!4500 = !DILocation(line: 676, column: 7, scope: !4495)
!4501 = !DILocation(line: 676, column: 10, scope: !4495)
!4502 = !DILocation(line: 676, column: 40, scope: !4495)
!4503 = !DILocation(line: 676, column: 37, scope: !4495)
!4504 = !DILocation(line: 677, column: 7, scope: !4495)
!4505 = !DILocation(line: 677, column: 14, scope: !4495)
!4506 = !DILocation(line: 677, column: 26, scope: !4495)
!4507 = !DILocation(line: 677, column: 29, scope: !4495)
!4508 = !DILocation(line: 677, column: 44, scope: !4495)
!4509 = !DILocation(line: 678, column: 6, scope: !4495)
!4510 = !DILocation(line: 678, column: 10, scope: !4495)
!4511 = !DILocation(line: 678, column: 20, scope: !4495)
!4512 = !DILocation(line: 678, column: 18, scope: !4495)
!4513 = !DILocation(line: 678, column: 29, scope: !4495)
!4514 = !DILocation(line: 678, column: 27, scope: !4495)
!4515 = !DILocation(line: 679, column: 7, scope: !4495)
!4516 = !DILocation(line: 679, column: 35, scope: !4495)
!4517 = !DILocation(line: 679, column: 10, scope: !4495)
!4518 = !DILocation(line: 679, column: 46, scope: !4495)
!4519 = !DILocation(line: 679, column: 57, scope: !4495)
!4520 = !DILocation(line: 681, column: 7, scope: !4495)
!4521 = !DILocation(line: 681, column: 57, scope: !4495)
!4522 = !DILocation(line: 681, column: 10, scope: !4495)
!4523 = !DILocation(line: 673, column: 7, scope: !3958)
!4524 = !DILocalVariable(name: "xbitpos", scope: !4525, file: !3, line: 683, type: !2325)
!4525 = distinct !DILexicalBlock(scope: !4495, file: !3, line: 682, column: 5)
!4526 = !DILocation(line: 683, column: 11, scope: !4525)
!4527 = !DILocation(line: 683, column: 21, scope: !4525)
!4528 = !DILocalVariable(name: "value1", scope: !4525, file: !3, line: 684, type: !2301)
!4529 = !DILocation(line: 684, column: 11, scope: !4525)
!4530 = !DILocalVariable(name: "xop0", scope: !4525, file: !3, line: 685, type: !2301)
!4531 = !DILocation(line: 685, column: 11, scope: !4525)
!4532 = !DILocation(line: 685, column: 18, scope: !4525)
!4533 = !DILocalVariable(name: "last", scope: !4525, file: !3, line: 686, type: !2301)
!4534 = !DILocation(line: 686, column: 11, scope: !4525)
!4535 = !DILocation(line: 686, column: 18, scope: !4525)
!4536 = !DILocalVariable(name: "pat", scope: !4525, file: !3, line: 687, type: !2301)
!4537 = !DILocation(line: 687, column: 11, scope: !4525)
!4538 = !DILocalVariable(name: "copy_back", scope: !4525, file: !3, line: 688, type: !2535)
!4539 = !DILocation(line: 688, column: 12, scope: !4525)
!4540 = !DILocation(line: 691, column: 11, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4525, file: !3, line: 691, column: 11)
!4542 = !DILocation(line: 691, column: 11, scope: !4525)
!4543 = !DILocation(line: 692, column: 9, scope: !4541)
!4544 = !DILocation(line: 692, column: 7, scope: !4541)
!4545 = !DILocation(line: 692, column: 2, scope: !4541)
!4546 = !DILocation(line: 696, column: 11, scope: !4547)
!4547 = distinct !DILexicalBlock(scope: !4525, file: !3, line: 696, column: 11)
!4548 = !DILocation(line: 696, column: 27, scope: !4547)
!4549 = !DILocation(line: 696, column: 11, scope: !4525)
!4550 = !DILocation(line: 699, column: 25, scope: !4547)
!4551 = !DILocation(line: 699, column: 34, scope: !4547)
!4552 = !DILocation(line: 699, column: 53, scope: !4547)
!4553 = !DILocation(line: 699, column: 9, scope: !4547)
!4554 = !DILocation(line: 699, column: 7, scope: !4547)
!4555 = !DILocation(line: 699, column: 2, scope: !4547)
!4556 = !DILocation(line: 700, column: 11, scope: !4557)
!4557 = distinct !DILexicalBlock(scope: !4525, file: !3, line: 700, column: 11)
!4558 = !DILocation(line: 700, column: 24, scope: !4557)
!4559 = !DILocation(line: 700, column: 27, scope: !4557)
!4560 = !DILocation(line: 700, column: 46, scope: !4557)
!4561 = !DILocation(line: 700, column: 43, scope: !4557)
!4562 = !DILocation(line: 700, column: 11, scope: !4525)
!4563 = !DILocation(line: 701, column: 29, scope: !4557)
!4564 = !DILocation(line: 701, column: 38, scope: !4557)
!4565 = !DILocation(line: 701, column: 9, scope: !4557)
!4566 = !DILocation(line: 701, column: 7, scope: !4557)
!4567 = !DILocation(line: 701, column: 2, scope: !4557)
!4568 = !DILocation(line: 708, column: 11, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4525, file: !3, line: 708, column: 11)
!4570 = !DILocation(line: 708, column: 27, scope: !4569)
!4571 = !DILocation(line: 709, column: 4, scope: !4569)
!4572 = !DILocation(line: 709, column: 7, scope: !4569)
!4573 = !DILocation(line: 710, column: 4, scope: !4569)
!4574 = !DILocation(line: 708, column: 11, scope: !4525)
!4575 = !DILocalVariable(name: "tem", scope: !4576, file: !3, line: 714, type: !2301)
!4576 = distinct !DILexicalBlock(scope: !4569, file: !3, line: 713, column: 2)
!4577 = !DILocation(line: 714, column: 8, scope: !4576)
!4578 = !DILocation(line: 714, column: 27, scope: !4576)
!4579 = !DILocation(line: 714, column: 14, scope: !4576)
!4580 = !DILocation(line: 715, column: 20, scope: !4576)
!4581 = !DILocation(line: 715, column: 25, scope: !4576)
!4582 = !DILocation(line: 715, column: 4, scope: !4576)
!4583 = !DILocation(line: 716, column: 11, scope: !4576)
!4584 = !DILocation(line: 716, column: 9, scope: !4576)
!4585 = !DILocation(line: 717, column: 14, scope: !4576)
!4586 = !DILocation(line: 718, column: 2, scope: !4576)
!4587 = !DILocation(line: 731, column: 14, scope: !4525)
!4588 = !DILocation(line: 731, column: 12, scope: !4525)
!4589 = !DILocation(line: 734, column: 16, scope: !4525)
!4590 = !DILocation(line: 734, column: 14, scope: !4525)
!4591 = !DILocation(line: 735, column: 11, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4525, file: !3, line: 735, column: 11)
!4593 = !DILocation(line: 735, column: 31, scope: !4592)
!4594 = !DILocation(line: 735, column: 28, scope: !4592)
!4595 = !DILocation(line: 735, column: 11, scope: !4525)
!4596 = !DILocation(line: 737, column: 8, scope: !4597)
!4597 = distinct !DILexicalBlock(scope: !4598, file: !3, line: 737, column: 8)
!4598 = distinct !DILexicalBlock(scope: !4592, file: !3, line: 736, column: 2)
!4599 = !DILocation(line: 737, column: 47, scope: !4597)
!4600 = !DILocation(line: 737, column: 44, scope: !4597)
!4601 = !DILocation(line: 737, column: 8, scope: !4598)
!4602 = !DILocation(line: 743, column: 12, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4604, file: !3, line: 743, column: 12)
!4604 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 738, column: 6)
!4605 = !DILocation(line: 743, column: 47, scope: !4603)
!4606 = !DILocation(line: 743, column: 45, scope: !4603)
!4607 = !DILocation(line: 743, column: 12, scope: !4604)
!4608 = !DILocalVariable(name: "tmp", scope: !4609, file: !3, line: 745, type: !2301)
!4609 = distinct !DILexicalBlock(scope: !4603, file: !3, line: 744, column: 3)
!4610 = !DILocation(line: 745, column: 9, scope: !4609)
!4611 = !DILocation(line: 747, column: 28, scope: !4609)
!4612 = !DILocation(line: 747, column: 37, scope: !4609)
!4613 = !DILocation(line: 747, column: 45, scope: !4609)
!4614 = !DILocation(line: 747, column: 11, scope: !4609)
!4615 = !DILocation(line: 747, column: 9, scope: !4609)
!4616 = !DILocation(line: 748, column: 11, scope: !4617)
!4617 = distinct !DILexicalBlock(scope: !4609, file: !3, line: 748, column: 9)
!4618 = !DILocation(line: 748, column: 9, scope: !4609)
!4619 = !DILocation(line: 749, column: 34, scope: !4617)
!4620 = !DILocation(line: 750, column: 24, scope: !4617)
!4621 = !DILocation(line: 751, column: 10, scope: !4617)
!4622 = !DILocation(line: 750, column: 13, scope: !4617)
!4623 = !DILocation(line: 752, column: 13, scope: !4617)
!4624 = !DILocation(line: 749, column: 13, scope: !4617)
!4625 = !DILocation(line: 749, column: 11, scope: !4617)
!4626 = !DILocation(line: 749, column: 7, scope: !4617)
!4627 = !DILocation(line: 753, column: 14, scope: !4609)
!4628 = !DILocation(line: 753, column: 12, scope: !4609)
!4629 = !DILocation(line: 754, column: 3, scope: !4609)
!4630 = !DILocation(line: 756, column: 12, scope: !4603)
!4631 = !DILocation(line: 756, column: 25, scope: !4603)
!4632 = !DILocation(line: 756, column: 34, scope: !4603)
!4633 = !DILocation(line: 756, column: 10, scope: !4603)
!4634 = !DILocation(line: 757, column: 6, scope: !4604)
!4635 = !DILocation(line: 758, column: 13, scope: !4636)
!4636 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 758, column: 13)
!4637 = !DILocation(line: 758, column: 13, scope: !4597)
!4638 = !DILocation(line: 759, column: 29, scope: !4636)
!4639 = !DILocation(line: 759, column: 45, scope: !4636)
!4640 = !DILocation(line: 759, column: 15, scope: !4636)
!4641 = !DILocation(line: 759, column: 13, scope: !4636)
!4642 = !DILocation(line: 759, column: 6, scope: !4636)
!4643 = !DILocation(line: 765, column: 6, scope: !4636)
!4644 = !DILocation(line: 766, column: 2, scope: !4598)
!4645 = !DILocation(line: 770, column: 47, scope: !4646)
!4646 = distinct !DILexicalBlock(scope: !4525, file: !3, line: 770, column: 11)
!4647 = !DILocation(line: 770, column: 16, scope: !4646)
!4648 = !DILocation(line: 770, column: 58, scope: !4646)
!4649 = !DILocation(line: 771, column: 8, scope: !4646)
!4650 = !DILocation(line: 771, column: 16, scope: !4646)
!4651 = !DILocation(line: 770, column: 14, scope: !4646)
!4652 = !DILocation(line: 770, column: 11, scope: !4525)
!4653 = !DILocation(line: 772, column: 22, scope: !4646)
!4654 = !DILocation(line: 772, column: 31, scope: !4646)
!4655 = !DILocation(line: 772, column: 11, scope: !4646)
!4656 = !DILocation(line: 772, column: 9, scope: !4646)
!4657 = !DILocation(line: 772, column: 2, scope: !4646)
!4658 = !DILocation(line: 774, column: 23, scope: !4525)
!4659 = !DILocation(line: 774, column: 29, scope: !4525)
!4660 = !DILocation(line: 774, column: 48, scope: !4525)
!4661 = !DILocation(line: 774, column: 67, scope: !4525)
!4662 = !DILocation(line: 774, column: 13, scope: !4525)
!4663 = !DILocation(line: 774, column: 11, scope: !4525)
!4664 = !DILocation(line: 775, column: 11, scope: !4665)
!4665 = distinct !DILexicalBlock(scope: !4525, file: !3, line: 775, column: 11)
!4666 = !DILocation(line: 775, column: 11, scope: !4525)
!4667 = !DILocation(line: 777, column: 15, scope: !4668)
!4668 = distinct !DILexicalBlock(scope: !4665, file: !3, line: 776, column: 2)
!4669 = !DILocation(line: 777, column: 4, scope: !4668)
!4670 = !DILocation(line: 779, column: 8, scope: !4671)
!4671 = distinct !DILexicalBlock(scope: !4668, file: !3, line: 779, column: 8)
!4672 = !DILocation(line: 779, column: 8, scope: !4668)
!4673 = !DILocation(line: 780, column: 20, scope: !4671)
!4674 = !DILocation(line: 780, column: 25, scope: !4671)
!4675 = !DILocation(line: 780, column: 6, scope: !4671)
!4676 = !DILocation(line: 781, column: 4, scope: !4668)
!4677 = !DILocation(line: 783, column: 27, scope: !4525)
!4678 = !DILocation(line: 783, column: 7, scope: !4525)
!4679 = !DILocation(line: 784, column: 5, scope: !4525)
!4680 = !DILocation(line: 788, column: 20, scope: !4681)
!4681 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 788, column: 7)
!4682 = !DILocation(line: 788, column: 7, scope: !3958)
!4683 = !DILocalVariable(name: "bestmode", scope: !4684, file: !3, line: 790, type: !5)
!4684 = distinct !DILexicalBlock(scope: !4681, file: !3, line: 789, column: 5)
!4685 = !DILocation(line: 790, column: 25, scope: !4684)
!4686 = !DILocation(line: 797, column: 11, scope: !4687)
!4687 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 797, column: 11)
!4688 = !DILocation(line: 797, column: 26, scope: !4687)
!4689 = !DILocation(line: 798, column: 4, scope: !4687)
!4690 = !DILocation(line: 798, column: 8, scope: !4687)
!4691 = !DILocation(line: 798, column: 16, scope: !4687)
!4692 = !DILocation(line: 799, column: 8, scope: !4687)
!4693 = !DILocation(line: 799, column: 11, scope: !4687)
!4694 = !DILocation(line: 799, column: 44, scope: !4687)
!4695 = !DILocation(line: 799, column: 42, scope: !4687)
!4696 = !DILocation(line: 797, column: 11, scope: !4684)
!4697 = !DILocation(line: 800, column: 28, scope: !4687)
!4698 = !DILocation(line: 800, column: 37, scope: !4687)
!4699 = !DILocation(line: 800, column: 45, scope: !4687)
!4700 = !DILocation(line: 801, column: 8, scope: !4687)
!4701 = !DILocation(line: 801, column: 16, scope: !4687)
!4702 = !DILocation(line: 802, column: 21, scope: !4687)
!4703 = !DILocation(line: 803, column: 7, scope: !4687)
!4704 = !DILocation(line: 800, column: 13, scope: !4687)
!4705 = !DILocation(line: 800, column: 11, scope: !4687)
!4706 = !DILocation(line: 800, column: 2, scope: !4687)
!4707 = !DILocation(line: 805, column: 13, scope: !4687)
!4708 = !DILocation(line: 805, column: 11, scope: !4687)
!4709 = !DILocation(line: 807, column: 11, scope: !4710)
!4710 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 807, column: 11)
!4711 = !DILocation(line: 807, column: 20, scope: !4710)
!4712 = !DILocation(line: 808, column: 4, scope: !4710)
!4713 = !DILocation(line: 808, column: 7, scope: !4710)
!4714 = !DILocation(line: 808, column: 35, scope: !4710)
!4715 = !DILocation(line: 808, column: 32, scope: !4710)
!4716 = !DILocation(line: 807, column: 11, scope: !4684)
!4717 = !DILocalVariable(name: "last", scope: !4718, file: !3, line: 812, type: !2301)
!4718 = distinct !DILexicalBlock(scope: !4710, file: !3, line: 811, column: 2)
!4719 = !DILocation(line: 812, column: 8, scope: !4718)
!4720 = !DILocalVariable(name: "tempreg", scope: !4718, file: !3, line: 812, type: !2301)
!4721 = !DILocation(line: 812, column: 14, scope: !4718)
!4722 = !DILocalVariable(name: "xop0", scope: !4718, file: !3, line: 812, type: !2301)
!4723 = !DILocation(line: 812, column: 23, scope: !4718)
!4724 = !DILocalVariable(name: "xoffset", scope: !4718, file: !3, line: 813, type: !2375)
!4725 = !DILocation(line: 813, column: 27, scope: !4718)
!4726 = !DILocalVariable(name: "xbitpos", scope: !4718, file: !3, line: 813, type: !2375)
!4727 = !DILocation(line: 813, column: 36, scope: !4718)
!4728 = !DILocation(line: 815, column: 11, scope: !4718)
!4729 = !DILocation(line: 815, column: 9, scope: !4718)
!4730 = !DILocation(line: 820, column: 11, scope: !4718)
!4731 = !DILocation(line: 820, column: 9, scope: !4718)
!4732 = !DILocation(line: 821, column: 15, scope: !4718)
!4733 = !DILocation(line: 821, column: 24, scope: !4718)
!4734 = !DILocation(line: 821, column: 22, scope: !4718)
!4735 = !DILocation(line: 821, column: 32, scope: !4718)
!4736 = !DILocation(line: 821, column: 30, scope: !4718)
!4737 = !DILocation(line: 821, column: 12, scope: !4718)
!4738 = !DILocation(line: 822, column: 14, scope: !4718)
!4739 = !DILocation(line: 822, column: 23, scope: !4718)
!4740 = !DILocation(line: 822, column: 21, scope: !4718)
!4741 = !DILocation(line: 822, column: 12, scope: !4718)
!4742 = !DILocation(line: 823, column: 11, scope: !4718)
!4743 = !DILocation(line: 823, column: 9, scope: !4718)
!4744 = !DILocation(line: 827, column: 27, scope: !4718)
!4745 = !DILocation(line: 827, column: 14, scope: !4718)
!4746 = !DILocation(line: 827, column: 12, scope: !4718)
!4747 = !DILocation(line: 828, column: 27, scope: !4748)
!4748 = distinct !DILexicalBlock(scope: !4718, file: !3, line: 828, column: 8)
!4749 = !DILocation(line: 828, column: 36, scope: !4748)
!4750 = !DILocation(line: 828, column: 45, scope: !4748)
!4751 = !DILocation(line: 829, column: 6, scope: !4748)
!4752 = !DILocation(line: 829, column: 17, scope: !4748)
!4753 = !DILocation(line: 828, column: 8, scope: !4748)
!4754 = !DILocation(line: 828, column: 8, scope: !4718)
!4755 = !DILocation(line: 831, column: 24, scope: !4756)
!4756 = distinct !DILexicalBlock(scope: !4748, file: !3, line: 830, column: 6)
!4757 = !DILocation(line: 831, column: 30, scope: !4756)
!4758 = !DILocation(line: 831, column: 8, scope: !4756)
!4759 = !DILocation(line: 832, column: 8, scope: !4756)
!4760 = !DILocation(line: 834, column: 24, scope: !4718)
!4761 = !DILocation(line: 834, column: 4, scope: !4718)
!4762 = !DILocation(line: 835, column: 2, scope: !4718)
!4763 = !DILocation(line: 836, column: 5, scope: !4684)
!4764 = !DILocation(line: 838, column: 8, scope: !4765)
!4765 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 838, column: 7)
!4766 = !DILocation(line: 838, column: 7, scope: !3958)
!4767 = !DILocation(line: 839, column: 5, scope: !4765)
!4768 = !DILocation(line: 841, column: 26, scope: !3958)
!4769 = !DILocation(line: 841, column: 31, scope: !3958)
!4770 = !DILocation(line: 841, column: 39, scope: !3958)
!4771 = !DILocation(line: 841, column: 48, scope: !3958)
!4772 = !DILocation(line: 841, column: 56, scope: !3958)
!4773 = !DILocation(line: 841, column: 3, scope: !3958)
!4774 = !DILocation(line: 842, column: 3, scope: !3958)
!4775 = !DILocation(line: 843, column: 1, scope: !3958)
!4776 = distinct !DISubprogram(name: "extract_bit_field", scope: !3, file: !3, line: 1687, type: !4777, scopeLine: 1690, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!4777 = !DISubroutineType(types: !4778)
!4778 = !{!2301, !2301, !2375, !2375, !2325, !2301, !5, !5}
!4779 = !DILocalVariable(name: "str_rtx", arg: 1, scope: !4776, file: !3, line: 1687, type: !2301)
!4780 = !DILocation(line: 1687, column: 24, scope: !4776)
!4781 = !DILocalVariable(name: "bitsize", arg: 2, scope: !4776, file: !3, line: 1687, type: !2375)
!4782 = !DILocation(line: 1687, column: 56, scope: !4776)
!4783 = !DILocalVariable(name: "bitnum", arg: 3, scope: !4776, file: !3, line: 1688, type: !2375)
!4784 = !DILocation(line: 1688, column: 29, scope: !4776)
!4785 = !DILocalVariable(name: "unsignedp", arg: 4, scope: !4776, file: !3, line: 1688, type: !2325)
!4786 = !DILocation(line: 1688, column: 41, scope: !4776)
!4787 = !DILocalVariable(name: "target", arg: 5, scope: !4776, file: !3, line: 1688, type: !2301)
!4788 = !DILocation(line: 1688, column: 56, scope: !4776)
!4789 = !DILocalVariable(name: "mode", arg: 6, scope: !4776, file: !3, line: 1689, type: !5)
!4790 = !DILocation(line: 1689, column: 24, scope: !4776)
!4791 = !DILocalVariable(name: "tmode", arg: 7, scope: !4776, file: !3, line: 1689, type: !5)
!4792 = !DILocation(line: 1689, column: 48, scope: !4776)
!4793 = !DILocation(line: 1691, column: 31, scope: !4776)
!4794 = !DILocation(line: 1691, column: 40, scope: !4776)
!4795 = !DILocation(line: 1691, column: 49, scope: !4776)
!4796 = !DILocation(line: 1691, column: 57, scope: !4776)
!4797 = !DILocation(line: 1692, column: 10, scope: !4776)
!4798 = !DILocation(line: 1692, column: 18, scope: !4776)
!4799 = !DILocation(line: 1692, column: 24, scope: !4776)
!4800 = !DILocation(line: 1691, column: 10, scope: !4776)
!4801 = !DILocation(line: 1691, column: 3, scope: !4776)
!4802 = distinct !DISubprogram(name: "extract_bit_field_1", scope: !3, file: !3, line: 1178, type: !4803, scopeLine: 1182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!4803 = !DISubroutineType(types: !4804)
!4804 = !{!2301, !2301, !2375, !2375, !2325, !2301, !5, !5, !2535}
!4805 = !DILocalVariable(name: "str_rtx", arg: 1, scope: !4802, file: !3, line: 1178, type: !2301)
!4806 = !DILocation(line: 1178, column: 26, scope: !4802)
!4807 = !DILocalVariable(name: "bitsize", arg: 2, scope: !4802, file: !3, line: 1178, type: !2375)
!4808 = !DILocation(line: 1178, column: 58, scope: !4802)
!4809 = !DILocalVariable(name: "bitnum", arg: 3, scope: !4802, file: !3, line: 1179, type: !2375)
!4810 = !DILocation(line: 1179, column: 31, scope: !4802)
!4811 = !DILocalVariable(name: "unsignedp", arg: 4, scope: !4802, file: !3, line: 1179, type: !2325)
!4812 = !DILocation(line: 1179, column: 43, scope: !4802)
!4813 = !DILocalVariable(name: "target", arg: 5, scope: !4802, file: !3, line: 1179, type: !2301)
!4814 = !DILocation(line: 1179, column: 58, scope: !4802)
!4815 = !DILocalVariable(name: "mode", arg: 6, scope: !4802, file: !3, line: 1180, type: !5)
!4816 = !DILocation(line: 1180, column: 26, scope: !4802)
!4817 = !DILocalVariable(name: "tmode", arg: 7, scope: !4802, file: !3, line: 1180, type: !5)
!4818 = !DILocation(line: 1180, column: 50, scope: !4802)
!4819 = !DILocalVariable(name: "fallback_p", arg: 8, scope: !4802, file: !3, line: 1181, type: !2535)
!4820 = !DILocation(line: 1181, column: 13, scope: !4802)
!4821 = !DILocalVariable(name: "unit", scope: !4802, file: !3, line: 1183, type: !7)
!4822 = !DILocation(line: 1183, column: 16, scope: !4802)
!4823 = !DILocation(line: 1184, column: 8, scope: !4802)
!4824 = !DILocation(line: 1184, column: 7, scope: !4802)
!4825 = !DILocalVariable(name: "offset", scope: !4802, file: !3, line: 1185, type: !2375)
!4826 = !DILocation(line: 1185, column: 26, scope: !4802)
!4827 = !DILocalVariable(name: "bitpos", scope: !4802, file: !3, line: 1185, type: !2375)
!4828 = !DILocation(line: 1185, column: 34, scope: !4802)
!4829 = !DILocalVariable(name: "op0", scope: !4802, file: !3, line: 1186, type: !2301)
!4830 = !DILocation(line: 1186, column: 7, scope: !4802)
!4831 = !DILocation(line: 1186, column: 13, scope: !4802)
!4832 = !DILocalVariable(name: "int_mode", scope: !4802, file: !3, line: 1187, type: !5)
!4833 = !DILocation(line: 1187, column: 21, scope: !4802)
!4834 = !DILocalVariable(name: "ext_mode", scope: !4802, file: !3, line: 1188, type: !5)
!4835 = !DILocation(line: 1188, column: 21, scope: !4802)
!4836 = !DILocalVariable(name: "mode1", scope: !4802, file: !3, line: 1189, type: !5)
!4837 = !DILocation(line: 1189, column: 21, scope: !4802)
!4838 = !DILocalVariable(name: "icode", scope: !4802, file: !3, line: 1190, type: !711)
!4839 = !DILocation(line: 1190, column: 18, scope: !4802)
!4840 = !DILocalVariable(name: "byte_offset", scope: !4802, file: !3, line: 1191, type: !2325)
!4841 = !DILocation(line: 1191, column: 7, scope: !4802)
!4842 = !DILocation(line: 1193, column: 7, scope: !4843)
!4843 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1193, column: 7)
!4844 = !DILocation(line: 1193, column: 13, scope: !4843)
!4845 = !DILocation(line: 1193, column: 7, scope: !4802)
!4846 = !DILocation(line: 1194, column: 13, scope: !4843)
!4847 = !DILocation(line: 1194, column: 11, scope: !4843)
!4848 = !DILocation(line: 1194, column: 5, scope: !4843)
!4849 = !DILocation(line: 1196, column: 3, scope: !4802)
!4850 = !DILocation(line: 1196, column: 10, scope: !4802)
!4851 = !DILocation(line: 1196, column: 25, scope: !4802)
!4852 = !DILocation(line: 1198, column: 17, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1197, column: 5)
!4854 = !DILocation(line: 1198, column: 35, scope: !4853)
!4855 = !DILocation(line: 1198, column: 14, scope: !4853)
!4856 = !DILocation(line: 1199, column: 13, scope: !4853)
!4857 = !DILocation(line: 1199, column: 11, scope: !4853)
!4858 = distinct !{!4858, !4849, !4859}
!4859 = !DILocation(line: 1200, column: 5, scope: !4802)
!4860 = !DILocation(line: 1205, column: 7, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1205, column: 7)
!4862 = !DILocation(line: 1205, column: 19, scope: !4861)
!4863 = !DILocation(line: 1205, column: 22, scope: !4861)
!4864 = !DILocation(line: 1205, column: 32, scope: !4861)
!4865 = !DILocation(line: 1205, column: 29, scope: !4861)
!4866 = !DILocation(line: 1205, column: 7, scope: !4802)
!4867 = !DILocation(line: 1206, column: 25, scope: !4861)
!4868 = !DILocation(line: 1206, column: 12, scope: !4861)
!4869 = !DILocation(line: 1206, column: 5, scope: !4861)
!4870 = !DILocation(line: 1208, column: 7, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1208, column: 7)
!4872 = !DILocation(line: 1209, column: 7, scope: !4871)
!4873 = !DILocation(line: 1209, column: 10, scope: !4871)
!4874 = !DILocation(line: 1209, column: 18, scope: !4871)
!4875 = !DILocation(line: 1209, column: 15, scope: !4871)
!4876 = !DILocation(line: 1210, column: 7, scope: !4871)
!4877 = !DILocation(line: 1210, column: 10, scope: !4871)
!4878 = !DILocation(line: 1210, column: 17, scope: !4871)
!4879 = !DILocation(line: 1211, column: 7, scope: !4871)
!4880 = !DILocation(line: 1211, column: 10, scope: !4871)
!4881 = !DILocation(line: 1211, column: 21, scope: !4871)
!4882 = !DILocation(line: 1211, column: 18, scope: !4871)
!4883 = !DILocation(line: 1208, column: 7, scope: !4802)
!4884 = !DILocation(line: 1214, column: 14, scope: !4885)
!4885 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 1212, column: 5)
!4886 = !DILocation(line: 1214, column: 7, scope: !4885)
!4887 = !DILocation(line: 1218, column: 7, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1218, column: 7)
!4889 = !DILocation(line: 1219, column: 7, scope: !4888)
!4890 = !DILocation(line: 1219, column: 11, scope: !4888)
!4891 = !DILocation(line: 1220, column: 7, scope: !4888)
!4892 = !DILocation(line: 1220, column: 10, scope: !4888)
!4893 = !DILocation(line: 1220, column: 45, scope: !4888)
!4894 = !DILocation(line: 1220, column: 42, scope: !4888)
!4895 = !DILocation(line: 1218, column: 7, scope: !4802)
!4896 = !DILocalVariable(name: "new_mode", scope: !4897, file: !3, line: 1222, type: !5)
!4897 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 1221, column: 5)
!4898 = !DILocation(line: 1222, column: 25, scope: !4897)
!4899 = !DILocalVariable(name: "nunits", scope: !4897, file: !3, line: 1223, type: !2325)
!4900 = !DILocation(line: 1223, column: 11, scope: !4897)
!4901 = !DILocation(line: 1223, column: 20, scope: !4897)
!4902 = !DILocation(line: 1225, column: 11, scope: !4903)
!4903 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 1225, column: 11)
!4904 = !DILocation(line: 1225, column: 34, scope: !4903)
!4905 = !DILocation(line: 1225, column: 11, scope: !4897)
!4906 = !DILocation(line: 1226, column: 11, scope: !4903)
!4907 = !DILocation(line: 1226, column: 2, scope: !4903)
!4908 = !DILocation(line: 1227, column: 16, scope: !4909)
!4909 = distinct !DILexicalBlock(scope: !4903, file: !3, line: 1227, column: 16)
!4910 = !DILocation(line: 1227, column: 39, scope: !4909)
!4911 = !DILocation(line: 1227, column: 16, scope: !4903)
!4912 = !DILocation(line: 1228, column: 11, scope: !4909)
!4913 = !DILocation(line: 1228, column: 2, scope: !4909)
!4914 = !DILocation(line: 1229, column: 16, scope: !4915)
!4915 = distinct !DILexicalBlock(scope: !4909, file: !3, line: 1229, column: 16)
!4916 = !DILocation(line: 1229, column: 39, scope: !4915)
!4917 = !DILocation(line: 1229, column: 16, scope: !4909)
!4918 = !DILocation(line: 1230, column: 11, scope: !4915)
!4919 = !DILocation(line: 1230, column: 2, scope: !4915)
!4920 = !DILocation(line: 1231, column: 16, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !4915, file: !3, line: 1231, column: 16)
!4922 = !DILocation(line: 1231, column: 39, scope: !4921)
!4923 = !DILocation(line: 1231, column: 16, scope: !4915)
!4924 = !DILocation(line: 1232, column: 11, scope: !4921)
!4925 = !DILocation(line: 1232, column: 2, scope: !4921)
!4926 = !DILocation(line: 1233, column: 16, scope: !4927)
!4927 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 1233, column: 16)
!4928 = !DILocation(line: 1233, column: 39, scope: !4927)
!4929 = !DILocation(line: 1233, column: 16, scope: !4921)
!4930 = !DILocation(line: 1234, column: 11, scope: !4927)
!4931 = !DILocation(line: 1234, column: 2, scope: !4927)
!4932 = !DILocation(line: 1236, column: 11, scope: !4927)
!4933 = !DILocation(line: 1238, column: 7, scope: !4897)
!4934 = !DILocation(line: 1238, column: 14, scope: !4935)
!4935 = distinct !DILexicalBlock(scope: !4936, file: !3, line: 1238, column: 7)
!4936 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 1238, column: 7)
!4937 = !DILocation(line: 1238, column: 23, scope: !4935)
!4938 = !DILocation(line: 1238, column: 7, scope: !4936)
!4939 = !DILocation(line: 1239, column: 6, scope: !4940)
!4940 = distinct !DILexicalBlock(scope: !4935, file: !3, line: 1239, column: 6)
!4941 = !DILocation(line: 1239, column: 36, scope: !4940)
!4942 = !DILocation(line: 1239, column: 33, scope: !4940)
!4943 = !DILocation(line: 1240, column: 6, scope: !4940)
!4944 = !DILocation(line: 1240, column: 9, scope: !4940)
!4945 = !DILocation(line: 1240, column: 37, scope: !4940)
!4946 = !DILocation(line: 1240, column: 34, scope: !4940)
!4947 = !DILocation(line: 1241, column: 6, scope: !4940)
!4948 = !DILocation(line: 1241, column: 17, scope: !4940)
!4949 = !DILocation(line: 1241, column: 42, scope: !4940)
!4950 = !DILocation(line: 1241, column: 9, scope: !4940)
!4951 = !DILocation(line: 1239, column: 6, scope: !4935)
!4952 = !DILocation(line: 1242, column: 4, scope: !4940)
!4953 = !DILocation(line: 1241, column: 50, scope: !4940)
!4954 = !DILocation(line: 1238, column: 48, scope: !4935)
!4955 = !DILocation(line: 1238, column: 46, scope: !4935)
!4956 = !DILocation(line: 1238, column: 7, scope: !4935)
!4957 = distinct !{!4957, !4938, !4958}
!4958 = !DILocation(line: 1242, column: 4, scope: !4936)
!4959 = !DILocation(line: 1243, column: 11, scope: !4960)
!4960 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 1243, column: 11)
!4961 = !DILocation(line: 1243, column: 20, scope: !4960)
!4962 = !DILocation(line: 1243, column: 11, scope: !4897)
!4963 = !DILocation(line: 1244, column: 8, scope: !4960)
!4964 = !DILocation(line: 1244, column: 21, scope: !4960)
!4965 = !DILocation(line: 1244, column: 31, scope: !4960)
!4966 = !DILocation(line: 1244, column: 6, scope: !4960)
!4967 = !DILocation(line: 1244, column: 2, scope: !4960)
!4968 = !DILocation(line: 1245, column: 5, scope: !4897)
!4969 = !DILocation(line: 1249, column: 7, scope: !4970)
!4970 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1249, column: 7)
!4971 = !DILocation(line: 1250, column: 7, scope: !4970)
!4972 = !DILocation(line: 1250, column: 11, scope: !4970)
!4973 = !DILocation(line: 1251, column: 7, scope: !4970)
!4974 = !DILocation(line: 1251, column: 11, scope: !4970)
!4975 = !DILocation(line: 1251, column: 62, scope: !4970)
!4976 = !DILocation(line: 1252, column: 4, scope: !4970)
!4977 = !DILocation(line: 1253, column: 7, scope: !4970)
!4978 = !DILocation(line: 1253, column: 12, scope: !4970)
!4979 = !DILocation(line: 1253, column: 21, scope: !4970)
!4980 = !DILocation(line: 1253, column: 19, scope: !4970)
!4981 = !DILocation(line: 1253, column: 29, scope: !4970)
!4982 = !DILocation(line: 1253, column: 36, scope: !4970)
!4983 = !DILocation(line: 1253, column: 34, scope: !4970)
!4984 = !DILocation(line: 1254, column: 7, scope: !4970)
!4985 = !DILocation(line: 1254, column: 16, scope: !4970)
!4986 = !DILocation(line: 1254, column: 14, scope: !4970)
!4987 = !DILocation(line: 1254, column: 4, scope: !4970)
!4988 = !DILocation(line: 1249, column: 7, scope: !4802)
!4989 = !DILocalVariable(name: "outermode", scope: !4990, file: !3, line: 1256, type: !5)
!4990 = distinct !DILexicalBlock(scope: !4970, file: !3, line: 1255, column: 5)
!4991 = !DILocation(line: 1256, column: 25, scope: !4990)
!4992 = !DILocation(line: 1256, column: 37, scope: !4990)
!4993 = !DILocalVariable(name: "innermode", scope: !4990, file: !3, line: 1257, type: !5)
!4994 = !DILocation(line: 1257, column: 25, scope: !4990)
!4995 = !DILocation(line: 1257, column: 37, scope: !4990)
!4996 = !DILocalVariable(name: "icode", scope: !4990, file: !3, line: 1258, type: !2325)
!4997 = !DILocation(line: 1258, column: 11, scope: !4990)
!4998 = !DILocation(line: 1258, column: 25, scope: !4990)
!4999 = !DILocation(line: 1258, column: 71, scope: !4990)
!5000 = !DILocalVariable(name: "pos", scope: !4990, file: !3, line: 1259, type: !2375)
!5001 = !DILocation(line: 1259, column: 30, scope: !4990)
!5002 = !DILocation(line: 1259, column: 36, scope: !4990)
!5003 = !DILocation(line: 1259, column: 45, scope: !4990)
!5004 = !DILocation(line: 1259, column: 43, scope: !4990)
!5005 = !DILocalVariable(name: "rtxpos", scope: !4990, file: !3, line: 1260, type: !2301)
!5006 = !DILocation(line: 1260, column: 11, scope: !4990)
!5007 = !DILocation(line: 1260, column: 20, scope: !4990)
!5008 = !DILocalVariable(name: "src", scope: !4990, file: !3, line: 1261, type: !2301)
!5009 = !DILocation(line: 1261, column: 11, scope: !4990)
!5010 = !DILocation(line: 1261, column: 17, scope: !4990)
!5011 = !DILocalVariable(name: "dest", scope: !4990, file: !3, line: 1262, type: !2301)
!5012 = !DILocation(line: 1262, column: 11, scope: !4990)
!5013 = !DILocalVariable(name: "pat", scope: !4990, file: !3, line: 1262, type: !2301)
!5014 = !DILocation(line: 1262, column: 24, scope: !4990)
!5015 = !DILocalVariable(name: "seq", scope: !4990, file: !3, line: 1262, type: !2301)
!5016 = !DILocation(line: 1262, column: 29, scope: !4990)
!5017 = !DILocalVariable(name: "mode0", scope: !4990, file: !3, line: 1263, type: !5)
!5018 = !DILocation(line: 1263, column: 25, scope: !4990)
!5019 = !DILocation(line: 1263, column: 43, scope: !4990)
!5020 = !DILocation(line: 1263, column: 33, scope: !4990)
!5021 = !DILocation(line: 1263, column: 50, scope: !4990)
!5022 = !DILocation(line: 1263, column: 61, scope: !4990)
!5023 = !DILocalVariable(name: "mode1", scope: !4990, file: !3, line: 1264, type: !5)
!5024 = !DILocation(line: 1264, column: 25, scope: !4990)
!5025 = !DILocation(line: 1264, column: 43, scope: !4990)
!5026 = !DILocation(line: 1264, column: 33, scope: !4990)
!5027 = !DILocation(line: 1264, column: 50, scope: !4990)
!5028 = !DILocation(line: 1264, column: 61, scope: !4990)
!5029 = !DILocalVariable(name: "mode2", scope: !4990, file: !3, line: 1265, type: !5)
!5030 = !DILocation(line: 1265, column: 25, scope: !4990)
!5031 = !DILocation(line: 1265, column: 43, scope: !4990)
!5032 = !DILocation(line: 1265, column: 33, scope: !4990)
!5033 = !DILocation(line: 1265, column: 50, scope: !4990)
!5034 = !DILocation(line: 1265, column: 61, scope: !4990)
!5035 = !DILocation(line: 1267, column: 11, scope: !5036)
!5036 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 1267, column: 11)
!5037 = !DILocation(line: 1267, column: 24, scope: !5036)
!5038 = !DILocation(line: 1267, column: 21, scope: !5036)
!5039 = !DILocation(line: 1267, column: 30, scope: !5036)
!5040 = !DILocation(line: 1267, column: 33, scope: !5036)
!5041 = !DILocation(line: 1267, column: 46, scope: !5036)
!5042 = !DILocation(line: 1267, column: 43, scope: !5036)
!5043 = !DILocation(line: 1267, column: 11, scope: !4990)
!5044 = !DILocation(line: 1268, column: 9, scope: !5036)
!5045 = !DILocation(line: 1268, column: 7, scope: !5036)
!5046 = !DILocation(line: 1268, column: 2, scope: !5036)
!5047 = !DILocation(line: 1270, column: 12, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 1270, column: 11)
!5049 = !DILocation(line: 1270, column: 11, scope: !4990)
!5050 = !DILocation(line: 1271, column: 22, scope: !5048)
!5051 = !DILocation(line: 1271, column: 9, scope: !5048)
!5052 = !DILocation(line: 1271, column: 7, scope: !5048)
!5053 = !DILocation(line: 1271, column: 2, scope: !5048)
!5054 = !DILocation(line: 1273, column: 7, scope: !4990)
!5055 = !DILocation(line: 1275, column: 25, scope: !5056)
!5056 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 1275, column: 11)
!5057 = !DILocation(line: 1275, column: 15, scope: !5056)
!5058 = !DILocation(line: 1275, column: 32, scope: !5056)
!5059 = !DILocation(line: 1275, column: 43, scope: !5056)
!5060 = !DILocation(line: 1275, column: 55, scope: !5056)
!5061 = !DILocation(line: 1275, column: 61, scope: !5056)
!5062 = !DILocation(line: 1275, column: 13, scope: !5056)
!5063 = !DILocation(line: 1275, column: 11, scope: !4990)
!5064 = !DILocation(line: 1276, column: 27, scope: !5056)
!5065 = !DILocation(line: 1276, column: 34, scope: !5056)
!5066 = !DILocation(line: 1276, column: 9, scope: !5056)
!5067 = !DILocation(line: 1276, column: 7, scope: !5056)
!5068 = !DILocation(line: 1276, column: 2, scope: !5056)
!5069 = !DILocation(line: 1278, column: 25, scope: !5070)
!5070 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 1278, column: 11)
!5071 = !DILocation(line: 1278, column: 15, scope: !5070)
!5072 = !DILocation(line: 1278, column: 32, scope: !5070)
!5073 = !DILocation(line: 1278, column: 43, scope: !5070)
!5074 = !DILocation(line: 1278, column: 55, scope: !5070)
!5075 = !DILocation(line: 1278, column: 60, scope: !5070)
!5076 = !DILocation(line: 1278, column: 13, scope: !5070)
!5077 = !DILocation(line: 1278, column: 11, scope: !4990)
!5078 = !DILocation(line: 1279, column: 26, scope: !5070)
!5079 = !DILocation(line: 1279, column: 33, scope: !5070)
!5080 = !DILocation(line: 1279, column: 8, scope: !5070)
!5081 = !DILocation(line: 1279, column: 6, scope: !5070)
!5082 = !DILocation(line: 1279, column: 2, scope: !5070)
!5083 = !DILocation(line: 1281, column: 25, scope: !5084)
!5084 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 1281, column: 11)
!5085 = !DILocation(line: 1281, column: 15, scope: !5084)
!5086 = !DILocation(line: 1281, column: 32, scope: !5084)
!5087 = !DILocation(line: 1281, column: 43, scope: !5084)
!5088 = !DILocation(line: 1281, column: 55, scope: !5084)
!5089 = !DILocation(line: 1281, column: 63, scope: !5084)
!5090 = !DILocation(line: 1281, column: 13, scope: !5084)
!5091 = !DILocation(line: 1281, column: 11, scope: !4990)
!5092 = !DILocation(line: 1282, column: 29, scope: !5084)
!5093 = !DILocation(line: 1282, column: 36, scope: !5084)
!5094 = !DILocation(line: 1282, column: 11, scope: !5084)
!5095 = !DILocation(line: 1282, column: 9, scope: !5084)
!5096 = !DILocation(line: 1282, column: 2, scope: !5084)
!5097 = !DILocation(line: 1286, column: 7, scope: !4990)
!5098 = !DILocation(line: 1290, column: 13, scope: !4990)
!5099 = !DILocation(line: 1290, column: 30, scope: !4990)
!5100 = !DILocation(line: 1290, column: 36, scope: !4990)
!5101 = !DILocation(line: 1290, column: 41, scope: !4990)
!5102 = !DILocation(line: 1290, column: 11, scope: !4990)
!5103 = !DILocation(line: 1291, column: 13, scope: !4990)
!5104 = !DILocation(line: 1291, column: 11, scope: !4990)
!5105 = !DILocation(line: 1292, column: 7, scope: !4990)
!5106 = !DILocation(line: 1293, column: 11, scope: !5107)
!5107 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 1293, column: 11)
!5108 = !DILocation(line: 1293, column: 11, scope: !4990)
!5109 = !DILocation(line: 1295, column: 15, scope: !5110)
!5110 = distinct !DILexicalBlock(scope: !5107, file: !3, line: 1294, column: 2)
!5111 = !DILocation(line: 1295, column: 4, scope: !5110)
!5112 = !DILocation(line: 1296, column: 15, scope: !5110)
!5113 = !DILocation(line: 1296, column: 4, scope: !5110)
!5114 = !DILocation(line: 1297, column: 14, scope: !5115)
!5115 = distinct !DILexicalBlock(scope: !5110, file: !3, line: 1297, column: 14)
!5116 = !DILocation(line: 1297, column: 23, scope: !5115)
!5117 = !DILocation(line: 1297, column: 20, scope: !5115)
!5118 = !DILocation(line: 1297, column: 14, scope: !5110)
!5119 = !DILocation(line: 1298, column: 13, scope: !5115)
!5120 = !DILocation(line: 1298, column: 26, scope: !5115)
!5121 = !DILocation(line: 1298, column: 33, scope: !5115)
!5122 = !DILocation(line: 1298, column: 6, scope: !5115)
!5123 = !DILocation(line: 1299, column: 11, scope: !5110)
!5124 = !DILocation(line: 1299, column: 4, scope: !5110)
!5125 = !DILocation(line: 1301, column: 5, scope: !4990)
!5126 = !DILocalVariable(name: "imode", scope: !5127, file: !3, line: 1306, type: !5)
!5127 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1305, column: 3)
!5128 = !DILocation(line: 1306, column: 23, scope: !5127)
!5129 = !DILocation(line: 1306, column: 50, scope: !5127)
!5130 = !DILocation(line: 1306, column: 31, scope: !5127)
!5131 = !DILocation(line: 1307, column: 9, scope: !5132)
!5132 = distinct !DILexicalBlock(scope: !5127, file: !3, line: 1307, column: 9)
!5133 = !DILocation(line: 1307, column: 18, scope: !5132)
!5134 = !DILocation(line: 1307, column: 15, scope: !5132)
!5135 = !DILocation(line: 1307, column: 9, scope: !5127)
!5136 = !DILocation(line: 1309, column: 6, scope: !5137)
!5137 = distinct !DILexicalBlock(scope: !5138, file: !3, line: 1309, column: 6)
!5138 = distinct !DILexicalBlock(scope: !5132, file: !3, line: 1308, column: 7)
!5139 = !DILocation(line: 1309, column: 6, scope: !5138)
!5140 = !DILocation(line: 1310, column: 10, scope: !5137)
!5141 = !DILocation(line: 1310, column: 8, scope: !5137)
!5142 = !DILocation(line: 1310, column: 4, scope: !5137)
!5143 = !DILocation(line: 1311, column: 11, scope: !5144)
!5144 = distinct !DILexicalBlock(scope: !5137, file: !3, line: 1311, column: 11)
!5145 = !DILocation(line: 1311, column: 17, scope: !5144)
!5146 = !DILocation(line: 1311, column: 11, scope: !5137)
!5147 = !DILocation(line: 1313, column: 12, scope: !5148)
!5148 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 1312, column: 4)
!5149 = !DILocation(line: 1313, column: 25, scope: !5148)
!5150 = !DILocation(line: 1313, column: 32, scope: !5148)
!5151 = !DILocation(line: 1313, column: 10, scope: !5148)
!5152 = !DILocation(line: 1317, column: 10, scope: !5153)
!5153 = distinct !DILexicalBlock(scope: !5148, file: !3, line: 1317, column: 10)
!5154 = !DILocation(line: 1317, column: 25, scope: !5153)
!5155 = !DILocation(line: 1317, column: 10, scope: !5148)
!5156 = !DILocation(line: 1318, column: 25, scope: !5153)
!5157 = !DILocation(line: 1318, column: 32, scope: !5153)
!5158 = !DILocation(line: 1318, column: 14, scope: !5153)
!5159 = !DILocation(line: 1318, column: 12, scope: !5153)
!5160 = !DILocation(line: 1318, column: 8, scope: !5153)
!5161 = !DILocation(line: 1319, column: 4, scope: !5148)
!5162 = !DILocation(line: 1320, column: 11, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 1320, column: 11)
!5164 = !DILocation(line: 1320, column: 11, scope: !5144)
!5165 = !DILocalVariable(name: "reg", scope: !5166, file: !3, line: 1322, type: !2301)
!5166 = distinct !DILexicalBlock(scope: !5163, file: !3, line: 1321, column: 4)
!5167 = !DILocation(line: 1322, column: 10, scope: !5166)
!5168 = !DILocalVariable(name: "subreg", scope: !5166, file: !3, line: 1322, type: !2301)
!5169 = !DILocation(line: 1322, column: 15, scope: !5166)
!5170 = !DILocation(line: 1323, column: 38, scope: !5166)
!5171 = !DILocation(line: 1323, column: 14, scope: !5166)
!5172 = !DILocation(line: 1323, column: 12, scope: !5166)
!5173 = !DILocation(line: 1325, column: 25, scope: !5166)
!5174 = !DILocation(line: 1325, column: 12, scope: !5166)
!5175 = !DILocation(line: 1325, column: 10, scope: !5166)
!5176 = !DILocation(line: 1326, column: 35, scope: !5166)
!5177 = !DILocation(line: 1326, column: 51, scope: !5166)
!5178 = !DILocation(line: 1326, column: 15, scope: !5166)
!5179 = !DILocation(line: 1326, column: 13, scope: !5166)
!5180 = !DILocation(line: 1327, column: 22, scope: !5166)
!5181 = !DILocation(line: 1327, column: 30, scope: !5166)
!5182 = !DILocation(line: 1327, column: 6, scope: !5166)
!5183 = !DILocation(line: 1328, column: 12, scope: !5166)
!5184 = !DILocation(line: 1328, column: 10, scope: !5166)
!5185 = !DILocation(line: 1329, column: 16, scope: !5166)
!5186 = !DILocation(line: 1329, column: 37, scope: !5166)
!5187 = !DILocation(line: 1329, column: 13, scope: !5166)
!5188 = !DILocation(line: 1330, column: 4, scope: !5166)
!5189 = !DILocalVariable(name: "mem", scope: !5190, file: !3, line: 1333, type: !2301)
!5190 = distinct !DILexicalBlock(scope: !5163, file: !3, line: 1332, column: 4)
!5191 = !DILocation(line: 1333, column: 10, scope: !5190)
!5192 = !DILocation(line: 1333, column: 35, scope: !5190)
!5193 = !DILocation(line: 1334, column: 7, scope: !5190)
!5194 = !DILocation(line: 1333, column: 16, scope: !5190)
!5195 = !DILocation(line: 1335, column: 22, scope: !5190)
!5196 = !DILocation(line: 1335, column: 27, scope: !5190)
!5197 = !DILocation(line: 1335, column: 6, scope: !5190)
!5198 = !DILocation(line: 1336, column: 12, scope: !5190)
!5199 = !DILocation(line: 1336, column: 10, scope: !5190)
!5200 = !DILocation(line: 1338, column: 7, scope: !5138)
!5201 = !DILocation(line: 1343, column: 7, scope: !5202)
!5202 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1343, column: 7)
!5203 = !DILocation(line: 1343, column: 7, scope: !4802)
!5204 = !DILocation(line: 1345, column: 13, scope: !5205)
!5205 = distinct !DILexicalBlock(scope: !5202, file: !3, line: 1344, column: 5)
!5206 = !DILocation(line: 1345, column: 11, scope: !5205)
!5207 = !DILocation(line: 1346, column: 26, scope: !5205)
!5208 = !DILocation(line: 1346, column: 7, scope: !5205)
!5209 = !DILocation(line: 1347, column: 21, scope: !5205)
!5210 = !DILocation(line: 1347, column: 7, scope: !5205)
!5211 = !DILocation(line: 1348, column: 5, scope: !5205)
!5212 = !DILocation(line: 1356, column: 12, scope: !4802)
!5213 = !DILocation(line: 1356, column: 21, scope: !4802)
!5214 = !DILocation(line: 1356, column: 19, scope: !4802)
!5215 = !DILocation(line: 1356, column: 10, scope: !4802)
!5216 = !DILocation(line: 1357, column: 12, scope: !4802)
!5217 = !DILocation(line: 1357, column: 21, scope: !4802)
!5218 = !DILocation(line: 1357, column: 19, scope: !4802)
!5219 = !DILocation(line: 1357, column: 10, scope: !4802)
!5220 = !DILocation(line: 1358, column: 17, scope: !4802)
!5221 = !DILocation(line: 1358, column: 24, scope: !4802)
!5222 = !DILocation(line: 1358, column: 42, scope: !4802)
!5223 = !DILocation(line: 1358, column: 49, scope: !4802)
!5224 = !DILocation(line: 1358, column: 40, scope: !4802)
!5225 = !DILocation(line: 1358, column: 15, scope: !4802)
!5226 = !DILocation(line: 1377, column: 13, scope: !4802)
!5227 = !DILocation(line: 1378, column: 23, scope: !4802)
!5228 = !DILocation(line: 1378, column: 32, scope: !4802)
!5229 = !DILocation(line: 1378, column: 8, scope: !4802)
!5230 = !DILocation(line: 1379, column: 8, scope: !4802)
!5231 = !DILocation(line: 1377, column: 10, scope: !4802)
!5232 = !DILocation(line: 1381, column: 9, scope: !5233)
!5233 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1381, column: 7)
!5234 = !DILocation(line: 1381, column: 17, scope: !5233)
!5235 = !DILocation(line: 1381, column: 34, scope: !5233)
!5236 = !DILocation(line: 1381, column: 37, scope: !5233)
!5237 = !DILocation(line: 1381, column: 48, scope: !5233)
!5238 = !DILocation(line: 1381, column: 45, scope: !5233)
!5239 = !DILocation(line: 1382, column: 2, scope: !5233)
!5240 = !DILocation(line: 1382, column: 5, scope: !5233)
!5241 = !DILocation(line: 1382, column: 12, scope: !5233)
!5242 = !DILocation(line: 1382, column: 28, scope: !5233)
!5243 = !DILocation(line: 1383, column: 8, scope: !5233)
!5244 = !DILocation(line: 1383, column: 12, scope: !5233)
!5245 = !DILocation(line: 1383, column: 18, scope: !5233)
!5246 = !DILocation(line: 1388, column: 5, scope: !5233)
!5247 = !DILocation(line: 1391, column: 7, scope: !5233)
!5248 = !DILocation(line: 1389, column: 11, scope: !5233)
!5249 = !DILocation(line: 1389, column: 20, scope: !5233)
!5250 = !DILocation(line: 1389, column: 18, scope: !5233)
!5251 = !DILocation(line: 1389, column: 28, scope: !5233)
!5252 = !DILocation(line: 1388, column: 9, scope: !5233)
!5253 = !DILocation(line: 1390, column: 11, scope: !5233)
!5254 = !DILocation(line: 1390, column: 18, scope: !5233)
!5255 = !DILocation(line: 1391, column: 13, scope: !5233)
!5256 = !DILocation(line: 1394, column: 5, scope: !5233)
!5257 = !DILocation(line: 1394, column: 8, scope: !5233)
!5258 = !DILocation(line: 1394, column: 30, scope: !5233)
!5259 = !DILocation(line: 1395, column: 5, scope: !5233)
!5260 = !DILocation(line: 1395, column: 8, scope: !5233)
!5261 = !DILocation(line: 1395, column: 22, scope: !5233)
!5262 = !DILocation(line: 1395, column: 20, scope: !5233)
!5263 = !DILocation(line: 1395, column: 44, scope: !5233)
!5264 = !DILocation(line: 1396, column: 4, scope: !5233)
!5265 = !DILocation(line: 1396, column: 8, scope: !5233)
!5266 = !DILocation(line: 1381, column: 7, scope: !4802)
!5267 = !DILocation(line: 1401, column: 11, scope: !5268)
!5268 = distinct !DILexicalBlock(scope: !5269, file: !3, line: 1401, column: 11)
!5269 = distinct !DILexicalBlock(scope: !5233, file: !3, line: 1400, column: 5)
!5270 = !DILocation(line: 1401, column: 11, scope: !5269)
!5271 = !DILocation(line: 1402, column: 8, scope: !5268)
!5272 = !DILocation(line: 1402, column: 6, scope: !5268)
!5273 = !DILocation(line: 1402, column: 2, scope: !5268)
!5274 = !DILocation(line: 1403, column: 16, scope: !5275)
!5275 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 1403, column: 16)
!5276 = !DILocation(line: 1403, column: 25, scope: !5275)
!5277 = !DILocation(line: 1403, column: 22, scope: !5275)
!5278 = !DILocation(line: 1403, column: 16, scope: !5268)
!5279 = !DILocalVariable(name: "sub", scope: !5280, file: !3, line: 1405, type: !2301)
!5280 = distinct !DILexicalBlock(scope: !5275, file: !3, line: 1404, column: 2)
!5281 = !DILocation(line: 1405, column: 8, scope: !5280)
!5282 = !DILocation(line: 1405, column: 35, scope: !5280)
!5283 = !DILocation(line: 1405, column: 42, scope: !5280)
!5284 = !DILocation(line: 1405, column: 47, scope: !5280)
!5285 = !DILocation(line: 1406, column: 7, scope: !5280)
!5286 = !DILocation(line: 1405, column: 14, scope: !5280)
!5287 = !DILocation(line: 1407, column: 8, scope: !5288)
!5288 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 1407, column: 8)
!5289 = !DILocation(line: 1407, column: 12, scope: !5288)
!5290 = !DILocation(line: 1407, column: 8, scope: !5280)
!5291 = !DILocation(line: 1408, column: 6, scope: !5288)
!5292 = !DILocation(line: 1409, column: 10, scope: !5280)
!5293 = !DILocation(line: 1409, column: 8, scope: !5280)
!5294 = !DILocation(line: 1410, column: 2, scope: !5280)
!5295 = !DILocation(line: 1411, column: 11, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !5269, file: !3, line: 1411, column: 11)
!5297 = !DILocation(line: 1411, column: 20, scope: !5296)
!5298 = !DILocation(line: 1411, column: 17, scope: !5296)
!5299 = !DILocation(line: 1411, column: 11, scope: !5269)
!5300 = !DILocation(line: 1412, column: 26, scope: !5296)
!5301 = !DILocation(line: 1412, column: 33, scope: !5296)
!5302 = !DILocation(line: 1412, column: 38, scope: !5296)
!5303 = !DILocation(line: 1412, column: 9, scope: !5296)
!5304 = !DILocation(line: 1412, column: 2, scope: !5296)
!5305 = !DILocation(line: 1413, column: 14, scope: !5269)
!5306 = !DILocation(line: 1413, column: 7, scope: !5269)
!5307 = !DILocation(line: 1399, column: 45, scope: !5233)
!5308 = !DILabel(scope: !4802, name: "no_subreg_mode_swap", file: !3, line: 1415)
!5309 = !DILocation(line: 1415, column: 2, scope: !4802)
!5310 = !DILocation(line: 1419, column: 7, scope: !5311)
!5311 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1419, column: 7)
!5312 = !DILocation(line: 1419, column: 15, scope: !5311)
!5313 = !DILocation(line: 1419, column: 7, scope: !4802)
!5314 = !DILocalVariable(name: "nwords", scope: !5315, file: !3, line: 1426, type: !7)
!5315 = distinct !DILexicalBlock(scope: !5311, file: !3, line: 1420, column: 5)
!5316 = !DILocation(line: 1426, column: 20, scope: !5315)
!5317 = !DILocation(line: 1426, column: 30, scope: !5315)
!5318 = !DILocation(line: 1426, column: 38, scope: !5315)
!5319 = !DILocation(line: 1426, column: 61, scope: !5315)
!5320 = !DILocation(line: 1426, column: 29, scope: !5315)
!5321 = !DILocalVariable(name: "i", scope: !5315, file: !3, line: 1427, type: !7)
!5322 = !DILocation(line: 1427, column: 20, scope: !5315)
!5323 = !DILocation(line: 1429, column: 11, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5315, file: !3, line: 1429, column: 11)
!5325 = !DILocation(line: 1429, column: 18, scope: !5324)
!5326 = !DILocation(line: 1429, column: 23, scope: !5324)
!5327 = !DILocation(line: 1429, column: 27, scope: !5324)
!5328 = !DILocation(line: 1429, column: 11, scope: !5315)
!5329 = !DILocation(line: 1430, column: 24, scope: !5324)
!5330 = !DILocation(line: 1430, column: 11, scope: !5324)
!5331 = !DILocation(line: 1430, column: 9, scope: !5324)
!5332 = !DILocation(line: 1430, column: 2, scope: !5324)
!5333 = !DILocation(line: 1433, column: 21, scope: !5315)
!5334 = !DILocation(line: 1433, column: 7, scope: !5315)
!5335 = !DILocation(line: 1435, column: 14, scope: !5336)
!5336 = distinct !DILexicalBlock(scope: !5315, file: !3, line: 1435, column: 7)
!5337 = !DILocation(line: 1435, column: 12, scope: !5336)
!5338 = !DILocation(line: 1435, column: 19, scope: !5339)
!5339 = distinct !DILexicalBlock(scope: !5336, file: !3, line: 1435, column: 7)
!5340 = !DILocation(line: 1435, column: 23, scope: !5339)
!5341 = !DILocation(line: 1435, column: 21, scope: !5339)
!5342 = !DILocation(line: 1435, column: 7, scope: !5336)
!5343 = !DILocalVariable(name: "wordnum", scope: !5344, file: !3, line: 1440, type: !7)
!5344 = distinct !DILexicalBlock(scope: !5339, file: !3, line: 1436, column: 2)
!5345 = !DILocation(line: 1440, column: 17, scope: !5344)
!5346 = !DILocation(line: 1443, column: 11, scope: !5344)
!5347 = !DILocalVariable(name: "bit_offset", scope: !5344, file: !3, line: 1445, type: !7)
!5348 = !DILocation(line: 1445, column: 17, scope: !5344)
!5349 = !DILocation(line: 1448, column: 18, scope: !5344)
!5350 = !DILocation(line: 1448, column: 20, scope: !5344)
!5351 = !DILocalVariable(name: "target_part", scope: !5344, file: !3, line: 1449, type: !2301)
!5352 = !DILocation(line: 1449, column: 8, scope: !5344)
!5353 = !DILocation(line: 1449, column: 39, scope: !5344)
!5354 = !DILocation(line: 1449, column: 47, scope: !5344)
!5355 = !DILocation(line: 1449, column: 22, scope: !5344)
!5356 = !DILocalVariable(name: "result_part", scope: !5344, file: !3, line: 1450, type: !2301)
!5357 = !DILocation(line: 1450, column: 8, scope: !5344)
!5358 = !DILocation(line: 1451, column: 27, scope: !5344)
!5359 = !DILocation(line: 1451, column: 32, scope: !5344)
!5360 = !DILocation(line: 1453, column: 6, scope: !5344)
!5361 = !DILocation(line: 1453, column: 15, scope: !5344)
!5362 = !DILocation(line: 1453, column: 13, scope: !5344)
!5363 = !DILocation(line: 1453, column: 30, scope: !5344)
!5364 = !DILocation(line: 1453, column: 43, scope: !5344)
!5365 = !DILocation(line: 1454, column: 6, scope: !5344)
!5366 = !DILocation(line: 1451, column: 8, scope: !5344)
!5367 = !DILocation(line: 1456, column: 4, scope: !5344)
!5368 = !DILocation(line: 1458, column: 8, scope: !5369)
!5369 = distinct !DILexicalBlock(scope: !5344, file: !3, line: 1458, column: 8)
!5370 = !DILocation(line: 1458, column: 23, scope: !5369)
!5371 = !DILocation(line: 1458, column: 20, scope: !5369)
!5372 = !DILocation(line: 1458, column: 8, scope: !5344)
!5373 = !DILocation(line: 1459, column: 22, scope: !5369)
!5374 = !DILocation(line: 1459, column: 35, scope: !5369)
!5375 = !DILocation(line: 1459, column: 6, scope: !5369)
!5376 = !DILocation(line: 1460, column: 2, scope: !5344)
!5377 = !DILocation(line: 1435, column: 32, scope: !5339)
!5378 = !DILocation(line: 1435, column: 7, scope: !5339)
!5379 = distinct !{!5379, !5342, !5380}
!5380 = !DILocation(line: 1460, column: 2, scope: !5336)
!5381 = !DILocation(line: 1462, column: 11, scope: !5382)
!5382 = distinct !DILexicalBlock(scope: !5315, file: !3, line: 1462, column: 11)
!5383 = !DILocation(line: 1462, column: 11, scope: !5315)
!5384 = !DILocation(line: 1466, column: 8, scope: !5385)
!5385 = distinct !DILexicalBlock(scope: !5386, file: !3, line: 1466, column: 8)
!5386 = distinct !DILexicalBlock(scope: !5382, file: !3, line: 1463, column: 2)
!5387 = !DILocation(line: 1466, column: 44, scope: !5385)
!5388 = !DILocation(line: 1466, column: 51, scope: !5385)
!5389 = !DILocation(line: 1466, column: 42, scope: !5385)
!5390 = !DILocation(line: 1466, column: 8, scope: !5386)
!5391 = !DILocalVariable(name: "i", scope: !5392, file: !3, line: 1468, type: !7)
!5392 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 1467, column: 6)
!5393 = !DILocation(line: 1468, column: 21, scope: !5392)
!5394 = !DILocalVariable(name: "total_words", scope: !5392, file: !3, line: 1468, type: !7)
!5395 = !DILocation(line: 1468, column: 24, scope: !5392)
!5396 = !DILocation(line: 1470, column: 22, scope: !5392)
!5397 = !DILocation(line: 1470, column: 56, scope: !5392)
!5398 = !DILocation(line: 1470, column: 20, scope: !5392)
!5399 = !DILocation(line: 1471, column: 17, scope: !5400)
!5400 = distinct !DILexicalBlock(scope: !5392, file: !3, line: 1471, column: 8)
!5401 = !DILocation(line: 1471, column: 15, scope: !5400)
!5402 = !DILocation(line: 1471, column: 13, scope: !5400)
!5403 = !DILocation(line: 1471, column: 25, scope: !5404)
!5404 = distinct !DILexicalBlock(scope: !5400, file: !3, line: 1471, column: 8)
!5405 = !DILocation(line: 1471, column: 29, scope: !5404)
!5406 = !DILocation(line: 1471, column: 27, scope: !5404)
!5407 = !DILocation(line: 1471, column: 8, scope: !5400)
!5408 = !DILocation(line: 1473, column: 23, scope: !5404)
!5409 = !DILocation(line: 1474, column: 50, scope: !5404)
!5410 = !DILocation(line: 1473, column: 6, scope: !5404)
!5411 = !DILocation(line: 1476, column: 6, scope: !5404)
!5412 = !DILocation(line: 1472, column: 3, scope: !5404)
!5413 = !DILocation(line: 1471, column: 43, scope: !5404)
!5414 = !DILocation(line: 1471, column: 8, scope: !5404)
!5415 = distinct !{!5415, !5407, !5416}
!5416 = !DILocation(line: 1476, column: 16, scope: !5400)
!5417 = !DILocation(line: 1477, column: 6, scope: !5392)
!5418 = !DILocation(line: 1478, column: 11, scope: !5386)
!5419 = !DILocation(line: 1478, column: 4, scope: !5386)
!5420 = !DILocation(line: 1482, column: 43, scope: !5315)
!5421 = !DILocation(line: 1482, column: 49, scope: !5315)
!5422 = !DILocation(line: 1484, column: 10, scope: !5315)
!5423 = !DILocation(line: 1484, column: 36, scope: !5315)
!5424 = !DILocation(line: 1484, column: 34, scope: !5315)
!5425 = !DILocation(line: 1483, column: 9, scope: !5315)
!5426 = !DILocation(line: 1482, column: 16, scope: !5315)
!5427 = !DILocation(line: 1482, column: 14, scope: !5315)
!5428 = !DILocation(line: 1486, column: 41, scope: !5315)
!5429 = !DILocation(line: 1486, column: 47, scope: !5315)
!5430 = !DILocation(line: 1488, column: 8, scope: !5315)
!5431 = !DILocation(line: 1488, column: 34, scope: !5315)
!5432 = !DILocation(line: 1488, column: 32, scope: !5315)
!5433 = !DILocation(line: 1487, column: 7, scope: !5315)
!5434 = !DILocation(line: 1486, column: 14, scope: !5315)
!5435 = !DILocation(line: 1486, column: 7, scope: !5315)
!5436 = !DILocation(line: 1499, column: 33, scope: !4802)
!5437 = !DILocation(line: 1499, column: 14, scope: !4802)
!5438 = !DILocation(line: 1499, column: 12, scope: !4802)
!5439 = !DILocation(line: 1500, column: 7, scope: !5440)
!5440 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1500, column: 7)
!5441 = !DILocation(line: 1500, column: 16, scope: !5440)
!5442 = !DILocation(line: 1500, column: 7, scope: !4802)
!5443 = !DILocation(line: 1501, column: 35, scope: !5440)
!5444 = !DILocation(line: 1501, column: 16, scope: !5440)
!5445 = !DILocation(line: 1501, column: 14, scope: !5440)
!5446 = !DILocation(line: 1501, column: 5, scope: !5440)
!5447 = !DILocation(line: 1503, column: 3, scope: !4802)
!5448 = !DILocation(line: 1507, column: 8, scope: !5449)
!5449 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1507, column: 7)
!5450 = !DILocation(line: 1507, column: 7, scope: !4802)
!5451 = !DILocation(line: 1509, column: 11, scope: !5452)
!5452 = distinct !DILexicalBlock(scope: !5453, file: !3, line: 1509, column: 11)
!5453 = distinct !DILexicalBlock(scope: !5449, file: !3, line: 1508, column: 5)
!5454 = !DILocation(line: 1509, column: 18, scope: !5452)
!5455 = !DILocation(line: 1510, column: 4, scope: !5452)
!5456 = !DILocation(line: 1510, column: 7, scope: !5452)
!5457 = !DILocation(line: 1510, column: 38, scope: !5452)
!5458 = !DILocation(line: 1509, column: 11, scope: !5453)
!5459 = !DILocation(line: 1512, column: 9, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5461, file: !3, line: 1512, column: 8)
!5461 = distinct !DILexicalBlock(scope: !5452, file: !3, line: 1511, column: 2)
!5462 = !DILocation(line: 1512, column: 8, scope: !5461)
!5463 = !DILocation(line: 1513, column: 25, scope: !5460)
!5464 = !DILocation(line: 1513, column: 12, scope: !5460)
!5465 = !DILocation(line: 1513, column: 10, scope: !5460)
!5466 = !DILocation(line: 1513, column: 6, scope: !5460)
!5467 = !DILocation(line: 1514, column: 26, scope: !5461)
!5468 = !DILocation(line: 1515, column: 19, scope: !5461)
!5469 = !DILocation(line: 1515, column: 25, scope: !5461)
!5470 = !DILocation(line: 1515, column: 32, scope: !5461)
!5471 = !DILocation(line: 1515, column: 24, scope: !5461)
!5472 = !DILocation(line: 1514, column: 10, scope: !5461)
!5473 = !DILocation(line: 1514, column: 8, scope: !5461)
!5474 = !DILocation(line: 1516, column: 2, scope: !5461)
!5475 = !DILocation(line: 1517, column: 14, scope: !5453)
!5476 = !DILocation(line: 1518, column: 5, scope: !5453)
!5477 = !DILocation(line: 1521, column: 35, scope: !4802)
!5478 = !DILocation(line: 1521, column: 14, scope: !4802)
!5479 = !DILocation(line: 1521, column: 12, scope: !4802)
!5480 = !DILocation(line: 1522, column: 11, scope: !4802)
!5481 = !DILocation(line: 1522, column: 9, scope: !4802)
!5482 = !DILocation(line: 1523, column: 7, scope: !5483)
!5483 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1523, column: 7)
!5484 = !DILocation(line: 1523, column: 16, scope: !5483)
!5485 = !DILocation(line: 1524, column: 7, scope: !5483)
!5486 = !DILocation(line: 1524, column: 10, scope: !5483)
!5487 = !DILocation(line: 1524, column: 18, scope: !5483)
!5488 = !DILocation(line: 1525, column: 7, scope: !5483)
!5489 = !DILocation(line: 1525, column: 10, scope: !5483)
!5490 = !DILocation(line: 1525, column: 41, scope: !5483)
!5491 = !DILocation(line: 1525, column: 38, scope: !5483)
!5492 = !DILocation(line: 1528, column: 7, scope: !5483)
!5493 = !DILocation(line: 1528, column: 12, scope: !5483)
!5494 = !DILocation(line: 1528, column: 27, scope: !5483)
!5495 = !DILocation(line: 1528, column: 37, scope: !5483)
!5496 = !DILocation(line: 1528, column: 40, scope: !5483)
!5497 = !DILocation(line: 1528, column: 58, scope: !5483)
!5498 = !DILocation(line: 1528, column: 55, scope: !5483)
!5499 = !DILocation(line: 1529, column: 7, scope: !5483)
!5500 = !DILocation(line: 1529, column: 13, scope: !5483)
!5501 = !DILocation(line: 1529, column: 25, scope: !5483)
!5502 = !DILocation(line: 1529, column: 28, scope: !5483)
!5503 = !DILocation(line: 1529, column: 43, scope: !5483)
!5504 = !DILocation(line: 1530, column: 5, scope: !5483)
!5505 = !DILocation(line: 1530, column: 9, scope: !5483)
!5506 = !DILocation(line: 1530, column: 19, scope: !5483)
!5507 = !DILocation(line: 1530, column: 17, scope: !5483)
!5508 = !DILocation(line: 1530, column: 28, scope: !5483)
!5509 = !DILocation(line: 1530, column: 26, scope: !5483)
!5510 = !DILocation(line: 1531, column: 7, scope: !5483)
!5511 = !DILocation(line: 1531, column: 39, scope: !5483)
!5512 = !DILocation(line: 1531, column: 49, scope: !5483)
!5513 = !DILocation(line: 1531, column: 54, scope: !5483)
!5514 = !DILocation(line: 1531, column: 10, scope: !5483)
!5515 = !DILocation(line: 1523, column: 7, scope: !4802)
!5516 = !DILocalVariable(name: "xbitpos", scope: !5517, file: !3, line: 1533, type: !2375)
!5517 = distinct !DILexicalBlock(scope: !5483, file: !3, line: 1532, column: 5)
!5518 = !DILocation(line: 1533, column: 30, scope: !5517)
!5519 = !DILocation(line: 1533, column: 40, scope: !5517)
!5520 = !DILocalVariable(name: "xoffset", scope: !5517, file: !3, line: 1533, type: !2375)
!5521 = !DILocation(line: 1533, column: 48, scope: !5517)
!5522 = !DILocation(line: 1533, column: 58, scope: !5517)
!5523 = !DILocalVariable(name: "bitsize_rtx", scope: !5517, file: !3, line: 1534, type: !2301)
!5524 = !DILocation(line: 1534, column: 11, scope: !5517)
!5525 = !DILocalVariable(name: "bitpos_rtx", scope: !5517, file: !3, line: 1534, type: !2301)
!5526 = !DILocation(line: 1534, column: 24, scope: !5517)
!5527 = !DILocalVariable(name: "last", scope: !5517, file: !3, line: 1535, type: !2301)
!5528 = !DILocation(line: 1535, column: 11, scope: !5517)
!5529 = !DILocation(line: 1535, column: 18, scope: !5517)
!5530 = !DILocalVariable(name: "xop0", scope: !5517, file: !3, line: 1536, type: !2301)
!5531 = !DILocation(line: 1536, column: 11, scope: !5517)
!5532 = !DILocation(line: 1536, column: 18, scope: !5517)
!5533 = !DILocalVariable(name: "xtarget", scope: !5517, file: !3, line: 1537, type: !2301)
!5534 = !DILocation(line: 1537, column: 11, scope: !5517)
!5535 = !DILocation(line: 1537, column: 21, scope: !5517)
!5536 = !DILocalVariable(name: "xspec_target", scope: !5517, file: !3, line: 1538, type: !2301)
!5537 = !DILocation(line: 1538, column: 11, scope: !5517)
!5538 = !DILocation(line: 1538, column: 26, scope: !5517)
!5539 = !DILocalVariable(name: "xspec_target_subreg", scope: !5517, file: !3, line: 1539, type: !2301)
!5540 = !DILocation(line: 1539, column: 11, scope: !5517)
!5541 = !DILocalVariable(name: "pat", scope: !5517, file: !3, line: 1540, type: !2301)
!5542 = !DILocation(line: 1540, column: 11, scope: !5517)
!5543 = !DILocation(line: 1544, column: 11, scope: !5544)
!5544 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 1544, column: 11)
!5545 = !DILocation(line: 1544, column: 24, scope: !5544)
!5546 = !DILocation(line: 1544, column: 27, scope: !5544)
!5547 = !DILocation(line: 1544, column: 46, scope: !5544)
!5548 = !DILocation(line: 1544, column: 43, scope: !5544)
!5549 = !DILocation(line: 1544, column: 11, scope: !5517)
!5550 = !DILocation(line: 1545, column: 29, scope: !5544)
!5551 = !DILocation(line: 1545, column: 39, scope: !5544)
!5552 = !DILocation(line: 1545, column: 9, scope: !5544)
!5553 = !DILocation(line: 1545, column: 7, scope: !5544)
!5554 = !DILocation(line: 1545, column: 2, scope: !5544)
!5555 = !DILocation(line: 1546, column: 11, scope: !5556)
!5556 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 1546, column: 11)
!5557 = !DILocation(line: 1546, column: 11, scope: !5517)
!5558 = !DILocation(line: 1548, column: 9, scope: !5556)
!5559 = !DILocation(line: 1548, column: 7, scope: !5556)
!5560 = !DILocation(line: 1548, column: 2, scope: !5556)
!5561 = !DILocation(line: 1559, column: 14, scope: !5517)
!5562 = !DILocation(line: 1559, column: 12, scope: !5517)
!5563 = !DILocation(line: 1561, column: 11, scope: !5564)
!5564 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 1561, column: 11)
!5565 = !DILocation(line: 1561, column: 19, scope: !5564)
!5566 = !DILocation(line: 1561, column: 11, scope: !5517)
!5567 = !DILocation(line: 1562, column: 40, scope: !5564)
!5568 = !DILocation(line: 1562, column: 27, scope: !5564)
!5569 = !DILocation(line: 1562, column: 25, scope: !5564)
!5570 = !DILocation(line: 1562, column: 10, scope: !5564)
!5571 = !DILocation(line: 1562, column: 2, scope: !5564)
!5572 = !DILocation(line: 1564, column: 11, scope: !5573)
!5573 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 1564, column: 11)
!5574 = !DILocation(line: 1564, column: 33, scope: !5573)
!5575 = !DILocation(line: 1564, column: 30, scope: !5573)
!5576 = !DILocation(line: 1564, column: 11, scope: !5517)
!5577 = !DILocation(line: 1570, column: 8, scope: !5578)
!5578 = distinct !DILexicalBlock(scope: !5579, file: !3, line: 1570, column: 8)
!5579 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1565, column: 2)
!5580 = !DILocation(line: 1570, column: 8, scope: !5579)
!5581 = !DILocation(line: 1574, column: 18, scope: !5582)
!5582 = distinct !DILexicalBlock(scope: !5578, file: !3, line: 1573, column: 6)
!5583 = !DILocation(line: 1574, column: 31, scope: !5582)
!5584 = !DILocation(line: 1574, column: 41, scope: !5582)
!5585 = !DILocation(line: 1574, column: 16, scope: !5582)
!5586 = !DILocation(line: 1575, column: 12, scope: !5587)
!5587 = distinct !DILexicalBlock(scope: !5582, file: !3, line: 1575, column: 12)
!5588 = !DILocation(line: 1576, column: 7, scope: !5587)
!5589 = !DILocation(line: 1576, column: 5, scope: !5587)
!5590 = !DILocation(line: 1575, column: 12, scope: !5582)
!5591 = !DILocation(line: 1577, column: 25, scope: !5587)
!5592 = !DILocation(line: 1577, column: 23, scope: !5587)
!5593 = !DILocation(line: 1577, column: 3, scope: !5587)
!5594 = !DILocation(line: 1578, column: 6, scope: !5582)
!5595 = !DILocation(line: 1580, column: 29, scope: !5578)
!5596 = !DILocation(line: 1580, column: 16, scope: !5578)
!5597 = !DILocation(line: 1580, column: 14, scope: !5578)
!5598 = !DILocation(line: 1581, column: 2, scope: !5579)
!5599 = !DILocation(line: 1585, column: 28, scope: !5600)
!5600 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 1585, column: 11)
!5601 = !DILocation(line: 1585, column: 12, scope: !5600)
!5602 = !DILocation(line: 1585, column: 35, scope: !5600)
!5603 = !DILocation(line: 1585, column: 46, scope: !5600)
!5604 = !DILocation(line: 1585, column: 57, scope: !5600)
!5605 = !DILocation(line: 1585, column: 66, scope: !5600)
!5606 = !DILocation(line: 1585, column: 11, scope: !5517)
!5607 = !DILocation(line: 1586, column: 25, scope: !5600)
!5608 = !DILocation(line: 1586, column: 12, scope: !5600)
!5609 = !DILocation(line: 1586, column: 10, scope: !5600)
!5610 = !DILocation(line: 1586, column: 2, scope: !5600)
!5611 = !DILocation(line: 1588, column: 21, scope: !5517)
!5612 = !DILocation(line: 1588, column: 19, scope: !5517)
!5613 = !DILocation(line: 1589, column: 20, scope: !5517)
!5614 = !DILocation(line: 1589, column: 18, scope: !5517)
!5615 = !DILocation(line: 1591, column: 14, scope: !5517)
!5616 = !DILocation(line: 1592, column: 20, scope: !5517)
!5617 = !DILocation(line: 1592, column: 29, scope: !5517)
!5618 = !DILocation(line: 1592, column: 35, scope: !5517)
!5619 = !DILocation(line: 1592, column: 48, scope: !5517)
!5620 = !DILocation(line: 1592, column: 9, scope: !5517)
!5621 = !DILocation(line: 1593, column: 19, scope: !5517)
!5622 = !DILocation(line: 1593, column: 28, scope: !5517)
!5623 = !DILocation(line: 1593, column: 34, scope: !5517)
!5624 = !DILocation(line: 1593, column: 47, scope: !5517)
!5625 = !DILocation(line: 1593, column: 9, scope: !5517)
!5626 = !DILocation(line: 1591, column: 11, scope: !5517)
!5627 = !DILocation(line: 1594, column: 11, scope: !5628)
!5628 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 1594, column: 11)
!5629 = !DILocation(line: 1594, column: 11, scope: !5517)
!5630 = !DILocation(line: 1596, column: 15, scope: !5631)
!5631 = distinct !DILexicalBlock(scope: !5628, file: !3, line: 1595, column: 2)
!5632 = !DILocation(line: 1596, column: 4, scope: !5631)
!5633 = !DILocation(line: 1597, column: 8, scope: !5634)
!5634 = distinct !DILexicalBlock(scope: !5631, file: !3, line: 1597, column: 8)
!5635 = !DILocation(line: 1597, column: 19, scope: !5634)
!5636 = !DILocation(line: 1597, column: 16, scope: !5634)
!5637 = !DILocation(line: 1597, column: 8, scope: !5631)
!5638 = !DILocation(line: 1598, column: 13, scope: !5634)
!5639 = !DILocation(line: 1598, column: 6, scope: !5634)
!5640 = !DILocation(line: 1599, column: 8, scope: !5641)
!5641 = distinct !DILexicalBlock(scope: !5631, file: !3, line: 1599, column: 8)
!5642 = !DILocation(line: 1599, column: 19, scope: !5641)
!5643 = !DILocation(line: 1599, column: 16, scope: !5641)
!5644 = !DILocation(line: 1599, column: 8, scope: !5631)
!5645 = !DILocation(line: 1600, column: 13, scope: !5641)
!5646 = !DILocation(line: 1600, column: 6, scope: !5641)
!5647 = !DILocation(line: 1601, column: 40, scope: !5631)
!5648 = !DILocation(line: 1601, column: 49, scope: !5631)
!5649 = !DILocation(line: 1601, column: 55, scope: !5631)
!5650 = !DILocation(line: 1601, column: 62, scope: !5631)
!5651 = !DILocation(line: 1601, column: 11, scope: !5631)
!5652 = !DILocation(line: 1601, column: 4, scope: !5631)
!5653 = !DILocation(line: 1603, column: 27, scope: !5517)
!5654 = !DILocation(line: 1603, column: 7, scope: !5517)
!5655 = !DILocation(line: 1604, column: 5, scope: !5517)
!5656 = !DILocation(line: 1608, column: 7, scope: !5657)
!5657 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1608, column: 7)
!5658 = !DILocation(line: 1608, column: 16, scope: !5657)
!5659 = !DILocation(line: 1608, column: 36, scope: !5657)
!5660 = !DILocation(line: 1608, column: 39, scope: !5657)
!5661 = !DILocation(line: 1608, column: 7, scope: !4802)
!5662 = !DILocalVariable(name: "bestmode", scope: !5663, file: !3, line: 1610, type: !5)
!5663 = distinct !DILexicalBlock(scope: !5657, file: !3, line: 1609, column: 5)
!5664 = !DILocation(line: 1610, column: 25, scope: !5663)
!5665 = !DILocation(line: 1618, column: 11, scope: !5666)
!5666 = distinct !DILexicalBlock(scope: !5663, file: !3, line: 1618, column: 11)
!5667 = !DILocation(line: 1618, column: 26, scope: !5666)
!5668 = !DILocation(line: 1619, column: 4, scope: !5666)
!5669 = !DILocation(line: 1619, column: 8, scope: !5666)
!5670 = !DILocation(line: 1619, column: 17, scope: !5666)
!5671 = !DILocation(line: 1620, column: 8, scope: !5666)
!5672 = !DILocation(line: 1620, column: 11, scope: !5666)
!5673 = !DILocation(line: 1620, column: 44, scope: !5666)
!5674 = !DILocation(line: 1620, column: 42, scope: !5666)
!5675 = !DILocation(line: 1618, column: 11, scope: !5663)
!5676 = !DILocation(line: 1621, column: 28, scope: !5666)
!5677 = !DILocation(line: 1621, column: 37, scope: !5666)
!5678 = !DILocation(line: 1621, column: 45, scope: !5666)
!5679 = !DILocation(line: 1622, column: 8, scope: !5666)
!5680 = !DILocation(line: 1622, column: 17, scope: !5666)
!5681 = !DILocation(line: 1623, column: 21, scope: !5666)
!5682 = !DILocation(line: 1624, column: 7, scope: !5666)
!5683 = !DILocation(line: 1621, column: 13, scope: !5666)
!5684 = !DILocation(line: 1621, column: 11, scope: !5666)
!5685 = !DILocation(line: 1621, column: 2, scope: !5666)
!5686 = !DILocation(line: 1626, column: 13, scope: !5666)
!5687 = !DILocation(line: 1626, column: 11, scope: !5666)
!5688 = !DILocation(line: 1628, column: 11, scope: !5689)
!5689 = distinct !DILexicalBlock(scope: !5663, file: !3, line: 1628, column: 11)
!5690 = !DILocation(line: 1628, column: 20, scope: !5689)
!5691 = !DILocation(line: 1628, column: 11, scope: !5663)
!5692 = !DILocalVariable(name: "xoffset", scope: !5693, file: !3, line: 1632, type: !2375)
!5693 = distinct !DILexicalBlock(scope: !5689, file: !3, line: 1631, column: 2)
!5694 = !DILocation(line: 1632, column: 27, scope: !5693)
!5695 = !DILocalVariable(name: "xbitpos", scope: !5693, file: !3, line: 1632, type: !2375)
!5696 = !DILocation(line: 1632, column: 36, scope: !5693)
!5697 = !DILocation(line: 1636, column: 11, scope: !5693)
!5698 = !DILocation(line: 1636, column: 9, scope: !5693)
!5699 = !DILocation(line: 1637, column: 15, scope: !5693)
!5700 = !DILocation(line: 1637, column: 24, scope: !5693)
!5701 = !DILocation(line: 1637, column: 22, scope: !5693)
!5702 = !DILocation(line: 1637, column: 32, scope: !5693)
!5703 = !DILocation(line: 1637, column: 30, scope: !5693)
!5704 = !DILocation(line: 1637, column: 12, scope: !5693)
!5705 = !DILocation(line: 1638, column: 14, scope: !5693)
!5706 = !DILocation(line: 1638, column: 23, scope: !5693)
!5707 = !DILocation(line: 1638, column: 21, scope: !5693)
!5708 = !DILocation(line: 1638, column: 12, scope: !5693)
!5709 = !DILocation(line: 1641, column: 8, scope: !5710)
!5710 = distinct !DILexicalBlock(scope: !5693, file: !3, line: 1641, column: 8)
!5711 = !DILocation(line: 1641, column: 16, scope: !5710)
!5712 = !DILocation(line: 1641, column: 34, scope: !5710)
!5713 = !DILocation(line: 1641, column: 32, scope: !5710)
!5714 = !DILocation(line: 1642, column: 11, scope: !5710)
!5715 = !DILocation(line: 1642, column: 18, scope: !5710)
!5716 = !DILocation(line: 1642, column: 36, scope: !5710)
!5717 = !DILocation(line: 1642, column: 34, scope: !5710)
!5718 = !DILocation(line: 1642, column: 8, scope: !5710)
!5719 = !DILocation(line: 1641, column: 8, scope: !5693)
!5720 = !DILocalVariable(name: "last", scope: !5721, file: !3, line: 1644, type: !2301)
!5721 = distinct !DILexicalBlock(scope: !5710, file: !3, line: 1643, column: 6)
!5722 = !DILocation(line: 1644, column: 12, scope: !5721)
!5723 = !DILocalVariable(name: "result", scope: !5721, file: !3, line: 1644, type: !2301)
!5724 = !DILocation(line: 1644, column: 18, scope: !5721)
!5725 = !DILocalVariable(name: "xop0", scope: !5721, file: !3, line: 1644, type: !2301)
!5726 = !DILocation(line: 1644, column: 26, scope: !5721)
!5727 = !DILocation(line: 1646, column: 15, scope: !5721)
!5728 = !DILocation(line: 1646, column: 13, scope: !5721)
!5729 = !DILocation(line: 1649, column: 15, scope: !5721)
!5730 = !DILocation(line: 1649, column: 13, scope: !5721)
!5731 = !DILocation(line: 1650, column: 26, scope: !5721)
!5732 = !DILocation(line: 1650, column: 36, scope: !5721)
!5733 = !DILocation(line: 1650, column: 15, scope: !5721)
!5734 = !DILocation(line: 1650, column: 13, scope: !5721)
!5735 = !DILocation(line: 1651, column: 38, scope: !5721)
!5736 = !DILocation(line: 1651, column: 44, scope: !5721)
!5737 = !DILocation(line: 1651, column: 53, scope: !5721)
!5738 = !DILocation(line: 1652, column: 10, scope: !5721)
!5739 = !DILocation(line: 1652, column: 21, scope: !5721)
!5740 = !DILocation(line: 1653, column: 10, scope: !5721)
!5741 = !DILocation(line: 1653, column: 16, scope: !5721)
!5742 = !DILocation(line: 1651, column: 17, scope: !5721)
!5743 = !DILocation(line: 1651, column: 15, scope: !5721)
!5744 = !DILocation(line: 1654, column: 12, scope: !5745)
!5745 = distinct !DILexicalBlock(scope: !5721, file: !3, line: 1654, column: 12)
!5746 = !DILocation(line: 1654, column: 12, scope: !5721)
!5747 = !DILocation(line: 1655, column: 10, scope: !5745)
!5748 = !DILocation(line: 1655, column: 3, scope: !5745)
!5749 = !DILocation(line: 1657, column: 28, scope: !5721)
!5750 = !DILocation(line: 1657, column: 8, scope: !5721)
!5751 = !DILocation(line: 1658, column: 6, scope: !5721)
!5752 = !DILocation(line: 1659, column: 2, scope: !5693)
!5753 = !DILocation(line: 1660, column: 5, scope: !5663)
!5754 = !DILocation(line: 1662, column: 8, scope: !5755)
!5755 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1662, column: 7)
!5756 = !DILocation(line: 1662, column: 7, scope: !4802)
!5757 = !DILocation(line: 1663, column: 5, scope: !5755)
!5758 = !DILocation(line: 1665, column: 37, scope: !4802)
!5759 = !DILocation(line: 1665, column: 47, scope: !4802)
!5760 = !DILocation(line: 1665, column: 52, scope: !4802)
!5761 = !DILocation(line: 1665, column: 60, scope: !4802)
!5762 = !DILocation(line: 1666, column: 9, scope: !4802)
!5763 = !DILocation(line: 1666, column: 17, scope: !4802)
!5764 = !DILocation(line: 1666, column: 25, scope: !4802)
!5765 = !DILocation(line: 1665, column: 12, scope: !4802)
!5766 = !DILocation(line: 1665, column: 10, scope: !4802)
!5767 = !DILocation(line: 1667, column: 39, scope: !4802)
!5768 = !DILocation(line: 1667, column: 47, scope: !4802)
!5769 = !DILocation(line: 1667, column: 53, scope: !4802)
!5770 = !DILocation(line: 1667, column: 60, scope: !4802)
!5771 = !DILocation(line: 1667, column: 10, scope: !4802)
!5772 = !DILocation(line: 1667, column: 3, scope: !4802)
!5773 = !DILocation(line: 1668, column: 1, scope: !4802)
!5774 = distinct !DISubprogram(name: "extract_low_bits", scope: !3, file: !3, line: 2033, type: !5775, scopeLine: 2034, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!5775 = !DISubroutineType(types: !5776)
!5776 = !{!2301, !5, !5, !2301}
!5777 = !DILocalVariable(name: "mode", arg: 1, scope: !5774, file: !3, line: 2033, type: !5)
!5778 = !DILocation(line: 2033, column: 37, scope: !5774)
!5779 = !DILocalVariable(name: "src_mode", arg: 2, scope: !5774, file: !3, line: 2033, type: !5)
!5780 = !DILocation(line: 2033, column: 61, scope: !5774)
!5781 = !DILocalVariable(name: "src", arg: 3, scope: !5774, file: !3, line: 2033, type: !2301)
!5782 = !DILocation(line: 2033, column: 75, scope: !5774)
!5783 = !DILocalVariable(name: "int_mode", scope: !5774, file: !3, line: 2035, type: !5)
!5784 = !DILocation(line: 2035, column: 21, scope: !5774)
!5785 = !DILocalVariable(name: "src_int_mode", scope: !5774, file: !3, line: 2035, type: !5)
!5786 = !DILocation(line: 2035, column: 31, scope: !5774)
!5787 = !DILocation(line: 2037, column: 7, scope: !5788)
!5788 = distinct !DILexicalBlock(scope: !5774, file: !3, line: 2037, column: 7)
!5789 = !DILocation(line: 2037, column: 15, scope: !5788)
!5790 = !DILocation(line: 2037, column: 12, scope: !5788)
!5791 = !DILocation(line: 2037, column: 7, scope: !5774)
!5792 = !DILocation(line: 2038, column: 12, scope: !5788)
!5793 = !DILocation(line: 2038, column: 5, scope: !5788)
!5794 = !DILocation(line: 2040, column: 7, scope: !5795)
!5795 = distinct !DILexicalBlock(scope: !5774, file: !3, line: 2040, column: 7)
!5796 = !DILocation(line: 2040, column: 7, scope: !5774)
!5797 = !DILocalVariable(name: "byte", scope: !5798, file: !3, line: 2045, type: !7)
!5798 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 2041, column: 5)
!5799 = !DILocation(line: 2045, column: 20, scope: !5798)
!5800 = !DILocation(line: 2045, column: 50, scope: !5798)
!5801 = !DILocation(line: 2045, column: 56, scope: !5798)
!5802 = !DILocation(line: 2045, column: 27, scope: !5798)
!5803 = !DILocalVariable(name: "ret", scope: !5798, file: !3, line: 2046, type: !2301)
!5804 = !DILocation(line: 2046, column: 11, scope: !5798)
!5805 = !DILocation(line: 2046, column: 34, scope: !5798)
!5806 = !DILocation(line: 2046, column: 40, scope: !5798)
!5807 = !DILocation(line: 2046, column: 45, scope: !5798)
!5808 = !DILocation(line: 2046, column: 55, scope: !5798)
!5809 = !DILocation(line: 2046, column: 17, scope: !5798)
!5810 = !DILocation(line: 2047, column: 11, scope: !5811)
!5811 = distinct !DILexicalBlock(scope: !5798, file: !3, line: 2047, column: 11)
!5812 = !DILocation(line: 2047, column: 11, scope: !5798)
!5813 = !DILocation(line: 2048, column: 9, scope: !5811)
!5814 = !DILocation(line: 2048, column: 2, scope: !5811)
!5815 = !DILocation(line: 2050, column: 11, scope: !5816)
!5816 = distinct !DILexicalBlock(scope: !5798, file: !3, line: 2050, column: 11)
!5817 = !DILocation(line: 2050, column: 26, scope: !5816)
!5818 = !DILocation(line: 2051, column: 4, scope: !5816)
!5819 = !DILocation(line: 2051, column: 25, scope: !5816)
!5820 = !DILocation(line: 2051, column: 31, scope: !5816)
!5821 = !DILocation(line: 2051, column: 41, scope: !5816)
!5822 = !DILocation(line: 2051, column: 46, scope: !5816)
!5823 = !DILocation(line: 2051, column: 8, scope: !5816)
!5824 = !DILocation(line: 2050, column: 11, scope: !5798)
!5825 = !DILocation(line: 2052, column: 2, scope: !5816)
!5826 = !DILocation(line: 2054, column: 24, scope: !5798)
!5827 = !DILocation(line: 2054, column: 40, scope: !5798)
!5828 = !DILocation(line: 2054, column: 13, scope: !5798)
!5829 = !DILocation(line: 2054, column: 11, scope: !5798)
!5830 = !DILocation(line: 2055, column: 30, scope: !5798)
!5831 = !DILocation(line: 2055, column: 36, scope: !5798)
!5832 = !DILocation(line: 2055, column: 41, scope: !5798)
!5833 = !DILocation(line: 2055, column: 14, scope: !5798)
!5834 = !DILocation(line: 2055, column: 7, scope: !5798)
!5835 = !DILocation(line: 2058, column: 7, scope: !5836)
!5836 = distinct !DILexicalBlock(scope: !5774, file: !3, line: 2058, column: 7)
!5837 = !DILocation(line: 2058, column: 29, scope: !5836)
!5838 = !DILocation(line: 2058, column: 40, scope: !5836)
!5839 = !DILocation(line: 2058, column: 43, scope: !5836)
!5840 = !DILocation(line: 2058, column: 69, scope: !5836)
!5841 = !DILocation(line: 2058, column: 7, scope: !5774)
!5842 = !DILocation(line: 2059, column: 5, scope: !5836)
!5843 = !DILocation(line: 2061, column: 7, scope: !5844)
!5844 = distinct !DILexicalBlock(scope: !5774, file: !3, line: 2061, column: 7)
!5845 = !DILocation(line: 2061, column: 34, scope: !5844)
!5846 = !DILocation(line: 2061, column: 31, scope: !5844)
!5847 = !DILocation(line: 2062, column: 7, scope: !5844)
!5848 = !DILocation(line: 2062, column: 10, scope: !5844)
!5849 = !DILocation(line: 2061, column: 7, scope: !5774)
!5850 = !DILocalVariable(name: "x", scope: !5851, file: !3, line: 2064, type: !2301)
!5851 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 2063, column: 5)
!5852 = !DILocation(line: 2064, column: 11, scope: !5851)
!5853 = !DILocation(line: 2064, column: 35, scope: !5851)
!5854 = !DILocation(line: 2064, column: 41, scope: !5851)
!5855 = !DILocation(line: 2064, column: 15, scope: !5851)
!5856 = !DILocation(line: 2065, column: 11, scope: !5857)
!5857 = distinct !DILexicalBlock(scope: !5851, file: !3, line: 2065, column: 11)
!5858 = !DILocation(line: 2065, column: 11, scope: !5851)
!5859 = !DILocation(line: 2066, column: 16, scope: !5857)
!5860 = !DILocation(line: 2066, column: 9, scope: !5857)
!5861 = !DILocation(line: 2067, column: 5, scope: !5851)
!5862 = !DILocation(line: 2069, column: 37, scope: !5774)
!5863 = !DILocation(line: 2069, column: 18, scope: !5774)
!5864 = !DILocation(line: 2069, column: 16, scope: !5774)
!5865 = !DILocation(line: 2070, column: 33, scope: !5774)
!5866 = !DILocation(line: 2070, column: 14, scope: !5774)
!5867 = !DILocation(line: 2070, column: 12, scope: !5774)
!5868 = !DILocation(line: 2071, column: 7, scope: !5869)
!5869 = distinct !DILexicalBlock(scope: !5774, file: !3, line: 2071, column: 7)
!5870 = !DILocation(line: 2071, column: 20, scope: !5869)
!5871 = !DILocation(line: 2071, column: 31, scope: !5869)
!5872 = !DILocation(line: 2071, column: 34, scope: !5869)
!5873 = !DILocation(line: 2071, column: 43, scope: !5869)
!5874 = !DILocation(line: 2071, column: 7, scope: !5774)
!5875 = !DILocation(line: 2072, column: 5, scope: !5869)
!5876 = !DILocation(line: 2074, column: 8, scope: !5877)
!5877 = distinct !DILexicalBlock(scope: !5774, file: !3, line: 2074, column: 7)
!5878 = !DILocation(line: 2074, column: 7, scope: !5774)
!5879 = !DILocation(line: 2075, column: 5, scope: !5877)
!5880 = !DILocation(line: 2076, column: 8, scope: !5881)
!5881 = distinct !DILexicalBlock(scope: !5774, file: !3, line: 2076, column: 7)
!5882 = !DILocation(line: 2076, column: 7, scope: !5774)
!5883 = !DILocation(line: 2077, column: 5, scope: !5881)
!5884 = !DILocation(line: 2079, column: 9, scope: !5774)
!5885 = !DILocation(line: 2079, column: 22, scope: !5774)
!5886 = !DILocation(line: 2079, column: 36, scope: !5774)
!5887 = !DILocation(line: 2079, column: 7, scope: !5774)
!5888 = !DILocation(line: 2080, column: 24, scope: !5774)
!5889 = !DILocation(line: 2080, column: 34, scope: !5774)
!5890 = !DILocation(line: 2080, column: 48, scope: !5774)
!5891 = !DILocation(line: 2080, column: 9, scope: !5774)
!5892 = !DILocation(line: 2080, column: 7, scope: !5774)
!5893 = !DILocation(line: 2081, column: 9, scope: !5774)
!5894 = !DILocation(line: 2081, column: 22, scope: !5774)
!5895 = !DILocation(line: 2081, column: 28, scope: !5774)
!5896 = !DILocation(line: 2081, column: 7, scope: !5774)
!5897 = !DILocation(line: 2082, column: 10, scope: !5774)
!5898 = !DILocation(line: 2082, column: 3, scope: !5774)
!5899 = !DILocation(line: 2083, column: 1, scope: !5774)
!5900 = distinct !DISubprogram(name: "expand_inc", scope: !3, file: !3, line: 2088, type: !5901, scopeLine: 2089, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!5901 = !DISubroutineType(types: !5902)
!5902 = !{null, !2301, !2301}
!5903 = !DILocalVariable(name: "target", arg: 1, scope: !5900, file: !3, line: 2088, type: !2301)
!5904 = !DILocation(line: 2088, column: 17, scope: !5900)
!5905 = !DILocalVariable(name: "inc", arg: 2, scope: !5900, file: !3, line: 2088, type: !2301)
!5906 = !DILocation(line: 2088, column: 29, scope: !5900)
!5907 = !DILocalVariable(name: "value", scope: !5900, file: !3, line: 2090, type: !2301)
!5908 = !DILocation(line: 2090, column: 7, scope: !5900)
!5909 = !DILocation(line: 2090, column: 29, scope: !5900)
!5910 = !DILocation(line: 2091, column: 8, scope: !5900)
!5911 = !DILocation(line: 2091, column: 16, scope: !5900)
!5912 = !DILocation(line: 2092, column: 8, scope: !5900)
!5913 = !DILocation(line: 2090, column: 15, scope: !5900)
!5914 = !DILocation(line: 2093, column: 7, scope: !5915)
!5915 = distinct !DILexicalBlock(scope: !5900, file: !3, line: 2093, column: 7)
!5916 = !DILocation(line: 2093, column: 16, scope: !5915)
!5917 = !DILocation(line: 2093, column: 13, scope: !5915)
!5918 = !DILocation(line: 2093, column: 7, scope: !5900)
!5919 = !DILocation(line: 2094, column: 21, scope: !5915)
!5920 = !DILocation(line: 2094, column: 29, scope: !5915)
!5921 = !DILocation(line: 2094, column: 5, scope: !5915)
!5922 = !DILocation(line: 2095, column: 1, scope: !5900)
!5923 = distinct !DISubprogram(name: "expand_dec", scope: !3, file: !3, line: 2100, type: !5901, scopeLine: 2101, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!5924 = !DILocalVariable(name: "target", arg: 1, scope: !5923, file: !3, line: 2100, type: !2301)
!5925 = !DILocation(line: 2100, column: 17, scope: !5923)
!5926 = !DILocalVariable(name: "dec", arg: 2, scope: !5923, file: !3, line: 2100, type: !2301)
!5927 = !DILocation(line: 2100, column: 29, scope: !5923)
!5928 = !DILocalVariable(name: "value", scope: !5923, file: !3, line: 2102, type: !2301)
!5929 = !DILocation(line: 2102, column: 7, scope: !5923)
!5930 = !DILocation(line: 2102, column: 29, scope: !5923)
!5931 = !DILocation(line: 2103, column: 8, scope: !5923)
!5932 = !DILocation(line: 2103, column: 16, scope: !5923)
!5933 = !DILocation(line: 2104, column: 8, scope: !5923)
!5934 = !DILocation(line: 2102, column: 15, scope: !5923)
!5935 = !DILocation(line: 2105, column: 7, scope: !5936)
!5936 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 2105, column: 7)
!5937 = !DILocation(line: 2105, column: 16, scope: !5936)
!5938 = !DILocation(line: 2105, column: 13, scope: !5936)
!5939 = !DILocation(line: 2105, column: 7, scope: !5923)
!5940 = !DILocation(line: 2106, column: 21, scope: !5936)
!5941 = !DILocation(line: 2106, column: 29, scope: !5936)
!5942 = !DILocation(line: 2106, column: 5, scope: !5936)
!5943 = !DILocation(line: 2107, column: 1, scope: !5923)
!5944 = distinct !DISubprogram(name: "expand_shift", scope: !3, file: !3, line: 2117, type: !5945, scopeLine: 2119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!5945 = !DISubroutineType(types: !5946)
!5946 = !{!2301, !183, !5, !2301, !2422, !2301, !2325}
!5947 = !DILocalVariable(name: "code", arg: 1, scope: !5944, file: !3, line: 2117, type: !183)
!5948 = !DILocation(line: 2117, column: 30, scope: !5944)
!5949 = !DILocalVariable(name: "mode", arg: 2, scope: !5944, file: !3, line: 2117, type: !5)
!5950 = !DILocation(line: 2117, column: 54, scope: !5944)
!5951 = !DILocalVariable(name: "shifted", arg: 3, scope: !5944, file: !3, line: 2117, type: !2301)
!5952 = !DILocation(line: 2117, column: 64, scope: !5944)
!5953 = !DILocalVariable(name: "amount", arg: 4, scope: !5944, file: !3, line: 2118, type: !2422)
!5954 = !DILocation(line: 2118, column: 13, scope: !5944)
!5955 = !DILocalVariable(name: "target", arg: 5, scope: !5944, file: !3, line: 2118, type: !2301)
!5956 = !DILocation(line: 2118, column: 25, scope: !5944)
!5957 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !5944, file: !3, line: 2118, type: !2325)
!5958 = !DILocation(line: 2118, column: 37, scope: !5944)
!5959 = !DILocalVariable(name: "op1", scope: !5944, file: !3, line: 2120, type: !2301)
!5960 = !DILocation(line: 2120, column: 7, scope: !5944)
!5961 = !DILocalVariable(name: "temp", scope: !5944, file: !3, line: 2120, type: !2301)
!5962 = !DILocation(line: 2120, column: 12, scope: !5944)
!5963 = !DILocalVariable(name: "left", scope: !5944, file: !3, line: 2121, type: !2325)
!5964 = !DILocation(line: 2121, column: 7, scope: !5944)
!5965 = !DILocation(line: 2121, column: 15, scope: !5944)
!5966 = !DILocation(line: 2121, column: 20, scope: !5944)
!5967 = !DILocation(line: 2121, column: 35, scope: !5944)
!5968 = !DILocation(line: 2121, column: 38, scope: !5944)
!5969 = !DILocation(line: 2121, column: 43, scope: !5944)
!5970 = !DILocalVariable(name: "rotate", scope: !5944, file: !3, line: 2122, type: !2325)
!5971 = !DILocation(line: 2122, column: 7, scope: !5944)
!5972 = !DILocation(line: 2122, column: 17, scope: !5944)
!5973 = !DILocation(line: 2122, column: 22, scope: !5944)
!5974 = !DILocation(line: 2122, column: 38, scope: !5944)
!5975 = !DILocation(line: 2122, column: 41, scope: !5944)
!5976 = !DILocation(line: 2122, column: 46, scope: !5944)
!5977 = !DILocalVariable(name: "lshift_optab", scope: !5944, file: !3, line: 2123, type: !5978)
!5978 = !DIDerivedType(tag: DW_TAG_typedef, name: "optab", file: !543, line: 55, baseType: !5979)
!5979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5980, size: 64)
!5980 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_d", file: !543, line: 46, size: 3072, elements: !5981)
!5981 = !{!5982, !5983, !5984, !5985, !5989}
!5982 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !5980, file: !543, line: 48, baseType: !377, size: 32)
!5983 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_basename", scope: !5980, file: !543, line: 49, baseType: !2328, size: 64, offset: 64)
!5984 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_suffix", scope: !5980, file: !543, line: 50, baseType: !2330, size: 8, offset: 128)
!5985 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_gen", scope: !5980, file: !543, line: 51, baseType: !5986, size: 64, offset: 192)
!5986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5987, size: 64)
!5987 = !DISubroutineType(types: !5988)
!5988 = !{null, !5979, !2328, !2330, !5}
!5989 = !DIDerivedType(tag: DW_TAG_member, name: "handlers", scope: !5980, file: !543, line: 53, baseType: !5990, size: 2784, offset: 256)
!5990 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5991, size: 2784, elements: !5994)
!5991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_handlers", file: !543, line: 41, size: 32, elements: !5992)
!5992 = !{!5993}
!5993 = !DIDerivedType(tag: DW_TAG_member, name: "insn_code", scope: !5991, file: !543, line: 43, baseType: !711, size: 32)
!5994 = !{!3376}
!5995 = !DILocation(line: 2123, column: 9, scope: !5944)
!5996 = !DILocalVariable(name: "rshift_arith_optab", scope: !5944, file: !3, line: 2124, type: !5978)
!5997 = !DILocation(line: 2124, column: 9, scope: !5944)
!5998 = !DILocalVariable(name: "rshift_uns_optab", scope: !5944, file: !3, line: 2125, type: !5978)
!5999 = !DILocation(line: 2125, column: 9, scope: !5944)
!6000 = !DILocalVariable(name: "lrotate_optab", scope: !5944, file: !3, line: 2126, type: !5978)
!6001 = !DILocation(line: 2126, column: 9, scope: !5944)
!6002 = !DILocalVariable(name: "rrotate_optab", scope: !5944, file: !3, line: 2127, type: !5978)
!6003 = !DILocation(line: 2127, column: 9, scope: !5944)
!6004 = !DILocalVariable(name: "op1_mode", scope: !5944, file: !3, line: 2128, type: !5)
!6005 = !DILocation(line: 2128, column: 21, scope: !5944)
!6006 = !DILocalVariable(name: "attempt", scope: !5944, file: !3, line: 2129, type: !2325)
!6007 = !DILocation(line: 2129, column: 7, scope: !5944)
!6008 = !DILocalVariable(name: "speed", scope: !5944, file: !3, line: 2130, type: !2535)
!6009 = !DILocation(line: 2130, column: 8, scope: !5944)
!6010 = !DILocation(line: 2130, column: 16, scope: !5944)
!6011 = !DILocation(line: 2132, column: 24, scope: !5944)
!6012 = !DILocation(line: 2132, column: 9, scope: !5944)
!6013 = !DILocation(line: 2132, column: 7, scope: !5944)
!6014 = !DILocation(line: 2133, column: 14, scope: !5944)
!6015 = !DILocation(line: 2133, column: 12, scope: !5944)
!6016 = !DILocation(line: 2137, column: 7, scope: !6017)
!6017 = distinct !DILexicalBlock(scope: !5944, file: !3, line: 2137, column: 7)
!6018 = !DILocation(line: 2137, column: 28, scope: !6017)
!6019 = !DILocation(line: 2137, column: 31, scope: !6017)
!6020 = !DILocation(line: 2137, column: 7, scope: !5944)
!6021 = !DILocation(line: 2139, column: 20, scope: !6022)
!6022 = distinct !DILexicalBlock(scope: !6017, file: !3, line: 2138, column: 5)
!6023 = !DILocation(line: 2140, column: 26, scope: !6022)
!6024 = !DILocation(line: 2141, column: 24, scope: !6022)
!6025 = !DILocation(line: 2142, column: 21, scope: !6022)
!6026 = !DILocation(line: 2143, column: 21, scope: !6022)
!6027 = !DILocation(line: 2144, column: 5, scope: !6022)
!6028 = !DILocation(line: 2163, column: 7, scope: !6029)
!6029 = distinct !DILexicalBlock(scope: !5944, file: !3, line: 2163, column: 7)
!6030 = !DILocation(line: 2163, column: 14, scope: !6029)
!6031 = !DILocation(line: 2163, column: 11, scope: !6029)
!6032 = !DILocation(line: 2163, column: 7, scope: !5944)
!6033 = !DILocation(line: 2164, column: 12, scope: !6029)
!6034 = !DILocation(line: 2164, column: 5, scope: !6029)
!6035 = !DILocation(line: 2168, column: 7, scope: !6036)
!6036 = distinct !DILexicalBlock(scope: !5944, file: !3, line: 2168, column: 7)
!6037 = !DILocation(line: 2168, column: 12, scope: !6036)
!6038 = !DILocation(line: 2169, column: 7, scope: !6036)
!6039 = !DILocation(line: 2169, column: 10, scope: !6036)
!6040 = !DILocation(line: 2170, column: 7, scope: !6036)
!6041 = !DILocation(line: 2170, column: 10, scope: !6036)
!6042 = !DILocation(line: 2170, column: 23, scope: !6036)
!6043 = !DILocation(line: 2171, column: 7, scope: !6036)
!6044 = !DILocation(line: 2171, column: 10, scope: !6036)
!6045 = !DILocation(line: 2171, column: 25, scope: !6036)
!6046 = !DILocation(line: 2171, column: 23, scope: !6036)
!6047 = !DILocation(line: 2172, column: 7, scope: !6036)
!6048 = !DILocation(line: 2172, column: 10, scope: !6036)
!6049 = !DILocation(line: 2172, column: 23, scope: !6036)
!6050 = !DILocation(line: 2173, column: 7, scope: !6036)
!6051 = !DILocation(line: 2173, column: 21, scope: !6036)
!6052 = !DILocation(line: 2173, column: 10, scope: !6036)
!6053 = !DILocation(line: 2173, column: 28, scope: !6036)
!6054 = !DILocation(line: 2173, column: 34, scope: !6036)
!6055 = !DILocation(line: 2173, column: 50, scope: !6036)
!6056 = !DILocation(line: 2173, column: 74, scope: !6036)
!6057 = !DILocation(line: 2173, column: 65, scope: !6036)
!6058 = !DILocation(line: 2173, column: 81, scope: !6036)
!6059 = !DILocation(line: 2173, column: 63, scope: !6036)
!6060 = !DILocation(line: 2173, column: 48, scope: !6036)
!6061 = !DILocation(line: 2174, column: 7, scope: !6036)
!6062 = !DILocation(line: 2174, column: 21, scope: !6036)
!6063 = !DILocation(line: 2174, column: 10, scope: !6036)
!6064 = !DILocation(line: 2174, column: 28, scope: !6036)
!6065 = !DILocation(line: 2174, column: 34, scope: !6036)
!6066 = !DILocation(line: 2174, column: 48, scope: !6036)
!6067 = !DILocation(line: 2168, column: 7, scope: !5944)
!6068 = !DILocalVariable(name: "i", scope: !6069, file: !3, line: 2176, type: !2325)
!6069 = distinct !DILexicalBlock(scope: !6036, file: !3, line: 2175, column: 5)
!6070 = !DILocation(line: 2176, column: 11, scope: !6069)
!6071 = !DILocation(line: 2177, column: 14, scope: !6072)
!6072 = distinct !DILexicalBlock(scope: !6069, file: !3, line: 2177, column: 7)
!6073 = !DILocation(line: 2177, column: 12, scope: !6072)
!6074 = !DILocation(line: 2177, column: 19, scope: !6075)
!6075 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 2177, column: 7)
!6076 = !DILocation(line: 2177, column: 23, scope: !6075)
!6077 = !DILocation(line: 2177, column: 21, scope: !6075)
!6078 = !DILocation(line: 2177, column: 7, scope: !6072)
!6079 = !DILocation(line: 2179, column: 22, scope: !6080)
!6080 = distinct !DILexicalBlock(scope: !6075, file: !3, line: 2178, column: 2)
!6081 = !DILocation(line: 2179, column: 28, scope: !6080)
!6082 = !DILocation(line: 2179, column: 11, scope: !6080)
!6083 = !DILocation(line: 2179, column: 9, scope: !6080)
!6084 = !DILocation(line: 2180, column: 28, scope: !6080)
!6085 = !DILocation(line: 2180, column: 45, scope: !6080)
!6086 = !DILocation(line: 2180, column: 51, scope: !6080)
!6087 = !DILocation(line: 2181, column: 7, scope: !6080)
!6088 = !DILocation(line: 2180, column: 14, scope: !6080)
!6089 = !DILocation(line: 2180, column: 12, scope: !6080)
!6090 = !DILocation(line: 2182, column: 2, scope: !6080)
!6091 = !DILocation(line: 2177, column: 38, scope: !6075)
!6092 = !DILocation(line: 2177, column: 7, scope: !6075)
!6093 = distinct !{!6093, !6078, !6094}
!6094 = !DILocation(line: 2182, column: 2, scope: !6072)
!6095 = !DILocation(line: 2183, column: 14, scope: !6069)
!6096 = !DILocation(line: 2183, column: 7, scope: !6069)
!6097 = !DILocation(line: 2186, column: 16, scope: !6098)
!6098 = distinct !DILexicalBlock(scope: !5944, file: !3, line: 2186, column: 3)
!6099 = !DILocation(line: 2186, column: 8, scope: !6098)
!6100 = !DILocation(line: 2186, column: 21, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6098, file: !3, line: 2186, column: 3)
!6102 = !DILocation(line: 2186, column: 26, scope: !6101)
!6103 = !DILocation(line: 2186, column: 31, scope: !6101)
!6104 = !DILocation(line: 2186, column: 34, scope: !6101)
!6105 = !DILocation(line: 2186, column: 42, scope: !6101)
!6106 = !DILocation(line: 0, scope: !6101)
!6107 = !DILocation(line: 2186, column: 3, scope: !6098)
!6108 = !DILocalVariable(name: "methods", scope: !6109, file: !3, line: 2188, type: !2218)
!6109 = distinct !DILexicalBlock(scope: !6101, file: !3, line: 2187, column: 5)
!6110 = !DILocation(line: 2188, column: 26, scope: !6109)
!6111 = !DILocation(line: 2190, column: 11, scope: !6112)
!6112 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 2190, column: 11)
!6113 = !DILocation(line: 2190, column: 19, scope: !6112)
!6114 = !DILocation(line: 2190, column: 11, scope: !6109)
!6115 = !DILocation(line: 2191, column: 10, scope: !6112)
!6116 = !DILocation(line: 2191, column: 2, scope: !6112)
!6117 = !DILocation(line: 2192, column: 16, scope: !6118)
!6118 = distinct !DILexicalBlock(scope: !6112, file: !3, line: 2192, column: 16)
!6119 = !DILocation(line: 2192, column: 24, scope: !6118)
!6120 = !DILocation(line: 2192, column: 16, scope: !6112)
!6121 = !DILocation(line: 2193, column: 10, scope: !6118)
!6122 = !DILocation(line: 2193, column: 2, scope: !6118)
!6123 = !DILocation(line: 2195, column: 10, scope: !6118)
!6124 = !DILocation(line: 2197, column: 11, scope: !6125)
!6125 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 2197, column: 11)
!6126 = !DILocation(line: 2197, column: 11, scope: !6109)
!6127 = !DILocation(line: 2200, column: 8, scope: !6128)
!6128 = distinct !DILexicalBlock(scope: !6129, file: !3, line: 2200, column: 8)
!6129 = distinct !DILexicalBlock(scope: !6125, file: !3, line: 2198, column: 2)
!6130 = !DILocation(line: 2200, column: 16, scope: !6128)
!6131 = !DILocation(line: 2200, column: 8, scope: !6129)
!6132 = !DILocation(line: 2201, column: 6, scope: !6128)
!6133 = !DILocation(line: 2202, column: 13, scope: !6134)
!6134 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 2202, column: 13)
!6135 = !DILocation(line: 2202, column: 21, scope: !6134)
!6136 = !DILocation(line: 2202, column: 13, scope: !6128)
!6137 = !DILocalVariable(name: "subtarget", scope: !6138, file: !3, line: 2216, type: !2301)
!6138 = distinct !DILexicalBlock(scope: !6134, file: !3, line: 2203, column: 6)
!6139 = !DILocation(line: 2216, column: 12, scope: !6138)
!6140 = !DILocation(line: 2216, column: 24, scope: !6138)
!6141 = !DILocation(line: 2216, column: 34, scope: !6138)
!6142 = !DILocation(line: 2216, column: 31, scope: !6138)
!6143 = !DILocation(line: 2216, column: 48, scope: !6138)
!6144 = !DILocalVariable(name: "new_amount", scope: !6138, file: !3, line: 2217, type: !2422)
!6145 = !DILocation(line: 2217, column: 13, scope: !6138)
!6146 = !DILocalVariable(name: "other_amount", scope: !6138, file: !3, line: 2217, type: !2422)
!6147 = !DILocation(line: 2217, column: 25, scope: !6138)
!6148 = !DILocalVariable(name: "temp1", scope: !6138, file: !3, line: 2218, type: !2301)
!6149 = !DILocation(line: 2218, column: 12, scope: !6138)
!6150 = !DILocalVariable(name: "type", scope: !6138, file: !3, line: 2219, type: !2422)
!6151 = !DILocation(line: 2219, column: 13, scope: !6138)
!6152 = !DILocation(line: 2219, column: 20, scope: !6138)
!6153 = !DILocation(line: 2220, column: 12, scope: !6154)
!6154 = distinct !DILexicalBlock(scope: !6138, file: !3, line: 2220, column: 12)
!6155 = !DILocation(line: 2220, column: 30, scope: !6154)
!6156 = !DILocation(line: 2220, column: 27, scope: !6154)
!6157 = !DILocation(line: 2221, column: 5, scope: !6154)
!6158 = !DILocation(line: 2221, column: 8, scope: !6154)
!6159 = !DILocation(line: 2221, column: 23, scope: !6154)
!6160 = !DILocation(line: 2220, column: 12, scope: !6138)
!6161 = !DILocation(line: 2222, column: 26, scope: !6154)
!6162 = !DILocation(line: 2222, column: 44, scope: !6154)
!6163 = !DILocation(line: 2222, column: 9, scope: !6154)
!6164 = !DILocation(line: 2222, column: 7, scope: !6154)
!6165 = !DILocation(line: 2222, column: 3, scope: !6154)
!6166 = !DILocation(line: 2223, column: 32, scope: !6138)
!6167 = !DILocation(line: 2223, column: 38, scope: !6138)
!6168 = !DILocation(line: 2223, column: 21, scope: !6138)
!6169 = !DILocation(line: 2223, column: 19, scope: !6138)
!6170 = !DILocation(line: 2225, column: 5, scope: !6138)
!6171 = !DILocation(line: 2225, column: 3, scope: !6138)
!6172 = !DILocation(line: 2229, column: 29, scope: !6138)
!6173 = !DILocation(line: 2229, column: 35, scope: !6138)
!6174 = !DILocation(line: 2229, column: 18, scope: !6138)
!6175 = !DILocation(line: 2229, column: 16, scope: !6138)
!6176 = !DILocation(line: 2231, column: 29, scope: !6138)
!6177 = !DILocation(line: 2232, column: 8, scope: !6138)
!6178 = !DILocation(line: 2232, column: 14, scope: !6138)
!6179 = !DILocation(line: 2232, column: 23, scope: !6138)
!6180 = !DILocation(line: 2231, column: 15, scope: !6138)
!6181 = !DILocation(line: 2231, column: 13, scope: !6138)
!6182 = !DILocation(line: 2233, column: 30, scope: !6138)
!6183 = !DILocation(line: 2234, column: 9, scope: !6138)
!6184 = !DILocation(line: 2234, column: 15, scope: !6138)
!6185 = !DILocation(line: 2234, column: 24, scope: !6138)
!6186 = !DILocation(line: 2234, column: 38, scope: !6138)
!6187 = !DILocation(line: 2233, column: 16, scope: !6138)
!6188 = !DILocation(line: 2233, column: 14, scope: !6138)
!6189 = !DILocation(line: 2235, column: 29, scope: !6138)
!6190 = !DILocation(line: 2235, column: 46, scope: !6138)
!6191 = !DILocation(line: 2235, column: 52, scope: !6138)
!6192 = !DILocation(line: 2235, column: 59, scope: !6138)
!6193 = !DILocation(line: 2236, column: 8, scope: !6138)
!6194 = !DILocation(line: 2236, column: 19, scope: !6138)
!6195 = !DILocation(line: 2235, column: 15, scope: !6138)
!6196 = !DILocation(line: 2235, column: 8, scope: !6138)
!6197 = !DILocation(line: 2239, column: 25, scope: !6129)
!6198 = !DILocation(line: 2240, column: 11, scope: !6129)
!6199 = !DILocation(line: 2240, column: 18, scope: !6129)
!6200 = !DILocation(line: 2240, column: 34, scope: !6129)
!6201 = !DILocation(line: 2241, column: 11, scope: !6129)
!6202 = !DILocation(line: 2241, column: 20, scope: !6129)
!6203 = !DILocation(line: 2241, column: 25, scope: !6129)
!6204 = !DILocation(line: 2241, column: 33, scope: !6129)
!6205 = !DILocation(line: 2241, column: 44, scope: !6129)
!6206 = !DILocation(line: 2239, column: 11, scope: !6129)
!6207 = !DILocation(line: 2239, column: 9, scope: !6129)
!6208 = !DILocation(line: 2242, column: 2, scope: !6129)
!6209 = !DILocation(line: 2243, column: 16, scope: !6210)
!6210 = distinct !DILexicalBlock(scope: !6125, file: !3, line: 2243, column: 16)
!6211 = !DILocation(line: 2243, column: 16, scope: !6125)
!6212 = !DILocation(line: 2244, column: 23, scope: !6210)
!6213 = !DILocation(line: 2245, column: 9, scope: !6210)
!6214 = !DILocation(line: 2245, column: 16, scope: !6210)
!6215 = !DILocation(line: 2245, column: 31, scope: !6210)
!6216 = !DILocation(line: 2246, column: 9, scope: !6210)
!6217 = !DILocation(line: 2246, column: 18, scope: !6210)
!6218 = !DILocation(line: 2246, column: 23, scope: !6210)
!6219 = !DILocation(line: 2246, column: 31, scope: !6210)
!6220 = !DILocation(line: 2246, column: 42, scope: !6210)
!6221 = !DILocation(line: 2244, column: 9, scope: !6210)
!6222 = !DILocation(line: 2244, column: 7, scope: !6210)
!6223 = !DILocation(line: 2244, column: 2, scope: !6210)
!6224 = !DILocation(line: 2251, column: 11, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 2251, column: 11)
!6226 = !DILocation(line: 2251, column: 16, scope: !6225)
!6227 = !DILocation(line: 2251, column: 21, scope: !6225)
!6228 = !DILocation(line: 2251, column: 26, scope: !6225)
!6229 = !DILocation(line: 2252, column: 4, scope: !6225)
!6230 = !DILocation(line: 2252, column: 10, scope: !6225)
!6231 = !DILocation(line: 2252, column: 20, scope: !6225)
!6232 = !DILocation(line: 2252, column: 26, scope: !6225)
!6233 = !DILocation(line: 2252, column: 31, scope: !6225)
!6234 = !DILocation(line: 2252, column: 34, scope: !6225)
!6235 = !DILocation(line: 2252, column: 42, scope: !6225)
!6236 = !DILocation(line: 2251, column: 11, scope: !6109)
!6237 = !DILocalVariable(name: "methods1", scope: !6238, file: !3, line: 2254, type: !2218)
!6238 = distinct !DILexicalBlock(scope: !6225, file: !3, line: 2253, column: 2)
!6239 = !DILocation(line: 2254, column: 23, scope: !6238)
!6240 = !DILocation(line: 2254, column: 34, scope: !6238)
!6241 = !DILocation(line: 2258, column: 8, scope: !6242)
!6242 = distinct !DILexicalBlock(scope: !6238, file: !3, line: 2258, column: 8)
!6243 = !DILocation(line: 2258, column: 8, scope: !6238)
!6244 = !DILocation(line: 2259, column: 15, scope: !6242)
!6245 = !DILocation(line: 2259, column: 6, scope: !6242)
!6246 = !DILocation(line: 2263, column: 25, scope: !6238)
!6247 = !DILocation(line: 2264, column: 11, scope: !6238)
!6248 = !DILocation(line: 2264, column: 18, scope: !6238)
!6249 = !DILocation(line: 2264, column: 33, scope: !6238)
!6250 = !DILocation(line: 2265, column: 11, scope: !6238)
!6251 = !DILocation(line: 2265, column: 20, scope: !6238)
!6252 = !DILocation(line: 2265, column: 25, scope: !6238)
!6253 = !DILocation(line: 2265, column: 33, scope: !6238)
!6254 = !DILocation(line: 2265, column: 44, scope: !6238)
!6255 = !DILocation(line: 2263, column: 11, scope: !6238)
!6256 = !DILocation(line: 2263, column: 9, scope: !6238)
!6257 = !DILocation(line: 2266, column: 2, scope: !6238)
!6258 = !DILocation(line: 2272, column: 5, scope: !6109)
!6259 = !DILocation(line: 2186, column: 54, scope: !6101)
!6260 = !DILocation(line: 2186, column: 3, scope: !6101)
!6261 = distinct !{!6261, !6107, !6262}
!6262 = !DILocation(line: 2272, column: 5, scope: !6098)
!6263 = !DILocation(line: 2274, column: 3, scope: !5944)
!6264 = !DILocation(line: 2275, column: 10, scope: !5944)
!6265 = !DILocation(line: 2275, column: 3, scope: !5944)
!6266 = !DILocation(line: 2276, column: 1, scope: !5944)
!6267 = distinct !DISubprogram(name: "expand_normal", scope: !706, file: !706, line: 562, type: !6268, scopeLine: 563, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!6268 = !DISubroutineType(types: !6269)
!6269 = !{!2301, !2422}
!6270 = !DILocalVariable(name: "exp", arg: 1, scope: !6267, file: !706, line: 562, type: !2422)
!6271 = !DILocation(line: 562, column: 21, scope: !6267)
!6272 = !DILocation(line: 564, column: 28, scope: !6267)
!6273 = !DILocation(line: 564, column: 10, scope: !6267)
!6274 = !DILocation(line: 564, column: 3, scope: !6267)
!6275 = distinct !DISubprogram(name: "make_tree", scope: !3, file: !3, line: 4976, type: !6276, scopeLine: 4977, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!6276 = !DISubroutineType(types: !6277)
!6277 = !{!2422, !2422, !2301}
!6278 = !DILocalVariable(name: "type", arg: 1, scope: !6275, file: !3, line: 4976, type: !2422)
!6279 = !DILocation(line: 4976, column: 17, scope: !6275)
!6280 = !DILocalVariable(name: "x", arg: 2, scope: !6275, file: !3, line: 4976, type: !2301)
!6281 = !DILocation(line: 4976, column: 27, scope: !6275)
!6282 = !DILocalVariable(name: "t", scope: !6275, file: !3, line: 4978, type: !2422)
!6283 = !DILocation(line: 4978, column: 8, scope: !6275)
!6284 = !DILocation(line: 4980, column: 11, scope: !6275)
!6285 = !DILocation(line: 4980, column: 3, scope: !6275)
!6286 = !DILocalVariable(name: "hi", scope: !6287, file: !3, line: 4984, type: !2299)
!6287 = distinct !DILexicalBlock(scope: !6288, file: !3, line: 4983, column: 7)
!6288 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 4981, column: 5)
!6289 = !DILocation(line: 4984, column: 16, scope: !6287)
!6290 = !DILocation(line: 4986, column: 6, scope: !6291)
!6291 = distinct !DILexicalBlock(scope: !6287, file: !3, line: 4986, column: 6)
!6292 = !DILocation(line: 4986, column: 17, scope: !6291)
!6293 = !DILocation(line: 4987, column: 6, scope: !6291)
!6294 = !DILocation(line: 4987, column: 11, scope: !6291)
!6295 = !DILocation(line: 4988, column: 4, scope: !6291)
!6296 = !DILocation(line: 4988, column: 8, scope: !6291)
!6297 = !DILocation(line: 4989, column: 8, scope: !6291)
!6298 = !DILocation(line: 4986, column: 6, scope: !6287)
!6299 = !DILocation(line: 4990, column: 7, scope: !6291)
!6300 = !DILocation(line: 4990, column: 4, scope: !6291)
!6301 = !DILocation(line: 4992, column: 26, scope: !6287)
!6302 = !DILocation(line: 4992, column: 32, scope: !6287)
!6303 = !DILocation(line: 4992, column: 44, scope: !6287)
!6304 = !DILocation(line: 4992, column: 6, scope: !6287)
!6305 = !DILocation(line: 4992, column: 4, scope: !6287)
!6306 = !DILocation(line: 4994, column: 9, scope: !6287)
!6307 = !DILocation(line: 4994, column: 2, scope: !6287)
!6308 = !DILocation(line: 4998, column: 11, scope: !6309)
!6309 = distinct !DILexicalBlock(scope: !6288, file: !3, line: 4998, column: 11)
!6310 = !DILocation(line: 4998, column: 24, scope: !6309)
!6311 = !DILocation(line: 4998, column: 11, scope: !6288)
!6312 = !DILocation(line: 4999, column: 26, scope: !6309)
!6313 = !DILocation(line: 5000, column: 5, scope: !6309)
!6314 = !DILocation(line: 5000, column: 27, scope: !6309)
!6315 = !DILocation(line: 4999, column: 6, scope: !6309)
!6316 = !DILocation(line: 4999, column: 4, scope: !6309)
!6317 = !DILocation(line: 4999, column: 2, scope: !6309)
!6318 = !DILocalVariable(name: "d", scope: !6319, file: !3, line: 5003, type: !2482)
!6319 = distinct !DILexicalBlock(scope: !6309, file: !3, line: 5002, column: 2)
!6320 = !DILocation(line: 5003, column: 20, scope: !6319)
!6321 = !DILocation(line: 5005, column: 4, scope: !6319)
!6322 = !DILocation(line: 5006, column: 20, scope: !6319)
!6323 = !DILocation(line: 5006, column: 8, scope: !6319)
!6324 = !DILocation(line: 5006, column: 6, scope: !6319)
!6325 = !DILocation(line: 5009, column: 14, scope: !6288)
!6326 = !DILocation(line: 5009, column: 7, scope: !6288)
!6327 = !DILocalVariable(name: "units", scope: !6328, file: !3, line: 5013, type: !2325)
!6328 = distinct !DILexicalBlock(scope: !6288, file: !3, line: 5012, column: 7)
!6329 = !DILocation(line: 5013, column: 6, scope: !6328)
!6330 = !DILocation(line: 5013, column: 14, scope: !6328)
!6331 = !DILocalVariable(name: "itype", scope: !6328, file: !3, line: 5014, type: !2422)
!6332 = !DILocation(line: 5014, column: 7, scope: !6328)
!6333 = !DILocation(line: 5014, column: 15, scope: !6328)
!6334 = !DILocalVariable(name: "t", scope: !6328, file: !3, line: 5015, type: !2422)
!6335 = !DILocation(line: 5015, column: 7, scope: !6328)
!6336 = !DILocalVariable(name: "i", scope: !6328, file: !3, line: 5016, type: !2325)
!6337 = !DILocation(line: 5016, column: 6, scope: !6328)
!6338 = !DILocation(line: 5020, column: 11, scope: !6339)
!6339 = distinct !DILexicalBlock(scope: !6328, file: !3, line: 5020, column: 2)
!6340 = !DILocation(line: 5020, column: 17, scope: !6339)
!6341 = !DILocation(line: 5020, column: 9, scope: !6339)
!6342 = !DILocation(line: 5020, column: 7, scope: !6339)
!6343 = !DILocation(line: 5020, column: 22, scope: !6344)
!6344 = distinct !DILexicalBlock(scope: !6339, file: !3, line: 5020, column: 2)
!6345 = !DILocation(line: 5020, column: 24, scope: !6344)
!6346 = !DILocation(line: 5020, column: 2, scope: !6339)
!6347 = !DILocalVariable(name: "elt", scope: !6348, file: !3, line: 5022, type: !2301)
!6348 = distinct !DILexicalBlock(scope: !6344, file: !3, line: 5021, column: 4)
!6349 = !DILocation(line: 5022, column: 10, scope: !6348)
!6350 = !DILocation(line: 5022, column: 16, scope: !6348)
!6351 = !DILocation(line: 5023, column: 10, scope: !6348)
!6352 = !DILocation(line: 5023, column: 8, scope: !6348)
!6353 = !DILocation(line: 5024, column: 4, scope: !6348)
!6354 = !DILocation(line: 5020, column: 30, scope: !6344)
!6355 = !DILocation(line: 5020, column: 2, scope: !6344)
!6356 = distinct !{!6356, !6346, !6357}
!6357 = !DILocation(line: 5024, column: 4, scope: !6339)
!6358 = !DILocation(line: 5026, column: 23, scope: !6328)
!6359 = !DILocation(line: 5026, column: 29, scope: !6328)
!6360 = !DILocation(line: 5026, column: 9, scope: !6328)
!6361 = !DILocation(line: 5026, column: 2, scope: !6328)
!6362 = !DILocation(line: 5030, column: 14, scope: !6288)
!6363 = !DILocation(line: 5030, column: 7, scope: !6288)
!6364 = !DILocation(line: 5034, column: 14, scope: !6288)
!6365 = !DILocation(line: 5034, column: 7, scope: !6288)
!6366 = !DILocation(line: 5038, column: 14, scope: !6288)
!6367 = !DILocation(line: 5038, column: 7, scope: !6288)
!6368 = !DILocation(line: 5041, column: 14, scope: !6288)
!6369 = !DILocation(line: 5041, column: 7, scope: !6288)
!6370 = !DILocation(line: 5045, column: 14, scope: !6288)
!6371 = !DILocation(line: 5045, column: 7, scope: !6288)
!6372 = !DILocation(line: 5049, column: 30, scope: !6288)
!6373 = !DILocation(line: 5049, column: 11, scope: !6288)
!6374 = !DILocation(line: 5049, column: 9, scope: !6288)
!6375 = !DILocation(line: 5050, column: 14, scope: !6288)
!6376 = !DILocation(line: 5050, column: 7, scope: !6288)
!6377 = !DILocation(line: 5055, column: 28, scope: !6288)
!6378 = !DILocation(line: 5055, column: 11, scope: !6288)
!6379 = !DILocation(line: 5055, column: 9, scope: !6288)
!6380 = !DILocation(line: 5056, column: 14, scope: !6288)
!6381 = !DILocation(line: 5056, column: 7, scope: !6288)
!6382 = !DILocation(line: 5061, column: 11, scope: !6383)
!6383 = distinct !DILexicalBlock(scope: !6288, file: !3, line: 5061, column: 11)
!6384 = !DILocation(line: 5061, column: 28, scope: !6383)
!6385 = !DILocation(line: 5061, column: 11, scope: !6288)
!6386 = !DILocation(line: 5062, column: 23, scope: !6383)
!6387 = !DILocation(line: 5062, column: 6, scope: !6383)
!6388 = !DILocation(line: 5062, column: 4, scope: !6383)
!6389 = !DILocation(line: 5062, column: 2, scope: !6383)
!6390 = !DILocation(line: 5064, column: 6, scope: !6383)
!6391 = !DILocation(line: 5064, column: 4, scope: !6383)
!6392 = !DILocation(line: 5066, column: 14, scope: !6288)
!6393 = !DILocation(line: 5066, column: 7, scope: !6288)
!6394 = !DILocation(line: 5070, column: 30, scope: !6288)
!6395 = !DILocation(line: 5070, column: 11, scope: !6288)
!6396 = !DILocation(line: 5070, column: 9, scope: !6288)
!6397 = !DILocation(line: 5071, column: 14, scope: !6288)
!6398 = !DILocation(line: 5071, column: 7, scope: !6288)
!6399 = !DILocation(line: 5077, column: 28, scope: !6288)
!6400 = !DILocation(line: 5077, column: 43, scope: !6288)
!6401 = !DILocation(line: 5078, column: 8, scope: !6288)
!6402 = !DILocation(line: 5078, column: 21, scope: !6288)
!6403 = !DILocation(line: 5077, column: 11, scope: !6288)
!6404 = !DILocation(line: 5077, column: 9, scope: !6288)
!6405 = !DILocation(line: 5079, column: 14, scope: !6288)
!6406 = !DILocation(line: 5079, column: 7, scope: !6288)
!6407 = !DILocation(line: 5082, column: 25, scope: !6288)
!6408 = !DILocation(line: 5082, column: 31, scope: !6288)
!6409 = !DILocation(line: 5082, column: 14, scope: !6288)
!6410 = !DILocation(line: 5082, column: 7, scope: !6288)
!6411 = !DILocation(line: 5085, column: 11, scope: !6288)
!6412 = !DILocation(line: 5085, column: 9, scope: !6288)
!6413 = !DILocation(line: 5086, column: 11, scope: !6414)
!6414 = distinct !DILexicalBlock(scope: !6288, file: !3, line: 5086, column: 11)
!6415 = !DILocation(line: 5086, column: 11, scope: !6288)
!6416 = !DILocation(line: 5087, column: 9, scope: !6414)
!6417 = !DILocation(line: 5087, column: 2, scope: !6414)
!6418 = !DILocation(line: 5091, column: 11, scope: !6288)
!6419 = !DILocation(line: 5091, column: 9, scope: !6288)
!6420 = !DILocation(line: 5095, column: 11, scope: !6421)
!6421 = distinct !DILexicalBlock(scope: !6288, file: !3, line: 5095, column: 11)
!6422 = !DILocation(line: 5095, column: 11, scope: !6288)
!6423 = !DILocation(line: 5097, column: 9, scope: !6421)
!6424 = !DILocation(line: 5097, column: 27, scope: !6421)
!6425 = !DILocation(line: 5097, column: 30, scope: !6421)
!6426 = !DILocation(line: 5096, column: 6, scope: !6421)
!6427 = !DILocation(line: 5096, column: 4, scope: !6421)
!6428 = !DILocation(line: 5096, column: 2, scope: !6421)
!6429 = !DILocation(line: 5101, column: 30, scope: !6288)
!6430 = !DILocation(line: 5101, column: 7, scope: !6288)
!6431 = !DILocation(line: 5101, column: 10, scope: !6288)
!6432 = !DILocation(line: 5101, column: 24, scope: !6288)
!6433 = !DILocation(line: 5101, column: 28, scope: !6288)
!6434 = !DILocation(line: 5103, column: 14, scope: !6288)
!6435 = !DILocation(line: 5103, column: 7, scope: !6288)
!6436 = !DILocation(line: 5105, column: 1, scope: !6275)
!6437 = distinct !DISubprogram(name: "expand_mult", scope: !3, file: !3, line: 3122, type: !6438, scopeLine: 3124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!6438 = !DISubroutineType(types: !6439)
!6439 = !{!2301, !5, !2301, !2301, !2301, !2325}
!6440 = !DILocalVariable(name: "mode", arg: 1, scope: !6437, file: !3, line: 3122, type: !5)
!6441 = !DILocation(line: 3122, column: 32, scope: !6437)
!6442 = !DILocalVariable(name: "op0", arg: 2, scope: !6437, file: !3, line: 3122, type: !2301)
!6443 = !DILocation(line: 3122, column: 42, scope: !6437)
!6444 = !DILocalVariable(name: "op1", arg: 3, scope: !6437, file: !3, line: 3122, type: !2301)
!6445 = !DILocation(line: 3122, column: 51, scope: !6437)
!6446 = !DILocalVariable(name: "target", arg: 4, scope: !6437, file: !3, line: 3122, type: !2301)
!6447 = !DILocation(line: 3122, column: 60, scope: !6437)
!6448 = !DILocalVariable(name: "unsignedp", arg: 5, scope: !6437, file: !3, line: 3123, type: !2325)
!6449 = !DILocation(line: 3123, column: 11, scope: !6437)
!6450 = !DILocalVariable(name: "variant", scope: !6437, file: !3, line: 3125, type: !2225)
!6451 = !DILocation(line: 3125, column: 21, scope: !6437)
!6452 = !DILocalVariable(name: "algorithm", scope: !6437, file: !3, line: 3126, type: !3348)
!6453 = !DILocation(line: 3126, column: 20, scope: !6437)
!6454 = !DILocalVariable(name: "max_cost", scope: !6437, file: !3, line: 3127, type: !2325)
!6455 = !DILocation(line: 3127, column: 7, scope: !6437)
!6456 = !DILocalVariable(name: "speed", scope: !6437, file: !3, line: 3128, type: !2535)
!6457 = !DILocation(line: 3128, column: 8, scope: !6437)
!6458 = !DILocation(line: 3128, column: 16, scope: !6437)
!6459 = !DILocation(line: 3132, column: 7, scope: !6460)
!6460 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 3132, column: 7)
!6461 = !DILocation(line: 3132, column: 14, scope: !6460)
!6462 = !DILocation(line: 3132, column: 11, scope: !6460)
!6463 = !DILocation(line: 3132, column: 7, scope: !6437)
!6464 = !DILocation(line: 3133, column: 12, scope: !6460)
!6465 = !DILocation(line: 3133, column: 5, scope: !6460)
!6466 = !DILocation(line: 3134, column: 7, scope: !6467)
!6467 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 3134, column: 7)
!6468 = !DILocation(line: 3134, column: 14, scope: !6467)
!6469 = !DILocation(line: 3134, column: 11, scope: !6467)
!6470 = !DILocation(line: 3134, column: 7, scope: !6437)
!6471 = !DILocation(line: 3135, column: 12, scope: !6467)
!6472 = !DILocation(line: 3135, column: 5, scope: !6467)
!6473 = !DILocation(line: 3136, column: 7, scope: !6474)
!6474 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 3136, column: 7)
!6475 = !DILocation(line: 3136, column: 14, scope: !6474)
!6476 = !DILocation(line: 3136, column: 11, scope: !6474)
!6477 = !DILocation(line: 3136, column: 7, scope: !6437)
!6478 = !DILocation(line: 3137, column: 25, scope: !6474)
!6479 = !DILocation(line: 3138, column: 4, scope: !6474)
!6480 = !DILocation(line: 3138, column: 26, scope: !6474)
!6481 = !DILocation(line: 3139, column: 4, scope: !6474)
!6482 = !DILocation(line: 3139, column: 8, scope: !6474)
!6483 = !DILocation(line: 3139, column: 18, scope: !6474)
!6484 = !DILocation(line: 3139, column: 21, scope: !6474)
!6485 = !DILocation(line: 0, scope: !6474)
!6486 = !DILocation(line: 3141, column: 4, scope: !6474)
!6487 = !DILocation(line: 3141, column: 9, scope: !6474)
!6488 = !DILocation(line: 3137, column: 12, scope: !6474)
!6489 = !DILocation(line: 3137, column: 5, scope: !6474)
!6490 = !DILocation(line: 3145, column: 7, scope: !6491)
!6491 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 3145, column: 7)
!6492 = !DILocation(line: 3146, column: 7, scope: !6491)
!6493 = !DILocation(line: 3146, column: 11, scope: !6491)
!6494 = !DILocation(line: 3146, column: 21, scope: !6491)
!6495 = !DILocation(line: 3146, column: 25, scope: !6491)
!6496 = !DILocation(line: 3145, column: 7, scope: !6437)
!6497 = !DILocalVariable(name: "coeff", scope: !6498, file: !3, line: 3148, type: !2299)
!6498 = distinct !DILexicalBlock(scope: !6491, file: !3, line: 3147, column: 5)
!6499 = !DILocation(line: 3148, column: 21, scope: !6498)
!6500 = !DILocalVariable(name: "fake_reg", scope: !6498, file: !3, line: 3149, type: !2301)
!6501 = !DILocation(line: 3149, column: 11, scope: !6498)
!6502 = !DILocation(line: 3149, column: 35, scope: !6498)
!6503 = !DILocation(line: 3149, column: 22, scope: !6498)
!6504 = !DILocation(line: 3158, column: 11, scope: !6505)
!6505 = distinct !DILexicalBlock(scope: !6498, file: !3, line: 3158, column: 11)
!6506 = !DILocation(line: 3158, column: 11, scope: !6498)
!6507 = !DILocation(line: 3163, column: 8, scope: !6508)
!6508 = distinct !DILexicalBlock(scope: !6509, file: !3, line: 3163, column: 8)
!6509 = distinct !DILexicalBlock(scope: !6505, file: !3, line: 3159, column: 2)
!6510 = !DILocation(line: 3163, column: 21, scope: !6508)
!6511 = !DILocation(line: 3164, column: 8, scope: !6508)
!6512 = !DILocation(line: 3164, column: 11, scope: !6508)
!6513 = !DILocation(line: 3164, column: 35, scope: !6508)
!6514 = !DILocation(line: 3163, column: 8, scope: !6509)
!6515 = !DILocation(line: 3170, column: 29, scope: !6516)
!6516 = distinct !DILexicalBlock(scope: !6508, file: !3, line: 3165, column: 6)
!6517 = !DILocation(line: 3170, column: 70, scope: !6516)
!6518 = !DILocation(line: 3170, column: 19, scope: !6516)
!6519 = !DILocation(line: 3171, column: 16, scope: !6516)
!6520 = !DILocation(line: 3171, column: 7, scope: !6516)
!6521 = !DILocation(line: 3171, column: 23, scope: !6516)
!6522 = !DILocation(line: 3171, column: 5, scope: !6516)
!6523 = !DILocation(line: 3170, column: 17, scope: !6516)
!6524 = !DILocation(line: 3172, column: 12, scope: !6525)
!6525 = distinct !DILexicalBlock(scope: !6516, file: !3, line: 3172, column: 12)
!6526 = !DILocation(line: 3172, column: 21, scope: !6525)
!6527 = !DILocation(line: 3173, column: 5, scope: !6525)
!6528 = !DILocation(line: 3173, column: 29, scope: !6525)
!6529 = !DILocation(line: 3173, column: 36, scope: !6525)
!6530 = !DILocation(line: 3173, column: 35, scope: !6525)
!6531 = !DILocation(line: 3174, column: 18, scope: !6525)
!6532 = !DILocation(line: 3173, column: 8, scope: !6525)
!6533 = !DILocation(line: 3172, column: 12, scope: !6516)
!6534 = !DILocalVariable(name: "temp", scope: !6535, file: !3, line: 3176, type: !2301)
!6535 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 3175, column: 3)
!6536 = !DILocation(line: 3176, column: 9, scope: !6535)
!6537 = !DILocation(line: 3176, column: 35, scope: !6535)
!6538 = !DILocation(line: 3176, column: 41, scope: !6535)
!6539 = !DILocation(line: 3176, column: 47, scope: !6535)
!6540 = !DILocation(line: 3176, column: 46, scope: !6535)
!6541 = !DILocation(line: 3178, column: 7, scope: !6535)
!6542 = !DILocation(line: 3176, column: 16, scope: !6535)
!6543 = !DILocation(line: 3179, column: 25, scope: !6535)
!6544 = !DILocation(line: 3179, column: 42, scope: !6535)
!6545 = !DILocation(line: 3179, column: 48, scope: !6535)
!6546 = !DILocation(line: 3179, column: 12, scope: !6535)
!6547 = !DILocation(line: 3179, column: 5, scope: !6535)
!6548 = !DILocation(line: 3181, column: 6, scope: !6516)
!6549 = !DILocation(line: 3182, column: 17, scope: !6508)
!6550 = !DILocation(line: 3182, column: 15, scope: !6508)
!6551 = !DILocation(line: 3183, column: 2, scope: !6509)
!6552 = !DILocation(line: 3184, column: 16, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6505, file: !3, line: 3184, column: 16)
!6554 = !DILocation(line: 3184, column: 31, scope: !6553)
!6555 = !DILocation(line: 3184, column: 16, scope: !6505)
!6556 = !DILocation(line: 3188, column: 8, scope: !6557)
!6557 = distinct !DILexicalBlock(scope: !6558, file: !3, line: 3188, column: 8)
!6558 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3185, column: 2)
!6559 = !DILocation(line: 3188, column: 32, scope: !6557)
!6560 = !DILocation(line: 3189, column: 8, scope: !6557)
!6561 = !DILocation(line: 3189, column: 11, scope: !6557)
!6562 = !DILocation(line: 3189, column: 34, scope: !6557)
!6563 = !DILocation(line: 3188, column: 8, scope: !6558)
!6564 = !DILocation(line: 3190, column: 14, scope: !6557)
!6565 = !DILocation(line: 3190, column: 12, scope: !6557)
!6566 = !DILocation(line: 3190, column: 6, scope: !6557)
!6567 = !DILocation(line: 3191, column: 13, scope: !6568)
!6568 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 3191, column: 13)
!6569 = !DILocation(line: 3191, column: 36, scope: !6568)
!6570 = !DILocation(line: 3192, column: 6, scope: !6568)
!6571 = !DILocation(line: 3192, column: 9, scope: !6568)
!6572 = !DILocation(line: 3191, column: 13, scope: !6557)
!6573 = !DILocalVariable(name: "shift", scope: !6574, file: !3, line: 3194, type: !2325)
!6574 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 3193, column: 6)
!6575 = !DILocation(line: 3194, column: 12, scope: !6574)
!6576 = !DILocation(line: 3194, column: 32, scope: !6574)
!6577 = !DILocation(line: 3194, column: 20, scope: !6574)
!6578 = !DILocation(line: 3195, column: 6, scope: !6574)
!6579 = !DILocation(line: 3196, column: 42, scope: !6574)
!6580 = !DILocation(line: 3196, column: 48, scope: !6574)
!6581 = !DILocation(line: 3197, column: 34, scope: !6574)
!6582 = !DILocation(line: 3197, column: 8, scope: !6574)
!6583 = !DILocation(line: 3198, column: 8, scope: !6574)
!6584 = !DILocation(line: 3198, column: 16, scope: !6574)
!6585 = !DILocation(line: 3196, column: 15, scope: !6574)
!6586 = !DILocation(line: 3196, column: 8, scope: !6574)
!6587 = !DILocation(line: 3200, column: 2, scope: !6558)
!6588 = !DILocation(line: 3206, column: 11, scope: !6589)
!6589 = distinct !DILexicalBlock(scope: !6498, file: !3, line: 3206, column: 11)
!6590 = !DILocation(line: 3206, column: 17, scope: !6589)
!6591 = !DILocation(line: 3206, column: 11, scope: !6498)
!6592 = !DILocation(line: 3209, column: 8, scope: !6593)
!6593 = distinct !DILexicalBlock(scope: !6594, file: !3, line: 3209, column: 8)
!6594 = distinct !DILexicalBlock(scope: !6589, file: !3, line: 3207, column: 2)
!6595 = !DILocation(line: 3209, column: 8, scope: !6594)
!6596 = !DILocation(line: 3210, column: 40, scope: !6593)
!6597 = !DILocation(line: 3210, column: 46, scope: !6593)
!6598 = !DILocation(line: 3211, column: 44, scope: !6593)
!6599 = !DILocation(line: 3211, column: 32, scope: !6593)
!6600 = !DILocation(line: 3211, column: 6, scope: !6593)
!6601 = !DILocation(line: 3212, column: 6, scope: !6593)
!6602 = !DILocation(line: 3212, column: 14, scope: !6593)
!6603 = !DILocation(line: 3210, column: 13, scope: !6593)
!6604 = !DILocation(line: 3210, column: 6, scope: !6593)
!6605 = !DILocation(line: 3216, column: 25, scope: !6594)
!6606 = !DILocation(line: 3216, column: 66, scope: !6594)
!6607 = !DILocation(line: 3216, column: 15, scope: !6594)
!6608 = !DILocation(line: 3216, column: 13, scope: !6594)
!6609 = !DILocation(line: 3217, column: 29, scope: !6610)
!6610 = distinct !DILexicalBlock(scope: !6594, file: !3, line: 3217, column: 8)
!6611 = !DILocation(line: 3217, column: 35, scope: !6610)
!6612 = !DILocation(line: 3218, column: 8, scope: !6610)
!6613 = !DILocation(line: 3217, column: 8, scope: !6610)
!6614 = !DILocation(line: 3217, column: 8, scope: !6594)
!6615 = !DILocation(line: 3219, column: 32, scope: !6610)
!6616 = !DILocation(line: 3219, column: 38, scope: !6610)
!6617 = !DILocation(line: 3219, column: 43, scope: !6610)
!6618 = !DILocation(line: 3219, column: 50, scope: !6610)
!6619 = !DILocation(line: 3220, column: 23, scope: !6610)
!6620 = !DILocation(line: 3219, column: 13, scope: !6610)
!6621 = !DILocation(line: 3219, column: 6, scope: !6610)
!6622 = !DILocation(line: 3221, column: 2, scope: !6594)
!6623 = !DILocation(line: 3222, column: 5, scope: !6498)
!6624 = !DILocation(line: 3224, column: 7, scope: !6625)
!6625 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 3224, column: 7)
!6626 = !DILocation(line: 3224, column: 22, scope: !6625)
!6627 = !DILocation(line: 3224, column: 7, scope: !6437)
!6628 = !DILocalVariable(name: "temp", scope: !6629, file: !3, line: 3226, type: !2301)
!6629 = distinct !DILexicalBlock(scope: !6625, file: !3, line: 3225, column: 5)
!6630 = !DILocation(line: 3226, column: 11, scope: !6629)
!6631 = !DILocation(line: 3226, column: 18, scope: !6629)
!6632 = !DILocation(line: 3227, column: 13, scope: !6629)
!6633 = !DILocation(line: 3227, column: 11, scope: !6629)
!6634 = !DILocation(line: 3228, column: 13, scope: !6629)
!6635 = !DILocation(line: 3228, column: 11, scope: !6629)
!6636 = !DILocation(line: 3229, column: 5, scope: !6629)
!6637 = !DILocation(line: 3232, column: 7, scope: !6638)
!6638 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 3232, column: 7)
!6639 = !DILocation(line: 3232, column: 22, scope: !6638)
!6640 = !DILocation(line: 3233, column: 7, scope: !6638)
!6641 = !DILocation(line: 3233, column: 10, scope: !6638)
!6642 = !DILocation(line: 3232, column: 7, scope: !6437)
!6643 = !DILocalVariable(name: "d", scope: !6644, file: !3, line: 3235, type: !2482)
!6644 = distinct !DILexicalBlock(scope: !6638, file: !3, line: 3234, column: 5)
!6645 = !DILocation(line: 3235, column: 23, scope: !6644)
!6646 = !DILocation(line: 3236, column: 7, scope: !6644)
!6647 = !DILocation(line: 3238, column: 11, scope: !6648)
!6648 = distinct !DILexicalBlock(scope: !6644, file: !3, line: 3238, column: 11)
!6649 = !DILocation(line: 3238, column: 11, scope: !6644)
!6650 = !DILocation(line: 3240, column: 21, scope: !6651)
!6651 = distinct !DILexicalBlock(scope: !6648, file: !3, line: 3239, column: 2)
!6652 = !DILocation(line: 3240, column: 37, scope: !6651)
!6653 = !DILocation(line: 3240, column: 10, scope: !6651)
!6654 = !DILocation(line: 3240, column: 8, scope: !6651)
!6655 = !DILocation(line: 3241, column: 25, scope: !6651)
!6656 = !DILocation(line: 3241, column: 42, scope: !6651)
!6657 = !DILocation(line: 3241, column: 47, scope: !6651)
!6658 = !DILocation(line: 3242, column: 11, scope: !6651)
!6659 = !DILocation(line: 3242, column: 19, scope: !6651)
!6660 = !DILocation(line: 3241, column: 11, scope: !6651)
!6661 = !DILocation(line: 3241, column: 4, scope: !6651)
!6662 = !DILocation(line: 3244, column: 5, scope: !6644)
!6663 = !DILocation(line: 3248, column: 23, scope: !6437)
!6664 = !DILocation(line: 3249, column: 11, scope: !6437)
!6665 = !DILocation(line: 3250, column: 9, scope: !6437)
!6666 = !DILocation(line: 3250, column: 12, scope: !6437)
!6667 = !DILocation(line: 3250, column: 23, scope: !6437)
!6668 = !DILocation(line: 3250, column: 27, scope: !6437)
!6669 = !DILocation(line: 3250, column: 48, scope: !6437)
!6670 = !DILocation(line: 0, scope: !6437)
!6671 = !DILocation(line: 3249, column: 9, scope: !6437)
!6672 = !DILocation(line: 3252, column: 9, scope: !6437)
!6673 = !DILocation(line: 3252, column: 14, scope: !6437)
!6674 = !DILocation(line: 3252, column: 19, scope: !6437)
!6675 = !DILocation(line: 3252, column: 27, scope: !6437)
!6676 = !DILocation(line: 3248, column: 9, scope: !6437)
!6677 = !DILocation(line: 3248, column: 7, scope: !6437)
!6678 = !DILocation(line: 3253, column: 3, scope: !6437)
!6679 = !DILocation(line: 3254, column: 10, scope: !6437)
!6680 = !DILocation(line: 3254, column: 3, scope: !6437)
!6681 = !DILocation(line: 3255, column: 1, scope: !6437)
!6682 = distinct !DISubprogram(name: "choose_mult_variant", scope: !3, file: !3, line: 2891, type: !6683, scopeLine: 2894, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!6683 = !DISubroutineType(types: !6684)
!6684 = !{!2535, !5, !2299, !3347, !6685, !2325}
!6685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2225, size: 64)
!6686 = !DILocalVariable(name: "mode", arg: 1, scope: !6682, file: !3, line: 2891, type: !5)
!6687 = !DILocation(line: 2891, column: 40, scope: !6682)
!6688 = !DILocalVariable(name: "val", arg: 2, scope: !6682, file: !3, line: 2891, type: !2299)
!6689 = !DILocation(line: 2891, column: 60, scope: !6682)
!6690 = !DILocalVariable(name: "alg", arg: 3, scope: !6682, file: !3, line: 2892, type: !3347)
!6691 = !DILocation(line: 2892, column: 26, scope: !6682)
!6692 = !DILocalVariable(name: "variant", arg: 4, scope: !6682, file: !3, line: 2892, type: !6685)
!6693 = !DILocation(line: 2892, column: 50, scope: !6682)
!6694 = !DILocalVariable(name: "mult_cost", arg: 5, scope: !6682, file: !3, line: 2893, type: !2325)
!6695 = !DILocation(line: 2893, column: 12, scope: !6682)
!6696 = !DILocalVariable(name: "alg2", scope: !6682, file: !3, line: 2895, type: !3348)
!6697 = !DILocation(line: 2895, column: 20, scope: !6682)
!6698 = !DILocalVariable(name: "limit", scope: !6682, file: !3, line: 2896, type: !3351)
!6699 = !DILocation(line: 2896, column: 20, scope: !6682)
!6700 = !DILocalVariable(name: "op_cost", scope: !6682, file: !3, line: 2897, type: !2325)
!6701 = !DILocation(line: 2897, column: 7, scope: !6682)
!6702 = !DILocalVariable(name: "speed", scope: !6682, file: !3, line: 2898, type: !2535)
!6703 = !DILocation(line: 2898, column: 8, scope: !6682)
!6704 = !DILocation(line: 2898, column: 16, scope: !6682)
!6705 = !DILocation(line: 2901, column: 7, scope: !6706)
!6706 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 2901, column: 7)
!6707 = !DILocation(line: 2901, column: 17, scope: !6706)
!6708 = !DILocation(line: 2901, column: 7, scope: !6682)
!6709 = !DILocation(line: 2902, column: 5, scope: !6706)
!6710 = !DILocation(line: 2907, column: 17, scope: !6682)
!6711 = !DILocation(line: 2907, column: 15, scope: !6682)
!6712 = !DILocation(line: 2907, column: 52, scope: !6682)
!6713 = !DILocation(line: 2907, column: 43, scope: !6682)
!6714 = !DILocation(line: 2907, column: 59, scope: !6682)
!6715 = !DILocation(line: 2907, column: 41, scope: !6682)
!6716 = !DILocation(line: 2907, column: 11, scope: !6682)
!6717 = !DILocation(line: 2908, column: 7, scope: !6718)
!6718 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 2908, column: 7)
!6719 = !DILocation(line: 2908, column: 19, scope: !6718)
!6720 = !DILocation(line: 2908, column: 17, scope: !6718)
!6721 = !DILocation(line: 2908, column: 7, scope: !6682)
!6722 = !DILocation(line: 2909, column: 17, scope: !6718)
!6723 = !DILocation(line: 2909, column: 15, scope: !6718)
!6724 = !DILocation(line: 2909, column: 5, scope: !6718)
!6725 = !DILocation(line: 2911, column: 4, scope: !6682)
!6726 = !DILocation(line: 2911, column: 12, scope: !6682)
!6727 = !DILocation(line: 2912, column: 16, scope: !6682)
!6728 = !DILocation(line: 2912, column: 9, scope: !6682)
!6729 = !DILocation(line: 2912, column: 14, scope: !6682)
!6730 = !DILocation(line: 2913, column: 19, scope: !6682)
!6731 = !DILocation(line: 2913, column: 9, scope: !6682)
!6732 = !DILocation(line: 2913, column: 17, scope: !6682)
!6733 = !DILocation(line: 2914, column: 15, scope: !6682)
!6734 = !DILocation(line: 2914, column: 20, scope: !6682)
!6735 = !DILocation(line: 2914, column: 33, scope: !6682)
!6736 = !DILocation(line: 2914, column: 3, scope: !6682)
!6737 = !DILocation(line: 2918, column: 28, scope: !6738)
!6738 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 2918, column: 7)
!6739 = !DILocation(line: 2918, column: 25, scope: !6738)
!6740 = !DILocation(line: 2918, column: 7, scope: !6682)
!6741 = !DILocation(line: 2920, column: 26, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6738, file: !3, line: 2919, column: 5)
!6743 = !DILocation(line: 2920, column: 17, scope: !6742)
!6744 = !DILocation(line: 2920, column: 33, scope: !6742)
!6745 = !DILocation(line: 2920, column: 15, scope: !6742)
!6746 = !DILocation(line: 2921, column: 11, scope: !6747)
!6747 = distinct !DILexicalBlock(scope: !6742, file: !3, line: 2921, column: 11)
!6748 = !DILocation(line: 2921, column: 11, scope: !6742)
!6749 = !DILocation(line: 2923, column: 17, scope: !6750)
!6750 = distinct !DILexicalBlock(scope: !6747, file: !3, line: 2922, column: 2)
!6751 = !DILocation(line: 2923, column: 22, scope: !6750)
!6752 = !DILocation(line: 2923, column: 27, scope: !6750)
!6753 = !DILocation(line: 2923, column: 34, scope: !6750)
!6754 = !DILocation(line: 2923, column: 32, scope: !6750)
!6755 = !DILocation(line: 2923, column: 10, scope: !6750)
!6756 = !DILocation(line: 2923, column: 15, scope: !6750)
!6757 = !DILocation(line: 2924, column: 20, scope: !6750)
!6758 = !DILocation(line: 2924, column: 25, scope: !6750)
!6759 = !DILocation(line: 2924, column: 30, scope: !6750)
!6760 = !DILocation(line: 2924, column: 40, scope: !6750)
!6761 = !DILocation(line: 2924, column: 38, scope: !6750)
!6762 = !DILocation(line: 2924, column: 10, scope: !6750)
!6763 = !DILocation(line: 2924, column: 18, scope: !6750)
!6764 = !DILocation(line: 2925, column: 2, scope: !6750)
!6765 = !DILocation(line: 2928, column: 17, scope: !6766)
!6766 = distinct !DILexicalBlock(scope: !6747, file: !3, line: 2927, column: 2)
!6767 = !DILocation(line: 2928, column: 29, scope: !6766)
!6768 = !DILocation(line: 2928, column: 27, scope: !6766)
!6769 = !DILocation(line: 2928, column: 10, scope: !6766)
!6770 = !DILocation(line: 2928, column: 15, scope: !6766)
!6771 = !DILocation(line: 2929, column: 20, scope: !6766)
!6772 = !DILocation(line: 2929, column: 32, scope: !6766)
!6773 = !DILocation(line: 2929, column: 30, scope: !6766)
!6774 = !DILocation(line: 2929, column: 10, scope: !6766)
!6775 = !DILocation(line: 2929, column: 18, scope: !6766)
!6776 = !DILocation(line: 2932, column: 27, scope: !6742)
!6777 = !DILocation(line: 2932, column: 26, scope: !6742)
!6778 = !DILocation(line: 2932, column: 40, scope: !6742)
!6779 = !DILocation(line: 2932, column: 7, scope: !6742)
!6780 = !DILocation(line: 2933, column: 25, scope: !6742)
!6781 = !DILocation(line: 2933, column: 12, scope: !6742)
!6782 = !DILocation(line: 2933, column: 17, scope: !6742)
!6783 = !DILocation(line: 2933, column: 22, scope: !6742)
!6784 = !DILocation(line: 2934, column: 28, scope: !6742)
!6785 = !DILocation(line: 2934, column: 12, scope: !6742)
!6786 = !DILocation(line: 2934, column: 17, scope: !6742)
!6787 = !DILocation(line: 2934, column: 25, scope: !6742)
!6788 = !DILocation(line: 2935, column: 11, scope: !6789)
!6789 = distinct !DILexicalBlock(scope: !6742, file: !3, line: 2935, column: 11)
!6790 = !DILocation(line: 2935, column: 11, scope: !6742)
!6791 = !DILocation(line: 2936, column: 3, scope: !6789)
!6792 = !DILocation(line: 2936, column: 9, scope: !6789)
!6793 = !DILocation(line: 2936, column: 16, scope: !6789)
!6794 = !DILocation(line: 2936, column: 24, scope: !6789)
!6795 = !DILocation(line: 2936, column: 2, scope: !6789)
!6796 = !DILocation(line: 2937, column: 5, scope: !6742)
!6797 = !DILocation(line: 2940, column: 22, scope: !6682)
!6798 = !DILocation(line: 2940, column: 13, scope: !6682)
!6799 = !DILocation(line: 2940, column: 29, scope: !6682)
!6800 = !DILocation(line: 2940, column: 11, scope: !6682)
!6801 = !DILocation(line: 2941, column: 7, scope: !6802)
!6802 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 2941, column: 7)
!6803 = !DILocation(line: 2941, column: 7, scope: !6682)
!6804 = !DILocation(line: 2943, column: 20, scope: !6805)
!6805 = distinct !DILexicalBlock(scope: !6802, file: !3, line: 2942, column: 5)
!6806 = !DILocation(line: 2943, column: 25, scope: !6805)
!6807 = !DILocation(line: 2943, column: 30, scope: !6805)
!6808 = !DILocation(line: 2943, column: 37, scope: !6805)
!6809 = !DILocation(line: 2943, column: 35, scope: !6805)
!6810 = !DILocation(line: 2943, column: 13, scope: !6805)
!6811 = !DILocation(line: 2943, column: 18, scope: !6805)
!6812 = !DILocation(line: 2944, column: 23, scope: !6805)
!6813 = !DILocation(line: 2944, column: 28, scope: !6805)
!6814 = !DILocation(line: 2944, column: 33, scope: !6805)
!6815 = !DILocation(line: 2944, column: 43, scope: !6805)
!6816 = !DILocation(line: 2944, column: 41, scope: !6805)
!6817 = !DILocation(line: 2944, column: 13, scope: !6805)
!6818 = !DILocation(line: 2944, column: 21, scope: !6805)
!6819 = !DILocation(line: 2945, column: 5, scope: !6805)
!6820 = !DILocation(line: 2948, column: 20, scope: !6821)
!6821 = distinct !DILexicalBlock(scope: !6802, file: !3, line: 2947, column: 5)
!6822 = !DILocation(line: 2948, column: 32, scope: !6821)
!6823 = !DILocation(line: 2948, column: 30, scope: !6821)
!6824 = !DILocation(line: 2948, column: 13, scope: !6821)
!6825 = !DILocation(line: 2948, column: 18, scope: !6821)
!6826 = !DILocation(line: 2949, column: 23, scope: !6821)
!6827 = !DILocation(line: 2949, column: 35, scope: !6821)
!6828 = !DILocation(line: 2949, column: 33, scope: !6821)
!6829 = !DILocation(line: 2949, column: 13, scope: !6821)
!6830 = !DILocation(line: 2949, column: 21, scope: !6821)
!6831 = !DILocation(line: 2952, column: 22, scope: !6682)
!6832 = !DILocation(line: 2952, column: 26, scope: !6682)
!6833 = !DILocation(line: 2952, column: 39, scope: !6682)
!6834 = !DILocation(line: 2952, column: 3, scope: !6682)
!6835 = !DILocation(line: 2953, column: 21, scope: !6682)
!6836 = !DILocation(line: 2953, column: 8, scope: !6682)
!6837 = !DILocation(line: 2953, column: 13, scope: !6682)
!6838 = !DILocation(line: 2953, column: 18, scope: !6682)
!6839 = !DILocation(line: 2954, column: 24, scope: !6682)
!6840 = !DILocation(line: 2954, column: 8, scope: !6682)
!6841 = !DILocation(line: 2954, column: 13, scope: !6682)
!6842 = !DILocation(line: 2954, column: 21, scope: !6682)
!6843 = !DILocation(line: 2955, column: 7, scope: !6844)
!6844 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 2955, column: 7)
!6845 = !DILocation(line: 2955, column: 7, scope: !6682)
!6846 = !DILocation(line: 2956, column: 6, scope: !6844)
!6847 = !DILocation(line: 2956, column: 12, scope: !6844)
!6848 = !DILocation(line: 2956, column: 19, scope: !6844)
!6849 = !DILocation(line: 2956, column: 27, scope: !6844)
!6850 = !DILocation(line: 2956, column: 5, scope: !6844)
!6851 = !DILocation(line: 2958, column: 10, scope: !6682)
!6852 = !DILocation(line: 0, scope: !6682)
!6853 = !DILocation(line: 2958, column: 3, scope: !6682)
!6854 = !DILocation(line: 2959, column: 1, scope: !6682)
!6855 = distinct !DISubprogram(name: "expand_mult_const", scope: !3, file: !3, line: 2967, type: !6856, scopeLine: 2970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!6856 = !DISubroutineType(types: !6857)
!6857 = !{!2301, !5, !2301, !2299, !2301, !6858, !2225}
!6858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6859, size: 64)
!6859 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3348)
!6860 = !DILocalVariable(name: "mode", arg: 1, scope: !6855, file: !3, line: 2967, type: !5)
!6861 = !DILocation(line: 2967, column: 38, scope: !6855)
!6862 = !DILocalVariable(name: "op0", arg: 2, scope: !6855, file: !3, line: 2967, type: !2301)
!6863 = !DILocation(line: 2967, column: 48, scope: !6855)
!6864 = !DILocalVariable(name: "val", arg: 3, scope: !6855, file: !3, line: 2967, type: !2299)
!6865 = !DILocation(line: 2967, column: 67, scope: !6855)
!6866 = !DILocalVariable(name: "target", arg: 4, scope: !6855, file: !3, line: 2968, type: !2301)
!6867 = !DILocation(line: 2968, column: 10, scope: !6855)
!6868 = !DILocalVariable(name: "alg", arg: 5, scope: !6855, file: !3, line: 2968, type: !6858)
!6869 = !DILocation(line: 2968, column: 42, scope: !6855)
!6870 = !DILocalVariable(name: "variant", arg: 6, scope: !6855, file: !3, line: 2969, type: !2225)
!6871 = !DILocation(line: 2969, column: 24, scope: !6855)
!6872 = !DILocalVariable(name: "val_so_far", scope: !6855, file: !3, line: 2971, type: !2299)
!6873 = !DILocation(line: 2971, column: 17, scope: !6855)
!6874 = !DILocalVariable(name: "insn", scope: !6855, file: !3, line: 2972, type: !2301)
!6875 = !DILocation(line: 2972, column: 7, scope: !6855)
!6876 = !DILocalVariable(name: "accum", scope: !6855, file: !3, line: 2972, type: !2301)
!6877 = !DILocation(line: 2972, column: 13, scope: !6855)
!6878 = !DILocalVariable(name: "tem", scope: !6855, file: !3, line: 2972, type: !2301)
!6879 = !DILocation(line: 2972, column: 20, scope: !6855)
!6880 = !DILocalVariable(name: "opno", scope: !6855, file: !3, line: 2973, type: !2325)
!6881 = !DILocation(line: 2973, column: 7, scope: !6855)
!6882 = !DILocalVariable(name: "nmode", scope: !6855, file: !3, line: 2974, type: !5)
!6883 = !DILocation(line: 2974, column: 21, scope: !6855)
!6884 = !DILocation(line: 2978, column: 20, scope: !6855)
!6885 = !DILocation(line: 2978, column: 26, scope: !6855)
!6886 = !DILocation(line: 2978, column: 9, scope: !6855)
!6887 = !DILocation(line: 2978, column: 7, scope: !6855)
!6888 = !DILocation(line: 2983, column: 7, scope: !6889)
!6889 = distinct !DILexicalBlock(scope: !6855, file: !3, line: 2983, column: 7)
!6890 = !DILocation(line: 2983, column: 12, scope: !6889)
!6891 = !DILocation(line: 2983, column: 18, scope: !6889)
!6892 = !DILocation(line: 2983, column: 7, scope: !6855)
!6893 = !DILocation(line: 2985, column: 33, scope: !6894)
!6894 = distinct !DILexicalBlock(scope: !6889, file: !3, line: 2984, column: 5)
!6895 = !DILocation(line: 2985, column: 39, scope: !6894)
!6896 = !DILocation(line: 2985, column: 15, scope: !6894)
!6897 = !DILocation(line: 2985, column: 13, scope: !6894)
!6898 = !DILocation(line: 2986, column: 18, scope: !6894)
!6899 = !DILocation(line: 2987, column: 5, scope: !6894)
!6900 = !DILocation(line: 2988, column: 12, scope: !6901)
!6901 = distinct !DILexicalBlock(scope: !6889, file: !3, line: 2988, column: 12)
!6902 = !DILocation(line: 2988, column: 17, scope: !6901)
!6903 = !DILocation(line: 2988, column: 23, scope: !6901)
!6904 = !DILocation(line: 2988, column: 12, scope: !6889)
!6905 = !DILocation(line: 2990, column: 33, scope: !6906)
!6906 = distinct !DILexicalBlock(scope: !6901, file: !3, line: 2989, column: 5)
!6907 = !DILocation(line: 2990, column: 39, scope: !6906)
!6908 = !DILocation(line: 2990, column: 15, scope: !6906)
!6909 = !DILocation(line: 2990, column: 13, scope: !6906)
!6910 = !DILocation(line: 2991, column: 18, scope: !6906)
!6911 = !DILocation(line: 2992, column: 5, scope: !6906)
!6912 = !DILocation(line: 2994, column: 5, scope: !6901)
!6913 = !DILocation(line: 2996, column: 13, scope: !6914)
!6914 = distinct !DILexicalBlock(scope: !6855, file: !3, line: 2996, column: 3)
!6915 = !DILocation(line: 2996, column: 8, scope: !6914)
!6916 = !DILocation(line: 2996, column: 18, scope: !6917)
!6917 = distinct !DILexicalBlock(scope: !6914, file: !3, line: 2996, column: 3)
!6918 = !DILocation(line: 2996, column: 25, scope: !6917)
!6919 = !DILocation(line: 2996, column: 30, scope: !6917)
!6920 = !DILocation(line: 2996, column: 23, scope: !6917)
!6921 = !DILocation(line: 2996, column: 3, scope: !6914)
!6922 = !DILocalVariable(name: "log", scope: !6923, file: !3, line: 2998, type: !2325)
!6923 = distinct !DILexicalBlock(scope: !6917, file: !3, line: 2997, column: 5)
!6924 = !DILocation(line: 2998, column: 11, scope: !6923)
!6925 = !DILocation(line: 2998, column: 17, scope: !6923)
!6926 = !DILocation(line: 2998, column: 22, scope: !6923)
!6927 = !DILocation(line: 2998, column: 26, scope: !6923)
!6928 = !DILocalVariable(name: "shift_subtarget", scope: !6923, file: !3, line: 2999, type: !2301)
!6929 = !DILocation(line: 2999, column: 11, scope: !6923)
!6930 = !DILocation(line: 2999, column: 29, scope: !6923)
!6931 = !DILocation(line: 2999, column: 44, scope: !6923)
!6932 = !DILocalVariable(name: "add_target", scope: !6923, file: !3, line: 3000, type: !2301)
!6933 = !DILocation(line: 3000, column: 11, scope: !6923)
!6934 = !DILocation(line: 3001, column: 5, scope: !6923)
!6935 = !DILocation(line: 3001, column: 13, scope: !6923)
!6936 = !DILocation(line: 3001, column: 18, scope: !6923)
!6937 = !DILocation(line: 3001, column: 22, scope: !6923)
!6938 = !DILocation(line: 3001, column: 10, scope: !6923)
!6939 = !DILocation(line: 3001, column: 26, scope: !6923)
!6940 = !DILocation(line: 3001, column: 29, scope: !6923)
!6941 = !DILocation(line: 3001, column: 36, scope: !6923)
!6942 = !DILocation(line: 3001, column: 41, scope: !6923)
!6943 = !DILocation(line: 3001, column: 44, scope: !6923)
!6944 = !DILocation(line: 3001, column: 52, scope: !6923)
!6945 = !DILocation(line: 3002, column: 5, scope: !6923)
!6946 = !DILocation(line: 3002, column: 9, scope: !6923)
!6947 = !DILocation(line: 3001, column: 4, scope: !6923)
!6948 = !DILocation(line: 3003, column: 6, scope: !6923)
!6949 = !DILocalVariable(name: "accum_target", scope: !6923, file: !3, line: 3004, type: !2301)
!6950 = !DILocation(line: 3004, column: 11, scope: !6923)
!6951 = !DILocation(line: 3004, column: 26, scope: !6923)
!6952 = !DILocation(line: 3004, column: 41, scope: !6923)
!6953 = !DILocation(line: 3006, column: 15, scope: !6923)
!6954 = !DILocation(line: 3006, column: 20, scope: !6923)
!6955 = !DILocation(line: 3006, column: 23, scope: !6923)
!6956 = !DILocation(line: 3006, column: 7, scope: !6923)
!6957 = !DILocation(line: 3009, column: 39, scope: !6958)
!6958 = distinct !DILexicalBlock(scope: !6923, file: !3, line: 3007, column: 2)
!6959 = !DILocation(line: 3009, column: 45, scope: !6958)
!6960 = !DILocation(line: 3010, column: 31, scope: !6958)
!6961 = !DILocation(line: 3010, column: 5, scope: !6958)
!6962 = !DILocation(line: 3009, column: 12, scope: !6958)
!6963 = !DILocation(line: 3009, column: 10, scope: !6958)
!6964 = !DILocation(line: 3012, column: 19, scope: !6958)
!6965 = !DILocation(line: 3012, column: 15, scope: !6958)
!6966 = !DILocation(line: 3013, column: 4, scope: !6958)
!6967 = !DILocation(line: 3016, column: 37, scope: !6958)
!6968 = !DILocation(line: 3016, column: 43, scope: !6958)
!6969 = !DILocation(line: 3017, column: 36, scope: !6958)
!6970 = !DILocation(line: 3017, column: 10, scope: !6958)
!6971 = !DILocation(line: 3016, column: 10, scope: !6958)
!6972 = !DILocation(line: 3016, column: 8, scope: !6958)
!6973 = !DILocation(line: 3019, column: 27, scope: !6958)
!6974 = !DILocation(line: 3020, column: 6, scope: !6958)
!6975 = !DILocation(line: 3020, column: 19, scope: !6958)
!6976 = !DILocation(line: 3020, column: 32, scope: !6958)
!6977 = !DILocation(line: 3019, column: 12, scope: !6958)
!6978 = !DILocation(line: 3019, column: 10, scope: !6958)
!6979 = !DILocation(line: 3021, column: 39, scope: !6958)
!6980 = !DILocation(line: 3021, column: 36, scope: !6958)
!6981 = !DILocation(line: 3021, column: 15, scope: !6958)
!6982 = !DILocation(line: 3022, column: 4, scope: !6958)
!6983 = !DILocation(line: 3025, column: 37, scope: !6958)
!6984 = !DILocation(line: 3025, column: 43, scope: !6958)
!6985 = !DILocation(line: 3026, column: 36, scope: !6958)
!6986 = !DILocation(line: 3026, column: 10, scope: !6958)
!6987 = !DILocation(line: 3025, column: 10, scope: !6958)
!6988 = !DILocation(line: 3025, column: 8, scope: !6958)
!6989 = !DILocation(line: 3028, column: 27, scope: !6958)
!6990 = !DILocation(line: 3029, column: 6, scope: !6958)
!6991 = !DILocation(line: 3029, column: 19, scope: !6958)
!6992 = !DILocation(line: 3029, column: 32, scope: !6958)
!6993 = !DILocation(line: 3028, column: 12, scope: !6958)
!6994 = !DILocation(line: 3028, column: 10, scope: !6958)
!6995 = !DILocation(line: 3030, column: 39, scope: !6958)
!6996 = !DILocation(line: 3030, column: 36, scope: !6958)
!6997 = !DILocation(line: 3030, column: 15, scope: !6958)
!6998 = !DILocation(line: 3031, column: 4, scope: !6958)
!6999 = !DILocation(line: 3034, column: 39, scope: !6958)
!7000 = !DILocation(line: 3034, column: 45, scope: !6958)
!7001 = !DILocation(line: 3035, column: 31, scope: !6958)
!7002 = !DILocation(line: 3035, column: 5, scope: !6958)
!7003 = !DILocation(line: 3036, column: 5, scope: !6958)
!7004 = !DILocation(line: 3034, column: 12, scope: !6958)
!7005 = !DILocation(line: 3034, column: 10, scope: !6958)
!7006 = !DILocation(line: 3038, column: 27, scope: !6958)
!7007 = !DILocation(line: 3039, column: 6, scope: !6958)
!7008 = !DILocation(line: 3039, column: 19, scope: !6958)
!7009 = !DILocation(line: 3039, column: 32, scope: !6958)
!7010 = !DILocation(line: 3038, column: 12, scope: !6958)
!7011 = !DILocation(line: 3038, column: 10, scope: !6958)
!7012 = !DILocation(line: 3040, column: 18, scope: !6958)
!7013 = !DILocation(line: 3040, column: 32, scope: !6958)
!7014 = !DILocation(line: 3040, column: 29, scope: !6958)
!7015 = !DILocation(line: 3040, column: 37, scope: !6958)
!7016 = !DILocation(line: 3040, column: 15, scope: !6958)
!7017 = !DILocation(line: 3041, column: 4, scope: !6958)
!7018 = !DILocation(line: 3044, column: 39, scope: !6958)
!7019 = !DILocation(line: 3044, column: 45, scope: !6958)
!7020 = !DILocation(line: 3045, column: 31, scope: !6958)
!7021 = !DILocation(line: 3045, column: 5, scope: !6958)
!7022 = !DILocation(line: 3046, column: 5, scope: !6958)
!7023 = !DILocation(line: 3044, column: 12, scope: !6958)
!7024 = !DILocation(line: 3044, column: 10, scope: !6958)
!7025 = !DILocation(line: 3047, column: 27, scope: !6958)
!7026 = !DILocation(line: 3048, column: 6, scope: !6958)
!7027 = !DILocation(line: 3048, column: 19, scope: !6958)
!7028 = !DILocation(line: 3048, column: 32, scope: !6958)
!7029 = !DILocation(line: 3047, column: 12, scope: !6958)
!7030 = !DILocation(line: 3047, column: 10, scope: !6958)
!7031 = !DILocation(line: 3049, column: 18, scope: !6958)
!7032 = !DILocation(line: 3049, column: 32, scope: !6958)
!7033 = !DILocation(line: 3049, column: 29, scope: !6958)
!7034 = !DILocation(line: 3049, column: 37, scope: !6958)
!7035 = !DILocation(line: 3049, column: 15, scope: !6958)
!7036 = !DILocation(line: 3050, column: 4, scope: !6958)
!7037 = !DILocation(line: 3053, column: 37, scope: !6958)
!7038 = !DILocation(line: 3053, column: 43, scope: !6958)
!7039 = !DILocation(line: 3054, column: 36, scope: !6958)
!7040 = !DILocation(line: 3054, column: 10, scope: !6958)
!7041 = !DILocation(line: 3053, column: 10, scope: !6958)
!7042 = !DILocation(line: 3053, column: 8, scope: !6958)
!7043 = !DILocation(line: 3056, column: 27, scope: !6958)
!7044 = !DILocation(line: 3057, column: 6, scope: !6958)
!7045 = !DILocation(line: 3057, column: 19, scope: !6958)
!7046 = !DILocation(line: 3057, column: 32, scope: !6958)
!7047 = !DILocation(line: 3056, column: 12, scope: !6958)
!7048 = !DILocation(line: 3056, column: 10, scope: !6958)
!7049 = !DILocation(line: 3058, column: 18, scope: !6958)
!7050 = !DILocation(line: 3058, column: 32, scope: !6958)
!7051 = !DILocation(line: 3058, column: 29, scope: !6958)
!7052 = !DILocation(line: 3058, column: 15, scope: !6958)
!7053 = !DILocation(line: 3059, column: 4, scope: !6958)
!7054 = !DILocation(line: 3062, column: 37, scope: !6958)
!7055 = !DILocation(line: 3062, column: 43, scope: !6958)
!7056 = !DILocation(line: 3063, column: 36, scope: !6958)
!7057 = !DILocation(line: 3063, column: 10, scope: !6958)
!7058 = !DILocation(line: 3062, column: 10, scope: !6958)
!7059 = !DILocation(line: 3062, column: 8, scope: !6958)
!7060 = !DILocation(line: 3065, column: 27, scope: !6958)
!7061 = !DILocation(line: 3066, column: 7, scope: !6958)
!7062 = !DILocation(line: 3067, column: 9, scope: !6958)
!7063 = !DILocation(line: 3067, column: 23, scope: !6958)
!7064 = !DILocation(line: 3067, column: 38, scope: !6958)
!7065 = !DILocation(line: 3065, column: 12, scope: !6958)
!7066 = !DILocation(line: 3065, column: 10, scope: !6958)
!7067 = !DILocation(line: 3068, column: 18, scope: !6958)
!7068 = !DILocation(line: 3068, column: 32, scope: !6958)
!7069 = !DILocation(line: 3068, column: 29, scope: !6958)
!7070 = !DILocation(line: 3068, column: 39, scope: !6958)
!7071 = !DILocation(line: 3068, column: 37, scope: !6958)
!7072 = !DILocation(line: 3068, column: 15, scope: !6958)
!7073 = !DILocation(line: 3069, column: 4, scope: !6958)
!7074 = !DILocation(line: 3072, column: 4, scope: !6958)
!7075 = !DILocation(line: 3073, column: 2, scope: !6958)
!7076 = !DILocation(line: 3080, column: 13, scope: !6923)
!7077 = !DILocation(line: 3080, column: 11, scope: !6923)
!7078 = !DILocation(line: 3080, column: 26, scope: !6923)
!7079 = !DILocation(line: 3080, column: 24, scope: !6923)
!7080 = !DILocation(line: 3081, column: 11, scope: !7081)
!7081 = distinct !DILexicalBlock(scope: !6923, file: !3, line: 3081, column: 11)
!7082 = !DILocation(line: 3081, column: 28, scope: !7081)
!7083 = !DILocation(line: 3081, column: 11, scope: !6923)
!7084 = !DILocation(line: 3083, column: 12, scope: !7085)
!7085 = distinct !DILexicalBlock(scope: !7081, file: !3, line: 3082, column: 2)
!7086 = !DILocation(line: 3083, column: 10, scope: !7085)
!7087 = !DILocation(line: 3084, column: 10, scope: !7085)
!7088 = !DILocation(line: 3084, column: 23, scope: !7085)
!7089 = !DILocation(line: 3084, column: 30, scope: !7085)
!7090 = !DILocation(line: 3084, column: 8, scope: !7085)
!7091 = !DILocation(line: 3085, column: 2, scope: !7085)
!7092 = !DILocation(line: 3087, column: 14, scope: !6923)
!7093 = !DILocation(line: 3087, column: 12, scope: !6923)
!7094 = !DILocation(line: 3088, column: 28, scope: !6923)
!7095 = !DILocation(line: 3089, column: 7, scope: !6923)
!7096 = !DILocation(line: 3088, column: 7, scope: !6923)
!7097 = !DILocation(line: 3091, column: 5, scope: !6923)
!7098 = !DILocation(line: 2996, column: 39, scope: !6917)
!7099 = !DILocation(line: 2996, column: 3, scope: !6917)
!7100 = distinct !{!7100, !6921, !7101}
!7101 = !DILocation(line: 3091, column: 5, scope: !6914)
!7102 = !DILocation(line: 3093, column: 7, scope: !7103)
!7103 = distinct !DILexicalBlock(scope: !6855, file: !3, line: 3093, column: 7)
!7104 = !DILocation(line: 3093, column: 15, scope: !7103)
!7105 = !DILocation(line: 3093, column: 7, scope: !6855)
!7106 = !DILocation(line: 3095, column: 21, scope: !7107)
!7107 = distinct !DILexicalBlock(scope: !7103, file: !3, line: 3094, column: 5)
!7108 = !DILocation(line: 3095, column: 20, scope: !7107)
!7109 = !DILocation(line: 3095, column: 18, scope: !7107)
!7110 = !DILocation(line: 3096, column: 28, scope: !7107)
!7111 = !DILocation(line: 3096, column: 45, scope: !7107)
!7112 = !DILocation(line: 3096, column: 52, scope: !7107)
!7113 = !DILocation(line: 3096, column: 15, scope: !7107)
!7114 = !DILocation(line: 3096, column: 13, scope: !7107)
!7115 = !DILocation(line: 3097, column: 5, scope: !7107)
!7116 = !DILocation(line: 3098, column: 12, scope: !7117)
!7117 = distinct !DILexicalBlock(scope: !7103, file: !3, line: 3098, column: 12)
!7118 = !DILocation(line: 3098, column: 20, scope: !7117)
!7119 = !DILocation(line: 3098, column: 12, scope: !7103)
!7120 = !DILocation(line: 3100, column: 20, scope: !7121)
!7121 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 3099, column: 5)
!7122 = !DILocation(line: 3100, column: 31, scope: !7121)
!7123 = !DILocation(line: 3100, column: 18, scope: !7121)
!7124 = !DILocation(line: 3101, column: 30, scope: !7121)
!7125 = !DILocation(line: 3101, column: 63, scope: !7121)
!7126 = !DILocation(line: 3101, column: 15, scope: !7121)
!7127 = !DILocation(line: 3101, column: 13, scope: !7121)
!7128 = !DILocation(line: 3102, column: 5, scope: !7121)
!7129 = !DILocation(line: 3106, column: 10, scope: !6855)
!7130 = !DILocation(line: 3106, column: 7, scope: !6855)
!7131 = !DILocation(line: 3107, column: 17, scope: !6855)
!7132 = !DILocation(line: 3107, column: 14, scope: !6855)
!7133 = !DILocation(line: 3108, column: 3, scope: !6855)
!7134 = !DILocation(line: 3110, column: 10, scope: !6855)
!7135 = !DILocation(line: 3110, column: 3, scope: !6855)
!7136 = distinct !DISubprogram(name: "ceil_log2", scope: !3, file: !3, line: 3260, type: !7137, scopeLine: 3261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!7137 = !DISubroutineType(types: !7138)
!7138 = !{!2325, !2375}
!7139 = !DILocalVariable(name: "x", arg: 1, scope: !7136, file: !3, line: 3260, type: !2375)
!7140 = !DILocation(line: 3260, column: 35, scope: !7136)
!7141 = !DILocation(line: 3262, column: 22, scope: !7136)
!7142 = !DILocation(line: 3262, column: 24, scope: !7136)
!7143 = !DILocation(line: 3262, column: 10, scope: !7136)
!7144 = !DILocation(line: 3262, column: 29, scope: !7136)
!7145 = !DILocation(line: 3262, column: 3, scope: !7136)
!7146 = distinct !DISubprogram(name: "expand_mult_highpart_adjust", scope: !3, file: !3, line: 3405, type: !7147, scopeLine: 3407, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!7147 = !DISubroutineType(types: !7148)
!7148 = !{!2301, !5, !2301, !2301, !2301, !2301, !2325}
!7149 = !DILocalVariable(name: "mode", arg: 1, scope: !7146, file: !3, line: 3405, type: !5)
!7150 = !DILocation(line: 3405, column: 48, scope: !7146)
!7151 = !DILocalVariable(name: "adj_operand", arg: 2, scope: !7146, file: !3, line: 3405, type: !2301)
!7152 = !DILocation(line: 3405, column: 58, scope: !7146)
!7153 = !DILocalVariable(name: "op0", arg: 3, scope: !7146, file: !3, line: 3405, type: !2301)
!7154 = !DILocation(line: 3405, column: 75, scope: !7146)
!7155 = !DILocalVariable(name: "op1", arg: 4, scope: !7146, file: !3, line: 3406, type: !2301)
!7156 = !DILocation(line: 3406, column: 13, scope: !7146)
!7157 = !DILocalVariable(name: "target", arg: 5, scope: !7146, file: !3, line: 3406, type: !2301)
!7158 = !DILocation(line: 3406, column: 22, scope: !7146)
!7159 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !7146, file: !3, line: 3406, type: !2325)
!7160 = !DILocation(line: 3406, column: 34, scope: !7146)
!7161 = !DILocalVariable(name: "tem", scope: !7146, file: !3, line: 3408, type: !2301)
!7162 = !DILocation(line: 3408, column: 7, scope: !7146)
!7163 = !DILocalVariable(name: "adj_code", scope: !7146, file: !3, line: 3409, type: !377)
!7164 = !DILocation(line: 3409, column: 17, scope: !7146)
!7165 = !DILocation(line: 3409, column: 28, scope: !7146)
!7166 = !DILocation(line: 3411, column: 36, scope: !7146)
!7167 = !DILocation(line: 3411, column: 42, scope: !7146)
!7168 = !DILocation(line: 3412, column: 35, scope: !7146)
!7169 = !DILocation(line: 3412, column: 59, scope: !7146)
!7170 = !DILocation(line: 3412, column: 9, scope: !7146)
!7171 = !DILocation(line: 3411, column: 9, scope: !7146)
!7172 = !DILocation(line: 3411, column: 7, scope: !7146)
!7173 = !DILocation(line: 3414, column: 21, scope: !7146)
!7174 = !DILocation(line: 3414, column: 27, scope: !7146)
!7175 = !DILocation(line: 3414, column: 32, scope: !7146)
!7176 = !DILocation(line: 3414, column: 9, scope: !7146)
!7177 = !DILocation(line: 3414, column: 7, scope: !7146)
!7178 = !DILocation(line: 3416, column: 22, scope: !7146)
!7179 = !DILocation(line: 3417, column: 8, scope: !7146)
!7180 = !DILocation(line: 3416, column: 7, scope: !7146)
!7181 = !DILocation(line: 3416, column: 5, scope: !7146)
!7182 = !DILocation(line: 3419, column: 36, scope: !7146)
!7183 = !DILocation(line: 3419, column: 42, scope: !7146)
!7184 = !DILocation(line: 3420, column: 35, scope: !7146)
!7185 = !DILocation(line: 3420, column: 59, scope: !7146)
!7186 = !DILocation(line: 3420, column: 9, scope: !7146)
!7187 = !DILocation(line: 3419, column: 9, scope: !7146)
!7188 = !DILocation(line: 3419, column: 7, scope: !7146)
!7189 = !DILocation(line: 3422, column: 21, scope: !7146)
!7190 = !DILocation(line: 3422, column: 27, scope: !7146)
!7191 = !DILocation(line: 3422, column: 32, scope: !7146)
!7192 = !DILocation(line: 3422, column: 9, scope: !7146)
!7193 = !DILocation(line: 3422, column: 7, scope: !7146)
!7194 = !DILocation(line: 3423, column: 27, scope: !7146)
!7195 = !DILocation(line: 3424, column: 6, scope: !7146)
!7196 = !DILocation(line: 3423, column: 12, scope: !7146)
!7197 = !DILocation(line: 3423, column: 10, scope: !7146)
!7198 = !DILocation(line: 3426, column: 10, scope: !7146)
!7199 = !DILocation(line: 3426, column: 3, scope: !7146)
!7200 = distinct !DISubprogram(name: "expand_and", scope: !3, file: !3, line: 5113, type: !7201, scopeLine: 5114, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!7201 = !DISubroutineType(types: !7202)
!7202 = !{!2301, !5, !2301, !2301, !2301}
!7203 = !DILocalVariable(name: "mode", arg: 1, scope: !7200, file: !3, line: 5113, type: !5)
!7204 = !DILocation(line: 5113, column: 31, scope: !7200)
!7205 = !DILocalVariable(name: "op0", arg: 2, scope: !7200, file: !3, line: 5113, type: !2301)
!7206 = !DILocation(line: 5113, column: 41, scope: !7200)
!7207 = !DILocalVariable(name: "op1", arg: 3, scope: !7200, file: !3, line: 5113, type: !2301)
!7208 = !DILocation(line: 5113, column: 50, scope: !7200)
!7209 = !DILocalVariable(name: "target", arg: 4, scope: !7200, file: !3, line: 5113, type: !2301)
!7210 = !DILocation(line: 5113, column: 59, scope: !7200)
!7211 = !DILocalVariable(name: "tem", scope: !7200, file: !3, line: 5115, type: !2301)
!7212 = !DILocation(line: 5115, column: 7, scope: !7200)
!7213 = !DILocation(line: 5117, column: 7, scope: !7214)
!7214 = distinct !DILexicalBlock(scope: !7200, file: !3, line: 5117, column: 7)
!7215 = !DILocation(line: 5117, column: 22, scope: !7214)
!7216 = !DILocation(line: 5117, column: 34, scope: !7214)
!7217 = !DILocation(line: 5117, column: 37, scope: !7214)
!7218 = !DILocation(line: 5117, column: 52, scope: !7214)
!7219 = !DILocation(line: 5117, column: 7, scope: !7200)
!7220 = !DILocation(line: 5118, column: 43, scope: !7214)
!7221 = !DILocation(line: 5118, column: 49, scope: !7214)
!7222 = !DILocation(line: 5118, column: 54, scope: !7214)
!7223 = !DILocation(line: 5118, column: 11, scope: !7214)
!7224 = !DILocation(line: 5118, column: 9, scope: !7214)
!7225 = !DILocation(line: 5118, column: 5, scope: !7214)
!7226 = !DILocation(line: 5119, column: 7, scope: !7227)
!7227 = distinct !DILexicalBlock(scope: !7200, file: !3, line: 5119, column: 7)
!7228 = !DILocation(line: 5119, column: 11, scope: !7227)
!7229 = !DILocation(line: 5119, column: 7, scope: !7200)
!7230 = !DILocation(line: 5120, column: 25, scope: !7227)
!7231 = !DILocation(line: 5120, column: 42, scope: !7227)
!7232 = !DILocation(line: 5120, column: 47, scope: !7227)
!7233 = !DILocation(line: 5120, column: 52, scope: !7227)
!7234 = !DILocation(line: 5120, column: 11, scope: !7227)
!7235 = !DILocation(line: 5120, column: 9, scope: !7227)
!7236 = !DILocation(line: 5120, column: 5, scope: !7227)
!7237 = !DILocation(line: 5122, column: 7, scope: !7238)
!7238 = distinct !DILexicalBlock(scope: !7200, file: !3, line: 5122, column: 7)
!7239 = !DILocation(line: 5122, column: 14, scope: !7238)
!7240 = !DILocation(line: 5122, column: 7, scope: !7200)
!7241 = !DILocation(line: 5123, column: 14, scope: !7238)
!7242 = !DILocation(line: 5123, column: 12, scope: !7238)
!7243 = !DILocation(line: 5123, column: 5, scope: !7238)
!7244 = !DILocation(line: 5124, column: 12, scope: !7245)
!7245 = distinct !DILexicalBlock(scope: !7238, file: !3, line: 5124, column: 12)
!7246 = !DILocation(line: 5124, column: 19, scope: !7245)
!7247 = !DILocation(line: 5124, column: 16, scope: !7245)
!7248 = !DILocation(line: 5124, column: 12, scope: !7238)
!7249 = !DILocation(line: 5125, column: 21, scope: !7245)
!7250 = !DILocation(line: 5125, column: 29, scope: !7245)
!7251 = !DILocation(line: 5125, column: 5, scope: !7245)
!7252 = !DILocation(line: 5126, column: 10, scope: !7200)
!7253 = !DILocation(line: 5126, column: 3, scope: !7200)
!7254 = !DILocalVariable(name: "rem_flag", arg: 1, scope: !3366, file: !3, line: 3844, type: !2325)
!7255 = !DILocation(line: 3844, column: 20, scope: !3366)
!7256 = !DILocalVariable(name: "code", arg: 2, scope: !3366, file: !3, line: 3844, type: !183)
!7257 = !DILocation(line: 3844, column: 45, scope: !3366)
!7258 = !DILocalVariable(name: "mode", arg: 3, scope: !3366, file: !3, line: 3844, type: !5)
!7259 = !DILocation(line: 3844, column: 69, scope: !3366)
!7260 = !DILocalVariable(name: "op0", arg: 4, scope: !3366, file: !3, line: 3845, type: !2301)
!7261 = !DILocation(line: 3845, column: 13, scope: !3366)
!7262 = !DILocalVariable(name: "op1", arg: 5, scope: !3366, file: !3, line: 3845, type: !2301)
!7263 = !DILocation(line: 3845, column: 22, scope: !3366)
!7264 = !DILocalVariable(name: "target", arg: 6, scope: !3366, file: !3, line: 3845, type: !2301)
!7265 = !DILocation(line: 3845, column: 31, scope: !3366)
!7266 = !DILocalVariable(name: "unsignedp", arg: 7, scope: !3366, file: !3, line: 3845, type: !2325)
!7267 = !DILocation(line: 3845, column: 43, scope: !3366)
!7268 = !DILocalVariable(name: "compute_mode", scope: !3366, file: !3, line: 3847, type: !5)
!7269 = !DILocation(line: 3847, column: 21, scope: !3366)
!7270 = !DILocalVariable(name: "tquotient", scope: !3366, file: !3, line: 3848, type: !2301)
!7271 = !DILocation(line: 3848, column: 7, scope: !3366)
!7272 = !DILocalVariable(name: "quotient", scope: !3366, file: !3, line: 3849, type: !2301)
!7273 = !DILocation(line: 3849, column: 7, scope: !3366)
!7274 = !DILocalVariable(name: "remainder", scope: !3366, file: !3, line: 3849, type: !2301)
!7275 = !DILocation(line: 3849, column: 21, scope: !3366)
!7276 = !DILocalVariable(name: "last", scope: !3366, file: !3, line: 3850, type: !2301)
!7277 = !DILocation(line: 3850, column: 7, scope: !3366)
!7278 = !DILocalVariable(name: "size", scope: !3366, file: !3, line: 3851, type: !2325)
!7279 = !DILocation(line: 3851, column: 7, scope: !3366)
!7280 = !DILocalVariable(name: "insn", scope: !3366, file: !3, line: 3852, type: !2301)
!7281 = !DILocation(line: 3852, column: 7, scope: !3366)
!7282 = !DILocalVariable(name: "set", scope: !3366, file: !3, line: 3852, type: !2301)
!7283 = !DILocation(line: 3852, column: 13, scope: !3366)
!7284 = !DILocalVariable(name: "optab1", scope: !3366, file: !3, line: 3853, type: !5978)
!7285 = !DILocation(line: 3853, column: 9, scope: !3366)
!7286 = !DILocalVariable(name: "optab2", scope: !3366, file: !3, line: 3853, type: !5978)
!7287 = !DILocation(line: 3853, column: 17, scope: !3366)
!7288 = !DILocalVariable(name: "op1_is_constant", scope: !3366, file: !3, line: 3854, type: !2325)
!7289 = !DILocation(line: 3854, column: 7, scope: !3366)
!7290 = !DILocalVariable(name: "op1_is_pow2", scope: !3366, file: !3, line: 3854, type: !2325)
!7291 = !DILocation(line: 3854, column: 24, scope: !3366)
!7292 = !DILocalVariable(name: "max_cost", scope: !3366, file: !3, line: 3855, type: !2325)
!7293 = !DILocation(line: 3855, column: 7, scope: !3366)
!7294 = !DILocalVariable(name: "extra_cost", scope: !3366, file: !3, line: 3855, type: !2325)
!7295 = !DILocation(line: 3855, column: 17, scope: !3366)
!7296 = !DILocalVariable(name: "speed", scope: !3366, file: !3, line: 3858, type: !2535)
!7297 = !DILocation(line: 3858, column: 8, scope: !3366)
!7298 = !DILocation(line: 3858, column: 16, scope: !3366)
!7299 = !DILocation(line: 3860, column: 21, scope: !3366)
!7300 = !DILocation(line: 3860, column: 19, scope: !3366)
!7301 = !DILocation(line: 3861, column: 7, scope: !7302)
!7302 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 3861, column: 7)
!7303 = !DILocation(line: 3861, column: 7, scope: !3366)
!7304 = !DILocation(line: 3863, column: 17, scope: !7305)
!7305 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 3862, column: 5)
!7306 = !DILocation(line: 3863, column: 15, scope: !7305)
!7307 = !DILocation(line: 3864, column: 11, scope: !7308)
!7308 = distinct !DILexicalBlock(scope: !7305, file: !3, line: 3864, column: 11)
!7309 = !DILocation(line: 3864, column: 11, scope: !7305)
!7310 = !DILocation(line: 3865, column: 13, scope: !7308)
!7311 = !DILocation(line: 3865, column: 10, scope: !7308)
!7312 = !DILocation(line: 3865, column: 2, scope: !7308)
!7313 = !DILocation(line: 3866, column: 23, scope: !7305)
!7314 = !DILocation(line: 3867, column: 8, scope: !7305)
!7315 = !DILocation(line: 3867, column: 14, scope: !7305)
!7316 = !DILocation(line: 3867, column: 24, scope: !7305)
!7317 = !DILocation(line: 3867, column: 27, scope: !7305)
!7318 = !DILocation(line: 0, scope: !7305)
!7319 = !DILocation(line: 3866, column: 19, scope: !7305)
!7320 = !DILocation(line: 3868, column: 5, scope: !7305)
!7321 = !DILocation(line: 3902, column: 7, scope: !7322)
!7322 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 3902, column: 7)
!7323 = !DILocation(line: 3902, column: 14, scope: !7322)
!7324 = !DILocation(line: 3902, column: 11, scope: !7322)
!7325 = !DILocation(line: 3902, column: 7, scope: !3366)
!7326 = !DILocation(line: 3903, column: 12, scope: !7322)
!7327 = !DILocation(line: 3903, column: 23, scope: !7322)
!7328 = !DILocation(line: 3903, column: 36, scope: !7322)
!7329 = !DILocation(line: 3903, column: 5, scope: !7322)
!7330 = !DILocation(line: 3907, column: 9, scope: !7331)
!7331 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 3907, column: 7)
!7332 = !DILocation(line: 3907, column: 19, scope: !7331)
!7333 = !DILocation(line: 3907, column: 22, scope: !7331)
!7334 = !DILocation(line: 3907, column: 29, scope: !7331)
!7335 = !DILocation(line: 3907, column: 26, scope: !7331)
!7336 = !DILocation(line: 3907, column: 7, scope: !3366)
!7337 = !DILocation(line: 3909, column: 11, scope: !7338)
!7338 = distinct !DILexicalBlock(scope: !7339, file: !3, line: 3909, column: 11)
!7339 = distinct !DILexicalBlock(scope: !7331, file: !3, line: 3908, column: 5)
!7340 = !DILocation(line: 3909, column: 11, scope: !7339)
!7341 = !DILocation(line: 3910, column: 9, scope: !7338)
!7342 = !DILocation(line: 3910, column: 2, scope: !7338)
!7343 = !DILocation(line: 3911, column: 27, scope: !7339)
!7344 = !DILocation(line: 3911, column: 33, scope: !7339)
!7345 = !DILocation(line: 3911, column: 44, scope: !7339)
!7346 = !DILocation(line: 3911, column: 47, scope: !7339)
!7347 = !DILocation(line: 3911, column: 68, scope: !7339)
!7348 = !DILocation(line: 0, scope: !7339)
!7349 = !DILocation(line: 3912, column: 32, scope: !7339)
!7350 = !DILocation(line: 3912, column: 37, scope: !7339)
!7351 = !DILocation(line: 3911, column: 14, scope: !7339)
!7352 = !DILocation(line: 3911, column: 7, scope: !7339)
!7353 = !DILocation(line: 3915, column: 7, scope: !7354)
!7354 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 3915, column: 7)
!7355 = !DILocation(line: 3919, column: 7, scope: !7354)
!7356 = !DILocation(line: 3919, column: 12, scope: !7354)
!7357 = !DILocation(line: 3919, column: 27, scope: !7354)
!7358 = !DILocation(line: 3919, column: 30, scope: !7354)
!7359 = !DILocation(line: 3921, column: 4, scope: !7354)
!7360 = !DILocation(line: 3921, column: 9, scope: !7354)
!7361 = !DILocation(line: 3921, column: 18, scope: !7354)
!7362 = !DILocation(line: 3921, column: 21, scope: !7354)
!7363 = !DILocation(line: 3922, column: 8, scope: !7354)
!7364 = !DILocation(line: 3922, column: 29, scope: !7354)
!7365 = !DILocation(line: 3922, column: 37, scope: !7354)
!7366 = !DILocation(line: 3922, column: 12, scope: !7354)
!7367 = !DILocation(line: 3923, column: 5, scope: !7354)
!7368 = !DILocation(line: 3923, column: 9, scope: !7354)
!7369 = !DILocation(line: 3923, column: 21, scope: !7354)
!7370 = !DILocation(line: 3923, column: 24, scope: !7354)
!7371 = !DILocation(line: 3924, column: 4, scope: !7354)
!7372 = !DILocation(line: 3924, column: 24, scope: !7354)
!7373 = !DILocation(line: 3924, column: 32, scope: !7354)
!7374 = !DILocation(line: 3924, column: 7, scope: !7354)
!7375 = !DILocation(line: 3925, column: 4, scope: !7354)
!7376 = !DILocation(line: 3925, column: 8, scope: !7354)
!7377 = !DILocation(line: 3925, column: 20, scope: !7354)
!7378 = !DILocation(line: 3925, column: 23, scope: !7354)
!7379 = !DILocation(line: 3915, column: 7, scope: !3366)
!7380 = !DILocation(line: 3926, column: 12, scope: !7354)
!7381 = !DILocation(line: 3926, column: 5, scope: !7354)
!7382 = !DILocation(line: 3948, column: 14, scope: !3366)
!7383 = !DILocation(line: 3948, column: 26, scope: !3366)
!7384 = !DILocation(line: 3948, column: 29, scope: !3366)
!7385 = !DILocation(line: 3948, column: 36, scope: !3366)
!7386 = !DILocation(line: 3948, column: 33, scope: !3366)
!7387 = !DILocation(line: 3948, column: 13, scope: !3366)
!7388 = !DILocation(line: 3949, column: 9, scope: !3366)
!7389 = !DILocation(line: 3950, column: 9, scope: !3366)
!7390 = !DILocation(line: 3948, column: 10, scope: !3366)
!7391 = !DILocation(line: 3951, column: 14, scope: !3366)
!7392 = !DILocation(line: 3951, column: 26, scope: !3366)
!7393 = !DILocation(line: 3951, column: 29, scope: !3366)
!7394 = !DILocation(line: 3951, column: 36, scope: !3366)
!7395 = !DILocation(line: 3951, column: 33, scope: !3366)
!7396 = !DILocation(line: 3951, column: 13, scope: !3366)
!7397 = !DILocation(line: 3952, column: 8, scope: !3366)
!7398 = !DILocation(line: 3953, column: 9, scope: !3366)
!7399 = !DILocation(line: 3951, column: 10, scope: !3366)
!7400 = !DILocation(line: 3955, column: 23, scope: !7401)
!7401 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 3955, column: 3)
!7402 = !DILocation(line: 3955, column: 21, scope: !7401)
!7403 = !DILocation(line: 3955, column: 8, scope: !7401)
!7404 = !DILocation(line: 3955, column: 29, scope: !7405)
!7405 = distinct !DILexicalBlock(scope: !7401, file: !3, line: 3955, column: 3)
!7406 = !DILocation(line: 3955, column: 42, scope: !7405)
!7407 = !DILocation(line: 3955, column: 3, scope: !7401)
!7408 = !DILocation(line: 3957, column: 9, scope: !7409)
!7409 = distinct !DILexicalBlock(scope: !7405, file: !3, line: 3957, column: 9)
!7410 = !DILocation(line: 3957, column: 47, scope: !7409)
!7411 = !DILocation(line: 3957, column: 57, scope: !7409)
!7412 = !DILocation(line: 3958, column: 2, scope: !7409)
!7413 = !DILocation(line: 3958, column: 5, scope: !7409)
!7414 = !DILocation(line: 3958, column: 43, scope: !7409)
!7415 = !DILocation(line: 3958, column: 53, scope: !7409)
!7416 = !DILocation(line: 3957, column: 9, scope: !7405)
!7417 = !DILocation(line: 3959, column: 7, scope: !7409)
!7418 = !DILocation(line: 3958, column: 56, scope: !7409)
!7419 = !DILocation(line: 3956, column: 23, scope: !7405)
!7420 = !DILocation(line: 3956, column: 21, scope: !7405)
!7421 = !DILocation(line: 3955, column: 3, scope: !7405)
!7422 = distinct !{!7422, !7407, !7423}
!7423 = !DILocation(line: 3959, column: 7, scope: !7401)
!7424 = !DILocation(line: 3961, column: 7, scope: !7425)
!7425 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 3961, column: 7)
!7426 = !DILocation(line: 3961, column: 20, scope: !7425)
!7427 = !DILocation(line: 3961, column: 7, scope: !3366)
!7428 = !DILocation(line: 3962, column: 25, scope: !7429)
!7429 = distinct !DILexicalBlock(scope: !7425, file: !3, line: 3962, column: 5)
!7430 = !DILocation(line: 3962, column: 23, scope: !7429)
!7431 = !DILocation(line: 3962, column: 10, scope: !7429)
!7432 = !DILocation(line: 3962, column: 31, scope: !7433)
!7433 = distinct !DILexicalBlock(scope: !7429, file: !3, line: 3962, column: 5)
!7434 = !DILocation(line: 3962, column: 44, scope: !7433)
!7435 = !DILocation(line: 3962, column: 5, scope: !7429)
!7436 = !DILocation(line: 3964, column: 26, scope: !7437)
!7437 = distinct !DILexicalBlock(scope: !7433, file: !3, line: 3964, column: 11)
!7438 = !DILocation(line: 3964, column: 34, scope: !7437)
!7439 = !DILocation(line: 3964, column: 11, scope: !7437)
!7440 = !DILocation(line: 3965, column: 4, scope: !7437)
!7441 = !DILocation(line: 3965, column: 22, scope: !7437)
!7442 = !DILocation(line: 3965, column: 30, scope: !7437)
!7443 = !DILocation(line: 3965, column: 7, scope: !7437)
!7444 = !DILocation(line: 3964, column: 11, scope: !7433)
!7445 = !DILocation(line: 3966, column: 2, scope: !7437)
!7446 = !DILocation(line: 3965, column: 42, scope: !7437)
!7447 = !DILocation(line: 3963, column: 18, scope: !7433)
!7448 = !DILocation(line: 3963, column: 16, scope: !7433)
!7449 = !DILocation(line: 3962, column: 5, scope: !7433)
!7450 = distinct !{!7450, !7435, !7451}
!7451 = !DILocation(line: 3966, column: 2, scope: !7429)
!7452 = !DILocation(line: 3970, column: 7, scope: !7453)
!7453 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 3970, column: 7)
!7454 = !DILocation(line: 3970, column: 20, scope: !7453)
!7455 = !DILocation(line: 3970, column: 7, scope: !3366)
!7456 = !DILocation(line: 3971, column: 20, scope: !7453)
!7457 = !DILocation(line: 3971, column: 18, scope: !7453)
!7458 = !DILocation(line: 3971, column: 5, scope: !7453)
!7459 = !DILocation(line: 3973, column: 7, scope: !7460)
!7460 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 3973, column: 7)
!7461 = !DILocation(line: 3973, column: 14, scope: !7460)
!7462 = !DILocation(line: 3973, column: 17, scope: !7460)
!7463 = !DILocation(line: 3973, column: 38, scope: !7460)
!7464 = !DILocation(line: 3973, column: 35, scope: !7460)
!7465 = !DILocation(line: 3973, column: 7, scope: !3366)
!7466 = !DILocation(line: 3974, column: 17, scope: !7460)
!7467 = !DILocation(line: 3974, column: 15, scope: !7460)
!7468 = !DILocation(line: 3974, column: 5, scope: !7460)
!7469 = !DILocation(line: 3976, column: 30, scope: !7460)
!7470 = !DILocation(line: 3976, column: 17, scope: !7460)
!7471 = !DILocation(line: 3976, column: 15, scope: !7460)
!7472 = !DILocation(line: 3978, column: 10, scope: !3366)
!7473 = !DILocation(line: 3978, column: 8, scope: !3366)
!7474 = !DILocation(line: 3989, column: 14, scope: !3366)
!7475 = !DILocation(line: 3989, column: 36, scope: !3366)
!7476 = !DILocation(line: 3989, column: 26, scope: !3366)
!7477 = !DILocation(line: 3989, column: 43, scope: !3366)
!7478 = !DILocation(line: 3989, column: 69, scope: !3366)
!7479 = !DILocation(line: 3989, column: 59, scope: !3366)
!7480 = !DILocation(line: 3989, column: 76, scope: !3366)
!7481 = !DILocation(line: 3989, column: 12, scope: !3366)
!7482 = !DILocation(line: 3990, column: 7, scope: !7483)
!7483 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 3990, column: 7)
!7484 = !DILocation(line: 3990, column: 16, scope: !7483)
!7485 = !DILocation(line: 3990, column: 22, scope: !7483)
!7486 = !DILocation(line: 3990, column: 37, scope: !7483)
!7487 = !DILocation(line: 3990, column: 42, scope: !7483)
!7488 = !DILocation(line: 3990, column: 45, scope: !7483)
!7489 = !DILocation(line: 3991, column: 8, scope: !7483)
!7490 = !DILocation(line: 3991, column: 11, scope: !7483)
!7491 = !DILocation(line: 3991, column: 27, scope: !7483)
!7492 = !DILocation(line: 3991, column: 24, scope: !7483)
!7493 = !DILocation(line: 3990, column: 7, scope: !3366)
!7494 = !DILocation(line: 3992, column: 26, scope: !7483)
!7495 = !DILocation(line: 3992, column: 17, scope: !7483)
!7496 = !DILocation(line: 3992, column: 33, scope: !7483)
!7497 = !DILocation(line: 3992, column: 58, scope: !7483)
!7498 = !DILocation(line: 3992, column: 49, scope: !7483)
!7499 = !DILocation(line: 3992, column: 65, scope: !7483)
!7500 = !DILocation(line: 3992, column: 47, scope: !7483)
!7501 = !DILocation(line: 3992, column: 14, scope: !7483)
!7502 = !DILocation(line: 3992, column: 5, scope: !7483)
!7503 = !DILocation(line: 3994, column: 22, scope: !3366)
!7504 = !DILocation(line: 3994, column: 31, scope: !3366)
!7505 = !DILocation(line: 3994, column: 34, scope: !3366)
!7506 = !DILocation(line: 3994, column: 20, scope: !3366)
!7507 = !DILocation(line: 3994, column: 52, scope: !3366)
!7508 = !DILocation(line: 3994, column: 18, scope: !3366)
!7509 = !DILocation(line: 3997, column: 7, scope: !7510)
!7510 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 3997, column: 7)
!7511 = !DILocation(line: 3997, column: 23, scope: !7510)
!7512 = !DILocation(line: 3997, column: 20, scope: !7510)
!7513 = !DILocation(line: 3997, column: 7, scope: !3366)
!7514 = !DILocation(line: 3999, column: 28, scope: !7515)
!7515 = distinct !DILexicalBlock(scope: !7510, file: !3, line: 3998, column: 5)
!7516 = !DILocation(line: 3999, column: 42, scope: !7515)
!7517 = !DILocation(line: 3999, column: 48, scope: !7515)
!7518 = !DILocation(line: 3999, column: 53, scope: !7515)
!7519 = !DILocation(line: 3999, column: 13, scope: !7515)
!7520 = !DILocation(line: 3999, column: 11, scope: !7515)
!7521 = !DILocation(line: 4000, column: 28, scope: !7515)
!7522 = !DILocation(line: 4000, column: 42, scope: !7515)
!7523 = !DILocation(line: 4000, column: 48, scope: !7515)
!7524 = !DILocation(line: 4000, column: 53, scope: !7515)
!7525 = !DILocation(line: 4000, column: 13, scope: !7515)
!7526 = !DILocation(line: 4000, column: 11, scope: !7515)
!7527 = !DILocation(line: 4004, column: 25, scope: !7515)
!7528 = !DILocation(line: 4004, column: 23, scope: !7515)
!7529 = !DILocation(line: 4005, column: 22, scope: !7515)
!7530 = !DILocation(line: 4006, column: 8, scope: !7515)
!7531 = !DILocation(line: 4006, column: 13, scope: !7515)
!7532 = !DILocation(line: 4007, column: 6, scope: !7515)
!7533 = !DILocation(line: 4007, column: 12, scope: !7515)
!7534 = !DILocation(line: 4008, column: 10, scope: !7515)
!7535 = !DILocation(line: 4008, column: 13, scope: !7515)
!7536 = !DILocation(line: 0, scope: !7515)
!7537 = !DILocation(line: 4005, column: 19, scope: !7515)
!7538 = !DILocation(line: 4009, column: 5, scope: !7515)
!7539 = !DILocation(line: 4013, column: 7, scope: !7540)
!7540 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 4013, column: 7)
!7541 = !DILocation(line: 4013, column: 19, scope: !7540)
!7542 = !DILocation(line: 4013, column: 22, scope: !7540)
!7543 = !DILocation(line: 4013, column: 7, scope: !3366)
!7544 = !DILocation(line: 4014, column: 22, scope: !7540)
!7545 = !DILocation(line: 4014, column: 36, scope: !7540)
!7546 = !DILocation(line: 4014, column: 11, scope: !7540)
!7547 = !DILocation(line: 4014, column: 9, scope: !7540)
!7548 = !DILocation(line: 4014, column: 5, scope: !7540)
!7549 = !DILocation(line: 4015, column: 7, scope: !7550)
!7550 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 4015, column: 7)
!7551 = !DILocation(line: 4015, column: 19, scope: !7550)
!7552 = !DILocation(line: 4015, column: 22, scope: !7550)
!7553 = !DILocation(line: 4015, column: 7, scope: !3366)
!7554 = !DILocation(line: 4016, column: 22, scope: !7550)
!7555 = !DILocation(line: 4016, column: 36, scope: !7550)
!7556 = !DILocation(line: 4016, column: 11, scope: !7550)
!7557 = !DILocation(line: 4016, column: 9, scope: !7550)
!7558 = !DILocation(line: 4016, column: 5, scope: !7550)
!7559 = !DILocation(line: 4020, column: 7, scope: !7560)
!7560 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 4020, column: 7)
!7561 = !DILocation(line: 4020, column: 16, scope: !7560)
!7562 = !DILocation(line: 4020, column: 19, scope: !7560)
!7563 = !DILocation(line: 4020, column: 7, scope: !3366)
!7564 = !DILocation(line: 4021, column: 22, scope: !7560)
!7565 = !DILocation(line: 4021, column: 36, scope: !7560)
!7566 = !DILocation(line: 4021, column: 11, scope: !7560)
!7567 = !DILocation(line: 4021, column: 9, scope: !7560)
!7568 = !DILocation(line: 4021, column: 5, scope: !7560)
!7569 = !DILocation(line: 4023, column: 10, scope: !3366)
!7570 = !DILocation(line: 4023, column: 8, scope: !3366)
!7571 = !DILocation(line: 4026, column: 7, scope: !7572)
!7572 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 4026, column: 7)
!7573 = !DILocation(line: 4026, column: 7, scope: !3366)
!7574 = !DILocation(line: 4028, column: 11, scope: !7575)
!7575 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 4028, column: 11)
!7576 = distinct !DILexicalBlock(scope: !7572, file: !3, line: 4027, column: 5)
!7577 = !DILocation(line: 4028, column: 16, scope: !7575)
!7578 = !DILocation(line: 4028, column: 11, scope: !7576)
!7579 = !DILocation(line: 4029, column: 7, scope: !7575)
!7580 = !DILocation(line: 4029, column: 2, scope: !7575)
!7581 = !DILocation(line: 4030, column: 11, scope: !7582)
!7582 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 4030, column: 11)
!7583 = !DILocation(line: 4030, column: 16, scope: !7582)
!7584 = !DILocation(line: 4030, column: 11, scope: !7576)
!7585 = !DILocation(line: 4031, column: 7, scope: !7582)
!7586 = !DILocation(line: 4031, column: 2, scope: !7582)
!7587 = !DILocation(line: 4032, column: 11, scope: !7588)
!7588 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 4032, column: 11)
!7589 = !DILocation(line: 4032, column: 16, scope: !7588)
!7590 = !DILocation(line: 4032, column: 34, scope: !7588)
!7591 = !DILocation(line: 4032, column: 37, scope: !7588)
!7592 = !DILocation(line: 4032, column: 11, scope: !7576)
!7593 = !DILocation(line: 4033, column: 7, scope: !7588)
!7594 = !DILocation(line: 4033, column: 2, scope: !7588)
!7595 = !DILocation(line: 4034, column: 5, scope: !7576)
!7596 = !DILocation(line: 4036, column: 7, scope: !7597)
!7597 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 4036, column: 7)
!7598 = !DILocation(line: 4036, column: 14, scope: !7597)
!7599 = !DILocation(line: 4036, column: 11, scope: !7597)
!7600 = !DILocation(line: 4036, column: 7, scope: !3366)
!7601 = !DILocation(line: 4037, column: 13, scope: !7597)
!7602 = !DILocation(line: 4037, column: 5, scope: !7597)
!7603 = !DILocation(line: 4041, column: 6, scope: !7604)
!7604 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 4041, column: 6)
!7605 = distinct !DILexicalBlock(scope: !7597, file: !3, line: 4038, column: 7)
!7606 = !DILocation(line: 4041, column: 6, scope: !7605)
!7607 = !DILocation(line: 4043, column: 10, scope: !7608)
!7608 = distinct !DILexicalBlock(scope: !7609, file: !3, line: 4043, column: 10)
!7609 = distinct !DILexicalBlock(scope: !7604, file: !3, line: 4042, column: 4)
!7610 = !DILocation(line: 4043, column: 10, scope: !7609)
!7611 = !DILocalVariable(name: "mh", scope: !7612, file: !3, line: 4045, type: !2375)
!7612 = distinct !DILexicalBlock(scope: !7608, file: !3, line: 4044, column: 8)
!7613 = !DILocation(line: 4045, column: 26, scope: !7612)
!7614 = !DILocalVariable(name: "pre_shift", scope: !7612, file: !3, line: 4046, type: !2325)
!7615 = !DILocation(line: 4046, column: 7, scope: !7612)
!7616 = !DILocalVariable(name: "post_shift", scope: !7612, file: !3, line: 4046, type: !2325)
!7617 = !DILocation(line: 4046, column: 18, scope: !7612)
!7618 = !DILocalVariable(name: "dummy", scope: !7612, file: !3, line: 4047, type: !2325)
!7619 = !DILocation(line: 4047, column: 7, scope: !7612)
!7620 = !DILocalVariable(name: "ml", scope: !7612, file: !3, line: 4048, type: !2301)
!7621 = !DILocation(line: 4048, column: 7, scope: !7612)
!7622 = !DILocalVariable(name: "d", scope: !7612, file: !3, line: 4049, type: !2375)
!7623 = !DILocation(line: 4049, column: 26, scope: !7612)
!7624 = !DILocation(line: 4049, column: 31, scope: !7612)
!7625 = !DILocation(line: 4050, column: 12, scope: !7612)
!7626 = !DILocation(line: 4050, column: 10, scope: !7612)
!7627 = !DILocation(line: 4052, column: 7, scope: !7628)
!7628 = distinct !DILexicalBlock(scope: !7612, file: !3, line: 4052, column: 7)
!7629 = !DILocation(line: 4052, column: 7, scope: !7612)
!7630 = !DILocation(line: 4054, column: 31, scope: !7631)
!7631 = distinct !DILexicalBlock(scope: !7628, file: !3, line: 4053, column: 5)
!7632 = !DILocation(line: 4054, column: 19, scope: !7631)
!7633 = !DILocation(line: 4054, column: 17, scope: !7631)
!7634 = !DILocation(line: 4055, column: 11, scope: !7635)
!7635 = distinct !DILexicalBlock(scope: !7631, file: !3, line: 4055, column: 11)
!7636 = !DILocation(line: 4055, column: 11, scope: !7631)
!7637 = !DILocation(line: 4058, column: 22, scope: !7638)
!7638 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 4056, column: 9)
!7639 = !DILocation(line: 4058, column: 47, scope: !7638)
!7640 = !DILocation(line: 4059, column: 8, scope: !7638)
!7641 = !DILocation(line: 4060, column: 8, scope: !7638)
!7642 = !DILocation(line: 4058, column: 8, scope: !7638)
!7643 = !DILocation(line: 4058, column: 6, scope: !7638)
!7644 = !DILocation(line: 4062, column: 8, scope: !7645)
!7645 = distinct !DILexicalBlock(scope: !7638, file: !3, line: 4062, column: 8)
!7646 = !DILocation(line: 4062, column: 8, scope: !7638)
!7647 = !DILocation(line: 4063, column: 13, scope: !7645)
!7648 = !DILocation(line: 4063, column: 26, scope: !7645)
!7649 = !DILocation(line: 4063, column: 32, scope: !7645)
!7650 = !DILocation(line: 4063, column: 6, scope: !7645)
!7651 = !DILocation(line: 4064, column: 9, scope: !7638)
!7652 = !DILocation(line: 4065, column: 45, scope: !7631)
!7653 = !DILocation(line: 4065, column: 59, scope: !7631)
!7654 = !DILocation(line: 4067, column: 12, scope: !7631)
!7655 = !DILocation(line: 4066, column: 11, scope: !7631)
!7656 = !DILocation(line: 4068, column: 11, scope: !7631)
!7657 = !DILocation(line: 4065, column: 18, scope: !7631)
!7658 = !DILocation(line: 4065, column: 16, scope: !7631)
!7659 = !DILocation(line: 4069, column: 5, scope: !7631)
!7660 = !DILocation(line: 4070, column: 12, scope: !7661)
!7661 = distinct !DILexicalBlock(scope: !7628, file: !3, line: 4070, column: 12)
!7662 = !DILocation(line: 4070, column: 17, scope: !7661)
!7663 = !DILocation(line: 4070, column: 12, scope: !7628)
!7664 = !DILocation(line: 4072, column: 11, scope: !7665)
!7665 = distinct !DILexicalBlock(scope: !7666, file: !3, line: 4072, column: 11)
!7666 = distinct !DILexicalBlock(scope: !7661, file: !3, line: 4071, column: 5)
!7667 = !DILocation(line: 4072, column: 48, scope: !7665)
!7668 = !DILocation(line: 4072, column: 53, scope: !7665)
!7669 = !DILocation(line: 4072, column: 44, scope: !7665)
!7670 = !DILocation(line: 4072, column: 13, scope: !7665)
!7671 = !DILocation(line: 4072, column: 11, scope: !7666)
!7672 = !DILocation(line: 4076, column: 38, scope: !7673)
!7673 = distinct !DILexicalBlock(scope: !7665, file: !3, line: 4073, column: 9)
!7674 = !DILocation(line: 4076, column: 54, scope: !7673)
!7675 = !DILocation(line: 4076, column: 59, scope: !7673)
!7676 = !DILocation(line: 4077, column: 10, scope: !7673)
!7677 = !DILocation(line: 4076, column: 15, scope: !7673)
!7678 = !DILocation(line: 4076, column: 13, scope: !7673)
!7679 = !DILocation(line: 4078, column: 9, scope: !7673)
!7680 = !DILocation(line: 4084, column: 28, scope: !7681)
!7681 = distinct !DILexicalBlock(scope: !7665, file: !3, line: 4080, column: 9)
!7682 = !DILocation(line: 4084, column: 31, scope: !7681)
!7683 = !DILocation(line: 4084, column: 37, scope: !7681)
!7684 = !DILocation(line: 4084, column: 9, scope: !7681)
!7685 = !DILocation(line: 4084, column: 7, scope: !7681)
!7686 = !DILocation(line: 4090, column: 8, scope: !7687)
!7687 = distinct !DILexicalBlock(scope: !7681, file: !3, line: 4090, column: 8)
!7688 = !DILocation(line: 4090, column: 11, scope: !7687)
!7689 = !DILocation(line: 4090, column: 16, scope: !7687)
!7690 = !DILocation(line: 4090, column: 20, scope: !7687)
!7691 = !DILocation(line: 4090, column: 22, scope: !7687)
!7692 = !DILocation(line: 4090, column: 27, scope: !7687)
!7693 = !DILocation(line: 4090, column: 8, scope: !7681)
!7694 = !DILocation(line: 4092, column: 32, scope: !7695)
!7695 = distinct !DILexicalBlock(scope: !7687, file: !3, line: 4091, column: 6)
!7696 = !DILocation(line: 4092, column: 37, scope: !7695)
!7697 = !DILocation(line: 4092, column: 36, scope: !7695)
!7698 = !DILocation(line: 4092, column: 34, scope: !7695)
!7699 = !DILocation(line: 4092, column: 20, scope: !7695)
!7700 = !DILocation(line: 4092, column: 18, scope: !7695)
!7701 = !DILocation(line: 4093, column: 32, scope: !7695)
!7702 = !DILocation(line: 4093, column: 37, scope: !7695)
!7703 = !DILocation(line: 4093, column: 34, scope: !7695)
!7704 = !DILocation(line: 4093, column: 48, scope: !7695)
!7705 = !DILocation(line: 4094, column: 11, scope: !7695)
!7706 = !DILocation(line: 4094, column: 18, scope: !7695)
!7707 = !DILocation(line: 4094, column: 16, scope: !7695)
!7708 = !DILocation(line: 4093, column: 13, scope: !7695)
!7709 = !DILocation(line: 4093, column: 11, scope: !7695)
!7710 = !DILocation(line: 4096, column: 8, scope: !7695)
!7711 = !DILocation(line: 4097, column: 6, scope: !7695)
!7712 = !DILocation(line: 4099, column: 16, scope: !7687)
!7713 = !DILocation(line: 4101, column: 8, scope: !7714)
!7714 = distinct !DILexicalBlock(scope: !7681, file: !3, line: 4101, column: 8)
!7715 = !DILocation(line: 4101, column: 11, scope: !7714)
!7716 = !DILocation(line: 4101, column: 8, scope: !7681)
!7717 = !DILocalVariable(name: "t1", scope: !7718, file: !3, line: 4103, type: !2301)
!7718 = distinct !DILexicalBlock(scope: !7714, file: !3, line: 4102, column: 6)
!7719 = !DILocation(line: 4103, column: 12, scope: !7718)
!7720 = !DILocalVariable(name: "t2", scope: !7718, file: !3, line: 4103, type: !2301)
!7721 = !DILocation(line: 4103, column: 16, scope: !7718)
!7722 = !DILocalVariable(name: "t3", scope: !7718, file: !3, line: 4103, type: !2301)
!7723 = !DILocation(line: 4103, column: 20, scope: !7718)
!7724 = !DILocalVariable(name: "t4", scope: !7718, file: !3, line: 4103, type: !2301)
!7725 = !DILocation(line: 4103, column: 24, scope: !7718)
!7726 = !DILocation(line: 4105, column: 12, scope: !7727)
!7727 = distinct !DILexicalBlock(scope: !7718, file: !3, line: 4105, column: 12)
!7728 = !DILocation(line: 4105, column: 23, scope: !7727)
!7729 = !DILocation(line: 4105, column: 27, scope: !7727)
!7730 = !DILocation(line: 4105, column: 12, scope: !7718)
!7731 = !DILocation(line: 4106, column: 10, scope: !7727)
!7732 = !DILocation(line: 4109, column: 24, scope: !7718)
!7733 = !DILocation(line: 4109, column: 13, scope: !7718)
!7734 = !DILocation(line: 4109, column: 31, scope: !7718)
!7735 = !DILocation(line: 4109, column: 45, scope: !7718)
!7736 = !DILocation(line: 4109, column: 56, scope: !7718)
!7737 = !DILocation(line: 4110, column: 19, scope: !7718)
!7738 = !DILocation(line: 4110, column: 8, scope: !7718)
!7739 = !DILocation(line: 4110, column: 26, scope: !7718)
!7740 = !DILocation(line: 4110, column: 6, scope: !7718)
!7741 = !DILocation(line: 4111, column: 21, scope: !7718)
!7742 = !DILocation(line: 4111, column: 12, scope: !7718)
!7743 = !DILocation(line: 4111, column: 28, scope: !7718)
!7744 = !DILocation(line: 4111, column: 10, scope: !7718)
!7745 = !DILocation(line: 4111, column: 6, scope: !7718)
!7746 = !DILocation(line: 4109, column: 10, scope: !7718)
!7747 = !DILocation(line: 4112, column: 35, scope: !7718)
!7748 = !DILocation(line: 4112, column: 49, scope: !7718)
!7749 = !DILocation(line: 4112, column: 54, scope: !7718)
!7750 = !DILocation(line: 4114, column: 14, scope: !7718)
!7751 = !DILocation(line: 4114, column: 25, scope: !7718)
!7752 = !DILocation(line: 4114, column: 23, scope: !7718)
!7753 = !DILocation(line: 4112, column: 13, scope: !7718)
!7754 = !DILocation(line: 4112, column: 11, scope: !7718)
!7755 = !DILocation(line: 4115, column: 12, scope: !7756)
!7756 = distinct !DILexicalBlock(scope: !7718, file: !3, line: 4115, column: 12)
!7757 = !DILocation(line: 4115, column: 15, scope: !7756)
!7758 = !DILocation(line: 4115, column: 12, scope: !7718)
!7759 = !DILocation(line: 4116, column: 10, scope: !7756)
!7760 = !DILocation(line: 4117, column: 28, scope: !7718)
!7761 = !DILocation(line: 4117, column: 13, scope: !7718)
!7762 = !DILocation(line: 4117, column: 11, scope: !7718)
!7763 = !DILocation(line: 4121, column: 24, scope: !7718)
!7764 = !DILocation(line: 4121, column: 38, scope: !7718)
!7765 = !DILocation(line: 4122, column: 11, scope: !7718)
!7766 = !DILocation(line: 4120, column: 13, scope: !7718)
!7767 = !DILocation(line: 4120, column: 11, scope: !7718)
!7768 = !DILocation(line: 4124, column: 28, scope: !7718)
!7769 = !DILocation(line: 4124, column: 13, scope: !7718)
!7770 = !DILocation(line: 4124, column: 11, scope: !7718)
!7771 = !DILocation(line: 4128, column: 24, scope: !7718)
!7772 = !DILocation(line: 4128, column: 38, scope: !7718)
!7773 = !DILocation(line: 4129, column: 37, scope: !7718)
!7774 = !DILocation(line: 4129, column: 48, scope: !7718)
!7775 = !DILocation(line: 4129, column: 11, scope: !7718)
!7776 = !DILocation(line: 4130, column: 11, scope: !7718)
!7777 = !DILocation(line: 4127, column: 19, scope: !7718)
!7778 = !DILocation(line: 4127, column: 17, scope: !7718)
!7779 = !DILocation(line: 4131, column: 6, scope: !7718)
!7780 = !DILocalVariable(name: "t1", scope: !7781, file: !3, line: 4134, type: !2301)
!7781 = distinct !DILexicalBlock(scope: !7714, file: !3, line: 4133, column: 6)
!7782 = !DILocation(line: 4134, column: 12, scope: !7781)
!7783 = !DILocalVariable(name: "t2", scope: !7781, file: !3, line: 4134, type: !2301)
!7784 = !DILocation(line: 4134, column: 16, scope: !7781)
!7785 = !DILocation(line: 4136, column: 12, scope: !7786)
!7786 = distinct !DILexicalBlock(scope: !7781, file: !3, line: 4136, column: 12)
!7787 = !DILocation(line: 4136, column: 22, scope: !7786)
!7788 = !DILocation(line: 4137, column: 5, scope: !7786)
!7789 = !DILocation(line: 4137, column: 8, scope: !7786)
!7790 = !DILocation(line: 4137, column: 19, scope: !7786)
!7791 = !DILocation(line: 4136, column: 12, scope: !7781)
!7792 = !DILocation(line: 4138, column: 10, scope: !7786)
!7793 = !DILocation(line: 4141, column: 24, scope: !7781)
!7794 = !DILocation(line: 4141, column: 38, scope: !7781)
!7795 = !DILocation(line: 4142, column: 37, scope: !7781)
!7796 = !DILocation(line: 4142, column: 11, scope: !7781)
!7797 = !DILocation(line: 4140, column: 13, scope: !7781)
!7798 = !DILocation(line: 4140, column: 11, scope: !7781)
!7799 = !DILocation(line: 4145, column: 24, scope: !7781)
!7800 = !DILocation(line: 4145, column: 13, scope: !7781)
!7801 = !DILocation(line: 4145, column: 31, scope: !7781)
!7802 = !DILocation(line: 4145, column: 45, scope: !7781)
!7803 = !DILocation(line: 4146, column: 19, scope: !7781)
!7804 = !DILocation(line: 4146, column: 8, scope: !7781)
!7805 = !DILocation(line: 4146, column: 26, scope: !7781)
!7806 = !DILocation(line: 4146, column: 40, scope: !7781)
!7807 = !DILocation(line: 4146, column: 6, scope: !7781)
!7808 = !DILocation(line: 4145, column: 10, scope: !7781)
!7809 = !DILocation(line: 4147, column: 35, scope: !7781)
!7810 = !DILocation(line: 4147, column: 49, scope: !7781)
!7811 = !DILocation(line: 4147, column: 53, scope: !7781)
!7812 = !DILocation(line: 4149, column: 14, scope: !7781)
!7813 = !DILocation(line: 4149, column: 25, scope: !7781)
!7814 = !DILocation(line: 4149, column: 23, scope: !7781)
!7815 = !DILocation(line: 4147, column: 13, scope: !7781)
!7816 = !DILocation(line: 4147, column: 11, scope: !7781)
!7817 = !DILocation(line: 4150, column: 12, scope: !7818)
!7818 = distinct !DILexicalBlock(scope: !7781, file: !3, line: 4150, column: 12)
!7819 = !DILocation(line: 4150, column: 15, scope: !7818)
!7820 = !DILocation(line: 4150, column: 12, scope: !7781)
!7821 = !DILocation(line: 4151, column: 10, scope: !7818)
!7822 = !DILocation(line: 4153, column: 24, scope: !7781)
!7823 = !DILocation(line: 4153, column: 38, scope: !7781)
!7824 = !DILocation(line: 4154, column: 37, scope: !7781)
!7825 = !DILocation(line: 4154, column: 11, scope: !7781)
!7826 = !DILocation(line: 4155, column: 11, scope: !7781)
!7827 = !DILocation(line: 4152, column: 19, scope: !7781)
!7828 = !DILocation(line: 4152, column: 17, scope: !7781)
!7829 = !DILocation(line: 4158, column: 5, scope: !7666)
!7830 = !DILocation(line: 4160, column: 5, scope: !7661)
!7831 = !DILocation(line: 4162, column: 10, scope: !7612)
!7832 = !DILocation(line: 4162, column: 8, scope: !7612)
!7833 = !DILocation(line: 4163, column: 7, scope: !7834)
!7834 = distinct !DILexicalBlock(scope: !7612, file: !3, line: 4163, column: 7)
!7835 = !DILocation(line: 4163, column: 15, scope: !7834)
!7836 = !DILocation(line: 4163, column: 12, scope: !7834)
!7837 = !DILocation(line: 4164, column: 7, scope: !7834)
!7838 = !DILocation(line: 4164, column: 17, scope: !7834)
!7839 = !DILocation(line: 4164, column: 15, scope: !7834)
!7840 = !DILocation(line: 4164, column: 36, scope: !7834)
!7841 = !DILocation(line: 4165, column: 7, scope: !7834)
!7842 = !DILocation(line: 4165, column: 10, scope: !7834)
!7843 = !DILocation(line: 4165, column: 28, scope: !7834)
!7844 = !DILocation(line: 4165, column: 25, scope: !7834)
!7845 = !DILocation(line: 4163, column: 7, scope: !7612)
!7846 = !DILocation(line: 4166, column: 26, scope: !7834)
!7847 = !DILocation(line: 4168, column: 12, scope: !7834)
!7848 = !DILocation(line: 4166, column: 5, scope: !7834)
!7849 = !DILocation(line: 4169, column: 8, scope: !7612)
!7850 = !DILocalVariable(name: "ml", scope: !7851, file: !3, line: 4172, type: !2375)
!7851 = distinct !DILexicalBlock(scope: !7608, file: !3, line: 4171, column: 8)
!7852 = !DILocation(line: 4172, column: 26, scope: !7851)
!7853 = !DILocalVariable(name: "lgup", scope: !7851, file: !3, line: 4173, type: !2325)
!7854 = !DILocation(line: 4173, column: 7, scope: !7851)
!7855 = !DILocalVariable(name: "post_shift", scope: !7851, file: !3, line: 4173, type: !2325)
!7856 = !DILocation(line: 4173, column: 13, scope: !7851)
!7857 = !DILocalVariable(name: "mlr", scope: !7851, file: !3, line: 4174, type: !2301)
!7858 = !DILocation(line: 4174, column: 7, scope: !7851)
!7859 = !DILocalVariable(name: "d", scope: !7851, file: !3, line: 4175, type: !2299)
!7860 = !DILocation(line: 4175, column: 17, scope: !7851)
!7861 = !DILocation(line: 4175, column: 21, scope: !7851)
!7862 = !DILocalVariable(name: "abs_d", scope: !7851, file: !3, line: 4176, type: !2375)
!7863 = !DILocation(line: 4176, column: 26, scope: !7851)
!7864 = !DILocation(line: 4181, column: 12, scope: !7851)
!7865 = !DILocation(line: 4181, column: 14, scope: !7851)
!7866 = !DILocation(line: 4182, column: 32, scope: !7851)
!7867 = !DILocation(line: 4183, column: 34, scope: !7851)
!7868 = !DILocation(line: 4183, column: 7, scope: !7851)
!7869 = !DILocation(line: 4181, column: 9, scope: !7851)
!7870 = !DILocation(line: 4186, column: 7, scope: !7871)
!7871 = distinct !DILexicalBlock(scope: !7851, file: !3, line: 4186, column: 7)
!7872 = !DILocation(line: 4186, column: 16, scope: !7871)
!7873 = !DILocation(line: 4186, column: 19, scope: !7871)
!7874 = !DILocation(line: 4186, column: 21, scope: !7871)
!7875 = !DILocation(line: 4186, column: 7, scope: !7851)
!7876 = !DILocation(line: 4188, column: 11, scope: !7877)
!7877 = distinct !DILexicalBlock(scope: !7871, file: !3, line: 4187, column: 5)
!7878 = !DILocation(line: 4188, column: 9, scope: !7877)
!7879 = !DILocation(line: 4189, column: 27, scope: !7877)
!7880 = !DILocation(line: 4189, column: 34, scope: !7877)
!7881 = !DILocation(line: 4189, column: 13, scope: !7877)
!7882 = !DILocation(line: 4189, column: 11, scope: !7877)
!7883 = !DILocation(line: 4190, column: 5, scope: !7877)
!7884 = !DILocation(line: 4192, column: 7, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7851, file: !3, line: 4192, column: 7)
!7886 = !DILocation(line: 4192, column: 9, scope: !7885)
!7887 = !DILocation(line: 4192, column: 7, scope: !7851)
!7888 = !DILocation(line: 4193, column: 16, scope: !7885)
!7889 = !DILocation(line: 4193, column: 14, scope: !7885)
!7890 = !DILocation(line: 4193, column: 5, scope: !7885)
!7891 = !DILocation(line: 4194, column: 12, scope: !7892)
!7892 = distinct !DILexicalBlock(scope: !7885, file: !3, line: 4194, column: 12)
!7893 = !DILocation(line: 4194, column: 14, scope: !7892)
!7894 = !DILocation(line: 4194, column: 12, scope: !7885)
!7895 = !DILocation(line: 4195, column: 29, scope: !7892)
!7896 = !DILocation(line: 4195, column: 54, scope: !7892)
!7897 = !DILocation(line: 4196, column: 8, scope: !7892)
!7898 = !DILocation(line: 4195, column: 16, scope: !7892)
!7899 = !DILocation(line: 4195, column: 14, scope: !7892)
!7900 = !DILocation(line: 4195, column: 5, scope: !7892)
!7901 = !DILocation(line: 4197, column: 38, scope: !7902)
!7902 = distinct !DILexicalBlock(scope: !7892, file: !3, line: 4197, column: 12)
!7903 = !DILocation(line: 4197, column: 35, scope: !7902)
!7904 = !DILocation(line: 4198, column: 5, scope: !7902)
!7905 = !DILocation(line: 4198, column: 8, scope: !7902)
!7906 = !DILocation(line: 4198, column: 48, scope: !7902)
!7907 = !DILocation(line: 4198, column: 53, scope: !7902)
!7908 = !DILocation(line: 4198, column: 44, scope: !7902)
!7909 = !DILocation(line: 4198, column: 14, scope: !7902)
!7910 = !DILocation(line: 4197, column: 12, scope: !7892)
!7911 = !DILocation(line: 4201, column: 35, scope: !7912)
!7912 = distinct !DILexicalBlock(scope: !7902, file: !3, line: 4199, column: 5)
!7913 = !DILocation(line: 4201, column: 50, scope: !7912)
!7914 = !DILocation(line: 4201, column: 55, scope: !7912)
!7915 = !DILocation(line: 4202, column: 7, scope: !7912)
!7916 = !DILocation(line: 4201, column: 18, scope: !7912)
!7917 = !DILocation(line: 4201, column: 16, scope: !7912)
!7918 = !DILocation(line: 4203, column: 11, scope: !7919)
!7919 = distinct !DILexicalBlock(scope: !7912, file: !3, line: 4203, column: 11)
!7920 = !DILocation(line: 4203, column: 20, scope: !7919)
!7921 = !DILocation(line: 4203, column: 11, scope: !7912)
!7922 = !DILocation(line: 4204, column: 9, scope: !7919)
!7923 = !DILocation(line: 4205, column: 5, scope: !7912)
!7924 = !DILocation(line: 4206, column: 12, scope: !7925)
!7925 = distinct !DILexicalBlock(scope: !7902, file: !3, line: 4206, column: 12)
!7926 = !DILocation(line: 4207, column: 5, scope: !7925)
!7927 = !DILocation(line: 4207, column: 9, scope: !7925)
!7928 = !DILocation(line: 4211, column: 5, scope: !7925)
!7929 = !DILocation(line: 4207, column: 36, scope: !7925)
!7930 = !DILocation(line: 4207, column: 20, scope: !7925)
!7931 = !DILocation(line: 4207, column: 43, scope: !7925)
!7932 = !DILocation(line: 4208, column: 29, scope: !7925)
!7933 = !DILocation(line: 4208, column: 13, scope: !7925)
!7934 = !DILocation(line: 4208, column: 36, scope: !7925)
!7935 = !DILocation(line: 4211, column: 10, scope: !7925)
!7936 = !DILocation(line: 4213, column: 27, scope: !7925)
!7937 = !DILocation(line: 4214, column: 10, scope: !7925)
!7938 = !DILocation(line: 4215, column: 9, scope: !7925)
!7939 = !DILocation(line: 4215, column: 13, scope: !7925)
!7940 = !DILocation(line: 4217, column: 8, scope: !7925)
!7941 = !DILocation(line: 4217, column: 18, scope: !7925)
!7942 = !DILocation(line: 4206, column: 12, scope: !7902)
!7943 = !DILocation(line: 4219, column: 12, scope: !7944)
!7944 = distinct !DILexicalBlock(scope: !7925, file: !3, line: 4219, column: 12)
!7945 = !DILocation(line: 4219, column: 12, scope: !7925)
!7946 = !DILocation(line: 4221, column: 11, scope: !7947)
!7947 = distinct !DILexicalBlock(scope: !7948, file: !3, line: 4221, column: 11)
!7948 = distinct !DILexicalBlock(scope: !7944, file: !3, line: 4220, column: 5)
!7949 = !DILocation(line: 4221, column: 11, scope: !7948)
!7950 = !DILocation(line: 4223, column: 34, scope: !7951)
!7951 = distinct !DILexicalBlock(scope: !7947, file: !3, line: 4222, column: 9)
!7952 = !DILocation(line: 4223, column: 48, scope: !7951)
!7953 = !DILocation(line: 4223, column: 53, scope: !7951)
!7954 = !DILocation(line: 4223, column: 16, scope: !7951)
!7955 = !DILocation(line: 4223, column: 14, scope: !7951)
!7956 = !DILocation(line: 4224, column: 8, scope: !7957)
!7957 = distinct !DILexicalBlock(scope: !7951, file: !3, line: 4224, column: 8)
!7958 = !DILocation(line: 4224, column: 8, scope: !7951)
!7959 = !DILocation(line: 4225, column: 13, scope: !7957)
!7960 = !DILocation(line: 4225, column: 26, scope: !7957)
!7961 = !DILocation(line: 4225, column: 32, scope: !7957)
!7962 = !DILocation(line: 4225, column: 6, scope: !7957)
!7963 = !DILocation(line: 4226, column: 9, scope: !7951)
!7964 = !DILocation(line: 4228, column: 27, scope: !7965)
!7965 = distinct !DILexicalBlock(scope: !7948, file: !3, line: 4228, column: 11)
!7966 = !DILocation(line: 4228, column: 11, scope: !7965)
!7967 = !DILocation(line: 4228, column: 34, scope: !7965)
!7968 = !DILocation(line: 4229, column: 4, scope: !7965)
!7969 = !DILocation(line: 4229, column: 9, scope: !7965)
!7970 = !DILocation(line: 4229, column: 51, scope: !7965)
!7971 = !DILocation(line: 4230, column: 9, scope: !7965)
!7972 = !DILocation(line: 4231, column: 8, scope: !7965)
!7973 = !DILocation(line: 4231, column: 12, scope: !7965)
!7974 = !DILocation(line: 4231, column: 57, scope: !7965)
!7975 = !DILocation(line: 4232, column: 5, scope: !7965)
!7976 = !DILocation(line: 4228, column: 11, scope: !7948)
!7977 = !DILocation(line: 4234, column: 7, scope: !7965)
!7978 = !DILocation(line: 4234, column: 21, scope: !7965)
!7979 = !DILocation(line: 4235, column: 21, scope: !7965)
!7980 = !DILocation(line: 4236, column: 14, scope: !7965)
!7981 = !DILocation(line: 4235, column: 7, scope: !7965)
!7982 = !DILocation(line: 4233, column: 20, scope: !7965)
!7983 = !DILocation(line: 4233, column: 18, scope: !7965)
!7984 = !DILocation(line: 4233, column: 9, scope: !7965)
!7985 = !DILocation(line: 4239, column: 38, scope: !7965)
!7986 = !DILocation(line: 4239, column: 52, scope: !7965)
!7987 = !DILocation(line: 4239, column: 57, scope: !7965)
!7988 = !DILocation(line: 4239, column: 20, scope: !7965)
!7989 = !DILocation(line: 4239, column: 18, scope: !7965)
!7990 = !DILocation(line: 4243, column: 11, scope: !7991)
!7991 = distinct !DILexicalBlock(scope: !7948, file: !3, line: 4243, column: 11)
!7992 = !DILocation(line: 4243, column: 13, scope: !7991)
!7993 = !DILocation(line: 4243, column: 11, scope: !7948)
!7994 = !DILocation(line: 4245, column: 11, scope: !7995)
!7995 = distinct !DILexicalBlock(scope: !7991, file: !3, line: 4244, column: 9)
!7996 = !DILocation(line: 4245, column: 9, scope: !7995)
!7997 = !DILocation(line: 4246, column: 8, scope: !7998)
!7998 = distinct !DILexicalBlock(scope: !7995, file: !3, line: 4246, column: 8)
!7999 = !DILocation(line: 4246, column: 16, scope: !7998)
!8000 = !DILocation(line: 4246, column: 13, scope: !7998)
!8001 = !DILocation(line: 4247, column: 8, scope: !7998)
!8002 = !DILocation(line: 4247, column: 18, scope: !7998)
!8003 = !DILocation(line: 4247, column: 16, scope: !7998)
!8004 = !DILocation(line: 4247, column: 37, scope: !7998)
!8005 = !DILocation(line: 4248, column: 8, scope: !7998)
!8006 = !DILocation(line: 4248, column: 11, scope: !7998)
!8007 = !DILocation(line: 4248, column: 29, scope: !7998)
!8008 = !DILocation(line: 4248, column: 26, scope: !7998)
!8009 = !DILocation(line: 4249, column: 8, scope: !7998)
!8010 = !DILocation(line: 4249, column: 11, scope: !7998)
!8011 = !DILocation(line: 4249, column: 17, scope: !7998)
!8012 = !DILocation(line: 4246, column: 8, scope: !7995)
!8013 = !DILocation(line: 4251, column: 27, scope: !7998)
!8014 = !DILocation(line: 4253, column: 13, scope: !7998)
!8015 = !DILocation(line: 4251, column: 6, scope: !7998)
!8016 = !DILocation(line: 4260, column: 28, scope: !7995)
!8017 = !DILocation(line: 4261, column: 7, scope: !7995)
!8018 = !DILocation(line: 4261, column: 17, scope: !7995)
!8019 = !DILocation(line: 4260, column: 15, scope: !7995)
!8020 = !DILocation(line: 4260, column: 13, scope: !7995)
!8021 = !DILocation(line: 4262, column: 9, scope: !7995)
!8022 = !DILocation(line: 4263, column: 5, scope: !7948)
!8023 = !DILocation(line: 4264, column: 12, scope: !8024)
!8024 = distinct !DILexicalBlock(scope: !7944, file: !3, line: 4264, column: 12)
!8025 = !DILocation(line: 4264, column: 17, scope: !8024)
!8026 = !DILocation(line: 4264, column: 12, scope: !7944)
!8027 = !DILocation(line: 4266, column: 26, scope: !8028)
!8028 = distinct !DILexicalBlock(scope: !8024, file: !3, line: 4265, column: 5)
!8029 = !DILocation(line: 4266, column: 33, scope: !8028)
!8030 = !DILocation(line: 4266, column: 39, scope: !8028)
!8031 = !DILocation(line: 4266, column: 44, scope: !8028)
!8032 = !DILocation(line: 4266, column: 7, scope: !8028)
!8033 = !DILocation(line: 4268, column: 37, scope: !8028)
!8034 = !DILocation(line: 4268, column: 10, scope: !8028)
!8035 = !DILocation(line: 4269, column: 11, scope: !8036)
!8036 = distinct !DILexicalBlock(scope: !8028, file: !3, line: 4269, column: 11)
!8037 = !DILocation(line: 4269, column: 47, scope: !8036)
!8038 = !DILocation(line: 4269, column: 52, scope: !8036)
!8039 = !DILocation(line: 4269, column: 43, scope: !8036)
!8040 = !DILocation(line: 4269, column: 14, scope: !8036)
!8041 = !DILocation(line: 4269, column: 11, scope: !8028)
!8042 = !DILocalVariable(name: "t1", scope: !8043, file: !3, line: 4271, type: !2301)
!8043 = distinct !DILexicalBlock(scope: !8036, file: !3, line: 4270, column: 9)
!8044 = !DILocation(line: 4271, column: 8, scope: !8043)
!8045 = !DILocalVariable(name: "t2", scope: !8043, file: !3, line: 4271, type: !2301)
!8046 = !DILocation(line: 4271, column: 12, scope: !8043)
!8047 = !DILocalVariable(name: "t3", scope: !8043, file: !3, line: 4271, type: !2301)
!8048 = !DILocation(line: 4271, column: 16, scope: !8043)
!8049 = !DILocation(line: 4273, column: 8, scope: !8050)
!8050 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 4273, column: 8)
!8051 = !DILocation(line: 4273, column: 19, scope: !8050)
!8052 = !DILocation(line: 4274, column: 8, scope: !8050)
!8053 = !DILocation(line: 4274, column: 11, scope: !8050)
!8054 = !DILocation(line: 4274, column: 16, scope: !8050)
!8055 = !DILocation(line: 4274, column: 20, scope: !8050)
!8056 = !DILocation(line: 4273, column: 8, scope: !8043)
!8057 = !DILocation(line: 4275, column: 6, scope: !8050)
!8058 = !DILocation(line: 4277, column: 29, scope: !8043)
!8059 = !DILocation(line: 4277, column: 18, scope: !8043)
!8060 = !DILocation(line: 4277, column: 36, scope: !8043)
!8061 = !DILocation(line: 4277, column: 50, scope: !8043)
!8062 = !DILocation(line: 4278, column: 24, scope: !8043)
!8063 = !DILocation(line: 4278, column: 13, scope: !8043)
!8064 = !DILocation(line: 4278, column: 31, scope: !8043)
!8065 = !DILocation(line: 4278, column: 45, scope: !8043)
!8066 = !DILocation(line: 4278, column: 50, scope: !8043)
!8067 = !DILocation(line: 4278, column: 11, scope: !8043)
!8068 = !DILocation(line: 4279, column: 22, scope: !8043)
!8069 = !DILocation(line: 4279, column: 13, scope: !8043)
!8070 = !DILocation(line: 4279, column: 29, scope: !8043)
!8071 = !DILocation(line: 4279, column: 11, scope: !8043)
!8072 = !DILocation(line: 4277, column: 15, scope: !8043)
!8073 = !DILocation(line: 4280, column: 31, scope: !8043)
!8074 = !DILocation(line: 4280, column: 45, scope: !8043)
!8075 = !DILocation(line: 4280, column: 50, scope: !8043)
!8076 = !DILocation(line: 4282, column: 10, scope: !8043)
!8077 = !DILocation(line: 4282, column: 21, scope: !8043)
!8078 = !DILocation(line: 4282, column: 19, scope: !8043)
!8079 = !DILocation(line: 4280, column: 9, scope: !8043)
!8080 = !DILocation(line: 4280, column: 7, scope: !8043)
!8081 = !DILocation(line: 4283, column: 8, scope: !8082)
!8082 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 4283, column: 8)
!8083 = !DILocation(line: 4283, column: 11, scope: !8082)
!8084 = !DILocation(line: 4283, column: 8, scope: !8043)
!8085 = !DILocation(line: 4284, column: 6, scope: !8082)
!8086 = !DILocation(line: 4286, column: 20, scope: !8043)
!8087 = !DILocation(line: 4286, column: 34, scope: !8043)
!8088 = !DILocation(line: 4287, column: 33, scope: !8043)
!8089 = !DILocation(line: 4287, column: 7, scope: !8043)
!8090 = !DILocation(line: 4285, column: 9, scope: !8043)
!8091 = !DILocation(line: 4285, column: 7, scope: !8043)
!8092 = !DILocation(line: 4290, column: 20, scope: !8043)
!8093 = !DILocation(line: 4290, column: 34, scope: !8043)
!8094 = !DILocation(line: 4291, column: 33, scope: !8043)
!8095 = !DILocation(line: 4291, column: 38, scope: !8043)
!8096 = !DILocation(line: 4291, column: 7, scope: !8043)
!8097 = !DILocation(line: 4289, column: 9, scope: !8043)
!8098 = !DILocation(line: 4289, column: 7, scope: !8043)
!8099 = !DILocation(line: 4293, column: 8, scope: !8100)
!8100 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 4293, column: 8)
!8101 = !DILocation(line: 4293, column: 10, scope: !8100)
!8102 = !DILocation(line: 4293, column: 8, scope: !8043)
!8103 = !DILocation(line: 4295, column: 25, scope: !8100)
!8104 = !DILocation(line: 4297, column: 11, scope: !8100)
!8105 = !DILocation(line: 4295, column: 10, scope: !8100)
!8106 = !DILocation(line: 4295, column: 8, scope: !8100)
!8107 = !DILocation(line: 4294, column: 6, scope: !8100)
!8108 = !DILocation(line: 4300, column: 25, scope: !8100)
!8109 = !DILocation(line: 4302, column: 11, scope: !8100)
!8110 = !DILocation(line: 4300, column: 10, scope: !8100)
!8111 = !DILocation(line: 4300, column: 8, scope: !8100)
!8112 = !DILocation(line: 4303, column: 9, scope: !8043)
!8113 = !DILocalVariable(name: "t1", scope: !8114, file: !3, line: 4306, type: !2301)
!8114 = distinct !DILexicalBlock(scope: !8036, file: !3, line: 4305, column: 9)
!8115 = !DILocation(line: 4306, column: 8, scope: !8114)
!8116 = !DILocalVariable(name: "t2", scope: !8114, file: !3, line: 4306, type: !2301)
!8117 = !DILocation(line: 4306, column: 12, scope: !8114)
!8118 = !DILocalVariable(name: "t3", scope: !8114, file: !3, line: 4306, type: !2301)
!8119 = !DILocation(line: 4306, column: 16, scope: !8114)
!8120 = !DILocalVariable(name: "t4", scope: !8114, file: !3, line: 4306, type: !2301)
!8121 = !DILocation(line: 4306, column: 20, scope: !8114)
!8122 = !DILocation(line: 4308, column: 8, scope: !8123)
!8123 = distinct !DILexicalBlock(scope: !8114, file: !3, line: 4308, column: 8)
!8124 = !DILocation(line: 4308, column: 19, scope: !8123)
!8125 = !DILocation(line: 4309, column: 8, scope: !8123)
!8126 = !DILocation(line: 4309, column: 11, scope: !8123)
!8127 = !DILocation(line: 4309, column: 16, scope: !8123)
!8128 = !DILocation(line: 4309, column: 20, scope: !8123)
!8129 = !DILocation(line: 4308, column: 8, scope: !8114)
!8130 = !DILocation(line: 4310, column: 6, scope: !8123)
!8131 = !DILocation(line: 4312, column: 44, scope: !8114)
!8132 = !DILocation(line: 4312, column: 49, scope: !8114)
!8133 = !DILocation(line: 4312, column: 40, scope: !8114)
!8134 = !DILocation(line: 4312, column: 7, scope: !8114)
!8135 = !DILocation(line: 4313, column: 24, scope: !8114)
!8136 = !DILocation(line: 4313, column: 28, scope: !8114)
!8137 = !DILocation(line: 4313, column: 10, scope: !8114)
!8138 = !DILocation(line: 4313, column: 8, scope: !8114)
!8139 = !DILocation(line: 4314, column: 29, scope: !8114)
!8140 = !DILocation(line: 4314, column: 18, scope: !8114)
!8141 = !DILocation(line: 4314, column: 36, scope: !8114)
!8142 = !DILocation(line: 4314, column: 50, scope: !8114)
!8143 = !DILocation(line: 4315, column: 24, scope: !8114)
!8144 = !DILocation(line: 4315, column: 13, scope: !8114)
!8145 = !DILocation(line: 4315, column: 31, scope: !8114)
!8146 = !DILocation(line: 4315, column: 45, scope: !8114)
!8147 = !DILocation(line: 4315, column: 50, scope: !8114)
!8148 = !DILocation(line: 4315, column: 11, scope: !8114)
!8149 = !DILocation(line: 4316, column: 26, scope: !8114)
!8150 = !DILocation(line: 4316, column: 17, scope: !8114)
!8151 = !DILocation(line: 4316, column: 33, scope: !8114)
!8152 = !DILocation(line: 4316, column: 15, scope: !8114)
!8153 = !DILocation(line: 4316, column: 11, scope: !8114)
!8154 = !DILocation(line: 4314, column: 15, scope: !8114)
!8155 = !DILocation(line: 4317, column: 31, scope: !8114)
!8156 = !DILocation(line: 4317, column: 45, scope: !8114)
!8157 = !DILocation(line: 4317, column: 50, scope: !8114)
!8158 = !DILocation(line: 4319, column: 10, scope: !8114)
!8159 = !DILocation(line: 4319, column: 21, scope: !8114)
!8160 = !DILocation(line: 4319, column: 19, scope: !8114)
!8161 = !DILocation(line: 4317, column: 9, scope: !8114)
!8162 = !DILocation(line: 4317, column: 7, scope: !8114)
!8163 = !DILocation(line: 4320, column: 8, scope: !8164)
!8164 = distinct !DILexicalBlock(scope: !8114, file: !3, line: 4320, column: 8)
!8165 = !DILocation(line: 4320, column: 11, scope: !8164)
!8166 = !DILocation(line: 4320, column: 8, scope: !8114)
!8167 = !DILocation(line: 4321, column: 6, scope: !8164)
!8168 = !DILocation(line: 4322, column: 24, scope: !8114)
!8169 = !DILocation(line: 4322, column: 9, scope: !8114)
!8170 = !DILocation(line: 4322, column: 7, scope: !8114)
!8171 = !DILocation(line: 4326, column: 20, scope: !8114)
!8172 = !DILocation(line: 4326, column: 34, scope: !8114)
!8173 = !DILocation(line: 4327, column: 33, scope: !8114)
!8174 = !DILocation(line: 4327, column: 7, scope: !8114)
!8175 = !DILocation(line: 4325, column: 9, scope: !8114)
!8176 = !DILocation(line: 4325, column: 7, scope: !8114)
!8177 = !DILocation(line: 4330, column: 20, scope: !8114)
!8178 = !DILocation(line: 4330, column: 34, scope: !8114)
!8179 = !DILocation(line: 4331, column: 33, scope: !8114)
!8180 = !DILocation(line: 4331, column: 38, scope: !8114)
!8181 = !DILocation(line: 4331, column: 7, scope: !8114)
!8182 = !DILocation(line: 4329, column: 9, scope: !8114)
!8183 = !DILocation(line: 4329, column: 7, scope: !8114)
!8184 = !DILocation(line: 4333, column: 8, scope: !8185)
!8185 = distinct !DILexicalBlock(scope: !8114, file: !3, line: 4333, column: 8)
!8186 = !DILocation(line: 4333, column: 10, scope: !8185)
!8187 = !DILocation(line: 4333, column: 8, scope: !8114)
!8188 = !DILocation(line: 4335, column: 25, scope: !8185)
!8189 = !DILocation(line: 4337, column: 11, scope: !8185)
!8190 = !DILocation(line: 4335, column: 10, scope: !8185)
!8191 = !DILocation(line: 4335, column: 8, scope: !8185)
!8192 = !DILocation(line: 4334, column: 6, scope: !8185)
!8193 = !DILocation(line: 4340, column: 25, scope: !8185)
!8194 = !DILocation(line: 4342, column: 11, scope: !8185)
!8195 = !DILocation(line: 4340, column: 10, scope: !8185)
!8196 = !DILocation(line: 4340, column: 8, scope: !8185)
!8197 = !DILocation(line: 4344, column: 5, scope: !8028)
!8198 = !DILocation(line: 4346, column: 5, scope: !8024)
!8199 = !DILocation(line: 4348, column: 10, scope: !7851)
!8200 = !DILocation(line: 4348, column: 8, scope: !7851)
!8201 = !DILocation(line: 4349, column: 7, scope: !8202)
!8202 = distinct !DILexicalBlock(scope: !7851, file: !3, line: 4349, column: 7)
!8203 = !DILocation(line: 4349, column: 15, scope: !8202)
!8204 = !DILocation(line: 4349, column: 12, scope: !8202)
!8205 = !DILocation(line: 4350, column: 7, scope: !8202)
!8206 = !DILocation(line: 4350, column: 17, scope: !8202)
!8207 = !DILocation(line: 4350, column: 15, scope: !8202)
!8208 = !DILocation(line: 4350, column: 36, scope: !8202)
!8209 = !DILocation(line: 4351, column: 7, scope: !8202)
!8210 = !DILocation(line: 4351, column: 10, scope: !8202)
!8211 = !DILocation(line: 4351, column: 28, scope: !8202)
!8212 = !DILocation(line: 4351, column: 25, scope: !8202)
!8213 = !DILocation(line: 4349, column: 7, scope: !7851)
!8214 = !DILocation(line: 4352, column: 26, scope: !8202)
!8215 = !DILocation(line: 4354, column: 12, scope: !8202)
!8216 = !DILocation(line: 4352, column: 5, scope: !8202)
!8217 = !DILocation(line: 4356, column: 6, scope: !7609)
!8218 = !DILabel(scope: !7605, name: "fail1", file: !3, line: 4358)
!8219 = !DILocation(line: 4358, column: 7, scope: !7605)
!8220 = !DILocation(line: 4359, column: 22, scope: !7605)
!8221 = !DILocation(line: 4359, column: 2, scope: !7605)
!8222 = !DILocation(line: 4360, column: 2, scope: !7605)
!8223 = !DILocation(line: 4365, column: 6, scope: !8224)
!8224 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 4365, column: 6)
!8225 = !DILocation(line: 4365, column: 22, scope: !8224)
!8226 = !DILocation(line: 4365, column: 51, scope: !8224)
!8227 = !DILocation(line: 4365, column: 48, scope: !8224)
!8228 = !DILocation(line: 4365, column: 6, scope: !7605)
!8229 = !DILocalVariable(name: "mh", scope: !8230, file: !3, line: 4367, type: !2375)
!8230 = distinct !DILexicalBlock(scope: !8224, file: !3, line: 4366, column: 4)
!8231 = !DILocation(line: 4367, column: 29, scope: !8230)
!8232 = !DILocalVariable(name: "pre_shift", scope: !8230, file: !3, line: 4368, type: !2325)
!8233 = !DILocation(line: 4368, column: 10, scope: !8230)
!8234 = !DILocalVariable(name: "lgup", scope: !8230, file: !3, line: 4368, type: !2325)
!8235 = !DILocation(line: 4368, column: 21, scope: !8230)
!8236 = !DILocalVariable(name: "post_shift", scope: !8230, file: !3, line: 4368, type: !2325)
!8237 = !DILocation(line: 4368, column: 27, scope: !8230)
!8238 = !DILocalVariable(name: "d", scope: !8230, file: !3, line: 4369, type: !2299)
!8239 = !DILocation(line: 4369, column: 20, scope: !8230)
!8240 = !DILocation(line: 4369, column: 24, scope: !8230)
!8241 = !DILocalVariable(name: "ml", scope: !8230, file: !3, line: 4370, type: !2301)
!8242 = !DILocation(line: 4370, column: 10, scope: !8230)
!8243 = !DILocation(line: 4372, column: 10, scope: !8244)
!8244 = distinct !DILexicalBlock(scope: !8230, file: !3, line: 4372, column: 10)
!8245 = !DILocation(line: 4372, column: 12, scope: !8244)
!8246 = !DILocation(line: 4372, column: 10, scope: !8230)
!8247 = !DILocation(line: 4376, column: 7, scope: !8248)
!8248 = distinct !DILexicalBlock(scope: !8249, file: !3, line: 4376, column: 7)
!8249 = distinct !DILexicalBlock(scope: !8244, file: !3, line: 4373, column: 8)
!8250 = !DILocation(line: 4376, column: 7, scope: !8249)
!8251 = !DILocation(line: 4378, column: 31, scope: !8252)
!8252 = distinct !DILexicalBlock(scope: !8248, file: !3, line: 4377, column: 5)
!8253 = !DILocation(line: 4378, column: 19, scope: !8252)
!8254 = !DILocation(line: 4378, column: 17, scope: !8252)
!8255 = !DILocation(line: 4379, column: 11, scope: !8256)
!8256 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 4379, column: 11)
!8257 = !DILocation(line: 4379, column: 11, scope: !8252)
!8258 = !DILocation(line: 4381, column: 30, scope: !8259)
!8259 = distinct !DILexicalBlock(scope: !8256, file: !3, line: 4380, column: 9)
!8260 = !DILocation(line: 4381, column: 55, scope: !8259)
!8261 = !DILocation(line: 4382, column: 9, scope: !8259)
!8262 = !DILocation(line: 4383, column: 9, scope: !8259)
!8263 = !DILocation(line: 4381, column: 16, scope: !8259)
!8264 = !DILocation(line: 4381, column: 14, scope: !8259)
!8265 = !DILocation(line: 4384, column: 8, scope: !8266)
!8266 = distinct !DILexicalBlock(scope: !8259, file: !3, line: 4384, column: 8)
!8267 = !DILocation(line: 4384, column: 8, scope: !8259)
!8268 = !DILocation(line: 4385, column: 13, scope: !8266)
!8269 = !DILocation(line: 4385, column: 26, scope: !8266)
!8270 = !DILocation(line: 4385, column: 32, scope: !8266)
!8271 = !DILocation(line: 4385, column: 6, scope: !8266)
!8272 = !DILocation(line: 4386, column: 9, scope: !8259)
!8273 = !DILocation(line: 4388, column: 23, scope: !8252)
!8274 = !DILocation(line: 4388, column: 37, scope: !8252)
!8275 = !DILocation(line: 4389, column: 36, scope: !8252)
!8276 = !DILocation(line: 4389, column: 10, scope: !8252)
!8277 = !DILocation(line: 4390, column: 10, scope: !8252)
!8278 = !DILocation(line: 4387, column: 18, scope: !8252)
!8279 = !DILocation(line: 4387, column: 16, scope: !8252)
!8280 = !DILocation(line: 4391, column: 5, scope: !8252)
!8281 = !DILocalVariable(name: "t1", scope: !8282, file: !3, line: 4394, type: !2301)
!8282 = distinct !DILexicalBlock(scope: !8248, file: !3, line: 4393, column: 5)
!8283 = !DILocation(line: 4394, column: 11, scope: !8282)
!8284 = !DILocalVariable(name: "t2", scope: !8282, file: !3, line: 4394, type: !2301)
!8285 = !DILocation(line: 4394, column: 15, scope: !8282)
!8286 = !DILocalVariable(name: "t3", scope: !8282, file: !3, line: 4394, type: !2301)
!8287 = !DILocation(line: 4394, column: 19, scope: !8282)
!8288 = !DILocalVariable(name: "t4", scope: !8282, file: !3, line: 4394, type: !2301)
!8289 = !DILocation(line: 4394, column: 23, scope: !8282)
!8290 = !DILocation(line: 4396, column: 31, scope: !8282)
!8291 = !DILocation(line: 4396, column: 34, scope: !8282)
!8292 = !DILocation(line: 4396, column: 40, scope: !8282)
!8293 = !DILocation(line: 4396, column: 45, scope: !8282)
!8294 = !DILocation(line: 4396, column: 12, scope: !8282)
!8295 = !DILocation(line: 4396, column: 10, scope: !8282)
!8296 = !DILocation(line: 4398, column: 7, scope: !8282)
!8297 = !DILocation(line: 4400, column: 11, scope: !8298)
!8298 = distinct !DILexicalBlock(scope: !8282, file: !3, line: 4400, column: 11)
!8299 = !DILocation(line: 4400, column: 22, scope: !8298)
!8300 = !DILocation(line: 4401, column: 4, scope: !8298)
!8301 = !DILocation(line: 4401, column: 7, scope: !8298)
!8302 = !DILocation(line: 4401, column: 12, scope: !8298)
!8303 = !DILocation(line: 4401, column: 16, scope: !8298)
!8304 = !DILocation(line: 4400, column: 11, scope: !8282)
!8305 = !DILocation(line: 4404, column: 20, scope: !8306)
!8306 = distinct !DILexicalBlock(scope: !8298, file: !3, line: 4402, column: 9)
!8307 = !DILocation(line: 4404, column: 34, scope: !8306)
!8308 = !DILocation(line: 4405, column: 33, scope: !8306)
!8309 = !DILocation(line: 4405, column: 38, scope: !8306)
!8310 = !DILocation(line: 4405, column: 7, scope: !8306)
!8311 = !DILocation(line: 4403, column: 9, scope: !8306)
!8312 = !DILocation(line: 4403, column: 7, scope: !8306)
!8313 = !DILocation(line: 4407, column: 23, scope: !8306)
!8314 = !DILocation(line: 4407, column: 48, scope: !8306)
!8315 = !DILocation(line: 4407, column: 53, scope: !8306)
!8316 = !DILocation(line: 4407, column: 9, scope: !8306)
!8317 = !DILocation(line: 4407, column: 7, scope: !8306)
!8318 = !DILocation(line: 4409, column: 29, scope: !8306)
!8319 = !DILocation(line: 4409, column: 18, scope: !8306)
!8320 = !DILocation(line: 4409, column: 36, scope: !8306)
!8321 = !DILocation(line: 4409, column: 50, scope: !8306)
!8322 = !DILocation(line: 4410, column: 24, scope: !8306)
!8323 = !DILocation(line: 4410, column: 13, scope: !8306)
!8324 = !DILocation(line: 4410, column: 31, scope: !8306)
!8325 = !DILocation(line: 4410, column: 45, scope: !8306)
!8326 = !DILocation(line: 4410, column: 50, scope: !8306)
!8327 = !DILocation(line: 4410, column: 11, scope: !8306)
!8328 = !DILocation(line: 4411, column: 26, scope: !8306)
!8329 = !DILocation(line: 4411, column: 17, scope: !8306)
!8330 = !DILocation(line: 4411, column: 33, scope: !8306)
!8331 = !DILocation(line: 4411, column: 15, scope: !8306)
!8332 = !DILocation(line: 4411, column: 11, scope: !8306)
!8333 = !DILocation(line: 4409, column: 15, scope: !8306)
!8334 = !DILocation(line: 4412, column: 31, scope: !8306)
!8335 = !DILocation(line: 4412, column: 45, scope: !8306)
!8336 = !DILocation(line: 4412, column: 49, scope: !8306)
!8337 = !DILocation(line: 4414, column: 10, scope: !8306)
!8338 = !DILocation(line: 4414, column: 21, scope: !8306)
!8339 = !DILocation(line: 4414, column: 19, scope: !8306)
!8340 = !DILocation(line: 4412, column: 9, scope: !8306)
!8341 = !DILocation(line: 4412, column: 7, scope: !8306)
!8342 = !DILocation(line: 4415, column: 8, scope: !8343)
!8343 = distinct !DILexicalBlock(scope: !8306, file: !3, line: 4415, column: 8)
!8344 = !DILocation(line: 4415, column: 11, scope: !8343)
!8345 = !DILocation(line: 4415, column: 8, scope: !8306)
!8346 = !DILocation(line: 4418, column: 24, scope: !8347)
!8347 = distinct !DILexicalBlock(scope: !8343, file: !3, line: 4416, column: 6)
!8348 = !DILocation(line: 4418, column: 38, scope: !8347)
!8349 = !DILocation(line: 4419, column: 37, scope: !8347)
!8350 = !DILocation(line: 4419, column: 11, scope: !8347)
!8351 = !DILocation(line: 4417, column: 13, scope: !8347)
!8352 = !DILocation(line: 4417, column: 11, scope: !8347)
!8353 = !DILocation(line: 4421, column: 33, scope: !8347)
!8354 = !DILocation(line: 4422, column: 12, scope: !8347)
!8355 = !DILocation(line: 4422, column: 16, scope: !8347)
!8356 = !DILocation(line: 4422, column: 20, scope: !8347)
!8357 = !DILocation(line: 4421, column: 19, scope: !8347)
!8358 = !DILocation(line: 4421, column: 17, scope: !8347)
!8359 = !DILocation(line: 4424, column: 6, scope: !8347)
!8360 = !DILocation(line: 4425, column: 9, scope: !8306)
!8361 = !DILocation(line: 4427, column: 8, scope: !8249)
!8362 = !DILocalVariable(name: "nsign", scope: !8363, file: !3, line: 4430, type: !2301)
!8363 = distinct !DILexicalBlock(scope: !8244, file: !3, line: 4429, column: 8)
!8364 = !DILocation(line: 4430, column: 7, scope: !8363)
!8365 = !DILocalVariable(name: "t1", scope: !8363, file: !3, line: 4430, type: !2301)
!8366 = !DILocation(line: 4430, column: 14, scope: !8363)
!8367 = !DILocalVariable(name: "t2", scope: !8363, file: !3, line: 4430, type: !2301)
!8368 = !DILocation(line: 4430, column: 18, scope: !8363)
!8369 = !DILocalVariable(name: "t3", scope: !8363, file: !3, line: 4430, type: !2301)
!8370 = !DILocation(line: 4430, column: 22, scope: !8363)
!8371 = !DILocalVariable(name: "t4", scope: !8363, file: !3, line: 4430, type: !2301)
!8372 = !DILocation(line: 4430, column: 26, scope: !8363)
!8373 = !DILocation(line: 4431, column: 23, scope: !8363)
!8374 = !DILocation(line: 4431, column: 8, scope: !8363)
!8375 = !DILocation(line: 4431, column: 6, scope: !8363)
!8376 = !DILocation(line: 4433, column: 22, scope: !8363)
!8377 = !DILocation(line: 4433, column: 47, scope: !8363)
!8378 = !DILocation(line: 4433, column: 52, scope: !8363)
!8379 = !DILocation(line: 4433, column: 8, scope: !8363)
!8380 = !DILocation(line: 4433, column: 6, scope: !8363)
!8381 = !DILocation(line: 4436, column: 19, scope: !8363)
!8382 = !DILocation(line: 4436, column: 33, scope: !8363)
!8383 = !DILocation(line: 4437, column: 32, scope: !8363)
!8384 = !DILocation(line: 4437, column: 37, scope: !8363)
!8385 = !DILocation(line: 4437, column: 6, scope: !8363)
!8386 = !DILocation(line: 4435, column: 11, scope: !8363)
!8387 = !DILocation(line: 4435, column: 9, scope: !8363)
!8388 = !DILocation(line: 4439, column: 23, scope: !8363)
!8389 = !DILocation(line: 4439, column: 8, scope: !8363)
!8390 = !DILocation(line: 4439, column: 6, scope: !8363)
!8391 = !DILocation(line: 4441, column: 42, scope: !8363)
!8392 = !DILocation(line: 4441, column: 56, scope: !8363)
!8393 = !DILocation(line: 4441, column: 60, scope: !8363)
!8394 = !DILocation(line: 4441, column: 8, scope: !8363)
!8395 = !DILocation(line: 4441, column: 6, scope: !8363)
!8396 = !DILocation(line: 4443, column: 7, scope: !8397)
!8397 = distinct !DILexicalBlock(scope: !8363, file: !3, line: 4443, column: 7)
!8398 = !DILocation(line: 4443, column: 7, scope: !8363)
!8399 = !DILocalVariable(name: "t5", scope: !8400, file: !3, line: 4445, type: !2301)
!8400 = distinct !DILexicalBlock(scope: !8397, file: !3, line: 4444, column: 5)
!8401 = !DILocation(line: 4445, column: 11, scope: !8400)
!8402 = !DILocation(line: 4446, column: 25, scope: !8400)
!8403 = !DILocation(line: 4446, column: 55, scope: !8400)
!8404 = !DILocation(line: 4446, column: 12, scope: !8400)
!8405 = !DILocation(line: 4446, column: 10, scope: !8400)
!8406 = !DILocation(line: 4448, column: 33, scope: !8400)
!8407 = !DILocation(line: 4450, column: 12, scope: !8400)
!8408 = !DILocation(line: 4448, column: 18, scope: !8400)
!8409 = !DILocation(line: 4448, column: 16, scope: !8400)
!8410 = !DILocation(line: 4451, column: 5, scope: !8400)
!8411 = !DILocation(line: 4453, column: 4, scope: !8230)
!8412 = !DILocation(line: 4455, column: 6, scope: !8413)
!8413 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 4455, column: 6)
!8414 = !DILocation(line: 4455, column: 15, scope: !8413)
!8415 = !DILocation(line: 4455, column: 6, scope: !7605)
!8416 = !DILocation(line: 4456, column: 4, scope: !8413)
!8417 = !DILocation(line: 4457, column: 22, scope: !7605)
!8418 = !DILocation(line: 4457, column: 2, scope: !7605)
!8419 = !DILocation(line: 4464, column: 6, scope: !8420)
!8420 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 4464, column: 6)
!8421 = !DILocation(line: 4464, column: 13, scope: !8420)
!8422 = !DILocation(line: 4464, column: 18, scope: !8420)
!8423 = !DILocation(line: 4464, column: 21, scope: !8420)
!8424 = !DILocation(line: 4464, column: 42, scope: !8420)
!8425 = !DILocation(line: 4464, column: 39, scope: !8420)
!8426 = !DILocation(line: 4464, column: 6, scope: !7605)
!8427 = !DILocation(line: 4465, column: 26, scope: !8420)
!8428 = !DILocation(line: 4465, column: 13, scope: !8420)
!8429 = !DILocation(line: 4465, column: 11, scope: !8420)
!8430 = !DILocation(line: 4465, column: 4, scope: !8420)
!8431 = !DILocation(line: 4467, column: 6, scope: !8432)
!8432 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 4467, column: 6)
!8433 = !DILocation(line: 4467, column: 6, scope: !7605)
!8434 = !DILocation(line: 4470, column: 10, scope: !8435)
!8435 = distinct !DILexicalBlock(scope: !8432, file: !3, line: 4468, column: 4)
!8436 = !DILocation(line: 4470, column: 27, scope: !8435)
!8437 = !DILocation(line: 4470, column: 49, scope: !8435)
!8438 = !DILocation(line: 4470, column: 36, scope: !8435)
!8439 = !DILocation(line: 4470, column: 8, scope: !8435)
!8440 = !DILocation(line: 4471, column: 30, scope: !8435)
!8441 = !DILocation(line: 4471, column: 17, scope: !8435)
!8442 = !DILocation(line: 4471, column: 15, scope: !8435)
!8443 = !DILocation(line: 4472, column: 4, scope: !8435)
!8444 = !DILocation(line: 4476, column: 10, scope: !8445)
!8445 = distinct !DILexicalBlock(scope: !8432, file: !3, line: 4474, column: 4)
!8446 = !DILocation(line: 4476, column: 27, scope: !8445)
!8447 = !DILocation(line: 4476, column: 49, scope: !8445)
!8448 = !DILocation(line: 4476, column: 36, scope: !8445)
!8449 = !DILocation(line: 4476, column: 8, scope: !8445)
!8450 = !DILocation(line: 4477, column: 31, scope: !8445)
!8451 = !DILocation(line: 4477, column: 18, scope: !8445)
!8452 = !DILocation(line: 4477, column: 16, scope: !8445)
!8453 = !DILocation(line: 4480, column: 42, scope: !8454)
!8454 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 4480, column: 6)
!8455 = !DILocation(line: 4480, column: 47, scope: !8454)
!8456 = !DILocation(line: 4481, column: 6, scope: !8454)
!8457 = !DILocation(line: 4481, column: 16, scope: !8454)
!8458 = !DILocation(line: 4480, column: 6, scope: !8454)
!8459 = !DILocation(line: 4480, column: 6, scope: !7605)
!8460 = !DILocalVariable(name: "tem", scope: !8461, file: !3, line: 4485, type: !2301)
!8461 = distinct !DILexicalBlock(scope: !8454, file: !3, line: 4482, column: 4)
!8462 = !DILocation(line: 4485, column: 10, scope: !8461)
!8463 = !DILocalVariable(name: "label", scope: !8461, file: !3, line: 4486, type: !2301)
!8464 = !DILocation(line: 4486, column: 10, scope: !8461)
!8465 = !DILocation(line: 4486, column: 18, scope: !8461)
!8466 = !DILocation(line: 4487, column: 23, scope: !8461)
!8467 = !DILocation(line: 4487, column: 34, scope: !8461)
!8468 = !DILocation(line: 4487, column: 50, scope: !8461)
!8469 = !DILocation(line: 4487, column: 64, scope: !8461)
!8470 = !DILocation(line: 4487, column: 6, scope: !8461)
!8471 = !DILocation(line: 4488, column: 26, scope: !8461)
!8472 = !DILocation(line: 4488, column: 51, scope: !8461)
!8473 = !DILocation(line: 4488, column: 56, scope: !8461)
!8474 = !DILocation(line: 4488, column: 12, scope: !8461)
!8475 = !DILocation(line: 4488, column: 10, scope: !8461)
!8476 = !DILocation(line: 4490, column: 23, scope: !8461)
!8477 = !DILocation(line: 4490, column: 28, scope: !8461)
!8478 = !DILocation(line: 4490, column: 44, scope: !8461)
!8479 = !DILocation(line: 4490, column: 58, scope: !8461)
!8480 = !DILocation(line: 4490, column: 6, scope: !8461)
!8481 = !DILocation(line: 4491, column: 18, scope: !8461)
!8482 = !DILocation(line: 4491, column: 28, scope: !8461)
!8483 = !DILocation(line: 4491, column: 6, scope: !8461)
!8484 = !DILocation(line: 4492, column: 18, scope: !8461)
!8485 = !DILocation(line: 4492, column: 29, scope: !8461)
!8486 = !DILocation(line: 4492, column: 6, scope: !8461)
!8487 = !DILocation(line: 4493, column: 18, scope: !8461)
!8488 = !DILocation(line: 4493, column: 6, scope: !8461)
!8489 = !DILocation(line: 4494, column: 13, scope: !8461)
!8490 = !DILocation(line: 4494, column: 26, scope: !8461)
!8491 = !DILocation(line: 4494, column: 32, scope: !8461)
!8492 = !DILocation(line: 4494, column: 43, scope: !8461)
!8493 = !DILocation(line: 4494, column: 55, scope: !8461)
!8494 = !DILocation(line: 4494, column: 6, scope: !8461)
!8495 = !DILocalVariable(name: "label1", scope: !8496, file: !3, line: 4500, type: !2301)
!8496 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 4499, column: 2)
!8497 = !DILocation(line: 4500, column: 8, scope: !8496)
!8498 = !DILocalVariable(name: "label2", scope: !8496, file: !3, line: 4500, type: !2301)
!8499 = !DILocation(line: 4500, column: 16, scope: !8496)
!8500 = !DILocalVariable(name: "label3", scope: !8496, file: !3, line: 4500, type: !2301)
!8501 = !DILocation(line: 4500, column: 24, scope: !8496)
!8502 = !DILocalVariable(name: "label4", scope: !8496, file: !3, line: 4500, type: !2301)
!8503 = !DILocation(line: 4500, column: 32, scope: !8496)
!8504 = !DILocalVariable(name: "label5", scope: !8496, file: !3, line: 4500, type: !2301)
!8505 = !DILocation(line: 4500, column: 40, scope: !8496)
!8506 = !DILocalVariable(name: "adjusted_op0", scope: !8496, file: !3, line: 4501, type: !2301)
!8507 = !DILocation(line: 4501, column: 8, scope: !8496)
!8508 = !DILocalVariable(name: "tem", scope: !8496, file: !3, line: 4502, type: !2301)
!8509 = !DILocation(line: 4502, column: 8, scope: !8496)
!8510 = !DILocation(line: 4504, column: 28, scope: !8496)
!8511 = !DILocation(line: 4504, column: 15, scope: !8496)
!8512 = !DILocation(line: 4504, column: 13, scope: !8496)
!8513 = !DILocation(line: 4505, column: 37, scope: !8496)
!8514 = !DILocation(line: 4505, column: 51, scope: !8496)
!8515 = !DILocation(line: 4505, column: 19, scope: !8496)
!8516 = !DILocation(line: 4505, column: 17, scope: !8496)
!8517 = !DILocation(line: 4506, column: 13, scope: !8496)
!8518 = !DILocation(line: 4506, column: 11, scope: !8496)
!8519 = !DILocation(line: 4507, column: 13, scope: !8496)
!8520 = !DILocation(line: 4507, column: 11, scope: !8496)
!8521 = !DILocation(line: 4508, column: 13, scope: !8496)
!8522 = !DILocation(line: 4508, column: 11, scope: !8496)
!8523 = !DILocation(line: 4509, column: 13, scope: !8496)
!8524 = !DILocation(line: 4509, column: 11, scope: !8496)
!8525 = !DILocation(line: 4510, column: 13, scope: !8496)
!8526 = !DILocation(line: 4510, column: 11, scope: !8496)
!8527 = !DILocation(line: 4511, column: 21, scope: !8496)
!8528 = !DILocation(line: 4511, column: 26, scope: !8496)
!8529 = !DILocation(line: 4511, column: 42, scope: !8496)
!8530 = !DILocation(line: 4511, column: 56, scope: !8496)
!8531 = !DILocation(line: 4511, column: 4, scope: !8496)
!8532 = !DILocation(line: 4512, column: 21, scope: !8496)
!8533 = !DILocation(line: 4512, column: 35, scope: !8496)
!8534 = !DILocation(line: 4512, column: 51, scope: !8496)
!8535 = !DILocation(line: 4512, column: 65, scope: !8496)
!8536 = !DILocation(line: 4512, column: 4, scope: !8496)
!8537 = !DILocation(line: 4513, column: 24, scope: !8496)
!8538 = !DILocation(line: 4513, column: 50, scope: !8496)
!8539 = !DILocation(line: 4513, column: 64, scope: !8496)
!8540 = !DILocation(line: 4514, column: 10, scope: !8496)
!8541 = !DILocation(line: 4513, column: 10, scope: !8496)
!8542 = !DILocation(line: 4513, column: 8, scope: !8496)
!8543 = !DILocation(line: 4515, column: 8, scope: !8544)
!8544 = distinct !DILexicalBlock(scope: !8496, file: !3, line: 4515, column: 8)
!8545 = !DILocation(line: 4515, column: 15, scope: !8544)
!8546 = !DILocation(line: 4515, column: 12, scope: !8544)
!8547 = !DILocation(line: 4515, column: 8, scope: !8496)
!8548 = !DILocation(line: 4516, column: 22, scope: !8544)
!8549 = !DILocation(line: 4516, column: 32, scope: !8544)
!8550 = !DILocation(line: 4516, column: 6, scope: !8544)
!8551 = !DILocation(line: 4517, column: 30, scope: !8496)
!8552 = !DILocation(line: 4517, column: 20, scope: !8496)
!8553 = !DILocation(line: 4517, column: 4, scope: !8496)
!8554 = !DILocation(line: 4518, column: 4, scope: !8496)
!8555 = !DILocation(line: 4519, column: 16, scope: !8496)
!8556 = !DILocation(line: 4519, column: 4, scope: !8496)
!8557 = !DILocation(line: 4520, column: 16, scope: !8496)
!8558 = !DILocation(line: 4520, column: 30, scope: !8496)
!8559 = !DILocation(line: 4520, column: 4, scope: !8496)
!8560 = !DILocation(line: 4521, column: 30, scope: !8496)
!8561 = !DILocation(line: 4521, column: 20, scope: !8496)
!8562 = !DILocation(line: 4521, column: 4, scope: !8496)
!8563 = !DILocation(line: 4522, column: 4, scope: !8496)
!8564 = !DILocation(line: 4523, column: 16, scope: !8496)
!8565 = !DILocation(line: 4523, column: 4, scope: !8496)
!8566 = !DILocation(line: 4524, column: 21, scope: !8496)
!8567 = !DILocation(line: 4524, column: 35, scope: !8496)
!8568 = !DILocation(line: 4524, column: 51, scope: !8496)
!8569 = !DILocation(line: 4524, column: 65, scope: !8496)
!8570 = !DILocation(line: 4524, column: 4, scope: !8496)
!8571 = !DILocation(line: 4525, column: 24, scope: !8496)
!8572 = !DILocation(line: 4525, column: 50, scope: !8496)
!8573 = !DILocation(line: 4525, column: 64, scope: !8496)
!8574 = !DILocation(line: 4526, column: 10, scope: !8496)
!8575 = !DILocation(line: 4525, column: 10, scope: !8496)
!8576 = !DILocation(line: 4525, column: 8, scope: !8496)
!8577 = !DILocation(line: 4527, column: 8, scope: !8578)
!8578 = distinct !DILexicalBlock(scope: !8496, file: !3, line: 4527, column: 8)
!8579 = !DILocation(line: 4527, column: 15, scope: !8578)
!8580 = !DILocation(line: 4527, column: 12, scope: !8578)
!8581 = !DILocation(line: 4527, column: 8, scope: !8496)
!8582 = !DILocation(line: 4528, column: 22, scope: !8578)
!8583 = !DILocation(line: 4528, column: 32, scope: !8578)
!8584 = !DILocation(line: 4528, column: 6, scope: !8578)
!8585 = !DILocation(line: 4529, column: 30, scope: !8496)
!8586 = !DILocation(line: 4529, column: 20, scope: !8496)
!8587 = !DILocation(line: 4529, column: 4, scope: !8496)
!8588 = !DILocation(line: 4530, column: 4, scope: !8496)
!8589 = !DILocation(line: 4531, column: 16, scope: !8496)
!8590 = !DILocation(line: 4531, column: 4, scope: !8496)
!8591 = !DILocation(line: 4532, column: 16, scope: !8496)
!8592 = !DILocation(line: 4532, column: 30, scope: !8496)
!8593 = !DILocation(line: 4532, column: 4, scope: !8496)
!8594 = !DILocation(line: 4533, column: 16, scope: !8496)
!8595 = !DILocation(line: 4533, column: 4, scope: !8496)
!8596 = !DILocation(line: 4534, column: 24, scope: !8496)
!8597 = !DILocation(line: 4534, column: 50, scope: !8496)
!8598 = !DILocation(line: 4534, column: 64, scope: !8496)
!8599 = !DILocation(line: 4535, column: 10, scope: !8496)
!8600 = !DILocation(line: 4534, column: 10, scope: !8496)
!8601 = !DILocation(line: 4534, column: 8, scope: !8496)
!8602 = !DILocation(line: 4536, column: 8, scope: !8603)
!8603 = distinct !DILexicalBlock(scope: !8496, file: !3, line: 4536, column: 8)
!8604 = !DILocation(line: 4536, column: 15, scope: !8603)
!8605 = !DILocation(line: 4536, column: 12, scope: !8603)
!8606 = !DILocation(line: 4536, column: 8, scope: !8496)
!8607 = !DILocation(line: 4537, column: 22, scope: !8603)
!8608 = !DILocation(line: 4537, column: 32, scope: !8603)
!8609 = !DILocation(line: 4537, column: 6, scope: !8603)
!8610 = !DILocation(line: 4538, column: 16, scope: !8496)
!8611 = !DILocation(line: 4538, column: 26, scope: !8496)
!8612 = !DILocation(line: 4538, column: 4, scope: !8496)
!8613 = !DILocation(line: 4539, column: 16, scope: !8496)
!8614 = !DILocation(line: 4539, column: 4, scope: !8496)
!8615 = !DILocation(line: 4541, column: 2, scope: !7605)
!8616 = !DILocation(line: 4545, column: 6, scope: !8617)
!8617 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 4545, column: 6)
!8618 = !DILocation(line: 4545, column: 6, scope: !7605)
!8619 = !DILocation(line: 4547, column: 10, scope: !8620)
!8620 = distinct !DILexicalBlock(scope: !8621, file: !3, line: 4547, column: 10)
!8621 = distinct !DILexicalBlock(scope: !8617, file: !3, line: 4546, column: 4)
!8622 = !DILocation(line: 4547, column: 26, scope: !8620)
!8623 = !DILocation(line: 4547, column: 29, scope: !8620)
!8624 = !DILocation(line: 4547, column: 10, scope: !8621)
!8625 = !DILocalVariable(name: "t1", scope: !8626, file: !3, line: 4549, type: !2301)
!8626 = distinct !DILexicalBlock(scope: !8620, file: !3, line: 4548, column: 8)
!8627 = !DILocation(line: 4549, column: 7, scope: !8626)
!8628 = !DILocalVariable(name: "t2", scope: !8626, file: !3, line: 4549, type: !2301)
!8629 = !DILocation(line: 4549, column: 11, scope: !8626)
!8630 = !DILocalVariable(name: "t3", scope: !8626, file: !3, line: 4549, type: !2301)
!8631 = !DILocation(line: 4549, column: 15, scope: !8626)
!8632 = !DILocalVariable(name: "d", scope: !8626, file: !3, line: 4550, type: !2375)
!8633 = !DILocation(line: 4550, column: 26, scope: !8626)
!8634 = !DILocation(line: 4550, column: 30, scope: !8626)
!8635 = !DILocation(line: 4551, column: 35, scope: !8626)
!8636 = !DILocation(line: 4551, column: 49, scope: !8626)
!8637 = !DILocation(line: 4552, column: 46, scope: !8626)
!8638 = !DILocation(line: 4552, column: 34, scope: !8626)
!8639 = !DILocation(line: 4552, column: 8, scope: !8626)
!8640 = !DILocation(line: 4553, column: 8, scope: !8626)
!8641 = !DILocation(line: 4551, column: 8, scope: !8626)
!8642 = !DILocation(line: 4551, column: 6, scope: !8626)
!8643 = !DILocation(line: 4554, column: 22, scope: !8626)
!8644 = !DILocation(line: 4554, column: 47, scope: !8626)
!8645 = !DILocation(line: 4555, column: 8, scope: !8626)
!8646 = !DILocation(line: 4554, column: 8, scope: !8626)
!8647 = !DILocation(line: 4554, column: 6, scope: !8626)
!8648 = !DILocation(line: 4557, column: 21, scope: !8626)
!8649 = !DILocation(line: 4557, column: 8, scope: !8626)
!8650 = !DILocation(line: 4557, column: 6, scope: !8626)
!8651 = !DILocation(line: 4558, column: 25, scope: !8626)
!8652 = !DILocation(line: 4558, column: 33, scope: !8626)
!8653 = !DILocation(line: 4558, column: 37, scope: !8626)
!8654 = !DILocation(line: 4559, column: 11, scope: !8626)
!8655 = !DILocation(line: 4558, column: 8, scope: !8626)
!8656 = !DILocation(line: 4558, column: 6, scope: !8626)
!8657 = !DILocation(line: 4560, column: 7, scope: !8658)
!8658 = distinct !DILexicalBlock(scope: !8626, file: !3, line: 4560, column: 7)
!8659 = !DILocation(line: 4560, column: 10, scope: !8658)
!8660 = !DILocation(line: 4560, column: 7, scope: !8626)
!8661 = !DILocalVariable(name: "lab", scope: !8662, file: !3, line: 4562, type: !2301)
!8662 = distinct !DILexicalBlock(scope: !8658, file: !3, line: 4561, column: 5)
!8663 = !DILocation(line: 4562, column: 11, scope: !8662)
!8664 = !DILocation(line: 4563, column: 13, scope: !8662)
!8665 = !DILocation(line: 4563, column: 11, scope: !8662)
!8666 = !DILocation(line: 4564, column: 24, scope: !8662)
!8667 = !DILocation(line: 4564, column: 28, scope: !8662)
!8668 = !DILocation(line: 4564, column: 44, scope: !8662)
!8669 = !DILocation(line: 4564, column: 58, scope: !8662)
!8670 = !DILocation(line: 4564, column: 7, scope: !8662)
!8671 = !DILocation(line: 4565, column: 19, scope: !8662)
!8672 = !DILocation(line: 4565, column: 23, scope: !8662)
!8673 = !DILocation(line: 4565, column: 7, scope: !8662)
!8674 = !DILocation(line: 4566, column: 19, scope: !8662)
!8675 = !DILocation(line: 4566, column: 7, scope: !8662)
!8676 = !DILocation(line: 4567, column: 18, scope: !8662)
!8677 = !DILocation(line: 4567, column: 16, scope: !8662)
!8678 = !DILocation(line: 4568, column: 5, scope: !8662)
!8679 = !DILocation(line: 4570, column: 31, scope: !8658)
!8680 = !DILocation(line: 4572, column: 10, scope: !8658)
!8681 = !DILocation(line: 4570, column: 16, scope: !8658)
!8682 = !DILocation(line: 4570, column: 14, scope: !8658)
!8683 = !DILocation(line: 4573, column: 3, scope: !8626)
!8684 = !DILocation(line: 4581, column: 10, scope: !8685)
!8685 = distinct !DILexicalBlock(scope: !8621, file: !3, line: 4581, column: 10)
!8686 = !DILocation(line: 4581, column: 17, scope: !8685)
!8687 = !DILocation(line: 4581, column: 22, scope: !8685)
!8688 = !DILocation(line: 4581, column: 25, scope: !8685)
!8689 = !DILocation(line: 4581, column: 46, scope: !8685)
!8690 = !DILocation(line: 4581, column: 43, scope: !8685)
!8691 = !DILocation(line: 4581, column: 10, scope: !8621)
!8692 = !DILocation(line: 4582, column: 30, scope: !8685)
!8693 = !DILocation(line: 4582, column: 17, scope: !8685)
!8694 = !DILocation(line: 4582, column: 15, scope: !8685)
!8695 = !DILocation(line: 4582, column: 8, scope: !8685)
!8696 = !DILocation(line: 4584, column: 10, scope: !8697)
!8697 = distinct !DILexicalBlock(scope: !8621, file: !3, line: 4584, column: 10)
!8698 = !DILocation(line: 4584, column: 10, scope: !8621)
!8699 = !DILocation(line: 4586, column: 16, scope: !8700)
!8700 = distinct !DILexicalBlock(scope: !8697, file: !3, line: 4585, column: 8)
!8701 = !DILocation(line: 4587, column: 11, scope: !8700)
!8702 = !DILocation(line: 4587, column: 33, scope: !8700)
!8703 = !DILocation(line: 4587, column: 20, scope: !8700)
!8704 = !DILocation(line: 4586, column: 13, scope: !8700)
!8705 = !DILocation(line: 4588, column: 27, scope: !8700)
!8706 = !DILocation(line: 4588, column: 14, scope: !8700)
!8707 = !DILocation(line: 4588, column: 12, scope: !8700)
!8708 = !DILocation(line: 4589, column: 8, scope: !8700)
!8709 = !DILocation(line: 4592, column: 15, scope: !8710)
!8710 = distinct !DILexicalBlock(scope: !8697, file: !3, line: 4591, column: 8)
!8711 = !DILocation(line: 4593, column: 10, scope: !8710)
!8712 = !DILocation(line: 4593, column: 32, scope: !8710)
!8713 = !DILocation(line: 4593, column: 19, scope: !8710)
!8714 = !DILocation(line: 4592, column: 12, scope: !8710)
!8715 = !DILocation(line: 4594, column: 28, scope: !8710)
!8716 = !DILocation(line: 4594, column: 15, scope: !8710)
!8717 = !DILocation(line: 4594, column: 13, scope: !8710)
!8718 = !DILocation(line: 4597, column: 46, scope: !8719)
!8719 = distinct !DILexicalBlock(scope: !8621, file: !3, line: 4597, column: 10)
!8720 = !DILocation(line: 4597, column: 51, scope: !8719)
!8721 = !DILocation(line: 4597, column: 56, scope: !8719)
!8722 = !DILocation(line: 4598, column: 10, scope: !8719)
!8723 = !DILocation(line: 4597, column: 10, scope: !8719)
!8724 = !DILocation(line: 4597, column: 10, scope: !8621)
!8725 = !DILocalVariable(name: "label", scope: !8726, file: !3, line: 4602, type: !2301)
!8726 = distinct !DILexicalBlock(scope: !8719, file: !3, line: 4599, column: 8)
!8727 = !DILocation(line: 4602, column: 7, scope: !8726)
!8728 = !DILocation(line: 4602, column: 15, scope: !8726)
!8729 = !DILocation(line: 4603, column: 20, scope: !8726)
!8730 = !DILocation(line: 4603, column: 31, scope: !8726)
!8731 = !DILocation(line: 4604, column: 6, scope: !8726)
!8732 = !DILocation(line: 4604, column: 20, scope: !8726)
!8733 = !DILocation(line: 4603, column: 3, scope: !8726)
!8734 = !DILocation(line: 4605, column: 15, scope: !8726)
!8735 = !DILocation(line: 4605, column: 25, scope: !8726)
!8736 = !DILocation(line: 4605, column: 3, scope: !8726)
!8737 = !DILocation(line: 4606, column: 15, scope: !8726)
!8738 = !DILocation(line: 4606, column: 26, scope: !8726)
!8739 = !DILocation(line: 4606, column: 3, scope: !8726)
!8740 = !DILocation(line: 4607, column: 15, scope: !8726)
!8741 = !DILocation(line: 4607, column: 3, scope: !8726)
!8742 = !DILocation(line: 4608, column: 10, scope: !8726)
!8743 = !DILocation(line: 4608, column: 23, scope: !8726)
!8744 = !DILocation(line: 4608, column: 29, scope: !8726)
!8745 = !DILocation(line: 4608, column: 40, scope: !8726)
!8746 = !DILocation(line: 4608, column: 52, scope: !8726)
!8747 = !DILocation(line: 4608, column: 3, scope: !8726)
!8748 = !DILocalVariable(name: "label1", scope: !8749, file: !3, line: 4614, type: !2301)
!8749 = distinct !DILexicalBlock(scope: !8621, file: !3, line: 4613, column: 6)
!8750 = !DILocation(line: 4614, column: 12, scope: !8749)
!8751 = !DILocalVariable(name: "label2", scope: !8749, file: !3, line: 4614, type: !2301)
!8752 = !DILocation(line: 4614, column: 20, scope: !8749)
!8753 = !DILocalVariable(name: "adjusted_op0", scope: !8749, file: !3, line: 4615, type: !2301)
!8754 = !DILocation(line: 4615, column: 12, scope: !8749)
!8755 = !DILocalVariable(name: "tem", scope: !8749, file: !3, line: 4615, type: !2301)
!8756 = !DILocation(line: 4615, column: 26, scope: !8749)
!8757 = !DILocation(line: 4617, column: 32, scope: !8749)
!8758 = !DILocation(line: 4617, column: 19, scope: !8749)
!8759 = !DILocation(line: 4617, column: 17, scope: !8749)
!8760 = !DILocation(line: 4618, column: 41, scope: !8749)
!8761 = !DILocation(line: 4618, column: 55, scope: !8749)
!8762 = !DILocation(line: 4618, column: 23, scope: !8749)
!8763 = !DILocation(line: 4618, column: 21, scope: !8749)
!8764 = !DILocation(line: 4619, column: 17, scope: !8749)
!8765 = !DILocation(line: 4619, column: 15, scope: !8749)
!8766 = !DILocation(line: 4620, column: 17, scope: !8749)
!8767 = !DILocation(line: 4620, column: 15, scope: !8749)
!8768 = !DILocation(line: 4621, column: 25, scope: !8749)
!8769 = !DILocation(line: 4621, column: 39, scope: !8749)
!8770 = !DILocation(line: 4622, column: 11, scope: !8749)
!8771 = !DILocation(line: 4622, column: 25, scope: !8749)
!8772 = !DILocation(line: 4621, column: 8, scope: !8749)
!8773 = !DILocation(line: 4623, column: 25, scope: !8749)
!8774 = !DILocation(line: 4623, column: 35, scope: !8749)
!8775 = !DILocation(line: 4623, column: 8, scope: !8749)
!8776 = !DILocation(line: 4624, column: 34, scope: !8749)
!8777 = !DILocation(line: 4624, column: 24, scope: !8749)
!8778 = !DILocation(line: 4624, column: 8, scope: !8749)
!8779 = !DILocation(line: 4625, column: 8, scope: !8749)
!8780 = !DILocation(line: 4626, column: 20, scope: !8749)
!8781 = !DILocation(line: 4626, column: 8, scope: !8749)
!8782 = !DILocation(line: 4627, column: 20, scope: !8749)
!8783 = !DILocation(line: 4627, column: 34, scope: !8749)
!8784 = !DILocation(line: 4627, column: 8, scope: !8749)
!8785 = !DILocation(line: 4628, column: 28, scope: !8749)
!8786 = !DILocation(line: 4628, column: 54, scope: !8749)
!8787 = !DILocation(line: 4628, column: 68, scope: !8749)
!8788 = !DILocation(line: 4629, column: 7, scope: !8749)
!8789 = !DILocation(line: 4628, column: 14, scope: !8749)
!8790 = !DILocation(line: 4628, column: 12, scope: !8749)
!8791 = !DILocation(line: 4630, column: 12, scope: !8792)
!8792 = distinct !DILexicalBlock(scope: !8749, file: !3, line: 4630, column: 12)
!8793 = !DILocation(line: 4630, column: 19, scope: !8792)
!8794 = !DILocation(line: 4630, column: 16, scope: !8792)
!8795 = !DILocation(line: 4630, column: 12, scope: !8749)
!8796 = !DILocation(line: 4631, column: 19, scope: !8792)
!8797 = !DILocation(line: 4631, column: 29, scope: !8792)
!8798 = !DILocation(line: 4631, column: 3, scope: !8792)
!8799 = !DILocation(line: 4632, column: 20, scope: !8749)
!8800 = !DILocation(line: 4632, column: 30, scope: !8749)
!8801 = !DILocation(line: 4632, column: 8, scope: !8749)
!8802 = !DILocation(line: 4633, column: 20, scope: !8749)
!8803 = !DILocation(line: 4633, column: 8, scope: !8749)
!8804 = !DILocation(line: 4635, column: 4, scope: !8621)
!8805 = !DILocation(line: 4638, column: 10, scope: !8806)
!8806 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 4638, column: 10)
!8807 = distinct !DILexicalBlock(scope: !8617, file: !3, line: 4637, column: 4)
!8808 = !DILocation(line: 4638, column: 26, scope: !8806)
!8809 = !DILocation(line: 4638, column: 29, scope: !8806)
!8810 = !DILocation(line: 4639, column: 3, scope: !8806)
!8811 = !DILocation(line: 4639, column: 6, scope: !8806)
!8812 = !DILocation(line: 4639, column: 19, scope: !8806)
!8813 = !DILocation(line: 4638, column: 10, scope: !8807)
!8814 = !DILocalVariable(name: "t1", scope: !8815, file: !3, line: 4647, type: !2301)
!8815 = distinct !DILexicalBlock(scope: !8806, file: !3, line: 4640, column: 8)
!8816 = !DILocation(line: 4647, column: 7, scope: !8815)
!8817 = !DILocalVariable(name: "t2", scope: !8815, file: !3, line: 4647, type: !2301)
!8818 = !DILocation(line: 4647, column: 11, scope: !8815)
!8819 = !DILocalVariable(name: "t3", scope: !8815, file: !3, line: 4647, type: !2301)
!8820 = !DILocation(line: 4647, column: 15, scope: !8815)
!8821 = !DILocalVariable(name: "d", scope: !8815, file: !3, line: 4648, type: !2375)
!8822 = !DILocation(line: 4648, column: 26, scope: !8815)
!8823 = !DILocation(line: 4648, column: 30, scope: !8815)
!8824 = !DILocation(line: 4649, column: 35, scope: !8815)
!8825 = !DILocation(line: 4649, column: 49, scope: !8815)
!8826 = !DILocation(line: 4650, column: 46, scope: !8815)
!8827 = !DILocation(line: 4650, column: 34, scope: !8815)
!8828 = !DILocation(line: 4650, column: 8, scope: !8815)
!8829 = !DILocation(line: 4651, column: 8, scope: !8815)
!8830 = !DILocation(line: 4649, column: 8, scope: !8815)
!8831 = !DILocation(line: 4649, column: 6, scope: !8815)
!8832 = !DILocation(line: 4652, column: 22, scope: !8815)
!8833 = !DILocation(line: 4652, column: 47, scope: !8815)
!8834 = !DILocation(line: 4653, column: 8, scope: !8815)
!8835 = !DILocation(line: 4652, column: 8, scope: !8815)
!8836 = !DILocation(line: 4652, column: 6, scope: !8815)
!8837 = !DILocation(line: 4655, column: 21, scope: !8815)
!8838 = !DILocation(line: 4655, column: 8, scope: !8815)
!8839 = !DILocation(line: 4655, column: 6, scope: !8815)
!8840 = !DILocation(line: 4656, column: 25, scope: !8815)
!8841 = !DILocation(line: 4656, column: 33, scope: !8815)
!8842 = !DILocation(line: 4656, column: 37, scope: !8815)
!8843 = !DILocation(line: 4657, column: 11, scope: !8815)
!8844 = !DILocation(line: 4656, column: 8, scope: !8815)
!8845 = !DILocation(line: 4656, column: 6, scope: !8815)
!8846 = !DILocation(line: 4658, column: 7, scope: !8847)
!8847 = distinct !DILexicalBlock(scope: !8815, file: !3, line: 4658, column: 7)
!8848 = !DILocation(line: 4658, column: 10, scope: !8847)
!8849 = !DILocation(line: 4658, column: 7, scope: !8815)
!8850 = !DILocalVariable(name: "lab", scope: !8851, file: !3, line: 4660, type: !2301)
!8851 = distinct !DILexicalBlock(scope: !8847, file: !3, line: 4659, column: 5)
!8852 = !DILocation(line: 4660, column: 11, scope: !8851)
!8853 = !DILocation(line: 4661, column: 13, scope: !8851)
!8854 = !DILocation(line: 4661, column: 11, scope: !8851)
!8855 = !DILocation(line: 4662, column: 24, scope: !8851)
!8856 = !DILocation(line: 4662, column: 28, scope: !8851)
!8857 = !DILocation(line: 4662, column: 44, scope: !8851)
!8858 = !DILocation(line: 4662, column: 58, scope: !8851)
!8859 = !DILocation(line: 4662, column: 7, scope: !8851)
!8860 = !DILocation(line: 4663, column: 19, scope: !8851)
!8861 = !DILocation(line: 4663, column: 23, scope: !8851)
!8862 = !DILocation(line: 4663, column: 7, scope: !8851)
!8863 = !DILocation(line: 4664, column: 19, scope: !8851)
!8864 = !DILocation(line: 4664, column: 7, scope: !8851)
!8865 = !DILocation(line: 4665, column: 18, scope: !8851)
!8866 = !DILocation(line: 4665, column: 16, scope: !8851)
!8867 = !DILocation(line: 4666, column: 5, scope: !8851)
!8868 = !DILocation(line: 4668, column: 31, scope: !8847)
!8869 = !DILocation(line: 4670, column: 10, scope: !8847)
!8870 = !DILocation(line: 4668, column: 16, scope: !8847)
!8871 = !DILocation(line: 4668, column: 14, scope: !8847)
!8872 = !DILocation(line: 4671, column: 3, scope: !8815)
!8873 = !DILocation(line: 4679, column: 10, scope: !8874)
!8874 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 4679, column: 10)
!8875 = !DILocation(line: 4679, column: 17, scope: !8874)
!8876 = !DILocation(line: 4679, column: 22, scope: !8874)
!8877 = !DILocation(line: 4679, column: 25, scope: !8874)
!8878 = !DILocation(line: 4679, column: 46, scope: !8874)
!8879 = !DILocation(line: 4679, column: 43, scope: !8874)
!8880 = !DILocation(line: 4679, column: 10, scope: !8807)
!8881 = !DILocation(line: 4680, column: 30, scope: !8874)
!8882 = !DILocation(line: 4680, column: 17, scope: !8874)
!8883 = !DILocation(line: 4680, column: 15, scope: !8874)
!8884 = !DILocation(line: 4680, column: 8, scope: !8874)
!8885 = !DILocation(line: 4681, column: 10, scope: !8886)
!8886 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 4681, column: 10)
!8887 = !DILocation(line: 4681, column: 10, scope: !8807)
!8888 = !DILocation(line: 4683, column: 15, scope: !8889)
!8889 = distinct !DILexicalBlock(scope: !8886, file: !3, line: 4682, column: 8)
!8890 = !DILocation(line: 4684, column: 10, scope: !8889)
!8891 = !DILocation(line: 4684, column: 32, scope: !8889)
!8892 = !DILocation(line: 4684, column: 19, scope: !8889)
!8893 = !DILocation(line: 4683, column: 12, scope: !8889)
!8894 = !DILocation(line: 4685, column: 27, scope: !8889)
!8895 = !DILocation(line: 4685, column: 14, scope: !8889)
!8896 = !DILocation(line: 4685, column: 12, scope: !8889)
!8897 = !DILocation(line: 4686, column: 8, scope: !8889)
!8898 = !DILocation(line: 4689, column: 15, scope: !8899)
!8899 = distinct !DILexicalBlock(scope: !8886, file: !3, line: 4688, column: 8)
!8900 = !DILocation(line: 4690, column: 10, scope: !8899)
!8901 = !DILocation(line: 4690, column: 32, scope: !8899)
!8902 = !DILocation(line: 4690, column: 19, scope: !8899)
!8903 = !DILocation(line: 4689, column: 12, scope: !8899)
!8904 = !DILocation(line: 4691, column: 28, scope: !8899)
!8905 = !DILocation(line: 4691, column: 15, scope: !8899)
!8906 = !DILocation(line: 4691, column: 13, scope: !8899)
!8907 = !DILocation(line: 4694, column: 46, scope: !8908)
!8908 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 4694, column: 10)
!8909 = !DILocation(line: 4694, column: 51, scope: !8908)
!8910 = !DILocation(line: 4694, column: 56, scope: !8908)
!8911 = !DILocation(line: 4695, column: 10, scope: !8908)
!8912 = !DILocation(line: 4694, column: 10, scope: !8908)
!8913 = !DILocation(line: 4694, column: 10, scope: !8807)
!8914 = !DILocalVariable(name: "tem", scope: !8915, file: !3, line: 4699, type: !2301)
!8915 = distinct !DILexicalBlock(scope: !8908, file: !3, line: 4696, column: 8)
!8916 = !DILocation(line: 4699, column: 7, scope: !8915)
!8917 = !DILocalVariable(name: "label", scope: !8915, file: !3, line: 4700, type: !2301)
!8918 = !DILocation(line: 4700, column: 7, scope: !8915)
!8919 = !DILocation(line: 4700, column: 15, scope: !8915)
!8920 = !DILocation(line: 4701, column: 20, scope: !8915)
!8921 = !DILocation(line: 4701, column: 31, scope: !8915)
!8922 = !DILocation(line: 4702, column: 6, scope: !8915)
!8923 = !DILocation(line: 4702, column: 20, scope: !8915)
!8924 = !DILocation(line: 4701, column: 3, scope: !8915)
!8925 = !DILocation(line: 4703, column: 23, scope: !8915)
!8926 = !DILocation(line: 4703, column: 48, scope: !8915)
!8927 = !DILocation(line: 4703, column: 53, scope: !8915)
!8928 = !DILocation(line: 4703, column: 9, scope: !8915)
!8929 = !DILocation(line: 4703, column: 7, scope: !8915)
!8930 = !DILocation(line: 4705, column: 20, scope: !8915)
!8931 = !DILocation(line: 4705, column: 25, scope: !8915)
!8932 = !DILocation(line: 4705, column: 41, scope: !8915)
!8933 = !DILocation(line: 4705, column: 55, scope: !8915)
!8934 = !DILocation(line: 4705, column: 3, scope: !8915)
!8935 = !DILocation(line: 4706, column: 15, scope: !8915)
!8936 = !DILocation(line: 4706, column: 25, scope: !8915)
!8937 = !DILocation(line: 4706, column: 3, scope: !8915)
!8938 = !DILocation(line: 4707, column: 15, scope: !8915)
!8939 = !DILocation(line: 4707, column: 26, scope: !8915)
!8940 = !DILocation(line: 4707, column: 3, scope: !8915)
!8941 = !DILocation(line: 4708, column: 15, scope: !8915)
!8942 = !DILocation(line: 4708, column: 3, scope: !8915)
!8943 = !DILocation(line: 4709, column: 10, scope: !8915)
!8944 = !DILocation(line: 4709, column: 23, scope: !8915)
!8945 = !DILocation(line: 4709, column: 29, scope: !8915)
!8946 = !DILocation(line: 4709, column: 40, scope: !8915)
!8947 = !DILocation(line: 4709, column: 52, scope: !8915)
!8948 = !DILocation(line: 4709, column: 3, scope: !8915)
!8949 = !DILocalVariable(name: "label1", scope: !8950, file: !3, line: 4715, type: !2301)
!8950 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 4714, column: 6)
!8951 = !DILocation(line: 4715, column: 12, scope: !8950)
!8952 = !DILocalVariable(name: "label2", scope: !8950, file: !3, line: 4715, type: !2301)
!8953 = !DILocation(line: 4715, column: 20, scope: !8950)
!8954 = !DILocalVariable(name: "label3", scope: !8950, file: !3, line: 4715, type: !2301)
!8955 = !DILocation(line: 4715, column: 28, scope: !8950)
!8956 = !DILocalVariable(name: "label4", scope: !8950, file: !3, line: 4715, type: !2301)
!8957 = !DILocation(line: 4715, column: 36, scope: !8950)
!8958 = !DILocalVariable(name: "label5", scope: !8950, file: !3, line: 4715, type: !2301)
!8959 = !DILocation(line: 4715, column: 44, scope: !8950)
!8960 = !DILocalVariable(name: "adjusted_op0", scope: !8950, file: !3, line: 4716, type: !2301)
!8961 = !DILocation(line: 4716, column: 12, scope: !8950)
!8962 = !DILocalVariable(name: "tem", scope: !8950, file: !3, line: 4717, type: !2301)
!8963 = !DILocation(line: 4717, column: 12, scope: !8950)
!8964 = !DILocation(line: 4719, column: 32, scope: !8950)
!8965 = !DILocation(line: 4719, column: 19, scope: !8950)
!8966 = !DILocation(line: 4719, column: 17, scope: !8950)
!8967 = !DILocation(line: 4720, column: 41, scope: !8950)
!8968 = !DILocation(line: 4720, column: 55, scope: !8950)
!8969 = !DILocation(line: 4720, column: 23, scope: !8950)
!8970 = !DILocation(line: 4720, column: 21, scope: !8950)
!8971 = !DILocation(line: 4721, column: 17, scope: !8950)
!8972 = !DILocation(line: 4721, column: 15, scope: !8950)
!8973 = !DILocation(line: 4722, column: 17, scope: !8950)
!8974 = !DILocation(line: 4722, column: 15, scope: !8950)
!8975 = !DILocation(line: 4723, column: 17, scope: !8950)
!8976 = !DILocation(line: 4723, column: 15, scope: !8950)
!8977 = !DILocation(line: 4724, column: 17, scope: !8950)
!8978 = !DILocation(line: 4724, column: 15, scope: !8950)
!8979 = !DILocation(line: 4725, column: 17, scope: !8950)
!8980 = !DILocation(line: 4725, column: 15, scope: !8950)
!8981 = !DILocation(line: 4726, column: 25, scope: !8950)
!8982 = !DILocation(line: 4726, column: 30, scope: !8950)
!8983 = !DILocation(line: 4726, column: 46, scope: !8950)
!8984 = !DILocation(line: 4726, column: 60, scope: !8950)
!8985 = !DILocation(line: 4726, column: 8, scope: !8950)
!8986 = !DILocation(line: 4727, column: 25, scope: !8950)
!8987 = !DILocation(line: 4727, column: 39, scope: !8950)
!8988 = !DILocation(line: 4728, column: 11, scope: !8950)
!8989 = !DILocation(line: 4728, column: 25, scope: !8950)
!8990 = !DILocation(line: 4727, column: 8, scope: !8950)
!8991 = !DILocation(line: 4729, column: 28, scope: !8950)
!8992 = !DILocation(line: 4729, column: 54, scope: !8950)
!8993 = !DILocation(line: 4729, column: 68, scope: !8950)
!8994 = !DILocation(line: 4730, column: 7, scope: !8950)
!8995 = !DILocation(line: 4729, column: 14, scope: !8950)
!8996 = !DILocation(line: 4729, column: 12, scope: !8950)
!8997 = !DILocation(line: 4731, column: 12, scope: !8998)
!8998 = distinct !DILexicalBlock(scope: !8950, file: !3, line: 4731, column: 12)
!8999 = !DILocation(line: 4731, column: 19, scope: !8998)
!9000 = !DILocation(line: 4731, column: 16, scope: !8998)
!9001 = !DILocation(line: 4731, column: 12, scope: !8950)
!9002 = !DILocation(line: 4732, column: 19, scope: !8998)
!9003 = !DILocation(line: 4732, column: 29, scope: !8998)
!9004 = !DILocation(line: 4732, column: 3, scope: !8998)
!9005 = !DILocation(line: 4733, column: 34, scope: !8950)
!9006 = !DILocation(line: 4733, column: 24, scope: !8950)
!9007 = !DILocation(line: 4733, column: 8, scope: !8950)
!9008 = !DILocation(line: 4734, column: 8, scope: !8950)
!9009 = !DILocation(line: 4735, column: 20, scope: !8950)
!9010 = !DILocation(line: 4735, column: 8, scope: !8950)
!9011 = !DILocation(line: 4736, column: 20, scope: !8950)
!9012 = !DILocation(line: 4736, column: 34, scope: !8950)
!9013 = !DILocation(line: 4736, column: 8, scope: !8950)
!9014 = !DILocation(line: 4737, column: 34, scope: !8950)
!9015 = !DILocation(line: 4737, column: 24, scope: !8950)
!9016 = !DILocation(line: 4737, column: 8, scope: !8950)
!9017 = !DILocation(line: 4738, column: 8, scope: !8950)
!9018 = !DILocation(line: 4739, column: 20, scope: !8950)
!9019 = !DILocation(line: 4739, column: 8, scope: !8950)
!9020 = !DILocation(line: 4740, column: 25, scope: !8950)
!9021 = !DILocation(line: 4740, column: 39, scope: !8950)
!9022 = !DILocation(line: 4741, column: 11, scope: !8950)
!9023 = !DILocation(line: 4741, column: 25, scope: !8950)
!9024 = !DILocation(line: 4740, column: 8, scope: !8950)
!9025 = !DILocation(line: 4742, column: 28, scope: !8950)
!9026 = !DILocation(line: 4742, column: 54, scope: !8950)
!9027 = !DILocation(line: 4742, column: 68, scope: !8950)
!9028 = !DILocation(line: 4743, column: 7, scope: !8950)
!9029 = !DILocation(line: 4742, column: 14, scope: !8950)
!9030 = !DILocation(line: 4742, column: 12, scope: !8950)
!9031 = !DILocation(line: 4744, column: 12, scope: !9032)
!9032 = distinct !DILexicalBlock(scope: !8950, file: !3, line: 4744, column: 12)
!9033 = !DILocation(line: 4744, column: 19, scope: !9032)
!9034 = !DILocation(line: 4744, column: 16, scope: !9032)
!9035 = !DILocation(line: 4744, column: 12, scope: !8950)
!9036 = !DILocation(line: 4745, column: 19, scope: !9032)
!9037 = !DILocation(line: 4745, column: 29, scope: !9032)
!9038 = !DILocation(line: 4745, column: 3, scope: !9032)
!9039 = !DILocation(line: 4746, column: 34, scope: !8950)
!9040 = !DILocation(line: 4746, column: 24, scope: !8950)
!9041 = !DILocation(line: 4746, column: 8, scope: !8950)
!9042 = !DILocation(line: 4747, column: 8, scope: !8950)
!9043 = !DILocation(line: 4748, column: 20, scope: !8950)
!9044 = !DILocation(line: 4748, column: 8, scope: !8950)
!9045 = !DILocation(line: 4749, column: 20, scope: !8950)
!9046 = !DILocation(line: 4749, column: 34, scope: !8950)
!9047 = !DILocation(line: 4749, column: 8, scope: !8950)
!9048 = !DILocation(line: 4750, column: 20, scope: !8950)
!9049 = !DILocation(line: 4750, column: 8, scope: !8950)
!9050 = !DILocation(line: 4751, column: 28, scope: !8950)
!9051 = !DILocation(line: 4751, column: 54, scope: !8950)
!9052 = !DILocation(line: 4751, column: 68, scope: !8950)
!9053 = !DILocation(line: 4752, column: 7, scope: !8950)
!9054 = !DILocation(line: 4751, column: 14, scope: !8950)
!9055 = !DILocation(line: 4751, column: 12, scope: !8950)
!9056 = !DILocation(line: 4753, column: 12, scope: !9057)
!9057 = distinct !DILexicalBlock(scope: !8950, file: !3, line: 4753, column: 12)
!9058 = !DILocation(line: 4753, column: 19, scope: !9057)
!9059 = !DILocation(line: 4753, column: 16, scope: !9057)
!9060 = !DILocation(line: 4753, column: 12, scope: !8950)
!9061 = !DILocation(line: 4754, column: 19, scope: !9057)
!9062 = !DILocation(line: 4754, column: 29, scope: !9057)
!9063 = !DILocation(line: 4754, column: 3, scope: !9057)
!9064 = !DILocation(line: 4755, column: 20, scope: !8950)
!9065 = !DILocation(line: 4755, column: 30, scope: !8950)
!9066 = !DILocation(line: 4755, column: 8, scope: !8950)
!9067 = !DILocation(line: 4756, column: 20, scope: !8950)
!9068 = !DILocation(line: 4756, column: 8, scope: !8950)
!9069 = !DILocation(line: 4759, column: 2, scope: !7605)
!9070 = !DILocation(line: 4762, column: 6, scope: !9071)
!9071 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 4762, column: 6)
!9072 = !DILocation(line: 4762, column: 22, scope: !9071)
!9073 = !DILocation(line: 4762, column: 51, scope: !9071)
!9074 = !DILocation(line: 4762, column: 48, scope: !9071)
!9075 = !DILocation(line: 4762, column: 6, scope: !7605)
!9076 = !DILocalVariable(name: "d", scope: !9077, file: !3, line: 4764, type: !2299)
!9077 = distinct !DILexicalBlock(scope: !9071, file: !3, line: 4763, column: 4)
!9078 = !DILocation(line: 4764, column: 20, scope: !9077)
!9079 = !DILocation(line: 4764, column: 24, scope: !9077)
!9080 = !DILocalVariable(name: "ml", scope: !9077, file: !3, line: 4765, type: !2375)
!9081 = !DILocation(line: 4765, column: 29, scope: !9077)
!9082 = !DILocalVariable(name: "pre_shift", scope: !9077, file: !3, line: 4766, type: !2325)
!9083 = !DILocation(line: 4766, column: 10, scope: !9077)
!9084 = !DILocalVariable(name: "t1", scope: !9077, file: !3, line: 4767, type: !2301)
!9085 = !DILocation(line: 4767, column: 10, scope: !9077)
!9086 = !DILocation(line: 4769, column: 30, scope: !9077)
!9087 = !DILocation(line: 4769, column: 35, scope: !9077)
!9088 = !DILocation(line: 4769, column: 34, scope: !9077)
!9089 = !DILocation(line: 4769, column: 32, scope: !9077)
!9090 = !DILocation(line: 4769, column: 18, scope: !9077)
!9091 = !DILocation(line: 4769, column: 16, scope: !9077)
!9092 = !DILocation(line: 4770, column: 25, scope: !9077)
!9093 = !DILocation(line: 4770, column: 30, scope: !9077)
!9094 = !DILocation(line: 4770, column: 27, scope: !9077)
!9095 = !DILocation(line: 4770, column: 41, scope: !9077)
!9096 = !DILocation(line: 4770, column: 11, scope: !9077)
!9097 = !DILocation(line: 4770, column: 9, scope: !9077)
!9098 = !DILocation(line: 4771, column: 38, scope: !9077)
!9099 = !DILocation(line: 4771, column: 52, scope: !9077)
!9100 = !DILocation(line: 4772, column: 37, scope: !9077)
!9101 = !DILocation(line: 4772, column: 11, scope: !9077)
!9102 = !DILocation(line: 4773, column: 21, scope: !9077)
!9103 = !DILocation(line: 4771, column: 11, scope: !9077)
!9104 = !DILocation(line: 4771, column: 9, scope: !9077)
!9105 = !DILocation(line: 4774, column: 30, scope: !9077)
!9106 = !DILocation(line: 4774, column: 44, scope: !9077)
!9107 = !DILocation(line: 4775, column: 23, scope: !9077)
!9108 = !DILocation(line: 4775, column: 27, scope: !9077)
!9109 = !DILocation(line: 4775, column: 9, scope: !9077)
!9110 = !DILocation(line: 4774, column: 17, scope: !9077)
!9111 = !DILocation(line: 4774, column: 15, scope: !9077)
!9112 = !DILocation(line: 4778, column: 13, scope: !9077)
!9113 = !DILocation(line: 4778, column: 11, scope: !9077)
!9114 = !DILocation(line: 4779, column: 27, scope: !9077)
!9115 = !DILocation(line: 4781, column: 6, scope: !9077)
!9116 = !DILocation(line: 4779, column: 6, scope: !9077)
!9117 = !DILocation(line: 4784, column: 4, scope: !9077)
!9118 = !DILocation(line: 4785, column: 2, scope: !7605)
!9119 = !DILocation(line: 4789, column: 6, scope: !9120)
!9120 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 4789, column: 6)
!9121 = !DILocation(line: 4789, column: 6, scope: !7605)
!9122 = !DILocalVariable(name: "tem", scope: !9123, file: !3, line: 4791, type: !2301)
!9123 = distinct !DILexicalBlock(scope: !9120, file: !3, line: 4790, column: 4)
!9124 = !DILocation(line: 4791, column: 10, scope: !9123)
!9125 = !DILocalVariable(name: "label", scope: !9123, file: !3, line: 4792, type: !2301)
!9126 = !DILocation(line: 4792, column: 10, scope: !9123)
!9127 = !DILocation(line: 4793, column: 14, scope: !9123)
!9128 = !DILocation(line: 4793, column: 12, scope: !9123)
!9129 = !DILocation(line: 4794, column: 30, scope: !9123)
!9130 = !DILocation(line: 4794, column: 17, scope: !9123)
!9131 = !DILocation(line: 4794, column: 15, scope: !9123)
!9132 = !DILocation(line: 4795, column: 31, scope: !9123)
!9133 = !DILocation(line: 4795, column: 18, scope: !9123)
!9134 = !DILocation(line: 4795, column: 16, scope: !9123)
!9135 = !DILocation(line: 4796, column: 46, scope: !9136)
!9136 = distinct !DILexicalBlock(scope: !9123, file: !3, line: 4796, column: 10)
!9137 = !DILocation(line: 4796, column: 51, scope: !9136)
!9138 = !DILocation(line: 4796, column: 56, scope: !9136)
!9139 = !DILocation(line: 4796, column: 66, scope: !9136)
!9140 = !DILocation(line: 4796, column: 10, scope: !9136)
!9141 = !DILocation(line: 4796, column: 80, scope: !9136)
!9142 = !DILocation(line: 4796, column: 10, scope: !9123)
!9143 = !DILocalVariable(name: "tem", scope: !9144, file: !3, line: 4798, type: !2301)
!9144 = distinct !DILexicalBlock(scope: !9136, file: !3, line: 4797, column: 8)
!9145 = !DILocation(line: 4798, column: 7, scope: !9144)
!9146 = !DILocation(line: 4799, column: 28, scope: !9144)
!9147 = !DILocation(line: 4799, column: 54, scope: !9144)
!9148 = !DILocation(line: 4799, column: 59, scope: !9144)
!9149 = !DILocation(line: 4800, column: 7, scope: !9144)
!9150 = !DILocation(line: 4799, column: 14, scope: !9144)
!9151 = !DILocation(line: 4799, column: 12, scope: !9144)
!9152 = !DILocation(line: 4801, column: 22, scope: !9144)
!9153 = !DILocation(line: 4801, column: 36, scope: !9144)
!9154 = !DILocation(line: 4801, column: 46, scope: !9144)
!9155 = !DILocation(line: 4801, column: 9, scope: !9144)
!9156 = !DILocation(line: 4801, column: 7, scope: !9144)
!9157 = !DILocation(line: 4802, column: 29, scope: !9144)
!9158 = !DILocation(line: 4802, column: 54, scope: !9144)
!9159 = !DILocation(line: 4802, column: 59, scope: !9144)
!9160 = !DILocation(line: 4803, column: 8, scope: !9144)
!9161 = !DILocation(line: 4802, column: 15, scope: !9144)
!9162 = !DILocation(line: 4802, column: 13, scope: !9144)
!9163 = !DILocation(line: 4804, column: 8, scope: !9144)
!9164 = !DILocation(line: 4805, column: 27, scope: !9123)
!9165 = !DILocation(line: 4805, column: 12, scope: !9123)
!9166 = !DILocation(line: 4805, column: 10, scope: !9123)
!9167 = !DILocation(line: 4806, column: 39, scope: !9123)
!9168 = !DILocation(line: 4806, column: 53, scope: !9123)
!9169 = !DILocation(line: 4807, column: 5, scope: !9123)
!9170 = !DILocation(line: 4806, column: 12, scope: !9123)
!9171 = !DILocation(line: 4806, column: 10, scope: !9123)
!9172 = !DILocation(line: 4809, column: 23, scope: !9123)
!9173 = !DILocation(line: 4809, column: 34, scope: !9123)
!9174 = !DILocation(line: 4809, column: 44, scope: !9123)
!9175 = !DILocation(line: 4809, column: 58, scope: !9123)
!9176 = !DILocation(line: 4809, column: 6, scope: !9123)
!9177 = !DILocation(line: 4810, column: 18, scope: !9123)
!9178 = !DILocation(line: 4810, column: 28, scope: !9123)
!9179 = !DILocation(line: 4810, column: 6, scope: !9123)
!9180 = !DILocation(line: 4811, column: 18, scope: !9123)
!9181 = !DILocation(line: 4811, column: 29, scope: !9123)
!9182 = !DILocation(line: 4811, column: 6, scope: !9123)
!9183 = !DILocation(line: 4812, column: 18, scope: !9123)
!9184 = !DILocation(line: 4812, column: 6, scope: !9123)
!9185 = !DILocation(line: 4813, column: 4, scope: !9123)
!9186 = !DILocalVariable(name: "abs_rem", scope: !9187, file: !3, line: 4816, type: !2301)
!9187 = distinct !DILexicalBlock(scope: !9120, file: !3, line: 4815, column: 4)
!9188 = !DILocation(line: 4816, column: 10, scope: !9187)
!9189 = !DILocalVariable(name: "abs_op1", scope: !9187, file: !3, line: 4816, type: !2301)
!9190 = !DILocation(line: 4816, column: 19, scope: !9187)
!9191 = !DILocalVariable(name: "tem", scope: !9187, file: !3, line: 4816, type: !2301)
!9192 = !DILocation(line: 4816, column: 28, scope: !9187)
!9193 = !DILocalVariable(name: "mask", scope: !9187, file: !3, line: 4816, type: !2301)
!9194 = !DILocation(line: 4816, column: 33, scope: !9187)
!9195 = !DILocalVariable(name: "label", scope: !9187, file: !3, line: 4817, type: !2301)
!9196 = !DILocation(line: 4817, column: 10, scope: !9187)
!9197 = !DILocation(line: 4818, column: 14, scope: !9187)
!9198 = !DILocation(line: 4818, column: 12, scope: !9187)
!9199 = !DILocation(line: 4819, column: 30, scope: !9187)
!9200 = !DILocation(line: 4819, column: 17, scope: !9187)
!9201 = !DILocation(line: 4819, column: 15, scope: !9187)
!9202 = !DILocation(line: 4820, column: 31, scope: !9187)
!9203 = !DILocation(line: 4820, column: 18, scope: !9187)
!9204 = !DILocation(line: 4820, column: 16, scope: !9187)
!9205 = !DILocation(line: 4821, column: 46, scope: !9206)
!9206 = distinct !DILexicalBlock(scope: !9187, file: !3, line: 4821, column: 10)
!9207 = !DILocation(line: 4821, column: 51, scope: !9206)
!9208 = !DILocation(line: 4821, column: 56, scope: !9206)
!9209 = !DILocation(line: 4821, column: 66, scope: !9206)
!9210 = !DILocation(line: 4821, column: 10, scope: !9206)
!9211 = !DILocation(line: 4821, column: 80, scope: !9206)
!9212 = !DILocation(line: 4821, column: 10, scope: !9187)
!9213 = !DILocalVariable(name: "tem", scope: !9214, file: !3, line: 4823, type: !2301)
!9214 = distinct !DILexicalBlock(scope: !9206, file: !3, line: 4822, column: 8)
!9215 = !DILocation(line: 4823, column: 7, scope: !9214)
!9216 = !DILocation(line: 4824, column: 28, scope: !9214)
!9217 = !DILocation(line: 4824, column: 54, scope: !9214)
!9218 = !DILocation(line: 4824, column: 59, scope: !9214)
!9219 = !DILocation(line: 4825, column: 7, scope: !9214)
!9220 = !DILocation(line: 4824, column: 14, scope: !9214)
!9221 = !DILocation(line: 4824, column: 12, scope: !9214)
!9222 = !DILocation(line: 4826, column: 22, scope: !9214)
!9223 = !DILocation(line: 4826, column: 36, scope: !9214)
!9224 = !DILocation(line: 4826, column: 46, scope: !9214)
!9225 = !DILocation(line: 4826, column: 9, scope: !9214)
!9226 = !DILocation(line: 4826, column: 7, scope: !9214)
!9227 = !DILocation(line: 4827, column: 29, scope: !9214)
!9228 = !DILocation(line: 4827, column: 54, scope: !9214)
!9229 = !DILocation(line: 4827, column: 59, scope: !9214)
!9230 = !DILocation(line: 4828, column: 8, scope: !9214)
!9231 = !DILocation(line: 4827, column: 15, scope: !9214)
!9232 = !DILocation(line: 4827, column: 13, scope: !9214)
!9233 = !DILocation(line: 4829, column: 8, scope: !9214)
!9234 = !DILocation(line: 4830, column: 28, scope: !9187)
!9235 = !DILocation(line: 4830, column: 42, scope: !9187)
!9236 = !DILocation(line: 4830, column: 16, scope: !9187)
!9237 = !DILocation(line: 4830, column: 14, scope: !9187)
!9238 = !DILocation(line: 4831, column: 28, scope: !9187)
!9239 = !DILocation(line: 4831, column: 42, scope: !9187)
!9240 = !DILocation(line: 4831, column: 16, scope: !9187)
!9241 = !DILocation(line: 4831, column: 14, scope: !9187)
!9242 = !DILocation(line: 4832, column: 39, scope: !9187)
!9243 = !DILocation(line: 4832, column: 53, scope: !9187)
!9244 = !DILocation(line: 4833, column: 5, scope: !9187)
!9245 = !DILocation(line: 4832, column: 12, scope: !9187)
!9246 = !DILocation(line: 4832, column: 10, scope: !9187)
!9247 = !DILocation(line: 4835, column: 23, scope: !9187)
!9248 = !DILocation(line: 4835, column: 28, scope: !9187)
!9249 = !DILocation(line: 4835, column: 42, scope: !9187)
!9250 = !DILocation(line: 4835, column: 56, scope: !9187)
!9251 = !DILocation(line: 4835, column: 6, scope: !9187)
!9252 = !DILocation(line: 4836, column: 26, scope: !9187)
!9253 = !DILocation(line: 4836, column: 51, scope: !9187)
!9254 = !DILocation(line: 4836, column: 56, scope: !9187)
!9255 = !DILocation(line: 4836, column: 12, scope: !9187)
!9256 = !DILocation(line: 4836, column: 10, scope: !9187)
!9257 = !DILocation(line: 4838, column: 40, scope: !9187)
!9258 = !DILocation(line: 4838, column: 54, scope: !9187)
!9259 = !DILocation(line: 4839, column: 32, scope: !9187)
!9260 = !DILocation(line: 4839, column: 37, scope: !9187)
!9261 = !DILocation(line: 4839, column: 6, scope: !9187)
!9262 = !DILocation(line: 4838, column: 13, scope: !9187)
!9263 = !DILocation(line: 4838, column: 11, scope: !9187)
!9264 = !DILocation(line: 4841, column: 26, scope: !9187)
!9265 = !DILocation(line: 4841, column: 51, scope: !9187)
!9266 = !DILocation(line: 4841, column: 57, scope: !9187)
!9267 = !DILocation(line: 4841, column: 12, scope: !9187)
!9268 = !DILocation(line: 4841, column: 10, scope: !9187)
!9269 = !DILocation(line: 4843, column: 26, scope: !9187)
!9270 = !DILocation(line: 4843, column: 51, scope: !9187)
!9271 = !DILocation(line: 4843, column: 56, scope: !9187)
!9272 = !DILocation(line: 4843, column: 12, scope: !9187)
!9273 = !DILocation(line: 4843, column: 10, scope: !9187)
!9274 = !DILocation(line: 4845, column: 18, scope: !9187)
!9275 = !DILocation(line: 4845, column: 28, scope: !9187)
!9276 = !DILocation(line: 4845, column: 6, scope: !9187)
!9277 = !DILocation(line: 4846, column: 26, scope: !9187)
!9278 = !DILocation(line: 4846, column: 51, scope: !9187)
!9279 = !DILocation(line: 4846, column: 57, scope: !9187)
!9280 = !DILocation(line: 4846, column: 12, scope: !9187)
!9281 = !DILocation(line: 4846, column: 10, scope: !9187)
!9282 = !DILocation(line: 4848, column: 26, scope: !9187)
!9283 = !DILocation(line: 4848, column: 51, scope: !9187)
!9284 = !DILocation(line: 4848, column: 56, scope: !9187)
!9285 = !DILocation(line: 4848, column: 12, scope: !9187)
!9286 = !DILocation(line: 4848, column: 10, scope: !9187)
!9287 = !DILocation(line: 4850, column: 18, scope: !9187)
!9288 = !DILocation(line: 4850, column: 29, scope: !9187)
!9289 = !DILocation(line: 4850, column: 6, scope: !9187)
!9290 = !DILocation(line: 4851, column: 18, scope: !9187)
!9291 = !DILocation(line: 4851, column: 6, scope: !9187)
!9292 = !DILocation(line: 4853, column: 9, scope: !7605)
!9293 = !DILocation(line: 4853, column: 22, scope: !7605)
!9294 = !DILocation(line: 4853, column: 28, scope: !7605)
!9295 = !DILocation(line: 4853, column: 39, scope: !7605)
!9296 = !DILocation(line: 4853, column: 51, scope: !7605)
!9297 = !DILocation(line: 4853, column: 2, scope: !7605)
!9298 = !DILocation(line: 4856, column: 2, scope: !7605)
!9299 = !DILocation(line: 4857, column: 7, scope: !7605)
!9300 = !DILocation(line: 4859, column: 7, scope: !9301)
!9301 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 4859, column: 7)
!9302 = !DILocation(line: 4859, column: 16, scope: !9301)
!9303 = !DILocation(line: 4859, column: 7, scope: !3366)
!9304 = !DILocation(line: 4861, column: 11, scope: !9305)
!9305 = distinct !DILexicalBlock(scope: !9306, file: !3, line: 4861, column: 11)
!9306 = distinct !DILexicalBlock(scope: !9301, file: !3, line: 4860, column: 5)
!9307 = !DILocation(line: 4861, column: 18, scope: !9305)
!9308 = !DILocation(line: 4861, column: 21, scope: !9305)
!9309 = !DILocation(line: 4861, column: 42, scope: !9305)
!9310 = !DILocation(line: 4861, column: 39, scope: !9305)
!9311 = !DILocation(line: 4861, column: 11, scope: !9306)
!9312 = !DILocation(line: 4862, column: 9, scope: !9305)
!9313 = !DILocation(line: 4862, column: 2, scope: !9305)
!9314 = !DILocation(line: 4864, column: 11, scope: !9315)
!9315 = distinct !DILexicalBlock(scope: !9306, file: !3, line: 4864, column: 11)
!9316 = !DILocation(line: 4864, column: 11, scope: !9306)
!9317 = !DILocation(line: 4876, column: 27, scope: !9318)
!9318 = distinct !DILexicalBlock(scope: !9315, file: !3, line: 4865, column: 2)
!9319 = !DILocation(line: 4877, column: 6, scope: !9318)
!9320 = !DILocation(line: 4877, column: 11, scope: !9318)
!9321 = !DILocation(line: 4877, column: 16, scope: !9318)
!9322 = !DILocation(line: 4878, column: 6, scope: !9318)
!9323 = !DILocation(line: 4879, column: 8, scope: !9318)
!9324 = !DILocation(line: 4879, column: 46, scope: !9318)
!9325 = !DILocation(line: 4880, column: 8, scope: !9318)
!9326 = !DILocation(line: 4879, column: 7, scope: !9318)
!9327 = !DILocation(line: 4876, column: 8, scope: !9318)
!9328 = !DILocation(line: 4876, column: 6, scope: !9318)
!9329 = !DILocation(line: 4882, column: 8, scope: !9330)
!9330 = distinct !DILexicalBlock(scope: !9318, file: !3, line: 4882, column: 8)
!9331 = !DILocation(line: 4882, column: 18, scope: !9330)
!9332 = !DILocation(line: 4882, column: 8, scope: !9318)
!9333 = !DILocation(line: 4886, column: 33, scope: !9334)
!9334 = distinct !DILexicalBlock(scope: !9330, file: !3, line: 4883, column: 6)
!9335 = !DILocation(line: 4886, column: 20, scope: !9334)
!9336 = !DILocation(line: 4886, column: 18, scope: !9334)
!9337 = !DILocation(line: 4887, column: 36, scope: !9338)
!9338 = distinct !DILexicalBlock(scope: !9334, file: !3, line: 4887, column: 12)
!9339 = !DILocation(line: 4890, column: 7, scope: !9338)
!9340 = !DILocation(line: 4890, column: 12, scope: !9338)
!9341 = !DILocation(line: 4891, column: 17, scope: !9338)
!9342 = !DILocation(line: 4891, column: 28, scope: !9338)
!9343 = !DILocation(line: 4887, column: 14, scope: !9338)
!9344 = !DILocation(line: 4887, column: 12, scope: !9334)
!9345 = !DILocation(line: 4892, column: 13, scope: !9338)
!9346 = !DILocation(line: 4892, column: 3, scope: !9338)
!9347 = !DILocation(line: 4893, column: 6, scope: !9334)
!9348 = !DILocation(line: 4895, column: 8, scope: !9349)
!9349 = distinct !DILexicalBlock(scope: !9318, file: !3, line: 4895, column: 8)
!9350 = !DILocation(line: 4895, column: 8, scope: !9318)
!9351 = !DILocation(line: 4896, column: 13, scope: !9349)
!9352 = !DILocation(line: 4896, column: 26, scope: !9349)
!9353 = !DILocation(line: 4896, column: 32, scope: !9349)
!9354 = !DILocation(line: 4896, column: 6, scope: !9349)
!9355 = !DILocation(line: 4897, column: 2, scope: !9318)
!9356 = !DILocation(line: 4904, column: 23, scope: !9306)
!9357 = !DILocation(line: 4905, column: 9, scope: !9306)
!9358 = !DILocation(line: 4905, column: 14, scope: !9306)
!9359 = !DILocation(line: 4905, column: 19, scope: !9306)
!9360 = !DILocation(line: 4905, column: 41, scope: !9306)
!9361 = !DILocation(line: 4906, column: 9, scope: !9306)
!9362 = !DILocation(line: 4907, column: 11, scope: !9306)
!9363 = !DILocation(line: 4907, column: 49, scope: !9306)
!9364 = !DILocation(line: 4908, column: 11, scope: !9306)
!9365 = !DILocation(line: 4907, column: 10, scope: !9306)
!9366 = !DILocation(line: 4904, column: 4, scope: !9306)
!9367 = !DILocation(line: 4904, column: 2, scope: !9306)
!9368 = !DILocation(line: 4911, column: 11, scope: !9369)
!9369 = distinct !DILexicalBlock(scope: !9306, file: !3, line: 4911, column: 11)
!9370 = !DILocation(line: 4911, column: 20, scope: !9369)
!9371 = !DILocation(line: 4911, column: 11, scope: !9306)
!9372 = !DILocation(line: 4915, column: 28, scope: !9373)
!9373 = distinct !DILexicalBlock(scope: !9369, file: !3, line: 4912, column: 2)
!9374 = !DILocation(line: 4915, column: 15, scope: !9373)
!9375 = !DILocation(line: 4915, column: 13, scope: !9373)
!9376 = !DILocation(line: 4916, column: 31, scope: !9377)
!9377 = distinct !DILexicalBlock(scope: !9373, file: !3, line: 4916, column: 8)
!9378 = !DILocation(line: 4917, column: 10, scope: !9377)
!9379 = !DILocation(line: 4917, column: 15, scope: !9377)
!9380 = !DILocation(line: 4918, column: 10, scope: !9377)
!9381 = !DILocation(line: 4918, column: 30, scope: !9377)
!9382 = !DILocation(line: 4916, column: 10, scope: !9377)
!9383 = !DILocation(line: 4916, column: 8, scope: !9373)
!9384 = !DILocation(line: 4920, column: 17, scope: !9385)
!9385 = distinct !DILexicalBlock(scope: !9377, file: !3, line: 4919, column: 6)
!9386 = !DILocation(line: 4921, column: 14, scope: !9387)
!9387 = distinct !DILexicalBlock(scope: !9385, file: !3, line: 4921, column: 12)
!9388 = !DILocation(line: 4921, column: 12, scope: !9385)
!9389 = !DILocation(line: 4924, column: 33, scope: !9387)
!9390 = !DILocation(line: 4926, column: 12, scope: !9387)
!9391 = !DILocation(line: 4926, column: 17, scope: !9387)
!9392 = !DILocation(line: 4926, column: 22, scope: !9387)
!9393 = !DILocation(line: 4927, column: 12, scope: !9387)
!9394 = !DILocation(line: 4924, column: 14, scope: !9387)
!9395 = !DILocation(line: 4924, column: 12, scope: !9387)
!9396 = !DILocation(line: 4924, column: 3, scope: !9387)
!9397 = !DILocation(line: 4928, column: 6, scope: !9385)
!9398 = !DILocation(line: 4929, column: 2, scope: !9373)
!9399 = !DILocation(line: 4930, column: 5, scope: !9306)
!9400 = !DILocation(line: 4932, column: 7, scope: !9401)
!9401 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 4932, column: 7)
!9402 = !DILocation(line: 4932, column: 7, scope: !3366)
!9403 = !DILocation(line: 4934, column: 11, scope: !9404)
!9404 = distinct !DILexicalBlock(scope: !9405, file: !3, line: 4934, column: 11)
!9405 = distinct !DILexicalBlock(scope: !9401, file: !3, line: 4933, column: 5)
!9406 = !DILocation(line: 4934, column: 18, scope: !9404)
!9407 = !DILocation(line: 4934, column: 21, scope: !9404)
!9408 = !DILocation(line: 4934, column: 42, scope: !9404)
!9409 = !DILocation(line: 4934, column: 39, scope: !9404)
!9410 = !DILocation(line: 4934, column: 11, scope: !9405)
!9411 = !DILocation(line: 4935, column: 9, scope: !9404)
!9412 = !DILocation(line: 4935, column: 2, scope: !9404)
!9413 = !DILocation(line: 4937, column: 11, scope: !9414)
!9414 = distinct !DILexicalBlock(scope: !9405, file: !3, line: 4937, column: 11)
!9415 = !DILocation(line: 4937, column: 20, scope: !9414)
!9416 = !DILocation(line: 4937, column: 11, scope: !9405)
!9417 = !DILocation(line: 4940, column: 35, scope: !9418)
!9418 = distinct !DILexicalBlock(scope: !9414, file: !3, line: 4938, column: 2)
!9419 = !DILocation(line: 4941, column: 7, scope: !9418)
!9420 = !DILocation(line: 4941, column: 12, scope: !9418)
!9421 = !DILocation(line: 4941, column: 17, scope: !9418)
!9422 = !DILocation(line: 4942, column: 7, scope: !9418)
!9423 = !DILocation(line: 4940, column: 16, scope: !9418)
!9424 = !DILocation(line: 4940, column: 14, scope: !9418)
!9425 = !DILocation(line: 4945, column: 9, scope: !9426)
!9426 = distinct !DILexicalBlock(scope: !9418, file: !3, line: 4945, column: 8)
!9427 = !DILocation(line: 4945, column: 8, scope: !9418)
!9428 = !DILocation(line: 4947, column: 33, scope: !9429)
!9429 = distinct !DILexicalBlock(scope: !9426, file: !3, line: 4946, column: 6)
!9430 = !DILocation(line: 4947, column: 20, scope: !9429)
!9431 = !DILocation(line: 4947, column: 18, scope: !9429)
!9432 = !DILocation(line: 4949, column: 6, scope: !9433)
!9433 = distinct !DILexicalBlock(scope: !9429, file: !3, line: 4948, column: 12)
!9434 = !DILocation(line: 4950, column: 6, scope: !9433)
!9435 = !DILocation(line: 4950, column: 11, scope: !9433)
!9436 = !DILocation(line: 4951, column: 16, scope: !9433)
!9437 = !DILocation(line: 4952, column: 6, scope: !9433)
!9438 = !DILocation(line: 4948, column: 13, scope: !9433)
!9439 = !DILocation(line: 4948, column: 12, scope: !9429)
!9440 = !DILocation(line: 4953, column: 13, scope: !9433)
!9441 = !DILocation(line: 4953, column: 3, scope: !9433)
!9442 = !DILocation(line: 4954, column: 6, scope: !9429)
!9443 = !DILocation(line: 4955, column: 2, scope: !9418)
!9444 = !DILocation(line: 4959, column: 29, scope: !9445)
!9445 = distinct !DILexicalBlock(scope: !9414, file: !3, line: 4957, column: 2)
!9446 = !DILocation(line: 4959, column: 43, scope: !9445)
!9447 = !DILocation(line: 4959, column: 53, scope: !9445)
!9448 = !DILocation(line: 4960, column: 18, scope: !9445)
!9449 = !DILocation(line: 4959, column: 16, scope: !9445)
!9450 = !DILocation(line: 4959, column: 14, scope: !9445)
!9451 = !DILocation(line: 4961, column: 30, scope: !9445)
!9452 = !DILocation(line: 4961, column: 55, scope: !9445)
!9453 = !DILocation(line: 4962, column: 9, scope: !9445)
!9454 = !DILocation(line: 4962, column: 20, scope: !9445)
!9455 = !DILocation(line: 4962, column: 28, scope: !9445)
!9456 = !DILocation(line: 4961, column: 16, scope: !9445)
!9457 = !DILocation(line: 4961, column: 14, scope: !9445)
!9458 = !DILocation(line: 4965, column: 5, scope: !9405)
!9459 = !DILocation(line: 4967, column: 10, scope: !3366)
!9460 = !DILocation(line: 4967, column: 23, scope: !3366)
!9461 = !DILocation(line: 4967, column: 29, scope: !3366)
!9462 = !DILocation(line: 4967, column: 40, scope: !3366)
!9463 = !DILocation(line: 4967, column: 52, scope: !3366)
!9464 = !DILocation(line: 4967, column: 3, scope: !3366)
!9465 = !DILocation(line: 4968, column: 1, scope: !3366)
!9466 = distinct !DISubprogram(name: "emit_store_flag_force", scope: !3, file: !3, line: 5770, type: !9467, scopeLine: 5772, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!9467 = !DISubroutineType(types: !9468)
!9468 = !{!2301, !2301, !377, !2301, !2301, !5, !2325, !2325}
!9469 = !DILocalVariable(name: "target", arg: 1, scope: !9466, file: !3, line: 5770, type: !2301)
!9470 = !DILocation(line: 5770, column: 28, scope: !9466)
!9471 = !DILocalVariable(name: "code", arg: 2, scope: !9466, file: !3, line: 5770, type: !377)
!9472 = !DILocation(line: 5770, column: 50, scope: !9466)
!9473 = !DILocalVariable(name: "op0", arg: 3, scope: !9466, file: !3, line: 5770, type: !2301)
!9474 = !DILocation(line: 5770, column: 60, scope: !9466)
!9475 = !DILocalVariable(name: "op1", arg: 4, scope: !9466, file: !3, line: 5770, type: !2301)
!9476 = !DILocation(line: 5770, column: 69, scope: !9466)
!9477 = !DILocalVariable(name: "mode", arg: 5, scope: !9466, file: !3, line: 5771, type: !5)
!9478 = !DILocation(line: 5771, column: 28, scope: !9466)
!9479 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !9466, file: !3, line: 5771, type: !2325)
!9480 = !DILocation(line: 5771, column: 38, scope: !9466)
!9481 = !DILocalVariable(name: "normalizep", arg: 7, scope: !9466, file: !3, line: 5771, type: !2325)
!9482 = !DILocation(line: 5771, column: 53, scope: !9466)
!9483 = !DILocalVariable(name: "tem", scope: !9466, file: !3, line: 5773, type: !2301)
!9484 = !DILocation(line: 5773, column: 7, scope: !9466)
!9485 = !DILocalVariable(name: "label", scope: !9466, file: !3, line: 5773, type: !2301)
!9486 = !DILocation(line: 5773, column: 12, scope: !9466)
!9487 = !DILocalVariable(name: "trueval", scope: !9466, file: !3, line: 5774, type: !2301)
!9488 = !DILocation(line: 5774, column: 7, scope: !9466)
!9489 = !DILocalVariable(name: "falseval", scope: !9466, file: !3, line: 5774, type: !2301)
!9490 = !DILocation(line: 5774, column: 16, scope: !9466)
!9491 = !DILocation(line: 5777, column: 26, scope: !9466)
!9492 = !DILocation(line: 5777, column: 34, scope: !9466)
!9493 = !DILocation(line: 5777, column: 40, scope: !9466)
!9494 = !DILocation(line: 5777, column: 45, scope: !9466)
!9495 = !DILocation(line: 5777, column: 50, scope: !9466)
!9496 = !DILocation(line: 5777, column: 56, scope: !9466)
!9497 = !DILocation(line: 5777, column: 67, scope: !9466)
!9498 = !DILocation(line: 5777, column: 9, scope: !9466)
!9499 = !DILocation(line: 5777, column: 7, scope: !9466)
!9500 = !DILocation(line: 5778, column: 7, scope: !9501)
!9501 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 5778, column: 7)
!9502 = !DILocation(line: 5778, column: 11, scope: !9501)
!9503 = !DILocation(line: 5778, column: 7, scope: !9466)
!9504 = !DILocation(line: 5779, column: 12, scope: !9501)
!9505 = !DILocation(line: 5779, column: 5, scope: !9501)
!9506 = !DILocation(line: 5781, column: 8, scope: !9507)
!9507 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 5781, column: 7)
!9508 = !DILocation(line: 5781, column: 7, scope: !9466)
!9509 = !DILocation(line: 5782, column: 27, scope: !9507)
!9510 = !DILocation(line: 5782, column: 14, scope: !9507)
!9511 = !DILocation(line: 5782, column: 12, scope: !9507)
!9512 = !DILocation(line: 5782, column: 5, scope: !9507)
!9513 = !DILocation(line: 5786, column: 13, scope: !9466)
!9514 = !DILocation(line: 5786, column: 26, scope: !9466)
!9515 = !DILocation(line: 5786, column: 49, scope: !9466)
!9516 = !DILocation(line: 5786, column: 11, scope: !9466)
!9517 = !DILocation(line: 5787, column: 7, scope: !9518)
!9518 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 5787, column: 7)
!9519 = !DILocation(line: 5787, column: 12, scope: !9518)
!9520 = !DILocation(line: 5788, column: 7, scope: !9518)
!9521 = !DILocation(line: 5788, column: 10, scope: !9518)
!9522 = !DILocation(line: 5788, column: 32, scope: !9518)
!9523 = !DILocation(line: 5789, column: 7, scope: !9518)
!9524 = !DILocation(line: 5789, column: 10, scope: !9518)
!9525 = !DILocation(line: 5790, column: 7, scope: !9518)
!9526 = !DILocation(line: 5790, column: 10, scope: !9518)
!9527 = !DILocation(line: 5790, column: 17, scope: !9518)
!9528 = !DILocation(line: 5790, column: 14, scope: !9518)
!9529 = !DILocation(line: 5791, column: 7, scope: !9518)
!9530 = !DILocation(line: 5791, column: 10, scope: !9518)
!9531 = !DILocation(line: 5791, column: 17, scope: !9518)
!9532 = !DILocation(line: 5791, column: 14, scope: !9518)
!9533 = !DILocation(line: 5787, column: 7, scope: !9466)
!9534 = !DILocation(line: 5793, column: 15, scope: !9535)
!9535 = distinct !DILexicalBlock(scope: !9518, file: !3, line: 5792, column: 5)
!9536 = !DILocation(line: 5793, column: 13, scope: !9535)
!9537 = !DILocation(line: 5794, column: 32, scope: !9535)
!9538 = !DILocation(line: 5794, column: 40, scope: !9535)
!9539 = !DILocation(line: 5794, column: 56, scope: !9535)
!9540 = !DILocation(line: 5795, column: 11, scope: !9535)
!9541 = !DILocation(line: 5795, column: 37, scope: !9535)
!9542 = !DILocation(line: 5794, column: 7, scope: !9535)
!9543 = !DILocation(line: 5796, column: 23, scope: !9535)
!9544 = !DILocation(line: 5796, column: 31, scope: !9535)
!9545 = !DILocation(line: 5796, column: 7, scope: !9535)
!9546 = !DILocation(line: 5797, column: 19, scope: !9535)
!9547 = !DILocation(line: 5797, column: 7, scope: !9535)
!9548 = !DILocation(line: 5798, column: 14, scope: !9535)
!9549 = !DILocation(line: 5798, column: 7, scope: !9535)
!9550 = !DILocation(line: 5801, column: 8, scope: !9551)
!9551 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 5801, column: 7)
!9552 = !DILocation(line: 5802, column: 7, scope: !9551)
!9553 = !DILocation(line: 5802, column: 27, scope: !9551)
!9554 = !DILocation(line: 5802, column: 35, scope: !9551)
!9555 = !DILocation(line: 5802, column: 10, scope: !9551)
!9556 = !DILocation(line: 5802, column: 40, scope: !9551)
!9557 = !DILocation(line: 5802, column: 60, scope: !9551)
!9558 = !DILocation(line: 5802, column: 68, scope: !9551)
!9559 = !DILocation(line: 5802, column: 43, scope: !9551)
!9560 = !DILocation(line: 5801, column: 7, scope: !9466)
!9561 = !DILocation(line: 5803, column: 27, scope: !9551)
!9562 = !DILocation(line: 5803, column: 14, scope: !9551)
!9563 = !DILocation(line: 5803, column: 12, scope: !9551)
!9564 = !DILocation(line: 5803, column: 5, scope: !9551)
!9565 = !DILocation(line: 5807, column: 14, scope: !9466)
!9566 = !DILocation(line: 5807, column: 12, scope: !9466)
!9567 = !DILocation(line: 5808, column: 24, scope: !9568)
!9568 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 5808, column: 7)
!9569 = !DILocation(line: 5808, column: 30, scope: !9568)
!9570 = !DILocation(line: 5808, column: 9, scope: !9568)
!9571 = !DILocation(line: 5809, column: 7, scope: !9568)
!9572 = !DILocation(line: 5809, column: 13, scope: !9568)
!9573 = !DILocation(line: 5810, column: 11, scope: !9568)
!9574 = !DILocation(line: 5810, column: 14, scope: !9568)
!9575 = !DILocation(line: 5810, column: 19, scope: !9568)
!9576 = !DILocation(line: 5810, column: 30, scope: !9568)
!9577 = !DILocation(line: 5810, column: 33, scope: !9568)
!9578 = !DILocation(line: 5810, column: 38, scope: !9568)
!9579 = !DILocation(line: 5811, column: 11, scope: !9568)
!9580 = !DILocation(line: 5811, column: 17, scope: !9568)
!9581 = !DILocation(line: 5811, column: 35, scope: !9568)
!9582 = !DILocation(line: 5811, column: 39, scope: !9568)
!9583 = !DILocation(line: 5811, column: 44, scope: !9568)
!9584 = !DILocation(line: 5811, column: 52, scope: !9568)
!9585 = !DILocation(line: 5811, column: 55, scope: !9568)
!9586 = !DILocation(line: 5811, column: 60, scope: !9568)
!9587 = !DILocation(line: 5812, column: 11, scope: !9568)
!9588 = !DILocation(line: 5812, column: 17, scope: !9568)
!9589 = !DILocation(line: 5812, column: 36, scope: !9568)
!9590 = !DILocation(line: 5812, column: 40, scope: !9568)
!9591 = !DILocation(line: 5812, column: 45, scope: !9568)
!9592 = !DILocation(line: 5812, column: 51, scope: !9568)
!9593 = !DILocation(line: 5812, column: 54, scope: !9568)
!9594 = !DILocation(line: 5812, column: 59, scope: !9568)
!9595 = !DILocation(line: 5808, column: 7, scope: !9466)
!9596 = !DILocalVariable(name: "rcode", scope: !9597, file: !3, line: 5814, type: !377)
!9597 = distinct !DILexicalBlock(scope: !9568, file: !3, line: 5813, column: 5)
!9598 = !DILocation(line: 5814, column: 21, scope: !9597)
!9599 = !DILocation(line: 5815, column: 11, scope: !9600)
!9600 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 5815, column: 11)
!9601 = !DILocation(line: 5815, column: 11, scope: !9597)
!9602 = !DILocation(line: 5816, column: 52, scope: !9600)
!9603 = !DILocation(line: 5816, column: 17, scope: !9600)
!9604 = !DILocation(line: 5816, column: 15, scope: !9600)
!9605 = !DILocation(line: 5816, column: 9, scope: !9600)
!9606 = !DILocation(line: 5818, column: 36, scope: !9600)
!9607 = !DILocation(line: 5818, column: 17, scope: !9600)
!9608 = !DILocation(line: 5818, column: 15, scope: !9600)
!9609 = !DILocation(line: 5821, column: 26, scope: !9610)
!9610 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 5821, column: 11)
!9611 = !DILocation(line: 5821, column: 33, scope: !9610)
!9612 = !DILocation(line: 5821, column: 11, scope: !9610)
!9613 = !DILocation(line: 5822, column: 11, scope: !9610)
!9614 = !DILocation(line: 5822, column: 15, scope: !9610)
!9615 = !DILocation(line: 5822, column: 20, scope: !9610)
!9616 = !DILocation(line: 5822, column: 31, scope: !9610)
!9617 = !DILocation(line: 5822, column: 60, scope: !9610)
!9618 = !DILocation(line: 5822, column: 36, scope: !9610)
!9619 = !DILocation(line: 5821, column: 11, scope: !9597)
!9620 = !DILocation(line: 5824, column: 15, scope: !9621)
!9621 = distinct !DILexicalBlock(scope: !9610, file: !3, line: 5823, column: 2)
!9622 = !DILocation(line: 5824, column: 13, scope: !9621)
!9623 = !DILocation(line: 5825, column: 14, scope: !9621)
!9624 = !DILocation(line: 5825, column: 12, scope: !9621)
!9625 = !DILocation(line: 5826, column: 11, scope: !9621)
!9626 = !DILocation(line: 5826, column: 9, scope: !9621)
!9627 = !DILocation(line: 5827, column: 2, scope: !9621)
!9628 = !DILocation(line: 5828, column: 5, scope: !9597)
!9629 = !DILocation(line: 5830, column: 19, scope: !9466)
!9630 = !DILocation(line: 5830, column: 27, scope: !9466)
!9631 = !DILocation(line: 5830, column: 3, scope: !9466)
!9632 = !DILocation(line: 5831, column: 11, scope: !9466)
!9633 = !DILocation(line: 5831, column: 9, scope: !9466)
!9634 = !DILocation(line: 5832, column: 28, scope: !9466)
!9635 = !DILocation(line: 5832, column: 33, scope: !9466)
!9636 = !DILocation(line: 5832, column: 38, scope: !9466)
!9637 = !DILocation(line: 5832, column: 44, scope: !9466)
!9638 = !DILocation(line: 5832, column: 55, scope: !9466)
!9639 = !DILocation(line: 5833, column: 17, scope: !9466)
!9640 = !DILocation(line: 5832, column: 3, scope: !9466)
!9641 = !DILocation(line: 5835, column: 19, scope: !9466)
!9642 = !DILocation(line: 5835, column: 27, scope: !9466)
!9643 = !DILocation(line: 5835, column: 3, scope: !9466)
!9644 = !DILocation(line: 5836, column: 15, scope: !9466)
!9645 = !DILocation(line: 5836, column: 3, scope: !9466)
!9646 = !DILocation(line: 5838, column: 10, scope: !9466)
!9647 = !DILocation(line: 5838, column: 3, scope: !9466)
!9648 = !DILocation(line: 5839, column: 1, scope: !9466)
!9649 = distinct !DISubprogram(name: "choose_multiplier", scope: !3, file: !3, line: 3283, type: !9650, scopeLine: 3285, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!9650 = !DISubroutineType(types: !9651)
!9651 = !{!2375, !2375, !2325, !2325, !3869, !9652, !9652}
!9652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2325, size: 64)
!9653 = !DILocalVariable(name: "d", arg: 1, scope: !9649, file: !3, line: 3283, type: !2375)
!9654 = !DILocation(line: 3283, column: 43, scope: !9649)
!9655 = !DILocalVariable(name: "n", arg: 2, scope: !9649, file: !3, line: 3283, type: !2325)
!9656 = !DILocation(line: 3283, column: 50, scope: !9649)
!9657 = !DILocalVariable(name: "precision", arg: 3, scope: !9649, file: !3, line: 3283, type: !2325)
!9658 = !DILocation(line: 3283, column: 57, scope: !9649)
!9659 = !DILocalVariable(name: "multiplier_ptr", arg: 4, scope: !9649, file: !3, line: 3284, type: !3869)
!9660 = !DILocation(line: 3284, column: 11, scope: !9649)
!9661 = !DILocalVariable(name: "post_shift_ptr", arg: 5, scope: !9649, file: !3, line: 3284, type: !9652)
!9662 = !DILocation(line: 3284, column: 32, scope: !9649)
!9663 = !DILocalVariable(name: "lgup_ptr", arg: 6, scope: !9649, file: !3, line: 3284, type: !9652)
!9664 = !DILocation(line: 3284, column: 53, scope: !9649)
!9665 = !DILocalVariable(name: "mhigh_hi", scope: !9649, file: !3, line: 3286, type: !2299)
!9666 = !DILocation(line: 3286, column: 17, scope: !9649)
!9667 = !DILocalVariable(name: "mlow_hi", scope: !9649, file: !3, line: 3286, type: !2299)
!9668 = !DILocation(line: 3286, column: 27, scope: !9649)
!9669 = !DILocalVariable(name: "mhigh_lo", scope: !9649, file: !3, line: 3287, type: !2375)
!9670 = !DILocation(line: 3287, column: 26, scope: !9649)
!9671 = !DILocalVariable(name: "mlow_lo", scope: !9649, file: !3, line: 3287, type: !2375)
!9672 = !DILocation(line: 3287, column: 36, scope: !9649)
!9673 = !DILocalVariable(name: "lgup", scope: !9649, file: !3, line: 3288, type: !2325)
!9674 = !DILocation(line: 3288, column: 7, scope: !9649)
!9675 = !DILocalVariable(name: "post_shift", scope: !9649, file: !3, line: 3288, type: !2325)
!9676 = !DILocation(line: 3288, column: 13, scope: !9649)
!9677 = !DILocalVariable(name: "pow", scope: !9649, file: !3, line: 3289, type: !2325)
!9678 = !DILocation(line: 3289, column: 7, scope: !9649)
!9679 = !DILocalVariable(name: "pow2", scope: !9649, file: !3, line: 3289, type: !2325)
!9680 = !DILocation(line: 3289, column: 12, scope: !9649)
!9681 = !DILocalVariable(name: "nl", scope: !9649, file: !3, line: 3290, type: !2375)
!9682 = !DILocation(line: 3290, column: 26, scope: !9649)
!9683 = !DILocalVariable(name: "dummy1", scope: !9649, file: !3, line: 3290, type: !2375)
!9684 = !DILocation(line: 3290, column: 30, scope: !9649)
!9685 = !DILocalVariable(name: "nh", scope: !9649, file: !3, line: 3291, type: !2299)
!9686 = !DILocation(line: 3291, column: 17, scope: !9649)
!9687 = !DILocalVariable(name: "dummy2", scope: !9649, file: !3, line: 3291, type: !2299)
!9688 = !DILocation(line: 3291, column: 21, scope: !9649)
!9689 = !DILocation(line: 3294, column: 21, scope: !9649)
!9690 = !DILocation(line: 3294, column: 10, scope: !9649)
!9691 = !DILocation(line: 3294, column: 8, scope: !9649)
!9692 = !DILocation(line: 3296, column: 3, scope: !9649)
!9693 = !DILocation(line: 3298, column: 9, scope: !9649)
!9694 = !DILocation(line: 3298, column: 13, scope: !9649)
!9695 = !DILocation(line: 3298, column: 11, scope: !9649)
!9696 = !DILocation(line: 3298, column: 7, scope: !9649)
!9697 = !DILocation(line: 3299, column: 10, scope: !9649)
!9698 = !DILocation(line: 3299, column: 14, scope: !9649)
!9699 = !DILocation(line: 3299, column: 12, scope: !9649)
!9700 = !DILocation(line: 3299, column: 21, scope: !9649)
!9701 = !DILocation(line: 3299, column: 19, scope: !9649)
!9702 = !DILocation(line: 3299, column: 8, scope: !9649)
!9703 = !DILocation(line: 3304, column: 3, scope: !9649)
!9704 = !DILocation(line: 3307, column: 6, scope: !9705)
!9705 = distinct !DILexicalBlock(scope: !9649, file: !3, line: 3307, column: 6)
!9706 = !DILocation(line: 3307, column: 10, scope: !9705)
!9707 = !DILocation(line: 3307, column: 6, scope: !9649)
!9708 = !DILocation(line: 3309, column: 34, scope: !9709)
!9709 = distinct !DILexicalBlock(scope: !9705, file: !3, line: 3308, column: 5)
!9710 = !DILocation(line: 3309, column: 38, scope: !9709)
!9711 = !DILocation(line: 3309, column: 30, scope: !9709)
!9712 = !DILocation(line: 3309, column: 10, scope: !9709)
!9713 = !DILocation(line: 3310, column: 10, scope: !9709)
!9714 = !DILocation(line: 3311, column: 5, scope: !9709)
!9715 = !DILocation(line: 3314, column: 10, scope: !9716)
!9716 = distinct !DILexicalBlock(scope: !9705, file: !3, line: 3313, column: 5)
!9717 = !DILocation(line: 3315, column: 42, scope: !9716)
!9718 = !DILocation(line: 3315, column: 39, scope: !9716)
!9719 = !DILocation(line: 3315, column: 10, scope: !9716)
!9720 = !DILocation(line: 3317, column: 44, scope: !9649)
!9721 = !DILocation(line: 3317, column: 48, scope: !9649)
!9722 = !DILocation(line: 3317, column: 52, scope: !9649)
!9723 = !DILocation(line: 3317, column: 3, scope: !9649)
!9724 = !DILocation(line: 3321, column: 7, scope: !9725)
!9725 = distinct !DILexicalBlock(scope: !9649, file: !3, line: 3321, column: 7)
!9726 = !DILocation(line: 3321, column: 12, scope: !9725)
!9727 = !DILocation(line: 3321, column: 7, scope: !9649)
!9728 = !DILocation(line: 3322, column: 33, scope: !9725)
!9729 = !DILocation(line: 3322, column: 38, scope: !9725)
!9730 = !DILocation(line: 3322, column: 29, scope: !9725)
!9731 = !DILocation(line: 3322, column: 8, scope: !9725)
!9732 = !DILocation(line: 3322, column: 5, scope: !9725)
!9733 = !DILocation(line: 3324, column: 41, scope: !9725)
!9734 = !DILocation(line: 3324, column: 38, scope: !9725)
!9735 = !DILocation(line: 3324, column: 8, scope: !9725)
!9736 = !DILocation(line: 3325, column: 44, scope: !9649)
!9737 = !DILocation(line: 3325, column: 48, scope: !9649)
!9738 = !DILocation(line: 3325, column: 52, scope: !9649)
!9739 = !DILocation(line: 3325, column: 3, scope: !9649)
!9740 = !DILocation(line: 3328, column: 3, scope: !9649)
!9741 = !DILocation(line: 3329, column: 3, scope: !9649)
!9742 = !DILocation(line: 3331, column: 3, scope: !9649)
!9743 = !DILocation(line: 3338, column: 21, scope: !9744)
!9744 = distinct !DILexicalBlock(scope: !9649, file: !3, line: 3338, column: 3)
!9745 = !DILocation(line: 3338, column: 19, scope: !9744)
!9746 = !DILocation(line: 3338, column: 8, scope: !9744)
!9747 = !DILocation(line: 3338, column: 27, scope: !9748)
!9748 = distinct !DILexicalBlock(scope: !9744, file: !3, line: 3338, column: 3)
!9749 = !DILocation(line: 3338, column: 38, scope: !9748)
!9750 = !DILocation(line: 3338, column: 3, scope: !9744)
!9751 = !DILocalVariable(name: "ml_lo", scope: !9752, file: !3, line: 3340, type: !2375)
!9752 = distinct !DILexicalBlock(scope: !9748, file: !3, line: 3339, column: 5)
!9753 = !DILocation(line: 3340, column: 30, scope: !9752)
!9754 = !DILocation(line: 3340, column: 39, scope: !9752)
!9755 = !DILocation(line: 3340, column: 47, scope: !9752)
!9756 = !DILocation(line: 3340, column: 83, scope: !9752)
!9757 = !DILocation(line: 3340, column: 91, scope: !9752)
!9758 = !DILocation(line: 3340, column: 80, scope: !9752)
!9759 = !DILocalVariable(name: "mh_lo", scope: !9752, file: !3, line: 3341, type: !2375)
!9760 = !DILocation(line: 3341, column: 30, scope: !9752)
!9761 = !DILocation(line: 3341, column: 39, scope: !9752)
!9762 = !DILocation(line: 3341, column: 48, scope: !9752)
!9763 = !DILocation(line: 3341, column: 84, scope: !9752)
!9764 = !DILocation(line: 3341, column: 93, scope: !9752)
!9765 = !DILocation(line: 3341, column: 81, scope: !9752)
!9766 = !DILocation(line: 3342, column: 11, scope: !9767)
!9767 = distinct !DILexicalBlock(scope: !9752, file: !3, line: 3342, column: 11)
!9768 = !DILocation(line: 3342, column: 20, scope: !9767)
!9769 = !DILocation(line: 3342, column: 17, scope: !9767)
!9770 = !DILocation(line: 3342, column: 11, scope: !9752)
!9771 = !DILocation(line: 3343, column: 2, scope: !9767)
!9772 = !DILocation(line: 3345, column: 15, scope: !9752)
!9773 = !DILocation(line: 3346, column: 17, scope: !9752)
!9774 = !DILocation(line: 3346, column: 15, scope: !9752)
!9775 = !DILocation(line: 3347, column: 16, scope: !9752)
!9776 = !DILocation(line: 3348, column: 18, scope: !9752)
!9777 = !DILocation(line: 3348, column: 16, scope: !9752)
!9778 = !DILocation(line: 3349, column: 5, scope: !9752)
!9779 = !DILocation(line: 3338, column: 53, scope: !9748)
!9780 = !DILocation(line: 3338, column: 3, scope: !9748)
!9781 = distinct !{!9781, !9750, !9782}
!9782 = !DILocation(line: 3349, column: 5, scope: !9744)
!9783 = !DILocation(line: 3351, column: 21, scope: !9649)
!9784 = !DILocation(line: 3351, column: 4, scope: !9649)
!9785 = !DILocation(line: 3351, column: 19, scope: !9649)
!9786 = !DILocation(line: 3352, column: 15, scope: !9649)
!9787 = !DILocation(line: 3352, column: 4, scope: !9649)
!9788 = !DILocation(line: 3352, column: 13, scope: !9649)
!9789 = !DILocation(line: 3353, column: 7, scope: !9790)
!9790 = distinct !DILexicalBlock(scope: !9649, file: !3, line: 3353, column: 7)
!9791 = !DILocation(line: 3353, column: 9, scope: !9790)
!9792 = !DILocation(line: 3353, column: 7, scope: !9649)
!9793 = !DILocalVariable(name: "mask", scope: !9794, file: !3, line: 3355, type: !2375)
!9794 = distinct !DILexicalBlock(scope: !9790, file: !3, line: 3354, column: 5)
!9795 = !DILocation(line: 3355, column: 30, scope: !9794)
!9796 = !DILocation(line: 3355, column: 68, scope: !9794)
!9797 = !DILocation(line: 3355, column: 65, scope: !9794)
!9798 = !DILocation(line: 3355, column: 71, scope: !9794)
!9799 = !DILocation(line: 3356, column: 25, scope: !9794)
!9800 = !DILocation(line: 3356, column: 8, scope: !9794)
!9801 = !DILocation(line: 3356, column: 23, scope: !9794)
!9802 = !DILocation(line: 3357, column: 14, scope: !9794)
!9803 = !DILocation(line: 3357, column: 26, scope: !9794)
!9804 = !DILocation(line: 3357, column: 23, scope: !9794)
!9805 = !DILocation(line: 3357, column: 7, scope: !9794)
!9806 = !DILocation(line: 3361, column: 25, scope: !9807)
!9807 = distinct !DILexicalBlock(scope: !9790, file: !3, line: 3360, column: 5)
!9808 = !DILocation(line: 3361, column: 8, scope: !9807)
!9809 = !DILocation(line: 3361, column: 23, scope: !9807)
!9810 = !DILocation(line: 3362, column: 14, scope: !9807)
!9811 = !DILocation(line: 3362, column: 7, scope: !9807)
!9812 = !DILocation(line: 3364, column: 1, scope: !9649)
!9813 = distinct !DISubprogram(name: "expand_mult_highpart", scope: !3, file: !3, line: 3562, type: !9814, scopeLine: 3564, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!9814 = !DISubroutineType(types: !9815)
!9815 = !{!2301, !5, !2301, !2301, !2301, !2325, !2325}
!9816 = !DILocalVariable(name: "mode", arg: 1, scope: !9813, file: !3, line: 3562, type: !5)
!9817 = !DILocation(line: 3562, column: 41, scope: !9813)
!9818 = !DILocalVariable(name: "op0", arg: 2, scope: !9813, file: !3, line: 3562, type: !2301)
!9819 = !DILocation(line: 3562, column: 51, scope: !9813)
!9820 = !DILocalVariable(name: "op1", arg: 3, scope: !9813, file: !3, line: 3562, type: !2301)
!9821 = !DILocation(line: 3562, column: 60, scope: !9813)
!9822 = !DILocalVariable(name: "target", arg: 4, scope: !9813, file: !3, line: 3563, type: !2301)
!9823 = !DILocation(line: 3563, column: 13, scope: !9813)
!9824 = !DILocalVariable(name: "unsignedp", arg: 5, scope: !9813, file: !3, line: 3563, type: !2325)
!9825 = !DILocation(line: 3563, column: 25, scope: !9813)
!9826 = !DILocalVariable(name: "max_cost", arg: 6, scope: !9813, file: !3, line: 3563, type: !2325)
!9827 = !DILocation(line: 3563, column: 40, scope: !9813)
!9828 = !DILocalVariable(name: "wider_mode", scope: !9813, file: !3, line: 3565, type: !5)
!9829 = !DILocation(line: 3565, column: 21, scope: !9813)
!9830 = !DILocation(line: 3565, column: 34, scope: !9813)
!9831 = !DILocalVariable(name: "cnst1", scope: !9813, file: !3, line: 3566, type: !2375)
!9832 = !DILocation(line: 3566, column: 26, scope: !9813)
!9833 = !DILocalVariable(name: "extra_cost", scope: !9813, file: !3, line: 3567, type: !2325)
!9834 = !DILocation(line: 3567, column: 7, scope: !9813)
!9835 = !DILocalVariable(name: "sign_adjust", scope: !9813, file: !3, line: 3568, type: !2535)
!9836 = !DILocation(line: 3568, column: 8, scope: !9813)
!9837 = !DILocalVariable(name: "variant", scope: !9813, file: !3, line: 3569, type: !2225)
!9838 = !DILocation(line: 3569, column: 21, scope: !9813)
!9839 = !DILocalVariable(name: "alg", scope: !9813, file: !3, line: 3570, type: !3348)
!9840 = !DILocation(line: 3570, column: 20, scope: !9813)
!9841 = !DILocalVariable(name: "tem", scope: !9813, file: !3, line: 3571, type: !2301)
!9842 = !DILocation(line: 3571, column: 7, scope: !9813)
!9843 = !DILocalVariable(name: "speed", scope: !9813, file: !3, line: 3572, type: !2535)
!9844 = !DILocation(line: 3572, column: 8, scope: !9813)
!9845 = !DILocation(line: 3572, column: 16, scope: !9813)
!9846 = !DILocation(line: 3574, column: 3, scope: !9813)
!9847 = !DILocation(line: 3576, column: 3, scope: !9813)
!9848 = !DILocation(line: 3578, column: 11, scope: !9813)
!9849 = !DILocation(line: 3578, column: 26, scope: !9813)
!9850 = !DILocation(line: 3578, column: 24, scope: !9813)
!9851 = !DILocation(line: 3578, column: 9, scope: !9813)
!9852 = !DILocation(line: 3584, column: 7, scope: !9853)
!9853 = distinct !DILexicalBlock(scope: !9813, file: !3, line: 3584, column: 7)
!9854 = !DILocation(line: 3584, column: 37, scope: !9853)
!9855 = !DILocation(line: 3584, column: 7, scope: !9813)
!9856 = !DILocation(line: 3585, column: 40, scope: !9853)
!9857 = !DILocation(line: 3585, column: 46, scope: !9853)
!9858 = !DILocation(line: 3585, column: 51, scope: !9853)
!9859 = !DILocation(line: 3585, column: 56, scope: !9853)
!9860 = !DILocation(line: 3586, column: 12, scope: !9853)
!9861 = !DILocation(line: 3586, column: 23, scope: !9853)
!9862 = !DILocation(line: 3585, column: 12, scope: !9853)
!9863 = !DILocation(line: 3585, column: 5, scope: !9853)
!9864 = !DILocation(line: 3588, column: 27, scope: !9813)
!9865 = !DILocation(line: 3588, column: 16, scope: !9813)
!9866 = !DILocation(line: 3588, column: 34, scope: !9813)
!9867 = !DILocation(line: 3588, column: 40, scope: !9813)
!9868 = !DILocation(line: 3588, column: 64, scope: !9813)
!9869 = !DILocation(line: 3588, column: 14, scope: !9813)
!9870 = !DILocation(line: 3591, column: 8, scope: !9871)
!9871 = distinct !DILexicalBlock(scope: !9813, file: !3, line: 3591, column: 7)
!9872 = !DILocation(line: 3591, column: 18, scope: !9871)
!9873 = !DILocation(line: 3591, column: 23, scope: !9871)
!9874 = !DILocation(line: 3591, column: 33, scope: !9871)
!9875 = !DILocation(line: 3591, column: 57, scope: !9871)
!9876 = !DILocation(line: 3591, column: 29, scope: !9871)
!9877 = !DILocation(line: 3591, column: 63, scope: !9871)
!9878 = !DILocation(line: 3591, column: 7, scope: !9813)
!9879 = !DILocation(line: 3593, column: 19, scope: !9880)
!9880 = distinct !DILexicalBlock(scope: !9871, file: !3, line: 3592, column: 5)
!9881 = !DILocation(line: 3594, column: 30, scope: !9880)
!9882 = !DILocation(line: 3594, column: 21, scope: !9880)
!9883 = !DILocation(line: 3594, column: 37, scope: !9880)
!9884 = !DILocation(line: 3594, column: 18, scope: !9880)
!9885 = !DILocation(line: 3595, column: 5, scope: !9880)
!9886 = !DILocation(line: 3598, column: 28, scope: !9887)
!9887 = distinct !DILexicalBlock(scope: !9813, file: !3, line: 3598, column: 7)
!9888 = !DILocation(line: 3598, column: 40, scope: !9887)
!9889 = !DILocation(line: 3599, column: 7, scope: !9887)
!9890 = !DILocation(line: 3599, column: 18, scope: !9887)
!9891 = !DILocation(line: 3599, column: 16, scope: !9887)
!9892 = !DILocation(line: 3598, column: 7, scope: !9887)
!9893 = !DILocation(line: 3598, column: 7, scope: !9813)
!9894 = !DILocation(line: 3603, column: 41, scope: !9895)
!9895 = distinct !DILexicalBlock(scope: !9887, file: !3, line: 3600, column: 5)
!9896 = !DILocation(line: 3603, column: 47, scope: !9895)
!9897 = !DILocation(line: 3603, column: 52, scope: !9895)
!9898 = !DILocation(line: 3603, column: 57, scope: !9895)
!9899 = !DILocation(line: 3603, column: 65, scope: !9895)
!9900 = !DILocation(line: 3604, column: 10, scope: !9895)
!9901 = !DILocation(line: 3604, column: 15, scope: !9895)
!9902 = !DILocation(line: 3604, column: 6, scope: !9895)
!9903 = !DILocation(line: 3604, column: 22, scope: !9895)
!9904 = !DILocation(line: 3604, column: 20, scope: !9895)
!9905 = !DILocation(line: 3603, column: 13, scope: !9895)
!9906 = !DILocation(line: 3603, column: 11, scope: !9895)
!9907 = !DILocation(line: 3605, column: 11, scope: !9908)
!9908 = distinct !DILexicalBlock(scope: !9895, file: !3, line: 3605, column: 11)
!9909 = !DILocation(line: 3605, column: 11, scope: !9895)
!9910 = !DILocation(line: 3606, column: 9, scope: !9908)
!9911 = !DILocation(line: 3606, column: 2, scope: !9908)
!9912 = !DILocation(line: 3608, column: 30, scope: !9895)
!9913 = !DILocation(line: 3608, column: 42, scope: !9895)
!9914 = !DILocation(line: 3608, column: 47, scope: !9895)
!9915 = !DILocation(line: 3608, column: 13, scope: !9895)
!9916 = !DILocation(line: 3608, column: 11, scope: !9895)
!9917 = !DILocation(line: 3609, column: 32, scope: !9895)
!9918 = !DILocation(line: 3609, column: 44, scope: !9895)
!9919 = !DILocation(line: 3609, column: 49, scope: !9895)
!9920 = !DILocation(line: 3609, column: 65, scope: !9895)
!9921 = !DILocation(line: 3609, column: 13, scope: !9895)
!9922 = !DILocation(line: 3609, column: 11, scope: !9895)
!9923 = !DILocation(line: 3610, column: 32, scope: !9895)
!9924 = !DILocation(line: 3610, column: 38, scope: !9895)
!9925 = !DILocation(line: 3610, column: 13, scope: !9895)
!9926 = !DILocation(line: 3610, column: 11, scope: !9895)
!9927 = !DILocation(line: 3613, column: 11, scope: !9928)
!9928 = distinct !DILexicalBlock(scope: !9895, file: !3, line: 3613, column: 11)
!9929 = !DILocation(line: 3613, column: 11, scope: !9895)
!9930 = !DILocation(line: 3614, column: 23, scope: !9928)
!9931 = !DILocation(line: 3614, column: 55, scope: !9928)
!9932 = !DILocation(line: 3614, column: 8, scope: !9928)
!9933 = !DILocation(line: 3614, column: 6, scope: !9928)
!9934 = !DILocation(line: 3614, column: 2, scope: !9928)
!9935 = !DILocation(line: 3616, column: 14, scope: !9895)
!9936 = !DILocation(line: 3616, column: 7, scope: !9895)
!9937 = !DILocation(line: 3618, column: 38, scope: !9813)
!9938 = !DILocation(line: 3618, column: 44, scope: !9813)
!9939 = !DILocation(line: 3618, column: 49, scope: !9813)
!9940 = !DILocation(line: 3618, column: 54, scope: !9813)
!9941 = !DILocation(line: 3619, column: 10, scope: !9813)
!9942 = !DILocation(line: 3619, column: 21, scope: !9813)
!9943 = !DILocation(line: 3618, column: 10, scope: !9813)
!9944 = !DILocation(line: 3618, column: 3, scope: !9813)
!9945 = !DILocation(line: 3620, column: 1, scope: !9813)
!9946 = distinct !DISubprogram(name: "emit_store_flag", scope: !3, file: !3, line: 5445, type: !9467, scopeLine: 5447, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!9947 = !DILocalVariable(name: "target", arg: 1, scope: !9946, file: !3, line: 5445, type: !2301)
!9948 = !DILocation(line: 5445, column: 22, scope: !9946)
!9949 = !DILocalVariable(name: "code", arg: 2, scope: !9946, file: !3, line: 5445, type: !377)
!9950 = !DILocation(line: 5445, column: 44, scope: !9946)
!9951 = !DILocalVariable(name: "op0", arg: 3, scope: !9946, file: !3, line: 5445, type: !2301)
!9952 = !DILocation(line: 5445, column: 54, scope: !9946)
!9953 = !DILocalVariable(name: "op1", arg: 4, scope: !9946, file: !3, line: 5445, type: !2301)
!9954 = !DILocation(line: 5445, column: 63, scope: !9946)
!9955 = !DILocalVariable(name: "mode", arg: 5, scope: !9946, file: !3, line: 5446, type: !5)
!9956 = !DILocation(line: 5446, column: 22, scope: !9946)
!9957 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !9946, file: !3, line: 5446, type: !2325)
!9958 = !DILocation(line: 5446, column: 32, scope: !9946)
!9959 = !DILocalVariable(name: "normalizep", arg: 7, scope: !9946, file: !3, line: 5446, type: !2325)
!9960 = !DILocation(line: 5446, column: 47, scope: !9946)
!9961 = !DILocalVariable(name: "target_mode", scope: !9946, file: !3, line: 5448, type: !5)
!9962 = !DILocation(line: 5448, column: 21, scope: !9946)
!9963 = !DILocation(line: 5448, column: 35, scope: !9946)
!9964 = !DILocation(line: 5448, column: 44, scope: !9946)
!9965 = !DILocalVariable(name: "rcode", scope: !9946, file: !3, line: 5449, type: !377)
!9966 = !DILocation(line: 5449, column: 17, scope: !9946)
!9967 = !DILocalVariable(name: "subtarget", scope: !9946, file: !3, line: 5450, type: !2301)
!9968 = !DILocation(line: 5450, column: 7, scope: !9946)
!9969 = !DILocalVariable(name: "tem", scope: !9946, file: !3, line: 5451, type: !2301)
!9970 = !DILocation(line: 5451, column: 7, scope: !9946)
!9971 = !DILocalVariable(name: "last", scope: !9946, file: !3, line: 5451, type: !2301)
!9972 = !DILocation(line: 5451, column: 12, scope: !9946)
!9973 = !DILocalVariable(name: "trueval", scope: !9946, file: !3, line: 5451, type: !2301)
!9974 = !DILocation(line: 5451, column: 18, scope: !9946)
!9975 = !DILocation(line: 5453, column: 28, scope: !9946)
!9976 = !DILocation(line: 5453, column: 36, scope: !9946)
!9977 = !DILocation(line: 5453, column: 42, scope: !9946)
!9978 = !DILocation(line: 5453, column: 47, scope: !9946)
!9979 = !DILocation(line: 5453, column: 52, scope: !9946)
!9980 = !DILocation(line: 5453, column: 58, scope: !9946)
!9981 = !DILocation(line: 5453, column: 69, scope: !9946)
!9982 = !DILocation(line: 5454, column: 7, scope: !9946)
!9983 = !DILocation(line: 5453, column: 9, scope: !9946)
!9984 = !DILocation(line: 5453, column: 7, scope: !9946)
!9985 = !DILocation(line: 5455, column: 7, scope: !9986)
!9986 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5455, column: 7)
!9987 = !DILocation(line: 5455, column: 7, scope: !9946)
!9988 = !DILocation(line: 5456, column: 12, scope: !9986)
!9989 = !DILocation(line: 5456, column: 5, scope: !9986)
!9990 = !DILocation(line: 5461, column: 7, scope: !9991)
!9991 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5461, column: 7)
!9992 = !DILocation(line: 5461, column: 57, scope: !9991)
!9993 = !DILocation(line: 5461, column: 7, scope: !9946)
!9994 = !DILocation(line: 5462, column: 5, scope: !9991)
!9995 = !DILocation(line: 5467, column: 7, scope: !9996)
!9996 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5467, column: 7)
!9997 = !DILocation(line: 5467, column: 18, scope: !9996)
!9998 = !DILocation(line: 5467, column: 7, scope: !9946)
!9999 = !DILocation(line: 5470, column: 13, scope: !10000)
!10000 = distinct !DILexicalBlock(scope: !10001, file: !3, line: 5469, column: 11)
!10001 = distinct !DILexicalBlock(scope: !9996, file: !3, line: 5468, column: 5)
!10002 = !DILocation(line: 5478, column: 5, scope: !10001)
!10003 = !DILocation(line: 5480, column: 10, scope: !9946)
!10004 = !DILocation(line: 5480, column: 8, scope: !9946)
!10005 = !DILocation(line: 5485, column: 17, scope: !9946)
!10006 = !DILocation(line: 5486, column: 9, scope: !9946)
!10007 = !DILocation(line: 5486, column: 13, scope: !9946)
!10008 = !DILocation(line: 5486, column: 28, scope: !9946)
!10009 = !DILocation(line: 5486, column: 25, scope: !9946)
!10010 = !DILocation(line: 5485, column: 15, scope: !9946)
!10011 = !DILocation(line: 5486, column: 37, scope: !9946)
!10012 = !DILocation(line: 5485, column: 13, scope: !9946)
!10013 = !DILocation(line: 5487, column: 13, scope: !9946)
!10014 = !DILocation(line: 5487, column: 11, scope: !9946)
!10015 = !DILocation(line: 5491, column: 7, scope: !10016)
!10016 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5491, column: 7)
!10017 = !DILocation(line: 5491, column: 29, scope: !10016)
!10018 = !DILocation(line: 5491, column: 7, scope: !9946)
!10019 = !DILocalVariable(name: "first_code", scope: !10020, file: !3, line: 5493, type: !377)
!10020 = distinct !DILexicalBlock(scope: !10016, file: !3, line: 5492, column: 5)
!10021 = !DILocation(line: 5493, column: 21, scope: !10020)
!10022 = !DILocalVariable(name: "and_them", scope: !10020, file: !3, line: 5494, type: !2535)
!10023 = !DILocation(line: 5494, column: 12, scope: !10020)
!10024 = !DILocation(line: 5496, column: 50, scope: !10020)
!10025 = !DILocation(line: 5496, column: 15, scope: !10020)
!10026 = !DILocation(line: 5496, column: 13, scope: !10020)
!10027 = !DILocation(line: 5497, column: 26, scope: !10028)
!10028 = distinct !DILexicalBlock(scope: !10020, file: !3, line: 5497, column: 11)
!10029 = !DILocation(line: 5497, column: 33, scope: !10028)
!10030 = !DILocation(line: 5497, column: 11, scope: !10028)
!10031 = !DILocation(line: 5498, column: 11, scope: !10028)
!10032 = !DILocation(line: 5498, column: 15, scope: !10028)
!10033 = !DILocation(line: 5498, column: 20, scope: !10028)
!10034 = !DILocation(line: 5498, column: 31, scope: !10028)
!10035 = !DILocation(line: 5498, column: 34, scope: !10028)
!10036 = !DILocation(line: 5498, column: 39, scope: !10028)
!10037 = !DILocation(line: 5499, column: 8, scope: !10028)
!10038 = !DILocation(line: 5499, column: 14, scope: !10028)
!10039 = !DILocation(line: 5499, column: 32, scope: !10028)
!10040 = !DILocation(line: 5499, column: 36, scope: !10028)
!10041 = !DILocation(line: 5499, column: 41, scope: !10028)
!10042 = !DILocation(line: 5499, column: 49, scope: !10028)
!10043 = !DILocation(line: 5499, column: 52, scope: !10028)
!10044 = !DILocation(line: 5499, column: 57, scope: !10028)
!10045 = !DILocation(line: 5500, column: 8, scope: !10028)
!10046 = !DILocation(line: 5500, column: 14, scope: !10028)
!10047 = !DILocation(line: 5500, column: 33, scope: !10028)
!10048 = !DILocation(line: 5500, column: 37, scope: !10028)
!10049 = !DILocation(line: 5500, column: 42, scope: !10028)
!10050 = !DILocation(line: 5500, column: 48, scope: !10028)
!10051 = !DILocation(line: 5500, column: 51, scope: !10028)
!10052 = !DILocation(line: 5500, column: 56, scope: !10028)
!10053 = !DILocation(line: 5497, column: 11, scope: !10020)
!10054 = !DILocalVariable(name: "want_add", scope: !10055, file: !3, line: 5502, type: !2325)
!10055 = distinct !DILexicalBlock(scope: !10028, file: !3, line: 5501, column: 2)
!10056 = !DILocation(line: 5502, column: 15, scope: !10055)
!10057 = !DILocation(line: 5502, column: 53, scope: !10055)
!10058 = !DILocation(line: 5502, column: 64, scope: !10055)
!10059 = !DILocation(line: 5503, column: 13, scope: !10055)
!10060 = !DILocation(line: 5506, column: 15, scope: !10061)
!10061 = distinct !DILexicalBlock(scope: !10055, file: !3, line: 5506, column: 15)
!10062 = !DILocation(line: 5507, column: 8, scope: !10061)
!10063 = !DILocation(line: 5507, column: 21, scope: !10061)
!10064 = !DILocation(line: 5508, column: 7, scope: !10061)
!10065 = !DILocation(line: 5507, column: 11, scope: !10061)
!10066 = !DILocation(line: 5508, column: 37, scope: !10061)
!10067 = !DILocation(line: 5506, column: 15, scope: !10055)
!10068 = !DILocation(line: 5510, column: 33, scope: !10069)
!10069 = distinct !DILexicalBlock(scope: !10061, file: !3, line: 5509, column: 6)
!10070 = !DILocation(line: 5510, column: 44, scope: !10069)
!10071 = !DILocation(line: 5510, column: 51, scope: !10069)
!10072 = !DILocation(line: 5510, column: 56, scope: !10069)
!10073 = !DILocation(line: 5510, column: 61, scope: !10069)
!10074 = !DILocation(line: 5511, column: 30, scope: !10069)
!10075 = !DILocation(line: 5510, column: 14, scope: !10069)
!10076 = !DILocation(line: 5510, column: 12, scope: !10069)
!10077 = !DILocation(line: 5512, column: 12, scope: !10078)
!10078 = distinct !DILexicalBlock(scope: !10069, file: !3, line: 5512, column: 12)
!10079 = !DILocation(line: 5512, column: 12, scope: !10069)
!10080 = !DILocation(line: 5513, column: 38, scope: !10078)
!10081 = !DILocation(line: 5513, column: 62, scope: !10078)
!10082 = !DILocation(line: 5514, column: 10, scope: !10078)
!10083 = !DILocation(line: 5515, column: 10, scope: !10078)
!10084 = !DILocation(line: 5513, column: 24, scope: !10078)
!10085 = !DILocation(line: 5513, column: 17, scope: !10078)
!10086 = !DILocation(line: 5516, column: 6, scope: !10069)
!10087 = !DILocation(line: 5517, column: 21, scope: !10088)
!10088 = distinct !DILexicalBlock(scope: !10061, file: !3, line: 5517, column: 20)
!10089 = !DILocation(line: 5518, column: 13, scope: !10088)
!10090 = !DILocation(line: 5518, column: 26, scope: !10088)
!10091 = !DILocation(line: 5519, column: 12, scope: !10088)
!10092 = !DILocation(line: 5518, column: 16, scope: !10088)
!10093 = !DILocation(line: 5519, column: 42, scope: !10088)
!10094 = !DILocation(line: 5517, column: 20, scope: !10061)
!10095 = !DILocation(line: 5521, column: 33, scope: !10096)
!10096 = distinct !DILexicalBlock(scope: !10088, file: !3, line: 5520, column: 6)
!10097 = !DILocation(line: 5521, column: 44, scope: !10096)
!10098 = !DILocation(line: 5521, column: 51, scope: !10096)
!10099 = !DILocation(line: 5521, column: 56, scope: !10096)
!10100 = !DILocation(line: 5521, column: 61, scope: !10096)
!10101 = !DILocation(line: 5522, column: 12, scope: !10096)
!10102 = !DILocation(line: 5522, column: 24, scope: !10096)
!10103 = !DILocation(line: 5521, column: 14, scope: !10096)
!10104 = !DILocation(line: 5521, column: 12, scope: !10096)
!10105 = !DILocation(line: 5523, column: 12, scope: !10106)
!10106 = distinct !DILexicalBlock(scope: !10096, file: !3, line: 5523, column: 12)
!10107 = !DILocation(line: 5523, column: 12, scope: !10096)
!10108 = !DILocation(line: 5524, column: 38, scope: !10106)
!10109 = !DILocation(line: 5524, column: 62, scope: !10106)
!10110 = !DILocation(line: 5524, column: 67, scope: !10106)
!10111 = !DILocation(line: 5525, column: 10, scope: !10106)
!10112 = !DILocation(line: 5525, column: 18, scope: !10106)
!10113 = !DILocation(line: 5525, column: 35, scope: !10106)
!10114 = !DILocation(line: 5524, column: 24, scope: !10106)
!10115 = !DILocation(line: 5524, column: 17, scope: !10106)
!10116 = !DILocation(line: 5526, column: 6, scope: !10096)
!10117 = !DILocation(line: 5527, column: 2, scope: !10055)
!10118 = !DILocation(line: 5529, column: 27, scope: !10020)
!10119 = !DILocation(line: 5529, column: 7, scope: !10020)
!10120 = !DILocation(line: 5532, column: 11, scope: !10121)
!10121 = distinct !DILexicalBlock(scope: !10020, file: !3, line: 5532, column: 11)
!10122 = !DILocation(line: 5532, column: 16, scope: !10121)
!10123 = !DILocation(line: 5532, column: 27, scope: !10121)
!10124 = !DILocation(line: 5532, column: 30, scope: !10121)
!10125 = !DILocation(line: 5532, column: 35, scope: !10121)
!10126 = !DILocation(line: 5532, column: 11, scope: !10020)
!10127 = !DILocation(line: 5533, column: 2, scope: !10121)
!10128 = !DILocation(line: 5535, column: 36, scope: !10020)
!10129 = !DILocation(line: 5535, column: 42, scope: !10020)
!10130 = !DILocation(line: 5535, column: 18, scope: !10020)
!10131 = !DILocation(line: 5535, column: 16, scope: !10020)
!10132 = !DILocation(line: 5539, column: 12, scope: !10133)
!10133 = distinct !DILexicalBlock(scope: !10020, file: !3, line: 5539, column: 11)
!10134 = !DILocation(line: 5539, column: 11, scope: !10020)
!10135 = !DILocation(line: 5541, column: 11, scope: !10136)
!10136 = distinct !DILexicalBlock(scope: !10133, file: !3, line: 5540, column: 2)
!10137 = !DILocation(line: 5542, column: 30, scope: !10136)
!10138 = !DILocation(line: 5542, column: 38, scope: !10136)
!10139 = !DILocation(line: 5542, column: 44, scope: !10136)
!10140 = !DILocation(line: 5542, column: 49, scope: !10136)
!10141 = !DILocation(line: 5542, column: 54, scope: !10136)
!10142 = !DILocation(line: 5542, column: 63, scope: !10136)
!10143 = !DILocation(line: 5543, column: 9, scope: !10136)
!10144 = !DILocation(line: 5542, column: 11, scope: !10136)
!10145 = !DILocation(line: 5542, column: 4, scope: !10136)
!10146 = !DILocation(line: 5549, column: 32, scope: !10020)
!10147 = !DILocation(line: 5549, column: 43, scope: !10020)
!10148 = !DILocation(line: 5549, column: 55, scope: !10020)
!10149 = !DILocation(line: 5549, column: 60, scope: !10020)
!10150 = !DILocation(line: 5549, column: 65, scope: !10020)
!10151 = !DILocation(line: 5550, column: 11, scope: !10020)
!10152 = !DILocation(line: 5550, column: 23, scope: !10020)
!10153 = !DILocation(line: 5549, column: 13, scope: !10020)
!10154 = !DILocation(line: 5549, column: 11, scope: !10020)
!10155 = !DILocation(line: 5551, column: 11, scope: !10156)
!10156 = distinct !DILexicalBlock(scope: !10020, file: !3, line: 5551, column: 11)
!10157 = !DILocation(line: 5551, column: 15, scope: !10156)
!10158 = !DILocation(line: 5551, column: 11, scope: !10020)
!10159 = !DILocation(line: 5552, column: 2, scope: !10156)
!10160 = !DILocation(line: 5554, column: 11, scope: !10161)
!10161 = distinct !DILexicalBlock(scope: !10020, file: !3, line: 5554, column: 11)
!10162 = !DILocation(line: 5554, column: 11, scope: !10020)
!10163 = !DILocation(line: 5555, column: 38, scope: !10161)
!10164 = !DILocation(line: 5555, column: 46, scope: !10161)
!10165 = !DILocation(line: 5555, column: 52, scope: !10161)
!10166 = !DILocation(line: 5555, column: 57, scope: !10161)
!10167 = !DILocation(line: 5555, column: 62, scope: !10161)
!10168 = !DILocation(line: 5556, column: 10, scope: !10161)
!10169 = !DILocation(line: 5556, column: 15, scope: !10161)
!10170 = !DILocation(line: 5556, column: 27, scope: !10161)
!10171 = !DILocation(line: 5555, column: 15, scope: !10161)
!10172 = !DILocation(line: 5555, column: 13, scope: !10161)
!10173 = !DILocation(line: 5555, column: 9, scope: !10161)
!10174 = !DILocation(line: 5558, column: 38, scope: !10161)
!10175 = !DILocation(line: 5558, column: 46, scope: !10161)
!10176 = !DILocation(line: 5558, column: 52, scope: !10161)
!10177 = !DILocation(line: 5558, column: 57, scope: !10161)
!10178 = !DILocation(line: 5558, column: 62, scope: !10161)
!10179 = !DILocation(line: 5559, column: 10, scope: !10161)
!10180 = !DILocation(line: 5559, column: 19, scope: !10161)
!10181 = !DILocation(line: 5559, column: 24, scope: !10161)
!10182 = !DILocation(line: 5558, column: 15, scope: !10161)
!10183 = !DILocation(line: 5558, column: 13, scope: !10161)
!10184 = !DILocation(line: 5561, column: 11, scope: !10185)
!10185 = distinct !DILexicalBlock(scope: !10020, file: !3, line: 5561, column: 11)
!10186 = !DILocation(line: 5561, column: 15, scope: !10185)
!10187 = !DILocation(line: 5561, column: 11, scope: !10020)
!10188 = !DILocation(line: 5562, column: 29, scope: !10185)
!10189 = !DILocation(line: 5562, column: 9, scope: !10185)
!10190 = !DILocation(line: 5563, column: 14, scope: !10020)
!10191 = !DILocation(line: 5563, column: 7, scope: !10020)
!10192 = !DILocation(line: 5571, column: 7, scope: !10193)
!10193 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5571, column: 7)
!10194 = !DILocation(line: 5571, column: 29, scope: !10193)
!10195 = !DILocation(line: 5571, column: 7, scope: !9946)
!10196 = !DILocation(line: 5572, column: 5, scope: !10193)
!10197 = !DILocation(line: 5579, column: 8, scope: !10198)
!10198 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5579, column: 7)
!10199 = !DILocation(line: 5579, column: 13, scope: !10198)
!10200 = !DILocation(line: 5579, column: 19, scope: !10198)
!10201 = !DILocation(line: 5579, column: 22, scope: !10198)
!10202 = !DILocation(line: 5579, column: 27, scope: !10198)
!10203 = !DILocation(line: 5579, column: 34, scope: !10198)
!10204 = !DILocation(line: 5579, column: 37, scope: !10198)
!10205 = !DILocation(line: 5579, column: 44, scope: !10198)
!10206 = !DILocation(line: 5579, column: 41, scope: !10198)
!10207 = !DILocation(line: 5579, column: 7, scope: !9946)
!10208 = !DILocation(line: 5581, column: 27, scope: !10209)
!10209 = distinct !DILexicalBlock(scope: !10198, file: !3, line: 5580, column: 5)
!10210 = !DILocation(line: 5581, column: 44, scope: !10209)
!10211 = !DILocation(line: 5581, column: 49, scope: !10209)
!10212 = !DILocation(line: 5581, column: 54, scope: !10209)
!10213 = !DILocation(line: 5581, column: 13, scope: !10209)
!10214 = !DILocation(line: 5581, column: 11, scope: !10209)
!10215 = !DILocation(line: 5584, column: 11, scope: !10216)
!10216 = distinct !DILexicalBlock(scope: !10209, file: !3, line: 5584, column: 11)
!10217 = !DILocation(line: 5584, column: 15, scope: !10216)
!10218 = !DILocation(line: 5584, column: 11, scope: !10209)
!10219 = !DILocation(line: 5585, column: 22, scope: !10216)
!10220 = !DILocation(line: 5585, column: 39, scope: !10216)
!10221 = !DILocation(line: 5585, column: 44, scope: !10216)
!10222 = !DILocation(line: 5585, column: 49, scope: !10216)
!10223 = !DILocation(line: 5585, column: 8, scope: !10216)
!10224 = !DILocation(line: 5585, column: 6, scope: !10216)
!10225 = !DILocation(line: 5585, column: 2, scope: !10216)
!10226 = !DILocation(line: 5587, column: 11, scope: !10227)
!10227 = distinct !DILexicalBlock(scope: !10209, file: !3, line: 5587, column: 11)
!10228 = !DILocation(line: 5587, column: 15, scope: !10227)
!10229 = !DILocation(line: 5587, column: 11, scope: !10209)
!10230 = !DILocation(line: 5588, column: 25, scope: !10227)
!10231 = !DILocation(line: 5588, column: 33, scope: !10227)
!10232 = !DILocation(line: 5588, column: 39, scope: !10227)
!10233 = !DILocation(line: 5588, column: 44, scope: !10227)
!10234 = !DILocation(line: 5589, column: 11, scope: !10227)
!10235 = !DILocation(line: 5589, column: 17, scope: !10227)
!10236 = !DILocation(line: 5589, column: 28, scope: !10227)
!10237 = !DILocation(line: 5588, column: 8, scope: !10227)
!10238 = !DILocation(line: 5588, column: 6, scope: !10227)
!10239 = !DILocation(line: 5588, column: 2, scope: !10227)
!10240 = !DILocation(line: 5590, column: 11, scope: !10241)
!10241 = distinct !DILexicalBlock(scope: !10209, file: !3, line: 5590, column: 11)
!10242 = !DILocation(line: 5590, column: 15, scope: !10241)
!10243 = !DILocation(line: 5590, column: 11, scope: !10209)
!10244 = !DILocation(line: 5591, column: 9, scope: !10241)
!10245 = !DILocation(line: 5591, column: 2, scope: !10241)
!10246 = !DILocation(line: 5593, column: 27, scope: !10209)
!10247 = !DILocation(line: 5593, column: 7, scope: !10209)
!10248 = !DILocation(line: 5594, column: 5, scope: !10209)
!10249 = !DILocation(line: 5599, column: 30, scope: !9946)
!10250 = !DILocation(line: 5599, column: 11, scope: !9946)
!10251 = !DILocation(line: 5599, column: 9, scope: !9946)
!10252 = !DILocation(line: 5600, column: 22, scope: !10253)
!10253 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5600, column: 7)
!10254 = !DILocation(line: 5600, column: 29, scope: !10253)
!10255 = !DILocation(line: 5600, column: 7, scope: !10253)
!10256 = !DILocation(line: 5601, column: 7, scope: !10253)
!10257 = !DILocation(line: 5601, column: 13, scope: !10253)
!10258 = !DILocation(line: 5601, column: 49, scope: !10253)
!10259 = !DILocation(line: 5601, column: 59, scope: !10253)
!10260 = !DILocation(line: 5602, column: 6, scope: !10253)
!10261 = !DILocation(line: 5602, column: 9, scope: !10253)
!10262 = !DILocation(line: 5602, column: 14, scope: !10253)
!10263 = !DILocation(line: 5603, column: 6, scope: !10253)
!10264 = !DILocation(line: 5603, column: 9, scope: !10253)
!10265 = !DILocation(line: 5603, column: 30, scope: !10253)
!10266 = !DILocation(line: 5604, column: 6, scope: !10253)
!10267 = !DILocation(line: 5604, column: 9, scope: !10253)
!10268 = !DILocation(line: 5604, column: 16, scope: !10253)
!10269 = !DILocation(line: 5604, column: 13, scope: !10253)
!10270 = !DILocation(line: 5600, column: 7, scope: !9946)
!10271 = !DILocalVariable(name: "want_add", scope: !10272, file: !3, line: 5606, type: !2325)
!10272 = distinct !DILexicalBlock(scope: !10253, file: !3, line: 5605, column: 5)
!10273 = !DILocation(line: 5606, column: 11, scope: !10272)
!10274 = !DILocation(line: 5606, column: 49, scope: !10272)
!10275 = !DILocation(line: 5606, column: 60, scope: !10272)
!10276 = !DILocation(line: 5607, column: 9, scope: !10272)
!10277 = !DILocation(line: 5610, column: 11, scope: !10278)
!10278 = distinct !DILexicalBlock(scope: !10272, file: !3, line: 5610, column: 11)
!10279 = !DILocation(line: 5611, column: 4, scope: !10278)
!10280 = !DILocation(line: 5611, column: 17, scope: !10278)
!10281 = !DILocation(line: 5612, column: 10, scope: !10278)
!10282 = !DILocation(line: 5611, column: 7, scope: !10278)
!10283 = !DILocation(line: 5612, column: 40, scope: !10278)
!10284 = !DILocation(line: 5610, column: 11, scope: !10272)
!10285 = !DILocation(line: 5614, column: 29, scope: !10286)
!10286 = distinct !DILexicalBlock(scope: !10278, file: !3, line: 5613, column: 2)
!10287 = !DILocation(line: 5614, column: 40, scope: !10286)
!10288 = !DILocation(line: 5614, column: 47, scope: !10286)
!10289 = !DILocation(line: 5614, column: 52, scope: !10286)
!10290 = !DILocation(line: 5614, column: 57, scope: !10286)
!10291 = !DILocation(line: 5615, column: 26, scope: !10286)
!10292 = !DILocation(line: 5614, column: 10, scope: !10286)
!10293 = !DILocation(line: 5614, column: 8, scope: !10286)
!10294 = !DILocation(line: 5616, column: 8, scope: !10295)
!10295 = distinct !DILexicalBlock(scope: !10286, file: !3, line: 5616, column: 8)
!10296 = !DILocation(line: 5616, column: 12, scope: !10295)
!10297 = !DILocation(line: 5616, column: 8, scope: !10286)
!10298 = !DILocation(line: 5617, column: 33, scope: !10295)
!10299 = !DILocation(line: 5617, column: 57, scope: !10295)
!10300 = !DILocation(line: 5618, column: 5, scope: !10295)
!10301 = !DILocation(line: 5618, column: 27, scope: !10295)
!10302 = !DILocation(line: 5617, column: 19, scope: !10295)
!10303 = !DILocation(line: 5617, column: 17, scope: !10295)
!10304 = !DILocation(line: 5617, column: 13, scope: !10295)
!10305 = !DILocation(line: 5619, column: 2, scope: !10286)
!10306 = !DILocation(line: 5620, column: 17, scope: !10307)
!10307 = distinct !DILexicalBlock(scope: !10278, file: !3, line: 5620, column: 16)
!10308 = !DILocation(line: 5621, column: 9, scope: !10307)
!10309 = !DILocation(line: 5621, column: 22, scope: !10307)
!10310 = !DILocation(line: 5622, column: 8, scope: !10307)
!10311 = !DILocation(line: 5621, column: 12, scope: !10307)
!10312 = !DILocation(line: 5622, column: 38, scope: !10307)
!10313 = !DILocation(line: 5620, column: 16, scope: !10278)
!10314 = !DILocation(line: 5624, column: 29, scope: !10315)
!10315 = distinct !DILexicalBlock(scope: !10307, file: !3, line: 5623, column: 2)
!10316 = !DILocation(line: 5624, column: 40, scope: !10315)
!10317 = !DILocation(line: 5624, column: 47, scope: !10315)
!10318 = !DILocation(line: 5624, column: 52, scope: !10315)
!10319 = !DILocation(line: 5624, column: 57, scope: !10315)
!10320 = !DILocation(line: 5625, column: 8, scope: !10315)
!10321 = !DILocation(line: 5625, column: 20, scope: !10315)
!10322 = !DILocation(line: 5624, column: 10, scope: !10315)
!10323 = !DILocation(line: 5624, column: 8, scope: !10315)
!10324 = !DILocation(line: 5626, column: 8, scope: !10325)
!10325 = distinct !DILexicalBlock(scope: !10315, file: !3, line: 5626, column: 8)
!10326 = !DILocation(line: 5626, column: 12, scope: !10325)
!10327 = !DILocation(line: 5626, column: 8, scope: !10315)
!10328 = !DILocation(line: 5627, column: 33, scope: !10325)
!10329 = !DILocation(line: 5627, column: 57, scope: !10325)
!10330 = !DILocation(line: 5627, column: 62, scope: !10325)
!10331 = !DILocation(line: 5627, column: 71, scope: !10325)
!10332 = !DILocation(line: 5628, column: 5, scope: !10325)
!10333 = !DILocation(line: 5628, column: 22, scope: !10325)
!10334 = !DILocation(line: 5627, column: 19, scope: !10325)
!10335 = !DILocation(line: 5627, column: 17, scope: !10325)
!10336 = !DILocation(line: 5627, column: 13, scope: !10325)
!10337 = !DILocation(line: 5629, column: 2, scope: !10315)
!10338 = !DILocation(line: 5631, column: 11, scope: !10339)
!10339 = distinct !DILexicalBlock(scope: !10272, file: !3, line: 5631, column: 11)
!10340 = !DILocation(line: 5631, column: 15, scope: !10339)
!10341 = !DILocation(line: 5631, column: 11, scope: !10272)
!10342 = !DILocation(line: 5632, column: 9, scope: !10339)
!10343 = !DILocation(line: 5632, column: 2, scope: !10339)
!10344 = !DILocation(line: 5633, column: 27, scope: !10272)
!10345 = !DILocation(line: 5633, column: 7, scope: !10272)
!10346 = !DILocation(line: 5634, column: 5, scope: !10272)
!10347 = !DILocation(line: 5641, column: 7, scope: !10348)
!10348 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5641, column: 7)
!10349 = !DILocation(line: 5641, column: 14, scope: !10348)
!10350 = !DILocation(line: 5641, column: 11, scope: !10348)
!10351 = !DILocation(line: 5642, column: 7, scope: !10348)
!10352 = !DILocation(line: 5642, column: 11, scope: !10348)
!10353 = !DILocation(line: 5642, column: 16, scope: !10348)
!10354 = !DILocation(line: 5642, column: 22, scope: !10348)
!10355 = !DILocation(line: 5642, column: 25, scope: !10348)
!10356 = !DILocation(line: 5642, column: 30, scope: !10348)
!10357 = !DILocation(line: 5643, column: 4, scope: !10348)
!10358 = !DILocation(line: 5643, column: 8, scope: !10348)
!10359 = !DILocation(line: 5644, column: 14, scope: !10348)
!10360 = !DILocation(line: 5644, column: 19, scope: !10348)
!10361 = !DILocation(line: 5644, column: 23, scope: !10348)
!10362 = !DILocation(line: 5644, column: 28, scope: !10348)
!10363 = !DILocation(line: 5644, column: 34, scope: !10348)
!10364 = !DILocation(line: 5644, column: 37, scope: !10348)
!10365 = !DILocation(line: 5644, column: 42, scope: !10348)
!10366 = !DILocation(line: 5641, column: 7, scope: !9946)
!10367 = !DILocation(line: 5645, column: 5, scope: !10348)
!10368 = !DILocation(line: 5650, column: 7, scope: !9946)
!10369 = !DILocation(line: 5655, column: 7, scope: !10370)
!10370 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5655, column: 7)
!10371 = !DILocation(line: 5655, column: 12, scope: !10370)
!10372 = !DILocation(line: 5655, column: 7, scope: !9946)
!10373 = !DILocation(line: 5658, column: 24, scope: !10374)
!10374 = distinct !DILexicalBlock(scope: !10375, file: !3, line: 5658, column: 11)
!10375 = distinct !DILexicalBlock(scope: !10370, file: !3, line: 5656, column: 5)
!10376 = !DILocation(line: 5658, column: 35, scope: !10374)
!10377 = !DILocation(line: 5658, column: 11, scope: !10374)
!10378 = !DILocation(line: 5658, column: 11, scope: !10375)
!10379 = !DILocation(line: 5659, column: 12, scope: !10374)
!10380 = !DILocation(line: 5659, column: 2, scope: !10374)
!10381 = !DILocation(line: 5661, column: 27, scope: !10375)
!10382 = !DILocation(line: 5661, column: 44, scope: !10375)
!10383 = !DILocation(line: 5661, column: 49, scope: !10375)
!10384 = !DILocation(line: 5661, column: 61, scope: !10375)
!10385 = !DILocation(line: 5661, column: 13, scope: !10375)
!10386 = !DILocation(line: 5661, column: 11, scope: !10375)
!10387 = !DILocation(line: 5663, column: 11, scope: !10388)
!10388 = distinct !DILexicalBlock(scope: !10375, file: !3, line: 5663, column: 11)
!10389 = !DILocation(line: 5663, column: 11, scope: !10375)
!10390 = !DILocation(line: 5664, column: 22, scope: !10388)
!10391 = !DILocation(line: 5664, column: 39, scope: !10388)
!10392 = !DILocation(line: 5664, column: 44, scope: !10388)
!10393 = !DILocation(line: 5664, column: 49, scope: !10388)
!10394 = !DILocation(line: 5664, column: 8, scope: !10388)
!10395 = !DILocation(line: 5664, column: 6, scope: !10388)
!10396 = !DILocation(line: 5664, column: 2, scope: !10388)
!10397 = !DILocation(line: 5666, column: 5, scope: !10375)
!10398 = !DILocation(line: 5671, column: 7, scope: !10399)
!10399 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5671, column: 7)
!10400 = !DILocation(line: 5671, column: 12, scope: !10399)
!10401 = !DILocation(line: 5671, column: 7, scope: !9946)
!10402 = !DILocation(line: 5673, column: 24, scope: !10403)
!10403 = distinct !DILexicalBlock(scope: !10404, file: !3, line: 5673, column: 11)
!10404 = distinct !DILexicalBlock(scope: !10399, file: !3, line: 5672, column: 5)
!10405 = !DILocation(line: 5673, column: 35, scope: !10403)
!10406 = !DILocation(line: 5673, column: 11, scope: !10403)
!10407 = !DILocation(line: 5673, column: 11, scope: !10404)
!10408 = !DILocation(line: 5674, column: 12, scope: !10403)
!10409 = !DILocation(line: 5674, column: 2, scope: !10403)
!10410 = !DILocation(line: 5676, column: 40, scope: !10404)
!10411 = !DILocation(line: 5676, column: 46, scope: !10404)
!10412 = !DILocation(line: 5677, column: 6, scope: !10404)
!10413 = !DILocation(line: 5678, column: 6, scope: !10404)
!10414 = !DILocation(line: 5676, column: 13, scope: !10404)
!10415 = !DILocation(line: 5676, column: 11, scope: !10404)
!10416 = !DILocation(line: 5679, column: 27, scope: !10404)
!10417 = !DILocation(line: 5679, column: 44, scope: !10404)
!10418 = !DILocation(line: 5679, column: 49, scope: !10404)
!10419 = !DILocation(line: 5679, column: 54, scope: !10404)
!10420 = !DILocation(line: 5679, column: 13, scope: !10404)
!10421 = !DILocation(line: 5679, column: 11, scope: !10404)
!10422 = !DILocation(line: 5681, column: 5, scope: !10404)
!10423 = !DILocation(line: 5683, column: 7, scope: !10424)
!10424 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5683, column: 7)
!10425 = !DILocation(line: 5683, column: 12, scope: !10424)
!10426 = !DILocation(line: 5683, column: 18, scope: !10424)
!10427 = !DILocation(line: 5683, column: 21, scope: !10424)
!10428 = !DILocation(line: 5683, column: 26, scope: !10424)
!10429 = !DILocation(line: 5683, column: 7, scope: !9946)
!10430 = !DILocation(line: 5700, column: 11, scope: !10431)
!10431 = distinct !DILexicalBlock(scope: !10432, file: !3, line: 5700, column: 11)
!10432 = distinct !DILexicalBlock(scope: !10424, file: !3, line: 5684, column: 5)
!10433 = !DILocation(line: 5700, column: 44, scope: !10431)
!10434 = !DILocation(line: 5700, column: 54, scope: !10431)
!10435 = !DILocation(line: 5700, column: 11, scope: !10432)
!10436 = !DILocation(line: 5701, column: 21, scope: !10431)
!10437 = !DILocation(line: 5701, column: 38, scope: !10431)
!10438 = !DILocation(line: 5701, column: 43, scope: !10431)
!10439 = !DILocation(line: 5701, column: 8, scope: !10431)
!10440 = !DILocation(line: 5701, column: 6, scope: !10431)
!10441 = !DILocation(line: 5701, column: 2, scope: !10431)
!10442 = !DILocation(line: 5702, column: 16, scope: !10443)
!10443 = distinct !DILexicalBlock(scope: !10431, file: !3, line: 5702, column: 16)
!10444 = !DILocation(line: 5702, column: 49, scope: !10443)
!10445 = !DILocation(line: 5702, column: 59, scope: !10443)
!10446 = !DILocation(line: 5702, column: 16, scope: !10431)
!10447 = !DILocation(line: 5703, column: 21, scope: !10443)
!10448 = !DILocation(line: 5703, column: 38, scope: !10443)
!10449 = !DILocation(line: 5703, column: 43, scope: !10443)
!10450 = !DILocation(line: 5703, column: 8, scope: !10443)
!10451 = !DILocation(line: 5703, column: 6, scope: !10443)
!10452 = !DILocation(line: 5703, column: 2, scope: !10443)
!10453 = !DILocation(line: 5704, column: 16, scope: !10454)
!10454 = distinct !DILexicalBlock(scope: !10443, file: !3, line: 5704, column: 16)
!10455 = !DILocation(line: 5704, column: 37, scope: !10454)
!10456 = !DILocation(line: 5704, column: 16, scope: !10443)
!10457 = !DILocation(line: 5706, column: 25, scope: !10458)
!10458 = distinct !DILexicalBlock(scope: !10454, file: !3, line: 5705, column: 2)
!10459 = !DILocation(line: 5706, column: 36, scope: !10458)
!10460 = !DILocation(line: 5706, column: 42, scope: !10458)
!10461 = !DILocation(line: 5706, column: 10, scope: !10458)
!10462 = !DILocation(line: 5706, column: 8, scope: !10458)
!10463 = !DILocation(line: 5707, column: 11, scope: !10458)
!10464 = !DILocation(line: 5707, column: 9, scope: !10458)
!10465 = !DILocation(line: 5708, column: 2, scope: !10458)
!10466 = !DILocation(line: 5710, column: 11, scope: !10467)
!10467 = distinct !DILexicalBlock(scope: !10432, file: !3, line: 5710, column: 11)
!10468 = !DILocation(line: 5710, column: 15, scope: !10467)
!10469 = !DILocation(line: 5710, column: 11, scope: !10432)
!10470 = !DILocation(line: 5712, column: 8, scope: !10471)
!10471 = distinct !DILexicalBlock(scope: !10472, file: !3, line: 5712, column: 8)
!10472 = distinct !DILexicalBlock(scope: !10467, file: !3, line: 5711, column: 2)
!10473 = !DILocation(line: 5712, column: 13, scope: !10471)
!10474 = !DILocation(line: 5712, column: 8, scope: !10472)
!10475 = !DILocation(line: 5713, column: 26, scope: !10471)
!10476 = !DILocation(line: 5713, column: 43, scope: !10471)
!10477 = !DILocation(line: 5713, column: 48, scope: !10471)
!10478 = !DILocation(line: 5713, column: 60, scope: !10471)
!10479 = !DILocation(line: 5713, column: 12, scope: !10471)
!10480 = !DILocation(line: 5713, column: 10, scope: !10471)
!10481 = !DILocation(line: 5713, column: 6, scope: !10471)
!10482 = !DILocation(line: 5716, column: 25, scope: !10471)
!10483 = !DILocation(line: 5716, column: 42, scope: !10471)
!10484 = !DILocation(line: 5716, column: 47, scope: !10471)
!10485 = !DILocation(line: 5716, column: 12, scope: !10471)
!10486 = !DILocation(line: 5716, column: 10, scope: !10471)
!10487 = !DILocation(line: 5717, column: 2, scope: !10472)
!10488 = !DILocation(line: 5724, column: 11, scope: !10489)
!10489 = distinct !DILexicalBlock(scope: !10432, file: !3, line: 5724, column: 11)
!10490 = !DILocation(line: 5724, column: 15, scope: !10489)
!10491 = !DILocation(line: 5725, column: 4, scope: !10489)
!10492 = !DILocation(line: 5725, column: 8, scope: !10489)
!10493 = !DILocation(line: 5725, column: 13, scope: !10489)
!10494 = !DILocation(line: 5726, column: 8, scope: !10489)
!10495 = !DILocation(line: 5726, column: 11, scope: !10489)
!10496 = !DILocation(line: 5727, column: 23, scope: !10489)
!10497 = !DILocation(line: 5724, column: 11, scope: !10432)
!10498 = !DILocation(line: 5729, column: 21, scope: !10499)
!10499 = distinct !DILexicalBlock(scope: !10500, file: !3, line: 5729, column: 8)
!10500 = distinct !DILexicalBlock(scope: !10489, file: !3, line: 5728, column: 2)
!10501 = !DILocation(line: 5729, column: 32, scope: !10499)
!10502 = !DILocation(line: 5729, column: 8, scope: !10499)
!10503 = !DILocation(line: 5729, column: 8, scope: !10500)
!10504 = !DILocation(line: 5730, column: 16, scope: !10499)
!10505 = !DILocation(line: 5730, column: 6, scope: !10499)
!10506 = !DILocation(line: 5732, column: 23, scope: !10500)
!10507 = !DILocation(line: 5732, column: 40, scope: !10500)
!10508 = !DILocation(line: 5732, column: 45, scope: !10500)
!10509 = !DILocation(line: 5732, column: 10, scope: !10500)
!10510 = !DILocation(line: 5732, column: 8, scope: !10500)
!10511 = !DILocation(line: 5733, column: 24, scope: !10500)
!10512 = !DILocation(line: 5733, column: 41, scope: !10500)
!10513 = !DILocation(line: 5733, column: 46, scope: !10500)
!10514 = !DILocation(line: 5733, column: 51, scope: !10500)
!10515 = !DILocation(line: 5733, column: 10, scope: !10500)
!10516 = !DILocation(line: 5733, column: 8, scope: !10500)
!10517 = !DILocation(line: 5736, column: 8, scope: !10518)
!10518 = distinct !DILexicalBlock(scope: !10500, file: !3, line: 5736, column: 8)
!10519 = !DILocation(line: 5736, column: 12, scope: !10518)
!10520 = !DILocation(line: 5736, column: 15, scope: !10518)
!10521 = !DILocation(line: 5736, column: 20, scope: !10518)
!10522 = !DILocation(line: 5736, column: 8, scope: !10500)
!10523 = !DILocation(line: 5737, column: 25, scope: !10518)
!10524 = !DILocation(line: 5737, column: 47, scope: !10518)
!10525 = !DILocation(line: 5737, column: 52, scope: !10518)
!10526 = !DILocation(line: 5737, column: 12, scope: !10518)
!10527 = !DILocation(line: 5737, column: 10, scope: !10518)
!10528 = !DILocation(line: 5737, column: 6, scope: !10518)
!10529 = !DILocation(line: 5738, column: 2, scope: !10500)
!10530 = !DILocation(line: 5739, column: 5, scope: !10432)
!10531 = !DILocation(line: 5741, column: 7, scope: !10532)
!10532 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5741, column: 7)
!10533 = !DILocation(line: 5741, column: 11, scope: !10532)
!10534 = !DILocation(line: 5741, column: 14, scope: !10532)
!10535 = !DILocation(line: 5741, column: 7, scope: !9946)
!10536 = !DILocation(line: 5742, column: 38, scope: !10532)
!10537 = !DILocation(line: 5742, column: 44, scope: !10532)
!10538 = !DILocation(line: 5743, column: 4, scope: !10532)
!10539 = !DILocation(line: 5744, column: 4, scope: !10532)
!10540 = !DILocation(line: 5744, column: 15, scope: !10532)
!10541 = !DILocation(line: 5744, column: 26, scope: !10532)
!10542 = !DILocation(line: 5742, column: 11, scope: !10532)
!10543 = !DILocation(line: 5742, column: 9, scope: !10532)
!10544 = !DILocation(line: 5742, column: 5, scope: !10532)
!10545 = !DILocation(line: 5746, column: 7, scope: !10546)
!10546 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 5746, column: 7)
!10547 = !DILocation(line: 5746, column: 7, scope: !9946)
!10548 = !DILocation(line: 5748, column: 12, scope: !10549)
!10549 = distinct !DILexicalBlock(scope: !10550, file: !3, line: 5748, column: 11)
!10550 = distinct !DILexicalBlock(scope: !10546, file: !3, line: 5747, column: 5)
!10551 = !DILocation(line: 5748, column: 11, scope: !10550)
!10552 = !DILocation(line: 5750, column: 16, scope: !10553)
!10553 = distinct !DILexicalBlock(scope: !10549, file: !3, line: 5750, column: 16)
!10554 = !DILocation(line: 5750, column: 34, scope: !10553)
!10555 = !DILocation(line: 5750, column: 31, scope: !10553)
!10556 = !DILocation(line: 5750, column: 16, scope: !10549)
!10557 = !DILocation(line: 5752, column: 18, scope: !10558)
!10558 = distinct !DILexicalBlock(scope: !10553, file: !3, line: 5751, column: 2)
!10559 = !DILocation(line: 5752, column: 26, scope: !10558)
!10560 = !DILocation(line: 5752, column: 4, scope: !10558)
!10561 = !DILocation(line: 5753, column: 10, scope: !10558)
!10562 = !DILocation(line: 5753, column: 8, scope: !10558)
!10563 = !DILocation(line: 5754, column: 2, scope: !10558)
!10564 = !DILocation(line: 5755, column: 17, scope: !10565)
!10565 = distinct !DILexicalBlock(scope: !10553, file: !3, line: 5755, column: 16)
!10566 = !DILocation(line: 5755, column: 16, scope: !10553)
!10567 = !DILocation(line: 5757, column: 20, scope: !10568)
!10568 = distinct !DILexicalBlock(scope: !10565, file: !3, line: 5756, column: 2)
!10569 = !DILocation(line: 5757, column: 28, scope: !10568)
!10570 = !DILocation(line: 5757, column: 4, scope: !10568)
!10571 = !DILocation(line: 5758, column: 10, scope: !10568)
!10572 = !DILocation(line: 5758, column: 8, scope: !10568)
!10573 = !DILocation(line: 5759, column: 2, scope: !10568)
!10574 = !DILocation(line: 5760, column: 5, scope: !10550)
!10575 = !DILocation(line: 5762, column: 25, scope: !10546)
!10576 = !DILocation(line: 5762, column: 5, scope: !10546)
!10577 = !DILocation(line: 5764, column: 10, scope: !9946)
!10578 = !DILocation(line: 5764, column: 3, scope: !9946)
!10579 = !DILocation(line: 5765, column: 1, scope: !9946)
!10580 = distinct !DISubprogram(name: "expand_smod_pow2", scope: !3, file: !3, line: 3626, type: !10581, scopeLine: 3627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!10581 = !DISubroutineType(types: !10582)
!10582 = !{!2301, !5, !2301, !2299}
!10583 = !DILocalVariable(name: "mode", arg: 1, scope: !10580, file: !3, line: 3626, type: !5)
!10584 = !DILocation(line: 3626, column: 37, scope: !10580)
!10585 = !DILocalVariable(name: "op0", arg: 2, scope: !10580, file: !3, line: 3626, type: !2301)
!10586 = !DILocation(line: 3626, column: 47, scope: !10580)
!10587 = !DILocalVariable(name: "d", arg: 3, scope: !10580, file: !3, line: 3626, type: !2299)
!10588 = !DILocation(line: 3626, column: 66, scope: !10580)
!10589 = !DILocalVariable(name: "masklow", scope: !10580, file: !3, line: 3628, type: !2375)
!10590 = !DILocation(line: 3628, column: 26, scope: !10580)
!10591 = !DILocalVariable(name: "maskhigh", scope: !10580, file: !3, line: 3628, type: !2375)
!10592 = !DILocation(line: 3628, column: 35, scope: !10580)
!10593 = !DILocalVariable(name: "result", scope: !10580, file: !3, line: 3629, type: !2301)
!10594 = !DILocation(line: 3629, column: 7, scope: !10580)
!10595 = !DILocalVariable(name: "temp", scope: !10580, file: !3, line: 3629, type: !2301)
!10596 = !DILocation(line: 3629, column: 15, scope: !10580)
!10597 = !DILocalVariable(name: "shift", scope: !10580, file: !3, line: 3629, type: !2301)
!10598 = !DILocation(line: 3629, column: 21, scope: !10580)
!10599 = !DILocalVariable(name: "label", scope: !10580, file: !3, line: 3629, type: !2301)
!10600 = !DILocation(line: 3629, column: 28, scope: !10580)
!10601 = !DILocalVariable(name: "logd", scope: !10580, file: !3, line: 3630, type: !2325)
!10602 = !DILocation(line: 3630, column: 7, scope: !10580)
!10603 = !DILocation(line: 3632, column: 22, scope: !10580)
!10604 = !DILocation(line: 3632, column: 10, scope: !10580)
!10605 = !DILocation(line: 3632, column: 8, scope: !10580)
!10606 = !DILocation(line: 3633, column: 25, scope: !10580)
!10607 = !DILocation(line: 3633, column: 12, scope: !10580)
!10608 = !DILocation(line: 3633, column: 10, scope: !10580)
!10609 = !DILocation(line: 3636, column: 7, scope: !10610)
!10610 = distinct !DILexicalBlock(scope: !10580, file: !3, line: 3636, column: 7)
!10611 = !DILocation(line: 3636, column: 57, scope: !10610)
!10612 = !DILocation(line: 3637, column: 7, scope: !10610)
!10613 = !DILocation(line: 3637, column: 10, scope: !10610)
!10614 = !DILocation(line: 3636, column: 7, scope: !10580)
!10615 = !DILocalVariable(name: "signmask", scope: !10616, file: !3, line: 3639, type: !2301)
!10616 = distinct !DILexicalBlock(scope: !10610, file: !3, line: 3638, column: 5)
!10617 = !DILocation(line: 3639, column: 11, scope: !10616)
!10618 = !DILocation(line: 3639, column: 39, scope: !10616)
!10619 = !DILocation(line: 3639, column: 51, scope: !10616)
!10620 = !DILocation(line: 3639, column: 56, scope: !10616)
!10621 = !DILocation(line: 3640, column: 11, scope: !10616)
!10622 = !DILocation(line: 3639, column: 22, scope: !10616)
!10623 = !DILocation(line: 3641, column: 11, scope: !10624)
!10624 = distinct !DILexicalBlock(scope: !10616, file: !3, line: 3641, column: 11)
!10625 = !DILocation(line: 3641, column: 11, scope: !10616)
!10626 = !DILocation(line: 3643, column: 26, scope: !10627)
!10627 = distinct !DILexicalBlock(scope: !10624, file: !3, line: 3642, column: 2)
!10628 = !DILocation(line: 3643, column: 32, scope: !10627)
!10629 = !DILocation(line: 3643, column: 15, scope: !10627)
!10630 = !DILocation(line: 3643, column: 13, scope: !10627)
!10631 = !DILocation(line: 3644, column: 36, scope: !10627)
!10632 = !DILocation(line: 3644, column: 33, scope: !10627)
!10633 = !DILocation(line: 3644, column: 42, scope: !10627)
!10634 = !DILocation(line: 3644, column: 12, scope: !10627)
!10635 = !DILocation(line: 3645, column: 12, scope: !10627)
!10636 = !DILocation(line: 3645, column: 10, scope: !10627)
!10637 = !DILocation(line: 3652, column: 11, scope: !10627)
!10638 = !DILocation(line: 3652, column: 9, scope: !10627)
!10639 = !DILocation(line: 3653, column: 8, scope: !10640)
!10640 = distinct !DILexicalBlock(scope: !10627, file: !3, line: 3653, column: 8)
!10641 = !DILocation(line: 3653, column: 42, scope: !10640)
!10642 = !DILocation(line: 3653, column: 52, scope: !10640)
!10643 = !DILocation(line: 3654, column: 8, scope: !10640)
!10644 = !DILocation(line: 3654, column: 21, scope: !10640)
!10645 = !DILocation(line: 3654, column: 32, scope: !10640)
!10646 = !DILocation(line: 3654, column: 11, scope: !10640)
!10647 = !DILocation(line: 3654, column: 62, scope: !10640)
!10648 = !DILocation(line: 3653, column: 8, scope: !10627)
!10649 = !DILocation(line: 3656, column: 29, scope: !10650)
!10650 = distinct !DILexicalBlock(scope: !10640, file: !3, line: 3655, column: 6)
!10651 = !DILocation(line: 3656, column: 46, scope: !10650)
!10652 = !DILocation(line: 3656, column: 51, scope: !10650)
!10653 = !DILocation(line: 3656, column: 15, scope: !10650)
!10654 = !DILocation(line: 3656, column: 13, scope: !10650)
!10655 = !DILocation(line: 3658, column: 29, scope: !10650)
!10656 = !DILocation(line: 3658, column: 46, scope: !10650)
!10657 = !DILocation(line: 3658, column: 52, scope: !10650)
!10658 = !DILocation(line: 3658, column: 15, scope: !10650)
!10659 = !DILocation(line: 3658, column: 13, scope: !10650)
!10660 = !DILocation(line: 3660, column: 29, scope: !10650)
!10661 = !DILocation(line: 3660, column: 46, scope: !10650)
!10662 = !DILocation(line: 3660, column: 52, scope: !10650)
!10663 = !DILocation(line: 3660, column: 15, scope: !10650)
!10664 = !DILocation(line: 3660, column: 13, scope: !10650)
!10665 = !DILocation(line: 3662, column: 29, scope: !10650)
!10666 = !DILocation(line: 3662, column: 46, scope: !10650)
!10667 = !DILocation(line: 3662, column: 52, scope: !10650)
!10668 = !DILocation(line: 3662, column: 15, scope: !10650)
!10669 = !DILocation(line: 3662, column: 13, scope: !10650)
!10670 = !DILocation(line: 3664, column: 29, scope: !10650)
!10671 = !DILocation(line: 3664, column: 46, scope: !10650)
!10672 = !DILocation(line: 3664, column: 52, scope: !10650)
!10673 = !DILocation(line: 3664, column: 15, scope: !10650)
!10674 = !DILocation(line: 3664, column: 13, scope: !10650)
!10675 = !DILocation(line: 3666, column: 6, scope: !10650)
!10676 = !DILocation(line: 3669, column: 33, scope: !10677)
!10677 = distinct !DILexicalBlock(scope: !10640, file: !3, line: 3668, column: 6)
!10678 = !DILocation(line: 3669, column: 51, scope: !10677)
!10679 = !DILocation(line: 3669, column: 61, scope: !10677)
!10680 = !DILocation(line: 3669, column: 19, scope: !10677)
!10681 = !DILocation(line: 3669, column: 17, scope: !10677)
!10682 = !DILocation(line: 3671, column: 30, scope: !10677)
!10683 = !DILocation(line: 3671, column: 36, scope: !10677)
!10684 = !DILocation(line: 3671, column: 19, scope: !10677)
!10685 = !DILocation(line: 3671, column: 17, scope: !10677)
!10686 = !DILocation(line: 3673, column: 29, scope: !10677)
!10687 = !DILocation(line: 3673, column: 46, scope: !10677)
!10688 = !DILocation(line: 3673, column: 51, scope: !10677)
!10689 = !DILocation(line: 3673, column: 15, scope: !10677)
!10690 = !DILocation(line: 3673, column: 13, scope: !10677)
!10691 = !DILocation(line: 3675, column: 29, scope: !10677)
!10692 = !DILocation(line: 3675, column: 46, scope: !10677)
!10693 = !DILocation(line: 3675, column: 52, scope: !10677)
!10694 = !DILocation(line: 3675, column: 15, scope: !10677)
!10695 = !DILocation(line: 3675, column: 13, scope: !10677)
!10696 = !DILocation(line: 3677, column: 29, scope: !10677)
!10697 = !DILocation(line: 3677, column: 46, scope: !10677)
!10698 = !DILocation(line: 3677, column: 52, scope: !10677)
!10699 = !DILocation(line: 3677, column: 15, scope: !10677)
!10700 = !DILocation(line: 3677, column: 13, scope: !10677)
!10701 = !DILocation(line: 3680, column: 11, scope: !10627)
!10702 = !DILocation(line: 3680, column: 4, scope: !10627)
!10703 = !DILocation(line: 3682, column: 5, scope: !10616)
!10704 = !DILocation(line: 3689, column: 35, scope: !10580)
!10705 = !DILocation(line: 3689, column: 32, scope: !10580)
!10706 = !DILocation(line: 3689, column: 41, scope: !10580)
!10707 = !DILocation(line: 3689, column: 11, scope: !10580)
!10708 = !DILocation(line: 3690, column: 7, scope: !10709)
!10709 = distinct !DILexicalBlock(scope: !10580, file: !3, line: 3690, column: 7)
!10710 = !DILocation(line: 3690, column: 31, scope: !10709)
!10711 = !DILocation(line: 3690, column: 7, scope: !10580)
!10712 = !DILocation(line: 3692, column: 41, scope: !10713)
!10713 = distinct !DILexicalBlock(scope: !10709, file: !3, line: 3691, column: 5)
!10714 = !DILocation(line: 3692, column: 65, scope: !10713)
!10715 = !DILocation(line: 3692, column: 37, scope: !10713)
!10716 = !DILocation(line: 3692, column: 15, scope: !10713)
!10717 = !DILocation(line: 3693, column: 16, scope: !10713)
!10718 = !DILocation(line: 3694, column: 5, scope: !10713)
!10719 = !DILocation(line: 3697, column: 8, scope: !10709)
!10720 = !DILocation(line: 3697, column: 32, scope: !10709)
!10721 = !DILocation(line: 3697, column: 57, scope: !10709)
!10722 = !DILocation(line: 3697, column: 4, scope: !10709)
!10723 = !DILocation(line: 3696, column: 14, scope: !10709)
!10724 = !DILocation(line: 3699, column: 24, scope: !10580)
!10725 = !DILocation(line: 3699, column: 41, scope: !10580)
!10726 = !DILocation(line: 3700, column: 30, scope: !10580)
!10727 = !DILocation(line: 3700, column: 39, scope: !10580)
!10728 = !DILocation(line: 3700, column: 49, scope: !10580)
!10729 = !DILocation(line: 3700, column: 10, scope: !10580)
!10730 = !DILocation(line: 3701, column: 10, scope: !10580)
!10731 = !DILocation(line: 3699, column: 10, scope: !10580)
!10732 = !DILocation(line: 3699, column: 8, scope: !10580)
!10733 = !DILocation(line: 3702, column: 7, scope: !10734)
!10734 = distinct !DILexicalBlock(scope: !10580, file: !3, line: 3702, column: 7)
!10735 = !DILocation(line: 3702, column: 15, scope: !10734)
!10736 = !DILocation(line: 3702, column: 12, scope: !10734)
!10737 = !DILocation(line: 3702, column: 7, scope: !10580)
!10738 = !DILocation(line: 3703, column: 21, scope: !10734)
!10739 = !DILocation(line: 3703, column: 29, scope: !10734)
!10740 = !DILocation(line: 3703, column: 5, scope: !10734)
!10741 = !DILocation(line: 3705, column: 11, scope: !10580)
!10742 = !DILocation(line: 3705, column: 9, scope: !10580)
!10743 = !DILocation(line: 3706, column: 20, scope: !10580)
!10744 = !DILocation(line: 3706, column: 28, scope: !10580)
!10745 = !DILocation(line: 3706, column: 44, scope: !10580)
!10746 = !DILocation(line: 3706, column: 50, scope: !10580)
!10747 = !DILocation(line: 3706, column: 3, scope: !10580)
!10748 = !DILocation(line: 3708, column: 24, scope: !10580)
!10749 = !DILocation(line: 3708, column: 41, scope: !10580)
!10750 = !DILocation(line: 3708, column: 49, scope: !10580)
!10751 = !DILocation(line: 3708, column: 61, scope: !10580)
!10752 = !DILocation(line: 3708, column: 10, scope: !10580)
!10753 = !DILocation(line: 3708, column: 8, scope: !10580)
!10754 = !DILocation(line: 3710, column: 35, scope: !10580)
!10755 = !DILocation(line: 3710, column: 32, scope: !10580)
!10756 = !DILocation(line: 3710, column: 11, scope: !10580)
!10757 = !DILocation(line: 3711, column: 12, scope: !10580)
!10758 = !DILocation(line: 3712, column: 24, scope: !10580)
!10759 = !DILocation(line: 3712, column: 41, scope: !10580)
!10760 = !DILocation(line: 3713, column: 30, scope: !10580)
!10761 = !DILocation(line: 3713, column: 39, scope: !10580)
!10762 = !DILocation(line: 3713, column: 49, scope: !10580)
!10763 = !DILocation(line: 3713, column: 10, scope: !10580)
!10764 = !DILocation(line: 3714, column: 10, scope: !10580)
!10765 = !DILocation(line: 3712, column: 10, scope: !10580)
!10766 = !DILocation(line: 3712, column: 8, scope: !10580)
!10767 = !DILocation(line: 3715, column: 24, scope: !10580)
!10768 = !DILocation(line: 3715, column: 41, scope: !10580)
!10769 = !DILocation(line: 3715, column: 47, scope: !10580)
!10770 = !DILocation(line: 3715, column: 59, scope: !10580)
!10771 = !DILocation(line: 3715, column: 10, scope: !10580)
!10772 = !DILocation(line: 3715, column: 8, scope: !10580)
!10773 = !DILocation(line: 3717, column: 7, scope: !10774)
!10774 = distinct !DILexicalBlock(scope: !10580, file: !3, line: 3717, column: 7)
!10775 = !DILocation(line: 3717, column: 15, scope: !10774)
!10776 = !DILocation(line: 3717, column: 12, scope: !10774)
!10777 = !DILocation(line: 3717, column: 7, scope: !10580)
!10778 = !DILocation(line: 3718, column: 21, scope: !10774)
!10779 = !DILocation(line: 3718, column: 29, scope: !10774)
!10780 = !DILocation(line: 3718, column: 5, scope: !10774)
!10781 = !DILocation(line: 3719, column: 15, scope: !10580)
!10782 = !DILocation(line: 3719, column: 3, scope: !10580)
!10783 = !DILocation(line: 3720, column: 10, scope: !10580)
!10784 = !DILocation(line: 3720, column: 3, scope: !10580)
!10785 = !DILocation(line: 3721, column: 1, scope: !10580)
!10786 = distinct !DISubprogram(name: "expand_sdiv_pow2", scope: !3, file: !3, line: 3727, type: !10581, scopeLine: 3728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!10787 = !DILocalVariable(name: "mode", arg: 1, scope: !10786, file: !3, line: 3727, type: !5)
!10788 = !DILocation(line: 3727, column: 37, scope: !10786)
!10789 = !DILocalVariable(name: "op0", arg: 2, scope: !10786, file: !3, line: 3727, type: !2301)
!10790 = !DILocation(line: 3727, column: 47, scope: !10786)
!10791 = !DILocalVariable(name: "d", arg: 3, scope: !10786, file: !3, line: 3727, type: !2299)
!10792 = !DILocation(line: 3727, column: 66, scope: !10786)
!10793 = !DILocalVariable(name: "temp", scope: !10786, file: !3, line: 3729, type: !2301)
!10794 = !DILocation(line: 3729, column: 7, scope: !10786)
!10795 = !DILocalVariable(name: "label", scope: !10786, file: !3, line: 3729, type: !2301)
!10796 = !DILocation(line: 3729, column: 13, scope: !10786)
!10797 = !DILocalVariable(name: "shift", scope: !10786, file: !3, line: 3730, type: !2422)
!10798 = !DILocation(line: 3730, column: 8, scope: !10786)
!10799 = !DILocalVariable(name: "logd", scope: !10786, file: !3, line: 3731, type: !2325)
!10800 = !DILocation(line: 3731, column: 7, scope: !10786)
!10801 = !DILocation(line: 3733, column: 22, scope: !10786)
!10802 = !DILocation(line: 3733, column: 10, scope: !10786)
!10803 = !DILocation(line: 3733, column: 8, scope: !10786)
!10804 = !DILocation(line: 3734, column: 37, scope: !10786)
!10805 = !DILocation(line: 3734, column: 11, scope: !10786)
!10806 = !DILocation(line: 3734, column: 9, scope: !10786)
!10807 = !DILocation(line: 3736, column: 7, scope: !10808)
!10808 = distinct !DILexicalBlock(scope: !10786, file: !3, line: 3736, column: 7)
!10809 = !DILocation(line: 3736, column: 9, scope: !10808)
!10810 = !DILocation(line: 3737, column: 7, scope: !10808)
!10811 = !DILocation(line: 3737, column: 10, scope: !10808)
!10812 = !DILocation(line: 3738, column: 16, scope: !10808)
!10813 = !DILocation(line: 3736, column: 7, scope: !10786)
!10814 = !DILocation(line: 3740, column: 27, scope: !10815)
!10815 = distinct !DILexicalBlock(scope: !10808, file: !3, line: 3739, column: 5)
!10816 = !DILocation(line: 3740, column: 14, scope: !10815)
!10817 = !DILocation(line: 3740, column: 12, scope: !10815)
!10818 = !DILocation(line: 3741, column: 31, scope: !10815)
!10819 = !DILocation(line: 3741, column: 41, scope: !10815)
!10820 = !DILocation(line: 3741, column: 46, scope: !10815)
!10821 = !DILocation(line: 3741, column: 58, scope: !10815)
!10822 = !DILocation(line: 3741, column: 14, scope: !10815)
!10823 = !DILocation(line: 3741, column: 12, scope: !10815)
!10824 = !DILocation(line: 3742, column: 28, scope: !10815)
!10825 = !DILocation(line: 3742, column: 45, scope: !10815)
!10826 = !DILocation(line: 3742, column: 51, scope: !10815)
!10827 = !DILocation(line: 3742, column: 14, scope: !10815)
!10828 = !DILocation(line: 3742, column: 12, scope: !10815)
!10829 = !DILocation(line: 3744, column: 41, scope: !10815)
!10830 = !DILocation(line: 3744, column: 47, scope: !10815)
!10831 = !DILocation(line: 3744, column: 53, scope: !10815)
!10832 = !DILocation(line: 3744, column: 14, scope: !10815)
!10833 = !DILocation(line: 3744, column: 7, scope: !10815)
!10834 = !DILocation(line: 3748, column: 7, scope: !10835)
!10835 = distinct !DILexicalBlock(scope: !10786, file: !3, line: 3748, column: 7)
!10836 = !DILocation(line: 3749, column: 7, scope: !10835)
!10837 = !DILocation(line: 3748, column: 7, scope: !10786)
!10838 = !DILocalVariable(name: "temp2", scope: !10839, file: !3, line: 3751, type: !2301)
!10839 = distinct !DILexicalBlock(scope: !10835, file: !3, line: 3750, column: 5)
!10840 = !DILocation(line: 3751, column: 11, scope: !10839)
!10841 = !DILocation(line: 3756, column: 7, scope: !10839)
!10842 = !DILocation(line: 3758, column: 7, scope: !10839)
!10843 = !DILocation(line: 3759, column: 33, scope: !10839)
!10844 = !DILocation(line: 3759, column: 39, scope: !10839)
!10845 = !DILocation(line: 3759, column: 15, scope: !10839)
!10846 = !DILocation(line: 3759, column: 13, scope: !10839)
!10847 = !DILocation(line: 3760, column: 28, scope: !10839)
!10848 = !DILocation(line: 3760, column: 45, scope: !10839)
!10849 = !DILocation(line: 3760, column: 52, scope: !10839)
!10850 = !DILocation(line: 3760, column: 14, scope: !10839)
!10851 = !DILocation(line: 3760, column: 12, scope: !10839)
!10852 = !DILocation(line: 3762, column: 25, scope: !10839)
!10853 = !DILocation(line: 3762, column: 31, scope: !10839)
!10854 = !DILocation(line: 3762, column: 14, scope: !10839)
!10855 = !DILocation(line: 3762, column: 12, scope: !10839)
!10856 = !DILocation(line: 3765, column: 38, scope: !10839)
!10857 = !DILocation(line: 3765, column: 49, scope: !10839)
!10858 = !DILocation(line: 3765, column: 56, scope: !10839)
!10859 = !DILocation(line: 3766, column: 10, scope: !10839)
!10860 = !DILocation(line: 3766, column: 16, scope: !10839)
!10861 = !DILocation(line: 3766, column: 22, scope: !10839)
!10862 = !DILocation(line: 3766, column: 29, scope: !10839)
!10863 = !DILocation(line: 3765, column: 15, scope: !10839)
!10864 = !DILocation(line: 3765, column: 13, scope: !10839)
!10865 = !DILocation(line: 3767, column: 11, scope: !10866)
!10866 = distinct !DILexicalBlock(scope: !10839, file: !3, line: 3767, column: 11)
!10867 = !DILocation(line: 3767, column: 11, scope: !10839)
!10868 = !DILocalVariable(name: "seq", scope: !10869, file: !3, line: 3769, type: !2301)
!10869 = distinct !DILexicalBlock(scope: !10866, file: !3, line: 3768, column: 2)
!10870 = !DILocation(line: 3769, column: 8, scope: !10869)
!10871 = !DILocation(line: 3769, column: 14, scope: !10869)
!10872 = !DILocation(line: 3770, column: 4, scope: !10869)
!10873 = !DILocation(line: 3771, column: 15, scope: !10869)
!10874 = !DILocation(line: 3771, column: 4, scope: !10869)
!10875 = !DILocation(line: 3772, column: 38, scope: !10869)
!10876 = !DILocation(line: 3772, column: 44, scope: !10869)
!10877 = !DILocation(line: 3772, column: 51, scope: !10869)
!10878 = !DILocation(line: 3772, column: 11, scope: !10869)
!10879 = !DILocation(line: 3772, column: 4, scope: !10869)
!10880 = !DILocation(line: 3774, column: 7, scope: !10839)
!10881 = !DILocation(line: 3775, column: 5, scope: !10839)
!10882 = !DILocation(line: 3778, column: 7, scope: !10883)
!10883 = distinct !DILexicalBlock(scope: !10786, file: !3, line: 3778, column: 7)
!10884 = !DILocation(line: 3779, column: 13, scope: !10883)
!10885 = !DILocation(line: 3778, column: 7, scope: !10786)
!10886 = !DILocalVariable(name: "ushift", scope: !10887, file: !3, line: 3781, type: !2325)
!10887 = distinct !DILexicalBlock(scope: !10883, file: !3, line: 3780, column: 5)
!10888 = !DILocation(line: 3781, column: 11, scope: !10887)
!10889 = !DILocation(line: 3781, column: 20, scope: !10887)
!10890 = !DILocation(line: 3781, column: 46, scope: !10887)
!10891 = !DILocation(line: 3781, column: 44, scope: !10887)
!10892 = !DILocation(line: 3783, column: 27, scope: !10887)
!10893 = !DILocation(line: 3783, column: 14, scope: !10887)
!10894 = !DILocation(line: 3783, column: 12, scope: !10887)
!10895 = !DILocation(line: 3784, column: 31, scope: !10887)
!10896 = !DILocation(line: 3784, column: 41, scope: !10887)
!10897 = !DILocation(line: 3784, column: 46, scope: !10887)
!10898 = !DILocation(line: 3784, column: 58, scope: !10887)
!10899 = !DILocation(line: 3784, column: 14, scope: !10887)
!10900 = !DILocation(line: 3784, column: 12, scope: !10887)
!10901 = !DILocation(line: 3785, column: 22, scope: !10902)
!10902 = distinct !DILexicalBlock(scope: !10887, file: !3, line: 3785, column: 11)
!10903 = !DILocation(line: 3785, column: 11, scope: !10902)
!10904 = !DILocation(line: 3785, column: 52, scope: !10902)
!10905 = !DILocation(line: 3785, column: 58, scope: !10902)
!10906 = !DILocation(line: 3785, column: 66, scope: !10902)
!10907 = !DILocation(line: 3785, column: 11, scope: !10887)
!10908 = !DILocation(line: 3786, column: 23, scope: !10902)
!10909 = !DILocation(line: 3786, column: 40, scope: !10902)
!10910 = !DILocation(line: 3786, column: 46, scope: !10902)
!10911 = !DILocation(line: 3786, column: 9, scope: !10902)
!10912 = !DILocation(line: 3786, column: 7, scope: !10902)
!10913 = !DILocation(line: 3786, column: 2, scope: !10902)
!10914 = !DILocation(line: 3789, column: 36, scope: !10902)
!10915 = !DILocation(line: 3789, column: 42, scope: !10902)
!10916 = !DILocation(line: 3790, column: 35, scope: !10902)
!10917 = !DILocation(line: 3790, column: 9, scope: !10902)
!10918 = !DILocation(line: 3789, column: 9, scope: !10902)
!10919 = !DILocation(line: 3789, column: 7, scope: !10902)
!10920 = !DILocation(line: 3792, column: 28, scope: !10887)
!10921 = !DILocation(line: 3792, column: 45, scope: !10887)
!10922 = !DILocation(line: 3792, column: 51, scope: !10887)
!10923 = !DILocation(line: 3792, column: 14, scope: !10887)
!10924 = !DILocation(line: 3792, column: 12, scope: !10887)
!10925 = !DILocation(line: 3794, column: 41, scope: !10887)
!10926 = !DILocation(line: 3794, column: 47, scope: !10887)
!10927 = !DILocation(line: 3794, column: 53, scope: !10887)
!10928 = !DILocation(line: 3794, column: 14, scope: !10887)
!10929 = !DILocation(line: 3794, column: 7, scope: !10887)
!10930 = !DILocation(line: 3797, column: 11, scope: !10786)
!10931 = !DILocation(line: 3797, column: 9, scope: !10786)
!10932 = !DILocation(line: 3798, column: 28, scope: !10786)
!10933 = !DILocation(line: 3798, column: 34, scope: !10786)
!10934 = !DILocation(line: 3798, column: 10, scope: !10786)
!10935 = !DILocation(line: 3798, column: 8, scope: !10786)
!10936 = !DILocation(line: 3799, column: 20, scope: !10786)
!10937 = !DILocation(line: 3799, column: 26, scope: !10786)
!10938 = !DILocation(line: 3799, column: 42, scope: !10786)
!10939 = !DILocation(line: 3799, column: 48, scope: !10786)
!10940 = !DILocation(line: 3799, column: 3, scope: !10786)
!10941 = !DILocation(line: 3800, column: 15, scope: !10786)
!10942 = !DILocation(line: 3800, column: 21, scope: !10786)
!10943 = !DILocation(line: 3800, column: 3, scope: !10786)
!10944 = !DILocation(line: 3801, column: 15, scope: !10786)
!10945 = !DILocation(line: 3801, column: 3, scope: !10786)
!10946 = !DILocation(line: 3802, column: 37, scope: !10786)
!10947 = !DILocation(line: 3802, column: 43, scope: !10786)
!10948 = !DILocation(line: 3802, column: 49, scope: !10786)
!10949 = !DILocation(line: 3802, column: 10, scope: !10786)
!10950 = !DILocation(line: 3802, column: 3, scope: !10786)
!10951 = !DILocation(line: 3803, column: 1, scope: !10786)
!10952 = distinct !DISubprogram(name: "do_cmp_and_jump", scope: !3, file: !3, line: 5846, type: !10953, scopeLine: 5848, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!10953 = !DISubroutineType(types: !10954)
!10954 = !{null, !2301, !2301, !377, !5, !2301}
!10955 = !DILocalVariable(name: "arg1", arg: 1, scope: !10952, file: !3, line: 5846, type: !2301)
!10956 = !DILocation(line: 5846, column: 22, scope: !10952)
!10957 = !DILocalVariable(name: "arg2", arg: 2, scope: !10952, file: !3, line: 5846, type: !2301)
!10958 = !DILocation(line: 5846, column: 32, scope: !10952)
!10959 = !DILocalVariable(name: "op", arg: 3, scope: !10952, file: !3, line: 5846, type: !377)
!10960 = !DILocation(line: 5846, column: 52, scope: !10952)
!10961 = !DILocalVariable(name: "mode", arg: 4, scope: !10952, file: !3, line: 5846, type: !5)
!10962 = !DILocation(line: 5846, column: 74, scope: !10952)
!10963 = !DILocalVariable(name: "label", arg: 5, scope: !10952, file: !3, line: 5847, type: !2301)
!10964 = !DILocation(line: 5847, column: 8, scope: !10952)
!10965 = !DILocalVariable(name: "unsignedp", scope: !10952, file: !3, line: 5849, type: !2325)
!10966 = !DILocation(line: 5849, column: 7, scope: !10952)
!10967 = !DILocation(line: 5849, column: 20, scope: !10952)
!10968 = !DILocation(line: 5849, column: 23, scope: !10952)
!10969 = !DILocation(line: 5849, column: 30, scope: !10952)
!10970 = !DILocation(line: 5849, column: 33, scope: !10952)
!10971 = !DILocation(line: 5849, column: 36, scope: !10952)
!10972 = !DILocation(line: 5849, column: 43, scope: !10952)
!10973 = !DILocation(line: 5849, column: 46, scope: !10952)
!10974 = !DILocation(line: 5849, column: 49, scope: !10952)
!10975 = !DILocation(line: 5849, column: 56, scope: !10952)
!10976 = !DILocation(line: 5849, column: 59, scope: !10952)
!10977 = !DILocation(line: 5849, column: 62, scope: !10952)
!10978 = !DILocation(line: 5850, column: 28, scope: !10952)
!10979 = !DILocation(line: 5850, column: 34, scope: !10952)
!10980 = !DILocation(line: 5850, column: 40, scope: !10952)
!10981 = !DILocation(line: 5850, column: 44, scope: !10952)
!10982 = !DILocation(line: 5850, column: 55, scope: !10952)
!10983 = !DILocation(line: 5851, column: 27, scope: !10952)
!10984 = !DILocation(line: 5850, column: 3, scope: !10952)
!10985 = !DILocation(line: 5852, column: 1, scope: !10952)
!10986 = distinct !DISubprogram(name: "invert_mod2n", scope: !3, file: !3, line: 3370, type: !10987, scopeLine: 3371, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!10987 = !DISubroutineType(types: !10988)
!10988 = !{!2375, !2375, !2325}
!10989 = !DILocalVariable(name: "x", arg: 1, scope: !10986, file: !3, line: 3370, type: !2375)
!10990 = !DILocation(line: 3370, column: 38, scope: !10986)
!10991 = !DILocalVariable(name: "n", arg: 2, scope: !10986, file: !3, line: 3370, type: !2325)
!10992 = !DILocation(line: 3370, column: 45, scope: !10986)
!10993 = !DILocalVariable(name: "mask", scope: !10986, file: !3, line: 3378, type: !2375)
!10994 = !DILocation(line: 3378, column: 26, scope: !10986)
!10995 = !DILocalVariable(name: "y", scope: !10986, file: !3, line: 3379, type: !2375)
!10996 = !DILocation(line: 3379, column: 26, scope: !10986)
!10997 = !DILocation(line: 3379, column: 30, scope: !10986)
!10998 = !DILocalVariable(name: "nbit", scope: !10986, file: !3, line: 3380, type: !2325)
!10999 = !DILocation(line: 3380, column: 7, scope: !10986)
!11000 = !DILocation(line: 3382, column: 11, scope: !10986)
!11001 = !DILocation(line: 3382, column: 13, scope: !10986)
!11002 = !DILocation(line: 3384, column: 37, scope: !10986)
!11003 = !DILocation(line: 3384, column: 34, scope: !10986)
!11004 = !DILocation(line: 3384, column: 40, scope: !10986)
!11005 = !DILocation(line: 3382, column: 8, scope: !10986)
!11006 = !DILocation(line: 3386, column: 3, scope: !10986)
!11007 = !DILocation(line: 3386, column: 10, scope: !10986)
!11008 = !DILocation(line: 3386, column: 17, scope: !10986)
!11009 = !DILocation(line: 3386, column: 15, scope: !10986)
!11010 = !DILocation(line: 3388, column: 11, scope: !11011)
!11011 = distinct !DILexicalBlock(scope: !10986, file: !3, line: 3387, column: 5)
!11012 = !DILocation(line: 3388, column: 20, scope: !11011)
!11013 = !DILocation(line: 3388, column: 22, scope: !11011)
!11014 = !DILocation(line: 3388, column: 21, scope: !11011)
!11015 = !DILocation(line: 3388, column: 18, scope: !11011)
!11016 = !DILocation(line: 3388, column: 13, scope: !11011)
!11017 = !DILocation(line: 3388, column: 27, scope: !11011)
!11018 = !DILocation(line: 3388, column: 25, scope: !11011)
!11019 = !DILocation(line: 3388, column: 9, scope: !11011)
!11020 = !DILocation(line: 3389, column: 12, scope: !11011)
!11021 = distinct !{!11021, !11006, !11022}
!11022 = !DILocation(line: 3390, column: 5, scope: !10986)
!11023 = !DILocation(line: 3391, column: 10, scope: !10986)
!11024 = !DILocation(line: 3391, column: 3, scope: !10986)
!11025 = distinct !DISubprogram(name: "emit_store_flag_1", scope: !3, file: !3, line: 5239, type: !11026, scopeLine: 5242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!11026 = !DISubroutineType(types: !11027)
!11027 = !{!2301, !2301, !377, !2301, !2301, !5, !2325, !2325, !5}
!11028 = !DILocalVariable(name: "target", arg: 1, scope: !11025, file: !3, line: 5239, type: !2301)
!11029 = !DILocation(line: 5239, column: 24, scope: !11025)
!11030 = !DILocalVariable(name: "code", arg: 2, scope: !11025, file: !3, line: 5239, type: !377)
!11031 = !DILocation(line: 5239, column: 46, scope: !11025)
!11032 = !DILocalVariable(name: "op0", arg: 3, scope: !11025, file: !3, line: 5239, type: !2301)
!11033 = !DILocation(line: 5239, column: 56, scope: !11025)
!11034 = !DILocalVariable(name: "op1", arg: 4, scope: !11025, file: !3, line: 5239, type: !2301)
!11035 = !DILocation(line: 5239, column: 65, scope: !11025)
!11036 = !DILocalVariable(name: "mode", arg: 5, scope: !11025, file: !3, line: 5240, type: !5)
!11037 = !DILocation(line: 5240, column: 24, scope: !11025)
!11038 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !11025, file: !3, line: 5240, type: !2325)
!11039 = !DILocation(line: 5240, column: 34, scope: !11025)
!11040 = !DILocalVariable(name: "normalizep", arg: 7, scope: !11025, file: !3, line: 5240, type: !2325)
!11041 = !DILocation(line: 5240, column: 49, scope: !11025)
!11042 = !DILocalVariable(name: "target_mode", arg: 8, scope: !11025, file: !3, line: 5241, type: !5)
!11043 = !DILocation(line: 5241, column: 24, scope: !11025)
!11044 = !DILocalVariable(name: "subtarget", scope: !11025, file: !3, line: 5243, type: !2301)
!11045 = !DILocation(line: 5243, column: 7, scope: !11025)
!11046 = !DILocalVariable(name: "icode", scope: !11025, file: !3, line: 5244, type: !711)
!11047 = !DILocation(line: 5244, column: 18, scope: !11025)
!11048 = !DILocalVariable(name: "compare_mode", scope: !11025, file: !3, line: 5245, type: !5)
!11049 = !DILocation(line: 5245, column: 21, scope: !11025)
!11050 = !DILocalVariable(name: "mclass", scope: !11025, file: !3, line: 5246, type: !520)
!11051 = !DILocation(line: 5246, column: 19, scope: !11025)
!11052 = !DILocalVariable(name: "scode", scope: !11025, file: !3, line: 5247, type: !377)
!11053 = !DILocation(line: 5247, column: 17, scope: !11025)
!11054 = !DILocalVariable(name: "tem", scope: !11025, file: !3, line: 5248, type: !2301)
!11055 = !DILocation(line: 5248, column: 7, scope: !11025)
!11056 = !DILocation(line: 5250, column: 7, scope: !11057)
!11057 = distinct !DILexicalBlock(scope: !11025, file: !3, line: 5250, column: 7)
!11058 = !DILocation(line: 5250, column: 7, scope: !11025)
!11059 = !DILocation(line: 5251, column: 32, scope: !11057)
!11060 = !DILocation(line: 5251, column: 12, scope: !11057)
!11061 = !DILocation(line: 5251, column: 10, scope: !11057)
!11062 = !DILocation(line: 5251, column: 5, scope: !11057)
!11063 = !DILocation(line: 5252, column: 27, scope: !11025)
!11064 = !DILocation(line: 5252, column: 11, scope: !11025)
!11065 = !DILocation(line: 5252, column: 9, scope: !11025)
!11066 = !DILocation(line: 5257, column: 36, scope: !11067)
!11067 = distinct !DILexicalBlock(scope: !11025, file: !3, line: 5257, column: 7)
!11068 = !DILocation(line: 5257, column: 41, scope: !11067)
!11069 = !DILocation(line: 5257, column: 7, scope: !11067)
!11070 = !DILocation(line: 5257, column: 7, scope: !11025)
!11071 = !DILocation(line: 5259, column: 13, scope: !11072)
!11072 = distinct !DILexicalBlock(scope: !11067, file: !3, line: 5258, column: 5)
!11073 = !DILocation(line: 5259, column: 11, scope: !11072)
!11074 = !DILocation(line: 5260, column: 13, scope: !11072)
!11075 = !DILocation(line: 5260, column: 11, scope: !11072)
!11076 = !DILocation(line: 5261, column: 13, scope: !11072)
!11077 = !DILocation(line: 5261, column: 11, scope: !11072)
!11078 = !DILocation(line: 5262, column: 30, scope: !11072)
!11079 = !DILocation(line: 5262, column: 14, scope: !11072)
!11080 = !DILocation(line: 5262, column: 12, scope: !11072)
!11081 = !DILocation(line: 5263, column: 5, scope: !11072)
!11082 = !DILocation(line: 5265, column: 7, scope: !11083)
!11083 = distinct !DILexicalBlock(scope: !11025, file: !3, line: 5265, column: 7)
!11084 = !DILocation(line: 5265, column: 12, scope: !11083)
!11085 = !DILocation(line: 5265, column: 7, scope: !11025)
!11086 = !DILocation(line: 5266, column: 12, scope: !11083)
!11087 = !DILocation(line: 5266, column: 10, scope: !11083)
!11088 = !DILocation(line: 5266, column: 5, scope: !11083)
!11089 = !DILocation(line: 5272, column: 11, scope: !11025)
!11090 = !DILocation(line: 5272, column: 3, scope: !11025)
!11091 = !DILocation(line: 5275, column: 11, scope: !11092)
!11092 = distinct !DILexicalBlock(scope: !11093, file: !3, line: 5275, column: 11)
!11093 = distinct !DILexicalBlock(scope: !11025, file: !3, line: 5273, column: 5)
!11094 = !DILocation(line: 5275, column: 18, scope: !11092)
!11095 = !DILocation(line: 5275, column: 15, scope: !11092)
!11096 = !DILocation(line: 5275, column: 11, scope: !11093)
!11097 = !DILocation(line: 5276, column: 8, scope: !11092)
!11098 = !DILocation(line: 5276, column: 6, scope: !11092)
!11099 = !DILocation(line: 5276, column: 25, scope: !11092)
!11100 = !DILocation(line: 5276, column: 2, scope: !11092)
!11101 = !DILocation(line: 5277, column: 7, scope: !11093)
!11102 = !DILocation(line: 5279, column: 11, scope: !11103)
!11103 = distinct !DILexicalBlock(scope: !11093, file: !3, line: 5279, column: 11)
!11104 = !DILocation(line: 5279, column: 18, scope: !11103)
!11105 = !DILocation(line: 5279, column: 15, scope: !11103)
!11106 = !DILocation(line: 5279, column: 11, scope: !11093)
!11107 = !DILocation(line: 5280, column: 8, scope: !11103)
!11108 = !DILocation(line: 5280, column: 6, scope: !11103)
!11109 = !DILocation(line: 5280, column: 25, scope: !11103)
!11110 = !DILocation(line: 5280, column: 2, scope: !11103)
!11111 = !DILocation(line: 5281, column: 7, scope: !11093)
!11112 = !DILocation(line: 5283, column: 11, scope: !11113)
!11113 = distinct !DILexicalBlock(scope: !11093, file: !3, line: 5283, column: 11)
!11114 = !DILocation(line: 5283, column: 18, scope: !11113)
!11115 = !DILocation(line: 5283, column: 15, scope: !11113)
!11116 = !DILocation(line: 5283, column: 11, scope: !11093)
!11117 = !DILocation(line: 5284, column: 8, scope: !11113)
!11118 = !DILocation(line: 5284, column: 6, scope: !11113)
!11119 = !DILocation(line: 5284, column: 25, scope: !11113)
!11120 = !DILocation(line: 5284, column: 2, scope: !11113)
!11121 = !DILocation(line: 5285, column: 7, scope: !11093)
!11122 = !DILocation(line: 5287, column: 11, scope: !11123)
!11123 = distinct !DILexicalBlock(scope: !11093, file: !3, line: 5287, column: 11)
!11124 = !DILocation(line: 5287, column: 18, scope: !11123)
!11125 = !DILocation(line: 5287, column: 15, scope: !11123)
!11126 = !DILocation(line: 5287, column: 11, scope: !11093)
!11127 = !DILocation(line: 5288, column: 8, scope: !11123)
!11128 = !DILocation(line: 5288, column: 6, scope: !11123)
!11129 = !DILocation(line: 5288, column: 25, scope: !11123)
!11130 = !DILocation(line: 5288, column: 2, scope: !11123)
!11131 = !DILocation(line: 5289, column: 7, scope: !11093)
!11132 = !DILocation(line: 5291, column: 11, scope: !11133)
!11133 = distinct !DILexicalBlock(scope: !11093, file: !3, line: 5291, column: 11)
!11134 = !DILocation(line: 5291, column: 18, scope: !11133)
!11135 = !DILocation(line: 5291, column: 15, scope: !11133)
!11136 = !DILocation(line: 5291, column: 11, scope: !11093)
!11137 = !DILocation(line: 5292, column: 8, scope: !11133)
!11138 = !DILocation(line: 5292, column: 6, scope: !11133)
!11139 = !DILocation(line: 5292, column: 25, scope: !11133)
!11140 = !DILocation(line: 5292, column: 2, scope: !11133)
!11141 = !DILocation(line: 5293, column: 7, scope: !11093)
!11142 = !DILocation(line: 5295, column: 11, scope: !11143)
!11143 = distinct !DILexicalBlock(scope: !11093, file: !3, line: 5295, column: 11)
!11144 = !DILocation(line: 5295, column: 18, scope: !11143)
!11145 = !DILocation(line: 5295, column: 15, scope: !11143)
!11146 = !DILocation(line: 5295, column: 11, scope: !11093)
!11147 = !DILocation(line: 5296, column: 8, scope: !11143)
!11148 = !DILocation(line: 5296, column: 6, scope: !11143)
!11149 = !DILocation(line: 5296, column: 25, scope: !11143)
!11150 = !DILocation(line: 5296, column: 2, scope: !11143)
!11151 = !DILocation(line: 5297, column: 7, scope: !11093)
!11152 = !DILocation(line: 5299, column: 7, scope: !11093)
!11153 = !DILocation(line: 5304, column: 7, scope: !11154)
!11154 = distinct !DILexicalBlock(scope: !11025, file: !3, line: 5304, column: 7)
!11155 = !DILocation(line: 5304, column: 31, scope: !11154)
!11156 = !DILocation(line: 5305, column: 7, scope: !11154)
!11157 = !DILocation(line: 5305, column: 10, scope: !11154)
!11158 = !DILocation(line: 5305, column: 32, scope: !11154)
!11159 = !DILocation(line: 5306, column: 7, scope: !11154)
!11160 = !DILocation(line: 5306, column: 12, scope: !11154)
!11161 = !DILocation(line: 5306, column: 24, scope: !11154)
!11162 = !DILocation(line: 5306, column: 29, scope: !11154)
!11163 = !DILocation(line: 5304, column: 7, scope: !11025)
!11164 = !DILocation(line: 5308, column: 12, scope: !11165)
!11165 = distinct !DILexicalBlock(scope: !11166, file: !3, line: 5308, column: 11)
!11166 = distinct !DILexicalBlock(scope: !11154, file: !3, line: 5307, column: 5)
!11167 = !DILocation(line: 5308, column: 17, scope: !11165)
!11168 = !DILocation(line: 5308, column: 23, scope: !11165)
!11169 = !DILocation(line: 5308, column: 26, scope: !11165)
!11170 = !DILocation(line: 5308, column: 31, scope: !11165)
!11171 = !DILocation(line: 5309, column: 4, scope: !11165)
!11172 = !DILocation(line: 5309, column: 8, scope: !11165)
!11173 = !DILocation(line: 5309, column: 15, scope: !11165)
!11174 = !DILocation(line: 5309, column: 12, scope: !11165)
!11175 = !DILocation(line: 5309, column: 26, scope: !11165)
!11176 = !DILocation(line: 5309, column: 29, scope: !11165)
!11177 = !DILocation(line: 5309, column: 36, scope: !11165)
!11178 = !DILocation(line: 5309, column: 33, scope: !11165)
!11179 = !DILocation(line: 5308, column: 11, scope: !11166)
!11180 = !DILocalVariable(name: "op00", scope: !11181, file: !3, line: 5311, type: !2301)
!11181 = distinct !DILexicalBlock(scope: !11165, file: !3, line: 5310, column: 2)
!11182 = !DILocation(line: 5311, column: 8, scope: !11181)
!11183 = !DILocalVariable(name: "op01", scope: !11181, file: !3, line: 5311, type: !2301)
!11184 = !DILocation(line: 5311, column: 14, scope: !11181)
!11185 = !DILocation(line: 5315, column: 32, scope: !11181)
!11186 = !DILocation(line: 5315, column: 43, scope: !11181)
!11187 = !DILocation(line: 5315, column: 48, scope: !11181)
!11188 = !DILocation(line: 5315, column: 11, scope: !11181)
!11189 = !DILocation(line: 5315, column: 9, scope: !11181)
!11190 = !DILocation(line: 5316, column: 32, scope: !11181)
!11191 = !DILocation(line: 5316, column: 43, scope: !11181)
!11192 = !DILocation(line: 5316, column: 48, scope: !11181)
!11193 = !DILocation(line: 5316, column: 11, scope: !11181)
!11194 = !DILocation(line: 5316, column: 9, scope: !11181)
!11195 = !DILocation(line: 5317, column: 24, scope: !11181)
!11196 = !DILocation(line: 5318, column: 10, scope: !11181)
!11197 = !DILocation(line: 5318, column: 17, scope: !11181)
!11198 = !DILocation(line: 5318, column: 14, scope: !11181)
!11199 = !DILocation(line: 5319, column: 10, scope: !11181)
!11200 = !DILocation(line: 5319, column: 16, scope: !11181)
!11201 = !DILocation(line: 5319, column: 32, scope: !11181)
!11202 = !DILocation(line: 5317, column: 10, scope: !11181)
!11203 = !DILocation(line: 5317, column: 8, scope: !11181)
!11204 = !DILocation(line: 5322, column: 8, scope: !11205)
!11205 = distinct !DILexicalBlock(scope: !11181, file: !3, line: 5322, column: 8)
!11206 = !DILocation(line: 5322, column: 12, scope: !11205)
!11207 = !DILocation(line: 5322, column: 8, scope: !11181)
!11208 = !DILocation(line: 5323, column: 39, scope: !11205)
!11209 = !DILocation(line: 5323, column: 45, scope: !11205)
!11210 = !DILocation(line: 5323, column: 50, scope: !11205)
!11211 = !DILocation(line: 5323, column: 55, scope: !11205)
!11212 = !DILocation(line: 5324, column: 8, scope: !11205)
!11213 = !DILocation(line: 5324, column: 19, scope: !11205)
!11214 = !DILocation(line: 5323, column: 12, scope: !11205)
!11215 = !DILocation(line: 5323, column: 10, scope: !11205)
!11216 = !DILocation(line: 5323, column: 6, scope: !11205)
!11217 = !DILocation(line: 5325, column: 2, scope: !11181)
!11218 = !DILocation(line: 5326, column: 17, scope: !11219)
!11219 = distinct !DILexicalBlock(scope: !11165, file: !3, line: 5326, column: 16)
!11220 = !DILocation(line: 5326, column: 22, scope: !11219)
!11221 = !DILocation(line: 5326, column: 28, scope: !11219)
!11222 = !DILocation(line: 5326, column: 31, scope: !11219)
!11223 = !DILocation(line: 5326, column: 36, scope: !11219)
!11224 = !DILocation(line: 5326, column: 43, scope: !11219)
!11225 = !DILocation(line: 5326, column: 46, scope: !11219)
!11226 = !DILocation(line: 5326, column: 53, scope: !11219)
!11227 = !DILocation(line: 5326, column: 50, scope: !11219)
!11228 = !DILocation(line: 5326, column: 16, scope: !11165)
!11229 = !DILocalVariable(name: "op0h", scope: !11230, file: !3, line: 5328, type: !2301)
!11230 = distinct !DILexicalBlock(scope: !11219, file: !3, line: 5327, column: 2)
!11231 = !DILocation(line: 5328, column: 8, scope: !11230)
!11232 = !DILocation(line: 5331, column: 32, scope: !11230)
!11233 = !DILocation(line: 5331, column: 43, scope: !11230)
!11234 = !DILocation(line: 5331, column: 48, scope: !11230)
!11235 = !DILocation(line: 5332, column: 35, scope: !11230)
!11236 = !DILocation(line: 5333, column: 14, scope: !11230)
!11237 = !DILocation(line: 5332, column: 11, scope: !11230)
!11238 = !DILocation(line: 5331, column: 11, scope: !11230)
!11239 = !DILocation(line: 5331, column: 9, scope: !11230)
!11240 = !DILocation(line: 5334, column: 37, scope: !11230)
!11241 = !DILocation(line: 5334, column: 43, scope: !11230)
!11242 = !DILocation(line: 5334, column: 49, scope: !11230)
!11243 = !DILocation(line: 5334, column: 54, scope: !11230)
!11244 = !DILocation(line: 5335, column: 6, scope: !11230)
!11245 = !DILocation(line: 5335, column: 17, scope: !11230)
!11246 = !DILocation(line: 5334, column: 10, scope: !11230)
!11247 = !DILocation(line: 5334, column: 8, scope: !11230)
!11248 = !DILocation(line: 5336, column: 2, scope: !11230)
!11249 = !DILocation(line: 5338, column: 6, scope: !11219)
!11250 = !DILocation(line: 5340, column: 11, scope: !11251)
!11251 = distinct !DILexicalBlock(scope: !11166, file: !3, line: 5340, column: 11)
!11252 = !DILocation(line: 5340, column: 11, scope: !11166)
!11253 = !DILocation(line: 5342, column: 8, scope: !11254)
!11254 = distinct !DILexicalBlock(scope: !11255, file: !3, line: 5342, column: 8)
!11255 = distinct !DILexicalBlock(scope: !11251, file: !3, line: 5341, column: 2)
!11256 = !DILocation(line: 5342, column: 20, scope: !11254)
!11257 = !DILocation(line: 5342, column: 32, scope: !11254)
!11258 = !DILocation(line: 5342, column: 35, scope: !11254)
!11259 = !DILocation(line: 5342, column: 53, scope: !11254)
!11260 = !DILocation(line: 5342, column: 50, scope: !11254)
!11261 = !DILocation(line: 5342, column: 8, scope: !11255)
!11262 = !DILocation(line: 5343, column: 13, scope: !11254)
!11263 = !DILocation(line: 5343, column: 6, scope: !11254)
!11264 = !DILocation(line: 5344, column: 9, scope: !11265)
!11265 = distinct !DILexicalBlock(scope: !11255, file: !3, line: 5344, column: 8)
!11266 = !DILocation(line: 5344, column: 8, scope: !11255)
!11267 = !DILocation(line: 5345, column: 28, scope: !11265)
!11268 = !DILocation(line: 5345, column: 15, scope: !11265)
!11269 = !DILocation(line: 5345, column: 13, scope: !11265)
!11270 = !DILocation(line: 5345, column: 6, scope: !11265)
!11271 = !DILocation(line: 5347, column: 18, scope: !11255)
!11272 = !DILocation(line: 5347, column: 26, scope: !11255)
!11273 = !DILocation(line: 5348, column: 11, scope: !11255)
!11274 = !DILocation(line: 5348, column: 24, scope: !11255)
!11275 = !DILocation(line: 5348, column: 10, scope: !11255)
!11276 = !DILocation(line: 5350, column: 10, scope: !11255)
!11277 = !DILocation(line: 5350, column: 39, scope: !11255)
!11278 = !DILocation(line: 5350, column: 6, scope: !11255)
!11279 = !DILocation(line: 5349, column: 10, scope: !11255)
!11280 = !DILocation(line: 5348, column: 6, scope: !11255)
!11281 = !DILocation(line: 5347, column: 4, scope: !11255)
!11282 = !DILocation(line: 5351, column: 11, scope: !11255)
!11283 = !DILocation(line: 5351, column: 4, scope: !11255)
!11284 = !DILocation(line: 5353, column: 5, scope: !11166)
!11285 = !DILocation(line: 5357, column: 7, scope: !11286)
!11286 = distinct !DILexicalBlock(scope: !11025, file: !3, line: 5357, column: 7)
!11287 = !DILocation(line: 5357, column: 14, scope: !11286)
!11288 = !DILocation(line: 5357, column: 11, scope: !11286)
!11289 = !DILocation(line: 5357, column: 25, scope: !11286)
!11290 = !DILocation(line: 5357, column: 29, scope: !11286)
!11291 = !DILocation(line: 5357, column: 34, scope: !11286)
!11292 = !DILocation(line: 5357, column: 40, scope: !11286)
!11293 = !DILocation(line: 5357, column: 43, scope: !11286)
!11294 = !DILocation(line: 5357, column: 48, scope: !11286)
!11295 = !DILocation(line: 5358, column: 7, scope: !11286)
!11296 = !DILocation(line: 5358, column: 10, scope: !11286)
!11297 = !DILocation(line: 5358, column: 32, scope: !11286)
!11298 = !DILocation(line: 5359, column: 7, scope: !11286)
!11299 = !DILocation(line: 5359, column: 11, scope: !11286)
!11300 = !DILocation(line: 5359, column: 22, scope: !11286)
!11301 = !DILocation(line: 5360, column: 4, scope: !11286)
!11302 = !DILocation(line: 5360, column: 8, scope: !11286)
!11303 = !DILocation(line: 5360, column: 32, scope: !11286)
!11304 = !DILocation(line: 5361, column: 8, scope: !11286)
!11305 = !DILocation(line: 5361, column: 32, scope: !11286)
!11306 = !DILocation(line: 5361, column: 30, scope: !11286)
!11307 = !DILocation(line: 5363, column: 13, scope: !11286)
!11308 = !DILocation(line: 5363, column: 37, scope: !11286)
!11309 = !DILocation(line: 5363, column: 9, scope: !11286)
!11310 = !DILocation(line: 5362, column: 5, scope: !11286)
!11311 = !DILocation(line: 5357, column: 7, scope: !11025)
!11312 = !DILocation(line: 5365, column: 19, scope: !11313)
!11313 = distinct !DILexicalBlock(scope: !11286, file: !3, line: 5364, column: 5)
!11314 = !DILocation(line: 5365, column: 17, scope: !11313)
!11315 = !DILocation(line: 5367, column: 12, scope: !11316)
!11316 = distinct !DILexicalBlock(scope: !11313, file: !3, line: 5367, column: 11)
!11317 = !DILocation(line: 5367, column: 11, scope: !11313)
!11318 = !DILocation(line: 5368, column: 16, scope: !11316)
!11319 = !DILocation(line: 5368, column: 14, scope: !11316)
!11320 = !DILocation(line: 5368, column: 2, scope: !11316)
!11321 = !DILocation(line: 5373, column: 16, scope: !11322)
!11322 = distinct !DILexicalBlock(scope: !11316, file: !3, line: 5373, column: 16)
!11323 = !DILocation(line: 5373, column: 46, scope: !11322)
!11324 = !DILocation(line: 5373, column: 44, scope: !11322)
!11325 = !DILocation(line: 5373, column: 16, scope: !11316)
!11326 = !DILocation(line: 5375, column: 25, scope: !11327)
!11327 = distinct !DILexicalBlock(scope: !11322, file: !3, line: 5374, column: 2)
!11328 = !DILocation(line: 5375, column: 38, scope: !11327)
!11329 = !DILocation(line: 5375, column: 44, scope: !11327)
!11330 = !DILocation(line: 5375, column: 10, scope: !11327)
!11331 = !DILocation(line: 5375, column: 8, scope: !11327)
!11332 = !DILocation(line: 5376, column: 11, scope: !11327)
!11333 = !DILocation(line: 5376, column: 9, scope: !11327)
!11334 = !DILocation(line: 5377, column: 2, scope: !11327)
!11335 = !DILocation(line: 5379, column: 11, scope: !11336)
!11336 = distinct !DILexicalBlock(scope: !11313, file: !3, line: 5379, column: 11)
!11337 = !DILocation(line: 5379, column: 26, scope: !11336)
!11338 = !DILocation(line: 5379, column: 23, scope: !11336)
!11339 = !DILocation(line: 5379, column: 11, scope: !11313)
!11340 = !DILocation(line: 5380, column: 12, scope: !11336)
!11341 = !DILocation(line: 5380, column: 2, scope: !11336)
!11342 = !DILocation(line: 5382, column: 11, scope: !11343)
!11343 = distinct !DILexicalBlock(scope: !11313, file: !3, line: 5382, column: 11)
!11344 = !DILocation(line: 5382, column: 16, scope: !11343)
!11345 = !DILocation(line: 5382, column: 11, scope: !11313)
!11346 = !DILocation(line: 5383, column: 21, scope: !11343)
!11347 = !DILocation(line: 5383, column: 43, scope: !11343)
!11348 = !DILocation(line: 5383, column: 8, scope: !11343)
!11349 = !DILocation(line: 5383, column: 6, scope: !11343)
!11350 = !DILocation(line: 5383, column: 2, scope: !11343)
!11351 = !DILocation(line: 5391, column: 35, scope: !11352)
!11352 = distinct !DILexicalBlock(scope: !11313, file: !3, line: 5387, column: 11)
!11353 = !DILocation(line: 5391, column: 41, scope: !11352)
!11354 = !DILocation(line: 5392, column: 8, scope: !11352)
!11355 = !DILocation(line: 5393, column: 8, scope: !11352)
!11356 = !DILocation(line: 5393, column: 19, scope: !11352)
!11357 = !DILocation(line: 5393, column: 30, scope: !11352)
!11358 = !DILocation(line: 5391, column: 8, scope: !11352)
!11359 = !DILocation(line: 5391, column: 6, scope: !11352)
!11360 = !DILocation(line: 5395, column: 11, scope: !11361)
!11361 = distinct !DILexicalBlock(scope: !11313, file: !3, line: 5395, column: 11)
!11362 = !DILocation(line: 5395, column: 19, scope: !11361)
!11363 = !DILocation(line: 5395, column: 16, scope: !11361)
!11364 = !DILocation(line: 5395, column: 11, scope: !11313)
!11365 = !DILocation(line: 5396, column: 23, scope: !11361)
!11366 = !DILocation(line: 5396, column: 36, scope: !11361)
!11367 = !DILocation(line: 5396, column: 42, scope: !11361)
!11368 = !DILocation(line: 5396, column: 8, scope: !11361)
!11369 = !DILocation(line: 5396, column: 6, scope: !11361)
!11370 = !DILocation(line: 5396, column: 2, scope: !11361)
!11371 = !DILocation(line: 5398, column: 14, scope: !11313)
!11372 = !DILocation(line: 5398, column: 7, scope: !11313)
!11373 = !DILocation(line: 5401, column: 12, scope: !11025)
!11374 = !DILocation(line: 5401, column: 10, scope: !11025)
!11375 = !DILocation(line: 5402, column: 23, scope: !11376)
!11376 = distinct !DILexicalBlock(scope: !11025, file: !3, line: 5402, column: 3)
!11377 = !DILocation(line: 5402, column: 21, scope: !11376)
!11378 = !DILocation(line: 5402, column: 8, scope: !11376)
!11379 = !DILocation(line: 5402, column: 29, scope: !11380)
!11380 = distinct !DILexicalBlock(scope: !11376, file: !3, line: 5402, column: 3)
!11381 = !DILocation(line: 5402, column: 42, scope: !11380)
!11382 = !DILocation(line: 5402, column: 3, scope: !11376)
!11383 = !DILocalVariable(name: "optab_mode", scope: !11384, file: !3, line: 5405, type: !5)
!11384 = distinct !DILexicalBlock(scope: !11380, file: !3, line: 5404, column: 5)
!11385 = !DILocation(line: 5405, column: 24, scope: !11384)
!11386 = !DILocation(line: 5405, column: 37, scope: !11384)
!11387 = !DILocation(line: 5405, column: 44, scope: !11384)
!11388 = !DILocation(line: 5405, column: 66, scope: !11384)
!11389 = !DILocation(line: 5406, column: 14, scope: !11384)
!11390 = !DILocation(line: 5406, column: 56, scope: !11384)
!11391 = !DILocation(line: 5406, column: 12, scope: !11384)
!11392 = !DILocation(line: 5407, column: 10, scope: !11393)
!11393 = distinct !DILexicalBlock(scope: !11384, file: !3, line: 5407, column: 10)
!11394 = !DILocation(line: 5407, column: 16, scope: !11393)
!11395 = !DILocation(line: 5407, column: 10, scope: !11384)
!11396 = !DILocation(line: 5409, column: 4, scope: !11397)
!11397 = distinct !DILexicalBlock(scope: !11393, file: !3, line: 5408, column: 2)
!11398 = !DILocation(line: 5410, column: 23, scope: !11397)
!11399 = !DILocation(line: 5410, column: 31, scope: !11397)
!11400 = !DILocation(line: 5410, column: 38, scope: !11397)
!11401 = !DILocation(line: 5410, column: 44, scope: !11397)
!11402 = !DILocation(line: 5410, column: 50, scope: !11397)
!11403 = !DILocation(line: 5411, column: 9, scope: !11397)
!11404 = !DILocation(line: 5411, column: 20, scope: !11397)
!11405 = !DILocation(line: 5411, column: 25, scope: !11397)
!11406 = !DILocation(line: 5411, column: 30, scope: !11397)
!11407 = !DILocation(line: 5411, column: 42, scope: !11397)
!11408 = !DILocation(line: 5410, column: 10, scope: !11397)
!11409 = !DILocation(line: 5410, column: 8, scope: !11397)
!11410 = !DILocation(line: 5412, column: 8, scope: !11411)
!11411 = distinct !DILexicalBlock(scope: !11397, file: !3, line: 5412, column: 8)
!11412 = !DILocation(line: 5412, column: 8, scope: !11397)
!11413 = !DILocation(line: 5413, column: 13, scope: !11411)
!11414 = !DILocation(line: 5413, column: 6, scope: !11411)
!11415 = !DILocation(line: 5415, column: 8, scope: !11416)
!11416 = distinct !DILexicalBlock(scope: !11397, file: !3, line: 5415, column: 8)
!11417 = !DILocation(line: 5415, column: 30, scope: !11416)
!11418 = !DILocation(line: 5415, column: 8, scope: !11397)
!11419 = !DILocation(line: 5417, column: 27, scope: !11420)
!11420 = distinct !DILexicalBlock(scope: !11416, file: !3, line: 5416, column: 6)
!11421 = !DILocation(line: 5417, column: 35, scope: !11420)
!11422 = !DILocation(line: 5417, column: 42, scope: !11420)
!11423 = !DILocation(line: 5417, column: 49, scope: !11420)
!11424 = !DILocation(line: 5417, column: 55, scope: !11420)
!11425 = !DILocation(line: 5418, column: 6, scope: !11420)
!11426 = !DILocation(line: 5418, column: 17, scope: !11420)
!11427 = !DILocation(line: 5418, column: 22, scope: !11420)
!11428 = !DILocation(line: 5418, column: 27, scope: !11420)
!11429 = !DILocation(line: 5418, column: 39, scope: !11420)
!11430 = !DILocation(line: 5417, column: 14, scope: !11420)
!11431 = !DILocation(line: 5417, column: 12, scope: !11420)
!11432 = !DILocation(line: 5419, column: 12, scope: !11433)
!11433 = distinct !DILexicalBlock(scope: !11420, file: !3, line: 5419, column: 12)
!11434 = !DILocation(line: 5419, column: 12, scope: !11420)
!11435 = !DILocation(line: 5420, column: 17, scope: !11433)
!11436 = !DILocation(line: 5420, column: 10, scope: !11433)
!11437 = !DILocation(line: 5421, column: 6, scope: !11420)
!11438 = !DILocation(line: 5422, column: 4, scope: !11397)
!11439 = !DILocation(line: 5424, column: 5, scope: !11384)
!11440 = !DILocation(line: 5403, column: 23, scope: !11380)
!11441 = !DILocation(line: 5403, column: 21, scope: !11380)
!11442 = !DILocation(line: 5402, column: 3, scope: !11380)
!11443 = distinct !{!11443, !11382, !11444}
!11444 = !DILocation(line: 5424, column: 5, scope: !11376)
!11445 = !DILocation(line: 5426, column: 3, scope: !11025)
!11446 = !DILocation(line: 5427, column: 1, scope: !11025)
!11447 = distinct !DISubprogram(name: "check_predicate_volatile_ok", scope: !3, file: !3, line: 352, type: !11448, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!11448 = !DISubroutineType(types: !11449)
!11449 = !{!2535, !711, !2325, !2301, !5}
!11450 = !DILocalVariable(name: "icode", arg: 1, scope: !11447, file: !3, line: 352, type: !711)
!11451 = !DILocation(line: 352, column: 45, scope: !11447)
!11452 = !DILocalVariable(name: "opno", arg: 2, scope: !11447, file: !3, line: 352, type: !2325)
!11453 = !DILocation(line: 352, column: 56, scope: !11447)
!11454 = !DILocalVariable(name: "x", arg: 3, scope: !11447, file: !3, line: 353, type: !2301)
!11455 = !DILocation(line: 353, column: 13, scope: !11447)
!11456 = !DILocalVariable(name: "mode", arg: 4, scope: !11447, file: !3, line: 353, type: !5)
!11457 = !DILocation(line: 353, column: 34, scope: !11447)
!11458 = !DILocalVariable(name: "save_volatile_ok", scope: !11447, file: !3, line: 355, type: !2535)
!11459 = !DILocation(line: 355, column: 8, scope: !11447)
!11460 = !DILocalVariable(name: "result", scope: !11447, file: !3, line: 355, type: !2535)
!11461 = !DILocation(line: 355, column: 26, scope: !11447)
!11462 = !DILocation(line: 357, column: 22, scope: !11447)
!11463 = !DILocation(line: 357, column: 20, scope: !11447)
!11464 = !DILocation(line: 358, column: 28, scope: !11447)
!11465 = !DILocation(line: 358, column: 12, scope: !11447)
!11466 = !DILocation(line: 358, column: 35, scope: !11447)
!11467 = !DILocation(line: 358, column: 43, scope: !11447)
!11468 = !DILocation(line: 358, column: 49, scope: !11447)
!11469 = !DILocation(line: 358, column: 60, scope: !11447)
!11470 = !DILocation(line: 358, column: 63, scope: !11447)
!11471 = !DILocation(line: 358, column: 10, scope: !11447)
!11472 = !DILocation(line: 359, column: 17, scope: !11447)
!11473 = !DILocation(line: 359, column: 15, scope: !11447)
!11474 = !DILocation(line: 360, column: 10, scope: !11447)
!11475 = !DILocation(line: 360, column: 3, scope: !11447)
!11476 = distinct !DISubprogram(name: "store_fixed_bit_field", scope: !3, file: !3, line: 869, type: !11477, scopeLine: 872, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!11477 = !DISubroutineType(types: !11478)
!11478 = !{null, !2301, !2375, !2375, !2375, !2301}
!11479 = !DILocalVariable(name: "op0", arg: 1, scope: !11476, file: !3, line: 869, type: !2301)
!11480 = !DILocation(line: 869, column: 28, scope: !11476)
!11481 = !DILocalVariable(name: "offset", arg: 2, scope: !11476, file: !3, line: 869, type: !2375)
!11482 = !DILocation(line: 869, column: 56, scope: !11476)
!11483 = !DILocalVariable(name: "bitsize", arg: 3, scope: !11476, file: !3, line: 870, type: !2375)
!11484 = !DILocation(line: 870, column: 33, scope: !11476)
!11485 = !DILocalVariable(name: "bitpos", arg: 4, scope: !11476, file: !3, line: 871, type: !2375)
!11486 = !DILocation(line: 871, column: 33, scope: !11476)
!11487 = !DILocalVariable(name: "value", arg: 5, scope: !11476, file: !3, line: 871, type: !2301)
!11488 = !DILocation(line: 871, column: 45, scope: !11476)
!11489 = !DILocalVariable(name: "mode", scope: !11476, file: !3, line: 873, type: !5)
!11490 = !DILocation(line: 873, column: 21, scope: !11476)
!11491 = !DILocalVariable(name: "total_bits", scope: !11476, file: !3, line: 874, type: !7)
!11492 = !DILocation(line: 874, column: 16, scope: !11476)
!11493 = !DILocalVariable(name: "temp", scope: !11476, file: !3, line: 875, type: !2301)
!11494 = !DILocation(line: 875, column: 7, scope: !11476)
!11495 = !DILocalVariable(name: "all_zero", scope: !11476, file: !3, line: 876, type: !2325)
!11496 = !DILocation(line: 876, column: 7, scope: !11476)
!11497 = !DILocalVariable(name: "all_one", scope: !11476, file: !3, line: 877, type: !2325)
!11498 = !DILocation(line: 877, column: 7, scope: !11476)
!11499 = !DILocation(line: 886, column: 7, scope: !11500)
!11500 = distinct !DILexicalBlock(scope: !11476, file: !3, line: 886, column: 7)
!11501 = !DILocation(line: 886, column: 19, scope: !11500)
!11502 = !DILocation(line: 886, column: 22, scope: !11500)
!11503 = !DILocation(line: 886, column: 37, scope: !11500)
!11504 = !DILocation(line: 886, column: 7, scope: !11476)
!11505 = !DILocation(line: 888, column: 7, scope: !11506)
!11506 = distinct !DILexicalBlock(scope: !11500, file: !3, line: 887, column: 5)
!11507 = !DILocation(line: 890, column: 11, scope: !11508)
!11508 = distinct !DILexicalBlock(scope: !11506, file: !3, line: 890, column: 11)
!11509 = !DILocation(line: 890, column: 21, scope: !11508)
!11510 = !DILocation(line: 890, column: 19, scope: !11508)
!11511 = !DILocation(line: 890, column: 28, scope: !11508)
!11512 = !DILocation(line: 890, column: 11, scope: !11506)
!11513 = !DILocation(line: 892, column: 27, scope: !11514)
!11514 = distinct !DILexicalBlock(scope: !11508, file: !3, line: 891, column: 2)
!11515 = !DILocation(line: 892, column: 32, scope: !11514)
!11516 = !DILocation(line: 892, column: 41, scope: !11514)
!11517 = !DILocation(line: 892, column: 49, scope: !11514)
!11518 = !DILocation(line: 892, column: 4, scope: !11514)
!11519 = !DILocation(line: 893, column: 4, scope: !11514)
!11520 = !DILocation(line: 895, column: 5, scope: !11506)
!11521 = !DILocation(line: 903, column: 14, scope: !11522)
!11522 = distinct !DILexicalBlock(scope: !11500, file: !3, line: 897, column: 5)
!11523 = !DILocation(line: 903, column: 12, scope: !11522)
!11524 = !DILocation(line: 904, column: 11, scope: !11525)
!11525 = distinct !DILexicalBlock(scope: !11522, file: !3, line: 904, column: 11)
!11526 = !DILocation(line: 904, column: 35, scope: !11525)
!11527 = !DILocation(line: 905, column: 4, scope: !11525)
!11528 = !DILocation(line: 905, column: 7, scope: !11525)
!11529 = !DILocation(line: 905, column: 33, scope: !11525)
!11530 = !DILocation(line: 905, column: 31, scope: !11525)
!11531 = !DILocation(line: 904, column: 11, scope: !11522)
!11532 = !DILocation(line: 906, column: 9, scope: !11525)
!11533 = !DILocation(line: 906, column: 7, scope: !11525)
!11534 = !DILocation(line: 906, column: 2, scope: !11525)
!11535 = !DILocation(line: 907, column: 29, scope: !11522)
!11536 = !DILocation(line: 907, column: 38, scope: !11522)
!11537 = !DILocation(line: 907, column: 47, scope: !11522)
!11538 = !DILocation(line: 907, column: 54, scope: !11522)
!11539 = !DILocation(line: 907, column: 45, scope: !11522)
!11540 = !DILocation(line: 908, column: 8, scope: !11522)
!11541 = !DILocation(line: 908, column: 25, scope: !11522)
!11542 = !DILocation(line: 908, column: 31, scope: !11522)
!11543 = !DILocation(line: 907, column: 14, scope: !11522)
!11544 = !DILocation(line: 907, column: 12, scope: !11522)
!11545 = !DILocation(line: 910, column: 11, scope: !11546)
!11546 = distinct !DILexicalBlock(scope: !11522, file: !3, line: 910, column: 11)
!11547 = !DILocation(line: 910, column: 16, scope: !11546)
!11548 = !DILocation(line: 910, column: 11, scope: !11522)
!11549 = !DILocation(line: 914, column: 27, scope: !11550)
!11550 = distinct !DILexicalBlock(scope: !11546, file: !3, line: 911, column: 2)
!11551 = !DILocation(line: 914, column: 32, scope: !11550)
!11552 = !DILocation(line: 914, column: 41, scope: !11550)
!11553 = !DILocation(line: 914, column: 50, scope: !11550)
!11554 = !DILocation(line: 914, column: 57, scope: !11550)
!11555 = !DILocation(line: 914, column: 48, scope: !11550)
!11556 = !DILocation(line: 915, column: 6, scope: !11550)
!11557 = !DILocation(line: 914, column: 4, scope: !11550)
!11558 = !DILocation(line: 916, column: 4, scope: !11550)
!11559 = !DILocation(line: 919, column: 20, scope: !11522)
!11560 = !DILocation(line: 919, column: 18, scope: !11522)
!11561 = !DILocation(line: 924, column: 11, scope: !11562)
!11562 = distinct !DILexicalBlock(scope: !11522, file: !3, line: 924, column: 11)
!11563 = !DILocation(line: 924, column: 21, scope: !11562)
!11564 = !DILocation(line: 924, column: 18, scope: !11562)
!11565 = !DILocation(line: 924, column: 11, scope: !11522)
!11566 = !DILocation(line: 926, column: 15, scope: !11567)
!11567 = distinct !DILexicalBlock(scope: !11562, file: !3, line: 925, column: 2)
!11568 = !DILocation(line: 926, column: 24, scope: !11567)
!11569 = !DILocation(line: 926, column: 22, scope: !11567)
!11570 = !DILocation(line: 926, column: 39, scope: !11567)
!11571 = !DILocation(line: 926, column: 50, scope: !11567)
!11572 = !DILocation(line: 926, column: 38, scope: !11567)
!11573 = !DILocation(line: 926, column: 36, scope: !11567)
!11574 = !DILocation(line: 926, column: 11, scope: !11567)
!11575 = !DILocation(line: 927, column: 16, scope: !11567)
!11576 = !DILocation(line: 927, column: 25, scope: !11567)
!11577 = !DILocation(line: 927, column: 23, scope: !11567)
!11578 = !DILocation(line: 927, column: 40, scope: !11567)
!11579 = !DILocation(line: 927, column: 51, scope: !11567)
!11580 = !DILocation(line: 927, column: 39, scope: !11567)
!11581 = !DILocation(line: 927, column: 37, scope: !11567)
!11582 = !DILocation(line: 928, column: 8, scope: !11567)
!11583 = !DILocation(line: 927, column: 11, scope: !11567)
!11584 = !DILocation(line: 929, column: 2, scope: !11567)
!11585 = !DILocation(line: 935, column: 18, scope: !11522)
!11586 = !DILocation(line: 935, column: 28, scope: !11522)
!11587 = !DILocation(line: 935, column: 39, scope: !11522)
!11588 = !DILocation(line: 935, column: 27, scope: !11522)
!11589 = !DILocation(line: 935, column: 25, scope: !11522)
!11590 = !DILocation(line: 935, column: 57, scope: !11522)
!11591 = !DILocation(line: 935, column: 14, scope: !11522)
!11592 = !DILocation(line: 936, column: 18, scope: !11522)
!11593 = !DILocation(line: 936, column: 28, scope: !11522)
!11594 = !DILocation(line: 936, column: 39, scope: !11522)
!11595 = !DILocation(line: 936, column: 27, scope: !11522)
!11596 = !DILocation(line: 936, column: 25, scope: !11522)
!11597 = !DILocation(line: 936, column: 14, scope: !11522)
!11598 = !DILocation(line: 937, column: 13, scope: !11522)
!11599 = !DILocation(line: 937, column: 11, scope: !11522)
!11600 = !DILocation(line: 940, column: 10, scope: !11476)
!11601 = !DILocation(line: 940, column: 8, scope: !11476)
!11602 = !DILocation(line: 960, column: 7, scope: !11603)
!11603 = distinct !DILexicalBlock(scope: !11476, file: !3, line: 960, column: 7)
!11604 = !DILocation(line: 960, column: 7, scope: !11476)
!11605 = !DILocalVariable(name: "v", scope: !11606, file: !3, line: 962, type: !2299)
!11606 = distinct !DILexicalBlock(scope: !11603, file: !3, line: 961, column: 5)
!11607 = !DILocation(line: 962, column: 21, scope: !11606)
!11608 = !DILocation(line: 962, column: 25, scope: !11606)
!11609 = !DILocation(line: 964, column: 11, scope: !11610)
!11610 = distinct !DILexicalBlock(scope: !11606, file: !3, line: 964, column: 11)
!11611 = !DILocation(line: 964, column: 19, scope: !11610)
!11612 = !DILocation(line: 964, column: 11, scope: !11606)
!11613 = !DILocation(line: 965, column: 29, scope: !11610)
!11614 = !DILocation(line: 965, column: 26, scope: !11610)
!11615 = !DILocation(line: 965, column: 38, scope: !11610)
!11616 = !DILocation(line: 965, column: 4, scope: !11610)
!11617 = !DILocation(line: 965, column: 2, scope: !11610)
!11618 = !DILocation(line: 967, column: 11, scope: !11619)
!11619 = distinct !DILexicalBlock(scope: !11606, file: !3, line: 967, column: 11)
!11620 = !DILocation(line: 967, column: 13, scope: !11619)
!11621 = !DILocation(line: 967, column: 11, scope: !11606)
!11622 = !DILocation(line: 968, column: 11, scope: !11619)
!11623 = !DILocation(line: 968, column: 2, scope: !11619)
!11624 = !DILocation(line: 969, column: 17, scope: !11625)
!11625 = distinct !DILexicalBlock(scope: !11619, file: !3, line: 969, column: 16)
!11626 = !DILocation(line: 969, column: 25, scope: !11625)
!11627 = !DILocation(line: 970, column: 3, scope: !11625)
!11628 = !DILocation(line: 970, column: 6, scope: !11625)
!11629 = !DILocation(line: 970, column: 33, scope: !11625)
!11630 = !DILocation(line: 970, column: 30, scope: !11625)
!11631 = !DILocation(line: 970, column: 42, scope: !11625)
!11632 = !DILocation(line: 970, column: 8, scope: !11625)
!11633 = !DILocation(line: 971, column: 9, scope: !11625)
!11634 = !DILocation(line: 971, column: 13, scope: !11625)
!11635 = !DILocation(line: 971, column: 21, scope: !11625)
!11636 = !DILocation(line: 971, column: 47, scope: !11625)
!11637 = !DILocation(line: 971, column: 50, scope: !11625)
!11638 = !DILocation(line: 971, column: 52, scope: !11625)
!11639 = !DILocation(line: 969, column: 16, scope: !11619)
!11640 = !DILocation(line: 972, column: 10, scope: !11625)
!11641 = !DILocation(line: 972, column: 2, scope: !11625)
!11642 = !DILocation(line: 974, column: 29, scope: !11606)
!11643 = !DILocation(line: 974, column: 35, scope: !11606)
!11644 = !DILocation(line: 974, column: 42, scope: !11606)
!11645 = !DILocation(line: 974, column: 50, scope: !11606)
!11646 = !DILocation(line: 974, column: 15, scope: !11606)
!11647 = !DILocation(line: 974, column: 13, scope: !11606)
!11648 = !DILocation(line: 975, column: 5, scope: !11606)
!11649 = !DILocalVariable(name: "must_and", scope: !11650, file: !3, line: 978, type: !2325)
!11650 = distinct !DILexicalBlock(scope: !11603, file: !3, line: 977, column: 5)
!11651 = !DILocation(line: 978, column: 11, scope: !11650)
!11652 = !DILocation(line: 978, column: 23, scope: !11650)
!11653 = !DILocation(line: 978, column: 62, scope: !11650)
!11654 = !DILocation(line: 978, column: 59, scope: !11650)
!11655 = !DILocation(line: 979, column: 9, scope: !11650)
!11656 = !DILocation(line: 979, column: 12, scope: !11650)
!11657 = !DILocation(line: 979, column: 21, scope: !11650)
!11658 = !DILocation(line: 979, column: 19, scope: !11650)
!11659 = !DILocation(line: 979, column: 32, scope: !11650)
!11660 = !DILocation(line: 979, column: 29, scope: !11650)
!11661 = !DILocation(line: 0, scope: !11650)
!11662 = !DILocation(line: 981, column: 11, scope: !11663)
!11663 = distinct !DILexicalBlock(scope: !11650, file: !3, line: 981, column: 11)
!11664 = !DILocation(line: 981, column: 31, scope: !11663)
!11665 = !DILocation(line: 981, column: 28, scope: !11663)
!11666 = !DILocation(line: 981, column: 11, scope: !11650)
!11667 = !DILocation(line: 982, column: 27, scope: !11663)
!11668 = !DILocation(line: 982, column: 33, scope: !11663)
!11669 = !DILocation(line: 982, column: 10, scope: !11663)
!11670 = !DILocation(line: 982, column: 8, scope: !11663)
!11671 = !DILocation(line: 982, column: 2, scope: !11663)
!11672 = !DILocation(line: 984, column: 11, scope: !11673)
!11673 = distinct !DILexicalBlock(scope: !11650, file: !3, line: 984, column: 11)
!11674 = !DILocation(line: 984, column: 11, scope: !11650)
!11675 = !DILocation(line: 985, column: 24, scope: !11673)
!11676 = !DILocation(line: 985, column: 41, scope: !11673)
!11677 = !DILocation(line: 986, column: 20, scope: !11673)
!11678 = !DILocation(line: 986, column: 29, scope: !11673)
!11679 = !DILocation(line: 986, column: 10, scope: !11673)
!11680 = !DILocation(line: 985, column: 10, scope: !11673)
!11681 = !DILocation(line: 985, column: 8, scope: !11673)
!11682 = !DILocation(line: 985, column: 2, scope: !11673)
!11683 = !DILocation(line: 988, column: 11, scope: !11684)
!11684 = distinct !DILexicalBlock(scope: !11650, file: !3, line: 988, column: 11)
!11685 = !DILocation(line: 988, column: 18, scope: !11684)
!11686 = !DILocation(line: 988, column: 11, scope: !11650)
!11687 = !DILocation(line: 989, column: 37, scope: !11684)
!11688 = !DILocation(line: 989, column: 43, scope: !11684)
!11689 = !DILocation(line: 990, column: 36, scope: !11684)
!11690 = !DILocation(line: 990, column: 10, scope: !11684)
!11691 = !DILocation(line: 989, column: 10, scope: !11684)
!11692 = !DILocation(line: 989, column: 8, scope: !11684)
!11693 = !DILocation(line: 989, column: 2, scope: !11684)
!11694 = !DILocation(line: 998, column: 21, scope: !11476)
!11695 = !DILocation(line: 998, column: 27, scope: !11476)
!11696 = !DILocation(line: 998, column: 10, scope: !11476)
!11697 = !DILocation(line: 998, column: 8, scope: !11476)
!11698 = !DILocation(line: 1000, column: 9, scope: !11699)
!11699 = distinct !DILexicalBlock(scope: !11476, file: !3, line: 1000, column: 7)
!11700 = !DILocation(line: 1000, column: 7, scope: !11476)
!11701 = !DILocation(line: 1002, column: 28, scope: !11702)
!11702 = distinct !DILexicalBlock(scope: !11699, file: !3, line: 1001, column: 5)
!11703 = !DILocation(line: 1002, column: 45, scope: !11702)
!11704 = !DILocation(line: 1003, column: 17, scope: !11702)
!11705 = !DILocation(line: 1003, column: 23, scope: !11702)
!11706 = !DILocation(line: 1003, column: 31, scope: !11702)
!11707 = !DILocation(line: 1003, column: 7, scope: !11702)
!11708 = !DILocation(line: 1002, column: 14, scope: !11702)
!11709 = !DILocation(line: 1002, column: 12, scope: !11702)
!11710 = !DILocation(line: 1005, column: 25, scope: !11702)
!11711 = !DILocation(line: 1005, column: 31, scope: !11702)
!11712 = !DILocation(line: 1005, column: 14, scope: !11702)
!11713 = !DILocation(line: 1005, column: 12, scope: !11702)
!11714 = !DILocation(line: 1006, column: 5, scope: !11702)
!11715 = !DILocation(line: 1010, column: 9, scope: !11716)
!11716 = distinct !DILexicalBlock(scope: !11476, file: !3, line: 1010, column: 7)
!11717 = !DILocation(line: 1010, column: 7, scope: !11476)
!11718 = !DILocation(line: 1012, column: 28, scope: !11719)
!11719 = distinct !DILexicalBlock(scope: !11716, file: !3, line: 1011, column: 5)
!11720 = !DILocation(line: 1012, column: 45, scope: !11719)
!11721 = !DILocation(line: 1012, column: 51, scope: !11719)
!11722 = !DILocation(line: 1012, column: 14, scope: !11719)
!11723 = !DILocation(line: 1012, column: 12, scope: !11719)
!11724 = !DILocation(line: 1014, column: 25, scope: !11719)
!11725 = !DILocation(line: 1014, column: 31, scope: !11719)
!11726 = !DILocation(line: 1014, column: 14, scope: !11719)
!11727 = !DILocation(line: 1014, column: 12, scope: !11719)
!11728 = !DILocation(line: 1015, column: 5, scope: !11719)
!11729 = !DILocation(line: 1017, column: 7, scope: !11730)
!11730 = distinct !DILexicalBlock(scope: !11476, file: !3, line: 1017, column: 7)
!11731 = !DILocation(line: 1017, column: 14, scope: !11730)
!11732 = !DILocation(line: 1017, column: 11, scope: !11730)
!11733 = !DILocation(line: 1017, column: 7, scope: !11476)
!11734 = !DILocation(line: 1019, column: 23, scope: !11735)
!11735 = distinct !DILexicalBlock(scope: !11730, file: !3, line: 1018, column: 5)
!11736 = !DILocation(line: 1019, column: 13, scope: !11735)
!11737 = !DILocation(line: 1019, column: 11, scope: !11735)
!11738 = !DILocation(line: 1020, column: 23, scope: !11735)
!11739 = !DILocation(line: 1020, column: 28, scope: !11735)
!11740 = !DILocation(line: 1020, column: 7, scope: !11735)
!11741 = !DILocation(line: 1021, column: 5, scope: !11735)
!11742 = !DILocation(line: 1022, column: 1, scope: !11476)
!11743 = distinct !DISubprogram(name: "store_split_bit_field", scope: !3, file: !3, line: 1034, type: !11744, scopeLine: 1036, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!11744 = !DISubroutineType(types: !11745)
!11745 = !{null, !2301, !2375, !2375, !2301}
!11746 = !DILocalVariable(name: "op0", arg: 1, scope: !11743, file: !3, line: 1034, type: !2301)
!11747 = !DILocation(line: 1034, column: 28, scope: !11743)
!11748 = !DILocalVariable(name: "bitsize", arg: 2, scope: !11743, file: !3, line: 1034, type: !2375)
!11749 = !DILocation(line: 1034, column: 56, scope: !11743)
!11750 = !DILocalVariable(name: "bitpos", arg: 3, scope: !11743, file: !3, line: 1035, type: !2375)
!11751 = !DILocation(line: 1035, column: 33, scope: !11743)
!11752 = !DILocalVariable(name: "value", arg: 4, scope: !11743, file: !3, line: 1035, type: !2301)
!11753 = !DILocation(line: 1035, column: 45, scope: !11743)
!11754 = !DILocalVariable(name: "unit", scope: !11743, file: !3, line: 1037, type: !7)
!11755 = !DILocation(line: 1037, column: 16, scope: !11743)
!11756 = !DILocalVariable(name: "bitsdone", scope: !11743, file: !3, line: 1038, type: !7)
!11757 = !DILocation(line: 1038, column: 16, scope: !11743)
!11758 = !DILocation(line: 1042, column: 7, scope: !11759)
!11759 = distinct !DILexicalBlock(scope: !11743, file: !3, line: 1042, column: 7)
!11760 = !DILocation(line: 1042, column: 19, scope: !11759)
!11761 = !DILocation(line: 1042, column: 22, scope: !11759)
!11762 = !DILocation(line: 1042, column: 37, scope: !11759)
!11763 = !DILocation(line: 1042, column: 7, scope: !11743)
!11764 = !DILocation(line: 1043, column: 10, scope: !11759)
!11765 = !DILocation(line: 1043, column: 5, scope: !11759)
!11766 = !DILocation(line: 1045, column: 12, scope: !11759)
!11767 = !DILocation(line: 1045, column: 10, scope: !11759)
!11768 = !DILocation(line: 1050, column: 7, scope: !11769)
!11769 = distinct !DILexicalBlock(scope: !11743, file: !3, line: 1050, column: 7)
!11770 = !DILocation(line: 1050, column: 26, scope: !11769)
!11771 = !DILocation(line: 1050, column: 30, scope: !11769)
!11772 = !DILocation(line: 1050, column: 7, scope: !11743)
!11773 = !DILocalVariable(name: "word", scope: !11774, file: !3, line: 1052, type: !2301)
!11774 = distinct !DILexicalBlock(scope: !11769, file: !3, line: 1051, column: 5)
!11775 = !DILocation(line: 1052, column: 11, scope: !11774)
!11776 = !DILocation(line: 1052, column: 38, scope: !11774)
!11777 = !DILocation(line: 1052, column: 49, scope: !11774)
!11778 = !DILocation(line: 1052, column: 18, scope: !11774)
!11779 = !DILocation(line: 1054, column: 11, scope: !11780)
!11780 = distinct !DILexicalBlock(scope: !11774, file: !3, line: 1054, column: 11)
!11781 = !DILocation(line: 1054, column: 16, scope: !11780)
!11782 = !DILocation(line: 1054, column: 20, scope: !11780)
!11783 = !DILocation(line: 1054, column: 29, scope: !11780)
!11784 = !DILocation(line: 1054, column: 26, scope: !11780)
!11785 = !DILocation(line: 1054, column: 11, scope: !11774)
!11786 = !DILocation(line: 1055, column: 10, scope: !11780)
!11787 = !DILocation(line: 1055, column: 8, scope: !11780)
!11788 = !DILocation(line: 1055, column: 2, scope: !11780)
!11789 = !DILocation(line: 1057, column: 30, scope: !11780)
!11790 = !DILocation(line: 1058, column: 20, scope: !11780)
!11791 = !DILocation(line: 1058, column: 37, scope: !11780)
!11792 = !DILocation(line: 1059, column: 15, scope: !11780)
!11793 = !DILocation(line: 1060, column: 15, scope: !11780)
!11794 = !DILocation(line: 1060, column: 26, scope: !11780)
!11795 = !DILocation(line: 1058, column: 9, scope: !11780)
!11796 = !DILocation(line: 1057, column: 10, scope: !11780)
!11797 = !DILocation(line: 1057, column: 8, scope: !11780)
!11798 = !DILocation(line: 1061, column: 5, scope: !11774)
!11799 = !DILocation(line: 1063, column: 3, scope: !11743)
!11800 = !DILocation(line: 1063, column: 10, scope: !11743)
!11801 = !DILocation(line: 1063, column: 21, scope: !11743)
!11802 = !DILocation(line: 1063, column: 19, scope: !11743)
!11803 = !DILocalVariable(name: "thissize", scope: !11804, file: !3, line: 1065, type: !2375)
!11804 = distinct !DILexicalBlock(scope: !11743, file: !3, line: 1064, column: 5)
!11805 = !DILocation(line: 1065, column: 30, scope: !11804)
!11806 = !DILocalVariable(name: "part", scope: !11804, file: !3, line: 1066, type: !2301)
!11807 = !DILocation(line: 1066, column: 11, scope: !11804)
!11808 = !DILocalVariable(name: "word", scope: !11804, file: !3, line: 1066, type: !2301)
!11809 = !DILocation(line: 1066, column: 17, scope: !11804)
!11810 = !DILocalVariable(name: "thispos", scope: !11804, file: !3, line: 1067, type: !2375)
!11811 = !DILocation(line: 1067, column: 30, scope: !11804)
!11812 = !DILocalVariable(name: "offset", scope: !11804, file: !3, line: 1068, type: !2375)
!11813 = !DILocation(line: 1068, column: 30, scope: !11804)
!11814 = !DILocation(line: 1070, column: 17, scope: !11804)
!11815 = !DILocation(line: 1070, column: 26, scope: !11804)
!11816 = !DILocation(line: 1070, column: 24, scope: !11804)
!11817 = !DILocation(line: 1070, column: 38, scope: !11804)
!11818 = !DILocation(line: 1070, column: 36, scope: !11804)
!11819 = !DILocation(line: 1070, column: 14, scope: !11804)
!11820 = !DILocation(line: 1071, column: 18, scope: !11804)
!11821 = !DILocation(line: 1071, column: 27, scope: !11804)
!11822 = !DILocation(line: 1071, column: 25, scope: !11804)
!11823 = !DILocation(line: 1071, column: 39, scope: !11804)
!11824 = !DILocation(line: 1071, column: 37, scope: !11804)
!11825 = !DILocation(line: 1071, column: 15, scope: !11804)
!11826 = !DILocation(line: 1076, column: 18, scope: !11804)
!11827 = !DILocation(line: 1076, column: 16, scope: !11804)
!11828 = !DILocation(line: 1077, column: 18, scope: !11804)
!11829 = !DILocation(line: 1077, column: 16, scope: !11804)
!11830 = !DILocation(line: 1107, column: 8, scope: !11831)
!11831 = distinct !DILexicalBlock(scope: !11832, file: !3, line: 1107, column: 8)
!11832 = distinct !DILexicalBlock(scope: !11833, file: !3, line: 1105, column: 2)
!11833 = distinct !DILexicalBlock(scope: !11804, file: !3, line: 1079, column: 11)
!11834 = !DILocation(line: 1107, column: 8, scope: !11832)
!11835 = !DILocation(line: 1108, column: 13, scope: !11831)
!11836 = !DILocation(line: 1108, column: 11, scope: !11831)
!11837 = !DILocation(line: 1108, column: 6, scope: !11831)
!11838 = !DILocation(line: 1112, column: 38, scope: !11831)
!11839 = !DILocation(line: 1112, column: 49, scope: !11831)
!11840 = !DILocation(line: 1112, column: 59, scope: !11831)
!11841 = !DILocation(line: 1113, column: 10, scope: !11831)
!11842 = !DILocation(line: 1112, column: 13, scope: !11831)
!11843 = !DILocation(line: 1112, column: 11, scope: !11831)
!11844 = !DILocation(line: 1122, column: 11, scope: !11845)
!11845 = distinct !DILexicalBlock(scope: !11804, file: !3, line: 1122, column: 11)
!11846 = !DILocation(line: 1122, column: 26, scope: !11845)
!11847 = !DILocation(line: 1122, column: 11, scope: !11804)
!11848 = !DILocalVariable(name: "word_offset", scope: !11849, file: !3, line: 1124, type: !2325)
!11849 = distinct !DILexicalBlock(scope: !11845, file: !3, line: 1123, column: 2)
!11850 = !DILocation(line: 1124, column: 8, scope: !11849)
!11851 = !DILocation(line: 1124, column: 23, scope: !11849)
!11852 = !DILocation(line: 1124, column: 41, scope: !11849)
!11853 = !DILocation(line: 1124, column: 22, scope: !11849)
!11854 = !DILocation(line: 1124, column: 61, scope: !11849)
!11855 = !DILocation(line: 1124, column: 59, scope: !11849)
!11856 = !DILocation(line: 1125, column: 34, scope: !11849)
!11857 = !DILocation(line: 1125, column: 52, scope: !11849)
!11858 = !DILocation(line: 1126, column: 6, scope: !11849)
!11859 = !DILocation(line: 1125, column: 11, scope: !11849)
!11860 = !DILocation(line: 1125, column: 9, scope: !11849)
!11861 = !DILocation(line: 1127, column: 11, scope: !11849)
!11862 = !DILocation(line: 1128, column: 2, scope: !11849)
!11863 = !DILocation(line: 1129, column: 16, scope: !11864)
!11864 = distinct !DILexicalBlock(scope: !11845, file: !3, line: 1129, column: 16)
!11865 = !DILocation(line: 1129, column: 16, scope: !11845)
!11866 = !DILocation(line: 1131, column: 34, scope: !11867)
!11867 = distinct !DILexicalBlock(scope: !11864, file: !3, line: 1130, column: 2)
!11868 = !DILocation(line: 1131, column: 39, scope: !11867)
!11869 = !DILocation(line: 1131, column: 47, scope: !11867)
!11870 = !DILocation(line: 1131, column: 11, scope: !11867)
!11871 = !DILocation(line: 1131, column: 9, scope: !11867)
!11872 = !DILocation(line: 1132, column: 11, scope: !11867)
!11873 = !DILocation(line: 1133, column: 2, scope: !11867)
!11874 = !DILocation(line: 1135, column: 9, scope: !11864)
!11875 = !DILocation(line: 1135, column: 7, scope: !11864)
!11876 = !DILocation(line: 1139, column: 30, scope: !11804)
!11877 = !DILocation(line: 1139, column: 36, scope: !11804)
!11878 = !DILocation(line: 1139, column: 45, scope: !11804)
!11879 = !DILocation(line: 1139, column: 43, scope: !11804)
!11880 = !DILocation(line: 1139, column: 50, scope: !11804)
!11881 = !DILocation(line: 1139, column: 67, scope: !11804)
!11882 = !DILocation(line: 1140, column: 9, scope: !11804)
!11883 = !DILocation(line: 1140, column: 18, scope: !11804)
!11884 = !DILocation(line: 1139, column: 7, scope: !11804)
!11885 = !DILocation(line: 1141, column: 19, scope: !11804)
!11886 = !DILocation(line: 1141, column: 16, scope: !11804)
!11887 = distinct !{!11887, !11799, !11888}
!11888 = !DILocation(line: 1142, column: 5, scope: !11743)
!11889 = !DILocation(line: 1143, column: 1, scope: !11743)
!11890 = distinct !DISubprogram(name: "lshift_value", scope: !3, file: !3, line: 1881, type: !11891, scopeLine: 1882, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!11891 = !DISubroutineType(types: !11892)
!11892 = !{!2301, !5, !2301, !2325, !2325}
!11893 = !DILocalVariable(name: "mode", arg: 1, scope: !11890, file: !3, line: 1881, type: !5)
!11894 = !DILocation(line: 1881, column: 33, scope: !11890)
!11895 = !DILocalVariable(name: "value", arg: 2, scope: !11890, file: !3, line: 1881, type: !2301)
!11896 = !DILocation(line: 1881, column: 43, scope: !11890)
!11897 = !DILocalVariable(name: "bitpos", arg: 3, scope: !11890, file: !3, line: 1881, type: !2325)
!11898 = !DILocation(line: 1881, column: 54, scope: !11890)
!11899 = !DILocalVariable(name: "bitsize", arg: 4, scope: !11890, file: !3, line: 1881, type: !2325)
!11900 = !DILocation(line: 1881, column: 66, scope: !11890)
!11901 = !DILocalVariable(name: "v", scope: !11890, file: !3, line: 1883, type: !2375)
!11902 = !DILocation(line: 1883, column: 26, scope: !11890)
!11903 = !DILocation(line: 1883, column: 30, scope: !11890)
!11904 = !DILocalVariable(name: "low", scope: !11890, file: !3, line: 1884, type: !2299)
!11905 = !DILocation(line: 1884, column: 17, scope: !11890)
!11906 = !DILocalVariable(name: "high", scope: !11890, file: !3, line: 1884, type: !2299)
!11907 = !DILocation(line: 1884, column: 22, scope: !11890)
!11908 = !DILocation(line: 1886, column: 7, scope: !11909)
!11909 = distinct !DILexicalBlock(scope: !11890, file: !3, line: 1886, column: 7)
!11910 = !DILocation(line: 1886, column: 15, scope: !11909)
!11911 = !DILocation(line: 1886, column: 7, scope: !11890)
!11912 = !DILocation(line: 1887, column: 34, scope: !11909)
!11913 = !DILocation(line: 1887, column: 31, scope: !11909)
!11914 = !DILocation(line: 1887, column: 10, scope: !11909)
!11915 = !DILocation(line: 1887, column: 7, scope: !11909)
!11916 = !DILocation(line: 1887, column: 5, scope: !11909)
!11917 = !DILocation(line: 1889, column: 7, scope: !11918)
!11918 = distinct !DILexicalBlock(scope: !11890, file: !3, line: 1889, column: 7)
!11919 = !DILocation(line: 1889, column: 14, scope: !11918)
!11920 = !DILocation(line: 1889, column: 7, scope: !11890)
!11921 = !DILocation(line: 1891, column: 13, scope: !11922)
!11922 = distinct !DILexicalBlock(scope: !11918, file: !3, line: 1890, column: 5)
!11923 = !DILocation(line: 1891, column: 18, scope: !11922)
!11924 = !DILocation(line: 1891, column: 15, scope: !11922)
!11925 = !DILocation(line: 1891, column: 11, scope: !11922)
!11926 = !DILocation(line: 1892, column: 15, scope: !11922)
!11927 = !DILocation(line: 1892, column: 22, scope: !11922)
!11928 = !DILocation(line: 1892, column: 29, scope: !11922)
!11929 = !DILocation(line: 1892, column: 60, scope: !11922)
!11930 = !DILocation(line: 1892, column: 58, scope: !11922)
!11931 = !DILocation(line: 1892, column: 31, scope: !11922)
!11932 = !DILocation(line: 1892, column: 12, scope: !11922)
!11933 = !DILocation(line: 1893, column: 5, scope: !11922)
!11934 = !DILocation(line: 1896, column: 11, scope: !11935)
!11935 = distinct !DILexicalBlock(scope: !11918, file: !3, line: 1895, column: 5)
!11936 = !DILocation(line: 1897, column: 14, scope: !11935)
!11937 = !DILocation(line: 1897, column: 20, scope: !11935)
!11938 = !DILocation(line: 1897, column: 27, scope: !11935)
!11939 = !DILocation(line: 1897, column: 16, scope: !11935)
!11940 = !DILocation(line: 1897, column: 12, scope: !11935)
!11941 = !DILocation(line: 1900, column: 30, scope: !11890)
!11942 = !DILocation(line: 1900, column: 35, scope: !11890)
!11943 = !DILocation(line: 1900, column: 41, scope: !11890)
!11944 = !DILocation(line: 1900, column: 10, scope: !11890)
!11945 = !DILocation(line: 1900, column: 3, scope: !11890)
!11946 = distinct !DISubprogram(name: "mask_rtx", scope: !3, file: !3, line: 1840, type: !11947, scopeLine: 1841, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!11947 = !DISubroutineType(types: !11948)
!11948 = !{!2301, !5, !2325, !2325, !2325}
!11949 = !DILocalVariable(name: "mode", arg: 1, scope: !11946, file: !3, line: 1840, type: !5)
!11950 = !DILocation(line: 1840, column: 29, scope: !11946)
!11951 = !DILocalVariable(name: "bitpos", arg: 2, scope: !11946, file: !3, line: 1840, type: !2325)
!11952 = !DILocation(line: 1840, column: 39, scope: !11946)
!11953 = !DILocalVariable(name: "bitsize", arg: 3, scope: !11946, file: !3, line: 1840, type: !2325)
!11954 = !DILocation(line: 1840, column: 51, scope: !11946)
!11955 = !DILocalVariable(name: "complement", arg: 4, scope: !11946, file: !3, line: 1840, type: !2325)
!11956 = !DILocation(line: 1840, column: 64, scope: !11946)
!11957 = !DILocalVariable(name: "masklow", scope: !11946, file: !3, line: 1842, type: !2299)
!11958 = !DILocation(line: 1842, column: 17, scope: !11946)
!11959 = !DILocalVariable(name: "maskhigh", scope: !11946, file: !3, line: 1842, type: !2299)
!11960 = !DILocation(line: 1842, column: 26, scope: !11946)
!11961 = !DILocation(line: 1844, column: 7, scope: !11962)
!11962 = distinct !DILexicalBlock(scope: !11946, file: !3, line: 1844, column: 7)
!11963 = !DILocation(line: 1844, column: 15, scope: !11962)
!11964 = !DILocation(line: 1844, column: 7, scope: !11946)
!11965 = !DILocation(line: 1845, column: 13, scope: !11962)
!11966 = !DILocation(line: 1845, column: 5, scope: !11962)
!11967 = !DILocation(line: 1846, column: 12, scope: !11968)
!11968 = distinct !DILexicalBlock(scope: !11962, file: !3, line: 1846, column: 12)
!11969 = !DILocation(line: 1846, column: 19, scope: !11968)
!11970 = !DILocation(line: 1846, column: 12, scope: !11962)
!11971 = !DILocation(line: 1847, column: 37, scope: !11968)
!11972 = !DILocation(line: 1847, column: 34, scope: !11968)
!11973 = !DILocation(line: 1847, column: 13, scope: !11968)
!11974 = !DILocation(line: 1847, column: 5, scope: !11968)
!11975 = !DILocation(line: 1849, column: 13, scope: !11968)
!11976 = !DILocation(line: 1851, column: 7, scope: !11977)
!11977 = distinct !DILexicalBlock(scope: !11946, file: !3, line: 1851, column: 7)
!11978 = !DILocation(line: 1851, column: 16, scope: !11977)
!11979 = !DILocation(line: 1851, column: 14, scope: !11977)
!11980 = !DILocation(line: 1851, column: 24, scope: !11977)
!11981 = !DILocation(line: 1851, column: 7, scope: !11946)
!11982 = !DILocation(line: 1853, column: 32, scope: !11977)
!11983 = !DILocation(line: 1853, column: 30, scope: !11977)
!11984 = !DILocation(line: 1853, column: 41, scope: !11977)
!11985 = !DILocation(line: 1853, column: 39, scope: !11977)
!11986 = !DILocation(line: 1853, column: 3, scope: !11977)
!11987 = !DILocation(line: 1852, column: 13, scope: !11977)
!11988 = !DILocation(line: 1852, column: 5, scope: !11977)
!11989 = !DILocation(line: 1855, column: 7, scope: !11990)
!11990 = distinct !DILexicalBlock(scope: !11946, file: !3, line: 1855, column: 7)
!11991 = !DILocation(line: 1855, column: 14, scope: !11990)
!11992 = !DILocation(line: 1855, column: 7, scope: !11946)
!11993 = !DILocation(line: 1856, column: 14, scope: !11990)
!11994 = !DILocation(line: 1856, column: 5, scope: !11990)
!11995 = !DILocation(line: 1858, column: 39, scope: !11990)
!11996 = !DILocation(line: 1858, column: 46, scope: !11990)
!11997 = !DILocation(line: 1858, column: 35, scope: !11990)
!11998 = !DILocation(line: 1858, column: 14, scope: !11990)
!11999 = !DILocation(line: 1860, column: 7, scope: !12000)
!12000 = distinct !DILexicalBlock(scope: !11946, file: !3, line: 1860, column: 7)
!12001 = !DILocation(line: 1860, column: 15, scope: !12000)
!12002 = !DILocation(line: 1860, column: 7, scope: !11946)
!12003 = !DILocation(line: 1861, column: 14, scope: !12000)
!12004 = !DILocation(line: 1861, column: 5, scope: !12000)
!12005 = !DILocation(line: 1862, column: 12, scope: !12006)
!12006 = distinct !DILexicalBlock(scope: !12000, file: !3, line: 1862, column: 12)
!12007 = !DILocation(line: 1862, column: 21, scope: !12006)
!12008 = !DILocation(line: 1862, column: 19, scope: !12006)
!12009 = !DILocation(line: 1862, column: 29, scope: !12006)
!12010 = !DILocation(line: 1862, column: 12, scope: !12000)
!12011 = !DILocation(line: 1864, column: 37, scope: !12006)
!12012 = !DILocation(line: 1864, column: 35, scope: !12006)
!12013 = !DILocation(line: 1864, column: 46, scope: !12006)
!12014 = !DILocation(line: 1864, column: 44, scope: !12006)
!12015 = !DILocation(line: 1864, column: 4, scope: !12006)
!12016 = !DILocation(line: 1863, column: 14, scope: !12006)
!12017 = !DILocation(line: 1863, column: 5, scope: !12006)
!12018 = !DILocation(line: 1866, column: 14, scope: !12006)
!12019 = !DILocation(line: 1868, column: 7, scope: !12020)
!12020 = distinct !DILexicalBlock(scope: !11946, file: !3, line: 1868, column: 7)
!12021 = !DILocation(line: 1868, column: 7, scope: !11946)
!12022 = !DILocation(line: 1870, column: 19, scope: !12023)
!12023 = distinct !DILexicalBlock(scope: !12020, file: !3, line: 1869, column: 5)
!12024 = !DILocation(line: 1870, column: 18, scope: !12023)
!12025 = !DILocation(line: 1870, column: 16, scope: !12023)
!12026 = !DILocation(line: 1871, column: 18, scope: !12023)
!12027 = !DILocation(line: 1871, column: 17, scope: !12023)
!12028 = !DILocation(line: 1871, column: 15, scope: !12023)
!12029 = !DILocation(line: 1872, column: 5, scope: !12023)
!12030 = !DILocation(line: 1874, column: 30, scope: !11946)
!12031 = !DILocation(line: 1874, column: 39, scope: !11946)
!12032 = !DILocation(line: 1874, column: 49, scope: !11946)
!12033 = !DILocation(line: 1874, column: 10, scope: !11946)
!12034 = !DILocation(line: 1874, column: 3, scope: !11946)
!12035 = distinct !DISubprogram(name: "extract_fixed_bit_field", scope: !3, file: !3, line: 1712, type: !12036, scopeLine: 1717, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!12036 = !DISubroutineType(types: !12037)
!12037 = !{!2301, !5, !2301, !2375, !2375, !2375, !2301, !2325}
!12038 = !DILocalVariable(name: "tmode", arg: 1, scope: !12035, file: !3, line: 1712, type: !5)
!12039 = !DILocation(line: 1712, column: 44, scope: !12035)
!12040 = !DILocalVariable(name: "op0", arg: 2, scope: !12035, file: !3, line: 1712, type: !2301)
!12041 = !DILocation(line: 1712, column: 55, scope: !12035)
!12042 = !DILocalVariable(name: "offset", arg: 3, scope: !12035, file: !3, line: 1713, type: !2375)
!12043 = !DILocation(line: 1713, column: 28, scope: !12035)
!12044 = !DILocalVariable(name: "bitsize", arg: 4, scope: !12035, file: !3, line: 1714, type: !2375)
!12045 = !DILocation(line: 1714, column: 28, scope: !12035)
!12046 = !DILocalVariable(name: "bitpos", arg: 5, scope: !12035, file: !3, line: 1715, type: !2375)
!12047 = !DILocation(line: 1715, column: 28, scope: !12035)
!12048 = !DILocalVariable(name: "target", arg: 6, scope: !12035, file: !3, line: 1715, type: !2301)
!12049 = !DILocation(line: 1715, column: 40, scope: !12035)
!12050 = !DILocalVariable(name: "unsignedp", arg: 7, scope: !12035, file: !3, line: 1716, type: !2325)
!12051 = !DILocation(line: 1716, column: 9, scope: !12035)
!12052 = !DILocalVariable(name: "total_bits", scope: !12035, file: !3, line: 1718, type: !7)
!12053 = !DILocation(line: 1718, column: 16, scope: !12035)
!12054 = !DILocalVariable(name: "mode", scope: !12035, file: !3, line: 1719, type: !5)
!12055 = !DILocation(line: 1719, column: 21, scope: !12035)
!12056 = !DILocation(line: 1721, column: 7, scope: !12057)
!12057 = distinct !DILexicalBlock(scope: !12035, file: !3, line: 1721, column: 7)
!12058 = !DILocation(line: 1721, column: 22, scope: !12057)
!12059 = !DILocation(line: 1721, column: 32, scope: !12057)
!12060 = !DILocation(line: 1721, column: 35, scope: !12057)
!12061 = !DILocation(line: 1721, column: 7, scope: !12035)
!12062 = !DILocation(line: 1724, column: 11, scope: !12063)
!12063 = distinct !DILexicalBlock(scope: !12064, file: !3, line: 1724, column: 11)
!12064 = distinct !DILexicalBlock(scope: !12057, file: !3, line: 1722, column: 5)
!12065 = !DILocation(line: 1724, column: 21, scope: !12063)
!12066 = !DILocation(line: 1724, column: 19, scope: !12063)
!12067 = !DILocation(line: 1724, column: 28, scope: !12063)
!12068 = !DILocation(line: 1724, column: 11, scope: !12064)
!12069 = !DILocation(line: 1725, column: 34, scope: !12063)
!12070 = !DILocation(line: 1725, column: 39, scope: !12063)
!12071 = !DILocation(line: 1725, column: 48, scope: !12063)
!12072 = !DILocation(line: 1725, column: 56, scope: !12063)
!12073 = !DILocation(line: 1725, column: 9, scope: !12063)
!12074 = !DILocation(line: 1725, column: 2, scope: !12063)
!12075 = !DILocation(line: 1726, column: 5, scope: !12064)
!12076 = !DILocation(line: 1733, column: 29, scope: !12077)
!12077 = distinct !DILexicalBlock(scope: !12057, file: !3, line: 1728, column: 5)
!12078 = !DILocation(line: 1733, column: 38, scope: !12077)
!12079 = !DILocation(line: 1733, column: 47, scope: !12077)
!12080 = !DILocation(line: 1733, column: 54, scope: !12077)
!12081 = !DILocation(line: 1733, column: 45, scope: !12077)
!12082 = !DILocation(line: 1734, column: 8, scope: !12077)
!12083 = !DILocation(line: 1734, column: 25, scope: !12077)
!12084 = !DILocation(line: 1734, column: 36, scope: !12077)
!12085 = !DILocation(line: 1733, column: 14, scope: !12077)
!12086 = !DILocation(line: 1733, column: 12, scope: !12077)
!12087 = !DILocation(line: 1736, column: 11, scope: !12088)
!12088 = distinct !DILexicalBlock(scope: !12077, file: !3, line: 1736, column: 11)
!12089 = !DILocation(line: 1736, column: 16, scope: !12088)
!12090 = !DILocation(line: 1736, column: 11, scope: !12077)
!12091 = !DILocation(line: 1739, column: 34, scope: !12088)
!12092 = !DILocation(line: 1739, column: 39, scope: !12088)
!12093 = !DILocation(line: 1740, column: 6, scope: !12088)
!12094 = !DILocation(line: 1740, column: 15, scope: !12088)
!12095 = !DILocation(line: 1740, column: 22, scope: !12088)
!12096 = !DILocation(line: 1740, column: 13, scope: !12088)
!12097 = !DILocation(line: 1741, column: 6, scope: !12088)
!12098 = !DILocation(line: 1739, column: 9, scope: !12088)
!12099 = !DILocation(line: 1739, column: 2, scope: !12088)
!12100 = !DILocation(line: 1743, column: 20, scope: !12077)
!12101 = !DILocation(line: 1743, column: 18, scope: !12077)
!12102 = !DILocation(line: 1748, column: 11, scope: !12103)
!12103 = distinct !DILexicalBlock(scope: !12077, file: !3, line: 1748, column: 11)
!12104 = !DILocation(line: 1748, column: 21, scope: !12103)
!12105 = !DILocation(line: 1748, column: 18, scope: !12103)
!12106 = !DILocation(line: 1748, column: 11, scope: !12077)
!12107 = !DILocation(line: 1750, column: 15, scope: !12108)
!12108 = distinct !DILexicalBlock(scope: !12103, file: !3, line: 1749, column: 2)
!12109 = !DILocation(line: 1750, column: 24, scope: !12108)
!12110 = !DILocation(line: 1750, column: 22, scope: !12108)
!12111 = !DILocation(line: 1750, column: 39, scope: !12108)
!12112 = !DILocation(line: 1750, column: 50, scope: !12108)
!12113 = !DILocation(line: 1750, column: 38, scope: !12108)
!12114 = !DILocation(line: 1750, column: 36, scope: !12108)
!12115 = !DILocation(line: 1750, column: 11, scope: !12108)
!12116 = !DILocation(line: 1751, column: 16, scope: !12108)
!12117 = !DILocation(line: 1751, column: 25, scope: !12108)
!12118 = !DILocation(line: 1751, column: 23, scope: !12108)
!12119 = !DILocation(line: 1751, column: 40, scope: !12108)
!12120 = !DILocation(line: 1751, column: 51, scope: !12108)
!12121 = !DILocation(line: 1751, column: 39, scope: !12108)
!12122 = !DILocation(line: 1751, column: 37, scope: !12108)
!12123 = !DILocation(line: 1752, column: 8, scope: !12108)
!12124 = !DILocation(line: 1751, column: 11, scope: !12108)
!12125 = !DILocation(line: 1753, column: 2, scope: !12108)
!12126 = !DILocation(line: 1759, column: 18, scope: !12077)
!12127 = !DILocation(line: 1759, column: 28, scope: !12077)
!12128 = !DILocation(line: 1759, column: 39, scope: !12077)
!12129 = !DILocation(line: 1759, column: 27, scope: !12077)
!12130 = !DILocation(line: 1759, column: 25, scope: !12077)
!12131 = !DILocation(line: 1759, column: 57, scope: !12077)
!12132 = !DILocation(line: 1759, column: 14, scope: !12077)
!12133 = !DILocation(line: 1760, column: 18, scope: !12077)
!12134 = !DILocation(line: 1760, column: 28, scope: !12077)
!12135 = !DILocation(line: 1760, column: 39, scope: !12077)
!12136 = !DILocation(line: 1760, column: 27, scope: !12077)
!12137 = !DILocation(line: 1760, column: 25, scope: !12077)
!12138 = !DILocation(line: 1760, column: 14, scope: !12077)
!12139 = !DILocation(line: 1761, column: 13, scope: !12077)
!12140 = !DILocation(line: 1761, column: 11, scope: !12077)
!12141 = !DILocation(line: 1764, column: 10, scope: !12035)
!12142 = !DILocation(line: 1764, column: 8, scope: !12035)
!12143 = !DILocation(line: 1774, column: 7, scope: !12144)
!12144 = distinct !DILexicalBlock(scope: !12035, file: !3, line: 1774, column: 7)
!12145 = !DILocation(line: 1774, column: 7, scope: !12035)
!12146 = !DILocation(line: 1776, column: 11, scope: !12147)
!12147 = distinct !DILexicalBlock(scope: !12148, file: !3, line: 1776, column: 11)
!12148 = distinct !DILexicalBlock(scope: !12144, file: !3, line: 1775, column: 5)
!12149 = !DILocation(line: 1776, column: 11, scope: !12148)
!12150 = !DILocalVariable(name: "amount", scope: !12151, file: !3, line: 1780, type: !2422)
!12151 = distinct !DILexicalBlock(scope: !12147, file: !3, line: 1777, column: 2)
!12152 = !DILocation(line: 1780, column: 9, scope: !12151)
!12153 = !DILocation(line: 1780, column: 44, scope: !12151)
!12154 = !DILocation(line: 1780, column: 18, scope: !12151)
!12155 = !DILocalVariable(name: "subtarget", scope: !12151, file: !3, line: 1783, type: !2301)
!12156 = !DILocation(line: 1783, column: 8, scope: !12151)
!12157 = !DILocation(line: 1783, column: 21, scope: !12151)
!12158 = !DILocation(line: 1783, column: 28, scope: !12151)
!12159 = !DILocation(line: 1783, column: 33, scope: !12151)
!12160 = !DILocation(line: 1783, column: 36, scope: !12151)
!12161 = !DILocation(line: 1783, column: 53, scope: !12151)
!12162 = !DILocation(line: 1784, column: 8, scope: !12163)
!12163 = distinct !DILexicalBlock(scope: !12151, file: !3, line: 1784, column: 8)
!12164 = !DILocation(line: 1784, column: 17, scope: !12163)
!12165 = !DILocation(line: 1784, column: 14, scope: !12163)
!12166 = !DILocation(line: 1784, column: 8, scope: !12151)
!12167 = !DILocation(line: 1784, column: 33, scope: !12163)
!12168 = !DILocation(line: 1784, column: 23, scope: !12163)
!12169 = !DILocation(line: 1785, column: 37, scope: !12151)
!12170 = !DILocation(line: 1785, column: 43, scope: !12151)
!12171 = !DILocation(line: 1785, column: 48, scope: !12151)
!12172 = !DILocation(line: 1785, column: 56, scope: !12151)
!12173 = !DILocation(line: 1785, column: 10, scope: !12151)
!12174 = !DILocation(line: 1785, column: 8, scope: !12151)
!12175 = !DILocation(line: 1786, column: 2, scope: !12151)
!12176 = !DILocation(line: 1788, column: 11, scope: !12177)
!12177 = distinct !DILexicalBlock(scope: !12148, file: !3, line: 1788, column: 11)
!12178 = !DILocation(line: 1788, column: 19, scope: !12177)
!12179 = !DILocation(line: 1788, column: 16, scope: !12177)
!12180 = !DILocation(line: 1788, column: 11, scope: !12148)
!12181 = !DILocation(line: 1789, column: 25, scope: !12177)
!12182 = !DILocation(line: 1789, column: 32, scope: !12177)
!12183 = !DILocation(line: 1789, column: 8, scope: !12177)
!12184 = !DILocation(line: 1789, column: 6, scope: !12177)
!12185 = !DILocation(line: 1789, column: 2, scope: !12177)
!12186 = !DILocation(line: 1794, column: 11, scope: !12187)
!12187 = distinct !DILexicalBlock(scope: !12148, file: !3, line: 1794, column: 11)
!12188 = !DILocation(line: 1794, column: 38, scope: !12187)
!12189 = !DILocation(line: 1794, column: 47, scope: !12187)
!12190 = !DILocation(line: 1794, column: 45, scope: !12187)
!12191 = !DILocation(line: 1794, column: 35, scope: !12187)
!12192 = !DILocation(line: 1794, column: 11, scope: !12148)
!12193 = !DILocation(line: 1795, column: 23, scope: !12187)
!12194 = !DILocation(line: 1795, column: 50, scope: !12187)
!12195 = !DILocation(line: 1796, column: 19, scope: !12187)
!12196 = !DILocation(line: 1796, column: 38, scope: !12187)
!12197 = !DILocation(line: 1796, column: 9, scope: !12187)
!12198 = !DILocation(line: 1797, column: 9, scope: !12187)
!12199 = !DILocation(line: 1795, column: 9, scope: !12187)
!12200 = !DILocation(line: 1795, column: 2, scope: !12187)
!12201 = !DILocation(line: 1798, column: 14, scope: !12148)
!12202 = !DILocation(line: 1798, column: 7, scope: !12148)
!12203 = !DILocation(line: 1803, column: 20, scope: !12035)
!12204 = !DILocation(line: 1803, column: 26, scope: !12035)
!12205 = !DILocation(line: 1803, column: 9, scope: !12035)
!12206 = !DILocation(line: 1803, column: 7, scope: !12035)
!12207 = !DILocation(line: 1804, column: 7, scope: !12208)
!12208 = distinct !DILexicalBlock(scope: !12035, file: !3, line: 1804, column: 7)
!12209 = !DILocation(line: 1804, column: 15, scope: !12208)
!12210 = !DILocation(line: 1804, column: 12, scope: !12208)
!12211 = !DILocation(line: 1804, column: 7, scope: !12035)
!12212 = !DILocation(line: 1805, column: 12, scope: !12208)
!12213 = !DILocation(line: 1805, column: 5, scope: !12208)
!12214 = !DILocation(line: 1809, column: 15, scope: !12215)
!12215 = distinct !DILexicalBlock(scope: !12035, file: !3, line: 1809, column: 3)
!12216 = !DILocation(line: 1809, column: 13, scope: !12215)
!12217 = !DILocation(line: 1809, column: 8, scope: !12215)
!12218 = !DILocation(line: 1809, column: 52, scope: !12219)
!12219 = distinct !DILexicalBlock(scope: !12215, file: !3, line: 1809, column: 3)
!12220 = !DILocation(line: 1809, column: 57, scope: !12219)
!12221 = !DILocation(line: 1809, column: 3, scope: !12215)
!12222 = !DILocation(line: 1811, column: 9, scope: !12223)
!12223 = distinct !DILexicalBlock(scope: !12219, file: !3, line: 1811, column: 9)
!12224 = !DILocation(line: 1811, column: 36, scope: !12223)
!12225 = !DILocation(line: 1811, column: 46, scope: !12223)
!12226 = !DILocation(line: 1811, column: 44, scope: !12223)
!12227 = !DILocation(line: 1811, column: 33, scope: !12223)
!12228 = !DILocation(line: 1811, column: 9, scope: !12219)
!12229 = !DILocation(line: 1813, column: 25, scope: !12230)
!12230 = distinct !DILexicalBlock(scope: !12223, file: !3, line: 1812, column: 7)
!12231 = !DILocation(line: 1813, column: 31, scope: !12230)
!12232 = !DILocation(line: 1813, column: 8, scope: !12230)
!12233 = !DILocation(line: 1813, column: 6, scope: !12230)
!12234 = !DILocation(line: 1814, column: 2, scope: !12230)
!12235 = !DILocation(line: 1810, column: 15, scope: !12219)
!12236 = !DILocation(line: 1810, column: 13, scope: !12219)
!12237 = !DILocation(line: 1809, column: 3, scope: !12219)
!12238 = distinct !{!12238, !12221, !12239}
!12239 = !DILocation(line: 1815, column: 7, scope: !12215)
!12240 = !DILocation(line: 1817, column: 7, scope: !12241)
!12241 = distinct !DILexicalBlock(scope: !12035, file: !3, line: 1817, column: 7)
!12242 = !DILocation(line: 1817, column: 35, scope: !12241)
!12243 = !DILocation(line: 1817, column: 45, scope: !12241)
!12244 = !DILocation(line: 1817, column: 43, scope: !12241)
!12245 = !DILocation(line: 1817, column: 31, scope: !12241)
!12246 = !DILocation(line: 1817, column: 7, scope: !12035)
!12247 = !DILocalVariable(name: "amount", scope: !12248, file: !3, line: 1819, type: !2422)
!12248 = distinct !DILexicalBlock(scope: !12241, file: !3, line: 1818, column: 5)
!12249 = !DILocation(line: 1819, column: 12, scope: !12248)
!12250 = !DILocation(line: 1821, column: 5, scope: !12248)
!12251 = !DILocation(line: 1821, column: 32, scope: !12248)
!12252 = !DILocation(line: 1821, column: 42, scope: !12248)
!12253 = !DILocation(line: 1821, column: 40, scope: !12248)
!12254 = !DILocation(line: 1821, column: 29, scope: !12248)
!12255 = !DILocation(line: 1820, column: 4, scope: !12248)
!12256 = !DILocalVariable(name: "subtarget", scope: !12248, file: !3, line: 1823, type: !2301)
!12257 = !DILocation(line: 1823, column: 11, scope: !12248)
!12258 = !DILocation(line: 1823, column: 24, scope: !12248)
!12259 = !DILocation(line: 1823, column: 31, scope: !12248)
!12260 = !DILocation(line: 1823, column: 36, scope: !12248)
!12261 = !DILocation(line: 1823, column: 39, scope: !12248)
!12262 = !DILocation(line: 1823, column: 56, scope: !12248)
!12263 = !DILocation(line: 1824, column: 40, scope: !12248)
!12264 = !DILocation(line: 1824, column: 46, scope: !12248)
!12265 = !DILocation(line: 1824, column: 51, scope: !12248)
!12266 = !DILocation(line: 1824, column: 59, scope: !12248)
!12267 = !DILocation(line: 1824, column: 13, scope: !12248)
!12268 = !DILocation(line: 1824, column: 11, scope: !12248)
!12269 = !DILocation(line: 1825, column: 5, scope: !12248)
!12270 = !DILocation(line: 1827, column: 37, scope: !12035)
!12271 = !DILocation(line: 1827, column: 43, scope: !12035)
!12272 = !DILocation(line: 1829, column: 11, scope: !12035)
!12273 = !DILocation(line: 1829, column: 37, scope: !12035)
!12274 = !DILocation(line: 1829, column: 35, scope: !12035)
!12275 = !DILocation(line: 1828, column: 10, scope: !12035)
!12276 = !DILocation(line: 1830, column: 10, scope: !12035)
!12277 = !DILocation(line: 1827, column: 10, scope: !12035)
!12278 = !DILocation(line: 1827, column: 3, scope: !12035)
!12279 = !DILocation(line: 1831, column: 1, scope: !12035)
!12280 = distinct !DISubprogram(name: "extract_split_bit_field", scope: !3, file: !3, line: 1911, type: !12281, scopeLine: 1913, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!12281 = !DISubroutineType(types: !12282)
!12282 = !{!2301, !2301, !2375, !2375, !2325}
!12283 = !DILocalVariable(name: "op0", arg: 1, scope: !12280, file: !3, line: 1911, type: !2301)
!12284 = !DILocation(line: 1911, column: 30, scope: !12280)
!12285 = !DILocalVariable(name: "bitsize", arg: 2, scope: !12280, file: !3, line: 1911, type: !2375)
!12286 = !DILocation(line: 1911, column: 58, scope: !12280)
!12287 = !DILocalVariable(name: "bitpos", arg: 3, scope: !12280, file: !3, line: 1912, type: !2375)
!12288 = !DILocation(line: 1912, column: 28, scope: !12280)
!12289 = !DILocalVariable(name: "unsignedp", arg: 4, scope: !12280, file: !3, line: 1912, type: !2325)
!12290 = !DILocation(line: 1912, column: 40, scope: !12280)
!12291 = !DILocalVariable(name: "unit", scope: !12280, file: !3, line: 1914, type: !7)
!12292 = !DILocation(line: 1914, column: 16, scope: !12280)
!12293 = !DILocalVariable(name: "bitsdone", scope: !12280, file: !3, line: 1915, type: !7)
!12294 = !DILocation(line: 1915, column: 16, scope: !12280)
!12295 = !DILocalVariable(name: "result", scope: !12280, file: !3, line: 1916, type: !2301)
!12296 = !DILocation(line: 1916, column: 7, scope: !12280)
!12297 = !DILocalVariable(name: "first", scope: !12280, file: !3, line: 1917, type: !2325)
!12298 = !DILocation(line: 1917, column: 7, scope: !12280)
!12299 = !DILocation(line: 1921, column: 7, scope: !12300)
!12300 = distinct !DILexicalBlock(scope: !12280, file: !3, line: 1921, column: 7)
!12301 = !DILocation(line: 1921, column: 19, scope: !12300)
!12302 = !DILocation(line: 1921, column: 22, scope: !12300)
!12303 = !DILocation(line: 1921, column: 37, scope: !12300)
!12304 = !DILocation(line: 1921, column: 7, scope: !12280)
!12305 = !DILocation(line: 1922, column: 10, scope: !12300)
!12306 = !DILocation(line: 1922, column: 5, scope: !12300)
!12307 = !DILocation(line: 1924, column: 12, scope: !12300)
!12308 = !DILocation(line: 1924, column: 10, scope: !12300)
!12309 = !DILocation(line: 1926, column: 3, scope: !12280)
!12310 = !DILocation(line: 1926, column: 10, scope: !12280)
!12311 = !DILocation(line: 1926, column: 21, scope: !12280)
!12312 = !DILocation(line: 1926, column: 19, scope: !12280)
!12313 = !DILocalVariable(name: "thissize", scope: !12314, file: !3, line: 1928, type: !2375)
!12314 = distinct !DILexicalBlock(scope: !12280, file: !3, line: 1927, column: 5)
!12315 = !DILocation(line: 1928, column: 30, scope: !12314)
!12316 = !DILocalVariable(name: "part", scope: !12314, file: !3, line: 1929, type: !2301)
!12317 = !DILocation(line: 1929, column: 11, scope: !12314)
!12318 = !DILocalVariable(name: "word", scope: !12314, file: !3, line: 1929, type: !2301)
!12319 = !DILocation(line: 1929, column: 17, scope: !12314)
!12320 = !DILocalVariable(name: "thispos", scope: !12314, file: !3, line: 1930, type: !2375)
!12321 = !DILocation(line: 1930, column: 30, scope: !12314)
!12322 = !DILocalVariable(name: "offset", scope: !12314, file: !3, line: 1931, type: !2375)
!12323 = !DILocation(line: 1931, column: 30, scope: !12314)
!12324 = !DILocation(line: 1933, column: 17, scope: !12314)
!12325 = !DILocation(line: 1933, column: 26, scope: !12314)
!12326 = !DILocation(line: 1933, column: 24, scope: !12314)
!12327 = !DILocation(line: 1933, column: 38, scope: !12314)
!12328 = !DILocation(line: 1933, column: 36, scope: !12314)
!12329 = !DILocation(line: 1933, column: 14, scope: !12314)
!12330 = !DILocation(line: 1934, column: 18, scope: !12314)
!12331 = !DILocation(line: 1934, column: 27, scope: !12314)
!12332 = !DILocation(line: 1934, column: 25, scope: !12314)
!12333 = !DILocation(line: 1934, column: 39, scope: !12314)
!12334 = !DILocation(line: 1934, column: 37, scope: !12314)
!12335 = !DILocation(line: 1934, column: 15, scope: !12314)
!12336 = !DILocation(line: 1939, column: 18, scope: !12314)
!12337 = !DILocation(line: 1939, column: 16, scope: !12314)
!12338 = !DILocation(line: 1940, column: 18, scope: !12314)
!12339 = !DILocation(line: 1940, column: 16, scope: !12314)
!12340 = !DILocation(line: 1948, column: 11, scope: !12341)
!12341 = distinct !DILexicalBlock(scope: !12314, file: !3, line: 1948, column: 11)
!12342 = !DILocation(line: 1948, column: 26, scope: !12341)
!12343 = !DILocation(line: 1948, column: 11, scope: !12314)
!12344 = !DILocalVariable(name: "word_offset", scope: !12345, file: !3, line: 1950, type: !2325)
!12345 = distinct !DILexicalBlock(scope: !12341, file: !3, line: 1949, column: 2)
!12346 = !DILocation(line: 1950, column: 8, scope: !12345)
!12347 = !DILocation(line: 1950, column: 23, scope: !12345)
!12348 = !DILocation(line: 1950, column: 41, scope: !12345)
!12349 = !DILocation(line: 1950, column: 22, scope: !12345)
!12350 = !DILocation(line: 1950, column: 61, scope: !12345)
!12351 = !DILocation(line: 1950, column: 59, scope: !12345)
!12352 = !DILocation(line: 1951, column: 34, scope: !12345)
!12353 = !DILocation(line: 1951, column: 52, scope: !12345)
!12354 = !DILocation(line: 1952, column: 6, scope: !12345)
!12355 = !DILocation(line: 1951, column: 11, scope: !12345)
!12356 = !DILocation(line: 1951, column: 9, scope: !12345)
!12357 = !DILocation(line: 1953, column: 11, scope: !12345)
!12358 = !DILocation(line: 1954, column: 2, scope: !12345)
!12359 = !DILocation(line: 1955, column: 16, scope: !12360)
!12360 = distinct !DILexicalBlock(scope: !12341, file: !3, line: 1955, column: 16)
!12361 = !DILocation(line: 1955, column: 16, scope: !12341)
!12362 = !DILocation(line: 1957, column: 34, scope: !12363)
!12363 = distinct !DILexicalBlock(scope: !12360, file: !3, line: 1956, column: 2)
!12364 = !DILocation(line: 1957, column: 39, scope: !12363)
!12365 = !DILocation(line: 1957, column: 47, scope: !12363)
!12366 = !DILocation(line: 1957, column: 11, scope: !12363)
!12367 = !DILocation(line: 1957, column: 9, scope: !12363)
!12368 = !DILocation(line: 1958, column: 11, scope: !12363)
!12369 = !DILocation(line: 1959, column: 2, scope: !12363)
!12370 = !DILocation(line: 1961, column: 9, scope: !12360)
!12371 = !DILocation(line: 1961, column: 7, scope: !12360)
!12372 = !DILocation(line: 1967, column: 39, scope: !12314)
!12373 = !DILocation(line: 1967, column: 50, scope: !12314)
!12374 = !DILocation(line: 1968, column: 11, scope: !12314)
!12375 = !DILocation(line: 1968, column: 20, scope: !12314)
!12376 = !DILocation(line: 1968, column: 18, scope: !12314)
!12377 = !DILocation(line: 1968, column: 25, scope: !12314)
!12378 = !DILocation(line: 1969, column: 11, scope: !12314)
!12379 = !DILocation(line: 1969, column: 21, scope: !12314)
!12380 = !DILocation(line: 1967, column: 14, scope: !12314)
!12381 = !DILocation(line: 1967, column: 12, scope: !12314)
!12382 = !DILocation(line: 1970, column: 19, scope: !12314)
!12383 = !DILocation(line: 1970, column: 16, scope: !12314)
!12384 = !DILocation(line: 1982, column: 8, scope: !12385)
!12385 = distinct !DILexicalBlock(scope: !12386, file: !3, line: 1982, column: 8)
!12386 = distinct !DILexicalBlock(scope: !12387, file: !3, line: 1981, column: 2)
!12387 = distinct !DILexicalBlock(scope: !12314, file: !3, line: 1973, column: 11)
!12388 = !DILocation(line: 1982, column: 20, scope: !12385)
!12389 = !DILocation(line: 1982, column: 17, scope: !12385)
!12390 = !DILocation(line: 1982, column: 8, scope: !12386)
!12391 = !DILocation(line: 1983, column: 40, scope: !12385)
!12392 = !DILocation(line: 1983, column: 51, scope: !12385)
!12393 = !DILocation(line: 1985, column: 7, scope: !12385)
!12394 = !DILocation(line: 1985, column: 18, scope: !12385)
!12395 = !DILocation(line: 1985, column: 16, scope: !12385)
!12396 = !DILocation(line: 1984, column: 6, scope: !12385)
!12397 = !DILocation(line: 1983, column: 13, scope: !12385)
!12398 = !DILocation(line: 1983, column: 11, scope: !12385)
!12399 = !DILocation(line: 1983, column: 6, scope: !12385)
!12400 = !DILocation(line: 1988, column: 11, scope: !12401)
!12401 = distinct !DILexicalBlock(scope: !12314, file: !3, line: 1988, column: 11)
!12402 = !DILocation(line: 1988, column: 11, scope: !12314)
!12403 = !DILocation(line: 1989, column: 11, scope: !12401)
!12404 = !DILocation(line: 1989, column: 9, scope: !12401)
!12405 = !DILocation(line: 1989, column: 2, scope: !12401)
!12406 = !DILocation(line: 1993, column: 25, scope: !12401)
!12407 = !DILocation(line: 1993, column: 47, scope: !12401)
!12408 = !DILocation(line: 1993, column: 53, scope: !12401)
!12409 = !DILocation(line: 1993, column: 11, scope: !12401)
!12410 = !DILocation(line: 1993, column: 9, scope: !12401)
!12411 = !DILocation(line: 1996, column: 13, scope: !12314)
!12412 = distinct !{!12412, !12309, !12413}
!12413 = !DILocation(line: 1997, column: 5, scope: !12280)
!12414 = !DILocation(line: 2000, column: 7, scope: !12415)
!12415 = distinct !DILexicalBlock(scope: !12280, file: !3, line: 2000, column: 7)
!12416 = !DILocation(line: 2000, column: 7, scope: !12280)
!12417 = !DILocation(line: 2001, column: 12, scope: !12415)
!12418 = !DILocation(line: 2001, column: 5, scope: !12415)
!12419 = !DILocation(line: 2003, column: 39, scope: !12280)
!12420 = !DILocation(line: 2003, column: 50, scope: !12280)
!12421 = !DILocation(line: 2004, column: 47, scope: !12280)
!12422 = !DILocation(line: 2004, column: 45, scope: !12280)
!12423 = !DILocation(line: 2004, column: 5, scope: !12280)
!12424 = !DILocation(line: 2003, column: 12, scope: !12280)
!12425 = !DILocation(line: 2003, column: 10, scope: !12280)
!12426 = !DILocation(line: 2006, column: 37, scope: !12280)
!12427 = !DILocation(line: 2006, column: 48, scope: !12280)
!12428 = !DILocation(line: 2007, column: 52, scope: !12280)
!12429 = !DILocation(line: 2007, column: 50, scope: !12280)
!12430 = !DILocation(line: 2007, column: 10, scope: !12280)
!12431 = !DILocation(line: 2006, column: 10, scope: !12280)
!12432 = !DILocation(line: 2006, column: 3, scope: !12280)
!12433 = !DILocation(line: 2009, column: 1, scope: !12280)
!12434 = distinct !DISubprogram(name: "convert_extracted_bit_field", scope: !3, file: !3, line: 1150, type: !12435, scopeLine: 1152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!12435 = !DISubroutineType(types: !12436)
!12436 = !{!2301, !2301, !5, !5, !2535}
!12437 = !DILocalVariable(name: "x", arg: 1, scope: !12434, file: !3, line: 1150, type: !2301)
!12438 = !DILocation(line: 1150, column: 34, scope: !12434)
!12439 = !DILocalVariable(name: "mode", arg: 2, scope: !12434, file: !3, line: 1150, type: !5)
!12440 = !DILocation(line: 1150, column: 55, scope: !12434)
!12441 = !DILocalVariable(name: "tmode", arg: 3, scope: !12434, file: !3, line: 1151, type: !5)
!12442 = !DILocation(line: 1151, column: 27, scope: !12434)
!12443 = !DILocalVariable(name: "unsignedp", arg: 4, scope: !12434, file: !3, line: 1151, type: !2535)
!12444 = !DILocation(line: 1151, column: 39, scope: !12434)
!12445 = !DILocation(line: 1153, column: 7, scope: !12446)
!12446 = distinct !DILexicalBlock(scope: !12434, file: !3, line: 1153, column: 7)
!12447 = !DILocation(line: 1153, column: 23, scope: !12446)
!12448 = !DILocation(line: 1153, column: 20, scope: !12446)
!12449 = !DILocation(line: 1153, column: 29, scope: !12446)
!12450 = !DILocation(line: 1153, column: 32, scope: !12446)
!12451 = !DILocation(line: 1153, column: 48, scope: !12446)
!12452 = !DILocation(line: 1153, column: 45, scope: !12446)
!12453 = !DILocation(line: 1153, column: 7, scope: !12434)
!12454 = !DILocation(line: 1154, column: 12, scope: !12446)
!12455 = !DILocation(line: 1154, column: 5, scope: !12446)
!12456 = !DILocation(line: 1159, column: 8, scope: !12457)
!12457 = distinct !DILexicalBlock(scope: !12434, file: !3, line: 1159, column: 7)
!12458 = !DILocation(line: 1159, column: 7, scope: !12434)
!12459 = !DILocalVariable(name: "smode", scope: !12460, file: !3, line: 1161, type: !5)
!12460 = distinct !DILexicalBlock(scope: !12457, file: !3, line: 1160, column: 5)
!12461 = !DILocation(line: 1161, column: 25, scope: !12460)
!12462 = !DILocation(line: 1163, column: 30, scope: !12460)
!12463 = !DILocation(line: 1163, column: 15, scope: !12460)
!12464 = !DILocation(line: 1163, column: 13, scope: !12460)
!12465 = !DILocation(line: 1164, column: 28, scope: !12460)
!12466 = !DILocation(line: 1164, column: 35, scope: !12460)
!12467 = !DILocation(line: 1164, column: 38, scope: !12460)
!12468 = !DILocation(line: 1164, column: 11, scope: !12460)
!12469 = !DILocation(line: 1164, column: 9, scope: !12460)
!12470 = !DILocation(line: 1165, column: 22, scope: !12460)
!12471 = !DILocation(line: 1165, column: 29, scope: !12460)
!12472 = !DILocation(line: 1165, column: 11, scope: !12460)
!12473 = !DILocation(line: 1165, column: 9, scope: !12460)
!12474 = !DILocation(line: 1166, column: 14, scope: !12460)
!12475 = !DILocation(line: 1166, column: 27, scope: !12460)
!12476 = !DILocation(line: 1166, column: 34, scope: !12460)
!12477 = !DILocation(line: 1166, column: 7, scope: !12460)
!12478 = !DILocation(line: 1169, column: 27, scope: !12434)
!12479 = !DILocation(line: 1169, column: 34, scope: !12434)
!12480 = !DILocation(line: 1169, column: 37, scope: !12434)
!12481 = !DILocation(line: 1169, column: 10, scope: !12434)
!12482 = !DILocation(line: 1169, column: 3, scope: !12434)
!12483 = !DILocation(line: 1170, column: 1, scope: !12434)
!12484 = distinct !DISubprogram(name: "synth_mult", scope: !3, file: !3, line: 2411, type: !12485, scopeLine: 2413, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!12485 = !DISubroutineType(types: !12486)
!12486 = !{null, !3347, !2375, !12487, !5}
!12487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12488, size: 64)
!12488 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3351)
!12489 = !DILocalVariable(name: "alg_out", arg: 1, scope: !12484, file: !3, line: 2411, type: !3347)
!12490 = !DILocation(line: 2411, column: 31, scope: !12484)
!12491 = !DILocalVariable(name: "t", arg: 2, scope: !12484, file: !3, line: 2411, type: !2375)
!12492 = !DILocation(line: 2411, column: 63, scope: !12484)
!12493 = !DILocalVariable(name: "cost_limit", arg: 3, scope: !12484, file: !3, line: 2412, type: !12487)
!12494 = !DILocation(line: 2412, column: 30, scope: !12484)
!12495 = !DILocalVariable(name: "mode", arg: 4, scope: !12484, file: !3, line: 2412, type: !5)
!12496 = !DILocation(line: 2412, column: 60, scope: !12484)
!12497 = !DILocalVariable(name: "m", scope: !12484, file: !3, line: 2414, type: !2325)
!12498 = !DILocation(line: 2414, column: 7, scope: !12484)
!12499 = !DILocalVariable(name: "alg_in", scope: !12484, file: !3, line: 2415, type: !3347)
!12500 = !DILocation(line: 2415, column: 21, scope: !12484)
!12501 = !DILocalVariable(name: "best_alg", scope: !12484, file: !3, line: 2415, type: !3347)
!12502 = !DILocation(line: 2415, column: 30, scope: !12484)
!12503 = !DILocalVariable(name: "best_cost", scope: !12484, file: !3, line: 2416, type: !3351)
!12504 = !DILocation(line: 2416, column: 20, scope: !12484)
!12505 = !DILocalVariable(name: "new_limit", scope: !12484, file: !3, line: 2417, type: !3351)
!12506 = !DILocation(line: 2417, column: 20, scope: !12484)
!12507 = !DILocalVariable(name: "op_cost", scope: !12484, file: !3, line: 2418, type: !2325)
!12508 = !DILocation(line: 2418, column: 7, scope: !12484)
!12509 = !DILocalVariable(name: "op_latency", scope: !12484, file: !3, line: 2418, type: !2325)
!12510 = !DILocation(line: 2418, column: 16, scope: !12484)
!12511 = !DILocalVariable(name: "orig_t", scope: !12484, file: !3, line: 2419, type: !2375)
!12512 = !DILocation(line: 2419, column: 26, scope: !12484)
!12513 = !DILocation(line: 2419, column: 35, scope: !12484)
!12514 = !DILocalVariable(name: "q", scope: !12484, file: !3, line: 2420, type: !2375)
!12515 = !DILocation(line: 2420, column: 26, scope: !12484)
!12516 = !DILocalVariable(name: "maxm", scope: !12484, file: !3, line: 2421, type: !2325)
!12517 = !DILocation(line: 2421, column: 7, scope: !12484)
!12518 = !DILocation(line: 2421, column: 14, scope: !12484)
!12519 = !DILocalVariable(name: "hash_index", scope: !12484, file: !3, line: 2422, type: !2325)
!12520 = !DILocation(line: 2422, column: 7, scope: !12484)
!12521 = !DILocalVariable(name: "cache_hit", scope: !12484, file: !3, line: 2423, type: !2535)
!12522 = !DILocation(line: 2423, column: 8, scope: !12484)
!12523 = !DILocalVariable(name: "cache_alg", scope: !12484, file: !3, line: 2424, type: !2230)
!12524 = !DILocation(line: 2424, column: 17, scope: !12484)
!12525 = !DILocalVariable(name: "speed", scope: !12484, file: !3, line: 2425, type: !2535)
!12526 = !DILocation(line: 2425, column: 8, scope: !12484)
!12527 = !DILocation(line: 2425, column: 16, scope: !12484)
!12528 = !DILocation(line: 2429, column: 24, scope: !12484)
!12529 = !DILocation(line: 2429, column: 36, scope: !12484)
!12530 = !DILocation(line: 2429, column: 41, scope: !12484)
!12531 = !DILocation(line: 2429, column: 3, scope: !12484)
!12532 = !DILocation(line: 2429, column: 12, scope: !12484)
!12533 = !DILocation(line: 2429, column: 17, scope: !12484)
!12534 = !DILocation(line: 2429, column: 22, scope: !12484)
!12535 = !DILocation(line: 2430, column: 27, scope: !12484)
!12536 = !DILocation(line: 2430, column: 39, scope: !12484)
!12537 = !DILocation(line: 2430, column: 47, scope: !12484)
!12538 = !DILocation(line: 2430, column: 3, scope: !12484)
!12539 = !DILocation(line: 2430, column: 12, scope: !12484)
!12540 = !DILocation(line: 2430, column: 17, scope: !12484)
!12541 = !DILocation(line: 2430, column: 25, scope: !12484)
!12542 = !DILocation(line: 2432, column: 7, scope: !12543)
!12543 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2432, column: 7)
!12544 = !DILocation(line: 2432, column: 19, scope: !12543)
!12545 = !DILocation(line: 2432, column: 24, scope: !12543)
!12546 = !DILocation(line: 2433, column: 7, scope: !12543)
!12547 = !DILocation(line: 2433, column: 11, scope: !12543)
!12548 = !DILocation(line: 2433, column: 23, scope: !12543)
!12549 = !DILocation(line: 2433, column: 28, scope: !12543)
!12550 = !DILocation(line: 2433, column: 33, scope: !12543)
!12551 = !DILocation(line: 2433, column: 36, scope: !12543)
!12552 = !DILocation(line: 2433, column: 48, scope: !12543)
!12553 = !DILocation(line: 2433, column: 56, scope: !12543)
!12554 = !DILocation(line: 2432, column: 7, scope: !12484)
!12555 = !DILocation(line: 2434, column: 5, scope: !12543)
!12556 = !DILocation(line: 2437, column: 8, scope: !12484)
!12557 = !DILocation(line: 2437, column: 5, scope: !12484)
!12558 = !DILocation(line: 2440, column: 7, scope: !12559)
!12559 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2440, column: 7)
!12560 = !DILocation(line: 2440, column: 9, scope: !12559)
!12561 = !DILocation(line: 2440, column: 7, scope: !12484)
!12562 = !DILocation(line: 2442, column: 7, scope: !12563)
!12563 = distinct !DILexicalBlock(scope: !12559, file: !3, line: 2441, column: 5)
!12564 = !DILocation(line: 2442, column: 16, scope: !12563)
!12565 = !DILocation(line: 2442, column: 20, scope: !12563)
!12566 = !DILocation(line: 2443, column: 7, scope: !12563)
!12567 = !DILocation(line: 2443, column: 16, scope: !12563)
!12568 = !DILocation(line: 2443, column: 21, scope: !12563)
!12569 = !DILocation(line: 2443, column: 26, scope: !12563)
!12570 = !DILocation(line: 2444, column: 7, scope: !12563)
!12571 = !DILocation(line: 2444, column: 16, scope: !12563)
!12572 = !DILocation(line: 2444, column: 21, scope: !12563)
!12573 = !DILocation(line: 2444, column: 29, scope: !12563)
!12574 = !DILocation(line: 2445, column: 7, scope: !12563)
!12575 = !DILocation(line: 2445, column: 16, scope: !12563)
!12576 = !DILocation(line: 2445, column: 22, scope: !12563)
!12577 = !DILocation(line: 2446, column: 7, scope: !12563)
!12578 = !DILocation(line: 2451, column: 7, scope: !12579)
!12579 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2451, column: 7)
!12580 = !DILocation(line: 2451, column: 9, scope: !12579)
!12581 = !DILocation(line: 2451, column: 7, scope: !12484)
!12582 = !DILocation(line: 2453, column: 11, scope: !12583)
!12583 = distinct !DILexicalBlock(scope: !12584, file: !3, line: 2453, column: 11)
!12584 = distinct !DILexicalBlock(scope: !12579, file: !3, line: 2452, column: 5)
!12585 = !DILocation(line: 2453, column: 11, scope: !12584)
!12586 = !DILocation(line: 2454, column: 2, scope: !12583)
!12587 = !DILocation(line: 2457, column: 4, scope: !12588)
!12588 = distinct !DILexicalBlock(scope: !12583, file: !3, line: 2456, column: 2)
!12589 = !DILocation(line: 2457, column: 13, scope: !12588)
!12590 = !DILocation(line: 2457, column: 17, scope: !12588)
!12591 = !DILocation(line: 2458, column: 35, scope: !12588)
!12592 = !DILocation(line: 2458, column: 25, scope: !12588)
!12593 = !DILocation(line: 2458, column: 4, scope: !12588)
!12594 = !DILocation(line: 2458, column: 13, scope: !12588)
!12595 = !DILocation(line: 2458, column: 18, scope: !12588)
!12596 = !DILocation(line: 2458, column: 23, scope: !12588)
!12597 = !DILocation(line: 2459, column: 38, scope: !12588)
!12598 = !DILocation(line: 2459, column: 28, scope: !12588)
!12599 = !DILocation(line: 2459, column: 4, scope: !12588)
!12600 = !DILocation(line: 2459, column: 13, scope: !12588)
!12601 = !DILocation(line: 2459, column: 18, scope: !12588)
!12602 = !DILocation(line: 2459, column: 26, scope: !12588)
!12603 = !DILocation(line: 2460, column: 4, scope: !12588)
!12604 = !DILocation(line: 2460, column: 13, scope: !12588)
!12605 = !DILocation(line: 2460, column: 19, scope: !12588)
!12606 = !DILocation(line: 2461, column: 4, scope: !12588)
!12607 = !DILocation(line: 2467, column: 12, scope: !12484)
!12608 = !DILocation(line: 2467, column: 10, scope: !12484)
!12609 = !DILocation(line: 2468, column: 14, scope: !12484)
!12610 = !DILocation(line: 2468, column: 12, scope: !12484)
!12611 = !DILocation(line: 2469, column: 16, scope: !12484)
!12612 = !DILocation(line: 2469, column: 15, scope: !12484)
!12613 = !DILocation(line: 2472, column: 17, scope: !12484)
!12614 = !DILocation(line: 2472, column: 36, scope: !12484)
!12615 = !DILocation(line: 2472, column: 21, scope: !12484)
!12616 = !DILocation(line: 2472, column: 19, scope: !12484)
!12617 = !DILocation(line: 2472, column: 44, scope: !12484)
!12618 = !DILocation(line: 2472, column: 50, scope: !12484)
!12619 = !DILocation(line: 2472, column: 43, scope: !12484)
!12620 = !DILocation(line: 2472, column: 41, scope: !12484)
!12621 = !DILocation(line: 2472, column: 58, scope: !12484)
!12622 = !DILocation(line: 2472, column: 16, scope: !12484)
!12623 = !DILocation(line: 2472, column: 14, scope: !12484)
!12624 = !DILocation(line: 2475, column: 16, scope: !12625)
!12625 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2475, column: 7)
!12626 = !DILocation(line: 2475, column: 7, scope: !12625)
!12627 = !DILocation(line: 2475, column: 28, scope: !12625)
!12628 = !DILocation(line: 2475, column: 33, scope: !12625)
!12629 = !DILocation(line: 2475, column: 30, scope: !12625)
!12630 = !DILocation(line: 2476, column: 7, scope: !12625)
!12631 = !DILocation(line: 2476, column: 19, scope: !12625)
!12632 = !DILocation(line: 2476, column: 10, scope: !12625)
!12633 = !DILocation(line: 2476, column: 31, scope: !12625)
!12634 = !DILocation(line: 2476, column: 39, scope: !12625)
!12635 = !DILocation(line: 2476, column: 36, scope: !12625)
!12636 = !DILocation(line: 2477, column: 7, scope: !12625)
!12637 = !DILocation(line: 2477, column: 19, scope: !12625)
!12638 = !DILocation(line: 2477, column: 10, scope: !12625)
!12639 = !DILocation(line: 2477, column: 31, scope: !12625)
!12640 = !DILocation(line: 2477, column: 39, scope: !12625)
!12641 = !DILocation(line: 2477, column: 36, scope: !12625)
!12642 = !DILocation(line: 2478, column: 7, scope: !12625)
!12643 = !DILocation(line: 2478, column: 19, scope: !12625)
!12644 = !DILocation(line: 2478, column: 10, scope: !12625)
!12645 = !DILocation(line: 2478, column: 31, scope: !12625)
!12646 = !DILocation(line: 2478, column: 40, scope: !12625)
!12647 = !DILocation(line: 2478, column: 37, scope: !12625)
!12648 = !DILocation(line: 2479, column: 7, scope: !12625)
!12649 = !DILocation(line: 2479, column: 19, scope: !12625)
!12650 = !DILocation(line: 2479, column: 10, scope: !12625)
!12651 = !DILocation(line: 2479, column: 31, scope: !12625)
!12652 = !DILocation(line: 2479, column: 35, scope: !12625)
!12653 = !DILocation(line: 2475, column: 7, scope: !12484)
!12654 = !DILocation(line: 2481, column: 28, scope: !12655)
!12655 = distinct !DILexicalBlock(scope: !12625, file: !3, line: 2480, column: 5)
!12656 = !DILocation(line: 2481, column: 19, scope: !12655)
!12657 = !DILocation(line: 2481, column: 40, scope: !12655)
!12658 = !DILocation(line: 2481, column: 17, scope: !12655)
!12659 = !DILocation(line: 2483, column: 11, scope: !12660)
!12660 = distinct !DILexicalBlock(scope: !12655, file: !3, line: 2483, column: 11)
!12661 = !DILocation(line: 2483, column: 21, scope: !12660)
!12662 = !DILocation(line: 2483, column: 11, scope: !12655)
!12663 = !DILocation(line: 2487, column: 9, scope: !12664)
!12664 = distinct !DILexicalBlock(scope: !12665, file: !3, line: 2487, column: 8)
!12665 = distinct !DILexicalBlock(scope: !12660, file: !3, line: 2484, column: 2)
!12666 = !DILocation(line: 2487, column: 8, scope: !12665)
!12667 = !DILocation(line: 2492, column: 6, scope: !12664)
!12668 = !DILocation(line: 2498, column: 2, scope: !12665)
!12669 = !DILocation(line: 2501, column: 8, scope: !12670)
!12670 = distinct !DILexicalBlock(scope: !12671, file: !3, line: 2501, column: 8)
!12671 = distinct !DILexicalBlock(scope: !12660, file: !3, line: 2500, column: 2)
!12672 = !DILocation(line: 2501, column: 8, scope: !12671)
!12673 = !DILocation(line: 2506, column: 6, scope: !12670)
!12674 = !DILocation(line: 2508, column: 14, scope: !12671)
!12675 = !DILocation(line: 2510, column: 12, scope: !12671)
!12676 = !DILocation(line: 2510, column: 4, scope: !12671)
!12677 = !DILocation(line: 2513, column: 8, scope: !12678)
!12678 = distinct !DILexicalBlock(scope: !12671, file: !3, line: 2511, column: 6)
!12679 = !DILocation(line: 2517, column: 8, scope: !12678)
!12680 = !DILocation(line: 2521, column: 8, scope: !12678)
!12681 = !DILocation(line: 2524, column: 8, scope: !12678)
!12682 = !DILocation(line: 2527, column: 8, scope: !12678)
!12683 = !DILocation(line: 2530, column: 8, scope: !12678)
!12684 = !DILocation(line: 2531, column: 6, scope: !12678)
!12685 = !DILocation(line: 2533, column: 5, scope: !12655)
!12686 = !DILocation(line: 2538, column: 8, scope: !12687)
!12687 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2538, column: 7)
!12688 = !DILocation(line: 2538, column: 10, scope: !12687)
!12689 = !DILocation(line: 2538, column: 15, scope: !12687)
!12690 = !DILocation(line: 2538, column: 7, scope: !12484)
!12691 = !DILocation(line: 2539, column: 5, scope: !12687)
!12692 = !DILabel(scope: !12693, name: "do_alg_shift", file: !3, line: 2540)
!12693 = distinct !DILexicalBlock(scope: !12687, file: !3, line: 2539, column: 5)
!12694 = !DILocation(line: 2540, column: 5, scope: !12693)
!12695 = !DILocation(line: 2541, column: 23, scope: !12693)
!12696 = !DILocation(line: 2541, column: 28, scope: !12693)
!12697 = !DILocation(line: 2541, column: 27, scope: !12693)
!12698 = !DILocation(line: 2541, column: 25, scope: !12693)
!12699 = !DILocation(line: 2541, column: 11, scope: !12693)
!12700 = !DILocation(line: 2541, column: 9, scope: !12693)
!12701 = !DILocation(line: 2542, column: 11, scope: !12702)
!12702 = distinct !DILexicalBlock(scope: !12693, file: !3, line: 2542, column: 11)
!12703 = !DILocation(line: 2542, column: 15, scope: !12702)
!12704 = !DILocation(line: 2542, column: 13, scope: !12702)
!12705 = !DILocation(line: 2542, column: 11, scope: !12693)
!12706 = !DILocation(line: 2544, column: 8, scope: !12707)
!12707 = distinct !DILexicalBlock(scope: !12702, file: !3, line: 2543, column: 2)
!12708 = !DILocation(line: 2544, column: 13, scope: !12707)
!12709 = !DILocation(line: 2544, column: 10, scope: !12707)
!12710 = !DILocation(line: 2544, column: 6, scope: !12707)
!12711 = !DILocation(line: 2548, column: 14, scope: !12707)
!12712 = !DILocation(line: 2548, column: 27, scope: !12707)
!12713 = !DILocation(line: 2548, column: 18, scope: !12707)
!12714 = !DILocation(line: 2548, column: 34, scope: !12707)
!12715 = !DILocation(line: 2548, column: 16, scope: !12707)
!12716 = !DILocation(line: 2548, column: 12, scope: !12707)
!12717 = !DILocation(line: 2549, column: 19, scope: !12718)
!12718 = distinct !DILexicalBlock(scope: !12707, file: !3, line: 2549, column: 8)
!12719 = !DILocation(line: 2549, column: 8, scope: !12718)
!12720 = !DILocation(line: 2549, column: 26, scope: !12718)
!12721 = !DILocation(line: 2549, column: 32, scope: !12718)
!12722 = !DILocation(line: 2549, column: 37, scope: !12718)
!12723 = !DILocation(line: 2549, column: 35, scope: !12718)
!12724 = !DILocation(line: 2549, column: 8, scope: !12707)
!12725 = !DILocation(line: 2550, column: 27, scope: !12718)
!12726 = !DILocation(line: 2550, column: 16, scope: !12718)
!12727 = !DILocation(line: 2550, column: 34, scope: !12718)
!12728 = !DILocation(line: 2550, column: 40, scope: !12718)
!12729 = !DILocation(line: 2550, column: 14, scope: !12718)
!12730 = !DILocation(line: 2550, column: 6, scope: !12718)
!12731 = !DILocation(line: 2551, column: 31, scope: !12707)
!12732 = !DILocation(line: 2551, column: 21, scope: !12707)
!12733 = !DILocation(line: 2551, column: 38, scope: !12707)
!12734 = !DILocation(line: 2551, column: 36, scope: !12707)
!12735 = !DILocation(line: 2551, column: 14, scope: !12707)
!12736 = !DILocation(line: 2551, column: 19, scope: !12707)
!12737 = !DILocation(line: 2552, column: 34, scope: !12707)
!12738 = !DILocation(line: 2552, column: 24, scope: !12707)
!12739 = !DILocation(line: 2552, column: 44, scope: !12707)
!12740 = !DILocation(line: 2552, column: 42, scope: !12707)
!12741 = !DILocation(line: 2552, column: 14, scope: !12707)
!12742 = !DILocation(line: 2552, column: 22, scope: !12707)
!12743 = !DILocation(line: 2553, column: 16, scope: !12707)
!12744 = !DILocation(line: 2553, column: 24, scope: !12707)
!12745 = !DILocation(line: 2553, column: 39, scope: !12707)
!12746 = !DILocation(line: 2553, column: 4, scope: !12707)
!12747 = !DILocation(line: 2555, column: 25, scope: !12707)
!12748 = !DILocation(line: 2555, column: 4, scope: !12707)
!12749 = !DILocation(line: 2555, column: 12, scope: !12707)
!12750 = !DILocation(line: 2555, column: 17, scope: !12707)
!12751 = !DILocation(line: 2555, column: 22, scope: !12707)
!12752 = !DILocation(line: 2556, column: 28, scope: !12707)
!12753 = !DILocation(line: 2556, column: 4, scope: !12707)
!12754 = !DILocation(line: 2556, column: 12, scope: !12707)
!12755 = !DILocation(line: 2556, column: 17, scope: !12707)
!12756 = !DILocation(line: 2556, column: 25, scope: !12707)
!12757 = !DILocation(line: 2557, column: 8, scope: !12758)
!12758 = distinct !DILexicalBlock(scope: !12707, file: !3, line: 2557, column: 8)
!12759 = !DILocation(line: 2557, column: 8, scope: !12707)
!12760 = !DILocalVariable(name: "x", scope: !12761, file: !3, line: 2559, type: !3347)
!12761 = distinct !DILexicalBlock(scope: !12758, file: !3, line: 2558, column: 6)
!12762 = !DILocation(line: 2559, column: 26, scope: !12761)
!12763 = !DILocation(line: 2560, column: 20, scope: !12761)
!12764 = !DILocation(line: 2560, column: 28, scope: !12761)
!12765 = !DILocation(line: 2561, column: 12, scope: !12761)
!12766 = !DILocation(line: 2561, column: 10, scope: !12761)
!12767 = !DILocation(line: 2561, column: 29, scope: !12761)
!12768 = !DILocation(line: 2561, column: 27, scope: !12761)
!12769 = !DILocation(line: 2561, column: 50, scope: !12761)
!12770 = !DILocation(line: 2561, column: 48, scope: !12761)
!12771 = !DILocation(line: 2562, column: 39, scope: !12761)
!12772 = !DILocation(line: 2562, column: 8, scope: !12761)
!12773 = !DILocation(line: 2562, column: 18, scope: !12761)
!12774 = !DILocation(line: 2562, column: 22, scope: !12761)
!12775 = !DILocation(line: 2562, column: 32, scope: !12761)
!12776 = !DILocation(line: 2562, column: 37, scope: !12761)
!12777 = !DILocation(line: 2563, column: 8, scope: !12761)
!12778 = !DILocation(line: 2563, column: 18, scope: !12761)
!12779 = !DILocation(line: 2563, column: 21, scope: !12761)
!12780 = !DILocation(line: 2563, column: 31, scope: !12761)
!12781 = !DILocation(line: 2563, column: 36, scope: !12761)
!12782 = !DILocation(line: 2564, column: 6, scope: !12761)
!12783 = !DILocation(line: 2569, column: 24, scope: !12784)
!12784 = distinct !DILexicalBlock(scope: !12707, file: !3, line: 2569, column: 8)
!12785 = !DILocation(line: 2569, column: 31, scope: !12784)
!12786 = !DILocation(line: 2569, column: 8, scope: !12707)
!12787 = !DILocation(line: 2574, column: 15, scope: !12788)
!12788 = distinct !DILexicalBlock(scope: !12784, file: !3, line: 2570, column: 6)
!12789 = !DILocation(line: 2574, column: 14, scope: !12788)
!12790 = !DILocation(line: 2574, column: 25, scope: !12788)
!12791 = !DILocation(line: 2574, column: 22, scope: !12788)
!12792 = !DILocation(line: 2574, column: 12, scope: !12788)
!12793 = !DILocation(line: 2574, column: 10, scope: !12788)
!12794 = !DILocation(line: 2579, column: 18, scope: !12788)
!12795 = !DILocation(line: 2579, column: 31, scope: !12788)
!12796 = !DILocation(line: 2579, column: 22, scope: !12788)
!12797 = !DILocation(line: 2579, column: 38, scope: !12788)
!12798 = !DILocation(line: 2579, column: 20, scope: !12788)
!12799 = !DILocation(line: 2579, column: 16, scope: !12788)
!12800 = !DILocation(line: 2580, column: 23, scope: !12801)
!12801 = distinct !DILexicalBlock(scope: !12788, file: !3, line: 2580, column: 12)
!12802 = !DILocation(line: 2580, column: 12, scope: !12801)
!12803 = !DILocation(line: 2580, column: 30, scope: !12801)
!12804 = !DILocation(line: 2580, column: 36, scope: !12801)
!12805 = !DILocation(line: 2580, column: 41, scope: !12801)
!12806 = !DILocation(line: 2580, column: 39, scope: !12801)
!12807 = !DILocation(line: 2580, column: 12, scope: !12788)
!12808 = !DILocation(line: 2581, column: 24, scope: !12801)
!12809 = !DILocation(line: 2581, column: 13, scope: !12801)
!12810 = !DILocation(line: 2581, column: 31, scope: !12801)
!12811 = !DILocation(line: 2581, column: 37, scope: !12801)
!12812 = !DILocation(line: 2581, column: 11, scope: !12801)
!12813 = !DILocation(line: 2581, column: 3, scope: !12801)
!12814 = !DILocation(line: 2582, column: 35, scope: !12788)
!12815 = !DILocation(line: 2582, column: 25, scope: !12788)
!12816 = !DILocation(line: 2582, column: 42, scope: !12788)
!12817 = !DILocation(line: 2582, column: 40, scope: !12788)
!12818 = !DILocation(line: 2582, column: 18, scope: !12788)
!12819 = !DILocation(line: 2582, column: 23, scope: !12788)
!12820 = !DILocation(line: 2583, column: 38, scope: !12788)
!12821 = !DILocation(line: 2583, column: 28, scope: !12788)
!12822 = !DILocation(line: 2583, column: 48, scope: !12788)
!12823 = !DILocation(line: 2583, column: 46, scope: !12788)
!12824 = !DILocation(line: 2583, column: 18, scope: !12788)
!12825 = !DILocation(line: 2583, column: 26, scope: !12788)
!12826 = !DILocation(line: 2584, column: 20, scope: !12788)
!12827 = !DILocation(line: 2584, column: 28, scope: !12788)
!12828 = !DILocation(line: 2584, column: 43, scope: !12788)
!12829 = !DILocation(line: 2584, column: 8, scope: !12788)
!12830 = !DILocation(line: 2586, column: 29, scope: !12788)
!12831 = !DILocation(line: 2586, column: 8, scope: !12788)
!12832 = !DILocation(line: 2586, column: 16, scope: !12788)
!12833 = !DILocation(line: 2586, column: 21, scope: !12788)
!12834 = !DILocation(line: 2586, column: 26, scope: !12788)
!12835 = !DILocation(line: 2587, column: 32, scope: !12788)
!12836 = !DILocation(line: 2587, column: 8, scope: !12788)
!12837 = !DILocation(line: 2587, column: 16, scope: !12788)
!12838 = !DILocation(line: 2587, column: 21, scope: !12788)
!12839 = !DILocation(line: 2587, column: 29, scope: !12788)
!12840 = !DILocation(line: 2588, column: 12, scope: !12841)
!12841 = distinct !DILexicalBlock(scope: !12788, file: !3, line: 2588, column: 12)
!12842 = !DILocation(line: 2588, column: 12, scope: !12788)
!12843 = !DILocalVariable(name: "x", scope: !12844, file: !3, line: 2590, type: !3347)
!12844 = distinct !DILexicalBlock(scope: !12841, file: !3, line: 2589, column: 3)
!12845 = !DILocation(line: 2590, column: 23, scope: !12844)
!12846 = !DILocation(line: 2591, column: 17, scope: !12844)
!12847 = !DILocation(line: 2591, column: 25, scope: !12844)
!12848 = !DILocation(line: 2592, column: 9, scope: !12844)
!12849 = !DILocation(line: 2592, column: 7, scope: !12844)
!12850 = !DILocation(line: 2592, column: 26, scope: !12844)
!12851 = !DILocation(line: 2592, column: 24, scope: !12844)
!12852 = !DILocation(line: 2592, column: 47, scope: !12844)
!12853 = !DILocation(line: 2592, column: 45, scope: !12844)
!12854 = !DILocation(line: 2593, column: 36, scope: !12844)
!12855 = !DILocation(line: 2593, column: 5, scope: !12844)
!12856 = !DILocation(line: 2593, column: 15, scope: !12844)
!12857 = !DILocation(line: 2593, column: 19, scope: !12844)
!12858 = !DILocation(line: 2593, column: 29, scope: !12844)
!12859 = !DILocation(line: 2593, column: 34, scope: !12844)
!12860 = !DILocation(line: 2594, column: 5, scope: !12844)
!12861 = !DILocation(line: 2594, column: 15, scope: !12844)
!12862 = !DILocation(line: 2594, column: 18, scope: !12844)
!12863 = !DILocation(line: 2594, column: 28, scope: !12844)
!12864 = !DILocation(line: 2594, column: 33, scope: !12844)
!12865 = !DILocation(line: 2595, column: 3, scope: !12844)
!12866 = !DILocation(line: 2596, column: 6, scope: !12788)
!12867 = !DILocation(line: 2597, column: 2, scope: !12707)
!12868 = !DILocation(line: 2598, column: 11, scope: !12869)
!12869 = distinct !DILexicalBlock(scope: !12693, file: !3, line: 2598, column: 11)
!12870 = !DILocation(line: 2598, column: 11, scope: !12693)
!12871 = !DILocation(line: 2599, column: 2, scope: !12869)
!12872 = !DILocation(line: 2600, column: 5, scope: !12693)
!12873 = !DILocation(line: 2603, column: 8, scope: !12874)
!12874 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2603, column: 7)
!12875 = !DILocation(line: 2603, column: 10, scope: !12874)
!12876 = !DILocation(line: 2603, column: 15, scope: !12874)
!12877 = !DILocation(line: 2603, column: 7, scope: !12484)
!12878 = !DILocalVariable(name: "w", scope: !12879, file: !3, line: 2605, type: !2375)
!12879 = distinct !DILexicalBlock(scope: !12874, file: !3, line: 2604, column: 5)
!12880 = !DILocation(line: 2605, column: 30, scope: !12879)
!12881 = !DILocation(line: 2605, column: 7, scope: !12879)
!12882 = !DILabel(scope: !12879, name: "do_alg_addsub_t_m2", file: !3, line: 2607)
!12883 = !DILocation(line: 2607, column: 5, scope: !12879)
!12884 = !DILocation(line: 2608, column: 14, scope: !12885)
!12885 = distinct !DILexicalBlock(scope: !12879, file: !3, line: 2608, column: 7)
!12886 = !DILocation(line: 2608, column: 12, scope: !12885)
!12887 = !DILocation(line: 2608, column: 20, scope: !12888)
!12888 = distinct !DILexicalBlock(scope: !12885, file: !3, line: 2608, column: 7)
!12889 = !DILocation(line: 2608, column: 24, scope: !12888)
!12890 = !DILocation(line: 2608, column: 22, scope: !12888)
!12891 = !DILocation(line: 2608, column: 27, scope: !12888)
!12892 = !DILocation(line: 2608, column: 7, scope: !12885)
!12893 = !DILocation(line: 2608, column: 35, scope: !12888)
!12894 = !DILocation(line: 2608, column: 7, scope: !12888)
!12895 = distinct !{!12895, !12892, !12896}
!12896 = !DILocation(line: 2609, column: 2, scope: !12885)
!12897 = !DILocation(line: 2615, column: 11, scope: !12898)
!12898 = distinct !DILexicalBlock(scope: !12879, file: !3, line: 2615, column: 11)
!12899 = !DILocation(line: 2615, column: 13, scope: !12898)
!12900 = !DILocation(line: 2616, column: 4, scope: !12898)
!12901 = !DILocation(line: 2616, column: 8, scope: !12898)
!12902 = !DILocation(line: 2616, column: 10, scope: !12898)
!12903 = !DILocation(line: 2619, column: 8, scope: !12898)
!12904 = !DILocation(line: 2619, column: 11, scope: !12898)
!12905 = !DILocation(line: 2619, column: 13, scope: !12898)
!12906 = !DILocation(line: 2615, column: 11, scope: !12879)
!12907 = !DILocation(line: 2623, column: 23, scope: !12908)
!12908 = distinct !DILexicalBlock(scope: !12898, file: !3, line: 2620, column: 2)
!12909 = !DILocation(line: 2623, column: 14, scope: !12908)
!12910 = !DILocation(line: 2623, column: 30, scope: !12908)
!12911 = !DILocation(line: 2623, column: 12, scope: !12908)
!12912 = !DILocation(line: 2624, column: 31, scope: !12908)
!12913 = !DILocation(line: 2624, column: 21, scope: !12908)
!12914 = !DILocation(line: 2624, column: 38, scope: !12908)
!12915 = !DILocation(line: 2624, column: 36, scope: !12908)
!12916 = !DILocation(line: 2624, column: 14, scope: !12908)
!12917 = !DILocation(line: 2624, column: 19, scope: !12908)
!12918 = !DILocation(line: 2625, column: 34, scope: !12908)
!12919 = !DILocation(line: 2625, column: 24, scope: !12908)
!12920 = !DILocation(line: 2625, column: 44, scope: !12908)
!12921 = !DILocation(line: 2625, column: 42, scope: !12908)
!12922 = !DILocation(line: 2625, column: 14, scope: !12908)
!12923 = !DILocation(line: 2625, column: 22, scope: !12908)
!12924 = !DILocation(line: 2626, column: 16, scope: !12908)
!12925 = !DILocation(line: 2626, column: 24, scope: !12908)
!12926 = !DILocation(line: 2626, column: 26, scope: !12908)
!12927 = !DILocation(line: 2626, column: 43, scope: !12908)
!12928 = !DILocation(line: 2626, column: 4, scope: !12908)
!12929 = !DILocation(line: 2628, column: 25, scope: !12908)
!12930 = !DILocation(line: 2628, column: 4, scope: !12908)
!12931 = !DILocation(line: 2628, column: 12, scope: !12908)
!12932 = !DILocation(line: 2628, column: 17, scope: !12908)
!12933 = !DILocation(line: 2628, column: 22, scope: !12908)
!12934 = !DILocation(line: 2629, column: 28, scope: !12908)
!12935 = !DILocation(line: 2629, column: 4, scope: !12908)
!12936 = !DILocation(line: 2629, column: 12, scope: !12908)
!12937 = !DILocation(line: 2629, column: 17, scope: !12908)
!12938 = !DILocation(line: 2629, column: 25, scope: !12908)
!12939 = !DILocation(line: 2630, column: 8, scope: !12940)
!12940 = distinct !DILexicalBlock(scope: !12908, file: !3, line: 2630, column: 8)
!12941 = !DILocation(line: 2630, column: 8, scope: !12908)
!12942 = !DILocalVariable(name: "x", scope: !12943, file: !3, line: 2632, type: !3347)
!12943 = distinct !DILexicalBlock(scope: !12940, file: !3, line: 2631, column: 6)
!12944 = !DILocation(line: 2632, column: 26, scope: !12943)
!12945 = !DILocation(line: 2633, column: 20, scope: !12943)
!12946 = !DILocation(line: 2633, column: 28, scope: !12943)
!12947 = !DILocation(line: 2634, column: 12, scope: !12943)
!12948 = !DILocation(line: 2634, column: 10, scope: !12943)
!12949 = !DILocation(line: 2634, column: 29, scope: !12943)
!12950 = !DILocation(line: 2634, column: 27, scope: !12943)
!12951 = !DILocation(line: 2634, column: 50, scope: !12943)
!12952 = !DILocation(line: 2634, column: 48, scope: !12943)
!12953 = !DILocation(line: 2635, column: 8, scope: !12943)
!12954 = !DILocation(line: 2635, column: 18, scope: !12943)
!12955 = !DILocation(line: 2635, column: 22, scope: !12943)
!12956 = !DILocation(line: 2635, column: 32, scope: !12943)
!12957 = !DILocation(line: 2635, column: 37, scope: !12943)
!12958 = !DILocation(line: 2636, column: 8, scope: !12943)
!12959 = !DILocation(line: 2636, column: 18, scope: !12943)
!12960 = !DILocation(line: 2636, column: 21, scope: !12943)
!12961 = !DILocation(line: 2636, column: 31, scope: !12943)
!12962 = !DILocation(line: 2636, column: 36, scope: !12943)
!12963 = !DILocation(line: 2637, column: 6, scope: !12943)
!12964 = !DILocation(line: 2638, column: 2, scope: !12908)
!12965 = !DILocation(line: 2643, column: 23, scope: !12966)
!12966 = distinct !DILexicalBlock(scope: !12898, file: !3, line: 2640, column: 2)
!12967 = !DILocation(line: 2643, column: 14, scope: !12966)
!12968 = !DILocation(line: 2643, column: 30, scope: !12966)
!12969 = !DILocation(line: 2643, column: 12, scope: !12966)
!12970 = !DILocation(line: 2644, column: 31, scope: !12966)
!12971 = !DILocation(line: 2644, column: 21, scope: !12966)
!12972 = !DILocation(line: 2644, column: 38, scope: !12966)
!12973 = !DILocation(line: 2644, column: 36, scope: !12966)
!12974 = !DILocation(line: 2644, column: 14, scope: !12966)
!12975 = !DILocation(line: 2644, column: 19, scope: !12966)
!12976 = !DILocation(line: 2645, column: 34, scope: !12966)
!12977 = !DILocation(line: 2645, column: 24, scope: !12966)
!12978 = !DILocation(line: 2645, column: 44, scope: !12966)
!12979 = !DILocation(line: 2645, column: 42, scope: !12966)
!12980 = !DILocation(line: 2645, column: 14, scope: !12966)
!12981 = !DILocation(line: 2645, column: 22, scope: !12966)
!12982 = !DILocation(line: 2646, column: 16, scope: !12966)
!12983 = !DILocation(line: 2646, column: 24, scope: !12966)
!12984 = !DILocation(line: 2646, column: 26, scope: !12966)
!12985 = !DILocation(line: 2646, column: 43, scope: !12966)
!12986 = !DILocation(line: 2646, column: 4, scope: !12966)
!12987 = !DILocation(line: 2648, column: 25, scope: !12966)
!12988 = !DILocation(line: 2648, column: 4, scope: !12966)
!12989 = !DILocation(line: 2648, column: 12, scope: !12966)
!12990 = !DILocation(line: 2648, column: 17, scope: !12966)
!12991 = !DILocation(line: 2648, column: 22, scope: !12966)
!12992 = !DILocation(line: 2649, column: 28, scope: !12966)
!12993 = !DILocation(line: 2649, column: 4, scope: !12966)
!12994 = !DILocation(line: 2649, column: 12, scope: !12966)
!12995 = !DILocation(line: 2649, column: 17, scope: !12966)
!12996 = !DILocation(line: 2649, column: 25, scope: !12966)
!12997 = !DILocation(line: 2650, column: 8, scope: !12998)
!12998 = distinct !DILexicalBlock(scope: !12966, file: !3, line: 2650, column: 8)
!12999 = !DILocation(line: 2650, column: 8, scope: !12966)
!13000 = !DILocalVariable(name: "x", scope: !13001, file: !3, line: 2652, type: !3347)
!13001 = distinct !DILexicalBlock(scope: !12998, file: !3, line: 2651, column: 6)
!13002 = !DILocation(line: 2652, column: 26, scope: !13001)
!13003 = !DILocation(line: 2653, column: 20, scope: !13001)
!13004 = !DILocation(line: 2653, column: 28, scope: !13001)
!13005 = !DILocation(line: 2654, column: 12, scope: !13001)
!13006 = !DILocation(line: 2654, column: 10, scope: !13001)
!13007 = !DILocation(line: 2654, column: 29, scope: !13001)
!13008 = !DILocation(line: 2654, column: 27, scope: !13001)
!13009 = !DILocation(line: 2654, column: 50, scope: !13001)
!13010 = !DILocation(line: 2654, column: 48, scope: !13001)
!13011 = !DILocation(line: 2655, column: 8, scope: !13001)
!13012 = !DILocation(line: 2655, column: 18, scope: !13001)
!13013 = !DILocation(line: 2655, column: 22, scope: !13001)
!13014 = !DILocation(line: 2655, column: 32, scope: !13001)
!13015 = !DILocation(line: 2655, column: 37, scope: !13001)
!13016 = !DILocation(line: 2656, column: 8, scope: !13001)
!13017 = !DILocation(line: 2656, column: 18, scope: !13001)
!13018 = !DILocation(line: 2656, column: 21, scope: !13001)
!13019 = !DILocation(line: 2656, column: 31, scope: !13001)
!13020 = !DILocation(line: 2656, column: 36, scope: !13001)
!13021 = !DILocation(line: 2657, column: 6, scope: !13001)
!13022 = !DILocation(line: 2662, column: 24, scope: !12879)
!13023 = !DILocation(line: 2662, column: 23, scope: !12879)
!13024 = !DILocation(line: 2662, column: 31, scope: !12879)
!13025 = !DILocation(line: 2662, column: 11, scope: !12879)
!13026 = !DILocation(line: 2662, column: 9, scope: !12879)
!13027 = !DILocation(line: 2663, column: 11, scope: !13028)
!13028 = distinct !DILexicalBlock(scope: !12879, file: !3, line: 2663, column: 11)
!13029 = !DILocation(line: 2663, column: 13, scope: !13028)
!13030 = !DILocation(line: 2663, column: 18, scope: !13028)
!13031 = !DILocation(line: 2663, column: 21, scope: !13028)
!13032 = !DILocation(line: 2663, column: 25, scope: !13028)
!13033 = !DILocation(line: 2663, column: 23, scope: !13028)
!13034 = !DILocation(line: 2663, column: 11, scope: !12879)
!13035 = !DILocation(line: 2665, column: 29, scope: !13036)
!13036 = distinct !DILexicalBlock(scope: !13028, file: !3, line: 2664, column: 2)
!13037 = !DILocation(line: 2665, column: 14, scope: !13036)
!13038 = !DILocation(line: 2665, column: 36, scope: !13036)
!13039 = !DILocation(line: 2665, column: 42, scope: !13036)
!13040 = !DILocation(line: 2665, column: 12, scope: !13036)
!13041 = !DILocation(line: 2666, column: 31, scope: !13036)
!13042 = !DILocation(line: 2666, column: 21, scope: !13036)
!13043 = !DILocation(line: 2666, column: 38, scope: !13036)
!13044 = !DILocation(line: 2666, column: 36, scope: !13036)
!13045 = !DILocation(line: 2666, column: 14, scope: !13036)
!13046 = !DILocation(line: 2666, column: 19, scope: !13036)
!13047 = !DILocation(line: 2667, column: 34, scope: !13036)
!13048 = !DILocation(line: 2667, column: 24, scope: !13036)
!13049 = !DILocation(line: 2667, column: 44, scope: !13036)
!13050 = !DILocation(line: 2667, column: 42, scope: !13036)
!13051 = !DILocation(line: 2667, column: 14, scope: !13036)
!13052 = !DILocation(line: 2667, column: 22, scope: !13036)
!13053 = !DILocation(line: 2668, column: 16, scope: !13036)
!13054 = !DILocation(line: 2668, column: 51, scope: !13036)
!13055 = !DILocation(line: 2668, column: 50, scope: !13036)
!13056 = !DILocation(line: 2668, column: 58, scope: !13036)
!13057 = !DILocation(line: 2668, column: 66, scope: !13036)
!13058 = !DILocation(line: 2668, column: 63, scope: !13036)
!13059 = !DILocation(line: 2668, column: 81, scope: !13036)
!13060 = !DILocation(line: 2668, column: 4, scope: !13036)
!13061 = !DILocation(line: 2670, column: 25, scope: !13036)
!13062 = !DILocation(line: 2670, column: 4, scope: !13036)
!13063 = !DILocation(line: 2670, column: 12, scope: !13036)
!13064 = !DILocation(line: 2670, column: 17, scope: !13036)
!13065 = !DILocation(line: 2670, column: 22, scope: !13036)
!13066 = !DILocation(line: 2671, column: 28, scope: !13036)
!13067 = !DILocation(line: 2671, column: 4, scope: !13036)
!13068 = !DILocation(line: 2671, column: 12, scope: !13036)
!13069 = !DILocation(line: 2671, column: 17, scope: !13036)
!13070 = !DILocation(line: 2671, column: 25, scope: !13036)
!13071 = !DILocation(line: 2672, column: 8, scope: !13072)
!13072 = distinct !DILexicalBlock(scope: !13036, file: !3, line: 2672, column: 8)
!13073 = !DILocation(line: 2672, column: 8, scope: !13036)
!13074 = !DILocalVariable(name: "x", scope: !13075, file: !3, line: 2674, type: !3347)
!13075 = distinct !DILexicalBlock(scope: !13072, file: !3, line: 2673, column: 6)
!13076 = !DILocation(line: 2674, column: 26, scope: !13075)
!13077 = !DILocation(line: 2675, column: 20, scope: !13075)
!13078 = !DILocation(line: 2675, column: 28, scope: !13075)
!13079 = !DILocation(line: 2676, column: 12, scope: !13075)
!13080 = !DILocation(line: 2676, column: 10, scope: !13075)
!13081 = !DILocation(line: 2676, column: 29, scope: !13075)
!13082 = !DILocation(line: 2676, column: 27, scope: !13075)
!13083 = !DILocation(line: 2676, column: 50, scope: !13075)
!13084 = !DILocation(line: 2676, column: 48, scope: !13075)
!13085 = !DILocation(line: 2677, column: 39, scope: !13075)
!13086 = !DILocation(line: 2677, column: 8, scope: !13075)
!13087 = !DILocation(line: 2677, column: 18, scope: !13075)
!13088 = !DILocation(line: 2677, column: 22, scope: !13075)
!13089 = !DILocation(line: 2677, column: 32, scope: !13075)
!13090 = !DILocation(line: 2677, column: 37, scope: !13075)
!13091 = !DILocation(line: 2678, column: 8, scope: !13075)
!13092 = !DILocation(line: 2678, column: 18, scope: !13075)
!13093 = !DILocation(line: 2678, column: 21, scope: !13075)
!13094 = !DILocation(line: 2678, column: 31, scope: !13075)
!13095 = !DILocation(line: 2678, column: 36, scope: !13075)
!13096 = !DILocation(line: 2679, column: 6, scope: !13075)
!13097 = !DILocation(line: 2680, column: 2, scope: !13036)
!13098 = !DILocation(line: 2682, column: 11, scope: !13099)
!13099 = distinct !DILexicalBlock(scope: !12879, file: !3, line: 2682, column: 11)
!13100 = !DILocation(line: 2682, column: 11, scope: !12879)
!13101 = !DILocation(line: 2683, column: 2, scope: !13099)
!13102 = !DILocation(line: 2684, column: 5, scope: !12879)
!13103 = !DILocation(line: 2603, column: 18, scope: !12874)
!13104 = !DILabel(scope: !12484, name: "do_alg_addsub_factor", file: !3, line: 2696)
!13105 = !DILocation(line: 2696, column: 2, scope: !12484)
!13106 = !DILocation(line: 2697, column: 24, scope: !13107)
!13107 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2697, column: 3)
!13108 = !DILocation(line: 2697, column: 26, scope: !13107)
!13109 = !DILocation(line: 2697, column: 12, scope: !13107)
!13110 = !DILocation(line: 2697, column: 10, scope: !13107)
!13111 = !DILocation(line: 2697, column: 8, scope: !13107)
!13112 = !DILocation(line: 2697, column: 32, scope: !13113)
!13113 = distinct !DILexicalBlock(scope: !13107, file: !3, line: 2697, column: 3)
!13114 = !DILocation(line: 2697, column: 34, scope: !13113)
!13115 = !DILocation(line: 2697, column: 3, scope: !13107)
!13116 = !DILocalVariable(name: "d", scope: !13117, file: !3, line: 2699, type: !2375)
!13117 = distinct !DILexicalBlock(scope: !13113, file: !3, line: 2698, column: 5)
!13118 = !DILocation(line: 2699, column: 30, scope: !13117)
!13119 = !DILocation(line: 2701, column: 42, scope: !13117)
!13120 = !DILocation(line: 2701, column: 39, scope: !13117)
!13121 = !DILocation(line: 2701, column: 45, scope: !13117)
!13122 = !DILocation(line: 2701, column: 9, scope: !13117)
!13123 = !DILocation(line: 2702, column: 11, scope: !13124)
!13124 = distinct !DILexicalBlock(scope: !13117, file: !3, line: 2702, column: 11)
!13125 = !DILocation(line: 2702, column: 15, scope: !13124)
!13126 = !DILocation(line: 2702, column: 13, scope: !13124)
!13127 = !DILocation(line: 2702, column: 17, scope: !13124)
!13128 = !DILocation(line: 2702, column: 22, scope: !13124)
!13129 = !DILocation(line: 2702, column: 25, scope: !13124)
!13130 = !DILocation(line: 2702, column: 29, scope: !13124)
!13131 = !DILocation(line: 2702, column: 27, scope: !13124)
!13132 = !DILocation(line: 2702, column: 31, scope: !13124)
!13133 = !DILocation(line: 2702, column: 34, scope: !13124)
!13134 = !DILocation(line: 2702, column: 38, scope: !13124)
!13135 = !DILocation(line: 2702, column: 36, scope: !13124)
!13136 = !DILocation(line: 2703, column: 4, scope: !13124)
!13137 = !DILocation(line: 2703, column: 9, scope: !13124)
!13138 = !DILocation(line: 2703, column: 19, scope: !13124)
!13139 = !DILocation(line: 2703, column: 22, scope: !13124)
!13140 = !DILocation(line: 2703, column: 32, scope: !13124)
!13141 = !DILocation(line: 2702, column: 11, scope: !13117)
!13142 = !DILocation(line: 2711, column: 23, scope: !13143)
!13143 = distinct !DILexicalBlock(scope: !13124, file: !3, line: 2704, column: 2)
!13144 = !DILocation(line: 2711, column: 14, scope: !13143)
!13145 = !DILocation(line: 2711, column: 30, scope: !13143)
!13146 = !DILocation(line: 2711, column: 49, scope: !13143)
!13147 = !DILocation(line: 2711, column: 38, scope: !13143)
!13148 = !DILocation(line: 2711, column: 56, scope: !13143)
!13149 = !DILocation(line: 2711, column: 62, scope: !13143)
!13150 = !DILocation(line: 2711, column: 36, scope: !13143)
!13151 = !DILocation(line: 2711, column: 12, scope: !13143)
!13152 = !DILocation(line: 2712, column: 22, scope: !13153)
!13153 = distinct !DILexicalBlock(scope: !13143, file: !3, line: 2712, column: 8)
!13154 = !DILocation(line: 2712, column: 8, scope: !13153)
!13155 = !DILocation(line: 2712, column: 29, scope: !13153)
!13156 = !DILocation(line: 2712, column: 35, scope: !13153)
!13157 = !DILocation(line: 2712, column: 40, scope: !13153)
!13158 = !DILocation(line: 2712, column: 38, scope: !13153)
!13159 = !DILocation(line: 2712, column: 8, scope: !13143)
!13160 = !DILocation(line: 2714, column: 32, scope: !13161)
!13161 = distinct !DILexicalBlock(scope: !13153, file: !3, line: 2713, column: 6)
!13162 = !DILocation(line: 2714, column: 18, scope: !13161)
!13163 = !DILocation(line: 2714, column: 39, scope: !13161)
!13164 = !DILocation(line: 2714, column: 45, scope: !13161)
!13165 = !DILocation(line: 2714, column: 16, scope: !13161)
!13166 = !DILocation(line: 2715, column: 21, scope: !13161)
!13167 = !DILocation(line: 2715, column: 19, scope: !13161)
!13168 = !DILocation(line: 2716, column: 6, scope: !13161)
!13169 = !DILocation(line: 2718, column: 28, scope: !13153)
!13170 = !DILocation(line: 2718, column: 19, scope: !13153)
!13171 = !DILocation(line: 2718, column: 35, scope: !13153)
!13172 = !DILocation(line: 2718, column: 17, scope: !13153)
!13173 = !DILocation(line: 2720, column: 31, scope: !13143)
!13174 = !DILocation(line: 2720, column: 21, scope: !13143)
!13175 = !DILocation(line: 2720, column: 38, scope: !13143)
!13176 = !DILocation(line: 2720, column: 36, scope: !13143)
!13177 = !DILocation(line: 2720, column: 14, scope: !13143)
!13178 = !DILocation(line: 2720, column: 19, scope: !13143)
!13179 = !DILocation(line: 2721, column: 34, scope: !13143)
!13180 = !DILocation(line: 2721, column: 24, scope: !13143)
!13181 = !DILocation(line: 2721, column: 44, scope: !13143)
!13182 = !DILocation(line: 2721, column: 42, scope: !13143)
!13183 = !DILocation(line: 2721, column: 14, scope: !13143)
!13184 = !DILocation(line: 2721, column: 22, scope: !13143)
!13185 = !DILocation(line: 2722, column: 16, scope: !13143)
!13186 = !DILocation(line: 2722, column: 24, scope: !13143)
!13187 = !DILocation(line: 2722, column: 28, scope: !13143)
!13188 = !DILocation(line: 2722, column: 26, scope: !13143)
!13189 = !DILocation(line: 2722, column: 43, scope: !13143)
!13190 = !DILocation(line: 2722, column: 4, scope: !13143)
!13191 = !DILocation(line: 2724, column: 25, scope: !13143)
!13192 = !DILocation(line: 2724, column: 4, scope: !13143)
!13193 = !DILocation(line: 2724, column: 12, scope: !13143)
!13194 = !DILocation(line: 2724, column: 17, scope: !13143)
!13195 = !DILocation(line: 2724, column: 22, scope: !13143)
!13196 = !DILocation(line: 2725, column: 28, scope: !13143)
!13197 = !DILocation(line: 2725, column: 4, scope: !13143)
!13198 = !DILocation(line: 2725, column: 12, scope: !13143)
!13199 = !DILocation(line: 2725, column: 17, scope: !13143)
!13200 = !DILocation(line: 2725, column: 25, scope: !13143)
!13201 = !DILocation(line: 2726, column: 8, scope: !13202)
!13202 = distinct !DILexicalBlock(scope: !13143, file: !3, line: 2726, column: 8)
!13203 = !DILocation(line: 2726, column: 16, scope: !13202)
!13204 = !DILocation(line: 2726, column: 21, scope: !13202)
!13205 = !DILocation(line: 2726, column: 31, scope: !13202)
!13206 = !DILocation(line: 2726, column: 29, scope: !13202)
!13207 = !DILocation(line: 2726, column: 8, scope: !13143)
!13208 = !DILocation(line: 2727, column: 29, scope: !13202)
!13209 = !DILocation(line: 2727, column: 6, scope: !13202)
!13210 = !DILocation(line: 2727, column: 14, scope: !13202)
!13211 = !DILocation(line: 2727, column: 19, scope: !13202)
!13212 = !DILocation(line: 2727, column: 27, scope: !13202)
!13213 = !DILocation(line: 2728, column: 8, scope: !13214)
!13214 = distinct !DILexicalBlock(scope: !13143, file: !3, line: 2728, column: 8)
!13215 = !DILocation(line: 2728, column: 8, scope: !13143)
!13216 = !DILocalVariable(name: "x", scope: !13217, file: !3, line: 2730, type: !3347)
!13217 = distinct !DILexicalBlock(scope: !13214, file: !3, line: 2729, column: 6)
!13218 = !DILocation(line: 2730, column: 26, scope: !13217)
!13219 = !DILocation(line: 2731, column: 20, scope: !13217)
!13220 = !DILocation(line: 2731, column: 28, scope: !13217)
!13221 = !DILocation(line: 2732, column: 12, scope: !13217)
!13222 = !DILocation(line: 2732, column: 10, scope: !13217)
!13223 = !DILocation(line: 2732, column: 29, scope: !13217)
!13224 = !DILocation(line: 2732, column: 27, scope: !13217)
!13225 = !DILocation(line: 2732, column: 50, scope: !13217)
!13226 = !DILocation(line: 2732, column: 48, scope: !13217)
!13227 = !DILocation(line: 2733, column: 39, scope: !13217)
!13228 = !DILocation(line: 2733, column: 8, scope: !13217)
!13229 = !DILocation(line: 2733, column: 18, scope: !13217)
!13230 = !DILocation(line: 2733, column: 22, scope: !13217)
!13231 = !DILocation(line: 2733, column: 32, scope: !13217)
!13232 = !DILocation(line: 2733, column: 37, scope: !13217)
!13233 = !DILocation(line: 2734, column: 8, scope: !13217)
!13234 = !DILocation(line: 2734, column: 18, scope: !13217)
!13235 = !DILocation(line: 2734, column: 21, scope: !13217)
!13236 = !DILocation(line: 2734, column: 31, scope: !13217)
!13237 = !DILocation(line: 2734, column: 36, scope: !13217)
!13238 = !DILocation(line: 2735, column: 6, scope: !13217)
!13239 = !DILocation(line: 2737, column: 4, scope: !13143)
!13240 = !DILocation(line: 2740, column: 42, scope: !13117)
!13241 = !DILocation(line: 2740, column: 39, scope: !13117)
!13242 = !DILocation(line: 2740, column: 45, scope: !13117)
!13243 = !DILocation(line: 2740, column: 9, scope: !13117)
!13244 = !DILocation(line: 2741, column: 11, scope: !13245)
!13245 = distinct !DILexicalBlock(scope: !13117, file: !3, line: 2741, column: 11)
!13246 = !DILocation(line: 2741, column: 15, scope: !13245)
!13247 = !DILocation(line: 2741, column: 13, scope: !13245)
!13248 = !DILocation(line: 2741, column: 17, scope: !13245)
!13249 = !DILocation(line: 2741, column: 22, scope: !13245)
!13250 = !DILocation(line: 2741, column: 25, scope: !13245)
!13251 = !DILocation(line: 2741, column: 29, scope: !13245)
!13252 = !DILocation(line: 2741, column: 27, scope: !13245)
!13253 = !DILocation(line: 2741, column: 31, scope: !13245)
!13254 = !DILocation(line: 2741, column: 34, scope: !13245)
!13255 = !DILocation(line: 2741, column: 38, scope: !13245)
!13256 = !DILocation(line: 2741, column: 36, scope: !13245)
!13257 = !DILocation(line: 2742, column: 4, scope: !13245)
!13258 = !DILocation(line: 2742, column: 9, scope: !13245)
!13259 = !DILocation(line: 2742, column: 19, scope: !13245)
!13260 = !DILocation(line: 2742, column: 22, scope: !13245)
!13261 = !DILocation(line: 2742, column: 32, scope: !13245)
!13262 = !DILocation(line: 2741, column: 11, scope: !13117)
!13263 = !DILocation(line: 2750, column: 23, scope: !13264)
!13264 = distinct !DILexicalBlock(scope: !13245, file: !3, line: 2743, column: 2)
!13265 = !DILocation(line: 2750, column: 14, scope: !13264)
!13266 = !DILocation(line: 2750, column: 30, scope: !13264)
!13267 = !DILocation(line: 2750, column: 49, scope: !13264)
!13268 = !DILocation(line: 2750, column: 38, scope: !13264)
!13269 = !DILocation(line: 2750, column: 56, scope: !13264)
!13270 = !DILocation(line: 2750, column: 62, scope: !13264)
!13271 = !DILocation(line: 2750, column: 36, scope: !13264)
!13272 = !DILocation(line: 2750, column: 12, scope: !13264)
!13273 = !DILocation(line: 2751, column: 23, scope: !13274)
!13274 = distinct !DILexicalBlock(scope: !13264, file: !3, line: 2751, column: 8)
!13275 = !DILocation(line: 2751, column: 8, scope: !13274)
!13276 = !DILocation(line: 2751, column: 30, scope: !13274)
!13277 = !DILocation(line: 2751, column: 36, scope: !13274)
!13278 = !DILocation(line: 2751, column: 41, scope: !13274)
!13279 = !DILocation(line: 2751, column: 39, scope: !13274)
!13280 = !DILocation(line: 2751, column: 8, scope: !13264)
!13281 = !DILocation(line: 2753, column: 33, scope: !13282)
!13282 = distinct !DILexicalBlock(scope: !13274, file: !3, line: 2752, column: 6)
!13283 = !DILocation(line: 2753, column: 18, scope: !13282)
!13284 = !DILocation(line: 2753, column: 40, scope: !13282)
!13285 = !DILocation(line: 2753, column: 46, scope: !13282)
!13286 = !DILocation(line: 2753, column: 16, scope: !13282)
!13287 = !DILocation(line: 2754, column: 21, scope: !13282)
!13288 = !DILocation(line: 2754, column: 19, scope: !13282)
!13289 = !DILocation(line: 2755, column: 6, scope: !13282)
!13290 = !DILocation(line: 2757, column: 28, scope: !13274)
!13291 = !DILocation(line: 2757, column: 19, scope: !13274)
!13292 = !DILocation(line: 2757, column: 35, scope: !13274)
!13293 = !DILocation(line: 2757, column: 17, scope: !13274)
!13294 = !DILocation(line: 2759, column: 31, scope: !13264)
!13295 = !DILocation(line: 2759, column: 21, scope: !13264)
!13296 = !DILocation(line: 2759, column: 38, scope: !13264)
!13297 = !DILocation(line: 2759, column: 36, scope: !13264)
!13298 = !DILocation(line: 2759, column: 14, scope: !13264)
!13299 = !DILocation(line: 2759, column: 19, scope: !13264)
!13300 = !DILocation(line: 2760, column: 34, scope: !13264)
!13301 = !DILocation(line: 2760, column: 24, scope: !13264)
!13302 = !DILocation(line: 2760, column: 44, scope: !13264)
!13303 = !DILocation(line: 2760, column: 42, scope: !13264)
!13304 = !DILocation(line: 2760, column: 14, scope: !13264)
!13305 = !DILocation(line: 2760, column: 22, scope: !13264)
!13306 = !DILocation(line: 2761, column: 16, scope: !13264)
!13307 = !DILocation(line: 2761, column: 24, scope: !13264)
!13308 = !DILocation(line: 2761, column: 28, scope: !13264)
!13309 = !DILocation(line: 2761, column: 26, scope: !13264)
!13310 = !DILocation(line: 2761, column: 43, scope: !13264)
!13311 = !DILocation(line: 2761, column: 4, scope: !13264)
!13312 = !DILocation(line: 2763, column: 25, scope: !13264)
!13313 = !DILocation(line: 2763, column: 4, scope: !13264)
!13314 = !DILocation(line: 2763, column: 12, scope: !13264)
!13315 = !DILocation(line: 2763, column: 17, scope: !13264)
!13316 = !DILocation(line: 2763, column: 22, scope: !13264)
!13317 = !DILocation(line: 2764, column: 28, scope: !13264)
!13318 = !DILocation(line: 2764, column: 4, scope: !13264)
!13319 = !DILocation(line: 2764, column: 12, scope: !13264)
!13320 = !DILocation(line: 2764, column: 17, scope: !13264)
!13321 = !DILocation(line: 2764, column: 25, scope: !13264)
!13322 = !DILocation(line: 2765, column: 8, scope: !13323)
!13323 = distinct !DILexicalBlock(scope: !13264, file: !3, line: 2765, column: 8)
!13324 = !DILocation(line: 2765, column: 16, scope: !13323)
!13325 = !DILocation(line: 2765, column: 21, scope: !13323)
!13326 = !DILocation(line: 2765, column: 31, scope: !13323)
!13327 = !DILocation(line: 2765, column: 29, scope: !13323)
!13328 = !DILocation(line: 2765, column: 8, scope: !13264)
!13329 = !DILocation(line: 2766, column: 29, scope: !13323)
!13330 = !DILocation(line: 2766, column: 6, scope: !13323)
!13331 = !DILocation(line: 2766, column: 14, scope: !13323)
!13332 = !DILocation(line: 2766, column: 19, scope: !13323)
!13333 = !DILocation(line: 2766, column: 27, scope: !13323)
!13334 = !DILocation(line: 2767, column: 8, scope: !13335)
!13335 = distinct !DILexicalBlock(scope: !13264, file: !3, line: 2767, column: 8)
!13336 = !DILocation(line: 2767, column: 8, scope: !13264)
!13337 = !DILocalVariable(name: "x", scope: !13338, file: !3, line: 2769, type: !3347)
!13338 = distinct !DILexicalBlock(scope: !13335, file: !3, line: 2768, column: 6)
!13339 = !DILocation(line: 2769, column: 26, scope: !13338)
!13340 = !DILocation(line: 2770, column: 20, scope: !13338)
!13341 = !DILocation(line: 2770, column: 28, scope: !13338)
!13342 = !DILocation(line: 2771, column: 12, scope: !13338)
!13343 = !DILocation(line: 2771, column: 10, scope: !13338)
!13344 = !DILocation(line: 2771, column: 29, scope: !13338)
!13345 = !DILocation(line: 2771, column: 27, scope: !13338)
!13346 = !DILocation(line: 2771, column: 50, scope: !13338)
!13347 = !DILocation(line: 2771, column: 48, scope: !13338)
!13348 = !DILocation(line: 2772, column: 39, scope: !13338)
!13349 = !DILocation(line: 2772, column: 8, scope: !13338)
!13350 = !DILocation(line: 2772, column: 18, scope: !13338)
!13351 = !DILocation(line: 2772, column: 22, scope: !13338)
!13352 = !DILocation(line: 2772, column: 32, scope: !13338)
!13353 = !DILocation(line: 2772, column: 37, scope: !13338)
!13354 = !DILocation(line: 2773, column: 8, scope: !13338)
!13355 = !DILocation(line: 2773, column: 18, scope: !13338)
!13356 = !DILocation(line: 2773, column: 21, scope: !13338)
!13357 = !DILocation(line: 2773, column: 31, scope: !13338)
!13358 = !DILocation(line: 2773, column: 36, scope: !13338)
!13359 = !DILocation(line: 2774, column: 6, scope: !13338)
!13360 = !DILocation(line: 2775, column: 4, scope: !13264)
!13361 = !DILocation(line: 2777, column: 5, scope: !13117)
!13362 = !DILocation(line: 2697, column: 41, scope: !13113)
!13363 = !DILocation(line: 2697, column: 3, scope: !13113)
!13364 = distinct !{!13364, !13115, !13365}
!13365 = !DILocation(line: 2777, column: 5, scope: !13107)
!13366 = !DILocation(line: 2778, column: 7, scope: !13367)
!13367 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2778, column: 7)
!13368 = !DILocation(line: 2778, column: 7, scope: !12484)
!13369 = !DILocation(line: 2779, column: 5, scope: !13367)
!13370 = !DILocation(line: 2783, column: 8, scope: !13371)
!13371 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2783, column: 7)
!13372 = !DILocation(line: 2783, column: 10, scope: !13371)
!13373 = !DILocation(line: 2783, column: 15, scope: !13371)
!13374 = !DILocation(line: 2783, column: 7, scope: !12484)
!13375 = !DILocation(line: 2784, column: 5, scope: !13371)
!13376 = !DILabel(scope: !13377, name: "do_alg_add_t2_m", file: !3, line: 2785)
!13377 = distinct !DILexicalBlock(scope: !13371, file: !3, line: 2784, column: 5)
!13378 = !DILocation(line: 2785, column: 5, scope: !13377)
!13379 = !DILocation(line: 2786, column: 11, scope: !13377)
!13380 = !DILocation(line: 2786, column: 13, scope: !13377)
!13381 = !DILocation(line: 2786, column: 9, scope: !13377)
!13382 = !DILocation(line: 2787, column: 11, scope: !13377)
!13383 = !DILocation(line: 2787, column: 16, scope: !13377)
!13384 = !DILocation(line: 2787, column: 15, scope: !13377)
!13385 = !DILocation(line: 2787, column: 13, scope: !13377)
!13386 = !DILocation(line: 2787, column: 9, scope: !13377)
!13387 = !DILocation(line: 2788, column: 23, scope: !13377)
!13388 = !DILocation(line: 2788, column: 11, scope: !13377)
!13389 = !DILocation(line: 2788, column: 9, scope: !13377)
!13390 = !DILocation(line: 2789, column: 11, scope: !13391)
!13391 = distinct !DILexicalBlock(scope: !13377, file: !3, line: 2789, column: 11)
!13392 = !DILocation(line: 2789, column: 13, scope: !13391)
!13393 = !DILocation(line: 2789, column: 18, scope: !13391)
!13394 = !DILocation(line: 2789, column: 21, scope: !13391)
!13395 = !DILocation(line: 2789, column: 25, scope: !13391)
!13396 = !DILocation(line: 2789, column: 23, scope: !13391)
!13397 = !DILocation(line: 2789, column: 11, scope: !13377)
!13398 = !DILocation(line: 2791, column: 28, scope: !13399)
!13399 = distinct !DILexicalBlock(scope: !13391, file: !3, line: 2790, column: 2)
!13400 = !DILocation(line: 2791, column: 14, scope: !13399)
!13401 = !DILocation(line: 2791, column: 35, scope: !13399)
!13402 = !DILocation(line: 2791, column: 41, scope: !13399)
!13403 = !DILocation(line: 2791, column: 12, scope: !13399)
!13404 = !DILocation(line: 2792, column: 31, scope: !13399)
!13405 = !DILocation(line: 2792, column: 21, scope: !13399)
!13406 = !DILocation(line: 2792, column: 38, scope: !13399)
!13407 = !DILocation(line: 2792, column: 36, scope: !13399)
!13408 = !DILocation(line: 2792, column: 14, scope: !13399)
!13409 = !DILocation(line: 2792, column: 19, scope: !13399)
!13410 = !DILocation(line: 2793, column: 34, scope: !13399)
!13411 = !DILocation(line: 2793, column: 24, scope: !13399)
!13412 = !DILocation(line: 2793, column: 44, scope: !13399)
!13413 = !DILocation(line: 2793, column: 42, scope: !13399)
!13414 = !DILocation(line: 2793, column: 14, scope: !13399)
!13415 = !DILocation(line: 2793, column: 22, scope: !13399)
!13416 = !DILocation(line: 2794, column: 16, scope: !13399)
!13417 = !DILocation(line: 2794, column: 25, scope: !13399)
!13418 = !DILocation(line: 2794, column: 27, scope: !13399)
!13419 = !DILocation(line: 2794, column: 35, scope: !13399)
!13420 = !DILocation(line: 2794, column: 32, scope: !13399)
!13421 = !DILocation(line: 2794, column: 50, scope: !13399)
!13422 = !DILocation(line: 2794, column: 4, scope: !13399)
!13423 = !DILocation(line: 2796, column: 25, scope: !13399)
!13424 = !DILocation(line: 2796, column: 4, scope: !13399)
!13425 = !DILocation(line: 2796, column: 12, scope: !13399)
!13426 = !DILocation(line: 2796, column: 17, scope: !13399)
!13427 = !DILocation(line: 2796, column: 22, scope: !13399)
!13428 = !DILocation(line: 2797, column: 28, scope: !13399)
!13429 = !DILocation(line: 2797, column: 4, scope: !13399)
!13430 = !DILocation(line: 2797, column: 12, scope: !13399)
!13431 = !DILocation(line: 2797, column: 17, scope: !13399)
!13432 = !DILocation(line: 2797, column: 25, scope: !13399)
!13433 = !DILocation(line: 2798, column: 8, scope: !13434)
!13434 = distinct !DILexicalBlock(scope: !13399, file: !3, line: 2798, column: 8)
!13435 = !DILocation(line: 2798, column: 8, scope: !13399)
!13436 = !DILocalVariable(name: "x", scope: !13437, file: !3, line: 2800, type: !3347)
!13437 = distinct !DILexicalBlock(scope: !13434, file: !3, line: 2799, column: 6)
!13438 = !DILocation(line: 2800, column: 26, scope: !13437)
!13439 = !DILocation(line: 2801, column: 20, scope: !13437)
!13440 = !DILocation(line: 2801, column: 28, scope: !13437)
!13441 = !DILocation(line: 2802, column: 12, scope: !13437)
!13442 = !DILocation(line: 2802, column: 10, scope: !13437)
!13443 = !DILocation(line: 2802, column: 29, scope: !13437)
!13444 = !DILocation(line: 2802, column: 27, scope: !13437)
!13445 = !DILocation(line: 2802, column: 50, scope: !13437)
!13446 = !DILocation(line: 2802, column: 48, scope: !13437)
!13447 = !DILocation(line: 2803, column: 39, scope: !13437)
!13448 = !DILocation(line: 2803, column: 8, scope: !13437)
!13449 = !DILocation(line: 2803, column: 18, scope: !13437)
!13450 = !DILocation(line: 2803, column: 22, scope: !13437)
!13451 = !DILocation(line: 2803, column: 32, scope: !13437)
!13452 = !DILocation(line: 2803, column: 37, scope: !13437)
!13453 = !DILocation(line: 2804, column: 8, scope: !13437)
!13454 = !DILocation(line: 2804, column: 18, scope: !13437)
!13455 = !DILocation(line: 2804, column: 21, scope: !13437)
!13456 = !DILocation(line: 2804, column: 31, scope: !13437)
!13457 = !DILocation(line: 2804, column: 36, scope: !13437)
!13458 = !DILocation(line: 2805, column: 6, scope: !13437)
!13459 = !DILocation(line: 2806, column: 2, scope: !13399)
!13460 = !DILocation(line: 2807, column: 11, scope: !13461)
!13461 = distinct !DILexicalBlock(scope: !13377, file: !3, line: 2807, column: 11)
!13462 = !DILocation(line: 2807, column: 11, scope: !13377)
!13463 = !DILocation(line: 2808, column: 2, scope: !13461)
!13464 = !DILabel(scope: !13377, name: "do_alg_sub_t2_m", file: !3, line: 2810)
!13465 = !DILocation(line: 2810, column: 5, scope: !13377)
!13466 = !DILocation(line: 2811, column: 11, scope: !13377)
!13467 = !DILocation(line: 2811, column: 13, scope: !13377)
!13468 = !DILocation(line: 2811, column: 9, scope: !13377)
!13469 = !DILocation(line: 2812, column: 11, scope: !13377)
!13470 = !DILocation(line: 2812, column: 16, scope: !13377)
!13471 = !DILocation(line: 2812, column: 15, scope: !13377)
!13472 = !DILocation(line: 2812, column: 13, scope: !13377)
!13473 = !DILocation(line: 2812, column: 9, scope: !13377)
!13474 = !DILocation(line: 2813, column: 23, scope: !13377)
!13475 = !DILocation(line: 2813, column: 11, scope: !13377)
!13476 = !DILocation(line: 2813, column: 9, scope: !13377)
!13477 = !DILocation(line: 2814, column: 11, scope: !13478)
!13478 = distinct !DILexicalBlock(scope: !13377, file: !3, line: 2814, column: 11)
!13479 = !DILocation(line: 2814, column: 13, scope: !13478)
!13480 = !DILocation(line: 2814, column: 18, scope: !13478)
!13481 = !DILocation(line: 2814, column: 21, scope: !13478)
!13482 = !DILocation(line: 2814, column: 25, scope: !13478)
!13483 = !DILocation(line: 2814, column: 23, scope: !13478)
!13484 = !DILocation(line: 2814, column: 11, scope: !13377)
!13485 = !DILocation(line: 2816, column: 29, scope: !13486)
!13486 = distinct !DILexicalBlock(scope: !13478, file: !3, line: 2815, column: 2)
!13487 = !DILocation(line: 2816, column: 14, scope: !13486)
!13488 = !DILocation(line: 2816, column: 36, scope: !13486)
!13489 = !DILocation(line: 2816, column: 42, scope: !13486)
!13490 = !DILocation(line: 2816, column: 12, scope: !13486)
!13491 = !DILocation(line: 2817, column: 31, scope: !13486)
!13492 = !DILocation(line: 2817, column: 21, scope: !13486)
!13493 = !DILocation(line: 2817, column: 38, scope: !13486)
!13494 = !DILocation(line: 2817, column: 36, scope: !13486)
!13495 = !DILocation(line: 2817, column: 14, scope: !13486)
!13496 = !DILocation(line: 2817, column: 19, scope: !13486)
!13497 = !DILocation(line: 2818, column: 34, scope: !13486)
!13498 = !DILocation(line: 2818, column: 24, scope: !13486)
!13499 = !DILocation(line: 2818, column: 44, scope: !13486)
!13500 = !DILocation(line: 2818, column: 42, scope: !13486)
!13501 = !DILocation(line: 2818, column: 14, scope: !13486)
!13502 = !DILocation(line: 2818, column: 22, scope: !13486)
!13503 = !DILocation(line: 2819, column: 16, scope: !13486)
!13504 = !DILocation(line: 2819, column: 25, scope: !13486)
!13505 = !DILocation(line: 2819, column: 27, scope: !13486)
!13506 = !DILocation(line: 2819, column: 35, scope: !13486)
!13507 = !DILocation(line: 2819, column: 32, scope: !13486)
!13508 = !DILocation(line: 2819, column: 50, scope: !13486)
!13509 = !DILocation(line: 2819, column: 4, scope: !13486)
!13510 = !DILocation(line: 2821, column: 25, scope: !13486)
!13511 = !DILocation(line: 2821, column: 4, scope: !13486)
!13512 = !DILocation(line: 2821, column: 12, scope: !13486)
!13513 = !DILocation(line: 2821, column: 17, scope: !13486)
!13514 = !DILocation(line: 2821, column: 22, scope: !13486)
!13515 = !DILocation(line: 2822, column: 28, scope: !13486)
!13516 = !DILocation(line: 2822, column: 4, scope: !13486)
!13517 = !DILocation(line: 2822, column: 12, scope: !13486)
!13518 = !DILocation(line: 2822, column: 17, scope: !13486)
!13519 = !DILocation(line: 2822, column: 25, scope: !13486)
!13520 = !DILocation(line: 2823, column: 8, scope: !13521)
!13521 = distinct !DILexicalBlock(scope: !13486, file: !3, line: 2823, column: 8)
!13522 = !DILocation(line: 2823, column: 8, scope: !13486)
!13523 = !DILocalVariable(name: "x", scope: !13524, file: !3, line: 2825, type: !3347)
!13524 = distinct !DILexicalBlock(scope: !13521, file: !3, line: 2824, column: 6)
!13525 = !DILocation(line: 2825, column: 26, scope: !13524)
!13526 = !DILocation(line: 2826, column: 20, scope: !13524)
!13527 = !DILocation(line: 2826, column: 28, scope: !13524)
!13528 = !DILocation(line: 2827, column: 12, scope: !13524)
!13529 = !DILocation(line: 2827, column: 10, scope: !13524)
!13530 = !DILocation(line: 2827, column: 29, scope: !13524)
!13531 = !DILocation(line: 2827, column: 27, scope: !13524)
!13532 = !DILocation(line: 2827, column: 50, scope: !13524)
!13533 = !DILocation(line: 2827, column: 48, scope: !13524)
!13534 = !DILocation(line: 2828, column: 39, scope: !13524)
!13535 = !DILocation(line: 2828, column: 8, scope: !13524)
!13536 = !DILocation(line: 2828, column: 18, scope: !13524)
!13537 = !DILocation(line: 2828, column: 22, scope: !13524)
!13538 = !DILocation(line: 2828, column: 32, scope: !13524)
!13539 = !DILocation(line: 2828, column: 37, scope: !13524)
!13540 = !DILocation(line: 2829, column: 8, scope: !13524)
!13541 = !DILocation(line: 2829, column: 18, scope: !13524)
!13542 = !DILocation(line: 2829, column: 21, scope: !13524)
!13543 = !DILocation(line: 2829, column: 31, scope: !13524)
!13544 = !DILocation(line: 2829, column: 36, scope: !13524)
!13545 = !DILocation(line: 2830, column: 6, scope: !13524)
!13546 = !DILocation(line: 2831, column: 2, scope: !13486)
!13547 = !DILocation(line: 2832, column: 11, scope: !13548)
!13548 = distinct !DILexicalBlock(scope: !13377, file: !3, line: 2832, column: 11)
!13549 = !DILocation(line: 2832, column: 11, scope: !13377)
!13550 = !DILocation(line: 2833, column: 2, scope: !13548)
!13551 = !DILocation(line: 2834, column: 5, scope: !13377)
!13552 = !DILocation(line: 2783, column: 18, scope: !13371)
!13553 = !DILabel(scope: !12484, name: "done", file: !3, line: 2836)
!13554 = !DILocation(line: 2836, column: 2, scope: !12484)
!13555 = !DILocation(line: 2838, column: 8, scope: !13556)
!13556 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2838, column: 7)
!13557 = !DILocation(line: 2838, column: 7, scope: !12484)
!13558 = !DILocation(line: 2845, column: 32, scope: !13559)
!13559 = distinct !DILexicalBlock(scope: !13556, file: !3, line: 2839, column: 5)
!13560 = !DILocation(line: 2845, column: 16, scope: !13559)
!13561 = !DILocation(line: 2845, column: 7, scope: !13559)
!13562 = !DILocation(line: 2845, column: 28, scope: !13559)
!13563 = !DILocation(line: 2845, column: 30, scope: !13559)
!13564 = !DILocation(line: 2846, column: 35, scope: !13559)
!13565 = !DILocation(line: 2846, column: 16, scope: !13559)
!13566 = !DILocation(line: 2846, column: 7, scope: !13559)
!13567 = !DILocation(line: 2846, column: 28, scope: !13559)
!13568 = !DILocation(line: 2846, column: 33, scope: !13559)
!13569 = !DILocation(line: 2847, column: 36, scope: !13559)
!13570 = !DILocation(line: 2847, column: 16, scope: !13559)
!13571 = !DILocation(line: 2847, column: 7, scope: !13559)
!13572 = !DILocation(line: 2847, column: 28, scope: !13559)
!13573 = !DILocation(line: 2847, column: 34, scope: !13559)
!13574 = !DILocation(line: 2848, column: 16, scope: !13559)
!13575 = !DILocation(line: 2848, column: 7, scope: !13559)
!13576 = !DILocation(line: 2848, column: 28, scope: !13559)
!13577 = !DILocation(line: 2848, column: 32, scope: !13559)
!13578 = !DILocation(line: 2849, column: 16, scope: !13559)
!13579 = !DILocation(line: 2849, column: 7, scope: !13559)
!13580 = !DILocation(line: 2849, column: 28, scope: !13559)
!13581 = !DILocation(line: 2849, column: 36, scope: !13559)
!13582 = !DILocation(line: 2849, column: 35, scope: !13559)
!13583 = !DILocation(line: 2850, column: 7, scope: !13559)
!13584 = !DILocation(line: 2854, column: 8, scope: !13585)
!13585 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2854, column: 7)
!13586 = !DILocation(line: 2854, column: 7, scope: !12484)
!13587 = !DILocation(line: 2856, column: 32, scope: !13588)
!13588 = distinct !DILexicalBlock(scope: !13585, file: !3, line: 2855, column: 5)
!13589 = !DILocation(line: 2856, column: 16, scope: !13588)
!13590 = !DILocation(line: 2856, column: 7, scope: !13588)
!13591 = !DILocation(line: 2856, column: 28, scope: !13588)
!13592 = !DILocation(line: 2856, column: 30, scope: !13588)
!13593 = !DILocation(line: 2857, column: 35, scope: !13588)
!13594 = !DILocation(line: 2857, column: 16, scope: !13588)
!13595 = !DILocation(line: 2857, column: 7, scope: !13588)
!13596 = !DILocation(line: 2857, column: 28, scope: !13588)
!13597 = !DILocation(line: 2857, column: 33, scope: !13588)
!13598 = !DILocation(line: 2858, column: 36, scope: !13588)
!13599 = !DILocation(line: 2858, column: 16, scope: !13588)
!13600 = !DILocation(line: 2858, column: 7, scope: !13588)
!13601 = !DILocation(line: 2858, column: 28, scope: !13588)
!13602 = !DILocation(line: 2858, column: 34, scope: !13588)
!13603 = !DILocation(line: 2859, column: 34, scope: !13588)
!13604 = !DILocation(line: 2859, column: 44, scope: !13588)
!13605 = !DILocation(line: 2859, column: 47, scope: !13588)
!13606 = !DILocation(line: 2859, column: 57, scope: !13588)
!13607 = !DILocation(line: 2859, column: 16, scope: !13588)
!13608 = !DILocation(line: 2859, column: 7, scope: !13588)
!13609 = !DILocation(line: 2859, column: 28, scope: !13588)
!13610 = !DILocation(line: 2859, column: 32, scope: !13588)
!13611 = !DILocation(line: 2860, column: 50, scope: !13588)
!13612 = !DILocation(line: 2860, column: 16, scope: !13588)
!13613 = !DILocation(line: 2860, column: 7, scope: !13588)
!13614 = !DILocation(line: 2860, column: 28, scope: !13588)
!13615 = !DILocation(line: 2860, column: 33, scope: !13588)
!13616 = !DILocation(line: 2860, column: 38, scope: !13588)
!13617 = !DILocation(line: 2861, column: 53, scope: !13588)
!13618 = !DILocation(line: 2861, column: 16, scope: !13588)
!13619 = !DILocation(line: 2861, column: 7, scope: !13588)
!13620 = !DILocation(line: 2861, column: 28, scope: !13588)
!13621 = !DILocation(line: 2861, column: 33, scope: !13588)
!13622 = !DILocation(line: 2861, column: 41, scope: !13588)
!13623 = !DILocation(line: 2862, column: 5, scope: !13588)
!13624 = !DILocation(line: 2866, column: 7, scope: !13625)
!13625 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2866, column: 7)
!13626 = !DILocation(line: 2866, column: 17, scope: !13625)
!13627 = !DILocation(line: 2866, column: 21, scope: !13625)
!13628 = !DILocation(line: 2866, column: 7, scope: !12484)
!13629 = !DILocation(line: 2867, column: 5, scope: !13625)
!13630 = !DILocation(line: 2872, column: 18, scope: !12484)
!13631 = !DILocation(line: 2872, column: 28, scope: !12484)
!13632 = !DILocation(line: 2872, column: 32, scope: !12484)
!13633 = !DILocation(line: 2872, column: 3, scope: !12484)
!13634 = !DILocation(line: 2872, column: 12, scope: !12484)
!13635 = !DILocation(line: 2872, column: 16, scope: !12484)
!13636 = !DILocation(line: 2873, column: 3, scope: !12484)
!13637 = !DILocation(line: 2873, column: 12, scope: !12484)
!13638 = !DILocation(line: 2873, column: 19, scope: !12484)
!13639 = !DILocation(line: 2874, column: 11, scope: !12484)
!13640 = !DILocation(line: 2874, column: 20, scope: !12484)
!13641 = !DILocation(line: 2874, column: 3, scope: !12484)
!13642 = !DILocation(line: 2874, column: 24, scope: !12484)
!13643 = !DILocation(line: 2874, column: 34, scope: !12484)
!13644 = !DILocation(line: 2875, column: 4, scope: !12484)
!13645 = !DILocation(line: 2875, column: 13, scope: !12484)
!13646 = !DILocation(line: 2875, column: 17, scope: !12484)
!13647 = !DILocation(line: 2876, column: 11, scope: !12484)
!13648 = !DILocation(line: 2876, column: 20, scope: !12484)
!13649 = !DILocation(line: 2876, column: 3, scope: !12484)
!13650 = !DILocation(line: 2876, column: 25, scope: !12484)
!13651 = !DILocation(line: 2876, column: 35, scope: !12484)
!13652 = !DILocation(line: 2877, column: 4, scope: !12484)
!13653 = !DILocation(line: 2877, column: 13, scope: !12484)
!13654 = !DILocation(line: 2877, column: 17, scope: !12484)
!13655 = !DILocation(line: 2878, column: 1, scope: !12484)
!13656 = distinct !DISubprogram(name: "expand_mult_highpart_optab", scope: !3, file: !3, line: 3451, type: !9814, scopeLine: 3453, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!13657 = !DILocalVariable(name: "mode", arg: 1, scope: !13656, file: !3, line: 3451, type: !5)
!13658 = !DILocation(line: 3451, column: 47, scope: !13656)
!13659 = !DILocalVariable(name: "op0", arg: 2, scope: !13656, file: !3, line: 3451, type: !2301)
!13660 = !DILocation(line: 3451, column: 57, scope: !13656)
!13661 = !DILocalVariable(name: "op1", arg: 3, scope: !13656, file: !3, line: 3451, type: !2301)
!13662 = !DILocation(line: 3451, column: 66, scope: !13656)
!13663 = !DILocalVariable(name: "target", arg: 4, scope: !13656, file: !3, line: 3452, type: !2301)
!13664 = !DILocation(line: 3452, column: 12, scope: !13656)
!13665 = !DILocalVariable(name: "unsignedp", arg: 5, scope: !13656, file: !3, line: 3452, type: !2325)
!13666 = !DILocation(line: 3452, column: 24, scope: !13656)
!13667 = !DILocalVariable(name: "max_cost", arg: 6, scope: !13656, file: !3, line: 3452, type: !2325)
!13668 = !DILocation(line: 3452, column: 39, scope: !13656)
!13669 = !DILocalVariable(name: "narrow_op1", scope: !13656, file: !3, line: 3454, type: !2301)
!13670 = !DILocation(line: 3454, column: 7, scope: !13656)
!13671 = !DILocation(line: 3454, column: 34, scope: !13656)
!13672 = !DILocation(line: 3454, column: 48, scope: !13656)
!13673 = !DILocation(line: 3454, column: 20, scope: !13656)
!13674 = !DILocalVariable(name: "wider_mode", scope: !13656, file: !3, line: 3455, type: !5)
!13675 = !DILocation(line: 3455, column: 21, scope: !13656)
!13676 = !DILocalVariable(name: "moptab", scope: !13656, file: !3, line: 3456, type: !5978)
!13677 = !DILocation(line: 3456, column: 9, scope: !13656)
!13678 = !DILocalVariable(name: "tem", scope: !13656, file: !3, line: 3457, type: !2301)
!13679 = !DILocation(line: 3457, column: 7, scope: !13656)
!13680 = !DILocalVariable(name: "size", scope: !13656, file: !3, line: 3458, type: !2325)
!13681 = !DILocation(line: 3458, column: 7, scope: !13656)
!13682 = !DILocalVariable(name: "speed", scope: !13656, file: !3, line: 3459, type: !2535)
!13683 = !DILocation(line: 3459, column: 8, scope: !13656)
!13684 = !DILocation(line: 3459, column: 16, scope: !13656)
!13685 = !DILocation(line: 3461, column: 3, scope: !13656)
!13686 = !DILocation(line: 3463, column: 16, scope: !13656)
!13687 = !DILocation(line: 3463, column: 14, scope: !13656)
!13688 = !DILocation(line: 3464, column: 10, scope: !13656)
!13689 = !DILocation(line: 3464, column: 8, scope: !13656)
!13690 = !DILocation(line: 3468, column: 25, scope: !13691)
!13691 = distinct !DILexicalBlock(scope: !13656, file: !3, line: 3468, column: 7)
!13692 = !DILocation(line: 3468, column: 7, scope: !13691)
!13693 = !DILocation(line: 3468, column: 32, scope: !13691)
!13694 = !DILocation(line: 3468, column: 40, scope: !13691)
!13695 = !DILocation(line: 3468, column: 38, scope: !13691)
!13696 = !DILocation(line: 3468, column: 7, scope: !13656)
!13697 = !DILocation(line: 3470, column: 16, scope: !13698)
!13698 = distinct !DILexicalBlock(scope: !13691, file: !3, line: 3469, column: 5)
!13699 = !DILocation(line: 3470, column: 14, scope: !13698)
!13700 = !DILocation(line: 3471, column: 27, scope: !13698)
!13701 = !DILocation(line: 3471, column: 33, scope: !13698)
!13702 = !DILocation(line: 3471, column: 41, scope: !13698)
!13703 = !DILocation(line: 3471, column: 46, scope: !13698)
!13704 = !DILocation(line: 3471, column: 58, scope: !13698)
!13705 = !DILocation(line: 3472, column: 6, scope: !13698)
!13706 = !DILocation(line: 3471, column: 13, scope: !13698)
!13707 = !DILocation(line: 3471, column: 11, scope: !13698)
!13708 = !DILocation(line: 3473, column: 11, scope: !13709)
!13709 = distinct !DILexicalBlock(scope: !13698, file: !3, line: 3473, column: 11)
!13710 = !DILocation(line: 3473, column: 11, scope: !13698)
!13711 = !DILocation(line: 3474, column: 9, scope: !13709)
!13712 = !DILocation(line: 3474, column: 2, scope: !13709)
!13713 = !DILocation(line: 3475, column: 5, scope: !13698)
!13714 = !DILocation(line: 3479, column: 7, scope: !13715)
!13715 = distinct !DILexicalBlock(scope: !13656, file: !3, line: 3479, column: 7)
!13716 = !DILocation(line: 3479, column: 12, scope: !13715)
!13717 = !DILocation(line: 3479, column: 16, scope: !13715)
!13718 = !DILocation(line: 3480, column: 7, scope: !13715)
!13719 = !DILocation(line: 3480, column: 29, scope: !13715)
!13720 = !DILocation(line: 3480, column: 11, scope: !13715)
!13721 = !DILocation(line: 3480, column: 36, scope: !13715)
!13722 = !DILocation(line: 3480, column: 59, scope: !13715)
!13723 = !DILocation(line: 3480, column: 48, scope: !13715)
!13724 = !DILocation(line: 3480, column: 66, scope: !13715)
!13725 = !DILocation(line: 3480, column: 72, scope: !13715)
!13726 = !DILocation(line: 3480, column: 76, scope: !13715)
!13727 = !DILocation(line: 3480, column: 46, scope: !13715)
!13728 = !DILocation(line: 3480, column: 42, scope: !13715)
!13729 = !DILocation(line: 3481, column: 19, scope: !13715)
!13730 = !DILocation(line: 3481, column: 10, scope: !13715)
!13731 = !DILocation(line: 3481, column: 26, scope: !13715)
!13732 = !DILocation(line: 3481, column: 8, scope: !13715)
!13733 = !DILocation(line: 3481, column: 4, scope: !13715)
!13734 = !DILocation(line: 3481, column: 34, scope: !13715)
!13735 = !DILocation(line: 3481, column: 32, scope: !13715)
!13736 = !DILocation(line: 3479, column: 7, scope: !13656)
!13737 = !DILocation(line: 3483, column: 16, scope: !13738)
!13738 = distinct !DILexicalBlock(scope: !13715, file: !3, line: 3482, column: 5)
!13739 = !DILocation(line: 3483, column: 14, scope: !13738)
!13740 = !DILocation(line: 3484, column: 27, scope: !13738)
!13741 = !DILocation(line: 3484, column: 33, scope: !13738)
!13742 = !DILocation(line: 3484, column: 41, scope: !13738)
!13743 = !DILocation(line: 3484, column: 46, scope: !13738)
!13744 = !DILocation(line: 3484, column: 58, scope: !13738)
!13745 = !DILocation(line: 3485, column: 6, scope: !13738)
!13746 = !DILocation(line: 3484, column: 13, scope: !13738)
!13747 = !DILocation(line: 3484, column: 11, scope: !13738)
!13748 = !DILocation(line: 3486, column: 11, scope: !13749)
!13749 = distinct !DILexicalBlock(scope: !13738, file: !3, line: 3486, column: 11)
!13750 = !DILocation(line: 3486, column: 11, scope: !13738)
!13751 = !DILocation(line: 3488, column: 38, scope: !13749)
!13752 = !DILocation(line: 3488, column: 44, scope: !13749)
!13753 = !DILocation(line: 3488, column: 49, scope: !13749)
!13754 = !DILocation(line: 3488, column: 54, scope: !13749)
!13755 = !DILocation(line: 3489, column: 10, scope: !13749)
!13756 = !DILocation(line: 3489, column: 15, scope: !13749)
!13757 = !DILocation(line: 3488, column: 9, scope: !13749)
!13758 = !DILocation(line: 3488, column: 2, scope: !13749)
!13759 = !DILocation(line: 3490, column: 5, scope: !13738)
!13760 = !DILocation(line: 3493, column: 12, scope: !13656)
!13761 = !DILocation(line: 3493, column: 10, scope: !13656)
!13762 = !DILocation(line: 3494, column: 7, scope: !13763)
!13763 = distinct !DILexicalBlock(scope: !13656, file: !3, line: 3494, column: 7)
!13764 = !DILocation(line: 3494, column: 43, scope: !13763)
!13765 = !DILocation(line: 3494, column: 53, scope: !13763)
!13766 = !DILocation(line: 3495, column: 7, scope: !13763)
!13767 = !DILocation(line: 3495, column: 25, scope: !13763)
!13768 = !DILocation(line: 3495, column: 10, scope: !13763)
!13769 = !DILocation(line: 3495, column: 32, scope: !13763)
!13770 = !DILocation(line: 3495, column: 46, scope: !13763)
!13771 = !DILocation(line: 3495, column: 44, scope: !13763)
!13772 = !DILocation(line: 3494, column: 7, scope: !13656)
!13773 = !DILocation(line: 3497, column: 27, scope: !13774)
!13774 = distinct !DILexicalBlock(scope: !13763, file: !3, line: 3496, column: 5)
!13775 = !DILocation(line: 3497, column: 39, scope: !13774)
!13776 = !DILocation(line: 3497, column: 47, scope: !13774)
!13777 = !DILocation(line: 3497, column: 52, scope: !13774)
!13778 = !DILocation(line: 3498, column: 6, scope: !13774)
!13779 = !DILocation(line: 3497, column: 13, scope: !13774)
!13780 = !DILocation(line: 3497, column: 11, scope: !13774)
!13781 = !DILocation(line: 3499, column: 11, scope: !13782)
!13782 = distinct !DILexicalBlock(scope: !13774, file: !3, line: 3499, column: 11)
!13783 = !DILocation(line: 3499, column: 11, scope: !13774)
!13784 = !DILocation(line: 3500, column: 28, scope: !13782)
!13785 = !DILocation(line: 3500, column: 34, scope: !13782)
!13786 = !DILocation(line: 3500, column: 9, scope: !13782)
!13787 = !DILocation(line: 3500, column: 2, scope: !13782)
!13788 = !DILocation(line: 3501, column: 5, scope: !13774)
!13789 = !DILocation(line: 3504, column: 7, scope: !13790)
!13790 = distinct !DILexicalBlock(scope: !13656, file: !3, line: 3504, column: 7)
!13791 = !DILocation(line: 3504, column: 47, scope: !13790)
!13792 = !DILocation(line: 3504, column: 57, scope: !13790)
!13793 = !DILocation(line: 3505, column: 7, scope: !13790)
!13794 = !DILocation(line: 3505, column: 10, scope: !13790)
!13795 = !DILocation(line: 3505, column: 15, scope: !13790)
!13796 = !DILocation(line: 3505, column: 19, scope: !13790)
!13797 = !DILocation(line: 3506, column: 7, scope: !13790)
!13798 = !DILocation(line: 3506, column: 19, scope: !13790)
!13799 = !DILocation(line: 3506, column: 10, scope: !13790)
!13800 = !DILocation(line: 3506, column: 26, scope: !13790)
!13801 = !DILocation(line: 3506, column: 51, scope: !13790)
!13802 = !DILocation(line: 3506, column: 40, scope: !13790)
!13803 = !DILocation(line: 3506, column: 58, scope: !13790)
!13804 = !DILocation(line: 3506, column: 64, scope: !13790)
!13805 = !DILocation(line: 3506, column: 68, scope: !13790)
!13806 = !DILocation(line: 3506, column: 38, scope: !13790)
!13807 = !DILocation(line: 3506, column: 74, scope: !13790)
!13808 = !DILocation(line: 3506, column: 72, scope: !13790)
!13809 = !DILocation(line: 3504, column: 7, scope: !13656)
!13810 = !DILocalVariable(name: "insns", scope: !13811, file: !3, line: 3508, type: !2301)
!13811 = distinct !DILexicalBlock(scope: !13790, file: !3, line: 3507, column: 5)
!13812 = !DILocation(line: 3508, column: 11, scope: !13811)
!13813 = !DILocalVariable(name: "wop0", scope: !13811, file: !3, line: 3508, type: !2301)
!13814 = !DILocation(line: 3508, column: 18, scope: !13811)
!13815 = !DILocalVariable(name: "wop1", scope: !13811, file: !3, line: 3508, type: !2301)
!13816 = !DILocation(line: 3508, column: 24, scope: !13811)
!13817 = !DILocation(line: 3514, column: 7, scope: !13811)
!13818 = !DILocation(line: 3515, column: 29, scope: !13811)
!13819 = !DILocation(line: 3515, column: 41, scope: !13811)
!13820 = !DILocation(line: 3515, column: 47, scope: !13811)
!13821 = !DILocation(line: 3515, column: 52, scope: !13811)
!13822 = !DILocation(line: 3515, column: 14, scope: !13811)
!13823 = !DILocation(line: 3515, column: 12, scope: !13811)
!13824 = !DILocation(line: 3516, column: 29, scope: !13811)
!13825 = !DILocation(line: 3516, column: 41, scope: !13811)
!13826 = !DILocation(line: 3516, column: 47, scope: !13811)
!13827 = !DILocation(line: 3516, column: 52, scope: !13811)
!13828 = !DILocation(line: 3516, column: 14, scope: !13811)
!13829 = !DILocation(line: 3516, column: 12, scope: !13811)
!13830 = !DILocation(line: 3517, column: 27, scope: !13811)
!13831 = !DILocation(line: 3517, column: 51, scope: !13811)
!13832 = !DILocation(line: 3517, column: 57, scope: !13811)
!13833 = !DILocation(line: 3518, column: 6, scope: !13811)
!13834 = !DILocation(line: 3517, column: 13, scope: !13811)
!13835 = !DILocation(line: 3517, column: 11, scope: !13811)
!13836 = !DILocation(line: 3519, column: 15, scope: !13811)
!13837 = !DILocation(line: 3519, column: 13, scope: !13811)
!13838 = !DILocation(line: 3520, column: 7, scope: !13811)
!13839 = !DILocation(line: 3522, column: 11, scope: !13840)
!13840 = distinct !DILexicalBlock(scope: !13811, file: !3, line: 3522, column: 11)
!13841 = !DILocation(line: 3522, column: 11, scope: !13811)
!13842 = !DILocation(line: 3524, column: 15, scope: !13843)
!13843 = distinct !DILexicalBlock(scope: !13840, file: !3, line: 3523, column: 2)
!13844 = !DILocation(line: 3524, column: 4, scope: !13843)
!13845 = !DILocation(line: 3525, column: 30, scope: !13843)
!13846 = !DILocation(line: 3525, column: 36, scope: !13843)
!13847 = !DILocation(line: 3525, column: 11, scope: !13843)
!13848 = !DILocation(line: 3525, column: 4, scope: !13843)
!13849 = !DILocation(line: 3527, column: 5, scope: !13811)
!13850 = !DILocation(line: 3530, column: 12, scope: !13656)
!13851 = !DILocation(line: 3530, column: 10, scope: !13656)
!13852 = !DILocation(line: 3531, column: 7, scope: !13853)
!13853 = distinct !DILexicalBlock(scope: !13656, file: !3, line: 3531, column: 7)
!13854 = !DILocation(line: 3531, column: 43, scope: !13853)
!13855 = !DILocation(line: 3531, column: 53, scope: !13853)
!13856 = !DILocation(line: 3532, column: 7, scope: !13853)
!13857 = !DILocation(line: 3532, column: 10, scope: !13853)
!13858 = !DILocation(line: 3532, column: 15, scope: !13853)
!13859 = !DILocation(line: 3532, column: 19, scope: !13853)
!13860 = !DILocation(line: 3533, column: 7, scope: !13853)
!13861 = !DILocation(line: 3533, column: 26, scope: !13853)
!13862 = !DILocation(line: 3533, column: 11, scope: !13853)
!13863 = !DILocation(line: 3533, column: 33, scope: !13853)
!13864 = !DILocation(line: 3533, column: 62, scope: !13853)
!13865 = !DILocation(line: 3533, column: 51, scope: !13853)
!13866 = !DILocation(line: 3533, column: 69, scope: !13853)
!13867 = !DILocation(line: 3533, column: 75, scope: !13853)
!13868 = !DILocation(line: 3533, column: 79, scope: !13853)
!13869 = !DILocation(line: 3533, column: 49, scope: !13853)
!13870 = !DILocation(line: 3533, column: 45, scope: !13853)
!13871 = !DILocation(line: 3534, column: 19, scope: !13853)
!13872 = !DILocation(line: 3534, column: 10, scope: !13853)
!13873 = !DILocation(line: 3534, column: 26, scope: !13853)
!13874 = !DILocation(line: 3534, column: 8, scope: !13853)
!13875 = !DILocation(line: 3534, column: 4, scope: !13853)
!13876 = !DILocation(line: 3534, column: 34, scope: !13853)
!13877 = !DILocation(line: 3534, column: 32, scope: !13853)
!13878 = !DILocation(line: 3531, column: 7, scope: !13656)
!13879 = !DILocation(line: 3536, column: 27, scope: !13880)
!13880 = distinct !DILexicalBlock(scope: !13853, file: !3, line: 3535, column: 5)
!13881 = !DILocation(line: 3536, column: 39, scope: !13880)
!13882 = !DILocation(line: 3536, column: 47, scope: !13880)
!13883 = !DILocation(line: 3536, column: 52, scope: !13880)
!13884 = !DILocation(line: 3537, column: 18, scope: !13880)
!13885 = !DILocation(line: 3537, column: 16, scope: !13880)
!13886 = !DILocation(line: 3536, column: 13, scope: !13880)
!13887 = !DILocation(line: 3536, column: 11, scope: !13880)
!13888 = !DILocation(line: 3538, column: 11, scope: !13889)
!13889 = distinct !DILexicalBlock(scope: !13880, file: !3, line: 3538, column: 11)
!13890 = !DILocation(line: 3538, column: 15, scope: !13889)
!13891 = !DILocation(line: 3538, column: 11, scope: !13880)
!13892 = !DILocation(line: 3540, column: 29, scope: !13893)
!13893 = distinct !DILexicalBlock(scope: !13889, file: !3, line: 3539, column: 2)
!13894 = !DILocation(line: 3540, column: 35, scope: !13893)
!13895 = !DILocation(line: 3540, column: 10, scope: !13893)
!13896 = !DILocation(line: 3540, column: 8, scope: !13893)
!13897 = !DILocation(line: 3542, column: 40, scope: !13893)
!13898 = !DILocation(line: 3542, column: 46, scope: !13893)
!13899 = !DILocation(line: 3542, column: 51, scope: !13893)
!13900 = !DILocation(line: 3542, column: 56, scope: !13893)
!13901 = !DILocation(line: 3543, column: 12, scope: !13893)
!13902 = !DILocation(line: 3543, column: 20, scope: !13893)
!13903 = !DILocation(line: 3542, column: 11, scope: !13893)
!13904 = !DILocation(line: 3542, column: 4, scope: !13893)
!13905 = !DILocation(line: 3545, column: 5, scope: !13880)
!13906 = !DILocation(line: 3547, column: 3, scope: !13656)
!13907 = !DILocation(line: 3548, column: 1, scope: !13656)
!13908 = distinct !DISubprogram(name: "extract_high_half", scope: !3, file: !3, line: 3432, type: !3820, scopeLine: 3433, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!13909 = !DILocalVariable(name: "mode", arg: 1, scope: !13908, file: !3, line: 3432, type: !5)
!13910 = !DILocation(line: 3432, column: 38, scope: !13908)
!13911 = !DILocalVariable(name: "op", arg: 2, scope: !13908, file: !3, line: 3432, type: !2301)
!13912 = !DILocation(line: 3432, column: 48, scope: !13908)
!13913 = !DILocalVariable(name: "wider_mode", scope: !13908, file: !3, line: 3434, type: !5)
!13914 = !DILocation(line: 3434, column: 21, scope: !13908)
!13915 = !DILocation(line: 3436, column: 7, scope: !13916)
!13916 = distinct !DILexicalBlock(scope: !13908, file: !3, line: 3436, column: 7)
!13917 = !DILocation(line: 3436, column: 15, scope: !13916)
!13918 = !DILocation(line: 3436, column: 12, scope: !13916)
!13919 = !DILocation(line: 3436, column: 7, scope: !13908)
!13920 = !DILocation(line: 3437, column: 26, scope: !13916)
!13921 = !DILocation(line: 3437, column: 32, scope: !13916)
!13922 = !DILocation(line: 3437, column: 12, scope: !13916)
!13923 = !DILocation(line: 3437, column: 5, scope: !13916)
!13924 = !DILocation(line: 3439, column: 3, scope: !13908)
!13925 = !DILocation(line: 3441, column: 16, scope: !13908)
!13926 = !DILocation(line: 3441, column: 14, scope: !13908)
!13927 = !DILocation(line: 3442, column: 35, scope: !13908)
!13928 = !DILocation(line: 3442, column: 47, scope: !13908)
!13929 = !DILocation(line: 3443, column: 34, scope: !13908)
!13930 = !DILocation(line: 3443, column: 8, scope: !13908)
!13931 = !DILocation(line: 3442, column: 8, scope: !13908)
!13932 = !DILocation(line: 3442, column: 6, scope: !13908)
!13933 = !DILocation(line: 3444, column: 25, scope: !13908)
!13934 = !DILocation(line: 3444, column: 31, scope: !13908)
!13935 = !DILocation(line: 3444, column: 43, scope: !13908)
!13936 = !DILocation(line: 3444, column: 10, scope: !13908)
!13937 = !DILocation(line: 3444, column: 3, scope: !13908)
!13938 = !DILocation(line: 3445, column: 1, scope: !13908)
!13939 = distinct !DISubprogram(name: "emit_cstore", scope: !3, file: !3, line: 5131, type: !13940, scopeLine: 5135, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3369)
!13940 = !DISubroutineType(types: !13941)
!13941 = !{!2301, !2301, !711, !377, !5, !5, !2325, !2301, !2301, !2325, !5}
!13942 = !DILocalVariable(name: "target", arg: 1, scope: !13939, file: !3, line: 5131, type: !2301)
!13943 = !DILocation(line: 5131, column: 18, scope: !13939)
!13944 = !DILocalVariable(name: "icode", arg: 2, scope: !13939, file: !3, line: 5131, type: !711)
!13945 = !DILocation(line: 5131, column: 41, scope: !13939)
!13946 = !DILocalVariable(name: "code", arg: 3, scope: !13939, file: !3, line: 5131, type: !377)
!13947 = !DILocation(line: 5131, column: 62, scope: !13939)
!13948 = !DILocalVariable(name: "mode", arg: 4, scope: !13939, file: !3, line: 5132, type: !5)
!13949 = !DILocation(line: 5132, column: 25, scope: !13939)
!13950 = !DILocalVariable(name: "compare_mode", arg: 5, scope: !13939, file: !3, line: 5132, type: !5)
!13951 = !DILocation(line: 5132, column: 49, scope: !13939)
!13952 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !13939, file: !3, line: 5133, type: !2325)
!13953 = !DILocation(line: 5133, column: 11, scope: !13939)
!13954 = !DILocalVariable(name: "x", arg: 7, scope: !13939, file: !3, line: 5133, type: !2301)
!13955 = !DILocation(line: 5133, column: 26, scope: !13939)
!13956 = !DILocalVariable(name: "y", arg: 8, scope: !13939, file: !3, line: 5133, type: !2301)
!13957 = !DILocation(line: 5133, column: 33, scope: !13939)
!13958 = !DILocalVariable(name: "normalizep", arg: 9, scope: !13939, file: !3, line: 5133, type: !2325)
!13959 = !DILocation(line: 5133, column: 40, scope: !13939)
!13960 = !DILocalVariable(name: "target_mode", arg: 10, scope: !13939, file: !3, line: 5134, type: !5)
!13961 = !DILocation(line: 5134, column: 25, scope: !13939)
!13962 = !DILocalVariable(name: "op0", scope: !13939, file: !3, line: 5136, type: !2301)
!13963 = !DILocation(line: 5136, column: 7, scope: !13939)
!13964 = !DILocalVariable(name: "last", scope: !13939, file: !3, line: 5136, type: !2301)
!13965 = !DILocation(line: 5136, column: 12, scope: !13939)
!13966 = !DILocalVariable(name: "comparison", scope: !13939, file: !3, line: 5136, type: !2301)
!13967 = !DILocation(line: 5136, column: 18, scope: !13939)
!13968 = !DILocalVariable(name: "subtarget", scope: !13939, file: !3, line: 5136, type: !2301)
!13969 = !DILocation(line: 5136, column: 30, scope: !13939)
!13970 = !DILocalVariable(name: "pattern", scope: !13939, file: !3, line: 5136, type: !2301)
!13971 = !DILocation(line: 5136, column: 41, scope: !13939)
!13972 = !DILocalVariable(name: "result_mode", scope: !13939, file: !3, line: 5137, type: !5)
!13973 = !DILocation(line: 5137, column: 21, scope: !13939)
!13974 = !DILocation(line: 5137, column: 51, scope: !13939)
!13975 = !DILocation(line: 5137, column: 35, scope: !13939)
!13976 = !DILocation(line: 5137, column: 58, scope: !13939)
!13977 = !DILocation(line: 5137, column: 69, scope: !13939)
!13978 = !DILocation(line: 5139, column: 10, scope: !13939)
!13979 = !DILocation(line: 5139, column: 8, scope: !13939)
!13980 = !DILocation(line: 5140, column: 24, scope: !13939)
!13981 = !DILocation(line: 5140, column: 31, scope: !13939)
!13982 = !DILocation(line: 5140, column: 37, scope: !13939)
!13983 = !DILocation(line: 5140, column: 43, scope: !13939)
!13984 = !DILocation(line: 5140, column: 57, scope: !13939)
!13985 = !DILocation(line: 5140, column: 7, scope: !13939)
!13986 = !DILocation(line: 5140, column: 5, scope: !13939)
!13987 = !DILocation(line: 5141, column: 24, scope: !13939)
!13988 = !DILocation(line: 5141, column: 31, scope: !13939)
!13989 = !DILocation(line: 5141, column: 37, scope: !13939)
!13990 = !DILocation(line: 5141, column: 43, scope: !13939)
!13991 = !DILocation(line: 5141, column: 57, scope: !13939)
!13992 = !DILocation(line: 5141, column: 7, scope: !13939)
!13993 = !DILocation(line: 5141, column: 5, scope: !13939)
!13994 = !DILocation(line: 5142, column: 16, scope: !13939)
!13995 = !DILocation(line: 5142, column: 14, scope: !13939)
!13996 = !DILocation(line: 5143, column: 8, scope: !13997)
!13997 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 5143, column: 7)
!13998 = !DILocation(line: 5143, column: 10, scope: !13997)
!13999 = !DILocation(line: 5143, column: 14, scope: !13997)
!14000 = !DILocation(line: 5144, column: 7, scope: !13997)
!14001 = !DILocation(line: 5144, column: 21, scope: !13997)
!14002 = !DILocation(line: 5144, column: 11, scope: !13997)
!14003 = !DILocation(line: 5144, column: 28, scope: !13997)
!14004 = !DILocation(line: 5144, column: 39, scope: !13997)
!14005 = !DILocation(line: 5145, column: 5, scope: !13997)
!14006 = !DILocation(line: 5145, column: 18, scope: !13997)
!14007 = !DILocation(line: 5145, column: 8, scope: !13997)
!14008 = !DILocation(line: 5145, column: 25, scope: !13997)
!14009 = !DILocation(line: 5145, column: 36, scope: !13997)
!14010 = !DILocation(line: 5146, column: 7, scope: !13997)
!14011 = !DILocation(line: 5146, column: 21, scope: !13997)
!14012 = !DILocation(line: 5146, column: 11, scope: !13997)
!14013 = !DILocation(line: 5146, column: 28, scope: !13997)
!14014 = !DILocation(line: 5146, column: 39, scope: !13997)
!14015 = !DILocation(line: 5147, column: 5, scope: !13997)
!14016 = !DILocation(line: 5147, column: 18, scope: !13997)
!14017 = !DILocation(line: 5147, column: 8, scope: !13997)
!14018 = !DILocation(line: 5147, column: 25, scope: !13997)
!14019 = !DILocation(line: 5147, column: 36, scope: !13997)
!14020 = !DILocation(line: 5148, column: 7, scope: !13997)
!14021 = !DILocation(line: 5148, column: 21, scope: !13997)
!14022 = !DILocation(line: 5148, column: 11, scope: !13997)
!14023 = !DILocation(line: 5148, column: 28, scope: !13997)
!14024 = !DILocation(line: 5148, column: 39, scope: !13997)
!14025 = !DILocation(line: 5148, column: 50, scope: !13997)
!14026 = !DILocation(line: 5143, column: 7, scope: !13939)
!14027 = !DILocation(line: 5150, column: 27, scope: !14028)
!14028 = distinct !DILexicalBlock(scope: !13997, file: !3, line: 5149, column: 5)
!14029 = !DILocation(line: 5150, column: 7, scope: !14028)
!14030 = !DILocation(line: 5151, column: 7, scope: !14028)
!14031 = !DILocation(line: 5154, column: 7, scope: !14032)
!14032 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 5154, column: 7)
!14033 = !DILocation(line: 5154, column: 19, scope: !14032)
!14034 = !DILocation(line: 5154, column: 7, scope: !13939)
!14035 = !DILocation(line: 5155, column: 19, scope: !14032)
!14036 = !DILocation(line: 5155, column: 17, scope: !14032)
!14037 = !DILocation(line: 5155, column: 5, scope: !14032)
!14038 = !DILocation(line: 5156, column: 8, scope: !14039)
!14039 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 5156, column: 7)
!14040 = !DILocation(line: 5156, column: 7, scope: !13939)
!14041 = !DILocation(line: 5157, column: 27, scope: !14039)
!14042 = !DILocation(line: 5157, column: 14, scope: !14039)
!14043 = !DILocation(line: 5157, column: 12, scope: !14039)
!14044 = !DILocation(line: 5157, column: 5, scope: !14039)
!14045 = !DILocation(line: 5159, column: 7, scope: !14046)
!14046 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 5159, column: 7)
!14047 = !DILocation(line: 5160, column: 7, scope: !14046)
!14048 = !DILocation(line: 5160, column: 28, scope: !14046)
!14049 = !DILocation(line: 5160, column: 12, scope: !14046)
!14050 = !DILocation(line: 5160, column: 35, scope: !14046)
!14051 = !DILocation(line: 5160, column: 46, scope: !14046)
!14052 = !DILocation(line: 5160, column: 57, scope: !14046)
!14053 = !DILocation(line: 5160, column: 65, scope: !14046)
!14054 = !DILocation(line: 5159, column: 7, scope: !13939)
!14055 = !DILocation(line: 5161, column: 30, scope: !14046)
!14056 = !DILocation(line: 5161, column: 17, scope: !14046)
!14057 = !DILocation(line: 5161, column: 15, scope: !14046)
!14058 = !DILocation(line: 5161, column: 5, scope: !14046)
!14059 = !DILocation(line: 5163, column: 17, scope: !14046)
!14060 = !DILocation(line: 5163, column: 15, scope: !14046)
!14061 = !DILocation(line: 5165, column: 13, scope: !13939)
!14062 = !DILocation(line: 5165, column: 30, scope: !13939)
!14063 = !DILocation(line: 5165, column: 41, scope: !13939)
!14064 = !DILocation(line: 5165, column: 53, scope: !13939)
!14065 = !DILocation(line: 5165, column: 56, scope: !13939)
!14066 = !DILocation(line: 5165, column: 11, scope: !13939)
!14067 = !DILocation(line: 5166, column: 8, scope: !14068)
!14068 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 5166, column: 7)
!14069 = !DILocation(line: 5166, column: 7, scope: !13939)
!14070 = !DILocation(line: 5167, column: 5, scope: !14068)
!14071 = !DILocation(line: 5168, column: 14, scope: !13939)
!14072 = !DILocation(line: 5168, column: 3, scope: !13939)
!14073 = !DILocation(line: 5178, column: 7, scope: !14074)
!14074 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 5178, column: 7)
!14075 = !DILocation(line: 5178, column: 37, scope: !14074)
!14076 = !DILocation(line: 5178, column: 35, scope: !14074)
!14077 = !DILocation(line: 5178, column: 7, scope: !13939)
!14078 = !DILocation(line: 5180, column: 21, scope: !14079)
!14079 = distinct !DILexicalBlock(scope: !14074, file: !3, line: 5179, column: 5)
!14080 = !DILocation(line: 5180, column: 29, scope: !14079)
!14081 = !DILocation(line: 5181, column: 8, scope: !14079)
!14082 = !DILocation(line: 5181, column: 39, scope: !14079)
!14083 = !DILocation(line: 5182, column: 7, scope: !14079)
!14084 = !DILocation(line: 5184, column: 9, scope: !14079)
!14085 = !DILocation(line: 5184, column: 40, scope: !14079)
!14086 = !DILocation(line: 5184, column: 5, scope: !14079)
!14087 = !DILocation(line: 5183, column: 9, scope: !14079)
!14088 = !DILocation(line: 5182, column: 12, scope: !14079)
!14089 = !DILocation(line: 0, scope: !14079)
!14090 = !DILocation(line: 5180, column: 7, scope: !14079)
!14091 = !DILocation(line: 5185, column: 13, scope: !14079)
!14092 = !DILocation(line: 5185, column: 11, scope: !14079)
!14093 = !DILocation(line: 5186, column: 21, scope: !14079)
!14094 = !DILocation(line: 5186, column: 19, scope: !14079)
!14095 = !DILocation(line: 5187, column: 5, scope: !14079)
!14096 = !DILocation(line: 5189, column: 11, scope: !14074)
!14097 = !DILocation(line: 5189, column: 9, scope: !14074)
!14098 = !DILocation(line: 5193, column: 7, scope: !14099)
!14099 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 5193, column: 7)
!14100 = !DILocation(line: 5193, column: 7, scope: !13939)
!14101 = !DILocation(line: 5194, column: 15, scope: !14099)
!14102 = !DILocation(line: 5194, column: 5, scope: !14099)
!14103 = !DILocation(line: 5198, column: 7, scope: !14104)
!14104 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 5198, column: 7)
!14105 = !DILocation(line: 5198, column: 18, scope: !14104)
!14106 = !DILocation(line: 5198, column: 23, scope: !14104)
!14107 = !DILocation(line: 5198, column: 26, scope: !14104)
!14108 = !DILocation(line: 5198, column: 37, scope: !14104)
!14109 = !DILocation(line: 5198, column: 7, scope: !13939)
!14110 = !DILocation(line: 5202, column: 14, scope: !14111)
!14111 = distinct !DILexicalBlock(scope: !14104, file: !3, line: 5202, column: 12)
!14112 = !DILocation(line: 5202, column: 12, scope: !14111)
!14113 = !DILocation(line: 5202, column: 25, scope: !14111)
!14114 = !DILocation(line: 5202, column: 12, scope: !14104)
!14115 = !DILocation(line: 5203, column: 24, scope: !14111)
!14116 = !DILocation(line: 5203, column: 48, scope: !14111)
!14117 = !DILocation(line: 5203, column: 53, scope: !14111)
!14118 = !DILocation(line: 5203, column: 11, scope: !14111)
!14119 = !DILocation(line: 5203, column: 9, scope: !14111)
!14120 = !DILocation(line: 5203, column: 5, scope: !14111)
!14121 = !DILocation(line: 5208, column: 12, scope: !14122)
!14122 = distinct !DILexicalBlock(scope: !14111, file: !3, line: 5208, column: 12)
!14123 = !DILocation(line: 5208, column: 43, scope: !14122)
!14124 = !DILocation(line: 5209, column: 5, scope: !14122)
!14125 = !DILocation(line: 5210, column: 34, scope: !14122)
!14126 = !DILocation(line: 5210, column: 65, scope: !14122)
!14127 = !DILocation(line: 5210, column: 30, scope: !14122)
!14128 = !DILocation(line: 5210, column: 9, scope: !14122)
!14129 = !DILocation(line: 5208, column: 12, scope: !14111)
!14130 = !DILocation(line: 5211, column: 38, scope: !14122)
!14131 = !DILocation(line: 5211, column: 51, scope: !14122)
!14132 = !DILocation(line: 5212, column: 4, scope: !14122)
!14133 = !DILocation(line: 5212, column: 51, scope: !14122)
!14134 = !DILocation(line: 5213, column: 4, scope: !14122)
!14135 = !DILocation(line: 5213, column: 15, scope: !14122)
!14136 = !DILocation(line: 5211, column: 11, scope: !14122)
!14137 = !DILocation(line: 5211, column: 9, scope: !14122)
!14138 = !DILocation(line: 5211, column: 5, scope: !14122)
!14139 = !DILocation(line: 5218, column: 25, scope: !14140)
!14140 = distinct !DILexicalBlock(scope: !14122, file: !3, line: 5215, column: 5)
!14141 = !DILocation(line: 5218, column: 38, scope: !14140)
!14142 = !DILocation(line: 5218, column: 43, scope: !14140)
!14143 = !DILocation(line: 5218, column: 55, scope: !14140)
!14144 = !DILocation(line: 5218, column: 13, scope: !14140)
!14145 = !DILocation(line: 5218, column: 11, scope: !14140)
!14146 = !DILocation(line: 5219, column: 11, scope: !14147)
!14147 = distinct !DILexicalBlock(scope: !14140, file: !3, line: 5219, column: 11)
!14148 = !DILocation(line: 5219, column: 22, scope: !14147)
!14149 = !DILocation(line: 5219, column: 11, scope: !14140)
!14150 = !DILocation(line: 5220, column: 21, scope: !14147)
!14151 = !DILocation(line: 5220, column: 45, scope: !14147)
!14152 = !DILocation(line: 5220, column: 50, scope: !14147)
!14153 = !DILocation(line: 5220, column: 8, scope: !14147)
!14154 = !DILocation(line: 5220, column: 6, scope: !14147)
!14155 = !DILocation(line: 5220, column: 2, scope: !14147)
!14156 = !DILocation(line: 5224, column: 7, scope: !14157)
!14157 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 5224, column: 7)
!14158 = !DILocation(line: 5224, column: 22, scope: !14157)
!14159 = !DILocation(line: 5224, column: 19, scope: !14157)
!14160 = !DILocation(line: 5224, column: 7, scope: !13939)
!14161 = !DILocation(line: 5226, column: 21, scope: !14162)
!14162 = distinct !DILexicalBlock(scope: !14157, file: !3, line: 5225, column: 5)
!14163 = !DILocation(line: 5226, column: 29, scope: !14162)
!14164 = !DILocation(line: 5226, column: 7, scope: !14162)
!14165 = !DILocation(line: 5227, column: 14, scope: !14162)
!14166 = !DILocation(line: 5227, column: 7, scope: !14162)
!14167 = !DILocation(line: 5230, column: 12, scope: !14157)
!14168 = !DILocation(line: 5230, column: 5, scope: !14157)
!14169 = !DILocation(line: 5231, column: 1, scope: !13939)
