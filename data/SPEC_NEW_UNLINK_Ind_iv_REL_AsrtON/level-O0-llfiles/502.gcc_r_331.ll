; ModuleID = 'tree-vrp.c'
source_filename = "tree-vrp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.value_range_d = type { i32, %union.tree_node*, %union.tree_node*, %struct.bitmap_head_def* }
%struct.assert_locus_d = type { %struct.basic_block_def*, %struct.edge_def*, %struct.gimple_stmt_iterator, i32, %union.tree_node*, %union.tree_node*, %struct.assert_locus_d* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.VEC_switch_update_heap = type { %struct.VEC_switch_update_base }
%struct.VEC_switch_update_base = type { i32, i32, [1 x %struct.switch_update] }
%struct.switch_update = type { %union.gimple_statement_d*, %union.tree_node* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.tree_vec = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.prop_value_d = type { i32, %union.tree_node* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.pointer_set_t = type opaque

@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"UNDEFINED\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%s[\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"~\00", align 1
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"-INF(OVF)\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"-INF\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"+INF(OVF)\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"+INF\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"  EQUIVALENCES: { \00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.12 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"} (%u elements)\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"VARYING\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"INVALID RANGE\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@vr_value = internal global %struct.value_range_d** null, align 8, !dbg !0
@.str.17 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.18 = private unnamed_addr constant [31 x i8] c"Assertions to be inserted for \00", align 1
@asserts_for = internal global %struct.assert_locus_d** null, align 8, !dbg !3224
@.str.19 = private unnamed_addr constant [2 x i8] c"\09\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"\0A\09BB #%d\00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"\0A\09EDGE %d->%d\00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c"\0A\09PREDICATE: \00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@tree_code_name = external dso_local constant [0 x i8*], align 8
@.str.24 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.25 = private unnamed_addr constant [31 x i8] c"\0AASSERT_EXPRs to be inserted\0A\0A\00", align 1
@need_assert_for = internal global %struct.bitmap_head_def* null, align 8, !dbg !3222
@.str.26 = private unnamed_addr constant [4 x i8] c"vrp\00", align 1
@pass_vrp = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i32 0, i32 0), i8 ()* @gate_vrp, i32 ()* @execute_vrp, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 52, i32 32, i32 0, i32 0, i32 0, i32 2087 } }, align 8, !dbg !3194
@.str.27 = private unnamed_addr constant [11 x i8] c"tree-vrp.c\00", align 1
@.str.28 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.29 = private unnamed_addr constant [8 x i8] c"nonnull\00", align 1
@flag_wrapv = external dso_local global i32, align 4
@flag_trapv = external dso_local global i32, align 4
@flag_strict_overflow = external dso_local global i32, align 4
@tree_code_type = external dso_local constant [0 x i32], align 4
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@flag_tree_vrp = external dso_local global i32, align 4
@to_remove_edges = internal global %struct.VEC_edge_heap* null, align 8, !dbg !3228
@to_update_switch_stmts = internal global %struct.VEC_switch_update_heap* null, align 8, !dbg !3230
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.30 = private unnamed_addr constant [40 x i8] c"\0ASSA form after inserting ASSERT_EXPRs\0A\00", align 1
@live = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3226
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.31 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.32 = private unnamed_addr constant [19 x i8] c"Adding assert for \00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c" from \00", align 1
@.str.34 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@flag_delete_null_pointer_checks = external dso_local global i32, align 4
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@.str.35 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.36 = private unnamed_addr constant [43 x i8] c"Number of ASSERT_EXPR expressions inserted\00", align 1
@vr_phi_edge_counts = internal global i32* null, align 8, !dbg !3232
@.str.37 = private unnamed_addr constant [22 x i8] c"\0AVisiting statement:\0A\00", align 1
@.str.38 = private unnamed_addr constant [21 x i8] c"Found new range for \00", align 1
@compare_names.s_obstack = internal global %struct.bitmap_obstack* null, align 8, !dbg !3234
@compare_names.s_e1 = internal global %struct.bitmap_head_def* null, align 8, !dbg !3240
@compare_names.s_e2 = internal global %struct.bitmap_head_def* null, align 8, !dbg !3242
@.str.39 = private unnamed_addr constant [39 x i8] c"\0AVisiting conditional with predicate: \00", align 1
@.str.40 = private unnamed_addr constant [20 x i8] c"\0AWith known ranges\0A\00", align 1
@.str.41 = private unnamed_addr constant [84 x i8] c"\0AIgnoring predicate evaluation because it assumes that signed overflow is undefined\00", align 1
@.str.42 = private unnamed_addr constant [26 x i8] c"\0APredicate evaluates to: \00", align 1
@.str.43 = private unnamed_addr constant [12 x i8] c"DON'T KNOW\0A\00", align 1
@.str.44 = private unnamed_addr constant [42 x i8] c"\0AVisiting switch expression with operand \00", align 1
@.str.45 = private unnamed_addr constant [19 x i8] c" with known range \00", align 1
@.str.46 = private unnamed_addr constant [43 x i8] c"  not a single destination for this range\0A\00", align 1
@.str.47 = private unnamed_addr constant [21 x i8] c"  will take edge to \00", align 1
@.str.48 = private unnamed_addr constant [21 x i8] c"\0AVisiting PHI node: \00", align 1
@.str.49 = private unnamed_addr constant [43 x i8] c"\0A    Argument #%d (%d -> %d %sexecutable)\0A\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"not \00", align 1
@.str.51 = private unnamed_addr constant [10 x i8] c"\0A\09Value: \00", align 1
@.str.52 = private unnamed_addr constant [48 x i8] c": loop information indicates does not overflow\0A\00", align 1
@.str.53 = private unnamed_addr constant [27 x i8] c"\0AValue ranges after VRP:\0A\0A\00", align 1
@warn_array_bounds = external dso_local global i32, align 4
@.str.54 = private unnamed_addr constant [19 x i8] c"Folding predicate \00", align 1
@.str.55 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.56 = private unnamed_addr constant [81 x i8] c"assuming signed overflow does not occur when simplifying conditional to constant\00", align 1
@.str.57 = private unnamed_addr constant [69 x i8] c"assuming signed overflow does not occur when simplifying conditional\00", align 1
@warn_strict_overflow = external dso_local global i32, align 4
@input_location = external dso_local global i32, align 4
@.str.58 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@warn_type_limits = external dso_local global i32, align 4
@.str.59 = private unnamed_addr constant [58 x i8] c"comparison always false due to limited range of data type\00", align 1
@.str.60 = private unnamed_addr constant [57 x i8] c"comparison always true due to limited range of data type\00", align 1
@.str.61 = private unnamed_addr constant [76 x i8] c"assuming signed overflow does not occur when simplifying && or || to & or |\00", align 1
@.str.62 = private unnamed_addr constant [86 x i8] c"assuming signed overflow does not occur when simplifying ==, != or ! to identity or ^\00", align 1
@.str.63 = private unnamed_addr constant [92 x i8] c"assuming signed overflow does not occur when simplifying %</%> or %<%%%> to %<>>%> or %<&%>\00", align 1
@.str.64 = private unnamed_addr constant [88 x i8] c"assuming signed overflow does not occur when simplifying %<abs (X)%> to %<X%> or %<-X%>\00", align 1
@.str.65 = private unnamed_addr constant [23 x i8] c"Simplified relational \00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c" into \00", align 1
@.str.67 = private unnamed_addr constant [33 x i8] c"removing unreachable case label\0A\00", align 1
@.str.68 = private unnamed_addr constant [40 x i8] c"array subscript is outside array bounds\00", align 1
@.str.69 = private unnamed_addr constant [38 x i8] c"array subscript is above array bounds\00", align 1
@.str.70 = private unnamed_addr constant [38 x i8] c"array subscript is below array bounds\00", align 1
@stack = internal global %struct.VEC_tree_heap* null, align 8, !dbg !3244

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ssa_name_nonnegative_p(%union.tree_node* %t) #0 !dbg !3250 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  %vr = alloca %struct.value_range_d*, align 8
  %result = alloca i32, align 4
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3253, metadata !DIExpression()), !dbg !3254
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !3255, metadata !DIExpression()), !dbg !3256
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3257
  %call = call %struct.value_range_d* @get_value_range(%union.tree_node* %0), !dbg !3258
  store %struct.value_range_d* %call, %struct.value_range_d** %vr, align 8, !dbg !3256
  %1 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !3259
  %tobool = icmp ne %struct.value_range_d* %1, null, !dbg !3259
  br i1 %tobool, label %if.end, label %if.then, !dbg !3261

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3262
  br label %return, !dbg !3262

if.end:                                           ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !3263
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 0, !dbg !3265
  %3 = load i32, i32* %type, align 8, !dbg !3265
  %cmp = icmp eq i32 %3, 1, !dbg !3266
  br i1 %cmp, label %if.then1, label %if.end5, !dbg !3267

if.then1:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %result, metadata !3268, metadata !DIExpression()), !dbg !3270
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !3271
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %4, i32 0, i32 1, !dbg !3272
  %5 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !3272
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !3273
  %call2 = call i32 @compare_values(%union.tree_node* %5, %union.tree_node* %6), !dbg !3274
  store i32 %call2, i32* %result, align 4, !dbg !3270
  %7 = load i32, i32* %result, align 4, !dbg !3275
  %cmp3 = icmp eq i32 %7, 0, !dbg !3276
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !3277

lor.rhs:                                          ; preds = %if.then1
  %8 = load i32, i32* %result, align 4, !dbg !3278
  %cmp4 = icmp eq i32 %8, 1, !dbg !3279
  br label %lor.end, !dbg !3277

lor.end:                                          ; preds = %lor.rhs, %if.then1
  %9 = phi i1 [ true, %if.then1 ], [ %cmp4, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32, !dbg !3277
  %conv = trunc i32 %lor.ext to i8, !dbg !3280
  store i8 %conv, i8* %retval, align 1, !dbg !3281
  br label %return, !dbg !3281

if.end5:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3282
  br label %return, !dbg !3282

return:                                           ; preds = %if.end5, %lor.end, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !3283
  ret i8 %10, !dbg !3283
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.value_range_d* @get_value_range(%union.tree_node* %var) #0 !dbg !3284 {
entry:
  %retval = alloca %struct.value_range_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %vr = alloca %struct.value_range_d*, align 8
  %sym = alloca %union.tree_node*, align 8
  %ver = alloca i32, align 4
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3287, metadata !DIExpression()), !dbg !3288
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !3289, metadata !DIExpression()), !dbg !3290
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym, metadata !3291, metadata !DIExpression()), !dbg !3292
  call void @llvm.dbg.declare(metadata i32* %ver, metadata !3293, metadata !DIExpression()), !dbg !3294
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3295
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !3295
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3295
  %1 = load i32, i32* %version, align 8, !dbg !3295
  store i32 %1, i32* %ver, align 4, !dbg !3294
  %2 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !3296
  %tobool = icmp ne %struct.value_range_d** %2, null, !dbg !3296
  br i1 %tobool, label %if.end, label %if.then, !dbg !3298

if.then:                                          ; preds = %entry
  store %struct.value_range_d* null, %struct.value_range_d** %retval, align 8, !dbg !3299
  br label %return, !dbg !3299

if.end:                                           ; preds = %entry
  %3 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !3300
  %4 = load i32, i32* %ver, align 4, !dbg !3301
  %idxprom = zext i32 %4 to i64, !dbg !3300
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %3, i64 %idxprom, !dbg !3300
  %5 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx, align 8, !dbg !3300
  store %struct.value_range_d* %5, %struct.value_range_d** %vr, align 8, !dbg !3302
  %6 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !3303
  %tobool1 = icmp ne %struct.value_range_d* %6, null, !dbg !3303
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !3305

if.then2:                                         ; preds = %if.end
  %7 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !3306
  store %struct.value_range_d* %7, %struct.value_range_d** %retval, align 8, !dbg !3307
  br label %return, !dbg !3307

if.end3:                                          ; preds = %if.end
  %call = call i8* @xcalloc(i64 1, i64 32), !dbg !3308
  %8 = bitcast i8* %call to %struct.value_range_d*, !dbg !3308
  store %struct.value_range_d* %8, %struct.value_range_d** %vr, align 8, !dbg !3309
  %9 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !3310
  %10 = load i32, i32* %ver, align 4, !dbg !3311
  %idxprom4 = zext i32 %10 to i64, !dbg !3310
  %arrayidx5 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %9, i64 %idxprom4, !dbg !3310
  store %struct.value_range_d* %8, %struct.value_range_d** %arrayidx5, align 8, !dbg !3312
  %11 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !3313
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %11, i32 0, i32 3, !dbg !3314
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %equiv, align 8, !dbg !3315
  %12 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3316
  %ssa_name6 = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !3316
  %var7 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name6, i32 0, i32 1, !dbg !3316
  %13 = load %union.tree_node*, %union.tree_node** %var7, align 8, !dbg !3316
  store %union.tree_node* %13, %union.tree_node** %sym, align 8, !dbg !3317
  %14 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3318
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !3318
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !3318
  %bf.load = load i64, i64* %15, align 8, !dbg !3318
  %bf.lshr = lshr i64 %bf.load, 32, !dbg !3318
  %bf.clear = and i64 %bf.lshr, 1, !dbg !3318
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3318
  %tobool8 = icmp ne i32 %bf.cast, 0, !dbg !3318
  br i1 %tobool8, label %if.then9, label %if.end33, !dbg !3320

if.then9:                                         ; preds = %if.end3
  %16 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !3321
  %base10 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !3321
  %17 = bitcast %struct.tree_base* %base10 to i64*, !dbg !3321
  %bf.load11 = load i64, i64* %17, align 8, !dbg !3321
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !3321
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !3321
  %cmp = icmp eq i32 %bf.cast13, 34, !dbg !3324
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !3325

land.lhs.true:                                    ; preds = %if.then9
  %18 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !3326
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !3326
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3326
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3326
  %base14 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !3326
  %20 = bitcast %struct.tree_base* %base14 to i64*, !dbg !3326
  %bf.load15 = load i64, i64* %20, align 8, !dbg !3326
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !3326
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !3326
  %cmp18 = icmp eq i32 %bf.cast17, 10, !dbg !3326
  br i1 %cmp18, label %land.lhs.true26, label %lor.lhs.false, !dbg !3326

lor.lhs.false:                                    ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !3326
  %common19 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !3326
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !3326
  %22 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !3326
  %base21 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !3326
  %23 = bitcast %struct.tree_base* %base21 to i64*, !dbg !3326
  %bf.load22 = load i64, i64* %23, align 8, !dbg !3326
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !3326
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !3326
  %cmp25 = icmp eq i32 %bf.cast24, 12, !dbg !3326
  br i1 %cmp25, label %land.lhs.true26, label %if.else, !dbg !3327

land.lhs.true26:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %24 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !3328
  %call27 = call zeroext i8 @nonnull_arg_p(%union.tree_node* %24), !dbg !3329
  %conv = zext i8 %call27 to i32, !dbg !3329
  %tobool28 = icmp ne i32 %conv, 0, !dbg !3329
  br i1 %tobool28, label %if.then29, label %if.else, !dbg !3330

if.then29:                                        ; preds = %land.lhs.true26
  %25 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !3331
  %26 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !3332
  %common30 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !3332
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !3332
  %27 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !3332
  call void @set_value_range_to_nonnull(%struct.value_range_d* %25, %union.tree_node* %27), !dbg !3333
  br label %if.end32, !dbg !3333

if.else:                                          ; preds = %land.lhs.true26, %lor.lhs.false, %if.then9
  %28 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !3334
  call void @set_value_range_to_varying(%struct.value_range_d* %28), !dbg !3335
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.then29
  br label %if.end33, !dbg !3336

if.end33:                                         ; preds = %if.end32, %if.end3
  %29 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !3337
  store %struct.value_range_d* %29, %struct.value_range_d** %retval, align 8, !dbg !3338
  br label %return, !dbg !3338

return:                                           ; preds = %if.end33, %if.then2, %if.then
  %30 = load %struct.value_range_d*, %struct.value_range_d** %retval, align 8, !dbg !3339
  ret %struct.value_range_d* %30, !dbg !3339
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare_values(%union.tree_node* %val1, %union.tree_node* %val2) #0 !dbg !3340 {
entry:
  %val1.addr = alloca %union.tree_node*, align 8
  %val2.addr = alloca %union.tree_node*, align 8
  %sop = alloca i8, align 1
  %ret = alloca i32, align 4
  store %union.tree_node* %val1, %union.tree_node** %val1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val1.addr, metadata !3343, metadata !DIExpression()), !dbg !3344
  store %union.tree_node* %val2, %union.tree_node** %val2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val2.addr, metadata !3345, metadata !DIExpression()), !dbg !3346
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !3347, metadata !DIExpression()), !dbg !3348
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !3349, metadata !DIExpression()), !dbg !3350
  store i8 0, i8* %sop, align 1, !dbg !3351
  %0 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !3352
  %1 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !3353
  %call = call i32 @compare_values_warnv(%union.tree_node* %0, %union.tree_node* %1, i8* %sop), !dbg !3354
  store i32 %call, i32* %ret, align 4, !dbg !3355
  %2 = load i8, i8* %sop, align 1, !dbg !3356
  %conv = zext i8 %2 to i32, !dbg !3356
  %tobool = icmp ne i32 %conv, 0, !dbg !3356
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3358

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !3359
  %call1 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %3), !dbg !3360
  %tobool2 = icmp ne i8 %call1, 0, !dbg !3360
  br i1 %tobool2, label %lor.lhs.false, label %if.then, !dbg !3361

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !3362
  %call3 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %4), !dbg !3363
  %tobool4 = icmp ne i8 %call3, 0, !dbg !3363
  br i1 %tobool4, label %if.end, label %if.then, !dbg !3364

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 -2, i32* %ret, align 4, !dbg !3365
  br label %if.end, !dbg !3366

if.end:                                           ; preds = %if.then, %lor.lhs.false, %entry
  %5 = load i32, i32* %ret, align 4, !dbg !3367
  ret i32 %5, !dbg !3368
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_value_range(%struct._IO_FILE* %file, %struct.value_range_d* %vr) #0 !dbg !3369 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %vr.addr = alloca %struct.value_range_d*, align 8
  %type10 = alloca %union.tree_node*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3423, metadata !DIExpression()), !dbg !3424
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !3425, metadata !DIExpression()), !dbg !3426
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3427
  %cmp = icmp eq %struct.value_range_d* %0, null, !dbg !3429
  br i1 %cmp, label %if.then, label %if.else, !dbg !3430

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3431
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)), !dbg !3432
  br label %if.end112, !dbg !3432

if.else:                                          ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3433
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 0, !dbg !3435
  %3 = load i32, i32* %type, align 8, !dbg !3435
  %cmp1 = icmp eq i32 %3, 0, !dbg !3436
  br i1 %cmp1, label %if.then2, label %if.else4, !dbg !3437

if.then2:                                         ; preds = %if.else
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3438
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)), !dbg !3439
  br label %if.end111, !dbg !3439

if.else4:                                         ; preds = %if.else
  %5 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3440
  %type5 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %5, i32 0, i32 0, !dbg !3442
  %6 = load i32, i32* %type5, align 8, !dbg !3442
  %cmp6 = icmp eq i32 %6, 1, !dbg !3443
  br i1 %cmp6, label %if.then9, label %lor.lhs.false, !dbg !3444

lor.lhs.false:                                    ; preds = %if.else4
  %7 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3445
  %type7 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %7, i32 0, i32 0, !dbg !3446
  %8 = load i32, i32* %type7, align 8, !dbg !3446
  %cmp8 = icmp eq i32 %8, 2, !dbg !3447
  br i1 %cmp8, label %if.then9, label %if.else101, !dbg !3448

if.then9:                                         ; preds = %lor.lhs.false, %if.else4
  call void @llvm.dbg.declare(metadata %union.tree_node** %type10, metadata !3449, metadata !DIExpression()), !dbg !3451
  %9 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3452
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %9, i32 0, i32 1, !dbg !3452
  %10 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !3452
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !3452
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3452
  %11 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !3452
  store %union.tree_node* %11, %union.tree_node** %type10, align 8, !dbg !3451
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3453
  %13 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3454
  %type12 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %13, i32 0, i32 0, !dbg !3455
  %14 = load i32, i32* %type12, align 8, !dbg !3455
  %cmp13 = icmp eq i32 %14, 2, !dbg !3456
  %15 = zext i1 %cmp13 to i64, !dbg !3457
  %cond = select i1 %cmp13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), !dbg !3457
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %cond), !dbg !3458
  %16 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3459
  %min15 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %16, i32 0, i32 1, !dbg !3461
  %17 = load %union.tree_node*, %union.tree_node** %min15, align 8, !dbg !3461
  %call16 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %17), !dbg !3462
  %tobool = icmp ne i8 %call16, 0, !dbg !3462
  br i1 %tobool, label %if.then17, label %if.else19, !dbg !3463

if.then17:                                        ; preds = %if.then9
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3464
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0)), !dbg !3465
  br label %if.end46, !dbg !3465

if.else19:                                        ; preds = %if.then9
  %19 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !3466
  %base = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !3466
  %20 = bitcast %struct.tree_base* %base to i64*, !dbg !3466
  %bf.load = load i64, i64* %20, align 8, !dbg !3466
  %bf.clear = and i64 %bf.load, 65535, !dbg !3466
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3466
  %cmp20 = icmp eq i32 %bf.cast, 6, !dbg !3466
  br i1 %cmp20, label %land.lhs.true, label %lor.lhs.false21, !dbg !3466

lor.lhs.false21:                                  ; preds = %if.else19
  %21 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !3466
  %base22 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !3466
  %22 = bitcast %struct.tree_base* %base22 to i64*, !dbg !3466
  %bf.load23 = load i64, i64* %22, align 8, !dbg !3466
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !3466
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !3466
  %cmp26 = icmp eq i32 %bf.cast25, 7, !dbg !3466
  br i1 %cmp26, label %land.lhs.true, label %lor.lhs.false27, !dbg !3466

lor.lhs.false27:                                  ; preds = %lor.lhs.false21
  %23 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !3466
  %base28 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !3466
  %24 = bitcast %struct.tree_base* %base28 to i64*, !dbg !3466
  %bf.load29 = load i64, i64* %24, align 8, !dbg !3466
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !3466
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !3466
  %cmp32 = icmp eq i32 %bf.cast31, 8, !dbg !3466
  br i1 %cmp32, label %land.lhs.true, label %if.else44, !dbg !3468

land.lhs.true:                                    ; preds = %lor.lhs.false27, %lor.lhs.false21, %if.else19
  %25 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !3469
  %base33 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !3469
  %26 = bitcast %struct.tree_base* %base33 to i64*, !dbg !3469
  %bf.load34 = load i64, i64* %26, align 8, !dbg !3469
  %bf.lshr = lshr i64 %bf.load34, 21, !dbg !3469
  %bf.clear35 = and i64 %bf.lshr, 1, !dbg !3469
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !3469
  %tobool37 = icmp ne i32 %bf.cast36, 0, !dbg !3469
  br i1 %tobool37, label %if.else44, label %land.lhs.true38, !dbg !3470

land.lhs.true38:                                  ; preds = %land.lhs.true
  %27 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3471
  %min39 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %27, i32 0, i32 1, !dbg !3472
  %28 = load %union.tree_node*, %union.tree_node** %min39, align 8, !dbg !3472
  %call40 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %28), !dbg !3473
  %conv = zext i8 %call40 to i32, !dbg !3473
  %tobool41 = icmp ne i32 %conv, 0, !dbg !3473
  br i1 %tobool41, label %if.then42, label %if.else44, !dbg !3474

if.then42:                                        ; preds = %land.lhs.true38
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3475
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)), !dbg !3476
  br label %if.end, !dbg !3476

if.else44:                                        ; preds = %land.lhs.true38, %land.lhs.true, %lor.lhs.false27
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3477
  %31 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3478
  %min45 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %31, i32 0, i32 1, !dbg !3479
  %32 = load %union.tree_node*, %union.tree_node** %min45, align 8, !dbg !3479
  call void @print_generic_expr(%struct._IO_FILE* %30, %union.tree_node* %32, i32 0), !dbg !3480
  br label %if.end

if.end:                                           ; preds = %if.else44, %if.then42
  br label %if.end46

if.end46:                                         ; preds = %if.end, %if.then17
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3481
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0)), !dbg !3482
  %34 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3483
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %34, i32 0, i32 2, !dbg !3485
  %35 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !3485
  %call48 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %35), !dbg !3486
  %tobool49 = icmp ne i8 %call48, 0, !dbg !3486
  br i1 %tobool49, label %if.then50, label %if.else52, !dbg !3487

if.then50:                                        ; preds = %if.end46
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3488
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0)), !dbg !3489
  br label %if.end83, !dbg !3489

if.else52:                                        ; preds = %if.end46
  %37 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !3490
  %base53 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !3490
  %38 = bitcast %struct.tree_base* %base53 to i64*, !dbg !3490
  %bf.load54 = load i64, i64* %38, align 8, !dbg !3490
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !3490
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !3490
  %cmp57 = icmp eq i32 %bf.cast56, 6, !dbg !3490
  br i1 %cmp57, label %land.lhs.true73, label %lor.lhs.false59, !dbg !3490

lor.lhs.false59:                                  ; preds = %if.else52
  %39 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !3490
  %base60 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !3490
  %40 = bitcast %struct.tree_base* %base60 to i64*, !dbg !3490
  %bf.load61 = load i64, i64* %40, align 8, !dbg !3490
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !3490
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !3490
  %cmp64 = icmp eq i32 %bf.cast63, 7, !dbg !3490
  br i1 %cmp64, label %land.lhs.true73, label %lor.lhs.false66, !dbg !3490

lor.lhs.false66:                                  ; preds = %lor.lhs.false59
  %41 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !3490
  %base67 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !3490
  %42 = bitcast %struct.tree_base* %base67 to i64*, !dbg !3490
  %bf.load68 = load i64, i64* %42, align 8, !dbg !3490
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !3490
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !3490
  %cmp71 = icmp eq i32 %bf.cast70, 8, !dbg !3490
  br i1 %cmp71, label %land.lhs.true73, label %if.else80, !dbg !3492

land.lhs.true73:                                  ; preds = %lor.lhs.false66, %lor.lhs.false59, %if.else52
  %43 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3493
  %max74 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %43, i32 0, i32 2, !dbg !3494
  %44 = load %union.tree_node*, %union.tree_node** %max74, align 8, !dbg !3494
  %call75 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %44), !dbg !3495
  %conv76 = zext i8 %call75 to i32, !dbg !3495
  %tobool77 = icmp ne i32 %conv76, 0, !dbg !3495
  br i1 %tobool77, label %if.then78, label %if.else80, !dbg !3496

if.then78:                                        ; preds = %land.lhs.true73
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3497
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0)), !dbg !3498
  br label %if.end82, !dbg !3498

if.else80:                                        ; preds = %land.lhs.true73, %lor.lhs.false66
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3499
  %47 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3500
  %max81 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %47, i32 0, i32 2, !dbg !3501
  %48 = load %union.tree_node*, %union.tree_node** %max81, align 8, !dbg !3501
  call void @print_generic_expr(%struct._IO_FILE* %46, %union.tree_node* %48, i32 0), !dbg !3502
  br label %if.end82

if.end82:                                         ; preds = %if.else80, %if.then78
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then50
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3503
  %call84 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !3504
  %50 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3505
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %50, i32 0, i32 3, !dbg !3507
  %51 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !3507
  %tobool85 = icmp ne %struct.bitmap_head_def* %51, null, !dbg !3505
  br i1 %tobool85, label %if.then86, label %if.end100, !dbg !3508

if.then86:                                        ; preds = %if.end83
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3509, metadata !DIExpression()), !dbg !3518
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3519, metadata !DIExpression()), !dbg !3520
  call void @llvm.dbg.declare(metadata i32* %c, metadata !3521, metadata !DIExpression()), !dbg !3522
  store i32 0, i32* %c, align 4, !dbg !3522
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3523
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0)), !dbg !3524
  %53 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3525
  %equiv88 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %53, i32 0, i32 3, !dbg !3525
  %54 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv88, align 8, !dbg !3525
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %54, i32 0, i32* %i), !dbg !3525
  br label %for.cond, !dbg !3525

for.cond:                                         ; preds = %for.inc, %if.then86
  %call89 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3527
  %tobool90 = icmp ne i8 %call89, 0, !dbg !3525
  br i1 %tobool90, label %for.body, label %for.end, !dbg !3525

for.body:                                         ; preds = %for.cond
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3529
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3531
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !3531
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3531
  %57 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3531
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %57, i32 0, i32 2, !dbg !3531
  %58 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3531
  %tobool91 = icmp ne %struct.VEC_tree_gc* %58, null, !dbg !3531
  br i1 %tobool91, label %cond.true, label %cond.false, !dbg !3531

cond.true:                                        ; preds = %for.body
  %59 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3531
  %add.ptr92 = getelementptr inbounds %struct.function, %struct.function* %59, i64 0, !dbg !3531
  %gimple_df93 = getelementptr inbounds %struct.function, %struct.function* %add.ptr92, i32 0, i32 3, !dbg !3531
  %60 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df93, align 8, !dbg !3531
  %ssa_names94 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %60, i32 0, i32 2, !dbg !3531
  %61 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names94, align 8, !dbg !3531
  %base95 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %61, i32 0, i32 0, !dbg !3531
  br label %cond.end, !dbg !3531

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !3531

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond96 = phi %struct.VEC_tree_base* [ %base95, %cond.true ], [ null, %cond.false ], !dbg !3531
  %62 = load i32, i32* %i, align 4, !dbg !3531
  %call97 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond96, i32 %62), !dbg !3531
  call void @print_generic_expr(%struct._IO_FILE* %55, %union.tree_node* %call97, i32 0), !dbg !3532
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3533
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !3534
  %64 = load i32, i32* %c, align 4, !dbg !3535
  %inc = add i32 %64, 1, !dbg !3535
  store i32 %inc, i32* %c, align 4, !dbg !3535
  br label %for.inc, !dbg !3536

for.inc:                                          ; preds = %cond.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3527
  br label %for.cond, !dbg !3527, !llvm.loop !3537

for.end:                                          ; preds = %for.cond
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3539
  %66 = load i32, i32* %c, align 4, !dbg !3540
  %call99 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i64 0, i64 0), i32 %66), !dbg !3541
  br label %if.end100, !dbg !3542

if.end100:                                        ; preds = %for.end, %if.end83
  br label %if.end110, !dbg !3543

if.else101:                                       ; preds = %lor.lhs.false
  %67 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3544
  %type102 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %67, i32 0, i32 0, !dbg !3546
  %68 = load i32, i32* %type102, align 8, !dbg !3546
  %cmp103 = icmp eq i32 %68, 3, !dbg !3547
  br i1 %cmp103, label %if.then105, label %if.else107, !dbg !3548

if.then105:                                       ; preds = %if.else101
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3549
  %call106 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %69, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i64 0, i64 0)), !dbg !3550
  br label %if.end109, !dbg !3550

if.else107:                                       ; preds = %if.else101
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3551
  %call108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0)), !dbg !3552
  br label %if.end109

if.end109:                                        ; preds = %if.else107, %if.then105
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.end100
  br label %if.end111

if.end111:                                        ; preds = %if.end110, %if.then2
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %if.then
  ret void, !dbg !3553
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %val) #0 !dbg !3554 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !3555, metadata !DIExpression()), !dbg !3556
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3557
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3557
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3557
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3557
  %call = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %1), !dbg !3558
  %conv = zext i8 %call to i32, !dbg !3558
  %tobool = icmp ne i32 %conv, 0, !dbg !3558
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !3559

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3560
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3560
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3560
  %bf.load = load i64, i64* %3, align 8, !dbg !3560
  %bf.clear = and i64 %bf.load, 65535, !dbg !3560
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3560
  %idxprom = sext i32 %bf.cast to i64, !dbg !3560
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3560
  %4 = load i32, i32* %arrayidx, align 4, !dbg !3560
  %cmp = icmp eq i32 %4, 1, !dbg !3560
  br i1 %cmp, label %land.lhs.true2, label %land.end, !dbg !3561

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3562
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !3562
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !3562
  %bf.load4 = load i64, i64* %6, align 8, !dbg !3562
  %bf.lshr = lshr i64 %bf.load4, 27, !dbg !3562
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !3562
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !3562
  %tobool7 = icmp ne i32 %bf.cast6, 0, !dbg !3562
  br i1 %tobool7, label %land.rhs, label %land.end, !dbg !3563

land.rhs:                                         ; preds = %land.lhs.true2
  %7 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3564
  %call8 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %7), !dbg !3565
  %conv9 = zext i8 %call8 to i32, !dbg !3565
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !3563
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true2, %land.lhs.true, %entry
  %8 = phi i1 [ false, %land.lhs.true2 ], [ false, %land.lhs.true ], [ false, %entry ], [ %tobool10, %land.rhs ], !dbg !3566
  %land.ext = zext i1 %8 to i32, !dbg !3563
  %conv11 = trunc i32 %land.ext to i8, !dbg !3567
  ret i8 %conv11, !dbg !3568
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vrp_val_is_min(%union.tree_node* %val) #0 !dbg !3569 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  %type_min = alloca %union.tree_node*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !3570, metadata !DIExpression()), !dbg !3571
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_min, metadata !3572, metadata !DIExpression()), !dbg !3573
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3574
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3574
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3574
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3574
  %call = call %union.tree_node* @vrp_val_min(%union.tree_node* %1), !dbg !3575
  store %union.tree_node* %call, %union.tree_node** %type_min, align 8, !dbg !3573
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3576
  %3 = load %union.tree_node*, %union.tree_node** %type_min, align 8, !dbg !3577
  %cmp = icmp eq %union.tree_node* %2, %3, !dbg !3578
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !3579

lor.rhs:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %type_min, align 8, !dbg !3580
  %cmp1 = icmp ne %union.tree_node* %4, null, !dbg !3581
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !3582

land.rhs:                                         ; preds = %lor.rhs
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3583
  %6 = load %union.tree_node*, %union.tree_node** %type_min, align 8, !dbg !3584
  %call2 = call i32 @operand_equal_p(%union.tree_node* %5, %union.tree_node* %6, i32 0), !dbg !3585
  %tobool = icmp ne i32 %call2, 0, !dbg !3582
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %7 = phi i1 [ false, %lor.rhs ], [ %tobool, %land.rhs ], !dbg !3586
  br label %lor.end, !dbg !3579

lor.end:                                          ; preds = %land.end, %entry
  %8 = phi i1 [ true, %entry ], [ %7, %land.end ]
  %lor.ext = zext i1 %8 to i32, !dbg !3579
  %conv = trunc i32 %lor.ext to i8, !dbg !3587
  ret i8 %conv, !dbg !3588
}

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %val) #0 !dbg !3589 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !3590, metadata !DIExpression()), !dbg !3591
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3592
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3592
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3592
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3592
  %call = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %1), !dbg !3593
  %conv = zext i8 %call to i32, !dbg !3593
  %tobool = icmp ne i32 %conv, 0, !dbg !3593
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !3594

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3595
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3595
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3595
  %bf.load = load i64, i64* %3, align 8, !dbg !3595
  %bf.clear = and i64 %bf.load, 65535, !dbg !3595
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3595
  %idxprom = sext i32 %bf.cast to i64, !dbg !3595
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3595
  %4 = load i32, i32* %arrayidx, align 4, !dbg !3595
  %cmp = icmp eq i32 %4, 1, !dbg !3595
  br i1 %cmp, label %land.lhs.true2, label %land.end, !dbg !3596

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3597
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !3597
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !3597
  %bf.load4 = load i64, i64* %6, align 8, !dbg !3597
  %bf.lshr = lshr i64 %bf.load4, 27, !dbg !3597
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !3597
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !3597
  %tobool7 = icmp ne i32 %bf.cast6, 0, !dbg !3597
  br i1 %tobool7, label %land.rhs, label %land.end, !dbg !3598

land.rhs:                                         ; preds = %land.lhs.true2
  %7 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3599
  %call8 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %7), !dbg !3600
  %conv9 = zext i8 %call8 to i32, !dbg !3600
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !3598
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true2, %land.lhs.true, %entry
  %8 = phi i1 [ false, %land.lhs.true2 ], [ false, %land.lhs.true ], [ false, %entry ], [ %tobool10, %land.rhs ], !dbg !3601
  %land.ext = zext i1 %8 to i32, !dbg !3598
  %conv11 = trunc i32 %land.ext to i8, !dbg !3602
  ret i8 %conv11, !dbg !3603
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vrp_val_is_max(%union.tree_node* %val) #0 !dbg !3604 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  %type_max = alloca %union.tree_node*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !3605, metadata !DIExpression()), !dbg !3606
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_max, metadata !3607, metadata !DIExpression()), !dbg !3608
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3609
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3609
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3609
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3609
  %call = call %union.tree_node* @vrp_val_max(%union.tree_node* %1), !dbg !3610
  store %union.tree_node* %call, %union.tree_node** %type_max, align 8, !dbg !3608
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3611
  %3 = load %union.tree_node*, %union.tree_node** %type_max, align 8, !dbg !3612
  %cmp = icmp eq %union.tree_node* %2, %3, !dbg !3613
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !3614

lor.rhs:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %type_max, align 8, !dbg !3615
  %cmp1 = icmp ne %union.tree_node* %4, null, !dbg !3616
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !3617

land.rhs:                                         ; preds = %lor.rhs
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3618
  %6 = load %union.tree_node*, %union.tree_node** %type_max, align 8, !dbg !3619
  %call2 = call i32 @operand_equal_p(%union.tree_node* %5, %union.tree_node* %6, i32 0), !dbg !3620
  %tobool = icmp ne i32 %call2, 0, !dbg !3617
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %7 = phi i1 [ false, %lor.rhs ], [ %tobool, %land.rhs ], !dbg !3621
  br label %lor.end, !dbg !3614

lor.end:                                          ; preds = %land.end, %entry
  %8 = phi i1 [ true, %entry ], [ %7, %land.end ]
  %lor.ext = zext i1 %8 to i32, !dbg !3614
  %conv = trunc i32 %lor.ext to i8, !dbg !3622
  ret i8 %conv, !dbg !3623
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !3624 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3632, metadata !DIExpression()), !dbg !3633
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !3634, metadata !DIExpression()), !dbg !3635
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !3636, metadata !DIExpression()), !dbg !3637
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3638, metadata !DIExpression()), !dbg !3639
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !3640
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !3641
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !3641
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3642
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !3643
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !3644
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3645
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !3646
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !3647
  br label %while.body, !dbg !3648

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3649
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !3652
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !3652
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !3649
  br i1 %tobool, label %if.end, label %if.then, !dbg !3653

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3654
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !3656
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !3657
  br label %while.end, !dbg !3658

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3659
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !3661
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !3661
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !3662
  %9 = load i32, i32* %indx, align 8, !dbg !3662
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !3663
  %div = udiv i32 %10, 128, !dbg !3664
  %cmp = icmp uge i32 %9, %div, !dbg !3665
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !3666

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !3667

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3668
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !3669
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !3669
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !3670
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !3670
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3671
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !3672
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !3673
  br label %while.body, !dbg !3648, !llvm.loop !3674

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3676
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !3678
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !3678
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !3679
  %17 = load i32, i32* %indx9, align 8, !dbg !3679
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !3680
  %div10 = udiv i32 %18, 128, !dbg !3681
  %cmp11 = icmp ne i32 %17, %div10, !dbg !3682
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !3683

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3684
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !3685
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !3685
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !3686
  %21 = load i32, i32* %indx14, align 8, !dbg !3686
  %mul = mul i32 %21, 128, !dbg !3687
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !3688
  br label %if.end15, !dbg !3689

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !3690
  %div16 = udiv i32 %22, 64, !dbg !3691
  %rem = urem i32 %div16, 2, !dbg !3692
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3693
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !3694
  store i32 %rem, i32* %word_no, align 8, !dbg !3695
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3696
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !3697
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !3697
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !3698
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3699
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !3700
  %27 = load i32, i32* %word_no18, align 8, !dbg !3700
  %idxprom = zext i32 %27 to i64, !dbg !3696
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !3696
  %28 = load i64, i64* %arrayidx, align 8, !dbg !3696
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3701
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !3702
  store i64 %28, i64* %bits19, align 8, !dbg !3703
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !3704
  %rem20 = urem i32 %30, 64, !dbg !3705
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3706
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !3707
  %32 = load i64, i64* %bits21, align 8, !dbg !3708
  %sh_prom = zext i32 %rem20 to i64, !dbg !3708
  %shr = lshr i64 %32, %sh_prom, !dbg !3708
  store i64 %shr, i64* %bits21, align 8, !dbg !3708
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3709
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !3710
  %34 = load i64, i64* %bits22, align 8, !dbg !3710
  %tobool23 = icmp ne i64 %34, 0, !dbg !3711
  %lnot = xor i1 %tobool23, true, !dbg !3711
  %lnot.ext = zext i1 %lnot to i32, !dbg !3711
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !3712
  %add = add i32 %35, %lnot.ext, !dbg !3712
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !3712
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !3713
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !3714
  store i32 %36, i32* %37, align 4, !dbg !3715
  ret void, !dbg !3716
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !3717 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3720, metadata !DIExpression()), !dbg !3721
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3722, metadata !DIExpression()), !dbg !3723
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3724
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !3726
  %1 = load i64, i64* %bits, align 8, !dbg !3726
  %tobool = icmp ne i64 %1, 0, !dbg !3724
  br i1 %tobool, label %if.then, label %if.end, !dbg !3727

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !3728

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !3729), !dbg !3731
  br label %while.cond, !dbg !3732

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3733
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !3734
  %3 = load i64, i64* %bits1, align 8, !dbg !3734
  %and = and i64 %3, 1, !dbg !3735
  %tobool2 = icmp ne i64 %and, 0, !dbg !3736
  %lnot = xor i1 %tobool2, true, !dbg !3736
  br i1 %lnot, label %while.body, label %while.end, !dbg !3732

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3737
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !3739
  %5 = load i64, i64* %bits3, align 8, !dbg !3740
  %shr = lshr i64 %5, 1, !dbg !3740
  store i64 %shr, i64* %bits3, align 8, !dbg !3740
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !3741
  %7 = load i32, i32* %6, align 4, !dbg !3742
  %add = add i32 %7, 1, !dbg !3742
  store i32 %add, i32* %6, align 4, !dbg !3742
  br label %while.cond, !dbg !3732, !llvm.loop !3743

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !3745
  br label %return, !dbg !3745

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !3746
  %9 = load i32, i32* %8, align 4, !dbg !3747
  %add4 = add i32 %9, 64, !dbg !3748
  %sub = sub i32 %add4, 1, !dbg !3749
  %div = udiv i32 %sub, 64, !dbg !3750
  %mul = mul i32 %div, 64, !dbg !3751
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !3752
  store i32 %mul, i32* %10, align 4, !dbg !3753
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3754
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !3755
  %12 = load i32, i32* %word_no, align 8, !dbg !3756
  %inc = add i32 %12, 1, !dbg !3756
  store i32 %inc, i32* %word_no, align 8, !dbg !3756
  br label %while.body6, !dbg !3757

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !3758

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3760
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !3761
  %14 = load i32, i32* %word_no8, align 8, !dbg !3761
  %cmp = icmp ne i32 %14, 2, !dbg !3762
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !3758

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3763
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !3765
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !3765
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !3766
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3767
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !3768
  %18 = load i32, i32* %word_no11, align 8, !dbg !3768
  %idxprom = zext i32 %18 to i64, !dbg !3763
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !3763
  %19 = load i64, i64* %arrayidx, align 8, !dbg !3763
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3769
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !3770
  store i64 %19, i64* %bits12, align 8, !dbg !3771
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3772
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !3774
  %22 = load i64, i64* %bits13, align 8, !dbg !3774
  %tobool14 = icmp ne i64 %22, 0, !dbg !3772
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !3775

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !3776

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !3777
  %24 = load i32, i32* %23, align 4, !dbg !3778
  %add17 = add i32 %24, 64, !dbg !3778
  store i32 %add17, i32* %23, align 4, !dbg !3778
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3779
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !3780
  %26 = load i32, i32* %word_no18, align 8, !dbg !3781
  %inc19 = add i32 %26, 1, !dbg !3781
  store i32 %inc19, i32* %word_no18, align 8, !dbg !3781
  br label %while.cond7, !dbg !3758, !llvm.loop !3782

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3784
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !3785
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !3785
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !3786
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !3786
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3787
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !3788
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !3789
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3790
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !3792
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !3792
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !3790
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !3793

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !3794
  br label %return, !dbg !3794

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3795
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !3796
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !3796
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !3797
  %35 = load i32, i32* %indx, align 8, !dbg !3797
  %mul28 = mul i32 %35, 128, !dbg !3798
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !3799
  store i32 %mul28, i32* %36, align 4, !dbg !3800
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3801
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !3802
  store i32 0, i32* %word_no29, align 8, !dbg !3803
  br label %while.body6, !dbg !3757, !llvm.loop !3804

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !3806
  ret i8 %38, !dbg !3806
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !3807 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3812, metadata !DIExpression()), !dbg !3813
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3814, metadata !DIExpression()), !dbg !3813
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3813
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !3813
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3813

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3813
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3813
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !3813
  %3 = load i32, i32* %num, align 8, !dbg !3813
  %cmp = icmp ult i32 %1, %3, !dbg !3813
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3815
  %land.ext = zext i1 %4 to i32, !dbg !3813
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3813
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !3813
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3813
  %idxprom = zext i32 %6 to i64, !dbg !3813
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !3813
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3813
  ret %union.tree_node* %7, !dbg !3813
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !3816 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3819, metadata !DIExpression()), !dbg !3820
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3821, metadata !DIExpression()), !dbg !3822
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3823
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !3824
  %1 = load i64, i64* %bits, align 8, !dbg !3825
  %shr = lshr i64 %1, 1, !dbg !3825
  store i64 %shr, i64* %bits, align 8, !dbg !3825
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !3826
  %3 = load i32, i32* %2, align 4, !dbg !3827
  %add = add i32 %3, 1, !dbg !3827
  store i32 %add, i32* %2, align 4, !dbg !3827
  ret void, !dbg !3828
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_value_range(%struct.value_range_d* %vr) #0 !dbg !3829 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !3832, metadata !DIExpression()), !dbg !3833
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3834
  %1 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !3835
  call void @dump_value_range(%struct._IO_FILE* %0, %struct.value_range_d* %1), !dbg !3836
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3837
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !3838
  ret void, !dbg !3839
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_all_value_ranges(%struct._IO_FILE* %file) #0 !dbg !3840 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca i64, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3843, metadata !DIExpression()), !dbg !3844
  call void @llvm.dbg.declare(metadata i64* %i, metadata !3845, metadata !DIExpression()), !dbg !3846
  store i64 0, i64* %i, align 8, !dbg !3847
  br label %for.cond, !dbg !3849

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !3850
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3852
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3852
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3852
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3852
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %2, i32 0, i32 2, !dbg !3852
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3852
  %tobool = icmp ne %struct.VEC_tree_gc* %3, null, !dbg !3852
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3852

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3852
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3852
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !3852
  %5 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !3852
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %5, i32 0, i32 2, !dbg !3852
  %6 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !3852
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %6, i32 0, i32 0, !dbg !3852
  br label %cond.end, !dbg !3852

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3852

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3852
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3852
  %conv = zext i32 %call to i64, !dbg !3852
  %cmp = icmp ult i64 %0, %conv, !dbg !3853
  br i1 %cmp, label %for.body, label %for.end, !dbg !3854

for.body:                                         ; preds = %cond.end
  %7 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !3855
  %8 = load i64, i64* %i, align 8, !dbg !3858
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %7, i64 %8, !dbg !3855
  %9 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx, align 8, !dbg !3855
  %tobool5 = icmp ne %struct.value_range_d* %9, null, !dbg !3855
  br i1 %tobool5, label %if.then, label %if.end, !dbg !3859

if.then:                                          ; preds = %for.body
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3860
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3862
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !3862
  %gimple_df7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 3, !dbg !3862
  %12 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df7, align 8, !dbg !3862
  %ssa_names8 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %12, i32 0, i32 2, !dbg !3862
  %13 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names8, align 8, !dbg !3862
  %tobool9 = icmp ne %struct.VEC_tree_gc* %13, null, !dbg !3862
  br i1 %tobool9, label %cond.true10, label %cond.false15, !dbg !3862

cond.true10:                                      ; preds = %if.then
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3862
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !3862
  %gimple_df12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 3, !dbg !3862
  %15 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df12, align 8, !dbg !3862
  %ssa_names13 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %15, i32 0, i32 2, !dbg !3862
  %16 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names13, align 8, !dbg !3862
  %base14 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %16, i32 0, i32 0, !dbg !3862
  br label %cond.end16, !dbg !3862

cond.false15:                                     ; preds = %if.then
  br label %cond.end16, !dbg !3862

cond.end16:                                       ; preds = %cond.false15, %cond.true10
  %cond17 = phi %struct.VEC_tree_base* [ %base14, %cond.true10 ], [ null, %cond.false15 ], !dbg !3862
  %17 = load i64, i64* %i, align 8, !dbg !3862
  %conv18 = trunc i64 %17 to i32, !dbg !3862
  %call19 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond17, i32 %conv18), !dbg !3862
  call void @print_generic_expr(%struct._IO_FILE* %10, %union.tree_node* %call19, i32 0), !dbg !3863
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3864
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0)), !dbg !3865
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3866
  %20 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !3867
  %21 = load i64, i64* %i, align 8, !dbg !3868
  %arrayidx21 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %20, i64 %21, !dbg !3867
  %22 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx21, align 8, !dbg !3867
  call void @dump_value_range(%struct._IO_FILE* %19, %struct.value_range_d* %22), !dbg !3869
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3870
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !3871
  br label %if.end, !dbg !3872

if.end:                                           ; preds = %cond.end16, %for.body
  br label %for.inc, !dbg !3873

for.inc:                                          ; preds = %if.end
  %24 = load i64, i64* %i, align 8, !dbg !3874
  %inc = add i64 %24, 1, !dbg !3874
  store i64 %inc, i64* %i, align 8, !dbg !3874
  br label %for.cond, !dbg !3875, !llvm.loop !3876

for.end:                                          ; preds = %cond.end
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3878
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !3879
  ret void, !dbg !3880
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !3881 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3884, metadata !DIExpression()), !dbg !3885
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3885
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !3885
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3885

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3885
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !3885
  %2 = load i32, i32* %num, align 8, !dbg !3885
  br label %cond.end, !dbg !3885

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3885

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3885
  ret i32 %cond, !dbg !3885
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_all_value_ranges() #0 !dbg !3886 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3889
  call void @dump_all_value_ranges(%struct._IO_FILE* %0), !dbg !3890
  ret void, !dbg !3891
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_asserts_for(%struct._IO_FILE* %file, %union.tree_node* %name) #0 !dbg !3892 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %loc = alloca %struct.assert_locus_d*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3895, metadata !DIExpression()), !dbg !3896
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !3897, metadata !DIExpression()), !dbg !3898
  call void @llvm.dbg.declare(metadata %struct.assert_locus_d** %loc, metadata !3899, metadata !DIExpression()), !dbg !3900
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3901
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.18, i64 0, i64 0)), !dbg !3902
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3903
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3904
  call void @print_generic_expr(%struct._IO_FILE* %1, %union.tree_node* %2, i32 0), !dbg !3905
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3906
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !3907
  %4 = load %struct.assert_locus_d**, %struct.assert_locus_d*** @asserts_for, align 8, !dbg !3908
  %5 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3909
  %ssa_name = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !3909
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3909
  %6 = load i32, i32* %version, align 8, !dbg !3909
  %idxprom = zext i32 %6 to i64, !dbg !3908
  %arrayidx = getelementptr inbounds %struct.assert_locus_d*, %struct.assert_locus_d** %4, i64 %idxprom, !dbg !3908
  %7 = load %struct.assert_locus_d*, %struct.assert_locus_d** %arrayidx, align 8, !dbg !3908
  store %struct.assert_locus_d* %7, %struct.assert_locus_d** %loc, align 8, !dbg !3910
  br label %while.cond, !dbg !3911

while.cond:                                       ; preds = %if.end, %entry
  %8 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !3912
  %tobool = icmp ne %struct.assert_locus_d* %8, null, !dbg !3911
  br i1 %tobool, label %while.body, label %while.end, !dbg !3911

while.body:                                       ; preds = %while.cond
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3913
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)), !dbg !3915
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3916
  %11 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !3917
  %si = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %11, i32 0, i32 2, !dbg !3918
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !3919
  call void @print_gimple_stmt(%struct._IO_FILE* %10, %union.gimple_statement_d* %call3, i32 0, i32 0), !dbg !3920
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3921
  %13 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !3922
  %bb = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %13, i32 0, i32 0, !dbg !3923
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3923
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !3924
  %15 = load i32, i32* %index, align 8, !dbg !3924
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i64 0, i64 0), i32 %15), !dbg !3925
  %16 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !3926
  %e = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %16, i32 0, i32 1, !dbg !3928
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3928
  %tobool5 = icmp ne %struct.edge_def* %17, null, !dbg !3926
  br i1 %tobool5, label %if.then, label %if.end, !dbg !3929

if.then:                                          ; preds = %while.body
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3930
  %19 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !3932
  %e6 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %19, i32 0, i32 1, !dbg !3933
  %20 = load %struct.edge_def*, %struct.edge_def** %e6, align 8, !dbg !3933
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 0, !dbg !3934
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3934
  %index7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !3935
  %22 = load i32, i32* %index7, align 8, !dbg !3935
  %23 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !3936
  %e8 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %23, i32 0, i32 1, !dbg !3937
  %24 = load %struct.edge_def*, %struct.edge_def** %e8, align 8, !dbg !3937
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 1, !dbg !3938
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3938
  %index9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 9, !dbg !3939
  %26 = load i32, i32* %index9, align 8, !dbg !3939
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i64 0, i64 0), i32 %22, i32 %26), !dbg !3940
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3941
  %28 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !3942
  %e11 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %28, i32 0, i32 1, !dbg !3943
  %29 = load %struct.edge_def*, %struct.edge_def** %e11, align 8, !dbg !3943
  call void @dump_edge_info(%struct._IO_FILE* %27, %struct.edge_def* %29, i32 0), !dbg !3944
  br label %if.end, !dbg !3945

if.end:                                           ; preds = %if.then, %while.body
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3946
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)), !dbg !3947
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3948
  %32 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3949
  call void @print_generic_expr(%struct._IO_FILE* %31, %union.tree_node* %32, i32 0), !dbg !3950
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3951
  %34 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !3952
  %comp_code = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %34, i32 0, i32 3, !dbg !3953
  %35 = load i32, i32* %comp_code, align 8, !dbg !3953
  %idxprom13 = sext i32 %35 to i64, !dbg !3954
  %arrayidx14 = getelementptr inbounds [0 x i8*], [0 x i8*]* @tree_code_name, i64 0, i64 %idxprom13, !dbg !3954
  %36 = load i8*, i8** %arrayidx14, align 8, !dbg !3954
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0), i8* %36), !dbg !3955
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3956
  %38 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !3957
  %val = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %38, i32 0, i32 4, !dbg !3958
  %39 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3958
  call void @print_generic_expr(%struct._IO_FILE* %37, %union.tree_node* %39, i32 0), !dbg !3959
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3960
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i64 0, i64 0)), !dbg !3961
  %41 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !3962
  %next = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %41, i32 0, i32 6, !dbg !3963
  %42 = load %struct.assert_locus_d*, %struct.assert_locus_d** %next, align 8, !dbg !3963
  store %struct.assert_locus_d* %42, %struct.assert_locus_d** %loc, align 8, !dbg !3964
  br label %while.cond, !dbg !3911, !llvm.loop !3965

while.end:                                        ; preds = %while.cond
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3967
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !3968
  ret void, !dbg !3969
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3970 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3973, metadata !DIExpression()), !dbg !3974
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3975
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3975
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !3976
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3976
  ret %union.gimple_statement_d* %1, !dbg !3977
}

declare dso_local void @dump_edge_info(%struct._IO_FILE*, %struct.edge_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_asserts_for(%union.tree_node* %name) #0 !dbg !3978 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !3981, metadata !DIExpression()), !dbg !3982
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3983
  %1 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3984
  call void @dump_asserts_for(%struct._IO_FILE* %0, %union.tree_node* %1), !dbg !3985
  ret void, !dbg !3986
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_all_asserts(%struct._IO_FILE* %file) #0 !dbg !3987 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3988, metadata !DIExpression()), !dbg !3989
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3990, metadata !DIExpression()), !dbg !3991
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3992, metadata !DIExpression()), !dbg !3993
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3994
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.25, i64 0, i64 0)), !dbg !3995
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !3996
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %1, i32 0, i32* %i), !dbg !3996
  br label %for.cond, !dbg !3996

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3998
  %tobool = icmp ne i8 %call1, 0, !dbg !3996
  br i1 %tobool, label %for.body, label %for.end, !dbg !3996

for.body:                                         ; preds = %for.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4000
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4001
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4001
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !4001
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4001
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !4001
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4001
  %tobool2 = icmp ne %struct.VEC_tree_gc* %5, null, !dbg !4001
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !4001

cond.true:                                        ; preds = %for.body
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4001
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !4001
  %gimple_df4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 3, !dbg !4001
  %7 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df4, align 8, !dbg !4001
  %ssa_names5 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %7, i32 0, i32 2, !dbg !4001
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names5, align 8, !dbg !4001
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %8, i32 0, i32 0, !dbg !4001
  br label %cond.end, !dbg !4001

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !4001

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4001
  %9 = load i32, i32* %i, align 4, !dbg !4001
  %call6 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %9), !dbg !4001
  call void @dump_asserts_for(%struct._IO_FILE* %2, %union.tree_node* %call6), !dbg !4002
  br label %for.inc, !dbg !4002

for.inc:                                          ; preds = %cond.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3998
  br label %for.cond, !dbg !3998, !llvm.loop !4003

for.end:                                          ; preds = %for.cond
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4005
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !4006
  ret void, !dbg !4007
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_all_asserts() #0 !dbg !4008 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4009
  call void @dump_all_asserts(%struct._IO_FILE* %0), !dbg !4010
  ret void, !dbg !4011
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_vrp() #0 !dbg !4012 {
entry:
  %0 = load i32, i32* @flag_tree_vrp, align 4, !dbg !4013
  %cmp = icmp ne i32 %0, 0, !dbg !4014
  %conv = zext i1 %cmp to i32, !dbg !4014
  %conv1 = trunc i32 %conv to i8, !dbg !4013
  ret i8 %conv1, !dbg !4015
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_vrp() #0 !dbg !4016 {
entry:
  %i = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %su = alloca %struct.switch_update*, align 8
  %j = alloca i64, align 8
  %n = alloca i64, align 8
  %label = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4017, metadata !DIExpression()), !dbg !4018
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4019, metadata !DIExpression()), !dbg !4020
  call void @llvm.dbg.declare(metadata %struct.switch_update** %su, metadata !4021, metadata !DIExpression()), !dbg !4023
  call void @loop_optimizer_init(i32 15), !dbg !4024
  call void @rewrite_into_loop_closed_ssa(%struct.bitmap_head_def* null, i32 2048), !dbg !4025
  call void @scev_initialize(), !dbg !4026
  call void @insert_range_assertions(), !dbg !4027
  %call = call %struct.VEC_edge_heap* @VEC_edge_heap_alloc(i32 10), !dbg !4028
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !4029
  %call1 = call %struct.VEC_switch_update_heap* @VEC_switch_update_heap_alloc(i32 5), !dbg !4030
  store %struct.VEC_switch_update_heap* %call1, %struct.VEC_switch_update_heap** @to_update_switch_stmts, align 8, !dbg !4031
  call void @threadedge_initialize_values(), !dbg !4032
  call void @vrp_initialize(), !dbg !4033
  call void @ssa_propagate(i32 (%union.gimple_statement_d*, %struct.edge_def**, %union.tree_node**)* @vrp_visit_stmt, i32 (%union.gimple_statement_d*)* @vrp_visit_phi_node), !dbg !4034
  call void @vrp_finalize(), !dbg !4035
  call void @remove_range_assertions(), !dbg !4036
  call void @update_ssa(i32 2048), !dbg !4037
  call void @finalize_jump_threads(), !dbg !4038
  store i32 0, i32* %i, align 4, !dbg !4039
  br label %for.cond, !dbg !4041

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !4042
  %tobool = icmp ne %struct.VEC_edge_heap* %0, null, !dbg !4042
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4042

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !4042
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %1, i32 0, i32 0, !dbg !4042
  br label %cond.end, !dbg !4042

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4042

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4042
  %2 = load i32, i32* %i, align 4, !dbg !4042
  %call2 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %2, %struct.edge_def** %e), !dbg !4042
  %tobool3 = icmp ne i32 %call2, 0, !dbg !4044
  br i1 %tobool3, label %for.body, label %for.end, !dbg !4044

for.body:                                         ; preds = %cond.end
  %3 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4045
  call void @remove_edge(%struct.edge_def* %3), !dbg !4046
  br label %for.inc, !dbg !4046

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !4047
  %inc = add nsw i32 %4, 1, !dbg !4047
  store i32 %inc, i32* %i, align 4, !dbg !4047
  br label %for.cond, !dbg !4048, !llvm.loop !4049

for.end:                                          ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !4051
  br label %for.cond4, !dbg !4053

for.cond4:                                        ; preds = %for.inc32, %for.end
  %5 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** @to_update_switch_stmts, align 8, !dbg !4054
  %tobool5 = icmp ne %struct.VEC_switch_update_heap* %5, null, !dbg !4054
  br i1 %tobool5, label %cond.true6, label %cond.false8, !dbg !4054

cond.true6:                                       ; preds = %for.cond4
  %6 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** @to_update_switch_stmts, align 8, !dbg !4054
  %base7 = getelementptr inbounds %struct.VEC_switch_update_heap, %struct.VEC_switch_update_heap* %6, i32 0, i32 0, !dbg !4054
  br label %cond.end9, !dbg !4054

cond.false8:                                      ; preds = %for.cond4
  br label %cond.end9, !dbg !4054

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.VEC_switch_update_base* [ %base7, %cond.true6 ], [ null, %cond.false8 ], !dbg !4054
  %7 = load i32, i32* %i, align 4, !dbg !4054
  %call11 = call i32 @VEC_switch_update_base_iterate(%struct.VEC_switch_update_base* %cond10, i32 %7, %struct.switch_update** %su), !dbg !4054
  %tobool12 = icmp ne i32 %call11, 0, !dbg !4056
  br i1 %tobool12, label %for.body13, label %for.end34, !dbg !4056

for.body13:                                       ; preds = %cond.end9
  call void @llvm.dbg.declare(metadata i64* %j, metadata !4057, metadata !DIExpression()), !dbg !4059
  call void @llvm.dbg.declare(metadata i64* %n, metadata !4060, metadata !DIExpression()), !dbg !4061
  %8 = load %struct.switch_update*, %struct.switch_update** %su, align 8, !dbg !4062
  %vec = getelementptr inbounds %struct.switch_update, %struct.switch_update* %8, i32 0, i32 1, !dbg !4062
  %9 = load %union.tree_node*, %union.tree_node** %vec, align 8, !dbg !4062
  %vec14 = bitcast %union.tree_node* %9 to %struct.tree_vec*, !dbg !4062
  %length = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec14, i32 0, i32 1, !dbg !4062
  %10 = load i32, i32* %length, align 8, !dbg !4062
  %conv = sext i32 %10 to i64, !dbg !4062
  store i64 %conv, i64* %n, align 8, !dbg !4061
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !4063, metadata !DIExpression()), !dbg !4064
  %11 = load %struct.switch_update*, %struct.switch_update** %su, align 8, !dbg !4065
  %stmt = getelementptr inbounds %struct.switch_update, %struct.switch_update* %11, i32 0, i32 0, !dbg !4066
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4066
  %13 = load i64, i64* %n, align 8, !dbg !4067
  %conv15 = trunc i64 %13 to i32, !dbg !4067
  call void @gimple_switch_set_num_labels(%union.gimple_statement_d* %12, i32 %conv15), !dbg !4068
  store i64 0, i64* %j, align 8, !dbg !4069
  br label %for.cond16, !dbg !4071

for.cond16:                                       ; preds = %for.inc23, %for.body13
  %14 = load i64, i64* %j, align 8, !dbg !4072
  %15 = load i64, i64* %n, align 8, !dbg !4074
  %cmp = icmp ult i64 %14, %15, !dbg !4075
  br i1 %cmp, label %for.body18, label %for.end25, !dbg !4076

for.body18:                                       ; preds = %for.cond16
  %16 = load %struct.switch_update*, %struct.switch_update** %su, align 8, !dbg !4077
  %stmt19 = getelementptr inbounds %struct.switch_update, %struct.switch_update* %16, i32 0, i32 0, !dbg !4078
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt19, align 8, !dbg !4078
  %18 = load i64, i64* %j, align 8, !dbg !4079
  %conv20 = trunc i64 %18 to i32, !dbg !4079
  %19 = load %struct.switch_update*, %struct.switch_update** %su, align 8, !dbg !4080
  %vec21 = getelementptr inbounds %struct.switch_update, %struct.switch_update* %19, i32 0, i32 1, !dbg !4080
  %20 = load %union.tree_node*, %union.tree_node** %vec21, align 8, !dbg !4080
  %vec22 = bitcast %union.tree_node* %20 to %struct.tree_vec*, !dbg !4080
  %a = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec22, i32 0, i32 2, !dbg !4080
  %21 = load i64, i64* %j, align 8, !dbg !4080
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a, i64 0, i64 %21, !dbg !4080
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4080
  call void @gimple_switch_set_label(%union.gimple_statement_d* %17, i32 %conv20, %union.tree_node* %22), !dbg !4081
  br label %for.inc23, !dbg !4081

for.inc23:                                        ; preds = %for.body18
  %23 = load i64, i64* %j, align 8, !dbg !4082
  %inc24 = add i64 %23, 1, !dbg !4082
  store i64 %inc24, i64* %j, align 8, !dbg !4082
  br label %for.cond16, !dbg !4083, !llvm.loop !4084

for.end25:                                        ; preds = %for.cond16
  %24 = load %struct.switch_update*, %struct.switch_update** %su, align 8, !dbg !4086
  %stmt26 = getelementptr inbounds %struct.switch_update, %struct.switch_update* %24, i32 0, i32 0, !dbg !4087
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt26, align 8, !dbg !4087
  %call27 = call %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %25), !dbg !4088
  store %union.tree_node* %call27, %union.tree_node** %label, align 8, !dbg !4089
  %26 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4090
  %exp = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !4090
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4090
  %arrayidx28 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4090
  store %union.tree_node* null, %union.tree_node** %arrayidx28, align 8, !dbg !4091
  %27 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4092
  %exp29 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !4092
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 3, !dbg !4092
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i64 0, i64 1, !dbg !4092
  store %union.tree_node* null, %union.tree_node** %arrayidx31, align 8, !dbg !4093
  br label %for.inc32, !dbg !4094

for.inc32:                                        ; preds = %for.end25
  %28 = load i32, i32* %i, align 4, !dbg !4095
  %inc33 = add nsw i32 %28, 1, !dbg !4095
  store i32 %inc33, i32* %i, align 4, !dbg !4095
  br label %for.cond4, !dbg !4096, !llvm.loop !4097

for.end34:                                        ; preds = %cond.end9
  %29 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !4099
  %tobool35 = icmp ne %struct.VEC_edge_heap* %29, null, !dbg !4099
  br i1 %tobool35, label %cond.true36, label %cond.false38, !dbg !4099

cond.true36:                                      ; preds = %for.end34
  %30 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !4099
  %base37 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %30, i32 0, i32 0, !dbg !4099
  br label %cond.end39, !dbg !4099

cond.false38:                                     ; preds = %for.end34
  br label %cond.end39, !dbg !4099

cond.end39:                                       ; preds = %cond.false38, %cond.true36
  %cond40 = phi %struct.VEC_edge_base* [ %base37, %cond.true36 ], [ null, %cond.false38 ], !dbg !4099
  %call41 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond40), !dbg !4099
  %cmp42 = icmp ugt i32 %call41, 0, !dbg !4101
  br i1 %cmp42, label %if.then, label %if.end, !dbg !4102

if.then:                                          ; preds = %cond.end39
  call void @free_dominance_info(i32 1), !dbg !4103
  br label %if.end, !dbg !4103

if.end:                                           ; preds = %if.then, %cond.end39
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** @to_remove_edges), !dbg !4104
  call void @VEC_switch_update_heap_free(%struct.VEC_switch_update_heap** @to_update_switch_stmts), !dbg !4105
  call void @threadedge_finalize_values(), !dbg !4106
  call void @scev_finalize(), !dbg !4107
  call void @loop_optimizer_finalize(), !dbg !4108
  ret i32 0, !dbg !4109
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @nonnull_arg_p(%union.tree_node* %arg) #0 !dbg !4110 {
entry:
  %retval = alloca i8, align 1
  %arg.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %attrs = alloca %union.tree_node*, align 8
  %fntype = alloca %union.tree_node*, align 8
  %arg_num = alloca i64, align 8
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !4111, metadata !DIExpression()), !dbg !4112
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4113, metadata !DIExpression()), !dbg !4114
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs, metadata !4115, metadata !DIExpression()), !dbg !4116
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !4117, metadata !DIExpression()), !dbg !4118
  call void @llvm.dbg.declare(metadata i64* %arg_num, metadata !4119, metadata !DIExpression()), !dbg !4120
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !4121
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4121
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4121
  %bf.load = load i64, i64* %1, align 8, !dbg !4121
  %bf.clear = and i64 %bf.load, 65535, !dbg !4121
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4121
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !4121
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !4121

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !4121
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !4121
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4121
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4121
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4121
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4121
  %bf.load2 = load i64, i64* %4, align 8, !dbg !4121
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4121
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4121
  %cmp5 = icmp eq i32 %bf.cast4, 10, !dbg !4121
  br i1 %cmp5, label %cond.false, label %lor.lhs.false, !dbg !4121

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !4121
  %common6 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4121
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !4121
  %6 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !4121
  %base8 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4121
  %7 = bitcast %struct.tree_base* %base8 to i64*, !dbg !4121
  %bf.load9 = load i64, i64* %7, align 8, !dbg !4121
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !4121
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !4121
  %cmp12 = icmp eq i32 %bf.cast11, 12, !dbg !4121
  br i1 %cmp12, label %cond.false, label %cond.true, !dbg !4121

cond.true:                                        ; preds = %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 318, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !4121
  br label %cond.end, !dbg !4121

cond.false:                                       ; preds = %lor.lhs.false, %land.lhs.true
  br label %cond.end, !dbg !4121

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4121
  %8 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !4122
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4124
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !4124
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 7, !dbg !4125
  %10 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !4125
  %cmp13 = icmp eq %union.tree_node* %8, %10, !dbg !4126
  br i1 %cmp13, label %if.then, label %if.end, !dbg !4127

if.then:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !4128
  br label %return, !dbg !4128

if.end:                                           ; preds = %cond.end
  %11 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4129
  %common14 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !4129
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !4129
  %12 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !4129
  store %union.tree_node* %12, %union.tree_node** %fntype, align 8, !dbg !4130
  %13 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4131
  %type16 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !4131
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 4, !dbg !4131
  %14 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !4131
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0), %union.tree_node* %14), !dbg !4132
  store %union.tree_node* %call, %union.tree_node** %attrs, align 8, !dbg !4133
  %15 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !4134
  %cmp17 = icmp eq %union.tree_node* %15, null, !dbg !4136
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !4137

if.then18:                                        ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !4138
  br label %return, !dbg !4138

if.end19:                                         ; preds = %if.end
  %16 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !4139
  %list = bitcast %union.tree_node* %16 to %struct.tree_list*, !dbg !4139
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4139
  %17 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4139
  %cmp20 = icmp eq %union.tree_node* %17, null, !dbg !4141
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !4142

if.then21:                                        ; preds = %if.end19
  store i8 1, i8* %retval, align 1, !dbg !4143
  br label %return, !dbg !4143

if.end22:                                         ; preds = %if.end19
  store i64 1, i64* %arg_num, align 8, !dbg !4144
  %18 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4146
  %decl_non_common = bitcast %union.tree_node* %18 to %struct.tree_decl_non_common*, !dbg !4146
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !4146
  %19 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !4146
  store %union.tree_node* %19, %union.tree_node** %t, align 8, !dbg !4147
  br label %for.cond, !dbg !4148

for.cond:                                         ; preds = %for.inc, %if.end22
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4149
  %tobool = icmp ne %union.tree_node* %20, null, !dbg !4151
  br i1 %tobool, label %for.body, label %for.end, !dbg !4151

for.body:                                         ; preds = %for.cond
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4152
  %22 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !4155
  %cmp23 = icmp eq %union.tree_node* %21, %22, !dbg !4156
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !4157

if.then24:                                        ; preds = %for.body
  br label %for.end, !dbg !4158

if.end25:                                         ; preds = %for.body
  br label %for.inc, !dbg !4159

for.inc:                                          ; preds = %if.end25
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4160
  %common26 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !4160
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 1, !dbg !4160
  %24 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4160
  store %union.tree_node* %24, %union.tree_node** %t, align 8, !dbg !4161
  %25 = load i64, i64* %arg_num, align 8, !dbg !4162
  %inc = add i64 %25, 1, !dbg !4162
  store i64 %inc, i64* %arg_num, align 8, !dbg !4162
  br label %for.cond, !dbg !4163, !llvm.loop !4164

for.end:                                          ; preds = %if.then24, %for.cond
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4166
  %27 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !4166
  %cmp27 = icmp eq %union.tree_node* %26, %27, !dbg !4166
  br i1 %cmp27, label %cond.false29, label %cond.true28, !dbg !4166

cond.true28:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 344, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !4166
  br label %cond.end30, !dbg !4166

cond.false29:                                     ; preds = %for.end
  br label %cond.end30, !dbg !4166

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond31 = phi i32 [ 0, %cond.true28 ], [ 0, %cond.false29 ], !dbg !4166
  %28 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !4167
  %list32 = bitcast %union.tree_node* %28 to %struct.tree_list*, !dbg !4167
  %value33 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list32, i32 0, i32 2, !dbg !4167
  %29 = load %union.tree_node*, %union.tree_node** %value33, align 8, !dbg !4167
  store %union.tree_node* %29, %union.tree_node** %t, align 8, !dbg !4169
  br label %for.cond34, !dbg !4170

for.cond34:                                       ; preds = %for.inc43, %cond.end30
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4171
  %tobool35 = icmp ne %union.tree_node* %30, null, !dbg !4173
  br i1 %tobool35, label %for.body36, label %for.end46, !dbg !4173

for.body36:                                       ; preds = %for.cond34
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4174
  %list37 = bitcast %union.tree_node* %31 to %struct.tree_list*, !dbg !4174
  %value38 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list37, i32 0, i32 2, !dbg !4174
  %32 = load %union.tree_node*, %union.tree_node** %value38, align 8, !dbg !4174
  %33 = load i64, i64* %arg_num, align 8, !dbg !4177
  %call39 = call i32 @compare_tree_int(%union.tree_node* %32, i64 %33), !dbg !4178
  %cmp40 = icmp eq i32 %call39, 0, !dbg !4179
  br i1 %cmp40, label %if.then41, label %if.end42, !dbg !4180

if.then41:                                        ; preds = %for.body36
  store i8 1, i8* %retval, align 1, !dbg !4181
  br label %return, !dbg !4181

if.end42:                                         ; preds = %for.body36
  br label %for.inc43, !dbg !4182

for.inc43:                                        ; preds = %if.end42
  %34 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4183
  %common44 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !4183
  %chain45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 1, !dbg !4183
  %35 = load %union.tree_node*, %union.tree_node** %chain45, align 8, !dbg !4183
  store %union.tree_node* %35, %union.tree_node** %t, align 8, !dbg !4184
  br label %for.cond34, !dbg !4185, !llvm.loop !4186

for.end46:                                        ; preds = %for.cond34
  store i8 0, i8* %retval, align 1, !dbg !4188
  br label %return, !dbg !4188

return:                                           ; preds = %for.end46, %if.then41, %if.then21, %if.then18, %if.then
  %36 = load i8, i8* %retval, align 1, !dbg !4189
  ret i8 %36, !dbg !4189
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_value_range_to_nonnull(%struct.value_range_d* %vr, %union.tree_node* %type) #0 !dbg !4190 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %zero = alloca %union.tree_node*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !4193, metadata !DIExpression()), !dbg !4194
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4195, metadata !DIExpression()), !dbg !4196
  call void @llvm.dbg.declare(metadata %union.tree_node** %zero, metadata !4197, metadata !DIExpression()), !dbg !4198
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4199
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* %0, i64 0), !dbg !4200
  store %union.tree_node* %call, %union.tree_node** %zero, align 8, !dbg !4198
  %1 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4201
  %2 = load %union.tree_node*, %union.tree_node** %zero, align 8, !dbg !4202
  %3 = load %union.tree_node*, %union.tree_node** %zero, align 8, !dbg !4203
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4204
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %4, i32 0, i32 3, !dbg !4205
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !4205
  call void @set_value_range(%struct.value_range_d* %1, i32 2, %union.tree_node* %2, %union.tree_node* %3, %struct.bitmap_head_def* %5), !dbg !4206
  ret void, !dbg !4207
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_value_range_to_varying(%struct.value_range_d* %vr) #0 !dbg !4208 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !4209, metadata !DIExpression()), !dbg !4210
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4211
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 0, !dbg !4212
  store i32 3, i32* %type, align 8, !dbg !4213
  %1 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4214
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %1, i32 0, i32 2, !dbg !4215
  store %union.tree_node* null, %union.tree_node** %max, align 8, !dbg !4216
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4217
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 1, !dbg !4218
  store %union.tree_node* null, %union.tree_node** %min, align 8, !dbg !4219
  %3 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4220
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %3, i32 0, i32 3, !dbg !4222
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !4222
  %tobool = icmp ne %struct.bitmap_head_def* %4, null, !dbg !4220
  br i1 %tobool, label %if.then, label %if.end, !dbg !4223

if.then:                                          ; preds = %entry
  %5 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4224
  %equiv1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %5, i32 0, i32 3, !dbg !4225
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv1, align 8, !dbg !4225
  call void @bitmap_clear(%struct.bitmap_head_def* %6), !dbg !4226
  br label %if.end, !dbg !4226

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !4227
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) #2

declare dso_local i32 @compare_tree_int(%union.tree_node*, i64) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_value_range(%struct.value_range_d* %vr, i32 %t, %union.tree_node* %min, %union.tree_node* %max, %struct.bitmap_head_def* %equiv) #0 !dbg !4228 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %t.addr = alloca i32, align 4
  %min.addr = alloca %union.tree_node*, align 8
  %max.addr = alloca %union.tree_node*, align 8
  %equiv.addr = alloca %struct.bitmap_head_def*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !4231, metadata !DIExpression()), !dbg !4232
  store i32 %t, i32* %t.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %t.addr, metadata !4233, metadata !DIExpression()), !dbg !4234
  store %union.tree_node* %min, %union.tree_node** %min.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %min.addr, metadata !4235, metadata !DIExpression()), !dbg !4236
  store %union.tree_node* %max, %union.tree_node** %max.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %max.addr, metadata !4237, metadata !DIExpression()), !dbg !4238
  store %struct.bitmap_head_def* %equiv, %struct.bitmap_head_def** %equiv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %equiv.addr, metadata !4239, metadata !DIExpression()), !dbg !4240
  %0 = load i32, i32* %t.addr, align 4, !dbg !4241
  %1 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4242
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %1, i32 0, i32 0, !dbg !4243
  store i32 %0, i32* %type, align 8, !dbg !4244
  %2 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !4245
  %3 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4246
  %min1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %3, i32 0, i32 1, !dbg !4247
  store %union.tree_node* %2, %union.tree_node** %min1, align 8, !dbg !4248
  %4 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !4249
  %5 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4250
  %max2 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %5, i32 0, i32 2, !dbg !4251
  store %union.tree_node* %4, %union.tree_node** %max2, align 8, !dbg !4252
  %6 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4253
  %equiv3 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %6, i32 0, i32 3, !dbg !4255
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv3, align 8, !dbg !4255
  %cmp = icmp eq %struct.bitmap_head_def* %7, null, !dbg !4256
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4257

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv.addr, align 8, !dbg !4258
  %cmp4 = icmp ne %struct.bitmap_head_def* %8, null, !dbg !4259
  br i1 %cmp4, label %if.then, label %if.end, !dbg !4260

if.then:                                          ; preds = %land.lhs.true
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4261
  %9 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4262
  %equiv5 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %9, i32 0, i32 3, !dbg !4263
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %equiv5, align 8, !dbg !4264
  br label %if.end, !dbg !4262

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv.addr, align 8, !dbg !4265
  %11 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4267
  %equiv6 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %11, i32 0, i32 3, !dbg !4268
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv6, align 8, !dbg !4268
  %cmp7 = icmp ne %struct.bitmap_head_def* %10, %12, !dbg !4269
  br i1 %cmp7, label %if.then8, label %if.end15, !dbg !4270

if.then8:                                         ; preds = %if.end
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv.addr, align 8, !dbg !4271
  %tobool = icmp ne %struct.bitmap_head_def* %13, null, !dbg !4271
  br i1 %tobool, label %land.lhs.true9, label %if.else, !dbg !4274

land.lhs.true9:                                   ; preds = %if.then8
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv.addr, align 8, !dbg !4275
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %14, i32 0, i32 0, !dbg !4275
  %15 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !4275
  %tobool10 = icmp ne %struct.bitmap_element_def* %15, null, !dbg !4275
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !4276

if.then11:                                        ; preds = %land.lhs.true9
  %16 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4277
  %equiv12 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %16, i32 0, i32 3, !dbg !4278
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv12, align 8, !dbg !4278
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv.addr, align 8, !dbg !4279
  call void @bitmap_copy(%struct.bitmap_head_def* %17, %struct.bitmap_head_def* %18), !dbg !4280
  br label %if.end14, !dbg !4280

if.else:                                          ; preds = %land.lhs.true9, %if.then8
  %19 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !4281
  %equiv13 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %19, i32 0, i32 3, !dbg !4282
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv13, align 8, !dbg !4282
  call void @bitmap_clear(%struct.bitmap_head_def* %20), !dbg !4283
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then11
  br label %if.end15, !dbg !4284

if.end15:                                         ; preds = %if.end14, %if.end
  ret void, !dbg !4285
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare_values_warnv(%union.tree_node* %val1, %union.tree_node* %val2, i8* %strict_overflow_p) #0 !dbg !4286 {
entry:
  %retval = alloca i32, align 4
  %val1.addr = alloca %union.tree_node*, align 8
  %val2.addr = alloca %union.tree_node*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  %n1 = alloca %union.tree_node*, align 8
  %c1 = alloca %union.tree_node*, align 8
  %n2 = alloca %union.tree_node*, align 8
  %c2 = alloca %union.tree_node*, align 8
  %code1 = alloca i32, align 4
  %code2 = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %val1, %union.tree_node** %val1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val1.addr, metadata !4289, metadata !DIExpression()), !dbg !4290
  store %union.tree_node* %val2, %union.tree_node** %val2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val2.addr, metadata !4291, metadata !DIExpression()), !dbg !4292
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !4293, metadata !DIExpression()), !dbg !4294
  %0 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4295
  %1 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4297
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !4298
  br i1 %cmp, label %if.then, label %if.end, !dbg !4299

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4300
  br label %return, !dbg !4300

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4301
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !4301
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4301
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4301
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4301
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !4301
  %bf.load = load i64, i64* %4, align 8, !dbg !4301
  %bf.clear = and i64 %bf.load, 65535, !dbg !4301
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4301
  %cmp1 = icmp eq i32 %bf.cast, 10, !dbg !4301
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !4301

lor.rhs:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4301
  %common2 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4301
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !4301
  %6 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !4301
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4301
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !4301
  %bf.load5 = load i64, i64* %7, align 8, !dbg !4301
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !4301
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !4301
  %cmp8 = icmp eq i32 %bf.cast7, 12, !dbg !4301
  br label %lor.end, !dbg !4301

lor.end:                                          ; preds = %lor.rhs, %if.end
  %8 = phi i1 [ true, %if.end ], [ %cmp8, %lor.rhs ]
  %lor.ext = zext i1 %8 to i32, !dbg !4301
  %9 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4301
  %common9 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !4301
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !4301
  %10 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !4301
  %base11 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4301
  %11 = bitcast %struct.tree_base* %base11 to i64*, !dbg !4301
  %bf.load12 = load i64, i64* %11, align 8, !dbg !4301
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !4301
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !4301
  %cmp15 = icmp eq i32 %bf.cast14, 10, !dbg !4301
  br i1 %cmp15, label %lor.end24, label %lor.rhs16, !dbg !4301

lor.rhs16:                                        ; preds = %lor.end
  %12 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4301
  %common17 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !4301
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !4301
  %13 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !4301
  %base19 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4301
  %14 = bitcast %struct.tree_base* %base19 to i64*, !dbg !4301
  %bf.load20 = load i64, i64* %14, align 8, !dbg !4301
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !4301
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !4301
  %cmp23 = icmp eq i32 %bf.cast22, 12, !dbg !4301
  br label %lor.end24, !dbg !4301

lor.end24:                                        ; preds = %lor.rhs16, %lor.end
  %15 = phi i1 [ true, %lor.end ], [ %cmp23, %lor.rhs16 ]
  %lor.ext25 = zext i1 %15 to i32, !dbg !4301
  %cmp26 = icmp eq i32 %lor.ext, %lor.ext25, !dbg !4301
  br i1 %cmp26, label %cond.false, label %cond.true, !dbg !4301

cond.true:                                        ; preds = %lor.end24
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1074, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !4301
  br label %cond.end, !dbg !4301

cond.false:                                       ; preds = %lor.end24
  br label %cond.end, !dbg !4301

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4301
  %16 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4302
  %common27 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !4302
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !4302
  %17 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !4302
  %18 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4302
  %call = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %17, %union.tree_node* %18), !dbg !4302
  store %union.tree_node* %call, %union.tree_node** %val2.addr, align 8, !dbg !4303
  %19 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4304
  %call29 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %19), !dbg !4304
  store %union.tree_node* %call29, %union.tree_node** %val2.addr, align 8, !dbg !4304
  %20 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4305
  %base30 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !4305
  %21 = bitcast %struct.tree_base* %base30 to i64*, !dbg !4305
  %bf.load31 = load i64, i64* %21, align 8, !dbg !4305
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !4305
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !4305
  %cmp34 = icmp eq i32 %bf.cast33, 141, !dbg !4307
  br i1 %cmp34, label %land.lhs.true, label %lor.lhs.false, !dbg !4308

lor.lhs.false:                                    ; preds = %cond.end
  %22 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4309
  %base35 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4309
  %23 = bitcast %struct.tree_base* %base35 to i64*, !dbg !4309
  %bf.load36 = load i64, i64* %23, align 8, !dbg !4309
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !4309
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !4309
  %cmp39 = icmp eq i32 %bf.cast38, 63, !dbg !4310
  br i1 %cmp39, label %land.lhs.true, label %lor.lhs.false40, !dbg !4311

lor.lhs.false40:                                  ; preds = %lor.lhs.false
  %24 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4312
  %base41 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4312
  %25 = bitcast %struct.tree_base* %base41 to i64*, !dbg !4312
  %bf.load42 = load i64, i64* %25, align 8, !dbg !4312
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !4312
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !4312
  %cmp45 = icmp eq i32 %bf.cast44, 64, !dbg !4313
  br i1 %cmp45, label %land.lhs.true, label %if.end213, !dbg !4314

land.lhs.true:                                    ; preds = %lor.lhs.false40, %lor.lhs.false, %cond.end
  %26 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4315
  %base46 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !4315
  %27 = bitcast %struct.tree_base* %base46 to i64*, !dbg !4315
  %bf.load47 = load i64, i64* %27, align 8, !dbg !4315
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !4315
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !4315
  %cmp50 = icmp eq i32 %bf.cast49, 141, !dbg !4316
  br i1 %cmp50, label %if.then63, label %lor.lhs.false51, !dbg !4317

lor.lhs.false51:                                  ; preds = %land.lhs.true
  %28 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4318
  %base52 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !4318
  %29 = bitcast %struct.tree_base* %base52 to i64*, !dbg !4318
  %bf.load53 = load i64, i64* %29, align 8, !dbg !4318
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !4318
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !4318
  %cmp56 = icmp eq i32 %bf.cast55, 63, !dbg !4319
  br i1 %cmp56, label %if.then63, label %lor.lhs.false57, !dbg !4320

lor.lhs.false57:                                  ; preds = %lor.lhs.false51
  %30 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4321
  %base58 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !4321
  %31 = bitcast %struct.tree_base* %base58 to i64*, !dbg !4321
  %bf.load59 = load i64, i64* %31, align 8, !dbg !4321
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !4321
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !4321
  %cmp62 = icmp eq i32 %bf.cast61, 64, !dbg !4322
  br i1 %cmp62, label %if.then63, label %if.end213, !dbg !4323

if.then63:                                        ; preds = %lor.lhs.false57, %lor.lhs.false51, %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %n1, metadata !4324, metadata !DIExpression()), !dbg !4326
  call void @llvm.dbg.declare(metadata %union.tree_node** %c1, metadata !4327, metadata !DIExpression()), !dbg !4328
  call void @llvm.dbg.declare(metadata %union.tree_node** %n2, metadata !4329, metadata !DIExpression()), !dbg !4330
  call void @llvm.dbg.declare(metadata %union.tree_node** %c2, metadata !4331, metadata !DIExpression()), !dbg !4332
  call void @llvm.dbg.declare(metadata i32* %code1, metadata !4333, metadata !DIExpression()), !dbg !4334
  call void @llvm.dbg.declare(metadata i32* %code2, metadata !4335, metadata !DIExpression()), !dbg !4336
  %32 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4337
  %base64 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !4337
  %33 = bitcast %struct.tree_base* %base64 to i64*, !dbg !4337
  %bf.load65 = load i64, i64* %33, align 8, !dbg !4337
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !4337
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !4337
  %cmp68 = icmp eq i32 %bf.cast67, 141, !dbg !4339
  br i1 %cmp68, label %if.then69, label %if.else, !dbg !4340

if.then69:                                        ; preds = %if.then63
  store i32 141, i32* %code1, align 4, !dbg !4341
  %34 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4343
  store %union.tree_node* %34, %union.tree_node** %n1, align 8, !dbg !4344
  store %union.tree_node* null, %union.tree_node** %c1, align 8, !dbg !4345
  br label %if.end92, !dbg !4346

if.else:                                          ; preds = %if.then63
  %35 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4347
  %base70 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !4347
  %36 = bitcast %struct.tree_base* %base70 to i64*, !dbg !4347
  %bf.load71 = load i64, i64* %36, align 8, !dbg !4347
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !4347
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !4347
  store i32 %bf.cast73, i32* %code1, align 4, !dbg !4349
  %37 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4350
  %exp = bitcast %union.tree_node* %37 to %struct.tree_exp*, !dbg !4350
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4350
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4350
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4350
  store %union.tree_node* %38, %union.tree_node** %n1, align 8, !dbg !4351
  %39 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4352
  %exp74 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !4352
  %operands75 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp74, i32 0, i32 3, !dbg !4352
  %arrayidx76 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands75, i64 0, i64 1, !dbg !4352
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx76, align 8, !dbg !4352
  store %union.tree_node* %40, %union.tree_node** %c1, align 8, !dbg !4353
  %41 = load %union.tree_node*, %union.tree_node** %c1, align 8, !dbg !4354
  %call77 = call i32 @tree_int_cst_sgn(%union.tree_node* %41), !dbg !4356
  %cmp78 = icmp eq i32 %call77, -1, !dbg !4357
  br i1 %cmp78, label %if.then79, label %if.end91, !dbg !4358

if.then79:                                        ; preds = %if.else
  %42 = load %union.tree_node*, %union.tree_node** %c1, align 8, !dbg !4359
  %call80 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %42), !dbg !4362
  %tobool = icmp ne i8 %call80, 0, !dbg !4362
  br i1 %tobool, label %if.then81, label %if.end82, !dbg !4363

if.then81:                                        ; preds = %if.then79
  store i32 -2, i32* %retval, align 4, !dbg !4364
  br label %return, !dbg !4364

if.end82:                                         ; preds = %if.then79
  %43 = load %union.tree_node*, %union.tree_node** %c1, align 8, !dbg !4365
  %common83 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !4365
  %type84 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common83, i32 0, i32 2, !dbg !4365
  %44 = load %union.tree_node*, %union.tree_node** %type84, align 8, !dbg !4365
  %45 = load %union.tree_node*, %union.tree_node** %c1, align 8, !dbg !4366
  %call85 = call %union.tree_node* @fold_unary_to_constant(i32 79, %union.tree_node* %44, %union.tree_node* %45), !dbg !4367
  store %union.tree_node* %call85, %union.tree_node** %c1, align 8, !dbg !4368
  %46 = load %union.tree_node*, %union.tree_node** %c1, align 8, !dbg !4369
  %tobool86 = icmp ne %union.tree_node* %46, null, !dbg !4369
  br i1 %tobool86, label %if.end88, label %if.then87, !dbg !4371

if.then87:                                        ; preds = %if.end82
  store i32 -2, i32* %retval, align 4, !dbg !4372
  br label %return, !dbg !4372

if.end88:                                         ; preds = %if.end82
  %47 = load i32, i32* %code1, align 4, !dbg !4373
  %cmp89 = icmp eq i32 %47, 64, !dbg !4374
  %48 = zext i1 %cmp89 to i64, !dbg !4373
  %cond90 = select i1 %cmp89, i32 63, i32 64, !dbg !4373
  store i32 %cond90, i32* %code1, align 4, !dbg !4375
  br label %if.end91, !dbg !4376

if.end91:                                         ; preds = %if.end88, %if.else
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.then69
  %49 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4377
  %base93 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !4377
  %50 = bitcast %struct.tree_base* %base93 to i64*, !dbg !4377
  %bf.load94 = load i64, i64* %50, align 8, !dbg !4377
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !4377
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !4377
  %cmp97 = icmp eq i32 %bf.cast96, 141, !dbg !4379
  br i1 %cmp97, label %if.then98, label %if.else99, !dbg !4380

if.then98:                                        ; preds = %if.end92
  store i32 141, i32* %code2, align 4, !dbg !4381
  %51 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4383
  store %union.tree_node* %51, %union.tree_node** %n2, align 8, !dbg !4384
  store %union.tree_node* null, %union.tree_node** %c2, align 8, !dbg !4385
  br label %if.end126, !dbg !4386

if.else99:                                        ; preds = %if.end92
  %52 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4387
  %base100 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !4387
  %53 = bitcast %struct.tree_base* %base100 to i64*, !dbg !4387
  %bf.load101 = load i64, i64* %53, align 8, !dbg !4387
  %bf.clear102 = and i64 %bf.load101, 65535, !dbg !4387
  %bf.cast103 = trunc i64 %bf.clear102 to i32, !dbg !4387
  store i32 %bf.cast103, i32* %code2, align 4, !dbg !4389
  %54 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4390
  %exp104 = bitcast %union.tree_node* %54 to %struct.tree_exp*, !dbg !4390
  %operands105 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp104, i32 0, i32 3, !dbg !4390
  %arrayidx106 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands105, i64 0, i64 0, !dbg !4390
  %55 = load %union.tree_node*, %union.tree_node** %arrayidx106, align 8, !dbg !4390
  store %union.tree_node* %55, %union.tree_node** %n2, align 8, !dbg !4391
  %56 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4392
  %exp107 = bitcast %union.tree_node* %56 to %struct.tree_exp*, !dbg !4392
  %operands108 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp107, i32 0, i32 3, !dbg !4392
  %arrayidx109 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands108, i64 0, i64 1, !dbg !4392
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx109, align 8, !dbg !4392
  store %union.tree_node* %57, %union.tree_node** %c2, align 8, !dbg !4393
  %58 = load %union.tree_node*, %union.tree_node** %c2, align 8, !dbg !4394
  %call110 = call i32 @tree_int_cst_sgn(%union.tree_node* %58), !dbg !4396
  %cmp111 = icmp eq i32 %call110, -1, !dbg !4397
  br i1 %cmp111, label %if.then112, label %if.end125, !dbg !4398

if.then112:                                       ; preds = %if.else99
  %59 = load %union.tree_node*, %union.tree_node** %c2, align 8, !dbg !4399
  %call113 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %59), !dbg !4402
  %tobool114 = icmp ne i8 %call113, 0, !dbg !4402
  br i1 %tobool114, label %if.then115, label %if.end116, !dbg !4403

if.then115:                                       ; preds = %if.then112
  store i32 -2, i32* %retval, align 4, !dbg !4404
  br label %return, !dbg !4404

if.end116:                                        ; preds = %if.then112
  %60 = load %union.tree_node*, %union.tree_node** %c2, align 8, !dbg !4405
  %common117 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !4405
  %type118 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common117, i32 0, i32 2, !dbg !4405
  %61 = load %union.tree_node*, %union.tree_node** %type118, align 8, !dbg !4405
  %62 = load %union.tree_node*, %union.tree_node** %c2, align 8, !dbg !4406
  %call119 = call %union.tree_node* @fold_unary_to_constant(i32 79, %union.tree_node* %61, %union.tree_node* %62), !dbg !4407
  store %union.tree_node* %call119, %union.tree_node** %c2, align 8, !dbg !4408
  %63 = load %union.tree_node*, %union.tree_node** %c2, align 8, !dbg !4409
  %tobool120 = icmp ne %union.tree_node* %63, null, !dbg !4409
  br i1 %tobool120, label %if.end122, label %if.then121, !dbg !4411

if.then121:                                       ; preds = %if.end116
  store i32 -2, i32* %retval, align 4, !dbg !4412
  br label %return, !dbg !4412

if.end122:                                        ; preds = %if.end116
  %64 = load i32, i32* %code2, align 4, !dbg !4413
  %cmp123 = icmp eq i32 %64, 64, !dbg !4414
  %65 = zext i1 %cmp123 to i64, !dbg !4413
  %cond124 = select i1 %cmp123, i32 63, i32 64, !dbg !4413
  store i32 %cond124, i32* %code2, align 4, !dbg !4415
  br label %if.end125, !dbg !4416

if.end125:                                        ; preds = %if.end122, %if.else99
  br label %if.end126

if.end126:                                        ; preds = %if.end125, %if.then98
  %66 = load %union.tree_node*, %union.tree_node** %n1, align 8, !dbg !4417
  %67 = load %union.tree_node*, %union.tree_node** %n2, align 8, !dbg !4419
  %cmp127 = icmp ne %union.tree_node* %66, %67, !dbg !4420
  br i1 %cmp127, label %if.then128, label %if.end129, !dbg !4421

if.then128:                                       ; preds = %if.end126
  store i32 -2, i32* %retval, align 4, !dbg !4422
  br label %return, !dbg !4422

if.end129:                                        ; preds = %if.end126
  %68 = load i32, i32* %code1, align 4, !dbg !4423
  %cmp130 = icmp eq i32 %68, 141, !dbg !4425
  br i1 %cmp130, label %land.lhs.true131, label %if.end134, !dbg !4426

land.lhs.true131:                                 ; preds = %if.end129
  %69 = load i32, i32* %code2, align 4, !dbg !4427
  %cmp132 = icmp eq i32 %69, 141, !dbg !4428
  br i1 %cmp132, label %if.then133, label %if.end134, !dbg !4429

if.then133:                                       ; preds = %land.lhs.true131
  store i32 0, i32* %retval, align 4, !dbg !4430
  br label %return, !dbg !4430

if.end134:                                        ; preds = %land.lhs.true131, %if.end129
  %70 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4431
  %common135 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !4431
  %type136 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common135, i32 0, i32 2, !dbg !4431
  %71 = load %union.tree_node*, %union.tree_node** %type136, align 8, !dbg !4431
  %base137 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !4431
  %72 = bitcast %struct.tree_base* %base137 to i64*, !dbg !4431
  %bf.load138 = load i64, i64* %72, align 8, !dbg !4431
  %bf.lshr = lshr i64 %bf.load138, 21, !dbg !4431
  %bf.clear139 = and i64 %bf.lshr, 1, !dbg !4431
  %bf.cast140 = trunc i64 %bf.clear139 to i32, !dbg !4431
  %tobool141 = icmp ne i32 %bf.cast140, 0, !dbg !4431
  br i1 %tobool141, label %if.then148, label %land.lhs.true142, !dbg !4431

land.lhs.true142:                                 ; preds = %if.end134
  %73 = load i32, i32* @flag_wrapv, align 4, !dbg !4431
  %tobool143 = icmp ne i32 %73, 0, !dbg !4431
  br i1 %tobool143, label %if.then148, label %land.lhs.true144, !dbg !4431

land.lhs.true144:                                 ; preds = %land.lhs.true142
  %74 = load i32, i32* @flag_trapv, align 4, !dbg !4431
  %tobool145 = icmp ne i32 %74, 0, !dbg !4431
  br i1 %tobool145, label %if.then148, label %land.lhs.true146, !dbg !4431

land.lhs.true146:                                 ; preds = %land.lhs.true144
  %75 = load i32, i32* @flag_strict_overflow, align 4, !dbg !4431
  %tobool147 = icmp ne i32 %75, 0, !dbg !4431
  br i1 %tobool147, label %if.end149, label %if.then148, !dbg !4433

if.then148:                                       ; preds = %land.lhs.true146, %land.lhs.true144, %land.lhs.true142, %if.end134
  store i32 -2, i32* %retval, align 4, !dbg !4434
  br label %return, !dbg !4434

if.end149:                                        ; preds = %land.lhs.true146
  %76 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !4435
  %cmp150 = icmp ne i8* %76, null, !dbg !4437
  br i1 %cmp150, label %land.lhs.true151, label %if.end170, !dbg !4438

land.lhs.true151:                                 ; preds = %if.end149
  %77 = load i32, i32* %code1, align 4, !dbg !4439
  %cmp152 = icmp eq i32 %77, 141, !dbg !4440
  br i1 %cmp152, label %land.lhs.true160, label %lor.lhs.false153, !dbg !4441

lor.lhs.false153:                                 ; preds = %land.lhs.true151
  %78 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4442
  %base154 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !4442
  %79 = bitcast %struct.tree_base* %base154 to i64*, !dbg !4442
  %bf.load155 = load i64, i64* %79, align 8, !dbg !4442
  %bf.lshr156 = lshr i64 %bf.load155, 23, !dbg !4442
  %bf.clear157 = and i64 %bf.lshr156, 1, !dbg !4442
  %bf.cast158 = trunc i64 %bf.clear157 to i32, !dbg !4442
  %tobool159 = icmp ne i32 %bf.cast158, 0, !dbg !4442
  br i1 %tobool159, label %if.end170, label %land.lhs.true160, !dbg !4443

land.lhs.true160:                                 ; preds = %lor.lhs.false153, %land.lhs.true151
  %80 = load i32, i32* %code2, align 4, !dbg !4444
  %cmp161 = icmp eq i32 %80, 141, !dbg !4445
  br i1 %cmp161, label %if.then169, label %lor.lhs.false162, !dbg !4446

lor.lhs.false162:                                 ; preds = %land.lhs.true160
  %81 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4447
  %base163 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !4447
  %82 = bitcast %struct.tree_base* %base163 to i64*, !dbg !4447
  %bf.load164 = load i64, i64* %82, align 8, !dbg !4447
  %bf.lshr165 = lshr i64 %bf.load164, 23, !dbg !4447
  %bf.clear166 = and i64 %bf.lshr165, 1, !dbg !4447
  %bf.cast167 = trunc i64 %bf.clear166 to i32, !dbg !4447
  %tobool168 = icmp ne i32 %bf.cast167, 0, !dbg !4447
  br i1 %tobool168, label %if.end170, label %if.then169, !dbg !4448

if.then169:                                       ; preds = %lor.lhs.false162, %land.lhs.true160
  %83 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !4449
  store i8 1, i8* %83, align 1, !dbg !4450
  br label %if.end170, !dbg !4451

if.end170:                                        ; preds = %if.then169, %lor.lhs.false162, %lor.lhs.false153, %if.end149
  %84 = load i32, i32* %code1, align 4, !dbg !4452
  %cmp171 = icmp eq i32 %84, 141, !dbg !4454
  br i1 %cmp171, label %if.then172, label %if.else180, !dbg !4455

if.then172:                                       ; preds = %if.end170
  %85 = load i32, i32* %code2, align 4, !dbg !4456
  %cmp173 = icmp eq i32 %85, 63, !dbg !4459
  br i1 %cmp173, label %if.then174, label %if.else175, !dbg !4460

if.then174:                                       ; preds = %if.then172
  store i32 -1, i32* %retval, align 4, !dbg !4461
  br label %return, !dbg !4461

if.else175:                                       ; preds = %if.then172
  %86 = load i32, i32* %code2, align 4, !dbg !4462
  %cmp176 = icmp eq i32 %86, 64, !dbg !4464
  br i1 %cmp176, label %if.then177, label %if.end178, !dbg !4465

if.then177:                                       ; preds = %if.else175
  store i32 1, i32* %retval, align 4, !dbg !4466
  br label %return, !dbg !4466

if.end178:                                        ; preds = %if.else175
  br label %if.end179

if.end179:                                        ; preds = %if.end178
  br label %if.end212, !dbg !4467

if.else180:                                       ; preds = %if.end170
  %87 = load i32, i32* %code1, align 4, !dbg !4468
  %cmp181 = icmp eq i32 %87, 63, !dbg !4470
  br i1 %cmp181, label %if.then182, label %if.else195, !dbg !4471

if.then182:                                       ; preds = %if.else180
  %88 = load i32, i32* %code2, align 4, !dbg !4472
  %cmp183 = icmp eq i32 %88, 141, !dbg !4475
  br i1 %cmp183, label %if.then184, label %if.else185, !dbg !4476

if.then184:                                       ; preds = %if.then182
  store i32 1, i32* %retval, align 4, !dbg !4477
  br label %return, !dbg !4477

if.else185:                                       ; preds = %if.then182
  %89 = load i32, i32* %code2, align 4, !dbg !4478
  %cmp186 = icmp eq i32 %89, 63, !dbg !4480
  br i1 %cmp186, label %if.then187, label %if.else189, !dbg !4481

if.then187:                                       ; preds = %if.else185
  %90 = load %union.tree_node*, %union.tree_node** %c1, align 8, !dbg !4482
  %91 = load %union.tree_node*, %union.tree_node** %c2, align 8, !dbg !4483
  %92 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !4484
  %call188 = call i32 @compare_values_warnv(%union.tree_node* %90, %union.tree_node* %91, i8* %92), !dbg !4485
  store i32 %call188, i32* %retval, align 4, !dbg !4486
  br label %return, !dbg !4486

if.else189:                                       ; preds = %if.else185
  %93 = load i32, i32* %code2, align 4, !dbg !4487
  %cmp190 = icmp eq i32 %93, 64, !dbg !4489
  br i1 %cmp190, label %if.then191, label %if.end192, !dbg !4490

if.then191:                                       ; preds = %if.else189
  store i32 1, i32* %retval, align 4, !dbg !4491
  br label %return, !dbg !4491

if.end192:                                        ; preds = %if.else189
  br label %if.end193

if.end193:                                        ; preds = %if.end192
  br label %if.end194

if.end194:                                        ; preds = %if.end193
  br label %if.end211, !dbg !4492

if.else195:                                       ; preds = %if.else180
  %94 = load i32, i32* %code1, align 4, !dbg !4493
  %cmp196 = icmp eq i32 %94, 64, !dbg !4495
  br i1 %cmp196, label %if.then197, label %if.end210, !dbg !4496

if.then197:                                       ; preds = %if.else195
  %95 = load i32, i32* %code2, align 4, !dbg !4497
  %cmp198 = icmp eq i32 %95, 141, !dbg !4500
  br i1 %cmp198, label %if.then199, label %if.else200, !dbg !4501

if.then199:                                       ; preds = %if.then197
  store i32 -1, i32* %retval, align 4, !dbg !4502
  br label %return, !dbg !4502

if.else200:                                       ; preds = %if.then197
  %96 = load i32, i32* %code2, align 4, !dbg !4503
  %cmp201 = icmp eq i32 %96, 63, !dbg !4505
  br i1 %cmp201, label %if.then202, label %if.else203, !dbg !4506

if.then202:                                       ; preds = %if.else200
  store i32 -1, i32* %retval, align 4, !dbg !4507
  br label %return, !dbg !4507

if.else203:                                       ; preds = %if.else200
  %97 = load i32, i32* %code2, align 4, !dbg !4508
  %cmp204 = icmp eq i32 %97, 64, !dbg !4510
  br i1 %cmp204, label %if.then205, label %if.end207, !dbg !4511

if.then205:                                       ; preds = %if.else203
  %98 = load %union.tree_node*, %union.tree_node** %c2, align 8, !dbg !4512
  %99 = load %union.tree_node*, %union.tree_node** %c1, align 8, !dbg !4513
  %100 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !4514
  %call206 = call i32 @compare_values_warnv(%union.tree_node* %98, %union.tree_node* %99, i8* %100), !dbg !4515
  store i32 %call206, i32* %retval, align 4, !dbg !4516
  br label %return, !dbg !4516

if.end207:                                        ; preds = %if.else203
  br label %if.end208

if.end208:                                        ; preds = %if.end207
  br label %if.end209

if.end209:                                        ; preds = %if.end208
  br label %if.end210, !dbg !4517

if.end210:                                        ; preds = %if.end209, %if.else195
  br label %if.end211

if.end211:                                        ; preds = %if.end210, %if.end194
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %if.end179
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1190, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !4518
  br label %if.end213, !dbg !4519

if.end213:                                        ; preds = %if.end212, %lor.lhs.false57, %lor.lhs.false40
  %101 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4520
  %call214 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %101), !dbg !4522
  %tobool215 = icmp ne i8 %call214, 0, !dbg !4522
  br i1 %tobool215, label %lor.lhs.false216, label %if.then219, !dbg !4523

lor.lhs.false216:                                 ; preds = %if.end213
  %102 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4524
  %call217 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %102), !dbg !4525
  %tobool218 = icmp ne i8 %call217, 0, !dbg !4525
  br i1 %tobool218, label %if.end220, label %if.then219, !dbg !4526

if.then219:                                       ; preds = %lor.lhs.false216, %if.end213
  store i32 -2, i32* %retval, align 4, !dbg !4527
  br label %return, !dbg !4527

if.end220:                                        ; preds = %lor.lhs.false216
  %103 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4528
  %common221 = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !4528
  %type222 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common221, i32 0, i32 2, !dbg !4528
  %104 = load %union.tree_node*, %union.tree_node** %type222, align 8, !dbg !4528
  %base223 = bitcast %union.tree_node* %104 to %struct.tree_base*, !dbg !4528
  %105 = bitcast %struct.tree_base* %base223 to i64*, !dbg !4528
  %bf.load224 = load i64, i64* %105, align 8, !dbg !4528
  %bf.clear225 = and i64 %bf.load224, 65535, !dbg !4528
  %bf.cast226 = trunc i64 %bf.clear225 to i32, !dbg !4528
  %cmp227 = icmp eq i32 %bf.cast226, 10, !dbg !4528
  br i1 %cmp227, label %if.else282, label %lor.lhs.false228, !dbg !4528

lor.lhs.false228:                                 ; preds = %if.end220
  %106 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4528
  %common229 = bitcast %union.tree_node* %106 to %struct.tree_common*, !dbg !4528
  %type230 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common229, i32 0, i32 2, !dbg !4528
  %107 = load %union.tree_node*, %union.tree_node** %type230, align 8, !dbg !4528
  %base231 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !4528
  %108 = bitcast %struct.tree_base* %base231 to i64*, !dbg !4528
  %bf.load232 = load i64, i64* %108, align 8, !dbg !4528
  %bf.clear233 = and i64 %bf.load232, 65535, !dbg !4528
  %bf.cast234 = trunc i64 %bf.clear233 to i32, !dbg !4528
  %cmp235 = icmp eq i32 %bf.cast234, 12, !dbg !4528
  br i1 %cmp235, label %if.else282, label %if.then236, !dbg !4530

if.then236:                                       ; preds = %lor.lhs.false228
  %109 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4531
  %base237 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !4531
  %110 = bitcast %struct.tree_base* %base237 to i64*, !dbg !4531
  %bf.load238 = load i64, i64* %110, align 8, !dbg !4531
  %bf.lshr239 = lshr i64 %bf.load238, 27, !dbg !4531
  %bf.clear240 = and i64 %bf.lshr239, 1, !dbg !4531
  %bf.cast241 = trunc i64 %bf.clear240 to i32, !dbg !4531
  %tobool242 = icmp ne i32 %bf.cast241, 0, !dbg !4531
  br i1 %tobool242, label %if.then250, label %lor.lhs.false243, !dbg !4534

lor.lhs.false243:                                 ; preds = %if.then236
  %111 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4535
  %base244 = bitcast %union.tree_node* %111 to %struct.tree_base*, !dbg !4535
  %112 = bitcast %struct.tree_base* %base244 to i64*, !dbg !4535
  %bf.load245 = load i64, i64* %112, align 8, !dbg !4535
  %bf.lshr246 = lshr i64 %bf.load245, 27, !dbg !4535
  %bf.clear247 = and i64 %bf.lshr246, 1, !dbg !4535
  %bf.cast248 = trunc i64 %bf.clear247 to i32, !dbg !4535
  %tobool249 = icmp ne i32 %bf.cast248, 0, !dbg !4535
  br i1 %tobool249, label %if.then250, label %if.end280, !dbg !4536

if.then250:                                       ; preds = %lor.lhs.false243, %if.then236
  %113 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !4537
  %cmp251 = icmp ne i8* %113, null, !dbg !4540
  br i1 %cmp251, label %if.then252, label %if.end253, !dbg !4541

if.then252:                                       ; preds = %if.then250
  %114 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !4542
  store i8 1, i8* %114, align 1, !dbg !4543
  br label %if.end253, !dbg !4544

if.end253:                                        ; preds = %if.then252, %if.then250
  %115 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4545
  %call254 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %115), !dbg !4547
  %tobool255 = icmp ne i8 %call254, 0, !dbg !4547
  br i1 %tobool255, label %if.then256, label %if.else260, !dbg !4548

if.then256:                                       ; preds = %if.end253
  %116 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4549
  %call257 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %116), !dbg !4550
  %conv = zext i8 %call257 to i32, !dbg !4550
  %tobool258 = icmp ne i32 %conv, 0, !dbg !4550
  %117 = zext i1 %tobool258 to i64, !dbg !4550
  %cond259 = select i1 %tobool258, i32 0, i32 -1, !dbg !4550
  store i32 %cond259, i32* %retval, align 4, !dbg !4551
  br label %return, !dbg !4551

if.else260:                                       ; preds = %if.end253
  %118 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4552
  %call261 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %118), !dbg !4554
  %tobool262 = icmp ne i8 %call261, 0, !dbg !4554
  br i1 %tobool262, label %if.then263, label %if.else264, !dbg !4555

if.then263:                                       ; preds = %if.else260
  store i32 1, i32* %retval, align 4, !dbg !4556
  br label %return, !dbg !4556

if.else264:                                       ; preds = %if.else260
  %119 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4557
  %call265 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %119), !dbg !4559
  %tobool266 = icmp ne i8 %call265, 0, !dbg !4559
  br i1 %tobool266, label %if.then267, label %if.else272, !dbg !4560

if.then267:                                       ; preds = %if.else264
  %120 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4561
  %call268 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %120), !dbg !4562
  %conv269 = zext i8 %call268 to i32, !dbg !4562
  %tobool270 = icmp ne i32 %conv269, 0, !dbg !4562
  %121 = zext i1 %tobool270 to i64, !dbg !4562
  %cond271 = select i1 %tobool270, i32 0, i32 1, !dbg !4562
  store i32 %cond271, i32* %retval, align 4, !dbg !4563
  br label %return, !dbg !4563

if.else272:                                       ; preds = %if.else264
  %122 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4564
  %call273 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %122), !dbg !4566
  %tobool274 = icmp ne i8 %call273, 0, !dbg !4566
  br i1 %tobool274, label %if.then275, label %if.end276, !dbg !4567

if.then275:                                       ; preds = %if.else272
  store i32 -1, i32* %retval, align 4, !dbg !4568
  br label %return, !dbg !4568

if.end276:                                        ; preds = %if.else272
  br label %if.end277

if.end277:                                        ; preds = %if.end276
  br label %if.end278

if.end278:                                        ; preds = %if.end277
  br label %if.end279

if.end279:                                        ; preds = %if.end278
  store i32 -2, i32* %retval, align 4, !dbg !4569
  br label %return, !dbg !4569

if.end280:                                        ; preds = %lor.lhs.false243
  %123 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4570
  %124 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4571
  %call281 = call i32 @tree_int_cst_compare(%union.tree_node* %123, %union.tree_node* %124), !dbg !4572
  store i32 %call281, i32* %retval, align 4, !dbg !4573
  br label %return, !dbg !4573

if.else282:                                       ; preds = %lor.lhs.false228, %if.end220
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4574, metadata !DIExpression()), !dbg !4576
  %125 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4577
  %126 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4579
  %cmp283 = icmp eq %union.tree_node* %125, %126, !dbg !4580
  br i1 %cmp283, label %if.then288, label %lor.lhs.false285, !dbg !4581

lor.lhs.false285:                                 ; preds = %if.else282
  %127 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4582
  %128 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4583
  %call286 = call i32 @operand_equal_p(%union.tree_node* %127, %union.tree_node* %128, i32 0), !dbg !4584
  %tobool287 = icmp ne i32 %call286, 0, !dbg !4584
  br i1 %tobool287, label %if.then288, label %if.end289, !dbg !4585

if.then288:                                       ; preds = %lor.lhs.false285, %if.else282
  store i32 0, i32* %retval, align 4, !dbg !4586
  br label %return, !dbg !4586

if.end289:                                        ; preds = %lor.lhs.false285
  %129 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4587
  %130 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4589
  %call290 = call i32 @operand_less_p(%union.tree_node* %129, %union.tree_node* %130), !dbg !4590
  %cmp291 = icmp eq i32 %call290, 1, !dbg !4591
  br i1 %cmp291, label %if.then293, label %if.end294, !dbg !4592

if.then293:                                       ; preds = %if.end289
  store i32 -1, i32* %retval, align 4, !dbg !4593
  br label %return, !dbg !4593

if.end294:                                        ; preds = %if.end289
  %131 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4594
  %132 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4596
  %call295 = call i32 @operand_less_p(%union.tree_node* %131, %union.tree_node* %132), !dbg !4597
  %cmp296 = icmp eq i32 %call295, 1, !dbg !4598
  br i1 %cmp296, label %if.then298, label %if.end299, !dbg !4599

if.then298:                                       ; preds = %if.end294
  store i32 1, i32* %retval, align 4, !dbg !4600
  br label %return, !dbg !4600

if.end299:                                        ; preds = %if.end294
  %133 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4601
  %base300 = bitcast %union.tree_node* %133 to %struct.tree_base*, !dbg !4601
  %134 = bitcast %struct.tree_base* %base300 to i64*, !dbg !4601
  %bf.load301 = load i64, i64* %134, align 8, !dbg !4601
  %bf.clear302 = and i64 %bf.load301, 65535, !dbg !4601
  %bf.cast303 = trunc i64 %bf.clear302 to i32, !dbg !4601
  %cmp304 = icmp ne i32 %bf.cast303, 23, !dbg !4603
  br i1 %cmp304, label %if.then313, label %lor.lhs.false306, !dbg !4604

lor.lhs.false306:                                 ; preds = %if.end299
  %135 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4605
  %base307 = bitcast %union.tree_node* %135 to %struct.tree_base*, !dbg !4605
  %136 = bitcast %struct.tree_base* %base307 to i64*, !dbg !4605
  %bf.load308 = load i64, i64* %136, align 8, !dbg !4605
  %bf.clear309 = and i64 %bf.load308, 65535, !dbg !4605
  %bf.cast310 = trunc i64 %bf.clear309 to i32, !dbg !4605
  %cmp311 = icmp ne i32 %bf.cast310, 23, !dbg !4606
  br i1 %cmp311, label %if.then313, label %if.end321, !dbg !4607

if.then313:                                       ; preds = %lor.lhs.false306, %if.end299
  %137 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4608
  %138 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !4610
  %139 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4611
  %call314 = call %union.tree_node* @fold_binary_to_constant(i32 102, %union.tree_node* %137, %union.tree_node* %138, %union.tree_node* %139), !dbg !4612
  store %union.tree_node* %call314, %union.tree_node** %t, align 8, !dbg !4613
  %140 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4614
  %tobool315 = icmp ne %union.tree_node* %140, null, !dbg !4614
  br i1 %tobool315, label %land.lhs.true316, label %if.end320, !dbg !4616

land.lhs.true316:                                 ; preds = %if.then313
  %141 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4617
  %call317 = call i32 @integer_onep(%union.tree_node* %141), !dbg !4618
  %tobool318 = icmp ne i32 %call317, 0, !dbg !4618
  br i1 %tobool318, label %if.then319, label %if.end320, !dbg !4619

if.then319:                                       ; preds = %land.lhs.true316
  store i32 2, i32* %retval, align 4, !dbg !4620
  br label %return, !dbg !4620

if.end320:                                        ; preds = %land.lhs.true316, %if.then313
  br label %if.end321, !dbg !4621

if.end321:                                        ; preds = %if.end320, %lor.lhs.false306
  store i32 -2, i32* %retval, align 4, !dbg !4622
  br label %return, !dbg !4622

return:                                           ; preds = %if.end321, %if.then319, %if.then298, %if.then293, %if.then288, %if.end280, %if.end279, %if.then275, %if.then267, %if.then263, %if.then256, %if.then219, %if.then205, %if.then202, %if.then199, %if.then191, %if.then187, %if.then184, %if.then177, %if.then174, %if.then148, %if.then133, %if.then128, %if.then121, %if.then115, %if.then87, %if.then81, %if.then
  %142 = load i32, i32* %retval, align 4, !dbg !4623
  ret i32 %142, !dbg !4623
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node*) #2

declare dso_local i32 @tree_int_cst_sgn(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_unary_to_constant(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @tree_int_cst_compare(%union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @operand_less_p(%union.tree_node* %val, %union.tree_node* %val2) #0 !dbg !4624 {
entry:
  %retval = alloca i32, align 4
  %val.addr = alloca %union.tree_node*, align 8
  %val2.addr = alloca %union.tree_node*, align 8
  %tcmp = alloca %union.tree_node*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !4625, metadata !DIExpression()), !dbg !4626
  store %union.tree_node* %val2, %union.tree_node** %val2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val2.addr, metadata !4627, metadata !DIExpression()), !dbg !4628
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4629
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4629
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4629
  %bf.load = load i64, i64* %1, align 8, !dbg !4629
  %bf.clear = and i64 %bf.load, 65535, !dbg !4629
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4629
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !4631
  br i1 %cmp, label %land.lhs.true, label %if.else53, !dbg !4632

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4633
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4633
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4633
  %bf.load2 = load i64, i64* %3, align 8, !dbg !4633
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4633
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4633
  %cmp5 = icmp eq i32 %bf.cast4, 23, !dbg !4634
  br i1 %cmp5, label %if.then, label %if.else53, !dbg !4635

if.then:                                          ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4636
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !4636
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4636
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4636
  %base6 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !4636
  %6 = bitcast %struct.tree_base* %base6 to i64*, !dbg !4636
  %bf.load7 = load i64, i64* %6, align 8, !dbg !4636
  %bf.lshr = lshr i64 %bf.load7, 21, !dbg !4636
  %bf.clear8 = and i64 %bf.lshr, 1, !dbg !4636
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !4636
  %tobool = icmp ne i32 %bf.cast9, 0, !dbg !4636
  br i1 %tobool, label %if.then10, label %if.else, !dbg !4639

if.then10:                                        ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4640
  %int_cst = bitcast %union.tree_node* %7 to %struct.tree_int_cst*, !dbg !4640
  %int_cst11 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !4640
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst11, i32 0, i32 1, !dbg !4640
  %8 = load i64, i64* %high, align 8, !dbg !4640
  %9 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4640
  %int_cst12 = bitcast %union.tree_node* %9 to %struct.tree_int_cst*, !dbg !4640
  %int_cst13 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst12, i32 0, i32 1, !dbg !4640
  %high14 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst13, i32 0, i32 1, !dbg !4640
  %10 = load i64, i64* %high14, align 8, !dbg !4640
  %cmp15 = icmp ult i64 %8, %10, !dbg !4640
  br i1 %cmp15, label %lor.end, label %lor.rhs, !dbg !4640

lor.rhs:                                          ; preds = %if.then10
  %11 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4640
  %int_cst16 = bitcast %union.tree_node* %11 to %struct.tree_int_cst*, !dbg !4640
  %int_cst17 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst16, i32 0, i32 1, !dbg !4640
  %high18 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst17, i32 0, i32 1, !dbg !4640
  %12 = load i64, i64* %high18, align 8, !dbg !4640
  %13 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4640
  %int_cst19 = bitcast %union.tree_node* %13 to %struct.tree_int_cst*, !dbg !4640
  %int_cst20 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst19, i32 0, i32 1, !dbg !4640
  %high21 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst20, i32 0, i32 1, !dbg !4640
  %14 = load i64, i64* %high21, align 8, !dbg !4640
  %cmp22 = icmp eq i64 %12, %14, !dbg !4640
  br i1 %cmp22, label %land.rhs, label %land.end, !dbg !4640

land.rhs:                                         ; preds = %lor.rhs
  %15 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4640
  %int_cst23 = bitcast %union.tree_node* %15 to %struct.tree_int_cst*, !dbg !4640
  %int_cst24 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst23, i32 0, i32 1, !dbg !4640
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst24, i32 0, i32 0, !dbg !4640
  %16 = load i64, i64* %low, align 8, !dbg !4640
  %17 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4640
  %int_cst25 = bitcast %union.tree_node* %17 to %struct.tree_int_cst*, !dbg !4640
  %int_cst26 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst25, i32 0, i32 1, !dbg !4640
  %low27 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst26, i32 0, i32 0, !dbg !4640
  %18 = load i64, i64* %low27, align 8, !dbg !4640
  %cmp28 = icmp ult i64 %16, %18, !dbg !4640
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %19 = phi i1 [ false, %lor.rhs ], [ %cmp28, %land.rhs ], !dbg !4641
  br label %lor.end, !dbg !4640

lor.end:                                          ; preds = %land.end, %if.then10
  %20 = phi i1 [ true, %if.then10 ], [ %19, %land.end ]
  %lor.ext = zext i1 %20 to i32, !dbg !4640
  store i32 %lor.ext, i32* %retval, align 4, !dbg !4642
  br label %return, !dbg !4642

if.else:                                          ; preds = %if.then
  %21 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4643
  %int_cst29 = bitcast %union.tree_node* %21 to %struct.tree_int_cst*, !dbg !4643
  %int_cst30 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst29, i32 0, i32 1, !dbg !4643
  %high31 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst30, i32 0, i32 1, !dbg !4643
  %22 = load i64, i64* %high31, align 8, !dbg !4643
  %23 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4643
  %int_cst32 = bitcast %union.tree_node* %23 to %struct.tree_int_cst*, !dbg !4643
  %int_cst33 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst32, i32 0, i32 1, !dbg !4643
  %high34 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst33, i32 0, i32 1, !dbg !4643
  %24 = load i64, i64* %high34, align 8, !dbg !4643
  %cmp35 = icmp slt i64 %22, %24, !dbg !4643
  br i1 %cmp35, label %if.then51, label %lor.lhs.false, !dbg !4643

lor.lhs.false:                                    ; preds = %if.else
  %25 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4643
  %int_cst36 = bitcast %union.tree_node* %25 to %struct.tree_int_cst*, !dbg !4643
  %int_cst37 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst36, i32 0, i32 1, !dbg !4643
  %high38 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst37, i32 0, i32 1, !dbg !4643
  %26 = load i64, i64* %high38, align 8, !dbg !4643
  %27 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4643
  %int_cst39 = bitcast %union.tree_node* %27 to %struct.tree_int_cst*, !dbg !4643
  %int_cst40 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst39, i32 0, i32 1, !dbg !4643
  %high41 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst40, i32 0, i32 1, !dbg !4643
  %28 = load i64, i64* %high41, align 8, !dbg !4643
  %cmp42 = icmp eq i64 %26, %28, !dbg !4643
  br i1 %cmp42, label %land.lhs.true43, label %if.end, !dbg !4643

land.lhs.true43:                                  ; preds = %lor.lhs.false
  %29 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4643
  %int_cst44 = bitcast %union.tree_node* %29 to %struct.tree_int_cst*, !dbg !4643
  %int_cst45 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst44, i32 0, i32 1, !dbg !4643
  %low46 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst45, i32 0, i32 0, !dbg !4643
  %30 = load i64, i64* %low46, align 8, !dbg !4643
  %31 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4643
  %int_cst47 = bitcast %union.tree_node* %31 to %struct.tree_int_cst*, !dbg !4643
  %int_cst48 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst47, i32 0, i32 1, !dbg !4643
  %low49 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst48, i32 0, i32 0, !dbg !4643
  %32 = load i64, i64* %low49, align 8, !dbg !4643
  %cmp50 = icmp ult i64 %30, %32, !dbg !4643
  br i1 %cmp50, label %if.then51, label %if.end, !dbg !4646

if.then51:                                        ; preds = %land.lhs.true43, %if.else
  store i32 1, i32* %retval, align 4, !dbg !4647
  br label %return, !dbg !4647

if.end:                                           ; preds = %land.lhs.true43, %lor.lhs.false
  br label %if.end52

if.end52:                                         ; preds = %if.end
  br label %if.end67, !dbg !4648

if.else53:                                        ; preds = %land.lhs.true, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %tcmp, metadata !4649, metadata !DIExpression()), !dbg !4651
  call void @fold_defer_overflow_warnings(), !dbg !4652
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4653
  %34 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4654
  %35 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4655
  %call = call %union.tree_node* @fold_binary_to_constant(i32 97, %union.tree_node* %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !4656
  store %union.tree_node* %call, %union.tree_node** %tcmp, align 8, !dbg !4657
  call void @fold_undefer_and_ignore_overflow_warnings(), !dbg !4658
  %36 = load %union.tree_node*, %union.tree_node** %tcmp, align 8, !dbg !4659
  %tobool54 = icmp ne %union.tree_node* %36, null, !dbg !4659
  br i1 %tobool54, label %lor.lhs.false55, label %if.then61, !dbg !4661

lor.lhs.false55:                                  ; preds = %if.else53
  %37 = load %union.tree_node*, %union.tree_node** %tcmp, align 8, !dbg !4662
  %base56 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !4662
  %38 = bitcast %struct.tree_base* %base56 to i64*, !dbg !4662
  %bf.load57 = load i64, i64* %38, align 8, !dbg !4662
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !4662
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !4662
  %cmp60 = icmp ne i32 %bf.cast59, 23, !dbg !4663
  br i1 %cmp60, label %if.then61, label %if.end62, !dbg !4664

if.then61:                                        ; preds = %lor.lhs.false55, %if.else53
  store i32 -2, i32* %retval, align 4, !dbg !4665
  br label %return, !dbg !4665

if.end62:                                         ; preds = %lor.lhs.false55
  %39 = load %union.tree_node*, %union.tree_node** %tcmp, align 8, !dbg !4666
  %call63 = call i32 @integer_zerop(%union.tree_node* %39), !dbg !4668
  %tobool64 = icmp ne i32 %call63, 0, !dbg !4668
  br i1 %tobool64, label %if.end66, label %if.then65, !dbg !4669

if.then65:                                        ; preds = %if.end62
  store i32 1, i32* %retval, align 4, !dbg !4670
  br label %return, !dbg !4670

if.end66:                                         ; preds = %if.end62
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end52
  %40 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4671
  %call68 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %40), !dbg !4673
  %tobool69 = icmp ne i8 %call68, 0, !dbg !4673
  br i1 %tobool69, label %if.then70, label %if.else73, !dbg !4674

if.then70:                                        ; preds = %if.end67
  %41 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4675
  %call71 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %41), !dbg !4676
  %conv = zext i8 %call71 to i32, !dbg !4676
  %tobool72 = icmp ne i32 %conv, 0, !dbg !4676
  %42 = zext i1 %tobool72 to i64, !dbg !4676
  %cond = select i1 %tobool72, i32 0, i32 1, !dbg !4676
  store i32 %cond, i32* %retval, align 4, !dbg !4677
  br label %return, !dbg !4677

if.else73:                                        ; preds = %if.end67
  %43 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !4678
  %call74 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %43), !dbg !4680
  %tobool75 = icmp ne i8 %call74, 0, !dbg !4680
  br i1 %tobool75, label %if.then76, label %if.end81, !dbg !4681

if.then76:                                        ; preds = %if.else73
  %44 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4682
  %call77 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %44), !dbg !4683
  %conv78 = zext i8 %call77 to i32, !dbg !4683
  %tobool79 = icmp ne i32 %conv78, 0, !dbg !4683
  %45 = zext i1 %tobool79 to i64, !dbg !4683
  %cond80 = select i1 %tobool79, i32 0, i32 1, !dbg !4683
  store i32 %cond80, i32* %retval, align 4, !dbg !4684
  br label %return, !dbg !4684

if.end81:                                         ; preds = %if.else73
  br label %if.end82

if.end82:                                         ; preds = %if.end81
  store i32 0, i32* %retval, align 4, !dbg !4685
  br label %return, !dbg !4685

return:                                           ; preds = %if.end82, %if.then76, %if.then70, %if.then65, %if.then61, %if.then51, %lor.end
  %46 = load i32, i32* %retval, align 4, !dbg !4686
  ret i32 %46, !dbg !4686
}

declare dso_local %union.tree_node* @fold_binary_to_constant(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @integer_onep(%union.tree_node*) #2

declare dso_local void @fold_defer_overflow_warnings() #2

declare dso_local void @fold_undefer_and_ignore_overflow_warnings() #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @needs_overflow_infinity(%union.tree_node* %type) #0 !dbg !4687 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4688, metadata !DIExpression()), !dbg !4689
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4690
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4690
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4690
  %bf.load = load i64, i64* %1, align 8, !dbg !4690
  %bf.clear = and i64 %bf.load, 65535, !dbg !4690
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4690
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !4690
  br i1 %cmp, label %land.rhs, label %lor.lhs.false, !dbg !4690

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4690
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4690
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4690
  %bf.load2 = load i64, i64* %3, align 8, !dbg !4690
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4690
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4690
  %cmp5 = icmp eq i32 %bf.cast4, 7, !dbg !4690
  br i1 %cmp5, label %land.rhs, label %lor.lhs.false6, !dbg !4690

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4690
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4690
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !4690
  %bf.load8 = load i64, i64* %5, align 8, !dbg !4690
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !4690
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !4690
  %cmp11 = icmp eq i32 %bf.cast10, 8, !dbg !4690
  br i1 %cmp11, label %land.rhs, label %land.end, !dbg !4691

land.rhs:                                         ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4692
  %base12 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4692
  %7 = bitcast %struct.tree_base* %base12 to i64*, !dbg !4692
  %bf.load13 = load i64, i64* %7, align 8, !dbg !4692
  %bf.lshr = lshr i64 %bf.load13, 21, !dbg !4692
  %bf.clear14 = and i64 %bf.lshr, 1, !dbg !4692
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !4692
  %tobool = icmp ne i32 %bf.cast15, 0, !dbg !4692
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !4692

lor.rhs:                                          ; preds = %land.rhs
  %8 = load i32, i32* @flag_wrapv, align 4, !dbg !4692
  %tobool16 = icmp ne i32 %8, 0, !dbg !4692
  br label %lor.end, !dbg !4692

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %9 = phi i1 [ true, %land.rhs ], [ %tobool16, %lor.rhs ]
  %lnot = xor i1 %9, true, !dbg !4693
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.lhs.false6
  %10 = phi i1 [ false, %lor.lhs.false6 ], [ %lnot, %lor.end ], !dbg !4694
  %land.ext = zext i1 %10 to i32, !dbg !4691
  %conv = trunc i32 %land.ext to i8, !dbg !4690
  ret i8 %conv, !dbg !4695
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @vrp_val_min(%union.tree_node* %type) #0 !dbg !4696 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4699, metadata !DIExpression()), !dbg !4700
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4701
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4701
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4701
  %bf.load = load i64, i64* %1, align 8, !dbg !4701
  %bf.clear = and i64 %bf.load, 65535, !dbg !4701
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4701
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !4701
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !4701

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4701
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4701
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4701
  %bf.load2 = load i64, i64* %3, align 8, !dbg !4701
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4701
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4701
  %cmp5 = icmp eq i32 %bf.cast4, 7, !dbg !4701
  br i1 %cmp5, label %if.end, label %lor.lhs.false6, !dbg !4701

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4701
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4701
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !4701
  %bf.load8 = load i64, i64* %5, align 8, !dbg !4701
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !4701
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !4701
  %cmp11 = icmp eq i32 %bf.cast10, 8, !dbg !4701
  br i1 %cmp11, label %if.end, label %if.then, !dbg !4703

if.then:                                          ; preds = %lor.lhs.false6
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4704
  br label %return, !dbg !4704

if.end:                                           ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4705
  %type12 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !4705
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 13, !dbg !4705
  %7 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !4705
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !4706
  br label %return, !dbg !4706

return:                                           ; preds = %if.end, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4707
  ret %union.tree_node* %8, !dbg !4707
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @vrp_val_max(%union.tree_node* %type) #0 !dbg !4708 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4709, metadata !DIExpression()), !dbg !4710
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4711
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4711
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4711
  %bf.load = load i64, i64* %1, align 8, !dbg !4711
  %bf.clear = and i64 %bf.load, 65535, !dbg !4711
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4711
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !4711
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !4711

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4711
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4711
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4711
  %bf.load2 = load i64, i64* %3, align 8, !dbg !4711
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4711
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4711
  %cmp5 = icmp eq i32 %bf.cast4, 7, !dbg !4711
  br i1 %cmp5, label %if.end, label %lor.lhs.false6, !dbg !4711

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4711
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4711
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !4711
  %bf.load8 = load i64, i64* %5, align 8, !dbg !4711
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !4711
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !4711
  %cmp11 = icmp eq i32 %bf.cast10, 8, !dbg !4711
  br i1 %cmp11, label %if.end, label %if.then, !dbg !4713

if.then:                                          ; preds = %lor.lhs.false6
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4714
  br label %return, !dbg !4714

if.end:                                           ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4715
  %type12 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !4715
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 14, !dbg !4715
  %7 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !4715
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !4716
  br label %return, !dbg !4716

return:                                           ; preds = %if.end, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4717
  ret %union.tree_node* %8, !dbg !4717
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @loop_optimizer_init(i32) #2

declare dso_local void @rewrite_into_loop_closed_ssa(%struct.bitmap_head_def*, i32) #2

declare dso_local void @scev_initialize() #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_range_assertions() #0 !dbg !4718 {
entry:
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4719
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !4720
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4721
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4721
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !4721
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4721
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 2, !dbg !4721
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4721
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !4721
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4721

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4721
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4721
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !4721
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !4721
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !4721
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !4721
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i32 0, i32 0, !dbg !4721
  br label %cond.end, !dbg !4721

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4721

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4721
  %call4 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !4721
  %conv = zext i32 %call4 to i64, !dbg !4721
  %call5 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !4721
  %6 = bitcast i8* %call5 to %struct.assert_locus_d**, !dbg !4721
  store %struct.assert_locus_d** %6, %struct.assert_locus_d*** @asserts_for, align 8, !dbg !4722
  call void @calculate_dominance_info(i32 1), !dbg !4723
  %call6 = call zeroext i8 @find_assert_locations(), !dbg !4724
  %tobool7 = icmp ne i8 %call6, 0, !dbg !4724
  br i1 %tobool7, label %if.then, label %if.end, !dbg !4726

if.then:                                          ; preds = %cond.end
  call void @process_assert_insertions(), !dbg !4727
  call void @update_ssa(i32 4096), !dbg !4729
  br label %if.end, !dbg !4730

if.end:                                           ; preds = %if.then, %cond.end
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4731
  %tobool8 = icmp ne %struct._IO_FILE* %7, null, !dbg !4731
  br i1 %tobool8, label %land.lhs.true, label %if.end12, !dbg !4733

land.lhs.true:                                    ; preds = %if.end
  %8 = load i32, i32* @dump_flags, align 4, !dbg !4734
  %and = and i32 %8, 8, !dbg !4735
  %tobool9 = icmp ne i32 %and, 0, !dbg !4735
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !4736

if.then10:                                        ; preds = %land.lhs.true
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4737
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.30, i64 0, i64 0)), !dbg !4739
  %10 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4740
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4741
  %12 = load i32, i32* @dump_flags, align 4, !dbg !4742
  call void @dump_function_to_file(%union.tree_node* %10, %struct._IO_FILE* %11, i32 %12), !dbg !4743
  br label %if.end12, !dbg !4744

if.end12:                                         ; preds = %if.then10, %land.lhs.true, %if.end
  %13 = load %struct.assert_locus_d**, %struct.assert_locus_d*** @asserts_for, align 8, !dbg !4745
  %14 = bitcast %struct.assert_locus_d** %13 to i8*, !dbg !4745
  call void @free(i8* %14), !dbg !4746
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !4747
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %15), !dbg !4747
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !4747
  ret void, !dbg !4748
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_heap* @VEC_edge_heap_alloc(i32 %alloc_) #0 !dbg !4749 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4752, metadata !DIExpression()), !dbg !4753
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4753
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !4753
  %1 = bitcast i8* %call to %struct.VEC_edge_heap*, !dbg !4753
  ret %struct.VEC_edge_heap* %1, !dbg !4753
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_switch_update_heap* @VEC_switch_update_heap_alloc(i32 %alloc_) #0 !dbg !4754 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4757, metadata !DIExpression()), !dbg !4758
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4758
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 16), !dbg !4758
  %1 = bitcast i8* %call to %struct.VEC_switch_update_heap*, !dbg !4758
  ret %struct.VEC_switch_update_heap* %1, !dbg !4758
}

declare dso_local void @threadedge_initialize_values() #2

; Function Attrs: noinline nounwind uwtable
define internal void @vrp_initialize() #0 !dbg !4759 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %tmp34 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  %def = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4760, metadata !DIExpression()), !dbg !4761
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4762
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4762
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !4762
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4762
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 2, !dbg !4762
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4762
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !4762
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4762

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4762
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4762
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !4762
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !4762
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !4762
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !4762
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i32 0, i32 0, !dbg !4762
  br label %cond.end, !dbg !4762

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4762

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4762
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !4762
  %conv = zext i32 %call to i64, !dbg !4762
  %call4 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !4762
  %6 = bitcast i8* %call4 to %struct.value_range_d**, !dbg !4762
  store %struct.value_range_d** %6, %struct.value_range_d*** @vr_value, align 8, !dbg !4763
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4764
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !4764
  %gimple_df6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 3, !dbg !4764
  %8 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df6, align 8, !dbg !4764
  %ssa_names7 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %8, i32 0, i32 2, !dbg !4764
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names7, align 8, !dbg !4764
  %tobool8 = icmp ne %struct.VEC_tree_gc* %9, null, !dbg !4764
  br i1 %tobool8, label %cond.true9, label %cond.false14, !dbg !4764

cond.true9:                                       ; preds = %cond.end
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4764
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !4764
  %gimple_df11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 3, !dbg !4764
  %11 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df11, align 8, !dbg !4764
  %ssa_names12 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %11, i32 0, i32 2, !dbg !4764
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names12, align 8, !dbg !4764
  %base13 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %12, i32 0, i32 0, !dbg !4764
  br label %cond.end15, !dbg !4764

cond.false14:                                     ; preds = %cond.end
  br label %cond.end15, !dbg !4764

cond.end15:                                       ; preds = %cond.false14, %cond.true9
  %cond16 = phi %struct.VEC_tree_base* [ %base13, %cond.true9 ], [ null, %cond.false14 ], !dbg !4764
  %call17 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond16), !dbg !4764
  %conv18 = zext i32 %call17 to i64, !dbg !4764
  %call19 = call i8* @xcalloc(i64 %conv18, i64 4), !dbg !4764
  %13 = bitcast i8* %call19 to i32*, !dbg !4764
  store i32* %13, i32** @vr_phi_edge_counts, align 8, !dbg !4765
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4766
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !4766
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 1, !dbg !4766
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4766
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 0, !dbg !4766
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4766
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 6, !dbg !4766
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4766
  store %struct.basic_block_def* %17, %struct.basic_block_def** %bb, align 8, !dbg !4766
  br label %for.cond, !dbg !4766

for.cond:                                         ; preds = %for.inc63, %cond.end15
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4768
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4768
  %add.ptr21 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !4768
  %cfg22 = getelementptr inbounds %struct.function, %struct.function* %add.ptr21, i32 0, i32 1, !dbg !4768
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg22, align 8, !dbg !4768
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 1, !dbg !4768
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4768
  %cmp = icmp ne %struct.basic_block_def* %18, %21, !dbg !4768
  br i1 %cmp, label %for.body, label %for.end65, !dbg !4766

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !4770, metadata !DIExpression()), !dbg !4772
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4773
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %22), !dbg !4775
  %23 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4775
  %24 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4775
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 24, i1 false), !dbg !4775
  br label %for.cond24, !dbg !4776

for.cond24:                                       ; preds = %for.inc, %for.body
  %call25 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4777
  %tobool26 = icmp ne i8 %call25, 0, !dbg !4779
  %lnot = xor i1 %tobool26, true, !dbg !4779
  br i1 %lnot, label %for.body27, label %for.end, !dbg !4780

for.body27:                                       ; preds = %for.cond24
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4781, metadata !DIExpression()), !dbg !4783
  %call28 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4784
  store %union.gimple_statement_d* %call28, %union.gimple_statement_d** %phi, align 8, !dbg !4783
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4785
  %call29 = call zeroext i8 @stmt_interesting_for_vrp(%union.gimple_statement_d* %25), !dbg !4787
  %tobool30 = icmp ne i8 %call29, 0, !dbg !4787
  br i1 %tobool30, label %if.else, label %if.then, !dbg !4788

if.then:                                          ; preds = %for.body27
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4789, metadata !DIExpression()), !dbg !4791
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4792
  %call31 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %26), !dbg !4792
  %call32 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call31), !dbg !4792
  store %union.tree_node* %call32, %union.tree_node** %lhs, align 8, !dbg !4791
  %27 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4793
  %call33 = call %struct.value_range_d* @get_value_range(%union.tree_node* %27), !dbg !4794
  call void @set_value_range_to_varying(%struct.value_range_d* %call33), !dbg !4795
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4796
  call void @prop_set_simulate_again(%union.gimple_statement_d* %28, i8 zeroext 0), !dbg !4797
  br label %if.end, !dbg !4798

if.else:                                          ; preds = %for.body27
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4799
  call void @prop_set_simulate_again(%union.gimple_statement_d* %29, i8 zeroext 1), !dbg !4800
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !4801

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !4802
  br label %for.cond24, !dbg !4803, !llvm.loop !4804

for.end:                                          ; preds = %for.cond24
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4806
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp34, %struct.basic_block_def* %30), !dbg !4808
  %31 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4808
  %32 = bitcast %struct.gimple_stmt_iterator* %tmp34 to i8*, !dbg !4808
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 24, i1 false), !dbg !4808
  br label %for.cond35, !dbg !4809

for.cond35:                                       ; preds = %for.inc61, %for.end
  %call36 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4810
  %tobool37 = icmp ne i8 %call36, 0, !dbg !4812
  %lnot38 = xor i1 %tobool37, true, !dbg !4812
  br i1 %lnot38, label %for.body39, label %for.end62, !dbg !4813

for.body39:                                       ; preds = %for.cond35
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4814, metadata !DIExpression()), !dbg !4816
  %call40 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4817
  store %union.gimple_statement_d* %call40, %union.gimple_statement_d** %stmt, align 8, !dbg !4816
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4818
  %call41 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %33), !dbg !4820
  %tobool42 = icmp ne i8 %call41, 0, !dbg !4820
  br i1 %tobool42, label %if.then43, label %if.else44, !dbg !4821

if.then43:                                        ; preds = %for.body39
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4822
  call void @prop_set_simulate_again(%union.gimple_statement_d* %34, i8 zeroext 1), !dbg !4823
  br label %if.end60, !dbg !4823

if.else44:                                        ; preds = %for.body39
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4824
  %call45 = call zeroext i8 @stmt_interesting_for_vrp(%union.gimple_statement_d* %35), !dbg !4826
  %tobool46 = icmp ne i8 %call45, 0, !dbg !4826
  br i1 %tobool46, label %if.else58, label %if.then47, !dbg !4827

if.then47:                                        ; preds = %if.else44
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %i, metadata !4828, metadata !DIExpression()), !dbg !4842
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !4843, metadata !DIExpression()), !dbg !4844
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4845
  %call48 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %i, %union.gimple_statement_d* %36, i32 2), !dbg !4845
  store %union.tree_node* %call48, %union.tree_node** %def, align 8, !dbg !4845
  br label %for.cond49, !dbg !4845

for.cond49:                                       ; preds = %for.inc55, %if.then47
  %call50 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %i), !dbg !4847
  %tobool51 = icmp ne i8 %call50, 0, !dbg !4847
  %lnot52 = xor i1 %tobool51, true, !dbg !4847
  br i1 %lnot52, label %for.body53, label %for.end57, !dbg !4845

for.body53:                                       ; preds = %for.cond49
  %37 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4849
  %call54 = call %struct.value_range_d* @get_value_range(%union.tree_node* %37), !dbg !4850
  call void @set_value_range_to_varying(%struct.value_range_d* %call54), !dbg !4851
  br label %for.inc55, !dbg !4851

for.inc55:                                        ; preds = %for.body53
  %call56 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %i), !dbg !4847
  store %union.tree_node* %call56, %union.tree_node** %def, align 8, !dbg !4847
  br label %for.cond49, !dbg !4847, !llvm.loop !4852

for.end57:                                        ; preds = %for.cond49
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4854
  call void @prop_set_simulate_again(%union.gimple_statement_d* %38, i8 zeroext 0), !dbg !4855
  br label %if.end59, !dbg !4856

if.else58:                                        ; preds = %if.else44
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4857
  call void @prop_set_simulate_again(%union.gimple_statement_d* %39, i8 zeroext 1), !dbg !4858
  br label %if.end59

if.end59:                                         ; preds = %if.else58, %for.end57
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then43
  br label %for.inc61, !dbg !4859

for.inc61:                                        ; preds = %if.end60
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !4860
  br label %for.cond35, !dbg !4861, !llvm.loop !4862

for.end62:                                        ; preds = %for.cond35
  br label %for.inc63, !dbg !4864

for.inc63:                                        ; preds = %for.end62
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4768
  %next_bb64 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 6, !dbg !4768
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb64, align 8, !dbg !4768
  store %struct.basic_block_def* %41, %struct.basic_block_def** %bb, align 8, !dbg !4768
  br label %for.cond, !dbg !4768, !llvm.loop !4865

for.end65:                                        ; preds = %for.cond
  ret void, !dbg !4867
}

declare dso_local void @ssa_propagate(i32 (%union.gimple_statement_d*, %struct.edge_def**, %union.tree_node**)*, i32 (%union.gimple_statement_d*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @vrp_visit_stmt(%union.gimple_statement_d* %stmt, %struct.edge_def** %taken_edge_p, %union.tree_node** %output_p) #0 !dbg !4868 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %taken_edge_p.addr = alloca %struct.edge_def**, align 8
  %output_p.addr = alloca %union.tree_node**, align 8
  %def = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4872, metadata !DIExpression()), !dbg !4873
  store %struct.edge_def** %taken_edge_p, %struct.edge_def*** %taken_edge_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %taken_edge_p.addr, metadata !4874, metadata !DIExpression()), !dbg !4875
  store %union.tree_node** %output_p, %union.tree_node*** %output_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %output_p.addr, metadata !4876, metadata !DIExpression()), !dbg !4877
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !4878, metadata !DIExpression()), !dbg !4879
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4880, metadata !DIExpression()), !dbg !4881
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4882
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !4882
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4884

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !4885
  %and = and i32 %1, 8, !dbg !4886
  %tobool1 = icmp ne i32 %and, 0, !dbg !4886
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4887

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4888
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0)), !dbg !4890
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4891
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4892
  %5 = load i32, i32* @dump_flags, align 4, !dbg !4893
  call void @print_gimple_stmt(%struct._IO_FILE* %3, %union.gimple_statement_d* %4, i32 0, i32 %5), !dbg !4894
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4895
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !4896
  br label %if.end, !dbg !4897

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4898
  %call3 = call zeroext i8 @stmt_interesting_for_vrp(%union.gimple_statement_d* %7), !dbg !4900
  %tobool4 = icmp ne i8 %call3, 0, !dbg !4900
  br i1 %tobool4, label %if.else, label %if.then5, !dbg !4901

if.then5:                                         ; preds = %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4902
  %call6 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %8), !dbg !4902
  %tobool7 = icmp ne i8 %call6, 0, !dbg !4902
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !4902

cond.true:                                        ; preds = %if.then5
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 6101, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !4902
  br label %cond.end, !dbg !4902

cond.false:                                       ; preds = %if.then5
  br label %cond.end, !dbg !4902

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4902
  br label %if.end45, !dbg !4902

if.else:                                          ; preds = %if.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4903
  %call8 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %9), !dbg !4905
  %conv = zext i8 %call8 to i32, !dbg !4905
  %tobool9 = icmp ne i32 %conv, 0, !dbg !4905
  br i1 %tobool9, label %if.then13, label %lor.lhs.false, !dbg !4906

lor.lhs.false:                                    ; preds = %if.else
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4907
  %call10 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %10), !dbg !4908
  %conv11 = zext i8 %call10 to i32, !dbg !4908
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !4908
  br i1 %tobool12, label %if.then13, label %if.else30, !dbg !4909

if.then13:                                        ; preds = %lor.lhs.false, %if.else
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4910
  %call14 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %11), !dbg !4913
  %conv15 = zext i8 %call14 to i32, !dbg !4913
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !4913
  br i1 %tobool16, label %land.lhs.true17, label %lor.lhs.false24, !dbg !4914

land.lhs.true17:                                  ; preds = %if.then13
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4915
  %call18 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %12), !dbg !4916
  %cmp = icmp ne %union.tree_node* %call18, null, !dbg !4917
  br i1 %cmp, label %land.lhs.true20, label %lor.lhs.false24, !dbg !4918

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4919
  %call21 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %13), !dbg !4919
  %decl_minimal = bitcast %union.tree_node* %call21 to %struct.tree_decl_minimal*, !dbg !4919
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !4919
  %14 = load i32, i32* %locus, align 8, !dbg !4919
  %cmp22 = icmp ule i32 %14, 1, !dbg !4919
  br i1 %cmp22, label %if.then27, label %lor.lhs.false24, !dbg !4920

lor.lhs.false24:                                  ; preds = %land.lhs.true20, %land.lhs.true17, %if.then13
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4921
  %call25 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %15), !dbg !4922
  %tobool26 = icmp ne %union.tree_node* %call25, null, !dbg !4922
  br i1 %tobool26, label %if.end29, label %if.then27, !dbg !4923

if.then27:                                        ; preds = %lor.lhs.false24, %land.lhs.true20
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4924
  %17 = load %union.tree_node**, %union.tree_node*** %output_p.addr, align 8, !dbg !4925
  %call28 = call i32 @vrp_visit_assignment_or_call(%union.gimple_statement_d* %16, %union.tree_node** %17), !dbg !4926
  store i32 %call28, i32* %retval, align 4, !dbg !4927
  br label %return, !dbg !4927

if.end29:                                         ; preds = %lor.lhs.false24
  br label %if.end44, !dbg !4928

if.else30:                                        ; preds = %lor.lhs.false
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4929
  %call31 = call i32 @gimple_code(%union.gimple_statement_d* %18), !dbg !4931
  %cmp32 = icmp eq i32 %call31, 1, !dbg !4932
  br i1 %cmp32, label %if.then34, label %if.else36, !dbg !4933

if.then34:                                        ; preds = %if.else30
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4934
  %20 = load %struct.edge_def**, %struct.edge_def*** %taken_edge_p.addr, align 8, !dbg !4935
  %call35 = call i32 @vrp_visit_cond_stmt(%union.gimple_statement_d* %19, %struct.edge_def** %20), !dbg !4936
  store i32 %call35, i32* %retval, align 4, !dbg !4937
  br label %return, !dbg !4937

if.else36:                                        ; preds = %if.else30
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4938
  %call37 = call i32 @gimple_code(%union.gimple_statement_d* %21), !dbg !4940
  %cmp38 = icmp eq i32 %call37, 5, !dbg !4941
  br i1 %cmp38, label %if.then40, label %if.end42, !dbg !4942

if.then40:                                        ; preds = %if.else36
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4943
  %23 = load %struct.edge_def**, %struct.edge_def*** %taken_edge_p.addr, align 8, !dbg !4944
  %call41 = call i32 @vrp_visit_switch_stmt(%union.gimple_statement_d* %22, %struct.edge_def** %23), !dbg !4945
  store i32 %call41, i32* %retval, align 4, !dbg !4946
  br label %return, !dbg !4946

if.end42:                                         ; preds = %if.else36
  br label %if.end43

if.end43:                                         ; preds = %if.end42
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end29
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %cond.end
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4947
  %call46 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %24, i32 2), !dbg !4947
  store %union.tree_node* %call46, %union.tree_node** %def, align 8, !dbg !4947
  br label %for.cond, !dbg !4947

for.cond:                                         ; preds = %for.inc, %if.end45
  %call47 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !4949
  %tobool48 = icmp ne i8 %call47, 0, !dbg !4949
  %lnot = xor i1 %tobool48, true, !dbg !4949
  br i1 %lnot, label %for.body, label %for.end, !dbg !4947

for.body:                                         ; preds = %for.cond
  %25 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4951
  %call49 = call %struct.value_range_d* @get_value_range(%union.tree_node* %25), !dbg !4952
  call void @set_value_range_to_varying(%struct.value_range_d* %call49), !dbg !4953
  br label %for.inc, !dbg !4953

for.inc:                                          ; preds = %for.body
  %call50 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !4949
  store %union.tree_node* %call50, %union.tree_node** %def, align 8, !dbg !4949
  br label %for.cond, !dbg !4949, !llvm.loop !4954

for.end:                                          ; preds = %for.cond
  store i32 2, i32* %retval, align 4, !dbg !4956
  br label %return, !dbg !4956

return:                                           ; preds = %for.end, %if.then40, %if.then34, %if.then27
  %26 = load i32, i32* %retval, align 4, !dbg !4957
  ret i32 %26, !dbg !4957
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vrp_visit_phi_node(%union.gimple_statement_d* %phi) #0 !dbg !4958 {
entry:
  %retval = alloca i32, align 4
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i64, align 8
  %lhs = alloca %union.tree_node*, align 8
  %lhs_vr = alloca %struct.value_range_d*, align 8
  %vr_result = alloca %struct.value_range_d, align 8
  %edges = alloca i32, align 4
  %old_edges = alloca i32, align 4
  %l = alloca %struct.loop*, align 8
  %e = alloca %struct.edge_def*, align 8
  %arg = alloca %union.tree_node*, align 8
  %vr_arg = alloca %struct.value_range_d, align 8
  %cmp_min = alloca i32, align 4
  %cmp_max = alloca i32, align 4
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !4961, metadata !DIExpression()), !dbg !4962
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4963, metadata !DIExpression()), !dbg !4964
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4965, metadata !DIExpression()), !dbg !4966
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !4967
  %call = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %0), !dbg !4967
  %call1 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call), !dbg !4967
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !4966
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %lhs_vr, metadata !4968, metadata !DIExpression()), !dbg !4969
  %1 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4970
  %call2 = call %struct.value_range_d* @get_value_range(%union.tree_node* %1), !dbg !4971
  store %struct.value_range_d* %call2, %struct.value_range_d** %lhs_vr, align 8, !dbg !4969
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %vr_result, metadata !4972, metadata !DIExpression()), !dbg !4973
  %2 = bitcast %struct.value_range_d* %vr_result to i8*, !dbg !4973
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 32, i1 false), !dbg !4973
  call void @llvm.dbg.declare(metadata i32* %edges, metadata !4974, metadata !DIExpression()), !dbg !4975
  call void @llvm.dbg.declare(metadata i32* %old_edges, metadata !4976, metadata !DIExpression()), !dbg !4977
  call void @llvm.dbg.declare(metadata %struct.loop** %l, metadata !4978, metadata !DIExpression()), !dbg !4979
  %3 = load %struct.value_range_d*, %struct.value_range_d** %lhs_vr, align 8, !dbg !4980
  call void @copy_value_range(%struct.value_range_d* %vr_result, %struct.value_range_d* %3), !dbg !4981
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4982
  %tobool = icmp ne %struct._IO_FILE* %4, null, !dbg !4982
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4984

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* @dump_flags, align 4, !dbg !4985
  %and = and i32 %5, 8, !dbg !4986
  %tobool3 = icmp ne i32 %and, 0, !dbg !4986
  br i1 %tobool3, label %if.then, label %if.end, !dbg !4987

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4988
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.48, i64 0, i64 0)), !dbg !4990
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4991
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !4992
  %9 = load i32, i32* @dump_flags, align 4, !dbg !4993
  call void @print_gimple_stmt(%struct._IO_FILE* %7, %union.gimple_statement_d* %8, i32 0, i32 %9), !dbg !4994
  br label %if.end, !dbg !4995

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  store i32 0, i32* %edges, align 4, !dbg !4996
  store i64 0, i64* %i, align 8, !dbg !4997
  br label %for.cond, !dbg !4999

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i64, i64* %i, align 8, !dbg !5000
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5002
  %call5 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !5003
  %conv = zext i32 %call5 to i64, !dbg !5003
  %cmp = icmp ult i64 %10, %conv, !dbg !5004
  br i1 %cmp, label %for.body, label %for.end, !dbg !5005

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5006, metadata !DIExpression()), !dbg !5008
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5009
  %13 = load i64, i64* %i, align 8, !dbg !5010
  %call7 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %12, i64 %13), !dbg !5011
  store %struct.edge_def* %call7, %struct.edge_def** %e, align 8, !dbg !5008
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5012
  %tobool8 = icmp ne %struct._IO_FILE* %14, null, !dbg !5012
  br i1 %tobool8, label %land.lhs.true9, label %if.end18, !dbg !5014

land.lhs.true9:                                   ; preds = %for.body
  %15 = load i32, i32* @dump_flags, align 4, !dbg !5015
  %and10 = and i32 %15, 8, !dbg !5016
  %tobool11 = icmp ne i32 %and10, 0, !dbg !5016
  br i1 %tobool11, label %if.then12, label %if.end18, !dbg !5017

if.then12:                                        ; preds = %land.lhs.true9
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5018
  %17 = load i64, i64* %i, align 8, !dbg !5020
  %conv13 = trunc i64 %17 to i32, !dbg !5021
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5022
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 0, !dbg !5023
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5023
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 9, !dbg !5024
  %20 = load i32, i32* %index, align 8, !dbg !5024
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5025
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 1, !dbg !5026
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5026
  %index14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 9, !dbg !5027
  %23 = load i32, i32* %index14, align 8, !dbg !5027
  %24 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5028
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 7, !dbg !5029
  %25 = load i32, i32* %flags, align 8, !dbg !5029
  %and15 = and i32 %25, 4096, !dbg !5030
  %tobool16 = icmp ne i32 %and15, 0, !dbg !5031
  %26 = zext i1 %tobool16 to i64, !dbg !5031
  %cond = select i1 %tobool16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i64 0, i64 0), !dbg !5031
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.49, i64 0, i64 0), i32 %conv13, i32 %20, i32 %23, i8* %cond), !dbg !5032
  br label %if.end18, !dbg !5033

if.end18:                                         ; preds = %if.then12, %land.lhs.true9, %for.body
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5034
  %flags19 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 7, !dbg !5036
  %28 = load i32, i32* %flags19, align 8, !dbg !5036
  %and20 = and i32 %28, 4096, !dbg !5037
  %tobool21 = icmp ne i32 %and20, 0, !dbg !5037
  br i1 %tobool21, label %if.then22, label %if.end53, !dbg !5038

if.then22:                                        ; preds = %if.end18
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !5039, metadata !DIExpression()), !dbg !5041
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5042
  %30 = load i64, i64* %i, align 8, !dbg !5042
  %conv23 = trunc i64 %30 to i32, !dbg !5042
  %call24 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %29, i32 %conv23), !dbg !5042
  %call25 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call24), !dbg !5042
  store %union.tree_node* %call25, %union.tree_node** %arg, align 8, !dbg !5041
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %vr_arg, metadata !5043, metadata !DIExpression()), !dbg !5044
  %31 = load i32, i32* %edges, align 4, !dbg !5045
  %inc = add nsw i32 %31, 1, !dbg !5045
  store i32 %inc, i32* %edges, align 4, !dbg !5045
  %32 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5046
  %base = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !5046
  %33 = bitcast %struct.tree_base* %base to i64*, !dbg !5046
  %bf.load = load i64, i64* %33, align 8, !dbg !5046
  %bf.clear = and i64 %bf.load, 65535, !dbg !5046
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5046
  %cmp26 = icmp eq i32 %bf.cast, 141, !dbg !5048
  br i1 %cmp26, label %if.then28, label %if.else, !dbg !5049

if.then28:                                        ; preds = %if.then22
  %34 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5050
  %call29 = call %struct.value_range_d* @get_value_range(%union.tree_node* %34), !dbg !5052
  %35 = bitcast %struct.value_range_d* %vr_arg to i8*, !dbg !5053
  %36 = bitcast %struct.value_range_d* %call29 to i8*, !dbg !5053
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 32, i1 false), !dbg !5053
  br label %if.end38, !dbg !5054

if.else:                                          ; preds = %if.then22
  %37 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5055
  %call30 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %37), !dbg !5058
  %tobool31 = icmp ne i8 %call30, 0, !dbg !5058
  br i1 %tobool31, label %if.then32, label %if.end37, !dbg !5059

if.then32:                                        ; preds = %if.else
  %38 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5060
  %call33 = call %union.tree_node* @copy_node_stat(%union.tree_node* %38), !dbg !5060
  store %union.tree_node* %call33, %union.tree_node** %arg, align 8, !dbg !5062
  %39 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5063
  %base34 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !5063
  %40 = bitcast %struct.tree_base* %base34 to i64*, !dbg !5063
  %bf.load35 = load i64, i64* %40, align 8, !dbg !5064
  %bf.clear36 = and i64 %bf.load35, -134217729, !dbg !5064
  store i64 %bf.clear36, i64* %40, align 8, !dbg !5064
  br label %if.end37, !dbg !5065

if.end37:                                         ; preds = %if.then32, %if.else
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_arg, i32 0, i32 0, !dbg !5066
  store i32 1, i32* %type, align 8, !dbg !5067
  %41 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5068
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_arg, i32 0, i32 1, !dbg !5069
  store %union.tree_node* %41, %union.tree_node** %min, align 8, !dbg !5070
  %42 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5071
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_arg, i32 0, i32 2, !dbg !5072
  store %union.tree_node* %42, %union.tree_node** %max, align 8, !dbg !5073
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_arg, i32 0, i32 3, !dbg !5074
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %equiv, align 8, !dbg !5075
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then28
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5076
  %tobool39 = icmp ne %struct._IO_FILE* %43, null, !dbg !5076
  br i1 %tobool39, label %land.lhs.true40, label %if.end47, !dbg !5078

land.lhs.true40:                                  ; preds = %if.end38
  %44 = load i32, i32* @dump_flags, align 4, !dbg !5079
  %and41 = and i32 %44, 8, !dbg !5080
  %tobool42 = icmp ne i32 %and41, 0, !dbg !5080
  br i1 %tobool42, label %if.then43, label %if.end47, !dbg !5081

if.then43:                                        ; preds = %land.lhs.true40
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5082
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)), !dbg !5084
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5085
  %47 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5086
  %48 = load i32, i32* @dump_flags, align 4, !dbg !5087
  call void @print_generic_expr(%struct._IO_FILE* %46, %union.tree_node* %47, i32 %48), !dbg !5088
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5089
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51, i64 0, i64 0)), !dbg !5090
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5091
  call void @dump_value_range(%struct._IO_FILE* %50, %struct.value_range_d* %vr_arg), !dbg !5092
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5093
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !5094
  br label %if.end47, !dbg !5095

if.end47:                                         ; preds = %if.then43, %land.lhs.true40, %if.end38
  call void @vrp_meet(%struct.value_range_d* %vr_result, %struct.value_range_d* %vr_arg), !dbg !5096
  %type48 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 0, !dbg !5097
  %52 = load i32, i32* %type48, align 8, !dbg !5097
  %cmp49 = icmp eq i32 %52, 3, !dbg !5099
  br i1 %cmp49, label %if.then51, label %if.end52, !dbg !5100

if.then51:                                        ; preds = %if.end47
  br label %for.end, !dbg !5101

if.end52:                                         ; preds = %if.end47
  br label %if.end53, !dbg !5102

if.end53:                                         ; preds = %if.end52, %if.end18
  br label %for.inc, !dbg !5103

for.inc:                                          ; preds = %if.end53
  %53 = load i64, i64* %i, align 8, !dbg !5104
  %inc54 = add i64 %53, 1, !dbg !5104
  store i64 %inc54, i64* %i, align 8, !dbg !5104
  br label %for.cond, !dbg !5105, !llvm.loop !5106

for.end:                                          ; preds = %if.then51, %for.cond
  %54 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5108
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %54, i64 0, !dbg !5108
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5108
  %55 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5108
  %tobool55 = icmp ne %struct.loops* %55, null, !dbg !5108
  br i1 %tobool55, label %land.lhs.true56, label %if.end64, !dbg !5110

land.lhs.true56:                                  ; preds = %for.end
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5111
  %call57 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %56), !dbg !5112
  store %struct.loop* %call57, %struct.loop** %l, align 8, !dbg !5113
  %tobool58 = icmp ne %struct.loop* %call57, null, !dbg !5113
  br i1 %tobool58, label %land.lhs.true59, label %if.end64, !dbg !5114

land.lhs.true59:                                  ; preds = %land.lhs.true56
  %57 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !5115
  %header = getelementptr inbounds %struct.loop, %struct.loop* %57, i32 0, i32 2, !dbg !5116
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5116
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5117
  %call60 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %59), !dbg !5118
  %cmp61 = icmp eq %struct.basic_block_def* %58, %call60, !dbg !5119
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !5120

if.then63:                                        ; preds = %land.lhs.true59
  %60 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !5121
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5122
  %62 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5123
  call void @adjust_range_with_scev(%struct.value_range_d* %vr_result, %struct.loop* %60, %union.gimple_statement_d* %61, %union.tree_node* %62), !dbg !5124
  br label %if.end64, !dbg !5124

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %land.lhs.true56, %for.end
  %type65 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 0, !dbg !5125
  %63 = load i32, i32* %type65, align 8, !dbg !5125
  %cmp66 = icmp eq i32 %63, 3, !dbg !5127
  br i1 %cmp66, label %if.then68, label %if.end69, !dbg !5128

if.then68:                                        ; preds = %if.end64
  br label %varying, !dbg !5129

if.end69:                                         ; preds = %if.end64
  %64 = load i32*, i32** @vr_phi_edge_counts, align 8, !dbg !5130
  %65 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5131
  %ssa_name = bitcast %union.tree_node* %65 to %struct.tree_ssa_name*, !dbg !5131
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !5131
  %66 = load i32, i32* %version, align 8, !dbg !5131
  %idxprom = zext i32 %66 to i64, !dbg !5130
  %arrayidx = getelementptr inbounds i32, i32* %64, i64 %idxprom, !dbg !5130
  %67 = load i32, i32* %arrayidx, align 4, !dbg !5130
  store i32 %67, i32* %old_edges, align 4, !dbg !5132
  %68 = load i32, i32* %edges, align 4, !dbg !5133
  %69 = load i32*, i32** @vr_phi_edge_counts, align 8, !dbg !5134
  %70 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5135
  %ssa_name70 = bitcast %union.tree_node* %70 to %struct.tree_ssa_name*, !dbg !5135
  %version71 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name70, i32 0, i32 3, !dbg !5135
  %71 = load i32, i32* %version71, align 8, !dbg !5135
  %idxprom72 = zext i32 %71 to i64, !dbg !5134
  %arrayidx73 = getelementptr inbounds i32, i32* %69, i64 %idxprom72, !dbg !5134
  store i32 %68, i32* %arrayidx73, align 4, !dbg !5136
  %72 = load %struct.value_range_d*, %struct.value_range_d** %lhs_vr, align 8, !dbg !5137
  %type74 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %72, i32 0, i32 0, !dbg !5139
  %73 = load i32, i32* %type74, align 8, !dbg !5139
  %cmp75 = icmp eq i32 %73, 1, !dbg !5140
  br i1 %cmp75, label %land.lhs.true77, label %if.end212, !dbg !5141

land.lhs.true77:                                  ; preds = %if.end69
  %type78 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 0, !dbg !5142
  %74 = load i32, i32* %type78, align 8, !dbg !5142
  %cmp79 = icmp eq i32 %74, 1, !dbg !5143
  br i1 %cmp79, label %land.lhs.true81, label %if.end212, !dbg !5144

land.lhs.true81:                                  ; preds = %land.lhs.true77
  %75 = load i32, i32* %edges, align 4, !dbg !5145
  %76 = load i32, i32* %old_edges, align 4, !dbg !5146
  %cmp82 = icmp sle i32 %75, %76, !dbg !5147
  br i1 %cmp82, label %if.then84, label %if.end212, !dbg !5148

if.then84:                                        ; preds = %land.lhs.true81
  %77 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5149
  %common = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !5149
  %type85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5149
  %78 = load %union.tree_node*, %union.tree_node** %type85, align 8, !dbg !5149
  %base86 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !5149
  %79 = bitcast %struct.tree_base* %base86 to i64*, !dbg !5149
  %bf.load87 = load i64, i64* %79, align 8, !dbg !5149
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !5149
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !5149
  %cmp90 = icmp eq i32 %bf.cast89, 10, !dbg !5149
  br i1 %cmp90, label %if.end211, label %lor.lhs.false, !dbg !5149

lor.lhs.false:                                    ; preds = %if.then84
  %80 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5149
  %common92 = bitcast %union.tree_node* %80 to %struct.tree_common*, !dbg !5149
  %type93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 2, !dbg !5149
  %81 = load %union.tree_node*, %union.tree_node** %type93, align 8, !dbg !5149
  %base94 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !5149
  %82 = bitcast %struct.tree_base* %base94 to i64*, !dbg !5149
  %bf.load95 = load i64, i64* %82, align 8, !dbg !5149
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !5149
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !5149
  %cmp98 = icmp eq i32 %bf.cast97, 12, !dbg !5149
  br i1 %cmp98, label %if.end211, label %if.then100, !dbg !5152

if.then100:                                       ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i32* %cmp_min, metadata !5153, metadata !DIExpression()), !dbg !5155
  %83 = load %struct.value_range_d*, %struct.value_range_d** %lhs_vr, align 8, !dbg !5156
  %min101 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %83, i32 0, i32 1, !dbg !5157
  %84 = load %union.tree_node*, %union.tree_node** %min101, align 8, !dbg !5157
  %min102 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 1, !dbg !5158
  %85 = load %union.tree_node*, %union.tree_node** %min102, align 8, !dbg !5158
  %call103 = call i32 @compare_values(%union.tree_node* %84, %union.tree_node* %85), !dbg !5159
  store i32 %call103, i32* %cmp_min, align 4, !dbg !5155
  call void @llvm.dbg.declare(metadata i32* %cmp_max, metadata !5160, metadata !DIExpression()), !dbg !5161
  %86 = load %struct.value_range_d*, %struct.value_range_d** %lhs_vr, align 8, !dbg !5162
  %max104 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %86, i32 0, i32 2, !dbg !5163
  %87 = load %union.tree_node*, %union.tree_node** %max104, align 8, !dbg !5163
  %max105 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 2, !dbg !5164
  %88 = load %union.tree_node*, %union.tree_node** %max105, align 8, !dbg !5164
  %call106 = call i32 @compare_values(%union.tree_node* %87, %union.tree_node* %88), !dbg !5165
  store i32 %call106, i32* %cmp_max, align 4, !dbg !5161
  %89 = load i32, i32* %cmp_min, align 4, !dbg !5166
  %cmp107 = icmp sgt i32 %89, 0, !dbg !5168
  br i1 %cmp107, label %if.then112, label %lor.lhs.false109, !dbg !5169

lor.lhs.false109:                                 ; preds = %if.then100
  %90 = load i32, i32* %cmp_min, align 4, !dbg !5170
  %cmp110 = icmp slt i32 %90, 0, !dbg !5171
  br i1 %cmp110, label %if.then112, label %if.end158, !dbg !5172

if.then112:                                       ; preds = %lor.lhs.false109, %if.then100
  %max113 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 2, !dbg !5173
  %91 = load %union.tree_node*, %union.tree_node** %max113, align 8, !dbg !5173
  %call114 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %91), !dbg !5176
  %conv115 = zext i8 %call114 to i32, !dbg !5176
  %tobool116 = icmp ne i32 %conv115, 0, !dbg !5176
  br i1 %tobool116, label %if.then126, label %lor.lhs.false117, !dbg !5177

lor.lhs.false117:                                 ; preds = %if.then112
  %min118 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 1, !dbg !5178
  %92 = load %union.tree_node*, %union.tree_node** %min118, align 8, !dbg !5178
  %common119 = bitcast %union.tree_node* %92 to %struct.tree_common*, !dbg !5178
  %type120 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common119, i32 0, i32 2, !dbg !5178
  %93 = load %union.tree_node*, %union.tree_node** %type120, align 8, !dbg !5178
  %type121 = bitcast %union.tree_node* %93 to %struct.tree_type*, !dbg !5178
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type121, i32 0, i32 13, !dbg !5178
  %94 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !5178
  %max122 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 2, !dbg !5179
  %95 = load %union.tree_node*, %union.tree_node** %max122, align 8, !dbg !5179
  %call123 = call i32 @compare_values(%union.tree_node* %94, %union.tree_node* %95), !dbg !5180
  %cmp124 = icmp sgt i32 %call123, 0, !dbg !5181
  br i1 %cmp124, label %if.then126, label %if.end127, !dbg !5182

if.then126:                                       ; preds = %lor.lhs.false117, %if.then112
  br label %varying, !dbg !5183

if.end127:                                        ; preds = %lor.lhs.false117
  %min128 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 1, !dbg !5184
  %96 = load %union.tree_node*, %union.tree_node** %min128, align 8, !dbg !5184
  %common129 = bitcast %union.tree_node* %96 to %struct.tree_common*, !dbg !5184
  %type130 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2, !dbg !5184
  %97 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !5184
  %call131 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %97), !dbg !5186
  %tobool132 = icmp ne i8 %call131, 0, !dbg !5186
  br i1 %tobool132, label %lor.lhs.false133, label %if.then136, !dbg !5187

lor.lhs.false133:                                 ; preds = %if.end127
  %98 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5188
  %99 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5189
  %call134 = call zeroext i8 @vrp_var_may_overflow(%union.tree_node* %98, %union.gimple_statement_d* %99), !dbg !5190
  %tobool135 = icmp ne i8 %call134, 0, !dbg !5190
  br i1 %tobool135, label %if.else143, label %if.then136, !dbg !5191

if.then136:                                       ; preds = %lor.lhs.false133, %if.end127
  %min137 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 1, !dbg !5192
  %100 = load %union.tree_node*, %union.tree_node** %min137, align 8, !dbg !5192
  %common138 = bitcast %union.tree_node* %100 to %struct.tree_common*, !dbg !5192
  %type139 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common138, i32 0, i32 2, !dbg !5192
  %101 = load %union.tree_node*, %union.tree_node** %type139, align 8, !dbg !5192
  %type140 = bitcast %union.tree_node* %101 to %struct.tree_type*, !dbg !5192
  %minval141 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type140, i32 0, i32 13, !dbg !5192
  %102 = load %union.tree_node*, %union.tree_node** %minval141, align 8, !dbg !5192
  %min142 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 1, !dbg !5193
  store %union.tree_node* %102, %union.tree_node** %min142, align 8, !dbg !5194
  br label %if.end157, !dbg !5195

if.else143:                                       ; preds = %lor.lhs.false133
  %min144 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 1, !dbg !5196
  %103 = load %union.tree_node*, %union.tree_node** %min144, align 8, !dbg !5196
  %common145 = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !5196
  %type146 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common145, i32 0, i32 2, !dbg !5196
  %104 = load %union.tree_node*, %union.tree_node** %type146, align 8, !dbg !5196
  %call147 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %104), !dbg !5198
  %tobool148 = icmp ne i8 %call147, 0, !dbg !5198
  br i1 %tobool148, label %if.then149, label %if.else155, !dbg !5199

if.then149:                                       ; preds = %if.else143
  %min150 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 1, !dbg !5200
  %105 = load %union.tree_node*, %union.tree_node** %min150, align 8, !dbg !5200
  %common151 = bitcast %union.tree_node* %105 to %struct.tree_common*, !dbg !5200
  %type152 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common151, i32 0, i32 2, !dbg !5200
  %106 = load %union.tree_node*, %union.tree_node** %type152, align 8, !dbg !5200
  %call153 = call %union.tree_node* @negative_overflow_infinity(%union.tree_node* %106), !dbg !5201
  %min154 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 1, !dbg !5202
  store %union.tree_node* %call153, %union.tree_node** %min154, align 8, !dbg !5203
  br label %if.end156, !dbg !5204

if.else155:                                       ; preds = %if.else143
  br label %varying, !dbg !5205

if.end156:                                        ; preds = %if.then149
  br label %if.end157

if.end157:                                        ; preds = %if.end156, %if.then136
  br label %if.end158, !dbg !5206

if.end158:                                        ; preds = %if.end157, %lor.lhs.false109
  %107 = load i32, i32* %cmp_max, align 4, !dbg !5207
  %cmp159 = icmp slt i32 %107, 0, !dbg !5209
  br i1 %cmp159, label %if.then164, label %lor.lhs.false161, !dbg !5210

lor.lhs.false161:                                 ; preds = %if.end158
  %108 = load i32, i32* %cmp_max, align 4, !dbg !5211
  %cmp162 = icmp sgt i32 %108, 0, !dbg !5212
  br i1 %cmp162, label %if.then164, label %if.end210, !dbg !5213

if.then164:                                       ; preds = %lor.lhs.false161, %if.end158
  %min165 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 1, !dbg !5214
  %109 = load %union.tree_node*, %union.tree_node** %min165, align 8, !dbg !5214
  %call166 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %109), !dbg !5217
  %conv167 = zext i8 %call166 to i32, !dbg !5217
  %tobool168 = icmp ne i32 %conv167, 0, !dbg !5217
  br i1 %tobool168, label %if.then178, label %lor.lhs.false169, !dbg !5218

lor.lhs.false169:                                 ; preds = %if.then164
  %max170 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 2, !dbg !5219
  %110 = load %union.tree_node*, %union.tree_node** %max170, align 8, !dbg !5219
  %common171 = bitcast %union.tree_node* %110 to %struct.tree_common*, !dbg !5219
  %type172 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common171, i32 0, i32 2, !dbg !5219
  %111 = load %union.tree_node*, %union.tree_node** %type172, align 8, !dbg !5219
  %type173 = bitcast %union.tree_node* %111 to %struct.tree_type*, !dbg !5219
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type173, i32 0, i32 14, !dbg !5219
  %112 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !5219
  %min174 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 1, !dbg !5220
  %113 = load %union.tree_node*, %union.tree_node** %min174, align 8, !dbg !5220
  %call175 = call i32 @compare_values(%union.tree_node* %112, %union.tree_node* %113), !dbg !5221
  %cmp176 = icmp slt i32 %call175, 0, !dbg !5222
  br i1 %cmp176, label %if.then178, label %if.end179, !dbg !5223

if.then178:                                       ; preds = %lor.lhs.false169, %if.then164
  br label %varying, !dbg !5224

if.end179:                                        ; preds = %lor.lhs.false169
  %max180 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 2, !dbg !5225
  %114 = load %union.tree_node*, %union.tree_node** %max180, align 8, !dbg !5225
  %common181 = bitcast %union.tree_node* %114 to %struct.tree_common*, !dbg !5225
  %type182 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common181, i32 0, i32 2, !dbg !5225
  %115 = load %union.tree_node*, %union.tree_node** %type182, align 8, !dbg !5225
  %call183 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %115), !dbg !5227
  %tobool184 = icmp ne i8 %call183, 0, !dbg !5227
  br i1 %tobool184, label %lor.lhs.false185, label %if.then188, !dbg !5228

lor.lhs.false185:                                 ; preds = %if.end179
  %116 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5229
  %117 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5230
  %call186 = call zeroext i8 @vrp_var_may_overflow(%union.tree_node* %116, %union.gimple_statement_d* %117), !dbg !5231
  %tobool187 = icmp ne i8 %call186, 0, !dbg !5231
  br i1 %tobool187, label %if.else195, label %if.then188, !dbg !5232

if.then188:                                       ; preds = %lor.lhs.false185, %if.end179
  %max189 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 2, !dbg !5233
  %118 = load %union.tree_node*, %union.tree_node** %max189, align 8, !dbg !5233
  %common190 = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !5233
  %type191 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common190, i32 0, i32 2, !dbg !5233
  %119 = load %union.tree_node*, %union.tree_node** %type191, align 8, !dbg !5233
  %type192 = bitcast %union.tree_node* %119 to %struct.tree_type*, !dbg !5233
  %maxval193 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type192, i32 0, i32 14, !dbg !5233
  %120 = load %union.tree_node*, %union.tree_node** %maxval193, align 8, !dbg !5233
  %max194 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 2, !dbg !5234
  store %union.tree_node* %120, %union.tree_node** %max194, align 8, !dbg !5235
  br label %if.end209, !dbg !5236

if.else195:                                       ; preds = %lor.lhs.false185
  %max196 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 2, !dbg !5237
  %121 = load %union.tree_node*, %union.tree_node** %max196, align 8, !dbg !5237
  %common197 = bitcast %union.tree_node* %121 to %struct.tree_common*, !dbg !5237
  %type198 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common197, i32 0, i32 2, !dbg !5237
  %122 = load %union.tree_node*, %union.tree_node** %type198, align 8, !dbg !5237
  %call199 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %122), !dbg !5239
  %tobool200 = icmp ne i8 %call199, 0, !dbg !5239
  br i1 %tobool200, label %if.then201, label %if.else207, !dbg !5240

if.then201:                                       ; preds = %if.else195
  %max202 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 2, !dbg !5241
  %123 = load %union.tree_node*, %union.tree_node** %max202, align 8, !dbg !5241
  %common203 = bitcast %union.tree_node* %123 to %struct.tree_common*, !dbg !5241
  %type204 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common203, i32 0, i32 2, !dbg !5241
  %124 = load %union.tree_node*, %union.tree_node** %type204, align 8, !dbg !5241
  %call205 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %124), !dbg !5242
  %max206 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i32 0, i32 2, !dbg !5243
  store %union.tree_node* %call205, %union.tree_node** %max206, align 8, !dbg !5244
  br label %if.end208, !dbg !5245

if.else207:                                       ; preds = %if.else195
  br label %varying, !dbg !5246

if.end208:                                        ; preds = %if.then201
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then188
  br label %if.end210, !dbg !5247

if.end210:                                        ; preds = %if.end209, %lor.lhs.false161
  br label %if.end211, !dbg !5248

if.end211:                                        ; preds = %if.end210, %lor.lhs.false, %if.then84
  br label %if.end212, !dbg !5249

if.end212:                                        ; preds = %if.end211, %land.lhs.true81, %land.lhs.true77, %if.end69
  %125 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5250
  %call213 = call zeroext i8 @update_value_range(%union.tree_node* %125, %struct.value_range_d* %vr_result), !dbg !5252
  %tobool214 = icmp ne i8 %call213, 0, !dbg !5252
  br i1 %tobool214, label %if.then215, label %if.end216, !dbg !5253

if.then215:                                       ; preds = %if.end212
  store i32 1, i32* %retval, align 4, !dbg !5254
  br label %return, !dbg !5254

if.end216:                                        ; preds = %if.end212
  store i32 0, i32* %retval, align 4, !dbg !5255
  br label %return, !dbg !5255

varying:                                          ; preds = %if.else207, %if.then178, %if.else155, %if.then126, %if.then68
  call void @llvm.dbg.label(metadata !5256), !dbg !5257
  %126 = load %struct.value_range_d*, %struct.value_range_d** %lhs_vr, align 8, !dbg !5258
  call void @set_value_range_to_varying(%struct.value_range_d* %126), !dbg !5259
  store i32 2, i32* %retval, align 4, !dbg !5260
  br label %return, !dbg !5260

return:                                           ; preds = %varying, %if.end216, %if.then215
  %127 = load i32, i32* %retval, align 4, !dbg !5261
  ret i32 %127, !dbg !5261
}

; Function Attrs: noinline nounwind uwtable
define internal void @vrp_finalize() #0 !dbg !5262 {
entry:
  %i = alloca i64, align 8
  %single_val_range = alloca %struct.prop_value_d*, align 8
  %do_value_subst_p = alloca i8, align 1
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5263, metadata !DIExpression()), !dbg !5264
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %single_val_range, metadata !5265, metadata !DIExpression()), !dbg !5266
  call void @llvm.dbg.declare(metadata i8* %do_value_subst_p, metadata !5267, metadata !DIExpression()), !dbg !5268
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5269
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !5269
  br i1 %tobool, label %if.then, label %if.end, !dbg !5271

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5272
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.53, i64 0, i64 0)), !dbg !5274
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5275
  call void @dump_all_value_ranges(%struct._IO_FILE* %2), !dbg !5276
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5277
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !5278
  br label %if.end, !dbg !5279

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5280
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !5280
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !5280
  %5 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5280
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %5, i32 0, i32 2, !dbg !5280
  %6 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !5280
  %tobool2 = icmp ne %struct.VEC_tree_gc* %6, null, !dbg !5280
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !5280

cond.true:                                        ; preds = %if.end
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5280
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !5280
  %gimple_df4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 3, !dbg !5280
  %8 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df4, align 8, !dbg !5280
  %ssa_names5 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %8, i32 0, i32 2, !dbg !5280
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names5, align 8, !dbg !5280
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %9, i32 0, i32 0, !dbg !5280
  br label %cond.end, !dbg !5280

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5280

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5280
  %call6 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !5280
  %conv = zext i32 %call6 to i64, !dbg !5280
  %call7 = call i8* @xcalloc(i64 %conv, i64 16), !dbg !5280
  %10 = bitcast i8* %call7 to %struct.prop_value_d*, !dbg !5280
  store %struct.prop_value_d* %10, %struct.prop_value_d** %single_val_range, align 8, !dbg !5281
  store i8 0, i8* %do_value_subst_p, align 1, !dbg !5282
  store i64 0, i64* %i, align 8, !dbg !5283
  br label %for.cond, !dbg !5285

for.cond:                                         ; preds = %for.inc, %cond.end
  %11 = load i64, i64* %i, align 8, !dbg !5286
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5288
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !5288
  %gimple_df9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 3, !dbg !5288
  %13 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df9, align 8, !dbg !5288
  %ssa_names10 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %13, i32 0, i32 2, !dbg !5288
  %14 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names10, align 8, !dbg !5288
  %tobool11 = icmp ne %struct.VEC_tree_gc* %14, null, !dbg !5288
  br i1 %tobool11, label %cond.true12, label %cond.false17, !dbg !5288

cond.true12:                                      ; preds = %for.cond
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5288
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !5288
  %gimple_df14 = getelementptr inbounds %struct.function, %struct.function* %add.ptr13, i32 0, i32 3, !dbg !5288
  %16 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df14, align 8, !dbg !5288
  %ssa_names15 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %16, i32 0, i32 2, !dbg !5288
  %17 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names15, align 8, !dbg !5288
  %base16 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %17, i32 0, i32 0, !dbg !5288
  br label %cond.end18, !dbg !5288

cond.false17:                                     ; preds = %for.cond
  br label %cond.end18, !dbg !5288

cond.end18:                                       ; preds = %cond.false17, %cond.true12
  %cond19 = phi %struct.VEC_tree_base* [ %base16, %cond.true12 ], [ null, %cond.false17 ], !dbg !5288
  %call20 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond19), !dbg !5288
  %conv21 = zext i32 %call20 to i64, !dbg !5288
  %cmp = icmp ult i64 %11, %conv21, !dbg !5289
  br i1 %cmp, label %for.body, label %for.end, !dbg !5290

for.body:                                         ; preds = %cond.end18
  %18 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !5291
  %19 = load i64, i64* %i, align 8, !dbg !5293
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %18, i64 %19, !dbg !5291
  %20 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx, align 8, !dbg !5291
  %tobool23 = icmp ne %struct.value_range_d* %20, null, !dbg !5291
  br i1 %tobool23, label %land.lhs.true, label %if.end42, !dbg !5294

land.lhs.true:                                    ; preds = %for.body
  %21 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !5295
  %22 = load i64, i64* %i, align 8, !dbg !5296
  %arrayidx24 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %21, i64 %22, !dbg !5295
  %23 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx24, align 8, !dbg !5295
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %23, i32 0, i32 0, !dbg !5297
  %24 = load i32, i32* %type, align 8, !dbg !5297
  %cmp25 = icmp eq i32 %24, 1, !dbg !5298
  br i1 %cmp25, label %land.lhs.true27, label %if.end42, !dbg !5299

land.lhs.true27:                                  ; preds = %land.lhs.true
  %25 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !5300
  %26 = load i64, i64* %i, align 8, !dbg !5301
  %arrayidx28 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %25, i64 %26, !dbg !5300
  %27 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx28, align 8, !dbg !5300
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %27, i32 0, i32 1, !dbg !5302
  %28 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !5302
  %29 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !5303
  %30 = load i64, i64* %i, align 8, !dbg !5304
  %arrayidx29 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %29, i64 %30, !dbg !5303
  %31 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx29, align 8, !dbg !5303
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %31, i32 0, i32 2, !dbg !5305
  %32 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !5305
  %cmp30 = icmp eq %union.tree_node* %28, %32, !dbg !5306
  br i1 %cmp30, label %land.lhs.true32, label %if.end42, !dbg !5307

land.lhs.true32:                                  ; preds = %land.lhs.true27
  %33 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !5308
  %34 = load i64, i64* %i, align 8, !dbg !5309
  %arrayidx33 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %33, i64 %34, !dbg !5308
  %35 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx33, align 8, !dbg !5308
  %min34 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %35, i32 0, i32 1, !dbg !5310
  %36 = load %union.tree_node*, %union.tree_node** %min34, align 8, !dbg !5310
  %call35 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %36), !dbg !5311
  %conv36 = zext i8 %call35 to i32, !dbg !5311
  %tobool37 = icmp ne i32 %conv36, 0, !dbg !5311
  br i1 %tobool37, label %if.then38, label %if.end42, !dbg !5312

if.then38:                                        ; preds = %land.lhs.true32
  %37 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !5313
  %38 = load i64, i64* %i, align 8, !dbg !5315
  %arrayidx39 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %37, i64 %38, !dbg !5313
  %39 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx39, align 8, !dbg !5313
  %min40 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %39, i32 0, i32 1, !dbg !5316
  %40 = load %union.tree_node*, %union.tree_node** %min40, align 8, !dbg !5316
  %41 = load %struct.prop_value_d*, %struct.prop_value_d** %single_val_range, align 8, !dbg !5317
  %42 = load i64, i64* %i, align 8, !dbg !5318
  %arrayidx41 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %41, i64 %42, !dbg !5317
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %arrayidx41, i32 0, i32 1, !dbg !5319
  store %union.tree_node* %40, %union.tree_node** %value, align 8, !dbg !5320
  store i8 1, i8* %do_value_subst_p, align 1, !dbg !5321
  br label %if.end42, !dbg !5322

if.end42:                                         ; preds = %if.then38, %land.lhs.true32, %land.lhs.true27, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5323

for.inc:                                          ; preds = %if.end42
  %43 = load i64, i64* %i, align 8, !dbg !5324
  %inc = add i64 %43, 1, !dbg !5324
  store i64 %inc, i64* %i, align 8, !dbg !5324
  br label %for.cond, !dbg !5325, !llvm.loop !5326

for.end:                                          ; preds = %cond.end18
  %44 = load i8, i8* %do_value_subst_p, align 1, !dbg !5328
  %tobool43 = icmp ne i8 %44, 0, !dbg !5328
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !5330

if.then44:                                        ; preds = %for.end
  %45 = load %struct.prop_value_d*, %struct.prop_value_d** %single_val_range, align 8, !dbg !5331
  %46 = bitcast %struct.prop_value_d* %45 to i8*, !dbg !5331
  call void @free(i8* %46), !dbg !5333
  store %struct.prop_value_d* null, %struct.prop_value_d** %single_val_range, align 8, !dbg !5334
  br label %if.end45, !dbg !5335

if.end45:                                         ; preds = %if.then44, %for.end
  %47 = load %struct.prop_value_d*, %struct.prop_value_d** %single_val_range, align 8, !dbg !5336
  %call46 = call zeroext i8 @substitute_and_fold(%struct.prop_value_d* %47, i8 (%struct.gimple_stmt_iterator*)* @vrp_fold_stmt), !dbg !5337
  %48 = load i32, i32* @warn_array_bounds, align 4, !dbg !5338
  %tobool47 = icmp ne i32 %48, 0, !dbg !5338
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !5340

if.then48:                                        ; preds = %if.end45
  call void @check_all_array_refs(), !dbg !5341
  br label %if.end49, !dbg !5341

if.end49:                                         ; preds = %if.then48, %if.end45
  call void @identify_jump_threads(), !dbg !5342
  store i64 0, i64* %i, align 8, !dbg !5343
  br label %for.cond50, !dbg !5345

for.cond50:                                       ; preds = %for.inc76, %if.end49
  %49 = load i64, i64* %i, align 8, !dbg !5346
  %50 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5348
  %add.ptr51 = getelementptr inbounds %struct.function, %struct.function* %50, i64 0, !dbg !5348
  %gimple_df52 = getelementptr inbounds %struct.function, %struct.function* %add.ptr51, i32 0, i32 3, !dbg !5348
  %51 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df52, align 8, !dbg !5348
  %ssa_names53 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %51, i32 0, i32 2, !dbg !5348
  %52 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names53, align 8, !dbg !5348
  %tobool54 = icmp ne %struct.VEC_tree_gc* %52, null, !dbg !5348
  br i1 %tobool54, label %cond.true55, label %cond.false60, !dbg !5348

cond.true55:                                      ; preds = %for.cond50
  %53 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5348
  %add.ptr56 = getelementptr inbounds %struct.function, %struct.function* %53, i64 0, !dbg !5348
  %gimple_df57 = getelementptr inbounds %struct.function, %struct.function* %add.ptr56, i32 0, i32 3, !dbg !5348
  %54 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df57, align 8, !dbg !5348
  %ssa_names58 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %54, i32 0, i32 2, !dbg !5348
  %55 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names58, align 8, !dbg !5348
  %base59 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %55, i32 0, i32 0, !dbg !5348
  br label %cond.end61, !dbg !5348

cond.false60:                                     ; preds = %for.cond50
  br label %cond.end61, !dbg !5348

cond.end61:                                       ; preds = %cond.false60, %cond.true55
  %cond62 = phi %struct.VEC_tree_base* [ %base59, %cond.true55 ], [ null, %cond.false60 ], !dbg !5348
  %call63 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond62), !dbg !5348
  %conv64 = zext i32 %call63 to i64, !dbg !5348
  %cmp65 = icmp ult i64 %49, %conv64, !dbg !5349
  br i1 %cmp65, label %for.body67, label %for.end78, !dbg !5350

for.body67:                                       ; preds = %cond.end61
  %56 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !5351
  %57 = load i64, i64* %i, align 8, !dbg !5353
  %arrayidx68 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %56, i64 %57, !dbg !5351
  %58 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx68, align 8, !dbg !5351
  %tobool69 = icmp ne %struct.value_range_d* %58, null, !dbg !5351
  br i1 %tobool69, label %if.then70, label %if.end75, !dbg !5354

if.then70:                                        ; preds = %for.body67
  %59 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !5355
  %60 = load i64, i64* %i, align 8, !dbg !5355
  %arrayidx71 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %59, i64 %60, !dbg !5355
  %61 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx71, align 8, !dbg !5355
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %61, i32 0, i32 3, !dbg !5355
  %62 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !5355
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %62), !dbg !5355
  %63 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !5355
  %64 = load i64, i64* %i, align 8, !dbg !5355
  %arrayidx72 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %63, i64 %64, !dbg !5355
  %65 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx72, align 8, !dbg !5355
  %equiv73 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %65, i32 0, i32 3, !dbg !5355
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %equiv73, align 8, !dbg !5355
  %66 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !5357
  %67 = load i64, i64* %i, align 8, !dbg !5358
  %arrayidx74 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %66, i64 %67, !dbg !5357
  %68 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx74, align 8, !dbg !5357
  %69 = bitcast %struct.value_range_d* %68 to i8*, !dbg !5357
  call void @free(i8* %69), !dbg !5359
  br label %if.end75, !dbg !5360

if.end75:                                         ; preds = %if.then70, %for.body67
  br label %for.inc76, !dbg !5361

for.inc76:                                        ; preds = %if.end75
  %70 = load i64, i64* %i, align 8, !dbg !5362
  %inc77 = add i64 %70, 1, !dbg !5362
  store i64 %inc77, i64* %i, align 8, !dbg !5362
  br label %for.cond50, !dbg !5363, !llvm.loop !5364

for.end78:                                        ; preds = %cond.end61
  %71 = load %struct.prop_value_d*, %struct.prop_value_d** %single_val_range, align 8, !dbg !5366
  %72 = bitcast %struct.prop_value_d* %71 to i8*, !dbg !5366
  call void @free(i8* %72), !dbg !5367
  %73 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !5368
  %74 = bitcast %struct.value_range_d** %73 to i8*, !dbg !5368
  call void @free(i8* %74), !dbg !5369
  %75 = load i32*, i32** @vr_phi_edge_counts, align 8, !dbg !5370
  %76 = bitcast i32* %75 to i8*, !dbg !5370
  call void @free(i8* %76), !dbg !5371
  store %struct.value_range_d** null, %struct.value_range_d*** @vr_value, align 8, !dbg !5372
  store i32* null, i32** @vr_phi_edge_counts, align 8, !dbg !5373
  ret void, !dbg !5374
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_range_assertions() #0 !dbg !5375 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %cond = alloca %union.tree_node*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5376, metadata !DIExpression()), !dbg !5377
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !5378, metadata !DIExpression()), !dbg !5379
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5380
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5380
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5380
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5380
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !5380
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5380
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !5380
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5380
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !5380
  br label %for.cond, !dbg !5380

for.cond:                                         ; preds = %for.inc43, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5382
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5382
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5382
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !5382
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5382
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !5382
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5382
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !5382
  br i1 %cmp, label %for.body, label %for.end45, !dbg !5380

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5384
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !5386
  %9 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !5386
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5386
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !5386
  br label %for.cond3, !dbg !5387

for.cond3:                                        ; preds = %if.end, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !5388
  %tobool = icmp ne i8 %call, 0, !dbg !5390
  %lnot = xor i1 %tobool, true, !dbg !5390
  br i1 %lnot, label %for.body4, label %for.end42, !dbg !5391

for.body4:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5392, metadata !DIExpression()), !dbg !5394
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !5395
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %stmt, align 8, !dbg !5394
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !5396, metadata !DIExpression()), !dbg !5397
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5398
  %call6 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %11), !dbg !5400
  %conv = zext i8 %call6 to i32, !dbg !5400
  %tobool7 = icmp ne i32 %conv, 0, !dbg !5400
  br i1 %tobool7, label %land.lhs.true, label %if.else, !dbg !5401

land.lhs.true:                                    ; preds = %for.body4
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5402
  %call8 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %12), !dbg !5403
  %cmp9 = icmp eq i32 %call8, 148, !dbg !5404
  br i1 %cmp9, label %if.then, label %if.else, !dbg !5405

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !5406, metadata !DIExpression()), !dbg !5408
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5409
  %call11 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %13), !dbg !5410
  store %union.tree_node* %call11, %union.tree_node** %rhs, align 8, !dbg !5408
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5411, metadata !DIExpression()), !dbg !5412
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !5413, metadata !DIExpression()), !dbg !5414
  %14 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5415
  %exp = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !5415
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5415
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !5415
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5415
  %call12 = call %union.tree_node* @fold(%union.tree_node* %15), !dbg !5416
  store %union.tree_node* %call12, %union.tree_node** %cond, align 8, !dbg !5414
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5417, metadata !DIExpression()), !dbg !5418
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !5419, metadata !DIExpression()), !dbg !5427
  %16 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !5428
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !5428
  %cmp13 = icmp ne %union.tree_node* %16, %17, !dbg !5428
  br i1 %cmp13, label %cond.false, label %cond.true, !dbg !5428

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 5249, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !5428
  br label %cond.end, !dbg !5428

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !5428

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond15 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5428
  %18 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5429
  %exp16 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !5429
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !5429
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 0, !dbg !5429
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !5429
  store %union.tree_node* %19, %union.tree_node** %var, align 8, !dbg !5430
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5431
  %call19 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %20), !dbg !5431
  %call20 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %call19), !dbg !5431
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5431
  br label %for.cond21, !dbg !5431

for.cond21:                                       ; preds = %for.inc39, %cond.end
  %call22 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !5433
  %tobool23 = icmp ne i8 %call22, 0, !dbg !5433
  %lnot24 = xor i1 %tobool23, true, !dbg !5433
  br i1 %lnot24, label %for.body25, label %for.end41, !dbg !5431

for.body25:                                       ; preds = %for.cond21
  %call26 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !5435
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5435
  br label %for.cond27, !dbg !5435

for.cond27:                                       ; preds = %for.inc, %for.body25
  %call28 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !5437
  %tobool29 = icmp ne i8 %call28, 0, !dbg !5437
  %lnot30 = xor i1 %tobool29, true, !dbg !5437
  br i1 %lnot30, label %for.body31, label %for.end, !dbg !5435

for.body31:                                       ; preds = %for.cond27
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5439
  %22 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5439
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %21, %union.tree_node* %22), !dbg !5439
  %23 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5441
  %base = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !5441
  %24 = bitcast %struct.tree_base* %base to i64*, !dbg !5441
  %bf.load = load i64, i64* %24, align 8, !dbg !5441
  %bf.clear = and i64 %bf.load, 65535, !dbg !5441
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5441
  %cmp32 = icmp eq i32 %bf.cast, 141, !dbg !5441
  br i1 %cmp32, label %cond.false35, label %cond.true34, !dbg !5441

cond.true34:                                      ; preds = %for.body31
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 5258, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !5441
  br label %cond.end36, !dbg !5441

cond.false35:                                     ; preds = %for.body31
  br label %cond.end36, !dbg !5441

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond37 = phi i32 [ 0, %cond.true34 ], [ 0, %cond.false35 ], !dbg !5441
  br label %for.inc, !dbg !5442

for.inc:                                          ; preds = %cond.end36
  %call38 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !5437
  store %struct.ssa_use_operand_d* %call38, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5437
  br label %for.cond27, !dbg !5437, !llvm.loop !5443

for.end:                                          ; preds = %for.cond27
  br label %for.inc39, !dbg !5444

for.inc39:                                        ; preds = %for.end
  %call40 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !5433
  store %union.gimple_statement_d* %call40, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5433
  br label %for.cond21, !dbg !5433, !llvm.loop !5445

for.end41:                                        ; preds = %for.cond21
  call void @gsi_remove(%struct.gimple_stmt_iterator* %si, i8 zeroext 1), !dbg !5447
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5448
  call void @release_defs(%union.gimple_statement_d* %25), !dbg !5449
  br label %if.end, !dbg !5450

if.else:                                          ; preds = %land.lhs.true, %for.body4
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !5451
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end41
  br label %for.cond3, !dbg !5452, !llvm.loop !5453

for.end42:                                        ; preds = %for.cond3
  br label %for.inc43, !dbg !5454

for.inc43:                                        ; preds = %for.end42
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5382
  %next_bb44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 6, !dbg !5382
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb44, align 8, !dbg !5382
  store %struct.basic_block_def* %27, %struct.basic_block_def** %bb, align 8, !dbg !5382
  br label %for.cond, !dbg !5382, !llvm.loop !5455

for.end45:                                        ; preds = %for.cond
  ret void, !dbg !5457
}

declare dso_local void @update_ssa(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @finalize_jump_threads() #0 !dbg !5458 {
entry:
  %call = call zeroext i8 @thread_through_all_blocks(i8 zeroext 0), !dbg !5459
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** @stack), !dbg !5460
  ret void, !dbg !5461
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !5462 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5467, metadata !DIExpression()), !dbg !5468
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5469, metadata !DIExpression()), !dbg !5468
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !5470, metadata !DIExpression()), !dbg !5468
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5471
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5471
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5471

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5471
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5471
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !5471
  %3 = load i32, i32* %num, align 8, !dbg !5471
  %cmp = icmp ult i32 %1, %3, !dbg !5471
  br i1 %cmp, label %if.then, label %if.else, !dbg !5468

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5473
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !5473
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5473
  %idxprom = zext i32 %5 to i64, !dbg !5473
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !5473
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !5473
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !5473
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !5473
  store i32 1, i32* %retval, align 4, !dbg !5473
  br label %return, !dbg !5473

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !5475
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !5475
  store i32 0, i32* %retval, align 4, !dbg !5475
  br label %return, !dbg !5475

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5468
  ret i32 %9, !dbg !5468
}

declare dso_local void @remove_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_switch_update_base_iterate(%struct.VEC_switch_update_base* %vec_, i32 %ix_, %struct.switch_update** %ptr) #0 !dbg !5477 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_switch_update_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.switch_update**, align 8
  store %struct.VEC_switch_update_base* %vec_, %struct.VEC_switch_update_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_switch_update_base** %vec_.addr, metadata !5482, metadata !DIExpression()), !dbg !5483
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5484, metadata !DIExpression()), !dbg !5483
  store %struct.switch_update** %ptr, %struct.switch_update*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.switch_update*** %ptr.addr, metadata !5485, metadata !DIExpression()), !dbg !5483
  %0 = load %struct.VEC_switch_update_base*, %struct.VEC_switch_update_base** %vec_.addr, align 8, !dbg !5486
  %tobool = icmp ne %struct.VEC_switch_update_base* %0, null, !dbg !5486
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5486

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5486
  %2 = load %struct.VEC_switch_update_base*, %struct.VEC_switch_update_base** %vec_.addr, align 8, !dbg !5486
  %num = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %2, i32 0, i32 0, !dbg !5486
  %3 = load i32, i32* %num, align 8, !dbg !5486
  %cmp = icmp ult i32 %1, %3, !dbg !5486
  br i1 %cmp, label %if.then, label %if.else, !dbg !5483

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_switch_update_base*, %struct.VEC_switch_update_base** %vec_.addr, align 8, !dbg !5488
  %vec = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %4, i32 0, i32 2, !dbg !5488
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5488
  %idxprom = zext i32 %5 to i64, !dbg !5488
  %arrayidx = getelementptr inbounds [1 x %struct.switch_update], [1 x %struct.switch_update]* %vec, i64 0, i64 %idxprom, !dbg !5488
  %6 = load %struct.switch_update**, %struct.switch_update*** %ptr.addr, align 8, !dbg !5488
  store %struct.switch_update* %arrayidx, %struct.switch_update** %6, align 8, !dbg !5488
  store i32 1, i32* %retval, align 4, !dbg !5488
  br label %return, !dbg !5488

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.switch_update**, %struct.switch_update*** %ptr.addr, align 8, !dbg !5490
  store %struct.switch_update* null, %struct.switch_update** %7, align 8, !dbg !5490
  store i32 0, i32* %retval, align 4, !dbg !5490
  br label %return, !dbg !5490

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5483
  ret i32 %8, !dbg !5483
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_switch_set_num_labels(%union.gimple_statement_d* %g, i32 %nlabels) #0 !dbg !5492 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %nlabels.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5495, metadata !DIExpression()), !dbg !5496
  store i32 %nlabels, i32* %nlabels.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nlabels.addr, metadata !5497, metadata !DIExpression()), !dbg !5498
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5499
  %1 = load i32, i32* %nlabels.addr, align 4, !dbg !5500
  %add = add i32 %1, 1, !dbg !5501
  call void @gimple_set_num_ops(%union.gimple_statement_d* %0, i32 %add), !dbg !5502
  ret void, !dbg !5503
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_switch_set_label(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %label) #0 !dbg !5504 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %label.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5507, metadata !DIExpression()), !dbg !5508
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5509, metadata !DIExpression()), !dbg !5510
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !5511, metadata !DIExpression()), !dbg !5512
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5513
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !5513
  %1 = load i32, i32* %index.addr, align 4, !dbg !5513
  %add = add i32 %1, 1, !dbg !5513
  %cmp = icmp ugt i32 %call, %add, !dbg !5513
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5513

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 3225, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !5513
  br label %cond.end, !dbg !5513

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5513

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5513
  %2 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !5514
  %cmp1 = icmp eq %union.tree_node* %2, null, !dbg !5514
  br i1 %cmp1, label %cond.false4, label %lor.lhs.false, !dbg !5514

lor.lhs.false:                                    ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !5514
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5514
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5514
  %bf.load = load i64, i64* %4, align 8, !dbg !5514
  %bf.clear = and i64 %bf.load, 65535, !dbg !5514
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5514
  %cmp2 = icmp eq i32 %bf.cast, 139, !dbg !5514
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !5514

cond.true3:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 3226, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !5514
  br label %cond.end5, !dbg !5514

cond.false4:                                      ; preds = %lor.lhs.false, %cond.end
  br label %cond.end5, !dbg !5514

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !5514
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5515
  %6 = load i32, i32* %index.addr, align 4, !dbg !5516
  %add7 = add i32 %6, 1, !dbg !5517
  %7 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !5518
  call void @gimple_set_op(%union.gimple_statement_d* %5, i32 %add7, %union.tree_node* %7), !dbg !5519
  ret void, !dbg !5520
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %gs) #0 !dbg !5521 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5525, metadata !DIExpression()), !dbg !5526
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5527
  %call = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %0, i32 0), !dbg !5528
  ret %union.tree_node* %call, !dbg !5529
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !5530 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5533, metadata !DIExpression()), !dbg !5534
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5534
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5534
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5534

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5534
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !5534
  %2 = load i32, i32* %num, align 8, !dbg !5534
  br label %cond.end, !dbg !5534

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5534

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5534
  ret i32 %cond, !dbg !5534
}

declare dso_local void @free_dominance_info(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !5535 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !5539, metadata !DIExpression()), !dbg !5540
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !5541
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !5541
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !5541
  br i1 %tobool, label %if.then, label %if.end, !dbg !5540

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !5541
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !5541
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !5541
  call void @free(i8* %4), !dbg !5541
  br label %if.end, !dbg !5541

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !5540
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !5540
  ret void, !dbg !5540
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_switch_update_heap_free(%struct.VEC_switch_update_heap** %vec_) #0 !dbg !5543 {
entry:
  %vec_.addr = alloca %struct.VEC_switch_update_heap**, align 8
  store %struct.VEC_switch_update_heap** %vec_, %struct.VEC_switch_update_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_switch_update_heap*** %vec_.addr, metadata !5547, metadata !DIExpression()), !dbg !5548
  %0 = load %struct.VEC_switch_update_heap**, %struct.VEC_switch_update_heap*** %vec_.addr, align 8, !dbg !5549
  %1 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** %0, align 8, !dbg !5549
  %tobool = icmp ne %struct.VEC_switch_update_heap* %1, null, !dbg !5549
  br i1 %tobool, label %if.then, label %if.end, !dbg !5548

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_switch_update_heap**, %struct.VEC_switch_update_heap*** %vec_.addr, align 8, !dbg !5549
  %3 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** %2, align 8, !dbg !5549
  %4 = bitcast %struct.VEC_switch_update_heap* %3 to i8*, !dbg !5549
  call void @free(i8* %4), !dbg !5549
  br label %if.end, !dbg !5549

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_switch_update_heap**, %struct.VEC_switch_update_heap*** %vec_.addr, align 8, !dbg !5548
  store %struct.VEC_switch_update_heap* null, %struct.VEC_switch_update_heap** %5, align 8, !dbg !5548
  ret void, !dbg !5548
}

declare dso_local void @threadedge_finalize_values() #2

declare dso_local void @scev_finalize() #2

declare dso_local void @loop_optimizer_finalize() #2

declare dso_local void @calculate_dominance_info(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_assert_locations() #0 !dbg !5551 {
entry:
  %rpo = alloca i32*, align 8
  %bb_rpo = alloca i32*, align 8
  %last_rpo = alloca i32*, align 8
  %rpo_cnt = alloca i32, align 4
  %i = alloca i32, align 4
  %need_asserts = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %pred_rpo = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  %pred = alloca i32, align 4
  %tmp141 = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata i32** %rpo, metadata !5552, metadata !DIExpression()), !dbg !5553
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5554
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5554
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5554
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5554
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !5554
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !5554
  %add = add nsw i32 %2, 2, !dbg !5554
  %conv = sext i32 %add to i64, !dbg !5554
  %call = call i8* @xcalloc(i64 %conv, i64 4), !dbg !5554
  %3 = bitcast i8* %call to i32*, !dbg !5554
  store i32* %3, i32** %rpo, align 8, !dbg !5553
  call void @llvm.dbg.declare(metadata i32** %bb_rpo, metadata !5555, metadata !DIExpression()), !dbg !5556
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5557
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !5557
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !5557
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5557
  %x_last_basic_block3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 5, !dbg !5557
  %6 = load i32, i32* %x_last_basic_block3, align 8, !dbg !5557
  %add4 = add nsw i32 %6, 2, !dbg !5557
  %conv5 = sext i32 %add4 to i64, !dbg !5557
  %call6 = call i8* @xcalloc(i64 %conv5, i64 4), !dbg !5557
  %7 = bitcast i8* %call6 to i32*, !dbg !5557
  store i32* %7, i32** %bb_rpo, align 8, !dbg !5556
  call void @llvm.dbg.declare(metadata i32** %last_rpo, metadata !5558, metadata !DIExpression()), !dbg !5559
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5560
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !5560
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !5560
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !5560
  %x_last_basic_block9 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 5, !dbg !5560
  %10 = load i32, i32* %x_last_basic_block9, align 8, !dbg !5560
  %add10 = add nsw i32 %10, 2, !dbg !5560
  %conv11 = sext i32 %add10 to i64, !dbg !5560
  %call12 = call i8* @xcalloc(i64 %conv11, i64 4), !dbg !5560
  %11 = bitcast i8* %call12 to i32*, !dbg !5560
  store i32* %11, i32** %last_rpo, align 8, !dbg !5559
  call void @llvm.dbg.declare(metadata i32* %rpo_cnt, metadata !5561, metadata !DIExpression()), !dbg !5562
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5563, metadata !DIExpression()), !dbg !5564
  call void @llvm.dbg.declare(metadata i8* %need_asserts, metadata !5565, metadata !DIExpression()), !dbg !5566
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5567
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !5567
  %cfg14 = getelementptr inbounds %struct.function, %struct.function* %add.ptr13, i32 0, i32 1, !dbg !5567
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg14, align 8, !dbg !5567
  %x_last_basic_block15 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 5, !dbg !5567
  %14 = load i32, i32* %x_last_basic_block15, align 8, !dbg !5567
  %add16 = add nsw i32 %14, 2, !dbg !5567
  %conv17 = sext i32 %add16 to i64, !dbg !5567
  %call18 = call i8* @xcalloc(i64 %conv17, i64 8), !dbg !5567
  %15 = bitcast i8* %call18 to %struct.simple_bitmap_def**, !dbg !5567
  store %struct.simple_bitmap_def** %15, %struct.simple_bitmap_def*** @live, align 8, !dbg !5568
  %16 = load i32*, i32** %rpo, align 8, !dbg !5569
  %call19 = call i32 @pre_and_rev_post_order_compute(i32* null, i32* %16, i8 zeroext 0), !dbg !5570
  store i32 %call19, i32* %rpo_cnt, align 4, !dbg !5571
  store i32 0, i32* %i, align 4, !dbg !5572
  br label %for.cond, !dbg !5574

for.cond:                                         ; preds = %for.inc, %entry
  %17 = load i32, i32* %i, align 4, !dbg !5575
  %18 = load i32, i32* %rpo_cnt, align 4, !dbg !5577
  %cmp = icmp slt i32 %17, %18, !dbg !5578
  br i1 %cmp, label %for.body, label %for.end, !dbg !5579

for.body:                                         ; preds = %for.cond
  %19 = load i32, i32* %i, align 4, !dbg !5580
  %20 = load i32*, i32** %bb_rpo, align 8, !dbg !5581
  %21 = load i32*, i32** %rpo, align 8, !dbg !5582
  %22 = load i32, i32* %i, align 4, !dbg !5583
  %idxprom = sext i32 %22 to i64, !dbg !5582
  %arrayidx = getelementptr inbounds i32, i32* %21, i64 %idxprom, !dbg !5582
  %23 = load i32, i32* %arrayidx, align 4, !dbg !5582
  %idxprom21 = sext i32 %23 to i64, !dbg !5581
  %arrayidx22 = getelementptr inbounds i32, i32* %20, i64 %idxprom21, !dbg !5581
  store i32 %19, i32* %arrayidx22, align 4, !dbg !5584
  br label %for.inc, !dbg !5581

for.inc:                                          ; preds = %for.body
  %24 = load i32, i32* %i, align 4, !dbg !5585
  %inc = add nsw i32 %24, 1, !dbg !5585
  store i32 %inc, i32* %i, align 4, !dbg !5585
  br label %for.cond, !dbg !5586, !llvm.loop !5587

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %need_asserts, align 1, !dbg !5589
  %25 = load i32, i32* %rpo_cnt, align 4, !dbg !5590
  %sub = sub nsw i32 %25, 1, !dbg !5592
  store i32 %sub, i32* %i, align 4, !dbg !5593
  br label %for.cond23, !dbg !5594

for.cond23:                                       ; preds = %for.inc174, %for.end
  %26 = load i32, i32* %i, align 4, !dbg !5595
  %cmp24 = icmp sge i32 %26, 0, !dbg !5597
  br i1 %cmp24, label %for.body26, label %for.end175, !dbg !5598

for.body26:                                       ; preds = %for.cond23
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5599, metadata !DIExpression()), !dbg !5601
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5602
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !5602
  %cfg28 = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 1, !dbg !5602
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg28, align 8, !dbg !5602
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 2, !dbg !5602
  %29 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !5602
  %tobool = icmp ne %struct.VEC_basic_block_gc* %29, null, !dbg !5602
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5602

cond.true:                                        ; preds = %for.body26
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5602
  %add.ptr29 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !5602
  %cfg30 = getelementptr inbounds %struct.function, %struct.function* %add.ptr29, i32 0, i32 1, !dbg !5602
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg30, align 8, !dbg !5602
  %x_basic_block_info31 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 2, !dbg !5602
  %32 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info31, align 8, !dbg !5602
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %32, i32 0, i32 0, !dbg !5602
  br label %cond.end, !dbg !5602

cond.false:                                       ; preds = %for.body26
  br label %cond.end, !dbg !5602

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5602
  %33 = load i32*, i32** %rpo, align 8, !dbg !5602
  %34 = load i32, i32* %i, align 4, !dbg !5602
  %idxprom32 = sext i32 %34 to i64, !dbg !5602
  %arrayidx33 = getelementptr inbounds i32, i32* %33, i64 %idxprom32, !dbg !5602
  %35 = load i32, i32* %arrayidx33, align 4, !dbg !5602
  %call34 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %35), !dbg !5602
  store %struct.basic_block_def* %call34, %struct.basic_block_def** %bb, align 8, !dbg !5601
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5603, metadata !DIExpression()), !dbg !5604
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5605, metadata !DIExpression()), !dbg !5612
  %36 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5613
  %37 = load i32*, i32** %rpo, align 8, !dbg !5615
  %38 = load i32, i32* %i, align 4, !dbg !5616
  %idxprom35 = sext i32 %38 to i64, !dbg !5615
  %arrayidx36 = getelementptr inbounds i32, i32* %37, i64 %idxprom35, !dbg !5615
  %39 = load i32, i32* %arrayidx36, align 4, !dbg !5615
  %idxprom37 = sext i32 %39 to i64, !dbg !5613
  %arrayidx38 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %36, i64 %idxprom37, !dbg !5613
  %40 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx38, align 8, !dbg !5613
  %tobool39 = icmp ne %struct.simple_bitmap_def* %40, null, !dbg !5613
  br i1 %tobool39, label %if.end, label %if.then, !dbg !5617

if.then:                                          ; preds = %cond.end
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5618
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !5618
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 3, !dbg !5618
  %42 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5618
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %42, i32 0, i32 2, !dbg !5618
  %43 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !5618
  %tobool41 = icmp ne %struct.VEC_tree_gc* %43, null, !dbg !5618
  br i1 %tobool41, label %cond.true42, label %cond.false47, !dbg !5618

cond.true42:                                      ; preds = %if.then
  %44 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5618
  %add.ptr43 = getelementptr inbounds %struct.function, %struct.function* %44, i64 0, !dbg !5618
  %gimple_df44 = getelementptr inbounds %struct.function, %struct.function* %add.ptr43, i32 0, i32 3, !dbg !5618
  %45 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df44, align 8, !dbg !5618
  %ssa_names45 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %45, i32 0, i32 2, !dbg !5618
  %46 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names45, align 8, !dbg !5618
  %base46 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %46, i32 0, i32 0, !dbg !5618
  br label %cond.end48, !dbg !5618

cond.false47:                                     ; preds = %if.then
  br label %cond.end48, !dbg !5618

cond.end48:                                       ; preds = %cond.false47, %cond.true42
  %cond49 = phi %struct.VEC_tree_base* [ %base46, %cond.true42 ], [ null, %cond.false47 ], !dbg !5618
  %call50 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond49), !dbg !5618
  %call51 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call50), !dbg !5620
  %47 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5621
  %48 = load i32*, i32** %rpo, align 8, !dbg !5622
  %49 = load i32, i32* %i, align 4, !dbg !5623
  %idxprom52 = sext i32 %49 to i64, !dbg !5622
  %arrayidx53 = getelementptr inbounds i32, i32* %48, i64 %idxprom52, !dbg !5622
  %50 = load i32, i32* %arrayidx53, align 4, !dbg !5622
  %idxprom54 = sext i32 %50 to i64, !dbg !5621
  %arrayidx55 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %47, i64 %idxprom54, !dbg !5621
  store %struct.simple_bitmap_def* %call51, %struct.simple_bitmap_def** %arrayidx55, align 8, !dbg !5624
  %51 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5625
  %52 = load i32*, i32** %rpo, align 8, !dbg !5626
  %53 = load i32, i32* %i, align 4, !dbg !5627
  %idxprom56 = sext i32 %53 to i64, !dbg !5626
  %arrayidx57 = getelementptr inbounds i32, i32* %52, i64 %idxprom56, !dbg !5626
  %54 = load i32, i32* %arrayidx57, align 4, !dbg !5626
  %idxprom58 = sext i32 %54 to i64, !dbg !5625
  %arrayidx59 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %51, i64 %idxprom58, !dbg !5625
  %55 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx59, align 8, !dbg !5625
  call void @sbitmap_zero(%struct.simple_bitmap_def* %55), !dbg !5628
  br label %if.end, !dbg !5629

if.end:                                           ; preds = %cond.end48, %cond.end
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5630
  %57 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5631
  %58 = load i32*, i32** %rpo, align 8, !dbg !5632
  %59 = load i32, i32* %i, align 4, !dbg !5633
  %idxprom60 = sext i32 %59 to i64, !dbg !5632
  %arrayidx61 = getelementptr inbounds i32, i32* %58, i64 %idxprom60, !dbg !5632
  %60 = load i32, i32* %arrayidx61, align 4, !dbg !5632
  %idxprom62 = sext i32 %60 to i64, !dbg !5631
  %arrayidx63 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %57, i64 %idxprom62, !dbg !5631
  %61 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx63, align 8, !dbg !5631
  %call64 = call zeroext i8 @find_assert_locations_1(%struct.basic_block_def* %56, %struct.simple_bitmap_def* %61), !dbg !5634
  %conv65 = zext i8 %call64 to i32, !dbg !5634
  %62 = load i8, i8* %need_asserts, align 1, !dbg !5635
  %conv66 = zext i8 %62 to i32, !dbg !5635
  %or = or i32 %conv66, %conv65, !dbg !5635
  %conv67 = trunc i32 %or to i8, !dbg !5635
  store i8 %conv67, i8* %need_asserts, align 1, !dbg !5635
  %63 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5636
  %64 = load i32*, i32** %rpo, align 8, !dbg !5638
  %65 = load i32, i32* %i, align 4, !dbg !5639
  %idxprom68 = sext i32 %65 to i64, !dbg !5638
  %arrayidx69 = getelementptr inbounds i32, i32* %64, i64 %idxprom68, !dbg !5638
  %66 = load i32, i32* %arrayidx69, align 4, !dbg !5638
  %idxprom70 = sext i32 %66 to i64, !dbg !5636
  %arrayidx71 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %63, i64 %idxprom70, !dbg !5636
  %67 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx71, align 8, !dbg !5636
  %call72 = call zeroext i8 @sbitmap_empty_p(%struct.simple_bitmap_def* %67), !dbg !5640
  %tobool73 = icmp ne i8 %call72, 0, !dbg !5640
  br i1 %tobool73, label %if.else, label %if.then74, !dbg !5641

if.then74:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %pred_rpo, metadata !5642, metadata !DIExpression()), !dbg !5644
  %68 = load i32, i32* %i, align 4, !dbg !5645
  store i32 %68, i32* %pred_rpo, align 4, !dbg !5644
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5646
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 0, !dbg !5646
  %call75 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !5646
  %70 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5646
  %71 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %70, i32 0, i32 0, !dbg !5646
  %72 = extractvalue { i32, %struct.VEC_edge_gc** } %call75, 0, !dbg !5646
  store i32 %72, i32* %71, align 8, !dbg !5646
  %73 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %70, i32 0, i32 1, !dbg !5646
  %74 = extractvalue { i32, %struct.VEC_edge_gc** } %call75, 1, !dbg !5646
  store %struct.VEC_edge_gc** %74, %struct.VEC_edge_gc*** %73, align 8, !dbg !5646
  %75 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5646
  %76 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5646
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 16, i1 false), !dbg !5646
  br label %for.cond76, !dbg !5646

for.cond76:                                       ; preds = %for.inc122, %if.then74
  %77 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5648
  %78 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %77, i32 0, i32 0, !dbg !5648
  %79 = load i32, i32* %78, align 8, !dbg !5648
  %80 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %77, i32 0, i32 1, !dbg !5648
  %81 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %80, align 8, !dbg !5648
  %call77 = call zeroext i8 @ei_cond(i32 %79, %struct.VEC_edge_gc** %81, %struct.edge_def** %e), !dbg !5648
  %tobool78 = icmp ne i8 %call77, 0, !dbg !5646
  br i1 %tobool78, label %for.body79, label %for.end123, !dbg !5646

for.body79:                                       ; preds = %for.cond76
  call void @llvm.dbg.declare(metadata i32* %pred, metadata !5650, metadata !DIExpression()), !dbg !5652
  %82 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5653
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %82, i32 0, i32 0, !dbg !5654
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5654
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %83, i32 0, i32 9, !dbg !5655
  %84 = load i32, i32* %index, align 8, !dbg !5655
  store i32 %84, i32* %pred, align 4, !dbg !5652
  %85 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5656
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %85, i32 0, i32 7, !dbg !5658
  %86 = load i32, i32* %flags, align 8, !dbg !5658
  %and = and i32 %86, 32, !dbg !5659
  %tobool80 = icmp ne i32 %and, 0, !dbg !5659
  br i1 %tobool80, label %if.then81, label %if.end82, !dbg !5660

if.then81:                                        ; preds = %for.body79
  br label %for.inc122, !dbg !5661

if.end82:                                         ; preds = %for.body79
  %87 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5662
  %88 = load i32, i32* %pred, align 4, !dbg !5664
  %idxprom83 = sext i32 %88 to i64, !dbg !5662
  %arrayidx84 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %87, i64 %idxprom83, !dbg !5662
  %89 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx84, align 8, !dbg !5662
  %tobool85 = icmp ne %struct.simple_bitmap_def* %89, null, !dbg !5662
  br i1 %tobool85, label %if.end105, label %if.then86, !dbg !5665

if.then86:                                        ; preds = %if.end82
  %90 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5666
  %add.ptr87 = getelementptr inbounds %struct.function, %struct.function* %90, i64 0, !dbg !5666
  %gimple_df88 = getelementptr inbounds %struct.function, %struct.function* %add.ptr87, i32 0, i32 3, !dbg !5666
  %91 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df88, align 8, !dbg !5666
  %ssa_names89 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %91, i32 0, i32 2, !dbg !5666
  %92 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names89, align 8, !dbg !5666
  %tobool90 = icmp ne %struct.VEC_tree_gc* %92, null, !dbg !5666
  br i1 %tobool90, label %cond.true91, label %cond.false96, !dbg !5666

cond.true91:                                      ; preds = %if.then86
  %93 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5666
  %add.ptr92 = getelementptr inbounds %struct.function, %struct.function* %93, i64 0, !dbg !5666
  %gimple_df93 = getelementptr inbounds %struct.function, %struct.function* %add.ptr92, i32 0, i32 3, !dbg !5666
  %94 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df93, align 8, !dbg !5666
  %ssa_names94 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %94, i32 0, i32 2, !dbg !5666
  %95 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names94, align 8, !dbg !5666
  %base95 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %95, i32 0, i32 0, !dbg !5666
  br label %cond.end97, !dbg !5666

cond.false96:                                     ; preds = %if.then86
  br label %cond.end97, !dbg !5666

cond.end97:                                       ; preds = %cond.false96, %cond.true91
  %cond98 = phi %struct.VEC_tree_base* [ %base95, %cond.true91 ], [ null, %cond.false96 ], !dbg !5666
  %call99 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond98), !dbg !5666
  %call100 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call99), !dbg !5668
  %96 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5669
  %97 = load i32, i32* %pred, align 4, !dbg !5670
  %idxprom101 = sext i32 %97 to i64, !dbg !5669
  %arrayidx102 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %96, i64 %idxprom101, !dbg !5669
  store %struct.simple_bitmap_def* %call100, %struct.simple_bitmap_def** %arrayidx102, align 8, !dbg !5671
  %98 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5672
  %99 = load i32, i32* %pred, align 4, !dbg !5673
  %idxprom103 = sext i32 %99 to i64, !dbg !5672
  %arrayidx104 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %98, i64 %idxprom103, !dbg !5672
  %100 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx104, align 8, !dbg !5672
  call void @sbitmap_zero(%struct.simple_bitmap_def* %100), !dbg !5674
  br label %if.end105, !dbg !5675

if.end105:                                        ; preds = %cond.end97, %if.end82
  %101 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5676
  %102 = load i32, i32* %pred, align 4, !dbg !5677
  %idxprom106 = sext i32 %102 to i64, !dbg !5676
  %arrayidx107 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %101, i64 %idxprom106, !dbg !5676
  %103 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx107, align 8, !dbg !5676
  %104 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5678
  %105 = load i32, i32* %pred, align 4, !dbg !5679
  %idxprom108 = sext i32 %105 to i64, !dbg !5678
  %arrayidx109 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %104, i64 %idxprom108, !dbg !5678
  %106 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx109, align 8, !dbg !5678
  %107 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5680
  %108 = load i32*, i32** %rpo, align 8, !dbg !5681
  %109 = load i32, i32* %i, align 4, !dbg !5682
  %idxprom110 = sext i32 %109 to i64, !dbg !5681
  %arrayidx111 = getelementptr inbounds i32, i32* %108, i64 %idxprom110, !dbg !5681
  %110 = load i32, i32* %arrayidx111, align 4, !dbg !5681
  %idxprom112 = sext i32 %110 to i64, !dbg !5680
  %arrayidx113 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %107, i64 %idxprom112, !dbg !5680
  %111 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx113, align 8, !dbg !5680
  call void @sbitmap_a_or_b(%struct.simple_bitmap_def* %103, %struct.simple_bitmap_def* %106, %struct.simple_bitmap_def* %111), !dbg !5683
  %112 = load i32*, i32** %bb_rpo, align 8, !dbg !5684
  %113 = load i32, i32* %pred, align 4, !dbg !5686
  %idxprom114 = sext i32 %113 to i64, !dbg !5684
  %arrayidx115 = getelementptr inbounds i32, i32* %112, i64 %idxprom114, !dbg !5684
  %114 = load i32, i32* %arrayidx115, align 4, !dbg !5684
  %115 = load i32, i32* %pred_rpo, align 4, !dbg !5687
  %cmp116 = icmp slt i32 %114, %115, !dbg !5688
  br i1 %cmp116, label %if.then118, label %if.end121, !dbg !5689

if.then118:                                       ; preds = %if.end105
  %116 = load i32*, i32** %bb_rpo, align 8, !dbg !5690
  %117 = load i32, i32* %pred, align 4, !dbg !5691
  %idxprom119 = sext i32 %117 to i64, !dbg !5690
  %arrayidx120 = getelementptr inbounds i32, i32* %116, i64 %idxprom119, !dbg !5690
  %118 = load i32, i32* %arrayidx120, align 4, !dbg !5690
  store i32 %118, i32* %pred_rpo, align 4, !dbg !5692
  br label %if.end121, !dbg !5693

if.end121:                                        ; preds = %if.then118, %if.end105
  br label %for.inc122, !dbg !5694

for.inc122:                                       ; preds = %if.end121, %if.then81
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5648
  br label %for.cond76, !dbg !5648, !llvm.loop !5695

for.end123:                                       ; preds = %for.cond76
  %119 = load i32, i32* %pred_rpo, align 4, !dbg !5697
  %120 = load i32*, i32** %last_rpo, align 8, !dbg !5698
  %121 = load i32*, i32** %rpo, align 8, !dbg !5699
  %122 = load i32, i32* %i, align 4, !dbg !5700
  %idxprom124 = sext i32 %122 to i64, !dbg !5699
  %arrayidx125 = getelementptr inbounds i32, i32* %121, i64 %idxprom124, !dbg !5699
  %123 = load i32, i32* %arrayidx125, align 4, !dbg !5699
  %idxprom126 = sext i32 %123 to i64, !dbg !5698
  %arrayidx127 = getelementptr inbounds i32, i32* %120, i64 %idxprom126, !dbg !5698
  store i32 %119, i32* %arrayidx127, align 4, !dbg !5701
  br label %if.end140, !dbg !5702

if.else:                                          ; preds = %if.end
  %124 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5703
  %125 = load i32*, i32** %rpo, align 8, !dbg !5703
  %126 = load i32, i32* %i, align 4, !dbg !5703
  %idxprom128 = sext i32 %126 to i64, !dbg !5703
  %arrayidx129 = getelementptr inbounds i32, i32* %125, i64 %idxprom128, !dbg !5703
  %127 = load i32, i32* %arrayidx129, align 4, !dbg !5703
  %idxprom130 = sext i32 %127 to i64, !dbg !5703
  %arrayidx131 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %124, i64 %idxprom130, !dbg !5703
  %128 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx131, align 8, !dbg !5703
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %128, i32 0, i32 0, !dbg !5703
  %129 = load i8*, i8** %popcount, align 8, !dbg !5703
  call void @free(i8* %129), !dbg !5703
  %130 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5703
  %131 = load i32*, i32** %rpo, align 8, !dbg !5703
  %132 = load i32, i32* %i, align 4, !dbg !5703
  %idxprom132 = sext i32 %132 to i64, !dbg !5703
  %arrayidx133 = getelementptr inbounds i32, i32* %131, i64 %idxprom132, !dbg !5703
  %133 = load i32, i32* %arrayidx133, align 4, !dbg !5703
  %idxprom134 = sext i32 %133 to i64, !dbg !5703
  %arrayidx135 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %130, i64 %idxprom134, !dbg !5703
  %134 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx135, align 8, !dbg !5703
  %135 = bitcast %struct.simple_bitmap_def* %134 to i8*, !dbg !5703
  call void @free(i8* %135), !dbg !5703
  %136 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5705
  %137 = load i32*, i32** %rpo, align 8, !dbg !5706
  %138 = load i32, i32* %i, align 4, !dbg !5707
  %idxprom136 = sext i32 %138 to i64, !dbg !5706
  %arrayidx137 = getelementptr inbounds i32, i32* %137, i64 %idxprom136, !dbg !5706
  %139 = load i32, i32* %arrayidx137, align 4, !dbg !5706
  %idxprom138 = sext i32 %139 to i64, !dbg !5705
  %arrayidx139 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %136, i64 %idxprom138, !dbg !5705
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** %arrayidx139, align 8, !dbg !5708
  br label %if.end140

if.end140:                                        ; preds = %if.else, %for.end123
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5709
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %140, i32 0, i32 1, !dbg !5709
  %call142 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5709
  %141 = bitcast %struct.edge_iterator* %tmp141 to { i32, %struct.VEC_edge_gc** }*, !dbg !5709
  %142 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %141, i32 0, i32 0, !dbg !5709
  %143 = extractvalue { i32, %struct.VEC_edge_gc** } %call142, 0, !dbg !5709
  store i32 %143, i32* %142, align 8, !dbg !5709
  %144 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %141, i32 0, i32 1, !dbg !5709
  %145 = extractvalue { i32, %struct.VEC_edge_gc** } %call142, 1, !dbg !5709
  store %struct.VEC_edge_gc** %145, %struct.VEC_edge_gc*** %144, align 8, !dbg !5709
  %146 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5709
  %147 = bitcast %struct.edge_iterator* %tmp141 to i8*, !dbg !5709
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* align 8 %147, i64 16, i1 false), !dbg !5709
  br label %for.cond143, !dbg !5709

for.cond143:                                      ; preds = %for.inc172, %if.end140
  %148 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5711
  %149 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %148, i32 0, i32 0, !dbg !5711
  %150 = load i32, i32* %149, align 8, !dbg !5711
  %151 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %148, i32 0, i32 1, !dbg !5711
  %152 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %151, align 8, !dbg !5711
  %call144 = call zeroext i8 @ei_cond(i32 %150, %struct.VEC_edge_gc** %152, %struct.edge_def** %e), !dbg !5711
  %tobool145 = icmp ne i8 %call144, 0, !dbg !5709
  br i1 %tobool145, label %for.body146, label %for.end173, !dbg !5709

for.body146:                                      ; preds = %for.cond143
  %153 = load i32*, i32** %last_rpo, align 8, !dbg !5713
  %154 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5715
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %154, i32 0, i32 1, !dbg !5716
  %155 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5716
  %index147 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %155, i32 0, i32 9, !dbg !5717
  %156 = load i32, i32* %index147, align 8, !dbg !5717
  %idxprom148 = sext i32 %156 to i64, !dbg !5713
  %arrayidx149 = getelementptr inbounds i32, i32* %153, i64 %idxprom148, !dbg !5713
  %157 = load i32, i32* %arrayidx149, align 4, !dbg !5713
  %158 = load i32, i32* %i, align 4, !dbg !5718
  %cmp150 = icmp eq i32 %157, %158, !dbg !5719
  br i1 %cmp150, label %land.lhs.true, label %if.end171, !dbg !5720

land.lhs.true:                                    ; preds = %for.body146
  %159 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5721
  %160 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5722
  %dest152 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %160, i32 0, i32 1, !dbg !5723
  %161 = load %struct.basic_block_def*, %struct.basic_block_def** %dest152, align 8, !dbg !5723
  %index153 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %161, i32 0, i32 9, !dbg !5724
  %162 = load i32, i32* %index153, align 8, !dbg !5724
  %idxprom154 = sext i32 %162 to i64, !dbg !5721
  %arrayidx155 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %159, i64 %idxprom154, !dbg !5721
  %163 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx155, align 8, !dbg !5721
  %tobool156 = icmp ne %struct.simple_bitmap_def* %163, null, !dbg !5721
  br i1 %tobool156, label %if.then157, label %if.end171, !dbg !5725

if.then157:                                       ; preds = %land.lhs.true
  %164 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5726
  %165 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5726
  %dest158 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %165, i32 0, i32 1, !dbg !5726
  %166 = load %struct.basic_block_def*, %struct.basic_block_def** %dest158, align 8, !dbg !5726
  %index159 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %166, i32 0, i32 9, !dbg !5726
  %167 = load i32, i32* %index159, align 8, !dbg !5726
  %idxprom160 = sext i32 %167 to i64, !dbg !5726
  %arrayidx161 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %164, i64 %idxprom160, !dbg !5726
  %168 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx161, align 8, !dbg !5726
  %popcount162 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %168, i32 0, i32 0, !dbg !5726
  %169 = load i8*, i8** %popcount162, align 8, !dbg !5726
  call void @free(i8* %169), !dbg !5726
  %170 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5726
  %171 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5726
  %dest163 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %171, i32 0, i32 1, !dbg !5726
  %172 = load %struct.basic_block_def*, %struct.basic_block_def** %dest163, align 8, !dbg !5726
  %index164 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %172, i32 0, i32 9, !dbg !5726
  %173 = load i32, i32* %index164, align 8, !dbg !5726
  %idxprom165 = sext i32 %173 to i64, !dbg !5726
  %arrayidx166 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %170, i64 %idxprom165, !dbg !5726
  %174 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx166, align 8, !dbg !5726
  %175 = bitcast %struct.simple_bitmap_def* %174 to i8*, !dbg !5726
  call void @free(i8* %175), !dbg !5726
  %176 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5728
  %177 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5729
  %dest167 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %177, i32 0, i32 1, !dbg !5730
  %178 = load %struct.basic_block_def*, %struct.basic_block_def** %dest167, align 8, !dbg !5730
  %index168 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %178, i32 0, i32 9, !dbg !5731
  %179 = load i32, i32* %index168, align 8, !dbg !5731
  %idxprom169 = sext i32 %179 to i64, !dbg !5728
  %arrayidx170 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %176, i64 %idxprom169, !dbg !5728
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** %arrayidx170, align 8, !dbg !5732
  br label %if.end171, !dbg !5733

if.end171:                                        ; preds = %if.then157, %land.lhs.true, %for.body146
  br label %for.inc172, !dbg !5734

for.inc172:                                       ; preds = %if.end171
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5711
  br label %for.cond143, !dbg !5711, !llvm.loop !5735

for.end173:                                       ; preds = %for.cond143
  br label %for.inc174, !dbg !5737

for.inc174:                                       ; preds = %for.end173
  %180 = load i32, i32* %i, align 4, !dbg !5738
  %dec = add nsw i32 %180, -1, !dbg !5738
  store i32 %dec, i32* %i, align 4, !dbg !5738
  br label %for.cond23, !dbg !5739, !llvm.loop !5740

for.end175:                                       ; preds = %for.cond23
  %181 = load i32*, i32** %rpo, align 8, !dbg !5742
  %182 = bitcast i32* %181 to i8*, !dbg !5742
  call void @free(i8* %182), !dbg !5742
  %183 = load i32*, i32** %bb_rpo, align 8, !dbg !5743
  %184 = bitcast i32* %183 to i8*, !dbg !5743
  call void @free(i8* %184), !dbg !5743
  %185 = load i32*, i32** %last_rpo, align 8, !dbg !5744
  %186 = bitcast i32* %185 to i8*, !dbg !5744
  call void @free(i8* %186), !dbg !5744
  store i32 0, i32* %i, align 4, !dbg !5745
  br label %for.cond176, !dbg !5747

for.cond176:                                      ; preds = %for.inc194, %for.end175
  %187 = load i32, i32* %i, align 4, !dbg !5748
  %188 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5750
  %add.ptr177 = getelementptr inbounds %struct.function, %struct.function* %188, i64 0, !dbg !5750
  %cfg178 = getelementptr inbounds %struct.function, %struct.function* %add.ptr177, i32 0, i32 1, !dbg !5750
  %189 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg178, align 8, !dbg !5750
  %x_last_basic_block179 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %189, i32 0, i32 5, !dbg !5750
  %190 = load i32, i32* %x_last_basic_block179, align 8, !dbg !5750
  %add180 = add nsw i32 %190, 2, !dbg !5751
  %cmp181 = icmp slt i32 %187, %add180, !dbg !5752
  br i1 %cmp181, label %for.body183, label %for.end196, !dbg !5753

for.body183:                                      ; preds = %for.cond176
  %191 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5754
  %192 = load i32, i32* %i, align 4, !dbg !5756
  %idxprom184 = sext i32 %192 to i64, !dbg !5754
  %arrayidx185 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %191, i64 %idxprom184, !dbg !5754
  %193 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx185, align 8, !dbg !5754
  %tobool186 = icmp ne %struct.simple_bitmap_def* %193, null, !dbg !5754
  br i1 %tobool186, label %if.then187, label %if.end193, !dbg !5757

if.then187:                                       ; preds = %for.body183
  %194 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5758
  %195 = load i32, i32* %i, align 4, !dbg !5758
  %idxprom188 = sext i32 %195 to i64, !dbg !5758
  %arrayidx189 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %194, i64 %idxprom188, !dbg !5758
  %196 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx189, align 8, !dbg !5758
  %popcount190 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %196, i32 0, i32 0, !dbg !5758
  %197 = load i8*, i8** %popcount190, align 8, !dbg !5758
  call void @free(i8* %197), !dbg !5758
  %198 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5758
  %199 = load i32, i32* %i, align 4, !dbg !5758
  %idxprom191 = sext i32 %199 to i64, !dbg !5758
  %arrayidx192 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %198, i64 %idxprom191, !dbg !5758
  %200 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx192, align 8, !dbg !5758
  %201 = bitcast %struct.simple_bitmap_def* %200 to i8*, !dbg !5758
  call void @free(i8* %201), !dbg !5758
  br label %if.end193, !dbg !5758

if.end193:                                        ; preds = %if.then187, %for.body183
  br label %for.inc194, !dbg !5759

for.inc194:                                       ; preds = %if.end193
  %202 = load i32, i32* %i, align 4, !dbg !5760
  %inc195 = add nsw i32 %202, 1, !dbg !5760
  store i32 %inc195, i32* %i, align 4, !dbg !5760
  br label %for.cond176, !dbg !5761, !llvm.loop !5762

for.end196:                                       ; preds = %for.cond176
  %203 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5764
  %204 = bitcast %struct.simple_bitmap_def** %203 to i8*, !dbg !5764
  call void @free(i8* %204), !dbg !5764
  %205 = load i8, i8* %need_asserts, align 1, !dbg !5765
  ret i8 %205, !dbg !5766
}

; Function Attrs: noinline nounwind uwtable
define internal void @process_assert_insertions() #0 !dbg !5767 {
entry:
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %update_edges_p = alloca i8, align 1
  %num_asserts = alloca i32, align 4
  %loc = alloca %struct.assert_locus_d*, align 8
  %next = alloca %struct.assert_locus_d*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5768, metadata !DIExpression()), !dbg !5769
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5770, metadata !DIExpression()), !dbg !5771
  call void @llvm.dbg.declare(metadata i8* %update_edges_p, metadata !5772, metadata !DIExpression()), !dbg !5773
  store i8 0, i8* %update_edges_p, align 1, !dbg !5773
  call void @llvm.dbg.declare(metadata i32* %num_asserts, metadata !5774, metadata !DIExpression()), !dbg !5775
  store i32 0, i32* %num_asserts, align 4, !dbg !5775
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5776
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !5776
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5778

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !5779
  %and = and i32 %1, 8, !dbg !5780
  %tobool1 = icmp ne i32 %and, 0, !dbg !5780
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5781

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5782
  call void @dump_all_asserts(%struct._IO_FILE* %2), !dbg !5783
  br label %if.end, !dbg !5783

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !5784
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %3, i32 0, i32* %i), !dbg !5784
  br label %for.cond, !dbg !5784

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5786
  %tobool2 = icmp ne i8 %call, 0, !dbg !5784
  br i1 %tobool2, label %for.body, label %for.end, !dbg !5784

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.assert_locus_d** %loc, metadata !5788, metadata !DIExpression()), !dbg !5790
  %4 = load %struct.assert_locus_d**, %struct.assert_locus_d*** @asserts_for, align 8, !dbg !5791
  %5 = load i32, i32* %i, align 4, !dbg !5792
  %idxprom = zext i32 %5 to i64, !dbg !5791
  %arrayidx = getelementptr inbounds %struct.assert_locus_d*, %struct.assert_locus_d** %4, i64 %idxprom, !dbg !5791
  %6 = load %struct.assert_locus_d*, %struct.assert_locus_d** %arrayidx, align 8, !dbg !5791
  store %struct.assert_locus_d* %6, %struct.assert_locus_d** %loc, align 8, !dbg !5790
  %7 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !5793
  %tobool3 = icmp ne %struct.assert_locus_d* %7, null, !dbg !5793
  br i1 %tobool3, label %cond.false, label %cond.true, !dbg !5793

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 4926, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !5793
  br label %cond.end, !dbg !5793

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !5793

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5793
  br label %while.cond, !dbg !5794

while.cond:                                       ; preds = %cond.end12, %cond.end
  %8 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !5795
  %tobool4 = icmp ne %struct.assert_locus_d* %8, null, !dbg !5794
  br i1 %tobool4, label %while.body, label %while.end, !dbg !5794

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.assert_locus_d** %next, metadata !5796, metadata !DIExpression()), !dbg !5798
  %9 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !5799
  %next5 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %9, i32 0, i32 6, !dbg !5800
  %10 = load %struct.assert_locus_d*, %struct.assert_locus_d** %next5, align 8, !dbg !5800
  store %struct.assert_locus_d* %10, %struct.assert_locus_d** %next, align 8, !dbg !5798
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5801
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !5801
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !5801
  %12 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5801
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %12, i32 0, i32 2, !dbg !5801
  %13 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !5801
  %tobool6 = icmp ne %struct.VEC_tree_gc* %13, null, !dbg !5801
  br i1 %tobool6, label %cond.true7, label %cond.false11, !dbg !5801

cond.true7:                                       ; preds = %while.body
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5801
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !5801
  %gimple_df9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 3, !dbg !5801
  %15 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df9, align 8, !dbg !5801
  %ssa_names10 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %15, i32 0, i32 2, !dbg !5801
  %16 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names10, align 8, !dbg !5801
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %16, i32 0, i32 0, !dbg !5801
  br label %cond.end12, !dbg !5801

cond.false11:                                     ; preds = %while.body
  br label %cond.end12, !dbg !5801

cond.end12:                                       ; preds = %cond.false11, %cond.true7
  %cond13 = phi %struct.VEC_tree_base* [ %base, %cond.true7 ], [ null, %cond.false11 ], !dbg !5801
  %17 = load i32, i32* %i, align 4, !dbg !5801
  %call14 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond13, i32 %17), !dbg !5801
  %18 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !5802
  %call15 = call zeroext i8 @process_assert_insertions_for(%union.tree_node* %call14, %struct.assert_locus_d* %18), !dbg !5803
  %conv = zext i8 %call15 to i32, !dbg !5803
  %19 = load i8, i8* %update_edges_p, align 1, !dbg !5804
  %conv16 = zext i8 %19 to i32, !dbg !5804
  %or = or i32 %conv16, %conv, !dbg !5804
  %conv17 = trunc i32 %or to i8, !dbg !5804
  store i8 %conv17, i8* %update_edges_p, align 1, !dbg !5804
  %20 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !5805
  %21 = bitcast %struct.assert_locus_d* %20 to i8*, !dbg !5805
  call void @free(i8* %21), !dbg !5806
  %22 = load %struct.assert_locus_d*, %struct.assert_locus_d** %next, align 8, !dbg !5807
  store %struct.assert_locus_d* %22, %struct.assert_locus_d** %loc, align 8, !dbg !5808
  %23 = load i32, i32* %num_asserts, align 4, !dbg !5809
  %inc = add nsw i32 %23, 1, !dbg !5809
  store i32 %inc, i32* %num_asserts, align 4, !dbg !5809
  br label %while.cond, !dbg !5794, !llvm.loop !5810

while.end:                                        ; preds = %while.cond
  br label %for.inc, !dbg !5812

for.inc:                                          ; preds = %while.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5786
  br label %for.cond, !dbg !5786, !llvm.loop !5813

for.end:                                          ; preds = %for.cond
  %24 = load i8, i8* %update_edges_p, align 1, !dbg !5815
  %tobool18 = icmp ne i8 %24, 0, !dbg !5815
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !5817

if.then19:                                        ; preds = %for.end
  call void @gsi_commit_edge_inserts(), !dbg !5818
  br label %if.end20, !dbg !5818

if.end20:                                         ; preds = %if.then19, %for.end
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5819
  %add.ptr21 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !5819
  %26 = load i32, i32* %num_asserts, align 4, !dbg !5820
  call void @statistics_counter_event(%struct.function* %add.ptr21, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.36, i64 0, i64 0), i32 %26), !dbg !5821
  ret void, !dbg !5822
}

declare dso_local void @dump_function_to_file(%union.tree_node*, %struct._IO_FILE*, i32) #2

declare dso_local void @free(i8*) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local i32 @pre_and_rev_post_order_compute(i32*, i32*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !5823 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !5828, metadata !DIExpression()), !dbg !5829
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5830, metadata !DIExpression()), !dbg !5829
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5829
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !5829
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5829

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5829
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5829
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !5829
  %3 = load i32, i32* %num, align 8, !dbg !5829
  %cmp = icmp ult i32 %1, %3, !dbg !5829
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5831
  %land.ext = zext i1 %4 to i32, !dbg !5829
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5829
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !5829
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5829
  %idxprom = zext i32 %6 to i64, !dbg !5829
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !5829
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !5829
  ret %struct.basic_block_def* %7, !dbg !5829
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_assert_locations_1(%struct.basic_block_def* %bb, %struct.simple_bitmap_def* %live) #0 !dbg !5832 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %live.addr = alloca %struct.simple_bitmap_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %need_assert = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %op = alloca %union.tree_node*, align 8
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  %value = alloca %union.tree_node*, align 8
  %comp_code = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp93 = alloca %struct.gimple_stmt_iterator, align 8
  %arg_p = alloca %struct.ssa_use_operand_d*, align 8
  %i99 = alloca %struct.ssa_operand_iterator_d, align 8
  %arg = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5835, metadata !DIExpression()), !dbg !5836
  store %struct.simple_bitmap_def* %live, %struct.simple_bitmap_def** %live.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %live.addr, metadata !5837, metadata !DIExpression()), !dbg !5838
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !5839, metadata !DIExpression()), !dbg !5840
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !5841, metadata !DIExpression()), !dbg !5842
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !5843, metadata !DIExpression()), !dbg !5844
  call void @llvm.dbg.declare(metadata i8* %need_assert, metadata !5845, metadata !DIExpression()), !dbg !5846
  store i8 0, i8* %need_assert, align 1, !dbg !5847
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5848
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %0), !dbg !5849
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %last, align 8, !dbg !5850
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !5851
  %tobool = icmp ne %union.gimple_statement_d* %1, null, !dbg !5851
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5853

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !5854
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !5855
  %cmp = icmp eq i32 %call1, 1, !dbg !5856
  br i1 %cmp, label %land.lhs.true2, label %if.end, !dbg !5857

land.lhs.true2:                                   ; preds = %land.lhs.true
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !5858
  %call3 = call zeroext i8 @fp_predicate(%union.gimple_statement_d* %3), !dbg !5859
  %tobool4 = icmp ne i8 %call3, 0, !dbg !5859
  br i1 %tobool4, label %if.end, label %land.lhs.true5, !dbg !5860

land.lhs.true5:                                   ; preds = %land.lhs.true2
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !5861
  %call6 = call zeroext i8 @zero_ssa_operands(%union.gimple_statement_d* %4, i32 1), !dbg !5861
  %tobool7 = icmp ne i8 %call6, 0, !dbg !5861
  br i1 %tobool7, label %if.end, label %if.then, !dbg !5862

if.then:                                          ; preds = %land.lhs.true5
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5863
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !5864
  %call8 = call zeroext i8 @find_conditional_asserts(%struct.basic_block_def* %5, %union.gimple_statement_d* %6), !dbg !5865
  %conv = zext i8 %call8 to i32, !dbg !5865
  %7 = load i8, i8* %need_assert, align 1, !dbg !5866
  %conv9 = zext i8 %7 to i32, !dbg !5866
  %or = or i32 %conv9, %conv, !dbg !5866
  %conv10 = trunc i32 %or to i8, !dbg !5866
  store i8 %conv10, i8* %need_assert, align 1, !dbg !5866
  br label %if.end, !dbg !5867

if.end:                                           ; preds = %if.then, %land.lhs.true5, %land.lhs.true2, %land.lhs.true, %entry
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !5868
  %tobool11 = icmp ne %union.gimple_statement_d* %8, null, !dbg !5868
  br i1 %tobool11, label %land.lhs.true12, label %if.end25, !dbg !5870

land.lhs.true12:                                  ; preds = %if.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !5871
  %call13 = call i32 @gimple_code(%union.gimple_statement_d* %9), !dbg !5872
  %cmp14 = icmp eq i32 %call13, 5, !dbg !5873
  br i1 %cmp14, label %land.lhs.true16, label %if.end25, !dbg !5874

land.lhs.true16:                                  ; preds = %land.lhs.true12
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !5875
  %call17 = call zeroext i8 @zero_ssa_operands(%union.gimple_statement_d* %10, i32 1), !dbg !5875
  %tobool18 = icmp ne i8 %call17, 0, !dbg !5875
  br i1 %tobool18, label %if.end25, label %if.then19, !dbg !5876

if.then19:                                        ; preds = %land.lhs.true16
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5877
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !5878
  %call20 = call zeroext i8 @find_switch_asserts(%struct.basic_block_def* %11, %union.gimple_statement_d* %12), !dbg !5879
  %conv21 = zext i8 %call20 to i32, !dbg !5879
  %13 = load i8, i8* %need_assert, align 1, !dbg !5880
  %conv22 = zext i8 %13 to i32, !dbg !5880
  %or23 = or i32 %conv22, %conv21, !dbg !5880
  %conv24 = trunc i32 %or23 to i8, !dbg !5880
  store i8 %conv24, i8* %need_assert, align 1, !dbg !5880
  br label %if.end25, !dbg !5881

if.end25:                                         ; preds = %if.then19, %land.lhs.true16, %land.lhs.true12, %if.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5882
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %14), !dbg !5884
  %15 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !5884
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5884
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !5884
  br label %for.cond, !dbg !5885

for.cond:                                         ; preds = %for.inc91, %if.end25
  %call26 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !5886
  %tobool27 = icmp ne i8 %call26, 0, !dbg !5888
  %lnot = xor i1 %tobool27, true, !dbg !5888
  br i1 %lnot, label %for.body, label %for.end92, !dbg !5889

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5890, metadata !DIExpression()), !dbg !5892
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !5893, metadata !DIExpression()), !dbg !5894
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %i, metadata !5895, metadata !DIExpression()), !dbg !5896
  %call28 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !5897
  store %union.gimple_statement_d* %call28, %union.gimple_statement_d** %stmt, align 8, !dbg !5898
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5899
  %call29 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %17), !dbg !5901
  %tobool30 = icmp ne i8 %call29, 0, !dbg !5901
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !5902

if.then31:                                        ; preds = %for.body
  br label %for.inc91, !dbg !5903

if.end32:                                         ; preds = %for.body
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5904
  %call33 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %i, %union.gimple_statement_d* %18, i32 1), !dbg !5904
  store %union.tree_node* %call33, %union.tree_node** %op, align 8, !dbg !5904
  br label %for.cond34, !dbg !5904

for.cond34:                                       ; preds = %for.inc, %if.end32
  %call35 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %i), !dbg !5906
  %tobool36 = icmp ne i8 %call35, 0, !dbg !5906
  %lnot37 = xor i1 %tobool36, true, !dbg !5906
  br i1 %lnot37, label %for.body38, label %for.end, !dbg !5904

for.body38:                                       ; preds = %for.cond34
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !5908, metadata !DIExpression()), !dbg !5910
  call void @llvm.dbg.declare(metadata i32* %comp_code, metadata !5911, metadata !DIExpression()), !dbg !5912
  %19 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %live.addr, align 8, !dbg !5913
  %20 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5914
  %ssa_name = bitcast %union.tree_node* %20 to %struct.tree_ssa_name*, !dbg !5914
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !5914
  %21 = load i32, i32* %version, align 8, !dbg !5914
  call void @SET_BIT(%struct.simple_bitmap_def* %19, i32 %21), !dbg !5915
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5916
  %23 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5918
  %call39 = call zeroext i8 @infer_value_range(%union.gimple_statement_d* %22, %union.tree_node* %23, i32* %comp_code, %union.tree_node** %value), !dbg !5919
  %tobool40 = icmp ne i8 %call39, 0, !dbg !5919
  br i1 %tobool40, label %if.then41, label %if.end89, !dbg !5920

if.then41:                                        ; preds = %for.body38
  %24 = load i32, i32* %comp_code, align 4, !dbg !5921
  %cmp42 = icmp eq i32 %24, 102, !dbg !5924
  br i1 %cmp42, label %land.lhs.true44, label %if.end84, !dbg !5925

land.lhs.true44:                                  ; preds = %if.then41
  %25 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5926
  %call45 = call i32 @integer_zerop(%union.tree_node* %25), !dbg !5927
  %tobool46 = icmp ne i32 %call45, 0, !dbg !5927
  br i1 %tobool46, label %if.then47, label %if.end84, !dbg !5928

if.then47:                                        ; preds = %land.lhs.true44
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5929, metadata !DIExpression()), !dbg !5931
  %26 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5932
  store %union.tree_node* %26, %union.tree_node** %t, align 8, !dbg !5931
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !5933, metadata !DIExpression()), !dbg !5934
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5935
  %ssa_name48 = bitcast %union.tree_node* %27 to %struct.tree_ssa_name*, !dbg !5935
  %def_stmt49 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name48, i32 0, i32 2, !dbg !5935
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt49, align 8, !dbg !5935
  store %union.gimple_statement_d* %28, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5934
  br label %while.cond, !dbg !5936

while.cond:                                       ; preds = %if.end83, %if.then47
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5937
  %call50 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %29), !dbg !5938
  %conv51 = zext i8 %call50 to i32, !dbg !5938
  %tobool52 = icmp ne i32 %conv51, 0, !dbg !5938
  br i1 %tobool52, label %land.lhs.true53, label %land.end, !dbg !5939

land.lhs.true53:                                  ; preds = %while.cond
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5940
  %call54 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %30), !dbg !5941
  %cmp55 = icmp eq i32 %call54, 116, !dbg !5942
  br i1 %cmp55, label %land.lhs.true57, label %land.end, !dbg !5943

land.lhs.true57:                                  ; preds = %land.lhs.true53
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5944
  %call58 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %31), !dbg !5944
  %base = bitcast %union.tree_node* %call58 to %struct.tree_base*, !dbg !5944
  %32 = bitcast %struct.tree_base* %base to i64*, !dbg !5944
  %bf.load = load i64, i64* %32, align 8, !dbg !5944
  %bf.clear = and i64 %bf.load, 65535, !dbg !5944
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5944
  %cmp59 = icmp eq i32 %bf.cast, 141, !dbg !5945
  br i1 %cmp59, label %land.rhs, label %land.end, !dbg !5946

land.rhs:                                         ; preds = %land.lhs.true57
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5947
  %call61 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %33), !dbg !5947
  %common = bitcast %union.tree_node* %call61 to %struct.tree_common*, !dbg !5947
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5947
  %34 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5947
  %base62 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !5947
  %35 = bitcast %struct.tree_base* %base62 to i64*, !dbg !5947
  %bf.load63 = load i64, i64* %35, align 8, !dbg !5947
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !5947
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !5947
  %cmp66 = icmp eq i32 %bf.cast65, 10, !dbg !5947
  br i1 %cmp66, label %lor.end, label %lor.rhs, !dbg !5947

lor.rhs:                                          ; preds = %land.rhs
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5947
  %call68 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %36), !dbg !5947
  %common69 = bitcast %union.tree_node* %call68 to %struct.tree_common*, !dbg !5947
  %type70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 2, !dbg !5947
  %37 = load %union.tree_node*, %union.tree_node** %type70, align 8, !dbg !5947
  %base71 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !5947
  %38 = bitcast %struct.tree_base* %base71 to i64*, !dbg !5947
  %bf.load72 = load i64, i64* %38, align 8, !dbg !5947
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !5947
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !5947
  %cmp75 = icmp eq i32 %bf.cast74, 12, !dbg !5947
  br label %lor.end, !dbg !5947

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %39 = phi i1 [ true, %land.rhs ], [ %cmp75, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true57, %land.lhs.true53, %while.cond
  %40 = phi i1 [ false, %land.lhs.true57 ], [ false, %land.lhs.true53 ], [ false, %while.cond ], [ %39, %lor.end ], !dbg !5948
  br i1 %40, label %while.body, label %while.end, !dbg !5936

while.body:                                       ; preds = %land.end
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5949
  %call77 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %41), !dbg !5951
  store %union.tree_node* %call77, %union.tree_node** %t, align 8, !dbg !5952
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5953
  %ssa_name78 = bitcast %union.tree_node* %42 to %struct.tree_ssa_name*, !dbg !5953
  %def_stmt79 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name78, i32 0, i32 2, !dbg !5953
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt79, align 8, !dbg !5953
  store %union.gimple_statement_d* %43, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5954
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5955
  %call80 = call zeroext i8 @has_single_use(%union.tree_node* %44), !dbg !5957
  %tobool81 = icmp ne i8 %call80, 0, !dbg !5957
  br i1 %tobool81, label %if.end83, label %if.then82, !dbg !5958

if.then82:                                        ; preds = %while.body
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5959
  %46 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5961
  %47 = load i32, i32* %comp_code, align 4, !dbg !5962
  %48 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5963
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5964
  call void @register_new_assert_for(%union.tree_node* %45, %union.tree_node* %46, i32 %47, %union.tree_node* %48, %struct.basic_block_def* %49, %struct.edge_def* null, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !5965
  store i8 1, i8* %need_assert, align 1, !dbg !5966
  br label %if.end83, !dbg !5967

if.end83:                                         ; preds = %if.then82, %while.body
  br label %while.cond, !dbg !5936, !llvm.loop !5968

while.end:                                        ; preds = %land.end
  br label %if.end84, !dbg !5970

if.end84:                                         ; preds = %while.end, %land.lhs.true44, %if.then41
  %50 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5971
  %call85 = call zeroext i8 @has_single_use(%union.tree_node* %50), !dbg !5973
  %tobool86 = icmp ne i8 %call85, 0, !dbg !5973
  br i1 %tobool86, label %if.end88, label %if.then87, !dbg !5974

if.then87:                                        ; preds = %if.end84
  %51 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5975
  %52 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5977
  %53 = load i32, i32* %comp_code, align 4, !dbg !5978
  %54 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5979
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5980
  call void @register_new_assert_for(%union.tree_node* %51, %union.tree_node* %52, i32 %53, %union.tree_node* %54, %struct.basic_block_def* %55, %struct.edge_def* null, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !5981
  store i8 1, i8* %need_assert, align 1, !dbg !5982
  br label %if.end88, !dbg !5983

if.end88:                                         ; preds = %if.then87, %if.end84
  br label %if.end89, !dbg !5984

if.end89:                                         ; preds = %if.end88, %for.body38
  br label %for.inc, !dbg !5985

for.inc:                                          ; preds = %if.end89
  %call90 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %i), !dbg !5906
  store %union.tree_node* %call90, %union.tree_node** %op, align 8, !dbg !5906
  br label %for.cond34, !dbg !5906, !llvm.loop !5986

for.end:                                          ; preds = %for.cond34
  br label %for.inc91, !dbg !5988

for.inc91:                                        ; preds = %for.end, %if.then31
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !5989
  br label %for.cond, !dbg !5990, !llvm.loop !5991

for.end92:                                        ; preds = %for.cond
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5993
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp93, %struct.basic_block_def* %56), !dbg !5995
  %57 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !5995
  %58 = bitcast %struct.gimple_stmt_iterator* %tmp93 to i8*, !dbg !5995
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 24, i1 false), !dbg !5995
  br label %for.cond94, !dbg !5996

for.cond94:                                       ; preds = %for.inc121, %for.end92
  %call95 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !5997
  %tobool96 = icmp ne i8 %call95, 0, !dbg !5999
  %lnot97 = xor i1 %tobool96, true, !dbg !5999
  br i1 %lnot97, label %for.body98, label %for.end122, !dbg !6000

for.body98:                                       ; preds = %for.cond94
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %arg_p, metadata !6001, metadata !DIExpression()), !dbg !6003
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %i99, metadata !6004, metadata !DIExpression()), !dbg !6005
  %call100 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !6006
  store %union.gimple_statement_d* %call100, %union.gimple_statement_d** %phi, align 8, !dbg !6007
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6008
  %call101 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %i99, %union.gimple_statement_d* %59, i32 1), !dbg !6008
  store %struct.ssa_use_operand_d* %call101, %struct.ssa_use_operand_d** %arg_p, align 8, !dbg !6008
  br label %for.cond102, !dbg !6008

for.cond102:                                      ; preds = %for.inc118, %for.body98
  %call103 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %i99), !dbg !6010
  %tobool104 = icmp ne i8 %call103, 0, !dbg !6010
  %lnot105 = xor i1 %tobool104, true, !dbg !6010
  br i1 %lnot105, label %for.body106, label %for.end120, !dbg !6008

for.body106:                                      ; preds = %for.cond102
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6012, metadata !DIExpression()), !dbg !6014
  %60 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %arg_p, align 8, !dbg !6015
  %call107 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %60), !dbg !6015
  store %union.tree_node* %call107, %union.tree_node** %arg, align 8, !dbg !6014
  %61 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6016
  %base108 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !6016
  %62 = bitcast %struct.tree_base* %base108 to i64*, !dbg !6016
  %bf.load109 = load i64, i64* %62, align 8, !dbg !6016
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !6016
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !6016
  %cmp112 = icmp eq i32 %bf.cast111, 141, !dbg !6018
  br i1 %cmp112, label %if.then114, label %if.end117, !dbg !6019

if.then114:                                       ; preds = %for.body106
  %63 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %live.addr, align 8, !dbg !6020
  %64 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6021
  %ssa_name115 = bitcast %union.tree_node* %64 to %struct.tree_ssa_name*, !dbg !6021
  %version116 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name115, i32 0, i32 3, !dbg !6021
  %65 = load i32, i32* %version116, align 8, !dbg !6021
  call void @SET_BIT(%struct.simple_bitmap_def* %63, i32 %65), !dbg !6022
  br label %if.end117, !dbg !6022

if.end117:                                        ; preds = %if.then114, %for.body106
  br label %for.inc118, !dbg !6023

for.inc118:                                       ; preds = %if.end117
  %call119 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %i99), !dbg !6010
  store %struct.ssa_use_operand_d* %call119, %struct.ssa_use_operand_d** %arg_p, align 8, !dbg !6010
  br label %for.cond102, !dbg !6010, !llvm.loop !6024

for.end120:                                       ; preds = %for.cond102
  br label %for.inc121, !dbg !6026

for.inc121:                                       ; preds = %for.end120
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !6027
  br label %for.cond94, !dbg !6028, !llvm.loop !6029

for.end122:                                       ; preds = %for.cond94
  %66 = load i8, i8* %need_assert, align 1, !dbg !6031
  ret i8 %66, !dbg !6032
}

declare dso_local zeroext i8 @sbitmap_empty_p(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !6033 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !6036, metadata !DIExpression()), !dbg !6037
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !6038, metadata !DIExpression()), !dbg !6039
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !6040
  store i32 0, i32* %index, align 8, !dbg !6041
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !6042
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !6043
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !6044
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !6045
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !6045
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !6045
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !6046 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6049, metadata !DIExpression()), !dbg !6050
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !6051, metadata !DIExpression()), !dbg !6052
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6053
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6053
  %5 = load i32, i32* %4, align 8, !dbg !6053
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6053
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6053
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6053
  %tobool = icmp ne i8 %call, 0, !dbg !6053
  br i1 %tobool, label %if.else, label %if.then, !dbg !6055

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6056
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6056
  %10 = load i32, i32* %9, align 8, !dbg !6056
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6056
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6056
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6056
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6058
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !6059
  store i8 1, i8* %retval, align 1, !dbg !6060
  br label %return, !dbg !6060

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6061
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !6063
  store i8 0, i8* %retval, align 1, !dbg !6064
  br label %return, !dbg !6064

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !6065
  ret i8 %15, !dbg !6065
}

declare dso_local void @sbitmap_a_or_b(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !6066 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !6070, metadata !DIExpression()), !dbg !6071
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6072
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !6072
  %1 = load i32, i32* %index, align 8, !dbg !6072
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6072
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !6072
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6072
  %5 = load i32, i32* %4, align 8, !dbg !6072
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6072
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6072
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6072
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6072
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6072

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6072
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !6072
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6072
  %11 = load i32, i32* %10, align 8, !dbg !6072
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6072
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6072
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6072
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6072
  br label %cond.end, !dbg !6072

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6072

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6072
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6072
  %cmp = icmp ult i32 %1, %call2, !dbg !6072
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !6072

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.35, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !6072
  br label %cond.end5, !dbg !6072

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6072

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6072
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6073
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !6074
  %15 = load i32, i32* %index7, align 8, !dbg !6075
  %inc = add i32 %15, 1, !dbg !6075
  store i32 %inc, i32* %index7, align 8, !dbg !6075
  ret void, !dbg !6076
}

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !6077 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6080, metadata !DIExpression()), !dbg !6081
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6082
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6083
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6084
  %bf.load = load i32, i32* %1, align 8, !dbg !6084
  %bf.clear = and i32 %bf.load, 255, !dbg !6084
  ret i32 %bf.clear, !dbg !6085
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @fp_predicate(%union.gimple_statement_d* %stmt) #0 !dbg !6086 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6089, metadata !DIExpression()), !dbg !6090
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6091
  %call = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %0), !dbg !6091
  %common = bitcast %union.tree_node* %call to %struct.tree_common*, !dbg !6091
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6091
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6091
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6091
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6091
  %bf.load = load i64, i64* %2, align 8, !dbg !6091
  %bf.clear = and i64 %bf.load, 65535, !dbg !6091
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6091
  %cmp = icmp eq i32 %bf.cast, 9, !dbg !6091
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !6091

lor.rhs:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6091
  %call1 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %3), !dbg !6091
  %common2 = bitcast %union.tree_node* %call1 to %struct.tree_common*, !dbg !6091
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !6091
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !6091
  %base4 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6091
  %5 = bitcast %struct.tree_base* %base4 to i64*, !dbg !6091
  %bf.load5 = load i64, i64* %5, align 8, !dbg !6091
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !6091
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !6091
  %cmp8 = icmp eq i32 %bf.cast7, 13, !dbg !6091
  br i1 %cmp8, label %land.rhs, label %lor.lhs.false, !dbg !6091

lor.lhs.false:                                    ; preds = %lor.rhs
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6091
  %call9 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %6), !dbg !6091
  %common10 = bitcast %union.tree_node* %call9 to %struct.tree_common*, !dbg !6091
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !6091
  %7 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !6091
  %base12 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6091
  %8 = bitcast %struct.tree_base* %base12 to i64*, !dbg !6091
  %bf.load13 = load i64, i64* %8, align 8, !dbg !6091
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !6091
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !6091
  %cmp16 = icmp eq i32 %bf.cast15, 14, !dbg !6091
  br i1 %cmp16, label %land.rhs, label %land.end, !dbg !6091

land.rhs:                                         ; preds = %lor.lhs.false, %lor.rhs
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6091
  %call17 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %9), !dbg !6091
  %common18 = bitcast %union.tree_node* %call17 to %struct.tree_common*, !dbg !6091
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !6091
  %10 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !6091
  %common20 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !6091
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !6091
  %11 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !6091
  %base22 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !6091
  %12 = bitcast %struct.tree_base* %base22 to i64*, !dbg !6091
  %bf.load23 = load i64, i64* %12, align 8, !dbg !6091
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !6091
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !6091
  %cmp26 = icmp eq i32 %bf.cast25, 9, !dbg !6091
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false
  %13 = phi i1 [ false, %lor.lhs.false ], [ %cmp26, %land.rhs ], !dbg !6092
  br label %lor.end, !dbg !6091

lor.end:                                          ; preds = %land.end, %entry
  %14 = phi i1 [ true, %entry ], [ %13, %land.end ]
  %lor.ext = zext i1 %14 to i32, !dbg !6091
  %conv = trunc i32 %lor.ext to i8, !dbg !6091
  ret i8 %conv, !dbg !6093
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @zero_ssa_operands(%union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6094 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6098, metadata !DIExpression()), !dbg !6099
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6100, metadata !DIExpression()), !dbg !6101
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6102, metadata !DIExpression()), !dbg !6103
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6104
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6105
  %call = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 %1), !dbg !6106
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6107
  ret i8 %call1, !dbg !6108
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_conditional_asserts(%struct.basic_block_def* %bb, %union.gimple_statement_d* %last) #0 !dbg !6109 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %last.addr = alloca %union.gimple_statement_d*, align 8
  %need_assert = alloca i8, align 1
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %op = alloca %union.tree_node*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp1 = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6112, metadata !DIExpression()), !dbg !6113
  store %union.gimple_statement_d* %last, %union.gimple_statement_d** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last.addr, metadata !6114, metadata !DIExpression()), !dbg !6115
  call void @llvm.dbg.declare(metadata i8* %need_assert, metadata !6116, metadata !DIExpression()), !dbg !6117
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !6118, metadata !DIExpression()), !dbg !6119
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6120, metadata !DIExpression()), !dbg !6121
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6122, metadata !DIExpression()), !dbg !6123
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6124, metadata !DIExpression()), !dbg !6125
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6126, metadata !DIExpression()), !dbg !6127
  store i8 0, i8* %need_assert, align 1, !dbg !6128
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last.addr, align 8, !dbg !6129
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %0), !dbg !6130
  %1 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !6130
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6130
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !6130
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6131
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !6131
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !6131
  %4 = bitcast %struct.edge_iterator* %tmp1 to { i32, %struct.VEC_edge_gc** }*, !dbg !6131
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !6131
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !6131
  store i32 %6, i32* %5, align 8, !dbg !6131
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !6131
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !6131
  store %struct.VEC_edge_gc** %8, %struct.VEC_edge_gc*** %7, align 8, !dbg !6131
  %9 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6131
  %10 = bitcast %struct.edge_iterator* %tmp1 to i8*, !dbg !6131
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false), !dbg !6131
  br label %for.cond, !dbg !6131

for.cond:                                         ; preds = %for.inc15, %entry
  %11 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6133
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 0, !dbg !6133
  %13 = load i32, i32* %12, align 8, !dbg !6133
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 1, !dbg !6133
  %15 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %14, align 8, !dbg !6133
  %call2 = call zeroext i8 @ei_cond(i32 %13, %struct.VEC_edge_gc** %15, %struct.edge_def** %e), !dbg !6133
  %tobool = icmp ne i8 %call2, 0, !dbg !6131
  br i1 %tobool, label %for.body, label %for.end16, !dbg !6131

for.body:                                         ; preds = %for.cond
  %16 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6135
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 1, !dbg !6138
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6138
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6139
  %cmp = icmp eq %struct.basic_block_def* %17, %18, !dbg !6140
  br i1 %cmp, label %if.then, label %if.end, !dbg !6141

if.then:                                          ; preds = %for.body
  br label %for.inc15, !dbg !6142

if.end:                                           ; preds = %for.body
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last.addr, align 8, !dbg !6143
  %call3 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %19, i32 1), !dbg !6143
  store %union.tree_node* %call3, %union.tree_node** %op, align 8, !dbg !6143
  br label %for.cond4, !dbg !6143

for.cond4:                                        ; preds = %for.inc, %if.end
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6145
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6145
  %lnot = xor i1 %tobool6, true, !dbg !6145
  br i1 %lnot, label %for.body7, label %for.end, !dbg !6143

for.body7:                                        ; preds = %for.cond4
  %20 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6147
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6149
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last.addr, align 8, !dbg !6150
  %call8 = call i32 @gimple_cond_code(%union.gimple_statement_d* %22), !dbg !6151
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last.addr, align 8, !dbg !6152
  %call9 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %23), !dbg !6153
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last.addr, align 8, !dbg !6154
  %call10 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %24), !dbg !6155
  %call11 = call zeroext i8 @register_edge_assert_for(%union.tree_node* %20, %struct.edge_def* %21, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 %call8, %union.tree_node* %call9, %union.tree_node* %call10), !dbg !6156
  %conv = zext i8 %call11 to i32, !dbg !6156
  %25 = load i8, i8* %need_assert, align 1, !dbg !6157
  %conv12 = zext i8 %25 to i32, !dbg !6157
  %or = or i32 %conv12, %conv, !dbg !6157
  %conv13 = trunc i32 %or to i8, !dbg !6157
  store i8 %conv13, i8* %need_assert, align 1, !dbg !6157
  br label %for.inc, !dbg !6158

for.inc:                                          ; preds = %for.body7
  %call14 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !6145
  store %union.tree_node* %call14, %union.tree_node** %op, align 8, !dbg !6145
  br label %for.cond4, !dbg !6145, !llvm.loop !6159

for.end:                                          ; preds = %for.cond4
  br label %for.inc15, !dbg !6161

for.inc15:                                        ; preds = %for.end, %if.then
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6133
  br label %for.cond, !dbg !6133, !llvm.loop !6162

for.end16:                                        ; preds = %for.cond
  %26 = load i8, i8* %need_assert, align 1, !dbg !6164
  ret i8 %26, !dbg !6165
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_switch_asserts(%struct.basic_block_def* %bb, %union.gimple_statement_d* %last) #0 !dbg !6166 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %last.addr = alloca %union.gimple_statement_d*, align 8
  %need_assert = alloca i8, align 1
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %op = alloca %union.tree_node*, align 8
  %e = alloca %struct.edge_def*, align 8
  %vec2 = alloca %union.tree_node*, align 8
  %n = alloca i64, align 8
  %idx = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %min = alloca %union.tree_node*, align 8
  %max = alloca %union.tree_node*, align 8
  %cl = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6167, metadata !DIExpression()), !dbg !6168
  store %union.gimple_statement_d* %last, %union.gimple_statement_d** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last.addr, metadata !6169, metadata !DIExpression()), !dbg !6170
  call void @llvm.dbg.declare(metadata i8* %need_assert, metadata !6171, metadata !DIExpression()), !dbg !6172
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !6173, metadata !DIExpression()), !dbg !6174
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6175, metadata !DIExpression()), !dbg !6176
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6177, metadata !DIExpression()), !dbg !6178
  call void @llvm.dbg.declare(metadata %union.tree_node** %vec2, metadata !6179, metadata !DIExpression()), !dbg !6180
  call void @llvm.dbg.declare(metadata i64* %n, metadata !6181, metadata !DIExpression()), !dbg !6182
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last.addr, align 8, !dbg !6183
  %call = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %0), !dbg !6184
  %conv = zext i32 %call to i64, !dbg !6184
  store i64 %conv, i64* %n, align 8, !dbg !6182
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !6185, metadata !DIExpression()), !dbg !6186
  store i8 0, i8* %need_assert, align 1, !dbg !6187
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last.addr, align 8, !dbg !6188
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %1), !dbg !6189
  %2 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !6189
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6189
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !6189
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last.addr, align 8, !dbg !6190
  %call1 = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %4), !dbg !6191
  store %union.tree_node* %call1, %union.tree_node** %op, align 8, !dbg !6192
  %5 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6193
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6193
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !6193
  %bf.load = load i64, i64* %6, align 8, !dbg !6193
  %bf.clear = and i64 %bf.load, 65535, !dbg !6193
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6193
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6195
  br i1 %cmp, label %if.then, label %if.end, !dbg !6196

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6197
  br label %return, !dbg !6197

if.end:                                           ; preds = %entry
  %7 = load i64, i64* %n, align 8, !dbg !6198
  %conv3 = trunc i64 %7 to i32, !dbg !6198
  %call4 = call %union.tree_node* @make_tree_vec_stat(i32 %conv3), !dbg !6198
  store %union.tree_node* %call4, %union.tree_node** %vec2, align 8, !dbg !6199
  store i32 0, i32* %idx, align 4, !dbg !6200
  br label %for.cond, !dbg !6202

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %idx, align 4, !dbg !6203
  %conv5 = zext i32 %8 to i64, !dbg !6203
  %9 = load i64, i64* %n, align 8, !dbg !6205
  %cmp6 = icmp ult i64 %conv5, %9, !dbg !6206
  br i1 %cmp6, label %for.body, label %for.end, !dbg !6207

for.body:                                         ; preds = %for.cond
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last.addr, align 8, !dbg !6208
  %11 = load i32, i32* %idx, align 4, !dbg !6209
  %call8 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %10, i32 %11), !dbg !6210
  %12 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !6211
  %vec = bitcast %union.tree_node* %12 to %struct.tree_vec*, !dbg !6211
  %a = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec, i32 0, i32 2, !dbg !6211
  %13 = load i32, i32* %idx, align 4, !dbg !6211
  %idxprom = zext i32 %13 to i64, !dbg !6211
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a, i64 0, i64 %idxprom, !dbg !6211
  store %union.tree_node* %call8, %union.tree_node** %arrayidx, align 8, !dbg !6212
  br label %for.inc, !dbg !6211

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %idx, align 4, !dbg !6213
  %inc = add i32 %14, 1, !dbg !6213
  store i32 %inc, i32* %idx, align 4, !dbg !6213
  br label %for.cond, !dbg !6214, !llvm.loop !6215

for.end:                                          ; preds = %for.cond
  %15 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !6217
  %vec9 = bitcast %union.tree_node* %15 to %struct.tree_vec*, !dbg !6217
  %a10 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec9, i32 0, i32 2, !dbg !6217
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a10, i64 0, i64 0, !dbg !6217
  %16 = bitcast %union.tree_node** %arrayidx11 to i8*, !dbg !6218
  %17 = load i64, i64* %n, align 8, !dbg !6219
  call void @spec_qsort(i8* %16, i64 %17, i64 8, i32 (i8*, i8*)* @compare_case_labels), !dbg !6220
  store i32 0, i32* %idx, align 4, !dbg !6221
  br label %for.cond12, !dbg !6223

for.cond12:                                       ; preds = %for.inc108, %for.end
  %18 = load i32, i32* %idx, align 4, !dbg !6224
  %conv13 = zext i32 %18 to i64, !dbg !6224
  %19 = load i64, i64* %n, align 8, !dbg !6226
  %cmp14 = icmp ult i64 %conv13, %19, !dbg !6227
  br i1 %cmp14, label %for.body16, label %for.end110, !dbg !6228

for.body16:                                       ; preds = %for.cond12
  call void @llvm.dbg.declare(metadata %union.tree_node** %min, metadata !6229, metadata !DIExpression()), !dbg !6231
  call void @llvm.dbg.declare(metadata %union.tree_node** %max, metadata !6232, metadata !DIExpression()), !dbg !6233
  call void @llvm.dbg.declare(metadata %union.tree_node** %cl, metadata !6234, metadata !DIExpression()), !dbg !6235
  %20 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !6236
  %vec17 = bitcast %union.tree_node* %20 to %struct.tree_vec*, !dbg !6236
  %a18 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec17, i32 0, i32 2, !dbg !6236
  %21 = load i32, i32* %idx, align 4, !dbg !6236
  %idxprom19 = zext i32 %21 to i64, !dbg !6236
  %arrayidx20 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a18, i64 0, i64 %idxprom19, !dbg !6236
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8, !dbg !6236
  store %union.tree_node* %22, %union.tree_node** %cl, align 8, !dbg !6235
  %23 = load %union.tree_node*, %union.tree_node** %cl, align 8, !dbg !6237
  %exp = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !6237
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6237
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6237
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !6237
  store %union.tree_node* %24, %union.tree_node** %min, align 8, !dbg !6238
  %25 = load %union.tree_node*, %union.tree_node** %cl, align 8, !dbg !6239
  %exp22 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !6239
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !6239
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i64 0, i64 1, !dbg !6239
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !6239
  store %union.tree_node* %26, %union.tree_node** %max, align 8, !dbg !6240
  %27 = load i32, i32* %idx, align 4, !dbg !6241
  %add = add i32 %27, 1, !dbg !6243
  %conv25 = zext i32 %add to i64, !dbg !6241
  %28 = load i64, i64* %n, align 8, !dbg !6244
  %cmp26 = icmp ult i64 %conv25, %28, !dbg !6245
  br i1 %cmp26, label %land.lhs.true, label %if.end81, !dbg !6246

land.lhs.true:                                    ; preds = %for.body16
  %29 = load %union.tree_node*, %union.tree_node** %cl, align 8, !dbg !6247
  %exp28 = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !6247
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 3, !dbg !6247
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i64 0, i64 2, !dbg !6247
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8, !dbg !6247
  %31 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !6248
  %vec31 = bitcast %union.tree_node* %31 to %struct.tree_vec*, !dbg !6248
  %a32 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec31, i32 0, i32 2, !dbg !6248
  %32 = load i32, i32* %idx, align 4, !dbg !6248
  %add33 = add i32 %32, 1, !dbg !6248
  %idxprom34 = zext i32 %add33 to i64, !dbg !6248
  %arrayidx35 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a32, i64 0, i64 %idxprom34, !dbg !6248
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx35, align 8, !dbg !6248
  %exp36 = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !6248
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !6248
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 2, !dbg !6248
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !6248
  %cmp39 = icmp eq %union.tree_node* %30, %34, !dbg !6249
  br i1 %cmp39, label %if.then41, label %if.end81, !dbg !6250

if.then41:                                        ; preds = %land.lhs.true
  br label %do.body, !dbg !6251

do.body:                                          ; preds = %land.end, %if.then41
  %35 = load i32, i32* %idx, align 4, !dbg !6253
  %inc42 = add i32 %35, 1, !dbg !6253
  store i32 %inc42, i32* %idx, align 4, !dbg !6253
  br label %do.cond, !dbg !6255

do.cond:                                          ; preds = %do.body
  %36 = load i32, i32* %idx, align 4, !dbg !6256
  %conv43 = zext i32 %36 to i64, !dbg !6256
  %37 = load i64, i64* %n, align 8, !dbg !6257
  %cmp44 = icmp ult i64 %conv43, %37, !dbg !6258
  br i1 %cmp44, label %land.rhs, label %land.end, !dbg !6259

land.rhs:                                         ; preds = %do.cond
  %38 = load %union.tree_node*, %union.tree_node** %cl, align 8, !dbg !6260
  %exp46 = bitcast %union.tree_node* %38 to %struct.tree_exp*, !dbg !6260
  %operands47 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp46, i32 0, i32 3, !dbg !6260
  %arrayidx48 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands47, i64 0, i64 2, !dbg !6260
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx48, align 8, !dbg !6260
  %40 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !6261
  %vec49 = bitcast %union.tree_node* %40 to %struct.tree_vec*, !dbg !6261
  %a50 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec49, i32 0, i32 2, !dbg !6261
  %41 = load i32, i32* %idx, align 4, !dbg !6261
  %idxprom51 = zext i32 %41 to i64, !dbg !6261
  %arrayidx52 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a50, i64 0, i64 %idxprom51, !dbg !6261
  %42 = load %union.tree_node*, %union.tree_node** %arrayidx52, align 8, !dbg !6261
  %exp53 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !6261
  %operands54 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp53, i32 0, i32 3, !dbg !6261
  %arrayidx55 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands54, i64 0, i64 2, !dbg !6261
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !6261
  %cmp56 = icmp eq %union.tree_node* %39, %43, !dbg !6262
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %44 = phi i1 [ false, %do.cond ], [ %cmp56, %land.rhs ], !dbg !6263
  br i1 %44, label %do.body, label %do.end, !dbg !6255, !llvm.loop !6264

do.end:                                           ; preds = %land.end
  %45 = load i32, i32* %idx, align 4, !dbg !6266
  %dec = add i32 %45, -1, !dbg !6266
  store i32 %dec, i32* %idx, align 4, !dbg !6266
  %46 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !6267
  %vec58 = bitcast %union.tree_node* %46 to %struct.tree_vec*, !dbg !6267
  %a59 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec58, i32 0, i32 2, !dbg !6267
  %47 = load i32, i32* %idx, align 4, !dbg !6267
  %idxprom60 = zext i32 %47 to i64, !dbg !6267
  %arrayidx61 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a59, i64 0, i64 %idxprom60, !dbg !6267
  %48 = load %union.tree_node*, %union.tree_node** %arrayidx61, align 8, !dbg !6267
  %exp62 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !6267
  %operands63 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp62, i32 0, i32 3, !dbg !6267
  %arrayidx64 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands63, i64 0, i64 1, !dbg !6267
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx64, align 8, !dbg !6267
  %tobool = icmp ne %union.tree_node* %49, null, !dbg !6267
  br i1 %tobool, label %if.then65, label %if.else, !dbg !6269

if.then65:                                        ; preds = %do.end
  %50 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !6270
  %vec66 = bitcast %union.tree_node* %50 to %struct.tree_vec*, !dbg !6270
  %a67 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec66, i32 0, i32 2, !dbg !6270
  %51 = load i32, i32* %idx, align 4, !dbg !6270
  %idxprom68 = zext i32 %51 to i64, !dbg !6270
  %arrayidx69 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a67, i64 0, i64 %idxprom68, !dbg !6270
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx69, align 8, !dbg !6270
  %exp70 = bitcast %union.tree_node* %52 to %struct.tree_exp*, !dbg !6270
  %operands71 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp70, i32 0, i32 3, !dbg !6270
  %arrayidx72 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands71, i64 0, i64 1, !dbg !6270
  %53 = load %union.tree_node*, %union.tree_node** %arrayidx72, align 8, !dbg !6270
  store %union.tree_node* %53, %union.tree_node** %max, align 8, !dbg !6271
  br label %if.end80, !dbg !6272

if.else:                                          ; preds = %do.end
  %54 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !6273
  %vec73 = bitcast %union.tree_node* %54 to %struct.tree_vec*, !dbg !6273
  %a74 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec73, i32 0, i32 2, !dbg !6273
  %55 = load i32, i32* %idx, align 4, !dbg !6273
  %idxprom75 = zext i32 %55 to i64, !dbg !6273
  %arrayidx76 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a74, i64 0, i64 %idxprom75, !dbg !6273
  %56 = load %union.tree_node*, %union.tree_node** %arrayidx76, align 8, !dbg !6273
  %exp77 = bitcast %union.tree_node* %56 to %struct.tree_exp*, !dbg !6273
  %operands78 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp77, i32 0, i32 3, !dbg !6273
  %arrayidx79 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands78, i64 0, i64 0, !dbg !6273
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx79, align 8, !dbg !6273
  store %union.tree_node* %57, %union.tree_node** %max, align 8, !dbg !6274
  br label %if.end80

if.end80:                                         ; preds = %if.else, %if.then65
  br label %if.end81, !dbg !6275

if.end81:                                         ; preds = %if.end80, %land.lhs.true, %for.body16
  %58 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !6276
  %cmp82 = icmp eq %union.tree_node* %58, null, !dbg !6278
  br i1 %cmp82, label %if.then84, label %if.end85, !dbg !6279

if.then84:                                        ; preds = %if.end81
  br label %for.inc108, !dbg !6280

if.end85:                                         ; preds = %if.end81
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6281
  %60 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6282
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %60, i64 0, !dbg !6282
  %61 = load %union.tree_node*, %union.tree_node** %cl, align 8, !dbg !6282
  %exp86 = bitcast %union.tree_node* %61 to %struct.tree_exp*, !dbg !6282
  %operands87 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp86, i32 0, i32 3, !dbg !6282
  %arrayidx88 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands87, i64 0, i64 2, !dbg !6282
  %62 = load %union.tree_node*, %union.tree_node** %arrayidx88, align 8, !dbg !6282
  %call89 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %62), !dbg !6282
  %call90 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %59, %struct.basic_block_def* %call89), !dbg !6283
  store %struct.edge_def* %call90, %struct.edge_def** %e, align 8, !dbg !6284
  %63 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6285
  %64 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6286
  %65 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !6287
  %tobool91 = icmp ne %union.tree_node* %65, null, !dbg !6287
  %66 = zext i1 %tobool91 to i64, !dbg !6287
  %cond = select i1 %tobool91, i32 100, i32 101, !dbg !6287
  %67 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6288
  %68 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6289
  %common = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !6289
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6289
  %69 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6289
  %70 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !6289
  %call92 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %69, %union.tree_node* %70), !dbg !6289
  %call93 = call zeroext i8 @register_edge_assert_for(%union.tree_node* %63, %struct.edge_def* %64, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 %cond, %union.tree_node* %67, %union.tree_node* %call92), !dbg !6290
  %conv94 = zext i8 %call93 to i32, !dbg !6290
  %71 = load i8, i8* %need_assert, align 1, !dbg !6291
  %conv95 = zext i8 %71 to i32, !dbg !6291
  %or = or i32 %conv95, %conv94, !dbg !6291
  %conv96 = trunc i32 %or to i8, !dbg !6291
  store i8 %conv96, i8* %need_assert, align 1, !dbg !6291
  %72 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !6292
  %tobool97 = icmp ne %union.tree_node* %72, null, !dbg !6292
  br i1 %tobool97, label %if.then98, label %if.end107, !dbg !6294

if.then98:                                        ; preds = %if.end85
  %73 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6295
  %74 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6297
  %75 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6298
  %76 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6299
  %common99 = bitcast %union.tree_node* %76 to %struct.tree_common*, !dbg !6299
  %type100 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common99, i32 0, i32 2, !dbg !6299
  %77 = load %union.tree_node*, %union.tree_node** %type100, align 8, !dbg !6299
  %78 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !6299
  %call101 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %77, %union.tree_node* %78), !dbg !6299
  %call102 = call zeroext i8 @register_edge_assert_for(%union.tree_node* %73, %struct.edge_def* %74, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 98, %union.tree_node* %75, %union.tree_node* %call101), !dbg !6300
  %conv103 = zext i8 %call102 to i32, !dbg !6300
  %79 = load i8, i8* %need_assert, align 1, !dbg !6301
  %conv104 = zext i8 %79 to i32, !dbg !6301
  %or105 = or i32 %conv104, %conv103, !dbg !6301
  %conv106 = trunc i32 %or105 to i8, !dbg !6301
  store i8 %conv106, i8* %need_assert, align 1, !dbg !6301
  br label %if.end107, !dbg !6302

if.end107:                                        ; preds = %if.then98, %if.end85
  br label %for.inc108, !dbg !6303

for.inc108:                                       ; preds = %if.end107, %if.then84
  %80 = load i32, i32* %idx, align 4, !dbg !6304
  %inc109 = add i32 %80, 1, !dbg !6304
  store i32 %inc109, i32* %idx, align 4, !dbg !6304
  br label %for.cond12, !dbg !6305, !llvm.loop !6306

for.end110:                                       ; preds = %for.cond12
  %81 = load i8, i8* %need_assert, align 1, !dbg !6308
  store i8 %81, i8* %retval, align 1, !dbg !6309
  br label %return, !dbg !6309

return:                                           ; preds = %for.end110, %if.then
  %82 = load i8, i8* %retval, align 1, !dbg !6310
  ret i8 %82, !dbg !6310
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6311 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6314, metadata !DIExpression()), !dbg !6315
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6316, metadata !DIExpression()), !dbg !6317
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6318, metadata !DIExpression()), !dbg !6319
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6320
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6321
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6322
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6323
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6324
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6325
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6326
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6327
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6328
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6329
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6330
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6331
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6332
  ret void, !dbg !6333
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6334 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6337, metadata !DIExpression()), !dbg !6338
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6339
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6339
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !6340
  %conv = zext i1 %cmp to i32, !dbg !6340
  %conv1 = trunc i32 %conv to i8, !dbg !6341
  ret i8 %conv1, !dbg !6342
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !6343 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6346, metadata !DIExpression()), !dbg !6347
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6348
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6349
  %cmp = icmp eq i32 %call, 2, !dbg !6350
  %conv = zext i1 %cmp to i32, !dbg !6350
  %conv1 = trunc i32 %conv to i8, !dbg !6349
  ret i8 %conv1, !dbg !6351
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6352 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6356, metadata !DIExpression()), !dbg !6357
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6358, metadata !DIExpression()), !dbg !6359
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6360, metadata !DIExpression()), !dbg !6361
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6362
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6363
  %2 = load i32, i32* %flags.addr, align 4, !dbg !6364
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !6365
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6366
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !6367
  store i32 1, i32* %iter_type, align 4, !dbg !6368
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6369
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !6370
  ret %union.tree_node* %call, !dbg !6371
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6372 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6377, metadata !DIExpression()), !dbg !6378
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6379
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !6380
  %1 = load i8, i8* %done, align 8, !dbg !6380
  ret i8 %1, !dbg !6381
}

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !6382 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !6385, metadata !DIExpression()), !dbg !6386
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !6387, metadata !DIExpression()), !dbg !6388
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6389
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !6391
  %1 = load i8*, i8** %popcount, align 8, !dbg !6391
  %tobool = icmp ne i8* %1, null, !dbg !6389
  br i1 %tobool, label %if.then, label %if.end7, !dbg !6392

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !6393, metadata !DIExpression()), !dbg !6395
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6396
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !6396
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !6396
  %div = udiv i32 %3, 64, !dbg !6396
  %idxprom = zext i32 %div to i64, !dbg !6396
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6396
  %4 = load i64, i64* %arrayidx, align 8, !dbg !6396
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !6396
  %rem = urem i32 %5, 64, !dbg !6396
  %sh_prom = zext i32 %rem to i64, !dbg !6396
  %shr = lshr i64 %4, %sh_prom, !dbg !6396
  %and = and i64 %shr, 1, !dbg !6396
  %conv = trunc i64 %and to i8, !dbg !6396
  store i8 %conv, i8* %oldbit, align 1, !dbg !6397
  %6 = load i8, i8* %oldbit, align 1, !dbg !6398
  %tobool1 = icmp ne i8 %6, 0, !dbg !6398
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !6400

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6401
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !6402
  %8 = load i8*, i8** %popcount3, align 8, !dbg !6402
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !6403
  %div4 = udiv i32 %9, 64, !dbg !6404
  %idxprom5 = zext i32 %div4 to i64, !dbg !6401
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !6401
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !6405
  %inc = add i8 %10, 1, !dbg !6405
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !6405
  br label %if.end, !dbg !6401

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !6406

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !6407
  %rem8 = urem i32 %11, 64, !dbg !6408
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !6409
  %shl = shl i64 1, %sh_prom9, !dbg !6409
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6410
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !6411
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !6412
  %div11 = udiv i32 %13, 64, !dbg !6413
  %idxprom12 = zext i32 %div11 to i64, !dbg !6410
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !6410
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !6414
  %or = or i64 %14, %shl, !dbg !6414
  store i64 %or, i64* %arrayidx13, align 8, !dbg !6414
  ret void, !dbg !6415
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @infer_value_range(%union.gimple_statement_d* %stmt, %union.tree_node* %op, i32* %comp_code_p, %union.tree_node** %val_p) #0 !dbg !6416 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %comp_code_p.addr = alloca i32*, align 8
  %val_p.addr = alloca %union.tree_node**, align 8
  %num_uses = alloca i32, align 4
  %num_loads = alloca i32, align 4
  %num_stores = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6420, metadata !DIExpression()), !dbg !6421
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6422, metadata !DIExpression()), !dbg !6423
  store i32* %comp_code_p, i32** %comp_code_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %comp_code_p.addr, metadata !6424, metadata !DIExpression()), !dbg !6425
  store %union.tree_node** %val_p, %union.tree_node*** %val_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %val_p.addr, metadata !6426, metadata !DIExpression()), !dbg !6427
  %0 = load %union.tree_node**, %union.tree_node*** %val_p.addr, align 8, !dbg !6428
  store %union.tree_node* null, %union.tree_node** %0, align 8, !dbg !6429
  %1 = load i32*, i32** %comp_code_p.addr, align 8, !dbg !6430
  store i32 0, i32* %1, align 4, !dbg !6431
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6432
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6432
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6432
  %bf.load = load i64, i64* %3, align 8, !dbg !6432
  %bf.lshr = lshr i64 %bf.load, 22, !dbg !6432
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6432
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6432
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !6432
  br i1 %tobool, label %if.then, label %if.end, !dbg !6434

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6435
  br label %return, !dbg !6435

if.end:                                           ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6436
  %call = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %4), !dbg !6438
  %tobool1 = icmp ne i8 %call, 0, !dbg !6438
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !6439

if.then2:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6440
  br label %return, !dbg !6440

if.end3:                                          ; preds = %if.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6441
  %call4 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %5), !dbg !6443
  %conv = zext i8 %call4 to i32, !dbg !6443
  %tobool5 = icmp ne i32 %conv, 0, !dbg !6443
  br i1 %tobool5, label %land.lhs.true, label %if.end14, !dbg !6444

land.lhs.true:                                    ; preds = %if.end3
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6445
  %call6 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !6445
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call6, i32 0, i32 1, !dbg !6445
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6445
  %tobool7 = icmp ne %struct.VEC_edge_gc* %7, null, !dbg !6445
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !6445

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6445
  %call8 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %8), !dbg !6445
  %succs9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call8, i32 0, i32 1, !dbg !6445
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs9, align 8, !dbg !6445
  %base10 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %9, i32 0, i32 0, !dbg !6445
  br label %cond.end, !dbg !6445

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6445

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base10, %cond.true ], [ null, %cond.false ], !dbg !6445
  %call11 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6445
  %cmp = icmp eq i32 %call11, 0, !dbg !6446
  br i1 %cmp, label %if.then13, label %if.end14, !dbg !6447

if.then13:                                        ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !6448
  br label %return, !dbg !6448

if.end14:                                         ; preds = %cond.end, %if.end3
  %10 = load i32, i32* @flag_delete_null_pointer_checks, align 4, !dbg !6449
  %tobool15 = icmp ne i32 %10, 0, !dbg !6449
  br i1 %tobool15, label %land.lhs.true16, label %if.end43, !dbg !6451

land.lhs.true16:                                  ; preds = %if.end14
  %11 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6452
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6452
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6452
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6452
  %base17 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6452
  %13 = bitcast %struct.tree_base* %base17 to i64*, !dbg !6452
  %bf.load18 = load i64, i64* %13, align 8, !dbg !6452
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !6452
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !6452
  %cmp21 = icmp eq i32 %bf.cast20, 10, !dbg !6452
  br i1 %cmp21, label %land.lhs.true31, label %lor.lhs.false, !dbg !6452

lor.lhs.false:                                    ; preds = %land.lhs.true16
  %14 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6452
  %common23 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !6452
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !6452
  %15 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !6452
  %base25 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !6452
  %16 = bitcast %struct.tree_base* %base25 to i64*, !dbg !6452
  %bf.load26 = load i64, i64* %16, align 8, !dbg !6452
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !6452
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !6452
  %cmp29 = icmp eq i32 %bf.cast28, 12, !dbg !6452
  br i1 %cmp29, label %land.lhs.true31, label %if.end43, !dbg !6453

land.lhs.true31:                                  ; preds = %lor.lhs.false, %land.lhs.true16
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6454
  %call32 = call i32 @gimple_code(%union.gimple_statement_d* %17), !dbg !6455
  %cmp33 = icmp ne i32 %call32, 7, !dbg !6456
  br i1 %cmp33, label %if.then35, label %if.end43, !dbg !6457

if.then35:                                        ; preds = %land.lhs.true31
  call void @llvm.dbg.declare(metadata i32* %num_uses, metadata !6458, metadata !DIExpression()), !dbg !6460
  call void @llvm.dbg.declare(metadata i32* %num_loads, metadata !6461, metadata !DIExpression()), !dbg !6462
  call void @llvm.dbg.declare(metadata i32* %num_stores, metadata !6463, metadata !DIExpression()), !dbg !6464
  %18 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6465
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6466
  call void @count_uses_and_derefs(%union.tree_node* %18, %union.gimple_statement_d* %19, i32* %num_uses, i32* %num_loads, i32* %num_stores), !dbg !6467
  %20 = load i32, i32* %num_loads, align 4, !dbg !6468
  %21 = load i32, i32* %num_stores, align 4, !dbg !6470
  %add = add i32 %20, %21, !dbg !6471
  %cmp36 = icmp ugt i32 %add, 0, !dbg !6472
  br i1 %cmp36, label %if.then38, label %if.end42, !dbg !6473

if.then38:                                        ; preds = %if.then35
  %22 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6474
  %common39 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !6474
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !6474
  %23 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !6474
  %call41 = call %union.tree_node* @build_int_cst(%union.tree_node* %23, i64 0), !dbg !6476
  %24 = load %union.tree_node**, %union.tree_node*** %val_p.addr, align 8, !dbg !6477
  store %union.tree_node* %call41, %union.tree_node** %24, align 8, !dbg !6478
  %25 = load i32*, i32** %comp_code_p.addr, align 8, !dbg !6479
  store i32 102, i32* %25, align 4, !dbg !6480
  store i8 1, i8* %retval, align 1, !dbg !6481
  br label %return, !dbg !6481

if.end42:                                         ; preds = %if.then35
  br label %if.end43, !dbg !6482

if.end43:                                         ; preds = %if.end42, %land.lhs.true31, %lor.lhs.false, %if.end14
  store i8 0, i8* %retval, align 1, !dbg !6483
  br label %return, !dbg !6483

return:                                           ; preds = %if.end43, %if.then38, %if.then13, %if.then2, %if.then
  %26 = load i8, i8* %retval, align 1, !dbg !6484
  ret i8 %26, !dbg !6484
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !6485 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6486, metadata !DIExpression()), !dbg !6487
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6488
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6489
  %cmp = icmp eq i32 %call, 6, !dbg !6490
  %conv = zext i1 %cmp to i32, !dbg !6490
  %conv1 = trunc i32 %conv to i8, !dbg !6489
  ret i8 %conv1, !dbg !6491
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !6492 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6495, metadata !DIExpression()), !dbg !6496
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6497, metadata !DIExpression()), !dbg !6498
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6499
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !6500
  store i32 %call, i32* %code, align 4, !dbg !6501
  %1 = load i32, i32* %code, align 4, !dbg !6502
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !6504
  %cmp = icmp eq i32 %call1, 3, !dbg !6505
  br i1 %cmp, label %if.then, label %if.end, !dbg !6506

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6507
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !6507
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6507
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6507
  %bf.load = load i64, i64* %3, align 8, !dbg !6507
  %bf.clear = and i64 %bf.load, 65535, !dbg !6507
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6507
  store i32 %bf.cast, i32* %code, align 4, !dbg !6508
  br label %if.end, !dbg !6509

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !6510
  ret i32 %4, !dbg !6511
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !6512 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6513, metadata !DIExpression()), !dbg !6514
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6515
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6516
  ret %union.tree_node* %call, !dbg !6517
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_single_use(%union.tree_node* %var) #0 !dbg !6518 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6519, metadata !DIExpression()), !dbg !6520
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !6521, metadata !DIExpression()), !dbg !6525
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6526
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6526
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6526
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6525
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6527
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6529
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6530
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6530
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6531
  br i1 %cmp, label %if.then, label %if.end, !dbg !6532

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6533
  br label %return, !dbg !6533

if.end:                                           ; preds = %entry
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6534
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6536
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !6537
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next1, align 8, !dbg !6537
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !6538
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !6538
  %cmp3 = icmp eq %struct.ssa_use_operand_d* %4, %7, !dbg !6539
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !6540

if.then4:                                         ; preds = %if.end
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6541
  %next5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !6541
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next5, align 8, !dbg !6541
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 2, !dbg !6541
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6541
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6541
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %10), !dbg !6542
  %tobool = icmp ne i8 %call, 0, !dbg !6543
  %lnot = xor i1 %tobool, true, !dbg !6543
  %lnot.ext = zext i1 %lnot to i32, !dbg !6543
  %conv = trunc i32 %lnot.ext to i8, !dbg !6543
  store i8 %conv, i8* %retval, align 1, !dbg !6544
  br label %return, !dbg !6544

if.end6:                                          ; preds = %if.end
  %11 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !6545
  %tobool7 = icmp ne i32 %11, 0, !dbg !6545
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !6547

if.then8:                                         ; preds = %if.end6
  store i8 0, i8* %retval, align 1, !dbg !6548
  br label %return, !dbg !6548

if.end9:                                          ; preds = %if.end6
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6549
  %call10 = call zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d** null, %union.gimple_statement_d** null), !dbg !6550
  store i8 %call10, i8* %retval, align 1, !dbg !6551
  br label %return, !dbg !6551

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !6552
  ret i8 %13, !dbg !6552
}

; Function Attrs: noinline nounwind uwtable
define internal void @register_new_assert_for(%union.tree_node* %name, %union.tree_node* %expr, i32 %comp_code, %union.tree_node* %val, %struct.basic_block_def* %bb, %struct.edge_def* %e, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si) #0 !dbg !6553 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %comp_code.addr = alloca i32, align 4
  %val.addr = alloca %union.tree_node*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %n = alloca %struct.assert_locus_d*, align 8
  %loc = alloca %struct.assert_locus_d*, align 8
  %last_loc = alloca %struct.assert_locus_d*, align 8
  %dest_bb = alloca %struct.basic_block_def*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6556, metadata !DIExpression()), !dbg !6557
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !6558, metadata !DIExpression()), !dbg !6559
  store i32 %comp_code, i32* %comp_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %comp_code.addr, metadata !6560, metadata !DIExpression()), !dbg !6561
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !6562, metadata !DIExpression()), !dbg !6563
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6564, metadata !DIExpression()), !dbg !6565
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !6566, metadata !DIExpression()), !dbg !6567
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !6568, metadata !DIExpression()), !dbg !6569
  call void @llvm.dbg.declare(metadata %struct.assert_locus_d** %n, metadata !6570, metadata !DIExpression()), !dbg !6571
  call void @llvm.dbg.declare(metadata %struct.assert_locus_d** %loc, metadata !6572, metadata !DIExpression()), !dbg !6573
  call void @llvm.dbg.declare(metadata %struct.assert_locus_d** %last_loc, metadata !6574, metadata !DIExpression()), !dbg !6575
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest_bb, metadata !6576, metadata !DIExpression()), !dbg !6577
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6578
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6578
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6578
  %bf.load = load i64, i64* %1, align 8, !dbg !6578
  %bf.clear = and i64 %bf.load, 65535, !dbg !6578
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6578
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !6580
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6581

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6582
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6582
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6582
  %bf.load2 = load i64, i64* %3, align 8, !dbg !6582
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !6582
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !6582
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6582
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !6582
  br i1 %tobool, label %if.then, label %if.end, !dbg !6583

if.then:                                          ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6584
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !6584
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6584
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6584
  %6 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6585
  %int_cst = bitcast %union.tree_node* %6 to %struct.tree_int_cst*, !dbg !6585
  %int_cst5 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !6585
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst5, i32 0, i32 0, !dbg !6585
  %7 = load i64, i64* %low, align 8, !dbg !6585
  %8 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6586
  %int_cst6 = bitcast %union.tree_node* %8 to %struct.tree_int_cst*, !dbg !6586
  %int_cst7 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst6, i32 0, i32 1, !dbg !6586
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst7, i32 0, i32 1, !dbg !6586
  %9 = load i64, i64* %high, align 8, !dbg !6586
  %call = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %5, i64 %7, i64 %9), !dbg !6587
  store %union.tree_node* %call, %union.tree_node** %val.addr, align 8, !dbg !6588
  br label %if.end, !dbg !6589

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6590
  %tobool8 = icmp ne %struct.basic_block_def* %10, null, !dbg !6591
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !6591

cond.true:                                        ; preds = %if.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6592
  br label %cond.end, !dbg !6591

cond.false:                                       ; preds = %if.end
  %12 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6593
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %12, i32 0, i32 1, !dbg !6594
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6594
  br label %cond.end, !dbg !6591

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %11, %cond.true ], [ %13, %cond.false ], !dbg !6591
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %dest_bb, align 8, !dbg !6595
  %14 = load %struct.assert_locus_d**, %struct.assert_locus_d*** @asserts_for, align 8, !dbg !6596
  %15 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6597
  %ssa_name = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !6597
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !6597
  %16 = load i32, i32* %version, align 8, !dbg !6597
  %idxprom = zext i32 %16 to i64, !dbg !6596
  %arrayidx = getelementptr inbounds %struct.assert_locus_d*, %struct.assert_locus_d** %14, i64 %idxprom, !dbg !6596
  %17 = load %struct.assert_locus_d*, %struct.assert_locus_d** %arrayidx, align 8, !dbg !6596
  store %struct.assert_locus_d* %17, %struct.assert_locus_d** %loc, align 8, !dbg !6598
  %18 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6599
  store %struct.assert_locus_d* %18, %struct.assert_locus_d** %last_loc, align 8, !dbg !6600
  br label %while.cond, !dbg !6601

while.cond:                                       ; preds = %if.end70, %cond.end
  %19 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6602
  %tobool9 = icmp ne %struct.assert_locus_d* %19, null, !dbg !6601
  br i1 %tobool9, label %while.body, label %while.end, !dbg !6601

while.body:                                       ; preds = %while.cond
  %20 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6603
  %comp_code10 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %20, i32 0, i32 3, !dbg !6606
  %21 = load i32, i32* %comp_code10, align 8, !dbg !6606
  %22 = load i32, i32* %comp_code.addr, align 4, !dbg !6607
  %cmp11 = icmp eq i32 %21, %22, !dbg !6608
  br i1 %cmp11, label %land.lhs.true12, label %if.end70, !dbg !6609

land.lhs.true12:                                  ; preds = %while.body
  %23 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6610
  %val13 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %23, i32 0, i32 4, !dbg !6611
  %24 = load %union.tree_node*, %union.tree_node** %val13, align 8, !dbg !6611
  %25 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6612
  %cmp14 = icmp eq %union.tree_node* %24, %25, !dbg !6613
  br i1 %cmp14, label %land.lhs.true18, label %lor.lhs.false, !dbg !6614

lor.lhs.false:                                    ; preds = %land.lhs.true12
  %26 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6615
  %val15 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %26, i32 0, i32 4, !dbg !6616
  %27 = load %union.tree_node*, %union.tree_node** %val15, align 8, !dbg !6616
  %28 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6617
  %call16 = call i32 @operand_equal_p(%union.tree_node* %27, %union.tree_node* %28, i32 0), !dbg !6618
  %tobool17 = icmp ne i32 %call16, 0, !dbg !6618
  br i1 %tobool17, label %land.lhs.true18, label %if.end70, !dbg !6619

land.lhs.true18:                                  ; preds = %lor.lhs.false, %land.lhs.true12
  %29 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6620
  %expr19 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %29, i32 0, i32 5, !dbg !6621
  %30 = load %union.tree_node*, %union.tree_node** %expr19, align 8, !dbg !6621
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6622
  %cmp20 = icmp eq %union.tree_node* %30, %31, !dbg !6623
  br i1 %cmp20, label %if.then25, label %lor.lhs.false21, !dbg !6624

lor.lhs.false21:                                  ; preds = %land.lhs.true18
  %32 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6625
  %expr22 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %32, i32 0, i32 5, !dbg !6626
  %33 = load %union.tree_node*, %union.tree_node** %expr22, align 8, !dbg !6626
  %34 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6627
  %call23 = call i32 @operand_equal_p(%union.tree_node* %33, %union.tree_node* %34, i32 0), !dbg !6628
  %tobool24 = icmp ne i32 %call23, 0, !dbg !6628
  br i1 %tobool24, label %if.then25, label %if.end70, !dbg !6629

if.then25:                                        ; preds = %lor.lhs.false21, %land.lhs.true18
  %35 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6630
  %cmp26 = icmp eq %struct.edge_def* %35, null, !dbg !6633
  br i1 %cmp26, label %land.lhs.true27, label %if.end32, !dbg !6634

land.lhs.true27:                                  ; preds = %if.then25
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %dest_bb, align 8, !dbg !6635
  %37 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6636
  %bb28 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %37, i32 0, i32 0, !dbg !6637
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb28, align 8, !dbg !6637
  %call29 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %36, %struct.basic_block_def* %38), !dbg !6638
  %conv = zext i8 %call29 to i32, !dbg !6638
  %tobool30 = icmp ne i32 %conv, 0, !dbg !6638
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !6639

if.then31:                                        ; preds = %land.lhs.true27
  br label %return, !dbg !6640

if.end32:                                         ; preds = %land.lhs.true27, %if.then25
  %39 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6641
  %cmp33 = icmp eq %struct.edge_def* %39, null, !dbg !6643
  br i1 %cmp33, label %land.lhs.true60, label %lor.lhs.false35, !dbg !6644

lor.lhs.false35:                                  ; preds = %if.end32
  %40 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6645
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %40, i32 0, i32 0, !dbg !6645
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6645
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 1, !dbg !6645
  %42 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6645
  %tobool36 = icmp ne %struct.VEC_edge_gc* %42, null, !dbg !6645
  br i1 %tobool36, label %cond.true37, label %cond.false41, !dbg !6645

cond.true37:                                      ; preds = %lor.lhs.false35
  %43 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6645
  %src38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 0, !dbg !6645
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %src38, align 8, !dbg !6645
  %succs39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 1, !dbg !6645
  %45 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs39, align 8, !dbg !6645
  %base40 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %45, i32 0, i32 0, !dbg !6645
  br label %cond.end42, !dbg !6645

cond.false41:                                     ; preds = %lor.lhs.false35
  br label %cond.end42, !dbg !6645

cond.end42:                                       ; preds = %cond.false41, %cond.true37
  %cond43 = phi %struct.VEC_edge_base* [ %base40, %cond.true37 ], [ null, %cond.false41 ], !dbg !6645
  %call44 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond43), !dbg !6645
  %cmp45 = icmp uge i32 %call44, 2, !dbg !6645
  br i1 %cmp45, label %land.lhs.true47, label %land.lhs.true60, !dbg !6645

land.lhs.true47:                                  ; preds = %cond.end42
  %46 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6645
  %dest48 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 1, !dbg !6645
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %dest48, align 8, !dbg !6645
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 0, !dbg !6645
  %48 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6645
  %tobool49 = icmp ne %struct.VEC_edge_gc* %48, null, !dbg !6645
  br i1 %tobool49, label %cond.true50, label %cond.false54, !dbg !6645

cond.true50:                                      ; preds = %land.lhs.true47
  %49 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6645
  %dest51 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 1, !dbg !6645
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %dest51, align 8, !dbg !6645
  %preds52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 0, !dbg !6645
  %51 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds52, align 8, !dbg !6645
  %base53 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %51, i32 0, i32 0, !dbg !6645
  br label %cond.end55, !dbg !6645

cond.false54:                                     ; preds = %land.lhs.true47
  br label %cond.end55, !dbg !6645

cond.end55:                                       ; preds = %cond.false54, %cond.true50
  %cond56 = phi %struct.VEC_edge_base* [ %base53, %cond.true50 ], [ null, %cond.false54 ], !dbg !6645
  %call57 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond56), !dbg !6645
  %cmp58 = icmp uge i32 %call57, 2, !dbg !6645
  br i1 %cmp58, label %if.end69, label %land.lhs.true60, !dbg !6646

land.lhs.true60:                                  ; preds = %cond.end55, %cond.end42, %if.end32
  %52 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6647
  %bb61 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %52, i32 0, i32 0, !dbg !6648
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb61, align 8, !dbg !6648
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %dest_bb, align 8, !dbg !6649
  %call62 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %53, %struct.basic_block_def* %54), !dbg !6650
  %conv63 = zext i8 %call62 to i32, !dbg !6650
  %tobool64 = icmp ne i32 %conv63, 0, !dbg !6650
  br i1 %tobool64, label %if.then65, label %if.end69, !dbg !6651

if.then65:                                        ; preds = %land.lhs.true60
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %dest_bb, align 8, !dbg !6652
  %56 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6654
  %bb66 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %56, i32 0, i32 0, !dbg !6655
  store %struct.basic_block_def* %55, %struct.basic_block_def** %bb66, align 8, !dbg !6656
  %57 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6657
  %58 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6658
  %e67 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %58, i32 0, i32 1, !dbg !6659
  store %struct.edge_def* %57, %struct.edge_def** %e67, align 8, !dbg !6660
  %59 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6661
  %si68 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %59, i32 0, i32 2, !dbg !6662
  %60 = bitcast %struct.gimple_stmt_iterator* %si68 to i8*, !dbg !6663
  %61 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !6663
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 24, i1 false), !dbg !6663
  br label %return, !dbg !6664

if.end69:                                         ; preds = %land.lhs.true60, %cond.end55
  br label %if.end70, !dbg !6665

if.end70:                                         ; preds = %if.end69, %lor.lhs.false21, %lor.lhs.false, %while.body
  %62 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6666
  store %struct.assert_locus_d* %62, %struct.assert_locus_d** %last_loc, align 8, !dbg !6667
  %63 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc, align 8, !dbg !6668
  %next = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %63, i32 0, i32 6, !dbg !6669
  %64 = load %struct.assert_locus_d*, %struct.assert_locus_d** %next, align 8, !dbg !6669
  store %struct.assert_locus_d* %64, %struct.assert_locus_d** %loc, align 8, !dbg !6670
  br label %while.cond, !dbg !6601, !llvm.loop !6671

while.end:                                        ; preds = %while.cond
  %call71 = call i8* @xmalloc(i64 72), !dbg !6673
  %65 = bitcast i8* %call71 to %struct.assert_locus_d*, !dbg !6673
  store %struct.assert_locus_d* %65, %struct.assert_locus_d** %n, align 8, !dbg !6674
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %dest_bb, align 8, !dbg !6675
  %67 = load %struct.assert_locus_d*, %struct.assert_locus_d** %n, align 8, !dbg !6676
  %bb72 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %67, i32 0, i32 0, !dbg !6677
  store %struct.basic_block_def* %66, %struct.basic_block_def** %bb72, align 8, !dbg !6678
  %68 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6679
  %69 = load %struct.assert_locus_d*, %struct.assert_locus_d** %n, align 8, !dbg !6680
  %e73 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %69, i32 0, i32 1, !dbg !6681
  store %struct.edge_def* %68, %struct.edge_def** %e73, align 8, !dbg !6682
  %70 = load %struct.assert_locus_d*, %struct.assert_locus_d** %n, align 8, !dbg !6683
  %si74 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %70, i32 0, i32 2, !dbg !6684
  %71 = bitcast %struct.gimple_stmt_iterator* %si74 to i8*, !dbg !6685
  %72 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !6685
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 24, i1 false), !dbg !6685
  %73 = load i32, i32* %comp_code.addr, align 4, !dbg !6686
  %74 = load %struct.assert_locus_d*, %struct.assert_locus_d** %n, align 8, !dbg !6687
  %comp_code75 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %74, i32 0, i32 3, !dbg !6688
  store i32 %73, i32* %comp_code75, align 8, !dbg !6689
  %75 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6690
  %76 = load %struct.assert_locus_d*, %struct.assert_locus_d** %n, align 8, !dbg !6691
  %val76 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %76, i32 0, i32 4, !dbg !6692
  store %union.tree_node* %75, %union.tree_node** %val76, align 8, !dbg !6693
  %77 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6694
  %78 = load %struct.assert_locus_d*, %struct.assert_locus_d** %n, align 8, !dbg !6695
  %expr77 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %78, i32 0, i32 5, !dbg !6696
  store %union.tree_node* %77, %union.tree_node** %expr77, align 8, !dbg !6697
  %79 = load %struct.assert_locus_d*, %struct.assert_locus_d** %n, align 8, !dbg !6698
  %next78 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %79, i32 0, i32 6, !dbg !6699
  store %struct.assert_locus_d* null, %struct.assert_locus_d** %next78, align 8, !dbg !6700
  %80 = load %struct.assert_locus_d*, %struct.assert_locus_d** %last_loc, align 8, !dbg !6701
  %tobool79 = icmp ne %struct.assert_locus_d* %80, null, !dbg !6701
  br i1 %tobool79, label %if.then80, label %if.else, !dbg !6703

if.then80:                                        ; preds = %while.end
  %81 = load %struct.assert_locus_d*, %struct.assert_locus_d** %n, align 8, !dbg !6704
  %82 = load %struct.assert_locus_d*, %struct.assert_locus_d** %last_loc, align 8, !dbg !6705
  %next81 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %82, i32 0, i32 6, !dbg !6706
  store %struct.assert_locus_d* %81, %struct.assert_locus_d** %next81, align 8, !dbg !6707
  br label %if.end86, !dbg !6705

if.else:                                          ; preds = %while.end
  %83 = load %struct.assert_locus_d*, %struct.assert_locus_d** %n, align 8, !dbg !6708
  %84 = load %struct.assert_locus_d**, %struct.assert_locus_d*** @asserts_for, align 8, !dbg !6709
  %85 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6710
  %ssa_name82 = bitcast %union.tree_node* %85 to %struct.tree_ssa_name*, !dbg !6710
  %version83 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name82, i32 0, i32 3, !dbg !6710
  %86 = load i32, i32* %version83, align 8, !dbg !6710
  %idxprom84 = zext i32 %86 to i64, !dbg !6709
  %arrayidx85 = getelementptr inbounds %struct.assert_locus_d*, %struct.assert_locus_d** %84, i64 %idxprom84, !dbg !6709
  store %struct.assert_locus_d* %83, %struct.assert_locus_d** %arrayidx85, align 8, !dbg !6711
  br label %if.end86

if.end86:                                         ; preds = %if.else, %if.then80
  %87 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !6712
  %88 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6713
  %ssa_name87 = bitcast %union.tree_node* %88 to %struct.tree_ssa_name*, !dbg !6713
  %version88 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name87, i32 0, i32 3, !dbg !6713
  %89 = load i32, i32* %version88, align 8, !dbg !6713
  %call89 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %87, i32 %89), !dbg !6714
  br label %return, !dbg !6715

return:                                           ; preds = %if.end86, %if.then65, %if.then31
  ret void, !dbg !6715
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6716 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6719, metadata !DIExpression()), !dbg !6720
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !6721, metadata !DIExpression()), !dbg !6722
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6723
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !6725
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !6725
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !6723
  br i1 %tobool, label %if.then, label %if.end, !dbg !6726

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6727
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !6727
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !6727
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !6727
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !6727
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !6729
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6730
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !6731
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !6731
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !6732
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !6732
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6733
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !6734
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !6735
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6736
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !6737
  br label %return, !dbg !6737

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6738
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !6740
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !6740
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !6738
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !6741

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6742
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !6742
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !6742
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !6742
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !6742
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !6742
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !6744
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6745
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !6746
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !6746
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !6747
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !6747
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6748
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !6749
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !6750
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6751
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !6752
  br label %return, !dbg !6752

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6753
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !6754
  store i8 1, i8* %done, align 8, !dbg !6755
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6756
  br label %return, !dbg !6756

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6757
  ret %union.tree_node* %20, !dbg !6757
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !6758 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6762, metadata !DIExpression()), !dbg !6763
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6764
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6765
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6765
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !6766
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !6766
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6767
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6768
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6769
  ret void, !dbg !6770
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !6771 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6774, metadata !DIExpression()), !dbg !6775
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6776, metadata !DIExpression()), !dbg !6777
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6778, metadata !DIExpression()), !dbg !6779
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !6780, metadata !DIExpression()), !dbg !6781
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6782
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !6783
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !6781
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !6784, metadata !DIExpression()), !dbg !6785
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6786
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !6787
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6788
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !6789
  store i8 0, i8* %done, align 8, !dbg !6790
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6791
  %and = and i32 %3, 5, !dbg !6791
  %cmp = icmp ne i32 %and, 0, !dbg !6791
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6791

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !6791
  br label %cond.end, !dbg !6791

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6791

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6791
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !6792
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6793
  %conv = zext i8 %call1 to i32, !dbg !6793
  %tobool = icmp ne i32 %conv, 0, !dbg !6793
  %5 = zext i1 %tobool to i64, !dbg !6793
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !6793
  store i32 %cond2, i32* %comp, align 4, !dbg !6794
  %6 = load i32, i32* %flags.addr, align 4, !dbg !6795
  %7 = load i32, i32* %comp, align 4, !dbg !6797
  %and3 = and i32 %6, %7, !dbg !6798
  %cmp4 = icmp eq i32 %and3, 0, !dbg !6799
  br i1 %cmp4, label %if.then, label %if.end, !dbg !6800

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6801
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !6803
  store i8 1, i8* %done6, align 8, !dbg !6804
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6805
  br label %return, !dbg !6805

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6806
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6807
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !6808
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6809
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6810
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !6811
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6812
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !6813
  store i32 %call7, i32* %num_phi, align 4, !dbg !6814
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6815
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !6816
  store i32 2, i32* %iter_type, align 4, !dbg !6817
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6818
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !6819
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6820
  br label %return, !dbg !6820

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6821
  ret %struct.ssa_use_operand_d* %15, !dbg !6821
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !6822 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6825, metadata !DIExpression()), !dbg !6826
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6827
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !6828
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6828
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !6829
  ret %union.tree_node* %2, !dbg !6830
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6831 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6834, metadata !DIExpression()), !dbg !6835
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6836, metadata !DIExpression()), !dbg !6837
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6838
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !6840
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !6840
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !6838
  br i1 %tobool, label %if.then, label %if.end, !dbg !6841

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6842
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !6842
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !6842
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !6842
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6844
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6845
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !6846
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !6846
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !6847
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !6847
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6848
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !6849
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !6850
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6851
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6852
  br label %return, !dbg !6852

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6853
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !6855
  %10 = load i32, i32* %phi_i, align 8, !dbg !6855
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6856
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !6857
  %12 = load i32, i32* %num_phi, align 4, !dbg !6857
  %cmp = icmp slt i32 %10, %12, !dbg !6858
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !6859

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6860
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !6860
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6860
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6860
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !6860
  %16 = load i32, i32* %phi_i5, align 8, !dbg !6860
  %inc = add nsw i32 %16, 1, !dbg !6860
  store i32 %inc, i32* %phi_i5, align 8, !dbg !6860
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !6860
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6862
  br label %return, !dbg !6862

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6863
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !6864
  store i8 1, i8* %done, align 8, !dbg !6865
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6866
  br label %return, !dbg !6866

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6867
  ret %struct.ssa_use_operand_d* %18, !dbg !6867
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6868 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6869, metadata !DIExpression()), !dbg !6870
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6871
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6872
  ret %union.tree_node* %call, !dbg !6873
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6874 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6877, metadata !DIExpression()), !dbg !6878
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6879, metadata !DIExpression()), !dbg !6880
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6881
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6883
  %tobool = icmp ne i8 %call, 0, !dbg !6883
  br i1 %tobool, label %if.then, label %if.else, !dbg !6884

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6885
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6887
  %2 = load i32, i32* %i.addr, align 4, !dbg !6888
  %idxprom = zext i32 %2 to i64, !dbg !6887
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6887
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6887
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6889
  br label %return, !dbg !6889

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6890
  br label %return, !dbg !6890

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6891
  ret %union.tree_node* %4, !dbg !6891
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6892 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6893, metadata !DIExpression()), !dbg !6894
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6895
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6896
  %cmp = icmp uge i32 %call, 1, !dbg !6897
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6898

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6899
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6900
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6901
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6902
  %land.ext = zext i1 %2 to i32, !dbg !6898
  %conv = trunc i32 %land.ext to i8, !dbg !6896
  ret i8 %conv, !dbg !6903
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6904 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6907, metadata !DIExpression()), !dbg !6908
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6909, metadata !DIExpression()), !dbg !6910
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6911
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6912
  %idxprom = zext i32 %call to i64, !dbg !6913
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6913
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6913
  store i64 %1, i64* %off, align 8, !dbg !6914
  %2 = load i64, i64* %off, align 8, !dbg !6915
  %cmp = icmp ne i64 %2, 0, !dbg !6915
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6915

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !6915
  br label %cond.end, !dbg !6915

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6915

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6915
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6916
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6917
  %5 = load i64, i64* %off, align 8, !dbg !6918
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6919
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6920
  ret %union.tree_node** %6, !dbg !6921
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6922 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6925, metadata !DIExpression()), !dbg !6926
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6927
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6928
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6929
  ret i32 %call1, !dbg !6930
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6931 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6934, metadata !DIExpression()), !dbg !6935
  %0 = load i32, i32* %code.addr, align 4, !dbg !6936
  %idxprom = zext i32 %0 to i64, !dbg !6937
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6937
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6937
  ret i32 %1, !dbg !6938
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @register_edge_assert_for(%union.tree_node* %name, %struct.edge_def* %e, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si, i32 %cond_code, %union.tree_node* %cond_op0, %union.tree_node* %cond_op1) #0 !dbg !6939 {
entry:
  %retval = alloca i8, align 1
  %name.addr = alloca %union.tree_node*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %cond_code.addr = alloca i32, align 4
  %cond_op0.addr = alloca %union.tree_node*, align 8
  %cond_op1.addr = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %comp_code = alloca i32, align 4
  %retval1 = alloca i8, align 1
  %is_else_edge = alloca i8, align 1
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %def_stmt59 = alloca %union.gimple_statement_d*, align 8
  %op077 = alloca %union.tree_node*, align 8
  %op179 = alloca %union.tree_node*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6942, metadata !DIExpression()), !dbg !6943
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !6944, metadata !DIExpression()), !dbg !6945
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !6946, metadata !DIExpression()), !dbg !6947
  store i32 %cond_code, i32* %cond_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cond_code.addr, metadata !6948, metadata !DIExpression()), !dbg !6949
  store %union.tree_node* %cond_op0, %union.tree_node** %cond_op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond_op0.addr, metadata !6950, metadata !DIExpression()), !dbg !6951
  store %union.tree_node* %cond_op1, %union.tree_node** %cond_op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond_op1.addr, metadata !6952, metadata !DIExpression()), !dbg !6953
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !6954, metadata !DIExpression()), !dbg !6955
  call void @llvm.dbg.declare(metadata i32* %comp_code, metadata !6956, metadata !DIExpression()), !dbg !6957
  call void @llvm.dbg.declare(metadata i8* %retval1, metadata !6958, metadata !DIExpression()), !dbg !6959
  store i8 0, i8* %retval1, align 1, !dbg !6959
  call void @llvm.dbg.declare(metadata i8* %is_else_edge, metadata !6960, metadata !DIExpression()), !dbg !6961
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6962
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 7, !dbg !6963
  %1 = load i32, i32* %flags, align 8, !dbg !6963
  %and = and i32 %1, 2048, !dbg !6964
  %cmp = icmp ne i32 %and, 0, !dbg !6965
  %conv = zext i1 %cmp to i32, !dbg !6965
  %conv2 = trunc i32 %conv to i8, !dbg !6966
  store i8 %conv2, i8* %is_else_edge, align 1, !dbg !6961
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6967
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6967
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6967
  %bf.load = load i64, i64* %3, align 8, !dbg !6967
  %bf.lshr = lshr i64 %bf.load, 22, !dbg !6967
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6967
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6967
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !6967
  br i1 %tobool, label %if.then, label %if.end, !dbg !6969

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6970
  br label %return, !dbg !6970

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6971
  %5 = load i32, i32* %cond_code.addr, align 4, !dbg !6973
  %6 = load %union.tree_node*, %union.tree_node** %cond_op0.addr, align 8, !dbg !6974
  %7 = load %union.tree_node*, %union.tree_node** %cond_op1.addr, align 8, !dbg !6975
  %8 = load i8, i8* %is_else_edge, align 1, !dbg !6976
  %call = call zeroext i8 @extract_code_and_val_from_cond_with_ops(%union.tree_node* %4, i32 %5, %union.tree_node* %6, %union.tree_node* %7, i8 zeroext %8, i32* %comp_code, %union.tree_node** %val), !dbg !6977
  %tobool3 = icmp ne i8 %call, 0, !dbg !6977
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !6978

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6979
  br label %return, !dbg !6979

if.end5:                                          ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6980
  %10 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6981
  %11 = load i32, i32* %cond_code.addr, align 4, !dbg !6982
  %12 = load %union.tree_node*, %union.tree_node** %cond_op0.addr, align 8, !dbg !6983
  %13 = load %union.tree_node*, %union.tree_node** %cond_op1.addr, align 8, !dbg !6984
  %14 = load i8, i8* %is_else_edge, align 1, !dbg !6985
  %call6 = call zeroext i8 @register_edge_assert_for_2(%union.tree_node* %9, %struct.edge_def* %10, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si, i32 %11, %union.tree_node* %12, %union.tree_node* %13, i8 zeroext %14), !dbg !6986
  %conv7 = zext i8 %call6 to i32, !dbg !6986
  %15 = load i8, i8* %retval1, align 1, !dbg !6987
  %conv8 = zext i8 %15 to i32, !dbg !6987
  %or = or i32 %conv8, %conv7, !dbg !6987
  %conv9 = trunc i32 %or to i8, !dbg !6987
  store i8 %conv9, i8* %retval1, align 1, !dbg !6987
  %16 = load i32, i32* %comp_code, align 4, !dbg !6988
  %cmp10 = icmp eq i32 %16, 101, !dbg !6990
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false, !dbg !6991

land.lhs.true:                                    ; preds = %if.end5
  %17 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6992
  %call12 = call i32 @integer_onep(%union.tree_node* %17), !dbg !6993
  %tobool13 = icmp ne i32 %call12, 0, !dbg !6993
  br i1 %tobool13, label %if.then19, label %lor.lhs.false, !dbg !6994

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end5
  %18 = load i32, i32* %comp_code, align 4, !dbg !6995
  %cmp14 = icmp eq i32 %18, 102, !dbg !6996
  br i1 %cmp14, label %land.lhs.true16, label %if.end46, !dbg !6997

land.lhs.true16:                                  ; preds = %lor.lhs.false
  %19 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6998
  %call17 = call i32 @integer_zerop(%union.tree_node* %19), !dbg !6999
  %tobool18 = icmp ne i32 %call17, 0, !dbg !6999
  br i1 %tobool18, label %if.then19, label %if.end46, !dbg !7000

if.then19:                                        ; preds = %land.lhs.true16, %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !7001, metadata !DIExpression()), !dbg !7003
  %20 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7004
  %ssa_name = bitcast %union.tree_node* %20 to %struct.tree_ssa_name*, !dbg !7004
  %def_stmt20 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7004
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt20, align 8, !dbg !7004
  store %union.gimple_statement_d* %21, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7003
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7005
  %call21 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %22), !dbg !7007
  %conv22 = zext i8 %call21 to i32, !dbg !7007
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !7007
  br i1 %tobool23, label %land.lhs.true24, label %if.end45, !dbg !7008

land.lhs.true24:                                  ; preds = %if.then19
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7009
  %call25 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %23), !dbg !7010
  %cmp26 = icmp eq i32 %call25, 93, !dbg !7011
  br i1 %cmp26, label %if.then32, label %lor.lhs.false28, !dbg !7012

lor.lhs.false28:                                  ; preds = %land.lhs.true24
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7013
  %call29 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %24), !dbg !7014
  %cmp30 = icmp eq i32 %call29, 89, !dbg !7015
  br i1 %cmp30, label %if.then32, label %if.end45, !dbg !7016

if.then32:                                        ; preds = %lor.lhs.false28, %land.lhs.true24
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7017, metadata !DIExpression()), !dbg !7019
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7020
  %call33 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %25), !dbg !7021
  store %union.tree_node* %call33, %union.tree_node** %op0, align 8, !dbg !7019
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !7022, metadata !DIExpression()), !dbg !7023
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7024
  %call34 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %26), !dbg !7025
  store %union.tree_node* %call34, %union.tree_node** %op1, align 8, !dbg !7023
  %27 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7026
  %28 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7027
  %call35 = call zeroext i8 @register_edge_assert_for_1(%union.tree_node* %27, i32 102, %struct.edge_def* %28, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !7028
  %conv36 = zext i8 %call35 to i32, !dbg !7028
  %29 = load i8, i8* %retval1, align 1, !dbg !7029
  %conv37 = zext i8 %29 to i32, !dbg !7029
  %or38 = or i32 %conv37, %conv36, !dbg !7029
  %conv39 = trunc i32 %or38 to i8, !dbg !7029
  store i8 %conv39, i8* %retval1, align 1, !dbg !7029
  %30 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7030
  %31 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7031
  %call40 = call zeroext i8 @register_edge_assert_for_1(%union.tree_node* %30, i32 102, %struct.edge_def* %31, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !7032
  %conv41 = zext i8 %call40 to i32, !dbg !7032
  %32 = load i8, i8* %retval1, align 1, !dbg !7033
  %conv42 = zext i8 %32 to i32, !dbg !7033
  %or43 = or i32 %conv42, %conv41, !dbg !7033
  %conv44 = trunc i32 %or43 to i8, !dbg !7033
  store i8 %conv44, i8* %retval1, align 1, !dbg !7033
  br label %if.end45, !dbg !7034

if.end45:                                         ; preds = %if.then32, %lor.lhs.false28, %if.then19
  br label %if.end46, !dbg !7035

if.end46:                                         ; preds = %if.end45, %land.lhs.true16, %lor.lhs.false
  %33 = load i32, i32* %comp_code, align 4, !dbg !7036
  %cmp47 = icmp eq i32 %33, 101, !dbg !7038
  br i1 %cmp47, label %land.lhs.true49, label %lor.lhs.false52, !dbg !7039

land.lhs.true49:                                  ; preds = %if.end46
  %34 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7040
  %call50 = call i32 @integer_zerop(%union.tree_node* %34), !dbg !7041
  %tobool51 = icmp ne i32 %call50, 0, !dbg !7041
  br i1 %tobool51, label %if.then58, label %lor.lhs.false52, !dbg !7042

lor.lhs.false52:                                  ; preds = %land.lhs.true49, %if.end46
  %35 = load i32, i32* %comp_code, align 4, !dbg !7043
  %cmp53 = icmp eq i32 %35, 102, !dbg !7044
  br i1 %cmp53, label %land.lhs.true55, label %if.end92, !dbg !7045

land.lhs.true55:                                  ; preds = %lor.lhs.false52
  %36 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7046
  %call56 = call i32 @integer_onep(%union.tree_node* %36), !dbg !7047
  %tobool57 = icmp ne i32 %call56, 0, !dbg !7047
  br i1 %tobool57, label %if.then58, label %if.end92, !dbg !7048

if.then58:                                        ; preds = %land.lhs.true55, %land.lhs.true49
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt59, metadata !7049, metadata !DIExpression()), !dbg !7051
  %37 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7052
  %ssa_name60 = bitcast %union.tree_node* %37 to %struct.tree_ssa_name*, !dbg !7052
  %def_stmt61 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name60, i32 0, i32 2, !dbg !7052
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt61, align 8, !dbg !7052
  store %union.gimple_statement_d* %38, %union.gimple_statement_d** %def_stmt59, align 8, !dbg !7051
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt59, align 8, !dbg !7053
  %call62 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %39), !dbg !7055
  %conv63 = zext i8 %call62 to i32, !dbg !7055
  %tobool64 = icmp ne i32 %conv63, 0, !dbg !7055
  br i1 %tobool64, label %land.lhs.true65, label %if.end91, !dbg !7056

land.lhs.true65:                                  ; preds = %if.then58
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt59, align 8, !dbg !7057
  %call66 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %40), !dbg !7058
  %cmp67 = icmp eq i32 %call66, 94, !dbg !7059
  br i1 %cmp67, label %if.then76, label %lor.lhs.false69, !dbg !7060

lor.lhs.false69:                                  ; preds = %land.lhs.true65
  %41 = load i32, i32* %comp_code, align 4, !dbg !7061
  %cmp70 = icmp eq i32 %41, 101, !dbg !7062
  br i1 %cmp70, label %land.lhs.true72, label %if.end91, !dbg !7063

land.lhs.true72:                                  ; preds = %lor.lhs.false69
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt59, align 8, !dbg !7064
  %call73 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %42), !dbg !7065
  %cmp74 = icmp eq i32 %call73, 87, !dbg !7066
  br i1 %cmp74, label %if.then76, label %if.end91, !dbg !7067

if.then76:                                        ; preds = %land.lhs.true72, %land.lhs.true65
  call void @llvm.dbg.declare(metadata %union.tree_node** %op077, metadata !7068, metadata !DIExpression()), !dbg !7070
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt59, align 8, !dbg !7071
  %call78 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %43), !dbg !7072
  store %union.tree_node* %call78, %union.tree_node** %op077, align 8, !dbg !7070
  call void @llvm.dbg.declare(metadata %union.tree_node** %op179, metadata !7073, metadata !DIExpression()), !dbg !7074
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt59, align 8, !dbg !7075
  %call80 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %44), !dbg !7076
  store %union.tree_node* %call80, %union.tree_node** %op179, align 8, !dbg !7074
  %45 = load %union.tree_node*, %union.tree_node** %op077, align 8, !dbg !7077
  %46 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7078
  %call81 = call zeroext i8 @register_edge_assert_for_1(%union.tree_node* %45, i32 101, %struct.edge_def* %46, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !7079
  %conv82 = zext i8 %call81 to i32, !dbg !7079
  %47 = load i8, i8* %retval1, align 1, !dbg !7080
  %conv83 = zext i8 %47 to i32, !dbg !7080
  %or84 = or i32 %conv83, %conv82, !dbg !7080
  %conv85 = trunc i32 %or84 to i8, !dbg !7080
  store i8 %conv85, i8* %retval1, align 1, !dbg !7080
  %48 = load %union.tree_node*, %union.tree_node** %op179, align 8, !dbg !7081
  %49 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7082
  %call86 = call zeroext i8 @register_edge_assert_for_1(%union.tree_node* %48, i32 101, %struct.edge_def* %49, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !7083
  %conv87 = zext i8 %call86 to i32, !dbg !7083
  %50 = load i8, i8* %retval1, align 1, !dbg !7084
  %conv88 = zext i8 %50 to i32, !dbg !7084
  %or89 = or i32 %conv88, %conv87, !dbg !7084
  %conv90 = trunc i32 %or89 to i8, !dbg !7084
  store i8 %conv90, i8* %retval1, align 1, !dbg !7084
  br label %if.end91, !dbg !7085

if.end91:                                         ; preds = %if.then76, %land.lhs.true72, %lor.lhs.false69, %if.then58
  br label %if.end92, !dbg !7086

if.end92:                                         ; preds = %if.end91, %land.lhs.true55, %lor.lhs.false52
  %51 = load i8, i8* %retval1, align 1, !dbg !7087
  store i8 %51, i8* %retval, align 1, !dbg !7088
  br label %return, !dbg !7088

return:                                           ; preds = %if.end92, %if.then4, %if.then
  %52 = load i8, i8* %retval, align 1, !dbg !7089
  ret i8 %52, !dbg !7089
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !7090 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7091, metadata !DIExpression()), !dbg !7092
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7093
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7094
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7095
  %bf.load = load i32, i32* %1, align 8, !dbg !7095
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7095
  ret i32 %bf.lshr, !dbg !7096
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !7097 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7098, metadata !DIExpression()), !dbg !7099
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7100
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7101
  ret %union.tree_node* %call, !dbg !7102
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @extract_code_and_val_from_cond_with_ops(%union.tree_node* %name, i32 %cond_code, %union.tree_node* %cond_op0, %union.tree_node* %cond_op1, i8 zeroext %invert, i32* %code_p, %union.tree_node** %val_p) #0 !dbg !7103 {
entry:
  %retval = alloca i8, align 1
  %name.addr = alloca %union.tree_node*, align 8
  %cond_code.addr = alloca i32, align 4
  %cond_op0.addr = alloca %union.tree_node*, align 8
  %cond_op1.addr = alloca %union.tree_node*, align 8
  %invert.addr = alloca i8, align 1
  %code_p.addr = alloca i32*, align 8
  %val_p.addr = alloca %union.tree_node**, align 8
  %comp_code = alloca i32, align 4
  %val = alloca %union.tree_node*, align 8
  %min = alloca %union.tree_node*, align 8
  %max = alloca %union.tree_node*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !7106, metadata !DIExpression()), !dbg !7107
  store i32 %cond_code, i32* %cond_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cond_code.addr, metadata !7108, metadata !DIExpression()), !dbg !7109
  store %union.tree_node* %cond_op0, %union.tree_node** %cond_op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond_op0.addr, metadata !7110, metadata !DIExpression()), !dbg !7111
  store %union.tree_node* %cond_op1, %union.tree_node** %cond_op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond_op1.addr, metadata !7112, metadata !DIExpression()), !dbg !7113
  store i8 %invert, i8* %invert.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %invert.addr, metadata !7114, metadata !DIExpression()), !dbg !7115
  store i32* %code_p, i32** %code_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %code_p.addr, metadata !7116, metadata !DIExpression()), !dbg !7117
  store %union.tree_node** %val_p, %union.tree_node*** %val_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %val_p.addr, metadata !7118, metadata !DIExpression()), !dbg !7119
  call void @llvm.dbg.declare(metadata i32* %comp_code, metadata !7120, metadata !DIExpression()), !dbg !7121
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !7122, metadata !DIExpression()), !dbg !7123
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7124
  %1 = load %union.tree_node*, %union.tree_node** %cond_op1.addr, align 8, !dbg !7126
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !7127
  br i1 %cmp, label %if.then, label %if.else, !dbg !7128

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %cond_code.addr, align 4, !dbg !7129
  %call = call i32 @swap_tree_comparison(i32 %2), !dbg !7131
  store i32 %call, i32* %comp_code, align 4, !dbg !7132
  %3 = load %union.tree_node*, %union.tree_node** %cond_op0.addr, align 8, !dbg !7133
  store %union.tree_node* %3, %union.tree_node** %val, align 8, !dbg !7134
  br label %if.end, !dbg !7135

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %cond_code.addr, align 4, !dbg !7136
  store i32 %4, i32* %comp_code, align 4, !dbg !7138
  %5 = load %union.tree_node*, %union.tree_node** %cond_op1.addr, align 8, !dbg !7139
  store %union.tree_node* %5, %union.tree_node** %val, align 8, !dbg !7140
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i8, i8* %invert.addr, align 1, !dbg !7141
  %tobool = icmp ne i8 %6, 0, !dbg !7141
  br i1 %tobool, label %if.then1, label %if.end3, !dbg !7143

if.then1:                                         ; preds = %if.end
  %7 = load i32, i32* %comp_code, align 4, !dbg !7144
  %call2 = call i32 @invert_tree_comparison(i32 %7, i8 zeroext 0), !dbg !7145
  store i32 %call2, i32* %comp_code, align 4, !dbg !7146
  br label %if.end3, !dbg !7147

if.end3:                                          ; preds = %if.then1, %if.end
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7148
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !7148
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7148
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7148
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7148
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !7148
  %bf.load = load i64, i64* %10, align 8, !dbg !7148
  %bf.clear = and i64 %bf.load, 65535, !dbg !7148
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7148
  %cmp4 = icmp eq i32 %bf.cast, 9, !dbg !7148
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !7150

if.then5:                                         ; preds = %if.end3
  store i8 0, i8* %retval, align 1, !dbg !7151
  br label %return, !dbg !7151

if.end6:                                          ; preds = %if.end3
  %11 = load i32, i32* %comp_code, align 4, !dbg !7152
  %cmp7 = icmp eq i32 %11, 99, !dbg !7154
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false, !dbg !7155

lor.lhs.false:                                    ; preds = %if.end6
  %12 = load i32, i32* %comp_code, align 4, !dbg !7156
  %cmp8 = icmp eq i32 %12, 97, !dbg !7157
  br i1 %cmp8, label %land.lhs.true, label %if.end55, !dbg !7158

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end6
  %13 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7159
  %common9 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !7159
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !7159
  %14 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !7159
  %base11 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7159
  %15 = bitcast %struct.tree_base* %base11 to i64*, !dbg !7159
  %bf.load12 = load i64, i64* %15, align 8, !dbg !7159
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !7159
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !7159
  %cmp15 = icmp eq i32 %bf.cast14, 6, !dbg !7159
  br i1 %cmp15, label %if.then32, label %lor.lhs.false16, !dbg !7159

lor.lhs.false16:                                  ; preds = %land.lhs.true
  %16 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7159
  %common17 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !7159
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !7159
  %17 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !7159
  %base19 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !7159
  %18 = bitcast %struct.tree_base* %base19 to i64*, !dbg !7159
  %bf.load20 = load i64, i64* %18, align 8, !dbg !7159
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !7159
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !7159
  %cmp23 = icmp eq i32 %bf.cast22, 7, !dbg !7159
  br i1 %cmp23, label %if.then32, label %lor.lhs.false24, !dbg !7159

lor.lhs.false24:                                  ; preds = %lor.lhs.false16
  %19 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7159
  %common25 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !7159
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !7159
  %20 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !7159
  %base27 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !7159
  %21 = bitcast %struct.tree_base* %base27 to i64*, !dbg !7159
  %bf.load28 = load i64, i64* %21, align 8, !dbg !7159
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !7159
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !7159
  %cmp31 = icmp eq i32 %bf.cast30, 8, !dbg !7159
  br i1 %cmp31, label %if.then32, label %if.end55, !dbg !7160

if.then32:                                        ; preds = %lor.lhs.false24, %lor.lhs.false16, %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %min, metadata !7161, metadata !DIExpression()), !dbg !7163
  %22 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7164
  %common33 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !7164
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !7164
  %23 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !7164
  %type35 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !7164
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type35, i32 0, i32 13, !dbg !7164
  %24 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !7164
  store %union.tree_node* %24, %union.tree_node** %min, align 8, !dbg !7163
  call void @llvm.dbg.declare(metadata %union.tree_node** %max, metadata !7165, metadata !DIExpression()), !dbg !7166
  %25 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7167
  %common36 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !7167
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2, !dbg !7167
  %26 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !7167
  %type38 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !7167
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type38, i32 0, i32 14, !dbg !7167
  %27 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !7167
  store %union.tree_node* %27, %union.tree_node** %max, align 8, !dbg !7166
  %28 = load i32, i32* %comp_code, align 4, !dbg !7168
  %cmp39 = icmp eq i32 %28, 99, !dbg !7170
  br i1 %cmp39, label %land.lhs.true40, label %if.end46, !dbg !7171

land.lhs.true40:                                  ; preds = %if.then32
  %29 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !7172
  %tobool41 = icmp ne %union.tree_node* %29, null, !dbg !7172
  br i1 %tobool41, label %lor.lhs.false42, label %if.then45, !dbg !7173

lor.lhs.false42:                                  ; preds = %land.lhs.true40
  %30 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7174
  %31 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !7175
  %call43 = call i32 @compare_values(%union.tree_node* %30, %union.tree_node* %31), !dbg !7176
  %cmp44 = icmp eq i32 %call43, 0, !dbg !7177
  br i1 %cmp44, label %if.then45, label %if.end46, !dbg !7178

if.then45:                                        ; preds = %lor.lhs.false42, %land.lhs.true40
  store i8 0, i8* %retval, align 1, !dbg !7179
  br label %return, !dbg !7179

if.end46:                                         ; preds = %lor.lhs.false42, %if.then32
  %32 = load i32, i32* %comp_code, align 4, !dbg !7180
  %cmp47 = icmp eq i32 %32, 97, !dbg !7182
  br i1 %cmp47, label %land.lhs.true48, label %if.end54, !dbg !7183

land.lhs.true48:                                  ; preds = %if.end46
  %33 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !7184
  %tobool49 = icmp ne %union.tree_node* %33, null, !dbg !7184
  br i1 %tobool49, label %lor.lhs.false50, label %if.then53, !dbg !7185

lor.lhs.false50:                                  ; preds = %land.lhs.true48
  %34 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7186
  %35 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !7187
  %call51 = call i32 @compare_values(%union.tree_node* %34, %union.tree_node* %35), !dbg !7188
  %cmp52 = icmp eq i32 %call51, 0, !dbg !7189
  br i1 %cmp52, label %if.then53, label %if.end54, !dbg !7190

if.then53:                                        ; preds = %lor.lhs.false50, %land.lhs.true48
  store i8 0, i8* %retval, align 1, !dbg !7191
  br label %return, !dbg !7191

if.end54:                                         ; preds = %lor.lhs.false50, %if.end46
  br label %if.end55, !dbg !7192

if.end55:                                         ; preds = %if.end54, %lor.lhs.false24, %lor.lhs.false
  %36 = load i32, i32* %comp_code, align 4, !dbg !7193
  %37 = load i32*, i32** %code_p.addr, align 8, !dbg !7194
  store i32 %36, i32* %37, align 4, !dbg !7195
  %38 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7196
  %39 = load %union.tree_node**, %union.tree_node*** %val_p.addr, align 8, !dbg !7197
  store %union.tree_node* %38, %union.tree_node** %39, align 8, !dbg !7198
  store i8 1, i8* %retval, align 1, !dbg !7199
  br label %return, !dbg !7199

return:                                           ; preds = %if.end55, %if.then53, %if.then45, %if.then5
  %40 = load i8, i8* %retval, align 1, !dbg !7200
  ret i8 %40, !dbg !7200
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @register_edge_assert_for_2(%union.tree_node* %name, %struct.edge_def* %e, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 %cond_code, %union.tree_node* %cond_op0, %union.tree_node* %cond_op1, i8 zeroext %invert) #0 !dbg !7201 {
entry:
  %retval = alloca i8, align 1
  %name.addr = alloca %union.tree_node*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %cond_code.addr = alloca i32, align 4
  %cond_op0.addr = alloca %union.tree_node*, align 8
  %cond_op1.addr = alloca %union.tree_node*, align 8
  %invert.addr = alloca i8, align 1
  %val = alloca %union.tree_node*, align 8
  %comp_code = alloca i32, align 4
  %retval1 = alloca i8, align 1
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %cst2 = alloca %union.tree_node*, align 8
  %name2 = alloca %union.tree_node*, align 8
  %name3 = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %tmp210 = alloca %union.tree_node*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !7204, metadata !DIExpression()), !dbg !7205
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !7206, metadata !DIExpression()), !dbg !7207
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !7208, metadata !DIExpression()), !dbg !7209
  store i32 %cond_code, i32* %cond_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cond_code.addr, metadata !7210, metadata !DIExpression()), !dbg !7211
  store %union.tree_node* %cond_op0, %union.tree_node** %cond_op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond_op0.addr, metadata !7212, metadata !DIExpression()), !dbg !7213
  store %union.tree_node* %cond_op1, %union.tree_node** %cond_op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond_op1.addr, metadata !7214, metadata !DIExpression()), !dbg !7215
  store i8 %invert, i8* %invert.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %invert.addr, metadata !7216, metadata !DIExpression()), !dbg !7217
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !7218, metadata !DIExpression()), !dbg !7219
  call void @llvm.dbg.declare(metadata i32* %comp_code, metadata !7220, metadata !DIExpression()), !dbg !7221
  call void @llvm.dbg.declare(metadata i8* %retval1, metadata !7222, metadata !DIExpression()), !dbg !7223
  store i8 0, i8* %retval1, align 1, !dbg !7223
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7224
  %1 = load i32, i32* %cond_code.addr, align 4, !dbg !7226
  %2 = load %union.tree_node*, %union.tree_node** %cond_op0.addr, align 8, !dbg !7227
  %3 = load %union.tree_node*, %union.tree_node** %cond_op1.addr, align 8, !dbg !7228
  %4 = load i8, i8* %invert.addr, align 1, !dbg !7229
  %call = call zeroext i8 @extract_code_and_val_from_cond_with_ops(%union.tree_node* %0, i32 %1, %union.tree_node* %2, %union.tree_node* %3, i8 zeroext %4, i32* %comp_code, %union.tree_node** %val), !dbg !7230
  %tobool = icmp ne i8 %call, 0, !dbg !7230
  br i1 %tobool, label %if.end, label %if.then, !dbg !7231

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7232
  br label %return, !dbg !7232

if.end:                                           ; preds = %entry
  %5 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7233
  %6 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7235
  %call2 = call zeroext i8 @live_on_edge(%struct.edge_def* %5, %union.tree_node* %6), !dbg !7236
  %conv = zext i8 %call2 to i32, !dbg !7236
  %tobool3 = icmp ne i32 %conv, 0, !dbg !7236
  br i1 %tobool3, label %land.lhs.true, label %if.end7, !dbg !7237

land.lhs.true:                                    ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7238
  %call4 = call zeroext i8 @has_single_use(%union.tree_node* %7), !dbg !7239
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7239
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !7240

if.then6:                                         ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7241
  %9 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7243
  %10 = load i32, i32* %comp_code, align 4, !dbg !7244
  %11 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7245
  %12 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7246
  call void @register_new_assert_for(%union.tree_node* %8, %union.tree_node* %9, i32 %10, %union.tree_node* %11, %struct.basic_block_def* null, %struct.edge_def* %12, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7247
  store i8 1, i8* %retval1, align 1, !dbg !7248
  br label %if.end7, !dbg !7249

if.end7:                                          ; preds = %if.then6, %land.lhs.true, %if.end
  %13 = load i32, i32* %comp_code, align 4, !dbg !7250
  %cmp = icmp eq i32 %13, 98, !dbg !7252
  br i1 %cmp, label %land.lhs.true11, label %lor.lhs.false, !dbg !7253

lor.lhs.false:                                    ; preds = %if.end7
  %14 = load i32, i32* %comp_code, align 4, !dbg !7254
  %cmp9 = icmp eq i32 %14, 99, !dbg !7255
  br i1 %cmp9, label %land.lhs.true11, label %if.end236, !dbg !7256

land.lhs.true11:                                  ; preds = %lor.lhs.false, %if.end7
  %15 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7257
  %base = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !7257
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !7257
  %bf.load = load i64, i64* %16, align 8, !dbg !7257
  %bf.clear = and i64 %bf.load, 65535, !dbg !7257
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7257
  %cmp12 = icmp eq i32 %bf.cast, 23, !dbg !7258
  br i1 %cmp12, label %land.lhs.true14, label %if.end236, !dbg !7259

land.lhs.true14:                                  ; preds = %land.lhs.true11
  %17 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7260
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !7260
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7260
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7260
  %base15 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !7260
  %19 = bitcast %struct.tree_base* %base15 to i64*, !dbg !7260
  %bf.load16 = load i64, i64* %19, align 8, !dbg !7260
  %bf.lshr = lshr i64 %bf.load16, 21, !dbg !7260
  %bf.clear17 = and i64 %bf.lshr, 1, !dbg !7260
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !7260
  %tobool19 = icmp ne i32 %bf.cast18, 0, !dbg !7260
  br i1 %tobool19, label %if.then20, label %if.end236, !dbg !7261

if.then20:                                        ; preds = %land.lhs.true14
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !7262, metadata !DIExpression()), !dbg !7264
  %20 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7265
  %ssa_name = bitcast %union.tree_node* %20 to %struct.tree_ssa_name*, !dbg !7265
  %def_stmt21 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7265
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt21, align 8, !dbg !7265
  store %union.gimple_statement_d* %21, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7264
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst2, metadata !7266, metadata !DIExpression()), !dbg !7267
  store %union.tree_node* null, %union.tree_node** %cst2, align 8, !dbg !7267
  call void @llvm.dbg.declare(metadata %union.tree_node** %name2, metadata !7268, metadata !DIExpression()), !dbg !7269
  store %union.tree_node* null, %union.tree_node** %name2, align 8, !dbg !7269
  call void @llvm.dbg.declare(metadata %union.tree_node** %name3, metadata !7270, metadata !DIExpression()), !dbg !7271
  store %union.tree_node* null, %union.tree_node** %name3, align 8, !dbg !7271
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7272
  %call22 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %22), !dbg !7274
  %conv23 = zext i8 %call22 to i32, !dbg !7274
  %tobool24 = icmp ne i32 %conv23, 0, !dbg !7274
  br i1 %tobool24, label %land.lhs.true25, label %if.end49, !dbg !7275

land.lhs.true25:                                  ; preds = %if.then20
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7276
  %call26 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %23), !dbg !7277
  %cmp27 = icmp eq i32 %call26, 63, !dbg !7278
  br i1 %cmp27, label %if.then29, label %if.end49, !dbg !7279

if.then29:                                        ; preds = %land.lhs.true25
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7280
  %call30 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %24), !dbg !7282
  store %union.tree_node* %call30, %union.tree_node** %name2, align 8, !dbg !7283
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7284
  %call31 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %25), !dbg !7285
  store %union.tree_node* %call31, %union.tree_node** %cst2, align 8, !dbg !7286
  %26 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7287
  %base32 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !7287
  %27 = bitcast %struct.tree_base* %base32 to i64*, !dbg !7287
  %bf.load33 = load i64, i64* %27, align 8, !dbg !7287
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !7287
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !7287
  %cmp36 = icmp eq i32 %bf.cast35, 141, !dbg !7289
  br i1 %cmp36, label %land.lhs.true38, label %if.end48, !dbg !7290

land.lhs.true38:                                  ; preds = %if.then29
  %28 = load %union.tree_node*, %union.tree_node** %cst2, align 8, !dbg !7291
  %base39 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !7291
  %29 = bitcast %struct.tree_base* %base39 to i64*, !dbg !7291
  %bf.load40 = load i64, i64* %29, align 8, !dbg !7291
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !7291
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !7291
  %cmp43 = icmp eq i32 %bf.cast42, 23, !dbg !7292
  br i1 %cmp43, label %if.then45, label %if.end48, !dbg !7293

if.then45:                                        ; preds = %land.lhs.true38
  %30 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7294
  %ssa_name46 = bitcast %union.tree_node* %30 to %struct.tree_ssa_name*, !dbg !7294
  %def_stmt47 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name46, i32 0, i32 2, !dbg !7294
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt47, align 8, !dbg !7294
  store %union.gimple_statement_d* %31, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7295
  br label %if.end48, !dbg !7296

if.end48:                                         ; preds = %if.then45, %land.lhs.true38, %if.then29
  br label %if.end49, !dbg !7297

if.end49:                                         ; preds = %if.end48, %land.lhs.true25, %if.then20
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7298
  %call50 = call zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %32), !dbg !7300
  %tobool51 = icmp ne i8 %call50, 0, !dbg !7300
  br i1 %tobool51, label %if.then52, label %if.end87, !dbg !7301

if.then52:                                        ; preds = %if.end49
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7302
  %call53 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %33), !dbg !7302
  %cmp54 = icmp eq i32 %call53, 116, !dbg !7302
  br i1 %cmp54, label %land.lhs.true60, label %lor.lhs.false56, !dbg !7302

lor.lhs.false56:                                  ; preds = %if.then52
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7302
  %call57 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %34), !dbg !7302
  %cmp58 = icmp eq i32 %call57, 113, !dbg !7302
  br i1 %cmp58, label %land.lhs.true60, label %if.end86, !dbg !7305

land.lhs.true60:                                  ; preds = %lor.lhs.false56, %if.then52
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7306
  %call61 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %35), !dbg !7306
  %common62 = bitcast %union.tree_node* %call61 to %struct.tree_common*, !dbg !7306
  %type63 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 2, !dbg !7306
  %36 = load %union.tree_node*, %union.tree_node** %type63, align 8, !dbg !7306
  %base64 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !7306
  %37 = bitcast %struct.tree_base* %base64 to i64*, !dbg !7306
  %bf.load65 = load i64, i64* %37, align 8, !dbg !7306
  %bf.lshr66 = lshr i64 %bf.load65, 21, !dbg !7306
  %bf.clear67 = and i64 %bf.lshr66, 1, !dbg !7306
  %bf.cast68 = trunc i64 %bf.clear67 to i32, !dbg !7306
  %tobool69 = icmp ne i32 %bf.cast68, 0, !dbg !7306
  br i1 %tobool69, label %if.end86, label %land.lhs.true70, !dbg !7307

land.lhs.true70:                                  ; preds = %land.lhs.true60
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7308
  %call71 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %38), !dbg !7308
  %type72 = bitcast %union.tree_node* %call71 to %struct.tree_type*, !dbg !7308
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type72, i32 0, i32 6, !dbg !7308
  %bf.load73 = load i32, i32* %precision, align 4, !dbg !7308
  %bf.clear74 = and i32 %bf.load73, 1023, !dbg !7308
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7309
  %call75 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %39), !dbg !7309
  %common76 = bitcast %union.tree_node* %call75 to %struct.tree_common*, !dbg !7309
  %type77 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common76, i32 0, i32 2, !dbg !7309
  %40 = load %union.tree_node*, %union.tree_node** %type77, align 8, !dbg !7309
  %type78 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !7309
  %precision79 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type78, i32 0, i32 6, !dbg !7309
  %bf.load80 = load i32, i32* %precision79, align 4, !dbg !7309
  %bf.clear81 = and i32 %bf.load80, 1023, !dbg !7309
  %cmp82 = icmp eq i32 %bf.clear74, %bf.clear81, !dbg !7310
  br i1 %cmp82, label %if.then84, label %if.end86, !dbg !7311

if.then84:                                        ; preds = %land.lhs.true70
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7312
  %call85 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %41), !dbg !7313
  store %union.tree_node* %call85, %union.tree_node** %name3, align 8, !dbg !7314
  br label %if.end86, !dbg !7315

if.end86:                                         ; preds = %if.then84, %land.lhs.true70, %land.lhs.true60, %lor.lhs.false56
  br label %if.end87, !dbg !7316

if.end87:                                         ; preds = %if.end86, %if.end49
  %42 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !7317
  %cmp88 = icmp ne %union.tree_node* %42, null, !dbg !7319
  br i1 %cmp88, label %land.lhs.true90, label %if.end158, !dbg !7320

land.lhs.true90:                                  ; preds = %if.end87
  %43 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !7321
  %base91 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !7321
  %44 = bitcast %struct.tree_base* %base91 to i64*, !dbg !7321
  %bf.load92 = load i64, i64* %44, align 8, !dbg !7321
  %bf.clear93 = and i64 %bf.load92, 65535, !dbg !7321
  %bf.cast94 = trunc i64 %bf.clear93 to i32, !dbg !7321
  %cmp95 = icmp eq i32 %bf.cast94, 141, !dbg !7322
  br i1 %cmp95, label %land.lhs.true97, label %if.end158, !dbg !7323

land.lhs.true97:                                  ; preds = %land.lhs.true90
  %45 = load %union.tree_node*, %union.tree_node** %cst2, align 8, !dbg !7324
  %cmp98 = icmp eq %union.tree_node* %45, null, !dbg !7325
  br i1 %cmp98, label %land.lhs.true107, label %lor.lhs.false100, !dbg !7326

lor.lhs.false100:                                 ; preds = %land.lhs.true97
  %46 = load %union.tree_node*, %union.tree_node** %cst2, align 8, !dbg !7327
  %base101 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !7327
  %47 = bitcast %struct.tree_base* %base101 to i64*, !dbg !7327
  %bf.load102 = load i64, i64* %47, align 8, !dbg !7327
  %bf.clear103 = and i64 %bf.load102, 65535, !dbg !7327
  %bf.cast104 = trunc i64 %bf.clear103 to i32, !dbg !7327
  %cmp105 = icmp eq i32 %bf.cast104, 23, !dbg !7328
  br i1 %cmp105, label %land.lhs.true107, label %if.end158, !dbg !7329

land.lhs.true107:                                 ; preds = %lor.lhs.false100, %land.lhs.true97
  %48 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !7330
  %common108 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !7330
  %type109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 2, !dbg !7330
  %49 = load %union.tree_node*, %union.tree_node** %type109, align 8, !dbg !7330
  %base110 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !7330
  %50 = bitcast %struct.tree_base* %base110 to i64*, !dbg !7330
  %bf.load111 = load i64, i64* %50, align 8, !dbg !7330
  %bf.clear112 = and i64 %bf.load111, 65535, !dbg !7330
  %bf.cast113 = trunc i64 %bf.clear112 to i32, !dbg !7330
  %cmp114 = icmp eq i32 %bf.cast113, 6, !dbg !7330
  br i1 %cmp114, label %land.lhs.true134, label %lor.lhs.false116, !dbg !7330

lor.lhs.false116:                                 ; preds = %land.lhs.true107
  %51 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !7330
  %common117 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !7330
  %type118 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common117, i32 0, i32 2, !dbg !7330
  %52 = load %union.tree_node*, %union.tree_node** %type118, align 8, !dbg !7330
  %base119 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !7330
  %53 = bitcast %struct.tree_base* %base119 to i64*, !dbg !7330
  %bf.load120 = load i64, i64* %53, align 8, !dbg !7330
  %bf.clear121 = and i64 %bf.load120, 65535, !dbg !7330
  %bf.cast122 = trunc i64 %bf.clear121 to i32, !dbg !7330
  %cmp123 = icmp eq i32 %bf.cast122, 7, !dbg !7330
  br i1 %cmp123, label %land.lhs.true134, label %lor.lhs.false125, !dbg !7330

lor.lhs.false125:                                 ; preds = %lor.lhs.false116
  %54 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !7330
  %common126 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !7330
  %type127 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common126, i32 0, i32 2, !dbg !7330
  %55 = load %union.tree_node*, %union.tree_node** %type127, align 8, !dbg !7330
  %base128 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !7330
  %56 = bitcast %struct.tree_base* %base128 to i64*, !dbg !7330
  %bf.load129 = load i64, i64* %56, align 8, !dbg !7330
  %bf.clear130 = and i64 %bf.load129, 65535, !dbg !7330
  %bf.cast131 = trunc i64 %bf.clear130 to i32, !dbg !7330
  %cmp132 = icmp eq i32 %bf.cast131, 8, !dbg !7330
  br i1 %cmp132, label %land.lhs.true134, label %if.end158, !dbg !7331

land.lhs.true134:                                 ; preds = %lor.lhs.false125, %lor.lhs.false116, %land.lhs.true107
  %57 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7332
  %58 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !7333
  %call135 = call zeroext i8 @live_on_edge(%struct.edge_def* %57, %union.tree_node* %58), !dbg !7334
  %conv136 = zext i8 %call135 to i32, !dbg !7334
  %tobool137 = icmp ne i32 %conv136, 0, !dbg !7334
  br i1 %tobool137, label %land.lhs.true138, label %if.end158, !dbg !7335

land.lhs.true138:                                 ; preds = %land.lhs.true134
  %59 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !7336
  %call139 = call zeroext i8 @has_single_use(%union.tree_node* %59), !dbg !7337
  %tobool140 = icmp ne i8 %call139, 0, !dbg !7337
  br i1 %tobool140, label %if.end158, label %if.then141, !dbg !7338

if.then141:                                       ; preds = %land.lhs.true138
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !7339, metadata !DIExpression()), !dbg !7341
  %60 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7342
  %common142 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !7342
  %type143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 2, !dbg !7342
  %61 = load %union.tree_node*, %union.tree_node** %type143, align 8, !dbg !7342
  %62 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !7342
  %call144 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %61, %union.tree_node* %62), !dbg !7342
  store %union.tree_node* %call144, %union.tree_node** %tmp, align 8, !dbg !7343
  %63 = load %union.tree_node*, %union.tree_node** %cst2, align 8, !dbg !7344
  %cmp145 = icmp ne %union.tree_node* %63, null, !dbg !7346
  br i1 %cmp145, label %if.then147, label %if.end151, !dbg !7347

if.then147:                                       ; preds = %if.then141
  %64 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7348
  %common148 = bitcast %union.tree_node* %64 to %struct.tree_common*, !dbg !7348
  %type149 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common148, i32 0, i32 2, !dbg !7348
  %65 = load %union.tree_node*, %union.tree_node** %type149, align 8, !dbg !7348
  %66 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7348
  %67 = load %union.tree_node*, %union.tree_node** %cst2, align 8, !dbg !7348
  %call150 = call %union.tree_node* @build2_stat(i32 63, %union.tree_node* %65, %union.tree_node* %66, %union.tree_node* %67), !dbg !7348
  store %union.tree_node* %call150, %union.tree_node** %tmp, align 8, !dbg !7349
  br label %if.end151, !dbg !7350

if.end151:                                        ; preds = %if.then147, %if.then141
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7351
  %tobool152 = icmp ne %struct._IO_FILE* %68, null, !dbg !7351
  br i1 %tobool152, label %if.then153, label %if.end157, !dbg !7353

if.then153:                                       ; preds = %if.end151
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7354
  %call154 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %69, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.32, i64 0, i64 0)), !dbg !7356
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7357
  %71 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !7358
  call void @print_generic_expr(%struct._IO_FILE* %70, %union.tree_node* %71, i32 0), !dbg !7359
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7360
  %call155 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i64 0, i64 0)), !dbg !7361
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7362
  %74 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7363
  call void @print_generic_expr(%struct._IO_FILE* %73, %union.tree_node* %74, i32 0), !dbg !7364
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7365
  %call156 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !7366
  br label %if.end157, !dbg !7367

if.end157:                                        ; preds = %if.then153, %if.end151
  %76 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !7368
  %77 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7369
  %78 = load i32, i32* %comp_code, align 4, !dbg !7370
  %79 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7371
  %80 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7372
  call void @register_new_assert_for(%union.tree_node* %76, %union.tree_node* %77, i32 %78, %union.tree_node* %79, %struct.basic_block_def* null, %struct.edge_def* %80, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7373
  store i8 1, i8* %retval1, align 1, !dbg !7374
  br label %if.end158, !dbg !7375

if.end158:                                        ; preds = %if.end157, %land.lhs.true138, %land.lhs.true134, %lor.lhs.false125, %lor.lhs.false100, %land.lhs.true90, %if.end87
  %81 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7376
  %cmp159 = icmp ne %union.tree_node* %81, null, !dbg !7378
  br i1 %cmp159, label %land.lhs.true161, label %if.end235, !dbg !7379

land.lhs.true161:                                 ; preds = %if.end158
  %82 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7380
  %base162 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !7380
  %83 = bitcast %struct.tree_base* %base162 to i64*, !dbg !7380
  %bf.load163 = load i64, i64* %83, align 8, !dbg !7380
  %bf.clear164 = and i64 %bf.load163, 65535, !dbg !7380
  %bf.cast165 = trunc i64 %bf.clear164 to i32, !dbg !7380
  %cmp166 = icmp eq i32 %bf.cast165, 141, !dbg !7381
  br i1 %cmp166, label %land.lhs.true168, label %if.end235, !dbg !7382

land.lhs.true168:                                 ; preds = %land.lhs.true161
  %84 = load %union.tree_node*, %union.tree_node** %cst2, align 8, !dbg !7383
  %base169 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !7383
  %85 = bitcast %struct.tree_base* %base169 to i64*, !dbg !7383
  %bf.load170 = load i64, i64* %85, align 8, !dbg !7383
  %bf.clear171 = and i64 %bf.load170, 65535, !dbg !7383
  %bf.cast172 = trunc i64 %bf.clear171 to i32, !dbg !7383
  %cmp173 = icmp eq i32 %bf.cast172, 23, !dbg !7384
  br i1 %cmp173, label %land.lhs.true175, label %if.end235, !dbg !7385

land.lhs.true175:                                 ; preds = %land.lhs.true168
  %86 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7386
  %common176 = bitcast %union.tree_node* %86 to %struct.tree_common*, !dbg !7386
  %type177 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common176, i32 0, i32 2, !dbg !7386
  %87 = load %union.tree_node*, %union.tree_node** %type177, align 8, !dbg !7386
  %base178 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !7386
  %88 = bitcast %struct.tree_base* %base178 to i64*, !dbg !7386
  %bf.load179 = load i64, i64* %88, align 8, !dbg !7386
  %bf.clear180 = and i64 %bf.load179, 65535, !dbg !7386
  %bf.cast181 = trunc i64 %bf.clear180 to i32, !dbg !7386
  %cmp182 = icmp eq i32 %bf.cast181, 6, !dbg !7386
  br i1 %cmp182, label %land.lhs.true202, label %lor.lhs.false184, !dbg !7386

lor.lhs.false184:                                 ; preds = %land.lhs.true175
  %89 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7386
  %common185 = bitcast %union.tree_node* %89 to %struct.tree_common*, !dbg !7386
  %type186 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common185, i32 0, i32 2, !dbg !7386
  %90 = load %union.tree_node*, %union.tree_node** %type186, align 8, !dbg !7386
  %base187 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !7386
  %91 = bitcast %struct.tree_base* %base187 to i64*, !dbg !7386
  %bf.load188 = load i64, i64* %91, align 8, !dbg !7386
  %bf.clear189 = and i64 %bf.load188, 65535, !dbg !7386
  %bf.cast190 = trunc i64 %bf.clear189 to i32, !dbg !7386
  %cmp191 = icmp eq i32 %bf.cast190, 7, !dbg !7386
  br i1 %cmp191, label %land.lhs.true202, label %lor.lhs.false193, !dbg !7386

lor.lhs.false193:                                 ; preds = %lor.lhs.false184
  %92 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7386
  %common194 = bitcast %union.tree_node* %92 to %struct.tree_common*, !dbg !7386
  %type195 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common194, i32 0, i32 2, !dbg !7386
  %93 = load %union.tree_node*, %union.tree_node** %type195, align 8, !dbg !7386
  %base196 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !7386
  %94 = bitcast %struct.tree_base* %base196 to i64*, !dbg !7386
  %bf.load197 = load i64, i64* %94, align 8, !dbg !7386
  %bf.clear198 = and i64 %bf.load197, 65535, !dbg !7386
  %bf.cast199 = trunc i64 %bf.clear198 to i32, !dbg !7386
  %cmp200 = icmp eq i32 %bf.cast199, 8, !dbg !7386
  br i1 %cmp200, label %land.lhs.true202, label %if.end235, !dbg !7387

land.lhs.true202:                                 ; preds = %lor.lhs.false193, %lor.lhs.false184, %land.lhs.true175
  %95 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7388
  %96 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7389
  %call203 = call zeroext i8 @live_on_edge(%struct.edge_def* %95, %union.tree_node* %96), !dbg !7390
  %conv204 = zext i8 %call203 to i32, !dbg !7390
  %tobool205 = icmp ne i32 %conv204, 0, !dbg !7390
  br i1 %tobool205, label %land.lhs.true206, label %if.end235, !dbg !7391

land.lhs.true206:                                 ; preds = %land.lhs.true202
  %97 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7392
  %call207 = call zeroext i8 @has_single_use(%union.tree_node* %97), !dbg !7393
  %tobool208 = icmp ne i8 %call207, 0, !dbg !7393
  br i1 %tobool208, label %if.end235, label %if.then209, !dbg !7394

if.then209:                                       ; preds = %land.lhs.true206
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp210, metadata !7395, metadata !DIExpression()), !dbg !7397
  %98 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7398
  store %union.tree_node* %98, %union.tree_node** %tmp210, align 8, !dbg !7399
  %99 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7400
  %common211 = bitcast %union.tree_node* %99 to %struct.tree_common*, !dbg !7400
  %type212 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common211, i32 0, i32 2, !dbg !7400
  %100 = load %union.tree_node*, %union.tree_node** %type212, align 8, !dbg !7400
  %101 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7402
  %common213 = bitcast %union.tree_node* %101 to %struct.tree_common*, !dbg !7402
  %type214 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common213, i32 0, i32 2, !dbg !7402
  %102 = load %union.tree_node*, %union.tree_node** %type214, align 8, !dbg !7402
  %cmp215 = icmp ne %union.tree_node* %100, %102, !dbg !7403
  br i1 %cmp215, label %if.then217, label %if.end221, !dbg !7404

if.then217:                                       ; preds = %if.then209
  %103 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7405
  %common218 = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !7405
  %type219 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common218, i32 0, i32 2, !dbg !7405
  %104 = load %union.tree_node*, %union.tree_node** %type219, align 8, !dbg !7405
  %105 = load %union.tree_node*, %union.tree_node** %tmp210, align 8, !dbg !7405
  %call220 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %104, %union.tree_node* %105), !dbg !7405
  store %union.tree_node* %call220, %union.tree_node** %tmp210, align 8, !dbg !7406
  br label %if.end221, !dbg !7407

if.end221:                                        ; preds = %if.then217, %if.then209
  %106 = load %union.tree_node*, %union.tree_node** %cst2, align 8, !dbg !7408
  %cmp222 = icmp ne %union.tree_node* %106, null, !dbg !7410
  br i1 %cmp222, label %if.then224, label %if.end228, !dbg !7411

if.then224:                                       ; preds = %if.end221
  %107 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7412
  %common225 = bitcast %union.tree_node* %107 to %struct.tree_common*, !dbg !7412
  %type226 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common225, i32 0, i32 2, !dbg !7412
  %108 = load %union.tree_node*, %union.tree_node** %type226, align 8, !dbg !7412
  %109 = load %union.tree_node*, %union.tree_node** %tmp210, align 8, !dbg !7412
  %110 = load %union.tree_node*, %union.tree_node** %cst2, align 8, !dbg !7412
  %call227 = call %union.tree_node* @build2_stat(i32 63, %union.tree_node* %108, %union.tree_node* %109, %union.tree_node* %110), !dbg !7412
  store %union.tree_node* %call227, %union.tree_node** %tmp210, align 8, !dbg !7413
  br label %if.end228, !dbg !7414

if.end228:                                        ; preds = %if.then224, %if.end221
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7415
  %tobool229 = icmp ne %struct._IO_FILE* %111, null, !dbg !7415
  br i1 %tobool229, label %if.then230, label %if.end234, !dbg !7417

if.then230:                                       ; preds = %if.end228
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7418
  %call231 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.32, i64 0, i64 0)), !dbg !7420
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7421
  %114 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7422
  call void @print_generic_expr(%struct._IO_FILE* %113, %union.tree_node* %114, i32 0), !dbg !7423
  %115 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7424
  %call232 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %115, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i64 0, i64 0)), !dbg !7425
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7426
  %117 = load %union.tree_node*, %union.tree_node** %tmp210, align 8, !dbg !7427
  call void @print_generic_expr(%struct._IO_FILE* %116, %union.tree_node* %117, i32 0), !dbg !7428
  %118 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7429
  %call233 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %118, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !7430
  br label %if.end234, !dbg !7431

if.end234:                                        ; preds = %if.then230, %if.end228
  %119 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !7432
  %120 = load %union.tree_node*, %union.tree_node** %tmp210, align 8, !dbg !7433
  %121 = load i32, i32* %comp_code, align 4, !dbg !7434
  %122 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7435
  %123 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7436
  call void @register_new_assert_for(%union.tree_node* %119, %union.tree_node* %120, i32 %121, %union.tree_node* %122, %struct.basic_block_def* null, %struct.edge_def* %123, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7437
  store i8 1, i8* %retval1, align 1, !dbg !7438
  br label %if.end235, !dbg !7439

if.end235:                                        ; preds = %if.end234, %land.lhs.true206, %land.lhs.true202, %lor.lhs.false193, %land.lhs.true168, %land.lhs.true161, %if.end158
  br label %if.end236, !dbg !7440

if.end236:                                        ; preds = %if.end235, %land.lhs.true14, %land.lhs.true11, %lor.lhs.false
  %124 = load i8, i8* %retval1, align 1, !dbg !7441
  store i8 %124, i8* %retval, align 1, !dbg !7442
  br label %return, !dbg !7442

return:                                           ; preds = %if.end236, %if.then
  %125 = load i8, i8* %retval, align 1, !dbg !7443
  ret i8 %125, !dbg !7443
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !7444 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7445, metadata !DIExpression()), !dbg !7446
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7447
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7449
  %cmp = icmp uge i32 %call, 3, !dbg !7450
  br i1 %cmp, label %if.then, label %if.else, !dbg !7451

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7452
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !7453
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !7454
  br label %return, !dbg !7454

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7455
  br label %return, !dbg !7455

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7456
  ret %union.tree_node* %2, !dbg !7456
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @register_edge_assert_for_1(%union.tree_node* %op, i32 %code, %struct.edge_def* %e, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi) #0 !dbg !7457 {
entry:
  %retval = alloca i8, align 1
  %op.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %e.addr = alloca %struct.edge_def*, align 8
  %retval1 = alloca i8, align 1
  %op_def = alloca %union.gimple_statement_d*, align 8
  %val = alloca %union.tree_node*, align 8
  %rhs_code = alloca i32, align 4
  %invert = alloca i8, align 1
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7460, metadata !DIExpression()), !dbg !7461
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7462, metadata !DIExpression()), !dbg !7463
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !7464, metadata !DIExpression()), !dbg !7465
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !7466, metadata !DIExpression()), !dbg !7467
  call void @llvm.dbg.declare(metadata i8* %retval1, metadata !7468, metadata !DIExpression()), !dbg !7469
  store i8 0, i8* %retval1, align 1, !dbg !7469
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %op_def, metadata !7470, metadata !DIExpression()), !dbg !7471
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !7472, metadata !DIExpression()), !dbg !7473
  call void @llvm.dbg.declare(metadata i32* %rhs_code, metadata !7474, metadata !DIExpression()), !dbg !7475
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7476
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7476
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7476
  %bf.load = load i64, i64* %1, align 8, !dbg !7476
  %bf.clear = and i64 %bf.load, 65535, !dbg !7476
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7476
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !7478
  br i1 %cmp, label %if.then, label %if.end, !dbg !7479

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7480
  br label %return, !dbg !7480

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7481
  %call = call zeroext i8 @has_single_use(%union.tree_node* %2), !dbg !7483
  %tobool = icmp ne i8 %call, 0, !dbg !7483
  br i1 %tobool, label %if.end4, label %if.then2, !dbg !7484

if.then2:                                         ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7485
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !7485
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7485
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7485
  %call3 = call %union.tree_node* @build_int_cst(%union.tree_node* %4, i64 0), !dbg !7487
  store %union.tree_node* %call3, %union.tree_node** %val, align 8, !dbg !7488
  %5 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7489
  %6 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7490
  %7 = load i32, i32* %code.addr, align 4, !dbg !7491
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7492
  %9 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7493
  call void @register_new_assert_for(%union.tree_node* %5, %union.tree_node* %6, i32 %7, %union.tree_node* %8, %struct.basic_block_def* null, %struct.edge_def* %9, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7494
  store i8 1, i8* %retval1, align 1, !dbg !7495
  br label %if.end4, !dbg !7496

if.end4:                                          ; preds = %if.then2, %if.end
  %10 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7497
  %ssa_name = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !7497
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7497
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7497
  store %union.gimple_statement_d* %11, %union.gimple_statement_d** %op_def, align 8, !dbg !7498
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7499
  %call5 = call i32 @gimple_code(%union.gimple_statement_d* %12), !dbg !7501
  %cmp6 = icmp ne i32 %call5, 6, !dbg !7502
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !7503

if.then7:                                         ; preds = %if.end4
  %13 = load i8, i8* %retval1, align 1, !dbg !7504
  store i8 %13, i8* %retval, align 1, !dbg !7505
  br label %return, !dbg !7505

if.end8:                                          ; preds = %if.end4
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7506
  %call9 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %14), !dbg !7507
  store i32 %call9, i32* %rhs_code, align 4, !dbg !7508
  %15 = load i32, i32* %rhs_code, align 4, !dbg !7509
  %idxprom = sext i32 %15 to i64, !dbg !7509
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7509
  %16 = load i32, i32* %arrayidx, align 4, !dbg !7509
  %cmp10 = icmp eq i32 %16, 5, !dbg !7511
  br i1 %cmp10, label %if.then11, label %if.else, !dbg !7512

if.then11:                                        ; preds = %if.end8
  call void @llvm.dbg.declare(metadata i8* %invert, metadata !7513, metadata !DIExpression()), !dbg !7515
  %17 = load i32, i32* %code.addr, align 4, !dbg !7516
  %cmp12 = icmp eq i32 %17, 101, !dbg !7517
  %18 = zext i1 %cmp12 to i64, !dbg !7516
  %cond = select i1 %cmp12, i32 1, i32 0, !dbg !7516
  %conv = trunc i32 %cond to i8, !dbg !7518
  store i8 %conv, i8* %invert, align 1, !dbg !7515
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7519, metadata !DIExpression()), !dbg !7520
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7521
  %call13 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %19), !dbg !7522
  store %union.tree_node* %call13, %union.tree_node** %op0, align 8, !dbg !7520
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !7523, metadata !DIExpression()), !dbg !7524
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7525
  %call14 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %20), !dbg !7526
  store %union.tree_node* %call14, %union.tree_node** %op1, align 8, !dbg !7524
  %21 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7527
  %base15 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !7527
  %22 = bitcast %struct.tree_base* %base15 to i64*, !dbg !7527
  %bf.load16 = load i64, i64* %22, align 8, !dbg !7527
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !7527
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !7527
  %cmp19 = icmp eq i32 %bf.cast18, 141, !dbg !7529
  br i1 %cmp19, label %if.then21, label %if.end26, !dbg !7530

if.then21:                                        ; preds = %if.then11
  %23 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7531
  %24 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7532
  %25 = load i32, i32* %rhs_code, align 4, !dbg !7533
  %26 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7534
  %27 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7535
  %28 = load i8, i8* %invert, align 1, !dbg !7536
  %call22 = call zeroext i8 @register_edge_assert_for_2(%union.tree_node* %23, %struct.edge_def* %24, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 %25, %union.tree_node* %26, %union.tree_node* %27, i8 zeroext %28), !dbg !7537
  %conv23 = zext i8 %call22 to i32, !dbg !7537
  %29 = load i8, i8* %retval1, align 1, !dbg !7538
  %conv24 = zext i8 %29 to i32, !dbg !7538
  %or = or i32 %conv24, %conv23, !dbg !7538
  %conv25 = trunc i32 %or to i8, !dbg !7538
  store i8 %conv25, i8* %retval1, align 1, !dbg !7538
  br label %if.end26, !dbg !7539

if.end26:                                         ; preds = %if.then21, %if.then11
  %30 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7540
  %base27 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !7540
  %31 = bitcast %struct.tree_base* %base27 to i64*, !dbg !7540
  %bf.load28 = load i64, i64* %31, align 8, !dbg !7540
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !7540
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !7540
  %cmp31 = icmp eq i32 %bf.cast30, 141, !dbg !7542
  br i1 %cmp31, label %if.then33, label %if.end39, !dbg !7543

if.then33:                                        ; preds = %if.end26
  %32 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7544
  %33 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7545
  %34 = load i32, i32* %rhs_code, align 4, !dbg !7546
  %35 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7547
  %36 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7548
  %37 = load i8, i8* %invert, align 1, !dbg !7549
  %call34 = call zeroext i8 @register_edge_assert_for_2(%union.tree_node* %32, %struct.edge_def* %33, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 %34, %union.tree_node* %35, %union.tree_node* %36, i8 zeroext %37), !dbg !7550
  %conv35 = zext i8 %call34 to i32, !dbg !7550
  %38 = load i8, i8* %retval1, align 1, !dbg !7551
  %conv36 = zext i8 %38 to i32, !dbg !7551
  %or37 = or i32 %conv36, %conv35, !dbg !7551
  %conv38 = trunc i32 %or37 to i8, !dbg !7551
  store i8 %conv38, i8* %retval1, align 1, !dbg !7551
  br label %if.end39, !dbg !7552

if.end39:                                         ; preds = %if.then33, %if.end26
  br label %if.end114, !dbg !7553

if.else:                                          ; preds = %if.end8
  %39 = load i32, i32* %code.addr, align 4, !dbg !7554
  %cmp40 = icmp eq i32 %39, 102, !dbg !7556
  br i1 %cmp40, label %land.lhs.true, label %lor.lhs.false48, !dbg !7557

land.lhs.true:                                    ; preds = %if.else
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7558
  %call42 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %40), !dbg !7559
  %cmp43 = icmp eq i32 %call42, 93, !dbg !7560
  br i1 %cmp43, label %if.then59, label %lor.lhs.false, !dbg !7561

lor.lhs.false:                                    ; preds = %land.lhs.true
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7562
  %call45 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %41), !dbg !7563
  %cmp46 = icmp eq i32 %call45, 89, !dbg !7564
  br i1 %cmp46, label %if.then59, label %lor.lhs.false48, !dbg !7565

lor.lhs.false48:                                  ; preds = %lor.lhs.false, %if.else
  %42 = load i32, i32* %code.addr, align 4, !dbg !7566
  %cmp49 = icmp eq i32 %42, 101, !dbg !7567
  br i1 %cmp49, label %land.lhs.true51, label %if.else72, !dbg !7568

land.lhs.true51:                                  ; preds = %lor.lhs.false48
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7569
  %call52 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %43), !dbg !7570
  %cmp53 = icmp eq i32 %call52, 94, !dbg !7571
  br i1 %cmp53, label %if.then59, label %lor.lhs.false55, !dbg !7572

lor.lhs.false55:                                  ; preds = %land.lhs.true51
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7573
  %call56 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %44), !dbg !7574
  %cmp57 = icmp eq i32 %call56, 87, !dbg !7575
  br i1 %cmp57, label %if.then59, label %if.else72, !dbg !7576

if.then59:                                        ; preds = %lor.lhs.false55, %land.lhs.true51, %lor.lhs.false, %land.lhs.true
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7577
  %call60 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %45), !dbg !7579
  %46 = load i32, i32* %code.addr, align 4, !dbg !7580
  %47 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7581
  %call61 = call zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call60, i32 %46, %struct.edge_def* %47, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7582
  %conv62 = zext i8 %call61 to i32, !dbg !7582
  %48 = load i8, i8* %retval1, align 1, !dbg !7583
  %conv63 = zext i8 %48 to i32, !dbg !7583
  %or64 = or i32 %conv63, %conv62, !dbg !7583
  %conv65 = trunc i32 %or64 to i8, !dbg !7583
  store i8 %conv65, i8* %retval1, align 1, !dbg !7583
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7584
  %call66 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %49), !dbg !7585
  %50 = load i32, i32* %code.addr, align 4, !dbg !7586
  %51 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7587
  %call67 = call zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call66, i32 %50, %struct.edge_def* %51, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7588
  %conv68 = zext i8 %call67 to i32, !dbg !7588
  %52 = load i8, i8* %retval1, align 1, !dbg !7589
  %conv69 = zext i8 %52 to i32, !dbg !7589
  %or70 = or i32 %conv69, %conv68, !dbg !7589
  %conv71 = trunc i32 %or70 to i8, !dbg !7589
  store i8 %conv71, i8* %retval1, align 1, !dbg !7589
  br label %if.end113, !dbg !7590

if.else72:                                        ; preds = %lor.lhs.false55, %lor.lhs.false48
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7591
  %call73 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %53), !dbg !7593
  %cmp74 = icmp eq i32 %call73, 96, !dbg !7594
  br i1 %cmp74, label %if.then76, label %if.else84, !dbg !7595

if.then76:                                        ; preds = %if.else72
  %54 = load i32, i32* %code.addr, align 4, !dbg !7596
  %call77 = call i32 @invert_tree_comparison(i32 %54, i8 zeroext 0), !dbg !7598
  store i32 %call77, i32* %code.addr, align 4, !dbg !7599
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7600
  %call78 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %55), !dbg !7601
  %56 = load i32, i32* %code.addr, align 4, !dbg !7602
  %57 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7603
  %call79 = call zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call78, i32 %56, %struct.edge_def* %57, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7604
  %conv80 = zext i8 %call79 to i32, !dbg !7604
  %58 = load i8, i8* %retval1, align 1, !dbg !7605
  %conv81 = zext i8 %58 to i32, !dbg !7605
  %or82 = or i32 %conv81, %conv80, !dbg !7605
  %conv83 = trunc i32 %or82 to i8, !dbg !7605
  store i8 %conv83, i8* %retval1, align 1, !dbg !7605
  br label %if.end112, !dbg !7606

if.else84:                                        ; preds = %if.else72
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7607
  %call85 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %59), !dbg !7609
  %cmp86 = icmp eq i32 %call85, 141, !dbg !7610
  br i1 %cmp86, label %if.then88, label %if.else95, !dbg !7611

if.then88:                                        ; preds = %if.else84
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7612
  %call89 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %60), !dbg !7614
  %61 = load i32, i32* %code.addr, align 4, !dbg !7615
  %62 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7616
  %call90 = call zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call89, i32 %61, %struct.edge_def* %62, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7617
  %conv91 = zext i8 %call90 to i32, !dbg !7617
  %63 = load i8, i8* %retval1, align 1, !dbg !7618
  %conv92 = zext i8 %63 to i32, !dbg !7618
  %or93 = or i32 %conv92, %conv91, !dbg !7618
  %conv94 = trunc i32 %or93 to i8, !dbg !7618
  store i8 %conv94, i8* %retval1, align 1, !dbg !7618
  br label %if.end111, !dbg !7619

if.else95:                                        ; preds = %if.else84
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7620
  %call96 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %64), !dbg !7620
  %cmp97 = icmp eq i32 %call96, 116, !dbg !7620
  br i1 %cmp97, label %if.then103, label %lor.lhs.false99, !dbg !7620

lor.lhs.false99:                                  ; preds = %if.else95
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7620
  %call100 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %65), !dbg !7620
  %cmp101 = icmp eq i32 %call100, 113, !dbg !7620
  br i1 %cmp101, label %if.then103, label %if.end110, !dbg !7622

if.then103:                                       ; preds = %lor.lhs.false99, %if.else95
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op_def, align 8, !dbg !7623
  %call104 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %66), !dbg !7625
  %67 = load i32, i32* %code.addr, align 4, !dbg !7626
  %68 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7627
  %call105 = call zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call104, i32 %67, %struct.edge_def* %68, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7628
  %conv106 = zext i8 %call105 to i32, !dbg !7628
  %69 = load i8, i8* %retval1, align 1, !dbg !7629
  %conv107 = zext i8 %69 to i32, !dbg !7629
  %or108 = or i32 %conv107, %conv106, !dbg !7629
  %conv109 = trunc i32 %or108 to i8, !dbg !7629
  store i8 %conv109, i8* %retval1, align 1, !dbg !7629
  br label %if.end110, !dbg !7630

if.end110:                                        ; preds = %if.then103, %lor.lhs.false99
  br label %if.end111

if.end111:                                        ; preds = %if.end110, %if.then88
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %if.then76
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.then59
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.end39
  %70 = load i8, i8* %retval1, align 1, !dbg !7631
  store i8 %70, i8* %retval, align 1, !dbg !7632
  br label %return, !dbg !7632

return:                                           ; preds = %if.end114, %if.then7, %if.then
  %71 = load i8, i8* %retval, align 1, !dbg !7633
  ret i8 %71, !dbg !7633
}

declare dso_local i32 @swap_tree_comparison(i32) #2

declare dso_local i32 @invert_tree_comparison(i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @live_on_edge(%struct.edge_def* %e, %union.tree_node* %name) #0 !dbg !7634 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !7637, metadata !DIExpression()), !dbg !7638
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !7639, metadata !DIExpression()), !dbg !7640
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !7641
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7642
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 1, !dbg !7643
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7643
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !7644
  %3 = load i32, i32* %index, align 8, !dbg !7644
  %idxprom = sext i32 %3 to i64, !dbg !7641
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %0, i64 %idxprom, !dbg !7641
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx, align 8, !dbg !7641
  %tobool = icmp ne %struct.simple_bitmap_def* %4, null, !dbg !7641
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7645

land.rhs:                                         ; preds = %entry
  %5 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !7646
  %6 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7646
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 1, !dbg !7646
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !7646
  %index2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !7646
  %8 = load i32, i32* %index2, align 8, !dbg !7646
  %idxprom3 = sext i32 %8 to i64, !dbg !7646
  %arrayidx4 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %5, i64 %idxprom3, !dbg !7646
  %9 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx4, align 8, !dbg !7646
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %9, i32 0, i32 3, !dbg !7646
  %10 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7646
  %ssa_name = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !7646
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !7646
  %11 = load i32, i32* %version, align 8, !dbg !7646
  %div = udiv i32 %11, 64, !dbg !7646
  %idxprom5 = zext i32 %div to i64, !dbg !7646
  %arrayidx6 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom5, !dbg !7646
  %12 = load i64, i64* %arrayidx6, align 8, !dbg !7646
  %13 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7646
  %ssa_name7 = bitcast %union.tree_node* %13 to %struct.tree_ssa_name*, !dbg !7646
  %version8 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name7, i32 0, i32 3, !dbg !7646
  %14 = load i32, i32* %version8, align 8, !dbg !7646
  %rem = urem i32 %14, 64, !dbg !7646
  %sh_prom = zext i32 %rem to i64, !dbg !7646
  %shr = lshr i64 %12, %sh_prom, !dbg !7646
  %and = and i64 %shr, 1, !dbg !7646
  %tobool9 = icmp ne i64 %and, 0, !dbg !7645
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %15 = phi i1 [ false, %entry ], [ %tobool9, %land.rhs ], !dbg !7647
  %land.ext = zext i1 %15 to i32, !dbg !7645
  %conv = trunc i32 %land.ext to i8, !dbg !7648
  ret i8 %conv, !dbg !7649
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %s) #0 !dbg !7650 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %sc = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !7651, metadata !DIExpression()), !dbg !7652
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7653
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !7655
  %tobool = icmp ne i8 %call, 0, !dbg !7655
  br i1 %tobool, label %if.then, label %if.end, !dbg !7656

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %sc, metadata !7657, metadata !DIExpression()), !dbg !7659
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7660
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !7661
  store i32 %call1, i32* %sc, align 4, !dbg !7659
  %2 = load i32, i32* %sc, align 4, !dbg !7662
  %cmp = icmp eq i32 %2, 116, !dbg !7662
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !7662

lor.lhs.false:                                    ; preds = %if.then
  %3 = load i32, i32* %sc, align 4, !dbg !7662
  %cmp2 = icmp eq i32 %3, 113, !dbg !7662
  br i1 %cmp2, label %lor.end, label %lor.lhs.false3, !dbg !7663

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %sc, align 4, !dbg !7664
  %cmp4 = icmp eq i32 %4, 118, !dbg !7665
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !7666

lor.rhs:                                          ; preds = %lor.lhs.false3
  %5 = load i32, i32* %sc, align 4, !dbg !7667
  %cmp5 = icmp eq i32 %5, 77, !dbg !7668
  br label %lor.end, !dbg !7666

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false3, %lor.lhs.false, %if.then
  %6 = phi i1 [ true, %lor.lhs.false3 ], [ true, %lor.lhs.false ], [ true, %if.then ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32, !dbg !7666
  %conv = trunc i32 %lor.ext to i8, !dbg !7662
  store i8 %conv, i8* %retval, align 1, !dbg !7669
  br label %return, !dbg !7669

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7670
  br label %return, !dbg !7670

return:                                           ; preds = %if.end, %lor.end
  %7 = load i8, i8* %retval, align 1, !dbg !7671
  ret i8 %7, !dbg !7671
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !7672 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7673, metadata !DIExpression()), !dbg !7674
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7675, metadata !DIExpression()), !dbg !7676
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7677
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7678
  store i32 %call, i32* %code, align 4, !dbg !7676
  %1 = load i32, i32* %code, align 4, !dbg !7679
  %cmp = icmp eq i32 %1, 6, !dbg !7681
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7682

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !7683
  %cmp1 = icmp eq i32 %2, 8, !dbg !7684
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !7685

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7686, metadata !DIExpression()), !dbg !7688
  %3 = load i32, i32* %code, align 4, !dbg !7689
  %cmp2 = icmp eq i32 %3, 8, !dbg !7691
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !7692

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7693
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !7694
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !7695
  br label %if.end, !dbg !7696

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7697
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !7698
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !7699

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7700
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !7700
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !7700
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7700
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !7700
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !7702
  br label %sw.epilog, !dbg !7703

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7704
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !7704
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !7704
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !7704
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !7704
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !7705
  br label %sw.epilog, !dbg !7706

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7707
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !7708
  br label %return, !dbg !7708

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !7709
  %cmp12 = icmp eq i32 %11, 1, !dbg !7711
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !7712

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7713
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !7714
  br label %return, !dbg !7714

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !7715
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !7716
  br label %return, !dbg !7716

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7717
  ret %union.tree_node* %14, !dbg !7717
}

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !7718 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7719, metadata !DIExpression()), !dbg !7720
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7721, metadata !DIExpression()), !dbg !7722
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7723
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7724
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !7722
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7725, metadata !DIExpression()), !dbg !7726
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7727
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !7727
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7727
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7727
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !7726
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7728
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !7728
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !7728
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !7728
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !7729
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7730
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7730
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !7730
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !7730
  ret %union.tree_node* %6, !dbg !7731
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !7732 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7733, metadata !DIExpression()), !dbg !7734
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7735
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7736
  ret %union.tree_node* %call, !dbg !7737
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !7738 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7741, metadata !DIExpression()), !dbg !7742
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7743
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7744
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !7745
  %1 = load i32, i32* %num_ops, align 4, !dbg !7745
  ret i32 %1, !dbg !7746
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_switch_num_labels(%union.gimple_statement_d* %gs) #0 !dbg !7747 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7748, metadata !DIExpression()), !dbg !7749
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !7750, metadata !DIExpression()), !dbg !7751
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7752
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7753
  store i32 %call, i32* %num_ops, align 4, !dbg !7754
  %1 = load i32, i32* %num_ops, align 4, !dbg !7755
  %cmp = icmp ugt i32 %1, 1, !dbg !7755
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7755

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 3162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !7755
  br label %cond.end, !dbg !7755

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7755

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7755
  %2 = load i32, i32* %num_ops, align 4, !dbg !7756
  %sub = sub i32 %2, 1, !dbg !7757
  ret i32 %sub, !dbg !7758
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %gs) #0 !dbg !7759 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7760, metadata !DIExpression()), !dbg !7761
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7762
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7763
  ret %union.tree_node* %call, !dbg !7764
}

declare dso_local %union.tree_node* @make_tree_vec_stat(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7765 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7766, metadata !DIExpression()), !dbg !7767
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7768, metadata !DIExpression()), !dbg !7769
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7770
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7770
  %1 = load i32, i32* %index.addr, align 4, !dbg !7770
  %add = add i32 %1, 1, !dbg !7770
  %cmp = icmp ugt i32 %call, %add, !dbg !7770
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7770

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 3215, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !7770
  br label %cond.end, !dbg !7770

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7770

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7770
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7771
  %3 = load i32, i32* %index.addr, align 4, !dbg !7772
  %add1 = add i32 %3, 1, !dbg !7773
  %call2 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %2, i32 %add1), !dbg !7774
  ret %union.tree_node* %call2, !dbg !7775
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare_case_labels(i8* %p1, i8* %p2) #0 !dbg !7776 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %case1 = alloca %union.tree_node*, align 8
  %case2 = alloca %union.tree_node*, align 8
  %uid1 = alloca i32, align 4
  %uid2 = alloca i32, align 4
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !7777, metadata !DIExpression()), !dbg !7778
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !7779, metadata !DIExpression()), !dbg !7780
  call void @llvm.dbg.declare(metadata %union.tree_node** %case1, metadata !7781, metadata !DIExpression()), !dbg !7782
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !7783
  %1 = bitcast i8* %0 to %union.tree_node**, !dbg !7784
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !7785
  store %union.tree_node* %2, %union.tree_node** %case1, align 8, !dbg !7782
  call void @llvm.dbg.declare(metadata %union.tree_node** %case2, metadata !7786, metadata !DIExpression()), !dbg !7787
  %3 = load i8*, i8** %p2.addr, align 8, !dbg !7788
  %4 = bitcast i8* %3 to %union.tree_node**, !dbg !7789
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !7790
  store %union.tree_node* %5, %union.tree_node** %case2, align 8, !dbg !7787
  call void @llvm.dbg.declare(metadata i32* %uid1, metadata !7791, metadata !DIExpression()), !dbg !7792
  %6 = load %union.tree_node*, %union.tree_node** %case1, align 8, !dbg !7793
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !7793
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7793
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !7793
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7793
  %decl_minimal = bitcast %union.tree_node* %7 to %struct.tree_decl_minimal*, !dbg !7793
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !7793
  %8 = load i32, i32* %uid, align 4, !dbg !7793
  store i32 %8, i32* %uid1, align 4, !dbg !7792
  call void @llvm.dbg.declare(metadata i32* %uid2, metadata !7794, metadata !DIExpression()), !dbg !7795
  %9 = load %union.tree_node*, %union.tree_node** %case2, align 8, !dbg !7796
  %exp1 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !7796
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !7796
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 2, !dbg !7796
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !7796
  %decl_minimal4 = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !7796
  %uid5 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal4, i32 0, i32 2, !dbg !7796
  %11 = load i32, i32* %uid5, align 4, !dbg !7796
  store i32 %11, i32* %uid2, align 4, !dbg !7795
  %12 = load i32, i32* %uid1, align 4, !dbg !7797
  %13 = load i32, i32* %uid2, align 4, !dbg !7799
  %cmp = icmp ult i32 %12, %13, !dbg !7800
  br i1 %cmp, label %if.then, label %if.else, !dbg !7801

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !7802
  br label %return, !dbg !7802

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %uid1, align 4, !dbg !7803
  %15 = load i32, i32* %uid2, align 4, !dbg !7805
  %cmp6 = icmp eq i32 %14, %15, !dbg !7806
  br i1 %cmp6, label %if.then7, label %if.else25, !dbg !7807

if.then7:                                         ; preds = %if.else
  %16 = load %union.tree_node*, %union.tree_node** %case1, align 8, !dbg !7808
  %exp8 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !7808
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !7808
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 0, !dbg !7808
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !7808
  %tobool = icmp ne %union.tree_node* %17, null, !dbg !7808
  br i1 %tobool, label %if.else12, label %if.then11, !dbg !7811

if.then11:                                        ; preds = %if.then7
  store i32 -1, i32* %retval, align 4, !dbg !7812
  br label %return, !dbg !7812

if.else12:                                        ; preds = %if.then7
  %18 = load %union.tree_node*, %union.tree_node** %case2, align 8, !dbg !7813
  %exp13 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !7813
  %operands14 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp13, i32 0, i32 3, !dbg !7813
  %arrayidx15 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands14, i64 0, i64 0, !dbg !7813
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8, !dbg !7813
  %tobool16 = icmp ne %union.tree_node* %19, null, !dbg !7813
  br i1 %tobool16, label %if.else18, label %if.then17, !dbg !7815

if.then17:                                        ; preds = %if.else12
  store i32 1, i32* %retval, align 4, !dbg !7816
  br label %return, !dbg !7816

if.else18:                                        ; preds = %if.else12
  %20 = load %union.tree_node*, %union.tree_node** %case1, align 8, !dbg !7817
  %exp19 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !7817
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !7817
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 0, !dbg !7817
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !7817
  %22 = load %union.tree_node*, %union.tree_node** %case2, align 8, !dbg !7818
  %exp22 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !7818
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !7818
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i64 0, i64 0, !dbg !7818
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !7818
  %call = call i32 @tree_int_cst_compare(%union.tree_node* %21, %union.tree_node* %23), !dbg !7819
  store i32 %call, i32* %retval, align 4, !dbg !7820
  br label %return, !dbg !7820

if.else25:                                        ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !7821
  br label %return, !dbg !7821

return:                                           ; preds = %if.else25, %if.else18, %if.then17, %if.then11, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !7822
  ret i32 %24, !dbg !7822
}

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @label_to_block_fn(%struct.function*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !7823 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7829, metadata !DIExpression()), !dbg !7830
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7831
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !7832
  %1 = load i32, i32* %flags, align 8, !dbg !7832
  %and = and i32 %1, 512, !dbg !7833
  %tobool = icmp ne i32 %and, 0, !dbg !7833
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !7834

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7835
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !7836
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !7837
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !7837
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !7835
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7838

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7839
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !7840
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !7841
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !7841
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !7842
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7842
  br label %cond.end, !dbg !7838

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !7838

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !7838
  ret %struct.gimple_seq_d* %cond, !dbg !7843
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !7844 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !7850, metadata !DIExpression()), !dbg !7851
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7852
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !7852
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7852

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7853
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !7854
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !7854
  br label %cond.end, !dbg !7852

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7852

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !7852
  ret %struct.gimple_seq_node_d* %cond, !dbg !7855
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7856 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7859, metadata !DIExpression()), !dbg !7860
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7861, metadata !DIExpression()), !dbg !7862
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7863, metadata !DIExpression()), !dbg !7864
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7865
  %and = and i32 %0, 8, !dbg !7865
  %tobool = icmp ne i32 %and, 0, !dbg !7865
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !7865

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7865
  %and1 = and i32 %1, 2, !dbg !7865
  %tobool2 = icmp ne i32 %and1, 0, !dbg !7865
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !7865

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !7865
  %and3 = and i32 %2, 4, !dbg !7865
  %tobool4 = icmp ne i32 %and3, 0, !dbg !7865
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !7865

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7865
  %and6 = and i32 %3, 1, !dbg !7865
  %tobool7 = icmp ne i32 %and6, 0, !dbg !7865
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !7865

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !7865
  br label %cond.end, !dbg !7865

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !7865

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7865
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7866
  %and8 = and i32 %4, 10, !dbg !7867
  %tobool9 = icmp ne i32 %and8, 0, !dbg !7867
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !7868

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7869
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !7870
  br label %cond.end12, !dbg !7868

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !7868

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !7868
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7871
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !7872
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !7873
  %7 = load i32, i32* %flags.addr, align 4, !dbg !7874
  %and14 = and i32 %7, 8, !dbg !7876
  %tobool15 = icmp ne i32 %and14, 0, !dbg !7876
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !7877

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7878
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !7879
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !7879
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !7878
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !7880

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7881
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !7882
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !7883
  br i1 %cmp, label %if.then, label %if.end, !dbg !7884

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7885
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !7886
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !7886
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !7887
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !7887
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7888
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !7889
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !7890
  br label %if.end, !dbg !7888

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !7891
  %and23 = and i32 %15, 5, !dbg !7892
  %tobool24 = icmp ne i32 %and23, 0, !dbg !7892
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !7893

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7894
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !7895
  br label %cond.end28, !dbg !7893

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !7893

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !7893
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7896
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !7897
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !7898
  %18 = load i32, i32* %flags.addr, align 4, !dbg !7899
  %and30 = and i32 %18, 4, !dbg !7901
  %tobool31 = icmp ne i32 %and30, 0, !dbg !7901
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !7902

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7903
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !7904
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !7904
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !7903
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !7905

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7906
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !7907
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !7908
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !7909

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7910
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !7911
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !7911
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !7912
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !7912
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7913
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !7914
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !7915
  br label %if.end42, !dbg !7913

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7916
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !7917
  store i8 0, i8* %done, align 8, !dbg !7918
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7919
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !7920
  store i32 0, i32* %phi_i, align 8, !dbg !7921
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7922
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !7923
  store i32 0, i32* %num_phi, align 4, !dbg !7924
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7925
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !7926
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7927
  ret void, !dbg !7928
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !7929 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7932, metadata !DIExpression()), !dbg !7933
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7934
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7936
  %tobool = icmp ne i8 %call, 0, !dbg !7936
  br i1 %tobool, label %if.end, label %if.then, !dbg !7937

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !7938
  br label %return, !dbg !7938

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7939
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7940
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7941
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !7942
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !7942
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !7943
  br label %return, !dbg !7943

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !7944
  ret %struct.def_optype_d* %3, !dbg !7944
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !7945 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7946, metadata !DIExpression()), !dbg !7947
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7948
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7950
  %tobool = icmp ne i8 %call, 0, !dbg !7950
  br i1 %tobool, label %if.end, label %if.then, !dbg !7951

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7952
  br label %return, !dbg !7952

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7953
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7954
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !7955
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !7955
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7956
  br label %return, !dbg !7956

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7957
  ret %union.tree_node* %3, !dbg !7957
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !7958 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7961, metadata !DIExpression()), !dbg !7962
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7963
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7965
  %tobool = icmp ne i8 %call, 0, !dbg !7965
  br i1 %tobool, label %if.end, label %if.then, !dbg !7966

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !7967
  br label %return, !dbg !7967

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7968
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7969
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7970
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !7971
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !7971
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !7972
  br label %return, !dbg !7972

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !7973
  ret %struct.use_optype_d* %3, !dbg !7973
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !7974 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7975, metadata !DIExpression()), !dbg !7976
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7977
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7979
  %tobool = icmp ne i8 %call, 0, !dbg !7979
  br i1 %tobool, label %if.end, label %if.then, !dbg !7980

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7981
  br label %return, !dbg !7981

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7982
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7983
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !7984
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !7984
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7985
  br label %return, !dbg !7985

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7986
  ret %union.tree_node* %3, !dbg !7986
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !7987 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7988, metadata !DIExpression()), !dbg !7989
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7990
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7991
  %cmp = icmp uge i32 %call, 6, !dbg !7992
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7993

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7994
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7995
  %cmp2 = icmp ule i32 %call1, 9, !dbg !7996
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7997
  %land.ext = zext i1 %2 to i32, !dbg !7993
  %conv = trunc i32 %land.ext to i8, !dbg !7991
  ret i8 %conv, !dbg !7998
}

declare dso_local zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !7999 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8002, metadata !DIExpression()), !dbg !8003
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8004
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8005
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !8006
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8006
  ret %struct.basic_block_def* %1, !dbg !8007
}

declare dso_local void @count_uses_and_derefs(%union.tree_node*, %union.gimple_statement_d*, i32*, i32*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !8008 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8009, metadata !DIExpression()), !dbg !8010
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8011, metadata !DIExpression()), !dbg !8012
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8013
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8014
  store i32 %call, i32* %code, align 4, !dbg !8012
  %1 = load i32, i32* %code, align 4, !dbg !8015
  %cmp = icmp eq i32 %1, 6, !dbg !8017
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8018

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !8019
  %cmp1 = icmp eq i32 %2, 1, !dbg !8020
  br i1 %cmp1, label %if.then, label %if.else, !dbg !8021

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8022
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !8023
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8024
  %bf.load = load i32, i32* %4, align 8, !dbg !8024
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8024
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !8025
  br label %return, !dbg !8025

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !8026
  %cmp2 = icmp eq i32 %5, 8, !dbg !8028
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !8029

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !8030
  br label %return, !dbg !8030

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !8031
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !8032
  br label %return, !dbg !8032

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !8033
  ret i32 %6, !dbg !8033
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !8034 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !8037, metadata !DIExpression()), !dbg !8038
  %0 = load i32, i32* %code.addr, align 4, !dbg !8039
  %idxprom = sext i32 %0 to i64, !dbg !8040
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !8040
  %1 = load i8, i8* %arrayidx, align 1, !dbg !8040
  %conv = zext i8 %1 to i32, !dbg !8041
  ret i32 %conv, !dbg !8042
}

declare dso_local zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d*, %struct.ssa_use_operand_d**, %union.gimple_statement_d**) #2

declare dso_local %union.tree_node* @build_int_cst_wide(%union.tree_node*, i64, i64) #2

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !8043 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !8047, metadata !DIExpression()), !dbg !8048
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !8049
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !8050
  ret %union.tree_node* %1, !dbg !8051
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !8052 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8053, metadata !DIExpression()), !dbg !8054
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8055
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !8056
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !8057
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8057
  ret %union.tree_node* %1, !dbg !8058
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8059 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8062, metadata !DIExpression()), !dbg !8063
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8064
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !8065
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !8066
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8067
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !8068
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !8069
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8070
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !8071
  store i32 0, i32* %iter_type, align 4, !dbg !8072
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8073
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !8074
  store i32 0, i32* %phi_i, align 8, !dbg !8075
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8076
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !8077
  store i32 0, i32* %num_phi, align 4, !dbg !8078
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8079
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !8080
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8081
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8082
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !8083
  store i8 1, i8* %done, align 8, !dbg !8084
  ret void, !dbg !8085
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !8086 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8087, metadata !DIExpression()), !dbg !8088
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8089
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !8090
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !8091
  %1 = load i32, i32* %nargs, align 4, !dbg !8091
  ret i32 %1, !dbg !8092
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !8093 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8096, metadata !DIExpression()), !dbg !8097
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !8098, metadata !DIExpression()), !dbg !8099
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8100
  %1 = load i32, i32* %i.addr, align 4, !dbg !8101
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !8102
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !8103
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !8104
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !8105 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8109, metadata !DIExpression()), !dbg !8110
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !8111, metadata !DIExpression()), !dbg !8112
  %0 = load i32, i32* %index.addr, align 4, !dbg !8113
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8113
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !8113
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !8113
  %2 = load i32, i32* %capacity, align 8, !dbg !8113
  %cmp = icmp ule i32 %0, %2, !dbg !8113
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8113

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !8113
  br label %cond.end, !dbg !8113

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8113

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8113
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8114
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !8115
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !8116
  %4 = load i32, i32* %index.addr, align 4, !dbg !8117
  %idxprom = zext i32 %4 to i64, !dbg !8114
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !8114
  ret %struct.phi_arg_d* %arrayidx, !dbg !8118
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !8119 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !8122, metadata !DIExpression()), !dbg !8123
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !8124
  %3 = load i32, i32* %index, align 8, !dbg !8124
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8125
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !8125
  %6 = load i32, i32* %5, align 8, !dbg !8125
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !8125
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !8125
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !8125
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !8125
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8125

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8125
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !8125
  %11 = load i32, i32* %10, align 8, !dbg !8125
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !8125
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !8125
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !8125
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !8125
  br label %cond.end, !dbg !8125

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8125

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8125
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8125
  %cmp = icmp eq i32 %3, %call2, !dbg !8126
  %conv = zext i1 %cmp to i32, !dbg !8126
  %conv3 = trunc i32 %conv to i8, !dbg !8127
  ret i8 %conv3, !dbg !8128
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !8129 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !8132, metadata !DIExpression()), !dbg !8133
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8134
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !8134
  %5 = load i32, i32* %4, align 8, !dbg !8134
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !8134
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !8134
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !8134
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !8134
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8134

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8134
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !8134
  %10 = load i32, i32* %9, align 8, !dbg !8134
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !8134
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !8134
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !8134
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !8134
  br label %cond.end, !dbg !8134

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8134

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8134
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !8134
  %13 = load i32, i32* %index, align 8, !dbg !8134
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !8134
  ret %struct.edge_def* %call2, !dbg !8135
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !8136 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !8139, metadata !DIExpression()), !dbg !8140
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !8141
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !8141
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !8141
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8141

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.35, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !8141
  br label %cond.end, !dbg !8141

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8141

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8141
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !8142
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !8142
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !8143
  ret %struct.VEC_edge_gc* %5, !dbg !8144
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !8145 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !8148, metadata !DIExpression()), !dbg !8149
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8150, metadata !DIExpression()), !dbg !8149
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8149
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !8149
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8149

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8149
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8149
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !8149
  %3 = load i32, i32* %num, align 8, !dbg !8149
  %cmp = icmp ult i32 %1, %3, !dbg !8149
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8151
  %land.ext = zext i1 %4 to i32, !dbg !8149
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8149
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !8149
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8149
  %idxprom = zext i32 %6 to i64, !dbg !8149
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !8149
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !8149
  ret %struct.edge_def* %7, !dbg !8149
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @process_assert_insertions_for(%union.tree_node* %name, %struct.assert_locus_d* %loc) #0 !dbg !8152 {
entry:
  %retval = alloca i8, align 1
  %name.addr = alloca %union.tree_node*, align 8
  %loc.addr = alloca %struct.assert_locus_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %cond = alloca %union.tree_node*, align 8
  %assert_stmt = alloca %union.gimple_statement_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !8155, metadata !DIExpression()), !dbg !8156
  store %struct.assert_locus_d* %loc, %struct.assert_locus_d** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assert_locus_d** %loc.addr, metadata !8157, metadata !DIExpression()), !dbg !8158
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8159, metadata !DIExpression()), !dbg !8160
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !8161, metadata !DIExpression()), !dbg !8162
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %assert_stmt, metadata !8163, metadata !DIExpression()), !dbg !8164
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8165, metadata !DIExpression()), !dbg !8166
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8167, metadata !DIExpression()), !dbg !8168
  %0 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc.addr, align 8, !dbg !8169
  %expr = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %0, i32 0, i32 5, !dbg !8171
  %1 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8171
  %2 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc.addr, align 8, !dbg !8172
  %val = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %2, i32 0, i32 4, !dbg !8173
  %3 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8173
  %cmp = icmp eq %union.tree_node* %1, %3, !dbg !8174
  br i1 %cmp, label %if.then, label %if.end, !dbg !8175

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8176
  br label %return, !dbg !8176

if.end:                                           ; preds = %entry
  %4 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc.addr, align 8, !dbg !8177
  %comp_code = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %4, i32 0, i32 3, !dbg !8177
  %5 = load i32, i32* %comp_code, align 8, !dbg !8177
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8177
  %7 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc.addr, align 8, !dbg !8177
  %expr1 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %7, i32 0, i32 5, !dbg !8177
  %8 = load %union.tree_node*, %union.tree_node** %expr1, align 8, !dbg !8177
  %9 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc.addr, align 8, !dbg !8177
  %val2 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %9, i32 0, i32 4, !dbg !8177
  %10 = load %union.tree_node*, %union.tree_node** %val2, align 8, !dbg !8177
  %call = call %union.tree_node* @build2_stat(i32 %5, %union.tree_node* %6, %union.tree_node* %8, %union.tree_node* %10), !dbg !8177
  store %union.tree_node* %call, %union.tree_node** %cond, align 8, !dbg !8178
  %11 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !8179
  %12 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !8180
  %call3 = call %union.gimple_statement_d* @build_assert_expr_for(%union.tree_node* %11, %union.tree_node* %12), !dbg !8181
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %assert_stmt, align 8, !dbg !8182
  %13 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc.addr, align 8, !dbg !8183
  %e4 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %13, i32 0, i32 1, !dbg !8185
  %14 = load %struct.edge_def*, %struct.edge_def** %e4, align 8, !dbg !8185
  %tobool = icmp ne %struct.edge_def* %14, null, !dbg !8183
  br i1 %tobool, label %if.then5, label %if.end7, !dbg !8186

if.then5:                                         ; preds = %if.end
  %15 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc.addr, align 8, !dbg !8187
  %e6 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %15, i32 0, i32 1, !dbg !8189
  %16 = load %struct.edge_def*, %struct.edge_def** %e6, align 8, !dbg !8189
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assert_stmt, align 8, !dbg !8190
  call void @gsi_insert_on_edge(%struct.edge_def* %16, %union.gimple_statement_d* %17), !dbg !8191
  store i8 1, i8* %retval, align 1, !dbg !8192
  br label %return, !dbg !8192

if.end7:                                          ; preds = %if.end
  %18 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc.addr, align 8, !dbg !8193
  %si = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %18, i32 0, i32 2, !dbg !8194
  %call8 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !8195
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %stmt, align 8, !dbg !8196
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8197
  %call9 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %19), !dbg !8199
  %tobool10 = icmp ne i8 %call9, 0, !dbg !8199
  br i1 %tobool10, label %if.end13, label %if.then11, !dbg !8200

if.then11:                                        ; preds = %if.end7
  %20 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc.addr, align 8, !dbg !8201
  %si12 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %20, i32 0, i32 2, !dbg !8203
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assert_stmt, align 8, !dbg !8204
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %si12, %union.gimple_statement_d* %21, i32 1), !dbg !8205
  store i8 0, i8* %retval, align 1, !dbg !8206
  br label %return, !dbg !8206

if.end13:                                         ; preds = %if.end7
  %22 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc.addr, align 8, !dbg !8207
  %bb = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %22, i32 0, i32 0, !dbg !8207
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8207
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 1, !dbg !8207
  %call14 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !8207
  %24 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !8207
  %25 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 0, !dbg !8207
  %26 = extractvalue { i32, %struct.VEC_edge_gc** } %call14, 0, !dbg !8207
  store i32 %26, i32* %25, align 8, !dbg !8207
  %27 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 1, !dbg !8207
  %28 = extractvalue { i32, %struct.VEC_edge_gc** } %call14, 1, !dbg !8207
  store %struct.VEC_edge_gc** %28, %struct.VEC_edge_gc*** %27, align 8, !dbg !8207
  %29 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !8207
  %30 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !8207
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 16, i1 false), !dbg !8207
  br label %for.cond, !dbg !8207

for.cond:                                         ; preds = %for.inc, %if.end13
  %31 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8209
  %32 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 0, !dbg !8209
  %33 = load i32, i32* %32, align 8, !dbg !8209
  %34 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 1, !dbg !8209
  %35 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %34, align 8, !dbg !8209
  %call15 = call zeroext i8 @ei_cond(i32 %33, %struct.VEC_edge_gc** %35, %struct.edge_def** %e), !dbg !8209
  %tobool16 = icmp ne i8 %call15, 0, !dbg !8207
  br i1 %tobool16, label %for.body, label %for.end, !dbg !8207

for.body:                                         ; preds = %for.cond
  %36 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8211
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %36, i32 0, i32 7, !dbg !8213
  %37 = load i32, i32* %flags, align 8, !dbg !8213
  %and = and i32 %37, 2, !dbg !8214
  %tobool17 = icmp ne i32 %and, 0, !dbg !8214
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !8215

if.then18:                                        ; preds = %for.body
  %38 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8216
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assert_stmt, align 8, !dbg !8218
  call void @gsi_insert_on_edge(%struct.edge_def* %38, %union.gimple_statement_d* %39), !dbg !8219
  store i8 1, i8* %retval, align 1, !dbg !8220
  br label %return, !dbg !8220

if.end19:                                         ; preds = %for.body
  br label %for.inc, !dbg !8221

for.inc:                                          ; preds = %if.end19
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !8209
  br label %for.cond, !dbg !8209, !llvm.loop !8222

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 4901, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !8224
  store i8 0, i8* %retval, align 1, !dbg !8225
  br label %return, !dbg !8225

return:                                           ; preds = %for.end, %if.then18, %if.then11, %if.then5, %if.then
  %40 = load i8, i8* %retval, align 1, !dbg !8226
  ret i8 %40, !dbg !8226
}

declare dso_local void @gsi_commit_edge_inserts() #2

declare dso_local void @statistics_counter_event(%struct.function*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @build_assert_expr_for(%union.tree_node* %cond, %union.tree_node* %v) #0 !dbg !8227 {
entry:
  %cond.addr = alloca %union.tree_node*, align 8
  %v.addr = alloca %union.tree_node*, align 8
  %n = alloca %union.tree_node*, align 8
  %assertion = alloca %union.gimple_statement_d*, align 8
  %a = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond.addr, metadata !8230, metadata !DIExpression()), !dbg !8231
  store %union.tree_node* %v, %union.tree_node** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %v.addr, metadata !8232, metadata !DIExpression()), !dbg !8233
  call void @llvm.dbg.declare(metadata %union.tree_node** %n, metadata !8234, metadata !DIExpression()), !dbg !8235
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %assertion, metadata !8236, metadata !DIExpression()), !dbg !8237
  %0 = load %union.tree_node*, %union.tree_node** %v.addr, align 8, !dbg !8238
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8238
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8238
  %bf.load = load i64, i64* %1, align 8, !dbg !8238
  %bf.clear = and i64 %bf.load, 65535, !dbg !8238
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8238
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !8238
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8238

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3748, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !8238
  br label %cond.end, !dbg !8238

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8238

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8238
  %2 = load %union.tree_node*, %union.tree_node** %v.addr, align 8, !dbg !8239
  %call = call %union.tree_node* @duplicate_ssa_name(%union.tree_node* %2, %union.gimple_statement_d* null), !dbg !8240
  store %union.tree_node* %call, %union.tree_node** %n, align 8, !dbg !8241
  %3 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8242
  %base2 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8242
  %4 = bitcast %struct.tree_base* %base2 to i64*, !dbg !8242
  %bf.load3 = load i64, i64* %4, align 8, !dbg !8242
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !8242
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !8242
  %idxprom = sext i32 %bf.cast5 to i64, !dbg !8242
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8242
  %5 = load i32, i32* %arrayidx, align 4, !dbg !8242
  %cmp6 = icmp eq i32 %5, 5, !dbg !8242
  br i1 %cmp6, label %if.then, label %if.else, !dbg !8244

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %a, metadata !8245, metadata !DIExpression()), !dbg !8247
  %6 = load %union.tree_node*, %union.tree_node** %v.addr, align 8, !dbg !8248
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !8248
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8248
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8248
  %8 = load %union.tree_node*, %union.tree_node** %v.addr, align 8, !dbg !8248
  %9 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8248
  %call7 = call %union.tree_node* @build2_stat(i32 148, %union.tree_node* %7, %union.tree_node* %8, %union.tree_node* %9), !dbg !8248
  store %union.tree_node* %call7, %union.tree_node** %a, align 8, !dbg !8247
  %10 = load %union.tree_node*, %union.tree_node** %n, align 8, !dbg !8249
  %11 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !8249
  %call8 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %10, %union.tree_node* %11), !dbg !8249
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %assertion, align 8, !dbg !8250
  br label %if.end37, !dbg !8251

if.else:                                          ; preds = %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8252
  %base9 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !8252
  %13 = bitcast %struct.tree_base* %base9 to i64*, !dbg !8252
  %bf.load10 = load i64, i64* %13, align 8, !dbg !8252
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !8252
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !8252
  %cmp13 = icmp eq i32 %bf.cast12, 96, !dbg !8254
  br i1 %cmp13, label %if.then14, label %if.else22, !dbg !8255

if.then14:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !8256, metadata !DIExpression()), !dbg !8258
  %14 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8259
  %exp = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !8259
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8259
  %arrayidx15 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8259
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8, !dbg !8259
  store %union.tree_node* %15, %union.tree_node** %op0, align 8, !dbg !8258
  %16 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8260
  %17 = load %union.tree_node*, %union.tree_node** %v.addr, align 8, !dbg !8260
  %cmp16 = icmp eq %union.tree_node* %16, %17, !dbg !8260
  br i1 %cmp16, label %cond.false18, label %cond.true17, !dbg !8260

cond.true17:                                      ; preds = %if.then14
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3760, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !8260
  br label %cond.end19, !dbg !8260

cond.false18:                                     ; preds = %if.then14
  br label %cond.end19, !dbg !8260

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i32 [ 0, %cond.true17 ], [ 0, %cond.false18 ], !dbg !8260
  %18 = load %union.tree_node*, %union.tree_node** %n, align 8, !dbg !8261
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !8261
  %call21 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %18, %union.tree_node* %19), !dbg !8261
  store %union.gimple_statement_d* %call21, %union.gimple_statement_d** %assertion, align 8, !dbg !8262
  br label %if.end36, !dbg !8263

if.else22:                                        ; preds = %if.else
  %20 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8264
  %base23 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !8264
  %21 = bitcast %struct.tree_base* %base23 to i64*, !dbg !8264
  %bf.load24 = load i64, i64* %21, align 8, !dbg !8264
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !8264
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !8264
  %cmp27 = icmp eq i32 %bf.cast26, 141, !dbg !8266
  br i1 %cmp27, label %if.then28, label %if.else35, !dbg !8267

if.then28:                                        ; preds = %if.else22
  %22 = load %union.tree_node*, %union.tree_node** %v.addr, align 8, !dbg !8268
  %23 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8268
  %cmp29 = icmp eq %union.tree_node* %22, %23, !dbg !8268
  br i1 %cmp29, label %cond.false31, label %cond.true30, !dbg !8268

cond.true30:                                      ; preds = %if.then28
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3766, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !8268
  br label %cond.end32, !dbg !8268

cond.false31:                                     ; preds = %if.then28
  br label %cond.end32, !dbg !8268

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !8268
  %24 = load %union.tree_node*, %union.tree_node** %n, align 8, !dbg !8270
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !8270
  %call34 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %24, %union.tree_node* %25), !dbg !8270
  store %union.gimple_statement_d* %call34, %union.gimple_statement_d** %assertion, align 8, !dbg !8271
  br label %if.end, !dbg !8272

if.else35:                                        ; preds = %if.else22
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3770, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !8273
  br label %if.end

if.end:                                           ; preds = %if.else35, %cond.end32
  br label %if.end36

if.end36:                                         ; preds = %if.end, %cond.end19
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assertion, align 8, !dbg !8274
  %27 = load %union.tree_node*, %union.tree_node** %n, align 8, !dbg !8275
  %ssa_name = bitcast %union.tree_node* %27 to %struct.tree_ssa_name*, !dbg !8275
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !8275
  store %union.gimple_statement_d* %26, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8276
  %28 = load %union.tree_node*, %union.tree_node** %n, align 8, !dbg !8277
  %29 = load %union.tree_node*, %union.tree_node** %v.addr, align 8, !dbg !8278
  call void @register_new_name_mapping(%union.tree_node* %28, %union.tree_node* %29), !dbg !8279
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assertion, align 8, !dbg !8280
  ret %union.gimple_statement_d* %30, !dbg !8281
}

declare dso_local void @gsi_insert_on_edge(%struct.edge_def*, %union.gimple_statement_d*) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local %union.tree_node* @duplicate_ssa_name(%union.tree_node*, %union.gimple_statement_d*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @register_new_name_mapping(%union.tree_node*, %union.tree_node*) #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stmt_interesting_for_vrp(%union.gimple_statement_d* %stmt) #0 !dbg !8282 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8283, metadata !DIExpression()), !dbg !8284
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8285
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8287
  %cmp = icmp eq i32 %call, 16, !dbg !8288
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !8289

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8290
  %call1 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %1), !dbg !8291
  %call2 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call1), !dbg !8292
  %conv = zext i8 %call2 to i32, !dbg !8292
  %tobool = icmp ne i32 %conv, 0, !dbg !8292
  br i1 %tobool, label %land.lhs.true3, label %if.else, !dbg !8293

land.lhs.true3:                                   ; preds = %land.lhs.true
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8294
  %call4 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %2), !dbg !8294
  %common = bitcast %union.tree_node* %call4 to %struct.tree_common*, !dbg !8294
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8294
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8294
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8294
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !8294
  %bf.load = load i64, i64* %4, align 8, !dbg !8294
  %bf.clear = and i64 %bf.load, 65535, !dbg !8294
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8294
  %cmp5 = icmp eq i32 %bf.cast, 6, !dbg !8294
  br i1 %cmp5, label %if.then, label %lor.lhs.false, !dbg !8294

lor.lhs.false:                                    ; preds = %land.lhs.true3
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8294
  %call7 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %5), !dbg !8294
  %common8 = bitcast %union.tree_node* %call7 to %struct.tree_common*, !dbg !8294
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !8294
  %6 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !8294
  %base10 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8294
  %7 = bitcast %struct.tree_base* %base10 to i64*, !dbg !8294
  %bf.load11 = load i64, i64* %7, align 8, !dbg !8294
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !8294
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !8294
  %cmp14 = icmp eq i32 %bf.cast13, 7, !dbg !8294
  br i1 %cmp14, label %if.then, label %lor.lhs.false16, !dbg !8294

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8294
  %call17 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %8), !dbg !8294
  %common18 = bitcast %union.tree_node* %call17 to %struct.tree_common*, !dbg !8294
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !8294
  %9 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !8294
  %base20 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !8294
  %10 = bitcast %struct.tree_base* %base20 to i64*, !dbg !8294
  %bf.load21 = load i64, i64* %10, align 8, !dbg !8294
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !8294
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !8294
  %cmp24 = icmp eq i32 %bf.cast23, 8, !dbg !8294
  br i1 %cmp24, label %if.then, label %lor.lhs.false26, !dbg !8295

lor.lhs.false26:                                  ; preds = %lor.lhs.false16
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8296
  %call27 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %11), !dbg !8296
  %common28 = bitcast %union.tree_node* %call27 to %struct.tree_common*, !dbg !8296
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !8296
  %12 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !8296
  %base30 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !8296
  %13 = bitcast %struct.tree_base* %base30 to i64*, !dbg !8296
  %bf.load31 = load i64, i64* %13, align 8, !dbg !8296
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !8296
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !8296
  %cmp34 = icmp eq i32 %bf.cast33, 10, !dbg !8296
  br i1 %cmp34, label %if.then, label %lor.lhs.false36, !dbg !8296

lor.lhs.false36:                                  ; preds = %lor.lhs.false26
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8296
  %call37 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %14), !dbg !8296
  %common38 = bitcast %union.tree_node* %call37 to %struct.tree_common*, !dbg !8296
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !8296
  %15 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !8296
  %base40 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !8296
  %16 = bitcast %struct.tree_base* %base40 to i64*, !dbg !8296
  %bf.load41 = load i64, i64* %16, align 8, !dbg !8296
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !8296
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !8296
  %cmp44 = icmp eq i32 %bf.cast43, 12, !dbg !8296
  br i1 %cmp44, label %if.then, label %if.else, !dbg !8297

if.then:                                          ; preds = %lor.lhs.false36, %lor.lhs.false26, %lor.lhs.false16, %lor.lhs.false, %land.lhs.true3
  store i8 1, i8* %retval, align 1, !dbg !8298
  br label %return, !dbg !8298

if.else:                                          ; preds = %lor.lhs.false36, %land.lhs.true, %entry
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8299
  %call46 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %17), !dbg !8301
  %conv47 = zext i8 %call46 to i32, !dbg !8301
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !8301
  br i1 %tobool48, label %if.then53, label %lor.lhs.false49, !dbg !8302

lor.lhs.false49:                                  ; preds = %if.else
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8303
  %call50 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %18), !dbg !8304
  %conv51 = zext i8 %call50 to i32, !dbg !8304
  %tobool52 = icmp ne i32 %conv51, 0, !dbg !8304
  br i1 %tobool52, label %if.then53, label %if.else124, !dbg !8305

if.then53:                                        ; preds = %lor.lhs.false49, %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !8306, metadata !DIExpression()), !dbg !8308
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8309
  %call54 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %19), !dbg !8310
  store %union.tree_node* %call54, %union.tree_node** %lhs, align 8, !dbg !8308
  %20 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8311
  %tobool55 = icmp ne %union.tree_node* %20, null, !dbg !8311
  br i1 %tobool55, label %land.lhs.true56, label %if.end, !dbg !8313

land.lhs.true56:                                  ; preds = %if.then53
  %21 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8314
  %base57 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !8314
  %22 = bitcast %struct.tree_base* %base57 to i64*, !dbg !8314
  %bf.load58 = load i64, i64* %22, align 8, !dbg !8314
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !8314
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !8314
  %cmp61 = icmp eq i32 %bf.cast60, 141, !dbg !8315
  br i1 %cmp61, label %land.lhs.true63, label %if.end, !dbg !8316

land.lhs.true63:                                  ; preds = %land.lhs.true56
  %23 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8317
  %common64 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !8317
  %type65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2, !dbg !8317
  %24 = load %union.tree_node*, %union.tree_node** %type65, align 8, !dbg !8317
  %base66 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !8317
  %25 = bitcast %struct.tree_base* %base66 to i64*, !dbg !8317
  %bf.load67 = load i64, i64* %25, align 8, !dbg !8317
  %bf.clear68 = and i64 %bf.load67, 65535, !dbg !8317
  %bf.cast69 = trunc i64 %bf.clear68 to i32, !dbg !8317
  %cmp70 = icmp eq i32 %bf.cast69, 6, !dbg !8317
  br i1 %cmp70, label %land.lhs.true108, label %lor.lhs.false72, !dbg !8317

lor.lhs.false72:                                  ; preds = %land.lhs.true63
  %26 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8317
  %common73 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !8317
  %type74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2, !dbg !8317
  %27 = load %union.tree_node*, %union.tree_node** %type74, align 8, !dbg !8317
  %base75 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !8317
  %28 = bitcast %struct.tree_base* %base75 to i64*, !dbg !8317
  %bf.load76 = load i64, i64* %28, align 8, !dbg !8317
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !8317
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !8317
  %cmp79 = icmp eq i32 %bf.cast78, 7, !dbg !8317
  br i1 %cmp79, label %land.lhs.true108, label %lor.lhs.false81, !dbg !8317

lor.lhs.false81:                                  ; preds = %lor.lhs.false72
  %29 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8317
  %common82 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !8317
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2, !dbg !8317
  %30 = load %union.tree_node*, %union.tree_node** %type83, align 8, !dbg !8317
  %base84 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !8317
  %31 = bitcast %struct.tree_base* %base84 to i64*, !dbg !8317
  %bf.load85 = load i64, i64* %31, align 8, !dbg !8317
  %bf.clear86 = and i64 %bf.load85, 65535, !dbg !8317
  %bf.cast87 = trunc i64 %bf.clear86 to i32, !dbg !8317
  %cmp88 = icmp eq i32 %bf.cast87, 8, !dbg !8317
  br i1 %cmp88, label %land.lhs.true108, label %lor.lhs.false90, !dbg !8318

lor.lhs.false90:                                  ; preds = %lor.lhs.false81
  %32 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8319
  %common91 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !8319
  %type92 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common91, i32 0, i32 2, !dbg !8319
  %33 = load %union.tree_node*, %union.tree_node** %type92, align 8, !dbg !8319
  %base93 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !8319
  %34 = bitcast %struct.tree_base* %base93 to i64*, !dbg !8319
  %bf.load94 = load i64, i64* %34, align 8, !dbg !8319
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !8319
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !8319
  %cmp97 = icmp eq i32 %bf.cast96, 10, !dbg !8319
  br i1 %cmp97, label %land.lhs.true108, label %lor.lhs.false99, !dbg !8319

lor.lhs.false99:                                  ; preds = %lor.lhs.false90
  %35 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8319
  %common100 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !8319
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2, !dbg !8319
  %36 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !8319
  %base102 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !8319
  %37 = bitcast %struct.tree_base* %base102 to i64*, !dbg !8319
  %bf.load103 = load i64, i64* %37, align 8, !dbg !8319
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !8319
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !8319
  %cmp106 = icmp eq i32 %bf.cast105, 12, !dbg !8319
  br i1 %cmp106, label %land.lhs.true108, label %if.end, !dbg !8320

land.lhs.true108:                                 ; preds = %lor.lhs.false99, %lor.lhs.false90, %lor.lhs.false81, %lor.lhs.false72, %land.lhs.true63
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8321
  %call109 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %38), !dbg !8322
  %conv110 = zext i8 %call109 to i32, !dbg !8322
  %tobool111 = icmp ne i32 %conv110, 0, !dbg !8322
  br i1 %tobool111, label %land.lhs.true112, label %lor.lhs.false120, !dbg !8323

land.lhs.true112:                                 ; preds = %land.lhs.true108
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8324
  %call113 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %39), !dbg !8325
  %cmp114 = icmp ne %union.tree_node* %call113, null, !dbg !8326
  br i1 %cmp114, label %land.lhs.true116, label %lor.lhs.false120, !dbg !8327

land.lhs.true116:                                 ; preds = %land.lhs.true112
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8328
  %call117 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %40), !dbg !8328
  %decl_minimal = bitcast %union.tree_node* %call117 to %struct.tree_decl_minimal*, !dbg !8328
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !8328
  %41 = load i32, i32* %locus, align 8, !dbg !8328
  %cmp118 = icmp ule i32 %41, 1, !dbg !8328
  br i1 %cmp118, label %if.then123, label %lor.lhs.false120, !dbg !8329

lor.lhs.false120:                                 ; preds = %land.lhs.true116, %land.lhs.true112, %land.lhs.true108
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8330
  %call121 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %42), !dbg !8331
  %tobool122 = icmp ne %union.tree_node* %call121, null, !dbg !8331
  br i1 %tobool122, label %if.end, label %if.then123, !dbg !8332

if.then123:                                       ; preds = %lor.lhs.false120, %land.lhs.true116
  store i8 1, i8* %retval, align 1, !dbg !8333
  br label %return, !dbg !8333

if.end:                                           ; preds = %lor.lhs.false120, %lor.lhs.false99, %land.lhs.true56, %if.then53
  br label %if.end134, !dbg !8334

if.else124:                                       ; preds = %lor.lhs.false49
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8335
  %call125 = call i32 @gimple_code(%union.gimple_statement_d* %43), !dbg !8337
  %cmp126 = icmp eq i32 %call125, 1, !dbg !8338
  br i1 %cmp126, label %if.then132, label %lor.lhs.false128, !dbg !8339

lor.lhs.false128:                                 ; preds = %if.else124
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8340
  %call129 = call i32 @gimple_code(%union.gimple_statement_d* %44), !dbg !8341
  %cmp130 = icmp eq i32 %call129, 5, !dbg !8342
  br i1 %cmp130, label %if.then132, label %if.end133, !dbg !8343

if.then132:                                       ; preds = %lor.lhs.false128, %if.else124
  store i8 1, i8* %retval, align 1, !dbg !8344
  br label %return, !dbg !8344

if.end133:                                        ; preds = %lor.lhs.false128
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.end
  br label %if.end135

if.end135:                                        ; preds = %if.end134
  store i8 0, i8* %retval, align 1, !dbg !8345
  br label %return, !dbg !8345

return:                                           ; preds = %if.end135, %if.then132, %if.then123, %if.then
  %45 = load i8, i8* %retval, align 1, !dbg !8346
  ret i8 %45, !dbg !8346
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !8347 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8348, metadata !DIExpression()), !dbg !8349
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8350
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !8351
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !8352
  ret %union.tree_node** %result, !dbg !8353
}

; Function Attrs: noinline nounwind uwtable
define internal void @prop_set_simulate_again(%union.gimple_statement_d* %s, i8 zeroext %visit_p) #0 !dbg !8354 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %visit_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8357, metadata !DIExpression()), !dbg !8358
  store i8 %visit_p, i8* %visit_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %visit_p.addr, metadata !8359, metadata !DIExpression()), !dbg !8360
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8361
  %1 = load i8, i8* %visit_p.addr, align 1, !dbg !8362
  call void @gimple_set_visited(%union.gimple_statement_d* %0, i8 zeroext %1), !dbg !8363
  ret void, !dbg !8364
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !8365 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8366, metadata !DIExpression()), !dbg !8367
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8368
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8369
  %cmp = icmp eq i32 %call, 8, !dbg !8370
  %conv = zext i1 %cmp to i32, !dbg !8370
  %conv1 = trunc i32 %conv to i8, !dbg !8369
  ret i8 %conv1, !dbg !8371
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !8372 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8373, metadata !DIExpression()), !dbg !8374
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !8375, metadata !DIExpression()), !dbg !8376
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8377
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !8378
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !8376
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !8379
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8379
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8379
  %bf.load = load i64, i64* %2, align 8, !dbg !8379
  %bf.clear = and i64 %bf.load, 65535, !dbg !8379
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8379
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !8381
  br i1 %cmp, label %if.then, label %if.end, !dbg !8382

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !8383
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !8383
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8383
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8383
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8383
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !8384
  br label %return, !dbg !8384

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8385
  br label %return, !dbg !8385

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8386
  ret %union.tree_node* %5, !dbg !8386
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_visited(%union.gimple_statement_d* %stmt, i8 zeroext %visited_p) #0 !dbg !8387 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %visited_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8388, metadata !DIExpression()), !dbg !8389
  store i8 %visited_p, i8* %visited_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %visited_p.addr, metadata !8390, metadata !DIExpression()), !dbg !8391
  %0 = load i8, i8* %visited_p.addr, align 1, !dbg !8392
  %conv = zext i8 %0 to i32, !dbg !8393
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8394
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !8395
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8396
  %bf.load = load i32, i32* %2, align 8, !dbg !8397
  %bf.value = and i32 %conv, 1, !dbg !8397
  %bf.shl = shl i32 %bf.value, 9, !dbg !8397
  %bf.clear = and i32 %bf.load, -513, !dbg !8397
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !8397
  store i32 %bf.set, i32* %2, align 8, !dbg !8397
  ret void, !dbg !8398
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vrp_visit_assignment_or_call(%union.gimple_statement_d* %stmt, %union.tree_node** %output_p) #0 !dbg !8399 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %output_p.addr = alloca %union.tree_node**, align 8
  %def = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %code = alloca i32, align 4
  %new_vr = alloca %struct.value_range_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8402, metadata !DIExpression()), !dbg !8403
  store %union.tree_node** %output_p, %union.tree_node*** %output_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %output_p.addr, metadata !8404, metadata !DIExpression()), !dbg !8405
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !8406, metadata !DIExpression()), !dbg !8407
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !8408, metadata !DIExpression()), !dbg !8409
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !8410, metadata !DIExpression()), !dbg !8411
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8412, metadata !DIExpression()), !dbg !8413
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8414
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8415
  store i32 %call, i32* %code, align 4, !dbg !8413
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8416
  %call1 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %1), !dbg !8417
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !8418
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8419
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8419
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !8419
  %bf.load = load i64, i64* %3, align 8, !dbg !8419
  %bf.clear = and i64 %bf.load, 65535, !dbg !8419
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8419
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !8421
  br i1 %cmp, label %land.lhs.true, label %if.end65, !dbg !8422

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8423
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !8423
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8423
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8423
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !8423
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !8423
  %bf.load3 = load i64, i64* %6, align 8, !dbg !8423
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !8423
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !8423
  %cmp6 = icmp eq i32 %bf.cast5, 6, !dbg !8423
  br i1 %cmp6, label %land.lhs.true22, label %lor.lhs.false, !dbg !8423

lor.lhs.false:                                    ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8423
  %common7 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !8423
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !8423
  %8 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !8423
  %base9 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !8423
  %9 = bitcast %struct.tree_base* %base9 to i64*, !dbg !8423
  %bf.load10 = load i64, i64* %9, align 8, !dbg !8423
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !8423
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !8423
  %cmp13 = icmp eq i32 %bf.cast12, 7, !dbg !8423
  br i1 %cmp13, label %land.lhs.true22, label %lor.lhs.false14, !dbg !8423

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8423
  %common15 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !8423
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !8423
  %11 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !8423
  %base17 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !8423
  %12 = bitcast %struct.tree_base* %base17 to i64*, !dbg !8423
  %bf.load18 = load i64, i64* %12, align 8, !dbg !8423
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !8423
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !8423
  %cmp21 = icmp eq i32 %bf.cast20, 8, !dbg !8423
  br i1 %cmp21, label %land.lhs.true22, label %lor.lhs.false31, !dbg !8424

land.lhs.true22:                                  ; preds = %lor.lhs.false14, %lor.lhs.false, %land.lhs.true
  %13 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8425
  %common23 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !8425
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !8425
  %14 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !8425
  %type25 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !8425
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type25, i32 0, i32 13, !dbg !8425
  %15 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !8425
  %tobool = icmp ne %union.tree_node* %15, null, !dbg !8425
  br i1 %tobool, label %land.lhs.true26, label %lor.lhs.false31, !dbg !8426

land.lhs.true26:                                  ; preds = %land.lhs.true22
  %16 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8427
  %common27 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !8427
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !8427
  %17 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !8427
  %type29 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !8427
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 14, !dbg !8427
  %18 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !8427
  %tobool30 = icmp ne %union.tree_node* %18, null, !dbg !8427
  br i1 %tobool30, label %if.then, label %lor.lhs.false31, !dbg !8428

lor.lhs.false31:                                  ; preds = %land.lhs.true26, %land.lhs.true22, %lor.lhs.false14
  %19 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8429
  %common32 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !8429
  %type33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2, !dbg !8429
  %20 = load %union.tree_node*, %union.tree_node** %type33, align 8, !dbg !8429
  %base34 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !8429
  %21 = bitcast %struct.tree_base* %base34 to i64*, !dbg !8429
  %bf.load35 = load i64, i64* %21, align 8, !dbg !8429
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !8429
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !8429
  %cmp38 = icmp eq i32 %bf.cast37, 10, !dbg !8429
  br i1 %cmp38, label %if.then, label %lor.lhs.false39, !dbg !8429

lor.lhs.false39:                                  ; preds = %lor.lhs.false31
  %22 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8429
  %common40 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !8429
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !8429
  %23 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !8429
  %base42 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !8429
  %24 = bitcast %struct.tree_base* %base42 to i64*, !dbg !8429
  %bf.load43 = load i64, i64* %24, align 8, !dbg !8429
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !8429
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !8429
  %cmp46 = icmp eq i32 %bf.cast45, 12, !dbg !8429
  br i1 %cmp46, label %if.then, label %if.end65, !dbg !8430

if.then:                                          ; preds = %lor.lhs.false39, %lor.lhs.false31, %land.lhs.true26
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %new_vr, metadata !8431, metadata !DIExpression()), !dbg !8433
  %25 = bitcast %struct.value_range_d* %new_vr to i8*, !dbg !8433
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 32, i1 false), !dbg !8433
  %26 = load i32, i32* %code, align 4, !dbg !8434
  %cmp47 = icmp eq i32 %26, 8, !dbg !8436
  br i1 %cmp47, label %if.then48, label %if.else, !dbg !8437

if.then48:                                        ; preds = %if.then
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8438
  call void @extract_range_basic(%struct.value_range_d* %new_vr, %union.gimple_statement_d* %27), !dbg !8439
  br label %if.end, !dbg !8439

if.else:                                          ; preds = %if.then
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8440
  call void @extract_range_from_assignment(%struct.value_range_d* %new_vr, %union.gimple_statement_d* %28), !dbg !8441
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then48
  %29 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8442
  %call49 = call zeroext i8 @update_value_range(%union.tree_node* %29, %struct.value_range_d* %new_vr), !dbg !8444
  %tobool50 = icmp ne i8 %call49, 0, !dbg !8444
  br i1 %tobool50, label %if.then51, label %if.end64, !dbg !8445

if.then51:                                        ; preds = %if.end
  %30 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8446
  %31 = load %union.tree_node**, %union.tree_node*** %output_p.addr, align 8, !dbg !8448
  store %union.tree_node* %30, %union.tree_node** %31, align 8, !dbg !8449
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8450
  %tobool52 = icmp ne %struct._IO_FILE* %32, null, !dbg !8450
  br i1 %tobool52, label %land.lhs.true53, label %if.end59, !dbg !8452

land.lhs.true53:                                  ; preds = %if.then51
  %33 = load i32, i32* @dump_flags, align 4, !dbg !8453
  %and = and i32 %33, 8, !dbg !8454
  %tobool54 = icmp ne i32 %and, 0, !dbg !8454
  br i1 %tobool54, label %if.then55, label %if.end59, !dbg !8455

if.then55:                                        ; preds = %land.lhs.true53
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8456
  %call56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.38, i64 0, i64 0)), !dbg !8458
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8459
  %36 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8460
  call void @print_generic_expr(%struct._IO_FILE* %35, %union.tree_node* %36, i32 0), !dbg !8461
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8462
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0)), !dbg !8463
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8464
  call void @dump_value_range(%struct._IO_FILE* %38, %struct.value_range_d* %new_vr), !dbg !8465
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8466
  %call58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i64 0, i64 0)), !dbg !8467
  br label %if.end59, !dbg !8468

if.end59:                                         ; preds = %if.then55, %land.lhs.true53, %if.then51
  %type60 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %new_vr, i32 0, i32 0, !dbg !8469
  %40 = load i32, i32* %type60, align 8, !dbg !8469
  %cmp61 = icmp eq i32 %40, 3, !dbg !8471
  br i1 %cmp61, label %if.then62, label %if.end63, !dbg !8472

if.then62:                                        ; preds = %if.end59
  store i32 2, i32* %retval, align 4, !dbg !8473
  br label %return, !dbg !8473

if.end63:                                         ; preds = %if.end59
  store i32 1, i32* %retval, align 4, !dbg !8474
  br label %return, !dbg !8474

if.end64:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !8475
  br label %return, !dbg !8475

if.end65:                                         ; preds = %lor.lhs.false39, %entry
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8476
  %call66 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %41, i32 2), !dbg !8476
  store %union.tree_node* %call66, %union.tree_node** %def, align 8, !dbg !8476
  br label %for.cond, !dbg !8476

for.cond:                                         ; preds = %for.inc, %if.end65
  %call67 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !8478
  %tobool68 = icmp ne i8 %call67, 0, !dbg !8478
  %lnot = xor i1 %tobool68, true, !dbg !8478
  br i1 %lnot, label %for.body, label %for.end, !dbg !8476

for.body:                                         ; preds = %for.cond
  %42 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8480
  %call69 = call %struct.value_range_d* @get_value_range(%union.tree_node* %42), !dbg !8481
  call void @set_value_range_to_varying(%struct.value_range_d* %call69), !dbg !8482
  br label %for.inc, !dbg !8482

for.inc:                                          ; preds = %for.body
  %call70 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !8478
  store %union.tree_node* %call70, %union.tree_node** %def, align 8, !dbg !8478
  br label %for.cond, !dbg !8478, !llvm.loop !8483

for.end:                                          ; preds = %for.cond
  store i32 2, i32* %retval, align 4, !dbg !8485
  br label %return, !dbg !8485

return:                                           ; preds = %for.end, %if.end64, %if.end63, %if.then62
  %43 = load i32, i32* %retval, align 4, !dbg !8486
  ret i32 %43, !dbg !8486
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vrp_visit_cond_stmt(%union.gimple_statement_d* %stmt, %struct.edge_def** %taken_edge_p) #0 !dbg !8487 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %taken_edge_p.addr = alloca %struct.edge_def**, align 8
  %val = alloca %union.tree_node*, align 8
  %sop = alloca i8, align 1
  %use = alloca %union.tree_node*, align 8
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8490, metadata !DIExpression()), !dbg !8491
  store %struct.edge_def** %taken_edge_p, %struct.edge_def*** %taken_edge_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %taken_edge_p.addr, metadata !8492, metadata !DIExpression()), !dbg !8493
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !8494, metadata !DIExpression()), !dbg !8495
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !8496, metadata !DIExpression()), !dbg !8497
  %0 = load %struct.edge_def**, %struct.edge_def*** %taken_edge_p.addr, align 8, !dbg !8498
  store %struct.edge_def* null, %struct.edge_def** %0, align 8, !dbg !8499
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8500
  %tobool = icmp ne %struct._IO_FILE* %1, null, !dbg !8500
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8502

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @dump_flags, align 4, !dbg !8503
  %and = and i32 %2, 8, !dbg !8504
  %tobool1 = icmp ne i32 %and, 0, !dbg !8504
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8505

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !8506, metadata !DIExpression()), !dbg !8508
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %i, metadata !8509, metadata !DIExpression()), !dbg !8510
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8511
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.39, i64 0, i64 0)), !dbg !8512
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8513
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8514
  call void @print_gimple_stmt(%struct._IO_FILE* %4, %union.gimple_statement_d* %5, i32 0, i32 0), !dbg !8515
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8516
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.40, i64 0, i64 0)), !dbg !8517
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8518
  %call3 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %i, %union.gimple_statement_d* %7, i32 1), !dbg !8518
  store %union.tree_node* %call3, %union.tree_node** %use, align 8, !dbg !8518
  br label %for.cond, !dbg !8518

for.cond:                                         ; preds = %for.inc, %if.then
  %call4 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %i), !dbg !8520
  %tobool5 = icmp ne i8 %call4, 0, !dbg !8520
  %lnot = xor i1 %tobool5, true, !dbg !8520
  br i1 %lnot, label %for.body, label %for.end, !dbg !8518

for.body:                                         ; preds = %for.cond
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8522
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)), !dbg !8524
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8525
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8526
  call void @print_generic_expr(%struct._IO_FILE* %9, %union.tree_node* %10, i32 0), !dbg !8527
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8528
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0)), !dbg !8529
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8530
  %13 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !8531
  %14 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8532
  %ssa_name = bitcast %union.tree_node* %14 to %struct.tree_ssa_name*, !dbg !8532
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !8532
  %15 = load i32, i32* %version, align 8, !dbg !8532
  %idxprom = zext i32 %15 to i64, !dbg !8531
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %13, i64 %idxprom, !dbg !8531
  %16 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx, align 8, !dbg !8531
  call void @dump_value_range(%struct._IO_FILE* %12, %struct.value_range_d* %16), !dbg !8533
  br label %for.inc, !dbg !8534

for.inc:                                          ; preds = %for.body
  %call8 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %i), !dbg !8520
  store %union.tree_node* %call8, %union.tree_node** %use, align 8, !dbg !8520
  br label %for.cond, !dbg !8520, !llvm.loop !8535

for.end:                                          ; preds = %for.cond
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8537
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !8538
  br label %if.end, !dbg !8539

if.end:                                           ; preds = %for.end, %land.lhs.true, %entry
  store i8 0, i8* %sop, align 1, !dbg !8540
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8541
  %call10 = call i32 @gimple_cond_code(%union.gimple_statement_d* %18), !dbg !8542
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8543
  %call11 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %19), !dbg !8544
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8545
  %call12 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %20), !dbg !8546
  %call13 = call %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops(i32 %call10, %union.tree_node* %call11, %union.tree_node* %call12, i8 zeroext 0, i8* %sop, i8* null), !dbg !8547
  store %union.tree_node* %call13, %union.tree_node** %val, align 8, !dbg !8548
  %21 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8549
  %tobool14 = icmp ne %union.tree_node* %21, null, !dbg !8549
  br i1 %tobool14, label %if.then15, label %if.end28, !dbg !8551

if.then15:                                        ; preds = %if.end
  %22 = load i8, i8* %sop, align 1, !dbg !8552
  %tobool16 = icmp ne i8 %22, 0, !dbg !8552
  br i1 %tobool16, label %if.else, label %if.then17, !dbg !8555

if.then17:                                        ; preds = %if.then15
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8556
  %call18 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %23), !dbg !8557
  %24 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8558
  %call19 = call %struct.edge_def* @find_taken_edge(%struct.basic_block_def* %call18, %union.tree_node* %24), !dbg !8559
  %25 = load %struct.edge_def**, %struct.edge_def*** %taken_edge_p.addr, align 8, !dbg !8560
  store %struct.edge_def* %call19, %struct.edge_def** %25, align 8, !dbg !8561
  br label %if.end27, !dbg !8562

if.else:                                          ; preds = %if.then15
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8563
  %tobool20 = icmp ne %struct._IO_FILE* %26, null, !dbg !8563
  br i1 %tobool20, label %land.lhs.true21, label %if.end26, !dbg !8566

land.lhs.true21:                                  ; preds = %if.else
  %27 = load i32, i32* @dump_flags, align 4, !dbg !8567
  %and22 = and i32 %27, 8, !dbg !8568
  %tobool23 = icmp ne i32 %and22, 0, !dbg !8568
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !8569

if.then24:                                        ; preds = %land.lhs.true21
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8570
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.41, i64 0, i64 0)), !dbg !8571
  br label %if.end26, !dbg !8571

if.end26:                                         ; preds = %if.then24, %land.lhs.true21, %if.else
  store %union.tree_node* null, %union.tree_node** %val, align 8, !dbg !8572
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then17
  br label %if.end28, !dbg !8573

if.end28:                                         ; preds = %if.end27, %if.end
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8574
  %tobool29 = icmp ne %struct._IO_FILE* %29, null, !dbg !8574
  br i1 %tobool29, label %land.lhs.true30, label %if.end39, !dbg !8576

land.lhs.true30:                                  ; preds = %if.end28
  %30 = load i32, i32* @dump_flags, align 4, !dbg !8577
  %and31 = and i32 %30, 8, !dbg !8578
  %tobool32 = icmp ne i32 %and31, 0, !dbg !8578
  br i1 %tobool32, label %if.then33, label %if.end39, !dbg !8579

if.then33:                                        ; preds = %land.lhs.true30
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8580
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.42, i64 0, i64 0)), !dbg !8582
  %32 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8583
  %cmp = icmp eq %union.tree_node* %32, null, !dbg !8585
  br i1 %cmp, label %if.then35, label %if.else37, !dbg !8586

if.then35:                                        ; preds = %if.then33
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8587
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.43, i64 0, i64 0)), !dbg !8588
  br label %if.end38, !dbg !8588

if.else37:                                        ; preds = %if.then33
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8589
  %35 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8590
  call void @print_generic_stmt(%struct._IO_FILE* %34, %union.tree_node* %35, i32 0), !dbg !8591
  br label %if.end38

if.end38:                                         ; preds = %if.else37, %if.then35
  br label %if.end39, !dbg !8592

if.end39:                                         ; preds = %if.end38, %land.lhs.true30, %if.end28
  %36 = load %struct.edge_def**, %struct.edge_def*** %taken_edge_p.addr, align 8, !dbg !8593
  %37 = load %struct.edge_def*, %struct.edge_def** %36, align 8, !dbg !8594
  %tobool40 = icmp ne %struct.edge_def* %37, null, !dbg !8595
  %38 = zext i1 %tobool40 to i64, !dbg !8595
  %cond = select i1 %tobool40, i32 1, i32 2, !dbg !8595
  ret i32 %cond, !dbg !8596
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vrp_visit_switch_stmt(%union.gimple_statement_d* %stmt, %struct.edge_def** %taken_edge_p) #0 !dbg !8597 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %taken_edge_p.addr = alloca %struct.edge_def**, align 8
  %op = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %vr = alloca %struct.value_range_d*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %take_default = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8598, metadata !DIExpression()), !dbg !8599
  store %struct.edge_def** %taken_edge_p, %struct.edge_def*** %taken_edge_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %taken_edge_p.addr, metadata !8600, metadata !DIExpression()), !dbg !8601
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !8602, metadata !DIExpression()), !dbg !8603
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !8604, metadata !DIExpression()), !dbg !8605
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !8606, metadata !DIExpression()), !dbg !8607
  call void @llvm.dbg.declare(metadata i64* %i, metadata !8608, metadata !DIExpression()), !dbg !8609
  store i64 0, i64* %i, align 8, !dbg !8609
  call void @llvm.dbg.declare(metadata i64* %j, metadata !8610, metadata !DIExpression()), !dbg !8611
  store i64 0, i64* %j, align 8, !dbg !8611
  call void @llvm.dbg.declare(metadata i8* %take_default, metadata !8612, metadata !DIExpression()), !dbg !8613
  %0 = load %struct.edge_def**, %struct.edge_def*** %taken_edge_p.addr, align 8, !dbg !8614
  store %struct.edge_def* null, %struct.edge_def** %0, align 8, !dbg !8615
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8616
  %call = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %1), !dbg !8617
  store %union.tree_node* %call, %union.tree_node** %op, align 8, !dbg !8618
  %2 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8619
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8619
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !8619
  %bf.load = load i64, i64* %3, align 8, !dbg !8619
  %bf.clear = and i64 %bf.load, 65535, !dbg !8619
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8619
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !8621
  br i1 %cmp, label %if.then, label %if.end, !dbg !8622

if.then:                                          ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !8623
  br label %return, !dbg !8623

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8624
  %call1 = call %struct.value_range_d* @get_value_range(%union.tree_node* %4), !dbg !8625
  store %struct.value_range_d* %call1, %struct.value_range_d** %vr, align 8, !dbg !8626
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8627
  %tobool = icmp ne %struct._IO_FILE* %5, null, !dbg !8627
  br i1 %tobool, label %land.lhs.true, label %if.end7, !dbg !8629

land.lhs.true:                                    ; preds = %if.end
  %6 = load i32, i32* @dump_flags, align 4, !dbg !8630
  %and = and i32 %6, 8, !dbg !8631
  %tobool2 = icmp ne i32 %and, 0, !dbg !8631
  br i1 %tobool2, label %if.then3, label %if.end7, !dbg !8632

if.then3:                                         ; preds = %land.lhs.true
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8633
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.44, i64 0, i64 0)), !dbg !8635
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8636
  %9 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8637
  call void @print_generic_expr(%struct._IO_FILE* %8, %union.tree_node* %9, i32 0), !dbg !8638
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8639
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.45, i64 0, i64 0)), !dbg !8640
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8641
  %12 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !8642
  call void @dump_value_range(%struct._IO_FILE* %11, %struct.value_range_d* %12), !dbg !8643
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8644
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !8645
  br label %if.end7, !dbg !8646

if.end7:                                          ; preds = %if.then3, %land.lhs.true, %if.end
  %14 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !8647
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %14, i32 0, i32 0, !dbg !8649
  %15 = load i32, i32* %type, align 8, !dbg !8649
  %cmp8 = icmp ne i32 %15, 1, !dbg !8650
  br i1 %cmp8, label %if.then11, label %lor.lhs.false, !dbg !8651

lor.lhs.false:                                    ; preds = %if.end7
  %16 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !8652
  %call9 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %16), !dbg !8653
  %conv = zext i8 %call9 to i32, !dbg !8653
  %tobool10 = icmp ne i32 %conv, 0, !dbg !8653
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !8654

if.then11:                                        ; preds = %lor.lhs.false, %if.end7
  store i32 2, i32* %retval, align 4, !dbg !8655
  br label %return, !dbg !8655

if.end12:                                         ; preds = %lor.lhs.false
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8656
  %18 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !8657
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %18, i32 0, i32 1, !dbg !8658
  %19 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !8658
  %20 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !8659
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %20, i32 0, i32 2, !dbg !8660
  %21 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !8660
  %call13 = call zeroext i8 @find_case_label_range(%union.gimple_statement_d* %17, %union.tree_node* %19, %union.tree_node* %21, i64* %i, i64* %j), !dbg !8661
  %tobool14 = icmp ne i8 %call13, 0, !dbg !8662
  %lnot = xor i1 %tobool14, true, !dbg !8662
  %lnot.ext = zext i1 %lnot to i32, !dbg !8662
  %conv15 = trunc i32 %lnot.ext to i8, !dbg !8662
  store i8 %conv15, i8* %take_default, align 1, !dbg !8663
  %22 = load i64, i64* %j, align 8, !dbg !8664
  %23 = load i64, i64* %i, align 8, !dbg !8666
  %cmp16 = icmp ult i64 %22, %23, !dbg !8667
  br i1 %cmp16, label %if.then18, label %if.else, !dbg !8668

if.then18:                                        ; preds = %if.end12
  %24 = load i8, i8* %take_default, align 1, !dbg !8669
  %tobool19 = icmp ne i8 %24, 0, !dbg !8669
  br i1 %tobool19, label %cond.false, label %cond.true, !dbg !8669

cond.true:                                        ; preds = %if.then18
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 6035, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !8669
  br label %cond.end, !dbg !8669

cond.false:                                       ; preds = %if.then18
  br label %cond.end, !dbg !8669

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8669
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8671
  %call20 = call %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %25), !dbg !8672
  store %union.tree_node* %call20, %union.tree_node** %val, align 8, !dbg !8673
  br label %if.end63, !dbg !8674

if.else:                                          ; preds = %if.end12
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8675
  %27 = load i64, i64* %i, align 8, !dbg !8677
  %conv21 = trunc i64 %27 to i32, !dbg !8677
  %call22 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %26, i32 %conv21), !dbg !8678
  store %union.tree_node* %call22, %union.tree_node** %val, align 8, !dbg !8679
  %28 = load i8, i8* %take_default, align 1, !dbg !8680
  %conv23 = zext i8 %28 to i32, !dbg !8680
  %tobool24 = icmp ne i32 %conv23, 0, !dbg !8680
  br i1 %tobool24, label %land.lhs.true25, label %if.end40, !dbg !8682

land.lhs.true25:                                  ; preds = %if.else
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8683
  %call26 = call %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %29), !dbg !8683
  %exp = bitcast %union.tree_node* %call26 to %struct.tree_exp*, !dbg !8683
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8683
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !8683
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8683
  %31 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8684
  %exp27 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !8684
  %operands28 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp27, i32 0, i32 3, !dbg !8684
  %arrayidx29 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands28, i64 0, i64 2, !dbg !8684
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx29, align 8, !dbg !8684
  %cmp30 = icmp ne %union.tree_node* %30, %32, !dbg !8685
  br i1 %cmp30, label %if.then32, label %if.end40, !dbg !8686

if.then32:                                        ; preds = %land.lhs.true25
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8687
  %tobool33 = icmp ne %struct._IO_FILE* %33, null, !dbg !8687
  br i1 %tobool33, label %land.lhs.true34, label %if.end39, !dbg !8690

land.lhs.true34:                                  ; preds = %if.then32
  %34 = load i32, i32* @dump_flags, align 4, !dbg !8691
  %and35 = and i32 %34, 8, !dbg !8692
  %tobool36 = icmp ne i32 %and35, 0, !dbg !8692
  br i1 %tobool36, label %if.then37, label %if.end39, !dbg !8693

if.then37:                                        ; preds = %land.lhs.true34
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8694
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.46, i64 0, i64 0)), !dbg !8695
  br label %if.end39, !dbg !8695

if.end39:                                         ; preds = %if.then37, %land.lhs.true34, %if.then32
  store i32 2, i32* %retval, align 4, !dbg !8696
  br label %return, !dbg !8696

if.end40:                                         ; preds = %land.lhs.true25, %if.else
  %36 = load i64, i64* %i, align 8, !dbg !8697
  %inc = add i64 %36, 1, !dbg !8697
  store i64 %inc, i64* %i, align 8, !dbg !8697
  br label %for.cond, !dbg !8697

for.cond:                                         ; preds = %for.inc, %if.end40
  %37 = load i64, i64* %i, align 8, !dbg !8699
  %38 = load i64, i64* %j, align 8, !dbg !8701
  %cmp41 = icmp ule i64 %37, %38, !dbg !8702
  br i1 %cmp41, label %for.body, label %for.end, !dbg !8703

for.body:                                         ; preds = %for.cond
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8704
  %40 = load i64, i64* %i, align 8, !dbg !8704
  %conv43 = trunc i64 %40 to i32, !dbg !8704
  %call44 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %39, i32 %conv43), !dbg !8704
  %exp45 = bitcast %union.tree_node* %call44 to %struct.tree_exp*, !dbg !8704
  %operands46 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp45, i32 0, i32 3, !dbg !8704
  %arrayidx47 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands46, i64 0, i64 2, !dbg !8704
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx47, align 8, !dbg !8704
  %42 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8707
  %exp48 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !8707
  %operands49 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp48, i32 0, i32 3, !dbg !8707
  %arrayidx50 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands49, i64 0, i64 2, !dbg !8707
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !8707
  %cmp51 = icmp ne %union.tree_node* %41, %43, !dbg !8708
  br i1 %cmp51, label %if.then53, label %if.end61, !dbg !8709

if.then53:                                        ; preds = %for.body
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8710
  %tobool54 = icmp ne %struct._IO_FILE* %44, null, !dbg !8710
  br i1 %tobool54, label %land.lhs.true55, label %if.end60, !dbg !8713

land.lhs.true55:                                  ; preds = %if.then53
  %45 = load i32, i32* @dump_flags, align 4, !dbg !8714
  %and56 = and i32 %45, 8, !dbg !8715
  %tobool57 = icmp ne i32 %and56, 0, !dbg !8715
  br i1 %tobool57, label %if.then58, label %if.end60, !dbg !8716

if.then58:                                        ; preds = %land.lhs.true55
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8717
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.46, i64 0, i64 0)), !dbg !8718
  br label %if.end60, !dbg !8718

if.end60:                                         ; preds = %if.then58, %land.lhs.true55, %if.then53
  store i32 2, i32* %retval, align 4, !dbg !8719
  br label %return, !dbg !8719

if.end61:                                         ; preds = %for.body
  br label %for.inc, !dbg !8720

for.inc:                                          ; preds = %if.end61
  %47 = load i64, i64* %i, align 8, !dbg !8721
  %inc62 = add i64 %47, 1, !dbg !8721
  store i64 %inc62, i64* %i, align 8, !dbg !8721
  br label %for.cond, !dbg !8722, !llvm.loop !8723

for.end:                                          ; preds = %for.cond
  br label %if.end63

if.end63:                                         ; preds = %for.end, %cond.end
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8725
  %call64 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %48), !dbg !8726
  %49 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8727
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %49, i64 0, !dbg !8727
  %50 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8727
  %exp65 = bitcast %union.tree_node* %50 to %struct.tree_exp*, !dbg !8727
  %operands66 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp65, i32 0, i32 3, !dbg !8727
  %arrayidx67 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands66, i64 0, i64 2, !dbg !8727
  %51 = load %union.tree_node*, %union.tree_node** %arrayidx67, align 8, !dbg !8727
  %call68 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %51), !dbg !8727
  %call69 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %call64, %struct.basic_block_def* %call68), !dbg !8728
  %52 = load %struct.edge_def**, %struct.edge_def*** %taken_edge_p.addr, align 8, !dbg !8729
  store %struct.edge_def* %call69, %struct.edge_def** %52, align 8, !dbg !8730
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8731
  %tobool70 = icmp ne %struct._IO_FILE* %53, null, !dbg !8731
  br i1 %tobool70, label %land.lhs.true71, label %if.end79, !dbg !8733

land.lhs.true71:                                  ; preds = %if.end63
  %54 = load i32, i32* @dump_flags, align 4, !dbg !8734
  %and72 = and i32 %54, 8, !dbg !8735
  %tobool73 = icmp ne i32 %and72, 0, !dbg !8735
  br i1 %tobool73, label %if.then74, label %if.end79, !dbg !8736

if.then74:                                        ; preds = %land.lhs.true71
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8737
  %call75 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.47, i64 0, i64 0)), !dbg !8739
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8740
  %57 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8741
  %exp76 = bitcast %union.tree_node* %57 to %struct.tree_exp*, !dbg !8741
  %operands77 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp76, i32 0, i32 3, !dbg !8741
  %arrayidx78 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands77, i64 0, i64 2, !dbg !8741
  %58 = load %union.tree_node*, %union.tree_node** %arrayidx78, align 8, !dbg !8741
  call void @print_generic_stmt(%struct._IO_FILE* %56, %union.tree_node* %58, i32 0), !dbg !8742
  br label %if.end79, !dbg !8743

if.end79:                                         ; preds = %if.then74, %land.lhs.true71, %if.end63
  store i32 1, i32* %retval, align 4, !dbg !8744
  br label %return, !dbg !8744

return:                                           ; preds = %if.end79, %if.end60, %if.end39, %if.then11, %if.then
  %59 = load i32, i32* %retval, align 4, !dbg !8745
  ret i32 %59, !dbg !8745
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @extract_range_basic(%struct.value_range_d* %vr, %union.gimple_statement_d* %stmt) #0 !dbg !8746 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %sop = alloca i8, align 1
  %type = alloca %union.tree_node*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !8749, metadata !DIExpression()), !dbg !8750
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8751, metadata !DIExpression()), !dbg !8752
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !8753, metadata !DIExpression()), !dbg !8754
  store i8 0, i8* %sop, align 1, !dbg !8754
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8755, metadata !DIExpression()), !dbg !8756
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8757
  %call = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %0), !dbg !8758
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !8756
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8759
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8759
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8759
  %bf.load = load i64, i64* %2, align 8, !dbg !8759
  %bf.clear = and i64 %bf.load, 65535, !dbg !8759
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8759
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !8759
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !8759

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8759
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8759
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8759
  %bf.load2 = load i64, i64* %4, align 8, !dbg !8759
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !8759
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8759
  %cmp5 = icmp eq i32 %bf.cast4, 7, !dbg !8759
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false6, !dbg !8759

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8759
  %base7 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !8759
  %6 = bitcast %struct.tree_base* %base7 to i64*, !dbg !8759
  %bf.load8 = load i64, i64* %6, align 8, !dbg !8759
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !8759
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !8759
  %cmp11 = icmp eq i32 %bf.cast10, 8, !dbg !8759
  br i1 %cmp11, label %land.lhs.true, label %if.else, !dbg !8761

land.lhs.true:                                    ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8762
  %call12 = call zeroext i8 @gimple_stmt_nonnegative_warnv_p(%union.gimple_statement_d* %7, i8* %sop), !dbg !8763
  %conv = zext i8 %call12 to i32, !dbg !8763
  %tobool = icmp ne i32 %conv, 0, !dbg !8763
  br i1 %tobool, label %if.then, label %if.else, !dbg !8764

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8765
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8766
  %10 = load i8, i8* %sop, align 1, !dbg !8767
  %conv13 = zext i8 %10 to i32, !dbg !8767
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !8767
  br i1 %tobool14, label %lor.end, label %lor.rhs, !dbg !8768

lor.rhs:                                          ; preds = %if.then
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8769
  %call15 = call zeroext i8 @stmt_overflow_infinity(%union.gimple_statement_d* %11), !dbg !8770
  %conv16 = zext i8 %call15 to i32, !dbg !8770
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !8768
  br label %lor.end, !dbg !8768

lor.end:                                          ; preds = %lor.rhs, %if.then
  %12 = phi i1 [ true, %if.then ], [ %tobool17, %lor.rhs ]
  %lor.ext = zext i1 %12 to i32, !dbg !8768
  %conv18 = trunc i32 %lor.ext to i8, !dbg !8767
  call void @set_value_range_to_nonnegative(%struct.value_range_d* %8, %union.tree_node* %9, i8 zeroext %conv18), !dbg !8771
  br label %if.end26, !dbg !8771

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false6
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8772
  %call19 = call zeroext i8 @vrp_stmt_computes_nonzero(%union.gimple_statement_d* %13, i8* %sop), !dbg !8774
  %conv20 = zext i8 %call19 to i32, !dbg !8774
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !8774
  br i1 %tobool21, label %land.lhs.true22, label %if.else25, !dbg !8775

land.lhs.true22:                                  ; preds = %if.else
  %14 = load i8, i8* %sop, align 1, !dbg !8776
  %tobool23 = icmp ne i8 %14, 0, !dbg !8776
  br i1 %tobool23, label %if.else25, label %if.then24, !dbg !8777

if.then24:                                        ; preds = %land.lhs.true22
  %15 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8778
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8779
  call void @set_value_range_to_nonnull(%struct.value_range_d* %15, %union.tree_node* %16), !dbg !8780
  br label %if.end, !dbg !8780

if.else25:                                        ; preds = %land.lhs.true22, %if.else
  %17 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8781
  call void @set_value_range_to_varying(%struct.value_range_d* %17), !dbg !8782
  br label %if.end

if.end:                                           ; preds = %if.else25, %if.then24
  br label %if.end26

if.end26:                                         ; preds = %if.end, %lor.end
  ret void, !dbg !8783
}

; Function Attrs: noinline nounwind uwtable
define internal void @extract_range_from_assignment(%struct.value_range_d* %vr, %union.gimple_statement_d* %stmt) #0 !dbg !8784 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !8785, metadata !DIExpression()), !dbg !8786
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8787, metadata !DIExpression()), !dbg !8788
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8789, metadata !DIExpression()), !dbg !8790
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8791
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !8792
  store i32 %call, i32* %code, align 4, !dbg !8790
  %1 = load i32, i32* %code, align 4, !dbg !8793
  %cmp = icmp eq i32 %1, 148, !dbg !8795
  br i1 %cmp, label %if.then, label %if.else, !dbg !8796

if.then:                                          ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8797
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8798
  %call1 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3), !dbg !8799
  call void @extract_range_from_assert(%struct.value_range_d* %2, %union.tree_node* %call1), !dbg !8800
  br label %if.end51, !dbg !8800

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %code, align 4, !dbg !8801
  %cmp2 = icmp eq i32 %4, 141, !dbg !8803
  br i1 %cmp2, label %if.then3, label %if.else5, !dbg !8804

if.then3:                                         ; preds = %if.else
  %5 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8805
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8806
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !8807
  call void @extract_range_from_ssa_name(%struct.value_range_d* %5, %union.tree_node* %call4), !dbg !8808
  br label %if.end50, !dbg !8808

if.else5:                                         ; preds = %if.else
  %7 = load i32, i32* %code, align 4, !dbg !8809
  %idxprom = sext i32 %7 to i64, !dbg !8809
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8809
  %8 = load i32, i32* %arrayidx, align 4, !dbg !8809
  %cmp6 = icmp eq i32 %8, 7, !dbg !8811
  br i1 %cmp6, label %if.then12, label %lor.lhs.false, !dbg !8812

lor.lhs.false:                                    ; preds = %if.else5
  %9 = load i32, i32* %code, align 4, !dbg !8813
  %cmp7 = icmp eq i32 %9, 93, !dbg !8814
  br i1 %cmp7, label %if.then12, label %lor.lhs.false8, !dbg !8815

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %10 = load i32, i32* %code, align 4, !dbg !8816
  %cmp9 = icmp eq i32 %10, 94, !dbg !8817
  br i1 %cmp9, label %if.then12, label %lor.lhs.false10, !dbg !8818

lor.lhs.false10:                                  ; preds = %lor.lhs.false8
  %11 = load i32, i32* %code, align 4, !dbg !8819
  %cmp11 = icmp eq i32 %11, 95, !dbg !8820
  br i1 %cmp11, label %if.then12, label %if.else17, !dbg !8821

if.then12:                                        ; preds = %lor.lhs.false10, %lor.lhs.false8, %lor.lhs.false, %if.else5
  %12 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8822
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8823
  %call13 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %13), !dbg !8824
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8825
  %call14 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %14), !dbg !8826
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8827
  %call15 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %15), !dbg !8828
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8829
  %call16 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %16), !dbg !8830
  call void @extract_range_from_binary_expr(%struct.value_range_d* %12, i32 %call13, %union.tree_node* %call14, %union.tree_node* %call15, %union.tree_node* %call16), !dbg !8831
  br label %if.end49, !dbg !8831

if.else17:                                        ; preds = %lor.lhs.false10
  %17 = load i32, i32* %code, align 4, !dbg !8832
  %idxprom18 = sext i32 %17 to i64, !dbg !8832
  %arrayidx19 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom18, !dbg !8832
  %18 = load i32, i32* %arrayidx19, align 4, !dbg !8832
  %cmp20 = icmp eq i32 %18, 6, !dbg !8834
  br i1 %cmp20, label %if.then21, label %if.else25, !dbg !8835

if.then21:                                        ; preds = %if.else17
  %19 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8836
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8837
  %call22 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %20), !dbg !8838
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8839
  %call23 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %21), !dbg !8840
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8841
  %call24 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %22), !dbg !8842
  call void @extract_range_from_unary_expr(%struct.value_range_d* %19, i32 %call22, %union.tree_node* %call23, %union.tree_node* %call24), !dbg !8843
  br label %if.end48, !dbg !8843

if.else25:                                        ; preds = %if.else17
  %23 = load i32, i32* %code, align 4, !dbg !8844
  %cmp26 = icmp eq i32 %23, 56, !dbg !8846
  br i1 %cmp26, label %if.then27, label %if.else29, !dbg !8847

if.then27:                                        ; preds = %if.else25
  %24 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8848
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8849
  %call28 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %25), !dbg !8850
  call void @extract_range_from_cond_expr(%struct.value_range_d* %24, %union.tree_node* %call28), !dbg !8851
  br label %if.end47, !dbg !8851

if.else29:                                        ; preds = %if.else25
  %26 = load i32, i32* %code, align 4, !dbg !8852
  %idxprom30 = sext i32 %26 to i64, !dbg !8852
  %arrayidx31 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom30, !dbg !8852
  %27 = load i32, i32* %arrayidx31, align 4, !dbg !8852
  %cmp32 = icmp eq i32 %27, 5, !dbg !8854
  br i1 %cmp32, label %if.then33, label %if.else38, !dbg !8855

if.then33:                                        ; preds = %if.else29
  %28 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8856
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8857
  %call34 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %29), !dbg !8858
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8859
  %call35 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %30), !dbg !8860
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8861
  %call36 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %31), !dbg !8862
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8863
  %call37 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %32), !dbg !8864
  call void @extract_range_from_comparison(%struct.value_range_d* %28, i32 %call34, %union.tree_node* %call35, %union.tree_node* %call36, %union.tree_node* %call37), !dbg !8865
  br label %if.end46, !dbg !8865

if.else38:                                        ; preds = %if.else29
  %33 = load i32, i32* %code, align 4, !dbg !8866
  %call39 = call i32 @get_gimple_rhs_class(i32 %33), !dbg !8868
  %cmp40 = icmp eq i32 %call39, 3, !dbg !8869
  br i1 %cmp40, label %land.lhs.true, label %if.else45, !dbg !8870

land.lhs.true:                                    ; preds = %if.else38
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8871
  %call41 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %34), !dbg !8872
  %call42 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call41), !dbg !8873
  %conv = zext i8 %call42 to i32, !dbg !8873
  %tobool = icmp ne i32 %conv, 0, !dbg !8873
  br i1 %tobool, label %if.then43, label %if.else45, !dbg !8874

if.then43:                                        ; preds = %land.lhs.true
  %35 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8875
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8876
  %call44 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %36), !dbg !8877
  call void @set_value_range_to_value(%struct.value_range_d* %35, %union.tree_node* %call44, %struct.bitmap_head_def* null), !dbg !8878
  br label %if.end, !dbg !8878

if.else45:                                        ; preds = %land.lhs.true, %if.else38
  %37 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8879
  call void @set_value_range_to_varying(%struct.value_range_d* %37), !dbg !8880
  br label %if.end

if.end:                                           ; preds = %if.else45, %if.then43
  br label %if.end46

if.end46:                                         ; preds = %if.end, %if.then33
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then27
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then21
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then12
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then3
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then
  %38 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8881
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %38, i32 0, i32 0, !dbg !8883
  %39 = load i32, i32* %type, align 8, !dbg !8883
  %cmp52 = icmp eq i32 %39, 3, !dbg !8884
  br i1 %cmp52, label %if.then54, label %if.end55, !dbg !8885

if.then54:                                        ; preds = %if.end51
  %40 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8886
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8887
  call void @extract_range_basic(%struct.value_range_d* %40, %union.gimple_statement_d* %41), !dbg !8888
  br label %if.end55, !dbg !8888

if.end55:                                         ; preds = %if.then54, %if.end51
  ret void, !dbg !8889
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @update_value_range(%union.tree_node* %var, %struct.value_range_d* %new_vr) #0 !dbg !8890 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %new_vr.addr = alloca %struct.value_range_d*, align 8
  %old_vr = alloca %struct.value_range_d*, align 8
  %is_new = alloca i8, align 1
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8893, metadata !DIExpression()), !dbg !8894
  store %struct.value_range_d* %new_vr, %struct.value_range_d** %new_vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %new_vr.addr, metadata !8895, metadata !DIExpression()), !dbg !8896
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %old_vr, metadata !8897, metadata !DIExpression()), !dbg !8898
  call void @llvm.dbg.declare(metadata i8* %is_new, metadata !8899, metadata !DIExpression()), !dbg !8900
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8901
  %call = call %struct.value_range_d* @get_value_range(%union.tree_node* %0), !dbg !8902
  store %struct.value_range_d* %call, %struct.value_range_d** %old_vr, align 8, !dbg !8903
  %1 = load %struct.value_range_d*, %struct.value_range_d** %old_vr, align 8, !dbg !8904
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %1, i32 0, i32 0, !dbg !8905
  %2 = load i32, i32* %type, align 8, !dbg !8905
  %3 = load %struct.value_range_d*, %struct.value_range_d** %new_vr.addr, align 8, !dbg !8906
  %type1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %3, i32 0, i32 0, !dbg !8907
  %4 = load i32, i32* %type1, align 8, !dbg !8907
  %cmp = icmp ne i32 %2, %4, !dbg !8908
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !8909

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.value_range_d*, %struct.value_range_d** %old_vr, align 8, !dbg !8910
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %5, i32 0, i32 1, !dbg !8911
  %6 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !8911
  %7 = load %struct.value_range_d*, %struct.value_range_d** %new_vr.addr, align 8, !dbg !8912
  %min2 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %7, i32 0, i32 1, !dbg !8913
  %8 = load %union.tree_node*, %union.tree_node** %min2, align 8, !dbg !8913
  %call3 = call zeroext i8 @vrp_operand_equal_p(%union.tree_node* %6, %union.tree_node* %8), !dbg !8914
  %tobool = icmp ne i8 %call3, 0, !dbg !8914
  br i1 %tobool, label %lor.lhs.false4, label %lor.end, !dbg !8915

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %9 = load %struct.value_range_d*, %struct.value_range_d** %old_vr, align 8, !dbg !8916
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %9, i32 0, i32 2, !dbg !8917
  %10 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !8917
  %11 = load %struct.value_range_d*, %struct.value_range_d** %new_vr.addr, align 8, !dbg !8918
  %max5 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %11, i32 0, i32 2, !dbg !8919
  %12 = load %union.tree_node*, %union.tree_node** %max5, align 8, !dbg !8919
  %call6 = call zeroext i8 @vrp_operand_equal_p(%union.tree_node* %10, %union.tree_node* %12), !dbg !8920
  %tobool7 = icmp ne i8 %call6, 0, !dbg !8920
  br i1 %tobool7, label %lor.rhs, label %lor.end, !dbg !8921

lor.rhs:                                          ; preds = %lor.lhs.false4
  %13 = load %struct.value_range_d*, %struct.value_range_d** %old_vr, align 8, !dbg !8922
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %13, i32 0, i32 3, !dbg !8923
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !8923
  %15 = load %struct.value_range_d*, %struct.value_range_d** %new_vr.addr, align 8, !dbg !8924
  %equiv8 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %15, i32 0, i32 3, !dbg !8925
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv8, align 8, !dbg !8925
  %call9 = call zeroext i8 @vrp_bitmap_equal_p(%struct.bitmap_head_def* %14, %struct.bitmap_head_def* %16), !dbg !8926
  %tobool10 = icmp ne i8 %call9, 0, !dbg !8927
  %lnot = xor i1 %tobool10, true, !dbg !8927
  br label %lor.end, !dbg !8921

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false4, %lor.lhs.false, %entry
  %17 = phi i1 [ true, %lor.lhs.false4 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %17 to i32, !dbg !8921
  %conv = trunc i32 %lor.ext to i8, !dbg !8904
  store i8 %conv, i8* %is_new, align 1, !dbg !8928
  %18 = load i8, i8* %is_new, align 1, !dbg !8929
  %tobool11 = icmp ne i8 %18, 0, !dbg !8929
  br i1 %tobool11, label %if.then, label %if.end, !dbg !8931

if.then:                                          ; preds = %lor.end
  %19 = load %struct.value_range_d*, %struct.value_range_d** %old_vr, align 8, !dbg !8932
  %20 = load %struct.value_range_d*, %struct.value_range_d** %new_vr.addr, align 8, !dbg !8933
  %type12 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %20, i32 0, i32 0, !dbg !8934
  %21 = load i32, i32* %type12, align 8, !dbg !8934
  %22 = load %struct.value_range_d*, %struct.value_range_d** %new_vr.addr, align 8, !dbg !8935
  %min13 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %22, i32 0, i32 1, !dbg !8936
  %23 = load %union.tree_node*, %union.tree_node** %min13, align 8, !dbg !8936
  %24 = load %struct.value_range_d*, %struct.value_range_d** %new_vr.addr, align 8, !dbg !8937
  %max14 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %24, i32 0, i32 2, !dbg !8938
  %25 = load %union.tree_node*, %union.tree_node** %max14, align 8, !dbg !8938
  %26 = load %struct.value_range_d*, %struct.value_range_d** %new_vr.addr, align 8, !dbg !8939
  %equiv15 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %26, i32 0, i32 3, !dbg !8940
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv15, align 8, !dbg !8940
  call void @set_value_range(%struct.value_range_d* %19, i32 %21, %union.tree_node* %23, %union.tree_node* %25, %struct.bitmap_head_def* %27), !dbg !8941
  br label %if.end, !dbg !8941

if.end:                                           ; preds = %if.then, %lor.end
  %28 = load %struct.value_range_d*, %struct.value_range_d** %new_vr.addr, align 8, !dbg !8942
  %equiv16 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %28, i32 0, i32 3, !dbg !8942
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv16, align 8, !dbg !8942
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %29), !dbg !8942
  %30 = load %struct.value_range_d*, %struct.value_range_d** %new_vr.addr, align 8, !dbg !8942
  %equiv17 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %30, i32 0, i32 3, !dbg !8942
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %equiv17, align 8, !dbg !8942
  %31 = load i8, i8* %is_new, align 1, !dbg !8943
  ret i8 %31, !dbg !8944
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_stmt_nonnegative_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) #0 !dbg !8945 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8948, metadata !DIExpression()), !dbg !8949
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !8950, metadata !DIExpression()), !dbg !8951
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8952
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8953
  switch i32 %call, label %sw.default [
    i32 6, label %sw.bb
    i32 8, label %sw.bb2
  ], !dbg !8954

sw.bb:                                            ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8955
  %2 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !8957
  %call1 = call zeroext i8 @gimple_assign_nonnegative_warnv_p(%union.gimple_statement_d* %1, i8* %2), !dbg !8958
  store i8 %call1, i8* %retval, align 1, !dbg !8959
  br label %return, !dbg !8959

sw.bb2:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8960
  %4 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !8961
  %call3 = call zeroext i8 @gimple_call_nonnegative_warnv_p(%union.gimple_statement_d* %3, i8* %4), !dbg !8962
  store i8 %call3, i8* %retval, align 1, !dbg !8963
  br label %return, !dbg !8963

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 894, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !8964
  br label %sw.epilog, !dbg !8965

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !8966
  br label %return, !dbg !8966

return:                                           ; preds = %sw.epilog, %sw.bb2, %sw.bb
  %5 = load i8, i8* %retval, align 1, !dbg !8967
  ret i8 %5, !dbg !8967
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_value_range_to_nonnegative(%struct.value_range_d* %vr, %union.tree_node* %type, i8 zeroext %overflow_infinity) #0 !dbg !8968 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %overflow_infinity.addr = alloca i8, align 1
  %zero = alloca %union.tree_node*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !8971, metadata !DIExpression()), !dbg !8972
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !8973, metadata !DIExpression()), !dbg !8974
  store i8 %overflow_infinity, i8* %overflow_infinity.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %overflow_infinity.addr, metadata !8975, metadata !DIExpression()), !dbg !8976
  call void @llvm.dbg.declare(metadata %union.tree_node** %zero, metadata !8977, metadata !DIExpression()), !dbg !8978
  %0 = load i8, i8* %overflow_infinity.addr, align 1, !dbg !8979
  %conv = zext i8 %0 to i32, !dbg !8979
  %tobool = icmp ne i32 %conv, 0, !dbg !8979
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8981

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8982
  %call = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %1), !dbg !8983
  %tobool1 = icmp ne i8 %call, 0, !dbg !8983
  br i1 %tobool1, label %if.end, label %if.then, !dbg !8984

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8985
  call void @set_value_range_to_varying(%struct.value_range_d* %2), !dbg !8987
  br label %return, !dbg !8988

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8989
  %call2 = call %union.tree_node* @build_int_cst(%union.tree_node* %3, i64 0), !dbg !8990
  store %union.tree_node* %call2, %union.tree_node** %zero, align 8, !dbg !8991
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8992
  %5 = load %union.tree_node*, %union.tree_node** %zero, align 8, !dbg !8993
  %6 = load i8, i8* %overflow_infinity.addr, align 1, !dbg !8994
  %conv3 = zext i8 %6 to i32, !dbg !8994
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !8994
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !8994

cond.true:                                        ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8995
  %call5 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %7), !dbg !8996
  br label %cond.end, !dbg !8994

cond.false:                                       ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8997
  %type6 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !8997
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 14, !dbg !8997
  %9 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !8997
  br label %cond.end, !dbg !8994

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call5, %cond.true ], [ %9, %cond.false ], !dbg !8994
  %10 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !8998
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %10, i32 0, i32 3, !dbg !8999
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !8999
  call void @set_value_range(%struct.value_range_d* %4, i32 1, %union.tree_node* %5, %union.tree_node* %cond, %struct.bitmap_head_def* %11), !dbg !9000
  br label %return, !dbg !9001

return:                                           ; preds = %cond.end, %if.then
  ret void, !dbg !9001
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stmt_overflow_infinity(%union.gimple_statement_d* %stmt) #0 !dbg !9002 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9003, metadata !DIExpression()), !dbg !9004
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9005
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !9007
  %conv = zext i8 %call to i32, !dbg !9007
  %tobool = icmp ne i32 %conv, 0, !dbg !9007
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9008

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9009
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !9010
  %call2 = call i32 @get_gimple_rhs_class(i32 %call1), !dbg !9011
  %cmp = icmp eq i32 %call2, 3, !dbg !9012
  br i1 %cmp, label %if.then, label %if.end, !dbg !9013

if.then:                                          ; preds = %land.lhs.true
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9014
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !9015
  %call5 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %call4), !dbg !9016
  store i8 %call5, i8* %retval, align 1, !dbg !9017
  br label %return, !dbg !9017

if.end:                                           ; preds = %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !9018
  br label %return, !dbg !9018

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !9019
  ret i8 %3, !dbg !9019
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vrp_stmt_computes_nonzero(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) #0 !dbg !9020 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  %expr = alloca %union.tree_node*, align 8
  %base = alloca %union.tree_node*, align 8
  %vr = alloca %struct.value_range_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9021, metadata !DIExpression()), !dbg !9022
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !9023, metadata !DIExpression()), !dbg !9024
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9025
  %1 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !9027
  %call = call zeroext i8 @gimple_stmt_nonzero_warnv_p(%union.gimple_statement_d* %0, i8* %1), !dbg !9028
  %tobool = icmp ne i8 %call, 0, !dbg !9028
  br i1 %tobool, label %if.then, label %if.end, !dbg !9029

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !9030
  br label %return, !dbg !9030

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9031
  %call1 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %2), !dbg !9033
  %conv = zext i8 %call1 to i32, !dbg !9033
  %tobool2 = icmp ne i32 %conv, 0, !dbg !9033
  br i1 %tobool2, label %land.lhs.true, label %if.end34, !dbg !9034

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9035
  %call3 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3), !dbg !9036
  %cmp = icmp eq i32 %call3, 121, !dbg !9037
  br i1 %cmp, label %if.then5, label %if.end34, !dbg !9038

if.then5:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !9039, metadata !DIExpression()), !dbg !9041
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9042
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !9043
  store %union.tree_node* %call6, %union.tree_node** %expr, align 8, !dbg !9041
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !9044, metadata !DIExpression()), !dbg !9045
  %5 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9046
  %exp = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !9046
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9046
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9046
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9046
  %call7 = call %union.tree_node* @get_base_address(%union.tree_node* %6), !dbg !9047
  store %union.tree_node* %call7, %union.tree_node** %base, align 8, !dbg !9045
  %7 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !9048
  %cmp8 = icmp ne %union.tree_node* %7, null, !dbg !9050
  br i1 %cmp8, label %land.lhs.true10, label %if.end33, !dbg !9051

land.lhs.true10:                                  ; preds = %if.then5
  %8 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !9052
  %base11 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !9052
  %9 = bitcast %struct.tree_base* %base11 to i64*, !dbg !9052
  %bf.load = load i64, i64* %9, align 8, !dbg !9052
  %bf.clear = and i64 %bf.load, 65535, !dbg !9052
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9052
  %cmp12 = icmp eq i32 %bf.cast, 47, !dbg !9053
  br i1 %cmp12, label %land.lhs.true14, label %if.end33, !dbg !9054

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %10 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !9055
  %exp15 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !9055
  %operands16 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !9055
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands16, i64 0, i64 0, !dbg !9055
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8, !dbg !9055
  %base18 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !9055
  %12 = bitcast %struct.tree_base* %base18 to i64*, !dbg !9055
  %bf.load19 = load i64, i64* %12, align 8, !dbg !9055
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !9055
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !9055
  %cmp22 = icmp eq i32 %bf.cast21, 141, !dbg !9056
  br i1 %cmp22, label %if.then24, label %if.end33, !dbg !9057

if.then24:                                        ; preds = %land.lhs.true14
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !9058, metadata !DIExpression()), !dbg !9060
  %13 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !9061
  %exp25 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !9061
  %operands26 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp25, i32 0, i32 3, !dbg !9061
  %arrayidx27 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands26, i64 0, i64 0, !dbg !9061
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx27, align 8, !dbg !9061
  %call28 = call %struct.value_range_d* @get_value_range(%union.tree_node* %14), !dbg !9062
  store %struct.value_range_d* %call28, %struct.value_range_d** %vr, align 8, !dbg !9060
  %15 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !9063
  %call29 = call zeroext i8 @range_is_nonnull(%struct.value_range_d* %15), !dbg !9065
  %tobool30 = icmp ne i8 %call29, 0, !dbg !9065
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !9066

if.then31:                                        ; preds = %if.then24
  store i8 1, i8* %retval, align 1, !dbg !9067
  br label %return, !dbg !9067

if.end32:                                         ; preds = %if.then24
  br label %if.end33, !dbg !9068

if.end33:                                         ; preds = %if.end32, %land.lhs.true14, %land.lhs.true10, %if.then5
  br label %if.end34, !dbg !9069

if.end34:                                         ; preds = %if.end33, %land.lhs.true, %if.end
  store i8 0, i8* %retval, align 1, !dbg !9070
  br label %return, !dbg !9070

return:                                           ; preds = %if.end34, %if.then31, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !9071
  ret i8 %16, !dbg !9071
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_assign_nonnegative_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) #0 !dbg !9072 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9073, metadata !DIExpression()), !dbg !9074
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !9075, metadata !DIExpression()), !dbg !9076
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9077, metadata !DIExpression()), !dbg !9078
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9079
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !9080
  store i32 %call, i32* %code, align 4, !dbg !9078
  %1 = load i32, i32* %code, align 4, !dbg !9081
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !9082
  switch i32 %call1, label %sw.default [
    i32 2, label %sw.bb
    i32 1, label %sw.bb6
    i32 3, label %sw.bb12
    i32 0, label %sw.bb15
  ], !dbg !9083

sw.bb:                                            ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9084
  %call2 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !9086
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9087
  %call3 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %3), !dbg !9088
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9089
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !9090
  %5 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !9091
  %call5 = call zeroext i8 @tree_unary_nonnegative_warnv_p(i32 %call2, %union.tree_node* %call3, %union.tree_node* %call4, i8* %5), !dbg !9092
  store i8 %call5, i8* %retval, align 1, !dbg !9093
  br label %return, !dbg !9093

sw.bb6:                                           ; preds = %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9094
  %call7 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %6), !dbg !9095
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9096
  %call8 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %7), !dbg !9097
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9098
  %call9 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %8), !dbg !9099
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9100
  %call10 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %9), !dbg !9101
  %10 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !9102
  %call11 = call zeroext i8 @tree_binary_nonnegative_warnv_p(i32 %call7, %union.tree_node* %call8, %union.tree_node* %call9, %union.tree_node* %call10, i8* %10), !dbg !9103
  store i8 %call11, i8* %retval, align 1, !dbg !9104
  br label %return, !dbg !9104

sw.bb12:                                          ; preds = %entry
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9105
  %call13 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %11), !dbg !9106
  %12 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !9107
  %call14 = call zeroext i8 @tree_single_nonnegative_warnv_p(%union.tree_node* %call13, i8* %12), !dbg !9108
  store i8 %call14, i8* %retval, align 1, !dbg !9109
  br label %return, !dbg !9109

sw.bb15:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 850, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9110
  br label %sw.default, !dbg !9110

sw.default:                                       ; preds = %entry, %sw.bb15
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 852, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9111
  br label %sw.epilog, !dbg !9112

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !9113
  br label %return, !dbg !9113

return:                                           ; preds = %sw.epilog, %sw.bb12, %sw.bb6, %sw.bb
  %13 = load i8, i8* %retval, align 1, !dbg !9114
  ret i8 %13, !dbg !9114
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_nonnegative_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) #0 !dbg !9115 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9116, metadata !DIExpression()), !dbg !9117
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !9118, metadata !DIExpression()), !dbg !9119
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0, metadata !9120, metadata !DIExpression()), !dbg !9121
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9122
  %call = call i32 @gimple_call_num_args(%union.gimple_statement_d* %0), !dbg !9123
  %cmp = icmp ugt i32 %call, 0, !dbg !9124
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9123

cond.true:                                        ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9125
  %call1 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %1, i32 0), !dbg !9126
  br label %cond.end, !dbg !9123

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9123

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !9123
  store %union.tree_node* %cond, %union.tree_node** %arg0, align 8, !dbg !9121
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1, metadata !9127, metadata !DIExpression()), !dbg !9128
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9129
  %call2 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %2), !dbg !9130
  %cmp3 = icmp ugt i32 %call2, 1, !dbg !9131
  br i1 %cmp3, label %cond.true4, label %cond.false6, !dbg !9130

cond.true4:                                       ; preds = %cond.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9132
  %call5 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %3, i32 1), !dbg !9133
  br label %cond.end7, !dbg !9130

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !9130

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %union.tree_node* [ %call5, %cond.true4 ], [ null, %cond.false6 ], !dbg !9130
  store %union.tree_node* %cond8, %union.tree_node** %arg1, align 8, !dbg !9128
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9134
  %call9 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %4), !dbg !9135
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9136
  %call10 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %5), !dbg !9137
  %6 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !9138
  %7 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !9139
  %8 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !9140
  %call11 = call zeroext i8 @tree_call_nonnegative_warnv_p(%union.tree_node* %call9, %union.tree_node* %call10, %union.tree_node* %6, %union.tree_node* %7, i8* %8), !dbg !9141
  ret i8 %call11, !dbg !9142
}

declare dso_local zeroext i8 @tree_unary_nonnegative_warnv_p(i32, %union.tree_node*, %union.tree_node*, i8*) #2

declare dso_local zeroext i8 @tree_binary_nonnegative_warnv_p(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8*) #2

declare dso_local zeroext i8 @tree_single_nonnegative_warnv_p(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !9143 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9144, metadata !DIExpression()), !dbg !9145
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !9146, metadata !DIExpression()), !dbg !9147
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9148
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !9149
  store i32 %call, i32* %num_ops, align 4, !dbg !9150
  %1 = load i32, i32* %num_ops, align 4, !dbg !9151
  %sub = sub i32 %1, 3, !dbg !9152
  ret i32 %sub, !dbg !9153
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9154 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9155, metadata !DIExpression()), !dbg !9156
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9157, metadata !DIExpression()), !dbg !9158
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9159
  %1 = load i32, i32* %index.addr, align 4, !dbg !9160
  %add = add i32 %1, 3, !dbg !9161
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !9162
  ret %union.tree_node* %call, !dbg !9163
}

declare dso_local zeroext i8 @tree_call_nonnegative_warnv_p(%union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @supports_overflow_infinity(%union.tree_node* %type) #0 !dbg !9164 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %min = alloca %union.tree_node*, align 8
  %max = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9165, metadata !DIExpression()), !dbg !9166
  call void @llvm.dbg.declare(metadata %union.tree_node** %min, metadata !9167, metadata !DIExpression()), !dbg !9168
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9169
  %call = call %union.tree_node* @vrp_val_min(%union.tree_node* %0), !dbg !9170
  store %union.tree_node* %call, %union.tree_node** %min, align 8, !dbg !9168
  call void @llvm.dbg.declare(metadata %union.tree_node** %max, metadata !9171, metadata !DIExpression()), !dbg !9172
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9173
  %call1 = call %union.tree_node* @vrp_val_max(%union.tree_node* %1), !dbg !9174
  store %union.tree_node* %call1, %union.tree_node** %max, align 8, !dbg !9172
  %2 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9175
  %cmp = icmp ne %union.tree_node* %2, null, !dbg !9176
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !9177

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9178
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9178
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !9178
  %bf.load = load i64, i64* %4, align 8, !dbg !9178
  %bf.clear = and i64 %bf.load, 65535, !dbg !9178
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9178
  %idxprom = sext i32 %bf.cast to i64, !dbg !9178
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9178
  %5 = load i32, i32* %arrayidx, align 4, !dbg !9178
  %cmp2 = icmp eq i32 %5, 1, !dbg !9178
  br i1 %cmp2, label %land.lhs.true3, label %land.end, !dbg !9179

land.lhs.true3:                                   ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9180
  %cmp4 = icmp ne %union.tree_node* %6, null, !dbg !9181
  br i1 %cmp4, label %land.rhs, label %land.end, !dbg !9182

land.rhs:                                         ; preds = %land.lhs.true3
  %7 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9183
  %base5 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !9183
  %8 = bitcast %struct.tree_base* %base5 to i64*, !dbg !9183
  %bf.load6 = load i64, i64* %8, align 8, !dbg !9183
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !9183
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !9183
  %idxprom9 = sext i32 %bf.cast8 to i64, !dbg !9183
  %arrayidx10 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom9, !dbg !9183
  %9 = load i32, i32* %arrayidx10, align 4, !dbg !9183
  %cmp11 = icmp eq i32 %9, 1, !dbg !9183
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true3, %land.lhs.true, %entry
  %10 = phi i1 [ false, %land.lhs.true3 ], [ false, %land.lhs.true ], [ false, %entry ], [ %cmp11, %land.rhs ], !dbg !9184
  %land.ext = zext i1 %10 to i32, !dbg !9182
  %conv = trunc i32 %land.ext to i8, !dbg !9185
  ret i8 %conv, !dbg !9186
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) #0 !dbg !9187 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9190, metadata !DIExpression()), !dbg !9191
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9192
  %call = call %union.tree_node* @vrp_val_max(%union.tree_node* %0), !dbg !9193
  %call1 = call %union.tree_node* @make_overflow_infinity(%union.tree_node* %call), !dbg !9194
  ret %union.tree_node* %call1, !dbg !9195
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_overflow_infinity(%union.tree_node* %val) #0 !dbg !9196 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !9197, metadata !DIExpression()), !dbg !9198
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9199
  %call = call %union.tree_node* @copy_node_stat(%union.tree_node* %0), !dbg !9199
  store %union.tree_node* %call, %union.tree_node** %val.addr, align 8, !dbg !9200
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9201
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9201
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9201
  %bf.load = load i64, i64* %2, align 8, !dbg !9202
  %bf.clear = and i64 %bf.load, -134217729, !dbg !9202
  %bf.set = or i64 %bf.clear, 134217728, !dbg !9202
  store i64 %bf.set, i64* %2, align 8, !dbg !9202
  %3 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9203
  ret %union.tree_node* %3, !dbg !9204
}

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_overflow_infinity(%union.tree_node* %val) #0 !dbg !9205 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !9206, metadata !DIExpression()), !dbg !9207
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9208
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !9208
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9208
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9208
  %call = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %1), !dbg !9209
  %conv = zext i8 %call to i32, !dbg !9209
  %tobool = icmp ne i32 %conv, 0, !dbg !9209
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !9210

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9211
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9211
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9211
  %bf.load = load i64, i64* %3, align 8, !dbg !9211
  %bf.clear = and i64 %bf.load, 65535, !dbg !9211
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9211
  %idxprom = sext i32 %bf.cast to i64, !dbg !9211
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9211
  %4 = load i32, i32* %arrayidx, align 4, !dbg !9211
  %cmp = icmp eq i32 %4, 1, !dbg !9211
  br i1 %cmp, label %land.lhs.true2, label %land.end, !dbg !9212

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9213
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !9213
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !9213
  %bf.load4 = load i64, i64* %6, align 8, !dbg !9213
  %bf.lshr = lshr i64 %bf.load4, 27, !dbg !9213
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !9213
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !9213
  %tobool7 = icmp ne i32 %bf.cast6, 0, !dbg !9213
  br i1 %tobool7, label %land.rhs, label %land.end, !dbg !9214

land.rhs:                                         ; preds = %land.lhs.true2
  %7 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9215
  %call8 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %7), !dbg !9216
  %conv9 = zext i8 %call8 to i32, !dbg !9216
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !9216
  br i1 %tobool10, label %lor.end, label %lor.rhs, !dbg !9217

lor.rhs:                                          ; preds = %land.rhs
  %8 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9218
  %call11 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %8), !dbg !9219
  %conv12 = zext i8 %call11 to i32, !dbg !9219
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !9217
  br label %lor.end, !dbg !9217

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %9 = phi i1 [ true, %land.rhs ], [ %tobool13, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true2, %land.lhs.true, %entry
  %10 = phi i1 [ false, %land.lhs.true2 ], [ false, %land.lhs.true ], [ false, %entry ], [ %9, %lor.end ], !dbg !9220
  %land.ext = zext i1 %10 to i32, !dbg !9214
  %conv14 = trunc i32 %land.ext to i8, !dbg !9221
  ret i8 %conv14, !dbg !9222
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_stmt_nonzero_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) #0 !dbg !9223 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9224, metadata !DIExpression()), !dbg !9225
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !9226, metadata !DIExpression()), !dbg !9227
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9228
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9229
  switch i32 %call, label %sw.default [
    i32 6, label %sw.bb
    i32 8, label %sw.bb2
  ], !dbg !9230

sw.bb:                                            ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9231
  %2 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !9233
  %call1 = call zeroext i8 @gimple_assign_nonzero_warnv_p(%union.gimple_statement_d* %1, i8* %2), !dbg !9234
  store i8 %call1, i8* %retval, align 1, !dbg !9235
  br label %return, !dbg !9235

sw.bb2:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9236
  %call3 = call zeroext i8 @gimple_alloca_call_p(%union.gimple_statement_d* %3), !dbg !9237
  store i8 %call3, i8* %retval, align 1, !dbg !9238
  br label %return, !dbg !9238

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 951, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9239
  br label %sw.epilog, !dbg !9240

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !9241
  br label %return, !dbg !9241

return:                                           ; preds = %sw.epilog, %sw.bb2, %sw.bb
  %4 = load i8, i8* %retval, align 1, !dbg !9242
  ret i8 %4, !dbg !9242
}

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @range_is_nonnull(%struct.value_range_d* %vr) #0 !dbg !9243 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !9246, metadata !DIExpression()), !dbg !9247
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !9248
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 0, !dbg !9249
  %1 = load i32, i32* %type, align 8, !dbg !9249
  %cmp = icmp eq i32 %1, 2, !dbg !9250
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !9251

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !9252
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 1, !dbg !9253
  %3 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9253
  %call = call i32 @integer_zerop(%union.tree_node* %3), !dbg !9254
  %tobool = icmp ne i32 %call, 0, !dbg !9254
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9255

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !9256
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %4, i32 0, i32 2, !dbg !9257
  %5 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9257
  %call1 = call i32 @integer_zerop(%union.tree_node* %5), !dbg !9258
  %tobool2 = icmp ne i32 %call1, 0, !dbg !9255
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool2, %land.rhs ], !dbg !9259
  %land.ext = zext i1 %6 to i32, !dbg !9255
  %conv = trunc i32 %land.ext to i8, !dbg !9248
  ret i8 %conv, !dbg !9260
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_assign_nonzero_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) #0 !dbg !9261 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9262, metadata !DIExpression()), !dbg !9263
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !9264, metadata !DIExpression()), !dbg !9265
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9266, metadata !DIExpression()), !dbg !9267
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9268
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !9269
  store i32 %call, i32* %code, align 4, !dbg !9267
  %1 = load i32, i32* %code, align 4, !dbg !9270
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !9271
  switch i32 %call1, label %sw.default [
    i32 2, label %sw.bb
    i32 1, label %sw.bb6
    i32 3, label %sw.bb12
    i32 0, label %sw.bb15
  ], !dbg !9272

sw.bb:                                            ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9273
  %call2 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !9275
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9276
  %call3 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %3), !dbg !9277
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9278
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !9279
  %5 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !9280
  %call5 = call zeroext i8 @tree_unary_nonzero_warnv_p(i32 %call2, %union.tree_node* %call3, %union.tree_node* %call4, i8* %5), !dbg !9281
  store i8 %call5, i8* %retval, align 1, !dbg !9282
  br label %return, !dbg !9282

sw.bb6:                                           ; preds = %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9283
  %call7 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %6), !dbg !9284
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9285
  %call8 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %7), !dbg !9286
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9287
  %call9 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %8), !dbg !9288
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9289
  %call10 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %9), !dbg !9290
  %10 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !9291
  %call11 = call zeroext i8 @tree_binary_nonzero_warnv_p(i32 %call7, %union.tree_node* %call8, %union.tree_node* %call9, %union.tree_node* %call10, i8* %10), !dbg !9292
  store i8 %call11, i8* %retval, align 1, !dbg !9293
  br label %return, !dbg !9293

sw.bb12:                                          ; preds = %entry
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9294
  %call13 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %11), !dbg !9295
  %12 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !9296
  %call14 = call zeroext i8 @tree_single_nonzero_warnv_p(%union.tree_node* %call13, i8* %12), !dbg !9297
  store i8 %call14, i8* %retval, align 1, !dbg !9298
  br label %return, !dbg !9298

sw.bb15:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 927, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9299
  br label %sw.default, !dbg !9299

sw.default:                                       ; preds = %entry, %sw.bb15
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 929, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9300
  br label %sw.epilog, !dbg !9301

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !9302
  br label %return, !dbg !9302

return:                                           ; preds = %sw.epilog, %sw.bb12, %sw.bb6, %sw.bb
  %13 = load i8, i8* %retval, align 1, !dbg !9303
  ret i8 %13, !dbg !9303
}

declare dso_local zeroext i8 @gimple_alloca_call_p(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @tree_unary_nonzero_warnv_p(i32, %union.tree_node*, %union.tree_node*, i8*) #2

declare dso_local zeroext i8 @tree_binary_nonzero_warnv_p(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8*) #2

declare dso_local zeroext i8 @tree_single_nonzero_warnv_p(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @extract_range_from_assert(%struct.value_range_d* %vr_p, %union.tree_node* %expr) #0 !dbg !9304 {
entry:
  %vr_p.addr = alloca %struct.value_range_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %cond = alloca %union.tree_node*, align 8
  %limit = alloca %union.tree_node*, align 8
  %min = alloca %union.tree_node*, align 8
  %max = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %var_vr = alloca %struct.value_range_d*, align 8
  %limit_vr = alloca %struct.value_range_d*, align 8
  %cond_code = alloca i32, align 4
  %range_type = alloca i32, align 4
  %one = alloca %union.tree_node*, align 8
  %one352 = alloca %union.tree_node*, align 8
  %min478 = alloca %union.tree_node*, align 8
  %max479 = alloca %union.tree_node*, align 8
  %anti_min = alloca %union.tree_node*, align 8
  %anti_max = alloca %union.tree_node*, align 8
  %real_min = alloca %union.tree_node*, align 8
  %real_max = alloca %union.tree_node*, align 8
  %cmp480 = alloca i32, align 4
  store %struct.value_range_d* %vr_p, %struct.value_range_d** %vr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr_p.addr, metadata !9305, metadata !DIExpression()), !dbg !9306
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !9307, metadata !DIExpression()), !dbg !9308
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !9309, metadata !DIExpression()), !dbg !9310
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !9311, metadata !DIExpression()), !dbg !9312
  call void @llvm.dbg.declare(metadata %union.tree_node** %limit, metadata !9313, metadata !DIExpression()), !dbg !9314
  call void @llvm.dbg.declare(metadata %union.tree_node** %min, metadata !9315, metadata !DIExpression()), !dbg !9316
  call void @llvm.dbg.declare(metadata %union.tree_node** %max, metadata !9317, metadata !DIExpression()), !dbg !9318
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9319, metadata !DIExpression()), !dbg !9320
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %var_vr, metadata !9321, metadata !DIExpression()), !dbg !9322
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %limit_vr, metadata !9323, metadata !DIExpression()), !dbg !9324
  call void @llvm.dbg.declare(metadata i32* %cond_code, metadata !9325, metadata !DIExpression()), !dbg !9326
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9327
  %exp = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !9327
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9327
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9327
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9327
  store %union.tree_node* %1, %union.tree_node** %var, align 8, !dbg !9328
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9329
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !9329
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !9329
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 1, !dbg !9329
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !9329
  store %union.tree_node* %3, %union.tree_node** %cond, align 8, !dbg !9330
  %4 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9331
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9331
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !9331
  %bf.load = load i64, i64* %5, align 8, !dbg !9331
  %bf.clear = and i64 %bf.load, 65535, !dbg !9331
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9331
  %idxprom = sext i32 %bf.cast to i64, !dbg !9331
  %arrayidx4 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9331
  %6 = load i32, i32* %arrayidx4, align 4, !dbg !9331
  %cmp = icmp eq i32 %6, 5, !dbg !9331
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9331

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1410, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9331
  br label %cond.end, !dbg !9331

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9331

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9331
  %7 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9332
  %8 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9334
  %exp6 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !9334
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !9334
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 0, !dbg !9334
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !9334
  %cmp9 = icmp eq %union.tree_node* %7, %9, !dbg !9335
  br i1 %cmp9, label %if.then, label %lor.lhs.false, !dbg !9336

lor.lhs.false:                                    ; preds = %cond.end
  %10 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9337
  %exp10 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !9337
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !9337
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 0, !dbg !9337
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !9337
  %base13 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !9337
  %12 = bitcast %struct.tree_base* %base13 to i64*, !dbg !9337
  %bf.load14 = load i64, i64* %12, align 8, !dbg !9337
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !9337
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !9337
  %cmp17 = icmp eq i32 %bf.cast16, 63, !dbg !9338
  br i1 %cmp17, label %if.then, label %lor.lhs.false18, !dbg !9339

lor.lhs.false18:                                  ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9340
  %exp19 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !9340
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !9340
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 0, !dbg !9340
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !9340
  %base22 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !9340
  %15 = bitcast %struct.tree_base* %base22 to i64*, !dbg !9340
  %bf.load23 = load i64, i64* %15, align 8, !dbg !9340
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !9340
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !9340
  %cmp26 = icmp eq i32 %bf.cast25, 116, !dbg !9341
  br i1 %cmp26, label %if.then, label %if.else, !dbg !9342

if.then:                                          ; preds = %lor.lhs.false18, %lor.lhs.false, %cond.end
  %16 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9343
  %base27 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !9343
  %17 = bitcast %struct.tree_base* %base27 to i64*, !dbg !9343
  %bf.load28 = load i64, i64* %17, align 8, !dbg !9343
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !9343
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !9343
  store i32 %bf.cast30, i32* %cond_code, align 4, !dbg !9345
  %18 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9346
  %exp31 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !9346
  %operands32 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp31, i32 0, i32 3, !dbg !9346
  %arrayidx33 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands32, i64 0, i64 1, !dbg !9346
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx33, align 8, !dbg !9346
  store %union.tree_node* %19, %union.tree_node** %limit, align 8, !dbg !9347
  %20 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9348
  %exp34 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !9348
  %operands35 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp34, i32 0, i32 3, !dbg !9348
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands35, i64 0, i64 0, !dbg !9348
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8, !dbg !9348
  store %union.tree_node* %21, %union.tree_node** %cond, align 8, !dbg !9349
  br label %if.end, !dbg !9350

if.else:                                          ; preds = %lor.lhs.false18
  %22 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9351
  %base37 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !9351
  %23 = bitcast %struct.tree_base* %base37 to i64*, !dbg !9351
  %bf.load38 = load i64, i64* %23, align 8, !dbg !9351
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !9351
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !9351
  %call = call i32 @swap_tree_comparison(i32 %bf.cast40), !dbg !9353
  store i32 %call, i32* %cond_code, align 4, !dbg !9354
  %24 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9355
  %exp41 = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !9355
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 3, !dbg !9355
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i64 0, i64 0, !dbg !9355
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8, !dbg !9355
  store %union.tree_node* %25, %union.tree_node** %limit, align 8, !dbg !9356
  %26 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9357
  %exp44 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !9357
  %operands45 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp44, i32 0, i32 3, !dbg !9357
  %arrayidx46 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands45, i64 0, i64 1, !dbg !9357
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx46, align 8, !dbg !9357
  store %union.tree_node* %27, %union.tree_node** %cond, align 8, !dbg !9358
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %28 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9359
  %call47 = call %union.tree_node* @avoid_overflow_infinity(%union.tree_node* %28), !dbg !9360
  store %union.tree_node* %call47, %union.tree_node** %limit, align 8, !dbg !9361
  %29 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9362
  %common = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !9362
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9362
  %30 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !9362
  store %union.tree_node* %30, %union.tree_node** %type, align 8, !dbg !9363
  %31 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9364
  %32 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9364
  %cmp49 = icmp ne %union.tree_node* %31, %32, !dbg !9364
  br i1 %cmp49, label %cond.false51, label %cond.true50, !dbg !9364

cond.true50:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1436, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9364
  br label %cond.end52, !dbg !9364

cond.false51:                                     ; preds = %if.end
  br label %cond.end52, !dbg !9364

cond.end52:                                       ; preds = %cond.false51, %cond.true50
  %cond53 = phi i32 [ 0, %cond.true50 ], [ 0, %cond.false51 ], !dbg !9364
  %33 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9365
  %base54 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !9365
  %34 = bitcast %struct.tree_base* %base54 to i64*, !dbg !9365
  %bf.load55 = load i64, i64* %34, align 8, !dbg !9365
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !9365
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !9365
  %cmp58 = icmp eq i32 %bf.cast57, 10, !dbg !9365
  br i1 %cmp58, label %land.lhs.true, label %lor.lhs.false59, !dbg !9365

lor.lhs.false59:                                  ; preds = %cond.end52
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9365
  %base60 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !9365
  %36 = bitcast %struct.tree_base* %base60 to i64*, !dbg !9365
  %bf.load61 = load i64, i64* %36, align 8, !dbg !9365
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !9365
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !9365
  %cmp64 = icmp eq i32 %bf.cast63, 12, !dbg !9365
  br i1 %cmp64, label %land.lhs.true, label %if.end69, !dbg !9367

land.lhs.true:                                    ; preds = %lor.lhs.false59, %cond.end52
  %37 = load i32, i32* %cond_code, align 4, !dbg !9368
  %cmp65 = icmp ne i32 %37, 102, !dbg !9369
  br i1 %cmp65, label %land.lhs.true66, label %if.end69, !dbg !9370

land.lhs.true66:                                  ; preds = %land.lhs.true
  %38 = load i32, i32* %cond_code, align 4, !dbg !9371
  %cmp67 = icmp ne i32 %38, 101, !dbg !9372
  br i1 %cmp67, label %if.then68, label %if.end69, !dbg !9373

if.then68:                                        ; preds = %land.lhs.true66
  %39 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9374
  call void @set_value_range_to_varying(%struct.value_range_d* %39), !dbg !9376
  br label %if.end681, !dbg !9377

if.end69:                                         ; preds = %land.lhs.true66, %land.lhs.true, %lor.lhs.false59
  %40 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9378
  %base70 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !9378
  %41 = bitcast %struct.tree_base* %base70 to i64*, !dbg !9378
  %bf.load71 = load i64, i64* %41, align 8, !dbg !9378
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !9378
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !9378
  %cmp74 = icmp eq i32 %bf.cast73, 141, !dbg !9379
  br i1 %cmp74, label %cond.true75, label %cond.false77, !dbg !9380

cond.true75:                                      ; preds = %if.end69
  %42 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9381
  %call76 = call %struct.value_range_d* @get_value_range(%union.tree_node* %42), !dbg !9382
  br label %cond.end78, !dbg !9380

cond.false77:                                     ; preds = %if.end69
  br label %cond.end78, !dbg !9380

cond.end78:                                       ; preds = %cond.false77, %cond.true75
  %cond79 = phi %struct.value_range_d* [ %call76, %cond.true75 ], [ null, %cond.false77 ], !dbg !9380
  store %struct.value_range_d* %cond79, %struct.value_range_d** %limit_vr, align 8, !dbg !9383
  %43 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9384
  %tobool = icmp ne %struct.value_range_d* %43, null, !dbg !9384
  br i1 %tobool, label %land.lhs.true80, label %if.end90, !dbg !9386

land.lhs.true80:                                  ; preds = %cond.end78
  %44 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9387
  %type81 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %44, i32 0, i32 0, !dbg !9388
  %45 = load i32, i32* %type81, align 8, !dbg !9388
  %cmp82 = icmp eq i32 %45, 0, !dbg !9389
  br i1 %cmp82, label %if.then89, label %lor.lhs.false83, !dbg !9390

lor.lhs.false83:                                  ; preds = %land.lhs.true80
  %46 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9391
  %type84 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %46, i32 0, i32 0, !dbg !9392
  %47 = load i32, i32* %type84, align 8, !dbg !9392
  %cmp85 = icmp eq i32 %47, 3, !dbg !9393
  br i1 %cmp85, label %if.then89, label %lor.lhs.false86, !dbg !9394

lor.lhs.false86:                                  ; preds = %lor.lhs.false83
  %48 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9395
  %call87 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %48), !dbg !9396
  %conv = zext i8 %call87 to i32, !dbg !9396
  %tobool88 = icmp ne i32 %conv, 0, !dbg !9396
  br i1 %tobool88, label %if.then89, label %if.end90, !dbg !9397

if.then89:                                        ; preds = %lor.lhs.false86, %lor.lhs.false83, %land.lhs.true80
  store %struct.value_range_d* null, %struct.value_range_d** %limit_vr, align 8, !dbg !9398
  br label %if.end90, !dbg !9399

if.end90:                                         ; preds = %if.then89, %lor.lhs.false86, %cond.end78
  %49 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9400
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %49, i32 0, i32 3, !dbg !9400
  %50 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !9400
  %cmp91 = icmp eq %struct.bitmap_head_def* %50, null, !dbg !9400
  br i1 %cmp91, label %cond.false94, label %cond.true93, !dbg !9400

cond.true93:                                      ; preds = %if.end90
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1463, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9400
  br label %cond.end95, !dbg !9400

cond.false94:                                     ; preds = %if.end90
  br label %cond.end95, !dbg !9400

cond.end95:                                       ; preds = %cond.false94, %cond.true93
  %cond96 = phi i32 [ 0, %cond.true93 ], [ 0, %cond.false94 ], !dbg !9400
  %51 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9401
  %equiv97 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %51, i32 0, i32 3, !dbg !9402
  %52 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9403
  call void @add_equivalence(%struct.bitmap_head_def** %equiv97, %union.tree_node* %52), !dbg !9404
  %53 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9405
  %base98 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !9405
  %54 = bitcast %struct.tree_base* %base98 to i64*, !dbg !9405
  %bf.load99 = load i64, i64* %54, align 8, !dbg !9405
  %bf.clear100 = and i64 %bf.load99, 65535, !dbg !9405
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !9405
  %cmp102 = icmp eq i32 %bf.cast101, 116, !dbg !9407
  br i1 %cmp102, label %if.then111, label %lor.lhs.false104, !dbg !9408

lor.lhs.false104:                                 ; preds = %cond.end95
  %55 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9409
  %base105 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !9409
  %56 = bitcast %struct.tree_base* %base105 to i64*, !dbg !9409
  %bf.load106 = load i64, i64* %56, align 8, !dbg !9409
  %bf.clear107 = and i64 %bf.load106, 65535, !dbg !9409
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !9409
  %cmp109 = icmp eq i32 %bf.cast108, 63, !dbg !9410
  br i1 %cmp109, label %if.then111, label %if.else164, !dbg !9411

if.then111:                                       ; preds = %lor.lhs.false104, %cond.end95
  %57 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9412
  %base112 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !9412
  %58 = bitcast %struct.tree_base* %base112 to i64*, !dbg !9412
  %bf.load113 = load i64, i64* %58, align 8, !dbg !9412
  %bf.clear114 = and i64 %bf.load113, 65535, !dbg !9412
  %bf.cast115 = trunc i64 %bf.clear114 to i32, !dbg !9412
  %cmp116 = icmp eq i32 %bf.cast115, 63, !dbg !9415
  br i1 %cmp116, label %if.then118, label %if.else132, !dbg !9416

if.then118:                                       ; preds = %if.then111
  %59 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9417
  %exp119 = bitcast %union.tree_node* %59 to %struct.tree_exp*, !dbg !9417
  %operands120 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp119, i32 0, i32 3, !dbg !9417
  %arrayidx121 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands120, i64 0, i64 1, !dbg !9417
  %60 = load %union.tree_node*, %union.tree_node** %arrayidx121, align 8, !dbg !9417
  %common122 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !9417
  %type123 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common122, i32 0, i32 2, !dbg !9417
  %61 = load %union.tree_node*, %union.tree_node** %type123, align 8, !dbg !9417
  %62 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9417
  %exp124 = bitcast %union.tree_node* %62 to %struct.tree_exp*, !dbg !9417
  %operands125 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp124, i32 0, i32 3, !dbg !9417
  %arrayidx126 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands125, i64 0, i64 1, !dbg !9417
  %63 = load %union.tree_node*, %union.tree_node** %arrayidx126, align 8, !dbg !9417
  %call127 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %61, %union.tree_node* %63), !dbg !9417
  store %union.tree_node* %call127, %union.tree_node** %min, align 8, !dbg !9419
  %64 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9420
  %65 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9421
  %call128 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %64, %union.tree_node* %65, i32 0), !dbg !9422
  store %union.tree_node* %call128, %union.tree_node** %max, align 8, !dbg !9423
  %66 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !9424
  %exp129 = bitcast %union.tree_node* %66 to %struct.tree_exp*, !dbg !9424
  %operands130 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp129, i32 0, i32 3, !dbg !9424
  %arrayidx131 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands130, i64 0, i64 0, !dbg !9424
  %67 = load %union.tree_node*, %union.tree_node** %arrayidx131, align 8, !dbg !9424
  store %union.tree_node* %67, %union.tree_node** %cond, align 8, !dbg !9425
  br label %if.end136, !dbg !9426

if.else132:                                       ; preds = %if.then111
  %68 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9427
  %common133 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !9427
  %type134 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common133, i32 0, i32 2, !dbg !9427
  %69 = load %union.tree_node*, %union.tree_node** %type134, align 8, !dbg !9427
  %call135 = call %union.tree_node* @build_int_cst(%union.tree_node* %69, i64 0), !dbg !9429
  store %union.tree_node* %call135, %union.tree_node** %min, align 8, !dbg !9430
  %70 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9431
  store %union.tree_node* %70, %union.tree_node** %max, align 8, !dbg !9432
  br label %if.end136

if.end136:                                        ; preds = %if.else132, %if.then118
  %71 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9433
  %common137 = bitcast %union.tree_node* %71 to %struct.tree_common*, !dbg !9433
  %type138 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common137, i32 0, i32 2, !dbg !9433
  %72 = load %union.tree_node*, %union.tree_node** %type138, align 8, !dbg !9433
  %73 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9434
  %int_cst = bitcast %union.tree_node* %73 to %struct.tree_int_cst*, !dbg !9434
  %int_cst139 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !9434
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst139, i32 0, i32 0, !dbg !9434
  %74 = load i64, i64* %low, align 8, !dbg !9434
  %75 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9435
  %int_cst140 = bitcast %union.tree_node* %75 to %struct.tree_int_cst*, !dbg !9435
  %int_cst141 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst140, i32 0, i32 1, !dbg !9435
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst141, i32 0, i32 1, !dbg !9435
  %76 = load i64, i64* %high, align 8, !dbg !9435
  %call142 = call %union.tree_node* @force_fit_type_double(%union.tree_node* %72, i64 %74, i64 %76, i32 0, i8 zeroext 0), !dbg !9436
  store %union.tree_node* %call142, %union.tree_node** %min, align 8, !dbg !9437
  %77 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9438
  %common143 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !9438
  %type144 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common143, i32 0, i32 2, !dbg !9438
  %78 = load %union.tree_node*, %union.tree_node** %type144, align 8, !dbg !9438
  %79 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9439
  %int_cst145 = bitcast %union.tree_node* %79 to %struct.tree_int_cst*, !dbg !9439
  %int_cst146 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst145, i32 0, i32 1, !dbg !9439
  %low147 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst146, i32 0, i32 0, !dbg !9439
  %80 = load i64, i64* %low147, align 8, !dbg !9439
  %81 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9440
  %int_cst148 = bitcast %union.tree_node* %81 to %struct.tree_int_cst*, !dbg !9440
  %int_cst149 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst148, i32 0, i32 1, !dbg !9440
  %high150 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst149, i32 0, i32 1, !dbg !9440
  %82 = load i64, i64* %high150, align 8, !dbg !9440
  %call151 = call %union.tree_node* @force_fit_type_double(%union.tree_node* %78, i64 %80, i64 %82, i32 0, i8 zeroext 0), !dbg !9441
  store %union.tree_node* %call151, %union.tree_node** %max, align 8, !dbg !9442
  %83 = load i32, i32* %cond_code, align 4, !dbg !9443
  %cmp152 = icmp eq i32 %83, 98, !dbg !9445
  br i1 %cmp152, label %if.then154, label %if.else156, !dbg !9446

if.then154:                                       ; preds = %if.end136
  %84 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9447
  %85 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9448
  %86 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9449
  %87 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9450
  %equiv155 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %87, i32 0, i32 3, !dbg !9451
  %88 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv155, align 8, !dbg !9451
  call void @set_and_canonicalize_value_range(%struct.value_range_d* %84, i32 1, %union.tree_node* %85, %union.tree_node* %86, %struct.bitmap_head_def* %88), !dbg !9452
  br label %if.end163, !dbg !9452

if.else156:                                       ; preds = %if.end136
  %89 = load i32, i32* %cond_code, align 4, !dbg !9453
  %cmp157 = icmp eq i32 %89, 99, !dbg !9455
  br i1 %cmp157, label %if.then159, label %if.else161, !dbg !9456

if.then159:                                       ; preds = %if.else156
  %90 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9457
  %91 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9458
  %92 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9459
  %93 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9460
  %equiv160 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %93, i32 0, i32 3, !dbg !9461
  %94 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv160, align 8, !dbg !9461
  call void @set_and_canonicalize_value_range(%struct.value_range_d* %90, i32 2, %union.tree_node* %91, %union.tree_node* %92, %struct.bitmap_head_def* %94), !dbg !9462
  br label %if.end162, !dbg !9462

if.else161:                                       ; preds = %if.else156
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1511, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9463
  br label %if.end162

if.end162:                                        ; preds = %if.else161, %if.then159
  br label %if.end163

if.end163:                                        ; preds = %if.end162, %if.then154
  br label %if.end386, !dbg !9464

if.else164:                                       ; preds = %lor.lhs.false104
  %95 = load i32, i32* %cond_code, align 4, !dbg !9465
  %cmp165 = icmp eq i32 %95, 101, !dbg !9467
  br i1 %cmp165, label %if.then167, label %if.else185, !dbg !9468

if.then167:                                       ; preds = %if.else164
  call void @llvm.dbg.declare(metadata i32* %range_type, metadata !9469, metadata !DIExpression()), !dbg !9471
  %96 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9472
  %tobool168 = icmp ne %struct.value_range_d* %96, null, !dbg !9472
  br i1 %tobool168, label %if.then169, label %if.else173, !dbg !9474

if.then169:                                       ; preds = %if.then167
  %97 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9475
  %type170 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %97, i32 0, i32 0, !dbg !9477
  %98 = load i32, i32* %type170, align 8, !dbg !9477
  store i32 %98, i32* %range_type, align 4, !dbg !9478
  %99 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9479
  %min171 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %99, i32 0, i32 1, !dbg !9480
  %100 = load %union.tree_node*, %union.tree_node** %min171, align 8, !dbg !9480
  store %union.tree_node* %100, %union.tree_node** %min, align 8, !dbg !9481
  %101 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9482
  %max172 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %101, i32 0, i32 2, !dbg !9483
  %102 = load %union.tree_node*, %union.tree_node** %max172, align 8, !dbg !9483
  store %union.tree_node* %102, %union.tree_node** %max, align 8, !dbg !9484
  br label %if.end174, !dbg !9485

if.else173:                                       ; preds = %if.then167
  store i32 1, i32* %range_type, align 4, !dbg !9486
  %103 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9488
  store %union.tree_node* %103, %union.tree_node** %min, align 8, !dbg !9489
  %104 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9490
  store %union.tree_node* %104, %union.tree_node** %max, align 8, !dbg !9491
  br label %if.end174

if.end174:                                        ; preds = %if.else173, %if.then169
  %105 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9492
  %106 = load i32, i32* %range_type, align 4, !dbg !9493
  %107 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9494
  %108 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9495
  %109 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9496
  %equiv175 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %109, i32 0, i32 3, !dbg !9497
  %110 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv175, align 8, !dbg !9497
  call void @set_value_range(%struct.value_range_d* %105, i32 %106, %union.tree_node* %107, %union.tree_node* %108, %struct.bitmap_head_def* %110), !dbg !9498
  %111 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9499
  %base176 = bitcast %union.tree_node* %111 to %struct.tree_base*, !dbg !9499
  %112 = bitcast %struct.tree_base* %base176 to i64*, !dbg !9499
  %bf.load177 = load i64, i64* %112, align 8, !dbg !9499
  %bf.clear178 = and i64 %bf.load177, 65535, !dbg !9499
  %bf.cast179 = trunc i64 %bf.clear178 to i32, !dbg !9499
  %cmp180 = icmp eq i32 %bf.cast179, 141, !dbg !9501
  br i1 %cmp180, label %if.then182, label %if.end184, !dbg !9502

if.then182:                                       ; preds = %if.end174
  %113 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9503
  %equiv183 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %113, i32 0, i32 3, !dbg !9504
  %114 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9505
  call void @add_equivalence(%struct.bitmap_head_def** %equiv183, %union.tree_node* %114), !dbg !9506
  br label %if.end184, !dbg !9506

if.end184:                                        ; preds = %if.then182, %if.end174
  br label %if.end385, !dbg !9507

if.else185:                                       ; preds = %if.else164
  %115 = load i32, i32* %cond_code, align 4, !dbg !9508
  %cmp186 = icmp eq i32 %115, 102, !dbg !9510
  br i1 %cmp186, label %if.then188, label %if.else236, !dbg !9511

if.then188:                                       ; preds = %if.else185
  %116 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9512
  %tobool189 = icmp ne %struct.value_range_d* %116, null, !dbg !9512
  br i1 %tobool189, label %land.lhs.true190, label %if.else203, !dbg !9515

land.lhs.true190:                                 ; preds = %if.then188
  %117 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9516
  %type191 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %117, i32 0, i32 0, !dbg !9517
  %118 = load i32, i32* %type191, align 8, !dbg !9517
  %cmp192 = icmp eq i32 %118, 1, !dbg !9518
  br i1 %cmp192, label %land.lhs.true194, label %if.else203, !dbg !9519

land.lhs.true194:                                 ; preds = %land.lhs.true190
  %119 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9520
  %min195 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %119, i32 0, i32 1, !dbg !9521
  %120 = load %union.tree_node*, %union.tree_node** %min195, align 8, !dbg !9521
  %121 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9522
  %max196 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %121, i32 0, i32 2, !dbg !9523
  %122 = load %union.tree_node*, %union.tree_node** %max196, align 8, !dbg !9523
  %call197 = call i32 @compare_values(%union.tree_node* %120, %union.tree_node* %122), !dbg !9524
  %cmp198 = icmp eq i32 %call197, 0, !dbg !9525
  br i1 %cmp198, label %if.then200, label %if.else203, !dbg !9526

if.then200:                                       ; preds = %land.lhs.true194
  %123 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9527
  %min201 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %123, i32 0, i32 1, !dbg !9529
  %124 = load %union.tree_node*, %union.tree_node** %min201, align 8, !dbg !9529
  store %union.tree_node* %124, %union.tree_node** %min, align 8, !dbg !9530
  %125 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9531
  %max202 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %125, i32 0, i32 2, !dbg !9532
  %126 = load %union.tree_node*, %union.tree_node** %max202, align 8, !dbg !9532
  store %union.tree_node* %126, %union.tree_node** %max, align 8, !dbg !9533
  br label %if.end204, !dbg !9534

if.else203:                                       ; preds = %land.lhs.true194, %land.lhs.true190, %if.then188
  %127 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9535
  store %union.tree_node* %127, %union.tree_node** %max, align 8, !dbg !9537
  store %union.tree_node* %127, %union.tree_node** %min, align 8, !dbg !9538
  br label %if.end204

if.end204:                                        ; preds = %if.else203, %if.then200
  %128 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9539
  %base205 = bitcast %union.tree_node* %128 to %struct.tree_base*, !dbg !9539
  %129 = bitcast %struct.tree_base* %base205 to i64*, !dbg !9539
  %bf.load206 = load i64, i64* %129, align 8, !dbg !9539
  %bf.clear207 = and i64 %bf.load206, 65535, !dbg !9539
  %bf.cast208 = trunc i64 %bf.clear207 to i32, !dbg !9539
  %cmp209 = icmp eq i32 %bf.cast208, 6, !dbg !9539
  br i1 %cmp209, label %land.lhs.true225, label %lor.lhs.false211, !dbg !9539

lor.lhs.false211:                                 ; preds = %if.end204
  %130 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9539
  %base212 = bitcast %union.tree_node* %130 to %struct.tree_base*, !dbg !9539
  %131 = bitcast %struct.tree_base* %base212 to i64*, !dbg !9539
  %bf.load213 = load i64, i64* %131, align 8, !dbg !9539
  %bf.clear214 = and i64 %bf.load213, 65535, !dbg !9539
  %bf.cast215 = trunc i64 %bf.clear214 to i32, !dbg !9539
  %cmp216 = icmp eq i32 %bf.cast215, 7, !dbg !9539
  br i1 %cmp216, label %land.lhs.true225, label %lor.lhs.false218, !dbg !9539

lor.lhs.false218:                                 ; preds = %lor.lhs.false211
  %132 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9539
  %base219 = bitcast %union.tree_node* %132 to %struct.tree_base*, !dbg !9539
  %133 = bitcast %struct.tree_base* %base219 to i64*, !dbg !9539
  %bf.load220 = load i64, i64* %133, align 8, !dbg !9539
  %bf.clear221 = and i64 %bf.load220, 65535, !dbg !9539
  %bf.cast222 = trunc i64 %bf.clear221 to i32, !dbg !9539
  %cmp223 = icmp eq i32 %bf.cast222, 8, !dbg !9539
  br i1 %cmp223, label %land.lhs.true225, label %if.end234, !dbg !9541

land.lhs.true225:                                 ; preds = %lor.lhs.false218, %lor.lhs.false211, %if.end204
  %134 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9542
  %call226 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %134), !dbg !9543
  %conv227 = zext i8 %call226 to i32, !dbg !9543
  %tobool228 = icmp ne i32 %conv227, 0, !dbg !9543
  br i1 %tobool228, label %land.lhs.true229, label %if.end234, !dbg !9544

land.lhs.true229:                                 ; preds = %land.lhs.true225
  %135 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9545
  %call230 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %135), !dbg !9546
  %conv231 = zext i8 %call230 to i32, !dbg !9546
  %tobool232 = icmp ne i32 %conv231, 0, !dbg !9546
  br i1 %tobool232, label %if.then233, label %if.end234, !dbg !9547

if.then233:                                       ; preds = %land.lhs.true229
  %136 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9548
  store %union.tree_node* %136, %union.tree_node** %max, align 8, !dbg !9549
  store %union.tree_node* %136, %union.tree_node** %min, align 8, !dbg !9550
  br label %if.end234, !dbg !9551

if.end234:                                        ; preds = %if.then233, %land.lhs.true229, %land.lhs.true225, %lor.lhs.false218
  %137 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9552
  %138 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9553
  %139 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9554
  %140 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9555
  %equiv235 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %140, i32 0, i32 3, !dbg !9556
  %141 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv235, align 8, !dbg !9556
  call void @set_value_range(%struct.value_range_d* %137, i32 2, %union.tree_node* %138, %union.tree_node* %139, %struct.bitmap_head_def* %141), !dbg !9557
  br label %if.end384, !dbg !9558

if.else236:                                       ; preds = %if.else185
  %142 = load i32, i32* %cond_code, align 4, !dbg !9559
  %cmp237 = icmp eq i32 %142, 98, !dbg !9561
  br i1 %cmp237, label %if.then242, label %lor.lhs.false239, !dbg !9562

lor.lhs.false239:                                 ; preds = %if.else236
  %143 = load i32, i32* %cond_code, align 4, !dbg !9563
  %cmp240 = icmp eq i32 %143, 97, !dbg !9564
  br i1 %cmp240, label %if.then242, label %if.else307, !dbg !9565

if.then242:                                       ; preds = %lor.lhs.false239, %if.else236
  %144 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9566
  %type243 = bitcast %union.tree_node* %144 to %struct.tree_type*, !dbg !9566
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type243, i32 0, i32 13, !dbg !9566
  %145 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !9566
  store %union.tree_node* %145, %union.tree_node** %min, align 8, !dbg !9568
  %146 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9569
  %cmp244 = icmp eq %struct.value_range_d* %146, null, !dbg !9571
  br i1 %cmp244, label %if.then250, label %lor.lhs.false246, !dbg !9572

lor.lhs.false246:                                 ; preds = %if.then242
  %147 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9573
  %type247 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %147, i32 0, i32 0, !dbg !9574
  %148 = load i32, i32* %type247, align 8, !dbg !9574
  %cmp248 = icmp eq i32 %148, 2, !dbg !9575
  br i1 %cmp248, label %if.then250, label %if.else251, !dbg !9576

if.then250:                                       ; preds = %lor.lhs.false246, %if.then242
  %149 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9577
  store %union.tree_node* %149, %union.tree_node** %max, align 8, !dbg !9578
  br label %if.end253, !dbg !9579

if.else251:                                       ; preds = %lor.lhs.false246
  %150 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9580
  %max252 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %150, i32 0, i32 2, !dbg !9582
  %151 = load %union.tree_node*, %union.tree_node** %max252, align 8, !dbg !9582
  store %union.tree_node* %151, %union.tree_node** %max, align 8, !dbg !9583
  br label %if.end253

if.end253:                                        ; preds = %if.else251, %if.then250
  %152 = load i32, i32* %cond_code, align 4, !dbg !9584
  %cmp254 = icmp eq i32 %152, 97, !dbg !9586
  br i1 %cmp254, label %land.lhs.true256, label %lor.lhs.false260, !dbg !9587

land.lhs.true256:                                 ; preds = %if.end253
  %153 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9588
  %154 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9589
  %call257 = call i32 @compare_values(%union.tree_node* %153, %union.tree_node* %154), !dbg !9590
  %cmp258 = icmp eq i32 %call257, 0, !dbg !9591
  br i1 %cmp258, label %if.then275, label %lor.lhs.false260, !dbg !9592

lor.lhs.false260:                                 ; preds = %land.lhs.true256, %if.end253
  %155 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9593
  %base261 = bitcast %union.tree_node* %155 to %struct.tree_base*, !dbg !9593
  %156 = bitcast %struct.tree_base* %base261 to i64*, !dbg !9593
  %bf.load262 = load i64, i64* %156, align 8, !dbg !9593
  %bf.clear263 = and i64 %bf.load262, 65535, !dbg !9593
  %bf.cast264 = trunc i64 %bf.clear263 to i32, !dbg !9593
  %idxprom265 = sext i32 %bf.cast264 to i64, !dbg !9593
  %arrayidx266 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom265, !dbg !9593
  %157 = load i32, i32* %arrayidx266, align 4, !dbg !9593
  %cmp267 = icmp eq i32 %157, 1, !dbg !9593
  br i1 %cmp267, label %land.lhs.true269, label %if.else276, !dbg !9594

land.lhs.true269:                                 ; preds = %lor.lhs.false260
  %158 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9595
  %base270 = bitcast %union.tree_node* %158 to %struct.tree_base*, !dbg !9595
  %159 = bitcast %struct.tree_base* %base270 to i64*, !dbg !9595
  %bf.load271 = load i64, i64* %159, align 8, !dbg !9595
  %bf.lshr = lshr i64 %bf.load271, 27, !dbg !9595
  %bf.clear272 = and i64 %bf.lshr, 1, !dbg !9595
  %bf.cast273 = trunc i64 %bf.clear272 to i32, !dbg !9595
  %tobool274 = icmp ne i32 %bf.cast273, 0, !dbg !9595
  br i1 %tobool274, label %if.then275, label %if.else276, !dbg !9596

if.then275:                                       ; preds = %land.lhs.true269, %land.lhs.true256
  %160 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9597
  call void @set_value_range_to_varying(%struct.value_range_d* %160), !dbg !9598
  br label %if.end306, !dbg !9598

if.else276:                                       ; preds = %land.lhs.true269, %lor.lhs.false260
  %161 = load i32, i32* %cond_code, align 4, !dbg !9599
  %cmp277 = icmp eq i32 %161, 97, !dbg !9602
  br i1 %cmp277, label %if.then279, label %if.end304, !dbg !9603

if.then279:                                       ; preds = %if.else276
  call void @llvm.dbg.declare(metadata %union.tree_node** %one, metadata !9604, metadata !DIExpression()), !dbg !9606
  %162 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9607
  %call280 = call %union.tree_node* @build_int_cst(%union.tree_node* %162, i64 1), !dbg !9608
  store %union.tree_node* %call280, %union.tree_node** %one, align 8, !dbg !9606
  %163 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9609
  %164 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9609
  %165 = load %union.tree_node*, %union.tree_node** %one, align 8, !dbg !9609
  %call281 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %163, %union.tree_node* %164, %union.tree_node* %165), !dbg !9609
  store %union.tree_node* %call281, %union.tree_node** %max, align 8, !dbg !9610
  %166 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9611
  %base282 = bitcast %union.tree_node* %166 to %struct.tree_base*, !dbg !9611
  %167 = bitcast %struct.tree_base* %base282 to i64*, !dbg !9611
  %bf.load283 = load i64, i64* %167, align 8, !dbg !9611
  %bf.clear284 = and i64 %bf.load283, 65535, !dbg !9611
  %bf.cast285 = trunc i64 %bf.clear284 to i32, !dbg !9611
  %idxprom286 = sext i32 %bf.cast285 to i64, !dbg !9611
  %arrayidx287 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom286, !dbg !9611
  %168 = load i32, i32* %arrayidx287, align 4, !dbg !9611
  %cmp288 = icmp uge i32 %168, 4, !dbg !9611
  br i1 %cmp288, label %land.lhs.true290, label %if.end303, !dbg !9611

land.lhs.true290:                                 ; preds = %if.then279
  %169 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9611
  %base291 = bitcast %union.tree_node* %169 to %struct.tree_base*, !dbg !9611
  %170 = bitcast %struct.tree_base* %base291 to i64*, !dbg !9611
  %bf.load292 = load i64, i64* %170, align 8, !dbg !9611
  %bf.clear293 = and i64 %bf.load292, 65535, !dbg !9611
  %bf.cast294 = trunc i64 %bf.clear293 to i32, !dbg !9611
  %idxprom295 = sext i32 %bf.cast294 to i64, !dbg !9611
  %arrayidx296 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom295, !dbg !9611
  %171 = load i32, i32* %arrayidx296, align 4, !dbg !9611
  %cmp297 = icmp ule i32 %171, 10, !dbg !9611
  br i1 %cmp297, label %if.then299, label %if.end303, !dbg !9613

if.then299:                                       ; preds = %land.lhs.true290
  %172 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9614
  %base300 = bitcast %union.tree_node* %172 to %struct.tree_base*, !dbg !9614
  %173 = bitcast %struct.tree_base* %base300 to i64*, !dbg !9614
  %bf.load301 = load i64, i64* %173, align 8, !dbg !9615
  %bf.clear302 = and i64 %bf.load301, -8388609, !dbg !9615
  %bf.set = or i64 %bf.clear302, 8388608, !dbg !9615
  store i64 %bf.set, i64* %173, align 8, !dbg !9615
  br label %if.end303, !dbg !9614

if.end303:                                        ; preds = %if.then299, %land.lhs.true290, %if.then279
  br label %if.end304, !dbg !9616

if.end304:                                        ; preds = %if.end303, %if.else276
  %174 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9617
  %175 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9618
  %176 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9619
  %177 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9620
  %equiv305 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %177, i32 0, i32 3, !dbg !9621
  %178 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv305, align 8, !dbg !9621
  call void @set_value_range(%struct.value_range_d* %174, i32 1, %union.tree_node* %175, %union.tree_node* %176, %struct.bitmap_head_def* %178), !dbg !9622
  br label %if.end306

if.end306:                                        ; preds = %if.end304, %if.then275
  br label %if.end383, !dbg !9623

if.else307:                                       ; preds = %lor.lhs.false239
  %179 = load i32, i32* %cond_code, align 4, !dbg !9624
  %cmp308 = icmp eq i32 %179, 100, !dbg !9626
  br i1 %cmp308, label %if.then313, label %lor.lhs.false310, !dbg !9627

lor.lhs.false310:                                 ; preds = %if.else307
  %180 = load i32, i32* %cond_code, align 4, !dbg !9628
  %cmp311 = icmp eq i32 %180, 99, !dbg !9629
  br i1 %cmp311, label %if.then313, label %if.else381, !dbg !9630

if.then313:                                       ; preds = %lor.lhs.false310, %if.else307
  %181 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9631
  %type314 = bitcast %union.tree_node* %181 to %struct.tree_type*, !dbg !9631
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type314, i32 0, i32 14, !dbg !9631
  %182 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !9631
  store %union.tree_node* %182, %union.tree_node** %max, align 8, !dbg !9633
  %183 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9634
  %cmp315 = icmp eq %struct.value_range_d* %183, null, !dbg !9636
  br i1 %cmp315, label %if.then321, label %lor.lhs.false317, !dbg !9637

lor.lhs.false317:                                 ; preds = %if.then313
  %184 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9638
  %type318 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %184, i32 0, i32 0, !dbg !9639
  %185 = load i32, i32* %type318, align 8, !dbg !9639
  %cmp319 = icmp eq i32 %185, 2, !dbg !9640
  br i1 %cmp319, label %if.then321, label %if.else322, !dbg !9641

if.then321:                                       ; preds = %lor.lhs.false317, %if.then313
  %186 = load %union.tree_node*, %union.tree_node** %limit, align 8, !dbg !9642
  store %union.tree_node* %186, %union.tree_node** %min, align 8, !dbg !9643
  br label %if.end324, !dbg !9644

if.else322:                                       ; preds = %lor.lhs.false317
  %187 = load %struct.value_range_d*, %struct.value_range_d** %limit_vr, align 8, !dbg !9645
  %min323 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %187, i32 0, i32 1, !dbg !9647
  %188 = load %union.tree_node*, %union.tree_node** %min323, align 8, !dbg !9647
  store %union.tree_node* %188, %union.tree_node** %min, align 8, !dbg !9648
  br label %if.end324

if.end324:                                        ; preds = %if.else322, %if.then321
  %189 = load i32, i32* %cond_code, align 4, !dbg !9649
  %cmp325 = icmp eq i32 %189, 99, !dbg !9651
  br i1 %cmp325, label %land.lhs.true327, label %lor.lhs.false331, !dbg !9652

land.lhs.true327:                                 ; preds = %if.end324
  %190 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9653
  %191 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9654
  %call328 = call i32 @compare_values(%union.tree_node* %190, %union.tree_node* %191), !dbg !9655
  %cmp329 = icmp eq i32 %call328, 0, !dbg !9656
  br i1 %cmp329, label %if.then347, label %lor.lhs.false331, !dbg !9657

lor.lhs.false331:                                 ; preds = %land.lhs.true327, %if.end324
  %192 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9658
  %base332 = bitcast %union.tree_node* %192 to %struct.tree_base*, !dbg !9658
  %193 = bitcast %struct.tree_base* %base332 to i64*, !dbg !9658
  %bf.load333 = load i64, i64* %193, align 8, !dbg !9658
  %bf.clear334 = and i64 %bf.load333, 65535, !dbg !9658
  %bf.cast335 = trunc i64 %bf.clear334 to i32, !dbg !9658
  %idxprom336 = sext i32 %bf.cast335 to i64, !dbg !9658
  %arrayidx337 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom336, !dbg !9658
  %194 = load i32, i32* %arrayidx337, align 4, !dbg !9658
  %cmp338 = icmp eq i32 %194, 1, !dbg !9658
  br i1 %cmp338, label %land.lhs.true340, label %if.else348, !dbg !9659

land.lhs.true340:                                 ; preds = %lor.lhs.false331
  %195 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9660
  %base341 = bitcast %union.tree_node* %195 to %struct.tree_base*, !dbg !9660
  %196 = bitcast %struct.tree_base* %base341 to i64*, !dbg !9660
  %bf.load342 = load i64, i64* %196, align 8, !dbg !9660
  %bf.lshr343 = lshr i64 %bf.load342, 27, !dbg !9660
  %bf.clear344 = and i64 %bf.lshr343, 1, !dbg !9660
  %bf.cast345 = trunc i64 %bf.clear344 to i32, !dbg !9660
  %tobool346 = icmp ne i32 %bf.cast345, 0, !dbg !9660
  br i1 %tobool346, label %if.then347, label %if.else348, !dbg !9661

if.then347:                                       ; preds = %land.lhs.true340, %land.lhs.true327
  %197 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9662
  call void @set_value_range_to_varying(%struct.value_range_d* %197), !dbg !9663
  br label %if.end380, !dbg !9663

if.else348:                                       ; preds = %land.lhs.true340, %lor.lhs.false331
  %198 = load i32, i32* %cond_code, align 4, !dbg !9664
  %cmp349 = icmp eq i32 %198, 99, !dbg !9667
  br i1 %cmp349, label %if.then351, label %if.end378, !dbg !9668

if.then351:                                       ; preds = %if.else348
  call void @llvm.dbg.declare(metadata %union.tree_node** %one352, metadata !9669, metadata !DIExpression()), !dbg !9671
  %199 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9672
  %call353 = call %union.tree_node* @build_int_cst(%union.tree_node* %199, i64 1), !dbg !9673
  store %union.tree_node* %call353, %union.tree_node** %one352, align 8, !dbg !9671
  %200 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9674
  %201 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9674
  %202 = load %union.tree_node*, %union.tree_node** %one352, align 8, !dbg !9674
  %call354 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %200, %union.tree_node* %201, %union.tree_node* %202), !dbg !9674
  store %union.tree_node* %call354, %union.tree_node** %min, align 8, !dbg !9675
  %203 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9676
  %base355 = bitcast %union.tree_node* %203 to %struct.tree_base*, !dbg !9676
  %204 = bitcast %struct.tree_base* %base355 to i64*, !dbg !9676
  %bf.load356 = load i64, i64* %204, align 8, !dbg !9676
  %bf.clear357 = and i64 %bf.load356, 65535, !dbg !9676
  %bf.cast358 = trunc i64 %bf.clear357 to i32, !dbg !9676
  %idxprom359 = sext i32 %bf.cast358 to i64, !dbg !9676
  %arrayidx360 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom359, !dbg !9676
  %205 = load i32, i32* %arrayidx360, align 4, !dbg !9676
  %cmp361 = icmp uge i32 %205, 4, !dbg !9676
  br i1 %cmp361, label %land.lhs.true363, label %if.end377, !dbg !9676

land.lhs.true363:                                 ; preds = %if.then351
  %206 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9676
  %base364 = bitcast %union.tree_node* %206 to %struct.tree_base*, !dbg !9676
  %207 = bitcast %struct.tree_base* %base364 to i64*, !dbg !9676
  %bf.load365 = load i64, i64* %207, align 8, !dbg !9676
  %bf.clear366 = and i64 %bf.load365, 65535, !dbg !9676
  %bf.cast367 = trunc i64 %bf.clear366 to i32, !dbg !9676
  %idxprom368 = sext i32 %bf.cast367 to i64, !dbg !9676
  %arrayidx369 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom368, !dbg !9676
  %208 = load i32, i32* %arrayidx369, align 4, !dbg !9676
  %cmp370 = icmp ule i32 %208, 10, !dbg !9676
  br i1 %cmp370, label %if.then372, label %if.end377, !dbg !9678

if.then372:                                       ; preds = %land.lhs.true363
  %209 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9679
  %base373 = bitcast %union.tree_node* %209 to %struct.tree_base*, !dbg !9679
  %210 = bitcast %struct.tree_base* %base373 to i64*, !dbg !9679
  %bf.load374 = load i64, i64* %210, align 8, !dbg !9680
  %bf.clear375 = and i64 %bf.load374, -8388609, !dbg !9680
  %bf.set376 = or i64 %bf.clear375, 8388608, !dbg !9680
  store i64 %bf.set376, i64* %210, align 8, !dbg !9680
  br label %if.end377, !dbg !9679

if.end377:                                        ; preds = %if.then372, %land.lhs.true363, %if.then351
  br label %if.end378, !dbg !9681

if.end378:                                        ; preds = %if.end377, %if.else348
  %211 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9682
  %212 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9683
  %213 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9684
  %214 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9685
  %equiv379 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %214, i32 0, i32 3, !dbg !9686
  %215 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv379, align 8, !dbg !9686
  call void @set_value_range(%struct.value_range_d* %211, i32 1, %union.tree_node* %212, %union.tree_node* %213, %struct.bitmap_head_def* %215), !dbg !9687
  br label %if.end380

if.end380:                                        ; preds = %if.end378, %if.then347
  br label %if.end382, !dbg !9688

if.else381:                                       ; preds = %lor.lhs.false310
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1654, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9689
  br label %if.end382

if.end382:                                        ; preds = %if.else381, %if.end380
  br label %if.end383

if.end383:                                        ; preds = %if.end382, %if.end306
  br label %if.end384

if.end384:                                        ; preds = %if.end383, %if.end234
  br label %if.end385

if.end385:                                        ; preds = %if.end384, %if.end184
  br label %if.end386

if.end386:                                        ; preds = %if.end385, %if.end163
  %216 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9690
  %call387 = call %struct.value_range_d* @get_value_range(%union.tree_node* %216), !dbg !9691
  store %struct.value_range_d* %call387, %struct.value_range_d** %var_vr, align 8, !dbg !9692
  %217 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9693
  %type388 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %217, i32 0, i32 0, !dbg !9695
  %218 = load i32, i32* %type388, align 8, !dbg !9695
  %cmp389 = icmp eq i32 %218, 3, !dbg !9696
  br i1 %cmp389, label %if.then411, label %lor.lhs.false391, !dbg !9697

lor.lhs.false391:                                 ; preds = %if.end386
  %219 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9698
  %type392 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %219, i32 0, i32 0, !dbg !9699
  %220 = load i32, i32* %type392, align 8, !dbg !9699
  %cmp393 = icmp eq i32 %220, 0, !dbg !9700
  br i1 %cmp393, label %if.then411, label %lor.lhs.false395, !dbg !9701

lor.lhs.false395:                                 ; preds = %lor.lhs.false391
  %221 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9702
  %type396 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %221, i32 0, i32 0, !dbg !9703
  %222 = load i32, i32* %type396, align 8, !dbg !9703
  %cmp397 = icmp eq i32 %222, 3, !dbg !9704
  br i1 %cmp397, label %if.then411, label %lor.lhs.false399, !dbg !9705

lor.lhs.false399:                                 ; preds = %lor.lhs.false395
  %223 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9706
  %type400 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %223, i32 0, i32 0, !dbg !9707
  %224 = load i32, i32* %type400, align 8, !dbg !9707
  %cmp401 = icmp eq i32 %224, 0, !dbg !9708
  br i1 %cmp401, label %if.then411, label %lor.lhs.false403, !dbg !9709

lor.lhs.false403:                                 ; preds = %lor.lhs.false399
  %225 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9710
  %call404 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %225), !dbg !9711
  %conv405 = zext i8 %call404 to i32, !dbg !9711
  %tobool406 = icmp ne i32 %conv405, 0, !dbg !9711
  br i1 %tobool406, label %if.then411, label %lor.lhs.false407, !dbg !9712

lor.lhs.false407:                                 ; preds = %lor.lhs.false403
  %226 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9713
  %call408 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %226), !dbg !9714
  %conv409 = zext i8 %call408 to i32, !dbg !9714
  %tobool410 = icmp ne i32 %conv409, 0, !dbg !9714
  br i1 %tobool410, label %if.then411, label %if.end412, !dbg !9715

if.then411:                                       ; preds = %lor.lhs.false407, %lor.lhs.false403, %lor.lhs.false399, %lor.lhs.false395, %lor.lhs.false391, %if.end386
  br label %if.end681, !dbg !9716

if.end412:                                        ; preds = %lor.lhs.false407
  %227 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9717
  %type413 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %227, i32 0, i32 0, !dbg !9719
  %228 = load i32, i32* %type413, align 8, !dbg !9719
  %cmp414 = icmp eq i32 %228, 1, !dbg !9720
  br i1 %cmp414, label %land.lhs.true416, label %if.else448, !dbg !9721

land.lhs.true416:                                 ; preds = %if.end412
  %229 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9722
  %type417 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %229, i32 0, i32 0, !dbg !9723
  %230 = load i32, i32* %type417, align 8, !dbg !9723
  %cmp418 = icmp eq i32 %230, 1, !dbg !9724
  br i1 %cmp418, label %if.then420, label %if.else448, !dbg !9725

if.then420:                                       ; preds = %land.lhs.true416
  %231 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9726
  %232 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9729
  %call421 = call zeroext i8 @value_ranges_intersect_p(%struct.value_range_d* %231, %struct.value_range_d* %232), !dbg !9730
  %tobool422 = icmp ne i8 %call421, 0, !dbg !9730
  br i1 %tobool422, label %if.then423, label %if.else446, !dbg !9731

if.then423:                                       ; preds = %if.then420
  %233 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9732
  %min424 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %233, i32 0, i32 1, !dbg !9735
  %234 = load %union.tree_node*, %union.tree_node** %min424, align 8, !dbg !9735
  %235 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9736
  %min425 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %235, i32 0, i32 1, !dbg !9737
  %236 = load %union.tree_node*, %union.tree_node** %min425, align 8, !dbg !9737
  %call426 = call i32 @compare_values(%union.tree_node* %234, %union.tree_node* %236), !dbg !9738
  %cmp427 = icmp eq i32 %call426, -1, !dbg !9739
  br i1 %cmp427, label %if.then429, label %if.else431, !dbg !9740

if.then429:                                       ; preds = %if.then423
  %237 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9741
  %min430 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %237, i32 0, i32 1, !dbg !9742
  %238 = load %union.tree_node*, %union.tree_node** %min430, align 8, !dbg !9742
  store %union.tree_node* %238, %union.tree_node** %min, align 8, !dbg !9743
  br label %if.end433, !dbg !9744

if.else431:                                       ; preds = %if.then423
  %239 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9745
  %min432 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %239, i32 0, i32 1, !dbg !9746
  %240 = load %union.tree_node*, %union.tree_node** %min432, align 8, !dbg !9746
  store %union.tree_node* %240, %union.tree_node** %min, align 8, !dbg !9747
  br label %if.end433

if.end433:                                        ; preds = %if.else431, %if.then429
  %241 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9748
  %max434 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %241, i32 0, i32 2, !dbg !9750
  %242 = load %union.tree_node*, %union.tree_node** %max434, align 8, !dbg !9750
  %243 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9751
  %max435 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %243, i32 0, i32 2, !dbg !9752
  %244 = load %union.tree_node*, %union.tree_node** %max435, align 8, !dbg !9752
  %call436 = call i32 @compare_values(%union.tree_node* %242, %union.tree_node* %244), !dbg !9753
  %cmp437 = icmp eq i32 %call436, 1, !dbg !9754
  br i1 %cmp437, label %if.then439, label %if.else441, !dbg !9755

if.then439:                                       ; preds = %if.end433
  %245 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9756
  %max440 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %245, i32 0, i32 2, !dbg !9757
  %246 = load %union.tree_node*, %union.tree_node** %max440, align 8, !dbg !9757
  store %union.tree_node* %246, %union.tree_node** %max, align 8, !dbg !9758
  br label %if.end443, !dbg !9759

if.else441:                                       ; preds = %if.end433
  %247 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9760
  %max442 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %247, i32 0, i32 2, !dbg !9761
  %248 = load %union.tree_node*, %union.tree_node** %max442, align 8, !dbg !9761
  store %union.tree_node* %248, %union.tree_node** %max, align 8, !dbg !9762
  br label %if.end443

if.end443:                                        ; preds = %if.else441, %if.then439
  %249 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9763
  %250 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9764
  %type444 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %250, i32 0, i32 0, !dbg !9765
  %251 = load i32, i32* %type444, align 8, !dbg !9765
  %252 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9766
  %253 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9767
  %254 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9768
  %equiv445 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %254, i32 0, i32 3, !dbg !9769
  %255 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv445, align 8, !dbg !9769
  call void @set_value_range(%struct.value_range_d* %249, i32 %251, %union.tree_node* %252, %union.tree_node* %253, %struct.bitmap_head_def* %255), !dbg !9770
  br label %if.end447, !dbg !9771

if.else446:                                       ; preds = %if.then420
  %256 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9772
  call void @set_value_range_to_varying(%struct.value_range_d* %256), !dbg !9774
  br label %if.end447

if.end447:                                        ; preds = %if.else446, %if.end443
  br label %if.end681, !dbg !9775

if.else448:                                       ; preds = %land.lhs.true416, %if.end412
  %257 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9776
  %type449 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %257, i32 0, i32 0, !dbg !9778
  %258 = load i32, i32* %type449, align 8, !dbg !9778
  %cmp450 = icmp eq i32 %258, 1, !dbg !9779
  br i1 %cmp450, label %land.lhs.true452, label %lor.lhs.false456, !dbg !9780

land.lhs.true452:                                 ; preds = %if.else448
  %259 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9781
  %type453 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %259, i32 0, i32 0, !dbg !9782
  %260 = load i32, i32* %type453, align 8, !dbg !9782
  %cmp454 = icmp eq i32 %260, 2, !dbg !9783
  br i1 %cmp454, label %if.then464, label %lor.lhs.false456, !dbg !9784

lor.lhs.false456:                                 ; preds = %land.lhs.true452, %if.else448
  %261 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9785
  %type457 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %261, i32 0, i32 0, !dbg !9786
  %262 = load i32, i32* %type457, align 8, !dbg !9786
  %cmp458 = icmp eq i32 %262, 2, !dbg !9787
  br i1 %cmp458, label %land.lhs.true460, label %if.end680, !dbg !9788

land.lhs.true460:                                 ; preds = %lor.lhs.false456
  %263 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9789
  %type461 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %263, i32 0, i32 0, !dbg !9790
  %264 = load i32, i32* %type461, align 8, !dbg !9790
  %cmp462 = icmp eq i32 %264, 1, !dbg !9791
  br i1 %cmp462, label %if.then464, label %if.end680, !dbg !9792

if.then464:                                       ; preds = %land.lhs.true460, %land.lhs.true452
  %265 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9793
  %min465 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %265, i32 0, i32 1, !dbg !9796
  %266 = load %union.tree_node*, %union.tree_node** %min465, align 8, !dbg !9796
  %267 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9797
  %min466 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %267, i32 0, i32 1, !dbg !9798
  %268 = load %union.tree_node*, %union.tree_node** %min466, align 8, !dbg !9798
  %call467 = call i32 @compare_values(%union.tree_node* %266, %union.tree_node* %268), !dbg !9799
  %cmp468 = icmp eq i32 %call467, 0, !dbg !9800
  br i1 %cmp468, label %land.lhs.true470, label %if.else477, !dbg !9801

land.lhs.true470:                                 ; preds = %if.then464
  %269 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9802
  %max471 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %269, i32 0, i32 2, !dbg !9803
  %270 = load %union.tree_node*, %union.tree_node** %max471, align 8, !dbg !9803
  %271 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9804
  %max472 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %271, i32 0, i32 2, !dbg !9805
  %272 = load %union.tree_node*, %union.tree_node** %max472, align 8, !dbg !9805
  %call473 = call i32 @compare_values(%union.tree_node* %270, %union.tree_node* %272), !dbg !9806
  %cmp474 = icmp eq i32 %call473, 0, !dbg !9807
  br i1 %cmp474, label %if.then476, label %if.else477, !dbg !9808

if.then476:                                       ; preds = %land.lhs.true470
  %273 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9809
  call void @set_value_range_to_varying(%struct.value_range_d* %273), !dbg !9810
  br label %if.end679, !dbg !9810

if.else477:                                       ; preds = %land.lhs.true470, %if.then464
  call void @llvm.dbg.declare(metadata %union.tree_node** %min478, metadata !9811, metadata !DIExpression()), !dbg !9813
  call void @llvm.dbg.declare(metadata %union.tree_node** %max479, metadata !9814, metadata !DIExpression()), !dbg !9815
  call void @llvm.dbg.declare(metadata %union.tree_node** %anti_min, metadata !9816, metadata !DIExpression()), !dbg !9817
  call void @llvm.dbg.declare(metadata %union.tree_node** %anti_max, metadata !9818, metadata !DIExpression()), !dbg !9819
  call void @llvm.dbg.declare(metadata %union.tree_node** %real_min, metadata !9820, metadata !DIExpression()), !dbg !9821
  call void @llvm.dbg.declare(metadata %union.tree_node** %real_max, metadata !9822, metadata !DIExpression()), !dbg !9823
  call void @llvm.dbg.declare(metadata i32* %cmp480, metadata !9824, metadata !DIExpression()), !dbg !9825
  %274 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9826
  %type481 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %274, i32 0, i32 0, !dbg !9828
  %275 = load i32, i32* %type481, align 8, !dbg !9828
  %cmp482 = icmp eq i32 %275, 2, !dbg !9829
  br i1 %cmp482, label %if.then484, label %if.else489, !dbg !9830

if.then484:                                       ; preds = %if.else477
  %276 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9831
  %min485 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %276, i32 0, i32 1, !dbg !9833
  %277 = load %union.tree_node*, %union.tree_node** %min485, align 8, !dbg !9833
  store %union.tree_node* %277, %union.tree_node** %anti_min, align 8, !dbg !9834
  %278 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9835
  %max486 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %278, i32 0, i32 2, !dbg !9836
  %279 = load %union.tree_node*, %union.tree_node** %max486, align 8, !dbg !9836
  store %union.tree_node* %279, %union.tree_node** %anti_max, align 8, !dbg !9837
  %280 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9838
  %min487 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %280, i32 0, i32 1, !dbg !9839
  %281 = load %union.tree_node*, %union.tree_node** %min487, align 8, !dbg !9839
  store %union.tree_node* %281, %union.tree_node** %real_min, align 8, !dbg !9840
  %282 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9841
  %max488 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %282, i32 0, i32 2, !dbg !9842
  %283 = load %union.tree_node*, %union.tree_node** %max488, align 8, !dbg !9842
  store %union.tree_node* %283, %union.tree_node** %real_max, align 8, !dbg !9843
  br label %if.end494, !dbg !9844

if.else489:                                       ; preds = %if.else477
  %284 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9845
  %min490 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %284, i32 0, i32 1, !dbg !9847
  %285 = load %union.tree_node*, %union.tree_node** %min490, align 8, !dbg !9847
  store %union.tree_node* %285, %union.tree_node** %anti_min, align 8, !dbg !9848
  %286 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9849
  %max491 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %286, i32 0, i32 2, !dbg !9850
  %287 = load %union.tree_node*, %union.tree_node** %max491, align 8, !dbg !9850
  store %union.tree_node* %287, %union.tree_node** %anti_max, align 8, !dbg !9851
  %288 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9852
  %min492 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %288, i32 0, i32 1, !dbg !9853
  %289 = load %union.tree_node*, %union.tree_node** %min492, align 8, !dbg !9853
  store %union.tree_node* %289, %union.tree_node** %real_min, align 8, !dbg !9854
  %290 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9855
  %max493 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %290, i32 0, i32 2, !dbg !9856
  %291 = load %union.tree_node*, %union.tree_node** %max493, align 8, !dbg !9856
  store %union.tree_node* %291, %union.tree_node** %real_max, align 8, !dbg !9857
  br label %if.end494

if.end494:                                        ; preds = %if.else489, %if.then484
  %292 = load %union.tree_node*, %union.tree_node** %anti_max, align 8, !dbg !9858
  %293 = load %union.tree_node*, %union.tree_node** %real_max, align 8, !dbg !9860
  %call495 = call i32 @compare_values(%union.tree_node* %292, %union.tree_node* %293), !dbg !9861
  %cmp496 = icmp eq i32 %call495, -1, !dbg !9862
  br i1 %cmp496, label %land.lhs.true498, label %if.else511, !dbg !9863

land.lhs.true498:                                 ; preds = %if.end494
  %294 = load %union.tree_node*, %union.tree_node** %anti_min, align 8, !dbg !9864
  %295 = load %union.tree_node*, %union.tree_node** %real_min, align 8, !dbg !9865
  %call499 = call i32 @compare_values(%union.tree_node* %294, %union.tree_node* %295), !dbg !9866
  %cmp500 = icmp eq i32 %call499, 1, !dbg !9867
  br i1 %cmp500, label %if.then502, label %if.else511, !dbg !9868

if.then502:                                       ; preds = %land.lhs.true498
  %296 = load %union.tree_node*, %union.tree_node** %real_min, align 8, !dbg !9869
  %call503 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %296), !dbg !9872
  %tobool504 = icmp ne i8 %call503, 0, !dbg !9872
  br i1 %tobool504, label %lor.lhs.false505, label %if.then508, !dbg !9873

lor.lhs.false505:                                 ; preds = %if.then502
  %297 = load %union.tree_node*, %union.tree_node** %real_max, align 8, !dbg !9874
  %call506 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %297), !dbg !9875
  %tobool507 = icmp ne i8 %call506, 0, !dbg !9875
  br i1 %tobool507, label %if.end510, label %if.then508, !dbg !9876

if.then508:                                       ; preds = %lor.lhs.false505, %if.then502
  %298 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9877
  %299 = load %union.tree_node*, %union.tree_node** %real_min, align 8, !dbg !9878
  %300 = load %union.tree_node*, %union.tree_node** %real_max, align 8, !dbg !9879
  %301 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9880
  %equiv509 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %301, i32 0, i32 3, !dbg !9881
  %302 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv509, align 8, !dbg !9881
  call void @set_value_range(%struct.value_range_d* %298, i32 1, %union.tree_node* %299, %union.tree_node* %300, %struct.bitmap_head_def* %302), !dbg !9882
  br label %if.end510, !dbg !9882

if.end510:                                        ; preds = %if.then508, %lor.lhs.false505
  br label %if.end678, !dbg !9883

if.else511:                                       ; preds = %land.lhs.true498, %if.end494
  %303 = load %union.tree_node*, %union.tree_node** %anti_min, align 8, !dbg !9884
  %304 = load %union.tree_node*, %union.tree_node** %real_max, align 8, !dbg !9886
  %call512 = call i32 @compare_values(%union.tree_node* %303, %union.tree_node* %304), !dbg !9887
  %cmp513 = icmp eq i32 %call512, 1, !dbg !9888
  br i1 %cmp513, label %if.then519, label %lor.lhs.false515, !dbg !9889

lor.lhs.false515:                                 ; preds = %if.else511
  %305 = load %union.tree_node*, %union.tree_node** %anti_max, align 8, !dbg !9890
  %306 = load %union.tree_node*, %union.tree_node** %real_min, align 8, !dbg !9891
  %call516 = call i32 @compare_values(%union.tree_node* %305, %union.tree_node* %306), !dbg !9892
  %cmp517 = icmp eq i32 %call516, -1, !dbg !9893
  br i1 %cmp517, label %if.then519, label %if.else521, !dbg !9894

if.then519:                                       ; preds = %lor.lhs.false515, %if.else511
  %307 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9895
  %308 = load %union.tree_node*, %union.tree_node** %real_min, align 8, !dbg !9897
  %309 = load %union.tree_node*, %union.tree_node** %real_max, align 8, !dbg !9898
  %310 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9899
  %equiv520 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %310, i32 0, i32 3, !dbg !9900
  %311 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv520, align 8, !dbg !9900
  call void @set_value_range(%struct.value_range_d* %307, i32 1, %union.tree_node* %308, %union.tree_node* %309, %struct.bitmap_head_def* %311), !dbg !9901
  br label %if.end677, !dbg !9902

if.else521:                                       ; preds = %lor.lhs.false515
  %312 = load %union.tree_node*, %union.tree_node** %anti_max, align 8, !dbg !9903
  %313 = load %union.tree_node*, %union.tree_node** %real_min, align 8, !dbg !9905
  %call522 = call i32 @compare_values(%union.tree_node* %312, %union.tree_node* %313), !dbg !9906
  store i32 %call522, i32* %cmp480, align 4, !dbg !9907
  %cmp523 = icmp eq i32 %call522, 1, !dbg !9908
  br i1 %cmp523, label %land.lhs.true528, label %lor.lhs.false525, !dbg !9909

lor.lhs.false525:                                 ; preds = %if.else521
  %314 = load i32, i32* %cmp480, align 4, !dbg !9910
  %cmp526 = icmp eq i32 %314, 0, !dbg !9911
  br i1 %cmp526, label %land.lhs.true528, label %if.else598, !dbg !9912

land.lhs.true528:                                 ; preds = %lor.lhs.false525, %if.else521
  %315 = load %union.tree_node*, %union.tree_node** %anti_max, align 8, !dbg !9913
  %316 = load %union.tree_node*, %union.tree_node** %real_max, align 8, !dbg !9914
  %call529 = call i32 @compare_values(%union.tree_node* %315, %union.tree_node* %316), !dbg !9915
  %cmp530 = icmp eq i32 %call529, -1, !dbg !9916
  br i1 %cmp530, label %if.then532, label %if.else598, !dbg !9917

if.then532:                                       ; preds = %land.lhs.true528
  %317 = load %union.tree_node*, %union.tree_node** %anti_max, align 8, !dbg !9918
  %call533 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %317), !dbg !9918
  %tobool534 = icmp ne i8 %call533, 0, !dbg !9918
  br i1 %tobool534, label %cond.true535, label %cond.false536, !dbg !9918

cond.true535:                                     ; preds = %if.then532
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1819, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9918
  br label %cond.end537, !dbg !9918

cond.false536:                                    ; preds = %if.then532
  br label %cond.end537, !dbg !9918

cond.end537:                                      ; preds = %cond.false536, %cond.true535
  %cond538 = phi i32 [ 0, %cond.true535 ], [ 0, %cond.false536 ], !dbg !9918
  %318 = load %union.tree_node*, %union.tree_node** %anti_max, align 8, !dbg !9920
  %common539 = bitcast %union.tree_node* %318 to %struct.tree_common*, !dbg !9920
  %type540 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common539, i32 0, i32 2, !dbg !9920
  %319 = load %union.tree_node*, %union.tree_node** %type540, align 8, !dbg !9920
  %call541 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %319), !dbg !9922
  %conv542 = zext i8 %call541 to i32, !dbg !9922
  %tobool543 = icmp ne i32 %conv542, 0, !dbg !9922
  br i1 %tobool543, label %land.lhs.true544, label %if.else560, !dbg !9923

land.lhs.true544:                                 ; preds = %cond.end537
  %320 = load %union.tree_node*, %union.tree_node** %anti_max, align 8, !dbg !9924
  %call545 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %320), !dbg !9925
  %conv546 = zext i8 %call545 to i32, !dbg !9925
  %tobool547 = icmp ne i32 %conv546, 0, !dbg !9925
  br i1 %tobool547, label %if.then548, label %if.else560, !dbg !9926

if.then548:                                       ; preds = %land.lhs.true544
  %321 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9927
  %min549 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %321, i32 0, i32 1, !dbg !9927
  %322 = load %union.tree_node*, %union.tree_node** %min549, align 8, !dbg !9927
  %common550 = bitcast %union.tree_node* %322 to %struct.tree_common*, !dbg !9927
  %type551 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common550, i32 0, i32 2, !dbg !9927
  %323 = load %union.tree_node*, %union.tree_node** %type551, align 8, !dbg !9927
  %call552 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %323), !dbg !9930
  %tobool553 = icmp ne i8 %call552, 0, !dbg !9930
  br i1 %tobool553, label %if.end555, label %if.then554, !dbg !9931

if.then554:                                       ; preds = %if.then548
  %324 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9932
  call void @set_value_range_to_varying(%struct.value_range_d* %324), !dbg !9934
  br label %if.end681, !dbg !9935

if.end555:                                        ; preds = %if.then548
  %325 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9936
  %min556 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %325, i32 0, i32 1, !dbg !9936
  %326 = load %union.tree_node*, %union.tree_node** %min556, align 8, !dbg !9936
  %common557 = bitcast %union.tree_node* %326 to %struct.tree_common*, !dbg !9936
  %type558 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common557, i32 0, i32 2, !dbg !9936
  %327 = load %union.tree_node*, %union.tree_node** %type558, align 8, !dbg !9936
  %call559 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %327), !dbg !9937
  store %union.tree_node* %call559, %union.tree_node** %min478, align 8, !dbg !9938
  br label %if.end596, !dbg !9939

if.else560:                                       ; preds = %land.lhs.true544, %cond.end537
  %328 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9940
  %min561 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %328, i32 0, i32 1, !dbg !9940
  %329 = load %union.tree_node*, %union.tree_node** %min561, align 8, !dbg !9940
  %common562 = bitcast %union.tree_node* %329 to %struct.tree_common*, !dbg !9940
  %type563 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common562, i32 0, i32 2, !dbg !9940
  %330 = load %union.tree_node*, %union.tree_node** %type563, align 8, !dbg !9940
  %base564 = bitcast %union.tree_node* %330 to %struct.tree_base*, !dbg !9940
  %331 = bitcast %struct.tree_base* %base564 to i64*, !dbg !9940
  %bf.load565 = load i64, i64* %331, align 8, !dbg !9940
  %bf.clear566 = and i64 %bf.load565, 65535, !dbg !9940
  %bf.cast567 = trunc i64 %bf.clear566 to i32, !dbg !9940
  %cmp568 = icmp eq i32 %bf.cast567, 10, !dbg !9940
  br i1 %cmp568, label %if.else589, label %lor.lhs.false570, !dbg !9940

lor.lhs.false570:                                 ; preds = %if.else560
  %332 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9940
  %min571 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %332, i32 0, i32 1, !dbg !9940
  %333 = load %union.tree_node*, %union.tree_node** %min571, align 8, !dbg !9940
  %common572 = bitcast %union.tree_node* %333 to %struct.tree_common*, !dbg !9940
  %type573 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common572, i32 0, i32 2, !dbg !9940
  %334 = load %union.tree_node*, %union.tree_node** %type573, align 8, !dbg !9940
  %base574 = bitcast %union.tree_node* %334 to %struct.tree_base*, !dbg !9940
  %335 = bitcast %struct.tree_base* %base574 to i64*, !dbg !9940
  %bf.load575 = load i64, i64* %335, align 8, !dbg !9940
  %bf.clear576 = and i64 %bf.load575, 65535, !dbg !9940
  %bf.cast577 = trunc i64 %bf.clear576 to i32, !dbg !9940
  %cmp578 = icmp eq i32 %bf.cast577, 12, !dbg !9940
  br i1 %cmp578, label %if.else589, label %if.then580, !dbg !9942

if.then580:                                       ; preds = %lor.lhs.false570
  %336 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9943
  %min581 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %336, i32 0, i32 1, !dbg !9943
  %337 = load %union.tree_node*, %union.tree_node** %min581, align 8, !dbg !9943
  %common582 = bitcast %union.tree_node* %337 to %struct.tree_common*, !dbg !9943
  %type583 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common582, i32 0, i32 2, !dbg !9943
  %338 = load %union.tree_node*, %union.tree_node** %type583, align 8, !dbg !9943
  %339 = load %union.tree_node*, %union.tree_node** %anti_max, align 8, !dbg !9943
  %340 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9943
  %min584 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %340, i32 0, i32 1, !dbg !9943
  %341 = load %union.tree_node*, %union.tree_node** %min584, align 8, !dbg !9943
  %common585 = bitcast %union.tree_node* %341 to %struct.tree_common*, !dbg !9943
  %type586 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common585, i32 0, i32 2, !dbg !9943
  %342 = load %union.tree_node*, %union.tree_node** %type586, align 8, !dbg !9943
  %call587 = call %union.tree_node* @build_int_cst(%union.tree_node* %342, i64 1), !dbg !9943
  %call588 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %338, %union.tree_node* %339, %union.tree_node* %call587), !dbg !9943
  store %union.tree_node* %call588, %union.tree_node** %min478, align 8, !dbg !9944
  br label %if.end595, !dbg !9945

if.else589:                                       ; preds = %lor.lhs.false570, %if.else560
  %343 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9946
  %min590 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %343, i32 0, i32 1, !dbg !9946
  %344 = load %union.tree_node*, %union.tree_node** %min590, align 8, !dbg !9946
  %common591 = bitcast %union.tree_node* %344 to %struct.tree_common*, !dbg !9946
  %type592 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common591, i32 0, i32 2, !dbg !9946
  %345 = load %union.tree_node*, %union.tree_node** %type592, align 8, !dbg !9946
  %346 = load %union.tree_node*, %union.tree_node** %anti_max, align 8, !dbg !9946
  %call593 = call %union.tree_node* @size_int_kind(i64 1, i32 0), !dbg !9946
  %call594 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %345, %union.tree_node* %346, %union.tree_node* %call593), !dbg !9946
  store %union.tree_node* %call594, %union.tree_node** %min478, align 8, !dbg !9947
  br label %if.end595

if.end595:                                        ; preds = %if.else589, %if.then580
  br label %if.end596

if.end596:                                        ; preds = %if.end595, %if.end555
  %347 = load %union.tree_node*, %union.tree_node** %real_max, align 8, !dbg !9948
  store %union.tree_node* %347, %union.tree_node** %max479, align 8, !dbg !9949
  %348 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9950
  %349 = load %union.tree_node*, %union.tree_node** %min478, align 8, !dbg !9951
  %350 = load %union.tree_node*, %union.tree_node** %max479, align 8, !dbg !9952
  %351 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9953
  %equiv597 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %351, i32 0, i32 3, !dbg !9954
  %352 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv597, align 8, !dbg !9954
  call void @set_value_range(%struct.value_range_d* %348, i32 1, %union.tree_node* %349, %union.tree_node* %350, %struct.bitmap_head_def* %352), !dbg !9955
  br label %if.end676, !dbg !9956

if.else598:                                       ; preds = %land.lhs.true528, %lor.lhs.false525
  %353 = load %union.tree_node*, %union.tree_node** %anti_min, align 8, !dbg !9957
  %354 = load %union.tree_node*, %union.tree_node** %real_min, align 8, !dbg !9959
  %call599 = call i32 @compare_values(%union.tree_node* %353, %union.tree_node* %354), !dbg !9960
  %cmp600 = icmp eq i32 %call599, 1, !dbg !9961
  br i1 %cmp600, label %land.lhs.true602, label %if.end675, !dbg !9962

land.lhs.true602:                                 ; preds = %if.else598
  %355 = load %union.tree_node*, %union.tree_node** %anti_min, align 8, !dbg !9963
  %356 = load %union.tree_node*, %union.tree_node** %real_max, align 8, !dbg !9964
  %call603 = call i32 @compare_values(%union.tree_node* %355, %union.tree_node* %356), !dbg !9965
  store i32 %call603, i32* %cmp480, align 4, !dbg !9966
  %cmp604 = icmp eq i32 %call603, -1, !dbg !9967
  br i1 %cmp604, label %if.then609, label %lor.lhs.false606, !dbg !9968

lor.lhs.false606:                                 ; preds = %land.lhs.true602
  %357 = load i32, i32* %cmp480, align 4, !dbg !9969
  %cmp607 = icmp eq i32 %357, 0, !dbg !9970
  br i1 %cmp607, label %if.then609, label %if.end675, !dbg !9971

if.then609:                                       ; preds = %lor.lhs.false606, %land.lhs.true602
  %358 = load %union.tree_node*, %union.tree_node** %anti_min, align 8, !dbg !9972
  %call610 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %358), !dbg !9972
  %tobool611 = icmp ne i8 %call610, 0, !dbg !9972
  br i1 %tobool611, label %cond.true612, label %cond.false613, !dbg !9972

cond.true612:                                     ; preds = %if.then609
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1847, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !9972
  br label %cond.end614, !dbg !9972

cond.false613:                                    ; preds = %if.then609
  br label %cond.end614, !dbg !9972

cond.end614:                                      ; preds = %cond.false613, %cond.true612
  %cond615 = phi i32 [ 0, %cond.true612 ], [ 0, %cond.false613 ], !dbg !9972
  %359 = load %union.tree_node*, %union.tree_node** %anti_min, align 8, !dbg !9974
  %common616 = bitcast %union.tree_node* %359 to %struct.tree_common*, !dbg !9974
  %type617 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common616, i32 0, i32 2, !dbg !9974
  %360 = load %union.tree_node*, %union.tree_node** %type617, align 8, !dbg !9974
  %call618 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %360), !dbg !9976
  %conv619 = zext i8 %call618 to i32, !dbg !9976
  %tobool620 = icmp ne i32 %conv619, 0, !dbg !9976
  br i1 %tobool620, label %land.lhs.true621, label %if.else637, !dbg !9977

land.lhs.true621:                                 ; preds = %cond.end614
  %361 = load %union.tree_node*, %union.tree_node** %anti_min, align 8, !dbg !9978
  %call622 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %361), !dbg !9979
  %conv623 = zext i8 %call622 to i32, !dbg !9979
  %tobool624 = icmp ne i32 %conv623, 0, !dbg !9979
  br i1 %tobool624, label %if.then625, label %if.else637, !dbg !9980

if.then625:                                       ; preds = %land.lhs.true621
  %362 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9981
  %min626 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %362, i32 0, i32 1, !dbg !9981
  %363 = load %union.tree_node*, %union.tree_node** %min626, align 8, !dbg !9981
  %common627 = bitcast %union.tree_node* %363 to %struct.tree_common*, !dbg !9981
  %type628 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common627, i32 0, i32 2, !dbg !9981
  %364 = load %union.tree_node*, %union.tree_node** %type628, align 8, !dbg !9981
  %call629 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %364), !dbg !9984
  %tobool630 = icmp ne i8 %call629, 0, !dbg !9984
  br i1 %tobool630, label %if.end632, label %if.then631, !dbg !9985

if.then631:                                       ; preds = %if.then625
  %365 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !9986
  call void @set_value_range_to_varying(%struct.value_range_d* %365), !dbg !9988
  br label %if.end681, !dbg !9989

if.end632:                                        ; preds = %if.then625
  %366 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9990
  %min633 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %366, i32 0, i32 1, !dbg !9990
  %367 = load %union.tree_node*, %union.tree_node** %min633, align 8, !dbg !9990
  %common634 = bitcast %union.tree_node* %367 to %struct.tree_common*, !dbg !9990
  %type635 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common634, i32 0, i32 2, !dbg !9990
  %368 = load %union.tree_node*, %union.tree_node** %type635, align 8, !dbg !9990
  %call636 = call %union.tree_node* @negative_overflow_infinity(%union.tree_node* %368), !dbg !9991
  store %union.tree_node* %call636, %union.tree_node** %max479, align 8, !dbg !9992
  br label %if.end673, !dbg !9993

if.else637:                                       ; preds = %land.lhs.true621, %cond.end614
  %369 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9994
  %min638 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %369, i32 0, i32 1, !dbg !9994
  %370 = load %union.tree_node*, %union.tree_node** %min638, align 8, !dbg !9994
  %common639 = bitcast %union.tree_node* %370 to %struct.tree_common*, !dbg !9994
  %type640 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common639, i32 0, i32 2, !dbg !9994
  %371 = load %union.tree_node*, %union.tree_node** %type640, align 8, !dbg !9994
  %base641 = bitcast %union.tree_node* %371 to %struct.tree_base*, !dbg !9994
  %372 = bitcast %struct.tree_base* %base641 to i64*, !dbg !9994
  %bf.load642 = load i64, i64* %372, align 8, !dbg !9994
  %bf.clear643 = and i64 %bf.load642, 65535, !dbg !9994
  %bf.cast644 = trunc i64 %bf.clear643 to i32, !dbg !9994
  %cmp645 = icmp eq i32 %bf.cast644, 10, !dbg !9994
  br i1 %cmp645, label %if.else666, label %lor.lhs.false647, !dbg !9994

lor.lhs.false647:                                 ; preds = %if.else637
  %373 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9994
  %min648 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %373, i32 0, i32 1, !dbg !9994
  %374 = load %union.tree_node*, %union.tree_node** %min648, align 8, !dbg !9994
  %common649 = bitcast %union.tree_node* %374 to %struct.tree_common*, !dbg !9994
  %type650 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common649, i32 0, i32 2, !dbg !9994
  %375 = load %union.tree_node*, %union.tree_node** %type650, align 8, !dbg !9994
  %base651 = bitcast %union.tree_node* %375 to %struct.tree_base*, !dbg !9994
  %376 = bitcast %struct.tree_base* %base651 to i64*, !dbg !9994
  %bf.load652 = load i64, i64* %376, align 8, !dbg !9994
  %bf.clear653 = and i64 %bf.load652, 65535, !dbg !9994
  %bf.cast654 = trunc i64 %bf.clear653 to i32, !dbg !9994
  %cmp655 = icmp eq i32 %bf.cast654, 12, !dbg !9994
  br i1 %cmp655, label %if.else666, label %if.then657, !dbg !9996

if.then657:                                       ; preds = %lor.lhs.false647
  %377 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9997
  %min658 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %377, i32 0, i32 1, !dbg !9997
  %378 = load %union.tree_node*, %union.tree_node** %min658, align 8, !dbg !9997
  %common659 = bitcast %union.tree_node* %378 to %struct.tree_common*, !dbg !9997
  %type660 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common659, i32 0, i32 2, !dbg !9997
  %379 = load %union.tree_node*, %union.tree_node** %type660, align 8, !dbg !9997
  %380 = load %union.tree_node*, %union.tree_node** %anti_min, align 8, !dbg !9997
  %381 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !9997
  %min661 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %381, i32 0, i32 1, !dbg !9997
  %382 = load %union.tree_node*, %union.tree_node** %min661, align 8, !dbg !9997
  %common662 = bitcast %union.tree_node* %382 to %struct.tree_common*, !dbg !9997
  %type663 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common662, i32 0, i32 2, !dbg !9997
  %383 = load %union.tree_node*, %union.tree_node** %type663, align 8, !dbg !9997
  %call664 = call %union.tree_node* @build_int_cst(%union.tree_node* %383, i64 1), !dbg !9997
  %call665 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %379, %union.tree_node* %380, %union.tree_node* %call664), !dbg !9997
  store %union.tree_node* %call665, %union.tree_node** %max479, align 8, !dbg !9998
  br label %if.end672, !dbg !9999

if.else666:                                       ; preds = %lor.lhs.false647, %if.else637
  %384 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !10000
  %min667 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %384, i32 0, i32 1, !dbg !10000
  %385 = load %union.tree_node*, %union.tree_node** %min667, align 8, !dbg !10000
  %common668 = bitcast %union.tree_node* %385 to %struct.tree_common*, !dbg !10000
  %type669 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common668, i32 0, i32 2, !dbg !10000
  %386 = load %union.tree_node*, %union.tree_node** %type669, align 8, !dbg !10000
  %387 = load %union.tree_node*, %union.tree_node** %anti_min, align 8, !dbg !10000
  %call670 = call %union.tree_node* @size_int_kind(i64 -1, i32 0), !dbg !10000
  %call671 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %386, %union.tree_node* %387, %union.tree_node* %call670), !dbg !10000
  store %union.tree_node* %call671, %union.tree_node** %max479, align 8, !dbg !10001
  br label %if.end672

if.end672:                                        ; preds = %if.else666, %if.then657
  br label %if.end673

if.end673:                                        ; preds = %if.end672, %if.end632
  %388 = load %union.tree_node*, %union.tree_node** %real_min, align 8, !dbg !10002
  store %union.tree_node* %388, %union.tree_node** %min478, align 8, !dbg !10003
  %389 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !10004
  %390 = load %union.tree_node*, %union.tree_node** %min478, align 8, !dbg !10005
  %391 = load %union.tree_node*, %union.tree_node** %max479, align 8, !dbg !10006
  %392 = load %struct.value_range_d*, %struct.value_range_d** %vr_p.addr, align 8, !dbg !10007
  %equiv674 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %392, i32 0, i32 3, !dbg !10008
  %393 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv674, align 8, !dbg !10008
  call void @set_value_range(%struct.value_range_d* %389, i32 1, %union.tree_node* %390, %union.tree_node* %391, %struct.bitmap_head_def* %393), !dbg !10009
  br label %if.end675, !dbg !10010

if.end675:                                        ; preds = %if.end673, %lor.lhs.false606, %if.else598
  br label %if.end676

if.end676:                                        ; preds = %if.end675, %if.end596
  br label %if.end677

if.end677:                                        ; preds = %if.end676, %if.then519
  br label %if.end678

if.end678:                                        ; preds = %if.end677, %if.end510
  br label %if.end679

if.end679:                                        ; preds = %if.end678, %if.then476
  br label %if.end680, !dbg !10011

if.end680:                                        ; preds = %if.end679, %land.lhs.true460, %lor.lhs.false456
  br label %if.end681

if.end681:                                        ; preds = %if.then68, %if.then411, %if.then554, %if.then631, %if.end680, %if.end447
  ret void, !dbg !10012
}

; Function Attrs: noinline nounwind uwtable
define internal void @extract_range_from_ssa_name(%struct.value_range_d* %vr, %union.tree_node* %var) #0 !dbg !10013 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %var_vr = alloca %struct.value_range_d*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !10014, metadata !DIExpression()), !dbg !10015
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !10016, metadata !DIExpression()), !dbg !10017
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %var_vr, metadata !10018, metadata !DIExpression()), !dbg !10019
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !10020
  %call = call %struct.value_range_d* @get_value_range(%union.tree_node* %0), !dbg !10021
  store %struct.value_range_d* %call, %struct.value_range_d** %var_vr, align 8, !dbg !10019
  %1 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !10022
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %1, i32 0, i32 0, !dbg !10024
  %2 = load i32, i32* %type, align 8, !dbg !10024
  %cmp = icmp ne i32 %2, 0, !dbg !10025
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !10026

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !10027
  %type1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %3, i32 0, i32 0, !dbg !10028
  %4 = load i32, i32* %type1, align 8, !dbg !10028
  %cmp2 = icmp ne i32 %4, 3, !dbg !10029
  br i1 %cmp2, label %if.then, label %if.else, !dbg !10030

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10031
  %6 = load %struct.value_range_d*, %struct.value_range_d** %var_vr, align 8, !dbg !10032
  call void @copy_value_range(%struct.value_range_d* %5, %struct.value_range_d* %6), !dbg !10033
  br label %if.end, !dbg !10033

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10034
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !10035
  %9 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !10036
  call void @set_value_range(%struct.value_range_d* %7, i32 1, %union.tree_node* %8, %union.tree_node* %9, %struct.bitmap_head_def* null), !dbg !10037
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10038
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %10, i32 0, i32 3, !dbg !10039
  %11 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !10040
  call void @add_equivalence(%struct.bitmap_head_def** %equiv, %union.tree_node* %11), !dbg !10041
  ret void, !dbg !10042
}

; Function Attrs: noinline nounwind uwtable
define internal void @extract_range_from_binary_expr(%struct.value_range_d* %vr, i32 %code, %union.tree_node* %expr_type, %union.tree_node* %op0, %union.tree_node* %op1) #0 !dbg !10043 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %code.addr = alloca i32, align 4
  %expr_type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %type = alloca i32, align 4
  %min = alloca %union.tree_node*, align 8
  %max = alloca %union.tree_node*, align 8
  %cmp = alloca i32, align 4
  %vr0 = alloca %struct.value_range_d, align 8
  %vr1 = alloca %struct.value_range_d, align 8
  %const_op0 = alloca %union.tree_node*, align 8
  %const_op1 = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  %val = alloca [4 x %union.tree_node*], align 16
  %i = alloca i64, align 8
  %sop = alloca i8, align 1
  %zero = alloca %union.tree_node*, align 8
  %cmp547 = alloca i32, align 4
  %vr0_max = alloca %struct.double_int, align 8
  %vr1_max = alloca %struct.double_int, align 8
  %ior_max = alloca %struct.double_int, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !10046, metadata !DIExpression()), !dbg !10047
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !10048, metadata !DIExpression()), !dbg !10049
  store %union.tree_node* %expr_type, %union.tree_node** %expr_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr_type.addr, metadata !10050, metadata !DIExpression()), !dbg !10051
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !10052, metadata !DIExpression()), !dbg !10053
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !10054, metadata !DIExpression()), !dbg !10055
  call void @llvm.dbg.declare(metadata i32* %type, metadata !10056, metadata !DIExpression()), !dbg !10057
  call void @llvm.dbg.declare(metadata %union.tree_node** %min, metadata !10058, metadata !DIExpression()), !dbg !10059
  call void @llvm.dbg.declare(metadata %union.tree_node** %max, metadata !10060, metadata !DIExpression()), !dbg !10061
  call void @llvm.dbg.declare(metadata i32* %cmp, metadata !10062, metadata !DIExpression()), !dbg !10063
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %vr0, metadata !10064, metadata !DIExpression()), !dbg !10065
  %0 = bitcast %struct.value_range_d* %vr0 to i8*, !dbg !10065
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 32, i1 false), !dbg !10065
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %vr1, metadata !10066, metadata !DIExpression()), !dbg !10067
  %1 = bitcast %struct.value_range_d* %vr1 to i8*, !dbg !10067
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false), !dbg !10067
  %2 = load i32, i32* %code.addr, align 4, !dbg !10068
  %cmp1 = icmp ne i32 %2, 63, !dbg !10070
  br i1 %cmp1, label %land.lhs.true, label %if.end50, !dbg !10071

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %code.addr, align 4, !dbg !10072
  %cmp2 = icmp ne i32 %3, 64, !dbg !10073
  br i1 %cmp2, label %land.lhs.true3, label %if.end50, !dbg !10074

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load i32, i32* %code.addr, align 4, !dbg !10075
  %cmp4 = icmp ne i32 %4, 66, !dbg !10076
  br i1 %cmp4, label %land.lhs.true5, label %if.end50, !dbg !10077

land.lhs.true5:                                   ; preds = %land.lhs.true3
  %5 = load i32, i32* %code.addr, align 4, !dbg !10078
  %cmp6 = icmp ne i32 %5, 65, !dbg !10079
  br i1 %cmp6, label %land.lhs.true7, label %if.end50, !dbg !10080

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %6 = load i32, i32* %code.addr, align 4, !dbg !10081
  %cmp8 = icmp ne i32 %6, 67, !dbg !10082
  br i1 %cmp8, label %land.lhs.true9, label %if.end50, !dbg !10083

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %7 = load i32, i32* %code.addr, align 4, !dbg !10084
  %cmp10 = icmp ne i32 %7, 69, !dbg !10085
  br i1 %cmp10, label %land.lhs.true11, label %if.end50, !dbg !10086

land.lhs.true11:                                  ; preds = %land.lhs.true9
  %8 = load i32, i32* %code.addr, align 4, !dbg !10087
  %cmp12 = icmp ne i32 %8, 68, !dbg !10088
  br i1 %cmp12, label %land.lhs.true13, label %if.end50, !dbg !10089

land.lhs.true13:                                  ; preds = %land.lhs.true11
  %9 = load i32, i32* %code.addr, align 4, !dbg !10090
  %cmp14 = icmp ne i32 %9, 76, !dbg !10091
  br i1 %cmp14, label %land.lhs.true15, label %if.end50, !dbg !10092

land.lhs.true15:                                  ; preds = %land.lhs.true13
  %10 = load i32, i32* %code.addr, align 4, !dbg !10093
  %cmp16 = icmp ne i32 %10, 70, !dbg !10094
  br i1 %cmp16, label %land.lhs.true17, label %if.end50, !dbg !10095

land.lhs.true17:                                  ; preds = %land.lhs.true15
  %11 = load i32, i32* %code.addr, align 4, !dbg !10096
  %cmp18 = icmp ne i32 %11, 84, !dbg !10097
  br i1 %cmp18, label %land.lhs.true19, label %if.end50, !dbg !10098

land.lhs.true19:                                  ; preds = %land.lhs.true17
  %12 = load i32, i32* %code.addr, align 4, !dbg !10099
  %cmp20 = icmp ne i32 %12, 80, !dbg !10100
  br i1 %cmp20, label %land.lhs.true21, label %if.end50, !dbg !10101

land.lhs.true21:                                  ; preds = %land.lhs.true19
  %13 = load i32, i32* %code.addr, align 4, !dbg !10102
  %cmp22 = icmp ne i32 %13, 81, !dbg !10103
  br i1 %cmp22, label %land.lhs.true23, label %if.end50, !dbg !10104

land.lhs.true23:                                  ; preds = %land.lhs.true21
  %14 = load i32, i32* %code.addr, align 4, !dbg !10105
  %cmp24 = icmp ne i32 %14, 89, !dbg !10106
  br i1 %cmp24, label %land.lhs.true25, label %if.end50, !dbg !10107

land.lhs.true25:                                  ; preds = %land.lhs.true23
  %15 = load i32, i32* %code.addr, align 4, !dbg !10108
  %cmp26 = icmp ne i32 %15, 87, !dbg !10109
  br i1 %cmp26, label %land.lhs.true27, label %if.end50, !dbg !10110

land.lhs.true27:                                  ; preds = %land.lhs.true25
  %16 = load i32, i32* %code.addr, align 4, !dbg !10111
  %cmp28 = icmp ne i32 %16, 93, !dbg !10112
  br i1 %cmp28, label %land.lhs.true29, label %if.end50, !dbg !10113

land.lhs.true29:                                  ; preds = %land.lhs.true27
  %17 = load i32, i32* %code.addr, align 4, !dbg !10114
  %cmp30 = icmp ne i32 %17, 94, !dbg !10115
  br i1 %cmp30, label %if.then, label %if.end50, !dbg !10116

if.then:                                          ; preds = %land.lhs.true29
  call void @llvm.dbg.declare(metadata %union.tree_node** %const_op0, metadata !10117, metadata !DIExpression()), !dbg !10119
  %18 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10120
  %call = call %union.tree_node* @op_with_constant_singleton_value_range(%union.tree_node* %18), !dbg !10121
  store %union.tree_node* %call, %union.tree_node** %const_op0, align 8, !dbg !10119
  call void @llvm.dbg.declare(metadata %union.tree_node** %const_op1, metadata !10122, metadata !DIExpression()), !dbg !10123
  %19 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10124
  %call31 = call %union.tree_node* @op_with_constant_singleton_value_range(%union.tree_node* %19), !dbg !10125
  store %union.tree_node* %call31, %union.tree_node** %const_op1, align 8, !dbg !10123
  %20 = load %union.tree_node*, %union.tree_node** %const_op0, align 8, !dbg !10126
  %tobool = icmp ne %union.tree_node* %20, null, !dbg !10126
  br i1 %tobool, label %if.then33, label %lor.lhs.false, !dbg !10128

lor.lhs.false:                                    ; preds = %if.then
  %21 = load %union.tree_node*, %union.tree_node** %const_op1, align 8, !dbg !10129
  %tobool32 = icmp ne %union.tree_node* %21, null, !dbg !10129
  br i1 %tobool32, label %if.then33, label %if.end49, !dbg !10130

if.then33:                                        ; preds = %lor.lhs.false, %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !10131, metadata !DIExpression()), !dbg !10133
  %22 = load i32, i32* %code.addr, align 4, !dbg !10134
  %23 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10134
  %24 = load %union.tree_node*, %union.tree_node** %const_op0, align 8, !dbg !10134
  %tobool34 = icmp ne %union.tree_node* %24, null, !dbg !10134
  br i1 %tobool34, label %cond.true, label %cond.false, !dbg !10134

cond.true:                                        ; preds = %if.then33
  %25 = load %union.tree_node*, %union.tree_node** %const_op0, align 8, !dbg !10134
  br label %cond.end, !dbg !10134

cond.false:                                       ; preds = %if.then33
  %26 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10134
  br label %cond.end, !dbg !10134

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %25, %cond.true ], [ %26, %cond.false ], !dbg !10134
  %27 = load %union.tree_node*, %union.tree_node** %const_op1, align 8, !dbg !10134
  %tobool35 = icmp ne %union.tree_node* %27, null, !dbg !10134
  br i1 %tobool35, label %cond.true36, label %cond.false37, !dbg !10134

cond.true36:                                      ; preds = %cond.end
  %28 = load %union.tree_node*, %union.tree_node** %const_op1, align 8, !dbg !10134
  br label %cond.end38, !dbg !10134

cond.false37:                                     ; preds = %cond.end
  %29 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10134
  br label %cond.end38, !dbg !10134

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi %union.tree_node* [ %28, %cond.true36 ], [ %29, %cond.false37 ], !dbg !10134
  %call40 = call %union.tree_node* @fold_binary_loc(i32 0, i32 %22, %union.tree_node* %23, %union.tree_node* %cond, %union.tree_node* %cond39), !dbg !10134
  store %union.tree_node* %call40, %union.tree_node** %tem, align 8, !dbg !10133
  %30 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !10135
  %tobool41 = icmp ne %union.tree_node* %30, null, !dbg !10135
  br i1 %tobool41, label %land.lhs.true42, label %if.end, !dbg !10137

land.lhs.true42:                                  ; preds = %cond.end38
  %31 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !10138
  %call43 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %31), !dbg !10139
  %conv = zext i8 %call43 to i32, !dbg !10139
  %tobool44 = icmp ne i32 %conv, 0, !dbg !10139
  br i1 %tobool44, label %land.lhs.true45, label %if.end, !dbg !10140

land.lhs.true45:                                  ; preds = %land.lhs.true42
  %32 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !10141
  %call46 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %32), !dbg !10142
  %tobool47 = icmp ne i8 %call46, 0, !dbg !10142
  br i1 %tobool47, label %if.end, label %if.then48, !dbg !10143

if.then48:                                        ; preds = %land.lhs.true45
  %33 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10144
  %34 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !10146
  %35 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !10147
  call void @set_value_range(%struct.value_range_d* %33, i32 1, %union.tree_node* %34, %union.tree_node* %35, %struct.bitmap_head_def* null), !dbg !10148
  br label %if.end996, !dbg !10149

if.end:                                           ; preds = %land.lhs.true45, %land.lhs.true42, %cond.end38
  br label %if.end49, !dbg !10150

if.end49:                                         ; preds = %if.end, %lor.lhs.false
  %36 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10151
  call void @set_value_range_to_varying(%struct.value_range_d* %36), !dbg !10152
  br label %if.end996, !dbg !10153

if.end50:                                         ; preds = %land.lhs.true29, %land.lhs.true27, %land.lhs.true25, %land.lhs.true23, %land.lhs.true21, %land.lhs.true19, %land.lhs.true17, %land.lhs.true15, %land.lhs.true13, %land.lhs.true11, %land.lhs.true9, %land.lhs.true7, %land.lhs.true5, %land.lhs.true3, %land.lhs.true, %entry
  %37 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10154
  %base = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !10154
  %38 = bitcast %struct.tree_base* %base to i64*, !dbg !10154
  %bf.load = load i64, i64* %38, align 8, !dbg !10154
  %bf.clear = and i64 %bf.load, 65535, !dbg !10154
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10154
  %cmp51 = icmp eq i32 %bf.cast, 141, !dbg !10156
  br i1 %cmp51, label %if.then53, label %if.else, !dbg !10157

if.then53:                                        ; preds = %if.end50
  %39 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10158
  %call54 = call %struct.value_range_d* @get_value_range(%union.tree_node* %39), !dbg !10159
  %40 = bitcast %struct.value_range_d* %vr0 to i8*, !dbg !10160
  %41 = bitcast %struct.value_range_d* %call54 to i8*, !dbg !10160
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 32, i1 false), !dbg !10160
  br label %if.end60, !dbg !10161

if.else:                                          ; preds = %if.end50
  %42 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10162
  %call55 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %42), !dbg !10164
  %tobool56 = icmp ne i8 %call55, 0, !dbg !10164
  br i1 %tobool56, label %if.then57, label %if.else58, !dbg !10165

if.then57:                                        ; preds = %if.else
  %43 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10166
  call void @set_value_range_to_value(%struct.value_range_d* %vr0, %union.tree_node* %43, %struct.bitmap_head_def* null), !dbg !10167
  br label %if.end59, !dbg !10167

if.else58:                                        ; preds = %if.else
  call void @set_value_range_to_varying(%struct.value_range_d* %vr0), !dbg !10168
  br label %if.end59

if.end59:                                         ; preds = %if.else58, %if.then57
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then53
  %44 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10169
  %base61 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !10169
  %45 = bitcast %struct.tree_base* %base61 to i64*, !dbg !10169
  %bf.load62 = load i64, i64* %45, align 8, !dbg !10169
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !10169
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !10169
  %cmp65 = icmp eq i32 %bf.cast64, 141, !dbg !10171
  br i1 %cmp65, label %if.then67, label %if.else69, !dbg !10172

if.then67:                                        ; preds = %if.end60
  %46 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10173
  %call68 = call %struct.value_range_d* @get_value_range(%union.tree_node* %46), !dbg !10174
  %47 = bitcast %struct.value_range_d* %vr1 to i8*, !dbg !10175
  %48 = bitcast %struct.value_range_d* %call68 to i8*, !dbg !10175
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 32, i1 false), !dbg !10175
  br label %if.end75, !dbg !10176

if.else69:                                        ; preds = %if.end60
  %49 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10177
  %call70 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %49), !dbg !10179
  %tobool71 = icmp ne i8 %call70, 0, !dbg !10179
  br i1 %tobool71, label %if.then72, label %if.else73, !dbg !10180

if.then72:                                        ; preds = %if.else69
  %50 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10181
  call void @set_value_range_to_value(%struct.value_range_d* %vr1, %union.tree_node* %50, %struct.bitmap_head_def* null), !dbg !10182
  br label %if.end74, !dbg !10182

if.else73:                                        ; preds = %if.else69
  call void @set_value_range_to_varying(%struct.value_range_d* %vr1), !dbg !10183
  br label %if.end74

if.end74:                                         ; preds = %if.else73, %if.then72
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.then67
  %type76 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10184
  %51 = load i32, i32* %type76, align 8, !dbg !10184
  %cmp77 = icmp eq i32 %51, 0, !dbg !10186
  br i1 %cmp77, label %if.then83, label %lor.lhs.false79, !dbg !10187

lor.lhs.false79:                                  ; preds = %if.end75
  %type80 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10188
  %52 = load i32, i32* %type80, align 8, !dbg !10188
  %cmp81 = icmp eq i32 %52, 0, !dbg !10189
  br i1 %cmp81, label %if.then83, label %if.end84, !dbg !10190

if.then83:                                        ; preds = %lor.lhs.false79, %if.end75
  %53 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10191
  call void @set_value_range_to_undefined(%struct.value_range_d* %53), !dbg !10193
  br label %if.end996, !dbg !10194

if.end84:                                         ; preds = %lor.lhs.false79
  %type85 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10195
  %54 = load i32, i32* %type85, align 8, !dbg !10195
  store i32 %54, i32* %type, align 4, !dbg !10196
  %55 = load i32, i32* %code.addr, align 4, !dbg !10197
  %cmp86 = icmp ne i32 %55, 89, !dbg !10199
  br i1 %cmp86, label %land.lhs.true88, label %if.end131, !dbg !10200

land.lhs.true88:                                  ; preds = %if.end84
  %56 = load i32, i32* %code.addr, align 4, !dbg !10201
  %cmp89 = icmp ne i32 %56, 93, !dbg !10202
  br i1 %cmp89, label %land.lhs.true91, label %if.end131, !dbg !10203

land.lhs.true91:                                  ; preds = %land.lhs.true88
  %57 = load i32, i32* %code.addr, align 4, !dbg !10204
  %cmp92 = icmp ne i32 %57, 94, !dbg !10205
  br i1 %cmp92, label %land.lhs.true94, label %if.end131, !dbg !10206

land.lhs.true94:                                  ; preds = %land.lhs.true91
  %58 = load i32, i32* %code.addr, align 4, !dbg !10207
  %cmp95 = icmp ne i32 %58, 67, !dbg !10208
  br i1 %cmp95, label %land.lhs.true97, label %if.end131, !dbg !10209

land.lhs.true97:                                  ; preds = %land.lhs.true94
  %59 = load i32, i32* %code.addr, align 4, !dbg !10210
  %cmp98 = icmp ne i32 %59, 69, !dbg !10211
  br i1 %cmp98, label %land.lhs.true100, label %if.end131, !dbg !10212

land.lhs.true100:                                 ; preds = %land.lhs.true97
  %60 = load i32, i32* %code.addr, align 4, !dbg !10213
  %cmp101 = icmp ne i32 %60, 68, !dbg !10214
  br i1 %cmp101, label %land.lhs.true103, label %if.end131, !dbg !10215

land.lhs.true103:                                 ; preds = %land.lhs.true100
  %61 = load i32, i32* %code.addr, align 4, !dbg !10216
  %cmp104 = icmp ne i32 %61, 76, !dbg !10217
  br i1 %cmp104, label %land.lhs.true106, label %if.end131, !dbg !10218

land.lhs.true106:                                 ; preds = %land.lhs.true103
  %62 = load i32, i32* %code.addr, align 4, !dbg !10219
  %cmp107 = icmp ne i32 %62, 70, !dbg !10220
  br i1 %cmp107, label %land.lhs.true109, label %if.end131, !dbg !10221

land.lhs.true109:                                 ; preds = %land.lhs.true106
  %type110 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10222
  %63 = load i32, i32* %type110, align 8, !dbg !10222
  %cmp111 = icmp eq i32 %63, 3, !dbg !10223
  br i1 %cmp111, label %if.then130, label %lor.lhs.false113, !dbg !10224

lor.lhs.false113:                                 ; preds = %land.lhs.true109
  %type114 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10225
  %64 = load i32, i32* %type114, align 8, !dbg !10225
  %cmp115 = icmp eq i32 %64, 3, !dbg !10226
  br i1 %cmp115, label %if.then130, label %lor.lhs.false117, !dbg !10227

lor.lhs.false117:                                 ; preds = %lor.lhs.false113
  %type118 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10228
  %65 = load i32, i32* %type118, align 8, !dbg !10228
  %type119 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10229
  %66 = load i32, i32* %type119, align 8, !dbg !10229
  %cmp120 = icmp ne i32 %65, %66, !dbg !10230
  br i1 %cmp120, label %if.then130, label %lor.lhs.false122, !dbg !10231

lor.lhs.false122:                                 ; preds = %lor.lhs.false117
  %call123 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr0), !dbg !10232
  %conv124 = zext i8 %call123 to i32, !dbg !10232
  %tobool125 = icmp ne i32 %conv124, 0, !dbg !10232
  br i1 %tobool125, label %if.then130, label %lor.lhs.false126, !dbg !10233

lor.lhs.false126:                                 ; preds = %lor.lhs.false122
  %call127 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr1), !dbg !10234
  %conv128 = zext i8 %call127 to i32, !dbg !10234
  %tobool129 = icmp ne i32 %conv128, 0, !dbg !10234
  br i1 %tobool129, label %if.then130, label %if.end131, !dbg !10235

if.then130:                                       ; preds = %lor.lhs.false126, %lor.lhs.false122, %lor.lhs.false117, %lor.lhs.false113, %land.lhs.true109
  %67 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10236
  call void @set_value_range_to_varying(%struct.value_range_d* %67), !dbg !10238
  br label %if.end996, !dbg !10239

if.end131:                                        ; preds = %lor.lhs.false126, %land.lhs.true106, %land.lhs.true103, %land.lhs.true100, %land.lhs.true97, %land.lhs.true94, %land.lhs.true91, %land.lhs.true88, %if.end84
  %68 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10240
  %base132 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !10240
  %69 = bitcast %struct.tree_base* %base132 to i64*, !dbg !10240
  %bf.load133 = load i64, i64* %69, align 8, !dbg !10240
  %bf.clear134 = and i64 %bf.load133, 65535, !dbg !10240
  %bf.cast135 = trunc i64 %bf.clear134 to i32, !dbg !10240
  %cmp136 = icmp eq i32 %bf.cast135, 10, !dbg !10240
  br i1 %cmp136, label %if.then180, label %lor.lhs.false138, !dbg !10240

lor.lhs.false138:                                 ; preds = %if.end131
  %70 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10240
  %base139 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !10240
  %71 = bitcast %struct.tree_base* %base139 to i64*, !dbg !10240
  %bf.load140 = load i64, i64* %71, align 8, !dbg !10240
  %bf.clear141 = and i64 %bf.load140, 65535, !dbg !10240
  %bf.cast142 = trunc i64 %bf.clear141 to i32, !dbg !10240
  %cmp143 = icmp eq i32 %bf.cast142, 12, !dbg !10240
  br i1 %cmp143, label %if.then180, label %lor.lhs.false145, !dbg !10242

lor.lhs.false145:                                 ; preds = %lor.lhs.false138
  %72 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10243
  %common = bitcast %union.tree_node* %72 to %struct.tree_common*, !dbg !10243
  %type146 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10243
  %73 = load %union.tree_node*, %union.tree_node** %type146, align 8, !dbg !10243
  %base147 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !10243
  %74 = bitcast %struct.tree_base* %base147 to i64*, !dbg !10243
  %bf.load148 = load i64, i64* %74, align 8, !dbg !10243
  %bf.clear149 = and i64 %bf.load148, 65535, !dbg !10243
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !10243
  %cmp151 = icmp eq i32 %bf.cast150, 10, !dbg !10243
  br i1 %cmp151, label %if.then180, label %lor.lhs.false153, !dbg !10243

lor.lhs.false153:                                 ; preds = %lor.lhs.false145
  %75 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10243
  %common154 = bitcast %union.tree_node* %75 to %struct.tree_common*, !dbg !10243
  %type155 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common154, i32 0, i32 2, !dbg !10243
  %76 = load %union.tree_node*, %union.tree_node** %type155, align 8, !dbg !10243
  %base156 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !10243
  %77 = bitcast %struct.tree_base* %base156 to i64*, !dbg !10243
  %bf.load157 = load i64, i64* %77, align 8, !dbg !10243
  %bf.clear158 = and i64 %bf.load157, 65535, !dbg !10243
  %bf.cast159 = trunc i64 %bf.clear158 to i32, !dbg !10243
  %cmp160 = icmp eq i32 %bf.cast159, 12, !dbg !10243
  br i1 %cmp160, label %if.then180, label %lor.lhs.false162, !dbg !10244

lor.lhs.false162:                                 ; preds = %lor.lhs.false153
  %78 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10245
  %common163 = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !10245
  %type164 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common163, i32 0, i32 2, !dbg !10245
  %79 = load %union.tree_node*, %union.tree_node** %type164, align 8, !dbg !10245
  %base165 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !10245
  %80 = bitcast %struct.tree_base* %base165 to i64*, !dbg !10245
  %bf.load166 = load i64, i64* %80, align 8, !dbg !10245
  %bf.clear167 = and i64 %bf.load166, 65535, !dbg !10245
  %bf.cast168 = trunc i64 %bf.clear167 to i32, !dbg !10245
  %cmp169 = icmp eq i32 %bf.cast168, 10, !dbg !10245
  br i1 %cmp169, label %if.then180, label %lor.lhs.false171, !dbg !10245

lor.lhs.false171:                                 ; preds = %lor.lhs.false162
  %81 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10245
  %common172 = bitcast %union.tree_node* %81 to %struct.tree_common*, !dbg !10245
  %type173 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common172, i32 0, i32 2, !dbg !10245
  %82 = load %union.tree_node*, %union.tree_node** %type173, align 8, !dbg !10245
  %base174 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !10245
  %83 = bitcast %struct.tree_base* %base174 to i64*, !dbg !10245
  %bf.load175 = load i64, i64* %83, align 8, !dbg !10245
  %bf.clear176 = and i64 %bf.load175, 65535, !dbg !10245
  %bf.cast177 = trunc i64 %bf.clear176 to i32, !dbg !10245
  %cmp178 = icmp eq i32 %bf.cast177, 12, !dbg !10245
  br i1 %cmp178, label %if.then180, label %if.end234, !dbg !10246

if.then180:                                       ; preds = %lor.lhs.false171, %lor.lhs.false162, %lor.lhs.false153, %lor.lhs.false145, %lor.lhs.false138, %if.end131
  %84 = load i32, i32* %code.addr, align 4, !dbg !10247
  %cmp181 = icmp eq i32 %84, 80, !dbg !10250
  br i1 %cmp181, label %if.then186, label %lor.lhs.false183, !dbg !10251

lor.lhs.false183:                                 ; preds = %if.then180
  %85 = load i32, i32* %code.addr, align 4, !dbg !10252
  %cmp184 = icmp eq i32 %85, 81, !dbg !10253
  br i1 %cmp184, label %if.then186, label %if.end207, !dbg !10254

if.then186:                                       ; preds = %lor.lhs.false183, %if.then180
  %call187 = call zeroext i8 @range_is_nonnull(%struct.value_range_d* %vr0), !dbg !10255
  %conv188 = zext i8 %call187 to i32, !dbg !10255
  %tobool189 = icmp ne i32 %conv188, 0, !dbg !10255
  br i1 %tobool189, label %land.lhs.true190, label %if.else195, !dbg !10258

land.lhs.true190:                                 ; preds = %if.then186
  %call191 = call zeroext i8 @range_is_nonnull(%struct.value_range_d* %vr1), !dbg !10259
  %conv192 = zext i8 %call191 to i32, !dbg !10259
  %tobool193 = icmp ne i32 %conv192, 0, !dbg !10259
  br i1 %tobool193, label %if.then194, label %if.else195, !dbg !10260

if.then194:                                       ; preds = %land.lhs.true190
  %86 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10261
  %87 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10262
  call void @set_value_range_to_nonnull(%struct.value_range_d* %86, %union.tree_node* %87), !dbg !10263
  br label %if.end206, !dbg !10263

if.else195:                                       ; preds = %land.lhs.true190, %if.then186
  %call196 = call zeroext i8 @range_is_null(%struct.value_range_d* %vr0), !dbg !10264
  %conv197 = zext i8 %call196 to i32, !dbg !10264
  %tobool198 = icmp ne i32 %conv197, 0, !dbg !10264
  br i1 %tobool198, label %land.lhs.true199, label %if.else204, !dbg !10266

land.lhs.true199:                                 ; preds = %if.else195
  %call200 = call zeroext i8 @range_is_null(%struct.value_range_d* %vr1), !dbg !10267
  %conv201 = zext i8 %call200 to i32, !dbg !10267
  %tobool202 = icmp ne i32 %conv201, 0, !dbg !10267
  br i1 %tobool202, label %if.then203, label %if.else204, !dbg !10268

if.then203:                                       ; preds = %land.lhs.true199
  %88 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10269
  %89 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10270
  call void @set_value_range_to_null(%struct.value_range_d* %88, %union.tree_node* %89), !dbg !10271
  br label %if.end205, !dbg !10271

if.else204:                                       ; preds = %land.lhs.true199, %if.else195
  %90 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10272
  call void @set_value_range_to_varying(%struct.value_range_d* %90), !dbg !10273
  br label %if.end205

if.end205:                                        ; preds = %if.else204, %if.then203
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then194
  br label %if.end996, !dbg !10274

if.end207:                                        ; preds = %lor.lhs.false183
  %91 = load i32, i32* %code.addr, align 4, !dbg !10275
  %cmp208 = icmp eq i32 %91, 66, !dbg !10275
  br i1 %cmp208, label %cond.false211, label %cond.true210, !dbg !10275

cond.true210:                                     ; preds = %if.end207
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 2171, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !10275
  br label %cond.end212, !dbg !10275

cond.false211:                                    ; preds = %if.end207
  br label %cond.end212, !dbg !10275

cond.end212:                                      ; preds = %cond.false211, %cond.true210
  %cond213 = phi i32 [ 0, %cond.true210 ], [ 0, %cond.false211 ], !dbg !10275
  %call214 = call zeroext i8 @range_is_nonnull(%struct.value_range_d* %vr0), !dbg !10276
  %conv215 = zext i8 %call214 to i32, !dbg !10276
  %tobool216 = icmp ne i32 %conv215, 0, !dbg !10276
  br i1 %tobool216, label %if.then221, label %lor.lhs.false217, !dbg !10278

lor.lhs.false217:                                 ; preds = %cond.end212
  %call218 = call zeroext i8 @range_is_nonnull(%struct.value_range_d* %vr1), !dbg !10279
  %conv219 = zext i8 %call218 to i32, !dbg !10279
  %tobool220 = icmp ne i32 %conv219, 0, !dbg !10279
  br i1 %tobool220, label %if.then221, label %if.else222, !dbg !10280

if.then221:                                       ; preds = %lor.lhs.false217, %cond.end212
  %92 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10281
  %93 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10282
  call void @set_value_range_to_nonnull(%struct.value_range_d* %92, %union.tree_node* %93), !dbg !10283
  br label %if.end233, !dbg !10283

if.else222:                                       ; preds = %lor.lhs.false217
  %call223 = call zeroext i8 @range_is_null(%struct.value_range_d* %vr0), !dbg !10284
  %conv224 = zext i8 %call223 to i32, !dbg !10284
  %tobool225 = icmp ne i32 %conv224, 0, !dbg !10284
  br i1 %tobool225, label %land.lhs.true226, label %if.else231, !dbg !10286

land.lhs.true226:                                 ; preds = %if.else222
  %call227 = call zeroext i8 @range_is_null(%struct.value_range_d* %vr1), !dbg !10287
  %conv228 = zext i8 %call227 to i32, !dbg !10287
  %tobool229 = icmp ne i32 %conv228, 0, !dbg !10287
  br i1 %tobool229, label %if.then230, label %if.else231, !dbg !10288

if.then230:                                       ; preds = %land.lhs.true226
  %94 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10289
  %95 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10290
  call void @set_value_range_to_null(%struct.value_range_d* %94, %union.tree_node* %95), !dbg !10291
  br label %if.end232, !dbg !10291

if.else231:                                       ; preds = %land.lhs.true226, %if.else222
  %96 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10292
  call void @set_value_range_to_varying(%struct.value_range_d* %96), !dbg !10293
  br label %if.end232

if.end232:                                        ; preds = %if.else231, %if.then230
  br label %if.end233

if.end233:                                        ; preds = %if.end232, %if.then221
  br label %if.end996, !dbg !10294

if.end234:                                        ; preds = %lor.lhs.false171
  %97 = load i32, i32* %code.addr, align 4, !dbg !10295
  %cmp235 = icmp eq i32 %97, 93, !dbg !10297
  br i1 %cmp235, label %if.then240, label %lor.lhs.false237, !dbg !10298

lor.lhs.false237:                                 ; preds = %if.end234
  %98 = load i32, i32* %code.addr, align 4, !dbg !10299
  %cmp238 = icmp eq i32 %98, 94, !dbg !10300
  br i1 %cmp238, label %if.then240, label %if.else334, !dbg !10301

if.then240:                                       ; preds = %lor.lhs.false237, %if.end234
  %99 = load i32, i32* %code.addr, align 4, !dbg !10302
  %cmp241 = icmp eq i32 %99, 93, !dbg !10305
  br i1 %cmp241, label %land.lhs.true243, label %if.else269, !dbg !10306

land.lhs.true243:                                 ; preds = %if.then240
  %type244 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10307
  %100 = load i32, i32* %type244, align 8, !dbg !10307
  %cmp245 = icmp eq i32 %100, 1, !dbg !10308
  br i1 %cmp245, label %land.lhs.true247, label %lor.lhs.false255, !dbg !10309

land.lhs.true247:                                 ; preds = %land.lhs.true243
  %min248 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10310
  %101 = load %union.tree_node*, %union.tree_node** %min248, align 8, !dbg !10310
  %call249 = call i32 @integer_zerop(%union.tree_node* %101), !dbg !10311
  %tobool250 = icmp ne i32 %call249, 0, !dbg !10311
  br i1 %tobool250, label %land.lhs.true251, label %lor.lhs.false255, !dbg !10312

land.lhs.true251:                                 ; preds = %land.lhs.true247
  %max252 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10313
  %102 = load %union.tree_node*, %union.tree_node** %max252, align 8, !dbg !10313
  %call253 = call i32 @integer_zerop(%union.tree_node* %102), !dbg !10314
  %tobool254 = icmp ne i32 %call253, 0, !dbg !10314
  br i1 %tobool254, label %if.then267, label %lor.lhs.false255, !dbg !10315

lor.lhs.false255:                                 ; preds = %land.lhs.true251, %land.lhs.true247, %land.lhs.true243
  %type256 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10316
  %103 = load i32, i32* %type256, align 8, !dbg !10316
  %cmp257 = icmp eq i32 %103, 1, !dbg !10317
  br i1 %cmp257, label %land.lhs.true259, label %if.else269, !dbg !10318

land.lhs.true259:                                 ; preds = %lor.lhs.false255
  %min260 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10319
  %104 = load %union.tree_node*, %union.tree_node** %min260, align 8, !dbg !10319
  %call261 = call i32 @integer_zerop(%union.tree_node* %104), !dbg !10320
  %tobool262 = icmp ne i32 %call261, 0, !dbg !10320
  br i1 %tobool262, label %land.lhs.true263, label %if.else269, !dbg !10321

land.lhs.true263:                                 ; preds = %land.lhs.true259
  %max264 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10322
  %105 = load %union.tree_node*, %union.tree_node** %max264, align 8, !dbg !10322
  %call265 = call i32 @integer_zerop(%union.tree_node* %105), !dbg !10323
  %tobool266 = icmp ne i32 %call265, 0, !dbg !10323
  br i1 %tobool266, label %if.then267, label %if.else269, !dbg !10324

if.then267:                                       ; preds = %land.lhs.true263, %land.lhs.true251
  store i32 1, i32* %type, align 4, !dbg !10325
  %106 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10327
  %call268 = call %union.tree_node* @build_int_cst(%union.tree_node* %106, i64 0), !dbg !10328
  store %union.tree_node* %call268, %union.tree_node** %max, align 8, !dbg !10329
  store %union.tree_node* %call268, %union.tree_node** %min, align 8, !dbg !10330
  br label %if.end333, !dbg !10331

if.else269:                                       ; preds = %land.lhs.true263, %land.lhs.true259, %lor.lhs.false255, %if.then240
  %107 = load i32, i32* %code.addr, align 4, !dbg !10332
  %cmp270 = icmp eq i32 %107, 94, !dbg !10334
  br i1 %cmp270, label %land.lhs.true272, label %if.else298, !dbg !10335

land.lhs.true272:                                 ; preds = %if.else269
  %type273 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10336
  %108 = load i32, i32* %type273, align 8, !dbg !10336
  %cmp274 = icmp eq i32 %108, 1, !dbg !10337
  br i1 %cmp274, label %land.lhs.true276, label %lor.lhs.false284, !dbg !10338

land.lhs.true276:                                 ; preds = %land.lhs.true272
  %min277 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10339
  %109 = load %union.tree_node*, %union.tree_node** %min277, align 8, !dbg !10339
  %call278 = call i32 @integer_onep(%union.tree_node* %109), !dbg !10340
  %tobool279 = icmp ne i32 %call278, 0, !dbg !10340
  br i1 %tobool279, label %land.lhs.true280, label %lor.lhs.false284, !dbg !10341

land.lhs.true280:                                 ; preds = %land.lhs.true276
  %max281 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10342
  %110 = load %union.tree_node*, %union.tree_node** %max281, align 8, !dbg !10342
  %call282 = call i32 @integer_onep(%union.tree_node* %110), !dbg !10343
  %tobool283 = icmp ne i32 %call282, 0, !dbg !10343
  br i1 %tobool283, label %if.then296, label %lor.lhs.false284, !dbg !10344

lor.lhs.false284:                                 ; preds = %land.lhs.true280, %land.lhs.true276, %land.lhs.true272
  %type285 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10345
  %111 = load i32, i32* %type285, align 8, !dbg !10345
  %cmp286 = icmp eq i32 %111, 1, !dbg !10346
  br i1 %cmp286, label %land.lhs.true288, label %if.else298, !dbg !10347

land.lhs.true288:                                 ; preds = %lor.lhs.false284
  %min289 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10348
  %112 = load %union.tree_node*, %union.tree_node** %min289, align 8, !dbg !10348
  %call290 = call i32 @integer_onep(%union.tree_node* %112), !dbg !10349
  %tobool291 = icmp ne i32 %call290, 0, !dbg !10349
  br i1 %tobool291, label %land.lhs.true292, label %if.else298, !dbg !10350

land.lhs.true292:                                 ; preds = %land.lhs.true288
  %max293 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10351
  %113 = load %union.tree_node*, %union.tree_node** %max293, align 8, !dbg !10351
  %call294 = call i32 @integer_onep(%union.tree_node* %113), !dbg !10352
  %tobool295 = icmp ne i32 %call294, 0, !dbg !10352
  br i1 %tobool295, label %if.then296, label %if.else298, !dbg !10353

if.then296:                                       ; preds = %land.lhs.true292, %land.lhs.true280
  store i32 1, i32* %type, align 4, !dbg !10354
  %114 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10356
  %call297 = call %union.tree_node* @build_int_cst(%union.tree_node* %114, i64 1), !dbg !10357
  store %union.tree_node* %call297, %union.tree_node** %max, align 8, !dbg !10358
  store %union.tree_node* %call297, %union.tree_node** %min, align 8, !dbg !10359
  br label %if.end332, !dbg !10360

if.else298:                                       ; preds = %land.lhs.true292, %land.lhs.true288, %lor.lhs.false284, %if.else269
  %type299 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10361
  %115 = load i32, i32* %type299, align 8, !dbg !10361
  %cmp300 = icmp ne i32 %115, 3, !dbg !10363
  br i1 %cmp300, label %land.lhs.true302, label %if.else330, !dbg !10364

land.lhs.true302:                                 ; preds = %if.else298
  %type303 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10365
  %116 = load i32, i32* %type303, align 8, !dbg !10365
  %cmp304 = icmp ne i32 %116, 3, !dbg !10366
  br i1 %cmp304, label %land.lhs.true306, label %if.else330, !dbg !10367

land.lhs.true306:                                 ; preds = %land.lhs.true302
  %type307 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10368
  %117 = load i32, i32* %type307, align 8, !dbg !10368
  %type308 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10369
  %118 = load i32, i32* %type308, align 8, !dbg !10369
  %cmp309 = icmp eq i32 %117, %118, !dbg !10370
  br i1 %cmp309, label %land.lhs.true311, label %if.else330, !dbg !10371

land.lhs.true311:                                 ; preds = %land.lhs.true306
  %call312 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr0), !dbg !10372
  %tobool313 = icmp ne i8 %call312, 0, !dbg !10372
  br i1 %tobool313, label %if.else330, label %land.lhs.true314, !dbg !10373

land.lhs.true314:                                 ; preds = %land.lhs.true311
  %call315 = call zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr0), !dbg !10374
  %tobool316 = icmp ne i8 %call315, 0, !dbg !10374
  br i1 %tobool316, label %if.else330, label %land.lhs.true317, !dbg !10375

land.lhs.true317:                                 ; preds = %land.lhs.true314
  %call318 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr1), !dbg !10376
  %tobool319 = icmp ne i8 %call318, 0, !dbg !10376
  br i1 %tobool319, label %if.else330, label %land.lhs.true320, !dbg !10377

land.lhs.true320:                                 ; preds = %land.lhs.true317
  %call321 = call zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr1), !dbg !10378
  %tobool322 = icmp ne i8 %call321, 0, !dbg !10378
  br i1 %tobool322, label %if.else330, label %if.then323, !dbg !10379

if.then323:                                       ; preds = %land.lhs.true320
  %119 = load i32, i32* %code.addr, align 4, !dbg !10380
  %120 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10380
  %min324 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10380
  %121 = load %union.tree_node*, %union.tree_node** %min324, align 8, !dbg !10380
  %min325 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10380
  %122 = load %union.tree_node*, %union.tree_node** %min325, align 8, !dbg !10380
  %call326 = call %union.tree_node* @fold_binary_loc(i32 0, i32 %119, %union.tree_node* %120, %union.tree_node* %121, %union.tree_node* %122), !dbg !10380
  store %union.tree_node* %call326, %union.tree_node** %min, align 8, !dbg !10382
  %123 = load i32, i32* %code.addr, align 4, !dbg !10383
  %124 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10383
  %max327 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10383
  %125 = load %union.tree_node*, %union.tree_node** %max327, align 8, !dbg !10383
  %max328 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10383
  %126 = load %union.tree_node*, %union.tree_node** %max328, align 8, !dbg !10383
  %call329 = call %union.tree_node* @fold_binary_loc(i32 0, i32 %123, %union.tree_node* %124, %union.tree_node* %125, %union.tree_node* %126), !dbg !10383
  store %union.tree_node* %call329, %union.tree_node** %max, align 8, !dbg !10384
  br label %if.end331, !dbg !10385

if.else330:                                       ; preds = %land.lhs.true320, %land.lhs.true317, %land.lhs.true314, %land.lhs.true311, %land.lhs.true306, %land.lhs.true302, %if.else298
  %127 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10386
  %128 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10388
  call void @set_value_range_to_truthvalue(%struct.value_range_d* %127, %union.tree_node* %128), !dbg !10389
  br label %if.end996, !dbg !10390

if.end331:                                        ; preds = %if.then323
  br label %if.end332

if.end332:                                        ; preds = %if.end331, %if.then296
  br label %if.end333

if.end333:                                        ; preds = %if.end332, %if.then267
  br label %if.end937, !dbg !10391

if.else334:                                       ; preds = %lor.lhs.false237
  %129 = load i32, i32* %code.addr, align 4, !dbg !10392
  %cmp335 = icmp eq i32 %129, 63, !dbg !10394
  br i1 %cmp335, label %if.then343, label %lor.lhs.false337, !dbg !10395

lor.lhs.false337:                                 ; preds = %if.else334
  %130 = load i32, i32* %code.addr, align 4, !dbg !10396
  %cmp338 = icmp eq i32 %130, 80, !dbg !10397
  br i1 %cmp338, label %if.then343, label %lor.lhs.false340, !dbg !10398

lor.lhs.false340:                                 ; preds = %lor.lhs.false337
  %131 = load i32, i32* %code.addr, align 4, !dbg !10399
  %cmp341 = icmp eq i32 %131, 81, !dbg !10400
  br i1 %cmp341, label %if.then343, label %if.else396, !dbg !10401

if.then343:                                       ; preds = %lor.lhs.false340, %lor.lhs.false337, %if.else334
  %132 = load i32, i32* %code.addr, align 4, !dbg !10402
  %cmp344 = icmp eq i32 %132, 63, !dbg !10405
  br i1 %cmp344, label %land.lhs.true346, label %if.end351, !dbg !10406

land.lhs.true346:                                 ; preds = %if.then343
  %type347 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10407
  %133 = load i32, i32* %type347, align 8, !dbg !10407
  %cmp348 = icmp eq i32 %133, 2, !dbg !10408
  br i1 %cmp348, label %if.then350, label %if.end351, !dbg !10409

if.then350:                                       ; preds = %land.lhs.true346
  %134 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10410
  call void @set_value_range_to_varying(%struct.value_range_d* %134), !dbg !10412
  br label %if.end996, !dbg !10413

if.end351:                                        ; preds = %land.lhs.true346, %if.then343
  %135 = load i32, i32* %code.addr, align 4, !dbg !10414
  %min352 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10415
  %136 = load %union.tree_node*, %union.tree_node** %min352, align 8, !dbg !10415
  %min353 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10416
  %137 = load %union.tree_node*, %union.tree_node** %min353, align 8, !dbg !10416
  %call354 = call %union.tree_node* @vrp_int_const_binop(i32 %135, %union.tree_node* %136, %union.tree_node* %137), !dbg !10417
  store %union.tree_node* %call354, %union.tree_node** %min, align 8, !dbg !10418
  %138 = load i32, i32* %code.addr, align 4, !dbg !10419
  %max355 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10420
  %139 = load %union.tree_node*, %union.tree_node** %max355, align 8, !dbg !10420
  %max356 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10421
  %140 = load %union.tree_node*, %union.tree_node** %max356, align 8, !dbg !10421
  %call357 = call %union.tree_node* @vrp_int_const_binop(i32 %138, %union.tree_node* %139, %union.tree_node* %140), !dbg !10422
  store %union.tree_node* %call357, %union.tree_node** %max, align 8, !dbg !10423
  %141 = load i32, i32* %code.addr, align 4, !dbg !10424
  %cmp358 = icmp eq i32 %141, 63, !dbg !10426
  br i1 %cmp358, label %land.lhs.true360, label %if.end395, !dbg !10427

land.lhs.true360:                                 ; preds = %if.end351
  %142 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !10428
  %base361 = bitcast %union.tree_node* %142 to %struct.tree_base*, !dbg !10428
  %143 = bitcast %struct.tree_base* %base361 to i64*, !dbg !10428
  %bf.load362 = load i64, i64* %143, align 8, !dbg !10428
  %bf.lshr = lshr i64 %bf.load362, 27, !dbg !10428
  %bf.clear363 = and i64 %bf.lshr, 1, !dbg !10428
  %bf.cast364 = trunc i64 %bf.clear363 to i32, !dbg !10428
  %tobool365 = icmp ne i32 %bf.cast364, 0, !dbg !10428
  br i1 %tobool365, label %land.lhs.true366, label %if.end395, !dbg !10429

land.lhs.true366:                                 ; preds = %land.lhs.true360
  %144 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !10430
  %call367 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %144), !dbg !10431
  %tobool368 = icmp ne i8 %call367, 0, !dbg !10431
  br i1 %tobool368, label %if.end395, label %land.lhs.true369, !dbg !10432

land.lhs.true369:                                 ; preds = %land.lhs.true366
  %145 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !10433
  %base370 = bitcast %union.tree_node* %145 to %struct.tree_base*, !dbg !10433
  %146 = bitcast %struct.tree_base* %base370 to i64*, !dbg !10433
  %bf.load371 = load i64, i64* %146, align 8, !dbg !10433
  %bf.lshr372 = lshr i64 %bf.load371, 27, !dbg !10433
  %bf.clear373 = and i64 %bf.lshr372, 1, !dbg !10433
  %bf.cast374 = trunc i64 %bf.clear373 to i32, !dbg !10433
  %tobool375 = icmp ne i32 %bf.cast374, 0, !dbg !10433
  br i1 %tobool375, label %land.lhs.true376, label %if.end395, !dbg !10434

land.lhs.true376:                                 ; preds = %land.lhs.true369
  %147 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !10435
  %call377 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %147), !dbg !10436
  %tobool378 = icmp ne i8 %call377, 0, !dbg !10436
  br i1 %tobool378, label %if.end395, label %if.then379, !dbg !10437

if.then379:                                       ; preds = %land.lhs.true376
  %148 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !10438
  %common380 = bitcast %union.tree_node* %148 to %struct.tree_common*, !dbg !10438
  %type381 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common380, i32 0, i32 2, !dbg !10438
  %149 = load %union.tree_node*, %union.tree_node** %type381, align 8, !dbg !10438
  %150 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !10440
  %int_cst = bitcast %union.tree_node* %150 to %struct.tree_int_cst*, !dbg !10440
  %int_cst382 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !10440
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst382, i32 0, i32 0, !dbg !10440
  %151 = load i64, i64* %low, align 8, !dbg !10440
  %152 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !10441
  %int_cst383 = bitcast %union.tree_node* %152 to %struct.tree_int_cst*, !dbg !10441
  %int_cst384 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst383, i32 0, i32 1, !dbg !10441
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst384, i32 0, i32 1, !dbg !10441
  %153 = load i64, i64* %high, align 8, !dbg !10441
  %call385 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %149, i64 %151, i64 %153), !dbg !10442
  store %union.tree_node* %call385, %union.tree_node** %min, align 8, !dbg !10443
  %154 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !10444
  %common386 = bitcast %union.tree_node* %154 to %struct.tree_common*, !dbg !10444
  %type387 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common386, i32 0, i32 2, !dbg !10444
  %155 = load %union.tree_node*, %union.tree_node** %type387, align 8, !dbg !10444
  %156 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !10445
  %int_cst388 = bitcast %union.tree_node* %156 to %struct.tree_int_cst*, !dbg !10445
  %int_cst389 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst388, i32 0, i32 1, !dbg !10445
  %low390 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst389, i32 0, i32 0, !dbg !10445
  %157 = load i64, i64* %low390, align 8, !dbg !10445
  %158 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !10446
  %int_cst391 = bitcast %union.tree_node* %158 to %struct.tree_int_cst*, !dbg !10446
  %int_cst392 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst391, i32 0, i32 1, !dbg !10446
  %high393 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst392, i32 0, i32 1, !dbg !10446
  %159 = load i64, i64* %high393, align 8, !dbg !10446
  %call394 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %155, i64 %157, i64 %159), !dbg !10447
  store %union.tree_node* %call394, %union.tree_node** %max, align 8, !dbg !10448
  br label %if.end395, !dbg !10449

if.end395:                                        ; preds = %if.then379, %land.lhs.true376, %land.lhs.true369, %land.lhs.true366, %land.lhs.true360, %if.end351
  br label %if.end936, !dbg !10450

if.else396:                                       ; preds = %lor.lhs.false340
  %160 = load i32, i32* %code.addr, align 4, !dbg !10451
  %cmp397 = icmp eq i32 %160, 65, !dbg !10453
  br i1 %cmp397, label %if.then417, label %lor.lhs.false399, !dbg !10454

lor.lhs.false399:                                 ; preds = %if.else396
  %161 = load i32, i32* %code.addr, align 4, !dbg !10455
  %cmp400 = icmp eq i32 %161, 67, !dbg !10456
  br i1 %cmp400, label %if.then417, label %lor.lhs.false402, !dbg !10457

lor.lhs.false402:                                 ; preds = %lor.lhs.false399
  %162 = load i32, i32* %code.addr, align 4, !dbg !10458
  %cmp403 = icmp eq i32 %162, 69, !dbg !10459
  br i1 %cmp403, label %if.then417, label %lor.lhs.false405, !dbg !10460

lor.lhs.false405:                                 ; preds = %lor.lhs.false402
  %163 = load i32, i32* %code.addr, align 4, !dbg !10461
  %cmp406 = icmp eq i32 %163, 68, !dbg !10462
  br i1 %cmp406, label %if.then417, label %lor.lhs.false408, !dbg !10463

lor.lhs.false408:                                 ; preds = %lor.lhs.false405
  %164 = load i32, i32* %code.addr, align 4, !dbg !10464
  %cmp409 = icmp eq i32 %164, 76, !dbg !10465
  br i1 %cmp409, label %if.then417, label %lor.lhs.false411, !dbg !10466

lor.lhs.false411:                                 ; preds = %lor.lhs.false408
  %165 = load i32, i32* %code.addr, align 4, !dbg !10467
  %cmp412 = icmp eq i32 %165, 70, !dbg !10468
  br i1 %cmp412, label %if.then417, label %lor.lhs.false414, !dbg !10469

lor.lhs.false414:                                 ; preds = %lor.lhs.false411
  %166 = load i32, i32* %code.addr, align 4, !dbg !10470
  %cmp415 = icmp eq i32 %166, 84, !dbg !10471
  br i1 %cmp415, label %if.then417, label %if.else749, !dbg !10472

if.then417:                                       ; preds = %lor.lhs.false414, %lor.lhs.false411, %lor.lhs.false408, %lor.lhs.false405, %lor.lhs.false402, %lor.lhs.false399, %if.else396
  call void @llvm.dbg.declare(metadata [4 x %union.tree_node*]* %val, metadata !10473, metadata !DIExpression()), !dbg !10476
  call void @llvm.dbg.declare(metadata i64* %i, metadata !10477, metadata !DIExpression()), !dbg !10478
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !10479, metadata !DIExpression()), !dbg !10480
  %167 = load i32, i32* %code.addr, align 4, !dbg !10481
  %cmp418 = icmp eq i32 %167, 65, !dbg !10483
  br i1 %cmp418, label %land.lhs.true420, label %if.end440, !dbg !10484

land.lhs.true420:                                 ; preds = %if.then417
  %type421 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10485
  %168 = load i32, i32* %type421, align 8, !dbg !10485
  %cmp422 = icmp eq i32 %168, 2, !dbg !10486
  br i1 %cmp422, label %land.lhs.true424, label %if.end440, !dbg !10487

land.lhs.true424:                                 ; preds = %land.lhs.true420
  %169 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10488
  %common425 = bitcast %union.tree_node* %169 to %struct.tree_common*, !dbg !10488
  %type426 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common425, i32 0, i32 2, !dbg !10488
  %170 = load %union.tree_node*, %union.tree_node** %type426, align 8, !dbg !10488
  %base427 = bitcast %union.tree_node* %170 to %struct.tree_base*, !dbg !10488
  %171 = bitcast %struct.tree_base* %base427 to i64*, !dbg !10488
  %bf.load428 = load i64, i64* %171, align 8, !dbg !10488
  %bf.lshr429 = lshr i64 %bf.load428, 21, !dbg !10488
  %bf.clear430 = and i64 %bf.lshr429, 1, !dbg !10488
  %bf.cast431 = trunc i64 %bf.clear430 to i32, !dbg !10488
  %tobool432 = icmp ne i32 %bf.cast431, 0, !dbg !10488
  br i1 %tobool432, label %if.then439, label %land.lhs.true433, !dbg !10488

land.lhs.true433:                                 ; preds = %land.lhs.true424
  %172 = load i32, i32* @flag_wrapv, align 4, !dbg !10488
  %tobool434 = icmp ne i32 %172, 0, !dbg !10488
  br i1 %tobool434, label %if.then439, label %land.lhs.true435, !dbg !10488

land.lhs.true435:                                 ; preds = %land.lhs.true433
  %173 = load i32, i32* @flag_trapv, align 4, !dbg !10488
  %tobool436 = icmp ne i32 %173, 0, !dbg !10488
  br i1 %tobool436, label %if.then439, label %land.lhs.true437, !dbg !10488

land.lhs.true437:                                 ; preds = %land.lhs.true435
  %174 = load i32, i32* @flag_strict_overflow, align 4, !dbg !10488
  %tobool438 = icmp ne i32 %174, 0, !dbg !10488
  br i1 %tobool438, label %if.end440, label %if.then439, !dbg !10489

if.then439:                                       ; preds = %land.lhs.true437, %land.lhs.true435, %land.lhs.true433, %land.lhs.true424
  %175 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10490
  call void @set_value_range_to_varying(%struct.value_range_d* %175), !dbg !10492
  br label %if.end996, !dbg !10493

if.end440:                                        ; preds = %land.lhs.true437, %land.lhs.true420, %if.then417
  %176 = load i32, i32* %code.addr, align 4, !dbg !10494
  %cmp441 = icmp eq i32 %176, 84, !dbg !10496
  br i1 %cmp441, label %if.then443, label %if.else465, !dbg !10497

if.then443:                                       ; preds = %if.end440
  %type444 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10498
  %177 = load i32, i32* %type444, align 8, !dbg !10498
  %cmp445 = icmp eq i32 %177, 2, !dbg !10501
  br i1 %cmp445, label %if.then463, label %lor.lhs.false447, !dbg !10502

lor.lhs.false447:                                 ; preds = %if.then443
  %178 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10503
  %call448 = call zeroext i8 @vrp_expr_computes_nonnegative(%union.tree_node* %178, i8* %sop), !dbg !10504
  %tobool449 = icmp ne i8 %call448, 0, !dbg !10504
  br i1 %tobool449, label %lor.lhs.false450, label %if.then463, !dbg !10505

lor.lhs.false450:                                 ; preds = %lor.lhs.false447
  %max451 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10506
  %179 = load %union.tree_node*, %union.tree_node** %max451, align 8, !dbg !10506
  %common452 = bitcast %union.tree_node* %179 to %struct.tree_common*, !dbg !10506
  %type453 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common452, i32 0, i32 2, !dbg !10506
  %180 = load %union.tree_node*, %union.tree_node** %type453, align 8, !dbg !10506
  %181 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10507
  %type454 = bitcast %union.tree_node* %181 to %struct.tree_type*, !dbg !10507
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type454, i32 0, i32 6, !dbg !10507
  %bf.load455 = load i32, i32* %precision, align 4, !dbg !10507
  %bf.clear456 = and i32 %bf.load455, 1023, !dbg !10507
  %sub = sub nsw i32 %bf.clear456, 1, !dbg !10508
  %conv457 = sext i32 %sub to i64, !dbg !10507
  %call458 = call %union.tree_node* @build_int_cst(%union.tree_node* %180, i64 %conv457), !dbg !10509
  %max459 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10510
  %182 = load %union.tree_node*, %union.tree_node** %max459, align 8, !dbg !10510
  %call460 = call i32 @operand_less_p(%union.tree_node* %call458, %union.tree_node* %182), !dbg !10511
  %cmp461 = icmp ne i32 %call460, 0, !dbg !10512
  br i1 %cmp461, label %if.then463, label %if.end464, !dbg !10513

if.then463:                                       ; preds = %lor.lhs.false450, %lor.lhs.false447, %if.then443
  %183 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10514
  call void @set_value_range_to_varying(%struct.value_range_d* %183), !dbg !10516
  br label %if.end996, !dbg !10517

if.end464:                                        ; preds = %lor.lhs.false450
  br label %if.end511, !dbg !10518

if.else465:                                       ; preds = %if.end440
  %184 = load i32, i32* %code.addr, align 4, !dbg !10519
  %cmp466 = icmp eq i32 %184, 67, !dbg !10521
  br i1 %cmp466, label %land.lhs.true480, label %lor.lhs.false468, !dbg !10522

lor.lhs.false468:                                 ; preds = %if.else465
  %185 = load i32, i32* %code.addr, align 4, !dbg !10523
  %cmp469 = icmp eq i32 %185, 69, !dbg !10524
  br i1 %cmp469, label %land.lhs.true480, label %lor.lhs.false471, !dbg !10525

lor.lhs.false471:                                 ; preds = %lor.lhs.false468
  %186 = load i32, i32* %code.addr, align 4, !dbg !10526
  %cmp472 = icmp eq i32 %186, 68, !dbg !10527
  br i1 %cmp472, label %land.lhs.true480, label %lor.lhs.false474, !dbg !10528

lor.lhs.false474:                                 ; preds = %lor.lhs.false471
  %187 = load i32, i32* %code.addr, align 4, !dbg !10529
  %cmp475 = icmp eq i32 %187, 76, !dbg !10530
  br i1 %cmp475, label %land.lhs.true480, label %lor.lhs.false477, !dbg !10531

lor.lhs.false477:                                 ; preds = %lor.lhs.false474
  %188 = load i32, i32* %code.addr, align 4, !dbg !10532
  %cmp478 = icmp eq i32 %188, 70, !dbg !10533
  br i1 %cmp478, label %land.lhs.true480, label %if.end510, !dbg !10534

land.lhs.true480:                                 ; preds = %lor.lhs.false477, %lor.lhs.false474, %lor.lhs.false471, %lor.lhs.false468, %if.else465
  %type481 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10535
  %189 = load i32, i32* %type481, align 8, !dbg !10535
  %cmp482 = icmp ne i32 %189, 1, !dbg !10536
  br i1 %cmp482, label %if.then488, label %lor.lhs.false484, !dbg !10537

lor.lhs.false484:                                 ; preds = %land.lhs.true480
  %call485 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr0), !dbg !10538
  %conv486 = zext i8 %call485 to i32, !dbg !10538
  %tobool487 = icmp ne i32 %conv486, 0, !dbg !10538
  br i1 %tobool487, label %if.then488, label %if.end510, !dbg !10539

if.then488:                                       ; preds = %lor.lhs.false484, %land.lhs.true480
  %type489 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10540
  %190 = load i32, i32* %type489, align 8, !dbg !10540
  %cmp490 = icmp eq i32 %190, 1, !dbg !10543
  br i1 %cmp490, label %land.lhs.true492, label %if.else508, !dbg !10544

land.lhs.true492:                                 ; preds = %if.then488
  %call493 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr1), !dbg !10545
  %tobool494 = icmp ne i8 %call493, 0, !dbg !10545
  br i1 %tobool494, label %if.else508, label %land.lhs.true495, !dbg !10546

land.lhs.true495:                                 ; preds = %land.lhs.true492
  %call496 = call zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr1), !dbg !10547
  %tobool497 = icmp ne i8 %call496, 0, !dbg !10547
  br i1 %tobool497, label %if.else508, label %if.then498, !dbg !10548

if.then498:                                       ; preds = %land.lhs.true495
  store i32 1, i32* %type, align 4, !dbg !10549
  %type499 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10551
  store i32 1, i32* %type499, align 8, !dbg !10552
  %191 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10553
  %common500 = bitcast %union.tree_node* %191 to %struct.tree_common*, !dbg !10553
  %type501 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common500, i32 0, i32 2, !dbg !10553
  %192 = load %union.tree_node*, %union.tree_node** %type501, align 8, !dbg !10553
  %call502 = call %union.tree_node* @vrp_val_min(%union.tree_node* %192), !dbg !10554
  %min503 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10555
  store %union.tree_node* %call502, %union.tree_node** %min503, align 8, !dbg !10556
  %193 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10557
  %common504 = bitcast %union.tree_node* %193 to %struct.tree_common*, !dbg !10557
  %type505 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common504, i32 0, i32 2, !dbg !10557
  %194 = load %union.tree_node*, %union.tree_node** %type505, align 8, !dbg !10557
  %call506 = call %union.tree_node* @vrp_val_max(%union.tree_node* %194), !dbg !10558
  %max507 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10559
  store %union.tree_node* %call506, %union.tree_node** %max507, align 8, !dbg !10560
  br label %if.end509, !dbg !10561

if.else508:                                       ; preds = %land.lhs.true495, %land.lhs.true492, %if.then488
  %195 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10562
  call void @set_value_range_to_varying(%struct.value_range_d* %195), !dbg !10564
  br label %if.end996, !dbg !10565

if.end509:                                        ; preds = %if.then498
  br label %if.end510, !dbg !10566

if.end510:                                        ; preds = %if.end509, %lor.lhs.false484, %lor.lhs.false477
  br label %if.end511

if.end511:                                        ; preds = %if.end510, %if.end464
  %196 = load i32, i32* %code.addr, align 4, !dbg !10567
  %cmp512 = icmp eq i32 %196, 67, !dbg !10569
  br i1 %cmp512, label %land.lhs.true526, label %lor.lhs.false514, !dbg !10570

lor.lhs.false514:                                 ; preds = %if.end511
  %197 = load i32, i32* %code.addr, align 4, !dbg !10571
  %cmp515 = icmp eq i32 %197, 69, !dbg !10572
  br i1 %cmp515, label %land.lhs.true526, label %lor.lhs.false517, !dbg !10573

lor.lhs.false517:                                 ; preds = %lor.lhs.false514
  %198 = load i32, i32* %code.addr, align 4, !dbg !10574
  %cmp518 = icmp eq i32 %198, 68, !dbg !10575
  br i1 %cmp518, label %land.lhs.true526, label %lor.lhs.false520, !dbg !10576

lor.lhs.false520:                                 ; preds = %lor.lhs.false517
  %199 = load i32, i32* %code.addr, align 4, !dbg !10577
  %cmp521 = icmp eq i32 %199, 76, !dbg !10578
  br i1 %cmp521, label %land.lhs.true526, label %lor.lhs.false523, !dbg !10579

lor.lhs.false523:                                 ; preds = %lor.lhs.false520
  %200 = load i32, i32* %code.addr, align 4, !dbg !10580
  %cmp524 = icmp eq i32 %200, 70, !dbg !10581
  br i1 %cmp524, label %land.lhs.true526, label %if.else594, !dbg !10582

land.lhs.true526:                                 ; preds = %lor.lhs.false523, %lor.lhs.false520, %lor.lhs.false517, %lor.lhs.false514, %if.end511
  %type527 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10583
  %201 = load i32, i32* %type527, align 8, !dbg !10583
  %cmp528 = icmp eq i32 %201, 1, !dbg !10584
  br i1 %cmp528, label %land.lhs.true530, label %if.else594, !dbg !10585

land.lhs.true530:                                 ; preds = %land.lhs.true526
  %type531 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10586
  %202 = load i32, i32* %type531, align 8, !dbg !10586
  %cmp532 = icmp ne i32 %202, 1, !dbg !10587
  br i1 %cmp532, label %if.then542, label %lor.lhs.false534, !dbg !10588

lor.lhs.false534:                                 ; preds = %land.lhs.true530
  %call535 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr1), !dbg !10589
  %conv536 = zext i8 %call535 to i32, !dbg !10589
  %tobool537 = icmp ne i32 %conv536, 0, !dbg !10589
  br i1 %tobool537, label %if.then542, label %lor.lhs.false538, !dbg !10590

lor.lhs.false538:                                 ; preds = %lor.lhs.false534
  %call539 = call zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr1), !dbg !10591
  %conv540 = zext i8 %call539 to i32, !dbg !10591
  %tobool541 = icmp ne i32 %conv540, 0, !dbg !10591
  br i1 %tobool541, label %if.then542, label %if.else594, !dbg !10592

if.then542:                                       ; preds = %lor.lhs.false538, %lor.lhs.false534, %land.lhs.true530
  call void @llvm.dbg.declare(metadata %union.tree_node** %zero, metadata !10593, metadata !DIExpression()), !dbg !10595
  %min543 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10596
  %203 = load %union.tree_node*, %union.tree_node** %min543, align 8, !dbg !10596
  %common544 = bitcast %union.tree_node* %203 to %struct.tree_common*, !dbg !10596
  %type545 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common544, i32 0, i32 2, !dbg !10596
  %204 = load %union.tree_node*, %union.tree_node** %type545, align 8, !dbg !10596
  %call546 = call %union.tree_node* @build_int_cst(%union.tree_node* %204, i64 0), !dbg !10597
  store %union.tree_node* %call546, %union.tree_node** %zero, align 8, !dbg !10595
  call void @llvm.dbg.declare(metadata i32* %cmp547, metadata !10598, metadata !DIExpression()), !dbg !10599
  store i8 0, i8* %sop, align 1, !dbg !10600
  store %union.tree_node* null, %union.tree_node** %min, align 8, !dbg !10601
  store %union.tree_node* null, %union.tree_node** %max, align 8, !dbg !10602
  %205 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10603
  %call548 = call zeroext i8 @vrp_expr_computes_nonnegative(%union.tree_node* %205, i8* %sop), !dbg !10605
  %conv549 = zext i8 %call548 to i32, !dbg !10605
  %tobool550 = icmp ne i32 %conv549, 0, !dbg !10605
  br i1 %tobool550, label %land.lhs.true551, label %if.else586, !dbg !10606

land.lhs.true551:                                 ; preds = %if.then542
  %206 = load i8, i8* %sop, align 1, !dbg !10607
  %tobool552 = icmp ne i8 %206, 0, !dbg !10607
  br i1 %tobool552, label %if.else586, label %if.then553, !dbg !10608

if.then553:                                       ; preds = %land.lhs.true551
  %max554 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10609
  %207 = load %union.tree_node*, %union.tree_node** %max554, align 8, !dbg !10609
  %208 = load %union.tree_node*, %union.tree_node** %zero, align 8, !dbg !10611
  %call555 = call i32 @compare_values(%union.tree_node* %207, %union.tree_node* %208), !dbg !10612
  store i32 %call555, i32* %cmp547, align 4, !dbg !10613
  %209 = load i32, i32* %cmp547, align 4, !dbg !10614
  %cmp556 = icmp eq i32 %209, -1, !dbg !10616
  br i1 %cmp556, label %if.then558, label %if.else559, !dbg !10617

if.then558:                                       ; preds = %if.then553
  %210 = load %union.tree_node*, %union.tree_node** %zero, align 8, !dbg !10618
  store %union.tree_node* %210, %union.tree_node** %max, align 8, !dbg !10619
  br label %if.end569, !dbg !10620

if.else559:                                       ; preds = %if.then553
  %211 = load i32, i32* %cmp547, align 4, !dbg !10621
  %cmp560 = icmp eq i32 %211, 0, !dbg !10623
  br i1 %cmp560, label %if.then565, label %lor.lhs.false562, !dbg !10624

lor.lhs.false562:                                 ; preds = %if.else559
  %212 = load i32, i32* %cmp547, align 4, !dbg !10625
  %cmp563 = icmp eq i32 %212, 1, !dbg !10626
  br i1 %cmp563, label %if.then565, label %if.else567, !dbg !10627

if.then565:                                       ; preds = %lor.lhs.false562, %if.else559
  %max566 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10628
  %213 = load %union.tree_node*, %union.tree_node** %max566, align 8, !dbg !10628
  store %union.tree_node* %213, %union.tree_node** %max, align 8, !dbg !10629
  br label %if.end568, !dbg !10630

if.else567:                                       ; preds = %lor.lhs.false562
  store i32 3, i32* %type, align 4, !dbg !10631
  br label %if.end568

if.end568:                                        ; preds = %if.else567, %if.then565
  br label %if.end569

if.end569:                                        ; preds = %if.end568, %if.then558
  %min570 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10632
  %214 = load %union.tree_node*, %union.tree_node** %min570, align 8, !dbg !10632
  %215 = load %union.tree_node*, %union.tree_node** %zero, align 8, !dbg !10633
  %call571 = call i32 @compare_values(%union.tree_node* %214, %union.tree_node* %215), !dbg !10634
  store i32 %call571, i32* %cmp547, align 4, !dbg !10635
  %216 = load i32, i32* %cmp547, align 4, !dbg !10636
  %cmp572 = icmp eq i32 %216, 1, !dbg !10638
  br i1 %cmp572, label %if.then574, label %if.else575, !dbg !10639

if.then574:                                       ; preds = %if.end569
  %217 = load %union.tree_node*, %union.tree_node** %zero, align 8, !dbg !10640
  store %union.tree_node* %217, %union.tree_node** %min, align 8, !dbg !10641
  br label %if.end585, !dbg !10642

if.else575:                                       ; preds = %if.end569
  %218 = load i32, i32* %cmp547, align 4, !dbg !10643
  %cmp576 = icmp eq i32 %218, 0, !dbg !10645
  br i1 %cmp576, label %if.then581, label %lor.lhs.false578, !dbg !10646

lor.lhs.false578:                                 ; preds = %if.else575
  %219 = load i32, i32* %cmp547, align 4, !dbg !10647
  %cmp579 = icmp eq i32 %219, -1, !dbg !10648
  br i1 %cmp579, label %if.then581, label %if.else583, !dbg !10649

if.then581:                                       ; preds = %lor.lhs.false578, %if.else575
  %min582 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10650
  %220 = load %union.tree_node*, %union.tree_node** %min582, align 8, !dbg !10650
  store %union.tree_node* %220, %union.tree_node** %min, align 8, !dbg !10651
  br label %if.end584, !dbg !10652

if.else583:                                       ; preds = %lor.lhs.false578
  store i32 3, i32* %type, align 4, !dbg !10653
  br label %if.end584

if.end584:                                        ; preds = %if.else583, %if.then581
  br label %if.end585

if.end585:                                        ; preds = %if.end584, %if.then574
  br label %if.end589, !dbg !10654

if.else586:                                       ; preds = %land.lhs.true551, %if.then542
  %221 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10655
  %min587 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10657
  %222 = load %union.tree_node*, %union.tree_node** %min587, align 8, !dbg !10657
  %max588 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10658
  %223 = load %union.tree_node*, %union.tree_node** %max588, align 8, !dbg !10658
  call void @abs_extent_range(%struct.value_range_d* %221, %union.tree_node* %222, %union.tree_node* %223), !dbg !10659
  br label %if.end996, !dbg !10660

if.end589:                                        ; preds = %if.end585
  %224 = load i32, i32* %type, align 4, !dbg !10661
  %cmp590 = icmp eq i32 %224, 3, !dbg !10663
  br i1 %cmp590, label %if.then592, label %if.end593, !dbg !10664

if.then592:                                       ; preds = %if.end589
  %225 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10665
  call void @set_value_range_to_varying(%struct.value_range_d* %225), !dbg !10667
  br label %if.end996, !dbg !10668

if.end593:                                        ; preds = %if.end589
  br label %if.end748, !dbg !10669

if.else594:                                       ; preds = %lor.lhs.false538, %land.lhs.true526, %lor.lhs.false523
  %type595 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10670
  %226 = load i32, i32* %type595, align 8, !dbg !10670
  %cmp596 = icmp eq i32 %226, 1, !dbg !10670
  br i1 %cmp596, label %land.lhs.true605, label %lor.lhs.false598, !dbg !10670

lor.lhs.false598:                                 ; preds = %if.else594
  %227 = load i32, i32* %code.addr, align 4, !dbg !10670
  %cmp599 = icmp eq i32 %227, 65, !dbg !10670
  br i1 %cmp599, label %land.lhs.true601, label %cond.true610, !dbg !10670

land.lhs.true601:                                 ; preds = %lor.lhs.false598
  %type602 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10670
  %228 = load i32, i32* %type602, align 8, !dbg !10670
  %cmp603 = icmp eq i32 %228, 2, !dbg !10670
  br i1 %cmp603, label %land.lhs.true605, label %cond.true610, !dbg !10670

land.lhs.true605:                                 ; preds = %land.lhs.true601, %if.else594
  %type606 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10670
  %229 = load i32, i32* %type606, align 8, !dbg !10670
  %type607 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10670
  %230 = load i32, i32* %type607, align 8, !dbg !10670
  %cmp608 = icmp eq i32 %229, %230, !dbg !10670
  br i1 %cmp608, label %cond.false611, label %cond.true610, !dbg !10670

cond.true610:                                     ; preds = %land.lhs.true605, %land.lhs.true601, %lor.lhs.false598
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 2416, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !10670
  br label %cond.end612, !dbg !10670

cond.false611:                                    ; preds = %land.lhs.true605
  br label %cond.end612, !dbg !10670

cond.end612:                                      ; preds = %cond.false611, %cond.true610
  %cond613 = phi i32 [ 0, %cond.true610 ], [ 0, %cond.false611 ], !dbg !10670
  store i8 0, i8* %sop, align 1, !dbg !10672
  %231 = load i32, i32* %code.addr, align 4, !dbg !10673
  %min614 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10674
  %232 = load %union.tree_node*, %union.tree_node** %min614, align 8, !dbg !10674
  %min615 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10675
  %233 = load %union.tree_node*, %union.tree_node** %min615, align 8, !dbg !10675
  %call616 = call %union.tree_node* @vrp_int_const_binop(i32 %231, %union.tree_node* %232, %union.tree_node* %233), !dbg !10676
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 0, !dbg !10677
  store %union.tree_node* %call616, %union.tree_node** %arrayidx, align 16, !dbg !10678
  %arrayidx617 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 0, !dbg !10679
  %234 = load %union.tree_node*, %union.tree_node** %arrayidx617, align 16, !dbg !10679
  %cmp618 = icmp eq %union.tree_node* %234, null, !dbg !10681
  br i1 %cmp618, label %if.then620, label %if.end621, !dbg !10682

if.then620:                                       ; preds = %cond.end612
  store i8 1, i8* %sop, align 1, !dbg !10683
  br label %if.end621, !dbg !10684

if.end621:                                        ; preds = %if.then620, %cond.end612
  %max622 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10685
  %235 = load %union.tree_node*, %union.tree_node** %max622, align 8, !dbg !10685
  %min623 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10687
  %236 = load %union.tree_node*, %union.tree_node** %min623, align 8, !dbg !10687
  %cmp624 = icmp eq %union.tree_node* %235, %236, !dbg !10688
  br i1 %cmp624, label %if.then626, label %if.else628, !dbg !10689

if.then626:                                       ; preds = %if.end621
  %arrayidx627 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !10690
  store %union.tree_node* null, %union.tree_node** %arrayidx627, align 8, !dbg !10691
  br label %if.end638, !dbg !10690

if.else628:                                       ; preds = %if.end621
  %237 = load i32, i32* %code.addr, align 4, !dbg !10692
  %min629 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10694
  %238 = load %union.tree_node*, %union.tree_node** %min629, align 8, !dbg !10694
  %max630 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10695
  %239 = load %union.tree_node*, %union.tree_node** %max630, align 8, !dbg !10695
  %call631 = call %union.tree_node* @vrp_int_const_binop(i32 %237, %union.tree_node* %238, %union.tree_node* %239), !dbg !10696
  %arrayidx632 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !10697
  store %union.tree_node* %call631, %union.tree_node** %arrayidx632, align 8, !dbg !10698
  %arrayidx633 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !10699
  %240 = load %union.tree_node*, %union.tree_node** %arrayidx633, align 8, !dbg !10699
  %cmp634 = icmp eq %union.tree_node* %240, null, !dbg !10701
  br i1 %cmp634, label %if.then636, label %if.end637, !dbg !10702

if.then636:                                       ; preds = %if.else628
  store i8 1, i8* %sop, align 1, !dbg !10703
  br label %if.end637, !dbg !10704

if.end637:                                        ; preds = %if.then636, %if.else628
  br label %if.end638

if.end638:                                        ; preds = %if.end637, %if.then626
  %max639 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10705
  %241 = load %union.tree_node*, %union.tree_node** %max639, align 8, !dbg !10705
  %min640 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10707
  %242 = load %union.tree_node*, %union.tree_node** %min640, align 8, !dbg !10707
  %cmp641 = icmp eq %union.tree_node* %241, %242, !dbg !10708
  br i1 %cmp641, label %if.then643, label %if.else645, !dbg !10709

if.then643:                                       ; preds = %if.end638
  %arrayidx644 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 2, !dbg !10710
  store %union.tree_node* null, %union.tree_node** %arrayidx644, align 16, !dbg !10711
  br label %if.end655, !dbg !10710

if.else645:                                       ; preds = %if.end638
  %243 = load i32, i32* %code.addr, align 4, !dbg !10712
  %max646 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10714
  %244 = load %union.tree_node*, %union.tree_node** %max646, align 8, !dbg !10714
  %min647 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10715
  %245 = load %union.tree_node*, %union.tree_node** %min647, align 8, !dbg !10715
  %call648 = call %union.tree_node* @vrp_int_const_binop(i32 %243, %union.tree_node* %244, %union.tree_node* %245), !dbg !10716
  %arrayidx649 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 2, !dbg !10717
  store %union.tree_node* %call648, %union.tree_node** %arrayidx649, align 16, !dbg !10718
  %arrayidx650 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 2, !dbg !10719
  %246 = load %union.tree_node*, %union.tree_node** %arrayidx650, align 16, !dbg !10719
  %cmp651 = icmp eq %union.tree_node* %246, null, !dbg !10721
  br i1 %cmp651, label %if.then653, label %if.end654, !dbg !10722

if.then653:                                       ; preds = %if.else645
  store i8 1, i8* %sop, align 1, !dbg !10723
  br label %if.end654, !dbg !10724

if.end654:                                        ; preds = %if.then653, %if.else645
  br label %if.end655

if.end655:                                        ; preds = %if.end654, %if.then643
  %min656 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10725
  %247 = load %union.tree_node*, %union.tree_node** %min656, align 8, !dbg !10725
  %max657 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10727
  %248 = load %union.tree_node*, %union.tree_node** %max657, align 8, !dbg !10727
  %cmp658 = icmp eq %union.tree_node* %247, %248, !dbg !10728
  br i1 %cmp658, label %if.then665, label %lor.lhs.false660, !dbg !10729

lor.lhs.false660:                                 ; preds = %if.end655
  %min661 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10730
  %249 = load %union.tree_node*, %union.tree_node** %min661, align 8, !dbg !10730
  %max662 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10731
  %250 = load %union.tree_node*, %union.tree_node** %max662, align 8, !dbg !10731
  %cmp663 = icmp eq %union.tree_node* %249, %250, !dbg !10732
  br i1 %cmp663, label %if.then665, label %if.else667, !dbg !10733

if.then665:                                       ; preds = %lor.lhs.false660, %if.end655
  %arrayidx666 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 3, !dbg !10734
  store %union.tree_node* null, %union.tree_node** %arrayidx666, align 8, !dbg !10735
  br label %if.end677, !dbg !10734

if.else667:                                       ; preds = %lor.lhs.false660
  %251 = load i32, i32* %code.addr, align 4, !dbg !10736
  %max668 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10738
  %252 = load %union.tree_node*, %union.tree_node** %max668, align 8, !dbg !10738
  %max669 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10739
  %253 = load %union.tree_node*, %union.tree_node** %max669, align 8, !dbg !10739
  %call670 = call %union.tree_node* @vrp_int_const_binop(i32 %251, %union.tree_node* %252, %union.tree_node* %253), !dbg !10740
  %arrayidx671 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 3, !dbg !10741
  store %union.tree_node* %call670, %union.tree_node** %arrayidx671, align 8, !dbg !10742
  %arrayidx672 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 3, !dbg !10743
  %254 = load %union.tree_node*, %union.tree_node** %arrayidx672, align 8, !dbg !10743
  %cmp673 = icmp eq %union.tree_node* %254, null, !dbg !10745
  br i1 %cmp673, label %if.then675, label %if.end676, !dbg !10746

if.then675:                                       ; preds = %if.else667
  store i8 1, i8* %sop, align 1, !dbg !10747
  br label %if.end676, !dbg !10748

if.end676:                                        ; preds = %if.then675, %if.else667
  br label %if.end677

if.end677:                                        ; preds = %if.end676, %if.then665
  %255 = load i8, i8* %sop, align 1, !dbg !10749
  %tobool678 = icmp ne i8 %255, 0, !dbg !10749
  br i1 %tobool678, label %if.then679, label %if.end680, !dbg !10751

if.then679:                                       ; preds = %if.end677
  %256 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10752
  call void @set_value_range_to_varying(%struct.value_range_d* %256), !dbg !10754
  br label %if.end996, !dbg !10755

if.end680:                                        ; preds = %if.end677
  %arrayidx681 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 0, !dbg !10756
  %257 = load %union.tree_node*, %union.tree_node** %arrayidx681, align 16, !dbg !10756
  store %union.tree_node* %257, %union.tree_node** %min, align 8, !dbg !10757
  %arrayidx682 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 0, !dbg !10758
  %258 = load %union.tree_node*, %union.tree_node** %arrayidx682, align 16, !dbg !10758
  store %union.tree_node* %258, %union.tree_node** %max, align 8, !dbg !10759
  store i64 1, i64* %i, align 8, !dbg !10760
  br label %for.cond, !dbg !10762

for.cond:                                         ; preds = %for.inc, %if.end680
  %259 = load i64, i64* %i, align 8, !dbg !10763
  %cmp683 = icmp ult i64 %259, 4, !dbg !10765
  br i1 %cmp683, label %for.body, label %for.end, !dbg !10766

for.body:                                         ; preds = %for.cond
  %260 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !10767
  %call685 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %260), !dbg !10770
  %tobool686 = icmp ne i8 %call685, 0, !dbg !10770
  br i1 %tobool686, label %lor.lhs.false687, label %if.then710, !dbg !10771

lor.lhs.false687:                                 ; preds = %for.body
  %261 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !10772
  %base688 = bitcast %union.tree_node* %261 to %struct.tree_base*, !dbg !10772
  %262 = bitcast %struct.tree_base* %base688 to i64*, !dbg !10772
  %bf.load689 = load i64, i64* %262, align 8, !dbg !10772
  %bf.lshr690 = lshr i64 %bf.load689, 27, !dbg !10772
  %bf.clear691 = and i64 %bf.lshr690, 1, !dbg !10772
  %bf.cast692 = trunc i64 %bf.clear691 to i32, !dbg !10772
  %tobool693 = icmp ne i32 %bf.cast692, 0, !dbg !10772
  br i1 %tobool693, label %land.lhs.true694, label %lor.lhs.false697, !dbg !10773

land.lhs.true694:                                 ; preds = %lor.lhs.false687
  %263 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !10774
  %call695 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %263), !dbg !10775
  %tobool696 = icmp ne i8 %call695, 0, !dbg !10775
  br i1 %tobool696, label %lor.lhs.false697, label %if.then710, !dbg !10776

lor.lhs.false697:                                 ; preds = %land.lhs.true694, %lor.lhs.false687
  %264 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !10777
  %call698 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %264), !dbg !10778
  %tobool699 = icmp ne i8 %call698, 0, !dbg !10778
  br i1 %tobool699, label %lor.lhs.false700, label %if.then710, !dbg !10779

lor.lhs.false700:                                 ; preds = %lor.lhs.false697
  %265 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !10780
  %base701 = bitcast %union.tree_node* %265 to %struct.tree_base*, !dbg !10780
  %266 = bitcast %struct.tree_base* %base701 to i64*, !dbg !10780
  %bf.load702 = load i64, i64* %266, align 8, !dbg !10780
  %bf.lshr703 = lshr i64 %bf.load702, 27, !dbg !10780
  %bf.clear704 = and i64 %bf.lshr703, 1, !dbg !10780
  %bf.cast705 = trunc i64 %bf.clear704 to i32, !dbg !10780
  %tobool706 = icmp ne i32 %bf.cast705, 0, !dbg !10780
  br i1 %tobool706, label %land.lhs.true707, label %if.end711, !dbg !10781

land.lhs.true707:                                 ; preds = %lor.lhs.false700
  %267 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !10782
  %call708 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %267), !dbg !10783
  %tobool709 = icmp ne i8 %call708, 0, !dbg !10783
  br i1 %tobool709, label %if.end711, label %if.then710, !dbg !10784

if.then710:                                       ; preds = %land.lhs.true707, %lor.lhs.false697, %land.lhs.true694, %for.body
  br label %for.end, !dbg !10785

if.end711:                                        ; preds = %land.lhs.true707, %lor.lhs.false700
  %268 = load i64, i64* %i, align 8, !dbg !10786
  %arrayidx712 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 %268, !dbg !10788
  %269 = load %union.tree_node*, %union.tree_node** %arrayidx712, align 8, !dbg !10788
  %tobool713 = icmp ne %union.tree_node* %269, null, !dbg !10788
  br i1 %tobool713, label %if.then714, label %if.end747, !dbg !10789

if.then714:                                       ; preds = %if.end711
  %270 = load i64, i64* %i, align 8, !dbg !10790
  %arrayidx715 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 %270, !dbg !10793
  %271 = load %union.tree_node*, %union.tree_node** %arrayidx715, align 8, !dbg !10793
  %call716 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %271), !dbg !10794
  %tobool717 = icmp ne i8 %call716, 0, !dbg !10794
  br i1 %tobool717, label %lor.lhs.false718, label %if.then730, !dbg !10795

lor.lhs.false718:                                 ; preds = %if.then714
  %272 = load i64, i64* %i, align 8, !dbg !10796
  %arrayidx719 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 %272, !dbg !10796
  %273 = load %union.tree_node*, %union.tree_node** %arrayidx719, align 8, !dbg !10796
  %base720 = bitcast %union.tree_node* %273 to %struct.tree_base*, !dbg !10796
  %274 = bitcast %struct.tree_base* %base720 to i64*, !dbg !10796
  %bf.load721 = load i64, i64* %274, align 8, !dbg !10796
  %bf.lshr722 = lshr i64 %bf.load721, 27, !dbg !10796
  %bf.clear723 = and i64 %bf.lshr722, 1, !dbg !10796
  %bf.cast724 = trunc i64 %bf.clear723 to i32, !dbg !10796
  %tobool725 = icmp ne i32 %bf.cast724, 0, !dbg !10796
  br i1 %tobool725, label %land.lhs.true726, label %if.end732, !dbg !10797

land.lhs.true726:                                 ; preds = %lor.lhs.false718
  %275 = load i64, i64* %i, align 8, !dbg !10798
  %arrayidx727 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 %275, !dbg !10799
  %276 = load %union.tree_node*, %union.tree_node** %arrayidx727, align 8, !dbg !10799
  %call728 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %276), !dbg !10800
  %tobool729 = icmp ne i8 %call728, 0, !dbg !10800
  br i1 %tobool729, label %if.end732, label %if.then730, !dbg !10801

if.then730:                                       ; preds = %land.lhs.true726, %if.then714
  %277 = load i64, i64* %i, align 8, !dbg !10802
  %arrayidx731 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 %277, !dbg !10804
  %278 = load %union.tree_node*, %union.tree_node** %arrayidx731, align 8, !dbg !10804
  store %union.tree_node* %278, %union.tree_node** %max, align 8, !dbg !10805
  store %union.tree_node* %278, %union.tree_node** %min, align 8, !dbg !10806
  br label %for.end, !dbg !10807

if.end732:                                        ; preds = %land.lhs.true726, %lor.lhs.false718
  %279 = load i64, i64* %i, align 8, !dbg !10808
  %arrayidx733 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 %279, !dbg !10810
  %280 = load %union.tree_node*, %union.tree_node** %arrayidx733, align 8, !dbg !10810
  %281 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !10811
  %call734 = call i32 @compare_values(%union.tree_node* %280, %union.tree_node* %281), !dbg !10812
  %cmp735 = icmp eq i32 %call734, -1, !dbg !10813
  br i1 %cmp735, label %if.then737, label %if.end739, !dbg !10814

if.then737:                                       ; preds = %if.end732
  %282 = load i64, i64* %i, align 8, !dbg !10815
  %arrayidx738 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 %282, !dbg !10816
  %283 = load %union.tree_node*, %union.tree_node** %arrayidx738, align 8, !dbg !10816
  store %union.tree_node* %283, %union.tree_node** %min, align 8, !dbg !10817
  br label %if.end739, !dbg !10818

if.end739:                                        ; preds = %if.then737, %if.end732
  %284 = load i64, i64* %i, align 8, !dbg !10819
  %arrayidx740 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 %284, !dbg !10821
  %285 = load %union.tree_node*, %union.tree_node** %arrayidx740, align 8, !dbg !10821
  %286 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !10822
  %call741 = call i32 @compare_values(%union.tree_node* %285, %union.tree_node* %286), !dbg !10823
  %cmp742 = icmp eq i32 %call741, 1, !dbg !10824
  br i1 %cmp742, label %if.then744, label %if.end746, !dbg !10825

if.then744:                                       ; preds = %if.end739
  %287 = load i64, i64* %i, align 8, !dbg !10826
  %arrayidx745 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 %287, !dbg !10827
  %288 = load %union.tree_node*, %union.tree_node** %arrayidx745, align 8, !dbg !10827
  store %union.tree_node* %288, %union.tree_node** %max, align 8, !dbg !10828
  br label %if.end746, !dbg !10829

if.end746:                                        ; preds = %if.then744, %if.end739
  br label %if.end747, !dbg !10830

if.end747:                                        ; preds = %if.end746, %if.end711
  br label %for.inc, !dbg !10831

for.inc:                                          ; preds = %if.end747
  %289 = load i64, i64* %i, align 8, !dbg !10832
  %inc = add i64 %289, 1, !dbg !10832
  store i64 %inc, i64* %i, align 8, !dbg !10832
  br label %for.cond, !dbg !10833, !llvm.loop !10834

for.end:                                          ; preds = %if.then730, %if.then710, %for.cond
  br label %if.end748

if.end748:                                        ; preds = %for.end, %if.end593
  br label %if.end935, !dbg !10836

if.else749:                                       ; preds = %lor.lhs.false414
  %290 = load i32, i32* %code.addr, align 4, !dbg !10837
  %cmp750 = icmp eq i32 %290, 64, !dbg !10839
  br i1 %cmp750, label %if.then752, label %if.else764, !dbg !10840

if.then752:                                       ; preds = %if.else749
  %type753 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10841
  %291 = load i32, i32* %type753, align 8, !dbg !10841
  %cmp754 = icmp eq i32 %291, 2, !dbg !10844
  br i1 %cmp754, label %if.then756, label %if.end757, !dbg !10845

if.then756:                                       ; preds = %if.then752
  %292 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10846
  call void @set_value_range_to_varying(%struct.value_range_d* %292), !dbg !10848
  br label %if.end996, !dbg !10849

if.end757:                                        ; preds = %if.then752
  %293 = load i32, i32* %code.addr, align 4, !dbg !10850
  %min758 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10851
  %294 = load %union.tree_node*, %union.tree_node** %min758, align 8, !dbg !10851
  %max759 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10852
  %295 = load %union.tree_node*, %union.tree_node** %max759, align 8, !dbg !10852
  %call760 = call %union.tree_node* @vrp_int_const_binop(i32 %293, %union.tree_node* %294, %union.tree_node* %295), !dbg !10853
  store %union.tree_node* %call760, %union.tree_node** %min, align 8, !dbg !10854
  %296 = load i32, i32* %code.addr, align 4, !dbg !10855
  %max761 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10856
  %297 = load %union.tree_node*, %union.tree_node** %max761, align 8, !dbg !10856
  %min762 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10857
  %298 = load %union.tree_node*, %union.tree_node** %min762, align 8, !dbg !10857
  %call763 = call %union.tree_node* @vrp_int_const_binop(i32 %296, %union.tree_node* %297, %union.tree_node* %298), !dbg !10858
  store %union.tree_node* %call763, %union.tree_node** %max, align 8, !dbg !10859
  br label %if.end934, !dbg !10860

if.else764:                                       ; preds = %if.else749
  %299 = load i32, i32* %code.addr, align 4, !dbg !10861
  %cmp765 = icmp eq i32 %299, 89, !dbg !10863
  br i1 %cmp765, label %if.then767, label %if.else836, !dbg !10864

if.then767:                                       ; preds = %if.else764
  %type768 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10865
  %300 = load i32, i32* %type768, align 8, !dbg !10865
  %cmp769 = icmp eq i32 %300, 1, !dbg !10868
  br i1 %cmp769, label %land.lhs.true771, label %if.else800, !dbg !10869

land.lhs.true771:                                 ; preds = %if.then767
  %min772 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10870
  %301 = load %union.tree_node*, %union.tree_node** %min772, align 8, !dbg !10870
  %max773 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10871
  %302 = load %union.tree_node*, %union.tree_node** %max773, align 8, !dbg !10871
  %cmp774 = icmp eq %union.tree_node* %301, %302, !dbg !10872
  br i1 %cmp774, label %land.lhs.true776, label %if.else800, !dbg !10873

land.lhs.true776:                                 ; preds = %land.lhs.true771
  %max777 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10874
  %303 = load %union.tree_node*, %union.tree_node** %max777, align 8, !dbg !10874
  %base778 = bitcast %union.tree_node* %303 to %struct.tree_base*, !dbg !10874
  %304 = bitcast %struct.tree_base* %base778 to i64*, !dbg !10874
  %bf.load779 = load i64, i64* %304, align 8, !dbg !10874
  %bf.clear780 = and i64 %bf.load779, 65535, !dbg !10874
  %bf.cast781 = trunc i64 %bf.clear780 to i32, !dbg !10874
  %cmp782 = icmp eq i32 %bf.cast781, 23, !dbg !10875
  br i1 %cmp782, label %land.lhs.true784, label %if.else800, !dbg !10876

land.lhs.true784:                                 ; preds = %land.lhs.true776
  %max785 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10877
  %305 = load %union.tree_node*, %union.tree_node** %max785, align 8, !dbg !10877
  %base786 = bitcast %union.tree_node* %305 to %struct.tree_base*, !dbg !10877
  %306 = bitcast %struct.tree_base* %base786 to i64*, !dbg !10877
  %bf.load787 = load i64, i64* %306, align 8, !dbg !10877
  %bf.lshr788 = lshr i64 %bf.load787, 27, !dbg !10877
  %bf.clear789 = and i64 %bf.lshr788, 1, !dbg !10877
  %bf.cast790 = trunc i64 %bf.clear789 to i32, !dbg !10877
  %tobool791 = icmp ne i32 %bf.cast790, 0, !dbg !10877
  br i1 %tobool791, label %if.else800, label %land.lhs.true792, !dbg !10878

land.lhs.true792:                                 ; preds = %land.lhs.true784
  %max793 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10879
  %307 = load %union.tree_node*, %union.tree_node** %max793, align 8, !dbg !10879
  %call794 = call i32 @tree_int_cst_sgn(%union.tree_node* %307), !dbg !10880
  %cmp795 = icmp sge i32 %call794, 0, !dbg !10881
  br i1 %cmp795, label %if.then797, label %if.else800, !dbg !10882

if.then797:                                       ; preds = %land.lhs.true792
  %308 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10883
  %call798 = call %union.tree_node* @build_int_cst(%union.tree_node* %308, i64 0), !dbg !10885
  store %union.tree_node* %call798, %union.tree_node** %min, align 8, !dbg !10886
  %max799 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10887
  %309 = load %union.tree_node*, %union.tree_node** %max799, align 8, !dbg !10887
  store %union.tree_node* %309, %union.tree_node** %max, align 8, !dbg !10888
  br label %if.end835, !dbg !10889

if.else800:                                       ; preds = %land.lhs.true792, %land.lhs.true784, %land.lhs.true776, %land.lhs.true771, %if.then767
  %type801 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10890
  %310 = load i32, i32* %type801, align 8, !dbg !10890
  %cmp802 = icmp eq i32 %310, 1, !dbg !10892
  br i1 %cmp802, label %land.lhs.true804, label %if.else833, !dbg !10893

land.lhs.true804:                                 ; preds = %if.else800
  %min805 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10894
  %311 = load %union.tree_node*, %union.tree_node** %min805, align 8, !dbg !10894
  %max806 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10895
  %312 = load %union.tree_node*, %union.tree_node** %max806, align 8, !dbg !10895
  %cmp807 = icmp eq %union.tree_node* %311, %312, !dbg !10896
  br i1 %cmp807, label %land.lhs.true809, label %if.else833, !dbg !10897

land.lhs.true809:                                 ; preds = %land.lhs.true804
  %max810 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10898
  %313 = load %union.tree_node*, %union.tree_node** %max810, align 8, !dbg !10898
  %base811 = bitcast %union.tree_node* %313 to %struct.tree_base*, !dbg !10898
  %314 = bitcast %struct.tree_base* %base811 to i64*, !dbg !10898
  %bf.load812 = load i64, i64* %314, align 8, !dbg !10898
  %bf.clear813 = and i64 %bf.load812, 65535, !dbg !10898
  %bf.cast814 = trunc i64 %bf.clear813 to i32, !dbg !10898
  %cmp815 = icmp eq i32 %bf.cast814, 23, !dbg !10899
  br i1 %cmp815, label %land.lhs.true817, label %if.else833, !dbg !10900

land.lhs.true817:                                 ; preds = %land.lhs.true809
  %max818 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10901
  %315 = load %union.tree_node*, %union.tree_node** %max818, align 8, !dbg !10901
  %base819 = bitcast %union.tree_node* %315 to %struct.tree_base*, !dbg !10901
  %316 = bitcast %struct.tree_base* %base819 to i64*, !dbg !10901
  %bf.load820 = load i64, i64* %316, align 8, !dbg !10901
  %bf.lshr821 = lshr i64 %bf.load820, 27, !dbg !10901
  %bf.clear822 = and i64 %bf.lshr821, 1, !dbg !10901
  %bf.cast823 = trunc i64 %bf.clear822 to i32, !dbg !10901
  %tobool824 = icmp ne i32 %bf.cast823, 0, !dbg !10901
  br i1 %tobool824, label %if.else833, label %land.lhs.true825, !dbg !10902

land.lhs.true825:                                 ; preds = %land.lhs.true817
  %max826 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10903
  %317 = load %union.tree_node*, %union.tree_node** %max826, align 8, !dbg !10903
  %call827 = call i32 @tree_int_cst_sgn(%union.tree_node* %317), !dbg !10904
  %cmp828 = icmp sge i32 %call827, 0, !dbg !10905
  br i1 %cmp828, label %if.then830, label %if.else833, !dbg !10906

if.then830:                                       ; preds = %land.lhs.true825
  store i32 1, i32* %type, align 4, !dbg !10907
  %318 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !10909
  %call831 = call %union.tree_node* @build_int_cst(%union.tree_node* %318, i64 0), !dbg !10910
  store %union.tree_node* %call831, %union.tree_node** %min, align 8, !dbg !10911
  %max832 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10912
  %319 = load %union.tree_node*, %union.tree_node** %max832, align 8, !dbg !10912
  store %union.tree_node* %319, %union.tree_node** %max, align 8, !dbg !10913
  br label %if.end834, !dbg !10914

if.else833:                                       ; preds = %land.lhs.true825, %land.lhs.true817, %land.lhs.true809, %land.lhs.true804, %if.else800
  %320 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !10915
  call void @set_value_range_to_varying(%struct.value_range_d* %320), !dbg !10917
  br label %if.end996, !dbg !10918

if.end834:                                        ; preds = %if.then830
  br label %if.end835

if.end835:                                        ; preds = %if.end834, %if.then797
  br label %if.end933, !dbg !10919

if.else836:                                       ; preds = %if.else764
  %321 = load i32, i32* %code.addr, align 4, !dbg !10920
  %cmp837 = icmp eq i32 %321, 87, !dbg !10922
  br i1 %cmp837, label %if.then839, label %if.else931, !dbg !10923

if.then839:                                       ; preds = %if.else836
  %type840 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !10924
  %322 = load i32, i32* %type840, align 8, !dbg !10924
  %cmp841 = icmp eq i32 %322, 1, !dbg !10927
  br i1 %cmp841, label %land.lhs.true843, label %if.else929, !dbg !10928

land.lhs.true843:                                 ; preds = %if.then839
  %type844 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 0, !dbg !10929
  %323 = load i32, i32* %type844, align 8, !dbg !10929
  %cmp845 = icmp eq i32 %323, 1, !dbg !10930
  br i1 %cmp845, label %land.lhs.true847, label %if.else929, !dbg !10931

land.lhs.true847:                                 ; preds = %land.lhs.true843
  %min848 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10932
  %324 = load %union.tree_node*, %union.tree_node** %min848, align 8, !dbg !10932
  %base849 = bitcast %union.tree_node* %324 to %struct.tree_base*, !dbg !10932
  %325 = bitcast %struct.tree_base* %base849 to i64*, !dbg !10932
  %bf.load850 = load i64, i64* %325, align 8, !dbg !10932
  %bf.clear851 = and i64 %bf.load850, 65535, !dbg !10932
  %bf.cast852 = trunc i64 %bf.clear851 to i32, !dbg !10932
  %cmp853 = icmp eq i32 %bf.cast852, 23, !dbg !10933
  br i1 %cmp853, label %land.lhs.true855, label %if.else929, !dbg !10934

land.lhs.true855:                                 ; preds = %land.lhs.true847
  %min856 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10935
  %326 = load %union.tree_node*, %union.tree_node** %min856, align 8, !dbg !10935
  %base857 = bitcast %union.tree_node* %326 to %struct.tree_base*, !dbg !10935
  %327 = bitcast %struct.tree_base* %base857 to i64*, !dbg !10935
  %bf.load858 = load i64, i64* %327, align 8, !dbg !10935
  %bf.clear859 = and i64 %bf.load858, 65535, !dbg !10935
  %bf.cast860 = trunc i64 %bf.clear859 to i32, !dbg !10935
  %cmp861 = icmp eq i32 %bf.cast860, 23, !dbg !10936
  br i1 %cmp861, label %land.lhs.true863, label %if.else929, !dbg !10937

land.lhs.true863:                                 ; preds = %land.lhs.true855
  %max864 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10938
  %328 = load %union.tree_node*, %union.tree_node** %max864, align 8, !dbg !10938
  %base865 = bitcast %union.tree_node* %328 to %struct.tree_base*, !dbg !10938
  %329 = bitcast %struct.tree_base* %base865 to i64*, !dbg !10938
  %bf.load866 = load i64, i64* %329, align 8, !dbg !10938
  %bf.clear867 = and i64 %bf.load866, 65535, !dbg !10938
  %bf.cast868 = trunc i64 %bf.clear867 to i32, !dbg !10938
  %cmp869 = icmp eq i32 %bf.cast868, 23, !dbg !10939
  br i1 %cmp869, label %land.lhs.true871, label %if.else929, !dbg !10940

land.lhs.true871:                                 ; preds = %land.lhs.true863
  %max872 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10941
  %330 = load %union.tree_node*, %union.tree_node** %max872, align 8, !dbg !10941
  %base873 = bitcast %union.tree_node* %330 to %struct.tree_base*, !dbg !10941
  %331 = bitcast %struct.tree_base* %base873 to i64*, !dbg !10941
  %bf.load874 = load i64, i64* %331, align 8, !dbg !10941
  %bf.clear875 = and i64 %bf.load874, 65535, !dbg !10941
  %bf.cast876 = trunc i64 %bf.clear875 to i32, !dbg !10941
  %cmp877 = icmp eq i32 %bf.cast876, 23, !dbg !10942
  br i1 %cmp877, label %land.lhs.true879, label %if.else929, !dbg !10943

land.lhs.true879:                                 ; preds = %land.lhs.true871
  %min880 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10944
  %332 = load %union.tree_node*, %union.tree_node** %min880, align 8, !dbg !10944
  %call881 = call i32 @tree_int_cst_sgn(%union.tree_node* %332), !dbg !10945
  %cmp882 = icmp sge i32 %call881, 0, !dbg !10946
  br i1 %cmp882, label %land.lhs.true884, label %if.else929, !dbg !10947

land.lhs.true884:                                 ; preds = %land.lhs.true879
  %min885 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10948
  %333 = load %union.tree_node*, %union.tree_node** %min885, align 8, !dbg !10948
  %call886 = call i32 @tree_int_cst_sgn(%union.tree_node* %333), !dbg !10949
  %cmp887 = icmp sge i32 %call886, 0, !dbg !10950
  br i1 %cmp887, label %if.then889, label %if.else929, !dbg !10951

if.then889:                                       ; preds = %land.lhs.true884
  call void @llvm.dbg.declare(metadata %struct.double_int* %vr0_max, metadata !10952, metadata !DIExpression()), !dbg !10954
  %max890 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !10955
  %334 = load %union.tree_node*, %union.tree_node** %max890, align 8, !dbg !10955
  %call891 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %334), !dbg !10956
  %335 = bitcast %struct.double_int* %vr0_max to { i64, i64 }*, !dbg !10956
  %336 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %335, i32 0, i32 0, !dbg !10956
  %337 = extractvalue { i64, i64 } %call891, 0, !dbg !10956
  store i64 %337, i64* %336, align 8, !dbg !10956
  %338 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %335, i32 0, i32 1, !dbg !10956
  %339 = extractvalue { i64, i64 } %call891, 1, !dbg !10956
  store i64 %339, i64* %338, align 8, !dbg !10956
  call void @llvm.dbg.declare(metadata %struct.double_int* %vr1_max, metadata !10957, metadata !DIExpression()), !dbg !10958
  %max892 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 2, !dbg !10959
  %340 = load %union.tree_node*, %union.tree_node** %max892, align 8, !dbg !10959
  %call893 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %340), !dbg !10960
  %341 = bitcast %struct.double_int* %vr1_max to { i64, i64 }*, !dbg !10960
  %342 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %341, i32 0, i32 0, !dbg !10960
  %343 = extractvalue { i64, i64 } %call893, 0, !dbg !10960
  store i64 %343, i64* %342, align 8, !dbg !10960
  %344 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %341, i32 0, i32 1, !dbg !10960
  %345 = extractvalue { i64, i64 } %call893, 1, !dbg !10960
  store i64 %345, i64* %344, align 8, !dbg !10960
  call void @llvm.dbg.declare(metadata %struct.double_int* %ior_max, metadata !10961, metadata !DIExpression()), !dbg !10962
  %low894 = getelementptr inbounds %struct.double_int, %struct.double_int* %vr0_max, i32 0, i32 0, !dbg !10963
  %346 = load i64, i64* %low894, align 8, !dbg !10963
  %low895 = getelementptr inbounds %struct.double_int, %struct.double_int* %vr1_max, i32 0, i32 0, !dbg !10964
  %347 = load i64, i64* %low895, align 8, !dbg !10964
  %or = or i64 %346, %347, !dbg !10965
  %low896 = getelementptr inbounds %struct.double_int, %struct.double_int* %ior_max, i32 0, i32 0, !dbg !10966
  store i64 %or, i64* %low896, align 8, !dbg !10967
  %high897 = getelementptr inbounds %struct.double_int, %struct.double_int* %vr0_max, i32 0, i32 1, !dbg !10968
  %348 = load i64, i64* %high897, align 8, !dbg !10968
  %high898 = getelementptr inbounds %struct.double_int, %struct.double_int* %vr1_max, i32 0, i32 1, !dbg !10969
  %349 = load i64, i64* %high898, align 8, !dbg !10969
  %or899 = or i64 %348, %349, !dbg !10970
  %high900 = getelementptr inbounds %struct.double_int, %struct.double_int* %ior_max, i32 0, i32 1, !dbg !10971
  store i64 %or899, i64* %high900, align 8, !dbg !10972
  %high901 = getelementptr inbounds %struct.double_int, %struct.double_int* %ior_max, i32 0, i32 1, !dbg !10973
  %350 = load i64, i64* %high901, align 8, !dbg !10973
  %cmp902 = icmp ne i64 %350, 0, !dbg !10975
  br i1 %cmp902, label %if.then904, label %if.else911, !dbg !10976

if.then904:                                       ; preds = %if.then889
  %low905 = getelementptr inbounds %struct.double_int, %struct.double_int* %ior_max, i32 0, i32 0, !dbg !10977
  store i64 -1, i64* %low905, align 8, !dbg !10979
  %high906 = getelementptr inbounds %struct.double_int, %struct.double_int* %ior_max, i32 0, i32 1, !dbg !10980
  %351 = load i64, i64* %high906, align 8, !dbg !10980
  %call907 = call i32 @floor_log2(i64 %351), !dbg !10981
  %sh_prom = zext i32 %call907 to i64, !dbg !10982
  %shl = shl i64 1, %sh_prom, !dbg !10982
  %sub908 = sub nsw i64 %shl, 1, !dbg !10983
  %high909 = getelementptr inbounds %struct.double_int, %struct.double_int* %ior_max, i32 0, i32 1, !dbg !10984
  %352 = load i64, i64* %high909, align 8, !dbg !10985
  %or910 = or i64 %352, %sub908, !dbg !10985
  store i64 %or910, i64* %high909, align 8, !dbg !10985
  br label %if.end924, !dbg !10986

if.else911:                                       ; preds = %if.then889
  %low912 = getelementptr inbounds %struct.double_int, %struct.double_int* %ior_max, i32 0, i32 0, !dbg !10987
  %353 = load i64, i64* %low912, align 8, !dbg !10987
  %cmp913 = icmp ne i64 %353, 0, !dbg !10989
  br i1 %cmp913, label %if.then915, label %if.end923, !dbg !10990

if.then915:                                       ; preds = %if.else911
  %low916 = getelementptr inbounds %struct.double_int, %struct.double_int* %ior_max, i32 0, i32 0, !dbg !10991
  %354 = load i64, i64* %low916, align 8, !dbg !10991
  %call917 = call i32 @floor_log2(i64 %354), !dbg !10992
  %sh_prom918 = zext i32 %call917 to i64, !dbg !10993
  %shl919 = shl i64 1, %sh_prom918, !dbg !10993
  %sub920 = sub i64 %shl919, 1, !dbg !10994
  %low921 = getelementptr inbounds %struct.double_int, %struct.double_int* %ior_max, i32 0, i32 0, !dbg !10995
  %355 = load i64, i64* %low921, align 8, !dbg !10996
  %or922 = or i64 %355, %sub920, !dbg !10996
  store i64 %or922, i64* %low921, align 8, !dbg !10996
  br label %if.end923, !dbg !10997

if.end923:                                        ; preds = %if.then915, %if.else911
  br label %if.end924

if.end924:                                        ; preds = %if.end923, %if.then904
  %min925 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !10998
  %356 = load %union.tree_node*, %union.tree_node** %min925, align 8, !dbg !10998
  %min926 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i32 0, i32 1, !dbg !10999
  %357 = load %union.tree_node*, %union.tree_node** %min926, align 8, !dbg !10999
  %call927 = call %union.tree_node* @vrp_int_const_binop(i32 81, %union.tree_node* %356, %union.tree_node* %357), !dbg !11000
  store %union.tree_node* %call927, %union.tree_node** %min, align 8, !dbg !11001
  %358 = load %union.tree_node*, %union.tree_node** %expr_type.addr, align 8, !dbg !11002
  %359 = bitcast %struct.double_int* %ior_max to { i64, i64 }*, !dbg !11003
  %360 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %359, i32 0, i32 0, !dbg !11003
  %361 = load i64, i64* %360, align 8, !dbg !11003
  %362 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %359, i32 0, i32 1, !dbg !11003
  %363 = load i64, i64* %362, align 8, !dbg !11003
  %call928 = call %union.tree_node* @double_int_to_tree(%union.tree_node* %358, i64 %361, i64 %363), !dbg !11003
  store %union.tree_node* %call928, %union.tree_node** %max, align 8, !dbg !11004
  br label %if.end930, !dbg !11005

if.else929:                                       ; preds = %land.lhs.true884, %land.lhs.true879, %land.lhs.true871, %land.lhs.true863, %land.lhs.true855, %land.lhs.true847, %land.lhs.true843, %if.then839
  %364 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11006
  call void @set_value_range_to_varying(%struct.value_range_d* %364), !dbg !11008
  br label %if.end996, !dbg !11009

if.end930:                                        ; preds = %if.end924
  br label %if.end932, !dbg !11010

if.else931:                                       ; preds = %if.else836
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 2578, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !11011
  br label %if.end932

if.end932:                                        ; preds = %if.else931, %if.end930
  br label %if.end933

if.end933:                                        ; preds = %if.end932, %if.end835
  br label %if.end934

if.end934:                                        ; preds = %if.end933, %if.end757
  br label %if.end935

if.end935:                                        ; preds = %if.end934, %if.end748
  br label %if.end936

if.end936:                                        ; preds = %if.end935, %if.end395
  br label %if.end937

if.end937:                                        ; preds = %if.end936, %if.end333
  %365 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11012
  %cmp938 = icmp eq %union.tree_node* %365, null, !dbg !11014
  br i1 %cmp938, label %if.then969, label %lor.lhs.false940, !dbg !11015

lor.lhs.false940:                                 ; preds = %if.end937
  %366 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11016
  %call941 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %366), !dbg !11017
  %tobool942 = icmp ne i8 %call941, 0, !dbg !11017
  br i1 %tobool942, label %lor.lhs.false943, label %if.then969, !dbg !11018

lor.lhs.false943:                                 ; preds = %lor.lhs.false940
  %367 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11019
  %base944 = bitcast %union.tree_node* %367 to %struct.tree_base*, !dbg !11019
  %368 = bitcast %struct.tree_base* %base944 to i64*, !dbg !11019
  %bf.load945 = load i64, i64* %368, align 8, !dbg !11019
  %bf.lshr946 = lshr i64 %bf.load945, 27, !dbg !11019
  %bf.clear947 = and i64 %bf.lshr946, 1, !dbg !11019
  %bf.cast948 = trunc i64 %bf.clear947 to i32, !dbg !11019
  %tobool949 = icmp ne i32 %bf.cast948, 0, !dbg !11019
  br i1 %tobool949, label %land.lhs.true950, label %lor.lhs.false953, !dbg !11020

land.lhs.true950:                                 ; preds = %lor.lhs.false943
  %369 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11021
  %call951 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %369), !dbg !11022
  %tobool952 = icmp ne i8 %call951, 0, !dbg !11022
  br i1 %tobool952, label %lor.lhs.false953, label %if.then969, !dbg !11023

lor.lhs.false953:                                 ; preds = %land.lhs.true950, %lor.lhs.false943
  %370 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11024
  %cmp954 = icmp eq %union.tree_node* %370, null, !dbg !11025
  br i1 %cmp954, label %if.then969, label %lor.lhs.false956, !dbg !11026

lor.lhs.false956:                                 ; preds = %lor.lhs.false953
  %371 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11027
  %call957 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %371), !dbg !11028
  %tobool958 = icmp ne i8 %call957, 0, !dbg !11028
  br i1 %tobool958, label %lor.lhs.false959, label %if.then969, !dbg !11029

lor.lhs.false959:                                 ; preds = %lor.lhs.false956
  %372 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11030
  %base960 = bitcast %union.tree_node* %372 to %struct.tree_base*, !dbg !11030
  %373 = bitcast %struct.tree_base* %base960 to i64*, !dbg !11030
  %bf.load961 = load i64, i64* %373, align 8, !dbg !11030
  %bf.lshr962 = lshr i64 %bf.load961, 27, !dbg !11030
  %bf.clear963 = and i64 %bf.lshr962, 1, !dbg !11030
  %bf.cast964 = trunc i64 %bf.clear963 to i32, !dbg !11030
  %tobool965 = icmp ne i32 %bf.cast964, 0, !dbg !11030
  br i1 %tobool965, label %land.lhs.true966, label %if.end970, !dbg !11031

land.lhs.true966:                                 ; preds = %lor.lhs.false959
  %374 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11032
  %call967 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %374), !dbg !11033
  %tobool968 = icmp ne i8 %call967, 0, !dbg !11033
  br i1 %tobool968, label %if.end970, label %if.then969, !dbg !11034

if.then969:                                       ; preds = %land.lhs.true966, %lor.lhs.false956, %lor.lhs.false953, %land.lhs.true950, %lor.lhs.false940, %if.end937
  %375 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11035
  call void @set_value_range_to_varying(%struct.value_range_d* %375), !dbg !11037
  br label %if.end996, !dbg !11038

if.end970:                                        ; preds = %land.lhs.true966, %lor.lhs.false959
  %376 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11039
  %call971 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %376), !dbg !11041
  %conv972 = zext i8 %call971 to i32, !dbg !11041
  %tobool973 = icmp ne i32 %conv972, 0, !dbg !11041
  br i1 %tobool973, label %land.lhs.true978, label %lor.lhs.false974, !dbg !11042

lor.lhs.false974:                                 ; preds = %if.end970
  %377 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11043
  %call975 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %377), !dbg !11044
  %conv976 = zext i8 %call975 to i32, !dbg !11044
  %tobool977 = icmp ne i32 %conv976, 0, !dbg !11044
  br i1 %tobool977, label %land.lhs.true978, label %if.end987, !dbg !11045

land.lhs.true978:                                 ; preds = %lor.lhs.false974, %if.end970
  %378 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11046
  %call979 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %378), !dbg !11047
  %conv980 = zext i8 %call979 to i32, !dbg !11047
  %tobool981 = icmp ne i32 %conv980, 0, !dbg !11047
  br i1 %tobool981, label %if.then986, label %lor.lhs.false982, !dbg !11048

lor.lhs.false982:                                 ; preds = %land.lhs.true978
  %379 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11049
  %call983 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %379), !dbg !11050
  %conv984 = zext i8 %call983 to i32, !dbg !11050
  %tobool985 = icmp ne i32 %conv984, 0, !dbg !11050
  br i1 %tobool985, label %if.then986, label %if.end987, !dbg !11051

if.then986:                                       ; preds = %lor.lhs.false982, %land.lhs.true978
  %380 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11052
  call void @set_value_range_to_varying(%struct.value_range_d* %380), !dbg !11054
  br label %if.end996, !dbg !11055

if.end987:                                        ; preds = %lor.lhs.false982, %lor.lhs.false974
  %381 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11056
  %382 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11057
  %call988 = call i32 @compare_values(%union.tree_node* %381, %union.tree_node* %382), !dbg !11058
  store i32 %call988, i32* %cmp, align 4, !dbg !11059
  %383 = load i32, i32* %cmp, align 4, !dbg !11060
  %cmp989 = icmp eq i32 %383, -2, !dbg !11062
  br i1 %cmp989, label %if.then994, label %lor.lhs.false991, !dbg !11063

lor.lhs.false991:                                 ; preds = %if.end987
  %384 = load i32, i32* %cmp, align 4, !dbg !11064
  %cmp992 = icmp eq i32 %384, 1, !dbg !11065
  br i1 %cmp992, label %if.then994, label %if.else995, !dbg !11066

if.then994:                                       ; preds = %lor.lhs.false991, %if.end987
  %385 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11067
  call void @set_value_range_to_varying(%struct.value_range_d* %385), !dbg !11069
  br label %if.end996, !dbg !11070

if.else995:                                       ; preds = %lor.lhs.false991
  %386 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11071
  %387 = load i32, i32* %type, align 4, !dbg !11072
  %388 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11073
  %389 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11074
  call void @set_value_range(%struct.value_range_d* %386, i32 %387, %union.tree_node* %388, %union.tree_node* %389, %struct.bitmap_head_def* null), !dbg !11075
  br label %if.end996

if.end996:                                        ; preds = %if.then48, %if.end49, %if.then83, %if.then130, %if.end206, %if.end233, %if.else330, %if.then350, %if.then439, %if.then463, %if.else508, %if.else586, %if.then592, %if.then679, %if.then756, %if.else833, %if.else929, %if.then969, %if.then986, %if.else995, %if.then994
  ret void, !dbg !11076
}

; Function Attrs: noinline nounwind uwtable
define internal void @extract_range_from_unary_expr(%struct.value_range_d* %vr, i32 %code, %union.tree_node* %type, %union.tree_node* %op0) #0 !dbg !11077 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %code.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %min = alloca %union.tree_node*, align 8
  %max = alloca %union.tree_node*, align 8
  %cmp = alloca i32, align 4
  %vr0 = alloca %struct.value_range_d, align 8
  %tem = alloca %union.tree_node*, align 8
  %sop = alloca i8, align 1
  %inner_type = alloca %union.tree_node*, align 8
  %outer_type = alloca %union.tree_node*, align 8
  %new_min = alloca %union.tree_node*, align 8
  %new_max = alloca %union.tree_node*, align 8
  %type_min_value = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !11080, metadata !DIExpression()), !dbg !11081
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !11082, metadata !DIExpression()), !dbg !11083
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !11084, metadata !DIExpression()), !dbg !11085
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !11086, metadata !DIExpression()), !dbg !11087
  call void @llvm.dbg.declare(metadata %union.tree_node** %min, metadata !11088, metadata !DIExpression()), !dbg !11089
  call void @llvm.dbg.declare(metadata %union.tree_node** %max, metadata !11090, metadata !DIExpression()), !dbg !11091
  call void @llvm.dbg.declare(metadata i32* %cmp, metadata !11092, metadata !DIExpression()), !dbg !11093
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %vr0, metadata !11094, metadata !DIExpression()), !dbg !11095
  %0 = bitcast %struct.value_range_d* %vr0 to i8*, !dbg !11095
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 32, i1 false), !dbg !11095
  %1 = load i32, i32* %code.addr, align 4, !dbg !11096
  %cmp1 = icmp eq i32 %1, 77, !dbg !11098
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !11099

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code.addr, align 4, !dbg !11100
  %cmp2 = icmp eq i32 %2, 78, !dbg !11101
  br i1 %cmp2, label %if.then, label %lor.lhs.false3, !dbg !11102

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %code.addr, align 4, !dbg !11103
  %cmp4 = icmp eq i32 %3, 90, !dbg !11104
  br i1 %cmp4, label %if.then, label %lor.lhs.false5, !dbg !11105

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %4 = load i32, i32* %code.addr, align 4, !dbg !11106
  %cmp6 = icmp eq i32 %4, 124, !dbg !11107
  br i1 %cmp6, label %if.then, label %if.end17, !dbg !11108

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false, %entry
  %5 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11109
  %call = call %union.tree_node* @op_with_constant_singleton_value_range(%union.tree_node* %5), !dbg !11112
  store %union.tree_node* %call, %union.tree_node** %op0.addr, align 8, !dbg !11113
  %cmp7 = icmp ne %union.tree_node* %call, null, !dbg !11114
  br i1 %cmp7, label %if.then8, label %if.end16, !dbg !11115

if.then8:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !11116, metadata !DIExpression()), !dbg !11118
  %6 = load i32, i32* %code.addr, align 4, !dbg !11119
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11119
  %8 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11119
  %call9 = call %union.tree_node* @fold_unary_loc(i32 0, i32 %6, %union.tree_node* %7, %union.tree_node* %8), !dbg !11119
  store %union.tree_node* %call9, %union.tree_node** %tem, align 8, !dbg !11118
  %9 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !11120
  %tobool = icmp ne %union.tree_node* %9, null, !dbg !11120
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !11122

land.lhs.true:                                    ; preds = %if.then8
  %10 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !11123
  %call10 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %10), !dbg !11124
  %conv = zext i8 %call10 to i32, !dbg !11124
  %tobool11 = icmp ne i32 %conv, 0, !dbg !11124
  br i1 %tobool11, label %land.lhs.true12, label %if.end, !dbg !11125

land.lhs.true12:                                  ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !11126
  %call13 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %11), !dbg !11127
  %tobool14 = icmp ne i8 %call13, 0, !dbg !11127
  br i1 %tobool14, label %if.end, label %if.then15, !dbg !11128

if.then15:                                        ; preds = %land.lhs.true12
  %12 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11129
  %13 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !11131
  %14 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !11132
  call void @set_value_range(%struct.value_range_d* %12, i32 1, %union.tree_node* %13, %union.tree_node* %14, %struct.bitmap_head_def* null), !dbg !11133
  br label %if.end704, !dbg !11134

if.end:                                           ; preds = %land.lhs.true12, %land.lhs.true, %if.then8
  br label %if.end16, !dbg !11135

if.end16:                                         ; preds = %if.end, %if.then
  %15 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11136
  call void @set_value_range_to_varying(%struct.value_range_d* %15), !dbg !11137
  br label %if.end704, !dbg !11138

if.end17:                                         ; preds = %lor.lhs.false5
  %16 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11139
  %base = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !11139
  %17 = bitcast %struct.tree_base* %base to i64*, !dbg !11139
  %bf.load = load i64, i64* %17, align 8, !dbg !11139
  %bf.clear = and i64 %bf.load, 65535, !dbg !11139
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11139
  %cmp18 = icmp eq i32 %bf.cast, 141, !dbg !11141
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !11142

if.then20:                                        ; preds = %if.end17
  %18 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11143
  %call21 = call %struct.value_range_d* @get_value_range(%union.tree_node* %18), !dbg !11144
  %19 = bitcast %struct.value_range_d* %vr0 to i8*, !dbg !11145
  %20 = bitcast %struct.value_range_d* %call21 to i8*, !dbg !11145
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 32, i1 false), !dbg !11145
  br label %if.end27, !dbg !11146

if.else:                                          ; preds = %if.end17
  %21 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11147
  %call22 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %21), !dbg !11149
  %tobool23 = icmp ne i8 %call22, 0, !dbg !11149
  br i1 %tobool23, label %if.then24, label %if.else25, !dbg !11150

if.then24:                                        ; preds = %if.else
  %22 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11151
  call void @set_value_range_to_value(%struct.value_range_d* %vr0, %union.tree_node* %22, %struct.bitmap_head_def* null), !dbg !11152
  br label %if.end26, !dbg !11152

if.else25:                                        ; preds = %if.else
  call void @set_value_range_to_varying(%struct.value_range_d* %vr0), !dbg !11153
  br label %if.end26

if.end26:                                         ; preds = %if.else25, %if.then24
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then20
  %type28 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11154
  %23 = load i32, i32* %type28, align 8, !dbg !11154
  %cmp29 = icmp eq i32 %23, 0, !dbg !11156
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !11157

if.then31:                                        ; preds = %if.end27
  %24 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11158
  call void @set_value_range_to_undefined(%struct.value_range_d* %24), !dbg !11160
  br label %if.end704, !dbg !11161

if.end32:                                         ; preds = %if.end27
  %25 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11162
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !11162
  %type33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11162
  %26 = load %union.tree_node*, %union.tree_node** %type33, align 8, !dbg !11162
  %base34 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !11162
  %27 = bitcast %struct.tree_base* %base34 to i64*, !dbg !11162
  %bf.load35 = load i64, i64* %27, align 8, !dbg !11162
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !11162
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !11162
  %cmp38 = icmp eq i32 %bf.cast37, 6, !dbg !11162
  br i1 %cmp38, label %lor.lhs.false76, label %lor.lhs.false40, !dbg !11162

lor.lhs.false40:                                  ; preds = %if.end32
  %28 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11162
  %common41 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !11162
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !11162
  %29 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !11162
  %base43 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !11162
  %30 = bitcast %struct.tree_base* %base43 to i64*, !dbg !11162
  %bf.load44 = load i64, i64* %30, align 8, !dbg !11162
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !11162
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !11162
  %cmp47 = icmp eq i32 %bf.cast46, 7, !dbg !11162
  br i1 %cmp47, label %lor.lhs.false76, label %lor.lhs.false49, !dbg !11162

lor.lhs.false49:                                  ; preds = %lor.lhs.false40
  %31 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11162
  %common50 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !11162
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2, !dbg !11162
  %32 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !11162
  %base52 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !11162
  %33 = bitcast %struct.tree_base* %base52 to i64*, !dbg !11162
  %bf.load53 = load i64, i64* %33, align 8, !dbg !11162
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !11162
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !11162
  %cmp56 = icmp eq i32 %bf.cast55, 8, !dbg !11162
  br i1 %cmp56, label %lor.lhs.false76, label %land.lhs.true58, !dbg !11164

land.lhs.true58:                                  ; preds = %lor.lhs.false49
  %34 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11165
  %common59 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !11165
  %type60 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common59, i32 0, i32 2, !dbg !11165
  %35 = load %union.tree_node*, %union.tree_node** %type60, align 8, !dbg !11165
  %base61 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !11165
  %36 = bitcast %struct.tree_base* %base61 to i64*, !dbg !11165
  %bf.load62 = load i64, i64* %36, align 8, !dbg !11165
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !11165
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !11165
  %cmp65 = icmp eq i32 %bf.cast64, 10, !dbg !11165
  br i1 %cmp65, label %lor.lhs.false76, label %lor.lhs.false67, !dbg !11165

lor.lhs.false67:                                  ; preds = %land.lhs.true58
  %37 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11165
  %common68 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !11165
  %type69 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common68, i32 0, i32 2, !dbg !11165
  %38 = load %union.tree_node*, %union.tree_node** %type69, align 8, !dbg !11165
  %base70 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !11165
  %39 = bitcast %struct.tree_base* %base70 to i64*, !dbg !11165
  %bf.load71 = load i64, i64* %39, align 8, !dbg !11165
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !11165
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !11165
  %cmp74 = icmp eq i32 %bf.cast73, 12, !dbg !11165
  br i1 %cmp74, label %lor.lhs.false76, label %if.then84, !dbg !11166

lor.lhs.false76:                                  ; preds = %lor.lhs.false67, %land.lhs.true58, %lor.lhs.false49, %lor.lhs.false40, %if.end32
  %type77 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11167
  %40 = load i32, i32* %type77, align 8, !dbg !11167
  %cmp78 = icmp ne i32 %40, 3, !dbg !11168
  br i1 %cmp78, label %land.lhs.true80, label %if.end85, !dbg !11169

land.lhs.true80:                                  ; preds = %lor.lhs.false76
  %call81 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr0), !dbg !11170
  %conv82 = zext i8 %call81 to i32, !dbg !11170
  %tobool83 = icmp ne i32 %conv82, 0, !dbg !11170
  br i1 %tobool83, label %if.then84, label %if.end85, !dbg !11171

if.then84:                                        ; preds = %land.lhs.true80, %lor.lhs.false67
  %41 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11172
  call void @set_value_range_to_varying(%struct.value_range_d* %41), !dbg !11174
  br label %if.end704, !dbg !11175

if.end85:                                         ; preds = %land.lhs.true80, %lor.lhs.false76
  %42 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11176
  %base86 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !11176
  %43 = bitcast %struct.tree_base* %base86 to i64*, !dbg !11176
  %bf.load87 = load i64, i64* %43, align 8, !dbg !11176
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !11176
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !11176
  %cmp90 = icmp eq i32 %bf.cast89, 10, !dbg !11176
  br i1 %cmp90, label %if.then117, label %lor.lhs.false92, !dbg !11176

lor.lhs.false92:                                  ; preds = %if.end85
  %44 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11176
  %base93 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !11176
  %45 = bitcast %struct.tree_base* %base93 to i64*, !dbg !11176
  %bf.load94 = load i64, i64* %45, align 8, !dbg !11176
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !11176
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !11176
  %cmp97 = icmp eq i32 %bf.cast96, 12, !dbg !11176
  br i1 %cmp97, label %if.then117, label %lor.lhs.false99, !dbg !11178

lor.lhs.false99:                                  ; preds = %lor.lhs.false92
  %46 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11179
  %common100 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !11179
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2, !dbg !11179
  %47 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !11179
  %base102 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !11179
  %48 = bitcast %struct.tree_base* %base102 to i64*, !dbg !11179
  %bf.load103 = load i64, i64* %48, align 8, !dbg !11179
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !11179
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !11179
  %cmp106 = icmp eq i32 %bf.cast105, 10, !dbg !11179
  br i1 %cmp106, label %if.then117, label %lor.lhs.false108, !dbg !11179

lor.lhs.false108:                                 ; preds = %lor.lhs.false99
  %49 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11179
  %common109 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !11179
  %type110 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common109, i32 0, i32 2, !dbg !11179
  %50 = load %union.tree_node*, %union.tree_node** %type110, align 8, !dbg !11179
  %base111 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !11179
  %51 = bitcast %struct.tree_base* %base111 to i64*, !dbg !11179
  %bf.load112 = load i64, i64* %51, align 8, !dbg !11179
  %bf.clear113 = and i64 %bf.load112, 65535, !dbg !11179
  %bf.cast114 = trunc i64 %bf.clear113 to i32, !dbg !11179
  %cmp115 = icmp eq i32 %bf.cast114, 12, !dbg !11179
  br i1 %cmp115, label %if.then117, label %if.end135, !dbg !11180

if.then117:                                       ; preds = %lor.lhs.false108, %lor.lhs.false99, %lor.lhs.false92, %if.end85
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !11181, metadata !DIExpression()), !dbg !11183
  store i8 0, i8* %sop, align 1, !dbg !11184
  %call118 = call zeroext i8 @range_is_nonnull(%struct.value_range_d* %vr0), !dbg !11185
  %conv119 = zext i8 %call118 to i32, !dbg !11185
  %tobool120 = icmp ne i32 %conv119, 0, !dbg !11185
  br i1 %tobool120, label %if.then127, label %lor.lhs.false121, !dbg !11187

lor.lhs.false121:                                 ; preds = %if.then117
  %52 = load i32, i32* %code.addr, align 4, !dbg !11188
  %53 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11189
  %54 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11190
  %call122 = call zeroext i8 @tree_unary_nonzero_warnv_p(i32 %52, %union.tree_node* %53, %union.tree_node* %54, i8* %sop), !dbg !11191
  %conv123 = zext i8 %call122 to i32, !dbg !11191
  %tobool124 = icmp ne i32 %conv123, 0, !dbg !11191
  br i1 %tobool124, label %land.lhs.true125, label %if.else128, !dbg !11192

land.lhs.true125:                                 ; preds = %lor.lhs.false121
  %55 = load i8, i8* %sop, align 1, !dbg !11193
  %tobool126 = icmp ne i8 %55, 0, !dbg !11193
  br i1 %tobool126, label %if.else128, label %if.then127, !dbg !11194

if.then127:                                       ; preds = %land.lhs.true125, %if.then117
  %56 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11195
  %57 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11196
  call void @set_value_range_to_nonnull(%struct.value_range_d* %56, %union.tree_node* %57), !dbg !11197
  br label %if.end134, !dbg !11197

if.else128:                                       ; preds = %land.lhs.true125, %lor.lhs.false121
  %call129 = call zeroext i8 @range_is_null(%struct.value_range_d* %vr0), !dbg !11198
  %tobool130 = icmp ne i8 %call129, 0, !dbg !11198
  br i1 %tobool130, label %if.then131, label %if.else132, !dbg !11200

if.then131:                                       ; preds = %if.else128
  %58 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11201
  %59 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11202
  call void @set_value_range_to_null(%struct.value_range_d* %58, %union.tree_node* %59), !dbg !11203
  br label %if.end133, !dbg !11203

if.else132:                                       ; preds = %if.else128
  %60 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11204
  call void @set_value_range_to_varying(%struct.value_range_d* %60), !dbg !11205
  br label %if.end133

if.end133:                                        ; preds = %if.else132, %if.then131
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.then127
  br label %if.end704, !dbg !11206

if.end135:                                        ; preds = %lor.lhs.false108
  %61 = load i32, i32* %code.addr, align 4, !dbg !11207
  %cmp136 = icmp eq i32 %61, 116, !dbg !11207
  br i1 %cmp136, label %land.lhs.true141, label %lor.lhs.false138, !dbg !11207

lor.lhs.false138:                                 ; preds = %if.end135
  %62 = load i32, i32* %code.addr, align 4, !dbg !11207
  %cmp139 = icmp eq i32 %62, 113, !dbg !11207
  br i1 %cmp139, label %land.lhs.true141, label %if.end289, !dbg !11209

land.lhs.true141:                                 ; preds = %lor.lhs.false138, %if.end135
  %63 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11210
  %base142 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !11210
  %64 = bitcast %struct.tree_base* %base142 to i64*, !dbg !11210
  %bf.load143 = load i64, i64* %64, align 8, !dbg !11210
  %bf.clear144 = and i64 %bf.load143, 65535, !dbg !11210
  %bf.cast145 = trunc i64 %bf.clear144 to i32, !dbg !11210
  %cmp146 = icmp eq i32 %bf.cast145, 6, !dbg !11210
  br i1 %cmp146, label %land.lhs.true162, label %lor.lhs.false148, !dbg !11210

lor.lhs.false148:                                 ; preds = %land.lhs.true141
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11210
  %base149 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !11210
  %66 = bitcast %struct.tree_base* %base149 to i64*, !dbg !11210
  %bf.load150 = load i64, i64* %66, align 8, !dbg !11210
  %bf.clear151 = and i64 %bf.load150, 65535, !dbg !11210
  %bf.cast152 = trunc i64 %bf.clear151 to i32, !dbg !11210
  %cmp153 = icmp eq i32 %bf.cast152, 7, !dbg !11210
  br i1 %cmp153, label %land.lhs.true162, label %lor.lhs.false155, !dbg !11210

lor.lhs.false155:                                 ; preds = %lor.lhs.false148
  %67 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11210
  %base156 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !11210
  %68 = bitcast %struct.tree_base* %base156 to i64*, !dbg !11210
  %bf.load157 = load i64, i64* %68, align 8, !dbg !11210
  %bf.clear158 = and i64 %bf.load157, 65535, !dbg !11210
  %bf.cast159 = trunc i64 %bf.clear158 to i32, !dbg !11210
  %cmp160 = icmp eq i32 %bf.cast159, 8, !dbg !11210
  br i1 %cmp160, label %land.lhs.true162, label %if.end289, !dbg !11211

land.lhs.true162:                                 ; preds = %lor.lhs.false155, %lor.lhs.false148, %land.lhs.true141
  %69 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11212
  %common163 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !11212
  %type164 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common163, i32 0, i32 2, !dbg !11212
  %70 = load %union.tree_node*, %union.tree_node** %type164, align 8, !dbg !11212
  %base165 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !11212
  %71 = bitcast %struct.tree_base* %base165 to i64*, !dbg !11212
  %bf.load166 = load i64, i64* %71, align 8, !dbg !11212
  %bf.clear167 = and i64 %bf.load166, 65535, !dbg !11212
  %bf.cast168 = trunc i64 %bf.clear167 to i32, !dbg !11212
  %cmp169 = icmp eq i32 %bf.cast168, 6, !dbg !11212
  br i1 %cmp169, label %if.then189, label %lor.lhs.false171, !dbg !11212

lor.lhs.false171:                                 ; preds = %land.lhs.true162
  %72 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11212
  %common172 = bitcast %union.tree_node* %72 to %struct.tree_common*, !dbg !11212
  %type173 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common172, i32 0, i32 2, !dbg !11212
  %73 = load %union.tree_node*, %union.tree_node** %type173, align 8, !dbg !11212
  %base174 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !11212
  %74 = bitcast %struct.tree_base* %base174 to i64*, !dbg !11212
  %bf.load175 = load i64, i64* %74, align 8, !dbg !11212
  %bf.clear176 = and i64 %bf.load175, 65535, !dbg !11212
  %bf.cast177 = trunc i64 %bf.clear176 to i32, !dbg !11212
  %cmp178 = icmp eq i32 %bf.cast177, 7, !dbg !11212
  br i1 %cmp178, label %if.then189, label %lor.lhs.false180, !dbg !11212

lor.lhs.false180:                                 ; preds = %lor.lhs.false171
  %75 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11212
  %common181 = bitcast %union.tree_node* %75 to %struct.tree_common*, !dbg !11212
  %type182 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common181, i32 0, i32 2, !dbg !11212
  %76 = load %union.tree_node*, %union.tree_node** %type182, align 8, !dbg !11212
  %base183 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !11212
  %77 = bitcast %struct.tree_base* %base183 to i64*, !dbg !11212
  %bf.load184 = load i64, i64* %77, align 8, !dbg !11212
  %bf.clear185 = and i64 %bf.load184, 65535, !dbg !11212
  %bf.cast186 = trunc i64 %bf.clear185 to i32, !dbg !11212
  %cmp187 = icmp eq i32 %bf.cast186, 8, !dbg !11212
  br i1 %cmp187, label %if.then189, label %if.end289, !dbg !11213

if.then189:                                       ; preds = %lor.lhs.false180, %lor.lhs.false171, %land.lhs.true162
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type, metadata !11214, metadata !DIExpression()), !dbg !11216
  %78 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11217
  %common190 = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !11217
  %type191 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common190, i32 0, i32 2, !dbg !11217
  %79 = load %union.tree_node*, %union.tree_node** %type191, align 8, !dbg !11217
  store %union.tree_node* %79, %union.tree_node** %inner_type, align 8, !dbg !11216
  call void @llvm.dbg.declare(metadata %union.tree_node** %outer_type, metadata !11218, metadata !DIExpression()), !dbg !11219
  %80 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11220
  store %union.tree_node* %80, %union.tree_node** %outer_type, align 8, !dbg !11219
  %type192 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11221
  %81 = load i32, i32* %type192, align 8, !dbg !11221
  %cmp193 = icmp eq i32 %81, 3, !dbg !11223
  br i1 %cmp193, label %land.lhs.true195, label %if.end211, !dbg !11224

land.lhs.true195:                                 ; preds = %if.then189
  %82 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !11225
  %type196 = bitcast %union.tree_node* %82 to %struct.tree_type*, !dbg !11225
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type196, i32 0, i32 6, !dbg !11225
  %bf.load197 = load i32, i32* %precision, align 4, !dbg !11225
  %bf.clear198 = and i32 %bf.load197, 1023, !dbg !11225
  %83 = load %union.tree_node*, %union.tree_node** %outer_type, align 8, !dbg !11226
  %type199 = bitcast %union.tree_node* %83 to %struct.tree_type*, !dbg !11226
  %precision200 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type199, i32 0, i32 6, !dbg !11226
  %bf.load201 = load i32, i32* %precision200, align 4, !dbg !11226
  %bf.clear202 = and i32 %bf.load201, 1023, !dbg !11226
  %cmp203 = icmp slt i32 %bf.clear198, %bf.clear202, !dbg !11227
  br i1 %cmp203, label %if.then205, label %if.end211, !dbg !11228

if.then205:                                       ; preds = %land.lhs.true195
  %type206 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11229
  store i32 1, i32* %type206, align 8, !dbg !11231
  %84 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !11232
  %type207 = bitcast %union.tree_node* %84 to %struct.tree_type*, !dbg !11232
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type207, i32 0, i32 13, !dbg !11232
  %85 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !11232
  %min208 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11233
  store %union.tree_node* %85, %union.tree_node** %min208, align 8, !dbg !11234
  %86 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !11235
  %type209 = bitcast %union.tree_node* %86 to %struct.tree_type*, !dbg !11235
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type209, i32 0, i32 14, !dbg !11235
  %87 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !11235
  %max210 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11236
  store %union.tree_node* %87, %union.tree_node** %max210, align 8, !dbg !11237
  br label %if.end211, !dbg !11238

if.end211:                                        ; preds = %if.then205, %land.lhs.true195, %if.then189
  %type212 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11239
  %88 = load i32, i32* %type212, align 8, !dbg !11239
  %cmp213 = icmp eq i32 %88, 1, !dbg !11241
  br i1 %cmp213, label %land.lhs.true219, label %lor.lhs.false215, !dbg !11242

lor.lhs.false215:                                 ; preds = %if.end211
  %type216 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11243
  %89 = load i32, i32* %type216, align 8, !dbg !11243
  %cmp217 = icmp eq i32 %89, 2, !dbg !11244
  br i1 %cmp217, label %land.lhs.true219, label %if.end288, !dbg !11245

land.lhs.true219:                                 ; preds = %lor.lhs.false215, %if.end211
  %min220 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11246
  %90 = load %union.tree_node*, %union.tree_node** %min220, align 8, !dbg !11246
  %base221 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !11246
  %91 = bitcast %struct.tree_base* %base221 to i64*, !dbg !11246
  %bf.load222 = load i64, i64* %91, align 8, !dbg !11246
  %bf.clear223 = and i64 %bf.load222, 65535, !dbg !11246
  %bf.cast224 = trunc i64 %bf.clear223 to i32, !dbg !11246
  %cmp225 = icmp eq i32 %bf.cast224, 23, !dbg !11247
  br i1 %cmp225, label %land.lhs.true227, label %if.end288, !dbg !11248

land.lhs.true227:                                 ; preds = %land.lhs.true219
  %max228 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11249
  %92 = load %union.tree_node*, %union.tree_node** %max228, align 8, !dbg !11249
  %base229 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !11249
  %93 = bitcast %struct.tree_base* %base229 to i64*, !dbg !11249
  %bf.load230 = load i64, i64* %93, align 8, !dbg !11249
  %bf.clear231 = and i64 %bf.load230, 65535, !dbg !11249
  %bf.cast232 = trunc i64 %bf.clear231 to i32, !dbg !11249
  %cmp233 = icmp eq i32 %bf.cast232, 23, !dbg !11250
  br i1 %cmp233, label %land.lhs.true235, label %if.end288, !dbg !11251

land.lhs.true235:                                 ; preds = %land.lhs.true227
  %min236 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11252
  %94 = load %union.tree_node*, %union.tree_node** %min236, align 8, !dbg !11252
  %call237 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %94), !dbg !11253
  %tobool238 = icmp ne i8 %call237, 0, !dbg !11253
  br i1 %tobool238, label %if.end288, label %land.lhs.true239, !dbg !11254

land.lhs.true239:                                 ; preds = %land.lhs.true235
  %max240 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11255
  %95 = load %union.tree_node*, %union.tree_node** %max240, align 8, !dbg !11255
  %call241 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %95), !dbg !11256
  %tobool242 = icmp ne i8 %call241, 0, !dbg !11256
  br i1 %tobool242, label %if.end288, label %land.lhs.true243, !dbg !11257

land.lhs.true243:                                 ; preds = %land.lhs.true239
  %96 = load %union.tree_node*, %union.tree_node** %outer_type, align 8, !dbg !11258
  %type244 = bitcast %union.tree_node* %96 to %struct.tree_type*, !dbg !11258
  %precision245 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type244, i32 0, i32 6, !dbg !11258
  %bf.load246 = load i32, i32* %precision245, align 4, !dbg !11258
  %bf.clear247 = and i32 %bf.load246, 1023, !dbg !11258
  %97 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !11259
  %type248 = bitcast %union.tree_node* %97 to %struct.tree_type*, !dbg !11259
  %precision249 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type248, i32 0, i32 6, !dbg !11259
  %bf.load250 = load i32, i32* %precision249, align 4, !dbg !11259
  %bf.clear251 = and i32 %bf.load250, 1023, !dbg !11259
  %cmp252 = icmp sge i32 %bf.clear247, %bf.clear251, !dbg !11260
  br i1 %cmp252, label %if.then271, label %lor.lhs.false254, !dbg !11261

lor.lhs.false254:                                 ; preds = %land.lhs.true243
  %type255 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11262
  %98 = load i32, i32* %type255, align 8, !dbg !11262
  %cmp256 = icmp eq i32 %98, 1, !dbg !11263
  br i1 %cmp256, label %land.lhs.true258, label %if.end288, !dbg !11264

land.lhs.true258:                                 ; preds = %lor.lhs.false254
  %max259 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11265
  %99 = load %union.tree_node*, %union.tree_node** %max259, align 8, !dbg !11265
  %min260 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11266
  %100 = load %union.tree_node*, %union.tree_node** %min260, align 8, !dbg !11266
  %call261 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %99, %union.tree_node* %100, i32 0), !dbg !11267
  %101 = load %union.tree_node*, %union.tree_node** %outer_type, align 8, !dbg !11268
  %type262 = bitcast %union.tree_node* %101 to %struct.tree_type*, !dbg !11268
  %precision263 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type262, i32 0, i32 6, !dbg !11268
  %bf.load264 = load i32, i32* %precision263, align 4, !dbg !11268
  %bf.clear265 = and i32 %bf.load264, 1023, !dbg !11268
  %conv266 = zext i32 %bf.clear265 to i64, !dbg !11268
  %call267 = call %union.tree_node* @size_int_kind(i64 %conv266, i32 0), !dbg !11268
  %call268 = call %union.tree_node* @int_const_binop(i32 84, %union.tree_node* %call261, %union.tree_node* %call267, i32 0), !dbg !11269
  %call269 = call i32 @integer_zerop(%union.tree_node* %call268), !dbg !11270
  %tobool270 = icmp ne i32 %call269, 0, !dbg !11270
  br i1 %tobool270, label %if.then271, label %if.end288, !dbg !11271

if.then271:                                       ; preds = %land.lhs.true258, %land.lhs.true243
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_min, metadata !11272, metadata !DIExpression()), !dbg !11274
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_max, metadata !11275, metadata !DIExpression()), !dbg !11276
  %102 = load %union.tree_node*, %union.tree_node** %outer_type, align 8, !dbg !11277
  %min272 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11278
  %103 = load %union.tree_node*, %union.tree_node** %min272, align 8, !dbg !11278
  %int_cst = bitcast %union.tree_node* %103 to %struct.tree_int_cst*, !dbg !11278
  %int_cst273 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !11278
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst273, i32 0, i32 0, !dbg !11278
  %104 = load i64, i64* %low, align 8, !dbg !11278
  %min274 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11279
  %105 = load %union.tree_node*, %union.tree_node** %min274, align 8, !dbg !11279
  %int_cst275 = bitcast %union.tree_node* %105 to %struct.tree_int_cst*, !dbg !11279
  %int_cst276 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst275, i32 0, i32 1, !dbg !11279
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst276, i32 0, i32 1, !dbg !11279
  %106 = load i64, i64* %high, align 8, !dbg !11279
  %call277 = call %union.tree_node* @force_fit_type_double(%union.tree_node* %102, i64 %104, i64 %106, i32 0, i8 zeroext 0), !dbg !11280
  store %union.tree_node* %call277, %union.tree_node** %new_min, align 8, !dbg !11281
  %107 = load %union.tree_node*, %union.tree_node** %outer_type, align 8, !dbg !11282
  %max278 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11283
  %108 = load %union.tree_node*, %union.tree_node** %max278, align 8, !dbg !11283
  %int_cst279 = bitcast %union.tree_node* %108 to %struct.tree_int_cst*, !dbg !11283
  %int_cst280 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst279, i32 0, i32 1, !dbg !11283
  %low281 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst280, i32 0, i32 0, !dbg !11283
  %109 = load i64, i64* %low281, align 8, !dbg !11283
  %max282 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11284
  %110 = load %union.tree_node*, %union.tree_node** %max282, align 8, !dbg !11284
  %int_cst283 = bitcast %union.tree_node* %110 to %struct.tree_int_cst*, !dbg !11284
  %int_cst284 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst283, i32 0, i32 1, !dbg !11284
  %high285 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst284, i32 0, i32 1, !dbg !11284
  %111 = load i64, i64* %high285, align 8, !dbg !11284
  %call286 = call %union.tree_node* @force_fit_type_double(%union.tree_node* %107, i64 %109, i64 %111, i32 0, i8 zeroext 0), !dbg !11285
  store %union.tree_node* %call286, %union.tree_node** %new_max, align 8, !dbg !11286
  %112 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11287
  %type287 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11288
  %113 = load i32, i32* %type287, align 8, !dbg !11288
  %114 = load %union.tree_node*, %union.tree_node** %new_min, align 8, !dbg !11289
  %115 = load %union.tree_node*, %union.tree_node** %new_max, align 8, !dbg !11290
  call void @set_and_canonicalize_value_range(%struct.value_range_d* %112, i32 %113, %union.tree_node* %114, %union.tree_node* %115, %struct.bitmap_head_def* null), !dbg !11291
  br label %if.end704, !dbg !11292

if.end288:                                        ; preds = %land.lhs.true258, %lor.lhs.false254, %land.lhs.true239, %land.lhs.true235, %land.lhs.true227, %land.lhs.true219, %lor.lhs.false215
  %116 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11293
  call void @set_value_range_to_varying(%struct.value_range_d* %116), !dbg !11294
  br label %if.end704, !dbg !11295

if.end289:                                        ; preds = %lor.lhs.false180, %lor.lhs.false155, %lor.lhs.false138
  %type290 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11296
  %117 = load i32, i32* %type290, align 8, !dbg !11296
  %cmp291 = icmp eq i32 %117, 3, !dbg !11298
  br i1 %cmp291, label %if.then293, label %if.end294, !dbg !11299

if.then293:                                       ; preds = %if.end289
  %118 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11300
  call void @set_value_range_to_varying(%struct.value_range_d* %118), !dbg !11302
  br label %if.end704, !dbg !11303

if.end294:                                        ; preds = %if.end289
  %119 = load i32, i32* %code.addr, align 4, !dbg !11304
  %cmp295 = icmp eq i32 %119, 79, !dbg !11306
  br i1 %cmp295, label %land.lhs.true297, label %if.else383, !dbg !11307

land.lhs.true297:                                 ; preds = %if.end294
  %120 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11308
  %base298 = bitcast %union.tree_node* %120 to %struct.tree_base*, !dbg !11308
  %121 = bitcast %struct.tree_base* %base298 to i64*, !dbg !11308
  %bf.load299 = load i64, i64* %121, align 8, !dbg !11308
  %bf.lshr = lshr i64 %bf.load299, 21, !dbg !11308
  %bf.clear300 = and i64 %bf.lshr, 1, !dbg !11308
  %bf.cast301 = trunc i64 %bf.clear300 to i32, !dbg !11308
  %tobool302 = icmp ne i32 %bf.cast301, 0, !dbg !11308
  br i1 %tobool302, label %if.else383, label %if.then303, !dbg !11309

if.then303:                                       ; preds = %land.lhs.true297
  %max304 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11310
  %122 = load %union.tree_node*, %union.tree_node** %max304, align 8, !dbg !11310
  %call305 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %122), !dbg !11313
  %tobool306 = icmp ne i8 %call305, 0, !dbg !11313
  br i1 %tobool306, label %if.then307, label %if.else309, !dbg !11314

if.then307:                                       ; preds = %if.then303
  %123 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11315
  %call308 = call %union.tree_node* @negative_overflow_infinity(%union.tree_node* %123), !dbg !11316
  store %union.tree_node* %call308, %union.tree_node** %min, align 8, !dbg !11317
  br label %if.end347, !dbg !11318

if.else309:                                       ; preds = %if.then303
  %max310 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11319
  %124 = load %union.tree_node*, %union.tree_node** %max310, align 8, !dbg !11319
  %call311 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %124), !dbg !11321
  %tobool312 = icmp ne i8 %call311, 0, !dbg !11321
  br i1 %tobool312, label %if.then313, label %if.else315, !dbg !11322

if.then313:                                       ; preds = %if.else309
  %125 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11323
  %call314 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %125), !dbg !11324
  store %union.tree_node* %call314, %union.tree_node** %min, align 8, !dbg !11325
  br label %if.end346, !dbg !11326

if.else315:                                       ; preds = %if.else309
  %max316 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11327
  %126 = load %union.tree_node*, %union.tree_node** %max316, align 8, !dbg !11327
  %call317 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %126), !dbg !11329
  %tobool318 = icmp ne i8 %call317, 0, !dbg !11329
  br i1 %tobool318, label %if.else322, label %if.then319, !dbg !11330

if.then319:                                       ; preds = %if.else315
  %127 = load i32, i32* %code.addr, align 4, !dbg !11331
  %128 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11332
  %max320 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11333
  %129 = load %union.tree_node*, %union.tree_node** %max320, align 8, !dbg !11333
  %call321 = call %union.tree_node* @fold_unary_to_constant(i32 %127, %union.tree_node* %128, %union.tree_node* %129), !dbg !11334
  store %union.tree_node* %call321, %union.tree_node** %min, align 8, !dbg !11335
  br label %if.end345, !dbg !11336

if.else322:                                       ; preds = %if.else315
  %130 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11337
  %call323 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %130), !dbg !11339
  %tobool324 = icmp ne i8 %call323, 0, !dbg !11339
  br i1 %tobool324, label %if.then325, label %if.else341, !dbg !11340

if.then325:                                       ; preds = %if.else322
  %131 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11341
  %call326 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %131), !dbg !11344
  %conv327 = zext i8 %call326 to i32, !dbg !11344
  %tobool328 = icmp ne i32 %conv327, 0, !dbg !11344
  br i1 %tobool328, label %land.lhs.true329, label %if.else339, !dbg !11345

land.lhs.true329:                                 ; preds = %if.then325
  %min330 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11346
  %132 = load %union.tree_node*, %union.tree_node** %min330, align 8, !dbg !11346
  %call331 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %132), !dbg !11347
  %tobool332 = icmp ne i8 %call331, 0, !dbg !11347
  br i1 %tobool332, label %if.else339, label %land.lhs.true333, !dbg !11348

land.lhs.true333:                                 ; preds = %land.lhs.true329
  %min334 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11349
  %133 = load %union.tree_node*, %union.tree_node** %min334, align 8, !dbg !11349
  %call335 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %133), !dbg !11350
  %tobool336 = icmp ne i8 %call335, 0, !dbg !11350
  br i1 %tobool336, label %if.else339, label %if.then337, !dbg !11351

if.then337:                                       ; preds = %land.lhs.true333
  %134 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11352
  %call338 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %134), !dbg !11353
  store %union.tree_node* %call338, %union.tree_node** %min, align 8, !dbg !11354
  br label %if.end340, !dbg !11355

if.else339:                                       ; preds = %land.lhs.true333, %land.lhs.true329, %if.then325
  %135 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11356
  call void @set_value_range_to_varying(%struct.value_range_d* %135), !dbg !11358
  br label %if.end704, !dbg !11359

if.end340:                                        ; preds = %if.then337
  br label %if.end344, !dbg !11360

if.else341:                                       ; preds = %if.else322
  %136 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11361
  %type342 = bitcast %union.tree_node* %136 to %struct.tree_type*, !dbg !11361
  %minval343 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type342, i32 0, i32 13, !dbg !11361
  %137 = load %union.tree_node*, %union.tree_node** %minval343, align 8, !dbg !11361
  store %union.tree_node* %137, %union.tree_node** %min, align 8, !dbg !11362
  br label %if.end344

if.end344:                                        ; preds = %if.else341, %if.end340
  br label %if.end345

if.end345:                                        ; preds = %if.end344, %if.then319
  br label %if.end346

if.end346:                                        ; preds = %if.end345, %if.then313
  br label %if.end347

if.end347:                                        ; preds = %if.end346, %if.then307
  %min348 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11363
  %138 = load %union.tree_node*, %union.tree_node** %min348, align 8, !dbg !11363
  %call349 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %138), !dbg !11365
  %tobool350 = icmp ne i8 %call349, 0, !dbg !11365
  br i1 %tobool350, label %if.then351, label %if.else353, !dbg !11366

if.then351:                                       ; preds = %if.end347
  %139 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11367
  %call352 = call %union.tree_node* @negative_overflow_infinity(%union.tree_node* %139), !dbg !11368
  store %union.tree_node* %call352, %union.tree_node** %max, align 8, !dbg !11369
  br label %if.end382, !dbg !11370

if.else353:                                       ; preds = %if.end347
  %min354 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11371
  %140 = load %union.tree_node*, %union.tree_node** %min354, align 8, !dbg !11371
  %call355 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %140), !dbg !11373
  %tobool356 = icmp ne i8 %call355, 0, !dbg !11373
  br i1 %tobool356, label %if.then357, label %if.else359, !dbg !11374

if.then357:                                       ; preds = %if.else353
  %141 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11375
  %call358 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %141), !dbg !11376
  store %union.tree_node* %call358, %union.tree_node** %max, align 8, !dbg !11377
  br label %if.end381, !dbg !11378

if.else359:                                       ; preds = %if.else353
  %min360 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11379
  %142 = load %union.tree_node*, %union.tree_node** %min360, align 8, !dbg !11379
  %call361 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %142), !dbg !11381
  %tobool362 = icmp ne i8 %call361, 0, !dbg !11381
  br i1 %tobool362, label %if.else366, label %if.then363, !dbg !11382

if.then363:                                       ; preds = %if.else359
  %143 = load i32, i32* %code.addr, align 4, !dbg !11383
  %144 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11384
  %min364 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11385
  %145 = load %union.tree_node*, %union.tree_node** %min364, align 8, !dbg !11385
  %call365 = call %union.tree_node* @fold_unary_to_constant(i32 %143, %union.tree_node* %144, %union.tree_node* %145), !dbg !11386
  store %union.tree_node* %call365, %union.tree_node** %max, align 8, !dbg !11387
  br label %if.end380, !dbg !11388

if.else366:                                       ; preds = %if.else359
  %146 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11389
  %call367 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %146), !dbg !11391
  %tobool368 = icmp ne i8 %call367, 0, !dbg !11391
  br i1 %tobool368, label %if.then369, label %if.else376, !dbg !11392

if.then369:                                       ; preds = %if.else366
  %147 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11393
  %call370 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %147), !dbg !11396
  %tobool371 = icmp ne i8 %call370, 0, !dbg !11396
  br i1 %tobool371, label %if.then372, label %if.else374, !dbg !11397

if.then372:                                       ; preds = %if.then369
  %148 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11398
  %call373 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %148), !dbg !11399
  store %union.tree_node* %call373, %union.tree_node** %max, align 8, !dbg !11400
  br label %if.end375, !dbg !11401

if.else374:                                       ; preds = %if.then369
  %149 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11402
  call void @set_value_range_to_varying(%struct.value_range_d* %149), !dbg !11404
  br label %if.end704, !dbg !11405

if.end375:                                        ; preds = %if.then372
  br label %if.end379, !dbg !11406

if.else376:                                       ; preds = %if.else366
  %150 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11407
  %type377 = bitcast %union.tree_node* %150 to %struct.tree_type*, !dbg !11407
  %minval378 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type377, i32 0, i32 13, !dbg !11407
  %151 = load %union.tree_node*, %union.tree_node** %minval378, align 8, !dbg !11407
  store %union.tree_node* %151, %union.tree_node** %max, align 8, !dbg !11408
  br label %if.end379

if.end379:                                        ; preds = %if.else376, %if.end375
  br label %if.end380

if.end380:                                        ; preds = %if.end379, %if.then363
  br label %if.end381

if.end381:                                        ; preds = %if.end380, %if.then357
  br label %if.end382

if.end382:                                        ; preds = %if.end381, %if.then351
  br label %if.end694, !dbg !11409

if.else383:                                       ; preds = %land.lhs.true297, %if.end294
  %152 = load i32, i32* %code.addr, align 4, !dbg !11410
  %cmp384 = icmp eq i32 %152, 79, !dbg !11412
  br i1 %cmp384, label %land.lhs.true386, label %if.else408, !dbg !11413

land.lhs.true386:                                 ; preds = %if.else383
  %153 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11414
  %base387 = bitcast %union.tree_node* %153 to %struct.tree_base*, !dbg !11414
  %154 = bitcast %struct.tree_base* %base387 to i64*, !dbg !11414
  %bf.load388 = load i64, i64* %154, align 8, !dbg !11414
  %bf.lshr389 = lshr i64 %bf.load388, 21, !dbg !11414
  %bf.clear390 = and i64 %bf.lshr389, 1, !dbg !11414
  %bf.cast391 = trunc i64 %bf.clear390 to i32, !dbg !11414
  %tobool392 = icmp ne i32 %bf.cast391, 0, !dbg !11414
  br i1 %tobool392, label %if.then393, label %if.else408, !dbg !11415

if.then393:                                       ; preds = %land.lhs.true386
  %call394 = call zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr0), !dbg !11416
  %tobool395 = icmp ne i8 %call394, 0, !dbg !11416
  br i1 %tobool395, label %if.else401, label %if.then396, !dbg !11419

if.then396:                                       ; preds = %if.then393
  %155 = load i32, i32* %code.addr, align 4, !dbg !11420
  %156 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11422
  %min397 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11423
  %157 = load %union.tree_node*, %union.tree_node** %min397, align 8, !dbg !11423
  %call398 = call %union.tree_node* @fold_unary_to_constant(i32 %155, %union.tree_node* %156, %union.tree_node* %157), !dbg !11424
  store %union.tree_node* %call398, %union.tree_node** %max, align 8, !dbg !11425
  %158 = load i32, i32* %code.addr, align 4, !dbg !11426
  %159 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11427
  %max399 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11428
  %160 = load %union.tree_node*, %union.tree_node** %max399, align 8, !dbg !11428
  %call400 = call %union.tree_node* @fold_unary_to_constant(i32 %158, %union.tree_node* %159, %union.tree_node* %160), !dbg !11429
  store %union.tree_node* %call400, %union.tree_node** %min, align 8, !dbg !11430
  br label %if.end407, !dbg !11431

if.else401:                                       ; preds = %if.then393
  %call402 = call zeroext i8 @range_is_null(%struct.value_range_d* %vr0), !dbg !11432
  %tobool403 = icmp ne i8 %call402, 0, !dbg !11432
  br i1 %tobool403, label %if.then404, label %if.else405, !dbg !11435

if.then404:                                       ; preds = %if.else401
  %161 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11436
  %162 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11437
  call void @set_value_range_to_null(%struct.value_range_d* %161, %union.tree_node* %162), !dbg !11438
  br label %if.end406, !dbg !11438

if.else405:                                       ; preds = %if.else401
  %163 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11439
  call void @set_value_range_to_varying(%struct.value_range_d* %163), !dbg !11440
  br label %if.end406

if.end406:                                        ; preds = %if.else405, %if.then404
  br label %if.end704, !dbg !11441

if.end407:                                        ; preds = %if.then396
  br label %if.end693, !dbg !11442

if.else408:                                       ; preds = %land.lhs.true386, %if.else383
  %164 = load i32, i32* %code.addr, align 4, !dbg !11443
  %cmp409 = icmp eq i32 %164, 82, !dbg !11445
  br i1 %cmp409, label %land.lhs.true411, label %if.else583, !dbg !11446

land.lhs.true411:                                 ; preds = %if.else408
  %165 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11447
  %base412 = bitcast %union.tree_node* %165 to %struct.tree_base*, !dbg !11447
  %166 = bitcast %struct.tree_base* %base412 to i64*, !dbg !11447
  %bf.load413 = load i64, i64* %166, align 8, !dbg !11447
  %bf.lshr414 = lshr i64 %bf.load413, 21, !dbg !11447
  %bf.clear415 = and i64 %bf.lshr414, 1, !dbg !11447
  %bf.cast416 = trunc i64 %bf.clear415 to i32, !dbg !11447
  %tobool417 = icmp ne i32 %bf.cast416, 0, !dbg !11447
  br i1 %tobool417, label %if.else583, label %if.then418, !dbg !11448

if.then418:                                       ; preds = %land.lhs.true411
  %167 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11449
  %base419 = bitcast %union.tree_node* %167 to %struct.tree_base*, !dbg !11449
  %168 = bitcast %struct.tree_base* %base419 to i64*, !dbg !11449
  %bf.load420 = load i64, i64* %168, align 8, !dbg !11449
  %bf.lshr421 = lshr i64 %bf.load420, 21, !dbg !11449
  %bf.clear422 = and i64 %bf.lshr421, 1, !dbg !11449
  %bf.cast423 = trunc i64 %bf.clear422 to i32, !dbg !11449
  %tobool424 = icmp ne i32 %bf.cast423, 0, !dbg !11449
  br i1 %tobool424, label %land.lhs.true431, label %land.lhs.true425, !dbg !11449

land.lhs.true425:                                 ; preds = %if.then418
  %169 = load i32, i32* @flag_wrapv, align 4, !dbg !11449
  %tobool426 = icmp ne i32 %169, 0, !dbg !11449
  br i1 %tobool426, label %land.lhs.true431, label %land.lhs.true427, !dbg !11449

land.lhs.true427:                                 ; preds = %land.lhs.true425
  %170 = load i32, i32* @flag_trapv, align 4, !dbg !11449
  %tobool428 = icmp ne i32 %170, 0, !dbg !11449
  br i1 %tobool428, label %land.lhs.true431, label %land.lhs.true429, !dbg !11449

land.lhs.true429:                                 ; preds = %land.lhs.true427
  %171 = load i32, i32* @flag_strict_overflow, align 4, !dbg !11449
  %tobool430 = icmp ne i32 %171, 0, !dbg !11449
  br i1 %tobool430, label %if.end452, label %land.lhs.true431, !dbg !11452

land.lhs.true431:                                 ; preds = %land.lhs.true429, %land.lhs.true427, %land.lhs.true425, %if.then418
  %type432 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11453
  %172 = load i32, i32* %type432, align 8, !dbg !11453
  %cmp433 = icmp eq i32 %172, 1, !dbg !11454
  br i1 %cmp433, label %land.lhs.true435, label %lor.lhs.false440, !dbg !11455

land.lhs.true435:                                 ; preds = %land.lhs.true431
  %min436 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11456
  %173 = load %union.tree_node*, %union.tree_node** %min436, align 8, !dbg !11456
  %call437 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %173), !dbg !11457
  %conv438 = zext i8 %call437 to i32, !dbg !11457
  %tobool439 = icmp ne i32 %conv438, 0, !dbg !11457
  br i1 %tobool439, label %if.then451, label %lor.lhs.false440, !dbg !11458

lor.lhs.false440:                                 ; preds = %land.lhs.true435, %land.lhs.true431
  %type441 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11459
  %174 = load i32, i32* %type441, align 8, !dbg !11459
  %cmp442 = icmp eq i32 %174, 2, !dbg !11460
  br i1 %cmp442, label %land.lhs.true444, label %if.end452, !dbg !11461

land.lhs.true444:                                 ; preds = %lor.lhs.false440
  %min445 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11462
  %175 = load %union.tree_node*, %union.tree_node** %min445, align 8, !dbg !11462
  %call446 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %175), !dbg !11463
  %tobool447 = icmp ne i8 %call446, 0, !dbg !11463
  br i1 %tobool447, label %if.end452, label %land.lhs.true448, !dbg !11464

land.lhs.true448:                                 ; preds = %land.lhs.true444
  %call449 = call zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr0), !dbg !11465
  %tobool450 = icmp ne i8 %call449, 0, !dbg !11465
  br i1 %tobool450, label %if.end452, label %if.then451, !dbg !11466

if.then451:                                       ; preds = %land.lhs.true448, %land.lhs.true435
  %176 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11467
  call void @set_value_range_to_varying(%struct.value_range_d* %176), !dbg !11469
  br label %if.end704, !dbg !11470

if.end452:                                        ; preds = %land.lhs.true448, %land.lhs.true444, %lor.lhs.false440, %land.lhs.true429
  %min453 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11471
  %177 = load %union.tree_node*, %union.tree_node** %min453, align 8, !dbg !11471
  %call454 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %177), !dbg !11473
  %tobool455 = icmp ne i8 %call454, 0, !dbg !11473
  br i1 %tobool455, label %if.then456, label %if.else458, !dbg !11474

if.then456:                                       ; preds = %if.end452
  %178 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11475
  %call457 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %178), !dbg !11476
  store %union.tree_node* %call457, %union.tree_node** %min, align 8, !dbg !11477
  br label %if.end480, !dbg !11478

if.else458:                                       ; preds = %if.end452
  %min459 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11479
  %179 = load %union.tree_node*, %union.tree_node** %min459, align 8, !dbg !11479
  %call460 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %179), !dbg !11481
  %tobool461 = icmp ne i8 %call460, 0, !dbg !11481
  br i1 %tobool461, label %if.else465, label %if.then462, !dbg !11482

if.then462:                                       ; preds = %if.else458
  %180 = load i32, i32* %code.addr, align 4, !dbg !11483
  %181 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11484
  %min463 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11485
  %182 = load %union.tree_node*, %union.tree_node** %min463, align 8, !dbg !11485
  %call464 = call %union.tree_node* @fold_unary_to_constant(i32 %180, %union.tree_node* %181, %union.tree_node* %182), !dbg !11486
  store %union.tree_node* %call464, %union.tree_node** %min, align 8, !dbg !11487
  br label %if.end479, !dbg !11488

if.else465:                                       ; preds = %if.else458
  %183 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11489
  %call466 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %183), !dbg !11491
  %tobool467 = icmp ne i8 %call466, 0, !dbg !11491
  br i1 %tobool467, label %if.else471, label %if.then468, !dbg !11492

if.then468:                                       ; preds = %if.else465
  %184 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11493
  %type469 = bitcast %union.tree_node* %184 to %struct.tree_type*, !dbg !11493
  %maxval470 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type469, i32 0, i32 14, !dbg !11493
  %185 = load %union.tree_node*, %union.tree_node** %maxval470, align 8, !dbg !11493
  store %union.tree_node* %185, %union.tree_node** %min, align 8, !dbg !11494
  br label %if.end478, !dbg !11495

if.else471:                                       ; preds = %if.else465
  %186 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11496
  %call472 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %186), !dbg !11498
  %tobool473 = icmp ne i8 %call472, 0, !dbg !11498
  br i1 %tobool473, label %if.then474, label %if.else476, !dbg !11499

if.then474:                                       ; preds = %if.else471
  %187 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11500
  %call475 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %187), !dbg !11501
  store %union.tree_node* %call475, %union.tree_node** %min, align 8, !dbg !11502
  br label %if.end477, !dbg !11503

if.else476:                                       ; preds = %if.else471
  %188 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11504
  call void @set_value_range_to_varying(%struct.value_range_d* %188), !dbg !11506
  br label %if.end704, !dbg !11507

if.end477:                                        ; preds = %if.then474
  br label %if.end478

if.end478:                                        ; preds = %if.end477, %if.then468
  br label %if.end479

if.end479:                                        ; preds = %if.end478, %if.then462
  br label %if.end480

if.end480:                                        ; preds = %if.end479, %if.then456
  %max481 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11508
  %189 = load %union.tree_node*, %union.tree_node** %max481, align 8, !dbg !11508
  %call482 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %189), !dbg !11510
  %tobool483 = icmp ne i8 %call482, 0, !dbg !11510
  br i1 %tobool483, label %if.then484, label %if.else486, !dbg !11511

if.then484:                                       ; preds = %if.end480
  %190 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11512
  %call485 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %190), !dbg !11513
  store %union.tree_node* %call485, %union.tree_node** %max, align 8, !dbg !11514
  br label %if.end512, !dbg !11515

if.else486:                                       ; preds = %if.end480
  %max487 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11516
  %191 = load %union.tree_node*, %union.tree_node** %max487, align 8, !dbg !11516
  %call488 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %191), !dbg !11518
  %tobool489 = icmp ne i8 %call488, 0, !dbg !11518
  br i1 %tobool489, label %if.else493, label %if.then490, !dbg !11519

if.then490:                                       ; preds = %if.else486
  %192 = load i32, i32* %code.addr, align 4, !dbg !11520
  %193 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11521
  %max491 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11522
  %194 = load %union.tree_node*, %union.tree_node** %max491, align 8, !dbg !11522
  %call492 = call %union.tree_node* @fold_unary_to_constant(i32 %192, %union.tree_node* %193, %union.tree_node* %194), !dbg !11523
  store %union.tree_node* %call492, %union.tree_node** %max, align 8, !dbg !11524
  br label %if.end511, !dbg !11525

if.else493:                                       ; preds = %if.else486
  %195 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11526
  %call494 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %195), !dbg !11528
  %tobool495 = icmp ne i8 %call494, 0, !dbg !11528
  br i1 %tobool495, label %if.else499, label %if.then496, !dbg !11529

if.then496:                                       ; preds = %if.else493
  %196 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11530
  %type497 = bitcast %union.tree_node* %196 to %struct.tree_type*, !dbg !11530
  %maxval498 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type497, i32 0, i32 14, !dbg !11530
  %197 = load %union.tree_node*, %union.tree_node** %maxval498, align 8, !dbg !11530
  store %union.tree_node* %197, %union.tree_node** %max, align 8, !dbg !11531
  br label %if.end510, !dbg !11532

if.else499:                                       ; preds = %if.else493
  %198 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11533
  %call500 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %198), !dbg !11535
  %conv501 = zext i8 %call500 to i32, !dbg !11535
  %tobool502 = icmp ne i32 %conv501, 0, !dbg !11535
  br i1 %tobool502, label %land.lhs.true503, label %if.else508, !dbg !11536

land.lhs.true503:                                 ; preds = %if.else499
  %199 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11537
  %call504 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %199), !dbg !11538
  %tobool505 = icmp ne i8 %call504, 0, !dbg !11538
  br i1 %tobool505, label %if.else508, label %if.then506, !dbg !11539

if.then506:                                       ; preds = %land.lhs.true503
  %200 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11540
  %call507 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %200), !dbg !11541
  store %union.tree_node* %call507, %union.tree_node** %max, align 8, !dbg !11542
  br label %if.end509, !dbg !11543

if.else508:                                       ; preds = %land.lhs.true503, %if.else499
  %201 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11544
  call void @set_value_range_to_varying(%struct.value_range_d* %201), !dbg !11546
  br label %if.end704, !dbg !11547

if.end509:                                        ; preds = %if.then506
  br label %if.end510

if.end510:                                        ; preds = %if.end509, %if.then496
  br label %if.end511

if.end511:                                        ; preds = %if.end510, %if.then490
  br label %if.end512

if.end512:                                        ; preds = %if.end511, %if.then484
  %202 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11548
  %203 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11549
  %call513 = call i32 @compare_values(%union.tree_node* %202, %union.tree_node* %203), !dbg !11550
  store i32 %call513, i32* %cmp, align 4, !dbg !11551
  %type514 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11552
  %204 = load i32, i32* %type514, align 8, !dbg !11552
  %cmp515 = icmp eq i32 %204, 2, !dbg !11554
  br i1 %cmp515, label %if.then517, label %if.else567, !dbg !11555

if.then517:                                       ; preds = %if.end512
  %call518 = call zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr0), !dbg !11556
  %tobool519 = icmp ne i8 %call518, 0, !dbg !11556
  br i1 %tobool519, label %if.then520, label %if.else550, !dbg !11559

if.then520:                                       ; preds = %if.then517
  %205 = load i32, i32* %cmp, align 4, !dbg !11560
  %cmp521 = icmp ne i32 %205, 1, !dbg !11563
  br i1 %cmp521, label %if.then523, label %if.end524, !dbg !11564

if.then523:                                       ; preds = %if.then520
  %206 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11565
  store %union.tree_node* %206, %union.tree_node** %max, align 8, !dbg !11566
  br label %if.end524, !dbg !11567

if.end524:                                        ; preds = %if.then523, %if.then520
  %207 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11568
  %base525 = bitcast %union.tree_node* %207 to %struct.tree_base*, !dbg !11568
  %208 = bitcast %struct.tree_base* %base525 to i64*, !dbg !11568
  %bf.load526 = load i64, i64* %208, align 8, !dbg !11568
  %bf.lshr527 = lshr i64 %bf.load526, 21, !dbg !11568
  %bf.clear528 = and i64 %bf.lshr527, 1, !dbg !11568
  %bf.cast529 = trunc i64 %bf.clear528 to i32, !dbg !11568
  %tobool530 = icmp ne i32 %bf.cast529, 0, !dbg !11568
  br i1 %tobool530, label %if.then533, label %lor.lhs.false531, !dbg !11568

lor.lhs.false531:                                 ; preds = %if.end524
  %209 = load i32, i32* @flag_wrapv, align 4, !dbg !11568
  %tobool532 = icmp ne i32 %209, 0, !dbg !11568
  br i1 %tobool532, label %if.then533, label %if.else540, !dbg !11570

if.then533:                                       ; preds = %lor.lhs.false531, %if.end524
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_min_value, metadata !11571, metadata !DIExpression()), !dbg !11573
  %210 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11574
  %type534 = bitcast %union.tree_node* %210 to %struct.tree_type*, !dbg !11574
  %minval535 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type534, i32 0, i32 13, !dbg !11574
  %211 = load %union.tree_node*, %union.tree_node** %minval535, align 8, !dbg !11574
  store %union.tree_node* %211, %union.tree_node** %type_min_value, align 8, !dbg !11573
  %min536 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11575
  %212 = load %union.tree_node*, %union.tree_node** %min536, align 8, !dbg !11575
  %213 = load %union.tree_node*, %union.tree_node** %type_min_value, align 8, !dbg !11576
  %cmp537 = icmp ne %union.tree_node* %212, %213, !dbg !11577
  br i1 %cmp537, label %cond.true, label %cond.false, !dbg !11578

cond.true:                                        ; preds = %if.then533
  %214 = load %union.tree_node*, %union.tree_node** %type_min_value, align 8, !dbg !11579
  %215 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !11580
  %call539 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %214, %union.tree_node* %215, i32 0), !dbg !11581
  br label %cond.end, !dbg !11578

cond.false:                                       ; preds = %if.then533
  %216 = load %union.tree_node*, %union.tree_node** %type_min_value, align 8, !dbg !11582
  br label %cond.end, !dbg !11578

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call539, %cond.true ], [ %216, %cond.false ], !dbg !11578
  store %union.tree_node* %cond, %union.tree_node** %min, align 8, !dbg !11583
  br label %if.end549, !dbg !11584

if.else540:                                       ; preds = %lor.lhs.false531
  %call541 = call zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr0), !dbg !11585
  %tobool542 = icmp ne i8 %call541, 0, !dbg !11585
  br i1 %tobool542, label %if.then543, label %if.else545, !dbg !11588

if.then543:                                       ; preds = %if.else540
  %217 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11589
  %call544 = call %union.tree_node* @negative_overflow_infinity(%union.tree_node* %217), !dbg !11590
  store %union.tree_node* %call544, %union.tree_node** %min, align 8, !dbg !11591
  br label %if.end548, !dbg !11592

if.else545:                                       ; preds = %if.else540
  %218 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11593
  %type546 = bitcast %union.tree_node* %218 to %struct.tree_type*, !dbg !11593
  %minval547 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type546, i32 0, i32 13, !dbg !11593
  %219 = load %union.tree_node*, %union.tree_node** %minval547, align 8, !dbg !11593
  store %union.tree_node* %219, %union.tree_node** %min, align 8, !dbg !11594
  br label %if.end548

if.end548:                                        ; preds = %if.else545, %if.then543
  br label %if.end549

if.end549:                                        ; preds = %if.end548, %cond.end
  br label %if.end566, !dbg !11595

if.else550:                                       ; preds = %if.then517
  %type551 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11596
  store i32 1, i32* %type551, align 8, !dbg !11598
  %220 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11599
  %call552 = call %union.tree_node* @build_int_cst(%union.tree_node* %220, i64 0), !dbg !11600
  store %union.tree_node* %call552, %union.tree_node** %min, align 8, !dbg !11601
  %221 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11602
  %call553 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %221), !dbg !11604
  %tobool554 = icmp ne i8 %call553, 0, !dbg !11604
  br i1 %tobool554, label %if.then555, label %if.else562, !dbg !11605

if.then555:                                       ; preds = %if.else550
  %222 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11606
  %call556 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %222), !dbg !11609
  %tobool557 = icmp ne i8 %call556, 0, !dbg !11609
  br i1 %tobool557, label %if.then558, label %if.else560, !dbg !11610

if.then558:                                       ; preds = %if.then555
  %223 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11611
  %call559 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %223), !dbg !11612
  store %union.tree_node* %call559, %union.tree_node** %max, align 8, !dbg !11613
  br label %if.end561, !dbg !11614

if.else560:                                       ; preds = %if.then555
  %224 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11615
  call void @set_value_range_to_varying(%struct.value_range_d* %224), !dbg !11617
  br label %if.end704, !dbg !11618

if.end561:                                        ; preds = %if.then558
  br label %if.end565, !dbg !11619

if.else562:                                       ; preds = %if.else550
  %225 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11620
  %type563 = bitcast %union.tree_node* %225 to %struct.tree_type*, !dbg !11620
  %maxval564 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type563, i32 0, i32 14, !dbg !11620
  %226 = load %union.tree_node*, %union.tree_node** %maxval564, align 8, !dbg !11620
  store %union.tree_node* %226, %union.tree_node** %max, align 8, !dbg !11621
  br label %if.end565

if.end565:                                        ; preds = %if.else562, %if.end561
  br label %if.end566

if.end566:                                        ; preds = %if.end565, %if.end549
  br label %if.end582, !dbg !11622

if.else567:                                       ; preds = %if.end512
  %call568 = call zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr0), !dbg !11623
  %tobool569 = icmp ne i8 %call568, 0, !dbg !11623
  br i1 %tobool569, label %if.then570, label %if.else576, !dbg !11625

if.then570:                                       ; preds = %if.else567
  %227 = load i32, i32* %cmp, align 4, !dbg !11626
  %cmp571 = icmp eq i32 %227, 1, !dbg !11629
  br i1 %cmp571, label %if.then573, label %if.end574, !dbg !11630

if.then573:                                       ; preds = %if.then570
  %228 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11631
  store %union.tree_node* %228, %union.tree_node** %max, align 8, !dbg !11632
  br label %if.end574, !dbg !11633

if.end574:                                        ; preds = %if.then573, %if.then570
  %229 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11634
  %call575 = call %union.tree_node* @build_int_cst(%union.tree_node* %229, i64 0), !dbg !11635
  store %union.tree_node* %call575, %union.tree_node** %min, align 8, !dbg !11636
  br label %if.end581, !dbg !11637

if.else576:                                       ; preds = %if.else567
  %230 = load i32, i32* %cmp, align 4, !dbg !11638
  %cmp577 = icmp eq i32 %230, 1, !dbg !11641
  br i1 %cmp577, label %if.then579, label %if.end580, !dbg !11642

if.then579:                                       ; preds = %if.else576
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !11643, metadata !DIExpression()), !dbg !11645
  %231 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11646
  store %union.tree_node* %231, %union.tree_node** %t, align 8, !dbg !11645
  %232 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11647
  store %union.tree_node* %232, %union.tree_node** %min, align 8, !dbg !11648
  %233 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !11649
  store %union.tree_node* %233, %union.tree_node** %max, align 8, !dbg !11650
  br label %if.end580, !dbg !11651

if.end580:                                        ; preds = %if.then579, %if.else576
  br label %if.end581

if.end581:                                        ; preds = %if.end580, %if.end574
  br label %if.end582

if.end582:                                        ; preds = %if.end581, %if.end566
  br label %if.end692, !dbg !11652

if.else583:                                       ; preds = %land.lhs.true411, %if.else408
  %234 = load i32, i32* %code.addr, align 4, !dbg !11653
  %235 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11655
  %min584 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11656
  %236 = load %union.tree_node*, %union.tree_node** %min584, align 8, !dbg !11656
  %call585 = call %union.tree_node* @fold_unary_to_constant(i32 %234, %union.tree_node* %235, %union.tree_node* %236), !dbg !11657
  store %union.tree_node* %call585, %union.tree_node** %min, align 8, !dbg !11658
  %237 = load i32, i32* %code.addr, align 4, !dbg !11659
  %238 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11660
  %max586 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11661
  %239 = load %union.tree_node*, %union.tree_node** %max586, align 8, !dbg !11661
  %call587 = call %union.tree_node* @fold_unary_to_constant(i32 %237, %union.tree_node* %238, %union.tree_node* %239), !dbg !11662
  store %union.tree_node* %call587, %union.tree_node** %max, align 8, !dbg !11663
  %240 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11664
  %call588 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %240), !dbg !11666
  %tobool589 = icmp ne i8 %call588, 0, !dbg !11666
  br i1 %tobool589, label %if.then590, label %if.end691, !dbg !11667

if.then590:                                       ; preds = %if.else583
  %241 = load i32, i32* %code.addr, align 4, !dbg !11668
  %cmp591 = icmp ne i32 %241, 79, !dbg !11668
  br i1 %cmp591, label %land.lhs.true593, label %cond.true596, !dbg !11668

land.lhs.true593:                                 ; preds = %if.then590
  %242 = load i32, i32* %code.addr, align 4, !dbg !11668
  %cmp594 = icmp ne i32 %242, 82, !dbg !11668
  br i1 %cmp594, label %cond.false597, label %cond.true596, !dbg !11668

cond.true596:                                     ; preds = %land.lhs.true593, %if.then590
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 2959, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !11668
  br label %cond.end598, !dbg !11668

cond.false597:                                    ; preds = %land.lhs.true593
  br label %cond.end598, !dbg !11668

cond.end598:                                      ; preds = %cond.false597, %cond.true596
  %cond599 = phi i32 [ 0, %cond.true596 ], [ 0, %cond.false597 ], !dbg !11668
  %min600 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11670
  %243 = load %union.tree_node*, %union.tree_node** %min600, align 8, !dbg !11670
  %call601 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %243), !dbg !11672
  %conv602 = zext i8 %call601 to i32, !dbg !11672
  %tobool603 = icmp ne i32 %conv602, 0, !dbg !11672
  br i1 %tobool603, label %land.lhs.true611, label %lor.lhs.false604, !dbg !11673

lor.lhs.false604:                                 ; preds = %cond.end598
  %244 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11674
  %base605 = bitcast %union.tree_node* %244 to %struct.tree_base*, !dbg !11674
  %245 = bitcast %struct.tree_base* %base605 to i64*, !dbg !11674
  %bf.load606 = load i64, i64* %245, align 8, !dbg !11674
  %bf.lshr607 = lshr i64 %bf.load606, 27, !dbg !11674
  %bf.clear608 = and i64 %bf.lshr607, 1, !dbg !11674
  %bf.cast609 = trunc i64 %bf.clear608 to i32, !dbg !11674
  %tobool610 = icmp ne i32 %bf.cast609, 0, !dbg !11674
  br i1 %tobool610, label %land.lhs.true611, label %if.end624, !dbg !11675

land.lhs.true611:                                 ; preds = %lor.lhs.false604, %cond.end598
  %max612 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11676
  %246 = load %union.tree_node*, %union.tree_node** %max612, align 8, !dbg !11676
  %call613 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %246), !dbg !11677
  %conv614 = zext i8 %call613 to i32, !dbg !11677
  %tobool615 = icmp ne i32 %conv614, 0, !dbg !11677
  br i1 %tobool615, label %if.then623, label %lor.lhs.false616, !dbg !11678

lor.lhs.false616:                                 ; preds = %land.lhs.true611
  %247 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11679
  %base617 = bitcast %union.tree_node* %247 to %struct.tree_base*, !dbg !11679
  %248 = bitcast %struct.tree_base* %base617 to i64*, !dbg !11679
  %bf.load618 = load i64, i64* %248, align 8, !dbg !11679
  %bf.lshr619 = lshr i64 %bf.load618, 27, !dbg !11679
  %bf.clear620 = and i64 %bf.lshr619, 1, !dbg !11679
  %bf.cast621 = trunc i64 %bf.clear620 to i32, !dbg !11679
  %tobool622 = icmp ne i32 %bf.cast621, 0, !dbg !11679
  br i1 %tobool622, label %if.then623, label %if.end624, !dbg !11680

if.then623:                                       ; preds = %lor.lhs.false616, %land.lhs.true611
  %249 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11681
  call void @set_value_range_to_varying(%struct.value_range_d* %249), !dbg !11683
  br label %if.end704, !dbg !11684

if.end624:                                        ; preds = %lor.lhs.false616, %lor.lhs.false604
  %min625 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11685
  %250 = load %union.tree_node*, %union.tree_node** %min625, align 8, !dbg !11685
  %call626 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %250), !dbg !11687
  %tobool627 = icmp ne i8 %call626, 0, !dbg !11687
  br i1 %tobool627, label %if.then628, label %if.else630, !dbg !11688

if.then628:                                       ; preds = %if.end624
  %min629 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 1, !dbg !11689
  %251 = load %union.tree_node*, %union.tree_node** %min629, align 8, !dbg !11689
  store %union.tree_node* %251, %union.tree_node** %min, align 8, !dbg !11690
  br label %if.end657, !dbg !11691

if.else630:                                       ; preds = %if.end624
  %252 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11692
  %base631 = bitcast %union.tree_node* %252 to %struct.tree_base*, !dbg !11692
  %253 = bitcast %struct.tree_base* %base631 to i64*, !dbg !11692
  %bf.load632 = load i64, i64* %253, align 8, !dbg !11692
  %bf.lshr633 = lshr i64 %bf.load632, 27, !dbg !11692
  %bf.clear634 = and i64 %bf.lshr633, 1, !dbg !11692
  %bf.cast635 = trunc i64 %bf.clear634 to i32, !dbg !11692
  %tobool636 = icmp ne i32 %bf.cast635, 0, !dbg !11692
  br i1 %tobool636, label %if.then637, label %if.end656, !dbg !11694

if.then637:                                       ; preds = %if.else630
  %254 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11695
  %call638 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %254), !dbg !11698
  %tobool639 = icmp ne i8 %call638, 0, !dbg !11698
  br i1 %tobool639, label %if.then640, label %if.else654, !dbg !11699

if.then640:                                       ; preds = %if.then637
  %255 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11700
  %call641 = call i32 @tree_int_cst_sgn(%union.tree_node* %255), !dbg !11701
  %cmp642 = icmp sge i32 %call641, 0, !dbg !11702
  br i1 %cmp642, label %cond.true644, label %cond.false648, !dbg !11701

cond.true644:                                     ; preds = %if.then640
  %256 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11703
  %common645 = bitcast %union.tree_node* %256 to %struct.tree_common*, !dbg !11703
  %type646 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common645, i32 0, i32 2, !dbg !11703
  %257 = load %union.tree_node*, %union.tree_node** %type646, align 8, !dbg !11703
  %call647 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %257), !dbg !11704
  br label %cond.end652, !dbg !11701

cond.false648:                                    ; preds = %if.then640
  %258 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11705
  %common649 = bitcast %union.tree_node* %258 to %struct.tree_common*, !dbg !11705
  %type650 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common649, i32 0, i32 2, !dbg !11705
  %259 = load %union.tree_node*, %union.tree_node** %type650, align 8, !dbg !11705
  %call651 = call %union.tree_node* @negative_overflow_infinity(%union.tree_node* %259), !dbg !11706
  br label %cond.end652, !dbg !11701

cond.end652:                                      ; preds = %cond.false648, %cond.true644
  %cond653 = phi %union.tree_node* [ %call647, %cond.true644 ], [ %call651, %cond.false648 ], !dbg !11701
  store %union.tree_node* %cond653, %union.tree_node** %min, align 8, !dbg !11707
  br label %if.end655, !dbg !11708

if.else654:                                       ; preds = %if.then637
  %260 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11709
  call void @set_value_range_to_varying(%struct.value_range_d* %260), !dbg !11711
  br label %if.end704, !dbg !11712

if.end655:                                        ; preds = %cond.end652
  br label %if.end656, !dbg !11713

if.end656:                                        ; preds = %if.end655, %if.else630
  br label %if.end657

if.end657:                                        ; preds = %if.end656, %if.then628
  %max658 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11714
  %261 = load %union.tree_node*, %union.tree_node** %max658, align 8, !dbg !11714
  %call659 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %261), !dbg !11716
  %tobool660 = icmp ne i8 %call659, 0, !dbg !11716
  br i1 %tobool660, label %if.then661, label %if.else663, !dbg !11717

if.then661:                                       ; preds = %if.end657
  %max662 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 2, !dbg !11718
  %262 = load %union.tree_node*, %union.tree_node** %max662, align 8, !dbg !11718
  store %union.tree_node* %262, %union.tree_node** %max, align 8, !dbg !11719
  br label %if.end690, !dbg !11720

if.else663:                                       ; preds = %if.end657
  %263 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11721
  %base664 = bitcast %union.tree_node* %263 to %struct.tree_base*, !dbg !11721
  %264 = bitcast %struct.tree_base* %base664 to i64*, !dbg !11721
  %bf.load665 = load i64, i64* %264, align 8, !dbg !11721
  %bf.lshr666 = lshr i64 %bf.load665, 27, !dbg !11721
  %bf.clear667 = and i64 %bf.lshr666, 1, !dbg !11721
  %bf.cast668 = trunc i64 %bf.clear667 to i32, !dbg !11721
  %tobool669 = icmp ne i32 %bf.cast668, 0, !dbg !11721
  br i1 %tobool669, label %if.then670, label %if.end689, !dbg !11723

if.then670:                                       ; preds = %if.else663
  %265 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11724
  %call671 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %265), !dbg !11727
  %tobool672 = icmp ne i8 %call671, 0, !dbg !11727
  br i1 %tobool672, label %if.then673, label %if.else687, !dbg !11728

if.then673:                                       ; preds = %if.then670
  %266 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11729
  %call674 = call i32 @tree_int_cst_sgn(%union.tree_node* %266), !dbg !11730
  %cmp675 = icmp sge i32 %call674, 0, !dbg !11731
  br i1 %cmp675, label %cond.true677, label %cond.false681, !dbg !11730

cond.true677:                                     ; preds = %if.then673
  %267 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11732
  %common678 = bitcast %union.tree_node* %267 to %struct.tree_common*, !dbg !11732
  %type679 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common678, i32 0, i32 2, !dbg !11732
  %268 = load %union.tree_node*, %union.tree_node** %type679, align 8, !dbg !11732
  %call680 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %268), !dbg !11733
  br label %cond.end685, !dbg !11730

cond.false681:                                    ; preds = %if.then673
  %269 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11734
  %common682 = bitcast %union.tree_node* %269 to %struct.tree_common*, !dbg !11734
  %type683 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common682, i32 0, i32 2, !dbg !11734
  %270 = load %union.tree_node*, %union.tree_node** %type683, align 8, !dbg !11734
  %call684 = call %union.tree_node* @negative_overflow_infinity(%union.tree_node* %270), !dbg !11735
  br label %cond.end685, !dbg !11730

cond.end685:                                      ; preds = %cond.false681, %cond.true677
  %cond686 = phi %union.tree_node* [ %call680, %cond.true677 ], [ %call684, %cond.false681 ], !dbg !11730
  store %union.tree_node* %cond686, %union.tree_node** %max, align 8, !dbg !11736
  br label %if.end688, !dbg !11737

if.else687:                                       ; preds = %if.then670
  %271 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11738
  call void @set_value_range_to_varying(%struct.value_range_d* %271), !dbg !11740
  br label %if.end704, !dbg !11741

if.end688:                                        ; preds = %cond.end685
  br label %if.end689, !dbg !11742

if.end689:                                        ; preds = %if.end688, %if.else663
  br label %if.end690

if.end690:                                        ; preds = %if.end689, %if.then661
  br label %if.end691, !dbg !11743

if.end691:                                        ; preds = %if.end690, %if.else583
  br label %if.end692

if.end692:                                        ; preds = %if.end691, %if.end582
  br label %if.end693

if.end693:                                        ; preds = %if.end692, %if.end407
  br label %if.end694

if.end694:                                        ; preds = %if.end693, %if.end382
  %272 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11744
  %273 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11745
  %call695 = call i32 @compare_values(%union.tree_node* %272, %union.tree_node* %273), !dbg !11746
  store i32 %call695, i32* %cmp, align 4, !dbg !11747
  %274 = load i32, i32* %cmp, align 4, !dbg !11748
  %cmp696 = icmp eq i32 %274, -2, !dbg !11750
  br i1 %cmp696, label %if.then701, label %lor.lhs.false698, !dbg !11751

lor.lhs.false698:                                 ; preds = %if.end694
  %275 = load i32, i32* %cmp, align 4, !dbg !11752
  %cmp699 = icmp eq i32 %275, 1, !dbg !11753
  br i1 %cmp699, label %if.then701, label %if.else702, !dbg !11754

if.then701:                                       ; preds = %lor.lhs.false698, %if.end694
  %276 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11755
  call void @set_value_range_to_varying(%struct.value_range_d* %276), !dbg !11757
  br label %if.end704, !dbg !11758

if.else702:                                       ; preds = %lor.lhs.false698
  %277 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11759
  %type703 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i32 0, i32 0, !dbg !11760
  %278 = load i32, i32* %type703, align 8, !dbg !11760
  %279 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11761
  %280 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11762
  call void @set_value_range(%struct.value_range_d* %277, i32 %278, %union.tree_node* %279, %union.tree_node* %280, %struct.bitmap_head_def* null), !dbg !11763
  br label %if.end704

if.end704:                                        ; preds = %if.then15, %if.end16, %if.then31, %if.then84, %if.end134, %if.then271, %if.end288, %if.then293, %if.else339, %if.else374, %if.end406, %if.then451, %if.else476, %if.else508, %if.else560, %if.then623, %if.else654, %if.else687, %if.else702, %if.then701
  ret void, !dbg !11764
}

; Function Attrs: noinline nounwind uwtable
define internal void @extract_range_from_cond_expr(%struct.value_range_d* %vr, %union.tree_node* %expr) #0 !dbg !11765 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %vr0 = alloca %struct.value_range_d, align 8
  %vr1 = alloca %struct.value_range_d, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !11766, metadata !DIExpression()), !dbg !11767
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !11768, metadata !DIExpression()), !dbg !11769
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !11770, metadata !DIExpression()), !dbg !11771
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !11772, metadata !DIExpression()), !dbg !11773
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %vr0, metadata !11774, metadata !DIExpression()), !dbg !11775
  %0 = bitcast %struct.value_range_d* %vr0 to i8*, !dbg !11775
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 32, i1 false), !dbg !11775
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %vr1, metadata !11776, metadata !DIExpression()), !dbg !11777
  %1 = bitcast %struct.value_range_d* %vr1 to i8*, !dbg !11777
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false), !dbg !11777
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11778
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !11778
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11778
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !11778
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11778
  store %union.tree_node* %3, %union.tree_node** %op0, align 8, !dbg !11779
  %4 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !11780
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !11780
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !11780
  %bf.load = load i64, i64* %5, align 8, !dbg !11780
  %bf.clear = and i64 %bf.load, 65535, !dbg !11780
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11780
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !11782
  br i1 %cmp, label %if.then, label %if.else, !dbg !11783

if.then:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !11784
  %call = call %struct.value_range_d* @get_value_range(%union.tree_node* %6), !dbg !11785
  %7 = bitcast %struct.value_range_d* %vr0 to i8*, !dbg !11786
  %8 = bitcast %struct.value_range_d* %call to i8*, !dbg !11786
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 32, i1 false), !dbg !11786
  br label %if.end4, !dbg !11787

if.else:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !11788
  %call1 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %9), !dbg !11790
  %tobool = icmp ne i8 %call1, 0, !dbg !11790
  br i1 %tobool, label %if.then2, label %if.else3, !dbg !11791

if.then2:                                         ; preds = %if.else
  %10 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !11792
  call void @set_value_range_to_value(%struct.value_range_d* %vr0, %union.tree_node* %10, %struct.bitmap_head_def* null), !dbg !11793
  br label %if.end, !dbg !11793

if.else3:                                         ; preds = %if.else
  call void @set_value_range_to_varying(%struct.value_range_d* %vr0), !dbg !11794
  br label %if.end

if.end:                                           ; preds = %if.else3, %if.then2
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11795
  %exp5 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !11795
  %operands6 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5, i32 0, i32 3, !dbg !11795
  %arrayidx7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6, i64 0, i64 2, !dbg !11795
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx7, align 8, !dbg !11795
  store %union.tree_node* %12, %union.tree_node** %op1, align 8, !dbg !11796
  %13 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !11797
  %base8 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !11797
  %14 = bitcast %struct.tree_base* %base8 to i64*, !dbg !11797
  %bf.load9 = load i64, i64* %14, align 8, !dbg !11797
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !11797
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !11797
  %cmp12 = icmp eq i32 %bf.cast11, 141, !dbg !11799
  br i1 %cmp12, label %if.then13, label %if.else15, !dbg !11800

if.then13:                                        ; preds = %if.end4
  %15 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !11801
  %call14 = call %struct.value_range_d* @get_value_range(%union.tree_node* %15), !dbg !11802
  %16 = bitcast %struct.value_range_d* %vr1 to i8*, !dbg !11803
  %17 = bitcast %struct.value_range_d* %call14 to i8*, !dbg !11803
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 32, i1 false), !dbg !11803
  br label %if.end21, !dbg !11804

if.else15:                                        ; preds = %if.end4
  %18 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !11805
  %call16 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %18), !dbg !11807
  %tobool17 = icmp ne i8 %call16, 0, !dbg !11807
  br i1 %tobool17, label %if.then18, label %if.else19, !dbg !11808

if.then18:                                        ; preds = %if.else15
  %19 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !11809
  call void @set_value_range_to_value(%struct.value_range_d* %vr1, %union.tree_node* %19, %struct.bitmap_head_def* null), !dbg !11810
  br label %if.end20, !dbg !11810

if.else19:                                        ; preds = %if.else15
  call void @set_value_range_to_varying(%struct.value_range_d* %vr1), !dbg !11811
  br label %if.end20

if.end20:                                         ; preds = %if.else19, %if.then18
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then13
  call void @vrp_meet(%struct.value_range_d* %vr0, %struct.value_range_d* %vr1), !dbg !11812
  %20 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11813
  call void @copy_value_range(%struct.value_range_d* %20, %struct.value_range_d* %vr0), !dbg !11814
  ret void, !dbg !11815
}

; Function Attrs: noinline nounwind uwtable
define internal void @extract_range_from_comparison(%struct.value_range_d* %vr, i32 %code, %union.tree_node* %type, %union.tree_node* %op0, %union.tree_node* %op1) #0 !dbg !11816 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %code.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %sop = alloca i8, align 1
  %val = alloca %union.tree_node*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !11817, metadata !DIExpression()), !dbg !11818
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !11819, metadata !DIExpression()), !dbg !11820
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !11821, metadata !DIExpression()), !dbg !11822
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !11823, metadata !DIExpression()), !dbg !11824
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !11825, metadata !DIExpression()), !dbg !11826
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !11827, metadata !DIExpression()), !dbg !11828
  store i8 0, i8* %sop, align 1, !dbg !11828
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !11829, metadata !DIExpression()), !dbg !11830
  %0 = load i32, i32* %code.addr, align 4, !dbg !11831
  %1 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !11832
  %2 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !11833
  %call = call %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops(i32 %0, %union.tree_node* %1, %union.tree_node* %2, i8 zeroext 0, i8* %sop, i8* null), !dbg !11834
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !11835
  %3 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !11836
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !11836
  br i1 %tobool, label %land.lhs.true, label %if.else10, !dbg !11838

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !11839
  %call1 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %4), !dbg !11840
  %tobool2 = icmp ne i8 %call1, 0, !dbg !11840
  br i1 %tobool2, label %if.else10, label %land.lhs.true3, !dbg !11841

land.lhs.true3:                                   ; preds = %land.lhs.true
  %5 = load i8, i8* %sop, align 1, !dbg !11842
  %tobool4 = icmp ne i8 %5, 0, !dbg !11842
  br i1 %tobool4, label %if.else10, label %if.then, !dbg !11843

if.then:                                          ; preds = %land.lhs.true3
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11844
  %7 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !11844
  %call5 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %6, %union.tree_node* %7), !dbg !11844
  store %union.tree_node* %call5, %union.tree_node** %val, align 8, !dbg !11846
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !11847
  %call6 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %8), !dbg !11849
  %tobool7 = icmp ne i8 %call6, 0, !dbg !11849
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !11850

if.then8:                                         ; preds = %if.then
  %9 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11851
  %10 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !11852
  %11 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11853
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %11, i32 0, i32 3, !dbg !11854
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !11854
  call void @set_value_range_to_value(%struct.value_range_d* %9, %union.tree_node* %10, %struct.bitmap_head_def* %12), !dbg !11855
  br label %if.end, !dbg !11855

if.else:                                          ; preds = %if.then
  %13 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11856
  %14 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !11857
  %15 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !11858
  %16 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11859
  %equiv9 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %16, i32 0, i32 3, !dbg !11860
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv9, align 8, !dbg !11860
  call void @set_value_range(%struct.value_range_d* %13, i32 1, %union.tree_node* %14, %union.tree_node* %15, %struct.bitmap_head_def* %17), !dbg !11861
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then8
  br label %if.end11, !dbg !11862

if.else10:                                        ; preds = %land.lhs.true3, %land.lhs.true, %entry
  %18 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11863
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11864
  call void @set_value_range_to_truthvalue(%struct.value_range_d* %18, %union.tree_node* %19), !dbg !11865
  br label %if.end11

if.end11:                                         ; preds = %if.else10, %if.end
  ret void, !dbg !11866
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_value_range_to_value(%struct.value_range_d* %vr, %union.tree_node* %val, %struct.bitmap_head_def* %equiv) #0 !dbg !11867 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %equiv.addr = alloca %struct.bitmap_head_def*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !11870, metadata !DIExpression()), !dbg !11871
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !11872, metadata !DIExpression()), !dbg !11873
  store %struct.bitmap_head_def* %equiv, %struct.bitmap_head_def** %equiv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %equiv.addr, metadata !11874, metadata !DIExpression()), !dbg !11875
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !11876
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %0), !dbg !11876
  %tobool = icmp ne i8 %call, 0, !dbg !11876
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11876

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 515, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !11876
  br label %cond.end, !dbg !11876

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11876

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11876
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !11877
  %call1 = call %union.tree_node* @avoid_overflow_infinity(%union.tree_node* %1), !dbg !11878
  store %union.tree_node* %call1, %union.tree_node** %val.addr, align 8, !dbg !11879
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11880
  %3 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !11881
  %4 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !11882
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv.addr, align 8, !dbg !11883
  call void @set_value_range(%struct.value_range_d* %2, i32 1, %union.tree_node* %3, %union.tree_node* %4, %struct.bitmap_head_def* %5), !dbg !11884
  ret void, !dbg !11885
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @avoid_overflow_infinity(%union.tree_node* %val) #0 !dbg !11886 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !11887, metadata !DIExpression()), !dbg !11888
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !11889
  %call = call zeroext i8 @is_overflow_infinity(%union.tree_node* %0), !dbg !11891
  %tobool = icmp ne i8 %call, 0, !dbg !11891
  br i1 %tobool, label %if.end, label %if.then, !dbg !11892

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !11893
  store %union.tree_node* %1, %union.tree_node** %retval, align 8, !dbg !11894
  br label %return, !dbg !11894

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !11895
  %call1 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %2), !dbg !11897
  %tobool2 = icmp ne i8 %call1, 0, !dbg !11897
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !11898

if.then3:                                         ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !11899
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !11899
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11899
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11899
  %call4 = call %union.tree_node* @vrp_val_max(%union.tree_node* %4), !dbg !11900
  store %union.tree_node* %call4, %union.tree_node** %retval, align 8, !dbg !11901
  br label %return, !dbg !11901

if.else:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !11902
  %common5 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !11902
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !11902
  %6 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !11902
  %call7 = call %union.tree_node* @vrp_val_min(%union.tree_node* %6), !dbg !11904
  store %union.tree_node* %call7, %union.tree_node** %retval, align 8, !dbg !11905
  br label %return, !dbg !11905

return:                                           ; preds = %if.else, %if.then3, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11906
  ret %union.tree_node* %7, !dbg !11906
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr) #0 !dbg !11907 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !11908, metadata !DIExpression()), !dbg !11909
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11910
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 1, !dbg !11911
  %1 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11911
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %1), !dbg !11912
  %tobool = icmp ne i8 %call, 0, !dbg !11912
  br i1 %tobool, label %lor.rhs, label %lor.end, !dbg !11913

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11914
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 2, !dbg !11915
  %3 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11915
  %call1 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %3), !dbg !11916
  %tobool2 = icmp ne i8 %call1, 0, !dbg !11917
  %lnot = xor i1 %tobool2, true, !dbg !11917
  br label %lor.end, !dbg !11913

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !11913
  %conv = trunc i32 %lor.ext to i8, !dbg !11918
  ret i8 %conv, !dbg !11919
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_equivalence(%struct.bitmap_head_def** %equiv, %union.tree_node* %var) #0 !dbg !11920 {
entry:
  %equiv.addr = alloca %struct.bitmap_head_def**, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %ver = alloca i32, align 4
  %vr = alloca %struct.value_range_d*, align 8
  store %struct.bitmap_head_def** %equiv, %struct.bitmap_head_def*** %equiv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %equiv.addr, metadata !11924, metadata !DIExpression()), !dbg !11925
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !11926, metadata !DIExpression()), !dbg !11927
  call void @llvm.dbg.declare(metadata i32* %ver, metadata !11928, metadata !DIExpression()), !dbg !11929
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !11930
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !11930
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !11930
  %1 = load i32, i32* %version, align 8, !dbg !11930
  store i32 %1, i32* %ver, align 4, !dbg !11929
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !11931, metadata !DIExpression()), !dbg !11932
  %2 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !11933
  %3 = load i32, i32* %ver, align 4, !dbg !11934
  %idxprom = zext i32 %3 to i64, !dbg !11933
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %2, i64 %idxprom, !dbg !11933
  %4 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx, align 8, !dbg !11933
  store %struct.value_range_d* %4, %struct.value_range_d** %vr, align 8, !dbg !11932
  %5 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %equiv.addr, align 8, !dbg !11935
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %5, align 8, !dbg !11937
  %cmp = icmp eq %struct.bitmap_head_def* %6, null, !dbg !11938
  br i1 %cmp, label %if.then, label %if.end, !dbg !11939

if.then:                                          ; preds = %entry
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !11940
  %7 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %equiv.addr, align 8, !dbg !11941
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %7, align 8, !dbg !11942
  br label %if.end, !dbg !11943

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %equiv.addr, align 8, !dbg !11944
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %8, align 8, !dbg !11945
  %10 = load i32, i32* %ver, align 4, !dbg !11946
  %call1 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %9, i32 %10), !dbg !11947
  %11 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !11948
  %tobool = icmp ne %struct.value_range_d* %11, null, !dbg !11948
  br i1 %tobool, label %land.lhs.true, label %if.end7, !dbg !11950

land.lhs.true:                                    ; preds = %if.end
  %12 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !11951
  %equiv2 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %12, i32 0, i32 3, !dbg !11952
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv2, align 8, !dbg !11952
  %tobool3 = icmp ne %struct.bitmap_head_def* %13, null, !dbg !11951
  br i1 %tobool3, label %if.then4, label %if.end7, !dbg !11953

if.then4:                                         ; preds = %land.lhs.true
  %14 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %equiv.addr, align 8, !dbg !11954
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %14, align 8, !dbg !11955
  %16 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !11956
  %equiv5 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %16, i32 0, i32 3, !dbg !11957
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv5, align 8, !dbg !11957
  %call6 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %15, %struct.bitmap_head_def* %17), !dbg !11958
  br label %if.end7, !dbg !11958

if.end7:                                          ; preds = %if.then4, %land.lhs.true, %if.end
  ret void, !dbg !11959
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @int_const_binop(i32, %union.tree_node*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @force_fit_type_double(%union.tree_node*, i64, i64, i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_and_canonicalize_value_range(%struct.value_range_d* %vr, i32 %t, %union.tree_node* %min, %union.tree_node* %max, %struct.bitmap_head_def* %equiv) #0 !dbg !11960 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %t.addr = alloca i32, align 4
  %min.addr = alloca %union.tree_node*, align 8
  %max.addr = alloca %union.tree_node*, align 8
  %equiv.addr = alloca %struct.bitmap_head_def*, align 8
  %one = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %is_min = alloca i8, align 1
  %is_max = alloca i8, align 1
  %one42 = alloca %union.tree_node*, align 8
  %one53 = alloca %union.tree_node*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !11961, metadata !DIExpression()), !dbg !11962
  store i32 %t, i32* %t.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %t.addr, metadata !11963, metadata !DIExpression()), !dbg !11964
  store %union.tree_node* %min, %union.tree_node** %min.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %min.addr, metadata !11965, metadata !DIExpression()), !dbg !11966
  store %union.tree_node* %max, %union.tree_node** %max.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %max.addr, metadata !11967, metadata !DIExpression()), !dbg !11968
  store %struct.bitmap_head_def* %equiv, %struct.bitmap_head_def** %equiv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %equiv.addr, metadata !11969, metadata !DIExpression()), !dbg !11970
  %0 = load i32, i32* %t.addr, align 4, !dbg !11971
  %cmp = icmp ne i32 %0, 1, !dbg !11973
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !11974

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %t.addr, align 4, !dbg !11975
  %cmp1 = icmp ne i32 %1, 2, !dbg !11976
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !11977

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !11978
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !11978
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !11978
  %bf.load = load i64, i64* %3, align 8, !dbg !11978
  %bf.clear = and i64 %bf.load, 65535, !dbg !11978
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11978
  %cmp2 = icmp ne i32 %bf.cast, 23, !dbg !11979
  br i1 %cmp2, label %if.then, label %lor.lhs.false3, !dbg !11980

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !11981
  %base4 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !11981
  %5 = bitcast %struct.tree_base* %base4 to i64*, !dbg !11981
  %bf.load5 = load i64, i64* %5, align 8, !dbg !11981
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !11981
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !11981
  %cmp8 = icmp ne i32 %bf.cast7, 23, !dbg !11982
  br i1 %cmp8, label %if.then, label %if.end, !dbg !11983

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %land.lhs.true
  %6 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !11984
  %7 = load i32, i32* %t.addr, align 4, !dbg !11986
  %8 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !11987
  %9 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !11988
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv.addr, align 8, !dbg !11989
  call void @set_value_range(%struct.value_range_d* %6, i32 %7, %union.tree_node* %8, %union.tree_node* %9, %struct.bitmap_head_def* %10), !dbg !11990
  br label %return, !dbg !11991

if.end:                                           ; preds = %lor.lhs.false3
  %11 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !11992
  %12 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !11994
  %call = call i32 @tree_int_cst_lt(%union.tree_node* %11, %union.tree_node* %12), !dbg !11995
  %tobool = icmp ne i32 %call, 0, !dbg !11995
  br i1 %tobool, label %if.then9, label %if.end18, !dbg !11996

if.then9:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %one, metadata !11997, metadata !DIExpression()), !dbg !11999
  %13 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12000
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !12000
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12000
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12000
  %call10 = call %union.tree_node* @build_int_cst(%union.tree_node* %14, i64 1), !dbg !12001
  store %union.tree_node* %call10, %union.tree_node** %one, align 8, !dbg !11999
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !12002, metadata !DIExpression()), !dbg !12003
  %15 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12004
  %16 = load %union.tree_node*, %union.tree_node** %one, align 8, !dbg !12005
  %call11 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %15, %union.tree_node* %16, i32 0), !dbg !12006
  store %union.tree_node* %call11, %union.tree_node** %tmp, align 8, !dbg !12003
  %17 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12007
  %18 = load %union.tree_node*, %union.tree_node** %one, align 8, !dbg !12008
  %call12 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %17, %union.tree_node* %18, i32 0), !dbg !12009
  store %union.tree_node* %call12, %union.tree_node** %max.addr, align 8, !dbg !12010
  %19 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !12011
  store %union.tree_node* %19, %union.tree_node** %min.addr, align 8, !dbg !12012
  %20 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12013
  %21 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12015
  %call13 = call i32 @tree_int_cst_lt(%union.tree_node* %20, %union.tree_node* %21), !dbg !12016
  %tobool14 = icmp ne i32 %call13, 0, !dbg !12016
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !12017

if.then15:                                        ; preds = %if.then9
  %22 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12018
  call void @set_value_range_to_varying(%struct.value_range_d* %22), !dbg !12020
  br label %return, !dbg !12021

if.end16:                                         ; preds = %if.then9
  %23 = load i32, i32* %t.addr, align 4, !dbg !12022
  %cmp17 = icmp eq i32 %23, 1, !dbg !12023
  %24 = zext i1 %cmp17 to i64, !dbg !12022
  %cond = select i1 %cmp17, i32 2, i32 1, !dbg !12022
  store i32 %cond, i32* %t.addr, align 4, !dbg !12024
  br label %if.end18, !dbg !12025

if.end18:                                         ; preds = %if.end16, %if.end
  %25 = load i32, i32* %t.addr, align 4, !dbg !12026
  %cmp19 = icmp eq i32 %25, 2, !dbg !12028
  br i1 %cmp19, label %if.then20, label %if.end64, !dbg !12029

if.then20:                                        ; preds = %if.end18
  call void @llvm.dbg.declare(metadata i8* %is_min, metadata !12030, metadata !DIExpression()), !dbg !12032
  %26 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12033
  %call21 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %26), !dbg !12034
  store i8 %call21, i8* %is_min, align 1, !dbg !12032
  call void @llvm.dbg.declare(metadata i8* %is_max, metadata !12035, metadata !DIExpression()), !dbg !12036
  %27 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12037
  %call22 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %27), !dbg !12038
  store i8 %call22, i8* %is_max, align 1, !dbg !12036
  %28 = load i8, i8* %is_min, align 1, !dbg !12039
  %conv = zext i8 %28 to i32, !dbg !12039
  %tobool23 = icmp ne i32 %conv, 0, !dbg !12039
  br i1 %tobool23, label %land.lhs.true24, label %if.else, !dbg !12041

land.lhs.true24:                                  ; preds = %if.then20
  %29 = load i8, i8* %is_max, align 1, !dbg !12042
  %conv25 = zext i8 %29 to i32, !dbg !12042
  %tobool26 = icmp ne i32 %conv25, 0, !dbg !12042
  br i1 %tobool26, label %if.then27, label %if.else, !dbg !12043

if.then27:                                        ; preds = %land.lhs.true24
  %30 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12044
  call void @set_value_range_to_varying(%struct.value_range_d* %30), !dbg !12046
  br label %return, !dbg !12047

if.else:                                          ; preds = %land.lhs.true24, %if.then20
  %31 = load i8, i8* %is_min, align 1, !dbg !12048
  %conv28 = zext i8 %31 to i32, !dbg !12048
  %tobool29 = icmp ne i32 %conv28, 0, !dbg !12048
  br i1 %tobool29, label %land.lhs.true30, label %if.else50, !dbg !12050

land.lhs.true30:                                  ; preds = %if.else
  %32 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12051
  %common31 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !12051
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !12051
  %33 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !12051
  %base33 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !12051
  %34 = bitcast %struct.tree_base* %base33 to i64*, !dbg !12051
  %bf.load34 = load i64, i64* %34, align 8, !dbg !12051
  %bf.lshr = lshr i64 %bf.load34, 21, !dbg !12051
  %bf.clear35 = and i64 %bf.lshr, 1, !dbg !12051
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !12051
  %tobool37 = icmp ne i32 %bf.cast36, 0, !dbg !12051
  br i1 %tobool37, label %land.lhs.true38, label %if.then41, !dbg !12052

land.lhs.true38:                                  ; preds = %land.lhs.true30
  %35 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12053
  %call39 = call i32 @integer_zerop(%union.tree_node* %35), !dbg !12054
  %tobool40 = icmp ne i32 %call39, 0, !dbg !12054
  br i1 %tobool40, label %if.else50, label %if.then41, !dbg !12055

if.then41:                                        ; preds = %land.lhs.true38, %land.lhs.true30
  call void @llvm.dbg.declare(metadata %union.tree_node** %one42, metadata !12056, metadata !DIExpression()), !dbg !12058
  %36 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12059
  %common43 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !12059
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2, !dbg !12059
  %37 = load %union.tree_node*, %union.tree_node** %type44, align 8, !dbg !12059
  %call45 = call %union.tree_node* @build_int_cst(%union.tree_node* %37, i64 1), !dbg !12060
  store %union.tree_node* %call45, %union.tree_node** %one42, align 8, !dbg !12058
  %38 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12061
  %39 = load %union.tree_node*, %union.tree_node** %one42, align 8, !dbg !12062
  %call46 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %38, %union.tree_node* %39, i32 0), !dbg !12063
  store %union.tree_node* %call46, %union.tree_node** %min.addr, align 8, !dbg !12064
  %40 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12065
  %common47 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !12065
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !12065
  %41 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !12065
  %call49 = call %union.tree_node* @vrp_val_max(%union.tree_node* %41), !dbg !12066
  store %union.tree_node* %call49, %union.tree_node** %max.addr, align 8, !dbg !12067
  store i32 1, i32* %t.addr, align 4, !dbg !12068
  br label %if.end62, !dbg !12069

if.else50:                                        ; preds = %land.lhs.true38, %if.else
  %42 = load i8, i8* %is_max, align 1, !dbg !12070
  %tobool51 = icmp ne i8 %42, 0, !dbg !12070
  br i1 %tobool51, label %if.then52, label %if.end61, !dbg !12072

if.then52:                                        ; preds = %if.else50
  call void @llvm.dbg.declare(metadata %union.tree_node** %one53, metadata !12073, metadata !DIExpression()), !dbg !12075
  %43 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12076
  %common54 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !12076
  %type55 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common54, i32 0, i32 2, !dbg !12076
  %44 = load %union.tree_node*, %union.tree_node** %type55, align 8, !dbg !12076
  %call56 = call %union.tree_node* @build_int_cst(%union.tree_node* %44, i64 1), !dbg !12077
  store %union.tree_node* %call56, %union.tree_node** %one53, align 8, !dbg !12075
  %45 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12078
  %46 = load %union.tree_node*, %union.tree_node** %one53, align 8, !dbg !12079
  %call57 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %45, %union.tree_node* %46, i32 0), !dbg !12080
  store %union.tree_node* %call57, %union.tree_node** %max.addr, align 8, !dbg !12081
  %47 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12082
  %common58 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !12082
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !12082
  %48 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !12082
  %call60 = call %union.tree_node* @vrp_val_min(%union.tree_node* %48), !dbg !12083
  store %union.tree_node* %call60, %union.tree_node** %min.addr, align 8, !dbg !12084
  store i32 1, i32* %t.addr, align 4, !dbg !12085
  br label %if.end61, !dbg !12086

if.end61:                                         ; preds = %if.then52, %if.else50
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then41
  br label %if.end63

if.end63:                                         ; preds = %if.end62
  br label %if.end64, !dbg !12087

if.end64:                                         ; preds = %if.end63, %if.end18
  %49 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12088
  %50 = load i32, i32* %t.addr, align 4, !dbg !12089
  %51 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12090
  %52 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12091
  %53 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv.addr, align 8, !dbg !12092
  call void @set_value_range(%struct.value_range_d* %49, i32 %50, %union.tree_node* %51, %union.tree_node* %52, %struct.bitmap_head_def* %53), !dbg !12093
  br label %return, !dbg !12094

return:                                           ; preds = %if.end64, %if.then27, %if.then15, %if.then
  ret void, !dbg !12094
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @value_ranges_intersect_p(%struct.value_range_d* %vr0, %struct.value_range_d* %vr1) #0 !dbg !12095 {
entry:
  %retval = alloca i8, align 1
  %vr0.addr = alloca %struct.value_range_d*, align 8
  %vr1.addr = alloca %struct.value_range_d*, align 8
  store %struct.value_range_d* %vr0, %struct.value_range_d** %vr0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr0.addr, metadata !12098, metadata !DIExpression()), !dbg !12099
  store %struct.value_range_d* %vr1, %struct.value_range_d** %vr1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr1.addr, metadata !12100, metadata !DIExpression()), !dbg !12101
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12102
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 2, !dbg !12104
  %1 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !12104
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12105
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 1, !dbg !12106
  %3 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12106
  %call = call i32 @operand_less_p(%union.tree_node* %1, %union.tree_node* %3), !dbg !12107
  %cmp = icmp ne i32 %call, 0, !dbg !12108
  br i1 %cmp, label %if.then, label %if.end, !dbg !12109

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !12110
  br label %return, !dbg !12110

if.end:                                           ; preds = %entry
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12111
  %max1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %4, i32 0, i32 2, !dbg !12113
  %5 = load %union.tree_node*, %union.tree_node** %max1, align 8, !dbg !12113
  %6 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12114
  %min2 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %6, i32 0, i32 1, !dbg !12115
  %7 = load %union.tree_node*, %union.tree_node** %min2, align 8, !dbg !12115
  %call3 = call i32 @operand_less_p(%union.tree_node* %5, %union.tree_node* %7), !dbg !12116
  %cmp4 = icmp ne i32 %call3, 0, !dbg !12117
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !12118

if.then5:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !12119
  br label %return, !dbg !12119

if.end6:                                          ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !12120
  br label %return, !dbg !12120

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !12121
  ret i8 %8, !dbg !12121
}

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @negative_overflow_infinity(%union.tree_node* %type) #0 !dbg !12122 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12123, metadata !DIExpression()), !dbg !12124
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12125
  %call = call %union.tree_node* @vrp_val_min(%union.tree_node* %0), !dbg !12126
  %call1 = call %union.tree_node* @make_overflow_infinity(%union.tree_node* %call), !dbg !12127
  ret %union.tree_node* %call1, !dbg !12128
}

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @copy_value_range(%struct.value_range_d* %to, %struct.value_range_d* %from) #0 !dbg !12129 {
entry:
  %to.addr = alloca %struct.value_range_d*, align 8
  %from.addr = alloca %struct.value_range_d*, align 8
  store %struct.value_range_d* %to, %struct.value_range_d** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %to.addr, metadata !12132, metadata !DIExpression()), !dbg !12133
  store %struct.value_range_d* %from, %struct.value_range_d** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %from.addr, metadata !12134, metadata !DIExpression()), !dbg !12135
  %0 = load %struct.value_range_d*, %struct.value_range_d** %to.addr, align 8, !dbg !12136
  %1 = load %struct.value_range_d*, %struct.value_range_d** %from.addr, align 8, !dbg !12137
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %1, i32 0, i32 0, !dbg !12138
  %2 = load i32, i32* %type, align 8, !dbg !12138
  %3 = load %struct.value_range_d*, %struct.value_range_d** %from.addr, align 8, !dbg !12139
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %3, i32 0, i32 1, !dbg !12140
  %4 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12140
  %5 = load %struct.value_range_d*, %struct.value_range_d** %from.addr, align 8, !dbg !12141
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %5, i32 0, i32 2, !dbg !12142
  %6 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !12142
  %7 = load %struct.value_range_d*, %struct.value_range_d** %from.addr, align 8, !dbg !12143
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %7, i32 0, i32 3, !dbg !12144
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !12144
  call void @set_value_range(%struct.value_range_d* %0, i32 %2, %union.tree_node* %4, %union.tree_node* %6, %struct.bitmap_head_def* %8), !dbg !12145
  ret void, !dbg !12146
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_with_constant_singleton_value_range(%union.tree_node* %op) #0 !dbg !12147 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %vr = alloca %struct.value_range_d*, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !12148, metadata !DIExpression()), !dbg !12149
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !12150, metadata !DIExpression()), !dbg !12151
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12152
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %0), !dbg !12154
  %tobool = icmp ne i8 %call, 0, !dbg !12154
  br i1 %tobool, label %if.then, label %if.end, !dbg !12155

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12156
  store %union.tree_node* %1, %union.tree_node** %retval, align 8, !dbg !12157
  br label %return, !dbg !12157

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12158
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !12158
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !12158
  %bf.load = load i64, i64* %3, align 8, !dbg !12158
  %bf.clear = and i64 %bf.load, 65535, !dbg !12158
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12158
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !12160
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !12161

if.then1:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12162
  br label %return, !dbg !12162

if.end2:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12163
  %call3 = call %struct.value_range_d* @get_value_range(%union.tree_node* %4), !dbg !12164
  store %struct.value_range_d* %call3, %struct.value_range_d** %vr, align 8, !dbg !12165
  %5 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !12166
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %5, i32 0, i32 0, !dbg !12168
  %6 = load i32, i32* %type, align 8, !dbg !12168
  %cmp4 = icmp eq i32 %6, 1, !dbg !12169
  br i1 %cmp4, label %land.lhs.true, label %if.end13, !dbg !12170

land.lhs.true:                                    ; preds = %if.end2
  %7 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !12171
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %7, i32 0, i32 1, !dbg !12172
  %8 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12172
  %9 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !12173
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %9, i32 0, i32 2, !dbg !12174
  %10 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !12174
  %call5 = call i32 @operand_equal_p(%union.tree_node* %8, %union.tree_node* %10, i32 0), !dbg !12175
  %tobool6 = icmp ne i32 %call5, 0, !dbg !12175
  br i1 %tobool6, label %land.lhs.true7, label %if.end13, !dbg !12176

land.lhs.true7:                                   ; preds = %land.lhs.true
  %11 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !12177
  %min8 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %11, i32 0, i32 1, !dbg !12178
  %12 = load %union.tree_node*, %union.tree_node** %min8, align 8, !dbg !12178
  %call9 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %12), !dbg !12179
  %conv = zext i8 %call9 to i32, !dbg !12179
  %tobool10 = icmp ne i32 %conv, 0, !dbg !12179
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !12180

if.then11:                                        ; preds = %land.lhs.true7
  %13 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !12181
  %min12 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %13, i32 0, i32 1, !dbg !12182
  %14 = load %union.tree_node*, %union.tree_node** %min12, align 8, !dbg !12182
  store %union.tree_node* %14, %union.tree_node** %retval, align 8, !dbg !12183
  br label %return, !dbg !12183

if.end13:                                         ; preds = %land.lhs.true7, %land.lhs.true, %if.end2
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12184
  br label %return, !dbg !12184

return:                                           ; preds = %if.end13, %if.then11, %if.then1, %if.then
  %15 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12185
  ret %union.tree_node* %15, !dbg !12185
}

declare dso_local %union.tree_node* @fold_binary_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_value_range_to_undefined(%struct.value_range_d* %vr) #0 !dbg !12186 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !12187, metadata !DIExpression()), !dbg !12188
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12189
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 0, !dbg !12190
  store i32 0, i32* %type, align 8, !dbg !12191
  %1 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12192
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %1, i32 0, i32 2, !dbg !12193
  store %union.tree_node* null, %union.tree_node** %max, align 8, !dbg !12194
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12195
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 1, !dbg !12196
  store %union.tree_node* null, %union.tree_node** %min, align 8, !dbg !12197
  %3 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12198
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %3, i32 0, i32 3, !dbg !12200
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !12200
  %tobool = icmp ne %struct.bitmap_head_def* %4, null, !dbg !12198
  br i1 %tobool, label %if.then, label %if.end, !dbg !12201

if.then:                                          ; preds = %entry
  %5 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12202
  %equiv1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %5, i32 0, i32 3, !dbg !12203
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv1, align 8, !dbg !12203
  call void @bitmap_clear(%struct.bitmap_head_def* %6), !dbg !12204
  br label %if.end, !dbg !12204

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !12205
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @range_is_null(%struct.value_range_d* %vr) #0 !dbg !12206 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !12207, metadata !DIExpression()), !dbg !12208
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12209
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 0, !dbg !12210
  %1 = load i32, i32* %type, align 8, !dbg !12210
  %cmp = icmp eq i32 %1, 1, !dbg !12211
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !12212

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12213
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 1, !dbg !12214
  %3 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12214
  %call = call i32 @integer_zerop(%union.tree_node* %3), !dbg !12215
  %tobool = icmp ne i32 %call, 0, !dbg !12215
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12216

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12217
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %4, i32 0, i32 2, !dbg !12218
  %5 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !12218
  %call1 = call i32 @integer_zerop(%union.tree_node* %5), !dbg !12219
  %tobool2 = icmp ne i32 %call1, 0, !dbg !12216
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool2, %land.rhs ], !dbg !12220
  %land.ext = zext i1 %6 to i32, !dbg !12216
  %conv = trunc i32 %land.ext to i8, !dbg !12209
  ret i8 %conv, !dbg !12221
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_value_range_to_null(%struct.value_range_d* %vr, %union.tree_node* %type) #0 !dbg !12222 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !12223, metadata !DIExpression()), !dbg !12224
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12225, metadata !DIExpression()), !dbg !12226
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12227
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12228
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* %1, i64 0), !dbg !12229
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12230
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 3, !dbg !12231
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !12231
  call void @set_value_range_to_value(%struct.value_range_d* %0, %union.tree_node* %call, %struct.bitmap_head_def* %3), !dbg !12232
  ret void, !dbg !12233
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr) #0 !dbg !12234 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !12235, metadata !DIExpression()), !dbg !12236
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12237
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 0, !dbg !12238
  %1 = load i32, i32* %type, align 8, !dbg !12238
  %cmp = icmp eq i32 %1, 1, !dbg !12239
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !12240

land.rhs:                                         ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12241
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 1, !dbg !12242
  %3 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12242
  %call = call zeroext i8 @is_overflow_infinity(%union.tree_node* %3), !dbg !12243
  %conv = zext i8 %call to i32, !dbg !12243
  %tobool = icmp ne i32 %conv, 0, !dbg !12243
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !12244

lor.rhs:                                          ; preds = %land.rhs
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12245
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %4, i32 0, i32 2, !dbg !12246
  %5 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !12246
  %call1 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %5), !dbg !12247
  %conv2 = zext i8 %call1 to i32, !dbg !12247
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !12244
  br label %lor.end, !dbg !12244

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %6 = phi i1 [ true, %land.rhs ], [ %tobool3, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %7 = phi i1 [ false, %entry ], [ %6, %lor.end ], !dbg !12248
  %land.ext = zext i1 %7 to i32, !dbg !12240
  %conv4 = trunc i32 %land.ext to i8, !dbg !12249
  ret i8 %conv4, !dbg !12250
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_value_range_to_truthvalue(%struct.value_range_d* %vr, %union.tree_node* %type) #0 !dbg !12251 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !12252, metadata !DIExpression()), !dbg !12253
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12254, metadata !DIExpression()), !dbg !12255
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12256
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !12256
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !12256
  %bf.load = load i32, i32* %precision, align 4, !dbg !12256
  %bf.clear = and i32 %bf.load, 1023, !dbg !12256
  %cmp = icmp eq i32 %bf.clear, 1, !dbg !12258
  br i1 %cmp, label %if.then, label %if.else, !dbg !12259

if.then:                                          ; preds = %entry
  %1 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12260
  call void @set_value_range_to_varying(%struct.value_range_d* %1), !dbg !12261
  br label %if.end, !dbg !12261

if.else:                                          ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12262
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12263
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* %3, i64 0), !dbg !12264
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12265
  %call2 = call %union.tree_node* @build_int_cst(%union.tree_node* %4, i64 1), !dbg !12266
  %5 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12267
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %5, i32 0, i32 3, !dbg !12268
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !12268
  call void @set_value_range(%struct.value_range_d* %2, i32 1, %union.tree_node* %call, %union.tree_node* %call2, %struct.bitmap_head_def* %6), !dbg !12269
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !12270
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @vrp_int_const_binop(i32 %code, %union.tree_node* %val1, %union.tree_node* %val2) #0 !dbg !12271 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %val1.addr = alloca %union.tree_node*, align 8
  %val2.addr = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %checkz = alloca i32, align 4
  %overflow = alloca i8, align 1
  %tmp = alloca %union.tree_node*, align 8
  %check = alloca i32, align 4
  %sgn1 = alloca i32, align 4
  %sgn2 = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !12274, metadata !DIExpression()), !dbg !12275
  store %union.tree_node* %val1, %union.tree_node** %val1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val1.addr, metadata !12276, metadata !DIExpression()), !dbg !12277
  store %union.tree_node* %val2, %union.tree_node** %val2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val2.addr, metadata !12278, metadata !DIExpression()), !dbg !12279
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !12280, metadata !DIExpression()), !dbg !12281
  %0 = load i32, i32* %code.addr, align 4, !dbg !12282
  %1 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !12283
  %2 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !12284
  %call = call %union.tree_node* @int_const_binop(i32 %0, %union.tree_node* %1, %union.tree_node* %2, i32 0), !dbg !12285
  store %union.tree_node* %call, %union.tree_node** %res, align 8, !dbg !12286
  %3 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !12287
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !12287
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12287
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12287
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !12287
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !12287
  %bf.load = load i64, i64* %5, align 8, !dbg !12287
  %bf.lshr = lshr i64 %bf.load, 21, !dbg !12287
  %bf.clear = and i64 %bf.lshr, 1, !dbg !12287
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12287
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !12287
  br i1 %tobool, label %if.then, label %if.else29, !dbg !12289

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %checkz, metadata !12290, metadata !DIExpression()), !dbg !12292
  %6 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12293
  %7 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !12294
  %call1 = call i32 @compare_values(%union.tree_node* %6, %union.tree_node* %7), !dbg !12295
  store i32 %call1, i32* %checkz, align 4, !dbg !12292
  call void @llvm.dbg.declare(metadata i8* %overflow, metadata !12296, metadata !DIExpression()), !dbg !12297
  store i8 0, i8* %overflow, align 1, !dbg !12297
  %8 = load i32, i32* %code.addr, align 4, !dbg !12298
  %cmp = icmp eq i32 %8, 63, !dbg !12300
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false4, !dbg !12301

land.lhs.true:                                    ; preds = %if.then
  %9 = load i32, i32* %checkz, align 4, !dbg !12302
  %cmp2 = icmp eq i32 %9, 1, !dbg !12303
  br i1 %cmp2, label %lor.lhs.false4, label %lor.lhs.false, !dbg !12304

lor.lhs.false:                                    ; preds = %land.lhs.true
  %10 = load i32, i32* %checkz, align 4, !dbg !12305
  %cmp3 = icmp eq i32 %10, 0, !dbg !12306
  br i1 %cmp3, label %lor.lhs.false4, label %if.then10, !dbg !12307

lor.lhs.false4:                                   ; preds = %lor.lhs.false, %land.lhs.true, %if.then
  %11 = load i32, i32* %code.addr, align 4, !dbg !12308
  %cmp5 = icmp eq i32 %11, 64, !dbg !12309
  br i1 %cmp5, label %land.lhs.true6, label %if.else, !dbg !12310

land.lhs.true6:                                   ; preds = %lor.lhs.false4
  %12 = load i32, i32* %checkz, align 4, !dbg !12311
  %cmp7 = icmp eq i32 %12, 0, !dbg !12312
  br i1 %cmp7, label %if.else, label %lor.lhs.false8, !dbg !12313

lor.lhs.false8:                                   ; preds = %land.lhs.true6
  %13 = load i32, i32* %checkz, align 4, !dbg !12314
  %cmp9 = icmp eq i32 %13, -1, !dbg !12315
  br i1 %cmp9, label %if.else, label %if.then10, !dbg !12316

if.then10:                                        ; preds = %lor.lhs.false8, %lor.lhs.false
  store i8 1, i8* %overflow, align 1, !dbg !12317
  br label %if.end21, !dbg !12319

if.else:                                          ; preds = %lor.lhs.false8, %land.lhs.true6, %lor.lhs.false4
  %14 = load i32, i32* %code.addr, align 4, !dbg !12320
  %cmp11 = icmp eq i32 %14, 65, !dbg !12322
  br i1 %cmp11, label %land.lhs.true12, label %if.end20, !dbg !12323

land.lhs.true12:                                  ; preds = %if.else
  %15 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !12324
  %call13 = call i32 @integer_zerop(%union.tree_node* %15), !dbg !12325
  %tobool14 = icmp ne i32 %call13, 0, !dbg !12325
  br i1 %tobool14, label %if.end20, label %if.then15, !dbg !12326

if.then15:                                        ; preds = %land.lhs.true12
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !12327, metadata !DIExpression()), !dbg !12329
  %16 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12330
  %17 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !12331
  %call16 = call %union.tree_node* @int_const_binop(i32 67, %union.tree_node* %16, %union.tree_node* %17, i32 0), !dbg !12332
  store %union.tree_node* %call16, %union.tree_node** %tmp, align 8, !dbg !12329
  call void @llvm.dbg.declare(metadata i32* %check, metadata !12333, metadata !DIExpression()), !dbg !12334
  %18 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !12335
  %19 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !12336
  %call17 = call i32 @compare_values(%union.tree_node* %18, %union.tree_node* %19), !dbg !12337
  store i32 %call17, i32* %check, align 4, !dbg !12334
  %20 = load i32, i32* %check, align 4, !dbg !12338
  %cmp18 = icmp ne i32 %20, 0, !dbg !12340
  br i1 %cmp18, label %if.then19, label %if.end, !dbg !12341

if.then19:                                        ; preds = %if.then15
  store i8 1, i8* %overflow, align 1, !dbg !12342
  br label %if.end, !dbg !12343

if.end:                                           ; preds = %if.then19, %if.then15
  br label %if.end20, !dbg !12344

if.end20:                                         ; preds = %if.end, %land.lhs.true12, %if.else
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then10
  %21 = load i8, i8* %overflow, align 1, !dbg !12345
  %tobool22 = icmp ne i8 %21, 0, !dbg !12345
  br i1 %tobool22, label %if.then23, label %if.end28, !dbg !12347

if.then23:                                        ; preds = %if.end21
  %22 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12348
  %call24 = call %union.tree_node* @copy_node_stat(%union.tree_node* %22), !dbg !12348
  store %union.tree_node* %call24, %union.tree_node** %res, align 8, !dbg !12350
  %23 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12351
  %base25 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !12351
  %24 = bitcast %struct.tree_base* %base25 to i64*, !dbg !12351
  %bf.load26 = load i64, i64* %24, align 8, !dbg !12352
  %bf.clear27 = and i64 %bf.load26, -134217729, !dbg !12352
  %bf.set = or i64 %bf.clear27, 134217728, !dbg !12352
  store i64 %bf.set, i64* %24, align 8, !dbg !12352
  br label %if.end28, !dbg !12353

if.end28:                                         ; preds = %if.then23, %if.end21
  br label %if.end214, !dbg !12354

if.else29:                                        ; preds = %entry
  %25 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !12355
  %common30 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !12355
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !12355
  %26 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !12355
  %base32 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !12355
  %27 = bitcast %struct.tree_base* %base32 to i64*, !dbg !12355
  %bf.load33 = load i64, i64* %27, align 8, !dbg !12355
  %bf.lshr34 = lshr i64 %bf.load33, 21, !dbg !12355
  %bf.clear35 = and i64 %bf.lshr34, 1, !dbg !12355
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !12355
  %tobool37 = icmp ne i32 %bf.cast36, 0, !dbg !12355
  br i1 %tobool37, label %if.then40, label %lor.lhs.false38, !dbg !12355

lor.lhs.false38:                                  ; preds = %if.else29
  %28 = load i32, i32* @flag_wrapv, align 4, !dbg !12355
  %tobool39 = icmp ne i32 %28, 0, !dbg !12355
  br i1 %tobool39, label %if.then40, label %if.else41, !dbg !12357

if.then40:                                        ; preds = %lor.lhs.false38, %if.else29
  br label %if.end213, !dbg !12357

if.else41:                                        ; preds = %lor.lhs.false38
  %29 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12358
  %base42 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !12358
  %30 = bitcast %struct.tree_base* %base42 to i64*, !dbg !12358
  %bf.load43 = load i64, i64* %30, align 8, !dbg !12358
  %bf.lshr44 = lshr i64 %bf.load43, 27, !dbg !12358
  %bf.clear45 = and i64 %bf.lshr44, 1, !dbg !12358
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !12358
  %tobool47 = icmp ne i32 %bf.cast46, 0, !dbg !12358
  br i1 %tobool47, label %land.lhs.true48, label %lor.lhs.false62, !dbg !12360

land.lhs.true48:                                  ; preds = %if.else41
  %31 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !12361
  %base49 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !12361
  %32 = bitcast %struct.tree_base* %base49 to i64*, !dbg !12361
  %bf.load50 = load i64, i64* %32, align 8, !dbg !12361
  %bf.lshr51 = lshr i64 %bf.load50, 27, !dbg !12361
  %bf.clear52 = and i64 %bf.lshr51, 1, !dbg !12361
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !12361
  %tobool54 = icmp ne i32 %bf.cast53, 0, !dbg !12361
  br i1 %tobool54, label %lor.lhs.false62, label %land.lhs.true55, !dbg !12362

land.lhs.true55:                                  ; preds = %land.lhs.true48
  %33 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !12363
  %base56 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !12363
  %34 = bitcast %struct.tree_base* %base56 to i64*, !dbg !12363
  %bf.load57 = load i64, i64* %34, align 8, !dbg !12363
  %bf.lshr58 = lshr i64 %bf.load57, 27, !dbg !12363
  %bf.clear59 = and i64 %bf.lshr58, 1, !dbg !12363
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !12363
  %tobool61 = icmp ne i32 %bf.cast60, 0, !dbg !12363
  br i1 %tobool61, label %lor.lhs.false62, label %if.then69, !dbg !12364

lor.lhs.false62:                                  ; preds = %land.lhs.true55, %land.lhs.true48, %if.else41
  %35 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !12365
  %call63 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %35), !dbg !12366
  %conv = zext i8 %call63 to i32, !dbg !12366
  %tobool64 = icmp ne i32 %conv, 0, !dbg !12366
  br i1 %tobool64, label %if.then69, label %lor.lhs.false65, !dbg !12367

lor.lhs.false65:                                  ; preds = %lor.lhs.false62
  %36 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !12368
  %call66 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %36), !dbg !12369
  %conv67 = zext i8 %call66 to i32, !dbg !12369
  %tobool68 = icmp ne i32 %conv67, 0, !dbg !12369
  br i1 %tobool68, label %if.then69, label %if.end212, !dbg !12370

if.then69:                                        ; preds = %lor.lhs.false65, %lor.lhs.false62, %land.lhs.true55
  call void @llvm.dbg.declare(metadata i32* %sgn1, metadata !12371, metadata !DIExpression()), !dbg !12373
  %37 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !12374
  %call70 = call i32 @tree_int_cst_sgn(%union.tree_node* %37), !dbg !12375
  store i32 %call70, i32* %sgn1, align 4, !dbg !12373
  call void @llvm.dbg.declare(metadata i32* %sgn2, metadata !12376, metadata !DIExpression()), !dbg !12377
  %38 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !12378
  %call71 = call i32 @tree_int_cst_sgn(%union.tree_node* %38), !dbg !12379
  store i32 %call71, i32* %sgn2, align 4, !dbg !12377
  %39 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12380
  %common72 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !12380
  %type73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 2, !dbg !12380
  %40 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !12380
  %call74 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %40), !dbg !12382
  %conv75 = zext i8 %call74 to i32, !dbg !12382
  %tobool76 = icmp ne i32 %conv75, 0, !dbg !12382
  br i1 %tobool76, label %land.lhs.true77, label %if.end83, !dbg !12383

land.lhs.true77:                                  ; preds = %if.then69
  %41 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12384
  %common78 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !12384
  %type79 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common78, i32 0, i32 2, !dbg !12384
  %42 = load %union.tree_node*, %union.tree_node** %type79, align 8, !dbg !12384
  %call80 = call zeroext i8 @supports_overflow_infinity(%union.tree_node* %42), !dbg !12385
  %tobool81 = icmp ne i8 %call80, 0, !dbg !12385
  br i1 %tobool81, label %if.end83, label %if.then82, !dbg !12386

if.then82:                                        ; preds = %land.lhs.true77
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12387
  br label %return, !dbg !12387

if.end83:                                         ; preds = %land.lhs.true77, %if.then69
  %43 = load i32, i32* %code.addr, align 4, !dbg !12388
  %cmp84 = icmp eq i32 %43, 63, !dbg !12390
  br i1 %cmp84, label %land.lhs.true86, label %lor.lhs.false89, !dbg !12391

land.lhs.true86:                                  ; preds = %if.end83
  %44 = load i32, i32* %sgn1, align 4, !dbg !12392
  %45 = load i32, i32* %sgn2, align 4, !dbg !12393
  %cmp87 = icmp ne i32 %44, %45, !dbg !12394
  br i1 %cmp87, label %land.lhs.true95, label %lor.lhs.false89, !dbg !12395

lor.lhs.false89:                                  ; preds = %land.lhs.true86, %if.end83
  %46 = load i32, i32* %code.addr, align 4, !dbg !12396
  %cmp90 = icmp eq i32 %46, 64, !dbg !12397
  br i1 %cmp90, label %land.lhs.true92, label %if.end104, !dbg !12398

land.lhs.true92:                                  ; preds = %lor.lhs.false89
  %47 = load i32, i32* %sgn1, align 4, !dbg !12399
  %48 = load i32, i32* %sgn2, align 4, !dbg !12400
  %cmp93 = icmp eq i32 %47, %48, !dbg !12401
  br i1 %cmp93, label %land.lhs.true95, label %if.end104, !dbg !12402

land.lhs.true95:                                  ; preds = %land.lhs.true92, %land.lhs.true86
  %49 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !12403
  %call96 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %49), !dbg !12404
  %conv97 = zext i8 %call96 to i32, !dbg !12404
  %tobool98 = icmp ne i32 %conv97, 0, !dbg !12404
  br i1 %tobool98, label %land.lhs.true99, label %if.end104, !dbg !12405

land.lhs.true99:                                  ; preds = %land.lhs.true95
  %50 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !12406
  %call100 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %50), !dbg !12407
  %conv101 = zext i8 %call100 to i32, !dbg !12407
  %tobool102 = icmp ne i32 %conv101, 0, !dbg !12407
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !12408

if.then103:                                       ; preds = %land.lhs.true99
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12409
  br label %return, !dbg !12409

if.end104:                                        ; preds = %land.lhs.true99, %land.lhs.true95, %land.lhs.true92, %lor.lhs.false89
  %51 = load i32, i32* %code.addr, align 4, !dbg !12410
  %cmp105 = icmp eq i32 %51, 67, !dbg !12412
  br i1 %cmp105, label %land.lhs.true122, label %lor.lhs.false107, !dbg !12413

lor.lhs.false107:                                 ; preds = %if.end104
  %52 = load i32, i32* %code.addr, align 4, !dbg !12414
  %cmp108 = icmp eq i32 %52, 69, !dbg !12415
  br i1 %cmp108, label %land.lhs.true122, label %lor.lhs.false110, !dbg !12416

lor.lhs.false110:                                 ; preds = %lor.lhs.false107
  %53 = load i32, i32* %code.addr, align 4, !dbg !12417
  %cmp111 = icmp eq i32 %53, 68, !dbg !12418
  br i1 %cmp111, label %land.lhs.true122, label %lor.lhs.false113, !dbg !12419

lor.lhs.false113:                                 ; preds = %lor.lhs.false110
  %54 = load i32, i32* %code.addr, align 4, !dbg !12420
  %cmp114 = icmp eq i32 %54, 76, !dbg !12421
  br i1 %cmp114, label %land.lhs.true122, label %lor.lhs.false116, !dbg !12422

lor.lhs.false116:                                 ; preds = %lor.lhs.false113
  %55 = load i32, i32* %code.addr, align 4, !dbg !12423
  %cmp117 = icmp eq i32 %55, 70, !dbg !12424
  br i1 %cmp117, label %land.lhs.true122, label %lor.lhs.false119, !dbg !12425

lor.lhs.false119:                                 ; preds = %lor.lhs.false116
  %56 = load i32, i32* %code.addr, align 4, !dbg !12426
  %cmp120 = icmp eq i32 %56, 84, !dbg !12427
  br i1 %cmp120, label %land.lhs.true122, label %if.end131, !dbg !12428

land.lhs.true122:                                 ; preds = %lor.lhs.false119, %lor.lhs.false116, %lor.lhs.false113, %lor.lhs.false110, %lor.lhs.false107, %if.end104
  %57 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !12429
  %call123 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %57), !dbg !12430
  %conv124 = zext i8 %call123 to i32, !dbg !12430
  %tobool125 = icmp ne i32 %conv124, 0, !dbg !12430
  br i1 %tobool125, label %if.then130, label %lor.lhs.false126, !dbg !12431

lor.lhs.false126:                                 ; preds = %land.lhs.true122
  %58 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !12432
  %call127 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %58), !dbg !12433
  %conv128 = zext i8 %call127 to i32, !dbg !12433
  %tobool129 = icmp ne i32 %conv128, 0, !dbg !12433
  br i1 %tobool129, label %if.then130, label %if.end131, !dbg !12434

if.then130:                                       ; preds = %lor.lhs.false126, %land.lhs.true122
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12435
  br label %return, !dbg !12435

if.end131:                                        ; preds = %lor.lhs.false126, %lor.lhs.false119
  %59 = load i32, i32* %code.addr, align 4, !dbg !12436
  %cmp132 = icmp eq i32 %59, 65, !dbg !12438
  br i1 %cmp132, label %land.lhs.true134, label %lor.lhs.false137, !dbg !12439

land.lhs.true134:                                 ; preds = %if.end131
  %60 = load i32, i32* %sgn1, align 4, !dbg !12440
  %61 = load i32, i32* %sgn2, align 4, !dbg !12441
  %cmp135 = icmp eq i32 %60, %61, !dbg !12442
  br i1 %cmp135, label %if.then182, label %lor.lhs.false137, !dbg !12443

lor.lhs.false137:                                 ; preds = %land.lhs.true134, %if.end131
  %62 = load i32, i32* %code.addr, align 4, !dbg !12444
  %cmp138 = icmp eq i32 %62, 63, !dbg !12445
  br i1 %cmp138, label %land.lhs.true140, label %lor.lhs.false148, !dbg !12446

land.lhs.true140:                                 ; preds = %lor.lhs.false137
  %63 = load i32, i32* %sgn1, align 4, !dbg !12447
  %cmp141 = icmp sge i32 %63, 0, !dbg !12448
  br i1 %cmp141, label %cond.true, label %cond.false, !dbg !12449

cond.true:                                        ; preds = %land.lhs.true140
  %64 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !12450
  %call143 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %64), !dbg !12451
  %tobool144 = icmp ne i8 %call143, 0, !dbg !12451
  br i1 %tobool144, label %lor.lhs.false148, label %if.then182, !dbg !12447

cond.false:                                       ; preds = %land.lhs.true140
  %65 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !12452
  %call145 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %65), !dbg !12453
  %conv146 = zext i8 %call145 to i32, !dbg !12453
  %tobool147 = icmp ne i32 %conv146, 0, !dbg !12453
  br i1 %tobool147, label %if.then182, label %lor.lhs.false148, !dbg !12449

lor.lhs.false148:                                 ; preds = %cond.false, %cond.true, %lor.lhs.false137
  %66 = load i32, i32* %code.addr, align 4, !dbg !12454
  %cmp149 = icmp eq i32 %66, 64, !dbg !12455
  br i1 %cmp149, label %land.lhs.true151, label %lor.lhs.false161, !dbg !12456

land.lhs.true151:                                 ; preds = %lor.lhs.false148
  %67 = load i32, i32* %sgn1, align 4, !dbg !12457
  %cmp152 = icmp sge i32 %67, 0, !dbg !12458
  br i1 %cmp152, label %cond.true154, label %cond.false157, !dbg !12459

cond.true154:                                     ; preds = %land.lhs.true151
  %68 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !12460
  %call155 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %68), !dbg !12461
  %tobool156 = icmp ne i8 %call155, 0, !dbg !12461
  br i1 %tobool156, label %lor.lhs.false161, label %if.then182, !dbg !12457

cond.false157:                                    ; preds = %land.lhs.true151
  %69 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !12462
  %call158 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %69), !dbg !12463
  %conv159 = zext i8 %call158 to i32, !dbg !12463
  %tobool160 = icmp ne i32 %conv159, 0, !dbg !12463
  br i1 %tobool160, label %if.then182, label %lor.lhs.false161, !dbg !12459

lor.lhs.false161:                                 ; preds = %cond.false157, %cond.true154, %lor.lhs.false148
  %70 = load i32, i32* %code.addr, align 4, !dbg !12464
  %cmp162 = icmp eq i32 %70, 84, !dbg !12465
  br i1 %cmp162, label %land.lhs.true164, label %lor.lhs.false167, !dbg !12466

land.lhs.true164:                                 ; preds = %lor.lhs.false161
  %71 = load i32, i32* %sgn1, align 4, !dbg !12467
  %cmp165 = icmp sge i32 %71, 0, !dbg !12468
  br i1 %cmp165, label %if.then182, label %lor.lhs.false167, !dbg !12469

lor.lhs.false167:                                 ; preds = %land.lhs.true164, %lor.lhs.false161
  %72 = load i32, i32* %code.addr, align 4, !dbg !12470
  %cmp168 = icmp eq i32 %72, 67, !dbg !12471
  br i1 %cmp168, label %if.then182, label %lor.lhs.false170, !dbg !12472

lor.lhs.false170:                                 ; preds = %lor.lhs.false167
  %73 = load i32, i32* %code.addr, align 4, !dbg !12473
  %cmp171 = icmp eq i32 %73, 69, !dbg !12474
  br i1 %cmp171, label %if.then182, label %lor.lhs.false173, !dbg !12475

lor.lhs.false173:                                 ; preds = %lor.lhs.false170
  %74 = load i32, i32* %code.addr, align 4, !dbg !12476
  %cmp174 = icmp eq i32 %74, 68, !dbg !12477
  br i1 %cmp174, label %if.then182, label %lor.lhs.false176, !dbg !12478

lor.lhs.false176:                                 ; preds = %lor.lhs.false173
  %75 = load i32, i32* %code.addr, align 4, !dbg !12479
  %cmp177 = icmp eq i32 %75, 76, !dbg !12480
  br i1 %cmp177, label %if.then182, label %lor.lhs.false179, !dbg !12481

lor.lhs.false179:                                 ; preds = %lor.lhs.false176
  %76 = load i32, i32* %code.addr, align 4, !dbg !12482
  %cmp180 = icmp eq i32 %76, 70, !dbg !12483
  br i1 %cmp180, label %if.then182, label %if.else196, !dbg !12484

if.then182:                                       ; preds = %lor.lhs.false179, %lor.lhs.false176, %lor.lhs.false173, %lor.lhs.false170, %lor.lhs.false167, %land.lhs.true164, %cond.false157, %cond.true154, %cond.false, %cond.true, %land.lhs.true134
  %77 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12485
  %common183 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !12485
  %type184 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common183, i32 0, i32 2, !dbg !12485
  %78 = load %union.tree_node*, %union.tree_node** %type184, align 8, !dbg !12485
  %call185 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %78), !dbg !12486
  %conv186 = zext i8 %call185 to i32, !dbg !12486
  %tobool187 = icmp ne i32 %conv186, 0, !dbg !12486
  br i1 %tobool187, label %cond.true188, label %cond.false192, !dbg !12486

cond.true188:                                     ; preds = %if.then182
  %79 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12487
  %common189 = bitcast %union.tree_node* %79 to %struct.tree_common*, !dbg !12487
  %type190 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common189, i32 0, i32 2, !dbg !12487
  %80 = load %union.tree_node*, %union.tree_node** %type190, align 8, !dbg !12487
  %call191 = call %union.tree_node* @positive_overflow_infinity(%union.tree_node* %80), !dbg !12488
  br label %cond.end, !dbg !12486

cond.false192:                                    ; preds = %if.then182
  %81 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12489
  %common193 = bitcast %union.tree_node* %81 to %struct.tree_common*, !dbg !12489
  %type194 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common193, i32 0, i32 2, !dbg !12489
  %82 = load %union.tree_node*, %union.tree_node** %type194, align 8, !dbg !12489
  %type195 = bitcast %union.tree_node* %82 to %struct.tree_type*, !dbg !12489
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type195, i32 0, i32 14, !dbg !12489
  %83 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !12489
  br label %cond.end, !dbg !12486

cond.end:                                         ; preds = %cond.false192, %cond.true188
  %cond = phi %union.tree_node* [ %call191, %cond.true188 ], [ %83, %cond.false192 ], !dbg !12486
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !12490
  br label %return, !dbg !12490

if.else196:                                       ; preds = %lor.lhs.false179
  %84 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12491
  %common197 = bitcast %union.tree_node* %84 to %struct.tree_common*, !dbg !12491
  %type198 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common197, i32 0, i32 2, !dbg !12491
  %85 = load %union.tree_node*, %union.tree_node** %type198, align 8, !dbg !12491
  %call199 = call zeroext i8 @needs_overflow_infinity(%union.tree_node* %85), !dbg !12492
  %conv200 = zext i8 %call199 to i32, !dbg !12492
  %tobool201 = icmp ne i32 %conv200, 0, !dbg !12492
  br i1 %tobool201, label %cond.true202, label %cond.false206, !dbg !12492

cond.true202:                                     ; preds = %if.else196
  %86 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12493
  %common203 = bitcast %union.tree_node* %86 to %struct.tree_common*, !dbg !12493
  %type204 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common203, i32 0, i32 2, !dbg !12493
  %87 = load %union.tree_node*, %union.tree_node** %type204, align 8, !dbg !12493
  %call205 = call %union.tree_node* @negative_overflow_infinity(%union.tree_node* %87), !dbg !12494
  br label %cond.end210, !dbg !12492

cond.false206:                                    ; preds = %if.else196
  %88 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12495
  %common207 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !12495
  %type208 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common207, i32 0, i32 2, !dbg !12495
  %89 = load %union.tree_node*, %union.tree_node** %type208, align 8, !dbg !12495
  %type209 = bitcast %union.tree_node* %89 to %struct.tree_type*, !dbg !12495
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type209, i32 0, i32 13, !dbg !12495
  %90 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !12495
  br label %cond.end210, !dbg !12492

cond.end210:                                      ; preds = %cond.false206, %cond.true202
  %cond211 = phi %union.tree_node* [ %call205, %cond.true202 ], [ %90, %cond.false206 ], !dbg !12492
  store %union.tree_node* %cond211, %union.tree_node** %retval, align 8, !dbg !12496
  br label %return, !dbg !12496

if.end212:                                        ; preds = %lor.lhs.false65
  br label %if.end213

if.end213:                                        ; preds = %if.end212, %if.then40
  br label %if.end214

if.end214:                                        ; preds = %if.end213, %if.end28
  %91 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !12497
  store %union.tree_node* %91, %union.tree_node** %retval, align 8, !dbg !12498
  br label %return, !dbg !12498

return:                                           ; preds = %if.end214, %cond.end210, %cond.end, %if.then130, %if.then103, %if.then82
  %92 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12499
  ret %union.tree_node* %92, !dbg !12499
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vrp_expr_computes_nonnegative(%union.tree_node* %expr, i8* %strict_overflow_p) #0 !dbg !12500 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !12503, metadata !DIExpression()), !dbg !12504
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !12505, metadata !DIExpression()), !dbg !12506
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12507
  %1 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !12508
  %call = call zeroext i8 @tree_expr_nonnegative_warnv_p(%union.tree_node* %0, i8* %1), !dbg !12509
  %conv = zext i8 %call to i32, !dbg !12509
  %tobool = icmp ne i32 %conv, 0, !dbg !12509
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !12510

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12511
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !12511
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !12511
  %bf.load = load i64, i64* %3, align 8, !dbg !12511
  %bf.clear = and i64 %bf.load, 65535, !dbg !12511
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12511
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !12512
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !12513

land.rhs:                                         ; preds = %lor.rhs
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12514
  %call2 = call zeroext i8 @ssa_name_nonnegative_p(%union.tree_node* %4), !dbg !12515
  %conv3 = zext i8 %call2 to i32, !dbg !12515
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !12513
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %5 = phi i1 [ false, %lor.rhs ], [ %tobool4, %land.rhs ], !dbg !12516
  br label %lor.end, !dbg !12510

lor.end:                                          ; preds = %land.end, %entry
  %6 = phi i1 [ true, %entry ], [ %5, %land.end ]
  %lor.ext = zext i1 %6 to i32, !dbg !12510
  %conv5 = trunc i32 %lor.ext to i8, !dbg !12517
  ret i8 %conv5, !dbg !12518
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr) #0 !dbg !12519 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %zero = alloca %union.tree_node*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !12520, metadata !DIExpression()), !dbg !12521
  call void @llvm.dbg.declare(metadata %union.tree_node** %zero, metadata !12522, metadata !DIExpression()), !dbg !12523
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12524
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 0, !dbg !12524
  %1 = load i32, i32* %type, align 8, !dbg !12524
  %cmp = icmp ne i32 %1, 0, !dbg !12524
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !12524

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12524
  %type1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 0, !dbg !12524
  %3 = load i32, i32* %type1, align 8, !dbg !12524
  %cmp2 = icmp ne i32 %3, 3, !dbg !12524
  br i1 %cmp2, label %land.lhs.true3, label %cond.true, !dbg !12524

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12524
  %call = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %4), !dbg !12524
  %tobool = icmp ne i8 %call, 0, !dbg !12524
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12524

cond.true:                                        ; preds = %land.lhs.true3, %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1344, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !12524
  br label %cond.end, !dbg !12524

cond.false:                                       ; preds = %land.lhs.true3
  br label %cond.end, !dbg !12524

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12524
  %5 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12525
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %5, i32 0, i32 1, !dbg !12525
  %6 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12525
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !12525
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12525
  %7 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !12525
  %call5 = call %union.tree_node* @build_int_cst(%union.tree_node* %7, i64 0), !dbg !12526
  store %union.tree_node* %call5, %union.tree_node** %zero, align 8, !dbg !12527
  %8 = load %union.tree_node*, %union.tree_node** %zero, align 8, !dbg !12528
  %9 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12529
  %call6 = call i32 @value_inside_range(%union.tree_node* %8, %struct.value_range_d* %9), !dbg !12530
  %cmp7 = icmp eq i32 %call6, 1, !dbg !12531
  %conv = zext i1 %cmp7 to i32, !dbg !12531
  %conv8 = trunc i32 %conv to i8, !dbg !12532
  ret i8 %conv8, !dbg !12533
}

; Function Attrs: noinline nounwind uwtable
define internal void @abs_extent_range(%struct.value_range_d* %vr, %union.tree_node* %min, %union.tree_node* %max) #0 !dbg !12534 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %min.addr = alloca %union.tree_node*, align 8
  %max.addr = alloca %union.tree_node*, align 8
  %cmp = alloca i32, align 4
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !12537, metadata !DIExpression()), !dbg !12538
  store %union.tree_node* %min, %union.tree_node** %min.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %min.addr, metadata !12539, metadata !DIExpression()), !dbg !12540
  store %union.tree_node* %max, %union.tree_node** %max.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %max.addr, metadata !12541, metadata !DIExpression()), !dbg !12542
  call void @llvm.dbg.declare(metadata i32* %cmp, metadata !12543, metadata !DIExpression()), !dbg !12544
  %0 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12545
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12545
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12545
  %bf.load = load i64, i64* %1, align 8, !dbg !12545
  %bf.clear = and i64 %bf.load, 65535, !dbg !12545
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12545
  %cmp1 = icmp eq i32 %bf.cast, 23, !dbg !12545
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !12545

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 599, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !12545
  br label %cond.end, !dbg !12545

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12545

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12545
  %2 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12546
  %base2 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !12546
  %3 = bitcast %struct.tree_base* %base2 to i64*, !dbg !12546
  %bf.load3 = load i64, i64* %3, align 8, !dbg !12546
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !12546
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !12546
  %cmp6 = icmp eq i32 %bf.cast5, 23, !dbg !12546
  br i1 %cmp6, label %cond.false8, label %cond.true7, !dbg !12546

cond.true7:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 600, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !12546
  br label %cond.end9, !dbg !12546

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !12546

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !12546
  %4 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12547
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !12547
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12547
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12547
  %base11 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !12547
  %6 = bitcast %struct.tree_base* %base11 to i64*, !dbg !12547
  %bf.load12 = load i64, i64* %6, align 8, !dbg !12547
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !12547
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !12547
  %cmp15 = icmp eq i32 %bf.cast14, 6, !dbg !12547
  br i1 %cmp15, label %cond.false32, label %lor.lhs.false, !dbg !12547

lor.lhs.false:                                    ; preds = %cond.end9
  %7 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12547
  %common16 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !12547
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !12547
  %8 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !12547
  %base18 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !12547
  %9 = bitcast %struct.tree_base* %base18 to i64*, !dbg !12547
  %bf.load19 = load i64, i64* %9, align 8, !dbg !12547
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !12547
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !12547
  %cmp22 = icmp eq i32 %bf.cast21, 7, !dbg !12547
  br i1 %cmp22, label %cond.false32, label %lor.lhs.false23, !dbg !12547

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12547
  %common24 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !12547
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !12547
  %11 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !12547
  %base26 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !12547
  %12 = bitcast %struct.tree_base* %base26 to i64*, !dbg !12547
  %bf.load27 = load i64, i64* %12, align 8, !dbg !12547
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !12547
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !12547
  %cmp30 = icmp eq i32 %bf.cast29, 8, !dbg !12547
  br i1 %cmp30, label %cond.false32, label %cond.true31, !dbg !12547

cond.true31:                                      ; preds = %lor.lhs.false23
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 601, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !12547
  br label %cond.end33, !dbg !12547

cond.false32:                                     ; preds = %lor.lhs.false23, %lor.lhs.false, %cond.end9
  br label %cond.end33, !dbg !12547

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond34 = phi i32 [ 0, %cond.true31 ], [ 0, %cond.false32 ], !dbg !12547
  %13 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12548
  %common35 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !12548
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2, !dbg !12548
  %14 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !12548
  %base37 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !12548
  %15 = bitcast %struct.tree_base* %base37 to i64*, !dbg !12548
  %bf.load38 = load i64, i64* %15, align 8, !dbg !12548
  %bf.lshr = lshr i64 %bf.load38, 21, !dbg !12548
  %bf.clear39 = and i64 %bf.lshr, 1, !dbg !12548
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !12548
  %tobool = icmp ne i32 %bf.cast40, 0, !dbg !12548
  br i1 %tobool, label %cond.true41, label %cond.false42, !dbg !12548

cond.true41:                                      ; preds = %cond.end33
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 602, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !12548
  br label %cond.end43, !dbg !12548

cond.false42:                                     ; preds = %cond.end33
  br label %cond.end43, !dbg !12548

cond.end43:                                       ; preds = %cond.false42, %cond.true41
  %cond44 = phi i32 [ 0, %cond.true41 ], [ 0, %cond.false42 ], !dbg !12548
  %16 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12549
  %common45 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !12549
  %type46 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common45, i32 0, i32 2, !dbg !12549
  %17 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !12549
  %18 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12549
  %call = call %union.tree_node* @fold_unary_loc(i32 0, i32 82, %union.tree_node* %17, %union.tree_node* %18), !dbg !12549
  store %union.tree_node* %call, %union.tree_node** %min.addr, align 8, !dbg !12550
  %19 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12551
  %common47 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !12551
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !12551
  %20 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !12551
  %21 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12551
  %call49 = call %union.tree_node* @fold_unary_loc(i32 0, i32 82, %union.tree_node* %20, %union.tree_node* %21), !dbg !12551
  store %union.tree_node* %call49, %union.tree_node** %max.addr, align 8, !dbg !12552
  %22 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12553
  %base50 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !12553
  %23 = bitcast %struct.tree_base* %base50 to i64*, !dbg !12553
  %bf.load51 = load i64, i64* %23, align 8, !dbg !12553
  %bf.lshr52 = lshr i64 %bf.load51, 27, !dbg !12553
  %bf.clear53 = and i64 %bf.lshr52, 1, !dbg !12553
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !12553
  %tobool55 = icmp ne i32 %bf.cast54, 0, !dbg !12553
  br i1 %tobool55, label %if.then, label %lor.lhs.false56, !dbg !12555

lor.lhs.false56:                                  ; preds = %cond.end43
  %24 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12556
  %base57 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !12556
  %25 = bitcast %struct.tree_base* %base57 to i64*, !dbg !12556
  %bf.load58 = load i64, i64* %25, align 8, !dbg !12556
  %bf.lshr59 = lshr i64 %bf.load58, 27, !dbg !12556
  %bf.clear60 = and i64 %bf.lshr59, 1, !dbg !12556
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !12556
  %tobool62 = icmp ne i32 %bf.cast61, 0, !dbg !12556
  br i1 %tobool62, label %if.then, label %if.end, !dbg !12557

if.then:                                          ; preds = %lor.lhs.false56, %cond.end43
  %26 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12558
  call void @set_value_range_to_varying(%struct.value_range_d* %26), !dbg !12560
  br label %return, !dbg !12561

if.end:                                           ; preds = %lor.lhs.false56
  %27 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12562
  %28 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12563
  %call63 = call i32 @compare_values(%union.tree_node* %27, %union.tree_node* %28), !dbg !12564
  store i32 %call63, i32* %cmp, align 4, !dbg !12565
  %29 = load i32, i32* %cmp, align 4, !dbg !12566
  %cmp64 = icmp eq i32 %29, -1, !dbg !12568
  br i1 %cmp64, label %if.then65, label %if.else, !dbg !12569

if.then65:                                        ; preds = %if.end
  %30 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12570
  %common66 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !12570
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !12570
  %31 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !12570
  %32 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12570
  %call68 = call %union.tree_node* @fold_unary_loc(i32 0, i32 79, %union.tree_node* %31, %union.tree_node* %32), !dbg !12570
  store %union.tree_node* %call68, %union.tree_node** %min.addr, align 8, !dbg !12571
  br label %if.end78, !dbg !12572

if.else:                                          ; preds = %if.end
  %33 = load i32, i32* %cmp, align 4, !dbg !12573
  %cmp69 = icmp eq i32 %33, 0, !dbg !12575
  br i1 %cmp69, label %if.then72, label %lor.lhs.false70, !dbg !12576

lor.lhs.false70:                                  ; preds = %if.else
  %34 = load i32, i32* %cmp, align 4, !dbg !12577
  %cmp71 = icmp eq i32 %34, 1, !dbg !12578
  br i1 %cmp71, label %if.then72, label %if.else76, !dbg !12579

if.then72:                                        ; preds = %lor.lhs.false70, %if.else
  %35 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12580
  store %union.tree_node* %35, %union.tree_node** %max.addr, align 8, !dbg !12582
  %36 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12583
  %common73 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !12583
  %type74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2, !dbg !12583
  %37 = load %union.tree_node*, %union.tree_node** %type74, align 8, !dbg !12583
  %38 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12583
  %call75 = call %union.tree_node* @fold_unary_loc(i32 0, i32 79, %union.tree_node* %37, %union.tree_node* %38), !dbg !12583
  store %union.tree_node* %call75, %union.tree_node** %min.addr, align 8, !dbg !12584
  br label %if.end77, !dbg !12585

if.else76:                                        ; preds = %lor.lhs.false70
  %39 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12586
  call void @set_value_range_to_varying(%struct.value_range_d* %39), !dbg !12588
  br label %return, !dbg !12589

if.end77:                                         ; preds = %if.then72
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.then65
  %40 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12590
  %41 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !12591
  %42 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !12592
  call void @set_and_canonicalize_value_range(%struct.value_range_d* %40, i32 1, %union.tree_node* %41, %union.tree_node* %42, %struct.bitmap_head_def* null), !dbg !12593
  br label %return, !dbg !12594

return:                                           ; preds = %if.end78, %if.else76, %if.then
  ret void, !dbg !12594
}

declare dso_local { i64, i64 } @tree_to_double_int(%union.tree_node*) #2

declare dso_local i32 @floor_log2(i64) #2

declare dso_local %union.tree_node* @double_int_to_tree(%union.tree_node*, i64, i64) #2

declare dso_local zeroext i8 @tree_expr_nonnegative_warnv_p(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @value_inside_range(%union.tree_node* %val, %struct.value_range_d* %vr) #0 !dbg !12595 {
entry:
  %retval = alloca i32, align 4
  %val.addr = alloca %union.tree_node*, align 8
  %vr.addr = alloca %struct.value_range_d*, align 8
  %cmp1 = alloca i32, align 4
  %cmp2 = alloca i32, align 4
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !12598, metadata !DIExpression()), !dbg !12599
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !12600, metadata !DIExpression()), !dbg !12601
  call void @llvm.dbg.declare(metadata i32* %cmp1, metadata !12602, metadata !DIExpression()), !dbg !12603
  call void @llvm.dbg.declare(metadata i32* %cmp2, metadata !12604, metadata !DIExpression()), !dbg !12605
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !12606
  %1 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12607
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %1, i32 0, i32 1, !dbg !12608
  %2 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12608
  %call = call i32 @operand_less_p(%union.tree_node* %0, %union.tree_node* %2), !dbg !12609
  store i32 %call, i32* %cmp1, align 4, !dbg !12610
  %3 = load i32, i32* %cmp1, align 4, !dbg !12611
  %cmp = icmp eq i32 %3, -2, !dbg !12613
  br i1 %cmp, label %if.then, label %if.end, !dbg !12614

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4, !dbg !12615
  br label %return, !dbg !12615

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %cmp1, align 4, !dbg !12616
  %cmp3 = icmp eq i32 %4, 1, !dbg !12618
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !12619

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !12620
  br label %return, !dbg !12620

if.end5:                                          ; preds = %if.end
  %5 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !12621
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %5, i32 0, i32 2, !dbg !12622
  %6 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !12622
  %7 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !12623
  %call6 = call i32 @operand_less_p(%union.tree_node* %6, %union.tree_node* %7), !dbg !12624
  store i32 %call6, i32* %cmp2, align 4, !dbg !12625
  %8 = load i32, i32* %cmp2, align 4, !dbg !12626
  %cmp7 = icmp eq i32 %8, -2, !dbg !12628
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !12629

if.then8:                                         ; preds = %if.end5
  store i32 -2, i32* %retval, align 4, !dbg !12630
  br label %return, !dbg !12630

if.end9:                                          ; preds = %if.end5
  %9 = load i32, i32* %cmp2, align 4, !dbg !12631
  %tobool = icmp ne i32 %9, 0, !dbg !12632
  %lnot = xor i1 %tobool, true, !dbg !12632
  %lnot.ext = zext i1 %lnot to i32, !dbg !12632
  store i32 %lnot.ext, i32* %retval, align 4, !dbg !12633
  br label %return, !dbg !12633

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !12634
  ret i32 %10, !dbg !12634
}

declare dso_local %union.tree_node* @fold_unary_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @vrp_meet(%struct.value_range_d* %vr0, %struct.value_range_d* %vr1) #0 !dbg !12635 {
entry:
  %vr0.addr = alloca %struct.value_range_d*, align 8
  %vr1.addr = alloca %struct.value_range_d*, align 8
  %cmp18 = alloca i32, align 4
  %min = alloca %union.tree_node*, align 8
  %max = alloca %union.tree_node*, align 8
  store %struct.value_range_d* %vr0, %struct.value_range_d** %vr0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr0.addr, metadata !12636, metadata !DIExpression()), !dbg !12637
  store %struct.value_range_d* %vr1, %struct.value_range_d** %vr1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr1.addr, metadata !12638, metadata !DIExpression()), !dbg !12639
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12640
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 0, !dbg !12642
  %1 = load i32, i32* %type, align 8, !dbg !12642
  %cmp = icmp eq i32 %1, 0, !dbg !12643
  br i1 %cmp, label %if.then, label %if.end, !dbg !12644

if.then:                                          ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12645
  %3 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12647
  call void @copy_value_range(%struct.value_range_d* %2, %struct.value_range_d* %3), !dbg !12648
  br label %if.end257, !dbg !12649

if.end:                                           ; preds = %entry
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12650
  %type1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %4, i32 0, i32 0, !dbg !12652
  %5 = load i32, i32* %type1, align 8, !dbg !12652
  %cmp2 = icmp eq i32 %5, 0, !dbg !12653
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !12654

if.then3:                                         ; preds = %if.end
  br label %if.end257, !dbg !12655

if.end4:                                          ; preds = %if.end
  %6 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12657
  %type5 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %6, i32 0, i32 0, !dbg !12659
  %7 = load i32, i32* %type5, align 8, !dbg !12659
  %cmp6 = icmp eq i32 %7, 3, !dbg !12660
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !12661

if.then7:                                         ; preds = %if.end4
  br label %if.end257, !dbg !12662

if.end8:                                          ; preds = %if.end4
  %8 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12664
  %type9 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %8, i32 0, i32 0, !dbg !12666
  %9 = load i32, i32* %type9, align 8, !dbg !12666
  %cmp10 = icmp eq i32 %9, 3, !dbg !12667
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !12668

if.then11:                                        ; preds = %if.end8
  %10 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12669
  call void @set_value_range_to_varying(%struct.value_range_d* %10), !dbg !12671
  br label %if.end257, !dbg !12672

if.end12:                                         ; preds = %if.end8
  %11 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12673
  %type13 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %11, i32 0, i32 0, !dbg !12675
  %12 = load i32, i32* %type13, align 8, !dbg !12675
  %cmp14 = icmp eq i32 %12, 1, !dbg !12676
  br i1 %cmp14, label %land.lhs.true, label %if.else104, !dbg !12677

land.lhs.true:                                    ; preds = %if.end12
  %13 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12678
  %type15 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %13, i32 0, i32 0, !dbg !12679
  %14 = load i32, i32* %type15, align 8, !dbg !12679
  %cmp16 = icmp eq i32 %14, 1, !dbg !12680
  br i1 %cmp16, label %if.then17, label %if.else104, !dbg !12681

if.then17:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %cmp18, metadata !12682, metadata !DIExpression()), !dbg !12684
  call void @llvm.dbg.declare(metadata %union.tree_node** %min, metadata !12685, metadata !DIExpression()), !dbg !12686
  call void @llvm.dbg.declare(metadata %union.tree_node** %max, metadata !12687, metadata !DIExpression()), !dbg !12688
  %15 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12689
  %min19 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %15, i32 0, i32 1, !dbg !12690
  %16 = load %union.tree_node*, %union.tree_node** %min19, align 8, !dbg !12690
  %17 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12691
  %min20 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %17, i32 0, i32 1, !dbg !12692
  %18 = load %union.tree_node*, %union.tree_node** %min20, align 8, !dbg !12692
  %call = call i32 @compare_values(%union.tree_node* %16, %union.tree_node* %18), !dbg !12693
  store i32 %call, i32* %cmp18, align 4, !dbg !12694
  %19 = load i32, i32* %cmp18, align 4, !dbg !12695
  %cmp21 = icmp eq i32 %19, 0, !dbg !12697
  br i1 %cmp21, label %if.then23, label %lor.lhs.false, !dbg !12698

lor.lhs.false:                                    ; preds = %if.then17
  %20 = load i32, i32* %cmp18, align 4, !dbg !12699
  %cmp22 = icmp eq i32 %20, 1, !dbg !12700
  br i1 %cmp22, label %if.then23, label %if.else, !dbg !12701

if.then23:                                        ; preds = %lor.lhs.false, %if.then17
  %21 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12702
  %min24 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %21, i32 0, i32 1, !dbg !12703
  %22 = load %union.tree_node*, %union.tree_node** %min24, align 8, !dbg !12703
  store %union.tree_node* %22, %union.tree_node** %min, align 8, !dbg !12704
  br label %if.end30, !dbg !12705

if.else:                                          ; preds = %lor.lhs.false
  %23 = load i32, i32* %cmp18, align 4, !dbg !12706
  %cmp25 = icmp eq i32 %23, -1, !dbg !12708
  br i1 %cmp25, label %if.then26, label %if.else28, !dbg !12709

if.then26:                                        ; preds = %if.else
  %24 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12710
  %min27 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %24, i32 0, i32 1, !dbg !12711
  %25 = load %union.tree_node*, %union.tree_node** %min27, align 8, !dbg !12711
  store %union.tree_node* %25, %union.tree_node** %min, align 8, !dbg !12712
  br label %if.end29, !dbg !12713

if.else28:                                        ; preds = %if.else
  br label %give_up, !dbg !12714

if.end29:                                         ; preds = %if.then26
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then23
  %26 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12715
  %max31 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %26, i32 0, i32 2, !dbg !12716
  %27 = load %union.tree_node*, %union.tree_node** %max31, align 8, !dbg !12716
  %28 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12717
  %max32 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %28, i32 0, i32 2, !dbg !12718
  %29 = load %union.tree_node*, %union.tree_node** %max32, align 8, !dbg !12718
  %call33 = call i32 @compare_values(%union.tree_node* %27, %union.tree_node* %29), !dbg !12719
  store i32 %call33, i32* %cmp18, align 4, !dbg !12720
  %30 = load i32, i32* %cmp18, align 4, !dbg !12721
  %cmp34 = icmp eq i32 %30, 0, !dbg !12723
  br i1 %cmp34, label %if.then37, label %lor.lhs.false35, !dbg !12724

lor.lhs.false35:                                  ; preds = %if.end30
  %31 = load i32, i32* %cmp18, align 4, !dbg !12725
  %cmp36 = icmp eq i32 %31, -1, !dbg !12726
  br i1 %cmp36, label %if.then37, label %if.else39, !dbg !12727

if.then37:                                        ; preds = %lor.lhs.false35, %if.end30
  %32 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12728
  %max38 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %32, i32 0, i32 2, !dbg !12729
  %33 = load %union.tree_node*, %union.tree_node** %max38, align 8, !dbg !12729
  store %union.tree_node* %33, %union.tree_node** %max, align 8, !dbg !12730
  br label %if.end45, !dbg !12731

if.else39:                                        ; preds = %lor.lhs.false35
  %34 = load i32, i32* %cmp18, align 4, !dbg !12732
  %cmp40 = icmp eq i32 %34, 1, !dbg !12734
  br i1 %cmp40, label %if.then41, label %if.else43, !dbg !12735

if.then41:                                        ; preds = %if.else39
  %35 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12736
  %max42 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %35, i32 0, i32 2, !dbg !12737
  %36 = load %union.tree_node*, %union.tree_node** %max42, align 8, !dbg !12737
  store %union.tree_node* %36, %union.tree_node** %max, align 8, !dbg !12738
  br label %if.end44, !dbg !12739

if.else43:                                        ; preds = %if.else39
  br label %give_up, !dbg !12740

if.end44:                                         ; preds = %if.then41
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then37
  %37 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12741
  %common = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !12741
  %type46 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12741
  %38 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !12741
  %base = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !12741
  %39 = bitcast %struct.tree_base* %base to i64*, !dbg !12741
  %bf.load = load i64, i64* %39, align 8, !dbg !12741
  %bf.clear = and i64 %bf.load, 65535, !dbg !12741
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12741
  %cmp47 = icmp eq i32 %bf.cast, 6, !dbg !12741
  br i1 %cmp47, label %land.lhs.true64, label %lor.lhs.false48, !dbg !12741

lor.lhs.false48:                                  ; preds = %if.end45
  %40 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12741
  %common49 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !12741
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !12741
  %41 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !12741
  %base51 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !12741
  %42 = bitcast %struct.tree_base* %base51 to i64*, !dbg !12741
  %bf.load52 = load i64, i64* %42, align 8, !dbg !12741
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !12741
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !12741
  %cmp55 = icmp eq i32 %bf.cast54, 7, !dbg !12741
  br i1 %cmp55, label %land.lhs.true64, label %lor.lhs.false56, !dbg !12741

lor.lhs.false56:                                  ; preds = %lor.lhs.false48
  %43 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12741
  %common57 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !12741
  %type58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 2, !dbg !12741
  %44 = load %union.tree_node*, %union.tree_node** %type58, align 8, !dbg !12741
  %base59 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !12741
  %45 = bitcast %struct.tree_base* %base59 to i64*, !dbg !12741
  %bf.load60 = load i64, i64* %45, align 8, !dbg !12741
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !12741
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !12741
  %cmp63 = icmp eq i32 %bf.cast62, 8, !dbg !12741
  br i1 %cmp63, label %land.lhs.true64, label %if.end79, !dbg !12743

land.lhs.true64:                                  ; preds = %lor.lhs.false56, %lor.lhs.false48, %if.end45
  %46 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12744
  %call65 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %46), !dbg !12745
  %conv = zext i8 %call65 to i32, !dbg !12745
  %tobool = icmp ne i32 %conv, 0, !dbg !12745
  br i1 %tobool, label %land.lhs.true70, label %lor.lhs.false66, !dbg !12746

lor.lhs.false66:                                  ; preds = %land.lhs.true64
  %47 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12747
  %call67 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %47), !dbg !12748
  %conv68 = zext i8 %call67 to i32, !dbg !12748
  %tobool69 = icmp ne i32 %conv68, 0, !dbg !12748
  br i1 %tobool69, label %land.lhs.true70, label %if.end79, !dbg !12749

land.lhs.true70:                                  ; preds = %lor.lhs.false66, %land.lhs.true64
  %48 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !12750
  %call71 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %48), !dbg !12751
  %conv72 = zext i8 %call71 to i32, !dbg !12751
  %tobool73 = icmp ne i32 %conv72, 0, !dbg !12751
  br i1 %tobool73, label %if.then78, label %lor.lhs.false74, !dbg !12752

lor.lhs.false74:                                  ; preds = %land.lhs.true70
  %49 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !12753
  %call75 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %49), !dbg !12754
  %conv76 = zext i8 %call75 to i32, !dbg !12754
  %tobool77 = icmp ne i32 %conv76, 0, !dbg !12754
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !12755

if.then78:                                        ; preds = %lor.lhs.false74, %land.lhs.true70
  br label %give_up, !dbg !12756

if.end79:                                         ; preds = %lor.lhs.false74, %lor.lhs.false66, %lor.lhs.false56
  %50 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12757
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %50, i32 0, i32 3, !dbg !12759
  %51 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !12759
  %tobool80 = icmp ne %struct.bitmap_head_def* %51, null, !dbg !12757
  br i1 %tobool80, label %land.lhs.true81, label %if.else92, !dbg !12760

land.lhs.true81:                                  ; preds = %if.end79
  %52 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12761
  %equiv82 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %52, i32 0, i32 3, !dbg !12762
  %53 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv82, align 8, !dbg !12762
  %tobool83 = icmp ne %struct.bitmap_head_def* %53, null, !dbg !12761
  br i1 %tobool83, label %land.lhs.true84, label %if.else92, !dbg !12763

land.lhs.true84:                                  ; preds = %land.lhs.true81
  %54 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12764
  %equiv85 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %54, i32 0, i32 3, !dbg !12765
  %55 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv85, align 8, !dbg !12765
  %56 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12766
  %equiv86 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %56, i32 0, i32 3, !dbg !12767
  %57 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv86, align 8, !dbg !12767
  %cmp87 = icmp ne %struct.bitmap_head_def* %55, %57, !dbg !12768
  br i1 %cmp87, label %if.then89, label %if.else92, !dbg !12769

if.then89:                                        ; preds = %land.lhs.true84
  %58 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12770
  %equiv90 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %58, i32 0, i32 3, !dbg !12771
  %59 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv90, align 8, !dbg !12771
  %60 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12772
  %equiv91 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %60, i32 0, i32 3, !dbg !12773
  %61 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv91, align 8, !dbg !12773
  call void @bitmap_and_into(%struct.bitmap_head_def* %59, %struct.bitmap_head_def* %61), !dbg !12774
  br label %if.end101, !dbg !12774

if.else92:                                        ; preds = %land.lhs.true84, %land.lhs.true81, %if.end79
  %62 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12775
  %equiv93 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %62, i32 0, i32 3, !dbg !12777
  %63 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv93, align 8, !dbg !12777
  %tobool94 = icmp ne %struct.bitmap_head_def* %63, null, !dbg !12775
  br i1 %tobool94, label %land.lhs.true95, label %if.end100, !dbg !12778

land.lhs.true95:                                  ; preds = %if.else92
  %64 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12779
  %equiv96 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %64, i32 0, i32 3, !dbg !12780
  %65 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv96, align 8, !dbg !12780
  %tobool97 = icmp ne %struct.bitmap_head_def* %65, null, !dbg !12779
  br i1 %tobool97, label %if.end100, label %if.then98, !dbg !12781

if.then98:                                        ; preds = %land.lhs.true95
  %66 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12782
  %equiv99 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %66, i32 0, i32 3, !dbg !12783
  %67 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv99, align 8, !dbg !12783
  call void @bitmap_clear(%struct.bitmap_head_def* %67), !dbg !12784
  br label %if.end100, !dbg !12784

if.end100:                                        ; preds = %if.then98, %land.lhs.true95, %if.else92
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.then89
  %68 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12785
  %69 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12786
  %type102 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %69, i32 0, i32 0, !dbg !12787
  %70 = load i32, i32* %type102, align 8, !dbg !12787
  %71 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !12788
  %72 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !12789
  %73 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12790
  %equiv103 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %73, i32 0, i32 3, !dbg !12791
  %74 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv103, align 8, !dbg !12791
  call void @set_value_range(%struct.value_range_d* %68, i32 %70, %union.tree_node* %71, %union.tree_node* %72, %struct.bitmap_head_def* %74), !dbg !12792
  br label %if.end211, !dbg !12793

if.else104:                                       ; preds = %land.lhs.true, %if.end12
  %75 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12794
  %type105 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %75, i32 0, i32 0, !dbg !12796
  %76 = load i32, i32* %type105, align 8, !dbg !12796
  %cmp106 = icmp eq i32 %76, 2, !dbg !12797
  br i1 %cmp106, label %land.lhs.true108, label %if.else156, !dbg !12798

land.lhs.true108:                                 ; preds = %if.else104
  %77 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12799
  %type109 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %77, i32 0, i32 0, !dbg !12800
  %78 = load i32, i32* %type109, align 8, !dbg !12800
  %cmp110 = icmp eq i32 %78, 2, !dbg !12801
  br i1 %cmp110, label %if.then112, label %if.else156, !dbg !12802

if.then112:                                       ; preds = %land.lhs.true108
  %79 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12803
  %min113 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %79, i32 0, i32 1, !dbg !12806
  %80 = load %union.tree_node*, %union.tree_node** %min113, align 8, !dbg !12806
  %81 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12807
  %min114 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %81, i32 0, i32 1, !dbg !12808
  %82 = load %union.tree_node*, %union.tree_node** %min114, align 8, !dbg !12808
  %call115 = call i32 @compare_values(%union.tree_node* %80, %union.tree_node* %82), !dbg !12809
  %cmp116 = icmp eq i32 %call115, 0, !dbg !12810
  br i1 %cmp116, label %land.lhs.true118, label %if.else154, !dbg !12811

land.lhs.true118:                                 ; preds = %if.then112
  %83 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12812
  %max119 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %83, i32 0, i32 2, !dbg !12813
  %84 = load %union.tree_node*, %union.tree_node** %max119, align 8, !dbg !12813
  %85 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12814
  %max120 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %85, i32 0, i32 2, !dbg !12815
  %86 = load %union.tree_node*, %union.tree_node** %max120, align 8, !dbg !12815
  %call121 = call i32 @compare_values(%union.tree_node* %84, %union.tree_node* %86), !dbg !12816
  %cmp122 = icmp eq i32 %call121, 0, !dbg !12817
  br i1 %cmp122, label %land.lhs.true124, label %if.else154, !dbg !12818

land.lhs.true124:                                 ; preds = %land.lhs.true118
  %87 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12819
  %min125 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %87, i32 0, i32 1, !dbg !12820
  %88 = load %union.tree_node*, %union.tree_node** %min125, align 8, !dbg !12820
  %89 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12821
  %max126 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %89, i32 0, i32 2, !dbg !12822
  %90 = load %union.tree_node*, %union.tree_node** %max126, align 8, !dbg !12822
  %call127 = call i32 @compare_values(%union.tree_node* %88, %union.tree_node* %90), !dbg !12823
  %cmp128 = icmp eq i32 %call127, 0, !dbg !12824
  br i1 %cmp128, label %if.then130, label %if.else154, !dbg !12825

if.then130:                                       ; preds = %land.lhs.true124
  %91 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12826
  %equiv131 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %91, i32 0, i32 3, !dbg !12829
  %92 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv131, align 8, !dbg !12829
  %tobool132 = icmp ne %struct.bitmap_head_def* %92, null, !dbg !12826
  br i1 %tobool132, label %land.lhs.true133, label %if.else144, !dbg !12830

land.lhs.true133:                                 ; preds = %if.then130
  %93 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12831
  %equiv134 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %93, i32 0, i32 3, !dbg !12832
  %94 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv134, align 8, !dbg !12832
  %tobool135 = icmp ne %struct.bitmap_head_def* %94, null, !dbg !12831
  br i1 %tobool135, label %land.lhs.true136, label %if.else144, !dbg !12833

land.lhs.true136:                                 ; preds = %land.lhs.true133
  %95 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12834
  %equiv137 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %95, i32 0, i32 3, !dbg !12835
  %96 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv137, align 8, !dbg !12835
  %97 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12836
  %equiv138 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %97, i32 0, i32 3, !dbg !12837
  %98 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv138, align 8, !dbg !12837
  %cmp139 = icmp ne %struct.bitmap_head_def* %96, %98, !dbg !12838
  br i1 %cmp139, label %if.then141, label %if.else144, !dbg !12839

if.then141:                                       ; preds = %land.lhs.true136
  %99 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12840
  %equiv142 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %99, i32 0, i32 3, !dbg !12841
  %100 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv142, align 8, !dbg !12841
  %101 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12842
  %equiv143 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %101, i32 0, i32 3, !dbg !12843
  %102 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv143, align 8, !dbg !12843
  call void @bitmap_and_into(%struct.bitmap_head_def* %100, %struct.bitmap_head_def* %102), !dbg !12844
  br label %if.end153, !dbg !12844

if.else144:                                       ; preds = %land.lhs.true136, %land.lhs.true133, %if.then130
  %103 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12845
  %equiv145 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %103, i32 0, i32 3, !dbg !12847
  %104 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv145, align 8, !dbg !12847
  %tobool146 = icmp ne %struct.bitmap_head_def* %104, null, !dbg !12845
  br i1 %tobool146, label %land.lhs.true147, label %if.end152, !dbg !12848

land.lhs.true147:                                 ; preds = %if.else144
  %105 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12849
  %equiv148 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %105, i32 0, i32 3, !dbg !12850
  %106 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv148, align 8, !dbg !12850
  %tobool149 = icmp ne %struct.bitmap_head_def* %106, null, !dbg !12849
  br i1 %tobool149, label %if.end152, label %if.then150, !dbg !12851

if.then150:                                       ; preds = %land.lhs.true147
  %107 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12852
  %equiv151 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %107, i32 0, i32 3, !dbg !12853
  %108 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv151, align 8, !dbg !12853
  call void @bitmap_clear(%struct.bitmap_head_def* %108), !dbg !12854
  br label %if.end152, !dbg !12854

if.end152:                                        ; preds = %if.then150, %land.lhs.true147, %if.else144
  br label %if.end153

if.end153:                                        ; preds = %if.end152, %if.then141
  br label %if.end155, !dbg !12855

if.else154:                                       ; preds = %land.lhs.true124, %land.lhs.true118, %if.then112
  br label %give_up, !dbg !12856

if.end155:                                        ; preds = %if.end153
  br label %if.end210, !dbg !12857

if.else156:                                       ; preds = %land.lhs.true108, %if.else104
  %109 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12858
  %type157 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %109, i32 0, i32 0, !dbg !12860
  %110 = load i32, i32* %type157, align 8, !dbg !12860
  %cmp158 = icmp eq i32 %110, 2, !dbg !12861
  br i1 %cmp158, label %if.then164, label %lor.lhs.false160, !dbg !12862

lor.lhs.false160:                                 ; preds = %if.else156
  %111 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12863
  %type161 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %111, i32 0, i32 0, !dbg !12864
  %112 = load i32, i32* %type161, align 8, !dbg !12864
  %cmp162 = icmp eq i32 %112, 2, !dbg !12865
  br i1 %cmp162, label %if.then164, label %if.else208, !dbg !12866

if.then164:                                       ; preds = %lor.lhs.false160, %if.else156
  %113 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12867
  %call165 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %113), !dbg !12870
  %tobool166 = icmp ne i8 %call165, 0, !dbg !12870
  br i1 %tobool166, label %if.else206, label %land.lhs.true167, !dbg !12871

land.lhs.true167:                                 ; preds = %if.then164
  %114 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12872
  %call168 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %114), !dbg !12873
  %tobool169 = icmp ne i8 %call168, 0, !dbg !12873
  br i1 %tobool169, label %if.else206, label %land.lhs.true170, !dbg !12874

land.lhs.true170:                                 ; preds = %land.lhs.true167
  %115 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12875
  %116 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12876
  %call171 = call zeroext i8 @value_ranges_intersect_p(%struct.value_range_d* %115, %struct.value_range_d* %116), !dbg !12877
  %tobool172 = icmp ne i8 %call171, 0, !dbg !12877
  br i1 %tobool172, label %if.else206, label %if.then173, !dbg !12878

if.then173:                                       ; preds = %land.lhs.true170
  %117 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12879
  %type174 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %117, i32 0, i32 0, !dbg !12882
  %118 = load i32, i32* %type174, align 8, !dbg !12882
  %cmp175 = icmp eq i32 %118, 2, !dbg !12883
  br i1 %cmp175, label %if.then177, label %if.end182, !dbg !12884

if.then177:                                       ; preds = %if.then173
  %119 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12885
  %120 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12886
  %type178 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %120, i32 0, i32 0, !dbg !12887
  %121 = load i32, i32* %type178, align 8, !dbg !12887
  %122 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12888
  %min179 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %122, i32 0, i32 1, !dbg !12889
  %123 = load %union.tree_node*, %union.tree_node** %min179, align 8, !dbg !12889
  %124 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12890
  %max180 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %124, i32 0, i32 2, !dbg !12891
  %125 = load %union.tree_node*, %union.tree_node** %max180, align 8, !dbg !12891
  %126 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12892
  %equiv181 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %126, i32 0, i32 3, !dbg !12893
  %127 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv181, align 8, !dbg !12893
  call void @set_value_range(%struct.value_range_d* %119, i32 %121, %union.tree_node* %123, %union.tree_node* %125, %struct.bitmap_head_def* %127), !dbg !12894
  br label %if.end182, !dbg !12894

if.end182:                                        ; preds = %if.then177, %if.then173
  %128 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12895
  %equiv183 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %128, i32 0, i32 3, !dbg !12897
  %129 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv183, align 8, !dbg !12897
  %tobool184 = icmp ne %struct.bitmap_head_def* %129, null, !dbg !12895
  br i1 %tobool184, label %land.lhs.true185, label %if.else196, !dbg !12898

land.lhs.true185:                                 ; preds = %if.end182
  %130 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12899
  %equiv186 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %130, i32 0, i32 3, !dbg !12900
  %131 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv186, align 8, !dbg !12900
  %tobool187 = icmp ne %struct.bitmap_head_def* %131, null, !dbg !12899
  br i1 %tobool187, label %land.lhs.true188, label %if.else196, !dbg !12901

land.lhs.true188:                                 ; preds = %land.lhs.true185
  %132 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12902
  %equiv189 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %132, i32 0, i32 3, !dbg !12903
  %133 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv189, align 8, !dbg !12903
  %134 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12904
  %equiv190 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %134, i32 0, i32 3, !dbg !12905
  %135 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv190, align 8, !dbg !12905
  %cmp191 = icmp ne %struct.bitmap_head_def* %133, %135, !dbg !12906
  br i1 %cmp191, label %if.then193, label %if.else196, !dbg !12907

if.then193:                                       ; preds = %land.lhs.true188
  %136 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12908
  %equiv194 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %136, i32 0, i32 3, !dbg !12909
  %137 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv194, align 8, !dbg !12909
  %138 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12910
  %equiv195 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %138, i32 0, i32 3, !dbg !12911
  %139 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv195, align 8, !dbg !12911
  call void @bitmap_and_into(%struct.bitmap_head_def* %137, %struct.bitmap_head_def* %139), !dbg !12912
  br label %if.end205, !dbg !12912

if.else196:                                       ; preds = %land.lhs.true188, %land.lhs.true185, %if.end182
  %140 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12913
  %equiv197 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %140, i32 0, i32 3, !dbg !12915
  %141 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv197, align 8, !dbg !12915
  %tobool198 = icmp ne %struct.bitmap_head_def* %141, null, !dbg !12913
  br i1 %tobool198, label %land.lhs.true199, label %if.end204, !dbg !12916

land.lhs.true199:                                 ; preds = %if.else196
  %142 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12917
  %equiv200 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %142, i32 0, i32 3, !dbg !12918
  %143 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv200, align 8, !dbg !12918
  %tobool201 = icmp ne %struct.bitmap_head_def* %143, null, !dbg !12917
  br i1 %tobool201, label %if.end204, label %if.then202, !dbg !12919

if.then202:                                       ; preds = %land.lhs.true199
  %144 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12920
  %equiv203 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %144, i32 0, i32 3, !dbg !12921
  %145 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv203, align 8, !dbg !12921
  call void @bitmap_clear(%struct.bitmap_head_def* %145), !dbg !12922
  br label %if.end204, !dbg !12922

if.end204:                                        ; preds = %if.then202, %land.lhs.true199, %if.else196
  br label %if.end205

if.end205:                                        ; preds = %if.end204, %if.then193
  br label %if.end207, !dbg !12923

if.else206:                                       ; preds = %land.lhs.true170, %land.lhs.true167, %if.then164
  br label %give_up, !dbg !12924

if.end207:                                        ; preds = %if.end205
  br label %if.end209, !dbg !12925

if.else208:                                       ; preds = %lor.lhs.false160
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 6245, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !12926
  br label %if.end209

if.end209:                                        ; preds = %if.else208, %if.end207
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %if.end155
  br label %if.end211

if.end211:                                        ; preds = %if.end210, %if.end101
  br label %if.end257, !dbg !12927

give_up:                                          ; preds = %if.else206, %if.else154, %if.then78, %if.else43, %if.else28
  call void @llvm.dbg.label(metadata !12928), !dbg !12929
  %146 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12930
  %call212 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %146), !dbg !12932
  %tobool213 = icmp ne i8 %call212, 0, !dbg !12932
  br i1 %tobool213, label %if.else256, label %land.lhs.true214, !dbg !12933

land.lhs.true214:                                 ; preds = %give_up
  %147 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12934
  %type215 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %147, i32 0, i32 0, !dbg !12935
  %148 = load i32, i32* %type215, align 8, !dbg !12935
  %cmp216 = icmp eq i32 %148, 1, !dbg !12936
  br i1 %cmp216, label %land.lhs.true218, label %lor.lhs.false221, !dbg !12937

land.lhs.true218:                                 ; preds = %land.lhs.true214
  %149 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12938
  %call219 = call zeroext i8 @range_includes_zero_p(%struct.value_range_d* %149), !dbg !12939
  %tobool220 = icmp ne i8 %call219, 0, !dbg !12939
  br i1 %tobool220, label %lor.lhs.false221, label %land.lhs.true229, !dbg !12940

lor.lhs.false221:                                 ; preds = %land.lhs.true218, %land.lhs.true214
  %150 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12941
  %type222 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %150, i32 0, i32 0, !dbg !12942
  %151 = load i32, i32* %type222, align 8, !dbg !12942
  %cmp223 = icmp eq i32 %151, 2, !dbg !12943
  br i1 %cmp223, label %land.lhs.true225, label %if.else256, !dbg !12944

land.lhs.true225:                                 ; preds = %lor.lhs.false221
  %152 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12945
  %call226 = call zeroext i8 @range_includes_zero_p(%struct.value_range_d* %152), !dbg !12946
  %conv227 = zext i8 %call226 to i32, !dbg !12946
  %tobool228 = icmp ne i32 %conv227, 0, !dbg !12946
  br i1 %tobool228, label %land.lhs.true229, label %if.else256, !dbg !12947

land.lhs.true229:                                 ; preds = %land.lhs.true225, %land.lhs.true218
  %153 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12948
  %call230 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %153), !dbg !12949
  %tobool231 = icmp ne i8 %call230, 0, !dbg !12949
  br i1 %tobool231, label %if.else256, label %land.lhs.true232, !dbg !12950

land.lhs.true232:                                 ; preds = %land.lhs.true229
  %154 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12951
  %type233 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %154, i32 0, i32 0, !dbg !12952
  %155 = load i32, i32* %type233, align 8, !dbg !12952
  %cmp234 = icmp eq i32 %155, 1, !dbg !12953
  br i1 %cmp234, label %land.lhs.true236, label %lor.lhs.false239, !dbg !12954

land.lhs.true236:                                 ; preds = %land.lhs.true232
  %156 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12955
  %call237 = call zeroext i8 @range_includes_zero_p(%struct.value_range_d* %156), !dbg !12956
  %tobool238 = icmp ne i8 %call237, 0, !dbg !12956
  br i1 %tobool238, label %lor.lhs.false239, label %if.then247, !dbg !12957

lor.lhs.false239:                                 ; preds = %land.lhs.true236, %land.lhs.true232
  %157 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12958
  %type240 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %157, i32 0, i32 0, !dbg !12959
  %158 = load i32, i32* %type240, align 8, !dbg !12959
  %cmp241 = icmp eq i32 %158, 2, !dbg !12960
  br i1 %cmp241, label %land.lhs.true243, label %if.else256, !dbg !12961

land.lhs.true243:                                 ; preds = %lor.lhs.false239
  %159 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !12962
  %call244 = call zeroext i8 @range_includes_zero_p(%struct.value_range_d* %159), !dbg !12963
  %conv245 = zext i8 %call244 to i32, !dbg !12963
  %tobool246 = icmp ne i32 %conv245, 0, !dbg !12963
  br i1 %tobool246, label %if.then247, label %if.else256, !dbg !12964

if.then247:                                       ; preds = %land.lhs.true243, %land.lhs.true236
  %160 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12965
  %161 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12967
  %min248 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %161, i32 0, i32 1, !dbg !12967
  %162 = load %union.tree_node*, %union.tree_node** %min248, align 8, !dbg !12967
  %common249 = bitcast %union.tree_node* %162 to %struct.tree_common*, !dbg !12967
  %type250 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common249, i32 0, i32 2, !dbg !12967
  %163 = load %union.tree_node*, %union.tree_node** %type250, align 8, !dbg !12967
  call void @set_value_range_to_nonnull(%struct.value_range_d* %160, %union.tree_node* %163), !dbg !12968
  %164 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12969
  %equiv251 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %164, i32 0, i32 3, !dbg !12971
  %165 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv251, align 8, !dbg !12971
  %tobool252 = icmp ne %struct.bitmap_head_def* %165, null, !dbg !12969
  br i1 %tobool252, label %if.then253, label %if.end255, !dbg !12972

if.then253:                                       ; preds = %if.then247
  %166 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12973
  %equiv254 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %166, i32 0, i32 3, !dbg !12974
  %167 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv254, align 8, !dbg !12974
  call void @bitmap_clear(%struct.bitmap_head_def* %167), !dbg !12975
  br label %if.end255, !dbg !12975

if.end255:                                        ; preds = %if.then253, %if.then247
  br label %if.end257, !dbg !12976

if.else256:                                       ; preds = %land.lhs.true243, %lor.lhs.false239, %land.lhs.true229, %land.lhs.true225, %lor.lhs.false221, %give_up
  %168 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !12977
  call void @set_value_range_to_varying(%struct.value_range_d* %168), !dbg !12978
  br label %if.end257

if.end257:                                        ; preds = %if.then, %if.then3, %if.then7, %if.then11, %if.end211, %if.else256, %if.end255
  ret void, !dbg !12979
}

declare dso_local void @bitmap_and_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, i8 zeroext %use_equiv_p, i8* %strict_overflow_p, i8* %only_ranges) #0 !dbg !12980 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %use_equiv_p.addr = alloca i8, align 1
  %strict_overflow_p.addr = alloca i8*, align 8
  %only_ranges.addr = alloca i8*, align 8
  %ret = alloca %union.tree_node*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !12983, metadata !DIExpression()), !dbg !12984
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !12985, metadata !DIExpression()), !dbg !12986
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !12987, metadata !DIExpression()), !dbg !12988
  store i8 %use_equiv_p, i8* %use_equiv_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %use_equiv_p.addr, metadata !12989, metadata !DIExpression()), !dbg !12990
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !12991, metadata !DIExpression()), !dbg !12992
  store i8* %only_ranges, i8** %only_ranges.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %only_ranges.addr, metadata !12993, metadata !DIExpression()), !dbg !12994
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !12995, metadata !DIExpression()), !dbg !12996
  %0 = load i8*, i8** %only_ranges.addr, align 8, !dbg !12997
  %tobool = icmp ne i8* %0, null, !dbg !12997
  br i1 %tobool, label %if.then, label %if.end, !dbg !12999

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %only_ranges.addr, align 8, !dbg !13000
  store i8 1, i8* %1, align 1, !dbg !13001
  br label %if.end, !dbg !13002

if.end:                                           ; preds = %if.then, %entry
  %2 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13003
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !13003
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13003
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13003
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !13003
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !13003
  %bf.load = load i64, i64* %4, align 8, !dbg !13003
  %bf.clear = and i64 %bf.load, 65535, !dbg !13003
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13003
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !13003
  br i1 %cmp, label %if.end32, label %lor.lhs.false, !dbg !13003

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13003
  %common1 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !13003
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !13003
  %6 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !13003
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !13003
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !13003
  %bf.load4 = load i64, i64* %7, align 8, !dbg !13003
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !13003
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !13003
  %cmp7 = icmp eq i32 %bf.cast6, 7, !dbg !13003
  br i1 %cmp7, label %if.end32, label %lor.lhs.false8, !dbg !13003

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13003
  %common9 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !13003
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !13003
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !13003
  %base11 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !13003
  %10 = bitcast %struct.tree_base* %base11 to i64*, !dbg !13003
  %bf.load12 = load i64, i64* %10, align 8, !dbg !13003
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !13003
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !13003
  %cmp15 = icmp eq i32 %bf.cast14, 8, !dbg !13003
  br i1 %cmp15, label %if.end32, label %land.lhs.true, !dbg !13005

land.lhs.true:                                    ; preds = %lor.lhs.false8
  %11 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13006
  %common16 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !13006
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !13006
  %12 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !13006
  %base18 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !13006
  %13 = bitcast %struct.tree_base* %base18 to i64*, !dbg !13006
  %bf.load19 = load i64, i64* %13, align 8, !dbg !13006
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !13006
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !13006
  %cmp22 = icmp eq i32 %bf.cast21, 10, !dbg !13006
  br i1 %cmp22, label %if.end32, label %lor.lhs.false23, !dbg !13006

lor.lhs.false23:                                  ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13006
  %common24 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !13006
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !13006
  %15 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !13006
  %base26 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !13006
  %16 = bitcast %struct.tree_base* %base26 to i64*, !dbg !13006
  %bf.load27 = load i64, i64* %16, align 8, !dbg !13006
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !13006
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !13006
  %cmp30 = icmp eq i32 %bf.cast29, 12, !dbg !13006
  br i1 %cmp30, label %if.end32, label %if.then31, !dbg !13007

if.then31:                                        ; preds = %lor.lhs.false23
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13008
  br label %return, !dbg !13008

if.end32:                                         ; preds = %lor.lhs.false23, %land.lhs.true, %lor.lhs.false8, %lor.lhs.false, %if.end
  %17 = load i8, i8* %use_equiv_p.addr, align 1, !dbg !13009
  %tobool33 = icmp ne i8 %17, 0, !dbg !13009
  br i1 %tobool33, label %if.then34, label %if.else72, !dbg !13011

if.then34:                                        ; preds = %if.end32
  %18 = load i8*, i8** %only_ranges.addr, align 8, !dbg !13012
  %tobool35 = icmp ne i8* %18, null, !dbg !13012
  br i1 %tobool35, label %land.lhs.true36, label %if.end39, !dbg !13015

land.lhs.true36:                                  ; preds = %if.then34
  %19 = load i32, i32* %code.addr, align 4, !dbg !13016
  %20 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13017
  %21 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !13018
  %22 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13019
  %call = call %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops_using_ranges(i32 %19, %union.tree_node* %20, %union.tree_node* %21, i8* %22), !dbg !13020
  store %union.tree_node* %call, %union.tree_node** %ret, align 8, !dbg !13021
  %tobool37 = icmp ne %union.tree_node* %call, null, !dbg !13021
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !13022

if.then38:                                        ; preds = %land.lhs.true36
  %23 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !13023
  store %union.tree_node* %23, %union.tree_node** %retval, align 8, !dbg !13024
  br label %return, !dbg !13024

if.end39:                                         ; preds = %land.lhs.true36, %if.then34
  %24 = load i8*, i8** %only_ranges.addr, align 8, !dbg !13025
  store i8 0, i8* %24, align 1, !dbg !13026
  %25 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13027
  %base40 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !13027
  %26 = bitcast %struct.tree_base* %base40 to i64*, !dbg !13027
  %bf.load41 = load i64, i64* %26, align 8, !dbg !13027
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !13027
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !13027
  %cmp44 = icmp eq i32 %bf.cast43, 141, !dbg !13029
  br i1 %cmp44, label %land.lhs.true45, label %if.else, !dbg !13030

land.lhs.true45:                                  ; preds = %if.end39
  %27 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !13031
  %base46 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !13031
  %28 = bitcast %struct.tree_base* %base46 to i64*, !dbg !13031
  %bf.load47 = load i64, i64* %28, align 8, !dbg !13031
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !13031
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !13031
  %cmp50 = icmp eq i32 %bf.cast49, 141, !dbg !13032
  br i1 %cmp50, label %if.then51, label %if.else, !dbg !13033

if.then51:                                        ; preds = %land.lhs.true45
  %29 = load i32, i32* %code.addr, align 4, !dbg !13034
  %30 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13035
  %31 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !13036
  %32 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13037
  %call52 = call %union.tree_node* @compare_names(i32 %29, %union.tree_node* %30, %union.tree_node* %31, i8* %32), !dbg !13038
  store %union.tree_node* %call52, %union.tree_node** %retval, align 8, !dbg !13039
  br label %return, !dbg !13039

if.else:                                          ; preds = %land.lhs.true45, %if.end39
  %33 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13040
  %base53 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !13040
  %34 = bitcast %struct.tree_base* %base53 to i64*, !dbg !13040
  %bf.load54 = load i64, i64* %34, align 8, !dbg !13040
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !13040
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !13040
  %cmp57 = icmp eq i32 %bf.cast56, 141, !dbg !13042
  br i1 %cmp57, label %if.then58, label %if.else60, !dbg !13043

if.then58:                                        ; preds = %if.else
  %35 = load i32, i32* %code.addr, align 4, !dbg !13044
  %36 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13045
  %37 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !13046
  %38 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13047
  %call59 = call %union.tree_node* @compare_name_with_value(i32 %35, %union.tree_node* %36, %union.tree_node* %37, i8* %38), !dbg !13048
  store %union.tree_node* %call59, %union.tree_node** %retval, align 8, !dbg !13049
  br label %return, !dbg !13049

if.else60:                                        ; preds = %if.else
  %39 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !13050
  %base61 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !13050
  %40 = bitcast %struct.tree_base* %base61 to i64*, !dbg !13050
  %bf.load62 = load i64, i64* %40, align 8, !dbg !13050
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !13050
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !13050
  %cmp65 = icmp eq i32 %bf.cast64, 141, !dbg !13052
  br i1 %cmp65, label %if.then66, label %if.end69, !dbg !13053

if.then66:                                        ; preds = %if.else60
  %41 = load i32, i32* %code.addr, align 4, !dbg !13054
  %call67 = call i32 @swap_tree_comparison(i32 %41), !dbg !13055
  %42 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !13056
  %43 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13057
  %44 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13058
  %call68 = call %union.tree_node* @compare_name_with_value(i32 %call67, %union.tree_node* %42, %union.tree_node* %43, i8* %44), !dbg !13059
  store %union.tree_node* %call68, %union.tree_node** %retval, align 8, !dbg !13060
  br label %return, !dbg !13060

if.end69:                                         ; preds = %if.else60
  br label %if.end70

if.end70:                                         ; preds = %if.end69
  br label %if.end71

if.end71:                                         ; preds = %if.end70
  br label %if.end74, !dbg !13061

if.else72:                                        ; preds = %if.end32
  %45 = load i32, i32* %code.addr, align 4, !dbg !13062
  %46 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13063
  %47 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !13064
  %48 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13065
  %call73 = call %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops_using_ranges(i32 %45, %union.tree_node* %46, %union.tree_node* %47, i8* %48), !dbg !13066
  store %union.tree_node* %call73, %union.tree_node** %retval, align 8, !dbg !13067
  br label %return, !dbg !13067

if.end74:                                         ; preds = %if.end71
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13068
  br label %return, !dbg !13068

return:                                           ; preds = %if.end74, %if.else72, %if.then66, %if.then58, %if.then51, %if.then38, %if.then31
  %49 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13069
  ret %union.tree_node* %49, !dbg !13069
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops_using_ranges(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, i8* %strict_overflow_p) #0 !dbg !13070 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  %vr0 = alloca %struct.value_range_d*, align 8
  %vr1 = alloca %struct.value_range_d*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !13071, metadata !DIExpression()), !dbg !13072
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !13073, metadata !DIExpression()), !dbg !13074
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !13075, metadata !DIExpression()), !dbg !13076
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !13077, metadata !DIExpression()), !dbg !13078
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr0, metadata !13079, metadata !DIExpression()), !dbg !13080
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr1, metadata !13081, metadata !DIExpression()), !dbg !13082
  %0 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13083
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !13083
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !13083
  %bf.load = load i64, i64* %1, align 8, !dbg !13083
  %bf.clear = and i64 %bf.load, 65535, !dbg !13083
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13083
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !13084
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !13085

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13086
  %call = call %struct.value_range_d* @get_value_range(%union.tree_node* %2), !dbg !13087
  br label %cond.end, !dbg !13085

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13085

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.value_range_d* [ %call, %cond.true ], [ null, %cond.false ], !dbg !13085
  store %struct.value_range_d* %cond, %struct.value_range_d** %vr0, align 8, !dbg !13088
  %3 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !13089
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !13089
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !13089
  %bf.load2 = load i64, i64* %4, align 8, !dbg !13089
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !13089
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !13089
  %cmp5 = icmp eq i32 %bf.cast4, 141, !dbg !13090
  br i1 %cmp5, label %cond.true6, label %cond.false8, !dbg !13091

cond.true6:                                       ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !13092
  %call7 = call %struct.value_range_d* @get_value_range(%union.tree_node* %5), !dbg !13093
  br label %cond.end9, !dbg !13091

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !13091

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.value_range_d* [ %call7, %cond.true6 ], [ null, %cond.false8 ], !dbg !13091
  store %struct.value_range_d* %cond10, %struct.value_range_d** %vr1, align 8, !dbg !13094
  %6 = load %struct.value_range_d*, %struct.value_range_d** %vr0, align 8, !dbg !13095
  %tobool = icmp ne %struct.value_range_d* %6, null, !dbg !13095
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !13097

land.lhs.true:                                    ; preds = %cond.end9
  %7 = load %struct.value_range_d*, %struct.value_range_d** %vr1, align 8, !dbg !13098
  %tobool11 = icmp ne %struct.value_range_d* %7, null, !dbg !13098
  br i1 %tobool11, label %if.then, label %if.else, !dbg !13099

if.then:                                          ; preds = %land.lhs.true
  %8 = load i32, i32* %code.addr, align 4, !dbg !13100
  %9 = load %struct.value_range_d*, %struct.value_range_d** %vr0, align 8, !dbg !13101
  %10 = load %struct.value_range_d*, %struct.value_range_d** %vr1, align 8, !dbg !13102
  %11 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13103
  %call12 = call %union.tree_node* @compare_ranges(i32 %8, %struct.value_range_d* %9, %struct.value_range_d* %10, i8* %11), !dbg !13104
  store %union.tree_node* %call12, %union.tree_node** %retval, align 8, !dbg !13105
  br label %return, !dbg !13105

if.else:                                          ; preds = %land.lhs.true, %cond.end9
  %12 = load %struct.value_range_d*, %struct.value_range_d** %vr0, align 8, !dbg !13106
  %tobool13 = icmp ne %struct.value_range_d* %12, null, !dbg !13106
  br i1 %tobool13, label %land.lhs.true14, label %if.else18, !dbg !13108

land.lhs.true14:                                  ; preds = %if.else
  %13 = load %struct.value_range_d*, %struct.value_range_d** %vr1, align 8, !dbg !13109
  %cmp15 = icmp eq %struct.value_range_d* %13, null, !dbg !13110
  br i1 %cmp15, label %if.then16, label %if.else18, !dbg !13111

if.then16:                                        ; preds = %land.lhs.true14
  %14 = load i32, i32* %code.addr, align 4, !dbg !13112
  %15 = load %struct.value_range_d*, %struct.value_range_d** %vr0, align 8, !dbg !13113
  %16 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !13114
  %17 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13115
  %call17 = call %union.tree_node* @compare_range_with_value(i32 %14, %struct.value_range_d* %15, %union.tree_node* %16, i8* %17), !dbg !13116
  store %union.tree_node* %call17, %union.tree_node** %retval, align 8, !dbg !13117
  br label %return, !dbg !13117

if.else18:                                        ; preds = %land.lhs.true14, %if.else
  %18 = load %struct.value_range_d*, %struct.value_range_d** %vr0, align 8, !dbg !13118
  %cmp19 = icmp eq %struct.value_range_d* %18, null, !dbg !13120
  br i1 %cmp19, label %land.lhs.true20, label %if.end, !dbg !13121

land.lhs.true20:                                  ; preds = %if.else18
  %19 = load %struct.value_range_d*, %struct.value_range_d** %vr1, align 8, !dbg !13122
  %tobool21 = icmp ne %struct.value_range_d* %19, null, !dbg !13122
  br i1 %tobool21, label %if.then22, label %if.end, !dbg !13123

if.then22:                                        ; preds = %land.lhs.true20
  %20 = load i32, i32* %code.addr, align 4, !dbg !13124
  %call23 = call i32 @swap_tree_comparison(i32 %20), !dbg !13125
  %21 = load %struct.value_range_d*, %struct.value_range_d** %vr1, align 8, !dbg !13126
  %22 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !13127
  %23 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13128
  %call24 = call %union.tree_node* @compare_range_with_value(i32 %call23, %struct.value_range_d* %21, %union.tree_node* %22, i8* %23), !dbg !13129
  store %union.tree_node* %call24, %union.tree_node** %retval, align 8, !dbg !13130
  br label %return, !dbg !13130

if.end:                                           ; preds = %land.lhs.true20, %if.else18
  br label %if.end25

if.end25:                                         ; preds = %if.end
  br label %if.end26

if.end26:                                         ; preds = %if.end25
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13131
  br label %return, !dbg !13131

return:                                           ; preds = %if.end26, %if.then22, %if.then16, %if.then
  %24 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13132
  ret %union.tree_node* %24, !dbg !13132
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @compare_names(i32 %comp, %union.tree_node* %n1, %union.tree_node* %n2, i8* %strict_overflow_p) #0 !dbg !3236 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %comp.addr = alloca i32, align 4
  %n1.addr = alloca %union.tree_node*, align 8
  %n2.addr = alloca %union.tree_node*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  %retval1 = alloca %union.tree_node*, align 8
  %e1 = alloca %struct.bitmap_head_def*, align 8
  %e2 = alloca %struct.bitmap_head_def*, align 8
  %bi1 = alloca %struct.bitmap_iterator, align 8
  %bi2 = alloca %struct.bitmap_iterator, align 8
  %i1 = alloca i32, align 4
  %i2 = alloca i32, align 4
  %used_strict_overflow = alloca i32, align 4
  %vr1 = alloca %struct.value_range_d, align 8
  %sop = alloca i8, align 1
  %vr2 = alloca %struct.value_range_d, align 8
  store i32 %comp, i32* %comp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %comp.addr, metadata !13133, metadata !DIExpression()), !dbg !13134
  store %union.tree_node* %n1, %union.tree_node** %n1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %n1.addr, metadata !13135, metadata !DIExpression()), !dbg !13136
  store %union.tree_node* %n2, %union.tree_node** %n2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %n2.addr, metadata !13137, metadata !DIExpression()), !dbg !13138
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !13139, metadata !DIExpression()), !dbg !13140
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !13141, metadata !DIExpression()), !dbg !13142
  call void @llvm.dbg.declare(metadata %union.tree_node** %retval1, metadata !13143, metadata !DIExpression()), !dbg !13144
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %e1, metadata !13145, metadata !DIExpression()), !dbg !13146
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %e2, metadata !13147, metadata !DIExpression()), !dbg !13148
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi1, metadata !13149, metadata !DIExpression()), !dbg !13150
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi2, metadata !13151, metadata !DIExpression()), !dbg !13152
  call void @llvm.dbg.declare(metadata i32* %i1, metadata !13153, metadata !DIExpression()), !dbg !13154
  call void @llvm.dbg.declare(metadata i32* %i2, metadata !13155, metadata !DIExpression()), !dbg !13156
  call void @llvm.dbg.declare(metadata i32* %used_strict_overflow, metadata !13157, metadata !DIExpression()), !dbg !13158
  %0 = load %union.tree_node*, %union.tree_node** %n1.addr, align 8, !dbg !13159
  %call = call %struct.value_range_d* @get_value_range(%union.tree_node* %0), !dbg !13160
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call, i32 0, i32 3, !dbg !13161
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !13161
  store %struct.bitmap_head_def* %1, %struct.bitmap_head_def** %e1, align 8, !dbg !13162
  %2 = load %union.tree_node*, %union.tree_node** %n2.addr, align 8, !dbg !13163
  %call2 = call %struct.value_range_d* @get_value_range(%union.tree_node* %2), !dbg !13164
  %equiv3 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call2, i32 0, i32 3, !dbg !13165
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv3, align 8, !dbg !13165
  store %struct.bitmap_head_def* %3, %struct.bitmap_head_def** %e2, align 8, !dbg !13166
  %4 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** @compare_names.s_obstack, align 8, !dbg !13167
  %cmp = icmp eq %struct.bitmap_obstack* %4, null, !dbg !13169
  br i1 %cmp, label %if.then, label %if.end, !dbg !13170

if.then:                                          ; preds = %entry
  %call4 = call i8* @xmalloc(i64 104), !dbg !13171
  %5 = bitcast i8* %call4 to %struct.bitmap_obstack*, !dbg !13171
  store %struct.bitmap_obstack* %5, %struct.bitmap_obstack** @compare_names.s_obstack, align 8, !dbg !13173
  %6 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** @compare_names.s_obstack, align 8, !dbg !13174
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* %6), !dbg !13175
  %7 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** @compare_names.s_obstack, align 8, !dbg !13176
  %call5 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* %7), !dbg !13176
  store %struct.bitmap_head_def* %call5, %struct.bitmap_head_def** @compare_names.s_e1, align 8, !dbg !13177
  %8 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** @compare_names.s_obstack, align 8, !dbg !13178
  %call6 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* %8), !dbg !13178
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** @compare_names.s_e2, align 8, !dbg !13179
  br label %if.end, !dbg !13180

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e1, align 8, !dbg !13181
  %cmp7 = icmp eq %struct.bitmap_head_def* %9, null, !dbg !13183
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !13184

if.then8:                                         ; preds = %if.end
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @compare_names.s_e1, align 8, !dbg !13185
  store %struct.bitmap_head_def* %10, %struct.bitmap_head_def** %e1, align 8, !dbg !13186
  br label %if.end9, !dbg !13187

if.end9:                                          ; preds = %if.then8, %if.end
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e2, align 8, !dbg !13188
  %cmp10 = icmp eq %struct.bitmap_head_def* %11, null, !dbg !13190
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !13191

if.then11:                                        ; preds = %if.end9
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @compare_names.s_e2, align 8, !dbg !13192
  store %struct.bitmap_head_def* %12, %struct.bitmap_head_def** %e2, align 8, !dbg !13193
  br label %if.end12, !dbg !13194

if.end12:                                         ; preds = %if.then11, %if.end9
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e1, align 8, !dbg !13195
  %14 = load %union.tree_node*, %union.tree_node** %n1.addr, align 8, !dbg !13196
  %ssa_name = bitcast %union.tree_node* %14 to %struct.tree_ssa_name*, !dbg !13196
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !13196
  %15 = load i32, i32* %version, align 8, !dbg !13196
  %call13 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %13, i32 %15), !dbg !13197
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e2, align 8, !dbg !13198
  %17 = load %union.tree_node*, %union.tree_node** %n2.addr, align 8, !dbg !13199
  %ssa_name14 = bitcast %union.tree_node* %17 to %struct.tree_ssa_name*, !dbg !13199
  %version15 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name14, i32 0, i32 3, !dbg !13199
  %18 = load i32, i32* %version15, align 8, !dbg !13199
  %call16 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %16, i32 %18), !dbg !13200
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e1, align 8, !dbg !13201
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e2, align 8, !dbg !13203
  %call17 = call zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def* %19, %struct.bitmap_head_def* %20), !dbg !13204
  %tobool = icmp ne i8 %call17, 0, !dbg !13204
  br i1 %tobool, label %if.then18, label %if.end29, !dbg !13205

if.then18:                                        ; preds = %if.end12
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e1, align 8, !dbg !13206
  %22 = load %union.tree_node*, %union.tree_node** %n1.addr, align 8, !dbg !13208
  %ssa_name19 = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !13208
  %version20 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name19, i32 0, i32 3, !dbg !13208
  %23 = load i32, i32* %version20, align 8, !dbg !13208
  %call21 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %21, i32 %23), !dbg !13209
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e2, align 8, !dbg !13210
  %25 = load %union.tree_node*, %union.tree_node** %n2.addr, align 8, !dbg !13211
  %ssa_name22 = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !13211
  %version23 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name22, i32 0, i32 3, !dbg !13211
  %26 = load i32, i32* %version23, align 8, !dbg !13211
  %call24 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %24, i32 %26), !dbg !13212
  %27 = load i32, i32* %comp.addr, align 4, !dbg !13213
  %cmp25 = icmp eq i32 %27, 101, !dbg !13214
  br i1 %cmp25, label %cond.true, label %lor.lhs.false, !dbg !13215

lor.lhs.false:                                    ; preds = %if.then18
  %28 = load i32, i32* %comp.addr, align 4, !dbg !13216
  %cmp26 = icmp eq i32 %28, 100, !dbg !13217
  br i1 %cmp26, label %cond.true, label %lor.lhs.false27, !dbg !13218

lor.lhs.false27:                                  ; preds = %lor.lhs.false
  %29 = load i32, i32* %comp.addr, align 4, !dbg !13219
  %cmp28 = icmp eq i32 %29, 98, !dbg !13220
  br i1 %cmp28, label %cond.true, label %cond.false, !dbg !13221

cond.true:                                        ; preds = %lor.lhs.false27, %lor.lhs.false, %if.then18
  %30 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !13222
  br label %cond.end, !dbg !13221

cond.false:                                       ; preds = %lor.lhs.false27
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !13223
  br label %cond.end, !dbg !13221

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %30, %cond.true ], [ %31, %cond.false ], !dbg !13221
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !13224
  br label %return, !dbg !13224

if.end29:                                         ; preds = %if.end12
  store i32 -1, i32* %used_strict_overflow, align 4, !dbg !13225
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e1, align 8, !dbg !13226
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi1, %struct.bitmap_head_def* %32, i32 0, i32* %i1), !dbg !13226
  br label %for.cond, !dbg !13226

for.cond:                                         ; preds = %for.inc68, %if.end29
  %call30 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi1, i32* %i1), !dbg !13228
  %tobool31 = icmp ne i8 %call30, 0, !dbg !13226
  br i1 %tobool31, label %for.body, label %for.end69, !dbg !13226

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %vr1, metadata !13230, metadata !DIExpression()), !dbg !13232
  %33 = load i32, i32* %i1, align 4, !dbg !13233
  call void @get_vr_for_comparison(%struct.value_range_d* sret %vr1, i32 %33), !dbg !13234
  store %union.tree_node* null, %union.tree_node** %retval1, align 8, !dbg !13235
  store %union.tree_node* null, %union.tree_node** %t, align 8, !dbg !13236
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e2, align 8, !dbg !13237
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi2, %struct.bitmap_head_def* %34, i32 0, i32* %i2), !dbg !13237
  br label %for.cond32, !dbg !13237

for.cond32:                                       ; preds = %for.inc, %for.body
  %call33 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi2, i32* %i2), !dbg !13239
  %tobool34 = icmp ne i8 %call33, 0, !dbg !13237
  br i1 %tobool34, label %for.body35, label %for.end, !dbg !13237

for.body35:                                       ; preds = %for.cond32
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !13241, metadata !DIExpression()), !dbg !13243
  store i8 0, i8* %sop, align 1, !dbg !13243
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %vr2, metadata !13244, metadata !DIExpression()), !dbg !13245
  %35 = load i32, i32* %i2, align 4, !dbg !13246
  call void @get_vr_for_comparison(%struct.value_range_d* sret %vr2, i32 %35), !dbg !13247
  %36 = load i32, i32* %comp.addr, align 4, !dbg !13248
  %call36 = call %union.tree_node* @compare_ranges(i32 %36, %struct.value_range_d* %vr1, %struct.value_range_d* %vr2, i8* %sop), !dbg !13249
  store %union.tree_node* %call36, %union.tree_node** %t, align 8, !dbg !13250
  %37 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13251
  %tobool37 = icmp ne %union.tree_node* %37, null, !dbg !13251
  br i1 %tobool37, label %if.then38, label %if.end55, !dbg !13253

if.then38:                                        ; preds = %for.body35
  %38 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13254
  %cmp39 = icmp ne %union.tree_node* %38, null, !dbg !13257
  br i1 %cmp39, label %land.lhs.true, label %if.end48, !dbg !13258

land.lhs.true:                                    ; preds = %if.then38
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13259
  %40 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13260
  %cmp40 = icmp ne %union.tree_node* %39, %40, !dbg !13261
  br i1 %cmp40, label %if.then41, label %if.end48, !dbg !13262

if.then41:                                        ; preds = %land.lhs.true
  %41 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e1, align 8, !dbg !13263
  %42 = load %union.tree_node*, %union.tree_node** %n1.addr, align 8, !dbg !13265
  %ssa_name42 = bitcast %union.tree_node* %42 to %struct.tree_ssa_name*, !dbg !13265
  %version43 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name42, i32 0, i32 3, !dbg !13265
  %43 = load i32, i32* %version43, align 8, !dbg !13265
  %call44 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %41, i32 %43), !dbg !13266
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e2, align 8, !dbg !13267
  %45 = load %union.tree_node*, %union.tree_node** %n2.addr, align 8, !dbg !13268
  %ssa_name45 = bitcast %union.tree_node* %45 to %struct.tree_ssa_name*, !dbg !13268
  %version46 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name45, i32 0, i32 3, !dbg !13268
  %46 = load i32, i32* %version46, align 8, !dbg !13268
  %call47 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %44, i32 %46), !dbg !13269
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13270
  br label %return, !dbg !13270

if.end48:                                         ; preds = %land.lhs.true, %if.then38
  %47 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13271
  store %union.tree_node* %47, %union.tree_node** %retval1, align 8, !dbg !13272
  %48 = load i8, i8* %sop, align 1, !dbg !13273
  %tobool49 = icmp ne i8 %48, 0, !dbg !13273
  br i1 %tobool49, label %if.else, label %if.then50, !dbg !13275

if.then50:                                        ; preds = %if.end48
  store i32 0, i32* %used_strict_overflow, align 4, !dbg !13276
  br label %if.end54, !dbg !13277

if.else:                                          ; preds = %if.end48
  %49 = load i32, i32* %used_strict_overflow, align 4, !dbg !13278
  %cmp51 = icmp slt i32 %49, 0, !dbg !13280
  br i1 %cmp51, label %if.then52, label %if.end53, !dbg !13281

if.then52:                                        ; preds = %if.else
  store i32 1, i32* %used_strict_overflow, align 4, !dbg !13282
  br label %if.end53, !dbg !13283

if.end53:                                         ; preds = %if.then52, %if.else
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then50
  br label %if.end55, !dbg !13284

if.end55:                                         ; preds = %if.end54, %for.body35
  br label %for.inc, !dbg !13285

for.inc:                                          ; preds = %if.end55
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi2, i32* %i2), !dbg !13239
  br label %for.cond32, !dbg !13239, !llvm.loop !13286

for.end:                                          ; preds = %for.cond32
  %50 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13288
  %tobool56 = icmp ne %union.tree_node* %50, null, !dbg !13288
  br i1 %tobool56, label %if.then57, label %if.end67, !dbg !13290

if.then57:                                        ; preds = %for.end
  %51 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e1, align 8, !dbg !13291
  %52 = load %union.tree_node*, %union.tree_node** %n1.addr, align 8, !dbg !13293
  %ssa_name58 = bitcast %union.tree_node* %52 to %struct.tree_ssa_name*, !dbg !13293
  %version59 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name58, i32 0, i32 3, !dbg !13293
  %53 = load i32, i32* %version59, align 8, !dbg !13293
  %call60 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %51, i32 %53), !dbg !13294
  %54 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e2, align 8, !dbg !13295
  %55 = load %union.tree_node*, %union.tree_node** %n2.addr, align 8, !dbg !13296
  %ssa_name61 = bitcast %union.tree_node* %55 to %struct.tree_ssa_name*, !dbg !13296
  %version62 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name61, i32 0, i32 3, !dbg !13296
  %56 = load i32, i32* %version62, align 8, !dbg !13296
  %call63 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %54, i32 %56), !dbg !13297
  %57 = load i32, i32* %used_strict_overflow, align 4, !dbg !13298
  %cmp64 = icmp sgt i32 %57, 0, !dbg !13300
  br i1 %cmp64, label %if.then65, label %if.end66, !dbg !13301

if.then65:                                        ; preds = %if.then57
  %58 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13302
  store i8 1, i8* %58, align 1, !dbg !13303
  br label %if.end66, !dbg !13304

if.end66:                                         ; preds = %if.then65, %if.then57
  %59 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13305
  store %union.tree_node* %59, %union.tree_node** %retval, align 8, !dbg !13306
  br label %return, !dbg !13306

if.end67:                                         ; preds = %for.end
  br label %for.inc68, !dbg !13307

for.inc68:                                        ; preds = %if.end67
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi1, i32* %i1), !dbg !13228
  br label %for.cond, !dbg !13228, !llvm.loop !13308

for.end69:                                        ; preds = %for.cond
  %60 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e1, align 8, !dbg !13310
  %61 = load %union.tree_node*, %union.tree_node** %n1.addr, align 8, !dbg !13311
  %ssa_name70 = bitcast %union.tree_node* %61 to %struct.tree_ssa_name*, !dbg !13311
  %version71 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name70, i32 0, i32 3, !dbg !13311
  %62 = load i32, i32* %version71, align 8, !dbg !13311
  %call72 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %60, i32 %62), !dbg !13312
  %63 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e2, align 8, !dbg !13313
  %64 = load %union.tree_node*, %union.tree_node** %n2.addr, align 8, !dbg !13314
  %ssa_name73 = bitcast %union.tree_node* %64 to %struct.tree_ssa_name*, !dbg !13314
  %version74 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name73, i32 0, i32 3, !dbg !13314
  %65 = load i32, i32* %version74, align 8, !dbg !13314
  %call75 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %63, i32 %65), !dbg !13315
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13316
  br label %return, !dbg !13316

return:                                           ; preds = %for.end69, %if.end66, %if.then41, %cond.end
  %66 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13317
  ret %union.tree_node* %66, !dbg !13317
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @compare_name_with_value(i32 %comp, %union.tree_node* %var, %union.tree_node* %val, i8* %strict_overflow_p) #0 !dbg !13318 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %comp.addr = alloca i32, align 4
  %var.addr = alloca %union.tree_node*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %e = alloca %struct.bitmap_head_def*, align 8
  %retval1 = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %used_strict_overflow = alloca i32, align 4
  %sop = alloca i8, align 1
  %equiv_vr = alloca %struct.value_range_d, align 8
  %tmp = alloca %struct.value_range_d, align 8
  %tmp14 = alloca %struct.value_range_d, align 8
  store i32 %comp, i32* %comp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %comp.addr, metadata !13319, metadata !DIExpression()), !dbg !13320
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !13321, metadata !DIExpression()), !dbg !13322
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !13323, metadata !DIExpression()), !dbg !13324
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !13325, metadata !DIExpression()), !dbg !13326
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13327, metadata !DIExpression()), !dbg !13328
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13329, metadata !DIExpression()), !dbg !13330
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %e, metadata !13331, metadata !DIExpression()), !dbg !13332
  call void @llvm.dbg.declare(metadata %union.tree_node** %retval1, metadata !13333, metadata !DIExpression()), !dbg !13334
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !13335, metadata !DIExpression()), !dbg !13336
  call void @llvm.dbg.declare(metadata i32* %used_strict_overflow, metadata !13337, metadata !DIExpression()), !dbg !13338
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !13339, metadata !DIExpression()), !dbg !13340
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %equiv_vr, metadata !13341, metadata !DIExpression()), !dbg !13342
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !13343
  %call = call %struct.value_range_d* @get_value_range(%union.tree_node* %0), !dbg !13344
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call, i32 0, i32 3, !dbg !13345
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !13345
  store %struct.bitmap_head_def* %1, %struct.bitmap_head_def** %e, align 8, !dbg !13346
  store i32 -1, i32* %used_strict_overflow, align 4, !dbg !13347
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !13348
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !13348
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !13348
  %3 = load i32, i32* %version, align 8, !dbg !13348
  call void @get_vr_for_comparison(%struct.value_range_d* sret %tmp, i32 %3), !dbg !13349
  %4 = bitcast %struct.value_range_d* %equiv_vr to i8*, !dbg !13349
  %5 = bitcast %struct.value_range_d* %tmp to i8*, !dbg !13349
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 32, i1 false), !dbg !13349
  store i8 0, i8* %sop, align 1, !dbg !13350
  %6 = load i32, i32* %comp.addr, align 4, !dbg !13351
  %7 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !13352
  %call2 = call %union.tree_node* @compare_range_with_value(i32 %6, %struct.value_range_d* %equiv_vr, %union.tree_node* %7, i8* %sop), !dbg !13353
  store %union.tree_node* %call2, %union.tree_node** %retval1, align 8, !dbg !13354
  %8 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13355
  %tobool = icmp ne %union.tree_node* %8, null, !dbg !13355
  br i1 %tobool, label %if.then, label %if.end, !dbg !13357

if.then:                                          ; preds = %entry
  %9 = load i8, i8* %sop, align 1, !dbg !13358
  %conv = zext i8 %9 to i32, !dbg !13358
  %tobool3 = icmp ne i32 %conv, 0, !dbg !13358
  %10 = zext i1 %tobool3 to i64, !dbg !13358
  %cond = select i1 %tobool3, i32 1, i32 0, !dbg !13358
  store i32 %cond, i32* %used_strict_overflow, align 4, !dbg !13359
  br label %if.end, !dbg !13360

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e, align 8, !dbg !13361
  %cmp = icmp eq %struct.bitmap_head_def* %11, null, !dbg !13363
  br i1 %cmp, label %if.then5, label %if.end11, !dbg !13364

if.then5:                                         ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13365
  %tobool6 = icmp ne %union.tree_node* %12, null, !dbg !13365
  br i1 %tobool6, label %land.lhs.true, label %if.end10, !dbg !13368

land.lhs.true:                                    ; preds = %if.then5
  %13 = load i32, i32* %used_strict_overflow, align 4, !dbg !13369
  %cmp7 = icmp sgt i32 %13, 0, !dbg !13370
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !13371

if.then9:                                         ; preds = %land.lhs.true
  %14 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13372
  store i8 1, i8* %14, align 1, !dbg !13373
  br label %if.end10, !dbg !13374

if.end10:                                         ; preds = %if.then9, %land.lhs.true, %if.then5
  %15 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13375
  store %union.tree_node* %15, %union.tree_node** %retval, align 8, !dbg !13376
  br label %return, !dbg !13376

if.end11:                                         ; preds = %if.end
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %e, align 8, !dbg !13377
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %16, i32 0, i32* %i), !dbg !13377
  br label %for.cond, !dbg !13377

for.cond:                                         ; preds = %for.inc, %if.end11
  %call12 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !13379
  %tobool13 = icmp ne i8 %call12, 0, !dbg !13377
  br i1 %tobool13, label %for.body, label %for.end, !dbg !13377

for.body:                                         ; preds = %for.cond
  %17 = load i32, i32* %i, align 4, !dbg !13381
  call void @get_vr_for_comparison(%struct.value_range_d* sret %tmp14, i32 %17), !dbg !13383
  %18 = bitcast %struct.value_range_d* %equiv_vr to i8*, !dbg !13383
  %19 = bitcast %struct.value_range_d* %tmp14 to i8*, !dbg !13383
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 32, i1 false), !dbg !13383
  store i8 0, i8* %sop, align 1, !dbg !13384
  %20 = load i32, i32* %comp.addr, align 4, !dbg !13385
  %21 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !13386
  %call15 = call %union.tree_node* @compare_range_with_value(i32 %20, %struct.value_range_d* %equiv_vr, %union.tree_node* %21, i8* %sop), !dbg !13387
  store %union.tree_node* %call15, %union.tree_node** %t, align 8, !dbg !13388
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13389
  %tobool16 = icmp ne %union.tree_node* %22, null, !dbg !13389
  br i1 %tobool16, label %if.then17, label %if.end32, !dbg !13391

if.then17:                                        ; preds = %for.body
  %23 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13392
  %cmp18 = icmp ne %union.tree_node* %23, null, !dbg !13395
  br i1 %cmp18, label %land.lhs.true20, label %if.end24, !dbg !13396

land.lhs.true20:                                  ; preds = %if.then17
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13397
  %25 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13398
  %cmp21 = icmp ne %union.tree_node* %24, %25, !dbg !13399
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !13400

if.then23:                                        ; preds = %land.lhs.true20
  store %union.tree_node* null, %union.tree_node** %retval1, align 8, !dbg !13401
  br label %for.end, !dbg !13403

if.end24:                                         ; preds = %land.lhs.true20, %if.then17
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13404
  store %union.tree_node* %26, %union.tree_node** %retval1, align 8, !dbg !13405
  %27 = load i8, i8* %sop, align 1, !dbg !13406
  %tobool25 = icmp ne i8 %27, 0, !dbg !13406
  br i1 %tobool25, label %if.else, label %if.then26, !dbg !13408

if.then26:                                        ; preds = %if.end24
  store i32 0, i32* %used_strict_overflow, align 4, !dbg !13409
  br label %if.end31, !dbg !13410

if.else:                                          ; preds = %if.end24
  %28 = load i32, i32* %used_strict_overflow, align 4, !dbg !13411
  %cmp27 = icmp slt i32 %28, 0, !dbg !13413
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !13414

if.then29:                                        ; preds = %if.else
  store i32 1, i32* %used_strict_overflow, align 4, !dbg !13415
  br label %if.end30, !dbg !13416

if.end30:                                         ; preds = %if.then29, %if.else
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then26
  br label %if.end32, !dbg !13417

if.end32:                                         ; preds = %if.end31, %for.body
  br label %for.inc, !dbg !13418

for.inc:                                          ; preds = %if.end32
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !13379
  br label %for.cond, !dbg !13379, !llvm.loop !13419

for.end:                                          ; preds = %if.then23, %for.cond
  %29 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13421
  %tobool33 = icmp ne %union.tree_node* %29, null, !dbg !13421
  br i1 %tobool33, label %land.lhs.true34, label %if.end38, !dbg !13423

land.lhs.true34:                                  ; preds = %for.end
  %30 = load i32, i32* %used_strict_overflow, align 4, !dbg !13424
  %cmp35 = icmp sgt i32 %30, 0, !dbg !13425
  br i1 %cmp35, label %if.then37, label %if.end38, !dbg !13426

if.then37:                                        ; preds = %land.lhs.true34
  %31 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13427
  store i8 1, i8* %31, align 1, !dbg !13428
  br label %if.end38, !dbg !13429

if.end38:                                         ; preds = %if.then37, %land.lhs.true34, %for.end
  %32 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !13430
  store %union.tree_node* %32, %union.tree_node** %retval, align 8, !dbg !13431
  br label %return, !dbg !13431

return:                                           ; preds = %if.end38, %if.end10
  %33 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13432
  ret %union.tree_node* %33, !dbg !13432
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @compare_ranges(i32 %comp, %struct.value_range_d* %vr0, %struct.value_range_d* %vr1, i8* %strict_overflow_p) #0 !dbg !13433 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %comp.addr = alloca i32, align 4
  %vr0.addr = alloca %struct.value_range_d*, align 8
  %vr1.addr = alloca %struct.value_range_d*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  %tmp = alloca %struct.value_range_d*, align 8
  %tmp61 = alloca %struct.value_range_d*, align 8
  %cmp_min = alloca i32, align 4
  %cmp_max = alloca i32, align 4
  %cmp1 = alloca i32, align 4
  %cmp2109 = alloca i32, align 4
  %tst = alloca i32, align 4
  store i32 %comp, i32* %comp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %comp.addr, metadata !13436, metadata !DIExpression()), !dbg !13437
  store %struct.value_range_d* %vr0, %struct.value_range_d** %vr0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr0.addr, metadata !13438, metadata !DIExpression()), !dbg !13439
  store %struct.value_range_d* %vr1, %struct.value_range_d** %vr1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr1.addr, metadata !13440, metadata !DIExpression()), !dbg !13441
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !13442, metadata !DIExpression()), !dbg !13443
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13444
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 0, !dbg !13446
  %1 = load i32, i32* %type, align 8, !dbg !13446
  %cmp = icmp eq i32 %1, 3, !dbg !13447
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !13448

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13449
  %type1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 0, !dbg !13450
  %3 = load i32, i32* %type1, align 8, !dbg !13450
  %cmp2 = icmp eq i32 %3, 0, !dbg !13451
  br i1 %cmp2, label %if.then, label %lor.lhs.false3, !dbg !13452

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13453
  %type4 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %4, i32 0, i32 0, !dbg !13454
  %5 = load i32, i32* %type4, align 8, !dbg !13454
  %cmp5 = icmp eq i32 %5, 3, !dbg !13455
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !13456

lor.lhs.false6:                                   ; preds = %lor.lhs.false3
  %6 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13457
  %type7 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %6, i32 0, i32 0, !dbg !13458
  %7 = load i32, i32* %type7, align 8, !dbg !13458
  %cmp8 = icmp eq i32 %7, 0, !dbg !13459
  br i1 %cmp8, label %if.then, label %if.end, !dbg !13460

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false3, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13461
  br label %return, !dbg !13461

if.end:                                           ; preds = %lor.lhs.false6
  %8 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13462
  %type9 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %8, i32 0, i32 0, !dbg !13464
  %9 = load i32, i32* %type9, align 8, !dbg !13464
  %cmp10 = icmp eq i32 %9, 2, !dbg !13465
  br i1 %cmp10, label %if.then14, label %lor.lhs.false11, !dbg !13466

lor.lhs.false11:                                  ; preds = %if.end
  %10 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13467
  %type12 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %10, i32 0, i32 0, !dbg !13468
  %11 = load i32, i32* %type12, align 8, !dbg !13468
  %cmp13 = icmp eq i32 %11, 2, !dbg !13469
  br i1 %cmp13, label %if.then14, label %if.end50, !dbg !13470

if.then14:                                        ; preds = %lor.lhs.false11, %if.end
  %12 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13471
  %type15 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %12, i32 0, i32 0, !dbg !13474
  %13 = load i32, i32* %type15, align 8, !dbg !13474
  %cmp16 = icmp eq i32 %13, 2, !dbg !13475
  br i1 %cmp16, label %land.lhs.true, label %if.end20, !dbg !13476

land.lhs.true:                                    ; preds = %if.then14
  %14 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13477
  %type17 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %14, i32 0, i32 0, !dbg !13478
  %15 = load i32, i32* %type17, align 8, !dbg !13478
  %cmp18 = icmp eq i32 %15, 2, !dbg !13479
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !13480

if.then19:                                        ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13481
  br label %return, !dbg !13481

if.end20:                                         ; preds = %land.lhs.true, %if.then14
  %16 = load i32, i32* %comp.addr, align 4, !dbg !13482
  %cmp21 = icmp eq i32 %16, 99, !dbg !13484
  br i1 %cmp21, label %if.then28, label %lor.lhs.false22, !dbg !13485

lor.lhs.false22:                                  ; preds = %if.end20
  %17 = load i32, i32* %comp.addr, align 4, !dbg !13486
  %cmp23 = icmp eq i32 %17, 100, !dbg !13487
  br i1 %cmp23, label %if.then28, label %lor.lhs.false24, !dbg !13488

lor.lhs.false24:                                  ; preds = %lor.lhs.false22
  %18 = load i32, i32* %comp.addr, align 4, !dbg !13489
  %cmp25 = icmp eq i32 %18, 97, !dbg !13490
  br i1 %cmp25, label %if.then28, label %lor.lhs.false26, !dbg !13491

lor.lhs.false26:                                  ; preds = %lor.lhs.false24
  %19 = load i32, i32* %comp.addr, align 4, !dbg !13492
  %cmp27 = icmp eq i32 %19, 98, !dbg !13493
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !13494

if.then28:                                        ; preds = %lor.lhs.false26, %lor.lhs.false24, %lor.lhs.false22, %if.end20
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13495
  br label %return, !dbg !13495

if.end29:                                         ; preds = %lor.lhs.false26
  %20 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13496
  %type30 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %20, i32 0, i32 0, !dbg !13498
  %21 = load i32, i32* %type30, align 8, !dbg !13498
  %cmp31 = icmp eq i32 %21, 1, !dbg !13499
  br i1 %cmp31, label %if.then32, label %if.end33, !dbg !13500

if.then32:                                        ; preds = %if.end29
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %tmp, metadata !13501, metadata !DIExpression()), !dbg !13503
  %22 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13504
  store %struct.value_range_d* %22, %struct.value_range_d** %tmp, align 8, !dbg !13503
  %23 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13505
  store %struct.value_range_d* %23, %struct.value_range_d** %vr0.addr, align 8, !dbg !13506
  %24 = load %struct.value_range_d*, %struct.value_range_d** %tmp, align 8, !dbg !13507
  store %struct.value_range_d* %24, %struct.value_range_d** %vr1.addr, align 8, !dbg !13508
  br label %if.end33, !dbg !13509

if.end33:                                         ; preds = %if.then32, %if.end29
  %25 = load i32, i32* %comp.addr, align 4, !dbg !13510
  %cmp34 = icmp eq i32 %25, 102, !dbg !13510
  br i1 %cmp34, label %cond.false, label %lor.lhs.false35, !dbg !13510

lor.lhs.false35:                                  ; preds = %if.end33
  %26 = load i32, i32* %comp.addr, align 4, !dbg !13510
  %cmp36 = icmp eq i32 %26, 101, !dbg !13510
  br i1 %cmp36, label %cond.false, label %cond.true, !dbg !13510

cond.true:                                        ; preds = %lor.lhs.false35
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3379, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !13510
  br label %cond.end, !dbg !13510

cond.false:                                       ; preds = %lor.lhs.false35, %if.end33
  br label %cond.end, !dbg !13510

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13510
  %27 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13511
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %27, i32 0, i32 1, !dbg !13513
  %28 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !13513
  %29 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13514
  %min37 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %29, i32 0, i32 1, !dbg !13515
  %30 = load %union.tree_node*, %union.tree_node** %min37, align 8, !dbg !13515
  %31 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13516
  %call = call i32 @compare_values_warnv(%union.tree_node* %28, %union.tree_node* %30, i8* %31), !dbg !13517
  %cmp38 = icmp eq i32 %call, 0, !dbg !13518
  br i1 %cmp38, label %land.lhs.true39, label %if.end49, !dbg !13519

land.lhs.true39:                                  ; preds = %cond.end
  %32 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13520
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %32, i32 0, i32 2, !dbg !13521
  %33 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !13521
  %34 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13522
  %max40 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %34, i32 0, i32 2, !dbg !13523
  %35 = load %union.tree_node*, %union.tree_node** %max40, align 8, !dbg !13523
  %36 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13524
  %call41 = call i32 @compare_values_warnv(%union.tree_node* %33, %union.tree_node* %35, i8* %36), !dbg !13525
  %cmp42 = icmp eq i32 %call41, 0, !dbg !13526
  br i1 %cmp42, label %if.then43, label %if.end49, !dbg !13527

if.then43:                                        ; preds = %land.lhs.true39
  %37 = load i32, i32* %comp.addr, align 4, !dbg !13528
  %cmp44 = icmp eq i32 %37, 102, !dbg !13529
  br i1 %cmp44, label %cond.true45, label %cond.false46, !dbg !13530

cond.true45:                                      ; preds = %if.then43
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !13531
  br label %cond.end47, !dbg !13530

cond.false46:                                     ; preds = %if.then43
  %39 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !13532
  br label %cond.end47, !dbg !13530

cond.end47:                                       ; preds = %cond.false46, %cond.true45
  %cond48 = phi %union.tree_node* [ %38, %cond.true45 ], [ %39, %cond.false46 ], !dbg !13530
  store %union.tree_node* %cond48, %union.tree_node** %retval, align 8, !dbg !13533
  br label %return, !dbg !13533

if.end49:                                         ; preds = %land.lhs.true39, %cond.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13534
  br label %return, !dbg !13534

if.end50:                                         ; preds = %lor.lhs.false11
  %40 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13535
  %41 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13537
  %call51 = call zeroext i8 @usable_range_p(%struct.value_range_d* %40, i8* %41), !dbg !13538
  %tobool = icmp ne i8 %call51, 0, !dbg !13538
  br i1 %tobool, label %lor.lhs.false52, label %if.then55, !dbg !13539

lor.lhs.false52:                                  ; preds = %if.end50
  %42 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13540
  %43 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13541
  %call53 = call zeroext i8 @usable_range_p(%struct.value_range_d* %42, i8* %43), !dbg !13542
  %tobool54 = icmp ne i8 %call53, 0, !dbg !13542
  br i1 %tobool54, label %if.end56, label %if.then55, !dbg !13543

if.then55:                                        ; preds = %lor.lhs.false52, %if.end50
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13544
  br label %return, !dbg !13544

if.end56:                                         ; preds = %lor.lhs.false52
  %44 = load i32, i32* %comp.addr, align 4, !dbg !13545
  %cmp57 = icmp eq i32 %44, 99, !dbg !13547
  br i1 %cmp57, label %if.then60, label %lor.lhs.false58, !dbg !13548

lor.lhs.false58:                                  ; preds = %if.end56
  %45 = load i32, i32* %comp.addr, align 4, !dbg !13549
  %cmp59 = icmp eq i32 %45, 100, !dbg !13550
  br i1 %cmp59, label %if.then60, label %if.end64, !dbg !13551

if.then60:                                        ; preds = %lor.lhs.false58, %if.end56
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %tmp61, metadata !13552, metadata !DIExpression()), !dbg !13554
  %46 = load i32, i32* %comp.addr, align 4, !dbg !13555
  %cmp62 = icmp eq i32 %46, 99, !dbg !13556
  %47 = zext i1 %cmp62 to i64, !dbg !13557
  %cond63 = select i1 %cmp62, i32 97, i32 98, !dbg !13557
  store i32 %cond63, i32* %comp.addr, align 4, !dbg !13558
  %48 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13559
  store %struct.value_range_d* %48, %struct.value_range_d** %tmp61, align 8, !dbg !13560
  %49 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13561
  store %struct.value_range_d* %49, %struct.value_range_d** %vr0.addr, align 8, !dbg !13562
  %50 = load %struct.value_range_d*, %struct.value_range_d** %tmp61, align 8, !dbg !13563
  store %struct.value_range_d* %50, %struct.value_range_d** %vr1.addr, align 8, !dbg !13564
  br label %if.end64, !dbg !13565

if.end64:                                         ; preds = %if.then60, %lor.lhs.false58
  %51 = load i32, i32* %comp.addr, align 4, !dbg !13566
  %cmp65 = icmp eq i32 %51, 101, !dbg !13568
  br i1 %cmp65, label %if.then66, label %if.else106, !dbg !13569

if.then66:                                        ; preds = %if.end64
  %52 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13570
  %min67 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %52, i32 0, i32 1, !dbg !13573
  %53 = load %union.tree_node*, %union.tree_node** %min67, align 8, !dbg !13573
  %54 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13574
  %max68 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %54, i32 0, i32 2, !dbg !13575
  %55 = load %union.tree_node*, %union.tree_node** %max68, align 8, !dbg !13575
  %56 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13576
  %call69 = call i32 @compare_values_warnv(%union.tree_node* %53, %union.tree_node* %55, i8* %56), !dbg !13577
  %cmp70 = icmp eq i32 %call69, 0, !dbg !13578
  br i1 %cmp70, label %land.lhs.true71, label %if.else93, !dbg !13579

land.lhs.true71:                                  ; preds = %if.then66
  %57 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13580
  %min72 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %57, i32 0, i32 1, !dbg !13581
  %58 = load %union.tree_node*, %union.tree_node** %min72, align 8, !dbg !13581
  %59 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13582
  %max73 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %59, i32 0, i32 2, !dbg !13583
  %60 = load %union.tree_node*, %union.tree_node** %max73, align 8, !dbg !13583
  %61 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13584
  %call74 = call i32 @compare_values_warnv(%union.tree_node* %58, %union.tree_node* %60, i8* %61), !dbg !13585
  %cmp75 = icmp eq i32 %call74, 0, !dbg !13586
  br i1 %cmp75, label %if.then76, label %if.else93, !dbg !13587

if.then76:                                        ; preds = %land.lhs.true71
  call void @llvm.dbg.declare(metadata i32* %cmp_min, metadata !13588, metadata !DIExpression()), !dbg !13590
  %62 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13591
  %min77 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %62, i32 0, i32 1, !dbg !13592
  %63 = load %union.tree_node*, %union.tree_node** %min77, align 8, !dbg !13592
  %64 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13593
  %min78 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %64, i32 0, i32 1, !dbg !13594
  %65 = load %union.tree_node*, %union.tree_node** %min78, align 8, !dbg !13594
  %66 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13595
  %call79 = call i32 @compare_values_warnv(%union.tree_node* %63, %union.tree_node* %65, i8* %66), !dbg !13596
  store i32 %call79, i32* %cmp_min, align 4, !dbg !13590
  call void @llvm.dbg.declare(metadata i32* %cmp_max, metadata !13597, metadata !DIExpression()), !dbg !13598
  %67 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13599
  %max80 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %67, i32 0, i32 2, !dbg !13600
  %68 = load %union.tree_node*, %union.tree_node** %max80, align 8, !dbg !13600
  %69 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13601
  %max81 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %69, i32 0, i32 2, !dbg !13602
  %70 = load %union.tree_node*, %union.tree_node** %max81, align 8, !dbg !13602
  %71 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13603
  %call82 = call i32 @compare_values_warnv(%union.tree_node* %68, %union.tree_node* %70, i8* %71), !dbg !13604
  store i32 %call82, i32* %cmp_max, align 4, !dbg !13598
  %72 = load i32, i32* %cmp_min, align 4, !dbg !13605
  %cmp83 = icmp eq i32 %72, 0, !dbg !13607
  br i1 %cmp83, label %land.lhs.true84, label %if.else, !dbg !13608

land.lhs.true84:                                  ; preds = %if.then76
  %73 = load i32, i32* %cmp_max, align 4, !dbg !13609
  %cmp85 = icmp eq i32 %73, 0, !dbg !13610
  br i1 %cmp85, label %if.then86, label %if.else, !dbg !13611

if.then86:                                        ; preds = %land.lhs.true84
  %74 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !13612
  store %union.tree_node* %74, %union.tree_node** %retval, align 8, !dbg !13613
  br label %return, !dbg !13613

if.else:                                          ; preds = %land.lhs.true84, %if.then76
  %75 = load i32, i32* %cmp_min, align 4, !dbg !13614
  %cmp87 = icmp ne i32 %75, -2, !dbg !13616
  br i1 %cmp87, label %land.lhs.true88, label %if.end91, !dbg !13617

land.lhs.true88:                                  ; preds = %if.else
  %76 = load i32, i32* %cmp_max, align 4, !dbg !13618
  %cmp89 = icmp ne i32 %76, -2, !dbg !13619
  br i1 %cmp89, label %if.then90, label %if.end91, !dbg !13620

if.then90:                                        ; preds = %land.lhs.true88
  %77 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !13621
  store %union.tree_node* %77, %union.tree_node** %retval, align 8, !dbg !13622
  br label %return, !dbg !13622

if.end91:                                         ; preds = %land.lhs.true88, %if.else
  br label %if.end92

if.end92:                                         ; preds = %if.end91
  br label %if.end105, !dbg !13623

if.else93:                                        ; preds = %land.lhs.true71, %if.then66
  %78 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13624
  %min94 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %78, i32 0, i32 1, !dbg !13626
  %79 = load %union.tree_node*, %union.tree_node** %min94, align 8, !dbg !13626
  %80 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13627
  %max95 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %80, i32 0, i32 2, !dbg !13628
  %81 = load %union.tree_node*, %union.tree_node** %max95, align 8, !dbg !13628
  %82 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13629
  %call96 = call i32 @compare_values_warnv(%union.tree_node* %79, %union.tree_node* %81, i8* %82), !dbg !13630
  %cmp97 = icmp eq i32 %call96, 1, !dbg !13631
  br i1 %cmp97, label %if.then103, label %lor.lhs.false98, !dbg !13632

lor.lhs.false98:                                  ; preds = %if.else93
  %83 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13633
  %min99 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %83, i32 0, i32 1, !dbg !13634
  %84 = load %union.tree_node*, %union.tree_node** %min99, align 8, !dbg !13634
  %85 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13635
  %max100 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %85, i32 0, i32 2, !dbg !13636
  %86 = load %union.tree_node*, %union.tree_node** %max100, align 8, !dbg !13636
  %87 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13637
  %call101 = call i32 @compare_values_warnv(%union.tree_node* %84, %union.tree_node* %86, i8* %87), !dbg !13638
  %cmp102 = icmp eq i32 %call101, 1, !dbg !13639
  br i1 %cmp102, label %if.then103, label %if.end104, !dbg !13640

if.then103:                                       ; preds = %lor.lhs.false98, %if.else93
  %88 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !13641
  store %union.tree_node* %88, %union.tree_node** %retval, align 8, !dbg !13642
  br label %return, !dbg !13642

if.end104:                                        ; preds = %lor.lhs.false98
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.end92
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13643
  br label %return, !dbg !13643

if.else106:                                       ; preds = %if.end64
  %89 = load i32, i32* %comp.addr, align 4, !dbg !13644
  %cmp107 = icmp eq i32 %89, 102, !dbg !13646
  br i1 %cmp107, label %if.then108, label %if.else146, !dbg !13647

if.then108:                                       ; preds = %if.else106
  call void @llvm.dbg.declare(metadata i32* %cmp1, metadata !13648, metadata !DIExpression()), !dbg !13650
  call void @llvm.dbg.declare(metadata i32* %cmp2109, metadata !13651, metadata !DIExpression()), !dbg !13652
  %90 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13653
  %max110 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %90, i32 0, i32 2, !dbg !13654
  %91 = load %union.tree_node*, %union.tree_node** %max110, align 8, !dbg !13654
  %92 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13655
  %min111 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %92, i32 0, i32 1, !dbg !13656
  %93 = load %union.tree_node*, %union.tree_node** %min111, align 8, !dbg !13656
  %94 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13657
  %call112 = call i32 @compare_values_warnv(%union.tree_node* %91, %union.tree_node* %93, i8* %94), !dbg !13658
  store i32 %call112, i32* %cmp1, align 4, !dbg !13659
  %95 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13660
  %min113 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %95, i32 0, i32 1, !dbg !13661
  %96 = load %union.tree_node*, %union.tree_node** %min113, align 8, !dbg !13661
  %97 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13662
  %max114 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %97, i32 0, i32 2, !dbg !13663
  %98 = load %union.tree_node*, %union.tree_node** %max114, align 8, !dbg !13663
  %99 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13664
  %call115 = call i32 @compare_values_warnv(%union.tree_node* %96, %union.tree_node* %98, i8* %99), !dbg !13665
  store i32 %call115, i32* %cmp2109, align 4, !dbg !13666
  %100 = load i32, i32* %cmp1, align 4, !dbg !13667
  %cmp116 = icmp eq i32 %100, -1, !dbg !13669
  br i1 %cmp116, label %land.lhs.true117, label %lor.lhs.false119, !dbg !13670

land.lhs.true117:                                 ; preds = %if.then108
  %101 = load i32, i32* %cmp2109, align 4, !dbg !13671
  %cmp118 = icmp eq i32 %101, -1, !dbg !13672
  br i1 %cmp118, label %if.then123, label %lor.lhs.false119, !dbg !13673

lor.lhs.false119:                                 ; preds = %land.lhs.true117, %if.then108
  %102 = load i32, i32* %cmp1, align 4, !dbg !13674
  %cmp120 = icmp eq i32 %102, 1, !dbg !13675
  br i1 %cmp120, label %land.lhs.true121, label %if.else124, !dbg !13676

land.lhs.true121:                                 ; preds = %lor.lhs.false119
  %103 = load i32, i32* %cmp2109, align 4, !dbg !13677
  %cmp122 = icmp eq i32 %103, 1, !dbg !13678
  br i1 %cmp122, label %if.then123, label %if.else124, !dbg !13679

if.then123:                                       ; preds = %land.lhs.true121, %land.lhs.true117
  %104 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !13680
  store %union.tree_node* %104, %union.tree_node** %retval, align 8, !dbg !13681
  br label %return, !dbg !13681

if.else124:                                       ; preds = %land.lhs.true121, %lor.lhs.false119
  %105 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13682
  %min125 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %105, i32 0, i32 1, !dbg !13684
  %106 = load %union.tree_node*, %union.tree_node** %min125, align 8, !dbg !13684
  %107 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13685
  %max126 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %107, i32 0, i32 2, !dbg !13686
  %108 = load %union.tree_node*, %union.tree_node** %max126, align 8, !dbg !13686
  %109 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13687
  %call127 = call i32 @compare_values_warnv(%union.tree_node* %106, %union.tree_node* %108, i8* %109), !dbg !13688
  %cmp128 = icmp eq i32 %call127, 0, !dbg !13689
  br i1 %cmp128, label %land.lhs.true129, label %if.else145, !dbg !13690

land.lhs.true129:                                 ; preds = %if.else124
  %110 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13691
  %min130 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %110, i32 0, i32 1, !dbg !13692
  %111 = load %union.tree_node*, %union.tree_node** %min130, align 8, !dbg !13692
  %112 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13693
  %max131 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %112, i32 0, i32 2, !dbg !13694
  %113 = load %union.tree_node*, %union.tree_node** %max131, align 8, !dbg !13694
  %114 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13695
  %call132 = call i32 @compare_values_warnv(%union.tree_node* %111, %union.tree_node* %113, i8* %114), !dbg !13696
  %cmp133 = icmp eq i32 %call132, 0, !dbg !13697
  br i1 %cmp133, label %land.lhs.true134, label %if.else145, !dbg !13698

land.lhs.true134:                                 ; preds = %land.lhs.true129
  %115 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13699
  %min135 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %115, i32 0, i32 1, !dbg !13700
  %116 = load %union.tree_node*, %union.tree_node** %min135, align 8, !dbg !13700
  %117 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13701
  %min136 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %117, i32 0, i32 1, !dbg !13702
  %118 = load %union.tree_node*, %union.tree_node** %min136, align 8, !dbg !13702
  %119 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13703
  %call137 = call i32 @compare_values_warnv(%union.tree_node* %116, %union.tree_node* %118, i8* %119), !dbg !13704
  %cmp138 = icmp eq i32 %call137, 0, !dbg !13705
  br i1 %cmp138, label %land.lhs.true139, label %if.else145, !dbg !13706

land.lhs.true139:                                 ; preds = %land.lhs.true134
  %120 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13707
  %max140 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %120, i32 0, i32 2, !dbg !13708
  %121 = load %union.tree_node*, %union.tree_node** %max140, align 8, !dbg !13708
  %122 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13709
  %max141 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %122, i32 0, i32 2, !dbg !13710
  %123 = load %union.tree_node*, %union.tree_node** %max141, align 8, !dbg !13710
  %124 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13711
  %call142 = call i32 @compare_values_warnv(%union.tree_node* %121, %union.tree_node* %123, i8* %124), !dbg !13712
  %cmp143 = icmp eq i32 %call142, 0, !dbg !13713
  br i1 %cmp143, label %if.then144, label %if.else145, !dbg !13714

if.then144:                                       ; preds = %land.lhs.true139
  %125 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !13715
  store %union.tree_node* %125, %union.tree_node** %retval, align 8, !dbg !13716
  br label %return, !dbg !13716

if.else145:                                       ; preds = %land.lhs.true139, %land.lhs.true134, %land.lhs.true129, %if.else124
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13717
  br label %return, !dbg !13717

if.else146:                                       ; preds = %if.else106
  %126 = load i32, i32* %comp.addr, align 4, !dbg !13718
  %cmp147 = icmp eq i32 %126, 97, !dbg !13720
  br i1 %cmp147, label %if.then150, label %lor.lhs.false148, !dbg !13721

lor.lhs.false148:                                 ; preds = %if.else146
  %127 = load i32, i32* %comp.addr, align 4, !dbg !13722
  %cmp149 = icmp eq i32 %127, 98, !dbg !13723
  br i1 %cmp149, label %if.then150, label %if.end201, !dbg !13724

if.then150:                                       ; preds = %lor.lhs.false148, %if.else146
  call void @llvm.dbg.declare(metadata i32* %tst, metadata !13725, metadata !DIExpression()), !dbg !13727
  %128 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13728
  %max151 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %128, i32 0, i32 2, !dbg !13729
  %129 = load %union.tree_node*, %union.tree_node** %max151, align 8, !dbg !13729
  %130 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13730
  %min152 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %130, i32 0, i32 1, !dbg !13731
  %131 = load %union.tree_node*, %union.tree_node** %min152, align 8, !dbg !13731
  %132 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13732
  %call153 = call i32 @compare_values_warnv(%union.tree_node* %129, %union.tree_node* %131, i8* %132), !dbg !13733
  store i32 %call153, i32* %tst, align 4, !dbg !13734
  %133 = load i32, i32* %comp.addr, align 4, !dbg !13735
  %cmp154 = icmp eq i32 %133, 97, !dbg !13737
  br i1 %cmp154, label %land.lhs.true155, label %lor.lhs.false157, !dbg !13738

land.lhs.true155:                                 ; preds = %if.then150
  %134 = load i32, i32* %tst, align 4, !dbg !13739
  %cmp156 = icmp eq i32 %134, -1, !dbg !13740
  br i1 %cmp156, label %if.then163, label %lor.lhs.false157, !dbg !13741

lor.lhs.false157:                                 ; preds = %land.lhs.true155, %if.then150
  %135 = load i32, i32* %comp.addr, align 4, !dbg !13742
  %cmp158 = icmp eq i32 %135, 98, !dbg !13743
  br i1 %cmp158, label %land.lhs.true159, label %if.end172, !dbg !13744

land.lhs.true159:                                 ; preds = %lor.lhs.false157
  %136 = load i32, i32* %tst, align 4, !dbg !13745
  %cmp160 = icmp eq i32 %136, -1, !dbg !13746
  br i1 %cmp160, label %if.then163, label %lor.lhs.false161, !dbg !13747

lor.lhs.false161:                                 ; preds = %land.lhs.true159
  %137 = load i32, i32* %tst, align 4, !dbg !13748
  %cmp162 = icmp eq i32 %137, 0, !dbg !13749
  br i1 %cmp162, label %if.then163, label %if.end172, !dbg !13750

if.then163:                                       ; preds = %lor.lhs.false161, %land.lhs.true159, %land.lhs.true155
  %138 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13751
  %call164 = call zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %138), !dbg !13754
  %conv = zext i8 %call164 to i32, !dbg !13754
  %tobool165 = icmp ne i32 %conv, 0, !dbg !13754
  br i1 %tobool165, label %if.then170, label %lor.lhs.false166, !dbg !13755

lor.lhs.false166:                                 ; preds = %if.then163
  %139 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13756
  %call167 = call zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %139), !dbg !13757
  %conv168 = zext i8 %call167 to i32, !dbg !13757
  %tobool169 = icmp ne i32 %conv168, 0, !dbg !13757
  br i1 %tobool169, label %if.then170, label %if.end171, !dbg !13758

if.then170:                                       ; preds = %lor.lhs.false166, %if.then163
  %140 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13759
  store i8 1, i8* %140, align 1, !dbg !13760
  br label %if.end171, !dbg !13761

if.end171:                                        ; preds = %if.then170, %lor.lhs.false166
  %141 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !13762
  store %union.tree_node* %141, %union.tree_node** %retval, align 8, !dbg !13763
  br label %return, !dbg !13763

if.end172:                                        ; preds = %lor.lhs.false161, %lor.lhs.false157
  %142 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13764
  %min173 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %142, i32 0, i32 1, !dbg !13765
  %143 = load %union.tree_node*, %union.tree_node** %min173, align 8, !dbg !13765
  %144 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13766
  %max174 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %144, i32 0, i32 2, !dbg !13767
  %145 = load %union.tree_node*, %union.tree_node** %max174, align 8, !dbg !13767
  %146 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13768
  %call175 = call i32 @compare_values_warnv(%union.tree_node* %143, %union.tree_node* %145, i8* %146), !dbg !13769
  store i32 %call175, i32* %tst, align 4, !dbg !13770
  %147 = load i32, i32* %comp.addr, align 4, !dbg !13771
  %cmp176 = icmp eq i32 %147, 97, !dbg !13773
  br i1 %cmp176, label %land.lhs.true178, label %lor.lhs.false184, !dbg !13774

land.lhs.true178:                                 ; preds = %if.end172
  %148 = load i32, i32* %tst, align 4, !dbg !13775
  %cmp179 = icmp eq i32 %148, 0, !dbg !13776
  br i1 %cmp179, label %if.then190, label %lor.lhs.false181, !dbg !13777

lor.lhs.false181:                                 ; preds = %land.lhs.true178
  %149 = load i32, i32* %tst, align 4, !dbg !13778
  %cmp182 = icmp eq i32 %149, 1, !dbg !13779
  br i1 %cmp182, label %if.then190, label %lor.lhs.false184, !dbg !13780

lor.lhs.false184:                                 ; preds = %lor.lhs.false181, %if.end172
  %150 = load i32, i32* %comp.addr, align 4, !dbg !13781
  %cmp185 = icmp eq i32 %150, 98, !dbg !13782
  br i1 %cmp185, label %land.lhs.true187, label %if.end200, !dbg !13783

land.lhs.true187:                                 ; preds = %lor.lhs.false184
  %151 = load i32, i32* %tst, align 4, !dbg !13784
  %cmp188 = icmp eq i32 %151, 1, !dbg !13785
  br i1 %cmp188, label %if.then190, label %if.end200, !dbg !13786

if.then190:                                       ; preds = %land.lhs.true187, %lor.lhs.false181, %land.lhs.true178
  %152 = load %struct.value_range_d*, %struct.value_range_d** %vr0.addr, align 8, !dbg !13787
  %call191 = call zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %152), !dbg !13790
  %conv192 = zext i8 %call191 to i32, !dbg !13790
  %tobool193 = icmp ne i32 %conv192, 0, !dbg !13790
  br i1 %tobool193, label %if.then198, label %lor.lhs.false194, !dbg !13791

lor.lhs.false194:                                 ; preds = %if.then190
  %153 = load %struct.value_range_d*, %struct.value_range_d** %vr1.addr, align 8, !dbg !13792
  %call195 = call zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %153), !dbg !13793
  %conv196 = zext i8 %call195 to i32, !dbg !13793
  %tobool197 = icmp ne i32 %conv196, 0, !dbg !13793
  br i1 %tobool197, label %if.then198, label %if.end199, !dbg !13794

if.then198:                                       ; preds = %lor.lhs.false194, %if.then190
  %154 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13795
  store i8 1, i8* %154, align 1, !dbg !13796
  br label %if.end199, !dbg !13797

if.end199:                                        ; preds = %if.then198, %lor.lhs.false194
  %155 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !13798
  store %union.tree_node* %155, %union.tree_node** %retval, align 8, !dbg !13799
  br label %return, !dbg !13799

if.end200:                                        ; preds = %land.lhs.true187, %lor.lhs.false184
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13800
  br label %return, !dbg !13800

if.end201:                                        ; preds = %lor.lhs.false148
  br label %if.end202

if.end202:                                        ; preds = %if.end201
  br label %if.end203

if.end203:                                        ; preds = %if.end202
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3488, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !13801
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13802
  br label %return, !dbg !13802

return:                                           ; preds = %if.end203, %if.end200, %if.end199, %if.end171, %if.else145, %if.then144, %if.then123, %if.end105, %if.then103, %if.then90, %if.then86, %if.then55, %if.end49, %cond.end47, %if.then28, %if.then19, %if.then
  %156 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13803
  ret %union.tree_node* %156, !dbg !13803
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @compare_range_with_value(i32 %comp, %struct.value_range_d* %vr, %union.tree_node* %val, i8* %strict_overflow_p) #0 !dbg !13804 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %comp.addr = alloca i32, align 4
  %vr.addr = alloca %struct.value_range_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  %cmp28 = alloca i32, align 4
  %tst = alloca i32, align 4
  %tst117 = alloca i32, align 4
  store i32 %comp, i32* %comp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %comp.addr, metadata !13807, metadata !DIExpression()), !dbg !13808
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !13809, metadata !DIExpression()), !dbg !13810
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !13811, metadata !DIExpression()), !dbg !13812
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !13813, metadata !DIExpression()), !dbg !13814
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13815
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 0, !dbg !13817
  %1 = load i32, i32* %type, align 8, !dbg !13817
  %cmp = icmp eq i32 %1, 3, !dbg !13818
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !13819

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13820
  %type1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 0, !dbg !13821
  %3 = load i32, i32* %type1, align 8, !dbg !13821
  %cmp2 = icmp eq i32 %3, 0, !dbg !13822
  br i1 %cmp2, label %if.then, label %if.end, !dbg !13823

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13824
  br label %return, !dbg !13824

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13825
  %type3 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %4, i32 0, i32 0, !dbg !13827
  %5 = load i32, i32* %type3, align 8, !dbg !13827
  %cmp4 = icmp eq i32 %5, 2, !dbg !13828
  br i1 %cmp4, label %if.then5, label %if.end19, !dbg !13829

if.then5:                                         ; preds = %if.end
  %6 = load i32, i32* %comp.addr, align 4, !dbg !13830
  %cmp6 = icmp eq i32 %6, 99, !dbg !13833
  br i1 %cmp6, label %if.then13, label %lor.lhs.false7, !dbg !13834

lor.lhs.false7:                                   ; preds = %if.then5
  %7 = load i32, i32* %comp.addr, align 4, !dbg !13835
  %cmp8 = icmp eq i32 %7, 100, !dbg !13836
  br i1 %cmp8, label %if.then13, label %lor.lhs.false9, !dbg !13837

lor.lhs.false9:                                   ; preds = %lor.lhs.false7
  %8 = load i32, i32* %comp.addr, align 4, !dbg !13838
  %cmp10 = icmp eq i32 %8, 97, !dbg !13839
  br i1 %cmp10, label %if.then13, label %lor.lhs.false11, !dbg !13840

lor.lhs.false11:                                  ; preds = %lor.lhs.false9
  %9 = load i32, i32* %comp.addr, align 4, !dbg !13841
  %cmp12 = icmp eq i32 %9, 98, !dbg !13842
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !13843

if.then13:                                        ; preds = %lor.lhs.false11, %lor.lhs.false9, %lor.lhs.false7, %if.then5
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13844
  br label %return, !dbg !13844

if.end14:                                         ; preds = %lor.lhs.false11
  %10 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !13845
  %11 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13847
  %call = call i32 @value_inside_range(%union.tree_node* %10, %struct.value_range_d* %11), !dbg !13848
  %cmp15 = icmp eq i32 %call, 1, !dbg !13849
  br i1 %cmp15, label %if.then16, label %if.end18, !dbg !13850

if.then16:                                        ; preds = %if.end14
  %12 = load i32, i32* %comp.addr, align 4, !dbg !13851
  %cmp17 = icmp eq i32 %12, 102, !dbg !13852
  br i1 %cmp17, label %cond.true, label %cond.false, !dbg !13853

cond.true:                                        ; preds = %if.then16
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !13854
  br label %cond.end, !dbg !13853

cond.false:                                       ; preds = %if.then16
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !13855
  br label %cond.end, !dbg !13853

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %13, %cond.true ], [ %14, %cond.false ], !dbg !13853
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !13856
  br label %return, !dbg !13856

if.end18:                                         ; preds = %if.end14
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13857
  br label %return, !dbg !13857

if.end19:                                         ; preds = %if.end
  %15 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13858
  %16 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13860
  %call20 = call zeroext i8 @usable_range_p(%struct.value_range_d* %15, i8* %16), !dbg !13861
  %tobool = icmp ne i8 %call20, 0, !dbg !13861
  br i1 %tobool, label %if.end22, label %if.then21, !dbg !13862

if.then21:                                        ; preds = %if.end19
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13863
  br label %return, !dbg !13863

if.end22:                                         ; preds = %if.end19
  %17 = load i32, i32* %comp.addr, align 4, !dbg !13864
  %cmp23 = icmp eq i32 %17, 101, !dbg !13866
  br i1 %cmp23, label %if.then24, label %if.else52, !dbg !13867

if.then24:                                        ; preds = %if.end22
  %18 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13868
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %18, i32 0, i32 1, !dbg !13871
  %19 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !13871
  %20 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13872
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %20, i32 0, i32 2, !dbg !13873
  %21 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !13873
  %22 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13874
  %call25 = call i32 @compare_values_warnv(%union.tree_node* %19, %union.tree_node* %21, i8* %22), !dbg !13875
  %cmp26 = icmp eq i32 %call25, 0, !dbg !13876
  br i1 %cmp26, label %if.then27, label %if.else41, !dbg !13877

if.then27:                                        ; preds = %if.then24
  call void @llvm.dbg.declare(metadata i32* %cmp28, metadata !13878, metadata !DIExpression()), !dbg !13880
  %23 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13881
  %min29 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %23, i32 0, i32 1, !dbg !13882
  %24 = load %union.tree_node*, %union.tree_node** %min29, align 8, !dbg !13882
  %25 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !13883
  %26 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13884
  %call30 = call i32 @compare_values_warnv(%union.tree_node* %24, %union.tree_node* %25, i8* %26), !dbg !13885
  store i32 %call30, i32* %cmp28, align 4, !dbg !13880
  %27 = load i32, i32* %cmp28, align 4, !dbg !13886
  %cmp31 = icmp eq i32 %27, 0, !dbg !13888
  br i1 %cmp31, label %if.then32, label %if.else, !dbg !13889

if.then32:                                        ; preds = %if.then27
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !13890
  store %union.tree_node* %28, %union.tree_node** %retval, align 8, !dbg !13891
  br label %return, !dbg !13891

if.else:                                          ; preds = %if.then27
  %29 = load i32, i32* %cmp28, align 4, !dbg !13892
  %cmp33 = icmp eq i32 %29, -1, !dbg !13894
  br i1 %cmp33, label %if.then38, label %lor.lhs.false34, !dbg !13895

lor.lhs.false34:                                  ; preds = %if.else
  %30 = load i32, i32* %cmp28, align 4, !dbg !13896
  %cmp35 = icmp eq i32 %30, 1, !dbg !13897
  br i1 %cmp35, label %if.then38, label %lor.lhs.false36, !dbg !13898

lor.lhs.false36:                                  ; preds = %lor.lhs.false34
  %31 = load i32, i32* %cmp28, align 4, !dbg !13899
  %cmp37 = icmp eq i32 %31, 2, !dbg !13900
  br i1 %cmp37, label %if.then38, label %if.end39, !dbg !13901

if.then38:                                        ; preds = %lor.lhs.false36, %lor.lhs.false34, %if.else
  %32 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !13902
  store %union.tree_node* %32, %union.tree_node** %retval, align 8, !dbg !13903
  br label %return, !dbg !13903

if.end39:                                         ; preds = %lor.lhs.false36
  br label %if.end40

if.end40:                                         ; preds = %if.end39
  br label %if.end51, !dbg !13904

if.else41:                                        ; preds = %if.then24
  %33 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !13905
  %34 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13907
  %min42 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %34, i32 0, i32 1, !dbg !13908
  %35 = load %union.tree_node*, %union.tree_node** %min42, align 8, !dbg !13908
  %36 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13909
  %call43 = call i32 @compare_values_warnv(%union.tree_node* %33, %union.tree_node* %35, i8* %36), !dbg !13910
  %cmp44 = icmp eq i32 %call43, -1, !dbg !13911
  br i1 %cmp44, label %if.then49, label %lor.lhs.false45, !dbg !13912

lor.lhs.false45:                                  ; preds = %if.else41
  %37 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13913
  %max46 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %37, i32 0, i32 2, !dbg !13914
  %38 = load %union.tree_node*, %union.tree_node** %max46, align 8, !dbg !13914
  %39 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !13915
  %40 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13916
  %call47 = call i32 @compare_values_warnv(%union.tree_node* %38, %union.tree_node* %39, i8* %40), !dbg !13917
  %cmp48 = icmp eq i32 %call47, -1, !dbg !13918
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !13919

if.then49:                                        ; preds = %lor.lhs.false45, %if.else41
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !13920
  store %union.tree_node* %41, %union.tree_node** %retval, align 8, !dbg !13921
  br label %return, !dbg !13921

if.end50:                                         ; preds = %lor.lhs.false45
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end40
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13922
  br label %return, !dbg !13922

if.else52:                                        ; preds = %if.end22
  %42 = load i32, i32* %comp.addr, align 4, !dbg !13923
  %cmp53 = icmp eq i32 %42, 102, !dbg !13925
  br i1 %cmp53, label %if.then54, label %if.else73, !dbg !13926

if.then54:                                        ; preds = %if.else52
  %43 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13927
  %max55 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %43, i32 0, i32 2, !dbg !13930
  %44 = load %union.tree_node*, %union.tree_node** %max55, align 8, !dbg !13930
  %45 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !13931
  %46 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13932
  %call56 = call i32 @compare_values_warnv(%union.tree_node* %44, %union.tree_node* %45, i8* %46), !dbg !13933
  %cmp57 = icmp eq i32 %call56, -1, !dbg !13934
  br i1 %cmp57, label %if.then62, label %lor.lhs.false58, !dbg !13935

lor.lhs.false58:                                  ; preds = %if.then54
  %47 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13936
  %min59 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %47, i32 0, i32 1, !dbg !13937
  %48 = load %union.tree_node*, %union.tree_node** %min59, align 8, !dbg !13937
  %49 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !13938
  %50 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13939
  %call60 = call i32 @compare_values_warnv(%union.tree_node* %48, %union.tree_node* %49, i8* %50), !dbg !13940
  %cmp61 = icmp eq i32 %call60, 1, !dbg !13941
  br i1 %cmp61, label %if.then62, label %if.end63, !dbg !13942

if.then62:                                        ; preds = %lor.lhs.false58, %if.then54
  %51 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !13943
  store %union.tree_node* %51, %union.tree_node** %retval, align 8, !dbg !13944
  br label %return, !dbg !13944

if.end63:                                         ; preds = %lor.lhs.false58
  %52 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13945
  %min64 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %52, i32 0, i32 1, !dbg !13947
  %53 = load %union.tree_node*, %union.tree_node** %min64, align 8, !dbg !13947
  %54 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13948
  %max65 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %54, i32 0, i32 2, !dbg !13949
  %55 = load %union.tree_node*, %union.tree_node** %max65, align 8, !dbg !13949
  %56 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13950
  %call66 = call i32 @compare_values_warnv(%union.tree_node* %53, %union.tree_node* %55, i8* %56), !dbg !13951
  %cmp67 = icmp eq i32 %call66, 0, !dbg !13952
  br i1 %cmp67, label %land.lhs.true, label %if.end72, !dbg !13953

land.lhs.true:                                    ; preds = %if.end63
  %57 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13954
  %min68 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %57, i32 0, i32 1, !dbg !13955
  %58 = load %union.tree_node*, %union.tree_node** %min68, align 8, !dbg !13955
  %59 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !13956
  %60 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13957
  %call69 = call i32 @compare_values_warnv(%union.tree_node* %58, %union.tree_node* %59, i8* %60), !dbg !13958
  %cmp70 = icmp eq i32 %call69, 0, !dbg !13959
  br i1 %cmp70, label %if.then71, label %if.end72, !dbg !13960

if.then71:                                        ; preds = %land.lhs.true
  %61 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !13961
  store %union.tree_node* %61, %union.tree_node** %retval, align 8, !dbg !13962
  br label %return, !dbg !13962

if.end72:                                         ; preds = %land.lhs.true, %if.end63
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13963
  br label %return, !dbg !13963

if.else73:                                        ; preds = %if.else52
  %62 = load i32, i32* %comp.addr, align 4, !dbg !13964
  %cmp74 = icmp eq i32 %62, 97, !dbg !13966
  br i1 %cmp74, label %if.then77, label %lor.lhs.false75, !dbg !13967

lor.lhs.false75:                                  ; preds = %if.else73
  %63 = load i32, i32* %comp.addr, align 4, !dbg !13968
  %cmp76 = icmp eq i32 %63, 98, !dbg !13969
  br i1 %cmp76, label %if.then77, label %if.else112, !dbg !13970

if.then77:                                        ; preds = %lor.lhs.false75, %if.else73
  call void @llvm.dbg.declare(metadata i32* %tst, metadata !13971, metadata !DIExpression()), !dbg !13973
  %64 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13974
  %max78 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %64, i32 0, i32 2, !dbg !13975
  %65 = load %union.tree_node*, %union.tree_node** %max78, align 8, !dbg !13975
  %66 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !13976
  %67 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !13977
  %call79 = call i32 @compare_values_warnv(%union.tree_node* %65, %union.tree_node* %66, i8* %67), !dbg !13978
  store i32 %call79, i32* %tst, align 4, !dbg !13979
  %68 = load i32, i32* %comp.addr, align 4, !dbg !13980
  %cmp80 = icmp eq i32 %68, 97, !dbg !13982
  br i1 %cmp80, label %land.lhs.true81, label %lor.lhs.false83, !dbg !13983

land.lhs.true81:                                  ; preds = %if.then77
  %69 = load i32, i32* %tst, align 4, !dbg !13984
  %cmp82 = icmp eq i32 %69, -1, !dbg !13985
  br i1 %cmp82, label %if.then89, label %lor.lhs.false83, !dbg !13986

lor.lhs.false83:                                  ; preds = %land.lhs.true81, %if.then77
  %70 = load i32, i32* %comp.addr, align 4, !dbg !13987
  %cmp84 = icmp eq i32 %70, 98, !dbg !13988
  br i1 %cmp84, label %land.lhs.true85, label %if.end94, !dbg !13989

land.lhs.true85:                                  ; preds = %lor.lhs.false83
  %71 = load i32, i32* %tst, align 4, !dbg !13990
  %cmp86 = icmp eq i32 %71, -1, !dbg !13991
  br i1 %cmp86, label %if.then89, label %lor.lhs.false87, !dbg !13992

lor.lhs.false87:                                  ; preds = %land.lhs.true85
  %72 = load i32, i32* %tst, align 4, !dbg !13993
  %cmp88 = icmp eq i32 %72, 0, !dbg !13994
  br i1 %cmp88, label %if.then89, label %if.end94, !dbg !13995

if.then89:                                        ; preds = %lor.lhs.false87, %land.lhs.true85, %land.lhs.true81
  %73 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !13996
  %call90 = call zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %73), !dbg !13999
  %tobool91 = icmp ne i8 %call90, 0, !dbg !13999
  br i1 %tobool91, label %if.then92, label %if.end93, !dbg !14000

if.then92:                                        ; preds = %if.then89
  %74 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !14001
  store i8 1, i8* %74, align 1, !dbg !14002
  br label %if.end93, !dbg !14003

if.end93:                                         ; preds = %if.then92, %if.then89
  %75 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !14004
  store %union.tree_node* %75, %union.tree_node** %retval, align 8, !dbg !14005
  br label %return, !dbg !14005

if.end94:                                         ; preds = %lor.lhs.false87, %lor.lhs.false83
  %76 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14006
  %min95 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %76, i32 0, i32 1, !dbg !14007
  %77 = load %union.tree_node*, %union.tree_node** %min95, align 8, !dbg !14007
  %78 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14008
  %79 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !14009
  %call96 = call i32 @compare_values_warnv(%union.tree_node* %77, %union.tree_node* %78, i8* %79), !dbg !14010
  store i32 %call96, i32* %tst, align 4, !dbg !14011
  %80 = load i32, i32* %comp.addr, align 4, !dbg !14012
  %cmp97 = icmp eq i32 %80, 97, !dbg !14014
  br i1 %cmp97, label %land.lhs.true98, label %lor.lhs.false102, !dbg !14015

land.lhs.true98:                                  ; preds = %if.end94
  %81 = load i32, i32* %tst, align 4, !dbg !14016
  %cmp99 = icmp eq i32 %81, 0, !dbg !14017
  br i1 %cmp99, label %if.then106, label %lor.lhs.false100, !dbg !14018

lor.lhs.false100:                                 ; preds = %land.lhs.true98
  %82 = load i32, i32* %tst, align 4, !dbg !14019
  %cmp101 = icmp eq i32 %82, 1, !dbg !14020
  br i1 %cmp101, label %if.then106, label %lor.lhs.false102, !dbg !14021

lor.lhs.false102:                                 ; preds = %lor.lhs.false100, %if.end94
  %83 = load i32, i32* %comp.addr, align 4, !dbg !14022
  %cmp103 = icmp eq i32 %83, 98, !dbg !14023
  br i1 %cmp103, label %land.lhs.true104, label %if.end111, !dbg !14024

land.lhs.true104:                                 ; preds = %lor.lhs.false102
  %84 = load i32, i32* %tst, align 4, !dbg !14025
  %cmp105 = icmp eq i32 %84, 1, !dbg !14026
  br i1 %cmp105, label %if.then106, label %if.end111, !dbg !14027

if.then106:                                       ; preds = %land.lhs.true104, %lor.lhs.false100, %land.lhs.true98
  %85 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14028
  %call107 = call zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %85), !dbg !14031
  %tobool108 = icmp ne i8 %call107, 0, !dbg !14031
  br i1 %tobool108, label %if.then109, label %if.end110, !dbg !14032

if.then109:                                       ; preds = %if.then106
  %86 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !14033
  store i8 1, i8* %86, align 1, !dbg !14034
  br label %if.end110, !dbg !14035

if.end110:                                        ; preds = %if.then109, %if.then106
  %87 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !14036
  store %union.tree_node* %87, %union.tree_node** %retval, align 8, !dbg !14037
  br label %return, !dbg !14037

if.end111:                                        ; preds = %land.lhs.true104, %lor.lhs.false102
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14038
  br label %return, !dbg !14038

if.else112:                                       ; preds = %lor.lhs.false75
  %88 = load i32, i32* %comp.addr, align 4, !dbg !14039
  %cmp113 = icmp eq i32 %88, 99, !dbg !14041
  br i1 %cmp113, label %if.then116, label %lor.lhs.false114, !dbg !14042

lor.lhs.false114:                                 ; preds = %if.else112
  %89 = load i32, i32* %comp.addr, align 4, !dbg !14043
  %cmp115 = icmp eq i32 %89, 100, !dbg !14044
  br i1 %cmp115, label %if.then116, label %if.end152, !dbg !14045

if.then116:                                       ; preds = %lor.lhs.false114, %if.else112
  call void @llvm.dbg.declare(metadata i32* %tst117, metadata !14046, metadata !DIExpression()), !dbg !14048
  %90 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14049
  %min118 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %90, i32 0, i32 1, !dbg !14050
  %91 = load %union.tree_node*, %union.tree_node** %min118, align 8, !dbg !14050
  %92 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14051
  %93 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !14052
  %call119 = call i32 @compare_values_warnv(%union.tree_node* %91, %union.tree_node* %92, i8* %93), !dbg !14053
  store i32 %call119, i32* %tst117, align 4, !dbg !14054
  %94 = load i32, i32* %comp.addr, align 4, !dbg !14055
  %cmp120 = icmp eq i32 %94, 99, !dbg !14057
  br i1 %cmp120, label %land.lhs.true121, label %lor.lhs.false123, !dbg !14058

land.lhs.true121:                                 ; preds = %if.then116
  %95 = load i32, i32* %tst117, align 4, !dbg !14059
  %cmp122 = icmp eq i32 %95, 1, !dbg !14060
  br i1 %cmp122, label %if.then129, label %lor.lhs.false123, !dbg !14061

lor.lhs.false123:                                 ; preds = %land.lhs.true121, %if.then116
  %96 = load i32, i32* %comp.addr, align 4, !dbg !14062
  %cmp124 = icmp eq i32 %96, 100, !dbg !14063
  br i1 %cmp124, label %land.lhs.true125, label %if.end134, !dbg !14064

land.lhs.true125:                                 ; preds = %lor.lhs.false123
  %97 = load i32, i32* %tst117, align 4, !dbg !14065
  %cmp126 = icmp eq i32 %97, 0, !dbg !14066
  br i1 %cmp126, label %if.then129, label %lor.lhs.false127, !dbg !14067

lor.lhs.false127:                                 ; preds = %land.lhs.true125
  %98 = load i32, i32* %tst117, align 4, !dbg !14068
  %cmp128 = icmp eq i32 %98, 1, !dbg !14069
  br i1 %cmp128, label %if.then129, label %if.end134, !dbg !14070

if.then129:                                       ; preds = %lor.lhs.false127, %land.lhs.true125, %land.lhs.true121
  %99 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14071
  %call130 = call zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %99), !dbg !14074
  %tobool131 = icmp ne i8 %call130, 0, !dbg !14074
  br i1 %tobool131, label %if.then132, label %if.end133, !dbg !14075

if.then132:                                       ; preds = %if.then129
  %100 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !14076
  store i8 1, i8* %100, align 1, !dbg !14077
  br label %if.end133, !dbg !14078

if.end133:                                        ; preds = %if.then132, %if.then129
  %101 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !14079
  store %union.tree_node* %101, %union.tree_node** %retval, align 8, !dbg !14080
  br label %return, !dbg !14080

if.end134:                                        ; preds = %lor.lhs.false127, %lor.lhs.false123
  %102 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14081
  %max135 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %102, i32 0, i32 2, !dbg !14082
  %103 = load %union.tree_node*, %union.tree_node** %max135, align 8, !dbg !14082
  %104 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14083
  %105 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !14084
  %call136 = call i32 @compare_values_warnv(%union.tree_node* %103, %union.tree_node* %104, i8* %105), !dbg !14085
  store i32 %call136, i32* %tst117, align 4, !dbg !14086
  %106 = load i32, i32* %comp.addr, align 4, !dbg !14087
  %cmp137 = icmp eq i32 %106, 99, !dbg !14089
  br i1 %cmp137, label %land.lhs.true138, label %lor.lhs.false142, !dbg !14090

land.lhs.true138:                                 ; preds = %if.end134
  %107 = load i32, i32* %tst117, align 4, !dbg !14091
  %cmp139 = icmp eq i32 %107, -1, !dbg !14092
  br i1 %cmp139, label %if.then146, label %lor.lhs.false140, !dbg !14093

lor.lhs.false140:                                 ; preds = %land.lhs.true138
  %108 = load i32, i32* %tst117, align 4, !dbg !14094
  %cmp141 = icmp eq i32 %108, 0, !dbg !14095
  br i1 %cmp141, label %if.then146, label %lor.lhs.false142, !dbg !14096

lor.lhs.false142:                                 ; preds = %lor.lhs.false140, %if.end134
  %109 = load i32, i32* %comp.addr, align 4, !dbg !14097
  %cmp143 = icmp eq i32 %109, 100, !dbg !14098
  br i1 %cmp143, label %land.lhs.true144, label %if.end151, !dbg !14099

land.lhs.true144:                                 ; preds = %lor.lhs.false142
  %110 = load i32, i32* %tst117, align 4, !dbg !14100
  %cmp145 = icmp eq i32 %110, -1, !dbg !14101
  br i1 %cmp145, label %if.then146, label %if.end151, !dbg !14102

if.then146:                                       ; preds = %land.lhs.true144, %lor.lhs.false140, %land.lhs.true138
  %111 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14103
  %call147 = call zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %111), !dbg !14106
  %tobool148 = icmp ne i8 %call147, 0, !dbg !14106
  br i1 %tobool148, label %if.then149, label %if.end150, !dbg !14107

if.then149:                                       ; preds = %if.then146
  %112 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !14108
  store i8 1, i8* %112, align 1, !dbg !14109
  br label %if.end150, !dbg !14110

if.end150:                                        ; preds = %if.then149, %if.then146
  %113 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !14111
  store %union.tree_node* %113, %union.tree_node** %retval, align 8, !dbg !14112
  br label %return, !dbg !14112

if.end151:                                        ; preds = %land.lhs.true144, %lor.lhs.false142
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14113
  br label %return, !dbg !14113

if.end152:                                        ; preds = %lor.lhs.false114
  br label %if.end153

if.end153:                                        ; preds = %if.end152
  br label %if.end154

if.end154:                                        ; preds = %if.end153
  br label %if.end155

if.end155:                                        ; preds = %if.end154
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3620, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !14114
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14115
  br label %return, !dbg !14115

return:                                           ; preds = %if.end155, %if.end151, %if.end150, %if.end133, %if.end111, %if.end110, %if.end93, %if.end72, %if.then71, %if.then62, %if.end51, %if.then49, %if.then38, %if.then32, %if.then21, %if.end18, %cond.end, %if.then13, %if.then
  %114 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14116
  ret %union.tree_node* %114, !dbg !14116
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @usable_range_p(%struct.value_range_d* %vr, i8* %strict_overflow_p) #0 !dbg !14117 {
entry:
  %retval = alloca i8, align 1
  %vr.addr = alloca %struct.value_range_d*, align 8
  %strict_overflow_p.addr = alloca i8*, align 8
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !14120, metadata !DIExpression()), !dbg !14121
  store i8* %strict_overflow_p, i8** %strict_overflow_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strict_overflow_p.addr, metadata !14122, metadata !DIExpression()), !dbg !14123
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14124
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 0, !dbg !14124
  %1 = load i32, i32* %type, align 8, !dbg !14124
  %cmp = icmp eq i32 %1, 1, !dbg !14124
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !14124

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 796, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !14124
  br label %cond.end, !dbg !14124

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14124

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14124
  %2 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14125
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %2, i32 0, i32 1, !dbg !14127
  %3 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !14127
  %call = call zeroext i8 @is_overflow_infinity(%union.tree_node* %3), !dbg !14128
  %tobool = icmp ne i8 %call, 0, !dbg !14128
  br i1 %tobool, label %if.then, label %if.end10, !dbg !14129

if.then:                                          ; preds = %cond.end
  %4 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !14130
  store i8 1, i8* %4, align 1, !dbg !14132
  %5 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14133
  %min1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %5, i32 0, i32 1, !dbg !14133
  %6 = load %union.tree_node*, %union.tree_node** %min1, align 8, !dbg !14133
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !14133
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14133
  %7 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !14133
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !14133
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !14133
  %bf.load = load i64, i64* %8, align 8, !dbg !14133
  %bf.lshr = lshr i64 %bf.load, 21, !dbg !14133
  %bf.clear = and i64 %bf.lshr, 1, !dbg !14133
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14133
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !14133
  br i1 %tobool3, label %if.then9, label %land.lhs.true, !dbg !14133

land.lhs.true:                                    ; preds = %if.then
  %9 = load i32, i32* @flag_wrapv, align 4, !dbg !14133
  %tobool4 = icmp ne i32 %9, 0, !dbg !14133
  br i1 %tobool4, label %if.then9, label %land.lhs.true5, !dbg !14133

land.lhs.true5:                                   ; preds = %land.lhs.true
  %10 = load i32, i32* @flag_trapv, align 4, !dbg !14133
  %tobool6 = icmp ne i32 %10, 0, !dbg !14133
  br i1 %tobool6, label %if.then9, label %land.lhs.true7, !dbg !14133

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %11 = load i32, i32* @flag_strict_overflow, align 4, !dbg !14133
  %tobool8 = icmp ne i32 %11, 0, !dbg !14133
  br i1 %tobool8, label %if.end, label %if.then9, !dbg !14135

if.then9:                                         ; preds = %land.lhs.true7, %land.lhs.true5, %land.lhs.true, %if.then
  store i8 0, i8* %retval, align 1, !dbg !14136
  br label %return, !dbg !14136

if.end:                                           ; preds = %land.lhs.true7
  br label %if.end10, !dbg !14137

if.end10:                                         ; preds = %if.end, %cond.end
  %12 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14138
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %12, i32 0, i32 2, !dbg !14140
  %13 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !14140
  %call11 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %13), !dbg !14141
  %tobool12 = icmp ne i8 %call11, 0, !dbg !14141
  br i1 %tobool12, label %if.then13, label %if.end31, !dbg !14142

if.then13:                                        ; preds = %if.end10
  %14 = load i8*, i8** %strict_overflow_p.addr, align 8, !dbg !14143
  store i8 1, i8* %14, align 1, !dbg !14145
  %15 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14146
  %max14 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %15, i32 0, i32 2, !dbg !14146
  %16 = load %union.tree_node*, %union.tree_node** %max14, align 8, !dbg !14146
  %common15 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !14146
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !14146
  %17 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !14146
  %base17 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !14146
  %18 = bitcast %struct.tree_base* %base17 to i64*, !dbg !14146
  %bf.load18 = load i64, i64* %18, align 8, !dbg !14146
  %bf.lshr19 = lshr i64 %bf.load18, 21, !dbg !14146
  %bf.clear20 = and i64 %bf.lshr19, 1, !dbg !14146
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !14146
  %tobool22 = icmp ne i32 %bf.cast21, 0, !dbg !14146
  br i1 %tobool22, label %if.then29, label %land.lhs.true23, !dbg !14146

land.lhs.true23:                                  ; preds = %if.then13
  %19 = load i32, i32* @flag_wrapv, align 4, !dbg !14146
  %tobool24 = icmp ne i32 %19, 0, !dbg !14146
  br i1 %tobool24, label %if.then29, label %land.lhs.true25, !dbg !14146

land.lhs.true25:                                  ; preds = %land.lhs.true23
  %20 = load i32, i32* @flag_trapv, align 4, !dbg !14146
  %tobool26 = icmp ne i32 %20, 0, !dbg !14146
  br i1 %tobool26, label %if.then29, label %land.lhs.true27, !dbg !14146

land.lhs.true27:                                  ; preds = %land.lhs.true25
  %21 = load i32, i32* @flag_strict_overflow, align 4, !dbg !14146
  %tobool28 = icmp ne i32 %21, 0, !dbg !14146
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !14148

if.then29:                                        ; preds = %land.lhs.true27, %land.lhs.true25, %land.lhs.true23, %if.then13
  store i8 0, i8* %retval, align 1, !dbg !14149
  br label %return, !dbg !14149

if.end30:                                         ; preds = %land.lhs.true27
  br label %if.end31, !dbg !14150

if.end31:                                         ; preds = %if.end30, %if.end10
  store i8 1, i8* %retval, align 1, !dbg !14151
  br label %return, !dbg !14151

return:                                           ; preds = %if.end31, %if.then29, %if.then9
  %22 = load i8, i8* %retval, align 1, !dbg !14152
  ret i8 %22, !dbg !14152
}

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) #2

declare dso_local zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @get_vr_for_comparison(%struct.value_range_d* noalias sret %agg.result, i32 %i) #0 !dbg !14153 {
entry:
  %i.addr = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !14156, metadata !DIExpression()), !dbg !14157
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %agg.result, metadata !14158, metadata !DIExpression()), !dbg !14159
  %0 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !14160
  %1 = load i32, i32* %i.addr, align 4, !dbg !14161
  %idxprom = sext i32 %1 to i64, !dbg !14160
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %0, i64 %idxprom, !dbg !14160
  %2 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx, align 8, !dbg !14160
  %3 = bitcast %struct.value_range_d* %agg.result to i8*, !dbg !14162
  %4 = bitcast %struct.value_range_d* %2 to i8*, !dbg !14162
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 32, i1 false), !dbg !14162
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %agg.result, i32 0, i32 0, !dbg !14163
  %5 = load i32, i32* %type, align 8, !dbg !14163
  %cmp = icmp eq i32 %5, 3, !dbg !14165
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !14166

lor.lhs.false:                                    ; preds = %entry
  %type1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %agg.result, i32 0, i32 0, !dbg !14167
  %6 = load i32, i32* %type1, align 8, !dbg !14167
  %cmp2 = icmp eq i32 %6, 0, !dbg !14168
  br i1 %cmp2, label %if.then, label %if.end, !dbg !14169

if.then:                                          ; preds = %lor.lhs.false, %entry
  %type3 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %agg.result, i32 0, i32 0, !dbg !14170
  store i32 1, i32* %type3, align 8, !dbg !14172
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14173
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !14173
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !14173
  %8 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !14173
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %8, i32 0, i32 2, !dbg !14173
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !14173
  %tobool = icmp ne %struct.VEC_tree_gc* %9, null, !dbg !14173
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14173

cond.true:                                        ; preds = %if.then
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14173
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !14173
  %gimple_df5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 3, !dbg !14173
  %11 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df5, align 8, !dbg !14173
  %ssa_names6 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %11, i32 0, i32 2, !dbg !14173
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names6, align 8, !dbg !14173
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %12, i32 0, i32 0, !dbg !14173
  br label %cond.end, !dbg !14173

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !14173

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14173
  %13 = load i32, i32* %i.addr, align 4, !dbg !14173
  %call = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %13), !dbg !14173
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %agg.result, i32 0, i32 1, !dbg !14174
  store %union.tree_node* %call, %union.tree_node** %min, align 8, !dbg !14175
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14176
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !14176
  %gimple_df8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 3, !dbg !14176
  %15 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df8, align 8, !dbg !14176
  %ssa_names9 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %15, i32 0, i32 2, !dbg !14176
  %16 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names9, align 8, !dbg !14176
  %tobool10 = icmp ne %struct.VEC_tree_gc* %16, null, !dbg !14176
  br i1 %tobool10, label %cond.true11, label %cond.false16, !dbg !14176

cond.true11:                                      ; preds = %cond.end
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14176
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !14176
  %gimple_df13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 3, !dbg !14176
  %18 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df13, align 8, !dbg !14176
  %ssa_names14 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %18, i32 0, i32 2, !dbg !14176
  %19 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names14, align 8, !dbg !14176
  %base15 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %19, i32 0, i32 0, !dbg !14176
  br label %cond.end17, !dbg !14176

cond.false16:                                     ; preds = %cond.end
  br label %cond.end17, !dbg !14176

cond.end17:                                       ; preds = %cond.false16, %cond.true11
  %cond18 = phi %struct.VEC_tree_base* [ %base15, %cond.true11 ], [ null, %cond.false16 ], !dbg !14176
  %20 = load i32, i32* %i.addr, align 4, !dbg !14176
  %call19 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond18, i32 %20), !dbg !14176
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %agg.result, i32 0, i32 2, !dbg !14177
  store %union.tree_node* %call19, %union.tree_node** %max, align 8, !dbg !14178
  br label %if.end, !dbg !14179

if.end:                                           ; preds = %cond.end17, %lor.lhs.false
  ret void, !dbg !14180
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vrp_operand_equal_p(%union.tree_node* %val1, %union.tree_node* %val2) #0 !dbg !14181 {
entry:
  %retval = alloca i8, align 1
  %val1.addr = alloca %union.tree_node*, align 8
  %val2.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %val1, %union.tree_node** %val1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val1.addr, metadata !14184, metadata !DIExpression()), !dbg !14185
  store %union.tree_node* %val2, %union.tree_node** %val2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val2.addr, metadata !14186, metadata !DIExpression()), !dbg !14187
  %0 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !14188
  %1 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !14190
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !14191
  br i1 %cmp, label %if.then, label %if.end, !dbg !14192

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !14193
  br label %return, !dbg !14193

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !14194
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !14194
  br i1 %tobool, label %lor.lhs.false, label %if.then4, !dbg !14196

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !14197
  %tobool1 = icmp ne %union.tree_node* %3, null, !dbg !14197
  br i1 %tobool1, label %lor.lhs.false2, label %if.then4, !dbg !14198

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !14199
  %5 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !14200
  %call = call i32 @operand_equal_p(%union.tree_node* %4, %union.tree_node* %5, i32 0), !dbg !14201
  %tobool3 = icmp ne i32 %call, 0, !dbg !14201
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !14202

if.then4:                                         ; preds = %lor.lhs.false2, %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !14203
  br label %return, !dbg !14203

if.end5:                                          ; preds = %lor.lhs.false2
  %6 = load %union.tree_node*, %union.tree_node** %val1.addr, align 8, !dbg !14204
  %call6 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %6), !dbg !14206
  %tobool7 = icmp ne i8 %call6, 0, !dbg !14206
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !14207

if.then8:                                         ; preds = %if.end5
  %7 = load %union.tree_node*, %union.tree_node** %val2.addr, align 8, !dbg !14208
  %call9 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %7), !dbg !14209
  store i8 %call9, i8* %retval, align 1, !dbg !14210
  br label %return, !dbg !14210

if.end10:                                         ; preds = %if.end5
  store i8 1, i8* %retval, align 1, !dbg !14211
  br label %return, !dbg !14211

return:                                           ; preds = %if.end10, %if.then8, %if.then4, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !14212
  ret i8 %8, !dbg !14212
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vrp_bitmap_equal_p(%struct.bitmap_head_def* %b1, %struct.bitmap_head_def* %b2) #0 !dbg !14213 {
entry:
  %b1.addr = alloca %struct.bitmap_head_def*, align 8
  %b2.addr = alloca %struct.bitmap_head_def*, align 8
  store %struct.bitmap_head_def* %b1, %struct.bitmap_head_def** %b1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %b1.addr, metadata !14216, metadata !DIExpression()), !dbg !14217
  store %struct.bitmap_head_def* %b2, %struct.bitmap_head_def** %b2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %b2.addr, metadata !14218, metadata !DIExpression()), !dbg !14219
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %b1.addr, align 8, !dbg !14220
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %b2.addr, align 8, !dbg !14221
  %cmp = icmp eq %struct.bitmap_head_def* %0, %1, !dbg !14222
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !14223

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %b1.addr, align 8, !dbg !14224
  %tobool = icmp ne %struct.bitmap_head_def* %2, null, !dbg !14224
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !14225

land.lhs.true:                                    ; preds = %lor.rhs
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %b2.addr, align 8, !dbg !14226
  %tobool1 = icmp ne %struct.bitmap_head_def* %3, null, !dbg !14226
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !14227

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %b1.addr, align 8, !dbg !14228
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %b2.addr, align 8, !dbg !14229
  %call = call zeroext i8 @bitmap_equal_p(%struct.bitmap_head_def* %4, %struct.bitmap_head_def* %5), !dbg !14230
  %conv = zext i8 %call to i32, !dbg !14230
  %tobool2 = icmp ne i32 %conv, 0, !dbg !14227
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %lor.rhs
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %lor.rhs ], [ %tobool2, %land.rhs ], !dbg !14231
  br label %lor.end, !dbg !14223

lor.end:                                          ; preds = %land.end, %entry
  %7 = phi i1 [ true, %entry ], [ %6, %land.end ]
  %lor.ext = zext i1 %7 to i32, !dbg !14223
  %conv3 = trunc i32 %lor.ext to i8, !dbg !14232
  ret i8 %conv3, !dbg !14233
}

declare dso_local zeroext i8 @bitmap_equal_p(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local %struct.edge_def* @find_taken_edge(%struct.basic_block_def*, %union.tree_node*) #2

declare dso_local void @print_generic_stmt(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_case_label_range(%union.gimple_statement_d* %stmt, %union.tree_node* %min, %union.tree_node* %max, i64* %min_idx, i64* %max_idx) #0 !dbg !14234 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %min.addr = alloca %union.tree_node*, align 8
  %max.addr = alloca %union.tree_node*, align 8
  %min_idx.addr = alloca i64*, align 8
  %max_idx.addr = alloca i64*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %min_take_default = alloca i8, align 1
  %max_take_default = alloca i8, align 1
  %take_default = alloca i8, align 1
  %low = alloca %union.tree_node*, align 8
  %high = alloca %union.tree_node*, align 8
  %k = alloca i64, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !14238, metadata !DIExpression()), !dbg !14239
  store %union.tree_node* %min, %union.tree_node** %min.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %min.addr, metadata !14240, metadata !DIExpression()), !dbg !14241
  store %union.tree_node* %max, %union.tree_node** %max.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %max.addr, metadata !14242, metadata !DIExpression()), !dbg !14243
  store i64* %min_idx, i64** %min_idx.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %min_idx.addr, metadata !14244, metadata !DIExpression()), !dbg !14245
  store i64* %max_idx, i64** %max_idx.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %max_idx.addr, metadata !14246, metadata !DIExpression()), !dbg !14247
  call void @llvm.dbg.declare(metadata i64* %i, metadata !14248, metadata !DIExpression()), !dbg !14249
  call void @llvm.dbg.declare(metadata i64* %j, metadata !14250, metadata !DIExpression()), !dbg !14251
  call void @llvm.dbg.declare(metadata i8* %min_take_default, metadata !14252, metadata !DIExpression()), !dbg !14253
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14254
  %1 = load %union.tree_node*, %union.tree_node** %min.addr, align 8, !dbg !14255
  %call = call zeroext i8 @find_case_label_index(%union.gimple_statement_d* %0, i64 1, %union.tree_node* %1, i64* %i), !dbg !14256
  %tobool = icmp ne i8 %call, 0, !dbg !14257
  %lnot = xor i1 %tobool, true, !dbg !14257
  %lnot.ext = zext i1 %lnot to i32, !dbg !14257
  %conv = trunc i32 %lnot.ext to i8, !dbg !14257
  store i8 %conv, i8* %min_take_default, align 1, !dbg !14253
  call void @llvm.dbg.declare(metadata i8* %max_take_default, metadata !14258, metadata !DIExpression()), !dbg !14259
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14260
  %3 = load i64, i64* %i, align 8, !dbg !14261
  %4 = load %union.tree_node*, %union.tree_node** %max.addr, align 8, !dbg !14262
  %call1 = call zeroext i8 @find_case_label_index(%union.gimple_statement_d* %2, i64 %3, %union.tree_node* %4, i64* %j), !dbg !14263
  %tobool2 = icmp ne i8 %call1, 0, !dbg !14264
  %lnot3 = xor i1 %tobool2, true, !dbg !14264
  %lnot.ext4 = zext i1 %lnot3 to i32, !dbg !14264
  %conv5 = trunc i32 %lnot.ext4 to i8, !dbg !14264
  store i8 %conv5, i8* %max_take_default, align 1, !dbg !14259
  %5 = load i64, i64* %i, align 8, !dbg !14265
  %6 = load i64, i64* %j, align 8, !dbg !14267
  %cmp = icmp eq i64 %5, %6, !dbg !14268
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !14269

land.lhs.true:                                    ; preds = %entry
  %7 = load i8, i8* %min_take_default, align 1, !dbg !14270
  %conv7 = zext i8 %7 to i32, !dbg !14270
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !14270
  br i1 %tobool8, label %land.lhs.true9, label %if.else, !dbg !14271

land.lhs.true9:                                   ; preds = %land.lhs.true
  %8 = load i8, i8* %max_take_default, align 1, !dbg !14272
  %conv10 = zext i8 %8 to i32, !dbg !14272
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !14272
  br i1 %tobool11, label %if.then, label %if.else, !dbg !14273

if.then:                                          ; preds = %land.lhs.true9
  %9 = load i64*, i64** %min_idx.addr, align 8, !dbg !14274
  store i64 1, i64* %9, align 8, !dbg !14276
  %10 = load i64*, i64** %max_idx.addr, align 8, !dbg !14277
  store i64 0, i64* %10, align 8, !dbg !14278
  store i8 0, i8* %retval, align 1, !dbg !14279
  br label %return, !dbg !14279

if.else:                                          ; preds = %land.lhs.true9, %land.lhs.true, %entry
  call void @llvm.dbg.declare(metadata i8* %take_default, metadata !14280, metadata !DIExpression()), !dbg !14282
  %11 = load i8, i8* %min_take_default, align 1, !dbg !14283
  %conv12 = zext i8 %11 to i32, !dbg !14283
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !14283
  br i1 %tobool13, label %lor.end, label %lor.rhs, !dbg !14284

lor.rhs:                                          ; preds = %if.else
  %12 = load i8, i8* %max_take_default, align 1, !dbg !14285
  %conv14 = zext i8 %12 to i32, !dbg !14285
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !14284
  br label %lor.end, !dbg !14284

lor.end:                                          ; preds = %lor.rhs, %if.else
  %13 = phi i1 [ true, %if.else ], [ %tobool15, %lor.rhs ]
  %lor.ext = zext i1 %13 to i32, !dbg !14284
  %conv16 = trunc i32 %lor.ext to i8, !dbg !14283
  store i8 %conv16, i8* %take_default, align 1, !dbg !14282
  call void @llvm.dbg.declare(metadata %union.tree_node** %low, metadata !14286, metadata !DIExpression()), !dbg !14287
  call void @llvm.dbg.declare(metadata %union.tree_node** %high, metadata !14288, metadata !DIExpression()), !dbg !14289
  call void @llvm.dbg.declare(metadata i64* %k, metadata !14290, metadata !DIExpression()), !dbg !14291
  %14 = load i8, i8* %max_take_default, align 1, !dbg !14292
  %tobool17 = icmp ne i8 %14, 0, !dbg !14292
  br i1 %tobool17, label %if.then18, label %if.end, !dbg !14294

if.then18:                                        ; preds = %lor.end
  %15 = load i64, i64* %j, align 8, !dbg !14295
  %dec = add i64 %15, -1, !dbg !14295
  store i64 %dec, i64* %j, align 8, !dbg !14295
  br label %if.end, !dbg !14296

if.end:                                           ; preds = %if.then18, %lor.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14297
  %17 = load i64, i64* %i, align 8, !dbg !14297
  %conv19 = trunc i64 %17 to i32, !dbg !14297
  %call20 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %16, i32 %conv19), !dbg !14297
  %exp = bitcast %union.tree_node* %call20 to %struct.tree_exp*, !dbg !14297
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14297
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14297
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14297
  store %union.tree_node* %18, %union.tree_node** %high, align 8, !dbg !14298
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14299
  %20 = load i64, i64* %i, align 8, !dbg !14299
  %conv21 = trunc i64 %20 to i32, !dbg !14299
  %call22 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %19, i32 %conv21), !dbg !14299
  %exp23 = bitcast %union.tree_node* %call22 to %struct.tree_exp*, !dbg !14299
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !14299
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 1, !dbg !14299
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !14299
  %tobool26 = icmp ne %union.tree_node* %21, null, !dbg !14299
  br i1 %tobool26, label %if.then27, label %if.end33, !dbg !14301

if.then27:                                        ; preds = %if.end
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14302
  %23 = load i64, i64* %i, align 8, !dbg !14302
  %conv28 = trunc i64 %23 to i32, !dbg !14302
  %call29 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %22, i32 %conv28), !dbg !14302
  %exp30 = bitcast %union.tree_node* %call29 to %struct.tree_exp*, !dbg !14302
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 3, !dbg !14302
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i64 0, i64 1, !dbg !14302
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !14302
  store %union.tree_node* %24, %union.tree_node** %high, align 8, !dbg !14303
  br label %if.end33, !dbg !14304

if.end33:                                         ; preds = %if.then27, %if.end
  %25 = load i64, i64* %i, align 8, !dbg !14305
  %add = add i64 %25, 1, !dbg !14307
  store i64 %add, i64* %k, align 8, !dbg !14308
  br label %for.cond, !dbg !14309

for.cond:                                         ; preds = %for.inc, %if.end33
  %26 = load i64, i64* %k, align 8, !dbg !14310
  %27 = load i64, i64* %j, align 8, !dbg !14312
  %cmp34 = icmp ule i64 %26, %27, !dbg !14313
  br i1 %cmp34, label %for.body, label %for.end, !dbg !14314

for.body:                                         ; preds = %for.cond
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14315
  %29 = load i64, i64* %k, align 8, !dbg !14315
  %conv36 = trunc i64 %29 to i32, !dbg !14315
  %call37 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %28, i32 %conv36), !dbg !14315
  %exp38 = bitcast %union.tree_node* %call37 to %struct.tree_exp*, !dbg !14315
  %operands39 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp38, i32 0, i32 3, !dbg !14315
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands39, i64 0, i64 0, !dbg !14315
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx40, align 8, !dbg !14315
  store %union.tree_node* %30, %union.tree_node** %low, align 8, !dbg !14317
  %31 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !14318
  %32 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !14320
  %call41 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %31, %union.tree_node* %32, i32 0), !dbg !14321
  %call42 = call i32 @integer_onep(%union.tree_node* %call41), !dbg !14322
  %tobool43 = icmp ne i32 %call42, 0, !dbg !14322
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !14323

if.then44:                                        ; preds = %for.body
  store i8 1, i8* %take_default, align 1, !dbg !14324
  br label %for.end, !dbg !14326

if.end45:                                         ; preds = %for.body
  %33 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !14327
  store %union.tree_node* %33, %union.tree_node** %high, align 8, !dbg !14328
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14329
  %35 = load i64, i64* %k, align 8, !dbg !14329
  %conv46 = trunc i64 %35 to i32, !dbg !14329
  %call47 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %34, i32 %conv46), !dbg !14329
  %exp48 = bitcast %union.tree_node* %call47 to %struct.tree_exp*, !dbg !14329
  %operands49 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp48, i32 0, i32 3, !dbg !14329
  %arrayidx50 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands49, i64 0, i64 1, !dbg !14329
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !14329
  %tobool51 = icmp ne %union.tree_node* %36, null, !dbg !14329
  br i1 %tobool51, label %if.then52, label %if.end58, !dbg !14331

if.then52:                                        ; preds = %if.end45
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14332
  %38 = load i64, i64* %k, align 8, !dbg !14332
  %conv53 = trunc i64 %38 to i32, !dbg !14332
  %call54 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %37, i32 %conv53), !dbg !14332
  %exp55 = bitcast %union.tree_node* %call54 to %struct.tree_exp*, !dbg !14332
  %operands56 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp55, i32 0, i32 3, !dbg !14332
  %arrayidx57 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands56, i64 0, i64 1, !dbg !14332
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx57, align 8, !dbg !14332
  store %union.tree_node* %39, %union.tree_node** %high, align 8, !dbg !14333
  br label %if.end58, !dbg !14334

if.end58:                                         ; preds = %if.then52, %if.end45
  br label %for.inc, !dbg !14335

for.inc:                                          ; preds = %if.end58
  %40 = load i64, i64* %k, align 8, !dbg !14336
  %inc = add i64 %40, 1, !dbg !14336
  store i64 %inc, i64* %k, align 8, !dbg !14336
  br label %for.cond, !dbg !14337, !llvm.loop !14338

for.end:                                          ; preds = %if.then44, %for.cond
  %41 = load i64, i64* %i, align 8, !dbg !14340
  %42 = load i64*, i64** %min_idx.addr, align 8, !dbg !14341
  store i64 %41, i64* %42, align 8, !dbg !14342
  %43 = load i64, i64* %j, align 8, !dbg !14343
  %44 = load i64*, i64** %max_idx.addr, align 8, !dbg !14344
  store i64 %43, i64* %44, align 8, !dbg !14345
  %45 = load i8, i8* %take_default, align 1, !dbg !14346
  %tobool59 = icmp ne i8 %45, 0, !dbg !14347
  %lnot60 = xor i1 %tobool59, true, !dbg !14347
  %lnot.ext61 = zext i1 %lnot60 to i32, !dbg !14347
  %conv62 = trunc i32 %lnot.ext61 to i8, !dbg !14347
  store i8 %conv62, i8* %retval, align 1, !dbg !14348
  br label %return, !dbg !14348

return:                                           ; preds = %for.end, %if.then
  %46 = load i8, i8* %retval, align 1, !dbg !14349
  ret i8 %46, !dbg !14349
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_case_label_index(%union.gimple_statement_d* %stmt, i64 %start_idx, %union.tree_node* %val, i64* %idx) #0 !dbg !14350 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %start_idx.addr = alloca i64, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %idx.addr = alloca i64*, align 8
  %n = alloca i64, align 8
  %low = alloca i64, align 8
  %high = alloca i64, align 8
  %t = alloca %union.tree_node*, align 8
  %cmp2 = alloca i32, align 4
  %i = alloca i64, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !14353, metadata !DIExpression()), !dbg !14354
  store i64 %start_idx, i64* %start_idx.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %start_idx.addr, metadata !14355, metadata !DIExpression()), !dbg !14356
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !14357, metadata !DIExpression()), !dbg !14358
  store i64* %idx, i64** %idx.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %idx.addr, metadata !14359, metadata !DIExpression()), !dbg !14360
  call void @llvm.dbg.declare(metadata i64* %n, metadata !14361, metadata !DIExpression()), !dbg !14362
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14363
  %call = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %0), !dbg !14364
  %conv = zext i32 %call to i64, !dbg !14364
  store i64 %conv, i64* %n, align 8, !dbg !14362
  call void @llvm.dbg.declare(metadata i64* %low, metadata !14365, metadata !DIExpression()), !dbg !14366
  call void @llvm.dbg.declare(metadata i64* %high, metadata !14367, metadata !DIExpression()), !dbg !14368
  %1 = load i64, i64* %start_idx.addr, align 8, !dbg !14369
  store i64 %1, i64* %low, align 8, !dbg !14371
  %2 = load i64, i64* %n, align 8, !dbg !14372
  store i64 %2, i64* %high, align 8, !dbg !14373
  br label %for.cond, !dbg !14374

for.cond:                                         ; preds = %if.end26, %entry
  %3 = load i64, i64* %high, align 8, !dbg !14375
  %4 = load i64, i64* %low, align 8, !dbg !14377
  %cmp = icmp ne i64 %3, %4, !dbg !14378
  br i1 %cmp, label %for.body, label %for.end, !dbg !14379

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !14380, metadata !DIExpression()), !dbg !14382
  call void @llvm.dbg.declare(metadata i32* %cmp2, metadata !14383, metadata !DIExpression()), !dbg !14384
  call void @llvm.dbg.declare(metadata i64* %i, metadata !14385, metadata !DIExpression()), !dbg !14386
  %5 = load i64, i64* %high, align 8, !dbg !14387
  %6 = load i64, i64* %low, align 8, !dbg !14388
  %add = add i64 %5, %6, !dbg !14389
  %div = udiv i64 %add, 2, !dbg !14390
  store i64 %div, i64* %i, align 8, !dbg !14386
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14391
  %8 = load i64, i64* %i, align 8, !dbg !14392
  %conv3 = trunc i64 %8 to i32, !dbg !14392
  %call4 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %7, i32 %conv3), !dbg !14393
  store %union.tree_node* %call4, %union.tree_node** %t, align 8, !dbg !14394
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14395
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !14395
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14395
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14395
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14395
  %11 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14396
  %call5 = call i32 @tree_int_cst_compare(%union.tree_node* %10, %union.tree_node* %11), !dbg !14397
  store i32 %call5, i32* %cmp2, align 4, !dbg !14398
  %12 = load i32, i32* %cmp2, align 4, !dbg !14399
  %cmp6 = icmp eq i32 %12, 0, !dbg !14401
  br i1 %cmp6, label %if.then, label %if.else, !dbg !14402

if.then:                                          ; preds = %for.body
  %13 = load i64, i64* %i, align 8, !dbg !14403
  %14 = load i64*, i64** %idx.addr, align 8, !dbg !14405
  store i64 %13, i64* %14, align 8, !dbg !14406
  store i8 1, i8* %retval, align 1, !dbg !14407
  br label %return, !dbg !14407

if.else:                                          ; preds = %for.body
  %15 = load i32, i32* %cmp2, align 4, !dbg !14408
  %cmp8 = icmp sgt i32 %15, 0, !dbg !14410
  br i1 %cmp8, label %if.then10, label %if.else11, !dbg !14411

if.then10:                                        ; preds = %if.else
  %16 = load i64, i64* %i, align 8, !dbg !14412
  store i64 %16, i64* %high, align 8, !dbg !14413
  br label %if.end25, !dbg !14414

if.else11:                                        ; preds = %if.else
  %17 = load i64, i64* %i, align 8, !dbg !14415
  %add12 = add i64 %17, 1, !dbg !14417
  store i64 %add12, i64* %low, align 8, !dbg !14418
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14419
  %exp13 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !14419
  %operands14 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp13, i32 0, i32 3, !dbg !14419
  %arrayidx15 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands14, i64 0, i64 1, !dbg !14419
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8, !dbg !14419
  %cmp16 = icmp ne %union.tree_node* %19, null, !dbg !14421
  br i1 %cmp16, label %land.lhs.true, label %if.end, !dbg !14422

land.lhs.true:                                    ; preds = %if.else11
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14423
  %exp18 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !14423
  %operands19 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp18, i32 0, i32 3, !dbg !14423
  %arrayidx20 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands19, i64 0, i64 1, !dbg !14423
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8, !dbg !14423
  %22 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14424
  %call21 = call i32 @tree_int_cst_compare(%union.tree_node* %21, %union.tree_node* %22), !dbg !14425
  %cmp22 = icmp sge i32 %call21, 0, !dbg !14426
  br i1 %cmp22, label %if.then24, label %if.end, !dbg !14427

if.then24:                                        ; preds = %land.lhs.true
  %23 = load i64, i64* %i, align 8, !dbg !14428
  %24 = load i64*, i64** %idx.addr, align 8, !dbg !14430
  store i64 %23, i64* %24, align 8, !dbg !14431
  store i8 1, i8* %retval, align 1, !dbg !14432
  br label %return, !dbg !14432

if.end:                                           ; preds = %land.lhs.true, %if.else11
  br label %if.end25

if.end25:                                         ; preds = %if.end, %if.then10
  br label %if.end26

if.end26:                                         ; preds = %if.end25
  br label %for.cond, !dbg !14433, !llvm.loop !14434

for.end:                                          ; preds = %for.cond
  %25 = load i64, i64* %high, align 8, !dbg !14436
  %26 = load i64*, i64** %idx.addr, align 8, !dbg !14437
  store i64 %25, i64* %26, align 8, !dbg !14438
  store i8 0, i8* %retval, align 1, !dbg !14439
  br label %return, !dbg !14439

return:                                           ; preds = %for.end, %if.then24, %if.then
  %27 = load i8, i8* %retval, align 1, !dbg !14440
  ret i8 %27, !dbg !14440
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !14441 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14444, metadata !DIExpression()), !dbg !14445
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !14446, metadata !DIExpression()), !dbg !14447
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14448
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !14448
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 0, !dbg !14448
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !14448
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !14448
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14448

cond.true:                                        ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14448
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !14448
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call1, i32 0, i32 0, !dbg !14448
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !14448
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !14448
  br label %cond.end, !dbg !14448

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14448

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14448
  %4 = load i64, i64* %i.addr, align 8, !dbg !14448
  %conv = trunc i64 %4 to i32, !dbg !14448
  %call3 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv), !dbg !14448
  ret %struct.edge_def* %call3, !dbg !14449
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !14450 {
entry:
  %retval = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !14453, metadata !DIExpression()), !dbg !14454
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !14455, metadata !DIExpression()), !dbg !14456
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14457
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !14458
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !14456
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !14459
  %tobool = icmp ne %struct.basic_block_def* %1, null, !dbg !14459
  br i1 %tobool, label %if.end, label %if.then, !dbg !14461

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !14462
  br label %return, !dbg !14462

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !14463
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !14464
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !14464
  store %struct.loop* %3, %struct.loop** %retval, align 8, !dbg !14465
  br label %return, !dbg !14465

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !14466
  ret %struct.loop* %4, !dbg !14466
}

; Function Attrs: noinline nounwind uwtable
define internal void @adjust_range_with_scev(%struct.value_range_d* %vr, %struct.loop* %loop, %union.gimple_statement_d* %stmt, %union.tree_node* %var) #0 !dbg !14467 {
entry:
  %vr.addr = alloca %struct.value_range_d*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  %chrec = alloca %union.tree_node*, align 8
  %tmin = alloca %union.tree_node*, align 8
  %tmax = alloca %union.tree_node*, align 8
  %min = alloca %union.tree_node*, align 8
  %max = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %dir = alloca i32, align 4
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !14470, metadata !DIExpression()), !dbg !14471
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !14472, metadata !DIExpression()), !dbg !14473
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !14474, metadata !DIExpression()), !dbg !14475
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !14476, metadata !DIExpression()), !dbg !14477
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !14478, metadata !DIExpression()), !dbg !14479
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !14480, metadata !DIExpression()), !dbg !14481
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec, metadata !14482, metadata !DIExpression()), !dbg !14483
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmin, metadata !14484, metadata !DIExpression()), !dbg !14485
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmax, metadata !14486, metadata !DIExpression()), !dbg !14487
  call void @llvm.dbg.declare(metadata %union.tree_node** %min, metadata !14488, metadata !DIExpression()), !dbg !14489
  call void @llvm.dbg.declare(metadata %union.tree_node** %max, metadata !14490, metadata !DIExpression()), !dbg !14491
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !14492, metadata !DIExpression()), !dbg !14493
  call void @llvm.dbg.declare(metadata i32* %dir, metadata !14494, metadata !DIExpression()), !dbg !14495
  %0 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14496
  %type1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %0, i32 0, i32 0, !dbg !14498
  %1 = load i32, i32* %type1, align 8, !dbg !14498
  %cmp = icmp eq i32 %1, 2, !dbg !14499
  br i1 %cmp, label %if.then, label %if.end, !dbg !14500

if.then:                                          ; preds = %entry
  br label %if.end133, !dbg !14501

if.end:                                           ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14502
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14503
  %4 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !14504
  %call = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %3, %union.tree_node* %4), !dbg !14505
  %call2 = call %union.tree_node* @instantiate_parameters(%struct.loop* %2, %union.tree_node* %call), !dbg !14506
  store %union.tree_node* %call2, %union.tree_node** %chrec, align 8, !dbg !14507
  %5 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !14508
  %call3 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %5), !dbg !14510
  %tobool = icmp ne i8 %call3, 0, !dbg !14510
  br i1 %tobool, label %if.then4, label %if.end5, !dbg !14511

if.then4:                                         ; preds = %if.end
  %6 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14512
  %7 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !14514
  %8 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14515
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %8, i32 0, i32 3, !dbg !14516
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !14516
  call void @set_value_range_to_value(%struct.value_range_d* %6, %union.tree_node* %7, %struct.bitmap_head_def* %9), !dbg !14517
  br label %if.end133, !dbg !14518

if.end5:                                          ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !14519
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !14519
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !14519
  %bf.load = load i64, i64* %11, align 8, !dbg !14519
  %bf.clear = and i64 %bf.load, 65535, !dbg !14519
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14519
  %cmp6 = icmp ne i32 %bf.cast, 146, !dbg !14521
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !14522

if.then7:                                         ; preds = %if.end5
  br label %if.end133, !dbg !14523

if.end8:                                          ; preds = %if.end5
  %12 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !14524
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14525
  %num = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 0, !dbg !14526
  %14 = load i32, i32* %num, align 8, !dbg !14526
  %call9 = call %union.tree_node* @initial_condition_in_loop_num(%union.tree_node* %12, i32 %14), !dbg !14527
  store %union.tree_node* %call9, %union.tree_node** %init, align 8, !dbg !14528
  %15 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !14529
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14530
  %num10 = getelementptr inbounds %struct.loop, %struct.loop* %16, i32 0, i32 0, !dbg !14531
  %17 = load i32, i32* %num10, align 8, !dbg !14531
  %call11 = call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %15, i32 %17), !dbg !14532
  store %union.tree_node* %call11, %union.tree_node** %step, align 8, !dbg !14533
  %18 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14534
  %cmp12 = icmp eq %union.tree_node* %18, null, !dbg !14536
  br i1 %cmp12, label %if.then18, label %lor.lhs.false, !dbg !14537

lor.lhs.false:                                    ; preds = %if.end8
  %19 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14538
  %call13 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %19), !dbg !14539
  %tobool14 = icmp ne i8 %call13, 0, !dbg !14539
  br i1 %tobool14, label %lor.lhs.false15, label %if.then18, !dbg !14540

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %20 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14541
  %call16 = call zeroext i8 @valid_value_p(%union.tree_node* %20), !dbg !14542
  %tobool17 = icmp ne i8 %call16, 0, !dbg !14542
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !14543

if.then18:                                        ; preds = %lor.lhs.false15, %lor.lhs.false, %if.end8
  br label %if.end133, !dbg !14544

if.end19:                                         ; preds = %lor.lhs.false15
  %21 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !14545
  %call20 = call i32 @scev_direction(%union.tree_node* %21), !dbg !14546
  store i32 %call20, i32* %dir, align 4, !dbg !14547
  %22 = load i32, i32* %dir, align 4, !dbg !14548
  %cmp21 = icmp eq i32 %22, 2, !dbg !14550
  br i1 %cmp21, label %if.then26, label %lor.lhs.false22, !dbg !14551

lor.lhs.false22:                                  ; preds = %if.end19
  %23 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14552
  %24 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14553
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14554
  %26 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !14555
  %call23 = call %struct.loop* @get_chrec_loop(%union.tree_node* %26), !dbg !14556
  %call24 = call zeroext i8 @scev_probably_wraps_p(%union.tree_node* %23, %union.tree_node* %24, %union.gimple_statement_d* %25, %struct.loop* %call23, i8 zeroext 1), !dbg !14557
  %conv = zext i8 %call24 to i32, !dbg !14557
  %tobool25 = icmp ne i32 %conv, 0, !dbg !14557
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !14558

if.then26:                                        ; preds = %lor.lhs.false22, %if.end19
  br label %if.end133, !dbg !14559

if.end27:                                         ; preds = %lor.lhs.false22
  %27 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !14560
  %common = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !14560
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14560
  %28 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !14560
  store %union.tree_node* %28, %union.tree_node** %type, align 8, !dbg !14561
  %29 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14562
  %base29 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !14562
  %30 = bitcast %struct.tree_base* %base29 to i64*, !dbg !14562
  %bf.load30 = load i64, i64* %30, align 8, !dbg !14562
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !14562
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !14562
  %cmp33 = icmp eq i32 %bf.cast32, 10, !dbg !14562
  br i1 %cmp33, label %if.then45, label %lor.lhs.false35, !dbg !14562

lor.lhs.false35:                                  ; preds = %if.end27
  %31 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14562
  %base36 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !14562
  %32 = bitcast %struct.tree_base* %base36 to i64*, !dbg !14562
  %bf.load37 = load i64, i64* %32, align 8, !dbg !14562
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !14562
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !14562
  %cmp40 = icmp eq i32 %bf.cast39, 12, !dbg !14562
  br i1 %cmp40, label %if.then45, label %lor.lhs.false42, !dbg !14564

lor.lhs.false42:                                  ; preds = %lor.lhs.false35
  %33 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14565
  %type43 = bitcast %union.tree_node* %33 to %struct.tree_type*, !dbg !14565
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 13, !dbg !14565
  %34 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !14565
  %tobool44 = icmp ne %union.tree_node* %34, null, !dbg !14565
  br i1 %tobool44, label %if.else, label %if.then45, !dbg !14566

if.then45:                                        ; preds = %lor.lhs.false42, %lor.lhs.false35, %if.end27
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14567
  %36 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14568
  %call46 = call %union.tree_node* @lower_bound_in_type(%union.tree_node* %35, %union.tree_node* %36), !dbg !14569
  store %union.tree_node* %call46, %union.tree_node** %tmin, align 8, !dbg !14570
  br label %if.end49, !dbg !14571

if.else:                                          ; preds = %lor.lhs.false42
  %37 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14572
  %type47 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !14572
  %minval48 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type47, i32 0, i32 13, !dbg !14572
  %38 = load %union.tree_node*, %union.tree_node** %minval48, align 8, !dbg !14572
  store %union.tree_node* %38, %union.tree_node** %tmin, align 8, !dbg !14573
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.then45
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14574
  %base50 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !14574
  %40 = bitcast %struct.tree_base* %base50 to i64*, !dbg !14574
  %bf.load51 = load i64, i64* %40, align 8, !dbg !14574
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !14574
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !14574
  %cmp54 = icmp eq i32 %bf.cast53, 10, !dbg !14574
  br i1 %cmp54, label %if.then66, label %lor.lhs.false56, !dbg !14574

lor.lhs.false56:                                  ; preds = %if.end49
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14574
  %base57 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !14574
  %42 = bitcast %struct.tree_base* %base57 to i64*, !dbg !14574
  %bf.load58 = load i64, i64* %42, align 8, !dbg !14574
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !14574
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !14574
  %cmp61 = icmp eq i32 %bf.cast60, 12, !dbg !14574
  br i1 %cmp61, label %if.then66, label %lor.lhs.false63, !dbg !14576

lor.lhs.false63:                                  ; preds = %lor.lhs.false56
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14577
  %type64 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !14577
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type64, i32 0, i32 14, !dbg !14577
  %44 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !14577
  %tobool65 = icmp ne %union.tree_node* %44, null, !dbg !14577
  br i1 %tobool65, label %if.else68, label %if.then66, !dbg !14578

if.then66:                                        ; preds = %lor.lhs.false63, %lor.lhs.false56, %if.end49
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14579
  %46 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14580
  %call67 = call %union.tree_node* @upper_bound_in_type(%union.tree_node* %45, %union.tree_node* %46), !dbg !14581
  store %union.tree_node* %call67, %union.tree_node** %tmax, align 8, !dbg !14582
  br label %if.end71, !dbg !14583

if.else68:                                        ; preds = %lor.lhs.false63
  %47 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14584
  %type69 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !14584
  %maxval70 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type69, i32 0, i32 14, !dbg !14584
  %48 = load %union.tree_node*, %union.tree_node** %maxval70, align 8, !dbg !14584
  store %union.tree_node* %48, %union.tree_node** %tmax, align 8, !dbg !14585
  br label %if.end71

if.end71:                                         ; preds = %if.else68, %if.then66
  %49 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14586
  %type72 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %49, i32 0, i32 0, !dbg !14588
  %50 = load i32, i32* %type72, align 8, !dbg !14588
  %cmp73 = icmp eq i32 %50, 3, !dbg !14589
  br i1 %cmp73, label %if.then79, label %lor.lhs.false75, !dbg !14590

lor.lhs.false75:                                  ; preds = %if.end71
  %51 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14591
  %type76 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %51, i32 0, i32 0, !dbg !14592
  %52 = load i32, i32* %type76, align 8, !dbg !14592
  %cmp77 = icmp eq i32 %52, 0, !dbg !14593
  br i1 %cmp77, label %if.then79, label %if.else91, !dbg !14594

if.then79:                                        ; preds = %lor.lhs.false75, %if.end71
  %53 = load %union.tree_node*, %union.tree_node** %tmin, align 8, !dbg !14595
  store %union.tree_node* %53, %union.tree_node** %min, align 8, !dbg !14597
  %54 = load %union.tree_node*, %union.tree_node** %tmax, align 8, !dbg !14598
  store %union.tree_node* %54, %union.tree_node** %max, align 8, !dbg !14599
  %55 = load i32, i32* %dir, align 4, !dbg !14600
  %cmp80 = icmp eq i32 %55, 1, !dbg !14602
  br i1 %cmp80, label %if.then82, label %if.else83, !dbg !14603

if.then82:                                        ; preds = %if.then79
  %56 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14604
  store %union.tree_node* %56, %union.tree_node** %max, align 8, !dbg !14605
  br label %if.end84, !dbg !14606

if.else83:                                        ; preds = %if.then79
  %57 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14607
  store %union.tree_node* %57, %union.tree_node** %min, align 8, !dbg !14608
  br label %if.end84

if.end84:                                         ; preds = %if.else83, %if.then82
  %58 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !14609
  %59 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !14611
  %call85 = call i32 @compare_values(%union.tree_node* %58, %union.tree_node* %59), !dbg !14612
  %cmp86 = icmp eq i32 %call85, 1, !dbg !14613
  br i1 %cmp86, label %if.then88, label %if.end89, !dbg !14614

if.then88:                                        ; preds = %if.end84
  br label %if.end133, !dbg !14615

if.end89:                                         ; preds = %if.end84
  %60 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14616
  %61 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !14617
  %62 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !14618
  %63 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14619
  %equiv90 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %63, i32 0, i32 3, !dbg !14620
  %64 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv90, align 8, !dbg !14620
  call void @set_value_range(%struct.value_range_d* %60, i32 1, %union.tree_node* %61, %union.tree_node* %62, %struct.bitmap_head_def* %64), !dbg !14621
  br label %if.end133, !dbg !14622

if.else91:                                        ; preds = %lor.lhs.false75
  %65 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14623
  %type92 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %65, i32 0, i32 0, !dbg !14625
  %66 = load i32, i32* %type92, align 8, !dbg !14625
  %cmp93 = icmp eq i32 %66, 1, !dbg !14626
  br i1 %cmp93, label %if.then95, label %if.end132, !dbg !14627

if.then95:                                        ; preds = %if.else91
  %67 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14628
  %min96 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %67, i32 0, i32 1, !dbg !14630
  %68 = load %union.tree_node*, %union.tree_node** %min96, align 8, !dbg !14630
  store %union.tree_node* %68, %union.tree_node** %min, align 8, !dbg !14631
  %69 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14632
  %max97 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %69, i32 0, i32 2, !dbg !14633
  %70 = load %union.tree_node*, %union.tree_node** %max97, align 8, !dbg !14633
  store %union.tree_node* %70, %union.tree_node** %max, align 8, !dbg !14634
  %71 = load i32, i32* %dir, align 4, !dbg !14635
  %cmp98 = icmp eq i32 %71, 1, !dbg !14637
  br i1 %cmp98, label %if.then100, label %if.else115, !dbg !14638

if.then100:                                       ; preds = %if.then95
  %72 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14639
  %73 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !14642
  %call101 = call i32 @compare_values(%union.tree_node* %72, %union.tree_node* %73), !dbg !14643
  %cmp102 = icmp eq i32 %call101, -1, !dbg !14644
  br i1 %cmp102, label %if.then104, label %if.end110, !dbg !14645

if.then104:                                       ; preds = %if.then100
  %74 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14646
  store %union.tree_node* %74, %union.tree_node** %max, align 8, !dbg !14648
  %75 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !14649
  %76 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !14651
  %call105 = call i32 @compare_values(%union.tree_node* %75, %union.tree_node* %76), !dbg !14652
  %cmp106 = icmp eq i32 %call105, 1, !dbg !14653
  br i1 %cmp106, label %if.then108, label %if.end109, !dbg !14654

if.then108:                                       ; preds = %if.then104
  br label %if.end133, !dbg !14655

if.end109:                                        ; preds = %if.then104
  br label %if.end110, !dbg !14656

if.end110:                                        ; preds = %if.end109, %if.then100
  %77 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !14657
  %call111 = call zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %77), !dbg !14659
  %tobool112 = icmp ne i8 %call111, 0, !dbg !14659
  br i1 %tobool112, label %if.then113, label %if.end114, !dbg !14660

if.then113:                                       ; preds = %if.end110
  %78 = load %union.tree_node*, %union.tree_node** %tmin, align 8, !dbg !14661
  store %union.tree_node* %78, %union.tree_node** %min, align 8, !dbg !14662
  br label %if.end114, !dbg !14663

if.end114:                                        ; preds = %if.then113, %if.end110
  br label %if.end130, !dbg !14664

if.else115:                                       ; preds = %if.then95
  %79 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14665
  %80 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !14668
  %call116 = call i32 @compare_values(%union.tree_node* %79, %union.tree_node* %80), !dbg !14669
  %cmp117 = icmp eq i32 %call116, 1, !dbg !14670
  br i1 %cmp117, label %if.then119, label %if.end125, !dbg !14671

if.then119:                                       ; preds = %if.else115
  %81 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14672
  store %union.tree_node* %81, %union.tree_node** %min, align 8, !dbg !14674
  %82 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !14675
  %83 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !14677
  %call120 = call i32 @compare_values(%union.tree_node* %82, %union.tree_node* %83), !dbg !14678
  %cmp121 = icmp eq i32 %call120, 1, !dbg !14679
  br i1 %cmp121, label %if.then123, label %if.end124, !dbg !14680

if.then123:                                       ; preds = %if.then119
  br label %if.end133, !dbg !14681

if.end124:                                        ; preds = %if.then119
  br label %if.end125, !dbg !14682

if.end125:                                        ; preds = %if.end124, %if.else115
  %84 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !14683
  %call126 = call zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %84), !dbg !14685
  %tobool127 = icmp ne i8 %call126, 0, !dbg !14685
  br i1 %tobool127, label %if.then128, label %if.end129, !dbg !14686

if.then128:                                       ; preds = %if.end125
  %85 = load %union.tree_node*, %union.tree_node** %tmax, align 8, !dbg !14687
  store %union.tree_node* %85, %union.tree_node** %max, align 8, !dbg !14688
  br label %if.end129, !dbg !14689

if.end129:                                        ; preds = %if.then128, %if.end125
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.end114
  %86 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14690
  %87 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !14691
  %88 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !14692
  %89 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !14693
  %equiv131 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %89, i32 0, i32 3, !dbg !14694
  %90 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv131, align 8, !dbg !14694
  call void @set_value_range(%struct.value_range_d* %86, i32 1, %union.tree_node* %87, %union.tree_node* %88, %struct.bitmap_head_def* %90), !dbg !14695
  br label %if.end132, !dbg !14696

if.end132:                                        ; preds = %if.end130, %if.else91
  br label %if.end133

if.end133:                                        ; preds = %if.then, %if.then4, %if.then7, %if.then18, %if.then26, %if.then88, %if.then108, %if.then123, %if.end132, %if.end89
  ret void, !dbg !14697
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vrp_var_may_overflow(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !14698 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %l = alloca %struct.loop*, align 8
  %chrec = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !14701, metadata !DIExpression()), !dbg !14702
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !14703, metadata !DIExpression()), !dbg !14704
  call void @llvm.dbg.declare(metadata %struct.loop** %l, metadata !14705, metadata !DIExpression()), !dbg !14706
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec, metadata !14707, metadata !DIExpression()), !dbg !14708
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !14709, metadata !DIExpression()), !dbg !14710
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !14711, metadata !DIExpression()), !dbg !14712
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14713
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !14713
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !14713
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !14713
  %cmp = icmp eq %struct.loops* %1, null, !dbg !14715
  br i1 %cmp, label %if.then, label %if.end, !dbg !14716

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !14717
  br label %return, !dbg !14717

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14718
  %call = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %2), !dbg !14719
  store %struct.loop* %call, %struct.loop** %l, align 8, !dbg !14720
  %3 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !14721
  %cmp1 = icmp eq %struct.loop* %3, null, !dbg !14723
  br i1 %cmp1, label %if.then3, label %lor.lhs.false, !dbg !14724

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !14725
  %call2 = call %struct.loop* @loop_outer(%struct.loop* %4), !dbg !14726
  %tobool = icmp ne %struct.loop* %call2, null, !dbg !14726
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !14727

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  store i8 1, i8* %retval, align 1, !dbg !14728
  br label %return, !dbg !14728

if.end4:                                          ; preds = %lor.lhs.false
  %5 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !14729
  %6 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !14730
  %7 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !14731
  %call5 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %6, %union.tree_node* %7), !dbg !14732
  %call6 = call %union.tree_node* @instantiate_parameters(%struct.loop* %5, %union.tree_node* %call5), !dbg !14733
  store %union.tree_node* %call6, %union.tree_node** %chrec, align 8, !dbg !14734
  %8 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !14735
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !14735
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !14735
  %bf.load = load i64, i64* %9, align 8, !dbg !14735
  %bf.clear = and i64 %bf.load, 65535, !dbg !14735
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14735
  %cmp7 = icmp ne i32 %bf.cast, 146, !dbg !14737
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !14738

if.then8:                                         ; preds = %if.end4
  store i8 1, i8* %retval, align 1, !dbg !14739
  br label %return, !dbg !14739

if.end9:                                          ; preds = %if.end4
  %10 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !14740
  %11 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !14741
  %num = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 0, !dbg !14742
  %12 = load i32, i32* %num, align 8, !dbg !14742
  %call10 = call %union.tree_node* @initial_condition_in_loop_num(%union.tree_node* %10, i32 %12), !dbg !14743
  store %union.tree_node* %call10, %union.tree_node** %init, align 8, !dbg !14744
  %13 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !14745
  %14 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !14746
  %num11 = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 0, !dbg !14747
  %15 = load i32, i32* %num11, align 8, !dbg !14747
  %call12 = call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %13, i32 %15), !dbg !14748
  store %union.tree_node* %call12, %union.tree_node** %step, align 8, !dbg !14749
  %16 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14750
  %cmp13 = icmp eq %union.tree_node* %16, null, !dbg !14752
  br i1 %cmp13, label %if.then20, label %lor.lhs.false14, !dbg !14753

lor.lhs.false14:                                  ; preds = %if.end9
  %17 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14754
  %call15 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %17), !dbg !14755
  %tobool16 = icmp ne i8 %call15, 0, !dbg !14755
  br i1 %tobool16, label %lor.lhs.false17, label %if.then20, !dbg !14756

lor.lhs.false17:                                  ; preds = %lor.lhs.false14
  %18 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14757
  %call18 = call zeroext i8 @valid_value_p(%union.tree_node* %18), !dbg !14758
  %tobool19 = icmp ne i8 %call18, 0, !dbg !14758
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !14759

if.then20:                                        ; preds = %lor.lhs.false17, %lor.lhs.false14, %if.end9
  store i8 1, i8* %retval, align 1, !dbg !14760
  br label %return, !dbg !14760

if.end21:                                         ; preds = %lor.lhs.false17
  %19 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14761
  %20 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14763
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14764
  %22 = load %union.tree_node*, %union.tree_node** %chrec, align 8, !dbg !14765
  %call22 = call %struct.loop* @get_chrec_loop(%union.tree_node* %22), !dbg !14766
  %call23 = call zeroext i8 @scev_probably_wraps_p(%union.tree_node* %19, %union.tree_node* %20, %union.gimple_statement_d* %21, %struct.loop* %call22, i8 zeroext 1), !dbg !14767
  %tobool24 = icmp ne i8 %call23, 0, !dbg !14767
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !14768

if.then25:                                        ; preds = %if.end21
  store i8 1, i8* %retval, align 1, !dbg !14769
  br label %return, !dbg !14769

if.end26:                                         ; preds = %if.end21
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !14770
  %tobool27 = icmp ne %struct._IO_FILE* %23, null, !dbg !14770
  br i1 %tobool27, label %land.lhs.true, label %if.end31, !dbg !14772

land.lhs.true:                                    ; preds = %if.end26
  %24 = load i32, i32* @dump_flags, align 4, !dbg !14773
  %and = and i32 %24, 8, !dbg !14774
  %cmp28 = icmp ne i32 %and, 0, !dbg !14775
  br i1 %cmp28, label %if.then29, label %if.end31, !dbg !14776

if.then29:                                        ; preds = %land.lhs.true
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !14777
  %26 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !14779
  call void @print_generic_expr(%struct._IO_FILE* %25, %union.tree_node* %26, i32 0), !dbg !14780
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !14781
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.52, i64 0, i64 0)), !dbg !14782
  br label %if.end31, !dbg !14783

if.end31:                                         ; preds = %if.then29, %land.lhs.true, %if.end26
  store i8 0, i8* %retval, align 1, !dbg !14784
  br label %return, !dbg !14784

return:                                           ; preds = %if.end31, %if.then25, %if.then20, %if.then8, %if.then3, %if.then
  %28 = load i8, i8* %retval, align 1, !dbg !14785
  ret i8 %28, !dbg !14785
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_parameters(%struct.loop* %loop, %union.tree_node* %chrec) #0 !dbg !14786 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !14790, metadata !DIExpression()), !dbg !14791
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !14792, metadata !DIExpression()), !dbg !14793
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14794
  %call = call %struct.basic_block_def* @block_before_loop(%struct.loop* %0), !dbg !14795
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14796
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !14797
  %call1 = call %union.tree_node* @instantiate_scev(%struct.basic_block_def* %call, %struct.loop* %1, %union.tree_node* %2), !dbg !14798
  ret %union.tree_node* %call1, !dbg !14799
}

declare dso_local %union.tree_node* @analyze_scalar_evolution(%struct.loop*, %union.tree_node*) #2

declare dso_local %union.tree_node* @initial_condition_in_loop_num(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @evolution_part_in_loop_num(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @valid_value_p(%union.tree_node* %expr) #0 !dbg !14800 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !14803, metadata !DIExpression()), !dbg !14804
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !14805
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !14805
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !14805
  %bf.load = load i64, i64* %1, align 8, !dbg !14805
  %bf.clear = and i64 %bf.load, 65535, !dbg !14805
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14805
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !14807
  br i1 %cmp, label %if.then, label %if.end, !dbg !14808

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !14809
  br label %return, !dbg !14809

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !14810
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !14810
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !14810
  %bf.load2 = load i64, i64* %3, align 8, !dbg !14810
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !14810
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !14810
  %cmp5 = icmp eq i32 %bf.cast4, 63, !dbg !14812
  br i1 %cmp5, label %if.then11, label %lor.lhs.false, !dbg !14813

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !14814
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !14814
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !14814
  %bf.load7 = load i64, i64* %5, align 8, !dbg !14814
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !14814
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !14814
  %cmp10 = icmp eq i32 %bf.cast9, 64, !dbg !14815
  br i1 %cmp10, label %if.then11, label %if.end25, !dbg !14816

if.then11:                                        ; preds = %lor.lhs.false, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !14817
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !14817
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14817
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14817
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14817
  %base12 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !14817
  %8 = bitcast %struct.tree_base* %base12 to i64*, !dbg !14817
  %bf.load13 = load i64, i64* %8, align 8, !dbg !14817
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !14817
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !14817
  %cmp16 = icmp eq i32 %bf.cast15, 141, !dbg !14818
  br i1 %cmp16, label %land.rhs, label %land.end, !dbg !14819

land.rhs:                                         ; preds = %if.then11
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !14820
  %exp17 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !14820
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !14820
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 1, !dbg !14820
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !14820
  %base20 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !14820
  %11 = bitcast %struct.tree_base* %base20 to i64*, !dbg !14820
  %bf.load21 = load i64, i64* %11, align 8, !dbg !14820
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !14820
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !14820
  %cmp24 = icmp eq i32 %bf.cast23, 23, !dbg !14821
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then11
  %12 = phi i1 [ false, %if.then11 ], [ %cmp24, %land.rhs ], !dbg !14822
  %land.ext = zext i1 %12 to i32, !dbg !14819
  %conv = trunc i32 %land.ext to i8, !dbg !14823
  store i8 %conv, i8* %retval, align 1, !dbg !14824
  br label %return, !dbg !14824

if.end25:                                         ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !14825
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %13), !dbg !14826
  store i8 %call, i8* %retval, align 1, !dbg !14827
  br label %return, !dbg !14827

return:                                           ; preds = %if.end25, %land.end, %if.then
  %14 = load i8, i8* %retval, align 1, !dbg !14828
  ret i8 %14, !dbg !14828
}

declare dso_local i32 @scev_direction(%union.tree_node*) #2

declare dso_local zeroext i8 @scev_probably_wraps_p(%union.tree_node*, %union.tree_node*, %union.gimple_statement_d*, %struct.loop*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_chrec_loop(%union.tree_node* %chrec) #0 !dbg !14829 {
entry:
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !14832, metadata !DIExpression()), !dbg !14833
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !14834
  %exp = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !14834
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14834
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14834
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14834
  %int_cst = bitcast %union.tree_node* %1 to %struct.tree_int_cst*, !dbg !14834
  %int_cst1 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !14834
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1, i32 0, i32 0, !dbg !14834
  %2 = load i64, i64* %low, align 8, !dbg !14834
  %conv = trunc i64 %2 to i32, !dbg !14834
  %call = call %struct.loop* @get_loop(i32 %conv), !dbg !14835
  ret %struct.loop* %call, !dbg !14836
}

declare dso_local %union.tree_node* @lower_bound_in_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @upper_bound_in_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @instantiate_scev(%struct.basic_block_def*, %struct.loop*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @block_before_loop(%struct.loop* %loop) #0 !dbg !14837 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %preheader = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !14840, metadata !DIExpression()), !dbg !14841
  call void @llvm.dbg.declare(metadata %struct.edge_def** %preheader, metadata !14842, metadata !DIExpression()), !dbg !14843
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14844
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %0), !dbg !14845
  store %struct.edge_def* %call, %struct.edge_def** %preheader, align 8, !dbg !14843
  %1 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !14846
  %tobool = icmp ne %struct.edge_def* %1, null, !dbg !14846
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14846

cond.true:                                        ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !14847
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !14848
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !14848
  br label %cond.end, !dbg !14846

cond.false:                                       ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14849
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !14849
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !14849
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !14849
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !14849
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !14849
  br label %cond.end, !dbg !14846

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %3, %cond.true ], [ %6, %cond.false ], !dbg !14846
  ret %struct.basic_block_def* %cond, !dbg !14850
}

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !14851 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !14854, metadata !DIExpression()), !dbg !14855
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14856
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !14856
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !14856
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !14856
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !14856
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !14856
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !14856
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14856

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14856
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !14856
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !14856
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !14856
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !14856
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !14856
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !14856
  br label %cond.end, !dbg !14856

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14856

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14856
  %6 = load i32, i32* %num.addr, align 4, !dbg !14856
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !14856
  ret %struct.loop* %call, !dbg !14857
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !14858 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !14863, metadata !DIExpression()), !dbg !14864
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !14865, metadata !DIExpression()), !dbg !14864
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !14864
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !14864
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !14864

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !14864
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !14864
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !14864
  %3 = load i32, i32* %num, align 8, !dbg !14864
  %cmp = icmp ult i32 %1, %3, !dbg !14864
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !14866
  %land.ext = zext i1 %4 to i32, !dbg !14864
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !14864
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !14864
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !14864
  %idxprom = zext i32 %6 to i64, !dbg !14864
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !14864
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !14864
  ret %struct.loop* %7, !dbg !14864
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !14867 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !14872, metadata !DIExpression()), !dbg !14873
  call void @llvm.dbg.declare(metadata i32* %n, metadata !14874, metadata !DIExpression()), !dbg !14875
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14876
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !14876
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !14876
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !14876
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14876

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14876
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !14876
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !14876
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !14876
  br label %cond.end, !dbg !14876

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14876

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14876
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !14876
  store i32 %call, i32* %n, align 4, !dbg !14875
  %4 = load i32, i32* %n, align 4, !dbg !14877
  %cmp = icmp eq i32 %4, 0, !dbg !14879
  br i1 %cmp, label %if.then, label %if.end, !dbg !14880

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !14881
  br label %return, !dbg !14881

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14882
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !14882
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !14882
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !14882
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !14882

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14882
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !14882
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !14882
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !14882
  br label %cond.end8, !dbg !14882

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !14882

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !14882
  %9 = load i32, i32* %n, align 4, !dbg !14882
  %sub = sub i32 %9, 1, !dbg !14882
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !14882
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !14883
  br label %return, !dbg !14883

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !14884
  ret %struct.loop* %10, !dbg !14884
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !14885 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !14888, metadata !DIExpression()), !dbg !14889
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !14889
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !14889
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14889

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !14889
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !14889
  %2 = load i32, i32* %num, align 8, !dbg !14889
  br label %cond.end, !dbg !14889

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14889

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !14889
  ret i32 %cond, !dbg !14889
}

declare dso_local zeroext i8 @substitute_and_fold(%struct.prop_value_d*, i8 (%struct.gimple_stmt_iterator*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vrp_fold_stmt(%struct.gimple_stmt_iterator* %si) #0 !dbg !14890 {
entry:
  %retval = alloca i8, align 1
  %si.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %si, %struct.gimple_stmt_iterator** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %si.addr, metadata !14893, metadata !DIExpression()), !dbg !14894
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si.addr, align 8, !dbg !14895
  %call = call zeroext i8 @fold_predicate_in(%struct.gimple_stmt_iterator* %0), !dbg !14897
  %tobool = icmp ne i8 %call, 0, !dbg !14897
  br i1 %tobool, label %if.then, label %if.end, !dbg !14898

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !14899
  br label %return, !dbg !14899

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si.addr, align 8, !dbg !14900
  %call1 = call zeroext i8 @simplify_stmt_using_ranges(%struct.gimple_stmt_iterator* %1), !dbg !14901
  store i8 %call1, i8* %retval, align 1, !dbg !14902
  br label %return, !dbg !14902

return:                                           ; preds = %if.end, %if.then
  %2 = load i8, i8* %retval, align 1, !dbg !14903
  ret i8 %2, !dbg !14903
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_all_array_refs() #0 !dbg !14904 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %executable = alloca i8, align 1
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp10 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %arg = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !14905, metadata !DIExpression()), !dbg !14906
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !14907, metadata !DIExpression()), !dbg !14908
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14909
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !14909
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !14909
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !14909
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !14909
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !14909
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !14909
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !14909
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !14909
  br label %for.cond, !dbg !14909

for.cond:                                         ; preds = %for.inc42, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !14911
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14911
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !14911
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !14911
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !14911
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !14911
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !14911
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !14911
  br i1 %cmp, label %for.body, label %for.end44, !dbg !14909

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !14913, metadata !DIExpression()), !dbg !14915
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !14916, metadata !DIExpression()), !dbg !14917
  call void @llvm.dbg.declare(metadata i8* %executable, metadata !14918, metadata !DIExpression()), !dbg !14919
  store i8 0, i8* %executable, align 1, !dbg !14919
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !14920
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 0, !dbg !14920
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !14920
  %9 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !14920
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !14920
  %11 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !14920
  store i32 %11, i32* %10, align 8, !dbg !14920
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !14920
  %13 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !14920
  store %struct.VEC_edge_gc** %13, %struct.VEC_edge_gc*** %12, align 8, !dbg !14920
  %14 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !14920
  %15 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !14920
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 16, i1 false), !dbg !14920
  br label %for.cond3, !dbg !14920

for.cond3:                                        ; preds = %for.inc, %for.body
  %16 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !14922
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !14922
  %18 = load i32, i32* %17, align 8, !dbg !14922
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !14922
  %20 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %19, align 8, !dbg !14922
  %call4 = call zeroext i8 @ei_cond(i32 %18, %struct.VEC_edge_gc** %20, %struct.edge_def** %e), !dbg !14922
  %tobool = icmp ne i8 %call4, 0, !dbg !14920
  br i1 %tobool, label %for.body5, label %for.end, !dbg !14920

for.body5:                                        ; preds = %for.cond3
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !14924
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 7, !dbg !14925
  %22 = load i32, i32* %flags, align 8, !dbg !14925
  %and = and i32 %22, 4096, !dbg !14926
  %tobool6 = icmp ne i32 %and, 0, !dbg !14927
  %lnot = xor i1 %tobool6, true, !dbg !14927
  %lnot7 = xor i1 %lnot, true, !dbg !14928
  %lnot.ext = zext i1 %lnot7 to i32, !dbg !14928
  %23 = load i8, i8* %executable, align 1, !dbg !14929
  %conv = zext i8 %23 to i32, !dbg !14929
  %or = or i32 %conv, %lnot.ext, !dbg !14929
  %conv8 = trunc i32 %or to i8, !dbg !14929
  store i8 %conv8, i8* %executable, align 1, !dbg !14929
  br label %for.inc, !dbg !14930

for.inc:                                          ; preds = %for.body5
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !14922
  br label %for.cond3, !dbg !14922, !llvm.loop !14931

for.end:                                          ; preds = %for.cond3
  %24 = load i8, i8* %executable, align 1, !dbg !14933
  %tobool9 = icmp ne i8 %24, 0, !dbg !14933
  br i1 %tobool9, label %if.end, label %if.then, !dbg !14935

if.then:                                          ; preds = %for.end
  br label %for.inc42, !dbg !14936

if.end:                                           ; preds = %for.end
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !14937
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp10, %struct.basic_block_def* %25), !dbg !14939
  %26 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !14939
  %27 = bitcast %struct.gimple_stmt_iterator* %tmp10 to i8*, !dbg !14939
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 24, i1 false), !dbg !14939
  br label %for.cond11, !dbg !14940

for.cond11:                                       ; preds = %for.inc40, %if.end
  %call12 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !14941
  %tobool13 = icmp ne i8 %call12, 0, !dbg !14943
  %lnot14 = xor i1 %tobool13, true, !dbg !14943
  br i1 %lnot14, label %for.body16, label %for.end41, !dbg !14944

for.body16:                                       ; preds = %for.cond11
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !14945, metadata !DIExpression()), !dbg !14947
  %call17 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !14948
  store %union.gimple_statement_d* %call17, %union.gimple_statement_d** %stmt, align 8, !dbg !14947
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !14949, metadata !DIExpression()), !dbg !14950
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14951
  %call18 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %28), !dbg !14953
  %tobool19 = icmp ne i8 %call18, 0, !dbg !14953
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !14954

if.then20:                                        ; preds = %for.body16
  br label %for.inc40, !dbg !14955

if.end21:                                         ; preds = %for.body16
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14956
  %call22 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %29), !dbg !14958
  %tobool23 = icmp ne i8 %call22, 0, !dbg !14958
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !14959

if.then24:                                        ; preds = %if.end21
  call void @llvm.dbg.declare(metadata i64* %i, metadata !14960, metadata !DIExpression()), !dbg !14962
  call void @llvm.dbg.declare(metadata i64* %n, metadata !14963, metadata !DIExpression()), !dbg !14964
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14965
  %call25 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %30), !dbg !14966
  %conv26 = zext i32 %call25 to i64, !dbg !14966
  store i64 %conv26, i64* %n, align 8, !dbg !14964
  store i64 0, i64* %i, align 8, !dbg !14967
  br label %for.cond27, !dbg !14969

for.cond27:                                       ; preds = %for.inc34, %if.then24
  %31 = load i64, i64* %i, align 8, !dbg !14970
  %32 = load i64, i64* %n, align 8, !dbg !14972
  %cmp28 = icmp ult i64 %31, %32, !dbg !14973
  br i1 %cmp28, label %for.body30, label %for.end35, !dbg !14974

for.body30:                                       ; preds = %for.cond27
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !14975, metadata !DIExpression()), !dbg !14977
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14978
  %34 = load i64, i64* %i, align 8, !dbg !14979
  %conv31 = trunc i64 %34 to i32, !dbg !14979
  %call32 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %33, i32 %conv31), !dbg !14980
  store %union.tree_node* %call32, %union.tree_node** %arg, align 8, !dbg !14977
  %35 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !14981
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14982
  %call33 = call i32 @gimple_location(%union.gimple_statement_d* %36), !dbg !14983
  call void @search_for_addr_array(%union.tree_node* %35, i32 %call33), !dbg !14984
  br label %for.inc34, !dbg !14985

for.inc34:                                        ; preds = %for.body30
  %37 = load i64, i64* %i, align 8, !dbg !14986
  %inc = add i64 %37, 1, !dbg !14986
  store i64 %inc, i64* %i, align 8, !dbg !14986
  br label %for.cond27, !dbg !14987, !llvm.loop !14988

for.end35:                                        ; preds = %for.cond27
  br label %if.end39, !dbg !14990

if.else:                                          ; preds = %if.end21
  %38 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !14991
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 56, i1 false), !dbg !14991
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14993
  %call36 = call i32* @gimple_location_ptr(%union.gimple_statement_d* %39), !dbg !14993
  %40 = bitcast i32* %call36 to i8*, !dbg !14993
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !14994
  store i8* %40, i8** %info, align 8, !dbg !14995
  %call37 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !14996
  %call38 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %call37, %union.tree_node* (%union.tree_node**, i32*, i8*)* @check_array_bounds, %struct.walk_stmt_info* %wi), !dbg !14997
  br label %if.end39

if.end39:                                         ; preds = %if.else, %for.end35
  br label %for.inc40, !dbg !14998

for.inc40:                                        ; preds = %if.end39, %if.then20
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !14999
  br label %for.cond11, !dbg !15000, !llvm.loop !15001

for.end41:                                        ; preds = %for.cond11
  br label %for.inc42, !dbg !15003

for.inc42:                                        ; preds = %for.end41, %if.then
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !14911
  %next_bb43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 6, !dbg !14911
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb43, align 8, !dbg !14911
  store %struct.basic_block_def* %42, %struct.basic_block_def** %bb, align 8, !dbg !14911
  br label %for.cond, !dbg !14911, !llvm.loop !15004

for.end44:                                        ; preds = %for.cond
  ret void, !dbg !15006
}

; Function Attrs: noinline nounwind uwtable
define internal void @identify_jump_threads() #0 !dbg !15007 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %dummy = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  %agg.tmp = alloca %struct.gimple_stmt_iterator, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !15008, metadata !DIExpression()), !dbg !15009
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dummy, metadata !15010, metadata !DIExpression()), !dbg !15011
  call void @llvm.dbg.declare(metadata i32* %i, metadata !15012, metadata !DIExpression()), !dbg !15013
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !15014, metadata !DIExpression()), !dbg !15015
  call void @calculate_dominance_info(i32 1), !dbg !15016
  %call = call zeroext i8 @mark_dfs_back_edges(), !dbg !15017
  store i32 0, i32* %i, align 4, !dbg !15018
  br label %for.cond, !dbg !15020

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !15021
  %tobool = icmp ne %struct.VEC_edge_heap* %0, null, !dbg !15021
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !15021

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !15021
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %1, i32 0, i32 0, !dbg !15021
  br label %cond.end, !dbg !15021

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !15021

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !15021
  %2 = load i32, i32* %i, align 4, !dbg !15021
  %call1 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %2, %struct.edge_def** %e), !dbg !15021
  %tobool2 = icmp ne i32 %call1, 0, !dbg !15023
  br i1 %tobool2, label %for.body, label %for.end, !dbg !15023

for.body:                                         ; preds = %cond.end
  %3 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !15024
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 7, !dbg !15025
  %4 = load i32, i32* %flags, align 8, !dbg !15026
  %or = or i32 %4, 32, !dbg !15026
  store i32 %or, i32* %flags, align 8, !dbg !15026
  br label %for.inc, !dbg !15024

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !15027
  %inc = add nsw i32 %5, 1, !dbg !15027
  store i32 %inc, i32* %i, align 4, !dbg !15027
  br label %for.cond, !dbg !15028, !llvm.loop !15029

for.end:                                          ; preds = %cond.end
  %call3 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 20), !dbg !15031
  store %struct.VEC_tree_heap* %call3, %struct.VEC_tree_heap** @stack, align 8, !dbg !15032
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !15033
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !15034
  %call4 = call %union.gimple_statement_d* @gimple_build_cond(i32 101, %union.tree_node* %6, %union.tree_node* %7, %union.tree_node* null, %union.tree_node* null), !dbg !15035
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %dummy, align 8, !dbg !15036
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !15037
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !15037
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !15037
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !15037
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 0, !dbg !15037
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !15037
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 6, !dbg !15037
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !15037
  store %struct.basic_block_def* %11, %struct.basic_block_def** %bb, align 8, !dbg !15037
  br label %for.cond5, !dbg !15037

for.cond5:                                        ; preds = %for.inc96, %for.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !15039
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !15039
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !15039
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !15039
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !15039
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 1, !dbg !15039
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !15039
  %cmp = icmp ne %struct.basic_block_def* %12, %15, !dbg !15039
  br i1 %cmp, label %for.body8, label %for.end98, !dbg !15037

for.body8:                                        ; preds = %for.cond5
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !15041, metadata !DIExpression()), !dbg !15043
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !15044
  %call9 = call zeroext i8 @potentially_threadable_block(%struct.basic_block_def* %16), !dbg !15046
  %tobool10 = icmp ne i8 %call9, 0, !dbg !15046
  br i1 %tobool10, label %if.end, label %if.then, !dbg !15047

if.then:                                          ; preds = %for.body8
  br label %for.inc96, !dbg !15048

if.end:                                           ; preds = %for.body8
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !15049
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %agg.tmp, %struct.basic_block_def* %17), !dbg !15050
  %call11 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.tmp), !dbg !15051
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %last, align 8, !dbg !15052
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !15053
  %call12 = call i32 @gimple_code(%union.gimple_statement_d* %18), !dbg !15055
  %cmp13 = icmp ne i32 %call12, 1, !dbg !15056
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !15057

if.then14:                                        ; preds = %if.end
  br label %for.inc96, !dbg !15058

if.end15:                                         ; preds = %if.end
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !15059
  %call16 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %19), !dbg !15059
  %base17 = bitcast %union.tree_node* %call16 to %struct.tree_base*, !dbg !15059
  %20 = bitcast %struct.tree_base* %base17 to i64*, !dbg !15059
  %bf.load = load i64, i64* %20, align 8, !dbg !15059
  %bf.clear = and i64 %bf.load, 65535, !dbg !15059
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15059
  %cmp18 = icmp eq i32 %bf.cast, 141, !dbg !15061
  br i1 %cmp18, label %land.lhs.true, label %if.end95, !dbg !15062

land.lhs.true:                                    ; preds = %if.end15
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !15063
  %call19 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %21), !dbg !15063
  %common = bitcast %union.tree_node* %call19 to %struct.tree_common*, !dbg !15063
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15063
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15063
  %base20 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !15063
  %23 = bitcast %struct.tree_base* %base20 to i64*, !dbg !15063
  %bf.load21 = load i64, i64* %23, align 8, !dbg !15063
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !15063
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !15063
  %cmp24 = icmp eq i32 %bf.cast23, 6, !dbg !15063
  br i1 %cmp24, label %land.lhs.true42, label %lor.lhs.false, !dbg !15063

lor.lhs.false:                                    ; preds = %land.lhs.true
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !15063
  %call25 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %24), !dbg !15063
  %common26 = bitcast %union.tree_node* %call25 to %struct.tree_common*, !dbg !15063
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !15063
  %25 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !15063
  %base28 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !15063
  %26 = bitcast %struct.tree_base* %base28 to i64*, !dbg !15063
  %bf.load29 = load i64, i64* %26, align 8, !dbg !15063
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !15063
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !15063
  %cmp32 = icmp eq i32 %bf.cast31, 7, !dbg !15063
  br i1 %cmp32, label %land.lhs.true42, label %lor.lhs.false33, !dbg !15063

lor.lhs.false33:                                  ; preds = %lor.lhs.false
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !15063
  %call34 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %27), !dbg !15063
  %common35 = bitcast %union.tree_node* %call34 to %struct.tree_common*, !dbg !15063
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2, !dbg !15063
  %28 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !15063
  %base37 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !15063
  %29 = bitcast %struct.tree_base* %base37 to i64*, !dbg !15063
  %bf.load38 = load i64, i64* %29, align 8, !dbg !15063
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !15063
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !15063
  %cmp41 = icmp eq i32 %bf.cast40, 8, !dbg !15063
  br i1 %cmp41, label %land.lhs.true42, label %if.end95, !dbg !15064

land.lhs.true42:                                  ; preds = %lor.lhs.false33, %lor.lhs.false, %land.lhs.true
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !15065
  %call43 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %30), !dbg !15065
  %base44 = bitcast %union.tree_node* %call43 to %struct.tree_base*, !dbg !15065
  %31 = bitcast %struct.tree_base* %base44 to i64*, !dbg !15065
  %bf.load45 = load i64, i64* %31, align 8, !dbg !15065
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !15065
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !15065
  %cmp48 = icmp eq i32 %bf.cast47, 141, !dbg !15066
  br i1 %cmp48, label %land.lhs.true53, label %lor.lhs.false49, !dbg !15067

lor.lhs.false49:                                  ; preds = %land.lhs.true42
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !15068
  %call50 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %32), !dbg !15069
  %call51 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call50), !dbg !15070
  %conv = zext i8 %call51 to i32, !dbg !15070
  %tobool52 = icmp ne i32 %conv, 0, !dbg !15070
  br i1 %tobool52, label %land.lhs.true53, label %if.end95, !dbg !15071

land.lhs.true53:                                  ; preds = %lor.lhs.false49, %land.lhs.true42
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !15072
  %call54 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %33), !dbg !15072
  %common55 = bitcast %union.tree_node* %call54 to %struct.tree_common*, !dbg !15072
  %type56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 2, !dbg !15072
  %34 = load %union.tree_node*, %union.tree_node** %type56, align 8, !dbg !15072
  %base57 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !15072
  %35 = bitcast %struct.tree_base* %base57 to i64*, !dbg !15072
  %bf.load58 = load i64, i64* %35, align 8, !dbg !15072
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !15072
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !15072
  %cmp61 = icmp eq i32 %bf.cast60, 6, !dbg !15072
  br i1 %cmp61, label %if.then83, label %lor.lhs.false63, !dbg !15072

lor.lhs.false63:                                  ; preds = %land.lhs.true53
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !15072
  %call64 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %36), !dbg !15072
  %common65 = bitcast %union.tree_node* %call64 to %struct.tree_common*, !dbg !15072
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !15072
  %37 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !15072
  %base67 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !15072
  %38 = bitcast %struct.tree_base* %base67 to i64*, !dbg !15072
  %bf.load68 = load i64, i64* %38, align 8, !dbg !15072
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !15072
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !15072
  %cmp71 = icmp eq i32 %bf.cast70, 7, !dbg !15072
  br i1 %cmp71, label %if.then83, label %lor.lhs.false73, !dbg !15072

lor.lhs.false73:                                  ; preds = %lor.lhs.false63
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !15072
  %call74 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %39), !dbg !15072
  %common75 = bitcast %union.tree_node* %call74 to %struct.tree_common*, !dbg !15072
  %type76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 2, !dbg !15072
  %40 = load %union.tree_node*, %union.tree_node** %type76, align 8, !dbg !15072
  %base77 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !15072
  %41 = bitcast %struct.tree_base* %base77 to i64*, !dbg !15072
  %bf.load78 = load i64, i64* %41, align 8, !dbg !15072
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !15072
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !15072
  %cmp81 = icmp eq i32 %bf.cast80, 8, !dbg !15072
  br i1 %cmp81, label %if.then83, label %if.end95, !dbg !15073

if.then83:                                        ; preds = %lor.lhs.false73, %lor.lhs.false63, %land.lhs.true53
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !15074, metadata !DIExpression()), !dbg !15076
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !15077
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 0, !dbg !15077
  %call84 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !15077
  %43 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !15077
  %44 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 0, !dbg !15077
  %45 = extractvalue { i32, %struct.VEC_edge_gc** } %call84, 0, !dbg !15077
  store i32 %45, i32* %44, align 8, !dbg !15077
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 1, !dbg !15077
  %47 = extractvalue { i32, %struct.VEC_edge_gc** } %call84, 1, !dbg !15077
  store %struct.VEC_edge_gc** %47, %struct.VEC_edge_gc*** %46, align 8, !dbg !15077
  %48 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !15077
  %49 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !15077
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 16, i1 false), !dbg !15077
  br label %for.cond85, !dbg !15077

for.cond85:                                       ; preds = %for.inc93, %if.then83
  %50 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !15079
  %51 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 0, !dbg !15079
  %52 = load i32, i32* %51, align 8, !dbg !15079
  %53 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 1, !dbg !15079
  %54 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %53, align 8, !dbg !15079
  %call86 = call zeroext i8 @ei_cond(i32 %52, %struct.VEC_edge_gc** %54, %struct.edge_def** %e), !dbg !15079
  %tobool87 = icmp ne i8 %call86, 0, !dbg !15077
  br i1 %tobool87, label %for.body88, label %for.end94, !dbg !15077

for.body88:                                       ; preds = %for.cond85
  %55 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !15081
  %flags89 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 7, !dbg !15084
  %56 = load i32, i32* %flags89, align 8, !dbg !15084
  %and = and i32 %56, 46, !dbg !15085
  %tobool90 = icmp ne i32 %and, 0, !dbg !15085
  br i1 %tobool90, label %if.then91, label %if.end92, !dbg !15086

if.then91:                                        ; preds = %for.body88
  br label %for.inc93, !dbg !15087

if.end92:                                         ; preds = %for.body88
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dummy, align 8, !dbg !15088
  %58 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !15089
  call void @thread_across_edge(%union.gimple_statement_d* %57, %struct.edge_def* %58, i8 zeroext 1, %struct.VEC_tree_heap** @stack, %union.tree_node* (%union.gimple_statement_d*, %union.gimple_statement_d*)* @simplify_stmt_for_jump_threading), !dbg !15090
  br label %for.inc93, !dbg !15091

for.inc93:                                        ; preds = %if.end92, %if.then91
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !15079
  br label %for.cond85, !dbg !15079, !llvm.loop !15092

for.end94:                                        ; preds = %for.cond85
  br label %if.end95, !dbg !15094

if.end95:                                         ; preds = %for.end94, %lor.lhs.false73, %lor.lhs.false49, %lor.lhs.false33, %if.end15
  br label %for.inc96, !dbg !15095

for.inc96:                                        ; preds = %if.end95, %if.then14, %if.then
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !15039
  %next_bb97 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 6, !dbg !15039
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb97, align 8, !dbg !15039
  store %struct.basic_block_def* %60, %struct.basic_block_def** %bb, align 8, !dbg !15039
  br label %for.cond5, !dbg !15039, !llvm.loop !15096

for.end98:                                        ; preds = %for.cond5
  ret void, !dbg !15098
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @fold_predicate_in(%struct.gimple_stmt_iterator* %si) #0 !dbg !15099 {
entry:
  %retval = alloca i8, align 1
  %si.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %assignment_p = alloca i8, align 1
  %val = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %si, %struct.gimple_stmt_iterator** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %si.addr, metadata !15100, metadata !DIExpression()), !dbg !15101
  call void @llvm.dbg.declare(metadata i8* %assignment_p, metadata !15102, metadata !DIExpression()), !dbg !15103
  store i8 0, i8* %assignment_p, align 1, !dbg !15103
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !15104, metadata !DIExpression()), !dbg !15105
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !15106, metadata !DIExpression()), !dbg !15107
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si.addr, align 8, !dbg !15108
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !15109
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !15107
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15110
  %call1 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %1), !dbg !15112
  %conv = zext i8 %call1 to i32, !dbg !15112
  %tobool = icmp ne i32 %conv, 0, !dbg !15112
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !15113

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15114
  %call2 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !15114
  %idxprom = sext i32 %call2 to i64, !dbg !15114
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !15114
  %3 = load i32, i32* %arrayidx, align 4, !dbg !15114
  %cmp = icmp eq i32 %3, 5, !dbg !15115
  br i1 %cmp, label %if.then, label %if.else, !dbg !15116

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %assignment_p, align 1, !dbg !15117
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15119
  %call4 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %4), !dbg !15120
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15121
  %call5 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %5), !dbg !15122
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15123
  %call6 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %6), !dbg !15124
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15125
  %call7 = call %union.tree_node* @vrp_evaluate_conditional(i32 %call4, %union.tree_node* %call5, %union.tree_node* %call6, %union.gimple_statement_d* %7), !dbg !15126
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !15127
  br label %if.end17, !dbg !15128

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15129
  %call8 = call i32 @gimple_code(%union.gimple_statement_d* %8), !dbg !15131
  %cmp9 = icmp eq i32 %call8, 1, !dbg !15132
  br i1 %cmp9, label %if.then11, label %if.else16, !dbg !15133

if.then11:                                        ; preds = %if.else
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15134
  %call12 = call i32 @gimple_cond_code(%union.gimple_statement_d* %9), !dbg !15135
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15136
  %call13 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %10), !dbg !15137
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15138
  %call14 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %11), !dbg !15139
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15140
  %call15 = call %union.tree_node* @vrp_evaluate_conditional(i32 %call12, %union.tree_node* %call13, %union.tree_node* %call14, %union.gimple_statement_d* %12), !dbg !15141
  store %union.tree_node* %call15, %union.tree_node** %val, align 8, !dbg !15142
  br label %if.end, !dbg !15143

if.else16:                                        ; preds = %if.else
  store i8 0, i8* %retval, align 1, !dbg !15144
  br label %return, !dbg !15144

if.end:                                           ; preds = %if.then11
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then
  %13 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15145
  %tobool18 = icmp ne %union.tree_node* %13, null, !dbg !15145
  br i1 %tobool18, label %if.then19, label %if.end49, !dbg !15147

if.then19:                                        ; preds = %if.end17
  %14 = load i8, i8* %assignment_p, align 1, !dbg !15148
  %tobool20 = icmp ne i8 %14, 0, !dbg !15148
  br i1 %tobool20, label %if.then21, label %if.end24, !dbg !15151

if.then21:                                        ; preds = %if.then19
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15152
  %call22 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %15), !dbg !15152
  %16 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15152
  %call23 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call22, %union.tree_node* %16), !dbg !15152
  store %union.tree_node* %call23, %union.tree_node** %val, align 8, !dbg !15153
  br label %if.end24, !dbg !15154

if.end24:                                         ; preds = %if.then21, %if.then19
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !15155
  %tobool25 = icmp ne %struct._IO_FILE* %17, null, !dbg !15155
  br i1 %tobool25, label %if.then26, label %if.end30, !dbg !15157

if.then26:                                        ; preds = %if.end24
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !15158
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.54, i64 0, i64 0)), !dbg !15160
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !15161
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15162
  call void @print_gimple_expr(%struct._IO_FILE* %19, %union.gimple_statement_d* %20, i32 0, i32 0), !dbg !15163
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !15164
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55, i64 0, i64 0)), !dbg !15165
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !15166
  %23 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15167
  call void @print_generic_expr(%struct._IO_FILE* %22, %union.tree_node* %23, i32 0), !dbg !15168
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !15169
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !15170
  br label %if.end30, !dbg !15171

if.end30:                                         ; preds = %if.then26, %if.end24
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15172
  %call31 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %25), !dbg !15174
  %tobool32 = icmp ne i8 %call31, 0, !dbg !15174
  br i1 %tobool32, label %if.then33, label %if.else34, !dbg !15175

if.then33:                                        ; preds = %if.end30
  %26 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si.addr, align 8, !dbg !15176
  %27 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15177
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %26, %union.tree_node* %27), !dbg !15178
  br label %if.end48, !dbg !15178

if.else34:                                        ; preds = %if.end30
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15179
  %call35 = call i32 @gimple_code(%union.gimple_statement_d* %28), !dbg !15179
  %cmp36 = icmp eq i32 %call35, 1, !dbg !15179
  br i1 %cmp36, label %cond.false, label %cond.true, !dbg !15179

cond.true:                                        ; preds = %if.else34
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 7056, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !15179
  br label %cond.end, !dbg !15179

cond.false:                                       ; preds = %if.else34
  br label %cond.end, !dbg !15179

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15179
  %29 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15181
  %call38 = call i32 @integer_zerop(%union.tree_node* %29), !dbg !15183
  %tobool39 = icmp ne i32 %call38, 0, !dbg !15183
  br i1 %tobool39, label %if.then40, label %if.else41, !dbg !15184

if.then40:                                        ; preds = %cond.end
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15185
  call void @gimple_cond_make_false(%union.gimple_statement_d* %30), !dbg !15186
  br label %if.end47, !dbg !15186

if.else41:                                        ; preds = %cond.end
  %31 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15187
  %call42 = call i32 @integer_onep(%union.tree_node* %31), !dbg !15189
  %tobool43 = icmp ne i32 %call42, 0, !dbg !15189
  br i1 %tobool43, label %if.then44, label %if.else45, !dbg !15190

if.then44:                                        ; preds = %if.else41
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15191
  call void @gimple_cond_make_true(%union.gimple_statement_d* %32), !dbg !15192
  br label %if.end46, !dbg !15192

if.else45:                                        ; preds = %if.else41
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 7062, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !15193
  br label %if.end46

if.end46:                                         ; preds = %if.else45, %if.then44
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then40
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then33
  store i8 1, i8* %retval, align 1, !dbg !15194
  br label %return, !dbg !15194

if.end49:                                         ; preds = %if.end17
  store i8 0, i8* %retval, align 1, !dbg !15195
  br label %return, !dbg !15195

return:                                           ; preds = %if.end49, %if.end48, %if.else16
  %33 = load i8, i8* %retval, align 1, !dbg !15196
  ret i8 %33, !dbg !15196
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @simplify_stmt_using_ranges(%struct.gimple_stmt_iterator* %gsi) #0 !dbg !15197 {
entry:
  %retval = alloca i8, align 1
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %rhs_code = alloca i32, align 4
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !15198, metadata !DIExpression()), !dbg !15199
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !15200, metadata !DIExpression()), !dbg !15201
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !15202
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !15203
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !15201
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15204
  %call1 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %1), !dbg !15206
  %tobool = icmp ne i8 %call1, 0, !dbg !15206
  br i1 %tobool, label %if.then, label %if.else, !dbg !15207

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %rhs_code, metadata !15208, metadata !DIExpression()), !dbg !15210
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15211
  %call2 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !15212
  store i32 %call2, i32* %rhs_code, align 4, !dbg !15210
  %3 = load i32, i32* %rhs_code, align 4, !dbg !15213
  switch i32 %3, label %sw.default [
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 96, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 67, label %sw.bb23
    i32 71, label %sw.bb23
    i32 82, label %sw.bb56
  ], !dbg !15214

sw.bb:                                            ; preds = %if.then, %if.then, %if.then, %if.then, %if.then, %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15215
  %call3 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !15215
  %common = bitcast %union.tree_node* %call3 to %struct.tree_common*, !dbg !15215
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15215
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15215
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !15215
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !15215
  %bf.load = load i64, i64* %6, align 8, !dbg !15215
  %bf.clear = and i64 %bf.load, 65535, !dbg !15215
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15215
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !15215
  br i1 %cmp, label %if.then21, label %lor.lhs.false, !dbg !15215

lor.lhs.false:                                    ; preds = %sw.bb
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15215
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %7), !dbg !15215
  %common5 = bitcast %union.tree_node* %call4 to %struct.tree_common*, !dbg !15215
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !15215
  %8 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !15215
  %base7 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !15215
  %9 = bitcast %struct.tree_base* %base7 to i64*, !dbg !15215
  %bf.load8 = load i64, i64* %9, align 8, !dbg !15215
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !15215
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !15215
  %cmp11 = icmp eq i32 %bf.cast10, 7, !dbg !15215
  br i1 %cmp11, label %if.then21, label %lor.lhs.false12, !dbg !15215

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15215
  %call13 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %10), !dbg !15215
  %common14 = bitcast %union.tree_node* %call13 to %struct.tree_common*, !dbg !15215
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !15215
  %11 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !15215
  %base16 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !15215
  %12 = bitcast %struct.tree_base* %base16 to i64*, !dbg !15215
  %bf.load17 = load i64, i64* %12, align 8, !dbg !15215
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !15215
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !15215
  %cmp20 = icmp eq i32 %bf.cast19, 8, !dbg !15215
  br i1 %cmp20, label %if.then21, label %if.end, !dbg !15218

if.then21:                                        ; preds = %lor.lhs.false12, %lor.lhs.false, %sw.bb
  %13 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !15219
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15220
  %call22 = call zeroext i8 @simplify_truth_ops_using_ranges(%struct.gimple_stmt_iterator* %13, %union.gimple_statement_d* %14), !dbg !15221
  store i8 %call22, i8* %retval, align 1, !dbg !15222
  br label %return, !dbg !15222

if.end:                                           ; preds = %lor.lhs.false12
  br label %sw.epilog, !dbg !15223

sw.bb23:                                          ; preds = %if.then, %if.then
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15224
  %call24 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %15), !dbg !15224
  %common25 = bitcast %union.tree_node* %call24 to %struct.tree_common*, !dbg !15224
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !15224
  %16 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !15224
  %base27 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !15224
  %17 = bitcast %struct.tree_base* %base27 to i64*, !dbg !15224
  %bf.load28 = load i64, i64* %17, align 8, !dbg !15224
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !15224
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !15224
  %cmp31 = icmp eq i32 %bf.cast30, 6, !dbg !15224
  br i1 %cmp31, label %land.lhs.true, label %lor.lhs.false32, !dbg !15224

lor.lhs.false32:                                  ; preds = %sw.bb23
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15224
  %call33 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %18), !dbg !15224
  %common34 = bitcast %union.tree_node* %call33 to %struct.tree_common*, !dbg !15224
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2, !dbg !15224
  %19 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !15224
  %base36 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !15224
  %20 = bitcast %struct.tree_base* %base36 to i64*, !dbg !15224
  %bf.load37 = load i64, i64* %20, align 8, !dbg !15224
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !15224
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !15224
  %cmp40 = icmp eq i32 %bf.cast39, 7, !dbg !15224
  br i1 %cmp40, label %land.lhs.true, label %lor.lhs.false41, !dbg !15224

lor.lhs.false41:                                  ; preds = %lor.lhs.false32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15224
  %call42 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %21), !dbg !15224
  %common43 = bitcast %union.tree_node* %call42 to %struct.tree_common*, !dbg !15224
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2, !dbg !15224
  %22 = load %union.tree_node*, %union.tree_node** %type44, align 8, !dbg !15224
  %base45 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !15224
  %23 = bitcast %struct.tree_base* %base45 to i64*, !dbg !15224
  %bf.load46 = load i64, i64* %23, align 8, !dbg !15224
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !15224
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !15224
  %cmp49 = icmp eq i32 %bf.cast48, 8, !dbg !15224
  br i1 %cmp49, label %land.lhs.true, label %if.end55, !dbg !15226

land.lhs.true:                                    ; preds = %lor.lhs.false41, %lor.lhs.false32, %sw.bb23
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15227
  %call50 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %24), !dbg !15228
  %call51 = call i32 @integer_pow2p(%union.tree_node* %call50), !dbg !15229
  %tobool52 = icmp ne i32 %call51, 0, !dbg !15229
  br i1 %tobool52, label %if.then53, label %if.end55, !dbg !15230

if.then53:                                        ; preds = %land.lhs.true
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15231
  %call54 = call zeroext i8 @simplify_div_or_mod_using_ranges(%union.gimple_statement_d* %25), !dbg !15232
  store i8 %call54, i8* %retval, align 1, !dbg !15233
  br label %return, !dbg !15233

if.end55:                                         ; preds = %land.lhs.true, %lor.lhs.false41
  br label %sw.epilog, !dbg !15234

sw.bb56:                                          ; preds = %if.then
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15235
  %call57 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %26), !dbg !15235
  %base58 = bitcast %union.tree_node* %call57 to %struct.tree_base*, !dbg !15235
  %27 = bitcast %struct.tree_base* %base58 to i64*, !dbg !15235
  %bf.load59 = load i64, i64* %27, align 8, !dbg !15235
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !15235
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !15235
  %cmp62 = icmp eq i32 %bf.cast61, 141, !dbg !15237
  br i1 %cmp62, label %land.lhs.true63, label %if.end92, !dbg !15238

land.lhs.true63:                                  ; preds = %sw.bb56
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15239
  %call64 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %28), !dbg !15239
  %common65 = bitcast %union.tree_node* %call64 to %struct.tree_common*, !dbg !15239
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !15239
  %29 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !15239
  %base67 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !15239
  %30 = bitcast %struct.tree_base* %base67 to i64*, !dbg !15239
  %bf.load68 = load i64, i64* %30, align 8, !dbg !15239
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !15239
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !15239
  %cmp71 = icmp eq i32 %bf.cast70, 6, !dbg !15239
  br i1 %cmp71, label %if.then90, label %lor.lhs.false72, !dbg !15239

lor.lhs.false72:                                  ; preds = %land.lhs.true63
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15239
  %call73 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %31), !dbg !15239
  %common74 = bitcast %union.tree_node* %call73 to %struct.tree_common*, !dbg !15239
  %type75 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common74, i32 0, i32 2, !dbg !15239
  %32 = load %union.tree_node*, %union.tree_node** %type75, align 8, !dbg !15239
  %base76 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !15239
  %33 = bitcast %struct.tree_base* %base76 to i64*, !dbg !15239
  %bf.load77 = load i64, i64* %33, align 8, !dbg !15239
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !15239
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !15239
  %cmp80 = icmp eq i32 %bf.cast79, 7, !dbg !15239
  br i1 %cmp80, label %if.then90, label %lor.lhs.false81, !dbg !15239

lor.lhs.false81:                                  ; preds = %lor.lhs.false72
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15239
  %call82 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %34), !dbg !15239
  %common83 = bitcast %union.tree_node* %call82 to %struct.tree_common*, !dbg !15239
  %type84 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common83, i32 0, i32 2, !dbg !15239
  %35 = load %union.tree_node*, %union.tree_node** %type84, align 8, !dbg !15239
  %base85 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !15239
  %36 = bitcast %struct.tree_base* %base85 to i64*, !dbg !15239
  %bf.load86 = load i64, i64* %36, align 8, !dbg !15239
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !15239
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !15239
  %cmp89 = icmp eq i32 %bf.cast88, 8, !dbg !15239
  br i1 %cmp89, label %if.then90, label %if.end92, !dbg !15240

if.then90:                                        ; preds = %lor.lhs.false81, %lor.lhs.false72, %land.lhs.true63
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15241
  %call91 = call zeroext i8 @simplify_abs_using_ranges(%union.gimple_statement_d* %37), !dbg !15242
  store i8 %call91, i8* %retval, align 1, !dbg !15243
  br label %return, !dbg !15243

if.end92:                                         ; preds = %lor.lhs.false81, %sw.bb56
  br label %sw.epilog, !dbg !15244

sw.default:                                       ; preds = %if.then
  br label %sw.epilog, !dbg !15245

sw.epilog:                                        ; preds = %sw.default, %if.end92, %if.end55, %if.end
  br label %if.end104, !dbg !15246

if.else:                                          ; preds = %entry
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15247
  %call93 = call i32 @gimple_code(%union.gimple_statement_d* %38), !dbg !15249
  %cmp94 = icmp eq i32 %call93, 1, !dbg !15250
  br i1 %cmp94, label %if.then95, label %if.else97, !dbg !15251

if.then95:                                        ; preds = %if.else
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15252
  %call96 = call zeroext i8 @simplify_cond_using_ranges(%union.gimple_statement_d* %39), !dbg !15253
  store i8 %call96, i8* %retval, align 1, !dbg !15254
  br label %return, !dbg !15254

if.else97:                                        ; preds = %if.else
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15255
  %call98 = call i32 @gimple_code(%union.gimple_statement_d* %40), !dbg !15257
  %cmp99 = icmp eq i32 %call98, 5, !dbg !15258
  br i1 %cmp99, label %if.then100, label %if.end102, !dbg !15259

if.then100:                                       ; preds = %if.else97
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15260
  %call101 = call zeroext i8 @simplify_switch_using_ranges(%union.gimple_statement_d* %41), !dbg !15261
  store i8 %call101, i8* %retval, align 1, !dbg !15262
  br label %return, !dbg !15262

if.end102:                                        ; preds = %if.else97
  br label %if.end103

if.end103:                                        ; preds = %if.end102
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %sw.epilog
  store i8 0, i8* %retval, align 1, !dbg !15263
  br label %return, !dbg !15263

return:                                           ; preds = %if.end104, %if.then100, %if.then95, %if.then90, %if.then53, %if.then21
  %42 = load i8, i8* %retval, align 1, !dbg !15264
  ret i8 %42, !dbg !15264
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @vrp_evaluate_conditional(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, %union.gimple_statement_d* %stmt) #0 !dbg !15265 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %sop = alloca i8, align 1
  %ret = alloca %union.tree_node*, align 8
  %only_ranges = alloca i8, align 1
  %wc = alloca i32, align 4
  %warnmsg = alloca i8*, align 8
  %location = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %vr0 = alloca %struct.value_range_d*, align 8
  %location93 = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !15268, metadata !DIExpression()), !dbg !15269
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !15270, metadata !DIExpression()), !dbg !15271
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !15272, metadata !DIExpression()), !dbg !15273
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15274, metadata !DIExpression()), !dbg !15275
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !15276, metadata !DIExpression()), !dbg !15277
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !15278, metadata !DIExpression()), !dbg !15279
  call void @llvm.dbg.declare(metadata i8* %only_ranges, metadata !15280, metadata !DIExpression()), !dbg !15281
  %0 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !15282
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !15282
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !15282
  %bf.load = load i64, i64* %1, align 8, !dbg !15282
  %bf.clear = and i64 %bf.load, 65535, !dbg !15282
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15282
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !15284
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !15285

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !15286
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !15286
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !15286
  %bf.load2 = load i64, i64* %3, align 8, !dbg !15286
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !15286
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !15286
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !15286
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !15286
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !15287

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %4 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !15288
  %base5 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !15288
  %5 = bitcast %struct.tree_base* %base5 to i64*, !dbg !15288
  %bf.load6 = load i64, i64* %5, align 8, !dbg !15288
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !15288
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !15288
  %cmp9 = icmp eq i32 %bf.cast8, 23, !dbg !15289
  br i1 %cmp9, label %land.lhs.true10, label %if.end, !dbg !15290

land.lhs.true10:                                  ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !15291
  %base11 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !15291
  %7 = bitcast %struct.tree_base* %base11 to i64*, !dbg !15291
  %bf.load12 = load i64, i64* %7, align 8, !dbg !15291
  %bf.lshr13 = lshr i64 %bf.load12, 27, !dbg !15291
  %bf.clear14 = and i64 %bf.lshr13, 1, !dbg !15291
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !15291
  %tobool16 = icmp ne i32 %bf.cast15, 0, !dbg !15291
  br i1 %tobool16, label %if.then, label %if.end, !dbg !15292

if.then:                                          ; preds = %land.lhs.true10, %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !15293
  br label %return, !dbg !15293

if.end:                                           ; preds = %land.lhs.true10, %lor.lhs.false
  store i8 0, i8* %sop, align 1, !dbg !15294
  %8 = load i32, i32* %code.addr, align 4, !dbg !15295
  %9 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !15296
  %10 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !15297
  %call = call %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops(i32 %8, %union.tree_node* %9, %union.tree_node* %10, i8 zeroext 1, i8* %sop, i8* %only_ranges), !dbg !15298
  store %union.tree_node* %call, %union.tree_node** %ret, align 8, !dbg !15299
  %11 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !15300
  %tobool17 = icmp ne %union.tree_node* %11, null, !dbg !15300
  br i1 %tobool17, label %land.lhs.true18, label %if.end36, !dbg !15302

land.lhs.true18:                                  ; preds = %if.end
  %12 = load i8, i8* %sop, align 1, !dbg !15303
  %conv = zext i8 %12 to i32, !dbg !15303
  %tobool19 = icmp ne i32 %conv, 0, !dbg !15303
  br i1 %tobool19, label %if.then20, label %if.end36, !dbg !15304

if.then20:                                        ; preds = %land.lhs.true18
  call void @llvm.dbg.declare(metadata i32* %wc, metadata !15305, metadata !DIExpression()), !dbg !15307
  call void @llvm.dbg.declare(metadata i8** %warnmsg, metadata !15308, metadata !DIExpression()), !dbg !15309
  %13 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !15310
  %call21 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %13), !dbg !15312
  %tobool22 = icmp ne i8 %call21, 0, !dbg !15312
  br i1 %tobool22, label %if.then23, label %if.else, !dbg !15313

if.then23:                                        ; preds = %if.then20
  store i32 2, i32* %wc, align 4, !dbg !15314
  store i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.56, i64 0, i64 0), i8** %warnmsg, align 8, !dbg !15316
  br label %if.end24, !dbg !15317

if.else:                                          ; preds = %if.then20
  store i32 3, i32* %wc, align 4, !dbg !15318
  store i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.57, i64 0, i64 0), i8** %warnmsg, align 8, !dbg !15320
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.then23
  %14 = load i32, i32* @warn_strict_overflow, align 4, !dbg !15321
  %15 = load i32, i32* %wc, align 4, !dbg !15321
  %cmp25 = icmp sge i32 %14, %15, !dbg !15321
  br i1 %cmp25, label %if.then27, label %if.end35, !dbg !15323

if.then27:                                        ; preds = %if.end24
  call void @llvm.dbg.declare(metadata i32* %location, metadata !15324, metadata !DIExpression()), !dbg !15326
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15327
  %call28 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %16), !dbg !15329
  %tobool29 = icmp ne i8 %call28, 0, !dbg !15329
  br i1 %tobool29, label %if.else31, label %if.then30, !dbg !15330

if.then30:                                        ; preds = %if.then27
  %17 = load i32, i32* @input_location, align 4, !dbg !15331
  store i32 %17, i32* %location, align 4, !dbg !15332
  br label %if.end33, !dbg !15333

if.else31:                                        ; preds = %if.then27
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15334
  %call32 = call i32 @gimple_location(%union.gimple_statement_d* %18), !dbg !15335
  store i32 %call32, i32* %location, align 4, !dbg !15336
  br label %if.end33

if.end33:                                         ; preds = %if.else31, %if.then30
  %19 = load i32, i32* %location, align 4, !dbg !15337
  %20 = load i8*, i8** %warnmsg, align 8, !dbg !15338
  %call34 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %19, i32 187, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i64 0, i64 0), i8* %20), !dbg !15339
  br label %if.end35, !dbg !15340

if.end35:                                         ; preds = %if.end33, %if.end24
  br label %if.end36, !dbg !15341

if.end36:                                         ; preds = %if.end35, %land.lhs.true18, %if.end
  %21 = load i32, i32* @warn_type_limits, align 4, !dbg !15342
  %tobool37 = icmp ne i32 %21, 0, !dbg !15342
  br i1 %tobool37, label %land.lhs.true38, label %if.end104, !dbg !15344

land.lhs.true38:                                  ; preds = %if.end36
  %22 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !15345
  %tobool39 = icmp ne %union.tree_node* %22, null, !dbg !15345
  br i1 %tobool39, label %land.lhs.true40, label %if.end104, !dbg !15346

land.lhs.true40:                                  ; preds = %land.lhs.true38
  %23 = load i8, i8* %only_ranges, align 1, !dbg !15347
  %conv41 = zext i8 %23 to i32, !dbg !15347
  %tobool42 = icmp ne i32 %conv41, 0, !dbg !15347
  br i1 %tobool42, label %land.lhs.true43, label %if.end104, !dbg !15348

land.lhs.true43:                                  ; preds = %land.lhs.true40
  %24 = load i32, i32* %code.addr, align 4, !dbg !15349
  %idxprom = sext i32 %24 to i64, !dbg !15349
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !15349
  %25 = load i32, i32* %arrayidx, align 4, !dbg !15349
  %cmp44 = icmp eq i32 %25, 5, !dbg !15350
  br i1 %cmp44, label %land.lhs.true46, label %if.end104, !dbg !15351

land.lhs.true46:                                  ; preds = %land.lhs.true43
  %26 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !15352
  %base47 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !15352
  %27 = bitcast %struct.tree_base* %base47 to i64*, !dbg !15352
  %bf.load48 = load i64, i64* %27, align 8, !dbg !15352
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !15352
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !15352
  %cmp51 = icmp eq i32 %bf.cast50, 141, !dbg !15353
  br i1 %cmp51, label %if.then53, label %if.end104, !dbg !15354

if.then53:                                        ; preds = %land.lhs.true46
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !15355, metadata !DIExpression()), !dbg !15357
  %28 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !15358
  %common = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !15358
  %type54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15358
  %29 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !15358
  store %union.tree_node* %29, %union.tree_node** %type, align 8, !dbg !15357
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr0, metadata !15359, metadata !DIExpression()), !dbg !15360
  %30 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !15361
  %call55 = call %struct.value_range_d* @get_value_range(%union.tree_node* %30), !dbg !15362
  store %struct.value_range_d* %call55, %struct.value_range_d** %vr0, align 8, !dbg !15360
  %31 = load %struct.value_range_d*, %struct.value_range_d** %vr0, align 8, !dbg !15363
  %type56 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %31, i32 0, i32 0, !dbg !15365
  %32 = load i32, i32* %type56, align 8, !dbg !15365
  %cmp57 = icmp ne i32 %32, 3, !dbg !15366
  br i1 %cmp57, label %land.lhs.true59, label %if.end103, !dbg !15367

land.lhs.true59:                                  ; preds = %if.then53
  %33 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15368
  %base60 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !15368
  %34 = bitcast %struct.tree_base* %base60 to i64*, !dbg !15368
  %bf.load61 = load i64, i64* %34, align 8, !dbg !15368
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !15368
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !15368
  %cmp64 = icmp eq i32 %bf.cast63, 6, !dbg !15368
  br i1 %cmp64, label %land.lhs.true80, label %lor.lhs.false66, !dbg !15368

lor.lhs.false66:                                  ; preds = %land.lhs.true59
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15368
  %base67 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !15368
  %36 = bitcast %struct.tree_base* %base67 to i64*, !dbg !15368
  %bf.load68 = load i64, i64* %36, align 8, !dbg !15368
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !15368
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !15368
  %cmp71 = icmp eq i32 %bf.cast70, 7, !dbg !15368
  br i1 %cmp71, label %land.lhs.true80, label %lor.lhs.false73, !dbg !15368

lor.lhs.false73:                                  ; preds = %lor.lhs.false66
  %37 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15368
  %base74 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !15368
  %38 = bitcast %struct.tree_base* %base74 to i64*, !dbg !15368
  %bf.load75 = load i64, i64* %38, align 8, !dbg !15368
  %bf.clear76 = and i64 %bf.load75, 65535, !dbg !15368
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !15368
  %cmp78 = icmp eq i32 %bf.cast77, 8, !dbg !15368
  br i1 %cmp78, label %land.lhs.true80, label %if.end103, !dbg !15369

land.lhs.true80:                                  ; preds = %lor.lhs.false73, %lor.lhs.false66, %land.lhs.true59
  %39 = load %struct.value_range_d*, %struct.value_range_d** %vr0, align 8, !dbg !15370
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %39, i32 0, i32 1, !dbg !15371
  %40 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !15371
  %call81 = call zeroext i8 @vrp_val_is_min(%union.tree_node* %40), !dbg !15372
  %conv82 = zext i8 %call81 to i32, !dbg !15372
  %tobool83 = icmp ne i32 %conv82, 0, !dbg !15372
  br i1 %tobool83, label %land.lhs.true84, label %if.end103, !dbg !15373

land.lhs.true84:                                  ; preds = %land.lhs.true80
  %41 = load %struct.value_range_d*, %struct.value_range_d** %vr0, align 8, !dbg !15374
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %41, i32 0, i32 2, !dbg !15375
  %42 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !15375
  %call85 = call zeroext i8 @vrp_val_is_max(%union.tree_node* %42), !dbg !15376
  %conv86 = zext i8 %call85 to i32, !dbg !15376
  %tobool87 = icmp ne i32 %conv86, 0, !dbg !15376
  br i1 %tobool87, label %land.lhs.true88, label %if.end103, !dbg !15377

land.lhs.true88:                                  ; preds = %land.lhs.true84
  %43 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !15378
  %call89 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %43), !dbg !15379
  %conv90 = zext i8 %call89 to i32, !dbg !15379
  %tobool91 = icmp ne i32 %conv90, 0, !dbg !15379
  br i1 %tobool91, label %if.then92, label %if.end103, !dbg !15380

if.then92:                                        ; preds = %land.lhs.true88
  call void @llvm.dbg.declare(metadata i32* %location93, metadata !15381, metadata !DIExpression()), !dbg !15383
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15384
  %call94 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %44), !dbg !15386
  %tobool95 = icmp ne i8 %call94, 0, !dbg !15386
  br i1 %tobool95, label %if.else97, label %if.then96, !dbg !15387

if.then96:                                        ; preds = %if.then92
  %45 = load i32, i32* @input_location, align 4, !dbg !15388
  store i32 %45, i32* %location93, align 4, !dbg !15389
  br label %if.end99, !dbg !15390

if.else97:                                        ; preds = %if.then92
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15391
  %call98 = call i32 @gimple_location(%union.gimple_statement_d* %46), !dbg !15392
  store i32 %call98, i32* %location93, align 4, !dbg !15393
  br label %if.end99

if.end99:                                         ; preds = %if.else97, %if.then96
  %47 = load i32, i32* %location93, align 4, !dbg !15394
  %48 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !15395
  %call100 = call i32 @integer_zerop(%union.tree_node* %48), !dbg !15396
  %tobool101 = icmp ne i32 %call100, 0, !dbg !15396
  %49 = zext i1 %tobool101 to i64, !dbg !15396
  %cond = select i1 %tobool101, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.59, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.60, i64 0, i64 0), !dbg !15396
  %call102 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %47, i32 206, i8* %cond), !dbg !15397
  br label %if.end103, !dbg !15398

if.end103:                                        ; preds = %if.end99, %land.lhs.true88, %land.lhs.true84, %land.lhs.true80, %lor.lhs.false73, %if.then53
  br label %if.end104, !dbg !15399

if.end104:                                        ; preds = %if.end103, %land.lhs.true46, %land.lhs.true43, %land.lhs.true40, %land.lhs.true38, %if.end36
  %50 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !15400
  store %union.tree_node* %50, %union.tree_node** %retval, align 8, !dbg !15401
  br label %return, !dbg !15401

return:                                           ; preds = %if.end104, %if.then
  %51 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !15402
  ret %union.tree_node* %51, !dbg !15402
}

declare dso_local void @print_gimple_expr(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

declare dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_make_false(%union.gimple_statement_d* %gs) #0 !dbg !15403 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15406, metadata !DIExpression()), !dbg !15407
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15408
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !15409
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !15410
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15411
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !15412
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !15413
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15414
  %gsbase = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_base*, !dbg !15415
  %5 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !15416
  %bf.load = load i32, i32* %5, align 8, !dbg !15417
  %bf.clear = and i32 %bf.load, 65535, !dbg !15417
  %bf.set = or i32 %bf.clear, 6619136, !dbg !15417
  store i32 %bf.set, i32* %5, align 8, !dbg !15417
  ret void, !dbg !15418
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_make_true(%union.gimple_statement_d* %gs) #0 !dbg !15419 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15420, metadata !DIExpression()), !dbg !15421
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15422
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !15423
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !15424
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15425
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !15426
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !15427
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15428
  %gsbase = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_base*, !dbg !15429
  %5 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !15430
  %bf.load = load i32, i32* %5, align 8, !dbg !15431
  %bf.clear = and i32 %bf.load, 65535, !dbg !15431
  %bf.set = or i32 %bf.clear, 6619136, !dbg !15431
  store i32 %bf.set, i32* %5, align 8, !dbg !15431
  ret void, !dbg !15432
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) #0 !dbg !15433 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !15434, metadata !DIExpression()), !dbg !15435
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !15436
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !15437
  %cmp = icmp ne i32 %call, 0, !dbg !15438
  %conv = zext i1 %cmp to i32, !dbg !15438
  %conv1 = trunc i32 %conv to i8, !dbg !15437
  ret i8 %conv1, !dbg !15439
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !15440 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !15443, metadata !DIExpression()), !dbg !15444
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !15445
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !15446
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !15447
  %1 = load i32, i32* %location, align 8, !dbg !15447
  ret i32 %1, !dbg !15448
}

declare dso_local zeroext i8 @warning_at(i32, i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !15449 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15452, metadata !DIExpression()), !dbg !15453
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !15454, metadata !DIExpression()), !dbg !15455
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15456
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !15457
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !15458
  ret void, !dbg !15459
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !15460 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15461, metadata !DIExpression()), !dbg !15462
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !15463, metadata !DIExpression()), !dbg !15464
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15465
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !15466
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !15467
  ret void, !dbg !15468
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !15469 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15470, metadata !DIExpression()), !dbg !15471
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !15472, metadata !DIExpression()), !dbg !15473
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !15474, metadata !DIExpression()), !dbg !15475
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15476
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !15476
  %conv = zext i8 %call to i32, !dbg !15476
  %tobool = icmp ne i32 %conv, 0, !dbg !15476
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !15476

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !15476
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15476
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !15476
  %cmp = icmp ult i32 %1, %call1, !dbg !15476
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !15476

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !15476
  br label %cond.end, !dbg !15476

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !15476

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15476
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !15477
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15478
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !15479
  %5 = load i32, i32* %i.addr, align 4, !dbg !15480
  %idxprom = zext i32 %5 to i64, !dbg !15479
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !15479
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !15481
  ret void, !dbg !15482
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @simplify_truth_ops_using_ranges(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %stmt) #0 !dbg !15483 {
entry:
  %retval = alloca i8, align 1
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %rhs_code = alloca i32, align 4
  %val = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %vr = alloca %struct.value_range_d*, align 8
  %sop = alloca i8, align 1
  %need_conversion = alloca i8, align 1
  %location = alloca i32, align 4
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !15486, metadata !DIExpression()), !dbg !15487
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15488, metadata !DIExpression()), !dbg !15489
  call void @llvm.dbg.declare(metadata i32* %rhs_code, metadata !15490, metadata !DIExpression()), !dbg !15491
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15492
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !15493
  store i32 %call, i32* %rhs_code, align 4, !dbg !15491
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !15494, metadata !DIExpression()), !dbg !15495
  store %union.tree_node* null, %union.tree_node** %val, align 8, !dbg !15495
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !15496, metadata !DIExpression()), !dbg !15497
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !15498, metadata !DIExpression()), !dbg !15499
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !15500, metadata !DIExpression()), !dbg !15501
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !15502, metadata !DIExpression()), !dbg !15503
  store i8 0, i8* %sop, align 1, !dbg !15503
  call void @llvm.dbg.declare(metadata i8* %need_conversion, metadata !15504, metadata !DIExpression()), !dbg !15505
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15506
  %call1 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %1), !dbg !15507
  store %union.tree_node* %call1, %union.tree_node** %op0, align 8, !dbg !15508
  %2 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15509
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !15509
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15509
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15509
  %type2 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !15509
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 6, !dbg !15509
  %bf.load = load i32, i32* %precision, align 4, !dbg !15509
  %bf.clear = and i32 %bf.load, 1023, !dbg !15509
  %cmp = icmp ne i32 %bf.clear, 1, !dbg !15511
  br i1 %cmp, label %if.then, label %if.end20, !dbg !15512

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15513
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !15513
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !15513
  %bf.load3 = load i64, i64* %5, align 8, !dbg !15513
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !15513
  %bf.cast = trunc i64 %bf.clear4 to i32, !dbg !15513
  %cmp5 = icmp ne i32 %bf.cast, 141, !dbg !15516
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !15517

if.then6:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !15518
  br label %return, !dbg !15518

if.end:                                           ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15519
  %call7 = call %struct.value_range_d* @get_value_range(%union.tree_node* %6), !dbg !15520
  store %struct.value_range_d* %call7, %struct.value_range_d** %vr, align 8, !dbg !15521
  %7 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !15522
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !15523
  %call8 = call %union.tree_node* @compare_range_with_value(i32 100, %struct.value_range_d* %7, %union.tree_node* %8, i8* %sop), !dbg !15524
  store %union.tree_node* %call8, %union.tree_node** %val, align 8, !dbg !15525
  %9 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15526
  %tobool = icmp ne %union.tree_node* %9, null, !dbg !15526
  br i1 %tobool, label %lor.lhs.false, label %if.then11, !dbg !15528

lor.lhs.false:                                    ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15529
  %call9 = call i32 @integer_onep(%union.tree_node* %10), !dbg !15530
  %tobool10 = icmp ne i32 %call9, 0, !dbg !15530
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !15531

if.then11:                                        ; preds = %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !15532
  br label %return, !dbg !15532

if.end12:                                         ; preds = %lor.lhs.false
  %11 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !15533
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !15534
  %call13 = call %union.tree_node* @compare_range_with_value(i32 98, %struct.value_range_d* %11, %union.tree_node* %12, i8* %sop), !dbg !15535
  store %union.tree_node* %call13, %union.tree_node** %val, align 8, !dbg !15536
  %13 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15537
  %tobool14 = icmp ne %union.tree_node* %13, null, !dbg !15537
  br i1 %tobool14, label %lor.lhs.false15, label %if.then18, !dbg !15539

lor.lhs.false15:                                  ; preds = %if.end12
  %14 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15540
  %call16 = call i32 @integer_onep(%union.tree_node* %14), !dbg !15541
  %tobool17 = icmp ne i32 %call16, 0, !dbg !15541
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !15542

if.then18:                                        ; preds = %lor.lhs.false15, %if.end12
  store i8 0, i8* %retval, align 1, !dbg !15543
  br label %return, !dbg !15543

if.end19:                                         ; preds = %lor.lhs.false15
  br label %if.end20, !dbg !15544

if.end20:                                         ; preds = %if.end19, %entry
  %15 = load i32, i32* %rhs_code, align 4, !dbg !15545
  %cmp21 = icmp eq i32 %15, 96, !dbg !15547
  br i1 %cmp21, label %if.then22, label %if.else, !dbg !15548

if.then22:                                        ; preds = %if.end20
  store i32 102, i32* %rhs_code, align 4, !dbg !15549
  %16 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15551
  %common23 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !15551
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !15551
  %17 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !15551
  %call25 = call %union.tree_node* @build_int_cst(%union.tree_node* %17, i64 1), !dbg !15552
  store %union.tree_node* %call25, %union.tree_node** %op1, align 8, !dbg !15553
  br label %if.end81, !dbg !15554

if.else:                                          ; preds = %if.end20
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15555
  %call26 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %18), !dbg !15557
  store %union.tree_node* %call26, %union.tree_node** %op1, align 8, !dbg !15558
  %19 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15559
  %call27 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %19), !dbg !15561
  %tobool28 = icmp ne i8 %call27, 0, !dbg !15561
  br i1 %tobool28, label %if.then29, label %if.else52, !dbg !15562

if.then29:                                        ; preds = %if.else
  %20 = load i32, i32* %rhs_code, align 4, !dbg !15563
  %cmp30 = icmp ne i32 %20, 101, !dbg !15566
  br i1 %cmp30, label %land.lhs.true, label %if.end35, !dbg !15567

land.lhs.true:                                    ; preds = %if.then29
  %21 = load i32, i32* %rhs_code, align 4, !dbg !15568
  %cmp31 = icmp ne i32 %21, 102, !dbg !15569
  br i1 %cmp31, label %land.lhs.true32, label %if.end35, !dbg !15570

land.lhs.true32:                                  ; preds = %land.lhs.true
  %22 = load i32, i32* %rhs_code, align 4, !dbg !15571
  %cmp33 = icmp ne i32 %22, 95, !dbg !15572
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !15573

if.then34:                                        ; preds = %land.lhs.true32
  store i8 0, i8* %retval, align 1, !dbg !15574
  br label %return, !dbg !15574

if.end35:                                         ; preds = %land.lhs.true32, %land.lhs.true, %if.then29
  %23 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15575
  %call36 = call i32 @integer_zerop(%union.tree_node* %23), !dbg !15577
  %tobool37 = icmp ne i32 %call36, 0, !dbg !15577
  br i1 %tobool37, label %if.end45, label %land.lhs.true38, !dbg !15578

land.lhs.true38:                                  ; preds = %if.end35
  %24 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15579
  %call39 = call i32 @integer_onep(%union.tree_node* %24), !dbg !15580
  %tobool40 = icmp ne i32 %call39, 0, !dbg !15580
  br i1 %tobool40, label %if.end45, label %land.lhs.true41, !dbg !15581

land.lhs.true41:                                  ; preds = %land.lhs.true38
  %25 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15582
  %call42 = call i32 @integer_all_onesp(%union.tree_node* %25), !dbg !15583
  %tobool43 = icmp ne i32 %call42, 0, !dbg !15583
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !15584

if.then44:                                        ; preds = %land.lhs.true41
  store i8 0, i8* %retval, align 1, !dbg !15585
  br label %return, !dbg !15585

if.end45:                                         ; preds = %land.lhs.true41, %land.lhs.true38, %if.end35
  %26 = load i32, i32* %rhs_code, align 4, !dbg !15586
  %cmp46 = icmp eq i32 %26, 101, !dbg !15588
  br i1 %cmp46, label %if.then47, label %if.end51, !dbg !15589

if.then47:                                        ; preds = %if.end45
  store i32 102, i32* %rhs_code, align 4, !dbg !15590
  %27 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15592
  %common48 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !15592
  %type49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 2, !dbg !15592
  %28 = load %union.tree_node*, %union.tree_node** %type49, align 8, !dbg !15592
  %29 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15592
  %call50 = call %union.tree_node* @fold_unary_loc(i32 0, i32 96, %union.tree_node* %28, %union.tree_node* %29), !dbg !15592
  store %union.tree_node* %call50, %union.tree_node** %op1, align 8, !dbg !15593
  br label %if.end51, !dbg !15594

if.end51:                                         ; preds = %if.then47, %if.end45
  br label %if.end80, !dbg !15595

if.else52:                                        ; preds = %if.else
  %30 = load i32, i32* %rhs_code, align 4, !dbg !15596
  %cmp53 = icmp eq i32 %30, 101, !dbg !15599
  br i1 %cmp53, label %if.then54, label %if.end55, !dbg !15600

if.then54:                                        ; preds = %if.else52
  store i8 0, i8* %retval, align 1, !dbg !15601
  br label %return, !dbg !15601

if.end55:                                         ; preds = %if.else52
  %31 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15602
  %common56 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !15602
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !15602
  %32 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !15602
  %type58 = bitcast %union.tree_node* %32 to %struct.tree_type*, !dbg !15602
  %precision59 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type58, i32 0, i32 6, !dbg !15602
  %bf.load60 = load i32, i32* %precision59, align 4, !dbg !15602
  %bf.clear61 = and i32 %bf.load60, 1023, !dbg !15602
  %cmp62 = icmp ne i32 %bf.clear61, 1, !dbg !15604
  br i1 %cmp62, label %if.then63, label %if.end79, !dbg !15605

if.then63:                                        ; preds = %if.end55
  %33 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15606
  %call64 = call %struct.value_range_d* @get_value_range(%union.tree_node* %33), !dbg !15608
  store %struct.value_range_d* %call64, %struct.value_range_d** %vr, align 8, !dbg !15609
  %34 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !15610
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !15611
  %call65 = call %union.tree_node* @compare_range_with_value(i32 100, %struct.value_range_d* %34, %union.tree_node* %35, i8* %sop), !dbg !15612
  store %union.tree_node* %call65, %union.tree_node** %val, align 8, !dbg !15613
  %36 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15614
  %tobool66 = icmp ne %union.tree_node* %36, null, !dbg !15614
  br i1 %tobool66, label %lor.lhs.false67, label %if.then70, !dbg !15616

lor.lhs.false67:                                  ; preds = %if.then63
  %37 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15617
  %call68 = call i32 @integer_onep(%union.tree_node* %37), !dbg !15618
  %tobool69 = icmp ne i32 %call68, 0, !dbg !15618
  br i1 %tobool69, label %if.end71, label %if.then70, !dbg !15619

if.then70:                                        ; preds = %lor.lhs.false67, %if.then63
  store i8 0, i8* %retval, align 1, !dbg !15620
  br label %return, !dbg !15620

if.end71:                                         ; preds = %lor.lhs.false67
  %38 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !15621
  %39 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !15622
  %call72 = call %union.tree_node* @compare_range_with_value(i32 98, %struct.value_range_d* %38, %union.tree_node* %39, i8* %sop), !dbg !15623
  store %union.tree_node* %call72, %union.tree_node** %val, align 8, !dbg !15624
  %40 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15625
  %tobool73 = icmp ne %union.tree_node* %40, null, !dbg !15625
  br i1 %tobool73, label %lor.lhs.false74, label %if.then77, !dbg !15627

lor.lhs.false74:                                  ; preds = %if.end71
  %41 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15628
  %call75 = call i32 @integer_onep(%union.tree_node* %41), !dbg !15629
  %tobool76 = icmp ne i32 %call75, 0, !dbg !15629
  br i1 %tobool76, label %if.end78, label %if.then77, !dbg !15630

if.then77:                                        ; preds = %lor.lhs.false74, %if.end71
  store i8 0, i8* %retval, align 1, !dbg !15631
  br label %return, !dbg !15631

if.end78:                                         ; preds = %lor.lhs.false74
  br label %if.end79, !dbg !15632

if.end79:                                         ; preds = %if.end78, %if.end55
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.end51
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.then22
  %42 = load i8, i8* %sop, align 1, !dbg !15633
  %conv = zext i8 %42 to i32, !dbg !15633
  %tobool82 = icmp ne i32 %conv, 0, !dbg !15633
  br i1 %tobool82, label %land.lhs.true83, label %if.end103, !dbg !15635

land.lhs.true83:                                  ; preds = %if.end81
  %43 = load i32, i32* @warn_strict_overflow, align 4, !dbg !15636
  %cmp84 = icmp sge i32 %43, 4, !dbg !15636
  br i1 %cmp84, label %if.then86, label %if.end103, !dbg !15637

if.then86:                                        ; preds = %land.lhs.true83
  call void @llvm.dbg.declare(metadata i32* %location, metadata !15638, metadata !DIExpression()), !dbg !15640
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15641
  %call87 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %44), !dbg !15643
  %tobool88 = icmp ne i8 %call87, 0, !dbg !15643
  br i1 %tobool88, label %if.else90, label %if.then89, !dbg !15644

if.then89:                                        ; preds = %if.then86
  %45 = load i32, i32* @input_location, align 4, !dbg !15645
  store i32 %45, i32* %location, align 4, !dbg !15646
  br label %if.end92, !dbg !15647

if.else90:                                        ; preds = %if.then86
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15648
  %call91 = call i32 @gimple_location(%union.gimple_statement_d* %46), !dbg !15649
  store i32 %call91, i32* %location, align 4, !dbg !15650
  br label %if.end92

if.end92:                                         ; preds = %if.else90, %if.then89
  %47 = load i32, i32* %rhs_code, align 4, !dbg !15651
  %cmp93 = icmp eq i32 %47, 93, !dbg !15653
  br i1 %cmp93, label %if.then98, label %lor.lhs.false95, !dbg !15654

lor.lhs.false95:                                  ; preds = %if.end92
  %48 = load i32, i32* %rhs_code, align 4, !dbg !15655
  %cmp96 = icmp eq i32 %48, 94, !dbg !15656
  br i1 %cmp96, label %if.then98, label %if.else100, !dbg !15657

if.then98:                                        ; preds = %lor.lhs.false95, %if.end92
  %49 = load i32, i32* %location, align 4, !dbg !15658
  %call99 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %49, i32 187, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.61, i64 0, i64 0)), !dbg !15659
  br label %if.end102, !dbg !15659

if.else100:                                       ; preds = %lor.lhs.false95
  %50 = load i32, i32* %location, align 4, !dbg !15660
  %call101 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %50, i32 187, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.62, i64 0, i64 0)), !dbg !15661
  br label %if.end102

if.end102:                                        ; preds = %if.else100, %if.then98
  br label %if.end103, !dbg !15662

if.end103:                                        ; preds = %if.end102, %land.lhs.true83, %if.end81
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15663
  %call104 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %51), !dbg !15663
  %common105 = bitcast %union.tree_node* %call104 to %struct.tree_common*, !dbg !15663
  %type106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 2, !dbg !15663
  %52 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !15663
  %53 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15664
  %common107 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !15664
  %type108 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common107, i32 0, i32 2, !dbg !15664
  %54 = load %union.tree_node*, %union.tree_node** %type108, align 8, !dbg !15664
  %call109 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %52, %union.tree_node* %54), !dbg !15665
  %tobool110 = icmp ne i8 %call109, 0, !dbg !15666
  %lnot = xor i1 %tobool110, true, !dbg !15666
  %lnot.ext = zext i1 %lnot to i32, !dbg !15666
  %conv111 = trunc i32 %lnot.ext to i8, !dbg !15666
  store i8 %conv111, i8* %need_conversion, align 1, !dbg !15667
  %55 = load i8, i8* %need_conversion, align 1, !dbg !15668
  %conv112 = zext i8 %55 to i32, !dbg !15668
  %tobool113 = icmp ne i32 %conv112, 0, !dbg !15668
  br i1 %tobool113, label %land.lhs.true114, label %if.end132, !dbg !15670

land.lhs.true114:                                 ; preds = %if.end103
  %56 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15671
  %common115 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !15671
  %type116 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common115, i32 0, i32 2, !dbg !15671
  %57 = load %union.tree_node*, %union.tree_node** %type116, align 8, !dbg !15671
  %base117 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !15671
  %58 = bitcast %struct.tree_base* %base117 to i64*, !dbg !15671
  %bf.load118 = load i64, i64* %58, align 8, !dbg !15671
  %bf.lshr = lshr i64 %bf.load118, 21, !dbg !15671
  %bf.clear119 = and i64 %bf.lshr, 1, !dbg !15671
  %bf.cast120 = trunc i64 %bf.clear119 to i32, !dbg !15671
  %tobool121 = icmp ne i32 %bf.cast120, 0, !dbg !15671
  br i1 %tobool121, label %if.end132, label %land.lhs.true122, !dbg !15672

land.lhs.true122:                                 ; preds = %land.lhs.true114
  %59 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15673
  %common123 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !15673
  %type124 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common123, i32 0, i32 2, !dbg !15673
  %60 = load %union.tree_node*, %union.tree_node** %type124, align 8, !dbg !15673
  %type125 = bitcast %union.tree_node* %60 to %struct.tree_type*, !dbg !15673
  %precision126 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type125, i32 0, i32 6, !dbg !15673
  %bf.load127 = load i32, i32* %precision126, align 4, !dbg !15673
  %bf.clear128 = and i32 %bf.load127, 1023, !dbg !15673
  %cmp129 = icmp eq i32 %bf.clear128, 1, !dbg !15674
  br i1 %cmp129, label %if.then131, label %if.end132, !dbg !15675

if.then131:                                       ; preds = %land.lhs.true122
  store i8 0, i8* %retval, align 1, !dbg !15676
  br label %return, !dbg !15676

if.end132:                                        ; preds = %land.lhs.true122, %land.lhs.true114, %if.end103
  %61 = load i32, i32* %rhs_code, align 4, !dbg !15677
  switch i32 %61, label %sw.default [
    i32 93, label %sw.bb
    i32 94, label %sw.bb133
    i32 95, label %sw.bb134
    i32 102, label %sw.bb134
  ], !dbg !15678

sw.bb:                                            ; preds = %if.end132
  store i32 89, i32* %rhs_code, align 4, !dbg !15679
  br label %sw.epilog, !dbg !15681

sw.bb133:                                         ; preds = %if.end132
  store i32 87, i32* %rhs_code, align 4, !dbg !15682
  br label %sw.epilog, !dbg !15683

sw.bb134:                                         ; preds = %if.end132, %if.end132
  %62 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15684
  %call135 = call i32 @integer_zerop(%union.tree_node* %62), !dbg !15686
  %tobool136 = icmp ne i32 %call135, 0, !dbg !15686
  br i1 %tobool136, label %if.then137, label %if.end141, !dbg !15687

if.then137:                                       ; preds = %sw.bb134
  %63 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !15688
  %64 = load i8, i8* %need_conversion, align 1, !dbg !15690
  %conv138 = zext i8 %64 to i32, !dbg !15690
  %tobool139 = icmp ne i32 %conv138, 0, !dbg !15690
  %65 = zext i1 %tobool139 to i64, !dbg !15690
  %cond = select i1 %tobool139, i32 116, i32 141, !dbg !15690
  %66 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15691
  call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %63, i32 %cond, %union.tree_node* %66, %union.tree_node* null), !dbg !15692
  %67 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !15693
  %call140 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %67), !dbg !15694
  call void @update_stmt(%union.gimple_statement_d* %call140), !dbg !15695
  store i8 1, i8* %retval, align 1, !dbg !15696
  br label %return, !dbg !15696

if.end141:                                        ; preds = %sw.bb134
  store i32 88, i32* %rhs_code, align 4, !dbg !15697
  br label %sw.epilog, !dbg !15698

sw.default:                                       ; preds = %if.end132
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 6568, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !15699
  br label %sw.epilog, !dbg !15700

sw.epilog:                                        ; preds = %sw.default, %if.end141, %sw.bb133, %sw.bb
  %68 = load i8, i8* %need_conversion, align 1, !dbg !15701
  %tobool142 = icmp ne i8 %68, 0, !dbg !15701
  br i1 %tobool142, label %if.then143, label %if.end144, !dbg !15703

if.then143:                                       ; preds = %sw.epilog
  store i8 0, i8* %retval, align 1, !dbg !15704
  br label %return, !dbg !15704

if.end144:                                        ; preds = %sw.epilog
  %69 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !15705
  %70 = load i32, i32* %rhs_code, align 4, !dbg !15706
  %71 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15707
  %72 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15708
  call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %69, i32 %70, %union.tree_node* %71, %union.tree_node* %72), !dbg !15709
  %73 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !15710
  %call145 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %73), !dbg !15711
  call void @update_stmt(%union.gimple_statement_d* %call145), !dbg !15712
  store i8 1, i8* %retval, align 1, !dbg !15713
  br label %return, !dbg !15713

return:                                           ; preds = %if.end144, %if.then143, %if.then137, %if.then131, %if.then77, %if.then70, %if.then54, %if.then44, %if.then34, %if.then18, %if.then11, %if.then6
  %74 = load i8, i8* %retval, align 1, !dbg !15714
  ret i8 %74, !dbg !15714
}

declare dso_local i32 @integer_pow2p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @simplify_div_or_mod_using_ranges(%union.gimple_statement_d* %stmt) #0 !dbg !15715 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %rhs_code = alloca i32, align 4
  %val = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %vr = alloca %struct.value_range_d*, align 8
  %sop = alloca i8, align 1
  %location = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15716, metadata !DIExpression()), !dbg !15717
  call void @llvm.dbg.declare(metadata i32* %rhs_code, metadata !15718, metadata !DIExpression()), !dbg !15719
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15720
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !15721
  store i32 %call, i32* %rhs_code, align 4, !dbg !15719
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !15722, metadata !DIExpression()), !dbg !15723
  store %union.tree_node* null, %union.tree_node** %val, align 8, !dbg !15723
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !15724, metadata !DIExpression()), !dbg !15725
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15726
  %call1 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %1), !dbg !15727
  store %union.tree_node* %call1, %union.tree_node** %op0, align 8, !dbg !15725
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !15728, metadata !DIExpression()), !dbg !15729
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15730
  %call2 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %2), !dbg !15731
  store %union.tree_node* %call2, %union.tree_node** %op1, align 8, !dbg !15729
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !15732, metadata !DIExpression()), !dbg !15733
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15734
  %call3 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3), !dbg !15735
  %call4 = call %struct.value_range_d* @get_value_range(%union.tree_node* %call3), !dbg !15736
  store %struct.value_range_d* %call4, %struct.value_range_d** %vr, align 8, !dbg !15733
  %4 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15737
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !15737
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15737
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15737
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !15737
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !15737
  %bf.load = load i64, i64* %6, align 8, !dbg !15737
  %bf.lshr = lshr i64 %bf.load, 21, !dbg !15737
  %bf.clear = and i64 %bf.lshr, 1, !dbg !15737
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15737
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !15737
  br i1 %tobool, label %if.then, label %if.else, !dbg !15739

if.then:                                          ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !15740
  store %union.tree_node* %7, %union.tree_node** %val, align 8, !dbg !15742
  br label %if.end21, !dbg !15743

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !15744, metadata !DIExpression()), !dbg !15746
  store i8 0, i8* %sop, align 1, !dbg !15746
  %8 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !15747
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !15748
  %call5 = call %union.tree_node* @compare_range_with_value(i32 100, %struct.value_range_d* %8, %union.tree_node* %9, i8* %sop), !dbg !15749
  store %union.tree_node* %call5, %union.tree_node** %val, align 8, !dbg !15750
  %10 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15751
  %tobool6 = icmp ne %union.tree_node* %10, null, !dbg !15751
  br i1 %tobool6, label %land.lhs.true, label %if.end20, !dbg !15753

land.lhs.true:                                    ; preds = %if.else
  %11 = load i8, i8* %sop, align 1, !dbg !15754
  %conv = zext i8 %11 to i32, !dbg !15754
  %tobool7 = icmp ne i32 %conv, 0, !dbg !15754
  br i1 %tobool7, label %land.lhs.true8, label %if.end20, !dbg !15755

land.lhs.true8:                                   ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15756
  %call9 = call i32 @integer_onep(%union.tree_node* %12), !dbg !15757
  %tobool10 = icmp ne i32 %call9, 0, !dbg !15757
  br i1 %tobool10, label %land.lhs.true11, label %if.end20, !dbg !15758

land.lhs.true11:                                  ; preds = %land.lhs.true8
  %13 = load i32, i32* @warn_strict_overflow, align 4, !dbg !15759
  %cmp = icmp sge i32 %13, 4, !dbg !15759
  br i1 %cmp, label %if.then13, label %if.end20, !dbg !15760

if.then13:                                        ; preds = %land.lhs.true11
  call void @llvm.dbg.declare(metadata i32* %location, metadata !15761, metadata !DIExpression()), !dbg !15763
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15764
  %call14 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %14), !dbg !15766
  %tobool15 = icmp ne i8 %call14, 0, !dbg !15766
  br i1 %tobool15, label %if.else17, label %if.then16, !dbg !15767

if.then16:                                        ; preds = %if.then13
  %15 = load i32, i32* @input_location, align 4, !dbg !15768
  store i32 %15, i32* %location, align 4, !dbg !15769
  br label %if.end, !dbg !15770

if.else17:                                        ; preds = %if.then13
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15771
  %call18 = call i32 @gimple_location(%union.gimple_statement_d* %16), !dbg !15772
  store i32 %call18, i32* %location, align 4, !dbg !15773
  br label %if.end

if.end:                                           ; preds = %if.else17, %if.then16
  %17 = load i32, i32* %location, align 4, !dbg !15774
  %call19 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %17, i32 187, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.63, i64 0, i64 0)), !dbg !15775
  br label %if.end20, !dbg !15776

if.end20:                                         ; preds = %if.end, %land.lhs.true11, %land.lhs.true8, %land.lhs.true, %if.else
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15777
  %tobool22 = icmp ne %union.tree_node* %18, null, !dbg !15777
  br i1 %tobool22, label %land.lhs.true23, label %if.end42, !dbg !15779

land.lhs.true23:                                  ; preds = %if.end21
  %19 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15780
  %call24 = call i32 @integer_onep(%union.tree_node* %19), !dbg !15781
  %tobool25 = icmp ne i32 %call24, 0, !dbg !15781
  br i1 %tobool25, label %if.then26, label %if.end42, !dbg !15782

if.then26:                                        ; preds = %land.lhs.true23
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !15783, metadata !DIExpression()), !dbg !15785
  %20 = load i32, i32* %rhs_code, align 4, !dbg !15786
  %cmp27 = icmp eq i32 %20, 67, !dbg !15788
  br i1 %cmp27, label %if.then29, label %if.else33, !dbg !15789

if.then29:                                        ; preds = %if.then26
  %21 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15790
  %call30 = call i32 @tree_log2(%union.tree_node* %21), !dbg !15792
  %conv31 = sext i32 %call30 to i64, !dbg !15792
  %call32 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv31), !dbg !15793
  store %union.tree_node* %call32, %union.tree_node** %t, align 8, !dbg !15794
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15795
  call void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %22, i32 84), !dbg !15796
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15797
  %24 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15798
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %23, %union.tree_node* %24), !dbg !15799
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15800
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15801
  call void @gimple_assign_set_rhs2(%union.gimple_statement_d* %25, %union.tree_node* %26), !dbg !15802
  br label %if.end41, !dbg !15803

if.else33:                                        ; preds = %if.then26
  %27 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15804
  %common34 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !15804
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2, !dbg !15804
  %28 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !15804
  %call36 = call %union.tree_node* @build_int_cst(%union.tree_node* %28, i64 1), !dbg !15806
  store %union.tree_node* %call36, %union.tree_node** %t, align 8, !dbg !15807
  %29 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15808
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15809
  %call37 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %29, %union.tree_node* %30, i32 0), !dbg !15810
  store %union.tree_node* %call37, %union.tree_node** %t, align 8, !dbg !15811
  %31 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15812
  %common38 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !15812
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !15812
  %32 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !15812
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15812
  %call40 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %32, %union.tree_node* %33), !dbg !15812
  store %union.tree_node* %call40, %union.tree_node** %t, align 8, !dbg !15813
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15814
  call void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %34, i32 89), !dbg !15815
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15816
  %36 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15817
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %35, %union.tree_node* %36), !dbg !15818
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15819
  %38 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15820
  call void @gimple_assign_set_rhs2(%union.gimple_statement_d* %37, %union.tree_node* %38), !dbg !15821
  br label %if.end41

if.end41:                                         ; preds = %if.else33, %if.then29
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15822
  call void @update_stmt(%union.gimple_statement_d* %39), !dbg !15823
  store i8 1, i8* %retval, align 1, !dbg !15824
  br label %return, !dbg !15824

if.end42:                                         ; preds = %land.lhs.true23, %if.end21
  store i8 0, i8* %retval, align 1, !dbg !15825
  br label %return, !dbg !15825

return:                                           ; preds = %if.end42, %if.end41
  %40 = load i8, i8* %retval, align 1, !dbg !15826
  ret i8 %40, !dbg !15826
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @simplify_abs_using_ranges(%union.gimple_statement_d* %stmt) #0 !dbg !15827 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %val = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %vr = alloca %struct.value_range_d*, align 8
  %sop = alloca i8, align 1
  %location = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15828, metadata !DIExpression()), !dbg !15829
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !15830, metadata !DIExpression()), !dbg !15831
  store %union.tree_node* null, %union.tree_node** %val, align 8, !dbg !15831
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !15832, metadata !DIExpression()), !dbg !15833
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15834
  %call = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %0), !dbg !15835
  store %union.tree_node* %call, %union.tree_node** %op, align 8, !dbg !15833
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !15836, metadata !DIExpression()), !dbg !15837
  %1 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15838
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !15838
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15838
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !15838
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !15837
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !15839, metadata !DIExpression()), !dbg !15840
  %3 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15841
  %call2 = call %struct.value_range_d* @get_value_range(%union.tree_node* %3), !dbg !15842
  store %struct.value_range_d* %call2, %struct.value_range_d** %vr, align 8, !dbg !15840
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15843
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !15843
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !15843
  %bf.load = load i64, i64* %5, align 8, !dbg !15843
  %bf.lshr = lshr i64 %bf.load, 21, !dbg !15843
  %bf.clear = and i64 %bf.lshr, 1, !dbg !15843
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15843
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !15843
  br i1 %tobool, label %if.then, label %if.else, !dbg !15845

if.then:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !15846
  store %union.tree_node* %6, %union.tree_node** %val, align 8, !dbg !15848
  br label %if.end46, !dbg !15849

if.else:                                          ; preds = %entry
  %7 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !15850
  %tobool3 = icmp ne %struct.value_range_d* %7, null, !dbg !15850
  br i1 %tobool3, label %if.then4, label %if.end45, !dbg !15852

if.then4:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i8* %sop, metadata !15853, metadata !DIExpression()), !dbg !15855
  store i8 0, i8* %sop, align 1, !dbg !15855
  %8 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !15856
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !15857
  %call5 = call %union.tree_node* @compare_range_with_value(i32 98, %struct.value_range_d* %8, %union.tree_node* %9, i8* %sop), !dbg !15858
  store %union.tree_node* %call5, %union.tree_node** %val, align 8, !dbg !15859
  %10 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15860
  %tobool6 = icmp ne %union.tree_node* %10, null, !dbg !15860
  br i1 %tobool6, label %if.end20, label %if.then7, !dbg !15862

if.then7:                                         ; preds = %if.then4
  store i8 0, i8* %sop, align 1, !dbg !15863
  %11 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !15865
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !15866
  %call8 = call %union.tree_node* @compare_range_with_value(i32 100, %struct.value_range_d* %11, %union.tree_node* %12, i8* %sop), !dbg !15867
  store %union.tree_node* %call8, %union.tree_node** %val, align 8, !dbg !15868
  %13 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15869
  %tobool9 = icmp ne %union.tree_node* %13, null, !dbg !15869
  br i1 %tobool9, label %if.then10, label %if.end19, !dbg !15871

if.then10:                                        ; preds = %if.then7
  %14 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15872
  %call11 = call i32 @integer_zerop(%union.tree_node* %14), !dbg !15875
  %tobool12 = icmp ne i32 %call11, 0, !dbg !15875
  br i1 %tobool12, label %if.then13, label %if.else14, !dbg !15876

if.then13:                                        ; preds = %if.then10
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !15877
  store %union.tree_node* %15, %union.tree_node** %val, align 8, !dbg !15878
  br label %if.end18, !dbg !15879

if.else14:                                        ; preds = %if.then10
  %16 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15880
  %call15 = call i32 @integer_onep(%union.tree_node* %16), !dbg !15882
  %tobool16 = icmp ne i32 %call15, 0, !dbg !15882
  br i1 %tobool16, label %if.then17, label %if.end, !dbg !15883

if.then17:                                        ; preds = %if.else14
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !15884
  store %union.tree_node* %17, %union.tree_node** %val, align 8, !dbg !15885
  br label %if.end, !dbg !15886

if.end:                                           ; preds = %if.then17, %if.else14
  br label %if.end18

if.end18:                                         ; preds = %if.end, %if.then13
  br label %if.end19, !dbg !15887

if.end19:                                         ; preds = %if.end18, %if.then7
  br label %if.end20, !dbg !15888

if.end20:                                         ; preds = %if.end19, %if.then4
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15889
  %tobool21 = icmp ne %union.tree_node* %18, null, !dbg !15889
  br i1 %tobool21, label %land.lhs.true, label %if.end44, !dbg !15891

land.lhs.true:                                    ; preds = %if.end20
  %19 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15892
  %call22 = call i32 @integer_onep(%union.tree_node* %19), !dbg !15893
  %tobool23 = icmp ne i32 %call22, 0, !dbg !15893
  br i1 %tobool23, label %if.then26, label %lor.lhs.false, !dbg !15894

lor.lhs.false:                                    ; preds = %land.lhs.true
  %20 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15895
  %call24 = call i32 @integer_zerop(%union.tree_node* %20), !dbg !15896
  %tobool25 = icmp ne i32 %call24, 0, !dbg !15896
  br i1 %tobool25, label %if.then26, label %if.end44, !dbg !15897

if.then26:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %21 = load i8, i8* %sop, align 1, !dbg !15898
  %conv = zext i8 %21 to i32, !dbg !15898
  %tobool27 = icmp ne i32 %conv, 0, !dbg !15898
  br i1 %tobool27, label %land.lhs.true28, label %if.end38, !dbg !15901

land.lhs.true28:                                  ; preds = %if.then26
  %22 = load i32, i32* @warn_strict_overflow, align 4, !dbg !15902
  %cmp = icmp sge i32 %22, 4, !dbg !15902
  br i1 %cmp, label %if.then30, label %if.end38, !dbg !15903

if.then30:                                        ; preds = %land.lhs.true28
  call void @llvm.dbg.declare(metadata i32* %location, metadata !15904, metadata !DIExpression()), !dbg !15906
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15907
  %call31 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %23), !dbg !15909
  %tobool32 = icmp ne i8 %call31, 0, !dbg !15909
  br i1 %tobool32, label %if.else34, label %if.then33, !dbg !15910

if.then33:                                        ; preds = %if.then30
  %24 = load i32, i32* @input_location, align 4, !dbg !15911
  store i32 %24, i32* %location, align 4, !dbg !15912
  br label %if.end36, !dbg !15913

if.else34:                                        ; preds = %if.then30
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15914
  %call35 = call i32 @gimple_location(%union.gimple_statement_d* %25), !dbg !15915
  store i32 %call35, i32* %location, align 4, !dbg !15916
  br label %if.end36

if.end36:                                         ; preds = %if.else34, %if.then33
  %26 = load i32, i32* %location, align 4, !dbg !15917
  %call37 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %26, i32 187, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.64, i64 0, i64 0)), !dbg !15918
  br label %if.end38, !dbg !15919

if.end38:                                         ; preds = %if.end36, %land.lhs.true28, %if.then26
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15920
  %28 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15921
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %27, %union.tree_node* %28), !dbg !15922
  %29 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !15923
  %call39 = call i32 @integer_onep(%union.tree_node* %29), !dbg !15925
  %tobool40 = icmp ne i32 %call39, 0, !dbg !15925
  br i1 %tobool40, label %if.then41, label %if.else42, !dbg !15926

if.then41:                                        ; preds = %if.end38
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15927
  call void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %30, i32 79), !dbg !15928
  br label %if.end43, !dbg !15928

if.else42:                                        ; preds = %if.end38
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15929
  call void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %31, i32 141), !dbg !15930
  br label %if.end43

if.end43:                                         ; preds = %if.else42, %if.then41
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15931
  call void @update_stmt(%union.gimple_statement_d* %32), !dbg !15932
  store i8 1, i8* %retval, align 1, !dbg !15933
  br label %return, !dbg !15933

if.end44:                                         ; preds = %lor.lhs.false, %if.end20
  br label %if.end45, !dbg !15934

if.end45:                                         ; preds = %if.end44, %if.else
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then
  store i8 0, i8* %retval, align 1, !dbg !15935
  br label %return, !dbg !15935

return:                                           ; preds = %if.end46, %if.end43
  %33 = load i8, i8* %retval, align 1, !dbg !15936
  ret i8 %33, !dbg !15936
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @simplify_cond_using_ranges(%union.gimple_statement_d* %stmt) #0 !dbg !15937 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %cond_code = alloca i32, align 4
  %vr = alloca %struct.value_range_d*, align 8
  %new_tree = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15938, metadata !DIExpression()), !dbg !15939
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !15940, metadata !DIExpression()), !dbg !15941
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15942
  %call = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %0), !dbg !15943
  store %union.tree_node* %call, %union.tree_node** %op0, align 8, !dbg !15941
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !15944, metadata !DIExpression()), !dbg !15945
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15946
  %call1 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %1), !dbg !15947
  store %union.tree_node* %call1, %union.tree_node** %op1, align 8, !dbg !15945
  call void @llvm.dbg.declare(metadata i32* %cond_code, metadata !15948, metadata !DIExpression()), !dbg !15949
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15950
  %call2 = call i32 @gimple_cond_code(%union.gimple_statement_d* %2), !dbg !15951
  store i32 %call2, i32* %cond_code, align 4, !dbg !15949
  %3 = load i32, i32* %cond_code, align 4, !dbg !15952
  %cmp = icmp ne i32 %3, 102, !dbg !15954
  br i1 %cmp, label %land.lhs.true, label %if.end61, !dbg !15955

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* %cond_code, align 4, !dbg !15956
  %cmp3 = icmp ne i32 %4, 101, !dbg !15957
  br i1 %cmp3, label %land.lhs.true4, label %if.end61, !dbg !15958

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15959
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !15959
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !15959
  %bf.load = load i64, i64* %6, align 8, !dbg !15959
  %bf.clear = and i64 %bf.load, 65535, !dbg !15959
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15959
  %cmp5 = icmp eq i32 %bf.cast, 141, !dbg !15960
  br i1 %cmp5, label %land.lhs.true6, label %if.end61, !dbg !15961

land.lhs.true6:                                   ; preds = %land.lhs.true4
  %7 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15962
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !15962
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15962
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15962
  %base7 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !15962
  %9 = bitcast %struct.tree_base* %base7 to i64*, !dbg !15962
  %bf.load8 = load i64, i64* %9, align 8, !dbg !15962
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !15962
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !15962
  %cmp11 = icmp eq i32 %bf.cast10, 6, !dbg !15962
  br i1 %cmp11, label %land.lhs.true27, label %lor.lhs.false, !dbg !15962

lor.lhs.false:                                    ; preds = %land.lhs.true6
  %10 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15962
  %common12 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !15962
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !15962
  %11 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !15962
  %base14 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !15962
  %12 = bitcast %struct.tree_base* %base14 to i64*, !dbg !15962
  %bf.load15 = load i64, i64* %12, align 8, !dbg !15962
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !15962
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !15962
  %cmp18 = icmp eq i32 %bf.cast17, 7, !dbg !15962
  br i1 %cmp18, label %land.lhs.true27, label %lor.lhs.false19, !dbg !15962

lor.lhs.false19:                                  ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15962
  %common20 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !15962
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !15962
  %14 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !15962
  %base22 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !15962
  %15 = bitcast %struct.tree_base* %base22 to i64*, !dbg !15962
  %bf.load23 = load i64, i64* %15, align 8, !dbg !15962
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !15962
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !15962
  %cmp26 = icmp eq i32 %bf.cast25, 8, !dbg !15962
  br i1 %cmp26, label %land.lhs.true27, label %if.end61, !dbg !15963

land.lhs.true27:                                  ; preds = %lor.lhs.false19, %lor.lhs.false, %land.lhs.true6
  %16 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15964
  %call28 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %16), !dbg !15965
  %conv = zext i8 %call28 to i32, !dbg !15965
  %tobool = icmp ne i32 %conv, 0, !dbg !15965
  br i1 %tobool, label %if.then, label %if.end61, !dbg !15966

if.then:                                          ; preds = %land.lhs.true27
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !15967, metadata !DIExpression()), !dbg !15969
  %17 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15970
  %call29 = call %struct.value_range_d* @get_value_range(%union.tree_node* %17), !dbg !15971
  store %struct.value_range_d* %call29, %struct.value_range_d** %vr, align 8, !dbg !15969
  %18 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !15972
  %type30 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %18, i32 0, i32 0, !dbg !15974
  %19 = load i32, i32* %type30, align 8, !dbg !15974
  %cmp31 = icmp eq i32 %19, 1, !dbg !15975
  br i1 %cmp31, label %if.then33, label %if.end60, !dbg !15976

if.then33:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !15977, metadata !DIExpression()), !dbg !15979
  %20 = load i32, i32* %cond_code, align 4, !dbg !15980
  %21 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !15981
  %22 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !15982
  %23 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !15983
  %call34 = call %union.tree_node* @test_for_singularity(i32 %20, %union.tree_node* %21, %union.tree_node* %22, %struct.value_range_d* %23), !dbg !15984
  store %union.tree_node* %call34, %union.tree_node** %new_tree, align 8, !dbg !15979
  %24 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !15985
  %tobool35 = icmp ne %union.tree_node* %24, null, !dbg !15985
  br i1 %tobool35, label %if.then36, label %if.end45, !dbg !15987

if.then36:                                        ; preds = %if.then33
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !15988
  %tobool37 = icmp ne %struct._IO_FILE* %25, null, !dbg !15988
  br i1 %tobool37, label %if.then38, label %if.end, !dbg !15991

if.then38:                                        ; preds = %if.then36
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !15992
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.65, i64 0, i64 0)), !dbg !15994
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !15995
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15996
  call void @print_gimple_stmt(%struct._IO_FILE* %27, %union.gimple_statement_d* %28, i32 0, i32 0), !dbg !15997
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !15998
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i64 0, i64 0)), !dbg !15999
  br label %if.end, !dbg !16000

if.end:                                           ; preds = %if.then38, %if.then36
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16001
  call void @gimple_cond_set_code(%union.gimple_statement_d* %30, i32 101), !dbg !16002
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16003
  %32 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !16004
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %31, %union.tree_node* %32), !dbg !16005
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16006
  %34 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !16007
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %33, %union.tree_node* %34), !dbg !16008
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16009
  call void @update_stmt(%union.gimple_statement_d* %35), !dbg !16010
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16011
  %tobool41 = icmp ne %struct._IO_FILE* %36, null, !dbg !16011
  br i1 %tobool41, label %if.then42, label %if.end44, !dbg !16013

if.then42:                                        ; preds = %if.end
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16014
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16016
  call void @print_gimple_stmt(%struct._IO_FILE* %37, %union.gimple_statement_d* %38, i32 0, i32 0), !dbg !16017
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16018
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !16019
  br label %if.end44, !dbg !16020

if.end44:                                         ; preds = %if.then42, %if.end
  store i8 1, i8* %retval, align 1, !dbg !16021
  br label %return, !dbg !16021

if.end45:                                         ; preds = %if.then33
  %40 = load i32, i32* %cond_code, align 4, !dbg !16022
  %call46 = call i32 @invert_tree_comparison(i32 %40, i8 zeroext 0), !dbg !16023
  store i32 %call46, i32* %cond_code, align 4, !dbg !16024
  %41 = load i32, i32* %cond_code, align 4, !dbg !16025
  %42 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !16026
  %43 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !16027
  %44 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16028
  %call47 = call %union.tree_node* @test_for_singularity(i32 %41, %union.tree_node* %42, %union.tree_node* %43, %struct.value_range_d* %44), !dbg !16029
  store %union.tree_node* %call47, %union.tree_node** %new_tree, align 8, !dbg !16030
  %45 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !16031
  %tobool48 = icmp ne %union.tree_node* %45, null, !dbg !16031
  br i1 %tobool48, label %if.then49, label %if.end59, !dbg !16033

if.then49:                                        ; preds = %if.end45
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16034
  %tobool50 = icmp ne %struct._IO_FILE* %46, null, !dbg !16034
  br i1 %tobool50, label %if.then51, label %if.end54, !dbg !16037

if.then51:                                        ; preds = %if.then49
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16038
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.65, i64 0, i64 0)), !dbg !16040
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16041
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16042
  call void @print_gimple_stmt(%struct._IO_FILE* %48, %union.gimple_statement_d* %49, i32 0, i32 0), !dbg !16043
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16044
  %call53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i64 0, i64 0)), !dbg !16045
  br label %if.end54, !dbg !16046

if.end54:                                         ; preds = %if.then51, %if.then49
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16047
  call void @gimple_cond_set_code(%union.gimple_statement_d* %51, i32 102), !dbg !16048
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16049
  %53 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !16050
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %52, %union.tree_node* %53), !dbg !16051
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16052
  %55 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !16053
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %54, %union.tree_node* %55), !dbg !16054
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16055
  call void @update_stmt(%union.gimple_statement_d* %56), !dbg !16056
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16057
  %tobool55 = icmp ne %struct._IO_FILE* %57, null, !dbg !16057
  br i1 %tobool55, label %if.then56, label %if.end58, !dbg !16059

if.then56:                                        ; preds = %if.end54
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16060
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16062
  call void @print_gimple_stmt(%struct._IO_FILE* %58, %union.gimple_statement_d* %59, i32 0, i32 0), !dbg !16063
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16064
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)), !dbg !16065
  br label %if.end58, !dbg !16066

if.end58:                                         ; preds = %if.then56, %if.end54
  store i8 1, i8* %retval, align 1, !dbg !16067
  br label %return, !dbg !16067

if.end59:                                         ; preds = %if.end45
  br label %if.end60, !dbg !16068

if.end60:                                         ; preds = %if.end59, %if.then
  br label %if.end61, !dbg !16069

if.end61:                                         ; preds = %if.end60, %land.lhs.true27, %lor.lhs.false19, %land.lhs.true4, %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !16070
  br label %return, !dbg !16070

return:                                           ; preds = %if.end61, %if.end58, %if.end44
  %61 = load i8, i8* %retval, align 1, !dbg !16071
  ret i8 %61, !dbg !16071
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @simplify_switch_using_ranges(%union.gimple_statement_d* %stmt) #0 !dbg !16072 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op = alloca %union.tree_node*, align 8
  %vr = alloca %struct.value_range_d*, align 8
  %take_default = alloca i8, align 1
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %n = alloca i64, align 8
  %n2 = alloca i64, align 8
  %vec2 = alloca %union.tree_node*, align 8
  %su = alloca %struct.switch_update, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !16073, metadata !DIExpression()), !dbg !16074
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !16075, metadata !DIExpression()), !dbg !16076
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16077
  %call = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %0), !dbg !16078
  store %union.tree_node* %call, %union.tree_node** %op, align 8, !dbg !16076
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !16079, metadata !DIExpression()), !dbg !16080
  call void @llvm.dbg.declare(metadata i8* %take_default, metadata !16081, metadata !DIExpression()), !dbg !16082
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !16083, metadata !DIExpression()), !dbg !16084
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !16085, metadata !DIExpression()), !dbg !16086
  call void @llvm.dbg.declare(metadata i64* %i, metadata !16087, metadata !DIExpression()), !dbg !16088
  store i64 0, i64* %i, align 8, !dbg !16088
  call void @llvm.dbg.declare(metadata i64* %j, metadata !16089, metadata !DIExpression()), !dbg !16090
  store i64 0, i64* %j, align 8, !dbg !16090
  call void @llvm.dbg.declare(metadata i64* %n, metadata !16091, metadata !DIExpression()), !dbg !16092
  call void @llvm.dbg.declare(metadata i64* %n2, metadata !16093, metadata !DIExpression()), !dbg !16094
  call void @llvm.dbg.declare(metadata %union.tree_node** %vec2, metadata !16095, metadata !DIExpression()), !dbg !16096
  call void @llvm.dbg.declare(metadata %struct.switch_update* %su, metadata !16097, metadata !DIExpression()), !dbg !16098
  %1 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16099
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !16099
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !16099
  %bf.load = load i64, i64* %2, align 8, !dbg !16099
  %bf.clear = and i64 %bf.load, 65535, !dbg !16099
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16099
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !16101
  br i1 %cmp, label %if.then, label %if.else, !dbg !16102

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16103
  %call1 = call %struct.value_range_d* @get_value_range(%union.tree_node* %3), !dbg !16105
  store %struct.value_range_d* %call1, %struct.value_range_d** %vr, align 8, !dbg !16106
  %4 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16107
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %4, i32 0, i32 0, !dbg !16109
  %5 = load i32, i32* %type, align 8, !dbg !16109
  %cmp2 = icmp ne i32 %5, 1, !dbg !16110
  br i1 %cmp2, label %if.then4, label %lor.lhs.false, !dbg !16111

lor.lhs.false:                                    ; preds = %if.then
  %6 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16112
  %call3 = call zeroext i8 @symbolic_range_p(%struct.value_range_d* %6), !dbg !16113
  %conv = zext i8 %call3 to i32, !dbg !16113
  %tobool = icmp ne i32 %conv, 0, !dbg !16113
  br i1 %tobool, label %if.then4, label %if.end, !dbg !16114

if.then4:                                         ; preds = %lor.lhs.false, %if.then
  store i8 0, i8* %retval, align 1, !dbg !16115
  br label %return, !dbg !16115

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16116
  %8 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16117
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %8, i32 0, i32 1, !dbg !16118
  %9 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16118
  %10 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16119
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %10, i32 0, i32 2, !dbg !16120
  %11 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !16120
  %call5 = call zeroext i8 @find_case_label_range(%union.gimple_statement_d* %7, %union.tree_node* %9, %union.tree_node* %11, i64* %i, i64* %j), !dbg !16121
  %tobool6 = icmp ne i8 %call5, 0, !dbg !16122
  %lnot = xor i1 %tobool6, true, !dbg !16122
  %lnot.ext = zext i1 %lnot to i32, !dbg !16122
  %conv7 = trunc i32 %lnot.ext to i8, !dbg !16122
  store i8 %conv7, i8* %take_default, align 1, !dbg !16123
  br label %if.end26, !dbg !16124

if.else:                                          ; preds = %entry
  %12 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16125
  %base8 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !16125
  %13 = bitcast %struct.tree_base* %base8 to i64*, !dbg !16125
  %bf.load9 = load i64, i64* %13, align 8, !dbg !16125
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !16125
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !16125
  %cmp12 = icmp eq i32 %bf.cast11, 23, !dbg !16127
  br i1 %cmp12, label %if.then14, label %if.else24, !dbg !16128

if.then14:                                        ; preds = %if.else
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16129
  %15 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16131
  %call15 = call zeroext i8 @find_case_label_index(%union.gimple_statement_d* %14, i64 1, %union.tree_node* %15, i64* %i), !dbg !16132
  %tobool16 = icmp ne i8 %call15, 0, !dbg !16133
  %lnot17 = xor i1 %tobool16, true, !dbg !16133
  %lnot.ext18 = zext i1 %lnot17 to i32, !dbg !16133
  %conv19 = trunc i32 %lnot.ext18 to i8, !dbg !16133
  store i8 %conv19, i8* %take_default, align 1, !dbg !16134
  %16 = load i8, i8* %take_default, align 1, !dbg !16135
  %tobool20 = icmp ne i8 %16, 0, !dbg !16135
  br i1 %tobool20, label %if.then21, label %if.else22, !dbg !16137

if.then21:                                        ; preds = %if.then14
  store i64 1, i64* %i, align 8, !dbg !16138
  store i64 0, i64* %j, align 8, !dbg !16140
  br label %if.end23, !dbg !16141

if.else22:                                        ; preds = %if.then14
  %17 = load i64, i64* %i, align 8, !dbg !16142
  store i64 %17, i64* %j, align 8, !dbg !16144
  br label %if.end23

if.end23:                                         ; preds = %if.else22, %if.then21
  br label %if.end25, !dbg !16145

if.else24:                                        ; preds = %if.else
  store i8 0, i8* %retval, align 1, !dbg !16146
  br label %return, !dbg !16146

if.end25:                                         ; preds = %if.end23
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.end
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16147
  %call27 = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %18), !dbg !16148
  %conv28 = zext i32 %call27 to i64, !dbg !16148
  store i64 %conv28, i64* %n, align 8, !dbg !16149
  %19 = load i64, i64* %i, align 8, !dbg !16150
  %cmp29 = icmp eq i64 %19, 1, !dbg !16152
  br i1 %cmp29, label %land.lhs.true, label %if.end37, !dbg !16153

land.lhs.true:                                    ; preds = %if.end26
  %20 = load i64, i64* %j, align 8, !dbg !16154
  %21 = load i64, i64* %n, align 8, !dbg !16155
  %sub = sub i64 %21, 1, !dbg !16156
  %cmp31 = icmp eq i64 %20, %sub, !dbg !16157
  br i1 %cmp31, label %land.lhs.true33, label %if.end37, !dbg !16158

land.lhs.true33:                                  ; preds = %land.lhs.true
  %22 = load i8, i8* %take_default, align 1, !dbg !16159
  %conv34 = zext i8 %22 to i32, !dbg !16159
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !16159
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !16160

if.then36:                                        ; preds = %land.lhs.true33
  store i8 0, i8* %retval, align 1, !dbg !16161
  br label %return, !dbg !16161

if.end37:                                         ; preds = %land.lhs.true33, %land.lhs.true, %if.end26
  %23 = load i64, i64* %j, align 8, !dbg !16162
  %24 = load i64, i64* %i, align 8, !dbg !16162
  %sub38 = sub i64 %23, %24, !dbg !16162
  %add = add i64 %sub38, 1, !dbg !16162
  %25 = load i8, i8* %take_default, align 1, !dbg !16162
  %conv39 = zext i8 %25 to i32, !dbg !16162
  %conv40 = sext i32 %conv39 to i64, !dbg !16162
  %add41 = add i64 %add, %conv40, !dbg !16162
  %conv42 = trunc i64 %add41 to i32, !dbg !16162
  %call43 = call %union.tree_node* @make_tree_vec_stat(i32 %conv42), !dbg !16162
  store %union.tree_node* %call43, %union.tree_node** %vec2, align 8, !dbg !16163
  store i64 0, i64* %n2, align 8, !dbg !16164
  %26 = load i8, i8* %take_default, align 1, !dbg !16165
  %tobool44 = icmp ne i8 %26, 0, !dbg !16165
  br i1 %tobool44, label %if.then45, label %if.end47, !dbg !16167

if.then45:                                        ; preds = %if.end37
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16168
  %call46 = call %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %27), !dbg !16169
  %28 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !16170
  %vec = bitcast %union.tree_node* %28 to %struct.tree_vec*, !dbg !16170
  %a = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec, i32 0, i32 2, !dbg !16170
  %29 = load i64, i64* %n2, align 8, !dbg !16170
  %inc = add i64 %29, 1, !dbg !16170
  store i64 %inc, i64* %n2, align 8, !dbg !16170
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a, i64 0, i64 %29, !dbg !16170
  store %union.tree_node* %call46, %union.tree_node** %arrayidx, align 8, !dbg !16171
  br label %if.end47, !dbg !16170

if.end47:                                         ; preds = %if.then45, %if.end37
  br label %for.cond, !dbg !16172

for.cond:                                         ; preds = %for.inc, %if.end47
  %30 = load i64, i64* %i, align 8, !dbg !16173
  %31 = load i64, i64* %j, align 8, !dbg !16176
  %cmp48 = icmp ule i64 %30, %31, !dbg !16177
  br i1 %cmp48, label %for.body, label %for.end, !dbg !16178

for.body:                                         ; preds = %for.cond
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16179
  %33 = load i64, i64* %i, align 8, !dbg !16180
  %conv50 = trunc i64 %33 to i32, !dbg !16180
  %call51 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %32, i32 %conv50), !dbg !16181
  %34 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !16182
  %vec52 = bitcast %union.tree_node* %34 to %struct.tree_vec*, !dbg !16182
  %a53 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec52, i32 0, i32 2, !dbg !16182
  %35 = load i64, i64* %n2, align 8, !dbg !16182
  %arrayidx54 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a53, i64 0, i64 %35, !dbg !16182
  store %union.tree_node* %call51, %union.tree_node** %arrayidx54, align 8, !dbg !16183
  br label %for.inc, !dbg !16182

for.inc:                                          ; preds = %for.body
  %36 = load i64, i64* %i, align 8, !dbg !16184
  %inc55 = add i64 %36, 1, !dbg !16184
  store i64 %inc55, i64* %i, align 8, !dbg !16184
  %37 = load i64, i64* %n2, align 8, !dbg !16185
  %inc56 = add i64 %37, 1, !dbg !16185
  store i64 %inc56, i64* %n2, align 8, !dbg !16185
  br label %for.cond, !dbg !16186, !llvm.loop !16187

for.end:                                          ; preds = %for.cond
  store i64 0, i64* %i, align 8, !dbg !16189
  br label %for.cond57, !dbg !16191

for.cond57:                                       ; preds = %for.inc68, %for.end
  %38 = load i64, i64* %i, align 8, !dbg !16192
  %39 = load i64, i64* %n2, align 8, !dbg !16194
  %cmp58 = icmp ult i64 %38, %39, !dbg !16195
  br i1 %cmp58, label %for.body60, label %for.end70, !dbg !16196

for.body60:                                       ; preds = %for.cond57
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16197
  %call61 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %40), !dbg !16199
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !16200
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !16200
  %42 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !16200
  %vec62 = bitcast %union.tree_node* %42 to %struct.tree_vec*, !dbg !16200
  %a63 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec62, i32 0, i32 2, !dbg !16200
  %43 = load i64, i64* %i, align 8, !dbg !16200
  %arrayidx64 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a63, i64 0, i64 %43, !dbg !16200
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx64, align 8, !dbg !16200
  %exp = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !16200
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !16200
  %arrayidx65 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !16200
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx65, align 8, !dbg !16200
  %call66 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %45), !dbg !16200
  %call67 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %call61, %struct.basic_block_def* %call66), !dbg !16201
  store %struct.edge_def* %call67, %struct.edge_def** %e, align 8, !dbg !16202
  %46 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !16203
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 3, !dbg !16204
  store i8* inttoptr (i64 -1 to i8*), i8** %aux, align 8, !dbg !16205
  br label %for.inc68, !dbg !16206

for.inc68:                                        ; preds = %for.body60
  %47 = load i64, i64* %i, align 8, !dbg !16207
  %inc69 = add i64 %47, 1, !dbg !16207
  store i64 %inc69, i64* %i, align 8, !dbg !16207
  br label %for.cond57, !dbg !16208, !llvm.loop !16209

for.end70:                                        ; preds = %for.cond57
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16211
  %call71 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %48), !dbg !16211
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call71, i32 0, i32 1, !dbg !16211
  %call72 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !16211
  %49 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !16211
  %50 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %49, i32 0, i32 0, !dbg !16211
  %51 = extractvalue { i32, %struct.VEC_edge_gc** } %call72, 0, !dbg !16211
  store i32 %51, i32* %50, align 8, !dbg !16211
  %52 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %49, i32 0, i32 1, !dbg !16211
  %53 = extractvalue { i32, %struct.VEC_edge_gc** } %call72, 1, !dbg !16211
  store %struct.VEC_edge_gc** %53, %struct.VEC_edge_gc*** %52, align 8, !dbg !16211
  %54 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !16211
  %55 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !16211
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 16, i1 false), !dbg !16211
  br label %for.cond73, !dbg !16211

for.cond73:                                       ; preds = %for.inc91, %for.end70
  %56 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !16213
  %57 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %56, i32 0, i32 0, !dbg !16213
  %58 = load i32, i32* %57, align 8, !dbg !16213
  %59 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %56, i32 0, i32 1, !dbg !16213
  %60 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %59, align 8, !dbg !16213
  %call74 = call zeroext i8 @ei_cond(i32 %58, %struct.VEC_edge_gc** %60, %struct.edge_def** %e), !dbg !16213
  %tobool75 = icmp ne i8 %call74, 0, !dbg !16211
  br i1 %tobool75, label %for.body76, label %for.end92, !dbg !16211

for.body76:                                       ; preds = %for.cond73
  %61 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !16215
  %aux77 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 3, !dbg !16218
  %62 = load i8*, i8** %aux77, align 8, !dbg !16218
  %cmp78 = icmp eq i8* %62, inttoptr (i64 -1 to i8*), !dbg !16219
  br i1 %cmp78, label %if.then80, label %if.end82, !dbg !16220

if.then80:                                        ; preds = %for.body76
  %63 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !16221
  %aux81 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %63, i32 0, i32 3, !dbg !16223
  store i8* null, i8** %aux81, align 8, !dbg !16224
  br label %for.inc91, !dbg !16225

if.end82:                                         ; preds = %for.body76
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16226
  %tobool83 = icmp ne %struct._IO_FILE* %64, null, !dbg !16226
  br i1 %tobool83, label %land.lhs.true84, label %if.end88, !dbg !16228

land.lhs.true84:                                  ; preds = %if.end82
  %65 = load i32, i32* @dump_flags, align 4, !dbg !16229
  %and = and i32 %65, 8, !dbg !16230
  %tobool85 = icmp ne i32 %and, 0, !dbg !16230
  br i1 %tobool85, label %if.then86, label %if.end88, !dbg !16231

if.then86:                                        ; preds = %land.lhs.true84
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !16232
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.67, i64 0, i64 0)), !dbg !16234
  br label %if.end88, !dbg !16235

if.end88:                                         ; preds = %if.then86, %land.lhs.true84, %if.end82
  %67 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !16236
  %call89 = call %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** @to_remove_edges, %struct.edge_def* %67), !dbg !16236
  %68 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !16237
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 7, !dbg !16238
  %69 = load i32, i32* %flags, align 8, !dbg !16239
  %and90 = and i32 %69, -4097, !dbg !16239
  store i32 %and90, i32* %flags, align 8, !dbg !16239
  br label %for.inc91, !dbg !16240

for.inc91:                                        ; preds = %if.end88, %if.then80
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !16213
  br label %for.cond73, !dbg !16213, !llvm.loop !16241

for.end92:                                        ; preds = %for.cond73
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16243
  %stmt93 = getelementptr inbounds %struct.switch_update, %struct.switch_update* %su, i32 0, i32 0, !dbg !16244
  store %union.gimple_statement_d* %70, %union.gimple_statement_d** %stmt93, align 8, !dbg !16245
  %71 = load %union.tree_node*, %union.tree_node** %vec2, align 8, !dbg !16246
  %vec94 = getelementptr inbounds %struct.switch_update, %struct.switch_update* %su, i32 0, i32 1, !dbg !16247
  store %union.tree_node* %71, %union.tree_node** %vec94, align 8, !dbg !16248
  %call95 = call %struct.switch_update* @VEC_switch_update_heap_safe_push(%struct.VEC_switch_update_heap** @to_update_switch_stmts, %struct.switch_update* %su), !dbg !16249
  store i8 0, i8* %retval, align 1, !dbg !16250
  br label %return, !dbg !16250

return:                                           ; preds = %for.end92, %if.then36, %if.else24, %if.then4
  %72 = load i8, i8* %retval, align 1, !dbg !16251
  ret i8 %72, !dbg !16251
}

declare dso_local i32 @integer_all_onesp(%union.tree_node*) #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !16252 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16253, metadata !DIExpression()), !dbg !16254
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16255
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !16256
  ret %union.tree_node* %call, !dbg !16257
}

declare dso_local void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator*, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !16258 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !16259, metadata !DIExpression()), !dbg !16260
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !16261
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !16263
  %tobool = icmp ne i8 %call, 0, !dbg !16263
  br i1 %tobool, label %if.then, label %if.end, !dbg !16264

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !16265
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !16267
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !16268
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !16269
  br label %if.end, !dbg !16270

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !16271
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

declare dso_local i32 @tree_log2(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %s, i32 %code) #0 !dbg !16272 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !16275, metadata !DIExpression()), !dbg !16276
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !16277, metadata !DIExpression()), !dbg !16278
  %0 = load i32, i32* %code.addr, align 4, !dbg !16279
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !16280
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !16281
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !16282
  %bf.load = load i32, i32* %2, align 8, !dbg !16283
  %bf.value = and i32 %0, 65535, !dbg !16283
  %bf.shl = shl i32 %bf.value, 16, !dbg !16283
  %bf.clear = and i32 %bf.load, 65535, !dbg !16283
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !16283
  store i32 %bf.set, i32* %2, align 8, !dbg !16283
  ret void, !dbg !16284
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !16285 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16286, metadata !DIExpression()), !dbg !16287
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !16288, metadata !DIExpression()), !dbg !16289
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16290
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !16291
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !16292
  ret void, !dbg !16293
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs2(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !16294 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16295, metadata !DIExpression()), !dbg !16296
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !16297, metadata !DIExpression()), !dbg !16298
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16299
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !16300
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 2, %union.tree_node* %1), !dbg !16301
  ret void, !dbg !16302
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @test_for_singularity(i32 %cond_code, %union.tree_node* %op0, %union.tree_node* %op1, %struct.value_range_d* %vr) #0 !dbg !16303 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %cond_code.addr = alloca i32, align 4
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %vr.addr = alloca %struct.value_range_d*, align 8
  %min = alloca %union.tree_node*, align 8
  %max = alloca %union.tree_node*, align 8
  %one = alloca %union.tree_node*, align 8
  %one37 = alloca %union.tree_node*, align 8
  store i32 %cond_code, i32* %cond_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cond_code.addr, metadata !16306, metadata !DIExpression()), !dbg !16307
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !16308, metadata !DIExpression()), !dbg !16309
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !16310, metadata !DIExpression()), !dbg !16311
  store %struct.value_range_d* %vr, %struct.value_range_d** %vr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr.addr, metadata !16312, metadata !DIExpression()), !dbg !16313
  call void @llvm.dbg.declare(metadata %union.tree_node** %min, metadata !16314, metadata !DIExpression()), !dbg !16315
  store %union.tree_node* null, %union.tree_node** %min, align 8, !dbg !16315
  call void @llvm.dbg.declare(metadata %union.tree_node** %max, metadata !16316, metadata !DIExpression()), !dbg !16317
  store %union.tree_node* null, %union.tree_node** %max, align 8, !dbg !16317
  %0 = load i32, i32* %cond_code.addr, align 4, !dbg !16318
  %cmp = icmp eq i32 %0, 98, !dbg !16320
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !16321

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %cond_code.addr, align 4, !dbg !16322
  %cmp1 = icmp eq i32 %1, 97, !dbg !16323
  br i1 %cmp1, label %if.then, label %if.else, !dbg !16324

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !16325
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !16325
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !16325
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !16325
  %type2 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !16325
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 13, !dbg !16325
  %4 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !16325
  store %union.tree_node* %4, %union.tree_node** %min, align 8, !dbg !16327
  %5 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !16328
  store %union.tree_node* %5, %union.tree_node** %max, align 8, !dbg !16329
  %6 = load i32, i32* %cond_code.addr, align 4, !dbg !16330
  %cmp3 = icmp eq i32 %6, 97, !dbg !16332
  br i1 %cmp3, label %land.lhs.true, label %if.end24, !dbg !16333

land.lhs.true:                                    ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !16334
  %call = call zeroext i8 @is_overflow_infinity(%union.tree_node* %7), !dbg !16335
  %tobool = icmp ne i8 %call, 0, !dbg !16335
  br i1 %tobool, label %if.end24, label %if.then4, !dbg !16336

if.then4:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %one, metadata !16337, metadata !DIExpression()), !dbg !16339
  %8 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !16340
  %common5 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !16340
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !16340
  %9 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !16340
  %call7 = call %union.tree_node* @build_int_cst(%union.tree_node* %9, i64 1), !dbg !16341
  store %union.tree_node* %call7, %union.tree_node** %one, align 8, !dbg !16339
  %10 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !16342
  %common8 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !16342
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !16342
  %11 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !16342
  %12 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !16342
  %13 = load %union.tree_node*, %union.tree_node** %one, align 8, !dbg !16342
  %call10 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !16342
  store %union.tree_node* %call10, %union.tree_node** %max, align 8, !dbg !16343
  %14 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !16344
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !16344
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !16344
  %bf.load = load i64, i64* %15, align 8, !dbg !16344
  %bf.clear = and i64 %bf.load, 65535, !dbg !16344
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16344
  %idxprom = sext i32 %bf.cast to i64, !dbg !16344
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !16344
  %16 = load i32, i32* %arrayidx, align 4, !dbg !16344
  %cmp11 = icmp uge i32 %16, 4, !dbg !16344
  br i1 %cmp11, label %land.lhs.true12, label %if.end, !dbg !16344

land.lhs.true12:                                  ; preds = %if.then4
  %17 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !16344
  %base13 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !16344
  %18 = bitcast %struct.tree_base* %base13 to i64*, !dbg !16344
  %bf.load14 = load i64, i64* %18, align 8, !dbg !16344
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !16344
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !16344
  %idxprom17 = sext i32 %bf.cast16 to i64, !dbg !16344
  %arrayidx18 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom17, !dbg !16344
  %19 = load i32, i32* %arrayidx18, align 4, !dbg !16344
  %cmp19 = icmp ule i32 %19, 10, !dbg !16344
  br i1 %cmp19, label %if.then20, label %if.end, !dbg !16346

if.then20:                                        ; preds = %land.lhs.true12
  %20 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !16347
  %base21 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !16347
  %21 = bitcast %struct.tree_base* %base21 to i64*, !dbg !16347
  %bf.load22 = load i64, i64* %21, align 8, !dbg !16348
  %bf.clear23 = and i64 %bf.load22, -8388609, !dbg !16348
  %bf.set = or i64 %bf.clear23, 8388608, !dbg !16348
  store i64 %bf.set, i64* %21, align 8, !dbg !16348
  br label %if.end, !dbg !16347

if.end:                                           ; preds = %if.then20, %land.lhs.true12, %if.then4
  br label %if.end24, !dbg !16349

if.end24:                                         ; preds = %if.end, %land.lhs.true, %if.then
  br label %if.end67, !dbg !16350

if.else:                                          ; preds = %lor.lhs.false
  %22 = load i32, i32* %cond_code.addr, align 4, !dbg !16351
  %cmp25 = icmp eq i32 %22, 100, !dbg !16353
  br i1 %cmp25, label %if.then28, label %lor.lhs.false26, !dbg !16354

lor.lhs.false26:                                  ; preds = %if.else
  %23 = load i32, i32* %cond_code.addr, align 4, !dbg !16355
  %cmp27 = icmp eq i32 %23, 99, !dbg !16356
  br i1 %cmp27, label %if.then28, label %if.end66, !dbg !16357

if.then28:                                        ; preds = %lor.lhs.false26, %if.else
  %24 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !16358
  %common29 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !16358
  %type30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2, !dbg !16358
  %25 = load %union.tree_node*, %union.tree_node** %type30, align 8, !dbg !16358
  %type31 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !16358
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type31, i32 0, i32 14, !dbg !16358
  %26 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !16358
  store %union.tree_node* %26, %union.tree_node** %max, align 8, !dbg !16360
  %27 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !16361
  store %union.tree_node* %27, %union.tree_node** %min, align 8, !dbg !16362
  %28 = load i32, i32* %cond_code.addr, align 4, !dbg !16363
  %cmp32 = icmp eq i32 %28, 99, !dbg !16365
  br i1 %cmp32, label %land.lhs.true33, label %if.end65, !dbg !16366

land.lhs.true33:                                  ; preds = %if.then28
  %29 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16367
  %call34 = call zeroext i8 @is_overflow_infinity(%union.tree_node* %29), !dbg !16368
  %tobool35 = icmp ne i8 %call34, 0, !dbg !16368
  br i1 %tobool35, label %if.end65, label %if.then36, !dbg !16369

if.then36:                                        ; preds = %land.lhs.true33
  call void @llvm.dbg.declare(metadata %union.tree_node** %one37, metadata !16370, metadata !DIExpression()), !dbg !16372
  %30 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !16373
  %common38 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !16373
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !16373
  %31 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !16373
  %call40 = call %union.tree_node* @build_int_cst(%union.tree_node* %31, i64 1), !dbg !16374
  store %union.tree_node* %call40, %union.tree_node** %one37, align 8, !dbg !16372
  %32 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !16375
  %common41 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !16375
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !16375
  %33 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !16375
  %34 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16375
  %35 = load %union.tree_node*, %union.tree_node** %one37, align 8, !dbg !16375
  %call43 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !16375
  store %union.tree_node* %call43, %union.tree_node** %min, align 8, !dbg !16376
  %36 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16377
  %base44 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !16377
  %37 = bitcast %struct.tree_base* %base44 to i64*, !dbg !16377
  %bf.load45 = load i64, i64* %37, align 8, !dbg !16377
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !16377
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !16377
  %idxprom48 = sext i32 %bf.cast47 to i64, !dbg !16377
  %arrayidx49 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom48, !dbg !16377
  %38 = load i32, i32* %arrayidx49, align 4, !dbg !16377
  %cmp50 = icmp uge i32 %38, 4, !dbg !16377
  br i1 %cmp50, label %land.lhs.true51, label %if.end64, !dbg !16377

land.lhs.true51:                                  ; preds = %if.then36
  %39 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16377
  %base52 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !16377
  %40 = bitcast %struct.tree_base* %base52 to i64*, !dbg !16377
  %bf.load53 = load i64, i64* %40, align 8, !dbg !16377
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !16377
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !16377
  %idxprom56 = sext i32 %bf.cast55 to i64, !dbg !16377
  %arrayidx57 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom56, !dbg !16377
  %41 = load i32, i32* %arrayidx57, align 4, !dbg !16377
  %cmp58 = icmp ule i32 %41, 10, !dbg !16377
  br i1 %cmp58, label %if.then59, label %if.end64, !dbg !16379

if.then59:                                        ; preds = %land.lhs.true51
  %42 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16380
  %base60 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !16380
  %43 = bitcast %struct.tree_base* %base60 to i64*, !dbg !16380
  %bf.load61 = load i64, i64* %43, align 8, !dbg !16381
  %bf.clear62 = and i64 %bf.load61, -8388609, !dbg !16381
  %bf.set63 = or i64 %bf.clear62, 8388608, !dbg !16381
  store i64 %bf.set63, i64* %43, align 8, !dbg !16381
  br label %if.end64, !dbg !16380

if.end64:                                         ; preds = %if.then59, %land.lhs.true51, %if.then36
  br label %if.end65, !dbg !16382

if.end65:                                         ; preds = %if.end64, %land.lhs.true33, %if.then28
  br label %if.end66, !dbg !16383

if.end66:                                         ; preds = %if.end65, %lor.lhs.false26
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end24
  %44 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16384
  %tobool68 = icmp ne %union.tree_node* %44, null, !dbg !16384
  br i1 %tobool68, label %land.lhs.true69, label %if.end91, !dbg !16386

land.lhs.true69:                                  ; preds = %if.end67
  %45 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !16387
  %tobool70 = icmp ne %union.tree_node* %45, null, !dbg !16387
  br i1 %tobool70, label %if.then71, label %if.end91, !dbg !16388

if.then71:                                        ; preds = %land.lhs.true69
  %46 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !16389
  %min72 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %46, i32 0, i32 1, !dbg !16392
  %47 = load %union.tree_node*, %union.tree_node** %min72, align 8, !dbg !16392
  %48 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16393
  %call73 = call i32 @compare_values(%union.tree_node* %47, %union.tree_node* %48), !dbg !16394
  %cmp74 = icmp eq i32 %call73, 1, !dbg !16395
  br i1 %cmp74, label %if.then75, label %if.end77, !dbg !16396

if.then75:                                        ; preds = %if.then71
  %49 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !16397
  %min76 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %49, i32 0, i32 1, !dbg !16398
  %50 = load %union.tree_node*, %union.tree_node** %min76, align 8, !dbg !16398
  store %union.tree_node* %50, %union.tree_node** %min, align 8, !dbg !16399
  br label %if.end77, !dbg !16400

if.end77:                                         ; preds = %if.then75, %if.then71
  %51 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !16401
  %max78 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %51, i32 0, i32 2, !dbg !16403
  %52 = load %union.tree_node*, %union.tree_node** %max78, align 8, !dbg !16403
  %53 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !16404
  %call79 = call i32 @compare_values(%union.tree_node* %52, %union.tree_node* %53), !dbg !16405
  %cmp80 = icmp eq i32 %call79, -1, !dbg !16406
  br i1 %cmp80, label %if.then81, label %if.end83, !dbg !16407

if.then81:                                        ; preds = %if.end77
  %54 = load %struct.value_range_d*, %struct.value_range_d** %vr.addr, align 8, !dbg !16408
  %max82 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %54, i32 0, i32 2, !dbg !16409
  %55 = load %union.tree_node*, %union.tree_node** %max82, align 8, !dbg !16409
  store %union.tree_node* %55, %union.tree_node** %max, align 8, !dbg !16410
  br label %if.end83, !dbg !16411

if.end83:                                         ; preds = %if.then81, %if.end77
  %56 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16412
  %57 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !16414
  %call84 = call i32 @operand_equal_p(%union.tree_node* %56, %union.tree_node* %57, i32 0), !dbg !16415
  %tobool85 = icmp ne i32 %call84, 0, !dbg !16415
  br i1 %tobool85, label %land.lhs.true86, label %if.end90, !dbg !16416

land.lhs.true86:                                  ; preds = %if.end83
  %58 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16417
  %call87 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %58), !dbg !16418
  %conv = zext i8 %call87 to i32, !dbg !16418
  %tobool88 = icmp ne i32 %conv, 0, !dbg !16418
  br i1 %tobool88, label %if.then89, label %if.end90, !dbg !16419

if.then89:                                        ; preds = %land.lhs.true86
  %59 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16420
  store %union.tree_node* %59, %union.tree_node** %retval, align 8, !dbg !16421
  br label %return, !dbg !16421

if.end90:                                         ; preds = %land.lhs.true86, %if.end83
  br label %if.end91, !dbg !16422

if.end91:                                         ; preds = %if.end90, %land.lhs.true69, %if.end67
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !16423
  br label %return, !dbg !16423

return:                                           ; preds = %if.end91, %if.then89
  %60 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !16424
  ret %union.tree_node* %60, !dbg !16424
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_code(%union.gimple_statement_d* %gs, i32 %code) #0 !dbg !16425 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16426, metadata !DIExpression()), !dbg !16427
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !16428, metadata !DIExpression()), !dbg !16429
  %0 = load i32, i32* %code.addr, align 4, !dbg !16430
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16431
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !16432
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !16433
  %bf.load = load i32, i32* %2, align 8, !dbg !16434
  %bf.value = and i32 %0, 65535, !dbg !16434
  %bf.shl = shl i32 %bf.value, 16, !dbg !16434
  %bf.clear = and i32 %bf.load, 65535, !dbg !16434
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !16434
  store i32 %bf.set, i32* %2, align 8, !dbg !16434
  ret void, !dbg !16435
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %vec_, %struct.edge_def* %obj_) #0 !dbg !16436 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  %obj_.addr = alloca %struct.edge_def*, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !16439, metadata !DIExpression()), !dbg !16440
  store %struct.edge_def* %obj_, %struct.edge_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_.addr, metadata !16441, metadata !DIExpression()), !dbg !16440
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !16440
  %call = call i32 @VEC_edge_heap_reserve(%struct.VEC_edge_heap** %0, i32 1), !dbg !16440
  %1 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !16440
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %1, align 8, !dbg !16440
  %tobool = icmp ne %struct.VEC_edge_heap* %2, null, !dbg !16440
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16440

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !16440
  %4 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %3, align 8, !dbg !16440
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %4, i32 0, i32 0, !dbg !16440
  br label %cond.end, !dbg !16440

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16440

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !16440
  %5 = load %struct.edge_def*, %struct.edge_def** %obj_.addr, align 8, !dbg !16440
  %call1 = call %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %cond, %struct.edge_def* %5), !dbg !16440
  ret %struct.edge_def** %call1, !dbg !16440
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.switch_update* @VEC_switch_update_heap_safe_push(%struct.VEC_switch_update_heap** %vec_, %struct.switch_update* %obj_) #0 !dbg !16442 {
entry:
  %vec_.addr = alloca %struct.VEC_switch_update_heap**, align 8
  %obj_.addr = alloca %struct.switch_update*, align 8
  store %struct.VEC_switch_update_heap** %vec_, %struct.VEC_switch_update_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_switch_update_heap*** %vec_.addr, metadata !16447, metadata !DIExpression()), !dbg !16448
  store %struct.switch_update* %obj_, %struct.switch_update** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.switch_update** %obj_.addr, metadata !16449, metadata !DIExpression()), !dbg !16448
  %0 = load %struct.VEC_switch_update_heap**, %struct.VEC_switch_update_heap*** %vec_.addr, align 8, !dbg !16448
  %call = call i32 @VEC_switch_update_heap_reserve(%struct.VEC_switch_update_heap** %0, i32 1), !dbg !16448
  %1 = load %struct.VEC_switch_update_heap**, %struct.VEC_switch_update_heap*** %vec_.addr, align 8, !dbg !16448
  %2 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** %1, align 8, !dbg !16448
  %tobool = icmp ne %struct.VEC_switch_update_heap* %2, null, !dbg !16448
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16448

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_switch_update_heap**, %struct.VEC_switch_update_heap*** %vec_.addr, align 8, !dbg !16448
  %4 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** %3, align 8, !dbg !16448
  %base = getelementptr inbounds %struct.VEC_switch_update_heap, %struct.VEC_switch_update_heap* %4, i32 0, i32 0, !dbg !16448
  br label %cond.end, !dbg !16448

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16448

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_switch_update_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !16448
  %5 = load %struct.switch_update*, %struct.switch_update** %obj_.addr, align 8, !dbg !16448
  %call1 = call %struct.switch_update* @VEC_switch_update_base_quick_push(%struct.VEC_switch_update_base* %cond, %struct.switch_update* %5), !dbg !16448
  ret %struct.switch_update* %call1, !dbg !16448
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_heap_reserve(%struct.VEC_edge_heap** %vec_, i32 %alloc_) #0 !dbg !16450 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !16453, metadata !DIExpression()), !dbg !16454
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !16455, metadata !DIExpression()), !dbg !16454
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !16456, metadata !DIExpression()), !dbg !16454
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !16454
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !16454
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !16454
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16454

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !16454
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !16454
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %3, i32 0, i32 0, !dbg !16454
  br label %cond.end, !dbg !16454

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16454

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !16454
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !16454
  %call = call i32 @VEC_edge_base_space(%struct.VEC_edge_base* %cond, i32 %4), !dbg !16454
  %tobool1 = icmp ne i32 %call, 0, !dbg !16454
  %lnot = xor i1 %tobool1, true, !dbg !16454
  %lnot.ext = zext i1 %lnot to i32, !dbg !16454
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !16454
  %5 = load i32, i32* %extend, align 4, !dbg !16457
  %tobool2 = icmp ne i32 %5, 0, !dbg !16457
  br i1 %tobool2, label %if.then, label %if.end, !dbg !16454

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !16457
  %7 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %6, align 8, !dbg !16457
  %8 = bitcast %struct.VEC_edge_heap* %7 to i8*, !dbg !16457
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !16457
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !16457
  %10 = bitcast i8* %call3 to %struct.VEC_edge_heap*, !dbg !16457
  %11 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !16457
  store %struct.VEC_edge_heap* %10, %struct.VEC_edge_heap** %11, align 8, !dbg !16457
  br label %if.end, !dbg !16457

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !16454
  ret i32 %12, !dbg !16454
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %vec_, %struct.edge_def* %obj_) #0 !dbg !16459 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %obj_.addr = alloca %struct.edge_def*, align 8
  %slot_ = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !16463, metadata !DIExpression()), !dbg !16464
  store %struct.edge_def* %obj_, %struct.edge_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_.addr, metadata !16465, metadata !DIExpression()), !dbg !16464
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %slot_, metadata !16466, metadata !DIExpression()), !dbg !16464
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !16464
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %0, i32 0, i32 0, !dbg !16464
  %1 = load i32, i32* %num, align 8, !dbg !16464
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !16464
  %alloc = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 1, !dbg !16464
  %3 = load i32, i32* %alloc, align 4, !dbg !16464
  %cmp = icmp ult i32 %1, %3, !dbg !16464
  %conv = zext i1 %cmp to i32, !dbg !16464
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !16464
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !16464
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !16464
  %num1 = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 0, !dbg !16464
  %6 = load i32, i32* %num1, align 8, !dbg !16464
  %inc = add i32 %6, 1, !dbg !16464
  store i32 %inc, i32* %num1, align 8, !dbg !16464
  %idxprom = zext i32 %6 to i64, !dbg !16464
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !16464
  store %struct.edge_def** %arrayidx, %struct.edge_def*** %slot_, align 8, !dbg !16464
  %7 = load %struct.edge_def*, %struct.edge_def** %obj_.addr, align 8, !dbg !16464
  %8 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !16464
  store %struct.edge_def* %7, %struct.edge_def** %8, align 8, !dbg !16464
  %9 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !16464
  ret %struct.edge_def** %9, !dbg !16464
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_space(%struct.VEC_edge_base* %vec_, i32 %alloc_) #0 !dbg !16467 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !16470, metadata !DIExpression()), !dbg !16471
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !16472, metadata !DIExpression()), !dbg !16471
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !16471
  %cmp = icmp sge i32 %0, 0, !dbg !16471
  %conv = zext i1 %cmp to i32, !dbg !16471
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !16471
  %tobool = icmp ne %struct.VEC_edge_base* %1, null, !dbg !16471
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16471

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !16471
  %alloc = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 1, !dbg !16471
  %3 = load i32, i32* %alloc, align 4, !dbg !16471
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !16471
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 0, !dbg !16471
  %5 = load i32, i32* %num, align 8, !dbg !16471
  %sub = sub i32 %3, %5, !dbg !16471
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !16471
  %cmp1 = icmp uge i32 %sub, %6, !dbg !16471
  %conv2 = zext i1 %cmp1 to i32, !dbg !16471
  br label %cond.end, !dbg !16471

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !16471
  %tobool3 = icmp ne i32 %7, 0, !dbg !16471
  %lnot = xor i1 %tobool3, true, !dbg !16471
  %lnot.ext = zext i1 %lnot to i32, !dbg !16471
  br label %cond.end, !dbg !16471

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !16471
  ret i32 %cond, !dbg !16471
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_switch_update_heap_reserve(%struct.VEC_switch_update_heap** %vec_, i32 %alloc_) #0 !dbg !16473 {
entry:
  %vec_.addr = alloca %struct.VEC_switch_update_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_switch_update_heap** %vec_, %struct.VEC_switch_update_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_switch_update_heap*** %vec_.addr, metadata !16476, metadata !DIExpression()), !dbg !16477
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !16478, metadata !DIExpression()), !dbg !16477
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !16479, metadata !DIExpression()), !dbg !16477
  %0 = load %struct.VEC_switch_update_heap**, %struct.VEC_switch_update_heap*** %vec_.addr, align 8, !dbg !16477
  %1 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** %0, align 8, !dbg !16477
  %tobool = icmp ne %struct.VEC_switch_update_heap* %1, null, !dbg !16477
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16477

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_switch_update_heap**, %struct.VEC_switch_update_heap*** %vec_.addr, align 8, !dbg !16477
  %3 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** %2, align 8, !dbg !16477
  %base = getelementptr inbounds %struct.VEC_switch_update_heap, %struct.VEC_switch_update_heap* %3, i32 0, i32 0, !dbg !16477
  br label %cond.end, !dbg !16477

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16477

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_switch_update_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !16477
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !16477
  %call = call i32 @VEC_switch_update_base_space(%struct.VEC_switch_update_base* %cond, i32 %4), !dbg !16477
  %tobool1 = icmp ne i32 %call, 0, !dbg !16477
  %lnot = xor i1 %tobool1, true, !dbg !16477
  %lnot.ext = zext i1 %lnot to i32, !dbg !16477
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !16477
  %5 = load i32, i32* %extend, align 4, !dbg !16480
  %tobool2 = icmp ne i32 %5, 0, !dbg !16480
  br i1 %tobool2, label %if.then, label %if.end, !dbg !16477

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_switch_update_heap**, %struct.VEC_switch_update_heap*** %vec_.addr, align 8, !dbg !16480
  %7 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** %6, align 8, !dbg !16480
  %8 = bitcast %struct.VEC_switch_update_heap* %7 to i8*, !dbg !16480
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !16480
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 16), !dbg !16480
  %10 = bitcast i8* %call3 to %struct.VEC_switch_update_heap*, !dbg !16480
  %11 = load %struct.VEC_switch_update_heap**, %struct.VEC_switch_update_heap*** %vec_.addr, align 8, !dbg !16480
  store %struct.VEC_switch_update_heap* %10, %struct.VEC_switch_update_heap** %11, align 8, !dbg !16480
  br label %if.end, !dbg !16480

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !16477
  ret i32 %12, !dbg !16477
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.switch_update* @VEC_switch_update_base_quick_push(%struct.VEC_switch_update_base* %vec_, %struct.switch_update* %obj_) #0 !dbg !16482 {
entry:
  %vec_.addr = alloca %struct.VEC_switch_update_base*, align 8
  %obj_.addr = alloca %struct.switch_update*, align 8
  %slot_ = alloca %struct.switch_update*, align 8
  store %struct.VEC_switch_update_base* %vec_, %struct.VEC_switch_update_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_switch_update_base** %vec_.addr, metadata !16485, metadata !DIExpression()), !dbg !16486
  store %struct.switch_update* %obj_, %struct.switch_update** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.switch_update** %obj_.addr, metadata !16487, metadata !DIExpression()), !dbg !16486
  call void @llvm.dbg.declare(metadata %struct.switch_update** %slot_, metadata !16488, metadata !DIExpression()), !dbg !16486
  %0 = load %struct.VEC_switch_update_base*, %struct.VEC_switch_update_base** %vec_.addr, align 8, !dbg !16486
  %num = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %0, i32 0, i32 0, !dbg !16486
  %1 = load i32, i32* %num, align 8, !dbg !16486
  %2 = load %struct.VEC_switch_update_base*, %struct.VEC_switch_update_base** %vec_.addr, align 8, !dbg !16486
  %alloc = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %2, i32 0, i32 1, !dbg !16486
  %3 = load i32, i32* %alloc, align 4, !dbg !16486
  %cmp = icmp ult i32 %1, %3, !dbg !16486
  %conv = zext i1 %cmp to i32, !dbg !16486
  %4 = load %struct.VEC_switch_update_base*, %struct.VEC_switch_update_base** %vec_.addr, align 8, !dbg !16486
  %vec = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %4, i32 0, i32 2, !dbg !16486
  %5 = load %struct.VEC_switch_update_base*, %struct.VEC_switch_update_base** %vec_.addr, align 8, !dbg !16486
  %num1 = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %5, i32 0, i32 0, !dbg !16486
  %6 = load i32, i32* %num1, align 8, !dbg !16486
  %inc = add i32 %6, 1, !dbg !16486
  store i32 %inc, i32* %num1, align 8, !dbg !16486
  %idxprom = zext i32 %6 to i64, !dbg !16486
  %arrayidx = getelementptr inbounds [1 x %struct.switch_update], [1 x %struct.switch_update]* %vec, i64 0, i64 %idxprom, !dbg !16486
  store %struct.switch_update* %arrayidx, %struct.switch_update** %slot_, align 8, !dbg !16486
  %7 = load %struct.switch_update*, %struct.switch_update** %obj_.addr, align 8, !dbg !16489
  %tobool = icmp ne %struct.switch_update* %7, null, !dbg !16489
  br i1 %tobool, label %if.then, label %if.end, !dbg !16486

if.then:                                          ; preds = %entry
  %8 = load %struct.switch_update*, %struct.switch_update** %slot_, align 8, !dbg !16489
  %9 = load %struct.switch_update*, %struct.switch_update** %obj_.addr, align 8, !dbg !16489
  %10 = bitcast %struct.switch_update* %8 to i8*, !dbg !16489
  %11 = bitcast %struct.switch_update* %9 to i8*, !dbg !16489
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !16489
  br label %if.end, !dbg !16489

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.switch_update*, %struct.switch_update** %slot_, align 8, !dbg !16486
  ret %struct.switch_update* %12, !dbg !16486
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_switch_update_base_space(%struct.VEC_switch_update_base* %vec_, i32 %alloc_) #0 !dbg !16491 {
entry:
  %vec_.addr = alloca %struct.VEC_switch_update_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_switch_update_base* %vec_, %struct.VEC_switch_update_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_switch_update_base** %vec_.addr, metadata !16494, metadata !DIExpression()), !dbg !16495
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !16496, metadata !DIExpression()), !dbg !16495
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !16495
  %cmp = icmp sge i32 %0, 0, !dbg !16495
  %conv = zext i1 %cmp to i32, !dbg !16495
  %1 = load %struct.VEC_switch_update_base*, %struct.VEC_switch_update_base** %vec_.addr, align 8, !dbg !16495
  %tobool = icmp ne %struct.VEC_switch_update_base* %1, null, !dbg !16495
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16495

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_switch_update_base*, %struct.VEC_switch_update_base** %vec_.addr, align 8, !dbg !16495
  %alloc = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %2, i32 0, i32 1, !dbg !16495
  %3 = load i32, i32* %alloc, align 4, !dbg !16495
  %4 = load %struct.VEC_switch_update_base*, %struct.VEC_switch_update_base** %vec_.addr, align 8, !dbg !16495
  %num = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %4, i32 0, i32 0, !dbg !16495
  %5 = load i32, i32* %num, align 8, !dbg !16495
  %sub = sub i32 %3, %5, !dbg !16495
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !16495
  %cmp1 = icmp uge i32 %sub, %6, !dbg !16495
  %conv2 = zext i1 %cmp1 to i32, !dbg !16495
  br label %cond.end, !dbg !16495

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !16495
  %tobool3 = icmp ne i32 %7, 0, !dbg !16495
  %lnot = xor i1 %tobool3, true, !dbg !16495
  %lnot.ext = zext i1 %lnot to i32, !dbg !16495
  br label %cond.end, !dbg !16495

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !16495
  ret i32 %cond, !dbg !16495
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @search_for_addr_array(%union.tree_node* %t, i32 %location) #0 !dbg !16497 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %location.addr = alloca i32, align 4
  %g = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !16500, metadata !DIExpression()), !dbg !16501
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !16502, metadata !DIExpression()), !dbg !16503
  br label %while.cond, !dbg !16504

while.cond:                                       ; preds = %if.end6, %entry
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !16505
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !16505
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !16505
  %bf.load = load i64, i64* %1, align 8, !dbg !16505
  %bf.clear = and i64 %bf.load, 65535, !dbg !16505
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16505
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !16506
  br i1 %cmp, label %while.body, label %while.end, !dbg !16504

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g, metadata !16507, metadata !DIExpression()), !dbg !16509
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !16510
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !16510
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !16510
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !16510
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %g, align 8, !dbg !16509
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !16511
  %call = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !16513
  %cmp1 = icmp ne i32 %call, 6, !dbg !16514
  br i1 %cmp1, label %if.then, label %if.end, !dbg !16515

if.then:                                          ; preds = %while.body
  br label %do.end, !dbg !16516

if.end:                                           ; preds = %while.body
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !16517
  %call2 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !16519
  %call3 = call i32 @get_gimple_rhs_class(i32 %call2), !dbg !16520
  %cmp4 = icmp ne i32 %call3, 3, !dbg !16521
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !16522

if.then5:                                         ; preds = %if.end
  br label %do.end, !dbg !16523

if.end6:                                          ; preds = %if.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !16524
  %call7 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !16525
  store %union.tree_node* %call7, %union.tree_node** %t.addr, align 8, !dbg !16526
  br label %while.cond, !dbg !16504, !llvm.loop !16527

while.end:                                        ; preds = %while.cond
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !16529
  %base8 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !16529
  %8 = bitcast %struct.tree_base* %base8 to i64*, !dbg !16529
  %bf.load9 = load i64, i64* %8, align 8, !dbg !16529
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !16529
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !16529
  %cmp12 = icmp ne i32 %bf.cast11, 121, !dbg !16531
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !16532

if.then13:                                        ; preds = %while.end
  br label %do.end, !dbg !16533

if.end14:                                         ; preds = %while.end
  br label %do.body, !dbg !16534

do.body:                                          ; preds = %do.cond, %if.end14
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !16535
  %base15 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !16535
  %10 = bitcast %struct.tree_base* %base15 to i64*, !dbg !16535
  %bf.load16 = load i64, i64* %10, align 8, !dbg !16535
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !16535
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !16535
  %cmp19 = icmp eq i32 %bf.cast18, 45, !dbg !16538
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !16539

if.then20:                                        ; preds = %do.body
  %11 = load i32, i32* %location.addr, align 4, !dbg !16540
  %12 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !16541
  call void @check_array_ref(i32 %11, %union.tree_node* %12, i8 zeroext 1), !dbg !16542
  br label %if.end21, !dbg !16542

if.end21:                                         ; preds = %if.then20, %do.body
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !16543
  %exp = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !16543
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !16543
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !16543
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !16543
  store %union.tree_node* %14, %union.tree_node** %t.addr, align 8, !dbg !16544
  br label %do.cond, !dbg !16545

do.cond:                                          ; preds = %if.end21
  %15 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !16546
  %call22 = call zeroext i8 @handled_component_p(%union.tree_node* %15), !dbg !16547
  %tobool = icmp ne i8 %call22, 0, !dbg !16545
  br i1 %tobool, label %do.body, label %do.end, !dbg !16545, !llvm.loop !16548

do.end:                                           ; preds = %if.then, %if.then5, %if.then13, %do.cond
  ret void, !dbg !16550
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @gimple_location_ptr(%union.gimple_statement_d* %g) #0 !dbg !16551 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !16556, metadata !DIExpression()), !dbg !16557
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !16558
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !16559
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !16560
  ret i32* %location, !dbg !16561
}

declare dso_local %union.tree_node* @walk_gimple_op(%union.gimple_statement_d*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @check_array_bounds(%union.tree_node** %tp, i32* %walk_subtree, i8* %data) #0 !dbg !16562 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtree.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  %wi = alloca %struct.walk_stmt_info*, align 8
  %location = alloca i32, align 4
  %locp = alloca i32*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !16565, metadata !DIExpression()), !dbg !16566
  store i32* %walk_subtree, i32** %walk_subtree.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtree.addr, metadata !16567, metadata !DIExpression()), !dbg !16568
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !16569, metadata !DIExpression()), !dbg !16570
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !16571, metadata !DIExpression()), !dbg !16572
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !16573
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !16574
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !16572
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi, metadata !16575, metadata !DIExpression()), !dbg !16576
  %2 = load i8*, i8** %data.addr, align 8, !dbg !16577
  %3 = bitcast i8* %2 to %struct.walk_stmt_info*, !dbg !16578
  store %struct.walk_stmt_info* %3, %struct.walk_stmt_info** %wi, align 8, !dbg !16576
  call void @llvm.dbg.declare(metadata i32* %location, metadata !16579, metadata !DIExpression()), !dbg !16580
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16581
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !16581
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !16581
  %bf.load = load i64, i64* %5, align 8, !dbg !16581
  %bf.clear = and i64 %bf.load, 65535, !dbg !16581
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16581
  %idxprom = sext i32 %bf.cast to i64, !dbg !16581
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !16581
  %6 = load i32, i32* %arrayidx, align 4, !dbg !16581
  %cmp = icmp uge i32 %6, 4, !dbg !16581
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !16581

land.lhs.true:                                    ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16581
  %base1 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !16581
  %8 = bitcast %struct.tree_base* %base1 to i64*, !dbg !16581
  %bf.load2 = load i64, i64* %8, align 8, !dbg !16581
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !16581
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !16581
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !16581
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !16581
  %9 = load i32, i32* %arrayidx6, align 4, !dbg !16581
  %cmp7 = icmp ule i32 %9, 10, !dbg !16581
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !16581

cond.true:                                        ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16581
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !16581
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !16581
  %11 = load i32, i32* %locus, align 8, !dbg !16581
  br label %cond.end, !dbg !16581

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !16581

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ 0, %cond.false ], !dbg !16581
  %cmp8 = icmp ne i32 %cond, 0, !dbg !16581
  br i1 %cmp8, label %if.then, label %if.else, !dbg !16583

if.then:                                          ; preds = %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16584
  %base9 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !16584
  %13 = bitcast %struct.tree_base* %base9 to i64*, !dbg !16584
  %bf.load10 = load i64, i64* %13, align 8, !dbg !16584
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !16584
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !16584
  %idxprom13 = sext i32 %bf.cast12 to i64, !dbg !16584
  %arrayidx14 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom13, !dbg !16584
  %14 = load i32, i32* %arrayidx14, align 4, !dbg !16584
  %cmp15 = icmp uge i32 %14, 4, !dbg !16584
  br i1 %cmp15, label %land.lhs.true16, label %cond.false27, !dbg !16584

land.lhs.true16:                                  ; preds = %if.then
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16584
  %base17 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !16584
  %16 = bitcast %struct.tree_base* %base17 to i64*, !dbg !16584
  %bf.load18 = load i64, i64* %16, align 8, !dbg !16584
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !16584
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !16584
  %idxprom21 = sext i32 %bf.cast20 to i64, !dbg !16584
  %arrayidx22 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom21, !dbg !16584
  %17 = load i32, i32* %arrayidx22, align 4, !dbg !16584
  %cmp23 = icmp ule i32 %17, 10, !dbg !16584
  br i1 %cmp23, label %cond.true24, label %cond.false27, !dbg !16584

cond.true24:                                      ; preds = %land.lhs.true16
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16584
  %exp25 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !16584
  %locus26 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp25, i32 0, i32 1, !dbg !16584
  %19 = load i32, i32* %locus26, align 8, !dbg !16584
  br label %cond.end28, !dbg !16584

cond.false27:                                     ; preds = %land.lhs.true16, %if.then
  br label %cond.end28, !dbg !16584

cond.end28:                                       ; preds = %cond.false27, %cond.true24
  %cond29 = phi i32 [ %19, %cond.true24 ], [ 0, %cond.false27 ], !dbg !16584
  store i32 %cond29, i32* %location, align 4, !dbg !16585
  br label %if.end, !dbg !16586

if.else:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32** %locp, metadata !16587, metadata !DIExpression()), !dbg !16589
  %20 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !16590
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %20, i32 0, i32 1, !dbg !16591
  %21 = load i8*, i8** %info, align 8, !dbg !16591
  %22 = bitcast i8* %21 to i32*, !dbg !16592
  store i32* %22, i32** %locp, align 8, !dbg !16589
  %23 = load i32*, i32** %locp, align 8, !dbg !16593
  %24 = load i32, i32* %23, align 4, !dbg !16594
  store i32 %24, i32* %location, align 4, !dbg !16595
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end28
  %25 = load i32*, i32** %walk_subtree.addr, align 8, !dbg !16596
  store i32 1, i32* %25, align 4, !dbg !16597
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16598
  %base30 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !16598
  %27 = bitcast %struct.tree_base* %base30 to i64*, !dbg !16598
  %bf.load31 = load i64, i64* %27, align 8, !dbg !16598
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !16598
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !16598
  %cmp34 = icmp eq i32 %bf.cast33, 45, !dbg !16600
  br i1 %cmp34, label %if.then35, label %if.end36, !dbg !16601

if.then35:                                        ; preds = %if.end
  %28 = load i32, i32* %location, align 4, !dbg !16602
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16603
  call void @check_array_ref(i32 %28, %union.tree_node* %29, i8 zeroext 0), !dbg !16604
  br label %if.end36, !dbg !16604

if.end36:                                         ; preds = %if.then35, %if.end
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16605
  %base37 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !16605
  %31 = bitcast %struct.tree_base* %base37 to i64*, !dbg !16605
  %bf.load38 = load i64, i64* %31, align 8, !dbg !16605
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !16605
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !16605
  %cmp41 = icmp eq i32 %bf.cast40, 47, !dbg !16607
  br i1 %cmp41, label %if.then50, label %lor.lhs.false, !dbg !16608

lor.lhs.false:                                    ; preds = %if.end36
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16609
  %base42 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !16609
  %33 = bitcast %struct.tree_base* %base42 to i64*, !dbg !16609
  %bf.load43 = load i64, i64* %33, align 8, !dbg !16609
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !16609
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !16609
  %cmp46 = icmp eq i32 %bf.cast45, 135, !dbg !16610
  br i1 %cmp46, label %land.lhs.true47, label %if.end54, !dbg !16611

land.lhs.true47:                                  ; preds = %lor.lhs.false
  %34 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16612
  %exp48 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !16612
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp48, i32 0, i32 3, !dbg !16612
  %arrayidx49 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !16612
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx49, align 8, !dbg !16612
  %tobool = icmp ne %union.tree_node* %35, null, !dbg !16612
  br i1 %tobool, label %if.then50, label %if.end54, !dbg !16613

if.then50:                                        ; preds = %land.lhs.true47, %if.end36
  %36 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16614
  %exp51 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !16614
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !16614
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 0, !dbg !16614
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !16614
  %38 = load i32, i32* %location, align 4, !dbg !16615
  call void @search_for_addr_array(%union.tree_node* %37, i32 %38), !dbg !16616
  br label %if.end54, !dbg !16616

if.end54:                                         ; preds = %if.then50, %land.lhs.true47, %lor.lhs.false
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16617
  %base55 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !16617
  %40 = bitcast %struct.tree_base* %base55 to i64*, !dbg !16617
  %bf.load56 = load i64, i64* %40, align 8, !dbg !16617
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !16617
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !16617
  %cmp59 = icmp eq i32 %bf.cast58, 121, !dbg !16619
  br i1 %cmp59, label %if.then60, label %if.end61, !dbg !16620

if.then60:                                        ; preds = %if.end54
  %41 = load i32*, i32** %walk_subtree.addr, align 8, !dbg !16621
  store i32 0, i32* %41, align 4, !dbg !16622
  br label %if.end61, !dbg !16623

if.end61:                                         ; preds = %if.then60, %if.end54
  ret %union.tree_node* null, !dbg !16624
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_array_ref(i32 %location, %union.tree_node* %ref, i8 zeroext %ignore_off_by_one) #0 !dbg !16625 {
entry:
  %location.addr = alloca i32, align 4
  %ref.addr = alloca %union.tree_node*, align 8
  %ignore_off_by_one.addr = alloca i8, align 1
  %vr = alloca %struct.value_range_d*, align 8
  %low_sub = alloca %union.tree_node*, align 8
  %up_sub = alloca %union.tree_node*, align 8
  %low_bound = alloca %union.tree_node*, align 8
  %up_bound = alloca %union.tree_node*, align 8
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !16628, metadata !DIExpression()), !dbg !16629
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !16630, metadata !DIExpression()), !dbg !16631
  store i8 %ignore_off_by_one, i8* %ignore_off_by_one.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore_off_by_one.addr, metadata !16632, metadata !DIExpression()), !dbg !16633
  call void @llvm.dbg.declare(metadata %struct.value_range_d** %vr, metadata !16634, metadata !DIExpression()), !dbg !16635
  store %struct.value_range_d* null, %struct.value_range_d** %vr, align 8, !dbg !16635
  call void @llvm.dbg.declare(metadata %union.tree_node** %low_sub, metadata !16636, metadata !DIExpression()), !dbg !16637
  call void @llvm.dbg.declare(metadata %union.tree_node** %up_sub, metadata !16638, metadata !DIExpression()), !dbg !16639
  call void @llvm.dbg.declare(metadata %union.tree_node** %low_bound, metadata !16640, metadata !DIExpression()), !dbg !16641
  call void @llvm.dbg.declare(metadata %union.tree_node** %up_bound, metadata !16642, metadata !DIExpression()), !dbg !16643
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !16644
  %call = call %union.tree_node* @array_ref_up_bound(%union.tree_node* %0), !dbg !16645
  store %union.tree_node* %call, %union.tree_node** %up_bound, align 8, !dbg !16643
  %1 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !16646
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !16646
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !16646
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !16646
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !16646
  store %union.tree_node* %2, %union.tree_node** %up_sub, align 8, !dbg !16647
  store %union.tree_node* %2, %union.tree_node** %low_sub, align 8, !dbg !16648
  %3 = load %union.tree_node*, %union.tree_node** %up_bound, align 8, !dbg !16649
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !16649
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !16651

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !16652
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !16652
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !16652
  %bf.load = load i64, i64* %5, align 8, !dbg !16652
  %bf.lshr = lshr i64 %bf.load, 23, !dbg !16652
  %bf.clear = and i64 %bf.lshr, 1, !dbg !16652
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16652
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !16652
  br i1 %tobool1, label %if.then, label %lor.lhs.false2, !dbg !16653

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %up_bound, align 8, !dbg !16654
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !16654
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !16654
  %bf.load4 = load i64, i64* %7, align 8, !dbg !16654
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !16654
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !16654
  %cmp = icmp ne i32 %bf.cast6, 23, !dbg !16655
  br i1 %cmp, label %if.then, label %lor.lhs.false7, !dbg !16656

lor.lhs.false7:                                   ; preds = %lor.lhs.false2
  %8 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !16657
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !16657
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !16657
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !16657
  %type8 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !16657
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 2, !dbg !16657
  %10 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !16657
  %cmp9 = icmp eq %union.tree_node* %10, null, !dbg !16658
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false21, !dbg !16659

land.lhs.true:                                    ; preds = %lor.lhs.false7
  %11 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !16660
  %common10 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !16660
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !16660
  %12 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !16660
  %type12 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !16660
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 1, !dbg !16660
  %13 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !16660
  %cmp13 = icmp ne %union.tree_node* %13, null, !dbg !16661
  br i1 %cmp13, label %land.lhs.true14, label %lor.lhs.false21, !dbg !16662

land.lhs.true14:                                  ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !16663
  %common15 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !16663
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !16663
  %15 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !16663
  %type17 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !16663
  %values18 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type17, i32 0, i32 1, !dbg !16663
  %16 = load %union.tree_node*, %union.tree_node** %values18, align 8, !dbg !16663
  %type19 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !16663
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 14, !dbg !16663
  %17 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !16663
  %cmp20 = icmp eq %union.tree_node* %17, null, !dbg !16664
  br i1 %cmp20, label %if.then, label %lor.lhs.false21, !dbg !16665

lor.lhs.false21:                                  ; preds = %land.lhs.true14, %land.lhs.true, %lor.lhs.false7
  %18 = load %union.tree_node*, %union.tree_node** %up_bound, align 8, !dbg !16666
  %call22 = call i32 @compare_tree_int(%union.tree_node* %18, i64 1), !dbg !16667
  %cmp23 = icmp sle i32 %call22, 0, !dbg !16668
  br i1 %cmp23, label %if.then, label %if.end, !dbg !16669

if.then:                                          ; preds = %lor.lhs.false21, %land.lhs.true14, %lor.lhs.false2, %lor.lhs.false, %entry
  br label %if.end118, !dbg !16670

if.end:                                           ; preds = %lor.lhs.false21
  %19 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !16671
  %call24 = call %union.tree_node* @array_ref_low_bound(%union.tree_node* %19), !dbg !16672
  store %union.tree_node* %call24, %union.tree_node** %low_bound, align 8, !dbg !16673
  %20 = load %union.tree_node*, %union.tree_node** %low_sub, align 8, !dbg !16674
  %base25 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !16674
  %21 = bitcast %struct.tree_base* %base25 to i64*, !dbg !16674
  %bf.load26 = load i64, i64* %21, align 8, !dbg !16674
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !16674
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !16674
  %cmp29 = icmp eq i32 %bf.cast28, 141, !dbg !16676
  br i1 %cmp29, label %if.then30, label %if.end49, !dbg !16677

if.then30:                                        ; preds = %if.end
  %22 = load %union.tree_node*, %union.tree_node** %low_sub, align 8, !dbg !16678
  %call31 = call %struct.value_range_d* @get_value_range(%union.tree_node* %22), !dbg !16680
  store %struct.value_range_d* %call31, %struct.value_range_d** %vr, align 8, !dbg !16681
  %23 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16682
  %type32 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %23, i32 0, i32 0, !dbg !16684
  %24 = load i32, i32* %type32, align 8, !dbg !16684
  %cmp33 = icmp eq i32 %24, 1, !dbg !16685
  br i1 %cmp33, label %if.then37, label %lor.lhs.false34, !dbg !16686

lor.lhs.false34:                                  ; preds = %if.then30
  %25 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16687
  %type35 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %25, i32 0, i32 0, !dbg !16688
  %26 = load i32, i32* %type35, align 8, !dbg !16688
  %cmp36 = icmp eq i32 %26, 2, !dbg !16689
  br i1 %cmp36, label %if.then37, label %if.end48, !dbg !16690

if.then37:                                        ; preds = %lor.lhs.false34, %if.then30
  %27 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16691
  %type38 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %27, i32 0, i32 0, !dbg !16693
  %28 = load i32, i32* %type38, align 8, !dbg !16693
  %cmp39 = icmp eq i32 %28, 1, !dbg !16694
  br i1 %cmp39, label %cond.true, label %cond.false, !dbg !16691

cond.true:                                        ; preds = %if.then37
  %29 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16695
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %29, i32 0, i32 2, !dbg !16696
  %30 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !16696
  br label %cond.end, !dbg !16691

cond.false:                                       ; preds = %if.then37
  %31 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16697
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %31, i32 0, i32 1, !dbg !16698
  %32 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !16698
  br label %cond.end, !dbg !16691

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %30, %cond.true ], [ %32, %cond.false ], !dbg !16691
  store %union.tree_node* %cond, %union.tree_node** %low_sub, align 8, !dbg !16699
  %33 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16700
  %type40 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %33, i32 0, i32 0, !dbg !16701
  %34 = load i32, i32* %type40, align 8, !dbg !16701
  %cmp41 = icmp eq i32 %34, 1, !dbg !16702
  br i1 %cmp41, label %cond.true42, label %cond.false44, !dbg !16700

cond.true42:                                      ; preds = %cond.end
  %35 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16703
  %min43 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %35, i32 0, i32 1, !dbg !16704
  %36 = load %union.tree_node*, %union.tree_node** %min43, align 8, !dbg !16704
  br label %cond.end46, !dbg !16700

cond.false44:                                     ; preds = %cond.end
  %37 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16705
  %max45 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %37, i32 0, i32 2, !dbg !16706
  %38 = load %union.tree_node*, %union.tree_node** %max45, align 8, !dbg !16706
  br label %cond.end46, !dbg !16700

cond.end46:                                       ; preds = %cond.false44, %cond.true42
  %cond47 = phi %union.tree_node* [ %36, %cond.true42 ], [ %38, %cond.false44 ], !dbg !16700
  store %union.tree_node* %cond47, %union.tree_node** %up_sub, align 8, !dbg !16707
  br label %if.end48, !dbg !16708

if.end48:                                         ; preds = %cond.end46, %lor.lhs.false34
  br label %if.end49, !dbg !16709

if.end49:                                         ; preds = %if.end48, %if.end
  %39 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16710
  %tobool50 = icmp ne %struct.value_range_d* %39, null, !dbg !16710
  br i1 %tobool50, label %land.lhs.true51, label %if.else, !dbg !16712

land.lhs.true51:                                  ; preds = %if.end49
  %40 = load %struct.value_range_d*, %struct.value_range_d** %vr, align 8, !dbg !16713
  %type52 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %40, i32 0, i32 0, !dbg !16714
  %41 = load i32, i32* %type52, align 8, !dbg !16714
  %cmp53 = icmp eq i32 %41, 2, !dbg !16715
  br i1 %cmp53, label %if.then54, label %if.else, !dbg !16716

if.then54:                                        ; preds = %land.lhs.true51
  %42 = load %union.tree_node*, %union.tree_node** %up_sub, align 8, !dbg !16717
  %base55 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !16717
  %43 = bitcast %struct.tree_base* %base55 to i64*, !dbg !16717
  %bf.load56 = load i64, i64* %43, align 8, !dbg !16717
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !16717
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !16717
  %cmp59 = icmp eq i32 %bf.cast58, 23, !dbg !16720
  br i1 %cmp59, label %land.lhs.true60, label %if.end77, !dbg !16721

land.lhs.true60:                                  ; preds = %if.then54
  %44 = load %union.tree_node*, %union.tree_node** %up_bound, align 8, !dbg !16722
  %45 = load %union.tree_node*, %union.tree_node** %up_sub, align 8, !dbg !16723
  %call61 = call i32 @tree_int_cst_lt(%union.tree_node* %44, %union.tree_node* %45), !dbg !16724
  %tobool62 = icmp ne i32 %call61, 0, !dbg !16724
  br i1 %tobool62, label %land.lhs.true63, label %if.end77, !dbg !16725

land.lhs.true63:                                  ; preds = %land.lhs.true60
  %46 = load %union.tree_node*, %union.tree_node** %low_sub, align 8, !dbg !16726
  %base64 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !16726
  %47 = bitcast %struct.tree_base* %base64 to i64*, !dbg !16726
  %bf.load65 = load i64, i64* %47, align 8, !dbg !16726
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !16726
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !16726
  %cmp68 = icmp eq i32 %bf.cast67, 23, !dbg !16727
  br i1 %cmp68, label %land.lhs.true69, label %if.end77, !dbg !16728

land.lhs.true69:                                  ; preds = %land.lhs.true63
  %48 = load %union.tree_node*, %union.tree_node** %low_sub, align 8, !dbg !16729
  %49 = load %union.tree_node*, %union.tree_node** %low_bound, align 8, !dbg !16730
  %call70 = call i32 @tree_int_cst_lt(%union.tree_node* %48, %union.tree_node* %49), !dbg !16731
  %tobool71 = icmp ne i32 %call70, 0, !dbg !16731
  br i1 %tobool71, label %if.then72, label %if.end77, !dbg !16732

if.then72:                                        ; preds = %land.lhs.true69
  %50 = load i32, i32* %location.addr, align 4, !dbg !16733
  %call73 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %50, i32 41, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.68, i64 0, i64 0)), !dbg !16735
  %51 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !16736
  %base74 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !16736
  %52 = bitcast %struct.tree_base* %base74 to i64*, !dbg !16736
  %bf.load75 = load i64, i64* %52, align 8, !dbg !16737
  %bf.clear76 = and i64 %bf.load75, -8388609, !dbg !16737
  %bf.set = or i64 %bf.clear76, 8388608, !dbg !16737
  store i64 %bf.set, i64* %52, align 8, !dbg !16737
  br label %if.end77, !dbg !16738

if.end77:                                         ; preds = %if.then72, %land.lhs.true69, %land.lhs.true63, %land.lhs.true60, %if.then54
  br label %if.end118, !dbg !16739

if.else:                                          ; preds = %land.lhs.true51, %if.end49
  %53 = load %union.tree_node*, %union.tree_node** %up_sub, align 8, !dbg !16740
  %base78 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !16740
  %54 = bitcast %struct.tree_base* %base78 to i64*, !dbg !16740
  %bf.load79 = load i64, i64* %54, align 8, !dbg !16740
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !16740
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !16740
  %cmp82 = icmp eq i32 %bf.cast81, 23, !dbg !16742
  br i1 %cmp82, label %land.lhs.true83, label %if.else101, !dbg !16743

land.lhs.true83:                                  ; preds = %if.else
  %55 = load %union.tree_node*, %union.tree_node** %up_bound, align 8, !dbg !16744
  %56 = load %union.tree_node*, %union.tree_node** %up_sub, align 8, !dbg !16745
  %call84 = call i32 @tree_int_cst_lt(%union.tree_node* %55, %union.tree_node* %56), !dbg !16746
  %tobool85 = icmp ne i32 %call84, 0, !dbg !16746
  br i1 %tobool85, label %land.lhs.true86, label %if.else101, !dbg !16747

land.lhs.true86:                                  ; preds = %land.lhs.true83
  %57 = load %union.tree_node*, %union.tree_node** %up_bound, align 8, !dbg !16748
  %58 = load %union.tree_node*, %union.tree_node** %up_sub, align 8, !dbg !16749
  %call87 = call i32 @tree_int_cst_equal(%union.tree_node* %57, %union.tree_node* %58), !dbg !16750
  %tobool88 = icmp ne i32 %call87, 0, !dbg !16750
  br i1 %tobool88, label %if.else101, label %land.lhs.true89, !dbg !16751

land.lhs.true89:                                  ; preds = %land.lhs.true86
  %59 = load i8, i8* %ignore_off_by_one.addr, align 1, !dbg !16752
  %tobool90 = icmp ne i8 %59, 0, !dbg !16752
  br i1 %tobool90, label %lor.lhs.false91, label %if.then95, !dbg !16753

lor.lhs.false91:                                  ; preds = %land.lhs.true89
  %60 = load %union.tree_node*, %union.tree_node** %up_bound, align 8, !dbg !16754
  %61 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !16755
  %call92 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %60, %union.tree_node* %61, i32 0), !dbg !16756
  %62 = load %union.tree_node*, %union.tree_node** %up_sub, align 8, !dbg !16757
  %call93 = call i32 @tree_int_cst_equal(%union.tree_node* %call92, %union.tree_node* %62), !dbg !16758
  %tobool94 = icmp ne i32 %call93, 0, !dbg !16758
  br i1 %tobool94, label %if.else101, label %if.then95, !dbg !16759

if.then95:                                        ; preds = %lor.lhs.false91, %land.lhs.true89
  %63 = load i32, i32* %location.addr, align 4, !dbg !16760
  %call96 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %63, i32 41, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.69, i64 0, i64 0)), !dbg !16762
  %64 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !16763
  %base97 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !16763
  %65 = bitcast %struct.tree_base* %base97 to i64*, !dbg !16763
  %bf.load98 = load i64, i64* %65, align 8, !dbg !16764
  %bf.clear99 = and i64 %bf.load98, -8388609, !dbg !16764
  %bf.set100 = or i64 %bf.clear99, 8388608, !dbg !16764
  store i64 %bf.set100, i64* %65, align 8, !dbg !16764
  br label %if.end117, !dbg !16765

if.else101:                                       ; preds = %lor.lhs.false91, %land.lhs.true86, %land.lhs.true83, %if.else
  %66 = load %union.tree_node*, %union.tree_node** %low_sub, align 8, !dbg !16766
  %base102 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !16766
  %67 = bitcast %struct.tree_base* %base102 to i64*, !dbg !16766
  %bf.load103 = load i64, i64* %67, align 8, !dbg !16766
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !16766
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !16766
  %cmp106 = icmp eq i32 %bf.cast105, 23, !dbg !16768
  br i1 %cmp106, label %land.lhs.true107, label %if.end116, !dbg !16769

land.lhs.true107:                                 ; preds = %if.else101
  %68 = load %union.tree_node*, %union.tree_node** %low_sub, align 8, !dbg !16770
  %69 = load %union.tree_node*, %union.tree_node** %low_bound, align 8, !dbg !16771
  %call108 = call i32 @tree_int_cst_lt(%union.tree_node* %68, %union.tree_node* %69), !dbg !16772
  %tobool109 = icmp ne i32 %call108, 0, !dbg !16772
  br i1 %tobool109, label %if.then110, label %if.end116, !dbg !16773

if.then110:                                       ; preds = %land.lhs.true107
  %70 = load i32, i32* %location.addr, align 4, !dbg !16774
  %call111 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %70, i32 41, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.70, i64 0, i64 0)), !dbg !16776
  %71 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !16777
  %base112 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !16777
  %72 = bitcast %struct.tree_base* %base112 to i64*, !dbg !16777
  %bf.load113 = load i64, i64* %72, align 8, !dbg !16778
  %bf.clear114 = and i64 %bf.load113, -8388609, !dbg !16778
  %bf.set115 = or i64 %bf.clear114, 8388608, !dbg !16778
  store i64 %bf.set115, i64* %72, align 8, !dbg !16778
  br label %if.end116, !dbg !16779

if.end116:                                        ; preds = %if.then110, %land.lhs.true107, %if.else101
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.then95
  br label %if.end118

if.end118:                                        ; preds = %if.then, %if.end117, %if.end77
  ret void, !dbg !16780
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !16781 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !16782, metadata !DIExpression()), !dbg !16783
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !16784
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !16784
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !16784
  %bf.load = load i64, i64* %1, align 8, !dbg !16784
  %bf.clear = and i64 %bf.load, 65535, !dbg !16784
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16784
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !16785

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !16786
  br label %return, !dbg !16786

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !16788
  br label %return, !dbg !16788

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !16789
  ret i8 %2, !dbg !16789
}

declare dso_local %union.tree_node* @array_ref_up_bound(%union.tree_node*) #2

declare dso_local %union.tree_node* @array_ref_low_bound(%union.tree_node*) #2

declare dso_local i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @mark_dfs_back_edges() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !16790 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !16793, metadata !DIExpression()), !dbg !16794
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !16794
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !16794
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !16794
  ret %struct.VEC_tree_heap* %1, !dbg !16794
}

declare dso_local %union.gimple_statement_d* @gimple_build_cond(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @potentially_threadable_block(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !16795 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !16796, metadata !DIExpression()), !dbg !16797
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !16798, metadata !DIExpression()), !dbg !16799
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !16800, metadata !DIExpression()), !dbg !16801
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !16802
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !16803
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !16804
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !16805
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !16806
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !16807
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !16808
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !16809
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !16810
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !16811
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !16812
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !16813
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !16814
  ret void, !dbg !16815
}

declare dso_local void @thread_across_edge(%union.gimple_statement_d*, %struct.edge_def*, i8 zeroext, %struct.VEC_tree_heap**, %union.tree_node* (%union.gimple_statement_d*, %union.gimple_statement_d*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @simplify_stmt_for_jump_threading(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %within_stmt) #0 !dbg !16816 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %within_stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !16819, metadata !DIExpression()), !dbg !16820
  store %union.gimple_statement_d* %within_stmt, %union.gimple_statement_d** %within_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %within_stmt.addr, metadata !16821, metadata !DIExpression()), !dbg !16822
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16823
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !16825
  %cmp = icmp ne i32 %call, 1, !dbg !16826
  br i1 %cmp, label %if.then, label %if.end, !dbg !16827

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !16828
  br label %return, !dbg !16828

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16829
  %call1 = call i32 @gimple_cond_code(%union.gimple_statement_d* %1), !dbg !16830
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16831
  %call2 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %2), !dbg !16832
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16833
  %call3 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %3), !dbg !16834
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %within_stmt.addr, align 8, !dbg !16835
  %call4 = call %union.tree_node* @vrp_evaluate_conditional(i32 %call1, %union.tree_node* %call2, %union.tree_node* %call3, %union.gimple_statement_d* %4), !dbg !16836
  store %union.tree_node* %call4, %union.tree_node** %retval, align 8, !dbg !16837
  br label %return, !dbg !16837

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !16838
  ret %union.tree_node* %5, !dbg !16838
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !16839 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !16840, metadata !DIExpression()), !dbg !16841
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !16842
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !16842
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16842

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !16843
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !16844
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !16844
  br label %cond.end, !dbg !16842

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16842

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !16842
  ret %struct.gimple_seq_node_d* %cond, !dbg !16845
}

declare dso_local %union.tree_node* @fold(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !16846 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !16850, metadata !DIExpression()), !dbg !16851
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !16852, metadata !DIExpression()), !dbg !16853
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !16854
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !16854
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !16854
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16855
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !16856
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !16857
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16858
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !16859
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !16859
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !16860
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !16860
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16861
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !16862
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !16863
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16864
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !16865
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !16866
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16867
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !16868
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !16869
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !16870
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16871
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !16872
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !16873
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !16874
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16875
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !16876
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !16877
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !16878
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !16879
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16880
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !16881
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !16882
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !16883
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16884
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !16886
  %tobool = icmp ne i8 %call, 0, !dbg !16886
  br i1 %tobool, label %if.then, label %if.end, !dbg !16887

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !16888
  br label %return, !dbg !16888

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16889
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !16890
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !16890
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16891
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !16892
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16893
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !16893
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !16893
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !16893
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !16893
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !16893
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !16894
  br label %return, !dbg !16894

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !16895
  ret %union.gimple_statement_d* %18, !dbg !16895
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !16896 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !16901, metadata !DIExpression()), !dbg !16902
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16903
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !16904
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !16904
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16905
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !16906
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !16906
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !16907
  %conv = zext i1 %cmp to i32, !dbg !16907
  %conv1 = trunc i32 %conv to i8, !dbg !16908
  ret i8 %conv1, !dbg !16909
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !16910 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !16913, metadata !DIExpression()), !dbg !16914
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16915
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !16916
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !16916
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !16917
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !16917
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16918
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !16919
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !16920
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16921
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !16922
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !16922
  ret %struct.ssa_use_operand_d* %5, !dbg !16923
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !16924 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !16925, metadata !DIExpression()), !dbg !16926
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16927
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !16928
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !16928
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16929
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !16930
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !16931
  %conv = zext i1 %cmp to i32, !dbg !16931
  %conv1 = trunc i32 %conv to i8, !dbg !16932
  ret i8 %conv1, !dbg !16933
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !16934 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !16937, metadata !DIExpression()), !dbg !16938
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !16939, metadata !DIExpression()), !dbg !16940
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !16941
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !16942
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !16943
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !16944
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !16945
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !16945
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !16946
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !16947
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !16948
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !16949
  ret void, !dbg !16950
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !16951 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !16952, metadata !DIExpression()), !dbg !16953
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16954
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !16955
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !16955
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16956
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !16957
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !16958
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16959
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !16961
  %tobool = icmp ne i8 %call, 0, !dbg !16961
  br i1 %tobool, label %if.then, label %if.else, !dbg !16962

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !16963
  br label %return, !dbg !16963

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16964
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !16966
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !16966
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !16967
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !16967
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16968
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !16969
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !16970
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16971
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !16972
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !16972
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !16973
  br label %return, !dbg !16973

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !16974
  ret %struct.ssa_use_operand_d* %10, !dbg !16974
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !16975 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !16978, metadata !DIExpression()), !dbg !16979
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16980
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !16981
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !16982
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !16982
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16983
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !16984
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !16985
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16986
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !16988
  %tobool = icmp ne i8 %call, 0, !dbg !16988
  br i1 %tobool, label %if.then, label %if.end4, !dbg !16989

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16990
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !16993
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !16994
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !16994
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !16995
  br i1 %cmp, label %if.then2, label %if.end, !dbg !16996

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !16997
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !16998
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !16999
  br label %if.end, !dbg !16999

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !17000
  br label %return, !dbg !17000

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !17001
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !17002
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !17002
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !17003
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !17004
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !17005
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !17005
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !17005
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !17005
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !17005
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17005
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !17006
  br label %return, !dbg !17006

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !17007
  ret %union.gimple_statement_d* %13, !dbg !17007
}

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @release_defs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !17008 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !17011, metadata !DIExpression()), !dbg !17012
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !17013, metadata !DIExpression()), !dbg !17014
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !17015, metadata !DIExpression()), !dbg !17016
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !17017, metadata !DIExpression()), !dbg !17018
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !17019
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !17018
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !17020, metadata !DIExpression()), !dbg !17021
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !17022
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !17022
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !17022
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17022
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !17021
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !17023, metadata !DIExpression()), !dbg !17024
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !17025
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !17025
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !17024
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !17026, metadata !DIExpression()), !dbg !17027
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !17028, metadata !DIExpression()), !dbg !17029
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !17030
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !17031
  %conv = zext i8 %call1 to i32, !dbg !17031
  %tobool = icmp ne i32 %conv, 0, !dbg !17031
  %5 = zext i1 %tobool to i64, !dbg !17031
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !17031
  store i32 %cond, i32* %flag, align 4, !dbg !17032
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !17033
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !17035
  %cmp = icmp eq i32 %call2, 16, !dbg !17036
  br i1 %cmp, label %if.then, label %if.else, !dbg !17037

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !17038
  %8 = load i32, i32* %flag, align 4, !dbg !17038
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !17038
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !17038
  br label %for.cond, !dbg !17038

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !17041
  %tobool6 = icmp ne i8 %call5, 0, !dbg !17041
  %lnot = xor i1 %tobool6, true, !dbg !17041
  br i1 %lnot, label %for.body, label %for.end, !dbg !17038

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !17043
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !17043
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !17045
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !17046
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !17047

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !17048
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !17049
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !17050
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !17051
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !17052
  br label %if.end, !dbg !17053

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !17045

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !17041
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !17041
  br label %for.cond, !dbg !17041, !llvm.loop !17054

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !17056

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !17057
  %cmp13 = icmp eq i32 %14, 1, !dbg !17060
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !17061

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !17062
  %16 = load i32, i32* %flag, align 4, !dbg !17062
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !17062
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !17062
  br label %for.cond17, !dbg !17062

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !17065
  %tobool19 = icmp ne i8 %call18, 0, !dbg !17065
  %lnot20 = xor i1 %tobool19, true, !dbg !17065
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !17062

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !17067
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !17067
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !17069
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !17070
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !17071

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !17072
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !17073
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !17074
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !17075
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !17076
  br label %if.end27, !dbg !17077

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !17069

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !17065
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !17065
  br label %for.cond17, !dbg !17065, !llvm.loop !17078

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !17080

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !17081
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !17083
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !17084
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !17085
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !17086

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !17087
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !17087
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !17090
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !17091
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !17092

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !17093
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !17094
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !17095
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !17096
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !17097
  br label %if.end41, !dbg !17098

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !17099

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !17100
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !17102
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !17103
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !17103
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !17104
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !17105

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !17106
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !17107
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !17108
  br label %if.end49, !dbg !17108

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !17109
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !17110
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !17111
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !17112
  ret void, !dbg !17113
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !17114 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !17117, metadata !DIExpression()), !dbg !17118
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !17119, metadata !DIExpression()), !dbg !17120
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !17121, metadata !DIExpression()), !dbg !17122
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !17123
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !17125
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !17126
  br i1 %cmp, label %if.then, label %if.end3, !dbg !17127

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !17128
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !17131
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !17131
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !17132
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !17133
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !17134

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !17135
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !17136
  br label %if.end, !dbg !17137

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !17138
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !17140
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !17141
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !17142
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !17143
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !17144
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !17145
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !17146

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !17147
  ret %struct.ssa_use_operand_d* %10, !dbg !17148
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !17149 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !17150, metadata !DIExpression()), !dbg !17151
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !17152, metadata !DIExpression()), !dbg !17153
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !17154, metadata !DIExpression()), !dbg !17155
  %0 = load i32, i32* %flags.addr, align 4, !dbg !17156
  %and = and i32 %0, 10, !dbg !17156
  %cmp = icmp eq i32 %and, 0, !dbg !17156
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !17156

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !17156
  %and1 = and i32 %1, 1, !dbg !17156
  %tobool = icmp ne i32 %and1, 0, !dbg !17156
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !17156

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !17156
  br label %cond.end, !dbg !17156

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !17156

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !17156
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !17157
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !17158
  %4 = load i32, i32* %flags.addr, align 4, !dbg !17159
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !17160
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !17161
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !17162
  store i32 2, i32* %iter_type, align 4, !dbg !17163
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !17164
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !17165
  ret %struct.ssa_use_operand_d* %call, !dbg !17166
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !17167 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !17170, metadata !DIExpression()), !dbg !17171
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !17172, metadata !DIExpression()), !dbg !17173
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !17174
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !17176
  %tobool = icmp ne i8 %call, 0, !dbg !17176
  br i1 %tobool, label %if.end, label %if.then, !dbg !17177

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !17178
  br label %return, !dbg !17178

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !17179
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !17180
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !17181
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !17182
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !17182
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !17183
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !17184
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !17184
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !17186

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !17187
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !17187
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !17188
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !17188
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !17189
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !17190
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !17191
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !17192
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !17193

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !17194
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !17194
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !17195
  br label %return, !dbg !17195

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !17196
  br label %return, !dbg !17196

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !17197
  ret %struct.ssa_use_operand_d* %8, !dbg !17197
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !17198 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !17201, metadata !DIExpression()), !dbg !17202
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17203
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !17205
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !17205
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !17206
  br i1 %cmp, label %if.then, label %if.end, !dbg !17207

if.then:                                          ; preds = %entry
  br label %return, !dbg !17208

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17209
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !17210
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !17210
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17211
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !17212
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !17212
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !17213
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !17214
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17215
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !17216
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !17216
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17217
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !17218
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !17218
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !17219
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !17220
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17221
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !17222
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !17223
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17224
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !17225
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !17226
  br label %return, !dbg !17227

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !17227
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !17228 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !17231, metadata !DIExpression()), !dbg !17232
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !17233, metadata !DIExpression()), !dbg !17234
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !17235
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17236
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !17237
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !17238
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !17239
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !17240
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !17240
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17241
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !17242
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !17243
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17244
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !17245
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !17246
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !17246
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !17247
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !17248
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17249
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !17250
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !17251
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !17252
  ret void, !dbg !17253
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !17254 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !17257, metadata !DIExpression()), !dbg !17258
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !17259, metadata !DIExpression()), !dbg !17260
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !17261, metadata !DIExpression()), !dbg !17262
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !17263
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !17263
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !17265

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !17266
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !17266
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !17266
  %bf.load = load i64, i64* %2, align 8, !dbg !17266
  %bf.clear = and i64 %bf.load, 65535, !dbg !17266
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !17266
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !17267
  br i1 %cmp, label %if.then, label %if.else, !dbg !17268

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17269
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !17270
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !17271
  br label %if.end, !dbg !17269

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !17272
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !17272
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !17272
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !17274
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17275
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !17276
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !17277
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !17278
}

declare dso_local zeroext i8 @thread_through_all_blocks(i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !17279 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !17283, metadata !DIExpression()), !dbg !17284
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !17285
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !17285
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !17285
  br i1 %tobool, label %if.then, label %if.end, !dbg !17284

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !17285
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !17285
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !17285
  call void @free(i8* %4), !dbg !17285
  br label %if.end, !dbg !17285

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !17284
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !17284
  ret void, !dbg !17284
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_num_ops(%union.gimple_statement_d* %gs, i32 %num_ops) #0 !dbg !17287 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !17288, metadata !DIExpression()), !dbg !17289
  store i32 %num_ops, i32* %num_ops.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_ops.addr, metadata !17290, metadata !DIExpression()), !dbg !17291
  %0 = load i32, i32* %num_ops.addr, align 4, !dbg !17292
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !17293
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !17294
  %num_ops1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !17295
  store i32 %0, i32* %num_ops1, align 4, !dbg !17296
  ret void, !dbg !17297
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3246, !3247, !3248}
!llvm.ident = !{!3249}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "vr_value", scope: !2, file: !3, line: 107, type: !3167, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1738, globals: !3193, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-vrp.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !338, !342, !348, !353, !358, !376, !383, !390, !397, !531, !538, !714, !727, !737, !741, !780, !787, !813, !827, !833, !838, !843, !850, !856, !864}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !330, line: 31, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335, !336, !337}
!332 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!336 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!337 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!338 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !330, line: 91, baseType: !7, size: 32, elements: !339)
!339 = !{!340, !341}
!340 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!341 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !343, line: 363, baseType: !7, size: 32, elements: !344)
!343 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!344 = !{!345, !346, !347}
!345 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!346 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!347 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!348 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !343, line: 355, baseType: !7, size: 32, elements: !349)
!349 = !{!350, !351, !352}
!350 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!352 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!353 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !354, line: 474, baseType: !7, size: 32, elements: !355)
!354 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!355 = !{!356, !357}
!356 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!358 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !359)
!359 = !{!360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375}
!360 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!376 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !377)
!377 = !{!378, !379, !380, !381, !382}
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!383 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !384)
!384 = !{!385, !386, !387, !388, !389}
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!389 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "value_range_type", file: !391, line: 79, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./tree-ssa-propagate.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395, !396}
!393 = !DIEnumerator(name: "VR_UNDEFINED", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "VR_RANGE", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "VR_ANTI_RANGE", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "VR_VARYING", value: 3, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !398)
!398 = !{!399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530}
!399 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!400 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!401 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!402 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!403 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!404 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!405 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!406 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!407 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!408 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!409 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!410 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!411 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!412 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!413 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!414 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!415 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!416 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!417 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!418 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!419 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!420 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!421 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!422 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!423 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!424 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!425 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!426 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!427 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!428 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!429 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!430 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!431 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!432 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!433 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!434 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!435 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!436 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!437 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!438 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!439 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!440 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!441 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!442 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!443 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!444 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!445 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!446 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!447 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!448 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!449 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!450 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!451 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!452 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!453 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!454 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!455 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!456 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!457 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!458 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!459 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!460 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!461 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!462 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!463 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!464 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!465 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!466 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!467 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!468 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!469 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!470 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!511 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!512 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!513 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!514 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!515 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!516 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!517 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!518 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!519 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!520 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!521 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!522 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!523 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!524 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!525 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!526 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!527 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!528 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!529 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!530 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!531 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !532, line: 104, baseType: !7, size: 32, elements: !533)
!532 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!533 = !{!534, !535, !536, !537}
!534 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!535 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!536 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!537 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!538 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !539, line: 74, baseType: !7, size: 32, elements: !540)
!539 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!540 = !{!541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713}
!541 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!589 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!590 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!591 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!592 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!593 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!594 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!595 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!596 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!597 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!598 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!599 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!600 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!601 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!602 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!603 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!604 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!605 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!606 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!607 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!608 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!609 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!610 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!611 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!612 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!613 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!614 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!615 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!616 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!617 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!618 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!619 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!620 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!621 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!622 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!623 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!624 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!625 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!626 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!627 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!628 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!629 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!630 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!631 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!632 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!633 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!634 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!635 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!636 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!637 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!638 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!639 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!640 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!641 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!642 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!643 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!644 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!645 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!646 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!647 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!648 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!649 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!650 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!651 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!652 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!653 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!654 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!655 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!656 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!657 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!658 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!659 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!660 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!661 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!662 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!663 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!664 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!665 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!666 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!667 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!668 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!669 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!670 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!671 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!672 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!673 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!674 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!675 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!676 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!677 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!678 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!679 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!680 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!681 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!682 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!683 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!684 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!685 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!686 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!687 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!688 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!689 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!690 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!691 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!692 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!693 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!694 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!695 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!696 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!697 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!698 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!699 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!700 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!701 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!702 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!703 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!704 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!705 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!706 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!707 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!708 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!709 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!710 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!711 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!712 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!713 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!714 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !715)
!715 = !{!716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726}
!716 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!717 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!718 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!719 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!720 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!721 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!722 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!723 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!724 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!725 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!726 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!727 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !330, line: 170, baseType: !7, size: 32, elements: !728)
!728 = !{!729, !730, !731, !732, !733, !734, !735, !736}
!729 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!730 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!731 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!732 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!733 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!734 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!735 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!736 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!737 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !343, line: 912, baseType: !7, size: 32, elements: !738)
!738 = !{!739, !740}
!739 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!740 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!741 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !742, line: 51, baseType: !7, size: 32, elements: !743)
!742 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!743 = !{!744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779}
!744 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!745 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!746 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!747 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!748 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!749 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!750 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!751 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!752 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!753 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!754 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!755 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!756 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!757 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!758 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!759 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!760 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!761 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!762 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!763 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!764 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!765 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!766 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!767 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!768 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!769 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!770 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!771 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!772 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!773 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!774 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!775 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!776 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!777 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!778 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!779 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!780 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !781, line: 119, baseType: !7, size: 32, elements: !782)
!781 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!782 = !{!783, !784, !785, !786}
!783 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!784 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!785 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!786 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!787 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !742, line: 727, baseType: !7, size: 32, elements: !788)
!788 = !{!789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812}
!789 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!790 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!791 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!792 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!793 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!794 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!795 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!796 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!797 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!798 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!799 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!800 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!801 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!802 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!803 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!804 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!805 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!806 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!807 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!808 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!809 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!810 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!811 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!812 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!813 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !343, line: 295, baseType: !7, size: 32, elements: !814)
!814 = !{!815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826}
!815 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!816 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!817 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!818 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!819 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!820 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!821 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!822 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!823 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!824 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!825 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!826 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!827 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !742, line: 80, baseType: !7, size: 32, elements: !828)
!828 = !{!829, !830, !831, !832}
!829 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!830 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!831 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!832 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!833 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !742, line: 4603, baseType: !7, size: 32, elements: !834)
!834 = !{!835, !836, !837}
!835 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!836 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!837 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!838 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_prop_result", file: !391, line: 44, baseType: !7, size: 32, elements: !839)
!839 = !{!840, !841, !842}
!840 = !DIEnumerator(name: "SSA_PROP_NOT_INTERESTING", value: 0, isUnsigned: true)
!841 = !DIEnumerator(name: "SSA_PROP_INTERESTING", value: 1, isUnsigned: true)
!842 = !DIEnumerator(name: "SSA_PROP_VARYING", value: 2, isUnsigned: true)
!843 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !135, line: 4288, baseType: !7, size: 32, elements: !844)
!844 = !{!845, !846, !847, !848, !849}
!845 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!846 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!847 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!848 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!849 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!850 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ev_direction", file: !851, line: 712, baseType: !7, size: 32, elements: !852)
!851 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!852 = !{!853, !854, !855}
!853 = !DIEnumerator(name: "EV_DIR_GROWS", value: 0, isUnsigned: true)
!854 = !DIEnumerator(name: "EV_DIR_DECREASES", value: 1, isUnsigned: true)
!855 = !DIEnumerator(name: "EV_DIR_UNKNOWN", value: 2, isUnsigned: true)
!856 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "warn_strict_overflow_code", file: !857, line: 367, baseType: !7, size: 32, elements: !858)
!857 = !DIFile(filename: "./flags.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!858 = !{!859, !860, !861, !862, !863}
!859 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_ALL", value: 1, isUnsigned: true)
!860 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_CONDITIONAL", value: 2, isUnsigned: true)
!861 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_COMPARISON", value: 3, isUnsigned: true)
!862 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_MISC", value: 4, isUnsigned: true)
!863 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_MAGNITUDE", value: 5, isUnsigned: true)
!864 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !865, line: 723, baseType: !7, size: 32, elements: !866)
!865 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!866 = !{!867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737}
!867 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!868 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!869 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!870 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!871 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!872 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!873 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!874 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!875 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!876 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!877 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!878 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!879 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!880 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!881 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!882 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!883 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!884 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!885 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!886 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!887 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!888 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!889 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!890 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!891 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!892 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!893 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!894 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!895 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!896 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!897 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!898 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!899 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!900 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!901 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!902 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!903 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!904 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!905 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!906 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!907 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!908 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!909 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!910 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!911 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!912 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!913 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!914 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!915 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!916 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!917 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!918 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!919 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!920 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!921 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!922 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!923 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!924 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!925 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!926 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!927 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!928 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!929 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!930 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!931 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!932 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!933 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!934 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!935 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!936 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!937 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!938 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!939 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!940 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!941 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!942 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!943 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!944 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!945 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!946 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!947 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!948 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!949 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!950 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!951 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!952 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!953 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!954 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!955 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!956 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!957 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!958 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!959 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!960 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!961 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!962 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!963 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!964 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!965 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!966 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!967 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!968 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!969 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!970 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!971 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!972 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!973 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!974 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!975 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!976 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!977 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!978 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!979 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!980 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!981 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!982 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!983 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!984 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!985 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!986 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!987 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!988 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!989 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!990 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!991 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!992 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!993 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!994 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!995 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!996 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!997 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!998 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!999 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!1000 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!1001 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!1002 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!1003 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!1004 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!1005 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!1006 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!1007 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!1008 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!1009 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!1010 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!1011 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!1012 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!1013 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!1014 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!1015 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!1016 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!1017 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!1018 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!1019 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!1020 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!1021 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!1022 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!1023 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!1024 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!1025 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!1026 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!1027 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!1028 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!1029 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!1030 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!1031 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!1032 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!1033 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!1034 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!1035 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!1036 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!1037 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!1038 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!1039 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!1040 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!1041 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!1042 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!1043 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!1044 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!1045 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!1046 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!1047 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!1048 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!1049 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!1050 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!1051 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!1052 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!1053 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!1054 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!1055 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!1056 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!1057 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!1058 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!1059 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!1060 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!1061 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!1062 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!1063 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!1064 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!1065 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!1066 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!1067 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!1068 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!1069 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!1070 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!1071 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!1072 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!1073 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!1074 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!1075 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!1076 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!1077 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!1078 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!1079 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!1080 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!1081 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!1082 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!1083 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!1084 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!1085 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!1086 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!1087 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!1088 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!1089 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!1090 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!1091 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!1092 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!1093 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!1094 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!1095 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!1096 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!1097 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!1098 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!1099 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!1100 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!1101 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!1102 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!1103 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!1104 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!1105 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!1106 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!1107 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!1108 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!1109 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!1110 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!1111 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!1112 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!1113 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!1114 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!1115 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!1116 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!1117 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!1118 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!1119 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!1120 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!1121 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!1122 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!1123 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!1124 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!1125 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!1126 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!1127 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!1128 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!1129 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!1130 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!1131 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!1132 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!1133 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!1134 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!1135 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!1136 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!1137 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!1138 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!1139 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!1140 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!1141 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!1142 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!1143 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!1144 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!1145 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!1146 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!1147 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!1148 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!1149 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!1150 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!1151 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!1152 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!1153 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!1154 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!1155 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!1156 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!1157 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!1158 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!1159 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!1160 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!1161 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!1162 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!1163 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!1164 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!1165 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!1166 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!1167 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!1168 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!1169 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!1170 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!1171 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!1172 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!1173 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!1174 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!1175 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!1176 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!1177 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!1178 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!1179 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!1180 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!1181 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!1182 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!1183 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!1184 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!1185 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!1186 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!1187 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!1188 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!1189 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!1190 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!1191 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!1192 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!1193 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!1194 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!1195 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!1196 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!1197 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!1198 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!1199 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!1200 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!1201 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!1202 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!1203 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!1204 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!1205 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!1206 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!1207 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!1208 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!1209 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!1210 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!1211 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!1212 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!1213 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!1214 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!1215 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!1216 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!1217 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!1218 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!1219 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!1220 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!1221 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!1222 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!1223 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!1224 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!1225 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!1226 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!1227 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!1228 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!1229 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!1230 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!1231 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!1232 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!1233 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!1234 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!1235 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!1236 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!1237 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!1238 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!1239 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!1240 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!1241 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!1242 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!1243 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!1244 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!1245 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!1246 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!1247 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!1248 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!1249 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!1250 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!1251 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!1252 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!1253 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!1254 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!1255 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!1256 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!1257 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!1258 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!1259 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!1260 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!1261 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!1262 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!1263 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!1264 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!1265 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!1266 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!1267 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!1268 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!1269 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!1270 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!1271 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!1272 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!1273 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!1274 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!1275 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!1276 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!1277 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!1278 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!1279 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!1280 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!1281 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!1282 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!1283 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!1284 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!1285 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!1286 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!1287 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!1288 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!1289 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!1290 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!1291 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!1292 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!1293 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!1294 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!1295 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!1296 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!1297 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!1298 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!1299 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!1300 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!1301 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!1302 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!1304 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!1305 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!1306 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!1307 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!1308 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!1309 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!1310 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!1311 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!1312 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!1313 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!1314 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!1315 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!1316 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!1317 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!1318 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!1319 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!1320 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!1321 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!1322 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!1323 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!1324 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!1325 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!1326 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!1327 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!1328 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!1329 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!1330 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!1331 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!1332 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!1333 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!1334 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!1335 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!1336 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!1337 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!1338 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!1339 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!1340 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!1341 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!1342 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!1343 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!1344 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!1345 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!1346 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!1347 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!1348 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!1349 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!1350 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!1351 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!1352 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!1353 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!1354 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!1355 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!1356 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!1357 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!1358 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!1359 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!1360 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!1361 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!1362 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!1363 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!1364 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!1365 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!1366 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!1367 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!1368 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!1369 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!1370 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!1371 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!1372 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!1373 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!1374 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!1375 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!1376 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!1377 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!1378 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!1379 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!1380 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!1381 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!1382 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!1383 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!1384 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!1385 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!1386 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!1387 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!1388 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!1389 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!1390 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!1391 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!1392 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!1393 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!1394 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!1395 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!1396 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!1397 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!1398 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!1399 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!1400 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!1401 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!1402 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!1403 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!1404 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!1405 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!1406 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!1407 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!1408 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!1409 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!1410 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!1411 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!1412 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!1413 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!1414 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!1415 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!1416 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!1417 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!1418 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!1419 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!1420 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!1421 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!1422 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!1423 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!1424 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!1425 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!1426 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!1427 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!1428 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!1429 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!1430 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!1431 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!1432 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!1433 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!1434 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!1435 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!1436 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!1437 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!1438 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!1439 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!1440 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!1441 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!1442 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!1443 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!1444 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!1445 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!1446 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!1447 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!1448 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!1449 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!1450 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!1451 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!1452 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!1453 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!1454 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!1455 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!1456 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!1457 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!1458 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!1459 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!1460 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!1461 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!1462 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!1463 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!1464 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!1465 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!1466 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!1467 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!1468 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!1469 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!1470 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!1471 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!1472 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!1473 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!1474 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!1475 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!1476 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!1477 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!1478 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!1479 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!1480 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!1481 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!1482 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!1483 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!1484 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!1485 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!1486 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!1487 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!1488 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!1489 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!1490 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!1491 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!1492 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!1493 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!1494 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!1495 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!1496 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!1497 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!1498 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!1499 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!1500 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!1501 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!1502 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!1503 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!1504 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!1505 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!1506 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!1507 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!1508 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!1509 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!1510 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!1511 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!1512 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!1513 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!1514 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!1515 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!1516 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!1517 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!1518 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!1519 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!1520 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!1521 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!1522 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!1523 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!1524 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!1525 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!1526 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!1527 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!1528 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!1529 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!1530 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!1531 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!1532 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!1533 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!1534 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!1535 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!1536 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!1537 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!1538 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!1539 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!1540 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!1541 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!1542 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!1543 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!1544 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!1545 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!1546 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!1547 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!1548 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!1549 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!1550 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!1551 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!1552 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!1553 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!1554 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!1555 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!1556 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!1557 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!1558 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!1559 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!1560 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!1561 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!1562 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!1563 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!1564 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!1565 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!1566 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!1567 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!1568 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!1569 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!1570 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!1571 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!1572 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!1573 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!1574 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!1575 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!1576 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!1577 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!1578 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!1579 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!1580 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!1581 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!1582 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!1583 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!1584 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!1585 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!1586 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!1587 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!1588 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!1589 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!1590 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!1591 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!1592 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!1593 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!1594 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!1595 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!1596 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!1597 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!1598 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!1599 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!1600 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!1601 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!1602 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!1603 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!1604 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!1605 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!1606 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!1607 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!1608 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!1609 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!1610 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!1611 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!1612 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!1613 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!1614 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!1615 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!1616 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!1617 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!1618 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!1619 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!1620 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!1621 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!1622 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!1623 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!1624 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!1625 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!1626 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!1627 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!1628 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!1629 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!1630 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!1631 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!1632 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!1633 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!1634 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!1635 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!1636 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!1637 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!1638 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!1639 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!1640 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!1641 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!1642 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!1643 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!1644 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!1645 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!1646 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!1647 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!1648 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!1649 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!1650 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!1651 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!1652 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!1653 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!1654 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!1655 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!1656 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!1657 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!1658 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!1659 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!1660 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!1661 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!1662 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!1663 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!1664 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!1665 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!1666 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!1667 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!1668 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!1669 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!1670 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!1671 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!1672 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!1673 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!1674 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!1675 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!1676 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!1677 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!1678 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!1679 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!1680 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!1681 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!1682 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!1683 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!1684 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!1685 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!1686 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!1687 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!1688 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!1689 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!1690 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!1691 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!1692 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!1693 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!1694 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!1695 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!1696 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!1697 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!1698 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!1699 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!1700 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!1701 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!1702 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!1703 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!1704 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!1705 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!1706 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!1707 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!1708 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!1709 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!1710 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!1711 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!1712 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!1713 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!1714 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!1715 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!1716 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!1717 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!1718 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!1719 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!1720 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!1721 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!1722 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!1723 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!1724 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!1725 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!1726 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!1727 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!1728 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!1729 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!1730 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!1731 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!1732 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!1733 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!1734 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!1735 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!1736 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!1737 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!1738 = !{!1739, !134, !1740, !1741, !1747, !1876, !1801, !3104, !2645, !3122, !3123, !2077, !3135, !2110, !2015, !7, !3137, !827, !3106, !3142, !3145, !3150, !3167, !1803, !1999, !3168, !2570, !3174, !3187, !3188, !2056}
!1739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1740 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1741 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1742, size: 64)
!1742 = !DIDerivedType(tag: DW_TAG_typedef, name: "value_range_t", file: !391, line: 107, baseType: !1743)
!1743 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "value_range_d", file: !391, line: 83, size: 256, elements: !1744)
!1744 = !{!1745, !1746, !3102, !3103}
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1743, file: !391, line: 86, baseType: !390, size: 32)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "min", scope: !1743, file: !391, line: 99, baseType: !1747, size: 64, offset: 64)
!1747 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1748, line: 56, baseType: !1749)
!1748 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1750, size: 64)
!1750 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1751)
!1751 = !{!1752, !1785, !1791, !1804, !1823, !1834, !1839, !1849, !1855, !1869, !1881, !1919, !2432, !2460, !2476, !2477, !2482, !2491, !2497, !2502, !2506, !2510, !2754, !2801, !2807, !2813, !2820, !2833, !2847, !2864, !2876, !2898, !2913, !3084}
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1750, file: !135, line: 3372, baseType: !1753, size: 64)
!1753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1754)
!1754 = !{!1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1753, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1753, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1753, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1753, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1753, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1753, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1753, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1753, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1753, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1753, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1753, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1753, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1753, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1753, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1753, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1753, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1753, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1753, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1753, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1753, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1753, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1753, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1753, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1753, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1753, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1753, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1753, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1753, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1753, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1753, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1750, file: !135, line: 3373, baseType: !1786, size: 192)
!1786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1787)
!1787 = !{!1788, !1789, !1790}
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1786, file: !135, line: 403, baseType: !1753, size: 64)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1786, file: !135, line: 404, baseType: !1747, size: 64, offset: 64)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1786, file: !135, line: 405, baseType: !1747, size: 64, offset: 128)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1750, file: !135, line: 3374, baseType: !1792, size: 320)
!1792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1793)
!1793 = !{!1794, !1795}
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1792, file: !135, line: 1385, baseType: !1786, size: 192)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1792, file: !135, line: 1386, baseType: !1796, size: 128, offset: 192)
!1796 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1797, line: 58, baseType: !1798)
!1797 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1798 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1797, line: 54, size: 128, elements: !1799)
!1799 = !{!1800, !1802}
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1798, file: !1797, line: 56, baseType: !1801, size: 64)
!1801 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1798, file: !1797, line: 57, baseType: !1803, size: 64, offset: 64)
!1803 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1750, file: !135, line: 3375, baseType: !1805, size: 256)
!1805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1806)
!1806 = !{!1807, !1808}
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1805, file: !135, line: 1398, baseType: !1786, size: 192)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1805, file: !135, line: 1399, baseType: !1809, size: 64, offset: 192)
!1809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1810, size: 64)
!1810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1811, line: 52, size: 256, elements: !1812)
!1811 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1812 = !{!1813, !1814, !1815, !1816, !1817, !1818, !1819}
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1810, file: !1811, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1810, file: !1811, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1810, file: !1811, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1810, file: !1811, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1810, file: !1811, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1810, file: !1811, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1810, file: !1811, line: 62, baseType: !1820, size: 192, offset: 64)
!1820 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1801, size: 192, elements: !1821)
!1821 = !{!1822}
!1822 = !DISubrange(count: 3)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1750, file: !135, line: 3376, baseType: !1824, size: 256)
!1824 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1825)
!1825 = !{!1826, !1827}
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1824, file: !135, line: 1409, baseType: !1786, size: 192)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1824, file: !135, line: 1410, baseType: !1828, size: 64, offset: 192)
!1828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1829, size: 64)
!1829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1830, line: 27, size: 192, elements: !1831)
!1830 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1831 = !{!1832, !1833}
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1829, file: !1830, line: 29, baseType: !1796, size: 128)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1829, file: !1830, line: 30, baseType: !5, size: 32, offset: 128)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1750, file: !135, line: 3377, baseType: !1835, size: 256)
!1835 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1836)
!1836 = !{!1837, !1838}
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1835, file: !135, line: 1438, baseType: !1786, size: 192)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1835, file: !135, line: 1439, baseType: !1747, size: 64, offset: 192)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1750, file: !135, line: 3378, baseType: !1840, size: 256)
!1840 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1841)
!1841 = !{!1842, !1843, !1844}
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1840, file: !135, line: 1419, baseType: !1786, size: 192)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1840, file: !135, line: 1420, baseType: !1740, size: 32, offset: 192)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1840, file: !135, line: 1421, baseType: !1845, size: 8, offset: 224)
!1845 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1846, size: 8, elements: !1847)
!1846 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1847 = !{!1848}
!1848 = !DISubrange(count: 1)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1750, file: !135, line: 3379, baseType: !1850, size: 320)
!1850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1851)
!1851 = !{!1852, !1853, !1854}
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1850, file: !135, line: 1429, baseType: !1786, size: 192)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1850, file: !135, line: 1430, baseType: !1747, size: 64, offset: 192)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1850, file: !135, line: 1431, baseType: !1747, size: 64, offset: 256)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1750, file: !135, line: 3380, baseType: !1856, size: 320)
!1856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1857)
!1857 = !{!1858, !1859}
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1856, file: !135, line: 1461, baseType: !1786, size: 192)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1856, file: !135, line: 1462, baseType: !1860, size: 128, offset: 192)
!1860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1861, line: 31, size: 128, elements: !1862)
!1861 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1862 = !{!1863, !1867, !1868}
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1860, file: !1861, line: 32, baseType: !1864, size: 64)
!1864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1865, size: 64)
!1865 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1866)
!1866 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1860, file: !1861, line: 33, baseType: !7, size: 32, offset: 64)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1860, file: !1861, line: 34, baseType: !7, size: 32, offset: 96)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1750, file: !135, line: 3381, baseType: !1870, size: 384)
!1870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1871)
!1871 = !{!1872, !1873, !1878, !1879, !1880}
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1870, file: !135, line: 2508, baseType: !1786, size: 192)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1870, file: !135, line: 2509, baseType: !1874, size: 32, offset: 192)
!1874 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1875, line: 58, baseType: !1876)
!1875 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1876 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1877, line: 44, baseType: !7)
!1877 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1870, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1870, file: !135, line: 2511, baseType: !1747, size: 64, offset: 256)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1870, file: !135, line: 2512, baseType: !1747, size: 64, offset: 320)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1750, file: !135, line: 3382, baseType: !1882, size: 896)
!1882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1883)
!1883 = !{!1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916}
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1882, file: !135, line: 2653, baseType: !1870, size: 384)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1882, file: !135, line: 2654, baseType: !1747, size: 64, offset: 384)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1882, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1882, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1882, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1882, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1882, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1882, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1882, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1882, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1882, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1882, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1882, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1882, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1882, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1882, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1882, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1882, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1882, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1882, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1882, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1882, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1882, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1882, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1882, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1882, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1882, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1882, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1882, file: !135, line: 2705, baseType: !1747, size: 64, offset: 576)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1882, file: !135, line: 2706, baseType: !1747, size: 64, offset: 640)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1882, file: !135, line: 2707, baseType: !1747, size: 64, offset: 704)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1882, file: !135, line: 2708, baseType: !1747, size: 64, offset: 768)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1882, file: !135, line: 2711, baseType: !1917, size: 64, offset: 832)
!1917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1918, size: 64)
!1918 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1750, file: !135, line: 3383, baseType: !1920, size: 960)
!1920 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1921)
!1921 = !{!1922, !1923}
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1920, file: !135, line: 2757, baseType: !1882, size: 896)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1920, file: !135, line: 2758, baseType: !1924, size: 64, offset: 896)
!1924 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1748, line: 50, baseType: !1925)
!1925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1926, size: 64)
!1926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1927, line: 240, size: 384, elements: !1928)
!1927 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1928 = !{!1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939}
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1926, file: !1927, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1926, file: !1927, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1926, file: !1927, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1926, file: !1927, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1926, file: !1927, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1926, file: !1927, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1926, file: !1927, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1926, file: !1927, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1926, file: !1927, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1926, file: !1927, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1926, file: !1927, line: 321, baseType: !1940, size: 320, offset: 64)
!1940 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1927, line: 315, size: 320, elements: !1941)
!1941 = !{!1942, !2399, !2401, !2430, !2431}
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1940, file: !1927, line: 316, baseType: !1943, size: 64)
!1943 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1944, size: 64, elements: !1847)
!1944 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1927, line: 183, baseType: !1945)
!1945 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1927, line: 166, size: 64, elements: !1946)
!1946 = !{!1947, !1948, !1949, !1952, !1953, !1961, !1962, !1974, !1977, !2038, !2039, !2376, !2389, !2396}
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1945, file: !1927, line: 168, baseType: !1740, size: 32)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1945, file: !1927, line: 169, baseType: !7, size: 32)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1945, file: !1927, line: 170, baseType: !1950, size: 64)
!1950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1951, size: 64)
!1951 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1846)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1945, file: !1927, line: 171, baseType: !1924, size: 64)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1945, file: !1927, line: 172, baseType: !1954, size: 64)
!1954 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1748, line: 53, baseType: !1955)
!1955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1956, size: 64)
!1956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1927, line: 359, size: 128, elements: !1957)
!1957 = !{!1958, !1959}
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1956, file: !1927, line: 360, baseType: !1740, size: 32)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1956, file: !1927, line: 361, baseType: !1960, size: 64, offset: 64)
!1960 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1924, size: 64, elements: !1847)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1945, file: !1927, line: 173, baseType: !5, size: 32)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1945, file: !1927, line: 174, baseType: !1963, size: 32)
!1963 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1927, line: 133, baseType: !1964)
!1964 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1927, line: 115, size: 32, elements: !1965)
!1965 = !{!1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973}
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1964, file: !1927, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1964, file: !1927, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1964, file: !1927, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1964, file: !1927, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1964, file: !1927, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1964, file: !1927, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1964, file: !1927, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1964, file: !1927, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1945, file: !1927, line: 175, baseType: !1975, size: 64)
!1975 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1976, size: 64)
!1976 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1927, line: 175, flags: DIFlagFwdDecl)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1945, file: !1927, line: 176, baseType: !1978, size: 64)
!1978 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1979, size: 64)
!1979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1980, line: 75, size: 256, elements: !1981)
!1980 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1981 = !{!1982, !1996, !1997, !1998}
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1979, file: !1980, line: 76, baseType: !1983, size: 64)
!1983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1984, size: 64)
!1984 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1980, line: 68, baseType: !1985)
!1985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1980, line: 63, size: 320, elements: !1986)
!1986 = !{!1987, !1989, !1990, !1991}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1985, file: !1980, line: 64, baseType: !1988, size: 64)
!1988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1985, size: 64)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1985, file: !1980, line: 65, baseType: !1988, size: 64, offset: 64)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1985, file: !1980, line: 66, baseType: !7, size: 32, offset: 128)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1985, file: !1980, line: 67, baseType: !1992, size: 128, offset: 192)
!1992 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1993, size: 128, elements: !1994)
!1993 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1980, line: 29, baseType: !1801)
!1994 = !{!1995}
!1995 = !DISubrange(count: 2)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1979, file: !1980, line: 77, baseType: !1983, size: 64, offset: 64)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1979, file: !1980, line: 78, baseType: !7, size: 32, offset: 128)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1979, file: !1980, line: 79, baseType: !1999, size: 64, offset: 192)
!1999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2000, size: 64)
!2000 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1980, line: 49, baseType: !2001)
!2001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1980, line: 45, size: 832, elements: !2002)
!2002 = !{!2003, !2004, !2005}
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2001, file: !1980, line: 46, baseType: !1988, size: 64)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2001, file: !1980, line: 47, baseType: !1978, size: 64, offset: 64)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2001, file: !1980, line: 48, baseType: !2006, size: 704, offset: 128)
!2006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2007, line: 164, size: 704, elements: !2008)
!2007 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2008 = !{!2009, !2010, !2021, !2022, !2023, !2024, !2025, !2026, !2030, !2034, !2035, !2036, !2037}
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2006, file: !2007, line: 166, baseType: !1803, size: 64)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2006, file: !2007, line: 167, baseType: !2011, size: 64, offset: 64)
!2011 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2012, size: 64)
!2012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2007, line: 157, size: 192, elements: !2013)
!2013 = !{!2014, !2016, !2017}
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2012, file: !2007, line: 159, baseType: !2015, size: 64)
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1846, size: 64)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2012, file: !2007, line: 160, baseType: !2011, size: 64, offset: 64)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2012, file: !2007, line: 161, baseType: !2018, size: 32, offset: 128)
!2018 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1846, size: 32, elements: !2019)
!2019 = !{!2020}
!2020 = !DISubrange(count: 4)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2006, file: !2007, line: 168, baseType: !2015, size: 64, offset: 128)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2006, file: !2007, line: 169, baseType: !2015, size: 64, offset: 192)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2006, file: !2007, line: 170, baseType: !2015, size: 64, offset: 256)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2006, file: !2007, line: 171, baseType: !1803, size: 64, offset: 320)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2006, file: !2007, line: 172, baseType: !1740, size: 32, offset: 384)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2006, file: !2007, line: 176, baseType: !2027, size: 64, offset: 448)
!2027 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2028, size: 64)
!2028 = !DISubroutineType(types: !2029)
!2029 = !{!2011, !1739, !1803}
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2006, file: !2007, line: 177, baseType: !2031, size: 64, offset: 512)
!2031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2032, size: 64)
!2032 = !DISubroutineType(types: !2033)
!2033 = !{null, !1739, !2011}
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2006, file: !2007, line: 178, baseType: !1739, size: 64, offset: 576)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2006, file: !2007, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2006, file: !2007, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2006, file: !2007, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1945, file: !1927, line: 177, baseType: !1747, size: 64)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1945, file: !1927, line: 178, baseType: !2040, size: 64)
!2040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2041, size: 64)
!2041 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !343, line: 217, size: 832, elements: !2042)
!2042 = !{!2043, !2288, !2289, !2290, !2346, !2350, !2351, !2352, !2370, !2371, !2372, !2373, !2374, !2375}
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2041, file: !343, line: 219, baseType: !2044, size: 64)
!2044 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2045, size: 64)
!2045 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !343, line: 151, baseType: !2046)
!2046 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !343, line: 151, size: 128, elements: !2047)
!2047 = !{!2048}
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2046, file: !343, line: 151, baseType: !2049, size: 128)
!2049 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !343, line: 150, baseType: !2050)
!2050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !343, line: 150, size: 128, elements: !2051)
!2051 = !{!2052, !2053, !2054}
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2050, file: !343, line: 150, baseType: !7, size: 32)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2050, file: !343, line: 150, baseType: !7, size: 32, offset: 32)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2050, file: !343, line: 150, baseType: !2055, size: 64, offset: 64)
!2055 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2056, size: 64, elements: !1847)
!2056 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1748, line: 108, baseType: !2057)
!2057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2058, size: 64)
!2058 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !343, line: 122, size: 512, elements: !2059)
!2059 = !{!2060, !2061, !2062, !2280, !2281, !2282, !2283, !2284, !2285, !2286}
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2058, file: !343, line: 124, baseType: !2040, size: 64)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2058, file: !343, line: 125, baseType: !2040, size: 64, offset: 64)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2058, file: !343, line: 131, baseType: !2063, size: 64, offset: 128)
!2063 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !343, line: 128, size: 64, elements: !2064)
!2064 = !{!2065, !2279}
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2063, file: !343, line: 129, baseType: !2066, size: 64)
!2066 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1748, line: 66, baseType: !2067)
!2067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2068, size: 64)
!2068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !742, line: 143, size: 192, elements: !2069)
!2069 = !{!2070, !2277, !2278}
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2068, file: !742, line: 145, baseType: !2071, size: 64)
!2071 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1748, line: 69, baseType: !2072)
!2072 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2073, size: 64)
!2073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !742, line: 136, size: 192, elements: !2074)
!2074 = !{!2075, !2275, !2276}
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2073, file: !742, line: 137, baseType: !2076, size: 64)
!2076 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1748, line: 58, baseType: !2077)
!2077 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2078, size: 64)
!2078 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !742, line: 737, size: 768, elements: !2079)
!2079 = !{!2080, !2097, !2130, !2136, !2141, !2146, !2153, !2159, !2165, !2170, !2184, !2189, !2195, !2200, !2210, !2215, !2233, !2240, !2247, !2253, !2258, !2264, !2270}
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2078, file: !742, line: 738, baseType: !2081, size: 256)
!2081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !742, line: 271, size: 256, elements: !2082)
!2082 = !{!2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096}
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2081, file: !742, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !2081, file: !742, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2081, file: !742, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !2081, file: !742, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !2081, file: !742, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2081, file: !742, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !2081, file: !742, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2081, file: !742, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2081, file: !742, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2081, file: !742, line: 312, baseType: !7, size: 32, offset: 32)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !2081, file: !742, line: 316, baseType: !1874, size: 32, offset: 64)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !2081, file: !742, line: 319, baseType: !7, size: 32, offset: 96)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2081, file: !742, line: 323, baseType: !2040, size: 64, offset: 128)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2081, file: !742, line: 327, baseType: !1747, size: 64, offset: 192)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !2078, file: !742, line: 739, baseType: !2098, size: 448)
!2098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !742, line: 350, size: 448, elements: !2099)
!2099 = !{!2100, !2128}
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2098, file: !742, line: 353, baseType: !2101, size: 384)
!2101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !742, line: 333, size: 384, elements: !2102)
!2102 = !{!2103, !2104, !2111}
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2101, file: !742, line: 336, baseType: !2081, size: 256)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2101, file: !742, line: 343, baseType: !2105, size: 64, offset: 256)
!2105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2106, size: 64)
!2106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !781, line: 37, size: 128, elements: !2107)
!2107 = !{!2108, !2109}
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2106, file: !781, line: 39, baseType: !2105, size: 64)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2106, file: !781, line: 40, baseType: !2110, size: 64, offset: 64)
!2110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1747, size: 64)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2101, file: !742, line: 344, baseType: !2112, size: 64, offset: 320)
!2112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2113, size: 64)
!2113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !781, line: 45, size: 320, elements: !2114)
!2114 = !{!2115, !2116}
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2113, file: !781, line: 47, baseType: !2112, size: 64)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2113, file: !781, line: 48, baseType: !2117, size: 256, offset: 64)
!2117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !2118)
!2118 = !{!2119, !2121, !2122, !2127}
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2117, file: !135, line: 1884, baseType: !2120, size: 64)
!2120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2117, size: 64)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2117, file: !135, line: 1885, baseType: !2120, size: 64, offset: 64)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2117, file: !135, line: 1891, baseType: !2123, size: 64, offset: 128)
!2123 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2117, file: !135, line: 1891, size: 64, elements: !2124)
!2124 = !{!2125, !2126}
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2123, file: !135, line: 1891, baseType: !2076, size: 64)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2123, file: !135, line: 1891, baseType: !1747, size: 64)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2117, file: !135, line: 1892, baseType: !2110, size: 64, offset: 192)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2098, file: !742, line: 359, baseType: !2129, size: 64, offset: 384)
!2129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1747, size: 64, elements: !1847)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !2078, file: !742, line: 740, baseType: !2131, size: 512)
!2131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !742, line: 365, size: 512, elements: !2132)
!2132 = !{!2133, !2134, !2135}
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2131, file: !742, line: 368, baseType: !2101, size: 384)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2131, file: !742, line: 373, baseType: !1747, size: 64, offset: 384)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2131, file: !742, line: 374, baseType: !1747, size: 64, offset: 448)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !2078, file: !742, line: 741, baseType: !2137, size: 576)
!2137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !742, line: 380, size: 576, elements: !2138)
!2138 = !{!2139, !2140}
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2137, file: !742, line: 383, baseType: !2131, size: 512)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2137, file: !742, line: 389, baseType: !2129, size: 64, offset: 512)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2078, file: !742, line: 742, baseType: !2142, size: 320)
!2142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !742, line: 395, size: 320, elements: !2143)
!2143 = !{!2144, !2145}
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2142, file: !742, line: 397, baseType: !2081, size: 256)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2142, file: !742, line: 400, baseType: !2066, size: 64, offset: 256)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !2078, file: !742, line: 743, baseType: !2147, size: 448)
!2147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !742, line: 406, size: 448, elements: !2148)
!2148 = !{!2149, !2150, !2151, !2152}
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2147, file: !742, line: 408, baseType: !2081, size: 256)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2147, file: !742, line: 412, baseType: !1747, size: 64, offset: 256)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2147, file: !742, line: 420, baseType: !1747, size: 64, offset: 320)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2147, file: !742, line: 423, baseType: !2066, size: 64, offset: 384)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !2078, file: !742, line: 744, baseType: !2154, size: 384)
!2154 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !742, line: 429, size: 384, elements: !2155)
!2155 = !{!2156, !2157, !2158}
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2154, file: !742, line: 431, baseType: !2081, size: 256)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2154, file: !742, line: 434, baseType: !1747, size: 64, offset: 256)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2154, file: !742, line: 437, baseType: !2066, size: 64, offset: 320)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !2078, file: !742, line: 745, baseType: !2160, size: 384)
!2160 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !742, line: 443, size: 384, elements: !2161)
!2161 = !{!2162, !2163, !2164}
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2160, file: !742, line: 445, baseType: !2081, size: 256)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2160, file: !742, line: 449, baseType: !1747, size: 64, offset: 256)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2160, file: !742, line: 453, baseType: !2066, size: 64, offset: 320)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !2078, file: !742, line: 746, baseType: !2166, size: 320)
!2166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !742, line: 459, size: 320, elements: !2167)
!2167 = !{!2168, !2169}
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2166, file: !742, line: 461, baseType: !2081, size: 256)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2166, file: !742, line: 464, baseType: !1747, size: 64, offset: 256)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !2078, file: !742, line: 747, baseType: !2171, size: 768)
!2171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !742, line: 469, size: 768, elements: !2172)
!2172 = !{!2173, !2174, !2175, !2176, !2177}
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2171, file: !742, line: 471, baseType: !2081, size: 256)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2171, file: !742, line: 474, baseType: !7, size: 32, offset: 256)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2171, file: !742, line: 475, baseType: !7, size: 32, offset: 288)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2171, file: !742, line: 478, baseType: !1747, size: 64, offset: 320)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2171, file: !742, line: 481, baseType: !2178, size: 384, offset: 384)
!2178 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2179, size: 384, elements: !1847)
!2179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !2180)
!2180 = !{!2181, !2182, !2183}
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2179, file: !135, line: 1920, baseType: !2117, size: 256)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2179, file: !135, line: 1921, baseType: !1747, size: 64, offset: 256)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2179, file: !135, line: 1922, baseType: !1874, size: 32, offset: 320)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !2078, file: !742, line: 748, baseType: !2185, size: 320)
!2185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !742, line: 487, size: 320, elements: !2186)
!2186 = !{!2187, !2188}
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2185, file: !742, line: 490, baseType: !2081, size: 256)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2185, file: !742, line: 494, baseType: !1740, size: 32, offset: 256)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !2078, file: !742, line: 749, baseType: !2190, size: 384)
!2190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !742, line: 500, size: 384, elements: !2191)
!2191 = !{!2192, !2193, !2194}
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2190, file: !742, line: 502, baseType: !2081, size: 256)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2190, file: !742, line: 506, baseType: !2066, size: 64, offset: 256)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2190, file: !742, line: 510, baseType: !2066, size: 64, offset: 320)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !2078, file: !742, line: 750, baseType: !2196, size: 320)
!2196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !742, line: 529, size: 320, elements: !2197)
!2197 = !{!2198, !2199}
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2196, file: !742, line: 531, baseType: !2081, size: 256)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2196, file: !742, line: 540, baseType: !2066, size: 64, offset: 256)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !2078, file: !742, line: 751, baseType: !2201, size: 704)
!2201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !742, line: 546, size: 704, elements: !2202)
!2202 = !{!2203, !2204, !2205, !2206, !2207, !2208, !2209}
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2201, file: !742, line: 549, baseType: !2131, size: 512)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2201, file: !742, line: 553, baseType: !1950, size: 64, offset: 512)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2201, file: !742, line: 557, baseType: !1866, size: 8, offset: 576)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2201, file: !742, line: 558, baseType: !1866, size: 8, offset: 584)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2201, file: !742, line: 559, baseType: !1866, size: 8, offset: 592)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2201, file: !742, line: 560, baseType: !1866, size: 8, offset: 600)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2201, file: !742, line: 566, baseType: !2129, size: 64, offset: 640)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !2078, file: !742, line: 752, baseType: !2211, size: 384)
!2211 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !742, line: 571, size: 384, elements: !2212)
!2212 = !{!2213, !2214}
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2211, file: !742, line: 573, baseType: !2142, size: 320)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2211, file: !742, line: 577, baseType: !1747, size: 64, offset: 320)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !2078, file: !742, line: 753, baseType: !2216, size: 576)
!2216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !742, line: 600, size: 576, elements: !2217)
!2217 = !{!2218, !2219, !2220, !2223, !2232}
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2216, file: !742, line: 602, baseType: !2142, size: 320)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2216, file: !742, line: 605, baseType: !1747, size: 64, offset: 320)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2216, file: !742, line: 609, baseType: !2221, size: 64, offset: 384)
!2221 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2222, line: 46, baseType: !1801)
!2222 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2216, file: !742, line: 612, baseType: !2224, size: 64, offset: 448)
!2224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2225, size: 64)
!2225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !742, line: 581, size: 320, elements: !2226)
!2226 = !{!2227, !2228, !2229, !2230, !2231}
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2225, file: !742, line: 583, baseType: !134, size: 32)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2225, file: !742, line: 586, baseType: !1747, size: 64, offset: 64)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2225, file: !742, line: 589, baseType: !1747, size: 64, offset: 128)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2225, file: !742, line: 592, baseType: !1747, size: 64, offset: 192)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2225, file: !742, line: 595, baseType: !1747, size: 64, offset: 256)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2216, file: !742, line: 616, baseType: !2066, size: 64, offset: 512)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !2078, file: !742, line: 754, baseType: !2234, size: 512)
!2234 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !742, line: 622, size: 512, elements: !2235)
!2235 = !{!2236, !2237, !2238, !2239}
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2234, file: !742, line: 624, baseType: !2142, size: 320)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2234, file: !742, line: 628, baseType: !1747, size: 64, offset: 320)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2234, file: !742, line: 632, baseType: !1747, size: 64, offset: 384)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2234, file: !742, line: 636, baseType: !1747, size: 64, offset: 448)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !2078, file: !742, line: 755, baseType: !2241, size: 704)
!2241 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !742, line: 642, size: 704, elements: !2242)
!2242 = !{!2243, !2244, !2245, !2246}
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2241, file: !742, line: 644, baseType: !2234, size: 512)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2241, file: !742, line: 648, baseType: !1747, size: 64, offset: 512)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2241, file: !742, line: 652, baseType: !1747, size: 64, offset: 576)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2241, file: !742, line: 653, baseType: !1747, size: 64, offset: 640)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !2078, file: !742, line: 756, baseType: !2248, size: 448)
!2248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !742, line: 663, size: 448, elements: !2249)
!2249 = !{!2250, !2251, !2252}
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2248, file: !742, line: 665, baseType: !2142, size: 320)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2248, file: !742, line: 668, baseType: !1747, size: 64, offset: 320)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2248, file: !742, line: 673, baseType: !1747, size: 64, offset: 384)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !2078, file: !742, line: 757, baseType: !2254, size: 384)
!2254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !742, line: 694, size: 384, elements: !2255)
!2255 = !{!2256, !2257}
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2254, file: !742, line: 696, baseType: !2142, size: 320)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2254, file: !742, line: 699, baseType: !1747, size: 64, offset: 320)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !2078, file: !742, line: 758, baseType: !2259, size: 384)
!2259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !742, line: 681, size: 384, elements: !2260)
!2260 = !{!2261, !2262, !2263}
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2259, file: !742, line: 683, baseType: !2081, size: 256)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2259, file: !742, line: 686, baseType: !1747, size: 64, offset: 256)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2259, file: !742, line: 689, baseType: !1747, size: 64, offset: 320)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !2078, file: !742, line: 759, baseType: !2265, size: 384)
!2265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !742, line: 707, size: 384, elements: !2266)
!2266 = !{!2267, !2268, !2269}
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2265, file: !742, line: 709, baseType: !2081, size: 256)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2265, file: !742, line: 712, baseType: !1747, size: 64, offset: 256)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2265, file: !742, line: 712, baseType: !1747, size: 64, offset: 320)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !2078, file: !742, line: 760, baseType: !2271, size: 320)
!2271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !742, line: 718, size: 320, elements: !2272)
!2272 = !{!2273, !2274}
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2271, file: !742, line: 720, baseType: !2081, size: 256)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2271, file: !742, line: 723, baseType: !1747, size: 64, offset: 256)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2073, file: !742, line: 138, baseType: !2072, size: 64, offset: 64)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2073, file: !742, line: 139, baseType: !2072, size: 64, offset: 128)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2068, file: !742, line: 146, baseType: !2071, size: 64, offset: 64)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2068, file: !742, line: 152, baseType: !2066, size: 64, offset: 128)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2063, file: !343, line: 130, baseType: !1924, size: 64)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2058, file: !343, line: 134, baseType: !1739, size: 64, offset: 192)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2058, file: !343, line: 137, baseType: !1747, size: 64, offset: 256)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2058, file: !343, line: 138, baseType: !1874, size: 32, offset: 320)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2058, file: !343, line: 142, baseType: !7, size: 32, offset: 352)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2058, file: !343, line: 144, baseType: !1740, size: 32, offset: 384)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2058, file: !343, line: 145, baseType: !1740, size: 32, offset: 416)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2058, file: !343, line: 146, baseType: !2287, size: 64, offset: 448)
!2287 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !343, line: 119, baseType: !1803)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2041, file: !343, line: 220, baseType: !2044, size: 64, offset: 64)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2041, file: !343, line: 223, baseType: !1739, size: 64, offset: 128)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2041, file: !343, line: 226, baseType: !2291, size: 64, offset: 192)
!2291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2292, size: 64)
!2292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 100, size: 1216, elements: !2293)
!2293 = !{!2294, !2295, !2296, !2297, !2298, !2303, !2304, !2305, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2336, !2344, !2345}
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2292, file: !330, line: 102, baseType: !1740, size: 32)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !2292, file: !330, line: 105, baseType: !7, size: 32, offset: 32)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2292, file: !330, line: 108, baseType: !2040, size: 64, offset: 64)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !2292, file: !330, line: 111, baseType: !2040, size: 64, offset: 128)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !2292, file: !330, line: 114, baseType: !2299, size: 64, offset: 192)
!2299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !330, line: 41, size: 64, elements: !2300)
!2300 = !{!2301, !2302}
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !2299, file: !330, line: 42, baseType: !329, size: 32)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !2299, file: !330, line: 43, baseType: !7, size: 32, offset: 32)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !2292, file: !330, line: 117, baseType: !7, size: 32, offset: 256)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !2292, file: !330, line: 120, baseType: !7, size: 32, offset: 288)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !2292, file: !330, line: 123, baseType: !2306, size: 64, offset: 320)
!2306 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2307, size: 64)
!2307 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !330, line: 87, baseType: !2308)
!2308 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !330, line: 87, size: 128, elements: !2309)
!2309 = !{!2310}
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2308, file: !330, line: 87, baseType: !2311, size: 128)
!2311 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !330, line: 85, baseType: !2312)
!2312 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !330, line: 85, size: 128, elements: !2313)
!2313 = !{!2314, !2315, !2316}
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2312, file: !330, line: 85, baseType: !7, size: 32)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2312, file: !330, line: 85, baseType: !7, size: 32, offset: 32)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2312, file: !330, line: 85, baseType: !2317, size: 64, offset: 64)
!2317 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2318, size: 64, elements: !1847)
!2318 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !330, line: 84, baseType: !2291)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2292, file: !330, line: 126, baseType: !2291, size: 64, offset: 384)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2292, file: !330, line: 129, baseType: !2291, size: 64, offset: 448)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2292, file: !330, line: 132, baseType: !1739, size: 64, offset: 512)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !2292, file: !330, line: 139, baseType: !1747, size: 64, offset: 576)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !2292, file: !330, line: 143, baseType: !1796, size: 128, offset: 640)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !2292, file: !330, line: 146, baseType: !1796, size: 128, offset: 768)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !2292, file: !330, line: 148, baseType: !1866, size: 8, offset: 896)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !2292, file: !330, line: 149, baseType: !1866, size: 8, offset: 904)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !2292, file: !330, line: 153, baseType: !338, size: 32, offset: 928)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !2292, file: !330, line: 156, baseType: !2329, size: 64, offset: 960)
!2329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2330, size: 64)
!2330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !330, line: 48, size: 320, elements: !2331)
!2331 = !{!2332, !2333, !2334, !2335}
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2330, file: !330, line: 50, baseType: !2076, size: 64)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2330, file: !330, line: 59, baseType: !1796, size: 128, offset: 64)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !2330, file: !330, line: 64, baseType: !1866, size: 8, offset: 192)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2330, file: !330, line: 67, baseType: !2329, size: 64, offset: 256)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2292, file: !330, line: 159, baseType: !2337, size: 64, offset: 1024)
!2337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2338, size: 64)
!2338 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !330, line: 72, size: 256, elements: !2339)
!2339 = !{!2340, !2341, !2342, !2343}
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !2338, file: !330, line: 74, baseType: !2057, size: 64)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2338, file: !330, line: 77, baseType: !2337, size: 64, offset: 64)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2338, file: !330, line: 78, baseType: !2337, size: 64, offset: 128)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !2338, file: !330, line: 81, baseType: !2337, size: 64, offset: 192)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !2292, file: !330, line: 162, baseType: !1866, size: 8, offset: 1088)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !2292, file: !330, line: 166, baseType: !1747, size: 64, offset: 1152)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2041, file: !343, line: 229, baseType: !2347, size: 128, offset: 256)
!2347 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2348, size: 128, elements: !1994)
!2348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2349, size: 64)
!2349 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !343, line: 229, flags: DIFlagFwdDecl)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2041, file: !343, line: 232, baseType: !2040, size: 64, offset: 384)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2041, file: !343, line: 233, baseType: !2040, size: 64, offset: 448)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2041, file: !343, line: 238, baseType: !2353, size: 64, offset: 512)
!2353 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !343, line: 235, size: 64, elements: !2354)
!2354 = !{!2355, !2361}
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2353, file: !343, line: 236, baseType: !2356, size: 64)
!2356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2357, size: 64)
!2357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !343, line: 273, size: 128, elements: !2358)
!2358 = !{!2359, !2360}
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2357, file: !343, line: 275, baseType: !2066, size: 64)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2357, file: !343, line: 278, baseType: !2066, size: 64, offset: 64)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2353, file: !343, line: 237, baseType: !2362, size: 64)
!2362 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2363, size: 64)
!2363 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !343, line: 259, size: 320, elements: !2364)
!2364 = !{!2365, !2366, !2367, !2368, !2369}
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2363, file: !343, line: 261, baseType: !1924, size: 64)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2363, file: !343, line: 262, baseType: !1924, size: 64, offset: 64)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2363, file: !343, line: 266, baseType: !1924, size: 64, offset: 128)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2363, file: !343, line: 267, baseType: !1924, size: 64, offset: 192)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2363, file: !343, line: 270, baseType: !1740, size: 32, offset: 256)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2041, file: !343, line: 241, baseType: !2287, size: 64, offset: 576)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2041, file: !343, line: 244, baseType: !1740, size: 32, offset: 640)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2041, file: !343, line: 247, baseType: !1740, size: 32, offset: 672)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2041, file: !343, line: 250, baseType: !1740, size: 32, offset: 704)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2041, file: !343, line: 253, baseType: !1740, size: 32, offset: 736)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2041, file: !343, line: 256, baseType: !1740, size: 32, offset: 768)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1945, file: !1927, line: 179, baseType: !2377, size: 64)
!2377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2378, size: 64)
!2378 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1927, line: 150, baseType: !2379)
!2379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1927, line: 142, size: 320, elements: !2380)
!2380 = !{!2381, !2382, !2383, !2384, !2387, !2388}
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2379, file: !1927, line: 144, baseType: !1747, size: 64)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2379, file: !1927, line: 145, baseType: !1924, size: 64, offset: 64)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2379, file: !1927, line: 146, baseType: !1924, size: 64, offset: 128)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2379, file: !1927, line: 147, baseType: !2385, size: 32, offset: 192)
!2385 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2386, line: 31, baseType: !1740)
!2386 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2379, file: !1927, line: 148, baseType: !7, size: 32, offset: 224)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2379, file: !1927, line: 149, baseType: !1866, size: 8, offset: 256)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1945, file: !1927, line: 180, baseType: !2390, size: 64)
!2390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2391, size: 64)
!2391 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1927, line: 162, baseType: !2392)
!2392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1927, line: 159, size: 128, elements: !2393)
!2393 = !{!2394, !2395}
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2392, file: !1927, line: 160, baseType: !1747, size: 64)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2392, file: !1927, line: 161, baseType: !1803, size: 64, offset: 64)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1945, file: !1927, line: 181, baseType: !2397, size: 64)
!2397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2398, size: 64)
!2398 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1927, line: 181, flags: DIFlagFwdDecl)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1940, file: !1927, line: 317, baseType: !2400, size: 64)
!2400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1803, size: 64, elements: !1847)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1940, file: !1927, line: 318, baseType: !2402, size: 320)
!2402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1927, line: 188, size: 320, elements: !2403)
!2403 = !{!2404, !2406, !2429}
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2402, file: !1927, line: 190, baseType: !2405, size: 192)
!2405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1944, size: 192, elements: !1821)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2402, file: !1927, line: 193, baseType: !2407, size: 64, offset: 192)
!2407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2408, size: 64)
!2408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1927, line: 206, size: 320, elements: !2409)
!2409 = !{!2410, !2414, !2415, !2416, !2428}
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2408, file: !1927, line: 208, baseType: !2411, size: 64)
!2411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2412, size: 64)
!2412 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1748, line: 62, baseType: !2413)
!2413 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1748, line: 61, flags: DIFlagFwdDecl)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2408, file: !1927, line: 211, baseType: !7, size: 32, offset: 64)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2408, file: !1927, line: 214, baseType: !1803, size: 64, offset: 128)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2408, file: !1927, line: 224, baseType: !2417, size: 64, offset: 192)
!2417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2418, size: 64)
!2418 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1927, line: 202, baseType: !2419)
!2419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1927, line: 202, size: 128, elements: !2420)
!2420 = !{!2421}
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2419, file: !1927, line: 202, baseType: !2422, size: 128)
!2422 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1927, line: 200, baseType: !2423)
!2423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1927, line: 200, size: 128, elements: !2424)
!2424 = !{!2425, !2426, !2427}
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2423, file: !1927, line: 200, baseType: !7, size: 32)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2423, file: !1927, line: 200, baseType: !7, size: 32, offset: 32)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2423, file: !1927, line: 200, baseType: !1960, size: 64, offset: 64)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2408, file: !1927, line: 234, baseType: !2417, size: 64, offset: 256)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2402, file: !1927, line: 197, baseType: !1803, size: 64, offset: 256)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1940, file: !1927, line: 319, baseType: !1810, size: 256)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1940, file: !1927, line: 320, baseType: !1829, size: 192)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1750, file: !135, line: 3384, baseType: !2433, size: 1472)
!2433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2434)
!2434 = !{!2435, !2456, !2457, !2458, !2459}
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2433, file: !135, line: 3115, baseType: !2436, size: 1216)
!2436 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2437)
!2437 = !{!2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455}
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2436, file: !135, line: 2985, baseType: !1920, size: 960)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2436, file: !135, line: 2986, baseType: !1747, size: 64, offset: 960)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2436, file: !135, line: 2987, baseType: !1747, size: 64, offset: 1024)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2436, file: !135, line: 2988, baseType: !1747, size: 64, offset: 1088)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2436, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2436, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2436, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2436, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2436, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2436, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2436, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2436, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2436, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2436, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2436, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2436, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2436, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2436, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2433, file: !135, line: 3117, baseType: !1747, size: 64, offset: 1216)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2433, file: !135, line: 3119, baseType: !1747, size: 64, offset: 1280)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2433, file: !135, line: 3121, baseType: !1747, size: 64, offset: 1344)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2433, file: !135, line: 3123, baseType: !1747, size: 64, offset: 1408)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1750, file: !135, line: 3385, baseType: !2461, size: 1088)
!2461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2462)
!2462 = !{!2463, !2464, !2465}
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2461, file: !135, line: 2875, baseType: !1920, size: 960)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2461, file: !135, line: 2876, baseType: !1924, size: 64, offset: 960)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2461, file: !135, line: 2877, baseType: !2466, size: 64, offset: 1024)
!2466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2467, size: 64)
!2467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !851, line: 172, size: 128, elements: !2468)
!2468 = !{!2469, !2470, !2471, !2472, !2473, !2474, !2475}
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2467, file: !851, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2467, file: !851, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2467, file: !851, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2467, file: !851, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2467, file: !851, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2467, file: !851, line: 195, baseType: !7, size: 32, offset: 32)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2467, file: !851, line: 199, baseType: !1747, size: 64, offset: 64)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1750, file: !135, line: 3386, baseType: !2436, size: 1216)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1750, file: !135, line: 3387, baseType: !2478, size: 1280)
!2478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2479)
!2479 = !{!2480, !2481}
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2478, file: !135, line: 3094, baseType: !2436, size: 1216)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2478, file: !135, line: 3095, baseType: !2466, size: 64, offset: 1216)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1750, file: !135, line: 3388, baseType: !2483, size: 1216)
!2483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2484)
!2484 = !{!2485, !2486, !2487, !2488, !2489, !2490}
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2483, file: !135, line: 2825, baseType: !1882, size: 896)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2483, file: !135, line: 2827, baseType: !1747, size: 64, offset: 896)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2483, file: !135, line: 2828, baseType: !1747, size: 64, offset: 960)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2483, file: !135, line: 2829, baseType: !1747, size: 64, offset: 1024)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2483, file: !135, line: 2830, baseType: !1747, size: 64, offset: 1088)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2483, file: !135, line: 2831, baseType: !1747, size: 64, offset: 1152)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1750, file: !135, line: 3389, baseType: !2492, size: 1024)
!2492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2493)
!2493 = !{!2494, !2495, !2496}
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2492, file: !135, line: 2851, baseType: !1920, size: 960)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2492, file: !135, line: 2852, baseType: !1740, size: 32, offset: 960)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2492, file: !135, line: 2853, baseType: !1740, size: 32, offset: 992)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1750, file: !135, line: 3390, baseType: !2498, size: 1024)
!2498 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2499)
!2499 = !{!2500, !2501}
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2498, file: !135, line: 2858, baseType: !1920, size: 960)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2498, file: !135, line: 2859, baseType: !2466, size: 64, offset: 960)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1750, file: !135, line: 3391, baseType: !2503, size: 960)
!2503 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2504)
!2504 = !{!2505}
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2503, file: !135, line: 2863, baseType: !1920, size: 960)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1750, file: !135, line: 3392, baseType: !2507, size: 1472)
!2507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2508)
!2508 = !{!2509}
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2507, file: !135, line: 3305, baseType: !2433, size: 1472)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1750, file: !135, line: 3393, baseType: !2511, size: 1792)
!2511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2512)
!2512 = !{!2513, !2514, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753}
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2511, file: !135, line: 3249, baseType: !2433, size: 1472)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2511, file: !135, line: 3251, baseType: !2515, size: 64, offset: 1472)
!2515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2516, size: 64)
!2516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2517, line: 463, size: 1152, elements: !2518)
!2517 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2518 = !{!2519, !2522, !2553, !2554, !2669, !2677, !2678, !2679, !2680, !2681, !2682, !2706, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732}
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2516, file: !2517, line: 464, baseType: !2520, size: 64)
!2520 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2521, size: 64)
!2521 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2517, line: 464, flags: DIFlagFwdDecl)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2516, file: !2517, line: 467, baseType: !2523, size: 64, offset: 64)
!2523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2524, size: 64)
!2524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !343, line: 374, size: 640, elements: !2525)
!2525 = !{!2526, !2528, !2529, !2542, !2543, !2544, !2545, !2546, !2547, !2549, !2551, !2552}
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2524, file: !343, line: 377, baseType: !2527, size: 64)
!2527 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1748, line: 111, baseType: !2040)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2524, file: !343, line: 378, baseType: !2527, size: 64, offset: 64)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2524, file: !343, line: 381, baseType: !2530, size: 64, offset: 128)
!2530 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2531, size: 64)
!2531 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !343, line: 282, baseType: !2532)
!2532 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !343, line: 282, size: 128, elements: !2533)
!2533 = !{!2534}
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2532, file: !343, line: 282, baseType: !2535, size: 128)
!2535 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !343, line: 281, baseType: !2536)
!2536 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !343, line: 281, size: 128, elements: !2537)
!2537 = !{!2538, !2539, !2540}
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2536, file: !343, line: 281, baseType: !7, size: 32)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2536, file: !343, line: 281, baseType: !7, size: 32, offset: 32)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2536, file: !343, line: 281, baseType: !2541, size: 64, offset: 64)
!2541 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2527, size: 64, elements: !1847)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2524, file: !343, line: 384, baseType: !1740, size: 32, offset: 192)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2524, file: !343, line: 387, baseType: !1740, size: 32, offset: 224)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2524, file: !343, line: 390, baseType: !1740, size: 32, offset: 256)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2524, file: !343, line: 394, baseType: !2530, size: 64, offset: 320)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2524, file: !343, line: 396, baseType: !342, size: 32, offset: 384)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2524, file: !343, line: 399, baseType: !2548, size: 64, offset: 416)
!2548 = !DICompositeType(tag: DW_TAG_array_type, baseType: !348, size: 64, elements: !1994)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2524, file: !343, line: 402, baseType: !2550, size: 64, offset: 480)
!2550 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1994)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2524, file: !343, line: 406, baseType: !1740, size: 32, offset: 544)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2524, file: !343, line: 409, baseType: !1740, size: 32, offset: 576)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2516, file: !2517, line: 470, baseType: !2067, size: 64, offset: 128)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2516, file: !2517, line: 473, baseType: !2555, size: 64, offset: 192)
!2555 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2556, size: 64)
!2556 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !851, line: 39, size: 1152, elements: !2557)
!2557 = !{!2558, !2608, !2621, !2633, !2634, !2646, !2647, !2651, !2652, !2653, !2654, !2655}
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2556, file: !851, line: 41, baseType: !2559, size: 64)
!2559 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2560, line: 144, baseType: !2561)
!2560 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2562, size: 64)
!2562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2560, line: 100, size: 896, elements: !2563)
!2563 = !{!2564, !2572, !2577, !2582, !2584, !2585, !2586, !2587, !2588, !2589, !2594, !2596, !2597, !2602, !2607}
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2562, file: !2560, line: 102, baseType: !2565, size: 64)
!2565 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2560, line: 52, baseType: !2566)
!2566 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2567, size: 64)
!2567 = !DISubroutineType(types: !2568)
!2568 = !{!2569, !2570}
!2569 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2560, line: 47, baseType: !7)
!2570 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2571, size: 64)
!2571 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2562, file: !2560, line: 105, baseType: !2573, size: 64, offset: 64)
!2573 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2560, line: 59, baseType: !2574)
!2574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2575, size: 64)
!2575 = !DISubroutineType(types: !2576)
!2576 = !{!1740, !2570, !2570}
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2562, file: !2560, line: 108, baseType: !2578, size: 64, offset: 128)
!2578 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2560, line: 63, baseType: !2579)
!2579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2580, size: 64)
!2580 = !DISubroutineType(types: !2581)
!2581 = !{null, !1739}
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2562, file: !2560, line: 111, baseType: !2583, size: 64, offset: 192)
!2583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1739, size: 64)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2562, file: !2560, line: 114, baseType: !2221, size: 64, offset: 256)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2562, file: !2560, line: 117, baseType: !2221, size: 64, offset: 320)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2562, file: !2560, line: 120, baseType: !2221, size: 64, offset: 384)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2562, file: !2560, line: 124, baseType: !7, size: 32, offset: 448)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2562, file: !2560, line: 128, baseType: !7, size: 32, offset: 480)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2562, file: !2560, line: 131, baseType: !2590, size: 64, offset: 512)
!2590 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2560, line: 75, baseType: !2591)
!2591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2592, size: 64)
!2592 = !DISubroutineType(types: !2593)
!2593 = !{!1739, !2221, !2221}
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2562, file: !2560, line: 132, baseType: !2595, size: 64, offset: 576)
!2595 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2560, line: 78, baseType: !2579)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2562, file: !2560, line: 135, baseType: !1739, size: 64, offset: 640)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2562, file: !2560, line: 136, baseType: !2598, size: 64, offset: 704)
!2598 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2560, line: 82, baseType: !2599)
!2599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2600, size: 64)
!2600 = !DISubroutineType(types: !2601)
!2601 = !{!1739, !1739, !2221, !2221}
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2562, file: !2560, line: 137, baseType: !2603, size: 64, offset: 768)
!2603 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2560, line: 83, baseType: !2604)
!2604 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2605, size: 64)
!2605 = !DISubroutineType(types: !2606)
!2606 = !{null, !1739, !1739}
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2562, file: !2560, line: 141, baseType: !7, size: 32, offset: 832)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2556, file: !851, line: 48, baseType: !2609, size: 64, offset: 64)
!2609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2610, size: 64)
!2610 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !742, line: 35, baseType: !2611)
!2611 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !742, line: 35, size: 128, elements: !2612)
!2612 = !{!2613}
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2611, file: !742, line: 35, baseType: !2614, size: 128)
!2614 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !742, line: 33, baseType: !2615)
!2615 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !742, line: 33, size: 128, elements: !2616)
!2616 = !{!2617, !2618, !2619}
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2615, file: !742, line: 33, baseType: !7, size: 32)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2615, file: !742, line: 33, baseType: !7, size: 32, offset: 32)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2615, file: !742, line: 33, baseType: !2620, size: 64, offset: 64)
!2620 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2076, size: 64, elements: !1847)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2556, file: !851, line: 51, baseType: !2622, size: 64, offset: 128)
!2622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2623, size: 64)
!2623 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2624)
!2624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2625)
!2625 = !{!2626}
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2624, file: !135, line: 183, baseType: !2627, size: 128)
!2627 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2628)
!2628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2629)
!2629 = !{!2630, !2631, !2632}
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2628, file: !135, line: 182, baseType: !7, size: 32)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2628, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2628, file: !135, line: 182, baseType: !2129, size: 64, offset: 64)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2556, file: !851, line: 54, baseType: !1747, size: 64, offset: 192)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2556, file: !851, line: 57, baseType: !2635, size: 128, offset: 256)
!2635 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2636, line: 31, size: 128, elements: !2637)
!2636 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2637 = !{!2638, !2639, !2640, !2641, !2642, !2643, !2644}
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2635, file: !2636, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2635, file: !2636, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2635, file: !2636, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2635, file: !2636, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2635, file: !2636, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2635, file: !2636, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2635, file: !2636, line: 56, baseType: !2645, size: 64, offset: 64)
!2645 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1748, line: 47, baseType: !1978)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2556, file: !851, line: 60, baseType: !2635, size: 128, offset: 384)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2556, file: !851, line: 64, baseType: !2648, size: 64, offset: 512)
!2648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2649, size: 64)
!2649 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2650, line: 33, flags: DIFlagFwdDecl)
!2650 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2556, file: !851, line: 67, baseType: !1747, size: 64, offset: 576)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2556, file: !851, line: 73, baseType: !2559, size: 64, offset: 640)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2556, file: !851, line: 77, baseType: !2645, size: 64, offset: 704)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2556, file: !851, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2556, file: !851, line: 82, baseType: !2656, size: 320, offset: 832)
!2656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !781, line: 62, size: 320, elements: !2657)
!2657 = !{!2658, !2664, !2665, !2666, !2667, !2668}
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2656, file: !781, line: 63, baseType: !2659, size: 64)
!2659 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2660, size: 64)
!2660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !781, line: 56, size: 128, elements: !2661)
!2661 = !{!2662, !2663}
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2660, file: !781, line: 57, baseType: !2659, size: 64)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2660, file: !781, line: 58, baseType: !1845, size: 8, offset: 64)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2656, file: !781, line: 64, baseType: !7, size: 32, offset: 64)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2656, file: !781, line: 66, baseType: !7, size: 32, offset: 96)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2656, file: !781, line: 68, baseType: !1866, size: 8, offset: 128)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2656, file: !781, line: 70, baseType: !2105, size: 64, offset: 192)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2656, file: !781, line: 71, baseType: !2112, size: 64, offset: 256)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2516, file: !2517, line: 476, baseType: !2670, size: 64, offset: 256)
!2670 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2671, size: 64)
!2671 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !330, line: 187, size: 256, elements: !2672)
!2672 = !{!2673, !2674, !2675, !2676}
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2671, file: !330, line: 189, baseType: !1740, size: 32)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !2671, file: !330, line: 192, baseType: !2306, size: 64, offset: 64)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2671, file: !330, line: 197, baseType: !2559, size: 64, offset: 128)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !2671, file: !330, line: 200, baseType: !2291, size: 64, offset: 192)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2516, file: !2517, line: 479, baseType: !2559, size: 64, offset: 320)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2516, file: !2517, line: 484, baseType: !1747, size: 64, offset: 384)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2516, file: !2517, line: 488, baseType: !1747, size: 64, offset: 448)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2516, file: !2517, line: 493, baseType: !1747, size: 64, offset: 512)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2516, file: !2517, line: 496, baseType: !1747, size: 64, offset: 576)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2516, file: !2517, line: 501, baseType: !2683, size: 64, offset: 640)
!2683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2684, size: 64)
!2684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !354, line: 2355, size: 576, elements: !2685)
!2685 = !{!2686, !2689, !2690, !2691, !2692, !2694, !2695, !2700, !2701, !2702, !2703, !2704, !2705}
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2684, file: !354, line: 2356, baseType: !2687, size: 64)
!2687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2688, size: 64)
!2688 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !354, line: 2356, flags: DIFlagFwdDecl)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2684, file: !354, line: 2357, baseType: !1950, size: 64, offset: 64)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2684, file: !354, line: 2358, baseType: !1740, size: 32, offset: 128)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2684, file: !354, line: 2359, baseType: !1740, size: 32, offset: 160)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2684, file: !354, line: 2360, baseType: !2693, size: 128, offset: 192)
!2693 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1740, size: 128, elements: !2019)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2684, file: !354, line: 2364, baseType: !1740, size: 32, offset: 320)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2684, file: !354, line: 2367, baseType: !2696, size: 128, offset: 384)
!2696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !354, line: 2349, size: 128, elements: !2697)
!2697 = !{!2698, !2699}
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2696, file: !354, line: 2351, baseType: !1924, size: 64)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2696, file: !354, line: 2352, baseType: !1803, size: 64, offset: 64)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2684, file: !354, line: 2371, baseType: !353, size: 32, offset: 512)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2684, file: !354, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2684, file: !354, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2684, file: !354, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2684, file: !354, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2684, file: !354, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2516, file: !2517, line: 504, baseType: !2707, size: 64, offset: 704)
!2707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2708, size: 64)
!2708 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2517, line: 504, flags: DIFlagFwdDecl)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2516, file: !2517, line: 507, baseType: !2559, size: 64, offset: 768)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2516, file: !2517, line: 510, baseType: !1740, size: 32, offset: 832)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2516, file: !2517, line: 513, baseType: !1740, size: 32, offset: 864)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2516, file: !2517, line: 516, baseType: !1874, size: 32, offset: 896)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2516, file: !2517, line: 519, baseType: !1874, size: 32, offset: 928)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2516, file: !2517, line: 522, baseType: !7, size: 32, offset: 960)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2516, file: !2517, line: 523, baseType: !7, size: 32, offset: 992)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2516, file: !2517, line: 528, baseType: !1950, size: 64, offset: 1024)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2516, file: !2517, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2516, file: !2517, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2516, file: !2517, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2516, file: !2517, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2516, file: !2517, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2516, file: !2517, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2516, file: !2517, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2516, file: !2517, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2516, file: !2517, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2516, file: !2517, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2516, file: !2517, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2516, file: !2517, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2516, file: !2517, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2516, file: !2517, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2516, file: !2517, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2516, file: !2517, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2511, file: !135, line: 3254, baseType: !1747, size: 64, offset: 1536)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2511, file: !135, line: 3257, baseType: !1747, size: 64, offset: 1600)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2511, file: !135, line: 3258, baseType: !1747, size: 64, offset: 1664)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2511, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2511, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2511, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2511, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2511, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2511, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2511, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2511, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2511, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2511, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2511, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2511, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2511, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2511, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2511, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2511, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2511, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2511, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1750, file: !135, line: 3394, baseType: !2755, size: 1344)
!2755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2756)
!2756 = !{!2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798}
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2755, file: !135, line: 2280, baseType: !1786, size: 192)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2755, file: !135, line: 2281, baseType: !1747, size: 64, offset: 192)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2755, file: !135, line: 2282, baseType: !1747, size: 64, offset: 256)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2755, file: !135, line: 2283, baseType: !1747, size: 64, offset: 320)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2755, file: !135, line: 2284, baseType: !1747, size: 64, offset: 384)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2755, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2755, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2755, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2755, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2755, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2755, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2755, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2755, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2755, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2755, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2755, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2755, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2755, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2755, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2755, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2755, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2755, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2755, file: !135, line: 2306, baseType: !2385, size: 32, offset: 544)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2755, file: !135, line: 2307, baseType: !1747, size: 64, offset: 576)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2755, file: !135, line: 2308, baseType: !1747, size: 64, offset: 640)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2755, file: !135, line: 2314, baseType: !2783, size: 64, offset: 704)
!2783 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2784)
!2784 = !{!2785, !2786, !2787}
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2783, file: !135, line: 2310, baseType: !1740, size: 32)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2783, file: !135, line: 2311, baseType: !1950, size: 64)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2783, file: !135, line: 2312, baseType: !2788, size: 64)
!2788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2789, size: 64)
!2789 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2755, file: !135, line: 2315, baseType: !1747, size: 64, offset: 768)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2755, file: !135, line: 2316, baseType: !1747, size: 64, offset: 832)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2755, file: !135, line: 2317, baseType: !1747, size: 64, offset: 896)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2755, file: !135, line: 2318, baseType: !1747, size: 64, offset: 960)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2755, file: !135, line: 2319, baseType: !1747, size: 64, offset: 1024)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2755, file: !135, line: 2320, baseType: !1747, size: 64, offset: 1088)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2755, file: !135, line: 2321, baseType: !1747, size: 64, offset: 1152)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2755, file: !135, line: 2322, baseType: !1747, size: 64, offset: 1216)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2755, file: !135, line: 2324, baseType: !2799, size: 64, offset: 1280)
!2799 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2800, size: 64)
!2800 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1750, file: !135, line: 3395, baseType: !2802, size: 320)
!2802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2803)
!2803 = !{!2804, !2805, !2806}
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2802, file: !135, line: 1470, baseType: !1786, size: 192)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2802, file: !135, line: 1471, baseType: !1747, size: 64, offset: 192)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2802, file: !135, line: 1472, baseType: !1747, size: 64, offset: 256)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1750, file: !135, line: 3396, baseType: !2808, size: 320)
!2808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2809)
!2809 = !{!2810, !2811, !2812}
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2808, file: !135, line: 1483, baseType: !1786, size: 192)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2808, file: !135, line: 1484, baseType: !1740, size: 32, offset: 192)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2808, file: !135, line: 1485, baseType: !2129, size: 64, offset: 256)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1750, file: !135, line: 3397, baseType: !2814, size: 384)
!2814 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2815)
!2815 = !{!2816, !2817, !2818, !2819}
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2814, file: !135, line: 1830, baseType: !1786, size: 192)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2814, file: !135, line: 1831, baseType: !1874, size: 32, offset: 192)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2814, file: !135, line: 1832, baseType: !1747, size: 64, offset: 256)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2814, file: !135, line: 1835, baseType: !2129, size: 64, offset: 320)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1750, file: !135, line: 3398, baseType: !2821, size: 704)
!2821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2822)
!2822 = !{!2823, !2824, !2825, !2826, !2827, !2832}
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2821, file: !135, line: 1899, baseType: !1786, size: 192)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2821, file: !135, line: 1902, baseType: !1747, size: 64, offset: 192)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2821, file: !135, line: 1905, baseType: !2076, size: 64, offset: 256)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2821, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2821, file: !135, line: 1911, baseType: !2828, size: 64, offset: 384)
!2828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2829, size: 64)
!2829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !851, line: 117, size: 128, elements: !2830)
!2830 = !{!2831}
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2829, file: !851, line: 120, baseType: !2635, size: 128)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2821, file: !135, line: 1914, baseType: !2117, size: 256, offset: 448)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1750, file: !135, line: 3399, baseType: !2834, size: 704)
!2834 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2835)
!2835 = !{!2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846}
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2834, file: !135, line: 2009, baseType: !1786, size: 192)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2834, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2834, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2834, file: !135, line: 2014, baseType: !1874, size: 32, offset: 224)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2834, file: !135, line: 2016, baseType: !1747, size: 64, offset: 256)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2834, file: !135, line: 2017, baseType: !2622, size: 64, offset: 320)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2834, file: !135, line: 2019, baseType: !1747, size: 64, offset: 384)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2834, file: !135, line: 2020, baseType: !1747, size: 64, offset: 448)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2834, file: !135, line: 2021, baseType: !1747, size: 64, offset: 512)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2834, file: !135, line: 2022, baseType: !1747, size: 64, offset: 576)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2834, file: !135, line: 2023, baseType: !1747, size: 64, offset: 640)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1750, file: !135, line: 3400, baseType: !2848, size: 832)
!2848 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2849)
!2849 = !{!2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859}
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2848, file: !135, line: 2431, baseType: !1786, size: 192)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2848, file: !135, line: 2433, baseType: !1747, size: 64, offset: 192)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2848, file: !135, line: 2434, baseType: !1747, size: 64, offset: 256)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2848, file: !135, line: 2435, baseType: !1747, size: 64, offset: 320)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2848, file: !135, line: 2436, baseType: !1747, size: 64, offset: 384)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2848, file: !135, line: 2437, baseType: !2622, size: 64, offset: 448)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2848, file: !135, line: 2438, baseType: !1747, size: 64, offset: 512)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2848, file: !135, line: 2440, baseType: !1747, size: 64, offset: 576)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2848, file: !135, line: 2441, baseType: !1747, size: 64, offset: 640)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2848, file: !135, line: 2443, baseType: !2860, size: 128, offset: 704)
!2860 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2861)
!2861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2862)
!2862 = !{!2863}
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2861, file: !135, line: 182, baseType: !2627, size: 128)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1750, file: !135, line: 3401, baseType: !2865, size: 320)
!2865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2866)
!2866 = !{!2867, !2868, !2875}
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2865, file: !135, line: 3329, baseType: !1786, size: 192)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2865, file: !135, line: 3330, baseType: !2869, size: 64, offset: 192)
!2869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2870, size: 64)
!2870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2871)
!2871 = !{!2872, !2873, !2874}
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2870, file: !135, line: 3322, baseType: !2869, size: 64)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2870, file: !135, line: 3323, baseType: !2869, size: 64, offset: 64)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2870, file: !135, line: 3324, baseType: !1747, size: 64, offset: 128)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2865, file: !135, line: 3331, baseType: !2869, size: 64, offset: 256)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1750, file: !135, line: 3402, baseType: !2877, size: 256)
!2877 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2878)
!2878 = !{!2879, !2880}
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2877, file: !135, line: 1541, baseType: !1786, size: 192)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2877, file: !135, line: 1542, baseType: !2881, size: 64, offset: 192)
!2881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2882, size: 64)
!2882 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2883)
!2883 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2884)
!2884 = !{!2885}
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2883, file: !135, line: 1538, baseType: !2886, size: 192)
!2886 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2887)
!2887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2888)
!2888 = !{!2889, !2890, !2891}
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2887, file: !135, line: 1537, baseType: !7, size: 32)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2887, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2887, file: !135, line: 1537, baseType: !2892, size: 128, offset: 64)
!2892 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2893, size: 128, elements: !1847)
!2893 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2894)
!2894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2895)
!2895 = !{!2896, !2897}
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2894, file: !135, line: 1533, baseType: !1747, size: 64)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2894, file: !135, line: 1534, baseType: !1747, size: 64, offset: 64)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1750, file: !135, line: 3403, baseType: !2899, size: 512)
!2899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2900)
!2900 = !{!2901, !2902, !2903, !2904, !2910, !2911, !2912}
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2899, file: !135, line: 1939, baseType: !1786, size: 192)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2899, file: !135, line: 1940, baseType: !1874, size: 32, offset: 192)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2899, file: !135, line: 1941, baseType: !358, size: 32, offset: 224)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2899, file: !135, line: 1946, baseType: !2905, size: 32, offset: 256)
!2905 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2906)
!2906 = !{!2907, !2908, !2909}
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2905, file: !135, line: 1943, baseType: !376, size: 32)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2905, file: !135, line: 1944, baseType: !383, size: 32)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2905, file: !135, line: 1945, baseType: !134, size: 32)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2899, file: !135, line: 1950, baseType: !2066, size: 64, offset: 320)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2899, file: !135, line: 1951, baseType: !2066, size: 64, offset: 384)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2899, file: !135, line: 1953, baseType: !2129, size: 64, offset: 448)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1750, file: !135, line: 3404, baseType: !2914, size: 1664)
!2914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2915)
!2915 = !{!2916, !2917}
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2914, file: !135, line: 3338, baseType: !1786, size: 192)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2914, file: !135, line: 3341, baseType: !2918, size: 1472, offset: 192)
!2918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !865, line: 410, size: 1472, elements: !2919)
!2919 = !{!2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083}
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2918, file: !865, line: 412, baseType: !1740, size: 32)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2918, file: !865, line: 413, baseType: !1740, size: 32, offset: 32)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2918, file: !865, line: 414, baseType: !1740, size: 32, offset: 64)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2918, file: !865, line: 415, baseType: !1740, size: 32, offset: 96)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2918, file: !865, line: 416, baseType: !1740, size: 32, offset: 128)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2918, file: !865, line: 417, baseType: !1740, size: 32, offset: 160)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2918, file: !865, line: 418, baseType: !1866, size: 8, offset: 192)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2918, file: !865, line: 419, baseType: !1866, size: 8, offset: 200)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2918, file: !865, line: 420, baseType: !2929, size: 8, offset: 208)
!2929 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2918, file: !865, line: 421, baseType: !2929, size: 8, offset: 216)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2918, file: !865, line: 422, baseType: !2929, size: 8, offset: 224)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2918, file: !865, line: 423, baseType: !2929, size: 8, offset: 232)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2918, file: !865, line: 424, baseType: !2929, size: 8, offset: 240)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2918, file: !865, line: 425, baseType: !2929, size: 8, offset: 248)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2918, file: !865, line: 426, baseType: !2929, size: 8, offset: 256)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2918, file: !865, line: 427, baseType: !2929, size: 8, offset: 264)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2918, file: !865, line: 428, baseType: !2929, size: 8, offset: 272)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2918, file: !865, line: 429, baseType: !2929, size: 8, offset: 280)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2918, file: !865, line: 430, baseType: !2929, size: 8, offset: 288)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2918, file: !865, line: 431, baseType: !2929, size: 8, offset: 296)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2918, file: !865, line: 432, baseType: !2929, size: 8, offset: 304)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2918, file: !865, line: 433, baseType: !2929, size: 8, offset: 312)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2918, file: !865, line: 434, baseType: !2929, size: 8, offset: 320)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2918, file: !865, line: 435, baseType: !2929, size: 8, offset: 328)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2918, file: !865, line: 436, baseType: !2929, size: 8, offset: 336)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2918, file: !865, line: 437, baseType: !2929, size: 8, offset: 344)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2918, file: !865, line: 438, baseType: !2929, size: 8, offset: 352)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2918, file: !865, line: 439, baseType: !2929, size: 8, offset: 360)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2918, file: !865, line: 440, baseType: !2929, size: 8, offset: 368)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2918, file: !865, line: 441, baseType: !2929, size: 8, offset: 376)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2918, file: !865, line: 442, baseType: !2929, size: 8, offset: 384)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2918, file: !865, line: 443, baseType: !2929, size: 8, offset: 392)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2918, file: !865, line: 444, baseType: !2929, size: 8, offset: 400)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2918, file: !865, line: 445, baseType: !2929, size: 8, offset: 408)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2918, file: !865, line: 446, baseType: !2929, size: 8, offset: 416)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2918, file: !865, line: 447, baseType: !2929, size: 8, offset: 424)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2918, file: !865, line: 448, baseType: !2929, size: 8, offset: 432)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2918, file: !865, line: 449, baseType: !2929, size: 8, offset: 440)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2918, file: !865, line: 450, baseType: !2929, size: 8, offset: 448)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2918, file: !865, line: 451, baseType: !2929, size: 8, offset: 456)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2918, file: !865, line: 452, baseType: !2929, size: 8, offset: 464)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2918, file: !865, line: 453, baseType: !2929, size: 8, offset: 472)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2918, file: !865, line: 454, baseType: !2929, size: 8, offset: 480)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2918, file: !865, line: 455, baseType: !2929, size: 8, offset: 488)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2918, file: !865, line: 456, baseType: !2929, size: 8, offset: 496)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2918, file: !865, line: 457, baseType: !2929, size: 8, offset: 504)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2918, file: !865, line: 458, baseType: !2929, size: 8, offset: 512)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2918, file: !865, line: 459, baseType: !2929, size: 8, offset: 520)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2918, file: !865, line: 460, baseType: !2929, size: 8, offset: 528)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2918, file: !865, line: 461, baseType: !2929, size: 8, offset: 536)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2918, file: !865, line: 462, baseType: !2929, size: 8, offset: 544)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2918, file: !865, line: 463, baseType: !2929, size: 8, offset: 552)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2918, file: !865, line: 464, baseType: !2929, size: 8, offset: 560)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2918, file: !865, line: 465, baseType: !2929, size: 8, offset: 568)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2918, file: !865, line: 466, baseType: !2929, size: 8, offset: 576)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2918, file: !865, line: 467, baseType: !2929, size: 8, offset: 584)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2918, file: !865, line: 468, baseType: !2929, size: 8, offset: 592)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2918, file: !865, line: 469, baseType: !2929, size: 8, offset: 600)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2918, file: !865, line: 470, baseType: !2929, size: 8, offset: 608)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2918, file: !865, line: 471, baseType: !2929, size: 8, offset: 616)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2918, file: !865, line: 472, baseType: !2929, size: 8, offset: 624)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2918, file: !865, line: 473, baseType: !2929, size: 8, offset: 632)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2918, file: !865, line: 474, baseType: !2929, size: 8, offset: 640)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2918, file: !865, line: 475, baseType: !2929, size: 8, offset: 648)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2918, file: !865, line: 476, baseType: !2929, size: 8, offset: 656)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2918, file: !865, line: 477, baseType: !2929, size: 8, offset: 664)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2918, file: !865, line: 478, baseType: !2929, size: 8, offset: 672)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2918, file: !865, line: 479, baseType: !2929, size: 8, offset: 680)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2918, file: !865, line: 480, baseType: !2929, size: 8, offset: 688)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2918, file: !865, line: 481, baseType: !2929, size: 8, offset: 696)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2918, file: !865, line: 482, baseType: !2929, size: 8, offset: 704)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2918, file: !865, line: 483, baseType: !2929, size: 8, offset: 712)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2918, file: !865, line: 484, baseType: !2929, size: 8, offset: 720)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2918, file: !865, line: 485, baseType: !2929, size: 8, offset: 728)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2918, file: !865, line: 486, baseType: !2929, size: 8, offset: 736)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2918, file: !865, line: 487, baseType: !2929, size: 8, offset: 744)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2918, file: !865, line: 488, baseType: !2929, size: 8, offset: 752)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2918, file: !865, line: 489, baseType: !2929, size: 8, offset: 760)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2918, file: !865, line: 490, baseType: !2929, size: 8, offset: 768)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2918, file: !865, line: 491, baseType: !2929, size: 8, offset: 776)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2918, file: !865, line: 492, baseType: !2929, size: 8, offset: 784)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2918, file: !865, line: 493, baseType: !2929, size: 8, offset: 792)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2918, file: !865, line: 494, baseType: !2929, size: 8, offset: 800)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2918, file: !865, line: 495, baseType: !2929, size: 8, offset: 808)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2918, file: !865, line: 496, baseType: !2929, size: 8, offset: 816)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2918, file: !865, line: 497, baseType: !2929, size: 8, offset: 824)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2918, file: !865, line: 498, baseType: !2929, size: 8, offset: 832)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2918, file: !865, line: 499, baseType: !2929, size: 8, offset: 840)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2918, file: !865, line: 500, baseType: !2929, size: 8, offset: 848)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2918, file: !865, line: 501, baseType: !2929, size: 8, offset: 856)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2918, file: !865, line: 502, baseType: !2929, size: 8, offset: 864)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2918, file: !865, line: 503, baseType: !2929, size: 8, offset: 872)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2918, file: !865, line: 504, baseType: !2929, size: 8, offset: 880)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2918, file: !865, line: 505, baseType: !2929, size: 8, offset: 888)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2918, file: !865, line: 506, baseType: !2929, size: 8, offset: 896)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2918, file: !865, line: 507, baseType: !2929, size: 8, offset: 904)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2918, file: !865, line: 508, baseType: !2929, size: 8, offset: 912)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2918, file: !865, line: 509, baseType: !2929, size: 8, offset: 920)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2918, file: !865, line: 510, baseType: !2929, size: 8, offset: 928)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2918, file: !865, line: 511, baseType: !2929, size: 8, offset: 936)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2918, file: !865, line: 512, baseType: !2929, size: 8, offset: 944)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2918, file: !865, line: 513, baseType: !2929, size: 8, offset: 952)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2918, file: !865, line: 514, baseType: !2929, size: 8, offset: 960)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2918, file: !865, line: 515, baseType: !2929, size: 8, offset: 968)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2918, file: !865, line: 516, baseType: !2929, size: 8, offset: 976)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2918, file: !865, line: 517, baseType: !2929, size: 8, offset: 984)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2918, file: !865, line: 518, baseType: !2929, size: 8, offset: 992)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2918, file: !865, line: 519, baseType: !2929, size: 8, offset: 1000)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2918, file: !865, line: 520, baseType: !2929, size: 8, offset: 1008)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2918, file: !865, line: 521, baseType: !2929, size: 8, offset: 1016)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2918, file: !865, line: 522, baseType: !2929, size: 8, offset: 1024)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2918, file: !865, line: 523, baseType: !2929, size: 8, offset: 1032)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2918, file: !865, line: 524, baseType: !2929, size: 8, offset: 1040)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2918, file: !865, line: 525, baseType: !2929, size: 8, offset: 1048)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2918, file: !865, line: 526, baseType: !2929, size: 8, offset: 1056)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2918, file: !865, line: 527, baseType: !2929, size: 8, offset: 1064)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2918, file: !865, line: 528, baseType: !2929, size: 8, offset: 1072)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2918, file: !865, line: 529, baseType: !2929, size: 8, offset: 1080)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2918, file: !865, line: 530, baseType: !2929, size: 8, offset: 1088)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2918, file: !865, line: 531, baseType: !2929, size: 8, offset: 1096)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2918, file: !865, line: 532, baseType: !2929, size: 8, offset: 1104)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2918, file: !865, line: 533, baseType: !2929, size: 8, offset: 1112)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2918, file: !865, line: 534, baseType: !2929, size: 8, offset: 1120)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2918, file: !865, line: 535, baseType: !2929, size: 8, offset: 1128)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2918, file: !865, line: 536, baseType: !2929, size: 8, offset: 1136)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2918, file: !865, line: 537, baseType: !2929, size: 8, offset: 1144)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2918, file: !865, line: 538, baseType: !2929, size: 8, offset: 1152)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2918, file: !865, line: 539, baseType: !2929, size: 8, offset: 1160)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2918, file: !865, line: 540, baseType: !2929, size: 8, offset: 1168)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2918, file: !865, line: 541, baseType: !2929, size: 8, offset: 1176)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2918, file: !865, line: 542, baseType: !2929, size: 8, offset: 1184)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2918, file: !865, line: 543, baseType: !2929, size: 8, offset: 1192)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2918, file: !865, line: 544, baseType: !2929, size: 8, offset: 1200)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2918, file: !865, line: 545, baseType: !2929, size: 8, offset: 1208)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2918, file: !865, line: 546, baseType: !2929, size: 8, offset: 1216)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2918, file: !865, line: 547, baseType: !2929, size: 8, offset: 1224)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2918, file: !865, line: 548, baseType: !2929, size: 8, offset: 1232)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2918, file: !865, line: 549, baseType: !2929, size: 8, offset: 1240)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2918, file: !865, line: 550, baseType: !2929, size: 8, offset: 1248)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2918, file: !865, line: 551, baseType: !2929, size: 8, offset: 1256)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2918, file: !865, line: 552, baseType: !2929, size: 8, offset: 1264)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2918, file: !865, line: 553, baseType: !2929, size: 8, offset: 1272)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2918, file: !865, line: 554, baseType: !2929, size: 8, offset: 1280)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2918, file: !865, line: 555, baseType: !2929, size: 8, offset: 1288)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2918, file: !865, line: 556, baseType: !2929, size: 8, offset: 1296)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2918, file: !865, line: 557, baseType: !2929, size: 8, offset: 1304)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2918, file: !865, line: 558, baseType: !2929, size: 8, offset: 1312)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2918, file: !865, line: 559, baseType: !2929, size: 8, offset: 1320)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2918, file: !865, line: 560, baseType: !2929, size: 8, offset: 1328)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2918, file: !865, line: 561, baseType: !2929, size: 8, offset: 1336)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2918, file: !865, line: 562, baseType: !2929, size: 8, offset: 1344)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2918, file: !865, line: 563, baseType: !2929, size: 8, offset: 1352)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2918, file: !865, line: 564, baseType: !2929, size: 8, offset: 1360)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2918, file: !865, line: 565, baseType: !2929, size: 8, offset: 1368)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2918, file: !865, line: 566, baseType: !2929, size: 8, offset: 1376)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2918, file: !865, line: 567, baseType: !2929, size: 8, offset: 1384)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2918, file: !865, line: 568, baseType: !2929, size: 8, offset: 1392)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2918, file: !865, line: 569, baseType: !2929, size: 8, offset: 1400)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2918, file: !865, line: 570, baseType: !2929, size: 8, offset: 1408)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2918, file: !865, line: 571, baseType: !2929, size: 8, offset: 1416)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2918, file: !865, line: 572, baseType: !2929, size: 8, offset: 1424)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2918, file: !865, line: 573, baseType: !2929, size: 8, offset: 1432)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2918, file: !865, line: 574, baseType: !2929, size: 8, offset: 1440)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1750, file: !135, line: 3405, baseType: !3085, size: 384)
!3085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !3086)
!3086 = !{!3087, !3088}
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3085, file: !135, line: 3353, baseType: !1786, size: 192)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3085, file: !135, line: 3356, baseType: !3089, size: 192, offset: 192)
!3089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !865, line: 578, size: 192, elements: !3090)
!3090 = !{!3091, !3092, !3093, !3094, !3095, !3096, !3097, !3098, !3099, !3100, !3101}
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3089, file: !865, line: 580, baseType: !1740, size: 32)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3089, file: !865, line: 581, baseType: !1740, size: 32, offset: 32)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3089, file: !865, line: 582, baseType: !1740, size: 32, offset: 64)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3089, file: !865, line: 583, baseType: !1740, size: 32, offset: 96)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3089, file: !865, line: 584, baseType: !1866, size: 8, offset: 128)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3089, file: !865, line: 585, baseType: !1866, size: 8, offset: 136)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3089, file: !865, line: 586, baseType: !1866, size: 8, offset: 144)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3089, file: !865, line: 587, baseType: !1866, size: 8, offset: 152)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3089, file: !865, line: 588, baseType: !1866, size: 8, offset: 160)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3089, file: !865, line: 589, baseType: !1866, size: 8, offset: 168)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3089, file: !865, line: 590, baseType: !1866, size: 8, offset: 176)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !1743, file: !391, line: 100, baseType: !1747, size: 64, offset: 128)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "equiv", scope: !1743, file: !391, line: 104, baseType: !2645, size: 64, offset: 192)
!3104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3105, size: 64)
!3105 = !DIDerivedType(tag: DW_TAG_typedef, name: "assert_locus_t", file: !3, line: 94, baseType: !3106)
!3106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3107, size: 64)
!3107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "assert_locus_d", file: !3, line: 69, size: 576, elements: !3108)
!3108 = !{!3109, !3110, !3111, !3118, !3119, !3120, !3121}
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3107, file: !3, line: 72, baseType: !2527, size: 64)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !3107, file: !3, line: 76, baseType: !2056, size: 64, offset: 64)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "si", scope: !3107, file: !3, line: 79, baseType: !3112, size: 192, offset: 128)
!3112 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !742, line: 265, baseType: !3113)
!3113 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !742, line: 254, size: 192, elements: !3114)
!3114 = !{!3115, !3116, !3117}
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3113, file: !742, line: 257, baseType: !2071, size: 64)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3113, file: !742, line: 263, baseType: !2066, size: 64, offset: 64)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3113, file: !742, line: 264, baseType: !2527, size: 64, offset: 128)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "comp_code", scope: !3107, file: !3, line: 82, baseType: !134, size: 32, offset: 320)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3107, file: !3, line: 85, baseType: !1747, size: 64, offset: 384)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3107, file: !3, line: 88, baseType: !1747, size: 64, offset: 448)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3107, file: !3, line: 91, baseType: !3106, size: 64, offset: 512)
!3122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1740, size: 64)
!3123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3124, size: 64)
!3124 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !3125, line: 45, baseType: !3126)
!3125 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3127, size: 64)
!3127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !3125, line: 39, size: 192, elements: !3128)
!3128 = !{!3129, !3131, !3132, !3133}
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !3127, file: !3125, line: 41, baseType: !3130, size: 64)
!3130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1866, size: 64)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !3127, file: !3125, line: 42, baseType: !7, size: 32, offset: 64)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3127, file: !3125, line: 43, baseType: !7, size: 32, offset: 96)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !3127, file: !3125, line: 44, baseType: !3134, size: 64, offset: 128)
!3134 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1801, size: 64, elements: !1847)
!3135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3136, size: 64)
!3136 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2078)
!3137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3138, size: 64)
!3138 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3139)
!3139 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1748, line: 59, baseType: !3140)
!3140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3141, size: 64)
!3141 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1750)
!3142 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !781, line: 30, baseType: !3143)
!3143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3144, size: 64)
!3144 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !2117)
!3145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3146, size: 64)
!3146 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !343, line: 152, baseType: !3147)
!3147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !343, line: 152, size: 128, elements: !3148)
!3148 = !{!3149}
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3147, file: !343, line: 152, baseType: !2049, size: 128)
!3150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3151, size: 64)
!3151 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_switch_update_heap", file: !3, line: 121, baseType: !3152)
!3152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_switch_update_heap", file: !3, line: 121, size: 192, elements: !3153)
!3153 = !{!3154}
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3152, file: !3, line: 121, baseType: !3155, size: 192)
!3155 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_switch_update_base", file: !3, line: 120, baseType: !3156)
!3156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_switch_update_base", file: !3, line: 120, size: 192, elements: !3157)
!3157 = !{!3158, !3159, !3160}
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3156, file: !3, line: 120, baseType: !7, size: 32)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3156, file: !3, line: 120, baseType: !7, size: 32, offset: 32)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3156, file: !3, line: 120, baseType: !3161, size: 128, offset: 64)
!3161 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3162, size: 128, elements: !1847)
!3162 = !DIDerivedType(tag: DW_TAG_typedef, name: "switch_update", file: !3, line: 117, baseType: !3163)
!3163 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 114, size: 128, elements: !3164)
!3164 = !{!3165, !3166}
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3163, file: !3, line: 115, baseType: !2076, size: 64)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3163, file: !3, line: 116, baseType: !1747, size: 64, offset: 64)
!3167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1741, size: 64)
!3168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3169, size: 64)
!3169 = !DIDerivedType(tag: DW_TAG_typedef, name: "prop_value_t", file: !391, line: 74, baseType: !3170)
!3170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "prop_value_d", file: !391, line: 64, size: 128, elements: !3171)
!3171 = !{!3172, !3173}
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "lattice_val", scope: !3170, file: !391, line: 68, baseType: !7, size: 32)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3170, file: !391, line: 71, baseType: !1747, size: 64, offset: 64)
!3174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3175, size: 64)
!3175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_stmt_info", file: !742, line: 4652, size: 448, elements: !3176)
!3176 = !{!3177, !3178, !3179, !3182, !3183, !3184, !3185, !3186}
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "gsi", scope: !3175, file: !742, line: 4655, baseType: !3112, size: 192)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !3175, file: !742, line: 4659, baseType: !1739, size: 64, offset: 192)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "pset", scope: !3175, file: !742, line: 4664, baseType: !3180, size: 64, offset: 256)
!3180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3181, size: 64)
!3181 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !135, line: 5199, flags: DIFlagFwdDecl)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "val_only", scope: !3175, file: !742, line: 4678, baseType: !1866, size: 8, offset: 320)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "is_lhs", scope: !3175, file: !742, line: 4681, baseType: !1866, size: 8, offset: 328)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !3175, file: !742, line: 4685, baseType: !1866, size: 8, offset: 336)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "want_locations", scope: !3175, file: !742, line: 4688, baseType: !1866, size: 8, offset: 344)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "callback_result", scope: !3175, file: !742, line: 4694, baseType: !1747, size: 64, offset: 384)
!3187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1874, size: 64)
!3188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3189, size: 64)
!3189 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !3190)
!3190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !3191)
!3191 = !{!3192}
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3190, file: !135, line: 184, baseType: !2627, size: 128)
!3193 = !{!3194, !3222, !3224, !0, !3226, !3228, !3230, !3232, !3234, !3240, !3242, !3244}
!3194 = !DIGlobalVariableExpression(var: !3195, expr: !DIExpression())
!3195 = distinct !DIGlobalVariable(name: "pass_vrp", scope: !2, file: !3, line: 7418, type: !3196, isLocal: false, isDefinition: true)
!3196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !532, line: 156, size: 640, elements: !3197)
!3197 = !{!3198}
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3196, file: !532, line: 158, baseType: !3199, size: 640)
!3199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !532, line: 114, size: 640, elements: !3200)
!3200 = !{!3201, !3202, !3203, !3207, !3211, !3213, !3214, !3215, !3217, !3218, !3219, !3220, !3221}
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3199, file: !532, line: 117, baseType: !531, size: 32)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3199, file: !532, line: 121, baseType: !1950, size: 64, offset: 64)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3199, file: !532, line: 125, baseType: !3204, size: 64, offset: 128)
!3204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3205, size: 64)
!3205 = !DISubroutineType(types: !3206)
!3206 = !{!1866}
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3199, file: !532, line: 130, baseType: !3208, size: 64, offset: 192)
!3208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3209, size: 64)
!3209 = !DISubroutineType(types: !3210)
!3210 = !{!7}
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3199, file: !532, line: 133, baseType: !3212, size: 64, offset: 256)
!3212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3199, size: 64)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3199, file: !532, line: 136, baseType: !3212, size: 64, offset: 320)
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3199, file: !532, line: 139, baseType: !1740, size: 32, offset: 384)
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3199, file: !532, line: 143, baseType: !3216, size: 32, offset: 416)
!3216 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !539, line: 80, baseType: !538)
!3217 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3199, file: !532, line: 146, baseType: !7, size: 32, offset: 448)
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3199, file: !532, line: 147, baseType: !7, size: 32, offset: 480)
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3199, file: !532, line: 148, baseType: !7, size: 32, offset: 512)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3199, file: !532, line: 151, baseType: !7, size: 32, offset: 544)
!3221 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3199, file: !532, line: 152, baseType: !7, size: 32, offset: 576)
!3222 = !DIGlobalVariableExpression(var: !3223, expr: !DIExpression())
!3223 = distinct !DIGlobalVariable(name: "need_assert_for", scope: !2, file: !3, line: 98, type: !2645, isLocal: true, isDefinition: true)
!3224 = !DIGlobalVariableExpression(var: !3225, expr: !DIExpression())
!3225 = distinct !DIGlobalVariable(name: "asserts_for", scope: !2, file: !3, line: 103, type: !3104, isLocal: true, isDefinition: true)
!3226 = !DIGlobalVariableExpression(var: !3227, expr: !DIExpression())
!3227 = distinct !DIGlobalVariable(name: "live", scope: !2, file: !3, line: 45, type: !3123, isLocal: true, isDefinition: true)
!3228 = !DIGlobalVariableExpression(var: !3229, expr: !DIExpression())
!3229 = distinct !DIGlobalVariable(name: "to_remove_edges", scope: !2, file: !3, line: 119, type: !3145, isLocal: true, isDefinition: true)
!3230 = !DIGlobalVariableExpression(var: !3231, expr: !DIExpression())
!3231 = distinct !DIGlobalVariable(name: "to_update_switch_stmts", scope: !2, file: !3, line: 122, type: !3150, isLocal: true, isDefinition: true)
!3232 = !DIGlobalVariableExpression(var: !3233, expr: !DIExpression())
!3233 = distinct !DIGlobalVariable(name: "vr_phi_edge_counts", scope: !2, file: !3, line: 112, type: !3122, isLocal: true, isDefinition: true)
!3234 = !DIGlobalVariableExpression(var: !3235, expr: !DIExpression())
!3235 = distinct !DIGlobalVariable(name: "s_obstack", scope: !3236, file: !3, line: 5524, type: !1999, isLocal: true, isDefinition: true)
!3236 = distinct !DISubprogram(name: "compare_names", scope: !3, file: !3, line: 5516, type: !3237, scopeLine: 5518, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3237 = !DISubroutineType(types: !3238)
!3238 = !{!1747, !134, !1747, !1747, !3130}
!3239 = !{}
!3240 = !DIGlobalVariableExpression(var: !3241, expr: !DIExpression())
!3241 = distinct !DIGlobalVariable(name: "s_e1", scope: !3236, file: !3, line: 5525, type: !2645, isLocal: true, isDefinition: true)
!3242 = !DIGlobalVariableExpression(var: !3243, expr: !DIExpression())
!3243 = distinct !DIGlobalVariable(name: "s_e2", scope: !3236, file: !3, line: 5525, type: !2645, isLocal: true, isDefinition: true)
!3244 = !DIGlobalVariableExpression(var: !3245, expr: !DIExpression())
!3245 = distinct !DIGlobalVariable(name: "stack", scope: !2, file: !3, line: 7087, type: !3188, isLocal: true, isDefinition: true)
!3246 = !{i32 7, !"Dwarf Version", i32 4}
!3247 = !{i32 2, !"Debug Info Version", i32 3}
!3248 = !{i32 1, !"wchar_size", i32 4}
!3249 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3250 = distinct !DISubprogram(name: "ssa_name_nonnegative_p", scope: !3, file: !3, line: 1354, type: !3251, scopeLine: 1355, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3251 = !DISubroutineType(types: !3252)
!3252 = !{!1866, !3139}
!3253 = !DILocalVariable(name: "t", arg: 1, scope: !3250, file: !3, line: 1354, type: !3139)
!3254 = !DILocation(line: 1354, column: 36, scope: !3250)
!3255 = !DILocalVariable(name: "vr", scope: !3250, file: !3, line: 1356, type: !1741)
!3256 = !DILocation(line: 1356, column: 18, scope: !3250)
!3257 = !DILocation(line: 1356, column: 40, scope: !3250)
!3258 = !DILocation(line: 1356, column: 23, scope: !3250)
!3259 = !DILocation(line: 1358, column: 8, scope: !3260)
!3260 = distinct !DILexicalBlock(scope: !3250, file: !3, line: 1358, column: 7)
!3261 = !DILocation(line: 1358, column: 7, scope: !3250)
!3262 = !DILocation(line: 1359, column: 5, scope: !3260)
!3263 = !DILocation(line: 1363, column: 7, scope: !3264)
!3264 = distinct !DILexicalBlock(scope: !3250, file: !3, line: 1363, column: 7)
!3265 = !DILocation(line: 1363, column: 11, scope: !3264)
!3266 = !DILocation(line: 1363, column: 16, scope: !3264)
!3267 = !DILocation(line: 1363, column: 7, scope: !3250)
!3268 = !DILocalVariable(name: "result", scope: !3269, file: !3, line: 1365, type: !1740)
!3269 = distinct !DILexicalBlock(scope: !3264, file: !3, line: 1364, column: 5)
!3270 = !DILocation(line: 1365, column: 11, scope: !3269)
!3271 = !DILocation(line: 1365, column: 36, scope: !3269)
!3272 = !DILocation(line: 1365, column: 40, scope: !3269)
!3273 = !DILocation(line: 1365, column: 45, scope: !3269)
!3274 = !DILocation(line: 1365, column: 20, scope: !3269)
!3275 = !DILocation(line: 1367, column: 15, scope: !3269)
!3276 = !DILocation(line: 1367, column: 22, scope: !3269)
!3277 = !DILocation(line: 1367, column: 27, scope: !3269)
!3278 = !DILocation(line: 1367, column: 30, scope: !3269)
!3279 = !DILocation(line: 1367, column: 37, scope: !3269)
!3280 = !DILocation(line: 1367, column: 14, scope: !3269)
!3281 = !DILocation(line: 1367, column: 7, scope: !3269)
!3282 = !DILocation(line: 1369, column: 3, scope: !3250)
!3283 = !DILocation(line: 1370, column: 1, scope: !3250)
!3284 = distinct !DISubprogram(name: "get_value_range", scope: !3, file: !3, line: 633, type: !3285, scopeLine: 634, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3285 = !DISubroutineType(types: !3286)
!3286 = !{!1741, !3139}
!3287 = !DILocalVariable(name: "var", arg: 1, scope: !3284, file: !3, line: 633, type: !3139)
!3288 = !DILocation(line: 633, column: 29, scope: !3284)
!3289 = !DILocalVariable(name: "vr", scope: !3284, file: !3, line: 635, type: !1741)
!3290 = !DILocation(line: 635, column: 18, scope: !3284)
!3291 = !DILocalVariable(name: "sym", scope: !3284, file: !3, line: 636, type: !1747)
!3292 = !DILocation(line: 636, column: 8, scope: !3284)
!3293 = !DILocalVariable(name: "ver", scope: !3284, file: !3, line: 637, type: !7)
!3294 = !DILocation(line: 637, column: 12, scope: !3284)
!3295 = !DILocation(line: 637, column: 18, scope: !3284)
!3296 = !DILocation(line: 640, column: 9, scope: !3297)
!3297 = distinct !DILexicalBlock(scope: !3284, file: !3, line: 640, column: 7)
!3298 = !DILocation(line: 640, column: 7, scope: !3284)
!3299 = !DILocation(line: 641, column: 5, scope: !3297)
!3300 = !DILocation(line: 643, column: 8, scope: !3284)
!3301 = !DILocation(line: 643, column: 17, scope: !3284)
!3302 = !DILocation(line: 643, column: 6, scope: !3284)
!3303 = !DILocation(line: 644, column: 7, scope: !3304)
!3304 = distinct !DILexicalBlock(scope: !3284, file: !3, line: 644, column: 7)
!3305 = !DILocation(line: 644, column: 7, scope: !3284)
!3306 = !DILocation(line: 645, column: 12, scope: !3304)
!3307 = !DILocation(line: 645, column: 5, scope: !3304)
!3308 = !DILocation(line: 648, column: 24, scope: !3284)
!3309 = !DILocation(line: 648, column: 22, scope: !3284)
!3310 = !DILocation(line: 648, column: 3, scope: !3284)
!3311 = !DILocation(line: 648, column: 12, scope: !3284)
!3312 = !DILocation(line: 648, column: 17, scope: !3284)
!3313 = !DILocation(line: 651, column: 3, scope: !3284)
!3314 = !DILocation(line: 651, column: 7, scope: !3284)
!3315 = !DILocation(line: 651, column: 13, scope: !3284)
!3316 = !DILocation(line: 655, column: 9, scope: !3284)
!3317 = !DILocation(line: 655, column: 7, scope: !3284)
!3318 = !DILocation(line: 656, column: 7, scope: !3319)
!3319 = distinct !DILexicalBlock(scope: !3284, file: !3, line: 656, column: 7)
!3320 = !DILocation(line: 656, column: 7, scope: !3284)
!3321 = !DILocation(line: 661, column: 11, scope: !3322)
!3322 = distinct !DILexicalBlock(scope: !3323, file: !3, line: 661, column: 11)
!3323 = distinct !DILexicalBlock(scope: !3319, file: !3, line: 657, column: 5)
!3324 = !DILocation(line: 661, column: 27, scope: !3322)
!3325 = !DILocation(line: 662, column: 4, scope: !3322)
!3326 = !DILocation(line: 662, column: 7, scope: !3322)
!3327 = !DILocation(line: 663, column: 4, scope: !3322)
!3328 = !DILocation(line: 663, column: 22, scope: !3322)
!3329 = !DILocation(line: 663, column: 7, scope: !3322)
!3330 = !DILocation(line: 661, column: 11, scope: !3323)
!3331 = !DILocation(line: 664, column: 30, scope: !3322)
!3332 = !DILocation(line: 664, column: 34, scope: !3322)
!3333 = !DILocation(line: 664, column: 2, scope: !3322)
!3334 = !DILocation(line: 666, column: 30, scope: !3322)
!3335 = !DILocation(line: 666, column: 2, scope: !3322)
!3336 = !DILocation(line: 667, column: 5, scope: !3323)
!3337 = !DILocation(line: 669, column: 10, scope: !3284)
!3338 = !DILocation(line: 669, column: 3, scope: !3284)
!3339 = !DILocation(line: 670, column: 1, scope: !3284)
!3340 = distinct !DISubprogram(name: "compare_values", scope: !3, file: !3, line: 1254, type: !3341, scopeLine: 1255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3341 = !DISubroutineType(types: !3342)
!3342 = !{!1740, !1747, !1747}
!3343 = !DILocalVariable(name: "val1", arg: 1, scope: !3340, file: !3, line: 1254, type: !1747)
!3344 = !DILocation(line: 1254, column: 22, scope: !3340)
!3345 = !DILocalVariable(name: "val2", arg: 2, scope: !3340, file: !3, line: 1254, type: !1747)
!3346 = !DILocation(line: 1254, column: 33, scope: !3340)
!3347 = !DILocalVariable(name: "sop", scope: !3340, file: !3, line: 1256, type: !1866)
!3348 = !DILocation(line: 1256, column: 8, scope: !3340)
!3349 = !DILocalVariable(name: "ret", scope: !3340, file: !3, line: 1257, type: !1740)
!3350 = !DILocation(line: 1257, column: 7, scope: !3340)
!3351 = !DILocation(line: 1259, column: 7, scope: !3340)
!3352 = !DILocation(line: 1260, column: 31, scope: !3340)
!3353 = !DILocation(line: 1260, column: 37, scope: !3340)
!3354 = !DILocation(line: 1260, column: 9, scope: !3340)
!3355 = !DILocation(line: 1260, column: 7, scope: !3340)
!3356 = !DILocation(line: 1261, column: 7, scope: !3357)
!3357 = distinct !DILexicalBlock(scope: !3340, file: !3, line: 1261, column: 7)
!3358 = !DILocation(line: 1262, column: 7, scope: !3357)
!3359 = !DILocation(line: 1262, column: 37, scope: !3357)
!3360 = !DILocation(line: 1262, column: 12, scope: !3357)
!3361 = !DILocation(line: 1262, column: 43, scope: !3357)
!3362 = !DILocation(line: 1262, column: 72, scope: !3357)
!3363 = !DILocation(line: 1262, column: 47, scope: !3357)
!3364 = !DILocation(line: 1261, column: 7, scope: !3340)
!3365 = !DILocation(line: 1263, column: 9, scope: !3357)
!3366 = !DILocation(line: 1263, column: 5, scope: !3357)
!3367 = !DILocation(line: 1264, column: 10, scope: !3340)
!3368 = !DILocation(line: 1264, column: 3, scope: !3340)
!3369 = distinct !DISubprogram(name: "dump_value_range", scope: !3, file: !3, line: 3640, type: !3370, scopeLine: 3641, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3370 = !DISubroutineType(types: !3371)
!3371 = !{null, !3372, !1741}
!3372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3373, size: 64)
!3373 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3374, line: 7, baseType: !3375)
!3374 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3375 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3376, line: 49, size: 1728, elements: !3377)
!3376 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3377 = !{!3378, !3379, !3380, !3381, !3382, !3383, !3384, !3385, !3386, !3387, !3388, !3389, !3390, !3393, !3395, !3396, !3397, !3400, !3402, !3403, !3404, !3407, !3409, !3412, !3415, !3416, !3417, !3418, !3419}
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3375, file: !3376, line: 51, baseType: !1740, size: 32)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3375, file: !3376, line: 54, baseType: !2015, size: 64, offset: 64)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3375, file: !3376, line: 55, baseType: !2015, size: 64, offset: 128)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3375, file: !3376, line: 56, baseType: !2015, size: 64, offset: 192)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3375, file: !3376, line: 57, baseType: !2015, size: 64, offset: 256)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3375, file: !3376, line: 58, baseType: !2015, size: 64, offset: 320)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3375, file: !3376, line: 59, baseType: !2015, size: 64, offset: 384)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3375, file: !3376, line: 60, baseType: !2015, size: 64, offset: 448)
!3386 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3375, file: !3376, line: 61, baseType: !2015, size: 64, offset: 512)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3375, file: !3376, line: 64, baseType: !2015, size: 64, offset: 576)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3375, file: !3376, line: 65, baseType: !2015, size: 64, offset: 640)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3375, file: !3376, line: 66, baseType: !2015, size: 64, offset: 704)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3375, file: !3376, line: 68, baseType: !3391, size: 64, offset: 768)
!3391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3392, size: 64)
!3392 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3376, line: 36, flags: DIFlagFwdDecl)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3375, file: !3376, line: 70, baseType: !3394, size: 64, offset: 832)
!3394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3375, size: 64)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3375, file: !3376, line: 72, baseType: !1740, size: 32, offset: 896)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3375, file: !3376, line: 73, baseType: !1740, size: 32, offset: 928)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3375, file: !3376, line: 74, baseType: !3398, size: 64, offset: 960)
!3398 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3399, line: 152, baseType: !1803)
!3399 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3375, file: !3376, line: 77, baseType: !3401, size: 16, offset: 1024)
!3401 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3375, file: !3376, line: 78, baseType: !2929, size: 8, offset: 1040)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3375, file: !3376, line: 79, baseType: !1845, size: 8, offset: 1048)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3375, file: !3376, line: 81, baseType: !3405, size: 64, offset: 1088)
!3405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3406, size: 64)
!3406 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3376, line: 43, baseType: null)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3375, file: !3376, line: 89, baseType: !3408, size: 64, offset: 1152)
!3408 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3399, line: 153, baseType: !1803)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3375, file: !3376, line: 91, baseType: !3410, size: 64, offset: 1216)
!3410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3411, size: 64)
!3411 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3376, line: 37, flags: DIFlagFwdDecl)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3375, file: !3376, line: 92, baseType: !3413, size: 64, offset: 1280)
!3413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3414, size: 64)
!3414 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3376, line: 38, flags: DIFlagFwdDecl)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3375, file: !3376, line: 93, baseType: !3394, size: 64, offset: 1344)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3375, file: !3376, line: 94, baseType: !1739, size: 64, offset: 1408)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3375, file: !3376, line: 95, baseType: !2221, size: 64, offset: 1472)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3375, file: !3376, line: 96, baseType: !1740, size: 32, offset: 1536)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3375, file: !3376, line: 98, baseType: !3420, size: 160, offset: 1568)
!3420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1846, size: 160, elements: !3421)
!3421 = !{!3422}
!3422 = !DISubrange(count: 20)
!3423 = !DILocalVariable(name: "file", arg: 1, scope: !3369, file: !3, line: 3640, type: !3372)
!3424 = !DILocation(line: 3640, column: 25, scope: !3369)
!3425 = !DILocalVariable(name: "vr", arg: 2, scope: !3369, file: !3, line: 3640, type: !1741)
!3426 = !DILocation(line: 3640, column: 46, scope: !3369)
!3427 = !DILocation(line: 3642, column: 7, scope: !3428)
!3428 = distinct !DILexicalBlock(scope: !3369, file: !3, line: 3642, column: 7)
!3429 = !DILocation(line: 3642, column: 10, scope: !3428)
!3430 = !DILocation(line: 3642, column: 7, scope: !3369)
!3431 = !DILocation(line: 3643, column: 14, scope: !3428)
!3432 = !DILocation(line: 3643, column: 5, scope: !3428)
!3433 = !DILocation(line: 3644, column: 12, scope: !3434)
!3434 = distinct !DILexicalBlock(scope: !3428, file: !3, line: 3644, column: 12)
!3435 = !DILocation(line: 3644, column: 16, scope: !3434)
!3436 = !DILocation(line: 3644, column: 21, scope: !3434)
!3437 = !DILocation(line: 3644, column: 12, scope: !3428)
!3438 = !DILocation(line: 3645, column: 14, scope: !3434)
!3439 = !DILocation(line: 3645, column: 5, scope: !3434)
!3440 = !DILocation(line: 3646, column: 12, scope: !3441)
!3441 = distinct !DILexicalBlock(scope: !3434, file: !3, line: 3646, column: 12)
!3442 = !DILocation(line: 3646, column: 16, scope: !3441)
!3443 = !DILocation(line: 3646, column: 21, scope: !3441)
!3444 = !DILocation(line: 3646, column: 33, scope: !3441)
!3445 = !DILocation(line: 3646, column: 36, scope: !3441)
!3446 = !DILocation(line: 3646, column: 40, scope: !3441)
!3447 = !DILocation(line: 3646, column: 45, scope: !3441)
!3448 = !DILocation(line: 3646, column: 12, scope: !3434)
!3449 = !DILocalVariable(name: "type", scope: !3450, file: !3, line: 3648, type: !1747)
!3450 = distinct !DILexicalBlock(scope: !3441, file: !3, line: 3647, column: 5)
!3451 = !DILocation(line: 3648, column: 12, scope: !3450)
!3452 = !DILocation(line: 3648, column: 19, scope: !3450)
!3453 = !DILocation(line: 3650, column: 16, scope: !3450)
!3454 = !DILocation(line: 3650, column: 30, scope: !3450)
!3455 = !DILocation(line: 3650, column: 34, scope: !3450)
!3456 = !DILocation(line: 3650, column: 39, scope: !3450)
!3457 = !DILocation(line: 3650, column: 29, scope: !3450)
!3458 = !DILocation(line: 3650, column: 7, scope: !3450)
!3459 = !DILocation(line: 3652, column: 42, scope: !3460)
!3460 = distinct !DILexicalBlock(scope: !3450, file: !3, line: 3652, column: 11)
!3461 = !DILocation(line: 3652, column: 46, scope: !3460)
!3462 = !DILocation(line: 3652, column: 11, scope: !3460)
!3463 = !DILocation(line: 3652, column: 11, scope: !3450)
!3464 = !DILocation(line: 3653, column: 11, scope: !3460)
!3465 = !DILocation(line: 3653, column: 2, scope: !3460)
!3466 = !DILocation(line: 3654, column: 16, scope: !3467)
!3467 = distinct !DILexicalBlock(scope: !3460, file: !3, line: 3654, column: 16)
!3468 = !DILocation(line: 3655, column: 9, scope: !3467)
!3469 = !DILocation(line: 3655, column: 13, scope: !3467)
!3470 = !DILocation(line: 3656, column: 9, scope: !3467)
!3471 = !DILocation(line: 3656, column: 28, scope: !3467)
!3472 = !DILocation(line: 3656, column: 32, scope: !3467)
!3473 = !DILocation(line: 3656, column: 12, scope: !3467)
!3474 = !DILocation(line: 3654, column: 16, scope: !3460)
!3475 = !DILocation(line: 3657, column: 11, scope: !3467)
!3476 = !DILocation(line: 3657, column: 2, scope: !3467)
!3477 = !DILocation(line: 3659, column: 22, scope: !3467)
!3478 = !DILocation(line: 3659, column: 28, scope: !3467)
!3479 = !DILocation(line: 3659, column: 32, scope: !3467)
!3480 = !DILocation(line: 3659, column: 2, scope: !3467)
!3481 = !DILocation(line: 3661, column: 16, scope: !3450)
!3482 = !DILocation(line: 3661, column: 7, scope: !3450)
!3483 = !DILocation(line: 3663, column: 42, scope: !3484)
!3484 = distinct !DILexicalBlock(scope: !3450, file: !3, line: 3663, column: 11)
!3485 = !DILocation(line: 3663, column: 46, scope: !3484)
!3486 = !DILocation(line: 3663, column: 11, scope: !3484)
!3487 = !DILocation(line: 3663, column: 11, scope: !3450)
!3488 = !DILocation(line: 3664, column: 11, scope: !3484)
!3489 = !DILocation(line: 3664, column: 2, scope: !3484)
!3490 = !DILocation(line: 3665, column: 16, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3484, file: !3, line: 3665, column: 16)
!3492 = !DILocation(line: 3666, column: 9, scope: !3491)
!3493 = !DILocation(line: 3666, column: 28, scope: !3491)
!3494 = !DILocation(line: 3666, column: 32, scope: !3491)
!3495 = !DILocation(line: 3666, column: 12, scope: !3491)
!3496 = !DILocation(line: 3665, column: 16, scope: !3484)
!3497 = !DILocation(line: 3667, column: 11, scope: !3491)
!3498 = !DILocation(line: 3667, column: 2, scope: !3491)
!3499 = !DILocation(line: 3669, column: 22, scope: !3491)
!3500 = !DILocation(line: 3669, column: 28, scope: !3491)
!3501 = !DILocation(line: 3669, column: 32, scope: !3491)
!3502 = !DILocation(line: 3669, column: 2, scope: !3491)
!3503 = !DILocation(line: 3671, column: 16, scope: !3450)
!3504 = !DILocation(line: 3671, column: 7, scope: !3450)
!3505 = !DILocation(line: 3673, column: 11, scope: !3506)
!3506 = distinct !DILexicalBlock(scope: !3450, file: !3, line: 3673, column: 11)
!3507 = !DILocation(line: 3673, column: 15, scope: !3506)
!3508 = !DILocation(line: 3673, column: 11, scope: !3450)
!3509 = !DILocalVariable(name: "bi", scope: !3510, file: !3, line: 3675, type: !3511)
!3510 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 3674, column: 2)
!3511 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1980, line: 218, baseType: !3512)
!3512 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1980, line: 203, size: 256, elements: !3513)
!3513 = !{!3514, !3515, !3516, !3517}
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !3512, file: !1980, line: 206, baseType: !1983, size: 64)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !3512, file: !1980, line: 209, baseType: !1983, size: 64, offset: 64)
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !3512, file: !1980, line: 212, baseType: !7, size: 32, offset: 128)
!3517 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !3512, file: !1980, line: 217, baseType: !1993, size: 64, offset: 192)
!3518 = !DILocation(line: 3675, column: 20, scope: !3510)
!3519 = !DILocalVariable(name: "i", scope: !3510, file: !3, line: 3676, type: !7)
!3520 = !DILocation(line: 3676, column: 13, scope: !3510)
!3521 = !DILocalVariable(name: "c", scope: !3510, file: !3, line: 3676, type: !7)
!3522 = !DILocation(line: 3676, column: 16, scope: !3510)
!3523 = !DILocation(line: 3678, column: 13, scope: !3510)
!3524 = !DILocation(line: 3678, column: 4, scope: !3510)
!3525 = !DILocation(line: 3680, column: 4, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !3510, file: !3, line: 3680, column: 4)
!3527 = !DILocation(line: 3680, column: 4, scope: !3528)
!3528 = distinct !DILexicalBlock(scope: !3526, file: !3, line: 3680, column: 4)
!3529 = !DILocation(line: 3682, column: 28, scope: !3530)
!3530 = distinct !DILexicalBlock(scope: !3528, file: !3, line: 3681, column: 6)
!3531 = !DILocation(line: 3682, column: 34, scope: !3530)
!3532 = !DILocation(line: 3682, column: 8, scope: !3530)
!3533 = !DILocation(line: 3683, column: 17, scope: !3530)
!3534 = !DILocation(line: 3683, column: 8, scope: !3530)
!3535 = !DILocation(line: 3684, column: 9, scope: !3530)
!3536 = !DILocation(line: 3685, column: 6, scope: !3530)
!3537 = distinct !{!3537, !3525, !3538}
!3538 = !DILocation(line: 3685, column: 6, scope: !3526)
!3539 = !DILocation(line: 3687, column: 13, scope: !3510)
!3540 = !DILocation(line: 3687, column: 38, scope: !3510)
!3541 = !DILocation(line: 3687, column: 4, scope: !3510)
!3542 = !DILocation(line: 3688, column: 2, scope: !3510)
!3543 = !DILocation(line: 3689, column: 5, scope: !3450)
!3544 = !DILocation(line: 3690, column: 12, scope: !3545)
!3545 = distinct !DILexicalBlock(scope: !3441, file: !3, line: 3690, column: 12)
!3546 = !DILocation(line: 3690, column: 16, scope: !3545)
!3547 = !DILocation(line: 3690, column: 21, scope: !3545)
!3548 = !DILocation(line: 3690, column: 12, scope: !3441)
!3549 = !DILocation(line: 3691, column: 14, scope: !3545)
!3550 = !DILocation(line: 3691, column: 5, scope: !3545)
!3551 = !DILocation(line: 3693, column: 14, scope: !3545)
!3552 = !DILocation(line: 3693, column: 5, scope: !3545)
!3553 = !DILocation(line: 3694, column: 1, scope: !3369)
!3554 = distinct !DISubprogram(name: "is_negative_overflow_infinity", scope: !3, file: !3, line: 245, type: !3251, scopeLine: 246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3555 = !DILocalVariable(name: "val", arg: 1, scope: !3554, file: !3, line: 245, type: !3139)
!3556 = !DILocation(line: 245, column: 43, scope: !3554)
!3557 = !DILocation(line: 247, column: 36, scope: !3554)
!3558 = !DILocation(line: 247, column: 11, scope: !3554)
!3559 = !DILocation(line: 248, column: 4, scope: !3554)
!3560 = !DILocation(line: 248, column: 7, scope: !3554)
!3561 = !DILocation(line: 249, column: 4, scope: !3554)
!3562 = !DILocation(line: 249, column: 7, scope: !3554)
!3563 = !DILocation(line: 250, column: 4, scope: !3554)
!3564 = !DILocation(line: 250, column: 23, scope: !3554)
!3565 = !DILocation(line: 250, column: 7, scope: !3554)
!3566 = !DILocation(line: 0, scope: !3554)
!3567 = !DILocation(line: 247, column: 10, scope: !3554)
!3568 = !DILocation(line: 247, column: 3, scope: !3554)
!3569 = distinct !DISubprogram(name: "vrp_val_is_min", scope: !3, file: !3, line: 166, type: !3251, scopeLine: 167, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3570 = !DILocalVariable(name: "val", arg: 1, scope: !3569, file: !3, line: 166, type: !3139)
!3571 = !DILocation(line: 166, column: 28, scope: !3569)
!3572 = !DILocalVariable(name: "type_min", scope: !3569, file: !3, line: 168, type: !1747)
!3573 = !DILocation(line: 168, column: 8, scope: !3569)
!3574 = !DILocation(line: 168, column: 32, scope: !3569)
!3575 = !DILocation(line: 168, column: 19, scope: !3569)
!3576 = !DILocation(line: 169, column: 11, scope: !3569)
!3577 = !DILocation(line: 169, column: 18, scope: !3569)
!3578 = !DILocation(line: 169, column: 15, scope: !3569)
!3579 = !DILocation(line: 170, column: 4, scope: !3569)
!3580 = !DILocation(line: 170, column: 8, scope: !3569)
!3581 = !DILocation(line: 170, column: 17, scope: !3569)
!3582 = !DILocation(line: 171, column: 8, scope: !3569)
!3583 = !DILocation(line: 171, column: 28, scope: !3569)
!3584 = !DILocation(line: 171, column: 33, scope: !3569)
!3585 = !DILocation(line: 171, column: 11, scope: !3569)
!3586 = !DILocation(line: 0, scope: !3569)
!3587 = !DILocation(line: 169, column: 10, scope: !3569)
!3588 = !DILocation(line: 169, column: 3, scope: !3569)
!3589 = distinct !DISubprogram(name: "is_positive_overflow_infinity", scope: !3, file: !3, line: 256, type: !3251, scopeLine: 257, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3590 = !DILocalVariable(name: "val", arg: 1, scope: !3589, file: !3, line: 256, type: !3139)
!3591 = !DILocation(line: 256, column: 43, scope: !3589)
!3592 = !DILocation(line: 258, column: 36, scope: !3589)
!3593 = !DILocation(line: 258, column: 11, scope: !3589)
!3594 = !DILocation(line: 259, column: 4, scope: !3589)
!3595 = !DILocation(line: 259, column: 7, scope: !3589)
!3596 = !DILocation(line: 260, column: 4, scope: !3589)
!3597 = !DILocation(line: 260, column: 7, scope: !3589)
!3598 = !DILocation(line: 261, column: 4, scope: !3589)
!3599 = !DILocation(line: 261, column: 23, scope: !3589)
!3600 = !DILocation(line: 261, column: 7, scope: !3589)
!3601 = !DILocation(line: 0, scope: !3589)
!3602 = !DILocation(line: 258, column: 10, scope: !3589)
!3603 = !DILocation(line: 258, column: 3, scope: !3589)
!3604 = distinct !DISubprogram(name: "vrp_val_is_max", scope: !3, file: !3, line: 154, type: !3251, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3605 = !DILocalVariable(name: "val", arg: 1, scope: !3604, file: !3, line: 154, type: !3139)
!3606 = !DILocation(line: 154, column: 28, scope: !3604)
!3607 = !DILocalVariable(name: "type_max", scope: !3604, file: !3, line: 156, type: !1747)
!3608 = !DILocation(line: 156, column: 8, scope: !3604)
!3609 = !DILocation(line: 156, column: 32, scope: !3604)
!3610 = !DILocation(line: 156, column: 19, scope: !3604)
!3611 = !DILocation(line: 157, column: 11, scope: !3604)
!3612 = !DILocation(line: 157, column: 18, scope: !3604)
!3613 = !DILocation(line: 157, column: 15, scope: !3604)
!3614 = !DILocation(line: 158, column: 4, scope: !3604)
!3615 = !DILocation(line: 158, column: 8, scope: !3604)
!3616 = !DILocation(line: 158, column: 17, scope: !3604)
!3617 = !DILocation(line: 159, column: 8, scope: !3604)
!3618 = !DILocation(line: 159, column: 28, scope: !3604)
!3619 = !DILocation(line: 159, column: 33, scope: !3604)
!3620 = !DILocation(line: 159, column: 11, scope: !3604)
!3621 = !DILocation(line: 0, scope: !3604)
!3622 = !DILocation(line: 157, column: 10, scope: !3604)
!3623 = !DILocation(line: 157, column: 3, scope: !3604)
!3624 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1980, file: !1980, line: 224, type: !3625, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3625 = !DISubroutineType(types: !3626)
!3626 = !{null, !3627, !3628, !7, !3631}
!3627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3511, size: 64)
!3628 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1748, line: 48, baseType: !3629)
!3629 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3630, size: 64)
!3630 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1979)
!3631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!3632 = !DILocalVariable(name: "bi", arg: 1, scope: !3624, file: !1980, line: 224, type: !3627)
!3633 = !DILocation(line: 224, column: 37, scope: !3624)
!3634 = !DILocalVariable(name: "map", arg: 2, scope: !3624, file: !1980, line: 224, type: !3628)
!3635 = !DILocation(line: 224, column: 54, scope: !3624)
!3636 = !DILocalVariable(name: "start_bit", arg: 3, scope: !3624, file: !1980, line: 225, type: !7)
!3637 = !DILocation(line: 225, column: 15, scope: !3624)
!3638 = !DILocalVariable(name: "bit_no", arg: 4, scope: !3624, file: !1980, line: 225, type: !3631)
!3639 = !DILocation(line: 225, column: 36, scope: !3624)
!3640 = !DILocation(line: 227, column: 14, scope: !3624)
!3641 = !DILocation(line: 227, column: 19, scope: !3624)
!3642 = !DILocation(line: 227, column: 3, scope: !3624)
!3643 = !DILocation(line: 227, column: 7, scope: !3624)
!3644 = !DILocation(line: 227, column: 12, scope: !3624)
!3645 = !DILocation(line: 228, column: 3, scope: !3624)
!3646 = !DILocation(line: 228, column: 7, scope: !3624)
!3647 = !DILocation(line: 228, column: 12, scope: !3624)
!3648 = !DILocation(line: 231, column: 3, scope: !3624)
!3649 = !DILocation(line: 233, column: 12, scope: !3650)
!3650 = distinct !DILexicalBlock(scope: !3651, file: !1980, line: 233, column: 11)
!3651 = distinct !DILexicalBlock(scope: !3624, file: !1980, line: 232, column: 5)
!3652 = !DILocation(line: 233, column: 16, scope: !3650)
!3653 = !DILocation(line: 233, column: 11, scope: !3651)
!3654 = !DILocation(line: 235, column: 4, scope: !3655)
!3655 = distinct !DILexicalBlock(scope: !3650, file: !1980, line: 234, column: 2)
!3656 = !DILocation(line: 235, column: 8, scope: !3655)
!3657 = !DILocation(line: 235, column: 13, scope: !3655)
!3658 = !DILocation(line: 236, column: 4, scope: !3655)
!3659 = !DILocation(line: 239, column: 11, scope: !3660)
!3660 = distinct !DILexicalBlock(scope: !3651, file: !1980, line: 239, column: 11)
!3661 = !DILocation(line: 239, column: 15, scope: !3660)
!3662 = !DILocation(line: 239, column: 21, scope: !3660)
!3663 = !DILocation(line: 239, column: 29, scope: !3660)
!3664 = !DILocation(line: 239, column: 39, scope: !3660)
!3665 = !DILocation(line: 239, column: 26, scope: !3660)
!3666 = !DILocation(line: 239, column: 11, scope: !3651)
!3667 = !DILocation(line: 240, column: 2, scope: !3660)
!3668 = !DILocation(line: 241, column: 18, scope: !3651)
!3669 = !DILocation(line: 241, column: 22, scope: !3651)
!3670 = !DILocation(line: 241, column: 28, scope: !3651)
!3671 = !DILocation(line: 241, column: 7, scope: !3651)
!3672 = !DILocation(line: 241, column: 11, scope: !3651)
!3673 = !DILocation(line: 241, column: 16, scope: !3651)
!3674 = distinct !{!3674, !3648, !3675}
!3675 = !DILocation(line: 242, column: 5, scope: !3624)
!3676 = !DILocation(line: 245, column: 7, scope: !3677)
!3677 = distinct !DILexicalBlock(scope: !3624, file: !1980, line: 245, column: 7)
!3678 = !DILocation(line: 245, column: 11, scope: !3677)
!3679 = !DILocation(line: 245, column: 17, scope: !3677)
!3680 = !DILocation(line: 245, column: 25, scope: !3677)
!3681 = !DILocation(line: 245, column: 35, scope: !3677)
!3682 = !DILocation(line: 245, column: 22, scope: !3677)
!3683 = !DILocation(line: 245, column: 7, scope: !3624)
!3684 = !DILocation(line: 246, column: 17, scope: !3677)
!3685 = !DILocation(line: 246, column: 21, scope: !3677)
!3686 = !DILocation(line: 246, column: 27, scope: !3677)
!3687 = !DILocation(line: 246, column: 32, scope: !3677)
!3688 = !DILocation(line: 246, column: 15, scope: !3677)
!3689 = !DILocation(line: 246, column: 5, scope: !3677)
!3690 = !DILocation(line: 249, column: 17, scope: !3624)
!3691 = !DILocation(line: 249, column: 27, scope: !3624)
!3692 = !DILocation(line: 249, column: 46, scope: !3624)
!3693 = !DILocation(line: 249, column: 3, scope: !3624)
!3694 = !DILocation(line: 249, column: 7, scope: !3624)
!3695 = !DILocation(line: 249, column: 15, scope: !3624)
!3696 = !DILocation(line: 250, column: 14, scope: !3624)
!3697 = !DILocation(line: 250, column: 18, scope: !3624)
!3698 = !DILocation(line: 250, column: 24, scope: !3624)
!3699 = !DILocation(line: 250, column: 29, scope: !3624)
!3700 = !DILocation(line: 250, column: 33, scope: !3624)
!3701 = !DILocation(line: 250, column: 3, scope: !3624)
!3702 = !DILocation(line: 250, column: 7, scope: !3624)
!3703 = !DILocation(line: 250, column: 12, scope: !3624)
!3704 = !DILocation(line: 251, column: 16, scope: !3624)
!3705 = !DILocation(line: 251, column: 26, scope: !3624)
!3706 = !DILocation(line: 251, column: 3, scope: !3624)
!3707 = !DILocation(line: 251, column: 7, scope: !3624)
!3708 = !DILocation(line: 251, column: 12, scope: !3624)
!3709 = !DILocation(line: 257, column: 17, scope: !3624)
!3710 = !DILocation(line: 257, column: 21, scope: !3624)
!3711 = !DILocation(line: 257, column: 16, scope: !3624)
!3712 = !DILocation(line: 257, column: 13, scope: !3624)
!3713 = !DILocation(line: 259, column: 13, scope: !3624)
!3714 = !DILocation(line: 259, column: 4, scope: !3624)
!3715 = !DILocation(line: 259, column: 11, scope: !3624)
!3716 = !DILocation(line: 260, column: 1, scope: !3624)
!3717 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1980, file: !1980, line: 393, type: !3718, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3718 = !DISubroutineType(types: !3719)
!3719 = !{!1866, !3627, !3631}
!3720 = !DILocalVariable(name: "bi", arg: 1, scope: !3717, file: !1980, line: 393, type: !3627)
!3721 = !DILocation(line: 393, column: 32, scope: !3717)
!3722 = !DILocalVariable(name: "bit_no", arg: 2, scope: !3717, file: !1980, line: 393, type: !3631)
!3723 = !DILocation(line: 393, column: 46, scope: !3717)
!3724 = !DILocation(line: 396, column: 7, scope: !3725)
!3725 = distinct !DILexicalBlock(scope: !3717, file: !1980, line: 396, column: 7)
!3726 = !DILocation(line: 396, column: 11, scope: !3725)
!3727 = !DILocation(line: 396, column: 7, scope: !3717)
!3728 = !DILocation(line: 397, column: 5, scope: !3725)
!3729 = !DILabel(scope: !3730, name: "next_bit", file: !1980, line: 398)
!3730 = distinct !DILexicalBlock(scope: !3725, file: !1980, line: 397, column: 5)
!3731 = !DILocation(line: 398, column: 5, scope: !3730)
!3732 = !DILocation(line: 399, column: 7, scope: !3730)
!3733 = !DILocation(line: 399, column: 16, scope: !3730)
!3734 = !DILocation(line: 399, column: 20, scope: !3730)
!3735 = !DILocation(line: 399, column: 25, scope: !3730)
!3736 = !DILocation(line: 399, column: 14, scope: !3730)
!3737 = !DILocation(line: 401, column: 4, scope: !3738)
!3738 = distinct !DILexicalBlock(scope: !3730, file: !1980, line: 400, column: 2)
!3739 = !DILocation(line: 401, column: 8, scope: !3738)
!3740 = !DILocation(line: 401, column: 13, scope: !3738)
!3741 = !DILocation(line: 402, column: 5, scope: !3738)
!3742 = !DILocation(line: 402, column: 12, scope: !3738)
!3743 = distinct !{!3743, !3732, !3744}
!3744 = !DILocation(line: 403, column: 2, scope: !3730)
!3745 = !DILocation(line: 404, column: 7, scope: !3730)
!3746 = !DILocation(line: 410, column: 16, scope: !3717)
!3747 = !DILocation(line: 410, column: 15, scope: !3717)
!3748 = !DILocation(line: 410, column: 23, scope: !3717)
!3749 = !DILocation(line: 410, column: 42, scope: !3717)
!3750 = !DILocation(line: 411, column: 7, scope: !3717)
!3751 = !DILocation(line: 411, column: 26, scope: !3717)
!3752 = !DILocation(line: 410, column: 4, scope: !3717)
!3753 = !DILocation(line: 410, column: 11, scope: !3717)
!3754 = !DILocation(line: 412, column: 3, scope: !3717)
!3755 = !DILocation(line: 412, column: 7, scope: !3717)
!3756 = !DILocation(line: 412, column: 14, scope: !3717)
!3757 = !DILocation(line: 414, column: 3, scope: !3717)
!3758 = !DILocation(line: 417, column: 7, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3717, file: !1980, line: 415, column: 5)
!3760 = !DILocation(line: 417, column: 14, scope: !3759)
!3761 = !DILocation(line: 417, column: 18, scope: !3759)
!3762 = !DILocation(line: 417, column: 26, scope: !3759)
!3763 = !DILocation(line: 419, column: 15, scope: !3764)
!3764 = distinct !DILexicalBlock(scope: !3759, file: !1980, line: 418, column: 2)
!3765 = !DILocation(line: 419, column: 19, scope: !3764)
!3766 = !DILocation(line: 419, column: 25, scope: !3764)
!3767 = !DILocation(line: 419, column: 30, scope: !3764)
!3768 = !DILocation(line: 419, column: 34, scope: !3764)
!3769 = !DILocation(line: 419, column: 4, scope: !3764)
!3770 = !DILocation(line: 419, column: 8, scope: !3764)
!3771 = !DILocation(line: 419, column: 13, scope: !3764)
!3772 = !DILocation(line: 420, column: 8, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3764, file: !1980, line: 420, column: 8)
!3774 = !DILocation(line: 420, column: 12, scope: !3773)
!3775 = !DILocation(line: 420, column: 8, scope: !3764)
!3776 = !DILocation(line: 421, column: 6, scope: !3773)
!3777 = !DILocation(line: 422, column: 5, scope: !3764)
!3778 = !DILocation(line: 422, column: 12, scope: !3764)
!3779 = !DILocation(line: 423, column: 4, scope: !3764)
!3780 = !DILocation(line: 423, column: 8, scope: !3764)
!3781 = !DILocation(line: 423, column: 15, scope: !3764)
!3782 = distinct !{!3782, !3758, !3783}
!3783 = !DILocation(line: 424, column: 2, scope: !3759)
!3784 = !DILocation(line: 427, column: 18, scope: !3759)
!3785 = !DILocation(line: 427, column: 22, scope: !3759)
!3786 = !DILocation(line: 427, column: 28, scope: !3759)
!3787 = !DILocation(line: 427, column: 7, scope: !3759)
!3788 = !DILocation(line: 427, column: 11, scope: !3759)
!3789 = !DILocation(line: 427, column: 16, scope: !3759)
!3790 = !DILocation(line: 428, column: 12, scope: !3791)
!3791 = distinct !DILexicalBlock(scope: !3759, file: !1980, line: 428, column: 11)
!3792 = !DILocation(line: 428, column: 16, scope: !3791)
!3793 = !DILocation(line: 428, column: 11, scope: !3759)
!3794 = !DILocation(line: 429, column: 2, scope: !3791)
!3795 = !DILocation(line: 430, column: 17, scope: !3759)
!3796 = !DILocation(line: 430, column: 21, scope: !3759)
!3797 = !DILocation(line: 430, column: 27, scope: !3759)
!3798 = !DILocation(line: 430, column: 32, scope: !3759)
!3799 = !DILocation(line: 430, column: 8, scope: !3759)
!3800 = !DILocation(line: 430, column: 15, scope: !3759)
!3801 = !DILocation(line: 431, column: 7, scope: !3759)
!3802 = !DILocation(line: 431, column: 11, scope: !3759)
!3803 = !DILocation(line: 431, column: 19, scope: !3759)
!3804 = distinct !{!3804, !3757, !3805}
!3805 = !DILocation(line: 432, column: 5, scope: !3717)
!3806 = !DILocation(line: 433, column: 1, scope: !3717)
!3807 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !135, file: !135, line: 182, type: !3808, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3808 = !DISubroutineType(types: !3809)
!3809 = !{!1747, !3810, !7}
!3810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3811, size: 64)
!3811 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2627)
!3812 = !DILocalVariable(name: "vec_", arg: 1, scope: !3807, file: !135, line: 182, type: !3810)
!3813 = !DILocation(line: 182, column: 1, scope: !3807)
!3814 = !DILocalVariable(name: "ix_", arg: 2, scope: !3807, file: !135, line: 182, type: !7)
!3815 = !DILocation(line: 0, scope: !3807)
!3816 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1980, file: !1980, line: 382, type: !3817, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3817 = !DISubroutineType(types: !3818)
!3818 = !{null, !3627, !3631}
!3819 = !DILocalVariable(name: "bi", arg: 1, scope: !3816, file: !1980, line: 382, type: !3627)
!3820 = !DILocation(line: 382, column: 33, scope: !3816)
!3821 = !DILocalVariable(name: "bit_no", arg: 2, scope: !3816, file: !1980, line: 382, type: !3631)
!3822 = !DILocation(line: 382, column: 47, scope: !3816)
!3823 = !DILocation(line: 384, column: 3, scope: !3816)
!3824 = !DILocation(line: 384, column: 7, scope: !3816)
!3825 = !DILocation(line: 384, column: 12, scope: !3816)
!3826 = !DILocation(line: 385, column: 4, scope: !3816)
!3827 = !DILocation(line: 385, column: 11, scope: !3816)
!3828 = !DILocation(line: 386, column: 1, scope: !3816)
!3829 = distinct !DISubprogram(name: "debug_value_range", scope: !3, file: !3, line: 3700, type: !3830, scopeLine: 3701, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3830 = !DISubroutineType(types: !3831)
!3831 = !{null, !1741}
!3832 = !DILocalVariable(name: "vr", arg: 1, scope: !3829, file: !3, line: 3700, type: !1741)
!3833 = !DILocation(line: 3700, column: 35, scope: !3829)
!3834 = !DILocation(line: 3702, column: 21, scope: !3829)
!3835 = !DILocation(line: 3702, column: 29, scope: !3829)
!3836 = !DILocation(line: 3702, column: 3, scope: !3829)
!3837 = !DILocation(line: 3703, column: 12, scope: !3829)
!3838 = !DILocation(line: 3703, column: 3, scope: !3829)
!3839 = !DILocation(line: 3704, column: 1, scope: !3829)
!3840 = distinct !DISubprogram(name: "dump_all_value_ranges", scope: !3, file: !3, line: 3710, type: !3841, scopeLine: 3711, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3841 = !DISubroutineType(types: !3842)
!3842 = !{null, !3372}
!3843 = !DILocalVariable(name: "file", arg: 1, scope: !3840, file: !3, line: 3710, type: !3372)
!3844 = !DILocation(line: 3710, column: 30, scope: !3840)
!3845 = !DILocalVariable(name: "i", scope: !3840, file: !3, line: 3712, type: !2221)
!3846 = !DILocation(line: 3712, column: 10, scope: !3840)
!3847 = !DILocation(line: 3714, column: 10, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3840, file: !3, line: 3714, column: 3)
!3849 = !DILocation(line: 3714, column: 8, scope: !3848)
!3850 = !DILocation(line: 3714, column: 15, scope: !3851)
!3851 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 3714, column: 3)
!3852 = !DILocation(line: 3714, column: 19, scope: !3851)
!3853 = !DILocation(line: 3714, column: 17, scope: !3851)
!3854 = !DILocation(line: 3714, column: 3, scope: !3848)
!3855 = !DILocation(line: 3716, column: 11, scope: !3856)
!3856 = distinct !DILexicalBlock(scope: !3857, file: !3, line: 3716, column: 11)
!3857 = distinct !DILexicalBlock(scope: !3851, file: !3, line: 3715, column: 5)
!3858 = !DILocation(line: 3716, column: 20, scope: !3856)
!3859 = !DILocation(line: 3716, column: 11, scope: !3857)
!3860 = !DILocation(line: 3718, column: 24, scope: !3861)
!3861 = distinct !DILexicalBlock(scope: !3856, file: !3, line: 3717, column: 2)
!3862 = !DILocation(line: 3718, column: 30, scope: !3861)
!3863 = !DILocation(line: 3718, column: 4, scope: !3861)
!3864 = !DILocation(line: 3719, column: 13, scope: !3861)
!3865 = !DILocation(line: 3719, column: 4, scope: !3861)
!3866 = !DILocation(line: 3720, column: 22, scope: !3861)
!3867 = !DILocation(line: 3720, column: 28, scope: !3861)
!3868 = !DILocation(line: 3720, column: 37, scope: !3861)
!3869 = !DILocation(line: 3720, column: 4, scope: !3861)
!3870 = !DILocation(line: 3721, column: 13, scope: !3861)
!3871 = !DILocation(line: 3721, column: 4, scope: !3861)
!3872 = !DILocation(line: 3722, column: 2, scope: !3861)
!3873 = !DILocation(line: 3723, column: 5, scope: !3857)
!3874 = !DILocation(line: 3714, column: 35, scope: !3851)
!3875 = !DILocation(line: 3714, column: 3, scope: !3851)
!3876 = distinct !{!3876, !3854, !3877}
!3877 = !DILocation(line: 3723, column: 5, scope: !3848)
!3878 = !DILocation(line: 3725, column: 12, scope: !3840)
!3879 = !DILocation(line: 3725, column: 3, scope: !3840)
!3880 = !DILocation(line: 3726, column: 1, scope: !3840)
!3881 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !3882, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3882 = !DISubroutineType(types: !3883)
!3883 = !{!7, !3810}
!3884 = !DILocalVariable(name: "vec_", arg: 1, scope: !3881, file: !135, line: 182, type: !3810)
!3885 = !DILocation(line: 182, column: 1, scope: !3881)
!3886 = distinct !DISubprogram(name: "debug_all_value_ranges", scope: !3, file: !3, line: 3732, type: !3887, scopeLine: 3733, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3887 = !DISubroutineType(types: !3888)
!3888 = !{null}
!3889 = !DILocation(line: 3734, column: 26, scope: !3886)
!3890 = !DILocation(line: 3734, column: 3, scope: !3886)
!3891 = !DILocation(line: 3735, column: 1, scope: !3886)
!3892 = distinct !DISubprogram(name: "dump_asserts_for", scope: !3, file: !3, line: 3853, type: !3893, scopeLine: 3854, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3893 = !DISubroutineType(types: !3894)
!3894 = !{null, !3372, !1747}
!3895 = !DILocalVariable(name: "file", arg: 1, scope: !3892, file: !3, line: 3853, type: !3372)
!3896 = !DILocation(line: 3853, column: 25, scope: !3892)
!3897 = !DILocalVariable(name: "name", arg: 2, scope: !3892, file: !3, line: 3853, type: !1747)
!3898 = !DILocation(line: 3853, column: 36, scope: !3892)
!3899 = !DILocalVariable(name: "loc", scope: !3892, file: !3, line: 3855, type: !3105)
!3900 = !DILocation(line: 3855, column: 18, scope: !3892)
!3901 = !DILocation(line: 3857, column: 12, scope: !3892)
!3902 = !DILocation(line: 3857, column: 3, scope: !3892)
!3903 = !DILocation(line: 3858, column: 23, scope: !3892)
!3904 = !DILocation(line: 3858, column: 29, scope: !3892)
!3905 = !DILocation(line: 3858, column: 3, scope: !3892)
!3906 = !DILocation(line: 3859, column: 12, scope: !3892)
!3907 = !DILocation(line: 3859, column: 3, scope: !3892)
!3908 = !DILocation(line: 3861, column: 9, scope: !3892)
!3909 = !DILocation(line: 3861, column: 21, scope: !3892)
!3910 = !DILocation(line: 3861, column: 7, scope: !3892)
!3911 = !DILocation(line: 3862, column: 3, scope: !3892)
!3912 = !DILocation(line: 3862, column: 10, scope: !3892)
!3913 = !DILocation(line: 3864, column: 16, scope: !3914)
!3914 = distinct !DILexicalBlock(scope: !3892, file: !3, line: 3863, column: 5)
!3915 = !DILocation(line: 3864, column: 7, scope: !3914)
!3916 = !DILocation(line: 3865, column: 26, scope: !3914)
!3917 = !DILocation(line: 3865, column: 42, scope: !3914)
!3918 = !DILocation(line: 3865, column: 47, scope: !3914)
!3919 = !DILocation(line: 3865, column: 32, scope: !3914)
!3920 = !DILocation(line: 3865, column: 7, scope: !3914)
!3921 = !DILocation(line: 3866, column: 16, scope: !3914)
!3922 = !DILocation(line: 3866, column: 36, scope: !3914)
!3923 = !DILocation(line: 3866, column: 41, scope: !3914)
!3924 = !DILocation(line: 3866, column: 45, scope: !3914)
!3925 = !DILocation(line: 3866, column: 7, scope: !3914)
!3926 = !DILocation(line: 3867, column: 11, scope: !3927)
!3927 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 3867, column: 11)
!3928 = !DILocation(line: 3867, column: 16, scope: !3927)
!3929 = !DILocation(line: 3867, column: 11, scope: !3914)
!3930 = !DILocation(line: 3869, column: 13, scope: !3931)
!3931 = distinct !DILexicalBlock(scope: !3927, file: !3, line: 3868, column: 2)
!3932 = !DILocation(line: 3869, column: 38, scope: !3931)
!3933 = !DILocation(line: 3869, column: 43, scope: !3931)
!3934 = !DILocation(line: 3869, column: 46, scope: !3931)
!3935 = !DILocation(line: 3869, column: 51, scope: !3931)
!3936 = !DILocation(line: 3870, column: 13, scope: !3931)
!3937 = !DILocation(line: 3870, column: 18, scope: !3931)
!3938 = !DILocation(line: 3870, column: 21, scope: !3931)
!3939 = !DILocation(line: 3870, column: 27, scope: !3931)
!3940 = !DILocation(line: 3869, column: 4, scope: !3931)
!3941 = !DILocation(line: 3871, column: 20, scope: !3931)
!3942 = !DILocation(line: 3871, column: 26, scope: !3931)
!3943 = !DILocation(line: 3871, column: 31, scope: !3931)
!3944 = !DILocation(line: 3871, column: 4, scope: !3931)
!3945 = !DILocation(line: 3872, column: 2, scope: !3931)
!3946 = !DILocation(line: 3873, column: 16, scope: !3914)
!3947 = !DILocation(line: 3873, column: 7, scope: !3914)
!3948 = !DILocation(line: 3874, column: 27, scope: !3914)
!3949 = !DILocation(line: 3874, column: 33, scope: !3914)
!3950 = !DILocation(line: 3874, column: 7, scope: !3914)
!3951 = !DILocation(line: 3875, column: 16, scope: !3914)
!3952 = !DILocation(line: 3875, column: 50, scope: !3914)
!3953 = !DILocation(line: 3875, column: 55, scope: !3914)
!3954 = !DILocation(line: 3875, column: 30, scope: !3914)
!3955 = !DILocation(line: 3875, column: 7, scope: !3914)
!3956 = !DILocation(line: 3876, column: 27, scope: !3914)
!3957 = !DILocation(line: 3876, column: 33, scope: !3914)
!3958 = !DILocation(line: 3876, column: 38, scope: !3914)
!3959 = !DILocation(line: 3876, column: 7, scope: !3914)
!3960 = !DILocation(line: 3877, column: 16, scope: !3914)
!3961 = !DILocation(line: 3877, column: 7, scope: !3914)
!3962 = !DILocation(line: 3878, column: 13, scope: !3914)
!3963 = !DILocation(line: 3878, column: 18, scope: !3914)
!3964 = !DILocation(line: 3878, column: 11, scope: !3914)
!3965 = distinct !{!3965, !3911, !3966}
!3966 = !DILocation(line: 3879, column: 5, scope: !3892)
!3967 = !DILocation(line: 3881, column: 12, scope: !3892)
!3968 = !DILocation(line: 3881, column: 3, scope: !3892)
!3969 = !DILocation(line: 3882, column: 1, scope: !3892)
!3970 = distinct !DISubprogram(name: "gsi_stmt", scope: !742, file: !742, line: 4501, type: !3971, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3971 = !DISubroutineType(types: !3972)
!3972 = !{!2076, !3112}
!3973 = !DILocalVariable(name: "i", arg: 1, scope: !3970, file: !742, line: 4501, type: !3112)
!3974 = !DILocation(line: 4501, column: 32, scope: !3970)
!3975 = !DILocation(line: 4503, column: 12, scope: !3970)
!3976 = !DILocation(line: 4503, column: 17, scope: !3970)
!3977 = !DILocation(line: 4503, column: 3, scope: !3970)
!3978 = distinct !DISubprogram(name: "debug_asserts_for", scope: !3, file: !3, line: 3888, type: !3979, scopeLine: 3889, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3979 = !DISubroutineType(types: !3980)
!3980 = !{null, !1747}
!3981 = !DILocalVariable(name: "name", arg: 1, scope: !3978, file: !3, line: 3888, type: !1747)
!3982 = !DILocation(line: 3888, column: 25, scope: !3978)
!3983 = !DILocation(line: 3890, column: 21, scope: !3978)
!3984 = !DILocation(line: 3890, column: 29, scope: !3978)
!3985 = !DILocation(line: 3890, column: 3, scope: !3978)
!3986 = !DILocation(line: 3891, column: 1, scope: !3978)
!3987 = distinct !DISubprogram(name: "dump_all_asserts", scope: !3, file: !3, line: 3897, type: !3841, scopeLine: 3898, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!3988 = !DILocalVariable(name: "file", arg: 1, scope: !3987, file: !3, line: 3897, type: !3372)
!3989 = !DILocation(line: 3897, column: 25, scope: !3987)
!3990 = !DILocalVariable(name: "i", scope: !3987, file: !3, line: 3899, type: !7)
!3991 = !DILocation(line: 3899, column: 12, scope: !3987)
!3992 = !DILocalVariable(name: "bi", scope: !3987, file: !3, line: 3900, type: !3511)
!3993 = !DILocation(line: 3900, column: 19, scope: !3987)
!3994 = !DILocation(line: 3902, column: 12, scope: !3987)
!3995 = !DILocation(line: 3902, column: 3, scope: !3987)
!3996 = !DILocation(line: 3903, column: 3, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3987, file: !3, line: 3903, column: 3)
!3998 = !DILocation(line: 3903, column: 3, scope: !3999)
!3999 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 3903, column: 3)
!4000 = !DILocation(line: 3904, column: 23, scope: !3999)
!4001 = !DILocation(line: 3904, column: 29, scope: !3999)
!4002 = !DILocation(line: 3904, column: 5, scope: !3999)
!4003 = distinct !{!4003, !3996, !4004}
!4004 = !DILocation(line: 3904, column: 41, scope: !3997)
!4005 = !DILocation(line: 3905, column: 12, scope: !3987)
!4006 = !DILocation(line: 3905, column: 3, scope: !3987)
!4007 = !DILocation(line: 3906, column: 1, scope: !3987)
!4008 = distinct !DISubprogram(name: "debug_all_asserts", scope: !3, file: !3, line: 3912, type: !3887, scopeLine: 3913, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4009 = !DILocation(line: 3914, column: 21, scope: !4008)
!4010 = !DILocation(line: 3914, column: 3, scope: !4008)
!4011 = !DILocation(line: 3915, column: 1, scope: !4008)
!4012 = distinct !DISubprogram(name: "gate_vrp", scope: !3, file: !3, line: 7413, type: !3205, scopeLine: 7414, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4013 = !DILocation(line: 7415, column: 10, scope: !4012)
!4014 = !DILocation(line: 7415, column: 24, scope: !4012)
!4015 = !DILocation(line: 7415, column: 3, scope: !4012)
!4016 = distinct !DISubprogram(name: "execute_vrp", scope: !3, file: !3, line: 7345, type: !3209, scopeLine: 7346, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4017 = !DILocalVariable(name: "i", scope: !4016, file: !3, line: 7347, type: !1740)
!4018 = !DILocation(line: 7347, column: 7, scope: !4016)
!4019 = !DILocalVariable(name: "e", scope: !4016, file: !3, line: 7348, type: !2056)
!4020 = !DILocation(line: 7348, column: 8, scope: !4016)
!4021 = !DILocalVariable(name: "su", scope: !4016, file: !3, line: 7349, type: !4022)
!4022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3162, size: 64)
!4023 = !DILocation(line: 7349, column: 18, scope: !4016)
!4024 = !DILocation(line: 7351, column: 3, scope: !4016)
!4025 = !DILocation(line: 7352, column: 3, scope: !4016)
!4026 = !DILocation(line: 7353, column: 3, scope: !4016)
!4027 = !DILocation(line: 7355, column: 3, scope: !4016)
!4028 = !DILocation(line: 7357, column: 21, scope: !4016)
!4029 = !DILocation(line: 7357, column: 19, scope: !4016)
!4030 = !DILocation(line: 7358, column: 28, scope: !4016)
!4031 = !DILocation(line: 7358, column: 26, scope: !4016)
!4032 = !DILocation(line: 7359, column: 3, scope: !4016)
!4033 = !DILocation(line: 7361, column: 3, scope: !4016)
!4034 = !DILocation(line: 7362, column: 3, scope: !4016)
!4035 = !DILocation(line: 7363, column: 3, scope: !4016)
!4036 = !DILocation(line: 7368, column: 3, scope: !4016)
!4037 = !DILocation(line: 7375, column: 3, scope: !4016)
!4038 = !DILocation(line: 7377, column: 3, scope: !4016)
!4039 = !DILocation(line: 7381, column: 10, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 7381, column: 3)
!4041 = !DILocation(line: 7381, column: 8, scope: !4040)
!4042 = !DILocation(line: 7381, column: 15, scope: !4043)
!4043 = distinct !DILexicalBlock(scope: !4040, file: !3, line: 7381, column: 3)
!4044 = !DILocation(line: 7381, column: 3, scope: !4040)
!4045 = !DILocation(line: 7382, column: 18, scope: !4043)
!4046 = !DILocation(line: 7382, column: 5, scope: !4043)
!4047 = !DILocation(line: 7381, column: 58, scope: !4043)
!4048 = !DILocation(line: 7381, column: 3, scope: !4043)
!4049 = distinct !{!4049, !4044, !4050}
!4050 = !DILocation(line: 7382, column: 19, scope: !4040)
!4051 = !DILocation(line: 7384, column: 10, scope: !4052)
!4052 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 7384, column: 3)
!4053 = !DILocation(line: 7384, column: 8, scope: !4052)
!4054 = !DILocation(line: 7384, column: 15, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !4052, file: !3, line: 7384, column: 3)
!4056 = !DILocation(line: 7384, column: 3, scope: !4052)
!4057 = !DILocalVariable(name: "j", scope: !4058, file: !3, line: 7386, type: !2221)
!4058 = distinct !DILexicalBlock(scope: !4055, file: !3, line: 7385, column: 5)
!4059 = !DILocation(line: 7386, column: 14, scope: !4058)
!4060 = !DILocalVariable(name: "n", scope: !4058, file: !3, line: 7387, type: !2221)
!4061 = !DILocation(line: 7387, column: 14, scope: !4058)
!4062 = !DILocation(line: 7387, column: 18, scope: !4058)
!4063 = !DILocalVariable(name: "label", scope: !4058, file: !3, line: 7388, type: !1747)
!4064 = !DILocation(line: 7388, column: 12, scope: !4058)
!4065 = !DILocation(line: 7389, column: 37, scope: !4058)
!4066 = !DILocation(line: 7389, column: 41, scope: !4058)
!4067 = !DILocation(line: 7389, column: 47, scope: !4058)
!4068 = !DILocation(line: 7389, column: 7, scope: !4058)
!4069 = !DILocation(line: 7390, column: 14, scope: !4070)
!4070 = distinct !DILexicalBlock(scope: !4058, file: !3, line: 7390, column: 7)
!4071 = !DILocation(line: 7390, column: 12, scope: !4070)
!4072 = !DILocation(line: 7390, column: 19, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !4070, file: !3, line: 7390, column: 7)
!4074 = !DILocation(line: 7390, column: 23, scope: !4073)
!4075 = !DILocation(line: 7390, column: 21, scope: !4073)
!4076 = !DILocation(line: 7390, column: 7, scope: !4070)
!4077 = !DILocation(line: 7391, column: 27, scope: !4073)
!4078 = !DILocation(line: 7391, column: 31, scope: !4073)
!4079 = !DILocation(line: 7391, column: 37, scope: !4073)
!4080 = !DILocation(line: 7391, column: 40, scope: !4073)
!4081 = !DILocation(line: 7391, column: 2, scope: !4073)
!4082 = !DILocation(line: 7390, column: 27, scope: !4073)
!4083 = !DILocation(line: 7390, column: 7, scope: !4073)
!4084 = distinct !{!4084, !4076, !4085}
!4085 = !DILocation(line: 7391, column: 65, scope: !4070)
!4086 = !DILocation(line: 7395, column: 44, scope: !4058)
!4087 = !DILocation(line: 7395, column: 48, scope: !4058)
!4088 = !DILocation(line: 7395, column: 15, scope: !4058)
!4089 = !DILocation(line: 7395, column: 13, scope: !4058)
!4090 = !DILocation(line: 7396, column: 7, scope: !4058)
!4091 = !DILocation(line: 7396, column: 24, scope: !4058)
!4092 = !DILocation(line: 7397, column: 7, scope: !4058)
!4093 = !DILocation(line: 7397, column: 25, scope: !4058)
!4094 = !DILocation(line: 7398, column: 5, scope: !4058)
!4095 = !DILocation(line: 7384, column: 75, scope: !4055)
!4096 = !DILocation(line: 7384, column: 3, scope: !4055)
!4097 = distinct !{!4097, !4056, !4098}
!4098 = !DILocation(line: 7398, column: 5, scope: !4052)
!4099 = !DILocation(line: 7400, column: 7, scope: !4100)
!4100 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 7400, column: 7)
!4101 = !DILocation(line: 7400, column: 42, scope: !4100)
!4102 = !DILocation(line: 7400, column: 7, scope: !4016)
!4103 = !DILocation(line: 7401, column: 5, scope: !4100)
!4104 = !DILocation(line: 7403, column: 3, scope: !4016)
!4105 = !DILocation(line: 7404, column: 3, scope: !4016)
!4106 = !DILocation(line: 7405, column: 3, scope: !4016)
!4107 = !DILocation(line: 7407, column: 3, scope: !4016)
!4108 = !DILocation(line: 7408, column: 3, scope: !4016)
!4109 = !DILocation(line: 7409, column: 3, scope: !4016)
!4110 = distinct !DISubprogram(name: "nonnull_arg_p", scope: !3, file: !3, line: 313, type: !3251, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4111 = !DILocalVariable(name: "arg", arg: 1, scope: !4110, file: !3, line: 313, type: !3139)
!4112 = !DILocation(line: 313, column: 27, scope: !4110)
!4113 = !DILocalVariable(name: "t", scope: !4110, file: !3, line: 315, type: !1747)
!4114 = !DILocation(line: 315, column: 8, scope: !4110)
!4115 = !DILocalVariable(name: "attrs", scope: !4110, file: !3, line: 315, type: !1747)
!4116 = !DILocation(line: 315, column: 11, scope: !4110)
!4117 = !DILocalVariable(name: "fntype", scope: !4110, file: !3, line: 315, type: !1747)
!4118 = !DILocation(line: 315, column: 18, scope: !4110)
!4119 = !DILocalVariable(name: "arg_num", scope: !4110, file: !3, line: 316, type: !1801)
!4120 = !DILocation(line: 316, column: 26, scope: !4110)
!4121 = !DILocation(line: 318, column: 3, scope: !4110)
!4122 = !DILocation(line: 321, column: 7, scope: !4123)
!4123 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 321, column: 7)
!4124 = !DILocation(line: 321, column: 14, scope: !4123)
!4125 = !DILocation(line: 321, column: 20, scope: !4123)
!4126 = !DILocation(line: 321, column: 11, scope: !4123)
!4127 = !DILocation(line: 321, column: 7, scope: !4110)
!4128 = !DILocation(line: 322, column: 5, scope: !4123)
!4129 = !DILocation(line: 324, column: 12, scope: !4110)
!4130 = !DILocation(line: 324, column: 10, scope: !4110)
!4131 = !DILocation(line: 325, column: 40, scope: !4110)
!4132 = !DILocation(line: 325, column: 11, scope: !4110)
!4133 = !DILocation(line: 325, column: 9, scope: !4110)
!4134 = !DILocation(line: 328, column: 7, scope: !4135)
!4135 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 328, column: 7)
!4136 = !DILocation(line: 328, column: 13, scope: !4135)
!4137 = !DILocation(line: 328, column: 7, scope: !4110)
!4138 = !DILocation(line: 329, column: 5, scope: !4135)
!4139 = !DILocation(line: 332, column: 7, scope: !4140)
!4140 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 332, column: 7)
!4141 = !DILocation(line: 332, column: 26, scope: !4140)
!4142 = !DILocation(line: 332, column: 7, scope: !4110)
!4143 = !DILocation(line: 333, column: 5, scope: !4140)
!4144 = !DILocation(line: 336, column: 16, scope: !4145)
!4145 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 336, column: 3)
!4146 = !DILocation(line: 336, column: 25, scope: !4145)
!4147 = !DILocation(line: 336, column: 23, scope: !4145)
!4148 = !DILocation(line: 336, column: 8, scope: !4145)
!4149 = !DILocation(line: 337, column: 8, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4145, file: !3, line: 336, column: 3)
!4151 = !DILocation(line: 336, column: 3, scope: !4145)
!4152 = !DILocation(line: 340, column: 11, scope: !4153)
!4153 = distinct !DILexicalBlock(scope: !4154, file: !3, line: 340, column: 11)
!4154 = distinct !DILexicalBlock(scope: !4150, file: !3, line: 339, column: 5)
!4155 = !DILocation(line: 340, column: 16, scope: !4153)
!4156 = !DILocation(line: 340, column: 13, scope: !4153)
!4157 = !DILocation(line: 340, column: 11, scope: !4154)
!4158 = !DILocation(line: 341, column: 2, scope: !4153)
!4159 = !DILocation(line: 342, column: 5, scope: !4154)
!4160 = !DILocation(line: 338, column: 12, scope: !4150)
!4161 = !DILocation(line: 338, column: 10, scope: !4150)
!4162 = !DILocation(line: 338, column: 35, scope: !4150)
!4163 = !DILocation(line: 336, column: 3, scope: !4150)
!4164 = distinct !{!4164, !4151, !4165}
!4165 = !DILocation(line: 342, column: 5, scope: !4145)
!4166 = !DILocation(line: 344, column: 3, scope: !4110)
!4167 = !DILocation(line: 347, column: 12, scope: !4168)
!4168 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 347, column: 3)
!4169 = !DILocation(line: 347, column: 10, scope: !4168)
!4170 = !DILocation(line: 347, column: 8, scope: !4168)
!4171 = !DILocation(line: 347, column: 32, scope: !4172)
!4172 = distinct !DILexicalBlock(scope: !4168, file: !3, line: 347, column: 3)
!4173 = !DILocation(line: 347, column: 3, scope: !4168)
!4174 = !DILocation(line: 349, column: 29, scope: !4175)
!4175 = distinct !DILexicalBlock(scope: !4176, file: !3, line: 349, column: 11)
!4176 = distinct !DILexicalBlock(scope: !4172, file: !3, line: 348, column: 5)
!4177 = !DILocation(line: 349, column: 45, scope: !4175)
!4178 = !DILocation(line: 349, column: 11, scope: !4175)
!4179 = !DILocation(line: 349, column: 54, scope: !4175)
!4180 = !DILocation(line: 349, column: 11, scope: !4176)
!4181 = !DILocation(line: 350, column: 2, scope: !4175)
!4182 = !DILocation(line: 351, column: 5, scope: !4176)
!4183 = !DILocation(line: 347, column: 39, scope: !4172)
!4184 = !DILocation(line: 347, column: 37, scope: !4172)
!4185 = !DILocation(line: 347, column: 3, scope: !4172)
!4186 = distinct !{!4186, !4173, !4187}
!4187 = !DILocation(line: 351, column: 5, scope: !4168)
!4188 = !DILocation(line: 353, column: 3, scope: !4110)
!4189 = !DILocation(line: 354, column: 1, scope: !4110)
!4190 = distinct !DISubprogram(name: "set_value_range_to_nonnull", scope: !3, file: !3, line: 549, type: !4191, scopeLine: 550, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4191 = !DISubroutineType(types: !4192)
!4192 = !{null, !1741, !1747}
!4193 = !DILocalVariable(name: "vr", arg: 1, scope: !4190, file: !3, line: 549, type: !1741)
!4194 = !DILocation(line: 549, column: 44, scope: !4190)
!4195 = !DILocalVariable(name: "type", arg: 2, scope: !4190, file: !3, line: 549, type: !1747)
!4196 = !DILocation(line: 549, column: 53, scope: !4190)
!4197 = !DILocalVariable(name: "zero", scope: !4190, file: !3, line: 551, type: !1747)
!4198 = !DILocation(line: 551, column: 8, scope: !4190)
!4199 = !DILocation(line: 551, column: 30, scope: !4190)
!4200 = !DILocation(line: 551, column: 15, scope: !4190)
!4201 = !DILocation(line: 552, column: 20, scope: !4190)
!4202 = !DILocation(line: 552, column: 39, scope: !4190)
!4203 = !DILocation(line: 552, column: 45, scope: !4190)
!4204 = !DILocation(line: 552, column: 51, scope: !4190)
!4205 = !DILocation(line: 552, column: 55, scope: !4190)
!4206 = !DILocation(line: 552, column: 3, scope: !4190)
!4207 = !DILocation(line: 553, column: 1, scope: !4190)
!4208 = distinct !DISubprogram(name: "set_value_range_to_varying", scope: !3, file: !3, line: 360, type: !3830, scopeLine: 361, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4209 = !DILocalVariable(name: "vr", arg: 1, scope: !4208, file: !3, line: 360, type: !1741)
!4210 = !DILocation(line: 360, column: 44, scope: !4208)
!4211 = !DILocation(line: 362, column: 3, scope: !4208)
!4212 = !DILocation(line: 362, column: 7, scope: !4208)
!4213 = !DILocation(line: 362, column: 12, scope: !4208)
!4214 = !DILocation(line: 363, column: 13, scope: !4208)
!4215 = !DILocation(line: 363, column: 17, scope: !4208)
!4216 = !DILocation(line: 363, column: 21, scope: !4208)
!4217 = !DILocation(line: 363, column: 3, scope: !4208)
!4218 = !DILocation(line: 363, column: 7, scope: !4208)
!4219 = !DILocation(line: 363, column: 11, scope: !4208)
!4220 = !DILocation(line: 364, column: 7, scope: !4221)
!4221 = distinct !DILexicalBlock(scope: !4208, file: !3, line: 364, column: 7)
!4222 = !DILocation(line: 364, column: 11, scope: !4221)
!4223 = !DILocation(line: 364, column: 7, scope: !4208)
!4224 = !DILocation(line: 365, column: 19, scope: !4221)
!4225 = !DILocation(line: 365, column: 23, scope: !4221)
!4226 = !DILocation(line: 365, column: 5, scope: !4221)
!4227 = !DILocation(line: 366, column: 1, scope: !4208)
!4228 = distinct !DISubprogram(name: "set_value_range", scope: !3, file: !3, line: 372, type: !4229, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4229 = !DISubroutineType(types: !4230)
!4230 = !{null, !1741, !390, !1747, !1747, !2645}
!4231 = !DILocalVariable(name: "vr", arg: 1, scope: !4228, file: !3, line: 372, type: !1741)
!4232 = !DILocation(line: 372, column: 33, scope: !4228)
!4233 = !DILocalVariable(name: "t", arg: 2, scope: !4228, file: !3, line: 372, type: !390)
!4234 = !DILocation(line: 372, column: 59, scope: !4228)
!4235 = !DILocalVariable(name: "min", arg: 3, scope: !4228, file: !3, line: 372, type: !1747)
!4236 = !DILocation(line: 372, column: 67, scope: !4228)
!4237 = !DILocalVariable(name: "max", arg: 4, scope: !4228, file: !3, line: 373, type: !1747)
!4238 = !DILocation(line: 373, column: 9, scope: !4228)
!4239 = !DILocalVariable(name: "equiv", arg: 5, scope: !4228, file: !3, line: 373, type: !2645)
!4240 = !DILocation(line: 373, column: 21, scope: !4228)
!4241 = !DILocation(line: 401, column: 14, scope: !4228)
!4242 = !DILocation(line: 401, column: 3, scope: !4228)
!4243 = !DILocation(line: 401, column: 7, scope: !4228)
!4244 = !DILocation(line: 401, column: 12, scope: !4228)
!4245 = !DILocation(line: 402, column: 13, scope: !4228)
!4246 = !DILocation(line: 402, column: 3, scope: !4228)
!4247 = !DILocation(line: 402, column: 7, scope: !4228)
!4248 = !DILocation(line: 402, column: 11, scope: !4228)
!4249 = !DILocation(line: 403, column: 13, scope: !4228)
!4250 = !DILocation(line: 403, column: 3, scope: !4228)
!4251 = !DILocation(line: 403, column: 7, scope: !4228)
!4252 = !DILocation(line: 403, column: 11, scope: !4228)
!4253 = !DILocation(line: 407, column: 7, scope: !4254)
!4254 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 407, column: 7)
!4255 = !DILocation(line: 407, column: 11, scope: !4254)
!4256 = !DILocation(line: 407, column: 17, scope: !4254)
!4257 = !DILocation(line: 408, column: 7, scope: !4254)
!4258 = !DILocation(line: 408, column: 10, scope: !4254)
!4259 = !DILocation(line: 408, column: 16, scope: !4254)
!4260 = !DILocation(line: 407, column: 7, scope: !4228)
!4261 = !DILocation(line: 409, column: 17, scope: !4254)
!4262 = !DILocation(line: 409, column: 5, scope: !4254)
!4263 = !DILocation(line: 409, column: 9, scope: !4254)
!4264 = !DILocation(line: 409, column: 15, scope: !4254)
!4265 = !DILocation(line: 411, column: 7, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 411, column: 7)
!4267 = !DILocation(line: 411, column: 16, scope: !4266)
!4268 = !DILocation(line: 411, column: 20, scope: !4266)
!4269 = !DILocation(line: 411, column: 13, scope: !4266)
!4270 = !DILocation(line: 411, column: 7, scope: !4228)
!4271 = !DILocation(line: 413, column: 11, scope: !4272)
!4272 = distinct !DILexicalBlock(scope: !4273, file: !3, line: 413, column: 11)
!4273 = distinct !DILexicalBlock(scope: !4266, file: !3, line: 412, column: 5)
!4274 = !DILocation(line: 413, column: 17, scope: !4272)
!4275 = !DILocation(line: 413, column: 21, scope: !4272)
!4276 = !DILocation(line: 413, column: 11, scope: !4273)
!4277 = !DILocation(line: 414, column: 15, scope: !4272)
!4278 = !DILocation(line: 414, column: 19, scope: !4272)
!4279 = !DILocation(line: 414, column: 26, scope: !4272)
!4280 = !DILocation(line: 414, column: 2, scope: !4272)
!4281 = !DILocation(line: 416, column: 16, scope: !4272)
!4282 = !DILocation(line: 416, column: 20, scope: !4272)
!4283 = !DILocation(line: 416, column: 2, scope: !4272)
!4284 = !DILocation(line: 417, column: 5, scope: !4273)
!4285 = !DILocation(line: 418, column: 1, scope: !4228)
!4286 = distinct !DISubprogram(name: "compare_values_warnv", scope: !3, file: !3, line: 1066, type: !4287, scopeLine: 1067, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4287 = !DISubroutineType(types: !4288)
!4288 = !{!1740, !1747, !1747, !3130}
!4289 = !DILocalVariable(name: "val1", arg: 1, scope: !4286, file: !3, line: 1066, type: !1747)
!4290 = !DILocation(line: 1066, column: 28, scope: !4286)
!4291 = !DILocalVariable(name: "val2", arg: 2, scope: !4286, file: !3, line: 1066, type: !1747)
!4292 = !DILocation(line: 1066, column: 39, scope: !4286)
!4293 = !DILocalVariable(name: "strict_overflow_p", arg: 3, scope: !4286, file: !3, line: 1066, type: !3130)
!4294 = !DILocation(line: 1066, column: 51, scope: !4286)
!4295 = !DILocation(line: 1068, column: 7, scope: !4296)
!4296 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 1068, column: 7)
!4297 = !DILocation(line: 1068, column: 15, scope: !4296)
!4298 = !DILocation(line: 1068, column: 12, scope: !4296)
!4299 = !DILocation(line: 1068, column: 7, scope: !4286)
!4300 = !DILocation(line: 1069, column: 5, scope: !4296)
!4301 = !DILocation(line: 1073, column: 3, scope: !4286)
!4302 = !DILocation(line: 1077, column: 10, scope: !4286)
!4303 = !DILocation(line: 1077, column: 8, scope: !4286)
!4304 = !DILocation(line: 1078, column: 3, scope: !4286)
!4305 = !DILocation(line: 1080, column: 8, scope: !4306)
!4306 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 1080, column: 7)
!4307 = !DILocation(line: 1080, column: 25, scope: !4306)
!4308 = !DILocation(line: 1081, column: 8, scope: !4306)
!4309 = !DILocation(line: 1081, column: 11, scope: !4306)
!4310 = !DILocation(line: 1081, column: 28, scope: !4306)
!4311 = !DILocation(line: 1082, column: 8, scope: !4306)
!4312 = !DILocation(line: 1082, column: 11, scope: !4306)
!4313 = !DILocation(line: 1082, column: 28, scope: !4306)
!4314 = !DILocation(line: 1083, column: 7, scope: !4306)
!4315 = !DILocation(line: 1083, column: 11, scope: !4306)
!4316 = !DILocation(line: 1083, column: 28, scope: !4306)
!4317 = !DILocation(line: 1084, column: 4, scope: !4306)
!4318 = !DILocation(line: 1084, column: 7, scope: !4306)
!4319 = !DILocation(line: 1084, column: 24, scope: !4306)
!4320 = !DILocation(line: 1085, column: 4, scope: !4306)
!4321 = !DILocation(line: 1085, column: 7, scope: !4306)
!4322 = !DILocation(line: 1085, column: 24, scope: !4306)
!4323 = !DILocation(line: 1080, column: 7, scope: !4286)
!4324 = !DILocalVariable(name: "n1", scope: !4325, file: !3, line: 1087, type: !1747)
!4325 = distinct !DILexicalBlock(scope: !4306, file: !3, line: 1086, column: 5)
!4326 = !DILocation(line: 1087, column: 12, scope: !4325)
!4327 = !DILocalVariable(name: "c1", scope: !4325, file: !3, line: 1087, type: !1747)
!4328 = !DILocation(line: 1087, column: 16, scope: !4325)
!4329 = !DILocalVariable(name: "n2", scope: !4325, file: !3, line: 1087, type: !1747)
!4330 = !DILocation(line: 1087, column: 20, scope: !4325)
!4331 = !DILocalVariable(name: "c2", scope: !4325, file: !3, line: 1087, type: !1747)
!4332 = !DILocation(line: 1087, column: 24, scope: !4325)
!4333 = !DILocalVariable(name: "code1", scope: !4325, file: !3, line: 1088, type: !134)
!4334 = !DILocation(line: 1088, column: 22, scope: !4325)
!4335 = !DILocalVariable(name: "code2", scope: !4325, file: !3, line: 1088, type: !134)
!4336 = !DILocation(line: 1088, column: 29, scope: !4325)
!4337 = !DILocation(line: 1093, column: 11, scope: !4338)
!4338 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 1093, column: 11)
!4339 = !DILocation(line: 1093, column: 28, scope: !4338)
!4340 = !DILocation(line: 1093, column: 11, scope: !4325)
!4341 = !DILocation(line: 1095, column: 10, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4338, file: !3, line: 1094, column: 2)
!4343 = !DILocation(line: 1096, column: 9, scope: !4342)
!4344 = !DILocation(line: 1096, column: 7, scope: !4342)
!4345 = !DILocation(line: 1097, column: 7, scope: !4342)
!4346 = !DILocation(line: 1098, column: 2, scope: !4342)
!4347 = !DILocation(line: 1101, column: 12, scope: !4348)
!4348 = distinct !DILexicalBlock(scope: !4338, file: !3, line: 1100, column: 2)
!4349 = !DILocation(line: 1101, column: 10, scope: !4348)
!4350 = !DILocation(line: 1102, column: 9, scope: !4348)
!4351 = !DILocation(line: 1102, column: 7, scope: !4348)
!4352 = !DILocation(line: 1103, column: 9, scope: !4348)
!4353 = !DILocation(line: 1103, column: 7, scope: !4348)
!4354 = !DILocation(line: 1104, column: 26, scope: !4355)
!4355 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 1104, column: 8)
!4356 = !DILocation(line: 1104, column: 8, scope: !4355)
!4357 = !DILocation(line: 1104, column: 30, scope: !4355)
!4358 = !DILocation(line: 1104, column: 8, scope: !4348)
!4359 = !DILocation(line: 1106, column: 43, scope: !4360)
!4360 = distinct !DILexicalBlock(scope: !4361, file: !3, line: 1106, column: 12)
!4361 = distinct !DILexicalBlock(scope: !4355, file: !3, line: 1105, column: 6)
!4362 = !DILocation(line: 1106, column: 12, scope: !4360)
!4363 = !DILocation(line: 1106, column: 12, scope: !4361)
!4364 = !DILocation(line: 1107, column: 3, scope: !4360)
!4365 = !DILocation(line: 1108, column: 50, scope: !4361)
!4366 = !DILocation(line: 1108, column: 66, scope: !4361)
!4367 = !DILocation(line: 1108, column: 13, scope: !4361)
!4368 = !DILocation(line: 1108, column: 11, scope: !4361)
!4369 = !DILocation(line: 1109, column: 13, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4361, file: !3, line: 1109, column: 12)
!4371 = !DILocation(line: 1109, column: 12, scope: !4361)
!4372 = !DILocation(line: 1110, column: 3, scope: !4370)
!4373 = !DILocation(line: 1111, column: 16, scope: !4361)
!4374 = !DILocation(line: 1111, column: 22, scope: !4361)
!4375 = !DILocation(line: 1111, column: 14, scope: !4361)
!4376 = !DILocation(line: 1112, column: 6, scope: !4361)
!4377 = !DILocation(line: 1115, column: 11, scope: !4378)
!4378 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 1115, column: 11)
!4379 = !DILocation(line: 1115, column: 28, scope: !4378)
!4380 = !DILocation(line: 1115, column: 11, scope: !4325)
!4381 = !DILocation(line: 1117, column: 10, scope: !4382)
!4382 = distinct !DILexicalBlock(scope: !4378, file: !3, line: 1116, column: 2)
!4383 = !DILocation(line: 1118, column: 9, scope: !4382)
!4384 = !DILocation(line: 1118, column: 7, scope: !4382)
!4385 = !DILocation(line: 1119, column: 7, scope: !4382)
!4386 = !DILocation(line: 1120, column: 2, scope: !4382)
!4387 = !DILocation(line: 1123, column: 12, scope: !4388)
!4388 = distinct !DILexicalBlock(scope: !4378, file: !3, line: 1122, column: 2)
!4389 = !DILocation(line: 1123, column: 10, scope: !4388)
!4390 = !DILocation(line: 1124, column: 9, scope: !4388)
!4391 = !DILocation(line: 1124, column: 7, scope: !4388)
!4392 = !DILocation(line: 1125, column: 9, scope: !4388)
!4393 = !DILocation(line: 1125, column: 7, scope: !4388)
!4394 = !DILocation(line: 1126, column: 26, scope: !4395)
!4395 = distinct !DILexicalBlock(scope: !4388, file: !3, line: 1126, column: 8)
!4396 = !DILocation(line: 1126, column: 8, scope: !4395)
!4397 = !DILocation(line: 1126, column: 30, scope: !4395)
!4398 = !DILocation(line: 1126, column: 8, scope: !4388)
!4399 = !DILocation(line: 1128, column: 43, scope: !4400)
!4400 = distinct !DILexicalBlock(scope: !4401, file: !3, line: 1128, column: 12)
!4401 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1127, column: 6)
!4402 = !DILocation(line: 1128, column: 12, scope: !4400)
!4403 = !DILocation(line: 1128, column: 12, scope: !4401)
!4404 = !DILocation(line: 1129, column: 3, scope: !4400)
!4405 = !DILocation(line: 1130, column: 50, scope: !4401)
!4406 = !DILocation(line: 1130, column: 66, scope: !4401)
!4407 = !DILocation(line: 1130, column: 13, scope: !4401)
!4408 = !DILocation(line: 1130, column: 11, scope: !4401)
!4409 = !DILocation(line: 1131, column: 13, scope: !4410)
!4410 = distinct !DILexicalBlock(scope: !4401, file: !3, line: 1131, column: 12)
!4411 = !DILocation(line: 1131, column: 12, scope: !4401)
!4412 = !DILocation(line: 1132, column: 3, scope: !4410)
!4413 = !DILocation(line: 1133, column: 16, scope: !4401)
!4414 = !DILocation(line: 1133, column: 22, scope: !4401)
!4415 = !DILocation(line: 1133, column: 14, scope: !4401)
!4416 = !DILocation(line: 1134, column: 6, scope: !4401)
!4417 = !DILocation(line: 1138, column: 11, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 1138, column: 11)
!4419 = !DILocation(line: 1138, column: 17, scope: !4418)
!4420 = !DILocation(line: 1138, column: 14, scope: !4418)
!4421 = !DILocation(line: 1138, column: 11, scope: !4325)
!4422 = !DILocation(line: 1139, column: 2, scope: !4418)
!4423 = !DILocation(line: 1141, column: 11, scope: !4424)
!4424 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 1141, column: 11)
!4425 = !DILocation(line: 1141, column: 17, scope: !4424)
!4426 = !DILocation(line: 1142, column: 4, scope: !4424)
!4427 = !DILocation(line: 1142, column: 7, scope: !4424)
!4428 = !DILocation(line: 1142, column: 13, scope: !4424)
!4429 = !DILocation(line: 1141, column: 11, scope: !4325)
!4430 = !DILocation(line: 1144, column: 2, scope: !4424)
!4431 = !DILocation(line: 1147, column: 12, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 1147, column: 11)
!4433 = !DILocation(line: 1147, column: 11, scope: !4325)
!4434 = !DILocation(line: 1148, column: 2, scope: !4432)
!4435 = !DILocation(line: 1150, column: 11, scope: !4436)
!4436 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 1150, column: 11)
!4437 = !DILocation(line: 1150, column: 29, scope: !4436)
!4438 = !DILocation(line: 1151, column: 4, scope: !4436)
!4439 = !DILocation(line: 1151, column: 8, scope: !4436)
!4440 = !DILocation(line: 1151, column: 14, scope: !4436)
!4441 = !DILocation(line: 1151, column: 26, scope: !4436)
!4442 = !DILocation(line: 1151, column: 30, scope: !4436)
!4443 = !DILocation(line: 1152, column: 4, scope: !4436)
!4444 = !DILocation(line: 1152, column: 8, scope: !4436)
!4445 = !DILocation(line: 1152, column: 14, scope: !4436)
!4446 = !DILocation(line: 1152, column: 26, scope: !4436)
!4447 = !DILocation(line: 1152, column: 30, scope: !4436)
!4448 = !DILocation(line: 1150, column: 11, scope: !4325)
!4449 = !DILocation(line: 1153, column: 3, scope: !4436)
!4450 = !DILocation(line: 1153, column: 21, scope: !4436)
!4451 = !DILocation(line: 1153, column: 2, scope: !4436)
!4452 = !DILocation(line: 1155, column: 11, scope: !4453)
!4453 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 1155, column: 11)
!4454 = !DILocation(line: 1155, column: 17, scope: !4453)
!4455 = !DILocation(line: 1155, column: 11, scope: !4325)
!4456 = !DILocation(line: 1157, column: 8, scope: !4457)
!4457 = distinct !DILexicalBlock(scope: !4458, file: !3, line: 1157, column: 8)
!4458 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 1156, column: 2)
!4459 = !DILocation(line: 1157, column: 14, scope: !4457)
!4460 = !DILocation(line: 1157, column: 8, scope: !4458)
!4461 = !DILocation(line: 1159, column: 6, scope: !4457)
!4462 = !DILocation(line: 1160, column: 13, scope: !4463)
!4463 = distinct !DILexicalBlock(scope: !4457, file: !3, line: 1160, column: 13)
!4464 = !DILocation(line: 1160, column: 19, scope: !4463)
!4465 = !DILocation(line: 1160, column: 13, scope: !4457)
!4466 = !DILocation(line: 1162, column: 6, scope: !4463)
!4467 = !DILocation(line: 1163, column: 2, scope: !4458)
!4468 = !DILocation(line: 1164, column: 16, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 1164, column: 16)
!4470 = !DILocation(line: 1164, column: 22, scope: !4469)
!4471 = !DILocation(line: 1164, column: 16, scope: !4453)
!4472 = !DILocation(line: 1166, column: 8, scope: !4473)
!4473 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 1166, column: 8)
!4474 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 1165, column: 2)
!4475 = !DILocation(line: 1166, column: 14, scope: !4473)
!4476 = !DILocation(line: 1166, column: 8, scope: !4474)
!4477 = !DILocation(line: 1168, column: 6, scope: !4473)
!4478 = !DILocation(line: 1169, column: 13, scope: !4479)
!4479 = distinct !DILexicalBlock(scope: !4473, file: !3, line: 1169, column: 13)
!4480 = !DILocation(line: 1169, column: 19, scope: !4479)
!4481 = !DILocation(line: 1169, column: 13, scope: !4473)
!4482 = !DILocation(line: 1171, column: 35, scope: !4479)
!4483 = !DILocation(line: 1171, column: 39, scope: !4479)
!4484 = !DILocation(line: 1171, column: 43, scope: !4479)
!4485 = !DILocation(line: 1171, column: 13, scope: !4479)
!4486 = !DILocation(line: 1171, column: 6, scope: !4479)
!4487 = !DILocation(line: 1172, column: 13, scope: !4488)
!4488 = distinct !DILexicalBlock(scope: !4479, file: !3, line: 1172, column: 13)
!4489 = !DILocation(line: 1172, column: 19, scope: !4488)
!4490 = !DILocation(line: 1172, column: 13, scope: !4479)
!4491 = !DILocation(line: 1174, column: 6, scope: !4488)
!4492 = !DILocation(line: 1175, column: 2, scope: !4474)
!4493 = !DILocation(line: 1176, column: 16, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 1176, column: 16)
!4495 = !DILocation(line: 1176, column: 22, scope: !4494)
!4496 = !DILocation(line: 1176, column: 16, scope: !4469)
!4497 = !DILocation(line: 1178, column: 8, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4499, file: !3, line: 1178, column: 8)
!4499 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 1177, column: 2)
!4500 = !DILocation(line: 1178, column: 14, scope: !4498)
!4501 = !DILocation(line: 1178, column: 8, scope: !4499)
!4502 = !DILocation(line: 1180, column: 6, scope: !4498)
!4503 = !DILocation(line: 1181, column: 13, scope: !4504)
!4504 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 1181, column: 13)
!4505 = !DILocation(line: 1181, column: 19, scope: !4504)
!4506 = !DILocation(line: 1181, column: 13, scope: !4498)
!4507 = !DILocation(line: 1183, column: 6, scope: !4504)
!4508 = !DILocation(line: 1184, column: 13, scope: !4509)
!4509 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 1184, column: 13)
!4510 = !DILocation(line: 1184, column: 19, scope: !4509)
!4511 = !DILocation(line: 1184, column: 13, scope: !4504)
!4512 = !DILocation(line: 1187, column: 35, scope: !4509)
!4513 = !DILocation(line: 1187, column: 39, scope: !4509)
!4514 = !DILocation(line: 1187, column: 43, scope: !4509)
!4515 = !DILocation(line: 1187, column: 13, scope: !4509)
!4516 = !DILocation(line: 1187, column: 6, scope: !4509)
!4517 = !DILocation(line: 1188, column: 2, scope: !4499)
!4518 = !DILocation(line: 1190, column: 7, scope: !4325)
!4519 = !DILocation(line: 1191, column: 5, scope: !4325)
!4520 = !DILocation(line: 1194, column: 33, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 1194, column: 7)
!4522 = !DILocation(line: 1194, column: 8, scope: !4521)
!4523 = !DILocation(line: 1194, column: 39, scope: !4521)
!4524 = !DILocation(line: 1194, column: 68, scope: !4521)
!4525 = !DILocation(line: 1194, column: 43, scope: !4521)
!4526 = !DILocation(line: 1194, column: 7, scope: !4286)
!4527 = !DILocation(line: 1195, column: 5, scope: !4521)
!4528 = !DILocation(line: 1197, column: 8, scope: !4529)
!4529 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 1197, column: 7)
!4530 = !DILocation(line: 1197, column: 7, scope: !4286)
!4531 = !DILocation(line: 1201, column: 11, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !4533, file: !3, line: 1201, column: 11)
!4533 = distinct !DILexicalBlock(scope: !4529, file: !3, line: 1198, column: 5)
!4534 = !DILocation(line: 1201, column: 32, scope: !4532)
!4535 = !DILocation(line: 1201, column: 35, scope: !4532)
!4536 = !DILocation(line: 1201, column: 11, scope: !4533)
!4537 = !DILocation(line: 1203, column: 8, scope: !4538)
!4538 = distinct !DILexicalBlock(scope: !4539, file: !3, line: 1203, column: 8)
!4539 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 1202, column: 2)
!4540 = !DILocation(line: 1203, column: 26, scope: !4538)
!4541 = !DILocation(line: 1203, column: 8, scope: !4539)
!4542 = !DILocation(line: 1204, column: 7, scope: !4538)
!4543 = !DILocation(line: 1204, column: 25, scope: !4538)
!4544 = !DILocation(line: 1204, column: 6, scope: !4538)
!4545 = !DILocation(line: 1205, column: 39, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4539, file: !3, line: 1205, column: 8)
!4547 = !DILocation(line: 1205, column: 8, scope: !4546)
!4548 = !DILocation(line: 1205, column: 8, scope: !4539)
!4549 = !DILocation(line: 1206, column: 44, scope: !4546)
!4550 = !DILocation(line: 1206, column: 13, scope: !4546)
!4551 = !DILocation(line: 1206, column: 6, scope: !4546)
!4552 = !DILocation(line: 1207, column: 44, scope: !4553)
!4553 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1207, column: 13)
!4554 = !DILocation(line: 1207, column: 13, scope: !4553)
!4555 = !DILocation(line: 1207, column: 13, scope: !4546)
!4556 = !DILocation(line: 1208, column: 6, scope: !4553)
!4557 = !DILocation(line: 1209, column: 44, scope: !4558)
!4558 = distinct !DILexicalBlock(scope: !4553, file: !3, line: 1209, column: 13)
!4559 = !DILocation(line: 1209, column: 13, scope: !4558)
!4560 = !DILocation(line: 1209, column: 13, scope: !4553)
!4561 = !DILocation(line: 1210, column: 44, scope: !4558)
!4562 = !DILocation(line: 1210, column: 13, scope: !4558)
!4563 = !DILocation(line: 1210, column: 6, scope: !4558)
!4564 = !DILocation(line: 1211, column: 44, scope: !4565)
!4565 = distinct !DILexicalBlock(scope: !4558, file: !3, line: 1211, column: 13)
!4566 = !DILocation(line: 1211, column: 13, scope: !4565)
!4567 = !DILocation(line: 1211, column: 13, scope: !4558)
!4568 = !DILocation(line: 1212, column: 6, scope: !4565)
!4569 = !DILocation(line: 1213, column: 4, scope: !4539)
!4570 = !DILocation(line: 1216, column: 36, scope: !4533)
!4571 = !DILocation(line: 1216, column: 42, scope: !4533)
!4572 = !DILocation(line: 1216, column: 14, scope: !4533)
!4573 = !DILocation(line: 1216, column: 7, scope: !4533)
!4574 = !DILocalVariable(name: "t", scope: !4575, file: !3, line: 1220, type: !1747)
!4575 = distinct !DILexicalBlock(scope: !4529, file: !3, line: 1219, column: 5)
!4576 = !DILocation(line: 1220, column: 12, scope: !4575)
!4577 = !DILocation(line: 1223, column: 11, scope: !4578)
!4578 = distinct !DILexicalBlock(scope: !4575, file: !3, line: 1223, column: 11)
!4579 = !DILocation(line: 1223, column: 19, scope: !4578)
!4580 = !DILocation(line: 1223, column: 16, scope: !4578)
!4581 = !DILocation(line: 1223, column: 24, scope: !4578)
!4582 = !DILocation(line: 1223, column: 44, scope: !4578)
!4583 = !DILocation(line: 1223, column: 50, scope: !4578)
!4584 = !DILocation(line: 1223, column: 27, scope: !4578)
!4585 = !DILocation(line: 1223, column: 11, scope: !4575)
!4586 = !DILocation(line: 1224, column: 2, scope: !4578)
!4587 = !DILocation(line: 1227, column: 27, scope: !4588)
!4588 = distinct !DILexicalBlock(scope: !4575, file: !3, line: 1227, column: 11)
!4589 = !DILocation(line: 1227, column: 33, scope: !4588)
!4590 = !DILocation(line: 1227, column: 11, scope: !4588)
!4591 = !DILocation(line: 1227, column: 39, scope: !4588)
!4592 = !DILocation(line: 1227, column: 11, scope: !4575)
!4593 = !DILocation(line: 1228, column: 2, scope: !4588)
!4594 = !DILocation(line: 1231, column: 27, scope: !4595)
!4595 = distinct !DILexicalBlock(scope: !4575, file: !3, line: 1231, column: 11)
!4596 = !DILocation(line: 1231, column: 33, scope: !4595)
!4597 = !DILocation(line: 1231, column: 11, scope: !4595)
!4598 = !DILocation(line: 1231, column: 39, scope: !4595)
!4599 = !DILocation(line: 1231, column: 11, scope: !4575)
!4600 = !DILocation(line: 1232, column: 2, scope: !4595)
!4601 = !DILocation(line: 1238, column: 11, scope: !4602)
!4602 = distinct !DILexicalBlock(scope: !4575, file: !3, line: 1238, column: 11)
!4603 = !DILocation(line: 1238, column: 28, scope: !4602)
!4604 = !DILocation(line: 1239, column: 4, scope: !4602)
!4605 = !DILocation(line: 1239, column: 7, scope: !4602)
!4606 = !DILocation(line: 1239, column: 24, scope: !4602)
!4607 = !DILocation(line: 1238, column: 11, scope: !4575)
!4608 = !DILocation(line: 1241, column: 49, scope: !4609)
!4609 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 1240, column: 2)
!4610 = !DILocation(line: 1241, column: 68, scope: !4609)
!4611 = !DILocation(line: 1241, column: 74, scope: !4609)
!4612 = !DILocation(line: 1241, column: 15, scope: !4609)
!4613 = !DILocation(line: 1241, column: 13, scope: !4609)
!4614 = !DILocation(line: 1242, column: 8, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4609, file: !3, line: 1242, column: 8)
!4616 = !DILocation(line: 1242, column: 10, scope: !4615)
!4617 = !DILocation(line: 1242, column: 27, scope: !4615)
!4618 = !DILocation(line: 1242, column: 13, scope: !4615)
!4619 = !DILocation(line: 1242, column: 8, scope: !4609)
!4620 = !DILocation(line: 1243, column: 6, scope: !4615)
!4621 = !DILocation(line: 1244, column: 2, scope: !4609)
!4622 = !DILocation(line: 1246, column: 7, scope: !4575)
!4623 = !DILocation(line: 1248, column: 1, scope: !4286)
!4624 = distinct !DISubprogram(name: "operand_less_p", scope: !3, file: !3, line: 1010, type: !3341, scopeLine: 1011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4625 = !DILocalVariable(name: "val", arg: 1, scope: !4624, file: !3, line: 1010, type: !1747)
!4626 = !DILocation(line: 1010, column: 22, scope: !4624)
!4627 = !DILocalVariable(name: "val2", arg: 2, scope: !4624, file: !3, line: 1010, type: !1747)
!4628 = !DILocation(line: 1010, column: 32, scope: !4624)
!4629 = !DILocation(line: 1013, column: 7, scope: !4630)
!4630 = distinct !DILexicalBlock(scope: !4624, file: !3, line: 1013, column: 7)
!4631 = !DILocation(line: 1013, column: 23, scope: !4630)
!4632 = !DILocation(line: 1013, column: 38, scope: !4630)
!4633 = !DILocation(line: 1013, column: 41, scope: !4630)
!4634 = !DILocation(line: 1013, column: 58, scope: !4630)
!4635 = !DILocation(line: 1013, column: 7, scope: !4624)
!4636 = !DILocation(line: 1015, column: 11, scope: !4637)
!4637 = distinct !DILexicalBlock(scope: !4638, file: !3, line: 1015, column: 11)
!4638 = distinct !DILexicalBlock(scope: !4630, file: !3, line: 1014, column: 5)
!4639 = !DILocation(line: 1015, column: 11, scope: !4638)
!4640 = !DILocation(line: 1016, column: 9, scope: !4637)
!4641 = !DILocation(line: 0, scope: !4637)
!4642 = !DILocation(line: 1016, column: 2, scope: !4637)
!4643 = !DILocation(line: 1019, column: 8, scope: !4644)
!4644 = distinct !DILexicalBlock(scope: !4645, file: !3, line: 1019, column: 8)
!4645 = distinct !DILexicalBlock(scope: !4637, file: !3, line: 1018, column: 2)
!4646 = !DILocation(line: 1019, column: 8, scope: !4645)
!4647 = !DILocation(line: 1020, column: 6, scope: !4644)
!4648 = !DILocation(line: 1022, column: 5, scope: !4638)
!4649 = !DILocalVariable(name: "tcmp", scope: !4650, file: !3, line: 1025, type: !1747)
!4650 = distinct !DILexicalBlock(scope: !4630, file: !3, line: 1024, column: 5)
!4651 = !DILocation(line: 1025, column: 12, scope: !4650)
!4652 = !DILocation(line: 1027, column: 7, scope: !4650)
!4653 = !DILocation(line: 1029, column: 48, scope: !4650)
!4654 = !DILocation(line: 1029, column: 67, scope: !4650)
!4655 = !DILocation(line: 1029, column: 72, scope: !4650)
!4656 = !DILocation(line: 1029, column: 14, scope: !4650)
!4657 = !DILocation(line: 1029, column: 12, scope: !4650)
!4658 = !DILocation(line: 1031, column: 7, scope: !4650)
!4659 = !DILocation(line: 1033, column: 12, scope: !4660)
!4660 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 1033, column: 11)
!4661 = !DILocation(line: 1034, column: 4, scope: !4660)
!4662 = !DILocation(line: 1034, column: 7, scope: !4660)
!4663 = !DILocation(line: 1034, column: 24, scope: !4660)
!4664 = !DILocation(line: 1033, column: 11, scope: !4650)
!4665 = !DILocation(line: 1035, column: 2, scope: !4660)
!4666 = !DILocation(line: 1037, column: 27, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 1037, column: 11)
!4668 = !DILocation(line: 1037, column: 12, scope: !4667)
!4669 = !DILocation(line: 1037, column: 11, scope: !4650)
!4670 = !DILocation(line: 1038, column: 2, scope: !4667)
!4671 = !DILocation(line: 1042, column: 38, scope: !4672)
!4672 = distinct !DILexicalBlock(scope: !4624, file: !3, line: 1042, column: 7)
!4673 = !DILocation(line: 1042, column: 7, scope: !4672)
!4674 = !DILocation(line: 1042, column: 7, scope: !4624)
!4675 = !DILocation(line: 1043, column: 43, scope: !4672)
!4676 = !DILocation(line: 1043, column: 12, scope: !4672)
!4677 = !DILocation(line: 1043, column: 5, scope: !4672)
!4678 = !DILocation(line: 1044, column: 43, scope: !4679)
!4679 = distinct !DILexicalBlock(scope: !4672, file: !3, line: 1044, column: 12)
!4680 = !DILocation(line: 1044, column: 12, scope: !4679)
!4681 = !DILocation(line: 1044, column: 12, scope: !4672)
!4682 = !DILocation(line: 1045, column: 43, scope: !4679)
!4683 = !DILocation(line: 1045, column: 12, scope: !4679)
!4684 = !DILocation(line: 1045, column: 5, scope: !4679)
!4685 = !DILocation(line: 1047, column: 3, scope: !4624)
!4686 = !DILocation(line: 1048, column: 1, scope: !4624)
!4687 = distinct !DISubprogram(name: "needs_overflow_infinity", scope: !3, file: !3, line: 182, type: !3251, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4688 = !DILocalVariable(name: "type", arg: 1, scope: !4687, file: !3, line: 182, type: !3139)
!4689 = !DILocation(line: 182, column: 37, scope: !4687)
!4690 = !DILocation(line: 184, column: 10, scope: !4687)
!4691 = !DILocation(line: 184, column: 33, scope: !4687)
!4692 = !DILocation(line: 184, column: 37, scope: !4687)
!4693 = !DILocation(line: 184, column: 36, scope: !4687)
!4694 = !DILocation(line: 0, scope: !4687)
!4695 = !DILocation(line: 184, column: 3, scope: !4687)
!4696 = distinct !DISubprogram(name: "vrp_val_min", scope: !3, file: !3, line: 139, type: !4697, scopeLine: 140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4697 = !DISubroutineType(types: !4698)
!4698 = !{!1747, !3139}
!4699 = !DILocalVariable(name: "type", arg: 1, scope: !4696, file: !3, line: 139, type: !3139)
!4700 = !DILocation(line: 139, column: 25, scope: !4696)
!4701 = !DILocation(line: 141, column: 8, scope: !4702)
!4702 = distinct !DILexicalBlock(scope: !4696, file: !3, line: 141, column: 7)
!4703 = !DILocation(line: 141, column: 7, scope: !4696)
!4704 = !DILocation(line: 142, column: 5, scope: !4702)
!4705 = !DILocation(line: 144, column: 10, scope: !4696)
!4706 = !DILocation(line: 144, column: 3, scope: !4696)
!4707 = !DILocation(line: 145, column: 1, scope: !4696)
!4708 = distinct !DISubprogram(name: "vrp_val_max", scope: !3, file: !3, line: 128, type: !4697, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4709 = !DILocalVariable(name: "type", arg: 1, scope: !4708, file: !3, line: 128, type: !3139)
!4710 = !DILocation(line: 128, column: 25, scope: !4708)
!4711 = !DILocation(line: 130, column: 8, scope: !4712)
!4712 = distinct !DILexicalBlock(scope: !4708, file: !3, line: 130, column: 7)
!4713 = !DILocation(line: 130, column: 7, scope: !4708)
!4714 = !DILocation(line: 131, column: 5, scope: !4712)
!4715 = !DILocation(line: 133, column: 10, scope: !4708)
!4716 = !DILocation(line: 133, column: 3, scope: !4708)
!4717 = !DILocation(line: 134, column: 1, scope: !4708)
!4718 = distinct !DISubprogram(name: "insert_range_assertions", scope: !3, file: !3, line: 4979, type: !3887, scopeLine: 4980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4719 = !DILocation(line: 4981, column: 21, scope: !4718)
!4720 = !DILocation(line: 4981, column: 19, scope: !4718)
!4721 = !DILocation(line: 4982, column: 17, scope: !4718)
!4722 = !DILocation(line: 4982, column: 15, scope: !4718)
!4723 = !DILocation(line: 4984, column: 3, scope: !4718)
!4724 = !DILocation(line: 4986, column: 7, scope: !4725)
!4725 = distinct !DILexicalBlock(scope: !4718, file: !3, line: 4986, column: 7)
!4726 = !DILocation(line: 4986, column: 7, scope: !4718)
!4727 = !DILocation(line: 4988, column: 7, scope: !4728)
!4728 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 4987, column: 5)
!4729 = !DILocation(line: 4989, column: 7, scope: !4728)
!4730 = !DILocation(line: 4990, column: 5, scope: !4728)
!4731 = !DILocation(line: 4992, column: 7, scope: !4732)
!4732 = distinct !DILexicalBlock(scope: !4718, file: !3, line: 4992, column: 7)
!4733 = !DILocation(line: 4992, column: 17, scope: !4732)
!4734 = !DILocation(line: 4992, column: 21, scope: !4732)
!4735 = !DILocation(line: 4992, column: 32, scope: !4732)
!4736 = !DILocation(line: 4992, column: 7, scope: !4718)
!4737 = !DILocation(line: 4994, column: 16, scope: !4738)
!4738 = distinct !DILexicalBlock(scope: !4732, file: !3, line: 4993, column: 5)
!4739 = !DILocation(line: 4994, column: 7, scope: !4738)
!4740 = !DILocation(line: 4995, column: 30, scope: !4738)
!4741 = !DILocation(line: 4995, column: 53, scope: !4738)
!4742 = !DILocation(line: 4995, column: 64, scope: !4738)
!4743 = !DILocation(line: 4995, column: 7, scope: !4738)
!4744 = !DILocation(line: 4996, column: 5, scope: !4738)
!4745 = !DILocation(line: 4998, column: 9, scope: !4718)
!4746 = !DILocation(line: 4998, column: 3, scope: !4718)
!4747 = !DILocation(line: 4999, column: 3, scope: !4718)
!4748 = !DILocation(line: 5000, column: 1, scope: !4718)
!4749 = distinct !DISubprogram(name: "VEC_edge_heap_alloc", scope: !343, file: !343, line: 152, type: !4750, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4750 = !DISubroutineType(types: !4751)
!4751 = !{!3145, !1740}
!4752 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4749, file: !343, line: 152, type: !1740)
!4753 = !DILocation(line: 152, column: 1, scope: !4749)
!4754 = distinct !DISubprogram(name: "VEC_switch_update_heap_alloc", scope: !3, file: !3, line: 121, type: !4755, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4755 = !DISubroutineType(types: !4756)
!4756 = !{!3150, !1740}
!4757 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4754, file: !3, line: 121, type: !1740)
!4758 = !DILocation(line: 121, column: 1, scope: !4754)
!4759 = distinct !DISubprogram(name: "vrp_initialize", scope: !3, file: !3, line: 5308, type: !3887, scopeLine: 5309, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4760 = !DILocalVariable(name: "bb", scope: !4759, file: !3, line: 5310, type: !2527)
!4761 = !DILocation(line: 5310, column: 15, scope: !4759)
!4762 = !DILocation(line: 5312, column: 14, scope: !4759)
!4763 = !DILocation(line: 5312, column: 12, scope: !4759)
!4764 = !DILocation(line: 5313, column: 24, scope: !4759)
!4765 = !DILocation(line: 5313, column: 22, scope: !4759)
!4766 = !DILocation(line: 5315, column: 3, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 5315, column: 3)
!4768 = !DILocation(line: 5315, column: 3, scope: !4769)
!4769 = distinct !DILexicalBlock(scope: !4767, file: !3, line: 5315, column: 3)
!4770 = !DILocalVariable(name: "si", scope: !4771, file: !3, line: 5317, type: !3112)
!4771 = distinct !DILexicalBlock(scope: !4769, file: !3, line: 5316, column: 5)
!4772 = !DILocation(line: 5317, column: 28, scope: !4771)
!4773 = !DILocation(line: 5319, column: 33, scope: !4774)
!4774 = distinct !DILexicalBlock(scope: !4771, file: !3, line: 5319, column: 7)
!4775 = !DILocation(line: 5319, column: 17, scope: !4774)
!4776 = !DILocation(line: 5319, column: 12, scope: !4774)
!4777 = !DILocation(line: 5319, column: 39, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4774, file: !3, line: 5319, column: 7)
!4779 = !DILocation(line: 5319, column: 38, scope: !4778)
!4780 = !DILocation(line: 5319, column: 7, scope: !4774)
!4781 = !DILocalVariable(name: "phi", scope: !4782, file: !3, line: 5321, type: !2076)
!4782 = distinct !DILexicalBlock(scope: !4778, file: !3, line: 5320, column: 2)
!4783 = !DILocation(line: 5321, column: 11, scope: !4782)
!4784 = !DILocation(line: 5321, column: 17, scope: !4782)
!4785 = !DILocation(line: 5322, column: 35, scope: !4786)
!4786 = distinct !DILexicalBlock(scope: !4782, file: !3, line: 5322, column: 8)
!4787 = !DILocation(line: 5322, column: 9, scope: !4786)
!4788 = !DILocation(line: 5322, column: 8, scope: !4782)
!4789 = !DILocalVariable(name: "lhs", scope: !4790, file: !3, line: 5324, type: !1747)
!4790 = distinct !DILexicalBlock(scope: !4786, file: !3, line: 5323, column: 6)
!4791 = !DILocation(line: 5324, column: 13, scope: !4790)
!4792 = !DILocation(line: 5324, column: 19, scope: !4790)
!4793 = !DILocation(line: 5325, column: 53, scope: !4790)
!4794 = !DILocation(line: 5325, column: 36, scope: !4790)
!4795 = !DILocation(line: 5325, column: 8, scope: !4790)
!4796 = !DILocation(line: 5326, column: 33, scope: !4790)
!4797 = !DILocation(line: 5326, column: 8, scope: !4790)
!4798 = !DILocation(line: 5327, column: 6, scope: !4790)
!4799 = !DILocation(line: 5329, column: 31, scope: !4786)
!4800 = !DILocation(line: 5329, column: 6, scope: !4786)
!4801 = !DILocation(line: 5330, column: 2, scope: !4782)
!4802 = !DILocation(line: 5319, column: 55, scope: !4778)
!4803 = !DILocation(line: 5319, column: 7, scope: !4778)
!4804 = distinct !{!4804, !4780, !4805}
!4805 = !DILocation(line: 5330, column: 2, scope: !4774)
!4806 = !DILocation(line: 5332, column: 31, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !4771, file: !3, line: 5332, column: 7)
!4808 = !DILocation(line: 5332, column: 17, scope: !4807)
!4809 = !DILocation(line: 5332, column: 12, scope: !4807)
!4810 = !DILocation(line: 5332, column: 37, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 5332, column: 7)
!4812 = !DILocation(line: 5332, column: 36, scope: !4811)
!4813 = !DILocation(line: 5332, column: 7, scope: !4807)
!4814 = !DILocalVariable(name: "stmt", scope: !4815, file: !3, line: 5334, type: !2076)
!4815 = distinct !DILexicalBlock(scope: !4811, file: !3, line: 5333, column: 9)
!4816 = !DILocation(line: 5334, column: 11, scope: !4815)
!4817 = !DILocation(line: 5334, column: 18, scope: !4815)
!4818 = !DILocation(line: 5339, column: 24, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4815, file: !3, line: 5339, column: 8)
!4820 = !DILocation(line: 5339, column: 8, scope: !4819)
!4821 = !DILocation(line: 5339, column: 8, scope: !4815)
!4822 = !DILocation(line: 5340, column: 31, scope: !4819)
!4823 = !DILocation(line: 5340, column: 6, scope: !4819)
!4824 = !DILocation(line: 5341, column: 40, scope: !4825)
!4825 = distinct !DILexicalBlock(scope: !4819, file: !3, line: 5341, column: 13)
!4826 = !DILocation(line: 5341, column: 14, scope: !4825)
!4827 = !DILocation(line: 5341, column: 13, scope: !4819)
!4828 = !DILocalVariable(name: "i", scope: !4829, file: !3, line: 5343, type: !4830)
!4829 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 5342, column: 6)
!4830 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !781, line: 140, baseType: !4831)
!4831 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !781, line: 131, size: 320, elements: !4832)
!4832 = !{!4833, !4834, !4835, !4837, !4839, !4840, !4841}
!4833 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !4831, file: !781, line: 133, baseType: !1866, size: 8)
!4834 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !4831, file: !781, line: 134, baseType: !780, size: 32, offset: 32)
!4835 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !4831, file: !781, line: 135, baseType: !4836, size: 64, offset: 64)
!4836 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !781, line: 42, baseType: !2105)
!4837 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !4831, file: !781, line: 136, baseType: !4838, size: 64, offset: 128)
!4838 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !781, line: 50, baseType: !2112)
!4839 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !4831, file: !781, line: 137, baseType: !1740, size: 32, offset: 192)
!4840 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !4831, file: !781, line: 138, baseType: !1740, size: 32, offset: 224)
!4841 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !4831, file: !781, line: 139, baseType: !2076, size: 64, offset: 256)
!4842 = !DILocation(line: 5343, column: 20, scope: !4829)
!4843 = !DILocalVariable(name: "def", scope: !4829, file: !3, line: 5344, type: !1747)
!4844 = !DILocation(line: 5344, column: 13, scope: !4829)
!4845 = !DILocation(line: 5345, column: 8, scope: !4846)
!4846 = distinct !DILexicalBlock(scope: !4829, file: !3, line: 5345, column: 8)
!4847 = !DILocation(line: 5345, column: 8, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 5345, column: 8)
!4849 = !DILocation(line: 5346, column: 48, scope: !4848)
!4850 = !DILocation(line: 5346, column: 31, scope: !4848)
!4851 = !DILocation(line: 5346, column: 3, scope: !4848)
!4852 = distinct !{!4852, !4845, !4853}
!4853 = !DILocation(line: 5346, column: 52, scope: !4846)
!4854 = !DILocation(line: 5347, column: 33, scope: !4829)
!4855 = !DILocation(line: 5347, column: 8, scope: !4829)
!4856 = !DILocation(line: 5348, column: 6, scope: !4829)
!4857 = !DILocation(line: 5350, column: 31, scope: !4825)
!4858 = !DILocation(line: 5350, column: 6, scope: !4825)
!4859 = !DILocation(line: 5351, column: 2, scope: !4815)
!4860 = !DILocation(line: 5332, column: 53, scope: !4811)
!4861 = !DILocation(line: 5332, column: 7, scope: !4811)
!4862 = distinct !{!4862, !4813, !4863}
!4863 = !DILocation(line: 5351, column: 2, scope: !4807)
!4864 = !DILocation(line: 5352, column: 5, scope: !4771)
!4865 = distinct !{!4865, !4766, !4866}
!4866 = !DILocation(line: 5352, column: 5, scope: !4767)
!4867 = !DILocation(line: 5353, column: 1, scope: !4759)
!4868 = distinct !DISubprogram(name: "vrp_visit_stmt", scope: !3, file: !3, line: 6088, type: !4869, scopeLine: 6089, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4869 = !DISubroutineType(types: !4870)
!4870 = !{!838, !2076, !4871, !2110}
!4871 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2056, size: 64)
!4872 = !DILocalVariable(name: "stmt", arg: 1, scope: !4868, file: !3, line: 6088, type: !2076)
!4873 = !DILocation(line: 6088, column: 24, scope: !4868)
!4874 = !DILocalVariable(name: "taken_edge_p", arg: 2, scope: !4868, file: !3, line: 6088, type: !4871)
!4875 = !DILocation(line: 6088, column: 36, scope: !4868)
!4876 = !DILocalVariable(name: "output_p", arg: 3, scope: !4868, file: !3, line: 6088, type: !2110)
!4877 = !DILocation(line: 6088, column: 56, scope: !4868)
!4878 = !DILocalVariable(name: "def", scope: !4868, file: !3, line: 6090, type: !1747)
!4879 = !DILocation(line: 6090, column: 8, scope: !4868)
!4880 = !DILocalVariable(name: "iter", scope: !4868, file: !3, line: 6091, type: !4830)
!4881 = !DILocation(line: 6091, column: 15, scope: !4868)
!4882 = !DILocation(line: 6093, column: 7, scope: !4883)
!4883 = distinct !DILexicalBlock(scope: !4868, file: !3, line: 6093, column: 7)
!4884 = !DILocation(line: 6093, column: 17, scope: !4883)
!4885 = !DILocation(line: 6093, column: 21, scope: !4883)
!4886 = !DILocation(line: 6093, column: 32, scope: !4883)
!4887 = !DILocation(line: 6093, column: 7, scope: !4868)
!4888 = !DILocation(line: 6095, column: 16, scope: !4889)
!4889 = distinct !DILexicalBlock(scope: !4883, file: !3, line: 6094, column: 5)
!4890 = !DILocation(line: 6095, column: 7, scope: !4889)
!4891 = !DILocation(line: 6096, column: 26, scope: !4889)
!4892 = !DILocation(line: 6096, column: 37, scope: !4889)
!4893 = !DILocation(line: 6096, column: 46, scope: !4889)
!4894 = !DILocation(line: 6096, column: 7, scope: !4889)
!4895 = !DILocation(line: 6097, column: 16, scope: !4889)
!4896 = !DILocation(line: 6097, column: 7, scope: !4889)
!4897 = !DILocation(line: 6098, column: 5, scope: !4889)
!4898 = !DILocation(line: 6100, column: 34, scope: !4899)
!4899 = distinct !DILexicalBlock(scope: !4868, file: !3, line: 6100, column: 7)
!4900 = !DILocation(line: 6100, column: 8, scope: !4899)
!4901 = !DILocation(line: 6100, column: 7, scope: !4868)
!4902 = !DILocation(line: 6101, column: 5, scope: !4899)
!4903 = !DILocation(line: 6102, column: 30, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4899, file: !3, line: 6102, column: 12)
!4905 = !DILocation(line: 6102, column: 12, scope: !4904)
!4906 = !DILocation(line: 6102, column: 36, scope: !4904)
!4907 = !DILocation(line: 6102, column: 55, scope: !4904)
!4908 = !DILocation(line: 6102, column: 39, scope: !4904)
!4909 = !DILocation(line: 6102, column: 12, scope: !4899)
!4910 = !DILocation(line: 6108, column: 28, scope: !4911)
!4911 = distinct !DILexicalBlock(scope: !4912, file: !3, line: 6108, column: 11)
!4912 = distinct !DILexicalBlock(scope: !4904, file: !3, line: 6103, column: 5)
!4913 = !DILocation(line: 6108, column: 12, scope: !4911)
!4914 = !DILocation(line: 6109, column: 5, scope: !4911)
!4915 = !DILocation(line: 6109, column: 28, scope: !4911)
!4916 = !DILocation(line: 6109, column: 8, scope: !4911)
!4917 = !DILocation(line: 6109, column: 34, scope: !4911)
!4918 = !DILocation(line: 6110, column: 5, scope: !4911)
!4919 = !DILocation(line: 6110, column: 8, scope: !4911)
!4920 = !DILocation(line: 6111, column: 4, scope: !4911)
!4921 = !DILocation(line: 6111, column: 21, scope: !4911)
!4922 = !DILocation(line: 6111, column: 8, scope: !4911)
!4923 = !DILocation(line: 6108, column: 11, scope: !4912)
!4924 = !DILocation(line: 6112, column: 39, scope: !4911)
!4925 = !DILocation(line: 6112, column: 45, scope: !4911)
!4926 = !DILocation(line: 6112, column: 9, scope: !4911)
!4927 = !DILocation(line: 6112, column: 2, scope: !4911)
!4928 = !DILocation(line: 6113, column: 5, scope: !4912)
!4929 = !DILocation(line: 6114, column: 25, scope: !4930)
!4930 = distinct !DILexicalBlock(scope: !4904, file: !3, line: 6114, column: 12)
!4931 = !DILocation(line: 6114, column: 12, scope: !4930)
!4932 = !DILocation(line: 6114, column: 31, scope: !4930)
!4933 = !DILocation(line: 6114, column: 12, scope: !4904)
!4934 = !DILocation(line: 6115, column: 33, scope: !4930)
!4935 = !DILocation(line: 6115, column: 39, scope: !4930)
!4936 = !DILocation(line: 6115, column: 12, scope: !4930)
!4937 = !DILocation(line: 6115, column: 5, scope: !4930)
!4938 = !DILocation(line: 6116, column: 25, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4930, file: !3, line: 6116, column: 12)
!4940 = !DILocation(line: 6116, column: 12, scope: !4939)
!4941 = !DILocation(line: 6116, column: 31, scope: !4939)
!4942 = !DILocation(line: 6116, column: 12, scope: !4930)
!4943 = !DILocation(line: 6117, column: 35, scope: !4939)
!4944 = !DILocation(line: 6117, column: 41, scope: !4939)
!4945 = !DILocation(line: 6117, column: 12, scope: !4939)
!4946 = !DILocation(line: 6117, column: 5, scope: !4939)
!4947 = !DILocation(line: 6121, column: 3, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4868, file: !3, line: 6121, column: 3)
!4949 = !DILocation(line: 6121, column: 3, scope: !4950)
!4950 = distinct !DILexicalBlock(scope: !4948, file: !3, line: 6121, column: 3)
!4951 = !DILocation(line: 6122, column: 50, scope: !4950)
!4952 = !DILocation(line: 6122, column: 33, scope: !4950)
!4953 = !DILocation(line: 6122, column: 5, scope: !4950)
!4954 = distinct !{!4954, !4947, !4955}
!4955 = !DILocation(line: 6122, column: 54, scope: !4948)
!4956 = !DILocation(line: 6124, column: 3, scope: !4868)
!4957 = !DILocation(line: 6125, column: 1, scope: !4868)
!4958 = distinct !DISubprogram(name: "vrp_visit_phi_node", scope: !3, file: !3, line: 6279, type: !4959, scopeLine: 6280, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!4959 = !DISubroutineType(types: !4960)
!4960 = !{!838, !2076}
!4961 = !DILocalVariable(name: "phi", arg: 1, scope: !4958, file: !3, line: 6279, type: !2076)
!4962 = !DILocation(line: 6279, column: 28, scope: !4958)
!4963 = !DILocalVariable(name: "i", scope: !4958, file: !3, line: 6281, type: !2221)
!4964 = !DILocation(line: 6281, column: 10, scope: !4958)
!4965 = !DILocalVariable(name: "lhs", scope: !4958, file: !3, line: 6282, type: !1747)
!4966 = !DILocation(line: 6282, column: 8, scope: !4958)
!4967 = !DILocation(line: 6282, column: 14, scope: !4958)
!4968 = !DILocalVariable(name: "lhs_vr", scope: !4958, file: !3, line: 6283, type: !1741)
!4969 = !DILocation(line: 6283, column: 18, scope: !4958)
!4970 = !DILocation(line: 6283, column: 44, scope: !4958)
!4971 = !DILocation(line: 6283, column: 27, scope: !4958)
!4972 = !DILocalVariable(name: "vr_result", scope: !4958, file: !3, line: 6284, type: !1742)
!4973 = !DILocation(line: 6284, column: 17, scope: !4958)
!4974 = !DILocalVariable(name: "edges", scope: !4958, file: !3, line: 6285, type: !1740)
!4975 = !DILocation(line: 6285, column: 7, scope: !4958)
!4976 = !DILocalVariable(name: "old_edges", scope: !4958, file: !3, line: 6285, type: !1740)
!4977 = !DILocation(line: 6285, column: 14, scope: !4958)
!4978 = !DILocalVariable(name: "l", scope: !4958, file: !3, line: 6286, type: !2291)
!4979 = !DILocation(line: 6286, column: 16, scope: !4958)
!4980 = !DILocation(line: 6288, column: 33, scope: !4958)
!4981 = !DILocation(line: 6288, column: 3, scope: !4958)
!4982 = !DILocation(line: 6290, column: 7, scope: !4983)
!4983 = distinct !DILexicalBlock(scope: !4958, file: !3, line: 6290, column: 7)
!4984 = !DILocation(line: 6290, column: 17, scope: !4983)
!4985 = !DILocation(line: 6290, column: 21, scope: !4983)
!4986 = !DILocation(line: 6290, column: 32, scope: !4983)
!4987 = !DILocation(line: 6290, column: 7, scope: !4958)
!4988 = !DILocation(line: 6292, column: 16, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4983, file: !3, line: 6291, column: 5)
!4990 = !DILocation(line: 6292, column: 7, scope: !4989)
!4991 = !DILocation(line: 6293, column: 26, scope: !4989)
!4992 = !DILocation(line: 6293, column: 37, scope: !4989)
!4993 = !DILocation(line: 6293, column: 45, scope: !4989)
!4994 = !DILocation(line: 6293, column: 7, scope: !4989)
!4995 = !DILocation(line: 6294, column: 5, scope: !4989)
!4996 = !DILocation(line: 6296, column: 9, scope: !4958)
!4997 = !DILocation(line: 6297, column: 10, scope: !4998)
!4998 = distinct !DILexicalBlock(scope: !4958, file: !3, line: 6297, column: 3)
!4999 = !DILocation(line: 6297, column: 8, scope: !4998)
!5000 = !DILocation(line: 6297, column: 15, scope: !5001)
!5001 = distinct !DILexicalBlock(scope: !4998, file: !3, line: 6297, column: 3)
!5002 = !DILocation(line: 6297, column: 40, scope: !5001)
!5003 = !DILocation(line: 6297, column: 19, scope: !5001)
!5004 = !DILocation(line: 6297, column: 17, scope: !5001)
!5005 = !DILocation(line: 6297, column: 3, scope: !4998)
!5006 = !DILocalVariable(name: "e", scope: !5007, file: !3, line: 6299, type: !2056)
!5007 = distinct !DILexicalBlock(scope: !5001, file: !3, line: 6298, column: 5)
!5008 = !DILocation(line: 6299, column: 12, scope: !5007)
!5009 = !DILocation(line: 6299, column: 37, scope: !5007)
!5010 = !DILocation(line: 6299, column: 42, scope: !5007)
!5011 = !DILocation(line: 6299, column: 16, scope: !5007)
!5012 = !DILocation(line: 6301, column: 11, scope: !5013)
!5013 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 6301, column: 11)
!5014 = !DILocation(line: 6301, column: 21, scope: !5013)
!5015 = !DILocation(line: 6301, column: 25, scope: !5013)
!5016 = !DILocation(line: 6301, column: 36, scope: !5013)
!5017 = !DILocation(line: 6301, column: 11, scope: !5007)
!5018 = !DILocation(line: 6303, column: 13, scope: !5019)
!5019 = distinct !DILexicalBlock(scope: !5013, file: !3, line: 6302, column: 2)
!5020 = !DILocation(line: 6305, column: 14, scope: !5019)
!5021 = !DILocation(line: 6305, column: 8, scope: !5019)
!5022 = !DILocation(line: 6305, column: 17, scope: !5019)
!5023 = !DILocation(line: 6305, column: 20, scope: !5019)
!5024 = !DILocation(line: 6305, column: 25, scope: !5019)
!5025 = !DILocation(line: 6305, column: 32, scope: !5019)
!5026 = !DILocation(line: 6305, column: 35, scope: !5019)
!5027 = !DILocation(line: 6305, column: 41, scope: !5019)
!5028 = !DILocation(line: 6306, column: 9, scope: !5019)
!5029 = !DILocation(line: 6306, column: 12, scope: !5019)
!5030 = !DILocation(line: 6306, column: 18, scope: !5019)
!5031 = !DILocation(line: 6306, column: 8, scope: !5019)
!5032 = !DILocation(line: 6303, column: 4, scope: !5019)
!5033 = !DILocation(line: 6307, column: 2, scope: !5019)
!5034 = !DILocation(line: 6309, column: 11, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 6309, column: 11)
!5036 = !DILocation(line: 6309, column: 14, scope: !5035)
!5037 = !DILocation(line: 6309, column: 20, scope: !5035)
!5038 = !DILocation(line: 6309, column: 11, scope: !5007)
!5039 = !DILocalVariable(name: "arg", scope: !5040, file: !3, line: 6311, type: !1747)
!5040 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 6310, column: 2)
!5041 = !DILocation(line: 6311, column: 9, scope: !5040)
!5042 = !DILocation(line: 6311, column: 15, scope: !5040)
!5043 = !DILocalVariable(name: "vr_arg", scope: !5040, file: !3, line: 6312, type: !1742)
!5044 = !DILocation(line: 6312, column: 18, scope: !5040)
!5045 = !DILocation(line: 6314, column: 4, scope: !5040)
!5046 = !DILocation(line: 6316, column: 8, scope: !5047)
!5047 = distinct !DILexicalBlock(scope: !5040, file: !3, line: 6316, column: 8)
!5048 = !DILocation(line: 6316, column: 24, scope: !5047)
!5049 = !DILocation(line: 6316, column: 8, scope: !5040)
!5050 = !DILocation(line: 6318, column: 36, scope: !5051)
!5051 = distinct !DILexicalBlock(scope: !5047, file: !3, line: 6317, column: 6)
!5052 = !DILocation(line: 6318, column: 19, scope: !5051)
!5053 = !DILocation(line: 6318, column: 17, scope: !5051)
!5054 = !DILocation(line: 6319, column: 6, scope: !5051)
!5055 = !DILocation(line: 6322, column: 34, scope: !5056)
!5056 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 6322, column: 12)
!5057 = distinct !DILexicalBlock(scope: !5047, file: !3, line: 6321, column: 6)
!5058 = !DILocation(line: 6322, column: 12, scope: !5056)
!5059 = !DILocation(line: 6322, column: 12, scope: !5057)
!5060 = !DILocation(line: 6324, column: 11, scope: !5061)
!5061 = distinct !DILexicalBlock(scope: !5056, file: !3, line: 6323, column: 3)
!5062 = !DILocation(line: 6324, column: 9, scope: !5061)
!5063 = !DILocation(line: 6325, column: 5, scope: !5061)
!5064 = !DILocation(line: 6325, column: 25, scope: !5061)
!5065 = !DILocation(line: 6326, column: 3, scope: !5061)
!5066 = !DILocation(line: 6328, column: 15, scope: !5057)
!5067 = !DILocation(line: 6328, column: 20, scope: !5057)
!5068 = !DILocation(line: 6329, column: 21, scope: !5057)
!5069 = !DILocation(line: 6329, column: 15, scope: !5057)
!5070 = !DILocation(line: 6329, column: 19, scope: !5057)
!5071 = !DILocation(line: 6330, column: 21, scope: !5057)
!5072 = !DILocation(line: 6330, column: 15, scope: !5057)
!5073 = !DILocation(line: 6330, column: 19, scope: !5057)
!5074 = !DILocation(line: 6331, column: 15, scope: !5057)
!5075 = !DILocation(line: 6331, column: 21, scope: !5057)
!5076 = !DILocation(line: 6334, column: 8, scope: !5077)
!5077 = distinct !DILexicalBlock(scope: !5040, file: !3, line: 6334, column: 8)
!5078 = !DILocation(line: 6334, column: 18, scope: !5077)
!5079 = !DILocation(line: 6334, column: 22, scope: !5077)
!5080 = !DILocation(line: 6334, column: 33, scope: !5077)
!5081 = !DILocation(line: 6334, column: 8, scope: !5040)
!5082 = !DILocation(line: 6336, column: 17, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !5077, file: !3, line: 6335, column: 6)
!5084 = !DILocation(line: 6336, column: 8, scope: !5083)
!5085 = !DILocation(line: 6337, column: 28, scope: !5083)
!5086 = !DILocation(line: 6337, column: 39, scope: !5083)
!5087 = !DILocation(line: 6337, column: 44, scope: !5083)
!5088 = !DILocation(line: 6337, column: 8, scope: !5083)
!5089 = !DILocation(line: 6338, column: 17, scope: !5083)
!5090 = !DILocation(line: 6338, column: 8, scope: !5083)
!5091 = !DILocation(line: 6339, column: 26, scope: !5083)
!5092 = !DILocation(line: 6339, column: 8, scope: !5083)
!5093 = !DILocation(line: 6340, column: 17, scope: !5083)
!5094 = !DILocation(line: 6340, column: 8, scope: !5083)
!5095 = !DILocation(line: 6341, column: 6, scope: !5083)
!5096 = !DILocation(line: 6343, column: 4, scope: !5040)
!5097 = !DILocation(line: 6345, column: 18, scope: !5098)
!5098 = distinct !DILexicalBlock(scope: !5040, file: !3, line: 6345, column: 8)
!5099 = !DILocation(line: 6345, column: 23, scope: !5098)
!5100 = !DILocation(line: 6345, column: 8, scope: !5040)
!5101 = !DILocation(line: 6346, column: 6, scope: !5098)
!5102 = !DILocation(line: 6347, column: 2, scope: !5040)
!5103 = !DILocation(line: 6348, column: 5, scope: !5007)
!5104 = !DILocation(line: 6297, column: 47, scope: !5001)
!5105 = !DILocation(line: 6297, column: 3, scope: !5001)
!5106 = distinct !{!5106, !5005, !5107}
!5107 = !DILocation(line: 6348, column: 5, scope: !4998)
!5108 = !DILocation(line: 6352, column: 7, scope: !5109)
!5109 = distinct !DILexicalBlock(scope: !4958, file: !3, line: 6352, column: 7)
!5110 = !DILocation(line: 6353, column: 7, scope: !5109)
!5111 = !DILocation(line: 6353, column: 37, scope: !5109)
!5112 = !DILocation(line: 6353, column: 15, scope: !5109)
!5113 = !DILocation(line: 6353, column: 13, scope: !5109)
!5114 = !DILocation(line: 6354, column: 7, scope: !5109)
!5115 = !DILocation(line: 6354, column: 10, scope: !5109)
!5116 = !DILocation(line: 6354, column: 13, scope: !5109)
!5117 = !DILocation(line: 6354, column: 34, scope: !5109)
!5118 = !DILocation(line: 6354, column: 23, scope: !5109)
!5119 = !DILocation(line: 6354, column: 20, scope: !5109)
!5120 = !DILocation(line: 6352, column: 7, scope: !4958)
!5121 = !DILocation(line: 6355, column: 41, scope: !5109)
!5122 = !DILocation(line: 6355, column: 44, scope: !5109)
!5123 = !DILocation(line: 6355, column: 49, scope: !5109)
!5124 = !DILocation(line: 6355, column: 5, scope: !5109)
!5125 = !DILocation(line: 6357, column: 17, scope: !5126)
!5126 = distinct !DILexicalBlock(scope: !4958, file: !3, line: 6357, column: 7)
!5127 = !DILocation(line: 6357, column: 22, scope: !5126)
!5128 = !DILocation(line: 6357, column: 7, scope: !4958)
!5129 = !DILocation(line: 6358, column: 5, scope: !5126)
!5130 = !DILocation(line: 6360, column: 15, scope: !4958)
!5131 = !DILocation(line: 6360, column: 34, scope: !4958)
!5132 = !DILocation(line: 6360, column: 13, scope: !4958)
!5133 = !DILocation(line: 6361, column: 48, scope: !4958)
!5134 = !DILocation(line: 6361, column: 3, scope: !4958)
!5135 = !DILocation(line: 6361, column: 22, scope: !4958)
!5136 = !DILocation(line: 6361, column: 46, scope: !4958)
!5137 = !DILocation(line: 6368, column: 7, scope: !5138)
!5138 = distinct !DILexicalBlock(scope: !4958, file: !3, line: 6368, column: 7)
!5139 = !DILocation(line: 6368, column: 15, scope: !5138)
!5140 = !DILocation(line: 6368, column: 20, scope: !5138)
!5141 = !DILocation(line: 6368, column: 32, scope: !5138)
!5142 = !DILocation(line: 6368, column: 45, scope: !5138)
!5143 = !DILocation(line: 6368, column: 50, scope: !5138)
!5144 = !DILocation(line: 6369, column: 7, scope: !5138)
!5145 = !DILocation(line: 6369, column: 10, scope: !5138)
!5146 = !DILocation(line: 6369, column: 19, scope: !5138)
!5147 = !DILocation(line: 6369, column: 16, scope: !5138)
!5148 = !DILocation(line: 6368, column: 7, scope: !4958)
!5149 = !DILocation(line: 6371, column: 12, scope: !5150)
!5150 = distinct !DILexicalBlock(scope: !5151, file: !3, line: 6371, column: 11)
!5151 = distinct !DILexicalBlock(scope: !5138, file: !3, line: 6370, column: 5)
!5152 = !DILocation(line: 6371, column: 11, scope: !5151)
!5153 = !DILocalVariable(name: "cmp_min", scope: !5154, file: !3, line: 6373, type: !1740)
!5154 = distinct !DILexicalBlock(scope: !5150, file: !3, line: 6372, column: 2)
!5155 = !DILocation(line: 6373, column: 8, scope: !5154)
!5156 = !DILocation(line: 6373, column: 34, scope: !5154)
!5157 = !DILocation(line: 6373, column: 42, scope: !5154)
!5158 = !DILocation(line: 6373, column: 57, scope: !5154)
!5159 = !DILocation(line: 6373, column: 18, scope: !5154)
!5160 = !DILocalVariable(name: "cmp_max", scope: !5154, file: !3, line: 6374, type: !1740)
!5161 = !DILocation(line: 6374, column: 8, scope: !5154)
!5162 = !DILocation(line: 6374, column: 34, scope: !5154)
!5163 = !DILocation(line: 6374, column: 42, scope: !5154)
!5164 = !DILocation(line: 6374, column: 57, scope: !5154)
!5165 = !DILocation(line: 6374, column: 18, scope: !5154)
!5166 = !DILocation(line: 6381, column: 8, scope: !5167)
!5167 = distinct !DILexicalBlock(scope: !5154, file: !3, line: 6381, column: 8)
!5168 = !DILocation(line: 6381, column: 16, scope: !5167)
!5169 = !DILocation(line: 6381, column: 20, scope: !5167)
!5170 = !DILocation(line: 6381, column: 23, scope: !5167)
!5171 = !DILocation(line: 6381, column: 31, scope: !5167)
!5172 = !DILocation(line: 6381, column: 8, scope: !5154)
!5173 = !DILocation(line: 6386, column: 38, scope: !5174)
!5174 = distinct !DILexicalBlock(scope: !5175, file: !3, line: 6386, column: 12)
!5175 = distinct !DILexicalBlock(scope: !5167, file: !3, line: 6382, column: 6)
!5176 = !DILocation(line: 6386, column: 12, scope: !5174)
!5177 = !DILocation(line: 6387, column: 5, scope: !5174)
!5178 = !DILocation(line: 6387, column: 24, scope: !5174)
!5179 = !DILocation(line: 6388, column: 20, scope: !5174)
!5180 = !DILocation(line: 6387, column: 8, scope: !5174)
!5181 = !DILocation(line: 6388, column: 25, scope: !5174)
!5182 = !DILocation(line: 6386, column: 12, scope: !5175)
!5183 = !DILocation(line: 6389, column: 3, scope: !5174)
!5184 = !DILocation(line: 6391, column: 38, scope: !5185)
!5185 = distinct !DILexicalBlock(scope: !5175, file: !3, line: 6391, column: 12)
!5186 = !DILocation(line: 6391, column: 13, scope: !5185)
!5187 = !DILocation(line: 6392, column: 5, scope: !5185)
!5188 = !DILocation(line: 6392, column: 31, scope: !5185)
!5189 = !DILocation(line: 6392, column: 36, scope: !5185)
!5190 = !DILocation(line: 6392, column: 9, scope: !5185)
!5191 = !DILocation(line: 6391, column: 12, scope: !5175)
!5192 = !DILocation(line: 6393, column: 19, scope: !5185)
!5193 = !DILocation(line: 6393, column: 13, scope: !5185)
!5194 = !DILocation(line: 6393, column: 17, scope: !5185)
!5195 = !DILocation(line: 6393, column: 3, scope: !5185)
!5196 = !DILocation(line: 6394, column: 45, scope: !5197)
!5197 = distinct !DILexicalBlock(scope: !5185, file: !3, line: 6394, column: 17)
!5198 = !DILocation(line: 6394, column: 17, scope: !5197)
!5199 = !DILocation(line: 6394, column: 17, scope: !5185)
!5200 = !DILocation(line: 6396, column: 33, scope: !5197)
!5201 = !DILocation(line: 6396, column: 5, scope: !5197)
!5202 = !DILocation(line: 6395, column: 13, scope: !5197)
!5203 = !DILocation(line: 6395, column: 17, scope: !5197)
!5204 = !DILocation(line: 6395, column: 3, scope: !5197)
!5205 = !DILocation(line: 6398, column: 3, scope: !5197)
!5206 = !DILocation(line: 6399, column: 6, scope: !5175)
!5207 = !DILocation(line: 6403, column: 8, scope: !5208)
!5208 = distinct !DILexicalBlock(scope: !5154, file: !3, line: 6403, column: 8)
!5209 = !DILocation(line: 6403, column: 16, scope: !5208)
!5210 = !DILocation(line: 6403, column: 20, scope: !5208)
!5211 = !DILocation(line: 6403, column: 23, scope: !5208)
!5212 = !DILocation(line: 6403, column: 31, scope: !5208)
!5213 = !DILocation(line: 6403, column: 8, scope: !5154)
!5214 = !DILocation(line: 6408, column: 38, scope: !5215)
!5215 = distinct !DILexicalBlock(scope: !5216, file: !3, line: 6408, column: 12)
!5216 = distinct !DILexicalBlock(scope: !5208, file: !3, line: 6404, column: 6)
!5217 = !DILocation(line: 6408, column: 12, scope: !5215)
!5218 = !DILocation(line: 6409, column: 5, scope: !5215)
!5219 = !DILocation(line: 6409, column: 24, scope: !5215)
!5220 = !DILocation(line: 6410, column: 20, scope: !5215)
!5221 = !DILocation(line: 6409, column: 8, scope: !5215)
!5222 = !DILocation(line: 6410, column: 25, scope: !5215)
!5223 = !DILocation(line: 6408, column: 12, scope: !5216)
!5224 = !DILocation(line: 6411, column: 3, scope: !5215)
!5225 = !DILocation(line: 6413, column: 38, scope: !5226)
!5226 = distinct !DILexicalBlock(scope: !5216, file: !3, line: 6413, column: 12)
!5227 = !DILocation(line: 6413, column: 13, scope: !5226)
!5228 = !DILocation(line: 6414, column: 5, scope: !5226)
!5229 = !DILocation(line: 6414, column: 31, scope: !5226)
!5230 = !DILocation(line: 6414, column: 36, scope: !5226)
!5231 = !DILocation(line: 6414, column: 9, scope: !5226)
!5232 = !DILocation(line: 6413, column: 12, scope: !5216)
!5233 = !DILocation(line: 6415, column: 19, scope: !5226)
!5234 = !DILocation(line: 6415, column: 13, scope: !5226)
!5235 = !DILocation(line: 6415, column: 17, scope: !5226)
!5236 = !DILocation(line: 6415, column: 3, scope: !5226)
!5237 = !DILocation(line: 6416, column: 45, scope: !5238)
!5238 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 6416, column: 17)
!5239 = !DILocation(line: 6416, column: 17, scope: !5238)
!5240 = !DILocation(line: 6416, column: 17, scope: !5226)
!5241 = !DILocation(line: 6418, column: 33, scope: !5238)
!5242 = !DILocation(line: 6418, column: 5, scope: !5238)
!5243 = !DILocation(line: 6417, column: 13, scope: !5238)
!5244 = !DILocation(line: 6417, column: 17, scope: !5238)
!5245 = !DILocation(line: 6417, column: 3, scope: !5238)
!5246 = !DILocation(line: 6420, column: 3, scope: !5238)
!5247 = !DILocation(line: 6421, column: 6, scope: !5216)
!5248 = !DILocation(line: 6422, column: 2, scope: !5154)
!5249 = !DILocation(line: 6423, column: 5, scope: !5151)
!5250 = !DILocation(line: 6427, column: 27, scope: !5251)
!5251 = distinct !DILexicalBlock(scope: !4958, file: !3, line: 6427, column: 7)
!5252 = !DILocation(line: 6427, column: 7, scope: !5251)
!5253 = !DILocation(line: 6427, column: 7, scope: !4958)
!5254 = !DILocation(line: 6428, column: 5, scope: !5251)
!5255 = !DILocation(line: 6431, column: 3, scope: !4958)
!5256 = !DILabel(scope: !4958, name: "varying", file: !3, line: 6434)
!5257 = !DILocation(line: 6434, column: 1, scope: !4958)
!5258 = !DILocation(line: 6435, column: 31, scope: !4958)
!5259 = !DILocation(line: 6435, column: 3, scope: !4958)
!5260 = !DILocation(line: 6436, column: 3, scope: !4958)
!5261 = !DILocation(line: 6437, column: 1, scope: !4958)
!5262 = distinct !DISubprogram(name: "vrp_finalize", scope: !3, file: !3, line: 7235, type: !3887, scopeLine: 7236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5263 = !DILocalVariable(name: "i", scope: !5262, file: !3, line: 7237, type: !2221)
!5264 = !DILocation(line: 7237, column: 10, scope: !5262)
!5265 = !DILocalVariable(name: "single_val_range", scope: !5262, file: !3, line: 7238, type: !3168)
!5266 = !DILocation(line: 7238, column: 17, scope: !5262)
!5267 = !DILocalVariable(name: "do_value_subst_p", scope: !5262, file: !3, line: 7239, type: !1866)
!5268 = !DILocation(line: 7239, column: 8, scope: !5262)
!5269 = !DILocation(line: 7241, column: 7, scope: !5270)
!5270 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 7241, column: 7)
!5271 = !DILocation(line: 7241, column: 7, scope: !5262)
!5272 = !DILocation(line: 7243, column: 16, scope: !5273)
!5273 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 7242, column: 5)
!5274 = !DILocation(line: 7243, column: 7, scope: !5273)
!5275 = !DILocation(line: 7244, column: 30, scope: !5273)
!5276 = !DILocation(line: 7244, column: 7, scope: !5273)
!5277 = !DILocation(line: 7245, column: 16, scope: !5273)
!5278 = !DILocation(line: 7245, column: 7, scope: !5273)
!5279 = !DILocation(line: 7246, column: 5, scope: !5273)
!5280 = !DILocation(line: 7251, column: 22, scope: !5262)
!5281 = !DILocation(line: 7251, column: 20, scope: !5262)
!5282 = !DILocation(line: 7253, column: 20, scope: !5262)
!5283 = !DILocation(line: 7254, column: 10, scope: !5284)
!5284 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 7254, column: 3)
!5285 = !DILocation(line: 7254, column: 8, scope: !5284)
!5286 = !DILocation(line: 7254, column: 15, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !5284, file: !3, line: 7254, column: 3)
!5288 = !DILocation(line: 7254, column: 19, scope: !5287)
!5289 = !DILocation(line: 7254, column: 17, scope: !5287)
!5290 = !DILocation(line: 7254, column: 3, scope: !5284)
!5291 = !DILocation(line: 7255, column: 9, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5287, file: !3, line: 7255, column: 9)
!5293 = !DILocation(line: 7255, column: 18, scope: !5292)
!5294 = !DILocation(line: 7256, column: 2, scope: !5292)
!5295 = !DILocation(line: 7256, column: 5, scope: !5292)
!5296 = !DILocation(line: 7256, column: 14, scope: !5292)
!5297 = !DILocation(line: 7256, column: 18, scope: !5292)
!5298 = !DILocation(line: 7256, column: 23, scope: !5292)
!5299 = !DILocation(line: 7257, column: 2, scope: !5292)
!5300 = !DILocation(line: 7257, column: 5, scope: !5292)
!5301 = !DILocation(line: 7257, column: 14, scope: !5292)
!5302 = !DILocation(line: 7257, column: 18, scope: !5292)
!5303 = !DILocation(line: 7257, column: 25, scope: !5292)
!5304 = !DILocation(line: 7257, column: 34, scope: !5292)
!5305 = !DILocation(line: 7257, column: 38, scope: !5292)
!5306 = !DILocation(line: 7257, column: 22, scope: !5292)
!5307 = !DILocation(line: 7258, column: 2, scope: !5292)
!5308 = !DILocation(line: 7258, column: 30, scope: !5292)
!5309 = !DILocation(line: 7258, column: 39, scope: !5292)
!5310 = !DILocation(line: 7258, column: 43, scope: !5292)
!5311 = !DILocation(line: 7258, column: 5, scope: !5292)
!5312 = !DILocation(line: 7255, column: 9, scope: !5287)
!5313 = !DILocation(line: 7260, column: 30, scope: !5314)
!5314 = distinct !DILexicalBlock(scope: !5292, file: !3, line: 7259, column: 7)
!5315 = !DILocation(line: 7260, column: 39, scope: !5314)
!5316 = !DILocation(line: 7260, column: 43, scope: !5314)
!5317 = !DILocation(line: 7260, column: 2, scope: !5314)
!5318 = !DILocation(line: 7260, column: 19, scope: !5314)
!5319 = !DILocation(line: 7260, column: 22, scope: !5314)
!5320 = !DILocation(line: 7260, column: 28, scope: !5314)
!5321 = !DILocation(line: 7261, column: 19, scope: !5314)
!5322 = !DILocation(line: 7262, column: 7, scope: !5314)
!5323 = !DILocation(line: 7258, column: 46, scope: !5292)
!5324 = !DILocation(line: 7254, column: 35, scope: !5287)
!5325 = !DILocation(line: 7254, column: 3, scope: !5287)
!5326 = distinct !{!5326, !5290, !5327}
!5327 = !DILocation(line: 7262, column: 7, scope: !5284)
!5328 = !DILocation(line: 7264, column: 8, scope: !5329)
!5329 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 7264, column: 7)
!5330 = !DILocation(line: 7264, column: 7, scope: !5262)
!5331 = !DILocation(line: 7268, column: 13, scope: !5332)
!5332 = distinct !DILexicalBlock(scope: !5329, file: !3, line: 7265, column: 5)
!5333 = !DILocation(line: 7268, column: 7, scope: !5332)
!5334 = !DILocation(line: 7269, column: 24, scope: !5332)
!5335 = !DILocation(line: 7270, column: 5, scope: !5332)
!5336 = !DILocation(line: 7272, column: 24, scope: !5262)
!5337 = !DILocation(line: 7272, column: 3, scope: !5262)
!5338 = !DILocation(line: 7274, column: 7, scope: !5339)
!5339 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 7274, column: 7)
!5340 = !DILocation(line: 7274, column: 7, scope: !5262)
!5341 = !DILocation(line: 7275, column: 5, scope: !5339)
!5342 = !DILocation(line: 7279, column: 3, scope: !5262)
!5343 = !DILocation(line: 7282, column: 10, scope: !5344)
!5344 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 7282, column: 3)
!5345 = !DILocation(line: 7282, column: 8, scope: !5344)
!5346 = !DILocation(line: 7282, column: 15, scope: !5347)
!5347 = distinct !DILexicalBlock(scope: !5344, file: !3, line: 7282, column: 3)
!5348 = !DILocation(line: 7282, column: 19, scope: !5347)
!5349 = !DILocation(line: 7282, column: 17, scope: !5347)
!5350 = !DILocation(line: 7282, column: 3, scope: !5344)
!5351 = !DILocation(line: 7283, column: 9, scope: !5352)
!5352 = distinct !DILexicalBlock(scope: !5347, file: !3, line: 7283, column: 9)
!5353 = !DILocation(line: 7283, column: 18, scope: !5352)
!5354 = !DILocation(line: 7283, column: 9, scope: !5347)
!5355 = !DILocation(line: 7285, column: 2, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5352, file: !3, line: 7284, column: 7)
!5357 = !DILocation(line: 7286, column: 8, scope: !5356)
!5358 = !DILocation(line: 7286, column: 17, scope: !5356)
!5359 = !DILocation(line: 7286, column: 2, scope: !5356)
!5360 = !DILocation(line: 7287, column: 7, scope: !5356)
!5361 = !DILocation(line: 7283, column: 19, scope: !5352)
!5362 = !DILocation(line: 7282, column: 35, scope: !5347)
!5363 = !DILocation(line: 7282, column: 3, scope: !5347)
!5364 = distinct !{!5364, !5350, !5365}
!5365 = !DILocation(line: 7287, column: 7, scope: !5344)
!5366 = !DILocation(line: 7289, column: 9, scope: !5262)
!5367 = !DILocation(line: 7289, column: 3, scope: !5262)
!5368 = !DILocation(line: 7290, column: 9, scope: !5262)
!5369 = !DILocation(line: 7290, column: 3, scope: !5262)
!5370 = !DILocation(line: 7291, column: 9, scope: !5262)
!5371 = !DILocation(line: 7291, column: 3, scope: !5262)
!5372 = !DILocation(line: 7295, column: 12, scope: !5262)
!5373 = !DILocation(line: 7296, column: 22, scope: !5262)
!5374 = !DILocation(line: 7297, column: 1, scope: !5262)
!5375 = distinct !DISubprogram(name: "remove_range_assertions", scope: !3, file: !3, line: 5226, type: !3887, scopeLine: 5227, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5376 = !DILocalVariable(name: "bb", scope: !5375, file: !3, line: 5228, type: !2527)
!5377 = !DILocation(line: 5228, column: 15, scope: !5375)
!5378 = !DILocalVariable(name: "si", scope: !5375, file: !3, line: 5229, type: !3112)
!5379 = !DILocation(line: 5229, column: 24, scope: !5375)
!5380 = !DILocation(line: 5234, column: 3, scope: !5381)
!5381 = distinct !DILexicalBlock(scope: !5375, file: !3, line: 5234, column: 3)
!5382 = !DILocation(line: 5234, column: 3, scope: !5383)
!5383 = distinct !DILexicalBlock(scope: !5381, file: !3, line: 5234, column: 3)
!5384 = !DILocation(line: 5235, column: 29, scope: !5385)
!5385 = distinct !DILexicalBlock(scope: !5383, file: !3, line: 5235, column: 5)
!5386 = !DILocation(line: 5235, column: 15, scope: !5385)
!5387 = !DILocation(line: 5235, column: 10, scope: !5385)
!5388 = !DILocation(line: 5235, column: 35, scope: !5389)
!5389 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 5235, column: 5)
!5390 = !DILocation(line: 5235, column: 34, scope: !5389)
!5391 = !DILocation(line: 5235, column: 5, scope: !5385)
!5392 = !DILocalVariable(name: "stmt", scope: !5393, file: !3, line: 5237, type: !2076)
!5393 = distinct !DILexicalBlock(scope: !5389, file: !3, line: 5236, column: 7)
!5394 = !DILocation(line: 5237, column: 9, scope: !5393)
!5395 = !DILocation(line: 5237, column: 16, scope: !5393)
!5396 = !DILocalVariable(name: "use_stmt", scope: !5393, file: !3, line: 5238, type: !2076)
!5397 = !DILocation(line: 5238, column: 9, scope: !5393)
!5398 = !DILocation(line: 5240, column: 24, scope: !5399)
!5399 = distinct !DILexicalBlock(scope: !5393, file: !3, line: 5240, column: 6)
!5400 = !DILocation(line: 5240, column: 6, scope: !5399)
!5401 = !DILocation(line: 5241, column: 6, scope: !5399)
!5402 = !DILocation(line: 5241, column: 33, scope: !5399)
!5403 = !DILocation(line: 5241, column: 9, scope: !5399)
!5404 = !DILocation(line: 5241, column: 39, scope: !5399)
!5405 = !DILocation(line: 5240, column: 6, scope: !5393)
!5406 = !DILocalVariable(name: "rhs", scope: !5407, file: !3, line: 5243, type: !1747)
!5407 = distinct !DILexicalBlock(scope: !5399, file: !3, line: 5242, column: 4)
!5408 = !DILocation(line: 5243, column: 11, scope: !5407)
!5409 = !DILocation(line: 5243, column: 37, scope: !5407)
!5410 = !DILocation(line: 5243, column: 17, scope: !5407)
!5411 = !DILocalVariable(name: "var", scope: !5407, file: !3, line: 5244, type: !1747)
!5412 = !DILocation(line: 5244, column: 11, scope: !5407)
!5413 = !DILocalVariable(name: "cond", scope: !5407, file: !3, line: 5245, type: !1747)
!5414 = !DILocation(line: 5245, column: 11, scope: !5407)
!5415 = !DILocation(line: 5245, column: 24, scope: !5407)
!5416 = !DILocation(line: 5245, column: 18, scope: !5407)
!5417 = !DILocalVariable(name: "use_p", scope: !5407, file: !3, line: 5246, type: !3142)
!5418 = !DILocation(line: 5246, column: 20, scope: !5407)
!5419 = !DILocalVariable(name: "iter", scope: !5407, file: !3, line: 5247, type: !5420)
!5420 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !851, line: 249, baseType: !5421)
!5421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !851, line: 238, size: 448, elements: !5422)
!5422 = !{!5423, !5424, !5425, !5426}
!5423 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !5421, file: !851, line: 241, baseType: !3143, size: 64)
!5424 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !5421, file: !851, line: 243, baseType: !3143, size: 64, offset: 64)
!5425 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !5421, file: !851, line: 245, baseType: !3144, size: 256, offset: 128)
!5426 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !5421, file: !851, line: 248, baseType: !3143, size: 64, offset: 384)
!5427 = !DILocation(line: 5247, column: 23, scope: !5407)
!5428 = !DILocation(line: 5249, column: 6, scope: !5407)
!5429 = !DILocation(line: 5252, column: 12, scope: !5407)
!5430 = !DILocation(line: 5252, column: 10, scope: !5407)
!5431 = !DILocation(line: 5253, column: 6, scope: !5432)
!5432 = distinct !DILexicalBlock(scope: !5407, file: !3, line: 5253, column: 6)
!5433 = !DILocation(line: 5253, column: 6, scope: !5434)
!5434 = distinct !DILexicalBlock(scope: !5432, file: !3, line: 5253, column: 6)
!5435 = !DILocation(line: 5255, column: 8, scope: !5436)
!5436 = distinct !DILexicalBlock(scope: !5434, file: !3, line: 5255, column: 8)
!5437 = !DILocation(line: 5255, column: 8, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5436, file: !3, line: 5255, column: 8)
!5439 = !DILocation(line: 5257, column: 5, scope: !5440)
!5440 = distinct !DILexicalBlock(scope: !5438, file: !3, line: 5256, column: 3)
!5441 = !DILocation(line: 5258, column: 5, scope: !5440)
!5442 = !DILocation(line: 5259, column: 3, scope: !5440)
!5443 = distinct !{!5443, !5435, !5444}
!5444 = !DILocation(line: 5259, column: 3, scope: !5436)
!5445 = distinct !{!5445, !5431, !5446}
!5446 = !DILocation(line: 5259, column: 3, scope: !5432)
!5447 = !DILocation(line: 5262, column: 6, scope: !5407)
!5448 = !DILocation(line: 5263, column: 20, scope: !5407)
!5449 = !DILocation(line: 5263, column: 6, scope: !5407)
!5450 = !DILocation(line: 5264, column: 4, scope: !5407)
!5451 = !DILocation(line: 5266, column: 4, scope: !5399)
!5452 = !DILocation(line: 5235, column: 5, scope: !5389)
!5453 = distinct !{!5453, !5391, !5454}
!5454 = !DILocation(line: 5267, column: 7, scope: !5385)
!5455 = distinct !{!5455, !5380, !5456}
!5456 = !DILocation(line: 5267, column: 7, scope: !5381)
!5457 = !DILocation(line: 5268, column: 1, scope: !5375)
!5458 = distinct !DISubprogram(name: "finalize_jump_threads", scope: !3, file: !3, line: 7225, type: !3887, scopeLine: 7226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5459 = !DILocation(line: 7227, column: 3, scope: !5458)
!5460 = !DILocation(line: 7228, column: 3, scope: !5458)
!5461 = !DILocation(line: 7229, column: 1, scope: !5458)
!5462 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !343, file: !343, line: 150, type: !5463, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5463 = !DISubroutineType(types: !5464)
!5464 = !{!1740, !5465, !7, !4871}
!5465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5466, size: 64)
!5466 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2049)
!5467 = !DILocalVariable(name: "vec_", arg: 1, scope: !5462, file: !343, line: 150, type: !5465)
!5468 = !DILocation(line: 150, column: 1, scope: !5462)
!5469 = !DILocalVariable(name: "ix_", arg: 2, scope: !5462, file: !343, line: 150, type: !7)
!5470 = !DILocalVariable(name: "ptr", arg: 3, scope: !5462, file: !343, line: 150, type: !4871)
!5471 = !DILocation(line: 150, column: 1, scope: !5472)
!5472 = distinct !DILexicalBlock(scope: !5462, file: !343, line: 150, column: 1)
!5473 = !DILocation(line: 150, column: 1, scope: !5474)
!5474 = distinct !DILexicalBlock(scope: !5472, file: !343, line: 150, column: 1)
!5475 = !DILocation(line: 150, column: 1, scope: !5476)
!5476 = distinct !DILexicalBlock(scope: !5472, file: !343, line: 150, column: 1)
!5477 = distinct !DISubprogram(name: "VEC_switch_update_base_iterate", scope: !3, file: !3, line: 120, type: !5478, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5478 = !DISubroutineType(types: !5479)
!5479 = !{!1740, !5480, !7, !5481}
!5480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3155, size: 64)
!5481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4022, size: 64)
!5482 = !DILocalVariable(name: "vec_", arg: 1, scope: !5477, file: !3, line: 120, type: !5480)
!5483 = !DILocation(line: 120, column: 1, scope: !5477)
!5484 = !DILocalVariable(name: "ix_", arg: 2, scope: !5477, file: !3, line: 120, type: !7)
!5485 = !DILocalVariable(name: "ptr", arg: 3, scope: !5477, file: !3, line: 120, type: !5481)
!5486 = !DILocation(line: 120, column: 1, scope: !5487)
!5487 = distinct !DILexicalBlock(scope: !5477, file: !3, line: 120, column: 1)
!5488 = !DILocation(line: 120, column: 1, scope: !5489)
!5489 = distinct !DILexicalBlock(scope: !5487, file: !3, line: 120, column: 1)
!5490 = !DILocation(line: 120, column: 1, scope: !5491)
!5491 = distinct !DILexicalBlock(scope: !5487, file: !3, line: 120, column: 1)
!5492 = distinct !DISubprogram(name: "gimple_switch_set_num_labels", scope: !742, file: !742, line: 3170, type: !5493, scopeLine: 3171, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5493 = !DISubroutineType(types: !5494)
!5494 = !{null, !2076, !7}
!5495 = !DILocalVariable(name: "g", arg: 1, scope: !5492, file: !742, line: 3170, type: !2076)
!5496 = !DILocation(line: 3170, column: 38, scope: !5492)
!5497 = !DILocalVariable(name: "nlabels", arg: 2, scope: !5492, file: !742, line: 3170, type: !7)
!5498 = !DILocation(line: 3170, column: 50, scope: !5492)
!5499 = !DILocation(line: 3173, column: 23, scope: !5492)
!5500 = !DILocation(line: 3173, column: 26, scope: !5492)
!5501 = !DILocation(line: 3173, column: 34, scope: !5492)
!5502 = !DILocation(line: 3173, column: 3, scope: !5492)
!5503 = !DILocation(line: 3174, column: 1, scope: !5492)
!5504 = distinct !DISubprogram(name: "gimple_switch_set_label", scope: !742, file: !742, line: 3222, type: !5505, scopeLine: 3223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5505 = !DISubroutineType(types: !5506)
!5506 = !{null, !2076, !7, !1747}
!5507 = !DILocalVariable(name: "gs", arg: 1, scope: !5504, file: !742, line: 3222, type: !2076)
!5508 = !DILocation(line: 3222, column: 33, scope: !5504)
!5509 = !DILocalVariable(name: "index", arg: 2, scope: !5504, file: !742, line: 3222, type: !7)
!5510 = !DILocation(line: 3222, column: 46, scope: !5504)
!5511 = !DILocalVariable(name: "label", arg: 3, scope: !5504, file: !742, line: 3222, type: !1747)
!5512 = !DILocation(line: 3222, column: 58, scope: !5504)
!5513 = !DILocation(line: 3225, column: 3, scope: !5504)
!5514 = !DILocation(line: 3226, column: 3, scope: !5504)
!5515 = !DILocation(line: 3227, column: 18, scope: !5504)
!5516 = !DILocation(line: 3227, column: 22, scope: !5504)
!5517 = !DILocation(line: 3227, column: 28, scope: !5504)
!5518 = !DILocation(line: 3227, column: 33, scope: !5504)
!5519 = !DILocation(line: 3227, column: 3, scope: !5504)
!5520 = !DILocation(line: 3228, column: 1, scope: !5504)
!5521 = distinct !DISubprogram(name: "gimple_switch_default_label", scope: !742, file: !742, line: 3233, type: !5522, scopeLine: 3234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5522 = !DISubroutineType(types: !5523)
!5523 = !{!1747, !5524}
!5524 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1748, line: 60, baseType: !3135)
!5525 = !DILocalVariable(name: "gs", arg: 1, scope: !5521, file: !742, line: 3233, type: !5524)
!5526 = !DILocation(line: 3233, column: 43, scope: !5521)
!5527 = !DILocation(line: 3235, column: 31, scope: !5521)
!5528 = !DILocation(line: 3235, column: 10, scope: !5521)
!5529 = !DILocation(line: 3235, column: 3, scope: !5521)
!5530 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !343, file: !343, line: 150, type: !5531, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5531 = !DISubroutineType(types: !5532)
!5532 = !{!7, !5465}
!5533 = !DILocalVariable(name: "vec_", arg: 1, scope: !5530, file: !343, line: 150, type: !5465)
!5534 = !DILocation(line: 150, column: 1, scope: !5530)
!5535 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !343, file: !343, line: 152, type: !5536, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5536 = !DISubroutineType(types: !5537)
!5537 = !{null, !5538}
!5538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3145, size: 64)
!5539 = !DILocalVariable(name: "vec_", arg: 1, scope: !5535, file: !343, line: 152, type: !5538)
!5540 = !DILocation(line: 152, column: 1, scope: !5535)
!5541 = !DILocation(line: 152, column: 1, scope: !5542)
!5542 = distinct !DILexicalBlock(scope: !5535, file: !343, line: 152, column: 1)
!5543 = distinct !DISubprogram(name: "VEC_switch_update_heap_free", scope: !3, file: !3, line: 121, type: !5544, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5544 = !DISubroutineType(types: !5545)
!5545 = !{null, !5546}
!5546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3150, size: 64)
!5547 = !DILocalVariable(name: "vec_", arg: 1, scope: !5543, file: !3, line: 121, type: !5546)
!5548 = !DILocation(line: 121, column: 1, scope: !5543)
!5549 = !DILocation(line: 121, column: 1, scope: !5550)
!5550 = distinct !DILexicalBlock(scope: !5543, file: !3, line: 121, column: 1)
!5551 = distinct !DISubprogram(name: "find_assert_locations", scope: !3, file: !3, line: 4766, type: !3205, scopeLine: 4767, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5552 = !DILocalVariable(name: "rpo", scope: !5551, file: !3, line: 4768, type: !3122)
!5553 = !DILocation(line: 4768, column: 8, scope: !5551)
!5554 = !DILocation(line: 4768, column: 14, scope: !5551)
!5555 = !DILocalVariable(name: "bb_rpo", scope: !5551, file: !3, line: 4769, type: !3122)
!5556 = !DILocation(line: 4769, column: 8, scope: !5551)
!5557 = !DILocation(line: 4769, column: 17, scope: !5551)
!5558 = !DILocalVariable(name: "last_rpo", scope: !5551, file: !3, line: 4770, type: !3122)
!5559 = !DILocation(line: 4770, column: 8, scope: !5551)
!5560 = !DILocation(line: 4770, column: 19, scope: !5551)
!5561 = !DILocalVariable(name: "rpo_cnt", scope: !5551, file: !3, line: 4771, type: !1740)
!5562 = !DILocation(line: 4771, column: 7, scope: !5551)
!5563 = !DILocalVariable(name: "i", scope: !5551, file: !3, line: 4771, type: !1740)
!5564 = !DILocation(line: 4771, column: 16, scope: !5551)
!5565 = !DILocalVariable(name: "need_asserts", scope: !5551, file: !3, line: 4772, type: !1866)
!5566 = !DILocation(line: 4772, column: 8, scope: !5551)
!5567 = !DILocation(line: 4774, column: 10, scope: !5551)
!5568 = !DILocation(line: 4774, column: 8, scope: !5551)
!5569 = !DILocation(line: 4775, column: 51, scope: !5551)
!5570 = !DILocation(line: 4775, column: 13, scope: !5551)
!5571 = !DILocation(line: 4775, column: 11, scope: !5551)
!5572 = !DILocation(line: 4776, column: 10, scope: !5573)
!5573 = distinct !DILexicalBlock(scope: !5551, file: !3, line: 4776, column: 3)
!5574 = !DILocation(line: 4776, column: 8, scope: !5573)
!5575 = !DILocation(line: 4776, column: 15, scope: !5576)
!5576 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 4776, column: 3)
!5577 = !DILocation(line: 4776, column: 19, scope: !5576)
!5578 = !DILocation(line: 4776, column: 17, scope: !5576)
!5579 = !DILocation(line: 4776, column: 3, scope: !5573)
!5580 = !DILocation(line: 4777, column: 22, scope: !5576)
!5581 = !DILocation(line: 4777, column: 5, scope: !5576)
!5582 = !DILocation(line: 4777, column: 12, scope: !5576)
!5583 = !DILocation(line: 4777, column: 16, scope: !5576)
!5584 = !DILocation(line: 4777, column: 20, scope: !5576)
!5585 = !DILocation(line: 4776, column: 28, scope: !5576)
!5586 = !DILocation(line: 4776, column: 3, scope: !5576)
!5587 = distinct !{!5587, !5579, !5588}
!5588 = !DILocation(line: 4777, column: 22, scope: !5573)
!5589 = !DILocation(line: 4779, column: 16, scope: !5551)
!5590 = !DILocation(line: 4780, column: 12, scope: !5591)
!5591 = distinct !DILexicalBlock(scope: !5551, file: !3, line: 4780, column: 3)
!5592 = !DILocation(line: 4780, column: 19, scope: !5591)
!5593 = !DILocation(line: 4780, column: 10, scope: !5591)
!5594 = !DILocation(line: 4780, column: 8, scope: !5591)
!5595 = !DILocation(line: 4780, column: 23, scope: !5596)
!5596 = distinct !DILexicalBlock(scope: !5591, file: !3, line: 4780, column: 3)
!5597 = !DILocation(line: 4780, column: 25, scope: !5596)
!5598 = !DILocation(line: 4780, column: 3, scope: !5591)
!5599 = !DILocalVariable(name: "bb", scope: !5600, file: !3, line: 4782, type: !2527)
!5600 = distinct !DILexicalBlock(scope: !5596, file: !3, line: 4781, column: 5)
!5601 = !DILocation(line: 4782, column: 19, scope: !5600)
!5602 = !DILocation(line: 4782, column: 24, scope: !5600)
!5603 = !DILocalVariable(name: "e", scope: !5600, file: !3, line: 4783, type: !2056)
!5604 = !DILocation(line: 4783, column: 12, scope: !5600)
!5605 = !DILocalVariable(name: "ei", scope: !5600, file: !3, line: 4784, type: !5606)
!5606 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !343, line: 682, baseType: !5607)
!5607 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 679, size: 128, elements: !5608)
!5608 = !{!5609, !5610}
!5609 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !5607, file: !343, line: 680, baseType: !7, size: 32)
!5610 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !5607, file: !343, line: 681, baseType: !5611, size: 64, offset: 64)
!5611 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2044, size: 64)
!5612 = !DILocation(line: 4784, column: 21, scope: !5600)
!5613 = !DILocation(line: 4786, column: 12, scope: !5614)
!5614 = distinct !DILexicalBlock(scope: !5600, file: !3, line: 4786, column: 11)
!5615 = !DILocation(line: 4786, column: 17, scope: !5614)
!5616 = !DILocation(line: 4786, column: 21, scope: !5614)
!5617 = !DILocation(line: 4786, column: 11, scope: !5600)
!5618 = !DILocation(line: 4788, column: 34, scope: !5619)
!5619 = distinct !DILexicalBlock(scope: !5614, file: !3, line: 4787, column: 2)
!5620 = !DILocation(line: 4788, column: 19, scope: !5619)
!5621 = !DILocation(line: 4788, column: 4, scope: !5619)
!5622 = !DILocation(line: 4788, column: 9, scope: !5619)
!5623 = !DILocation(line: 4788, column: 13, scope: !5619)
!5624 = !DILocation(line: 4788, column: 17, scope: !5619)
!5625 = !DILocation(line: 4789, column: 18, scope: !5619)
!5626 = !DILocation(line: 4789, column: 23, scope: !5619)
!5627 = !DILocation(line: 4789, column: 27, scope: !5619)
!5628 = !DILocation(line: 4789, column: 4, scope: !5619)
!5629 = !DILocation(line: 4790, column: 2, scope: !5619)
!5630 = !DILocation(line: 4794, column: 48, scope: !5600)
!5631 = !DILocation(line: 4794, column: 52, scope: !5600)
!5632 = !DILocation(line: 4794, column: 57, scope: !5600)
!5633 = !DILocation(line: 4794, column: 61, scope: !5600)
!5634 = !DILocation(line: 4794, column: 23, scope: !5600)
!5635 = !DILocation(line: 4794, column: 20, scope: !5600)
!5636 = !DILocation(line: 4797, column: 29, scope: !5637)
!5637 = distinct !DILexicalBlock(scope: !5600, file: !3, line: 4797, column: 11)
!5638 = !DILocation(line: 4797, column: 34, scope: !5637)
!5639 = !DILocation(line: 4797, column: 38, scope: !5637)
!5640 = !DILocation(line: 4797, column: 12, scope: !5637)
!5641 = !DILocation(line: 4797, column: 11, scope: !5600)
!5642 = !DILocalVariable(name: "pred_rpo", scope: !5643, file: !3, line: 4799, type: !1740)
!5643 = distinct !DILexicalBlock(scope: !5637, file: !3, line: 4798, column: 2)
!5644 = !DILocation(line: 4799, column: 8, scope: !5643)
!5645 = !DILocation(line: 4799, column: 19, scope: !5643)
!5646 = !DILocation(line: 4800, column: 4, scope: !5647)
!5647 = distinct !DILexicalBlock(scope: !5643, file: !3, line: 4800, column: 4)
!5648 = !DILocation(line: 4800, column: 4, scope: !5649)
!5649 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 4800, column: 4)
!5650 = !DILocalVariable(name: "pred", scope: !5651, file: !3, line: 4802, type: !1740)
!5651 = distinct !DILexicalBlock(scope: !5649, file: !3, line: 4801, column: 6)
!5652 = !DILocation(line: 4802, column: 12, scope: !5651)
!5653 = !DILocation(line: 4802, column: 19, scope: !5651)
!5654 = !DILocation(line: 4802, column: 22, scope: !5651)
!5655 = !DILocation(line: 4802, column: 27, scope: !5651)
!5656 = !DILocation(line: 4803, column: 12, scope: !5657)
!5657 = distinct !DILexicalBlock(scope: !5651, file: !3, line: 4803, column: 12)
!5658 = !DILocation(line: 4803, column: 15, scope: !5657)
!5659 = !DILocation(line: 4803, column: 21, scope: !5657)
!5660 = !DILocation(line: 4803, column: 12, scope: !5651)
!5661 = !DILocation(line: 4804, column: 3, scope: !5657)
!5662 = !DILocation(line: 4806, column: 13, scope: !5663)
!5663 = distinct !DILexicalBlock(scope: !5651, file: !3, line: 4806, column: 12)
!5664 = !DILocation(line: 4806, column: 18, scope: !5663)
!5665 = !DILocation(line: 4806, column: 12, scope: !5651)
!5666 = !DILocation(line: 4808, column: 33, scope: !5667)
!5667 = distinct !DILexicalBlock(scope: !5663, file: !3, line: 4807, column: 3)
!5668 = !DILocation(line: 4808, column: 18, scope: !5667)
!5669 = !DILocation(line: 4808, column: 5, scope: !5667)
!5670 = !DILocation(line: 4808, column: 10, scope: !5667)
!5671 = !DILocation(line: 4808, column: 16, scope: !5667)
!5672 = !DILocation(line: 4809, column: 19, scope: !5667)
!5673 = !DILocation(line: 4809, column: 24, scope: !5667)
!5674 = !DILocation(line: 4809, column: 5, scope: !5667)
!5675 = !DILocation(line: 4810, column: 3, scope: !5667)
!5676 = !DILocation(line: 4811, column: 24, scope: !5651)
!5677 = !DILocation(line: 4811, column: 29, scope: !5651)
!5678 = !DILocation(line: 4811, column: 36, scope: !5651)
!5679 = !DILocation(line: 4811, column: 41, scope: !5651)
!5680 = !DILocation(line: 4811, column: 48, scope: !5651)
!5681 = !DILocation(line: 4811, column: 53, scope: !5651)
!5682 = !DILocation(line: 4811, column: 57, scope: !5651)
!5683 = !DILocation(line: 4811, column: 8, scope: !5651)
!5684 = !DILocation(line: 4813, column: 12, scope: !5685)
!5685 = distinct !DILexicalBlock(scope: !5651, file: !3, line: 4813, column: 12)
!5686 = !DILocation(line: 4813, column: 19, scope: !5685)
!5687 = !DILocation(line: 4813, column: 27, scope: !5685)
!5688 = !DILocation(line: 4813, column: 25, scope: !5685)
!5689 = !DILocation(line: 4813, column: 12, scope: !5651)
!5690 = !DILocation(line: 4814, column: 14, scope: !5685)
!5691 = !DILocation(line: 4814, column: 21, scope: !5685)
!5692 = !DILocation(line: 4814, column: 12, scope: !5685)
!5693 = !DILocation(line: 4814, column: 3, scope: !5685)
!5694 = !DILocation(line: 4815, column: 6, scope: !5651)
!5695 = distinct !{!5695, !5646, !5696}
!5696 = !DILocation(line: 4815, column: 6, scope: !5647)
!5697 = !DILocation(line: 4819, column: 23, scope: !5643)
!5698 = !DILocation(line: 4819, column: 4, scope: !5643)
!5699 = !DILocation(line: 4819, column: 13, scope: !5643)
!5700 = !DILocation(line: 4819, column: 17, scope: !5643)
!5701 = !DILocation(line: 4819, column: 21, scope: !5643)
!5702 = !DILocation(line: 4820, column: 2, scope: !5643)
!5703 = !DILocation(line: 4823, column: 4, scope: !5704)
!5704 = distinct !DILexicalBlock(scope: !5637, file: !3, line: 4822, column: 2)
!5705 = !DILocation(line: 4824, column: 4, scope: !5704)
!5706 = !DILocation(line: 4824, column: 9, scope: !5704)
!5707 = !DILocation(line: 4824, column: 13, scope: !5704)
!5708 = !DILocation(line: 4824, column: 17, scope: !5704)
!5709 = !DILocation(line: 4829, column: 7, scope: !5710)
!5710 = distinct !DILexicalBlock(scope: !5600, file: !3, line: 4829, column: 7)
!5711 = !DILocation(line: 4829, column: 7, scope: !5712)
!5712 = distinct !DILexicalBlock(scope: !5710, file: !3, line: 4829, column: 7)
!5713 = !DILocation(line: 4830, column: 6, scope: !5714)
!5714 = distinct !DILexicalBlock(scope: !5712, file: !3, line: 4830, column: 6)
!5715 = !DILocation(line: 4830, column: 15, scope: !5714)
!5716 = !DILocation(line: 4830, column: 18, scope: !5714)
!5717 = !DILocation(line: 4830, column: 24, scope: !5714)
!5718 = !DILocation(line: 4830, column: 34, scope: !5714)
!5719 = !DILocation(line: 4830, column: 31, scope: !5714)
!5720 = !DILocation(line: 4831, column: 6, scope: !5714)
!5721 = !DILocation(line: 4831, column: 9, scope: !5714)
!5722 = !DILocation(line: 4831, column: 14, scope: !5714)
!5723 = !DILocation(line: 4831, column: 17, scope: !5714)
!5724 = !DILocation(line: 4831, column: 23, scope: !5714)
!5725 = !DILocation(line: 4830, column: 6, scope: !5712)
!5726 = !DILocation(line: 4833, column: 6, scope: !5727)
!5727 = distinct !DILexicalBlock(scope: !5714, file: !3, line: 4832, column: 4)
!5728 = !DILocation(line: 4834, column: 6, scope: !5727)
!5729 = !DILocation(line: 4834, column: 11, scope: !5727)
!5730 = !DILocation(line: 4834, column: 14, scope: !5727)
!5731 = !DILocation(line: 4834, column: 20, scope: !5727)
!5732 = !DILocation(line: 4834, column: 27, scope: !5727)
!5733 = !DILocation(line: 4835, column: 4, scope: !5727)
!5734 = !DILocation(line: 4831, column: 28, scope: !5714)
!5735 = distinct !{!5735, !5709, !5736}
!5736 = !DILocation(line: 4835, column: 4, scope: !5710)
!5737 = !DILocation(line: 4836, column: 5, scope: !5600)
!5738 = !DILocation(line: 4780, column: 31, scope: !5596)
!5739 = !DILocation(line: 4780, column: 3, scope: !5596)
!5740 = distinct !{!5740, !5598, !5741}
!5741 = !DILocation(line: 4836, column: 5, scope: !5591)
!5742 = !DILocation(line: 4838, column: 3, scope: !5551)
!5743 = !DILocation(line: 4839, column: 3, scope: !5551)
!5744 = !DILocation(line: 4840, column: 3, scope: !5551)
!5745 = !DILocation(line: 4841, column: 10, scope: !5746)
!5746 = distinct !DILexicalBlock(scope: !5551, file: !3, line: 4841, column: 3)
!5747 = !DILocation(line: 4841, column: 8, scope: !5746)
!5748 = !DILocation(line: 4841, column: 15, scope: !5749)
!5749 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 4841, column: 3)
!5750 = !DILocation(line: 4841, column: 19, scope: !5749)
!5751 = !DILocation(line: 4841, column: 36, scope: !5749)
!5752 = !DILocation(line: 4841, column: 17, scope: !5749)
!5753 = !DILocation(line: 4841, column: 3, scope: !5746)
!5754 = !DILocation(line: 4842, column: 9, scope: !5755)
!5755 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 4842, column: 9)
!5756 = !DILocation(line: 4842, column: 14, scope: !5755)
!5757 = !DILocation(line: 4842, column: 9, scope: !5749)
!5758 = !DILocation(line: 4843, column: 7, scope: !5755)
!5759 = !DILocation(line: 4842, column: 15, scope: !5755)
!5760 = !DILocation(line: 4841, column: 56, scope: !5749)
!5761 = !DILocation(line: 4841, column: 3, scope: !5749)
!5762 = distinct !{!5762, !5753, !5763}
!5763 = !DILocation(line: 4843, column: 7, scope: !5746)
!5764 = !DILocation(line: 4844, column: 3, scope: !5551)
!5765 = !DILocation(line: 4846, column: 10, scope: !5551)
!5766 = !DILocation(line: 4846, column: 3, scope: !5551)
!5767 = distinct !DISubprogram(name: "process_assert_insertions", scope: !3, file: !3, line: 4913, type: !3887, scopeLine: 4914, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5768 = !DILocalVariable(name: "i", scope: !5767, file: !3, line: 4915, type: !7)
!5769 = !DILocation(line: 4915, column: 12, scope: !5767)
!5770 = !DILocalVariable(name: "bi", scope: !5767, file: !3, line: 4916, type: !3511)
!5771 = !DILocation(line: 4916, column: 19, scope: !5767)
!5772 = !DILocalVariable(name: "update_edges_p", scope: !5767, file: !3, line: 4917, type: !1866)
!5773 = !DILocation(line: 4917, column: 8, scope: !5767)
!5774 = !DILocalVariable(name: "num_asserts", scope: !5767, file: !3, line: 4918, type: !1740)
!5775 = !DILocation(line: 4918, column: 7, scope: !5767)
!5776 = !DILocation(line: 4920, column: 7, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5767, file: !3, line: 4920, column: 7)
!5778 = !DILocation(line: 4920, column: 17, scope: !5777)
!5779 = !DILocation(line: 4920, column: 21, scope: !5777)
!5780 = !DILocation(line: 4920, column: 32, scope: !5777)
!5781 = !DILocation(line: 4920, column: 7, scope: !5767)
!5782 = !DILocation(line: 4921, column: 23, scope: !5777)
!5783 = !DILocation(line: 4921, column: 5, scope: !5777)
!5784 = !DILocation(line: 4923, column: 3, scope: !5785)
!5785 = distinct !DILexicalBlock(scope: !5767, file: !3, line: 4923, column: 3)
!5786 = !DILocation(line: 4923, column: 3, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5785, file: !3, line: 4923, column: 3)
!5788 = !DILocalVariable(name: "loc", scope: !5789, file: !3, line: 4925, type: !3105)
!5789 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 4924, column: 5)
!5790 = !DILocation(line: 4925, column: 22, scope: !5789)
!5791 = !DILocation(line: 4925, column: 28, scope: !5789)
!5792 = !DILocation(line: 4925, column: 40, scope: !5789)
!5793 = !DILocation(line: 4926, column: 7, scope: !5789)
!5794 = !DILocation(line: 4928, column: 7, scope: !5789)
!5795 = !DILocation(line: 4928, column: 14, scope: !5789)
!5796 = !DILocalVariable(name: "next", scope: !5797, file: !3, line: 4930, type: !3105)
!5797 = distinct !DILexicalBlock(scope: !5789, file: !3, line: 4929, column: 2)
!5798 = !DILocation(line: 4930, column: 19, scope: !5797)
!5799 = !DILocation(line: 4930, column: 26, scope: !5797)
!5800 = !DILocation(line: 4930, column: 31, scope: !5797)
!5801 = !DILocation(line: 4931, column: 53, scope: !5797)
!5802 = !DILocation(line: 4931, column: 67, scope: !5797)
!5803 = !DILocation(line: 4931, column: 22, scope: !5797)
!5804 = !DILocation(line: 4931, column: 19, scope: !5797)
!5805 = !DILocation(line: 4932, column: 10, scope: !5797)
!5806 = !DILocation(line: 4932, column: 4, scope: !5797)
!5807 = !DILocation(line: 4933, column: 10, scope: !5797)
!5808 = !DILocation(line: 4933, column: 8, scope: !5797)
!5809 = !DILocation(line: 4934, column: 15, scope: !5797)
!5810 = distinct !{!5810, !5794, !5811}
!5811 = !DILocation(line: 4935, column: 2, scope: !5789)
!5812 = !DILocation(line: 4936, column: 5, scope: !5789)
!5813 = distinct !{!5813, !5784, !5814}
!5814 = !DILocation(line: 4936, column: 5, scope: !5785)
!5815 = !DILocation(line: 4938, column: 7, scope: !5816)
!5816 = distinct !DILexicalBlock(scope: !5767, file: !3, line: 4938, column: 7)
!5817 = !DILocation(line: 4938, column: 7, scope: !5767)
!5818 = !DILocation(line: 4939, column: 5, scope: !5816)
!5819 = !DILocation(line: 4941, column: 29, scope: !5767)
!5820 = !DILocation(line: 4942, column: 8, scope: !5767)
!5821 = !DILocation(line: 4941, column: 3, scope: !5767)
!5822 = !DILocation(line: 4943, column: 1, scope: !5767)
!5823 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !343, file: !343, line: 281, type: !5824, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5824 = !DISubroutineType(types: !5825)
!5825 = !{!2527, !5826, !7}
!5826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5827, size: 64)
!5827 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2535)
!5828 = !DILocalVariable(name: "vec_", arg: 1, scope: !5823, file: !343, line: 281, type: !5826)
!5829 = !DILocation(line: 281, column: 1, scope: !5823)
!5830 = !DILocalVariable(name: "ix_", arg: 2, scope: !5823, file: !343, line: 281, type: !7)
!5831 = !DILocation(line: 0, scope: !5823)
!5832 = distinct !DISubprogram(name: "find_assert_locations_1", scope: !3, file: !3, line: 4645, type: !5833, scopeLine: 4646, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!5833 = !DISubroutineType(types: !5834)
!5834 = !{!1866, !2527, !3124}
!5835 = !DILocalVariable(name: "bb", arg: 1, scope: !5832, file: !3, line: 4645, type: !2527)
!5836 = !DILocation(line: 4645, column: 38, scope: !5832)
!5837 = !DILocalVariable(name: "live", arg: 2, scope: !5832, file: !3, line: 4645, type: !3124)
!5838 = !DILocation(line: 4645, column: 50, scope: !5832)
!5839 = !DILocalVariable(name: "si", scope: !5832, file: !3, line: 4647, type: !3112)
!5840 = !DILocation(line: 4647, column: 24, scope: !5832)
!5841 = !DILocalVariable(name: "last", scope: !5832, file: !3, line: 4648, type: !2076)
!5842 = !DILocation(line: 4648, column: 10, scope: !5832)
!5843 = !DILocalVariable(name: "phi", scope: !5832, file: !3, line: 4649, type: !2076)
!5844 = !DILocation(line: 4649, column: 10, scope: !5832)
!5845 = !DILocalVariable(name: "need_assert", scope: !5832, file: !3, line: 4650, type: !1866)
!5846 = !DILocation(line: 4650, column: 8, scope: !5832)
!5847 = !DILocation(line: 4652, column: 15, scope: !5832)
!5848 = !DILocation(line: 4653, column: 21, scope: !5832)
!5849 = !DILocation(line: 4653, column: 10, scope: !5832)
!5850 = !DILocation(line: 4653, column: 8, scope: !5832)
!5851 = !DILocation(line: 4657, column: 7, scope: !5852)
!5852 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 4657, column: 7)
!5853 = !DILocation(line: 4658, column: 7, scope: !5852)
!5854 = !DILocation(line: 4658, column: 23, scope: !5852)
!5855 = !DILocation(line: 4658, column: 10, scope: !5852)
!5856 = !DILocation(line: 4658, column: 29, scope: !5852)
!5857 = !DILocation(line: 4659, column: 7, scope: !5852)
!5858 = !DILocation(line: 4659, column: 25, scope: !5852)
!5859 = !DILocation(line: 4659, column: 11, scope: !5852)
!5860 = !DILocation(line: 4660, column: 7, scope: !5852)
!5861 = !DILocation(line: 4660, column: 11, scope: !5852)
!5862 = !DILocation(line: 4657, column: 7, scope: !5832)
!5863 = !DILocation(line: 4661, column: 46, scope: !5852)
!5864 = !DILocation(line: 4661, column: 50, scope: !5852)
!5865 = !DILocation(line: 4661, column: 20, scope: !5852)
!5866 = !DILocation(line: 4661, column: 17, scope: !5852)
!5867 = !DILocation(line: 4661, column: 5, scope: !5852)
!5868 = !DILocation(line: 4665, column: 7, scope: !5869)
!5869 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 4665, column: 7)
!5870 = !DILocation(line: 4666, column: 7, scope: !5869)
!5871 = !DILocation(line: 4666, column: 23, scope: !5869)
!5872 = !DILocation(line: 4666, column: 10, scope: !5869)
!5873 = !DILocation(line: 4666, column: 29, scope: !5869)
!5874 = !DILocation(line: 4667, column: 7, scope: !5869)
!5875 = !DILocation(line: 4667, column: 11, scope: !5869)
!5876 = !DILocation(line: 4665, column: 7, scope: !5832)
!5877 = !DILocation(line: 4668, column: 41, scope: !5869)
!5878 = !DILocation(line: 4668, column: 45, scope: !5869)
!5879 = !DILocation(line: 4668, column: 20, scope: !5869)
!5880 = !DILocation(line: 4668, column: 17, scope: !5869)
!5881 = !DILocation(line: 4668, column: 5, scope: !5869)
!5882 = !DILocation(line: 4672, column: 27, scope: !5883)
!5883 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 4672, column: 3)
!5884 = !DILocation(line: 4672, column: 13, scope: !5883)
!5885 = !DILocation(line: 4672, column: 8, scope: !5883)
!5886 = !DILocation(line: 4672, column: 33, scope: !5887)
!5887 = distinct !DILexicalBlock(scope: !5883, file: !3, line: 4672, column: 3)
!5888 = !DILocation(line: 4672, column: 32, scope: !5887)
!5889 = !DILocation(line: 4672, column: 3, scope: !5883)
!5890 = !DILocalVariable(name: "stmt", scope: !5891, file: !3, line: 4674, type: !2076)
!5891 = distinct !DILexicalBlock(scope: !5887, file: !3, line: 4673, column: 5)
!5892 = !DILocation(line: 4674, column: 14, scope: !5891)
!5893 = !DILocalVariable(name: "op", scope: !5891, file: !3, line: 4675, type: !1747)
!5894 = !DILocation(line: 4675, column: 12, scope: !5891)
!5895 = !DILocalVariable(name: "i", scope: !5891, file: !3, line: 4676, type: !4830)
!5896 = !DILocation(line: 4676, column: 19, scope: !5891)
!5897 = !DILocation(line: 4678, column: 14, scope: !5891)
!5898 = !DILocation(line: 4678, column: 12, scope: !5891)
!5899 = !DILocation(line: 4680, column: 28, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5891, file: !3, line: 4680, column: 11)
!5901 = !DILocation(line: 4680, column: 11, scope: !5900)
!5902 = !DILocation(line: 4680, column: 11, scope: !5891)
!5903 = !DILocation(line: 4681, column: 2, scope: !5900)
!5904 = !DILocation(line: 4684, column: 7, scope: !5905)
!5905 = distinct !DILexicalBlock(scope: !5891, file: !3, line: 4684, column: 7)
!5906 = !DILocation(line: 4684, column: 7, scope: !5907)
!5907 = distinct !DILexicalBlock(scope: !5905, file: !3, line: 4684, column: 7)
!5908 = !DILocalVariable(name: "value", scope: !5909, file: !3, line: 4686, type: !1747)
!5909 = distinct !DILexicalBlock(scope: !5907, file: !3, line: 4685, column: 2)
!5910 = !DILocation(line: 4686, column: 9, scope: !5909)
!5911 = !DILocalVariable(name: "comp_code", scope: !5909, file: !3, line: 4687, type: !134)
!5912 = !DILocation(line: 4687, column: 19, scope: !5909)
!5913 = !DILocation(line: 4690, column: 13, scope: !5909)
!5914 = !DILocation(line: 4690, column: 19, scope: !5909)
!5915 = !DILocation(line: 4690, column: 4, scope: !5909)
!5916 = !DILocation(line: 4695, column: 27, scope: !5917)
!5917 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 4695, column: 8)
!5918 = !DILocation(line: 4695, column: 33, scope: !5917)
!5919 = !DILocation(line: 4695, column: 8, scope: !5917)
!5920 = !DILocation(line: 4695, column: 8, scope: !5909)
!5921 = !DILocation(line: 4703, column: 12, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 4703, column: 12)
!5923 = distinct !DILexicalBlock(scope: !5917, file: !3, line: 4696, column: 6)
!5924 = !DILocation(line: 4703, column: 22, scope: !5922)
!5925 = !DILocation(line: 4703, column: 33, scope: !5922)
!5926 = !DILocation(line: 4703, column: 51, scope: !5922)
!5927 = !DILocation(line: 4703, column: 36, scope: !5922)
!5928 = !DILocation(line: 4703, column: 12, scope: !5923)
!5929 = !DILocalVariable(name: "t", scope: !5930, file: !3, line: 4705, type: !1747)
!5930 = distinct !DILexicalBlock(scope: !5922, file: !3, line: 4704, column: 3)
!5931 = !DILocation(line: 4705, column: 10, scope: !5930)
!5932 = !DILocation(line: 4705, column: 14, scope: !5930)
!5933 = !DILocalVariable(name: "def_stmt", scope: !5930, file: !3, line: 4706, type: !2076)
!5934 = !DILocation(line: 4706, column: 12, scope: !5930)
!5935 = !DILocation(line: 4706, column: 23, scope: !5930)
!5936 = !DILocation(line: 4708, column: 5, scope: !5930)
!5937 = !DILocation(line: 4708, column: 30, scope: !5930)
!5938 = !DILocation(line: 4708, column: 12, scope: !5930)
!5939 = !DILocation(line: 4709, column: 5, scope: !5930)
!5940 = !DILocation(line: 4709, column: 32, scope: !5930)
!5941 = !DILocation(line: 4709, column: 8, scope: !5930)
!5942 = !DILocation(line: 4709, column: 43, scope: !5930)
!5943 = !DILocation(line: 4710, column: 5, scope: !5930)
!5944 = !DILocation(line: 4710, column: 8, scope: !5930)
!5945 = !DILocation(line: 4711, column: 41, scope: !5930)
!5946 = !DILocation(line: 4712, column: 5, scope: !5930)
!5947 = !DILocation(line: 4712, column: 8, scope: !5930)
!5948 = !DILocation(line: 0, scope: !5930)
!5949 = !DILocation(line: 4715, column: 33, scope: !5950)
!5950 = distinct !DILexicalBlock(scope: !5930, file: !3, line: 4714, column: 7)
!5951 = !DILocation(line: 4715, column: 13, scope: !5950)
!5952 = !DILocation(line: 4715, column: 11, scope: !5950)
!5953 = !DILocation(line: 4716, column: 20, scope: !5950)
!5954 = !DILocation(line: 4716, column: 18, scope: !5950)
!5955 = !DILocation(line: 4721, column: 31, scope: !5956)
!5956 = distinct !DILexicalBlock(scope: !5950, file: !3, line: 4721, column: 13)
!5957 = !DILocation(line: 4721, column: 15, scope: !5956)
!5958 = !DILocation(line: 4721, column: 13, scope: !5950)
!5959 = !DILocation(line: 4723, column: 31, scope: !5960)
!5960 = distinct !DILexicalBlock(scope: !5956, file: !3, line: 4722, column: 4)
!5961 = !DILocation(line: 4723, column: 34, scope: !5960)
!5962 = !DILocation(line: 4723, column: 37, scope: !5960)
!5963 = !DILocation(line: 4723, column: 48, scope: !5960)
!5964 = !DILocation(line: 4724, column: 10, scope: !5960)
!5965 = !DILocation(line: 4723, column: 6, scope: !5960)
!5966 = !DILocation(line: 4725, column: 18, scope: !5960)
!5967 = !DILocation(line: 4726, column: 4, scope: !5960)
!5968 = distinct !{!5968, !5936, !5969}
!5969 = !DILocation(line: 4727, column: 7, scope: !5930)
!5970 = !DILocation(line: 4728, column: 3, scope: !5930)
!5971 = !DILocation(line: 4733, column: 29, scope: !5972)
!5972 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 4733, column: 12)
!5973 = !DILocation(line: 4733, column: 13, scope: !5972)
!5974 = !DILocation(line: 4733, column: 12, scope: !5923)
!5975 = !DILocation(line: 4735, column: 30, scope: !5976)
!5976 = distinct !DILexicalBlock(scope: !5972, file: !3, line: 4734, column: 3)
!5977 = !DILocation(line: 4735, column: 34, scope: !5976)
!5978 = !DILocation(line: 4735, column: 38, scope: !5976)
!5979 = !DILocation(line: 4735, column: 49, scope: !5976)
!5980 = !DILocation(line: 4736, column: 9, scope: !5976)
!5981 = !DILocation(line: 4735, column: 5, scope: !5976)
!5982 = !DILocation(line: 4737, column: 17, scope: !5976)
!5983 = !DILocation(line: 4738, column: 3, scope: !5976)
!5984 = !DILocation(line: 4739, column: 6, scope: !5923)
!5985 = !DILocation(line: 4740, column: 2, scope: !5909)
!5986 = distinct !{!5986, !5904, !5987}
!5987 = !DILocation(line: 4740, column: 2, scope: !5905)
!5988 = !DILocation(line: 4741, column: 5, scope: !5891)
!5989 = !DILocation(line: 4672, column: 49, scope: !5887)
!5990 = !DILocation(line: 4672, column: 3, scope: !5887)
!5991 = distinct !{!5991, !5889, !5992}
!5992 = !DILocation(line: 4741, column: 5, scope: !5883)
!5993 = !DILocation(line: 4744, column: 29, scope: !5994)
!5994 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 4744, column: 3)
!5995 = !DILocation(line: 4744, column: 13, scope: !5994)
!5996 = !DILocation(line: 4744, column: 8, scope: !5994)
!5997 = !DILocation(line: 4744, column: 35, scope: !5998)
!5998 = distinct !DILexicalBlock(scope: !5994, file: !3, line: 4744, column: 3)
!5999 = !DILocation(line: 4744, column: 34, scope: !5998)
!6000 = !DILocation(line: 4744, column: 3, scope: !5994)
!6001 = !DILocalVariable(name: "arg_p", scope: !6002, file: !3, line: 4746, type: !3142)
!6002 = distinct !DILexicalBlock(scope: !5998, file: !3, line: 4745, column: 5)
!6003 = !DILocation(line: 4746, column: 21, scope: !6002)
!6004 = !DILocalVariable(name: "i", scope: !6002, file: !3, line: 4747, type: !4830)
!6005 = !DILocation(line: 4747, column: 19, scope: !6002)
!6006 = !DILocation(line: 4748, column: 13, scope: !6002)
!6007 = !DILocation(line: 4748, column: 11, scope: !6002)
!6008 = !DILocation(line: 4750, column: 7, scope: !6009)
!6009 = distinct !DILexicalBlock(scope: !6002, file: !3, line: 4750, column: 7)
!6010 = !DILocation(line: 4750, column: 7, scope: !6011)
!6011 = distinct !DILexicalBlock(scope: !6009, file: !3, line: 4750, column: 7)
!6012 = !DILocalVariable(name: "arg", scope: !6013, file: !3, line: 4752, type: !1747)
!6013 = distinct !DILexicalBlock(scope: !6011, file: !3, line: 4751, column: 2)
!6014 = !DILocation(line: 4752, column: 9, scope: !6013)
!6015 = !DILocation(line: 4752, column: 15, scope: !6013)
!6016 = !DILocation(line: 4753, column: 8, scope: !6017)
!6017 = distinct !DILexicalBlock(scope: !6013, file: !3, line: 4753, column: 8)
!6018 = !DILocation(line: 4753, column: 24, scope: !6017)
!6019 = !DILocation(line: 4753, column: 8, scope: !6013)
!6020 = !DILocation(line: 4754, column: 15, scope: !6017)
!6021 = !DILocation(line: 4754, column: 21, scope: !6017)
!6022 = !DILocation(line: 4754, column: 6, scope: !6017)
!6023 = !DILocation(line: 4755, column: 2, scope: !6013)
!6024 = distinct !{!6024, !6008, !6025}
!6025 = !DILocation(line: 4755, column: 2, scope: !6009)
!6026 = !DILocation(line: 4756, column: 5, scope: !6002)
!6027 = !DILocation(line: 4744, column: 50, scope: !5998)
!6028 = !DILocation(line: 4744, column: 3, scope: !5998)
!6029 = distinct !{!6029, !6000, !6030}
!6030 = !DILocation(line: 4756, column: 5, scope: !5994)
!6031 = !DILocation(line: 4758, column: 10, scope: !5832)
!6032 = !DILocation(line: 4758, column: 3, scope: !5832)
!6033 = distinct !DISubprogram(name: "ei_start_1", scope: !343, file: !343, line: 696, type: !6034, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6034 = !DISubroutineType(types: !6035)
!6035 = !{!5606, !5611}
!6036 = !DILocalVariable(name: "ev", arg: 1, scope: !6033, file: !343, line: 696, type: !5611)
!6037 = !DILocation(line: 696, column: 28, scope: !6033)
!6038 = !DILocalVariable(name: "i", scope: !6033, file: !343, line: 698, type: !5606)
!6039 = !DILocation(line: 698, column: 17, scope: !6033)
!6040 = !DILocation(line: 700, column: 5, scope: !6033)
!6041 = !DILocation(line: 700, column: 11, scope: !6033)
!6042 = !DILocation(line: 701, column: 17, scope: !6033)
!6043 = !DILocation(line: 701, column: 5, scope: !6033)
!6044 = !DILocation(line: 701, column: 15, scope: !6033)
!6045 = !DILocation(line: 703, column: 3, scope: !6033)
!6046 = distinct !DISubprogram(name: "ei_cond", scope: !343, file: !343, line: 771, type: !6047, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6047 = !DISubroutineType(types: !6048)
!6048 = !{!1866, !5606, !4871}
!6049 = !DILocalVariable(name: "ei", arg: 1, scope: !6046, file: !343, line: 771, type: !5606)
!6050 = !DILocation(line: 771, column: 24, scope: !6046)
!6051 = !DILocalVariable(name: "p", arg: 2, scope: !6046, file: !343, line: 771, type: !4871)
!6052 = !DILocation(line: 771, column: 34, scope: !6046)
!6053 = !DILocation(line: 773, column: 8, scope: !6054)
!6054 = distinct !DILexicalBlock(scope: !6046, file: !343, line: 773, column: 7)
!6055 = !DILocation(line: 773, column: 7, scope: !6046)
!6056 = !DILocation(line: 775, column: 12, scope: !6057)
!6057 = distinct !DILexicalBlock(scope: !6054, file: !343, line: 774, column: 5)
!6058 = !DILocation(line: 775, column: 8, scope: !6057)
!6059 = !DILocation(line: 775, column: 10, scope: !6057)
!6060 = !DILocation(line: 776, column: 7, scope: !6057)
!6061 = !DILocation(line: 780, column: 8, scope: !6062)
!6062 = distinct !DILexicalBlock(scope: !6054, file: !343, line: 779, column: 5)
!6063 = !DILocation(line: 780, column: 10, scope: !6062)
!6064 = !DILocation(line: 781, column: 7, scope: !6062)
!6065 = !DILocation(line: 783, column: 1, scope: !6046)
!6066 = distinct !DISubprogram(name: "ei_next", scope: !343, file: !343, line: 736, type: !6067, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6067 = !DISubroutineType(types: !6068)
!6068 = !{null, !6069}
!6069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5606, size: 64)
!6070 = !DILocalVariable(name: "i", arg: 1, scope: !6066, file: !343, line: 736, type: !6069)
!6071 = !DILocation(line: 736, column: 25, scope: !6066)
!6072 = !DILocation(line: 738, column: 3, scope: !6066)
!6073 = !DILocation(line: 739, column: 3, scope: !6066)
!6074 = !DILocation(line: 739, column: 6, scope: !6066)
!6075 = !DILocation(line: 739, column: 11, scope: !6066)
!6076 = !DILocation(line: 740, column: 1, scope: !6066)
!6077 = distinct !DISubprogram(name: "gimple_code", scope: !742, file: !742, line: 1052, type: !6078, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6078 = !DISubroutineType(types: !6079)
!6079 = !{!741, !5524}
!6080 = !DILocalVariable(name: "g", arg: 1, scope: !6077, file: !742, line: 1052, type: !5524)
!6081 = !DILocation(line: 1052, column: 27, scope: !6077)
!6082 = !DILocation(line: 1054, column: 10, scope: !6077)
!6083 = !DILocation(line: 1054, column: 13, scope: !6077)
!6084 = !DILocation(line: 1054, column: 20, scope: !6077)
!6085 = !DILocation(line: 1054, column: 3, scope: !6077)
!6086 = distinct !DISubprogram(name: "fp_predicate", scope: !3, file: !3, line: 3788, type: !6087, scopeLine: 3789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6087 = !DISubroutineType(types: !6088)
!6088 = !{!1866, !2076}
!6089 = !DILocalVariable(name: "stmt", arg: 1, scope: !6086, file: !3, line: 3788, type: !2076)
!6090 = !DILocation(line: 3788, column: 22, scope: !6086)
!6091 = !DILocation(line: 3792, column: 10, scope: !6086)
!6092 = !DILocation(line: 0, scope: !6086)
!6093 = !DILocation(line: 3792, column: 3, scope: !6086)
!6094 = distinct !DISubprogram(name: "zero_ssa_operands", scope: !6095, file: !6095, line: 858, type: !6096, scopeLine: 859, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6095 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!6096 = !DISubroutineType(types: !6097)
!6097 = !{!1866, !2076, !1740}
!6098 = !DILocalVariable(name: "stmt", arg: 1, scope: !6094, file: !6095, line: 858, type: !2076)
!6099 = !DILocation(line: 858, column: 27, scope: !6094)
!6100 = !DILocalVariable(name: "flags", arg: 2, scope: !6094, file: !6095, line: 858, type: !1740)
!6101 = !DILocation(line: 858, column: 37, scope: !6094)
!6102 = !DILocalVariable(name: "iter", scope: !6094, file: !6095, line: 860, type: !4830)
!6103 = !DILocation(line: 860, column: 15, scope: !6094)
!6104 = !DILocation(line: 862, column: 29, scope: !6094)
!6105 = !DILocation(line: 862, column: 35, scope: !6094)
!6106 = !DILocation(line: 862, column: 3, scope: !6094)
!6107 = !DILocation(line: 863, column: 10, scope: !6094)
!6108 = !DILocation(line: 863, column: 3, scope: !6094)
!6109 = distinct !DISubprogram(name: "find_conditional_asserts", scope: !3, file: !3, line: 4424, type: !6110, scopeLine: 4425, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6110 = !DISubroutineType(types: !6111)
!6111 = !{!1866, !2527, !2076}
!6112 = !DILocalVariable(name: "bb", arg: 1, scope: !6109, file: !3, line: 4424, type: !2527)
!6113 = !DILocation(line: 4424, column: 39, scope: !6109)
!6114 = !DILocalVariable(name: "last", arg: 2, scope: !6109, file: !3, line: 4424, type: !2076)
!6115 = !DILocation(line: 4424, column: 50, scope: !6109)
!6116 = !DILocalVariable(name: "need_assert", scope: !6109, file: !3, line: 4426, type: !1866)
!6117 = !DILocation(line: 4426, column: 8, scope: !6109)
!6118 = !DILocalVariable(name: "bsi", scope: !6109, file: !3, line: 4427, type: !3112)
!6119 = !DILocation(line: 4427, column: 24, scope: !6109)
!6120 = !DILocalVariable(name: "op", scope: !6109, file: !3, line: 4428, type: !1747)
!6121 = !DILocation(line: 4428, column: 8, scope: !6109)
!6122 = !DILocalVariable(name: "ei", scope: !6109, file: !3, line: 4429, type: !5606)
!6123 = !DILocation(line: 4429, column: 17, scope: !6109)
!6124 = !DILocalVariable(name: "e", scope: !6109, file: !3, line: 4430, type: !2056)
!6125 = !DILocation(line: 4430, column: 8, scope: !6109)
!6126 = !DILocalVariable(name: "iter", scope: !6109, file: !3, line: 4431, type: !4830)
!6127 = !DILocation(line: 4431, column: 15, scope: !6109)
!6128 = !DILocation(line: 4433, column: 15, scope: !6109)
!6129 = !DILocation(line: 4434, column: 23, scope: !6109)
!6130 = !DILocation(line: 4434, column: 9, scope: !6109)
!6131 = !DILocation(line: 4440, column: 3, scope: !6132)
!6132 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 4440, column: 3)
!6133 = !DILocation(line: 4440, column: 3, scope: !6134)
!6134 = distinct !DILexicalBlock(scope: !6132, file: !3, line: 4440, column: 3)
!6135 = !DILocation(line: 4442, column: 11, scope: !6136)
!6136 = distinct !DILexicalBlock(scope: !6137, file: !3, line: 4442, column: 11)
!6137 = distinct !DILexicalBlock(scope: !6134, file: !3, line: 4441, column: 5)
!6138 = !DILocation(line: 4442, column: 14, scope: !6136)
!6139 = !DILocation(line: 4442, column: 22, scope: !6136)
!6140 = !DILocation(line: 4442, column: 19, scope: !6136)
!6141 = !DILocation(line: 4442, column: 11, scope: !6137)
!6142 = !DILocation(line: 4443, column: 2, scope: !6136)
!6143 = !DILocation(line: 4447, column: 7, scope: !6144)
!6144 = distinct !DILexicalBlock(scope: !6137, file: !3, line: 4447, column: 7)
!6145 = !DILocation(line: 4447, column: 7, scope: !6146)
!6146 = distinct !DILexicalBlock(scope: !6144, file: !3, line: 4447, column: 7)
!6147 = !DILocation(line: 4449, column: 45, scope: !6148)
!6148 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 4448, column: 2)
!6149 = !DILocation(line: 4449, column: 49, scope: !6148)
!6150 = !DILocation(line: 4450, column: 28, scope: !6148)
!6151 = !DILocation(line: 4450, column: 10, scope: !6148)
!6152 = !DILocation(line: 4451, column: 27, scope: !6148)
!6153 = !DILocation(line: 4451, column: 10, scope: !6148)
!6154 = !DILocation(line: 4452, column: 27, scope: !6148)
!6155 = !DILocation(line: 4452, column: 10, scope: !6148)
!6156 = !DILocation(line: 4449, column: 19, scope: !6148)
!6157 = !DILocation(line: 4449, column: 16, scope: !6148)
!6158 = !DILocation(line: 4453, column: 2, scope: !6148)
!6159 = distinct !{!6159, !6143, !6160}
!6160 = !DILocation(line: 4453, column: 2, scope: !6144)
!6161 = !DILocation(line: 4454, column: 5, scope: !6137)
!6162 = distinct !{!6162, !6131, !6163}
!6163 = !DILocation(line: 4454, column: 5, scope: !6132)
!6164 = !DILocation(line: 4456, column: 10, scope: !6109)
!6165 = !DILocation(line: 4456, column: 3, scope: !6109)
!6166 = distinct !DISubprogram(name: "find_switch_asserts", scope: !3, file: !3, line: 4495, type: !6110, scopeLine: 4496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6167 = !DILocalVariable(name: "bb", arg: 1, scope: !6166, file: !3, line: 4495, type: !2527)
!6168 = !DILocation(line: 4495, column: 34, scope: !6166)
!6169 = !DILocalVariable(name: "last", arg: 2, scope: !6166, file: !3, line: 4495, type: !2076)
!6170 = !DILocation(line: 4495, column: 45, scope: !6166)
!6171 = !DILocalVariable(name: "need_assert", scope: !6166, file: !3, line: 4497, type: !1866)
!6172 = !DILocation(line: 4497, column: 8, scope: !6166)
!6173 = !DILocalVariable(name: "bsi", scope: !6166, file: !3, line: 4498, type: !3112)
!6174 = !DILocation(line: 4498, column: 24, scope: !6166)
!6175 = !DILocalVariable(name: "op", scope: !6166, file: !3, line: 4499, type: !1747)
!6176 = !DILocation(line: 4499, column: 8, scope: !6166)
!6177 = !DILocalVariable(name: "e", scope: !6166, file: !3, line: 4500, type: !2056)
!6178 = !DILocation(line: 4500, column: 8, scope: !6166)
!6179 = !DILocalVariable(name: "vec2", scope: !6166, file: !3, line: 4501, type: !1747)
!6180 = !DILocation(line: 4501, column: 8, scope: !6166)
!6181 = !DILocalVariable(name: "n", scope: !6166, file: !3, line: 4502, type: !2221)
!6182 = !DILocation(line: 4502, column: 10, scope: !6166)
!6183 = !DILocation(line: 4502, column: 39, scope: !6166)
!6184 = !DILocation(line: 4502, column: 14, scope: !6166)
!6185 = !DILocalVariable(name: "idx", scope: !6166, file: !3, line: 4504, type: !7)
!6186 = !DILocation(line: 4504, column: 16, scope: !6166)
!6187 = !DILocation(line: 4510, column: 15, scope: !6166)
!6188 = !DILocation(line: 4511, column: 23, scope: !6166)
!6189 = !DILocation(line: 4511, column: 9, scope: !6166)
!6190 = !DILocation(line: 4512, column: 29, scope: !6166)
!6191 = !DILocation(line: 4512, column: 8, scope: !6166)
!6192 = !DILocation(line: 4512, column: 6, scope: !6166)
!6193 = !DILocation(line: 4513, column: 7, scope: !6194)
!6194 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 4513, column: 7)
!6195 = !DILocation(line: 4513, column: 22, scope: !6194)
!6196 = !DILocation(line: 4513, column: 7, scope: !6166)
!6197 = !DILocation(line: 4514, column: 5, scope: !6194)
!6198 = !DILocation(line: 4517, column: 10, scope: !6166)
!6199 = !DILocation(line: 4517, column: 8, scope: !6166)
!6200 = !DILocation(line: 4518, column: 12, scope: !6201)
!6201 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 4518, column: 3)
!6202 = !DILocation(line: 4518, column: 8, scope: !6201)
!6203 = !DILocation(line: 4518, column: 17, scope: !6204)
!6204 = distinct !DILexicalBlock(scope: !6201, file: !3, line: 4518, column: 3)
!6205 = !DILocation(line: 4518, column: 23, scope: !6204)
!6206 = !DILocation(line: 4518, column: 21, scope: !6204)
!6207 = !DILocation(line: 4518, column: 3, scope: !6201)
!6208 = !DILocation(line: 4519, column: 53, scope: !6204)
!6209 = !DILocation(line: 4519, column: 59, scope: !6204)
!6210 = !DILocation(line: 4519, column: 32, scope: !6204)
!6211 = !DILocation(line: 4519, column: 5, scope: !6204)
!6212 = !DILocation(line: 4519, column: 30, scope: !6204)
!6213 = !DILocation(line: 4518, column: 26, scope: !6204)
!6214 = !DILocation(line: 4518, column: 3, scope: !6204)
!6215 = distinct !{!6215, !6207, !6216}
!6216 = !DILocation(line: 4519, column: 62, scope: !6201)
!6217 = !DILocation(line: 4521, column: 16, scope: !6166)
!6218 = !DILocation(line: 4521, column: 15, scope: !6166)
!6219 = !DILocation(line: 4521, column: 40, scope: !6166)
!6220 = !DILocation(line: 4521, column: 3, scope: !6166)
!6221 = !DILocation(line: 4526, column: 12, scope: !6222)
!6222 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 4526, column: 3)
!6223 = !DILocation(line: 4526, column: 8, scope: !6222)
!6224 = !DILocation(line: 4526, column: 17, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6222, file: !3, line: 4526, column: 3)
!6226 = !DILocation(line: 4526, column: 23, scope: !6225)
!6227 = !DILocation(line: 4526, column: 21, scope: !6225)
!6228 = !DILocation(line: 4526, column: 3, scope: !6222)
!6229 = !DILocalVariable(name: "min", scope: !6230, file: !3, line: 4528, type: !1747)
!6230 = distinct !DILexicalBlock(scope: !6225, file: !3, line: 4527, column: 5)
!6231 = !DILocation(line: 4528, column: 12, scope: !6230)
!6232 = !DILocalVariable(name: "max", scope: !6230, file: !3, line: 4528, type: !1747)
!6233 = !DILocation(line: 4528, column: 17, scope: !6230)
!6234 = !DILocalVariable(name: "cl", scope: !6230, file: !3, line: 4529, type: !1747)
!6235 = !DILocation(line: 4529, column: 12, scope: !6230)
!6236 = !DILocation(line: 4529, column: 17, scope: !6230)
!6237 = !DILocation(line: 4531, column: 13, scope: !6230)
!6238 = !DILocation(line: 4531, column: 11, scope: !6230)
!6239 = !DILocation(line: 4532, column: 13, scope: !6230)
!6240 = !DILocation(line: 4532, column: 11, scope: !6230)
!6241 = !DILocation(line: 4536, column: 11, scope: !6242)
!6242 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 4536, column: 11)
!6243 = !DILocation(line: 4536, column: 15, scope: !6242)
!6244 = !DILocation(line: 4536, column: 21, scope: !6242)
!6245 = !DILocation(line: 4536, column: 19, scope: !6242)
!6246 = !DILocation(line: 4537, column: 4, scope: !6242)
!6247 = !DILocation(line: 4537, column: 7, scope: !6242)
!6248 = !DILocation(line: 4537, column: 26, scope: !6242)
!6249 = !DILocation(line: 4537, column: 23, scope: !6242)
!6250 = !DILocation(line: 4536, column: 11, scope: !6230)
!6251 = !DILocation(line: 4540, column: 4, scope: !6252)
!6252 = distinct !DILexicalBlock(scope: !6242, file: !3, line: 4538, column: 2)
!6253 = !DILocation(line: 4541, column: 6, scope: !6254)
!6254 = distinct !DILexicalBlock(scope: !6252, file: !3, line: 4540, column: 7)
!6255 = !DILocation(line: 4542, column: 4, scope: !6254)
!6256 = !DILocation(line: 4542, column: 13, scope: !6252)
!6257 = !DILocation(line: 4542, column: 19, scope: !6252)
!6258 = !DILocation(line: 4542, column: 17, scope: !6252)
!6259 = !DILocation(line: 4543, column: 6, scope: !6252)
!6260 = !DILocation(line: 4543, column: 9, scope: !6252)
!6261 = !DILocation(line: 4543, column: 28, scope: !6252)
!6262 = !DILocation(line: 4543, column: 25, scope: !6252)
!6263 = !DILocation(line: 0, scope: !6252)
!6264 = distinct !{!6264, !6251, !6265}
!6265 = !DILocation(line: 4543, column: 65, scope: !6252)
!6266 = !DILocation(line: 4544, column: 4, scope: !6252)
!6267 = !DILocation(line: 4547, column: 8, scope: !6268)
!6268 = distinct !DILexicalBlock(scope: !6252, file: !3, line: 4547, column: 8)
!6269 = !DILocation(line: 4547, column: 8, scope: !6252)
!6270 = !DILocation(line: 4548, column: 12, scope: !6268)
!6271 = !DILocation(line: 4548, column: 10, scope: !6268)
!6272 = !DILocation(line: 4548, column: 6, scope: !6268)
!6273 = !DILocation(line: 4550, column: 12, scope: !6268)
!6274 = !DILocation(line: 4550, column: 10, scope: !6268)
!6275 = !DILocation(line: 4551, column: 2, scope: !6252)
!6276 = !DILocation(line: 4555, column: 11, scope: !6277)
!6277 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 4555, column: 11)
!6278 = !DILocation(line: 4555, column: 15, scope: !6277)
!6279 = !DILocation(line: 4555, column: 11, scope: !6230)
!6280 = !DILocation(line: 4556, column: 2, scope: !6277)
!6281 = !DILocation(line: 4559, column: 22, scope: !6230)
!6282 = !DILocation(line: 4559, column: 26, scope: !6230)
!6283 = !DILocation(line: 4559, column: 11, scope: !6230)
!6284 = !DILocation(line: 4559, column: 9, scope: !6230)
!6285 = !DILocation(line: 4563, column: 48, scope: !6230)
!6286 = !DILocation(line: 4563, column: 52, scope: !6230)
!6287 = !DILocation(line: 4564, column: 13, scope: !6230)
!6288 = !DILocation(line: 4565, column: 13, scope: !6230)
!6289 = !DILocation(line: 4566, column: 13, scope: !6230)
!6290 = !DILocation(line: 4563, column: 22, scope: !6230)
!6291 = !DILocation(line: 4563, column: 19, scope: !6230)
!6292 = !DILocation(line: 4568, column: 11, scope: !6293)
!6293 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 4568, column: 11)
!6294 = !DILocation(line: 4568, column: 11, scope: !6230)
!6295 = !DILocation(line: 4570, column: 45, scope: !6296)
!6296 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 4569, column: 2)
!6297 = !DILocation(line: 4570, column: 49, scope: !6296)
!6298 = !DILocation(line: 4571, column: 10, scope: !6296)
!6299 = !DILocation(line: 4572, column: 10, scope: !6296)
!6300 = !DILocation(line: 4570, column: 19, scope: !6296)
!6301 = !DILocation(line: 4570, column: 16, scope: !6296)
!6302 = !DILocation(line: 4574, column: 2, scope: !6296)
!6303 = !DILocation(line: 4575, column: 5, scope: !6230)
!6304 = !DILocation(line: 4526, column: 26, scope: !6225)
!6305 = !DILocation(line: 4526, column: 3, scope: !6225)
!6306 = distinct !{!6306, !6228, !6307}
!6307 = !DILocation(line: 4575, column: 5, scope: !6222)
!6308 = !DILocation(line: 4577, column: 10, scope: !6166)
!6309 = !DILocation(line: 4577, column: 3, scope: !6166)
!6310 = !DILocation(line: 4578, column: 1, scope: !6166)
!6311 = distinct !DISubprogram(name: "gsi_start_bb", scope: !742, file: !742, line: 4418, type: !6312, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6312 = !DISubroutineType(types: !6313)
!6313 = !{!3112, !2527}
!6314 = !DILocalVariable(name: "bb", arg: 1, scope: !6311, file: !742, line: 4418, type: !2527)
!6315 = !DILocation(line: 4418, column: 27, scope: !6311)
!6316 = !DILocalVariable(name: "i", scope: !6311, file: !742, line: 4420, type: !3112)
!6317 = !DILocation(line: 4420, column: 24, scope: !6311)
!6318 = !DILocalVariable(name: "seq", scope: !6311, file: !742, line: 4421, type: !2066)
!6319 = !DILocation(line: 4421, column: 14, scope: !6311)
!6320 = !DILocation(line: 4423, column: 17, scope: !6311)
!6321 = !DILocation(line: 4423, column: 9, scope: !6311)
!6322 = !DILocation(line: 4423, column: 7, scope: !6311)
!6323 = !DILocation(line: 4424, column: 29, scope: !6311)
!6324 = !DILocation(line: 4424, column: 11, scope: !6311)
!6325 = !DILocation(line: 4424, column: 5, scope: !6311)
!6326 = !DILocation(line: 4424, column: 9, scope: !6311)
!6327 = !DILocation(line: 4425, column: 11, scope: !6311)
!6328 = !DILocation(line: 4425, column: 5, scope: !6311)
!6329 = !DILocation(line: 4425, column: 9, scope: !6311)
!6330 = !DILocation(line: 4426, column: 10, scope: !6311)
!6331 = !DILocation(line: 4426, column: 5, scope: !6311)
!6332 = !DILocation(line: 4426, column: 8, scope: !6311)
!6333 = !DILocation(line: 4428, column: 3, scope: !6311)
!6334 = distinct !DISubprogram(name: "gsi_end_p", scope: !742, file: !742, line: 4467, type: !6335, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6335 = !DISubroutineType(types: !6336)
!6336 = !{!1866, !3112}
!6337 = !DILocalVariable(name: "i", arg: 1, scope: !6334, file: !742, line: 4467, type: !3112)
!6338 = !DILocation(line: 4467, column: 33, scope: !6334)
!6339 = !DILocation(line: 4469, column: 12, scope: !6334)
!6340 = !DILocation(line: 4469, column: 16, scope: !6334)
!6341 = !DILocation(line: 4469, column: 10, scope: !6334)
!6342 = !DILocation(line: 4469, column: 3, scope: !6334)
!6343 = distinct !DISubprogram(name: "is_gimple_debug", scope: !742, file: !742, line: 3249, type: !6344, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6344 = !DISubroutineType(types: !6345)
!6345 = !{!1866, !5524}
!6346 = !DILocalVariable(name: "gs", arg: 1, scope: !6343, file: !742, line: 3249, type: !5524)
!6347 = !DILocation(line: 3249, column: 31, scope: !6343)
!6348 = !DILocation(line: 3251, column: 23, scope: !6343)
!6349 = !DILocation(line: 3251, column: 10, scope: !6343)
!6350 = !DILocation(line: 3251, column: 27, scope: !6343)
!6351 = !DILocation(line: 3251, column: 3, scope: !6343)
!6352 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !6095, file: !6095, line: 792, type: !6353, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6353 = !DISubroutineType(types: !6354)
!6354 = !{!1747, !6355, !2076, !1740}
!6355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4830, size: 64)
!6356 = !DILocalVariable(name: "ptr", arg: 1, scope: !6352, file: !6095, line: 792, type: !6355)
!6357 = !DILocation(line: 792, column: 33, scope: !6352)
!6358 = !DILocalVariable(name: "stmt", arg: 2, scope: !6352, file: !6095, line: 792, type: !2076)
!6359 = !DILocation(line: 792, column: 45, scope: !6352)
!6360 = !DILocalVariable(name: "flags", arg: 3, scope: !6352, file: !6095, line: 792, type: !1740)
!6361 = !DILocation(line: 792, column: 55, scope: !6352)
!6362 = !DILocation(line: 794, column: 17, scope: !6352)
!6363 = !DILocation(line: 794, column: 22, scope: !6352)
!6364 = !DILocation(line: 794, column: 28, scope: !6352)
!6365 = !DILocation(line: 794, column: 3, scope: !6352)
!6366 = !DILocation(line: 795, column: 3, scope: !6352)
!6367 = !DILocation(line: 795, column: 8, scope: !6352)
!6368 = !DILocation(line: 795, column: 18, scope: !6352)
!6369 = !DILocation(line: 796, column: 29, scope: !6352)
!6370 = !DILocation(line: 796, column: 10, scope: !6352)
!6371 = !DILocation(line: 796, column: 3, scope: !6352)
!6372 = distinct !DISubprogram(name: "op_iter_done", scope: !6095, file: !6095, line: 652, type: !6373, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6373 = !DISubroutineType(types: !6374)
!6374 = !{!1866, !6375}
!6375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6376, size: 64)
!6376 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4830)
!6377 = !DILocalVariable(name: "ptr", arg: 1, scope: !6372, file: !6095, line: 652, type: !6375)
!6378 = !DILocation(line: 652, column: 34, scope: !6372)
!6379 = !DILocation(line: 654, column: 10, scope: !6372)
!6380 = !DILocation(line: 654, column: 15, scope: !6372)
!6381 = !DILocation(line: 654, column: 3, scope: !6372)
!6382 = distinct !DISubprogram(name: "SET_BIT", scope: !3125, file: !3125, line: 63, type: !6383, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6383 = !DISubroutineType(types: !6384)
!6384 = !{null, !3124, !7}
!6385 = !DILocalVariable(name: "map", arg: 1, scope: !6382, file: !3125, line: 63, type: !3124)
!6386 = !DILocation(line: 63, column: 18, scope: !6382)
!6387 = !DILocalVariable(name: "bitno", arg: 2, scope: !6382, file: !3125, line: 63, type: !7)
!6388 = !DILocation(line: 63, column: 36, scope: !6382)
!6389 = !DILocation(line: 65, column: 7, scope: !6390)
!6390 = distinct !DILexicalBlock(scope: !6382, file: !3125, line: 65, column: 7)
!6391 = !DILocation(line: 65, column: 12, scope: !6390)
!6392 = !DILocation(line: 65, column: 7, scope: !6382)
!6393 = !DILocalVariable(name: "oldbit", scope: !6394, file: !3125, line: 67, type: !1866)
!6394 = distinct !DILexicalBlock(scope: !6390, file: !3125, line: 66, column: 5)
!6395 = !DILocation(line: 67, column: 12, scope: !6394)
!6396 = !DILocation(line: 68, column: 16, scope: !6394)
!6397 = !DILocation(line: 68, column: 14, scope: !6394)
!6398 = !DILocation(line: 69, column: 12, scope: !6399)
!6399 = distinct !DILexicalBlock(scope: !6394, file: !3125, line: 69, column: 11)
!6400 = !DILocation(line: 69, column: 11, scope: !6394)
!6401 = !DILocation(line: 70, column: 2, scope: !6399)
!6402 = !DILocation(line: 70, column: 7, scope: !6399)
!6403 = !DILocation(line: 70, column: 16, scope: !6399)
!6404 = !DILocation(line: 70, column: 22, scope: !6399)
!6405 = !DILocation(line: 70, column: 41, scope: !6399)
!6406 = !DILocation(line: 71, column: 5, scope: !6394)
!6407 = !DILocation(line: 73, column: 33, scope: !6382)
!6408 = !DILocation(line: 73, column: 40, scope: !6382)
!6409 = !DILocation(line: 73, column: 29, scope: !6382)
!6410 = !DILocation(line: 72, column: 3, scope: !6382)
!6411 = !DILocation(line: 72, column: 8, scope: !6382)
!6412 = !DILocation(line: 72, column: 13, scope: !6382)
!6413 = !DILocation(line: 72, column: 19, scope: !6382)
!6414 = !DILocation(line: 73, column: 5, scope: !6382)
!6415 = !DILocation(line: 74, column: 1, scope: !6382)
!6416 = distinct !DISubprogram(name: "infer_value_range", scope: !3, file: !3, line: 3802, type: !6417, scopeLine: 3803, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6417 = !DISubroutineType(types: !6418)
!6418 = !{!1866, !2076, !1747, !6419, !2110}
!6419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!6420 = !DILocalVariable(name: "stmt", arg: 1, scope: !6416, file: !3, line: 3802, type: !2076)
!6421 = !DILocation(line: 3802, column: 27, scope: !6416)
!6422 = !DILocalVariable(name: "op", arg: 2, scope: !6416, file: !3, line: 3802, type: !1747)
!6423 = !DILocation(line: 3802, column: 38, scope: !6416)
!6424 = !DILocalVariable(name: "comp_code_p", arg: 3, scope: !6416, file: !3, line: 3802, type: !6419)
!6425 = !DILocation(line: 3802, column: 58, scope: !6416)
!6426 = !DILocalVariable(name: "val_p", arg: 4, scope: !6416, file: !3, line: 3802, type: !2110)
!6427 = !DILocation(line: 3802, column: 77, scope: !6416)
!6428 = !DILocation(line: 3804, column: 4, scope: !6416)
!6429 = !DILocation(line: 3804, column: 10, scope: !6416)
!6430 = !DILocation(line: 3805, column: 4, scope: !6416)
!6431 = !DILocation(line: 3805, column: 16, scope: !6416)
!6432 = !DILocation(line: 3809, column: 7, scope: !6433)
!6433 = distinct !DILexicalBlock(scope: !6416, file: !3, line: 3809, column: 7)
!6434 = !DILocation(line: 3809, column: 7, scope: !6416)
!6435 = !DILocation(line: 3810, column: 5, scope: !6433)
!6436 = !DILocation(line: 3814, column: 27, scope: !6437)
!6437 = distinct !DILexicalBlock(scope: !6416, file: !3, line: 3814, column: 7)
!6438 = !DILocation(line: 3814, column: 7, scope: !6437)
!6439 = !DILocation(line: 3814, column: 7, scope: !6416)
!6440 = !DILocation(line: 3815, column: 5, scope: !6437)
!6441 = !DILocation(line: 3821, column: 23, scope: !6442)
!6442 = distinct !DILexicalBlock(scope: !6416, file: !3, line: 3821, column: 7)
!6443 = !DILocation(line: 3821, column: 7, scope: !6442)
!6444 = !DILocation(line: 3821, column: 29, scope: !6442)
!6445 = !DILocation(line: 3821, column: 32, scope: !6442)
!6446 = !DILocation(line: 3821, column: 69, scope: !6442)
!6447 = !DILocation(line: 3821, column: 7, scope: !6416)
!6448 = !DILocation(line: 3822, column: 5, scope: !6442)
!6449 = !DILocation(line: 3826, column: 7, scope: !6450)
!6450 = distinct !DILexicalBlock(scope: !6416, file: !3, line: 3826, column: 7)
!6451 = !DILocation(line: 3827, column: 7, scope: !6450)
!6452 = !DILocation(line: 3827, column: 10, scope: !6450)
!6453 = !DILocation(line: 3828, column: 7, scope: !6450)
!6454 = !DILocation(line: 3828, column: 23, scope: !6450)
!6455 = !DILocation(line: 3828, column: 10, scope: !6450)
!6456 = !DILocation(line: 3828, column: 29, scope: !6450)
!6457 = !DILocation(line: 3826, column: 7, scope: !6416)
!6458 = !DILocalVariable(name: "num_uses", scope: !6459, file: !3, line: 3830, type: !7)
!6459 = distinct !DILexicalBlock(scope: !6450, file: !3, line: 3829, column: 5)
!6460 = !DILocation(line: 3830, column: 16, scope: !6459)
!6461 = !DILocalVariable(name: "num_loads", scope: !6459, file: !3, line: 3830, type: !7)
!6462 = !DILocation(line: 3830, column: 26, scope: !6459)
!6463 = !DILocalVariable(name: "num_stores", scope: !6459, file: !3, line: 3830, type: !7)
!6464 = !DILocation(line: 3830, column: 37, scope: !6459)
!6465 = !DILocation(line: 3832, column: 30, scope: !6459)
!6466 = !DILocation(line: 3832, column: 34, scope: !6459)
!6467 = !DILocation(line: 3832, column: 7, scope: !6459)
!6468 = !DILocation(line: 3833, column: 11, scope: !6469)
!6469 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 3833, column: 11)
!6470 = !DILocation(line: 3833, column: 23, scope: !6469)
!6471 = !DILocation(line: 3833, column: 21, scope: !6469)
!6472 = !DILocation(line: 3833, column: 34, scope: !6469)
!6473 = !DILocation(line: 3833, column: 11, scope: !6459)
!6474 = !DILocation(line: 3835, column: 28, scope: !6475)
!6475 = distinct !DILexicalBlock(scope: !6469, file: !3, line: 3834, column: 2)
!6476 = !DILocation(line: 3835, column: 13, scope: !6475)
!6477 = !DILocation(line: 3835, column: 5, scope: !6475)
!6478 = !DILocation(line: 3835, column: 11, scope: !6475)
!6479 = !DILocation(line: 3836, column: 5, scope: !6475)
!6480 = !DILocation(line: 3836, column: 17, scope: !6475)
!6481 = !DILocation(line: 3837, column: 4, scope: !6475)
!6482 = !DILocation(line: 3839, column: 5, scope: !6459)
!6483 = !DILocation(line: 3841, column: 3, scope: !6416)
!6484 = !DILocation(line: 3842, column: 1, scope: !6416)
!6485 = distinct !DISubprogram(name: "is_gimple_assign", scope: !742, file: !742, line: 1677, type: !6344, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6486 = !DILocalVariable(name: "gs", arg: 1, scope: !6485, file: !742, line: 1677, type: !5524)
!6487 = !DILocation(line: 1677, column: 32, scope: !6485)
!6488 = !DILocation(line: 1679, column: 23, scope: !6485)
!6489 = !DILocation(line: 1679, column: 10, scope: !6485)
!6490 = !DILocation(line: 1679, column: 27, scope: !6485)
!6491 = !DILocation(line: 1679, column: 3, scope: !6485)
!6492 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !742, file: !742, line: 1815, type: !6493, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6493 = !DISubroutineType(types: !6494)
!6494 = !{!134, !5524}
!6495 = !DILocalVariable(name: "gs", arg: 1, scope: !6492, file: !742, line: 1815, type: !5524)
!6496 = !DILocation(line: 1815, column: 38, scope: !6492)
!6497 = !DILocalVariable(name: "code", scope: !6492, file: !742, line: 1817, type: !134)
!6498 = !DILocation(line: 1817, column: 18, scope: !6492)
!6499 = !DILocation(line: 1820, column: 28, scope: !6492)
!6500 = !DILocation(line: 1820, column: 10, scope: !6492)
!6501 = !DILocation(line: 1820, column: 8, scope: !6492)
!6502 = !DILocation(line: 1821, column: 29, scope: !6503)
!6503 = distinct !DILexicalBlock(scope: !6492, file: !742, line: 1821, column: 7)
!6504 = !DILocation(line: 1821, column: 7, scope: !6503)
!6505 = !DILocation(line: 1821, column: 35, scope: !6503)
!6506 = !DILocation(line: 1821, column: 7, scope: !6492)
!6507 = !DILocation(line: 1822, column: 12, scope: !6503)
!6508 = !DILocation(line: 1822, column: 10, scope: !6503)
!6509 = !DILocation(line: 1822, column: 5, scope: !6503)
!6510 = !DILocation(line: 1824, column: 10, scope: !6492)
!6511 = !DILocation(line: 1824, column: 3, scope: !6492)
!6512 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !742, file: !742, line: 1727, type: !5522, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6513 = !DILocalVariable(name: "gs", arg: 1, scope: !6512, file: !742, line: 1727, type: !5524)
!6514 = !DILocation(line: 1727, column: 34, scope: !6512)
!6515 = !DILocation(line: 1730, column: 21, scope: !6512)
!6516 = !DILocation(line: 1730, column: 10, scope: !6512)
!6517 = !DILocation(line: 1730, column: 3, scope: !6512)
!6518 = distinct !DISubprogram(name: "has_single_use", scope: !6095, file: !6095, line: 350, type: !3251, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6519 = !DILocalVariable(name: "var", arg: 1, scope: !6518, file: !6095, line: 350, type: !3139)
!6520 = !DILocation(line: 350, column: 28, scope: !6518)
!6521 = !DILocalVariable(name: "ptr", scope: !6518, file: !6095, line: 352, type: !6522)
!6522 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6523)
!6523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6524, size: 64)
!6524 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3144)
!6525 = !DILocation(line: 352, column: 34, scope: !6518)
!6526 = !DILocation(line: 352, column: 42, scope: !6518)
!6527 = !DILocation(line: 355, column: 7, scope: !6528)
!6528 = distinct !DILexicalBlock(scope: !6518, file: !6095, line: 355, column: 7)
!6529 = !DILocation(line: 355, column: 14, scope: !6528)
!6530 = !DILocation(line: 355, column: 19, scope: !6528)
!6531 = !DILocation(line: 355, column: 11, scope: !6528)
!6532 = !DILocation(line: 355, column: 7, scope: !6518)
!6533 = !DILocation(line: 356, column: 5, scope: !6528)
!6534 = !DILocation(line: 359, column: 7, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6518, file: !6095, line: 359, column: 7)
!6536 = !DILocation(line: 359, column: 14, scope: !6535)
!6537 = !DILocation(line: 359, column: 19, scope: !6535)
!6538 = !DILocation(line: 359, column: 25, scope: !6535)
!6539 = !DILocation(line: 359, column: 11, scope: !6535)
!6540 = !DILocation(line: 359, column: 7, scope: !6518)
!6541 = !DILocation(line: 360, column: 30, scope: !6535)
!6542 = !DILocation(line: 360, column: 13, scope: !6535)
!6543 = !DILocation(line: 360, column: 12, scope: !6535)
!6544 = !DILocation(line: 360, column: 5, scope: !6535)
!6545 = !DILocation(line: 363, column: 8, scope: !6546)
!6546 = distinct !DILexicalBlock(scope: !6518, file: !6095, line: 363, column: 7)
!6547 = !DILocation(line: 363, column: 7, scope: !6518)
!6548 = !DILocation(line: 364, column: 5, scope: !6546)
!6549 = !DILocation(line: 366, column: 28, scope: !6518)
!6550 = !DILocation(line: 366, column: 10, scope: !6518)
!6551 = !DILocation(line: 366, column: 3, scope: !6518)
!6552 = !DILocation(line: 367, column: 1, scope: !6518)
!6553 = distinct !DISubprogram(name: "register_new_assert_for", scope: !3, file: !3, line: 3930, type: !6554, scopeLine: 3936, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6554 = !DISubroutineType(types: !6555)
!6555 = !{null, !1747, !1747, !134, !1747, !2527, !2056, !3112}
!6556 = !DILocalVariable(name: "name", arg: 1, scope: !6553, file: !3, line: 3930, type: !1747)
!6557 = !DILocation(line: 3930, column: 31, scope: !6553)
!6558 = !DILocalVariable(name: "expr", arg: 2, scope: !6553, file: !3, line: 3930, type: !1747)
!6559 = !DILocation(line: 3930, column: 42, scope: !6553)
!6560 = !DILocalVariable(name: "comp_code", arg: 3, scope: !6553, file: !3, line: 3931, type: !134)
!6561 = !DILocation(line: 3931, column: 20, scope: !6553)
!6562 = !DILocalVariable(name: "val", arg: 4, scope: !6553, file: !3, line: 3932, type: !1747)
!6563 = !DILocation(line: 3932, column: 10, scope: !6553)
!6564 = !DILocalVariable(name: "bb", arg: 5, scope: !6553, file: !3, line: 3933, type: !2527)
!6565 = !DILocation(line: 3933, column: 17, scope: !6553)
!6566 = !DILocalVariable(name: "e", arg: 6, scope: !6553, file: !3, line: 3934, type: !2056)
!6567 = !DILocation(line: 3934, column: 10, scope: !6553)
!6568 = !DILocalVariable(name: "si", arg: 7, scope: !6553, file: !3, line: 3935, type: !3112)
!6569 = !DILocation(line: 3935, column: 26, scope: !6553)
!6570 = !DILocalVariable(name: "n", scope: !6553, file: !3, line: 3937, type: !3105)
!6571 = !DILocation(line: 3937, column: 18, scope: !6553)
!6572 = !DILocalVariable(name: "loc", scope: !6553, file: !3, line: 3937, type: !3105)
!6573 = !DILocation(line: 3937, column: 21, scope: !6553)
!6574 = !DILocalVariable(name: "last_loc", scope: !6553, file: !3, line: 3937, type: !3105)
!6575 = !DILocation(line: 3937, column: 26, scope: !6553)
!6576 = !DILocalVariable(name: "dest_bb", scope: !6553, file: !3, line: 3938, type: !2527)
!6577 = !DILocation(line: 3938, column: 15, scope: !6553)
!6578 = !DILocation(line: 3951, column: 7, scope: !6579)
!6579 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3951, column: 7)
!6580 = !DILocation(line: 3951, column: 23, scope: !6579)
!6581 = !DILocation(line: 3952, column: 7, scope: !6579)
!6582 = !DILocation(line: 3952, column: 10, scope: !6579)
!6583 = !DILocation(line: 3951, column: 7, scope: !6553)
!6584 = !DILocation(line: 3953, column: 31, scope: !6579)
!6585 = !DILocation(line: 3954, column: 10, scope: !6579)
!6586 = !DILocation(line: 3954, column: 34, scope: !6579)
!6587 = !DILocation(line: 3953, column: 11, scope: !6579)
!6588 = !DILocation(line: 3953, column: 9, scope: !6579)
!6589 = !DILocation(line: 3953, column: 5, scope: !6579)
!6590 = !DILocation(line: 3971, column: 14, scope: !6553)
!6591 = !DILocation(line: 3971, column: 13, scope: !6553)
!6592 = !DILocation(line: 3971, column: 20, scope: !6553)
!6593 = !DILocation(line: 3971, column: 25, scope: !6553)
!6594 = !DILocation(line: 3971, column: 28, scope: !6553)
!6595 = !DILocation(line: 3971, column: 11, scope: !6553)
!6596 = !DILocation(line: 3984, column: 9, scope: !6553)
!6597 = !DILocation(line: 3984, column: 21, scope: !6553)
!6598 = !DILocation(line: 3984, column: 7, scope: !6553)
!6599 = !DILocation(line: 3985, column: 14, scope: !6553)
!6600 = !DILocation(line: 3985, column: 12, scope: !6553)
!6601 = !DILocation(line: 3986, column: 3, scope: !6553)
!6602 = !DILocation(line: 3986, column: 10, scope: !6553)
!6603 = !DILocation(line: 3988, column: 11, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6605, file: !3, line: 3988, column: 11)
!6605 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3987, column: 5)
!6606 = !DILocation(line: 3988, column: 16, scope: !6604)
!6607 = !DILocation(line: 3988, column: 29, scope: !6604)
!6608 = !DILocation(line: 3988, column: 26, scope: !6604)
!6609 = !DILocation(line: 3989, column: 4, scope: !6604)
!6610 = !DILocation(line: 3989, column: 8, scope: !6604)
!6611 = !DILocation(line: 3989, column: 13, scope: !6604)
!6612 = !DILocation(line: 3989, column: 20, scope: !6604)
!6613 = !DILocation(line: 3989, column: 17, scope: !6604)
!6614 = !DILocation(line: 3990, column: 8, scope: !6604)
!6615 = !DILocation(line: 3990, column: 28, scope: !6604)
!6616 = !DILocation(line: 3990, column: 33, scope: !6604)
!6617 = !DILocation(line: 3990, column: 38, scope: !6604)
!6618 = !DILocation(line: 3990, column: 11, scope: !6604)
!6619 = !DILocation(line: 3991, column: 4, scope: !6604)
!6620 = !DILocation(line: 3991, column: 8, scope: !6604)
!6621 = !DILocation(line: 3991, column: 13, scope: !6604)
!6622 = !DILocation(line: 3991, column: 21, scope: !6604)
!6623 = !DILocation(line: 3991, column: 18, scope: !6604)
!6624 = !DILocation(line: 3992, column: 8, scope: !6604)
!6625 = !DILocation(line: 3992, column: 28, scope: !6604)
!6626 = !DILocation(line: 3992, column: 33, scope: !6604)
!6627 = !DILocation(line: 3992, column: 39, scope: !6604)
!6628 = !DILocation(line: 3992, column: 11, scope: !6604)
!6629 = !DILocation(line: 3988, column: 11, scope: !6605)
!6630 = !DILocation(line: 4007, column: 15, scope: !6631)
!6631 = distinct !DILexicalBlock(scope: !6632, file: !3, line: 4007, column: 15)
!6632 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 3993, column: 2)
!6633 = !DILocation(line: 4007, column: 17, scope: !6631)
!6634 = !DILocation(line: 4008, column: 8, scope: !6631)
!6635 = !DILocation(line: 4008, column: 43, scope: !6631)
!6636 = !DILocation(line: 4008, column: 52, scope: !6631)
!6637 = !DILocation(line: 4008, column: 57, scope: !6631)
!6638 = !DILocation(line: 4008, column: 11, scope: !6631)
!6639 = !DILocation(line: 4007, column: 15, scope: !6632)
!6640 = !DILocation(line: 4009, column: 6, scope: !6631)
!6641 = !DILocation(line: 4015, column: 9, scope: !6642)
!6642 = distinct !DILexicalBlock(scope: !6632, file: !3, line: 4015, column: 8)
!6643 = !DILocation(line: 4015, column: 11, scope: !6642)
!6644 = !DILocation(line: 4015, column: 19, scope: !6642)
!6645 = !DILocation(line: 4015, column: 23, scope: !6642)
!6646 = !DILocation(line: 4016, column: 8, scope: !6642)
!6647 = !DILocation(line: 4016, column: 43, scope: !6642)
!6648 = !DILocation(line: 4016, column: 48, scope: !6642)
!6649 = !DILocation(line: 4016, column: 52, scope: !6642)
!6650 = !DILocation(line: 4016, column: 11, scope: !6642)
!6651 = !DILocation(line: 4015, column: 8, scope: !6632)
!6652 = !DILocation(line: 4018, column: 18, scope: !6653)
!6653 = distinct !DILexicalBlock(scope: !6642, file: !3, line: 4017, column: 6)
!6654 = !DILocation(line: 4018, column: 8, scope: !6653)
!6655 = !DILocation(line: 4018, column: 13, scope: !6653)
!6656 = !DILocation(line: 4018, column: 16, scope: !6653)
!6657 = !DILocation(line: 4019, column: 17, scope: !6653)
!6658 = !DILocation(line: 4019, column: 8, scope: !6653)
!6659 = !DILocation(line: 4019, column: 13, scope: !6653)
!6660 = !DILocation(line: 4019, column: 15, scope: !6653)
!6661 = !DILocation(line: 4020, column: 8, scope: !6653)
!6662 = !DILocation(line: 4020, column: 13, scope: !6653)
!6663 = !DILocation(line: 4020, column: 18, scope: !6653)
!6664 = !DILocation(line: 4021, column: 8, scope: !6653)
!6665 = !DILocation(line: 4023, column: 2, scope: !6632)
!6666 = !DILocation(line: 4026, column: 18, scope: !6605)
!6667 = !DILocation(line: 4026, column: 16, scope: !6605)
!6668 = !DILocation(line: 4027, column: 13, scope: !6605)
!6669 = !DILocation(line: 4027, column: 18, scope: !6605)
!6670 = !DILocation(line: 4027, column: 11, scope: !6605)
!6671 = distinct !{!6671, !6601, !6672}
!6672 = !DILocation(line: 4028, column: 5, scope: !6553)
!6673 = !DILocation(line: 4033, column: 7, scope: !6553)
!6674 = !DILocation(line: 4033, column: 5, scope: !6553)
!6675 = !DILocation(line: 4034, column: 11, scope: !6553)
!6676 = !DILocation(line: 4034, column: 3, scope: !6553)
!6677 = !DILocation(line: 4034, column: 6, scope: !6553)
!6678 = !DILocation(line: 4034, column: 9, scope: !6553)
!6679 = !DILocation(line: 4035, column: 10, scope: !6553)
!6680 = !DILocation(line: 4035, column: 3, scope: !6553)
!6681 = !DILocation(line: 4035, column: 6, scope: !6553)
!6682 = !DILocation(line: 4035, column: 8, scope: !6553)
!6683 = !DILocation(line: 4036, column: 3, scope: !6553)
!6684 = !DILocation(line: 4036, column: 6, scope: !6553)
!6685 = !DILocation(line: 4036, column: 11, scope: !6553)
!6686 = !DILocation(line: 4037, column: 18, scope: !6553)
!6687 = !DILocation(line: 4037, column: 3, scope: !6553)
!6688 = !DILocation(line: 4037, column: 6, scope: !6553)
!6689 = !DILocation(line: 4037, column: 16, scope: !6553)
!6690 = !DILocation(line: 4038, column: 12, scope: !6553)
!6691 = !DILocation(line: 4038, column: 3, scope: !6553)
!6692 = !DILocation(line: 4038, column: 6, scope: !6553)
!6693 = !DILocation(line: 4038, column: 10, scope: !6553)
!6694 = !DILocation(line: 4039, column: 13, scope: !6553)
!6695 = !DILocation(line: 4039, column: 3, scope: !6553)
!6696 = !DILocation(line: 4039, column: 6, scope: !6553)
!6697 = !DILocation(line: 4039, column: 11, scope: !6553)
!6698 = !DILocation(line: 4040, column: 3, scope: !6553)
!6699 = !DILocation(line: 4040, column: 6, scope: !6553)
!6700 = !DILocation(line: 4040, column: 11, scope: !6553)
!6701 = !DILocation(line: 4042, column: 7, scope: !6702)
!6702 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 4042, column: 7)
!6703 = !DILocation(line: 4042, column: 7, scope: !6553)
!6704 = !DILocation(line: 4043, column: 22, scope: !6702)
!6705 = !DILocation(line: 4043, column: 5, scope: !6702)
!6706 = !DILocation(line: 4043, column: 15, scope: !6702)
!6707 = !DILocation(line: 4043, column: 20, scope: !6702)
!6708 = !DILocation(line: 4045, column: 44, scope: !6702)
!6709 = !DILocation(line: 4045, column: 5, scope: !6702)
!6710 = !DILocation(line: 4045, column: 17, scope: !6702)
!6711 = !DILocation(line: 4045, column: 42, scope: !6702)
!6712 = !DILocation(line: 4047, column: 19, scope: !6553)
!6713 = !DILocation(line: 4047, column: 36, scope: !6553)
!6714 = !DILocation(line: 4047, column: 3, scope: !6553)
!6715 = !DILocation(line: 4048, column: 1, scope: !6553)
!6716 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !6095, file: !6095, line: 699, type: !6717, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6717 = !DISubroutineType(types: !6718)
!6718 = !{!1747, !6355}
!6719 = !DILocalVariable(name: "ptr", arg: 1, scope: !6716, file: !6095, line: 699, type: !6355)
!6720 = !DILocation(line: 699, column: 33, scope: !6716)
!6721 = !DILocalVariable(name: "val", scope: !6716, file: !6095, line: 701, type: !1747)
!6722 = !DILocation(line: 701, column: 8, scope: !6716)
!6723 = !DILocation(line: 705, column: 7, scope: !6724)
!6724 = distinct !DILexicalBlock(scope: !6716, file: !6095, line: 705, column: 7)
!6725 = !DILocation(line: 705, column: 12, scope: !6724)
!6726 = !DILocation(line: 705, column: 7, scope: !6716)
!6727 = !DILocation(line: 707, column: 13, scope: !6728)
!6728 = distinct !DILexicalBlock(scope: !6724, file: !6095, line: 706, column: 5)
!6729 = !DILocation(line: 707, column: 11, scope: !6728)
!6730 = !DILocation(line: 708, column: 19, scope: !6728)
!6731 = !DILocation(line: 708, column: 24, scope: !6728)
!6732 = !DILocation(line: 708, column: 30, scope: !6728)
!6733 = !DILocation(line: 708, column: 7, scope: !6728)
!6734 = !DILocation(line: 708, column: 12, scope: !6728)
!6735 = !DILocation(line: 708, column: 17, scope: !6728)
!6736 = !DILocation(line: 709, column: 14, scope: !6728)
!6737 = !DILocation(line: 709, column: 7, scope: !6728)
!6738 = !DILocation(line: 711, column: 7, scope: !6739)
!6739 = distinct !DILexicalBlock(scope: !6716, file: !6095, line: 711, column: 7)
!6740 = !DILocation(line: 711, column: 12, scope: !6739)
!6741 = !DILocation(line: 711, column: 7, scope: !6716)
!6742 = !DILocation(line: 713, column: 13, scope: !6743)
!6743 = distinct !DILexicalBlock(scope: !6739, file: !6095, line: 712, column: 5)
!6744 = !DILocation(line: 713, column: 11, scope: !6743)
!6745 = !DILocation(line: 714, column: 19, scope: !6743)
!6746 = !DILocation(line: 714, column: 24, scope: !6743)
!6747 = !DILocation(line: 714, column: 30, scope: !6743)
!6748 = !DILocation(line: 714, column: 7, scope: !6743)
!6749 = !DILocation(line: 714, column: 12, scope: !6743)
!6750 = !DILocation(line: 714, column: 17, scope: !6743)
!6751 = !DILocation(line: 715, column: 14, scope: !6743)
!6752 = !DILocation(line: 715, column: 7, scope: !6743)
!6753 = !DILocation(line: 718, column: 3, scope: !6716)
!6754 = !DILocation(line: 718, column: 8, scope: !6716)
!6755 = !DILocation(line: 718, column: 13, scope: !6716)
!6756 = !DILocation(line: 719, column: 3, scope: !6716)
!6757 = !DILocation(line: 721, column: 1, scope: !6716)
!6758 = distinct !DISubprogram(name: "gsi_next", scope: !742, file: !742, line: 4485, type: !6759, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6759 = !DISubroutineType(types: !6760)
!6760 = !{null, !6761}
!6761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3112, size: 64)
!6762 = !DILocalVariable(name: "i", arg: 1, scope: !6758, file: !742, line: 4485, type: !6761)
!6763 = !DILocation(line: 4485, column: 33, scope: !6758)
!6764 = !DILocation(line: 4487, column: 12, scope: !6758)
!6765 = !DILocation(line: 4487, column: 15, scope: !6758)
!6766 = !DILocation(line: 4487, column: 20, scope: !6758)
!6767 = !DILocation(line: 4487, column: 3, scope: !6758)
!6768 = !DILocation(line: 4487, column: 6, scope: !6758)
!6769 = !DILocation(line: 4487, column: 10, scope: !6758)
!6770 = !DILocation(line: 4488, column: 1, scope: !6758)
!6771 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !6095, file: !6095, line: 910, type: !6772, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6772 = !DISubroutineType(types: !6773)
!6773 = !{!3142, !6355, !2076, !1740}
!6774 = !DILocalVariable(name: "ptr", arg: 1, scope: !6771, file: !6095, line: 910, type: !6355)
!6775 = !DILocation(line: 910, column: 35, scope: !6771)
!6776 = !DILocalVariable(name: "phi", arg: 2, scope: !6771, file: !6095, line: 910, type: !2076)
!6777 = !DILocation(line: 910, column: 47, scope: !6771)
!6778 = !DILocalVariable(name: "flags", arg: 3, scope: !6771, file: !6095, line: 910, type: !1740)
!6779 = !DILocation(line: 910, column: 56, scope: !6771)
!6780 = !DILocalVariable(name: "phi_def", scope: !6771, file: !6095, line: 912, type: !1747)
!6781 = !DILocation(line: 912, column: 8, scope: !6771)
!6782 = !DILocation(line: 912, column: 37, scope: !6771)
!6783 = !DILocation(line: 912, column: 18, scope: !6771)
!6784 = !DILocalVariable(name: "comp", scope: !6771, file: !6095, line: 913, type: !1740)
!6785 = !DILocation(line: 913, column: 7, scope: !6771)
!6786 = !DILocation(line: 915, column: 28, scope: !6771)
!6787 = !DILocation(line: 915, column: 3, scope: !6771)
!6788 = !DILocation(line: 916, column: 3, scope: !6771)
!6789 = !DILocation(line: 916, column: 8, scope: !6771)
!6790 = !DILocation(line: 916, column: 13, scope: !6771)
!6791 = !DILocation(line: 918, column: 3, scope: !6771)
!6792 = !DILocation(line: 920, column: 26, scope: !6771)
!6793 = !DILocation(line: 920, column: 11, scope: !6771)
!6794 = !DILocation(line: 920, column: 8, scope: !6771)
!6795 = !DILocation(line: 923, column: 8, scope: !6796)
!6796 = distinct !DILexicalBlock(scope: !6771, file: !6095, line: 923, column: 7)
!6797 = !DILocation(line: 923, column: 16, scope: !6796)
!6798 = !DILocation(line: 923, column: 14, scope: !6796)
!6799 = !DILocation(line: 923, column: 22, scope: !6796)
!6800 = !DILocation(line: 923, column: 7, scope: !6771)
!6801 = !DILocation(line: 925, column: 7, scope: !6802)
!6802 = distinct !DILexicalBlock(scope: !6796, file: !6095, line: 924, column: 5)
!6803 = !DILocation(line: 925, column: 12, scope: !6802)
!6804 = !DILocation(line: 925, column: 17, scope: !6802)
!6805 = !DILocation(line: 926, column: 7, scope: !6802)
!6806 = !DILocation(line: 929, column: 19, scope: !6771)
!6807 = !DILocation(line: 929, column: 3, scope: !6771)
!6808 = !DILocation(line: 929, column: 8, scope: !6771)
!6809 = !DILocation(line: 929, column: 17, scope: !6771)
!6810 = !DILocation(line: 930, column: 39, scope: !6771)
!6811 = !DILocation(line: 930, column: 18, scope: !6771)
!6812 = !DILocation(line: 930, column: 3, scope: !6771)
!6813 = !DILocation(line: 930, column: 8, scope: !6771)
!6814 = !DILocation(line: 930, column: 16, scope: !6771)
!6815 = !DILocation(line: 931, column: 3, scope: !6771)
!6816 = !DILocation(line: 931, column: 8, scope: !6771)
!6817 = !DILocation(line: 931, column: 18, scope: !6771)
!6818 = !DILocation(line: 932, column: 28, scope: !6771)
!6819 = !DILocation(line: 932, column: 10, scope: !6771)
!6820 = !DILocation(line: 932, column: 3, scope: !6771)
!6821 = !DILocation(line: 933, column: 1, scope: !6771)
!6822 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !6095, file: !6095, line: 427, type: !6823, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6823 = !DISubroutineType(types: !6824)
!6824 = !{!1747, !3142}
!6825 = !DILocalVariable(name: "use", arg: 1, scope: !6822, file: !6095, line: 427, type: !3142)
!6826 = !DILocation(line: 427, column: 33, scope: !6822)
!6827 = !DILocation(line: 429, column: 12, scope: !6822)
!6828 = !DILocation(line: 429, column: 17, scope: !6822)
!6829 = !DILocation(line: 429, column: 10, scope: !6822)
!6830 = !DILocation(line: 429, column: 3, scope: !6822)
!6831 = distinct !DISubprogram(name: "op_iter_next_use", scope: !6095, file: !6095, line: 659, type: !6832, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6832 = !DISubroutineType(types: !6833)
!6833 = !{!3142, !6355}
!6834 = !DILocalVariable(name: "ptr", arg: 1, scope: !6831, file: !6095, line: 659, type: !6355)
!6835 = !DILocation(line: 659, column: 32, scope: !6831)
!6836 = !DILocalVariable(name: "use_p", scope: !6831, file: !6095, line: 661, type: !3142)
!6837 = !DILocation(line: 661, column: 17, scope: !6831)
!6838 = !DILocation(line: 665, column: 7, scope: !6839)
!6839 = distinct !DILexicalBlock(scope: !6831, file: !6095, line: 665, column: 7)
!6840 = !DILocation(line: 665, column: 12, scope: !6839)
!6841 = !DILocation(line: 665, column: 7, scope: !6831)
!6842 = !DILocation(line: 667, column: 15, scope: !6843)
!6843 = distinct !DILexicalBlock(scope: !6839, file: !6095, line: 666, column: 5)
!6844 = !DILocation(line: 667, column: 13, scope: !6843)
!6845 = !DILocation(line: 668, column: 19, scope: !6843)
!6846 = !DILocation(line: 668, column: 24, scope: !6843)
!6847 = !DILocation(line: 668, column: 30, scope: !6843)
!6848 = !DILocation(line: 668, column: 7, scope: !6843)
!6849 = !DILocation(line: 668, column: 12, scope: !6843)
!6850 = !DILocation(line: 668, column: 17, scope: !6843)
!6851 = !DILocation(line: 669, column: 14, scope: !6843)
!6852 = !DILocation(line: 669, column: 7, scope: !6843)
!6853 = !DILocation(line: 671, column: 7, scope: !6854)
!6854 = distinct !DILexicalBlock(scope: !6831, file: !6095, line: 671, column: 7)
!6855 = !DILocation(line: 671, column: 12, scope: !6854)
!6856 = !DILocation(line: 671, column: 20, scope: !6854)
!6857 = !DILocation(line: 671, column: 25, scope: !6854)
!6858 = !DILocation(line: 671, column: 18, scope: !6854)
!6859 = !DILocation(line: 671, column: 7, scope: !6831)
!6860 = !DILocation(line: 673, column: 14, scope: !6861)
!6861 = distinct !DILexicalBlock(scope: !6854, file: !6095, line: 672, column: 5)
!6862 = !DILocation(line: 673, column: 7, scope: !6861)
!6863 = !DILocation(line: 675, column: 3, scope: !6831)
!6864 = !DILocation(line: 675, column: 8, scope: !6831)
!6865 = !DILocation(line: 675, column: 13, scope: !6831)
!6866 = !DILocation(line: 676, column: 3, scope: !6831)
!6867 = !DILocation(line: 677, column: 1, scope: !6831)
!6868 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !742, file: !742, line: 2241, type: !5522, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6869 = !DILocalVariable(name: "gs", arg: 1, scope: !6868, file: !742, line: 2241, type: !5524)
!6870 = !DILocation(line: 2241, column: 31, scope: !6868)
!6871 = !DILocation(line: 2244, column: 21, scope: !6868)
!6872 = !DILocation(line: 2244, column: 10, scope: !6868)
!6873 = !DILocation(line: 2244, column: 3, scope: !6868)
!6874 = distinct !DISubprogram(name: "gimple_op", scope: !742, file: !742, line: 1631, type: !6875, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6875 = !DISubroutineType(types: !6876)
!6876 = !{!1747, !5524, !7}
!6877 = !DILocalVariable(name: "gs", arg: 1, scope: !6874, file: !742, line: 1631, type: !5524)
!6878 = !DILocation(line: 1631, column: 25, scope: !6874)
!6879 = !DILocalVariable(name: "i", arg: 2, scope: !6874, file: !742, line: 1631, type: !7)
!6880 = !DILocation(line: 1631, column: 38, scope: !6874)
!6881 = !DILocation(line: 1633, column: 23, scope: !6882)
!6882 = distinct !DILexicalBlock(scope: !6874, file: !742, line: 1633, column: 7)
!6883 = !DILocation(line: 1633, column: 7, scope: !6882)
!6884 = !DILocation(line: 1633, column: 7, scope: !6874)
!6885 = !DILocation(line: 1638, column: 26, scope: !6886)
!6886 = distinct !DILexicalBlock(scope: !6882, file: !742, line: 1634, column: 5)
!6887 = !DILocation(line: 1638, column: 14, scope: !6886)
!6888 = !DILocation(line: 1638, column: 50, scope: !6886)
!6889 = !DILocation(line: 1638, column: 7, scope: !6886)
!6890 = !DILocation(line: 1641, column: 5, scope: !6882)
!6891 = !DILocation(line: 1642, column: 1, scope: !6874)
!6892 = distinct !DISubprogram(name: "gimple_has_ops", scope: !742, file: !742, line: 1274, type: !6344, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6893 = !DILocalVariable(name: "g", arg: 1, scope: !6892, file: !742, line: 1274, type: !5524)
!6894 = !DILocation(line: 1274, column: 30, scope: !6892)
!6895 = !DILocation(line: 1276, column: 23, scope: !6892)
!6896 = !DILocation(line: 1276, column: 10, scope: !6892)
!6897 = !DILocation(line: 1276, column: 26, scope: !6892)
!6898 = !DILocation(line: 1276, column: 41, scope: !6892)
!6899 = !DILocation(line: 1276, column: 57, scope: !6892)
!6900 = !DILocation(line: 1276, column: 44, scope: !6892)
!6901 = !DILocation(line: 1276, column: 60, scope: !6892)
!6902 = !DILocation(line: 0, scope: !6892)
!6903 = !DILocation(line: 1276, column: 3, scope: !6892)
!6904 = distinct !DISubprogram(name: "gimple_ops", scope: !742, file: !742, line: 1614, type: !6905, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6905 = !DISubroutineType(types: !6906)
!6906 = !{!2110, !2076}
!6907 = !DILocalVariable(name: "gs", arg: 1, scope: !6904, file: !742, line: 1614, type: !2076)
!6908 = !DILocation(line: 1614, column: 20, scope: !6904)
!6909 = !DILocalVariable(name: "off", scope: !6904, file: !742, line: 1616, type: !2221)
!6910 = !DILocation(line: 1616, column: 10, scope: !6904)
!6911 = !DILocation(line: 1621, column: 56, scope: !6904)
!6912 = !DILocation(line: 1621, column: 28, scope: !6904)
!6913 = !DILocation(line: 1621, column: 9, scope: !6904)
!6914 = !DILocation(line: 1621, column: 7, scope: !6904)
!6915 = !DILocation(line: 1622, column: 3, scope: !6904)
!6916 = !DILocation(line: 1624, column: 29, scope: !6904)
!6917 = !DILocation(line: 1624, column: 20, scope: !6904)
!6918 = !DILocation(line: 1624, column: 34, scope: !6904)
!6919 = !DILocation(line: 1624, column: 32, scope: !6904)
!6920 = !DILocation(line: 1624, column: 10, scope: !6904)
!6921 = !DILocation(line: 1624, column: 3, scope: !6904)
!6922 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !742, file: !742, line: 1073, type: !6923, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6923 = !DISubroutineType(types: !6924)
!6924 = !{!787, !2076}
!6925 = !DILocalVariable(name: "gs", arg: 1, scope: !6922, file: !742, line: 1073, type: !2076)
!6926 = !DILocation(line: 1073, column: 36, scope: !6922)
!6927 = !DILocation(line: 1075, column: 37, scope: !6922)
!6928 = !DILocation(line: 1075, column: 24, scope: !6922)
!6929 = !DILocation(line: 1075, column: 10, scope: !6922)
!6930 = !DILocation(line: 1075, column: 3, scope: !6922)
!6931 = distinct !DISubprogram(name: "gss_for_code", scope: !742, file: !742, line: 1061, type: !6932, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6932 = !DISubroutineType(types: !6933)
!6933 = !{!787, !741}
!6934 = !DILocalVariable(name: "code", arg: 1, scope: !6931, file: !742, line: 1061, type: !741)
!6935 = !DILocation(line: 1061, column: 32, scope: !6931)
!6936 = !DILocation(line: 1066, column: 24, scope: !6931)
!6937 = !DILocation(line: 1066, column: 10, scope: !6931)
!6938 = !DILocation(line: 1066, column: 3, scope: !6931)
!6939 = distinct !DISubprogram(name: "register_edge_assert_for", scope: !3, file: !3, line: 4341, type: !6940, scopeLine: 4344, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!6940 = !DISubroutineType(types: !6941)
!6941 = !{!1866, !1747, !2056, !3112, !134, !1747, !1747}
!6942 = !DILocalVariable(name: "name", arg: 1, scope: !6939, file: !3, line: 4341, type: !1747)
!6943 = !DILocation(line: 4341, column: 32, scope: !6939)
!6944 = !DILocalVariable(name: "e", arg: 2, scope: !6939, file: !3, line: 4341, type: !2056)
!6945 = !DILocation(line: 4341, column: 43, scope: !6939)
!6946 = !DILocalVariable(name: "si", arg: 3, scope: !6939, file: !3, line: 4341, type: !3112)
!6947 = !DILocation(line: 4341, column: 67, scope: !6939)
!6948 = !DILocalVariable(name: "cond_code", arg: 4, scope: !6939, file: !3, line: 4342, type: !134)
!6949 = !DILocation(line: 4342, column: 21, scope: !6939)
!6950 = !DILocalVariable(name: "cond_op0", arg: 5, scope: !6939, file: !3, line: 4342, type: !1747)
!6951 = !DILocation(line: 4342, column: 37, scope: !6939)
!6952 = !DILocalVariable(name: "cond_op1", arg: 6, scope: !6939, file: !3, line: 4343, type: !1747)
!6953 = !DILocation(line: 4343, column: 11, scope: !6939)
!6954 = !DILocalVariable(name: "val", scope: !6939, file: !3, line: 4345, type: !1747)
!6955 = !DILocation(line: 4345, column: 8, scope: !6939)
!6956 = !DILocalVariable(name: "comp_code", scope: !6939, file: !3, line: 4346, type: !134)
!6957 = !DILocation(line: 4346, column: 18, scope: !6939)
!6958 = !DILocalVariable(name: "retval", scope: !6939, file: !3, line: 4347, type: !1866)
!6959 = !DILocation(line: 4347, column: 8, scope: !6939)
!6960 = !DILocalVariable(name: "is_else_edge", scope: !6939, file: !3, line: 4348, type: !1866)
!6961 = !DILocation(line: 4348, column: 8, scope: !6939)
!6962 = !DILocation(line: 4348, column: 24, scope: !6939)
!6963 = !DILocation(line: 4348, column: 27, scope: !6939)
!6964 = !DILocation(line: 4348, column: 33, scope: !6939)
!6965 = !DILocation(line: 4348, column: 53, scope: !6939)
!6966 = !DILocation(line: 4348, column: 23, scope: !6939)
!6967 = !DILocation(line: 4352, column: 7, scope: !6968)
!6968 = distinct !DILexicalBlock(scope: !6939, file: !3, line: 4352, column: 7)
!6969 = !DILocation(line: 4352, column: 7, scope: !6939)
!6970 = !DILocation(line: 4353, column: 5, scope: !6968)
!6971 = !DILocation(line: 4355, column: 49, scope: !6972)
!6972 = distinct !DILexicalBlock(scope: !6939, file: !3, line: 4355, column: 7)
!6973 = !DILocation(line: 4355, column: 55, scope: !6972)
!6974 = !DILocation(line: 4356, column: 7, scope: !6972)
!6975 = !DILocation(line: 4356, column: 17, scope: !6972)
!6976 = !DILocation(line: 4357, column: 7, scope: !6972)
!6977 = !DILocation(line: 4355, column: 8, scope: !6972)
!6978 = !DILocation(line: 4355, column: 7, scope: !6939)
!6979 = !DILocation(line: 4359, column: 5, scope: !6972)
!6980 = !DILocation(line: 4362, column: 41, scope: !6939)
!6981 = !DILocation(line: 4362, column: 47, scope: !6939)
!6982 = !DILocation(line: 4362, column: 54, scope: !6939)
!6983 = !DILocation(line: 4362, column: 65, scope: !6939)
!6984 = !DILocation(line: 4363, column: 6, scope: !6939)
!6985 = !DILocation(line: 4363, column: 16, scope: !6939)
!6986 = !DILocation(line: 4362, column: 13, scope: !6939)
!6987 = !DILocation(line: 4362, column: 10, scope: !6939)
!6988 = !DILocation(line: 4373, column: 9, scope: !6989)
!6989 = distinct !DILexicalBlock(scope: !6939, file: !3, line: 4373, column: 7)
!6990 = !DILocation(line: 4373, column: 19, scope: !6989)
!6991 = !DILocation(line: 4373, column: 30, scope: !6989)
!6992 = !DILocation(line: 4373, column: 47, scope: !6989)
!6993 = !DILocation(line: 4373, column: 33, scope: !6989)
!6994 = !DILocation(line: 4374, column: 8, scope: !6989)
!6995 = !DILocation(line: 4374, column: 12, scope: !6989)
!6996 = !DILocation(line: 4374, column: 22, scope: !6989)
!6997 = !DILocation(line: 4374, column: 33, scope: !6989)
!6998 = !DILocation(line: 4374, column: 51, scope: !6989)
!6999 = !DILocation(line: 4374, column: 36, scope: !6989)
!7000 = !DILocation(line: 4373, column: 7, scope: !6939)
!7001 = !DILocalVariable(name: "def_stmt", scope: !7002, file: !3, line: 4376, type: !2076)
!7002 = distinct !DILexicalBlock(scope: !6989, file: !3, line: 4375, column: 5)
!7003 = !DILocation(line: 4376, column: 14, scope: !7002)
!7004 = !DILocation(line: 4376, column: 25, scope: !7002)
!7005 = !DILocation(line: 4378, column: 29, scope: !7006)
!7006 = distinct !DILexicalBlock(scope: !7002, file: !3, line: 4378, column: 11)
!7007 = !DILocation(line: 4378, column: 11, scope: !7006)
!7008 = !DILocation(line: 4379, column: 4, scope: !7006)
!7009 = !DILocation(line: 4379, column: 32, scope: !7006)
!7010 = !DILocation(line: 4379, column: 8, scope: !7006)
!7011 = !DILocation(line: 4379, column: 42, scope: !7006)
!7012 = !DILocation(line: 4380, column: 8, scope: !7006)
!7013 = !DILocation(line: 4380, column: 35, scope: !7006)
!7014 = !DILocation(line: 4380, column: 11, scope: !7006)
!7015 = !DILocation(line: 4380, column: 45, scope: !7006)
!7016 = !DILocation(line: 4378, column: 11, scope: !7002)
!7017 = !DILocalVariable(name: "op0", scope: !7018, file: !3, line: 4382, type: !1747)
!7018 = distinct !DILexicalBlock(scope: !7006, file: !3, line: 4381, column: 2)
!7019 = !DILocation(line: 4382, column: 9, scope: !7018)
!7020 = !DILocation(line: 4382, column: 35, scope: !7018)
!7021 = !DILocation(line: 4382, column: 15, scope: !7018)
!7022 = !DILocalVariable(name: "op1", scope: !7018, file: !3, line: 4383, type: !1747)
!7023 = !DILocation(line: 4383, column: 9, scope: !7018)
!7024 = !DILocation(line: 4383, column: 35, scope: !7018)
!7025 = !DILocation(line: 4383, column: 15, scope: !7018)
!7026 = !DILocation(line: 4384, column: 42, scope: !7018)
!7027 = !DILocation(line: 4384, column: 56, scope: !7018)
!7028 = !DILocation(line: 4384, column: 14, scope: !7018)
!7029 = !DILocation(line: 4384, column: 11, scope: !7018)
!7030 = !DILocation(line: 4385, column: 42, scope: !7018)
!7031 = !DILocation(line: 4385, column: 56, scope: !7018)
!7032 = !DILocation(line: 4385, column: 14, scope: !7018)
!7033 = !DILocation(line: 4385, column: 11, scope: !7018)
!7034 = !DILocation(line: 4386, column: 2, scope: !7018)
!7035 = !DILocation(line: 4387, column: 5, scope: !7002)
!7036 = !DILocation(line: 4392, column: 9, scope: !7037)
!7037 = distinct !DILexicalBlock(scope: !6939, file: !3, line: 4392, column: 7)
!7038 = !DILocation(line: 4392, column: 19, scope: !7037)
!7039 = !DILocation(line: 4392, column: 30, scope: !7037)
!7040 = !DILocation(line: 4392, column: 48, scope: !7037)
!7041 = !DILocation(line: 4392, column: 33, scope: !7037)
!7042 = !DILocation(line: 4393, column: 8, scope: !7037)
!7043 = !DILocation(line: 4393, column: 12, scope: !7037)
!7044 = !DILocation(line: 4393, column: 22, scope: !7037)
!7045 = !DILocation(line: 4393, column: 33, scope: !7037)
!7046 = !DILocation(line: 4393, column: 50, scope: !7037)
!7047 = !DILocation(line: 4393, column: 36, scope: !7037)
!7048 = !DILocation(line: 4392, column: 7, scope: !6939)
!7049 = !DILocalVariable(name: "def_stmt", scope: !7050, file: !3, line: 4395, type: !2076)
!7050 = distinct !DILexicalBlock(scope: !7037, file: !3, line: 4394, column: 5)
!7051 = !DILocation(line: 4395, column: 14, scope: !7050)
!7052 = !DILocation(line: 4395, column: 25, scope: !7050)
!7053 = !DILocation(line: 4397, column: 29, scope: !7054)
!7054 = distinct !DILexicalBlock(scope: !7050, file: !3, line: 4397, column: 11)
!7055 = !DILocation(line: 4397, column: 11, scope: !7054)
!7056 = !DILocation(line: 4398, column: 4, scope: !7054)
!7057 = !DILocation(line: 4398, column: 32, scope: !7054)
!7058 = !DILocation(line: 4398, column: 8, scope: !7054)
!7059 = !DILocation(line: 4398, column: 42, scope: !7054)
!7060 = !DILocation(line: 4401, column: 8, scope: !7054)
!7061 = !DILocation(line: 4401, column: 12, scope: !7054)
!7062 = !DILocation(line: 4401, column: 22, scope: !7054)
!7063 = !DILocation(line: 4402, column: 5, scope: !7054)
!7064 = !DILocation(line: 4402, column: 33, scope: !7054)
!7065 = !DILocation(line: 4402, column: 9, scope: !7054)
!7066 = !DILocation(line: 4402, column: 43, scope: !7054)
!7067 = !DILocation(line: 4397, column: 11, scope: !7050)
!7068 = !DILocalVariable(name: "op0", scope: !7069, file: !3, line: 4404, type: !1747)
!7069 = distinct !DILexicalBlock(scope: !7054, file: !3, line: 4403, column: 2)
!7070 = !DILocation(line: 4404, column: 9, scope: !7069)
!7071 = !DILocation(line: 4404, column: 35, scope: !7069)
!7072 = !DILocation(line: 4404, column: 15, scope: !7069)
!7073 = !DILocalVariable(name: "op1", scope: !7069, file: !3, line: 4405, type: !1747)
!7074 = !DILocation(line: 4405, column: 9, scope: !7069)
!7075 = !DILocation(line: 4405, column: 35, scope: !7069)
!7076 = !DILocation(line: 4405, column: 15, scope: !7069)
!7077 = !DILocation(line: 4406, column: 42, scope: !7069)
!7078 = !DILocation(line: 4406, column: 56, scope: !7069)
!7079 = !DILocation(line: 4406, column: 14, scope: !7069)
!7080 = !DILocation(line: 4406, column: 11, scope: !7069)
!7081 = !DILocation(line: 4407, column: 42, scope: !7069)
!7082 = !DILocation(line: 4407, column: 56, scope: !7069)
!7083 = !DILocation(line: 4407, column: 14, scope: !7069)
!7084 = !DILocation(line: 4407, column: 11, scope: !7069)
!7085 = !DILocation(line: 4408, column: 2, scope: !7069)
!7086 = !DILocation(line: 4409, column: 5, scope: !7050)
!7087 = !DILocation(line: 4411, column: 10, scope: !6939)
!7088 = !DILocation(line: 4411, column: 3, scope: !6939)
!7089 = !DILocation(line: 4412, column: 1, scope: !6939)
!7090 = distinct !DISubprogram(name: "gimple_cond_code", scope: !742, file: !742, line: 2221, type: !6493, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7091 = !DILocalVariable(name: "gs", arg: 1, scope: !7090, file: !742, line: 2221, type: !5524)
!7092 = !DILocation(line: 2221, column: 32, scope: !7090)
!7093 = !DILocation(line: 2224, column: 27, scope: !7090)
!7094 = !DILocation(line: 2224, column: 31, scope: !7090)
!7095 = !DILocation(line: 2224, column: 38, scope: !7090)
!7096 = !DILocation(line: 2224, column: 3, scope: !7090)
!7097 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !742, file: !742, line: 2271, type: !5522, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7098 = !DILocalVariable(name: "gs", arg: 1, scope: !7097, file: !742, line: 2271, type: !5524)
!7099 = !DILocation(line: 2271, column: 31, scope: !7097)
!7100 = !DILocation(line: 2274, column: 21, scope: !7097)
!7101 = !DILocation(line: 2274, column: 10, scope: !7097)
!7102 = !DILocation(line: 2274, column: 3, scope: !7097)
!7103 = distinct !DISubprogram(name: "extract_code_and_val_from_cond_with_ops", scope: !3, file: !3, line: 4059, type: !7104, scopeLine: 4063, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7104 = !DISubroutineType(types: !7105)
!7105 = !{!1866, !1747, !134, !1747, !1747, !1866, !6419, !2110}
!7106 = !DILocalVariable(name: "name", arg: 1, scope: !7103, file: !3, line: 4059, type: !1747)
!7107 = !DILocation(line: 4059, column: 47, scope: !7103)
!7108 = !DILocalVariable(name: "cond_code", arg: 2, scope: !7103, file: !3, line: 4059, type: !134)
!7109 = !DILocation(line: 4059, column: 68, scope: !7103)
!7110 = !DILocalVariable(name: "cond_op0", arg: 3, scope: !7103, file: !3, line: 4060, type: !1747)
!7111 = !DILocation(line: 4060, column: 12, scope: !7103)
!7112 = !DILocalVariable(name: "cond_op1", arg: 4, scope: !7103, file: !3, line: 4060, type: !1747)
!7113 = !DILocation(line: 4060, column: 27, scope: !7103)
!7114 = !DILocalVariable(name: "invert", arg: 5, scope: !7103, file: !3, line: 4061, type: !1866)
!7115 = !DILocation(line: 4061, column: 12, scope: !7103)
!7116 = !DILocalVariable(name: "code_p", arg: 6, scope: !7103, file: !3, line: 4061, type: !6419)
!7117 = !DILocation(line: 4061, column: 36, scope: !7103)
!7118 = !DILocalVariable(name: "val_p", arg: 7, scope: !7103, file: !3, line: 4062, type: !2110)
!7119 = !DILocation(line: 4062, column: 13, scope: !7103)
!7120 = !DILocalVariable(name: "comp_code", scope: !7103, file: !3, line: 4064, type: !134)
!7121 = !DILocation(line: 4064, column: 18, scope: !7103)
!7122 = !DILocalVariable(name: "val", scope: !7103, file: !3, line: 4065, type: !1747)
!7123 = !DILocation(line: 4065, column: 8, scope: !7103)
!7124 = !DILocation(line: 4069, column: 7, scope: !7125)
!7125 = distinct !DILexicalBlock(scope: !7103, file: !3, line: 4069, column: 7)
!7126 = !DILocation(line: 4069, column: 15, scope: !7125)
!7127 = !DILocation(line: 4069, column: 12, scope: !7125)
!7128 = !DILocation(line: 4069, column: 7, scope: !7103)
!7129 = !DILocation(line: 4074, column: 41, scope: !7130)
!7130 = distinct !DILexicalBlock(scope: !7125, file: !3, line: 4070, column: 5)
!7131 = !DILocation(line: 4074, column: 19, scope: !7130)
!7132 = !DILocation(line: 4074, column: 17, scope: !7130)
!7133 = !DILocation(line: 4075, column: 13, scope: !7130)
!7134 = !DILocation(line: 4075, column: 11, scope: !7130)
!7135 = !DILocation(line: 4076, column: 5, scope: !7130)
!7136 = !DILocation(line: 4081, column: 19, scope: !7137)
!7137 = distinct !DILexicalBlock(scope: !7125, file: !3, line: 4078, column: 5)
!7138 = !DILocation(line: 4081, column: 17, scope: !7137)
!7139 = !DILocation(line: 4082, column: 13, scope: !7137)
!7140 = !DILocation(line: 4082, column: 11, scope: !7137)
!7141 = !DILocation(line: 4086, column: 7, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !7103, file: !3, line: 4086, column: 7)
!7143 = !DILocation(line: 4086, column: 7, scope: !7103)
!7144 = !DILocation(line: 4087, column: 41, scope: !7142)
!7145 = !DILocation(line: 4087, column: 17, scope: !7142)
!7146 = !DILocation(line: 4087, column: 15, scope: !7142)
!7147 = !DILocation(line: 4087, column: 5, scope: !7142)
!7148 = !DILocation(line: 4090, column: 7, scope: !7149)
!7149 = distinct !DILexicalBlock(scope: !7103, file: !3, line: 4090, column: 7)
!7150 = !DILocation(line: 4090, column: 7, scope: !7103)
!7151 = !DILocation(line: 4091, column: 5, scope: !7149)
!7152 = !DILocation(line: 4097, column: 8, scope: !7153)
!7153 = distinct !DILexicalBlock(scope: !7103, file: !3, line: 4097, column: 7)
!7154 = !DILocation(line: 4097, column: 18, scope: !7153)
!7155 = !DILocation(line: 4097, column: 29, scope: !7153)
!7156 = !DILocation(line: 4097, column: 32, scope: !7153)
!7157 = !DILocation(line: 4097, column: 42, scope: !7153)
!7158 = !DILocation(line: 4098, column: 7, scope: !7153)
!7159 = !DILocation(line: 4098, column: 10, scope: !7153)
!7160 = !DILocation(line: 4097, column: 7, scope: !7103)
!7161 = !DILocalVariable(name: "min", scope: !7162, file: !3, line: 4100, type: !1747)
!7162 = distinct !DILexicalBlock(scope: !7153, file: !3, line: 4099, column: 5)
!7163 = !DILocation(line: 4100, column: 12, scope: !7162)
!7164 = !DILocation(line: 4100, column: 18, scope: !7162)
!7165 = !DILocalVariable(name: "max", scope: !7162, file: !3, line: 4101, type: !1747)
!7166 = !DILocation(line: 4101, column: 12, scope: !7162)
!7167 = !DILocation(line: 4101, column: 18, scope: !7162)
!7168 = !DILocation(line: 4103, column: 11, scope: !7169)
!7169 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 4103, column: 11)
!7170 = !DILocation(line: 4103, column: 21, scope: !7169)
!7171 = !DILocation(line: 4104, column: 4, scope: !7169)
!7172 = !DILocation(line: 4104, column: 9, scope: !7169)
!7173 = !DILocation(line: 4105, column: 8, scope: !7169)
!7174 = !DILocation(line: 4105, column: 27, scope: !7169)
!7175 = !DILocation(line: 4105, column: 32, scope: !7169)
!7176 = !DILocation(line: 4105, column: 11, scope: !7169)
!7177 = !DILocation(line: 4105, column: 37, scope: !7169)
!7178 = !DILocation(line: 4103, column: 11, scope: !7162)
!7179 = !DILocation(line: 4106, column: 2, scope: !7169)
!7180 = !DILocation(line: 4108, column: 11, scope: !7181)
!7181 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 4108, column: 11)
!7182 = !DILocation(line: 4108, column: 21, scope: !7181)
!7183 = !DILocation(line: 4109, column: 4, scope: !7181)
!7184 = !DILocation(line: 4109, column: 9, scope: !7181)
!7185 = !DILocation(line: 4110, column: 8, scope: !7181)
!7186 = !DILocation(line: 4110, column: 27, scope: !7181)
!7187 = !DILocation(line: 4110, column: 32, scope: !7181)
!7188 = !DILocation(line: 4110, column: 11, scope: !7181)
!7189 = !DILocation(line: 4110, column: 37, scope: !7181)
!7190 = !DILocation(line: 4108, column: 11, scope: !7162)
!7191 = !DILocation(line: 4111, column: 2, scope: !7181)
!7192 = !DILocation(line: 4112, column: 5, scope: !7162)
!7193 = !DILocation(line: 4113, column: 13, scope: !7103)
!7194 = !DILocation(line: 4113, column: 4, scope: !7103)
!7195 = !DILocation(line: 4113, column: 11, scope: !7103)
!7196 = !DILocation(line: 4114, column: 12, scope: !7103)
!7197 = !DILocation(line: 4114, column: 4, scope: !7103)
!7198 = !DILocation(line: 4114, column: 10, scope: !7103)
!7199 = !DILocation(line: 4115, column: 3, scope: !7103)
!7200 = !DILocation(line: 4116, column: 1, scope: !7103)
!7201 = distinct !DISubprogram(name: "register_edge_assert_for_2", scope: !3, file: !3, line: 4124, type: !7202, scopeLine: 4127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7202 = !DISubroutineType(types: !7203)
!7203 = !{!1866, !1747, !2056, !3112, !134, !1747, !1747, !1866}
!7204 = !DILocalVariable(name: "name", arg: 1, scope: !7201, file: !3, line: 4124, type: !1747)
!7205 = !DILocation(line: 4124, column: 34, scope: !7201)
!7206 = !DILocalVariable(name: "e", arg: 2, scope: !7201, file: !3, line: 4124, type: !2056)
!7207 = !DILocation(line: 4124, column: 45, scope: !7201)
!7208 = !DILocalVariable(name: "bsi", arg: 3, scope: !7201, file: !3, line: 4124, type: !3112)
!7209 = !DILocation(line: 4124, column: 69, scope: !7201)
!7210 = !DILocalVariable(name: "cond_code", arg: 4, scope: !7201, file: !3, line: 4125, type: !134)
!7211 = !DILocation(line: 4125, column: 23, scope: !7201)
!7212 = !DILocalVariable(name: "cond_op0", arg: 5, scope: !7201, file: !3, line: 4126, type: !1747)
!7213 = !DILocation(line: 4126, column: 13, scope: !7201)
!7214 = !DILocalVariable(name: "cond_op1", arg: 6, scope: !7201, file: !3, line: 4126, type: !1747)
!7215 = !DILocation(line: 4126, column: 28, scope: !7201)
!7216 = !DILocalVariable(name: "invert", arg: 7, scope: !7201, file: !3, line: 4126, type: !1866)
!7217 = !DILocation(line: 4126, column: 43, scope: !7201)
!7218 = !DILocalVariable(name: "val", scope: !7201, file: !3, line: 4128, type: !1747)
!7219 = !DILocation(line: 4128, column: 8, scope: !7201)
!7220 = !DILocalVariable(name: "comp_code", scope: !7201, file: !3, line: 4129, type: !134)
!7221 = !DILocation(line: 4129, column: 18, scope: !7201)
!7222 = !DILocalVariable(name: "retval", scope: !7201, file: !3, line: 4130, type: !1866)
!7223 = !DILocation(line: 4130, column: 8, scope: !7201)
!7224 = !DILocation(line: 4132, column: 49, scope: !7225)
!7225 = distinct !DILexicalBlock(scope: !7201, file: !3, line: 4132, column: 7)
!7226 = !DILocation(line: 4132, column: 55, scope: !7225)
!7227 = !DILocation(line: 4133, column: 7, scope: !7225)
!7228 = !DILocation(line: 4134, column: 7, scope: !7225)
!7229 = !DILocation(line: 4135, column: 7, scope: !7225)
!7230 = !DILocation(line: 4132, column: 8, scope: !7225)
!7231 = !DILocation(line: 4132, column: 7, scope: !7201)
!7232 = !DILocation(line: 4136, column: 5, scope: !7225)
!7233 = !DILocation(line: 4140, column: 21, scope: !7234)
!7234 = distinct !DILexicalBlock(scope: !7201, file: !3, line: 4140, column: 7)
!7235 = !DILocation(line: 4140, column: 24, scope: !7234)
!7236 = !DILocation(line: 4140, column: 7, scope: !7234)
!7237 = !DILocation(line: 4141, column: 7, scope: !7234)
!7238 = !DILocation(line: 4141, column: 27, scope: !7234)
!7239 = !DILocation(line: 4141, column: 11, scope: !7234)
!7240 = !DILocation(line: 4140, column: 7, scope: !7201)
!7241 = !DILocation(line: 4143, column: 32, scope: !7242)
!7242 = distinct !DILexicalBlock(scope: !7234, file: !3, line: 4142, column: 5)
!7243 = !DILocation(line: 4143, column: 38, scope: !7242)
!7244 = !DILocation(line: 4143, column: 44, scope: !7242)
!7245 = !DILocation(line: 4143, column: 55, scope: !7242)
!7246 = !DILocation(line: 4143, column: 66, scope: !7242)
!7247 = !DILocation(line: 4143, column: 7, scope: !7242)
!7248 = !DILocation(line: 4144, column: 14, scope: !7242)
!7249 = !DILocation(line: 4145, column: 5, scope: !7242)
!7250 = !DILocation(line: 4151, column: 8, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7201, file: !3, line: 4151, column: 7)
!7252 = !DILocation(line: 4151, column: 18, scope: !7251)
!7253 = !DILocation(line: 4152, column: 8, scope: !7251)
!7254 = !DILocation(line: 4152, column: 11, scope: !7251)
!7255 = !DILocation(line: 4152, column: 21, scope: !7251)
!7256 = !DILocation(line: 4153, column: 7, scope: !7251)
!7257 = !DILocation(line: 4153, column: 10, scope: !7251)
!7258 = !DILocation(line: 4153, column: 26, scope: !7251)
!7259 = !DILocation(line: 4154, column: 7, scope: !7251)
!7260 = !DILocation(line: 4154, column: 10, scope: !7251)
!7261 = !DILocation(line: 4151, column: 7, scope: !7201)
!7262 = !DILocalVariable(name: "def_stmt", scope: !7263, file: !3, line: 4156, type: !2076)
!7263 = distinct !DILexicalBlock(scope: !7251, file: !3, line: 4155, column: 5)
!7264 = !DILocation(line: 4156, column: 14, scope: !7263)
!7265 = !DILocation(line: 4156, column: 25, scope: !7263)
!7266 = !DILocalVariable(name: "cst2", scope: !7263, file: !3, line: 4157, type: !1747)
!7267 = !DILocation(line: 4157, column: 12, scope: !7263)
!7268 = !DILocalVariable(name: "name2", scope: !7263, file: !3, line: 4157, type: !1747)
!7269 = !DILocation(line: 4157, column: 30, scope: !7263)
!7270 = !DILocalVariable(name: "name3", scope: !7263, file: !3, line: 4157, type: !1747)
!7271 = !DILocation(line: 4157, column: 49, scope: !7263)
!7272 = !DILocation(line: 4160, column: 29, scope: !7273)
!7273 = distinct !DILexicalBlock(scope: !7263, file: !3, line: 4160, column: 11)
!7274 = !DILocation(line: 4160, column: 11, scope: !7273)
!7275 = !DILocation(line: 4161, column: 4, scope: !7273)
!7276 = !DILocation(line: 4161, column: 31, scope: !7273)
!7277 = !DILocation(line: 4161, column: 7, scope: !7273)
!7278 = !DILocation(line: 4161, column: 41, scope: !7273)
!7279 = !DILocation(line: 4160, column: 11, scope: !7263)
!7280 = !DILocation(line: 4163, column: 32, scope: !7281)
!7281 = distinct !DILexicalBlock(scope: !7273, file: !3, line: 4162, column: 2)
!7282 = !DILocation(line: 4163, column: 12, scope: !7281)
!7283 = !DILocation(line: 4163, column: 10, scope: !7281)
!7284 = !DILocation(line: 4164, column: 31, scope: !7281)
!7285 = !DILocation(line: 4164, column: 11, scope: !7281)
!7286 = !DILocation(line: 4164, column: 9, scope: !7281)
!7287 = !DILocation(line: 4165, column: 8, scope: !7288)
!7288 = distinct !DILexicalBlock(scope: !7281, file: !3, line: 4165, column: 8)
!7289 = !DILocation(line: 4165, column: 26, scope: !7288)
!7290 = !DILocation(line: 4166, column: 8, scope: !7288)
!7291 = !DILocation(line: 4166, column: 11, scope: !7288)
!7292 = !DILocation(line: 4166, column: 28, scope: !7288)
!7293 = !DILocation(line: 4165, column: 8, scope: !7281)
!7294 = !DILocation(line: 4167, column: 17, scope: !7288)
!7295 = !DILocation(line: 4167, column: 15, scope: !7288)
!7296 = !DILocation(line: 4167, column: 6, scope: !7288)
!7297 = !DILocation(line: 4168, column: 2, scope: !7281)
!7298 = !DILocation(line: 4171, column: 33, scope: !7299)
!7299 = distinct !DILexicalBlock(scope: !7263, file: !3, line: 4171, column: 11)
!7300 = !DILocation(line: 4171, column: 11, scope: !7299)
!7301 = !DILocation(line: 4171, column: 11, scope: !7263)
!7302 = !DILocation(line: 4173, column: 8, scope: !7303)
!7303 = distinct !DILexicalBlock(scope: !7304, file: !3, line: 4173, column: 8)
!7304 = distinct !DILexicalBlock(scope: !7299, file: !3, line: 4172, column: 2)
!7305 = !DILocation(line: 4174, column: 8, scope: !7303)
!7306 = !DILocation(line: 4174, column: 13, scope: !7303)
!7307 = !DILocation(line: 4175, column: 8, scope: !7303)
!7308 = !DILocation(line: 4175, column: 12, scope: !7303)
!7309 = !DILocation(line: 4176, column: 8, scope: !7303)
!7310 = !DILocation(line: 4176, column: 5, scope: !7303)
!7311 = !DILocation(line: 4173, column: 8, scope: !7304)
!7312 = !DILocation(line: 4177, column: 34, scope: !7303)
!7313 = !DILocation(line: 4177, column: 14, scope: !7303)
!7314 = !DILocation(line: 4177, column: 12, scope: !7303)
!7315 = !DILocation(line: 4177, column: 6, scope: !7303)
!7316 = !DILocation(line: 4178, column: 2, scope: !7304)
!7317 = !DILocation(line: 4181, column: 11, scope: !7318)
!7318 = distinct !DILexicalBlock(scope: !7263, file: !3, line: 4181, column: 11)
!7319 = !DILocation(line: 4181, column: 17, scope: !7318)
!7320 = !DILocation(line: 4182, column: 10, scope: !7318)
!7321 = !DILocation(line: 4182, column: 13, scope: !7318)
!7322 = !DILocation(line: 4182, column: 31, scope: !7318)
!7323 = !DILocation(line: 4183, column: 4, scope: !7318)
!7324 = !DILocation(line: 4183, column: 8, scope: !7318)
!7325 = !DILocation(line: 4183, column: 13, scope: !7318)
!7326 = !DILocation(line: 4184, column: 8, scope: !7318)
!7327 = !DILocation(line: 4184, column: 11, scope: !7318)
!7328 = !DILocation(line: 4184, column: 28, scope: !7318)
!7329 = !DILocation(line: 4185, column: 4, scope: !7318)
!7330 = !DILocation(line: 4185, column: 7, scope: !7318)
!7331 = !DILocation(line: 4186, column: 4, scope: !7318)
!7332 = !DILocation(line: 4186, column: 21, scope: !7318)
!7333 = !DILocation(line: 4186, column: 24, scope: !7318)
!7334 = !DILocation(line: 4186, column: 7, scope: !7318)
!7335 = !DILocation(line: 4187, column: 4, scope: !7318)
!7336 = !DILocation(line: 4187, column: 24, scope: !7318)
!7337 = !DILocation(line: 4187, column: 8, scope: !7318)
!7338 = !DILocation(line: 4181, column: 11, scope: !7263)
!7339 = !DILocalVariable(name: "tmp", scope: !7340, file: !3, line: 4189, type: !1747)
!7340 = distinct !DILexicalBlock(scope: !7318, file: !3, line: 4188, column: 2)
!7341 = !DILocation(line: 4189, column: 9, scope: !7340)
!7342 = !DILocation(line: 4192, column: 10, scope: !7340)
!7343 = !DILocation(line: 4192, column: 8, scope: !7340)
!7344 = !DILocation(line: 4193, column: 8, scope: !7345)
!7345 = distinct !DILexicalBlock(scope: !7340, file: !3, line: 4193, column: 8)
!7346 = !DILocation(line: 4193, column: 13, scope: !7345)
!7347 = !DILocation(line: 4193, column: 8, scope: !7340)
!7348 = !DILocation(line: 4194, column: 12, scope: !7345)
!7349 = !DILocation(line: 4194, column: 10, scope: !7345)
!7350 = !DILocation(line: 4194, column: 6, scope: !7345)
!7351 = !DILocation(line: 4196, column: 8, scope: !7352)
!7352 = distinct !DILexicalBlock(scope: !7340, file: !3, line: 4196, column: 8)
!7353 = !DILocation(line: 4196, column: 8, scope: !7340)
!7354 = !DILocation(line: 4198, column: 17, scope: !7355)
!7355 = distinct !DILexicalBlock(scope: !7352, file: !3, line: 4197, column: 6)
!7356 = !DILocation(line: 4198, column: 8, scope: !7355)
!7357 = !DILocation(line: 4199, column: 28, scope: !7355)
!7358 = !DILocation(line: 4199, column: 39, scope: !7355)
!7359 = !DILocation(line: 4199, column: 8, scope: !7355)
!7360 = !DILocation(line: 4200, column: 17, scope: !7355)
!7361 = !DILocation(line: 4200, column: 8, scope: !7355)
!7362 = !DILocation(line: 4201, column: 28, scope: !7355)
!7363 = !DILocation(line: 4201, column: 39, scope: !7355)
!7364 = !DILocation(line: 4201, column: 8, scope: !7355)
!7365 = !DILocation(line: 4202, column: 17, scope: !7355)
!7366 = !DILocation(line: 4202, column: 8, scope: !7355)
!7367 = !DILocation(line: 4203, column: 6, scope: !7355)
!7368 = !DILocation(line: 4205, column: 29, scope: !7340)
!7369 = !DILocation(line: 4205, column: 36, scope: !7340)
!7370 = !DILocation(line: 4205, column: 41, scope: !7340)
!7371 = !DILocation(line: 4205, column: 52, scope: !7340)
!7372 = !DILocation(line: 4205, column: 63, scope: !7340)
!7373 = !DILocation(line: 4205, column: 4, scope: !7340)
!7374 = !DILocation(line: 4207, column: 11, scope: !7340)
!7375 = !DILocation(line: 4208, column: 2, scope: !7340)
!7376 = !DILocation(line: 4211, column: 11, scope: !7377)
!7377 = distinct !DILexicalBlock(scope: !7263, file: !3, line: 4211, column: 11)
!7378 = !DILocation(line: 4211, column: 17, scope: !7377)
!7379 = !DILocation(line: 4212, column: 10, scope: !7377)
!7380 = !DILocation(line: 4212, column: 13, scope: !7377)
!7381 = !DILocation(line: 4212, column: 31, scope: !7377)
!7382 = !DILocation(line: 4213, column: 4, scope: !7377)
!7383 = !DILocation(line: 4213, column: 7, scope: !7377)
!7384 = !DILocation(line: 4213, column: 24, scope: !7377)
!7385 = !DILocation(line: 4214, column: 4, scope: !7377)
!7386 = !DILocation(line: 4214, column: 7, scope: !7377)
!7387 = !DILocation(line: 4215, column: 4, scope: !7377)
!7388 = !DILocation(line: 4215, column: 21, scope: !7377)
!7389 = !DILocation(line: 4215, column: 24, scope: !7377)
!7390 = !DILocation(line: 4215, column: 7, scope: !7377)
!7391 = !DILocation(line: 4216, column: 4, scope: !7377)
!7392 = !DILocation(line: 4216, column: 24, scope: !7377)
!7393 = !DILocation(line: 4216, column: 8, scope: !7377)
!7394 = !DILocation(line: 4211, column: 11, scope: !7263)
!7395 = !DILocalVariable(name: "tmp", scope: !7396, file: !3, line: 4218, type: !1747)
!7396 = distinct !DILexicalBlock(scope: !7377, file: !3, line: 4217, column: 2)
!7397 = !DILocation(line: 4218, column: 9, scope: !7396)
!7398 = !DILocation(line: 4221, column: 10, scope: !7396)
!7399 = !DILocation(line: 4221, column: 8, scope: !7396)
!7400 = !DILocation(line: 4222, column: 8, scope: !7401)
!7401 = distinct !DILexicalBlock(scope: !7396, file: !3, line: 4222, column: 8)
!7402 = !DILocation(line: 4222, column: 28, scope: !7401)
!7403 = !DILocation(line: 4222, column: 25, scope: !7401)
!7404 = !DILocation(line: 4222, column: 8, scope: !7396)
!7405 = !DILocation(line: 4223, column: 12, scope: !7401)
!7406 = !DILocation(line: 4223, column: 10, scope: !7401)
!7407 = !DILocation(line: 4223, column: 6, scope: !7401)
!7408 = !DILocation(line: 4224, column: 8, scope: !7409)
!7409 = distinct !DILexicalBlock(scope: !7396, file: !3, line: 4224, column: 8)
!7410 = !DILocation(line: 4224, column: 13, scope: !7409)
!7411 = !DILocation(line: 4224, column: 8, scope: !7396)
!7412 = !DILocation(line: 4225, column: 12, scope: !7409)
!7413 = !DILocation(line: 4225, column: 10, scope: !7409)
!7414 = !DILocation(line: 4225, column: 6, scope: !7409)
!7415 = !DILocation(line: 4227, column: 8, scope: !7416)
!7416 = distinct !DILexicalBlock(scope: !7396, file: !3, line: 4227, column: 8)
!7417 = !DILocation(line: 4227, column: 8, scope: !7396)
!7418 = !DILocation(line: 4229, column: 17, scope: !7419)
!7419 = distinct !DILexicalBlock(scope: !7416, file: !3, line: 4228, column: 6)
!7420 = !DILocation(line: 4229, column: 8, scope: !7419)
!7421 = !DILocation(line: 4230, column: 28, scope: !7419)
!7422 = !DILocation(line: 4230, column: 39, scope: !7419)
!7423 = !DILocation(line: 4230, column: 8, scope: !7419)
!7424 = !DILocation(line: 4231, column: 17, scope: !7419)
!7425 = !DILocation(line: 4231, column: 8, scope: !7419)
!7426 = !DILocation(line: 4232, column: 28, scope: !7419)
!7427 = !DILocation(line: 4232, column: 39, scope: !7419)
!7428 = !DILocation(line: 4232, column: 8, scope: !7419)
!7429 = !DILocation(line: 4233, column: 17, scope: !7419)
!7430 = !DILocation(line: 4233, column: 8, scope: !7419)
!7431 = !DILocation(line: 4234, column: 6, scope: !7419)
!7432 = !DILocation(line: 4236, column: 29, scope: !7396)
!7433 = !DILocation(line: 4236, column: 36, scope: !7396)
!7434 = !DILocation(line: 4236, column: 41, scope: !7396)
!7435 = !DILocation(line: 4236, column: 52, scope: !7396)
!7436 = !DILocation(line: 4236, column: 63, scope: !7396)
!7437 = !DILocation(line: 4236, column: 4, scope: !7396)
!7438 = !DILocation(line: 4238, column: 11, scope: !7396)
!7439 = !DILocation(line: 4239, column: 2, scope: !7396)
!7440 = !DILocation(line: 4240, column: 5, scope: !7263)
!7441 = !DILocation(line: 4242, column: 10, scope: !7201)
!7442 = !DILocation(line: 4242, column: 3, scope: !7201)
!7443 = !DILocation(line: 4243, column: 1, scope: !7201)
!7444 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !742, file: !742, line: 1759, type: !5522, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7445 = !DILocalVariable(name: "gs", arg: 1, scope: !7444, file: !742, line: 1759, type: !5524)
!7446 = !DILocation(line: 1759, column: 34, scope: !7444)
!7447 = !DILocation(line: 1763, column: 23, scope: !7448)
!7448 = distinct !DILexicalBlock(scope: !7444, file: !742, line: 1763, column: 7)
!7449 = !DILocation(line: 1763, column: 7, scope: !7448)
!7450 = !DILocation(line: 1763, column: 27, scope: !7448)
!7451 = !DILocation(line: 1763, column: 7, scope: !7444)
!7452 = !DILocation(line: 1764, column: 23, scope: !7448)
!7453 = !DILocation(line: 1764, column: 12, scope: !7448)
!7454 = !DILocation(line: 1764, column: 5, scope: !7448)
!7455 = !DILocation(line: 1766, column: 5, scope: !7448)
!7456 = !DILocation(line: 1767, column: 1, scope: !7444)
!7457 = distinct !DISubprogram(name: "register_edge_assert_for_1", scope: !3, file: !3, line: 4253, type: !7458, scopeLine: 4255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7458 = !DISubroutineType(types: !7459)
!7459 = !{!1866, !1747, !134, !2056, !3112}
!7460 = !DILocalVariable(name: "op", arg: 1, scope: !7457, file: !3, line: 4253, type: !1747)
!7461 = !DILocation(line: 4253, column: 34, scope: !7457)
!7462 = !DILocalVariable(name: "code", arg: 2, scope: !7457, file: !3, line: 4253, type: !134)
!7463 = !DILocation(line: 4253, column: 53, scope: !7457)
!7464 = !DILocalVariable(name: "e", arg: 3, scope: !7457, file: !3, line: 4254, type: !2056)
!7465 = !DILocation(line: 4254, column: 13, scope: !7457)
!7466 = !DILocalVariable(name: "bsi", arg: 4, scope: !7457, file: !3, line: 4254, type: !3112)
!7467 = !DILocation(line: 4254, column: 37, scope: !7457)
!7468 = !DILocalVariable(name: "retval", scope: !7457, file: !3, line: 4256, type: !1866)
!7469 = !DILocation(line: 4256, column: 8, scope: !7457)
!7470 = !DILocalVariable(name: "op_def", scope: !7457, file: !3, line: 4257, type: !2076)
!7471 = !DILocation(line: 4257, column: 10, scope: !7457)
!7472 = !DILocalVariable(name: "val", scope: !7457, file: !3, line: 4258, type: !1747)
!7473 = !DILocation(line: 4258, column: 8, scope: !7457)
!7474 = !DILocalVariable(name: "rhs_code", scope: !7457, file: !3, line: 4259, type: !134)
!7475 = !DILocation(line: 4259, column: 18, scope: !7457)
!7476 = !DILocation(line: 4262, column: 7, scope: !7477)
!7477 = distinct !DILexicalBlock(scope: !7457, file: !3, line: 4262, column: 7)
!7478 = !DILocation(line: 4262, column: 22, scope: !7477)
!7479 = !DILocation(line: 4262, column: 7, scope: !7457)
!7480 = !DILocation(line: 4263, column: 5, scope: !7477)
!7481 = !DILocation(line: 4271, column: 24, scope: !7482)
!7482 = distinct !DILexicalBlock(scope: !7457, file: !3, line: 4271, column: 7)
!7483 = !DILocation(line: 4271, column: 8, scope: !7482)
!7484 = !DILocation(line: 4271, column: 7, scope: !7457)
!7485 = !DILocation(line: 4273, column: 28, scope: !7486)
!7486 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 4272, column: 5)
!7487 = !DILocation(line: 4273, column: 13, scope: !7486)
!7488 = !DILocation(line: 4273, column: 11, scope: !7486)
!7489 = !DILocation(line: 4274, column: 32, scope: !7486)
!7490 = !DILocation(line: 4274, column: 36, scope: !7486)
!7491 = !DILocation(line: 4274, column: 40, scope: !7486)
!7492 = !DILocation(line: 4274, column: 46, scope: !7486)
!7493 = !DILocation(line: 4274, column: 57, scope: !7486)
!7494 = !DILocation(line: 4274, column: 7, scope: !7486)
!7495 = !DILocation(line: 4275, column: 14, scope: !7486)
!7496 = !DILocation(line: 4276, column: 5, scope: !7486)
!7497 = !DILocation(line: 4281, column: 12, scope: !7457)
!7498 = !DILocation(line: 4281, column: 10, scope: !7457)
!7499 = !DILocation(line: 4282, column: 20, scope: !7500)
!7500 = distinct !DILexicalBlock(scope: !7457, file: !3, line: 4282, column: 7)
!7501 = !DILocation(line: 4282, column: 7, scope: !7500)
!7502 = !DILocation(line: 4282, column: 28, scope: !7500)
!7503 = !DILocation(line: 4282, column: 7, scope: !7457)
!7504 = !DILocation(line: 4283, column: 12, scope: !7500)
!7505 = !DILocation(line: 4283, column: 5, scope: !7500)
!7506 = !DILocation(line: 4285, column: 38, scope: !7457)
!7507 = !DILocation(line: 4285, column: 14, scope: !7457)
!7508 = !DILocation(line: 4285, column: 12, scope: !7457)
!7509 = !DILocation(line: 4287, column: 7, scope: !7510)
!7510 = distinct !DILexicalBlock(scope: !7457, file: !3, line: 4287, column: 7)
!7511 = !DILocation(line: 4287, column: 34, scope: !7510)
!7512 = !DILocation(line: 4287, column: 7, scope: !7457)
!7513 = !DILocalVariable(name: "invert", scope: !7514, file: !3, line: 4289, type: !1866)
!7514 = distinct !DILexicalBlock(scope: !7510, file: !3, line: 4288, column: 5)
!7515 = !DILocation(line: 4289, column: 12, scope: !7514)
!7516 = !DILocation(line: 4289, column: 22, scope: !7514)
!7517 = !DILocation(line: 4289, column: 27, scope: !7514)
!7518 = !DILocation(line: 4289, column: 21, scope: !7514)
!7519 = !DILocalVariable(name: "op0", scope: !7514, file: !3, line: 4290, type: !1747)
!7520 = !DILocation(line: 4290, column: 12, scope: !7514)
!7521 = !DILocation(line: 4290, column: 38, scope: !7514)
!7522 = !DILocation(line: 4290, column: 18, scope: !7514)
!7523 = !DILocalVariable(name: "op1", scope: !7514, file: !3, line: 4291, type: !1747)
!7524 = !DILocation(line: 4291, column: 12, scope: !7514)
!7525 = !DILocation(line: 4291, column: 38, scope: !7514)
!7526 = !DILocation(line: 4291, column: 18, scope: !7514)
!7527 = !DILocation(line: 4293, column: 11, scope: !7528)
!7528 = distinct !DILexicalBlock(scope: !7514, file: !3, line: 4293, column: 11)
!7529 = !DILocation(line: 4293, column: 27, scope: !7528)
!7530 = !DILocation(line: 4293, column: 11, scope: !7514)
!7531 = !DILocation(line: 4294, column: 47, scope: !7528)
!7532 = !DILocation(line: 4294, column: 52, scope: !7528)
!7533 = !DILocation(line: 4294, column: 60, scope: !7528)
!7534 = !DILocation(line: 4294, column: 70, scope: !7528)
!7535 = !DILocation(line: 4294, column: 75, scope: !7528)
!7536 = !DILocation(line: 4295, column: 12, scope: !7528)
!7537 = !DILocation(line: 4294, column: 19, scope: !7528)
!7538 = !DILocation(line: 4294, column: 16, scope: !7528)
!7539 = !DILocation(line: 4294, column: 9, scope: !7528)
!7540 = !DILocation(line: 4296, column: 11, scope: !7541)
!7541 = distinct !DILexicalBlock(scope: !7514, file: !3, line: 4296, column: 11)
!7542 = !DILocation(line: 4296, column: 27, scope: !7541)
!7543 = !DILocation(line: 4296, column: 11, scope: !7514)
!7544 = !DILocation(line: 4297, column: 47, scope: !7541)
!7545 = !DILocation(line: 4297, column: 52, scope: !7541)
!7546 = !DILocation(line: 4297, column: 60, scope: !7541)
!7547 = !DILocation(line: 4297, column: 70, scope: !7541)
!7548 = !DILocation(line: 4297, column: 75, scope: !7541)
!7549 = !DILocation(line: 4298, column: 12, scope: !7541)
!7550 = !DILocation(line: 4297, column: 19, scope: !7541)
!7551 = !DILocation(line: 4297, column: 16, scope: !7541)
!7552 = !DILocation(line: 4297, column: 9, scope: !7541)
!7553 = !DILocation(line: 4299, column: 5, scope: !7514)
!7554 = !DILocation(line: 4300, column: 13, scope: !7555)
!7555 = distinct !DILexicalBlock(scope: !7510, file: !3, line: 4300, column: 12)
!7556 = !DILocation(line: 4300, column: 18, scope: !7555)
!7557 = !DILocation(line: 4301, column: 6, scope: !7555)
!7558 = !DILocation(line: 4301, column: 34, scope: !7555)
!7559 = !DILocation(line: 4301, column: 10, scope: !7555)
!7560 = !DILocation(line: 4301, column: 42, scope: !7555)
!7561 = !DILocation(line: 4302, column: 3, scope: !7555)
!7562 = !DILocation(line: 4302, column: 30, scope: !7555)
!7563 = !DILocation(line: 4302, column: 6, scope: !7555)
!7564 = !DILocation(line: 4302, column: 38, scope: !7555)
!7565 = !DILocation(line: 4303, column: 5, scope: !7555)
!7566 = !DILocation(line: 4303, column: 9, scope: !7555)
!7567 = !DILocation(line: 4303, column: 14, scope: !7555)
!7568 = !DILocation(line: 4304, column: 9, scope: !7555)
!7569 = !DILocation(line: 4304, column: 37, scope: !7555)
!7570 = !DILocation(line: 4304, column: 13, scope: !7555)
!7571 = !DILocation(line: 4304, column: 45, scope: !7555)
!7572 = !DILocation(line: 4305, column: 6, scope: !7555)
!7573 = !DILocation(line: 4305, column: 33, scope: !7555)
!7574 = !DILocation(line: 4305, column: 9, scope: !7555)
!7575 = !DILocation(line: 4305, column: 41, scope: !7555)
!7576 = !DILocation(line: 4300, column: 12, scope: !7510)
!7577 = !DILocation(line: 4308, column: 65, scope: !7578)
!7578 = distinct !DILexicalBlock(scope: !7555, file: !3, line: 4306, column: 5)
!7579 = !DILocation(line: 4308, column: 45, scope: !7578)
!7580 = !DILocation(line: 4309, column: 10, scope: !7578)
!7581 = !DILocation(line: 4309, column: 16, scope: !7578)
!7582 = !DILocation(line: 4308, column: 17, scope: !7578)
!7583 = !DILocation(line: 4308, column: 14, scope: !7578)
!7584 = !DILocation(line: 4310, column: 65, scope: !7578)
!7585 = !DILocation(line: 4310, column: 45, scope: !7578)
!7586 = !DILocation(line: 4311, column: 10, scope: !7578)
!7587 = !DILocation(line: 4311, column: 16, scope: !7578)
!7588 = !DILocation(line: 4310, column: 17, scope: !7578)
!7589 = !DILocation(line: 4310, column: 14, scope: !7578)
!7590 = !DILocation(line: 4312, column: 5, scope: !7578)
!7591 = !DILocation(line: 4313, column: 36, scope: !7592)
!7592 = distinct !DILexicalBlock(scope: !7555, file: !3, line: 4313, column: 12)
!7593 = !DILocation(line: 4313, column: 12, scope: !7592)
!7594 = !DILocation(line: 4313, column: 44, scope: !7592)
!7595 = !DILocation(line: 4313, column: 12, scope: !7555)
!7596 = !DILocation(line: 4316, column: 38, scope: !7597)
!7597 = distinct !DILexicalBlock(scope: !7592, file: !3, line: 4314, column: 5)
!7598 = !DILocation(line: 4316, column: 14, scope: !7597)
!7599 = !DILocation(line: 4316, column: 12, scope: !7597)
!7600 = !DILocation(line: 4317, column: 65, scope: !7597)
!7601 = !DILocation(line: 4317, column: 45, scope: !7597)
!7602 = !DILocation(line: 4318, column: 10, scope: !7597)
!7603 = !DILocation(line: 4318, column: 16, scope: !7597)
!7604 = !DILocation(line: 4317, column: 17, scope: !7597)
!7605 = !DILocation(line: 4317, column: 14, scope: !7597)
!7606 = !DILocation(line: 4319, column: 5, scope: !7597)
!7607 = !DILocation(line: 4320, column: 36, scope: !7608)
!7608 = distinct !DILexicalBlock(scope: !7592, file: !3, line: 4320, column: 12)
!7609 = !DILocation(line: 4320, column: 12, scope: !7608)
!7610 = !DILocation(line: 4320, column: 44, scope: !7608)
!7611 = !DILocation(line: 4320, column: 12, scope: !7592)
!7612 = !DILocation(line: 4323, column: 65, scope: !7613)
!7613 = distinct !DILexicalBlock(scope: !7608, file: !3, line: 4321, column: 5)
!7614 = !DILocation(line: 4323, column: 45, scope: !7613)
!7615 = !DILocation(line: 4324, column: 10, scope: !7613)
!7616 = !DILocation(line: 4324, column: 16, scope: !7613)
!7617 = !DILocation(line: 4323, column: 17, scope: !7613)
!7618 = !DILocation(line: 4323, column: 14, scope: !7613)
!7619 = !DILocation(line: 4325, column: 5, scope: !7613)
!7620 = !DILocation(line: 4326, column: 12, scope: !7621)
!7621 = distinct !DILexicalBlock(scope: !7608, file: !3, line: 4326, column: 12)
!7622 = !DILocation(line: 4326, column: 12, scope: !7608)
!7623 = !DILocation(line: 4329, column: 65, scope: !7624)
!7624 = distinct !DILexicalBlock(scope: !7621, file: !3, line: 4327, column: 5)
!7625 = !DILocation(line: 4329, column: 45, scope: !7624)
!7626 = !DILocation(line: 4330, column: 10, scope: !7624)
!7627 = !DILocation(line: 4330, column: 16, scope: !7624)
!7628 = !DILocation(line: 4329, column: 17, scope: !7624)
!7629 = !DILocation(line: 4329, column: 14, scope: !7624)
!7630 = !DILocation(line: 4331, column: 5, scope: !7624)
!7631 = !DILocation(line: 4333, column: 10, scope: !7457)
!7632 = !DILocation(line: 4333, column: 3, scope: !7457)
!7633 = !DILocation(line: 4334, column: 1, scope: !7457)
!7634 = distinct !DISubprogram(name: "live_on_edge", scope: !3, file: !3, line: 50, type: !7635, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7635 = !DISubroutineType(types: !7636)
!7636 = !{!1866, !2056, !1747}
!7637 = !DILocalVariable(name: "e", arg: 1, scope: !7634, file: !3, line: 50, type: !2056)
!7638 = !DILocation(line: 50, column: 20, scope: !7634)
!7639 = !DILocalVariable(name: "name", arg: 2, scope: !7634, file: !3, line: 50, type: !1747)
!7640 = !DILocation(line: 50, column: 28, scope: !7634)
!7641 = !DILocation(line: 52, column: 11, scope: !7634)
!7642 = !DILocation(line: 52, column: 16, scope: !7634)
!7643 = !DILocation(line: 52, column: 19, scope: !7634)
!7644 = !DILocation(line: 52, column: 25, scope: !7634)
!7645 = !DILocation(line: 53, column: 4, scope: !7634)
!7646 = !DILocation(line: 53, column: 7, scope: !7634)
!7647 = !DILocation(line: 0, scope: !7634)
!7648 = !DILocation(line: 52, column: 10, scope: !7634)
!7649 = !DILocation(line: 52, column: 3, scope: !7634)
!7650 = distinct !DISubprogram(name: "gimple_assign_cast_p", scope: !742, file: !742, line: 1853, type: !6087, scopeLine: 1854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7651 = !DILocalVariable(name: "s", arg: 1, scope: !7650, file: !742, line: 1853, type: !2076)
!7652 = !DILocation(line: 1853, column: 30, scope: !7650)
!7653 = !DILocation(line: 1855, column: 25, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !7650, file: !742, line: 1855, column: 7)
!7655 = !DILocation(line: 1855, column: 7, scope: !7654)
!7656 = !DILocation(line: 1855, column: 7, scope: !7650)
!7657 = !DILocalVariable(name: "sc", scope: !7658, file: !742, line: 1857, type: !134)
!7658 = distinct !DILexicalBlock(scope: !7654, file: !742, line: 1856, column: 5)
!7659 = !DILocation(line: 1857, column: 22, scope: !7658)
!7660 = !DILocation(line: 1857, column: 51, scope: !7658)
!7661 = !DILocation(line: 1857, column: 27, scope: !7658)
!7662 = !DILocation(line: 1858, column: 14, scope: !7658)
!7663 = !DILocation(line: 1859, column: 7, scope: !7658)
!7664 = !DILocation(line: 1859, column: 10, scope: !7658)
!7665 = !DILocation(line: 1859, column: 13, scope: !7658)
!7666 = !DILocation(line: 1860, column: 7, scope: !7658)
!7667 = !DILocation(line: 1860, column: 10, scope: !7658)
!7668 = !DILocation(line: 1860, column: 13, scope: !7658)
!7669 = !DILocation(line: 1858, column: 7, scope: !7658)
!7670 = !DILocation(line: 1863, column: 3, scope: !7650)
!7671 = !DILocation(line: 1864, column: 1, scope: !7650)
!7672 = distinct !DISubprogram(name: "gimple_expr_type", scope: !742, file: !742, line: 4366, type: !5522, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7673 = !DILocalVariable(name: "stmt", arg: 1, scope: !7672, file: !742, line: 4366, type: !5524)
!7674 = !DILocation(line: 4366, column: 32, scope: !7672)
!7675 = !DILocalVariable(name: "code", scope: !7672, file: !742, line: 4368, type: !741)
!7676 = !DILocation(line: 4368, column: 20, scope: !7672)
!7677 = !DILocation(line: 4368, column: 40, scope: !7672)
!7678 = !DILocation(line: 4368, column: 27, scope: !7672)
!7679 = !DILocation(line: 4370, column: 7, scope: !7680)
!7680 = distinct !DILexicalBlock(scope: !7672, file: !742, line: 4370, column: 7)
!7681 = !DILocation(line: 4370, column: 12, scope: !7680)
!7682 = !DILocation(line: 4370, column: 29, scope: !7680)
!7683 = !DILocation(line: 4370, column: 32, scope: !7680)
!7684 = !DILocation(line: 4370, column: 37, scope: !7680)
!7685 = !DILocation(line: 4370, column: 7, scope: !7672)
!7686 = !DILocalVariable(name: "type", scope: !7687, file: !742, line: 4372, type: !1747)
!7687 = distinct !DILexicalBlock(scope: !7680, file: !742, line: 4371, column: 5)
!7688 = !DILocation(line: 4372, column: 12, scope: !7687)
!7689 = !DILocation(line: 4377, column: 11, scope: !7690)
!7690 = distinct !DILexicalBlock(scope: !7687, file: !742, line: 4377, column: 11)
!7691 = !DILocation(line: 4377, column: 16, scope: !7690)
!7692 = !DILocation(line: 4377, column: 11, scope: !7687)
!7693 = !DILocation(line: 4378, column: 34, scope: !7690)
!7694 = !DILocation(line: 4378, column: 9, scope: !7690)
!7695 = !DILocation(line: 4378, column: 7, scope: !7690)
!7696 = !DILocation(line: 4378, column: 2, scope: !7690)
!7697 = !DILocation(line: 4380, column: 34, scope: !7690)
!7698 = !DILocation(line: 4380, column: 10, scope: !7690)
!7699 = !DILocation(line: 4380, column: 2, scope: !7690)
!7700 = !DILocation(line: 4383, column: 13, scope: !7701)
!7701 = distinct !DILexicalBlock(scope: !7690, file: !742, line: 4381, column: 4)
!7702 = !DILocation(line: 4383, column: 11, scope: !7701)
!7703 = !DILocation(line: 4384, column: 6, scope: !7701)
!7704 = !DILocation(line: 4388, column: 13, scope: !7701)
!7705 = !DILocation(line: 4388, column: 11, scope: !7701)
!7706 = !DILocation(line: 4389, column: 6, scope: !7701)
!7707 = !DILocation(line: 4391, column: 14, scope: !7687)
!7708 = !DILocation(line: 4391, column: 7, scope: !7687)
!7709 = !DILocation(line: 4393, column: 12, scope: !7710)
!7710 = distinct !DILexicalBlock(scope: !7680, file: !742, line: 4393, column: 12)
!7711 = !DILocation(line: 4393, column: 17, scope: !7710)
!7712 = !DILocation(line: 4393, column: 12, scope: !7680)
!7713 = !DILocation(line: 4394, column: 12, scope: !7710)
!7714 = !DILocation(line: 4394, column: 5, scope: !7710)
!7715 = !DILocation(line: 4396, column: 12, scope: !7710)
!7716 = !DILocation(line: 4396, column: 5, scope: !7710)
!7717 = !DILocation(line: 4397, column: 1, scope: !7672)
!7718 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !742, file: !742, line: 1966, type: !5522, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7719 = !DILocalVariable(name: "gs", arg: 1, scope: !7718, file: !742, line: 1966, type: !5524)
!7720 = !DILocation(line: 1966, column: 39, scope: !7718)
!7721 = !DILocalVariable(name: "fn", scope: !7718, file: !742, line: 1968, type: !1747)
!7722 = !DILocation(line: 1968, column: 8, scope: !7718)
!7723 = !DILocation(line: 1968, column: 29, scope: !7718)
!7724 = !DILocation(line: 1968, column: 13, scope: !7718)
!7725 = !DILocalVariable(name: "type", scope: !7718, file: !742, line: 1969, type: !1747)
!7726 = !DILocation(line: 1969, column: 8, scope: !7718)
!7727 = !DILocation(line: 1969, column: 15, scope: !7718)
!7728 = !DILocation(line: 1972, column: 10, scope: !7718)
!7729 = !DILocation(line: 1972, column: 8, scope: !7718)
!7730 = !DILocation(line: 1976, column: 10, scope: !7718)
!7731 = !DILocation(line: 1976, column: 3, scope: !7718)
!7732 = distinct !DISubprogram(name: "gimple_call_fn", scope: !742, file: !742, line: 1911, type: !5522, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7733 = !DILocalVariable(name: "gs", arg: 1, scope: !7732, file: !742, line: 1911, type: !5524)
!7734 = !DILocation(line: 1911, column: 30, scope: !7732)
!7735 = !DILocation(line: 1914, column: 21, scope: !7732)
!7736 = !DILocation(line: 1914, column: 10, scope: !7732)
!7737 = !DILocation(line: 1914, column: 3, scope: !7732)
!7738 = distinct !DISubprogram(name: "gimple_num_ops", scope: !742, file: !742, line: 1596, type: !7739, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7739 = !DISubroutineType(types: !7740)
!7740 = !{!7, !5524}
!7741 = !DILocalVariable(name: "gs", arg: 1, scope: !7738, file: !742, line: 1596, type: !5524)
!7742 = !DILocation(line: 1596, column: 30, scope: !7738)
!7743 = !DILocation(line: 1598, column: 10, scope: !7738)
!7744 = !DILocation(line: 1598, column: 14, scope: !7738)
!7745 = !DILocation(line: 1598, column: 21, scope: !7738)
!7746 = !DILocation(line: 1598, column: 3, scope: !7738)
!7747 = distinct !DISubprogram(name: "gimple_switch_num_labels", scope: !742, file: !742, line: 3157, type: !7739, scopeLine: 3158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7748 = !DILocalVariable(name: "gs", arg: 1, scope: !7747, file: !742, line: 3157, type: !5524)
!7749 = !DILocation(line: 3157, column: 40, scope: !7747)
!7750 = !DILocalVariable(name: "num_ops", scope: !7747, file: !742, line: 3159, type: !7)
!7751 = !DILocation(line: 3159, column: 12, scope: !7747)
!7752 = !DILocation(line: 3161, column: 29, scope: !7747)
!7753 = !DILocation(line: 3161, column: 13, scope: !7747)
!7754 = !DILocation(line: 3161, column: 11, scope: !7747)
!7755 = !DILocation(line: 3162, column: 3, scope: !7747)
!7756 = !DILocation(line: 3163, column: 10, scope: !7747)
!7757 = !DILocation(line: 3163, column: 18, scope: !7747)
!7758 = !DILocation(line: 3163, column: 3, scope: !7747)
!7759 = distinct !DISubprogram(name: "gimple_switch_index", scope: !742, file: !742, line: 3180, type: !5522, scopeLine: 3181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7760 = !DILocalVariable(name: "gs", arg: 1, scope: !7759, file: !742, line: 3180, type: !5524)
!7761 = !DILocation(line: 3180, column: 35, scope: !7759)
!7762 = !DILocation(line: 3183, column: 21, scope: !7759)
!7763 = !DILocation(line: 3183, column: 10, scope: !7759)
!7764 = !DILocation(line: 3183, column: 3, scope: !7759)
!7765 = distinct !DISubprogram(name: "gimple_switch_label", scope: !742, file: !742, line: 3212, type: !6875, scopeLine: 3213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7766 = !DILocalVariable(name: "gs", arg: 1, scope: !7765, file: !742, line: 3212, type: !5524)
!7767 = !DILocation(line: 3212, column: 35, scope: !7765)
!7768 = !DILocalVariable(name: "index", arg: 2, scope: !7765, file: !742, line: 3212, type: !7)
!7769 = !DILocation(line: 3212, column: 48, scope: !7765)
!7770 = !DILocation(line: 3215, column: 3, scope: !7765)
!7771 = !DILocation(line: 3216, column: 21, scope: !7765)
!7772 = !DILocation(line: 3216, column: 25, scope: !7765)
!7773 = !DILocation(line: 3216, column: 31, scope: !7765)
!7774 = !DILocation(line: 3216, column: 10, scope: !7765)
!7775 = !DILocation(line: 3216, column: 3, scope: !7765)
!7776 = distinct !DISubprogram(name: "compare_case_labels", scope: !3, file: !3, line: 4463, type: !2575, scopeLine: 4464, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7777 = !DILocalVariable(name: "p1", arg: 1, scope: !7776, file: !3, line: 4463, type: !2570)
!7778 = !DILocation(line: 4463, column: 34, scope: !7776)
!7779 = !DILocalVariable(name: "p2", arg: 2, scope: !7776, file: !3, line: 4463, type: !2570)
!7780 = !DILocation(line: 4463, column: 50, scope: !7776)
!7781 = !DILocalVariable(name: "case1", scope: !7776, file: !3, line: 4465, type: !3138)
!7782 = !DILocation(line: 4465, column: 20, scope: !7776)
!7783 = !DILocation(line: 4465, column: 48, scope: !7776)
!7784 = !DILocation(line: 4465, column: 29, scope: !7776)
!7785 = !DILocation(line: 4465, column: 28, scope: !7776)
!7786 = !DILocalVariable(name: "case2", scope: !7776, file: !3, line: 4466, type: !3138)
!7787 = !DILocation(line: 4466, column: 20, scope: !7776)
!7788 = !DILocation(line: 4466, column: 48, scope: !7776)
!7789 = !DILocation(line: 4466, column: 29, scope: !7776)
!7790 = !DILocation(line: 4466, column: 28, scope: !7776)
!7791 = !DILocalVariable(name: "uid1", scope: !7776, file: !3, line: 4467, type: !7)
!7792 = !DILocation(line: 4467, column: 16, scope: !7776)
!7793 = !DILocation(line: 4467, column: 23, scope: !7776)
!7794 = !DILocalVariable(name: "uid2", scope: !7776, file: !3, line: 4468, type: !7)
!7795 = !DILocation(line: 4468, column: 16, scope: !7776)
!7796 = !DILocation(line: 4468, column: 23, scope: !7776)
!7797 = !DILocation(line: 4470, column: 7, scope: !7798)
!7798 = distinct !DILexicalBlock(scope: !7776, file: !3, line: 4470, column: 7)
!7799 = !DILocation(line: 4470, column: 14, scope: !7798)
!7800 = !DILocation(line: 4470, column: 12, scope: !7798)
!7801 = !DILocation(line: 4470, column: 7, scope: !7776)
!7802 = !DILocation(line: 4471, column: 5, scope: !7798)
!7803 = !DILocation(line: 4472, column: 12, scope: !7804)
!7804 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 4472, column: 12)
!7805 = !DILocation(line: 4472, column: 20, scope: !7804)
!7806 = !DILocation(line: 4472, column: 17, scope: !7804)
!7807 = !DILocation(line: 4472, column: 12, scope: !7798)
!7808 = !DILocation(line: 4475, column: 12, scope: !7809)
!7809 = distinct !DILexicalBlock(scope: !7810, file: !3, line: 4475, column: 11)
!7810 = distinct !DILexicalBlock(scope: !7804, file: !3, line: 4473, column: 5)
!7811 = !DILocation(line: 4475, column: 11, scope: !7810)
!7812 = !DILocation(line: 4476, column: 2, scope: !7809)
!7813 = !DILocation(line: 4477, column: 17, scope: !7814)
!7814 = distinct !DILexicalBlock(scope: !7809, file: !3, line: 4477, column: 16)
!7815 = !DILocation(line: 4477, column: 16, scope: !7809)
!7816 = !DILocation(line: 4478, column: 2, scope: !7814)
!7817 = !DILocation(line: 4480, column: 38, scope: !7814)
!7818 = !DILocation(line: 4480, column: 56, scope: !7814)
!7819 = !DILocation(line: 4480, column: 16, scope: !7814)
!7820 = !DILocation(line: 4480, column: 9, scope: !7814)
!7821 = !DILocation(line: 4483, column: 5, scope: !7804)
!7822 = !DILocation(line: 4484, column: 1, scope: !7776)
!7823 = distinct !DISubprogram(name: "bb_seq", scope: !742, file: !742, line: 237, type: !7824, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7824 = !DISubroutineType(types: !7825)
!7825 = !{!2066, !7826}
!7826 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1748, line: 112, baseType: !7827)
!7827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7828, size: 64)
!7828 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2041)
!7829 = !DILocalVariable(name: "bb", arg: 1, scope: !7823, file: !742, line: 237, type: !7826)
!7830 = !DILocation(line: 237, column: 27, scope: !7823)
!7831 = !DILocation(line: 239, column: 13, scope: !7823)
!7832 = !DILocation(line: 239, column: 17, scope: !7823)
!7833 = !DILocation(line: 239, column: 23, scope: !7823)
!7834 = !DILocation(line: 239, column: 33, scope: !7823)
!7835 = !DILocation(line: 239, column: 36, scope: !7823)
!7836 = !DILocation(line: 239, column: 40, scope: !7823)
!7837 = !DILocation(line: 239, column: 43, scope: !7823)
!7838 = !DILocation(line: 239, column: 10, scope: !7823)
!7839 = !DILocation(line: 239, column: 53, scope: !7823)
!7840 = !DILocation(line: 239, column: 57, scope: !7823)
!7841 = !DILocation(line: 239, column: 60, scope: !7823)
!7842 = !DILocation(line: 239, column: 68, scope: !7823)
!7843 = !DILocation(line: 239, column: 3, scope: !7823)
!7844 = distinct !DISubprogram(name: "gimple_seq_first", scope: !742, file: !742, line: 159, type: !7845, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7845 = !DISubroutineType(types: !7846)
!7846 = !{!2071, !7847}
!7847 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1748, line: 67, baseType: !7848)
!7848 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7849, size: 64)
!7849 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2068)
!7850 = !DILocalVariable(name: "s", arg: 1, scope: !7844, file: !742, line: 159, type: !7847)
!7851 = !DILocation(line: 159, column: 36, scope: !7844)
!7852 = !DILocation(line: 161, column: 10, scope: !7844)
!7853 = !DILocation(line: 161, column: 14, scope: !7844)
!7854 = !DILocation(line: 161, column: 17, scope: !7844)
!7855 = !DILocation(line: 161, column: 3, scope: !7844)
!7856 = distinct !DISubprogram(name: "op_iter_init", scope: !6095, file: !6095, line: 742, type: !7857, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7857 = !DISubroutineType(types: !7858)
!7858 = !{null, !6355, !2076, !1740}
!7859 = !DILocalVariable(name: "ptr", arg: 1, scope: !7856, file: !6095, line: 742, type: !6355)
!7860 = !DILocation(line: 742, column: 28, scope: !7856)
!7861 = !DILocalVariable(name: "stmt", arg: 2, scope: !7856, file: !6095, line: 742, type: !2076)
!7862 = !DILocation(line: 742, column: 40, scope: !7856)
!7863 = !DILocalVariable(name: "flags", arg: 3, scope: !7856, file: !6095, line: 742, type: !1740)
!7864 = !DILocation(line: 742, column: 50, scope: !7856)
!7865 = !DILocation(line: 746, column: 3, scope: !7856)
!7866 = !DILocation(line: 748, column: 16, scope: !7856)
!7867 = !DILocation(line: 748, column: 22, scope: !7856)
!7868 = !DILocation(line: 748, column: 15, scope: !7856)
!7869 = !DILocation(line: 748, column: 68, scope: !7856)
!7870 = !DILocation(line: 748, column: 52, scope: !7856)
!7871 = !DILocation(line: 748, column: 3, scope: !7856)
!7872 = !DILocation(line: 748, column: 8, scope: !7856)
!7873 = !DILocation(line: 748, column: 13, scope: !7856)
!7874 = !DILocation(line: 749, column: 9, scope: !7875)
!7875 = distinct !DILexicalBlock(scope: !7856, file: !6095, line: 749, column: 7)
!7876 = !DILocation(line: 749, column: 15, scope: !7875)
!7877 = !DILocation(line: 750, column: 7, scope: !7875)
!7878 = !DILocation(line: 750, column: 10, scope: !7875)
!7879 = !DILocation(line: 750, column: 15, scope: !7875)
!7880 = !DILocation(line: 751, column: 7, scope: !7875)
!7881 = !DILocation(line: 751, column: 23, scope: !7875)
!7882 = !DILocation(line: 751, column: 10, scope: !7875)
!7883 = !DILocation(line: 751, column: 29, scope: !7875)
!7884 = !DILocation(line: 749, column: 7, scope: !7856)
!7885 = !DILocation(line: 752, column: 17, scope: !7875)
!7886 = !DILocation(line: 752, column: 22, scope: !7875)
!7887 = !DILocation(line: 752, column: 28, scope: !7875)
!7888 = !DILocation(line: 752, column: 5, scope: !7875)
!7889 = !DILocation(line: 752, column: 10, scope: !7875)
!7890 = !DILocation(line: 752, column: 15, scope: !7875)
!7891 = !DILocation(line: 753, column: 16, scope: !7856)
!7892 = !DILocation(line: 753, column: 22, scope: !7856)
!7893 = !DILocation(line: 753, column: 15, scope: !7856)
!7894 = !DILocation(line: 753, column: 68, scope: !7856)
!7895 = !DILocation(line: 753, column: 52, scope: !7856)
!7896 = !DILocation(line: 753, column: 3, scope: !7856)
!7897 = !DILocation(line: 753, column: 8, scope: !7856)
!7898 = !DILocation(line: 753, column: 13, scope: !7856)
!7899 = !DILocation(line: 754, column: 9, scope: !7900)
!7900 = distinct !DILexicalBlock(scope: !7856, file: !6095, line: 754, column: 7)
!7901 = !DILocation(line: 754, column: 15, scope: !7900)
!7902 = !DILocation(line: 755, column: 7, scope: !7900)
!7903 = !DILocation(line: 755, column: 10, scope: !7900)
!7904 = !DILocation(line: 755, column: 15, scope: !7900)
!7905 = !DILocation(line: 756, column: 7, scope: !7900)
!7906 = !DILocation(line: 756, column: 23, scope: !7900)
!7907 = !DILocation(line: 756, column: 10, scope: !7900)
!7908 = !DILocation(line: 756, column: 29, scope: !7900)
!7909 = !DILocation(line: 754, column: 7, scope: !7856)
!7910 = !DILocation(line: 757, column: 17, scope: !7900)
!7911 = !DILocation(line: 757, column: 22, scope: !7900)
!7912 = !DILocation(line: 757, column: 28, scope: !7900)
!7913 = !DILocation(line: 757, column: 5, scope: !7900)
!7914 = !DILocation(line: 757, column: 10, scope: !7900)
!7915 = !DILocation(line: 757, column: 15, scope: !7900)
!7916 = !DILocation(line: 758, column: 3, scope: !7856)
!7917 = !DILocation(line: 758, column: 8, scope: !7856)
!7918 = !DILocation(line: 758, column: 13, scope: !7856)
!7919 = !DILocation(line: 760, column: 3, scope: !7856)
!7920 = !DILocation(line: 760, column: 8, scope: !7856)
!7921 = !DILocation(line: 760, column: 14, scope: !7856)
!7922 = !DILocation(line: 761, column: 3, scope: !7856)
!7923 = !DILocation(line: 761, column: 8, scope: !7856)
!7924 = !DILocation(line: 761, column: 16, scope: !7856)
!7925 = !DILocation(line: 762, column: 3, scope: !7856)
!7926 = !DILocation(line: 762, column: 8, scope: !7856)
!7927 = !DILocation(line: 762, column: 17, scope: !7856)
!7928 = !DILocation(line: 763, column: 1, scope: !7856)
!7929 = distinct !DISubprogram(name: "gimple_def_ops", scope: !742, file: !742, line: 1292, type: !7930, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7930 = !DISubroutineType(types: !7931)
!7931 = !{!2105, !5524}
!7932 = !DILocalVariable(name: "g", arg: 1, scope: !7929, file: !742, line: 1292, type: !5524)
!7933 = !DILocation(line: 1292, column: 30, scope: !7929)
!7934 = !DILocation(line: 1294, column: 24, scope: !7935)
!7935 = distinct !DILexicalBlock(scope: !7929, file: !742, line: 1294, column: 7)
!7936 = !DILocation(line: 1294, column: 8, scope: !7935)
!7937 = !DILocation(line: 1294, column: 7, scope: !7929)
!7938 = !DILocation(line: 1295, column: 5, scope: !7935)
!7939 = !DILocation(line: 1296, column: 10, scope: !7929)
!7940 = !DILocation(line: 1296, column: 13, scope: !7929)
!7941 = !DILocation(line: 1296, column: 19, scope: !7929)
!7942 = !DILocation(line: 1296, column: 26, scope: !7929)
!7943 = !DILocation(line: 1296, column: 3, scope: !7929)
!7944 = !DILocation(line: 1297, column: 1, scope: !7929)
!7945 = distinct !DISubprogram(name: "gimple_vdef", scope: !742, file: !742, line: 1375, type: !5522, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7946 = !DILocalVariable(name: "g", arg: 1, scope: !7945, file: !742, line: 1375, type: !5524)
!7947 = !DILocation(line: 1375, column: 27, scope: !7945)
!7948 = !DILocation(line: 1377, column: 28, scope: !7949)
!7949 = distinct !DILexicalBlock(scope: !7945, file: !742, line: 1377, column: 7)
!7950 = !DILocation(line: 1377, column: 8, scope: !7949)
!7951 = !DILocation(line: 1377, column: 7, scope: !7945)
!7952 = !DILocation(line: 1378, column: 5, scope: !7949)
!7953 = !DILocation(line: 1379, column: 10, scope: !7945)
!7954 = !DILocation(line: 1379, column: 13, scope: !7945)
!7955 = !DILocation(line: 1379, column: 23, scope: !7945)
!7956 = !DILocation(line: 1379, column: 3, scope: !7945)
!7957 = !DILocation(line: 1380, column: 1, scope: !7945)
!7958 = distinct !DISubprogram(name: "gimple_use_ops", scope: !742, file: !742, line: 1313, type: !7959, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7959 = !DISubroutineType(types: !7960)
!7960 = !{!2112, !5524}
!7961 = !DILocalVariable(name: "g", arg: 1, scope: !7958, file: !742, line: 1313, type: !5524)
!7962 = !DILocation(line: 1313, column: 30, scope: !7958)
!7963 = !DILocation(line: 1315, column: 24, scope: !7964)
!7964 = distinct !DILexicalBlock(scope: !7958, file: !742, line: 1315, column: 7)
!7965 = !DILocation(line: 1315, column: 8, scope: !7964)
!7966 = !DILocation(line: 1315, column: 7, scope: !7958)
!7967 = !DILocation(line: 1316, column: 5, scope: !7964)
!7968 = !DILocation(line: 1317, column: 10, scope: !7958)
!7969 = !DILocation(line: 1317, column: 13, scope: !7958)
!7970 = !DILocation(line: 1317, column: 19, scope: !7958)
!7971 = !DILocation(line: 1317, column: 26, scope: !7958)
!7972 = !DILocation(line: 1317, column: 3, scope: !7958)
!7973 = !DILocation(line: 1318, column: 1, scope: !7958)
!7974 = distinct !DISubprogram(name: "gimple_vuse", scope: !742, file: !742, line: 1365, type: !5522, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7975 = !DILocalVariable(name: "g", arg: 1, scope: !7974, file: !742, line: 1365, type: !5524)
!7976 = !DILocation(line: 1365, column: 27, scope: !7974)
!7977 = !DILocation(line: 1367, column: 28, scope: !7978)
!7978 = distinct !DILexicalBlock(scope: !7974, file: !742, line: 1367, column: 7)
!7979 = !DILocation(line: 1367, column: 8, scope: !7978)
!7980 = !DILocation(line: 1367, column: 7, scope: !7974)
!7981 = !DILocation(line: 1368, column: 5, scope: !7978)
!7982 = !DILocation(line: 1369, column: 10, scope: !7974)
!7983 = !DILocation(line: 1369, column: 13, scope: !7974)
!7984 = !DILocation(line: 1369, column: 23, scope: !7974)
!7985 = !DILocation(line: 1369, column: 3, scope: !7974)
!7986 = !DILocation(line: 1370, column: 1, scope: !7974)
!7987 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !742, file: !742, line: 1283, type: !6344, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!7988 = !DILocalVariable(name: "g", arg: 1, scope: !7987, file: !742, line: 1283, type: !5524)
!7989 = !DILocation(line: 1283, column: 34, scope: !7987)
!7990 = !DILocation(line: 1285, column: 23, scope: !7987)
!7991 = !DILocation(line: 1285, column: 10, scope: !7987)
!7992 = !DILocation(line: 1285, column: 26, scope: !7987)
!7993 = !DILocation(line: 1285, column: 43, scope: !7987)
!7994 = !DILocation(line: 1285, column: 59, scope: !7987)
!7995 = !DILocation(line: 1285, column: 46, scope: !7987)
!7996 = !DILocation(line: 1285, column: 62, scope: !7987)
!7997 = !DILocation(line: 0, scope: !7987)
!7998 = !DILocation(line: 1285, column: 3, scope: !7987)
!7999 = distinct !DISubprogram(name: "gimple_bb", scope: !742, file: !742, line: 1112, type: !8000, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8000 = !DISubroutineType(types: !8001)
!8001 = !{!2040, !5524}
!8002 = !DILocalVariable(name: "g", arg: 1, scope: !7999, file: !742, line: 1112, type: !5524)
!8003 = !DILocation(line: 1112, column: 25, scope: !7999)
!8004 = !DILocation(line: 1114, column: 10, scope: !7999)
!8005 = !DILocation(line: 1114, column: 13, scope: !7999)
!8006 = !DILocation(line: 1114, column: 20, scope: !7999)
!8007 = !DILocation(line: 1114, column: 3, scope: !7999)
!8008 = distinct !DISubprogram(name: "gimple_expr_code", scope: !742, file: !742, line: 1438, type: !6493, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8009 = !DILocalVariable(name: "stmt", arg: 1, scope: !8008, file: !742, line: 1438, type: !5524)
!8010 = !DILocation(line: 1438, column: 32, scope: !8008)
!8011 = !DILocalVariable(name: "code", scope: !8008, file: !742, line: 1440, type: !741)
!8012 = !DILocation(line: 1440, column: 20, scope: !8008)
!8013 = !DILocation(line: 1440, column: 40, scope: !8008)
!8014 = !DILocation(line: 1440, column: 27, scope: !8008)
!8015 = !DILocation(line: 1441, column: 7, scope: !8016)
!8016 = distinct !DILexicalBlock(scope: !8008, file: !742, line: 1441, column: 7)
!8017 = !DILocation(line: 1441, column: 12, scope: !8016)
!8018 = !DILocation(line: 1441, column: 29, scope: !8016)
!8019 = !DILocation(line: 1441, column: 32, scope: !8016)
!8020 = !DILocation(line: 1441, column: 37, scope: !8016)
!8021 = !DILocation(line: 1441, column: 7, scope: !8008)
!8022 = !DILocation(line: 1442, column: 29, scope: !8016)
!8023 = !DILocation(line: 1442, column: 35, scope: !8016)
!8024 = !DILocation(line: 1442, column: 42, scope: !8016)
!8025 = !DILocation(line: 1442, column: 5, scope: !8016)
!8026 = !DILocation(line: 1443, column: 12, scope: !8027)
!8027 = distinct !DILexicalBlock(scope: !8016, file: !742, line: 1443, column: 12)
!8028 = !DILocation(line: 1443, column: 17, scope: !8027)
!8029 = !DILocation(line: 1443, column: 12, scope: !8016)
!8030 = !DILocation(line: 1444, column: 5, scope: !8027)
!8031 = !DILocation(line: 1446, column: 5, scope: !8027)
!8032 = !DILocation(line: 1448, column: 5, scope: !8008)
!8033 = !DILocation(line: 1450, column: 1, scope: !8008)
!8034 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !742, file: !742, line: 1686, type: !8035, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8035 = !DISubroutineType(types: !8036)
!8036 = !{!827, !134}
!8037 = !DILocalVariable(name: "code", arg: 1, scope: !8034, file: !742, line: 1686, type: !134)
!8038 = !DILocation(line: 1686, column: 38, scope: !8034)
!8039 = !DILocation(line: 1688, column: 63, scope: !8034)
!8040 = !DILocation(line: 1688, column: 34, scope: !8034)
!8041 = !DILocation(line: 1688, column: 10, scope: !8034)
!8042 = !DILocation(line: 1688, column: 3, scope: !8034)
!8043 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !6095, file: !6095, line: 434, type: !8044, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8044 = !DISubroutineType(types: !8045)
!8045 = !{!1747, !8046}
!8046 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !781, line: 27, baseType: !2110)
!8047 = !DILocalVariable(name: "def", arg: 1, scope: !8043, file: !6095, line: 434, type: !8046)
!8048 = !DILocation(line: 434, column: 33, scope: !8043)
!8049 = !DILocation(line: 436, column: 11, scope: !8043)
!8050 = !DILocation(line: 436, column: 10, scope: !8043)
!8051 = !DILocation(line: 436, column: 3, scope: !8043)
!8052 = distinct !DISubprogram(name: "gimple_phi_result", scope: !742, file: !742, line: 3071, type: !5522, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8053 = !DILocalVariable(name: "gs", arg: 1, scope: !8052, file: !742, line: 3071, type: !5524)
!8054 = !DILocation(line: 3071, column: 33, scope: !8052)
!8055 = !DILocation(line: 3074, column: 10, scope: !8052)
!8056 = !DILocation(line: 3074, column: 14, scope: !8052)
!8057 = !DILocation(line: 3074, column: 25, scope: !8052)
!8058 = !DILocation(line: 3074, column: 3, scope: !8052)
!8059 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !6095, file: !6095, line: 729, type: !8060, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8060 = !DISubroutineType(types: !8061)
!8061 = !{null, !6355}
!8062 = !DILocalVariable(name: "ptr", arg: 1, scope: !8059, file: !6095, line: 729, type: !6355)
!8063 = !DILocation(line: 729, column: 39, scope: !8059)
!8064 = !DILocation(line: 731, column: 3, scope: !8059)
!8065 = !DILocation(line: 731, column: 8, scope: !8059)
!8066 = !DILocation(line: 731, column: 13, scope: !8059)
!8067 = !DILocation(line: 732, column: 3, scope: !8059)
!8068 = !DILocation(line: 732, column: 8, scope: !8059)
!8069 = !DILocation(line: 732, column: 13, scope: !8059)
!8070 = !DILocation(line: 733, column: 3, scope: !8059)
!8071 = !DILocation(line: 733, column: 8, scope: !8059)
!8072 = !DILocation(line: 733, column: 18, scope: !8059)
!8073 = !DILocation(line: 734, column: 3, scope: !8059)
!8074 = !DILocation(line: 734, column: 8, scope: !8059)
!8075 = !DILocation(line: 734, column: 14, scope: !8059)
!8076 = !DILocation(line: 735, column: 3, scope: !8059)
!8077 = !DILocation(line: 735, column: 8, scope: !8059)
!8078 = !DILocation(line: 735, column: 16, scope: !8059)
!8079 = !DILocation(line: 736, column: 3, scope: !8059)
!8080 = !DILocation(line: 736, column: 8, scope: !8059)
!8081 = !DILocation(line: 736, column: 17, scope: !8059)
!8082 = !DILocation(line: 737, column: 3, scope: !8059)
!8083 = !DILocation(line: 737, column: 8, scope: !8059)
!8084 = !DILocation(line: 737, column: 13, scope: !8059)
!8085 = !DILocation(line: 738, column: 1, scope: !8059)
!8086 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !742, file: !742, line: 3061, type: !7739, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8087 = !DILocalVariable(name: "gs", arg: 1, scope: !8086, file: !742, line: 3061, type: !5524)
!8088 = !DILocation(line: 3061, column: 35, scope: !8086)
!8089 = !DILocation(line: 3064, column: 10, scope: !8086)
!8090 = !DILocation(line: 3064, column: 14, scope: !8086)
!8091 = !DILocation(line: 3064, column: 25, scope: !8086)
!8092 = !DILocation(line: 3064, column: 3, scope: !8086)
!8093 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !6095, file: !6095, line: 442, type: !8094, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8094 = !DISubroutineType(types: !8095)
!8095 = !{!3142, !2076, !1740}
!8096 = !DILocalVariable(name: "gs", arg: 1, scope: !8093, file: !6095, line: 442, type: !2076)
!8097 = !DILocation(line: 442, column: 36, scope: !8093)
!8098 = !DILocalVariable(name: "i", arg: 2, scope: !8093, file: !6095, line: 442, type: !1740)
!8099 = !DILocation(line: 442, column: 44, scope: !8093)
!8100 = !DILocation(line: 444, column: 27, scope: !8093)
!8101 = !DILocation(line: 444, column: 31, scope: !8093)
!8102 = !DILocation(line: 444, column: 11, scope: !8093)
!8103 = !DILocation(line: 444, column: 35, scope: !8093)
!8104 = !DILocation(line: 444, column: 3, scope: !8093)
!8105 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !742, file: !742, line: 3100, type: !8106, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8106 = !DISubroutineType(types: !8107)
!8107 = !{!8108, !2076, !7}
!8108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2179, size: 64)
!8109 = !DILocalVariable(name: "gs", arg: 1, scope: !8105, file: !742, line: 3100, type: !2076)
!8110 = !DILocation(line: 3100, column: 24, scope: !8105)
!8111 = !DILocalVariable(name: "index", arg: 2, scope: !8105, file: !742, line: 3100, type: !7)
!8112 = !DILocation(line: 3100, column: 37, scope: !8105)
!8113 = !DILocation(line: 3103, column: 3, scope: !8105)
!8114 = !DILocation(line: 3104, column: 12, scope: !8105)
!8115 = !DILocation(line: 3104, column: 16, scope: !8105)
!8116 = !DILocation(line: 3104, column: 27, scope: !8105)
!8117 = !DILocation(line: 3104, column: 32, scope: !8105)
!8118 = !DILocation(line: 3104, column: 3, scope: !8105)
!8119 = distinct !DISubprogram(name: "ei_end_p", scope: !343, file: !343, line: 721, type: !8120, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8120 = !DISubroutineType(types: !8121)
!8121 = !{!1866, !5606}
!8122 = !DILocalVariable(name: "i", arg: 1, scope: !8119, file: !343, line: 721, type: !5606)
!8123 = !DILocation(line: 721, column: 25, scope: !8119)
!8124 = !DILocation(line: 723, column: 13, scope: !8119)
!8125 = !DILocation(line: 723, column: 22, scope: !8119)
!8126 = !DILocation(line: 723, column: 19, scope: !8119)
!8127 = !DILocation(line: 723, column: 10, scope: !8119)
!8128 = !DILocation(line: 723, column: 3, scope: !8119)
!8129 = distinct !DISubprogram(name: "ei_edge", scope: !343, file: !343, line: 752, type: !8130, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8130 = !DISubroutineType(types: !8131)
!8131 = !{!2056, !5606}
!8132 = !DILocalVariable(name: "i", arg: 1, scope: !8129, file: !343, line: 752, type: !5606)
!8133 = !DILocation(line: 752, column: 24, scope: !8129)
!8134 = !DILocation(line: 754, column: 10, scope: !8129)
!8135 = !DILocation(line: 754, column: 3, scope: !8129)
!8136 = distinct !DISubprogram(name: "ei_container", scope: !343, file: !343, line: 685, type: !8137, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8137 = !DISubroutineType(types: !8138)
!8138 = !{!2044, !5606}
!8139 = !DILocalVariable(name: "i", arg: 1, scope: !8136, file: !343, line: 685, type: !5606)
!8140 = !DILocation(line: 685, column: 29, scope: !8136)
!8141 = !DILocation(line: 687, column: 3, scope: !8136)
!8142 = !DILocation(line: 688, column: 13, scope: !8136)
!8143 = !DILocation(line: 688, column: 10, scope: !8136)
!8144 = !DILocation(line: 688, column: 3, scope: !8136)
!8145 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !343, file: !343, line: 150, type: !8146, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8146 = !DISubroutineType(types: !8147)
!8147 = !{!2056, !5465, !7}
!8148 = !DILocalVariable(name: "vec_", arg: 1, scope: !8145, file: !343, line: 150, type: !5465)
!8149 = !DILocation(line: 150, column: 1, scope: !8145)
!8150 = !DILocalVariable(name: "ix_", arg: 2, scope: !8145, file: !343, line: 150, type: !7)
!8151 = !DILocation(line: 0, scope: !8145)
!8152 = distinct !DISubprogram(name: "process_assert_insertions_for", scope: !3, file: !3, line: 4853, type: !8153, scopeLine: 4854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8153 = !DISubroutineType(types: !8154)
!8154 = !{!1866, !1747, !3105}
!8155 = !DILocalVariable(name: "name", arg: 1, scope: !8152, file: !3, line: 4853, type: !1747)
!8156 = !DILocation(line: 4853, column: 37, scope: !8152)
!8157 = !DILocalVariable(name: "loc", arg: 2, scope: !8152, file: !3, line: 4853, type: !3105)
!8158 = !DILocation(line: 4853, column: 58, scope: !8152)
!8159 = !DILocalVariable(name: "stmt", scope: !8152, file: !3, line: 4856, type: !2076)
!8160 = !DILocation(line: 4856, column: 10, scope: !8152)
!8161 = !DILocalVariable(name: "cond", scope: !8152, file: !3, line: 4857, type: !1747)
!8162 = !DILocation(line: 4857, column: 8, scope: !8152)
!8163 = !DILocalVariable(name: "assert_stmt", scope: !8152, file: !3, line: 4858, type: !2076)
!8164 = !DILocation(line: 4858, column: 10, scope: !8152)
!8165 = !DILocalVariable(name: "ei", scope: !8152, file: !3, line: 4859, type: !5606)
!8166 = !DILocation(line: 4859, column: 17, scope: !8152)
!8167 = !DILocalVariable(name: "e", scope: !8152, file: !3, line: 4860, type: !2056)
!8168 = !DILocation(line: 4860, column: 8, scope: !8152)
!8169 = !DILocation(line: 4863, column: 7, scope: !8170)
!8170 = distinct !DILexicalBlock(scope: !8152, file: !3, line: 4863, column: 7)
!8171 = !DILocation(line: 4863, column: 12, scope: !8170)
!8172 = !DILocation(line: 4863, column: 20, scope: !8170)
!8173 = !DILocation(line: 4863, column: 25, scope: !8170)
!8174 = !DILocation(line: 4863, column: 17, scope: !8170)
!8175 = !DILocation(line: 4863, column: 7, scope: !8152)
!8176 = !DILocation(line: 4864, column: 5, scope: !8170)
!8177 = !DILocation(line: 4866, column: 10, scope: !8152)
!8178 = !DILocation(line: 4866, column: 8, scope: !8152)
!8179 = !DILocation(line: 4867, column: 40, scope: !8152)
!8180 = !DILocation(line: 4867, column: 46, scope: !8152)
!8181 = !DILocation(line: 4867, column: 17, scope: !8152)
!8182 = !DILocation(line: 4867, column: 15, scope: !8152)
!8183 = !DILocation(line: 4868, column: 7, scope: !8184)
!8184 = distinct !DILexicalBlock(scope: !8152, file: !3, line: 4868, column: 7)
!8185 = !DILocation(line: 4868, column: 12, scope: !8184)
!8186 = !DILocation(line: 4868, column: 7, scope: !8152)
!8187 = !DILocation(line: 4877, column: 27, scope: !8188)
!8188 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 4869, column: 5)
!8189 = !DILocation(line: 4877, column: 32, scope: !8188)
!8190 = !DILocation(line: 4877, column: 35, scope: !8188)
!8191 = !DILocation(line: 4877, column: 7, scope: !8188)
!8192 = !DILocation(line: 4878, column: 7, scope: !8188)
!8193 = !DILocation(line: 4883, column: 20, scope: !8152)
!8194 = !DILocation(line: 4883, column: 25, scope: !8152)
!8195 = !DILocation(line: 4883, column: 10, scope: !8152)
!8196 = !DILocation(line: 4883, column: 8, scope: !8152)
!8197 = !DILocation(line: 4884, column: 24, scope: !8198)
!8198 = distinct !DILexicalBlock(scope: !8152, file: !3, line: 4884, column: 7)
!8199 = !DILocation(line: 4884, column: 8, scope: !8198)
!8200 = !DILocation(line: 4884, column: 7, scope: !8152)
!8201 = !DILocation(line: 4886, column: 26, scope: !8202)
!8202 = distinct !DILexicalBlock(scope: !8198, file: !3, line: 4885, column: 5)
!8203 = !DILocation(line: 4886, column: 31, scope: !8202)
!8204 = !DILocation(line: 4886, column: 35, scope: !8202)
!8205 = !DILocation(line: 4886, column: 7, scope: !8202)
!8206 = !DILocation(line: 4887, column: 7, scope: !8202)
!8207 = !DILocation(line: 4894, column: 3, scope: !8208)
!8208 = distinct !DILexicalBlock(scope: !8152, file: !3, line: 4894, column: 3)
!8209 = !DILocation(line: 4894, column: 3, scope: !8210)
!8210 = distinct !DILexicalBlock(scope: !8208, file: !3, line: 4894, column: 3)
!8211 = !DILocation(line: 4895, column: 11, scope: !8212)
!8212 = distinct !DILexicalBlock(scope: !8210, file: !3, line: 4895, column: 9)
!8213 = !DILocation(line: 4895, column: 14, scope: !8212)
!8214 = !DILocation(line: 4895, column: 20, scope: !8212)
!8215 = !DILocation(line: 4895, column: 9, scope: !8210)
!8216 = !DILocation(line: 4897, column: 22, scope: !8217)
!8217 = distinct !DILexicalBlock(scope: !8212, file: !3, line: 4896, column: 7)
!8218 = !DILocation(line: 4897, column: 25, scope: !8217)
!8219 = !DILocation(line: 4897, column: 2, scope: !8217)
!8220 = !DILocation(line: 4898, column: 2, scope: !8217)
!8221 = !DILocation(line: 4895, column: 35, scope: !8212)
!8222 = distinct !{!8222, !8207, !8223}
!8223 = !DILocation(line: 4899, column: 7, scope: !8208)
!8224 = !DILocation(line: 4901, column: 3, scope: !8152)
!8225 = !DILocation(line: 4903, column: 5, scope: !8152)
!8226 = !DILocation(line: 4905, column: 1, scope: !8152)
!8227 = distinct !DISubprogram(name: "build_assert_expr_for", scope: !3, file: !3, line: 3743, type: !8228, scopeLine: 3744, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8228 = !DISubroutineType(types: !8229)
!8229 = !{!2076, !1747, !1747}
!8230 = !DILocalVariable(name: "cond", arg: 1, scope: !8227, file: !3, line: 3743, type: !1747)
!8231 = !DILocation(line: 3743, column: 29, scope: !8227)
!8232 = !DILocalVariable(name: "v", arg: 2, scope: !8227, file: !3, line: 3743, type: !1747)
!8233 = !DILocation(line: 3743, column: 40, scope: !8227)
!8234 = !DILocalVariable(name: "n", scope: !8227, file: !3, line: 3745, type: !1747)
!8235 = !DILocation(line: 3745, column: 8, scope: !8227)
!8236 = !DILocalVariable(name: "assertion", scope: !8227, file: !3, line: 3746, type: !2076)
!8237 = !DILocation(line: 3746, column: 10, scope: !8227)
!8238 = !DILocation(line: 3748, column: 3, scope: !8227)
!8239 = !DILocation(line: 3749, column: 27, scope: !8227)
!8240 = !DILocation(line: 3749, column: 7, scope: !8227)
!8241 = !DILocation(line: 3749, column: 5, scope: !8227)
!8242 = !DILocation(line: 3751, column: 7, scope: !8243)
!8243 = distinct !DILexicalBlock(scope: !8227, file: !3, line: 3751, column: 7)
!8244 = !DILocation(line: 3751, column: 7, scope: !8227)
!8245 = !DILocalVariable(name: "a", scope: !8246, file: !3, line: 3753, type: !1747)
!8246 = distinct !DILexicalBlock(scope: !8243, file: !3, line: 3752, column: 5)
!8247 = !DILocation(line: 3753, column: 12, scope: !8246)
!8248 = !DILocation(line: 3753, column: 16, scope: !8246)
!8249 = !DILocation(line: 3754, column: 19, scope: !8246)
!8250 = !DILocation(line: 3754, column: 17, scope: !8246)
!8251 = !DILocation(line: 3755, column: 5, scope: !8246)
!8252 = !DILocation(line: 3756, column: 12, scope: !8253)
!8253 = distinct !DILexicalBlock(scope: !8243, file: !3, line: 3756, column: 12)
!8254 = !DILocation(line: 3756, column: 29, scope: !8253)
!8255 = !DILocation(line: 3756, column: 12, scope: !8243)
!8256 = !DILocalVariable(name: "op0", scope: !8257, file: !3, line: 3759, type: !1747)
!8257 = distinct !DILexicalBlock(scope: !8253, file: !3, line: 3757, column: 5)
!8258 = !DILocation(line: 3759, column: 12, scope: !8257)
!8259 = !DILocation(line: 3759, column: 18, scope: !8257)
!8260 = !DILocation(line: 3760, column: 7, scope: !8257)
!8261 = !DILocation(line: 3761, column: 19, scope: !8257)
!8262 = !DILocation(line: 3761, column: 17, scope: !8257)
!8263 = !DILocation(line: 3762, column: 5, scope: !8257)
!8264 = !DILocation(line: 3763, column: 12, scope: !8265)
!8265 = distinct !DILexicalBlock(scope: !8253, file: !3, line: 3763, column: 12)
!8266 = !DILocation(line: 3763, column: 29, scope: !8265)
!8267 = !DILocation(line: 3763, column: 12, scope: !8253)
!8268 = !DILocation(line: 3766, column: 7, scope: !8269)
!8269 = distinct !DILexicalBlock(scope: !8265, file: !3, line: 3764, column: 5)
!8270 = !DILocation(line: 3767, column: 19, scope: !8269)
!8271 = !DILocation(line: 3767, column: 17, scope: !8269)
!8272 = !DILocation(line: 3768, column: 5, scope: !8269)
!8273 = !DILocation(line: 3770, column: 5, scope: !8265)
!8274 = !DILocation(line: 3772, column: 27, scope: !8227)
!8275 = !DILocation(line: 3772, column: 3, scope: !8227)
!8276 = !DILocation(line: 3772, column: 25, scope: !8227)
!8277 = !DILocation(line: 3778, column: 30, scope: !8227)
!8278 = !DILocation(line: 3778, column: 33, scope: !8227)
!8279 = !DILocation(line: 3778, column: 3, scope: !8227)
!8280 = !DILocation(line: 3780, column: 10, scope: !8227)
!8281 = !DILocation(line: 3780, column: 3, scope: !8227)
!8282 = distinct !DISubprogram(name: "stmt_interesting_for_vrp", scope: !3, file: !3, line: 5274, type: !6087, scopeLine: 5275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8283 = !DILocalVariable(name: "stmt", arg: 1, scope: !8282, file: !3, line: 5274, type: !2076)
!8284 = !DILocation(line: 5274, column: 34, scope: !8282)
!8285 = !DILocation(line: 5276, column: 20, scope: !8286)
!8286 = distinct !DILexicalBlock(scope: !8282, file: !3, line: 5276, column: 7)
!8287 = !DILocation(line: 5276, column: 7, scope: !8286)
!8288 = !DILocation(line: 5276, column: 26, scope: !8286)
!8289 = !DILocation(line: 5277, column: 7, scope: !8286)
!8290 = !DILocation(line: 5277, column: 44, scope: !8286)
!8291 = !DILocation(line: 5277, column: 25, scope: !8286)
!8292 = !DILocation(line: 5277, column: 10, scope: !8286)
!8293 = !DILocation(line: 5278, column: 7, scope: !8286)
!8294 = !DILocation(line: 5278, column: 11, scope: !8286)
!8295 = !DILocation(line: 5279, column: 4, scope: !8286)
!8296 = !DILocation(line: 5279, column: 7, scope: !8286)
!8297 = !DILocation(line: 5276, column: 7, scope: !8282)
!8298 = !DILocation(line: 5280, column: 5, scope: !8286)
!8299 = !DILocation(line: 5281, column: 30, scope: !8300)
!8300 = distinct !DILexicalBlock(scope: !8286, file: !3, line: 5281, column: 12)
!8301 = !DILocation(line: 5281, column: 12, scope: !8300)
!8302 = !DILocation(line: 5281, column: 36, scope: !8300)
!8303 = !DILocation(line: 5281, column: 55, scope: !8300)
!8304 = !DILocation(line: 5281, column: 39, scope: !8300)
!8305 = !DILocation(line: 5281, column: 12, scope: !8286)
!8306 = !DILocalVariable(name: "lhs", scope: !8307, file: !3, line: 5283, type: !1747)
!8307 = distinct !DILexicalBlock(scope: !8300, file: !3, line: 5282, column: 5)
!8308 = !DILocation(line: 5283, column: 12, scope: !8307)
!8309 = !DILocation(line: 5283, column: 34, scope: !8307)
!8310 = !DILocation(line: 5283, column: 18, scope: !8307)
!8311 = !DILocation(line: 5288, column: 11, scope: !8312)
!8312 = distinct !DILexicalBlock(scope: !8307, file: !3, line: 5288, column: 11)
!8313 = !DILocation(line: 5288, column: 15, scope: !8312)
!8314 = !DILocation(line: 5288, column: 18, scope: !8312)
!8315 = !DILocation(line: 5288, column: 34, scope: !8312)
!8316 = !DILocation(line: 5289, column: 4, scope: !8312)
!8317 = !DILocation(line: 5289, column: 8, scope: !8312)
!8318 = !DILocation(line: 5290, column: 8, scope: !8312)
!8319 = !DILocation(line: 5290, column: 11, scope: !8312)
!8320 = !DILocation(line: 5291, column: 4, scope: !8312)
!8321 = !DILocation(line: 5291, column: 25, scope: !8312)
!8322 = !DILocation(line: 5291, column: 9, scope: !8312)
!8323 = !DILocation(line: 5292, column: 9, scope: !8312)
!8324 = !DILocation(line: 5292, column: 32, scope: !8312)
!8325 = !DILocation(line: 5292, column: 12, scope: !8312)
!8326 = !DILocation(line: 5292, column: 38, scope: !8312)
!8327 = !DILocation(line: 5293, column: 9, scope: !8312)
!8328 = !DILocation(line: 5293, column: 12, scope: !8312)
!8329 = !DILocation(line: 5294, column: 8, scope: !8312)
!8330 = !DILocation(line: 5294, column: 25, scope: !8312)
!8331 = !DILocation(line: 5294, column: 12, scope: !8312)
!8332 = !DILocation(line: 5288, column: 11, scope: !8307)
!8333 = !DILocation(line: 5295, column: 2, scope: !8312)
!8334 = !DILocation(line: 5296, column: 5, scope: !8307)
!8335 = !DILocation(line: 5297, column: 25, scope: !8336)
!8336 = distinct !DILexicalBlock(scope: !8300, file: !3, line: 5297, column: 12)
!8337 = !DILocation(line: 5297, column: 12, scope: !8336)
!8338 = !DILocation(line: 5297, column: 31, scope: !8336)
!8339 = !DILocation(line: 5298, column: 5, scope: !8336)
!8340 = !DILocation(line: 5298, column: 21, scope: !8336)
!8341 = !DILocation(line: 5298, column: 8, scope: !8336)
!8342 = !DILocation(line: 5298, column: 27, scope: !8336)
!8343 = !DILocation(line: 5297, column: 12, scope: !8300)
!8344 = !DILocation(line: 5299, column: 5, scope: !8336)
!8345 = !DILocation(line: 5301, column: 3, scope: !8282)
!8346 = !DILocation(line: 5302, column: 1, scope: !8282)
!8347 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !742, file: !742, line: 3080, type: !6905, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8348 = !DILocalVariable(name: "gs", arg: 1, scope: !8347, file: !742, line: 3080, type: !2076)
!8349 = !DILocation(line: 3080, column: 31, scope: !8347)
!8350 = !DILocation(line: 3083, column: 11, scope: !8347)
!8351 = !DILocation(line: 3083, column: 15, scope: !8347)
!8352 = !DILocation(line: 3083, column: 26, scope: !8347)
!8353 = !DILocation(line: 3083, column: 3, scope: !8347)
!8354 = distinct !DISubprogram(name: "prop_set_simulate_again", scope: !391, file: !391, line: 28, type: !8355, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8355 = !DISubroutineType(types: !8356)
!8356 = !{null, !2076, !1866}
!8357 = !DILocalVariable(name: "s", arg: 1, scope: !8354, file: !391, line: 28, type: !2076)
!8358 = !DILocation(line: 28, column: 33, scope: !8354)
!8359 = !DILocalVariable(name: "visit_p", arg: 2, scope: !8354, file: !391, line: 28, type: !1866)
!8360 = !DILocation(line: 28, column: 41, scope: !8354)
!8361 = !DILocation(line: 30, column: 23, scope: !8354)
!8362 = !DILocation(line: 30, column: 26, scope: !8354)
!8363 = !DILocation(line: 30, column: 3, scope: !8354)
!8364 = !DILocation(line: 31, column: 1, scope: !8354)
!8365 = distinct !DISubprogram(name: "is_gimple_call", scope: !742, file: !742, line: 1870, type: !6344, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8366 = !DILocalVariable(name: "gs", arg: 1, scope: !8365, file: !742, line: 1870, type: !5524)
!8367 = !DILocation(line: 1870, column: 30, scope: !8365)
!8368 = !DILocation(line: 1872, column: 23, scope: !8365)
!8369 = !DILocation(line: 1872, column: 10, scope: !8365)
!8370 = !DILocation(line: 1872, column: 27, scope: !8365)
!8371 = !DILocation(line: 1872, column: 3, scope: !8365)
!8372 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !742, file: !742, line: 1954, type: !5522, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8373 = !DILocalVariable(name: "gs", arg: 1, scope: !8372, file: !742, line: 1954, type: !5524)
!8374 = !DILocation(line: 1954, column: 34, scope: !8372)
!8375 = !DILocalVariable(name: "addr", scope: !8372, file: !742, line: 1956, type: !1747)
!8376 = !DILocation(line: 1956, column: 8, scope: !8372)
!8377 = !DILocation(line: 1956, column: 31, scope: !8372)
!8378 = !DILocation(line: 1956, column: 15, scope: !8372)
!8379 = !DILocation(line: 1957, column: 7, scope: !8380)
!8380 = distinct !DILexicalBlock(scope: !8372, file: !742, line: 1957, column: 7)
!8381 = !DILocation(line: 1957, column: 24, scope: !8380)
!8382 = !DILocation(line: 1957, column: 7, scope: !8372)
!8383 = !DILocation(line: 1958, column: 12, scope: !8380)
!8384 = !DILocation(line: 1958, column: 5, scope: !8380)
!8385 = !DILocation(line: 1959, column: 3, scope: !8372)
!8386 = !DILocation(line: 1960, column: 1, scope: !8372)
!8387 = distinct !DISubprogram(name: "gimple_set_visited", scope: !742, file: !742, line: 1217, type: !8355, scopeLine: 1218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8388 = !DILocalVariable(name: "stmt", arg: 1, scope: !8387, file: !742, line: 1217, type: !2076)
!8389 = !DILocation(line: 1217, column: 28, scope: !8387)
!8390 = !DILocalVariable(name: "visited_p", arg: 2, scope: !8387, file: !742, line: 1217, type: !1866)
!8391 = !DILocation(line: 1217, column: 39, scope: !8387)
!8392 = !DILocation(line: 1219, column: 37, scope: !8387)
!8393 = !DILocation(line: 1219, column: 26, scope: !8387)
!8394 = !DILocation(line: 1219, column: 3, scope: !8387)
!8395 = !DILocation(line: 1219, column: 9, scope: !8387)
!8396 = !DILocation(line: 1219, column: 16, scope: !8387)
!8397 = !DILocation(line: 1219, column: 24, scope: !8387)
!8398 = !DILocation(line: 1220, column: 1, scope: !8387)
!8399 = distinct !DISubprogram(name: "vrp_visit_assignment_or_call", scope: !3, file: !3, line: 5360, type: !8400, scopeLine: 5361, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8400 = !DISubroutineType(types: !8401)
!8401 = !{!838, !2076, !2110}
!8402 = !DILocalVariable(name: "stmt", arg: 1, scope: !8399, file: !3, line: 5360, type: !2076)
!8403 = !DILocation(line: 5360, column: 38, scope: !8399)
!8404 = !DILocalVariable(name: "output_p", arg: 2, scope: !8399, file: !3, line: 5360, type: !2110)
!8405 = !DILocation(line: 5360, column: 50, scope: !8399)
!8406 = !DILocalVariable(name: "def", scope: !8399, file: !3, line: 5362, type: !1747)
!8407 = !DILocation(line: 5362, column: 8, scope: !8399)
!8408 = !DILocalVariable(name: "lhs", scope: !8399, file: !3, line: 5362, type: !1747)
!8409 = !DILocation(line: 5362, column: 13, scope: !8399)
!8410 = !DILocalVariable(name: "iter", scope: !8399, file: !3, line: 5363, type: !4830)
!8411 = !DILocation(line: 5363, column: 15, scope: !8399)
!8412 = !DILocalVariable(name: "code", scope: !8399, file: !3, line: 5364, type: !741)
!8413 = !DILocation(line: 5364, column: 20, scope: !8399)
!8414 = !DILocation(line: 5364, column: 40, scope: !8399)
!8415 = !DILocation(line: 5364, column: 27, scope: !8399)
!8416 = !DILocation(line: 5365, column: 25, scope: !8399)
!8417 = !DILocation(line: 5365, column: 9, scope: !8399)
!8418 = !DILocation(line: 5365, column: 7, scope: !8399)
!8419 = !DILocation(line: 5368, column: 7, scope: !8420)
!8420 = distinct !DILexicalBlock(scope: !8399, file: !3, line: 5368, column: 7)
!8421 = !DILocation(line: 5368, column: 23, scope: !8420)
!8422 = !DILocation(line: 5369, column: 7, scope: !8420)
!8423 = !DILocation(line: 5369, column: 12, scope: !8420)
!8424 = !DILocation(line: 5372, column: 5, scope: !8420)
!8425 = !DILocation(line: 5372, column: 8, scope: !8420)
!8426 = !DILocation(line: 5373, column: 5, scope: !8420)
!8427 = !DILocation(line: 5373, column: 8, scope: !8420)
!8428 = !DILocation(line: 5374, column: 4, scope: !8420)
!8429 = !DILocation(line: 5374, column: 7, scope: !8420)
!8430 = !DILocation(line: 5368, column: 7, scope: !8399)
!8431 = !DILocalVariable(name: "new_vr", scope: !8432, file: !3, line: 5376, type: !1742)
!8432 = distinct !DILexicalBlock(scope: !8420, file: !3, line: 5375, column: 5)
!8433 = !DILocation(line: 5376, column: 21, scope: !8432)
!8434 = !DILocation(line: 5378, column: 11, scope: !8435)
!8435 = distinct !DILexicalBlock(scope: !8432, file: !3, line: 5378, column: 11)
!8436 = !DILocation(line: 5378, column: 16, scope: !8435)
!8437 = !DILocation(line: 5378, column: 11, scope: !8432)
!8438 = !DILocation(line: 5379, column: 32, scope: !8435)
!8439 = !DILocation(line: 5379, column: 2, scope: !8435)
!8440 = !DILocation(line: 5381, column: 42, scope: !8435)
!8441 = !DILocation(line: 5381, column: 2, scope: !8435)
!8442 = !DILocation(line: 5383, column: 31, scope: !8443)
!8443 = distinct !DILexicalBlock(scope: !8432, file: !3, line: 5383, column: 11)
!8444 = !DILocation(line: 5383, column: 11, scope: !8443)
!8445 = !DILocation(line: 5383, column: 11, scope: !8432)
!8446 = !DILocation(line: 5385, column: 16, scope: !8447)
!8447 = distinct !DILexicalBlock(scope: !8443, file: !3, line: 5384, column: 2)
!8448 = !DILocation(line: 5385, column: 5, scope: !8447)
!8449 = !DILocation(line: 5385, column: 14, scope: !8447)
!8450 = !DILocation(line: 5387, column: 8, scope: !8451)
!8451 = distinct !DILexicalBlock(scope: !8447, file: !3, line: 5387, column: 8)
!8452 = !DILocation(line: 5387, column: 18, scope: !8451)
!8453 = !DILocation(line: 5387, column: 22, scope: !8451)
!8454 = !DILocation(line: 5387, column: 33, scope: !8451)
!8455 = !DILocation(line: 5387, column: 8, scope: !8447)
!8456 = !DILocation(line: 5389, column: 17, scope: !8457)
!8457 = distinct !DILexicalBlock(scope: !8451, file: !3, line: 5388, column: 6)
!8458 = !DILocation(line: 5389, column: 8, scope: !8457)
!8459 = !DILocation(line: 5390, column: 28, scope: !8457)
!8460 = !DILocation(line: 5390, column: 39, scope: !8457)
!8461 = !DILocation(line: 5390, column: 8, scope: !8457)
!8462 = !DILocation(line: 5391, column: 17, scope: !8457)
!8463 = !DILocation(line: 5391, column: 8, scope: !8457)
!8464 = !DILocation(line: 5392, column: 26, scope: !8457)
!8465 = !DILocation(line: 5392, column: 8, scope: !8457)
!8466 = !DILocation(line: 5393, column: 17, scope: !8457)
!8467 = !DILocation(line: 5393, column: 8, scope: !8457)
!8468 = !DILocation(line: 5394, column: 6, scope: !8457)
!8469 = !DILocation(line: 5396, column: 15, scope: !8470)
!8470 = distinct !DILexicalBlock(scope: !8447, file: !3, line: 5396, column: 8)
!8471 = !DILocation(line: 5396, column: 20, scope: !8470)
!8472 = !DILocation(line: 5396, column: 8, scope: !8447)
!8473 = !DILocation(line: 5397, column: 6, scope: !8470)
!8474 = !DILocation(line: 5399, column: 4, scope: !8447)
!8475 = !DILocation(line: 5402, column: 7, scope: !8432)
!8476 = !DILocation(line: 5406, column: 3, scope: !8477)
!8477 = distinct !DILexicalBlock(scope: !8399, file: !3, line: 5406, column: 3)
!8478 = !DILocation(line: 5406, column: 3, scope: !8479)
!8479 = distinct !DILexicalBlock(scope: !8477, file: !3, line: 5406, column: 3)
!8480 = !DILocation(line: 5407, column: 50, scope: !8479)
!8481 = !DILocation(line: 5407, column: 33, scope: !8479)
!8482 = !DILocation(line: 5407, column: 5, scope: !8479)
!8483 = distinct !{!8483, !8476, !8484}
!8484 = !DILocation(line: 5407, column: 54, scope: !8477)
!8485 = !DILocation(line: 5409, column: 3, scope: !8399)
!8486 = !DILocation(line: 5410, column: 1, scope: !8399)
!8487 = distinct !DISubprogram(name: "vrp_visit_cond_stmt", scope: !3, file: !3, line: 5781, type: !8488, scopeLine: 5782, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8488 = !DISubroutineType(types: !8489)
!8489 = !{!838, !2076, !4871}
!8490 = !DILocalVariable(name: "stmt", arg: 1, scope: !8487, file: !3, line: 5781, type: !2076)
!8491 = !DILocation(line: 5781, column: 29, scope: !8487)
!8492 = !DILocalVariable(name: "taken_edge_p", arg: 2, scope: !8487, file: !3, line: 5781, type: !4871)
!8493 = !DILocation(line: 5781, column: 41, scope: !8487)
!8494 = !DILocalVariable(name: "val", scope: !8487, file: !3, line: 5783, type: !1747)
!8495 = !DILocation(line: 5783, column: 8, scope: !8487)
!8496 = !DILocalVariable(name: "sop", scope: !8487, file: !3, line: 5784, type: !1866)
!8497 = !DILocation(line: 5784, column: 8, scope: !8487)
!8498 = !DILocation(line: 5786, column: 4, scope: !8487)
!8499 = !DILocation(line: 5786, column: 17, scope: !8487)
!8500 = !DILocation(line: 5788, column: 7, scope: !8501)
!8501 = distinct !DILexicalBlock(scope: !8487, file: !3, line: 5788, column: 7)
!8502 = !DILocation(line: 5788, column: 17, scope: !8501)
!8503 = !DILocation(line: 5788, column: 21, scope: !8501)
!8504 = !DILocation(line: 5788, column: 32, scope: !8501)
!8505 = !DILocation(line: 5788, column: 7, scope: !8487)
!8506 = !DILocalVariable(name: "use", scope: !8507, file: !3, line: 5790, type: !1747)
!8507 = distinct !DILexicalBlock(scope: !8501, file: !3, line: 5789, column: 5)
!8508 = !DILocation(line: 5790, column: 12, scope: !8507)
!8509 = !DILocalVariable(name: "i", scope: !8507, file: !3, line: 5791, type: !4830)
!8510 = !DILocation(line: 5791, column: 19, scope: !8507)
!8511 = !DILocation(line: 5793, column: 16, scope: !8507)
!8512 = !DILocation(line: 5793, column: 7, scope: !8507)
!8513 = !DILocation(line: 5794, column: 26, scope: !8507)
!8514 = !DILocation(line: 5794, column: 37, scope: !8507)
!8515 = !DILocation(line: 5794, column: 7, scope: !8507)
!8516 = !DILocation(line: 5795, column: 16, scope: !8507)
!8517 = !DILocation(line: 5795, column: 7, scope: !8507)
!8518 = !DILocation(line: 5797, column: 7, scope: !8519)
!8519 = distinct !DILexicalBlock(scope: !8507, file: !3, line: 5797, column: 7)
!8520 = !DILocation(line: 5797, column: 7, scope: !8521)
!8521 = distinct !DILexicalBlock(scope: !8519, file: !3, line: 5797, column: 7)
!8522 = !DILocation(line: 5799, column: 13, scope: !8523)
!8523 = distinct !DILexicalBlock(scope: !8521, file: !3, line: 5798, column: 2)
!8524 = !DILocation(line: 5799, column: 4, scope: !8523)
!8525 = !DILocation(line: 5800, column: 24, scope: !8523)
!8526 = !DILocation(line: 5800, column: 35, scope: !8523)
!8527 = !DILocation(line: 5800, column: 4, scope: !8523)
!8528 = !DILocation(line: 5801, column: 13, scope: !8523)
!8529 = !DILocation(line: 5801, column: 4, scope: !8523)
!8530 = !DILocation(line: 5802, column: 22, scope: !8523)
!8531 = !DILocation(line: 5802, column: 33, scope: !8523)
!8532 = !DILocation(line: 5802, column: 42, scope: !8523)
!8533 = !DILocation(line: 5802, column: 4, scope: !8523)
!8534 = !DILocation(line: 5803, column: 2, scope: !8523)
!8535 = distinct !{!8535, !8518, !8536}
!8536 = !DILocation(line: 5803, column: 2, scope: !8519)
!8537 = !DILocation(line: 5805, column: 16, scope: !8507)
!8538 = !DILocation(line: 5805, column: 7, scope: !8507)
!8539 = !DILocation(line: 5806, column: 5, scope: !8507)
!8540 = !DILocation(line: 5850, column: 7, scope: !8487)
!8541 = !DILocation(line: 5852, column: 68, scope: !8487)
!8542 = !DILocation(line: 5852, column: 50, scope: !8487)
!8543 = !DILocation(line: 5853, column: 25, scope: !8487)
!8544 = !DILocation(line: 5853, column: 8, scope: !8487)
!8545 = !DILocation(line: 5854, column: 25, scope: !8487)
!8546 = !DILocation(line: 5854, column: 8, scope: !8487)
!8547 = !DILocation(line: 5852, column: 9, scope: !8487)
!8548 = !DILocation(line: 5852, column: 7, scope: !8487)
!8549 = !DILocation(line: 5856, column: 7, scope: !8550)
!8550 = distinct !DILexicalBlock(scope: !8487, file: !3, line: 5856, column: 7)
!8551 = !DILocation(line: 5856, column: 7, scope: !8487)
!8552 = !DILocation(line: 5858, column: 12, scope: !8553)
!8553 = distinct !DILexicalBlock(scope: !8554, file: !3, line: 5858, column: 11)
!8554 = distinct !DILexicalBlock(scope: !8550, file: !3, line: 5857, column: 5)
!8555 = !DILocation(line: 5858, column: 11, scope: !8554)
!8556 = !DILocation(line: 5859, column: 46, scope: !8553)
!8557 = !DILocation(line: 5859, column: 35, scope: !8553)
!8558 = !DILocation(line: 5859, column: 53, scope: !8553)
!8559 = !DILocation(line: 5859, column: 18, scope: !8553)
!8560 = !DILocation(line: 5859, column: 3, scope: !8553)
!8561 = !DILocation(line: 5859, column: 16, scope: !8553)
!8562 = !DILocation(line: 5859, column: 2, scope: !8553)
!8563 = !DILocation(line: 5862, column: 8, scope: !8564)
!8564 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 5862, column: 8)
!8565 = distinct !DILexicalBlock(scope: !8553, file: !3, line: 5861, column: 2)
!8566 = !DILocation(line: 5862, column: 18, scope: !8564)
!8567 = !DILocation(line: 5862, column: 22, scope: !8564)
!8568 = !DILocation(line: 5862, column: 33, scope: !8564)
!8569 = !DILocation(line: 5862, column: 8, scope: !8565)
!8570 = !DILocation(line: 5863, column: 15, scope: !8564)
!8571 = !DILocation(line: 5863, column: 6, scope: !8564)
!8572 = !DILocation(line: 5866, column: 8, scope: !8565)
!8573 = !DILocation(line: 5868, column: 5, scope: !8554)
!8574 = !DILocation(line: 5870, column: 7, scope: !8575)
!8575 = distinct !DILexicalBlock(scope: !8487, file: !3, line: 5870, column: 7)
!8576 = !DILocation(line: 5870, column: 17, scope: !8575)
!8577 = !DILocation(line: 5870, column: 21, scope: !8575)
!8578 = !DILocation(line: 5870, column: 32, scope: !8575)
!8579 = !DILocation(line: 5870, column: 7, scope: !8487)
!8580 = !DILocation(line: 5872, column: 16, scope: !8581)
!8581 = distinct !DILexicalBlock(scope: !8575, file: !3, line: 5871, column: 5)
!8582 = !DILocation(line: 5872, column: 7, scope: !8581)
!8583 = !DILocation(line: 5873, column: 11, scope: !8584)
!8584 = distinct !DILexicalBlock(scope: !8581, file: !3, line: 5873, column: 11)
!8585 = !DILocation(line: 5873, column: 15, scope: !8584)
!8586 = !DILocation(line: 5873, column: 11, scope: !8581)
!8587 = !DILocation(line: 5874, column: 11, scope: !8584)
!8588 = !DILocation(line: 5874, column: 2, scope: !8584)
!8589 = !DILocation(line: 5876, column: 22, scope: !8584)
!8590 = !DILocation(line: 5876, column: 33, scope: !8584)
!8591 = !DILocation(line: 5876, column: 2, scope: !8584)
!8592 = !DILocation(line: 5877, column: 5, scope: !8581)
!8593 = !DILocation(line: 5879, column: 12, scope: !8487)
!8594 = !DILocation(line: 5879, column: 11, scope: !8487)
!8595 = !DILocation(line: 5879, column: 10, scope: !8487)
!8596 = !DILocation(line: 5879, column: 3, scope: !8487)
!8597 = distinct !DISubprogram(name: "vrp_visit_switch_stmt", scope: !3, file: !3, line: 6002, type: !8488, scopeLine: 6003, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8598 = !DILocalVariable(name: "stmt", arg: 1, scope: !8597, file: !3, line: 6002, type: !2076)
!8599 = !DILocation(line: 6002, column: 31, scope: !8597)
!8600 = !DILocalVariable(name: "taken_edge_p", arg: 2, scope: !8597, file: !3, line: 6002, type: !4871)
!8601 = !DILocation(line: 6002, column: 43, scope: !8597)
!8602 = !DILocalVariable(name: "op", scope: !8597, file: !3, line: 6004, type: !1747)
!8603 = !DILocation(line: 6004, column: 8, scope: !8597)
!8604 = !DILocalVariable(name: "val", scope: !8597, file: !3, line: 6004, type: !1747)
!8605 = !DILocation(line: 6004, column: 12, scope: !8597)
!8606 = !DILocalVariable(name: "vr", scope: !8597, file: !3, line: 6005, type: !1741)
!8607 = !DILocation(line: 6005, column: 18, scope: !8597)
!8608 = !DILocalVariable(name: "i", scope: !8597, file: !3, line: 6006, type: !2221)
!8609 = !DILocation(line: 6006, column: 10, scope: !8597)
!8610 = !DILocalVariable(name: "j", scope: !8597, file: !3, line: 6006, type: !2221)
!8611 = !DILocation(line: 6006, column: 17, scope: !8597)
!8612 = !DILocalVariable(name: "take_default", scope: !8597, file: !3, line: 6007, type: !1866)
!8613 = !DILocation(line: 6007, column: 8, scope: !8597)
!8614 = !DILocation(line: 6009, column: 4, scope: !8597)
!8615 = !DILocation(line: 6009, column: 17, scope: !8597)
!8616 = !DILocation(line: 6010, column: 29, scope: !8597)
!8617 = !DILocation(line: 6010, column: 8, scope: !8597)
!8618 = !DILocation(line: 6010, column: 6, scope: !8597)
!8619 = !DILocation(line: 6011, column: 7, scope: !8620)
!8620 = distinct !DILexicalBlock(scope: !8597, file: !3, line: 6011, column: 7)
!8621 = !DILocation(line: 6011, column: 22, scope: !8620)
!8622 = !DILocation(line: 6011, column: 7, scope: !8597)
!8623 = !DILocation(line: 6012, column: 5, scope: !8620)
!8624 = !DILocation(line: 6014, column: 25, scope: !8597)
!8625 = !DILocation(line: 6014, column: 8, scope: !8597)
!8626 = !DILocation(line: 6014, column: 6, scope: !8597)
!8627 = !DILocation(line: 6015, column: 7, scope: !8628)
!8628 = distinct !DILexicalBlock(scope: !8597, file: !3, line: 6015, column: 7)
!8629 = !DILocation(line: 6015, column: 17, scope: !8628)
!8630 = !DILocation(line: 6015, column: 21, scope: !8628)
!8631 = !DILocation(line: 6015, column: 32, scope: !8628)
!8632 = !DILocation(line: 6015, column: 7, scope: !8597)
!8633 = !DILocation(line: 6017, column: 16, scope: !8634)
!8634 = distinct !DILexicalBlock(scope: !8628, file: !3, line: 6016, column: 5)
!8635 = !DILocation(line: 6017, column: 7, scope: !8634)
!8636 = !DILocation(line: 6018, column: 27, scope: !8634)
!8637 = !DILocation(line: 6018, column: 38, scope: !8634)
!8638 = !DILocation(line: 6018, column: 7, scope: !8634)
!8639 = !DILocation(line: 6019, column: 16, scope: !8634)
!8640 = !DILocation(line: 6019, column: 7, scope: !8634)
!8641 = !DILocation(line: 6020, column: 25, scope: !8634)
!8642 = !DILocation(line: 6020, column: 36, scope: !8634)
!8643 = !DILocation(line: 6020, column: 7, scope: !8634)
!8644 = !DILocation(line: 6021, column: 16, scope: !8634)
!8645 = !DILocation(line: 6021, column: 7, scope: !8634)
!8646 = !DILocation(line: 6022, column: 5, scope: !8634)
!8647 = !DILocation(line: 6024, column: 7, scope: !8648)
!8648 = distinct !DILexicalBlock(scope: !8597, file: !3, line: 6024, column: 7)
!8649 = !DILocation(line: 6024, column: 11, scope: !8648)
!8650 = !DILocation(line: 6024, column: 16, scope: !8648)
!8651 = !DILocation(line: 6025, column: 7, scope: !8648)
!8652 = !DILocation(line: 6025, column: 28, scope: !8648)
!8653 = !DILocation(line: 6025, column: 10, scope: !8648)
!8654 = !DILocation(line: 6024, column: 7, scope: !8597)
!8655 = !DILocation(line: 6026, column: 5, scope: !8648)
!8656 = !DILocation(line: 6029, column: 42, scope: !8597)
!8657 = !DILocation(line: 6029, column: 48, scope: !8597)
!8658 = !DILocation(line: 6029, column: 52, scope: !8597)
!8659 = !DILocation(line: 6029, column: 57, scope: !8597)
!8660 = !DILocation(line: 6029, column: 61, scope: !8597)
!8661 = !DILocation(line: 6029, column: 19, scope: !8597)
!8662 = !DILocation(line: 6029, column: 18, scope: !8597)
!8663 = !DILocation(line: 6029, column: 16, scope: !8597)
!8664 = !DILocation(line: 6033, column: 7, scope: !8665)
!8665 = distinct !DILexicalBlock(scope: !8597, file: !3, line: 6033, column: 7)
!8666 = !DILocation(line: 6033, column: 11, scope: !8665)
!8667 = !DILocation(line: 6033, column: 9, scope: !8665)
!8668 = !DILocation(line: 6033, column: 7, scope: !8597)
!8669 = !DILocation(line: 6035, column: 7, scope: !8670)
!8670 = distinct !DILexicalBlock(scope: !8665, file: !3, line: 6034, column: 5)
!8671 = !DILocation(line: 6036, column: 42, scope: !8670)
!8672 = !DILocation(line: 6036, column: 13, scope: !8670)
!8673 = !DILocation(line: 6036, column: 11, scope: !8670)
!8674 = !DILocation(line: 6037, column: 5, scope: !8670)
!8675 = !DILocation(line: 6043, column: 34, scope: !8676)
!8676 = distinct !DILexicalBlock(scope: !8665, file: !3, line: 6039, column: 5)
!8677 = !DILocation(line: 6043, column: 40, scope: !8676)
!8678 = !DILocation(line: 6043, column: 13, scope: !8676)
!8679 = !DILocation(line: 6043, column: 11, scope: !8676)
!8680 = !DILocation(line: 6044, column: 11, scope: !8681)
!8681 = distinct !DILexicalBlock(scope: !8676, file: !3, line: 6044, column: 11)
!8682 = !DILocation(line: 6045, column: 4, scope: !8681)
!8683 = !DILocation(line: 6045, column: 7, scope: !8681)
!8684 = !DILocation(line: 6046, column: 7, scope: !8681)
!8685 = !DILocation(line: 6046, column: 4, scope: !8681)
!8686 = !DILocation(line: 6044, column: 11, scope: !8676)
!8687 = !DILocation(line: 6048, column: 8, scope: !8688)
!8688 = distinct !DILexicalBlock(scope: !8689, file: !3, line: 6048, column: 8)
!8689 = distinct !DILexicalBlock(scope: !8681, file: !3, line: 6047, column: 2)
!8690 = !DILocation(line: 6048, column: 18, scope: !8688)
!8691 = !DILocation(line: 6048, column: 22, scope: !8688)
!8692 = !DILocation(line: 6048, column: 33, scope: !8688)
!8693 = !DILocation(line: 6048, column: 8, scope: !8689)
!8694 = !DILocation(line: 6049, column: 15, scope: !8688)
!8695 = !DILocation(line: 6049, column: 6, scope: !8688)
!8696 = !DILocation(line: 6051, column: 11, scope: !8689)
!8697 = !DILocation(line: 6053, column: 12, scope: !8698)
!8698 = distinct !DILexicalBlock(scope: !8676, file: !3, line: 6053, column: 7)
!8699 = !DILocation(line: 6053, column: 17, scope: !8700)
!8700 = distinct !DILexicalBlock(scope: !8698, file: !3, line: 6053, column: 7)
!8701 = !DILocation(line: 6053, column: 22, scope: !8700)
!8702 = !DILocation(line: 6053, column: 19, scope: !8700)
!8703 = !DILocation(line: 6053, column: 7, scope: !8698)
!8704 = !DILocation(line: 6055, column: 15, scope: !8705)
!8705 = distinct !DILexicalBlock(scope: !8706, file: !3, line: 6055, column: 15)
!8706 = distinct !DILexicalBlock(scope: !8700, file: !3, line: 6054, column: 9)
!8707 = !DILocation(line: 6055, column: 61, scope: !8705)
!8708 = !DILocation(line: 6055, column: 58, scope: !8705)
!8709 = !DILocation(line: 6055, column: 15, scope: !8706)
!8710 = !DILocation(line: 6057, column: 12, scope: !8711)
!8711 = distinct !DILexicalBlock(scope: !8712, file: !3, line: 6057, column: 12)
!8712 = distinct !DILexicalBlock(scope: !8705, file: !3, line: 6056, column: 6)
!8713 = !DILocation(line: 6057, column: 22, scope: !8711)
!8714 = !DILocation(line: 6057, column: 26, scope: !8711)
!8715 = !DILocation(line: 6057, column: 37, scope: !8711)
!8716 = !DILocation(line: 6057, column: 12, scope: !8712)
!8717 = !DILocation(line: 6058, column: 12, scope: !8711)
!8718 = !DILocation(line: 6058, column: 3, scope: !8711)
!8719 = !DILocation(line: 6060, column: 8, scope: !8712)
!8720 = !DILocation(line: 6062, column: 9, scope: !8706)
!8721 = !DILocation(line: 6053, column: 25, scope: !8700)
!8722 = !DILocation(line: 6053, column: 7, scope: !8700)
!8723 = distinct !{!8723, !8703, !8724}
!8724 = !DILocation(line: 6062, column: 9, scope: !8698)
!8725 = !DILocation(line: 6065, column: 41, scope: !8597)
!8726 = !DILocation(line: 6065, column: 30, scope: !8597)
!8727 = !DILocation(line: 6066, column: 9, scope: !8597)
!8728 = !DILocation(line: 6065, column: 19, scope: !8597)
!8729 = !DILocation(line: 6065, column: 4, scope: !8597)
!8730 = !DILocation(line: 6065, column: 17, scope: !8597)
!8731 = !DILocation(line: 6068, column: 7, scope: !8732)
!8732 = distinct !DILexicalBlock(scope: !8597, file: !3, line: 6068, column: 7)
!8733 = !DILocation(line: 6068, column: 17, scope: !8732)
!8734 = !DILocation(line: 6068, column: 21, scope: !8732)
!8735 = !DILocation(line: 6068, column: 32, scope: !8732)
!8736 = !DILocation(line: 6068, column: 7, scope: !8597)
!8737 = !DILocation(line: 6070, column: 16, scope: !8738)
!8738 = distinct !DILexicalBlock(scope: !8732, file: !3, line: 6069, column: 5)
!8739 = !DILocation(line: 6070, column: 7, scope: !8738)
!8740 = !DILocation(line: 6071, column: 27, scope: !8738)
!8741 = !DILocation(line: 6071, column: 38, scope: !8738)
!8742 = !DILocation(line: 6071, column: 7, scope: !8738)
!8743 = !DILocation(line: 6072, column: 5, scope: !8738)
!8744 = !DILocation(line: 6074, column: 3, scope: !8597)
!8745 = !DILocation(line: 6075, column: 1, scope: !8597)
!8746 = distinct !DISubprogram(name: "extract_range_basic", scope: !3, file: !3, line: 3090, type: !8747, scopeLine: 3091, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8747 = !DISubroutineType(types: !8748)
!8748 = !{null, !1741, !2076}
!8749 = !DILocalVariable(name: "vr", arg: 1, scope: !8746, file: !3, line: 3090, type: !1741)
!8750 = !DILocation(line: 3090, column: 37, scope: !8746)
!8751 = !DILocalVariable(name: "stmt", arg: 2, scope: !8746, file: !3, line: 3090, type: !2076)
!8752 = !DILocation(line: 3090, column: 48, scope: !8746)
!8753 = !DILocalVariable(name: "sop", scope: !8746, file: !3, line: 3092, type: !1866)
!8754 = !DILocation(line: 3092, column: 8, scope: !8746)
!8755 = !DILocalVariable(name: "type", scope: !8746, file: !3, line: 3093, type: !1747)
!8756 = !DILocation(line: 3093, column: 8, scope: !8746)
!8757 = !DILocation(line: 3093, column: 33, scope: !8746)
!8758 = !DILocation(line: 3093, column: 15, scope: !8746)
!8759 = !DILocation(line: 3095, column: 7, scope: !8760)
!8760 = distinct !DILexicalBlock(scope: !8746, file: !3, line: 3095, column: 7)
!8761 = !DILocation(line: 3096, column: 7, scope: !8760)
!8762 = !DILocation(line: 3096, column: 43, scope: !8760)
!8763 = !DILocation(line: 3096, column: 10, scope: !8760)
!8764 = !DILocation(line: 3095, column: 7, scope: !8746)
!8765 = !DILocation(line: 3097, column: 37, scope: !8760)
!8766 = !DILocation(line: 3097, column: 41, scope: !8760)
!8767 = !DILocation(line: 3098, column: 9, scope: !8760)
!8768 = !DILocation(line: 3098, column: 13, scope: !8760)
!8769 = !DILocation(line: 3098, column: 40, scope: !8760)
!8770 = !DILocation(line: 3098, column: 16, scope: !8760)
!8771 = !DILocation(line: 3097, column: 5, scope: !8760)
!8772 = !DILocation(line: 3099, column: 39, scope: !8773)
!8773 = distinct !DILexicalBlock(scope: !8760, file: !3, line: 3099, column: 12)
!8774 = !DILocation(line: 3099, column: 12, scope: !8773)
!8775 = !DILocation(line: 3100, column: 5, scope: !8773)
!8776 = !DILocation(line: 3100, column: 9, scope: !8773)
!8777 = !DILocation(line: 3099, column: 12, scope: !8760)
!8778 = !DILocation(line: 3101, column: 33, scope: !8773)
!8779 = !DILocation(line: 3101, column: 37, scope: !8773)
!8780 = !DILocation(line: 3101, column: 5, scope: !8773)
!8781 = !DILocation(line: 3103, column: 33, scope: !8773)
!8782 = !DILocation(line: 3103, column: 5, scope: !8773)
!8783 = !DILocation(line: 3104, column: 1, scope: !8746)
!8784 = distinct !DISubprogram(name: "extract_range_from_assignment", scope: !3, file: !3, line: 3111, type: !8747, scopeLine: 3112, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8785 = !DILocalVariable(name: "vr", arg: 1, scope: !8784, file: !3, line: 3111, type: !1741)
!8786 = !DILocation(line: 3111, column: 47, scope: !8784)
!8787 = !DILocalVariable(name: "stmt", arg: 2, scope: !8784, file: !3, line: 3111, type: !2076)
!8788 = !DILocation(line: 3111, column: 58, scope: !8784)
!8789 = !DILocalVariable(name: "code", scope: !8784, file: !3, line: 3113, type: !134)
!8790 = !DILocation(line: 3113, column: 18, scope: !8784)
!8791 = !DILocation(line: 3113, column: 49, scope: !8784)
!8792 = !DILocation(line: 3113, column: 25, scope: !8784)
!8793 = !DILocation(line: 3115, column: 7, scope: !8794)
!8794 = distinct !DILexicalBlock(scope: !8784, file: !3, line: 3115, column: 7)
!8795 = !DILocation(line: 3115, column: 12, scope: !8794)
!8796 = !DILocation(line: 3115, column: 7, scope: !8784)
!8797 = !DILocation(line: 3116, column: 32, scope: !8794)
!8798 = !DILocation(line: 3116, column: 56, scope: !8794)
!8799 = !DILocation(line: 3116, column: 36, scope: !8794)
!8800 = !DILocation(line: 3116, column: 5, scope: !8794)
!8801 = !DILocation(line: 3117, column: 12, scope: !8802)
!8802 = distinct !DILexicalBlock(scope: !8794, file: !3, line: 3117, column: 12)
!8803 = !DILocation(line: 3117, column: 17, scope: !8802)
!8804 = !DILocation(line: 3117, column: 12, scope: !8794)
!8805 = !DILocation(line: 3118, column: 34, scope: !8802)
!8806 = !DILocation(line: 3118, column: 58, scope: !8802)
!8807 = !DILocation(line: 3118, column: 38, scope: !8802)
!8808 = !DILocation(line: 3118, column: 5, scope: !8802)
!8809 = !DILocation(line: 3119, column: 12, scope: !8810)
!8810 = distinct !DILexicalBlock(scope: !8802, file: !3, line: 3119, column: 12)
!8811 = !DILocation(line: 3119, column: 35, scope: !8810)
!8812 = !DILocation(line: 3120, column: 5, scope: !8810)
!8813 = !DILocation(line: 3120, column: 8, scope: !8810)
!8814 = !DILocation(line: 3120, column: 13, scope: !8810)
!8815 = !DILocation(line: 3121, column: 5, scope: !8810)
!8816 = !DILocation(line: 3121, column: 8, scope: !8810)
!8817 = !DILocation(line: 3121, column: 13, scope: !8810)
!8818 = !DILocation(line: 3122, column: 5, scope: !8810)
!8819 = !DILocation(line: 3122, column: 8, scope: !8810)
!8820 = !DILocation(line: 3122, column: 13, scope: !8810)
!8821 = !DILocation(line: 3119, column: 12, scope: !8802)
!8822 = !DILocation(line: 3123, column: 37, scope: !8810)
!8823 = !DILocation(line: 3123, column: 65, scope: !8810)
!8824 = !DILocation(line: 3123, column: 41, scope: !8810)
!8825 = !DILocation(line: 3124, column: 27, scope: !8810)
!8826 = !DILocation(line: 3124, column: 9, scope: !8810)
!8827 = !DILocation(line: 3125, column: 29, scope: !8810)
!8828 = !DILocation(line: 3125, column: 9, scope: !8810)
!8829 = !DILocation(line: 3126, column: 29, scope: !8810)
!8830 = !DILocation(line: 3126, column: 9, scope: !8810)
!8831 = !DILocation(line: 3123, column: 5, scope: !8810)
!8832 = !DILocation(line: 3127, column: 12, scope: !8833)
!8833 = distinct !DILexicalBlock(scope: !8810, file: !3, line: 3127, column: 12)
!8834 = !DILocation(line: 3127, column: 35, scope: !8833)
!8835 = !DILocation(line: 3127, column: 12, scope: !8810)
!8836 = !DILocation(line: 3128, column: 36, scope: !8833)
!8837 = !DILocation(line: 3128, column: 64, scope: !8833)
!8838 = !DILocation(line: 3128, column: 40, scope: !8833)
!8839 = !DILocation(line: 3129, column: 26, scope: !8833)
!8840 = !DILocation(line: 3129, column: 8, scope: !8833)
!8841 = !DILocation(line: 3130, column: 28, scope: !8833)
!8842 = !DILocation(line: 3130, column: 8, scope: !8833)
!8843 = !DILocation(line: 3128, column: 5, scope: !8833)
!8844 = !DILocation(line: 3131, column: 12, scope: !8845)
!8845 = distinct !DILexicalBlock(scope: !8833, file: !3, line: 3131, column: 12)
!8846 = !DILocation(line: 3131, column: 17, scope: !8845)
!8847 = !DILocation(line: 3131, column: 12, scope: !8833)
!8848 = !DILocation(line: 3132, column: 35, scope: !8845)
!8849 = !DILocation(line: 3132, column: 59, scope: !8845)
!8850 = !DILocation(line: 3132, column: 39, scope: !8845)
!8851 = !DILocation(line: 3132, column: 5, scope: !8845)
!8852 = !DILocation(line: 3133, column: 12, scope: !8853)
!8853 = distinct !DILexicalBlock(scope: !8845, file: !3, line: 3133, column: 12)
!8854 = !DILocation(line: 3133, column: 35, scope: !8853)
!8855 = !DILocation(line: 3133, column: 12, scope: !8845)
!8856 = !DILocation(line: 3134, column: 36, scope: !8853)
!8857 = !DILocation(line: 3134, column: 64, scope: !8853)
!8858 = !DILocation(line: 3134, column: 40, scope: !8853)
!8859 = !DILocation(line: 3135, column: 26, scope: !8853)
!8860 = !DILocation(line: 3135, column: 8, scope: !8853)
!8861 = !DILocation(line: 3136, column: 28, scope: !8853)
!8862 = !DILocation(line: 3136, column: 8, scope: !8853)
!8863 = !DILocation(line: 3137, column: 28, scope: !8853)
!8864 = !DILocation(line: 3137, column: 8, scope: !8853)
!8865 = !DILocation(line: 3134, column: 5, scope: !8853)
!8866 = !DILocation(line: 3138, column: 34, scope: !8867)
!8867 = distinct !DILexicalBlock(scope: !8853, file: !3, line: 3138, column: 12)
!8868 = !DILocation(line: 3138, column: 12, scope: !8867)
!8869 = !DILocation(line: 3138, column: 40, scope: !8867)
!8870 = !DILocation(line: 3139, column: 5, scope: !8867)
!8871 = !DILocation(line: 3139, column: 53, scope: !8867)
!8872 = !DILocation(line: 3139, column: 33, scope: !8867)
!8873 = !DILocation(line: 3139, column: 8, scope: !8867)
!8874 = !DILocation(line: 3138, column: 12, scope: !8853)
!8875 = !DILocation(line: 3140, column: 31, scope: !8867)
!8876 = !DILocation(line: 3140, column: 55, scope: !8867)
!8877 = !DILocation(line: 3140, column: 35, scope: !8867)
!8878 = !DILocation(line: 3140, column: 5, scope: !8867)
!8879 = !DILocation(line: 3142, column: 33, scope: !8867)
!8880 = !DILocation(line: 3142, column: 5, scope: !8867)
!8881 = !DILocation(line: 3144, column: 7, scope: !8882)
!8882 = distinct !DILexicalBlock(scope: !8784, file: !3, line: 3144, column: 7)
!8883 = !DILocation(line: 3144, column: 11, scope: !8882)
!8884 = !DILocation(line: 3144, column: 16, scope: !8882)
!8885 = !DILocation(line: 3144, column: 7, scope: !8784)
!8886 = !DILocation(line: 3145, column: 26, scope: !8882)
!8887 = !DILocation(line: 3145, column: 30, scope: !8882)
!8888 = !DILocation(line: 3145, column: 5, scope: !8882)
!8889 = !DILocation(line: 3146, column: 1, scope: !8784)
!8890 = distinct !DISubprogram(name: "update_value_range", scope: !3, file: !3, line: 707, type: !8891, scopeLine: 708, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8891 = !DISubroutineType(types: !8892)
!8892 = !{!1866, !3139, !1741}
!8893 = !DILocalVariable(name: "var", arg: 1, scope: !8890, file: !3, line: 707, type: !3139)
!8894 = !DILocation(line: 707, column: 32, scope: !8890)
!8895 = !DILocalVariable(name: "new_vr", arg: 2, scope: !8890, file: !3, line: 707, type: !1741)
!8896 = !DILocation(line: 707, column: 52, scope: !8890)
!8897 = !DILocalVariable(name: "old_vr", scope: !8890, file: !3, line: 709, type: !1741)
!8898 = !DILocation(line: 709, column: 18, scope: !8890)
!8899 = !DILocalVariable(name: "is_new", scope: !8890, file: !3, line: 710, type: !1866)
!8900 = !DILocation(line: 710, column: 8, scope: !8890)
!8901 = !DILocation(line: 713, column: 29, scope: !8890)
!8902 = !DILocation(line: 713, column: 12, scope: !8890)
!8903 = !DILocation(line: 713, column: 10, scope: !8890)
!8904 = !DILocation(line: 714, column: 12, scope: !8890)
!8905 = !DILocation(line: 714, column: 20, scope: !8890)
!8906 = !DILocation(line: 714, column: 28, scope: !8890)
!8907 = !DILocation(line: 714, column: 36, scope: !8890)
!8908 = !DILocation(line: 714, column: 25, scope: !8890)
!8909 = !DILocation(line: 715, column: 5, scope: !8890)
!8910 = !DILocation(line: 715, column: 30, scope: !8890)
!8911 = !DILocation(line: 715, column: 38, scope: !8890)
!8912 = !DILocation(line: 715, column: 43, scope: !8890)
!8913 = !DILocation(line: 715, column: 51, scope: !8890)
!8914 = !DILocation(line: 715, column: 9, scope: !8890)
!8915 = !DILocation(line: 716, column: 5, scope: !8890)
!8916 = !DILocation(line: 716, column: 30, scope: !8890)
!8917 = !DILocation(line: 716, column: 38, scope: !8890)
!8918 = !DILocation(line: 716, column: 43, scope: !8890)
!8919 = !DILocation(line: 716, column: 51, scope: !8890)
!8920 = !DILocation(line: 716, column: 9, scope: !8890)
!8921 = !DILocation(line: 717, column: 5, scope: !8890)
!8922 = !DILocation(line: 717, column: 29, scope: !8890)
!8923 = !DILocation(line: 717, column: 37, scope: !8890)
!8924 = !DILocation(line: 717, column: 44, scope: !8890)
!8925 = !DILocation(line: 717, column: 52, scope: !8890)
!8926 = !DILocation(line: 717, column: 9, scope: !8890)
!8927 = !DILocation(line: 717, column: 8, scope: !8890)
!8928 = !DILocation(line: 714, column: 10, scope: !8890)
!8929 = !DILocation(line: 719, column: 7, scope: !8930)
!8930 = distinct !DILexicalBlock(scope: !8890, file: !3, line: 719, column: 7)
!8931 = !DILocation(line: 719, column: 7, scope: !8890)
!8932 = !DILocation(line: 720, column: 22, scope: !8930)
!8933 = !DILocation(line: 720, column: 30, scope: !8930)
!8934 = !DILocation(line: 720, column: 38, scope: !8930)
!8935 = !DILocation(line: 720, column: 44, scope: !8930)
!8936 = !DILocation(line: 720, column: 52, scope: !8930)
!8937 = !DILocation(line: 720, column: 57, scope: !8930)
!8938 = !DILocation(line: 720, column: 65, scope: !8930)
!8939 = !DILocation(line: 721, column: 15, scope: !8930)
!8940 = !DILocation(line: 721, column: 23, scope: !8930)
!8941 = !DILocation(line: 720, column: 5, scope: !8930)
!8942 = !DILocation(line: 723, column: 3, scope: !8890)
!8943 = !DILocation(line: 725, column: 10, scope: !8890)
!8944 = !DILocation(line: 725, column: 3, scope: !8890)
!8945 = distinct !DISubprogram(name: "gimple_stmt_nonnegative_warnv_p", scope: !3, file: !3, line: 885, type: !8946, scopeLine: 886, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8946 = !DISubroutineType(types: !8947)
!8947 = !{!1866, !2076, !3130}
!8948 = !DILocalVariable(name: "stmt", arg: 1, scope: !8945, file: !3, line: 885, type: !2076)
!8949 = !DILocation(line: 885, column: 41, scope: !8945)
!8950 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !8945, file: !3, line: 885, type: !3130)
!8951 = !DILocation(line: 885, column: 53, scope: !8945)
!8952 = !DILocation(line: 887, column: 24, scope: !8945)
!8953 = !DILocation(line: 887, column: 11, scope: !8945)
!8954 = !DILocation(line: 887, column: 3, scope: !8945)
!8955 = !DILocation(line: 890, column: 49, scope: !8956)
!8956 = distinct !DILexicalBlock(scope: !8945, file: !3, line: 888, column: 5)
!8957 = !DILocation(line: 890, column: 55, scope: !8956)
!8958 = !DILocation(line: 890, column: 14, scope: !8956)
!8959 = !DILocation(line: 890, column: 7, scope: !8956)
!8960 = !DILocation(line: 892, column: 47, scope: !8956)
!8961 = !DILocation(line: 892, column: 53, scope: !8956)
!8962 = !DILocation(line: 892, column: 14, scope: !8956)
!8963 = !DILocation(line: 892, column: 7, scope: !8956)
!8964 = !DILocation(line: 894, column: 7, scope: !8956)
!8965 = !DILocation(line: 895, column: 5, scope: !8956)
!8966 = !DILocation(line: 897, column: 5, scope: !8945)
!8967 = !DILocation(line: 899, column: 1, scope: !8945)
!8968 = distinct !DISubprogram(name: "set_value_range_to_nonnegative", scope: !3, file: !3, line: 527, type: !8969, scopeLine: 529, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!8969 = !DISubroutineType(types: !8970)
!8970 = !{null, !1741, !1747, !1866}
!8971 = !DILocalVariable(name: "vr", arg: 1, scope: !8968, file: !3, line: 527, type: !1741)
!8972 = !DILocation(line: 527, column: 48, scope: !8968)
!8973 = !DILocalVariable(name: "type", arg: 2, scope: !8968, file: !3, line: 527, type: !1747)
!8974 = !DILocation(line: 527, column: 57, scope: !8968)
!8975 = !DILocalVariable(name: "overflow_infinity", arg: 3, scope: !8968, file: !3, line: 528, type: !1866)
!8976 = !DILocation(line: 528, column: 10, scope: !8968)
!8977 = !DILocalVariable(name: "zero", scope: !8968, file: !3, line: 530, type: !1747)
!8978 = !DILocation(line: 530, column: 8, scope: !8968)
!8979 = !DILocation(line: 532, column: 7, scope: !8980)
!8980 = distinct !DILexicalBlock(scope: !8968, file: !3, line: 532, column: 7)
!8981 = !DILocation(line: 532, column: 25, scope: !8980)
!8982 = !DILocation(line: 532, column: 57, scope: !8980)
!8983 = !DILocation(line: 532, column: 29, scope: !8980)
!8984 = !DILocation(line: 532, column: 7, scope: !8968)
!8985 = !DILocation(line: 534, column: 35, scope: !8986)
!8986 = distinct !DILexicalBlock(scope: !8980, file: !3, line: 533, column: 5)
!8987 = !DILocation(line: 534, column: 7, scope: !8986)
!8988 = !DILocation(line: 535, column: 7, scope: !8986)
!8989 = !DILocation(line: 538, column: 25, scope: !8968)
!8990 = !DILocation(line: 538, column: 10, scope: !8968)
!8991 = !DILocation(line: 538, column: 8, scope: !8968)
!8992 = !DILocation(line: 539, column: 20, scope: !8968)
!8993 = !DILocation(line: 539, column: 34, scope: !8968)
!8994 = !DILocation(line: 540, column: 7, scope: !8968)
!8995 = !DILocation(line: 541, column: 37, scope: !8968)
!8996 = !DILocation(line: 541, column: 9, scope: !8968)
!8997 = !DILocation(line: 542, column: 9, scope: !8968)
!8998 = !DILocation(line: 543, column: 6, scope: !8968)
!8999 = !DILocation(line: 543, column: 10, scope: !8968)
!9000 = !DILocation(line: 539, column: 3, scope: !8968)
!9001 = !DILocation(line: 544, column: 1, scope: !8968)
!9002 = distinct !DISubprogram(name: "stmt_overflow_infinity", scope: !3, file: !3, line: 278, type: !6087, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9003 = !DILocalVariable(name: "stmt", arg: 1, scope: !9002, file: !3, line: 278, type: !2076)
!9004 = !DILocation(line: 278, column: 32, scope: !9002)
!9005 = !DILocation(line: 280, column: 25, scope: !9006)
!9006 = distinct !DILexicalBlock(scope: !9002, file: !3, line: 280, column: 7)
!9007 = !DILocation(line: 280, column: 7, scope: !9006)
!9008 = !DILocation(line: 281, column: 7, scope: !9006)
!9009 = !DILocation(line: 281, column: 56, scope: !9006)
!9010 = !DILocation(line: 281, column: 32, scope: !9006)
!9011 = !DILocation(line: 281, column: 10, scope: !9006)
!9012 = !DILocation(line: 281, column: 63, scope: !9006)
!9013 = !DILocation(line: 280, column: 7, scope: !9002)
!9014 = !DILocation(line: 283, column: 54, scope: !9006)
!9015 = !DILocation(line: 283, column: 34, scope: !9006)
!9016 = !DILocation(line: 283, column: 12, scope: !9006)
!9017 = !DILocation(line: 283, column: 5, scope: !9006)
!9018 = !DILocation(line: 284, column: 3, scope: !9002)
!9019 = !DILocation(line: 285, column: 1, scope: !9002)
!9020 = distinct !DISubprogram(name: "vrp_stmt_computes_nonzero", scope: !3, file: !3, line: 962, type: !8946, scopeLine: 963, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9021 = !DILocalVariable(name: "stmt", arg: 1, scope: !9020, file: !3, line: 962, type: !2076)
!9022 = !DILocation(line: 962, column: 35, scope: !9020)
!9023 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !9020, file: !3, line: 962, type: !3130)
!9024 = !DILocation(line: 962, column: 47, scope: !9020)
!9025 = !DILocation(line: 964, column: 36, scope: !9026)
!9026 = distinct !DILexicalBlock(scope: !9020, file: !3, line: 964, column: 7)
!9027 = !DILocation(line: 964, column: 42, scope: !9026)
!9028 = !DILocation(line: 964, column: 7, scope: !9026)
!9029 = !DILocation(line: 964, column: 7, scope: !9020)
!9030 = !DILocation(line: 965, column: 5, scope: !9026)
!9031 = !DILocation(line: 969, column: 25, scope: !9032)
!9032 = distinct !DILexicalBlock(scope: !9020, file: !3, line: 969, column: 7)
!9033 = !DILocation(line: 969, column: 7, scope: !9032)
!9034 = !DILocation(line: 970, column: 7, scope: !9032)
!9035 = !DILocation(line: 970, column: 34, scope: !9032)
!9036 = !DILocation(line: 970, column: 10, scope: !9032)
!9037 = !DILocation(line: 970, column: 40, scope: !9032)
!9038 = !DILocation(line: 969, column: 7, scope: !9020)
!9039 = !DILocalVariable(name: "expr", scope: !9040, file: !3, line: 972, type: !1747)
!9040 = distinct !DILexicalBlock(scope: !9032, file: !3, line: 971, column: 5)
!9041 = !DILocation(line: 972, column: 12, scope: !9040)
!9042 = !DILocation(line: 972, column: 39, scope: !9040)
!9043 = !DILocation(line: 972, column: 19, scope: !9040)
!9044 = !DILocalVariable(name: "base", scope: !9040, file: !3, line: 973, type: !1747)
!9045 = !DILocation(line: 973, column: 12, scope: !9040)
!9046 = !DILocation(line: 973, column: 37, scope: !9040)
!9047 = !DILocation(line: 973, column: 19, scope: !9040)
!9048 = !DILocation(line: 975, column: 11, scope: !9049)
!9049 = distinct !DILexicalBlock(scope: !9040, file: !3, line: 975, column: 11)
!9050 = !DILocation(line: 975, column: 16, scope: !9049)
!9051 = !DILocation(line: 976, column: 4, scope: !9049)
!9052 = !DILocation(line: 976, column: 7, scope: !9049)
!9053 = !DILocation(line: 976, column: 24, scope: !9049)
!9054 = !DILocation(line: 977, column: 4, scope: !9049)
!9055 = !DILocation(line: 977, column: 7, scope: !9049)
!9056 = !DILocation(line: 977, column: 42, scope: !9049)
!9057 = !DILocation(line: 975, column: 11, scope: !9040)
!9058 = !DILocalVariable(name: "vr", scope: !9059, file: !3, line: 979, type: !1741)
!9059 = distinct !DILexicalBlock(scope: !9049, file: !3, line: 978, column: 2)
!9060 = !DILocation(line: 979, column: 19, scope: !9059)
!9061 = !DILocation(line: 979, column: 41, scope: !9059)
!9062 = !DILocation(line: 979, column: 24, scope: !9059)
!9063 = !DILocation(line: 980, column: 26, scope: !9064)
!9064 = distinct !DILexicalBlock(scope: !9059, file: !3, line: 980, column: 8)
!9065 = !DILocation(line: 980, column: 8, scope: !9064)
!9066 = !DILocation(line: 980, column: 8, scope: !9059)
!9067 = !DILocation(line: 981, column: 6, scope: !9064)
!9068 = !DILocation(line: 982, column: 2, scope: !9059)
!9069 = !DILocation(line: 983, column: 5, scope: !9040)
!9070 = !DILocation(line: 985, column: 3, scope: !9020)
!9071 = !DILocation(line: 986, column: 1, scope: !9020)
!9072 = distinct !DISubprogram(name: "gimple_assign_nonnegative_warnv_p", scope: !3, file: !3, line: 830, type: !8946, scopeLine: 831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9073 = !DILocalVariable(name: "stmt", arg: 1, scope: !9072, file: !3, line: 830, type: !2076)
!9074 = !DILocation(line: 830, column: 43, scope: !9072)
!9075 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !9072, file: !3, line: 830, type: !3130)
!9076 = !DILocation(line: 830, column: 55, scope: !9072)
!9077 = !DILocalVariable(name: "code", scope: !9072, file: !3, line: 832, type: !134)
!9078 = !DILocation(line: 832, column: 18, scope: !9072)
!9079 = !DILocation(line: 832, column: 49, scope: !9072)
!9080 = !DILocation(line: 832, column: 25, scope: !9072)
!9081 = !DILocation(line: 833, column: 33, scope: !9072)
!9082 = !DILocation(line: 833, column: 11, scope: !9072)
!9083 = !DILocation(line: 833, column: 3, scope: !9072)
!9084 = !DILocation(line: 836, column: 70, scope: !9085)
!9085 = distinct !DILexicalBlock(scope: !9072, file: !3, line: 834, column: 5)
!9086 = !DILocation(line: 836, column: 46, scope: !9085)
!9087 = !DILocation(line: 837, column: 29, scope: !9085)
!9088 = !DILocation(line: 837, column: 11, scope: !9085)
!9089 = !DILocation(line: 838, column: 31, scope: !9085)
!9090 = !DILocation(line: 838, column: 11, scope: !9085)
!9091 = !DILocation(line: 839, column: 11, scope: !9085)
!9092 = !DILocation(line: 836, column: 14, scope: !9085)
!9093 = !DILocation(line: 836, column: 7, scope: !9085)
!9094 = !DILocation(line: 841, column: 71, scope: !9085)
!9095 = !DILocation(line: 841, column: 47, scope: !9085)
!9096 = !DILocation(line: 842, column: 30, scope: !9085)
!9097 = !DILocation(line: 842, column: 12, scope: !9085)
!9098 = !DILocation(line: 843, column: 32, scope: !9085)
!9099 = !DILocation(line: 843, column: 12, scope: !9085)
!9100 = !DILocation(line: 844, column: 32, scope: !9085)
!9101 = !DILocation(line: 844, column: 12, scope: !9085)
!9102 = !DILocation(line: 845, column: 12, scope: !9085)
!9103 = !DILocation(line: 841, column: 14, scope: !9085)
!9104 = !DILocation(line: 841, column: 7, scope: !9085)
!9105 = !DILocation(line: 847, column: 67, scope: !9085)
!9106 = !DILocation(line: 847, column: 47, scope: !9085)
!9107 = !DILocation(line: 848, column: 12, scope: !9085)
!9108 = !DILocation(line: 847, column: 14, scope: !9085)
!9109 = !DILocation(line: 847, column: 7, scope: !9085)
!9110 = !DILocation(line: 850, column: 7, scope: !9085)
!9111 = !DILocation(line: 852, column: 7, scope: !9085)
!9112 = !DILocation(line: 853, column: 5, scope: !9085)
!9113 = !DILocation(line: 855, column: 5, scope: !9072)
!9114 = !DILocation(line: 857, column: 1, scope: !9072)
!9115 = distinct !DISubprogram(name: "gimple_call_nonnegative_warnv_p", scope: !3, file: !3, line: 865, type: !8946, scopeLine: 866, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9116 = !DILocalVariable(name: "stmt", arg: 1, scope: !9115, file: !3, line: 865, type: !2076)
!9117 = !DILocation(line: 865, column: 41, scope: !9115)
!9118 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !9115, file: !3, line: 865, type: !3130)
!9119 = !DILocation(line: 865, column: 53, scope: !9115)
!9120 = !DILocalVariable(name: "arg0", scope: !9115, file: !3, line: 867, type: !1747)
!9121 = !DILocation(line: 867, column: 8, scope: !9115)
!9122 = !DILocation(line: 867, column: 37, scope: !9115)
!9123 = !DILocation(line: 867, column: 15, scope: !9115)
!9124 = !DILocation(line: 867, column: 43, scope: !9115)
!9125 = !DILocation(line: 868, column: 22, scope: !9115)
!9126 = !DILocation(line: 868, column: 5, scope: !9115)
!9127 = !DILocalVariable(name: "arg1", scope: !9115, file: !3, line: 869, type: !1747)
!9128 = !DILocation(line: 869, column: 8, scope: !9115)
!9129 = !DILocation(line: 869, column: 37, scope: !9115)
!9130 = !DILocation(line: 869, column: 15, scope: !9115)
!9131 = !DILocation(line: 869, column: 43, scope: !9115)
!9132 = !DILocation(line: 870, column: 22, scope: !9115)
!9133 = !DILocation(line: 870, column: 5, scope: !9115)
!9134 = !DILocation(line: 872, column: 59, scope: !9115)
!9135 = !DILocation(line: 872, column: 41, scope: !9115)
!9136 = !DILocation(line: 873, column: 26, scope: !9115)
!9137 = !DILocation(line: 873, column: 6, scope: !9115)
!9138 = !DILocation(line: 874, column: 6, scope: !9115)
!9139 = !DILocation(line: 875, column: 6, scope: !9115)
!9140 = !DILocation(line: 876, column: 6, scope: !9115)
!9141 = !DILocation(line: 872, column: 10, scope: !9115)
!9142 = !DILocation(line: 872, column: 3, scope: !9115)
!9143 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !742, file: !742, line: 2013, type: !7739, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9144 = !DILocalVariable(name: "gs", arg: 1, scope: !9143, file: !742, line: 2013, type: !5524)
!9145 = !DILocation(line: 2013, column: 36, scope: !9143)
!9146 = !DILocalVariable(name: "num_ops", scope: !9143, file: !742, line: 2015, type: !7)
!9147 = !DILocation(line: 2015, column: 12, scope: !9143)
!9148 = !DILocation(line: 2017, column: 29, scope: !9143)
!9149 = !DILocation(line: 2017, column: 13, scope: !9143)
!9150 = !DILocation(line: 2017, column: 11, scope: !9143)
!9151 = !DILocation(line: 2018, column: 10, scope: !9143)
!9152 = !DILocation(line: 2018, column: 18, scope: !9143)
!9153 = !DILocation(line: 2018, column: 3, scope: !9143)
!9154 = distinct !DISubprogram(name: "gimple_call_arg", scope: !742, file: !742, line: 2025, type: !6875, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9155 = !DILocalVariable(name: "gs", arg: 1, scope: !9154, file: !742, line: 2025, type: !5524)
!9156 = !DILocation(line: 2025, column: 31, scope: !9154)
!9157 = !DILocalVariable(name: "index", arg: 2, scope: !9154, file: !742, line: 2025, type: !7)
!9158 = !DILocation(line: 2025, column: 44, scope: !9154)
!9159 = !DILocation(line: 2028, column: 21, scope: !9154)
!9160 = !DILocation(line: 2028, column: 25, scope: !9154)
!9161 = !DILocation(line: 2028, column: 31, scope: !9154)
!9162 = !DILocation(line: 2028, column: 10, scope: !9154)
!9163 = !DILocation(line: 2028, column: 3, scope: !9154)
!9164 = distinct !DISubprogram(name: "supports_overflow_infinity", scope: !3, file: !3, line: 194, type: !3251, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9165 = !DILocalVariable(name: "type", arg: 1, scope: !9164, file: !3, line: 194, type: !3139)
!9166 = !DILocation(line: 194, column: 40, scope: !9164)
!9167 = !DILocalVariable(name: "min", scope: !9164, file: !3, line: 196, type: !1747)
!9168 = !DILocation(line: 196, column: 8, scope: !9164)
!9169 = !DILocation(line: 196, column: 27, scope: !9164)
!9170 = !DILocation(line: 196, column: 14, scope: !9164)
!9171 = !DILocalVariable(name: "max", scope: !9164, file: !3, line: 196, type: !1747)
!9172 = !DILocation(line: 196, column: 34, scope: !9164)
!9173 = !DILocation(line: 196, column: 53, scope: !9164)
!9174 = !DILocation(line: 196, column: 40, scope: !9164)
!9175 = !DILocation(line: 200, column: 11, scope: !9164)
!9176 = !DILocation(line: 200, column: 15, scope: !9164)
!9177 = !DILocation(line: 201, column: 4, scope: !9164)
!9178 = !DILocation(line: 201, column: 7, scope: !9164)
!9179 = !DILocation(line: 202, column: 4, scope: !9164)
!9180 = !DILocation(line: 202, column: 7, scope: !9164)
!9181 = !DILocation(line: 202, column: 11, scope: !9164)
!9182 = !DILocation(line: 203, column: 4, scope: !9164)
!9183 = !DILocation(line: 203, column: 7, scope: !9164)
!9184 = !DILocation(line: 0, scope: !9164)
!9185 = !DILocation(line: 200, column: 10, scope: !9164)
!9186 = !DILocation(line: 200, column: 3, scope: !9164)
!9187 = distinct !DISubprogram(name: "positive_overflow_infinity", scope: !3, file: !3, line: 234, type: !9188, scopeLine: 235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9188 = !DISubroutineType(types: !9189)
!9189 = !{!1747, !1747}
!9190 = !DILocalVariable(name: "type", arg: 1, scope: !9187, file: !3, line: 234, type: !1747)
!9191 = !DILocation(line: 234, column: 34, scope: !9187)
!9192 = !DILocation(line: 239, column: 47, scope: !9187)
!9193 = !DILocation(line: 239, column: 34, scope: !9187)
!9194 = !DILocation(line: 239, column: 10, scope: !9187)
!9195 = !DILocation(line: 239, column: 3, scope: !9187)
!9196 = distinct !DISubprogram(name: "make_overflow_infinity", scope: !3, file: !3, line: 210, type: !9188, scopeLine: 211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9197 = !DILocalVariable(name: "val", arg: 1, scope: !9196, file: !3, line: 210, type: !1747)
!9198 = !DILocation(line: 210, column: 30, scope: !9196)
!9199 = !DILocation(line: 215, column: 9, scope: !9196)
!9200 = !DILocation(line: 215, column: 7, scope: !9196)
!9201 = !DILocation(line: 216, column: 3, scope: !9196)
!9202 = !DILocation(line: 216, column: 23, scope: !9196)
!9203 = !DILocation(line: 217, column: 10, scope: !9196)
!9204 = !DILocation(line: 217, column: 3, scope: !9196)
!9205 = distinct !DISubprogram(name: "is_overflow_infinity", scope: !3, file: !3, line: 267, type: !3251, scopeLine: 268, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9206 = !DILocalVariable(name: "val", arg: 1, scope: !9205, file: !3, line: 267, type: !3139)
!9207 = !DILocation(line: 267, column: 34, scope: !9205)
!9208 = !DILocation(line: 269, column: 36, scope: !9205)
!9209 = !DILocation(line: 269, column: 11, scope: !9205)
!9210 = !DILocation(line: 270, column: 4, scope: !9205)
!9211 = !DILocation(line: 270, column: 7, scope: !9205)
!9212 = !DILocation(line: 271, column: 4, scope: !9205)
!9213 = !DILocation(line: 271, column: 7, scope: !9205)
!9214 = !DILocation(line: 272, column: 4, scope: !9205)
!9215 = !DILocation(line: 272, column: 24, scope: !9205)
!9216 = !DILocation(line: 272, column: 8, scope: !9205)
!9217 = !DILocation(line: 272, column: 29, scope: !9205)
!9218 = !DILocation(line: 272, column: 48, scope: !9205)
!9219 = !DILocation(line: 272, column: 32, scope: !9205)
!9220 = !DILocation(line: 0, scope: !9205)
!9221 = !DILocation(line: 269, column: 10, scope: !9205)
!9222 = !DILocation(line: 269, column: 3, scope: !9205)
!9223 = distinct !DISubprogram(name: "gimple_stmt_nonzero_warnv_p", scope: !3, file: !3, line: 942, type: !8946, scopeLine: 943, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9224 = !DILocalVariable(name: "stmt", arg: 1, scope: !9223, file: !3, line: 942, type: !2076)
!9225 = !DILocation(line: 942, column: 37, scope: !9223)
!9226 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !9223, file: !3, line: 942, type: !3130)
!9227 = !DILocation(line: 942, column: 49, scope: !9223)
!9228 = !DILocation(line: 944, column: 24, scope: !9223)
!9229 = !DILocation(line: 944, column: 11, scope: !9223)
!9230 = !DILocation(line: 944, column: 3, scope: !9223)
!9231 = !DILocation(line: 947, column: 45, scope: !9232)
!9232 = distinct !DILexicalBlock(scope: !9223, file: !3, line: 945, column: 5)
!9233 = !DILocation(line: 947, column: 51, scope: !9232)
!9234 = !DILocation(line: 947, column: 14, scope: !9232)
!9235 = !DILocation(line: 947, column: 7, scope: !9232)
!9236 = !DILocation(line: 949, column: 36, scope: !9232)
!9237 = !DILocation(line: 949, column: 14, scope: !9232)
!9238 = !DILocation(line: 949, column: 7, scope: !9232)
!9239 = !DILocation(line: 951, column: 7, scope: !9232)
!9240 = !DILocation(line: 952, column: 5, scope: !9232)
!9241 = !DILocation(line: 954, column: 5, scope: !9223)
!9242 = !DILocation(line: 956, column: 1, scope: !9223)
!9243 = distinct !DISubprogram(name: "range_is_nonnull", scope: !3, file: !3, line: 749, type: !9244, scopeLine: 750, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9244 = !DISubroutineType(types: !9245)
!9245 = !{!1866, !1741}
!9246 = !DILocalVariable(name: "vr", arg: 1, scope: !9243, file: !3, line: 749, type: !1741)
!9247 = !DILocation(line: 749, column: 34, scope: !9243)
!9248 = !DILocation(line: 751, column: 10, scope: !9243)
!9249 = !DILocation(line: 751, column: 14, scope: !9243)
!9250 = !DILocation(line: 751, column: 19, scope: !9243)
!9251 = !DILocation(line: 752, column: 3, scope: !9243)
!9252 = !DILocation(line: 752, column: 21, scope: !9243)
!9253 = !DILocation(line: 752, column: 25, scope: !9243)
!9254 = !DILocation(line: 752, column: 6, scope: !9243)
!9255 = !DILocation(line: 753, column: 3, scope: !9243)
!9256 = !DILocation(line: 753, column: 21, scope: !9243)
!9257 = !DILocation(line: 753, column: 25, scope: !9243)
!9258 = !DILocation(line: 753, column: 6, scope: !9243)
!9259 = !DILocation(line: 0, scope: !9243)
!9260 = !DILocation(line: 751, column: 3, scope: !9243)
!9261 = distinct !DISubprogram(name: "gimple_assign_nonzero_warnv_p", scope: !3, file: !3, line: 907, type: !8946, scopeLine: 908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9262 = !DILocalVariable(name: "stmt", arg: 1, scope: !9261, file: !3, line: 907, type: !2076)
!9263 = !DILocation(line: 907, column: 39, scope: !9261)
!9264 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !9261, file: !3, line: 907, type: !3130)
!9265 = !DILocation(line: 907, column: 51, scope: !9261)
!9266 = !DILocalVariable(name: "code", scope: !9261, file: !3, line: 909, type: !134)
!9267 = !DILocation(line: 909, column: 18, scope: !9261)
!9268 = !DILocation(line: 909, column: 49, scope: !9261)
!9269 = !DILocation(line: 909, column: 25, scope: !9261)
!9270 = !DILocation(line: 910, column: 33, scope: !9261)
!9271 = !DILocation(line: 910, column: 11, scope: !9261)
!9272 = !DILocation(line: 910, column: 3, scope: !9261)
!9273 = !DILocation(line: 913, column: 66, scope: !9274)
!9274 = distinct !DILexicalBlock(scope: !9261, file: !3, line: 911, column: 5)
!9275 = !DILocation(line: 913, column: 42, scope: !9274)
!9276 = !DILocation(line: 914, column: 25, scope: !9274)
!9277 = !DILocation(line: 914, column: 7, scope: !9274)
!9278 = !DILocation(line: 915, column: 27, scope: !9274)
!9279 = !DILocation(line: 915, column: 7, scope: !9274)
!9280 = !DILocation(line: 916, column: 7, scope: !9274)
!9281 = !DILocation(line: 913, column: 14, scope: !9274)
!9282 = !DILocation(line: 913, column: 7, scope: !9274)
!9283 = !DILocation(line: 918, column: 67, scope: !9274)
!9284 = !DILocation(line: 918, column: 43, scope: !9274)
!9285 = !DILocation(line: 919, column: 26, scope: !9274)
!9286 = !DILocation(line: 919, column: 8, scope: !9274)
!9287 = !DILocation(line: 920, column: 28, scope: !9274)
!9288 = !DILocation(line: 920, column: 8, scope: !9274)
!9289 = !DILocation(line: 921, column: 28, scope: !9274)
!9290 = !DILocation(line: 921, column: 8, scope: !9274)
!9291 = !DILocation(line: 922, column: 8, scope: !9274)
!9292 = !DILocation(line: 918, column: 14, scope: !9274)
!9293 = !DILocation(line: 918, column: 7, scope: !9274)
!9294 = !DILocation(line: 924, column: 63, scope: !9274)
!9295 = !DILocation(line: 924, column: 43, scope: !9274)
!9296 = !DILocation(line: 925, column: 8, scope: !9274)
!9297 = !DILocation(line: 924, column: 14, scope: !9274)
!9298 = !DILocation(line: 924, column: 7, scope: !9274)
!9299 = !DILocation(line: 927, column: 7, scope: !9274)
!9300 = !DILocation(line: 929, column: 7, scope: !9274)
!9301 = !DILocation(line: 930, column: 5, scope: !9274)
!9302 = !DILocation(line: 932, column: 5, scope: !9261)
!9303 = !DILocation(line: 934, column: 1, scope: !9261)
!9304 = distinct !DISubprogram(name: "extract_range_from_assert", scope: !3, file: !3, line: 1401, type: !4191, scopeLine: 1402, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!9305 = !DILocalVariable(name: "vr_p", arg: 1, scope: !9304, file: !3, line: 1401, type: !1741)
!9306 = !DILocation(line: 1401, column: 43, scope: !9304)
!9307 = !DILocalVariable(name: "expr", arg: 2, scope: !9304, file: !3, line: 1401, type: !1747)
!9308 = !DILocation(line: 1401, column: 54, scope: !9304)
!9309 = !DILocalVariable(name: "var", scope: !9304, file: !3, line: 1403, type: !1747)
!9310 = !DILocation(line: 1403, column: 8, scope: !9304)
!9311 = !DILocalVariable(name: "cond", scope: !9304, file: !3, line: 1403, type: !1747)
!9312 = !DILocation(line: 1403, column: 13, scope: !9304)
!9313 = !DILocalVariable(name: "limit", scope: !9304, file: !3, line: 1403, type: !1747)
!9314 = !DILocation(line: 1403, column: 19, scope: !9304)
!9315 = !DILocalVariable(name: "min", scope: !9304, file: !3, line: 1403, type: !1747)
!9316 = !DILocation(line: 1403, column: 26, scope: !9304)
!9317 = !DILocalVariable(name: "max", scope: !9304, file: !3, line: 1403, type: !1747)
!9318 = !DILocation(line: 1403, column: 31, scope: !9304)
!9319 = !DILocalVariable(name: "type", scope: !9304, file: !3, line: 1403, type: !1747)
!9320 = !DILocation(line: 1403, column: 36, scope: !9304)
!9321 = !DILocalVariable(name: "var_vr", scope: !9304, file: !3, line: 1404, type: !1741)
!9322 = !DILocation(line: 1404, column: 18, scope: !9304)
!9323 = !DILocalVariable(name: "limit_vr", scope: !9304, file: !3, line: 1404, type: !1741)
!9324 = !DILocation(line: 1404, column: 27, scope: !9304)
!9325 = !DILocalVariable(name: "cond_code", scope: !9304, file: !3, line: 1405, type: !134)
!9326 = !DILocation(line: 1405, column: 18, scope: !9304)
!9327 = !DILocation(line: 1407, column: 9, scope: !9304)
!9328 = !DILocation(line: 1407, column: 7, scope: !9304)
!9329 = !DILocation(line: 1408, column: 10, scope: !9304)
!9330 = !DILocation(line: 1408, column: 8, scope: !9304)
!9331 = !DILocation(line: 1410, column: 3, scope: !9304)
!9332 = !DILocation(line: 1413, column: 7, scope: !9333)
!9333 = distinct !DILexicalBlock(scope: !9304, file: !3, line: 1413, column: 7)
!9334 = !DILocation(line: 1413, column: 14, scope: !9333)
!9335 = !DILocation(line: 1413, column: 11, scope: !9333)
!9336 = !DILocation(line: 1414, column: 7, scope: !9333)
!9337 = !DILocation(line: 1414, column: 10, scope: !9333)
!9338 = !DILocation(line: 1414, column: 45, scope: !9333)
!9339 = !DILocation(line: 1415, column: 7, scope: !9333)
!9340 = !DILocation(line: 1415, column: 10, scope: !9333)
!9341 = !DILocation(line: 1415, column: 45, scope: !9333)
!9342 = !DILocation(line: 1413, column: 7, scope: !9304)
!9343 = !DILocation(line: 1419, column: 19, scope: !9344)
!9344 = distinct !DILexicalBlock(scope: !9333, file: !3, line: 1416, column: 5)
!9345 = !DILocation(line: 1419, column: 17, scope: !9344)
!9346 = !DILocation(line: 1420, column: 15, scope: !9344)
!9347 = !DILocation(line: 1420, column: 13, scope: !9344)
!9348 = !DILocation(line: 1421, column: 14, scope: !9344)
!9349 = !DILocation(line: 1421, column: 12, scope: !9344)
!9350 = !DILocation(line: 1422, column: 5, scope: !9344)
!9351 = !DILocation(line: 1428, column: 41, scope: !9352)
!9352 = distinct !DILexicalBlock(scope: !9333, file: !3, line: 1424, column: 5)
!9353 = !DILocation(line: 1428, column: 19, scope: !9352)
!9354 = !DILocation(line: 1428, column: 17, scope: !9352)
!9355 = !DILocation(line: 1429, column: 15, scope: !9352)
!9356 = !DILocation(line: 1429, column: 13, scope: !9352)
!9357 = !DILocation(line: 1430, column: 14, scope: !9352)
!9358 = !DILocation(line: 1430, column: 12, scope: !9352)
!9359 = !DILocation(line: 1433, column: 36, scope: !9304)
!9360 = !DILocation(line: 1433, column: 11, scope: !9304)
!9361 = !DILocation(line: 1433, column: 9, scope: !9304)
!9362 = !DILocation(line: 1435, column: 10, scope: !9304)
!9363 = !DILocation(line: 1435, column: 8, scope: !9304)
!9364 = !DILocation(line: 1436, column: 3, scope: !9304)
!9365 = !DILocation(line: 1440, column: 7, scope: !9366)
!9366 = distinct !DILexicalBlock(scope: !9304, file: !3, line: 1440, column: 7)
!9367 = !DILocation(line: 1440, column: 29, scope: !9366)
!9368 = !DILocation(line: 1440, column: 32, scope: !9366)
!9369 = !DILocation(line: 1440, column: 42, scope: !9366)
!9370 = !DILocation(line: 1440, column: 53, scope: !9366)
!9371 = !DILocation(line: 1440, column: 56, scope: !9366)
!9372 = !DILocation(line: 1440, column: 66, scope: !9366)
!9373 = !DILocation(line: 1440, column: 7, scope: !9304)
!9374 = !DILocation(line: 1442, column: 35, scope: !9375)
!9375 = distinct !DILexicalBlock(scope: !9366, file: !3, line: 1441, column: 5)
!9376 = !DILocation(line: 1442, column: 7, scope: !9375)
!9377 = !DILocation(line: 1443, column: 7, scope: !9375)
!9378 = !DILocation(line: 1449, column: 15, scope: !9304)
!9379 = !DILocation(line: 1449, column: 33, scope: !9304)
!9380 = !DILocation(line: 1449, column: 14, scope: !9304)
!9381 = !DILocation(line: 1449, column: 65, scope: !9304)
!9382 = !DILocation(line: 1449, column: 48, scope: !9304)
!9383 = !DILocation(line: 1449, column: 12, scope: !9304)
!9384 = !DILocation(line: 1452, column: 7, scope: !9385)
!9385 = distinct !DILexicalBlock(scope: !9304, file: !3, line: 1452, column: 7)
!9386 = !DILocation(line: 1453, column: 7, scope: !9385)
!9387 = !DILocation(line: 1453, column: 11, scope: !9385)
!9388 = !DILocation(line: 1453, column: 21, scope: !9385)
!9389 = !DILocation(line: 1453, column: 26, scope: !9385)
!9390 = !DILocation(line: 1454, column: 4, scope: !9385)
!9391 = !DILocation(line: 1454, column: 7, scope: !9385)
!9392 = !DILocation(line: 1454, column: 17, scope: !9385)
!9393 = !DILocation(line: 1454, column: 22, scope: !9385)
!9394 = !DILocation(line: 1455, column: 4, scope: !9385)
!9395 = !DILocation(line: 1455, column: 25, scope: !9385)
!9396 = !DILocation(line: 1455, column: 7, scope: !9385)
!9397 = !DILocation(line: 1452, column: 7, scope: !9304)
!9398 = !DILocation(line: 1456, column: 14, scope: !9385)
!9399 = !DILocation(line: 1456, column: 5, scope: !9385)
!9400 = !DILocation(line: 1463, column: 3, scope: !9304)
!9401 = !DILocation(line: 1464, column: 21, scope: !9304)
!9402 = !DILocation(line: 1464, column: 27, scope: !9304)
!9403 = !DILocation(line: 1464, column: 34, scope: !9304)
!9404 = !DILocation(line: 1464, column: 3, scope: !9304)
!9405 = !DILocation(line: 1477, column: 7, scope: !9406)
!9406 = distinct !DILexicalBlock(scope: !9304, file: !3, line: 1477, column: 7)
!9407 = !DILocation(line: 1477, column: 24, scope: !9406)
!9408 = !DILocation(line: 1478, column: 7, scope: !9406)
!9409 = !DILocation(line: 1478, column: 10, scope: !9406)
!9410 = !DILocation(line: 1478, column: 27, scope: !9406)
!9411 = !DILocation(line: 1477, column: 7, scope: !9304)
!9412 = !DILocation(line: 1480, column: 11, scope: !9413)
!9413 = distinct !DILexicalBlock(scope: !9414, file: !3, line: 1480, column: 11)
!9414 = distinct !DILexicalBlock(scope: !9406, file: !3, line: 1479, column: 5)
!9415 = !DILocation(line: 1480, column: 28, scope: !9413)
!9416 = !DILocation(line: 1480, column: 11, scope: !9414)
!9417 = !DILocation(line: 1482, column: 17, scope: !9418)
!9418 = distinct !DILexicalBlock(scope: !9413, file: !3, line: 1481, column: 9)
!9419 = !DILocation(line: 1482, column: 15, scope: !9418)
!9420 = !DILocation(line: 1484, column: 45, scope: !9418)
!9421 = !DILocation(line: 1484, column: 52, scope: !9418)
!9422 = !DILocation(line: 1484, column: 17, scope: !9418)
!9423 = !DILocation(line: 1484, column: 15, scope: !9418)
!9424 = !DILocation(line: 1485, column: 11, scope: !9418)
!9425 = !DILocation(line: 1485, column: 9, scope: !9418)
!9426 = !DILocation(line: 1486, column: 2, scope: !9418)
!9427 = !DILocation(line: 1489, column: 25, scope: !9428)
!9428 = distinct !DILexicalBlock(scope: !9413, file: !3, line: 1488, column: 2)
!9429 = !DILocation(line: 1489, column: 10, scope: !9428)
!9430 = !DILocation(line: 1489, column: 8, scope: !9428)
!9431 = !DILocation(line: 1490, column: 10, scope: !9428)
!9432 = !DILocation(line: 1490, column: 8, scope: !9428)
!9433 = !DILocation(line: 1496, column: 36, scope: !9414)
!9434 = !DILocation(line: 1496, column: 53, scope: !9414)
!9435 = !DILocation(line: 1497, column: 8, scope: !9414)
!9436 = !DILocation(line: 1496, column: 13, scope: !9414)
!9437 = !DILocation(line: 1496, column: 11, scope: !9414)
!9438 = !DILocation(line: 1498, column: 36, scope: !9414)
!9439 = !DILocation(line: 1498, column: 53, scope: !9414)
!9440 = !DILocation(line: 1499, column: 8, scope: !9414)
!9441 = !DILocation(line: 1498, column: 13, scope: !9414)
!9442 = !DILocation(line: 1498, column: 11, scope: !9414)
!9443 = !DILocation(line: 1504, column: 11, scope: !9444)
!9444 = distinct !DILexicalBlock(scope: !9414, file: !3, line: 1504, column: 11)
!9445 = !DILocation(line: 1504, column: 21, scope: !9444)
!9446 = !DILocation(line: 1504, column: 11, scope: !9414)
!9447 = !DILocation(line: 1505, column: 43, scope: !9444)
!9448 = !DILocation(line: 1506, column: 8, scope: !9444)
!9449 = !DILocation(line: 1506, column: 13, scope: !9444)
!9450 = !DILocation(line: 1506, column: 18, scope: !9444)
!9451 = !DILocation(line: 1506, column: 24, scope: !9444)
!9452 = !DILocation(line: 1505, column: 9, scope: !9444)
!9453 = !DILocation(line: 1507, column: 16, scope: !9454)
!9454 = distinct !DILexicalBlock(scope: !9444, file: !3, line: 1507, column: 16)
!9455 = !DILocation(line: 1507, column: 26, scope: !9454)
!9456 = !DILocation(line: 1507, column: 16, scope: !9444)
!9457 = !DILocation(line: 1508, column: 43, scope: !9454)
!9458 = !DILocation(line: 1509, column: 8, scope: !9454)
!9459 = !DILocation(line: 1509, column: 13, scope: !9454)
!9460 = !DILocation(line: 1509, column: 18, scope: !9454)
!9461 = !DILocation(line: 1509, column: 24, scope: !9454)
!9462 = !DILocation(line: 1508, column: 9, scope: !9454)
!9463 = !DILocation(line: 1511, column: 2, scope: !9454)
!9464 = !DILocation(line: 1512, column: 5, scope: !9414)
!9465 = !DILocation(line: 1513, column: 12, scope: !9466)
!9466 = distinct !DILexicalBlock(scope: !9406, file: !3, line: 1513, column: 12)
!9467 = !DILocation(line: 1513, column: 22, scope: !9466)
!9468 = !DILocation(line: 1513, column: 12, scope: !9406)
!9469 = !DILocalVariable(name: "range_type", scope: !9470, file: !3, line: 1515, type: !390)
!9470 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 1514, column: 5)
!9471 = !DILocation(line: 1515, column: 29, scope: !9470)
!9472 = !DILocation(line: 1517, column: 11, scope: !9473)
!9473 = distinct !DILexicalBlock(scope: !9470, file: !3, line: 1517, column: 11)
!9474 = !DILocation(line: 1517, column: 11, scope: !9470)
!9475 = !DILocation(line: 1519, column: 17, scope: !9476)
!9476 = distinct !DILexicalBlock(scope: !9473, file: !3, line: 1518, column: 2)
!9477 = !DILocation(line: 1519, column: 27, scope: !9476)
!9478 = !DILocation(line: 1519, column: 15, scope: !9476)
!9479 = !DILocation(line: 1520, column: 10, scope: !9476)
!9480 = !DILocation(line: 1520, column: 20, scope: !9476)
!9481 = !DILocation(line: 1520, column: 8, scope: !9476)
!9482 = !DILocation(line: 1521, column: 10, scope: !9476)
!9483 = !DILocation(line: 1521, column: 20, scope: !9476)
!9484 = !DILocation(line: 1521, column: 8, scope: !9476)
!9485 = !DILocation(line: 1522, column: 2, scope: !9476)
!9486 = !DILocation(line: 1525, column: 15, scope: !9487)
!9487 = distinct !DILexicalBlock(scope: !9473, file: !3, line: 1524, column: 2)
!9488 = !DILocation(line: 1526, column: 10, scope: !9487)
!9489 = !DILocation(line: 1526, column: 8, scope: !9487)
!9490 = !DILocation(line: 1527, column: 10, scope: !9487)
!9491 = !DILocation(line: 1527, column: 8, scope: !9487)
!9492 = !DILocation(line: 1530, column: 24, scope: !9470)
!9493 = !DILocation(line: 1530, column: 30, scope: !9470)
!9494 = !DILocation(line: 1530, column: 42, scope: !9470)
!9495 = !DILocation(line: 1530, column: 47, scope: !9470)
!9496 = !DILocation(line: 1530, column: 52, scope: !9470)
!9497 = !DILocation(line: 1530, column: 58, scope: !9470)
!9498 = !DILocation(line: 1530, column: 7, scope: !9470)
!9499 = !DILocation(line: 1535, column: 11, scope: !9500)
!9500 = distinct !DILexicalBlock(scope: !9470, file: !3, line: 1535, column: 11)
!9501 = !DILocation(line: 1535, column: 29, scope: !9500)
!9502 = !DILocation(line: 1535, column: 11, scope: !9470)
!9503 = !DILocation(line: 1536, column: 20, scope: !9500)
!9504 = !DILocation(line: 1536, column: 26, scope: !9500)
!9505 = !DILocation(line: 1536, column: 33, scope: !9500)
!9506 = !DILocation(line: 1536, column: 2, scope: !9500)
!9507 = !DILocation(line: 1537, column: 5, scope: !9470)
!9508 = !DILocation(line: 1538, column: 12, scope: !9509)
!9509 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 1538, column: 12)
!9510 = !DILocation(line: 1538, column: 22, scope: !9509)
!9511 = !DILocation(line: 1538, column: 12, scope: !9466)
!9512 = !DILocation(line: 1560, column: 11, scope: !9513)
!9513 = distinct !DILexicalBlock(scope: !9514, file: !3, line: 1560, column: 11)
!9514 = distinct !DILexicalBlock(scope: !9509, file: !3, line: 1539, column: 5)
!9515 = !DILocation(line: 1561, column: 4, scope: !9513)
!9516 = !DILocation(line: 1561, column: 7, scope: !9513)
!9517 = !DILocation(line: 1561, column: 17, scope: !9513)
!9518 = !DILocation(line: 1561, column: 22, scope: !9513)
!9519 = !DILocation(line: 1562, column: 4, scope: !9513)
!9520 = !DILocation(line: 1562, column: 23, scope: !9513)
!9521 = !DILocation(line: 1562, column: 33, scope: !9513)
!9522 = !DILocation(line: 1562, column: 38, scope: !9513)
!9523 = !DILocation(line: 1562, column: 48, scope: !9513)
!9524 = !DILocation(line: 1562, column: 7, scope: !9513)
!9525 = !DILocation(line: 1562, column: 53, scope: !9513)
!9526 = !DILocation(line: 1560, column: 11, scope: !9514)
!9527 = !DILocation(line: 1564, column: 10, scope: !9528)
!9528 = distinct !DILexicalBlock(scope: !9513, file: !3, line: 1563, column: 2)
!9529 = !DILocation(line: 1564, column: 20, scope: !9528)
!9530 = !DILocation(line: 1564, column: 8, scope: !9528)
!9531 = !DILocation(line: 1565, column: 10, scope: !9528)
!9532 = !DILocation(line: 1565, column: 20, scope: !9528)
!9533 = !DILocation(line: 1565, column: 8, scope: !9528)
!9534 = !DILocation(line: 1566, column: 2, scope: !9528)
!9535 = !DILocation(line: 1571, column: 16, scope: !9536)
!9536 = distinct !DILexicalBlock(scope: !9513, file: !3, line: 1568, column: 2)
!9537 = !DILocation(line: 1571, column: 14, scope: !9536)
!9538 = !DILocation(line: 1571, column: 8, scope: !9536)
!9539 = !DILocation(line: 1576, column: 11, scope: !9540)
!9540 = distinct !DILexicalBlock(scope: !9514, file: !3, line: 1576, column: 11)
!9541 = !DILocation(line: 1577, column: 4, scope: !9540)
!9542 = !DILocation(line: 1577, column: 23, scope: !9540)
!9543 = !DILocation(line: 1577, column: 7, scope: !9540)
!9544 = !DILocation(line: 1578, column: 4, scope: !9540)
!9545 = !DILocation(line: 1578, column: 23, scope: !9540)
!9546 = !DILocation(line: 1578, column: 7, scope: !9540)
!9547 = !DILocation(line: 1576, column: 11, scope: !9514)
!9548 = !DILocation(line: 1579, column: 14, scope: !9540)
!9549 = !DILocation(line: 1579, column: 12, scope: !9540)
!9550 = !DILocation(line: 1579, column: 6, scope: !9540)
!9551 = !DILocation(line: 1579, column: 2, scope: !9540)
!9552 = !DILocation(line: 1581, column: 24, scope: !9514)
!9553 = !DILocation(line: 1581, column: 45, scope: !9514)
!9554 = !DILocation(line: 1581, column: 50, scope: !9514)
!9555 = !DILocation(line: 1581, column: 55, scope: !9514)
!9556 = !DILocation(line: 1581, column: 61, scope: !9514)
!9557 = !DILocation(line: 1581, column: 7, scope: !9514)
!9558 = !DILocation(line: 1582, column: 5, scope: !9514)
!9559 = !DILocation(line: 1583, column: 12, scope: !9560)
!9560 = distinct !DILexicalBlock(scope: !9509, file: !3, line: 1583, column: 12)
!9561 = !DILocation(line: 1583, column: 22, scope: !9560)
!9562 = !DILocation(line: 1583, column: 33, scope: !9560)
!9563 = !DILocation(line: 1583, column: 36, scope: !9560)
!9564 = !DILocation(line: 1583, column: 46, scope: !9560)
!9565 = !DILocation(line: 1583, column: 12, scope: !9509)
!9566 = !DILocation(line: 1585, column: 13, scope: !9567)
!9567 = distinct !DILexicalBlock(scope: !9560, file: !3, line: 1584, column: 5)
!9568 = !DILocation(line: 1585, column: 11, scope: !9567)
!9569 = !DILocation(line: 1587, column: 11, scope: !9570)
!9570 = distinct !DILexicalBlock(scope: !9567, file: !3, line: 1587, column: 11)
!9571 = !DILocation(line: 1587, column: 20, scope: !9570)
!9572 = !DILocation(line: 1587, column: 28, scope: !9570)
!9573 = !DILocation(line: 1587, column: 31, scope: !9570)
!9574 = !DILocation(line: 1587, column: 41, scope: !9570)
!9575 = !DILocation(line: 1587, column: 46, scope: !9570)
!9576 = !DILocation(line: 1587, column: 11, scope: !9567)
!9577 = !DILocation(line: 1588, column: 8, scope: !9570)
!9578 = !DILocation(line: 1588, column: 6, scope: !9570)
!9579 = !DILocation(line: 1588, column: 2, scope: !9570)
!9580 = !DILocation(line: 1594, column: 10, scope: !9581)
!9581 = distinct !DILexicalBlock(scope: !9570, file: !3, line: 1590, column: 2)
!9582 = !DILocation(line: 1594, column: 20, scope: !9581)
!9583 = !DILocation(line: 1594, column: 8, scope: !9581)
!9584 = !DILocation(line: 1600, column: 12, scope: !9585)
!9585 = distinct !DILexicalBlock(scope: !9567, file: !3, line: 1600, column: 11)
!9586 = !DILocation(line: 1600, column: 22, scope: !9585)
!9587 = !DILocation(line: 1601, column: 5, scope: !9585)
!9588 = !DILocation(line: 1601, column: 24, scope: !9585)
!9589 = !DILocation(line: 1601, column: 29, scope: !9585)
!9590 = !DILocation(line: 1601, column: 8, scope: !9585)
!9591 = !DILocation(line: 1601, column: 34, scope: !9585)
!9592 = !DILocation(line: 1602, column: 4, scope: !9585)
!9593 = !DILocation(line: 1602, column: 8, scope: !9585)
!9594 = !DILocation(line: 1602, column: 31, scope: !9585)
!9595 = !DILocation(line: 1602, column: 34, scope: !9585)
!9596 = !DILocation(line: 1600, column: 11, scope: !9567)
!9597 = !DILocation(line: 1603, column: 30, scope: !9585)
!9598 = !DILocation(line: 1603, column: 2, scope: !9585)
!9599 = !DILocation(line: 1607, column: 8, scope: !9600)
!9600 = distinct !DILexicalBlock(scope: !9601, file: !3, line: 1607, column: 8)
!9601 = distinct !DILexicalBlock(scope: !9585, file: !3, line: 1605, column: 2)
!9602 = !DILocation(line: 1607, column: 18, scope: !9600)
!9603 = !DILocation(line: 1607, column: 8, scope: !9601)
!9604 = !DILocalVariable(name: "one", scope: !9605, file: !3, line: 1609, type: !1747)
!9605 = distinct !DILexicalBlock(scope: !9600, file: !3, line: 1608, column: 6)
!9606 = !DILocation(line: 1609, column: 13, scope: !9605)
!9607 = !DILocation(line: 1609, column: 34, scope: !9605)
!9608 = !DILocation(line: 1609, column: 19, scope: !9605)
!9609 = !DILocation(line: 1610, column: 14, scope: !9605)
!9610 = !DILocation(line: 1610, column: 12, scope: !9605)
!9611 = !DILocation(line: 1611, column: 12, scope: !9612)
!9612 = distinct !DILexicalBlock(scope: !9605, file: !3, line: 1611, column: 12)
!9613 = !DILocation(line: 1611, column: 12, scope: !9605)
!9614 = !DILocation(line: 1612, column: 3, scope: !9612)
!9615 = !DILocation(line: 1612, column: 25, scope: !9612)
!9616 = !DILocation(line: 1613, column: 6, scope: !9605)
!9617 = !DILocation(line: 1615, column: 21, scope: !9601)
!9618 = !DILocation(line: 1615, column: 37, scope: !9601)
!9619 = !DILocation(line: 1615, column: 42, scope: !9601)
!9620 = !DILocation(line: 1615, column: 47, scope: !9601)
!9621 = !DILocation(line: 1615, column: 53, scope: !9601)
!9622 = !DILocation(line: 1615, column: 4, scope: !9601)
!9623 = !DILocation(line: 1617, column: 5, scope: !9567)
!9624 = !DILocation(line: 1618, column: 12, scope: !9625)
!9625 = distinct !DILexicalBlock(scope: !9560, file: !3, line: 1618, column: 12)
!9626 = !DILocation(line: 1618, column: 22, scope: !9625)
!9627 = !DILocation(line: 1618, column: 33, scope: !9625)
!9628 = !DILocation(line: 1618, column: 36, scope: !9625)
!9629 = !DILocation(line: 1618, column: 46, scope: !9625)
!9630 = !DILocation(line: 1618, column: 12, scope: !9560)
!9631 = !DILocation(line: 1620, column: 13, scope: !9632)
!9632 = distinct !DILexicalBlock(scope: !9625, file: !3, line: 1619, column: 5)
!9633 = !DILocation(line: 1620, column: 11, scope: !9632)
!9634 = !DILocation(line: 1622, column: 11, scope: !9635)
!9635 = distinct !DILexicalBlock(scope: !9632, file: !3, line: 1622, column: 11)
!9636 = !DILocation(line: 1622, column: 20, scope: !9635)
!9637 = !DILocation(line: 1622, column: 28, scope: !9635)
!9638 = !DILocation(line: 1622, column: 31, scope: !9635)
!9639 = !DILocation(line: 1622, column: 41, scope: !9635)
!9640 = !DILocation(line: 1622, column: 46, scope: !9635)
!9641 = !DILocation(line: 1622, column: 11, scope: !9632)
!9642 = !DILocation(line: 1623, column: 8, scope: !9635)
!9643 = !DILocation(line: 1623, column: 6, scope: !9635)
!9644 = !DILocation(line: 1623, column: 2, scope: !9635)
!9645 = !DILocation(line: 1629, column: 10, scope: !9646)
!9646 = distinct !DILexicalBlock(scope: !9635, file: !3, line: 1625, column: 2)
!9647 = !DILocation(line: 1629, column: 20, scope: !9646)
!9648 = !DILocation(line: 1629, column: 8, scope: !9646)
!9649 = !DILocation(line: 1635, column: 12, scope: !9650)
!9650 = distinct !DILexicalBlock(scope: !9632, file: !3, line: 1635, column: 11)
!9651 = !DILocation(line: 1635, column: 22, scope: !9650)
!9652 = !DILocation(line: 1636, column: 5, scope: !9650)
!9653 = !DILocation(line: 1636, column: 24, scope: !9650)
!9654 = !DILocation(line: 1636, column: 29, scope: !9650)
!9655 = !DILocation(line: 1636, column: 8, scope: !9650)
!9656 = !DILocation(line: 1636, column: 34, scope: !9650)
!9657 = !DILocation(line: 1637, column: 4, scope: !9650)
!9658 = !DILocation(line: 1637, column: 8, scope: !9650)
!9659 = !DILocation(line: 1637, column: 31, scope: !9650)
!9660 = !DILocation(line: 1637, column: 34, scope: !9650)
!9661 = !DILocation(line: 1635, column: 11, scope: !9632)
!9662 = !DILocation(line: 1638, column: 30, scope: !9650)
!9663 = !DILocation(line: 1638, column: 2, scope: !9650)
!9664 = !DILocation(line: 1642, column: 8, scope: !9665)
!9665 = distinct !DILexicalBlock(scope: !9666, file: !3, line: 1642, column: 8)
!9666 = distinct !DILexicalBlock(scope: !9650, file: !3, line: 1640, column: 2)
!9667 = !DILocation(line: 1642, column: 18, scope: !9665)
!9668 = !DILocation(line: 1642, column: 8, scope: !9666)
!9669 = !DILocalVariable(name: "one", scope: !9670, file: !3, line: 1644, type: !1747)
!9670 = distinct !DILexicalBlock(scope: !9665, file: !3, line: 1643, column: 6)
!9671 = !DILocation(line: 1644, column: 13, scope: !9670)
!9672 = !DILocation(line: 1644, column: 34, scope: !9670)
!9673 = !DILocation(line: 1644, column: 19, scope: !9670)
!9674 = !DILocation(line: 1645, column: 14, scope: !9670)
!9675 = !DILocation(line: 1645, column: 12, scope: !9670)
!9676 = !DILocation(line: 1646, column: 12, scope: !9677)
!9677 = distinct !DILexicalBlock(scope: !9670, file: !3, line: 1646, column: 12)
!9678 = !DILocation(line: 1646, column: 12, scope: !9670)
!9679 = !DILocation(line: 1647, column: 3, scope: !9677)
!9680 = !DILocation(line: 1647, column: 25, scope: !9677)
!9681 = !DILocation(line: 1648, column: 6, scope: !9670)
!9682 = !DILocation(line: 1650, column: 21, scope: !9666)
!9683 = !DILocation(line: 1650, column: 37, scope: !9666)
!9684 = !DILocation(line: 1650, column: 42, scope: !9666)
!9685 = !DILocation(line: 1650, column: 47, scope: !9666)
!9686 = !DILocation(line: 1650, column: 53, scope: !9666)
!9687 = !DILocation(line: 1650, column: 4, scope: !9666)
!9688 = !DILocation(line: 1652, column: 5, scope: !9632)
!9689 = !DILocation(line: 1654, column: 5, scope: !9625)
!9690 = !DILocation(line: 1690, column: 29, scope: !9304)
!9691 = !DILocation(line: 1690, column: 12, scope: !9304)
!9692 = !DILocation(line: 1690, column: 10, scope: !9304)
!9693 = !DILocation(line: 1694, column: 7, scope: !9694)
!9694 = distinct !DILexicalBlock(scope: !9304, file: !3, line: 1694, column: 7)
!9695 = !DILocation(line: 1694, column: 13, scope: !9694)
!9696 = !DILocation(line: 1694, column: 18, scope: !9694)
!9697 = !DILocation(line: 1695, column: 7, scope: !9694)
!9698 = !DILocation(line: 1695, column: 10, scope: !9694)
!9699 = !DILocation(line: 1695, column: 16, scope: !9694)
!9700 = !DILocation(line: 1695, column: 21, scope: !9694)
!9701 = !DILocation(line: 1696, column: 7, scope: !9694)
!9702 = !DILocation(line: 1696, column: 10, scope: !9694)
!9703 = !DILocation(line: 1696, column: 18, scope: !9694)
!9704 = !DILocation(line: 1696, column: 23, scope: !9694)
!9705 = !DILocation(line: 1697, column: 7, scope: !9694)
!9706 = !DILocation(line: 1697, column: 10, scope: !9694)
!9707 = !DILocation(line: 1697, column: 18, scope: !9694)
!9708 = !DILocation(line: 1697, column: 23, scope: !9694)
!9709 = !DILocation(line: 1698, column: 7, scope: !9694)
!9710 = !DILocation(line: 1698, column: 28, scope: !9694)
!9711 = !DILocation(line: 1698, column: 10, scope: !9694)
!9712 = !DILocation(line: 1699, column: 7, scope: !9694)
!9713 = !DILocation(line: 1699, column: 28, scope: !9694)
!9714 = !DILocation(line: 1699, column: 10, scope: !9694)
!9715 = !DILocation(line: 1694, column: 7, scope: !9304)
!9716 = !DILocation(line: 1700, column: 5, scope: !9694)
!9717 = !DILocation(line: 1702, column: 7, scope: !9718)
!9718 = distinct !DILexicalBlock(scope: !9304, file: !3, line: 1702, column: 7)
!9719 = !DILocation(line: 1702, column: 15, scope: !9718)
!9720 = !DILocation(line: 1702, column: 20, scope: !9718)
!9721 = !DILocation(line: 1702, column: 32, scope: !9718)
!9722 = !DILocation(line: 1702, column: 35, scope: !9718)
!9723 = !DILocation(line: 1702, column: 41, scope: !9718)
!9724 = !DILocation(line: 1702, column: 46, scope: !9718)
!9725 = !DILocation(line: 1702, column: 7, scope: !9304)
!9726 = !DILocation(line: 1709, column: 37, scope: !9727)
!9727 = distinct !DILexicalBlock(scope: !9728, file: !3, line: 1709, column: 11)
!9728 = distinct !DILexicalBlock(scope: !9718, file: !3, line: 1703, column: 5)
!9729 = !DILocation(line: 1709, column: 45, scope: !9727)
!9730 = !DILocation(line: 1709, column: 11, scope: !9727)
!9731 = !DILocation(line: 1709, column: 11, scope: !9728)
!9732 = !DILocation(line: 1712, column: 24, scope: !9733)
!9733 = distinct !DILexicalBlock(scope: !9734, file: !3, line: 1712, column: 8)
!9734 = distinct !DILexicalBlock(scope: !9727, file: !3, line: 1710, column: 2)
!9735 = !DILocation(line: 1712, column: 30, scope: !9733)
!9736 = !DILocation(line: 1712, column: 35, scope: !9733)
!9737 = !DILocation(line: 1712, column: 43, scope: !9733)
!9738 = !DILocation(line: 1712, column: 8, scope: !9733)
!9739 = !DILocation(line: 1712, column: 48, scope: !9733)
!9740 = !DILocation(line: 1712, column: 8, scope: !9734)
!9741 = !DILocation(line: 1713, column: 12, scope: !9733)
!9742 = !DILocation(line: 1713, column: 20, scope: !9733)
!9743 = !DILocation(line: 1713, column: 10, scope: !9733)
!9744 = !DILocation(line: 1713, column: 6, scope: !9733)
!9745 = !DILocation(line: 1715, column: 12, scope: !9733)
!9746 = !DILocation(line: 1715, column: 18, scope: !9733)
!9747 = !DILocation(line: 1715, column: 10, scope: !9733)
!9748 = !DILocation(line: 1718, column: 24, scope: !9749)
!9749 = distinct !DILexicalBlock(scope: !9734, file: !3, line: 1718, column: 8)
!9750 = !DILocation(line: 1718, column: 30, scope: !9749)
!9751 = !DILocation(line: 1718, column: 35, scope: !9749)
!9752 = !DILocation(line: 1718, column: 43, scope: !9749)
!9753 = !DILocation(line: 1718, column: 8, scope: !9749)
!9754 = !DILocation(line: 1718, column: 48, scope: !9749)
!9755 = !DILocation(line: 1718, column: 8, scope: !9734)
!9756 = !DILocation(line: 1719, column: 12, scope: !9749)
!9757 = !DILocation(line: 1719, column: 20, scope: !9749)
!9758 = !DILocation(line: 1719, column: 10, scope: !9749)
!9759 = !DILocation(line: 1719, column: 6, scope: !9749)
!9760 = !DILocation(line: 1721, column: 12, scope: !9749)
!9761 = !DILocation(line: 1721, column: 18, scope: !9749)
!9762 = !DILocation(line: 1721, column: 10, scope: !9749)
!9763 = !DILocation(line: 1723, column: 21, scope: !9734)
!9764 = !DILocation(line: 1723, column: 27, scope: !9734)
!9765 = !DILocation(line: 1723, column: 33, scope: !9734)
!9766 = !DILocation(line: 1723, column: 39, scope: !9734)
!9767 = !DILocation(line: 1723, column: 44, scope: !9734)
!9768 = !DILocation(line: 1723, column: 49, scope: !9734)
!9769 = !DILocation(line: 1723, column: 55, scope: !9734)
!9770 = !DILocation(line: 1723, column: 4, scope: !9734)
!9771 = !DILocation(line: 1724, column: 2, scope: !9734)
!9772 = !DILocation(line: 1730, column: 32, scope: !9773)
!9773 = distinct !DILexicalBlock(scope: !9727, file: !3, line: 1726, column: 2)
!9774 = !DILocation(line: 1730, column: 4, scope: !9773)
!9775 = !DILocation(line: 1732, column: 5, scope: !9728)
!9776 = !DILocation(line: 1733, column: 13, scope: !9777)
!9777 = distinct !DILexicalBlock(scope: !9718, file: !3, line: 1733, column: 12)
!9778 = !DILocation(line: 1733, column: 21, scope: !9777)
!9779 = !DILocation(line: 1733, column: 26, scope: !9777)
!9780 = !DILocation(line: 1733, column: 38, scope: !9777)
!9781 = !DILocation(line: 1733, column: 41, scope: !9777)
!9782 = !DILocation(line: 1733, column: 47, scope: !9777)
!9783 = !DILocation(line: 1733, column: 52, scope: !9777)
!9784 = !DILocation(line: 1734, column: 12, scope: !9777)
!9785 = !DILocation(line: 1734, column: 16, scope: !9777)
!9786 = !DILocation(line: 1734, column: 24, scope: !9777)
!9787 = !DILocation(line: 1734, column: 29, scope: !9777)
!9788 = !DILocation(line: 1734, column: 46, scope: !9777)
!9789 = !DILocation(line: 1734, column: 49, scope: !9777)
!9790 = !DILocation(line: 1734, column: 55, scope: !9777)
!9791 = !DILocation(line: 1734, column: 60, scope: !9777)
!9792 = !DILocation(line: 1733, column: 12, scope: !9718)
!9793 = !DILocation(line: 1740, column: 27, scope: !9794)
!9794 = distinct !DILexicalBlock(scope: !9795, file: !3, line: 1740, column: 11)
!9795 = distinct !DILexicalBlock(scope: !9777, file: !3, line: 1735, column: 5)
!9796 = !DILocation(line: 1740, column: 35, scope: !9794)
!9797 = !DILocation(line: 1740, column: 40, scope: !9794)
!9798 = !DILocation(line: 1740, column: 46, scope: !9794)
!9799 = !DILocation(line: 1740, column: 11, scope: !9794)
!9800 = !DILocation(line: 1740, column: 51, scope: !9794)
!9801 = !DILocation(line: 1741, column: 4, scope: !9794)
!9802 = !DILocation(line: 1741, column: 23, scope: !9794)
!9803 = !DILocation(line: 1741, column: 31, scope: !9794)
!9804 = !DILocation(line: 1741, column: 36, scope: !9794)
!9805 = !DILocation(line: 1741, column: 42, scope: !9794)
!9806 = !DILocation(line: 1741, column: 7, scope: !9794)
!9807 = !DILocation(line: 1741, column: 47, scope: !9794)
!9808 = !DILocation(line: 1740, column: 11, scope: !9795)
!9809 = !DILocation(line: 1742, column: 30, scope: !9794)
!9810 = !DILocation(line: 1742, column: 2, scope: !9794)
!9811 = !DILocalVariable(name: "min", scope: !9812, file: !3, line: 1745, type: !1747)
!9812 = distinct !DILexicalBlock(scope: !9794, file: !3, line: 1744, column: 2)
!9813 = !DILocation(line: 1745, column: 9, scope: !9812)
!9814 = !DILocalVariable(name: "max", scope: !9812, file: !3, line: 1745, type: !1747)
!9815 = !DILocation(line: 1745, column: 14, scope: !9812)
!9816 = !DILocalVariable(name: "anti_min", scope: !9812, file: !3, line: 1745, type: !1747)
!9817 = !DILocation(line: 1745, column: 19, scope: !9812)
!9818 = !DILocalVariable(name: "anti_max", scope: !9812, file: !3, line: 1745, type: !1747)
!9819 = !DILocation(line: 1745, column: 29, scope: !9812)
!9820 = !DILocalVariable(name: "real_min", scope: !9812, file: !3, line: 1745, type: !1747)
!9821 = !DILocation(line: 1745, column: 39, scope: !9812)
!9822 = !DILocalVariable(name: "real_max", scope: !9812, file: !3, line: 1745, type: !1747)
!9823 = !DILocation(line: 1745, column: 49, scope: !9812)
!9824 = !DILocalVariable(name: "cmp", scope: !9812, file: !3, line: 1746, type: !1740)
!9825 = !DILocation(line: 1746, column: 8, scope: !9812)
!9826 = !DILocation(line: 1776, column: 8, scope: !9827)
!9827 = distinct !DILexicalBlock(scope: !9812, file: !3, line: 1776, column: 8)
!9828 = !DILocation(line: 1776, column: 14, scope: !9827)
!9829 = !DILocation(line: 1776, column: 19, scope: !9827)
!9830 = !DILocation(line: 1776, column: 8, scope: !9812)
!9831 = !DILocation(line: 1778, column: 19, scope: !9832)
!9832 = distinct !DILexicalBlock(scope: !9827, file: !3, line: 1777, column: 6)
!9833 = !DILocation(line: 1778, column: 25, scope: !9832)
!9834 = !DILocation(line: 1778, column: 17, scope: !9832)
!9835 = !DILocation(line: 1779, column: 19, scope: !9832)
!9836 = !DILocation(line: 1779, column: 25, scope: !9832)
!9837 = !DILocation(line: 1779, column: 17, scope: !9832)
!9838 = !DILocation(line: 1780, column: 19, scope: !9832)
!9839 = !DILocation(line: 1780, column: 27, scope: !9832)
!9840 = !DILocation(line: 1780, column: 17, scope: !9832)
!9841 = !DILocation(line: 1781, column: 19, scope: !9832)
!9842 = !DILocation(line: 1781, column: 27, scope: !9832)
!9843 = !DILocation(line: 1781, column: 17, scope: !9832)
!9844 = !DILocation(line: 1782, column: 6, scope: !9832)
!9845 = !DILocation(line: 1785, column: 19, scope: !9846)
!9846 = distinct !DILexicalBlock(scope: !9827, file: !3, line: 1784, column: 6)
!9847 = !DILocation(line: 1785, column: 27, scope: !9846)
!9848 = !DILocation(line: 1785, column: 17, scope: !9846)
!9849 = !DILocation(line: 1786, column: 19, scope: !9846)
!9850 = !DILocation(line: 1786, column: 27, scope: !9846)
!9851 = !DILocation(line: 1786, column: 17, scope: !9846)
!9852 = !DILocation(line: 1787, column: 19, scope: !9846)
!9853 = !DILocation(line: 1787, column: 25, scope: !9846)
!9854 = !DILocation(line: 1787, column: 17, scope: !9846)
!9855 = !DILocation(line: 1788, column: 19, scope: !9846)
!9856 = !DILocation(line: 1788, column: 25, scope: !9846)
!9857 = !DILocation(line: 1788, column: 17, scope: !9846)
!9858 = !DILocation(line: 1794, column: 24, scope: !9859)
!9859 = distinct !DILexicalBlock(scope: !9812, file: !3, line: 1794, column: 8)
!9860 = !DILocation(line: 1794, column: 34, scope: !9859)
!9861 = !DILocation(line: 1794, column: 8, scope: !9859)
!9862 = !DILocation(line: 1794, column: 44, scope: !9859)
!9863 = !DILocation(line: 1795, column: 8, scope: !9859)
!9864 = !DILocation(line: 1795, column: 27, scope: !9859)
!9865 = !DILocation(line: 1795, column: 37, scope: !9859)
!9866 = !DILocation(line: 1795, column: 11, scope: !9859)
!9867 = !DILocation(line: 1795, column: 47, scope: !9859)
!9868 = !DILocation(line: 1794, column: 8, scope: !9812)
!9869 = !DILocation(line: 1799, column: 29, scope: !9870)
!9870 = distinct !DILexicalBlock(scope: !9871, file: !3, line: 1799, column: 12)
!9871 = distinct !DILexicalBlock(scope: !9859, file: !3, line: 1796, column: 6)
!9872 = !DILocation(line: 1799, column: 13, scope: !9870)
!9873 = !DILocation(line: 1800, column: 5, scope: !9870)
!9874 = !DILocation(line: 1800, column: 25, scope: !9870)
!9875 = !DILocation(line: 1800, column: 9, scope: !9870)
!9876 = !DILocation(line: 1799, column: 12, scope: !9871)
!9877 = !DILocation(line: 1801, column: 27, scope: !9870)
!9878 = !DILocation(line: 1801, column: 43, scope: !9870)
!9879 = !DILocation(line: 1802, column: 6, scope: !9870)
!9880 = !DILocation(line: 1802, column: 16, scope: !9870)
!9881 = !DILocation(line: 1802, column: 22, scope: !9870)
!9882 = !DILocation(line: 1801, column: 10, scope: !9870)
!9883 = !DILocation(line: 1803, column: 6, scope: !9871)
!9884 = !DILocation(line: 1806, column: 29, scope: !9885)
!9885 = distinct !DILexicalBlock(scope: !9859, file: !3, line: 1806, column: 13)
!9886 = !DILocation(line: 1806, column: 39, scope: !9885)
!9887 = !DILocation(line: 1806, column: 13, scope: !9885)
!9888 = !DILocation(line: 1806, column: 49, scope: !9885)
!9889 = !DILocation(line: 1807, column: 6, scope: !9885)
!9890 = !DILocation(line: 1807, column: 25, scope: !9885)
!9891 = !DILocation(line: 1807, column: 35, scope: !9885)
!9892 = !DILocation(line: 1807, column: 9, scope: !9885)
!9893 = !DILocation(line: 1807, column: 45, scope: !9885)
!9894 = !DILocation(line: 1806, column: 13, scope: !9859)
!9895 = !DILocation(line: 1809, column: 25, scope: !9896)
!9896 = distinct !DILexicalBlock(scope: !9885, file: !3, line: 1808, column: 6)
!9897 = !DILocation(line: 1809, column: 41, scope: !9896)
!9898 = !DILocation(line: 1810, column: 11, scope: !9896)
!9899 = !DILocation(line: 1810, column: 21, scope: !9896)
!9900 = !DILocation(line: 1810, column: 27, scope: !9896)
!9901 = !DILocation(line: 1809, column: 8, scope: !9896)
!9902 = !DILocation(line: 1811, column: 6, scope: !9896)
!9903 = !DILocation(line: 1815, column: 37, scope: !9904)
!9904 = distinct !DILexicalBlock(scope: !9885, file: !3, line: 1815, column: 13)
!9905 = !DILocation(line: 1815, column: 47, scope: !9904)
!9906 = !DILocation(line: 1815, column: 21, scope: !9904)
!9907 = !DILocation(line: 1815, column: 19, scope: !9904)
!9908 = !DILocation(line: 1815, column: 58, scope: !9904)
!9909 = !DILocation(line: 1816, column: 7, scope: !9904)
!9910 = !DILocation(line: 1816, column: 10, scope: !9904)
!9911 = !DILocation(line: 1816, column: 14, scope: !9904)
!9912 = !DILocation(line: 1817, column: 6, scope: !9904)
!9913 = !DILocation(line: 1817, column: 25, scope: !9904)
!9914 = !DILocation(line: 1817, column: 35, scope: !9904)
!9915 = !DILocation(line: 1817, column: 9, scope: !9904)
!9916 = !DILocation(line: 1817, column: 45, scope: !9904)
!9917 = !DILocation(line: 1815, column: 13, scope: !9885)
!9918 = !DILocation(line: 1819, column: 8, scope: !9919)
!9919 = distinct !DILexicalBlock(scope: !9904, file: !3, line: 1818, column: 6)
!9920 = !DILocation(line: 1820, column: 37, scope: !9921)
!9921 = distinct !DILexicalBlock(scope: !9919, file: !3, line: 1820, column: 12)
!9922 = !DILocation(line: 1820, column: 12, scope: !9921)
!9923 = !DILocation(line: 1821, column: 5, scope: !9921)
!9924 = !DILocation(line: 1821, column: 24, scope: !9921)
!9925 = !DILocation(line: 1821, column: 8, scope: !9921)
!9926 = !DILocation(line: 1820, column: 12, scope: !9919)
!9927 = !DILocation(line: 1823, column: 38, scope: !9928)
!9928 = distinct !DILexicalBlock(scope: !9929, file: !3, line: 1823, column: 9)
!9929 = distinct !DILexicalBlock(scope: !9921, file: !3, line: 1822, column: 3)
!9930 = !DILocation(line: 1823, column: 10, scope: !9928)
!9931 = !DILocation(line: 1823, column: 9, scope: !9929)
!9932 = !DILocation(line: 1825, column: 37, scope: !9933)
!9933 = distinct !DILexicalBlock(scope: !9928, file: !3, line: 1824, column: 7)
!9934 = !DILocation(line: 1825, column: 9, scope: !9933)
!9935 = !DILocation(line: 1826, column: 9, scope: !9933)
!9936 = !DILocation(line: 1828, column: 39, scope: !9929)
!9937 = !DILocation(line: 1828, column: 11, scope: !9929)
!9938 = !DILocation(line: 1828, column: 9, scope: !9929)
!9939 = !DILocation(line: 1829, column: 3, scope: !9929)
!9940 = !DILocation(line: 1830, column: 18, scope: !9941)
!9941 = distinct !DILexicalBlock(scope: !9921, file: !3, line: 1830, column: 17)
!9942 = !DILocation(line: 1830, column: 17, scope: !9921)
!9943 = !DILocation(line: 1831, column: 9, scope: !9941)
!9944 = !DILocation(line: 1831, column: 7, scope: !9941)
!9945 = !DILocation(line: 1831, column: 3, scope: !9941)
!9946 = !DILocation(line: 1835, column: 9, scope: !9941)
!9947 = !DILocation(line: 1835, column: 7, scope: !9941)
!9948 = !DILocation(line: 1837, column: 14, scope: !9919)
!9949 = !DILocation(line: 1837, column: 12, scope: !9919)
!9950 = !DILocation(line: 1838, column: 25, scope: !9919)
!9951 = !DILocation(line: 1838, column: 41, scope: !9919)
!9952 = !DILocation(line: 1838, column: 46, scope: !9919)
!9953 = !DILocation(line: 1838, column: 51, scope: !9919)
!9954 = !DILocation(line: 1838, column: 57, scope: !9919)
!9955 = !DILocation(line: 1838, column: 8, scope: !9919)
!9956 = !DILocation(line: 1839, column: 6, scope: !9919)
!9957 = !DILocation(line: 1843, column: 29, scope: !9958)
!9958 = distinct !DILexicalBlock(scope: !9904, file: !3, line: 1843, column: 13)
!9959 = !DILocation(line: 1843, column: 39, scope: !9958)
!9960 = !DILocation(line: 1843, column: 13, scope: !9958)
!9961 = !DILocation(line: 1843, column: 49, scope: !9958)
!9962 = !DILocation(line: 1844, column: 6, scope: !9958)
!9963 = !DILocation(line: 1844, column: 33, scope: !9958)
!9964 = !DILocation(line: 1844, column: 43, scope: !9958)
!9965 = !DILocation(line: 1844, column: 17, scope: !9958)
!9966 = !DILocation(line: 1844, column: 15, scope: !9958)
!9967 = !DILocation(line: 1844, column: 54, scope: !9958)
!9968 = !DILocation(line: 1845, column: 10, scope: !9958)
!9969 = !DILocation(line: 1845, column: 13, scope: !9958)
!9970 = !DILocation(line: 1845, column: 17, scope: !9958)
!9971 = !DILocation(line: 1843, column: 13, scope: !9904)
!9972 = !DILocation(line: 1847, column: 8, scope: !9973)
!9973 = distinct !DILexicalBlock(scope: !9958, file: !3, line: 1846, column: 6)
!9974 = !DILocation(line: 1848, column: 37, scope: !9975)
!9975 = distinct !DILexicalBlock(scope: !9973, file: !3, line: 1848, column: 12)
!9976 = !DILocation(line: 1848, column: 12, scope: !9975)
!9977 = !DILocation(line: 1849, column: 5, scope: !9975)
!9978 = !DILocation(line: 1849, column: 24, scope: !9975)
!9979 = !DILocation(line: 1849, column: 8, scope: !9975)
!9980 = !DILocation(line: 1848, column: 12, scope: !9973)
!9981 = !DILocation(line: 1851, column: 38, scope: !9982)
!9982 = distinct !DILexicalBlock(scope: !9983, file: !3, line: 1851, column: 9)
!9983 = distinct !DILexicalBlock(scope: !9975, file: !3, line: 1850, column: 3)
!9984 = !DILocation(line: 1851, column: 10, scope: !9982)
!9985 = !DILocation(line: 1851, column: 9, scope: !9983)
!9986 = !DILocation(line: 1853, column: 37, scope: !9987)
!9987 = distinct !DILexicalBlock(scope: !9982, file: !3, line: 1852, column: 7)
!9988 = !DILocation(line: 1853, column: 9, scope: !9987)
!9989 = !DILocation(line: 1854, column: 9, scope: !9987)
!9990 = !DILocation(line: 1856, column: 39, scope: !9983)
!9991 = !DILocation(line: 1856, column: 11, scope: !9983)
!9992 = !DILocation(line: 1856, column: 9, scope: !9983)
!9993 = !DILocation(line: 1857, column: 3, scope: !9983)
!9994 = !DILocation(line: 1858, column: 18, scope: !9995)
!9995 = distinct !DILexicalBlock(scope: !9975, file: !3, line: 1858, column: 17)
!9996 = !DILocation(line: 1858, column: 17, scope: !9975)
!9997 = !DILocation(line: 1859, column: 9, scope: !9995)
!9998 = !DILocation(line: 1859, column: 7, scope: !9995)
!9999 = !DILocation(line: 1859, column: 3, scope: !9995)
!10000 = !DILocation(line: 1863, column: 9, scope: !9995)
!10001 = !DILocation(line: 1863, column: 7, scope: !9995)
!10002 = !DILocation(line: 1866, column: 14, scope: !9973)
!10003 = !DILocation(line: 1866, column: 12, scope: !9973)
!10004 = !DILocation(line: 1867, column: 25, scope: !9973)
!10005 = !DILocation(line: 1867, column: 41, scope: !9973)
!10006 = !DILocation(line: 1867, column: 46, scope: !9973)
!10007 = !DILocation(line: 1867, column: 51, scope: !9973)
!10008 = !DILocation(line: 1867, column: 57, scope: !9973)
!10009 = !DILocation(line: 1867, column: 8, scope: !9973)
!10010 = !DILocation(line: 1868, column: 6, scope: !9973)
!10011 = !DILocation(line: 1870, column: 5, scope: !9795)
!10012 = !DILocation(line: 1871, column: 1, scope: !9304)
!10013 = distinct !DISubprogram(name: "extract_range_from_ssa_name", scope: !3, file: !3, line: 1888, type: !4191, scopeLine: 1889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!10014 = !DILocalVariable(name: "vr", arg: 1, scope: !10013, file: !3, line: 1888, type: !1741)
!10015 = !DILocation(line: 1888, column: 45, scope: !10013)
!10016 = !DILocalVariable(name: "var", arg: 2, scope: !10013, file: !3, line: 1888, type: !1747)
!10017 = !DILocation(line: 1888, column: 54, scope: !10013)
!10018 = !DILocalVariable(name: "var_vr", scope: !10013, file: !3, line: 1890, type: !1741)
!10019 = !DILocation(line: 1890, column: 18, scope: !10013)
!10020 = !DILocation(line: 1890, column: 44, scope: !10013)
!10021 = !DILocation(line: 1890, column: 27, scope: !10013)
!10022 = !DILocation(line: 1892, column: 7, scope: !10023)
!10023 = distinct !DILexicalBlock(scope: !10013, file: !3, line: 1892, column: 7)
!10024 = !DILocation(line: 1892, column: 15, scope: !10023)
!10025 = !DILocation(line: 1892, column: 20, scope: !10023)
!10026 = !DILocation(line: 1892, column: 36, scope: !10023)
!10027 = !DILocation(line: 1892, column: 39, scope: !10023)
!10028 = !DILocation(line: 1892, column: 47, scope: !10023)
!10029 = !DILocation(line: 1892, column: 52, scope: !10023)
!10030 = !DILocation(line: 1892, column: 7, scope: !10013)
!10031 = !DILocation(line: 1893, column: 23, scope: !10023)
!10032 = !DILocation(line: 1893, column: 27, scope: !10023)
!10033 = !DILocation(line: 1893, column: 5, scope: !10023)
!10034 = !DILocation(line: 1895, column: 22, scope: !10023)
!10035 = !DILocation(line: 1895, column: 36, scope: !10023)
!10036 = !DILocation(line: 1895, column: 41, scope: !10023)
!10037 = !DILocation(line: 1895, column: 5, scope: !10023)
!10038 = !DILocation(line: 1897, column: 21, scope: !10013)
!10039 = !DILocation(line: 1897, column: 25, scope: !10013)
!10040 = !DILocation(line: 1897, column: 32, scope: !10013)
!10041 = !DILocation(line: 1897, column: 3, scope: !10013)
!10042 = !DILocation(line: 1898, column: 1, scope: !10013)
!10043 = distinct !DISubprogram(name: "extract_range_from_binary_expr", scope: !3, file: !3, line: 2052, type: !10044, scopeLine: 2055, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!10044 = !DISubroutineType(types: !10045)
!10045 = !{null, !1741, !134, !1747, !1747, !1747}
!10046 = !DILocalVariable(name: "vr", arg: 1, scope: !10043, file: !3, line: 2052, type: !1741)
!10047 = !DILocation(line: 2052, column: 48, scope: !10043)
!10048 = !DILocalVariable(name: "code", arg: 2, scope: !10043, file: !3, line: 2053, type: !134)
!10049 = !DILocation(line: 2053, column: 20, scope: !10043)
!10050 = !DILocalVariable(name: "expr_type", arg: 3, scope: !10043, file: !3, line: 2054, type: !1747)
!10051 = !DILocation(line: 2054, column: 10, scope: !10043)
!10052 = !DILocalVariable(name: "op0", arg: 4, scope: !10043, file: !3, line: 2054, type: !1747)
!10053 = !DILocation(line: 2054, column: 26, scope: !10043)
!10054 = !DILocalVariable(name: "op1", arg: 5, scope: !10043, file: !3, line: 2054, type: !1747)
!10055 = !DILocation(line: 2054, column: 36, scope: !10043)
!10056 = !DILocalVariable(name: "type", scope: !10043, file: !3, line: 2056, type: !390)
!10057 = !DILocation(line: 2056, column: 25, scope: !10043)
!10058 = !DILocalVariable(name: "min", scope: !10043, file: !3, line: 2057, type: !1747)
!10059 = !DILocation(line: 2057, column: 8, scope: !10043)
!10060 = !DILocalVariable(name: "max", scope: !10043, file: !3, line: 2057, type: !1747)
!10061 = !DILocation(line: 2057, column: 13, scope: !10043)
!10062 = !DILocalVariable(name: "cmp", scope: !10043, file: !3, line: 2058, type: !1740)
!10063 = !DILocation(line: 2058, column: 7, scope: !10043)
!10064 = !DILocalVariable(name: "vr0", scope: !10043, file: !3, line: 2059, type: !1742)
!10065 = !DILocation(line: 2059, column: 17, scope: !10043)
!10066 = !DILocalVariable(name: "vr1", scope: !10043, file: !3, line: 2060, type: !1742)
!10067 = !DILocation(line: 2060, column: 17, scope: !10043)
!10068 = !DILocation(line: 2064, column: 7, scope: !10069)
!10069 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 2064, column: 7)
!10070 = !DILocation(line: 2064, column: 12, scope: !10069)
!10071 = !DILocation(line: 2065, column: 7, scope: !10069)
!10072 = !DILocation(line: 2065, column: 10, scope: !10069)
!10073 = !DILocation(line: 2065, column: 15, scope: !10069)
!10074 = !DILocation(line: 2066, column: 7, scope: !10069)
!10075 = !DILocation(line: 2066, column: 10, scope: !10069)
!10076 = !DILocation(line: 2066, column: 15, scope: !10069)
!10077 = !DILocation(line: 2067, column: 7, scope: !10069)
!10078 = !DILocation(line: 2067, column: 10, scope: !10069)
!10079 = !DILocation(line: 2067, column: 15, scope: !10069)
!10080 = !DILocation(line: 2068, column: 7, scope: !10069)
!10081 = !DILocation(line: 2068, column: 10, scope: !10069)
!10082 = !DILocation(line: 2068, column: 15, scope: !10069)
!10083 = !DILocation(line: 2069, column: 7, scope: !10069)
!10084 = !DILocation(line: 2069, column: 10, scope: !10069)
!10085 = !DILocation(line: 2069, column: 15, scope: !10069)
!10086 = !DILocation(line: 2070, column: 7, scope: !10069)
!10087 = !DILocation(line: 2070, column: 10, scope: !10069)
!10088 = !DILocation(line: 2070, column: 15, scope: !10069)
!10089 = !DILocation(line: 2071, column: 7, scope: !10069)
!10090 = !DILocation(line: 2071, column: 10, scope: !10069)
!10091 = !DILocation(line: 2071, column: 15, scope: !10069)
!10092 = !DILocation(line: 2072, column: 7, scope: !10069)
!10093 = !DILocation(line: 2072, column: 10, scope: !10069)
!10094 = !DILocation(line: 2072, column: 15, scope: !10069)
!10095 = !DILocation(line: 2073, column: 7, scope: !10069)
!10096 = !DILocation(line: 2073, column: 10, scope: !10069)
!10097 = !DILocation(line: 2073, column: 15, scope: !10069)
!10098 = !DILocation(line: 2074, column: 7, scope: !10069)
!10099 = !DILocation(line: 2074, column: 10, scope: !10069)
!10100 = !DILocation(line: 2074, column: 15, scope: !10069)
!10101 = !DILocation(line: 2075, column: 7, scope: !10069)
!10102 = !DILocation(line: 2075, column: 10, scope: !10069)
!10103 = !DILocation(line: 2075, column: 15, scope: !10069)
!10104 = !DILocation(line: 2076, column: 7, scope: !10069)
!10105 = !DILocation(line: 2076, column: 10, scope: !10069)
!10106 = !DILocation(line: 2076, column: 15, scope: !10069)
!10107 = !DILocation(line: 2077, column: 7, scope: !10069)
!10108 = !DILocation(line: 2077, column: 10, scope: !10069)
!10109 = !DILocation(line: 2077, column: 15, scope: !10069)
!10110 = !DILocation(line: 2078, column: 7, scope: !10069)
!10111 = !DILocation(line: 2078, column: 10, scope: !10069)
!10112 = !DILocation(line: 2078, column: 15, scope: !10069)
!10113 = !DILocation(line: 2079, column: 7, scope: !10069)
!10114 = !DILocation(line: 2079, column: 10, scope: !10069)
!10115 = !DILocation(line: 2079, column: 15, scope: !10069)
!10116 = !DILocation(line: 2064, column: 7, scope: !10043)
!10117 = !DILocalVariable(name: "const_op0", scope: !10118, file: !3, line: 2082, type: !1747)
!10118 = distinct !DILexicalBlock(scope: !10069, file: !3, line: 2080, column: 5)
!10119 = !DILocation(line: 2082, column: 12, scope: !10118)
!10120 = !DILocation(line: 2082, column: 64, scope: !10118)
!10121 = !DILocation(line: 2082, column: 24, scope: !10118)
!10122 = !DILocalVariable(name: "const_op1", scope: !10118, file: !3, line: 2083, type: !1747)
!10123 = !DILocation(line: 2083, column: 12, scope: !10118)
!10124 = !DILocation(line: 2083, column: 64, scope: !10118)
!10125 = !DILocation(line: 2083, column: 24, scope: !10118)
!10126 = !DILocation(line: 2084, column: 11, scope: !10127)
!10127 = distinct !DILexicalBlock(scope: !10118, file: !3, line: 2084, column: 11)
!10128 = !DILocation(line: 2084, column: 21, scope: !10127)
!10129 = !DILocation(line: 2084, column: 24, scope: !10127)
!10130 = !DILocation(line: 2084, column: 11, scope: !10118)
!10131 = !DILocalVariable(name: "tem", scope: !10132, file: !3, line: 2086, type: !1747)
!10132 = distinct !DILexicalBlock(scope: !10127, file: !3, line: 2085, column: 2)
!10133 = !DILocation(line: 2086, column: 9, scope: !10132)
!10134 = !DILocation(line: 2086, column: 15, scope: !10132)
!10135 = !DILocation(line: 2089, column: 8, scope: !10136)
!10136 = distinct !DILexicalBlock(scope: !10132, file: !3, line: 2089, column: 8)
!10137 = !DILocation(line: 2090, column: 8, scope: !10136)
!10138 = !DILocation(line: 2090, column: 36, scope: !10136)
!10139 = !DILocation(line: 2090, column: 11, scope: !10136)
!10140 = !DILocation(line: 2091, column: 8, scope: !10136)
!10141 = !DILocation(line: 2091, column: 34, scope: !10136)
!10142 = !DILocation(line: 2091, column: 12, scope: !10136)
!10143 = !DILocation(line: 2089, column: 8, scope: !10132)
!10144 = !DILocation(line: 2093, column: 25, scope: !10145)
!10145 = distinct !DILexicalBlock(scope: !10136, file: !3, line: 2092, column: 6)
!10146 = !DILocation(line: 2093, column: 39, scope: !10145)
!10147 = !DILocation(line: 2093, column: 44, scope: !10145)
!10148 = !DILocation(line: 2093, column: 8, scope: !10145)
!10149 = !DILocation(line: 2094, column: 8, scope: !10145)
!10150 = !DILocation(line: 2096, column: 2, scope: !10132)
!10151 = !DILocation(line: 2097, column: 35, scope: !10118)
!10152 = !DILocation(line: 2097, column: 7, scope: !10118)
!10153 = !DILocation(line: 2098, column: 7, scope: !10118)
!10154 = !DILocation(line: 2103, column: 7, scope: !10155)
!10155 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 2103, column: 7)
!10156 = !DILocation(line: 2103, column: 23, scope: !10155)
!10157 = !DILocation(line: 2103, column: 7, scope: !10043)
!10158 = !DILocation(line: 2104, column: 30, scope: !10155)
!10159 = !DILocation(line: 2104, column: 13, scope: !10155)
!10160 = !DILocation(line: 2104, column: 11, scope: !10155)
!10161 = !DILocation(line: 2104, column: 5, scope: !10155)
!10162 = !DILocation(line: 2105, column: 37, scope: !10163)
!10163 = distinct !DILexicalBlock(scope: !10155, file: !3, line: 2105, column: 12)
!10164 = !DILocation(line: 2105, column: 12, scope: !10163)
!10165 = !DILocation(line: 2105, column: 12, scope: !10155)
!10166 = !DILocation(line: 2106, column: 37, scope: !10163)
!10167 = !DILocation(line: 2106, column: 5, scope: !10163)
!10168 = !DILocation(line: 2108, column: 5, scope: !10163)
!10169 = !DILocation(line: 2110, column: 7, scope: !10170)
!10170 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 2110, column: 7)
!10171 = !DILocation(line: 2110, column: 23, scope: !10170)
!10172 = !DILocation(line: 2110, column: 7, scope: !10043)
!10173 = !DILocation(line: 2111, column: 30, scope: !10170)
!10174 = !DILocation(line: 2111, column: 13, scope: !10170)
!10175 = !DILocation(line: 2111, column: 11, scope: !10170)
!10176 = !DILocation(line: 2111, column: 5, scope: !10170)
!10177 = !DILocation(line: 2112, column: 37, scope: !10178)
!10178 = distinct !DILexicalBlock(scope: !10170, file: !3, line: 2112, column: 12)
!10179 = !DILocation(line: 2112, column: 12, scope: !10178)
!10180 = !DILocation(line: 2112, column: 12, scope: !10170)
!10181 = !DILocation(line: 2113, column: 37, scope: !10178)
!10182 = !DILocation(line: 2113, column: 5, scope: !10178)
!10183 = !DILocation(line: 2115, column: 5, scope: !10178)
!10184 = !DILocation(line: 2118, column: 11, scope: !10185)
!10185 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 2118, column: 7)
!10186 = !DILocation(line: 2118, column: 16, scope: !10185)
!10187 = !DILocation(line: 2118, column: 32, scope: !10185)
!10188 = !DILocation(line: 2118, column: 39, scope: !10185)
!10189 = !DILocation(line: 2118, column: 44, scope: !10185)
!10190 = !DILocation(line: 2118, column: 7, scope: !10043)
!10191 = !DILocation(line: 2120, column: 37, scope: !10192)
!10192 = distinct !DILexicalBlock(scope: !10185, file: !3, line: 2119, column: 5)
!10193 = !DILocation(line: 2120, column: 7, scope: !10192)
!10194 = !DILocation(line: 2121, column: 7, scope: !10192)
!10195 = !DILocation(line: 2125, column: 14, scope: !10043)
!10196 = !DILocation(line: 2125, column: 8, scope: !10043)
!10197 = !DILocation(line: 2133, column: 7, scope: !10198)
!10198 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 2133, column: 7)
!10199 = !DILocation(line: 2133, column: 12, scope: !10198)
!10200 = !DILocation(line: 2134, column: 7, scope: !10198)
!10201 = !DILocation(line: 2134, column: 10, scope: !10198)
!10202 = !DILocation(line: 2134, column: 15, scope: !10198)
!10203 = !DILocation(line: 2135, column: 7, scope: !10198)
!10204 = !DILocation(line: 2135, column: 10, scope: !10198)
!10205 = !DILocation(line: 2135, column: 15, scope: !10198)
!10206 = !DILocation(line: 2136, column: 7, scope: !10198)
!10207 = !DILocation(line: 2136, column: 10, scope: !10198)
!10208 = !DILocation(line: 2136, column: 15, scope: !10198)
!10209 = !DILocation(line: 2137, column: 7, scope: !10198)
!10210 = !DILocation(line: 2137, column: 10, scope: !10198)
!10211 = !DILocation(line: 2137, column: 15, scope: !10198)
!10212 = !DILocation(line: 2138, column: 7, scope: !10198)
!10213 = !DILocation(line: 2138, column: 10, scope: !10198)
!10214 = !DILocation(line: 2138, column: 15, scope: !10198)
!10215 = !DILocation(line: 2139, column: 7, scope: !10198)
!10216 = !DILocation(line: 2139, column: 10, scope: !10198)
!10217 = !DILocation(line: 2139, column: 15, scope: !10198)
!10218 = !DILocation(line: 2140, column: 7, scope: !10198)
!10219 = !DILocation(line: 2140, column: 10, scope: !10198)
!10220 = !DILocation(line: 2140, column: 15, scope: !10198)
!10221 = !DILocation(line: 2141, column: 7, scope: !10198)
!10222 = !DILocation(line: 2141, column: 15, scope: !10198)
!10223 = !DILocation(line: 2141, column: 20, scope: !10198)
!10224 = !DILocation(line: 2142, column: 4, scope: !10198)
!10225 = !DILocation(line: 2142, column: 11, scope: !10198)
!10226 = !DILocation(line: 2142, column: 16, scope: !10198)
!10227 = !DILocation(line: 2143, column: 4, scope: !10198)
!10228 = !DILocation(line: 2143, column: 11, scope: !10198)
!10229 = !DILocation(line: 2143, column: 23, scope: !10198)
!10230 = !DILocation(line: 2143, column: 16, scope: !10198)
!10231 = !DILocation(line: 2144, column: 4, scope: !10198)
!10232 = !DILocation(line: 2144, column: 7, scope: !10198)
!10233 = !DILocation(line: 2145, column: 4, scope: !10198)
!10234 = !DILocation(line: 2145, column: 7, scope: !10198)
!10235 = !DILocation(line: 2133, column: 7, scope: !10043)
!10236 = !DILocation(line: 2147, column: 35, scope: !10237)
!10237 = distinct !DILexicalBlock(scope: !10198, file: !3, line: 2146, column: 5)
!10238 = !DILocation(line: 2147, column: 7, scope: !10237)
!10239 = !DILocation(line: 2148, column: 7, scope: !10237)
!10240 = !DILocation(line: 2152, column: 7, scope: !10241)
!10241 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 2152, column: 7)
!10242 = !DILocation(line: 2153, column: 7, scope: !10241)
!10243 = !DILocation(line: 2153, column: 10, scope: !10241)
!10244 = !DILocation(line: 2154, column: 7, scope: !10241)
!10245 = !DILocation(line: 2154, column: 10, scope: !10241)
!10246 = !DILocation(line: 2152, column: 7, scope: !10043)
!10247 = !DILocation(line: 2156, column: 11, scope: !10248)
!10248 = distinct !DILexicalBlock(scope: !10249, file: !3, line: 2156, column: 11)
!10249 = distinct !DILexicalBlock(scope: !10241, file: !3, line: 2155, column: 5)
!10250 = !DILocation(line: 2156, column: 16, scope: !10248)
!10251 = !DILocation(line: 2156, column: 28, scope: !10248)
!10252 = !DILocation(line: 2156, column: 31, scope: !10248)
!10253 = !DILocation(line: 2156, column: 36, scope: !10248)
!10254 = !DILocation(line: 2156, column: 11, scope: !10249)
!10255 = !DILocation(line: 2162, column: 8, scope: !10256)
!10256 = distinct !DILexicalBlock(scope: !10257, file: !3, line: 2162, column: 8)
!10257 = distinct !DILexicalBlock(scope: !10248, file: !3, line: 2157, column: 2)
!10258 = !DILocation(line: 2162, column: 32, scope: !10256)
!10259 = !DILocation(line: 2162, column: 35, scope: !10256)
!10260 = !DILocation(line: 2162, column: 8, scope: !10257)
!10261 = !DILocation(line: 2163, column: 34, scope: !10256)
!10262 = !DILocation(line: 2163, column: 38, scope: !10256)
!10263 = !DILocation(line: 2163, column: 6, scope: !10256)
!10264 = !DILocation(line: 2164, column: 13, scope: !10265)
!10265 = distinct !DILexicalBlock(scope: !10256, file: !3, line: 2164, column: 13)
!10266 = !DILocation(line: 2164, column: 34, scope: !10265)
!10267 = !DILocation(line: 2164, column: 37, scope: !10265)
!10268 = !DILocation(line: 2164, column: 13, scope: !10256)
!10269 = !DILocation(line: 2165, column: 31, scope: !10265)
!10270 = !DILocation(line: 2165, column: 35, scope: !10265)
!10271 = !DILocation(line: 2165, column: 6, scope: !10265)
!10272 = !DILocation(line: 2167, column: 34, scope: !10265)
!10273 = !DILocation(line: 2167, column: 6, scope: !10265)
!10274 = !DILocation(line: 2169, column: 4, scope: !10257)
!10275 = !DILocation(line: 2171, column: 7, scope: !10249)
!10276 = !DILocation(line: 2174, column: 11, scope: !10277)
!10277 = distinct !DILexicalBlock(scope: !10249, file: !3, line: 2174, column: 11)
!10278 = !DILocation(line: 2174, column: 35, scope: !10277)
!10279 = !DILocation(line: 2174, column: 38, scope: !10277)
!10280 = !DILocation(line: 2174, column: 11, scope: !10249)
!10281 = !DILocation(line: 2175, column: 30, scope: !10277)
!10282 = !DILocation(line: 2175, column: 34, scope: !10277)
!10283 = !DILocation(line: 2175, column: 2, scope: !10277)
!10284 = !DILocation(line: 2176, column: 16, scope: !10285)
!10285 = distinct !DILexicalBlock(scope: !10277, file: !3, line: 2176, column: 16)
!10286 = !DILocation(line: 2176, column: 37, scope: !10285)
!10287 = !DILocation(line: 2176, column: 40, scope: !10285)
!10288 = !DILocation(line: 2176, column: 16, scope: !10277)
!10289 = !DILocation(line: 2177, column: 27, scope: !10285)
!10290 = !DILocation(line: 2177, column: 31, scope: !10285)
!10291 = !DILocation(line: 2177, column: 2, scope: !10285)
!10292 = !DILocation(line: 2179, column: 30, scope: !10285)
!10293 = !DILocation(line: 2179, column: 2, scope: !10285)
!10294 = !DILocation(line: 2181, column: 7, scope: !10249)
!10295 = !DILocation(line: 2186, column: 7, scope: !10296)
!10296 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 2186, column: 7)
!10297 = !DILocation(line: 2186, column: 12, scope: !10296)
!10298 = !DILocation(line: 2187, column: 7, scope: !10296)
!10299 = !DILocation(line: 2187, column: 10, scope: !10296)
!10300 = !DILocation(line: 2187, column: 15, scope: !10296)
!10301 = !DILocation(line: 2186, column: 7, scope: !10043)
!10302 = !DILocation(line: 2191, column: 11, scope: !10303)
!10303 = distinct !DILexicalBlock(scope: !10304, file: !3, line: 2191, column: 11)
!10304 = distinct !DILexicalBlock(scope: !10296, file: !3, line: 2188, column: 5)
!10305 = !DILocation(line: 2191, column: 16, scope: !10303)
!10306 = !DILocation(line: 2192, column: 4, scope: !10303)
!10307 = !DILocation(line: 2192, column: 13, scope: !10303)
!10308 = !DILocation(line: 2192, column: 18, scope: !10303)
!10309 = !DILocation(line: 2193, column: 9, scope: !10303)
!10310 = !DILocation(line: 2193, column: 31, scope: !10303)
!10311 = !DILocation(line: 2193, column: 12, scope: !10303)
!10312 = !DILocation(line: 2194, column: 9, scope: !10303)
!10313 = !DILocation(line: 2194, column: 31, scope: !10303)
!10314 = !DILocation(line: 2194, column: 12, scope: !10303)
!10315 = !DILocation(line: 2195, column: 8, scope: !10303)
!10316 = !DILocation(line: 2195, column: 16, scope: !10303)
!10317 = !DILocation(line: 2195, column: 21, scope: !10303)
!10318 = !DILocation(line: 2196, column: 5, scope: !10303)
!10319 = !DILocation(line: 2196, column: 27, scope: !10303)
!10320 = !DILocation(line: 2196, column: 8, scope: !10303)
!10321 = !DILocation(line: 2197, column: 5, scope: !10303)
!10322 = !DILocation(line: 2197, column: 27, scope: !10303)
!10323 = !DILocation(line: 2197, column: 8, scope: !10303)
!10324 = !DILocation(line: 2191, column: 11, scope: !10304)
!10325 = !DILocation(line: 2199, column: 9, scope: !10326)
!10326 = distinct !DILexicalBlock(scope: !10303, file: !3, line: 2198, column: 2)
!10327 = !DILocation(line: 2200, column: 31, scope: !10326)
!10328 = !DILocation(line: 2200, column: 16, scope: !10326)
!10329 = !DILocation(line: 2200, column: 14, scope: !10326)
!10330 = !DILocation(line: 2200, column: 8, scope: !10326)
!10331 = !DILocation(line: 2201, column: 2, scope: !10326)
!10332 = !DILocation(line: 2204, column: 16, scope: !10333)
!10333 = distinct !DILexicalBlock(scope: !10303, file: !3, line: 2204, column: 16)
!10334 = !DILocation(line: 2204, column: 21, scope: !10333)
!10335 = !DILocation(line: 2205, column: 9, scope: !10333)
!10336 = !DILocation(line: 2205, column: 18, scope: !10333)
!10337 = !DILocation(line: 2205, column: 23, scope: !10333)
!10338 = !DILocation(line: 2206, column: 7, scope: !10333)
!10339 = !DILocation(line: 2206, column: 28, scope: !10333)
!10340 = !DILocation(line: 2206, column: 10, scope: !10333)
!10341 = !DILocation(line: 2207, column: 7, scope: !10333)
!10342 = !DILocation(line: 2207, column: 28, scope: !10333)
!10343 = !DILocation(line: 2207, column: 10, scope: !10333)
!10344 = !DILocation(line: 2208, column: 6, scope: !10333)
!10345 = !DILocation(line: 2208, column: 14, scope: !10333)
!10346 = !DILocation(line: 2208, column: 19, scope: !10333)
!10347 = !DILocation(line: 2209, column: 10, scope: !10333)
!10348 = !DILocation(line: 2209, column: 31, scope: !10333)
!10349 = !DILocation(line: 2209, column: 13, scope: !10333)
!10350 = !DILocation(line: 2210, column: 10, scope: !10333)
!10351 = !DILocation(line: 2210, column: 31, scope: !10333)
!10352 = !DILocation(line: 2210, column: 13, scope: !10333)
!10353 = !DILocation(line: 2204, column: 16, scope: !10303)
!10354 = !DILocation(line: 2212, column: 9, scope: !10355)
!10355 = distinct !DILexicalBlock(scope: !10333, file: !3, line: 2211, column: 2)
!10356 = !DILocation(line: 2213, column: 31, scope: !10355)
!10357 = !DILocation(line: 2213, column: 16, scope: !10355)
!10358 = !DILocation(line: 2213, column: 14, scope: !10355)
!10359 = !DILocation(line: 2213, column: 8, scope: !10355)
!10360 = !DILocation(line: 2214, column: 2, scope: !10355)
!10361 = !DILocation(line: 2215, column: 20, scope: !10362)
!10362 = distinct !DILexicalBlock(scope: !10333, file: !3, line: 2215, column: 16)
!10363 = !DILocation(line: 2215, column: 25, scope: !10362)
!10364 = !DILocation(line: 2216, column: 9, scope: !10362)
!10365 = !DILocation(line: 2216, column: 16, scope: !10362)
!10366 = !DILocation(line: 2216, column: 21, scope: !10362)
!10367 = !DILocation(line: 2217, column: 9, scope: !10362)
!10368 = !DILocation(line: 2217, column: 16, scope: !10362)
!10369 = !DILocation(line: 2217, column: 28, scope: !10362)
!10370 = !DILocation(line: 2217, column: 21, scope: !10362)
!10371 = !DILocation(line: 2218, column: 9, scope: !10362)
!10372 = !DILocation(line: 2218, column: 13, scope: !10362)
!10373 = !DILocation(line: 2219, column: 9, scope: !10362)
!10374 = !DILocation(line: 2219, column: 13, scope: !10362)
!10375 = !DILocation(line: 2220, column: 9, scope: !10362)
!10376 = !DILocation(line: 2220, column: 13, scope: !10362)
!10377 = !DILocation(line: 2221, column: 9, scope: !10362)
!10378 = !DILocation(line: 2221, column: 13, scope: !10362)
!10379 = !DILocation(line: 2215, column: 16, scope: !10333)
!10380 = !DILocation(line: 2224, column: 10, scope: !10381)
!10381 = distinct !DILexicalBlock(scope: !10362, file: !3, line: 2222, column: 2)
!10382 = !DILocation(line: 2224, column: 8, scope: !10381)
!10383 = !DILocation(line: 2225, column: 10, scope: !10381)
!10384 = !DILocation(line: 2225, column: 8, scope: !10381)
!10385 = !DILocation(line: 2226, column: 2, scope: !10381)
!10386 = !DILocation(line: 2230, column: 35, scope: !10387)
!10387 = distinct !DILexicalBlock(scope: !10362, file: !3, line: 2228, column: 2)
!10388 = !DILocation(line: 2230, column: 39, scope: !10387)
!10389 = !DILocation(line: 2230, column: 4, scope: !10387)
!10390 = !DILocation(line: 2231, column: 4, scope: !10387)
!10391 = !DILocation(line: 2233, column: 5, scope: !10304)
!10392 = !DILocation(line: 2234, column: 12, scope: !10393)
!10393 = distinct !DILexicalBlock(scope: !10296, file: !3, line: 2234, column: 12)
!10394 = !DILocation(line: 2234, column: 17, scope: !10393)
!10395 = !DILocation(line: 2235, column: 5, scope: !10393)
!10396 = !DILocation(line: 2235, column: 8, scope: !10393)
!10397 = !DILocation(line: 2235, column: 13, scope: !10393)
!10398 = !DILocation(line: 2236, column: 5, scope: !10393)
!10399 = !DILocation(line: 2236, column: 8, scope: !10393)
!10400 = !DILocation(line: 2236, column: 13, scope: !10393)
!10401 = !DILocation(line: 2234, column: 12, scope: !10296)
!10402 = !DILocation(line: 2245, column: 11, scope: !10403)
!10403 = distinct !DILexicalBlock(scope: !10404, file: !3, line: 2245, column: 11)
!10404 = distinct !DILexicalBlock(scope: !10393, file: !3, line: 2237, column: 5)
!10405 = !DILocation(line: 2245, column: 16, scope: !10403)
!10406 = !DILocation(line: 2245, column: 29, scope: !10403)
!10407 = !DILocation(line: 2245, column: 36, scope: !10403)
!10408 = !DILocation(line: 2245, column: 41, scope: !10403)
!10409 = !DILocation(line: 2245, column: 11, scope: !10404)
!10410 = !DILocation(line: 2247, column: 32, scope: !10411)
!10411 = distinct !DILexicalBlock(scope: !10403, file: !3, line: 2246, column: 2)
!10412 = !DILocation(line: 2247, column: 4, scope: !10411)
!10413 = !DILocation(line: 2248, column: 4, scope: !10411)
!10414 = !DILocation(line: 2254, column: 34, scope: !10404)
!10415 = !DILocation(line: 2254, column: 44, scope: !10404)
!10416 = !DILocation(line: 2254, column: 53, scope: !10404)
!10417 = !DILocation(line: 2254, column: 13, scope: !10404)
!10418 = !DILocation(line: 2254, column: 11, scope: !10404)
!10419 = !DILocation(line: 2255, column: 34, scope: !10404)
!10420 = !DILocation(line: 2255, column: 44, scope: !10404)
!10421 = !DILocation(line: 2255, column: 53, scope: !10404)
!10422 = !DILocation(line: 2255, column: 13, scope: !10404)
!10423 = !DILocation(line: 2255, column: 11, scope: !10404)
!10424 = !DILocation(line: 2261, column: 11, scope: !10425)
!10425 = distinct !DILexicalBlock(scope: !10404, file: !3, line: 2261, column: 11)
!10426 = !DILocation(line: 2261, column: 16, scope: !10425)
!10427 = !DILocation(line: 2262, column: 4, scope: !10425)
!10428 = !DILocation(line: 2262, column: 8, scope: !10425)
!10429 = !DILocation(line: 2262, column: 28, scope: !10425)
!10430 = !DILocation(line: 2262, column: 54, scope: !10425)
!10431 = !DILocation(line: 2262, column: 32, scope: !10425)
!10432 = !DILocation(line: 2263, column: 4, scope: !10425)
!10433 = !DILocation(line: 2263, column: 8, scope: !10425)
!10434 = !DILocation(line: 2263, column: 28, scope: !10425)
!10435 = !DILocation(line: 2263, column: 54, scope: !10425)
!10436 = !DILocation(line: 2263, column: 32, scope: !10425)
!10437 = !DILocation(line: 2261, column: 11, scope: !10404)
!10438 = !DILocation(line: 2265, column: 30, scope: !10439)
!10439 = distinct !DILexicalBlock(scope: !10425, file: !3, line: 2264, column: 2)
!10440 = !DILocation(line: 2266, column: 9, scope: !10439)
!10441 = !DILocation(line: 2267, column: 9, scope: !10439)
!10442 = !DILocation(line: 2265, column: 10, scope: !10439)
!10443 = !DILocation(line: 2265, column: 8, scope: !10439)
!10444 = !DILocation(line: 2268, column: 30, scope: !10439)
!10445 = !DILocation(line: 2269, column: 9, scope: !10439)
!10446 = !DILocation(line: 2270, column: 9, scope: !10439)
!10447 = !DILocation(line: 2268, column: 10, scope: !10439)
!10448 = !DILocation(line: 2268, column: 8, scope: !10439)
!10449 = !DILocation(line: 2271, column: 2, scope: !10439)
!10450 = !DILocation(line: 2272, column: 5, scope: !10404)
!10451 = !DILocation(line: 2273, column: 12, scope: !10452)
!10452 = distinct !DILexicalBlock(scope: !10393, file: !3, line: 2273, column: 12)
!10453 = !DILocation(line: 2273, column: 17, scope: !10452)
!10454 = !DILocation(line: 2274, column: 5, scope: !10452)
!10455 = !DILocation(line: 2274, column: 8, scope: !10452)
!10456 = !DILocation(line: 2274, column: 13, scope: !10452)
!10457 = !DILocation(line: 2275, column: 5, scope: !10452)
!10458 = !DILocation(line: 2275, column: 8, scope: !10452)
!10459 = !DILocation(line: 2275, column: 13, scope: !10452)
!10460 = !DILocation(line: 2276, column: 5, scope: !10452)
!10461 = !DILocation(line: 2276, column: 8, scope: !10452)
!10462 = !DILocation(line: 2276, column: 13, scope: !10452)
!10463 = !DILocation(line: 2277, column: 5, scope: !10452)
!10464 = !DILocation(line: 2277, column: 8, scope: !10452)
!10465 = !DILocation(line: 2277, column: 13, scope: !10452)
!10466 = !DILocation(line: 2278, column: 5, scope: !10452)
!10467 = !DILocation(line: 2278, column: 8, scope: !10452)
!10468 = !DILocation(line: 2278, column: 13, scope: !10452)
!10469 = !DILocation(line: 2279, column: 5, scope: !10452)
!10470 = !DILocation(line: 2279, column: 8, scope: !10452)
!10471 = !DILocation(line: 2279, column: 13, scope: !10452)
!10472 = !DILocation(line: 2273, column: 12, scope: !10393)
!10473 = !DILocalVariable(name: "val", scope: !10474, file: !3, line: 2281, type: !10475)
!10474 = distinct !DILexicalBlock(scope: !10452, file: !3, line: 2280, column: 5)
!10475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1747, size: 256, elements: !2019)
!10476 = !DILocation(line: 2281, column: 12, scope: !10474)
!10477 = !DILocalVariable(name: "i", scope: !10474, file: !3, line: 2282, type: !2221)
!10478 = !DILocation(line: 2282, column: 14, scope: !10474)
!10479 = !DILocalVariable(name: "sop", scope: !10474, file: !3, line: 2283, type: !1866)
!10480 = !DILocation(line: 2283, column: 12, scope: !10474)
!10481 = !DILocation(line: 2293, column: 11, scope: !10482)
!10482 = distinct !DILexicalBlock(scope: !10474, file: !3, line: 2293, column: 11)
!10483 = !DILocation(line: 2293, column: 16, scope: !10482)
!10484 = !DILocation(line: 2294, column: 4, scope: !10482)
!10485 = !DILocation(line: 2294, column: 11, scope: !10482)
!10486 = !DILocation(line: 2294, column: 16, scope: !10482)
!10487 = !DILocation(line: 2295, column: 4, scope: !10482)
!10488 = !DILocation(line: 2295, column: 8, scope: !10482)
!10489 = !DILocation(line: 2293, column: 11, scope: !10474)
!10490 = !DILocation(line: 2297, column: 32, scope: !10491)
!10491 = distinct !DILexicalBlock(scope: !10482, file: !3, line: 2296, column: 2)
!10492 = !DILocation(line: 2297, column: 4, scope: !10491)
!10493 = !DILocation(line: 2298, column: 4, scope: !10491)
!10494 = !DILocation(line: 2306, column: 11, scope: !10495)
!10495 = distinct !DILexicalBlock(scope: !10474, file: !3, line: 2306, column: 11)
!10496 = !DILocation(line: 2306, column: 16, scope: !10495)
!10497 = !DILocation(line: 2306, column: 11, scope: !10474)
!10498 = !DILocation(line: 2308, column: 12, scope: !10499)
!10499 = distinct !DILexicalBlock(scope: !10500, file: !3, line: 2308, column: 8)
!10500 = distinct !DILexicalBlock(scope: !10495, file: !3, line: 2307, column: 2)
!10501 = !DILocation(line: 2308, column: 17, scope: !10499)
!10502 = !DILocation(line: 2309, column: 8, scope: !10499)
!10503 = !DILocation(line: 2309, column: 43, scope: !10499)
!10504 = !DILocation(line: 2309, column: 12, scope: !10499)
!10505 = !DILocation(line: 2310, column: 8, scope: !10499)
!10506 = !DILocation(line: 2311, column: 21, scope: !10499)
!10507 = !DILocation(line: 2312, column: 7, scope: !10499)
!10508 = !DILocation(line: 2312, column: 34, scope: !10499)
!10509 = !DILocation(line: 2311, column: 6, scope: !10499)
!10510 = !DILocation(line: 2313, column: 10, scope: !10499)
!10511 = !DILocation(line: 2310, column: 12, scope: !10499)
!10512 = !DILocation(line: 2313, column: 15, scope: !10499)
!10513 = !DILocation(line: 2308, column: 8, scope: !10500)
!10514 = !DILocation(line: 2315, column: 36, scope: !10515)
!10515 = distinct !DILexicalBlock(scope: !10499, file: !3, line: 2314, column: 6)
!10516 = !DILocation(line: 2315, column: 8, scope: !10515)
!10517 = !DILocation(line: 2316, column: 8, scope: !10515)
!10518 = !DILocation(line: 2318, column: 2, scope: !10500)
!10519 = !DILocation(line: 2320, column: 17, scope: !10520)
!10520 = distinct !DILexicalBlock(scope: !10495, file: !3, line: 2320, column: 16)
!10521 = !DILocation(line: 2320, column: 22, scope: !10520)
!10522 = !DILocation(line: 2321, column: 3, scope: !10520)
!10523 = !DILocation(line: 2321, column: 6, scope: !10520)
!10524 = !DILocation(line: 2321, column: 11, scope: !10520)
!10525 = !DILocation(line: 2322, column: 3, scope: !10520)
!10526 = !DILocation(line: 2322, column: 6, scope: !10520)
!10527 = !DILocation(line: 2322, column: 11, scope: !10520)
!10528 = !DILocation(line: 2323, column: 3, scope: !10520)
!10529 = !DILocation(line: 2323, column: 6, scope: !10520)
!10530 = !DILocation(line: 2323, column: 11, scope: !10520)
!10531 = !DILocation(line: 2324, column: 3, scope: !10520)
!10532 = !DILocation(line: 2324, column: 6, scope: !10520)
!10533 = !DILocation(line: 2324, column: 11, scope: !10520)
!10534 = !DILocation(line: 2325, column: 9, scope: !10520)
!10535 = !DILocation(line: 2325, column: 17, scope: !10520)
!10536 = !DILocation(line: 2325, column: 22, scope: !10520)
!10537 = !DILocation(line: 2325, column: 34, scope: !10520)
!10538 = !DILocation(line: 2325, column: 37, scope: !10520)
!10539 = !DILocation(line: 2320, column: 16, scope: !10495)
!10540 = !DILocation(line: 2330, column: 12, scope: !10541)
!10541 = distinct !DILexicalBlock(scope: !10542, file: !3, line: 2330, column: 8)
!10542 = distinct !DILexicalBlock(scope: !10520, file: !3, line: 2326, column: 2)
!10543 = !DILocation(line: 2330, column: 17, scope: !10541)
!10544 = !DILocation(line: 2331, column: 8, scope: !10541)
!10545 = !DILocation(line: 2331, column: 12, scope: !10541)
!10546 = !DILocation(line: 2332, column: 8, scope: !10541)
!10547 = !DILocation(line: 2332, column: 12, scope: !10541)
!10548 = !DILocation(line: 2330, column: 8, scope: !10542)
!10549 = !DILocation(line: 2334, column: 24, scope: !10550)
!10550 = distinct !DILexicalBlock(scope: !10541, file: !3, line: 2333, column: 6)
!10551 = !DILocation(line: 2334, column: 12, scope: !10550)
!10552 = !DILocation(line: 2334, column: 17, scope: !10550)
!10553 = !DILocation(line: 2335, column: 31, scope: !10550)
!10554 = !DILocation(line: 2335, column: 18, scope: !10550)
!10555 = !DILocation(line: 2335, column: 12, scope: !10550)
!10556 = !DILocation(line: 2335, column: 16, scope: !10550)
!10557 = !DILocation(line: 2336, column: 31, scope: !10550)
!10558 = !DILocation(line: 2336, column: 18, scope: !10550)
!10559 = !DILocation(line: 2336, column: 12, scope: !10550)
!10560 = !DILocation(line: 2336, column: 16, scope: !10550)
!10561 = !DILocation(line: 2337, column: 6, scope: !10550)
!10562 = !DILocation(line: 2340, column: 36, scope: !10563)
!10563 = distinct !DILexicalBlock(scope: !10541, file: !3, line: 2339, column: 6)
!10564 = !DILocation(line: 2340, column: 8, scope: !10563)
!10565 = !DILocation(line: 2341, column: 8, scope: !10563)
!10566 = !DILocation(line: 2343, column: 2, scope: !10542)
!10567 = !DILocation(line: 2348, column: 12, scope: !10568)
!10568 = distinct !DILexicalBlock(scope: !10474, file: !3, line: 2348, column: 11)
!10569 = !DILocation(line: 2348, column: 17, scope: !10568)
!10570 = !DILocation(line: 2349, column: 5, scope: !10568)
!10571 = !DILocation(line: 2349, column: 8, scope: !10568)
!10572 = !DILocation(line: 2349, column: 13, scope: !10568)
!10573 = !DILocation(line: 2350, column: 5, scope: !10568)
!10574 = !DILocation(line: 2350, column: 8, scope: !10568)
!10575 = !DILocation(line: 2350, column: 13, scope: !10568)
!10576 = !DILocation(line: 2351, column: 5, scope: !10568)
!10577 = !DILocation(line: 2351, column: 8, scope: !10568)
!10578 = !DILocation(line: 2351, column: 13, scope: !10568)
!10579 = !DILocation(line: 2352, column: 5, scope: !10568)
!10580 = !DILocation(line: 2352, column: 8, scope: !10568)
!10581 = !DILocation(line: 2352, column: 13, scope: !10568)
!10582 = !DILocation(line: 2353, column: 4, scope: !10568)
!10583 = !DILocation(line: 2353, column: 11, scope: !10568)
!10584 = !DILocation(line: 2353, column: 16, scope: !10568)
!10585 = !DILocation(line: 2354, column: 4, scope: !10568)
!10586 = !DILocation(line: 2354, column: 12, scope: !10568)
!10587 = !DILocation(line: 2354, column: 17, scope: !10568)
!10588 = !DILocation(line: 2355, column: 8, scope: !10568)
!10589 = !DILocation(line: 2355, column: 11, scope: !10568)
!10590 = !DILocation(line: 2356, column: 8, scope: !10568)
!10591 = !DILocation(line: 2356, column: 11, scope: !10568)
!10592 = !DILocation(line: 2348, column: 11, scope: !10474)
!10593 = !DILocalVariable(name: "zero", scope: !10594, file: !3, line: 2358, type: !1747)
!10594 = distinct !DILexicalBlock(scope: !10568, file: !3, line: 2357, column: 2)
!10595 = !DILocation(line: 2358, column: 9, scope: !10594)
!10596 = !DILocation(line: 2358, column: 31, scope: !10594)
!10597 = !DILocation(line: 2358, column: 16, scope: !10594)
!10598 = !DILocalVariable(name: "cmp", scope: !10594, file: !3, line: 2359, type: !1740)
!10599 = !DILocation(line: 2359, column: 8, scope: !10594)
!10600 = !DILocation(line: 2361, column: 8, scope: !10594)
!10601 = !DILocation(line: 2362, column: 8, scope: !10594)
!10602 = !DILocation(line: 2363, column: 8, scope: !10594)
!10603 = !DILocation(line: 2364, column: 39, scope: !10604)
!10604 = distinct !DILexicalBlock(scope: !10594, file: !3, line: 2364, column: 8)
!10605 = !DILocation(line: 2364, column: 8, scope: !10604)
!10606 = !DILocation(line: 2364, column: 50, scope: !10604)
!10607 = !DILocation(line: 2364, column: 54, scope: !10604)
!10608 = !DILocation(line: 2364, column: 8, scope: !10594)
!10609 = !DILocation(line: 2370, column: 34, scope: !10610)
!10610 = distinct !DILexicalBlock(scope: !10604, file: !3, line: 2365, column: 6)
!10611 = !DILocation(line: 2370, column: 39, scope: !10610)
!10612 = !DILocation(line: 2370, column: 14, scope: !10610)
!10613 = !DILocation(line: 2370, column: 12, scope: !10610)
!10614 = !DILocation(line: 2371, column: 12, scope: !10615)
!10615 = distinct !DILexicalBlock(scope: !10610, file: !3, line: 2371, column: 12)
!10616 = !DILocation(line: 2371, column: 16, scope: !10615)
!10617 = !DILocation(line: 2371, column: 12, scope: !10610)
!10618 = !DILocation(line: 2372, column: 9, scope: !10615)
!10619 = !DILocation(line: 2372, column: 7, scope: !10615)
!10620 = !DILocation(line: 2372, column: 3, scope: !10615)
!10621 = !DILocation(line: 2373, column: 17, scope: !10622)
!10622 = distinct !DILexicalBlock(scope: !10615, file: !3, line: 2373, column: 17)
!10623 = !DILocation(line: 2373, column: 21, scope: !10622)
!10624 = !DILocation(line: 2373, column: 26, scope: !10622)
!10625 = !DILocation(line: 2373, column: 29, scope: !10622)
!10626 = !DILocation(line: 2373, column: 33, scope: !10622)
!10627 = !DILocation(line: 2373, column: 17, scope: !10615)
!10628 = !DILocation(line: 2374, column: 13, scope: !10622)
!10629 = !DILocation(line: 2374, column: 7, scope: !10622)
!10630 = !DILocation(line: 2374, column: 3, scope: !10622)
!10631 = !DILocation(line: 2376, column: 8, scope: !10622)
!10632 = !DILocation(line: 2377, column: 34, scope: !10610)
!10633 = !DILocation(line: 2377, column: 39, scope: !10610)
!10634 = !DILocation(line: 2377, column: 14, scope: !10610)
!10635 = !DILocation(line: 2377, column: 12, scope: !10610)
!10636 = !DILocation(line: 2378, column: 12, scope: !10637)
!10637 = distinct !DILexicalBlock(scope: !10610, file: !3, line: 2378, column: 12)
!10638 = !DILocation(line: 2378, column: 16, scope: !10637)
!10639 = !DILocation(line: 2378, column: 12, scope: !10610)
!10640 = !DILocation(line: 2379, column: 9, scope: !10637)
!10641 = !DILocation(line: 2379, column: 7, scope: !10637)
!10642 = !DILocation(line: 2379, column: 3, scope: !10637)
!10643 = !DILocation(line: 2380, column: 17, scope: !10644)
!10644 = distinct !DILexicalBlock(scope: !10637, file: !3, line: 2380, column: 17)
!10645 = !DILocation(line: 2380, column: 21, scope: !10644)
!10646 = !DILocation(line: 2380, column: 26, scope: !10644)
!10647 = !DILocation(line: 2380, column: 29, scope: !10644)
!10648 = !DILocation(line: 2380, column: 33, scope: !10644)
!10649 = !DILocation(line: 2380, column: 17, scope: !10637)
!10650 = !DILocation(line: 2381, column: 13, scope: !10644)
!10651 = !DILocation(line: 2381, column: 7, scope: !10644)
!10652 = !DILocation(line: 2381, column: 3, scope: !10644)
!10653 = !DILocation(line: 2383, column: 8, scope: !10644)
!10654 = !DILocation(line: 2384, column: 6, scope: !10610)
!10655 = !DILocation(line: 2390, column: 26, scope: !10656)
!10656 = distinct !DILexicalBlock(scope: !10604, file: !3, line: 2386, column: 6)
!10657 = !DILocation(line: 2390, column: 34, scope: !10656)
!10658 = !DILocation(line: 2390, column: 43, scope: !10656)
!10659 = !DILocation(line: 2390, column: 8, scope: !10656)
!10660 = !DILocation(line: 2391, column: 8, scope: !10656)
!10661 = !DILocation(line: 2393, column: 8, scope: !10662)
!10662 = distinct !DILexicalBlock(scope: !10594, file: !3, line: 2393, column: 8)
!10663 = !DILocation(line: 2393, column: 13, scope: !10662)
!10664 = !DILocation(line: 2393, column: 8, scope: !10594)
!10665 = !DILocation(line: 2395, column: 36, scope: !10666)
!10666 = distinct !DILexicalBlock(scope: !10662, file: !3, line: 2394, column: 6)
!10667 = !DILocation(line: 2395, column: 8, scope: !10666)
!10668 = !DILocation(line: 2396, column: 8, scope: !10666)
!10669 = !DILocation(line: 2398, column: 2, scope: !10594)
!10670 = !DILocation(line: 2414, column: 4, scope: !10671)
!10671 = distinct !DILexicalBlock(scope: !10568, file: !3, line: 2413, column: 2)
!10672 = !DILocation(line: 2419, column: 8, scope: !10671)
!10673 = !DILocation(line: 2420, column: 34, scope: !10671)
!10674 = !DILocation(line: 2420, column: 44, scope: !10671)
!10675 = !DILocation(line: 2420, column: 53, scope: !10671)
!10676 = !DILocation(line: 2420, column: 13, scope: !10671)
!10677 = !DILocation(line: 2420, column: 4, scope: !10671)
!10678 = !DILocation(line: 2420, column: 11, scope: !10671)
!10679 = !DILocation(line: 2421, column: 8, scope: !10680)
!10680 = distinct !DILexicalBlock(scope: !10671, file: !3, line: 2421, column: 8)
!10681 = !DILocation(line: 2421, column: 15, scope: !10680)
!10682 = !DILocation(line: 2421, column: 8, scope: !10671)
!10683 = !DILocation(line: 2422, column: 10, scope: !10680)
!10684 = !DILocation(line: 2422, column: 6, scope: !10680)
!10685 = !DILocation(line: 2424, column: 12, scope: !10686)
!10686 = distinct !DILexicalBlock(scope: !10671, file: !3, line: 2424, column: 8)
!10687 = !DILocation(line: 2424, column: 23, scope: !10686)
!10688 = !DILocation(line: 2424, column: 16, scope: !10686)
!10689 = !DILocation(line: 2424, column: 8, scope: !10671)
!10690 = !DILocation(line: 2425, column: 6, scope: !10686)
!10691 = !DILocation(line: 2425, column: 13, scope: !10686)
!10692 = !DILocation(line: 2428, column: 38, scope: !10693)
!10693 = distinct !DILexicalBlock(scope: !10686, file: !3, line: 2427, column: 6)
!10694 = !DILocation(line: 2428, column: 48, scope: !10693)
!10695 = !DILocation(line: 2428, column: 57, scope: !10693)
!10696 = !DILocation(line: 2428, column: 17, scope: !10693)
!10697 = !DILocation(line: 2428, column: 8, scope: !10693)
!10698 = !DILocation(line: 2428, column: 15, scope: !10693)
!10699 = !DILocation(line: 2429, column: 12, scope: !10700)
!10700 = distinct !DILexicalBlock(scope: !10693, file: !3, line: 2429, column: 12)
!10701 = !DILocation(line: 2429, column: 19, scope: !10700)
!10702 = !DILocation(line: 2429, column: 12, scope: !10693)
!10703 = !DILocation(line: 2430, column: 7, scope: !10700)
!10704 = !DILocation(line: 2430, column: 3, scope: !10700)
!10705 = !DILocation(line: 2433, column: 12, scope: !10706)
!10706 = distinct !DILexicalBlock(scope: !10671, file: !3, line: 2433, column: 8)
!10707 = !DILocation(line: 2433, column: 23, scope: !10706)
!10708 = !DILocation(line: 2433, column: 16, scope: !10706)
!10709 = !DILocation(line: 2433, column: 8, scope: !10671)
!10710 = !DILocation(line: 2434, column: 6, scope: !10706)
!10711 = !DILocation(line: 2434, column: 13, scope: !10706)
!10712 = !DILocation(line: 2437, column: 38, scope: !10713)
!10713 = distinct !DILexicalBlock(scope: !10706, file: !3, line: 2436, column: 6)
!10714 = !DILocation(line: 2437, column: 48, scope: !10713)
!10715 = !DILocation(line: 2437, column: 57, scope: !10713)
!10716 = !DILocation(line: 2437, column: 17, scope: !10713)
!10717 = !DILocation(line: 2437, column: 8, scope: !10713)
!10718 = !DILocation(line: 2437, column: 15, scope: !10713)
!10719 = !DILocation(line: 2438, column: 12, scope: !10720)
!10720 = distinct !DILexicalBlock(scope: !10713, file: !3, line: 2438, column: 12)
!10721 = !DILocation(line: 2438, column: 19, scope: !10720)
!10722 = !DILocation(line: 2438, column: 12, scope: !10713)
!10723 = !DILocation(line: 2439, column: 7, scope: !10720)
!10724 = !DILocation(line: 2439, column: 3, scope: !10720)
!10725 = !DILocation(line: 2442, column: 12, scope: !10726)
!10726 = distinct !DILexicalBlock(scope: !10671, file: !3, line: 2442, column: 8)
!10727 = !DILocation(line: 2442, column: 23, scope: !10726)
!10728 = !DILocation(line: 2442, column: 16, scope: !10726)
!10729 = !DILocation(line: 2442, column: 27, scope: !10726)
!10730 = !DILocation(line: 2442, column: 34, scope: !10726)
!10731 = !DILocation(line: 2442, column: 45, scope: !10726)
!10732 = !DILocation(line: 2442, column: 38, scope: !10726)
!10733 = !DILocation(line: 2442, column: 8, scope: !10671)
!10734 = !DILocation(line: 2443, column: 6, scope: !10726)
!10735 = !DILocation(line: 2443, column: 13, scope: !10726)
!10736 = !DILocation(line: 2446, column: 38, scope: !10737)
!10737 = distinct !DILexicalBlock(scope: !10726, file: !3, line: 2445, column: 6)
!10738 = !DILocation(line: 2446, column: 48, scope: !10737)
!10739 = !DILocation(line: 2446, column: 57, scope: !10737)
!10740 = !DILocation(line: 2446, column: 17, scope: !10737)
!10741 = !DILocation(line: 2446, column: 8, scope: !10737)
!10742 = !DILocation(line: 2446, column: 15, scope: !10737)
!10743 = !DILocation(line: 2447, column: 12, scope: !10744)
!10744 = distinct !DILexicalBlock(scope: !10737, file: !3, line: 2447, column: 12)
!10745 = !DILocation(line: 2447, column: 19, scope: !10744)
!10746 = !DILocation(line: 2447, column: 12, scope: !10737)
!10747 = !DILocation(line: 2448, column: 7, scope: !10744)
!10748 = !DILocation(line: 2448, column: 3, scope: !10744)
!10749 = !DILocation(line: 2451, column: 8, scope: !10750)
!10750 = distinct !DILexicalBlock(scope: !10671, file: !3, line: 2451, column: 8)
!10751 = !DILocation(line: 2451, column: 8, scope: !10671)
!10752 = !DILocation(line: 2453, column: 36, scope: !10753)
!10753 = distinct !DILexicalBlock(scope: !10750, file: !3, line: 2452, column: 6)
!10754 = !DILocation(line: 2453, column: 8, scope: !10753)
!10755 = !DILocation(line: 2454, column: 8, scope: !10753)
!10756 = !DILocation(line: 2459, column: 10, scope: !10671)
!10757 = !DILocation(line: 2459, column: 8, scope: !10671)
!10758 = !DILocation(line: 2460, column: 10, scope: !10671)
!10759 = !DILocation(line: 2460, column: 8, scope: !10671)
!10760 = !DILocation(line: 2461, column: 11, scope: !10761)
!10761 = distinct !DILexicalBlock(scope: !10671, file: !3, line: 2461, column: 4)
!10762 = !DILocation(line: 2461, column: 9, scope: !10761)
!10763 = !DILocation(line: 2461, column: 16, scope: !10764)
!10764 = distinct !DILexicalBlock(scope: !10761, file: !3, line: 2461, column: 4)
!10765 = !DILocation(line: 2461, column: 18, scope: !10764)
!10766 = !DILocation(line: 2461, column: 4, scope: !10761)
!10767 = !DILocation(line: 2463, column: 38, scope: !10768)
!10768 = distinct !DILexicalBlock(scope: !10769, file: !3, line: 2463, column: 12)
!10769 = distinct !DILexicalBlock(scope: !10764, file: !3, line: 2462, column: 6)
!10770 = !DILocation(line: 2463, column: 13, scope: !10768)
!10771 = !DILocation(line: 2464, column: 5, scope: !10768)
!10772 = !DILocation(line: 2464, column: 9, scope: !10768)
!10773 = !DILocation(line: 2464, column: 29, scope: !10768)
!10774 = !DILocation(line: 2464, column: 55, scope: !10768)
!10775 = !DILocation(line: 2464, column: 33, scope: !10768)
!10776 = !DILocation(line: 2465, column: 5, scope: !10768)
!10777 = !DILocation(line: 2465, column: 34, scope: !10768)
!10778 = !DILocation(line: 2465, column: 9, scope: !10768)
!10779 = !DILocation(line: 2466, column: 5, scope: !10768)
!10780 = !DILocation(line: 2466, column: 9, scope: !10768)
!10781 = !DILocation(line: 2466, column: 29, scope: !10768)
!10782 = !DILocation(line: 2466, column: 55, scope: !10768)
!10783 = !DILocation(line: 2466, column: 33, scope: !10768)
!10784 = !DILocation(line: 2463, column: 12, scope: !10769)
!10785 = !DILocation(line: 2467, column: 3, scope: !10768)
!10786 = !DILocation(line: 2469, column: 16, scope: !10787)
!10787 = distinct !DILexicalBlock(scope: !10769, file: !3, line: 2469, column: 12)
!10788 = !DILocation(line: 2469, column: 12, scope: !10787)
!10789 = !DILocation(line: 2469, column: 12, scope: !10769)
!10790 = !DILocation(line: 2471, column: 39, scope: !10791)
!10791 = distinct !DILexicalBlock(scope: !10792, file: !3, line: 2471, column: 9)
!10792 = distinct !DILexicalBlock(scope: !10787, file: !3, line: 2470, column: 3)
!10793 = !DILocation(line: 2471, column: 35, scope: !10791)
!10794 = !DILocation(line: 2471, column: 10, scope: !10791)
!10795 = !DILocation(line: 2472, column: 9, scope: !10791)
!10796 = !DILocation(line: 2472, column: 13, scope: !10791)
!10797 = !DILocation(line: 2473, column: 6, scope: !10791)
!10798 = !DILocation(line: 2473, column: 36, scope: !10791)
!10799 = !DILocation(line: 2473, column: 32, scope: !10791)
!10800 = !DILocation(line: 2473, column: 10, scope: !10791)
!10801 = !DILocation(line: 2471, column: 9, scope: !10792)
!10802 = !DILocation(line: 2478, column: 25, scope: !10803)
!10803 = distinct !DILexicalBlock(scope: !10791, file: !3, line: 2474, column: 7)
!10804 = !DILocation(line: 2478, column: 21, scope: !10803)
!10805 = !DILocation(line: 2478, column: 19, scope: !10803)
!10806 = !DILocation(line: 2478, column: 13, scope: !10803)
!10807 = !DILocation(line: 2479, column: 9, scope: !10803)
!10808 = !DILocation(line: 2482, column: 29, scope: !10809)
!10809 = distinct !DILexicalBlock(scope: !10792, file: !3, line: 2482, column: 9)
!10810 = !DILocation(line: 2482, column: 25, scope: !10809)
!10811 = !DILocation(line: 2482, column: 33, scope: !10809)
!10812 = !DILocation(line: 2482, column: 9, scope: !10809)
!10813 = !DILocation(line: 2482, column: 38, scope: !10809)
!10814 = !DILocation(line: 2482, column: 9, scope: !10792)
!10815 = !DILocation(line: 2483, column: 17, scope: !10809)
!10816 = !DILocation(line: 2483, column: 13, scope: !10809)
!10817 = !DILocation(line: 2483, column: 11, scope: !10809)
!10818 = !DILocation(line: 2483, column: 7, scope: !10809)
!10819 = !DILocation(line: 2485, column: 29, scope: !10820)
!10820 = distinct !DILexicalBlock(scope: !10792, file: !3, line: 2485, column: 9)
!10821 = !DILocation(line: 2485, column: 25, scope: !10820)
!10822 = !DILocation(line: 2485, column: 33, scope: !10820)
!10823 = !DILocation(line: 2485, column: 9, scope: !10820)
!10824 = !DILocation(line: 2485, column: 38, scope: !10820)
!10825 = !DILocation(line: 2485, column: 9, scope: !10792)
!10826 = !DILocation(line: 2486, column: 17, scope: !10820)
!10827 = !DILocation(line: 2486, column: 13, scope: !10820)
!10828 = !DILocation(line: 2486, column: 11, scope: !10820)
!10829 = !DILocation(line: 2486, column: 7, scope: !10820)
!10830 = !DILocation(line: 2487, column: 3, scope: !10792)
!10831 = !DILocation(line: 2488, column: 6, scope: !10769)
!10832 = !DILocation(line: 2461, column: 24, scope: !10764)
!10833 = !DILocation(line: 2461, column: 4, scope: !10764)
!10834 = distinct !{!10834, !10766, !10835}
!10835 = !DILocation(line: 2488, column: 6, scope: !10761)
!10836 = !DILocation(line: 2490, column: 5, scope: !10474)
!10837 = !DILocation(line: 2491, column: 12, scope: !10838)
!10838 = distinct !DILexicalBlock(scope: !10452, file: !3, line: 2491, column: 12)
!10839 = !DILocation(line: 2491, column: 17, scope: !10838)
!10840 = !DILocation(line: 2491, column: 12, scope: !10452)
!10841 = !DILocation(line: 2500, column: 15, scope: !10842)
!10842 = distinct !DILexicalBlock(scope: !10843, file: !3, line: 2500, column: 11)
!10843 = distinct !DILexicalBlock(scope: !10838, file: !3, line: 2492, column: 5)
!10844 = !DILocation(line: 2500, column: 20, scope: !10842)
!10845 = !DILocation(line: 2500, column: 11, scope: !10843)
!10846 = !DILocation(line: 2502, column: 32, scope: !10847)
!10847 = distinct !DILexicalBlock(scope: !10842, file: !3, line: 2501, column: 2)
!10848 = !DILocation(line: 2502, column: 4, scope: !10847)
!10849 = !DILocation(line: 2503, column: 4, scope: !10847)
!10850 = !DILocation(line: 2508, column: 34, scope: !10843)
!10851 = !DILocation(line: 2508, column: 44, scope: !10843)
!10852 = !DILocation(line: 2508, column: 53, scope: !10843)
!10853 = !DILocation(line: 2508, column: 13, scope: !10843)
!10854 = !DILocation(line: 2508, column: 11, scope: !10843)
!10855 = !DILocation(line: 2509, column: 34, scope: !10843)
!10856 = !DILocation(line: 2509, column: 44, scope: !10843)
!10857 = !DILocation(line: 2509, column: 53, scope: !10843)
!10858 = !DILocation(line: 2509, column: 13, scope: !10843)
!10859 = !DILocation(line: 2509, column: 11, scope: !10843)
!10860 = !DILocation(line: 2510, column: 5, scope: !10843)
!10861 = !DILocation(line: 2511, column: 12, scope: !10862)
!10862 = distinct !DILexicalBlock(scope: !10838, file: !3, line: 2511, column: 12)
!10863 = !DILocation(line: 2511, column: 17, scope: !10862)
!10864 = !DILocation(line: 2511, column: 12, scope: !10838)
!10865 = !DILocation(line: 2513, column: 15, scope: !10866)
!10866 = distinct !DILexicalBlock(scope: !10867, file: !3, line: 2513, column: 11)
!10867 = distinct !DILexicalBlock(scope: !10862, file: !3, line: 2512, column: 5)
!10868 = !DILocation(line: 2513, column: 20, scope: !10866)
!10869 = !DILocation(line: 2514, column: 4, scope: !10866)
!10870 = !DILocation(line: 2514, column: 11, scope: !10866)
!10871 = !DILocation(line: 2514, column: 22, scope: !10866)
!10872 = !DILocation(line: 2514, column: 15, scope: !10866)
!10873 = !DILocation(line: 2515, column: 4, scope: !10866)
!10874 = !DILocation(line: 2515, column: 7, scope: !10866)
!10875 = !DILocation(line: 2515, column: 27, scope: !10866)
!10876 = !DILocation(line: 2516, column: 4, scope: !10866)
!10877 = !DILocation(line: 2516, column: 8, scope: !10866)
!10878 = !DILocation(line: 2517, column: 4, scope: !10866)
!10879 = !DILocation(line: 2517, column: 29, scope: !10866)
!10880 = !DILocation(line: 2517, column: 7, scope: !10866)
!10881 = !DILocation(line: 2517, column: 34, scope: !10866)
!10882 = !DILocation(line: 2513, column: 11, scope: !10867)
!10883 = !DILocation(line: 2519, column: 25, scope: !10884)
!10884 = distinct !DILexicalBlock(scope: !10866, file: !3, line: 2518, column: 2)
!10885 = !DILocation(line: 2519, column: 10, scope: !10884)
!10886 = !DILocation(line: 2519, column: 8, scope: !10884)
!10887 = !DILocation(line: 2520, column: 14, scope: !10884)
!10888 = !DILocation(line: 2520, column: 8, scope: !10884)
!10889 = !DILocation(line: 2521, column: 2, scope: !10884)
!10890 = !DILocation(line: 2522, column: 20, scope: !10891)
!10891 = distinct !DILexicalBlock(scope: !10866, file: !3, line: 2522, column: 16)
!10892 = !DILocation(line: 2522, column: 25, scope: !10891)
!10893 = !DILocation(line: 2523, column: 9, scope: !10891)
!10894 = !DILocation(line: 2523, column: 16, scope: !10891)
!10895 = !DILocation(line: 2523, column: 27, scope: !10891)
!10896 = !DILocation(line: 2523, column: 20, scope: !10891)
!10897 = !DILocation(line: 2524, column: 9, scope: !10891)
!10898 = !DILocation(line: 2524, column: 12, scope: !10891)
!10899 = !DILocation(line: 2524, column: 32, scope: !10891)
!10900 = !DILocation(line: 2525, column: 9, scope: !10891)
!10901 = !DILocation(line: 2525, column: 13, scope: !10891)
!10902 = !DILocation(line: 2526, column: 9, scope: !10891)
!10903 = !DILocation(line: 2526, column: 34, scope: !10891)
!10904 = !DILocation(line: 2526, column: 12, scope: !10891)
!10905 = !DILocation(line: 2526, column: 39, scope: !10891)
!10906 = !DILocation(line: 2522, column: 16, scope: !10866)
!10907 = !DILocation(line: 2528, column: 9, scope: !10908)
!10908 = distinct !DILexicalBlock(scope: !10891, file: !3, line: 2527, column: 2)
!10909 = !DILocation(line: 2529, column: 25, scope: !10908)
!10910 = !DILocation(line: 2529, column: 10, scope: !10908)
!10911 = !DILocation(line: 2529, column: 8, scope: !10908)
!10912 = !DILocation(line: 2530, column: 14, scope: !10908)
!10913 = !DILocation(line: 2530, column: 8, scope: !10908)
!10914 = !DILocation(line: 2531, column: 2, scope: !10908)
!10915 = !DILocation(line: 2534, column: 32, scope: !10916)
!10916 = distinct !DILexicalBlock(scope: !10891, file: !3, line: 2533, column: 2)
!10917 = !DILocation(line: 2534, column: 4, scope: !10916)
!10918 = !DILocation(line: 2535, column: 4, scope: !10916)
!10919 = !DILocation(line: 2537, column: 5, scope: !10867)
!10920 = !DILocation(line: 2538, column: 12, scope: !10921)
!10921 = distinct !DILexicalBlock(scope: !10862, file: !3, line: 2538, column: 12)
!10922 = !DILocation(line: 2538, column: 17, scope: !10921)
!10923 = !DILocation(line: 2538, column: 12, scope: !10862)
!10924 = !DILocation(line: 2540, column: 15, scope: !10925)
!10925 = distinct !DILexicalBlock(scope: !10926, file: !3, line: 2540, column: 11)
!10926 = distinct !DILexicalBlock(scope: !10921, file: !3, line: 2539, column: 5)
!10927 = !DILocation(line: 2540, column: 20, scope: !10925)
!10928 = !DILocation(line: 2541, column: 11, scope: !10925)
!10929 = !DILocation(line: 2541, column: 18, scope: !10925)
!10930 = !DILocation(line: 2541, column: 23, scope: !10925)
!10931 = !DILocation(line: 2542, column: 4, scope: !10925)
!10932 = !DILocation(line: 2542, column: 7, scope: !10925)
!10933 = !DILocation(line: 2542, column: 27, scope: !10925)
!10934 = !DILocation(line: 2543, column: 4, scope: !10925)
!10935 = !DILocation(line: 2543, column: 7, scope: !10925)
!10936 = !DILocation(line: 2543, column: 27, scope: !10925)
!10937 = !DILocation(line: 2544, column: 4, scope: !10925)
!10938 = !DILocation(line: 2544, column: 7, scope: !10925)
!10939 = !DILocation(line: 2544, column: 27, scope: !10925)
!10940 = !DILocation(line: 2545, column: 4, scope: !10925)
!10941 = !DILocation(line: 2545, column: 7, scope: !10925)
!10942 = !DILocation(line: 2545, column: 27, scope: !10925)
!10943 = !DILocation(line: 2546, column: 4, scope: !10925)
!10944 = !DILocation(line: 2546, column: 29, scope: !10925)
!10945 = !DILocation(line: 2546, column: 7, scope: !10925)
!10946 = !DILocation(line: 2546, column: 34, scope: !10925)
!10947 = !DILocation(line: 2547, column: 4, scope: !10925)
!10948 = !DILocation(line: 2547, column: 29, scope: !10925)
!10949 = !DILocation(line: 2547, column: 7, scope: !10925)
!10950 = !DILocation(line: 2547, column: 34, scope: !10925)
!10951 = !DILocation(line: 2540, column: 11, scope: !10926)
!10952 = !DILocalVariable(name: "vr0_max", scope: !10953, file: !3, line: 2549, type: !1796)
!10953 = distinct !DILexicalBlock(scope: !10925, file: !3, line: 2548, column: 2)
!10954 = !DILocation(line: 2549, column: 15, scope: !10953)
!10955 = !DILocation(line: 2549, column: 49, scope: !10953)
!10956 = !DILocation(line: 2549, column: 25, scope: !10953)
!10957 = !DILocalVariable(name: "vr1_max", scope: !10953, file: !3, line: 2550, type: !1796)
!10958 = !DILocation(line: 2550, column: 15, scope: !10953)
!10959 = !DILocation(line: 2550, column: 49, scope: !10953)
!10960 = !DILocation(line: 2550, column: 25, scope: !10953)
!10961 = !DILocalVariable(name: "ior_max", scope: !10953, file: !3, line: 2551, type: !1796)
!10962 = !DILocation(line: 2551, column: 15, scope: !10953)
!10963 = !DILocation(line: 2555, column: 26, scope: !10953)
!10964 = !DILocation(line: 2555, column: 40, scope: !10953)
!10965 = !DILocation(line: 2555, column: 30, scope: !10953)
!10966 = !DILocation(line: 2555, column: 12, scope: !10953)
!10967 = !DILocation(line: 2555, column: 16, scope: !10953)
!10968 = !DILocation(line: 2556, column: 27, scope: !10953)
!10969 = !DILocation(line: 2556, column: 42, scope: !10953)
!10970 = !DILocation(line: 2556, column: 32, scope: !10953)
!10971 = !DILocation(line: 2556, column: 12, scope: !10953)
!10972 = !DILocation(line: 2556, column: 17, scope: !10953)
!10973 = !DILocation(line: 2557, column: 16, scope: !10974)
!10974 = distinct !DILexicalBlock(scope: !10953, file: !3, line: 2557, column: 8)
!10975 = !DILocation(line: 2557, column: 21, scope: !10974)
!10976 = !DILocation(line: 2557, column: 8, scope: !10953)
!10977 = !DILocation(line: 2559, column: 16, scope: !10978)
!10978 = distinct !DILexicalBlock(scope: !10974, file: !3, line: 2558, column: 6)
!10979 = !DILocation(line: 2559, column: 20, scope: !10978)
!10980 = !DILocation(line: 2561, column: 34, scope: !10978)
!10981 = !DILocation(line: 2561, column: 14, scope: !10978)
!10982 = !DILocation(line: 2561, column: 11, scope: !10978)
!10983 = !DILocation(line: 2561, column: 41, scope: !10978)
!10984 = !DILocation(line: 2560, column: 16, scope: !10978)
!10985 = !DILocation(line: 2560, column: 21, scope: !10978)
!10986 = !DILocation(line: 2562, column: 6, scope: !10978)
!10987 = !DILocation(line: 2563, column: 21, scope: !10988)
!10988 = distinct !DILexicalBlock(scope: !10974, file: !3, line: 2563, column: 13)
!10989 = !DILocation(line: 2563, column: 25, scope: !10988)
!10990 = !DILocation(line: 2563, column: 13, scope: !10974)
!10991 = !DILocation(line: 2565, column: 31, scope: !10988)
!10992 = !DILocation(line: 2565, column: 11, scope: !10988)
!10993 = !DILocation(line: 2565, column: 8, scope: !10988)
!10994 = !DILocation(line: 2565, column: 37, scope: !10988)
!10995 = !DILocation(line: 2564, column: 14, scope: !10988)
!10996 = !DILocation(line: 2564, column: 18, scope: !10988)
!10997 = !DILocation(line: 2564, column: 6, scope: !10988)
!10998 = !DILocation(line: 2568, column: 52, scope: !10953)
!10999 = !DILocation(line: 2568, column: 61, scope: !10953)
!11000 = !DILocation(line: 2568, column: 17, scope: !10953)
!11001 = !DILocation(line: 2568, column: 15, scope: !10953)
!11002 = !DILocation(line: 2569, column: 37, scope: !10953)
!11003 = !DILocation(line: 2569, column: 17, scope: !10953)
!11004 = !DILocation(line: 2569, column: 15, scope: !10953)
!11005 = !DILocation(line: 2570, column: 2, scope: !10953)
!11006 = !DILocation(line: 2573, column: 32, scope: !11007)
!11007 = distinct !DILexicalBlock(scope: !10925, file: !3, line: 2572, column: 2)
!11008 = !DILocation(line: 2573, column: 4, scope: !11007)
!11009 = !DILocation(line: 2574, column: 4, scope: !11007)
!11010 = !DILocation(line: 2576, column: 5, scope: !10926)
!11011 = !DILocation(line: 2578, column: 5, scope: !10921)
!11012 = !DILocation(line: 2583, column: 7, scope: !11013)
!11013 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 2583, column: 7)
!11014 = !DILocation(line: 2583, column: 11, scope: !11013)
!11015 = !DILocation(line: 2584, column: 7, scope: !11013)
!11016 = !DILocation(line: 2584, column: 36, scope: !11013)
!11017 = !DILocation(line: 2584, column: 11, scope: !11013)
!11018 = !DILocation(line: 2585, column: 7, scope: !11013)
!11019 = !DILocation(line: 2585, column: 11, scope: !11013)
!11020 = !DILocation(line: 2585, column: 31, scope: !11013)
!11021 = !DILocation(line: 2585, column: 57, scope: !11013)
!11022 = !DILocation(line: 2585, column: 35, scope: !11013)
!11023 = !DILocation(line: 2586, column: 7, scope: !11013)
!11024 = !DILocation(line: 2586, column: 10, scope: !11013)
!11025 = !DILocation(line: 2586, column: 14, scope: !11013)
!11026 = !DILocation(line: 2587, column: 7, scope: !11013)
!11027 = !DILocation(line: 2587, column: 36, scope: !11013)
!11028 = !DILocation(line: 2587, column: 11, scope: !11013)
!11029 = !DILocation(line: 2588, column: 7, scope: !11013)
!11030 = !DILocation(line: 2588, column: 11, scope: !11013)
!11031 = !DILocation(line: 2588, column: 31, scope: !11013)
!11032 = !DILocation(line: 2588, column: 57, scope: !11013)
!11033 = !DILocation(line: 2588, column: 35, scope: !11013)
!11034 = !DILocation(line: 2583, column: 7, scope: !10043)
!11035 = !DILocation(line: 2590, column: 35, scope: !11036)
!11036 = distinct !DILexicalBlock(scope: !11013, file: !3, line: 2589, column: 5)
!11037 = !DILocation(line: 2590, column: 7, scope: !11036)
!11038 = !DILocation(line: 2591, column: 7, scope: !11036)
!11039 = !DILocation(line: 2602, column: 24, scope: !11040)
!11040 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 2602, column: 7)
!11041 = !DILocation(line: 2602, column: 8, scope: !11040)
!11042 = !DILocation(line: 2602, column: 29, scope: !11040)
!11043 = !DILocation(line: 2602, column: 54, scope: !11040)
!11044 = !DILocation(line: 2602, column: 32, scope: !11040)
!11045 = !DILocation(line: 2603, column: 7, scope: !11040)
!11046 = !DILocation(line: 2603, column: 27, scope: !11040)
!11047 = !DILocation(line: 2603, column: 11, scope: !11040)
!11048 = !DILocation(line: 2603, column: 32, scope: !11040)
!11049 = !DILocation(line: 2603, column: 57, scope: !11040)
!11050 = !DILocation(line: 2603, column: 35, scope: !11040)
!11051 = !DILocation(line: 2602, column: 7, scope: !10043)
!11052 = !DILocation(line: 2605, column: 35, scope: !11053)
!11053 = distinct !DILexicalBlock(scope: !11040, file: !3, line: 2604, column: 5)
!11054 = !DILocation(line: 2605, column: 7, scope: !11053)
!11055 = !DILocation(line: 2606, column: 7, scope: !11053)
!11056 = !DILocation(line: 2609, column: 25, scope: !10043)
!11057 = !DILocation(line: 2609, column: 30, scope: !10043)
!11058 = !DILocation(line: 2609, column: 9, scope: !10043)
!11059 = !DILocation(line: 2609, column: 7, scope: !10043)
!11060 = !DILocation(line: 2610, column: 7, scope: !11061)
!11061 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 2610, column: 7)
!11062 = !DILocation(line: 2610, column: 11, scope: !11061)
!11063 = !DILocation(line: 2610, column: 17, scope: !11061)
!11064 = !DILocation(line: 2610, column: 20, scope: !11061)
!11065 = !DILocation(line: 2610, column: 24, scope: !11061)
!11066 = !DILocation(line: 2610, column: 7, scope: !10043)
!11067 = !DILocation(line: 2615, column: 35, scope: !11068)
!11068 = distinct !DILexicalBlock(scope: !11061, file: !3, line: 2611, column: 5)
!11069 = !DILocation(line: 2615, column: 7, scope: !11068)
!11070 = !DILocation(line: 2616, column: 5, scope: !11068)
!11071 = !DILocation(line: 2618, column: 22, scope: !11061)
!11072 = !DILocation(line: 2618, column: 26, scope: !11061)
!11073 = !DILocation(line: 2618, column: 32, scope: !11061)
!11074 = !DILocation(line: 2618, column: 37, scope: !11061)
!11075 = !DILocation(line: 2618, column: 5, scope: !11061)
!11076 = !DILocation(line: 2619, column: 1, scope: !10043)
!11077 = distinct !DISubprogram(name: "extract_range_from_unary_expr", scope: !3, file: !3, line: 2626, type: !11078, scopeLine: 2628, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!11078 = !DISubroutineType(types: !11079)
!11079 = !{null, !1741, !134, !1747, !1747}
!11080 = !DILocalVariable(name: "vr", arg: 1, scope: !11077, file: !3, line: 2626, type: !1741)
!11081 = !DILocation(line: 2626, column: 47, scope: !11077)
!11082 = !DILocalVariable(name: "code", arg: 2, scope: !11077, file: !3, line: 2626, type: !134)
!11083 = !DILocation(line: 2626, column: 66, scope: !11077)
!11084 = !DILocalVariable(name: "type", arg: 3, scope: !11077, file: !3, line: 2627, type: !1747)
!11085 = !DILocation(line: 2627, column: 16, scope: !11077)
!11086 = !DILocalVariable(name: "op0", arg: 4, scope: !11077, file: !3, line: 2627, type: !1747)
!11087 = !DILocation(line: 2627, column: 27, scope: !11077)
!11088 = !DILocalVariable(name: "min", scope: !11077, file: !3, line: 2629, type: !1747)
!11089 = !DILocation(line: 2629, column: 8, scope: !11077)
!11090 = !DILocalVariable(name: "max", scope: !11077, file: !3, line: 2629, type: !1747)
!11091 = !DILocation(line: 2629, column: 13, scope: !11077)
!11092 = !DILocalVariable(name: "cmp", scope: !11077, file: !3, line: 2630, type: !1740)
!11093 = !DILocation(line: 2630, column: 7, scope: !11077)
!11094 = !DILocalVariable(name: "vr0", scope: !11077, file: !3, line: 2631, type: !1742)
!11095 = !DILocation(line: 2631, column: 17, scope: !11077)
!11096 = !DILocation(line: 2635, column: 7, scope: !11097)
!11097 = distinct !DILexicalBlock(scope: !11077, file: !3, line: 2635, column: 7)
!11098 = !DILocation(line: 2635, column: 12, scope: !11097)
!11099 = !DILocation(line: 2636, column: 7, scope: !11097)
!11100 = !DILocation(line: 2636, column: 10, scope: !11097)
!11101 = !DILocation(line: 2636, column: 15, scope: !11097)
!11102 = !DILocation(line: 2637, column: 7, scope: !11097)
!11103 = !DILocation(line: 2637, column: 10, scope: !11097)
!11104 = !DILocation(line: 2637, column: 15, scope: !11097)
!11105 = !DILocation(line: 2638, column: 7, scope: !11097)
!11106 = !DILocation(line: 2638, column: 10, scope: !11097)
!11107 = !DILocation(line: 2638, column: 15, scope: !11097)
!11108 = !DILocation(line: 2635, column: 7, scope: !11077)
!11109 = !DILocation(line: 2641, column: 58, scope: !11110)
!11110 = distinct !DILexicalBlock(scope: !11111, file: !3, line: 2641, column: 11)
!11111 = distinct !DILexicalBlock(scope: !11097, file: !3, line: 2639, column: 5)
!11112 = !DILocation(line: 2641, column: 18, scope: !11110)
!11113 = !DILocation(line: 2641, column: 16, scope: !11110)
!11114 = !DILocation(line: 2641, column: 64, scope: !11110)
!11115 = !DILocation(line: 2641, column: 11, scope: !11111)
!11116 = !DILocalVariable(name: "tem", scope: !11117, file: !3, line: 2643, type: !1747)
!11117 = distinct !DILexicalBlock(scope: !11110, file: !3, line: 2642, column: 2)
!11118 = !DILocation(line: 2643, column: 9, scope: !11117)
!11119 = !DILocation(line: 2643, column: 15, scope: !11117)
!11120 = !DILocation(line: 2644, column: 8, scope: !11121)
!11121 = distinct !DILexicalBlock(scope: !11117, file: !3, line: 2644, column: 8)
!11122 = !DILocation(line: 2645, column: 8, scope: !11121)
!11123 = !DILocation(line: 2645, column: 36, scope: !11121)
!11124 = !DILocation(line: 2645, column: 11, scope: !11121)
!11125 = !DILocation(line: 2646, column: 8, scope: !11121)
!11126 = !DILocation(line: 2646, column: 34, scope: !11121)
!11127 = !DILocation(line: 2646, column: 12, scope: !11121)
!11128 = !DILocation(line: 2644, column: 8, scope: !11117)
!11129 = !DILocation(line: 2648, column: 25, scope: !11130)
!11130 = distinct !DILexicalBlock(scope: !11121, file: !3, line: 2647, column: 6)
!11131 = !DILocation(line: 2648, column: 39, scope: !11130)
!11132 = !DILocation(line: 2648, column: 44, scope: !11130)
!11133 = !DILocation(line: 2648, column: 8, scope: !11130)
!11134 = !DILocation(line: 2649, column: 8, scope: !11130)
!11135 = !DILocation(line: 2651, column: 2, scope: !11117)
!11136 = !DILocation(line: 2652, column: 35, scope: !11111)
!11137 = !DILocation(line: 2652, column: 7, scope: !11111)
!11138 = !DILocation(line: 2653, column: 7, scope: !11111)
!11139 = !DILocation(line: 2658, column: 7, scope: !11140)
!11140 = distinct !DILexicalBlock(scope: !11077, file: !3, line: 2658, column: 7)
!11141 = !DILocation(line: 2658, column: 23, scope: !11140)
!11142 = !DILocation(line: 2658, column: 7, scope: !11077)
!11143 = !DILocation(line: 2659, column: 30, scope: !11140)
!11144 = !DILocation(line: 2659, column: 13, scope: !11140)
!11145 = !DILocation(line: 2659, column: 11, scope: !11140)
!11146 = !DILocation(line: 2659, column: 5, scope: !11140)
!11147 = !DILocation(line: 2660, column: 37, scope: !11148)
!11148 = distinct !DILexicalBlock(scope: !11140, file: !3, line: 2660, column: 12)
!11149 = !DILocation(line: 2660, column: 12, scope: !11148)
!11150 = !DILocation(line: 2660, column: 12, scope: !11140)
!11151 = !DILocation(line: 2661, column: 37, scope: !11148)
!11152 = !DILocation(line: 2661, column: 5, scope: !11148)
!11153 = !DILocation(line: 2663, column: 5, scope: !11148)
!11154 = !DILocation(line: 2666, column: 11, scope: !11155)
!11155 = distinct !DILexicalBlock(scope: !11077, file: !3, line: 2666, column: 7)
!11156 = !DILocation(line: 2666, column: 16, scope: !11155)
!11157 = !DILocation(line: 2666, column: 7, scope: !11077)
!11158 = !DILocation(line: 2668, column: 37, scope: !11159)
!11159 = distinct !DILexicalBlock(scope: !11155, file: !3, line: 2667, column: 5)
!11160 = !DILocation(line: 2668, column: 7, scope: !11159)
!11161 = !DILocation(line: 2669, column: 7, scope: !11159)
!11162 = !DILocation(line: 2674, column: 9, scope: !11163)
!11163 = distinct !DILexicalBlock(scope: !11077, file: !3, line: 2674, column: 7)
!11164 = !DILocation(line: 2675, column: 8, scope: !11163)
!11165 = !DILocation(line: 2675, column: 12, scope: !11163)
!11166 = !DILocation(line: 2676, column: 7, scope: !11163)
!11167 = !DILocation(line: 2676, column: 15, scope: !11163)
!11168 = !DILocation(line: 2676, column: 20, scope: !11163)
!11169 = !DILocation(line: 2677, column: 4, scope: !11163)
!11170 = !DILocation(line: 2677, column: 7, scope: !11163)
!11171 = !DILocation(line: 2674, column: 7, scope: !11077)
!11172 = !DILocation(line: 2679, column: 35, scope: !11173)
!11173 = distinct !DILexicalBlock(scope: !11163, file: !3, line: 2678, column: 5)
!11174 = !DILocation(line: 2679, column: 7, scope: !11173)
!11175 = !DILocation(line: 2680, column: 7, scope: !11173)
!11176 = !DILocation(line: 2685, column: 7, scope: !11177)
!11177 = distinct !DILexicalBlock(scope: !11077, file: !3, line: 2685, column: 7)
!11178 = !DILocation(line: 2685, column: 29, scope: !11177)
!11179 = !DILocation(line: 2685, column: 32, scope: !11177)
!11180 = !DILocation(line: 2685, column: 7, scope: !11077)
!11181 = !DILocalVariable(name: "sop", scope: !11182, file: !3, line: 2687, type: !1866)
!11182 = distinct !DILexicalBlock(scope: !11177, file: !3, line: 2686, column: 5)
!11183 = !DILocation(line: 2687, column: 12, scope: !11182)
!11184 = !DILocation(line: 2689, column: 11, scope: !11182)
!11185 = !DILocation(line: 2690, column: 11, scope: !11186)
!11186 = distinct !DILexicalBlock(scope: !11182, file: !3, line: 2690, column: 11)
!11187 = !DILocation(line: 2691, column: 4, scope: !11186)
!11188 = !DILocation(line: 2691, column: 36, scope: !11186)
!11189 = !DILocation(line: 2691, column: 42, scope: !11186)
!11190 = !DILocation(line: 2691, column: 48, scope: !11186)
!11191 = !DILocation(line: 2691, column: 8, scope: !11186)
!11192 = !DILocation(line: 2692, column: 8, scope: !11186)
!11193 = !DILocation(line: 2692, column: 12, scope: !11186)
!11194 = !DILocation(line: 2690, column: 11, scope: !11182)
!11195 = !DILocation(line: 2693, column: 30, scope: !11186)
!11196 = !DILocation(line: 2693, column: 34, scope: !11186)
!11197 = !DILocation(line: 2693, column: 2, scope: !11186)
!11198 = !DILocation(line: 2694, column: 16, scope: !11199)
!11199 = distinct !DILexicalBlock(scope: !11186, file: !3, line: 2694, column: 16)
!11200 = !DILocation(line: 2694, column: 16, scope: !11186)
!11201 = !DILocation(line: 2695, column: 27, scope: !11199)
!11202 = !DILocation(line: 2695, column: 31, scope: !11199)
!11203 = !DILocation(line: 2695, column: 2, scope: !11199)
!11204 = !DILocation(line: 2697, column: 30, scope: !11199)
!11205 = !DILocation(line: 2697, column: 2, scope: !11199)
!11206 = !DILocation(line: 2699, column: 7, scope: !11182)
!11207 = !DILocation(line: 2703, column: 7, scope: !11208)
!11208 = distinct !DILexicalBlock(scope: !11077, file: !3, line: 2703, column: 7)
!11209 = !DILocation(line: 2704, column: 7, scope: !11208)
!11210 = !DILocation(line: 2704, column: 10, scope: !11208)
!11211 = !DILocation(line: 2705, column: 7, scope: !11208)
!11212 = !DILocation(line: 2705, column: 10, scope: !11208)
!11213 = !DILocation(line: 2703, column: 7, scope: !11077)
!11214 = !DILocalVariable(name: "inner_type", scope: !11215, file: !3, line: 2707, type: !1747)
!11215 = distinct !DILexicalBlock(scope: !11208, file: !3, line: 2706, column: 5)
!11216 = !DILocation(line: 2707, column: 12, scope: !11215)
!11217 = !DILocation(line: 2707, column: 25, scope: !11215)
!11218 = !DILocalVariable(name: "outer_type", scope: !11215, file: !3, line: 2708, type: !1747)
!11219 = !DILocation(line: 2708, column: 12, scope: !11215)
!11220 = !DILocation(line: 2708, column: 25, scope: !11215)
!11221 = !DILocation(line: 2712, column: 15, scope: !11222)
!11222 = distinct !DILexicalBlock(scope: !11215, file: !3, line: 2712, column: 11)
!11223 = !DILocation(line: 2712, column: 20, scope: !11222)
!11224 = !DILocation(line: 2713, column: 4, scope: !11222)
!11225 = !DILocation(line: 2713, column: 7, scope: !11222)
!11226 = !DILocation(line: 2713, column: 37, scope: !11222)
!11227 = !DILocation(line: 2713, column: 35, scope: !11222)
!11228 = !DILocation(line: 2712, column: 11, scope: !11215)
!11229 = !DILocation(line: 2715, column: 8, scope: !11230)
!11230 = distinct !DILexicalBlock(scope: !11222, file: !3, line: 2714, column: 2)
!11231 = !DILocation(line: 2715, column: 13, scope: !11230)
!11232 = !DILocation(line: 2716, column: 14, scope: !11230)
!11233 = !DILocation(line: 2716, column: 8, scope: !11230)
!11234 = !DILocation(line: 2716, column: 12, scope: !11230)
!11235 = !DILocation(line: 2717, column: 14, scope: !11230)
!11236 = !DILocation(line: 2717, column: 8, scope: !11230)
!11237 = !DILocation(line: 2717, column: 12, scope: !11230)
!11238 = !DILocation(line: 2718, column: 2, scope: !11230)
!11239 = !DILocation(line: 2726, column: 16, scope: !11240)
!11240 = distinct !DILexicalBlock(scope: !11215, file: !3, line: 2726, column: 11)
!11241 = !DILocation(line: 2726, column: 21, scope: !11240)
!11242 = !DILocation(line: 2727, column: 5, scope: !11240)
!11243 = !DILocation(line: 2727, column: 12, scope: !11240)
!11244 = !DILocation(line: 2727, column: 17, scope: !11240)
!11245 = !DILocation(line: 2728, column: 4, scope: !11240)
!11246 = !DILocation(line: 2728, column: 7, scope: !11240)
!11247 = !DILocation(line: 2728, column: 27, scope: !11240)
!11248 = !DILocation(line: 2729, column: 4, scope: !11240)
!11249 = !DILocation(line: 2729, column: 7, scope: !11240)
!11250 = !DILocation(line: 2729, column: 27, scope: !11240)
!11251 = !DILocation(line: 2730, column: 4, scope: !11240)
!11252 = !DILocation(line: 2730, column: 34, scope: !11240)
!11253 = !DILocation(line: 2730, column: 8, scope: !11240)
!11254 = !DILocation(line: 2731, column: 4, scope: !11240)
!11255 = !DILocation(line: 2731, column: 34, scope: !11240)
!11256 = !DILocation(line: 2731, column: 8, scope: !11240)
!11257 = !DILocation(line: 2732, column: 4, scope: !11240)
!11258 = !DILocation(line: 2732, column: 8, scope: !11240)
!11259 = !DILocation(line: 2732, column: 39, scope: !11240)
!11260 = !DILocation(line: 2732, column: 36, scope: !11240)
!11261 = !DILocation(line: 2733, column: 8, scope: !11240)
!11262 = !DILocation(line: 2733, column: 16, scope: !11240)
!11263 = !DILocation(line: 2733, column: 21, scope: !11240)
!11264 = !DILocation(line: 2734, column: 5, scope: !11240)
!11265 = !DILocation(line: 2735, column: 43, scope: !11240)
!11266 = !DILocation(line: 2735, column: 52, scope: !11240)
!11267 = !DILocation(line: 2735, column: 10, scope: !11240)
!11268 = !DILocation(line: 2736, column: 12, scope: !11240)
!11269 = !DILocation(line: 2734, column: 23, scope: !11240)
!11270 = !DILocation(line: 2734, column: 8, scope: !11240)
!11271 = !DILocation(line: 2726, column: 11, scope: !11215)
!11272 = !DILocalVariable(name: "new_min", scope: !11273, file: !3, line: 2738, type: !1747)
!11273 = distinct !DILexicalBlock(scope: !11240, file: !3, line: 2737, column: 2)
!11274 = !DILocation(line: 2738, column: 9, scope: !11273)
!11275 = !DILocalVariable(name: "new_max", scope: !11273, file: !3, line: 2738, type: !1747)
!11276 = !DILocation(line: 2738, column: 18, scope: !11273)
!11277 = !DILocation(line: 2739, column: 37, scope: !11273)
!11278 = !DILocation(line: 2740, column: 9, scope: !11273)
!11279 = !DILocation(line: 2741, column: 9, scope: !11273)
!11280 = !DILocation(line: 2739, column: 14, scope: !11273)
!11281 = !DILocation(line: 2739, column: 12, scope: !11273)
!11282 = !DILocation(line: 2742, column: 37, scope: !11273)
!11283 = !DILocation(line: 2743, column: 9, scope: !11273)
!11284 = !DILocation(line: 2744, column: 9, scope: !11273)
!11285 = !DILocation(line: 2742, column: 14, scope: !11273)
!11286 = !DILocation(line: 2742, column: 12, scope: !11273)
!11287 = !DILocation(line: 2745, column: 38, scope: !11273)
!11288 = !DILocation(line: 2745, column: 46, scope: !11273)
!11289 = !DILocation(line: 2746, column: 10, scope: !11273)
!11290 = !DILocation(line: 2746, column: 19, scope: !11273)
!11291 = !DILocation(line: 2745, column: 4, scope: !11273)
!11292 = !DILocation(line: 2747, column: 4, scope: !11273)
!11293 = !DILocation(line: 2750, column: 35, scope: !11215)
!11294 = !DILocation(line: 2750, column: 7, scope: !11215)
!11295 = !DILocation(line: 2751, column: 7, scope: !11215)
!11296 = !DILocation(line: 2758, column: 11, scope: !11297)
!11297 = distinct !DILexicalBlock(scope: !11077, file: !3, line: 2758, column: 7)
!11298 = !DILocation(line: 2758, column: 16, scope: !11297)
!11299 = !DILocation(line: 2758, column: 7, scope: !11077)
!11300 = !DILocation(line: 2760, column: 35, scope: !11301)
!11301 = distinct !DILexicalBlock(scope: !11297, file: !3, line: 2759, column: 5)
!11302 = !DILocation(line: 2760, column: 7, scope: !11301)
!11303 = !DILocation(line: 2761, column: 7, scope: !11301)
!11304 = !DILocation(line: 2766, column: 7, scope: !11305)
!11305 = distinct !DILexicalBlock(scope: !11077, file: !3, line: 2766, column: 7)
!11306 = !DILocation(line: 2766, column: 12, scope: !11305)
!11307 = !DILocation(line: 2767, column: 7, scope: !11305)
!11308 = !DILocation(line: 2767, column: 11, scope: !11305)
!11309 = !DILocation(line: 2766, column: 7, scope: !11077)
!11310 = !DILocation(line: 2771, column: 46, scope: !11311)
!11311 = distinct !DILexicalBlock(scope: !11312, file: !3, line: 2771, column: 11)
!11312 = distinct !DILexicalBlock(scope: !11305, file: !3, line: 2768, column: 5)
!11313 = !DILocation(line: 2771, column: 11, scope: !11311)
!11314 = !DILocation(line: 2771, column: 11, scope: !11312)
!11315 = !DILocation(line: 2772, column: 36, scope: !11311)
!11316 = !DILocation(line: 2772, column: 8, scope: !11311)
!11317 = !DILocation(line: 2772, column: 6, scope: !11311)
!11318 = !DILocation(line: 2772, column: 2, scope: !11311)
!11319 = !DILocation(line: 2773, column: 51, scope: !11320)
!11320 = distinct !DILexicalBlock(scope: !11311, file: !3, line: 2773, column: 16)
!11321 = !DILocation(line: 2773, column: 16, scope: !11320)
!11322 = !DILocation(line: 2773, column: 16, scope: !11311)
!11323 = !DILocation(line: 2774, column: 36, scope: !11320)
!11324 = !DILocation(line: 2774, column: 8, scope: !11320)
!11325 = !DILocation(line: 2774, column: 6, scope: !11320)
!11326 = !DILocation(line: 2774, column: 2, scope: !11320)
!11327 = !DILocation(line: 2775, column: 37, scope: !11328)
!11328 = distinct !DILexicalBlock(scope: !11320, file: !3, line: 2775, column: 16)
!11329 = !DILocation(line: 2775, column: 17, scope: !11328)
!11330 = !DILocation(line: 2775, column: 16, scope: !11320)
!11331 = !DILocation(line: 2776, column: 32, scope: !11328)
!11332 = !DILocation(line: 2776, column: 38, scope: !11328)
!11333 = !DILocation(line: 2776, column: 48, scope: !11328)
!11334 = !DILocation(line: 2776, column: 8, scope: !11328)
!11335 = !DILocation(line: 2776, column: 6, scope: !11328)
!11336 = !DILocation(line: 2776, column: 2, scope: !11328)
!11337 = !DILocation(line: 2777, column: 41, scope: !11338)
!11338 = distinct !DILexicalBlock(scope: !11328, file: !3, line: 2777, column: 16)
!11339 = !DILocation(line: 2777, column: 16, scope: !11338)
!11340 = !DILocation(line: 2777, column: 16, scope: !11328)
!11341 = !DILocation(line: 2779, column: 36, scope: !11342)
!11342 = distinct !DILexicalBlock(scope: !11343, file: !3, line: 2779, column: 8)
!11343 = distinct !DILexicalBlock(scope: !11338, file: !3, line: 2778, column: 2)
!11344 = !DILocation(line: 2779, column: 8, scope: !11342)
!11345 = !DILocation(line: 2780, column: 8, scope: !11342)
!11346 = !DILocation(line: 2780, column: 38, scope: !11342)
!11347 = !DILocation(line: 2780, column: 12, scope: !11342)
!11348 = !DILocation(line: 2781, column: 8, scope: !11342)
!11349 = !DILocation(line: 2781, column: 32, scope: !11342)
!11350 = !DILocation(line: 2781, column: 12, scope: !11342)
!11351 = !DILocation(line: 2779, column: 8, scope: !11343)
!11352 = !DILocation(line: 2782, column: 40, scope: !11342)
!11353 = !DILocation(line: 2782, column: 12, scope: !11342)
!11354 = !DILocation(line: 2782, column: 10, scope: !11342)
!11355 = !DILocation(line: 2782, column: 6, scope: !11342)
!11356 = !DILocation(line: 2785, column: 36, scope: !11357)
!11357 = distinct !DILexicalBlock(scope: !11342, file: !3, line: 2784, column: 6)
!11358 = !DILocation(line: 2785, column: 8, scope: !11357)
!11359 = !DILocation(line: 2786, column: 8, scope: !11357)
!11360 = !DILocation(line: 2788, column: 2, scope: !11343)
!11361 = !DILocation(line: 2790, column: 8, scope: !11338)
!11362 = !DILocation(line: 2790, column: 6, scope: !11338)
!11363 = !DILocation(line: 2792, column: 46, scope: !11364)
!11364 = distinct !DILexicalBlock(scope: !11312, file: !3, line: 2792, column: 11)
!11365 = !DILocation(line: 2792, column: 11, scope: !11364)
!11366 = !DILocation(line: 2792, column: 11, scope: !11312)
!11367 = !DILocation(line: 2793, column: 36, scope: !11364)
!11368 = !DILocation(line: 2793, column: 8, scope: !11364)
!11369 = !DILocation(line: 2793, column: 6, scope: !11364)
!11370 = !DILocation(line: 2793, column: 2, scope: !11364)
!11371 = !DILocation(line: 2794, column: 51, scope: !11372)
!11372 = distinct !DILexicalBlock(scope: !11364, file: !3, line: 2794, column: 16)
!11373 = !DILocation(line: 2794, column: 16, scope: !11372)
!11374 = !DILocation(line: 2794, column: 16, scope: !11364)
!11375 = !DILocation(line: 2795, column: 36, scope: !11372)
!11376 = !DILocation(line: 2795, column: 8, scope: !11372)
!11377 = !DILocation(line: 2795, column: 6, scope: !11372)
!11378 = !DILocation(line: 2795, column: 2, scope: !11372)
!11379 = !DILocation(line: 2796, column: 37, scope: !11380)
!11380 = distinct !DILexicalBlock(scope: !11372, file: !3, line: 2796, column: 16)
!11381 = !DILocation(line: 2796, column: 17, scope: !11380)
!11382 = !DILocation(line: 2796, column: 16, scope: !11372)
!11383 = !DILocation(line: 2797, column: 32, scope: !11380)
!11384 = !DILocation(line: 2797, column: 38, scope: !11380)
!11385 = !DILocation(line: 2797, column: 48, scope: !11380)
!11386 = !DILocation(line: 2797, column: 8, scope: !11380)
!11387 = !DILocation(line: 2797, column: 6, scope: !11380)
!11388 = !DILocation(line: 2797, column: 2, scope: !11380)
!11389 = !DILocation(line: 2798, column: 41, scope: !11390)
!11390 = distinct !DILexicalBlock(scope: !11380, file: !3, line: 2798, column: 16)
!11391 = !DILocation(line: 2798, column: 16, scope: !11390)
!11392 = !DILocation(line: 2798, column: 16, scope: !11380)
!11393 = !DILocation(line: 2800, column: 36, scope: !11394)
!11394 = distinct !DILexicalBlock(scope: !11395, file: !3, line: 2800, column: 8)
!11395 = distinct !DILexicalBlock(scope: !11390, file: !3, line: 2799, column: 2)
!11396 = !DILocation(line: 2800, column: 8, scope: !11394)
!11397 = !DILocation(line: 2800, column: 8, scope: !11395)
!11398 = !DILocation(line: 2801, column: 40, scope: !11394)
!11399 = !DILocation(line: 2801, column: 12, scope: !11394)
!11400 = !DILocation(line: 2801, column: 10, scope: !11394)
!11401 = !DILocation(line: 2801, column: 6, scope: !11394)
!11402 = !DILocation(line: 2804, column: 36, scope: !11403)
!11403 = distinct !DILexicalBlock(scope: !11394, file: !3, line: 2803, column: 6)
!11404 = !DILocation(line: 2804, column: 8, scope: !11403)
!11405 = !DILocation(line: 2805, column: 8, scope: !11403)
!11406 = !DILocation(line: 2807, column: 2, scope: !11395)
!11407 = !DILocation(line: 2809, column: 8, scope: !11390)
!11408 = !DILocation(line: 2809, column: 6, scope: !11390)
!11409 = !DILocation(line: 2810, column: 5, scope: !11312)
!11410 = !DILocation(line: 2811, column: 12, scope: !11411)
!11411 = distinct !DILexicalBlock(scope: !11305, file: !3, line: 2811, column: 12)
!11412 = !DILocation(line: 2811, column: 17, scope: !11411)
!11413 = !DILocation(line: 2812, column: 5, scope: !11411)
!11414 = !DILocation(line: 2812, column: 8, scope: !11411)
!11415 = !DILocation(line: 2811, column: 12, scope: !11305)
!11416 = !DILocation(line: 2814, column: 12, scope: !11417)
!11417 = distinct !DILexicalBlock(scope: !11418, file: !3, line: 2814, column: 11)
!11418 = distinct !DILexicalBlock(scope: !11411, file: !3, line: 2813, column: 5)
!11419 = !DILocation(line: 2814, column: 11, scope: !11418)
!11420 = !DILocation(line: 2816, column: 34, scope: !11421)
!11421 = distinct !DILexicalBlock(scope: !11417, file: !3, line: 2815, column: 2)
!11422 = !DILocation(line: 2816, column: 40, scope: !11421)
!11423 = !DILocation(line: 2816, column: 50, scope: !11421)
!11424 = !DILocation(line: 2816, column: 10, scope: !11421)
!11425 = !DILocation(line: 2816, column: 8, scope: !11421)
!11426 = !DILocation(line: 2817, column: 34, scope: !11421)
!11427 = !DILocation(line: 2817, column: 40, scope: !11421)
!11428 = !DILocation(line: 2817, column: 50, scope: !11421)
!11429 = !DILocation(line: 2817, column: 10, scope: !11421)
!11430 = !DILocation(line: 2817, column: 8, scope: !11421)
!11431 = !DILocation(line: 2818, column: 2, scope: !11421)
!11432 = !DILocation(line: 2821, column: 8, scope: !11433)
!11433 = distinct !DILexicalBlock(scope: !11434, file: !3, line: 2821, column: 8)
!11434 = distinct !DILexicalBlock(scope: !11417, file: !3, line: 2820, column: 2)
!11435 = !DILocation(line: 2821, column: 8, scope: !11434)
!11436 = !DILocation(line: 2822, column: 31, scope: !11433)
!11437 = !DILocation(line: 2822, column: 35, scope: !11433)
!11438 = !DILocation(line: 2822, column: 6, scope: !11433)
!11439 = !DILocation(line: 2824, column: 34, scope: !11433)
!11440 = !DILocation(line: 2824, column: 6, scope: !11433)
!11441 = !DILocation(line: 2825, column: 4, scope: !11434)
!11442 = !DILocation(line: 2827, column: 5, scope: !11418)
!11443 = !DILocation(line: 2828, column: 12, scope: !11444)
!11444 = distinct !DILexicalBlock(scope: !11411, file: !3, line: 2828, column: 12)
!11445 = !DILocation(line: 2828, column: 17, scope: !11444)
!11446 = !DILocation(line: 2829, column: 12, scope: !11444)
!11447 = !DILocation(line: 2829, column: 16, scope: !11444)
!11448 = !DILocation(line: 2828, column: 12, scope: !11411)
!11449 = !DILocation(line: 2833, column: 12, scope: !11450)
!11450 = distinct !DILexicalBlock(scope: !11451, file: !3, line: 2833, column: 11)
!11451 = distinct !DILexicalBlock(scope: !11444, file: !3, line: 2830, column: 5)
!11452 = !DILocation(line: 2834, column: 4, scope: !11450)
!11453 = !DILocation(line: 2834, column: 13, scope: !11450)
!11454 = !DILocation(line: 2834, column: 18, scope: !11450)
!11455 = !DILocation(line: 2835, column: 9, scope: !11450)
!11456 = !DILocation(line: 2835, column: 32, scope: !11450)
!11457 = !DILocation(line: 2835, column: 12, scope: !11450)
!11458 = !DILocation(line: 2836, column: 8, scope: !11450)
!11459 = !DILocation(line: 2836, column: 16, scope: !11450)
!11460 = !DILocation(line: 2836, column: 21, scope: !11450)
!11461 = !DILocation(line: 2837, column: 5, scope: !11450)
!11462 = !DILocation(line: 2837, column: 29, scope: !11450)
!11463 = !DILocation(line: 2837, column: 9, scope: !11450)
!11464 = !DILocation(line: 2838, column: 5, scope: !11450)
!11465 = !DILocation(line: 2838, column: 9, scope: !11450)
!11466 = !DILocation(line: 2833, column: 11, scope: !11451)
!11467 = !DILocation(line: 2840, column: 32, scope: !11468)
!11468 = distinct !DILexicalBlock(scope: !11450, file: !3, line: 2839, column: 2)
!11469 = !DILocation(line: 2840, column: 4, scope: !11468)
!11470 = !DILocation(line: 2841, column: 4, scope: !11468)
!11471 = !DILocation(line: 2846, column: 37, scope: !11472)
!11472 = distinct !DILexicalBlock(scope: !11451, file: !3, line: 2846, column: 11)
!11473 = !DILocation(line: 2846, column: 11, scope: !11472)
!11474 = !DILocation(line: 2846, column: 11, scope: !11451)
!11475 = !DILocation(line: 2847, column: 36, scope: !11472)
!11476 = !DILocation(line: 2847, column: 8, scope: !11472)
!11477 = !DILocation(line: 2847, column: 6, scope: !11472)
!11478 = !DILocation(line: 2847, column: 2, scope: !11472)
!11479 = !DILocation(line: 2848, column: 37, scope: !11480)
!11480 = distinct !DILexicalBlock(scope: !11472, file: !3, line: 2848, column: 16)
!11481 = !DILocation(line: 2848, column: 17, scope: !11480)
!11482 = !DILocation(line: 2848, column: 16, scope: !11472)
!11483 = !DILocation(line: 2849, column: 32, scope: !11480)
!11484 = !DILocation(line: 2849, column: 38, scope: !11480)
!11485 = !DILocation(line: 2849, column: 48, scope: !11480)
!11486 = !DILocation(line: 2849, column: 8, scope: !11480)
!11487 = !DILocation(line: 2849, column: 6, scope: !11480)
!11488 = !DILocation(line: 2849, column: 2, scope: !11480)
!11489 = !DILocation(line: 2850, column: 42, scope: !11490)
!11490 = distinct !DILexicalBlock(scope: !11480, file: !3, line: 2850, column: 16)
!11491 = !DILocation(line: 2850, column: 17, scope: !11490)
!11492 = !DILocation(line: 2850, column: 16, scope: !11480)
!11493 = !DILocation(line: 2851, column: 8, scope: !11490)
!11494 = !DILocation(line: 2851, column: 6, scope: !11490)
!11495 = !DILocation(line: 2851, column: 2, scope: !11490)
!11496 = !DILocation(line: 2852, column: 44, scope: !11497)
!11497 = distinct !DILexicalBlock(scope: !11490, file: !3, line: 2852, column: 16)
!11498 = !DILocation(line: 2852, column: 16, scope: !11497)
!11499 = !DILocation(line: 2852, column: 16, scope: !11490)
!11500 = !DILocation(line: 2853, column: 36, scope: !11497)
!11501 = !DILocation(line: 2853, column: 8, scope: !11497)
!11502 = !DILocation(line: 2853, column: 6, scope: !11497)
!11503 = !DILocation(line: 2853, column: 2, scope: !11497)
!11504 = !DILocation(line: 2856, column: 32, scope: !11505)
!11505 = distinct !DILexicalBlock(scope: !11497, file: !3, line: 2855, column: 2)
!11506 = !DILocation(line: 2856, column: 4, scope: !11505)
!11507 = !DILocation(line: 2857, column: 4, scope: !11505)
!11508 = !DILocation(line: 2860, column: 37, scope: !11509)
!11509 = distinct !DILexicalBlock(scope: !11451, file: !3, line: 2860, column: 11)
!11510 = !DILocation(line: 2860, column: 11, scope: !11509)
!11511 = !DILocation(line: 2860, column: 11, scope: !11451)
!11512 = !DILocation(line: 2861, column: 36, scope: !11509)
!11513 = !DILocation(line: 2861, column: 8, scope: !11509)
!11514 = !DILocation(line: 2861, column: 6, scope: !11509)
!11515 = !DILocation(line: 2861, column: 2, scope: !11509)
!11516 = !DILocation(line: 2862, column: 37, scope: !11517)
!11517 = distinct !DILexicalBlock(scope: !11509, file: !3, line: 2862, column: 16)
!11518 = !DILocation(line: 2862, column: 17, scope: !11517)
!11519 = !DILocation(line: 2862, column: 16, scope: !11509)
!11520 = !DILocation(line: 2863, column: 32, scope: !11517)
!11521 = !DILocation(line: 2863, column: 38, scope: !11517)
!11522 = !DILocation(line: 2863, column: 48, scope: !11517)
!11523 = !DILocation(line: 2863, column: 8, scope: !11517)
!11524 = !DILocation(line: 2863, column: 6, scope: !11517)
!11525 = !DILocation(line: 2863, column: 2, scope: !11517)
!11526 = !DILocation(line: 2864, column: 42, scope: !11527)
!11527 = distinct !DILexicalBlock(scope: !11517, file: !3, line: 2864, column: 16)
!11528 = !DILocation(line: 2864, column: 17, scope: !11527)
!11529 = !DILocation(line: 2864, column: 16, scope: !11517)
!11530 = !DILocation(line: 2865, column: 8, scope: !11527)
!11531 = !DILocation(line: 2865, column: 6, scope: !11527)
!11532 = !DILocation(line: 2865, column: 2, scope: !11527)
!11533 = !DILocation(line: 2866, column: 44, scope: !11534)
!11534 = distinct !DILexicalBlock(scope: !11527, file: !3, line: 2866, column: 16)
!11535 = !DILocation(line: 2866, column: 16, scope: !11534)
!11536 = !DILocation(line: 2869, column: 9, scope: !11534)
!11537 = !DILocation(line: 2869, column: 44, scope: !11534)
!11538 = !DILocation(line: 2869, column: 13, scope: !11534)
!11539 = !DILocation(line: 2866, column: 16, scope: !11527)
!11540 = !DILocation(line: 2870, column: 36, scope: !11534)
!11541 = !DILocation(line: 2870, column: 8, scope: !11534)
!11542 = !DILocation(line: 2870, column: 6, scope: !11534)
!11543 = !DILocation(line: 2870, column: 2, scope: !11534)
!11544 = !DILocation(line: 2873, column: 32, scope: !11545)
!11545 = distinct !DILexicalBlock(scope: !11534, file: !3, line: 2872, column: 2)
!11546 = !DILocation(line: 2873, column: 4, scope: !11545)
!11547 = !DILocation(line: 2874, column: 4, scope: !11545)
!11548 = !DILocation(line: 2877, column: 29, scope: !11451)
!11549 = !DILocation(line: 2877, column: 34, scope: !11451)
!11550 = !DILocation(line: 2877, column: 13, scope: !11451)
!11551 = !DILocation(line: 2877, column: 11, scope: !11451)
!11552 = !DILocation(line: 2881, column: 15, scope: !11553)
!11553 = distinct !DILexicalBlock(scope: !11451, file: !3, line: 2881, column: 11)
!11554 = !DILocation(line: 2881, column: 20, scope: !11553)
!11555 = !DILocation(line: 2881, column: 11, scope: !11451)
!11556 = !DILocation(line: 2883, column: 8, scope: !11557)
!11557 = distinct !DILexicalBlock(scope: !11558, file: !3, line: 2883, column: 8)
!11558 = distinct !DILexicalBlock(scope: !11553, file: !3, line: 2882, column: 2)
!11559 = !DILocation(line: 2883, column: 8, scope: !11558)
!11560 = !DILocation(line: 2886, column: 12, scope: !11561)
!11561 = distinct !DILexicalBlock(scope: !11562, file: !3, line: 2886, column: 12)
!11562 = distinct !DILexicalBlock(scope: !11557, file: !3, line: 2884, column: 6)
!11563 = !DILocation(line: 2886, column: 16, scope: !11561)
!11564 = !DILocation(line: 2886, column: 12, scope: !11562)
!11565 = !DILocation(line: 2887, column: 9, scope: !11561)
!11566 = !DILocation(line: 2887, column: 7, scope: !11561)
!11567 = !DILocation(line: 2887, column: 3, scope: !11561)
!11568 = !DILocation(line: 2893, column: 12, scope: !11569)
!11569 = distinct !DILexicalBlock(scope: !11562, file: !3, line: 2893, column: 12)
!11570 = !DILocation(line: 2893, column: 12, scope: !11562)
!11571 = !DILocalVariable(name: "type_min_value", scope: !11572, file: !3, line: 2895, type: !1747)
!11572 = distinct !DILexicalBlock(scope: !11569, file: !3, line: 2894, column: 3)
!11573 = !DILocation(line: 2895, column: 10, scope: !11572)
!11574 = !DILocation(line: 2895, column: 27, scope: !11572)
!11575 = !DILocation(line: 2897, column: 16, scope: !11572)
!11576 = !DILocation(line: 2897, column: 23, scope: !11572)
!11577 = !DILocation(line: 2897, column: 20, scope: !11572)
!11578 = !DILocation(line: 2897, column: 12, scope: !11572)
!11579 = !DILocation(line: 2898, column: 35, scope: !11572)
!11580 = !DILocation(line: 2899, column: 10, scope: !11572)
!11581 = !DILocation(line: 2898, column: 7, scope: !11572)
!11582 = !DILocation(line: 2900, column: 7, scope: !11572)
!11583 = !DILocation(line: 2897, column: 9, scope: !11572)
!11584 = !DILocation(line: 2901, column: 3, scope: !11572)
!11585 = !DILocation(line: 2904, column: 9, scope: !11586)
!11586 = distinct !DILexicalBlock(scope: !11587, file: !3, line: 2904, column: 9)
!11587 = distinct !DILexicalBlock(scope: !11569, file: !3, line: 2903, column: 3)
!11588 = !DILocation(line: 2904, column: 9, scope: !11587)
!11589 = !DILocation(line: 2905, column: 41, scope: !11586)
!11590 = !DILocation(line: 2905, column: 13, scope: !11586)
!11591 = !DILocation(line: 2905, column: 11, scope: !11586)
!11592 = !DILocation(line: 2905, column: 7, scope: !11586)
!11593 = !DILocation(line: 2907, column: 13, scope: !11586)
!11594 = !DILocation(line: 2907, column: 11, scope: !11586)
!11595 = !DILocation(line: 2909, column: 6, scope: !11562)
!11596 = !DILocation(line: 2915, column: 12, scope: !11597)
!11597 = distinct !DILexicalBlock(scope: !11557, file: !3, line: 2911, column: 6)
!11598 = !DILocation(line: 2915, column: 17, scope: !11597)
!11599 = !DILocation(line: 2916, column: 29, scope: !11597)
!11600 = !DILocation(line: 2916, column: 14, scope: !11597)
!11601 = !DILocation(line: 2916, column: 12, scope: !11597)
!11602 = !DILocation(line: 2917, column: 37, scope: !11603)
!11603 = distinct !DILexicalBlock(scope: !11597, file: !3, line: 2917, column: 12)
!11604 = !DILocation(line: 2917, column: 12, scope: !11603)
!11605 = !DILocation(line: 2917, column: 12, scope: !11597)
!11606 = !DILocation(line: 2919, column: 37, scope: !11607)
!11607 = distinct !DILexicalBlock(scope: !11608, file: !3, line: 2919, column: 9)
!11608 = distinct !DILexicalBlock(scope: !11603, file: !3, line: 2918, column: 3)
!11609 = !DILocation(line: 2919, column: 9, scope: !11607)
!11610 = !DILocation(line: 2919, column: 9, scope: !11608)
!11611 = !DILocation(line: 2920, column: 41, scope: !11607)
!11612 = !DILocation(line: 2920, column: 13, scope: !11607)
!11613 = !DILocation(line: 2920, column: 11, scope: !11607)
!11614 = !DILocation(line: 2920, column: 7, scope: !11607)
!11615 = !DILocation(line: 2923, column: 37, scope: !11616)
!11616 = distinct !DILexicalBlock(scope: !11607, file: !3, line: 2922, column: 7)
!11617 = !DILocation(line: 2923, column: 9, scope: !11616)
!11618 = !DILocation(line: 2924, column: 9, scope: !11616)
!11619 = !DILocation(line: 2926, column: 3, scope: !11608)
!11620 = !DILocation(line: 2928, column: 9, scope: !11603)
!11621 = !DILocation(line: 2928, column: 7, scope: !11603)
!11622 = !DILocation(line: 2930, column: 2, scope: !11558)
!11623 = !DILocation(line: 2934, column: 16, scope: !11624)
!11624 = distinct !DILexicalBlock(scope: !11553, file: !3, line: 2934, column: 16)
!11625 = !DILocation(line: 2934, column: 16, scope: !11553)
!11626 = !DILocation(line: 2936, column: 8, scope: !11627)
!11627 = distinct !DILexicalBlock(scope: !11628, file: !3, line: 2936, column: 8)
!11628 = distinct !DILexicalBlock(scope: !11624, file: !3, line: 2935, column: 2)
!11629 = !DILocation(line: 2936, column: 12, scope: !11627)
!11630 = !DILocation(line: 2936, column: 8, scope: !11628)
!11631 = !DILocation(line: 2937, column: 12, scope: !11627)
!11632 = !DILocation(line: 2937, column: 10, scope: !11627)
!11633 = !DILocation(line: 2937, column: 6, scope: !11627)
!11634 = !DILocation(line: 2938, column: 25, scope: !11628)
!11635 = !DILocation(line: 2938, column: 10, scope: !11628)
!11636 = !DILocation(line: 2938, column: 8, scope: !11628)
!11637 = !DILocation(line: 2939, column: 2, scope: !11628)
!11638 = !DILocation(line: 2943, column: 8, scope: !11639)
!11639 = distinct !DILexicalBlock(scope: !11640, file: !3, line: 2943, column: 8)
!11640 = distinct !DILexicalBlock(scope: !11624, file: !3, line: 2941, column: 2)
!11641 = !DILocation(line: 2943, column: 12, scope: !11639)
!11642 = !DILocation(line: 2943, column: 8, scope: !11640)
!11643 = !DILocalVariable(name: "t", scope: !11644, file: !3, line: 2945, type: !1747)
!11644 = distinct !DILexicalBlock(scope: !11639, file: !3, line: 2944, column: 6)
!11645 = !DILocation(line: 2945, column: 13, scope: !11644)
!11646 = !DILocation(line: 2945, column: 17, scope: !11644)
!11647 = !DILocation(line: 2946, column: 14, scope: !11644)
!11648 = !DILocation(line: 2946, column: 12, scope: !11644)
!11649 = !DILocation(line: 2947, column: 14, scope: !11644)
!11650 = !DILocation(line: 2947, column: 12, scope: !11644)
!11651 = !DILocation(line: 2948, column: 6, scope: !11644)
!11652 = !DILocation(line: 2950, column: 5, scope: !11451)
!11653 = !DILocation(line: 2954, column: 37, scope: !11654)
!11654 = distinct !DILexicalBlock(scope: !11444, file: !3, line: 2952, column: 5)
!11655 = !DILocation(line: 2954, column: 43, scope: !11654)
!11656 = !DILocation(line: 2954, column: 53, scope: !11654)
!11657 = !DILocation(line: 2954, column: 13, scope: !11654)
!11658 = !DILocation(line: 2954, column: 11, scope: !11654)
!11659 = !DILocation(line: 2955, column: 37, scope: !11654)
!11660 = !DILocation(line: 2955, column: 43, scope: !11654)
!11661 = !DILocation(line: 2955, column: 53, scope: !11654)
!11662 = !DILocation(line: 2955, column: 13, scope: !11654)
!11663 = !DILocation(line: 2955, column: 11, scope: !11654)
!11664 = !DILocation(line: 2957, column: 36, scope: !11665)
!11665 = distinct !DILexicalBlock(scope: !11654, file: !3, line: 2957, column: 11)
!11666 = !DILocation(line: 2957, column: 11, scope: !11665)
!11667 = !DILocation(line: 2957, column: 11, scope: !11654)
!11668 = !DILocation(line: 2959, column: 4, scope: !11669)
!11669 = distinct !DILexicalBlock(scope: !11665, file: !3, line: 2958, column: 2)
!11670 = !DILocation(line: 2963, column: 35, scope: !11671)
!11671 = distinct !DILexicalBlock(scope: !11669, file: !3, line: 2963, column: 8)
!11672 = !DILocation(line: 2963, column: 9, scope: !11671)
!11673 = !DILocation(line: 2964, column: 9, scope: !11671)
!11674 = !DILocation(line: 2964, column: 12, scope: !11671)
!11675 = !DILocation(line: 2965, column: 8, scope: !11671)
!11676 = !DILocation(line: 2965, column: 38, scope: !11671)
!11677 = !DILocation(line: 2965, column: 12, scope: !11671)
!11678 = !DILocation(line: 2966, column: 5, scope: !11671)
!11679 = !DILocation(line: 2966, column: 8, scope: !11671)
!11680 = !DILocation(line: 2963, column: 8, scope: !11669)
!11681 = !DILocation(line: 2968, column: 36, scope: !11682)
!11682 = distinct !DILexicalBlock(scope: !11671, file: !3, line: 2967, column: 6)
!11683 = !DILocation(line: 2968, column: 8, scope: !11682)
!11684 = !DILocation(line: 2969, column: 8, scope: !11682)
!11685 = !DILocation(line: 2972, column: 34, scope: !11686)
!11686 = distinct !DILexicalBlock(scope: !11669, file: !3, line: 2972, column: 8)
!11687 = !DILocation(line: 2972, column: 8, scope: !11686)
!11688 = !DILocation(line: 2972, column: 8, scope: !11669)
!11689 = !DILocation(line: 2973, column: 16, scope: !11686)
!11690 = !DILocation(line: 2973, column: 10, scope: !11686)
!11691 = !DILocation(line: 2973, column: 6, scope: !11686)
!11692 = !DILocation(line: 2974, column: 13, scope: !11693)
!11693 = distinct !DILexicalBlock(scope: !11686, file: !3, line: 2974, column: 13)
!11694 = !DILocation(line: 2974, column: 13, scope: !11686)
!11695 = !DILocation(line: 2976, column: 40, scope: !11696)
!11696 = distinct !DILexicalBlock(scope: !11697, file: !3, line: 2976, column: 12)
!11697 = distinct !DILexicalBlock(scope: !11693, file: !3, line: 2975, column: 6)
!11698 = !DILocation(line: 2976, column: 12, scope: !11696)
!11699 = !DILocation(line: 2976, column: 12, scope: !11697)
!11700 = !DILocation(line: 2977, column: 28, scope: !11696)
!11701 = !DILocation(line: 2977, column: 10, scope: !11696)
!11702 = !DILocation(line: 2977, column: 33, scope: !11696)
!11703 = !DILocation(line: 2978, column: 40, scope: !11696)
!11704 = !DILocation(line: 2978, column: 12, scope: !11696)
!11705 = !DILocation(line: 2979, column: 40, scope: !11696)
!11706 = !DILocation(line: 2979, column: 12, scope: !11696)
!11707 = !DILocation(line: 2977, column: 7, scope: !11696)
!11708 = !DILocation(line: 2977, column: 3, scope: !11696)
!11709 = !DILocation(line: 2982, column: 33, scope: !11710)
!11710 = distinct !DILexicalBlock(scope: !11696, file: !3, line: 2981, column: 3)
!11711 = !DILocation(line: 2982, column: 5, scope: !11710)
!11712 = !DILocation(line: 2983, column: 5, scope: !11710)
!11713 = !DILocation(line: 2985, column: 6, scope: !11697)
!11714 = !DILocation(line: 2987, column: 34, scope: !11715)
!11715 = distinct !DILexicalBlock(scope: !11669, file: !3, line: 2987, column: 8)
!11716 = !DILocation(line: 2987, column: 8, scope: !11715)
!11717 = !DILocation(line: 2987, column: 8, scope: !11669)
!11718 = !DILocation(line: 2988, column: 16, scope: !11715)
!11719 = !DILocation(line: 2988, column: 10, scope: !11715)
!11720 = !DILocation(line: 2988, column: 6, scope: !11715)
!11721 = !DILocation(line: 2989, column: 13, scope: !11722)
!11722 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 2989, column: 13)
!11723 = !DILocation(line: 2989, column: 13, scope: !11715)
!11724 = !DILocation(line: 2991, column: 40, scope: !11725)
!11725 = distinct !DILexicalBlock(scope: !11726, file: !3, line: 2991, column: 12)
!11726 = distinct !DILexicalBlock(scope: !11722, file: !3, line: 2990, column: 6)
!11727 = !DILocation(line: 2991, column: 12, scope: !11725)
!11728 = !DILocation(line: 2991, column: 12, scope: !11726)
!11729 = !DILocation(line: 2992, column: 28, scope: !11725)
!11730 = !DILocation(line: 2992, column: 10, scope: !11725)
!11731 = !DILocation(line: 2992, column: 33, scope: !11725)
!11732 = !DILocation(line: 2993, column: 40, scope: !11725)
!11733 = !DILocation(line: 2993, column: 12, scope: !11725)
!11734 = !DILocation(line: 2994, column: 40, scope: !11725)
!11735 = !DILocation(line: 2994, column: 12, scope: !11725)
!11736 = !DILocation(line: 2992, column: 7, scope: !11725)
!11737 = !DILocation(line: 2992, column: 3, scope: !11725)
!11738 = !DILocation(line: 2997, column: 33, scope: !11739)
!11739 = distinct !DILexicalBlock(scope: !11725, file: !3, line: 2996, column: 3)
!11740 = !DILocation(line: 2997, column: 5, scope: !11739)
!11741 = !DILocation(line: 2998, column: 5, scope: !11739)
!11742 = !DILocation(line: 3000, column: 6, scope: !11726)
!11743 = !DILocation(line: 3001, column: 2, scope: !11669)
!11744 = !DILocation(line: 3004, column: 25, scope: !11077)
!11745 = !DILocation(line: 3004, column: 30, scope: !11077)
!11746 = !DILocation(line: 3004, column: 9, scope: !11077)
!11747 = !DILocation(line: 3004, column: 7, scope: !11077)
!11748 = !DILocation(line: 3005, column: 7, scope: !11749)
!11749 = distinct !DILexicalBlock(scope: !11077, file: !3, line: 3005, column: 7)
!11750 = !DILocation(line: 3005, column: 11, scope: !11749)
!11751 = !DILocation(line: 3005, column: 17, scope: !11749)
!11752 = !DILocation(line: 3005, column: 20, scope: !11749)
!11753 = !DILocation(line: 3005, column: 24, scope: !11749)
!11754 = !DILocation(line: 3005, column: 7, scope: !11077)
!11755 = !DILocation(line: 3010, column: 35, scope: !11756)
!11756 = distinct !DILexicalBlock(scope: !11749, file: !3, line: 3006, column: 5)
!11757 = !DILocation(line: 3010, column: 7, scope: !11756)
!11758 = !DILocation(line: 3011, column: 5, scope: !11756)
!11759 = !DILocation(line: 3013, column: 22, scope: !11749)
!11760 = !DILocation(line: 3013, column: 30, scope: !11749)
!11761 = !DILocation(line: 3013, column: 36, scope: !11749)
!11762 = !DILocation(line: 3013, column: 41, scope: !11749)
!11763 = !DILocation(line: 3013, column: 5, scope: !11749)
!11764 = !DILocation(line: 3014, column: 1, scope: !11077)
!11765 = distinct !DISubprogram(name: "extract_range_from_cond_expr", scope: !3, file: !3, line: 3021, type: !4191, scopeLine: 3022, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!11766 = !DILocalVariable(name: "vr", arg: 1, scope: !11765, file: !3, line: 3021, type: !1741)
!11767 = !DILocation(line: 3021, column: 46, scope: !11765)
!11768 = !DILocalVariable(name: "expr", arg: 2, scope: !11765, file: !3, line: 3021, type: !1747)
!11769 = !DILocation(line: 3021, column: 55, scope: !11765)
!11770 = !DILocalVariable(name: "op0", scope: !11765, file: !3, line: 3023, type: !1747)
!11771 = !DILocation(line: 3023, column: 8, scope: !11765)
!11772 = !DILocalVariable(name: "op1", scope: !11765, file: !3, line: 3023, type: !1747)
!11773 = !DILocation(line: 3023, column: 13, scope: !11765)
!11774 = !DILocalVariable(name: "vr0", scope: !11765, file: !3, line: 3024, type: !1742)
!11775 = !DILocation(line: 3024, column: 17, scope: !11765)
!11776 = !DILocalVariable(name: "vr1", scope: !11765, file: !3, line: 3025, type: !1742)
!11777 = !DILocation(line: 3025, column: 17, scope: !11765)
!11778 = !DILocation(line: 3029, column: 9, scope: !11765)
!11779 = !DILocation(line: 3029, column: 7, scope: !11765)
!11780 = !DILocation(line: 3030, column: 7, scope: !11781)
!11781 = distinct !DILexicalBlock(scope: !11765, file: !3, line: 3030, column: 7)
!11782 = !DILocation(line: 3030, column: 23, scope: !11781)
!11783 = !DILocation(line: 3030, column: 7, scope: !11765)
!11784 = !DILocation(line: 3031, column: 30, scope: !11781)
!11785 = !DILocation(line: 3031, column: 13, scope: !11781)
!11786 = !DILocation(line: 3031, column: 11, scope: !11781)
!11787 = !DILocation(line: 3031, column: 5, scope: !11781)
!11788 = !DILocation(line: 3032, column: 37, scope: !11789)
!11789 = distinct !DILexicalBlock(scope: !11781, file: !3, line: 3032, column: 12)
!11790 = !DILocation(line: 3032, column: 12, scope: !11789)
!11791 = !DILocation(line: 3032, column: 12, scope: !11781)
!11792 = !DILocation(line: 3033, column: 37, scope: !11789)
!11793 = !DILocation(line: 3033, column: 5, scope: !11789)
!11794 = !DILocation(line: 3035, column: 5, scope: !11789)
!11795 = !DILocation(line: 3037, column: 9, scope: !11765)
!11796 = !DILocation(line: 3037, column: 7, scope: !11765)
!11797 = !DILocation(line: 3038, column: 7, scope: !11798)
!11798 = distinct !DILexicalBlock(scope: !11765, file: !3, line: 3038, column: 7)
!11799 = !DILocation(line: 3038, column: 23, scope: !11798)
!11800 = !DILocation(line: 3038, column: 7, scope: !11765)
!11801 = !DILocation(line: 3039, column: 30, scope: !11798)
!11802 = !DILocation(line: 3039, column: 13, scope: !11798)
!11803 = !DILocation(line: 3039, column: 11, scope: !11798)
!11804 = !DILocation(line: 3039, column: 5, scope: !11798)
!11805 = !DILocation(line: 3040, column: 37, scope: !11806)
!11806 = distinct !DILexicalBlock(scope: !11798, file: !3, line: 3040, column: 12)
!11807 = !DILocation(line: 3040, column: 12, scope: !11806)
!11808 = !DILocation(line: 3040, column: 12, scope: !11798)
!11809 = !DILocation(line: 3041, column: 37, scope: !11806)
!11810 = !DILocation(line: 3041, column: 5, scope: !11806)
!11811 = !DILocation(line: 3043, column: 5, scope: !11806)
!11812 = !DILocation(line: 3046, column: 3, scope: !11765)
!11813 = !DILocation(line: 3047, column: 21, scope: !11765)
!11814 = !DILocation(line: 3047, column: 3, scope: !11765)
!11815 = !DILocation(line: 3048, column: 1, scope: !11765)
!11816 = distinct !DISubprogram(name: "extract_range_from_comparison", scope: !3, file: !3, line: 3055, type: !10044, scopeLine: 3057, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!11817 = !DILocalVariable(name: "vr", arg: 1, scope: !11816, file: !3, line: 3055, type: !1741)
!11818 = !DILocation(line: 3055, column: 47, scope: !11816)
!11819 = !DILocalVariable(name: "code", arg: 2, scope: !11816, file: !3, line: 3055, type: !134)
!11820 = !DILocation(line: 3055, column: 66, scope: !11816)
!11821 = !DILocalVariable(name: "type", arg: 3, scope: !11816, file: !3, line: 3056, type: !1747)
!11822 = !DILocation(line: 3056, column: 16, scope: !11816)
!11823 = !DILocalVariable(name: "op0", arg: 4, scope: !11816, file: !3, line: 3056, type: !1747)
!11824 = !DILocation(line: 3056, column: 27, scope: !11816)
!11825 = !DILocalVariable(name: "op1", arg: 5, scope: !11816, file: !3, line: 3056, type: !1747)
!11826 = !DILocation(line: 3056, column: 37, scope: !11816)
!11827 = !DILocalVariable(name: "sop", scope: !11816, file: !3, line: 3058, type: !1866)
!11828 = !DILocation(line: 3058, column: 8, scope: !11816)
!11829 = !DILocalVariable(name: "val", scope: !11816, file: !3, line: 3059, type: !1747)
!11830 = !DILocation(line: 3059, column: 8, scope: !11816)
!11831 = !DILocation(line: 3061, column: 50, scope: !11816)
!11832 = !DILocation(line: 3061, column: 56, scope: !11816)
!11833 = !DILocation(line: 3061, column: 61, scope: !11816)
!11834 = !DILocation(line: 3061, column: 9, scope: !11816)
!11835 = !DILocation(line: 3061, column: 7, scope: !11816)
!11836 = !DILocation(line: 3069, column: 7, scope: !11837)
!11837 = distinct !DILexicalBlock(scope: !11816, file: !3, line: 3069, column: 7)
!11838 = !DILocation(line: 3069, column: 11, scope: !11837)
!11839 = !DILocation(line: 3069, column: 37, scope: !11837)
!11840 = !DILocation(line: 3069, column: 15, scope: !11837)
!11841 = !DILocation(line: 3069, column: 42, scope: !11837)
!11842 = !DILocation(line: 3069, column: 46, scope: !11837)
!11843 = !DILocation(line: 3069, column: 7, scope: !11816)
!11844 = !DILocation(line: 3074, column: 13, scope: !11845)
!11845 = distinct !DILexicalBlock(scope: !11837, file: !3, line: 3070, column: 5)
!11846 = !DILocation(line: 3074, column: 11, scope: !11845)
!11847 = !DILocation(line: 3075, column: 36, scope: !11848)
!11848 = distinct !DILexicalBlock(scope: !11845, file: !3, line: 3075, column: 11)
!11849 = !DILocation(line: 3075, column: 11, scope: !11848)
!11850 = !DILocation(line: 3075, column: 11, scope: !11845)
!11851 = !DILocation(line: 3076, column: 28, scope: !11848)
!11852 = !DILocation(line: 3076, column: 32, scope: !11848)
!11853 = !DILocation(line: 3076, column: 37, scope: !11848)
!11854 = !DILocation(line: 3076, column: 41, scope: !11848)
!11855 = !DILocation(line: 3076, column: 2, scope: !11848)
!11856 = !DILocation(line: 3078, column: 19, scope: !11848)
!11857 = !DILocation(line: 3078, column: 33, scope: !11848)
!11858 = !DILocation(line: 3078, column: 38, scope: !11848)
!11859 = !DILocation(line: 3078, column: 43, scope: !11848)
!11860 = !DILocation(line: 3078, column: 47, scope: !11848)
!11861 = !DILocation(line: 3078, column: 2, scope: !11848)
!11862 = !DILocation(line: 3079, column: 5, scope: !11845)
!11863 = !DILocation(line: 3082, column: 36, scope: !11837)
!11864 = !DILocation(line: 3082, column: 40, scope: !11837)
!11865 = !DILocation(line: 3082, column: 5, scope: !11837)
!11866 = !DILocation(line: 3083, column: 1, scope: !11816)
!11867 = distinct !DISubprogram(name: "set_value_range_to_value", scope: !3, file: !3, line: 513, type: !11868, scopeLine: 514, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!11868 = !DISubroutineType(types: !11869)
!11869 = !{null, !1741, !1747, !2645}
!11870 = !DILocalVariable(name: "vr", arg: 1, scope: !11867, file: !3, line: 513, type: !1741)
!11871 = !DILocation(line: 513, column: 42, scope: !11867)
!11872 = !DILocalVariable(name: "val", arg: 2, scope: !11867, file: !3, line: 513, type: !1747)
!11873 = !DILocation(line: 513, column: 51, scope: !11867)
!11874 = !DILocalVariable(name: "equiv", arg: 3, scope: !11867, file: !3, line: 513, type: !2645)
!11875 = !DILocation(line: 513, column: 63, scope: !11867)
!11876 = !DILocation(line: 515, column: 3, scope: !11867)
!11877 = !DILocation(line: 516, column: 34, scope: !11867)
!11878 = !DILocation(line: 516, column: 9, scope: !11867)
!11879 = !DILocation(line: 516, column: 7, scope: !11867)
!11880 = !DILocation(line: 517, column: 20, scope: !11867)
!11881 = !DILocation(line: 517, column: 34, scope: !11867)
!11882 = !DILocation(line: 517, column: 39, scope: !11867)
!11883 = !DILocation(line: 517, column: 44, scope: !11867)
!11884 = !DILocation(line: 517, column: 3, scope: !11867)
!11885 = !DILocation(line: 518, column: 1, scope: !11867)
!11886 = distinct !DISubprogram(name: "avoid_overflow_infinity", scope: !3, file: !3, line: 292, type: !9188, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!11887 = !DILocalVariable(name: "val", arg: 1, scope: !11886, file: !3, line: 292, type: !1747)
!11888 = !DILocation(line: 292, column: 31, scope: !11886)
!11889 = !DILocation(line: 294, column: 30, scope: !11890)
!11890 = distinct !DILexicalBlock(scope: !11886, file: !3, line: 294, column: 7)
!11891 = !DILocation(line: 294, column: 8, scope: !11890)
!11892 = !DILocation(line: 294, column: 7, scope: !11886)
!11893 = !DILocation(line: 295, column: 12, scope: !11890)
!11894 = !DILocation(line: 295, column: 5, scope: !11890)
!11895 = !DILocation(line: 297, column: 23, scope: !11896)
!11896 = distinct !DILexicalBlock(scope: !11886, file: !3, line: 297, column: 7)
!11897 = !DILocation(line: 297, column: 7, scope: !11896)
!11898 = !DILocation(line: 297, column: 7, scope: !11886)
!11899 = !DILocation(line: 298, column: 25, scope: !11896)
!11900 = !DILocation(line: 298, column: 12, scope: !11896)
!11901 = !DILocation(line: 298, column: 5, scope: !11896)
!11902 = !DILocation(line: 304, column: 27, scope: !11903)
!11903 = distinct !DILexicalBlock(scope: !11896, file: !3, line: 300, column: 5)
!11904 = !DILocation(line: 304, column: 14, scope: !11903)
!11905 = !DILocation(line: 304, column: 7, scope: !11903)
!11906 = !DILocation(line: 306, column: 1, scope: !11886)
!11907 = distinct !DISubprogram(name: "symbolic_range_p", scope: !3, file: !3, line: 771, type: !9244, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!11908 = !DILocalVariable(name: "vr", arg: 1, scope: !11907, file: !3, line: 771, type: !1741)
!11909 = !DILocation(line: 771, column: 34, scope: !11907)
!11910 = !DILocation(line: 773, column: 37, scope: !11907)
!11911 = !DILocation(line: 773, column: 41, scope: !11907)
!11912 = !DILocation(line: 773, column: 12, scope: !11907)
!11913 = !DILocation(line: 774, column: 11, scope: !11907)
!11914 = !DILocation(line: 774, column: 40, scope: !11907)
!11915 = !DILocation(line: 774, column: 44, scope: !11907)
!11916 = !DILocation(line: 774, column: 15, scope: !11907)
!11917 = !DILocation(line: 774, column: 14, scope: !11907)
!11918 = !DILocation(line: 773, column: 10, scope: !11907)
!11919 = !DILocation(line: 773, column: 3, scope: !11907)
!11920 = distinct !DISubprogram(name: "add_equivalence", scope: !3, file: !3, line: 733, type: !11921, scopeLine: 734, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!11921 = !DISubroutineType(types: !11922)
!11922 = !{null, !11923, !3139}
!11923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2645, size: 64)
!11924 = !DILocalVariable(name: "equiv", arg: 1, scope: !11920, file: !3, line: 733, type: !11923)
!11925 = !DILocation(line: 733, column: 26, scope: !11920)
!11926 = !DILocalVariable(name: "var", arg: 2, scope: !11920, file: !3, line: 733, type: !3139)
!11927 = !DILocation(line: 733, column: 44, scope: !11920)
!11928 = !DILocalVariable(name: "ver", scope: !11920, file: !3, line: 735, type: !7)
!11929 = !DILocation(line: 735, column: 12, scope: !11920)
!11930 = !DILocation(line: 735, column: 18, scope: !11920)
!11931 = !DILocalVariable(name: "vr", scope: !11920, file: !3, line: 736, type: !1741)
!11932 = !DILocation(line: 736, column: 18, scope: !11920)
!11933 = !DILocation(line: 736, column: 23, scope: !11920)
!11934 = !DILocation(line: 736, column: 32, scope: !11920)
!11935 = !DILocation(line: 738, column: 8, scope: !11936)
!11936 = distinct !DILexicalBlock(scope: !11920, file: !3, line: 738, column: 7)
!11937 = !DILocation(line: 738, column: 7, scope: !11936)
!11938 = !DILocation(line: 738, column: 14, scope: !11936)
!11939 = !DILocation(line: 738, column: 7, scope: !11920)
!11940 = !DILocation(line: 739, column: 14, scope: !11936)
!11941 = !DILocation(line: 739, column: 6, scope: !11936)
!11942 = !DILocation(line: 739, column: 12, scope: !11936)
!11943 = !DILocation(line: 739, column: 5, scope: !11936)
!11944 = !DILocation(line: 740, column: 20, scope: !11920)
!11945 = !DILocation(line: 740, column: 19, scope: !11920)
!11946 = !DILocation(line: 740, column: 27, scope: !11920)
!11947 = !DILocation(line: 740, column: 3, scope: !11920)
!11948 = !DILocation(line: 741, column: 7, scope: !11949)
!11949 = distinct !DILexicalBlock(scope: !11920, file: !3, line: 741, column: 7)
!11950 = !DILocation(line: 741, column: 10, scope: !11949)
!11951 = !DILocation(line: 741, column: 13, scope: !11949)
!11952 = !DILocation(line: 741, column: 17, scope: !11949)
!11953 = !DILocation(line: 741, column: 7, scope: !11920)
!11954 = !DILocation(line: 742, column: 23, scope: !11949)
!11955 = !DILocation(line: 742, column: 22, scope: !11949)
!11956 = !DILocation(line: 742, column: 30, scope: !11949)
!11957 = !DILocation(line: 742, column: 34, scope: !11949)
!11958 = !DILocation(line: 742, column: 5, scope: !11949)
!11959 = !DILocation(line: 743, column: 1, scope: !11920)
!11960 = distinct !DISubprogram(name: "set_and_canonicalize_value_range", scope: !3, file: !3, line: 431, type: !4229, scopeLine: 433, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!11961 = !DILocalVariable(name: "vr", arg: 1, scope: !11960, file: !3, line: 431, type: !1741)
!11962 = !DILocation(line: 431, column: 50, scope: !11960)
!11963 = !DILocalVariable(name: "t", arg: 2, scope: !11960, file: !3, line: 431, type: !390)
!11964 = !DILocation(line: 431, column: 76, scope: !11960)
!11965 = !DILocalVariable(name: "min", arg: 3, scope: !11960, file: !3, line: 432, type: !1747)
!11966 = !DILocation(line: 432, column: 12, scope: !11960)
!11967 = !DILocalVariable(name: "max", arg: 4, scope: !11960, file: !3, line: 432, type: !1747)
!11968 = !DILocation(line: 432, column: 22, scope: !11960)
!11969 = !DILocalVariable(name: "equiv", arg: 5, scope: !11960, file: !3, line: 432, type: !2645)
!11970 = !DILocation(line: 432, column: 34, scope: !11960)
!11971 = !DILocation(line: 435, column: 8, scope: !11972)
!11972 = distinct !DILexicalBlock(scope: !11960, file: !3, line: 435, column: 7)
!11973 = !DILocation(line: 435, column: 10, scope: !11972)
!11974 = !DILocation(line: 436, column: 8, scope: !11972)
!11975 = !DILocation(line: 436, column: 11, scope: !11972)
!11976 = !DILocation(line: 436, column: 13, scope: !11972)
!11977 = !DILocation(line: 437, column: 7, scope: !11972)
!11978 = !DILocation(line: 437, column: 10, scope: !11972)
!11979 = !DILocation(line: 437, column: 26, scope: !11972)
!11980 = !DILocation(line: 438, column: 7, scope: !11972)
!11981 = !DILocation(line: 438, column: 10, scope: !11972)
!11982 = !DILocation(line: 438, column: 26, scope: !11972)
!11983 = !DILocation(line: 435, column: 7, scope: !11960)
!11984 = !DILocation(line: 440, column: 24, scope: !11985)
!11985 = distinct !DILexicalBlock(scope: !11972, file: !3, line: 439, column: 5)
!11986 = !DILocation(line: 440, column: 28, scope: !11985)
!11987 = !DILocation(line: 440, column: 31, scope: !11985)
!11988 = !DILocation(line: 440, column: 36, scope: !11985)
!11989 = !DILocation(line: 440, column: 41, scope: !11985)
!11990 = !DILocation(line: 440, column: 7, scope: !11985)
!11991 = !DILocation(line: 441, column: 7, scope: !11985)
!11992 = !DILocation(line: 446, column: 24, scope: !11993)
!11993 = distinct !DILexicalBlock(scope: !11960, file: !3, line: 446, column: 7)
!11994 = !DILocation(line: 446, column: 29, scope: !11993)
!11995 = !DILocation(line: 446, column: 7, scope: !11993)
!11996 = !DILocation(line: 446, column: 7, scope: !11960)
!11997 = !DILocalVariable(name: "one", scope: !11998, file: !3, line: 448, type: !1747)
!11998 = distinct !DILexicalBlock(scope: !11993, file: !3, line: 447, column: 5)
!11999 = !DILocation(line: 448, column: 12, scope: !11998)
!12000 = !DILocation(line: 448, column: 33, scope: !11998)
!12001 = !DILocation(line: 448, column: 18, scope: !11998)
!12002 = !DILocalVariable(name: "tmp", scope: !11998, file: !3, line: 449, type: !1747)
!12003 = !DILocation(line: 449, column: 12, scope: !11998)
!12004 = !DILocation(line: 449, column: 46, scope: !11998)
!12005 = !DILocation(line: 449, column: 51, scope: !11998)
!12006 = !DILocation(line: 449, column: 18, scope: !11998)
!12007 = !DILocation(line: 450, column: 42, scope: !11998)
!12008 = !DILocation(line: 450, column: 47, scope: !11998)
!12009 = !DILocation(line: 450, column: 13, scope: !11998)
!12010 = !DILocation(line: 450, column: 11, scope: !11998)
!12011 = !DILocation(line: 451, column: 13, scope: !11998)
!12012 = !DILocation(line: 451, column: 11, scope: !11998)
!12013 = !DILocation(line: 456, column: 28, scope: !12014)
!12014 = distinct !DILexicalBlock(scope: !11998, file: !3, line: 456, column: 11)
!12015 = !DILocation(line: 456, column: 33, scope: !12014)
!12016 = !DILocation(line: 456, column: 11, scope: !12014)
!12017 = !DILocation(line: 456, column: 11, scope: !11998)
!12018 = !DILocation(line: 458, column: 32, scope: !12019)
!12019 = distinct !DILexicalBlock(scope: !12014, file: !3, line: 457, column: 2)
!12020 = !DILocation(line: 458, column: 4, scope: !12019)
!12021 = !DILocation(line: 459, column: 4, scope: !12019)
!12022 = !DILocation(line: 462, column: 11, scope: !11998)
!12023 = !DILocation(line: 462, column: 13, scope: !11998)
!12024 = !DILocation(line: 462, column: 9, scope: !11998)
!12025 = !DILocation(line: 463, column: 5, scope: !11998)
!12026 = !DILocation(line: 466, column: 7, scope: !12027)
!12027 = distinct !DILexicalBlock(scope: !11960, file: !3, line: 466, column: 7)
!12028 = !DILocation(line: 466, column: 9, scope: !12027)
!12029 = !DILocation(line: 466, column: 7, scope: !11960)
!12030 = !DILocalVariable(name: "is_min", scope: !12031, file: !3, line: 468, type: !1866)
!12031 = distinct !DILexicalBlock(scope: !12027, file: !3, line: 467, column: 5)
!12032 = !DILocation(line: 468, column: 12, scope: !12031)
!12033 = !DILocation(line: 468, column: 37, scope: !12031)
!12034 = !DILocation(line: 468, column: 21, scope: !12031)
!12035 = !DILocalVariable(name: "is_max", scope: !12031, file: !3, line: 469, type: !1866)
!12036 = !DILocation(line: 469, column: 12, scope: !12031)
!12037 = !DILocation(line: 469, column: 37, scope: !12031)
!12038 = !DILocation(line: 469, column: 21, scope: !12031)
!12039 = !DILocation(line: 471, column: 11, scope: !12040)
!12040 = distinct !DILexicalBlock(scope: !12031, file: !3, line: 471, column: 11)
!12041 = !DILocation(line: 471, column: 18, scope: !12040)
!12042 = !DILocation(line: 471, column: 21, scope: !12040)
!12043 = !DILocation(line: 471, column: 11, scope: !12031)
!12044 = !DILocation(line: 474, column: 32, scope: !12045)
!12045 = distinct !DILexicalBlock(scope: !12040, file: !3, line: 472, column: 2)
!12046 = !DILocation(line: 474, column: 4, scope: !12045)
!12047 = !DILocation(line: 475, column: 4, scope: !12045)
!12048 = !DILocation(line: 477, column: 16, scope: !12049)
!12049 = distinct !DILexicalBlock(scope: !12040, file: !3, line: 477, column: 16)
!12050 = !DILocation(line: 479, column: 9, scope: !12049)
!12051 = !DILocation(line: 479, column: 14, scope: !12049)
!12052 = !DILocation(line: 480, column: 7, scope: !12049)
!12053 = !DILocation(line: 480, column: 25, scope: !12049)
!12054 = !DILocation(line: 480, column: 10, scope: !12049)
!12055 = !DILocation(line: 477, column: 16, scope: !12040)
!12056 = !DILocalVariable(name: "one", scope: !12057, file: !3, line: 482, type: !1747)
!12057 = distinct !DILexicalBlock(scope: !12049, file: !3, line: 481, column: 9)
!12058 = !DILocation(line: 482, column: 9, scope: !12057)
!12059 = !DILocation(line: 482, column: 30, scope: !12057)
!12060 = !DILocation(line: 482, column: 15, scope: !12057)
!12061 = !DILocation(line: 483, column: 38, scope: !12057)
!12062 = !DILocation(line: 483, column: 43, scope: !12057)
!12063 = !DILocation(line: 483, column: 10, scope: !12057)
!12064 = !DILocation(line: 483, column: 8, scope: !12057)
!12065 = !DILocation(line: 484, column: 23, scope: !12057)
!12066 = !DILocation(line: 484, column: 10, scope: !12057)
!12067 = !DILocation(line: 484, column: 8, scope: !12057)
!12068 = !DILocation(line: 485, column: 6, scope: !12057)
!12069 = !DILocation(line: 486, column: 9, scope: !12057)
!12070 = !DILocation(line: 487, column: 16, scope: !12071)
!12071 = distinct !DILexicalBlock(scope: !12049, file: !3, line: 487, column: 16)
!12072 = !DILocation(line: 487, column: 16, scope: !12049)
!12073 = !DILocalVariable(name: "one", scope: !12074, file: !3, line: 489, type: !1747)
!12074 = distinct !DILexicalBlock(scope: !12071, file: !3, line: 488, column: 9)
!12075 = !DILocation(line: 489, column: 9, scope: !12074)
!12076 = !DILocation(line: 489, column: 30, scope: !12074)
!12077 = !DILocation(line: 489, column: 15, scope: !12074)
!12078 = !DILocation(line: 490, column: 39, scope: !12074)
!12079 = !DILocation(line: 490, column: 44, scope: !12074)
!12080 = !DILocation(line: 490, column: 10, scope: !12074)
!12081 = !DILocation(line: 490, column: 8, scope: !12074)
!12082 = !DILocation(line: 491, column: 23, scope: !12074)
!12083 = !DILocation(line: 491, column: 10, scope: !12074)
!12084 = !DILocation(line: 491, column: 8, scope: !12074)
!12085 = !DILocation(line: 492, column: 6, scope: !12074)
!12086 = !DILocation(line: 493, column: 9, scope: !12074)
!12087 = !DILocation(line: 494, column: 5, scope: !12031)
!12088 = !DILocation(line: 496, column: 20, scope: !11960)
!12089 = !DILocation(line: 496, column: 24, scope: !11960)
!12090 = !DILocation(line: 496, column: 27, scope: !11960)
!12091 = !DILocation(line: 496, column: 32, scope: !11960)
!12092 = !DILocation(line: 496, column: 37, scope: !11960)
!12093 = !DILocation(line: 496, column: 3, scope: !11960)
!12094 = !DILocation(line: 497, column: 1, scope: !11960)
!12095 = distinct !DISubprogram(name: "value_ranges_intersect_p", scope: !3, file: !3, line: 1318, type: !12096, scopeLine: 1319, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12096 = !DISubroutineType(types: !12097)
!12097 = !{!1866, !1741, !1741}
!12098 = !DILocalVariable(name: "vr0", arg: 1, scope: !12095, file: !3, line: 1318, type: !1741)
!12099 = !DILocation(line: 1318, column: 42, scope: !12095)
!12100 = !DILocalVariable(name: "vr1", arg: 2, scope: !12095, file: !3, line: 1318, type: !1741)
!12101 = !DILocation(line: 1318, column: 62, scope: !12095)
!12102 = !DILocation(line: 1323, column: 23, scope: !12103)
!12103 = distinct !DILexicalBlock(scope: !12095, file: !3, line: 1323, column: 7)
!12104 = !DILocation(line: 1323, column: 28, scope: !12103)
!12105 = !DILocation(line: 1323, column: 33, scope: !12103)
!12106 = !DILocation(line: 1323, column: 38, scope: !12103)
!12107 = !DILocation(line: 1323, column: 7, scope: !12103)
!12108 = !DILocation(line: 1323, column: 43, scope: !12103)
!12109 = !DILocation(line: 1323, column: 7, scope: !12095)
!12110 = !DILocation(line: 1324, column: 5, scope: !12103)
!12111 = !DILocation(line: 1325, column: 23, scope: !12112)
!12112 = distinct !DILexicalBlock(scope: !12095, file: !3, line: 1325, column: 7)
!12113 = !DILocation(line: 1325, column: 28, scope: !12112)
!12114 = !DILocation(line: 1325, column: 33, scope: !12112)
!12115 = !DILocation(line: 1325, column: 38, scope: !12112)
!12116 = !DILocation(line: 1325, column: 7, scope: !12112)
!12117 = !DILocation(line: 1325, column: 43, scope: !12112)
!12118 = !DILocation(line: 1325, column: 7, scope: !12095)
!12119 = !DILocation(line: 1326, column: 5, scope: !12112)
!12120 = !DILocation(line: 1327, column: 3, scope: !12095)
!12121 = !DILocation(line: 1328, column: 1, scope: !12095)
!12122 = distinct !DISubprogram(name: "negative_overflow_infinity", scope: !3, file: !3, line: 223, type: !9188, scopeLine: 224, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12123 = !DILocalVariable(name: "type", arg: 1, scope: !12122, file: !3, line: 223, type: !1747)
!12124 = !DILocation(line: 223, column: 34, scope: !12122)
!12125 = !DILocation(line: 228, column: 47, scope: !12122)
!12126 = !DILocation(line: 228, column: 34, scope: !12122)
!12127 = !DILocation(line: 228, column: 10, scope: !12122)
!12128 = !DILocation(line: 228, column: 3, scope: !12122)
!12129 = distinct !DISubprogram(name: "copy_value_range", scope: !3, file: !3, line: 502, type: !12130, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12130 = !DISubroutineType(types: !12131)
!12131 = !{null, !1741, !1741}
!12132 = !DILocalVariable(name: "to", arg: 1, scope: !12129, file: !3, line: 502, type: !1741)
!12133 = !DILocation(line: 502, column: 34, scope: !12129)
!12134 = !DILocalVariable(name: "from", arg: 2, scope: !12129, file: !3, line: 502, type: !1741)
!12135 = !DILocation(line: 502, column: 53, scope: !12129)
!12136 = !DILocation(line: 504, column: 20, scope: !12129)
!12137 = !DILocation(line: 504, column: 24, scope: !12129)
!12138 = !DILocation(line: 504, column: 30, scope: !12129)
!12139 = !DILocation(line: 504, column: 36, scope: !12129)
!12140 = !DILocation(line: 504, column: 42, scope: !12129)
!12141 = !DILocation(line: 504, column: 47, scope: !12129)
!12142 = !DILocation(line: 504, column: 53, scope: !12129)
!12143 = !DILocation(line: 504, column: 58, scope: !12129)
!12144 = !DILocation(line: 504, column: 64, scope: !12129)
!12145 = !DILocation(line: 504, column: 3, scope: !12129)
!12146 = !DILocation(line: 505, column: 1, scope: !12129)
!12147 = distinct !DISubprogram(name: "op_with_constant_singleton_value_range", scope: !3, file: !3, line: 1377, type: !9188, scopeLine: 1378, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12148 = !DILocalVariable(name: "op", arg: 1, scope: !12147, file: !3, line: 1377, type: !1747)
!12149 = !DILocation(line: 1377, column: 46, scope: !12147)
!12150 = !DILocalVariable(name: "vr", scope: !12147, file: !3, line: 1379, type: !1741)
!12151 = !DILocation(line: 1379, column: 18, scope: !12147)
!12152 = !DILocation(line: 1381, column: 32, scope: !12153)
!12153 = distinct !DILexicalBlock(scope: !12147, file: !3, line: 1381, column: 7)
!12154 = !DILocation(line: 1381, column: 7, scope: !12153)
!12155 = !DILocation(line: 1381, column: 7, scope: !12147)
!12156 = !DILocation(line: 1382, column: 12, scope: !12153)
!12157 = !DILocation(line: 1382, column: 5, scope: !12153)
!12158 = !DILocation(line: 1384, column: 7, scope: !12159)
!12159 = distinct !DILexicalBlock(scope: !12147, file: !3, line: 1384, column: 7)
!12160 = !DILocation(line: 1384, column: 22, scope: !12159)
!12161 = !DILocation(line: 1384, column: 7, scope: !12147)
!12162 = !DILocation(line: 1385, column: 5, scope: !12159)
!12163 = !DILocation(line: 1387, column: 25, scope: !12147)
!12164 = !DILocation(line: 1387, column: 8, scope: !12147)
!12165 = !DILocation(line: 1387, column: 6, scope: !12147)
!12166 = !DILocation(line: 1388, column: 7, scope: !12167)
!12167 = distinct !DILexicalBlock(scope: !12147, file: !3, line: 1388, column: 7)
!12168 = !DILocation(line: 1388, column: 11, scope: !12167)
!12169 = !DILocation(line: 1388, column: 16, scope: !12167)
!12170 = !DILocation(line: 1389, column: 7, scope: !12167)
!12171 = !DILocation(line: 1389, column: 27, scope: !12167)
!12172 = !DILocation(line: 1389, column: 31, scope: !12167)
!12173 = !DILocation(line: 1389, column: 36, scope: !12167)
!12174 = !DILocation(line: 1389, column: 40, scope: !12167)
!12175 = !DILocation(line: 1389, column: 10, scope: !12167)
!12176 = !DILocation(line: 1390, column: 7, scope: !12167)
!12177 = !DILocation(line: 1390, column: 35, scope: !12167)
!12178 = !DILocation(line: 1390, column: 39, scope: !12167)
!12179 = !DILocation(line: 1390, column: 10, scope: !12167)
!12180 = !DILocation(line: 1388, column: 7, scope: !12147)
!12181 = !DILocation(line: 1391, column: 12, scope: !12167)
!12182 = !DILocation(line: 1391, column: 16, scope: !12167)
!12183 = !DILocation(line: 1391, column: 5, scope: !12167)
!12184 = !DILocation(line: 1393, column: 3, scope: !12147)
!12185 = !DILocation(line: 1394, column: 1, scope: !12147)
!12186 = distinct !DISubprogram(name: "set_value_range_to_undefined", scope: !3, file: !3, line: 582, type: !3830, scopeLine: 583, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12187 = !DILocalVariable(name: "vr", arg: 1, scope: !12186, file: !3, line: 582, type: !1741)
!12188 = !DILocation(line: 582, column: 46, scope: !12186)
!12189 = !DILocation(line: 584, column: 3, scope: !12186)
!12190 = !DILocation(line: 584, column: 7, scope: !12186)
!12191 = !DILocation(line: 584, column: 12, scope: !12186)
!12192 = !DILocation(line: 585, column: 13, scope: !12186)
!12193 = !DILocation(line: 585, column: 17, scope: !12186)
!12194 = !DILocation(line: 585, column: 21, scope: !12186)
!12195 = !DILocation(line: 585, column: 3, scope: !12186)
!12196 = !DILocation(line: 585, column: 7, scope: !12186)
!12197 = !DILocation(line: 585, column: 11, scope: !12186)
!12198 = !DILocation(line: 586, column: 7, scope: !12199)
!12199 = distinct !DILexicalBlock(scope: !12186, file: !3, line: 586, column: 7)
!12200 = !DILocation(line: 586, column: 11, scope: !12199)
!12201 = !DILocation(line: 586, column: 7, scope: !12186)
!12202 = !DILocation(line: 587, column: 19, scope: !12199)
!12203 = !DILocation(line: 587, column: 23, scope: !12199)
!12204 = !DILocation(line: 587, column: 5, scope: !12199)
!12205 = !DILocation(line: 588, column: 1, scope: !12186)
!12206 = distinct !DISubprogram(name: "range_is_null", scope: !3, file: !3, line: 760, type: !9244, scopeLine: 761, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12207 = !DILocalVariable(name: "vr", arg: 1, scope: !12206, file: !3, line: 760, type: !1741)
!12208 = !DILocation(line: 760, column: 31, scope: !12206)
!12209 = !DILocation(line: 762, column: 10, scope: !12206)
!12210 = !DILocation(line: 762, column: 14, scope: !12206)
!12211 = !DILocation(line: 762, column: 19, scope: !12206)
!12212 = !DILocation(line: 763, column: 3, scope: !12206)
!12213 = !DILocation(line: 763, column: 21, scope: !12206)
!12214 = !DILocation(line: 763, column: 25, scope: !12206)
!12215 = !DILocation(line: 763, column: 6, scope: !12206)
!12216 = !DILocation(line: 764, column: 3, scope: !12206)
!12217 = !DILocation(line: 764, column: 21, scope: !12206)
!12218 = !DILocation(line: 764, column: 25, scope: !12206)
!12219 = !DILocation(line: 764, column: 6, scope: !12206)
!12220 = !DILocation(line: 0, scope: !12206)
!12221 = !DILocation(line: 762, column: 3, scope: !12206)
!12222 = distinct !DISubprogram(name: "set_value_range_to_null", scope: !3, file: !3, line: 559, type: !4191, scopeLine: 560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12223 = !DILocalVariable(name: "vr", arg: 1, scope: !12222, file: !3, line: 559, type: !1741)
!12224 = !DILocation(line: 559, column: 41, scope: !12222)
!12225 = !DILocalVariable(name: "type", arg: 2, scope: !12222, file: !3, line: 559, type: !1747)
!12226 = !DILocation(line: 559, column: 50, scope: !12222)
!12227 = !DILocation(line: 561, column: 29, scope: !12222)
!12228 = !DILocation(line: 561, column: 48, scope: !12222)
!12229 = !DILocation(line: 561, column: 33, scope: !12222)
!12230 = !DILocation(line: 561, column: 58, scope: !12222)
!12231 = !DILocation(line: 561, column: 62, scope: !12222)
!12232 = !DILocation(line: 561, column: 3, scope: !12222)
!12233 = !DILocation(line: 562, column: 1, scope: !12222)
!12234 = distinct !DISubprogram(name: "overflow_infinity_range_p", scope: !3, file: !3, line: 780, type: !9244, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12235 = !DILocalVariable(name: "vr", arg: 1, scope: !12234, file: !3, line: 780, type: !1741)
!12236 = !DILocation(line: 780, column: 43, scope: !12234)
!12237 = !DILocation(line: 782, column: 11, scope: !12234)
!12238 = !DILocation(line: 782, column: 15, scope: !12234)
!12239 = !DILocation(line: 782, column: 20, scope: !12234)
!12240 = !DILocation(line: 783, column: 4, scope: !12234)
!12241 = !DILocation(line: 783, column: 30, scope: !12234)
!12242 = !DILocation(line: 783, column: 34, scope: !12234)
!12243 = !DILocation(line: 783, column: 8, scope: !12234)
!12244 = !DILocation(line: 784, column: 8, scope: !12234)
!12245 = !DILocation(line: 784, column: 33, scope: !12234)
!12246 = !DILocation(line: 784, column: 37, scope: !12234)
!12247 = !DILocation(line: 784, column: 11, scope: !12234)
!12248 = !DILocation(line: 0, scope: !12234)
!12249 = !DILocation(line: 782, column: 10, scope: !12234)
!12250 = !DILocation(line: 782, column: 3, scope: !12234)
!12251 = distinct !DISubprogram(name: "set_value_range_to_truthvalue", scope: !3, file: !3, line: 568, type: !4191, scopeLine: 569, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12252 = !DILocalVariable(name: "vr", arg: 1, scope: !12251, file: !3, line: 568, type: !1741)
!12253 = !DILocation(line: 568, column: 47, scope: !12251)
!12254 = !DILocalVariable(name: "type", arg: 2, scope: !12251, file: !3, line: 568, type: !1747)
!12255 = !DILocation(line: 568, column: 56, scope: !12251)
!12256 = !DILocation(line: 570, column: 7, scope: !12257)
!12257 = distinct !DILexicalBlock(scope: !12251, file: !3, line: 570, column: 7)
!12258 = !DILocation(line: 570, column: 29, scope: !12257)
!12259 = !DILocation(line: 570, column: 7, scope: !12251)
!12260 = !DILocation(line: 571, column: 33, scope: !12257)
!12261 = !DILocation(line: 571, column: 5, scope: !12257)
!12262 = !DILocation(line: 573, column: 22, scope: !12257)
!12263 = !DILocation(line: 574, column: 23, scope: !12257)
!12264 = !DILocation(line: 574, column: 8, scope: !12257)
!12265 = !DILocation(line: 574, column: 48, scope: !12257)
!12266 = !DILocation(line: 574, column: 33, scope: !12257)
!12267 = !DILocation(line: 575, column: 8, scope: !12257)
!12268 = !DILocation(line: 575, column: 12, scope: !12257)
!12269 = !DILocation(line: 573, column: 5, scope: !12257)
!12270 = !DILocation(line: 576, column: 1, scope: !12251)
!12271 = distinct !DISubprogram(name: "vrp_int_const_binop", scope: !3, file: !3, line: 1908, type: !12272, scopeLine: 1909, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12272 = !DISubroutineType(types: !12273)
!12273 = !{!1747, !134, !1747, !1747}
!12274 = !DILocalVariable(name: "code", arg: 1, scope: !12271, file: !3, line: 1908, type: !134)
!12275 = !DILocation(line: 1908, column: 37, scope: !12271)
!12276 = !DILocalVariable(name: "val1", arg: 2, scope: !12271, file: !3, line: 1908, type: !1747)
!12277 = !DILocation(line: 1908, column: 48, scope: !12271)
!12278 = !DILocalVariable(name: "val2", arg: 3, scope: !12271, file: !3, line: 1908, type: !1747)
!12279 = !DILocation(line: 1908, column: 59, scope: !12271)
!12280 = !DILocalVariable(name: "res", scope: !12271, file: !3, line: 1910, type: !1747)
!12281 = !DILocation(line: 1910, column: 8, scope: !12271)
!12282 = !DILocation(line: 1912, column: 26, scope: !12271)
!12283 = !DILocation(line: 1912, column: 32, scope: !12271)
!12284 = !DILocation(line: 1912, column: 38, scope: !12271)
!12285 = !DILocation(line: 1912, column: 9, scope: !12271)
!12286 = !DILocation(line: 1912, column: 7, scope: !12271)
!12287 = !DILocation(line: 1916, column: 7, scope: !12288)
!12288 = distinct !DILexicalBlock(scope: !12271, file: !3, line: 1916, column: 7)
!12289 = !DILocation(line: 1916, column: 7, scope: !12271)
!12290 = !DILocalVariable(name: "checkz", scope: !12291, file: !3, line: 1918, type: !1740)
!12291 = distinct !DILexicalBlock(scope: !12288, file: !3, line: 1917, column: 5)
!12292 = !DILocation(line: 1918, column: 11, scope: !12291)
!12293 = !DILocation(line: 1918, column: 36, scope: !12291)
!12294 = !DILocation(line: 1918, column: 41, scope: !12291)
!12295 = !DILocation(line: 1918, column: 20, scope: !12291)
!12296 = !DILocalVariable(name: "overflow", scope: !12291, file: !3, line: 1919, type: !1866)
!12297 = !DILocation(line: 1919, column: 12, scope: !12291)
!12298 = !DILocation(line: 1923, column: 12, scope: !12299)
!12299 = distinct !DILexicalBlock(scope: !12291, file: !3, line: 1923, column: 11)
!12300 = !DILocation(line: 1923, column: 17, scope: !12299)
!12301 = !DILocation(line: 1924, column: 5, scope: !12299)
!12302 = !DILocation(line: 1924, column: 10, scope: !12299)
!12303 = !DILocation(line: 1924, column: 17, scope: !12299)
!12304 = !DILocation(line: 1924, column: 22, scope: !12299)
!12305 = !DILocation(line: 1924, column: 25, scope: !12299)
!12306 = !DILocation(line: 1924, column: 32, scope: !12299)
!12307 = !DILocation(line: 1925, column: 11, scope: !12299)
!12308 = !DILocation(line: 1925, column: 15, scope: !12299)
!12309 = !DILocation(line: 1925, column: 20, scope: !12299)
!12310 = !DILocation(line: 1926, column: 8, scope: !12299)
!12311 = !DILocation(line: 1926, column: 13, scope: !12299)
!12312 = !DILocation(line: 1926, column: 20, scope: !12299)
!12313 = !DILocation(line: 1926, column: 25, scope: !12299)
!12314 = !DILocation(line: 1926, column: 28, scope: !12299)
!12315 = !DILocation(line: 1926, column: 35, scope: !12299)
!12316 = !DILocation(line: 1923, column: 11, scope: !12291)
!12317 = !DILocation(line: 1928, column: 13, scope: !12318)
!12318 = distinct !DILexicalBlock(scope: !12299, file: !3, line: 1927, column: 2)
!12319 = !DILocation(line: 1929, column: 2, scope: !12318)
!12320 = !DILocation(line: 1935, column: 16, scope: !12321)
!12321 = distinct !DILexicalBlock(scope: !12299, file: !3, line: 1935, column: 16)
!12322 = !DILocation(line: 1935, column: 21, scope: !12321)
!12323 = !DILocation(line: 1935, column: 34, scope: !12321)
!12324 = !DILocation(line: 1935, column: 53, scope: !12321)
!12325 = !DILocation(line: 1935, column: 38, scope: !12321)
!12326 = !DILocation(line: 1935, column: 16, scope: !12299)
!12327 = !DILocalVariable(name: "tmp", scope: !12328, file: !3, line: 1937, type: !1747)
!12328 = distinct !DILexicalBlock(scope: !12321, file: !3, line: 1936, column: 2)
!12329 = !DILocation(line: 1937, column: 9, scope: !12328)
!12330 = !DILocation(line: 1938, column: 11, scope: !12328)
!12331 = !DILocation(line: 1939, column: 11, scope: !12328)
!12332 = !DILocation(line: 1937, column: 15, scope: !12328)
!12333 = !DILocalVariable(name: "check", scope: !12328, file: !3, line: 1940, type: !1740)
!12334 = !DILocation(line: 1940, column: 8, scope: !12328)
!12335 = !DILocation(line: 1940, column: 32, scope: !12328)
!12336 = !DILocation(line: 1940, column: 37, scope: !12328)
!12337 = !DILocation(line: 1940, column: 16, scope: !12328)
!12338 = !DILocation(line: 1942, column: 8, scope: !12339)
!12339 = distinct !DILexicalBlock(scope: !12328, file: !3, line: 1942, column: 8)
!12340 = !DILocation(line: 1942, column: 14, scope: !12339)
!12341 = !DILocation(line: 1942, column: 8, scope: !12328)
!12342 = !DILocation(line: 1943, column: 15, scope: !12339)
!12343 = !DILocation(line: 1943, column: 6, scope: !12339)
!12344 = !DILocation(line: 1944, column: 2, scope: !12328)
!12345 = !DILocation(line: 1946, column: 11, scope: !12346)
!12346 = distinct !DILexicalBlock(scope: !12291, file: !3, line: 1946, column: 11)
!12347 = !DILocation(line: 1946, column: 11, scope: !12291)
!12348 = !DILocation(line: 1948, column: 10, scope: !12349)
!12349 = distinct !DILexicalBlock(scope: !12346, file: !3, line: 1947, column: 2)
!12350 = !DILocation(line: 1948, column: 8, scope: !12349)
!12351 = !DILocation(line: 1949, column: 4, scope: !12349)
!12352 = !DILocation(line: 1949, column: 24, scope: !12349)
!12353 = !DILocation(line: 1950, column: 2, scope: !12349)
!12354 = !DILocation(line: 1952, column: 5, scope: !12291)
!12355 = !DILocation(line: 1953, column: 12, scope: !12356)
!12356 = distinct !DILexicalBlock(scope: !12288, file: !3, line: 1953, column: 12)
!12357 = !DILocation(line: 1953, column: 12, scope: !12288)
!12358 = !DILocation(line: 1957, column: 13, scope: !12359)
!12359 = distinct !DILexicalBlock(scope: !12356, file: !3, line: 1957, column: 12)
!12360 = !DILocation(line: 1958, column: 6, scope: !12359)
!12361 = !DILocation(line: 1958, column: 10, scope: !12359)
!12362 = !DILocation(line: 1959, column: 6, scope: !12359)
!12363 = !DILocation(line: 1959, column: 10, scope: !12359)
!12364 = !DILocation(line: 1960, column: 5, scope: !12359)
!12365 = !DILocation(line: 1960, column: 30, scope: !12359)
!12366 = !DILocation(line: 1960, column: 8, scope: !12359)
!12367 = !DILocation(line: 1961, column: 5, scope: !12359)
!12368 = !DILocation(line: 1961, column: 30, scope: !12359)
!12369 = !DILocation(line: 1961, column: 8, scope: !12359)
!12370 = !DILocation(line: 1957, column: 12, scope: !12356)
!12371 = !DILocalVariable(name: "sgn1", scope: !12372, file: !3, line: 1966, type: !1740)
!12372 = distinct !DILexicalBlock(scope: !12359, file: !3, line: 1962, column: 5)
!12373 = !DILocation(line: 1966, column: 11, scope: !12372)
!12374 = !DILocation(line: 1966, column: 36, scope: !12372)
!12375 = !DILocation(line: 1966, column: 18, scope: !12372)
!12376 = !DILocalVariable(name: "sgn2", scope: !12372, file: !3, line: 1967, type: !1740)
!12377 = !DILocation(line: 1967, column: 11, scope: !12372)
!12378 = !DILocation(line: 1967, column: 36, scope: !12372)
!12379 = !DILocation(line: 1967, column: 18, scope: !12372)
!12380 = !DILocation(line: 1969, column: 36, scope: !12381)
!12381 = distinct !DILexicalBlock(scope: !12372, file: !3, line: 1969, column: 11)
!12382 = !DILocation(line: 1969, column: 11, scope: !12381)
!12383 = !DILocation(line: 1970, column: 4, scope: !12381)
!12384 = !DILocation(line: 1970, column: 36, scope: !12381)
!12385 = !DILocation(line: 1970, column: 8, scope: !12381)
!12386 = !DILocation(line: 1969, column: 11, scope: !12372)
!12387 = !DILocation(line: 1971, column: 2, scope: !12381)
!12388 = !DILocation(line: 1976, column: 13, scope: !12389)
!12389 = distinct !DILexicalBlock(scope: !12372, file: !3, line: 1976, column: 11)
!12390 = !DILocation(line: 1976, column: 18, scope: !12389)
!12391 = !DILocation(line: 1976, column: 31, scope: !12389)
!12392 = !DILocation(line: 1976, column: 34, scope: !12389)
!12393 = !DILocation(line: 1976, column: 42, scope: !12389)
!12394 = !DILocation(line: 1976, column: 39, scope: !12389)
!12395 = !DILocation(line: 1977, column: 5, scope: !12389)
!12396 = !DILocation(line: 1977, column: 9, scope: !12389)
!12397 = !DILocation(line: 1977, column: 14, scope: !12389)
!12398 = !DILocation(line: 1977, column: 28, scope: !12389)
!12399 = !DILocation(line: 1977, column: 31, scope: !12389)
!12400 = !DILocation(line: 1977, column: 39, scope: !12389)
!12401 = !DILocation(line: 1977, column: 36, scope: !12389)
!12402 = !DILocation(line: 1978, column: 4, scope: !12389)
!12403 = !DILocation(line: 1978, column: 29, scope: !12389)
!12404 = !DILocation(line: 1978, column: 7, scope: !12389)
!12405 = !DILocation(line: 1979, column: 4, scope: !12389)
!12406 = !DILocation(line: 1979, column: 29, scope: !12389)
!12407 = !DILocation(line: 1979, column: 7, scope: !12389)
!12408 = !DILocation(line: 1976, column: 11, scope: !12372)
!12409 = !DILocation(line: 1980, column: 2, scope: !12389)
!12410 = !DILocation(line: 1983, column: 12, scope: !12411)
!12411 = distinct !DILexicalBlock(scope: !12372, file: !3, line: 1983, column: 11)
!12412 = !DILocation(line: 1983, column: 17, scope: !12411)
!12413 = !DILocation(line: 1984, column: 5, scope: !12411)
!12414 = !DILocation(line: 1984, column: 8, scope: !12411)
!12415 = !DILocation(line: 1984, column: 13, scope: !12411)
!12416 = !DILocation(line: 1985, column: 5, scope: !12411)
!12417 = !DILocation(line: 1985, column: 8, scope: !12411)
!12418 = !DILocation(line: 1985, column: 13, scope: !12411)
!12419 = !DILocation(line: 1986, column: 5, scope: !12411)
!12420 = !DILocation(line: 1986, column: 8, scope: !12411)
!12421 = !DILocation(line: 1986, column: 13, scope: !12411)
!12422 = !DILocation(line: 1987, column: 5, scope: !12411)
!12423 = !DILocation(line: 1987, column: 8, scope: !12411)
!12424 = !DILocation(line: 1987, column: 13, scope: !12411)
!12425 = !DILocation(line: 1988, column: 5, scope: !12411)
!12426 = !DILocation(line: 1988, column: 8, scope: !12411)
!12427 = !DILocation(line: 1988, column: 13, scope: !12411)
!12428 = !DILocation(line: 1989, column: 4, scope: !12411)
!12429 = !DILocation(line: 1989, column: 30, scope: !12411)
!12430 = !DILocation(line: 1989, column: 8, scope: !12411)
!12431 = !DILocation(line: 1990, column: 8, scope: !12411)
!12432 = !DILocation(line: 1990, column: 33, scope: !12411)
!12433 = !DILocation(line: 1990, column: 11, scope: !12411)
!12434 = !DILocation(line: 1983, column: 11, scope: !12372)
!12435 = !DILocation(line: 1991, column: 2, scope: !12411)
!12436 = !DILocation(line: 2003, column: 12, scope: !12437)
!12437 = distinct !DILexicalBlock(scope: !12372, file: !3, line: 2003, column: 11)
!12438 = !DILocation(line: 2003, column: 17, scope: !12437)
!12439 = !DILocation(line: 2003, column: 30, scope: !12437)
!12440 = !DILocation(line: 2003, column: 33, scope: !12437)
!12441 = !DILocation(line: 2003, column: 41, scope: !12437)
!12442 = !DILocation(line: 2003, column: 38, scope: !12437)
!12443 = !DILocation(line: 2008, column: 4, scope: !12437)
!12444 = !DILocation(line: 2008, column: 8, scope: !12437)
!12445 = !DILocation(line: 2008, column: 13, scope: !12437)
!12446 = !DILocation(line: 2009, column: 8, scope: !12437)
!12447 = !DILocation(line: 2009, column: 12, scope: !12437)
!12448 = !DILocation(line: 2009, column: 17, scope: !12437)
!12449 = !DILocation(line: 2019, column: 4, scope: !12437)
!12450 = !DILocation(line: 2010, column: 39, scope: !12437)
!12451 = !DILocation(line: 2010, column: 8, scope: !12437)
!12452 = !DILocation(line: 2011, column: 38, scope: !12437)
!12453 = !DILocation(line: 2011, column: 7, scope: !12437)
!12454 = !DILocation(line: 2019, column: 8, scope: !12437)
!12455 = !DILocation(line: 2019, column: 13, scope: !12437)
!12456 = !DILocation(line: 2020, column: 8, scope: !12437)
!12457 = !DILocation(line: 2020, column: 12, scope: !12437)
!12458 = !DILocation(line: 2020, column: 17, scope: !12437)
!12459 = !DILocation(line: 2027, column: 4, scope: !12437)
!12460 = !DILocation(line: 2021, column: 39, scope: !12437)
!12461 = !DILocation(line: 2021, column: 8, scope: !12437)
!12462 = !DILocation(line: 2022, column: 38, scope: !12437)
!12463 = !DILocation(line: 2022, column: 7, scope: !12437)
!12464 = !DILocation(line: 2027, column: 8, scope: !12437)
!12465 = !DILocation(line: 2027, column: 13, scope: !12437)
!12466 = !DILocation(line: 2028, column: 8, scope: !12437)
!12467 = !DILocation(line: 2028, column: 11, scope: !12437)
!12468 = !DILocation(line: 2028, column: 16, scope: !12437)
!12469 = !DILocation(line: 2030, column: 4, scope: !12437)
!12470 = !DILocation(line: 2030, column: 7, scope: !12437)
!12471 = !DILocation(line: 2030, column: 12, scope: !12437)
!12472 = !DILocation(line: 2031, column: 4, scope: !12437)
!12473 = !DILocation(line: 2031, column: 7, scope: !12437)
!12474 = !DILocation(line: 2031, column: 12, scope: !12437)
!12475 = !DILocation(line: 2032, column: 4, scope: !12437)
!12476 = !DILocation(line: 2032, column: 7, scope: !12437)
!12477 = !DILocation(line: 2032, column: 12, scope: !12437)
!12478 = !DILocation(line: 2033, column: 4, scope: !12437)
!12479 = !DILocation(line: 2033, column: 7, scope: !12437)
!12480 = !DILocation(line: 2033, column: 12, scope: !12437)
!12481 = !DILocation(line: 2034, column: 4, scope: !12437)
!12482 = !DILocation(line: 2034, column: 7, scope: !12437)
!12483 = !DILocation(line: 2034, column: 12, scope: !12437)
!12484 = !DILocation(line: 2003, column: 11, scope: !12372)
!12485 = !DILocation(line: 2035, column: 35, scope: !12437)
!12486 = !DILocation(line: 2035, column: 10, scope: !12437)
!12487 = !DILocation(line: 2036, column: 33, scope: !12437)
!12488 = !DILocation(line: 2036, column: 5, scope: !12437)
!12489 = !DILocation(line: 2037, column: 5, scope: !12437)
!12490 = !DILocation(line: 2035, column: 2, scope: !12437)
!12491 = !DILocation(line: 2039, column: 35, scope: !12437)
!12492 = !DILocation(line: 2039, column: 10, scope: !12437)
!12493 = !DILocation(line: 2040, column: 33, scope: !12437)
!12494 = !DILocation(line: 2040, column: 5, scope: !12437)
!12495 = !DILocation(line: 2041, column: 5, scope: !12437)
!12496 = !DILocation(line: 2039, column: 2, scope: !12437)
!12497 = !DILocation(line: 2044, column: 10, scope: !12271)
!12498 = !DILocation(line: 2044, column: 3, scope: !12271)
!12499 = !DILocation(line: 2045, column: 1, scope: !12271)
!12500 = distinct !DISubprogram(name: "vrp_expr_computes_nonnegative", scope: !3, file: !3, line: 817, type: !12501, scopeLine: 818, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12501 = !DISubroutineType(types: !12502)
!12502 = !{!1866, !1747, !3130}
!12503 = !DILocalVariable(name: "expr", arg: 1, scope: !12500, file: !3, line: 817, type: !1747)
!12504 = !DILocation(line: 817, column: 37, scope: !12500)
!12505 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !12500, file: !3, line: 817, type: !3130)
!12506 = !DILocation(line: 817, column: 49, scope: !12500)
!12507 = !DILocation(line: 819, column: 42, scope: !12500)
!12508 = !DILocation(line: 819, column: 48, scope: !12500)
!12509 = !DILocation(line: 819, column: 11, scope: !12500)
!12510 = !DILocation(line: 820, column: 4, scope: !12500)
!12511 = !DILocation(line: 820, column: 8, scope: !12500)
!12512 = !DILocation(line: 820, column: 25, scope: !12500)
!12513 = !DILocation(line: 821, column: 8, scope: !12500)
!12514 = !DILocation(line: 821, column: 35, scope: !12500)
!12515 = !DILocation(line: 821, column: 11, scope: !12500)
!12516 = !DILocation(line: 0, scope: !12500)
!12517 = !DILocation(line: 819, column: 10, scope: !12500)
!12518 = !DILocation(line: 819, column: 3, scope: !12500)
!12519 = distinct !DISubprogram(name: "range_includes_zero_p", scope: !3, file: !3, line: 1338, type: !9244, scopeLine: 1339, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12520 = !DILocalVariable(name: "vr", arg: 1, scope: !12519, file: !3, line: 1338, type: !1741)
!12521 = !DILocation(line: 1338, column: 39, scope: !12519)
!12522 = !DILocalVariable(name: "zero", scope: !12519, file: !3, line: 1340, type: !1747)
!12523 = !DILocation(line: 1340, column: 8, scope: !12519)
!12524 = !DILocation(line: 1342, column: 3, scope: !12519)
!12525 = !DILocation(line: 1346, column: 25, scope: !12519)
!12526 = !DILocation(line: 1346, column: 10, scope: !12519)
!12527 = !DILocation(line: 1346, column: 8, scope: !12519)
!12528 = !DILocation(line: 1347, column: 31, scope: !12519)
!12529 = !DILocation(line: 1347, column: 37, scope: !12519)
!12530 = !DILocation(line: 1347, column: 11, scope: !12519)
!12531 = !DILocation(line: 1347, column: 41, scope: !12519)
!12532 = !DILocation(line: 1347, column: 10, scope: !12519)
!12533 = !DILocation(line: 1347, column: 3, scope: !12519)
!12534 = distinct !DISubprogram(name: "abs_extent_range", scope: !3, file: !3, line: 595, type: !12535, scopeLine: 596, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12535 = !DISubroutineType(types: !12536)
!12536 = !{null, !1741, !1747, !1747}
!12537 = !DILocalVariable(name: "vr", arg: 1, scope: !12534, file: !3, line: 595, type: !1741)
!12538 = !DILocation(line: 595, column: 34, scope: !12534)
!12539 = !DILocalVariable(name: "min", arg: 2, scope: !12534, file: !3, line: 595, type: !1747)
!12540 = !DILocation(line: 595, column: 43, scope: !12534)
!12541 = !DILocalVariable(name: "max", arg: 3, scope: !12534, file: !3, line: 595, type: !1747)
!12542 = !DILocation(line: 595, column: 53, scope: !12534)
!12543 = !DILocalVariable(name: "cmp", scope: !12534, file: !3, line: 597, type: !1740)
!12544 = !DILocation(line: 597, column: 7, scope: !12534)
!12545 = !DILocation(line: 599, column: 3, scope: !12534)
!12546 = !DILocation(line: 600, column: 3, scope: !12534)
!12547 = !DILocation(line: 601, column: 3, scope: !12534)
!12548 = !DILocation(line: 602, column: 3, scope: !12534)
!12549 = !DILocation(line: 603, column: 9, scope: !12534)
!12550 = !DILocation(line: 603, column: 7, scope: !12534)
!12551 = !DILocation(line: 604, column: 9, scope: !12534)
!12552 = !DILocation(line: 604, column: 7, scope: !12534)
!12553 = !DILocation(line: 605, column: 7, scope: !12554)
!12554 = distinct !DILexicalBlock(scope: !12534, file: !3, line: 605, column: 7)
!12555 = !DILocation(line: 605, column: 27, scope: !12554)
!12556 = !DILocation(line: 605, column: 30, scope: !12554)
!12557 = !DILocation(line: 605, column: 7, scope: !12534)
!12558 = !DILocation(line: 607, column: 35, scope: !12559)
!12559 = distinct !DILexicalBlock(scope: !12554, file: !3, line: 606, column: 5)
!12560 = !DILocation(line: 607, column: 7, scope: !12559)
!12561 = !DILocation(line: 608, column: 7, scope: !12559)
!12562 = !DILocation(line: 610, column: 25, scope: !12534)
!12563 = !DILocation(line: 610, column: 30, scope: !12534)
!12564 = !DILocation(line: 610, column: 9, scope: !12534)
!12565 = !DILocation(line: 610, column: 7, scope: !12534)
!12566 = !DILocation(line: 611, column: 7, scope: !12567)
!12567 = distinct !DILexicalBlock(scope: !12534, file: !3, line: 611, column: 7)
!12568 = !DILocation(line: 611, column: 11, scope: !12567)
!12569 = !DILocation(line: 611, column: 7, scope: !12534)
!12570 = !DILocation(line: 612, column: 11, scope: !12567)
!12571 = !DILocation(line: 612, column: 9, scope: !12567)
!12572 = !DILocation(line: 612, column: 5, scope: !12567)
!12573 = !DILocation(line: 613, column: 12, scope: !12574)
!12574 = distinct !DILexicalBlock(scope: !12567, file: !3, line: 613, column: 12)
!12575 = !DILocation(line: 613, column: 16, scope: !12574)
!12576 = !DILocation(line: 613, column: 21, scope: !12574)
!12577 = !DILocation(line: 613, column: 24, scope: !12574)
!12578 = !DILocation(line: 613, column: 28, scope: !12574)
!12579 = !DILocation(line: 613, column: 12, scope: !12567)
!12580 = !DILocation(line: 615, column: 13, scope: !12581)
!12581 = distinct !DILexicalBlock(scope: !12574, file: !3, line: 614, column: 5)
!12582 = !DILocation(line: 615, column: 11, scope: !12581)
!12583 = !DILocation(line: 616, column: 13, scope: !12581)
!12584 = !DILocation(line: 616, column: 11, scope: !12581)
!12585 = !DILocation(line: 617, column: 5, scope: !12581)
!12586 = !DILocation(line: 620, column: 35, scope: !12587)
!12587 = distinct !DILexicalBlock(scope: !12574, file: !3, line: 619, column: 5)
!12588 = !DILocation(line: 620, column: 7, scope: !12587)
!12589 = !DILocation(line: 621, column: 7, scope: !12587)
!12590 = !DILocation(line: 623, column: 37, scope: !12534)
!12591 = !DILocation(line: 623, column: 51, scope: !12534)
!12592 = !DILocation(line: 623, column: 56, scope: !12534)
!12593 = !DILocation(line: 623, column: 3, scope: !12534)
!12594 = !DILocation(line: 624, column: 1, scope: !12534)
!12595 = distinct !DISubprogram(name: "value_inside_range", scope: !3, file: !3, line: 1292, type: !12596, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12596 = !DISubroutineType(types: !12597)
!12597 = !{!1740, !1747, !1741}
!12598 = !DILocalVariable(name: "val", arg: 1, scope: !12595, file: !3, line: 1292, type: !1747)
!12599 = !DILocation(line: 1292, column: 26, scope: !12595)
!12600 = !DILocalVariable(name: "vr", arg: 2, scope: !12595, file: !3, line: 1292, type: !1741)
!12601 = !DILocation(line: 1292, column: 47, scope: !12595)
!12602 = !DILocalVariable(name: "cmp1", scope: !12595, file: !3, line: 1294, type: !1740)
!12603 = !DILocation(line: 1294, column: 7, scope: !12595)
!12604 = !DILocalVariable(name: "cmp2", scope: !12595, file: !3, line: 1294, type: !1740)
!12605 = !DILocation(line: 1294, column: 13, scope: !12595)
!12606 = !DILocation(line: 1296, column: 26, scope: !12595)
!12607 = !DILocation(line: 1296, column: 31, scope: !12595)
!12608 = !DILocation(line: 1296, column: 35, scope: !12595)
!12609 = !DILocation(line: 1296, column: 10, scope: !12595)
!12610 = !DILocation(line: 1296, column: 8, scope: !12595)
!12611 = !DILocation(line: 1297, column: 7, scope: !12612)
!12612 = distinct !DILexicalBlock(scope: !12595, file: !3, line: 1297, column: 7)
!12613 = !DILocation(line: 1297, column: 12, scope: !12612)
!12614 = !DILocation(line: 1297, column: 7, scope: !12595)
!12615 = !DILocation(line: 1298, column: 5, scope: !12612)
!12616 = !DILocation(line: 1299, column: 7, scope: !12617)
!12617 = distinct !DILexicalBlock(scope: !12595, file: !3, line: 1299, column: 7)
!12618 = !DILocation(line: 1299, column: 12, scope: !12617)
!12619 = !DILocation(line: 1299, column: 7, scope: !12595)
!12620 = !DILocation(line: 1300, column: 5, scope: !12617)
!12621 = !DILocation(line: 1302, column: 26, scope: !12595)
!12622 = !DILocation(line: 1302, column: 30, scope: !12595)
!12623 = !DILocation(line: 1302, column: 35, scope: !12595)
!12624 = !DILocation(line: 1302, column: 10, scope: !12595)
!12625 = !DILocation(line: 1302, column: 8, scope: !12595)
!12626 = !DILocation(line: 1303, column: 7, scope: !12627)
!12627 = distinct !DILexicalBlock(scope: !12595, file: !3, line: 1303, column: 7)
!12628 = !DILocation(line: 1303, column: 12, scope: !12627)
!12629 = !DILocation(line: 1303, column: 7, scope: !12595)
!12630 = !DILocation(line: 1304, column: 5, scope: !12627)
!12631 = !DILocation(line: 1306, column: 11, scope: !12595)
!12632 = !DILocation(line: 1306, column: 10, scope: !12595)
!12633 = !DILocation(line: 1306, column: 3, scope: !12595)
!12634 = !DILocation(line: 1307, column: 1, scope: !12595)
!12635 = distinct !DISubprogram(name: "vrp_meet", scope: !3, file: !3, line: 6133, type: !12130, scopeLine: 6134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12636 = !DILocalVariable(name: "vr0", arg: 1, scope: !12635, file: !3, line: 6133, type: !1741)
!12637 = !DILocation(line: 6133, column: 26, scope: !12635)
!12638 = !DILocalVariable(name: "vr1", arg: 2, scope: !12635, file: !3, line: 6133, type: !1741)
!12639 = !DILocation(line: 6133, column: 46, scope: !12635)
!12640 = !DILocation(line: 6135, column: 7, scope: !12641)
!12641 = distinct !DILexicalBlock(scope: !12635, file: !3, line: 6135, column: 7)
!12642 = !DILocation(line: 6135, column: 12, scope: !12641)
!12643 = !DILocation(line: 6135, column: 17, scope: !12641)
!12644 = !DILocation(line: 6135, column: 7, scope: !12635)
!12645 = !DILocation(line: 6137, column: 25, scope: !12646)
!12646 = distinct !DILexicalBlock(scope: !12641, file: !3, line: 6136, column: 5)
!12647 = !DILocation(line: 6137, column: 30, scope: !12646)
!12648 = !DILocation(line: 6137, column: 7, scope: !12646)
!12649 = !DILocation(line: 6138, column: 7, scope: !12646)
!12650 = !DILocation(line: 6141, column: 7, scope: !12651)
!12651 = distinct !DILexicalBlock(scope: !12635, file: !3, line: 6141, column: 7)
!12652 = !DILocation(line: 6141, column: 12, scope: !12651)
!12653 = !DILocation(line: 6141, column: 17, scope: !12651)
!12654 = !DILocation(line: 6141, column: 7, scope: !12635)
!12655 = !DILocation(line: 6144, column: 7, scope: !12656)
!12656 = distinct !DILexicalBlock(scope: !12651, file: !3, line: 6142, column: 5)
!12657 = !DILocation(line: 6147, column: 7, scope: !12658)
!12658 = distinct !DILexicalBlock(scope: !12635, file: !3, line: 6147, column: 7)
!12659 = !DILocation(line: 6147, column: 12, scope: !12658)
!12660 = !DILocation(line: 6147, column: 17, scope: !12658)
!12661 = !DILocation(line: 6147, column: 7, scope: !12635)
!12662 = !DILocation(line: 6150, column: 7, scope: !12663)
!12663 = distinct !DILexicalBlock(scope: !12658, file: !3, line: 6148, column: 5)
!12664 = !DILocation(line: 6153, column: 7, scope: !12665)
!12665 = distinct !DILexicalBlock(scope: !12635, file: !3, line: 6153, column: 7)
!12666 = !DILocation(line: 6153, column: 12, scope: !12665)
!12667 = !DILocation(line: 6153, column: 17, scope: !12665)
!12668 = !DILocation(line: 6153, column: 7, scope: !12635)
!12669 = !DILocation(line: 6155, column: 35, scope: !12670)
!12670 = distinct !DILexicalBlock(scope: !12665, file: !3, line: 6154, column: 5)
!12671 = !DILocation(line: 6155, column: 7, scope: !12670)
!12672 = !DILocation(line: 6156, column: 7, scope: !12670)
!12673 = !DILocation(line: 6159, column: 7, scope: !12674)
!12674 = distinct !DILexicalBlock(scope: !12635, file: !3, line: 6159, column: 7)
!12675 = !DILocation(line: 6159, column: 12, scope: !12674)
!12676 = !DILocation(line: 6159, column: 17, scope: !12674)
!12677 = !DILocation(line: 6159, column: 29, scope: !12674)
!12678 = !DILocation(line: 6159, column: 32, scope: !12674)
!12679 = !DILocation(line: 6159, column: 37, scope: !12674)
!12680 = !DILocation(line: 6159, column: 42, scope: !12674)
!12681 = !DILocation(line: 6159, column: 7, scope: !12635)
!12682 = !DILocalVariable(name: "cmp", scope: !12683, file: !3, line: 6161, type: !1740)
!12683 = distinct !DILexicalBlock(scope: !12674, file: !3, line: 6160, column: 5)
!12684 = !DILocation(line: 6161, column: 11, scope: !12683)
!12685 = !DILocalVariable(name: "min", scope: !12683, file: !3, line: 6162, type: !1747)
!12686 = !DILocation(line: 6162, column: 12, scope: !12683)
!12687 = !DILocalVariable(name: "max", scope: !12683, file: !3, line: 6162, type: !1747)
!12688 = !DILocation(line: 6162, column: 17, scope: !12683)
!12689 = !DILocation(line: 6167, column: 29, scope: !12683)
!12690 = !DILocation(line: 6167, column: 34, scope: !12683)
!12691 = !DILocation(line: 6167, column: 39, scope: !12683)
!12692 = !DILocation(line: 6167, column: 44, scope: !12683)
!12693 = !DILocation(line: 6167, column: 13, scope: !12683)
!12694 = !DILocation(line: 6167, column: 11, scope: !12683)
!12695 = !DILocation(line: 6168, column: 11, scope: !12696)
!12696 = distinct !DILexicalBlock(scope: !12683, file: !3, line: 6168, column: 11)
!12697 = !DILocation(line: 6168, column: 15, scope: !12696)
!12698 = !DILocation(line: 6168, column: 20, scope: !12696)
!12699 = !DILocation(line: 6168, column: 23, scope: !12696)
!12700 = !DILocation(line: 6168, column: 27, scope: !12696)
!12701 = !DILocation(line: 6168, column: 11, scope: !12683)
!12702 = !DILocation(line: 6169, column: 15, scope: !12696)
!12703 = !DILocation(line: 6169, column: 20, scope: !12696)
!12704 = !DILocation(line: 6169, column: 13, scope: !12696)
!12705 = !DILocation(line: 6169, column: 9, scope: !12696)
!12706 = !DILocation(line: 6170, column: 16, scope: !12707)
!12707 = distinct !DILexicalBlock(scope: !12696, file: !3, line: 6170, column: 16)
!12708 = !DILocation(line: 6170, column: 20, scope: !12707)
!12709 = !DILocation(line: 6170, column: 16, scope: !12696)
!12710 = !DILocation(line: 6171, column: 15, scope: !12707)
!12711 = !DILocation(line: 6171, column: 20, scope: !12707)
!12712 = !DILocation(line: 6171, column: 13, scope: !12707)
!12713 = !DILocation(line: 6171, column: 9, scope: !12707)
!12714 = !DILocation(line: 6173, column: 2, scope: !12707)
!12715 = !DILocation(line: 6178, column: 29, scope: !12683)
!12716 = !DILocation(line: 6178, column: 34, scope: !12683)
!12717 = !DILocation(line: 6178, column: 39, scope: !12683)
!12718 = !DILocation(line: 6178, column: 44, scope: !12683)
!12719 = !DILocation(line: 6178, column: 13, scope: !12683)
!12720 = !DILocation(line: 6178, column: 11, scope: !12683)
!12721 = !DILocation(line: 6179, column: 11, scope: !12722)
!12722 = distinct !DILexicalBlock(scope: !12683, file: !3, line: 6179, column: 11)
!12723 = !DILocation(line: 6179, column: 15, scope: !12722)
!12724 = !DILocation(line: 6179, column: 20, scope: !12722)
!12725 = !DILocation(line: 6179, column: 23, scope: !12722)
!12726 = !DILocation(line: 6179, column: 27, scope: !12722)
!12727 = !DILocation(line: 6179, column: 11, scope: !12683)
!12728 = !DILocation(line: 6180, column: 15, scope: !12722)
!12729 = !DILocation(line: 6180, column: 20, scope: !12722)
!12730 = !DILocation(line: 6180, column: 13, scope: !12722)
!12731 = !DILocation(line: 6180, column: 9, scope: !12722)
!12732 = !DILocation(line: 6181, column: 16, scope: !12733)
!12733 = distinct !DILexicalBlock(scope: !12722, file: !3, line: 6181, column: 16)
!12734 = !DILocation(line: 6181, column: 20, scope: !12733)
!12735 = !DILocation(line: 6181, column: 16, scope: !12722)
!12736 = !DILocation(line: 6182, column: 15, scope: !12733)
!12737 = !DILocation(line: 6182, column: 20, scope: !12733)
!12738 = !DILocation(line: 6182, column: 13, scope: !12733)
!12739 = !DILocation(line: 6182, column: 9, scope: !12733)
!12740 = !DILocation(line: 6184, column: 2, scope: !12733)
!12741 = !DILocation(line: 6187, column: 11, scope: !12742)
!12742 = distinct !DILexicalBlock(scope: !12683, file: !3, line: 6187, column: 11)
!12743 = !DILocation(line: 6188, column: 4, scope: !12742)
!12744 = !DILocation(line: 6188, column: 25, scope: !12742)
!12745 = !DILocation(line: 6188, column: 9, scope: !12742)
!12746 = !DILocation(line: 6188, column: 30, scope: !12742)
!12747 = !DILocation(line: 6188, column: 55, scope: !12742)
!12748 = !DILocation(line: 6188, column: 33, scope: !12742)
!12749 = !DILocation(line: 6189, column: 8, scope: !12742)
!12750 = !DILocation(line: 6189, column: 28, scope: !12742)
!12751 = !DILocation(line: 6189, column: 12, scope: !12742)
!12752 = !DILocation(line: 6189, column: 33, scope: !12742)
!12753 = !DILocation(line: 6189, column: 58, scope: !12742)
!12754 = !DILocation(line: 6189, column: 36, scope: !12742)
!12755 = !DILocation(line: 6187, column: 11, scope: !12683)
!12756 = !DILocation(line: 6190, column: 2, scope: !12742)
!12757 = !DILocation(line: 6194, column: 11, scope: !12758)
!12758 = distinct !DILexicalBlock(scope: !12683, file: !3, line: 6194, column: 11)
!12759 = !DILocation(line: 6194, column: 16, scope: !12758)
!12760 = !DILocation(line: 6194, column: 22, scope: !12758)
!12761 = !DILocation(line: 6194, column: 25, scope: !12758)
!12762 = !DILocation(line: 6194, column: 30, scope: !12758)
!12763 = !DILocation(line: 6194, column: 36, scope: !12758)
!12764 = !DILocation(line: 6194, column: 39, scope: !12758)
!12765 = !DILocation(line: 6194, column: 44, scope: !12758)
!12766 = !DILocation(line: 6194, column: 53, scope: !12758)
!12767 = !DILocation(line: 6194, column: 58, scope: !12758)
!12768 = !DILocation(line: 6194, column: 50, scope: !12758)
!12769 = !DILocation(line: 6194, column: 11, scope: !12683)
!12770 = !DILocation(line: 6195, column: 26, scope: !12758)
!12771 = !DILocation(line: 6195, column: 31, scope: !12758)
!12772 = !DILocation(line: 6195, column: 38, scope: !12758)
!12773 = !DILocation(line: 6195, column: 43, scope: !12758)
!12774 = !DILocation(line: 6195, column: 9, scope: !12758)
!12775 = !DILocation(line: 6196, column: 16, scope: !12776)
!12776 = distinct !DILexicalBlock(scope: !12758, file: !3, line: 6196, column: 16)
!12777 = !DILocation(line: 6196, column: 21, scope: !12776)
!12778 = !DILocation(line: 6196, column: 27, scope: !12776)
!12779 = !DILocation(line: 6196, column: 31, scope: !12776)
!12780 = !DILocation(line: 6196, column: 36, scope: !12776)
!12781 = !DILocation(line: 6196, column: 16, scope: !12758)
!12782 = !DILocation(line: 6197, column: 23, scope: !12776)
!12783 = !DILocation(line: 6197, column: 28, scope: !12776)
!12784 = !DILocation(line: 6197, column: 9, scope: !12776)
!12785 = !DILocation(line: 6199, column: 24, scope: !12683)
!12786 = !DILocation(line: 6199, column: 29, scope: !12683)
!12787 = !DILocation(line: 6199, column: 34, scope: !12683)
!12788 = !DILocation(line: 6199, column: 40, scope: !12683)
!12789 = !DILocation(line: 6199, column: 45, scope: !12683)
!12790 = !DILocation(line: 6199, column: 50, scope: !12683)
!12791 = !DILocation(line: 6199, column: 55, scope: !12683)
!12792 = !DILocation(line: 6199, column: 7, scope: !12683)
!12793 = !DILocation(line: 6200, column: 5, scope: !12683)
!12794 = !DILocation(line: 6201, column: 12, scope: !12795)
!12795 = distinct !DILexicalBlock(scope: !12674, file: !3, line: 6201, column: 12)
!12796 = !DILocation(line: 6201, column: 17, scope: !12795)
!12797 = !DILocation(line: 6201, column: 22, scope: !12795)
!12798 = !DILocation(line: 6201, column: 39, scope: !12795)
!12799 = !DILocation(line: 6201, column: 42, scope: !12795)
!12800 = !DILocation(line: 6201, column: 47, scope: !12795)
!12801 = !DILocation(line: 6201, column: 52, scope: !12795)
!12802 = !DILocation(line: 6201, column: 12, scope: !12674)
!12803 = !DILocation(line: 6205, column: 27, scope: !12804)
!12804 = distinct !DILexicalBlock(scope: !12805, file: !3, line: 6205, column: 11)
!12805 = distinct !DILexicalBlock(scope: !12795, file: !3, line: 6202, column: 5)
!12806 = !DILocation(line: 6205, column: 32, scope: !12804)
!12807 = !DILocation(line: 6205, column: 37, scope: !12804)
!12808 = !DILocation(line: 6205, column: 42, scope: !12804)
!12809 = !DILocation(line: 6205, column: 11, scope: !12804)
!12810 = !DILocation(line: 6205, column: 47, scope: !12804)
!12811 = !DILocation(line: 6206, column: 4, scope: !12804)
!12812 = !DILocation(line: 6206, column: 23, scope: !12804)
!12813 = !DILocation(line: 6206, column: 28, scope: !12804)
!12814 = !DILocation(line: 6206, column: 33, scope: !12804)
!12815 = !DILocation(line: 6206, column: 38, scope: !12804)
!12816 = !DILocation(line: 6206, column: 7, scope: !12804)
!12817 = !DILocation(line: 6206, column: 43, scope: !12804)
!12818 = !DILocation(line: 6207, column: 4, scope: !12804)
!12819 = !DILocation(line: 6207, column: 23, scope: !12804)
!12820 = !DILocation(line: 6207, column: 28, scope: !12804)
!12821 = !DILocation(line: 6207, column: 33, scope: !12804)
!12822 = !DILocation(line: 6207, column: 38, scope: !12804)
!12823 = !DILocation(line: 6207, column: 7, scope: !12804)
!12824 = !DILocation(line: 6207, column: 43, scope: !12804)
!12825 = !DILocation(line: 6205, column: 11, scope: !12805)
!12826 = !DILocation(line: 6211, column: 8, scope: !12827)
!12827 = distinct !DILexicalBlock(scope: !12828, file: !3, line: 6211, column: 8)
!12828 = distinct !DILexicalBlock(scope: !12804, file: !3, line: 6208, column: 2)
!12829 = !DILocation(line: 6211, column: 13, scope: !12827)
!12830 = !DILocation(line: 6211, column: 19, scope: !12827)
!12831 = !DILocation(line: 6211, column: 22, scope: !12827)
!12832 = !DILocation(line: 6211, column: 27, scope: !12827)
!12833 = !DILocation(line: 6211, column: 33, scope: !12827)
!12834 = !DILocation(line: 6211, column: 36, scope: !12827)
!12835 = !DILocation(line: 6211, column: 41, scope: !12827)
!12836 = !DILocation(line: 6211, column: 50, scope: !12827)
!12837 = !DILocation(line: 6211, column: 55, scope: !12827)
!12838 = !DILocation(line: 6211, column: 47, scope: !12827)
!12839 = !DILocation(line: 6211, column: 8, scope: !12828)
!12840 = !DILocation(line: 6212, column: 23, scope: !12827)
!12841 = !DILocation(line: 6212, column: 28, scope: !12827)
!12842 = !DILocation(line: 6212, column: 35, scope: !12827)
!12843 = !DILocation(line: 6212, column: 40, scope: !12827)
!12844 = !DILocation(line: 6212, column: 6, scope: !12827)
!12845 = !DILocation(line: 6213, column: 13, scope: !12846)
!12846 = distinct !DILexicalBlock(scope: !12827, file: !3, line: 6213, column: 13)
!12847 = !DILocation(line: 6213, column: 18, scope: !12846)
!12848 = !DILocation(line: 6213, column: 24, scope: !12846)
!12849 = !DILocation(line: 6213, column: 28, scope: !12846)
!12850 = !DILocation(line: 6213, column: 33, scope: !12846)
!12851 = !DILocation(line: 6213, column: 13, scope: !12827)
!12852 = !DILocation(line: 6214, column: 20, scope: !12846)
!12853 = !DILocation(line: 6214, column: 25, scope: !12846)
!12854 = !DILocation(line: 6214, column: 6, scope: !12846)
!12855 = !DILocation(line: 6215, column: 2, scope: !12828)
!12856 = !DILocation(line: 6217, column: 2, scope: !12804)
!12857 = !DILocation(line: 6218, column: 5, scope: !12805)
!12858 = !DILocation(line: 6219, column: 12, scope: !12859)
!12859 = distinct !DILexicalBlock(scope: !12795, file: !3, line: 6219, column: 12)
!12860 = !DILocation(line: 6219, column: 17, scope: !12859)
!12861 = !DILocation(line: 6219, column: 22, scope: !12859)
!12862 = !DILocation(line: 6219, column: 39, scope: !12859)
!12863 = !DILocation(line: 6219, column: 42, scope: !12859)
!12864 = !DILocation(line: 6219, column: 47, scope: !12859)
!12865 = !DILocation(line: 6219, column: 52, scope: !12859)
!12866 = !DILocation(line: 6219, column: 12, scope: !12795)
!12867 = !DILocation(line: 6224, column: 30, scope: !12868)
!12868 = distinct !DILexicalBlock(scope: !12869, file: !3, line: 6224, column: 11)
!12869 = distinct !DILexicalBlock(scope: !12859, file: !3, line: 6220, column: 5)
!12870 = !DILocation(line: 6224, column: 12, scope: !12868)
!12871 = !DILocation(line: 6225, column: 4, scope: !12868)
!12872 = !DILocation(line: 6225, column: 26, scope: !12868)
!12873 = !DILocation(line: 6225, column: 8, scope: !12868)
!12874 = !DILocation(line: 6226, column: 4, scope: !12868)
!12875 = !DILocation(line: 6226, column: 34, scope: !12868)
!12876 = !DILocation(line: 6226, column: 39, scope: !12868)
!12877 = !DILocation(line: 6226, column: 8, scope: !12868)
!12878 = !DILocation(line: 6224, column: 11, scope: !12869)
!12879 = !DILocation(line: 6231, column: 8, scope: !12880)
!12880 = distinct !DILexicalBlock(scope: !12881, file: !3, line: 6231, column: 8)
!12881 = distinct !DILexicalBlock(scope: !12868, file: !3, line: 6227, column: 2)
!12882 = !DILocation(line: 6231, column: 13, scope: !12880)
!12883 = !DILocation(line: 6231, column: 18, scope: !12880)
!12884 = !DILocation(line: 6231, column: 8, scope: !12881)
!12885 = !DILocation(line: 6232, column: 23, scope: !12880)
!12886 = !DILocation(line: 6232, column: 28, scope: !12880)
!12887 = !DILocation(line: 6232, column: 33, scope: !12880)
!12888 = !DILocation(line: 6232, column: 39, scope: !12880)
!12889 = !DILocation(line: 6232, column: 44, scope: !12880)
!12890 = !DILocation(line: 6232, column: 49, scope: !12880)
!12891 = !DILocation(line: 6232, column: 54, scope: !12880)
!12892 = !DILocation(line: 6232, column: 59, scope: !12880)
!12893 = !DILocation(line: 6232, column: 64, scope: !12880)
!12894 = !DILocation(line: 6232, column: 6, scope: !12880)
!12895 = !DILocation(line: 6236, column: 8, scope: !12896)
!12896 = distinct !DILexicalBlock(scope: !12881, file: !3, line: 6236, column: 8)
!12897 = !DILocation(line: 6236, column: 13, scope: !12896)
!12898 = !DILocation(line: 6236, column: 19, scope: !12896)
!12899 = !DILocation(line: 6236, column: 22, scope: !12896)
!12900 = !DILocation(line: 6236, column: 27, scope: !12896)
!12901 = !DILocation(line: 6236, column: 33, scope: !12896)
!12902 = !DILocation(line: 6236, column: 36, scope: !12896)
!12903 = !DILocation(line: 6236, column: 41, scope: !12896)
!12904 = !DILocation(line: 6236, column: 50, scope: !12896)
!12905 = !DILocation(line: 6236, column: 55, scope: !12896)
!12906 = !DILocation(line: 6236, column: 47, scope: !12896)
!12907 = !DILocation(line: 6236, column: 8, scope: !12881)
!12908 = !DILocation(line: 6237, column: 23, scope: !12896)
!12909 = !DILocation(line: 6237, column: 28, scope: !12896)
!12910 = !DILocation(line: 6237, column: 35, scope: !12896)
!12911 = !DILocation(line: 6237, column: 40, scope: !12896)
!12912 = !DILocation(line: 6237, column: 6, scope: !12896)
!12913 = !DILocation(line: 6238, column: 13, scope: !12914)
!12914 = distinct !DILexicalBlock(scope: !12896, file: !3, line: 6238, column: 13)
!12915 = !DILocation(line: 6238, column: 18, scope: !12914)
!12916 = !DILocation(line: 6238, column: 24, scope: !12914)
!12917 = !DILocation(line: 6238, column: 28, scope: !12914)
!12918 = !DILocation(line: 6238, column: 33, scope: !12914)
!12919 = !DILocation(line: 6238, column: 13, scope: !12896)
!12920 = !DILocation(line: 6239, column: 20, scope: !12914)
!12921 = !DILocation(line: 6239, column: 25, scope: !12914)
!12922 = !DILocation(line: 6239, column: 6, scope: !12914)
!12923 = !DILocation(line: 6240, column: 2, scope: !12881)
!12924 = !DILocation(line: 6242, column: 2, scope: !12868)
!12925 = !DILocation(line: 6243, column: 5, scope: !12869)
!12926 = !DILocation(line: 6245, column: 5, scope: !12859)
!12927 = !DILocation(line: 6247, column: 3, scope: !12635)
!12928 = !DILabel(scope: !12635, name: "give_up", file: !3, line: 6249)
!12929 = !DILocation(line: 6249, column: 1, scope: !12635)
!12930 = !DILocation(line: 6255, column: 26, scope: !12931)
!12931 = distinct !DILexicalBlock(scope: !12635, file: !3, line: 6255, column: 7)
!12932 = !DILocation(line: 6255, column: 8, scope: !12931)
!12933 = !DILocation(line: 6256, column: 7, scope: !12931)
!12934 = !DILocation(line: 6256, column: 12, scope: !12931)
!12935 = !DILocation(line: 6256, column: 17, scope: !12931)
!12936 = !DILocation(line: 6256, column: 22, scope: !12931)
!12937 = !DILocation(line: 6256, column: 34, scope: !12931)
!12938 = !DILocation(line: 6256, column: 61, scope: !12931)
!12939 = !DILocation(line: 6256, column: 38, scope: !12931)
!12940 = !DILocation(line: 6257, column: 4, scope: !12931)
!12941 = !DILocation(line: 6257, column: 8, scope: !12931)
!12942 = !DILocation(line: 6257, column: 13, scope: !12931)
!12943 = !DILocation(line: 6257, column: 18, scope: !12931)
!12944 = !DILocation(line: 6257, column: 35, scope: !12931)
!12945 = !DILocation(line: 6257, column: 61, scope: !12931)
!12946 = !DILocation(line: 6257, column: 38, scope: !12931)
!12947 = !DILocation(line: 6258, column: 7, scope: !12931)
!12948 = !DILocation(line: 6258, column: 29, scope: !12931)
!12949 = !DILocation(line: 6258, column: 11, scope: !12931)
!12950 = !DILocation(line: 6259, column: 7, scope: !12931)
!12951 = !DILocation(line: 6259, column: 12, scope: !12931)
!12952 = !DILocation(line: 6259, column: 17, scope: !12931)
!12953 = !DILocation(line: 6259, column: 22, scope: !12931)
!12954 = !DILocation(line: 6259, column: 34, scope: !12931)
!12955 = !DILocation(line: 6259, column: 61, scope: !12931)
!12956 = !DILocation(line: 6259, column: 38, scope: !12931)
!12957 = !DILocation(line: 6260, column: 4, scope: !12931)
!12958 = !DILocation(line: 6260, column: 8, scope: !12931)
!12959 = !DILocation(line: 6260, column: 13, scope: !12931)
!12960 = !DILocation(line: 6260, column: 18, scope: !12931)
!12961 = !DILocation(line: 6260, column: 35, scope: !12931)
!12962 = !DILocation(line: 6260, column: 61, scope: !12931)
!12963 = !DILocation(line: 6260, column: 38, scope: !12931)
!12964 = !DILocation(line: 6255, column: 7, scope: !12635)
!12965 = !DILocation(line: 6262, column: 35, scope: !12966)
!12966 = distinct !DILexicalBlock(scope: !12931, file: !3, line: 6261, column: 5)
!12967 = !DILocation(line: 6262, column: 40, scope: !12966)
!12968 = !DILocation(line: 6262, column: 7, scope: !12966)
!12969 = !DILocation(line: 6266, column: 11, scope: !12970)
!12970 = distinct !DILexicalBlock(scope: !12966, file: !3, line: 6266, column: 11)
!12971 = !DILocation(line: 6266, column: 16, scope: !12970)
!12972 = !DILocation(line: 6266, column: 11, scope: !12966)
!12973 = !DILocation(line: 6267, column: 16, scope: !12970)
!12974 = !DILocation(line: 6267, column: 21, scope: !12970)
!12975 = !DILocation(line: 6267, column: 2, scope: !12970)
!12976 = !DILocation(line: 6268, column: 5, scope: !12966)
!12977 = !DILocation(line: 6270, column: 33, scope: !12931)
!12978 = !DILocation(line: 6270, column: 5, scope: !12931)
!12979 = !DILocation(line: 6271, column: 1, scope: !12635)
!12980 = distinct !DISubprogram(name: "vrp_evaluate_conditional_warnv_with_ops", scope: !3, file: !3, line: 5646, type: !12981, scopeLine: 5649, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!12981 = !DISubroutineType(types: !12982)
!12982 = !{!1747, !134, !1747, !1747, !1866, !3130, !3130}
!12983 = !DILocalVariable(name: "code", arg: 1, scope: !12980, file: !3, line: 5646, type: !134)
!12984 = !DILocation(line: 5646, column: 57, scope: !12980)
!12985 = !DILocalVariable(name: "op0", arg: 2, scope: !12980, file: !3, line: 5646, type: !1747)
!12986 = !DILocation(line: 5646, column: 68, scope: !12980)
!12987 = !DILocalVariable(name: "op1", arg: 3, scope: !12980, file: !3, line: 5647, type: !1747)
!12988 = !DILocation(line: 5647, column: 12, scope: !12980)
!12989 = !DILocalVariable(name: "use_equiv_p", arg: 4, scope: !12980, file: !3, line: 5647, type: !1866)
!12990 = !DILocation(line: 5647, column: 22, scope: !12980)
!12991 = !DILocalVariable(name: "strict_overflow_p", arg: 5, scope: !12980, file: !3, line: 5648, type: !3130)
!12992 = !DILocation(line: 5648, column: 13, scope: !12980)
!12993 = !DILocalVariable(name: "only_ranges", arg: 6, scope: !12980, file: !3, line: 5648, type: !3130)
!12994 = !DILocation(line: 5648, column: 38, scope: !12980)
!12995 = !DILocalVariable(name: "ret", scope: !12980, file: !3, line: 5650, type: !1747)
!12996 = !DILocation(line: 5650, column: 8, scope: !12980)
!12997 = !DILocation(line: 5651, column: 7, scope: !12998)
!12998 = distinct !DILexicalBlock(scope: !12980, file: !3, line: 5651, column: 7)
!12999 = !DILocation(line: 5651, column: 7, scope: !12980)
!13000 = !DILocation(line: 5652, column: 6, scope: !12998)
!13001 = !DILocation(line: 5652, column: 18, scope: !12998)
!13002 = !DILocation(line: 5652, column: 5, scope: !12998)
!13003 = !DILocation(line: 5655, column: 8, scope: !13004)
!13004 = distinct !DILexicalBlock(scope: !12980, file: !3, line: 5655, column: 7)
!13005 = !DILocation(line: 5656, column: 7, scope: !13004)
!13006 = !DILocation(line: 5656, column: 11, scope: !13004)
!13007 = !DILocation(line: 5655, column: 7, scope: !12980)
!13008 = !DILocation(line: 5657, column: 5, scope: !13004)
!13009 = !DILocation(line: 5659, column: 7, scope: !13010)
!13010 = distinct !DILexicalBlock(scope: !12980, file: !3, line: 5659, column: 7)
!13011 = !DILocation(line: 5659, column: 7, scope: !12980)
!13012 = !DILocation(line: 5661, column: 11, scope: !13013)
!13013 = distinct !DILexicalBlock(scope: !13014, file: !3, line: 5661, column: 11)
!13014 = distinct !DILexicalBlock(scope: !13010, file: !3, line: 5660, column: 5)
!13015 = !DILocation(line: 5662, column: 11, scope: !13013)
!13016 = !DILocation(line: 5663, column: 17, scope: !13013)
!13017 = !DILocation(line: 5663, column: 23, scope: !13013)
!13018 = !DILocation(line: 5663, column: 28, scope: !13013)
!13019 = !DILocation(line: 5663, column: 33, scope: !13013)
!13020 = !DILocation(line: 5662, column: 21, scope: !13013)
!13021 = !DILocation(line: 5662, column: 19, scope: !13013)
!13022 = !DILocation(line: 5661, column: 11, scope: !13014)
!13023 = !DILocation(line: 5664, column: 9, scope: !13013)
!13024 = !DILocation(line: 5664, column: 2, scope: !13013)
!13025 = !DILocation(line: 5665, column: 8, scope: !13014)
!13026 = !DILocation(line: 5665, column: 20, scope: !13014)
!13027 = !DILocation(line: 5666, column: 11, scope: !13028)
!13028 = distinct !DILexicalBlock(scope: !13014, file: !3, line: 5666, column: 11)
!13029 = !DILocation(line: 5666, column: 27, scope: !13028)
!13030 = !DILocation(line: 5666, column: 39, scope: !13028)
!13031 = !DILocation(line: 5666, column: 42, scope: !13028)
!13032 = !DILocation(line: 5666, column: 58, scope: !13028)
!13033 = !DILocation(line: 5666, column: 11, scope: !13014)
!13034 = !DILocation(line: 5667, column: 24, scope: !13028)
!13035 = !DILocation(line: 5667, column: 30, scope: !13028)
!13036 = !DILocation(line: 5667, column: 35, scope: !13028)
!13037 = !DILocation(line: 5667, column: 40, scope: !13028)
!13038 = !DILocation(line: 5667, column: 9, scope: !13028)
!13039 = !DILocation(line: 5667, column: 2, scope: !13028)
!13040 = !DILocation(line: 5668, column: 16, scope: !13041)
!13041 = distinct !DILexicalBlock(scope: !13028, file: !3, line: 5668, column: 16)
!13042 = !DILocation(line: 5668, column: 32, scope: !13041)
!13043 = !DILocation(line: 5668, column: 16, scope: !13028)
!13044 = !DILocation(line: 5669, column: 34, scope: !13041)
!13045 = !DILocation(line: 5669, column: 40, scope: !13041)
!13046 = !DILocation(line: 5669, column: 45, scope: !13041)
!13047 = !DILocation(line: 5669, column: 50, scope: !13041)
!13048 = !DILocation(line: 5669, column: 9, scope: !13041)
!13049 = !DILocation(line: 5669, column: 2, scope: !13041)
!13050 = !DILocation(line: 5670, column: 16, scope: !13051)
!13051 = distinct !DILexicalBlock(scope: !13041, file: !3, line: 5670, column: 16)
!13052 = !DILocation(line: 5670, column: 32, scope: !13051)
!13053 = !DILocation(line: 5670, column: 16, scope: !13041)
!13054 = !DILocation(line: 5672, column: 26, scope: !13051)
!13055 = !DILocation(line: 5672, column: 4, scope: !13051)
!13056 = !DILocation(line: 5672, column: 33, scope: !13051)
!13057 = !DILocation(line: 5672, column: 38, scope: !13051)
!13058 = !DILocation(line: 5672, column: 43, scope: !13051)
!13059 = !DILocation(line: 5671, column: 10, scope: !13051)
!13060 = !DILocation(line: 5671, column: 2, scope: !13051)
!13061 = !DILocation(line: 5673, column: 5, scope: !13014)
!13062 = !DILocation(line: 5675, column: 66, scope: !13010)
!13063 = !DILocation(line: 5675, column: 72, scope: !13010)
!13064 = !DILocation(line: 5675, column: 77, scope: !13010)
!13065 = !DILocation(line: 5676, column: 10, scope: !13010)
!13066 = !DILocation(line: 5675, column: 12, scope: !13010)
!13067 = !DILocation(line: 5675, column: 5, scope: !13010)
!13068 = !DILocation(line: 5677, column: 3, scope: !12980)
!13069 = !DILocation(line: 5678, column: 1, scope: !12980)
!13070 = distinct !DISubprogram(name: "vrp_evaluate_conditional_warnv_with_ops_using_ranges", scope: !3, file: !3, line: 5624, type: !3237, scopeLine: 5627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!13071 = !DILocalVariable(name: "code", arg: 1, scope: !13070, file: !3, line: 5624, type: !134)
!13072 = !DILocation(line: 5624, column: 70, scope: !13070)
!13073 = !DILocalVariable(name: "op0", arg: 2, scope: !13070, file: !3, line: 5625, type: !1747)
!13074 = !DILocation(line: 5625, column: 18, scope: !13070)
!13075 = !DILocalVariable(name: "op1", arg: 3, scope: !13070, file: !3, line: 5625, type: !1747)
!13076 = !DILocation(line: 5625, column: 28, scope: !13070)
!13077 = !DILocalVariable(name: "strict_overflow_p", arg: 4, scope: !13070, file: !3, line: 5626, type: !3130)
!13078 = !DILocation(line: 5626, column: 20, scope: !13070)
!13079 = !DILocalVariable(name: "vr0", scope: !13070, file: !3, line: 5628, type: !1741)
!13080 = !DILocation(line: 5628, column: 18, scope: !13070)
!13081 = !DILocalVariable(name: "vr1", scope: !13070, file: !3, line: 5628, type: !1741)
!13082 = !DILocation(line: 5628, column: 24, scope: !13070)
!13083 = !DILocation(line: 5630, column: 10, scope: !13070)
!13084 = !DILocation(line: 5630, column: 26, scope: !13070)
!13085 = !DILocation(line: 5630, column: 9, scope: !13070)
!13086 = !DILocation(line: 5630, column: 58, scope: !13070)
!13087 = !DILocation(line: 5630, column: 41, scope: !13070)
!13088 = !DILocation(line: 5630, column: 7, scope: !13070)
!13089 = !DILocation(line: 5631, column: 10, scope: !13070)
!13090 = !DILocation(line: 5631, column: 26, scope: !13070)
!13091 = !DILocation(line: 5631, column: 9, scope: !13070)
!13092 = !DILocation(line: 5631, column: 58, scope: !13070)
!13093 = !DILocation(line: 5631, column: 41, scope: !13070)
!13094 = !DILocation(line: 5631, column: 7, scope: !13070)
!13095 = !DILocation(line: 5633, column: 7, scope: !13096)
!13096 = distinct !DILexicalBlock(scope: !13070, file: !3, line: 5633, column: 7)
!13097 = !DILocation(line: 5633, column: 11, scope: !13096)
!13098 = !DILocation(line: 5633, column: 14, scope: !13096)
!13099 = !DILocation(line: 5633, column: 7, scope: !13070)
!13100 = !DILocation(line: 5634, column: 28, scope: !13096)
!13101 = !DILocation(line: 5634, column: 34, scope: !13096)
!13102 = !DILocation(line: 5634, column: 39, scope: !13096)
!13103 = !DILocation(line: 5634, column: 44, scope: !13096)
!13104 = !DILocation(line: 5634, column: 12, scope: !13096)
!13105 = !DILocation(line: 5634, column: 5, scope: !13096)
!13106 = !DILocation(line: 5635, column: 12, scope: !13107)
!13107 = distinct !DILexicalBlock(scope: !13096, file: !3, line: 5635, column: 12)
!13108 = !DILocation(line: 5635, column: 16, scope: !13107)
!13109 = !DILocation(line: 5635, column: 19, scope: !13107)
!13110 = !DILocation(line: 5635, column: 23, scope: !13107)
!13111 = !DILocation(line: 5635, column: 12, scope: !13096)
!13112 = !DILocation(line: 5636, column: 38, scope: !13107)
!13113 = !DILocation(line: 5636, column: 44, scope: !13107)
!13114 = !DILocation(line: 5636, column: 49, scope: !13107)
!13115 = !DILocation(line: 5636, column: 54, scope: !13107)
!13116 = !DILocation(line: 5636, column: 12, scope: !13107)
!13117 = !DILocation(line: 5636, column: 5, scope: !13107)
!13118 = !DILocation(line: 5637, column: 12, scope: !13119)
!13119 = distinct !DILexicalBlock(scope: !13107, file: !3, line: 5637, column: 12)
!13120 = !DILocation(line: 5637, column: 16, scope: !13119)
!13121 = !DILocation(line: 5637, column: 24, scope: !13119)
!13122 = !DILocation(line: 5637, column: 27, scope: !13119)
!13123 = !DILocation(line: 5637, column: 12, scope: !13107)
!13124 = !DILocation(line: 5639, column: 29, scope: !13119)
!13125 = !DILocation(line: 5639, column: 7, scope: !13119)
!13126 = !DILocation(line: 5639, column: 36, scope: !13119)
!13127 = !DILocation(line: 5639, column: 41, scope: !13119)
!13128 = !DILocation(line: 5639, column: 46, scope: !13119)
!13129 = !DILocation(line: 5638, column: 13, scope: !13119)
!13130 = !DILocation(line: 5638, column: 5, scope: !13119)
!13131 = !DILocation(line: 5640, column: 3, scope: !13070)
!13132 = !DILocation(line: 5641, column: 1, scope: !13070)
!13133 = !DILocalVariable(name: "comp", arg: 1, scope: !3236, file: !3, line: 5516, type: !134)
!13134 = !DILocation(line: 5516, column: 31, scope: !3236)
!13135 = !DILocalVariable(name: "n1", arg: 2, scope: !3236, file: !3, line: 5516, type: !1747)
!13136 = !DILocation(line: 5516, column: 42, scope: !3236)
!13137 = !DILocalVariable(name: "n2", arg: 3, scope: !3236, file: !3, line: 5516, type: !1747)
!13138 = !DILocation(line: 5516, column: 51, scope: !3236)
!13139 = !DILocalVariable(name: "strict_overflow_p", arg: 4, scope: !3236, file: !3, line: 5517, type: !3130)
!13140 = !DILocation(line: 5517, column: 15, scope: !3236)
!13141 = !DILocalVariable(name: "t", scope: !3236, file: !3, line: 5519, type: !1747)
!13142 = !DILocation(line: 5519, column: 8, scope: !3236)
!13143 = !DILocalVariable(name: "retval", scope: !3236, file: !3, line: 5519, type: !1747)
!13144 = !DILocation(line: 5519, column: 11, scope: !3236)
!13145 = !DILocalVariable(name: "e1", scope: !3236, file: !3, line: 5520, type: !2645)
!13146 = !DILocation(line: 5520, column: 10, scope: !3236)
!13147 = !DILocalVariable(name: "e2", scope: !3236, file: !3, line: 5520, type: !2645)
!13148 = !DILocation(line: 5520, column: 14, scope: !3236)
!13149 = !DILocalVariable(name: "bi1", scope: !3236, file: !3, line: 5521, type: !3511)
!13150 = !DILocation(line: 5521, column: 19, scope: !3236)
!13151 = !DILocalVariable(name: "bi2", scope: !3236, file: !3, line: 5521, type: !3511)
!13152 = !DILocation(line: 5521, column: 24, scope: !3236)
!13153 = !DILocalVariable(name: "i1", scope: !3236, file: !3, line: 5522, type: !7)
!13154 = !DILocation(line: 5522, column: 12, scope: !3236)
!13155 = !DILocalVariable(name: "i2", scope: !3236, file: !3, line: 5522, type: !7)
!13156 = !DILocation(line: 5522, column: 16, scope: !3236)
!13157 = !DILocalVariable(name: "used_strict_overflow", scope: !3236, file: !3, line: 5523, type: !1740)
!13158 = !DILocation(line: 5523, column: 7, scope: !3236)
!13159 = !DILocation(line: 5529, column: 25, scope: !3236)
!13160 = !DILocation(line: 5529, column: 8, scope: !3236)
!13161 = !DILocation(line: 5529, column: 30, scope: !3236)
!13162 = !DILocation(line: 5529, column: 6, scope: !3236)
!13163 = !DILocation(line: 5530, column: 25, scope: !3236)
!13164 = !DILocation(line: 5530, column: 8, scope: !3236)
!13165 = !DILocation(line: 5530, column: 30, scope: !3236)
!13166 = !DILocation(line: 5530, column: 6, scope: !3236)
!13167 = !DILocation(line: 5533, column: 7, scope: !13168)
!13168 = distinct !DILexicalBlock(scope: !3236, file: !3, line: 5533, column: 7)
!13169 = !DILocation(line: 5533, column: 17, scope: !13168)
!13170 = !DILocation(line: 5533, column: 7, scope: !3236)
!13171 = !DILocation(line: 5535, column: 19, scope: !13172)
!13172 = distinct !DILexicalBlock(scope: !13168, file: !3, line: 5534, column: 5)
!13173 = !DILocation(line: 5535, column: 17, scope: !13172)
!13174 = !DILocation(line: 5536, column: 34, scope: !13172)
!13175 = !DILocation(line: 5536, column: 7, scope: !13172)
!13176 = !DILocation(line: 5537, column: 14, scope: !13172)
!13177 = !DILocation(line: 5537, column: 12, scope: !13172)
!13178 = !DILocation(line: 5538, column: 14, scope: !13172)
!13179 = !DILocation(line: 5538, column: 12, scope: !13172)
!13180 = !DILocation(line: 5539, column: 5, scope: !13172)
!13181 = !DILocation(line: 5540, column: 7, scope: !13182)
!13182 = distinct !DILexicalBlock(scope: !3236, file: !3, line: 5540, column: 7)
!13183 = !DILocation(line: 5540, column: 10, scope: !13182)
!13184 = !DILocation(line: 5540, column: 7, scope: !3236)
!13185 = !DILocation(line: 5541, column: 10, scope: !13182)
!13186 = !DILocation(line: 5541, column: 8, scope: !13182)
!13187 = !DILocation(line: 5541, column: 5, scope: !13182)
!13188 = !DILocation(line: 5542, column: 7, scope: !13189)
!13189 = distinct !DILexicalBlock(scope: !3236, file: !3, line: 5542, column: 7)
!13190 = !DILocation(line: 5542, column: 10, scope: !13189)
!13191 = !DILocation(line: 5542, column: 7, scope: !3236)
!13192 = !DILocation(line: 5543, column: 10, scope: !13189)
!13193 = !DILocation(line: 5543, column: 8, scope: !13189)
!13194 = !DILocation(line: 5543, column: 5, scope: !13189)
!13195 = !DILocation(line: 5548, column: 19, scope: !3236)
!13196 = !DILocation(line: 5548, column: 23, scope: !3236)
!13197 = !DILocation(line: 5548, column: 3, scope: !3236)
!13198 = !DILocation(line: 5549, column: 19, scope: !3236)
!13199 = !DILocation(line: 5549, column: 23, scope: !3236)
!13200 = !DILocation(line: 5549, column: 3, scope: !3236)
!13201 = !DILocation(line: 5553, column: 27, scope: !13202)
!13202 = distinct !DILexicalBlock(scope: !3236, file: !3, line: 5553, column: 7)
!13203 = !DILocation(line: 5553, column: 31, scope: !13202)
!13204 = !DILocation(line: 5553, column: 7, scope: !13202)
!13205 = !DILocation(line: 5553, column: 7, scope: !3236)
!13206 = !DILocation(line: 5555, column: 25, scope: !13207)
!13207 = distinct !DILexicalBlock(scope: !13202, file: !3, line: 5554, column: 5)
!13208 = !DILocation(line: 5555, column: 29, scope: !13207)
!13209 = !DILocation(line: 5555, column: 7, scope: !13207)
!13210 = !DILocation(line: 5556, column: 25, scope: !13207)
!13211 = !DILocation(line: 5556, column: 29, scope: !13207)
!13212 = !DILocation(line: 5556, column: 7, scope: !13207)
!13213 = !DILocation(line: 5558, column: 15, scope: !13207)
!13214 = !DILocation(line: 5558, column: 20, scope: !13207)
!13215 = !DILocation(line: 5558, column: 31, scope: !13207)
!13216 = !DILocation(line: 5558, column: 34, scope: !13207)
!13217 = !DILocation(line: 5558, column: 39, scope: !13207)
!13218 = !DILocation(line: 5558, column: 50, scope: !13207)
!13219 = !DILocation(line: 5558, column: 53, scope: !13207)
!13220 = !DILocation(line: 5558, column: 58, scope: !13207)
!13221 = !DILocation(line: 5558, column: 14, scope: !13207)
!13222 = !DILocation(line: 5559, column: 9, scope: !13207)
!13223 = !DILocation(line: 5560, column: 9, scope: !13207)
!13224 = !DILocation(line: 5558, column: 7, scope: !13207)
!13225 = !DILocation(line: 5565, column: 24, scope: !3236)
!13226 = !DILocation(line: 5570, column: 3, scope: !13227)
!13227 = distinct !DILexicalBlock(scope: !3236, file: !3, line: 5570, column: 3)
!13228 = !DILocation(line: 5570, column: 3, scope: !13229)
!13229 = distinct !DILexicalBlock(scope: !13227, file: !3, line: 5570, column: 3)
!13230 = !DILocalVariable(name: "vr1", scope: !13231, file: !3, line: 5572, type: !1742)
!13231 = distinct !DILexicalBlock(scope: !13229, file: !3, line: 5571, column: 5)
!13232 = !DILocation(line: 5572, column: 21, scope: !13231)
!13233 = !DILocation(line: 5572, column: 50, scope: !13231)
!13234 = !DILocation(line: 5572, column: 27, scope: !13231)
!13235 = !DILocation(line: 5574, column: 18, scope: !13231)
!13236 = !DILocation(line: 5574, column: 9, scope: !13231)
!13237 = !DILocation(line: 5575, column: 7, scope: !13238)
!13238 = distinct !DILexicalBlock(scope: !13231, file: !3, line: 5575, column: 7)
!13239 = !DILocation(line: 5575, column: 7, scope: !13240)
!13240 = distinct !DILexicalBlock(scope: !13238, file: !3, line: 5575, column: 7)
!13241 = !DILocalVariable(name: "sop", scope: !13242, file: !3, line: 5577, type: !1866)
!13242 = distinct !DILexicalBlock(scope: !13240, file: !3, line: 5576, column: 2)
!13243 = !DILocation(line: 5577, column: 9, scope: !13242)
!13244 = !DILocalVariable(name: "vr2", scope: !13242, file: !3, line: 5579, type: !1742)
!13245 = !DILocation(line: 5579, column: 18, scope: !13242)
!13246 = !DILocation(line: 5579, column: 47, scope: !13242)
!13247 = !DILocation(line: 5579, column: 24, scope: !13242)
!13248 = !DILocation(line: 5581, column: 24, scope: !13242)
!13249 = !DILocation(line: 5581, column: 8, scope: !13242)
!13250 = !DILocation(line: 5581, column: 6, scope: !13242)
!13251 = !DILocation(line: 5582, column: 8, scope: !13252)
!13252 = distinct !DILexicalBlock(scope: !13242, file: !3, line: 5582, column: 8)
!13253 = !DILocation(line: 5582, column: 8, scope: !13242)
!13254 = !DILocation(line: 5588, column: 12, scope: !13255)
!13255 = distinct !DILexicalBlock(scope: !13256, file: !3, line: 5588, column: 12)
!13256 = distinct !DILexicalBlock(scope: !13252, file: !3, line: 5583, column: 6)
!13257 = !DILocation(line: 5588, column: 19, scope: !13255)
!13258 = !DILocation(line: 5589, column: 5, scope: !13255)
!13259 = !DILocation(line: 5589, column: 8, scope: !13255)
!13260 = !DILocation(line: 5589, column: 13, scope: !13255)
!13261 = !DILocation(line: 5589, column: 10, scope: !13255)
!13262 = !DILocation(line: 5588, column: 12, scope: !13256)
!13263 = !DILocation(line: 5591, column: 23, scope: !13264)
!13264 = distinct !DILexicalBlock(scope: !13255, file: !3, line: 5590, column: 3)
!13265 = !DILocation(line: 5591, column: 27, scope: !13264)
!13266 = !DILocation(line: 5591, column: 5, scope: !13264)
!13267 = !DILocation(line: 5592, column: 23, scope: !13264)
!13268 = !DILocation(line: 5592, column: 27, scope: !13264)
!13269 = !DILocation(line: 5592, column: 5, scope: !13264)
!13270 = !DILocation(line: 5593, column: 5, scope: !13264)
!13271 = !DILocation(line: 5595, column: 17, scope: !13256)
!13272 = !DILocation(line: 5595, column: 15, scope: !13256)
!13273 = !DILocation(line: 5597, column: 13, scope: !13274)
!13274 = distinct !DILexicalBlock(scope: !13256, file: !3, line: 5597, column: 12)
!13275 = !DILocation(line: 5597, column: 12, scope: !13256)
!13276 = !DILocation(line: 5598, column: 24, scope: !13274)
!13277 = !DILocation(line: 5598, column: 3, scope: !13274)
!13278 = !DILocation(line: 5599, column: 17, scope: !13279)
!13279 = distinct !DILexicalBlock(scope: !13274, file: !3, line: 5599, column: 17)
!13280 = !DILocation(line: 5599, column: 38, scope: !13279)
!13281 = !DILocation(line: 5599, column: 17, scope: !13274)
!13282 = !DILocation(line: 5600, column: 24, scope: !13279)
!13283 = !DILocation(line: 5600, column: 3, scope: !13279)
!13284 = !DILocation(line: 5601, column: 6, scope: !13256)
!13285 = !DILocation(line: 5602, column: 2, scope: !13242)
!13286 = distinct !{!13286, !13237, !13287}
!13287 = !DILocation(line: 5602, column: 2, scope: !13238)
!13288 = !DILocation(line: 5604, column: 11, scope: !13289)
!13289 = distinct !DILexicalBlock(scope: !13231, file: !3, line: 5604, column: 11)
!13290 = !DILocation(line: 5604, column: 11, scope: !13231)
!13291 = !DILocation(line: 5606, column: 22, scope: !13292)
!13292 = distinct !DILexicalBlock(scope: !13289, file: !3, line: 5605, column: 2)
!13293 = !DILocation(line: 5606, column: 26, scope: !13292)
!13294 = !DILocation(line: 5606, column: 4, scope: !13292)
!13295 = !DILocation(line: 5607, column: 22, scope: !13292)
!13296 = !DILocation(line: 5607, column: 26, scope: !13292)
!13297 = !DILocation(line: 5607, column: 4, scope: !13292)
!13298 = !DILocation(line: 5608, column: 8, scope: !13299)
!13299 = distinct !DILexicalBlock(scope: !13292, file: !3, line: 5608, column: 8)
!13300 = !DILocation(line: 5608, column: 29, scope: !13299)
!13301 = !DILocation(line: 5608, column: 8, scope: !13292)
!13302 = !DILocation(line: 5609, column: 7, scope: !13299)
!13303 = !DILocation(line: 5609, column: 25, scope: !13299)
!13304 = !DILocation(line: 5609, column: 6, scope: !13299)
!13305 = !DILocation(line: 5610, column: 11, scope: !13292)
!13306 = !DILocation(line: 5610, column: 4, scope: !13292)
!13307 = !DILocation(line: 5612, column: 5, scope: !13231)
!13308 = distinct !{!13308, !13226, !13309}
!13309 = !DILocation(line: 5612, column: 5, scope: !13227)
!13310 = !DILocation(line: 5616, column: 21, scope: !3236)
!13311 = !DILocation(line: 5616, column: 25, scope: !3236)
!13312 = !DILocation(line: 5616, column: 3, scope: !3236)
!13313 = !DILocation(line: 5617, column: 21, scope: !3236)
!13314 = !DILocation(line: 5617, column: 25, scope: !3236)
!13315 = !DILocation(line: 5617, column: 3, scope: !3236)
!13316 = !DILocation(line: 5618, column: 3, scope: !3236)
!13317 = !DILocation(line: 5619, column: 1, scope: !3236)
!13318 = distinct !DISubprogram(name: "compare_name_with_value", scope: !3, file: !3, line: 5440, type: !3237, scopeLine: 5442, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!13319 = !DILocalVariable(name: "comp", arg: 1, scope: !13318, file: !3, line: 5440, type: !134)
!13320 = !DILocation(line: 5440, column: 41, scope: !13318)
!13321 = !DILocalVariable(name: "var", arg: 2, scope: !13318, file: !3, line: 5440, type: !1747)
!13322 = !DILocation(line: 5440, column: 52, scope: !13318)
!13323 = !DILocalVariable(name: "val", arg: 3, scope: !13318, file: !3, line: 5440, type: !1747)
!13324 = !DILocation(line: 5440, column: 62, scope: !13318)
!13325 = !DILocalVariable(name: "strict_overflow_p", arg: 4, scope: !13318, file: !3, line: 5441, type: !3130)
!13326 = !DILocation(line: 5441, column: 11, scope: !13318)
!13327 = !DILocalVariable(name: "bi", scope: !13318, file: !3, line: 5443, type: !3511)
!13328 = !DILocation(line: 5443, column: 19, scope: !13318)
!13329 = !DILocalVariable(name: "i", scope: !13318, file: !3, line: 5444, type: !7)
!13330 = !DILocation(line: 5444, column: 12, scope: !13318)
!13331 = !DILocalVariable(name: "e", scope: !13318, file: !3, line: 5445, type: !2645)
!13332 = !DILocation(line: 5445, column: 10, scope: !13318)
!13333 = !DILocalVariable(name: "retval", scope: !13318, file: !3, line: 5446, type: !1747)
!13334 = !DILocation(line: 5446, column: 8, scope: !13318)
!13335 = !DILocalVariable(name: "t", scope: !13318, file: !3, line: 5446, type: !1747)
!13336 = !DILocation(line: 5446, column: 16, scope: !13318)
!13337 = !DILocalVariable(name: "used_strict_overflow", scope: !13318, file: !3, line: 5447, type: !1740)
!13338 = !DILocation(line: 5447, column: 7, scope: !13318)
!13339 = !DILocalVariable(name: "sop", scope: !13318, file: !3, line: 5448, type: !1866)
!13340 = !DILocation(line: 5448, column: 8, scope: !13318)
!13341 = !DILocalVariable(name: "equiv_vr", scope: !13318, file: !3, line: 5449, type: !1742)
!13342 = !DILocation(line: 5449, column: 17, scope: !13318)
!13343 = !DILocation(line: 5452, column: 24, scope: !13318)
!13344 = !DILocation(line: 5452, column: 7, scope: !13318)
!13345 = !DILocation(line: 5452, column: 30, scope: !13318)
!13346 = !DILocation(line: 5452, column: 5, scope: !13318)
!13347 = !DILocation(line: 5456, column: 24, scope: !13318)
!13348 = !DILocation(line: 5459, column: 37, scope: !13318)
!13349 = !DILocation(line: 5459, column: 14, scope: !13318)
!13350 = !DILocation(line: 5460, column: 7, scope: !13318)
!13351 = !DILocation(line: 5461, column: 38, scope: !13318)
!13352 = !DILocation(line: 5461, column: 55, scope: !13318)
!13353 = !DILocation(line: 5461, column: 12, scope: !13318)
!13354 = !DILocation(line: 5461, column: 10, scope: !13318)
!13355 = !DILocation(line: 5462, column: 7, scope: !13356)
!13356 = distinct !DILexicalBlock(scope: !13318, file: !3, line: 5462, column: 7)
!13357 = !DILocation(line: 5462, column: 7, scope: !13318)
!13358 = !DILocation(line: 5463, column: 28, scope: !13356)
!13359 = !DILocation(line: 5463, column: 26, scope: !13356)
!13360 = !DILocation(line: 5463, column: 5, scope: !13356)
!13361 = !DILocation(line: 5466, column: 7, scope: !13362)
!13362 = distinct !DILexicalBlock(scope: !13318, file: !3, line: 5466, column: 7)
!13363 = !DILocation(line: 5466, column: 9, scope: !13362)
!13364 = !DILocation(line: 5466, column: 7, scope: !13318)
!13365 = !DILocation(line: 5468, column: 11, scope: !13366)
!13366 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5468, column: 11)
!13367 = distinct !DILexicalBlock(scope: !13362, file: !3, line: 5467, column: 5)
!13368 = !DILocation(line: 5469, column: 4, scope: !13366)
!13369 = !DILocation(line: 5469, column: 7, scope: !13366)
!13370 = !DILocation(line: 5469, column: 28, scope: !13366)
!13371 = !DILocation(line: 5468, column: 11, scope: !13367)
!13372 = !DILocation(line: 5470, column: 3, scope: !13366)
!13373 = !DILocation(line: 5470, column: 21, scope: !13366)
!13374 = !DILocation(line: 5470, column: 2, scope: !13366)
!13375 = !DILocation(line: 5471, column: 14, scope: !13367)
!13376 = !DILocation(line: 5471, column: 7, scope: !13367)
!13377 = !DILocation(line: 5474, column: 3, scope: !13378)
!13378 = distinct !DILexicalBlock(scope: !13318, file: !3, line: 5474, column: 3)
!13379 = !DILocation(line: 5474, column: 3, scope: !13380)
!13380 = distinct !DILexicalBlock(scope: !13378, file: !3, line: 5474, column: 3)
!13381 = !DILocation(line: 5476, column: 41, scope: !13382)
!13382 = distinct !DILexicalBlock(scope: !13380, file: !3, line: 5475, column: 5)
!13383 = !DILocation(line: 5476, column: 18, scope: !13382)
!13384 = !DILocation(line: 5477, column: 11, scope: !13382)
!13385 = !DILocation(line: 5478, column: 37, scope: !13382)
!13386 = !DILocation(line: 5478, column: 54, scope: !13382)
!13387 = !DILocation(line: 5478, column: 11, scope: !13382)
!13388 = !DILocation(line: 5478, column: 9, scope: !13382)
!13389 = !DILocation(line: 5479, column: 11, scope: !13390)
!13390 = distinct !DILexicalBlock(scope: !13382, file: !3, line: 5479, column: 11)
!13391 = !DILocation(line: 5479, column: 11, scope: !13382)
!13392 = !DILocation(line: 5485, column: 8, scope: !13393)
!13393 = distinct !DILexicalBlock(scope: !13394, file: !3, line: 5485, column: 8)
!13394 = distinct !DILexicalBlock(scope: !13390, file: !3, line: 5480, column: 2)
!13395 = !DILocation(line: 5485, column: 15, scope: !13393)
!13396 = !DILocation(line: 5486, column: 8, scope: !13393)
!13397 = !DILocation(line: 5486, column: 11, scope: !13393)
!13398 = !DILocation(line: 5486, column: 16, scope: !13393)
!13399 = !DILocation(line: 5486, column: 13, scope: !13393)
!13400 = !DILocation(line: 5485, column: 8, scope: !13394)
!13401 = !DILocation(line: 5488, column: 15, scope: !13402)
!13402 = distinct !DILexicalBlock(scope: !13393, file: !3, line: 5487, column: 6)
!13403 = !DILocation(line: 5489, column: 8, scope: !13402)
!13404 = !DILocation(line: 5491, column: 13, scope: !13394)
!13405 = !DILocation(line: 5491, column: 11, scope: !13394)
!13406 = !DILocation(line: 5493, column: 9, scope: !13407)
!13407 = distinct !DILexicalBlock(scope: !13394, file: !3, line: 5493, column: 8)
!13408 = !DILocation(line: 5493, column: 8, scope: !13394)
!13409 = !DILocation(line: 5494, column: 27, scope: !13407)
!13410 = !DILocation(line: 5494, column: 6, scope: !13407)
!13411 = !DILocation(line: 5495, column: 13, scope: !13412)
!13412 = distinct !DILexicalBlock(scope: !13407, file: !3, line: 5495, column: 13)
!13413 = !DILocation(line: 5495, column: 34, scope: !13412)
!13414 = !DILocation(line: 5495, column: 13, scope: !13407)
!13415 = !DILocation(line: 5496, column: 27, scope: !13412)
!13416 = !DILocation(line: 5496, column: 6, scope: !13412)
!13417 = !DILocation(line: 5497, column: 2, scope: !13394)
!13418 = !DILocation(line: 5498, column: 5, scope: !13382)
!13419 = distinct !{!13419, !13377, !13420}
!13420 = !DILocation(line: 5498, column: 5, scope: !13378)
!13421 = !DILocation(line: 5500, column: 7, scope: !13422)
!13422 = distinct !DILexicalBlock(scope: !13318, file: !3, line: 5500, column: 7)
!13423 = !DILocation(line: 5501, column: 7, scope: !13422)
!13424 = !DILocation(line: 5501, column: 10, scope: !13422)
!13425 = !DILocation(line: 5501, column: 31, scope: !13422)
!13426 = !DILocation(line: 5500, column: 7, scope: !13318)
!13427 = !DILocation(line: 5502, column: 6, scope: !13422)
!13428 = !DILocation(line: 5502, column: 24, scope: !13422)
!13429 = !DILocation(line: 5502, column: 5, scope: !13422)
!13430 = !DILocation(line: 5504, column: 10, scope: !13318)
!13431 = !DILocation(line: 5504, column: 3, scope: !13318)
!13432 = !DILocation(line: 5505, column: 1, scope: !13318)
!13433 = distinct !DISubprogram(name: "compare_ranges", scope: !3, file: !3, line: 3344, type: !13434, scopeLine: 3346, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!13434 = !DISubroutineType(types: !13435)
!13435 = !{!1747, !134, !1741, !1741, !3130}
!13436 = !DILocalVariable(name: "comp", arg: 1, scope: !13433, file: !3, line: 3344, type: !134)
!13437 = !DILocation(line: 3344, column: 32, scope: !13433)
!13438 = !DILocalVariable(name: "vr0", arg: 2, scope: !13433, file: !3, line: 3344, type: !1741)
!13439 = !DILocation(line: 3344, column: 53, scope: !13433)
!13440 = !DILocalVariable(name: "vr1", arg: 3, scope: !13433, file: !3, line: 3344, type: !1741)
!13441 = !DILocation(line: 3344, column: 73, scope: !13433)
!13442 = !DILocalVariable(name: "strict_overflow_p", arg: 4, scope: !13433, file: !3, line: 3345, type: !3130)
!13443 = !DILocation(line: 3345, column: 9, scope: !13433)
!13444 = !DILocation(line: 3348, column: 7, scope: !13445)
!13445 = distinct !DILexicalBlock(scope: !13433, file: !3, line: 3348, column: 7)
!13446 = !DILocation(line: 3348, column: 12, scope: !13445)
!13447 = !DILocation(line: 3348, column: 17, scope: !13445)
!13448 = !DILocation(line: 3349, column: 7, scope: !13445)
!13449 = !DILocation(line: 3349, column: 10, scope: !13445)
!13450 = !DILocation(line: 3349, column: 15, scope: !13445)
!13451 = !DILocation(line: 3349, column: 20, scope: !13445)
!13452 = !DILocation(line: 3350, column: 7, scope: !13445)
!13453 = !DILocation(line: 3350, column: 10, scope: !13445)
!13454 = !DILocation(line: 3350, column: 15, scope: !13445)
!13455 = !DILocation(line: 3350, column: 20, scope: !13445)
!13456 = !DILocation(line: 3351, column: 7, scope: !13445)
!13457 = !DILocation(line: 3351, column: 10, scope: !13445)
!13458 = !DILocation(line: 3351, column: 15, scope: !13445)
!13459 = !DILocation(line: 3351, column: 20, scope: !13445)
!13460 = !DILocation(line: 3348, column: 7, scope: !13433)
!13461 = !DILocation(line: 3352, column: 5, scope: !13445)
!13462 = !DILocation(line: 3355, column: 7, scope: !13463)
!13463 = distinct !DILexicalBlock(scope: !13433, file: !3, line: 3355, column: 7)
!13464 = !DILocation(line: 3355, column: 12, scope: !13463)
!13465 = !DILocation(line: 3355, column: 17, scope: !13463)
!13466 = !DILocation(line: 3355, column: 34, scope: !13463)
!13467 = !DILocation(line: 3355, column: 37, scope: !13463)
!13468 = !DILocation(line: 3355, column: 42, scope: !13463)
!13469 = !DILocation(line: 3355, column: 47, scope: !13463)
!13470 = !DILocation(line: 3355, column: 7, scope: !13433)
!13471 = !DILocation(line: 3359, column: 11, scope: !13472)
!13472 = distinct !DILexicalBlock(scope: !13473, file: !3, line: 3359, column: 11)
!13473 = distinct !DILexicalBlock(scope: !13463, file: !3, line: 3356, column: 5)
!13474 = !DILocation(line: 3359, column: 16, scope: !13472)
!13475 = !DILocation(line: 3359, column: 21, scope: !13472)
!13476 = !DILocation(line: 3359, column: 38, scope: !13472)
!13477 = !DILocation(line: 3359, column: 41, scope: !13472)
!13478 = !DILocation(line: 3359, column: 46, scope: !13472)
!13479 = !DILocation(line: 3359, column: 51, scope: !13472)
!13480 = !DILocation(line: 3359, column: 11, scope: !13473)
!13481 = !DILocation(line: 3360, column: 2, scope: !13472)
!13482 = !DILocation(line: 3363, column: 11, scope: !13483)
!13483 = distinct !DILexicalBlock(scope: !13473, file: !3, line: 3363, column: 11)
!13484 = !DILocation(line: 3363, column: 16, scope: !13483)
!13485 = !DILocation(line: 3364, column: 4, scope: !13483)
!13486 = !DILocation(line: 3364, column: 7, scope: !13483)
!13487 = !DILocation(line: 3364, column: 12, scope: !13483)
!13488 = !DILocation(line: 3365, column: 4, scope: !13483)
!13489 = !DILocation(line: 3365, column: 7, scope: !13483)
!13490 = !DILocation(line: 3365, column: 12, scope: !13483)
!13491 = !DILocation(line: 3366, column: 4, scope: !13483)
!13492 = !DILocation(line: 3366, column: 7, scope: !13483)
!13493 = !DILocation(line: 3366, column: 12, scope: !13483)
!13494 = !DILocation(line: 3363, column: 11, scope: !13473)
!13495 = !DILocation(line: 3367, column: 2, scope: !13483)
!13496 = !DILocation(line: 3371, column: 11, scope: !13497)
!13497 = distinct !DILexicalBlock(scope: !13473, file: !3, line: 3371, column: 11)
!13498 = !DILocation(line: 3371, column: 16, scope: !13497)
!13499 = !DILocation(line: 3371, column: 21, scope: !13497)
!13500 = !DILocation(line: 3371, column: 11, scope: !13473)
!13501 = !DILocalVariable(name: "tmp", scope: !13502, file: !3, line: 3374, type: !1741)
!13502 = distinct !DILexicalBlock(scope: !13497, file: !3, line: 3372, column: 2)
!13503 = !DILocation(line: 3374, column: 19, scope: !13502)
!13504 = !DILocation(line: 3374, column: 25, scope: !13502)
!13505 = !DILocation(line: 3375, column: 10, scope: !13502)
!13506 = !DILocation(line: 3375, column: 8, scope: !13502)
!13507 = !DILocation(line: 3376, column: 10, scope: !13502)
!13508 = !DILocation(line: 3376, column: 8, scope: !13502)
!13509 = !DILocation(line: 3377, column: 2, scope: !13502)
!13510 = !DILocation(line: 3379, column: 7, scope: !13473)
!13511 = !DILocation(line: 3381, column: 33, scope: !13512)
!13512 = distinct !DILexicalBlock(scope: !13473, file: !3, line: 3381, column: 11)
!13513 = !DILocation(line: 3381, column: 38, scope: !13512)
!13514 = !DILocation(line: 3381, column: 43, scope: !13512)
!13515 = !DILocation(line: 3381, column: 48, scope: !13512)
!13516 = !DILocation(line: 3381, column: 53, scope: !13512)
!13517 = !DILocation(line: 3381, column: 11, scope: !13512)
!13518 = !DILocation(line: 3381, column: 72, scope: !13512)
!13519 = !DILocation(line: 3382, column: 4, scope: !13512)
!13520 = !DILocation(line: 3382, column: 29, scope: !13512)
!13521 = !DILocation(line: 3382, column: 34, scope: !13512)
!13522 = !DILocation(line: 3382, column: 39, scope: !13512)
!13523 = !DILocation(line: 3382, column: 44, scope: !13512)
!13524 = !DILocation(line: 3382, column: 49, scope: !13512)
!13525 = !DILocation(line: 3382, column: 7, scope: !13512)
!13526 = !DILocation(line: 3382, column: 68, scope: !13512)
!13527 = !DILocation(line: 3381, column: 11, scope: !13473)
!13528 = !DILocation(line: 3383, column: 10, scope: !13512)
!13529 = !DILocation(line: 3383, column: 15, scope: !13512)
!13530 = !DILocation(line: 3383, column: 9, scope: !13512)
!13531 = !DILocation(line: 3383, column: 29, scope: !13512)
!13532 = !DILocation(line: 3383, column: 49, scope: !13512)
!13533 = !DILocation(line: 3383, column: 2, scope: !13512)
!13534 = !DILocation(line: 3385, column: 7, scope: !13473)
!13535 = !DILocation(line: 3388, column: 24, scope: !13536)
!13536 = distinct !DILexicalBlock(scope: !13433, file: !3, line: 3388, column: 7)
!13537 = !DILocation(line: 3388, column: 29, scope: !13536)
!13538 = !DILocation(line: 3388, column: 8, scope: !13536)
!13539 = !DILocation(line: 3389, column: 7, scope: !13536)
!13540 = !DILocation(line: 3389, column: 27, scope: !13536)
!13541 = !DILocation(line: 3389, column: 32, scope: !13536)
!13542 = !DILocation(line: 3389, column: 11, scope: !13536)
!13543 = !DILocation(line: 3388, column: 7, scope: !13433)
!13544 = !DILocation(line: 3390, column: 5, scope: !13536)
!13545 = !DILocation(line: 3394, column: 7, scope: !13546)
!13546 = distinct !DILexicalBlock(scope: !13433, file: !3, line: 3394, column: 7)
!13547 = !DILocation(line: 3394, column: 12, scope: !13546)
!13548 = !DILocation(line: 3394, column: 23, scope: !13546)
!13549 = !DILocation(line: 3394, column: 26, scope: !13546)
!13550 = !DILocation(line: 3394, column: 31, scope: !13546)
!13551 = !DILocation(line: 3394, column: 7, scope: !13433)
!13552 = !DILocalVariable(name: "tmp", scope: !13553, file: !3, line: 3396, type: !1741)
!13553 = distinct !DILexicalBlock(scope: !13546, file: !3, line: 3395, column: 5)
!13554 = !DILocation(line: 3396, column: 22, scope: !13553)
!13555 = !DILocation(line: 3397, column: 15, scope: !13553)
!13556 = !DILocation(line: 3397, column: 20, scope: !13553)
!13557 = !DILocation(line: 3397, column: 14, scope: !13553)
!13558 = !DILocation(line: 3397, column: 12, scope: !13553)
!13559 = !DILocation(line: 3398, column: 13, scope: !13553)
!13560 = !DILocation(line: 3398, column: 11, scope: !13553)
!13561 = !DILocation(line: 3399, column: 13, scope: !13553)
!13562 = !DILocation(line: 3399, column: 11, scope: !13553)
!13563 = !DILocation(line: 3400, column: 13, scope: !13553)
!13564 = !DILocation(line: 3400, column: 11, scope: !13553)
!13565 = !DILocation(line: 3401, column: 5, scope: !13553)
!13566 = !DILocation(line: 3403, column: 7, scope: !13567)
!13567 = distinct !DILexicalBlock(scope: !13433, file: !3, line: 3403, column: 7)
!13568 = !DILocation(line: 3403, column: 12, scope: !13567)
!13569 = !DILocation(line: 3403, column: 7, scope: !13433)
!13570 = !DILocation(line: 3407, column: 33, scope: !13571)
!13571 = distinct !DILexicalBlock(scope: !13572, file: !3, line: 3407, column: 11)
!13572 = distinct !DILexicalBlock(scope: !13567, file: !3, line: 3404, column: 5)
!13573 = !DILocation(line: 3407, column: 38, scope: !13571)
!13574 = !DILocation(line: 3407, column: 43, scope: !13571)
!13575 = !DILocation(line: 3407, column: 48, scope: !13571)
!13576 = !DILocation(line: 3407, column: 53, scope: !13571)
!13577 = !DILocation(line: 3407, column: 11, scope: !13571)
!13578 = !DILocation(line: 3407, column: 72, scope: !13571)
!13579 = !DILocation(line: 3408, column: 4, scope: !13571)
!13580 = !DILocation(line: 3408, column: 29, scope: !13571)
!13581 = !DILocation(line: 3408, column: 34, scope: !13571)
!13582 = !DILocation(line: 3408, column: 39, scope: !13571)
!13583 = !DILocation(line: 3408, column: 44, scope: !13571)
!13584 = !DILocation(line: 3408, column: 49, scope: !13571)
!13585 = !DILocation(line: 3408, column: 7, scope: !13571)
!13586 = !DILocation(line: 3408, column: 68, scope: !13571)
!13587 = !DILocation(line: 3407, column: 11, scope: !13572)
!13588 = !DILocalVariable(name: "cmp_min", scope: !13589, file: !3, line: 3410, type: !1740)
!13589 = distinct !DILexicalBlock(scope: !13571, file: !3, line: 3409, column: 2)
!13590 = !DILocation(line: 3410, column: 8, scope: !13589)
!13591 = !DILocation(line: 3410, column: 40, scope: !13589)
!13592 = !DILocation(line: 3410, column: 45, scope: !13589)
!13593 = !DILocation(line: 3410, column: 50, scope: !13589)
!13594 = !DILocation(line: 3410, column: 55, scope: !13589)
!13595 = !DILocation(line: 3411, column: 12, scope: !13589)
!13596 = !DILocation(line: 3410, column: 18, scope: !13589)
!13597 = !DILocalVariable(name: "cmp_max", scope: !13589, file: !3, line: 3412, type: !1740)
!13598 = !DILocation(line: 3412, column: 8, scope: !13589)
!13599 = !DILocation(line: 3412, column: 40, scope: !13589)
!13600 = !DILocation(line: 3412, column: 45, scope: !13589)
!13601 = !DILocation(line: 3412, column: 50, scope: !13589)
!13602 = !DILocation(line: 3412, column: 55, scope: !13589)
!13603 = !DILocation(line: 3413, column: 12, scope: !13589)
!13604 = !DILocation(line: 3412, column: 18, scope: !13589)
!13605 = !DILocation(line: 3414, column: 8, scope: !13606)
!13606 = distinct !DILexicalBlock(scope: !13589, file: !3, line: 3414, column: 8)
!13607 = !DILocation(line: 3414, column: 16, scope: !13606)
!13608 = !DILocation(line: 3414, column: 21, scope: !13606)
!13609 = !DILocation(line: 3414, column: 24, scope: !13606)
!13610 = !DILocation(line: 3414, column: 32, scope: !13606)
!13611 = !DILocation(line: 3414, column: 8, scope: !13589)
!13612 = !DILocation(line: 3415, column: 13, scope: !13606)
!13613 = !DILocation(line: 3415, column: 6, scope: !13606)
!13614 = !DILocation(line: 3416, column: 13, scope: !13615)
!13615 = distinct !DILexicalBlock(scope: !13606, file: !3, line: 3416, column: 13)
!13616 = !DILocation(line: 3416, column: 21, scope: !13615)
!13617 = !DILocation(line: 3416, column: 27, scope: !13615)
!13618 = !DILocation(line: 3416, column: 30, scope: !13615)
!13619 = !DILocation(line: 3416, column: 38, scope: !13615)
!13620 = !DILocation(line: 3416, column: 13, scope: !13606)
!13621 = !DILocation(line: 3417, column: 13, scope: !13615)
!13622 = !DILocation(line: 3417, column: 6, scope: !13615)
!13623 = !DILocation(line: 3418, column: 2, scope: !13589)
!13624 = !DILocation(line: 3420, column: 38, scope: !13625)
!13625 = distinct !DILexicalBlock(scope: !13571, file: !3, line: 3420, column: 16)
!13626 = !DILocation(line: 3420, column: 43, scope: !13625)
!13627 = !DILocation(line: 3420, column: 48, scope: !13625)
!13628 = !DILocation(line: 3420, column: 53, scope: !13625)
!13629 = !DILocation(line: 3421, column: 10, scope: !13625)
!13630 = !DILocation(line: 3420, column: 16, scope: !13625)
!13631 = !DILocation(line: 3421, column: 29, scope: !13625)
!13632 = !DILocation(line: 3422, column: 9, scope: !13625)
!13633 = !DILocation(line: 3422, column: 34, scope: !13625)
!13634 = !DILocation(line: 3422, column: 39, scope: !13625)
!13635 = !DILocation(line: 3422, column: 44, scope: !13625)
!13636 = !DILocation(line: 3422, column: 49, scope: !13625)
!13637 = !DILocation(line: 3423, column: 6, scope: !13625)
!13638 = !DILocation(line: 3422, column: 12, scope: !13625)
!13639 = !DILocation(line: 3423, column: 25, scope: !13625)
!13640 = !DILocation(line: 3420, column: 16, scope: !13571)
!13641 = !DILocation(line: 3424, column: 9, scope: !13625)
!13642 = !DILocation(line: 3424, column: 2, scope: !13625)
!13643 = !DILocation(line: 3426, column: 7, scope: !13572)
!13644 = !DILocation(line: 3428, column: 12, scope: !13645)
!13645 = distinct !DILexicalBlock(scope: !13567, file: !3, line: 3428, column: 12)
!13646 = !DILocation(line: 3428, column: 17, scope: !13645)
!13647 = !DILocation(line: 3428, column: 12, scope: !13567)
!13648 = !DILocalVariable(name: "cmp1", scope: !13649, file: !3, line: 3430, type: !1740)
!13649 = distinct !DILexicalBlock(scope: !13645, file: !3, line: 3429, column: 5)
!13650 = !DILocation(line: 3430, column: 11, scope: !13649)
!13651 = !DILocalVariable(name: "cmp2", scope: !13649, file: !3, line: 3430, type: !1740)
!13652 = !DILocation(line: 3430, column: 17, scope: !13649)
!13653 = !DILocation(line: 3437, column: 36, scope: !13649)
!13654 = !DILocation(line: 3437, column: 41, scope: !13649)
!13655 = !DILocation(line: 3437, column: 46, scope: !13649)
!13656 = !DILocation(line: 3437, column: 51, scope: !13649)
!13657 = !DILocation(line: 3437, column: 56, scope: !13649)
!13658 = !DILocation(line: 3437, column: 14, scope: !13649)
!13659 = !DILocation(line: 3437, column: 12, scope: !13649)
!13660 = !DILocation(line: 3438, column: 36, scope: !13649)
!13661 = !DILocation(line: 3438, column: 41, scope: !13649)
!13662 = !DILocation(line: 3438, column: 46, scope: !13649)
!13663 = !DILocation(line: 3438, column: 51, scope: !13649)
!13664 = !DILocation(line: 3438, column: 56, scope: !13649)
!13665 = !DILocation(line: 3438, column: 14, scope: !13649)
!13666 = !DILocation(line: 3438, column: 12, scope: !13649)
!13667 = !DILocation(line: 3439, column: 12, scope: !13668)
!13668 = distinct !DILexicalBlock(scope: !13649, file: !3, line: 3439, column: 11)
!13669 = !DILocation(line: 3439, column: 17, scope: !13668)
!13670 = !DILocation(line: 3439, column: 23, scope: !13668)
!13671 = !DILocation(line: 3439, column: 26, scope: !13668)
!13672 = !DILocation(line: 3439, column: 31, scope: !13668)
!13673 = !DILocation(line: 3439, column: 38, scope: !13668)
!13674 = !DILocation(line: 3439, column: 42, scope: !13668)
!13675 = !DILocation(line: 3439, column: 47, scope: !13668)
!13676 = !DILocation(line: 3439, column: 52, scope: !13668)
!13677 = !DILocation(line: 3439, column: 55, scope: !13668)
!13678 = !DILocation(line: 3439, column: 60, scope: !13668)
!13679 = !DILocation(line: 3439, column: 11, scope: !13649)
!13680 = !DILocation(line: 3440, column: 9, scope: !13668)
!13681 = !DILocation(line: 3440, column: 2, scope: !13668)
!13682 = !DILocation(line: 3444, column: 38, scope: !13683)
!13683 = distinct !DILexicalBlock(scope: !13668, file: !3, line: 3444, column: 16)
!13684 = !DILocation(line: 3444, column: 43, scope: !13683)
!13685 = !DILocation(line: 3444, column: 48, scope: !13683)
!13686 = !DILocation(line: 3444, column: 53, scope: !13683)
!13687 = !DILocation(line: 3445, column: 10, scope: !13683)
!13688 = !DILocation(line: 3444, column: 16, scope: !13683)
!13689 = !DILocation(line: 3445, column: 29, scope: !13683)
!13690 = !DILocation(line: 3446, column: 9, scope: !13683)
!13691 = !DILocation(line: 3446, column: 34, scope: !13683)
!13692 = !DILocation(line: 3446, column: 39, scope: !13683)
!13693 = !DILocation(line: 3446, column: 44, scope: !13683)
!13694 = !DILocation(line: 3446, column: 49, scope: !13683)
!13695 = !DILocation(line: 3447, column: 6, scope: !13683)
!13696 = !DILocation(line: 3446, column: 12, scope: !13683)
!13697 = !DILocation(line: 3447, column: 25, scope: !13683)
!13698 = !DILocation(line: 3448, column: 9, scope: !13683)
!13699 = !DILocation(line: 3448, column: 34, scope: !13683)
!13700 = !DILocation(line: 3448, column: 39, scope: !13683)
!13701 = !DILocation(line: 3448, column: 44, scope: !13683)
!13702 = !DILocation(line: 3448, column: 49, scope: !13683)
!13703 = !DILocation(line: 3449, column: 6, scope: !13683)
!13704 = !DILocation(line: 3448, column: 12, scope: !13683)
!13705 = !DILocation(line: 3449, column: 25, scope: !13683)
!13706 = !DILocation(line: 3450, column: 9, scope: !13683)
!13707 = !DILocation(line: 3450, column: 34, scope: !13683)
!13708 = !DILocation(line: 3450, column: 39, scope: !13683)
!13709 = !DILocation(line: 3450, column: 44, scope: !13683)
!13710 = !DILocation(line: 3450, column: 49, scope: !13683)
!13711 = !DILocation(line: 3451, column: 6, scope: !13683)
!13712 = !DILocation(line: 3450, column: 12, scope: !13683)
!13713 = !DILocation(line: 3451, column: 25, scope: !13683)
!13714 = !DILocation(line: 3444, column: 16, scope: !13668)
!13715 = !DILocation(line: 3452, column: 9, scope: !13683)
!13716 = !DILocation(line: 3452, column: 2, scope: !13683)
!13717 = !DILocation(line: 3456, column: 2, scope: !13683)
!13718 = !DILocation(line: 3458, column: 12, scope: !13719)
!13719 = distinct !DILexicalBlock(scope: !13645, file: !3, line: 3458, column: 12)
!13720 = !DILocation(line: 3458, column: 17, scope: !13719)
!13721 = !DILocation(line: 3458, column: 28, scope: !13719)
!13722 = !DILocation(line: 3458, column: 31, scope: !13719)
!13723 = !DILocation(line: 3458, column: 36, scope: !13719)
!13724 = !DILocation(line: 3458, column: 12, scope: !13645)
!13725 = !DILocalVariable(name: "tst", scope: !13726, file: !3, line: 3460, type: !1740)
!13726 = distinct !DILexicalBlock(scope: !13719, file: !3, line: 3459, column: 5)
!13727 = !DILocation(line: 3460, column: 11, scope: !13726)
!13728 = !DILocation(line: 3463, column: 35, scope: !13726)
!13729 = !DILocation(line: 3463, column: 40, scope: !13726)
!13730 = !DILocation(line: 3463, column: 45, scope: !13726)
!13731 = !DILocation(line: 3463, column: 50, scope: !13726)
!13732 = !DILocation(line: 3463, column: 55, scope: !13726)
!13733 = !DILocation(line: 3463, column: 13, scope: !13726)
!13734 = !DILocation(line: 3463, column: 11, scope: !13726)
!13735 = !DILocation(line: 3464, column: 12, scope: !13736)
!13736 = distinct !DILexicalBlock(scope: !13726, file: !3, line: 3464, column: 11)
!13737 = !DILocation(line: 3464, column: 17, scope: !13736)
!13738 = !DILocation(line: 3464, column: 28, scope: !13736)
!13739 = !DILocation(line: 3464, column: 31, scope: !13736)
!13740 = !DILocation(line: 3464, column: 35, scope: !13736)
!13741 = !DILocation(line: 3465, column: 4, scope: !13736)
!13742 = !DILocation(line: 3465, column: 8, scope: !13736)
!13743 = !DILocation(line: 3465, column: 13, scope: !13736)
!13744 = !DILocation(line: 3465, column: 24, scope: !13736)
!13745 = !DILocation(line: 3465, column: 28, scope: !13736)
!13746 = !DILocation(line: 3465, column: 32, scope: !13736)
!13747 = !DILocation(line: 3465, column: 38, scope: !13736)
!13748 = !DILocation(line: 3465, column: 41, scope: !13736)
!13749 = !DILocation(line: 3465, column: 45, scope: !13736)
!13750 = !DILocation(line: 3464, column: 11, scope: !13726)
!13751 = !DILocation(line: 3467, column: 35, scope: !13752)
!13752 = distinct !DILexicalBlock(scope: !13753, file: !3, line: 3467, column: 8)
!13753 = distinct !DILexicalBlock(scope: !13736, file: !3, line: 3466, column: 2)
!13754 = !DILocation(line: 3467, column: 8, scope: !13752)
!13755 = !DILocation(line: 3468, column: 8, scope: !13752)
!13756 = !DILocation(line: 3468, column: 38, scope: !13752)
!13757 = !DILocation(line: 3468, column: 11, scope: !13752)
!13758 = !DILocation(line: 3467, column: 8, scope: !13753)
!13759 = !DILocation(line: 3469, column: 7, scope: !13752)
!13760 = !DILocation(line: 3469, column: 25, scope: !13752)
!13761 = !DILocation(line: 3469, column: 6, scope: !13752)
!13762 = !DILocation(line: 3470, column: 11, scope: !13753)
!13763 = !DILocation(line: 3470, column: 4, scope: !13753)
!13764 = !DILocation(line: 3474, column: 35, scope: !13726)
!13765 = !DILocation(line: 3474, column: 40, scope: !13726)
!13766 = !DILocation(line: 3474, column: 45, scope: !13726)
!13767 = !DILocation(line: 3474, column: 50, scope: !13726)
!13768 = !DILocation(line: 3474, column: 55, scope: !13726)
!13769 = !DILocation(line: 3474, column: 13, scope: !13726)
!13770 = !DILocation(line: 3474, column: 11, scope: !13726)
!13771 = !DILocation(line: 3475, column: 12, scope: !13772)
!13772 = distinct !DILexicalBlock(scope: !13726, file: !3, line: 3475, column: 11)
!13773 = !DILocation(line: 3475, column: 17, scope: !13772)
!13774 = !DILocation(line: 3475, column: 28, scope: !13772)
!13775 = !DILocation(line: 3475, column: 32, scope: !13772)
!13776 = !DILocation(line: 3475, column: 36, scope: !13772)
!13777 = !DILocation(line: 3475, column: 41, scope: !13772)
!13778 = !DILocation(line: 3475, column: 44, scope: !13772)
!13779 = !DILocation(line: 3475, column: 48, scope: !13772)
!13780 = !DILocation(line: 3476, column: 4, scope: !13772)
!13781 = !DILocation(line: 3476, column: 8, scope: !13772)
!13782 = !DILocation(line: 3476, column: 13, scope: !13772)
!13783 = !DILocation(line: 3476, column: 24, scope: !13772)
!13784 = !DILocation(line: 3476, column: 27, scope: !13772)
!13785 = !DILocation(line: 3476, column: 31, scope: !13772)
!13786 = !DILocation(line: 3475, column: 11, scope: !13726)
!13787 = !DILocation(line: 3478, column: 35, scope: !13788)
!13788 = distinct !DILexicalBlock(scope: !13789, file: !3, line: 3478, column: 8)
!13789 = distinct !DILexicalBlock(scope: !13772, file: !3, line: 3477, column: 2)
!13790 = !DILocation(line: 3478, column: 8, scope: !13788)
!13791 = !DILocation(line: 3479, column: 8, scope: !13788)
!13792 = !DILocation(line: 3479, column: 38, scope: !13788)
!13793 = !DILocation(line: 3479, column: 11, scope: !13788)
!13794 = !DILocation(line: 3478, column: 8, scope: !13789)
!13795 = !DILocation(line: 3480, column: 7, scope: !13788)
!13796 = !DILocation(line: 3480, column: 25, scope: !13788)
!13797 = !DILocation(line: 3480, column: 6, scope: !13788)
!13798 = !DILocation(line: 3481, column: 11, scope: !13789)
!13799 = !DILocation(line: 3481, column: 4, scope: !13789)
!13800 = !DILocation(line: 3485, column: 7, scope: !13726)
!13801 = !DILocation(line: 3488, column: 3, scope: !13433)
!13802 = !DILocation(line: 3490, column: 5, scope: !13433)
!13803 = !DILocation(line: 3492, column: 1, scope: !13433)
!13804 = distinct !DISubprogram(name: "compare_range_with_value", scope: !3, file: !3, line: 3504, type: !13805, scopeLine: 3506, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!13805 = !DISubroutineType(types: !13806)
!13806 = !{!1747, !134, !1741, !1747, !3130}
!13807 = !DILocalVariable(name: "comp", arg: 1, scope: !13804, file: !3, line: 3504, type: !134)
!13808 = !DILocation(line: 3504, column: 42, scope: !13804)
!13809 = !DILocalVariable(name: "vr", arg: 2, scope: !13804, file: !3, line: 3504, type: !1741)
!13810 = !DILocation(line: 3504, column: 63, scope: !13804)
!13811 = !DILocalVariable(name: "val", arg: 3, scope: !13804, file: !3, line: 3504, type: !1747)
!13812 = !DILocation(line: 3504, column: 72, scope: !13804)
!13813 = !DILocalVariable(name: "strict_overflow_p", arg: 4, scope: !13804, file: !3, line: 3505, type: !3130)
!13814 = !DILocation(line: 3505, column: 12, scope: !13804)
!13815 = !DILocation(line: 3507, column: 7, scope: !13816)
!13816 = distinct !DILexicalBlock(scope: !13804, file: !3, line: 3507, column: 7)
!13817 = !DILocation(line: 3507, column: 11, scope: !13816)
!13818 = !DILocation(line: 3507, column: 16, scope: !13816)
!13819 = !DILocation(line: 3507, column: 30, scope: !13816)
!13820 = !DILocation(line: 3507, column: 33, scope: !13816)
!13821 = !DILocation(line: 3507, column: 37, scope: !13816)
!13822 = !DILocation(line: 3507, column: 42, scope: !13816)
!13823 = !DILocation(line: 3507, column: 7, scope: !13804)
!13824 = !DILocation(line: 3508, column: 5, scope: !13816)
!13825 = !DILocation(line: 3511, column: 7, scope: !13826)
!13826 = distinct !DILexicalBlock(scope: !13804, file: !3, line: 3511, column: 7)
!13827 = !DILocation(line: 3511, column: 11, scope: !13826)
!13828 = !DILocation(line: 3511, column: 16, scope: !13826)
!13829 = !DILocation(line: 3511, column: 7, scope: !13804)
!13830 = !DILocation(line: 3515, column: 11, scope: !13831)
!13831 = distinct !DILexicalBlock(scope: !13832, file: !3, line: 3515, column: 11)
!13832 = distinct !DILexicalBlock(scope: !13826, file: !3, line: 3512, column: 5)
!13833 = !DILocation(line: 3515, column: 16, scope: !13831)
!13834 = !DILocation(line: 3516, column: 4, scope: !13831)
!13835 = !DILocation(line: 3516, column: 7, scope: !13831)
!13836 = !DILocation(line: 3516, column: 12, scope: !13831)
!13837 = !DILocation(line: 3517, column: 4, scope: !13831)
!13838 = !DILocation(line: 3517, column: 7, scope: !13831)
!13839 = !DILocation(line: 3517, column: 12, scope: !13831)
!13840 = !DILocation(line: 3518, column: 4, scope: !13831)
!13841 = !DILocation(line: 3518, column: 7, scope: !13831)
!13842 = !DILocation(line: 3518, column: 12, scope: !13831)
!13843 = !DILocation(line: 3515, column: 11, scope: !13832)
!13844 = !DILocation(line: 3519, column: 2, scope: !13831)
!13845 = !DILocation(line: 3522, column: 31, scope: !13846)
!13846 = distinct !DILexicalBlock(scope: !13832, file: !3, line: 3522, column: 11)
!13847 = !DILocation(line: 3522, column: 36, scope: !13846)
!13848 = !DILocation(line: 3522, column: 11, scope: !13846)
!13849 = !DILocation(line: 3522, column: 40, scope: !13846)
!13850 = !DILocation(line: 3522, column: 11, scope: !13832)
!13851 = !DILocation(line: 3523, column: 10, scope: !13846)
!13852 = !DILocation(line: 3523, column: 15, scope: !13846)
!13853 = !DILocation(line: 3523, column: 9, scope: !13846)
!13854 = !DILocation(line: 3523, column: 29, scope: !13846)
!13855 = !DILocation(line: 3523, column: 49, scope: !13846)
!13856 = !DILocation(line: 3523, column: 2, scope: !13846)
!13857 = !DILocation(line: 3525, column: 7, scope: !13832)
!13858 = !DILocation(line: 3528, column: 24, scope: !13859)
!13859 = distinct !DILexicalBlock(scope: !13804, file: !3, line: 3528, column: 7)
!13860 = !DILocation(line: 3528, column: 28, scope: !13859)
!13861 = !DILocation(line: 3528, column: 8, scope: !13859)
!13862 = !DILocation(line: 3528, column: 7, scope: !13804)
!13863 = !DILocation(line: 3529, column: 5, scope: !13859)
!13864 = !DILocation(line: 3531, column: 7, scope: !13865)
!13865 = distinct !DILexicalBlock(scope: !13804, file: !3, line: 3531, column: 7)
!13866 = !DILocation(line: 3531, column: 12, scope: !13865)
!13867 = !DILocation(line: 3531, column: 7, scope: !13804)
!13868 = !DILocation(line: 3535, column: 33, scope: !13869)
!13869 = distinct !DILexicalBlock(scope: !13870, file: !3, line: 3535, column: 11)
!13870 = distinct !DILexicalBlock(scope: !13865, file: !3, line: 3532, column: 5)
!13871 = !DILocation(line: 3535, column: 37, scope: !13869)
!13872 = !DILocation(line: 3535, column: 42, scope: !13869)
!13873 = !DILocation(line: 3535, column: 46, scope: !13869)
!13874 = !DILocation(line: 3535, column: 51, scope: !13869)
!13875 = !DILocation(line: 3535, column: 11, scope: !13869)
!13876 = !DILocation(line: 3535, column: 70, scope: !13869)
!13877 = !DILocation(line: 3535, column: 11, scope: !13870)
!13878 = !DILocalVariable(name: "cmp", scope: !13879, file: !3, line: 3537, type: !1740)
!13879 = distinct !DILexicalBlock(scope: !13869, file: !3, line: 3536, column: 2)
!13880 = !DILocation(line: 3537, column: 8, scope: !13879)
!13881 = !DILocation(line: 3537, column: 36, scope: !13879)
!13882 = !DILocation(line: 3537, column: 40, scope: !13879)
!13883 = !DILocation(line: 3537, column: 45, scope: !13879)
!13884 = !DILocation(line: 3537, column: 50, scope: !13879)
!13885 = !DILocation(line: 3537, column: 14, scope: !13879)
!13886 = !DILocation(line: 3538, column: 8, scope: !13887)
!13887 = distinct !DILexicalBlock(scope: !13879, file: !3, line: 3538, column: 8)
!13888 = !DILocation(line: 3538, column: 12, scope: !13887)
!13889 = !DILocation(line: 3538, column: 8, scope: !13879)
!13890 = !DILocation(line: 3539, column: 13, scope: !13887)
!13891 = !DILocation(line: 3539, column: 6, scope: !13887)
!13892 = !DILocation(line: 3540, column: 13, scope: !13893)
!13893 = distinct !DILexicalBlock(scope: !13887, file: !3, line: 3540, column: 13)
!13894 = !DILocation(line: 3540, column: 17, scope: !13893)
!13895 = !DILocation(line: 3540, column: 23, scope: !13893)
!13896 = !DILocation(line: 3540, column: 26, scope: !13893)
!13897 = !DILocation(line: 3540, column: 30, scope: !13893)
!13898 = !DILocation(line: 3540, column: 35, scope: !13893)
!13899 = !DILocation(line: 3540, column: 38, scope: !13893)
!13900 = !DILocation(line: 3540, column: 42, scope: !13893)
!13901 = !DILocation(line: 3540, column: 13, scope: !13887)
!13902 = !DILocation(line: 3541, column: 13, scope: !13893)
!13903 = !DILocation(line: 3541, column: 6, scope: !13893)
!13904 = !DILocation(line: 3542, column: 2, scope: !13879)
!13905 = !DILocation(line: 3543, column: 38, scope: !13906)
!13906 = distinct !DILexicalBlock(scope: !13869, file: !3, line: 3543, column: 16)
!13907 = !DILocation(line: 3543, column: 43, scope: !13906)
!13908 = !DILocation(line: 3543, column: 47, scope: !13906)
!13909 = !DILocation(line: 3543, column: 52, scope: !13906)
!13910 = !DILocation(line: 3543, column: 16, scope: !13906)
!13911 = !DILocation(line: 3543, column: 71, scope: !13906)
!13912 = !DILocation(line: 3544, column: 9, scope: !13906)
!13913 = !DILocation(line: 3544, column: 34, scope: !13906)
!13914 = !DILocation(line: 3544, column: 38, scope: !13906)
!13915 = !DILocation(line: 3544, column: 43, scope: !13906)
!13916 = !DILocation(line: 3544, column: 48, scope: !13906)
!13917 = !DILocation(line: 3544, column: 12, scope: !13906)
!13918 = !DILocation(line: 3544, column: 67, scope: !13906)
!13919 = !DILocation(line: 3543, column: 16, scope: !13869)
!13920 = !DILocation(line: 3545, column: 9, scope: !13906)
!13921 = !DILocation(line: 3545, column: 2, scope: !13906)
!13922 = !DILocation(line: 3547, column: 7, scope: !13870)
!13923 = !DILocation(line: 3549, column: 12, scope: !13924)
!13924 = distinct !DILexicalBlock(scope: !13865, file: !3, line: 3549, column: 12)
!13925 = !DILocation(line: 3549, column: 17, scope: !13924)
!13926 = !DILocation(line: 3549, column: 12, scope: !13865)
!13927 = !DILocation(line: 3552, column: 33, scope: !13928)
!13928 = distinct !DILexicalBlock(scope: !13929, file: !3, line: 3552, column: 11)
!13929 = distinct !DILexicalBlock(scope: !13924, file: !3, line: 3550, column: 5)
!13930 = !DILocation(line: 3552, column: 37, scope: !13928)
!13931 = !DILocation(line: 3552, column: 42, scope: !13928)
!13932 = !DILocation(line: 3552, column: 47, scope: !13928)
!13933 = !DILocation(line: 3552, column: 11, scope: !13928)
!13934 = !DILocation(line: 3552, column: 66, scope: !13928)
!13935 = !DILocation(line: 3553, column: 4, scope: !13928)
!13936 = !DILocation(line: 3553, column: 29, scope: !13928)
!13937 = !DILocation(line: 3553, column: 33, scope: !13928)
!13938 = !DILocation(line: 3553, column: 38, scope: !13928)
!13939 = !DILocation(line: 3553, column: 43, scope: !13928)
!13940 = !DILocation(line: 3553, column: 7, scope: !13928)
!13941 = !DILocation(line: 3553, column: 62, scope: !13928)
!13942 = !DILocation(line: 3552, column: 11, scope: !13929)
!13943 = !DILocation(line: 3554, column: 9, scope: !13928)
!13944 = !DILocation(line: 3554, column: 2, scope: !13928)
!13945 = !DILocation(line: 3558, column: 33, scope: !13946)
!13946 = distinct !DILexicalBlock(scope: !13929, file: !3, line: 3558, column: 11)
!13947 = !DILocation(line: 3558, column: 37, scope: !13946)
!13948 = !DILocation(line: 3558, column: 42, scope: !13946)
!13949 = !DILocation(line: 3558, column: 46, scope: !13946)
!13950 = !DILocation(line: 3558, column: 51, scope: !13946)
!13951 = !DILocation(line: 3558, column: 11, scope: !13946)
!13952 = !DILocation(line: 3558, column: 70, scope: !13946)
!13953 = !DILocation(line: 3559, column: 4, scope: !13946)
!13954 = !DILocation(line: 3559, column: 29, scope: !13946)
!13955 = !DILocation(line: 3559, column: 33, scope: !13946)
!13956 = !DILocation(line: 3559, column: 38, scope: !13946)
!13957 = !DILocation(line: 3559, column: 43, scope: !13946)
!13958 = !DILocation(line: 3559, column: 7, scope: !13946)
!13959 = !DILocation(line: 3559, column: 62, scope: !13946)
!13960 = !DILocation(line: 3558, column: 11, scope: !13929)
!13961 = !DILocation(line: 3560, column: 9, scope: !13946)
!13962 = !DILocation(line: 3560, column: 2, scope: !13946)
!13963 = !DILocation(line: 3563, column: 7, scope: !13929)
!13964 = !DILocation(line: 3565, column: 12, scope: !13965)
!13965 = distinct !DILexicalBlock(scope: !13924, file: !3, line: 3565, column: 12)
!13966 = !DILocation(line: 3565, column: 17, scope: !13965)
!13967 = !DILocation(line: 3565, column: 28, scope: !13965)
!13968 = !DILocation(line: 3565, column: 31, scope: !13965)
!13969 = !DILocation(line: 3565, column: 36, scope: !13965)
!13970 = !DILocation(line: 3565, column: 12, scope: !13924)
!13971 = !DILocalVariable(name: "tst", scope: !13972, file: !3, line: 3567, type: !1740)
!13972 = distinct !DILexicalBlock(scope: !13965, file: !3, line: 3566, column: 5)
!13973 = !DILocation(line: 3567, column: 11, scope: !13972)
!13974 = !DILocation(line: 3570, column: 35, scope: !13972)
!13975 = !DILocation(line: 3570, column: 39, scope: !13972)
!13976 = !DILocation(line: 3570, column: 44, scope: !13972)
!13977 = !DILocation(line: 3570, column: 49, scope: !13972)
!13978 = !DILocation(line: 3570, column: 13, scope: !13972)
!13979 = !DILocation(line: 3570, column: 11, scope: !13972)
!13980 = !DILocation(line: 3571, column: 12, scope: !13981)
!13981 = distinct !DILexicalBlock(scope: !13972, file: !3, line: 3571, column: 11)
!13982 = !DILocation(line: 3571, column: 17, scope: !13981)
!13983 = !DILocation(line: 3571, column: 28, scope: !13981)
!13984 = !DILocation(line: 3571, column: 31, scope: !13981)
!13985 = !DILocation(line: 3571, column: 35, scope: !13981)
!13986 = !DILocation(line: 3572, column: 4, scope: !13981)
!13987 = !DILocation(line: 3572, column: 8, scope: !13981)
!13988 = !DILocation(line: 3572, column: 13, scope: !13981)
!13989 = !DILocation(line: 3572, column: 24, scope: !13981)
!13990 = !DILocation(line: 3572, column: 28, scope: !13981)
!13991 = !DILocation(line: 3572, column: 32, scope: !13981)
!13992 = !DILocation(line: 3572, column: 38, scope: !13981)
!13993 = !DILocation(line: 3572, column: 41, scope: !13981)
!13994 = !DILocation(line: 3572, column: 45, scope: !13981)
!13995 = !DILocation(line: 3571, column: 11, scope: !13972)
!13996 = !DILocation(line: 3574, column: 35, scope: !13997)
!13997 = distinct !DILexicalBlock(scope: !13998, file: !3, line: 3574, column: 8)
!13998 = distinct !DILexicalBlock(scope: !13981, file: !3, line: 3573, column: 2)
!13999 = !DILocation(line: 3574, column: 8, scope: !13997)
!14000 = !DILocation(line: 3574, column: 8, scope: !13998)
!14001 = !DILocation(line: 3575, column: 7, scope: !13997)
!14002 = !DILocation(line: 3575, column: 25, scope: !13997)
!14003 = !DILocation(line: 3575, column: 6, scope: !13997)
!14004 = !DILocation(line: 3576, column: 11, scope: !13998)
!14005 = !DILocation(line: 3576, column: 4, scope: !13998)
!14006 = !DILocation(line: 3580, column: 35, scope: !13972)
!14007 = !DILocation(line: 3580, column: 39, scope: !13972)
!14008 = !DILocation(line: 3580, column: 44, scope: !13972)
!14009 = !DILocation(line: 3580, column: 49, scope: !13972)
!14010 = !DILocation(line: 3580, column: 13, scope: !13972)
!14011 = !DILocation(line: 3580, column: 11, scope: !13972)
!14012 = !DILocation(line: 3581, column: 12, scope: !14013)
!14013 = distinct !DILexicalBlock(scope: !13972, file: !3, line: 3581, column: 11)
!14014 = !DILocation(line: 3581, column: 17, scope: !14013)
!14015 = !DILocation(line: 3581, column: 28, scope: !14013)
!14016 = !DILocation(line: 3581, column: 32, scope: !14013)
!14017 = !DILocation(line: 3581, column: 36, scope: !14013)
!14018 = !DILocation(line: 3581, column: 41, scope: !14013)
!14019 = !DILocation(line: 3581, column: 44, scope: !14013)
!14020 = !DILocation(line: 3581, column: 48, scope: !14013)
!14021 = !DILocation(line: 3582, column: 4, scope: !14013)
!14022 = !DILocation(line: 3582, column: 8, scope: !14013)
!14023 = !DILocation(line: 3582, column: 13, scope: !14013)
!14024 = !DILocation(line: 3582, column: 24, scope: !14013)
!14025 = !DILocation(line: 3582, column: 27, scope: !14013)
!14026 = !DILocation(line: 3582, column: 31, scope: !14013)
!14027 = !DILocation(line: 3581, column: 11, scope: !13972)
!14028 = !DILocation(line: 3584, column: 35, scope: !14029)
!14029 = distinct !DILexicalBlock(scope: !14030, file: !3, line: 3584, column: 8)
!14030 = distinct !DILexicalBlock(scope: !14013, file: !3, line: 3583, column: 2)
!14031 = !DILocation(line: 3584, column: 8, scope: !14029)
!14032 = !DILocation(line: 3584, column: 8, scope: !14030)
!14033 = !DILocation(line: 3585, column: 7, scope: !14029)
!14034 = !DILocation(line: 3585, column: 25, scope: !14029)
!14035 = !DILocation(line: 3585, column: 6, scope: !14029)
!14036 = !DILocation(line: 3586, column: 11, scope: !14030)
!14037 = !DILocation(line: 3586, column: 4, scope: !14030)
!14038 = !DILocation(line: 3590, column: 7, scope: !13972)
!14039 = !DILocation(line: 3592, column: 12, scope: !14040)
!14040 = distinct !DILexicalBlock(scope: !13965, file: !3, line: 3592, column: 12)
!14041 = !DILocation(line: 3592, column: 17, scope: !14040)
!14042 = !DILocation(line: 3592, column: 28, scope: !14040)
!14043 = !DILocation(line: 3592, column: 31, scope: !14040)
!14044 = !DILocation(line: 3592, column: 36, scope: !14040)
!14045 = !DILocation(line: 3592, column: 12, scope: !13965)
!14046 = !DILocalVariable(name: "tst", scope: !14047, file: !3, line: 3594, type: !1740)
!14047 = distinct !DILexicalBlock(scope: !14040, file: !3, line: 3593, column: 5)
!14048 = !DILocation(line: 3594, column: 11, scope: !14047)
!14049 = !DILocation(line: 3597, column: 35, scope: !14047)
!14050 = !DILocation(line: 3597, column: 39, scope: !14047)
!14051 = !DILocation(line: 3597, column: 44, scope: !14047)
!14052 = !DILocation(line: 3597, column: 49, scope: !14047)
!14053 = !DILocation(line: 3597, column: 13, scope: !14047)
!14054 = !DILocation(line: 3597, column: 11, scope: !14047)
!14055 = !DILocation(line: 3598, column: 12, scope: !14056)
!14056 = distinct !DILexicalBlock(scope: !14047, file: !3, line: 3598, column: 11)
!14057 = !DILocation(line: 3598, column: 17, scope: !14056)
!14058 = !DILocation(line: 3598, column: 28, scope: !14056)
!14059 = !DILocation(line: 3598, column: 31, scope: !14056)
!14060 = !DILocation(line: 3598, column: 35, scope: !14056)
!14061 = !DILocation(line: 3599, column: 4, scope: !14056)
!14062 = !DILocation(line: 3599, column: 8, scope: !14056)
!14063 = !DILocation(line: 3599, column: 13, scope: !14056)
!14064 = !DILocation(line: 3599, column: 24, scope: !14056)
!14065 = !DILocation(line: 3599, column: 28, scope: !14056)
!14066 = !DILocation(line: 3599, column: 32, scope: !14056)
!14067 = !DILocation(line: 3599, column: 37, scope: !14056)
!14068 = !DILocation(line: 3599, column: 40, scope: !14056)
!14069 = !DILocation(line: 3599, column: 44, scope: !14056)
!14070 = !DILocation(line: 3598, column: 11, scope: !14047)
!14071 = !DILocation(line: 3601, column: 35, scope: !14072)
!14072 = distinct !DILexicalBlock(scope: !14073, file: !3, line: 3601, column: 8)
!14073 = distinct !DILexicalBlock(scope: !14056, file: !3, line: 3600, column: 2)
!14074 = !DILocation(line: 3601, column: 8, scope: !14072)
!14075 = !DILocation(line: 3601, column: 8, scope: !14073)
!14076 = !DILocation(line: 3602, column: 7, scope: !14072)
!14077 = !DILocation(line: 3602, column: 25, scope: !14072)
!14078 = !DILocation(line: 3602, column: 6, scope: !14072)
!14079 = !DILocation(line: 3603, column: 11, scope: !14073)
!14080 = !DILocation(line: 3603, column: 4, scope: !14073)
!14081 = !DILocation(line: 3607, column: 35, scope: !14047)
!14082 = !DILocation(line: 3607, column: 39, scope: !14047)
!14083 = !DILocation(line: 3607, column: 44, scope: !14047)
!14084 = !DILocation(line: 3607, column: 49, scope: !14047)
!14085 = !DILocation(line: 3607, column: 13, scope: !14047)
!14086 = !DILocation(line: 3607, column: 11, scope: !14047)
!14087 = !DILocation(line: 3608, column: 12, scope: !14088)
!14088 = distinct !DILexicalBlock(scope: !14047, file: !3, line: 3608, column: 11)
!14089 = !DILocation(line: 3608, column: 17, scope: !14088)
!14090 = !DILocation(line: 3608, column: 28, scope: !14088)
!14091 = !DILocation(line: 3608, column: 32, scope: !14088)
!14092 = !DILocation(line: 3608, column: 36, scope: !14088)
!14093 = !DILocation(line: 3608, column: 42, scope: !14088)
!14094 = !DILocation(line: 3608, column: 45, scope: !14088)
!14095 = !DILocation(line: 3608, column: 49, scope: !14088)
!14096 = !DILocation(line: 3609, column: 4, scope: !14088)
!14097 = !DILocation(line: 3609, column: 8, scope: !14088)
!14098 = !DILocation(line: 3609, column: 13, scope: !14088)
!14099 = !DILocation(line: 3609, column: 24, scope: !14088)
!14100 = !DILocation(line: 3609, column: 27, scope: !14088)
!14101 = !DILocation(line: 3609, column: 31, scope: !14088)
!14102 = !DILocation(line: 3608, column: 11, scope: !14047)
!14103 = !DILocation(line: 3611, column: 35, scope: !14104)
!14104 = distinct !DILexicalBlock(scope: !14105, file: !3, line: 3611, column: 8)
!14105 = distinct !DILexicalBlock(scope: !14088, file: !3, line: 3610, column: 2)
!14106 = !DILocation(line: 3611, column: 8, scope: !14104)
!14107 = !DILocation(line: 3611, column: 8, scope: !14105)
!14108 = !DILocation(line: 3612, column: 7, scope: !14104)
!14109 = !DILocation(line: 3612, column: 25, scope: !14104)
!14110 = !DILocation(line: 3612, column: 6, scope: !14104)
!14111 = !DILocation(line: 3613, column: 11, scope: !14105)
!14112 = !DILocation(line: 3613, column: 4, scope: !14105)
!14113 = !DILocation(line: 3617, column: 7, scope: !14047)
!14114 = !DILocation(line: 3620, column: 3, scope: !13804)
!14115 = !DILocation(line: 3622, column: 5, scope: !13804)
!14116 = !DILocation(line: 3624, column: 1, scope: !13804)
!14117 = distinct !DISubprogram(name: "usable_range_p", scope: !3, file: !3, line: 794, type: !14118, scopeLine: 795, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14118 = !DISubroutineType(types: !14119)
!14119 = !{!1866, !1741, !3130}
!14120 = !DILocalVariable(name: "vr", arg: 1, scope: !14117, file: !3, line: 794, type: !1741)
!14121 = !DILocation(line: 794, column: 32, scope: !14117)
!14122 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !14117, file: !3, line: 794, type: !3130)
!14123 = !DILocation(line: 794, column: 42, scope: !14117)
!14124 = !DILocation(line: 796, column: 3, scope: !14117)
!14125 = !DILocation(line: 797, column: 29, scope: !14126)
!14126 = distinct !DILexicalBlock(scope: !14117, file: !3, line: 797, column: 7)
!14127 = !DILocation(line: 797, column: 33, scope: !14126)
!14128 = !DILocation(line: 797, column: 7, scope: !14126)
!14129 = !DILocation(line: 797, column: 7, scope: !14117)
!14130 = !DILocation(line: 799, column: 8, scope: !14131)
!14131 = distinct !DILexicalBlock(scope: !14126, file: !3, line: 798, column: 5)
!14132 = !DILocation(line: 799, column: 26, scope: !14131)
!14133 = !DILocation(line: 800, column: 12, scope: !14134)
!14134 = distinct !DILexicalBlock(scope: !14131, file: !3, line: 800, column: 11)
!14135 = !DILocation(line: 800, column: 11, scope: !14131)
!14136 = !DILocation(line: 801, column: 2, scope: !14134)
!14137 = !DILocation(line: 802, column: 5, scope: !14131)
!14138 = !DILocation(line: 803, column: 29, scope: !14139)
!14139 = distinct !DILexicalBlock(scope: !14117, file: !3, line: 803, column: 7)
!14140 = !DILocation(line: 803, column: 33, scope: !14139)
!14141 = !DILocation(line: 803, column: 7, scope: !14139)
!14142 = !DILocation(line: 803, column: 7, scope: !14117)
!14143 = !DILocation(line: 805, column: 8, scope: !14144)
!14144 = distinct !DILexicalBlock(scope: !14139, file: !3, line: 804, column: 5)
!14145 = !DILocation(line: 805, column: 26, scope: !14144)
!14146 = !DILocation(line: 806, column: 12, scope: !14147)
!14147 = distinct !DILexicalBlock(scope: !14144, file: !3, line: 806, column: 11)
!14148 = !DILocation(line: 806, column: 11, scope: !14144)
!14149 = !DILocation(line: 807, column: 2, scope: !14147)
!14150 = !DILocation(line: 808, column: 5, scope: !14144)
!14151 = !DILocation(line: 809, column: 3, scope: !14117)
!14152 = !DILocation(line: 810, column: 1, scope: !14117)
!14153 = distinct !DISubprogram(name: "get_vr_for_comparison", scope: !3, file: !3, line: 5417, type: !14154, scopeLine: 5418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14154 = !DISubroutineType(types: !14155)
!14155 = !{!1742, !1740}
!14156 = !DILocalVariable(name: "i", arg: 1, scope: !14153, file: !3, line: 5417, type: !1740)
!14157 = !DILocation(line: 5417, column: 28, scope: !14153)
!14158 = !DILocalVariable(name: "vr", scope: !14153, file: !3, line: 5419, type: !1742)
!14159 = !DILocation(line: 5419, column: 17, scope: !14153)
!14160 = !DILocation(line: 5419, column: 24, scope: !14153)
!14161 = !DILocation(line: 5419, column: 33, scope: !14153)
!14162 = !DILocation(line: 5419, column: 22, scope: !14153)
!14163 = !DILocation(line: 5424, column: 10, scope: !14164)
!14164 = distinct !DILexicalBlock(scope: !14153, file: !3, line: 5424, column: 7)
!14165 = !DILocation(line: 5424, column: 15, scope: !14164)
!14166 = !DILocation(line: 5424, column: 29, scope: !14164)
!14167 = !DILocation(line: 5424, column: 35, scope: !14164)
!14168 = !DILocation(line: 5424, column: 40, scope: !14164)
!14169 = !DILocation(line: 5424, column: 7, scope: !14153)
!14170 = !DILocation(line: 5426, column: 10, scope: !14171)
!14171 = distinct !DILexicalBlock(scope: !14164, file: !3, line: 5425, column: 5)
!14172 = !DILocation(line: 5426, column: 15, scope: !14171)
!14173 = !DILocation(line: 5427, column: 16, scope: !14171)
!14174 = !DILocation(line: 5427, column: 10, scope: !14171)
!14175 = !DILocation(line: 5427, column: 14, scope: !14171)
!14176 = !DILocation(line: 5428, column: 16, scope: !14171)
!14177 = !DILocation(line: 5428, column: 10, scope: !14171)
!14178 = !DILocation(line: 5428, column: 14, scope: !14171)
!14179 = !DILocation(line: 5429, column: 5, scope: !14171)
!14180 = !DILocation(line: 5431, column: 3, scope: !14153)
!14181 = distinct !DISubprogram(name: "vrp_operand_equal_p", scope: !3, file: !3, line: 675, type: !14182, scopeLine: 676, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14182 = !DISubroutineType(types: !14183)
!14183 = !{!1866, !3139, !3139}
!14184 = !DILocalVariable(name: "val1", arg: 1, scope: !14181, file: !3, line: 675, type: !3139)
!14185 = !DILocation(line: 675, column: 33, scope: !14181)
!14186 = !DILocalVariable(name: "val2", arg: 2, scope: !14181, file: !3, line: 675, type: !3139)
!14187 = !DILocation(line: 675, column: 50, scope: !14181)
!14188 = !DILocation(line: 677, column: 7, scope: !14189)
!14189 = distinct !DILexicalBlock(scope: !14181, file: !3, line: 677, column: 7)
!14190 = !DILocation(line: 677, column: 15, scope: !14189)
!14191 = !DILocation(line: 677, column: 12, scope: !14189)
!14192 = !DILocation(line: 677, column: 7, scope: !14181)
!14193 = !DILocation(line: 678, column: 5, scope: !14189)
!14194 = !DILocation(line: 679, column: 8, scope: !14195)
!14195 = distinct !DILexicalBlock(scope: !14181, file: !3, line: 679, column: 7)
!14196 = !DILocation(line: 679, column: 13, scope: !14195)
!14197 = !DILocation(line: 679, column: 17, scope: !14195)
!14198 = !DILocation(line: 679, column: 22, scope: !14195)
!14199 = !DILocation(line: 679, column: 43, scope: !14195)
!14200 = !DILocation(line: 679, column: 49, scope: !14195)
!14201 = !DILocation(line: 679, column: 26, scope: !14195)
!14202 = !DILocation(line: 679, column: 7, scope: !14181)
!14203 = !DILocation(line: 680, column: 5, scope: !14195)
!14204 = !DILocation(line: 681, column: 29, scope: !14205)
!14205 = distinct !DILexicalBlock(scope: !14181, file: !3, line: 681, column: 7)
!14206 = !DILocation(line: 681, column: 7, scope: !14205)
!14207 = !DILocation(line: 681, column: 7, scope: !14181)
!14208 = !DILocation(line: 682, column: 34, scope: !14205)
!14209 = !DILocation(line: 682, column: 12, scope: !14205)
!14210 = !DILocation(line: 682, column: 5, scope: !14205)
!14211 = !DILocation(line: 683, column: 3, scope: !14181)
!14212 = !DILocation(line: 684, column: 1, scope: !14181)
!14213 = distinct !DISubprogram(name: "vrp_bitmap_equal_p", scope: !3, file: !3, line: 689, type: !14214, scopeLine: 690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14214 = !DISubroutineType(types: !14215)
!14215 = !{!1866, !3628, !3628}
!14216 = !DILocalVariable(name: "b1", arg: 1, scope: !14213, file: !3, line: 689, type: !3628)
!14217 = !DILocation(line: 689, column: 34, scope: !14213)
!14218 = !DILocalVariable(name: "b2", arg: 2, scope: !14213, file: !3, line: 689, type: !3628)
!14219 = !DILocation(line: 689, column: 51, scope: !14213)
!14220 = !DILocation(line: 691, column: 11, scope: !14213)
!14221 = !DILocation(line: 691, column: 17, scope: !14213)
!14222 = !DILocation(line: 691, column: 14, scope: !14213)
!14223 = !DILocation(line: 692, column: 4, scope: !14213)
!14224 = !DILocation(line: 692, column: 8, scope: !14213)
!14225 = !DILocation(line: 692, column: 11, scope: !14213)
!14226 = !DILocation(line: 692, column: 14, scope: !14213)
!14227 = !DILocation(line: 693, column: 8, scope: !14213)
!14228 = !DILocation(line: 693, column: 27, scope: !14213)
!14229 = !DILocation(line: 693, column: 31, scope: !14213)
!14230 = !DILocation(line: 693, column: 11, scope: !14213)
!14231 = !DILocation(line: 0, scope: !14213)
!14232 = !DILocation(line: 691, column: 10, scope: !14213)
!14233 = !DILocation(line: 691, column: 3, scope: !14213)
!14234 = distinct !DISubprogram(name: "find_case_label_range", scope: !3, file: !3, line: 5946, type: !14235, scopeLine: 5948, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14235 = !DISubroutineType(types: !14236)
!14236 = !{!1866, !2076, !1747, !1747, !14237, !14237}
!14237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2221, size: 64)
!14238 = !DILocalVariable(name: "stmt", arg: 1, scope: !14234, file: !3, line: 5946, type: !2076)
!14239 = !DILocation(line: 5946, column: 31, scope: !14234)
!14240 = !DILocalVariable(name: "min", arg: 2, scope: !14234, file: !3, line: 5946, type: !1747)
!14241 = !DILocation(line: 5946, column: 42, scope: !14234)
!14242 = !DILocalVariable(name: "max", arg: 3, scope: !14234, file: !3, line: 5946, type: !1747)
!14243 = !DILocation(line: 5946, column: 52, scope: !14234)
!14244 = !DILocalVariable(name: "min_idx", arg: 4, scope: !14234, file: !3, line: 5946, type: !14237)
!14245 = !DILocation(line: 5946, column: 65, scope: !14234)
!14246 = !DILocalVariable(name: "max_idx", arg: 5, scope: !14234, file: !3, line: 5947, type: !14237)
!14247 = !DILocation(line: 5947, column: 18, scope: !14234)
!14248 = !DILocalVariable(name: "i", scope: !14234, file: !3, line: 5949, type: !2221)
!14249 = !DILocation(line: 5949, column: 10, scope: !14234)
!14250 = !DILocalVariable(name: "j", scope: !14234, file: !3, line: 5949, type: !2221)
!14251 = !DILocation(line: 5949, column: 13, scope: !14234)
!14252 = !DILocalVariable(name: "min_take_default", scope: !14234, file: !3, line: 5950, type: !1866)
!14253 = !DILocation(line: 5950, column: 8, scope: !14234)
!14254 = !DILocation(line: 5950, column: 51, scope: !14234)
!14255 = !DILocation(line: 5950, column: 60, scope: !14234)
!14256 = !DILocation(line: 5950, column: 28, scope: !14234)
!14257 = !DILocation(line: 5950, column: 27, scope: !14234)
!14258 = !DILocalVariable(name: "max_take_default", scope: !14234, file: !3, line: 5951, type: !1866)
!14259 = !DILocation(line: 5951, column: 8, scope: !14234)
!14260 = !DILocation(line: 5951, column: 51, scope: !14234)
!14261 = !DILocation(line: 5951, column: 57, scope: !14234)
!14262 = !DILocation(line: 5951, column: 60, scope: !14234)
!14263 = !DILocation(line: 5951, column: 28, scope: !14234)
!14264 = !DILocation(line: 5951, column: 27, scope: !14234)
!14265 = !DILocation(line: 5953, column: 7, scope: !14266)
!14266 = distinct !DILexicalBlock(scope: !14234, file: !3, line: 5953, column: 7)
!14267 = !DILocation(line: 5953, column: 12, scope: !14266)
!14268 = !DILocation(line: 5953, column: 9, scope: !14266)
!14269 = !DILocation(line: 5954, column: 7, scope: !14266)
!14270 = !DILocation(line: 5954, column: 10, scope: !14266)
!14271 = !DILocation(line: 5955, column: 7, scope: !14266)
!14272 = !DILocation(line: 5955, column: 10, scope: !14266)
!14273 = !DILocation(line: 5953, column: 7, scope: !14234)
!14274 = !DILocation(line: 5959, column: 8, scope: !14275)
!14275 = distinct !DILexicalBlock(scope: !14266, file: !3, line: 5956, column: 5)
!14276 = !DILocation(line: 5959, column: 16, scope: !14275)
!14277 = !DILocation(line: 5960, column: 8, scope: !14275)
!14278 = !DILocation(line: 5960, column: 16, scope: !14275)
!14279 = !DILocation(line: 5961, column: 7, scope: !14275)
!14280 = !DILocalVariable(name: "take_default", scope: !14281, file: !3, line: 5965, type: !1866)
!14281 = distinct !DILexicalBlock(scope: !14266, file: !3, line: 5964, column: 5)
!14282 = !DILocation(line: 5965, column: 12, scope: !14281)
!14283 = !DILocation(line: 5965, column: 27, scope: !14281)
!14284 = !DILocation(line: 5965, column: 44, scope: !14281)
!14285 = !DILocation(line: 5965, column: 47, scope: !14281)
!14286 = !DILocalVariable(name: "low", scope: !14281, file: !3, line: 5966, type: !1747)
!14287 = !DILocation(line: 5966, column: 12, scope: !14281)
!14288 = !DILocalVariable(name: "high", scope: !14281, file: !3, line: 5966, type: !1747)
!14289 = !DILocation(line: 5966, column: 17, scope: !14281)
!14290 = !DILocalVariable(name: "k", scope: !14281, file: !3, line: 5967, type: !2221)
!14291 = !DILocation(line: 5967, column: 14, scope: !14281)
!14292 = !DILocation(line: 5969, column: 11, scope: !14293)
!14293 = distinct !DILexicalBlock(scope: !14281, file: !3, line: 5969, column: 11)
!14294 = !DILocation(line: 5969, column: 11, scope: !14281)
!14295 = !DILocation(line: 5970, column: 3, scope: !14293)
!14296 = !DILocation(line: 5970, column: 2, scope: !14293)
!14297 = !DILocation(line: 5974, column: 14, scope: !14281)
!14298 = !DILocation(line: 5974, column: 12, scope: !14281)
!14299 = !DILocation(line: 5975, column: 11, scope: !14300)
!14300 = distinct !DILexicalBlock(scope: !14281, file: !3, line: 5975, column: 11)
!14301 = !DILocation(line: 5975, column: 11, scope: !14281)
!14302 = !DILocation(line: 5976, column: 9, scope: !14300)
!14303 = !DILocation(line: 5976, column: 7, scope: !14300)
!14304 = !DILocation(line: 5976, column: 2, scope: !14300)
!14305 = !DILocation(line: 5977, column: 16, scope: !14306)
!14306 = distinct !DILexicalBlock(scope: !14281, file: !3, line: 5977, column: 7)
!14307 = !DILocation(line: 5977, column: 18, scope: !14306)
!14308 = !DILocation(line: 5977, column: 14, scope: !14306)
!14309 = !DILocation(line: 5977, column: 12, scope: !14306)
!14310 = !DILocation(line: 5977, column: 23, scope: !14311)
!14311 = distinct !DILexicalBlock(scope: !14306, file: !3, line: 5977, column: 7)
!14312 = !DILocation(line: 5977, column: 28, scope: !14311)
!14313 = !DILocation(line: 5977, column: 25, scope: !14311)
!14314 = !DILocation(line: 5977, column: 7, scope: !14306)
!14315 = !DILocation(line: 5979, column: 10, scope: !14316)
!14316 = distinct !DILexicalBlock(scope: !14311, file: !3, line: 5978, column: 2)
!14317 = !DILocation(line: 5979, column: 8, scope: !14316)
!14318 = !DILocation(line: 5980, column: 52, scope: !14319)
!14319 = distinct !DILexicalBlock(scope: !14316, file: !3, line: 5980, column: 8)
!14320 = !DILocation(line: 5980, column: 57, scope: !14319)
!14321 = !DILocation(line: 5980, column: 23, scope: !14319)
!14322 = !DILocation(line: 5980, column: 9, scope: !14319)
!14323 = !DILocation(line: 5980, column: 8, scope: !14316)
!14324 = !DILocation(line: 5982, column: 21, scope: !14325)
!14325 = distinct !DILexicalBlock(scope: !14319, file: !3, line: 5981, column: 6)
!14326 = !DILocation(line: 5983, column: 8, scope: !14325)
!14327 = !DILocation(line: 5985, column: 11, scope: !14316)
!14328 = !DILocation(line: 5985, column: 9, scope: !14316)
!14329 = !DILocation(line: 5986, column: 8, scope: !14330)
!14330 = distinct !DILexicalBlock(scope: !14316, file: !3, line: 5986, column: 8)
!14331 = !DILocation(line: 5986, column: 8, scope: !14316)
!14332 = !DILocation(line: 5987, column: 13, scope: !14330)
!14333 = !DILocation(line: 5987, column: 11, scope: !14330)
!14334 = !DILocation(line: 5987, column: 6, scope: !14330)
!14335 = !DILocation(line: 5988, column: 2, scope: !14316)
!14336 = !DILocation(line: 5977, column: 31, scope: !14311)
!14337 = !DILocation(line: 5977, column: 7, scope: !14311)
!14338 = distinct !{!14338, !14314, !14339}
!14339 = !DILocation(line: 5988, column: 2, scope: !14306)
!14340 = !DILocation(line: 5990, column: 18, scope: !14281)
!14341 = !DILocation(line: 5990, column: 8, scope: !14281)
!14342 = !DILocation(line: 5990, column: 16, scope: !14281)
!14343 = !DILocation(line: 5991, column: 18, scope: !14281)
!14344 = !DILocation(line: 5991, column: 8, scope: !14281)
!14345 = !DILocation(line: 5991, column: 16, scope: !14281)
!14346 = !DILocation(line: 5992, column: 15, scope: !14281)
!14347 = !DILocation(line: 5992, column: 14, scope: !14281)
!14348 = !DILocation(line: 5992, column: 7, scope: !14281)
!14349 = !DILocation(line: 5994, column: 1, scope: !14234)
!14350 = distinct !DISubprogram(name: "find_case_label_index", scope: !3, file: !3, line: 5896, type: !14351, scopeLine: 5897, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14351 = !DISubroutineType(types: !14352)
!14352 = !{!1866, !2076, !2221, !1747, !14237}
!14353 = !DILocalVariable(name: "stmt", arg: 1, scope: !14350, file: !3, line: 5896, type: !2076)
!14354 = !DILocation(line: 5896, column: 31, scope: !14350)
!14355 = !DILocalVariable(name: "start_idx", arg: 2, scope: !14350, file: !3, line: 5896, type: !2221)
!14356 = !DILocation(line: 5896, column: 44, scope: !14350)
!14357 = !DILocalVariable(name: "val", arg: 3, scope: !14350, file: !3, line: 5896, type: !1747)
!14358 = !DILocation(line: 5896, column: 60, scope: !14350)
!14359 = !DILocalVariable(name: "idx", arg: 4, scope: !14350, file: !3, line: 5896, type: !14237)
!14360 = !DILocation(line: 5896, column: 73, scope: !14350)
!14361 = !DILocalVariable(name: "n", scope: !14350, file: !3, line: 5898, type: !2221)
!14362 = !DILocation(line: 5898, column: 10, scope: !14350)
!14363 = !DILocation(line: 5898, column: 40, scope: !14350)
!14364 = !DILocation(line: 5898, column: 14, scope: !14350)
!14365 = !DILocalVariable(name: "low", scope: !14350, file: !3, line: 5899, type: !2221)
!14366 = !DILocation(line: 5899, column: 10, scope: !14350)
!14367 = !DILocalVariable(name: "high", scope: !14350, file: !3, line: 5899, type: !2221)
!14368 = !DILocation(line: 5899, column: 15, scope: !14350)
!14369 = !DILocation(line: 5904, column: 14, scope: !14370)
!14370 = distinct !DILexicalBlock(scope: !14350, file: !3, line: 5904, column: 3)
!14371 = !DILocation(line: 5904, column: 12, scope: !14370)
!14372 = !DILocation(line: 5904, column: 32, scope: !14370)
!14373 = !DILocation(line: 5904, column: 30, scope: !14370)
!14374 = !DILocation(line: 5904, column: 8, scope: !14370)
!14375 = !DILocation(line: 5904, column: 35, scope: !14376)
!14376 = distinct !DILexicalBlock(scope: !14370, file: !3, line: 5904, column: 3)
!14377 = !DILocation(line: 5904, column: 43, scope: !14376)
!14378 = !DILocation(line: 5904, column: 40, scope: !14376)
!14379 = !DILocation(line: 5904, column: 3, scope: !14370)
!14380 = !DILocalVariable(name: "t", scope: !14381, file: !3, line: 5906, type: !1747)
!14381 = distinct !DILexicalBlock(scope: !14376, file: !3, line: 5905, column: 5)
!14382 = !DILocation(line: 5906, column: 12, scope: !14381)
!14383 = !DILocalVariable(name: "cmp", scope: !14381, file: !3, line: 5907, type: !1740)
!14384 = !DILocation(line: 5907, column: 11, scope: !14381)
!14385 = !DILocalVariable(name: "i", scope: !14381, file: !3, line: 5909, type: !2221)
!14386 = !DILocation(line: 5909, column: 14, scope: !14381)
!14387 = !DILocation(line: 5909, column: 19, scope: !14381)
!14388 = !DILocation(line: 5909, column: 26, scope: !14381)
!14389 = !DILocation(line: 5909, column: 24, scope: !14381)
!14390 = !DILocation(line: 5909, column: 31, scope: !14381)
!14391 = !DILocation(line: 5910, column: 32, scope: !14381)
!14392 = !DILocation(line: 5910, column: 38, scope: !14381)
!14393 = !DILocation(line: 5910, column: 11, scope: !14381)
!14394 = !DILocation(line: 5910, column: 9, scope: !14381)
!14395 = !DILocation(line: 5913, column: 35, scope: !14381)
!14396 = !DILocation(line: 5913, column: 49, scope: !14381)
!14397 = !DILocation(line: 5913, column: 13, scope: !14381)
!14398 = !DILocation(line: 5913, column: 11, scope: !14381)
!14399 = !DILocation(line: 5915, column: 11, scope: !14400)
!14400 = distinct !DILexicalBlock(scope: !14381, file: !3, line: 5915, column: 11)
!14401 = !DILocation(line: 5915, column: 15, scope: !14400)
!14402 = !DILocation(line: 5915, column: 11, scope: !14381)
!14403 = !DILocation(line: 5918, column: 11, scope: !14404)
!14404 = distinct !DILexicalBlock(scope: !14400, file: !3, line: 5916, column: 2)
!14405 = !DILocation(line: 5918, column: 5, scope: !14404)
!14406 = !DILocation(line: 5918, column: 9, scope: !14404)
!14407 = !DILocation(line: 5919, column: 4, scope: !14404)
!14408 = !DILocation(line: 5921, column: 16, scope: !14409)
!14409 = distinct !DILexicalBlock(scope: !14400, file: !3, line: 5921, column: 16)
!14410 = !DILocation(line: 5921, column: 20, scope: !14409)
!14411 = !DILocation(line: 5921, column: 16, scope: !14400)
!14412 = !DILocation(line: 5922, column: 16, scope: !14409)
!14413 = !DILocation(line: 5922, column: 14, scope: !14409)
!14414 = !DILocation(line: 5922, column: 9, scope: !14409)
!14415 = !DILocation(line: 5925, column: 10, scope: !14416)
!14416 = distinct !DILexicalBlock(scope: !14409, file: !3, line: 5924, column: 2)
!14417 = !DILocation(line: 5925, column: 12, scope: !14416)
!14418 = !DILocation(line: 5925, column: 8, scope: !14416)
!14419 = !DILocation(line: 5926, column: 8, scope: !14420)
!14420 = distinct !DILexicalBlock(scope: !14416, file: !3, line: 5926, column: 8)
!14421 = !DILocation(line: 5926, column: 22, scope: !14420)
!14422 = !DILocation(line: 5927, column: 8, scope: !14420)
!14423 = !DILocation(line: 5927, column: 33, scope: !14420)
!14424 = !DILocation(line: 5927, column: 48, scope: !14420)
!14425 = !DILocation(line: 5927, column: 11, scope: !14420)
!14426 = !DILocation(line: 5927, column: 53, scope: !14420)
!14427 = !DILocation(line: 5926, column: 8, scope: !14416)
!14428 = !DILocation(line: 5929, column: 15, scope: !14429)
!14429 = distinct !DILexicalBlock(scope: !14420, file: !3, line: 5928, column: 6)
!14430 = !DILocation(line: 5929, column: 9, scope: !14429)
!14431 = !DILocation(line: 5929, column: 13, scope: !14429)
!14432 = !DILocation(line: 5930, column: 8, scope: !14429)
!14433 = !DILocation(line: 5904, column: 3, scope: !14376)
!14434 = distinct !{!14434, !14379, !14435}
!14435 = !DILocation(line: 5933, column: 5, scope: !14370)
!14436 = !DILocation(line: 5935, column: 10, scope: !14350)
!14437 = !DILocation(line: 5935, column: 4, scope: !14350)
!14438 = !DILocation(line: 5935, column: 8, scope: !14350)
!14439 = !DILocation(line: 5936, column: 3, scope: !14350)
!14440 = !DILocation(line: 5937, column: 1, scope: !14350)
!14441 = distinct !DISubprogram(name: "gimple_phi_arg_edge", scope: !6095, file: !6095, line: 467, type: !14442, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14442 = !DISubroutineType(types: !14443)
!14443 = !{!2056, !2076, !2221}
!14444 = !DILocalVariable(name: "gs", arg: 1, scope: !14441, file: !6095, line: 467, type: !2076)
!14445 = !DILocation(line: 467, column: 29, scope: !14441)
!14446 = !DILocalVariable(name: "i", arg: 2, scope: !14441, file: !6095, line: 467, type: !2221)
!14447 = !DILocation(line: 467, column: 40, scope: !14441)
!14448 = !DILocation(line: 469, column: 10, scope: !14441)
!14449 = !DILocation(line: 469, column: 3, scope: !14441)
!14450 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !6095, file: !6095, line: 617, type: !14451, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14451 = !DISubroutineType(types: !14452)
!14452 = !{!2291, !2076}
!14453 = !DILocalVariable(name: "stmt", arg: 1, scope: !14450, file: !6095, line: 617, type: !2076)
!14454 = !DILocation(line: 617, column: 30, scope: !14450)
!14455 = !DILocalVariable(name: "bb", scope: !14450, file: !6095, line: 619, type: !2527)
!14456 = !DILocation(line: 619, column: 15, scope: !14450)
!14457 = !DILocation(line: 619, column: 31, scope: !14450)
!14458 = !DILocation(line: 619, column: 20, scope: !14450)
!14459 = !DILocation(line: 620, column: 8, scope: !14460)
!14460 = distinct !DILexicalBlock(scope: !14450, file: !6095, line: 620, column: 7)
!14461 = !DILocation(line: 620, column: 7, scope: !14450)
!14462 = !DILocation(line: 621, column: 5, scope: !14460)
!14463 = !DILocation(line: 623, column: 10, scope: !14450)
!14464 = !DILocation(line: 623, column: 14, scope: !14450)
!14465 = !DILocation(line: 623, column: 3, scope: !14450)
!14466 = !DILocation(line: 624, column: 1, scope: !14450)
!14467 = distinct !DISubprogram(name: "adjust_range_with_scev", scope: !3, file: !3, line: 3153, type: !14468, scopeLine: 3155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14468 = !DISubroutineType(types: !14469)
!14469 = !{null, !1741, !2291, !2076, !1747}
!14470 = !DILocalVariable(name: "vr", arg: 1, scope: !14467, file: !3, line: 3153, type: !1741)
!14471 = !DILocation(line: 3153, column: 40, scope: !14467)
!14472 = !DILocalVariable(name: "loop", arg: 2, scope: !14467, file: !3, line: 3153, type: !2291)
!14473 = !DILocation(line: 3153, column: 57, scope: !14467)
!14474 = !DILocalVariable(name: "stmt", arg: 3, scope: !14467, file: !3, line: 3154, type: !2076)
!14475 = !DILocation(line: 3154, column: 11, scope: !14467)
!14476 = !DILocalVariable(name: "var", arg: 4, scope: !14467, file: !3, line: 3154, type: !1747)
!14477 = !DILocation(line: 3154, column: 22, scope: !14467)
!14478 = !DILocalVariable(name: "init", scope: !14467, file: !3, line: 3156, type: !1747)
!14479 = !DILocation(line: 3156, column: 8, scope: !14467)
!14480 = !DILocalVariable(name: "step", scope: !14467, file: !3, line: 3156, type: !1747)
!14481 = !DILocation(line: 3156, column: 14, scope: !14467)
!14482 = !DILocalVariable(name: "chrec", scope: !14467, file: !3, line: 3156, type: !1747)
!14483 = !DILocation(line: 3156, column: 20, scope: !14467)
!14484 = !DILocalVariable(name: "tmin", scope: !14467, file: !3, line: 3156, type: !1747)
!14485 = !DILocation(line: 3156, column: 27, scope: !14467)
!14486 = !DILocalVariable(name: "tmax", scope: !14467, file: !3, line: 3156, type: !1747)
!14487 = !DILocation(line: 3156, column: 33, scope: !14467)
!14488 = !DILocalVariable(name: "min", scope: !14467, file: !3, line: 3156, type: !1747)
!14489 = !DILocation(line: 3156, column: 39, scope: !14467)
!14490 = !DILocalVariable(name: "max", scope: !14467, file: !3, line: 3156, type: !1747)
!14491 = !DILocation(line: 3156, column: 44, scope: !14467)
!14492 = !DILocalVariable(name: "type", scope: !14467, file: !3, line: 3156, type: !1747)
!14493 = !DILocation(line: 3156, column: 49, scope: !14467)
!14494 = !DILocalVariable(name: "dir", scope: !14467, file: !3, line: 3157, type: !850)
!14495 = !DILocation(line: 3157, column: 21, scope: !14467)
!14496 = !DILocation(line: 3161, column: 7, scope: !14497)
!14497 = distinct !DILexicalBlock(scope: !14467, file: !3, line: 3161, column: 7)
!14498 = !DILocation(line: 3161, column: 11, scope: !14497)
!14499 = !DILocation(line: 3161, column: 16, scope: !14497)
!14500 = !DILocation(line: 3161, column: 7, scope: !14467)
!14501 = !DILocation(line: 3162, column: 5, scope: !14497)
!14502 = !DILocation(line: 3164, column: 35, scope: !14467)
!14503 = !DILocation(line: 3164, column: 67, scope: !14467)
!14504 = !DILocation(line: 3164, column: 73, scope: !14467)
!14505 = !DILocation(line: 3164, column: 41, scope: !14467)
!14506 = !DILocation(line: 3164, column: 11, scope: !14467)
!14507 = !DILocation(line: 3164, column: 9, scope: !14467)
!14508 = !DILocation(line: 3167, column: 32, scope: !14509)
!14509 = distinct !DILexicalBlock(scope: !14467, file: !3, line: 3167, column: 7)
!14510 = !DILocation(line: 3167, column: 7, scope: !14509)
!14511 = !DILocation(line: 3167, column: 7, scope: !14467)
!14512 = !DILocation(line: 3169, column: 33, scope: !14513)
!14513 = distinct !DILexicalBlock(scope: !14509, file: !3, line: 3168, column: 5)
!14514 = !DILocation(line: 3169, column: 37, scope: !14513)
!14515 = !DILocation(line: 3169, column: 44, scope: !14513)
!14516 = !DILocation(line: 3169, column: 48, scope: !14513)
!14517 = !DILocation(line: 3169, column: 7, scope: !14513)
!14518 = !DILocation(line: 3170, column: 7, scope: !14513)
!14519 = !DILocation(line: 3173, column: 7, scope: !14520)
!14520 = distinct !DILexicalBlock(scope: !14467, file: !3, line: 3173, column: 7)
!14521 = !DILocation(line: 3173, column: 25, scope: !14520)
!14522 = !DILocation(line: 3173, column: 7, scope: !14467)
!14523 = !DILocation(line: 3174, column: 5, scope: !14520)
!14524 = !DILocation(line: 3176, column: 41, scope: !14467)
!14525 = !DILocation(line: 3176, column: 48, scope: !14467)
!14526 = !DILocation(line: 3176, column: 54, scope: !14467)
!14527 = !DILocation(line: 3176, column: 10, scope: !14467)
!14528 = !DILocation(line: 3176, column: 8, scope: !14467)
!14529 = !DILocation(line: 3177, column: 38, scope: !14467)
!14530 = !DILocation(line: 3177, column: 45, scope: !14467)
!14531 = !DILocation(line: 3177, column: 51, scope: !14467)
!14532 = !DILocation(line: 3177, column: 10, scope: !14467)
!14533 = !DILocation(line: 3177, column: 8, scope: !14467)
!14534 = !DILocation(line: 3183, column: 7, scope: !14535)
!14535 = distinct !DILexicalBlock(scope: !14467, file: !3, line: 3183, column: 7)
!14536 = !DILocation(line: 3183, column: 12, scope: !14535)
!14537 = !DILocation(line: 3184, column: 7, scope: !14535)
!14538 = !DILocation(line: 3184, column: 36, scope: !14535)
!14539 = !DILocation(line: 3184, column: 11, scope: !14535)
!14540 = !DILocation(line: 3185, column: 7, scope: !14535)
!14541 = !DILocation(line: 3185, column: 26, scope: !14535)
!14542 = !DILocation(line: 3185, column: 11, scope: !14535)
!14543 = !DILocation(line: 3183, column: 7, scope: !14467)
!14544 = !DILocation(line: 3186, column: 5, scope: !14535)
!14545 = !DILocation(line: 3188, column: 25, scope: !14467)
!14546 = !DILocation(line: 3188, column: 9, scope: !14467)
!14547 = !DILocation(line: 3188, column: 7, scope: !14467)
!14548 = !DILocation(line: 3191, column: 7, scope: !14549)
!14549 = distinct !DILexicalBlock(scope: !14467, file: !3, line: 3191, column: 7)
!14550 = !DILocation(line: 3191, column: 11, scope: !14549)
!14551 = !DILocation(line: 3193, column: 7, scope: !14549)
!14552 = !DILocation(line: 3193, column: 33, scope: !14549)
!14553 = !DILocation(line: 3193, column: 39, scope: !14549)
!14554 = !DILocation(line: 3193, column: 45, scope: !14549)
!14555 = !DILocation(line: 3193, column: 67, scope: !14549)
!14556 = !DILocation(line: 3193, column: 51, scope: !14549)
!14557 = !DILocation(line: 3193, column: 10, scope: !14549)
!14558 = !DILocation(line: 3191, column: 7, scope: !14467)
!14559 = !DILocation(line: 3195, column: 5, scope: !14549)
!14560 = !DILocation(line: 3202, column: 10, scope: !14467)
!14561 = !DILocation(line: 3202, column: 8, scope: !14467)
!14562 = !DILocation(line: 3203, column: 7, scope: !14563)
!14563 = distinct !DILexicalBlock(scope: !14467, file: !3, line: 3203, column: 7)
!14564 = !DILocation(line: 3203, column: 29, scope: !14563)
!14565 = !DILocation(line: 3203, column: 33, scope: !14563)
!14566 = !DILocation(line: 3203, column: 7, scope: !14467)
!14567 = !DILocation(line: 3204, column: 33, scope: !14563)
!14568 = !DILocation(line: 3204, column: 39, scope: !14563)
!14569 = !DILocation(line: 3204, column: 12, scope: !14563)
!14570 = !DILocation(line: 3204, column: 10, scope: !14563)
!14571 = !DILocation(line: 3204, column: 5, scope: !14563)
!14572 = !DILocation(line: 3206, column: 12, scope: !14563)
!14573 = !DILocation(line: 3206, column: 10, scope: !14563)
!14574 = !DILocation(line: 3207, column: 7, scope: !14575)
!14575 = distinct !DILexicalBlock(scope: !14467, file: !3, line: 3207, column: 7)
!14576 = !DILocation(line: 3207, column: 29, scope: !14575)
!14577 = !DILocation(line: 3207, column: 33, scope: !14575)
!14578 = !DILocation(line: 3207, column: 7, scope: !14467)
!14579 = !DILocation(line: 3208, column: 33, scope: !14575)
!14580 = !DILocation(line: 3208, column: 39, scope: !14575)
!14581 = !DILocation(line: 3208, column: 12, scope: !14575)
!14582 = !DILocation(line: 3208, column: 10, scope: !14575)
!14583 = !DILocation(line: 3208, column: 5, scope: !14575)
!14584 = !DILocation(line: 3210, column: 12, scope: !14575)
!14585 = !DILocation(line: 3210, column: 10, scope: !14575)
!14586 = !DILocation(line: 3212, column: 7, scope: !14587)
!14587 = distinct !DILexicalBlock(scope: !14467, file: !3, line: 3212, column: 7)
!14588 = !DILocation(line: 3212, column: 11, scope: !14587)
!14589 = !DILocation(line: 3212, column: 16, scope: !14587)
!14590 = !DILocation(line: 3212, column: 30, scope: !14587)
!14591 = !DILocation(line: 3212, column: 33, scope: !14587)
!14592 = !DILocation(line: 3212, column: 37, scope: !14587)
!14593 = !DILocation(line: 3212, column: 42, scope: !14587)
!14594 = !DILocation(line: 3212, column: 7, scope: !14467)
!14595 = !DILocation(line: 3214, column: 13, scope: !14596)
!14596 = distinct !DILexicalBlock(scope: !14587, file: !3, line: 3213, column: 5)
!14597 = !DILocation(line: 3214, column: 11, scope: !14596)
!14598 = !DILocation(line: 3215, column: 13, scope: !14596)
!14599 = !DILocation(line: 3215, column: 11, scope: !14596)
!14600 = !DILocation(line: 3220, column: 11, scope: !14601)
!14601 = distinct !DILexicalBlock(scope: !14596, file: !3, line: 3220, column: 11)
!14602 = !DILocation(line: 3220, column: 15, scope: !14601)
!14603 = !DILocation(line: 3220, column: 11, scope: !14596)
!14604 = !DILocation(line: 3221, column: 8, scope: !14601)
!14605 = !DILocation(line: 3221, column: 6, scope: !14601)
!14606 = !DILocation(line: 3221, column: 2, scope: !14601)
!14607 = !DILocation(line: 3223, column: 8, scope: !14601)
!14608 = !DILocation(line: 3223, column: 6, scope: !14601)
!14609 = !DILocation(line: 3229, column: 27, scope: !14610)
!14610 = distinct !DILexicalBlock(scope: !14596, file: !3, line: 3229, column: 11)
!14611 = !DILocation(line: 3229, column: 32, scope: !14610)
!14612 = !DILocation(line: 3229, column: 11, scope: !14610)
!14613 = !DILocation(line: 3229, column: 37, scope: !14610)
!14614 = !DILocation(line: 3229, column: 11, scope: !14596)
!14615 = !DILocation(line: 3230, column: 2, scope: !14610)
!14616 = !DILocation(line: 3232, column: 24, scope: !14596)
!14617 = !DILocation(line: 3232, column: 38, scope: !14596)
!14618 = !DILocation(line: 3232, column: 43, scope: !14596)
!14619 = !DILocation(line: 3232, column: 48, scope: !14596)
!14620 = !DILocation(line: 3232, column: 52, scope: !14596)
!14621 = !DILocation(line: 3232, column: 7, scope: !14596)
!14622 = !DILocation(line: 3233, column: 5, scope: !14596)
!14623 = !DILocation(line: 3234, column: 12, scope: !14624)
!14624 = distinct !DILexicalBlock(scope: !14587, file: !3, line: 3234, column: 12)
!14625 = !DILocation(line: 3234, column: 16, scope: !14624)
!14626 = !DILocation(line: 3234, column: 21, scope: !14624)
!14627 = !DILocation(line: 3234, column: 12, scope: !14587)
!14628 = !DILocation(line: 3236, column: 13, scope: !14629)
!14629 = distinct !DILexicalBlock(scope: !14624, file: !3, line: 3235, column: 5)
!14630 = !DILocation(line: 3236, column: 17, scope: !14629)
!14631 = !DILocation(line: 3236, column: 11, scope: !14629)
!14632 = !DILocation(line: 3237, column: 13, scope: !14629)
!14633 = !DILocation(line: 3237, column: 17, scope: !14629)
!14634 = !DILocation(line: 3237, column: 11, scope: !14629)
!14635 = !DILocation(line: 3239, column: 11, scope: !14636)
!14636 = distinct !DILexicalBlock(scope: !14629, file: !3, line: 3239, column: 11)
!14637 = !DILocation(line: 3239, column: 15, scope: !14636)
!14638 = !DILocation(line: 3239, column: 11, scope: !14629)
!14639 = !DILocation(line: 3243, column: 24, scope: !14640)
!14640 = distinct !DILexicalBlock(scope: !14641, file: !3, line: 3243, column: 8)
!14641 = distinct !DILexicalBlock(scope: !14636, file: !3, line: 3240, column: 2)
!14642 = !DILocation(line: 3243, column: 30, scope: !14640)
!14643 = !DILocation(line: 3243, column: 8, scope: !14640)
!14644 = !DILocation(line: 3243, column: 35, scope: !14640)
!14645 = !DILocation(line: 3243, column: 8, scope: !14641)
!14646 = !DILocation(line: 3245, column: 14, scope: !14647)
!14647 = distinct !DILexicalBlock(scope: !14640, file: !3, line: 3244, column: 6)
!14648 = !DILocation(line: 3245, column: 12, scope: !14647)
!14649 = !DILocation(line: 3251, column: 28, scope: !14650)
!14650 = distinct !DILexicalBlock(scope: !14647, file: !3, line: 3251, column: 12)
!14651 = !DILocation(line: 3251, column: 33, scope: !14650)
!14652 = !DILocation(line: 3251, column: 12, scope: !14650)
!14653 = !DILocation(line: 3251, column: 38, scope: !14650)
!14654 = !DILocation(line: 3251, column: 12, scope: !14647)
!14655 = !DILocation(line: 3252, column: 3, scope: !14650)
!14656 = !DILocation(line: 3253, column: 6, scope: !14647)
!14657 = !DILocation(line: 3259, column: 39, scope: !14658)
!14658 = distinct !DILexicalBlock(scope: !14641, file: !3, line: 3259, column: 8)
!14659 = !DILocation(line: 3259, column: 8, scope: !14658)
!14660 = !DILocation(line: 3259, column: 8, scope: !14641)
!14661 = !DILocation(line: 3260, column: 12, scope: !14658)
!14662 = !DILocation(line: 3260, column: 10, scope: !14658)
!14663 = !DILocation(line: 3260, column: 6, scope: !14658)
!14664 = !DILocation(line: 3261, column: 2, scope: !14641)
!14665 = !DILocation(line: 3265, column: 24, scope: !14666)
!14666 = distinct !DILexicalBlock(scope: !14667, file: !3, line: 3265, column: 8)
!14667 = distinct !DILexicalBlock(scope: !14636, file: !3, line: 3263, column: 2)
!14668 = !DILocation(line: 3265, column: 30, scope: !14666)
!14669 = !DILocation(line: 3265, column: 8, scope: !14666)
!14670 = !DILocation(line: 3265, column: 35, scope: !14666)
!14671 = !DILocation(line: 3265, column: 8, scope: !14667)
!14672 = !DILocation(line: 3267, column: 14, scope: !14673)
!14673 = distinct !DILexicalBlock(scope: !14666, file: !3, line: 3266, column: 6)
!14674 = !DILocation(line: 3267, column: 12, scope: !14673)
!14675 = !DILocation(line: 3270, column: 28, scope: !14676)
!14676 = distinct !DILexicalBlock(scope: !14673, file: !3, line: 3270, column: 12)
!14677 = !DILocation(line: 3270, column: 33, scope: !14676)
!14678 = !DILocation(line: 3270, column: 12, scope: !14676)
!14679 = !DILocation(line: 3270, column: 38, scope: !14676)
!14680 = !DILocation(line: 3270, column: 12, scope: !14673)
!14681 = !DILocation(line: 3271, column: 3, scope: !14676)
!14682 = !DILocation(line: 3272, column: 6, scope: !14673)
!14683 = !DILocation(line: 3274, column: 39, scope: !14684)
!14684 = distinct !DILexicalBlock(scope: !14667, file: !3, line: 3274, column: 8)
!14685 = !DILocation(line: 3274, column: 8, scope: !14684)
!14686 = !DILocation(line: 3274, column: 8, scope: !14667)
!14687 = !DILocation(line: 3275, column: 12, scope: !14684)
!14688 = !DILocation(line: 3275, column: 10, scope: !14684)
!14689 = !DILocation(line: 3275, column: 6, scope: !14684)
!14690 = !DILocation(line: 3278, column: 24, scope: !14629)
!14691 = !DILocation(line: 3278, column: 38, scope: !14629)
!14692 = !DILocation(line: 3278, column: 43, scope: !14629)
!14693 = !DILocation(line: 3278, column: 48, scope: !14629)
!14694 = !DILocation(line: 3278, column: 52, scope: !14629)
!14695 = !DILocation(line: 3278, column: 7, scope: !14629)
!14696 = !DILocation(line: 3279, column: 5, scope: !14629)
!14697 = !DILocation(line: 3280, column: 1, scope: !14467)
!14698 = distinct !DISubprogram(name: "vrp_var_may_overflow", scope: !3, file: !3, line: 3287, type: !14699, scopeLine: 3288, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14699 = !DISubroutineType(types: !14700)
!14700 = !{!1866, !1747, !2076}
!14701 = !DILocalVariable(name: "var", arg: 1, scope: !14698, file: !3, line: 3287, type: !1747)
!14702 = !DILocation(line: 3287, column: 28, scope: !14698)
!14703 = !DILocalVariable(name: "stmt", arg: 2, scope: !14698, file: !3, line: 3287, type: !2076)
!14704 = !DILocation(line: 3287, column: 40, scope: !14698)
!14705 = !DILocalVariable(name: "l", scope: !14698, file: !3, line: 3289, type: !2291)
!14706 = !DILocation(line: 3289, column: 16, scope: !14698)
!14707 = !DILocalVariable(name: "chrec", scope: !14698, file: !3, line: 3290, type: !1747)
!14708 = !DILocation(line: 3290, column: 8, scope: !14698)
!14709 = !DILocalVariable(name: "init", scope: !14698, file: !3, line: 3290, type: !1747)
!14710 = !DILocation(line: 3290, column: 15, scope: !14698)
!14711 = !DILocalVariable(name: "step", scope: !14698, file: !3, line: 3290, type: !1747)
!14712 = !DILocation(line: 3290, column: 21, scope: !14698)
!14713 = !DILocation(line: 3292, column: 7, scope: !14714)
!14714 = distinct !DILexicalBlock(scope: !14698, file: !3, line: 3292, column: 7)
!14715 = !DILocation(line: 3292, column: 21, scope: !14714)
!14716 = !DILocation(line: 3292, column: 7, scope: !14698)
!14717 = !DILocation(line: 3293, column: 5, scope: !14714)
!14718 = !DILocation(line: 3295, column: 29, scope: !14698)
!14719 = !DILocation(line: 3295, column: 7, scope: !14698)
!14720 = !DILocation(line: 3295, column: 5, scope: !14698)
!14721 = !DILocation(line: 3296, column: 7, scope: !14722)
!14722 = distinct !DILexicalBlock(scope: !14698, file: !3, line: 3296, column: 7)
!14723 = !DILocation(line: 3296, column: 9, scope: !14722)
!14724 = !DILocation(line: 3297, column: 7, scope: !14722)
!14725 = !DILocation(line: 3297, column: 23, scope: !14722)
!14726 = !DILocation(line: 3297, column: 11, scope: !14722)
!14727 = !DILocation(line: 3296, column: 7, scope: !14698)
!14728 = !DILocation(line: 3298, column: 5, scope: !14722)
!14729 = !DILocation(line: 3300, column: 35, scope: !14698)
!14730 = !DILocation(line: 3300, column: 64, scope: !14698)
!14731 = !DILocation(line: 3300, column: 67, scope: !14698)
!14732 = !DILocation(line: 3300, column: 38, scope: !14698)
!14733 = !DILocation(line: 3300, column: 11, scope: !14698)
!14734 = !DILocation(line: 3300, column: 9, scope: !14698)
!14735 = !DILocation(line: 3301, column: 7, scope: !14736)
!14736 = distinct !DILexicalBlock(scope: !14698, file: !3, line: 3301, column: 7)
!14737 = !DILocation(line: 3301, column: 25, scope: !14736)
!14738 = !DILocation(line: 3301, column: 7, scope: !14698)
!14739 = !DILocation(line: 3302, column: 5, scope: !14736)
!14740 = !DILocation(line: 3304, column: 41, scope: !14698)
!14741 = !DILocation(line: 3304, column: 48, scope: !14698)
!14742 = !DILocation(line: 3304, column: 51, scope: !14698)
!14743 = !DILocation(line: 3304, column: 10, scope: !14698)
!14744 = !DILocation(line: 3304, column: 8, scope: !14698)
!14745 = !DILocation(line: 3305, column: 38, scope: !14698)
!14746 = !DILocation(line: 3305, column: 45, scope: !14698)
!14747 = !DILocation(line: 3305, column: 48, scope: !14698)
!14748 = !DILocation(line: 3305, column: 10, scope: !14698)
!14749 = !DILocation(line: 3305, column: 8, scope: !14698)
!14750 = !DILocation(line: 3307, column: 7, scope: !14751)
!14751 = distinct !DILexicalBlock(scope: !14698, file: !3, line: 3307, column: 7)
!14752 = !DILocation(line: 3307, column: 12, scope: !14751)
!14753 = !DILocation(line: 3308, column: 7, scope: !14751)
!14754 = !DILocation(line: 3308, column: 36, scope: !14751)
!14755 = !DILocation(line: 3308, column: 11, scope: !14751)
!14756 = !DILocation(line: 3309, column: 7, scope: !14751)
!14757 = !DILocation(line: 3309, column: 26, scope: !14751)
!14758 = !DILocation(line: 3309, column: 11, scope: !14751)
!14759 = !DILocation(line: 3307, column: 7, scope: !14698)
!14760 = !DILocation(line: 3310, column: 5, scope: !14751)
!14761 = !DILocation(line: 3315, column: 30, scope: !14762)
!14762 = distinct !DILexicalBlock(scope: !14698, file: !3, line: 3315, column: 7)
!14763 = !DILocation(line: 3315, column: 36, scope: !14762)
!14764 = !DILocation(line: 3315, column: 42, scope: !14762)
!14765 = !DILocation(line: 3315, column: 64, scope: !14762)
!14766 = !DILocation(line: 3315, column: 48, scope: !14762)
!14767 = !DILocation(line: 3315, column: 7, scope: !14762)
!14768 = !DILocation(line: 3315, column: 7, scope: !14698)
!14769 = !DILocation(line: 3317, column: 5, scope: !14762)
!14770 = !DILocation(line: 3319, column: 7, scope: !14771)
!14771 = distinct !DILexicalBlock(scope: !14698, file: !3, line: 3319, column: 7)
!14772 = !DILocation(line: 3319, column: 17, scope: !14771)
!14773 = !DILocation(line: 3319, column: 21, scope: !14771)
!14774 = !DILocation(line: 3319, column: 32, scope: !14771)
!14775 = !DILocation(line: 3319, column: 47, scope: !14771)
!14776 = !DILocation(line: 3319, column: 7, scope: !14698)
!14777 = !DILocation(line: 3321, column: 27, scope: !14778)
!14778 = distinct !DILexicalBlock(scope: !14771, file: !3, line: 3320, column: 5)
!14779 = !DILocation(line: 3321, column: 38, scope: !14778)
!14780 = !DILocation(line: 3321, column: 7, scope: !14778)
!14781 = !DILocation(line: 3322, column: 16, scope: !14778)
!14782 = !DILocation(line: 3322, column: 7, scope: !14778)
!14783 = !DILocation(line: 3323, column: 5, scope: !14778)
!14784 = !DILocation(line: 3325, column: 3, scope: !14698)
!14785 = !DILocation(line: 3326, column: 1, scope: !14698)
!14786 = distinct !DISubprogram(name: "instantiate_parameters", scope: !14787, file: !14787, line: 57, type: !14788, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14787 = !DIFile(filename: "./tree-scalar-evolution.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!14788 = !DISubroutineType(types: !14789)
!14789 = !{!1747, !2291, !1747}
!14790 = !DILocalVariable(name: "loop", arg: 1, scope: !14786, file: !14787, line: 57, type: !2291)
!14791 = !DILocation(line: 57, column: 38, scope: !14786)
!14792 = !DILocalVariable(name: "chrec", arg: 2, scope: !14786, file: !14787, line: 57, type: !1747)
!14793 = !DILocation(line: 57, column: 49, scope: !14786)
!14794 = !DILocation(line: 59, column: 47, scope: !14786)
!14795 = !DILocation(line: 59, column: 28, scope: !14786)
!14796 = !DILocation(line: 59, column: 54, scope: !14786)
!14797 = !DILocation(line: 59, column: 60, scope: !14786)
!14798 = !DILocation(line: 59, column: 10, scope: !14786)
!14799 = !DILocation(line: 59, column: 3, scope: !14786)
!14800 = distinct !DISubprogram(name: "valid_value_p", scope: !3, file: !3, line: 992, type: !14801, scopeLine: 993, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14801 = !DISubroutineType(types: !14802)
!14802 = !{!1866, !1747}
!14803 = !DILocalVariable(name: "expr", arg: 1, scope: !14800, file: !3, line: 992, type: !1747)
!14804 = !DILocation(line: 992, column: 21, scope: !14800)
!14805 = !DILocation(line: 994, column: 7, scope: !14806)
!14806 = distinct !DILexicalBlock(scope: !14800, file: !3, line: 994, column: 7)
!14807 = !DILocation(line: 994, column: 24, scope: !14806)
!14808 = !DILocation(line: 994, column: 7, scope: !14800)
!14809 = !DILocation(line: 995, column: 5, scope: !14806)
!14810 = !DILocation(line: 997, column: 7, scope: !14811)
!14811 = distinct !DILexicalBlock(scope: !14800, file: !3, line: 997, column: 7)
!14812 = !DILocation(line: 997, column: 24, scope: !14811)
!14813 = !DILocation(line: 998, column: 7, scope: !14811)
!14814 = !DILocation(line: 998, column: 10, scope: !14811)
!14815 = !DILocation(line: 998, column: 27, scope: !14811)
!14816 = !DILocation(line: 997, column: 7, scope: !14800)
!14817 = !DILocation(line: 999, column: 13, scope: !14811)
!14818 = !DILocation(line: 999, column: 48, scope: !14811)
!14819 = !DILocation(line: 1000, column: 6, scope: !14811)
!14820 = !DILocation(line: 1000, column: 9, scope: !14811)
!14821 = !DILocation(line: 1000, column: 44, scope: !14811)
!14822 = !DILocation(line: 0, scope: !14811)
!14823 = !DILocation(line: 999, column: 12, scope: !14811)
!14824 = !DILocation(line: 999, column: 5, scope: !14811)
!14825 = !DILocation(line: 1002, column: 35, scope: !14800)
!14826 = !DILocation(line: 1002, column: 10, scope: !14800)
!14827 = !DILocation(line: 1002, column: 3, scope: !14800)
!14828 = !DILocation(line: 1003, column: 1, scope: !14800)
!14829 = distinct !DISubprogram(name: "get_chrec_loop", scope: !14787, file: !14787, line: 65, type: !14830, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14830 = !DISubroutineType(types: !14831)
!14831 = !{!2291, !3139}
!14832 = !DILocalVariable(name: "chrec", arg: 1, scope: !14829, file: !14787, line: 65, type: !3139)
!14833 = !DILocation(line: 65, column: 28, scope: !14829)
!14834 = !DILocation(line: 67, column: 20, scope: !14829)
!14835 = !DILocation(line: 67, column: 10, scope: !14829)
!14836 = !DILocation(line: 67, column: 3, scope: !14829)
!14837 = distinct !DISubprogram(name: "block_before_loop", scope: !14787, file: !14787, line: 46, type: !14838, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14838 = !DISubroutineType(types: !14839)
!14839 = !{!2527, !2318}
!14840 = !DILocalVariable(name: "loop", arg: 1, scope: !14837, file: !14787, line: 46, type: !2318)
!14841 = !DILocation(line: 46, column: 27, scope: !14837)
!14842 = !DILocalVariable(name: "preheader", scope: !14837, file: !14787, line: 48, type: !2056)
!14843 = !DILocation(line: 48, column: 8, scope: !14837)
!14844 = !DILocation(line: 48, column: 41, scope: !14837)
!14845 = !DILocation(line: 48, column: 20, scope: !14837)
!14846 = !DILocation(line: 49, column: 11, scope: !14837)
!14847 = !DILocation(line: 49, column: 23, scope: !14837)
!14848 = !DILocation(line: 49, column: 34, scope: !14837)
!14849 = !DILocation(line: 49, column: 40, scope: !14837)
!14850 = !DILocation(line: 49, column: 3, scope: !14837)
!14851 = distinct !DISubprogram(name: "get_loop", scope: !330, file: !330, line: 417, type: !14852, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14852 = !DISubroutineType(types: !14853)
!14853 = !{!2291, !7}
!14854 = !DILocalVariable(name: "num", arg: 1, scope: !14851, file: !330, line: 417, type: !7)
!14855 = !DILocation(line: 417, column: 20, scope: !14851)
!14856 = !DILocation(line: 419, column: 10, scope: !14851)
!14857 = !DILocation(line: 419, column: 3, scope: !14851)
!14858 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !330, file: !330, line: 85, type: !14859, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14859 = !DISubroutineType(types: !14860)
!14860 = !{!2318, !14861, !7}
!14861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14862, size: 64)
!14862 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2311)
!14863 = !DILocalVariable(name: "vec_", arg: 1, scope: !14858, file: !330, line: 85, type: !14861)
!14864 = !DILocation(line: 85, column: 1, scope: !14858)
!14865 = !DILocalVariable(name: "ix_", arg: 2, scope: !14858, file: !330, line: 85, type: !7)
!14866 = !DILocation(line: 0, scope: !14858)
!14867 = distinct !DISubprogram(name: "loop_outer", scope: !330, file: !330, line: 434, type: !14868, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14868 = !DISubroutineType(types: !14869)
!14869 = !{!2291, !14870}
!14870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14871, size: 64)
!14871 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2292)
!14872 = !DILocalVariable(name: "loop", arg: 1, scope: !14867, file: !330, line: 434, type: !14870)
!14873 = !DILocation(line: 434, column: 32, scope: !14867)
!14874 = !DILocalVariable(name: "n", scope: !14867, file: !330, line: 436, type: !7)
!14875 = !DILocation(line: 436, column: 12, scope: !14867)
!14876 = !DILocation(line: 436, column: 16, scope: !14867)
!14877 = !DILocation(line: 438, column: 7, scope: !14878)
!14878 = distinct !DILexicalBlock(scope: !14867, file: !330, line: 438, column: 7)
!14879 = !DILocation(line: 438, column: 9, scope: !14878)
!14880 = !DILocation(line: 438, column: 7, scope: !14867)
!14881 = !DILocation(line: 439, column: 5, scope: !14878)
!14882 = !DILocation(line: 441, column: 10, scope: !14867)
!14883 = !DILocation(line: 441, column: 3, scope: !14867)
!14884 = !DILocation(line: 442, column: 1, scope: !14867)
!14885 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !330, file: !330, line: 85, type: !14886, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14886 = !DISubroutineType(types: !14887)
!14887 = !{!7, !14861}
!14888 = !DILocalVariable(name: "vec_", arg: 1, scope: !14885, file: !330, line: 85, type: !14861)
!14889 = !DILocation(line: 85, column: 1, scope: !14885)
!14890 = distinct !DISubprogram(name: "vrp_fold_stmt", scope: !3, file: !3, line: 7074, type: !14891, scopeLine: 7075, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14891 = !DISubroutineType(types: !14892)
!14892 = !{!1866, !6761}
!14893 = !DILocalVariable(name: "si", arg: 1, scope: !14890, file: !3, line: 7074, type: !6761)
!14894 = !DILocation(line: 7074, column: 38, scope: !14890)
!14895 = !DILocation(line: 7076, column: 26, scope: !14896)
!14896 = distinct !DILexicalBlock(scope: !14890, file: !3, line: 7076, column: 7)
!14897 = !DILocation(line: 7076, column: 7, scope: !14896)
!14898 = !DILocation(line: 7076, column: 7, scope: !14890)
!14899 = !DILocation(line: 7077, column: 5, scope: !14896)
!14900 = !DILocation(line: 7079, column: 38, scope: !14890)
!14901 = !DILocation(line: 7079, column: 10, scope: !14890)
!14902 = !DILocation(line: 7079, column: 3, scope: !14890)
!14903 = !DILocation(line: 7080, column: 1, scope: !14890)
!14904 = distinct !DISubprogram(name: "check_all_array_refs", scope: !3, file: !3, line: 5153, type: !3887, scopeLine: 5154, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!14905 = !DILocalVariable(name: "bb", scope: !14904, file: !3, line: 5155, type: !2527)
!14906 = !DILocation(line: 5155, column: 15, scope: !14904)
!14907 = !DILocalVariable(name: "si", scope: !14904, file: !3, line: 5156, type: !3112)
!14908 = !DILocation(line: 5156, column: 24, scope: !14904)
!14909 = !DILocation(line: 5158, column: 3, scope: !14910)
!14910 = distinct !DILexicalBlock(scope: !14904, file: !3, line: 5158, column: 3)
!14911 = !DILocation(line: 5158, column: 3, scope: !14912)
!14912 = distinct !DILexicalBlock(scope: !14910, file: !3, line: 5158, column: 3)
!14913 = !DILocalVariable(name: "ei", scope: !14914, file: !3, line: 5160, type: !5606)
!14914 = distinct !DILexicalBlock(scope: !14912, file: !3, line: 5159, column: 5)
!14915 = !DILocation(line: 5160, column: 21, scope: !14914)
!14916 = !DILocalVariable(name: "e", scope: !14914, file: !3, line: 5161, type: !2056)
!14917 = !DILocation(line: 5161, column: 12, scope: !14914)
!14918 = !DILocalVariable(name: "executable", scope: !14914, file: !3, line: 5162, type: !1866)
!14919 = !DILocation(line: 5162, column: 12, scope: !14914)
!14920 = !DILocation(line: 5165, column: 7, scope: !14921)
!14921 = distinct !DILexicalBlock(scope: !14914, file: !3, line: 5165, column: 7)
!14922 = !DILocation(line: 5165, column: 7, scope: !14923)
!14923 = distinct !DILexicalBlock(scope: !14921, file: !3, line: 5165, column: 7)
!14924 = !DILocation(line: 5166, column: 19, scope: !14923)
!14925 = !DILocation(line: 5166, column: 22, scope: !14923)
!14926 = !DILocation(line: 5166, column: 28, scope: !14923)
!14927 = !DILocation(line: 5166, column: 17, scope: !14923)
!14928 = !DILocation(line: 5166, column: 16, scope: !14923)
!14929 = !DILocation(line: 5166, column: 13, scope: !14923)
!14930 = !DILocation(line: 5166, column: 2, scope: !14923)
!14931 = distinct !{!14931, !14920, !14932}
!14932 = !DILocation(line: 5166, column: 45, scope: !14921)
!14933 = !DILocation(line: 5167, column: 12, scope: !14934)
!14934 = distinct !DILexicalBlock(scope: !14914, file: !3, line: 5167, column: 11)
!14935 = !DILocation(line: 5167, column: 11, scope: !14914)
!14936 = !DILocation(line: 5168, column: 2, scope: !14934)
!14937 = !DILocation(line: 5170, column: 31, scope: !14938)
!14938 = distinct !DILexicalBlock(scope: !14914, file: !3, line: 5170, column: 7)
!14939 = !DILocation(line: 5170, column: 17, scope: !14938)
!14940 = !DILocation(line: 5170, column: 12, scope: !14938)
!14941 = !DILocation(line: 5170, column: 37, scope: !14942)
!14942 = distinct !DILexicalBlock(scope: !14938, file: !3, line: 5170, column: 7)
!14943 = !DILocation(line: 5170, column: 36, scope: !14942)
!14944 = !DILocation(line: 5170, column: 7, scope: !14938)
!14945 = !DILocalVariable(name: "stmt", scope: !14946, file: !3, line: 5172, type: !2076)
!14946 = distinct !DILexicalBlock(scope: !14942, file: !3, line: 5171, column: 2)
!14947 = !DILocation(line: 5172, column: 11, scope: !14946)
!14948 = !DILocation(line: 5172, column: 18, scope: !14946)
!14949 = !DILocalVariable(name: "wi", scope: !14946, file: !3, line: 5173, type: !3175)
!14950 = !DILocation(line: 5173, column: 26, scope: !14946)
!14951 = !DILocation(line: 5174, column: 30, scope: !14952)
!14952 = distinct !DILexicalBlock(scope: !14946, file: !3, line: 5174, column: 8)
!14953 = !DILocation(line: 5174, column: 9, scope: !14952)
!14954 = !DILocation(line: 5174, column: 8, scope: !14946)
!14955 = !DILocation(line: 5175, column: 6, scope: !14952)
!14956 = !DILocation(line: 5177, column: 24, scope: !14957)
!14957 = distinct !DILexicalBlock(scope: !14946, file: !3, line: 5177, column: 8)
!14958 = !DILocation(line: 5177, column: 8, scope: !14957)
!14959 = !DILocation(line: 5177, column: 8, scope: !14946)
!14960 = !DILocalVariable(name: "i", scope: !14961, file: !3, line: 5179, type: !2221)
!14961 = distinct !DILexicalBlock(scope: !14957, file: !3, line: 5178, column: 6)
!14962 = !DILocation(line: 5179, column: 15, scope: !14961)
!14963 = !DILocalVariable(name: "n", scope: !14961, file: !3, line: 5180, type: !2221)
!14964 = !DILocation(line: 5180, column: 15, scope: !14961)
!14965 = !DILocation(line: 5180, column: 41, scope: !14961)
!14966 = !DILocation(line: 5180, column: 19, scope: !14961)
!14967 = !DILocation(line: 5181, column: 15, scope: !14968)
!14968 = distinct !DILexicalBlock(scope: !14961, file: !3, line: 5181, column: 8)
!14969 = !DILocation(line: 5181, column: 13, scope: !14968)
!14970 = !DILocation(line: 5181, column: 20, scope: !14971)
!14971 = distinct !DILexicalBlock(scope: !14968, file: !3, line: 5181, column: 8)
!14972 = !DILocation(line: 5181, column: 24, scope: !14971)
!14973 = !DILocation(line: 5181, column: 22, scope: !14971)
!14974 = !DILocation(line: 5181, column: 8, scope: !14968)
!14975 = !DILocalVariable(name: "arg", scope: !14976, file: !3, line: 5183, type: !1747)
!14976 = distinct !DILexicalBlock(scope: !14971, file: !3, line: 5182, column: 3)
!14977 = !DILocation(line: 5183, column: 10, scope: !14976)
!14978 = !DILocation(line: 5183, column: 33, scope: !14976)
!14979 = !DILocation(line: 5183, column: 39, scope: !14976)
!14980 = !DILocation(line: 5183, column: 16, scope: !14976)
!14981 = !DILocation(line: 5184, column: 28, scope: !14976)
!14982 = !DILocation(line: 5184, column: 50, scope: !14976)
!14983 = !DILocation(line: 5184, column: 33, scope: !14976)
!14984 = !DILocation(line: 5184, column: 5, scope: !14976)
!14985 = !DILocation(line: 5185, column: 3, scope: !14976)
!14986 = !DILocation(line: 5181, column: 28, scope: !14971)
!14987 = !DILocation(line: 5181, column: 8, scope: !14971)
!14988 = distinct !{!14988, !14974, !14989}
!14989 = !DILocation(line: 5185, column: 3, scope: !14968)
!14990 = !DILocation(line: 5186, column: 6, scope: !14961)
!14991 = !DILocation(line: 5189, column: 8, scope: !14992)
!14992 = distinct !DILexicalBlock(scope: !14957, file: !3, line: 5188, column: 6)
!14993 = !DILocation(line: 5190, column: 18, scope: !14992)
!14994 = !DILocation(line: 5190, column: 11, scope: !14992)
!14995 = !DILocation(line: 5190, column: 16, scope: !14992)
!14996 = !DILocation(line: 5193, column: 24, scope: !14992)
!14997 = !DILocation(line: 5193, column: 8, scope: !14992)
!14998 = !DILocation(line: 5197, column: 2, scope: !14946)
!14999 = !DILocation(line: 5170, column: 53, scope: !14942)
!15000 = !DILocation(line: 5170, column: 7, scope: !14942)
!15001 = distinct !{!15001, !14944, !15002}
!15002 = !DILocation(line: 5197, column: 2, scope: !14938)
!15003 = !DILocation(line: 5198, column: 5, scope: !14914)
!15004 = distinct !{!15004, !14909, !15005}
!15005 = !DILocation(line: 5198, column: 5, scope: !14910)
!15006 = !DILocation(line: 5199, column: 1, scope: !14904)
!15007 = distinct !DISubprogram(name: "identify_jump_threads", scope: !3, file: !3, line: 7129, type: !3887, scopeLine: 7130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15008 = !DILocalVariable(name: "bb", scope: !15007, file: !3, line: 7131, type: !2527)
!15009 = !DILocation(line: 7131, column: 15, scope: !15007)
!15010 = !DILocalVariable(name: "dummy", scope: !15007, file: !3, line: 7132, type: !2076)
!15011 = !DILocation(line: 7132, column: 10, scope: !15007)
!15012 = !DILocalVariable(name: "i", scope: !15007, file: !3, line: 7133, type: !1740)
!15013 = !DILocation(line: 7133, column: 7, scope: !15007)
!15014 = !DILocalVariable(name: "e", scope: !15007, file: !3, line: 7134, type: !2056)
!15015 = !DILocation(line: 7134, column: 8, scope: !15007)
!15016 = !DILocation(line: 7139, column: 3, scope: !15007)
!15017 = !DILocation(line: 7146, column: 3, scope: !15007)
!15018 = !DILocation(line: 7150, column: 10, scope: !15019)
!15019 = distinct !DILexicalBlock(scope: !15007, file: !3, line: 7150, column: 3)
!15020 = !DILocation(line: 7150, column: 8, scope: !15019)
!15021 = !DILocation(line: 7150, column: 15, scope: !15022)
!15022 = distinct !DILexicalBlock(scope: !15019, file: !3, line: 7150, column: 3)
!15023 = !DILocation(line: 7150, column: 3, scope: !15019)
!15024 = !DILocation(line: 7151, column: 5, scope: !15022)
!15025 = !DILocation(line: 7151, column: 8, scope: !15022)
!15026 = !DILocation(line: 7151, column: 14, scope: !15022)
!15027 = !DILocation(line: 7150, column: 58, scope: !15022)
!15028 = !DILocation(line: 7150, column: 3, scope: !15022)
!15029 = distinct !{!15029, !15023, !15030}
!15030 = !DILocation(line: 7151, column: 17, scope: !15019)
!15031 = !DILocation(line: 7155, column: 11, scope: !15007)
!15032 = !DILocation(line: 7155, column: 9, scope: !15007)
!15033 = !DILocation(line: 7161, column: 9, scope: !15007)
!15034 = !DILocation(line: 7161, column: 28, scope: !15007)
!15035 = !DILocation(line: 7160, column: 11, scope: !15007)
!15036 = !DILocation(line: 7160, column: 9, scope: !15007)
!15037 = !DILocation(line: 7170, column: 3, scope: !15038)
!15038 = distinct !DILexicalBlock(scope: !15007, file: !3, line: 7170, column: 3)
!15039 = !DILocation(line: 7170, column: 3, scope: !15040)
!15040 = distinct !DILexicalBlock(scope: !15038, file: !3, line: 7170, column: 3)
!15041 = !DILocalVariable(name: "last", scope: !15042, file: !3, line: 7172, type: !2076)
!15042 = distinct !DILexicalBlock(scope: !15040, file: !3, line: 7171, column: 5)
!15043 = !DILocation(line: 7172, column: 14, scope: !15042)
!15044 = !DILocation(line: 7176, column: 43, scope: !15045)
!15045 = distinct !DILexicalBlock(scope: !15042, file: !3, line: 7176, column: 11)
!15046 = !DILocation(line: 7176, column: 13, scope: !15045)
!15047 = !DILocation(line: 7176, column: 11, scope: !15042)
!15048 = !DILocation(line: 7177, column: 2, scope: !15045)
!15049 = !DILocation(line: 7182, column: 37, scope: !15042)
!15050 = !DILocation(line: 7182, column: 24, scope: !15042)
!15051 = !DILocation(line: 7182, column: 14, scope: !15042)
!15052 = !DILocation(line: 7182, column: 12, scope: !15042)
!15053 = !DILocation(line: 7183, column: 24, scope: !15054)
!15054 = distinct !DILexicalBlock(scope: !15042, file: !3, line: 7183, column: 11)
!15055 = !DILocation(line: 7183, column: 11, scope: !15054)
!15056 = !DILocation(line: 7183, column: 30, scope: !15054)
!15057 = !DILocation(line: 7183, column: 11, scope: !15042)
!15058 = !DILocation(line: 7184, column: 2, scope: !15054)
!15059 = !DILocation(line: 7188, column: 11, scope: !15060)
!15060 = distinct !DILexicalBlock(scope: !15042, file: !3, line: 7188, column: 11)
!15061 = !DILocation(line: 7188, column: 46, scope: !15060)
!15062 = !DILocation(line: 7189, column: 4, scope: !15060)
!15063 = !DILocation(line: 7189, column: 7, scope: !15060)
!15064 = !DILocation(line: 7190, column: 4, scope: !15060)
!15065 = !DILocation(line: 7190, column: 8, scope: !15060)
!15066 = !DILocation(line: 7190, column: 43, scope: !15060)
!15067 = !DILocation(line: 7191, column: 8, scope: !15060)
!15068 = !DILocation(line: 7191, column: 53, scope: !15060)
!15069 = !DILocation(line: 7191, column: 36, scope: !15060)
!15070 = !DILocation(line: 7191, column: 11, scope: !15060)
!15071 = !DILocation(line: 7192, column: 4, scope: !15060)
!15072 = !DILocation(line: 7192, column: 7, scope: !15060)
!15073 = !DILocation(line: 7188, column: 11, scope: !15042)
!15074 = !DILocalVariable(name: "ei", scope: !15075, file: !3, line: 7194, type: !5606)
!15075 = distinct !DILexicalBlock(scope: !15060, file: !3, line: 7193, column: 2)
!15076 = !DILocation(line: 7194, column: 18, scope: !15075)
!15077 = !DILocation(line: 7200, column: 4, scope: !15078)
!15078 = distinct !DILexicalBlock(scope: !15075, file: !3, line: 7200, column: 4)
!15079 = !DILocation(line: 7200, column: 4, scope: !15080)
!15080 = distinct !DILexicalBlock(scope: !15078, file: !3, line: 7200, column: 4)
!15081 = !DILocation(line: 7204, column: 12, scope: !15082)
!15082 = distinct !DILexicalBlock(scope: !15083, file: !3, line: 7204, column: 12)
!15083 = distinct !DILexicalBlock(scope: !15080, file: !3, line: 7201, column: 6)
!15084 = !DILocation(line: 7204, column: 15, scope: !15082)
!15085 = !DILocation(line: 7204, column: 21, scope: !15082)
!15086 = !DILocation(line: 7204, column: 12, scope: !15083)
!15087 = !DILocation(line: 7205, column: 3, scope: !15082)
!15088 = !DILocation(line: 7207, column: 28, scope: !15083)
!15089 = !DILocation(line: 7207, column: 35, scope: !15083)
!15090 = !DILocation(line: 7207, column: 8, scope: !15083)
!15091 = !DILocation(line: 7209, column: 6, scope: !15083)
!15092 = distinct !{!15092, !15077, !15093}
!15093 = !DILocation(line: 7209, column: 6, scope: !15078)
!15094 = !DILocation(line: 7210, column: 2, scope: !15075)
!15095 = !DILocation(line: 7211, column: 5, scope: !15042)
!15096 = distinct !{!15096, !15037, !15097}
!15097 = !DILocation(line: 7211, column: 5, scope: !15038)
!15098 = !DILocation(line: 7216, column: 1, scope: !15007)
!15099 = distinct !DISubprogram(name: "fold_predicate_in", scope: !3, file: !3, line: 7015, type: !14891, scopeLine: 7016, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15100 = !DILocalVariable(name: "si", arg: 1, scope: !15099, file: !3, line: 7015, type: !6761)
!15101 = !DILocation(line: 7015, column: 42, scope: !15099)
!15102 = !DILocalVariable(name: "assignment_p", scope: !15099, file: !3, line: 7017, type: !1866)
!15103 = !DILocation(line: 7017, column: 8, scope: !15099)
!15104 = !DILocalVariable(name: "val", scope: !15099, file: !3, line: 7018, type: !1747)
!15105 = !DILocation(line: 7018, column: 8, scope: !15099)
!15106 = !DILocalVariable(name: "stmt", scope: !15099, file: !3, line: 7019, type: !2076)
!15107 = !DILocation(line: 7019, column: 10, scope: !15099)
!15108 = !DILocation(line: 7019, column: 28, scope: !15099)
!15109 = !DILocation(line: 7019, column: 17, scope: !15099)
!15110 = !DILocation(line: 7021, column: 25, scope: !15111)
!15111 = distinct !DILexicalBlock(scope: !15099, file: !3, line: 7021, column: 7)
!15112 = !DILocation(line: 7021, column: 7, scope: !15111)
!15113 = !DILocation(line: 7022, column: 7, scope: !15111)
!15114 = !DILocation(line: 7022, column: 10, scope: !15111)
!15115 = !DILocation(line: 7022, column: 58, scope: !15111)
!15116 = !DILocation(line: 7021, column: 7, scope: !15099)
!15117 = !DILocation(line: 7024, column: 20, scope: !15118)
!15118 = distinct !DILexicalBlock(scope: !15111, file: !3, line: 7023, column: 5)
!15119 = !DILocation(line: 7025, column: 63, scope: !15118)
!15120 = !DILocation(line: 7025, column: 39, scope: !15118)
!15121 = !DILocation(line: 7026, column: 31, scope: !15118)
!15122 = !DILocation(line: 7026, column: 11, scope: !15118)
!15123 = !DILocation(line: 7027, column: 31, scope: !15118)
!15124 = !DILocation(line: 7027, column: 11, scope: !15118)
!15125 = !DILocation(line: 7028, column: 11, scope: !15118)
!15126 = !DILocation(line: 7025, column: 13, scope: !15118)
!15127 = !DILocation(line: 7025, column: 11, scope: !15118)
!15128 = !DILocation(line: 7029, column: 5, scope: !15118)
!15129 = !DILocation(line: 7030, column: 25, scope: !15130)
!15130 = distinct !DILexicalBlock(scope: !15111, file: !3, line: 7030, column: 12)
!15131 = !DILocation(line: 7030, column: 12, scope: !15130)
!15132 = !DILocation(line: 7030, column: 31, scope: !15130)
!15133 = !DILocation(line: 7030, column: 12, scope: !15111)
!15134 = !DILocation(line: 7031, column: 55, scope: !15130)
!15135 = !DILocation(line: 7031, column: 37, scope: !15130)
!15136 = !DILocation(line: 7032, column: 26, scope: !15130)
!15137 = !DILocation(line: 7032, column: 9, scope: !15130)
!15138 = !DILocation(line: 7033, column: 26, scope: !15130)
!15139 = !DILocation(line: 7033, column: 9, scope: !15130)
!15140 = !DILocation(line: 7034, column: 9, scope: !15130)
!15141 = !DILocation(line: 7031, column: 11, scope: !15130)
!15142 = !DILocation(line: 7031, column: 9, scope: !15130)
!15143 = !DILocation(line: 7031, column: 5, scope: !15130)
!15144 = !DILocation(line: 7036, column: 5, scope: !15130)
!15145 = !DILocation(line: 7038, column: 7, scope: !15146)
!15146 = distinct !DILexicalBlock(scope: !15099, file: !3, line: 7038, column: 7)
!15147 = !DILocation(line: 7038, column: 7, scope: !15099)
!15148 = !DILocation(line: 7040, column: 11, scope: !15149)
!15149 = distinct !DILexicalBlock(scope: !15150, file: !3, line: 7040, column: 11)
!15150 = distinct !DILexicalBlock(scope: !15146, file: !3, line: 7039, column: 5)
!15151 = !DILocation(line: 7040, column: 11, scope: !15150)
!15152 = !DILocation(line: 7041, column: 15, scope: !15149)
!15153 = !DILocation(line: 7041, column: 13, scope: !15149)
!15154 = !DILocation(line: 7041, column: 9, scope: !15149)
!15155 = !DILocation(line: 7043, column: 11, scope: !15156)
!15156 = distinct !DILexicalBlock(scope: !15150, file: !3, line: 7043, column: 11)
!15157 = !DILocation(line: 7043, column: 11, scope: !15150)
!15158 = !DILocation(line: 7045, column: 13, scope: !15159)
!15159 = distinct !DILexicalBlock(scope: !15156, file: !3, line: 7044, column: 2)
!15160 = !DILocation(line: 7045, column: 4, scope: !15159)
!15161 = !DILocation(line: 7046, column: 23, scope: !15159)
!15162 = !DILocation(line: 7046, column: 34, scope: !15159)
!15163 = !DILocation(line: 7046, column: 4, scope: !15159)
!15164 = !DILocation(line: 7047, column: 13, scope: !15159)
!15165 = !DILocation(line: 7047, column: 4, scope: !15159)
!15166 = !DILocation(line: 7048, column: 24, scope: !15159)
!15167 = !DILocation(line: 7048, column: 35, scope: !15159)
!15168 = !DILocation(line: 7048, column: 4, scope: !15159)
!15169 = !DILocation(line: 7049, column: 13, scope: !15159)
!15170 = !DILocation(line: 7049, column: 4, scope: !15159)
!15171 = !DILocation(line: 7050, column: 2, scope: !15159)
!15172 = !DILocation(line: 7052, column: 29, scope: !15173)
!15173 = distinct !DILexicalBlock(scope: !15150, file: !3, line: 7052, column: 11)
!15174 = !DILocation(line: 7052, column: 11, scope: !15173)
!15175 = !DILocation(line: 7052, column: 11, scope: !15150)
!15176 = !DILocation(line: 7053, column: 35, scope: !15173)
!15177 = !DILocation(line: 7053, column: 39, scope: !15173)
!15178 = !DILocation(line: 7053, column: 2, scope: !15173)
!15179 = !DILocation(line: 7056, column: 4, scope: !15180)
!15180 = distinct !DILexicalBlock(scope: !15173, file: !3, line: 7055, column: 2)
!15181 = !DILocation(line: 7057, column: 23, scope: !15182)
!15182 = distinct !DILexicalBlock(scope: !15180, file: !3, line: 7057, column: 8)
!15183 = !DILocation(line: 7057, column: 8, scope: !15182)
!15184 = !DILocation(line: 7057, column: 8, scope: !15180)
!15185 = !DILocation(line: 7058, column: 30, scope: !15182)
!15186 = !DILocation(line: 7058, column: 6, scope: !15182)
!15187 = !DILocation(line: 7059, column: 27, scope: !15188)
!15188 = distinct !DILexicalBlock(scope: !15182, file: !3, line: 7059, column: 13)
!15189 = !DILocation(line: 7059, column: 13, scope: !15188)
!15190 = !DILocation(line: 7059, column: 13, scope: !15182)
!15191 = !DILocation(line: 7060, column: 29, scope: !15188)
!15192 = !DILocation(line: 7060, column: 6, scope: !15188)
!15193 = !DILocation(line: 7062, column: 6, scope: !15188)
!15194 = !DILocation(line: 7065, column: 7, scope: !15150)
!15195 = !DILocation(line: 7068, column: 3, scope: !15099)
!15196 = !DILocation(line: 7069, column: 1, scope: !15099)
!15197 = distinct !DISubprogram(name: "simplify_stmt_using_ranges", scope: !3, file: !3, line: 6958, type: !14891, scopeLine: 6959, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15198 = !DILocalVariable(name: "gsi", arg: 1, scope: !15197, file: !3, line: 6958, type: !6761)
!15199 = !DILocation(line: 6958, column: 51, scope: !15197)
!15200 = !DILocalVariable(name: "stmt", scope: !15197, file: !3, line: 6960, type: !2076)
!15201 = !DILocation(line: 6960, column: 10, scope: !15197)
!15202 = !DILocation(line: 6960, column: 28, scope: !15197)
!15203 = !DILocation(line: 6960, column: 17, scope: !15197)
!15204 = !DILocation(line: 6961, column: 25, scope: !15205)
!15205 = distinct !DILexicalBlock(scope: !15197, file: !3, line: 6961, column: 7)
!15206 = !DILocation(line: 6961, column: 7, scope: !15205)
!15207 = !DILocation(line: 6961, column: 7, scope: !15197)
!15208 = !DILocalVariable(name: "rhs_code", scope: !15209, file: !3, line: 6963, type: !134)
!15209 = distinct !DILexicalBlock(scope: !15205, file: !3, line: 6962, column: 5)
!15210 = !DILocation(line: 6963, column: 22, scope: !15209)
!15211 = !DILocation(line: 6963, column: 57, scope: !15209)
!15212 = !DILocation(line: 6963, column: 33, scope: !15209)
!15213 = !DILocation(line: 6965, column: 15, scope: !15209)
!15214 = !DILocation(line: 6965, column: 7, scope: !15209)
!15215 = !DILocation(line: 6977, column: 8, scope: !15216)
!15216 = distinct !DILexicalBlock(scope: !15217, file: !3, line: 6977, column: 8)
!15217 = distinct !DILexicalBlock(scope: !15209, file: !3, line: 6966, column: 2)
!15218 = !DILocation(line: 6977, column: 8, scope: !15217)
!15219 = !DILocation(line: 6978, column: 46, scope: !15216)
!15220 = !DILocation(line: 6978, column: 51, scope: !15216)
!15221 = !DILocation(line: 6978, column: 13, scope: !15216)
!15222 = !DILocation(line: 6978, column: 6, scope: !15216)
!15223 = !DILocation(line: 6979, column: 4, scope: !15217)
!15224 = !DILocation(line: 6986, column: 8, scope: !15225)
!15225 = distinct !DILexicalBlock(scope: !15217, file: !3, line: 6986, column: 8)
!15226 = !DILocation(line: 6987, column: 8, scope: !15225)
!15227 = !DILocation(line: 6987, column: 46, scope: !15225)
!15228 = !DILocation(line: 6987, column: 26, scope: !15225)
!15229 = !DILocation(line: 6987, column: 11, scope: !15225)
!15230 = !DILocation(line: 6986, column: 8, scope: !15217)
!15231 = !DILocation(line: 6988, column: 47, scope: !15225)
!15232 = !DILocation(line: 6988, column: 13, scope: !15225)
!15233 = !DILocation(line: 6988, column: 6, scope: !15225)
!15234 = !DILocation(line: 6989, column: 4, scope: !15217)
!15235 = !DILocation(line: 6993, column: 8, scope: !15236)
!15236 = distinct !DILexicalBlock(scope: !15217, file: !3, line: 6993, column: 8)
!15237 = !DILocation(line: 6993, column: 46, scope: !15236)
!15238 = !DILocation(line: 6994, column: 8, scope: !15236)
!15239 = !DILocation(line: 6994, column: 11, scope: !15236)
!15240 = !DILocation(line: 6993, column: 8, scope: !15217)
!15241 = !DILocation(line: 6995, column: 40, scope: !15236)
!15242 = !DILocation(line: 6995, column: 13, scope: !15236)
!15243 = !DILocation(line: 6995, column: 6, scope: !15236)
!15244 = !DILocation(line: 6996, column: 4, scope: !15217)
!15245 = !DILocation(line: 6999, column: 4, scope: !15217)
!15246 = !DILocation(line: 7001, column: 5, scope: !15209)
!15247 = !DILocation(line: 7002, column: 25, scope: !15248)
!15248 = distinct !DILexicalBlock(scope: !15205, file: !3, line: 7002, column: 12)
!15249 = !DILocation(line: 7002, column: 12, scope: !15248)
!15250 = !DILocation(line: 7002, column: 31, scope: !15248)
!15251 = !DILocation(line: 7002, column: 12, scope: !15205)
!15252 = !DILocation(line: 7003, column: 40, scope: !15248)
!15253 = !DILocation(line: 7003, column: 12, scope: !15248)
!15254 = !DILocation(line: 7003, column: 5, scope: !15248)
!15255 = !DILocation(line: 7004, column: 25, scope: !15256)
!15256 = distinct !DILexicalBlock(scope: !15248, file: !3, line: 7004, column: 12)
!15257 = !DILocation(line: 7004, column: 12, scope: !15256)
!15258 = !DILocation(line: 7004, column: 31, scope: !15256)
!15259 = !DILocation(line: 7004, column: 12, scope: !15248)
!15260 = !DILocation(line: 7005, column: 42, scope: !15256)
!15261 = !DILocation(line: 7005, column: 12, scope: !15256)
!15262 = !DILocation(line: 7005, column: 5, scope: !15256)
!15263 = !DILocation(line: 7007, column: 3, scope: !15197)
!15264 = !DILocation(line: 7008, column: 1, scope: !15197)
!15265 = distinct !DISubprogram(name: "vrp_evaluate_conditional", scope: !3, file: !3, line: 5688, type: !15266, scopeLine: 5689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15266 = !DISubroutineType(types: !15267)
!15267 = !{!1747, !134, !1747, !1747, !2076}
!15268 = !DILocalVariable(name: "code", arg: 1, scope: !15265, file: !3, line: 5688, type: !134)
!15269 = !DILocation(line: 5688, column: 42, scope: !15265)
!15270 = !DILocalVariable(name: "op0", arg: 2, scope: !15265, file: !3, line: 5688, type: !1747)
!15271 = !DILocation(line: 5688, column: 53, scope: !15265)
!15272 = !DILocalVariable(name: "op1", arg: 3, scope: !15265, file: !3, line: 5688, type: !1747)
!15273 = !DILocation(line: 5688, column: 63, scope: !15265)
!15274 = !DILocalVariable(name: "stmt", arg: 4, scope: !15265, file: !3, line: 5688, type: !2076)
!15275 = !DILocation(line: 5688, column: 75, scope: !15265)
!15276 = !DILocalVariable(name: "sop", scope: !15265, file: !3, line: 5690, type: !1866)
!15277 = !DILocation(line: 5690, column: 8, scope: !15265)
!15278 = !DILocalVariable(name: "ret", scope: !15265, file: !3, line: 5691, type: !1747)
!15279 = !DILocation(line: 5691, column: 8, scope: !15265)
!15280 = !DILocalVariable(name: "only_ranges", scope: !15265, file: !3, line: 5692, type: !1866)
!15281 = !DILocation(line: 5692, column: 8, scope: !15265)
!15282 = !DILocation(line: 5696, column: 8, scope: !15283)
!15283 = distinct !DILexicalBlock(scope: !15265, file: !3, line: 5696, column: 7)
!15284 = !DILocation(line: 5696, column: 24, scope: !15283)
!15285 = !DILocation(line: 5697, column: 8, scope: !15283)
!15286 = !DILocation(line: 5697, column: 11, scope: !15283)
!15287 = !DILocation(line: 5698, column: 7, scope: !15283)
!15288 = !DILocation(line: 5698, column: 11, scope: !15283)
!15289 = !DILocation(line: 5698, column: 27, scope: !15283)
!15290 = !DILocation(line: 5699, column: 4, scope: !15283)
!15291 = !DILocation(line: 5699, column: 7, scope: !15283)
!15292 = !DILocation(line: 5696, column: 7, scope: !15265)
!15293 = !DILocation(line: 5700, column: 5, scope: !15283)
!15294 = !DILocation(line: 5702, column: 7, scope: !15265)
!15295 = !DILocation(line: 5703, column: 50, scope: !15265)
!15296 = !DILocation(line: 5703, column: 56, scope: !15265)
!15297 = !DILocation(line: 5703, column: 61, scope: !15265)
!15298 = !DILocation(line: 5703, column: 9, scope: !15265)
!15299 = !DILocation(line: 5703, column: 7, scope: !15265)
!15300 = !DILocation(line: 5706, column: 7, scope: !15301)
!15301 = distinct !DILexicalBlock(scope: !15265, file: !3, line: 5706, column: 7)
!15302 = !DILocation(line: 5706, column: 11, scope: !15301)
!15303 = !DILocation(line: 5706, column: 14, scope: !15301)
!15304 = !DILocation(line: 5706, column: 7, scope: !15265)
!15305 = !DILocalVariable(name: "wc", scope: !15306, file: !3, line: 5708, type: !856)
!15306 = distinct !DILexicalBlock(scope: !15301, file: !3, line: 5707, column: 5)
!15307 = !DILocation(line: 5708, column: 38, scope: !15306)
!15308 = !DILocalVariable(name: "warnmsg", scope: !15306, file: !3, line: 5709, type: !1950)
!15309 = !DILocation(line: 5709, column: 19, scope: !15306)
!15310 = !DILocation(line: 5711, column: 36, scope: !15311)
!15311 = distinct !DILexicalBlock(scope: !15306, file: !3, line: 5711, column: 11)
!15312 = !DILocation(line: 5711, column: 11, scope: !15311)
!15313 = !DILocation(line: 5711, column: 11, scope: !15306)
!15314 = !DILocation(line: 5713, column: 7, scope: !15315)
!15315 = distinct !DILexicalBlock(scope: !15311, file: !3, line: 5712, column: 2)
!15316 = !DILocation(line: 5714, column: 12, scope: !15315)
!15317 = !DILocation(line: 5716, column: 2, scope: !15315)
!15318 = !DILocation(line: 5719, column: 7, scope: !15319)
!15319 = distinct !DILexicalBlock(scope: !15311, file: !3, line: 5718, column: 2)
!15320 = !DILocation(line: 5720, column: 12, scope: !15319)
!15321 = !DILocation(line: 5724, column: 11, scope: !15322)
!15322 = distinct !DILexicalBlock(scope: !15306, file: !3, line: 5724, column: 11)
!15323 = !DILocation(line: 5724, column: 11, scope: !15306)
!15324 = !DILocalVariable(name: "location", scope: !15325, file: !3, line: 5726, type: !1874)
!15325 = distinct !DILexicalBlock(scope: !15322, file: !3, line: 5725, column: 2)
!15326 = !DILocation(line: 5726, column: 15, scope: !15325)
!15327 = !DILocation(line: 5728, column: 30, scope: !15328)
!15328 = distinct !DILexicalBlock(scope: !15325, file: !3, line: 5728, column: 8)
!15329 = !DILocation(line: 5728, column: 9, scope: !15328)
!15330 = !DILocation(line: 5728, column: 8, scope: !15325)
!15331 = !DILocation(line: 5729, column: 17, scope: !15328)
!15332 = !DILocation(line: 5729, column: 15, scope: !15328)
!15333 = !DILocation(line: 5729, column: 6, scope: !15328)
!15334 = !DILocation(line: 5731, column: 34, scope: !15328)
!15335 = !DILocation(line: 5731, column: 17, scope: !15328)
!15336 = !DILocation(line: 5731, column: 15, scope: !15328)
!15337 = !DILocation(line: 5732, column: 16, scope: !15325)
!15338 = !DILocation(line: 5732, column: 54, scope: !15325)
!15339 = !DILocation(line: 5732, column: 4, scope: !15325)
!15340 = !DILocation(line: 5733, column: 2, scope: !15325)
!15341 = !DILocation(line: 5734, column: 5, scope: !15306)
!15342 = !DILocation(line: 5736, column: 7, scope: !15343)
!15343 = distinct !DILexicalBlock(scope: !15265, file: !3, line: 5736, column: 7)
!15344 = !DILocation(line: 5737, column: 7, scope: !15343)
!15345 = !DILocation(line: 5737, column: 10, scope: !15343)
!15346 = !DILocation(line: 5737, column: 14, scope: !15343)
!15347 = !DILocation(line: 5737, column: 17, scope: !15343)
!15348 = !DILocation(line: 5738, column: 7, scope: !15343)
!15349 = !DILocation(line: 5738, column: 10, scope: !15343)
!15350 = !DILocation(line: 5738, column: 33, scope: !15343)
!15351 = !DILocation(line: 5739, column: 7, scope: !15343)
!15352 = !DILocation(line: 5739, column: 10, scope: !15343)
!15353 = !DILocation(line: 5739, column: 26, scope: !15343)
!15354 = !DILocation(line: 5736, column: 7, scope: !15265)
!15355 = !DILocalVariable(name: "type", scope: !15356, file: !3, line: 5746, type: !1747)
!15356 = distinct !DILexicalBlock(scope: !15343, file: !3, line: 5740, column: 5)
!15357 = !DILocation(line: 5746, column: 12, scope: !15356)
!15358 = !DILocation(line: 5746, column: 19, scope: !15356)
!15359 = !DILocalVariable(name: "vr0", scope: !15356, file: !3, line: 5747, type: !1741)
!15360 = !DILocation(line: 5747, column: 22, scope: !15356)
!15361 = !DILocation(line: 5747, column: 45, scope: !15356)
!15362 = !DILocation(line: 5747, column: 28, scope: !15356)
!15363 = !DILocation(line: 5749, column: 11, scope: !15364)
!15364 = distinct !DILexicalBlock(scope: !15356, file: !3, line: 5749, column: 11)
!15365 = !DILocation(line: 5749, column: 16, scope: !15364)
!15366 = !DILocation(line: 5749, column: 21, scope: !15364)
!15367 = !DILocation(line: 5750, column: 4, scope: !15364)
!15368 = !DILocation(line: 5750, column: 7, scope: !15364)
!15369 = !DILocation(line: 5751, column: 4, scope: !15364)
!15370 = !DILocation(line: 5751, column: 23, scope: !15364)
!15371 = !DILocation(line: 5751, column: 28, scope: !15364)
!15372 = !DILocation(line: 5751, column: 7, scope: !15364)
!15373 = !DILocation(line: 5752, column: 4, scope: !15364)
!15374 = !DILocation(line: 5752, column: 23, scope: !15364)
!15375 = !DILocation(line: 5752, column: 28, scope: !15364)
!15376 = !DILocation(line: 5752, column: 7, scope: !15364)
!15377 = !DILocation(line: 5753, column: 4, scope: !15364)
!15378 = !DILocation(line: 5753, column: 32, scope: !15364)
!15379 = !DILocation(line: 5753, column: 7, scope: !15364)
!15380 = !DILocation(line: 5749, column: 11, scope: !15356)
!15381 = !DILocalVariable(name: "location", scope: !15382, file: !3, line: 5755, type: !1874)
!15382 = distinct !DILexicalBlock(scope: !15364, file: !3, line: 5754, column: 2)
!15383 = !DILocation(line: 5755, column: 15, scope: !15382)
!15384 = !DILocation(line: 5757, column: 30, scope: !15385)
!15385 = distinct !DILexicalBlock(scope: !15382, file: !3, line: 5757, column: 8)
!15386 = !DILocation(line: 5757, column: 9, scope: !15385)
!15387 = !DILocation(line: 5757, column: 8, scope: !15382)
!15388 = !DILocation(line: 5758, column: 17, scope: !15385)
!15389 = !DILocation(line: 5758, column: 15, scope: !15385)
!15390 = !DILocation(line: 5758, column: 6, scope: !15385)
!15391 = !DILocation(line: 5760, column: 34, scope: !15385)
!15392 = !DILocation(line: 5760, column: 17, scope: !15385)
!15393 = !DILocation(line: 5760, column: 15, scope: !15385)
!15394 = !DILocation(line: 5762, column: 16, scope: !15382)
!15395 = !DILocation(line: 5763, column: 24, scope: !15382)
!15396 = !DILocation(line: 5763, column: 9, scope: !15382)
!15397 = !DILocation(line: 5762, column: 4, scope: !15382)
!15398 = !DILocation(line: 5768, column: 2, scope: !15382)
!15399 = !DILocation(line: 5769, column: 5, scope: !15356)
!15400 = !DILocation(line: 5771, column: 10, scope: !15265)
!15401 = !DILocation(line: 5771, column: 3, scope: !15265)
!15402 = !DILocation(line: 5772, column: 1, scope: !15265)
!15403 = distinct !DISubprogram(name: "gimple_cond_make_false", scope: !742, file: !742, line: 2346, type: !15404, scopeLine: 2347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15404 = !DISubroutineType(types: !15405)
!15405 = !{null, !2076}
!15406 = !DILocalVariable(name: "gs", arg: 1, scope: !15403, file: !742, line: 2346, type: !2076)
!15407 = !DILocation(line: 2346, column: 32, scope: !15403)
!15408 = !DILocation(line: 2348, column: 24, scope: !15403)
!15409 = !DILocation(line: 2348, column: 28, scope: !15403)
!15410 = !DILocation(line: 2348, column: 3, scope: !15403)
!15411 = !DILocation(line: 2349, column: 24, scope: !15403)
!15412 = !DILocation(line: 2349, column: 28, scope: !15403)
!15413 = !DILocation(line: 2349, column: 3, scope: !15403)
!15414 = !DILocation(line: 2350, column: 3, scope: !15403)
!15415 = !DILocation(line: 2350, column: 7, scope: !15403)
!15416 = !DILocation(line: 2350, column: 14, scope: !15403)
!15417 = !DILocation(line: 2350, column: 22, scope: !15403)
!15418 = !DILocation(line: 2351, column: 1, scope: !15403)
!15419 = distinct !DISubprogram(name: "gimple_cond_make_true", scope: !742, file: !742, line: 2357, type: !15404, scopeLine: 2358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15420 = !DILocalVariable(name: "gs", arg: 1, scope: !15419, file: !742, line: 2357, type: !2076)
!15421 = !DILocation(line: 2357, column: 31, scope: !15419)
!15422 = !DILocation(line: 2359, column: 24, scope: !15419)
!15423 = !DILocation(line: 2359, column: 28, scope: !15419)
!15424 = !DILocation(line: 2359, column: 3, scope: !15419)
!15425 = !DILocation(line: 2360, column: 24, scope: !15419)
!15426 = !DILocation(line: 2360, column: 28, scope: !15419)
!15427 = !DILocation(line: 2360, column: 3, scope: !15419)
!15428 = !DILocation(line: 2361, column: 3, scope: !15419)
!15429 = !DILocation(line: 2361, column: 7, scope: !15419)
!15430 = !DILocation(line: 2361, column: 14, scope: !15419)
!15431 = !DILocation(line: 2361, column: 22, scope: !15419)
!15432 = !DILocation(line: 2362, column: 1, scope: !15419)
!15433 = distinct !DISubprogram(name: "gimple_has_location", scope: !742, file: !742, line: 1165, type: !6344, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15434 = !DILocalVariable(name: "g", arg: 1, scope: !15433, file: !742, line: 1165, type: !5524)
!15435 = !DILocation(line: 1165, column: 35, scope: !15433)
!15436 = !DILocation(line: 1167, column: 27, scope: !15433)
!15437 = !DILocation(line: 1167, column: 10, scope: !15433)
!15438 = !DILocation(line: 1167, column: 30, scope: !15433)
!15439 = !DILocation(line: 1167, column: 3, scope: !15433)
!15440 = distinct !DISubprogram(name: "gimple_location", scope: !742, file: !742, line: 1139, type: !15441, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15441 = !DISubroutineType(types: !15442)
!15442 = !{!1874, !5524}
!15443 = !DILocalVariable(name: "g", arg: 1, scope: !15440, file: !742, line: 1139, type: !5524)
!15444 = !DILocation(line: 1139, column: 31, scope: !15440)
!15445 = !DILocation(line: 1141, column: 10, scope: !15440)
!15446 = !DILocation(line: 1141, column: 13, scope: !15440)
!15447 = !DILocation(line: 1141, column: 20, scope: !15440)
!15448 = !DILocation(line: 1141, column: 3, scope: !15440)
!15449 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !742, file: !742, line: 2261, type: !15450, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15450 = !DISubroutineType(types: !15451)
!15451 = !{null, !2076, !1747}
!15452 = !DILocalVariable(name: "gs", arg: 1, scope: !15449, file: !742, line: 2261, type: !2076)
!15453 = !DILocation(line: 2261, column: 29, scope: !15449)
!15454 = !DILocalVariable(name: "lhs", arg: 2, scope: !15449, file: !742, line: 2261, type: !1747)
!15455 = !DILocation(line: 2261, column: 38, scope: !15449)
!15456 = !DILocation(line: 2264, column: 18, scope: !15449)
!15457 = !DILocation(line: 2264, column: 25, scope: !15449)
!15458 = !DILocation(line: 2264, column: 3, scope: !15449)
!15459 = !DILocation(line: 2265, column: 1, scope: !15449)
!15460 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !742, file: !742, line: 2292, type: !15450, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15461 = !DILocalVariable(name: "gs", arg: 1, scope: !15460, file: !742, line: 2292, type: !2076)
!15462 = !DILocation(line: 2292, column: 29, scope: !15460)
!15463 = !DILocalVariable(name: "rhs", arg: 2, scope: !15460, file: !742, line: 2292, type: !1747)
!15464 = !DILocation(line: 2292, column: 38, scope: !15460)
!15465 = !DILocation(line: 2295, column: 18, scope: !15460)
!15466 = !DILocation(line: 2295, column: 25, scope: !15460)
!15467 = !DILocation(line: 2295, column: 3, scope: !15460)
!15468 = !DILocation(line: 2296, column: 1, scope: !15460)
!15469 = distinct !DISubprogram(name: "gimple_set_op", scope: !742, file: !742, line: 1663, type: !5505, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15470 = !DILocalVariable(name: "gs", arg: 1, scope: !15469, file: !742, line: 1663, type: !2076)
!15471 = !DILocation(line: 1663, column: 23, scope: !15469)
!15472 = !DILocalVariable(name: "i", arg: 2, scope: !15469, file: !742, line: 1663, type: !7)
!15473 = !DILocation(line: 1663, column: 36, scope: !15469)
!15474 = !DILocalVariable(name: "op", arg: 3, scope: !15469, file: !742, line: 1663, type: !1747)
!15475 = !DILocation(line: 1663, column: 44, scope: !15469)
!15476 = !DILocation(line: 1665, column: 3, scope: !15469)
!15477 = !DILocation(line: 1671, column: 24, scope: !15469)
!15478 = !DILocation(line: 1671, column: 15, scope: !15469)
!15479 = !DILocation(line: 1671, column: 3, scope: !15469)
!15480 = !DILocation(line: 1671, column: 19, scope: !15469)
!15481 = !DILocation(line: 1671, column: 22, scope: !15469)
!15482 = !DILocation(line: 1672, column: 1, scope: !15469)
!15483 = distinct !DISubprogram(name: "simplify_truth_ops_using_ranges", scope: !3, file: !3, line: 6442, type: !15484, scopeLine: 6443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15484 = !DISubroutineType(types: !15485)
!15485 = !{!1866, !6761, !2076}
!15486 = !DILocalVariable(name: "gsi", arg: 1, scope: !15483, file: !3, line: 6442, type: !6761)
!15487 = !DILocation(line: 6442, column: 56, scope: !15483)
!15488 = !DILocalVariable(name: "stmt", arg: 2, scope: !15483, file: !3, line: 6442, type: !2076)
!15489 = !DILocation(line: 6442, column: 68, scope: !15483)
!15490 = !DILocalVariable(name: "rhs_code", scope: !15483, file: !3, line: 6444, type: !134)
!15491 = !DILocation(line: 6444, column: 18, scope: !15483)
!15492 = !DILocation(line: 6444, column: 53, scope: !15483)
!15493 = !DILocation(line: 6444, column: 29, scope: !15483)
!15494 = !DILocalVariable(name: "val", scope: !15483, file: !3, line: 6445, type: !1747)
!15495 = !DILocation(line: 6445, column: 8, scope: !15483)
!15496 = !DILocalVariable(name: "op0", scope: !15483, file: !3, line: 6446, type: !1747)
!15497 = !DILocation(line: 6446, column: 8, scope: !15483)
!15498 = !DILocalVariable(name: "op1", scope: !15483, file: !3, line: 6446, type: !1747)
!15499 = !DILocation(line: 6446, column: 13, scope: !15483)
!15500 = !DILocalVariable(name: "vr", scope: !15483, file: !3, line: 6447, type: !1741)
!15501 = !DILocation(line: 6447, column: 18, scope: !15483)
!15502 = !DILocalVariable(name: "sop", scope: !15483, file: !3, line: 6448, type: !1866)
!15503 = !DILocation(line: 6448, column: 8, scope: !15483)
!15504 = !DILocalVariable(name: "need_conversion", scope: !15483, file: !3, line: 6449, type: !1866)
!15505 = !DILocation(line: 6449, column: 8, scope: !15483)
!15506 = !DILocation(line: 6451, column: 29, scope: !15483)
!15507 = !DILocation(line: 6451, column: 9, scope: !15483)
!15508 = !DILocation(line: 6451, column: 7, scope: !15483)
!15509 = !DILocation(line: 6452, column: 7, scope: !15510)
!15510 = distinct !DILexicalBlock(scope: !15483, file: !3, line: 6452, column: 7)
!15511 = !DILocation(line: 6452, column: 40, scope: !15510)
!15512 = !DILocation(line: 6452, column: 7, scope: !15483)
!15513 = !DILocation(line: 6454, column: 11, scope: !15514)
!15514 = distinct !DILexicalBlock(scope: !15515, file: !3, line: 6454, column: 11)
!15515 = distinct !DILexicalBlock(scope: !15510, file: !3, line: 6453, column: 5)
!15516 = !DILocation(line: 6454, column: 27, scope: !15514)
!15517 = !DILocation(line: 6454, column: 11, scope: !15515)
!15518 = !DILocation(line: 6455, column: 2, scope: !15514)
!15519 = !DILocation(line: 6456, column: 29, scope: !15515)
!15520 = !DILocation(line: 6456, column: 12, scope: !15515)
!15521 = !DILocation(line: 6456, column: 10, scope: !15515)
!15522 = !DILocation(line: 6458, column: 48, scope: !15515)
!15523 = !DILocation(line: 6458, column: 52, scope: !15515)
!15524 = !DILocation(line: 6458, column: 13, scope: !15515)
!15525 = !DILocation(line: 6458, column: 11, scope: !15515)
!15526 = !DILocation(line: 6459, column: 12, scope: !15527)
!15527 = distinct !DILexicalBlock(scope: !15515, file: !3, line: 6459, column: 11)
!15528 = !DILocation(line: 6459, column: 16, scope: !15527)
!15529 = !DILocation(line: 6459, column: 34, scope: !15527)
!15530 = !DILocation(line: 6459, column: 20, scope: !15527)
!15531 = !DILocation(line: 6459, column: 11, scope: !15515)
!15532 = !DILocation(line: 6460, column: 9, scope: !15527)
!15533 = !DILocation(line: 6462, column: 48, scope: !15515)
!15534 = !DILocation(line: 6462, column: 52, scope: !15515)
!15535 = !DILocation(line: 6462, column: 13, scope: !15515)
!15536 = !DILocation(line: 6462, column: 11, scope: !15515)
!15537 = !DILocation(line: 6463, column: 12, scope: !15538)
!15538 = distinct !DILexicalBlock(scope: !15515, file: !3, line: 6463, column: 11)
!15539 = !DILocation(line: 6463, column: 16, scope: !15538)
!15540 = !DILocation(line: 6463, column: 34, scope: !15538)
!15541 = !DILocation(line: 6463, column: 20, scope: !15538)
!15542 = !DILocation(line: 6463, column: 11, scope: !15515)
!15543 = !DILocation(line: 6464, column: 9, scope: !15538)
!15544 = !DILocation(line: 6465, column: 5, scope: !15515)
!15545 = !DILocation(line: 6467, column: 7, scope: !15546)
!15546 = distinct !DILexicalBlock(scope: !15483, file: !3, line: 6467, column: 7)
!15547 = !DILocation(line: 6467, column: 16, scope: !15546)
!15548 = !DILocation(line: 6467, column: 7, scope: !15483)
!15549 = !DILocation(line: 6469, column: 16, scope: !15550)
!15550 = distinct !DILexicalBlock(scope: !15546, file: !3, line: 6468, column: 5)
!15551 = !DILocation(line: 6470, column: 28, scope: !15550)
!15552 = !DILocation(line: 6470, column: 13, scope: !15550)
!15553 = !DILocation(line: 6470, column: 11, scope: !15550)
!15554 = !DILocation(line: 6471, column: 5, scope: !15550)
!15555 = !DILocation(line: 6474, column: 33, scope: !15556)
!15556 = distinct !DILexicalBlock(scope: !15546, file: !3, line: 6473, column: 5)
!15557 = !DILocation(line: 6474, column: 13, scope: !15556)
!15558 = !DILocation(line: 6474, column: 11, scope: !15556)
!15559 = !DILocation(line: 6477, column: 36, scope: !15560)
!15560 = distinct !DILexicalBlock(scope: !15556, file: !3, line: 6477, column: 11)
!15561 = !DILocation(line: 6477, column: 11, scope: !15560)
!15562 = !DILocation(line: 6477, column: 11, scope: !15556)
!15563 = !DILocation(line: 6480, column: 8, scope: !15564)
!15564 = distinct !DILexicalBlock(scope: !15565, file: !3, line: 6480, column: 8)
!15565 = distinct !DILexicalBlock(scope: !15560, file: !3, line: 6478, column: 2)
!15566 = !DILocation(line: 6480, column: 17, scope: !15564)
!15567 = !DILocation(line: 6481, column: 8, scope: !15564)
!15568 = !DILocation(line: 6481, column: 11, scope: !15564)
!15569 = !DILocation(line: 6481, column: 20, scope: !15564)
!15570 = !DILocation(line: 6482, column: 8, scope: !15564)
!15571 = !DILocation(line: 6482, column: 11, scope: !15564)
!15572 = !DILocation(line: 6482, column: 20, scope: !15564)
!15573 = !DILocation(line: 6480, column: 8, scope: !15565)
!15574 = !DILocation(line: 6483, column: 6, scope: !15564)
!15575 = !DILocation(line: 6485, column: 24, scope: !15576)
!15576 = distinct !DILexicalBlock(scope: !15565, file: !3, line: 6485, column: 8)
!15577 = !DILocation(line: 6485, column: 9, scope: !15576)
!15578 = !DILocation(line: 6486, column: 8, scope: !15576)
!15579 = !DILocation(line: 6486, column: 26, scope: !15576)
!15580 = !DILocation(line: 6486, column: 12, scope: !15576)
!15581 = !DILocation(line: 6487, column: 8, scope: !15576)
!15582 = !DILocation(line: 6487, column: 31, scope: !15576)
!15583 = !DILocation(line: 6487, column: 12, scope: !15576)
!15584 = !DILocation(line: 6485, column: 8, scope: !15565)
!15585 = !DILocation(line: 6488, column: 6, scope: !15576)
!15586 = !DILocation(line: 6491, column: 8, scope: !15587)
!15587 = distinct !DILexicalBlock(scope: !15565, file: !3, line: 6491, column: 8)
!15588 = !DILocation(line: 6491, column: 17, scope: !15587)
!15589 = !DILocation(line: 6491, column: 8, scope: !15565)
!15590 = !DILocation(line: 6493, column: 17, scope: !15591)
!15591 = distinct !DILexicalBlock(scope: !15587, file: !3, line: 6492, column: 6)
!15592 = !DILocation(line: 6494, column: 14, scope: !15591)
!15593 = !DILocation(line: 6494, column: 12, scope: !15591)
!15594 = !DILocation(line: 6495, column: 6, scope: !15591)
!15595 = !DILocation(line: 6496, column: 2, scope: !15565)
!15596 = !DILocation(line: 6500, column: 8, scope: !15597)
!15597 = distinct !DILexicalBlock(scope: !15598, file: !3, line: 6500, column: 8)
!15598 = distinct !DILexicalBlock(scope: !15560, file: !3, line: 6498, column: 2)
!15599 = !DILocation(line: 6500, column: 17, scope: !15597)
!15600 = !DILocation(line: 6500, column: 8, scope: !15598)
!15601 = !DILocation(line: 6501, column: 6, scope: !15597)
!15602 = !DILocation(line: 6503, column: 8, scope: !15603)
!15603 = distinct !DILexicalBlock(scope: !15598, file: !3, line: 6503, column: 8)
!15604 = !DILocation(line: 6503, column: 41, scope: !15603)
!15605 = !DILocation(line: 6503, column: 8, scope: !15598)
!15606 = !DILocation(line: 6505, column: 30, scope: !15607)
!15607 = distinct !DILexicalBlock(scope: !15603, file: !3, line: 6504, column: 6)
!15608 = !DILocation(line: 6505, column: 13, scope: !15607)
!15609 = !DILocation(line: 6505, column: 11, scope: !15607)
!15610 = !DILocation(line: 6506, column: 49, scope: !15607)
!15611 = !DILocation(line: 6506, column: 53, scope: !15607)
!15612 = !DILocation(line: 6506, column: 14, scope: !15607)
!15613 = !DILocation(line: 6506, column: 12, scope: !15607)
!15614 = !DILocation(line: 6507, column: 13, scope: !15615)
!15615 = distinct !DILexicalBlock(scope: !15607, file: !3, line: 6507, column: 12)
!15616 = !DILocation(line: 6507, column: 17, scope: !15615)
!15617 = !DILocation(line: 6507, column: 35, scope: !15615)
!15618 = !DILocation(line: 6507, column: 21, scope: !15615)
!15619 = !DILocation(line: 6507, column: 12, scope: !15607)
!15620 = !DILocation(line: 6508, column: 10, scope: !15615)
!15621 = !DILocation(line: 6510, column: 49, scope: !15607)
!15622 = !DILocation(line: 6510, column: 53, scope: !15607)
!15623 = !DILocation(line: 6510, column: 14, scope: !15607)
!15624 = !DILocation(line: 6510, column: 12, scope: !15607)
!15625 = !DILocation(line: 6511, column: 13, scope: !15626)
!15626 = distinct !DILexicalBlock(scope: !15607, file: !3, line: 6511, column: 12)
!15627 = !DILocation(line: 6511, column: 17, scope: !15626)
!15628 = !DILocation(line: 6511, column: 35, scope: !15626)
!15629 = !DILocation(line: 6511, column: 21, scope: !15626)
!15630 = !DILocation(line: 6511, column: 12, scope: !15607)
!15631 = !DILocation(line: 6512, column: 10, scope: !15626)
!15632 = !DILocation(line: 6513, column: 6, scope: !15607)
!15633 = !DILocation(line: 6517, column: 7, scope: !15634)
!15634 = distinct !DILexicalBlock(scope: !15483, file: !3, line: 6517, column: 7)
!15635 = !DILocation(line: 6517, column: 11, scope: !15634)
!15636 = !DILocation(line: 6517, column: 14, scope: !15634)
!15637 = !DILocation(line: 6517, column: 7, scope: !15483)
!15638 = !DILocalVariable(name: "location", scope: !15639, file: !3, line: 6519, type: !1874)
!15639 = distinct !DILexicalBlock(scope: !15634, file: !3, line: 6518, column: 5)
!15640 = !DILocation(line: 6519, column: 18, scope: !15639)
!15641 = !DILocation(line: 6521, column: 33, scope: !15642)
!15642 = distinct !DILexicalBlock(scope: !15639, file: !3, line: 6521, column: 11)
!15643 = !DILocation(line: 6521, column: 12, scope: !15642)
!15644 = !DILocation(line: 6521, column: 11, scope: !15639)
!15645 = !DILocation(line: 6522, column: 13, scope: !15642)
!15646 = !DILocation(line: 6522, column: 11, scope: !15642)
!15647 = !DILocation(line: 6522, column: 2, scope: !15642)
!15648 = !DILocation(line: 6524, column: 30, scope: !15642)
!15649 = !DILocation(line: 6524, column: 13, scope: !15642)
!15650 = !DILocation(line: 6524, column: 11, scope: !15642)
!15651 = !DILocation(line: 6526, column: 11, scope: !15652)
!15652 = distinct !DILexicalBlock(scope: !15639, file: !3, line: 6526, column: 11)
!15653 = !DILocation(line: 6526, column: 20, scope: !15652)
!15654 = !DILocation(line: 6526, column: 38, scope: !15652)
!15655 = !DILocation(line: 6526, column: 41, scope: !15652)
!15656 = !DILocation(line: 6526, column: 50, scope: !15652)
!15657 = !DILocation(line: 6526, column: 11, scope: !15639)
!15658 = !DILocation(line: 6527, column: 21, scope: !15652)
!15659 = !DILocation(line: 6527, column: 9, scope: !15652)
!15660 = !DILocation(line: 6531, column: 21, scope: !15652)
!15661 = !DILocation(line: 6531, column: 9, scope: !15652)
!15662 = !DILocation(line: 6534, column: 5, scope: !15639)
!15663 = !DILocation(line: 6537, column: 33, scope: !15483)
!15664 = !DILocation(line: 6538, column: 12, scope: !15483)
!15665 = !DILocation(line: 6537, column: 6, scope: !15483)
!15666 = !DILocation(line: 6537, column: 5, scope: !15483)
!15667 = !DILocation(line: 6536, column: 19, scope: !15483)
!15668 = !DILocation(line: 6541, column: 7, scope: !15669)
!15669 = distinct !DILexicalBlock(scope: !15483, file: !3, line: 6541, column: 7)
!15670 = !DILocation(line: 6542, column: 7, scope: !15669)
!15671 = !DILocation(line: 6542, column: 11, scope: !15669)
!15672 = !DILocation(line: 6543, column: 7, scope: !15669)
!15673 = !DILocation(line: 6543, column: 10, scope: !15669)
!15674 = !DILocation(line: 6543, column: 43, scope: !15669)
!15675 = !DILocation(line: 6541, column: 7, scope: !15483)
!15676 = !DILocation(line: 6544, column: 5, scope: !15669)
!15677 = !DILocation(line: 6546, column: 11, scope: !15483)
!15678 = !DILocation(line: 6546, column: 3, scope: !15483)
!15679 = !DILocation(line: 6549, column: 16, scope: !15680)
!15680 = distinct !DILexicalBlock(scope: !15483, file: !3, line: 6547, column: 5)
!15681 = !DILocation(line: 6550, column: 7, scope: !15680)
!15682 = !DILocation(line: 6552, column: 16, scope: !15680)
!15683 = !DILocation(line: 6553, column: 7, scope: !15680)
!15684 = !DILocation(line: 6556, column: 26, scope: !15685)
!15685 = distinct !DILexicalBlock(scope: !15680, file: !3, line: 6556, column: 11)
!15686 = !DILocation(line: 6556, column: 11, scope: !15685)
!15687 = !DILocation(line: 6556, column: 11, scope: !15680)
!15688 = !DILocation(line: 6558, column: 36, scope: !15689)
!15689 = distinct !DILexicalBlock(scope: !15685, file: !3, line: 6557, column: 2)
!15690 = !DILocation(line: 6559, column: 8, scope: !15689)
!15691 = !DILocation(line: 6560, column: 8, scope: !15689)
!15692 = !DILocation(line: 6558, column: 4, scope: !15689)
!15693 = !DILocation(line: 6561, column: 28, scope: !15689)
!15694 = !DILocation(line: 6561, column: 17, scope: !15689)
!15695 = !DILocation(line: 6561, column: 4, scope: !15689)
!15696 = !DILocation(line: 6562, column: 4, scope: !15689)
!15697 = !DILocation(line: 6565, column: 16, scope: !15680)
!15698 = !DILocation(line: 6566, column: 7, scope: !15680)
!15699 = !DILocation(line: 6568, column: 7, scope: !15680)
!15700 = !DILocation(line: 6569, column: 5, scope: !15680)
!15701 = !DILocation(line: 6571, column: 7, scope: !15702)
!15702 = distinct !DILexicalBlock(scope: !15483, file: !3, line: 6571, column: 7)
!15703 = !DILocation(line: 6571, column: 7, scope: !15483)
!15704 = !DILocation(line: 6572, column: 5, scope: !15702)
!15705 = !DILocation(line: 6574, column: 35, scope: !15483)
!15706 = !DILocation(line: 6574, column: 40, scope: !15483)
!15707 = !DILocation(line: 6574, column: 50, scope: !15483)
!15708 = !DILocation(line: 6574, column: 55, scope: !15483)
!15709 = !DILocation(line: 6574, column: 3, scope: !15483)
!15710 = !DILocation(line: 6575, column: 27, scope: !15483)
!15711 = !DILocation(line: 6575, column: 16, scope: !15483)
!15712 = !DILocation(line: 6575, column: 3, scope: !15483)
!15713 = !DILocation(line: 6576, column: 3, scope: !15483)
!15714 = !DILocation(line: 6577, column: 1, scope: !15483)
!15715 = distinct !DISubprogram(name: "simplify_div_or_mod_using_ranges", scope: !3, file: !3, line: 6584, type: !6087, scopeLine: 6585, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15716 = !DILocalVariable(name: "stmt", arg: 1, scope: !15715, file: !3, line: 6584, type: !2076)
!15717 = !DILocation(line: 6584, column: 42, scope: !15715)
!15718 = !DILocalVariable(name: "rhs_code", scope: !15715, file: !3, line: 6586, type: !134)
!15719 = !DILocation(line: 6586, column: 18, scope: !15715)
!15720 = !DILocation(line: 6586, column: 53, scope: !15715)
!15721 = !DILocation(line: 6586, column: 29, scope: !15715)
!15722 = !DILocalVariable(name: "val", scope: !15715, file: !3, line: 6587, type: !1747)
!15723 = !DILocation(line: 6587, column: 8, scope: !15715)
!15724 = !DILocalVariable(name: "op0", scope: !15715, file: !3, line: 6588, type: !1747)
!15725 = !DILocation(line: 6588, column: 8, scope: !15715)
!15726 = !DILocation(line: 6588, column: 34, scope: !15715)
!15727 = !DILocation(line: 6588, column: 14, scope: !15715)
!15728 = !DILocalVariable(name: "op1", scope: !15715, file: !3, line: 6589, type: !1747)
!15729 = !DILocation(line: 6589, column: 8, scope: !15715)
!15730 = !DILocation(line: 6589, column: 34, scope: !15715)
!15731 = !DILocation(line: 6589, column: 14, scope: !15715)
!15732 = !DILocalVariable(name: "vr", scope: !15715, file: !3, line: 6590, type: !1741)
!15733 = !DILocation(line: 6590, column: 18, scope: !15715)
!15734 = !DILocation(line: 6590, column: 60, scope: !15715)
!15735 = !DILocation(line: 6590, column: 40, scope: !15715)
!15736 = !DILocation(line: 6590, column: 23, scope: !15715)
!15737 = !DILocation(line: 6592, column: 7, scope: !15738)
!15738 = distinct !DILexicalBlock(scope: !15715, file: !3, line: 6592, column: 7)
!15739 = !DILocation(line: 6592, column: 7, scope: !15715)
!15740 = !DILocation(line: 6594, column: 13, scope: !15741)
!15741 = distinct !DILexicalBlock(scope: !15738, file: !3, line: 6593, column: 5)
!15742 = !DILocation(line: 6594, column: 11, scope: !15741)
!15743 = !DILocation(line: 6595, column: 5, scope: !15741)
!15744 = !DILocalVariable(name: "sop", scope: !15745, file: !3, line: 6598, type: !1866)
!15745 = distinct !DILexicalBlock(scope: !15738, file: !3, line: 6597, column: 5)
!15746 = !DILocation(line: 6598, column: 12, scope: !15745)
!15747 = !DILocation(line: 6600, column: 48, scope: !15745)
!15748 = !DILocation(line: 6600, column: 52, scope: !15745)
!15749 = !DILocation(line: 6600, column: 13, scope: !15745)
!15750 = !DILocation(line: 6600, column: 11, scope: !15745)
!15751 = !DILocation(line: 6602, column: 11, scope: !15752)
!15752 = distinct !DILexicalBlock(scope: !15745, file: !3, line: 6602, column: 11)
!15753 = !DILocation(line: 6603, column: 4, scope: !15752)
!15754 = !DILocation(line: 6603, column: 7, scope: !15752)
!15755 = !DILocation(line: 6604, column: 4, scope: !15752)
!15756 = !DILocation(line: 6604, column: 21, scope: !15752)
!15757 = !DILocation(line: 6604, column: 7, scope: !15752)
!15758 = !DILocation(line: 6605, column: 4, scope: !15752)
!15759 = !DILocation(line: 6605, column: 7, scope: !15752)
!15760 = !DILocation(line: 6602, column: 11, scope: !15745)
!15761 = !DILocalVariable(name: "location", scope: !15762, file: !3, line: 6607, type: !1874)
!15762 = distinct !DILexicalBlock(scope: !15752, file: !3, line: 6606, column: 2)
!15763 = !DILocation(line: 6607, column: 15, scope: !15762)
!15764 = !DILocation(line: 6609, column: 30, scope: !15765)
!15765 = distinct !DILexicalBlock(scope: !15762, file: !3, line: 6609, column: 8)
!15766 = !DILocation(line: 6609, column: 9, scope: !15765)
!15767 = !DILocation(line: 6609, column: 8, scope: !15762)
!15768 = !DILocation(line: 6610, column: 17, scope: !15765)
!15769 = !DILocation(line: 6610, column: 15, scope: !15765)
!15770 = !DILocation(line: 6610, column: 6, scope: !15765)
!15771 = !DILocation(line: 6612, column: 34, scope: !15765)
!15772 = !DILocation(line: 6612, column: 17, scope: !15765)
!15773 = !DILocation(line: 6612, column: 15, scope: !15765)
!15774 = !DILocation(line: 6613, column: 16, scope: !15762)
!15775 = !DILocation(line: 6613, column: 4, scope: !15762)
!15776 = !DILocation(line: 6616, column: 2, scope: !15762)
!15777 = !DILocation(line: 6619, column: 7, scope: !15778)
!15778 = distinct !DILexicalBlock(scope: !15715, file: !3, line: 6619, column: 7)
!15779 = !DILocation(line: 6619, column: 11, scope: !15778)
!15780 = !DILocation(line: 6619, column: 28, scope: !15778)
!15781 = !DILocation(line: 6619, column: 14, scope: !15778)
!15782 = !DILocation(line: 6619, column: 7, scope: !15715)
!15783 = !DILocalVariable(name: "t", scope: !15784, file: !3, line: 6621, type: !1747)
!15784 = distinct !DILexicalBlock(scope: !15778, file: !3, line: 6620, column: 5)
!15785 = !DILocation(line: 6621, column: 12, scope: !15784)
!15786 = !DILocation(line: 6623, column: 11, scope: !15787)
!15787 = distinct !DILexicalBlock(scope: !15784, file: !3, line: 6623, column: 11)
!15788 = !DILocation(line: 6623, column: 20, scope: !15787)
!15789 = !DILocation(line: 6623, column: 11, scope: !15784)
!15790 = !DILocation(line: 6625, column: 45, scope: !15791)
!15791 = distinct !DILexicalBlock(scope: !15787, file: !3, line: 6624, column: 2)
!15792 = !DILocation(line: 6625, column: 34, scope: !15791)
!15793 = !DILocation(line: 6625, column: 8, scope: !15791)
!15794 = !DILocation(line: 6625, column: 6, scope: !15791)
!15795 = !DILocation(line: 6626, column: 32, scope: !15791)
!15796 = !DILocation(line: 6626, column: 4, scope: !15791)
!15797 = !DILocation(line: 6627, column: 28, scope: !15791)
!15798 = !DILocation(line: 6627, column: 34, scope: !15791)
!15799 = !DILocation(line: 6627, column: 4, scope: !15791)
!15800 = !DILocation(line: 6628, column: 28, scope: !15791)
!15801 = !DILocation(line: 6628, column: 34, scope: !15791)
!15802 = !DILocation(line: 6628, column: 4, scope: !15791)
!15803 = !DILocation(line: 6629, column: 2, scope: !15791)
!15804 = !DILocation(line: 6632, column: 23, scope: !15805)
!15805 = distinct !DILexicalBlock(scope: !15787, file: !3, line: 6631, column: 2)
!15806 = !DILocation(line: 6632, column: 8, scope: !15805)
!15807 = !DILocation(line: 6632, column: 6, scope: !15805)
!15808 = !DILocation(line: 6633, column: 37, scope: !15805)
!15809 = !DILocation(line: 6633, column: 42, scope: !15805)
!15810 = !DILocation(line: 6633, column: 8, scope: !15805)
!15811 = !DILocation(line: 6633, column: 6, scope: !15805)
!15812 = !DILocation(line: 6634, column: 8, scope: !15805)
!15813 = !DILocation(line: 6634, column: 6, scope: !15805)
!15814 = !DILocation(line: 6636, column: 32, scope: !15805)
!15815 = !DILocation(line: 6636, column: 4, scope: !15805)
!15816 = !DILocation(line: 6637, column: 28, scope: !15805)
!15817 = !DILocation(line: 6637, column: 34, scope: !15805)
!15818 = !DILocation(line: 6637, column: 4, scope: !15805)
!15819 = !DILocation(line: 6638, column: 28, scope: !15805)
!15820 = !DILocation(line: 6638, column: 34, scope: !15805)
!15821 = !DILocation(line: 6638, column: 4, scope: !15805)
!15822 = !DILocation(line: 6641, column: 20, scope: !15784)
!15823 = !DILocation(line: 6641, column: 7, scope: !15784)
!15824 = !DILocation(line: 6642, column: 7, scope: !15784)
!15825 = !DILocation(line: 6645, column: 3, scope: !15715)
!15826 = !DILocation(line: 6646, column: 1, scope: !15715)
!15827 = distinct !DISubprogram(name: "simplify_abs_using_ranges", scope: !3, file: !3, line: 6653, type: !6087, scopeLine: 6654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15828 = !DILocalVariable(name: "stmt", arg: 1, scope: !15827, file: !3, line: 6653, type: !2076)
!15829 = !DILocation(line: 6653, column: 35, scope: !15827)
!15830 = !DILocalVariable(name: "val", scope: !15827, file: !3, line: 6655, type: !1747)
!15831 = !DILocation(line: 6655, column: 8, scope: !15827)
!15832 = !DILocalVariable(name: "op", scope: !15827, file: !3, line: 6656, type: !1747)
!15833 = !DILocation(line: 6656, column: 8, scope: !15827)
!15834 = !DILocation(line: 6656, column: 33, scope: !15827)
!15835 = !DILocation(line: 6656, column: 13, scope: !15827)
!15836 = !DILocalVariable(name: "type", scope: !15827, file: !3, line: 6657, type: !1747)
!15837 = !DILocation(line: 6657, column: 8, scope: !15827)
!15838 = !DILocation(line: 6657, column: 15, scope: !15827)
!15839 = !DILocalVariable(name: "vr", scope: !15827, file: !3, line: 6658, type: !1741)
!15840 = !DILocation(line: 6658, column: 18, scope: !15827)
!15841 = !DILocation(line: 6658, column: 40, scope: !15827)
!15842 = !DILocation(line: 6658, column: 23, scope: !15827)
!15843 = !DILocation(line: 6660, column: 7, scope: !15844)
!15844 = distinct !DILexicalBlock(scope: !15827, file: !3, line: 6660, column: 7)
!15845 = !DILocation(line: 6660, column: 7, scope: !15827)
!15846 = !DILocation(line: 6662, column: 13, scope: !15847)
!15847 = distinct !DILexicalBlock(scope: !15844, file: !3, line: 6661, column: 5)
!15848 = !DILocation(line: 6662, column: 11, scope: !15847)
!15849 = !DILocation(line: 6663, column: 5, scope: !15847)
!15850 = !DILocation(line: 6664, column: 12, scope: !15851)
!15851 = distinct !DILexicalBlock(scope: !15844, file: !3, line: 6664, column: 12)
!15852 = !DILocation(line: 6664, column: 12, scope: !15844)
!15853 = !DILocalVariable(name: "sop", scope: !15854, file: !3, line: 6666, type: !1866)
!15854 = distinct !DILexicalBlock(scope: !15851, file: !3, line: 6665, column: 5)
!15855 = !DILocation(line: 6666, column: 12, scope: !15854)
!15856 = !DILocation(line: 6668, column: 48, scope: !15854)
!15857 = !DILocation(line: 6668, column: 52, scope: !15854)
!15858 = !DILocation(line: 6668, column: 13, scope: !15854)
!15859 = !DILocation(line: 6668, column: 11, scope: !15854)
!15860 = !DILocation(line: 6669, column: 12, scope: !15861)
!15861 = distinct !DILexicalBlock(scope: !15854, file: !3, line: 6669, column: 11)
!15862 = !DILocation(line: 6669, column: 11, scope: !15854)
!15863 = !DILocation(line: 6671, column: 8, scope: !15864)
!15864 = distinct !DILexicalBlock(scope: !15861, file: !3, line: 6670, column: 2)
!15865 = !DILocation(line: 6672, column: 45, scope: !15864)
!15866 = !DILocation(line: 6672, column: 49, scope: !15864)
!15867 = !DILocation(line: 6672, column: 10, scope: !15864)
!15868 = !DILocation(line: 6672, column: 8, scope: !15864)
!15869 = !DILocation(line: 6675, column: 8, scope: !15870)
!15870 = distinct !DILexicalBlock(scope: !15864, file: !3, line: 6675, column: 8)
!15871 = !DILocation(line: 6675, column: 8, scope: !15864)
!15872 = !DILocation(line: 6677, column: 27, scope: !15873)
!15873 = distinct !DILexicalBlock(scope: !15874, file: !3, line: 6677, column: 12)
!15874 = distinct !DILexicalBlock(scope: !15870, file: !3, line: 6676, column: 6)
!15875 = !DILocation(line: 6677, column: 12, scope: !15873)
!15876 = !DILocation(line: 6677, column: 12, scope: !15874)
!15877 = !DILocation(line: 6678, column: 9, scope: !15873)
!15878 = !DILocation(line: 6678, column: 7, scope: !15873)
!15879 = !DILocation(line: 6678, column: 3, scope: !15873)
!15880 = !DILocation(line: 6679, column: 31, scope: !15881)
!15881 = distinct !DILexicalBlock(scope: !15873, file: !3, line: 6679, column: 17)
!15882 = !DILocation(line: 6679, column: 17, scope: !15881)
!15883 = !DILocation(line: 6679, column: 17, scope: !15873)
!15884 = !DILocation(line: 6680, column: 9, scope: !15881)
!15885 = !DILocation(line: 6680, column: 7, scope: !15881)
!15886 = !DILocation(line: 6680, column: 3, scope: !15881)
!15887 = !DILocation(line: 6681, column: 6, scope: !15874)
!15888 = !DILocation(line: 6682, column: 2, scope: !15864)
!15889 = !DILocation(line: 6684, column: 11, scope: !15890)
!15890 = distinct !DILexicalBlock(scope: !15854, file: !3, line: 6684, column: 11)
!15891 = !DILocation(line: 6685, column: 4, scope: !15890)
!15892 = !DILocation(line: 6685, column: 22, scope: !15890)
!15893 = !DILocation(line: 6685, column: 8, scope: !15890)
!15894 = !DILocation(line: 6685, column: 27, scope: !15890)
!15895 = !DILocation(line: 6685, column: 45, scope: !15890)
!15896 = !DILocation(line: 6685, column: 30, scope: !15890)
!15897 = !DILocation(line: 6684, column: 11, scope: !15854)
!15898 = !DILocation(line: 6687, column: 8, scope: !15899)
!15899 = distinct !DILexicalBlock(scope: !15900, file: !3, line: 6687, column: 8)
!15900 = distinct !DILexicalBlock(scope: !15890, file: !3, line: 6686, column: 2)
!15901 = !DILocation(line: 6687, column: 12, scope: !15899)
!15902 = !DILocation(line: 6687, column: 15, scope: !15899)
!15903 = !DILocation(line: 6687, column: 8, scope: !15900)
!15904 = !DILocalVariable(name: "location", scope: !15905, file: !3, line: 6689, type: !1874)
!15905 = distinct !DILexicalBlock(scope: !15899, file: !3, line: 6688, column: 6)
!15906 = !DILocation(line: 6689, column: 19, scope: !15905)
!15907 = !DILocation(line: 6691, column: 34, scope: !15908)
!15908 = distinct !DILexicalBlock(scope: !15905, file: !3, line: 6691, column: 12)
!15909 = !DILocation(line: 6691, column: 13, scope: !15908)
!15910 = !DILocation(line: 6691, column: 12, scope: !15905)
!15911 = !DILocation(line: 6692, column: 14, scope: !15908)
!15912 = !DILocation(line: 6692, column: 12, scope: !15908)
!15913 = !DILocation(line: 6692, column: 3, scope: !15908)
!15914 = !DILocation(line: 6694, column: 31, scope: !15908)
!15915 = !DILocation(line: 6694, column: 14, scope: !15908)
!15916 = !DILocation(line: 6694, column: 12, scope: !15908)
!15917 = !DILocation(line: 6695, column: 20, scope: !15905)
!15918 = !DILocation(line: 6695, column: 8, scope: !15905)
!15919 = !DILocation(line: 6698, column: 6, scope: !15905)
!15920 = !DILocation(line: 6700, column: 28, scope: !15900)
!15921 = !DILocation(line: 6700, column: 34, scope: !15900)
!15922 = !DILocation(line: 6700, column: 4, scope: !15900)
!15923 = !DILocation(line: 6701, column: 22, scope: !15924)
!15924 = distinct !DILexicalBlock(scope: !15900, file: !3, line: 6701, column: 8)
!15925 = !DILocation(line: 6701, column: 8, scope: !15924)
!15926 = !DILocation(line: 6701, column: 8, scope: !15900)
!15927 = !DILocation(line: 6702, column: 34, scope: !15924)
!15928 = !DILocation(line: 6702, column: 6, scope: !15924)
!15929 = !DILocation(line: 6704, column: 34, scope: !15924)
!15930 = !DILocation(line: 6704, column: 6, scope: !15924)
!15931 = !DILocation(line: 6705, column: 17, scope: !15900)
!15932 = !DILocation(line: 6705, column: 4, scope: !15900)
!15933 = !DILocation(line: 6706, column: 4, scope: !15900)
!15934 = !DILocation(line: 6708, column: 5, scope: !15854)
!15935 = !DILocation(line: 6710, column: 3, scope: !15827)
!15936 = !DILocation(line: 6711, column: 1, scope: !15827)
!15937 = distinct !DISubprogram(name: "simplify_cond_using_ranges", scope: !3, file: !3, line: 6782, type: !6087, scopeLine: 6783, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!15938 = !DILocalVariable(name: "stmt", arg: 1, scope: !15937, file: !3, line: 6782, type: !2076)
!15939 = !DILocation(line: 6782, column: 36, scope: !15937)
!15940 = !DILocalVariable(name: "op0", scope: !15937, file: !3, line: 6784, type: !1747)
!15941 = !DILocation(line: 6784, column: 8, scope: !15937)
!15942 = !DILocation(line: 6784, column: 31, scope: !15937)
!15943 = !DILocation(line: 6784, column: 14, scope: !15937)
!15944 = !DILocalVariable(name: "op1", scope: !15937, file: !3, line: 6785, type: !1747)
!15945 = !DILocation(line: 6785, column: 8, scope: !15937)
!15946 = !DILocation(line: 6785, column: 31, scope: !15937)
!15947 = !DILocation(line: 6785, column: 14, scope: !15937)
!15948 = !DILocalVariable(name: "cond_code", scope: !15937, file: !3, line: 6786, type: !134)
!15949 = !DILocation(line: 6786, column: 18, scope: !15937)
!15950 = !DILocation(line: 6786, column: 48, scope: !15937)
!15951 = !DILocation(line: 6786, column: 30, scope: !15937)
!15952 = !DILocation(line: 6788, column: 7, scope: !15953)
!15953 = distinct !DILexicalBlock(scope: !15937, file: !3, line: 6788, column: 7)
!15954 = !DILocation(line: 6788, column: 17, scope: !15953)
!15955 = !DILocation(line: 6789, column: 7, scope: !15953)
!15956 = !DILocation(line: 6789, column: 10, scope: !15953)
!15957 = !DILocation(line: 6789, column: 20, scope: !15953)
!15958 = !DILocation(line: 6790, column: 7, scope: !15953)
!15959 = !DILocation(line: 6790, column: 10, scope: !15953)
!15960 = !DILocation(line: 6790, column: 26, scope: !15953)
!15961 = !DILocation(line: 6791, column: 7, scope: !15953)
!15962 = !DILocation(line: 6791, column: 10, scope: !15953)
!15963 = !DILocation(line: 6792, column: 7, scope: !15953)
!15964 = !DILocation(line: 6792, column: 35, scope: !15953)
!15965 = !DILocation(line: 6792, column: 10, scope: !15953)
!15966 = !DILocation(line: 6788, column: 7, scope: !15937)
!15967 = !DILocalVariable(name: "vr", scope: !15968, file: !3, line: 6794, type: !1741)
!15968 = distinct !DILexicalBlock(scope: !15953, file: !3, line: 6793, column: 5)
!15969 = !DILocation(line: 6794, column: 22, scope: !15968)
!15970 = !DILocation(line: 6794, column: 44, scope: !15968)
!15971 = !DILocation(line: 6794, column: 27, scope: !15968)
!15972 = !DILocation(line: 6798, column: 11, scope: !15973)
!15973 = distinct !DILexicalBlock(scope: !15968, file: !3, line: 6798, column: 11)
!15974 = !DILocation(line: 6798, column: 15, scope: !15973)
!15975 = !DILocation(line: 6798, column: 20, scope: !15973)
!15976 = !DILocation(line: 6798, column: 11, scope: !15968)
!15977 = !DILocalVariable(name: "new_tree", scope: !15978, file: !3, line: 6800, type: !1747)
!15978 = distinct !DILexicalBlock(scope: !15973, file: !3, line: 6799, column: 2)
!15979 = !DILocation(line: 6800, column: 9, scope: !15978)
!15980 = !DILocation(line: 6800, column: 42, scope: !15978)
!15981 = !DILocation(line: 6800, column: 53, scope: !15978)
!15982 = !DILocation(line: 6800, column: 58, scope: !15978)
!15983 = !DILocation(line: 6800, column: 63, scope: !15978)
!15984 = !DILocation(line: 6800, column: 20, scope: !15978)
!15985 = !DILocation(line: 6802, column: 8, scope: !15986)
!15986 = distinct !DILexicalBlock(scope: !15978, file: !3, line: 6802, column: 8)
!15987 = !DILocation(line: 6802, column: 8, scope: !15978)
!15988 = !DILocation(line: 6804, column: 12, scope: !15989)
!15989 = distinct !DILexicalBlock(scope: !15990, file: !3, line: 6804, column: 12)
!15990 = distinct !DILexicalBlock(scope: !15986, file: !3, line: 6803, column: 6)
!15991 = !DILocation(line: 6804, column: 12, scope: !15990)
!15992 = !DILocation(line: 6806, column: 14, scope: !15993)
!15993 = distinct !DILexicalBlock(scope: !15989, file: !3, line: 6805, column: 3)
!15994 = !DILocation(line: 6806, column: 5, scope: !15993)
!15995 = !DILocation(line: 6807, column: 24, scope: !15993)
!15996 = !DILocation(line: 6807, column: 35, scope: !15993)
!15997 = !DILocation(line: 6807, column: 5, scope: !15993)
!15998 = !DILocation(line: 6808, column: 14, scope: !15993)
!15999 = !DILocation(line: 6808, column: 5, scope: !15993)
!16000 = !DILocation(line: 6809, column: 3, scope: !15993)
!16001 = !DILocation(line: 6811, column: 30, scope: !15990)
!16002 = !DILocation(line: 6811, column: 8, scope: !15990)
!16003 = !DILocation(line: 6812, column: 29, scope: !15990)
!16004 = !DILocation(line: 6812, column: 35, scope: !15990)
!16005 = !DILocation(line: 6812, column: 8, scope: !15990)
!16006 = !DILocation(line: 6813, column: 29, scope: !15990)
!16007 = !DILocation(line: 6813, column: 35, scope: !15990)
!16008 = !DILocation(line: 6813, column: 8, scope: !15990)
!16009 = !DILocation(line: 6815, column: 21, scope: !15990)
!16010 = !DILocation(line: 6815, column: 8, scope: !15990)
!16011 = !DILocation(line: 6817, column: 12, scope: !16012)
!16012 = distinct !DILexicalBlock(scope: !15990, file: !3, line: 6817, column: 12)
!16013 = !DILocation(line: 6817, column: 12, scope: !15990)
!16014 = !DILocation(line: 6819, column: 24, scope: !16015)
!16015 = distinct !DILexicalBlock(scope: !16012, file: !3, line: 6818, column: 3)
!16016 = !DILocation(line: 6819, column: 35, scope: !16015)
!16017 = !DILocation(line: 6819, column: 5, scope: !16015)
!16018 = !DILocation(line: 6820, column: 14, scope: !16015)
!16019 = !DILocation(line: 6820, column: 5, scope: !16015)
!16020 = !DILocation(line: 6821, column: 3, scope: !16015)
!16021 = !DILocation(line: 6823, column: 8, scope: !15990)
!16022 = !DILocation(line: 6829, column: 40, scope: !15978)
!16023 = !DILocation(line: 6829, column: 16, scope: !15978)
!16024 = !DILocation(line: 6829, column: 14, scope: !15978)
!16025 = !DILocation(line: 6830, column: 37, scope: !15978)
!16026 = !DILocation(line: 6830, column: 48, scope: !15978)
!16027 = !DILocation(line: 6830, column: 53, scope: !15978)
!16028 = !DILocation(line: 6830, column: 58, scope: !15978)
!16029 = !DILocation(line: 6830, column: 15, scope: !15978)
!16030 = !DILocation(line: 6830, column: 13, scope: !15978)
!16031 = !DILocation(line: 6832, column: 8, scope: !16032)
!16032 = distinct !DILexicalBlock(scope: !15978, file: !3, line: 6832, column: 8)
!16033 = !DILocation(line: 6832, column: 8, scope: !15978)
!16034 = !DILocation(line: 6834, column: 12, scope: !16035)
!16035 = distinct !DILexicalBlock(scope: !16036, file: !3, line: 6834, column: 12)
!16036 = distinct !DILexicalBlock(scope: !16032, file: !3, line: 6833, column: 6)
!16037 = !DILocation(line: 6834, column: 12, scope: !16036)
!16038 = !DILocation(line: 6836, column: 14, scope: !16039)
!16039 = distinct !DILexicalBlock(scope: !16035, file: !3, line: 6835, column: 3)
!16040 = !DILocation(line: 6836, column: 5, scope: !16039)
!16041 = !DILocation(line: 6837, column: 24, scope: !16039)
!16042 = !DILocation(line: 6837, column: 35, scope: !16039)
!16043 = !DILocation(line: 6837, column: 5, scope: !16039)
!16044 = !DILocation(line: 6838, column: 14, scope: !16039)
!16045 = !DILocation(line: 6838, column: 5, scope: !16039)
!16046 = !DILocation(line: 6839, column: 3, scope: !16039)
!16047 = !DILocation(line: 6841, column: 30, scope: !16036)
!16048 = !DILocation(line: 6841, column: 8, scope: !16036)
!16049 = !DILocation(line: 6842, column: 29, scope: !16036)
!16050 = !DILocation(line: 6842, column: 35, scope: !16036)
!16051 = !DILocation(line: 6842, column: 8, scope: !16036)
!16052 = !DILocation(line: 6843, column: 29, scope: !16036)
!16053 = !DILocation(line: 6843, column: 35, scope: !16036)
!16054 = !DILocation(line: 6843, column: 8, scope: !16036)
!16055 = !DILocation(line: 6845, column: 21, scope: !16036)
!16056 = !DILocation(line: 6845, column: 8, scope: !16036)
!16057 = !DILocation(line: 6847, column: 12, scope: !16058)
!16058 = distinct !DILexicalBlock(scope: !16036, file: !3, line: 6847, column: 12)
!16059 = !DILocation(line: 6847, column: 12, scope: !16036)
!16060 = !DILocation(line: 6849, column: 24, scope: !16061)
!16061 = distinct !DILexicalBlock(scope: !16058, file: !3, line: 6848, column: 3)
!16062 = !DILocation(line: 6849, column: 35, scope: !16061)
!16063 = !DILocation(line: 6849, column: 5, scope: !16061)
!16064 = !DILocation(line: 6850, column: 14, scope: !16061)
!16065 = !DILocation(line: 6850, column: 5, scope: !16061)
!16066 = !DILocation(line: 6851, column: 3, scope: !16061)
!16067 = !DILocation(line: 6853, column: 8, scope: !16036)
!16068 = !DILocation(line: 6855, column: 2, scope: !15978)
!16069 = !DILocation(line: 6856, column: 5, scope: !15968)
!16070 = !DILocation(line: 6858, column: 3, scope: !15937)
!16071 = !DILocation(line: 6859, column: 1, scope: !15937)
!16072 = distinct !DISubprogram(name: "simplify_switch_using_ranges", scope: !3, file: !3, line: 6865, type: !6087, scopeLine: 6866, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16073 = !DILocalVariable(name: "stmt", arg: 1, scope: !16072, file: !3, line: 6865, type: !2076)
!16074 = !DILocation(line: 6865, column: 38, scope: !16072)
!16075 = !DILocalVariable(name: "op", scope: !16072, file: !3, line: 6867, type: !1747)
!16076 = !DILocation(line: 6867, column: 8, scope: !16072)
!16077 = !DILocation(line: 6867, column: 34, scope: !16072)
!16078 = !DILocation(line: 6867, column: 13, scope: !16072)
!16079 = !DILocalVariable(name: "vr", scope: !16072, file: !3, line: 6868, type: !1741)
!16080 = !DILocation(line: 6868, column: 18, scope: !16072)
!16081 = !DILocalVariable(name: "take_default", scope: !16072, file: !3, line: 6869, type: !1866)
!16082 = !DILocation(line: 6869, column: 8, scope: !16072)
!16083 = !DILocalVariable(name: "e", scope: !16072, file: !3, line: 6870, type: !2056)
!16084 = !DILocation(line: 6870, column: 8, scope: !16072)
!16085 = !DILocalVariable(name: "ei", scope: !16072, file: !3, line: 6871, type: !5606)
!16086 = !DILocation(line: 6871, column: 17, scope: !16072)
!16087 = !DILocalVariable(name: "i", scope: !16072, file: !3, line: 6872, type: !2221)
!16088 = !DILocation(line: 6872, column: 10, scope: !16072)
!16089 = !DILocalVariable(name: "j", scope: !16072, file: !3, line: 6872, type: !2221)
!16090 = !DILocation(line: 6872, column: 17, scope: !16072)
!16091 = !DILocalVariable(name: "n", scope: !16072, file: !3, line: 6872, type: !2221)
!16092 = !DILocation(line: 6872, column: 24, scope: !16072)
!16093 = !DILocalVariable(name: "n2", scope: !16072, file: !3, line: 6872, type: !2221)
!16094 = !DILocation(line: 6872, column: 27, scope: !16072)
!16095 = !DILocalVariable(name: "vec2", scope: !16072, file: !3, line: 6873, type: !1747)
!16096 = !DILocation(line: 6873, column: 8, scope: !16072)
!16097 = !DILocalVariable(name: "su", scope: !16072, file: !3, line: 6874, type: !3162)
!16098 = !DILocation(line: 6874, column: 17, scope: !16072)
!16099 = !DILocation(line: 6876, column: 7, scope: !16100)
!16100 = distinct !DILexicalBlock(scope: !16072, file: !3, line: 6876, column: 7)
!16101 = !DILocation(line: 6876, column: 22, scope: !16100)
!16102 = !DILocation(line: 6876, column: 7, scope: !16072)
!16103 = !DILocation(line: 6878, column: 29, scope: !16104)
!16104 = distinct !DILexicalBlock(scope: !16100, file: !3, line: 6877, column: 5)
!16105 = !DILocation(line: 6878, column: 12, scope: !16104)
!16106 = !DILocation(line: 6878, column: 10, scope: !16104)
!16107 = !DILocation(line: 6881, column: 11, scope: !16108)
!16108 = distinct !DILexicalBlock(scope: !16104, file: !3, line: 6881, column: 11)
!16109 = !DILocation(line: 6881, column: 15, scope: !16108)
!16110 = !DILocation(line: 6881, column: 20, scope: !16108)
!16111 = !DILocation(line: 6882, column: 4, scope: !16108)
!16112 = !DILocation(line: 6882, column: 25, scope: !16108)
!16113 = !DILocation(line: 6882, column: 7, scope: !16108)
!16114 = !DILocation(line: 6881, column: 11, scope: !16104)
!16115 = !DILocation(line: 6883, column: 2, scope: !16108)
!16116 = !DILocation(line: 6886, column: 46, scope: !16104)
!16117 = !DILocation(line: 6886, column: 52, scope: !16104)
!16118 = !DILocation(line: 6886, column: 56, scope: !16104)
!16119 = !DILocation(line: 6886, column: 61, scope: !16104)
!16120 = !DILocation(line: 6886, column: 65, scope: !16104)
!16121 = !DILocation(line: 6886, column: 23, scope: !16104)
!16122 = !DILocation(line: 6886, column: 22, scope: !16104)
!16123 = !DILocation(line: 6886, column: 20, scope: !16104)
!16124 = !DILocation(line: 6887, column: 5, scope: !16104)
!16125 = !DILocation(line: 6888, column: 12, scope: !16126)
!16126 = distinct !DILexicalBlock(scope: !16100, file: !3, line: 6888, column: 12)
!16127 = !DILocation(line: 6888, column: 27, scope: !16126)
!16128 = !DILocation(line: 6888, column: 12, scope: !16100)
!16129 = !DILocation(line: 6890, column: 46, scope: !16130)
!16130 = distinct !DILexicalBlock(scope: !16126, file: !3, line: 6889, column: 5)
!16131 = !DILocation(line: 6890, column: 55, scope: !16130)
!16132 = !DILocation(line: 6890, column: 23, scope: !16130)
!16133 = !DILocation(line: 6890, column: 22, scope: !16130)
!16134 = !DILocation(line: 6890, column: 20, scope: !16130)
!16135 = !DILocation(line: 6891, column: 11, scope: !16136)
!16136 = distinct !DILexicalBlock(scope: !16130, file: !3, line: 6891, column: 11)
!16137 = !DILocation(line: 6891, column: 11, scope: !16130)
!16138 = !DILocation(line: 6893, column: 6, scope: !16139)
!16139 = distinct !DILexicalBlock(scope: !16136, file: !3, line: 6892, column: 2)
!16140 = !DILocation(line: 6894, column: 6, scope: !16139)
!16141 = !DILocation(line: 6895, column: 2, scope: !16139)
!16142 = !DILocation(line: 6898, column: 8, scope: !16143)
!16143 = distinct !DILexicalBlock(scope: !16136, file: !3, line: 6897, column: 2)
!16144 = !DILocation(line: 6898, column: 6, scope: !16143)
!16145 = !DILocation(line: 6900, column: 5, scope: !16130)
!16146 = !DILocation(line: 6902, column: 5, scope: !16126)
!16147 = !DILocation(line: 6904, column: 33, scope: !16072)
!16148 = !DILocation(line: 6904, column: 7, scope: !16072)
!16149 = !DILocation(line: 6904, column: 5, scope: !16072)
!16150 = !DILocation(line: 6907, column: 7, scope: !16151)
!16151 = distinct !DILexicalBlock(scope: !16072, file: !3, line: 6907, column: 7)
!16152 = !DILocation(line: 6907, column: 9, scope: !16151)
!16153 = !DILocation(line: 6908, column: 7, scope: !16151)
!16154 = !DILocation(line: 6908, column: 10, scope: !16151)
!16155 = !DILocation(line: 6908, column: 15, scope: !16151)
!16156 = !DILocation(line: 6908, column: 17, scope: !16151)
!16157 = !DILocation(line: 6908, column: 12, scope: !16151)
!16158 = !DILocation(line: 6909, column: 7, scope: !16151)
!16159 = !DILocation(line: 6909, column: 10, scope: !16151)
!16160 = !DILocation(line: 6907, column: 7, scope: !16072)
!16161 = !DILocation(line: 6910, column: 5, scope: !16151)
!16162 = !DILocation(line: 6913, column: 10, scope: !16072)
!16163 = !DILocation(line: 6913, column: 8, scope: !16072)
!16164 = !DILocation(line: 6914, column: 6, scope: !16072)
!16165 = !DILocation(line: 6917, column: 7, scope: !16166)
!16166 = distinct !DILexicalBlock(scope: !16072, file: !3, line: 6917, column: 7)
!16167 = !DILocation(line: 6917, column: 7, scope: !16072)
!16168 = !DILocation(line: 6918, column: 62, scope: !16166)
!16169 = !DILocation(line: 6918, column: 33, scope: !16166)
!16170 = !DILocation(line: 6918, column: 5, scope: !16166)
!16171 = !DILocation(line: 6918, column: 31, scope: !16166)
!16172 = !DILocation(line: 6920, column: 3, scope: !16072)
!16173 = !DILocation(line: 6920, column: 10, scope: !16174)
!16174 = distinct !DILexicalBlock(scope: !16175, file: !3, line: 6920, column: 3)
!16175 = distinct !DILexicalBlock(scope: !16072, file: !3, line: 6920, column: 3)
!16176 = !DILocation(line: 6920, column: 15, scope: !16174)
!16177 = !DILocation(line: 6920, column: 12, scope: !16174)
!16178 = !DILocation(line: 6920, column: 3, scope: !16175)
!16179 = !DILocation(line: 6921, column: 52, scope: !16174)
!16180 = !DILocation(line: 6921, column: 58, scope: !16174)
!16181 = !DILocation(line: 6921, column: 31, scope: !16174)
!16182 = !DILocation(line: 6921, column: 5, scope: !16174)
!16183 = !DILocation(line: 6921, column: 29, scope: !16174)
!16184 = !DILocation(line: 6920, column: 18, scope: !16174)
!16185 = !DILocation(line: 6920, column: 23, scope: !16174)
!16186 = !DILocation(line: 6920, column: 3, scope: !16174)
!16187 = distinct !{!16187, !16178, !16188}
!16188 = !DILocation(line: 6921, column: 59, scope: !16175)
!16189 = !DILocation(line: 6924, column: 10, scope: !16190)
!16190 = distinct !DILexicalBlock(scope: !16072, file: !3, line: 6924, column: 3)
!16191 = !DILocation(line: 6924, column: 8, scope: !16190)
!16192 = !DILocation(line: 6924, column: 15, scope: !16193)
!16193 = distinct !DILexicalBlock(scope: !16190, file: !3, line: 6924, column: 3)
!16194 = !DILocation(line: 6924, column: 19, scope: !16193)
!16195 = !DILocation(line: 6924, column: 17, scope: !16193)
!16196 = !DILocation(line: 6924, column: 3, scope: !16190)
!16197 = !DILocation(line: 6926, column: 33, scope: !16198)
!16198 = distinct !DILexicalBlock(scope: !16193, file: !3, line: 6925, column: 5)
!16199 = !DILocation(line: 6926, column: 22, scope: !16198)
!16200 = !DILocation(line: 6927, column: 8, scope: !16198)
!16201 = !DILocation(line: 6926, column: 11, scope: !16198)
!16202 = !DILocation(line: 6926, column: 9, scope: !16198)
!16203 = !DILocation(line: 6928, column: 7, scope: !16198)
!16204 = !DILocation(line: 6928, column: 10, scope: !16198)
!16205 = !DILocation(line: 6928, column: 14, scope: !16198)
!16206 = !DILocation(line: 6929, column: 5, scope: !16198)
!16207 = !DILocation(line: 6924, column: 23, scope: !16193)
!16208 = !DILocation(line: 6924, column: 3, scope: !16193)
!16209 = distinct !{!16209, !16196, !16210}
!16210 = !DILocation(line: 6929, column: 5, scope: !16190)
!16211 = !DILocation(line: 6932, column: 3, scope: !16212)
!16212 = distinct !DILexicalBlock(scope: !16072, file: !3, line: 6932, column: 3)
!16213 = !DILocation(line: 6932, column: 3, scope: !16214)
!16214 = distinct !DILexicalBlock(scope: !16212, file: !3, line: 6932, column: 3)
!16215 = !DILocation(line: 6934, column: 11, scope: !16216)
!16216 = distinct !DILexicalBlock(scope: !16217, file: !3, line: 6934, column: 11)
!16217 = distinct !DILexicalBlock(scope: !16214, file: !3, line: 6933, column: 5)
!16218 = !DILocation(line: 6934, column: 14, scope: !16216)
!16219 = !DILocation(line: 6934, column: 18, scope: !16216)
!16220 = !DILocation(line: 6934, column: 11, scope: !16217)
!16221 = !DILocation(line: 6936, column: 4, scope: !16222)
!16222 = distinct !DILexicalBlock(scope: !16216, file: !3, line: 6935, column: 2)
!16223 = !DILocation(line: 6936, column: 7, scope: !16222)
!16224 = !DILocation(line: 6936, column: 11, scope: !16222)
!16225 = !DILocation(line: 6937, column: 4, scope: !16222)
!16226 = !DILocation(line: 6940, column: 11, scope: !16227)
!16227 = distinct !DILexicalBlock(scope: !16217, file: !3, line: 6940, column: 11)
!16228 = !DILocation(line: 6940, column: 21, scope: !16227)
!16229 = !DILocation(line: 6940, column: 25, scope: !16227)
!16230 = !DILocation(line: 6940, column: 36, scope: !16227)
!16231 = !DILocation(line: 6940, column: 11, scope: !16217)
!16232 = !DILocation(line: 6942, column: 13, scope: !16233)
!16233 = distinct !DILexicalBlock(scope: !16227, file: !3, line: 6941, column: 2)
!16234 = !DILocation(line: 6942, column: 4, scope: !16233)
!16235 = !DILocation(line: 6943, column: 2, scope: !16233)
!16236 = !DILocation(line: 6944, column: 7, scope: !16217)
!16237 = !DILocation(line: 6945, column: 7, scope: !16217)
!16238 = !DILocation(line: 6945, column: 10, scope: !16217)
!16239 = !DILocation(line: 6945, column: 16, scope: !16217)
!16240 = !DILocation(line: 6946, column: 5, scope: !16217)
!16241 = distinct !{!16241, !16211, !16242}
!16242 = !DILocation(line: 6946, column: 5, scope: !16212)
!16243 = !DILocation(line: 6949, column: 13, scope: !16072)
!16244 = !DILocation(line: 6949, column: 6, scope: !16072)
!16245 = !DILocation(line: 6949, column: 11, scope: !16072)
!16246 = !DILocation(line: 6950, column: 12, scope: !16072)
!16247 = !DILocation(line: 6950, column: 6, scope: !16072)
!16248 = !DILocation(line: 6950, column: 10, scope: !16072)
!16249 = !DILocation(line: 6951, column: 3, scope: !16072)
!16250 = !DILocation(line: 6952, column: 3, scope: !16072)
!16251 = !DILocation(line: 6953, column: 1, scope: !16072)
!16252 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !742, file: !742, line: 1694, type: !5522, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16253 = !DILocalVariable(name: "gs", arg: 1, scope: !16252, file: !742, line: 1694, type: !5524)
!16254 = !DILocation(line: 1694, column: 33, scope: !16252)
!16255 = !DILocation(line: 1697, column: 21, scope: !16252)
!16256 = !DILocation(line: 1697, column: 10, scope: !16252)
!16257 = !DILocation(line: 1697, column: 3, scope: !16252)
!16258 = distinct !DISubprogram(name: "update_stmt", scope: !742, file: !742, line: 1456, type: !15404, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16259 = !DILocalVariable(name: "s", arg: 1, scope: !16258, file: !742, line: 1456, type: !2076)
!16260 = !DILocation(line: 1456, column: 21, scope: !16258)
!16261 = !DILocation(line: 1458, column: 23, scope: !16262)
!16262 = distinct !DILexicalBlock(scope: !16258, file: !742, line: 1458, column: 7)
!16263 = !DILocation(line: 1458, column: 7, scope: !16262)
!16264 = !DILocation(line: 1458, column: 7, scope: !16258)
!16265 = !DILocation(line: 1460, column: 28, scope: !16266)
!16266 = distinct !DILexicalBlock(scope: !16262, file: !742, line: 1459, column: 5)
!16267 = !DILocation(line: 1460, column: 7, scope: !16266)
!16268 = !DILocation(line: 1461, column: 29, scope: !16266)
!16269 = !DILocation(line: 1461, column: 7, scope: !16266)
!16270 = !DILocation(line: 1462, column: 5, scope: !16266)
!16271 = !DILocation(line: 1463, column: 1, scope: !16258)
!16272 = distinct !DISubprogram(name: "gimple_assign_set_rhs_code", scope: !742, file: !742, line: 1832, type: !16273, scopeLine: 1833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16273 = !DISubroutineType(types: !16274)
!16274 = !{null, !2076, !134}
!16275 = !DILocalVariable(name: "s", arg: 1, scope: !16272, file: !742, line: 1832, type: !2076)
!16276 = !DILocation(line: 1832, column: 36, scope: !16272)
!16277 = !DILocalVariable(name: "code", arg: 2, scope: !16272, file: !742, line: 1832, type: !134)
!16278 = !DILocation(line: 1832, column: 54, scope: !16272)
!16279 = !DILocation(line: 1835, column: 23, scope: !16272)
!16280 = !DILocation(line: 1835, column: 3, scope: !16272)
!16281 = !DILocation(line: 1835, column: 6, scope: !16272)
!16282 = !DILocation(line: 1835, column: 13, scope: !16272)
!16283 = !DILocation(line: 1835, column: 21, scope: !16272)
!16284 = !DILocation(line: 1836, column: 1, scope: !16272)
!16285 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !742, file: !742, line: 1747, type: !15450, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16286 = !DILocalVariable(name: "gs", arg: 1, scope: !16285, file: !742, line: 1747, type: !2076)
!16287 = !DILocation(line: 1747, column: 32, scope: !16285)
!16288 = !DILocalVariable(name: "rhs", arg: 2, scope: !16285, file: !742, line: 1747, type: !1747)
!16289 = !DILocation(line: 1747, column: 41, scope: !16285)
!16290 = !DILocation(line: 1751, column: 18, scope: !16285)
!16291 = !DILocation(line: 1751, column: 25, scope: !16285)
!16292 = !DILocation(line: 1751, column: 3, scope: !16285)
!16293 = !DILocation(line: 1752, column: 1, scope: !16285)
!16294 = distinct !DISubprogram(name: "gimple_assign_set_rhs2", scope: !742, file: !742, line: 1784, type: !15450, scopeLine: 1785, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16295 = !DILocalVariable(name: "gs", arg: 1, scope: !16294, file: !742, line: 1784, type: !2076)
!16296 = !DILocation(line: 1784, column: 32, scope: !16294)
!16297 = !DILocalVariable(name: "rhs", arg: 2, scope: !16294, file: !742, line: 1784, type: !1747)
!16298 = !DILocation(line: 1784, column: 41, scope: !16294)
!16299 = !DILocation(line: 1788, column: 18, scope: !16294)
!16300 = !DILocation(line: 1788, column: 25, scope: !16294)
!16301 = !DILocation(line: 1788, column: 3, scope: !16294)
!16302 = !DILocation(line: 1789, column: 1, scope: !16294)
!16303 = distinct !DISubprogram(name: "test_for_singularity", scope: !3, file: !3, line: 6720, type: !16304, scopeLine: 6722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16304 = !DISubroutineType(types: !16305)
!16305 = !{!1747, !134, !1747, !1747, !1741}
!16306 = !DILocalVariable(name: "cond_code", arg: 1, scope: !16303, file: !3, line: 6720, type: !134)
!16307 = !DILocation(line: 6720, column: 38, scope: !16303)
!16308 = !DILocalVariable(name: "op0", arg: 2, scope: !16303, file: !3, line: 6720, type: !1747)
!16309 = !DILocation(line: 6720, column: 54, scope: !16303)
!16310 = !DILocalVariable(name: "op1", arg: 3, scope: !16303, file: !3, line: 6721, type: !1747)
!16311 = !DILocation(line: 6721, column: 14, scope: !16303)
!16312 = !DILocalVariable(name: "vr", arg: 4, scope: !16303, file: !3, line: 6721, type: !1741)
!16313 = !DILocation(line: 6721, column: 34, scope: !16303)
!16314 = !DILocalVariable(name: "min", scope: !16303, file: !3, line: 6723, type: !1747)
!16315 = !DILocation(line: 6723, column: 8, scope: !16303)
!16316 = !DILocalVariable(name: "max", scope: !16303, file: !3, line: 6724, type: !1747)
!16317 = !DILocation(line: 6724, column: 8, scope: !16303)
!16318 = !DILocation(line: 6728, column: 7, scope: !16319)
!16319 = distinct !DILexicalBlock(scope: !16303, file: !3, line: 6728, column: 7)
!16320 = !DILocation(line: 6728, column: 17, scope: !16319)
!16321 = !DILocation(line: 6728, column: 28, scope: !16319)
!16322 = !DILocation(line: 6728, column: 31, scope: !16319)
!16323 = !DILocation(line: 6728, column: 41, scope: !16319)
!16324 = !DILocation(line: 6728, column: 7, scope: !16303)
!16325 = !DILocation(line: 6732, column: 13, scope: !16326)
!16326 = distinct !DILexicalBlock(scope: !16319, file: !3, line: 6729, column: 5)
!16327 = !DILocation(line: 6732, column: 11, scope: !16326)
!16328 = !DILocation(line: 6734, column: 13, scope: !16326)
!16329 = !DILocation(line: 6734, column: 11, scope: !16326)
!16330 = !DILocation(line: 6735, column: 11, scope: !16331)
!16331 = distinct !DILexicalBlock(scope: !16326, file: !3, line: 6735, column: 11)
!16332 = !DILocation(line: 6735, column: 21, scope: !16331)
!16333 = !DILocation(line: 6735, column: 32, scope: !16331)
!16334 = !DILocation(line: 6735, column: 58, scope: !16331)
!16335 = !DILocation(line: 6735, column: 36, scope: !16331)
!16336 = !DILocation(line: 6735, column: 11, scope: !16326)
!16337 = !DILocalVariable(name: "one", scope: !16338, file: !3, line: 6737, type: !1747)
!16338 = distinct !DILexicalBlock(scope: !16331, file: !3, line: 6736, column: 2)
!16339 = !DILocation(line: 6737, column: 9, scope: !16338)
!16340 = !DILocation(line: 6737, column: 30, scope: !16338)
!16341 = !DILocation(line: 6737, column: 15, scope: !16338)
!16342 = !DILocation(line: 6738, column: 10, scope: !16338)
!16343 = !DILocation(line: 6738, column: 8, scope: !16338)
!16344 = !DILocation(line: 6739, column: 8, scope: !16345)
!16345 = distinct !DILexicalBlock(scope: !16338, file: !3, line: 6739, column: 8)
!16346 = !DILocation(line: 6739, column: 8, scope: !16338)
!16347 = !DILocation(line: 6740, column: 6, scope: !16345)
!16348 = !DILocation(line: 6740, column: 28, scope: !16345)
!16349 = !DILocation(line: 6741, column: 2, scope: !16338)
!16350 = !DILocation(line: 6742, column: 5, scope: !16326)
!16351 = !DILocation(line: 6743, column: 12, scope: !16352)
!16352 = distinct !DILexicalBlock(scope: !16319, file: !3, line: 6743, column: 12)
!16353 = !DILocation(line: 6743, column: 22, scope: !16352)
!16354 = !DILocation(line: 6743, column: 33, scope: !16352)
!16355 = !DILocation(line: 6743, column: 36, scope: !16352)
!16356 = !DILocation(line: 6743, column: 46, scope: !16352)
!16357 = !DILocation(line: 6743, column: 12, scope: !16319)
!16358 = !DILocation(line: 6747, column: 13, scope: !16359)
!16359 = distinct !DILexicalBlock(scope: !16352, file: !3, line: 6744, column: 5)
!16360 = !DILocation(line: 6747, column: 11, scope: !16359)
!16361 = !DILocation(line: 6749, column: 13, scope: !16359)
!16362 = !DILocation(line: 6749, column: 11, scope: !16359)
!16363 = !DILocation(line: 6750, column: 11, scope: !16364)
!16364 = distinct !DILexicalBlock(scope: !16359, file: !3, line: 6750, column: 11)
!16365 = !DILocation(line: 6750, column: 21, scope: !16364)
!16366 = !DILocation(line: 6750, column: 32, scope: !16364)
!16367 = !DILocation(line: 6750, column: 58, scope: !16364)
!16368 = !DILocation(line: 6750, column: 36, scope: !16364)
!16369 = !DILocation(line: 6750, column: 11, scope: !16359)
!16370 = !DILocalVariable(name: "one", scope: !16371, file: !3, line: 6752, type: !1747)
!16371 = distinct !DILexicalBlock(scope: !16364, file: !3, line: 6751, column: 2)
!16372 = !DILocation(line: 6752, column: 9, scope: !16371)
!16373 = !DILocation(line: 6752, column: 30, scope: !16371)
!16374 = !DILocation(line: 6752, column: 15, scope: !16371)
!16375 = !DILocation(line: 6753, column: 10, scope: !16371)
!16376 = !DILocation(line: 6753, column: 8, scope: !16371)
!16377 = !DILocation(line: 6754, column: 8, scope: !16378)
!16378 = distinct !DILexicalBlock(scope: !16371, file: !3, line: 6754, column: 8)
!16379 = !DILocation(line: 6754, column: 8, scope: !16371)
!16380 = !DILocation(line: 6755, column: 6, scope: !16378)
!16381 = !DILocation(line: 6755, column: 28, scope: !16378)
!16382 = !DILocation(line: 6756, column: 2, scope: !16371)
!16383 = !DILocation(line: 6757, column: 5, scope: !16359)
!16384 = !DILocation(line: 6761, column: 7, scope: !16385)
!16385 = distinct !DILexicalBlock(scope: !16303, file: !3, line: 6761, column: 7)
!16386 = !DILocation(line: 6761, column: 11, scope: !16385)
!16387 = !DILocation(line: 6761, column: 14, scope: !16385)
!16388 = !DILocation(line: 6761, column: 7, scope: !16303)
!16389 = !DILocation(line: 6763, column: 27, scope: !16390)
!16390 = distinct !DILexicalBlock(scope: !16391, file: !3, line: 6763, column: 11)
!16391 = distinct !DILexicalBlock(scope: !16385, file: !3, line: 6762, column: 5)
!16392 = !DILocation(line: 6763, column: 31, scope: !16390)
!16393 = !DILocation(line: 6763, column: 36, scope: !16390)
!16394 = !DILocation(line: 6763, column: 11, scope: !16390)
!16395 = !DILocation(line: 6763, column: 41, scope: !16390)
!16396 = !DILocation(line: 6763, column: 11, scope: !16391)
!16397 = !DILocation(line: 6764, column: 8, scope: !16390)
!16398 = !DILocation(line: 6764, column: 12, scope: !16390)
!16399 = !DILocation(line: 6764, column: 6, scope: !16390)
!16400 = !DILocation(line: 6764, column: 2, scope: !16390)
!16401 = !DILocation(line: 6765, column: 27, scope: !16402)
!16402 = distinct !DILexicalBlock(scope: !16391, file: !3, line: 6765, column: 11)
!16403 = !DILocation(line: 6765, column: 31, scope: !16402)
!16404 = !DILocation(line: 6765, column: 36, scope: !16402)
!16405 = !DILocation(line: 6765, column: 11, scope: !16402)
!16406 = !DILocation(line: 6765, column: 41, scope: !16402)
!16407 = !DILocation(line: 6765, column: 11, scope: !16391)
!16408 = !DILocation(line: 6766, column: 8, scope: !16402)
!16409 = !DILocation(line: 6766, column: 12, scope: !16402)
!16410 = !DILocation(line: 6766, column: 6, scope: !16402)
!16411 = !DILocation(line: 6766, column: 2, scope: !16402)
!16412 = !DILocation(line: 6771, column: 28, scope: !16413)
!16413 = distinct !DILexicalBlock(scope: !16391, file: !3, line: 6771, column: 11)
!16414 = !DILocation(line: 6771, column: 33, scope: !16413)
!16415 = !DILocation(line: 6771, column: 11, scope: !16413)
!16416 = !DILocation(line: 6771, column: 41, scope: !16413)
!16417 = !DILocation(line: 6771, column: 69, scope: !16413)
!16418 = !DILocation(line: 6771, column: 44, scope: !16413)
!16419 = !DILocation(line: 6771, column: 11, scope: !16391)
!16420 = !DILocation(line: 6772, column: 9, scope: !16413)
!16421 = !DILocation(line: 6772, column: 2, scope: !16413)
!16422 = !DILocation(line: 6773, column: 5, scope: !16391)
!16423 = !DILocation(line: 6774, column: 3, scope: !16303)
!16424 = !DILocation(line: 6775, column: 1, scope: !16303)
!16425 = distinct !DISubprogram(name: "gimple_cond_set_code", scope: !742, file: !742, line: 2231, type: !16273, scopeLine: 2232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16426 = !DILocalVariable(name: "gs", arg: 1, scope: !16425, file: !742, line: 2231, type: !2076)
!16427 = !DILocation(line: 2231, column: 30, scope: !16425)
!16428 = !DILocalVariable(name: "code", arg: 2, scope: !16425, file: !742, line: 2231, type: !134)
!16429 = !DILocation(line: 2231, column: 49, scope: !16425)
!16430 = !DILocation(line: 2234, column: 24, scope: !16425)
!16431 = !DILocation(line: 2234, column: 3, scope: !16425)
!16432 = !DILocation(line: 2234, column: 7, scope: !16425)
!16433 = !DILocation(line: 2234, column: 14, scope: !16425)
!16434 = !DILocation(line: 2234, column: 22, scope: !16425)
!16435 = !DILocation(line: 2235, column: 1, scope: !16425)
!16436 = distinct !DISubprogram(name: "VEC_edge_heap_safe_push", scope: !343, file: !343, line: 152, type: !16437, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16437 = !DISubroutineType(types: !16438)
!16438 = !{!4871, !5538, !2056}
!16439 = !DILocalVariable(name: "vec_", arg: 1, scope: !16436, file: !343, line: 152, type: !5538)
!16440 = !DILocation(line: 152, column: 1, scope: !16436)
!16441 = !DILocalVariable(name: "obj_", arg: 2, scope: !16436, file: !343, line: 152, type: !2056)
!16442 = distinct !DISubprogram(name: "VEC_switch_update_heap_safe_push", scope: !3, file: !3, line: 121, type: !16443, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16443 = !DISubroutineType(types: !16444)
!16444 = !{!4022, !5546, !16445}
!16445 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16446, size: 64)
!16446 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3162)
!16447 = !DILocalVariable(name: "vec_", arg: 1, scope: !16442, file: !3, line: 121, type: !5546)
!16448 = !DILocation(line: 121, column: 1, scope: !16442)
!16449 = !DILocalVariable(name: "obj_", arg: 2, scope: !16442, file: !3, line: 121, type: !16445)
!16450 = distinct !DISubprogram(name: "VEC_edge_heap_reserve", scope: !343, file: !343, line: 152, type: !16451, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16451 = !DISubroutineType(types: !16452)
!16452 = !{!1740, !5538, !1740}
!16453 = !DILocalVariable(name: "vec_", arg: 1, scope: !16450, file: !343, line: 152, type: !5538)
!16454 = !DILocation(line: 152, column: 1, scope: !16450)
!16455 = !DILocalVariable(name: "alloc_", arg: 2, scope: !16450, file: !343, line: 152, type: !1740)
!16456 = !DILocalVariable(name: "extend", scope: !16450, file: !343, line: 152, type: !1740)
!16457 = !DILocation(line: 152, column: 1, scope: !16458)
!16458 = distinct !DILexicalBlock(scope: !16450, file: !343, line: 152, column: 1)
!16459 = distinct !DISubprogram(name: "VEC_edge_base_quick_push", scope: !343, file: !343, line: 150, type: !16460, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16460 = !DISubroutineType(types: !16461)
!16461 = !{!4871, !16462, !2056}
!16462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2049, size: 64)
!16463 = !DILocalVariable(name: "vec_", arg: 1, scope: !16459, file: !343, line: 150, type: !16462)
!16464 = !DILocation(line: 150, column: 1, scope: !16459)
!16465 = !DILocalVariable(name: "obj_", arg: 2, scope: !16459, file: !343, line: 150, type: !2056)
!16466 = !DILocalVariable(name: "slot_", scope: !16459, file: !343, line: 150, type: !4871)
!16467 = distinct !DISubprogram(name: "VEC_edge_base_space", scope: !343, file: !343, line: 150, type: !16468, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16468 = !DISubroutineType(types: !16469)
!16469 = !{!1740, !16462, !1740}
!16470 = !DILocalVariable(name: "vec_", arg: 1, scope: !16467, file: !343, line: 150, type: !16462)
!16471 = !DILocation(line: 150, column: 1, scope: !16467)
!16472 = !DILocalVariable(name: "alloc_", arg: 2, scope: !16467, file: !343, line: 150, type: !1740)
!16473 = distinct !DISubprogram(name: "VEC_switch_update_heap_reserve", scope: !3, file: !3, line: 121, type: !16474, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16474 = !DISubroutineType(types: !16475)
!16475 = !{!1740, !5546, !1740}
!16476 = !DILocalVariable(name: "vec_", arg: 1, scope: !16473, file: !3, line: 121, type: !5546)
!16477 = !DILocation(line: 121, column: 1, scope: !16473)
!16478 = !DILocalVariable(name: "alloc_", arg: 2, scope: !16473, file: !3, line: 121, type: !1740)
!16479 = !DILocalVariable(name: "extend", scope: !16473, file: !3, line: 121, type: !1740)
!16480 = !DILocation(line: 121, column: 1, scope: !16481)
!16481 = distinct !DILexicalBlock(scope: !16473, file: !3, line: 121, column: 1)
!16482 = distinct !DISubprogram(name: "VEC_switch_update_base_quick_push", scope: !3, file: !3, line: 120, type: !16483, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16483 = !DISubroutineType(types: !16484)
!16484 = !{!4022, !5480, !16445}
!16485 = !DILocalVariable(name: "vec_", arg: 1, scope: !16482, file: !3, line: 120, type: !5480)
!16486 = !DILocation(line: 120, column: 1, scope: !16482)
!16487 = !DILocalVariable(name: "obj_", arg: 2, scope: !16482, file: !3, line: 120, type: !16445)
!16488 = !DILocalVariable(name: "slot_", scope: !16482, file: !3, line: 120, type: !4022)
!16489 = !DILocation(line: 120, column: 1, scope: !16490)
!16490 = distinct !DILexicalBlock(scope: !16482, file: !3, line: 120, column: 1)
!16491 = distinct !DISubprogram(name: "VEC_switch_update_base_space", scope: !3, file: !3, line: 120, type: !16492, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16492 = !DISubroutineType(types: !16493)
!16493 = !{!1740, !5480, !1740}
!16494 = !DILocalVariable(name: "vec_", arg: 1, scope: !16491, file: !3, line: 120, type: !5480)
!16495 = !DILocation(line: 120, column: 1, scope: !16491)
!16496 = !DILocalVariable(name: "alloc_", arg: 2, scope: !16491, file: !3, line: 120, type: !1740)
!16497 = distinct !DISubprogram(name: "search_for_addr_array", scope: !3, file: !3, line: 5081, type: !16498, scopeLine: 5082, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16498 = !DISubroutineType(types: !16499)
!16499 = !{null, !1747, !1874}
!16500 = !DILocalVariable(name: "t", arg: 1, scope: !16497, file: !3, line: 5081, type: !1747)
!16501 = !DILocation(line: 5081, column: 29, scope: !16497)
!16502 = !DILocalVariable(name: "location", arg: 2, scope: !16497, file: !3, line: 5081, type: !1874)
!16503 = !DILocation(line: 5081, column: 43, scope: !16497)
!16504 = !DILocation(line: 5083, column: 3, scope: !16497)
!16505 = !DILocation(line: 5083, column: 10, scope: !16497)
!16506 = !DILocation(line: 5083, column: 24, scope: !16497)
!16507 = !DILocalVariable(name: "g", scope: !16508, file: !3, line: 5085, type: !2076)
!16508 = distinct !DILexicalBlock(scope: !16497, file: !3, line: 5084, column: 5)
!16509 = !DILocation(line: 5085, column: 14, scope: !16508)
!16510 = !DILocation(line: 5085, column: 18, scope: !16508)
!16511 = !DILocation(line: 5087, column: 24, scope: !16512)
!16512 = distinct !DILexicalBlock(scope: !16508, file: !3, line: 5087, column: 11)
!16513 = !DILocation(line: 5087, column: 11, scope: !16512)
!16514 = !DILocation(line: 5087, column: 27, scope: !16512)
!16515 = !DILocation(line: 5087, column: 11, scope: !16508)
!16516 = !DILocation(line: 5088, column: 2, scope: !16512)
!16517 = !DILocation(line: 5090, column: 57, scope: !16518)
!16518 = distinct !DILexicalBlock(scope: !16508, file: !3, line: 5090, column: 11)
!16519 = !DILocation(line: 5090, column: 33, scope: !16518)
!16520 = !DILocation(line: 5090, column: 11, scope: !16518)
!16521 = !DILocation(line: 5091, column: 4, scope: !16518)
!16522 = !DILocation(line: 5090, column: 11, scope: !16508)
!16523 = !DILocation(line: 5092, column: 2, scope: !16518)
!16524 = !DILocation(line: 5094, column: 31, scope: !16508)
!16525 = !DILocation(line: 5094, column: 11, scope: !16508)
!16526 = !DILocation(line: 5094, column: 9, scope: !16508)
!16527 = distinct !{!16527, !16504, !16528}
!16528 = !DILocation(line: 5095, column: 5, scope: !16497)
!16529 = !DILocation(line: 5099, column: 7, scope: !16530)
!16530 = distinct !DILexicalBlock(scope: !16497, file: !3, line: 5099, column: 7)
!16531 = !DILocation(line: 5099, column: 21, scope: !16530)
!16532 = !DILocation(line: 5099, column: 7, scope: !16497)
!16533 = !DILocation(line: 5100, column: 5, scope: !16530)
!16534 = !DILocation(line: 5103, column: 3, scope: !16497)
!16535 = !DILocation(line: 5105, column: 11, scope: !16536)
!16536 = distinct !DILexicalBlock(scope: !16537, file: !3, line: 5105, column: 11)
!16537 = distinct !DILexicalBlock(scope: !16497, file: !3, line: 5104, column: 5)
!16538 = !DILocation(line: 5105, column: 25, scope: !16536)
!16539 = !DILocation(line: 5105, column: 11, scope: !16537)
!16540 = !DILocation(line: 5106, column: 19, scope: !16536)
!16541 = !DILocation(line: 5106, column: 29, scope: !16536)
!16542 = !DILocation(line: 5106, column: 2, scope: !16536)
!16543 = !DILocation(line: 5108, column: 11, scope: !16537)
!16544 = !DILocation(line: 5108, column: 9, scope: !16537)
!16545 = !DILocation(line: 5109, column: 5, scope: !16537)
!16546 = !DILocation(line: 5110, column: 31, scope: !16497)
!16547 = !DILocation(line: 5110, column: 10, scope: !16497)
!16548 = distinct !{!16548, !16534, !16549}
!16549 = !DILocation(line: 5110, column: 33, scope: !16497)
!16550 = !DILocation(line: 5111, column: 1, scope: !16497)
!16551 = distinct !DISubprogram(name: "gimple_location_ptr", scope: !742, file: !742, line: 1147, type: !16552, scopeLine: 1148, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16552 = !DISubroutineType(types: !16553)
!16553 = !{!16554, !5524}
!16554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16555, size: 64)
!16555 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1874)
!16556 = !DILocalVariable(name: "g", arg: 1, scope: !16551, file: !742, line: 1147, type: !5524)
!16557 = !DILocation(line: 1147, column: 35, scope: !16551)
!16558 = !DILocation(line: 1149, column: 11, scope: !16551)
!16559 = !DILocation(line: 1149, column: 14, scope: !16551)
!16560 = !DILocation(line: 1149, column: 21, scope: !16551)
!16561 = !DILocation(line: 1149, column: 3, scope: !16551)
!16562 = distinct !DISubprogram(name: "check_array_bounds", scope: !3, file: !3, line: 5120, type: !16563, scopeLine: 5121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16563 = !DISubroutineType(types: !16564)
!16564 = !{!1747, !2110, !3122, !1739}
!16565 = !DILocalVariable(name: "tp", arg: 1, scope: !16562, file: !3, line: 5120, type: !2110)
!16566 = !DILocation(line: 5120, column: 27, scope: !16562)
!16567 = !DILocalVariable(name: "walk_subtree", arg: 2, scope: !16562, file: !3, line: 5120, type: !3122)
!16568 = !DILocation(line: 5120, column: 36, scope: !16562)
!16569 = !DILocalVariable(name: "data", arg: 3, scope: !16562, file: !3, line: 5120, type: !1739)
!16570 = !DILocation(line: 5120, column: 56, scope: !16562)
!16571 = !DILocalVariable(name: "t", scope: !16562, file: !3, line: 5122, type: !1747)
!16572 = !DILocation(line: 5122, column: 8, scope: !16562)
!16573 = !DILocation(line: 5122, column: 13, scope: !16562)
!16574 = !DILocation(line: 5122, column: 12, scope: !16562)
!16575 = !DILocalVariable(name: "wi", scope: !16562, file: !3, line: 5123, type: !3174)
!16576 = !DILocation(line: 5123, column: 26, scope: !16562)
!16577 = !DILocation(line: 5123, column: 57, scope: !16562)
!16578 = !DILocation(line: 5123, column: 31, scope: !16562)
!16579 = !DILocalVariable(name: "location", scope: !16562, file: !3, line: 5124, type: !1874)
!16580 = !DILocation(line: 5124, column: 14, scope: !16562)
!16581 = !DILocation(line: 5126, column: 7, scope: !16582)
!16582 = distinct !DILexicalBlock(scope: !16562, file: !3, line: 5126, column: 7)
!16583 = !DILocation(line: 5126, column: 7, scope: !16562)
!16584 = !DILocation(line: 5127, column: 16, scope: !16582)
!16585 = !DILocation(line: 5127, column: 14, scope: !16582)
!16586 = !DILocation(line: 5127, column: 5, scope: !16582)
!16587 = !DILocalVariable(name: "locp", scope: !16588, file: !3, line: 5130, type: !3187)
!16588 = distinct !DILexicalBlock(scope: !16582, file: !3, line: 5129, column: 5)
!16589 = !DILocation(line: 5130, column: 19, scope: !16588)
!16590 = !DILocation(line: 5130, column: 41, scope: !16588)
!16591 = !DILocation(line: 5130, column: 45, scope: !16588)
!16592 = !DILocation(line: 5130, column: 26, scope: !16588)
!16593 = !DILocation(line: 5131, column: 19, scope: !16588)
!16594 = !DILocation(line: 5131, column: 18, scope: !16588)
!16595 = !DILocation(line: 5131, column: 16, scope: !16588)
!16596 = !DILocation(line: 5134, column: 4, scope: !16562)
!16597 = !DILocation(line: 5134, column: 17, scope: !16562)
!16598 = !DILocation(line: 5136, column: 7, scope: !16599)
!16599 = distinct !DILexicalBlock(scope: !16562, file: !3, line: 5136, column: 7)
!16600 = !DILocation(line: 5136, column: 21, scope: !16599)
!16601 = !DILocation(line: 5136, column: 7, scope: !16562)
!16602 = !DILocation(line: 5137, column: 22, scope: !16599)
!16603 = !DILocation(line: 5137, column: 32, scope: !16599)
!16604 = !DILocation(line: 5137, column: 5, scope: !16599)
!16605 = !DILocation(line: 5139, column: 7, scope: !16606)
!16606 = distinct !DILexicalBlock(scope: !16562, file: !3, line: 5139, column: 7)
!16607 = !DILocation(line: 5139, column: 21, scope: !16606)
!16608 = !DILocation(line: 5140, column: 7, scope: !16606)
!16609 = !DILocation(line: 5140, column: 11, scope: !16606)
!16610 = !DILocation(line: 5140, column: 25, scope: !16606)
!16611 = !DILocation(line: 5140, column: 40, scope: !16606)
!16612 = !DILocation(line: 5140, column: 43, scope: !16606)
!16613 = !DILocation(line: 5139, column: 7, scope: !16562)
!16614 = !DILocation(line: 5141, column: 28, scope: !16606)
!16615 = !DILocation(line: 5141, column: 49, scope: !16606)
!16616 = !DILocation(line: 5141, column: 5, scope: !16606)
!16617 = !DILocation(line: 5143, column: 7, scope: !16618)
!16618 = distinct !DILexicalBlock(scope: !16562, file: !3, line: 5143, column: 7)
!16619 = !DILocation(line: 5143, column: 21, scope: !16618)
!16620 = !DILocation(line: 5143, column: 7, scope: !16562)
!16621 = !DILocation(line: 5144, column: 6, scope: !16618)
!16622 = !DILocation(line: 5144, column: 19, scope: !16618)
!16623 = !DILocation(line: 5144, column: 5, scope: !16618)
!16624 = !DILocation(line: 5146, column: 3, scope: !16562)
!16625 = distinct !DISubprogram(name: "check_array_ref", scope: !3, file: !3, line: 5010, type: !16626, scopeLine: 5011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16626 = !DISubroutineType(types: !16627)
!16627 = !{null, !1874, !1747, !1866}
!16628 = !DILocalVariable(name: "location", arg: 1, scope: !16625, file: !3, line: 5010, type: !1874)
!16629 = !DILocation(line: 5010, column: 29, scope: !16625)
!16630 = !DILocalVariable(name: "ref", arg: 2, scope: !16625, file: !3, line: 5010, type: !1747)
!16631 = !DILocation(line: 5010, column: 44, scope: !16625)
!16632 = !DILocalVariable(name: "ignore_off_by_one", arg: 3, scope: !16625, file: !3, line: 5010, type: !1866)
!16633 = !DILocation(line: 5010, column: 54, scope: !16625)
!16634 = !DILocalVariable(name: "vr", scope: !16625, file: !3, line: 5012, type: !1741)
!16635 = !DILocation(line: 5012, column: 18, scope: !16625)
!16636 = !DILocalVariable(name: "low_sub", scope: !16625, file: !3, line: 5013, type: !1747)
!16637 = !DILocation(line: 5013, column: 8, scope: !16625)
!16638 = !DILocalVariable(name: "up_sub", scope: !16625, file: !3, line: 5013, type: !1747)
!16639 = !DILocation(line: 5013, column: 17, scope: !16625)
!16640 = !DILocalVariable(name: "low_bound", scope: !16625, file: !3, line: 5014, type: !1747)
!16641 = !DILocation(line: 5014, column: 8, scope: !16625)
!16642 = !DILocalVariable(name: "up_bound", scope: !16625, file: !3, line: 5014, type: !1747)
!16643 = !DILocation(line: 5014, column: 19, scope: !16625)
!16644 = !DILocation(line: 5014, column: 50, scope: !16625)
!16645 = !DILocation(line: 5014, column: 30, scope: !16625)
!16646 = !DILocation(line: 5016, column: 22, scope: !16625)
!16647 = !DILocation(line: 5016, column: 20, scope: !16625)
!16648 = !DILocation(line: 5016, column: 11, scope: !16625)
!16649 = !DILocation(line: 5018, column: 8, scope: !16650)
!16650 = distinct !DILexicalBlock(scope: !16625, file: !3, line: 5018, column: 7)
!16651 = !DILocation(line: 5018, column: 17, scope: !16650)
!16652 = !DILocation(line: 5018, column: 20, scope: !16650)
!16653 = !DILocation(line: 5019, column: 7, scope: !16650)
!16654 = !DILocation(line: 5019, column: 10, scope: !16650)
!16655 = !DILocation(line: 5019, column: 31, scope: !16650)
!16656 = !DILocation(line: 5021, column: 7, scope: !16650)
!16657 = !DILocation(line: 5021, column: 11, scope: !16650)
!16658 = !DILocation(line: 5021, column: 39, scope: !16650)
!16659 = !DILocation(line: 5022, column: 11, scope: !16650)
!16660 = !DILocation(line: 5022, column: 14, scope: !16650)
!16661 = !DILocation(line: 5022, column: 44, scope: !16650)
!16662 = !DILocation(line: 5023, column: 11, scope: !16650)
!16663 = !DILocation(line: 5023, column: 14, scope: !16650)
!16664 = !DILocation(line: 5023, column: 61, scope: !16650)
!16665 = !DILocation(line: 5027, column: 7, scope: !16650)
!16666 = !DILocation(line: 5027, column: 28, scope: !16650)
!16667 = !DILocation(line: 5027, column: 10, scope: !16650)
!16668 = !DILocation(line: 5027, column: 41, scope: !16650)
!16669 = !DILocation(line: 5018, column: 7, scope: !16625)
!16670 = !DILocation(line: 5028, column: 5, scope: !16650)
!16671 = !DILocation(line: 5030, column: 36, scope: !16625)
!16672 = !DILocation(line: 5030, column: 15, scope: !16625)
!16673 = !DILocation(line: 5030, column: 13, scope: !16625)
!16674 = !DILocation(line: 5032, column: 7, scope: !16675)
!16675 = distinct !DILexicalBlock(scope: !16625, file: !3, line: 5032, column: 7)
!16676 = !DILocation(line: 5032, column: 27, scope: !16675)
!16677 = !DILocation(line: 5032, column: 7, scope: !16625)
!16678 = !DILocation(line: 5034, column: 29, scope: !16679)
!16679 = distinct !DILexicalBlock(scope: !16675, file: !3, line: 5033, column: 5)
!16680 = !DILocation(line: 5034, column: 12, scope: !16679)
!16681 = !DILocation(line: 5034, column: 10, scope: !16679)
!16682 = !DILocation(line: 5035, column: 11, scope: !16683)
!16683 = distinct !DILexicalBlock(scope: !16679, file: !3, line: 5035, column: 11)
!16684 = !DILocation(line: 5035, column: 15, scope: !16683)
!16685 = !DILocation(line: 5035, column: 20, scope: !16683)
!16686 = !DILocation(line: 5035, column: 32, scope: !16683)
!16687 = !DILocation(line: 5035, column: 35, scope: !16683)
!16688 = !DILocation(line: 5035, column: 39, scope: !16683)
!16689 = !DILocation(line: 5035, column: 44, scope: !16683)
!16690 = !DILocation(line: 5035, column: 11, scope: !16679)
!16691 = !DILocation(line: 5037, column: 21, scope: !16692)
!16692 = distinct !DILexicalBlock(scope: !16683, file: !3, line: 5036, column: 9)
!16693 = !DILocation(line: 5037, column: 25, scope: !16692)
!16694 = !DILocation(line: 5037, column: 30, scope: !16692)
!16695 = !DILocation(line: 5037, column: 44, scope: !16692)
!16696 = !DILocation(line: 5037, column: 48, scope: !16692)
!16697 = !DILocation(line: 5037, column: 54, scope: !16692)
!16698 = !DILocation(line: 5037, column: 58, scope: !16692)
!16699 = !DILocation(line: 5037, column: 19, scope: !16692)
!16700 = !DILocation(line: 5038, column: 20, scope: !16692)
!16701 = !DILocation(line: 5038, column: 24, scope: !16692)
!16702 = !DILocation(line: 5038, column: 29, scope: !16692)
!16703 = !DILocation(line: 5038, column: 43, scope: !16692)
!16704 = !DILocation(line: 5038, column: 47, scope: !16692)
!16705 = !DILocation(line: 5038, column: 53, scope: !16692)
!16706 = !DILocation(line: 5038, column: 57, scope: !16692)
!16707 = !DILocation(line: 5038, column: 18, scope: !16692)
!16708 = !DILocation(line: 5039, column: 9, scope: !16692)
!16709 = !DILocation(line: 5040, column: 5, scope: !16679)
!16710 = !DILocation(line: 5042, column: 7, scope: !16711)
!16711 = distinct !DILexicalBlock(scope: !16625, file: !3, line: 5042, column: 7)
!16712 = !DILocation(line: 5042, column: 10, scope: !16711)
!16713 = !DILocation(line: 5042, column: 13, scope: !16711)
!16714 = !DILocation(line: 5042, column: 17, scope: !16711)
!16715 = !DILocation(line: 5042, column: 22, scope: !16711)
!16716 = !DILocation(line: 5042, column: 7, scope: !16625)
!16717 = !DILocation(line: 5044, column: 11, scope: !16718)
!16718 = distinct !DILexicalBlock(scope: !16719, file: !3, line: 5044, column: 11)
!16719 = distinct !DILexicalBlock(scope: !16711, file: !3, line: 5043, column: 5)
!16720 = !DILocation(line: 5044, column: 30, scope: !16718)
!16721 = !DILocation(line: 5045, column: 11, scope: !16718)
!16722 = !DILocation(line: 5045, column: 31, scope: !16718)
!16723 = !DILocation(line: 5045, column: 41, scope: !16718)
!16724 = !DILocation(line: 5045, column: 14, scope: !16718)
!16725 = !DILocation(line: 5046, column: 11, scope: !16718)
!16726 = !DILocation(line: 5046, column: 14, scope: !16718)
!16727 = !DILocation(line: 5046, column: 34, scope: !16718)
!16728 = !DILocation(line: 5047, column: 11, scope: !16718)
!16729 = !DILocation(line: 5047, column: 31, scope: !16718)
!16730 = !DILocation(line: 5047, column: 40, scope: !16718)
!16731 = !DILocation(line: 5047, column: 14, scope: !16718)
!16732 = !DILocation(line: 5044, column: 11, scope: !16719)
!16733 = !DILocation(line: 5049, column: 23, scope: !16734)
!16734 = distinct !DILexicalBlock(scope: !16718, file: !3, line: 5048, column: 9)
!16735 = !DILocation(line: 5049, column: 11, scope: !16734)
!16736 = !DILocation(line: 5051, column: 11, scope: !16734)
!16737 = !DILocation(line: 5051, column: 33, scope: !16734)
!16738 = !DILocation(line: 5052, column: 9, scope: !16734)
!16739 = !DILocation(line: 5053, column: 5, scope: !16719)
!16740 = !DILocation(line: 5054, column: 12, scope: !16741)
!16741 = distinct !DILexicalBlock(scope: !16711, file: !3, line: 5054, column: 12)
!16742 = !DILocation(line: 5054, column: 31, scope: !16741)
!16743 = !DILocation(line: 5055, column: 12, scope: !16741)
!16744 = !DILocation(line: 5055, column: 32, scope: !16741)
!16745 = !DILocation(line: 5055, column: 42, scope: !16741)
!16746 = !DILocation(line: 5055, column: 15, scope: !16741)
!16747 = !DILocation(line: 5056, column: 12, scope: !16741)
!16748 = !DILocation(line: 5056, column: 36, scope: !16741)
!16749 = !DILocation(line: 5056, column: 46, scope: !16741)
!16750 = !DILocation(line: 5056, column: 16, scope: !16741)
!16751 = !DILocation(line: 5057, column: 12, scope: !16741)
!16752 = !DILocation(line: 5057, column: 17, scope: !16741)
!16753 = !DILocation(line: 5058, column: 16, scope: !16741)
!16754 = !DILocation(line: 5059, column: 57, scope: !16741)
!16755 = !DILocation(line: 5060, column: 57, scope: !16741)
!16756 = !DILocation(line: 5058, column: 40, scope: !16741)
!16757 = !DILocation(line: 5062, column: 40, scope: !16741)
!16758 = !DILocation(line: 5058, column: 20, scope: !16741)
!16759 = !DILocation(line: 5054, column: 12, scope: !16711)
!16760 = !DILocation(line: 5064, column: 19, scope: !16761)
!16761 = distinct !DILexicalBlock(scope: !16741, file: !3, line: 5063, column: 5)
!16762 = !DILocation(line: 5064, column: 7, scope: !16761)
!16763 = !DILocation(line: 5066, column: 7, scope: !16761)
!16764 = !DILocation(line: 5066, column: 29, scope: !16761)
!16765 = !DILocation(line: 5067, column: 5, scope: !16761)
!16766 = !DILocation(line: 5068, column: 12, scope: !16767)
!16767 = distinct !DILexicalBlock(scope: !16741, file: !3, line: 5068, column: 12)
!16768 = !DILocation(line: 5068, column: 32, scope: !16767)
!16769 = !DILocation(line: 5069, column: 12, scope: !16767)
!16770 = !DILocation(line: 5069, column: 32, scope: !16767)
!16771 = !DILocation(line: 5069, column: 41, scope: !16767)
!16772 = !DILocation(line: 5069, column: 15, scope: !16767)
!16773 = !DILocation(line: 5068, column: 12, scope: !16741)
!16774 = !DILocation(line: 5071, column: 19, scope: !16775)
!16775 = distinct !DILexicalBlock(scope: !16767, file: !3, line: 5070, column: 5)
!16776 = !DILocation(line: 5071, column: 7, scope: !16775)
!16777 = !DILocation(line: 5073, column: 7, scope: !16775)
!16778 = !DILocation(line: 5073, column: 29, scope: !16775)
!16779 = !DILocation(line: 5074, column: 5, scope: !16775)
!16780 = !DILocation(line: 5075, column: 1, scope: !16625)
!16781 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !3251, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16782 = !DILocalVariable(name: "t", arg: 1, scope: !16781, file: !135, line: 4551, type: !3139)
!16783 = !DILocation(line: 4551, column: 33, scope: !16781)
!16784 = !DILocation(line: 4553, column: 11, scope: !16781)
!16785 = !DILocation(line: 4553, column: 3, scope: !16781)
!16786 = !DILocation(line: 4562, column: 7, scope: !16787)
!16787 = distinct !DILexicalBlock(scope: !16781, file: !135, line: 4554, column: 5)
!16788 = !DILocation(line: 4565, column: 7, scope: !16787)
!16789 = !DILocation(line: 4567, column: 1, scope: !16781)
!16790 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !135, file: !135, line: 184, type: !16791, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16791 = !DISubroutineType(types: !16792)
!16792 = !{!3188, !1740}
!16793 = !DILocalVariable(name: "alloc_", arg: 1, scope: !16790, file: !135, line: 184, type: !1740)
!16794 = !DILocation(line: 184, column: 1, scope: !16790)
!16795 = distinct !DISubprogram(name: "gsi_last_bb", scope: !742, file: !742, line: 4450, type: !6312, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16796 = !DILocalVariable(name: "bb", arg: 1, scope: !16795, file: !742, line: 4450, type: !2527)
!16797 = !DILocation(line: 4450, column: 26, scope: !16795)
!16798 = !DILocalVariable(name: "i", scope: !16795, file: !742, line: 4452, type: !3112)
!16799 = !DILocation(line: 4452, column: 24, scope: !16795)
!16800 = !DILocalVariable(name: "seq", scope: !16795, file: !742, line: 4453, type: !2066)
!16801 = !DILocation(line: 4453, column: 14, scope: !16795)
!16802 = !DILocation(line: 4455, column: 17, scope: !16795)
!16803 = !DILocation(line: 4455, column: 9, scope: !16795)
!16804 = !DILocation(line: 4455, column: 7, scope: !16795)
!16805 = !DILocation(line: 4456, column: 28, scope: !16795)
!16806 = !DILocation(line: 4456, column: 11, scope: !16795)
!16807 = !DILocation(line: 4456, column: 5, scope: !16795)
!16808 = !DILocation(line: 4456, column: 9, scope: !16795)
!16809 = !DILocation(line: 4457, column: 11, scope: !16795)
!16810 = !DILocation(line: 4457, column: 5, scope: !16795)
!16811 = !DILocation(line: 4457, column: 9, scope: !16795)
!16812 = !DILocation(line: 4458, column: 10, scope: !16795)
!16813 = !DILocation(line: 4458, column: 5, scope: !16795)
!16814 = !DILocation(line: 4458, column: 8, scope: !16795)
!16815 = !DILocation(line: 4460, column: 3, scope: !16795)
!16816 = distinct !DISubprogram(name: "simplify_stmt_for_jump_threading", scope: !3, file: !3, line: 7095, type: !16817, scopeLine: 7096, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16817 = !DISubroutineType(types: !16818)
!16818 = !{!1747, !2076, !2076}
!16819 = !DILocalVariable(name: "stmt", arg: 1, scope: !16816, file: !3, line: 7095, type: !2076)
!16820 = !DILocation(line: 7095, column: 42, scope: !16816)
!16821 = !DILocalVariable(name: "within_stmt", arg: 2, scope: !16816, file: !3, line: 7095, type: !2076)
!16822 = !DILocation(line: 7095, column: 55, scope: !16816)
!16823 = !DILocation(line: 7100, column: 20, scope: !16824)
!16824 = distinct !DILexicalBlock(scope: !16816, file: !3, line: 7100, column: 7)
!16825 = !DILocation(line: 7100, column: 7, scope: !16824)
!16826 = !DILocation(line: 7100, column: 26, scope: !16824)
!16827 = !DILocation(line: 7100, column: 7, scope: !16816)
!16828 = !DILocation(line: 7101, column: 5, scope: !16824)
!16829 = !DILocation(line: 7103, column: 54, scope: !16816)
!16830 = !DILocation(line: 7103, column: 36, scope: !16816)
!16831 = !DILocation(line: 7104, column: 25, scope: !16816)
!16832 = !DILocation(line: 7104, column: 8, scope: !16816)
!16833 = !DILocation(line: 7105, column: 25, scope: !16816)
!16834 = !DILocation(line: 7105, column: 8, scope: !16816)
!16835 = !DILocation(line: 7105, column: 32, scope: !16816)
!16836 = !DILocation(line: 7103, column: 10, scope: !16816)
!16837 = !DILocation(line: 7103, column: 3, scope: !16816)
!16838 = !DILocation(line: 7106, column: 1, scope: !16816)
!16839 = distinct !DISubprogram(name: "gimple_seq_last", scope: !742, file: !742, line: 178, type: !7845, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16840 = !DILocalVariable(name: "s", arg: 1, scope: !16839, file: !742, line: 178, type: !7847)
!16841 = !DILocation(line: 178, column: 35, scope: !16839)
!16842 = !DILocation(line: 180, column: 10, scope: !16839)
!16843 = !DILocation(line: 180, column: 14, scope: !16839)
!16844 = !DILocation(line: 180, column: 17, scope: !16839)
!16845 = !DILocation(line: 180, column: 3, scope: !16839)
!16846 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !6095, file: !6095, line: 1058, type: !16847, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16847 = !DISubroutineType(types: !16848)
!16848 = !{!2076, !16849, !1747}
!16849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5420, size: 64)
!16850 = !DILocalVariable(name: "imm", arg: 1, scope: !16846, file: !6095, line: 1058, type: !16849)
!16851 = !DILocation(line: 1058, column: 39, scope: !16846)
!16852 = !DILocalVariable(name: "var", arg: 2, scope: !16846, file: !6095, line: 1058, type: !1747)
!16853 = !DILocation(line: 1058, column: 49, scope: !16846)
!16854 = !DILocation(line: 1060, column: 18, scope: !16846)
!16855 = !DILocation(line: 1060, column: 3, scope: !16846)
!16856 = !DILocation(line: 1060, column: 8, scope: !16846)
!16857 = !DILocation(line: 1060, column: 14, scope: !16846)
!16858 = !DILocation(line: 1061, column: 18, scope: !16846)
!16859 = !DILocation(line: 1061, column: 23, scope: !16846)
!16860 = !DILocation(line: 1061, column: 30, scope: !16846)
!16861 = !DILocation(line: 1061, column: 3, scope: !16846)
!16862 = !DILocation(line: 1061, column: 8, scope: !16846)
!16863 = !DILocation(line: 1061, column: 16, scope: !16846)
!16864 = !DILocation(line: 1062, column: 3, scope: !16846)
!16865 = !DILocation(line: 1062, column: 8, scope: !16846)
!16866 = !DILocation(line: 1062, column: 22, scope: !16846)
!16867 = !DILocation(line: 1067, column: 3, scope: !16846)
!16868 = !DILocation(line: 1067, column: 8, scope: !16846)
!16869 = !DILocation(line: 1067, column: 18, scope: !16846)
!16870 = !DILocation(line: 1067, column: 23, scope: !16846)
!16871 = !DILocation(line: 1068, column: 3, scope: !16846)
!16872 = !DILocation(line: 1068, column: 8, scope: !16846)
!16873 = !DILocation(line: 1068, column: 18, scope: !16846)
!16874 = !DILocation(line: 1068, column: 23, scope: !16846)
!16875 = !DILocation(line: 1069, column: 3, scope: !16846)
!16876 = !DILocation(line: 1069, column: 8, scope: !16846)
!16877 = !DILocation(line: 1069, column: 18, scope: !16846)
!16878 = !DILocation(line: 1069, column: 22, scope: !16846)
!16879 = !DILocation(line: 1069, column: 27, scope: !16846)
!16880 = !DILocation(line: 1070, column: 3, scope: !16846)
!16881 = !DILocation(line: 1070, column: 8, scope: !16846)
!16882 = !DILocation(line: 1070, column: 18, scope: !16846)
!16883 = !DILocation(line: 1070, column: 22, scope: !16846)
!16884 = !DILocation(line: 1072, column: 27, scope: !16885)
!16885 = distinct !DILexicalBlock(scope: !16846, file: !6095, line: 1072, column: 7)
!16886 = !DILocation(line: 1072, column: 7, scope: !16885)
!16887 = !DILocation(line: 1072, column: 7, scope: !16846)
!16888 = !DILocation(line: 1073, column: 5, scope: !16885)
!16889 = !DILocation(line: 1075, column: 25, scope: !16846)
!16890 = !DILocation(line: 1075, column: 30, scope: !16846)
!16891 = !DILocation(line: 1075, column: 39, scope: !16846)
!16892 = !DILocation(line: 1075, column: 3, scope: !16846)
!16893 = !DILocation(line: 1077, column: 10, scope: !16846)
!16894 = !DILocation(line: 1077, column: 3, scope: !16846)
!16895 = !DILocation(line: 1078, column: 1, scope: !16846)
!16896 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !6095, file: !6095, line: 969, type: !16897, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16897 = !DISubroutineType(types: !16898)
!16898 = !{!1866, !16899}
!16899 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16900, size: 64)
!16900 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5420)
!16901 = !DILocalVariable(name: "imm", arg: 1, scope: !16896, file: !6095, line: 969, type: !16899)
!16902 = !DILocation(line: 969, column: 45, scope: !16896)
!16903 = !DILocation(line: 971, column: 11, scope: !16896)
!16904 = !DILocation(line: 971, column: 16, scope: !16896)
!16905 = !DILocation(line: 971, column: 27, scope: !16896)
!16906 = !DILocation(line: 971, column: 32, scope: !16896)
!16907 = !DILocation(line: 971, column: 24, scope: !16896)
!16908 = !DILocation(line: 971, column: 10, scope: !16896)
!16909 = !DILocation(line: 971, column: 3, scope: !16896)
!16910 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !6095, file: !6095, line: 1101, type: !16911, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16911 = !DISubroutineType(types: !16912)
!16912 = !{!3142, !16849}
!16913 = !DILocalVariable(name: "imm", arg: 1, scope: !16910, file: !6095, line: 1101, type: !16849)
!16914 = !DILocation(line: 1101, column: 42, scope: !16910)
!16915 = !DILocation(line: 1103, column: 24, scope: !16910)
!16916 = !DILocation(line: 1103, column: 29, scope: !16910)
!16917 = !DILocation(line: 1103, column: 38, scope: !16910)
!16918 = !DILocation(line: 1103, column: 3, scope: !16910)
!16919 = !DILocation(line: 1103, column: 8, scope: !16910)
!16920 = !DILocation(line: 1103, column: 22, scope: !16910)
!16921 = !DILocation(line: 1104, column: 10, scope: !16910)
!16922 = !DILocation(line: 1104, column: 15, scope: !16910)
!16923 = !DILocation(line: 1104, column: 3, scope: !16910)
!16924 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !6095, file: !6095, line: 1110, type: !16897, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16925 = !DILocalVariable(name: "imm", arg: 1, scope: !16924, file: !6095, line: 1110, type: !16899)
!16926 = !DILocation(line: 1110, column: 48, scope: !16924)
!16927 = !DILocation(line: 1112, column: 11, scope: !16924)
!16928 = !DILocation(line: 1112, column: 16, scope: !16924)
!16929 = !DILocation(line: 1112, column: 29, scope: !16924)
!16930 = !DILocation(line: 1112, column: 34, scope: !16924)
!16931 = !DILocation(line: 1112, column: 24, scope: !16924)
!16932 = !DILocation(line: 1112, column: 10, scope: !16924)
!16933 = !DILocation(line: 1112, column: 3, scope: !16924)
!16934 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !6095, file: !6095, line: 233, type: !16935, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16935 = !DISubroutineType(types: !16936)
!16936 = !{null, !3142, !1747}
!16937 = !DILocalVariable(name: "use", arg: 1, scope: !16934, file: !6095, line: 233, type: !3142)
!16938 = !DILocation(line: 233, column: 37, scope: !16934)
!16939 = !DILocalVariable(name: "val", arg: 2, scope: !16934, file: !6095, line: 233, type: !1747)
!16940 = !DILocation(line: 233, column: 47, scope: !16934)
!16941 = !DILocation(line: 235, column: 19, scope: !16934)
!16942 = !DILocation(line: 235, column: 3, scope: !16934)
!16943 = !DILocation(line: 236, column: 17, scope: !16934)
!16944 = !DILocation(line: 236, column: 5, scope: !16934)
!16945 = !DILocation(line: 236, column: 10, scope: !16934)
!16946 = !DILocation(line: 236, column: 15, scope: !16934)
!16947 = !DILocation(line: 237, column: 17, scope: !16934)
!16948 = !DILocation(line: 237, column: 22, scope: !16934)
!16949 = !DILocation(line: 237, column: 3, scope: !16934)
!16950 = !DILocation(line: 238, column: 1, scope: !16934)
!16951 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !6095, file: !6095, line: 1118, type: !16911, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16952 = !DILocalVariable(name: "imm", arg: 1, scope: !16951, file: !6095, line: 1118, type: !16849)
!16953 = !DILocation(line: 1118, column: 41, scope: !16951)
!16954 = !DILocation(line: 1120, column: 18, scope: !16951)
!16955 = !DILocation(line: 1120, column: 23, scope: !16951)
!16956 = !DILocation(line: 1120, column: 3, scope: !16951)
!16957 = !DILocation(line: 1120, column: 8, scope: !16951)
!16958 = !DILocation(line: 1120, column: 16, scope: !16951)
!16959 = !DILocation(line: 1121, column: 30, scope: !16960)
!16960 = distinct !DILexicalBlock(scope: !16951, file: !6095, line: 1121, column: 7)
!16961 = !DILocation(line: 1121, column: 7, scope: !16960)
!16962 = !DILocation(line: 1121, column: 7, scope: !16951)
!16963 = !DILocation(line: 1122, column: 5, scope: !16960)
!16964 = !DILocation(line: 1125, column: 28, scope: !16965)
!16965 = distinct !DILexicalBlock(scope: !16960, file: !6095, line: 1124, column: 5)
!16966 = !DILocation(line: 1125, column: 33, scope: !16965)
!16967 = !DILocation(line: 1125, column: 42, scope: !16965)
!16968 = !DILocation(line: 1125, column: 7, scope: !16965)
!16969 = !DILocation(line: 1125, column: 12, scope: !16965)
!16970 = !DILocation(line: 1125, column: 26, scope: !16965)
!16971 = !DILocation(line: 1126, column: 14, scope: !16965)
!16972 = !DILocation(line: 1126, column: 19, scope: !16965)
!16973 = !DILocation(line: 1126, column: 7, scope: !16965)
!16974 = !DILocation(line: 1128, column: 1, scope: !16951)
!16975 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !6095, file: !6095, line: 1083, type: !16976, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!16976 = !DISubroutineType(types: !16977)
!16977 = !{!2076, !16849}
!16978 = !DILocalVariable(name: "imm", arg: 1, scope: !16975, file: !6095, line: 1083, type: !16849)
!16979 = !DILocation(line: 1083, column: 38, scope: !16975)
!16980 = !DILocation(line: 1085, column: 18, scope: !16975)
!16981 = !DILocation(line: 1085, column: 23, scope: !16975)
!16982 = !DILocation(line: 1085, column: 33, scope: !16975)
!16983 = !DILocation(line: 1085, column: 3, scope: !16975)
!16984 = !DILocation(line: 1085, column: 8, scope: !16975)
!16985 = !DILocation(line: 1085, column: 16, scope: !16975)
!16986 = !DILocation(line: 1086, column: 27, scope: !16987)
!16987 = distinct !DILexicalBlock(scope: !16975, file: !6095, line: 1086, column: 7)
!16988 = !DILocation(line: 1086, column: 7, scope: !16987)
!16989 = !DILocation(line: 1086, column: 7, scope: !16975)
!16990 = !DILocation(line: 1088, column: 11, scope: !16991)
!16991 = distinct !DILexicalBlock(scope: !16992, file: !6095, line: 1088, column: 11)
!16992 = distinct !DILexicalBlock(scope: !16987, file: !6095, line: 1087, column: 5)
!16993 = !DILocation(line: 1088, column: 16, scope: !16991)
!16994 = !DILocation(line: 1088, column: 26, scope: !16991)
!16995 = !DILocation(line: 1088, column: 31, scope: !16991)
!16996 = !DILocation(line: 1088, column: 11, scope: !16992)
!16997 = !DILocation(line: 1089, column: 19, scope: !16991)
!16998 = !DILocation(line: 1089, column: 24, scope: !16991)
!16999 = !DILocation(line: 1089, column: 2, scope: !16991)
!17000 = !DILocation(line: 1090, column: 7, scope: !16992)
!17001 = !DILocation(line: 1093, column: 25, scope: !16975)
!17002 = !DILocation(line: 1093, column: 30, scope: !16975)
!17003 = !DILocation(line: 1093, column: 39, scope: !16975)
!17004 = !DILocation(line: 1093, column: 3, scope: !16975)
!17005 = !DILocation(line: 1094, column: 10, scope: !16975)
!17006 = !DILocation(line: 1094, column: 3, scope: !16975)
!17007 = !DILocation(line: 1095, column: 1, scope: !16975)
!17008 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !6095, file: !6095, line: 1018, type: !17009, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!17009 = !DISubroutineType(types: !17010)
!17010 = !{null, !3142, !16849}
!17011 = !DILocalVariable(name: "head", arg: 1, scope: !17008, file: !6095, line: 1018, type: !3142)
!17012 = !DILocation(line: 1018, column: 37, scope: !17008)
!17013 = !DILocalVariable(name: "imm", arg: 2, scope: !17008, file: !6095, line: 1018, type: !16849)
!17014 = !DILocation(line: 1018, column: 61, scope: !17008)
!17015 = !DILocalVariable(name: "use_p", scope: !17008, file: !6095, line: 1020, type: !3142)
!17016 = !DILocation(line: 1020, column: 17, scope: !17008)
!17017 = !DILocalVariable(name: "last_p", scope: !17008, file: !6095, line: 1021, type: !3142)
!17018 = !DILocation(line: 1021, column: 17, scope: !17008)
!17019 = !DILocation(line: 1021, column: 26, scope: !17008)
!17020 = !DILocalVariable(name: "head_stmt", scope: !17008, file: !6095, line: 1022, type: !2076)
!17021 = !DILocation(line: 1022, column: 10, scope: !17008)
!17022 = !DILocation(line: 1022, column: 22, scope: !17008)
!17023 = !DILocalVariable(name: "use", scope: !17008, file: !6095, line: 1023, type: !1747)
!17024 = !DILocation(line: 1023, column: 8, scope: !17008)
!17025 = !DILocation(line: 1023, column: 14, scope: !17008)
!17026 = !DILocalVariable(name: "op_iter", scope: !17008, file: !6095, line: 1024, type: !4830)
!17027 = !DILocation(line: 1024, column: 15, scope: !17008)
!17028 = !DILocalVariable(name: "flag", scope: !17008, file: !6095, line: 1025, type: !1740)
!17029 = !DILocation(line: 1025, column: 7, scope: !17008)
!17030 = !DILocation(line: 1028, column: 26, scope: !17008)
!17031 = !DILocation(line: 1028, column: 11, scope: !17008)
!17032 = !DILocation(line: 1028, column: 8, scope: !17008)
!17033 = !DILocation(line: 1030, column: 20, scope: !17034)
!17034 = distinct !DILexicalBlock(scope: !17008, file: !6095, line: 1030, column: 7)
!17035 = !DILocation(line: 1030, column: 7, scope: !17034)
!17036 = !DILocation(line: 1030, column: 31, scope: !17034)
!17037 = !DILocation(line: 1030, column: 7, scope: !17008)
!17038 = !DILocation(line: 1032, column: 7, scope: !17039)
!17039 = distinct !DILexicalBlock(scope: !17040, file: !6095, line: 1032, column: 7)
!17040 = distinct !DILexicalBlock(scope: !17034, file: !6095, line: 1031, column: 5)
!17041 = !DILocation(line: 1032, column: 7, scope: !17042)
!17042 = distinct !DILexicalBlock(scope: !17039, file: !6095, line: 1032, column: 7)
!17043 = !DILocation(line: 1033, column: 6, scope: !17044)
!17044 = distinct !DILexicalBlock(scope: !17042, file: !6095, line: 1033, column: 6)
!17045 = !DILocation(line: 1033, column: 30, scope: !17044)
!17046 = !DILocation(line: 1033, column: 27, scope: !17044)
!17047 = !DILocation(line: 1033, column: 6, scope: !17042)
!17048 = !DILocation(line: 1034, column: 34, scope: !17044)
!17049 = !DILocation(line: 1034, column: 41, scope: !17044)
!17050 = !DILocation(line: 1034, column: 47, scope: !17044)
!17051 = !DILocation(line: 1034, column: 13, scope: !17044)
!17052 = !DILocation(line: 1034, column: 11, scope: !17044)
!17053 = !DILocation(line: 1034, column: 4, scope: !17044)
!17054 = distinct !{!17054, !17038, !17055}
!17055 = !DILocation(line: 1034, column: 53, scope: !17039)
!17056 = !DILocation(line: 1035, column: 5, scope: !17040)
!17057 = !DILocation(line: 1038, column: 11, scope: !17058)
!17058 = distinct !DILexicalBlock(scope: !17059, file: !6095, line: 1038, column: 11)
!17059 = distinct !DILexicalBlock(scope: !17034, file: !6095, line: 1037, column: 5)
!17060 = !DILocation(line: 1038, column: 16, scope: !17058)
!17061 = !DILocation(line: 1038, column: 11, scope: !17059)
!17062 = !DILocation(line: 1040, column: 4, scope: !17063)
!17063 = distinct !DILexicalBlock(scope: !17064, file: !6095, line: 1040, column: 4)
!17064 = distinct !DILexicalBlock(scope: !17058, file: !6095, line: 1039, column: 2)
!17065 = !DILocation(line: 1040, column: 4, scope: !17066)
!17066 = distinct !DILexicalBlock(scope: !17063, file: !6095, line: 1040, column: 4)
!17067 = !DILocation(line: 1041, column: 10, scope: !17068)
!17068 = distinct !DILexicalBlock(scope: !17066, file: !6095, line: 1041, column: 10)
!17069 = !DILocation(line: 1041, column: 34, scope: !17068)
!17070 = !DILocation(line: 1041, column: 31, scope: !17068)
!17071 = !DILocation(line: 1041, column: 10, scope: !17066)
!17072 = !DILocation(line: 1042, column: 38, scope: !17068)
!17073 = !DILocation(line: 1042, column: 45, scope: !17068)
!17074 = !DILocation(line: 1042, column: 51, scope: !17068)
!17075 = !DILocation(line: 1042, column: 17, scope: !17068)
!17076 = !DILocation(line: 1042, column: 15, scope: !17068)
!17077 = !DILocation(line: 1042, column: 8, scope: !17068)
!17078 = distinct !{!17078, !17062, !17079}
!17079 = !DILocation(line: 1042, column: 57, scope: !17063)
!17080 = !DILocation(line: 1043, column: 2, scope: !17064)
!17081 = !DILocation(line: 1044, column: 41, scope: !17082)
!17082 = distinct !DILexicalBlock(scope: !17058, file: !6095, line: 1044, column: 16)
!17083 = !DILocation(line: 1044, column: 25, scope: !17082)
!17084 = !DILocation(line: 1044, column: 23, scope: !17082)
!17085 = !DILocation(line: 1044, column: 53, scope: !17082)
!17086 = !DILocation(line: 1044, column: 16, scope: !17058)
!17087 = !DILocation(line: 1046, column: 8, scope: !17088)
!17088 = distinct !DILexicalBlock(scope: !17089, file: !6095, line: 1046, column: 8)
!17089 = distinct !DILexicalBlock(scope: !17082, file: !6095, line: 1045, column: 2)
!17090 = !DILocation(line: 1046, column: 32, scope: !17088)
!17091 = !DILocation(line: 1046, column: 29, scope: !17088)
!17092 = !DILocation(line: 1046, column: 8, scope: !17089)
!17093 = !DILocation(line: 1047, column: 36, scope: !17088)
!17094 = !DILocation(line: 1047, column: 43, scope: !17088)
!17095 = !DILocation(line: 1047, column: 49, scope: !17088)
!17096 = !DILocation(line: 1047, column: 15, scope: !17088)
!17097 = !DILocation(line: 1047, column: 13, scope: !17088)
!17098 = !DILocation(line: 1047, column: 6, scope: !17088)
!17099 = !DILocation(line: 1048, column: 2, scope: !17089)
!17100 = !DILocation(line: 1051, column: 7, scope: !17101)
!17101 = distinct !DILexicalBlock(scope: !17008, file: !6095, line: 1051, column: 7)
!17102 = !DILocation(line: 1051, column: 12, scope: !17101)
!17103 = !DILocation(line: 1051, column: 22, scope: !17101)
!17104 = !DILocation(line: 1051, column: 27, scope: !17101)
!17105 = !DILocation(line: 1051, column: 7, scope: !17008)
!17106 = !DILocation(line: 1052, column: 22, scope: !17101)
!17107 = !DILocation(line: 1052, column: 27, scope: !17101)
!17108 = !DILocation(line: 1052, column: 5, scope: !17101)
!17109 = !DILocation(line: 1053, column: 27, scope: !17008)
!17110 = !DILocation(line: 1053, column: 32, scope: !17008)
!17111 = !DILocation(line: 1053, column: 44, scope: !17008)
!17112 = !DILocation(line: 1053, column: 3, scope: !17008)
!17113 = !DILocation(line: 1054, column: 1, scope: !17008)
!17114 = distinct !DISubprogram(name: "move_use_after_head", scope: !6095, file: !6095, line: 990, type: !17115, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!17115 = !DISubroutineType(types: !17116)
!17116 = !{!3142, !3142, !3142, !3142}
!17117 = !DILocalVariable(name: "use_p", arg: 1, scope: !17114, file: !6095, line: 990, type: !3142)
!17118 = !DILocation(line: 990, column: 36, scope: !17114)
!17119 = !DILocalVariable(name: "head", arg: 2, scope: !17114, file: !6095, line: 990, type: !3142)
!17120 = !DILocation(line: 990, column: 57, scope: !17114)
!17121 = !DILocalVariable(name: "last_p", arg: 3, scope: !17114, file: !6095, line: 991, type: !3142)
!17122 = !DILocation(line: 991, column: 23, scope: !17114)
!17123 = !DILocation(line: 997, column: 7, scope: !17124)
!17124 = distinct !DILexicalBlock(scope: !17114, file: !6095, line: 997, column: 7)
!17125 = !DILocation(line: 997, column: 16, scope: !17124)
!17126 = !DILocation(line: 997, column: 13, scope: !17124)
!17127 = !DILocation(line: 997, column: 7, scope: !17114)
!17128 = !DILocation(line: 1000, column: 11, scope: !17129)
!17129 = distinct !DILexicalBlock(scope: !17130, file: !6095, line: 1000, column: 11)
!17130 = distinct !DILexicalBlock(scope: !17124, file: !6095, line: 998, column: 5)
!17131 = !DILocation(line: 1000, column: 19, scope: !17129)
!17132 = !DILocation(line: 1000, column: 27, scope: !17129)
!17133 = !DILocation(line: 1000, column: 24, scope: !17129)
!17134 = !DILocation(line: 1000, column: 11, scope: !17130)
!17135 = !DILocation(line: 1001, column: 11, scope: !17129)
!17136 = !DILocation(line: 1001, column: 9, scope: !17129)
!17137 = !DILocation(line: 1001, column: 2, scope: !17129)
!17138 = !DILocation(line: 1005, column: 20, scope: !17139)
!17139 = distinct !DILexicalBlock(scope: !17129, file: !6095, line: 1003, column: 2)
!17140 = !DILocation(line: 1005, column: 4, scope: !17139)
!17141 = !DILocation(line: 1006, column: 26, scope: !17139)
!17142 = !DILocation(line: 1006, column: 33, scope: !17139)
!17143 = !DILocation(line: 1006, column: 4, scope: !17139)
!17144 = !DILocation(line: 1007, column: 13, scope: !17139)
!17145 = !DILocation(line: 1007, column: 11, scope: !17139)
!17146 = !DILocation(line: 1009, column: 5, scope: !17130)
!17147 = !DILocation(line: 1010, column: 10, scope: !17114)
!17148 = !DILocation(line: 1010, column: 3, scope: !17114)
!17149 = distinct !DISubprogram(name: "op_iter_init_use", scope: !6095, file: !6095, line: 768, type: !6772, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!17150 = !DILocalVariable(name: "ptr", arg: 1, scope: !17149, file: !6095, line: 768, type: !6355)
!17151 = !DILocation(line: 768, column: 32, scope: !17149)
!17152 = !DILocalVariable(name: "stmt", arg: 2, scope: !17149, file: !6095, line: 768, type: !2076)
!17153 = !DILocation(line: 768, column: 44, scope: !17149)
!17154 = !DILocalVariable(name: "flags", arg: 3, scope: !17149, file: !6095, line: 768, type: !1740)
!17155 = !DILocation(line: 768, column: 54, scope: !17149)
!17156 = !DILocation(line: 770, column: 3, scope: !17149)
!17157 = !DILocation(line: 772, column: 17, scope: !17149)
!17158 = !DILocation(line: 772, column: 22, scope: !17149)
!17159 = !DILocation(line: 772, column: 28, scope: !17149)
!17160 = !DILocation(line: 772, column: 3, scope: !17149)
!17161 = !DILocation(line: 773, column: 3, scope: !17149)
!17162 = !DILocation(line: 773, column: 8, scope: !17149)
!17163 = !DILocation(line: 773, column: 18, scope: !17149)
!17164 = !DILocation(line: 774, column: 28, scope: !17149)
!17165 = !DILocation(line: 774, column: 10, scope: !17149)
!17166 = !DILocation(line: 774, column: 3, scope: !17149)
!17167 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !742, file: !742, line: 1334, type: !17168, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!17168 = !DISubroutineType(types: !17169)
!17169 = !{!3142, !5524}
!17170 = !DILocalVariable(name: "g", arg: 1, scope: !17167, file: !742, line: 1334, type: !5524)
!17171 = !DILocation(line: 1334, column: 30, scope: !17167)
!17172 = !DILocalVariable(name: "ops", scope: !17167, file: !742, line: 1336, type: !2112)
!17173 = !DILocation(line: 1336, column: 24, scope: !17167)
!17174 = !DILocation(line: 1337, column: 28, scope: !17175)
!17175 = distinct !DILexicalBlock(scope: !17167, file: !742, line: 1337, column: 7)
!17176 = !DILocation(line: 1337, column: 8, scope: !17175)
!17177 = !DILocation(line: 1337, column: 7, scope: !17167)
!17178 = !DILocation(line: 1338, column: 5, scope: !17175)
!17179 = !DILocation(line: 1339, column: 9, scope: !17167)
!17180 = !DILocation(line: 1339, column: 12, scope: !17167)
!17181 = !DILocation(line: 1339, column: 18, scope: !17167)
!17182 = !DILocation(line: 1339, column: 25, scope: !17167)
!17183 = !DILocation(line: 1339, column: 7, scope: !17167)
!17184 = !DILocation(line: 1340, column: 7, scope: !17185)
!17185 = distinct !DILexicalBlock(scope: !17167, file: !742, line: 1340, column: 7)
!17186 = !DILocation(line: 1341, column: 7, scope: !17185)
!17187 = !DILocation(line: 1341, column: 10, scope: !17185)
!17188 = !DILocation(line: 1341, column: 28, scope: !17185)
!17189 = !DILocation(line: 1341, column: 36, scope: !17185)
!17190 = !DILocation(line: 1341, column: 39, scope: !17185)
!17191 = !DILocation(line: 1341, column: 49, scope: !17185)
!17192 = !DILocation(line: 1341, column: 32, scope: !17185)
!17193 = !DILocation(line: 1340, column: 7, scope: !17167)
!17194 = !DILocation(line: 1342, column: 12, scope: !17185)
!17195 = !DILocation(line: 1342, column: 5, scope: !17185)
!17196 = !DILocation(line: 1343, column: 3, scope: !17167)
!17197 = !DILocation(line: 1344, column: 1, scope: !17167)
!17198 = distinct !DISubprogram(name: "delink_imm_use", scope: !6095, file: !6095, line: 188, type: !17199, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!17199 = !DISubroutineType(types: !17200)
!17200 = !{null, !3143}
!17201 = !DILocalVariable(name: "linknode", arg: 1, scope: !17198, file: !6095, line: 188, type: !3143)
!17202 = !DILocation(line: 188, column: 36, scope: !17198)
!17203 = !DILocation(line: 191, column: 7, scope: !17204)
!17204 = distinct !DILexicalBlock(scope: !17198, file: !6095, line: 191, column: 7)
!17205 = !DILocation(line: 191, column: 17, scope: !17204)
!17206 = !DILocation(line: 191, column: 22, scope: !17204)
!17207 = !DILocation(line: 191, column: 7, scope: !17198)
!17208 = !DILocation(line: 192, column: 5, scope: !17204)
!17209 = !DILocation(line: 194, column: 26, scope: !17198)
!17210 = !DILocation(line: 194, column: 36, scope: !17198)
!17211 = !DILocation(line: 194, column: 3, scope: !17198)
!17212 = !DILocation(line: 194, column: 13, scope: !17198)
!17213 = !DILocation(line: 194, column: 19, scope: !17198)
!17214 = !DILocation(line: 194, column: 24, scope: !17198)
!17215 = !DILocation(line: 195, column: 26, scope: !17198)
!17216 = !DILocation(line: 195, column: 36, scope: !17198)
!17217 = !DILocation(line: 195, column: 3, scope: !17198)
!17218 = !DILocation(line: 195, column: 13, scope: !17198)
!17219 = !DILocation(line: 195, column: 19, scope: !17198)
!17220 = !DILocation(line: 195, column: 24, scope: !17198)
!17221 = !DILocation(line: 196, column: 3, scope: !17198)
!17222 = !DILocation(line: 196, column: 13, scope: !17198)
!17223 = !DILocation(line: 196, column: 18, scope: !17198)
!17224 = !DILocation(line: 197, column: 3, scope: !17198)
!17225 = !DILocation(line: 197, column: 13, scope: !17198)
!17226 = !DILocation(line: 197, column: 18, scope: !17198)
!17227 = !DILocation(line: 198, column: 1, scope: !17198)
!17228 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !6095, file: !6095, line: 202, type: !17229, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!17229 = !DISubroutineType(types: !17230)
!17230 = !{null, !3143, !3143}
!17231 = !DILocalVariable(name: "linknode", arg: 1, scope: !17228, file: !6095, line: 202, type: !3143)
!17232 = !DILocation(line: 202, column: 42, scope: !17228)
!17233 = !DILocalVariable(name: "list", arg: 2, scope: !17228, file: !6095, line: 202, type: !3143)
!17234 = !DILocation(line: 202, column: 71, scope: !17228)
!17235 = !DILocation(line: 206, column: 20, scope: !17228)
!17236 = !DILocation(line: 206, column: 3, scope: !17228)
!17237 = !DILocation(line: 206, column: 13, scope: !17228)
!17238 = !DILocation(line: 206, column: 18, scope: !17228)
!17239 = !DILocation(line: 207, column: 20, scope: !17228)
!17240 = !DILocation(line: 207, column: 26, scope: !17228)
!17241 = !DILocation(line: 207, column: 3, scope: !17228)
!17242 = !DILocation(line: 207, column: 13, scope: !17228)
!17243 = !DILocation(line: 207, column: 18, scope: !17228)
!17244 = !DILocation(line: 208, column: 22, scope: !17228)
!17245 = !DILocation(line: 208, column: 3, scope: !17228)
!17246 = !DILocation(line: 208, column: 9, scope: !17228)
!17247 = !DILocation(line: 208, column: 15, scope: !17228)
!17248 = !DILocation(line: 208, column: 20, scope: !17228)
!17249 = !DILocation(line: 209, column: 16, scope: !17228)
!17250 = !DILocation(line: 209, column: 3, scope: !17228)
!17251 = !DILocation(line: 209, column: 9, scope: !17228)
!17252 = !DILocation(line: 209, column: 14, scope: !17228)
!17253 = !DILocation(line: 210, column: 1, scope: !17228)
!17254 = distinct !DISubprogram(name: "link_imm_use", scope: !6095, file: !6095, line: 214, type: !17255, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!17255 = !DISubroutineType(types: !17256)
!17256 = !{null, !3143, !1747}
!17257 = !DILocalVariable(name: "linknode", arg: 1, scope: !17254, file: !6095, line: 214, type: !3143)
!17258 = !DILocation(line: 214, column: 34, scope: !17254)
!17259 = !DILocalVariable(name: "def", arg: 2, scope: !17254, file: !6095, line: 214, type: !1747)
!17260 = !DILocation(line: 214, column: 49, scope: !17254)
!17261 = !DILocalVariable(name: "root", scope: !17254, file: !6095, line: 216, type: !3143)
!17262 = !DILocation(line: 216, column: 22, scope: !17254)
!17263 = !DILocation(line: 218, column: 8, scope: !17264)
!17264 = distinct !DILexicalBlock(scope: !17254, file: !6095, line: 218, column: 7)
!17265 = !DILocation(line: 218, column: 12, scope: !17264)
!17266 = !DILocation(line: 218, column: 15, scope: !17264)
!17267 = !DILocation(line: 218, column: 31, scope: !17264)
!17268 = !DILocation(line: 218, column: 7, scope: !17254)
!17269 = !DILocation(line: 219, column: 5, scope: !17264)
!17270 = !DILocation(line: 219, column: 15, scope: !17264)
!17271 = !DILocation(line: 219, column: 20, scope: !17264)
!17272 = !DILocation(line: 222, column: 16, scope: !17273)
!17273 = distinct !DILexicalBlock(scope: !17264, file: !6095, line: 221, column: 5)
!17274 = !DILocation(line: 222, column: 12, scope: !17273)
!17275 = !DILocation(line: 227, column: 29, scope: !17273)
!17276 = !DILocation(line: 227, column: 39, scope: !17273)
!17277 = !DILocation(line: 227, column: 7, scope: !17273)
!17278 = !DILocation(line: 229, column: 1, scope: !17254)
!17279 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !17280, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!17280 = !DISubroutineType(types: !17281)
!17281 = !{null, !17282}
!17282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3188, size: 64)
!17283 = !DILocalVariable(name: "vec_", arg: 1, scope: !17279, file: !135, line: 184, type: !17282)
!17284 = !DILocation(line: 184, column: 1, scope: !17279)
!17285 = !DILocation(line: 184, column: 1, scope: !17286)
!17286 = distinct !DILexicalBlock(scope: !17279, file: !135, line: 184, column: 1)
!17287 = distinct !DISubprogram(name: "gimple_set_num_ops", scope: !742, file: !742, line: 1605, type: !5493, scopeLine: 1606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3239)
!17288 = !DILocalVariable(name: "gs", arg: 1, scope: !17287, file: !742, line: 1605, type: !2076)
!17289 = !DILocation(line: 1605, column: 28, scope: !17287)
!17290 = !DILocalVariable(name: "num_ops", arg: 2, scope: !17287, file: !742, line: 1605, type: !7)
!17291 = !DILocation(line: 1605, column: 41, scope: !17287)
!17292 = !DILocation(line: 1607, column: 24, scope: !17287)
!17293 = !DILocation(line: 1607, column: 3, scope: !17287)
!17294 = !DILocation(line: 1607, column: 7, scope: !17287)
!17295 = !DILocation(line: 1607, column: 14, scope: !17287)
!17296 = !DILocation(line: 1607, column: 22, scope: !17287)
!17297 = !DILocation(line: 1608, column: 1, scope: !17287)
