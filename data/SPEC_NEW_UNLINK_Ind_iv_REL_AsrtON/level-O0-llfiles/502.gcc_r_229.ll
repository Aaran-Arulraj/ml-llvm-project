; ModuleID = 'lto-streamer-out.c'
source_filename = "lto-streamer-out.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type { %struct.lto_in_decl_state*, %struct.lto_in_decl_state*, %struct.lto_cgraph_encoder_d*, %struct.htab*, i8*, i8, %struct.htab*, %struct.htab* }
%struct.lto_in_decl_state = type { [7 x %struct.lto_tree_ref_table], %union.tree_node* }
%struct.lto_tree_ref_table = type { %union.tree_node**, i32 }
%struct.lto_cgraph_encoder_d = type { %struct.pointer_map_t*, %struct.VEC_cgraph_node_ptr_heap* }
%struct.VEC_cgraph_node_ptr_heap = type { %struct.VEC_cgraph_node_ptr_base }
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.VEC_lto_out_decl_state_ptr_heap = type { %struct.VEC_lto_out_decl_state_ptr_base }
%struct.VEC_lto_out_decl_state_ptr_base = type { i32, i32, [1 x %struct.lto_out_decl_state*] }
%struct.lto_out_decl_state = type { [7 x %struct.lto_tree_ref_encoder], %struct.lto_cgraph_encoder_d*, %union.tree_node* }
%struct.lto_tree_ref_encoder = type { %struct.htab*, i32, %struct.VEC_tree_heap* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.VEC_alias_pair_gc = type { %struct.VEC_alias_pair_base }
%struct.VEC_alias_pair_base = type { i32, i32, [1 x %struct.alias_pair] }
%struct.alias_pair = type { %union.tree_node*, %union.tree_node* }
%struct.output_block = type { i32, %struct.lto_out_decl_state*, %struct.lto_output_stream*, %struct.lto_output_stream*, %struct.lto_output_stream*, %struct.htab*, %struct.cgraph_node*, i8*, i32, i32, i8, %struct.lto_streamer_cache_d* }
%struct.lto_output_stream = type { %struct.lto_char_ptr_base*, %struct.lto_char_ptr_base*, i8*, i32, i32, i32 }
%struct.lto_char_ptr_base = type { i8* }
%struct.lto_streamer_cache_d = type { %struct.htab*, i32, %struct.VEC_tree_gc*, %struct.VEC_unsigned_heap* }
%struct.VEC_unsigned_heap = type { %struct.VEC_unsigned_base }
%struct.VEC_unsigned_base = type { i32, i32, [1 x i32] }
%struct.string_slot = type { i8*, i32, i32 }
%struct.bitpack_d = type { i64, i64, %struct.VEC_bitpack_word_t_heap* }
%struct.VEC_bitpack_word_t_heap = type { %struct.VEC_bitpack_word_t_base }
%struct.VEC_bitpack_word_t_base = type { i32, i32, [1 x i64] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.lto_function_header = type { %struct.lto_header, i32, i32, i32, i32, i32, i32, i32 }
%struct.lto_header = type { i16, i16, i32 }
%struct.cgraph_node_set_iterator = type { %struct.cgraph_node_set_def*, i32 }
%struct.lto_decl_header = type { %struct.lto_header, i32, i32, i32, i32 }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_vec = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.tree_binfo = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_none }
%struct.VEC_tree_none = type { %struct.VEC_tree_base }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.real_value = type { i32, [3 x i64] }
%struct.tree_real_cst = type { %struct.tree_common, %struct.real_value* }
%struct.fixed_value = type { %struct.double_int, i32 }
%struct.tree_fixed_cst = type { %struct.tree_common, %struct.fixed_value* }
%struct.tree_label_decl = type { %struct.tree_decl_with_rtl, i32, i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_vector = type { %struct.tree_common, %union.tree_node* }
%struct.tree_complex = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_constructor = type { %struct.tree_common, %struct.VEC_constructor_elt_gc* }
%struct.VEC_constructor_elt_gc = type { %struct.VEC_constructor_elt_base }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.constructor_elt_d = type { %union.tree_node*, %union.tree_node* }
%struct.expanded_location = type { i8*, i32, i32, i8 }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.eh_region_u_try = type { %struct.eh_catch_d*, %struct.eh_catch_d* }
%struct.eh_catch_d = type { %struct.eh_catch_d*, %struct.eh_catch_d*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.eh_region_u_must_not_throw = type { %union.tree_node*, i32 }
%struct.gimple_statement_eh_ctrl = type { %struct.gimple_statement_base, i32 }
%struct.gimple_statement_eh_mnt = type { %struct.gimple_statement_base, %union.tree_node* }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }

@flag_wpa = external dso_local global i32, align 4
@.str = private unnamed_addr constant [15 x i8] c"lto_gimple_out\00", align 1
@pass_ipa_lto_gimple_out = dso_local global %struct.ipa_opt_pass_d { %struct.opt_pass { i32 3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0), i8 ()* @gate_lto_out, i32 ()* null, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 1 }, void ()* null, void (%struct.cgraph_node_set_def*)* @lto_output, void ()* null, void (%struct.cgraph_node*)* null, void (%struct.cgraph_node*, %union.gimple_statement_d**)* null, i32 0, i32 (%struct.cgraph_node*)* null, void (%struct.varpool_node*)* null }, align 8, !dbg !0
@.str.1 = private unnamed_addr constant [14 x i8] c"lto_decls_out\00", align 1
@pass_ipa_lto_finish_out = dso_local global %struct.ipa_opt_pass_d { %struct.opt_pass { i32 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8 ()* @gate_lto_out, i32 ()* null, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 8, i32 0, i32 0, i32 0, i32 0, i32 0 }, void ()* null, void (%struct.cgraph_node_set_def*)* @produce_asm_for_decls, void ()* null, void (%struct.cgraph_node*)* null, void (%struct.cgraph_node*, %union.gimple_statement_d**)* null, i32 0, i32 (%struct.cgraph_node*)* null, void (%struct.varpool_node*)* null }, align 8, !dbg !2673
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.2 = private unnamed_addr constant [19 x i8] c"lto-streamer-out.c\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.4 = private unnamed_addr constant [89 x i8] c"gimple bytecode streams do not support machine specific builtin functions on this target\00", align 1
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@.str.5 = private unnamed_addr constant [49 x i8] c"tree code %qs is not supported in gimple streams\00", align 1
@tree_code_name = external dso_local constant [0 x i8*], align 8
@.str.6 = private unnamed_addr constant [66 x i8] c"gimple bytecode streams do not support the optimization attribute\00", align 1
@.str.7 = private unnamed_addr constant [60 x i8] c"gimple bytecode streams do not support the target attribute\00", align 1
@tree_code_length = external dso_local constant [0 x i8], align 1
@current_function_decl = external dso_local global %union.tree_node*, align 8
@cfun = external dso_local global %struct.function*, align 8
@.str.8 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.9 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.10 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@lto_function_decl_states = external dso_local global %struct.VEC_lto_out_decl_state_ptr_heap*, align 8
@varpool_nodes_queue = external dso_local global %struct.varpool_node*, align 8
@alias_pairs = external dso_local global %struct.VEC_alias_pair_gc*, align 8
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.11 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.output_block* @create_output_block(i32 %section_type) #0 !dbg !2679 {
entry:
  %section_type.addr = alloca i32, align 4
  %ob = alloca %struct.output_block*, align 8
  store i32 %section_type, i32* %section_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %section_type.addr, metadata !2683, metadata !DIExpression()), !dbg !2684
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob, metadata !2685, metadata !DIExpression()), !dbg !2686
  %call = call i8* @xcalloc(i64 1, i64 88), !dbg !2687
  %0 = bitcast i8* %call to %struct.output_block*, !dbg !2687
  store %struct.output_block* %0, %struct.output_block** %ob, align 8, !dbg !2686
  %1 = load i32, i32* %section_type.addr, align 4, !dbg !2688
  %2 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !2689
  %section_type1 = getelementptr inbounds %struct.output_block, %struct.output_block* %2, i32 0, i32 0, !dbg !2690
  store i32 %1, i32* %section_type1, align 8, !dbg !2691
  %call2 = call %struct.lto_out_decl_state* @lto_get_out_decl_state(), !dbg !2692
  %3 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !2693
  %decl_state = getelementptr inbounds %struct.output_block, %struct.output_block* %3, i32 0, i32 1, !dbg !2694
  store %struct.lto_out_decl_state* %call2, %struct.lto_out_decl_state** %decl_state, align 8, !dbg !2695
  %call3 = call i8* @xcalloc(i64 1, i64 40), !dbg !2696
  %4 = bitcast i8* %call3 to %struct.lto_output_stream*, !dbg !2696
  %5 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !2697
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %5, i32 0, i32 2, !dbg !2698
  store %struct.lto_output_stream* %4, %struct.lto_output_stream** %main_stream, align 8, !dbg !2699
  %call4 = call i8* @xcalloc(i64 1, i64 40), !dbg !2700
  %6 = bitcast i8* %call4 to %struct.lto_output_stream*, !dbg !2700
  %7 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !2701
  %string_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %7, i32 0, i32 3, !dbg !2702
  store %struct.lto_output_stream* %6, %struct.lto_output_stream** %string_stream, align 8, !dbg !2703
  %call5 = call %struct.lto_streamer_cache_d* @lto_streamer_cache_create(), !dbg !2704
  %8 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !2705
  %writer_cache = getelementptr inbounds %struct.output_block, %struct.output_block* %8, i32 0, i32 11, !dbg !2706
  store %struct.lto_streamer_cache_d* %call5, %struct.lto_streamer_cache_d** %writer_cache, align 8, !dbg !2707
  %9 = load i32, i32* %section_type.addr, align 4, !dbg !2708
  %cmp = icmp eq i32 %9, 1, !dbg !2710
  br i1 %cmp, label %if.then, label %if.end, !dbg !2711

if.then:                                          ; preds = %entry
  %call6 = call i8* @xcalloc(i64 1, i64 40), !dbg !2712
  %10 = bitcast i8* %call6 to %struct.lto_output_stream*, !dbg !2712
  %11 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !2713
  %cfg_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %11, i32 0, i32 4, !dbg !2714
  store %struct.lto_output_stream* %10, %struct.lto_output_stream** %cfg_stream, align 8, !dbg !2715
  br label %if.end, !dbg !2713

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !2716
  call void @clear_line_info(%struct.output_block* %12), !dbg !2717
  %call7 = call %struct.htab* @htab_create(i64 37, i32 (i8*)* @hash_string_slot_node, i32 (i8*, i8*)* @eq_string_slot_node, void (i8*)* @string_slot_free), !dbg !2718
  %13 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !2719
  %string_hash_table = getelementptr inbounds %struct.output_block, %struct.output_block* %13, i32 0, i32 5, !dbg !2720
  store %struct.htab* %call7, %struct.htab** %string_hash_table, align 8, !dbg !2721
  %14 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !2722
  ret %struct.output_block* %14, !dbg !2723
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local %struct.lto_out_decl_state* @lto_get_out_decl_state() #2

declare dso_local %struct.lto_streamer_cache_d* @lto_streamer_cache_create() #2

; Function Attrs: noinline nounwind uwtable
define internal void @clear_line_info(%struct.output_block* %ob) #0 !dbg !2724 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !2727, metadata !DIExpression()), !dbg !2728
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2729
  %current_file = getelementptr inbounds %struct.output_block, %struct.output_block* %0, i32 0, i32 7, !dbg !2730
  store i8* null, i8** %current_file, align 8, !dbg !2731
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2732
  %current_line = getelementptr inbounds %struct.output_block, %struct.output_block* %1, i32 0, i32 8, !dbg !2733
  store i32 0, i32* %current_line, align 8, !dbg !2734
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2735
  %current_col = getelementptr inbounds %struct.output_block, %struct.output_block* %2, i32 0, i32 9, !dbg !2736
  store i32 0, i32* %current_col, align 4, !dbg !2737
  ret void, !dbg !2738
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_string_slot_node(i8* %p) #0 !dbg !2739 {
entry:
  %p.addr = alloca i8*, align 8
  %ds = alloca %struct.string_slot*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !2740, metadata !DIExpression()), !dbg !2741
  call void @llvm.dbg.declare(metadata %struct.string_slot** %ds, metadata !2742, metadata !DIExpression()), !dbg !2743
  %0 = load i8*, i8** %p.addr, align 8, !dbg !2744
  %1 = bitcast i8* %0 to %struct.string_slot*, !dbg !2745
  store %struct.string_slot* %1, %struct.string_slot** %ds, align 8, !dbg !2743
  %2 = load %struct.string_slot*, %struct.string_slot** %ds, align 8, !dbg !2746
  %s = getelementptr inbounds %struct.string_slot, %struct.string_slot* %2, i32 0, i32 0, !dbg !2747
  %3 = load i8*, i8** %s, align 8, !dbg !2747
  %call = call i32 @htab_hash_string(i8* %3), !dbg !2748
  ret i32 %call, !dbg !2749
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @eq_string_slot_node(i8* %p1, i8* %p2) #0 !dbg !2750 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %ds1 = alloca %struct.string_slot*, align 8
  %ds2 = alloca %struct.string_slot*, align 8
  %i = alloca i32, align 4
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !2751, metadata !DIExpression()), !dbg !2752
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !2753, metadata !DIExpression()), !dbg !2754
  call void @llvm.dbg.declare(metadata %struct.string_slot** %ds1, metadata !2755, metadata !DIExpression()), !dbg !2756
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !2757
  %1 = bitcast i8* %0 to %struct.string_slot*, !dbg !2758
  store %struct.string_slot* %1, %struct.string_slot** %ds1, align 8, !dbg !2756
  call void @llvm.dbg.declare(metadata %struct.string_slot** %ds2, metadata !2759, metadata !DIExpression()), !dbg !2760
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !2761
  %3 = bitcast i8* %2 to %struct.string_slot*, !dbg !2762
  store %struct.string_slot* %3, %struct.string_slot** %ds2, align 8, !dbg !2760
  %4 = load %struct.string_slot*, %struct.string_slot** %ds1, align 8, !dbg !2763
  %len = getelementptr inbounds %struct.string_slot, %struct.string_slot* %4, i32 0, i32 1, !dbg !2765
  %5 = load i32, i32* %len, align 8, !dbg !2765
  %6 = load %struct.string_slot*, %struct.string_slot** %ds2, align 8, !dbg !2766
  %len1 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %6, i32 0, i32 1, !dbg !2767
  %7 = load i32, i32* %len1, align 8, !dbg !2767
  %cmp = icmp eq i32 %5, %7, !dbg !2768
  br i1 %cmp, label %if.then, label %if.end11, !dbg !2769

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2770, metadata !DIExpression()), !dbg !2772
  store i32 0, i32* %i, align 4, !dbg !2773
  br label %for.cond, !dbg !2775

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load i32, i32* %i, align 4, !dbg !2776
  %9 = load %struct.string_slot*, %struct.string_slot** %ds1, align 8, !dbg !2778
  %len2 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %9, i32 0, i32 1, !dbg !2779
  %10 = load i32, i32* %len2, align 8, !dbg !2779
  %cmp3 = icmp slt i32 %8, %10, !dbg !2780
  br i1 %cmp3, label %for.body, label %for.end, !dbg !2781

for.body:                                         ; preds = %for.cond
  %11 = load %struct.string_slot*, %struct.string_slot** %ds1, align 8, !dbg !2782
  %s = getelementptr inbounds %struct.string_slot, %struct.string_slot* %11, i32 0, i32 0, !dbg !2784
  %12 = load i8*, i8** %s, align 8, !dbg !2784
  %13 = load i32, i32* %i, align 4, !dbg !2785
  %idxprom = sext i32 %13 to i64, !dbg !2782
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %idxprom, !dbg !2782
  %14 = load i8, i8* %arrayidx, align 1, !dbg !2782
  %conv = sext i8 %14 to i32, !dbg !2782
  %15 = load %struct.string_slot*, %struct.string_slot** %ds2, align 8, !dbg !2786
  %s4 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %15, i32 0, i32 0, !dbg !2787
  %16 = load i8*, i8** %s4, align 8, !dbg !2787
  %17 = load i32, i32* %i, align 4, !dbg !2788
  %idxprom5 = sext i32 %17 to i64, !dbg !2786
  %arrayidx6 = getelementptr inbounds i8, i8* %16, i64 %idxprom5, !dbg !2786
  %18 = load i8, i8* %arrayidx6, align 1, !dbg !2786
  %conv7 = sext i8 %18 to i32, !dbg !2786
  %cmp8 = icmp ne i32 %conv, %conv7, !dbg !2789
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !2790

if.then10:                                        ; preds = %for.body
  store i32 0, i32* %retval, align 4, !dbg !2791
  br label %return, !dbg !2791

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !2792

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4, !dbg !2793
  %inc = add nsw i32 %19, 1, !dbg !2793
  store i32 %inc, i32* %i, align 4, !dbg !2793
  br label %for.cond, !dbg !2794, !llvm.loop !2795

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !2797
  br label %return, !dbg !2797

if.end11:                                         ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2798
  br label %return, !dbg !2798

return:                                           ; preds = %if.end11, %for.end, %if.then10
  %20 = load i32, i32* %retval, align 4, !dbg !2799
  ret i32 %20, !dbg !2799
}

; Function Attrs: noinline nounwind uwtable
define internal void @string_slot_free(i8* %p) #0 !dbg !2800 {
entry:
  %p.addr = alloca i8*, align 8
  %slot = alloca %struct.string_slot*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !2801, metadata !DIExpression()), !dbg !2802
  call void @llvm.dbg.declare(metadata %struct.string_slot** %slot, metadata !2803, metadata !DIExpression()), !dbg !2804
  %0 = load i8*, i8** %p.addr, align 8, !dbg !2805
  %1 = bitcast i8* %0 to %struct.string_slot*, !dbg !2806
  store %struct.string_slot* %1, %struct.string_slot** %slot, align 8, !dbg !2804
  %2 = load %struct.string_slot*, %struct.string_slot** %slot, align 8, !dbg !2807
  %s = getelementptr inbounds %struct.string_slot, %struct.string_slot* %2, i32 0, i32 0, !dbg !2807
  %3 = load i8*, i8** %s, align 8, !dbg !2807
  call void @free(i8* %3), !dbg !2808
  %4 = load %struct.string_slot*, %struct.string_slot** %slot, align 8, !dbg !2809
  %5 = bitcast %struct.string_slot* %4 to i8*, !dbg !2809
  call void @free(i8* %5), !dbg !2810
  ret void, !dbg !2811
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @destroy_output_block(%struct.output_block* %ob) #0 !dbg !2812 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %section_type = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !2813, metadata !DIExpression()), !dbg !2814
  call void @llvm.dbg.declare(metadata i32* %section_type, metadata !2815, metadata !DIExpression()), !dbg !2816
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2817
  %section_type1 = getelementptr inbounds %struct.output_block, %struct.output_block* %0, i32 0, i32 0, !dbg !2818
  %1 = load i32, i32* %section_type1, align 8, !dbg !2818
  store i32 %1, i32* %section_type, align 4, !dbg !2816
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2819
  %string_hash_table = getelementptr inbounds %struct.output_block, %struct.output_block* %2, i32 0, i32 5, !dbg !2820
  %3 = load %struct.htab*, %struct.htab** %string_hash_table, align 8, !dbg !2820
  call void @htab_delete(%struct.htab* %3), !dbg !2821
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2822
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %4, i32 0, i32 2, !dbg !2823
  %5 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !2823
  %6 = bitcast %struct.lto_output_stream* %5 to i8*, !dbg !2822
  call void @free(i8* %6), !dbg !2824
  %7 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2825
  %string_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %7, i32 0, i32 3, !dbg !2826
  %8 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream, align 8, !dbg !2826
  %9 = bitcast %struct.lto_output_stream* %8 to i8*, !dbg !2825
  call void @free(i8* %9), !dbg !2827
  %10 = load i32, i32* %section_type, align 4, !dbg !2828
  %cmp = icmp eq i32 %10, 1, !dbg !2830
  br i1 %cmp, label %if.then, label %if.end, !dbg !2831

if.then:                                          ; preds = %entry
  %11 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2832
  %cfg_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %11, i32 0, i32 4, !dbg !2833
  %12 = load %struct.lto_output_stream*, %struct.lto_output_stream** %cfg_stream, align 8, !dbg !2833
  %13 = bitcast %struct.lto_output_stream* %12 to i8*, !dbg !2832
  call void @free(i8* %13), !dbg !2834
  br label %if.end, !dbg !2834

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2835
  %writer_cache = getelementptr inbounds %struct.output_block, %struct.output_block* %14, i32 0, i32 11, !dbg !2836
  %15 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %writer_cache, align 8, !dbg !2836
  call void @lto_streamer_cache_delete(%struct.lto_streamer_cache_d* %15), !dbg !2837
  %16 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2838
  %17 = bitcast %struct.output_block* %16 to i8*, !dbg !2838
  call void @free(i8* %17), !dbg !2839
  ret void, !dbg !2840
}

declare dso_local void @htab_delete(%struct.htab*) #2

declare dso_local void @free(i8*) #2

declare dso_local void @lto_streamer_cache_delete(%struct.lto_streamer_cache_d*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @lto_output_bitpack(%struct.lto_output_stream* %s, %struct.bitpack_d* %bp) #0 !dbg !2841 {
entry:
  %s.addr = alloca %struct.lto_output_stream*, align 8
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %i = alloca i32, align 4
  %v = alloca i64, align 8
  store %struct.lto_output_stream* %s, %struct.lto_output_stream** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %s.addr, metadata !2862, metadata !DIExpression()), !dbg !2863
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !2864, metadata !DIExpression()), !dbg !2865
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2866, metadata !DIExpression()), !dbg !2867
  call void @llvm.dbg.declare(metadata i64* %v, metadata !2868, metadata !DIExpression()), !dbg !2869
  %0 = load %struct.lto_output_stream*, %struct.lto_output_stream** %s.addr, align 8, !dbg !2870
  %1 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !2871
  %values = getelementptr inbounds %struct.bitpack_d, %struct.bitpack_d* %1, i32 0, i32 2, !dbg !2871
  %2 = load %struct.VEC_bitpack_word_t_heap*, %struct.VEC_bitpack_word_t_heap** %values, align 8, !dbg !2871
  %tobool = icmp ne %struct.VEC_bitpack_word_t_heap* %2, null, !dbg !2871
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2871

cond.true:                                        ; preds = %entry
  %3 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !2871
  %values1 = getelementptr inbounds %struct.bitpack_d, %struct.bitpack_d* %3, i32 0, i32 2, !dbg !2871
  %4 = load %struct.VEC_bitpack_word_t_heap*, %struct.VEC_bitpack_word_t_heap** %values1, align 8, !dbg !2871
  %base = getelementptr inbounds %struct.VEC_bitpack_word_t_heap, %struct.VEC_bitpack_word_t_heap* %4, i32 0, i32 0, !dbg !2871
  br label %cond.end, !dbg !2871

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2871

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitpack_word_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2871
  %call = call i32 @VEC_bitpack_word_t_base_length(%struct.VEC_bitpack_word_t_base* %cond), !dbg !2871
  %conv = zext i32 %call to i64, !dbg !2871
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %0, i64 %conv), !dbg !2872
  store i32 0, i32* %i, align 4, !dbg !2873
  br label %for.cond, !dbg !2875

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !2876
  %values2 = getelementptr inbounds %struct.bitpack_d, %struct.bitpack_d* %5, i32 0, i32 2, !dbg !2876
  %6 = load %struct.VEC_bitpack_word_t_heap*, %struct.VEC_bitpack_word_t_heap** %values2, align 8, !dbg !2876
  %tobool3 = icmp ne %struct.VEC_bitpack_word_t_heap* %6, null, !dbg !2876
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !2876

cond.true4:                                       ; preds = %for.cond
  %7 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !2876
  %values5 = getelementptr inbounds %struct.bitpack_d, %struct.bitpack_d* %7, i32 0, i32 2, !dbg !2876
  %8 = load %struct.VEC_bitpack_word_t_heap*, %struct.VEC_bitpack_word_t_heap** %values5, align 8, !dbg !2876
  %base6 = getelementptr inbounds %struct.VEC_bitpack_word_t_heap, %struct.VEC_bitpack_word_t_heap* %8, i32 0, i32 0, !dbg !2876
  br label %cond.end8, !dbg !2876

cond.false7:                                      ; preds = %for.cond
  br label %cond.end8, !dbg !2876

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_bitpack_word_t_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !2876
  %9 = load i32, i32* %i, align 4, !dbg !2876
  %call10 = call i32 @VEC_bitpack_word_t_base_iterate(%struct.VEC_bitpack_word_t_base* %cond9, i32 %9, i64* %v), !dbg !2876
  %tobool11 = icmp ne i32 %call10, 0, !dbg !2878
  br i1 %tobool11, label %for.body, label %for.end, !dbg !2878

for.body:                                         ; preds = %cond.end8
  %10 = load %struct.lto_output_stream*, %struct.lto_output_stream** %s.addr, align 8, !dbg !2879
  %11 = load i64, i64* %v, align 8, !dbg !2880
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %10, i64 %11), !dbg !2881
  br label %for.inc, !dbg !2881

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !2882
  %inc = add i32 %12, 1, !dbg !2882
  store i32 %inc, i32* %i, align 4, !dbg !2882
  br label %for.cond, !dbg !2883, !llvm.loop !2884

for.end:                                          ; preds = %cond.end8
  ret void, !dbg !2886
}

declare dso_local void @lto_output_uleb128_stream(%struct.lto_output_stream*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitpack_word_t_base_length(%struct.VEC_bitpack_word_t_base* %vec_) #0 !dbg !2887 {
entry:
  %vec_.addr = alloca %struct.VEC_bitpack_word_t_base*, align 8
  store %struct.VEC_bitpack_word_t_base* %vec_, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitpack_word_t_base** %vec_.addr, metadata !2892, metadata !DIExpression()), !dbg !2893
  %0 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !2893
  %tobool = icmp ne %struct.VEC_bitpack_word_t_base* %0, null, !dbg !2893
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2893

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !2893
  %num = getelementptr inbounds %struct.VEC_bitpack_word_t_base, %struct.VEC_bitpack_word_t_base* %1, i32 0, i32 0, !dbg !2893
  %2 = load i32, i32* %num, align 8, !dbg !2893
  br label %cond.end, !dbg !2893

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2893

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2893
  ret i32 %cond, !dbg !2893
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitpack_word_t_base_iterate(%struct.VEC_bitpack_word_t_base* %vec_, i32 %ix_, i64* %ptr) #0 !dbg !2894 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_bitpack_word_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i64*, align 8
  store %struct.VEC_bitpack_word_t_base* %vec_, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitpack_word_t_base** %vec_.addr, metadata !2898, metadata !DIExpression()), !dbg !2899
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2900, metadata !DIExpression()), !dbg !2899
  store i64* %ptr, i64** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ptr.addr, metadata !2901, metadata !DIExpression()), !dbg !2899
  %0 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !2902
  %tobool = icmp ne %struct.VEC_bitpack_word_t_base* %0, null, !dbg !2902
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2902

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2902
  %2 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !2902
  %num = getelementptr inbounds %struct.VEC_bitpack_word_t_base, %struct.VEC_bitpack_word_t_base* %2, i32 0, i32 0, !dbg !2902
  %3 = load i32, i32* %num, align 8, !dbg !2902
  %cmp = icmp ult i32 %1, %3, !dbg !2902
  br i1 %cmp, label %if.then, label %if.else, !dbg !2899

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !2904
  %vec = getelementptr inbounds %struct.VEC_bitpack_word_t_base, %struct.VEC_bitpack_word_t_base* %4, i32 0, i32 2, !dbg !2904
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2904
  %idxprom = zext i32 %5 to i64, !dbg !2904
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %vec, i64 0, i64 %idxprom, !dbg !2904
  %6 = load i64, i64* %arrayidx, align 8, !dbg !2904
  %7 = load i64*, i64** %ptr.addr, align 8, !dbg !2904
  store i64 %6, i64* %7, align 8, !dbg !2904
  store i32 1, i32* %retval, align 4, !dbg !2904
  br label %return, !dbg !2904

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i64*, i64** %ptr.addr, align 8, !dbg !2906
  store i64 0, i64* %8, align 8, !dbg !2906
  store i32 0, i32* %retval, align 4, !dbg !2906
  br label %return, !dbg !2906

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2899
  ret i32 %9, !dbg !2899
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @lto_output_tree(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !2908 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  %ix = alloca i32, align 4
  %existed_p = alloca i8, align 1
  %offset = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !2911, metadata !DIExpression()), !dbg !2912
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !2913, metadata !DIExpression()), !dbg !2914
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !2915, metadata !DIExpression()), !dbg !2916
  call void @llvm.dbg.declare(metadata i32* %ix, metadata !2917, metadata !DIExpression()), !dbg !2918
  call void @llvm.dbg.declare(metadata i8* %existed_p, metadata !2919, metadata !DIExpression()), !dbg !2920
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !2921, metadata !DIExpression()), !dbg !2922
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2923
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !2925
  br i1 %cmp, label %if.then, label %if.end, !dbg !2926

if.then:                                          ; preds = %entry
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2927
  call void @output_zero(%struct.output_block* %1), !dbg !2929
  br label %if.end17, !dbg !2930

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2931
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !2931
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !2931
  %bf.load = load i64, i64* %3, align 8, !dbg !2931
  %bf.clear = and i64 %bf.load, 65535, !dbg !2931
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2931
  %cmp1 = icmp eq i32 %bf.cast, 23, !dbg !2933
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !2934

if.then2:                                         ; preds = %if.end
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2935
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2937
  %6 = load i8, i8* %ref_p.addr, align 1, !dbg !2938
  call void @lto_output_integer_cst(%struct.output_block* %4, %union.tree_node* %5, i8 zeroext %6), !dbg !2939
  br label %if.end17, !dbg !2940

if.end3:                                          ; preds = %if.end
  %7 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2941
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %7, i32 0, i32 2, !dbg !2942
  %8 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !2942
  %total_size = getelementptr inbounds %struct.lto_output_stream, %struct.lto_output_stream* %8, i32 0, i32 5, !dbg !2943
  %9 = load i32, i32* %total_size, align 8, !dbg !2943
  store i32 %9, i32* %offset, align 4, !dbg !2944
  %10 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2945
  %writer_cache = getelementptr inbounds %struct.output_block, %struct.output_block* %10, i32 0, i32 11, !dbg !2946
  %11 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %writer_cache, align 8, !dbg !2946
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2947
  %call = call zeroext i8 @lto_streamer_cache_insert(%struct.lto_streamer_cache_d* %11, %union.tree_node* %12, i32* %ix, i32* %offset), !dbg !2948
  store i8 %call, i8* %existed_p, align 1, !dbg !2949
  %13 = load i8, i8* %existed_p, align 1, !dbg !2950
  %tobool = icmp ne i8 %13, 0, !dbg !2950
  br i1 %tobool, label %if.then4, label %if.else, !dbg !2952

if.then4:                                         ; preds = %if.end3
  %14 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2953
  call void @output_record_start(%struct.output_block* %14, i32 236), !dbg !2955
  %15 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2956
  %16 = load i32, i32* %ix, align 4, !dbg !2957
  %conv = sext i32 %16 to i64, !dbg !2957
  call void @output_sleb128(%struct.output_block* %15, i64 %conv), !dbg !2958
  %17 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2959
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2960
  %base5 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !2960
  %19 = bitcast %struct.tree_base* %base5 to i64*, !dbg !2960
  %bf.load6 = load i64, i64* %19, align 8, !dbg !2960
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !2960
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !2960
  %call9 = call i32 @lto_tree_code_to_tag(i32 %bf.cast8), !dbg !2961
  %conv10 = zext i32 %call9 to i64, !dbg !2961
  call void @output_uleb128(%struct.output_block* %17, i64 %conv10), !dbg !2962
  %20 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2963
  %21 = load i32, i32* %offset, align 4, !dbg !2964
  %conv11 = zext i32 %21 to i64, !dbg !2964
  call void @output_uleb128(%struct.output_block* %20, i64 %conv11), !dbg !2965
  br label %if.end17, !dbg !2966

if.else:                                          ; preds = %if.end3
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2967
  %call12 = call zeroext i8 @lto_stream_as_builtin_p(%union.tree_node* %22), !dbg !2969
  %tobool13 = icmp ne i8 %call12, 0, !dbg !2969
  br i1 %tobool13, label %if.then14, label %if.else15, !dbg !2970

if.then14:                                        ; preds = %if.else
  %23 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2971
  %24 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2973
  %25 = load i32, i32* %ix, align 4, !dbg !2974
  call void @lto_output_builtin_tree(%struct.output_block* %23, %union.tree_node* %24, i32 %25), !dbg !2975
  br label %if.end16, !dbg !2976

if.else15:                                        ; preds = %if.else
  %26 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2977
  %27 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2979
  %28 = load i8, i8* %ref_p.addr, align 1, !dbg !2980
  %29 = load i32, i32* %ix, align 4, !dbg !2981
  call void @lto_write_tree(%struct.output_block* %26, %union.tree_node* %27, i8 zeroext %28, i32 %29), !dbg !2982
  br label %if.end16

if.end16:                                         ; preds = %if.else15, %if.then14
  br label %if.end17

if.end17:                                         ; preds = %if.then, %if.then2, %if.end16, %if.then4
  ret void, !dbg !2983
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_zero(%struct.output_block* %ob) #0 !dbg !2984 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !2985, metadata !DIExpression()), !dbg !2986
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2987
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %0, i32 0, i32 2, !dbg !2988
  %1 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !2988
  call void @lto_output_1_stream(%struct.lto_output_stream* %1, i8 signext 0), !dbg !2989
  ret void, !dbg !2990
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_integer_cst(%struct.output_block* %ob, %union.tree_node* %cst, i8 zeroext %ref_p) #0 !dbg !2991 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %cst.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !2992, metadata !DIExpression()), !dbg !2993
  store %union.tree_node* %cst, %union.tree_node** %cst.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst.addr, metadata !2994, metadata !DIExpression()), !dbg !2995
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !2996, metadata !DIExpression()), !dbg !2997
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !2998
  %call = call i32 @lto_tree_code_to_tag(i32 23), !dbg !2999
  call void @output_record_start(%struct.output_block* %0, i32 %call), !dbg !3000
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3001
  %2 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !3002
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !3002
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3002
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3002
  %4 = load i8, i8* %ref_p.addr, align 1, !dbg !3003
  call void @lto_output_tree_or_ref(%struct.output_block* %1, %union.tree_node* %3, i8 zeroext %4), !dbg !3004
  %5 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3005
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %5, i32 0, i32 2, !dbg !3006
  %6 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !3006
  %7 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !3007
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3007
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !3007
  %bf.load = load i64, i64* %8, align 8, !dbg !3007
  %bf.clear = and i64 %bf.load, 65535, !dbg !3007
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3007
  %idxprom = sext i32 %bf.cast to i64, !dbg !3007
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3007
  %9 = load i32, i32* %arrayidx, align 4, !dbg !3007
  %cmp = icmp eq i32 %9, 1, !dbg !3007
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3007

land.rhs:                                         ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !3007
  %base1 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3007
  %11 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3007
  %bf.load2 = load i64, i64* %11, align 8, !dbg !3007
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !3007
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !3007
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !3007
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !3007
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ], !dbg !3008
  %land.ext = zext i1 %12 to i32, !dbg !3007
  %conv = trunc i32 %land.ext to i8, !dbg !3007
  call void @lto_output_1_stream(%struct.lto_output_stream* %6, i8 signext %conv), !dbg !3009
  %13 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3010
  %14 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !3011
  %int_cst = bitcast %union.tree_node* %14 to %struct.tree_int_cst*, !dbg !3011
  %int_cst5 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !3011
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst5, i32 0, i32 0, !dbg !3011
  %15 = load i64, i64* %low, align 8, !dbg !3011
  call void @output_uleb128(%struct.output_block* %13, i64 %15), !dbg !3012
  %16 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3013
  %17 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !3014
  %int_cst6 = bitcast %union.tree_node* %17 to %struct.tree_int_cst*, !dbg !3014
  %int_cst7 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst6, i32 0, i32 1, !dbg !3014
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst7, i32 0, i32 1, !dbg !3014
  %18 = load i64, i64* %high, align 8, !dbg !3014
  call void @output_uleb128(%struct.output_block* %16, i64 %18), !dbg !3015
  ret void, !dbg !3016
}

declare dso_local zeroext i8 @lto_streamer_cache_insert(%struct.lto_streamer_cache_d*, %union.tree_node*, i32*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @output_record_start(%struct.output_block* %ob, i32 %tag) #0 !dbg !3017 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %tag.addr = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3020, metadata !DIExpression()), !dbg !3021
  store i32 %tag, i32* %tag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag.addr, metadata !3022, metadata !DIExpression()), !dbg !3023
  %0 = load i32, i32* %tag.addr, align 4, !dbg !3024
  %1 = load i32, i32* %tag.addr, align 4, !dbg !3024
  %cmp = icmp eq i32 %0, %1, !dbg !3024
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3024

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 306, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3024
  br label %cond.end, !dbg !3024

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3024

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3024
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3025
  %3 = load i32, i32* %tag.addr, align 4, !dbg !3026
  %conv = zext i32 %3 to i64, !dbg !3026
  call void @output_uleb128(%struct.output_block* %2, i64 %conv), !dbg !3027
  ret void, !dbg !3028
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_sleb128(%struct.output_block* %ob, i64 %work) #0 !dbg !3029 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %work.addr = alloca i64, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3032, metadata !DIExpression()), !dbg !3033
  store i64 %work, i64* %work.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %work.addr, metadata !3034, metadata !DIExpression()), !dbg !3035
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3036
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %0, i32 0, i32 2, !dbg !3037
  %1 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !3037
  %2 = load i64, i64* %work.addr, align 8, !dbg !3038
  call void @lto_output_sleb128_stream(%struct.lto_output_stream* %1, i64 %2), !dbg !3039
  ret void, !dbg !3040
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_uleb128(%struct.output_block* %ob, i64 %work) #0 !dbg !3041 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %work.addr = alloca i64, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3044, metadata !DIExpression()), !dbg !3045
  store i64 %work, i64* %work.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %work.addr, metadata !3046, metadata !DIExpression()), !dbg !3047
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3048
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %0, i32 0, i32 2, !dbg !3049
  %1 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !3049
  %2 = load i64, i64* %work.addr, align 8, !dbg !3050
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %1, i64 %2), !dbg !3051
  ret void, !dbg !3052
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @lto_tree_code_to_tag(i32 %code) #0 !dbg !3053 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3056, metadata !DIExpression()), !dbg !3057
  %0 = load i32, i32* %code.addr, align 4, !dbg !3058
  %add = add i32 %0, 1, !dbg !3059
  ret i32 %add, !dbg !3060
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lto_stream_as_builtin_p(%union.tree_node* %expr) #0 !dbg !3061 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !3064, metadata !DIExpression()), !dbg !3065
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3066
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3066
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3066
  %bf.load = load i64, i64* %1, align 8, !dbg !3066
  %bf.clear = and i64 %bf.load, 65535, !dbg !3066
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3066
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !3067
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !3068

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3069
  %decl_minimal = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !3069
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !3069
  %3 = load i32, i32* %locus, align 8, !dbg !3069
  %cmp1 = icmp ule i32 %3, 1, !dbg !3069
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !3070

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3071
  %function_decl = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !3071
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !3071
  %bf.load2 = load i32, i32* %built_in_class, align 8, !dbg !3071
  %bf.lshr = lshr i32 %bf.load2, 11, !dbg !3071
  %bf.clear3 = and i32 %bf.lshr, 3, !dbg !3071
  %cmp4 = icmp eq i32 %bf.clear3, 3, !dbg !3072
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !3073

lor.rhs:                                          ; preds = %land.rhs
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3074
  %function_decl5 = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !3074
  %built_in_class6 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl5, i32 0, i32 5, !dbg !3074
  %bf.load7 = load i32, i32* %built_in_class6, align 8, !dbg !3074
  %bf.lshr8 = lshr i32 %bf.load7, 11, !dbg !3074
  %bf.clear9 = and i32 %bf.lshr8, 3, !dbg !3074
  %cmp10 = icmp eq i32 %bf.clear9, 2, !dbg !3075
  br label %lor.end, !dbg !3073

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %6 = phi i1 [ true, %land.rhs ], [ %cmp10, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true, %entry
  %7 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %6, %lor.end ], !dbg !3076
  %land.ext = zext i1 %7 to i32, !dbg !3070
  %conv = trunc i32 %land.ext to i8, !dbg !3077
  ret i8 %conv, !dbg !3078
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_builtin_tree(%struct.output_block* %ob, %union.tree_node* %expr, i32 %ix) #0 !dbg !3079 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ix.addr = alloca i32, align 4
  %str = alloca i8*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3082, metadata !DIExpression()), !dbg !3083
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !3084, metadata !DIExpression()), !dbg !3085
  store i32 %ix, i32* %ix.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix.addr, metadata !3086, metadata !DIExpression()), !dbg !3087
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3088
  %call = call zeroext i8 @lto_stream_as_builtin_p(%union.tree_node* %0), !dbg !3088
  %tobool = icmp ne i8 %call, 0, !dbg !3088
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3088

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 1241, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3088
  br label %cond.end, !dbg !3088

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3088

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3088
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3089
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !3089
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !3089
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !3089
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !3089
  %bf.clear = and i32 %bf.lshr, 3, !dbg !3089
  %cmp = icmp eq i32 %bf.clear, 2, !dbg !3091
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3092

land.lhs.true:                                    ; preds = %cond.end
  %2 = load %union.tree_node* (i32, i8)*, %union.tree_node* (i32, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 24), align 8, !dbg !3093
  %tobool1 = icmp ne %union.tree_node* (i32, i8)* %2, null, !dbg !3094
  br i1 %tobool1, label %if.end, label %if.then, !dbg !3095

if.then:                                          ; preds = %land.lhs.true
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.4, i64 0, i64 0)), !dbg !3096
  br label %if.end, !dbg !3096

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end
  %3 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3097
  call void @output_record_start(%struct.output_block* %3, i32 227), !dbg !3098
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3099
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3100
  %function_decl2 = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !3100
  %built_in_class3 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl2, i32 0, i32 5, !dbg !3100
  %bf.load4 = load i32, i32* %built_in_class3, align 8, !dbg !3100
  %bf.lshr5 = lshr i32 %bf.load4, 11, !dbg !3100
  %bf.clear6 = and i32 %bf.lshr5, 3, !dbg !3100
  %conv = zext i32 %bf.clear6 to i64, !dbg !3100
  call void @output_uleb128(%struct.output_block* %4, i64 %conv), !dbg !3101
  %6 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3102
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3103
  %function_decl7 = bitcast %union.tree_node* %7 to %struct.tree_function_decl*, !dbg !3103
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl7, i32 0, i32 5, !dbg !3103
  %bf.load8 = load i32, i32* %function_code, align 8, !dbg !3103
  %bf.clear9 = and i32 %bf.load8, 2047, !dbg !3103
  %conv10 = zext i32 %bf.clear9 to i64, !dbg !3103
  call void @output_uleb128(%struct.output_block* %6, i64 %conv10), !dbg !3104
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3105
  %9 = load i32, i32* %ix.addr, align 4, !dbg !3106
  %conv11 = sext i32 %9 to i64, !dbg !3106
  call void @output_sleb128(%struct.output_block* %8, i64 %conv11), !dbg !3107
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3108
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3108
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !3108
  %bf.load12 = load i64, i64* %11, align 8, !dbg !3108
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !3108
  %bf.cast = trunc i64 %bf.clear13 to i32, !dbg !3108
  %idxprom = zext i32 %bf.cast to i64, !dbg !3108
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !3108
  %arrayidx14 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 13, !dbg !3108
  %12 = load i8, i8* %arrayidx14, align 1, !dbg !3108
  %conv15 = zext i8 %12 to i32, !dbg !3108
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !3108
  br i1 %tobool16, label %land.lhs.true17, label %if.else35, !dbg !3108

land.lhs.true17:                                  ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3108
  %decl_with_vis = bitcast %union.tree_node* %13 to %struct.tree_decl_with_vis*, !dbg !3108
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 1, !dbg !3108
  %14 = load %union.tree_node*, %union.tree_node** %assembler_name, align 8, !dbg !3108
  %cmp18 = icmp ne %union.tree_node* %14, null, !dbg !3108
  br i1 %cmp18, label %if.then20, label %if.else35, !dbg !3110

if.then20:                                        ; preds = %land.lhs.true17
  call void @llvm.dbg.declare(metadata i8** %str, metadata !3111, metadata !DIExpression()), !dbg !3113
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3114
  %call21 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %15), !dbg !3114
  %identifier = bitcast %union.tree_node* %call21 to %struct.tree_identifier*, !dbg !3114
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !3114
  %str22 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !3114
  %16 = load i8*, i8** %str22, align 8, !dbg !3114
  store i8* %16, i8** %str, align 8, !dbg !3113
  %17 = load i8*, i8** %str, align 8, !dbg !3115
  %call23 = call i64 @strlen(i8* %17), !dbg !3117
  %cmp24 = icmp ugt i64 %call23, 1, !dbg !3118
  br i1 %cmp24, label %land.lhs.true26, label %if.else, !dbg !3119

land.lhs.true26:                                  ; preds = %if.then20
  %18 = load i8*, i8** %str, align 8, !dbg !3120
  %arrayidx27 = getelementptr inbounds i8, i8* %18, i64 0, !dbg !3120
  %19 = load i8, i8* %arrayidx27, align 1, !dbg !3120
  %conv28 = sext i8 %19 to i32, !dbg !3120
  %cmp29 = icmp eq i32 %conv28, 42, !dbg !3121
  br i1 %cmp29, label %if.then31, label %if.else, !dbg !3122

if.then31:                                        ; preds = %land.lhs.true26
  %20 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3123
  %21 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3124
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %21, i32 0, i32 2, !dbg !3125
  %22 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !3125
  %23 = load i8*, i8** %str, align 8, !dbg !3126
  %arrayidx32 = getelementptr inbounds i8, i8* %23, i64 1, !dbg !3126
  call void @output_string(%struct.output_block* %20, %struct.lto_output_stream* %22, i8* %arrayidx32), !dbg !3127
  br label %if.end34, !dbg !3127

if.else:                                          ; preds = %land.lhs.true26, %if.then20
  %24 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3128
  %25 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3129
  %main_stream33 = getelementptr inbounds %struct.output_block, %struct.output_block* %25, i32 0, i32 2, !dbg !3130
  %26 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream33, align 8, !dbg !3130
  call void @output_string(%struct.output_block* %24, %struct.lto_output_stream* %26, i8* null), !dbg !3131
  br label %if.end34

if.end34:                                         ; preds = %if.else, %if.then31
  br label %if.end37, !dbg !3132

if.else35:                                        ; preds = %land.lhs.true17, %if.end
  %27 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3133
  %28 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3134
  %main_stream36 = getelementptr inbounds %struct.output_block, %struct.output_block* %28, i32 0, i32 2, !dbg !3135
  %29 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream36, align 8, !dbg !3135
  call void @output_string(%struct.output_block* %27, %struct.lto_output_stream* %29, i8* null), !dbg !3136
  br label %if.end37

if.end37:                                         ; preds = %if.else35, %if.end34
  ret void, !dbg !3137
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_write_tree(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p, i32 %ix) #0 !dbg !3138 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  %ix.addr = alloca i32, align 4
  %bp = alloca %struct.bitpack_d*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3141, metadata !DIExpression()), !dbg !3142
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !3143, metadata !DIExpression()), !dbg !3144
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !3145, metadata !DIExpression()), !dbg !3146
  store i32 %ix, i32* %ix.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix.addr, metadata !3147, metadata !DIExpression()), !dbg !3148
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp, metadata !3149, metadata !DIExpression()), !dbg !3150
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3151
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3152
  %2 = load i32, i32* %ix.addr, align 4, !dbg !3153
  call void @lto_output_tree_header(%struct.output_block* %0, %union.tree_node* %1, i32 %2), !dbg !3154
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3155
  %call = call %struct.bitpack_d* @pack_value_fields(%union.tree_node* %3), !dbg !3156
  store %struct.bitpack_d* %call, %struct.bitpack_d** %bp, align 8, !dbg !3157
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3158
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %4, i32 0, i32 2, !dbg !3159
  %5 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !3159
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3160
  call void @lto_output_bitpack(%struct.lto_output_stream* %5, %struct.bitpack_d* %6), !dbg !3161
  %7 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3162
  call void @bitpack_delete(%struct.bitpack_d* %7), !dbg !3163
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3164
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3165
  %10 = load i8, i8* %ref_p.addr, align 1, !dbg !3166
  call void @lto_output_tree_pointers(%struct.output_block* %8, %union.tree_node* %9, i8 zeroext %10), !dbg !3167
  %11 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3168
  call void @output_zero(%struct.output_block* %11), !dbg !3169
  ret void, !dbg !3170
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @produce_asm(%struct.output_block* %ob, %union.tree_node* %fn) #0 !dbg !3171 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %fn.addr = alloca %union.tree_node*, align 8
  %section_type = alloca i32, align 4
  %header = alloca %struct.lto_function_header, align 4
  %section_name = alloca i8*, align 8
  %header_stream = alloca %struct.lto_output_stream*, align 8
  %name = alloca i8*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3174, metadata !DIExpression()), !dbg !3175
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !3176, metadata !DIExpression()), !dbg !3177
  call void @llvm.dbg.declare(metadata i32* %section_type, metadata !3178, metadata !DIExpression()), !dbg !3179
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3180
  %section_type1 = getelementptr inbounds %struct.output_block, %struct.output_block* %0, i32 0, i32 0, !dbg !3181
  %1 = load i32, i32* %section_type1, align 8, !dbg !3181
  store i32 %1, i32* %section_type, align 4, !dbg !3179
  call void @llvm.dbg.declare(metadata %struct.lto_function_header* %header, metadata !3182, metadata !DIExpression()), !dbg !3204
  call void @llvm.dbg.declare(metadata i8** %section_name, metadata !3205, metadata !DIExpression()), !dbg !3206
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %header_stream, metadata !3207, metadata !DIExpression()), !dbg !3208
  %2 = load i32, i32* %section_type, align 4, !dbg !3209
  %cmp = icmp eq i32 %2, 1, !dbg !3211
  br i1 %cmp, label %if.then, label %if.else, !dbg !3212

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %name, metadata !3213, metadata !DIExpression()), !dbg !3215
  %3 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !3216
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %3), !dbg !3216
  %identifier = bitcast %union.tree_node* %call to %struct.tree_identifier*, !dbg !3216
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !3216
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !3216
  %4 = load i8*, i8** %str, align 8, !dbg !3216
  store i8* %4, i8** %name, align 8, !dbg !3215
  %5 = load i32, i32* %section_type, align 4, !dbg !3217
  %6 = load i8*, i8** %name, align 8, !dbg !3218
  %call2 = call i8* @lto_get_section_name(i32 %5, i8* %6), !dbg !3219
  store i8* %call2, i8** %section_name, align 8, !dbg !3220
  br label %if.end, !dbg !3221

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %section_type, align 4, !dbg !3222
  %call3 = call i8* @lto_get_section_name(i32 %7, i8* null), !dbg !3223
  store i8* %call3, i8** %section_name, align 8, !dbg !3224
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load i8*, i8** %section_name, align 8, !dbg !3225
  %9 = load i32, i32* @flag_wpa, align 4, !dbg !3226
  %tobool = icmp ne i32 %9, 0, !dbg !3227
  %lnot = xor i1 %tobool, true, !dbg !3227
  %lnot.ext = zext i1 %lnot to i32, !dbg !3227
  %conv = trunc i32 %lnot.ext to i8, !dbg !3227
  call void @lto_begin_section(i8* %8, i8 zeroext %conv), !dbg !3228
  %10 = load i8*, i8** %section_name, align 8, !dbg !3229
  call void @free(i8* %10), !dbg !3230
  %11 = bitcast %struct.lto_function_header* %header to i8*, !dbg !3231
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 36, i1 false), !dbg !3231
  %lto_header = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %header, i32 0, i32 0, !dbg !3232
  %major_version = getelementptr inbounds %struct.lto_header, %struct.lto_header* %lto_header, i32 0, i32 0, !dbg !3233
  store i16 1, i16* %major_version, align 4, !dbg !3234
  %lto_header4 = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %header, i32 0, i32 0, !dbg !3235
  %minor_version = getelementptr inbounds %struct.lto_header, %struct.lto_header* %lto_header4, i32 0, i32 1, !dbg !3236
  store i16 0, i16* %minor_version, align 2, !dbg !3237
  %12 = load i32, i32* %section_type, align 4, !dbg !3238
  %lto_header5 = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %header, i32 0, i32 0, !dbg !3239
  %section_type6 = getelementptr inbounds %struct.lto_header, %struct.lto_header* %lto_header5, i32 0, i32 2, !dbg !3240
  store i32 %12, i32* %section_type6, align 4, !dbg !3241
  %compressed_size = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %header, i32 0, i32 3, !dbg !3242
  store i32 0, i32* %compressed_size, align 4, !dbg !3243
  %13 = load i32, i32* %section_type, align 4, !dbg !3244
  %cmp7 = icmp eq i32 %13, 1, !dbg !3246
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !3247

if.then9:                                         ; preds = %if.end
  %14 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3248
  %cfg_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %14, i32 0, i32 4, !dbg !3249
  %15 = load %struct.lto_output_stream*, %struct.lto_output_stream** %cfg_stream, align 8, !dbg !3249
  %total_size = getelementptr inbounds %struct.lto_output_stream, %struct.lto_output_stream* %15, i32 0, i32 5, !dbg !3250
  %16 = load i32, i32* %total_size, align 8, !dbg !3250
  %cfg_size = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %header, i32 0, i32 5, !dbg !3251
  store i32 %16, i32* %cfg_size, align 4, !dbg !3252
  br label %if.end10, !dbg !3253

if.end10:                                         ; preds = %if.then9, %if.end
  %17 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3254
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %17, i32 0, i32 2, !dbg !3255
  %18 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !3255
  %total_size11 = getelementptr inbounds %struct.lto_output_stream, %struct.lto_output_stream* %18, i32 0, i32 5, !dbg !3256
  %19 = load i32, i32* %total_size11, align 8, !dbg !3256
  %main_size = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %header, i32 0, i32 6, !dbg !3257
  store i32 %19, i32* %main_size, align 4, !dbg !3258
  %20 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3259
  %string_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %20, i32 0, i32 3, !dbg !3260
  %21 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream, align 8, !dbg !3260
  %total_size12 = getelementptr inbounds %struct.lto_output_stream, %struct.lto_output_stream* %21, i32 0, i32 5, !dbg !3261
  %22 = load i32, i32* %total_size12, align 8, !dbg !3261
  %string_size = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %header, i32 0, i32 7, !dbg !3262
  store i32 %22, i32* %string_size, align 4, !dbg !3263
  %call13 = call i8* @xcalloc(i64 1, i64 40), !dbg !3264
  %23 = bitcast i8* %call13 to %struct.lto_output_stream*, !dbg !3264
  store %struct.lto_output_stream* %23, %struct.lto_output_stream** %header_stream, align 8, !dbg !3265
  %24 = load %struct.lto_output_stream*, %struct.lto_output_stream** %header_stream, align 8, !dbg !3266
  %25 = bitcast %struct.lto_function_header* %header to i8*, !dbg !3267
  call void @lto_output_data_stream(%struct.lto_output_stream* %24, i8* %25, i64 36), !dbg !3268
  %26 = load %struct.lto_output_stream*, %struct.lto_output_stream** %header_stream, align 8, !dbg !3269
  call void @lto_write_stream(%struct.lto_output_stream* %26), !dbg !3270
  %27 = load %struct.lto_output_stream*, %struct.lto_output_stream** %header_stream, align 8, !dbg !3271
  %28 = bitcast %struct.lto_output_stream* %27 to i8*, !dbg !3271
  call void @free(i8* %28), !dbg !3272
  %29 = load i32, i32* %section_type, align 4, !dbg !3273
  %cmp14 = icmp eq i32 %29, 1, !dbg !3275
  br i1 %cmp14, label %if.then16, label %if.end18, !dbg !3276

if.then16:                                        ; preds = %if.end10
  %30 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3277
  %cfg_stream17 = getelementptr inbounds %struct.output_block, %struct.output_block* %30, i32 0, i32 4, !dbg !3278
  %31 = load %struct.lto_output_stream*, %struct.lto_output_stream** %cfg_stream17, align 8, !dbg !3278
  call void @lto_write_stream(%struct.lto_output_stream* %31), !dbg !3279
  br label %if.end18, !dbg !3279

if.end18:                                         ; preds = %if.then16, %if.end10
  %32 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3280
  %main_stream19 = getelementptr inbounds %struct.output_block, %struct.output_block* %32, i32 0, i32 2, !dbg !3281
  %33 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream19, align 8, !dbg !3281
  call void @lto_write_stream(%struct.lto_output_stream* %33), !dbg !3282
  %34 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3283
  %string_stream20 = getelementptr inbounds %struct.output_block, %struct.output_block* %34, i32 0, i32 3, !dbg !3284
  %35 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream20, align 8, !dbg !3284
  call void @lto_write_stream(%struct.lto_output_stream* %35), !dbg !3285
  call void @lto_end_section(), !dbg !3286
  ret void, !dbg !3287
}

declare dso_local %union.tree_node* @decl_assembler_name(%union.tree_node*) #2

declare dso_local i8* @lto_get_section_name(i32, i8*) #2

declare dso_local void @lto_begin_section(i8*, i8 zeroext) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local void @lto_output_data_stream(%struct.lto_output_stream*, i8*, i64) #2

declare dso_local void @lto_write_stream(%struct.lto_output_stream*) #2

declare dso_local void @lto_end_section() #2

declare dso_local zeroext i8 @gate_lto_out() #2

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output(%struct.cgraph_node_set_def* %set) #0 !dbg !3288 {
entry:
  %set.addr = alloca %struct.cgraph_node_set_def*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %decl_state = alloca %struct.lto_out_decl_state*, align 8
  %csi = alloca %struct.cgraph_node_set_iterator, align 8
  %output = alloca %struct.bitmap_head_def*, align 8
  %tmp = alloca %struct.cgraph_node_set_iterator, align 8
  store %struct.cgraph_node_set_def* %set, %struct.cgraph_node_set_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_def** %set.addr, metadata !3292, metadata !DIExpression()), !dbg !3293
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3294, metadata !DIExpression()), !dbg !3295
  call void @llvm.dbg.declare(metadata %struct.lto_out_decl_state** %decl_state, metadata !3296, metadata !DIExpression()), !dbg !3297
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_iterator* %csi, metadata !3298, metadata !DIExpression()), !dbg !3304
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %output, metadata !3305, metadata !DIExpression()), !dbg !3306
  %call = call %struct.bitmap_head_def* @lto_bitmap_alloc(), !dbg !3307
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %output, align 8, !dbg !3306
  call void @lto_writer_init(), !dbg !3308
  %0 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set.addr, align 8, !dbg !3309
  %call1 = call { %struct.cgraph_node_set_def*, i32 } @csi_start(%struct.cgraph_node_set_def* %0), !dbg !3311
  %1 = bitcast %struct.cgraph_node_set_iterator* %tmp to { %struct.cgraph_node_set_def*, i32 }*, !dbg !3311
  %2 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %1, i32 0, i32 0, !dbg !3311
  %3 = extractvalue { %struct.cgraph_node_set_def*, i32 } %call1, 0, !dbg !3311
  store %struct.cgraph_node_set_def* %3, %struct.cgraph_node_set_def** %2, align 8, !dbg !3311
  %4 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %1, i32 0, i32 1, !dbg !3311
  %5 = extractvalue { %struct.cgraph_node_set_def*, i32 } %call1, 1, !dbg !3311
  store i32 %5, i32* %4, align 8, !dbg !3311
  %6 = bitcast %struct.cgraph_node_set_iterator* %csi to i8*, !dbg !3311
  %7 = bitcast %struct.cgraph_node_set_iterator* %tmp to i8*, !dbg !3311
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !3311
  br label %for.cond, !dbg !3312

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.cgraph_node_set_iterator* %csi to { %struct.cgraph_node_set_def*, i32 }*, !dbg !3313
  %9 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %8, i32 0, i32 0, !dbg !3313
  %10 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %9, align 8, !dbg !3313
  %11 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %8, i32 0, i32 1, !dbg !3313
  %12 = load i32, i32* %11, align 8, !dbg !3313
  %call2 = call zeroext i8 @csi_end_p(%struct.cgraph_node_set_def* %10, i32 %12), !dbg !3313
  %tobool = icmp ne i8 %call2, 0, !dbg !3315
  %lnot = xor i1 %tobool, true, !dbg !3315
  br i1 %lnot, label %for.body, label %for.end, !dbg !3316

for.body:                                         ; preds = %for.cond
  %13 = bitcast %struct.cgraph_node_set_iterator* %csi to { %struct.cgraph_node_set_def*, i32 }*, !dbg !3317
  %14 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %13, i32 0, i32 0, !dbg !3317
  %15 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %14, align 8, !dbg !3317
  %16 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %13, i32 0, i32 1, !dbg !3317
  %17 = load i32, i32* %16, align 8, !dbg !3317
  %call3 = call %struct.cgraph_node* @csi_node(%struct.cgraph_node_set_def* %15, i32 %17), !dbg !3317
  store %struct.cgraph_node* %call3, %struct.cgraph_node** %node, align 8, !dbg !3319
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3320
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 27, !dbg !3322
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !3322
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !3322
  %bf.clear = and i16 %bf.lshr, 1, !dbg !3322
  %bf.cast = zext i16 %bf.clear to i32, !dbg !3322
  %tobool4 = icmp ne i32 %bf.cast, 0, !dbg !3320
  br i1 %tobool4, label %land.lhs.true, label %if.end17, !dbg !3323

land.lhs.true:                                    ; preds = %for.body
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %output, align 8, !dbg !3324
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3325
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 0, !dbg !3325
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3325
  %decl_minimal = bitcast %union.tree_node* %21 to %struct.tree_decl_minimal*, !dbg !3325
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !3325
  %22 = load i32, i32* %uid, align 4, !dbg !3325
  %call5 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %19, i32 %22), !dbg !3326
  %tobool6 = icmp ne i32 %call5, 0, !dbg !3326
  br i1 %tobool6, label %if.end17, label %if.then, !dbg !3327

if.then:                                          ; preds = %land.lhs.true
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %output, align 8, !dbg !3328
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3330
  %decl7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 0, !dbg !3330
  %25 = load %union.tree_node*, %union.tree_node** %decl7, align 8, !dbg !3330
  %decl_minimal8 = bitcast %union.tree_node* %25 to %struct.tree_decl_minimal*, !dbg !3330
  %uid9 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal8, i32 0, i32 2, !dbg !3330
  %26 = load i32, i32* %uid9, align 4, !dbg !3330
  %call10 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %23, i32 %26), !dbg !3331
  %call11 = call %struct.lto_out_decl_state* @lto_new_out_decl_state(), !dbg !3332
  store %struct.lto_out_decl_state* %call11, %struct.lto_out_decl_state** %decl_state, align 8, !dbg !3333
  %27 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state, align 8, !dbg !3334
  call void @lto_push_out_decl_state(%struct.lto_out_decl_state* %27), !dbg !3335
  %28 = load i32, i32* @flag_wpa, align 4, !dbg !3336
  %tobool12 = icmp ne i32 %28, 0, !dbg !3336
  br i1 %tobool12, label %if.else, label %if.then13, !dbg !3338

if.then13:                                        ; preds = %if.then
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3339
  call void @output_function(%struct.cgraph_node* %29), !dbg !3340
  br label %if.end, !dbg !3340

if.else:                                          ; preds = %if.then
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3341
  call void @copy_function(%struct.cgraph_node* %30), !dbg !3342
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then13
  %call14 = call %struct.lto_out_decl_state* @lto_get_out_decl_state(), !dbg !3343
  %31 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state, align 8, !dbg !3343
  %cmp = icmp eq %struct.lto_out_decl_state* %call14, %31, !dbg !3343
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3343

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 2115, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3343
  br label %cond.end, !dbg !3343

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3343

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3343
  %call15 = call %struct.lto_out_decl_state* @lto_pop_out_decl_state(), !dbg !3344
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3345
  %decl16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 0, !dbg !3346
  %33 = load %union.tree_node*, %union.tree_node** %decl16, align 8, !dbg !3346
  %34 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state, align 8, !dbg !3347
  call void @lto_record_function_out_decl_state(%union.tree_node* %33, %struct.lto_out_decl_state* %34), !dbg !3348
  br label %if.end17, !dbg !3349

if.end17:                                         ; preds = %cond.end, %land.lhs.true, %for.body
  br label %for.inc, !dbg !3350

for.inc:                                          ; preds = %if.end17
  call void @csi_next(%struct.cgraph_node_set_iterator* %csi), !dbg !3351
  br label %for.cond, !dbg !3352, !llvm.loop !3353

for.end:                                          ; preds = %for.cond
  %35 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set.addr, align 8, !dbg !3355
  call void @output_cgraph(%struct.cgraph_node_set_def* %35), !dbg !3356
  %36 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %output, align 8, !dbg !3357
  call void @lto_bitmap_free(%struct.bitmap_head_def* %36), !dbg !3358
  ret void, !dbg !3359
}

; Function Attrs: noinline nounwind uwtable
define internal void @produce_asm_for_decls(%struct.cgraph_node_set_def* %set) #0 !dbg !3360 {
entry:
  %set.addr = alloca %struct.cgraph_node_set_def*, align 8
  %out_state = alloca %struct.lto_out_decl_state*, align 8
  %fn_out_state = alloca %struct.lto_out_decl_state*, align 8
  %header = alloca %struct.lto_decl_header, align 4
  %section_name = alloca i8*, align 8
  %ob = alloca %struct.output_block*, align 8
  %header_stream = alloca %struct.lto_output_stream*, align 8
  %decl_state_stream = alloca %struct.lto_output_stream*, align 8
  %idx = alloca i32, align 4
  %num_fns = alloca i32, align 4
  %decl_state_size = alloca i64, align 8
  %num_decl_states = alloca i32, align 4
  store %struct.cgraph_node_set_def* %set, %struct.cgraph_node_set_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_def** %set.addr, metadata !3361, metadata !DIExpression()), !dbg !3362
  call void @llvm.dbg.declare(metadata %struct.lto_out_decl_state** %out_state, metadata !3363, metadata !DIExpression()), !dbg !3364
  call void @llvm.dbg.declare(metadata %struct.lto_out_decl_state** %fn_out_state, metadata !3365, metadata !DIExpression()), !dbg !3366
  call void @llvm.dbg.declare(metadata %struct.lto_decl_header* %header, metadata !3367, metadata !DIExpression()), !dbg !3375
  call void @llvm.dbg.declare(metadata i8** %section_name, metadata !3376, metadata !DIExpression()), !dbg !3377
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob, metadata !3378, metadata !DIExpression()), !dbg !3379
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %header_stream, metadata !3380, metadata !DIExpression()), !dbg !3381
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %decl_state_stream, metadata !3382, metadata !DIExpression()), !dbg !3383
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !3384, metadata !DIExpression()), !dbg !3385
  call void @llvm.dbg.declare(metadata i32* %num_fns, metadata !3386, metadata !DIExpression()), !dbg !3387
  call void @llvm.dbg.declare(metadata i64* %decl_state_size, metadata !3388, metadata !DIExpression()), !dbg !3389
  call void @llvm.dbg.declare(metadata i32* %num_decl_states, metadata !3390, metadata !DIExpression()), !dbg !3391
  %call = call %struct.output_block* @create_output_block(i32 0), !dbg !3392
  store %struct.output_block* %call, %struct.output_block** %ob, align 8, !dbg !3393
  %0 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3394
  %global = getelementptr inbounds %struct.output_block, %struct.output_block* %0, i32 0, i32 10, !dbg !3395
  store i8 1, i8* %global, align 8, !dbg !3396
  %1 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set.addr, align 8, !dbg !3397
  call void @output_unreferenced_globals(%struct.cgraph_node_set_def* %1), !dbg !3398
  %2 = bitcast %struct.lto_decl_header* %header to i8*, !dbg !3399
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 24, i1 false), !dbg !3399
  %call1 = call i8* @lto_get_section_name(i32 0, i8* null), !dbg !3400
  store i8* %call1, i8** %section_name, align 8, !dbg !3401
  %3 = load i8*, i8** %section_name, align 8, !dbg !3402
  %4 = load i32, i32* @flag_wpa, align 4, !dbg !3403
  %tobool = icmp ne i32 %4, 0, !dbg !3404
  %lnot = xor i1 %tobool, true, !dbg !3404
  %lnot.ext = zext i1 %lnot to i32, !dbg !3404
  %conv = trunc i32 %lnot.ext to i8, !dbg !3404
  call void @lto_begin_section(i8* %3, i8 zeroext %conv), !dbg !3405
  %5 = load i8*, i8** %section_name, align 8, !dbg !3406
  call void @free(i8* %5), !dbg !3407
  %6 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3408
  %string_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %6, i32 0, i32 3, !dbg !3409
  %7 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream, align 8, !dbg !3409
  call void @lto_output_1_stream(%struct.lto_output_stream* %7, i8 signext 0), !dbg !3410
  %call2 = call %struct.lto_out_decl_state* @lto_get_out_decl_state(), !dbg !3411
  store %struct.lto_out_decl_state* %call2, %struct.lto_out_decl_state** %out_state, align 8, !dbg !3412
  %8 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !3413
  %tobool3 = icmp ne %struct.VEC_lto_out_decl_state_ptr_heap* %8, null, !dbg !3413
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3413

cond.true:                                        ; preds = %entry
  %9 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !3413
  %base = getelementptr inbounds %struct.VEC_lto_out_decl_state_ptr_heap, %struct.VEC_lto_out_decl_state_ptr_heap* %9, i32 0, i32 0, !dbg !3413
  br label %cond.end, !dbg !3413

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3413

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lto_out_decl_state_ptr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3413
  %call4 = call i32 @VEC_lto_out_decl_state_ptr_base_length(%struct.VEC_lto_out_decl_state_ptr_base* %cond), !dbg !3413
  store i32 %call4, i32* %num_fns, align 4, !dbg !3414
  %10 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3415
  %11 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %out_state, align 8, !dbg !3416
  call void @lto_output_decl_state_streams(%struct.output_block* %10, %struct.lto_out_decl_state* %11), !dbg !3417
  store i32 0, i32* %idx, align 4, !dbg !3418
  br label %for.cond, !dbg !3420

for.cond:                                         ; preds = %for.inc, %cond.end
  %12 = load i32, i32* %idx, align 4, !dbg !3421
  %13 = load i32, i32* %num_fns, align 4, !dbg !3423
  %cmp = icmp ult i32 %12, %13, !dbg !3424
  br i1 %cmp, label %for.body, label %for.end, !dbg !3425

for.body:                                         ; preds = %for.cond
  %14 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !3426
  %tobool6 = icmp ne %struct.VEC_lto_out_decl_state_ptr_heap* %14, null, !dbg !3426
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !3426

cond.true7:                                       ; preds = %for.body
  %15 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !3426
  %base8 = getelementptr inbounds %struct.VEC_lto_out_decl_state_ptr_heap, %struct.VEC_lto_out_decl_state_ptr_heap* %15, i32 0, i32 0, !dbg !3426
  br label %cond.end10, !dbg !3426

cond.false9:                                      ; preds = %for.body
  br label %cond.end10, !dbg !3426

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_lto_out_decl_state_ptr_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !3426
  %16 = load i32, i32* %idx, align 4, !dbg !3426
  %call12 = call %struct.lto_out_decl_state* @VEC_lto_out_decl_state_ptr_base_index(%struct.VEC_lto_out_decl_state_ptr_base* %cond11, i32 %16), !dbg !3426
  store %struct.lto_out_decl_state* %call12, %struct.lto_out_decl_state** %fn_out_state, align 8, !dbg !3428
  %17 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3429
  %18 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %fn_out_state, align 8, !dbg !3430
  call void @lto_output_decl_state_streams(%struct.output_block* %17, %struct.lto_out_decl_state* %18), !dbg !3431
  br label %for.inc, !dbg !3432

for.inc:                                          ; preds = %cond.end10
  %19 = load i32, i32* %idx, align 4, !dbg !3433
  %inc = add i32 %19, 1, !dbg !3433
  store i32 %inc, i32* %idx, align 4, !dbg !3433
  br label %for.cond, !dbg !3434, !llvm.loop !3435

for.end:                                          ; preds = %for.cond
  %lto_header = getelementptr inbounds %struct.lto_decl_header, %struct.lto_decl_header* %header, i32 0, i32 0, !dbg !3437
  %major_version = getelementptr inbounds %struct.lto_header, %struct.lto_header* %lto_header, i32 0, i32 0, !dbg !3438
  store i16 1, i16* %major_version, align 4, !dbg !3439
  %lto_header13 = getelementptr inbounds %struct.lto_decl_header, %struct.lto_decl_header* %header, i32 0, i32 0, !dbg !3440
  %minor_version = getelementptr inbounds %struct.lto_header, %struct.lto_header* %lto_header13, i32 0, i32 1, !dbg !3441
  store i16 0, i16* %minor_version, align 2, !dbg !3442
  %lto_header14 = getelementptr inbounds %struct.lto_decl_header, %struct.lto_decl_header* %header, i32 0, i32 0, !dbg !3443
  %section_type = getelementptr inbounds %struct.lto_header, %struct.lto_header* %lto_header14, i32 0, i32 2, !dbg !3444
  store i32 0, i32* %section_type, align 4, !dbg !3445
  %num_nodes = getelementptr inbounds %struct.lto_decl_header, %struct.lto_decl_header* %header, i32 0, i32 2, !dbg !3446
  store i32 -1, i32* %num_nodes, align 4, !dbg !3447
  store i64 4, i64* %decl_state_size, align 8, !dbg !3448
  %20 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %out_state, align 8, !dbg !3449
  %call15 = call i64 @lto_out_decl_state_written_size(%struct.lto_out_decl_state* %20), !dbg !3450
  %21 = load i64, i64* %decl_state_size, align 8, !dbg !3451
  %add = add i64 %21, %call15, !dbg !3451
  store i64 %add, i64* %decl_state_size, align 8, !dbg !3451
  store i32 0, i32* %idx, align 4, !dbg !3452
  br label %for.cond16, !dbg !3454

for.cond16:                                       ; preds = %for.inc29, %for.end
  %22 = load i32, i32* %idx, align 4, !dbg !3455
  %23 = load i32, i32* %num_fns, align 4, !dbg !3457
  %cmp17 = icmp ult i32 %22, %23, !dbg !3458
  br i1 %cmp17, label %for.body19, label %for.end31, !dbg !3459

for.body19:                                       ; preds = %for.cond16
  %24 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !3460
  %tobool20 = icmp ne %struct.VEC_lto_out_decl_state_ptr_heap* %24, null, !dbg !3460
  br i1 %tobool20, label %cond.true21, label %cond.false23, !dbg !3460

cond.true21:                                      ; preds = %for.body19
  %25 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !3460
  %base22 = getelementptr inbounds %struct.VEC_lto_out_decl_state_ptr_heap, %struct.VEC_lto_out_decl_state_ptr_heap* %25, i32 0, i32 0, !dbg !3460
  br label %cond.end24, !dbg !3460

cond.false23:                                     ; preds = %for.body19
  br label %cond.end24, !dbg !3460

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi %struct.VEC_lto_out_decl_state_ptr_base* [ %base22, %cond.true21 ], [ null, %cond.false23 ], !dbg !3460
  %26 = load i32, i32* %idx, align 4, !dbg !3460
  %call26 = call %struct.lto_out_decl_state* @VEC_lto_out_decl_state_ptr_base_index(%struct.VEC_lto_out_decl_state_ptr_base* %cond25, i32 %26), !dbg !3460
  store %struct.lto_out_decl_state* %call26, %struct.lto_out_decl_state** %fn_out_state, align 8, !dbg !3462
  %27 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %fn_out_state, align 8, !dbg !3463
  %call27 = call i64 @lto_out_decl_state_written_size(%struct.lto_out_decl_state* %27), !dbg !3464
  %28 = load i64, i64* %decl_state_size, align 8, !dbg !3465
  %add28 = add i64 %28, %call27, !dbg !3465
  store i64 %add28, i64* %decl_state_size, align 8, !dbg !3465
  br label %for.inc29, !dbg !3466

for.inc29:                                        ; preds = %cond.end24
  %29 = load i32, i32* %idx, align 4, !dbg !3467
  %inc30 = add i32 %29, 1, !dbg !3467
  store i32 %inc30, i32* %idx, align 4, !dbg !3467
  br label %for.cond16, !dbg !3468, !llvm.loop !3469

for.end31:                                        ; preds = %for.cond16
  %30 = load i64, i64* %decl_state_size, align 8, !dbg !3471
  %conv32 = trunc i64 %30 to i32, !dbg !3471
  %decl_state_size33 = getelementptr inbounds %struct.lto_decl_header, %struct.lto_decl_header* %header, i32 0, i32 1, !dbg !3472
  store i32 %conv32, i32* %decl_state_size33, align 4, !dbg !3473
  %31 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3474
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %31, i32 0, i32 2, !dbg !3475
  %32 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !3475
  %total_size = getelementptr inbounds %struct.lto_output_stream, %struct.lto_output_stream* %32, i32 0, i32 5, !dbg !3476
  %33 = load i32, i32* %total_size, align 8, !dbg !3476
  %main_size = getelementptr inbounds %struct.lto_decl_header, %struct.lto_decl_header* %header, i32 0, i32 3, !dbg !3477
  store i32 %33, i32* %main_size, align 4, !dbg !3478
  %34 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3479
  %string_stream34 = getelementptr inbounds %struct.output_block, %struct.output_block* %34, i32 0, i32 3, !dbg !3480
  %35 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream34, align 8, !dbg !3480
  %total_size35 = getelementptr inbounds %struct.lto_output_stream, %struct.lto_output_stream* %35, i32 0, i32 5, !dbg !3481
  %36 = load i32, i32* %total_size35, align 8, !dbg !3481
  %string_size = getelementptr inbounds %struct.lto_decl_header, %struct.lto_decl_header* %header, i32 0, i32 4, !dbg !3482
  store i32 %36, i32* %string_size, align 4, !dbg !3483
  %call36 = call i8* @xcalloc(i64 1, i64 40), !dbg !3484
  %37 = bitcast i8* %call36 to %struct.lto_output_stream*, !dbg !3484
  store %struct.lto_output_stream* %37, %struct.lto_output_stream** %header_stream, align 8, !dbg !3485
  %38 = load %struct.lto_output_stream*, %struct.lto_output_stream** %header_stream, align 8, !dbg !3486
  %39 = bitcast %struct.lto_decl_header* %header to i8*, !dbg !3487
  call void @lto_output_data_stream(%struct.lto_output_stream* %38, i8* %39, i64 24), !dbg !3488
  %40 = load %struct.lto_output_stream*, %struct.lto_output_stream** %header_stream, align 8, !dbg !3489
  call void @lto_write_stream(%struct.lto_output_stream* %40), !dbg !3490
  %41 = load %struct.lto_output_stream*, %struct.lto_output_stream** %header_stream, align 8, !dbg !3491
  %42 = bitcast %struct.lto_output_stream* %41 to i8*, !dbg !3491
  call void @free(i8* %42), !dbg !3492
  %call37 = call i8* @xcalloc(i64 1, i64 40), !dbg !3493
  %43 = bitcast i8* %call37 to %struct.lto_output_stream*, !dbg !3494
  store %struct.lto_output_stream* %43, %struct.lto_output_stream** %decl_state_stream, align 8, !dbg !3495
  %44 = load i32, i32* %num_fns, align 4, !dbg !3496
  %add38 = add i32 %44, 1, !dbg !3497
  store i32 %add38, i32* %num_decl_states, align 4, !dbg !3498
  %45 = load %struct.lto_output_stream*, %struct.lto_output_stream** %decl_state_stream, align 8, !dbg !3499
  %46 = bitcast i32* %num_decl_states to i8*, !dbg !3500
  call void @lto_output_data_stream(%struct.lto_output_stream* %45, i8* %46, i64 4), !dbg !3501
  %47 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3502
  %48 = load %struct.lto_output_stream*, %struct.lto_output_stream** %decl_state_stream, align 8, !dbg !3503
  %49 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %out_state, align 8, !dbg !3504
  call void @lto_output_decl_state_refs(%struct.output_block* %47, %struct.lto_output_stream* %48, %struct.lto_out_decl_state* %49), !dbg !3505
  store i32 0, i32* %idx, align 4, !dbg !3506
  br label %for.cond39, !dbg !3508

for.cond39:                                       ; preds = %for.inc50, %for.end31
  %50 = load i32, i32* %idx, align 4, !dbg !3509
  %51 = load i32, i32* %num_fns, align 4, !dbg !3511
  %cmp40 = icmp ult i32 %50, %51, !dbg !3512
  br i1 %cmp40, label %for.body42, label %for.end52, !dbg !3513

for.body42:                                       ; preds = %for.cond39
  %52 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !3514
  %tobool43 = icmp ne %struct.VEC_lto_out_decl_state_ptr_heap* %52, null, !dbg !3514
  br i1 %tobool43, label %cond.true44, label %cond.false46, !dbg !3514

cond.true44:                                      ; preds = %for.body42
  %53 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !3514
  %base45 = getelementptr inbounds %struct.VEC_lto_out_decl_state_ptr_heap, %struct.VEC_lto_out_decl_state_ptr_heap* %53, i32 0, i32 0, !dbg !3514
  br label %cond.end47, !dbg !3514

cond.false46:                                     ; preds = %for.body42
  br label %cond.end47, !dbg !3514

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi %struct.VEC_lto_out_decl_state_ptr_base* [ %base45, %cond.true44 ], [ null, %cond.false46 ], !dbg !3514
  %54 = load i32, i32* %idx, align 4, !dbg !3514
  %call49 = call %struct.lto_out_decl_state* @VEC_lto_out_decl_state_ptr_base_index(%struct.VEC_lto_out_decl_state_ptr_base* %cond48, i32 %54), !dbg !3514
  store %struct.lto_out_decl_state* %call49, %struct.lto_out_decl_state** %fn_out_state, align 8, !dbg !3516
  %55 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3517
  %56 = load %struct.lto_output_stream*, %struct.lto_output_stream** %decl_state_stream, align 8, !dbg !3518
  %57 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %fn_out_state, align 8, !dbg !3519
  call void @lto_output_decl_state_refs(%struct.output_block* %55, %struct.lto_output_stream* %56, %struct.lto_out_decl_state* %57), !dbg !3520
  br label %for.inc50, !dbg !3521

for.inc50:                                        ; preds = %cond.end47
  %58 = load i32, i32* %idx, align 4, !dbg !3522
  %inc51 = add i32 %58, 1, !dbg !3522
  store i32 %inc51, i32* %idx, align 4, !dbg !3522
  br label %for.cond39, !dbg !3523, !llvm.loop !3524

for.end52:                                        ; preds = %for.cond39
  %59 = load %struct.lto_output_stream*, %struct.lto_output_stream** %decl_state_stream, align 8, !dbg !3526
  call void @lto_write_stream(%struct.lto_output_stream* %59), !dbg !3527
  %60 = load %struct.lto_output_stream*, %struct.lto_output_stream** %decl_state_stream, align 8, !dbg !3528
  %61 = bitcast %struct.lto_output_stream* %60 to i8*, !dbg !3528
  call void @free(i8* %61), !dbg !3529
  %62 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3530
  %main_stream53 = getelementptr inbounds %struct.output_block, %struct.output_block* %62, i32 0, i32 2, !dbg !3531
  %63 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream53, align 8, !dbg !3531
  call void @lto_write_stream(%struct.lto_output_stream* %63), !dbg !3532
  %64 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3533
  %string_stream54 = getelementptr inbounds %struct.output_block, %struct.output_block* %64, i32 0, i32 3, !dbg !3534
  %65 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream54, align 8, !dbg !3534
  call void @lto_write_stream(%struct.lto_output_stream* %65), !dbg !3535
  call void @lto_end_section(), !dbg !3536
  %66 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3537
  %writer_cache = getelementptr inbounds %struct.output_block, %struct.output_block* %66, i32 0, i32 11, !dbg !3538
  %67 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %writer_cache, align 8, !dbg !3538
  call void @produce_symtab(%struct.lto_streamer_cache_d* %67), !dbg !3539
  call void @lto_write_options(), !dbg !3540
  %68 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3541
  %decl_state = getelementptr inbounds %struct.output_block, %struct.output_block* %68, i32 0, i32 1, !dbg !3542
  %69 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state, align 8, !dbg !3542
  %cgraph_node_encoder = getelementptr inbounds %struct.lto_out_decl_state, %struct.lto_out_decl_state* %69, i32 0, i32 1, !dbg !3543
  %70 = load %struct.lto_cgraph_encoder_d*, %struct.lto_cgraph_encoder_d** %cgraph_node_encoder, align 8, !dbg !3543
  call void @lto_cgraph_encoder_delete(%struct.lto_cgraph_encoder_d* %70), !dbg !3544
  call void @VEC_lto_out_decl_state_ptr_heap_free(%struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states), !dbg !3545
  store %struct.VEC_lto_out_decl_state_ptr_heap* null, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !3546
  %71 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !3547
  call void @destroy_output_block(%struct.output_block* %71), !dbg !3548
  ret void, !dbg !3549
}

declare dso_local i32 @htab_hash_string(i8*) #2

declare dso_local void @lto_output_1_stream(%struct.lto_output_stream*, i8 signext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_tree_or_ref(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !3550 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3551, metadata !DIExpression()), !dbg !3552
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !3553, metadata !DIExpression()), !dbg !3554
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !3555, metadata !DIExpression()), !dbg !3556
  %0 = load i8, i8* %ref_p.addr, align 1, !dbg !3557
  %tobool = icmp ne i8 %0, 0, !dbg !3557
  br i1 %tobool, label %if.then, label %if.else, !dbg !3559

if.then:                                          ; preds = %entry
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3560
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3561
  call void @lto_output_tree_ref(%struct.output_block* %1, %union.tree_node* %2), !dbg !3562
  br label %if.end, !dbg !3562

if.else:                                          ; preds = %entry
  %3 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3563
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3564
  call void @lto_output_tree(%struct.output_block* %3, %union.tree_node* %4, i8 zeroext 0), !dbg !3565
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !3566
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_tree_ref(%struct.output_block* %ob, %union.tree_node* %expr) #0 !dbg !3567 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3568, metadata !DIExpression()), !dbg !3569
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !3570, metadata !DIExpression()), !dbg !3571
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3572, metadata !DIExpression()), !dbg !3573
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3574
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !3576
  br i1 %cmp, label %if.then, label %if.end, !dbg !3577

if.then:                                          ; preds = %entry
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3578
  call void @output_zero(%struct.output_block* %1), !dbg !3580
  br label %sw.epilog, !dbg !3581

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3582
  %call = call zeroext i8 @tree_is_indexable(%union.tree_node* %2), !dbg !3584
  %tobool = icmp ne i8 %call, 0, !dbg !3584
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !3585

if.then1:                                         ; preds = %if.end
  %3 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3586
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3588
  call void @lto_output_tree(%struct.output_block* %3, %union.tree_node* %4, i8 zeroext 1), !dbg !3589
  br label %sw.epilog, !dbg !3590

if.end2:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3591
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !3591
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !3591
  %bf.load = load i64, i64* %6, align 8, !dbg !3591
  %bf.clear = and i64 %bf.load, 65535, !dbg !3591
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3591
  %idxprom = sext i32 %bf.cast to i64, !dbg !3591
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3591
  %7 = load i32, i32* %arrayidx, align 4, !dbg !3591
  %cmp3 = icmp eq i32 %7, 2, !dbg !3591
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !3593

if.then4:                                         ; preds = %if.end2
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3594
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3596
  call void @output_type_ref(%struct.output_block* %8, %union.tree_node* %9), !dbg !3597
  br label %sw.epilog, !dbg !3598

if.end5:                                          ; preds = %if.end2
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3599
  %base6 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3599
  %11 = bitcast %struct.tree_base* %base6 to i64*, !dbg !3599
  %bf.load7 = load i64, i64* %11, align 8, !dbg !3599
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !3599
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !3599
  store i32 %bf.cast9, i32* %code, align 4, !dbg !3600
  %12 = load i32, i32* %code, align 4, !dbg !3601
  switch i32 %12, label %sw.default [
    i32 141, label %sw.bb
    i32 31, label %sw.bb10
    i32 29, label %sw.bb11
    i32 32, label %sw.bb14
    i32 37, label %sw.bb14
    i32 33, label %sw.bb25
    i32 39, label %sw.bb28
    i32 35, label %sw.bb38
    i32 38, label %sw.bb41
    i32 30, label %sw.bb44
    i32 36, label %sw.bb47
  ], !dbg !3602

sw.bb:                                            ; preds = %if.end5
  %13 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3603
  call void @output_record_start(%struct.output_block* %13, i32 243), !dbg !3605
  %14 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3606
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3607
  %ssa_name = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !3607
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3607
  %16 = load i32, i32* %version, align 8, !dbg !3607
  %conv = zext i32 %16 to i64, !dbg !3607
  call void @output_uleb128(%struct.output_block* %14, i64 %conv), !dbg !3608
  br label %sw.epilog, !dbg !3609

sw.bb10:                                          ; preds = %if.end5
  %17 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3610
  call void @output_record_start(%struct.output_block* %17, i32 238), !dbg !3611
  %18 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3612
  %decl_state = getelementptr inbounds %struct.output_block, %struct.output_block* %18, i32 0, i32 1, !dbg !3613
  %19 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state, align 8, !dbg !3613
  %20 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3614
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %20, i32 0, i32 2, !dbg !3615
  %21 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !3615
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3616
  call void @lto_output_field_decl_index(%struct.lto_out_decl_state* %19, %struct.lto_output_stream* %21, %union.tree_node* %22), !dbg !3617
  br label %sw.epilog, !dbg !3618

sw.bb11:                                          ; preds = %if.end5
  %23 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3619
  call void @output_record_start(%struct.output_block* %23, i32 239), !dbg !3620
  %24 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3621
  %decl_state12 = getelementptr inbounds %struct.output_block, %struct.output_block* %24, i32 0, i32 1, !dbg !3622
  %25 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state12, align 8, !dbg !3622
  %26 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3623
  %main_stream13 = getelementptr inbounds %struct.output_block, %struct.output_block* %26, i32 0, i32 2, !dbg !3624
  %27 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream13, align 8, !dbg !3624
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3625
  call void @lto_output_fn_decl_index(%struct.lto_out_decl_state* %25, %struct.lto_output_stream* %27, %union.tree_node* %28), !dbg !3626
  br label %sw.epilog, !dbg !3627

sw.bb14:                                          ; preds = %if.end5, %if.end5
  %29 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3628
  %call15 = call %union.tree_node* @decl_function_context(%union.tree_node* %29), !dbg !3628
  %cmp16 = icmp eq %union.tree_node* %call15, null, !dbg !3628
  br i1 %cmp16, label %cond.false, label %lor.lhs.false, !dbg !3628

lor.lhs.false:                                    ; preds = %sw.bb14
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3628
  %base18 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !3628
  %31 = bitcast %struct.tree_base* %base18 to i64*, !dbg !3628
  %bf.load19 = load i64, i64* %31, align 8, !dbg !3628
  %bf.lshr = lshr i64 %bf.load19, 26, !dbg !3628
  %bf.clear20 = and i64 %bf.lshr, 1, !dbg !3628
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !3628
  %tobool22 = icmp ne i32 %bf.cast21, 0, !dbg !3628
  br i1 %tobool22, label %cond.false, label %cond.true, !dbg !3628

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 699, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3628
  br label %cond.end, !dbg !3628

cond.false:                                       ; preds = %lor.lhs.false, %sw.bb14
  br label %cond.end, !dbg !3628

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3628
  %32 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3629
  call void @output_record_start(%struct.output_block* %32, i32 248), !dbg !3630
  %33 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3631
  %decl_state23 = getelementptr inbounds %struct.output_block, %struct.output_block* %33, i32 0, i32 1, !dbg !3632
  %34 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state23, align 8, !dbg !3632
  %35 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3633
  %main_stream24 = getelementptr inbounds %struct.output_block, %struct.output_block* %35, i32 0, i32 2, !dbg !3634
  %36 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream24, align 8, !dbg !3634
  %37 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3635
  call void @lto_output_var_decl_index(%struct.lto_out_decl_state* %34, %struct.lto_output_stream* %36, %union.tree_node* %37), !dbg !3636
  br label %sw.epilog, !dbg !3637

sw.bb25:                                          ; preds = %if.end5
  %38 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3638
  call void @output_record_start(%struct.output_block* %38, i32 246), !dbg !3639
  %39 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3640
  %decl_state26 = getelementptr inbounds %struct.output_block, %struct.output_block* %39, i32 0, i32 1, !dbg !3641
  %40 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state26, align 8, !dbg !3641
  %41 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3642
  %main_stream27 = getelementptr inbounds %struct.output_block, %struct.output_block* %41, i32 0, i32 2, !dbg !3643
  %42 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream27, align 8, !dbg !3643
  %43 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3644
  call void @lto_output_var_decl_index(%struct.lto_out_decl_state* %40, %struct.lto_output_stream* %42, %union.tree_node* %43), !dbg !3645
  br label %sw.epilog, !dbg !3646

sw.bb28:                                          ; preds = %if.end5
  %44 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3647
  %call29 = call %union.tree_node* @decl_function_context(%union.tree_node* %44), !dbg !3647
  %cmp30 = icmp eq %union.tree_node* %call29, null, !dbg !3647
  br i1 %cmp30, label %cond.false33, label %cond.true32, !dbg !3647

cond.true32:                                      ; preds = %sw.bb28
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3647
  br label %cond.end34, !dbg !3647

cond.false33:                                     ; preds = %sw.bb28
  br label %cond.end34, !dbg !3647

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond35 = phi i32 [ 0, %cond.true32 ], [ 0, %cond.false33 ], !dbg !3647
  %45 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3648
  call void @output_record_start(%struct.output_block* %45, i32 247), !dbg !3649
  %46 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3650
  %decl_state36 = getelementptr inbounds %struct.output_block, %struct.output_block* %46, i32 0, i32 1, !dbg !3651
  %47 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state36, align 8, !dbg !3651
  %48 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3652
  %main_stream37 = getelementptr inbounds %struct.output_block, %struct.output_block* %48, i32 0, i32 2, !dbg !3653
  %49 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream37, align 8, !dbg !3653
  %50 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3654
  call void @lto_output_var_decl_index(%struct.lto_out_decl_state* %47, %struct.lto_output_stream* %49, %union.tree_node* %50), !dbg !3655
  br label %sw.epilog, !dbg !3656

sw.bb38:                                          ; preds = %if.end5
  %51 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3657
  call void @output_record_start(%struct.output_block* %51, i32 244), !dbg !3658
  %52 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3659
  %decl_state39 = getelementptr inbounds %struct.output_block, %struct.output_block* %52, i32 0, i32 1, !dbg !3660
  %53 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state39, align 8, !dbg !3660
  %54 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3661
  %main_stream40 = getelementptr inbounds %struct.output_block, %struct.output_block* %54, i32 0, i32 2, !dbg !3662
  %55 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream40, align 8, !dbg !3662
  %56 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3663
  call void @lto_output_type_decl_index(%struct.lto_out_decl_state* %53, %struct.lto_output_stream* %55, %union.tree_node* %56), !dbg !3664
  br label %sw.epilog, !dbg !3665

sw.bb41:                                          ; preds = %if.end5
  %57 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3666
  call void @output_record_start(%struct.output_block* %57, i32 241), !dbg !3667
  %58 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3668
  %decl_state42 = getelementptr inbounds %struct.output_block, %struct.output_block* %58, i32 0, i32 1, !dbg !3669
  %59 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state42, align 8, !dbg !3669
  %60 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3670
  %main_stream43 = getelementptr inbounds %struct.output_block, %struct.output_block* %60, i32 0, i32 2, !dbg !3671
  %61 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream43, align 8, !dbg !3671
  %62 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3672
  call void @lto_output_namespace_decl_index(%struct.lto_out_decl_state* %59, %struct.lto_output_stream* %61, %union.tree_node* %62), !dbg !3673
  br label %sw.epilog, !dbg !3674

sw.bb44:                                          ; preds = %if.end5
  %63 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3675
  call void @output_record_start(%struct.output_block* %63, i32 240), !dbg !3676
  %64 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3677
  %decl_state45 = getelementptr inbounds %struct.output_block, %struct.output_block* %64, i32 0, i32 1, !dbg !3678
  %65 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state45, align 8, !dbg !3678
  %66 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3679
  %main_stream46 = getelementptr inbounds %struct.output_block, %struct.output_block* %66, i32 0, i32 2, !dbg !3680
  %67 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream46, align 8, !dbg !3680
  %68 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3681
  call void @lto_output_var_decl_index(%struct.lto_out_decl_state* %65, %struct.lto_output_stream* %67, %union.tree_node* %68), !dbg !3682
  br label %sw.epilog, !dbg !3683

sw.bb47:                                          ; preds = %if.end5
  %69 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3684
  call void @output_record_start(%struct.output_block* %69, i32 242), !dbg !3685
  %70 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3686
  %decl_state48 = getelementptr inbounds %struct.output_block, %struct.output_block* %70, i32 0, i32 1, !dbg !3687
  %71 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state48, align 8, !dbg !3687
  %72 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3688
  %main_stream49 = getelementptr inbounds %struct.output_block, %struct.output_block* %72, i32 0, i32 2, !dbg !3689
  %73 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream49, align 8, !dbg !3689
  %74 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3690
  call void @lto_output_var_decl_index(%struct.lto_out_decl_state* %71, %struct.lto_output_stream* %73, %union.tree_node* %74), !dbg !3691
  br label %sw.epilog, !dbg !3692

sw.default:                                       ; preds = %if.end5
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3693
  br label %sw.epilog, !dbg !3694

sw.epilog:                                        ; preds = %if.then, %if.then1, %if.then4, %sw.default, %sw.bb47, %sw.bb44, %sw.bb41, %sw.bb38, %cond.end34, %sw.bb25, %cond.end, %sw.bb11, %sw.bb10, %sw.bb
  ret void, !dbg !3695
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @tree_is_indexable(%union.tree_node* %t) #0 !dbg !3696 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3697, metadata !DIExpression()), !dbg !3698
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3699
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3699
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3699
  %bf.load = load i64, i64* %1, align 8, !dbg !3699
  %bf.clear = and i64 %bf.load, 65535, !dbg !3699
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3699
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !3701
  br i1 %cmp, label %if.then, label %if.else, !dbg !3702

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3703
  br label %return, !dbg !3703

if.else:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3704
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3704
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3704
  %bf.load2 = load i64, i64* %3, align 8, !dbg !3704
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !3704
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !3704
  %cmp5 = icmp eq i32 %bf.cast4, 32, !dbg !3706
  br i1 %cmp5, label %land.lhs.true, label %if.else13, !dbg !3707

land.lhs.true:                                    ; preds = %if.else
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3708
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %4), !dbg !3709
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !3709
  br i1 %tobool, label %land.lhs.true6, label %if.else13, !dbg !3710

land.lhs.true6:                                   ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3711
  %base7 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !3711
  %6 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3711
  %bf.load8 = load i64, i64* %6, align 8, !dbg !3711
  %bf.lshr = lshr i64 %bf.load8, 26, !dbg !3711
  %bf.clear9 = and i64 %bf.lshr, 1, !dbg !3711
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3711
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !3711
  br i1 %tobool11, label %if.else13, label %if.then12, !dbg !3712

if.then12:                                        ; preds = %land.lhs.true6
  store i8 0, i8* %retval, align 1, !dbg !3713
  br label %return, !dbg !3713

if.else13:                                        ; preds = %land.lhs.true6, %land.lhs.true, %if.else
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3714
  %base14 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3714
  %8 = bitcast %struct.tree_base* %base14 to i64*, !dbg !3714
  %bf.load15 = load i64, i64* %8, align 8, !dbg !3714
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !3714
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !3714
  %idxprom = sext i32 %bf.cast17 to i64, !dbg !3714
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3714
  %9 = load i32, i32* %arrayidx, align 4, !dbg !3714
  %cmp18 = icmp eq i32 %9, 2, !dbg !3714
  br i1 %cmp18, label %lor.end, label %lor.lhs.false, !dbg !3715

lor.lhs.false:                                    ; preds = %if.else13
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3716
  %base19 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3716
  %11 = bitcast %struct.tree_base* %base19 to i64*, !dbg !3716
  %bf.load20 = load i64, i64* %11, align 8, !dbg !3716
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !3716
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !3716
  %idxprom23 = sext i32 %bf.cast22 to i64, !dbg !3716
  %arrayidx24 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom23, !dbg !3716
  %12 = load i32, i32* %arrayidx24, align 4, !dbg !3716
  %cmp25 = icmp eq i32 %12, 3, !dbg !3716
  br i1 %cmp25, label %lor.end, label %lor.rhs, !dbg !3717

lor.rhs:                                          ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3718
  %base26 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !3718
  %14 = bitcast %struct.tree_base* %base26 to i64*, !dbg !3718
  %bf.load27 = load i64, i64* %14, align 8, !dbg !3718
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !3718
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !3718
  %cmp30 = icmp eq i32 %bf.cast29, 141, !dbg !3719
  br label %lor.end, !dbg !3717

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %if.else13
  %15 = phi i1 [ true, %lor.lhs.false ], [ true, %if.else13 ], [ %cmp30, %lor.rhs ]
  %lor.ext = zext i1 %15 to i32, !dbg !3717
  %conv = trunc i32 %lor.ext to i8, !dbg !3720
  store i8 %conv, i8* %retval, align 1, !dbg !3721
  br label %return, !dbg !3721

return:                                           ; preds = %lor.end, %if.then12, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !3722
  ret i8 %16, !dbg !3722
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_type_ref(%struct.output_block* %ob, %union.tree_node* %node) #0 !dbg !3723 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %node.addr = alloca %union.tree_node*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3724, metadata !DIExpression()), !dbg !3725
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %node.addr, metadata !3726, metadata !DIExpression()), !dbg !3727
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3728
  call void @output_record_start(%struct.output_block* %0, i32 245), !dbg !3729
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3730
  %decl_state = getelementptr inbounds %struct.output_block, %struct.output_block* %1, i32 0, i32 1, !dbg !3731
  %2 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state, align 8, !dbg !3731
  %3 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3732
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %3, i32 0, i32 2, !dbg !3733
  %4 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !3733
  %5 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !3734
  call void @lto_output_type_ref_index(%struct.lto_out_decl_state* %2, %struct.lto_output_stream* %4, %union.tree_node* %5), !dbg !3735
  ret void, !dbg !3736
}

declare dso_local void @lto_output_field_decl_index(%struct.lto_out_decl_state*, %struct.lto_output_stream*, %union.tree_node*) #2

declare dso_local void @lto_output_fn_decl_index(%struct.lto_out_decl_state*, %struct.lto_output_stream*, %union.tree_node*) #2

declare dso_local %union.tree_node* @decl_function_context(%union.tree_node*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local void @lto_output_var_decl_index(%struct.lto_out_decl_state*, %struct.lto_output_stream*, %union.tree_node*) #2

declare dso_local void @lto_output_type_decl_index(%struct.lto_out_decl_state*, %struct.lto_output_stream*, %union.tree_node*) #2

declare dso_local void @lto_output_namespace_decl_index(%struct.lto_out_decl_state*, %struct.lto_output_stream*, %union.tree_node*) #2

declare dso_local void @lto_output_type_ref_index(%struct.lto_out_decl_state*, %struct.lto_output_stream*, %union.tree_node*) #2

declare dso_local void @lto_output_sleb128_stream(%struct.lto_output_stream*, i64) #2

declare dso_local void @sorry(i8*, ...) #2

declare dso_local i64 @strlen(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @output_string(%struct.output_block* %ob, %struct.lto_output_stream* %index_stream, i8* %string) #0 !dbg !3737 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %index_stream.addr = alloca %struct.lto_output_stream*, align 8
  %string.addr = alloca i8*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3740, metadata !DIExpression()), !dbg !3741
  store %struct.lto_output_stream* %index_stream, %struct.lto_output_stream** %index_stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %index_stream.addr, metadata !3742, metadata !DIExpression()), !dbg !3743
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !3744, metadata !DIExpression()), !dbg !3745
  %0 = load i8*, i8** %string.addr, align 8, !dbg !3746
  %tobool = icmp ne i8* %0, null, !dbg !3746
  br i1 %tobool, label %if.then, label %if.else, !dbg !3748

if.then:                                          ; preds = %entry
  %1 = load %struct.lto_output_stream*, %struct.lto_output_stream** %index_stream.addr, align 8, !dbg !3749
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %1, i64 0), !dbg !3751
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3752
  %3 = load %struct.lto_output_stream*, %struct.lto_output_stream** %index_stream.addr, align 8, !dbg !3753
  %4 = load i8*, i8** %string.addr, align 8, !dbg !3754
  %5 = load i8*, i8** %string.addr, align 8, !dbg !3755
  %call = call i64 @strlen(i8* %5), !dbg !3756
  %add = add i64 %call, 1, !dbg !3757
  %conv = trunc i64 %add to i32, !dbg !3756
  call void @output_string_with_length(%struct.output_block* %2, %struct.lto_output_stream* %3, i8* %4, i32 %conv), !dbg !3758
  br label %if.end, !dbg !3759

if.else:                                          ; preds = %entry
  %6 = load %struct.lto_output_stream*, %struct.lto_output_stream** %index_stream.addr, align 8, !dbg !3760
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %6, i64 1), !dbg !3761
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !3762
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_string_with_length(%struct.output_block* %ob, %struct.lto_output_stream* %index_stream, i8* %s, i32 %len) #0 !dbg !3763 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %index_stream.addr = alloca %struct.lto_output_stream*, align 8
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %slot = alloca %struct.string_slot**, align 8
  %s_slot = alloca %struct.string_slot, align 8
  %string = alloca i8*, align 8
  %string_stream = alloca %struct.lto_output_stream*, align 8
  %start = alloca i32, align 4
  %new_slot = alloca %struct.string_slot*, align 8
  %i = alloca i32, align 4
  %old_slot = alloca %struct.string_slot*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3766, metadata !DIExpression()), !dbg !3767
  store %struct.lto_output_stream* %index_stream, %struct.lto_output_stream** %index_stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %index_stream.addr, metadata !3768, metadata !DIExpression()), !dbg !3769
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3770, metadata !DIExpression()), !dbg !3771
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !3772, metadata !DIExpression()), !dbg !3773
  call void @llvm.dbg.declare(metadata %struct.string_slot*** %slot, metadata !3774, metadata !DIExpression()), !dbg !3775
  call void @llvm.dbg.declare(metadata %struct.string_slot* %s_slot, metadata !3776, metadata !DIExpression()), !dbg !3777
  call void @llvm.dbg.declare(metadata i8** %string, metadata !3778, metadata !DIExpression()), !dbg !3779
  %0 = load i32, i32* %len.addr, align 4, !dbg !3780
  %add = add i32 %0, 1, !dbg !3781
  %conv = zext i32 %add to i64, !dbg !3780
  %call = call i8* @xmalloc(i64 %conv), !dbg !3782
  store i8* %call, i8** %string, align 8, !dbg !3779
  %1 = load i8*, i8** %string, align 8, !dbg !3783
  %2 = load i8*, i8** %s.addr, align 8, !dbg !3784
  %3 = load i32, i32* %len.addr, align 4, !dbg !3785
  %conv1 = zext i32 %3 to i64, !dbg !3785
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %conv1, i1 false), !dbg !3786
  %4 = load i8*, i8** %string, align 8, !dbg !3787
  %5 = load i32, i32* %len.addr, align 4, !dbg !3788
  %idxprom = zext i32 %5 to i64, !dbg !3787
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !3787
  store i8 0, i8* %arrayidx, align 1, !dbg !3789
  %6 = load i8*, i8** %string, align 8, !dbg !3790
  %s2 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %s_slot, i32 0, i32 0, !dbg !3791
  store i8* %6, i8** %s2, align 8, !dbg !3792
  %7 = load i32, i32* %len.addr, align 4, !dbg !3793
  %len3 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %s_slot, i32 0, i32 1, !dbg !3794
  store i32 %7, i32* %len3, align 8, !dbg !3795
  %slot_num = getelementptr inbounds %struct.string_slot, %struct.string_slot* %s_slot, i32 0, i32 2, !dbg !3796
  store i32 0, i32* %slot_num, align 4, !dbg !3797
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3798
  %string_hash_table = getelementptr inbounds %struct.output_block, %struct.output_block* %8, i32 0, i32 5, !dbg !3799
  %9 = load %struct.htab*, %struct.htab** %string_hash_table, align 8, !dbg !3799
  %10 = bitcast %struct.string_slot* %s_slot to i8*, !dbg !3800
  %call4 = call i8** @htab_find_slot(%struct.htab* %9, i8* %10, i32 1), !dbg !3801
  %11 = bitcast i8** %call4 to %struct.string_slot**, !dbg !3802
  store %struct.string_slot** %11, %struct.string_slot*** %slot, align 8, !dbg !3803
  %12 = load %struct.string_slot**, %struct.string_slot*** %slot, align 8, !dbg !3804
  %13 = load %struct.string_slot*, %struct.string_slot** %12, align 8, !dbg !3806
  %cmp = icmp eq %struct.string_slot* %13, null, !dbg !3807
  br i1 %cmp, label %if.then, label %if.else, !dbg !3808

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %string_stream, metadata !3809, metadata !DIExpression()), !dbg !3811
  %14 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3812
  %string_stream6 = getelementptr inbounds %struct.output_block, %struct.output_block* %14, i32 0, i32 3, !dbg !3813
  %15 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream6, align 8, !dbg !3813
  store %struct.lto_output_stream* %15, %struct.lto_output_stream** %string_stream, align 8, !dbg !3811
  call void @llvm.dbg.declare(metadata i32* %start, metadata !3814, metadata !DIExpression()), !dbg !3815
  %16 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream, align 8, !dbg !3816
  %total_size = getelementptr inbounds %struct.lto_output_stream, %struct.lto_output_stream* %16, i32 0, i32 5, !dbg !3817
  %17 = load i32, i32* %total_size, align 8, !dbg !3817
  store i32 %17, i32* %start, align 4, !dbg !3815
  call void @llvm.dbg.declare(metadata %struct.string_slot** %new_slot, metadata !3818, metadata !DIExpression()), !dbg !3819
  %call7 = call i8* @xmalloc(i64 16), !dbg !3820
  %18 = bitcast i8* %call7 to %struct.string_slot*, !dbg !3821
  store %struct.string_slot* %18, %struct.string_slot** %new_slot, align 8, !dbg !3819
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3822, metadata !DIExpression()), !dbg !3823
  %19 = load i8*, i8** %string, align 8, !dbg !3824
  %20 = load %struct.string_slot*, %struct.string_slot** %new_slot, align 8, !dbg !3825
  %s8 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %20, i32 0, i32 0, !dbg !3826
  store i8* %19, i8** %s8, align 8, !dbg !3827
  %21 = load i32, i32* %len.addr, align 4, !dbg !3828
  %22 = load %struct.string_slot*, %struct.string_slot** %new_slot, align 8, !dbg !3829
  %len9 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %22, i32 0, i32 1, !dbg !3830
  store i32 %21, i32* %len9, align 8, !dbg !3831
  %23 = load i32, i32* %start, align 4, !dbg !3832
  %24 = load %struct.string_slot*, %struct.string_slot** %new_slot, align 8, !dbg !3833
  %slot_num10 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %24, i32 0, i32 2, !dbg !3834
  store i32 %23, i32* %slot_num10, align 4, !dbg !3835
  %25 = load %struct.string_slot*, %struct.string_slot** %new_slot, align 8, !dbg !3836
  %26 = load %struct.string_slot**, %struct.string_slot*** %slot, align 8, !dbg !3837
  store %struct.string_slot* %25, %struct.string_slot** %26, align 8, !dbg !3838
  %27 = load %struct.lto_output_stream*, %struct.lto_output_stream** %index_stream.addr, align 8, !dbg !3839
  %28 = load i32, i32* %start, align 4, !dbg !3840
  %conv11 = zext i32 %28 to i64, !dbg !3840
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %27, i64 %conv11), !dbg !3841
  %29 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream, align 8, !dbg !3842
  %30 = load i32, i32* %len.addr, align 4, !dbg !3843
  %conv12 = zext i32 %30 to i64, !dbg !3843
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %29, i64 %conv12), !dbg !3844
  store i32 0, i32* %i, align 4, !dbg !3845
  br label %for.cond, !dbg !3847

for.cond:                                         ; preds = %for.inc, %if.then
  %31 = load i32, i32* %i, align 4, !dbg !3848
  %32 = load i32, i32* %len.addr, align 4, !dbg !3850
  %cmp13 = icmp ult i32 %31, %32, !dbg !3851
  br i1 %cmp13, label %for.body, label %for.end, !dbg !3852

for.body:                                         ; preds = %for.cond
  %33 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream, align 8, !dbg !3853
  %34 = load i8*, i8** %string, align 8, !dbg !3854
  %35 = load i32, i32* %i, align 4, !dbg !3855
  %idxprom15 = zext i32 %35 to i64, !dbg !3854
  %arrayidx16 = getelementptr inbounds i8, i8* %34, i64 %idxprom15, !dbg !3854
  %36 = load i8, i8* %arrayidx16, align 1, !dbg !3854
  call void @lto_output_1_stream(%struct.lto_output_stream* %33, i8 signext %36), !dbg !3856
  br label %for.inc, !dbg !3856

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4, !dbg !3857
  %inc = add i32 %37, 1, !dbg !3857
  store i32 %inc, i32* %i, align 4, !dbg !3857
  br label %for.cond, !dbg !3858, !llvm.loop !3859

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !3861

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.string_slot** %old_slot, metadata !3862, metadata !DIExpression()), !dbg !3864
  %38 = load %struct.string_slot**, %struct.string_slot*** %slot, align 8, !dbg !3865
  %39 = load %struct.string_slot*, %struct.string_slot** %38, align 8, !dbg !3866
  store %struct.string_slot* %39, %struct.string_slot** %old_slot, align 8, !dbg !3864
  %40 = load %struct.lto_output_stream*, %struct.lto_output_stream** %index_stream.addr, align 8, !dbg !3867
  %41 = load %struct.string_slot*, %struct.string_slot** %old_slot, align 8, !dbg !3868
  %slot_num17 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %41, i32 0, i32 2, !dbg !3869
  %42 = load i32, i32* %slot_num17, align 4, !dbg !3869
  %conv18 = zext i32 %42 to i64, !dbg !3868
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %40, i64 %conv18), !dbg !3870
  %43 = load i8*, i8** %string, align 8, !dbg !3871
  call void @free(i8* %43), !dbg !3872
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void, !dbg !3873
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_tree_header(%struct.output_block* %ob, %union.tree_node* %expr, i32 %ix) #0 !dbg !3874 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ix.addr = alloca i32, align 4
  %tag = alloca i32, align 4
  %code = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !3875, metadata !DIExpression()), !dbg !3876
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !3877, metadata !DIExpression()), !dbg !3878
  store i32 %ix, i32* %ix.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix.addr, metadata !3879, metadata !DIExpression()), !dbg !3880
  call void @llvm.dbg.declare(metadata i32* %tag, metadata !3881, metadata !DIExpression()), !dbg !3882
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3883, metadata !DIExpression()), !dbg !3884
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3885
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3885
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3885
  %bf.load = load i64, i64* %1, align 8, !dbg !3885
  %bf.clear = and i64 %bf.load, 65535, !dbg !3885
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3885
  store i32 %bf.cast, i32* %code, align 4, !dbg !3886
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3887
  %call = call zeroext i8 @lto_is_streamable(%union.tree_node* %2), !dbg !3889
  %tobool = icmp ne i8 %call, 0, !dbg !3889
  br i1 %tobool, label %if.end, label %if.then, !dbg !3890

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %code, align 4, !dbg !3891
  %idxprom = zext i32 %3 to i64, !dbg !3892
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @tree_code_name, i64 0, i64 %idxprom, !dbg !3892
  %4 = load i8*, i8** %arrayidx, align 8, !dbg !3892
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.5, i64 0, i64 0), i8* %4), !dbg !3893
  br label %if.end, !dbg !3893

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %code, align 4, !dbg !3894
  %call1 = call i32 @lto_tree_code_to_tag(i32 %5), !dbg !3895
  store i32 %call1, i32* %tag, align 4, !dbg !3896
  %6 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3897
  %7 = load i32, i32* %tag, align 4, !dbg !3898
  call void @output_record_start(%struct.output_block* %6, i32 %7), !dbg !3899
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3900
  %9 = load i32, i32* %ix.addr, align 4, !dbg !3901
  %conv = sext i32 %9 to i64, !dbg !3901
  call void @output_sleb128(%struct.output_block* %8, i64 %conv), !dbg !3902
  %10 = load i32, i32* %code, align 4, !dbg !3903
  %idxprom2 = zext i32 %10 to i64, !dbg !3903
  %arrayidx3 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom2, !dbg !3903
  %arrayidx4 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx3, i64 0, i64 6, !dbg !3903
  %11 = load i8, i8* %arrayidx4, align 2, !dbg !3903
  %tobool5 = icmp ne i8 %11, 0, !dbg !3903
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !3905

if.then6:                                         ; preds = %if.end
  %12 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3906
  %13 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3907
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %13, i32 0, i32 2, !dbg !3908
  %14 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !3908
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3909
  call void @output_string_cst(%struct.output_block* %12, %struct.lto_output_stream* %14, %union.tree_node* %15), !dbg !3910
  br label %if.end35, !dbg !3910

if.else:                                          ; preds = %if.end
  %16 = load i32, i32* %code, align 4, !dbg !3911
  %idxprom7 = zext i32 %16 to i64, !dbg !3911
  %arrayidx8 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom7, !dbg !3911
  %arrayidx9 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx8, i64 0, i64 8, !dbg !3911
  %17 = load i8, i8* %arrayidx9, align 8, !dbg !3911
  %tobool10 = icmp ne i8 %17, 0, !dbg !3911
  br i1 %tobool10, label %if.then11, label %if.else13, !dbg !3913

if.then11:                                        ; preds = %if.else
  %18 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3914
  %19 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3915
  %main_stream12 = getelementptr inbounds %struct.output_block, %struct.output_block* %19, i32 0, i32 2, !dbg !3916
  %20 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream12, align 8, !dbg !3916
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3917
  call void @output_identifier(%struct.output_block* %18, %struct.lto_output_stream* %20, %union.tree_node* %21), !dbg !3918
  br label %if.end34, !dbg !3918

if.else13:                                        ; preds = %if.else
  %22 = load i32, i32* %code, align 4, !dbg !3919
  %idxprom14 = zext i32 %22 to i64, !dbg !3919
  %arrayidx15 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom14, !dbg !3919
  %arrayidx16 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx15, i64 0, i64 24, !dbg !3919
  %23 = load i8, i8* %arrayidx16, align 8, !dbg !3919
  %tobool17 = icmp ne i8 %23, 0, !dbg !3919
  br i1 %tobool17, label %if.then18, label %if.else20, !dbg !3921

if.then18:                                        ; preds = %if.else13
  %24 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3922
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3923
  %vec = bitcast %union.tree_node* %25 to %struct.tree_vec*, !dbg !3923
  %length = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec, i32 0, i32 1, !dbg !3923
  %26 = load i32, i32* %length, align 8, !dbg !3923
  %conv19 = sext i32 %26 to i64, !dbg !3923
  call void @output_sleb128(%struct.output_block* %24, i64 %conv19), !dbg !3924
  br label %if.end33, !dbg !3924

if.else20:                                        ; preds = %if.else13
  %27 = load i32, i32* %code, align 4, !dbg !3925
  %idxprom21 = zext i32 %27 to i64, !dbg !3925
  %arrayidx22 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom21, !dbg !3925
  %arrayidx23 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx22, i64 0, i64 28, !dbg !3925
  %28 = load i8, i8* %arrayidx23, align 4, !dbg !3925
  %tobool24 = icmp ne i8 %28, 0, !dbg !3925
  br i1 %tobool24, label %if.then25, label %if.end32, !dbg !3927

if.then25:                                        ; preds = %if.else20
  %29 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !3928
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3929
  %binfo = bitcast %union.tree_node* %30 to %struct.tree_binfo*, !dbg !3929
  %base_binfos = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo, i32 0, i32 9, !dbg !3929
  %tobool26 = icmp ne %struct.VEC_tree_none* %base_binfos, null, !dbg !3929
  br i1 %tobool26, label %cond.true, label %cond.false, !dbg !3929

cond.true:                                        ; preds = %if.then25
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3929
  %binfo27 = bitcast %union.tree_node* %31 to %struct.tree_binfo*, !dbg !3929
  %base_binfos28 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo27, i32 0, i32 9, !dbg !3929
  %base29 = getelementptr inbounds %struct.VEC_tree_none, %struct.VEC_tree_none* %base_binfos28, i32 0, i32 0, !dbg !3929
  br label %cond.end, !dbg !3929

cond.false:                                       ; preds = %if.then25
  br label %cond.end, !dbg !3929

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base29, %cond.true ], [ null, %cond.false ], !dbg !3929
  %call30 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3929
  %conv31 = zext i32 %call30 to i64, !dbg !3929
  call void @output_uleb128(%struct.output_block* %29, i64 %conv31), !dbg !3930
  br label %if.end32, !dbg !3930

if.end32:                                         ; preds = %cond.end, %if.else20
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then18
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then11
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then6
  ret void, !dbg !3931
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitpack_d* @pack_value_fields(%union.tree_node* %expr) #0 !dbg !3932 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %bp = alloca %struct.bitpack_d*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !3935, metadata !DIExpression()), !dbg !3936
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3937, metadata !DIExpression()), !dbg !3938
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp, metadata !3939, metadata !DIExpression()), !dbg !3940
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3941
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3941
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3941
  %bf.load = load i64, i64* %1, align 8, !dbg !3941
  %bf.clear = and i64 %bf.load, 65535, !dbg !3941
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3941
  store i32 %bf.cast, i32* %code, align 4, !dbg !3942
  %call = call %struct.bitpack_d* @bitpack_create(), !dbg !3943
  store %struct.bitpack_d* %call, %struct.bitpack_d** %bp, align 8, !dbg !3944
  %2 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3945
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3946
  call void @pack_ts_base_value_fields(%struct.bitpack_d* %2, %union.tree_node* %3), !dbg !3947
  %4 = load i32, i32* %code, align 4, !dbg !3948
  %idxprom = zext i32 %4 to i64, !dbg !3948
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !3948
  %arrayidx1 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 3, !dbg !3948
  %5 = load i8, i8* %arrayidx1, align 1, !dbg !3948
  %tobool = icmp ne i8 %5, 0, !dbg !3948
  br i1 %tobool, label %if.then, label %if.end, !dbg !3950

if.then:                                          ; preds = %entry
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3951
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3952
  call void @pack_ts_real_cst_value_fields(%struct.bitpack_d* %6, %union.tree_node* %7), !dbg !3953
  br label %if.end, !dbg !3953

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %code, align 4, !dbg !3954
  %idxprom2 = zext i32 %8 to i64, !dbg !3954
  %arrayidx3 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom2, !dbg !3954
  %arrayidx4 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx3, i64 0, i64 4, !dbg !3954
  %9 = load i8, i8* %arrayidx4, align 4, !dbg !3954
  %tobool5 = icmp ne i8 %9, 0, !dbg !3954
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !3956

if.then6:                                         ; preds = %if.end
  %10 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3957
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3958
  call void @pack_ts_fixed_cst_value_fields(%struct.bitpack_d* %10, %union.tree_node* %11), !dbg !3959
  br label %if.end7, !dbg !3959

if.end7:                                          ; preds = %if.then6, %if.end
  %12 = load i32, i32* %code, align 4, !dbg !3960
  %idxprom8 = zext i32 %12 to i64, !dbg !3960
  %arrayidx9 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom8, !dbg !3960
  %arrayidx10 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx9, i64 0, i64 10, !dbg !3960
  %13 = load i8, i8* %arrayidx10, align 2, !dbg !3960
  %tobool11 = icmp ne i8 %13, 0, !dbg !3960
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !3962

if.then12:                                        ; preds = %if.end7
  %14 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3963
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3964
  call void @pack_ts_decl_common_value_fields(%struct.bitpack_d* %14, %union.tree_node* %15), !dbg !3965
  br label %if.end13, !dbg !3965

if.end13:                                         ; preds = %if.then12, %if.end7
  %16 = load i32, i32* %code, align 4, !dbg !3966
  %idxprom14 = zext i32 %16 to i64, !dbg !3966
  %arrayidx15 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom14, !dbg !3966
  %arrayidx16 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx15, i64 0, i64 11, !dbg !3966
  %17 = load i8, i8* %arrayidx16, align 1, !dbg !3966
  %tobool17 = icmp ne i8 %17, 0, !dbg !3966
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !3968

if.then18:                                        ; preds = %if.end13
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3969
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3970
  call void @pack_ts_decl_wrtl_value_fields(%struct.bitpack_d* %18, %union.tree_node* %19), !dbg !3971
  br label %if.end19, !dbg !3971

if.end19:                                         ; preds = %if.then18, %if.end13
  %20 = load i32, i32* %code, align 4, !dbg !3972
  %idxprom20 = zext i32 %20 to i64, !dbg !3972
  %arrayidx21 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom20, !dbg !3972
  %arrayidx22 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx21, i64 0, i64 13, !dbg !3972
  %21 = load i8, i8* %arrayidx22, align 1, !dbg !3972
  %tobool23 = icmp ne i8 %21, 0, !dbg !3972
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !3974

if.then24:                                        ; preds = %if.end19
  %22 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3975
  %23 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3976
  call void @pack_ts_decl_with_vis_value_fields(%struct.bitpack_d* %22, %union.tree_node* %23), !dbg !3977
  br label %if.end25, !dbg !3977

if.end25:                                         ; preds = %if.then24, %if.end19
  %24 = load i32, i32* %code, align 4, !dbg !3978
  %idxprom26 = zext i32 %24 to i64, !dbg !3978
  %arrayidx27 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom26, !dbg !3978
  %arrayidx28 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx27, i64 0, i64 21, !dbg !3978
  %25 = load i8, i8* %arrayidx28, align 1, !dbg !3978
  %tobool29 = icmp ne i8 %25, 0, !dbg !3978
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !3980

if.then30:                                        ; preds = %if.end25
  %26 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3981
  %27 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3982
  call void @pack_ts_function_decl_value_fields(%struct.bitpack_d* %26, %union.tree_node* %27), !dbg !3983
  br label %if.end31, !dbg !3983

if.end31:                                         ; preds = %if.then30, %if.end25
  %28 = load i32, i32* %code, align 4, !dbg !3984
  %idxprom32 = zext i32 %28 to i64, !dbg !3984
  %arrayidx33 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom32, !dbg !3984
  %arrayidx34 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx33, i64 0, i64 22, !dbg !3984
  %29 = load i8, i8* %arrayidx34, align 2, !dbg !3984
  %tobool35 = icmp ne i8 %29, 0, !dbg !3984
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !3986

if.then36:                                        ; preds = %if.end31
  %30 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3987
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3988
  call void @pack_ts_type_value_fields(%struct.bitpack_d* %30, %union.tree_node* %31), !dbg !3989
  br label %if.end37, !dbg !3989

if.end37:                                         ; preds = %if.then36, %if.end31
  %32 = load i32, i32* %code, align 4, !dbg !3990
  %idxprom38 = zext i32 %32 to i64, !dbg !3990
  %arrayidx39 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom38, !dbg !3990
  %arrayidx40 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx39, i64 0, i64 27, !dbg !3990
  %33 = load i8, i8* %arrayidx40, align 1, !dbg !3990
  %tobool41 = icmp ne i8 %33, 0, !dbg !3990
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !3992

if.then42:                                        ; preds = %if.end37
  %34 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3993
  %35 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3994
  call void @pack_ts_block_value_fields(%struct.bitpack_d* %34, %union.tree_node* %35), !dbg !3995
  br label %if.end43, !dbg !3995

if.end43:                                         ; preds = %if.then42, %if.end37
  %36 = load i32, i32* %code, align 4, !dbg !3996
  %idxprom44 = zext i32 %36 to i64, !dbg !3996
  %arrayidx45 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom44, !dbg !3996
  %arrayidx46 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i64 0, i64 26, !dbg !3996
  %37 = load i8, i8* %arrayidx46, align 2, !dbg !3996
  %tobool47 = icmp ne i8 %37, 0, !dbg !3996
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !3998

if.then48:                                        ; preds = %if.end43
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 586, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3999
  br label %if.end49, !dbg !4001

if.end49:                                         ; preds = %if.then48, %if.end43
  %38 = load i32, i32* %code, align 4, !dbg !4002
  %idxprom50 = zext i32 %38 to i64, !dbg !4002
  %arrayidx51 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom50, !dbg !4002
  %arrayidx52 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx51, i64 0, i64 29, !dbg !4002
  %39 = load i8, i8* %arrayidx52, align 1, !dbg !4002
  %tobool53 = icmp ne i8 %39, 0, !dbg !4002
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !4004

if.then54:                                        ; preds = %if.end49
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 592, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4005
  br label %if.end55, !dbg !4007

if.end55:                                         ; preds = %if.then54, %if.end49
  %40 = load i32, i32* %code, align 4, !dbg !4008
  %idxprom56 = zext i32 %40 to i64, !dbg !4008
  %arrayidx57 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom56, !dbg !4008
  %arrayidx58 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx57, i64 0, i64 31, !dbg !4008
  %41 = load i8, i8* %arrayidx58, align 1, !dbg !4008
  %tobool59 = icmp ne i8 %41, 0, !dbg !4008
  br i1 %tobool59, label %if.then60, label %if.end61, !dbg !4010

if.then60:                                        ; preds = %if.end55
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 598, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4011
  br label %if.end61, !dbg !4013

if.end61:                                         ; preds = %if.then60, %if.end55
  %42 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4014
  ret %struct.bitpack_d* %42, !dbg !4015
}

declare dso_local void @bitpack_delete(%struct.bitpack_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !4016 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  %code = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4017, metadata !DIExpression()), !dbg !4018
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4019, metadata !DIExpression()), !dbg !4020
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !4021, metadata !DIExpression()), !dbg !4022
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4023, metadata !DIExpression()), !dbg !4024
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4025
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4025
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4025
  %bf.load = load i64, i64* %1, align 8, !dbg !4025
  %bf.clear = and i64 %bf.load, 65535, !dbg !4025
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4025
  store i32 %bf.cast, i32* %code, align 4, !dbg !4026
  %2 = load i32, i32* %code, align 4, !dbg !4027
  %idxprom = zext i32 %2 to i64, !dbg !4027
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !4027
  %arrayidx1 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 1, !dbg !4027
  %3 = load i8, i8* %arrayidx1, align 1, !dbg !4027
  %tobool = icmp ne i8 %3, 0, !dbg !4027
  br i1 %tobool, label %if.then, label %if.end, !dbg !4029

if.then:                                          ; preds = %entry
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4030
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4031
  %6 = load i8, i8* %ref_p.addr, align 1, !dbg !4032
  call void @lto_output_ts_common_tree_pointers(%struct.output_block* %4, %union.tree_node* %5, i8 zeroext %6), !dbg !4033
  br label %if.end, !dbg !4033

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %code, align 4, !dbg !4034
  %idxprom2 = zext i32 %7 to i64, !dbg !4034
  %arrayidx3 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom2, !dbg !4034
  %arrayidx4 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx3, i64 0, i64 5, !dbg !4034
  %8 = load i8, i8* %arrayidx4, align 1, !dbg !4034
  %tobool5 = icmp ne i8 %8, 0, !dbg !4034
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !4036

if.then6:                                         ; preds = %if.end
  %9 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4037
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4038
  %11 = load i8, i8* %ref_p.addr, align 1, !dbg !4039
  call void @lto_output_ts_vector_tree_pointers(%struct.output_block* %9, %union.tree_node* %10, i8 zeroext %11), !dbg !4040
  br label %if.end7, !dbg !4040

if.end7:                                          ; preds = %if.then6, %if.end
  %12 = load i32, i32* %code, align 4, !dbg !4041
  %idxprom8 = zext i32 %12 to i64, !dbg !4041
  %arrayidx9 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom8, !dbg !4041
  %arrayidx10 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx9, i64 0, i64 7, !dbg !4041
  %13 = load i8, i8* %arrayidx10, align 1, !dbg !4041
  %tobool11 = icmp ne i8 %13, 0, !dbg !4041
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !4043

if.then12:                                        ; preds = %if.end7
  %14 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4044
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4045
  %16 = load i8, i8* %ref_p.addr, align 1, !dbg !4046
  call void @lto_output_ts_complex_tree_pointers(%struct.output_block* %14, %union.tree_node* %15, i8 zeroext %16), !dbg !4047
  br label %if.end13, !dbg !4047

if.end13:                                         ; preds = %if.then12, %if.end7
  %17 = load i32, i32* %code, align 4, !dbg !4048
  %idxprom14 = zext i32 %17 to i64, !dbg !4048
  %arrayidx15 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom14, !dbg !4048
  %arrayidx16 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx15, i64 0, i64 9, !dbg !4048
  %18 = load i8, i8* %arrayidx16, align 1, !dbg !4048
  %tobool17 = icmp ne i8 %18, 0, !dbg !4048
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !4050

if.then18:                                        ; preds = %if.end13
  %19 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4051
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4052
  %21 = load i8, i8* %ref_p.addr, align 1, !dbg !4053
  call void @lto_output_ts_decl_minimal_tree_pointers(%struct.output_block* %19, %union.tree_node* %20, i8 zeroext %21), !dbg !4054
  br label %if.end19, !dbg !4054

if.end19:                                         ; preds = %if.then18, %if.end13
  %22 = load i32, i32* %code, align 4, !dbg !4055
  %idxprom20 = zext i32 %22 to i64, !dbg !4055
  %arrayidx21 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom20, !dbg !4055
  %arrayidx22 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx21, i64 0, i64 10, !dbg !4055
  %23 = load i8, i8* %arrayidx22, align 2, !dbg !4055
  %tobool23 = icmp ne i8 %23, 0, !dbg !4055
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !4057

if.then24:                                        ; preds = %if.end19
  %24 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4058
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4059
  %26 = load i8, i8* %ref_p.addr, align 1, !dbg !4060
  call void @lto_output_ts_decl_common_tree_pointers(%struct.output_block* %24, %union.tree_node* %25, i8 zeroext %26), !dbg !4061
  br label %if.end25, !dbg !4061

if.end25:                                         ; preds = %if.then24, %if.end19
  %27 = load i32, i32* %code, align 4, !dbg !4062
  %idxprom26 = zext i32 %27 to i64, !dbg !4062
  %arrayidx27 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom26, !dbg !4062
  %arrayidx28 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx27, i64 0, i64 12, !dbg !4062
  %28 = load i8, i8* %arrayidx28, align 4, !dbg !4062
  %tobool29 = icmp ne i8 %28, 0, !dbg !4062
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !4064

if.then30:                                        ; preds = %if.end25
  %29 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4065
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4066
  %31 = load i8, i8* %ref_p.addr, align 1, !dbg !4067
  call void @lto_output_ts_decl_non_common_tree_pointers(%struct.output_block* %29, %union.tree_node* %30, i8 zeroext %31), !dbg !4068
  br label %if.end31, !dbg !4068

if.end31:                                         ; preds = %if.then30, %if.end25
  %32 = load i32, i32* %code, align 4, !dbg !4069
  %idxprom32 = zext i32 %32 to i64, !dbg !4069
  %arrayidx33 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom32, !dbg !4069
  %arrayidx34 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx33, i64 0, i64 13, !dbg !4069
  %33 = load i8, i8* %arrayidx34, align 1, !dbg !4069
  %tobool35 = icmp ne i8 %33, 0, !dbg !4069
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !4071

if.then36:                                        ; preds = %if.end31
  %34 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4072
  %35 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4073
  %36 = load i8, i8* %ref_p.addr, align 1, !dbg !4074
  call void @lto_output_ts_decl_with_vis_tree_pointers(%struct.output_block* %34, %union.tree_node* %35, i8 zeroext %36), !dbg !4075
  br label %if.end37, !dbg !4075

if.end37:                                         ; preds = %if.then36, %if.end31
  %37 = load i32, i32* %code, align 4, !dbg !4076
  %idxprom38 = zext i32 %37 to i64, !dbg !4076
  %arrayidx39 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom38, !dbg !4076
  %arrayidx40 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx39, i64 0, i64 14, !dbg !4076
  %38 = load i8, i8* %arrayidx40, align 2, !dbg !4076
  %tobool41 = icmp ne i8 %38, 0, !dbg !4076
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !4078

if.then42:                                        ; preds = %if.end37
  %39 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4079
  %40 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4080
  %41 = load i8, i8* %ref_p.addr, align 1, !dbg !4081
  call void @lto_output_ts_field_decl_tree_pointers(%struct.output_block* %39, %union.tree_node* %40, i8 zeroext %41), !dbg !4082
  br label %if.end43, !dbg !4082

if.end43:                                         ; preds = %if.then42, %if.end37
  %42 = load i32, i32* %code, align 4, !dbg !4083
  %idxprom44 = zext i32 %42 to i64, !dbg !4083
  %arrayidx45 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom44, !dbg !4083
  %arrayidx46 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i64 0, i64 21, !dbg !4083
  %43 = load i8, i8* %arrayidx46, align 1, !dbg !4083
  %tobool47 = icmp ne i8 %43, 0, !dbg !4083
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !4085

if.then48:                                        ; preds = %if.end43
  %44 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4086
  %45 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4087
  %46 = load i8, i8* %ref_p.addr, align 1, !dbg !4088
  call void @lto_output_ts_function_decl_tree_pointers(%struct.output_block* %44, %union.tree_node* %45, i8 zeroext %46), !dbg !4089
  br label %if.end49, !dbg !4089

if.end49:                                         ; preds = %if.then48, %if.end43
  %47 = load i32, i32* %code, align 4, !dbg !4090
  %idxprom50 = zext i32 %47 to i64, !dbg !4090
  %arrayidx51 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom50, !dbg !4090
  %arrayidx52 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx51, i64 0, i64 22, !dbg !4090
  %48 = load i8, i8* %arrayidx52, align 2, !dbg !4090
  %tobool53 = icmp ne i8 %48, 0, !dbg !4090
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !4092

if.then54:                                        ; preds = %if.end49
  %49 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4093
  %50 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4094
  %51 = load i8, i8* %ref_p.addr, align 1, !dbg !4095
  call void @lto_output_ts_type_tree_pointers(%struct.output_block* %49, %union.tree_node* %50, i8 zeroext %51), !dbg !4096
  br label %if.end55, !dbg !4096

if.end55:                                         ; preds = %if.then54, %if.end49
  %52 = load i32, i32* %code, align 4, !dbg !4097
  %idxprom56 = zext i32 %52 to i64, !dbg !4097
  %arrayidx57 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom56, !dbg !4097
  %arrayidx58 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx57, i64 0, i64 23, !dbg !4097
  %53 = load i8, i8* %arrayidx58, align 1, !dbg !4097
  %tobool59 = icmp ne i8 %53, 0, !dbg !4097
  br i1 %tobool59, label %if.then60, label %if.end61, !dbg !4099

if.then60:                                        ; preds = %if.end55
  %54 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4100
  %55 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4101
  %56 = load i8, i8* %ref_p.addr, align 1, !dbg !4102
  call void @lto_output_ts_list_tree_pointers(%struct.output_block* %54, %union.tree_node* %55, i8 zeroext %56), !dbg !4103
  br label %if.end61, !dbg !4103

if.end61:                                         ; preds = %if.then60, %if.end55
  %57 = load i32, i32* %code, align 4, !dbg !4104
  %idxprom62 = zext i32 %57 to i64, !dbg !4104
  %arrayidx63 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom62, !dbg !4104
  %arrayidx64 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx63, i64 0, i64 24, !dbg !4104
  %58 = load i8, i8* %arrayidx64, align 8, !dbg !4104
  %tobool65 = icmp ne i8 %58, 0, !dbg !4104
  br i1 %tobool65, label %if.then66, label %if.end67, !dbg !4106

if.then66:                                        ; preds = %if.end61
  %59 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4107
  %60 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4108
  %61 = load i8, i8* %ref_p.addr, align 1, !dbg !4109
  call void @lto_output_ts_vec_tree_pointers(%struct.output_block* %59, %union.tree_node* %60, i8 zeroext %61), !dbg !4110
  br label %if.end67, !dbg !4110

if.end67:                                         ; preds = %if.then66, %if.end61
  %62 = load i32, i32* %code, align 4, !dbg !4111
  %idxprom68 = zext i32 %62 to i64, !dbg !4111
  %arrayidx69 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom68, !dbg !4111
  %arrayidx70 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx69, i64 0, i64 25, !dbg !4111
  %63 = load i8, i8* %arrayidx70, align 1, !dbg !4111
  %tobool71 = icmp ne i8 %63, 0, !dbg !4111
  br i1 %tobool71, label %if.then72, label %if.end73, !dbg !4113

if.then72:                                        ; preds = %if.end67
  %64 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4114
  %65 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4115
  %66 = load i8, i8* %ref_p.addr, align 1, !dbg !4116
  call void @lto_output_ts_exp_tree_pointers(%struct.output_block* %64, %union.tree_node* %65, i8 zeroext %66), !dbg !4117
  br label %if.end73, !dbg !4117

if.end73:                                         ; preds = %if.then72, %if.end67
  %67 = load i32, i32* %code, align 4, !dbg !4118
  %idxprom74 = zext i32 %67 to i64, !dbg !4118
  %arrayidx75 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom74, !dbg !4118
  %arrayidx76 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx75, i64 0, i64 26, !dbg !4118
  %68 = load i8, i8* %arrayidx76, align 2, !dbg !4118
  %tobool77 = icmp ne i8 %68, 0, !dbg !4118
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !4120

if.then78:                                        ; preds = %if.end73
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 1155, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4121
  br label %if.end79, !dbg !4123

if.end79:                                         ; preds = %if.then78, %if.end73
  %69 = load i32, i32* %code, align 4, !dbg !4124
  %idxprom80 = zext i32 %69 to i64, !dbg !4124
  %arrayidx81 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom80, !dbg !4124
  %arrayidx82 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx81, i64 0, i64 27, !dbg !4124
  %70 = load i8, i8* %arrayidx82, align 1, !dbg !4124
  %tobool83 = icmp ne i8 %70, 0, !dbg !4124
  br i1 %tobool83, label %if.then84, label %if.end85, !dbg !4126

if.then84:                                        ; preds = %if.end79
  %71 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4127
  %72 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4128
  %73 = load i8, i8* %ref_p.addr, align 1, !dbg !4129
  call void @lto_output_ts_block_tree_pointers(%struct.output_block* %71, %union.tree_node* %72, i8 zeroext %73), !dbg !4130
  br label %if.end85, !dbg !4130

if.end85:                                         ; preds = %if.then84, %if.end79
  %74 = load i32, i32* %code, align 4, !dbg !4131
  %idxprom86 = zext i32 %74 to i64, !dbg !4131
  %arrayidx87 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom86, !dbg !4131
  %arrayidx88 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx87, i64 0, i64 28, !dbg !4131
  %75 = load i8, i8* %arrayidx88, align 4, !dbg !4131
  %tobool89 = icmp ne i8 %75, 0, !dbg !4131
  br i1 %tobool89, label %if.then90, label %if.end91, !dbg !4133

if.then90:                                        ; preds = %if.end85
  %76 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4134
  %77 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4135
  %78 = load i8, i8* %ref_p.addr, align 1, !dbg !4136
  call void @lto_output_ts_binfo_tree_pointers(%struct.output_block* %76, %union.tree_node* %77, i8 zeroext %78), !dbg !4137
  br label %if.end91, !dbg !4137

if.end91:                                         ; preds = %if.then90, %if.end85
  %79 = load i32, i32* %code, align 4, !dbg !4138
  %idxprom92 = zext i32 %79 to i64, !dbg !4138
  %arrayidx93 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom92, !dbg !4138
  %arrayidx94 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx93, i64 0, i64 30, !dbg !4138
  %80 = load i8, i8* %arrayidx94, align 2, !dbg !4138
  %tobool95 = icmp ne i8 %80, 0, !dbg !4138
  br i1 %tobool95, label %if.then96, label %if.end97, !dbg !4140

if.then96:                                        ; preds = %if.end91
  %81 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4141
  %82 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4142
  %83 = load i8, i8* %ref_p.addr, align 1, !dbg !4143
  call void @lto_output_ts_constructor_tree_pointers(%struct.output_block* %81, %union.tree_node* %82, i8 zeroext %83), !dbg !4144
  br label %if.end97, !dbg !4144

if.end97:                                         ; preds = %if.then96, %if.end91
  %84 = load i32, i32* %code, align 4, !dbg !4145
  %idxprom98 = zext i32 %84 to i64, !dbg !4145
  %arrayidx99 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom98, !dbg !4145
  %arrayidx100 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx99, i64 0, i64 29, !dbg !4145
  %85 = load i8, i8* %arrayidx100, align 1, !dbg !4145
  %tobool101 = icmp ne i8 %85, 0, !dbg !4145
  br i1 %tobool101, label %if.then102, label %if.end103, !dbg !4147

if.then102:                                       ; preds = %if.end97
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 1170, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4148
  br label %if.end103, !dbg !4150

if.end103:                                        ; preds = %if.then102, %if.end97
  %86 = load i32, i32* %code, align 4, !dbg !4151
  %idxprom104 = zext i32 %86 to i64, !dbg !4151
  %arrayidx105 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom104, !dbg !4151
  %arrayidx106 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx105, i64 0, i64 31, !dbg !4151
  %87 = load i8, i8* %arrayidx106, align 1, !dbg !4151
  %tobool107 = icmp ne i8 %87, 0, !dbg !4151
  br i1 %tobool107, label %if.then108, label %if.end109, !dbg !4153

if.then108:                                       ; preds = %if.end103
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 1176, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4154
  br label %if.end109, !dbg !4156

if.end109:                                        ; preds = %if.then108, %if.end103
  %88 = load i32, i32* %code, align 4, !dbg !4157
  %idxprom110 = zext i32 %88 to i64, !dbg !4157
  %arrayidx111 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom110, !dbg !4157
  %arrayidx112 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx111, i64 0, i64 32, !dbg !4157
  %89 = load i8, i8* %arrayidx112, align 16, !dbg !4157
  %tobool113 = icmp ne i8 %89, 0, !dbg !4157
  br i1 %tobool113, label %if.then114, label %if.end115, !dbg !4159

if.then114:                                       ; preds = %if.end109
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.6, i64 0, i64 0)), !dbg !4160
  br label %if.end115, !dbg !4160

if.end115:                                        ; preds = %if.then114, %if.end109
  %90 = load i32, i32* %code, align 4, !dbg !4161
  %idxprom116 = zext i32 %90 to i64, !dbg !4161
  %arrayidx117 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom116, !dbg !4161
  %arrayidx118 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx117, i64 0, i64 33, !dbg !4161
  %91 = load i8, i8* %arrayidx118, align 1, !dbg !4161
  %tobool119 = icmp ne i8 %91, 0, !dbg !4161
  br i1 %tobool119, label %if.then120, label %if.end121, !dbg !4163

if.then120:                                       ; preds = %if.end115
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.7, i64 0, i64 0)), !dbg !4164
  br label %if.end121, !dbg !4164

if.end121:                                        ; preds = %if.then120, %if.end115
  ret void, !dbg !4165
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lto_is_streamable(%union.tree_node* %expr) #0 !dbg !4166 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4167, metadata !DIExpression()), !dbg !4168
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4169, metadata !DIExpression()), !dbg !4170
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4171
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4171
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4171
  %bf.load = load i64, i64* %1, align 8, !dbg !4171
  %bf.clear = and i64 %bf.load, 65535, !dbg !4171
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4171
  store i32 %bf.cast, i32* %code, align 4, !dbg !4170
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4172
  %call = call zeroext i8 @is_lang_specific(%union.tree_node* %2), !dbg !4173
  %tobool = icmp ne i8 %call, 0, !dbg !4173
  br i1 %tobool, label %land.end, label %land.lhs.true, !dbg !4174

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %code, align 4, !dbg !4175
  %cmp = icmp ne i32 %3, 141, !dbg !4176
  br i1 %cmp, label %land.lhs.true1, label %land.end, !dbg !4177

land.lhs.true1:                                   ; preds = %land.lhs.true
  %4 = load i32, i32* %code, align 4, !dbg !4178
  %cmp2 = icmp ne i32 %4, 59, !dbg !4179
  br i1 %cmp2, label %land.lhs.true3, label %land.end, !dbg !4180

land.lhs.true3:                                   ; preds = %land.lhs.true1
  %5 = load i32, i32* %code, align 4, !dbg !4181
  %cmp4 = icmp ne i32 %5, 22, !dbg !4182
  br i1 %cmp4, label %land.lhs.true5, label %land.end, !dbg !4183

land.lhs.true5:                                   ; preds = %land.lhs.true3
  %6 = load i32, i32* %code, align 4, !dbg !4184
  %cmp6 = icmp ne i32 %6, 53, !dbg !4185
  br i1 %cmp6, label %land.lhs.true7, label %land.end, !dbg !4186

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %7 = load i32, i32* %code, align 4, !dbg !4187
  %cmp8 = icmp ne i32 %7, 54, !dbg !4188
  br i1 %cmp8, label %land.lhs.true9, label %land.end, !dbg !4189

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %8 = load i32, i32* %code, align 4, !dbg !4190
  %cmp10 = icmp ne i32 %8, 55, !dbg !4191
  br i1 %cmp10, label %land.lhs.true11, label %land.end, !dbg !4192

land.lhs.true11:                                  ; preds = %land.lhs.true9
  %9 = load i32, i32* %code, align 4, !dbg !4193
  %cmp12 = icmp ne i32 %9, 58, !dbg !4194
  br i1 %cmp12, label %land.lhs.true13, label %land.end, !dbg !4195

land.lhs.true13:                                  ; preds = %land.lhs.true11
  %10 = load i32, i32* %code, align 4, !dbg !4196
  %cmp14 = icmp ne i32 %10, 60, !dbg !4197
  br i1 %cmp14, label %land.lhs.true15, label %land.end, !dbg !4198

land.lhs.true15:                                  ; preds = %land.lhs.true13
  %11 = load i32, i32* %code, align 4, !dbg !4199
  %cmp16 = icmp ne i32 %11, 147, !dbg !4200
  br i1 %cmp16, label %land.rhs, label %land.end, !dbg !4201

land.rhs:                                         ; preds = %land.lhs.true15
  %12 = load i32, i32* %code, align 4, !dbg !4202
  %cmp17 = icmp eq i32 %12, 139, !dbg !4203
  br i1 %cmp17, label %lor.end, label %lor.lhs.false, !dbg !4204

lor.lhs.false:                                    ; preds = %land.rhs
  %13 = load i32, i32* %code, align 4, !dbg !4205
  %cmp18 = icmp eq i32 %13, 132, !dbg !4206
  br i1 %cmp18, label %lor.end, label %lor.rhs, !dbg !4207

lor.rhs:                                          ; preds = %lor.lhs.false
  %14 = load i32, i32* %code, align 4, !dbg !4208
  %idxprom = sext i32 %14 to i64, !dbg !4208
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4208
  %15 = load i32, i32* %arrayidx, align 4, !dbg !4208
  %cmp19 = icmp ne i32 %15, 8, !dbg !4209
  br label %lor.end, !dbg !4207

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %land.rhs
  %16 = phi i1 [ true, %lor.lhs.false ], [ true, %land.rhs ], [ %cmp19, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true15, %land.lhs.true13, %land.lhs.true11, %land.lhs.true9, %land.lhs.true7, %land.lhs.true5, %land.lhs.true3, %land.lhs.true1, %land.lhs.true, %entry
  %17 = phi i1 [ false, %land.lhs.true15 ], [ false, %land.lhs.true13 ], [ false, %land.lhs.true11 ], [ false, %land.lhs.true9 ], [ false, %land.lhs.true7 ], [ false, %land.lhs.true5 ], [ false, %land.lhs.true3 ], [ false, %land.lhs.true1 ], [ false, %land.lhs.true ], [ false, %entry ], [ %16, %lor.end ], !dbg !4210
  %land.ext = zext i1 %17 to i32, !dbg !4201
  %conv = trunc i32 %land.ext to i8, !dbg !4211
  ret i8 %conv, !dbg !4212
}

declare dso_local void @internal_error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @output_string_cst(%struct.output_block* %ob, %struct.lto_output_stream* %index_stream, %union.tree_node* %string) #0 !dbg !4213 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %index_stream.addr = alloca %struct.lto_output_stream*, align 8
  %string.addr = alloca %union.tree_node*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4216, metadata !DIExpression()), !dbg !4217
  store %struct.lto_output_stream* %index_stream, %struct.lto_output_stream** %index_stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %index_stream.addr, metadata !4218, metadata !DIExpression()), !dbg !4219
  store %union.tree_node* %string, %union.tree_node** %string.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %string.addr, metadata !4220, metadata !DIExpression()), !dbg !4221
  %0 = load %union.tree_node*, %union.tree_node** %string.addr, align 8, !dbg !4222
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4222
  br i1 %tobool, label %if.then, label %if.else, !dbg !4224

if.then:                                          ; preds = %entry
  %1 = load %struct.lto_output_stream*, %struct.lto_output_stream** %index_stream.addr, align 8, !dbg !4225
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %1, i64 0), !dbg !4227
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4228
  %3 = load %struct.lto_output_stream*, %struct.lto_output_stream** %index_stream.addr, align 8, !dbg !4229
  %4 = load %union.tree_node*, %union.tree_node** %string.addr, align 8, !dbg !4230
  %string1 = bitcast %union.tree_node* %4 to %struct.tree_string*, !dbg !4230
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string1, i32 0, i32 2, !dbg !4230
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !4230
  %5 = load %union.tree_node*, %union.tree_node** %string.addr, align 8, !dbg !4231
  %string2 = bitcast %union.tree_node* %5 to %struct.tree_string*, !dbg !4231
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string2, i32 0, i32 1, !dbg !4231
  %6 = load i32, i32* %length, align 8, !dbg !4231
  call void @output_string_with_length(%struct.output_block* %2, %struct.lto_output_stream* %3, i8* %arraydecay, i32 %6), !dbg !4232
  br label %if.end, !dbg !4233

if.else:                                          ; preds = %entry
  %7 = load %struct.lto_output_stream*, %struct.lto_output_stream** %index_stream.addr, align 8, !dbg !4234
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %7, i64 1), !dbg !4235
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !4236
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_identifier(%struct.output_block* %ob, %struct.lto_output_stream* %index_stream, %union.tree_node* %id) #0 !dbg !4237 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %index_stream.addr = alloca %struct.lto_output_stream*, align 8
  %id.addr = alloca %union.tree_node*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4238, metadata !DIExpression()), !dbg !4239
  store %struct.lto_output_stream* %index_stream, %struct.lto_output_stream** %index_stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %index_stream.addr, metadata !4240, metadata !DIExpression()), !dbg !4241
  store %union.tree_node* %id, %union.tree_node** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %id.addr, metadata !4242, metadata !DIExpression()), !dbg !4243
  %0 = load %union.tree_node*, %union.tree_node** %id.addr, align 8, !dbg !4244
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4244
  br i1 %tobool, label %if.then, label %if.else, !dbg !4246

if.then:                                          ; preds = %entry
  %1 = load %struct.lto_output_stream*, %struct.lto_output_stream** %index_stream.addr, align 8, !dbg !4247
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %1, i64 0), !dbg !4249
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4250
  %3 = load %struct.lto_output_stream*, %struct.lto_output_stream** %index_stream.addr, align 8, !dbg !4251
  %4 = load %union.tree_node*, %union.tree_node** %id.addr, align 8, !dbg !4252
  %identifier = bitcast %union.tree_node* %4 to %struct.tree_identifier*, !dbg !4252
  %id1 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !4252
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id1, i32 0, i32 0, !dbg !4252
  %5 = load i8*, i8** %str, align 8, !dbg !4252
  %6 = load %union.tree_node*, %union.tree_node** %id.addr, align 8, !dbg !4253
  %identifier2 = bitcast %union.tree_node* %6 to %struct.tree_identifier*, !dbg !4253
  %id3 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier2, i32 0, i32 1, !dbg !4253
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id3, i32 0, i32 1, !dbg !4253
  %7 = load i32, i32* %len, align 8, !dbg !4253
  call void @output_string_with_length(%struct.output_block* %2, %struct.lto_output_stream* %3, i8* %5, i32 %7), !dbg !4254
  br label %if.end, !dbg !4255

if.else:                                          ; preds = %entry
  %8 = load %struct.lto_output_stream*, %struct.lto_output_stream** %index_stream.addr, align 8, !dbg !4256
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %8, i64 1), !dbg !4257
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !4258
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !4259 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4264, metadata !DIExpression()), !dbg !4265
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4265
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4265
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4265

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4265
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !4265
  %2 = load i32, i32* %num, align 8, !dbg !4265
  br label %cond.end, !dbg !4265

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4265

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4265
  ret i32 %cond, !dbg !4265
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_lang_specific(%union.tree_node* %t) #0 !dbg !4266 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4267, metadata !DIExpression()), !dbg !4268
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4269
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4269
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4269
  %bf.load = load i64, i64* %1, align 8, !dbg !4269
  %bf.clear = and i64 %bf.load, 65535, !dbg !4269
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4269
  %cmp = icmp eq i32 %bf.cast, 22, !dbg !4270
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !4271

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4272
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4272
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4272
  %bf.load2 = load i64, i64* %3, align 8, !dbg !4272
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4272
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4272
  %cmp5 = icmp uge i32 %bf.cast4, 188, !dbg !4273
  br label %lor.end, !dbg !4271

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !4271
  %conv = trunc i32 %lor.ext to i8, !dbg !4269
  ret i8 %conv, !dbg !4274
}

declare dso_local %struct.bitpack_d* @bitpack_create() #2

; Function Attrs: noinline nounwind uwtable
define internal void @pack_ts_base_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !4275 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !4278, metadata !DIExpression()), !dbg !4279
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4280, metadata !DIExpression()), !dbg !4281
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4282
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4283
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4283
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4283
  %bf.load = load i64, i64* %2, align 8, !dbg !4283
  %bf.clear = and i64 %bf.load, 65535, !dbg !4283
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4283
  %conv = zext i32 %bf.cast to i64, !dbg !4283
  call void @bp_pack_value(%struct.bitpack_d* %0, i64 %conv, i32 16), !dbg !4284
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4285
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4285
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4285
  %bf.load2 = load i64, i64* %4, align 8, !dbg !4285
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4285
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4285
  %idxprom = sext i32 %bf.cast4 to i64, !dbg !4285
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4285
  %5 = load i32, i32* %arrayidx, align 4, !dbg !4285
  %cmp = icmp eq i32 %5, 2, !dbg !4285
  br i1 %cmp, label %if.end, label %if.then, !dbg !4287

if.then:                                          ; preds = %entry
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4288
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4290
  %base6 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !4290
  %8 = bitcast %struct.tree_base* %base6 to i64*, !dbg !4290
  %bf.load7 = load i64, i64* %8, align 8, !dbg !4290
  %bf.lshr = lshr i64 %bf.load7, 16, !dbg !4290
  %bf.clear8 = and i64 %bf.lshr, 1, !dbg !4290
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !4290
  %conv10 = zext i32 %bf.cast9 to i64, !dbg !4290
  call void @bp_pack_value(%struct.bitpack_d* %6, i64 %conv10, i32 1), !dbg !4291
  %9 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4292
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4293
  %base11 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4293
  %11 = bitcast %struct.tree_base* %base11 to i64*, !dbg !4293
  %bf.load12 = load i64, i64* %11, align 8, !dbg !4293
  %bf.lshr13 = lshr i64 %bf.load12, 17, !dbg !4293
  %bf.clear14 = and i64 %bf.lshr13, 1, !dbg !4293
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !4293
  %conv16 = zext i32 %bf.cast15 to i64, !dbg !4293
  call void @bp_pack_value(%struct.bitpack_d* %9, i64 %conv16, i32 1), !dbg !4294
  %12 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4295
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4296
  %base17 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4296
  %14 = bitcast %struct.tree_base* %base17 to i64*, !dbg !4296
  %bf.load18 = load i64, i64* %14, align 8, !dbg !4296
  %bf.lshr19 = lshr i64 %bf.load18, 20, !dbg !4296
  %bf.clear20 = and i64 %bf.lshr19, 1, !dbg !4296
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !4296
  %conv22 = zext i32 %bf.cast21 to i64, !dbg !4296
  call void @bp_pack_value(%struct.bitpack_d* %12, i64 %conv22, i32 1), !dbg !4297
  %15 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4298
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4299
  %base23 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !4299
  %17 = bitcast %struct.tree_base* %base23 to i64*, !dbg !4299
  %bf.load24 = load i64, i64* %17, align 8, !dbg !4299
  %bf.lshr25 = lshr i64 %bf.load24, 27, !dbg !4299
  %bf.clear26 = and i64 %bf.lshr25, 1, !dbg !4299
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !4299
  %conv28 = zext i32 %bf.cast27 to i64, !dbg !4299
  call void @bp_pack_value(%struct.bitpack_d* %15, i64 %conv28, i32 1), !dbg !4300
  br label %if.end, !dbg !4301

if.end:                                           ; preds = %if.then, %entry
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4302
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4303
  %base29 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !4303
  %20 = bitcast %struct.tree_base* %base29 to i64*, !dbg !4303
  %bf.load30 = load i64, i64* %20, align 8, !dbg !4303
  %bf.lshr31 = lshr i64 %bf.load30, 18, !dbg !4303
  %bf.clear32 = and i64 %bf.lshr31, 1, !dbg !4303
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !4303
  %conv34 = zext i32 %bf.cast33 to i64, !dbg !4303
  call void @bp_pack_value(%struct.bitpack_d* %18, i64 %conv34, i32 1), !dbg !4304
  %21 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4305
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4306
  %base35 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4306
  %23 = bitcast %struct.tree_base* %base35 to i64*, !dbg !4306
  %bf.load36 = load i64, i64* %23, align 8, !dbg !4306
  %bf.lshr37 = lshr i64 %bf.load36, 19, !dbg !4306
  %bf.clear38 = and i64 %bf.lshr37, 1, !dbg !4306
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !4306
  %conv40 = zext i32 %bf.cast39 to i64, !dbg !4306
  call void @bp_pack_value(%struct.bitpack_d* %21, i64 %conv40, i32 1), !dbg !4307
  %24 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4308
  %base41 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4308
  %25 = bitcast %struct.tree_base* %base41 to i64*, !dbg !4308
  %bf.load42 = load i64, i64* %25, align 8, !dbg !4308
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !4308
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !4308
  %idxprom45 = sext i32 %bf.cast44 to i64, !dbg !4308
  %arrayidx46 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom45, !dbg !4308
  %26 = load i32, i32* %arrayidx46, align 4, !dbg !4308
  %cmp47 = icmp eq i32 %26, 3, !dbg !4308
  br i1 %cmp47, label %if.then49, label %if.else, !dbg !4310

if.then49:                                        ; preds = %if.end
  %27 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4311
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4312
  %base50 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !4312
  %29 = bitcast %struct.tree_base* %base50 to i64*, !dbg !4312
  %bf.load51 = load i64, i64* %29, align 8, !dbg !4312
  %bf.lshr52 = lshr i64 %bf.load51, 21, !dbg !4312
  %bf.clear53 = and i64 %bf.lshr52, 1, !dbg !4312
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !4312
  %conv55 = zext i32 %bf.cast54 to i64, !dbg !4312
  call void @bp_pack_value(%struct.bitpack_d* %27, i64 %conv55, i32 1), !dbg !4313
  br label %if.end72, !dbg !4313

if.else:                                          ; preds = %if.end
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4314
  %base56 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !4314
  %31 = bitcast %struct.tree_base* %base56 to i64*, !dbg !4314
  %bf.load57 = load i64, i64* %31, align 8, !dbg !4314
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !4314
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !4314
  %idxprom60 = sext i32 %bf.cast59 to i64, !dbg !4314
  %arrayidx61 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom60, !dbg !4314
  %32 = load i32, i32* %arrayidx61, align 4, !dbg !4314
  %cmp62 = icmp eq i32 %32, 2, !dbg !4314
  br i1 %cmp62, label %if.then64, label %if.end71, !dbg !4316

if.then64:                                        ; preds = %if.else
  %33 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4317
  %34 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4318
  %base65 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !4318
  %35 = bitcast %struct.tree_base* %base65 to i64*, !dbg !4318
  %bf.load66 = load i64, i64* %35, align 8, !dbg !4318
  %bf.lshr67 = lshr i64 %bf.load66, 21, !dbg !4318
  %bf.clear68 = and i64 %bf.lshr67, 1, !dbg !4318
  %bf.cast69 = trunc i64 %bf.clear68 to i32, !dbg !4318
  %conv70 = zext i32 %bf.cast69 to i64, !dbg !4318
  call void @bp_pack_value(%struct.bitpack_d* %33, i64 %conv70, i32 1), !dbg !4319
  br label %if.end71, !dbg !4319

if.end71:                                         ; preds = %if.then64, %if.else
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.then49
  %36 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4320
  %37 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4321
  %base73 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !4321
  %38 = bitcast %struct.tree_base* %base73 to i64*, !dbg !4321
  %bf.load74 = load i64, i64* %38, align 8, !dbg !4321
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !4321
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !4321
  %idxprom77 = sext i32 %bf.cast76 to i64, !dbg !4321
  %arrayidx78 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom77, !dbg !4321
  %39 = load i32, i32* %arrayidx78, align 4, !dbg !4321
  %cmp79 = icmp eq i32 %39, 2, !dbg !4321
  br i1 %cmp79, label %cond.true, label %cond.false, !dbg !4321

cond.true:                                        ; preds = %if.end72
  br label %cond.end, !dbg !4321

cond.false:                                       ; preds = %if.end72
  %40 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4322
  %base81 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !4322
  %41 = bitcast %struct.tree_base* %base81 to i64*, !dbg !4322
  %bf.load82 = load i64, i64* %41, align 8, !dbg !4322
  %bf.lshr83 = lshr i64 %bf.load82, 22, !dbg !4322
  %bf.clear84 = and i64 %bf.lshr83, 1, !dbg !4322
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !4322
  br label %cond.end, !dbg !4321

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %bf.cast85, %cond.false ], !dbg !4321
  %conv86 = sext i32 %cond to i64, !dbg !4321
  call void @bp_pack_value(%struct.bitpack_d* %36, i64 %conv86, i32 1), !dbg !4323
  %42 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4324
  %43 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4325
  %base87 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !4325
  %44 = bitcast %struct.tree_base* %base87 to i64*, !dbg !4325
  %bf.load88 = load i64, i64* %44, align 8, !dbg !4325
  %bf.lshr89 = lshr i64 %bf.load88, 23, !dbg !4325
  %bf.clear90 = and i64 %bf.lshr89, 1, !dbg !4325
  %bf.cast91 = trunc i64 %bf.clear90 to i32, !dbg !4325
  %conv92 = zext i32 %bf.cast91 to i64, !dbg !4325
  call void @bp_pack_value(%struct.bitpack_d* %42, i64 %conv92, i32 1), !dbg !4326
  %45 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4327
  %46 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4328
  %base93 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !4328
  %47 = bitcast %struct.tree_base* %base93 to i64*, !dbg !4328
  %bf.load94 = load i64, i64* %47, align 8, !dbg !4328
  %bf.lshr95 = lshr i64 %bf.load94, 24, !dbg !4328
  %bf.clear96 = and i64 %bf.lshr95, 1, !dbg !4328
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !4328
  %conv98 = zext i32 %bf.cast97 to i64, !dbg !4328
  call void @bp_pack_value(%struct.bitpack_d* %45, i64 %conv98, i32 1), !dbg !4329
  %48 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4330
  %49 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4331
  %base99 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !4331
  %50 = bitcast %struct.tree_base* %base99 to i64*, !dbg !4331
  %bf.load100 = load i64, i64* %50, align 8, !dbg !4331
  %bf.lshr101 = lshr i64 %bf.load100, 25, !dbg !4331
  %bf.clear102 = and i64 %bf.lshr101, 1, !dbg !4331
  %bf.cast103 = trunc i64 %bf.clear102 to i32, !dbg !4331
  %conv104 = zext i32 %bf.cast103 to i64, !dbg !4331
  call void @bp_pack_value(%struct.bitpack_d* %48, i64 %conv104, i32 1), !dbg !4332
  %51 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4333
  %52 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4334
  %base105 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !4334
  %53 = bitcast %struct.tree_base* %base105 to i64*, !dbg !4334
  %bf.load106 = load i64, i64* %53, align 8, !dbg !4334
  %bf.lshr107 = lshr i64 %bf.load106, 26, !dbg !4334
  %bf.clear108 = and i64 %bf.lshr107, 1, !dbg !4334
  %bf.cast109 = trunc i64 %bf.clear108 to i32, !dbg !4334
  %conv110 = zext i32 %bf.cast109 to i64, !dbg !4334
  call void @bp_pack_value(%struct.bitpack_d* %51, i64 %conv110, i32 1), !dbg !4335
  %54 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4336
  %55 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4337
  %base111 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !4337
  %56 = bitcast %struct.tree_base* %base111 to i64*, !dbg !4337
  %bf.load112 = load i64, i64* %56, align 8, !dbg !4337
  %bf.lshr113 = lshr i64 %bf.load112, 28, !dbg !4337
  %bf.clear114 = and i64 %bf.lshr113, 1, !dbg !4337
  %bf.cast115 = trunc i64 %bf.clear114 to i32, !dbg !4337
  %conv116 = zext i32 %bf.cast115 to i64, !dbg !4337
  call void @bp_pack_value(%struct.bitpack_d* %54, i64 %conv116, i32 1), !dbg !4338
  %57 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4339
  %58 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4340
  %base117 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !4340
  %59 = bitcast %struct.tree_base* %base117 to i64*, !dbg !4340
  %bf.load118 = load i64, i64* %59, align 8, !dbg !4340
  %bf.lshr119 = lshr i64 %bf.load118, 29, !dbg !4340
  %bf.clear120 = and i64 %bf.lshr119, 1, !dbg !4340
  %bf.cast121 = trunc i64 %bf.clear120 to i32, !dbg !4340
  %conv122 = zext i32 %bf.cast121 to i64, !dbg !4340
  call void @bp_pack_value(%struct.bitpack_d* %57, i64 %conv122, i32 1), !dbg !4341
  %60 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4342
  %61 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4343
  %base123 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !4343
  %62 = bitcast %struct.tree_base* %base123 to i64*, !dbg !4343
  %bf.load124 = load i64, i64* %62, align 8, !dbg !4343
  %bf.lshr125 = lshr i64 %bf.load124, 30, !dbg !4343
  %bf.clear126 = and i64 %bf.lshr125, 1, !dbg !4343
  %bf.cast127 = trunc i64 %bf.clear126 to i32, !dbg !4343
  %conv128 = zext i32 %bf.cast127 to i64, !dbg !4343
  call void @bp_pack_value(%struct.bitpack_d* %60, i64 %conv128, i32 1), !dbg !4344
  %63 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4345
  %base129 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !4345
  %64 = bitcast %struct.tree_base* %base129 to i64*, !dbg !4345
  %bf.load130 = load i64, i64* %64, align 8, !dbg !4345
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !4345
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !4345
  %idxprom133 = sext i32 %bf.cast132 to i64, !dbg !4345
  %arrayidx134 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom133, !dbg !4345
  %65 = load i32, i32* %arrayidx134, align 4, !dbg !4345
  %cmp135 = icmp eq i32 %65, 2, !dbg !4345
  br i1 %cmp135, label %if.then137, label %if.end144, !dbg !4347

if.then137:                                       ; preds = %cond.end
  %66 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4348
  %67 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4349
  %base138 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !4349
  %68 = bitcast %struct.tree_base* %base138 to i64*, !dbg !4349
  %bf.load139 = load i64, i64* %68, align 8, !dbg !4349
  %bf.lshr140 = lshr i64 %bf.load139, 31, !dbg !4349
  %bf.clear141 = and i64 %bf.lshr140, 1, !dbg !4349
  %bf.cast142 = trunc i64 %bf.clear141 to i32, !dbg !4349
  %conv143 = zext i32 %bf.cast142 to i64, !dbg !4349
  call void @bp_pack_value(%struct.bitpack_d* %66, i64 %conv143, i32 1), !dbg !4350
  br label %if.end144, !dbg !4350

if.end144:                                        ; preds = %if.then137, %cond.end
  %69 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4351
  %base145 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !4351
  %70 = bitcast %struct.tree_base* %base145 to i64*, !dbg !4351
  %bf.load146 = load i64, i64* %70, align 8, !dbg !4351
  %bf.clear147 = and i64 %bf.load146, 65535, !dbg !4351
  %bf.cast148 = trunc i64 %bf.clear147 to i32, !dbg !4351
  %cmp149 = icmp eq i32 %bf.cast148, 141, !dbg !4353
  br i1 %cmp149, label %if.then151, label %if.end158, !dbg !4354

if.then151:                                       ; preds = %if.end144
  %71 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4355
  %72 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4356
  %base152 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !4356
  %73 = bitcast %struct.tree_base* %base152 to i64*, !dbg !4356
  %bf.load153 = load i64, i64* %73, align 8, !dbg !4356
  %bf.lshr154 = lshr i64 %bf.load153, 32, !dbg !4356
  %bf.clear155 = and i64 %bf.lshr154, 1, !dbg !4356
  %bf.cast156 = trunc i64 %bf.clear155 to i32, !dbg !4356
  %conv157 = zext i32 %bf.cast156 to i64, !dbg !4356
  call void @bp_pack_value(%struct.bitpack_d* %71, i64 %conv157, i32 1), !dbg !4357
  br label %if.end158, !dbg !4357

if.end158:                                        ; preds = %if.then151, %if.end144
  ret void, !dbg !4358
}

; Function Attrs: noinline nounwind uwtable
define internal void @pack_ts_real_cst_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !4359 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %r = alloca %struct.real_value, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !4360, metadata !DIExpression()), !dbg !4361
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4362, metadata !DIExpression()), !dbg !4363
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4364, metadata !DIExpression()), !dbg !4365
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !4366, metadata !DIExpression()), !dbg !4367
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4368
  %real_cst = bitcast %union.tree_node* %0 to %struct.tree_real_cst*, !dbg !4368
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !4368
  %1 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !4368
  %2 = bitcast %struct.real_value* %r to i8*, !dbg !4368
  %3 = bitcast %struct.real_value* %1 to i8*, !dbg !4368
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 32, i1 false), !dbg !4368
  %4 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4369
  %5 = bitcast %struct.real_value* %r to i32*, !dbg !4370
  %bf.load = load i32, i32* %5, align 8, !dbg !4370
  %bf.clear = and i32 %bf.load, 3, !dbg !4370
  %conv = zext i32 %bf.clear to i64, !dbg !4371
  call void @bp_pack_value(%struct.bitpack_d* %4, i64 %conv, i32 2), !dbg !4372
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4373
  %7 = bitcast %struct.real_value* %r to i32*, !dbg !4374
  %bf.load1 = load i32, i32* %7, align 8, !dbg !4374
  %bf.lshr = lshr i32 %bf.load1, 2, !dbg !4374
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !4374
  %conv3 = zext i32 %bf.clear2 to i64, !dbg !4375
  call void @bp_pack_value(%struct.bitpack_d* %6, i64 %conv3, i32 1), !dbg !4376
  %8 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4377
  %9 = bitcast %struct.real_value* %r to i32*, !dbg !4378
  %bf.load4 = load i32, i32* %9, align 8, !dbg !4378
  %bf.lshr5 = lshr i32 %bf.load4, 3, !dbg !4378
  %bf.clear6 = and i32 %bf.lshr5, 1, !dbg !4378
  %conv7 = zext i32 %bf.clear6 to i64, !dbg !4379
  call void @bp_pack_value(%struct.bitpack_d* %8, i64 %conv7, i32 1), !dbg !4380
  %10 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4381
  %11 = bitcast %struct.real_value* %r to i32*, !dbg !4382
  %bf.load8 = load i32, i32* %11, align 8, !dbg !4382
  %bf.lshr9 = lshr i32 %bf.load8, 4, !dbg !4382
  %bf.clear10 = and i32 %bf.lshr9, 1, !dbg !4382
  %conv11 = zext i32 %bf.clear10 to i64, !dbg !4383
  call void @bp_pack_value(%struct.bitpack_d* %10, i64 %conv11, i32 1), !dbg !4384
  %12 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4385
  %13 = bitcast %struct.real_value* %r to i32*, !dbg !4386
  %bf.load12 = load i32, i32* %13, align 8, !dbg !4386
  %bf.lshr13 = lshr i32 %bf.load12, 5, !dbg !4386
  %bf.clear14 = and i32 %bf.lshr13, 1, !dbg !4386
  %conv15 = zext i32 %bf.clear14 to i64, !dbg !4387
  call void @bp_pack_value(%struct.bitpack_d* %12, i64 %conv15, i32 1), !dbg !4388
  %14 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4389
  %15 = bitcast %struct.real_value* %r to i32*, !dbg !4390
  %bf.load16 = load i32, i32* %15, align 8, !dbg !4390
  %bf.lshr17 = lshr i32 %bf.load16, 6, !dbg !4390
  %conv18 = zext i32 %bf.lshr17 to i64, !dbg !4391
  call void @bp_pack_value(%struct.bitpack_d* %14, i64 %conv18, i32 26), !dbg !4392
  store i32 0, i32* %i, align 4, !dbg !4393
  br label %for.cond, !dbg !4395

for.cond:                                         ; preds = %for.inc, %entry
  %16 = load i32, i32* %i, align 4, !dbg !4396
  %cmp = icmp ult i32 %16, 3, !dbg !4398
  br i1 %cmp, label %for.body, label %for.end, !dbg !4399

for.body:                                         ; preds = %for.cond
  %17 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4400
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %r, i32 0, i32 1, !dbg !4401
  %18 = load i32, i32* %i, align 4, !dbg !4402
  %idxprom = zext i32 %18 to i64, !dbg !4403
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !4403
  %19 = load i64, i64* %arrayidx, align 8, !dbg !4403
  call void @bp_pack_value(%struct.bitpack_d* %17, i64 %19, i32 64), !dbg !4404
  br label %for.inc, !dbg !4404

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4, !dbg !4405
  %inc = add i32 %20, 1, !dbg !4405
  store i32 %inc, i32* %i, align 4, !dbg !4405
  br label %for.cond, !dbg !4406, !llvm.loop !4407

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4409
}

; Function Attrs: noinline nounwind uwtable
define internal void @pack_ts_fixed_cst_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !4410 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %fv = alloca %struct.fixed_value, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !4411, metadata !DIExpression()), !dbg !4412
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4413, metadata !DIExpression()), !dbg !4414
  call void @llvm.dbg.declare(metadata %struct.fixed_value* %fv, metadata !4415, metadata !DIExpression()), !dbg !4416
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4417
  %fixed_cst = bitcast %union.tree_node* %0 to %struct.tree_fixed_cst*, !dbg !4417
  %fixed_cst_ptr = getelementptr inbounds %struct.tree_fixed_cst, %struct.tree_fixed_cst* %fixed_cst, i32 0, i32 1, !dbg !4417
  %1 = load %struct.fixed_value*, %struct.fixed_value** %fixed_cst_ptr, align 8, !dbg !4417
  %2 = bitcast %struct.fixed_value* %fv to i8*, !dbg !4417
  %3 = bitcast %struct.fixed_value* %1 to i8*, !dbg !4417
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !4417
  %4 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4418
  %data = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %fv, i32 0, i32 0, !dbg !4419
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %data, i32 0, i32 0, !dbg !4420
  %5 = load i64, i64* %low, align 8, !dbg !4420
  call void @bp_pack_value(%struct.bitpack_d* %4, i64 %5, i32 64), !dbg !4421
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4422
  %data1 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %fv, i32 0, i32 0, !dbg !4423
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %data1, i32 0, i32 1, !dbg !4424
  %7 = load i64, i64* %high, align 8, !dbg !4424
  call void @bp_pack_value(%struct.bitpack_d* %6, i64 %7, i32 64), !dbg !4425
  ret void, !dbg !4426
}

; Function Attrs: noinline nounwind uwtable
define internal void @pack_ts_decl_common_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !4427 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !4428, metadata !DIExpression()), !dbg !4429
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4430, metadata !DIExpression()), !dbg !4431
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4432
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4433
  %decl_common = bitcast %union.tree_node* %1 to %struct.tree_decl_common*, !dbg !4433
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4433
  %2 = bitcast i40* %mode to i64*, !dbg !4433
  %bf.load = load i64, i64* %2, align 8, !dbg !4433
  %bf.clear = and i64 %bf.load, 255, !dbg !4433
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4433
  %conv = zext i32 %bf.cast to i64, !dbg !4433
  call void @bp_pack_value(%struct.bitpack_d* %0, i64 %conv, i32 8), !dbg !4434
  %3 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4435
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4436
  %decl_common1 = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !4436
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1, i32 0, i32 2, !dbg !4436
  %5 = bitcast i40* %nonlocal_flag to i64*, !dbg !4436
  %bf.load2 = load i64, i64* %5, align 8, !dbg !4436
  %bf.lshr = lshr i64 %bf.load2, 8, !dbg !4436
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !4436
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4436
  %conv5 = zext i32 %bf.cast4 to i64, !dbg !4436
  call void @bp_pack_value(%struct.bitpack_d* %3, i64 %conv5, i32 1), !dbg !4437
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4438
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4439
  %decl_common6 = bitcast %union.tree_node* %7 to %struct.tree_decl_common*, !dbg !4439
  %virtual_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common6, i32 0, i32 2, !dbg !4439
  %8 = bitcast i40* %virtual_flag to i64*, !dbg !4439
  %bf.load7 = load i64, i64* %8, align 8, !dbg !4439
  %bf.lshr8 = lshr i64 %bf.load7, 9, !dbg !4439
  %bf.clear9 = and i64 %bf.lshr8, 1, !dbg !4439
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !4439
  %conv11 = zext i32 %bf.cast10 to i64, !dbg !4439
  call void @bp_pack_value(%struct.bitpack_d* %6, i64 %conv11, i32 1), !dbg !4440
  %9 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4441
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4442
  %decl_common12 = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !4442
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common12, i32 0, i32 2, !dbg !4442
  %11 = bitcast i40* %ignored_flag to i64*, !dbg !4442
  %bf.load13 = load i64, i64* %11, align 8, !dbg !4442
  %bf.lshr14 = lshr i64 %bf.load13, 10, !dbg !4442
  %bf.clear15 = and i64 %bf.lshr14, 1, !dbg !4442
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !4442
  %conv17 = zext i32 %bf.cast16 to i64, !dbg !4442
  call void @bp_pack_value(%struct.bitpack_d* %9, i64 %conv17, i32 1), !dbg !4443
  %12 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4444
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4445
  %decl_common18 = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !4445
  %abstract_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common18, i32 0, i32 2, !dbg !4445
  %14 = bitcast i40* %abstract_flag to i64*, !dbg !4445
  %bf.load19 = load i64, i64* %14, align 8, !dbg !4445
  %bf.lshr20 = lshr i64 %bf.load19, 11, !dbg !4445
  %bf.clear21 = and i64 %bf.lshr20, 1, !dbg !4445
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !4445
  %conv23 = zext i32 %bf.cast22 to i64, !dbg !4445
  call void @bp_pack_value(%struct.bitpack_d* %12, i64 %conv23, i32 1), !dbg !4446
  %15 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4447
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4448
  %decl_common24 = bitcast %union.tree_node* %16 to %struct.tree_decl_common*, !dbg !4448
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common24, i32 0, i32 2, !dbg !4448
  %17 = bitcast i40* %artificial_flag to i64*, !dbg !4448
  %bf.load25 = load i64, i64* %17, align 8, !dbg !4448
  %bf.lshr26 = lshr i64 %bf.load25, 12, !dbg !4448
  %bf.clear27 = and i64 %bf.lshr26, 1, !dbg !4448
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !4448
  %conv29 = zext i32 %bf.cast28 to i64, !dbg !4448
  call void @bp_pack_value(%struct.bitpack_d* %15, i64 %conv29, i32 1), !dbg !4449
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4450
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4451
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !4451
  %base = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !4451
  %20 = bitcast %struct.tree_base* %base to i64*, !dbg !4451
  %bf.load30 = load i64, i64* %20, align 8, !dbg !4451
  %bf.lshr31 = lshr i64 %bf.load30, 42, !dbg !4451
  %bf.clear32 = and i64 %bf.lshr31, 1, !dbg !4451
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !4451
  %conv34 = zext i32 %bf.cast33 to i64, !dbg !4451
  call void @bp_pack_value(%struct.bitpack_d* %18, i64 %conv34, i32 1), !dbg !4452
  %21 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4453
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4454
  %decl_common35 = bitcast %union.tree_node* %22 to %struct.tree_decl_common*, !dbg !4454
  %preserve_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common35, i32 0, i32 2, !dbg !4454
  %23 = bitcast i40* %preserve_flag to i64*, !dbg !4454
  %bf.load36 = load i64, i64* %23, align 8, !dbg !4454
  %bf.lshr37 = lshr i64 %bf.load36, 13, !dbg !4454
  %bf.clear38 = and i64 %bf.lshr37, 1, !dbg !4454
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !4454
  %conv40 = zext i32 %bf.cast39 to i64, !dbg !4454
  call void @bp_pack_value(%struct.bitpack_d* %21, i64 %conv40, i32 1), !dbg !4455
  %24 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4456
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4457
  %decl_common41 = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !4457
  %debug_expr_is_from = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common41, i32 0, i32 2, !dbg !4457
  %26 = bitcast i40* %debug_expr_is_from to i64*, !dbg !4457
  %bf.load42 = load i64, i64* %26, align 8, !dbg !4457
  %bf.lshr43 = lshr i64 %bf.load42, 14, !dbg !4457
  %bf.clear44 = and i64 %bf.lshr43, 1, !dbg !4457
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !4457
  %conv46 = zext i32 %bf.cast45 to i64, !dbg !4457
  call void @bp_pack_value(%struct.bitpack_d* %24, i64 %conv46, i32 1), !dbg !4458
  %27 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4459
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4460
  %decl_common47 = bitcast %union.tree_node* %28 to %struct.tree_decl_common*, !dbg !4460
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common47, i32 0, i32 2, !dbg !4460
  %29 = bitcast i40* %decl_flag_1 to i64*, !dbg !4460
  %bf.load48 = load i64, i64* %29, align 8, !dbg !4460
  %bf.lshr49 = lshr i64 %bf.load48, 25, !dbg !4460
  %bf.clear50 = and i64 %bf.lshr49, 1, !dbg !4460
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !4460
  %conv52 = zext i32 %bf.cast51 to i64, !dbg !4460
  call void @bp_pack_value(%struct.bitpack_d* %27, i64 %conv52, i32 1), !dbg !4461
  %30 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4462
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4463
  %decl_common53 = bitcast %union.tree_node* %31 to %struct.tree_decl_common*, !dbg !4463
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common53, i32 0, i32 2, !dbg !4463
  %32 = bitcast i40* %gimple_reg_flag to i64*, !dbg !4463
  %bf.load54 = load i64, i64* %32, align 8, !dbg !4463
  %bf.lshr55 = lshr i64 %bf.load54, 27, !dbg !4463
  %bf.clear56 = and i64 %bf.lshr55, 1, !dbg !4463
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !4463
  %conv58 = zext i32 %bf.cast57 to i64, !dbg !4463
  call void @bp_pack_value(%struct.bitpack_d* %30, i64 %conv58, i32 1), !dbg !4464
  %33 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4465
  %34 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4466
  %decl_common59 = bitcast %union.tree_node* %34 to %struct.tree_decl_common*, !dbg !4466
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common59, i32 0, i32 3, !dbg !4466
  %35 = load i32, i32* %align, align 8, !dbg !4466
  %conv60 = zext i32 %35 to i64, !dbg !4466
  call void @bp_pack_value(%struct.bitpack_d* %33, i64 %conv60, i32 32), !dbg !4467
  %36 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4468
  %base61 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !4468
  %37 = bitcast %struct.tree_base* %base61 to i64*, !dbg !4468
  %bf.load62 = load i64, i64* %37, align 8, !dbg !4468
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !4468
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !4468
  %cmp = icmp eq i32 %bf.cast64, 30, !dbg !4470
  br i1 %cmp, label %if.then, label %if.end, !dbg !4471

if.then:                                          ; preds = %entry
  %38 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4472
  %39 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4474
  %decl_common66 = bitcast %union.tree_node* %39 to %struct.tree_decl_common*, !dbg !4474
  %decl_flag_0 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common66, i32 0, i32 2, !dbg !4474
  %40 = bitcast i40* %decl_flag_0 to i64*, !dbg !4474
  %bf.load67 = load i64, i64* %40, align 8, !dbg !4474
  %bf.lshr68 = lshr i64 %bf.load67, 24, !dbg !4474
  %bf.clear69 = and i64 %bf.lshr68, 1, !dbg !4474
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !4474
  %conv71 = zext i32 %bf.cast70 to i64, !dbg !4474
  call void @bp_pack_value(%struct.bitpack_d* %38, i64 %conv71, i32 1), !dbg !4475
  %41 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4476
  %42 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4477
  %label_decl = bitcast %union.tree_node* %42 to %struct.tree_label_decl*, !dbg !4477
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !4477
  %43 = load i32, i32* %eh_landing_pad_nr, align 4, !dbg !4477
  %conv72 = sext i32 %43 to i64, !dbg !4477
  call void @bp_pack_value(%struct.bitpack_d* %41, i64 %conv72, i32 32), !dbg !4478
  br label %if.end, !dbg !4479

if.end:                                           ; preds = %if.then, %entry
  %44 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4480
  %base73 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !4480
  %45 = bitcast %struct.tree_base* %base73 to i64*, !dbg !4480
  %bf.load74 = load i64, i64* %45, align 8, !dbg !4480
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !4480
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !4480
  %cmp77 = icmp eq i32 %bf.cast76, 31, !dbg !4482
  br i1 %cmp77, label %if.then79, label %if.end98, !dbg !4483

if.then79:                                        ; preds = %if.end
  %46 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4484
  %47 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4486
  %common80 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !4486
  %base81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 0, !dbg !4486
  %48 = bitcast %struct.tree_base* %base81 to i64*, !dbg !4486
  %bf.load82 = load i64, i64* %48, align 8, !dbg !4486
  %bf.lshr83 = lshr i64 %bf.load82, 41, !dbg !4486
  %bf.clear84 = and i64 %bf.lshr83, 1, !dbg !4486
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !4486
  %conv86 = zext i32 %bf.cast85 to i64, !dbg !4486
  call void @bp_pack_value(%struct.bitpack_d* %46, i64 %conv86, i32 1), !dbg !4487
  %49 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4488
  %50 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4489
  %decl_common87 = bitcast %union.tree_node* %50 to %struct.tree_decl_common*, !dbg !4489
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common87, i32 0, i32 2, !dbg !4489
  %51 = bitcast i40* %decl_flag_2 to i64*, !dbg !4489
  %bf.load88 = load i64, i64* %51, align 8, !dbg !4489
  %bf.lshr89 = lshr i64 %bf.load88, 26, !dbg !4489
  %bf.clear90 = and i64 %bf.lshr89, 1, !dbg !4489
  %bf.cast91 = trunc i64 %bf.clear90 to i32, !dbg !4489
  %conv92 = zext i32 %bf.cast91 to i64, !dbg !4489
  call void @bp_pack_value(%struct.bitpack_d* %49, i64 %conv92, i32 1), !dbg !4490
  %52 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4491
  %53 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4492
  %decl_common93 = bitcast %union.tree_node* %53 to %struct.tree_decl_common*, !dbg !4492
  %off_align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common93, i32 0, i32 2, !dbg !4492
  %54 = bitcast i40* %off_align to i64*, !dbg !4492
  %bf.load94 = load i64, i64* %54, align 8, !dbg !4492
  %bf.lshr95 = lshr i64 %bf.load94, 32, !dbg !4492
  %bf.clear96 = and i64 %bf.lshr95, 255, !dbg !4492
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !4492
  %sh_prom = zext i32 %bf.cast97 to i64, !dbg !4492
  %shl = shl i64 1, %sh_prom, !dbg !4492
  call void @bp_pack_value(%struct.bitpack_d* %52, i64 %shl, i32 8), !dbg !4493
  br label %if.end98, !dbg !4494

if.end98:                                         ; preds = %if.then79, %if.end
  %55 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4495
  %base99 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !4495
  %56 = bitcast %struct.tree_base* %base99 to i64*, !dbg !4495
  %bf.load100 = load i64, i64* %56, align 8, !dbg !4495
  %bf.clear101 = and i64 %bf.load100, 65535, !dbg !4495
  %bf.cast102 = trunc i64 %bf.clear101 to i32, !dbg !4495
  %cmp103 = icmp eq i32 %bf.cast102, 36, !dbg !4497
  br i1 %cmp103, label %if.then118, label %lor.lhs.false, !dbg !4498

lor.lhs.false:                                    ; preds = %if.end98
  %57 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4499
  %base105 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !4499
  %58 = bitcast %struct.tree_base* %base105 to i64*, !dbg !4499
  %bf.load106 = load i64, i64* %58, align 8, !dbg !4499
  %bf.clear107 = and i64 %bf.load106, 65535, !dbg !4499
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !4499
  %cmp109 = icmp eq i32 %bf.cast108, 34, !dbg !4500
  br i1 %cmp109, label %if.then118, label %lor.lhs.false111, !dbg !4501

lor.lhs.false111:                                 ; preds = %lor.lhs.false
  %59 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4502
  %base112 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !4502
  %60 = bitcast %struct.tree_base* %base112 to i64*, !dbg !4502
  %bf.load113 = load i64, i64* %60, align 8, !dbg !4502
  %bf.clear114 = and i64 %bf.load113, 65535, !dbg !4502
  %bf.cast115 = trunc i64 %bf.clear114 to i32, !dbg !4502
  %cmp116 = icmp eq i32 %bf.cast115, 32, !dbg !4503
  br i1 %cmp116, label %if.then118, label %if.end153, !dbg !4504

if.then118:                                       ; preds = %lor.lhs.false111, %lor.lhs.false, %if.end98
  %61 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4505
  %62 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4507
  %decl_common119 = bitcast %union.tree_node* %62 to %struct.tree_decl_common*, !dbg !4507
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common119, i32 0, i32 2, !dbg !4507
  %63 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !4507
  %bf.load120 = load i64, i64* %63, align 8, !dbg !4507
  %bf.lshr121 = lshr i64 %bf.load120, 28, !dbg !4507
  %bf.clear122 = and i64 %bf.lshr121, 1, !dbg !4507
  %bf.cast123 = trunc i64 %bf.clear122 to i32, !dbg !4507
  %conv124 = zext i32 %bf.cast123 to i64, !dbg !4507
  call void @bp_pack_value(%struct.bitpack_d* %61, i64 %conv124, i32 1), !dbg !4508
  %64 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4509
  %base125 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !4509
  %65 = bitcast %struct.tree_base* %base125 to i64*, !dbg !4509
  %bf.load126 = load i64, i64* %65, align 8, !dbg !4509
  %bf.clear127 = and i64 %bf.load126, 65535, !dbg !4509
  %bf.cast128 = trunc i64 %bf.clear127 to i32, !dbg !4509
  %cmp129 = icmp eq i32 %bf.cast128, 32, !dbg !4511
  br i1 %cmp129, label %if.then138, label %lor.lhs.false131, !dbg !4512

lor.lhs.false131:                                 ; preds = %if.then118
  %66 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4513
  %base132 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !4513
  %67 = bitcast %struct.tree_base* %base132 to i64*, !dbg !4513
  %bf.load133 = load i64, i64* %67, align 8, !dbg !4513
  %bf.clear134 = and i64 %bf.load133, 65535, !dbg !4513
  %bf.cast135 = trunc i64 %bf.clear134 to i32, !dbg !4513
  %cmp136 = icmp eq i32 %bf.cast135, 34, !dbg !4514
  br i1 %cmp136, label %if.then138, label %if.end146, !dbg !4515

if.then138:                                       ; preds = %lor.lhs.false131, %if.then118
  %68 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4516
  %69 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4517
  %decl_common139 = bitcast %union.tree_node* %69 to %struct.tree_decl_common*, !dbg !4517
  %decl_flag_2140 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common139, i32 0, i32 2, !dbg !4517
  %70 = bitcast i40* %decl_flag_2140 to i64*, !dbg !4517
  %bf.load141 = load i64, i64* %70, align 8, !dbg !4517
  %bf.lshr142 = lshr i64 %bf.load141, 26, !dbg !4517
  %bf.clear143 = and i64 %bf.lshr142, 1, !dbg !4517
  %bf.cast144 = trunc i64 %bf.clear143 to i32, !dbg !4517
  %conv145 = zext i32 %bf.cast144 to i64, !dbg !4517
  call void @bp_pack_value(%struct.bitpack_d* %68, i64 %conv145, i32 1), !dbg !4518
  br label %if.end146, !dbg !4518

if.end146:                                        ; preds = %if.then138, %lor.lhs.false131
  %71 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4519
  %72 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4520
  %decl_common147 = bitcast %union.tree_node* %72 to %struct.tree_decl_common*, !dbg !4520
  %decl_restricted_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common147, i32 0, i32 2, !dbg !4520
  %73 = bitcast i40* %decl_restricted_flag to i64*, !dbg !4520
  %bf.load148 = load i64, i64* %73, align 8, !dbg !4520
  %bf.lshr149 = lshr i64 %bf.load148, 29, !dbg !4520
  %bf.clear150 = and i64 %bf.lshr149, 1, !dbg !4520
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !4520
  %conv152 = zext i32 %bf.cast151 to i64, !dbg !4520
  call void @bp_pack_value(%struct.bitpack_d* %71, i64 %conv152, i32 1), !dbg !4521
  br label %if.end153, !dbg !4522

if.end153:                                        ; preds = %if.end146, %lor.lhs.false111
  ret void, !dbg !4523
}

; Function Attrs: noinline nounwind uwtable
define internal void @pack_ts_decl_wrtl_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !4524 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !4525, metadata !DIExpression()), !dbg !4526
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4527, metadata !DIExpression()), !dbg !4528
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4529
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4530
  %decl_common = bitcast %union.tree_node* %1 to %struct.tree_decl_common*, !dbg !4530
  %decl_flag_0 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4530
  %2 = bitcast i40* %decl_flag_0 to i64*, !dbg !4530
  %bf.load = load i64, i64* %2, align 8, !dbg !4530
  %bf.lshr = lshr i64 %bf.load, 24, !dbg !4530
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4530
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4530
  %conv = zext i32 %bf.cast to i64, !dbg !4530
  call void @bp_pack_value(%struct.bitpack_d* %0, i64 %conv, i32 1), !dbg !4531
  ret void, !dbg !4532
}

; Function Attrs: noinline nounwind uwtable
define internal void @pack_ts_decl_with_vis_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !4533 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !4534, metadata !DIExpression()), !dbg !4535
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4536, metadata !DIExpression()), !dbg !4537
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4538
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4539
  %decl_with_vis = bitcast %union.tree_node* %1 to %struct.tree_decl_with_vis*, !dbg !4539
  %defer_output = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !4539
  %2 = bitcast i24* %defer_output to i32*, !dbg !4539
  %bf.load = load i32, i32* %2, align 8, !dbg !4539
  %bf.clear = and i32 %bf.load, 1, !dbg !4539
  %conv = zext i32 %bf.clear to i64, !dbg !4539
  call void @bp_pack_value(%struct.bitpack_d* %0, i64 %conv, i32 1), !dbg !4540
  %3 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4541
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4542
  %decl_with_vis1 = bitcast %union.tree_node* %4 to %struct.tree_decl_with_vis*, !dbg !4542
  %common_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis1, i32 0, i32 4, !dbg !4542
  %5 = bitcast i24* %common_flag to i32*, !dbg !4542
  %bf.load2 = load i32, i32* %5, align 8, !dbg !4542
  %bf.lshr = lshr i32 %bf.load2, 3, !dbg !4542
  %bf.clear3 = and i32 %bf.lshr, 1, !dbg !4542
  %conv4 = zext i32 %bf.clear3 to i64, !dbg !4542
  call void @bp_pack_value(%struct.bitpack_d* %3, i64 %conv4, i32 1), !dbg !4543
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4544
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4545
  %decl_with_vis5 = bitcast %union.tree_node* %7 to %struct.tree_decl_with_vis*, !dbg !4545
  %dllimport_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis5, i32 0, i32 4, !dbg !4545
  %8 = bitcast i24* %dllimport_flag to i32*, !dbg !4545
  %bf.load6 = load i32, i32* %8, align 8, !dbg !4545
  %bf.lshr7 = lshr i32 %bf.load6, 5, !dbg !4545
  %bf.clear8 = and i32 %bf.lshr7, 1, !dbg !4545
  %conv9 = zext i32 %bf.clear8 to i64, !dbg !4545
  call void @bp_pack_value(%struct.bitpack_d* %6, i64 %conv9, i32 1), !dbg !4546
  %9 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4547
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4548
  %decl_with_vis10 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_vis*, !dbg !4548
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis10, i32 0, i32 4, !dbg !4548
  %11 = bitcast i24* %weak_flag to i32*, !dbg !4548
  %bf.load11 = load i32, i32* %11, align 8, !dbg !4548
  %bf.lshr12 = lshr i32 %bf.load11, 7, !dbg !4548
  %bf.clear13 = and i32 %bf.lshr12, 1, !dbg !4548
  %conv14 = zext i32 %bf.clear13 to i64, !dbg !4548
  call void @bp_pack_value(%struct.bitpack_d* %9, i64 %conv14, i32 1), !dbg !4549
  %12 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4550
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4551
  %decl_with_vis15 = bitcast %union.tree_node* %13 to %struct.tree_decl_with_vis*, !dbg !4551
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis15, i32 0, i32 4, !dbg !4551
  %14 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !4551
  %bf.load16 = load i32, i32* %14, align 8, !dbg !4551
  %bf.lshr17 = lshr i32 %bf.load16, 8, !dbg !4551
  %bf.clear18 = and i32 %bf.lshr17, 1, !dbg !4551
  %conv19 = zext i32 %bf.clear18 to i64, !dbg !4551
  call void @bp_pack_value(%struct.bitpack_d* %12, i64 %conv19, i32 1), !dbg !4552
  %15 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4553
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4554
  %decl_with_vis20 = bitcast %union.tree_node* %16 to %struct.tree_decl_with_vis*, !dbg !4554
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis20, i32 0, i32 4, !dbg !4554
  %17 = bitcast i24* %comdat_flag to i32*, !dbg !4554
  %bf.load21 = load i32, i32* %17, align 8, !dbg !4554
  %bf.lshr22 = lshr i32 %bf.load21, 9, !dbg !4554
  %bf.clear23 = and i32 %bf.lshr22, 1, !dbg !4554
  %conv24 = zext i32 %bf.clear23 to i64, !dbg !4554
  call void @bp_pack_value(%struct.bitpack_d* %15, i64 %conv24, i32 1), !dbg !4555
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4556
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4557
  %decl_with_vis25 = bitcast %union.tree_node* %19 to %struct.tree_decl_with_vis*, !dbg !4557
  %visibility = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis25, i32 0, i32 4, !dbg !4557
  %20 = bitcast i24* %visibility to i32*, !dbg !4557
  %bf.load26 = load i32, i32* %20, align 8, !dbg !4557
  %bf.lshr27 = lshr i32 %bf.load26, 10, !dbg !4557
  %bf.clear28 = and i32 %bf.lshr27, 3, !dbg !4557
  %conv29 = zext i32 %bf.clear28 to i64, !dbg !4557
  call void @bp_pack_value(%struct.bitpack_d* %18, i64 %conv29, i32 2), !dbg !4558
  %21 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4559
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4560
  %decl_with_vis30 = bitcast %union.tree_node* %22 to %struct.tree_decl_with_vis*, !dbg !4560
  %visibility_specified = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis30, i32 0, i32 4, !dbg !4560
  %23 = bitcast i24* %visibility_specified to i32*, !dbg !4560
  %bf.load31 = load i32, i32* %23, align 8, !dbg !4560
  %bf.lshr32 = lshr i32 %bf.load31, 12, !dbg !4560
  %bf.clear33 = and i32 %bf.lshr32, 1, !dbg !4560
  %conv34 = zext i32 %bf.clear33 to i64, !dbg !4560
  call void @bp_pack_value(%struct.bitpack_d* %21, i64 %conv34, i32 1), !dbg !4561
  %24 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4562
  %base = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4562
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !4562
  %bf.load35 = load i64, i64* %25, align 8, !dbg !4562
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !4562
  %bf.cast = trunc i64 %bf.clear36 to i32, !dbg !4562
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !4564
  br i1 %cmp, label %if.then, label %if.end, !dbg !4565

if.then:                                          ; preds = %entry
  %26 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4566
  %27 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4568
  %decl_with_vis38 = bitcast %union.tree_node* %27 to %struct.tree_decl_with_vis*, !dbg !4568
  %hard_register = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis38, i32 0, i32 4, !dbg !4568
  %28 = bitcast i24* %hard_register to i32*, !dbg !4568
  %bf.load39 = load i32, i32* %28, align 8, !dbg !4568
  %bf.lshr40 = lshr i32 %bf.load39, 1, !dbg !4568
  %bf.clear41 = and i32 %bf.lshr40, 1, !dbg !4568
  %conv42 = zext i32 %bf.clear41 to i64, !dbg !4568
  call void @bp_pack_value(%struct.bitpack_d* %26, i64 %conv42, i32 1), !dbg !4569
  %29 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4570
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4571
  %decl_with_vis43 = bitcast %union.tree_node* %30 to %struct.tree_decl_with_vis*, !dbg !4571
  %in_text_section = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis43, i32 0, i32 4, !dbg !4571
  %31 = bitcast i24* %in_text_section to i32*, !dbg !4571
  %bf.load44 = load i32, i32* %31, align 8, !dbg !4571
  %bf.lshr45 = lshr i32 %bf.load44, 4, !dbg !4571
  %bf.clear46 = and i32 %bf.lshr45, 1, !dbg !4571
  %conv47 = zext i32 %bf.clear46 to i64, !dbg !4571
  call void @bp_pack_value(%struct.bitpack_d* %29, i64 %conv47, i32 1), !dbg !4572
  %32 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4573
  %33 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4574
  %decl_with_vis48 = bitcast %union.tree_node* %33 to %struct.tree_decl_with_vis*, !dbg !4574
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis48, i32 0, i32 4, !dbg !4574
  %34 = bitcast i24* %tls_model to i32*, !dbg !4574
  %bf.load49 = load i32, i32* %34, align 8, !dbg !4574
  %bf.lshr50 = lshr i32 %bf.load49, 13, !dbg !4574
  %bf.clear51 = and i32 %bf.lshr50, 7, !dbg !4574
  %conv52 = zext i32 %bf.clear51 to i64, !dbg !4574
  call void @bp_pack_value(%struct.bitpack_d* %32, i64 %conv52, i32 3), !dbg !4575
  br label %if.end, !dbg !4576

if.end:                                           ; preds = %if.then, %entry
  %35 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4577
  %base53 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !4577
  %36 = bitcast %struct.tree_base* %base53 to i64*, !dbg !4577
  %bf.load54 = load i64, i64* %36, align 8, !dbg !4577
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !4577
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !4577
  %cmp57 = icmp eq i32 %bf.cast56, 32, !dbg !4577
  br i1 %cmp57, label %if.then65, label %lor.lhs.false, !dbg !4577

lor.lhs.false:                                    ; preds = %if.end
  %37 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4577
  %base59 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !4577
  %38 = bitcast %struct.tree_base* %base59 to i64*, !dbg !4577
  %bf.load60 = load i64, i64* %38, align 8, !dbg !4577
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !4577
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !4577
  %cmp63 = icmp eq i32 %bf.cast62, 29, !dbg !4577
  br i1 %cmp63, label %if.then65, label %if.end67, !dbg !4579

if.then65:                                        ; preds = %lor.lhs.false, %if.end
  %39 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4580
  %40 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4581
  %call = call zeroext i16 @decl_init_priority_lookup(%union.tree_node* %40), !dbg !4581
  %conv66 = zext i16 %call to i64, !dbg !4581
  call void @bp_pack_value(%struct.bitpack_d* %39, i64 %conv66, i32 16), !dbg !4582
  br label %if.end67, !dbg !4582

if.end67:                                         ; preds = %if.then65, %lor.lhs.false
  ret void, !dbg !4583
}

; Function Attrs: noinline nounwind uwtable
define internal void @pack_ts_function_decl_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !4584 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !4585, metadata !DIExpression()), !dbg !4586
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4587, metadata !DIExpression()), !dbg !4588
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4589
  %call = call zeroext i8 @lto_stream_as_builtin_p(%union.tree_node* %0), !dbg !4589
  %tobool = icmp ne i8 %call, 0, !dbg !4589
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4589

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 487, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4589
  br label %cond.end, !dbg !4589

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4589

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4589
  %1 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4590
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4591
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !4591
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4591
  %bf.load = load i32, i32* %function_code, align 8, !dbg !4591
  %bf.clear = and i32 %bf.load, 2047, !dbg !4591
  %conv = zext i32 %bf.clear to i64, !dbg !4591
  call void @bp_pack_value(%struct.bitpack_d* %1, i64 %conv, i32 11), !dbg !4592
  %3 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4593
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4594
  %function_decl1 = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !4594
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl1, i32 0, i32 5, !dbg !4594
  %bf.load2 = load i32, i32* %built_in_class, align 8, !dbg !4594
  %bf.lshr = lshr i32 %bf.load2, 11, !dbg !4594
  %bf.clear3 = and i32 %bf.lshr, 3, !dbg !4594
  %conv4 = zext i32 %bf.clear3 to i64, !dbg !4594
  call void @bp_pack_value(%struct.bitpack_d* %3, i64 %conv4, i32 2), !dbg !4595
  %5 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4596
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4597
  %function_decl5 = bitcast %union.tree_node* %6 to %struct.tree_function_decl*, !dbg !4597
  %static_ctor_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl5, i32 0, i32 5, !dbg !4597
  %bf.load6 = load i32, i32* %static_ctor_flag, align 8, !dbg !4597
  %bf.lshr7 = lshr i32 %bf.load6, 13, !dbg !4597
  %bf.clear8 = and i32 %bf.lshr7, 1, !dbg !4597
  %conv9 = zext i32 %bf.clear8 to i64, !dbg !4597
  call void @bp_pack_value(%struct.bitpack_d* %5, i64 %conv9, i32 1), !dbg !4598
  %7 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4599
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4600
  %function_decl10 = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !4600
  %static_dtor_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl10, i32 0, i32 5, !dbg !4600
  %bf.load11 = load i32, i32* %static_dtor_flag, align 8, !dbg !4600
  %bf.lshr12 = lshr i32 %bf.load11, 14, !dbg !4600
  %bf.clear13 = and i32 %bf.lshr12, 1, !dbg !4600
  %conv14 = zext i32 %bf.clear13 to i64, !dbg !4600
  call void @bp_pack_value(%struct.bitpack_d* %7, i64 %conv14, i32 1), !dbg !4601
  %9 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4602
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4603
  %function_decl15 = bitcast %union.tree_node* %10 to %struct.tree_function_decl*, !dbg !4603
  %uninlinable = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl15, i32 0, i32 5, !dbg !4603
  %bf.load16 = load i32, i32* %uninlinable, align 8, !dbg !4603
  %bf.lshr17 = lshr i32 %bf.load16, 15, !dbg !4603
  %bf.clear18 = and i32 %bf.lshr17, 1, !dbg !4603
  %conv19 = zext i32 %bf.clear18 to i64, !dbg !4603
  call void @bp_pack_value(%struct.bitpack_d* %9, i64 %conv19, i32 1), !dbg !4604
  %11 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4605
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4606
  %function_decl20 = bitcast %union.tree_node* %12 to %struct.tree_function_decl*, !dbg !4606
  %possibly_inlined = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl20, i32 0, i32 5, !dbg !4606
  %bf.load21 = load i32, i32* %possibly_inlined, align 8, !dbg !4606
  %bf.lshr22 = lshr i32 %bf.load21, 16, !dbg !4606
  %bf.clear23 = and i32 %bf.lshr22, 1, !dbg !4606
  %conv24 = zext i32 %bf.clear23 to i64, !dbg !4606
  call void @bp_pack_value(%struct.bitpack_d* %11, i64 %conv24, i32 1), !dbg !4607
  %13 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4608
  %14 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4609
  %function_decl25 = bitcast %union.tree_node* %14 to %struct.tree_function_decl*, !dbg !4609
  %novops_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl25, i32 0, i32 5, !dbg !4609
  %bf.load26 = load i32, i32* %novops_flag, align 8, !dbg !4609
  %bf.lshr27 = lshr i32 %bf.load26, 17, !dbg !4609
  %bf.clear28 = and i32 %bf.lshr27, 1, !dbg !4609
  %conv29 = zext i32 %bf.clear28 to i64, !dbg !4609
  call void @bp_pack_value(%struct.bitpack_d* %13, i64 %conv29, i32 1), !dbg !4610
  %15 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4611
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4612
  %function_decl30 = bitcast %union.tree_node* %16 to %struct.tree_function_decl*, !dbg !4612
  %returns_twice_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl30, i32 0, i32 5, !dbg !4612
  %bf.load31 = load i32, i32* %returns_twice_flag, align 8, !dbg !4612
  %bf.lshr32 = lshr i32 %bf.load31, 18, !dbg !4612
  %bf.clear33 = and i32 %bf.lshr32, 1, !dbg !4612
  %conv34 = zext i32 %bf.clear33 to i64, !dbg !4612
  call void @bp_pack_value(%struct.bitpack_d* %15, i64 %conv34, i32 1), !dbg !4613
  %17 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4614
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4615
  %function_decl35 = bitcast %union.tree_node* %18 to %struct.tree_function_decl*, !dbg !4615
  %malloc_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl35, i32 0, i32 5, !dbg !4615
  %bf.load36 = load i32, i32* %malloc_flag, align 8, !dbg !4615
  %bf.lshr37 = lshr i32 %bf.load36, 19, !dbg !4615
  %bf.clear38 = and i32 %bf.lshr37, 1, !dbg !4615
  %conv39 = zext i32 %bf.clear38 to i64, !dbg !4615
  call void @bp_pack_value(%struct.bitpack_d* %17, i64 %conv39, i32 1), !dbg !4616
  %19 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4617
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4618
  %function_decl40 = bitcast %union.tree_node* %20 to %struct.tree_function_decl*, !dbg !4618
  %operator_new_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl40, i32 0, i32 5, !dbg !4618
  %bf.load41 = load i32, i32* %operator_new_flag, align 8, !dbg !4618
  %bf.lshr42 = lshr i32 %bf.load41, 20, !dbg !4618
  %bf.clear43 = and i32 %bf.lshr42, 1, !dbg !4618
  %conv44 = zext i32 %bf.clear43 to i64, !dbg !4618
  call void @bp_pack_value(%struct.bitpack_d* %19, i64 %conv44, i32 1), !dbg !4619
  %21 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4620
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4621
  %function_decl45 = bitcast %union.tree_node* %22 to %struct.tree_function_decl*, !dbg !4621
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl45, i32 0, i32 5, !dbg !4621
  %bf.load46 = load i32, i32* %declared_inline_flag, align 8, !dbg !4621
  %bf.lshr47 = lshr i32 %bf.load46, 21, !dbg !4621
  %bf.clear48 = and i32 %bf.lshr47, 1, !dbg !4621
  %conv49 = zext i32 %bf.clear48 to i64, !dbg !4621
  call void @bp_pack_value(%struct.bitpack_d* %21, i64 %conv49, i32 1), !dbg !4622
  %23 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4623
  %24 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4624
  %function_decl50 = bitcast %union.tree_node* %24 to %struct.tree_function_decl*, !dbg !4624
  %regdecl_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl50, i32 0, i32 5, !dbg !4624
  %bf.load51 = load i32, i32* %regdecl_flag, align 8, !dbg !4624
  %bf.lshr52 = lshr i32 %bf.load51, 22, !dbg !4624
  %bf.clear53 = and i32 %bf.lshr52, 1, !dbg !4624
  %conv54 = zext i32 %bf.clear53 to i64, !dbg !4624
  call void @bp_pack_value(%struct.bitpack_d* %23, i64 %conv54, i32 1), !dbg !4625
  %25 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4626
  %26 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4627
  %function_decl55 = bitcast %union.tree_node* %26 to %struct.tree_function_decl*, !dbg !4627
  %no_inline_warning_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl55, i32 0, i32 5, !dbg !4627
  %bf.load56 = load i32, i32* %no_inline_warning_flag, align 8, !dbg !4627
  %bf.lshr57 = lshr i32 %bf.load56, 23, !dbg !4627
  %bf.clear58 = and i32 %bf.lshr57, 1, !dbg !4627
  %conv59 = zext i32 %bf.clear58 to i64, !dbg !4627
  call void @bp_pack_value(%struct.bitpack_d* %25, i64 %conv59, i32 1), !dbg !4628
  %27 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4629
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4630
  %function_decl60 = bitcast %union.tree_node* %28 to %struct.tree_function_decl*, !dbg !4630
  %no_instrument_function_entry_exit = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl60, i32 0, i32 5, !dbg !4630
  %bf.load61 = load i32, i32* %no_instrument_function_entry_exit, align 8, !dbg !4630
  %bf.lshr62 = lshr i32 %bf.load61, 24, !dbg !4630
  %bf.clear63 = and i32 %bf.lshr62, 1, !dbg !4630
  %conv64 = zext i32 %bf.clear63 to i64, !dbg !4630
  call void @bp_pack_value(%struct.bitpack_d* %27, i64 %conv64, i32 1), !dbg !4631
  %29 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4632
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4633
  %function_decl65 = bitcast %union.tree_node* %30 to %struct.tree_function_decl*, !dbg !4633
  %no_limit_stack = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl65, i32 0, i32 5, !dbg !4633
  %bf.load66 = load i32, i32* %no_limit_stack, align 8, !dbg !4633
  %bf.lshr67 = lshr i32 %bf.load66, 25, !dbg !4633
  %bf.clear68 = and i32 %bf.lshr67, 1, !dbg !4633
  %conv69 = zext i32 %bf.clear68 to i64, !dbg !4633
  call void @bp_pack_value(%struct.bitpack_d* %29, i64 %conv69, i32 1), !dbg !4634
  %31 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4635
  %32 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4636
  %function_decl70 = bitcast %union.tree_node* %32 to %struct.tree_function_decl*, !dbg !4636
  %disregard_inline_limits = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl70, i32 0, i32 5, !dbg !4636
  %bf.load71 = load i32, i32* %disregard_inline_limits, align 8, !dbg !4636
  %bf.lshr72 = lshr i32 %bf.load71, 26, !dbg !4636
  %bf.clear73 = and i32 %bf.lshr72, 1, !dbg !4636
  %conv74 = zext i32 %bf.clear73 to i64, !dbg !4636
  call void @bp_pack_value(%struct.bitpack_d* %31, i64 %conv74, i32 1), !dbg !4637
  %33 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4638
  %34 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4639
  %function_decl75 = bitcast %union.tree_node* %34 to %struct.tree_function_decl*, !dbg !4639
  %pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl75, i32 0, i32 5, !dbg !4639
  %bf.load76 = load i32, i32* %pure_flag, align 8, !dbg !4639
  %bf.lshr77 = lshr i32 %bf.load76, 27, !dbg !4639
  %bf.clear78 = and i32 %bf.lshr77, 1, !dbg !4639
  %conv79 = zext i32 %bf.clear78 to i64, !dbg !4639
  call void @bp_pack_value(%struct.bitpack_d* %33, i64 %conv79, i32 1), !dbg !4640
  %35 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4641
  %36 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4642
  %function_decl80 = bitcast %union.tree_node* %36 to %struct.tree_function_decl*, !dbg !4642
  %looping_const_or_pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl80, i32 0, i32 5, !dbg !4642
  %bf.load81 = load i32, i32* %looping_const_or_pure_flag, align 8, !dbg !4642
  %bf.lshr82 = lshr i32 %bf.load81, 28, !dbg !4642
  %bf.clear83 = and i32 %bf.lshr82, 1, !dbg !4642
  %conv84 = zext i32 %bf.clear83 to i64, !dbg !4642
  call void @bp_pack_value(%struct.bitpack_d* %35, i64 %conv84, i32 1), !dbg !4643
  ret void, !dbg !4644
}

; Function Attrs: noinline nounwind uwtable
define internal void @pack_ts_type_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !4645 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !4646, metadata !DIExpression()), !dbg !4647
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4648, metadata !DIExpression()), !dbg !4649
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4650
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4651
  %type = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !4651
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !4651
  %bf.load = load i32, i32* %precision, align 4, !dbg !4651
  %bf.clear = and i32 %bf.load, 1023, !dbg !4651
  %conv = zext i32 %bf.clear to i64, !dbg !4651
  call void @bp_pack_value(%struct.bitpack_d* %0, i64 %conv, i32 9), !dbg !4652
  %2 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4653
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4654
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4654
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !4654
  %bf.load1 = load i64, i64* %4, align 8, !dbg !4654
  %bf.clear2 = and i64 %bf.load1, 65535, !dbg !4654
  %bf.cast = trunc i64 %bf.clear2 to i32, !dbg !4654
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !4654
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4654

cond.true:                                        ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4654
  %call = call i32 @vector_type_mode(%union.tree_node* %5), !dbg !4654
  br label %cond.end, !dbg !4654

cond.false:                                       ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4654
  %type4 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !4654
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 6, !dbg !4654
  %bf.load5 = load i32, i32* %mode, align 4, !dbg !4654
  %bf.lshr = lshr i32 %bf.load5, 16, !dbg !4654
  %bf.clear6 = and i32 %bf.lshr, 255, !dbg !4654
  br label %cond.end, !dbg !4654

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear6, %cond.false ], !dbg !4654
  %conv7 = zext i32 %cond to i64, !dbg !4654
  call void @bp_pack_value(%struct.bitpack_d* %2, i64 %conv7, i32 7), !dbg !4655
  %7 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4656
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4657
  %type8 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !4657
  %string_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6, !dbg !4657
  %bf.load9 = load i32, i32* %string_flag, align 4, !dbg !4657
  %bf.lshr10 = lshr i32 %bf.load9, 24, !dbg !4657
  %bf.clear11 = and i32 %bf.lshr10, 1, !dbg !4657
  %conv12 = zext i32 %bf.clear11 to i64, !dbg !4657
  call void @bp_pack_value(%struct.bitpack_d* %7, i64 %conv12, i32 1), !dbg !4658
  %9 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4659
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4660
  %type13 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !4660
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 6, !dbg !4660
  %bf.load14 = load i32, i32* %no_force_blk_flag, align 4, !dbg !4660
  %bf.lshr15 = lshr i32 %bf.load14, 10, !dbg !4660
  %bf.clear16 = and i32 %bf.lshr15, 1, !dbg !4660
  %conv17 = zext i32 %bf.clear16 to i64, !dbg !4660
  call void @bp_pack_value(%struct.bitpack_d* %9, i64 %conv17, i32 1), !dbg !4661
  %11 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4662
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4663
  %type18 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !4663
  %needs_constructing_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 6, !dbg !4663
  %bf.load19 = load i32, i32* %needs_constructing_flag, align 4, !dbg !4663
  %bf.lshr20 = lshr i32 %bf.load19, 11, !dbg !4663
  %bf.clear21 = and i32 %bf.lshr20, 1, !dbg !4663
  %conv22 = zext i32 %bf.clear21 to i64, !dbg !4663
  call void @bp_pack_value(%struct.bitpack_d* %11, i64 %conv22, i32 1), !dbg !4664
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4665
  %base23 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4665
  %14 = bitcast %struct.tree_base* %base23 to i64*, !dbg !4665
  %bf.load24 = load i64, i64* %14, align 8, !dbg !4665
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !4665
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !4665
  %cmp27 = icmp eq i32 %bf.cast26, 17, !dbg !4667
  br i1 %cmp27, label %if.then, label %lor.lhs.false, !dbg !4668

lor.lhs.false:                                    ; preds = %cond.end
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4669
  %base29 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !4669
  %16 = bitcast %struct.tree_base* %base29 to i64*, !dbg !4669
  %bf.load30 = load i64, i64* %16, align 8, !dbg !4669
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !4669
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !4669
  %cmp33 = icmp eq i32 %bf.cast32, 16, !dbg !4670
  br i1 %cmp33, label %if.then, label %if.end, !dbg !4671

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %17 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4672
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4673
  %type35 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !4673
  %transparent_aggr_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type35, i32 0, i32 6, !dbg !4673
  %bf.load36 = load i32, i32* %transparent_aggr_flag, align 4, !dbg !4673
  %bf.lshr37 = lshr i32 %bf.load36, 12, !dbg !4673
  %bf.clear38 = and i32 %bf.lshr37, 1, !dbg !4673
  %conv39 = zext i32 %bf.clear38 to i64, !dbg !4673
  call void @bp_pack_value(%struct.bitpack_d* %17, i64 %conv39, i32 1), !dbg !4674
  br label %if.end, !dbg !4674

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %19 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4675
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4676
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !4676
  %base40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !4676
  %21 = bitcast %struct.tree_base* %base40 to i64*, !dbg !4676
  %bf.load41 = load i64, i64* %21, align 8, !dbg !4676
  %bf.lshr42 = lshr i64 %bf.load41, 41, !dbg !4676
  %bf.clear43 = and i64 %bf.lshr42, 1, !dbg !4676
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !4676
  %conv45 = zext i32 %bf.cast44 to i64, !dbg !4676
  call void @bp_pack_value(%struct.bitpack_d* %19, i64 %conv45, i32 1), !dbg !4677
  %22 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4678
  %23 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4679
  %type46 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !4679
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type46, i32 0, i32 6, !dbg !4679
  %bf.load47 = load i32, i32* %restrict_flag, align 4, !dbg !4679
  %bf.lshr48 = lshr i32 %bf.load47, 13, !dbg !4679
  %bf.clear49 = and i32 %bf.lshr48, 1, !dbg !4679
  %conv50 = zext i32 %bf.clear49 to i64, !dbg !4679
  call void @bp_pack_value(%struct.bitpack_d* %22, i64 %conv50, i32 1), !dbg !4680
  %24 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4681
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4682
  %type51 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !4682
  %contains_placeholder_bits = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type51, i32 0, i32 6, !dbg !4682
  %bf.load52 = load i32, i32* %contains_placeholder_bits, align 4, !dbg !4682
  %bf.lshr53 = lshr i32 %bf.load52, 14, !dbg !4682
  %bf.clear54 = and i32 %bf.lshr53, 3, !dbg !4682
  %conv55 = zext i32 %bf.clear54 to i64, !dbg !4682
  call void @bp_pack_value(%struct.bitpack_d* %24, i64 %conv55, i32 2), !dbg !4683
  %26 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4684
  %27 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4685
  %common56 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !4685
  %base57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 0, !dbg !4685
  %28 = bitcast %struct.tree_base* %base57 to i64*, !dbg !4685
  %bf.load58 = load i64, i64* %28, align 8, !dbg !4685
  %bf.lshr59 = lshr i64 %bf.load58, 42, !dbg !4685
  %bf.clear60 = and i64 %bf.lshr59, 1, !dbg !4685
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !4685
  %conv62 = zext i32 %bf.cast61 to i64, !dbg !4685
  call void @bp_pack_value(%struct.bitpack_d* %26, i64 %conv62, i32 1), !dbg !4686
  %29 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4687
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4688
  %base63 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !4688
  %31 = bitcast %struct.tree_base* %base63 to i64*, !dbg !4688
  %bf.load64 = load i64, i64* %31, align 8, !dbg !4688
  %bf.lshr65 = lshr i64 %bf.load64, 20, !dbg !4688
  %bf.clear66 = and i64 %bf.lshr65, 1, !dbg !4688
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !4688
  %conv68 = zext i32 %bf.cast67 to i64, !dbg !4688
  call void @bp_pack_value(%struct.bitpack_d* %29, i64 %conv68, i32 1), !dbg !4689
  %32 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4690
  %33 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4691
  %type69 = bitcast %union.tree_node* %33 to %struct.tree_type*, !dbg !4691
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type69, i32 0, i32 7, !dbg !4691
  %34 = load i32, i32* %align, align 8, !dbg !4691
  %conv70 = zext i32 %34 to i64, !dbg !4691
  call void @bp_pack_value(%struct.bitpack_d* %32, i64 %conv70, i32 32), !dbg !4692
  %35 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4693
  %36 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4694
  %type71 = bitcast %union.tree_node* %36 to %struct.tree_type*, !dbg !4694
  %alias_set = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type71, i32 0, i32 8, !dbg !4694
  %37 = load i32, i32* %alias_set, align 4, !dbg !4694
  %cmp72 = icmp eq i32 %37, 0, !dbg !4695
  %38 = zext i1 %cmp72 to i64, !dbg !4694
  %cond74 = select i1 %cmp72, i32 0, i32 -1, !dbg !4694
  %conv75 = sext i32 %cond74 to i64, !dbg !4694
  call void @bp_pack_value(%struct.bitpack_d* %35, i64 %conv75, i32 32), !dbg !4696
  ret void, !dbg !4697
}

; Function Attrs: noinline nounwind uwtable
define internal void @pack_ts_block_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !4698 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !4699, metadata !DIExpression()), !dbg !4700
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4701, metadata !DIExpression()), !dbg !4702
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4703
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4704
  %block = bitcast %union.tree_node* %1 to %struct.tree_block*, !dbg !4704
  %abstract_flag = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 1, !dbg !4704
  %bf.load = load i32, i32* %abstract_flag, align 8, !dbg !4704
  %bf.clear = and i32 %bf.load, 1, !dbg !4704
  %conv = zext i32 %bf.clear to i64, !dbg !4704
  call void @bp_pack_value(%struct.bitpack_d* %0, i64 %conv, i32 1), !dbg !4705
  %2 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !4706
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4707
  %block1 = bitcast %union.tree_node* %3 to %struct.tree_block*, !dbg !4707
  %block_num = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 1, !dbg !4707
  %bf.load2 = load i32, i32* %block_num, align 8, !dbg !4707
  %bf.lshr = lshr i32 %bf.load2, 1, !dbg !4707
  %conv3 = zext i32 %bf.lshr to i64, !dbg !4707
  call void @bp_pack_value(%struct.bitpack_d* %2, i64 %conv3, i32 31), !dbg !4708
  ret void, !dbg !4709
}

declare dso_local void @bp_pack_value(%struct.bitpack_d*, i64, i32) #2

declare dso_local zeroext i16 @decl_init_priority_lookup(%union.tree_node*) #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_common_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !4710 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4711, metadata !DIExpression()), !dbg !4712
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4713, metadata !DIExpression()), !dbg !4714
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !4715, metadata !DIExpression()), !dbg !4716
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4717
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4718
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !4718
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4718
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4718
  %3 = load i8, i8* %ref_p.addr, align 1, !dbg !4719
  call void @lto_output_tree_or_ref(%struct.output_block* %0, %union.tree_node* %2, i8 zeroext %3), !dbg !4720
  ret void, !dbg !4721
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_vector_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !4722 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4723, metadata !DIExpression()), !dbg !4724
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4725, metadata !DIExpression()), !dbg !4726
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !4727, metadata !DIExpression()), !dbg !4728
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4729
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4730
  %vector = bitcast %union.tree_node* %1 to %struct.tree_vector*, !dbg !4730
  %elements = getelementptr inbounds %struct.tree_vector, %struct.tree_vector* %vector, i32 0, i32 1, !dbg !4730
  %2 = load %union.tree_node*, %union.tree_node** %elements, align 8, !dbg !4730
  %3 = load i8, i8* %ref_p.addr, align 1, !dbg !4731
  call void @lto_output_chain(%struct.output_block* %0, %union.tree_node* %2, i8 zeroext %3), !dbg !4732
  ret void, !dbg !4733
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_complex_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !4734 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4735, metadata !DIExpression()), !dbg !4736
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4737, metadata !DIExpression()), !dbg !4738
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !4739, metadata !DIExpression()), !dbg !4740
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4741
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4742
  %complex = bitcast %union.tree_node* %1 to %struct.tree_complex*, !dbg !4742
  %real = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex, i32 0, i32 1, !dbg !4742
  %2 = load %union.tree_node*, %union.tree_node** %real, align 8, !dbg !4742
  %3 = load i8, i8* %ref_p.addr, align 1, !dbg !4743
  call void @lto_output_tree_or_ref(%struct.output_block* %0, %union.tree_node* %2, i8 zeroext %3), !dbg !4744
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4745
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4746
  %complex1 = bitcast %union.tree_node* %5 to %struct.tree_complex*, !dbg !4746
  %imag = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex1, i32 0, i32 2, !dbg !4746
  %6 = load %union.tree_node*, %union.tree_node** %imag, align 8, !dbg !4746
  %7 = load i8, i8* %ref_p.addr, align 1, !dbg !4747
  call void @lto_output_tree_or_ref(%struct.output_block* %4, %union.tree_node* %6, i8 zeroext %7), !dbg !4748
  ret void, !dbg !4749
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_decl_minimal_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !4750 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4751, metadata !DIExpression()), !dbg !4752
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4753, metadata !DIExpression()), !dbg !4754
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !4755, metadata !DIExpression()), !dbg !4756
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4757
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4758
  %decl_minimal = bitcast %union.tree_node* %1 to %struct.tree_decl_minimal*, !dbg !4758
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !4758
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4758
  %3 = load i8, i8* %ref_p.addr, align 1, !dbg !4759
  call void @lto_output_tree_or_ref(%struct.output_block* %0, %union.tree_node* %2, i8 zeroext %3), !dbg !4760
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4761
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4762
  %decl_minimal1 = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !4762
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal1, i32 0, i32 4, !dbg !4762
  %6 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4762
  %7 = load i8, i8* %ref_p.addr, align 1, !dbg !4763
  call void @lto_output_tree_or_ref(%struct.output_block* %4, %union.tree_node* %6, i8 zeroext %7), !dbg !4764
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4765
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4766
  %decl_minimal2 = bitcast %union.tree_node* %9 to %struct.tree_decl_minimal*, !dbg !4766
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal2, i32 0, i32 1, !dbg !4766
  %10 = load i32, i32* %locus, align 8, !dbg !4766
  call void @lto_output_location(%struct.output_block* %8, i32 %10), !dbg !4767
  ret void, !dbg !4768
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_decl_common_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !4769 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4770, metadata !DIExpression()), !dbg !4771
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4772, metadata !DIExpression()), !dbg !4773
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !4774, metadata !DIExpression()), !dbg !4775
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4776
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4777
  %decl_common = bitcast %union.tree_node* %1 to %struct.tree_decl_common*, !dbg !4777
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !4777
  %2 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !4777
  %3 = load i8, i8* %ref_p.addr, align 1, !dbg !4778
  call void @lto_output_tree_or_ref(%struct.output_block* %0, %union.tree_node* %2, i8 zeroext %3), !dbg !4779
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4780
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4781
  %decl_common1 = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !4781
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1, i32 0, i32 4, !dbg !4781
  %6 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4781
  %7 = load i8, i8* %ref_p.addr, align 1, !dbg !4782
  call void @lto_output_tree_or_ref(%struct.output_block* %4, %union.tree_node* %6, i8 zeroext %7), !dbg !4783
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4784
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4784
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !4784
  %bf.load = load i64, i64* %9, align 8, !dbg !4784
  %bf.clear = and i64 %bf.load, 65535, !dbg !4784
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4784
  %cmp = icmp ne i32 %bf.cast, 29, !dbg !4786
  br i1 %cmp, label %if.then, label %if.end, !dbg !4787

if.then:                                          ; preds = %entry
  %10 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4788
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4789
  %decl_common2 = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !4789
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common2, i32 0, i32 5, !dbg !4789
  %12 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !4789
  %13 = load i8, i8* %ref_p.addr, align 1, !dbg !4790
  call void @lto_output_tree_or_ref(%struct.output_block* %10, %union.tree_node* %12, i8 zeroext %13), !dbg !4791
  br label %if.end, !dbg !4791

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4792
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4793
  %decl_common3 = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !4793
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common3, i32 0, i32 6, !dbg !4793
  %16 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !4793
  %17 = load i8, i8* %ref_p.addr, align 1, !dbg !4794
  call void @lto_output_tree_or_ref(%struct.output_block* %14, %union.tree_node* %16, i8 zeroext %17), !dbg !4795
  %18 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4796
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4797
  %decl_common4 = bitcast %union.tree_node* %19 to %struct.tree_decl_common*, !dbg !4797
  %abstract_origin = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common4, i32 0, i32 7, !dbg !4797
  %20 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !4797
  %21 = load i8, i8* %ref_p.addr, align 1, !dbg !4798
  call void @lto_output_tree_or_ref(%struct.output_block* %18, %union.tree_node* %20, i8 zeroext %21), !dbg !4799
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4800
  %base5 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4800
  %23 = bitcast %struct.tree_base* %base5 to i64*, !dbg !4800
  %bf.load6 = load i64, i64* %23, align 8, !dbg !4800
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !4800
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !4800
  %cmp9 = icmp eq i32 %bf.cast8, 34, !dbg !4802
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !4803

if.then10:                                        ; preds = %if.end
  %24 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4804
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4805
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !4805
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4805
  %26 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4805
  %27 = load i8, i8* %ref_p.addr, align 1, !dbg !4806
  call void @lto_output_chain(%struct.output_block* %24, %union.tree_node* %26, i8 zeroext %27), !dbg !4807
  br label %if.end11, !dbg !4807

if.end11:                                         ; preds = %if.then10, %if.end
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4808
  %base12 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !4808
  %29 = bitcast %struct.tree_base* %base12 to i64*, !dbg !4808
  %bf.load13 = load i64, i64* %29, align 8, !dbg !4808
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !4808
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !4808
  %cmp16 = icmp eq i32 %bf.cast15, 32, !dbg !4810
  br i1 %cmp16, label %land.lhs.true, label %lor.lhs.false, !dbg !4811

lor.lhs.false:                                    ; preds = %if.end11
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4812
  %base17 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !4812
  %31 = bitcast %struct.tree_base* %base17 to i64*, !dbg !4812
  %bf.load18 = load i64, i64* %31, align 8, !dbg !4812
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !4812
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !4812
  %cmp21 = icmp eq i32 %bf.cast20, 34, !dbg !4813
  br i1 %cmp21, label %land.lhs.true, label %if.end27, !dbg !4814

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end11
  %32 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4815
  %decl_common22 = bitcast %union.tree_node* %32 to %struct.tree_decl_common*, !dbg !4815
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common22, i32 0, i32 2, !dbg !4815
  %33 = bitcast i40* %decl_flag_2 to i64*, !dbg !4815
  %bf.load23 = load i64, i64* %33, align 8, !dbg !4815
  %bf.lshr = lshr i64 %bf.load23, 26, !dbg !4815
  %bf.clear24 = and i64 %bf.lshr, 1, !dbg !4815
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !4815
  %tobool = icmp ne i32 %bf.cast25, 0, !dbg !4815
  br i1 %tobool, label %if.then26, label %if.end27, !dbg !4816

if.then26:                                        ; preds = %land.lhs.true
  %34 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4817
  %35 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4818
  %call = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %35), !dbg !4818
  %36 = load i8, i8* %ref_p.addr, align 1, !dbg !4819
  call void @lto_output_tree_or_ref(%struct.output_block* %34, %union.tree_node* %call, i8 zeroext %36), !dbg !4820
  br label %if.end27, !dbg !4820

if.end27:                                         ; preds = %if.then26, %land.lhs.true, %lor.lhs.false
  ret void, !dbg !4821
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_decl_non_common_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !4822 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4823, metadata !DIExpression()), !dbg !4824
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4825, metadata !DIExpression()), !dbg !4826
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !4827, metadata !DIExpression()), !dbg !4828
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4829
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4829
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4829
  %bf.load = load i64, i64* %1, align 8, !dbg !4829
  %bf.clear = and i64 %bf.load, 65535, !dbg !4829
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4829
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !4831
  br i1 %cmp, label %if.then, label %if.end, !dbg !4832

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4833
  %decl_non_common = bitcast %union.tree_node* %2 to %struct.tree_decl_non_common*, !dbg !4833
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 1, !dbg !4833
  %3 = load %union.tree_node*, %union.tree_node** %saved_tree, align 8, !dbg !4833
  %cmp1 = icmp eq %union.tree_node* %3, null, !dbg !4833
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !4833

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 876, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4833
  br label %cond.end, !dbg !4833

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !4833

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4833
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4835
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4836
  %decl_non_common2 = bitcast %union.tree_node* %5 to %struct.tree_decl_non_common*, !dbg !4836
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common2, i32 0, i32 2, !dbg !4836
  %6 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !4836
  %7 = load i8, i8* %ref_p.addr, align 1, !dbg !4837
  call void @lto_output_tree_or_ref(%struct.output_block* %4, %union.tree_node* %6, i8 zeroext %7), !dbg !4838
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4839
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4840
  %decl_non_common3 = bitcast %union.tree_node* %9 to %struct.tree_decl_non_common*, !dbg !4840
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common3, i32 0, i32 3, !dbg !4840
  %10 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4840
  %11 = load i8, i8* %ref_p.addr, align 1, !dbg !4841
  call void @lto_output_tree_or_ref(%struct.output_block* %8, %union.tree_node* %10, i8 zeroext %11), !dbg !4842
  br label %if.end, !dbg !4843

if.end:                                           ; preds = %cond.end, %entry
  %12 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4844
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4845
  %decl_non_common4 = bitcast %union.tree_node* %13 to %struct.tree_decl_non_common*, !dbg !4845
  %vindex = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common4, i32 0, i32 4, !dbg !4845
  %14 = load %union.tree_node*, %union.tree_node** %vindex, align 8, !dbg !4845
  %15 = load i8, i8* %ref_p.addr, align 1, !dbg !4846
  call void @lto_output_tree_or_ref(%struct.output_block* %12, %union.tree_node* %14, i8 zeroext %15), !dbg !4847
  ret void, !dbg !4848
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_decl_with_vis_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !4849 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4850, metadata !DIExpression()), !dbg !4851
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4852, metadata !DIExpression()), !dbg !4853
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !4854, metadata !DIExpression()), !dbg !4855
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4856
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4856
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4856
  %bf.load = load i64, i64* %1, align 8, !dbg !4856
  %bf.clear = and i64 %bf.load, 65535, !dbg !4856
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4856
  %idxprom = zext i32 %bf.cast to i64, !dbg !4856
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !4856
  %arrayidx1 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 13, !dbg !4856
  %2 = load i8, i8* %arrayidx1, align 1, !dbg !4856
  %conv = zext i8 %2 to i32, !dbg !4856
  %tobool = icmp ne i32 %conv, 0, !dbg !4856
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4856

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4856
  %decl_with_vis = bitcast %union.tree_node* %3 to %struct.tree_decl_with_vis*, !dbg !4856
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 1, !dbg !4856
  %4 = load %union.tree_node*, %union.tree_node** %assembler_name, align 8, !dbg !4856
  %cmp = icmp ne %union.tree_node* %4, null, !dbg !4856
  br i1 %cmp, label %if.then, label %if.else, !dbg !4858

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4859
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4860
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %6), !dbg !4860
  %7 = load i8, i8* %ref_p.addr, align 1, !dbg !4861
  call void @lto_output_tree_or_ref(%struct.output_block* %5, %union.tree_node* %call, i8 zeroext %7), !dbg !4862
  br label %if.end, !dbg !4862

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4863
  call void @output_zero(%struct.output_block* %8), !dbg !4864
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4865
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4866
  %decl_with_vis3 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_vis*, !dbg !4866
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis3, i32 0, i32 2, !dbg !4866
  %11 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !4866
  %12 = load i8, i8* %ref_p.addr, align 1, !dbg !4867
  call void @lto_output_tree_or_ref(%struct.output_block* %9, %union.tree_node* %11, i8 zeroext %12), !dbg !4868
  %13 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4869
  %14 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4870
  %decl_with_vis4 = bitcast %union.tree_node* %14 to %struct.tree_decl_with_vis*, !dbg !4870
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis4, i32 0, i32 3, !dbg !4870
  %15 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !4870
  %16 = load i8, i8* %ref_p.addr, align 1, !dbg !4871
  call void @lto_output_tree_or_ref(%struct.output_block* %13, %union.tree_node* %15, i8 zeroext %16), !dbg !4872
  ret void, !dbg !4873
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_field_decl_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !4874 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4875, metadata !DIExpression()), !dbg !4876
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4877, metadata !DIExpression()), !dbg !4878
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !4879, metadata !DIExpression()), !dbg !4880
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4881
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4882
  %field_decl = bitcast %union.tree_node* %1 to %struct.tree_field_decl*, !dbg !4882
  %offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !4882
  %2 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4882
  %3 = load i8, i8* %ref_p.addr, align 1, !dbg !4883
  call void @lto_output_tree_or_ref(%struct.output_block* %0, %union.tree_node* %2, i8 zeroext %3), !dbg !4884
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4885
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4886
  %field_decl1 = bitcast %union.tree_node* %5 to %struct.tree_field_decl*, !dbg !4886
  %bit_field_type = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl1, i32 0, i32 2, !dbg !4886
  %6 = load %union.tree_node*, %union.tree_node** %bit_field_type, align 8, !dbg !4886
  %7 = load i8, i8* %ref_p.addr, align 1, !dbg !4887
  call void @lto_output_tree_or_ref(%struct.output_block* %4, %union.tree_node* %6, i8 zeroext %7), !dbg !4888
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4889
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4890
  %field_decl2 = bitcast %union.tree_node* %9 to %struct.tree_field_decl*, !dbg !4890
  %qualifier = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl2, i32 0, i32 3, !dbg !4890
  %10 = load %union.tree_node*, %union.tree_node** %qualifier, align 8, !dbg !4890
  %11 = load i8, i8* %ref_p.addr, align 1, !dbg !4891
  call void @lto_output_tree_or_ref(%struct.output_block* %8, %union.tree_node* %10, i8 zeroext %11), !dbg !4892
  %12 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4893
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4894
  %field_decl3 = bitcast %union.tree_node* %13 to %struct.tree_field_decl*, !dbg !4894
  %bit_offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl3, i32 0, i32 4, !dbg !4894
  %14 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8, !dbg !4894
  %15 = load i8, i8* %ref_p.addr, align 1, !dbg !4895
  call void @lto_output_tree_or_ref(%struct.output_block* %12, %union.tree_node* %14, i8 zeroext %15), !dbg !4896
  %16 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4897
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4898
  %field_decl4 = bitcast %union.tree_node* %17 to %struct.tree_field_decl*, !dbg !4898
  %fcontext = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl4, i32 0, i32 5, !dbg !4898
  %18 = load %union.tree_node*, %union.tree_node** %fcontext, align 8, !dbg !4898
  %19 = load i8, i8* %ref_p.addr, align 1, !dbg !4899
  call void @lto_output_tree_or_ref(%struct.output_block* %16, %union.tree_node* %18, i8 zeroext %19), !dbg !4900
  %20 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4901
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4902
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !4902
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4902
  %22 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4902
  %23 = load i8, i8* %ref_p.addr, align 1, !dbg !4903
  call void @lto_output_chain(%struct.output_block* %20, %union.tree_node* %22, i8 zeroext %23), !dbg !4904
  ret void, !dbg !4905
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_function_decl_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !4906 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4907, metadata !DIExpression()), !dbg !4908
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4909, metadata !DIExpression()), !dbg !4910
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !4911, metadata !DIExpression()), !dbg !4912
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4913
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4914
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !4914
  %personality = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 2, !dbg !4914
  %2 = load %union.tree_node*, %union.tree_node** %personality, align 8, !dbg !4914
  %3 = load i8, i8* %ref_p.addr, align 1, !dbg !4915
  call void @lto_output_tree_or_ref(%struct.output_block* %0, %union.tree_node* %2, i8 zeroext %3), !dbg !4916
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4917
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4918
  %function_decl1 = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !4918
  %function_specific_target = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl1, i32 0, i32 3, !dbg !4918
  %6 = load %union.tree_node*, %union.tree_node** %function_specific_target, align 8, !dbg !4918
  %7 = load i8, i8* %ref_p.addr, align 1, !dbg !4919
  call void @lto_output_tree_or_ref(%struct.output_block* %4, %union.tree_node* %6, i8 zeroext %7), !dbg !4920
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4921
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4922
  %function_decl2 = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !4922
  %function_specific_optimization = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl2, i32 0, i32 4, !dbg !4922
  %10 = load %union.tree_node*, %union.tree_node** %function_specific_optimization, align 8, !dbg !4922
  %11 = load i8, i8* %ref_p.addr, align 1, !dbg !4923
  call void @lto_output_tree_or_ref(%struct.output_block* %8, %union.tree_node* %10, i8 zeroext %11), !dbg !4924
  ret void, !dbg !4925
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_type_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !4926 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !4927, metadata !DIExpression()), !dbg !4928
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4929, metadata !DIExpression()), !dbg !4930
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !4931, metadata !DIExpression()), !dbg !4932
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4933
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4933
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4933
  %bf.load = load i64, i64* %1, align 8, !dbg !4933
  %bf.clear = and i64 %bf.load, 65535, !dbg !4933
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4933
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !4935
  br i1 %cmp, label %if.then, label %if.else, !dbg !4936

if.then:                                          ; preds = %entry
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4937
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4938
  %type = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !4938
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 1, !dbg !4938
  %4 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4938
  %5 = load i8, i8* %ref_p.addr, align 1, !dbg !4939
  call void @lto_output_tree_or_ref(%struct.output_block* %2, %union.tree_node* %4, i8 zeroext %5), !dbg !4940
  br label %if.end50, !dbg !4940

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4941
  %base1 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4941
  %7 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4941
  %bf.load2 = load i64, i64* %7, align 8, !dbg !4941
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4941
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4941
  %cmp5 = icmp eq i32 %bf.cast4, 15, !dbg !4943
  br i1 %cmp5, label %if.then6, label %if.else9, !dbg !4944

if.then6:                                         ; preds = %if.else
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4945
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4946
  %type7 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !4946
  %values8 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 1, !dbg !4946
  %10 = load %union.tree_node*, %union.tree_node** %values8, align 8, !dbg !4946
  %11 = load i8, i8* %ref_p.addr, align 1, !dbg !4947
  call void @lto_output_tree_or_ref(%struct.output_block* %8, %union.tree_node* %10, i8 zeroext %11), !dbg !4948
  br label %if.end49, !dbg !4948

if.else9:                                         ; preds = %if.else
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4949
  %base10 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !4949
  %13 = bitcast %struct.tree_base* %base10 to i64*, !dbg !4949
  %bf.load11 = load i64, i64* %13, align 8, !dbg !4949
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !4949
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !4949
  %cmp14 = icmp eq i32 %bf.cast13, 16, !dbg !4951
  br i1 %cmp14, label %if.then20, label %lor.lhs.false, !dbg !4952

lor.lhs.false:                                    ; preds = %if.else9
  %14 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4953
  %base15 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !4953
  %15 = bitcast %struct.tree_base* %base15 to i64*, !dbg !4953
  %bf.load16 = load i64, i64* %15, align 8, !dbg !4953
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !4953
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !4953
  %cmp19 = icmp eq i32 %bf.cast18, 17, !dbg !4954
  br i1 %cmp19, label %if.then20, label %if.else23, !dbg !4955

if.then20:                                        ; preds = %lor.lhs.false, %if.else9
  %16 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4956
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4957
  %type21 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !4957
  %values22 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type21, i32 0, i32 1, !dbg !4957
  %18 = load %union.tree_node*, %union.tree_node** %values22, align 8, !dbg !4957
  %19 = load i8, i8* %ref_p.addr, align 1, !dbg !4958
  call void @lto_output_tree_or_ref(%struct.output_block* %16, %union.tree_node* %18, i8 zeroext %19), !dbg !4959
  br label %if.end48, !dbg !4959

if.else23:                                        ; preds = %lor.lhs.false
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4960
  %base24 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !4960
  %21 = bitcast %struct.tree_base* %base24 to i64*, !dbg !4960
  %bf.load25 = load i64, i64* %21, align 8, !dbg !4960
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !4960
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !4960
  %cmp28 = icmp eq i32 %bf.cast27, 20, !dbg !4962
  br i1 %cmp28, label %if.then35, label %lor.lhs.false29, !dbg !4963

lor.lhs.false29:                                  ; preds = %if.else23
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4964
  %base30 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4964
  %23 = bitcast %struct.tree_base* %base30 to i64*, !dbg !4964
  %bf.load31 = load i64, i64* %23, align 8, !dbg !4964
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !4964
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !4964
  %cmp34 = icmp eq i32 %bf.cast33, 21, !dbg !4965
  br i1 %cmp34, label %if.then35, label %if.else38, !dbg !4966

if.then35:                                        ; preds = %lor.lhs.false29, %if.else23
  %24 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4967
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4968
  %type36 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !4968
  %values37 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 1, !dbg !4968
  %26 = load %union.tree_node*, %union.tree_node** %values37, align 8, !dbg !4968
  %27 = load i8, i8* %ref_p.addr, align 1, !dbg !4969
  call void @lto_output_tree_or_ref(%struct.output_block* %24, %union.tree_node* %26, i8 zeroext %27), !dbg !4970
  br label %if.end47, !dbg !4970

if.else38:                                        ; preds = %lor.lhs.false29
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4971
  %base39 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !4971
  %29 = bitcast %struct.tree_base* %base39 to i64*, !dbg !4971
  %bf.load40 = load i64, i64* %29, align 8, !dbg !4971
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !4971
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !4971
  %cmp43 = icmp eq i32 %bf.cast42, 14, !dbg !4973
  br i1 %cmp43, label %if.then44, label %if.end, !dbg !4974

if.then44:                                        ; preds = %if.else38
  %30 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4975
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4976
  %type45 = bitcast %union.tree_node* %31 to %struct.tree_type*, !dbg !4976
  %values46 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type45, i32 0, i32 1, !dbg !4976
  %32 = load %union.tree_node*, %union.tree_node** %values46, align 8, !dbg !4976
  %33 = load i8, i8* %ref_p.addr, align 1, !dbg !4977
  call void @lto_output_tree_or_ref(%struct.output_block* %30, %union.tree_node* %32, i8 zeroext %33), !dbg !4978
  br label %if.end, !dbg !4978

if.end:                                           ; preds = %if.then44, %if.else38
  br label %if.end47

if.end47:                                         ; preds = %if.end, %if.then35
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then20
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then6
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then
  %34 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4979
  %35 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4980
  %type51 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !4980
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type51, i32 0, i32 2, !dbg !4980
  %36 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !4980
  %37 = load i8, i8* %ref_p.addr, align 1, !dbg !4981
  call void @lto_output_tree_or_ref(%struct.output_block* %34, %union.tree_node* %36, i8 zeroext %37), !dbg !4982
  %38 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4983
  %39 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4984
  %type52 = bitcast %union.tree_node* %39 to %struct.tree_type*, !dbg !4984
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type52, i32 0, i32 3, !dbg !4984
  %40 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4984
  %41 = load i8, i8* %ref_p.addr, align 1, !dbg !4985
  call void @lto_output_tree_or_ref(%struct.output_block* %38, %union.tree_node* %40, i8 zeroext %41), !dbg !4986
  %42 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4987
  %43 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4988
  %type53 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !4988
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type53, i32 0, i32 4, !dbg !4988
  %44 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !4988
  %45 = load i8, i8* %ref_p.addr, align 1, !dbg !4989
  call void @lto_output_tree_or_ref(%struct.output_block* %42, %union.tree_node* %44, i8 zeroext %45), !dbg !4990
  %46 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4991
  %47 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4992
  %type54 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !4992
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type54, i32 0, i32 12, !dbg !4992
  %48 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4992
  %49 = load i8, i8* %ref_p.addr, align 1, !dbg !4993
  call void @lto_output_tree_or_ref(%struct.output_block* %46, %union.tree_node* %48, i8 zeroext %49), !dbg !4994
  %50 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4995
  %base55 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !4995
  %51 = bitcast %struct.tree_base* %base55 to i64*, !dbg !4995
  %bf.load56 = load i64, i64* %51, align 8, !dbg !4995
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !4995
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !4995
  %cmp59 = icmp eq i32 %bf.cast58, 10, !dbg !4995
  br i1 %cmp59, label %if.end68, label %lor.lhs.false60, !dbg !4995

lor.lhs.false60:                                  ; preds = %if.end50
  %52 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4995
  %base61 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !4995
  %53 = bitcast %struct.tree_base* %base61 to i64*, !dbg !4995
  %bf.load62 = load i64, i64* %53, align 8, !dbg !4995
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !4995
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !4995
  %cmp65 = icmp eq i32 %bf.cast64, 12, !dbg !4995
  br i1 %cmp65, label %if.end68, label %if.then66, !dbg !4997

if.then66:                                        ; preds = %lor.lhs.false60
  %54 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !4998
  %55 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4999
  %type67 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !4999
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type67, i32 0, i32 13, !dbg !4999
  %56 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !4999
  %57 = load i8, i8* %ref_p.addr, align 1, !dbg !5000
  call void @lto_output_tree_or_ref(%struct.output_block* %54, %union.tree_node* %56, i8 zeroext %57), !dbg !5001
  br label %if.end68, !dbg !5001

if.end68:                                         ; preds = %if.then66, %lor.lhs.false60, %if.end50
  %58 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5002
  %59 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5003
  %type69 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !5003
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type69, i32 0, i32 14, !dbg !5003
  %60 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !5003
  %61 = load i8, i8* %ref_p.addr, align 1, !dbg !5004
  call void @lto_output_tree_or_ref(%struct.output_block* %58, %union.tree_node* %60, i8 zeroext %61), !dbg !5005
  %62 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5006
  %63 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5007
  %type70 = bitcast %union.tree_node* %63 to %struct.tree_type*, !dbg !5007
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type70, i32 0, i32 16, !dbg !5007
  %64 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !5007
  %65 = load i8, i8* %ref_p.addr, align 1, !dbg !5008
  call void @lto_output_tree_or_ref(%struct.output_block* %62, %union.tree_node* %64, i8 zeroext %65), !dbg !5009
  %66 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5010
  %base71 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !5010
  %67 = bitcast %struct.tree_base* %base71 to i64*, !dbg !5010
  %bf.load72 = load i64, i64* %67, align 8, !dbg !5010
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !5010
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !5010
  %cmp75 = icmp eq i32 %bf.cast74, 16, !dbg !5012
  br i1 %cmp75, label %if.then82, label %lor.lhs.false76, !dbg !5013

lor.lhs.false76:                                  ; preds = %if.end68
  %68 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5014
  %base77 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !5014
  %69 = bitcast %struct.tree_base* %base77 to i64*, !dbg !5014
  %bf.load78 = load i64, i64* %69, align 8, !dbg !5014
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !5014
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !5014
  %cmp81 = icmp eq i32 %bf.cast80, 17, !dbg !5015
  br i1 %cmp81, label %if.then82, label %if.end84, !dbg !5016

if.then82:                                        ; preds = %lor.lhs.false76, %if.end68
  %70 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5017
  %71 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5018
  %type83 = bitcast %union.tree_node* %71 to %struct.tree_type*, !dbg !5018
  %binfo = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type83, i32 0, i32 17, !dbg !5018
  %72 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !5018
  %73 = load i8, i8* %ref_p.addr, align 1, !dbg !5019
  call void @lto_output_tree_or_ref(%struct.output_block* %70, %union.tree_node* %72, i8 zeroext %73), !dbg !5020
  br label %if.end84, !dbg !5020

if.end84:                                         ; preds = %if.then82, %lor.lhs.false76
  %74 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5021
  %75 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5022
  %type85 = bitcast %union.tree_node* %75 to %struct.tree_type*, !dbg !5022
  %context = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type85, i32 0, i32 18, !dbg !5022
  %76 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !5022
  %77 = load i8, i8* %ref_p.addr, align 1, !dbg !5023
  call void @lto_output_tree_or_ref(%struct.output_block* %74, %union.tree_node* %76, i8 zeroext %77), !dbg !5024
  %78 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5025
  %79 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5026
  %type86 = bitcast %union.tree_node* %79 to %struct.tree_type*, !dbg !5026
  %canonical = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type86, i32 0, i32 19, !dbg !5026
  %80 = load %union.tree_node*, %union.tree_node** %canonical, align 8, !dbg !5026
  %81 = load i8, i8* %ref_p.addr, align 1, !dbg !5027
  call void @lto_output_tree_or_ref(%struct.output_block* %78, %union.tree_node* %80, i8 zeroext %81), !dbg !5028
  %82 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5029
  %83 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5030
  %common = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !5030
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5030
  %84 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5030
  %85 = load i8, i8* %ref_p.addr, align 1, !dbg !5031
  call void @lto_output_tree_or_ref(%struct.output_block* %82, %union.tree_node* %84, i8 zeroext %85), !dbg !5032
  ret void, !dbg !5033
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_list_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !5034 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5035, metadata !DIExpression()), !dbg !5036
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !5037, metadata !DIExpression()), !dbg !5038
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !5039, metadata !DIExpression()), !dbg !5040
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5041
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5042
  %list = bitcast %union.tree_node* %1 to %struct.tree_list*, !dbg !5042
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1, !dbg !5042
  %2 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !5042
  %3 = load i8, i8* %ref_p.addr, align 1, !dbg !5043
  call void @lto_output_tree_or_ref(%struct.output_block* %0, %union.tree_node* %2, i8 zeroext %3), !dbg !5044
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5045
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5046
  %list1 = bitcast %union.tree_node* %5 to %struct.tree_list*, !dbg !5046
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 2, !dbg !5046
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5046
  %7 = load i8, i8* %ref_p.addr, align 1, !dbg !5047
  call void @lto_output_tree_or_ref(%struct.output_block* %4, %union.tree_node* %6, i8 zeroext %7), !dbg !5048
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5049
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5050
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !5050
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5050
  %10 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5050
  %11 = load i8, i8* %ref_p.addr, align 1, !dbg !5051
  call void @lto_output_chain(%struct.output_block* %8, %union.tree_node* %10, i8 zeroext %11), !dbg !5052
  ret void, !dbg !5053
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_vec_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !5054 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5055, metadata !DIExpression()), !dbg !5056
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !5057, metadata !DIExpression()), !dbg !5058
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !5059, metadata !DIExpression()), !dbg !5060
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5061, metadata !DIExpression()), !dbg !5062
  store i32 0, i32* %i, align 4, !dbg !5063
  br label %for.cond, !dbg !5065

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5066
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5068
  %vec = bitcast %union.tree_node* %1 to %struct.tree_vec*, !dbg !5068
  %length = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec, i32 0, i32 1, !dbg !5068
  %2 = load i32, i32* %length, align 8, !dbg !5068
  %cmp = icmp slt i32 %0, %2, !dbg !5069
  br i1 %cmp, label %for.body, label %for.end, !dbg !5070

for.body:                                         ; preds = %for.cond
  %3 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5071
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5072
  %vec1 = bitcast %union.tree_node* %4 to %struct.tree_vec*, !dbg !5072
  %a = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec1, i32 0, i32 2, !dbg !5072
  %5 = load i32, i32* %i, align 4, !dbg !5072
  %idxprom = sext i32 %5 to i64, !dbg !5072
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a, i64 0, i64 %idxprom, !dbg !5072
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5072
  %7 = load i8, i8* %ref_p.addr, align 1, !dbg !5073
  call void @lto_output_tree_or_ref(%struct.output_block* %3, %union.tree_node* %6, i8 zeroext %7), !dbg !5074
  br label %for.inc, !dbg !5074

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !5075
  %inc = add nsw i32 %8, 1, !dbg !5075
  store i32 %inc, i32* %i, align 4, !dbg !5075
  br label %for.cond, !dbg !5076, !llvm.loop !5077

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5079
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_exp_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !5080 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5081, metadata !DIExpression()), !dbg !5082
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !5083, metadata !DIExpression()), !dbg !5084
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !5085, metadata !DIExpression()), !dbg !5086
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5087, metadata !DIExpression()), !dbg !5088
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5089
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5090
  %call = call i32 @tree_operand_length(%union.tree_node* %1), !dbg !5090
  %conv = sext i32 %call to i64, !dbg !5090
  call void @output_sleb128(%struct.output_block* %0, i64 %conv), !dbg !5091
  store i32 0, i32* %i, align 4, !dbg !5092
  br label %for.cond, !dbg !5094

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !5095
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5097
  %call1 = call i32 @tree_operand_length(%union.tree_node* %3), !dbg !5097
  %cmp = icmp slt i32 %2, %call1, !dbg !5098
  br i1 %cmp, label %for.body, label %for.end, !dbg !5099

for.body:                                         ; preds = %for.cond
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5100
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5101
  %exp = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !5101
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5101
  %6 = load i32, i32* %i, align 4, !dbg !5101
  %idxprom = sext i32 %6 to i64, !dbg !5101
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom, !dbg !5101
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5101
  %8 = load i8, i8* %ref_p.addr, align 1, !dbg !5102
  call void @lto_output_tree_or_ref(%struct.output_block* %4, %union.tree_node* %7, i8 zeroext %8), !dbg !5103
  br label %for.inc, !dbg !5103

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !5104
  %inc = add nsw i32 %9, 1, !dbg !5104
  store i32 %inc, i32* %i, align 4, !dbg !5104
  br label %for.cond, !dbg !5105, !llvm.loop !5106

for.end:                                          ; preds = %for.cond
  %10 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5108
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5109
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5109
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !5109
  %bf.load = load i64, i64* %12, align 8, !dbg !5109
  %bf.clear = and i64 %bf.load, 65535, !dbg !5109
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5109
  %idxprom3 = sext i32 %bf.cast to i64, !dbg !5109
  %arrayidx4 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom3, !dbg !5109
  %13 = load i32, i32* %arrayidx4, align 4, !dbg !5109
  %cmp5 = icmp uge i32 %13, 4, !dbg !5109
  br i1 %cmp5, label %land.lhs.true, label %cond.false, !dbg !5109

land.lhs.true:                                    ; preds = %for.end
  %14 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5109
  %base7 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5109
  %15 = bitcast %struct.tree_base* %base7 to i64*, !dbg !5109
  %bf.load8 = load i64, i64* %15, align 8, !dbg !5109
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !5109
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !5109
  %idxprom11 = sext i32 %bf.cast10 to i64, !dbg !5109
  %arrayidx12 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom11, !dbg !5109
  %16 = load i32, i32* %arrayidx12, align 4, !dbg !5109
  %cmp13 = icmp ule i32 %16, 10, !dbg !5109
  br i1 %cmp13, label %cond.true, label %cond.false, !dbg !5109

cond.true:                                        ; preds = %land.lhs.true
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5109
  %exp15 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !5109
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 1, !dbg !5109
  %18 = load i32, i32* %locus, align 8, !dbg !5109
  br label %cond.end, !dbg !5109

cond.false:                                       ; preds = %land.lhs.true, %for.end
  br label %cond.end, !dbg !5109

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %18, %cond.true ], [ 0, %cond.false ], !dbg !5109
  call void @lto_output_location(%struct.output_block* %10, i32 %cond), !dbg !5110
  %19 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5111
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5112
  %call16 = call %union.tree_node** @tree_block(%union.tree_node* %20), !dbg !5112
  %21 = load %union.tree_node*, %union.tree_node** %call16, align 8, !dbg !5112
  %22 = load i8, i8* %ref_p.addr, align 1, !dbg !5113
  call void @lto_output_tree_or_ref(%struct.output_block* %19, %union.tree_node* %21, i8 zeroext %22), !dbg !5114
  ret void, !dbg !5115
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_block_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !5116 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5117, metadata !DIExpression()), !dbg !5118
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !5119, metadata !DIExpression()), !dbg !5120
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !5121, metadata !DIExpression()), !dbg !5122
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5123, metadata !DIExpression()), !dbg !5124
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5125, metadata !DIExpression()), !dbg !5126
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5127
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5128
  %block = bitcast %union.tree_node* %1 to %struct.tree_block*, !dbg !5128
  %locus = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 2, !dbg !5128
  %2 = load i32, i32* %locus, align 4, !dbg !5128
  call void @lto_output_location(%struct.output_block* %0, i32 %2), !dbg !5129
  %3 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5130
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5131
  %block1 = bitcast %union.tree_node* %4 to %struct.tree_block*, !dbg !5131
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 3, !dbg !5131
  %5 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !5131
  %6 = load i8, i8* %ref_p.addr, align 1, !dbg !5132
  call void @lto_output_chain(%struct.output_block* %3, %union.tree_node* %5, i8 zeroext %6), !dbg !5133
  %7 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5134
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5135
  %block2 = bitcast %union.tree_node* %8 to %struct.tree_block*, !dbg !5135
  %nonlocalized_vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block2, i32 0, i32 4, !dbg !5135
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %nonlocalized_vars, align 8, !dbg !5135
  %tobool = icmp ne %struct.VEC_tree_gc* %9, null, !dbg !5135
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5135

cond.true:                                        ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5135
  %block3 = bitcast %union.tree_node* %10 to %struct.tree_block*, !dbg !5135
  %nonlocalized_vars4 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block3, i32 0, i32 4, !dbg !5135
  %11 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %nonlocalized_vars4, align 8, !dbg !5135
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %11, i32 0, i32 0, !dbg !5135
  br label %cond.end, !dbg !5135

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5135

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5135
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !5135
  %conv = zext i32 %call to i64, !dbg !5135
  call void @output_uleb128(%struct.output_block* %7, i64 %conv), !dbg !5136
  store i32 0, i32* %i, align 4, !dbg !5137
  br label %for.cond, !dbg !5139

for.cond:                                         ; preds = %for.inc, %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5140
  %block5 = bitcast %union.tree_node* %12 to %struct.tree_block*, !dbg !5140
  %nonlocalized_vars6 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block5, i32 0, i32 4, !dbg !5140
  %13 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %nonlocalized_vars6, align 8, !dbg !5140
  %tobool7 = icmp ne %struct.VEC_tree_gc* %13, null, !dbg !5140
  br i1 %tobool7, label %cond.true8, label %cond.false12, !dbg !5140

cond.true8:                                       ; preds = %for.cond
  %14 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5140
  %block9 = bitcast %union.tree_node* %14 to %struct.tree_block*, !dbg !5140
  %nonlocalized_vars10 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block9, i32 0, i32 4, !dbg !5140
  %15 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %nonlocalized_vars10, align 8, !dbg !5140
  %base11 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %15, i32 0, i32 0, !dbg !5140
  br label %cond.end13, !dbg !5140

cond.false12:                                     ; preds = %for.cond
  br label %cond.end13, !dbg !5140

cond.end13:                                       ; preds = %cond.false12, %cond.true8
  %cond14 = phi %struct.VEC_tree_base* [ %base11, %cond.true8 ], [ null, %cond.false12 ], !dbg !5140
  %16 = load i32, i32* %i, align 4, !dbg !5140
  %call15 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond14, i32 %16, %union.tree_node** %t), !dbg !5140
  %tobool16 = icmp ne i32 %call15, 0, !dbg !5142
  br i1 %tobool16, label %for.body, label %for.end, !dbg !5142

for.body:                                         ; preds = %cond.end13
  %17 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5143
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5144
  %19 = load i8, i8* %ref_p.addr, align 1, !dbg !5145
  call void @lto_output_tree_or_ref(%struct.output_block* %17, %union.tree_node* %18, i8 zeroext %19), !dbg !5146
  br label %for.inc, !dbg !5146

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4, !dbg !5147
  %inc = add i32 %20, 1, !dbg !5147
  store i32 %inc, i32* %i, align 4, !dbg !5147
  br label %for.cond, !dbg !5148, !llvm.loop !5149

for.end:                                          ; preds = %cond.end13
  %21 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5151
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5152
  %block17 = bitcast %union.tree_node* %22 to %struct.tree_block*, !dbg !5152
  %supercontext = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block17, i32 0, i32 6, !dbg !5152
  %23 = load %union.tree_node*, %union.tree_node** %supercontext, align 8, !dbg !5152
  %24 = load i8, i8* %ref_p.addr, align 1, !dbg !5153
  call void @lto_output_tree_or_ref(%struct.output_block* %21, %union.tree_node* %23, i8 zeroext %24), !dbg !5154
  %25 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5155
  %26 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5156
  %block18 = bitcast %union.tree_node* %26 to %struct.tree_block*, !dbg !5156
  %abstract_origin = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block18, i32 0, i32 7, !dbg !5156
  %27 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !5156
  %28 = load i8, i8* %ref_p.addr, align 1, !dbg !5157
  call void @lto_output_tree_or_ref(%struct.output_block* %25, %union.tree_node* %27, i8 zeroext %28), !dbg !5158
  %29 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5159
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5160
  %block19 = bitcast %union.tree_node* %30 to %struct.tree_block*, !dbg !5160
  %fragment_origin = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block19, i32 0, i32 8, !dbg !5160
  %31 = load %union.tree_node*, %union.tree_node** %fragment_origin, align 8, !dbg !5160
  %32 = load i8, i8* %ref_p.addr, align 1, !dbg !5161
  call void @lto_output_tree_or_ref(%struct.output_block* %29, %union.tree_node* %31, i8 zeroext %32), !dbg !5162
  %33 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5163
  %34 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5164
  %block20 = bitcast %union.tree_node* %34 to %struct.tree_block*, !dbg !5164
  %fragment_chain = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block20, i32 0, i32 9, !dbg !5164
  %35 = load %union.tree_node*, %union.tree_node** %fragment_chain, align 8, !dbg !5164
  %36 = load i8, i8* %ref_p.addr, align 1, !dbg !5165
  call void @lto_output_tree_or_ref(%struct.output_block* %33, %union.tree_node* %35, i8 zeroext %36), !dbg !5166
  %37 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5167
  %38 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5168
  %block21 = bitcast %union.tree_node* %38 to %struct.tree_block*, !dbg !5168
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block21, i32 0, i32 5, !dbg !5168
  %39 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !5168
  %40 = load i8, i8* %ref_p.addr, align 1, !dbg !5169
  call void @lto_output_chain(%struct.output_block* %37, %union.tree_node* %39, i8 zeroext %40), !dbg !5170
  ret void, !dbg !5171
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_binfo_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !5172 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5173, metadata !DIExpression()), !dbg !5174
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !5175, metadata !DIExpression()), !dbg !5176
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !5177, metadata !DIExpression()), !dbg !5178
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5179, metadata !DIExpression()), !dbg !5180
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5181, metadata !DIExpression()), !dbg !5182
  store i32 0, i32* %i, align 4, !dbg !5183
  br label %for.cond, !dbg !5185

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5186
  %binfo = bitcast %union.tree_node* %0 to %struct.tree_binfo*, !dbg !5186
  %base_binfos = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo, i32 0, i32 9, !dbg !5186
  %tobool = icmp ne %struct.VEC_tree_none* %base_binfos, null, !dbg !5186
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5186

cond.true:                                        ; preds = %for.cond
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5186
  %binfo1 = bitcast %union.tree_node* %1 to %struct.tree_binfo*, !dbg !5186
  %base_binfos2 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo1, i32 0, i32 9, !dbg !5186
  %base = getelementptr inbounds %struct.VEC_tree_none, %struct.VEC_tree_none* %base_binfos2, i32 0, i32 0, !dbg !5186
  br label %cond.end, !dbg !5186

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5186

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5186
  %2 = load i32, i32* %i, align 4, !dbg !5186
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %2, %union.tree_node** %t), !dbg !5186
  %tobool3 = icmp ne i32 %call, 0, !dbg !5188
  br i1 %tobool3, label %for.body, label %for.end, !dbg !5188

for.body:                                         ; preds = %cond.end
  %3 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5189
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5190
  %5 = load i8, i8* %ref_p.addr, align 1, !dbg !5191
  call void @lto_output_tree_or_ref(%struct.output_block* %3, %union.tree_node* %4, i8 zeroext %5), !dbg !5192
  br label %for.inc, !dbg !5192

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !5193
  %inc = add i32 %6, 1, !dbg !5193
  store i32 %inc, i32* %i, align 4, !dbg !5193
  br label %for.cond, !dbg !5194, !llvm.loop !5195

for.end:                                          ; preds = %cond.end
  %7 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5197
  call void @output_zero(%struct.output_block* %7), !dbg !5198
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5199
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5200
  %binfo4 = bitcast %union.tree_node* %9 to %struct.tree_binfo*, !dbg !5200
  %offset = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo4, i32 0, i32 1, !dbg !5200
  %10 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !5200
  %11 = load i8, i8* %ref_p.addr, align 1, !dbg !5201
  call void @lto_output_tree_or_ref(%struct.output_block* %8, %union.tree_node* %10, i8 zeroext %11), !dbg !5202
  %12 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5203
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5204
  %binfo5 = bitcast %union.tree_node* %13 to %struct.tree_binfo*, !dbg !5204
  %vtable = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo5, i32 0, i32 2, !dbg !5204
  %14 = load %union.tree_node*, %union.tree_node** %vtable, align 8, !dbg !5204
  %15 = load i8, i8* %ref_p.addr, align 1, !dbg !5205
  call void @lto_output_tree_or_ref(%struct.output_block* %12, %union.tree_node* %14, i8 zeroext %15), !dbg !5206
  %16 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5207
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5208
  %binfo6 = bitcast %union.tree_node* %17 to %struct.tree_binfo*, !dbg !5208
  %virtuals = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo6, i32 0, i32 3, !dbg !5208
  %18 = load %union.tree_node*, %union.tree_node** %virtuals, align 8, !dbg !5208
  %19 = load i8, i8* %ref_p.addr, align 1, !dbg !5209
  call void @lto_output_tree_or_ref(%struct.output_block* %16, %union.tree_node* %18, i8 zeroext %19), !dbg !5210
  %20 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5211
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5212
  %binfo7 = bitcast %union.tree_node* %21 to %struct.tree_binfo*, !dbg !5212
  %vptr_field = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo7, i32 0, i32 4, !dbg !5212
  %22 = load %union.tree_node*, %union.tree_node** %vptr_field, align 8, !dbg !5212
  %23 = load i8, i8* %ref_p.addr, align 1, !dbg !5213
  call void @lto_output_tree_or_ref(%struct.output_block* %20, %union.tree_node* %22, i8 zeroext %23), !dbg !5214
  %24 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5215
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5216
  %binfo8 = bitcast %union.tree_node* %25 to %struct.tree_binfo*, !dbg !5216
  %base_accesses = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo8, i32 0, i32 5, !dbg !5216
  %26 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %base_accesses, align 8, !dbg !5216
  %tobool9 = icmp ne %struct.VEC_tree_gc* %26, null, !dbg !5216
  br i1 %tobool9, label %cond.true10, label %cond.false14, !dbg !5216

cond.true10:                                      ; preds = %for.end
  %27 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5216
  %binfo11 = bitcast %union.tree_node* %27 to %struct.tree_binfo*, !dbg !5216
  %base_accesses12 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo11, i32 0, i32 5, !dbg !5216
  %28 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %base_accesses12, align 8, !dbg !5216
  %base13 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %28, i32 0, i32 0, !dbg !5216
  br label %cond.end15, !dbg !5216

cond.false14:                                     ; preds = %for.end
  br label %cond.end15, !dbg !5216

cond.end15:                                       ; preds = %cond.false14, %cond.true10
  %cond16 = phi %struct.VEC_tree_base* [ %base13, %cond.true10 ], [ null, %cond.false14 ], !dbg !5216
  %call17 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond16), !dbg !5216
  %conv = zext i32 %call17 to i64, !dbg !5216
  call void @output_uleb128(%struct.output_block* %24, i64 %conv), !dbg !5217
  store i32 0, i32* %i, align 4, !dbg !5218
  br label %for.cond18, !dbg !5220

for.cond18:                                       ; preds = %for.inc32, %cond.end15
  %29 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5221
  %binfo19 = bitcast %union.tree_node* %29 to %struct.tree_binfo*, !dbg !5221
  %base_accesses20 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo19, i32 0, i32 5, !dbg !5221
  %30 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %base_accesses20, align 8, !dbg !5221
  %tobool21 = icmp ne %struct.VEC_tree_gc* %30, null, !dbg !5221
  br i1 %tobool21, label %cond.true22, label %cond.false26, !dbg !5221

cond.true22:                                      ; preds = %for.cond18
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5221
  %binfo23 = bitcast %union.tree_node* %31 to %struct.tree_binfo*, !dbg !5221
  %base_accesses24 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo23, i32 0, i32 5, !dbg !5221
  %32 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %base_accesses24, align 8, !dbg !5221
  %base25 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %32, i32 0, i32 0, !dbg !5221
  br label %cond.end27, !dbg !5221

cond.false26:                                     ; preds = %for.cond18
  br label %cond.end27, !dbg !5221

cond.end27:                                       ; preds = %cond.false26, %cond.true22
  %cond28 = phi %struct.VEC_tree_base* [ %base25, %cond.true22 ], [ null, %cond.false26 ], !dbg !5221
  %33 = load i32, i32* %i, align 4, !dbg !5221
  %call29 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond28, i32 %33, %union.tree_node** %t), !dbg !5221
  %tobool30 = icmp ne i32 %call29, 0, !dbg !5223
  br i1 %tobool30, label %for.body31, label %for.end34, !dbg !5223

for.body31:                                       ; preds = %cond.end27
  %34 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5224
  %35 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5225
  %36 = load i8, i8* %ref_p.addr, align 1, !dbg !5226
  call void @lto_output_tree_or_ref(%struct.output_block* %34, %union.tree_node* %35, i8 zeroext %36), !dbg !5227
  br label %for.inc32, !dbg !5227

for.inc32:                                        ; preds = %for.body31
  %37 = load i32, i32* %i, align 4, !dbg !5228
  %inc33 = add i32 %37, 1, !dbg !5228
  store i32 %inc33, i32* %i, align 4, !dbg !5228
  br label %for.cond18, !dbg !5229, !llvm.loop !5230

for.end34:                                        ; preds = %cond.end27
  %38 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5232
  %39 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5233
  %binfo35 = bitcast %union.tree_node* %39 to %struct.tree_binfo*, !dbg !5233
  %inheritance = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo35, i32 0, i32 6, !dbg !5233
  %40 = load %union.tree_node*, %union.tree_node** %inheritance, align 8, !dbg !5233
  %41 = load i8, i8* %ref_p.addr, align 1, !dbg !5234
  call void @lto_output_tree_or_ref(%struct.output_block* %38, %union.tree_node* %40, i8 zeroext %41), !dbg !5235
  %42 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5236
  %43 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5237
  %binfo36 = bitcast %union.tree_node* %43 to %struct.tree_binfo*, !dbg !5237
  %vtt_subvtt = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo36, i32 0, i32 7, !dbg !5237
  %44 = load %union.tree_node*, %union.tree_node** %vtt_subvtt, align 8, !dbg !5237
  %45 = load i8, i8* %ref_p.addr, align 1, !dbg !5238
  call void @lto_output_tree_or_ref(%struct.output_block* %42, %union.tree_node* %44, i8 zeroext %45), !dbg !5239
  %46 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5240
  %47 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5241
  %binfo37 = bitcast %union.tree_node* %47 to %struct.tree_binfo*, !dbg !5241
  %vtt_vptr = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo37, i32 0, i32 8, !dbg !5241
  %48 = load %union.tree_node*, %union.tree_node** %vtt_vptr, align 8, !dbg !5241
  %49 = load i8, i8* %ref_p.addr, align 1, !dbg !5242
  call void @lto_output_tree_or_ref(%struct.output_block* %46, %union.tree_node* %48, i8 zeroext %49), !dbg !5243
  ret void, !dbg !5244
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_ts_constructor_tree_pointers(%struct.output_block* %ob, %union.tree_node* %expr, i8 zeroext %ref_p) #0 !dbg !5245 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %index = alloca %union.tree_node*, align 8
  %value = alloca %union.tree_node*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5246, metadata !DIExpression()), !dbg !5247
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !5248, metadata !DIExpression()), !dbg !5249
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !5250, metadata !DIExpression()), !dbg !5251
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5252, metadata !DIExpression()), !dbg !5253
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !5254, metadata !DIExpression()), !dbg !5255
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !5256, metadata !DIExpression()), !dbg !5257
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5258
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5259
  %constructor = bitcast %union.tree_node* %1 to %struct.tree_constructor*, !dbg !5259
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !5259
  %2 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !5259
  %tobool = icmp ne %struct.VEC_constructor_elt_gc* %2, null, !dbg !5259
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5259

cond.true:                                        ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5259
  %constructor1 = bitcast %union.tree_node* %3 to %struct.tree_constructor*, !dbg !5259
  %elts2 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor1, i32 0, i32 1, !dbg !5259
  %4 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts2, align 8, !dbg !5259
  %base = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %4, i32 0, i32 0, !dbg !5259
  br label %cond.end, !dbg !5259

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5259

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5259
  %call = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !5259
  %conv = zext i32 %call to i64, !dbg !5259
  call void @output_uleb128(%struct.output_block* %0, i64 %conv), !dbg !5260
  store i32 0, i32* %i, align 4, !dbg !5261
  br label %for.cond, !dbg !5261

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load i32, i32* %i, align 4, !dbg !5263
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5263
  %constructor3 = bitcast %union.tree_node* %6 to %struct.tree_constructor*, !dbg !5263
  %elts4 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor3, i32 0, i32 1, !dbg !5263
  %7 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts4, align 8, !dbg !5263
  %tobool5 = icmp ne %struct.VEC_constructor_elt_gc* %7, null, !dbg !5263
  br i1 %tobool5, label %cond.true6, label %cond.false10, !dbg !5263

cond.true6:                                       ; preds = %for.cond
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5263
  %constructor7 = bitcast %union.tree_node* %8 to %struct.tree_constructor*, !dbg !5263
  %elts8 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor7, i32 0, i32 1, !dbg !5263
  %9 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts8, align 8, !dbg !5263
  %base9 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %9, i32 0, i32 0, !dbg !5263
  br label %cond.end11, !dbg !5263

cond.false10:                                     ; preds = %for.cond
  br label %cond.end11, !dbg !5263

cond.end11:                                       ; preds = %cond.false10, %cond.true6
  %cond12 = phi %struct.VEC_constructor_elt_base* [ %base9, %cond.true6 ], [ null, %cond.false10 ], !dbg !5263
  %call13 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond12), !dbg !5263
  %cmp = icmp uge i32 %5, %call13, !dbg !5263
  br i1 %cmp, label %cond.true15, label %cond.false16, !dbg !5263

cond.true15:                                      ; preds = %cond.end11
  br label %cond.end41, !dbg !5263

cond.false16:                                     ; preds = %cond.end11
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5263
  %constructor17 = bitcast %union.tree_node* %10 to %struct.tree_constructor*, !dbg !5263
  %elts18 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor17, i32 0, i32 1, !dbg !5263
  %11 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts18, align 8, !dbg !5263
  %tobool19 = icmp ne %struct.VEC_constructor_elt_gc* %11, null, !dbg !5263
  br i1 %tobool19, label %cond.true20, label %cond.false24, !dbg !5263

cond.true20:                                      ; preds = %cond.false16
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5263
  %constructor21 = bitcast %union.tree_node* %12 to %struct.tree_constructor*, !dbg !5263
  %elts22 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor21, i32 0, i32 1, !dbg !5263
  %13 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts22, align 8, !dbg !5263
  %base23 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %13, i32 0, i32 0, !dbg !5263
  br label %cond.end25, !dbg !5263

cond.false24:                                     ; preds = %cond.false16
  br label %cond.end25, !dbg !5263

cond.end25:                                       ; preds = %cond.false24, %cond.true20
  %cond26 = phi %struct.VEC_constructor_elt_base* [ %base23, %cond.true20 ], [ null, %cond.false24 ], !dbg !5263
  %14 = load i32, i32* %i, align 4, !dbg !5263
  %call27 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond26, i32 %14), !dbg !5263
  %value28 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call27, i32 0, i32 1, !dbg !5263
  %15 = load %union.tree_node*, %union.tree_node** %value28, align 8, !dbg !5263
  store %union.tree_node* %15, %union.tree_node** %value, align 8, !dbg !5263
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5263
  %constructor29 = bitcast %union.tree_node* %16 to %struct.tree_constructor*, !dbg !5263
  %elts30 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor29, i32 0, i32 1, !dbg !5263
  %17 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts30, align 8, !dbg !5263
  %tobool31 = icmp ne %struct.VEC_constructor_elt_gc* %17, null, !dbg !5263
  br i1 %tobool31, label %cond.true32, label %cond.false36, !dbg !5263

cond.true32:                                      ; preds = %cond.end25
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5263
  %constructor33 = bitcast %union.tree_node* %18 to %struct.tree_constructor*, !dbg !5263
  %elts34 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor33, i32 0, i32 1, !dbg !5263
  %19 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts34, align 8, !dbg !5263
  %base35 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %19, i32 0, i32 0, !dbg !5263
  br label %cond.end37, !dbg !5263

cond.false36:                                     ; preds = %cond.end25
  br label %cond.end37, !dbg !5263

cond.end37:                                       ; preds = %cond.false36, %cond.true32
  %cond38 = phi %struct.VEC_constructor_elt_base* [ %base35, %cond.true32 ], [ null, %cond.false36 ], !dbg !5263
  %20 = load i32, i32* %i, align 4, !dbg !5263
  %call39 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond38, i32 %20), !dbg !5263
  %index40 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call39, i32 0, i32 0, !dbg !5263
  %21 = load %union.tree_node*, %union.tree_node** %index40, align 8, !dbg !5263
  store %union.tree_node* %21, %union.tree_node** %index, align 8, !dbg !5263
  br label %cond.end41, !dbg !5263

cond.end41:                                       ; preds = %cond.end37, %cond.true15
  %cond42 = phi i32 [ 0, %cond.true15 ], [ 1, %cond.end37 ], !dbg !5263
  %tobool43 = icmp ne i32 %cond42, 0, !dbg !5261
  br i1 %tobool43, label %for.body, label %for.end, !dbg !5261

for.body:                                         ; preds = %cond.end41
  %22 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5265
  %23 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !5267
  %24 = load i8, i8* %ref_p.addr, align 1, !dbg !5268
  call void @lto_output_tree_or_ref(%struct.output_block* %22, %union.tree_node* %23, i8 zeroext %24), !dbg !5269
  %25 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5270
  %26 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5271
  %27 = load i8, i8* %ref_p.addr, align 1, !dbg !5272
  call void @lto_output_tree_or_ref(%struct.output_block* %25, %union.tree_node* %26, i8 zeroext %27), !dbg !5273
  br label %for.inc, !dbg !5274

for.inc:                                          ; preds = %for.body
  %28 = load i32, i32* %i, align 4, !dbg !5263
  %inc = add i32 %28, 1, !dbg !5263
  store i32 %inc, i32* %i, align 4, !dbg !5263
  br label %for.cond, !dbg !5263, !llvm.loop !5275

for.end:                                          ; preds = %cond.end41
  ret void, !dbg !5277
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_chain(%struct.output_block* %ob, %union.tree_node* %t, i8 zeroext %ref_p) #0 !dbg !5278 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %ref_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %saved_chain = alloca %union.tree_node*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5279, metadata !DIExpression()), !dbg !5280
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5281, metadata !DIExpression()), !dbg !5282
  store i8 %ref_p, i8* %ref_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ref_p.addr, metadata !5283, metadata !DIExpression()), !dbg !5284
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5285, metadata !DIExpression()), !dbg !5286
  call void @llvm.dbg.declare(metadata i32* %count, metadata !5287, metadata !DIExpression()), !dbg !5288
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5289
  %call = call i32 @list_length(%union.tree_node* %0), !dbg !5290
  store i32 %call, i32* %count, align 4, !dbg !5291
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5292
  %2 = load i32, i32* %count, align 4, !dbg !5293
  %conv = sext i32 %2 to i64, !dbg !5293
  call void @output_sleb128(%struct.output_block* %1, i64 %conv), !dbg !5294
  store i32 0, i32* %i, align 4, !dbg !5295
  br label %for.cond, !dbg !5297

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !5298
  %4 = load i32, i32* %count, align 4, !dbg !5300
  %cmp = icmp slt i32 %3, %4, !dbg !5301
  br i1 %cmp, label %for.body, label %for.end, !dbg !5302

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %saved_chain, metadata !5303, metadata !DIExpression()), !dbg !5305
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5306
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !5306
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5306
  %6 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5306
  store %union.tree_node* %6, %union.tree_node** %saved_chain, align 8, !dbg !5307
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5308
  %common2 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !5308
  %chain3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 1, !dbg !5308
  store %union.tree_node* null, %union.tree_node** %chain3, align 8, !dbg !5309
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5310
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5311
  %10 = load i8, i8* %ref_p.addr, align 1, !dbg !5312
  call void @lto_output_tree_or_ref(%struct.output_block* %8, %union.tree_node* %9, i8 zeroext %10), !dbg !5313
  %11 = load %union.tree_node*, %union.tree_node** %saved_chain, align 8, !dbg !5314
  %12 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5315
  %common4 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !5315
  %chain5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 1, !dbg !5315
  store %union.tree_node* %11, %union.tree_node** %chain5, align 8, !dbg !5316
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5317
  %common6 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !5317
  %chain7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 1, !dbg !5317
  %14 = load %union.tree_node*, %union.tree_node** %chain7, align 8, !dbg !5317
  store %union.tree_node* %14, %union.tree_node** %t.addr, align 8, !dbg !5318
  br label %for.inc, !dbg !5319

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4, !dbg !5320
  %inc = add nsw i32 %15, 1, !dbg !5320
  store i32 %inc, i32* %i, align 4, !dbg !5320
  br label %for.cond, !dbg !5321, !llvm.loop !5322

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5324
}

declare dso_local i32 @list_length(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_location(%struct.output_block* %ob, i32 %loc) #0 !dbg !5325 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %loc.addr = alloca i32, align 4
  %xloc = alloca %struct.expanded_location, align 8
  %tmp = alloca %struct.expanded_location, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5328, metadata !DIExpression()), !dbg !5329
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !5330, metadata !DIExpression()), !dbg !5331
  call void @llvm.dbg.declare(metadata %struct.expanded_location* %xloc, metadata !5332, metadata !DIExpression()), !dbg !5340
  %0 = load i32, i32* %loc.addr, align 4, !dbg !5341
  %cmp = icmp eq i32 %0, 0, !dbg !5343
  br i1 %cmp, label %if.then, label %if.end, !dbg !5344

if.then:                                          ; preds = %entry
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5345
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5347
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %2, i32 0, i32 2, !dbg !5348
  %3 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !5348
  call void @output_string(%struct.output_block* %1, %struct.lto_output_stream* %3, i8* null), !dbg !5349
  br label %return, !dbg !5350

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %loc.addr, align 4, !dbg !5351
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %4), !dbg !5352
  %5 = bitcast %struct.expanded_location* %xloc to i8*, !dbg !5352
  %6 = bitcast %struct.expanded_location* %tmp to i8*, !dbg !5352
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 24, i1 false), !dbg !5352
  %7 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5353
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5354
  %main_stream1 = getelementptr inbounds %struct.output_block, %struct.output_block* %8, i32 0, i32 2, !dbg !5355
  %9 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream1, align 8, !dbg !5355
  %file = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 0, !dbg !5356
  %10 = load i8*, i8** %file, align 8, !dbg !5356
  call void @output_string(%struct.output_block* %7, %struct.lto_output_stream* %9, i8* %10), !dbg !5357
  %11 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5358
  %line = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 1, !dbg !5359
  %12 = load i32, i32* %line, align 8, !dbg !5359
  %conv = sext i32 %12 to i64, !dbg !5360
  call void @output_sleb128(%struct.output_block* %11, i64 %conv), !dbg !5361
  %13 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5362
  %column = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 2, !dbg !5363
  %14 = load i32, i32* %column, align 4, !dbg !5363
  %conv2 = sext i32 %14 to i64, !dbg !5364
  call void @output_sleb128(%struct.output_block* %13, i64 %conv2), !dbg !5365
  %15 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5366
  %sysp = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 3, !dbg !5367
  %16 = load i8, i8* %sysp, align 8, !dbg !5367
  %conv3 = zext i8 %16 to i64, !dbg !5368
  call void @output_sleb128(%struct.output_block* %15, i64 %conv3), !dbg !5369
  %file4 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 0, !dbg !5370
  %17 = load i8*, i8** %file4, align 8, !dbg !5370
  %18 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5371
  %current_file = getelementptr inbounds %struct.output_block, %struct.output_block* %18, i32 0, i32 7, !dbg !5372
  store i8* %17, i8** %current_file, align 8, !dbg !5373
  %line5 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 1, !dbg !5374
  %19 = load i32, i32* %line5, align 8, !dbg !5374
  %20 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5375
  %current_line = getelementptr inbounds %struct.output_block, %struct.output_block* %20, i32 0, i32 8, !dbg !5376
  store i32 %19, i32* %current_line, align 8, !dbg !5377
  %column6 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 2, !dbg !5378
  %21 = load i32, i32* %column6, align 4, !dbg !5378
  %22 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5379
  %current_col = getelementptr inbounds %struct.output_block, %struct.output_block* %22, i32 0, i32 9, !dbg !5380
  store i32 %21, i32* %current_col, align 4, !dbg !5381
  br label %return, !dbg !5382

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !5382
}

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) #2

declare dso_local %union.tree_node* @decl_value_expr_lookup(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_operand_length(%union.tree_node* %node) #0 !dbg !5383 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %node.addr, metadata !5389, metadata !DIExpression()), !dbg !5390
  %0 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !5391
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5391
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5391
  %bf.load = load i64, i64* %1, align 8, !dbg !5391
  %bf.clear = and i64 %bf.load, 65535, !dbg !5391
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5391
  %idxprom = sext i32 %bf.cast to i64, !dbg !5391
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5391
  %2 = load i32, i32* %arrayidx, align 4, !dbg !5391
  %cmp = icmp eq i32 %2, 9, !dbg !5391
  br i1 %cmp, label %if.then, label %if.else, !dbg !5393

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !5394
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !5394
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5394
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5394
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !5394
  %int_cst = bitcast %union.tree_node* %4 to %struct.tree_int_cst*, !dbg !5394
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !5394
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !5394
  %5 = load i64, i64* %low, align 8, !dbg !5394
  %conv = trunc i64 %5 to i32, !dbg !5394
  store i32 %conv, i32* %retval, align 4, !dbg !5395
  br label %return, !dbg !5395

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !5396
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5396
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !5396
  %bf.load4 = load i64, i64* %7, align 8, !dbg !5396
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !5396
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5396
  %idxprom7 = sext i32 %bf.cast6 to i64, !dbg !5396
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom7, !dbg !5396
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !5396
  %conv9 = zext i8 %8 to i32, !dbg !5396
  store i32 %conv9, i32* %retval, align 4, !dbg !5397
  br label %return, !dbg !5397

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5398
  ret i32 %9, !dbg !5398
}

declare dso_local %union.tree_node** @tree_block(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !5399 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5402, metadata !DIExpression()), !dbg !5403
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5404, metadata !DIExpression()), !dbg !5403
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !5405, metadata !DIExpression()), !dbg !5403
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5406
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !5406
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5406

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5406
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5406
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !5406
  %3 = load i32, i32* %num, align 8, !dbg !5406
  %cmp = icmp ult i32 %1, %3, !dbg !5406
  br i1 %cmp, label %if.then, label %if.else, !dbg !5403

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5408
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !5408
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5408
  %idxprom = zext i32 %5 to i64, !dbg !5408
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !5408
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5408
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !5408
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !5408
  store i32 1, i32* %retval, align 4, !dbg !5408
  br label %return, !dbg !5408

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !5410
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !5410
  store i32 0, i32* %retval, align 4, !dbg !5410
  br label %return, !dbg !5410

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5403
  ret i32 %9, !dbg !5403
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %vec_) #0 !dbg !5412 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !5417, metadata !DIExpression()), !dbg !5418
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !5418
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !5418
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5418

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !5418
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %1, i32 0, i32 0, !dbg !5418
  %2 = load i32, i32* %num, align 8, !dbg !5418
  br label %cond.end, !dbg !5418

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5418

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5418
  ret i32 %cond, !dbg !5418
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %vec_, i32 %ix_) #0 !dbg !5419 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !5424, metadata !DIExpression()), !dbg !5425
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5426, metadata !DIExpression()), !dbg !5425
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !5425
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !5425
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5425

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5425
  %2 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !5425
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %2, i32 0, i32 0, !dbg !5425
  %3 = load i32, i32* %num, align 8, !dbg !5425
  %cmp = icmp ult i32 %1, %3, !dbg !5425
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5427
  %land.ext = zext i1 %4 to i32, !dbg !5425
  %5 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !5425
  %vec = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %5, i32 0, i32 2, !dbg !5425
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5425
  %idxprom = zext i32 %6 to i64, !dbg !5425
  %arrayidx = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec, i64 0, i64 %idxprom, !dbg !5425
  ret %struct.constructor_elt_d* %arrayidx, !dbg !5425
}

declare dso_local %struct.bitmap_head_def* @lto_bitmap_alloc() #2

; Function Attrs: noinline nounwind uwtable
define internal void @lto_writer_init() #0 !dbg !5428 {
entry:
  call void @lto_streamer_init(), !dbg !5429
  ret void, !dbg !5430
}

; Function Attrs: noinline nounwind uwtable
define internal { %struct.cgraph_node_set_def*, i32 } @csi_start(%struct.cgraph_node_set_def* %set) #0 !dbg !5431 {
entry:
  %retval = alloca %struct.cgraph_node_set_iterator, align 8
  %set.addr = alloca %struct.cgraph_node_set_def*, align 8
  store %struct.cgraph_node_set_def* %set, %struct.cgraph_node_set_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_def** %set.addr, metadata !5434, metadata !DIExpression()), !dbg !5435
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_iterator* %retval, metadata !5436, metadata !DIExpression()), !dbg !5437
  %0 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set.addr, align 8, !dbg !5438
  %set1 = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %retval, i32 0, i32 0, !dbg !5439
  store %struct.cgraph_node_set_def* %0, %struct.cgraph_node_set_def** %set1, align 8, !dbg !5440
  %index = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %retval, i32 0, i32 1, !dbg !5441
  store i32 0, i32* %index, align 8, !dbg !5442
  %1 = bitcast %struct.cgraph_node_set_iterator* %retval to { %struct.cgraph_node_set_def*, i32 }*, !dbg !5443
  %2 = load { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %1, align 8, !dbg !5443
  ret { %struct.cgraph_node_set_def*, i32 } %2, !dbg !5443
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @csi_end_p(%struct.cgraph_node_set_def* %csi.coerce0, i32 %csi.coerce1) #0 !dbg !5444 {
entry:
  %csi = alloca %struct.cgraph_node_set_iterator, align 8
  %0 = bitcast %struct.cgraph_node_set_iterator* %csi to { %struct.cgraph_node_set_def*, i32 }*
  %1 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %0, i32 0, i32 0
  store %struct.cgraph_node_set_def* %csi.coerce0, %struct.cgraph_node_set_def** %1, align 8
  %2 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %0, i32 0, i32 1
  store i32 %csi.coerce1, i32* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_iterator* %csi, metadata !5447, metadata !DIExpression()), !dbg !5448
  %index = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 1, !dbg !5449
  %3 = load i32, i32* %index, align 8, !dbg !5449
  %set = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 0, !dbg !5450
  %4 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set, align 8, !dbg !5450
  %nodes = getelementptr inbounds %struct.cgraph_node_set_def, %struct.cgraph_node_set_def* %4, i32 0, i32 1, !dbg !5450
  %5 = load %struct.VEC_cgraph_node_ptr_gc*, %struct.VEC_cgraph_node_ptr_gc** %nodes, align 8, !dbg !5450
  %tobool = icmp ne %struct.VEC_cgraph_node_ptr_gc* %5, null, !dbg !5450
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5450

cond.true:                                        ; preds = %entry
  %set1 = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 0, !dbg !5450
  %6 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set1, align 8, !dbg !5450
  %nodes2 = getelementptr inbounds %struct.cgraph_node_set_def, %struct.cgraph_node_set_def* %6, i32 0, i32 1, !dbg !5450
  %7 = load %struct.VEC_cgraph_node_ptr_gc*, %struct.VEC_cgraph_node_ptr_gc** %nodes2, align 8, !dbg !5450
  %base = getelementptr inbounds %struct.VEC_cgraph_node_ptr_gc, %struct.VEC_cgraph_node_ptr_gc* %7, i32 0, i32 0, !dbg !5450
  br label %cond.end, !dbg !5450

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5450

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_cgraph_node_ptr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5450
  %call = call i32 @VEC_cgraph_node_ptr_base_length(%struct.VEC_cgraph_node_ptr_base* %cond), !dbg !5450
  %cmp = icmp uge i32 %3, %call, !dbg !5451
  %conv = zext i1 %cmp to i32, !dbg !5451
  %conv3 = trunc i32 %conv to i8, !dbg !5452
  ret i8 %conv3, !dbg !5453
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_node* @csi_node(%struct.cgraph_node_set_def* %csi.coerce0, i32 %csi.coerce1) #0 !dbg !5454 {
entry:
  %csi = alloca %struct.cgraph_node_set_iterator, align 8
  %0 = bitcast %struct.cgraph_node_set_iterator* %csi to { %struct.cgraph_node_set_def*, i32 }*
  %1 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %0, i32 0, i32 0
  store %struct.cgraph_node_set_def* %csi.coerce0, %struct.cgraph_node_set_def** %1, align 8
  %2 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %0, i32 0, i32 1
  store i32 %csi.coerce1, i32* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_iterator* %csi, metadata !5457, metadata !DIExpression()), !dbg !5458
  %set = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 0, !dbg !5459
  %3 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set, align 8, !dbg !5459
  %nodes = getelementptr inbounds %struct.cgraph_node_set_def, %struct.cgraph_node_set_def* %3, i32 0, i32 1, !dbg !5459
  %4 = load %struct.VEC_cgraph_node_ptr_gc*, %struct.VEC_cgraph_node_ptr_gc** %nodes, align 8, !dbg !5459
  %tobool = icmp ne %struct.VEC_cgraph_node_ptr_gc* %4, null, !dbg !5459
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5459

cond.true:                                        ; preds = %entry
  %set1 = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 0, !dbg !5459
  %5 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set1, align 8, !dbg !5459
  %nodes2 = getelementptr inbounds %struct.cgraph_node_set_def, %struct.cgraph_node_set_def* %5, i32 0, i32 1, !dbg !5459
  %6 = load %struct.VEC_cgraph_node_ptr_gc*, %struct.VEC_cgraph_node_ptr_gc** %nodes2, align 8, !dbg !5459
  %base = getelementptr inbounds %struct.VEC_cgraph_node_ptr_gc, %struct.VEC_cgraph_node_ptr_gc* %6, i32 0, i32 0, !dbg !5459
  br label %cond.end, !dbg !5459

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5459

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_cgraph_node_ptr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5459
  %index = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 1, !dbg !5459
  %7 = load i32, i32* %index, align 8, !dbg !5459
  %call = call %struct.cgraph_node* @VEC_cgraph_node_ptr_base_index(%struct.VEC_cgraph_node_ptr_base* %cond, i32 %7), !dbg !5459
  ret %struct.cgraph_node* %call, !dbg !5460
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local %struct.lto_out_decl_state* @lto_new_out_decl_state() #2

declare dso_local void @lto_push_out_decl_state(%struct.lto_out_decl_state*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @output_function(%struct.cgraph_node* %node) #0 !dbg !5461 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %bp = alloca %struct.bitpack_d*, align 8
  %function = alloca %union.tree_node*, align 8
  %fn = alloca %struct.function*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %ob = alloca %struct.output_block*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5462, metadata !DIExpression()), !dbg !5463
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp, metadata !5464, metadata !DIExpression()), !dbg !5465
  call void @llvm.dbg.declare(metadata %union.tree_node** %function, metadata !5466, metadata !DIExpression()), !dbg !5467
  call void @llvm.dbg.declare(metadata %struct.function** %fn, metadata !5468, metadata !DIExpression()), !dbg !5469
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5470, metadata !DIExpression()), !dbg !5471
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob, metadata !5472, metadata !DIExpression()), !dbg !5473
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5474
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !5475
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5475
  store %union.tree_node* %1, %union.tree_node** %function, align 8, !dbg !5476
  %2 = load %union.tree_node*, %union.tree_node** %function, align 8, !dbg !5477
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !5477
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !5477
  %3 = load %struct.function*, %struct.function** %f, align 8, !dbg !5477
  store %struct.function* %3, %struct.function** %fn, align 8, !dbg !5478
  %call = call %struct.output_block* @create_output_block(i32 1), !dbg !5479
  store %struct.output_block* %call, %struct.output_block** %ob, align 8, !dbg !5480
  %4 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5481
  call void @clear_line_info(%struct.output_block* %4), !dbg !5482
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5483
  %6 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5484
  %cgraph_node = getelementptr inbounds %struct.output_block, %struct.output_block* %6, i32 0, i32 6, !dbg !5485
  store %struct.cgraph_node* %5, %struct.cgraph_node** %cgraph_node, align 8, !dbg !5486
  %7 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5487
  %cmp = icmp eq %union.tree_node* %7, null, !dbg !5487
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !5487

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5487
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !5487
  %cmp1 = icmp eq %struct.function* %add.ptr, null, !dbg !5487
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !5487

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 1844, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5487
  br label %cond.end, !dbg !5487

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5487

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5487
  %9 = load %union.tree_node*, %union.tree_node** %function, align 8, !dbg !5488
  store %union.tree_node* %9, %union.tree_node** @current_function_decl, align 8, !dbg !5489
  %10 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5490
  call void @push_cfun(%struct.function* %10), !dbg !5491
  %11 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5492
  %string_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %11, i32 0, i32 3, !dbg !5493
  %12 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream, align 8, !dbg !5493
  call void @lto_output_1_stream(%struct.lto_output_stream* %12, i8 signext 0), !dbg !5494
  %13 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5495
  call void @output_record_start(%struct.output_block* %13, i32 228), !dbg !5496
  %call2 = call %struct.bitpack_d* @bitpack_create(), !dbg !5497
  store %struct.bitpack_d* %call2, %struct.bitpack_d** %bp, align 8, !dbg !5498
  %14 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5499
  %15 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5500
  %is_thunk = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 20, !dbg !5501
  %bf.load = load i32, i32* %is_thunk, align 8, !dbg !5501
  %bf.lshr = lshr i32 %bf.load, 30, !dbg !5501
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5501
  %conv = zext i32 %bf.clear to i64, !dbg !5500
  call void @bp_pack_value(%struct.bitpack_d* %14, i64 %conv, i32 1), !dbg !5502
  %16 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5503
  %17 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5504
  %has_local_explicit_reg_vars = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 20, !dbg !5505
  %bf.load3 = load i32, i32* %has_local_explicit_reg_vars, align 8, !dbg !5505
  %bf.lshr4 = lshr i32 %bf.load3, 29, !dbg !5505
  %bf.clear5 = and i32 %bf.lshr4, 1, !dbg !5505
  %conv6 = zext i32 %bf.clear5 to i64, !dbg !5504
  call void @bp_pack_value(%struct.bitpack_d* %16, i64 %conv6, i32 1), !dbg !5506
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5507
  %19 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5508
  %after_tree_profile = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 20, !dbg !5509
  %bf.load7 = load i32, i32* %after_tree_profile, align 8, !dbg !5509
  %bf.lshr8 = lshr i32 %bf.load7, 28, !dbg !5509
  %bf.clear9 = and i32 %bf.lshr8, 1, !dbg !5509
  %conv10 = zext i32 %bf.clear9 to i64, !dbg !5508
  call void @bp_pack_value(%struct.bitpack_d* %18, i64 %conv10, i32 1), !dbg !5510
  %20 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5511
  %21 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5512
  %returns_pcc_struct = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 20, !dbg !5513
  %bf.load11 = load i32, i32* %returns_pcc_struct, align 8, !dbg !5513
  %bf.lshr12 = lshr i32 %bf.load11, 27, !dbg !5513
  %bf.clear13 = and i32 %bf.lshr12, 1, !dbg !5513
  %conv14 = zext i32 %bf.clear13 to i64, !dbg !5512
  call void @bp_pack_value(%struct.bitpack_d* %20, i64 %conv14, i32 1), !dbg !5514
  %22 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5515
  %23 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5516
  %returns_struct = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 20, !dbg !5517
  %bf.load15 = load i32, i32* %returns_struct, align 8, !dbg !5517
  %bf.lshr16 = lshr i32 %bf.load15, 26, !dbg !5517
  %bf.clear17 = and i32 %bf.lshr16, 1, !dbg !5517
  %conv18 = zext i32 %bf.clear17 to i64, !dbg !5516
  call void @bp_pack_value(%struct.bitpack_d* %22, i64 %conv18, i32 1), !dbg !5518
  %24 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5519
  %25 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5520
  %always_inline_functions_inlined = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 20, !dbg !5521
  %bf.load19 = load i32, i32* %always_inline_functions_inlined, align 8, !dbg !5521
  %bf.lshr20 = lshr i32 %bf.load19, 25, !dbg !5521
  %bf.clear21 = and i32 %bf.lshr20, 1, !dbg !5521
  %conv22 = zext i32 %bf.clear21 to i64, !dbg !5520
  call void @bp_pack_value(%struct.bitpack_d* %24, i64 %conv22, i32 1), !dbg !5522
  %26 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5523
  %27 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5524
  %after_inlining = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 20, !dbg !5525
  %bf.load23 = load i32, i32* %after_inlining, align 8, !dbg !5525
  %bf.lshr24 = lshr i32 %bf.load23, 24, !dbg !5525
  %bf.clear25 = and i32 %bf.lshr24, 1, !dbg !5525
  %conv26 = zext i32 %bf.clear25 to i64, !dbg !5524
  call void @bp_pack_value(%struct.bitpack_d* %26, i64 %conv26, i32 1), !dbg !5526
  %28 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5527
  %29 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5528
  %dont_save_pending_sizes_p = getelementptr inbounds %struct.function, %struct.function* %29, i32 0, i32 20, !dbg !5529
  %bf.load27 = load i32, i32* %dont_save_pending_sizes_p, align 8, !dbg !5529
  %bf.lshr28 = lshr i32 %bf.load27, 23, !dbg !5529
  %bf.clear29 = and i32 %bf.lshr28, 1, !dbg !5529
  %conv30 = zext i32 %bf.clear29 to i64, !dbg !5528
  call void @bp_pack_value(%struct.bitpack_d* %28, i64 %conv30, i32 1), !dbg !5530
  %30 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5531
  %31 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5532
  %stdarg = getelementptr inbounds %struct.function, %struct.function* %31, i32 0, i32 20, !dbg !5533
  %bf.load31 = load i32, i32* %stdarg, align 8, !dbg !5533
  %bf.lshr32 = lshr i32 %bf.load31, 22, !dbg !5533
  %bf.clear33 = and i32 %bf.lshr32, 1, !dbg !5533
  %conv34 = zext i32 %bf.clear33 to i64, !dbg !5532
  call void @bp_pack_value(%struct.bitpack_d* %30, i64 %conv34, i32 1), !dbg !5534
  %32 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5535
  %33 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5536
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %33, i32 0, i32 20, !dbg !5537
  %bf.load35 = load i32, i32* %has_nonlocal_label, align 8, !dbg !5537
  %bf.lshr36 = lshr i32 %bf.load35, 20, !dbg !5537
  %bf.clear37 = and i32 %bf.lshr36, 1, !dbg !5537
  %conv38 = zext i32 %bf.clear37 to i64, !dbg !5536
  call void @bp_pack_value(%struct.bitpack_d* %32, i64 %conv38, i32 1), !dbg !5538
  %34 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5539
  %35 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5540
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %35, i32 0, i32 20, !dbg !5541
  %bf.load39 = load i32, i32* %calls_alloca, align 8, !dbg !5541
  %bf.lshr40 = lshr i32 %bf.load39, 19, !dbg !5541
  %bf.clear41 = and i32 %bf.lshr40, 1, !dbg !5541
  %conv42 = zext i32 %bf.clear41 to i64, !dbg !5540
  call void @bp_pack_value(%struct.bitpack_d* %34, i64 %conv42, i32 1), !dbg !5542
  %36 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5543
  %37 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5544
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %37, i32 0, i32 20, !dbg !5545
  %bf.load43 = load i32, i32* %calls_setjmp, align 8, !dbg !5545
  %bf.lshr44 = lshr i32 %bf.load43, 18, !dbg !5545
  %bf.clear45 = and i32 %bf.lshr44, 1, !dbg !5545
  %conv46 = zext i32 %bf.clear45 to i64, !dbg !5544
  call void @bp_pack_value(%struct.bitpack_d* %36, i64 %conv46, i32 1), !dbg !5546
  %38 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5547
  %39 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5548
  %function_frequency = getelementptr inbounds %struct.function, %struct.function* %39, i32 0, i32 20, !dbg !5549
  %bf.load47 = load i32, i32* %function_frequency, align 8, !dbg !5549
  %bf.lshr48 = lshr i32 %bf.load47, 16, !dbg !5549
  %bf.clear49 = and i32 %bf.lshr48, 3, !dbg !5549
  %conv50 = zext i32 %bf.clear49 to i64, !dbg !5548
  call void @bp_pack_value(%struct.bitpack_d* %38, i64 %conv50, i32 2), !dbg !5550
  %40 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5551
  %41 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5552
  %va_list_fpr_size = getelementptr inbounds %struct.function, %struct.function* %41, i32 0, i32 20, !dbg !5553
  %bf.load51 = load i32, i32* %va_list_fpr_size, align 8, !dbg !5553
  %bf.lshr52 = lshr i32 %bf.load51, 8, !dbg !5553
  %bf.clear53 = and i32 %bf.lshr52, 255, !dbg !5553
  %conv54 = zext i32 %bf.clear53 to i64, !dbg !5552
  call void @bp_pack_value(%struct.bitpack_d* %40, i64 %conv54, i32 8), !dbg !5554
  %42 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5555
  %43 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5556
  %va_list_gpr_size = getelementptr inbounds %struct.function, %struct.function* %43, i32 0, i32 20, !dbg !5557
  %bf.load55 = load i32, i32* %va_list_gpr_size, align 8, !dbg !5557
  %bf.clear56 = and i32 %bf.load55, 255, !dbg !5557
  %conv57 = zext i32 %bf.clear56 to i64, !dbg !5556
  call void @bp_pack_value(%struct.bitpack_d* %42, i64 %conv57, i32 8), !dbg !5558
  %44 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5559
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %44, i32 0, i32 2, !dbg !5560
  %45 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !5560
  %46 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5561
  call void @lto_output_bitpack(%struct.lto_output_stream* %45, %struct.bitpack_d* %46), !dbg !5562
  %47 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5563
  call void @bitpack_delete(%struct.bitpack_d* %47), !dbg !5564
  %48 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5565
  %49 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5566
  %curr_properties = getelementptr inbounds %struct.function, %struct.function* %49, i32 0, i32 17, !dbg !5567
  %50 = load i32, i32* %curr_properties, align 8, !dbg !5567
  %conv58 = zext i32 %50 to i64, !dbg !5566
  call void @output_uleb128(%struct.output_block* %48, i64 %conv58), !dbg !5568
  %51 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5569
  %52 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5570
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %52, i32 0, i32 7, !dbg !5571
  %53 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !5571
  call void @lto_output_tree_ref(%struct.output_block* %51, %union.tree_node* %53), !dbg !5572
  %54 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5573
  %55 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5574
  %nonlocal_goto_save_area = getelementptr inbounds %struct.function, %struct.function* %55, i32 0, i32 8, !dbg !5575
  %56 = load %union.tree_node*, %union.tree_node** %nonlocal_goto_save_area, align 8, !dbg !5575
  call void @lto_output_tree_ref(%struct.output_block* %54, %union.tree_node* %56), !dbg !5576
  %57 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5577
  %58 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5578
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %58, i32 0, i32 9, !dbg !5579
  %59 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !5579
  call void @lto_output_tree_ref(%struct.output_block* %57, %union.tree_node* %59), !dbg !5580
  %60 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5581
  %61 = load %union.tree_node*, %union.tree_node** %function, align 8, !dbg !5582
  %decl_non_common = bitcast %union.tree_node* %61 to %struct.tree_decl_non_common*, !dbg !5582
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !5582
  %62 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !5582
  call void @lto_output_tree_ref(%struct.output_block* %60, %union.tree_node* %62), !dbg !5583
  %63 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5584
  %64 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5585
  call void @output_ssa_names(%struct.output_block* %63, %struct.function* %64), !dbg !5586
  %65 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5587
  %66 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5588
  call void @output_eh_regions(%struct.output_block* %65, %struct.function* %66), !dbg !5589
  %67 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5590
  %68 = load %union.tree_node*, %union.tree_node** %function, align 8, !dbg !5591
  %decl_common = bitcast %union.tree_node* %68 to %struct.tree_decl_common*, !dbg !5591
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !5591
  %69 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5591
  call void @lto_output_tree(%struct.output_block* %67, %union.tree_node* %69, i8 zeroext 1), !dbg !5592
  call void @renumber_gimple_stmt_uids(), !dbg !5593
  %70 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5594
  %cfg = getelementptr inbounds %struct.function, %struct.function* %70, i32 0, i32 1, !dbg !5594
  %71 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5594
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %71, i32 0, i32 0, !dbg !5594
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5594
  store %struct.basic_block_def* %72, %struct.basic_block_def** %bb, align 8, !dbg !5594
  br label %for.cond, !dbg !5594

for.cond:                                         ; preds = %for.inc, %cond.end
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5596
  %tobool = icmp ne %struct.basic_block_def* %73, null, !dbg !5594
  br i1 %tobool, label %for.body, label %for.end, !dbg !5594

for.body:                                         ; preds = %for.cond
  %74 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5598
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5599
  %76 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5600
  call void @output_bb(%struct.output_block* %74, %struct.basic_block_def* %75, %struct.function* %76), !dbg !5601
  br label %for.inc, !dbg !5601

for.inc:                                          ; preds = %for.body
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5596
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 6, !dbg !5596
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5596
  store %struct.basic_block_def* %78, %struct.basic_block_def** %bb, align 8, !dbg !5596
  br label %for.cond, !dbg !5596, !llvm.loop !5602

for.end:                                          ; preds = %for.cond
  %79 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5604
  call void @output_zero(%struct.output_block* %79), !dbg !5605
  %80 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5606
  %81 = load %struct.function*, %struct.function** %fn, align 8, !dbg !5607
  call void @output_cfg(%struct.output_block* %80, %struct.function* %81), !dbg !5608
  %82 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5609
  %83 = load %union.tree_node*, %union.tree_node** %function, align 8, !dbg !5610
  call void @produce_asm(%struct.output_block* %82, %union.tree_node* %83), !dbg !5611
  %84 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5612
  call void @destroy_output_block(%struct.output_block* %84), !dbg !5613
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !5614
  call void @pop_cfun(), !dbg !5615
  ret void, !dbg !5616
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_function(%struct.cgraph_node* %node) #0 !dbg !5617 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %function = alloca %union.tree_node*, align 8
  %file_data = alloca %struct.lto_file_decl_data*, align 8
  %output_stream = alloca %struct.lto_output_stream*, align 8
  %data = alloca i8*, align 8
  %len = alloca i64, align 8
  %name = alloca i8*, align 8
  %section_name = alloca i8*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %in_state = alloca %struct.lto_in_decl_state*, align 8
  %out_state = alloca %struct.lto_out_decl_state*, align 8
  %n = alloca i64, align 8
  %trees = alloca %union.tree_node**, align 8
  %encoder = alloca %struct.lto_tree_ref_encoder*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5618, metadata !DIExpression()), !dbg !5619
  call void @llvm.dbg.declare(metadata %union.tree_node** %function, metadata !5620, metadata !DIExpression()), !dbg !5621
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5622
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !5623
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5623
  store %union.tree_node* %1, %union.tree_node** %function, align 8, !dbg !5621
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %file_data, metadata !5624, metadata !DIExpression()), !dbg !5625
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5626
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 18, !dbg !5627
  %lto_file_data = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 0, !dbg !5628
  %3 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %lto_file_data, align 8, !dbg !5628
  store %struct.lto_file_decl_data* %3, %struct.lto_file_decl_data** %file_data, align 8, !dbg !5625
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %output_stream, metadata !5629, metadata !DIExpression()), !dbg !5630
  %call = call i8* @xcalloc(i64 1, i64 40), !dbg !5631
  %4 = bitcast i8* %call to %struct.lto_output_stream*, !dbg !5631
  store %struct.lto_output_stream* %4, %struct.lto_output_stream** %output_stream, align 8, !dbg !5630
  call void @llvm.dbg.declare(metadata i8** %data, metadata !5632, metadata !DIExpression()), !dbg !5633
  call void @llvm.dbg.declare(metadata i64* %len, metadata !5634, metadata !DIExpression()), !dbg !5635
  call void @llvm.dbg.declare(metadata i8** %name, metadata !5636, metadata !DIExpression()), !dbg !5637
  %5 = load %union.tree_node*, %union.tree_node** %function, align 8, !dbg !5638
  %call1 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %5), !dbg !5638
  %identifier = bitcast %union.tree_node* %call1 to %struct.tree_identifier*, !dbg !5638
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !5638
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !5638
  %6 = load i8*, i8** %str, align 8, !dbg !5638
  store i8* %6, i8** %name, align 8, !dbg !5637
  call void @llvm.dbg.declare(metadata i8** %section_name, metadata !5639, metadata !DIExpression()), !dbg !5640
  %7 = load i8*, i8** %name, align 8, !dbg !5641
  %call2 = call i8* @lto_get_section_name(i32 1, i8* %7), !dbg !5642
  store i8* %call2, i8** %section_name, align 8, !dbg !5640
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5643, metadata !DIExpression()), !dbg !5644
  call void @llvm.dbg.declare(metadata i64* %j, metadata !5645, metadata !DIExpression()), !dbg !5646
  call void @llvm.dbg.declare(metadata %struct.lto_in_decl_state** %in_state, metadata !5647, metadata !DIExpression()), !dbg !5648
  call void @llvm.dbg.declare(metadata %struct.lto_out_decl_state** %out_state, metadata !5649, metadata !DIExpression()), !dbg !5650
  %call3 = call %struct.lto_out_decl_state* @lto_get_out_decl_state(), !dbg !5651
  store %struct.lto_out_decl_state* %call3, %struct.lto_out_decl_state** %out_state, align 8, !dbg !5650
  %8 = load i8*, i8** %section_name, align 8, !dbg !5652
  %9 = load i32, i32* @flag_wpa, align 4, !dbg !5653
  %tobool = icmp ne i32 %9, 0, !dbg !5654
  %lnot = xor i1 %tobool, true, !dbg !5654
  %lnot.ext = zext i1 %lnot to i32, !dbg !5654
  %conv = trunc i32 %lnot.ext to i8, !dbg !5654
  call void @lto_begin_section(i8* %8, i8 zeroext %conv), !dbg !5655
  %10 = load i8*, i8** %section_name, align 8, !dbg !5656
  call void @free(i8* %10), !dbg !5657
  %11 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data, align 8, !dbg !5658
  %12 = load i8*, i8** %name, align 8, !dbg !5659
  %call4 = call i8* @lto_get_decl_name_mapping(%struct.lto_file_decl_data* %11, i8* %12), !dbg !5660
  store i8* %call4, i8** %name, align 8, !dbg !5661
  %13 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data, align 8, !dbg !5662
  %14 = load i8*, i8** %name, align 8, !dbg !5663
  %call5 = call i8* @lto_get_section_data(%struct.lto_file_decl_data* %13, i32 1, i8* %14, i64* %len), !dbg !5664
  store i8* %call5, i8** %data, align 8, !dbg !5665
  %15 = load i8*, i8** %data, align 8, !dbg !5666
  %tobool6 = icmp ne i8* %15, null, !dbg !5666
  br i1 %tobool6, label %cond.false, label %cond.true, !dbg !5666

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 2048, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5666
  br label %cond.end, !dbg !5666

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5666

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5666
  %16 = load %struct.lto_output_stream*, %struct.lto_output_stream** %output_stream, align 8, !dbg !5667
  %17 = load i8*, i8** %data, align 8, !dbg !5668
  %18 = load i64, i64* %len, align 8, !dbg !5669
  call void @lto_output_data_stream(%struct.lto_output_stream* %16, i8* %17, i64 %18), !dbg !5670
  %19 = load %struct.lto_output_stream*, %struct.lto_output_stream** %output_stream, align 8, !dbg !5671
  call void @lto_write_stream(%struct.lto_output_stream* %19), !dbg !5672
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5673
  %local7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 18, !dbg !5674
  %lto_file_data8 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local7, i32 0, i32 0, !dbg !5675
  %21 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %lto_file_data8, align 8, !dbg !5675
  %22 = load %union.tree_node*, %union.tree_node** %function, align 8, !dbg !5676
  %call9 = call %struct.lto_in_decl_state* @lto_get_function_in_decl_state(%struct.lto_file_decl_data* %21, %union.tree_node* %22), !dbg !5677
  store %struct.lto_in_decl_state* %call9, %struct.lto_in_decl_state** %in_state, align 8, !dbg !5678
  %23 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %in_state, align 8, !dbg !5679
  %tobool10 = icmp ne %struct.lto_in_decl_state* %23, null, !dbg !5679
  br i1 %tobool10, label %cond.false12, label %cond.true11, !dbg !5679

cond.true11:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 2057, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5679
  br label %cond.end13, !dbg !5679

cond.false12:                                     ; preds = %cond.end
  br label %cond.end13, !dbg !5679

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi i32 [ 0, %cond.true11 ], [ 0, %cond.false12 ], !dbg !5679
  store i64 0, i64* %i, align 8, !dbg !5680
  br label %for.cond, !dbg !5682

for.cond:                                         ; preds = %for.inc37, %cond.end13
  %24 = load i64, i64* %i, align 8, !dbg !5683
  %cmp = icmp ult i64 %24, 7, !dbg !5685
  br i1 %cmp, label %for.body, label %for.end39, !dbg !5686

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %n, metadata !5687, metadata !DIExpression()), !dbg !5689
  %25 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %in_state, align 8, !dbg !5690
  %streams = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %25, i32 0, i32 0, !dbg !5691
  %26 = load i64, i64* %i, align 8, !dbg !5692
  %arrayidx = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams, i64 0, i64 %26, !dbg !5690
  %size = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx, i32 0, i32 1, !dbg !5693
  %27 = load i32, i32* %size, align 8, !dbg !5693
  %conv16 = zext i32 %27 to i64, !dbg !5690
  store i64 %conv16, i64* %n, align 8, !dbg !5689
  call void @llvm.dbg.declare(metadata %union.tree_node*** %trees, metadata !5694, metadata !DIExpression()), !dbg !5695
  %28 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %in_state, align 8, !dbg !5696
  %streams17 = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %28, i32 0, i32 0, !dbg !5697
  %29 = load i64, i64* %i, align 8, !dbg !5698
  %arrayidx18 = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams17, i64 0, i64 %29, !dbg !5696
  %trees19 = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx18, i32 0, i32 0, !dbg !5699
  %30 = load %union.tree_node**, %union.tree_node*** %trees19, align 8, !dbg !5699
  store %union.tree_node** %30, %union.tree_node*** %trees, align 8, !dbg !5695
  call void @llvm.dbg.declare(metadata %struct.lto_tree_ref_encoder** %encoder, metadata !5700, metadata !DIExpression()), !dbg !5702
  %31 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %out_state, align 8, !dbg !5703
  %streams20 = getelementptr inbounds %struct.lto_out_decl_state, %struct.lto_out_decl_state* %31, i32 0, i32 0, !dbg !5704
  %32 = load i64, i64* %i, align 8, !dbg !5705
  %arrayidx21 = getelementptr inbounds [7 x %struct.lto_tree_ref_encoder], [7 x %struct.lto_tree_ref_encoder]* %streams20, i64 0, i64 %32, !dbg !5703
  store %struct.lto_tree_ref_encoder* %arrayidx21, %struct.lto_tree_ref_encoder** %encoder, align 8, !dbg !5702
  %33 = load %struct.lto_tree_ref_encoder*, %struct.lto_tree_ref_encoder** %encoder, align 8, !dbg !5706
  %call22 = call i32 @lto_tree_ref_encoder_size(%struct.lto_tree_ref_encoder* %33), !dbg !5706
  %cmp23 = icmp eq i32 %call22, 0, !dbg !5706
  br i1 %cmp23, label %cond.false26, label %cond.true25, !dbg !5706

cond.true25:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 2068, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5706
  br label %cond.end27, !dbg !5706

cond.false26:                                     ; preds = %for.body
  br label %cond.end27, !dbg !5706

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi i32 [ 0, %cond.true25 ], [ 0, %cond.false26 ], !dbg !5706
  store i64 0, i64* %j, align 8, !dbg !5707
  br label %for.cond29, !dbg !5709

for.cond29:                                       ; preds = %for.inc, %cond.end27
  %34 = load i64, i64* %j, align 8, !dbg !5710
  %35 = load i64, i64* %n, align 8, !dbg !5712
  %cmp30 = icmp ult i64 %34, %35, !dbg !5713
  br i1 %cmp30, label %for.body32, label %for.end, !dbg !5714

for.body32:                                       ; preds = %for.cond29
  %36 = load %struct.lto_tree_ref_encoder*, %struct.lto_tree_ref_encoder** %encoder, align 8, !dbg !5715
  %trees33 = getelementptr inbounds %struct.lto_tree_ref_encoder, %struct.lto_tree_ref_encoder* %36, i32 0, i32 2, !dbg !5715
  %37 = load %union.tree_node**, %union.tree_node*** %trees, align 8, !dbg !5715
  %38 = load i64, i64* %j, align 8, !dbg !5715
  %arrayidx34 = getelementptr inbounds %union.tree_node*, %union.tree_node** %37, i64 %38, !dbg !5715
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx34, align 8, !dbg !5715
  %call35 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %trees33, %union.tree_node* %39), !dbg !5715
  br label %for.inc, !dbg !5715

for.inc:                                          ; preds = %for.body32
  %40 = load i64, i64* %j, align 8, !dbg !5716
  %inc = add i64 %40, 1, !dbg !5716
  store i64 %inc, i64* %j, align 8, !dbg !5716
  br label %for.cond29, !dbg !5717, !llvm.loop !5718

for.end:                                          ; preds = %for.cond29
  %41 = load i64, i64* %n, align 8, !dbg !5720
  %conv36 = trunc i64 %41 to i32, !dbg !5720
  %42 = load %struct.lto_tree_ref_encoder*, %struct.lto_tree_ref_encoder** %encoder, align 8, !dbg !5721
  %next_index = getelementptr inbounds %struct.lto_tree_ref_encoder, %struct.lto_tree_ref_encoder* %42, i32 0, i32 1, !dbg !5722
  store i32 %conv36, i32* %next_index, align 8, !dbg !5723
  br label %for.inc37, !dbg !5724

for.inc37:                                        ; preds = %for.end
  %43 = load i64, i64* %i, align 8, !dbg !5725
  %inc38 = add i64 %43, 1, !dbg !5725
  store i64 %inc38, i64* %i, align 8, !dbg !5725
  br label %for.cond, !dbg !5726, !llvm.loop !5727

for.end39:                                        ; preds = %for.cond
  %44 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data, align 8, !dbg !5729
  %45 = load i8*, i8** %name, align 8, !dbg !5730
  %46 = load i8*, i8** %data, align 8, !dbg !5731
  %47 = load i64, i64* %len, align 8, !dbg !5732
  call void @lto_free_section_data(%struct.lto_file_decl_data* %44, i32 1, i8* %45, i8* %46, i64 %47), !dbg !5733
  %48 = load %struct.lto_output_stream*, %struct.lto_output_stream** %output_stream, align 8, !dbg !5734
  %49 = bitcast %struct.lto_output_stream* %48 to i8*, !dbg !5734
  call void @free(i8* %49), !dbg !5735
  call void @lto_end_section(), !dbg !5736
  ret void, !dbg !5737
}

declare dso_local %struct.lto_out_decl_state* @lto_pop_out_decl_state() #2

declare dso_local void @lto_record_function_out_decl_state(%union.tree_node*, %struct.lto_out_decl_state*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @csi_next(%struct.cgraph_node_set_iterator* %csi) #0 !dbg !5738 {
entry:
  %csi.addr = alloca %struct.cgraph_node_set_iterator*, align 8
  store %struct.cgraph_node_set_iterator* %csi, %struct.cgraph_node_set_iterator** %csi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_iterator** %csi.addr, metadata !5742, metadata !DIExpression()), !dbg !5743
  %0 = load %struct.cgraph_node_set_iterator*, %struct.cgraph_node_set_iterator** %csi.addr, align 8, !dbg !5744
  %index = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %0, i32 0, i32 1, !dbg !5745
  %1 = load i32, i32* %index, align 8, !dbg !5746
  %inc = add i32 %1, 1, !dbg !5746
  store i32 %inc, i32* %index, align 8, !dbg !5746
  ret void, !dbg !5747
}

declare dso_local void @output_cgraph(%struct.cgraph_node_set_def*) #2

declare dso_local void @lto_bitmap_free(%struct.bitmap_head_def*) #2

declare dso_local void @lto_streamer_init() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_cgraph_node_ptr_base_length(%struct.VEC_cgraph_node_ptr_base* %vec_) #0 !dbg !5748 {
entry:
  %vec_.addr = alloca %struct.VEC_cgraph_node_ptr_base*, align 8
  store %struct.VEC_cgraph_node_ptr_base* %vec_, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_node_ptr_base** %vec_.addr, metadata !5753, metadata !DIExpression()), !dbg !5754
  %0 = load %struct.VEC_cgraph_node_ptr_base*, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8, !dbg !5754
  %tobool = icmp ne %struct.VEC_cgraph_node_ptr_base* %0, null, !dbg !5754
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5754

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_cgraph_node_ptr_base*, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8, !dbg !5754
  %num = getelementptr inbounds %struct.VEC_cgraph_node_ptr_base, %struct.VEC_cgraph_node_ptr_base* %1, i32 0, i32 0, !dbg !5754
  %2 = load i32, i32* %num, align 8, !dbg !5754
  br label %cond.end, !dbg !5754

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5754

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5754
  ret i32 %cond, !dbg !5754
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_node* @VEC_cgraph_node_ptr_base_index(%struct.VEC_cgraph_node_ptr_base* %vec_, i32 %ix_) #0 !dbg !5755 {
entry:
  %vec_.addr = alloca %struct.VEC_cgraph_node_ptr_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_cgraph_node_ptr_base* %vec_, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_node_ptr_base** %vec_.addr, metadata !5758, metadata !DIExpression()), !dbg !5759
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5760, metadata !DIExpression()), !dbg !5759
  %0 = load %struct.VEC_cgraph_node_ptr_base*, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8, !dbg !5759
  %tobool = icmp ne %struct.VEC_cgraph_node_ptr_base* %0, null, !dbg !5759
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5759

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5759
  %2 = load %struct.VEC_cgraph_node_ptr_base*, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8, !dbg !5759
  %num = getelementptr inbounds %struct.VEC_cgraph_node_ptr_base, %struct.VEC_cgraph_node_ptr_base* %2, i32 0, i32 0, !dbg !5759
  %3 = load i32, i32* %num, align 8, !dbg !5759
  %cmp = icmp ult i32 %1, %3, !dbg !5759
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5761
  %land.ext = zext i1 %4 to i32, !dbg !5759
  %5 = load %struct.VEC_cgraph_node_ptr_base*, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8, !dbg !5759
  %vec = getelementptr inbounds %struct.VEC_cgraph_node_ptr_base, %struct.VEC_cgraph_node_ptr_base* %5, i32 0, i32 2, !dbg !5759
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5759
  %idxprom = zext i32 %6 to i64, !dbg !5759
  %arrayidx = getelementptr inbounds [1 x %struct.cgraph_node*], [1 x %struct.cgraph_node*]* %vec, i64 0, i64 %idxprom, !dbg !5759
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx, align 8, !dbg !5759
  ret %struct.cgraph_node* %7, !dbg !5759
}

declare dso_local void @push_cfun(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @output_ssa_names(%struct.output_block* %ob, %struct.function* %fn) #0 !dbg !5762 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %fn.addr = alloca %struct.function*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %ptr = alloca %union.tree_node*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5765, metadata !DIExpression()), !dbg !5766
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !5767, metadata !DIExpression()), !dbg !5768
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5769, metadata !DIExpression()), !dbg !5770
  call void @llvm.dbg.declare(metadata i32* %len, metadata !5771, metadata !DIExpression()), !dbg !5772
  %0 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5773
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 3, !dbg !5773
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5773
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 2, !dbg !5773
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !5773
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !5773
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5773

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5773
  %gimple_df1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !5773
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df1, align 8, !dbg !5773
  %ssa_names2 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !5773
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names2, align 8, !dbg !5773
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i32 0, i32 0, !dbg !5773
  br label %cond.end, !dbg !5773

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5773

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5773
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !5773
  store i32 %call, i32* %len, align 4, !dbg !5774
  %6 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5775
  %7 = load i32, i32* %len, align 4, !dbg !5776
  %conv = zext i32 %7 to i64, !dbg !5776
  call void @output_uleb128(%struct.output_block* %6, i64 %conv), !dbg !5777
  store i32 1, i32* %i, align 4, !dbg !5778
  br label %for.cond, !dbg !5780

for.cond:                                         ; preds = %for.inc, %cond.end
  %8 = load i32, i32* %i, align 4, !dbg !5781
  %9 = load i32, i32* %len, align 4, !dbg !5783
  %cmp = icmp ult i32 %8, %9, !dbg !5784
  br i1 %cmp, label %for.body, label %for.end, !dbg !5785

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptr, metadata !5786, metadata !DIExpression()), !dbg !5788
  %10 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5789
  %gimple_df4 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 3, !dbg !5789
  %11 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df4, align 8, !dbg !5789
  %ssa_names5 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %11, i32 0, i32 2, !dbg !5789
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names5, align 8, !dbg !5789
  %tobool6 = icmp ne %struct.VEC_tree_gc* %12, null, !dbg !5789
  br i1 %tobool6, label %cond.true7, label %cond.false11, !dbg !5789

cond.true7:                                       ; preds = %for.body
  %13 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5789
  %gimple_df8 = getelementptr inbounds %struct.function, %struct.function* %13, i32 0, i32 3, !dbg !5789
  %14 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df8, align 8, !dbg !5789
  %ssa_names9 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %14, i32 0, i32 2, !dbg !5789
  %15 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names9, align 8, !dbg !5789
  %base10 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %15, i32 0, i32 0, !dbg !5789
  br label %cond.end12, !dbg !5789

cond.false11:                                     ; preds = %for.body
  br label %cond.end12, !dbg !5789

cond.end12:                                       ; preds = %cond.false11, %cond.true7
  %cond13 = phi %struct.VEC_tree_base* [ %base10, %cond.true7 ], [ null, %cond.false11 ], !dbg !5789
  %16 = load i32, i32* %i, align 4, !dbg !5789
  %call14 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond13, i32 %16), !dbg !5789
  store %union.tree_node* %call14, %union.tree_node** %ptr, align 8, !dbg !5788
  %17 = load %union.tree_node*, %union.tree_node** %ptr, align 8, !dbg !5790
  %cmp15 = icmp eq %union.tree_node* %17, null, !dbg !5792
  br i1 %cmp15, label %if.then, label %lor.lhs.false, !dbg !5793

lor.lhs.false:                                    ; preds = %cond.end12
  %18 = load %union.tree_node*, %union.tree_node** %ptr, align 8, !dbg !5794
  %base17 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5794
  %19 = bitcast %struct.tree_base* %base17 to i64*, !dbg !5794
  %bf.load = load i64, i64* %19, align 8, !dbg !5794
  %bf.lshr = lshr i64 %bf.load, 25, !dbg !5794
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5794
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5794
  %tobool18 = icmp ne i32 %bf.cast, 0, !dbg !5794
  br i1 %tobool18, label %if.then, label %lor.lhs.false19, !dbg !5795

lor.lhs.false19:                                  ; preds = %lor.lhs.false
  %20 = load %union.tree_node*, %union.tree_node** %ptr, align 8, !dbg !5796
  %call20 = call zeroext i8 @is_gimple_reg(%union.tree_node* %20), !dbg !5797
  %tobool21 = icmp ne i8 %call20, 0, !dbg !5797
  br i1 %tobool21, label %if.end, label %if.then, !dbg !5798

if.then:                                          ; preds = %lor.lhs.false19, %lor.lhs.false, %cond.end12
  br label %for.inc, !dbg !5799

if.end:                                           ; preds = %lor.lhs.false19
  %21 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5800
  %22 = load i32, i32* %i, align 4, !dbg !5801
  %conv22 = zext i32 %22 to i64, !dbg !5801
  call void @output_uleb128(%struct.output_block* %21, i64 %conv22), !dbg !5802
  %23 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5803
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %23, i32 0, i32 2, !dbg !5804
  %24 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !5804
  %25 = load %union.tree_node*, %union.tree_node** %ptr, align 8, !dbg !5805
  %base23 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !5805
  %26 = bitcast %struct.tree_base* %base23 to i64*, !dbg !5805
  %bf.load24 = load i64, i64* %26, align 8, !dbg !5805
  %bf.lshr25 = lshr i64 %bf.load24, 32, !dbg !5805
  %bf.clear26 = and i64 %bf.lshr25, 1, !dbg !5805
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !5805
  %conv28 = trunc i32 %bf.cast27 to i8, !dbg !5805
  call void @lto_output_1_stream(%struct.lto_output_stream* %24, i8 signext %conv28), !dbg !5806
  %27 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5807
  %28 = load %union.tree_node*, %union.tree_node** %ptr, align 8, !dbg !5808
  %ssa_name = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !5808
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5808
  %29 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5808
  call void @lto_output_tree_ref(%struct.output_block* %27, %union.tree_node* %29), !dbg !5809
  br label %for.inc, !dbg !5810

for.inc:                                          ; preds = %if.end, %if.then
  %30 = load i32, i32* %i, align 4, !dbg !5811
  %inc = add i32 %30, 1, !dbg !5811
  store i32 %inc, i32* %i, align 4, !dbg !5811
  br label %for.cond, !dbg !5812, !llvm.loop !5813

for.end:                                          ; preds = %for.cond
  %31 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5815
  call void @output_zero(%struct.output_block* %31), !dbg !5816
  ret void, !dbg !5817
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_eh_regions(%struct.output_block* %ob, %struct.function* %fn) #0 !dbg !5818 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %fn.addr = alloca %struct.function*, align 8
  %i = alloca i32, align 4
  %eh3 = alloca %struct.eh_region_d*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %ttype = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %c = alloca i8, align 1
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5819, metadata !DIExpression()), !dbg !5820
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !5821, metadata !DIExpression()), !dbg !5822
  %0 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5823
  %eh = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 0, !dbg !5825
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !5825
  %tobool = icmp ne %struct.eh_status* %1, null, !dbg !5823
  br i1 %tobool, label %land.lhs.true, label %if.end144, !dbg !5826

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5827
  %eh1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 0, !dbg !5828
  %3 = load %struct.eh_status*, %struct.eh_status** %eh1, align 8, !dbg !5828
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %3, i32 0, i32 0, !dbg !5829
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !5829
  %tobool2 = icmp ne %struct.eh_region_d* %4, null, !dbg !5827
  br i1 %tobool2, label %if.then, label %if.end144, !dbg !5830

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5831, metadata !DIExpression()), !dbg !5833
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %eh3, metadata !5834, metadata !DIExpression()), !dbg !5835
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !5836, metadata !DIExpression()), !dbg !5837
  call void @llvm.dbg.declare(metadata %union.tree_node** %ttype, metadata !5838, metadata !DIExpression()), !dbg !5839
  %5 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5840
  call void @output_record_start(%struct.output_block* %5, i32 229), !dbg !5841
  %6 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5842
  %7 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5843
  %eh4 = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 0, !dbg !5844
  %8 = load %struct.eh_status*, %struct.eh_status** %eh4, align 8, !dbg !5844
  %region_tree5 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %8, i32 0, i32 0, !dbg !5845
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree5, align 8, !dbg !5845
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %9, i32 0, i32 3, !dbg !5846
  %10 = load i32, i32* %index, align 8, !dbg !5846
  %conv = sext i32 %10 to i64, !dbg !5843
  call void @output_sleb128(%struct.output_block* %6, i64 %conv), !dbg !5847
  %11 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5848
  %12 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5849
  %eh6 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 0, !dbg !5849
  %13 = load %struct.eh_status*, %struct.eh_status** %eh6, align 8, !dbg !5849
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %13, i32 0, i32 1, !dbg !5849
  %14 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !5849
  %tobool7 = icmp ne %struct.VEC_eh_region_gc* %14, null, !dbg !5849
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !5849

cond.true:                                        ; preds = %if.then
  %15 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5849
  %eh8 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 0, !dbg !5849
  %16 = load %struct.eh_status*, %struct.eh_status** %eh8, align 8, !dbg !5849
  %region_array9 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %16, i32 0, i32 1, !dbg !5849
  %17 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array9, align 8, !dbg !5849
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %17, i32 0, i32 0, !dbg !5849
  br label %cond.end, !dbg !5849

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !5849

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5849
  %call = call i32 @VEC_eh_region_base_length(%struct.VEC_eh_region_base* %cond), !dbg !5849
  %conv10 = zext i32 %call to i64, !dbg !5849
  call void @output_sleb128(%struct.output_block* %11, i64 %conv10), !dbg !5850
  store i32 0, i32* %i, align 4, !dbg !5851
  br label %for.cond, !dbg !5853

for.cond:                                         ; preds = %for.inc, %cond.end
  %18 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5854
  %eh11 = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 0, !dbg !5854
  %19 = load %struct.eh_status*, %struct.eh_status** %eh11, align 8, !dbg !5854
  %region_array12 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %19, i32 0, i32 1, !dbg !5854
  %20 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array12, align 8, !dbg !5854
  %tobool13 = icmp ne %struct.VEC_eh_region_gc* %20, null, !dbg !5854
  br i1 %tobool13, label %cond.true14, label %cond.false18, !dbg !5854

cond.true14:                                      ; preds = %for.cond
  %21 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5854
  %eh15 = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 0, !dbg !5854
  %22 = load %struct.eh_status*, %struct.eh_status** %eh15, align 8, !dbg !5854
  %region_array16 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %22, i32 0, i32 1, !dbg !5854
  %23 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array16, align 8, !dbg !5854
  %base17 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %23, i32 0, i32 0, !dbg !5854
  br label %cond.end19, !dbg !5854

cond.false18:                                     ; preds = %for.cond
  br label %cond.end19, !dbg !5854

cond.end19:                                       ; preds = %cond.false18, %cond.true14
  %cond20 = phi %struct.VEC_eh_region_base* [ %base17, %cond.true14 ], [ null, %cond.false18 ], !dbg !5854
  %24 = load i32, i32* %i, align 4, !dbg !5854
  %call21 = call i32 @VEC_eh_region_base_iterate(%struct.VEC_eh_region_base* %cond20, i32 %24, %struct.eh_region_d** %eh3), !dbg !5854
  %tobool22 = icmp ne i32 %call21, 0, !dbg !5856
  br i1 %tobool22, label %for.body, label %for.end, !dbg !5856

for.body:                                         ; preds = %cond.end19
  %25 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5857
  %26 = load %struct.eh_region_d*, %struct.eh_region_d** %eh3, align 8, !dbg !5858
  call void @output_eh_region(%struct.output_block* %25, %struct.eh_region_d* %26), !dbg !5859
  br label %for.inc, !dbg !5859

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4, !dbg !5860
  %inc = add i32 %27, 1, !dbg !5860
  store i32 %inc, i32* %i, align 4, !dbg !5860
  br label %for.cond, !dbg !5861, !llvm.loop !5862

for.end:                                          ; preds = %cond.end19
  %28 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5864
  %29 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5865
  %eh23 = getelementptr inbounds %struct.function, %struct.function* %29, i32 0, i32 0, !dbg !5865
  %30 = load %struct.eh_status*, %struct.eh_status** %eh23, align 8, !dbg !5865
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %30, i32 0, i32 2, !dbg !5865
  %31 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !5865
  %tobool24 = icmp ne %struct.VEC_eh_landing_pad_gc* %31, null, !dbg !5865
  br i1 %tobool24, label %cond.true25, label %cond.false29, !dbg !5865

cond.true25:                                      ; preds = %for.end
  %32 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5865
  %eh26 = getelementptr inbounds %struct.function, %struct.function* %32, i32 0, i32 0, !dbg !5865
  %33 = load %struct.eh_status*, %struct.eh_status** %eh26, align 8, !dbg !5865
  %lp_array27 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %33, i32 0, i32 2, !dbg !5865
  %34 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array27, align 8, !dbg !5865
  %base28 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %34, i32 0, i32 0, !dbg !5865
  br label %cond.end30, !dbg !5865

cond.false29:                                     ; preds = %for.end
  br label %cond.end30, !dbg !5865

cond.end30:                                       ; preds = %cond.false29, %cond.true25
  %cond31 = phi %struct.VEC_eh_landing_pad_base* [ %base28, %cond.true25 ], [ null, %cond.false29 ], !dbg !5865
  %call32 = call i32 @VEC_eh_landing_pad_base_length(%struct.VEC_eh_landing_pad_base* %cond31), !dbg !5865
  %conv33 = zext i32 %call32 to i64, !dbg !5865
  call void @output_sleb128(%struct.output_block* %28, i64 %conv33), !dbg !5866
  store i32 0, i32* %i, align 4, !dbg !5867
  br label %for.cond34, !dbg !5869

for.cond34:                                       ; preds = %for.inc48, %cond.end30
  %35 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5870
  %eh35 = getelementptr inbounds %struct.function, %struct.function* %35, i32 0, i32 0, !dbg !5870
  %36 = load %struct.eh_status*, %struct.eh_status** %eh35, align 8, !dbg !5870
  %lp_array36 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %36, i32 0, i32 2, !dbg !5870
  %37 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array36, align 8, !dbg !5870
  %tobool37 = icmp ne %struct.VEC_eh_landing_pad_gc* %37, null, !dbg !5870
  br i1 %tobool37, label %cond.true38, label %cond.false42, !dbg !5870

cond.true38:                                      ; preds = %for.cond34
  %38 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5870
  %eh39 = getelementptr inbounds %struct.function, %struct.function* %38, i32 0, i32 0, !dbg !5870
  %39 = load %struct.eh_status*, %struct.eh_status** %eh39, align 8, !dbg !5870
  %lp_array40 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %39, i32 0, i32 2, !dbg !5870
  %40 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array40, align 8, !dbg !5870
  %base41 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %40, i32 0, i32 0, !dbg !5870
  br label %cond.end43, !dbg !5870

cond.false42:                                     ; preds = %for.cond34
  br label %cond.end43, !dbg !5870

cond.end43:                                       ; preds = %cond.false42, %cond.true38
  %cond44 = phi %struct.VEC_eh_landing_pad_base* [ %base41, %cond.true38 ], [ null, %cond.false42 ], !dbg !5870
  %41 = load i32, i32* %i, align 4, !dbg !5870
  %call45 = call i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %cond44, i32 %41, %struct.eh_landing_pad_d** %lp), !dbg !5870
  %tobool46 = icmp ne i32 %call45, 0, !dbg !5872
  br i1 %tobool46, label %for.body47, label %for.end50, !dbg !5872

for.body47:                                       ; preds = %cond.end43
  %42 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5873
  %43 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5874
  call void @output_eh_lp(%struct.output_block* %42, %struct.eh_landing_pad_d* %43), !dbg !5875
  br label %for.inc48, !dbg !5875

for.inc48:                                        ; preds = %for.body47
  %44 = load i32, i32* %i, align 4, !dbg !5876
  %inc49 = add i32 %44, 1, !dbg !5876
  store i32 %inc49, i32* %i, align 4, !dbg !5876
  br label %for.cond34, !dbg !5877, !llvm.loop !5878

for.end50:                                        ; preds = %cond.end43
  %45 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5880
  %46 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5881
  %eh51 = getelementptr inbounds %struct.function, %struct.function* %46, i32 0, i32 0, !dbg !5881
  %47 = load %struct.eh_status*, %struct.eh_status** %eh51, align 8, !dbg !5881
  %ttype_data = getelementptr inbounds %struct.eh_status, %struct.eh_status* %47, i32 0, i32 4, !dbg !5881
  %48 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data, align 8, !dbg !5881
  %tobool52 = icmp ne %struct.VEC_tree_gc* %48, null, !dbg !5881
  br i1 %tobool52, label %cond.true53, label %cond.false57, !dbg !5881

cond.true53:                                      ; preds = %for.end50
  %49 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5881
  %eh54 = getelementptr inbounds %struct.function, %struct.function* %49, i32 0, i32 0, !dbg !5881
  %50 = load %struct.eh_status*, %struct.eh_status** %eh54, align 8, !dbg !5881
  %ttype_data55 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %50, i32 0, i32 4, !dbg !5881
  %51 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data55, align 8, !dbg !5881
  %base56 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %51, i32 0, i32 0, !dbg !5881
  br label %cond.end58, !dbg !5881

cond.false57:                                     ; preds = %for.end50
  br label %cond.end58, !dbg !5881

cond.end58:                                       ; preds = %cond.false57, %cond.true53
  %cond59 = phi %struct.VEC_tree_base* [ %base56, %cond.true53 ], [ null, %cond.false57 ], !dbg !5881
  %call60 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond59), !dbg !5881
  %conv61 = zext i32 %call60 to i64, !dbg !5881
  call void @output_sleb128(%struct.output_block* %45, i64 %conv61), !dbg !5882
  store i32 0, i32* %i, align 4, !dbg !5883
  br label %for.cond62, !dbg !5885

for.cond62:                                       ; preds = %for.inc76, %cond.end58
  %52 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5886
  %eh63 = getelementptr inbounds %struct.function, %struct.function* %52, i32 0, i32 0, !dbg !5886
  %53 = load %struct.eh_status*, %struct.eh_status** %eh63, align 8, !dbg !5886
  %ttype_data64 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %53, i32 0, i32 4, !dbg !5886
  %54 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data64, align 8, !dbg !5886
  %tobool65 = icmp ne %struct.VEC_tree_gc* %54, null, !dbg !5886
  br i1 %tobool65, label %cond.true66, label %cond.false70, !dbg !5886

cond.true66:                                      ; preds = %for.cond62
  %55 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5886
  %eh67 = getelementptr inbounds %struct.function, %struct.function* %55, i32 0, i32 0, !dbg !5886
  %56 = load %struct.eh_status*, %struct.eh_status** %eh67, align 8, !dbg !5886
  %ttype_data68 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %56, i32 0, i32 4, !dbg !5886
  %57 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data68, align 8, !dbg !5886
  %base69 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %57, i32 0, i32 0, !dbg !5886
  br label %cond.end71, !dbg !5886

cond.false70:                                     ; preds = %for.cond62
  br label %cond.end71, !dbg !5886

cond.end71:                                       ; preds = %cond.false70, %cond.true66
  %cond72 = phi %struct.VEC_tree_base* [ %base69, %cond.true66 ], [ null, %cond.false70 ], !dbg !5886
  %58 = load i32, i32* %i, align 4, !dbg !5886
  %call73 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond72, i32 %58, %union.tree_node** %ttype), !dbg !5886
  %tobool74 = icmp ne i32 %call73, 0, !dbg !5888
  br i1 %tobool74, label %for.body75, label %for.end78, !dbg !5888

for.body75:                                       ; preds = %cond.end71
  %59 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5889
  %60 = load %union.tree_node*, %union.tree_node** %ttype, align 8, !dbg !5890
  call void @lto_output_tree_ref(%struct.output_block* %59, %union.tree_node* %60), !dbg !5891
  br label %for.inc76, !dbg !5891

for.inc76:                                        ; preds = %for.body75
  %61 = load i32, i32* %i, align 4, !dbg !5892
  %inc77 = add i32 %61, 1, !dbg !5892
  store i32 %inc77, i32* %i, align 4, !dbg !5892
  br label %for.cond62, !dbg !5893, !llvm.loop !5894

for.end78:                                        ; preds = %cond.end71
  %62 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 120), align 1, !dbg !5896
  %tobool79 = icmp ne i8 %62, 0, !dbg !5898
  br i1 %tobool79, label %if.then80, label %if.else, !dbg !5899

if.then80:                                        ; preds = %for.end78
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5900, metadata !DIExpression()), !dbg !5902
  %63 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5903
  %64 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5904
  %eh81 = getelementptr inbounds %struct.function, %struct.function* %64, i32 0, i32 0, !dbg !5904
  %65 = load %struct.eh_status*, %struct.eh_status** %eh81, align 8, !dbg !5904
  %ehspec_data = getelementptr inbounds %struct.eh_status, %struct.eh_status* %65, i32 0, i32 5, !dbg !5904
  %arm_eabi = bitcast %union.eh_status_u* %ehspec_data to %struct.VEC_tree_gc**, !dbg !5904
  %66 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi, align 8, !dbg !5904
  %tobool82 = icmp ne %struct.VEC_tree_gc* %66, null, !dbg !5904
  br i1 %tobool82, label %cond.true83, label %cond.false88, !dbg !5904

cond.true83:                                      ; preds = %if.then80
  %67 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5904
  %eh84 = getelementptr inbounds %struct.function, %struct.function* %67, i32 0, i32 0, !dbg !5904
  %68 = load %struct.eh_status*, %struct.eh_status** %eh84, align 8, !dbg !5904
  %ehspec_data85 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %68, i32 0, i32 5, !dbg !5904
  %arm_eabi86 = bitcast %union.eh_status_u* %ehspec_data85 to %struct.VEC_tree_gc**, !dbg !5904
  %69 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi86, align 8, !dbg !5904
  %base87 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %69, i32 0, i32 0, !dbg !5904
  br label %cond.end89, !dbg !5904

cond.false88:                                     ; preds = %if.then80
  br label %cond.end89, !dbg !5904

cond.end89:                                       ; preds = %cond.false88, %cond.true83
  %cond90 = phi %struct.VEC_tree_base* [ %base87, %cond.true83 ], [ null, %cond.false88 ], !dbg !5904
  %call91 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond90), !dbg !5904
  %conv92 = zext i32 %call91 to i64, !dbg !5904
  call void @output_sleb128(%struct.output_block* %63, i64 %conv92), !dbg !5905
  store i32 0, i32* %i, align 4, !dbg !5906
  br label %for.cond93, !dbg !5908

for.cond93:                                       ; preds = %for.inc109, %cond.end89
  %70 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5909
  %eh94 = getelementptr inbounds %struct.function, %struct.function* %70, i32 0, i32 0, !dbg !5909
  %71 = load %struct.eh_status*, %struct.eh_status** %eh94, align 8, !dbg !5909
  %ehspec_data95 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %71, i32 0, i32 5, !dbg !5909
  %arm_eabi96 = bitcast %union.eh_status_u* %ehspec_data95 to %struct.VEC_tree_gc**, !dbg !5909
  %72 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi96, align 8, !dbg !5909
  %tobool97 = icmp ne %struct.VEC_tree_gc* %72, null, !dbg !5909
  br i1 %tobool97, label %cond.true98, label %cond.false103, !dbg !5909

cond.true98:                                      ; preds = %for.cond93
  %73 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5909
  %eh99 = getelementptr inbounds %struct.function, %struct.function* %73, i32 0, i32 0, !dbg !5909
  %74 = load %struct.eh_status*, %struct.eh_status** %eh99, align 8, !dbg !5909
  %ehspec_data100 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %74, i32 0, i32 5, !dbg !5909
  %arm_eabi101 = bitcast %union.eh_status_u* %ehspec_data100 to %struct.VEC_tree_gc**, !dbg !5909
  %75 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi101, align 8, !dbg !5909
  %base102 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %75, i32 0, i32 0, !dbg !5909
  br label %cond.end104, !dbg !5909

cond.false103:                                    ; preds = %for.cond93
  br label %cond.end104, !dbg !5909

cond.end104:                                      ; preds = %cond.false103, %cond.true98
  %cond105 = phi %struct.VEC_tree_base* [ %base102, %cond.true98 ], [ null, %cond.false103 ], !dbg !5909
  %76 = load i32, i32* %i, align 4, !dbg !5909
  %call106 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond105, i32 %76, %union.tree_node** %t), !dbg !5909
  %tobool107 = icmp ne i32 %call106, 0, !dbg !5911
  br i1 %tobool107, label %for.body108, label %for.end111, !dbg !5911

for.body108:                                      ; preds = %cond.end104
  %77 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5912
  %78 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5913
  call void @lto_output_tree_ref(%struct.output_block* %77, %union.tree_node* %78), !dbg !5914
  br label %for.inc109, !dbg !5914

for.inc109:                                       ; preds = %for.body108
  %79 = load i32, i32* %i, align 4, !dbg !5915
  %inc110 = add i32 %79, 1, !dbg !5915
  store i32 %inc110, i32* %i, align 4, !dbg !5915
  br label %for.cond93, !dbg !5916, !llvm.loop !5917

for.end111:                                       ; preds = %cond.end104
  br label %if.end, !dbg !5919

if.else:                                          ; preds = %for.end78
  call void @llvm.dbg.declare(metadata i8* %c, metadata !5920, metadata !DIExpression()), !dbg !5922
  %80 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5923
  %81 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5924
  %eh112 = getelementptr inbounds %struct.function, %struct.function* %81, i32 0, i32 0, !dbg !5924
  %82 = load %struct.eh_status*, %struct.eh_status** %eh112, align 8, !dbg !5924
  %ehspec_data113 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %82, i32 0, i32 5, !dbg !5924
  %other = bitcast %union.eh_status_u* %ehspec_data113 to %struct.VEC_uchar_gc**, !dbg !5924
  %83 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other, align 8, !dbg !5924
  %tobool114 = icmp ne %struct.VEC_uchar_gc* %83, null, !dbg !5924
  br i1 %tobool114, label %cond.true115, label %cond.false120, !dbg !5924

cond.true115:                                     ; preds = %if.else
  %84 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5924
  %eh116 = getelementptr inbounds %struct.function, %struct.function* %84, i32 0, i32 0, !dbg !5924
  %85 = load %struct.eh_status*, %struct.eh_status** %eh116, align 8, !dbg !5924
  %ehspec_data117 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %85, i32 0, i32 5, !dbg !5924
  %other118 = bitcast %union.eh_status_u* %ehspec_data117 to %struct.VEC_uchar_gc**, !dbg !5924
  %86 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other118, align 8, !dbg !5924
  %base119 = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %86, i32 0, i32 0, !dbg !5924
  br label %cond.end121, !dbg !5924

cond.false120:                                    ; preds = %if.else
  br label %cond.end121, !dbg !5924

cond.end121:                                      ; preds = %cond.false120, %cond.true115
  %cond122 = phi %struct.VEC_uchar_base* [ %base119, %cond.true115 ], [ null, %cond.false120 ], !dbg !5924
  %call123 = call i32 @VEC_uchar_base_length(%struct.VEC_uchar_base* %cond122), !dbg !5924
  %conv124 = zext i32 %call123 to i64, !dbg !5924
  call void @output_sleb128(%struct.output_block* %80, i64 %conv124), !dbg !5925
  store i32 0, i32* %i, align 4, !dbg !5926
  br label %for.cond125, !dbg !5928

for.cond125:                                      ; preds = %for.inc141, %cond.end121
  %87 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5929
  %eh126 = getelementptr inbounds %struct.function, %struct.function* %87, i32 0, i32 0, !dbg !5929
  %88 = load %struct.eh_status*, %struct.eh_status** %eh126, align 8, !dbg !5929
  %ehspec_data127 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %88, i32 0, i32 5, !dbg !5929
  %other128 = bitcast %union.eh_status_u* %ehspec_data127 to %struct.VEC_uchar_gc**, !dbg !5929
  %89 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other128, align 8, !dbg !5929
  %tobool129 = icmp ne %struct.VEC_uchar_gc* %89, null, !dbg !5929
  br i1 %tobool129, label %cond.true130, label %cond.false135, !dbg !5929

cond.true130:                                     ; preds = %for.cond125
  %90 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5929
  %eh131 = getelementptr inbounds %struct.function, %struct.function* %90, i32 0, i32 0, !dbg !5929
  %91 = load %struct.eh_status*, %struct.eh_status** %eh131, align 8, !dbg !5929
  %ehspec_data132 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %91, i32 0, i32 5, !dbg !5929
  %other133 = bitcast %union.eh_status_u* %ehspec_data132 to %struct.VEC_uchar_gc**, !dbg !5929
  %92 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other133, align 8, !dbg !5929
  %base134 = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %92, i32 0, i32 0, !dbg !5929
  br label %cond.end136, !dbg !5929

cond.false135:                                    ; preds = %for.cond125
  br label %cond.end136, !dbg !5929

cond.end136:                                      ; preds = %cond.false135, %cond.true130
  %cond137 = phi %struct.VEC_uchar_base* [ %base134, %cond.true130 ], [ null, %cond.false135 ], !dbg !5929
  %93 = load i32, i32* %i, align 4, !dbg !5929
  %call138 = call i32 @VEC_uchar_base_iterate(%struct.VEC_uchar_base* %cond137, i32 %93, i8* %c), !dbg !5929
  %tobool139 = icmp ne i32 %call138, 0, !dbg !5931
  br i1 %tobool139, label %for.body140, label %for.end143, !dbg !5931

for.body140:                                      ; preds = %cond.end136
  %94 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5932
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %94, i32 0, i32 2, !dbg !5933
  %95 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !5933
  %96 = load i8, i8* %c, align 1, !dbg !5934
  call void @lto_output_1_stream(%struct.lto_output_stream* %95, i8 signext %96), !dbg !5935
  br label %for.inc141, !dbg !5935

for.inc141:                                       ; preds = %for.body140
  %97 = load i32, i32* %i, align 4, !dbg !5936
  %inc142 = add i32 %97, 1, !dbg !5936
  store i32 %inc142, i32* %i, align 4, !dbg !5936
  br label %for.cond125, !dbg !5937, !llvm.loop !5938

for.end143:                                       ; preds = %cond.end136
  br label %if.end

if.end:                                           ; preds = %for.end143, %for.end111
  br label %if.end144, !dbg !5940

if.end144:                                        ; preds = %if.end, %land.lhs.true, %entry
  %98 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5941
  call void @output_zero(%struct.output_block* %98), !dbg !5942
  ret void, !dbg !5943
}

declare dso_local void @renumber_gimple_stmt_uids() #2

; Function Attrs: noinline nounwind uwtable
define internal void @output_bb(%struct.output_block* %ob, %struct.basic_block_def* %bb, %struct.function* %fn) #0 !dbg !5944 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %fn.addr = alloca %struct.function*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %region = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp17 = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5947, metadata !DIExpression()), !dbg !5948
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5949, metadata !DIExpression()), !dbg !5950
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !5951, metadata !DIExpression()), !dbg !5952
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5953, metadata !DIExpression()), !dbg !5960
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5961
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %bsi, %struct.basic_block_def* %0), !dbg !5962
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5963
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5964
  %tobool = icmp ne i8 %call, 0, !dbg !5964
  br i1 %tobool, label %lor.rhs, label %lor.end, !dbg !5965

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5966
  %call1 = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %2), !dbg !5967
  %tobool2 = icmp ne %struct.gimple_seq_d* %call1, null, !dbg !5965
  br label %lor.end, !dbg !5965

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %tobool2, %lor.rhs ]
  %4 = zext i1 %3 to i64, !dbg !5968
  %cond = select i1 %3, i32 225, i32 224, !dbg !5968
  call void @output_record_start(%struct.output_block* %1, i32 %cond), !dbg !5969
  %5 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5970
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5971
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 9, !dbg !5972
  %7 = load i32, i32* %index, align 8, !dbg !5972
  %conv = sext i32 %7 to i64, !dbg !5971
  call void @output_uleb128(%struct.output_block* %5, i64 %conv), !dbg !5973
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5974
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5975
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 8, !dbg !5976
  %10 = load i64, i64* %count, align 8, !dbg !5976
  call void @output_sleb128(%struct.output_block* %8, i64 %10), !dbg !5977
  %11 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5978
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5979
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 10, !dbg !5980
  %13 = load i32, i32* %loop_depth, align 4, !dbg !5980
  %conv3 = sext i32 %13 to i64, !dbg !5979
  call void @output_sleb128(%struct.output_block* %11, i64 %conv3), !dbg !5981
  %14 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5982
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5983
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 11, !dbg !5984
  %16 = load i32, i32* %frequency, align 8, !dbg !5984
  %conv4 = sext i32 %16 to i64, !dbg !5983
  call void @output_sleb128(%struct.output_block* %14, i64 %conv4), !dbg !5985
  %17 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5986
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5987
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 13, !dbg !5988
  %19 = load i32, i32* %flags, align 8, !dbg !5988
  %conv5 = sext i32 %19 to i64, !dbg !5987
  call void @output_sleb128(%struct.output_block* %17, i64 %conv5), !dbg !5989
  %call6 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5990
  %tobool7 = icmp ne i8 %call6, 0, !dbg !5990
  br i1 %tobool7, label %lor.lhs.false, label %if.then, !dbg !5992

lor.lhs.false:                                    ; preds = %lor.end
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5993
  %call8 = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %20), !dbg !5994
  %tobool9 = icmp ne %struct.gimple_seq_d* %call8, null, !dbg !5994
  br i1 %tobool9, label %if.then, label %if.end31, !dbg !5995

if.then:                                          ; preds = %lor.lhs.false, %lor.end
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5996
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %21), !dbg !5999
  %22 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5999
  %23 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5999
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 24, i1 false), !dbg !5999
  br label %for.cond, !dbg !6000

for.cond:                                         ; preds = %for.inc, %if.then
  %call10 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6001
  %tobool11 = icmp ne i8 %call10, 0, !dbg !6003
  %lnot = xor i1 %tobool11, true, !dbg !6003
  br i1 %lnot, label %for.body, label %for.end, !dbg !6004

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %region, metadata !6005, metadata !DIExpression()), !dbg !6007
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6008, metadata !DIExpression()), !dbg !6009
  %call12 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6010
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %stmt, align 8, !dbg !6009
  %24 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6011
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6012
  call void @output_gimple_stmt(%struct.output_block* %24, %union.gimple_statement_d* %25), !dbg !6013
  %26 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !6014
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6015
  %call13 = call i32 @lookup_stmt_eh_lp_fn(%struct.function* %26, %union.gimple_statement_d* %27), !dbg !6016
  store i32 %call13, i32* %region, align 4, !dbg !6017
  %28 = load i32, i32* %region, align 4, !dbg !6018
  %cmp = icmp ne i32 %28, 0, !dbg !6020
  br i1 %cmp, label %if.then15, label %if.else, !dbg !6021

if.then15:                                        ; preds = %for.body
  %29 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6022
  call void @output_record_start(%struct.output_block* %29, i32 226), !dbg !6024
  %30 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6025
  %31 = load i32, i32* %region, align 4, !dbg !6026
  %conv16 = sext i32 %31 to i64, !dbg !6026
  call void @output_sleb128(%struct.output_block* %30, i64 %conv16), !dbg !6027
  br label %if.end, !dbg !6028

if.else:                                          ; preds = %for.body
  %32 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6029
  call void @output_zero(%struct.output_block* %32), !dbg !6030
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then15
  br label %for.inc, !dbg !6031

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !6032
  br label %for.cond, !dbg !6033, !llvm.loop !6034

for.end:                                          ; preds = %for.cond
  %33 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6036
  call void @output_zero(%struct.output_block* %33), !dbg !6037
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6038
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp17, %struct.basic_block_def* %34), !dbg !6040
  %35 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !6040
  %36 = bitcast %struct.gimple_stmt_iterator* %tmp17 to i8*, !dbg !6040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false), !dbg !6040
  br label %for.cond18, !dbg !6041

for.cond18:                                       ; preds = %for.inc29, %for.end
  %call19 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6042
  %tobool20 = icmp ne i8 %call19, 0, !dbg !6044
  %lnot21 = xor i1 %tobool20, true, !dbg !6044
  br i1 %lnot21, label %for.body22, label %for.end30, !dbg !6045

for.body22:                                       ; preds = %for.cond18
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !6046, metadata !DIExpression()), !dbg !6048
  %call23 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6049
  store %union.gimple_statement_d* %call23, %union.gimple_statement_d** %phi, align 8, !dbg !6048
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6050
  %call24 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %37), !dbg !6052
  %call25 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call24), !dbg !6053
  %tobool26 = icmp ne i8 %call25, 0, !dbg !6053
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !6054

if.then27:                                        ; preds = %for.body22
  %38 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6055
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6056
  call void @output_phi(%struct.output_block* %38, %union.gimple_statement_d* %39), !dbg !6057
  br label %if.end28, !dbg !6057

if.end28:                                         ; preds = %if.then27, %for.body22
  br label %for.inc29, !dbg !6058

for.inc29:                                        ; preds = %if.end28
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !6059
  br label %for.cond18, !dbg !6060, !llvm.loop !6061

for.end30:                                        ; preds = %for.cond18
  %40 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6063
  call void @output_zero(%struct.output_block* %40), !dbg !6064
  br label %if.end31, !dbg !6065

if.end31:                                         ; preds = %for.end30, %lor.lhs.false
  ret void, !dbg !6066
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_cfg(%struct.output_block* %ob, %struct.function* %fn) #0 !dbg !6067 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %fn.addr = alloca %struct.function*, align 8
  %tmp_stream = alloca %struct.lto_output_stream*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !6068, metadata !DIExpression()), !dbg !6069
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !6070, metadata !DIExpression()), !dbg !6071
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %tmp_stream, metadata !6072, metadata !DIExpression()), !dbg !6073
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6074
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %0, i32 0, i32 2, !dbg !6075
  %1 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !6075
  store %struct.lto_output_stream* %1, %struct.lto_output_stream** %tmp_stream, align 8, !dbg !6073
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6076, metadata !DIExpression()), !dbg !6077
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6078
  %cfg_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %2, i32 0, i32 4, !dbg !6079
  %3 = load %struct.lto_output_stream*, %struct.lto_output_stream** %cfg_stream, align 8, !dbg !6079
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6080
  %main_stream1 = getelementptr inbounds %struct.output_block, %struct.output_block* %4, i32 0, i32 2, !dbg !6081
  store %struct.lto_output_stream* %3, %struct.lto_output_stream** %main_stream1, align 8, !dbg !6082
  %5 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6083
  %6 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !6084
  %cfg = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 1, !dbg !6084
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6084
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 7, !dbg !6084
  %8 = load i32, i32* %x_profile_status, align 8, !dbg !6084
  %conv = zext i32 %8 to i64, !dbg !6084
  call void @output_uleb128(%struct.output_block* %5, i64 %conv), !dbg !6085
  %9 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6086
  %10 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !6087
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1, !dbg !6087
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !6087
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 5, !dbg !6087
  %12 = load i32, i32* %x_last_basic_block, align 8, !dbg !6087
  %conv3 = sext i32 %12 to i64, !dbg !6087
  call void @output_uleb128(%struct.output_block* %9, i64 %conv3), !dbg !6088
  %13 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !6089
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %13, i32 0, i32 1, !dbg !6089
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !6089
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 0, !dbg !6089
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6089
  store %struct.basic_block_def* %15, %struct.basic_block_def** %bb, align 8, !dbg !6089
  br label %for.cond, !dbg !6089

for.cond:                                         ; preds = %for.inc19, %entry
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6091
  %tobool = icmp ne %struct.basic_block_def* %16, null, !dbg !6089
  br i1 %tobool, label %for.body, label %for.end20, !dbg !6089

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6093, metadata !DIExpression()), !dbg !6101
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6102, metadata !DIExpression()), !dbg !6103
  %17 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6104
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6105
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 9, !dbg !6106
  %19 = load i32, i32* %index, align 8, !dbg !6106
  %conv5 = sext i32 %19 to i64, !dbg !6105
  call void @output_sleb128(%struct.output_block* %17, i64 %conv5), !dbg !6107
  %20 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6108
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6109
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 1, !dbg !6109
  %22 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6109
  %tobool6 = icmp ne %struct.VEC_edge_gc* %22, null, !dbg !6109
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !6109

cond.true:                                        ; preds = %for.body
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6109
  %succs7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 1, !dbg !6109
  %24 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs7, align 8, !dbg !6109
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %24, i32 0, i32 0, !dbg !6109
  br label %cond.end, !dbg !6109

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !6109

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6109
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6109
  %conv8 = zext i32 %call to i64, !dbg !6109
  call void @output_uleb128(%struct.output_block* %20, i64 %conv8), !dbg !6110
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6111
  %succs9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 1, !dbg !6111
  %call10 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs9), !dbg !6111
  %26 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6111
  %27 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %26, i32 0, i32 0, !dbg !6111
  %28 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 0, !dbg !6111
  store i32 %28, i32* %27, align 8, !dbg !6111
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %26, i32 0, i32 1, !dbg !6111
  %30 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 1, !dbg !6111
  store %struct.VEC_edge_gc** %30, %struct.VEC_edge_gc*** %29, align 8, !dbg !6111
  %31 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6111
  %32 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6111
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 16, i1 false), !dbg !6111
  br label %for.cond11, !dbg !6111

for.cond11:                                       ; preds = %for.inc, %cond.end
  %33 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6113
  %34 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %33, i32 0, i32 0, !dbg !6113
  %35 = load i32, i32* %34, align 8, !dbg !6113
  %36 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %33, i32 0, i32 1, !dbg !6113
  %37 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %36, align 8, !dbg !6113
  %call12 = call zeroext i8 @ei_cond(i32 %35, %struct.VEC_edge_gc** %37, %struct.edge_def** %e), !dbg !6113
  %tobool13 = icmp ne i8 %call12, 0, !dbg !6111
  br i1 %tobool13, label %for.body14, label %for.end, !dbg !6111

for.body14:                                       ; preds = %for.cond11
  %38 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6115
  %39 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6117
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 1, !dbg !6118
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6118
  %index15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 9, !dbg !6119
  %41 = load i32, i32* %index15, align 8, !dbg !6119
  %conv16 = sext i32 %41 to i64, !dbg !6117
  call void @output_uleb128(%struct.output_block* %38, i64 %conv16), !dbg !6120
  %42 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6121
  %43 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6122
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 8, !dbg !6123
  %44 = load i32, i32* %probability, align 4, !dbg !6123
  %conv17 = sext i32 %44 to i64, !dbg !6122
  call void @output_sleb128(%struct.output_block* %42, i64 %conv17), !dbg !6124
  %45 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6125
  %46 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6126
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 9, !dbg !6127
  %47 = load i64, i64* %count, align 8, !dbg !6127
  call void @output_sleb128(%struct.output_block* %45, i64 %47), !dbg !6128
  %48 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6129
  %49 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6130
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 7, !dbg !6131
  %50 = load i32, i32* %flags, align 8, !dbg !6131
  %conv18 = sext i32 %50 to i64, !dbg !6130
  call void @output_uleb128(%struct.output_block* %48, i64 %conv18), !dbg !6132
  br label %for.inc, !dbg !6133

for.inc:                                          ; preds = %for.body14
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6113
  br label %for.cond11, !dbg !6113, !llvm.loop !6134

for.end:                                          ; preds = %for.cond11
  br label %for.inc19, !dbg !6136

for.inc19:                                        ; preds = %for.end
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6091
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 6, !dbg !6091
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6091
  store %struct.basic_block_def* %52, %struct.basic_block_def** %bb, align 8, !dbg !6091
  br label %for.cond, !dbg !6091, !llvm.loop !6137

for.end20:                                        ; preds = %for.cond
  %53 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6139
  call void @output_sleb128(%struct.output_block* %53, i64 -1), !dbg !6140
  %54 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6141
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %54, i64 0, !dbg !6141
  %cfg21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6141
  %55 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg21, align 8, !dbg !6141
  %x_entry_block_ptr22 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %55, i32 0, i32 0, !dbg !6141
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr22, align 8, !dbg !6141
  store %struct.basic_block_def* %56, %struct.basic_block_def** %bb, align 8, !dbg !6142
  br label %while.cond, !dbg !6143

while.cond:                                       ; preds = %while.body, %for.end20
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6144
  %next_bb23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 6, !dbg !6145
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb23, align 8, !dbg !6145
  %tobool24 = icmp ne %struct.basic_block_def* %58, null, !dbg !6143
  br i1 %tobool24, label %while.body, label %while.end, !dbg !6143

while.body:                                       ; preds = %while.cond
  %59 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6146
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6148
  %next_bb25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 6, !dbg !6149
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb25, align 8, !dbg !6149
  %index26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 9, !dbg !6150
  %62 = load i32, i32* %index26, align 8, !dbg !6150
  %conv27 = sext i32 %62 to i64, !dbg !6148
  call void @output_sleb128(%struct.output_block* %59, i64 %conv27), !dbg !6151
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6152
  %next_bb28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 6, !dbg !6153
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb28, align 8, !dbg !6153
  store %struct.basic_block_def* %64, %struct.basic_block_def** %bb, align 8, !dbg !6154
  br label %while.cond, !dbg !6143, !llvm.loop !6155

while.end:                                        ; preds = %while.cond
  %65 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6157
  call void @output_sleb128(%struct.output_block* %65, i64 -1), !dbg !6158
  %66 = load %struct.lto_output_stream*, %struct.lto_output_stream** %tmp_stream, align 8, !dbg !6159
  %67 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6160
  %main_stream29 = getelementptr inbounds %struct.output_block, %struct.output_block* %67, i32 0, i32 2, !dbg !6161
  store %struct.lto_output_stream* %66, %struct.lto_output_stream** %main_stream29, align 8, !dbg !6162
  ret void, !dbg !6163
}

declare dso_local void @pop_cfun() #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !6164 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6167, metadata !DIExpression()), !dbg !6168
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6169, metadata !DIExpression()), !dbg !6168
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6168
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6168
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6168

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6168
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6168
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !6168
  %3 = load i32, i32* %num, align 8, !dbg !6168
  %cmp = icmp ult i32 %1, %3, !dbg !6168
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6170
  %land.ext = zext i1 %4 to i32, !dbg !6168
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6168
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !6168
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6168
  %idxprom = zext i32 %6 to i64, !dbg !6168
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6168
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6168
  ret %union.tree_node* %7, !dbg !6168
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_base_length(%struct.VEC_eh_region_base* %vec_) #0 !dbg !6171 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !6176, metadata !DIExpression()), !dbg !6177
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6177
  %tobool = icmp ne %struct.VEC_eh_region_base* %0, null, !dbg !6177
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6177

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6177
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %1, i32 0, i32 0, !dbg !6177
  %2 = load i32, i32* %num, align 8, !dbg !6177
  br label %cond.end, !dbg !6177

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6177

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6177
  ret i32 %cond, !dbg !6177
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_base_iterate(%struct.VEC_eh_region_base* %vec_, i32 %ix_, %struct.eh_region_d** %ptr) #0 !dbg !6178 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.eh_region_d**, align 8
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !6182, metadata !DIExpression()), !dbg !6183
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6184, metadata !DIExpression()), !dbg !6183
  store %struct.eh_region_d** %ptr, %struct.eh_region_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d*** %ptr.addr, metadata !6185, metadata !DIExpression()), !dbg !6183
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6186
  %tobool = icmp ne %struct.VEC_eh_region_base* %0, null, !dbg !6186
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6186

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6186
  %2 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6186
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %2, i32 0, i32 0, !dbg !6186
  %3 = load i32, i32* %num, align 8, !dbg !6186
  %cmp = icmp ult i32 %1, %3, !dbg !6186
  br i1 %cmp, label %if.then, label %if.else, !dbg !6183

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6188
  %vec = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %4, i32 0, i32 2, !dbg !6188
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6188
  %idxprom = zext i32 %5 to i64, !dbg !6188
  %arrayidx = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec, i64 0, i64 %idxprom, !dbg !6188
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %arrayidx, align 8, !dbg !6188
  %7 = load %struct.eh_region_d**, %struct.eh_region_d*** %ptr.addr, align 8, !dbg !6188
  store %struct.eh_region_d* %6, %struct.eh_region_d** %7, align 8, !dbg !6188
  store i32 1, i32* %retval, align 4, !dbg !6188
  br label %return, !dbg !6188

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.eh_region_d**, %struct.eh_region_d*** %ptr.addr, align 8, !dbg !6190
  store %struct.eh_region_d* null, %struct.eh_region_d** %8, align 8, !dbg !6190
  store i32 0, i32* %retval, align 4, !dbg !6190
  br label %return, !dbg !6190

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6183
  ret i32 %9, !dbg !6183
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_eh_region(%struct.output_block* %ob, %struct.eh_region_d* %r) #0 !dbg !6192 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %r.addr = alloca %struct.eh_region_d*, align 8
  %tag = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !6195, metadata !DIExpression()), !dbg !6196
  store %struct.eh_region_d* %r, %struct.eh_region_d** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r.addr, metadata !6197, metadata !DIExpression()), !dbg !6198
  call void @llvm.dbg.declare(metadata i32* %tag, metadata !6199, metadata !DIExpression()), !dbg !6200
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6201
  %cmp = icmp eq %struct.eh_region_d* %0, null, !dbg !6203
  br i1 %cmp, label %if.then, label %if.end, !dbg !6204

if.then:                                          ; preds = %entry
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6205
  call void @output_zero(%struct.output_block* %1), !dbg !6207
  br label %if.end71, !dbg !6208

if.end:                                           ; preds = %entry
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6209
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %2, i32 0, i32 4, !dbg !6211
  %3 = load i32, i32* %type, align 4, !dbg !6211
  %cmp1 = icmp eq i32 %3, 0, !dbg !6212
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !6213

if.then2:                                         ; preds = %if.end
  store i32 230, i32* %tag, align 4, !dbg !6214
  br label %if.end18, !dbg !6215

if.else:                                          ; preds = %if.end
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6216
  %type3 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i32 0, i32 4, !dbg !6218
  %5 = load i32, i32* %type3, align 4, !dbg !6218
  %cmp4 = icmp eq i32 %5, 1, !dbg !6219
  br i1 %cmp4, label %if.then5, label %if.else6, !dbg !6220

if.then5:                                         ; preds = %if.else
  store i32 231, i32* %tag, align 4, !dbg !6221
  br label %if.end17, !dbg !6222

if.else6:                                         ; preds = %if.else
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6223
  %type7 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %6, i32 0, i32 4, !dbg !6225
  %7 = load i32, i32* %type7, align 4, !dbg !6225
  %cmp8 = icmp eq i32 %7, 2, !dbg !6226
  br i1 %cmp8, label %if.then9, label %if.else10, !dbg !6227

if.then9:                                         ; preds = %if.else6
  store i32 232, i32* %tag, align 4, !dbg !6228
  br label %if.end16, !dbg !6229

if.else10:                                        ; preds = %if.else6
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6230
  %type11 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %8, i32 0, i32 4, !dbg !6232
  %9 = load i32, i32* %type11, align 4, !dbg !6232
  %cmp12 = icmp eq i32 %9, 3, !dbg !6233
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !6234

if.then13:                                        ; preds = %if.else10
  store i32 233, i32* %tag, align 4, !dbg !6235
  br label %if.end15, !dbg !6236

if.else14:                                        ; preds = %if.else10
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 1415, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6237
  br label %if.end15

if.end15:                                         ; preds = %if.else14, %if.then13
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then9
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.then5
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then2
  %10 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6238
  %11 = load i32, i32* %tag, align 4, !dbg !6239
  call void @output_record_start(%struct.output_block* %10, i32 %11), !dbg !6240
  %12 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6241
  %13 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6242
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %13, i32 0, i32 3, !dbg !6243
  %14 = load i32, i32* %index, align 8, !dbg !6243
  %conv = sext i32 %14 to i64, !dbg !6242
  call void @output_sleb128(%struct.output_block* %12, i64 %conv), !dbg !6244
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6245
  %outer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %15, i32 0, i32 0, !dbg !6247
  %16 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !6247
  %tobool = icmp ne %struct.eh_region_d* %16, null, !dbg !6245
  br i1 %tobool, label %if.then19, label %if.else23, !dbg !6248

if.then19:                                        ; preds = %if.end18
  %17 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6249
  %18 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6250
  %outer20 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %18, i32 0, i32 0, !dbg !6251
  %19 = load %struct.eh_region_d*, %struct.eh_region_d** %outer20, align 8, !dbg !6251
  %index21 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %19, i32 0, i32 3, !dbg !6252
  %20 = load i32, i32* %index21, align 8, !dbg !6252
  %conv22 = sext i32 %20 to i64, !dbg !6250
  call void @output_sleb128(%struct.output_block* %17, i64 %conv22), !dbg !6253
  br label %if.end24, !dbg !6253

if.else23:                                        ; preds = %if.end18
  %21 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6254
  call void @output_zero(%struct.output_block* %21), !dbg !6255
  br label %if.end24

if.end24:                                         ; preds = %if.else23, %if.then19
  %22 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6256
  %inner = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %22, i32 0, i32 1, !dbg !6258
  %23 = load %struct.eh_region_d*, %struct.eh_region_d** %inner, align 8, !dbg !6258
  %tobool25 = icmp ne %struct.eh_region_d* %23, null, !dbg !6256
  br i1 %tobool25, label %if.then26, label %if.else30, !dbg !6259

if.then26:                                        ; preds = %if.end24
  %24 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6260
  %25 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6261
  %inner27 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %25, i32 0, i32 1, !dbg !6262
  %26 = load %struct.eh_region_d*, %struct.eh_region_d** %inner27, align 8, !dbg !6262
  %index28 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %26, i32 0, i32 3, !dbg !6263
  %27 = load i32, i32* %index28, align 8, !dbg !6263
  %conv29 = sext i32 %27 to i64, !dbg !6261
  call void @output_sleb128(%struct.output_block* %24, i64 %conv29), !dbg !6264
  br label %if.end31, !dbg !6264

if.else30:                                        ; preds = %if.end24
  %28 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6265
  call void @output_zero(%struct.output_block* %28), !dbg !6266
  br label %if.end31

if.end31:                                         ; preds = %if.else30, %if.then26
  %29 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6267
  %next_peer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %29, i32 0, i32 2, !dbg !6269
  %30 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer, align 8, !dbg !6269
  %tobool32 = icmp ne %struct.eh_region_d* %30, null, !dbg !6267
  br i1 %tobool32, label %if.then33, label %if.else37, !dbg !6270

if.then33:                                        ; preds = %if.end31
  %31 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6271
  %32 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6272
  %next_peer34 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %32, i32 0, i32 2, !dbg !6273
  %33 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer34, align 8, !dbg !6273
  %index35 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %33, i32 0, i32 3, !dbg !6274
  %34 = load i32, i32* %index35, align 8, !dbg !6274
  %conv36 = sext i32 %34 to i64, !dbg !6272
  call void @output_sleb128(%struct.output_block* %31, i64 %conv36), !dbg !6275
  br label %if.end38, !dbg !6275

if.else37:                                        ; preds = %if.end31
  %35 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6276
  call void @output_zero(%struct.output_block* %35), !dbg !6277
  br label %if.end38

if.end38:                                         ; preds = %if.else37, %if.then33
  %36 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6278
  %type39 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %36, i32 0, i32 4, !dbg !6280
  %37 = load i32, i32* %type39, align 4, !dbg !6280
  %cmp40 = icmp eq i32 %37, 1, !dbg !6281
  br i1 %cmp40, label %if.then42, label %if.else43, !dbg !6282

if.then42:                                        ; preds = %if.end38
  %38 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6283
  %39 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6285
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %39, i32 0, i32 5, !dbg !6286
  %eh_try = bitcast %union.eh_region_u* %u to %struct.eh_region_u_try*, !dbg !6287
  %first_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 0, !dbg !6288
  %40 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first_catch, align 8, !dbg !6288
  call void @output_eh_try_list(%struct.output_block* %38, %struct.eh_catch_d* %40), !dbg !6289
  br label %if.end64, !dbg !6290

if.else43:                                        ; preds = %if.end38
  %41 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6291
  %type44 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %41, i32 0, i32 4, !dbg !6293
  %42 = load i32, i32* %type44, align 4, !dbg !6293
  %cmp45 = icmp eq i32 %42, 2, !dbg !6294
  br i1 %cmp45, label %if.then47, label %if.else54, !dbg !6295

if.then47:                                        ; preds = %if.else43
  %43 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6296
  %44 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6298
  %u48 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %44, i32 0, i32 5, !dbg !6299
  %allowed = bitcast %union.eh_region_u* %u48 to %struct.eh_region_u_allowed*, !dbg !6300
  %type_list = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 0, !dbg !6301
  %45 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !6301
  call void @lto_output_tree_ref(%struct.output_block* %43, %union.tree_node* %45), !dbg !6302
  %46 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6303
  %47 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6304
  %u49 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %47, i32 0, i32 5, !dbg !6305
  %allowed50 = bitcast %union.eh_region_u* %u49 to %struct.eh_region_u_allowed*, !dbg !6306
  %label = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed50, i32 0, i32 1, !dbg !6307
  %48 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !6307
  call void @lto_output_tree_ref(%struct.output_block* %46, %union.tree_node* %48), !dbg !6308
  %49 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6309
  %50 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6310
  %u51 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %50, i32 0, i32 5, !dbg !6311
  %allowed52 = bitcast %union.eh_region_u* %u51 to %struct.eh_region_u_allowed*, !dbg !6312
  %filter = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed52, i32 0, i32 2, !dbg !6313
  %51 = load i32, i32* %filter, align 8, !dbg !6313
  %conv53 = sext i32 %51 to i64, !dbg !6310
  call void @output_uleb128(%struct.output_block* %49, i64 %conv53), !dbg !6314
  br label %if.end63, !dbg !6315

if.else54:                                        ; preds = %if.else43
  %52 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6316
  %type55 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %52, i32 0, i32 4, !dbg !6318
  %53 = load i32, i32* %type55, align 4, !dbg !6318
  %cmp56 = icmp eq i32 %53, 3, !dbg !6319
  br i1 %cmp56, label %if.then58, label %if.end62, !dbg !6320

if.then58:                                        ; preds = %if.else54
  %54 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6321
  %55 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6323
  %u59 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %55, i32 0, i32 5, !dbg !6324
  %must_not_throw = bitcast %union.eh_region_u* %u59 to %struct.eh_region_u_must_not_throw*, !dbg !6325
  %failure_decl = getelementptr inbounds %struct.eh_region_u_must_not_throw, %struct.eh_region_u_must_not_throw* %must_not_throw, i32 0, i32 0, !dbg !6326
  %56 = load %union.tree_node*, %union.tree_node** %failure_decl, align 8, !dbg !6326
  call void @lto_output_tree_ref(%struct.output_block* %54, %union.tree_node* %56), !dbg !6327
  %57 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6328
  %58 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6329
  %u60 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %58, i32 0, i32 5, !dbg !6330
  %must_not_throw61 = bitcast %union.eh_region_u* %u60 to %struct.eh_region_u_must_not_throw*, !dbg !6331
  %failure_loc = getelementptr inbounds %struct.eh_region_u_must_not_throw, %struct.eh_region_u_must_not_throw* %must_not_throw61, i32 0, i32 1, !dbg !6332
  %59 = load i32, i32* %failure_loc, align 8, !dbg !6332
  call void @lto_output_location(%struct.output_block* %57, i32 %59), !dbg !6333
  br label %if.end62, !dbg !6334

if.end62:                                         ; preds = %if.then58, %if.else54
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then47
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then42
  %60 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6335
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %60, i32 0, i32 6, !dbg !6337
  %61 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads, align 8, !dbg !6337
  %tobool65 = icmp ne %struct.eh_landing_pad_d* %61, null, !dbg !6335
  br i1 %tobool65, label %if.then66, label %if.else70, !dbg !6338

if.then66:                                        ; preds = %if.end64
  %62 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6339
  %63 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6340
  %landing_pads67 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %63, i32 0, i32 6, !dbg !6341
  %64 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads67, align 8, !dbg !6341
  %index68 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %64, i32 0, i32 4, !dbg !6342
  %65 = load i32, i32* %index68, align 8, !dbg !6342
  %conv69 = sext i32 %65 to i64, !dbg !6340
  call void @output_sleb128(%struct.output_block* %62, i64 %conv69), !dbg !6343
  br label %if.end71, !dbg !6343

if.else70:                                        ; preds = %if.end64
  %66 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6344
  call void @output_zero(%struct.output_block* %66), !dbg !6345
  br label %if.end71

if.end71:                                         ; preds = %if.then, %if.else70, %if.then66
  ret void, !dbg !6346
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_base_length(%struct.VEC_eh_landing_pad_base* %vec_) #0 !dbg !6347 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !6352, metadata !DIExpression()), !dbg !6353
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6353
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !6353
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6353

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6353
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %1, i32 0, i32 0, !dbg !6353
  %2 = load i32, i32* %num, align 8, !dbg !6353
  br label %cond.end, !dbg !6353

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6353

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6353
  ret i32 %cond, !dbg !6353
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %vec_, i32 %ix_, %struct.eh_landing_pad_d** %ptr) #0 !dbg !6354 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.eh_landing_pad_d**, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !6358, metadata !DIExpression()), !dbg !6359
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6360, metadata !DIExpression()), !dbg !6359
  store %struct.eh_landing_pad_d** %ptr, %struct.eh_landing_pad_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d*** %ptr.addr, metadata !6361, metadata !DIExpression()), !dbg !6359
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6362
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !6362
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6362

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6362
  %2 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6362
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %2, i32 0, i32 0, !dbg !6362
  %3 = load i32, i32* %num, align 8, !dbg !6362
  %cmp = icmp ult i32 %1, %3, !dbg !6362
  br i1 %cmp, label %if.then, label %if.else, !dbg !6359

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6364
  %vec = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %4, i32 0, i32 2, !dbg !6364
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6364
  %idxprom = zext i32 %5 to i64, !dbg !6364
  %arrayidx = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec, i64 0, i64 %idxprom, !dbg !6364
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %arrayidx, align 8, !dbg !6364
  %7 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %ptr.addr, align 8, !dbg !6364
  store %struct.eh_landing_pad_d* %6, %struct.eh_landing_pad_d** %7, align 8, !dbg !6364
  store i32 1, i32* %retval, align 4, !dbg !6364
  br label %return, !dbg !6364

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %ptr.addr, align 8, !dbg !6366
  store %struct.eh_landing_pad_d* null, %struct.eh_landing_pad_d** %8, align 8, !dbg !6366
  store i32 0, i32* %retval, align 4, !dbg !6366
  br label %return, !dbg !6366

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6359
  ret i32 %9, !dbg !6359
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_eh_lp(%struct.output_block* %ob, %struct.eh_landing_pad_d* %lp) #0 !dbg !6368 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %lp.addr = alloca %struct.eh_landing_pad_d*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !6371, metadata !DIExpression()), !dbg !6372
  store %struct.eh_landing_pad_d* %lp, %struct.eh_landing_pad_d** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp.addr, metadata !6373, metadata !DIExpression()), !dbg !6374
  %0 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !6375
  %cmp = icmp eq %struct.eh_landing_pad_d* %0, null, !dbg !6377
  br i1 %cmp, label %if.then, label %if.end, !dbg !6378

if.then:                                          ; preds = %entry
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6379
  call void @output_zero(%struct.output_block* %1), !dbg !6381
  br label %return, !dbg !6382

if.end:                                           ; preds = %entry
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6383
  call void @output_record_start(%struct.output_block* %2, i32 234), !dbg !6384
  %3 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6385
  %4 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !6386
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %4, i32 0, i32 4, !dbg !6387
  %5 = load i32, i32* %index, align 8, !dbg !6387
  %conv = sext i32 %5 to i64, !dbg !6386
  call void @output_sleb128(%struct.output_block* %3, i64 %conv), !dbg !6388
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !6389
  %next_lp = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %6, i32 0, i32 0, !dbg !6391
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp, align 8, !dbg !6391
  %tobool = icmp ne %struct.eh_landing_pad_d* %7, null, !dbg !6389
  br i1 %tobool, label %if.then1, label %if.else, !dbg !6392

if.then1:                                         ; preds = %if.end
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6393
  %9 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !6394
  %next_lp2 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %9, i32 0, i32 0, !dbg !6395
  %10 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp2, align 8, !dbg !6395
  %index3 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %10, i32 0, i32 4, !dbg !6396
  %11 = load i32, i32* %index3, align 8, !dbg !6396
  %conv4 = sext i32 %11 to i64, !dbg !6394
  call void @output_sleb128(%struct.output_block* %8, i64 %conv4), !dbg !6397
  br label %if.end5, !dbg !6397

if.else:                                          ; preds = %if.end
  %12 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6398
  call void @output_zero(%struct.output_block* %12), !dbg !6399
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then1
  %13 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !6400
  %region = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %13, i32 0, i32 1, !dbg !6402
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !6402
  %tobool6 = icmp ne %struct.eh_region_d* %14, null, !dbg !6400
  br i1 %tobool6, label %if.then7, label %if.else11, !dbg !6403

if.then7:                                         ; preds = %if.end5
  %15 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6404
  %16 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !6405
  %region8 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %16, i32 0, i32 1, !dbg !6406
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %region8, align 8, !dbg !6406
  %index9 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %17, i32 0, i32 3, !dbg !6407
  %18 = load i32, i32* %index9, align 8, !dbg !6407
  %conv10 = sext i32 %18 to i64, !dbg !6405
  call void @output_sleb128(%struct.output_block* %15, i64 %conv10), !dbg !6408
  br label %if.end12, !dbg !6408

if.else11:                                        ; preds = %if.end5
  %19 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6409
  call void @output_zero(%struct.output_block* %19), !dbg !6410
  br label %if.end12

if.end12:                                         ; preds = %if.else11, %if.then7
  %20 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6411
  %21 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !6412
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %21, i32 0, i32 2, !dbg !6413
  %22 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !6413
  call void @lto_output_tree_ref(%struct.output_block* %20, %union.tree_node* %22), !dbg !6414
  br label %return, !dbg !6415

return:                                           ; preds = %if.end12, %if.then
  ret void, !dbg !6415
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_uchar_base_length(%struct.VEC_uchar_base* %vec_) #0 !dbg !6416 {
entry:
  %vec_.addr = alloca %struct.VEC_uchar_base*, align 8
  store %struct.VEC_uchar_base* %vec_, %struct.VEC_uchar_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_base** %vec_.addr, metadata !6421, metadata !DIExpression()), !dbg !6422
  %0 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6422
  %tobool = icmp ne %struct.VEC_uchar_base* %0, null, !dbg !6422
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6422

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6422
  %num = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %1, i32 0, i32 0, !dbg !6422
  %2 = load i32, i32* %num, align 4, !dbg !6422
  br label %cond.end, !dbg !6422

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6422

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6422
  ret i32 %cond, !dbg !6422
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_uchar_base_iterate(%struct.VEC_uchar_base* %vec_, i32 %ix_, i8* %ptr) #0 !dbg !6423 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_uchar_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i8*, align 8
  store %struct.VEC_uchar_base* %vec_, %struct.VEC_uchar_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_base** %vec_.addr, metadata !6427, metadata !DIExpression()), !dbg !6428
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6429, metadata !DIExpression()), !dbg !6428
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !6430, metadata !DIExpression()), !dbg !6428
  %0 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6431
  %tobool = icmp ne %struct.VEC_uchar_base* %0, null, !dbg !6431
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6431

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6431
  %2 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6431
  %num = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %2, i32 0, i32 0, !dbg !6431
  %3 = load i32, i32* %num, align 4, !dbg !6431
  %cmp = icmp ult i32 %1, %3, !dbg !6431
  br i1 %cmp, label %if.then, label %if.else, !dbg !6428

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6433
  %vec = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %4, i32 0, i32 2, !dbg !6433
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6433
  %idxprom = zext i32 %5 to i64, !dbg !6433
  %arrayidx = getelementptr inbounds [1 x i8], [1 x i8]* %vec, i64 0, i64 %idxprom, !dbg !6433
  %6 = load i8, i8* %arrayidx, align 1, !dbg !6433
  %7 = load i8*, i8** %ptr.addr, align 8, !dbg !6433
  store i8 %6, i8* %7, align 1, !dbg !6433
  store i32 1, i32* %retval, align 4, !dbg !6433
  br label %return, !dbg !6433

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i8*, i8** %ptr.addr, align 8, !dbg !6435
  store i8 0, i8* %8, align 1, !dbg !6435
  store i32 0, i32* %retval, align 4, !dbg !6435
  br label %return, !dbg !6435

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6428
  ret i32 %9, !dbg !6428
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_eh_try_list(%struct.output_block* %ob, %struct.eh_catch_d* %first) #0 !dbg !6437 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %first.addr = alloca %struct.eh_catch_d*, align 8
  %n = alloca %struct.eh_catch_d*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !6441, metadata !DIExpression()), !dbg !6442
  store %struct.eh_catch_d* %first, %struct.eh_catch_d** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %first.addr, metadata !6443, metadata !DIExpression()), !dbg !6444
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %n, metadata !6445, metadata !DIExpression()), !dbg !6446
  %0 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first.addr, align 8, !dbg !6447
  store %struct.eh_catch_d* %0, %struct.eh_catch_d** %n, align 8, !dbg !6449
  br label %for.cond, !dbg !6450

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !6451
  %tobool = icmp ne %struct.eh_catch_d* %1, null, !dbg !6453
  br i1 %tobool, label %for.body, label %for.end, !dbg !6453

for.body:                                         ; preds = %for.cond
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6454
  call void @output_record_start(%struct.output_block* %2, i32 235), !dbg !6456
  %3 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6457
  %4 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !6458
  %type_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %4, i32 0, i32 2, !dbg !6459
  %5 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !6459
  call void @lto_output_tree_ref(%struct.output_block* %3, %union.tree_node* %5), !dbg !6460
  %6 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6461
  %7 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !6462
  %filter_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %7, i32 0, i32 3, !dbg !6463
  %8 = load %union.tree_node*, %union.tree_node** %filter_list, align 8, !dbg !6463
  call void @lto_output_tree_ref(%struct.output_block* %6, %union.tree_node* %8), !dbg !6464
  %9 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6465
  %10 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !6466
  %label = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %10, i32 0, i32 4, !dbg !6467
  %11 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !6467
  call void @lto_output_tree_ref(%struct.output_block* %9, %union.tree_node* %11), !dbg !6468
  br label %for.inc, !dbg !6469

for.inc:                                          ; preds = %for.body
  %12 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !6470
  %next_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %12, i32 0, i32 0, !dbg !6471
  %13 = load %struct.eh_catch_d*, %struct.eh_catch_d** %next_catch, align 8, !dbg !6471
  store %struct.eh_catch_d* %13, %struct.eh_catch_d** %n, align 8, !dbg !6472
  br label %for.cond, !dbg !6473, !llvm.loop !6474

for.end:                                          ; preds = %for.cond
  %14 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6476
  call void @output_zero(%struct.output_block* %14), !dbg !6477
  ret void, !dbg !6478
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6479 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6482, metadata !DIExpression()), !dbg !6483
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6484, metadata !DIExpression()), !dbg !6485
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6486, metadata !DIExpression()), !dbg !6487
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6488
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6489
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6490
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6491
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6492
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6493
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6494
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6495
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6496
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6497
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6498
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6499
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6500
  ret void, !dbg !6501
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6502 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6505, metadata !DIExpression()), !dbg !6506
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6507
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6507
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !6508
  %conv = zext i1 %cmp to i32, !dbg !6508
  %conv1 = trunc i32 %conv to i8, !dbg !6509
  ret i8 %conv1, !dbg !6510
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %bb) #0 !dbg !6511 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6518, metadata !DIExpression()), !dbg !6519
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6520
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6520
  %1 = load i32, i32* %flags, align 8, !dbg !6520
  %and = and i32 %1, 512, !dbg !6520
  %tobool = icmp ne i32 %and, 0, !dbg !6520
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6520

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6520
  br label %cond.end, !dbg !6520

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6520

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6520
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6521
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6523
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6524
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6524
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6521
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6525

if.then:                                          ; preds = %cond.end
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !6526
  br label %return, !dbg !6526

if.end:                                           ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6527
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6528
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6529
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6529
  %phi_nodes = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 1, !dbg !6530
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phi_nodes, align 8, !dbg !6530
  store %struct.gimple_seq_d* %6, %struct.gimple_seq_d** %retval, align 8, !dbg !6531
  br label %return, !dbg !6531

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !6532
  ret %struct.gimple_seq_d* %7, !dbg !6532
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6533 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6536, metadata !DIExpression()), !dbg !6537
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6538
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6538
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !6539
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6539
  ret %union.gimple_statement_d* %1, !dbg !6540
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_gimple_stmt(%struct.output_block* %ob, %union.gimple_statement_d* %stmt) #0 !dbg !6541 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %code = alloca i32, align 4
  %tag = alloca i32, align 4
  %bp = alloca %struct.bitpack_d*, align 8
  %op = alloca %union.tree_node*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !6544, metadata !DIExpression()), !dbg !6545
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6546, metadata !DIExpression()), !dbg !6547
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6548, metadata !DIExpression()), !dbg !6549
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6550, metadata !DIExpression()), !dbg !6551
  call void @llvm.dbg.declare(metadata i32* %tag, metadata !6552, metadata !DIExpression()), !dbg !6553
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp, metadata !6554, metadata !DIExpression()), !dbg !6555
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6556
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6557
  store i32 %call, i32* %code, align 4, !dbg !6558
  %1 = load i32, i32* %code, align 4, !dbg !6559
  %call1 = call i32 @lto_gimple_code_to_tag(i32 %1), !dbg !6560
  store i32 %call1, i32* %tag, align 4, !dbg !6561
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6562
  %3 = load i32, i32* %tag, align 4, !dbg !6563
  call void @output_record_start(%struct.output_block* %2, i32 %3), !dbg !6564
  %call2 = call %struct.bitpack_d* @bitpack_create(), !dbg !6565
  store %struct.bitpack_d* %call2, %struct.bitpack_d** %bp, align 8, !dbg !6566
  %4 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6567
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6568
  %call3 = call i32 @gimple_num_ops(%union.gimple_statement_d* %5), !dbg !6569
  %conv = zext i32 %call3 to i64, !dbg !6569
  call void @bp_pack_value(%struct.bitpack_d* %4, i64 %conv, i32 32), !dbg !6570
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6571
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6572
  %call4 = call zeroext i8 @gimple_no_warning_p(%union.gimple_statement_d* %7), !dbg !6573
  %conv5 = zext i8 %call4 to i64, !dbg !6573
  call void @bp_pack_value(%struct.bitpack_d* %6, i64 %conv5, i32 1), !dbg !6574
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6575
  %call6 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %8), !dbg !6577
  %tobool = icmp ne i8 %call6, 0, !dbg !6577
  br i1 %tobool, label %if.then, label %if.end, !dbg !6578

if.then:                                          ; preds = %entry
  %9 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6579
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6580
  %call7 = call zeroext i8 @gimple_assign_nontemporal_move_p(%union.gimple_statement_d* %10), !dbg !6581
  %conv8 = zext i8 %call7 to i64, !dbg !6581
  call void @bp_pack_value(%struct.bitpack_d* %9, i64 %conv8, i32 1), !dbg !6582
  br label %if.end, !dbg !6582

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6583
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6584
  %call9 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %12), !dbg !6585
  %conv10 = zext i8 %call9 to i64, !dbg !6585
  call void @bp_pack_value(%struct.bitpack_d* %11, i64 %conv10, i32 1), !dbg !6586
  %13 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6587
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6588
  %gsbase = bitcast %union.gimple_statement_d* %14 to %struct.gimple_statement_base*, !dbg !6589
  %15 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6590
  %bf.load = load i32, i32* %15, align 8, !dbg !6590
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6590
  %conv11 = zext i32 %bf.lshr to i64, !dbg !6588
  call void @bp_pack_value(%struct.bitpack_d* %13, i64 %conv11, i32 16), !dbg !6591
  %16 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6592
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %16, i32 0, i32 2, !dbg !6593
  %17 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !6593
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6594
  call void @lto_output_bitpack(%struct.lto_output_stream* %17, %struct.bitpack_d* %18), !dbg !6595
  %19 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6596
  call void @bitpack_delete(%struct.bitpack_d* %19), !dbg !6597
  %20 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6598
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6599
  %call12 = call i32 @gimple_location(%union.gimple_statement_d* %21), !dbg !6600
  call void @lto_output_location(%struct.output_block* %20, i32 %call12), !dbg !6601
  %22 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6602
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6603
  %call13 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %23), !dbg !6604
  call void @lto_output_tree(%struct.output_block* %22, %union.tree_node* %call13, i8 zeroext 1), !dbg !6605
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6606
  %call14 = call i32 @gimple_code(%union.gimple_statement_d* %24), !dbg !6607
  switch i32 %call14, label %sw.default [
    i32 14, label %sw.bb
    i32 13, label %sw.bb17
    i32 15, label %sw.bb19
    i32 7, label %sw.bb22
    i32 6, label %sw.bb34
    i32 8, label %sw.bb34
    i32 9, label %sw.bb34
    i32 5, label %sw.bb34
    i32 4, label %sw.bb34
    i32 1, label %sw.bb34
    i32 3, label %sw.bb34
    i32 2, label %sw.bb34
    i32 18, label %sw.bb38
    i32 33, label %sw.bb38
  ], !dbg !6608

sw.bb:                                            ; preds = %if.end
  %25 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6609
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6611
  %call15 = call i32 @gimple_resx_region(%union.gimple_statement_d* %26), !dbg !6612
  %conv16 = sext i32 %call15 to i64, !dbg !6612
  call void @output_sleb128(%struct.output_block* %25, i64 %conv16), !dbg !6613
  br label %sw.epilog, !dbg !6614

sw.bb17:                                          ; preds = %if.end
  %27 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6615
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6616
  %call18 = call %union.tree_node* @gimple_eh_must_not_throw_fndecl(%union.gimple_statement_d* %28), !dbg !6617
  call void @lto_output_tree_ref(%struct.output_block* %27, %union.tree_node* %call18), !dbg !6618
  br label %sw.epilog, !dbg !6619

sw.bb19:                                          ; preds = %if.end
  %29 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6620
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6621
  %call20 = call i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %30), !dbg !6622
  %conv21 = sext i32 %call20 to i64, !dbg !6622
  call void @output_sleb128(%struct.output_block* %29, i64 %conv21), !dbg !6623
  br label %sw.epilog, !dbg !6624

sw.bb22:                                          ; preds = %if.end
  %31 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6625
  %main_stream23 = getelementptr inbounds %struct.output_block, %struct.output_block* %31, i32 0, i32 2, !dbg !6626
  %32 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream23, align 8, !dbg !6626
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6627
  %call24 = call i32 @gimple_asm_ninputs(%union.gimple_statement_d* %33), !dbg !6628
  %conv25 = zext i32 %call24 to i64, !dbg !6628
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %32, i64 %conv25), !dbg !6629
  %34 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6630
  %main_stream26 = getelementptr inbounds %struct.output_block, %struct.output_block* %34, i32 0, i32 2, !dbg !6631
  %35 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream26, align 8, !dbg !6631
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6632
  %call27 = call i32 @gimple_asm_noutputs(%union.gimple_statement_d* %36), !dbg !6633
  %conv28 = zext i32 %call27 to i64, !dbg !6633
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %35, i64 %conv28), !dbg !6634
  %37 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6635
  %main_stream29 = getelementptr inbounds %struct.output_block, %struct.output_block* %37, i32 0, i32 2, !dbg !6636
  %38 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream29, align 8, !dbg !6636
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6637
  %call30 = call i32 @gimple_asm_nclobbers(%union.gimple_statement_d* %39), !dbg !6638
  %conv31 = zext i32 %call30 to i64, !dbg !6638
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %38, i64 %conv31), !dbg !6639
  %40 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6640
  %41 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6641
  %main_stream32 = getelementptr inbounds %struct.output_block, %struct.output_block* %41, i32 0, i32 2, !dbg !6642
  %42 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream32, align 8, !dbg !6642
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6643
  %call33 = call i8* @gimple_asm_string(%union.gimple_statement_d* %43), !dbg !6644
  call void @output_string(%struct.output_block* %40, %struct.lto_output_stream* %42, i8* %call33), !dbg !6645
  br label %sw.bb34, !dbg !6645

sw.bb34:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %sw.bb22
  store i32 0, i32* %i, align 4, !dbg !6646
  br label %for.cond, !dbg !6648

for.cond:                                         ; preds = %for.inc, %sw.bb34
  %44 = load i32, i32* %i, align 4, !dbg !6649
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6651
  %call35 = call i32 @gimple_num_ops(%union.gimple_statement_d* %45), !dbg !6652
  %cmp = icmp ult i32 %44, %call35, !dbg !6653
  br i1 %cmp, label %for.body, label %for.end, !dbg !6654

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6655, metadata !DIExpression()), !dbg !6657
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6658
  %47 = load i32, i32* %i, align 4, !dbg !6659
  %call37 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %46, i32 %47), !dbg !6660
  store %union.tree_node* %call37, %union.tree_node** %op, align 8, !dbg !6657
  %48 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6661
  %49 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6662
  call void @lto_output_tree_ref(%struct.output_block* %48, %union.tree_node* %49), !dbg !6663
  br label %for.inc, !dbg !6664

for.inc:                                          ; preds = %for.body
  %50 = load i32, i32* %i, align 4, !dbg !6665
  %inc = add i32 %50, 1, !dbg !6665
  store i32 %inc, i32* %i, align 4, !dbg !6665
  br label %for.cond, !dbg !6666, !llvm.loop !6667

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !6669

sw.bb38:                                          ; preds = %if.end, %if.end
  br label %sw.epilog, !dbg !6670

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 1711, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6671
  br label %sw.epilog, !dbg !6672

sw.epilog:                                        ; preds = %sw.default, %sw.bb38, %for.end, %sw.bb19, %sw.bb17, %sw.bb
  ret void, !dbg !6673
}

declare dso_local i32 @lookup_stmt_eh_lp_fn(%struct.function*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !6674 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6678, metadata !DIExpression()), !dbg !6679
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6680
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6681
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6681
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !6682
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !6682
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6683
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6684
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6685
  ret void, !dbg !6686
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !6687 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6691, metadata !DIExpression()), !dbg !6692
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6693
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6694
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !6695
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6695
  ret %union.tree_node* %1, !dbg !6696
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_phi(%struct.output_block* %ob, %union.gimple_statement_d* %phi) #0 !dbg !6697 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !6698, metadata !DIExpression()), !dbg !6699
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6700, metadata !DIExpression()), !dbg !6701
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6702, metadata !DIExpression()), !dbg !6703
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6704, metadata !DIExpression()), !dbg !6705
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6706
  %call = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %0), !dbg !6707
  store i32 %call, i32* %len, align 4, !dbg !6705
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6708
  %call1 = call i32 @lto_gimple_code_to_tag(i32 16), !dbg !6709
  call void @output_record_start(%struct.output_block* %1, i32 %call1), !dbg !6710
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6711
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6712
  %call2 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %3), !dbg !6712
  %call3 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call2), !dbg !6712
  %ssa_name = bitcast %union.tree_node* %call3 to %struct.tree_ssa_name*, !dbg !6712
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !6712
  %4 = load i32, i32* %version, align 8, !dbg !6712
  %conv = zext i32 %4 to i64, !dbg !6712
  call void @output_uleb128(%struct.output_block* %2, i64 %conv), !dbg !6713
  store i32 0, i32* %i, align 4, !dbg !6714
  br label %for.cond, !dbg !6716

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4, !dbg !6717
  %6 = load i32, i32* %len, align 4, !dbg !6719
  %cmp = icmp ult i32 %5, %6, !dbg !6720
  br i1 %cmp, label %for.body, label %for.end, !dbg !6721

for.body:                                         ; preds = %for.cond
  %7 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6722
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6724
  %9 = load i32, i32* %i, align 4, !dbg !6725
  %conv5 = zext i32 %9 to i64, !dbg !6725
  %call6 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %8, i64 %conv5), !dbg !6726
  call void @lto_output_tree_ref(%struct.output_block* %7, %union.tree_node* %call6), !dbg !6727
  %10 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6728
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6729
  %12 = load i32, i32* %i, align 4, !dbg !6730
  %conv7 = zext i32 %12 to i64, !dbg !6730
  %call8 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %11, i64 %conv7), !dbg !6731
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call8, i32 0, i32 0, !dbg !6732
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6732
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 9, !dbg !6733
  %14 = load i32, i32* %index, align 8, !dbg !6733
  %conv9 = sext i32 %14 to i64, !dbg !6731
  call void @output_uleb128(%struct.output_block* %10, i64 %conv9), !dbg !6734
  %15 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !6735
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6736
  %17 = load i32, i32* %i, align 4, !dbg !6737
  %conv10 = zext i32 %17 to i64, !dbg !6737
  %call11 = call i32 @gimple_phi_arg_location(%union.gimple_statement_d* %16, i64 %conv10), !dbg !6738
  call void @lto_output_location(%struct.output_block* %15, i32 %call11), !dbg !6739
  br label %for.inc, !dbg !6740

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !6741
  %inc = add i32 %18, 1, !dbg !6741
  store i32 %inc, i32* %i, align 4, !dbg !6741
  br label %for.cond, !dbg !6742, !llvm.loop !6743

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6745
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6746 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6747, metadata !DIExpression()), !dbg !6748
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6749
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6750
  %1 = load i32, i32* %flags, align 8, !dbg !6750
  %and = and i32 %1, 512, !dbg !6751
  %tobool = icmp ne i32 %and, 0, !dbg !6751
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !6752

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6753
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6754
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6755
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6755
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6753
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6756

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6757
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6758
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6759
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6759
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !6760
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6760
  br label %cond.end, !dbg !6756

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6756

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !6756
  ret %struct.gimple_seq_d* %cond, !dbg !6761
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !6762 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6768, metadata !DIExpression()), !dbg !6769
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6770
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6770
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6770

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6771
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !6772
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6772
  br label %cond.end, !dbg !6770

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6770

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6770
  ret %struct.gimple_seq_node_d* %cond, !dbg !6773
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !6774 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6777, metadata !DIExpression()), !dbg !6778
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6779
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6780
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6781
  %bf.load = load i32, i32* %1, align 8, !dbg !6781
  %bf.clear = and i32 %bf.load, 255, !dbg !6781
  ret i32 %bf.clear, !dbg !6782
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @lto_gimple_code_to_tag(i32 %code) #0 !dbg !6783 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6786, metadata !DIExpression()), !dbg !6787
  %0 = load i32, i32* %code.addr, align 4, !dbg !6788
  %add = add i32 %0, 188, !dbg !6789
  %add1 = add i32 %add, 1, !dbg !6790
  ret i32 %add1, !dbg !6791
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6792 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6795, metadata !DIExpression()), !dbg !6796
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6797
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6798
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6799
  %1 = load i32, i32* %num_ops, align 4, !dbg !6799
  ret i32 %1, !dbg !6800
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_no_warning_p(%union.gimple_statement_d* %stmt) #0 !dbg !6801 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6804, metadata !DIExpression()), !dbg !6805
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6806
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6807
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6808
  %bf.load = load i32, i32* %1, align 8, !dbg !6808
  %bf.lshr = lshr i32 %bf.load, 8, !dbg !6808
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6808
  %conv = trunc i32 %bf.clear to i8, !dbg !6806
  ret i8 %conv, !dbg !6809
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !6810 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6811, metadata !DIExpression()), !dbg !6812
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6813
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6814
  %cmp = icmp eq i32 %call, 6, !dbg !6815
  %conv = zext i1 %cmp to i32, !dbg !6815
  %conv1 = trunc i32 %conv to i8, !dbg !6814
  ret i8 %conv1, !dbg !6816
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_assign_nontemporal_move_p(%union.gimple_statement_d* %gs) #0 !dbg !6817 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6818, metadata !DIExpression()), !dbg !6819
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6820
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6821
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6822
  %bf.load = load i32, i32* %1, align 8, !dbg !6822
  %bf.lshr = lshr i32 %bf.load, 10, !dbg !6822
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6822
  %conv = trunc i32 %bf.clear to i8, !dbg !6820
  ret i8 %conv, !dbg !6823
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %stmt) #0 !dbg !6824 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6825, metadata !DIExpression()), !dbg !6826
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6827
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6829
  %tobool = icmp ne i8 %call, 0, !dbg !6829
  br i1 %tobool, label %if.then, label %if.else, !dbg !6830

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6831
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6832
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6833
  %bf.load = load i32, i32* %2, align 8, !dbg !6833
  %bf.lshr = lshr i32 %bf.load, 14, !dbg !6833
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6833
  %conv = trunc i32 %bf.clear to i8, !dbg !6831
  store i8 %conv, i8* %retval, align 1, !dbg !6834
  br label %return, !dbg !6834

if.else:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6835
  br label %return, !dbg !6835

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !6836
  ret i8 %3, !dbg !6836
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !6837 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6840, metadata !DIExpression()), !dbg !6841
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6842
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6843
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !6844
  %1 = load i32, i32* %location, align 8, !dbg !6844
  ret i32 %1, !dbg !6845
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_block(%union.gimple_statement_d* %g) #0 !dbg !6846 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6847, metadata !DIExpression()), !dbg !6848
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6849
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6850
  %block = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !6851
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !6851
  ret %union.tree_node* %1, !dbg !6852
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_resx_region(%union.gimple_statement_d* %gs) #0 !dbg !6853 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6856, metadata !DIExpression()), !dbg !6857
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6858
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_ctrl*, !dbg !6859
  %region = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !6860
  %1 = load i32, i32* %region, align 8, !dbg !6860
  ret i32 %1, !dbg !6861
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_eh_must_not_throw_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !6862 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6865, metadata !DIExpression()), !dbg !6866
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6867
  %gimple_eh_mnt = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_mnt*, !dbg !6868
  %fndecl = getelementptr inbounds %struct.gimple_statement_eh_mnt, %struct.gimple_statement_eh_mnt* %gimple_eh_mnt, i32 0, i32 1, !dbg !6869
  %1 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6869
  ret %union.tree_node* %1, !dbg !6870
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %gs) #0 !dbg !6871 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6872, metadata !DIExpression()), !dbg !6873
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6874
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_ctrl*, !dbg !6875
  %region = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !6876
  %1 = load i32, i32* %region, align 8, !dbg !6876
  ret i32 %1, !dbg !6877
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_ninputs(%union.gimple_statement_d* %gs) #0 !dbg !6878 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6879, metadata !DIExpression()), !dbg !6880
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6881
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !6882
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !6883
  %1 = load i8, i8* %ni, align 8, !dbg !6883
  %conv = zext i8 %1 to i32, !dbg !6881
  ret i32 %conv, !dbg !6884
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_noutputs(%union.gimple_statement_d* %gs) #0 !dbg !6885 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6886, metadata !DIExpression()), !dbg !6887
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6888
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !6889
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !6890
  %1 = load i8, i8* %no, align 1, !dbg !6890
  %conv = zext i8 %1 to i32, !dbg !6888
  ret i32 %conv, !dbg !6891
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_nclobbers(%union.gimple_statement_d* %gs) #0 !dbg !6892 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6893, metadata !DIExpression()), !dbg !6894
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6895
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !6896
  %nc = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 4, !dbg !6897
  %1 = load i8, i8* %nc, align 2, !dbg !6897
  %conv = zext i8 %1 to i32, !dbg !6895
  ret i32 %conv, !dbg !6898
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @gimple_asm_string(%union.gimple_statement_d* %gs) #0 !dbg !6899 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6902, metadata !DIExpression()), !dbg !6903
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6904
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !6905
  %string = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 1, !dbg !6906
  %1 = load i8*, i8** %string, align 8, !dbg !6906
  ret i8* %1, !dbg !6907
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6908 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6911, metadata !DIExpression()), !dbg !6912
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6913, metadata !DIExpression()), !dbg !6914
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6915
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6917
  %tobool = icmp ne i8 %call, 0, !dbg !6917
  br i1 %tobool, label %if.then, label %if.else, !dbg !6918

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6919
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6921
  %2 = load i32, i32* %i.addr, align 4, !dbg !6922
  %idxprom = zext i32 %2 to i64, !dbg !6921
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6921
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6921
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6923
  br label %return, !dbg !6923

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6924
  br label %return, !dbg !6924

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6925
  ret %union.tree_node* %4, !dbg !6925
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !6926 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6927, metadata !DIExpression()), !dbg !6928
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6929
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6930
  %cmp = icmp uge i32 %call, 6, !dbg !6931
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6932

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6933
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6934
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6935
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6936
  %land.ext = zext i1 %2 to i32, !dbg !6932
  %conv = trunc i32 %land.ext to i8, !dbg !6930
  ret i8 %conv, !dbg !6937
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6938 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6939, metadata !DIExpression()), !dbg !6940
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6941
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6942
  %cmp = icmp uge i32 %call, 1, !dbg !6943
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6944

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6945
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6946
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6947
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6948
  %land.ext = zext i1 %2 to i32, !dbg !6944
  %conv = trunc i32 %land.ext to i8, !dbg !6942
  ret i8 %conv, !dbg !6949
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6950 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6953, metadata !DIExpression()), !dbg !6954
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6955, metadata !DIExpression()), !dbg !6956
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6957
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6958
  %idxprom = zext i32 %call to i64, !dbg !6959
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6959
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6959
  store i64 %1, i64* %off, align 8, !dbg !6960
  %2 = load i64, i64* %off, align 8, !dbg !6961
  %cmp = icmp ne i64 %2, 0, !dbg !6961
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6961

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6961
  br label %cond.end, !dbg !6961

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6961

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6961
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6962
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6963
  %5 = load i64, i64* %off, align 8, !dbg !6964
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6965
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6966
  ret %union.tree_node** %6, !dbg !6967
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6968 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6971, metadata !DIExpression()), !dbg !6972
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6973
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6974
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6975
  ret i32 %call1, !dbg !6976
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6977 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6980, metadata !DIExpression()), !dbg !6981
  %0 = load i32, i32* %code.addr, align 4, !dbg !6982
  %idxprom = zext i32 %0 to i64, !dbg !6983
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6983
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6983
  ret i32 %1, !dbg !6984
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6985 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6986, metadata !DIExpression()), !dbg !6987
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6988
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6989
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !6990
  %1 = load i32, i32* %nargs, align 4, !dbg !6990
  ret i32 %1, !dbg !6991
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !6992 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !6996, metadata !DIExpression()), !dbg !6997
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !6998
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6999
  ret %union.tree_node* %1, !dbg !7000
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !7001 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7002, metadata !DIExpression()), !dbg !7003
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7004
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7005
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !7006
  ret %union.tree_node** %result, !dbg !7007
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !7008 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7011, metadata !DIExpression()), !dbg !7012
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !7013, metadata !DIExpression()), !dbg !7014
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !7015, metadata !DIExpression()), !dbg !7017
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7018
  %1 = load i64, i64* %index.addr, align 8, !dbg !7019
  %conv = trunc i64 %1 to i32, !dbg !7019
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !7020
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !7017
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !7021
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !7022
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !7023
  ret %union.tree_node* %call1, !dbg !7024
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !7025 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7028, metadata !DIExpression()), !dbg !7029
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !7030, metadata !DIExpression()), !dbg !7031
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7032
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !7032
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 0, !dbg !7032
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !7032
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !7032
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7032

cond.true:                                        ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7032
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !7032
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call1, i32 0, i32 0, !dbg !7032
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !7032
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !7032
  br label %cond.end, !dbg !7032

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7032

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7032
  %4 = load i64, i64* %i.addr, align 8, !dbg !7032
  %conv = trunc i64 %4 to i32, !dbg !7032
  %call3 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv), !dbg !7032
  ret %struct.edge_def* %call3, !dbg !7033
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !7034 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7037, metadata !DIExpression()), !dbg !7038
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !7039, metadata !DIExpression()), !dbg !7040
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7041
  %1 = load i64, i64* %i.addr, align 8, !dbg !7042
  %conv = trunc i64 %1 to i32, !dbg !7042
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !7043
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !7044
  %2 = load i32, i32* %locus, align 8, !dbg !7044
  ret i32 %2, !dbg !7045
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7046 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7049, metadata !DIExpression()), !dbg !7050
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7051, metadata !DIExpression()), !dbg !7052
  %0 = load i32, i32* %index.addr, align 4, !dbg !7053
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7053
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !7053
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !7053
  %2 = load i32, i32* %capacity, align 8, !dbg !7053
  %cmp = icmp ule i32 %0, %2, !dbg !7053
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7053

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7053
  br label %cond.end, !dbg !7053

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7053

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7053
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7054
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !7055
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !7056
  %4 = load i32, i32* %index.addr, align 4, !dbg !7057
  %idxprom = zext i32 %4 to i64, !dbg !7054
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !7054
  ret %struct.phi_arg_d* %arrayidx, !dbg !7058
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !7059 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !7065, metadata !DIExpression()), !dbg !7066
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7067
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !7068
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !7068
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !7069
  ret %union.tree_node* %2, !dbg !7070
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !7071 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7076, metadata !DIExpression()), !dbg !7077
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7078, metadata !DIExpression()), !dbg !7077
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7077
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7077
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7077

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7077
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7077
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !7077
  %3 = load i32, i32* %num, align 8, !dbg !7077
  %cmp = icmp ult i32 %1, %3, !dbg !7077
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7079
  %land.ext = zext i1 %4 to i32, !dbg !7077
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7077
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !7077
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7077
  %idxprom = zext i32 %6 to i64, !dbg !7077
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !7077
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !7077
  ret %struct.edge_def* %7, !dbg !7077
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !7080 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7083, metadata !DIExpression()), !dbg !7084
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7085
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7086
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !7087
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7087
  ret %struct.basic_block_def* %1, !dbg !7088
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !7089 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7092, metadata !DIExpression()), !dbg !7093
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7093
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7093
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7093

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7093
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !7093
  %2 = load i32, i32* %num, align 8, !dbg !7093
  br label %cond.end, !dbg !7093

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7093

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7093
  ret i32 %cond, !dbg !7093
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !7094 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !7097, metadata !DIExpression()), !dbg !7098
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !7099, metadata !DIExpression()), !dbg !7100
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !7101
  store i32 0, i32* %index, align 8, !dbg !7102
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !7103
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !7104
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !7105
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !7106
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !7106
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !7106
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !7107 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7111, metadata !DIExpression()), !dbg !7112
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !7113, metadata !DIExpression()), !dbg !7114
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7115
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7115
  %5 = load i32, i32* %4, align 8, !dbg !7115
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7115
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7115
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7115
  %tobool = icmp ne i8 %call, 0, !dbg !7115
  br i1 %tobool, label %if.else, label %if.then, !dbg !7117

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7118
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7118
  %10 = load i32, i32* %9, align 8, !dbg !7118
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7118
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7118
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !7118
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !7120
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !7121
  store i8 1, i8* %retval, align 1, !dbg !7122
  br label %return, !dbg !7122

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !7123
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !7125
  store i8 0, i8* %retval, align 1, !dbg !7126
  br label %return, !dbg !7126

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !7127
  ret i8 %15, !dbg !7127
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !7128 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !7132, metadata !DIExpression()), !dbg !7133
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !7134
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !7134
  %1 = load i32, i32* %index, align 8, !dbg !7134
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !7134
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !7134
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7134
  %5 = load i32, i32* %4, align 8, !dbg !7134
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7134
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7134
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7134
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7134
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7134

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !7134
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !7134
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !7134
  %11 = load i32, i32* %10, align 8, !dbg !7134
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !7134
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !7134
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !7134
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7134
  br label %cond.end, !dbg !7134

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7134

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7134
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7134
  %cmp = icmp ult i32 %1, %call2, !dbg !7134
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !7134

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7134
  br label %cond.end5, !dbg !7134

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7134

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !7134
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !7135
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !7136
  %15 = load i32, i32* %index7, align 8, !dbg !7137
  %inc = add i32 %15, 1, !dbg !7137
  store i32 %inc, i32* %index7, align 8, !dbg !7137
  ret void, !dbg !7138
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7139 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7142, metadata !DIExpression()), !dbg !7143
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !7144
  %3 = load i32, i32* %index, align 8, !dbg !7144
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7145
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !7145
  %6 = load i32, i32* %5, align 8, !dbg !7145
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !7145
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !7145
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !7145
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7145
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7145

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7145
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !7145
  %11 = load i32, i32* %10, align 8, !dbg !7145
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !7145
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !7145
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !7145
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7145
  br label %cond.end, !dbg !7145

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7145

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7145
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7145
  %cmp = icmp eq i32 %3, %call2, !dbg !7146
  %conv = zext i1 %cmp to i32, !dbg !7146
  %conv3 = trunc i32 %conv to i8, !dbg !7147
  ret i8 %conv3, !dbg !7148
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7149 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7152, metadata !DIExpression()), !dbg !7153
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7154
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7154
  %5 = load i32, i32* %4, align 8, !dbg !7154
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7154
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7154
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7154
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7154
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7154

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7154
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7154
  %10 = load i32, i32* %9, align 8, !dbg !7154
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7154
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7154
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !7154
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7154
  br label %cond.end, !dbg !7154

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7154

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7154
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !7154
  %13 = load i32, i32* %index, align 8, !dbg !7154
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !7154
  ret %struct.edge_def* %call2, !dbg !7155
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7156 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7159, metadata !DIExpression()), !dbg !7160
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7161
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !7161
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !7161
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7161

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7161
  br label %cond.end, !dbg !7161

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7161

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7161
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7162
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !7162
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !7163
  ret %struct.VEC_edge_gc* %5, !dbg !7164
}

declare dso_local i8* @lto_get_decl_name_mapping(%struct.lto_file_decl_data*, i8*) #2

declare dso_local i8* @lto_get_section_data(%struct.lto_file_decl_data*, i32, i8*, i64*) #2

declare dso_local %struct.lto_in_decl_state* @lto_get_function_in_decl_state(%struct.lto_file_decl_data*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @lto_tree_ref_encoder_size(%struct.lto_tree_ref_encoder* %encoder) #0 !dbg !7165 {
entry:
  %encoder.addr = alloca %struct.lto_tree_ref_encoder*, align 8
  store %struct.lto_tree_ref_encoder* %encoder, %struct.lto_tree_ref_encoder** %encoder.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_tree_ref_encoder** %encoder.addr, metadata !7168, metadata !DIExpression()), !dbg !7169
  %0 = load %struct.lto_tree_ref_encoder*, %struct.lto_tree_ref_encoder** %encoder.addr, align 8, !dbg !7170
  %trees = getelementptr inbounds %struct.lto_tree_ref_encoder, %struct.lto_tree_ref_encoder* %0, i32 0, i32 2, !dbg !7170
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %trees, align 8, !dbg !7170
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7170
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7170

cond.true:                                        ; preds = %entry
  %2 = load %struct.lto_tree_ref_encoder*, %struct.lto_tree_ref_encoder** %encoder.addr, align 8, !dbg !7170
  %trees1 = getelementptr inbounds %struct.lto_tree_ref_encoder, %struct.lto_tree_ref_encoder* %2, i32 0, i32 2, !dbg !7170
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %trees1, align 8, !dbg !7170
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7170
  br label %cond.end, !dbg !7170

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7170

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7170
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !7170
  ret i32 %call, !dbg !7171
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !7172 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7176, metadata !DIExpression()), !dbg !7177
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !7178, metadata !DIExpression()), !dbg !7177
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7177
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !7177
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7177
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !7177
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !7177
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7177

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7177
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !7177
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !7177
  br label %cond.end, !dbg !7177

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7177

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7177
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !7177
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !7177
  ret %union.tree_node** %call1, !dbg !7177
}

declare dso_local void @lto_free_section_data(%struct.lto_file_decl_data*, i32, i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !7179 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7182, metadata !DIExpression()), !dbg !7183
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7184, metadata !DIExpression()), !dbg !7183
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7185, metadata !DIExpression()), !dbg !7183
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7183
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !7183
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7183
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7183

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7183
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !7183
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7183
  br label %cond.end, !dbg !7183

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7183

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7183
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7183
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !7183
  %tobool1 = icmp ne i32 %call, 0, !dbg !7183
  %lnot = xor i1 %tobool1, true, !dbg !7183
  %lnot.ext = zext i1 %lnot to i32, !dbg !7183
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7183
  %5 = load i32, i32* %extend, align 4, !dbg !7186
  %tobool2 = icmp ne i32 %5, 0, !dbg !7186
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7183

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7186
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !7186
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !7186
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7186
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7186
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !7186
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7186
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !7186
  br label %if.end, !dbg !7186

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7183
  ret i32 %12, !dbg !7183
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !7188 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7192, metadata !DIExpression()), !dbg !7193
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !7194, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !7195, metadata !DIExpression()), !dbg !7193
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7193
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !7193
  %1 = load i32, i32* %num, align 8, !dbg !7193
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7193
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !7193
  %3 = load i32, i32* %alloc, align 4, !dbg !7193
  %cmp = icmp ult i32 %1, %3, !dbg !7193
  %conv = zext i1 %cmp to i32, !dbg !7193
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7193
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !7193
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7193
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !7193
  %6 = load i32, i32* %num1, align 8, !dbg !7193
  %inc = add i32 %6, 1, !dbg !7193
  store i32 %inc, i32* %num1, align 8, !dbg !7193
  %idxprom = zext i32 %6 to i64, !dbg !7193
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7193
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !7193
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !7193
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !7193
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !7193
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !7193
  ret %union.tree_node** %9, !dbg !7193
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !7196 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7199, metadata !DIExpression()), !dbg !7200
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7201, metadata !DIExpression()), !dbg !7200
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7200
  %cmp = icmp sge i32 %0, 0, !dbg !7200
  %conv = zext i1 %cmp to i32, !dbg !7200
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7200
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !7200
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7200

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7200
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !7200
  %3 = load i32, i32* %alloc, align 4, !dbg !7200
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7200
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !7200
  %5 = load i32, i32* %num, align 8, !dbg !7200
  %sub = sub i32 %3, %5, !dbg !7200
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7200
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7200
  %conv2 = zext i1 %cmp1 to i32, !dbg !7200
  br label %cond.end, !dbg !7200

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7200
  %tobool3 = icmp ne i32 %7, 0, !dbg !7200
  %lnot = xor i1 %tobool3, true, !dbg !7200
  %lnot.ext = zext i1 %lnot to i32, !dbg !7200
  br label %cond.end, !dbg !7200

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7200
  ret i32 %cond, !dbg !7200
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @output_unreferenced_globals(%struct.cgraph_node_set_def* %set) #0 !dbg !7202 {
entry:
  %set.addr = alloca %struct.cgraph_node_set_def*, align 8
  %ob = alloca %struct.output_block*, align 8
  %p = alloca %struct.alias_pair*, align 8
  %i = alloca i32, align 4
  %vnode = alloca %struct.varpool_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %alias = alloca %struct.varpool_node*, align 8
  store %struct.cgraph_node_set_def* %set, %struct.cgraph_node_set_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_def** %set.addr, metadata !7203, metadata !DIExpression()), !dbg !7204
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob, metadata !7205, metadata !DIExpression()), !dbg !7206
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %p, metadata !7207, metadata !DIExpression()), !dbg !7214
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7215, metadata !DIExpression()), !dbg !7216
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %vnode, metadata !7217, metadata !DIExpression()), !dbg !7218
  %call = call %struct.output_block* @create_output_block(i32 2), !dbg !7219
  store %struct.output_block* %call, %struct.output_block** %ob, align 8, !dbg !7220
  %0 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7221
  %cgraph_node = getelementptr inbounds %struct.output_block, %struct.output_block* %0, i32 0, i32 6, !dbg !7222
  store %struct.cgraph_node* null, %struct.cgraph_node** %cgraph_node, align 8, !dbg !7223
  %1 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7224
  call void @clear_line_info(%struct.output_block* %1), !dbg !7225
  %2 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7226
  %string_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %2, i32 0, i32 3, !dbg !7227
  %3 = load %struct.lto_output_stream*, %struct.lto_output_stream** %string_stream, align 8, !dbg !7227
  call void @lto_output_1_stream(%struct.lto_output_stream* %3, i8 signext 0), !dbg !7228
  %4 = load %struct.varpool_node*, %struct.varpool_node** @varpool_nodes_queue, align 8, !dbg !7229
  store %struct.varpool_node* %4, %struct.varpool_node** %vnode, align 8, !dbg !7229
  br label %for.cond, !dbg !7229

for.cond:                                         ; preds = %for.inc15, %entry
  %5 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7231
  %tobool = icmp ne %struct.varpool_node* %5, null, !dbg !7229
  br i1 %tobool, label %for.body, label %for.end16, !dbg !7229

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7233, metadata !DIExpression()), !dbg !7235
  %6 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7236
  %decl = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %6, i32 0, i32 0, !dbg !7237
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7237
  store %union.tree_node* %7, %union.tree_node** %var, align 8, !dbg !7235
  %8 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7238
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7238
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !7238
  %bf.load = load i64, i64* %9, align 8, !dbg !7238
  %bf.clear = and i64 %bf.load, 65535, !dbg !7238
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7238
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7240
  br i1 %cmp, label %if.then, label %if.end14, !dbg !7241

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %alias, metadata !7242, metadata !DIExpression()), !dbg !7244
  %10 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7245
  %11 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7246
  call void @lto_output_tree(%struct.output_block* %10, %union.tree_node* %11, i8 zeroext 1), !dbg !7247
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7248
  %base1 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7248
  %13 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7248
  %bf.load2 = load i64, i64* %13, align 8, !dbg !7248
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !7248
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !7248
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7248
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !7248
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !7250

if.then6:                                         ; preds = %if.then
  %14 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7251
  %15 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7252
  call void @lto_output_tree_ref(%struct.output_block* %14, %union.tree_node* %15), !dbg !7253
  br label %if.end, !dbg !7253

if.end:                                           ; preds = %if.then6, %if.then
  %16 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7254
  %extra_name = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %16, i32 0, i32 3, !dbg !7256
  %17 = load %struct.varpool_node*, %struct.varpool_node** %extra_name, align 8, !dbg !7256
  store %struct.varpool_node* %17, %struct.varpool_node** %alias, align 8, !dbg !7257
  br label %for.cond7, !dbg !7258

for.cond7:                                        ; preds = %for.inc, %if.end
  %18 = load %struct.varpool_node*, %struct.varpool_node** %alias, align 8, !dbg !7259
  %tobool8 = icmp ne %struct.varpool_node* %18, null, !dbg !7261
  br i1 %tobool8, label %for.body9, label %for.end, !dbg !7261

for.body9:                                        ; preds = %for.cond7
  %19 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7262
  %20 = load %struct.varpool_node*, %struct.varpool_node** %alias, align 8, !dbg !7264
  %decl10 = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %20, i32 0, i32 0, !dbg !7265
  %21 = load %union.tree_node*, %union.tree_node** %decl10, align 8, !dbg !7265
  call void @lto_output_tree(%struct.output_block* %19, %union.tree_node* %21, i8 zeroext 1), !dbg !7266
  %22 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7267
  call void @output_record_start(%struct.output_block* %22, i32 237), !dbg !7268
  %23 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7269
  %decl_state = getelementptr inbounds %struct.output_block, %struct.output_block* %23, i32 0, i32 1, !dbg !7270
  %24 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state, align 8, !dbg !7270
  %25 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7271
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %25, i32 0, i32 2, !dbg !7272
  %26 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !7272
  %27 = load %struct.varpool_node*, %struct.varpool_node** %alias, align 8, !dbg !7273
  %decl11 = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %27, i32 0, i32 0, !dbg !7274
  %28 = load %union.tree_node*, %union.tree_node** %decl11, align 8, !dbg !7274
  call void @lto_output_var_decl_index(%struct.lto_out_decl_state* %24, %struct.lto_output_stream* %26, %union.tree_node* %28), !dbg !7275
  %29 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7276
  %decl_state12 = getelementptr inbounds %struct.output_block, %struct.output_block* %29, i32 0, i32 1, !dbg !7277
  %30 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state12, align 8, !dbg !7277
  %31 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7278
  %main_stream13 = getelementptr inbounds %struct.output_block, %struct.output_block* %31, i32 0, i32 2, !dbg !7279
  %32 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream13, align 8, !dbg !7279
  %33 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7280
  call void @lto_output_var_decl_index(%struct.lto_out_decl_state* %30, %struct.lto_output_stream* %32, %union.tree_node* %33), !dbg !7281
  br label %for.inc, !dbg !7282

for.inc:                                          ; preds = %for.body9
  %34 = load %struct.varpool_node*, %struct.varpool_node** %alias, align 8, !dbg !7283
  %next = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %34, i32 0, i32 1, !dbg !7284
  %35 = load %struct.varpool_node*, %struct.varpool_node** %next, align 8, !dbg !7284
  store %struct.varpool_node* %35, %struct.varpool_node** %alias, align 8, !dbg !7285
  br label %for.cond7, !dbg !7286, !llvm.loop !7287

for.end:                                          ; preds = %for.cond7
  br label %if.end14, !dbg !7289

if.end14:                                         ; preds = %for.end, %for.body
  br label %for.inc15, !dbg !7290

for.inc15:                                        ; preds = %if.end14
  %36 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !7231
  %next_needed = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %36, i32 0, i32 2, !dbg !7231
  %37 = load %struct.varpool_node*, %struct.varpool_node** %next_needed, align 8, !dbg !7231
  store %struct.varpool_node* %37, %struct.varpool_node** %vnode, align 8, !dbg !7231
  br label %for.cond, !dbg !7231, !llvm.loop !7291

for.end16:                                        ; preds = %for.cond
  %38 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7293
  call void @output_zero(%struct.output_block* %38), !dbg !7294
  store i32 0, i32* %i, align 4, !dbg !7295
  br label %for.cond17, !dbg !7297

for.cond17:                                       ; preds = %for.inc28, %for.end16
  %39 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !7298
  %tobool18 = icmp ne %struct.VEC_alias_pair_gc* %39, null, !dbg !7298
  br i1 %tobool18, label %cond.true, label %cond.false, !dbg !7298

cond.true:                                        ; preds = %for.cond17
  %40 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !7298
  %base19 = getelementptr inbounds %struct.VEC_alias_pair_gc, %struct.VEC_alias_pair_gc* %40, i32 0, i32 0, !dbg !7298
  br label %cond.end, !dbg !7298

cond.false:                                       ; preds = %for.cond17
  br label %cond.end, !dbg !7298

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_pair_base* [ %base19, %cond.true ], [ null, %cond.false ], !dbg !7298
  %41 = load i32, i32* %i, align 4, !dbg !7298
  %call20 = call i32 @VEC_alias_pair_base_iterate(%struct.VEC_alias_pair_base* %cond, i32 %41, %struct.alias_pair** %p), !dbg !7298
  %tobool21 = icmp ne i32 %call20, 0, !dbg !7300
  br i1 %tobool21, label %for.body22, label %for.end29, !dbg !7300

for.body22:                                       ; preds = %cond.end
  %42 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !7301
  %43 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set.addr, align 8, !dbg !7304
  %call23 = call zeroext i8 @output_alias_pair_p(%struct.alias_pair* %42, %struct.cgraph_node_set_def* %43), !dbg !7305
  %tobool24 = icmp ne i8 %call23, 0, !dbg !7305
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !7306

if.then25:                                        ; preds = %for.body22
  %44 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7307
  %45 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !7309
  %decl26 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %45, i32 0, i32 0, !dbg !7310
  %46 = load %union.tree_node*, %union.tree_node** %decl26, align 8, !dbg !7310
  call void @lto_output_tree_ref(%struct.output_block* %44, %union.tree_node* %46), !dbg !7311
  %47 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7312
  %48 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !7313
  %target = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %48, i32 0, i32 1, !dbg !7314
  %49 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !7314
  call void @lto_output_tree_ref(%struct.output_block* %47, %union.tree_node* %49), !dbg !7315
  br label %if.end27, !dbg !7316

if.end27:                                         ; preds = %if.then25, %for.body22
  br label %for.inc28, !dbg !7317

for.inc28:                                        ; preds = %if.end27
  %50 = load i32, i32* %i, align 4, !dbg !7318
  %inc = add i32 %50, 1, !dbg !7318
  store i32 %inc, i32* %i, align 4, !dbg !7318
  br label %for.cond17, !dbg !7319, !llvm.loop !7320

for.end29:                                        ; preds = %cond.end
  %51 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7322
  call void @output_zero(%struct.output_block* %51), !dbg !7323
  %52 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7324
  call void @produce_asm(%struct.output_block* %52, %union.tree_node* null), !dbg !7325
  %53 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !7326
  call void @destroy_output_block(%struct.output_block* %53), !dbg !7327
  ret void, !dbg !7328
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_lto_out_decl_state_ptr_base_length(%struct.VEC_lto_out_decl_state_ptr_base* %vec_) #0 !dbg !7329 {
entry:
  %vec_.addr = alloca %struct.VEC_lto_out_decl_state_ptr_base*, align 8
  store %struct.VEC_lto_out_decl_state_ptr_base* %vec_, %struct.VEC_lto_out_decl_state_ptr_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lto_out_decl_state_ptr_base** %vec_.addr, metadata !7342, metadata !DIExpression()), !dbg !7343
  %0 = load %struct.VEC_lto_out_decl_state_ptr_base*, %struct.VEC_lto_out_decl_state_ptr_base** %vec_.addr, align 8, !dbg !7343
  %tobool = icmp ne %struct.VEC_lto_out_decl_state_ptr_base* %0, null, !dbg !7343
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7343

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_lto_out_decl_state_ptr_base*, %struct.VEC_lto_out_decl_state_ptr_base** %vec_.addr, align 8, !dbg !7343
  %num = getelementptr inbounds %struct.VEC_lto_out_decl_state_ptr_base, %struct.VEC_lto_out_decl_state_ptr_base* %1, i32 0, i32 0, !dbg !7343
  %2 = load i32, i32* %num, align 8, !dbg !7343
  br label %cond.end, !dbg !7343

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7343

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7343
  ret i32 %cond, !dbg !7343
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_decl_state_streams(%struct.output_block* %ob, %struct.lto_out_decl_state* %state) #0 !dbg !7344 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %state.addr = alloca %struct.lto_out_decl_state*, align 8
  %i = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !7347, metadata !DIExpression()), !dbg !7348
  store %struct.lto_out_decl_state* %state, %struct.lto_out_decl_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_out_decl_state** %state.addr, metadata !7349, metadata !DIExpression()), !dbg !7350
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7351, metadata !DIExpression()), !dbg !7352
  store i32 0, i32* %i, align 4, !dbg !7353
  br label %for.cond, !dbg !7355

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7356
  %cmp = icmp slt i32 %0, 7, !dbg !7358
  br i1 %cmp, label %for.body, label %for.end, !dbg !7359

for.body:                                         ; preds = %for.cond
  %1 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7360
  %2 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %state.addr, align 8, !dbg !7361
  %streams = getelementptr inbounds %struct.lto_out_decl_state, %struct.lto_out_decl_state* %2, i32 0, i32 0, !dbg !7362
  %3 = load i32, i32* %i, align 4, !dbg !7363
  %idxprom = sext i32 %3 to i64, !dbg !7361
  %arrayidx = getelementptr inbounds [7 x %struct.lto_tree_ref_encoder], [7 x %struct.lto_tree_ref_encoder]* %streams, i64 0, i64 %idxprom, !dbg !7361
  call void @write_global_stream(%struct.output_block* %1, %struct.lto_tree_ref_encoder* %arrayidx), !dbg !7364
  br label %for.inc, !dbg !7364

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !7365
  %inc = add nsw i32 %4, 1, !dbg !7365
  store i32 %inc, i32* %i, align 4, !dbg !7365
  br label %for.cond, !dbg !7366, !llvm.loop !7367

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7369
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.lto_out_decl_state* @VEC_lto_out_decl_state_ptr_base_index(%struct.VEC_lto_out_decl_state_ptr_base* %vec_, i32 %ix_) #0 !dbg !7370 {
entry:
  %vec_.addr = alloca %struct.VEC_lto_out_decl_state_ptr_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_lto_out_decl_state_ptr_base* %vec_, %struct.VEC_lto_out_decl_state_ptr_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lto_out_decl_state_ptr_base** %vec_.addr, metadata !7373, metadata !DIExpression()), !dbg !7374
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7375, metadata !DIExpression()), !dbg !7374
  %0 = load %struct.VEC_lto_out_decl_state_ptr_base*, %struct.VEC_lto_out_decl_state_ptr_base** %vec_.addr, align 8, !dbg !7374
  %tobool = icmp ne %struct.VEC_lto_out_decl_state_ptr_base* %0, null, !dbg !7374
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7374

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7374
  %2 = load %struct.VEC_lto_out_decl_state_ptr_base*, %struct.VEC_lto_out_decl_state_ptr_base** %vec_.addr, align 8, !dbg !7374
  %num = getelementptr inbounds %struct.VEC_lto_out_decl_state_ptr_base, %struct.VEC_lto_out_decl_state_ptr_base* %2, i32 0, i32 0, !dbg !7374
  %3 = load i32, i32* %num, align 8, !dbg !7374
  %cmp = icmp ult i32 %1, %3, !dbg !7374
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7376
  %land.ext = zext i1 %4 to i32, !dbg !7374
  %5 = load %struct.VEC_lto_out_decl_state_ptr_base*, %struct.VEC_lto_out_decl_state_ptr_base** %vec_.addr, align 8, !dbg !7374
  %vec = getelementptr inbounds %struct.VEC_lto_out_decl_state_ptr_base, %struct.VEC_lto_out_decl_state_ptr_base* %5, i32 0, i32 2, !dbg !7374
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7374
  %idxprom = zext i32 %6 to i64, !dbg !7374
  %arrayidx = getelementptr inbounds [1 x %struct.lto_out_decl_state*], [1 x %struct.lto_out_decl_state*]* %vec, i64 0, i64 %idxprom, !dbg !7374
  %7 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %arrayidx, align 8, !dbg !7374
  ret %struct.lto_out_decl_state* %7, !dbg !7374
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @lto_out_decl_state_written_size(%struct.lto_out_decl_state* %state) #0 !dbg !7377 {
entry:
  %state.addr = alloca %struct.lto_out_decl_state*, align 8
  %i = alloca i32, align 4
  %size = alloca i64, align 8
  store %struct.lto_out_decl_state* %state, %struct.lto_out_decl_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_out_decl_state** %state.addr, metadata !7380, metadata !DIExpression()), !dbg !7381
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7382, metadata !DIExpression()), !dbg !7383
  call void @llvm.dbg.declare(metadata i64* %size, metadata !7384, metadata !DIExpression()), !dbg !7385
  store i64 4, i64* %size, align 8, !dbg !7386
  store i32 0, i32* %i, align 4, !dbg !7387
  br label %for.cond, !dbg !7389

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7390
  %cmp = icmp slt i32 %0, 7, !dbg !7392
  br i1 %cmp, label %for.body, label %for.end, !dbg !7393

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %size, align 8, !dbg !7394
  %add = add i64 %1, 4, !dbg !7394
  store i64 %add, i64* %size, align 8, !dbg !7394
  %2 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %state.addr, align 8, !dbg !7396
  %streams = getelementptr inbounds %struct.lto_out_decl_state, %struct.lto_out_decl_state* %2, i32 0, i32 0, !dbg !7397
  %3 = load i32, i32* %i, align 4, !dbg !7398
  %idxprom = sext i32 %3 to i64, !dbg !7396
  %arrayidx = getelementptr inbounds [7 x %struct.lto_tree_ref_encoder], [7 x %struct.lto_tree_ref_encoder]* %streams, i64 0, i64 %idxprom, !dbg !7396
  %call = call i32 @lto_tree_ref_encoder_size(%struct.lto_tree_ref_encoder* %arrayidx), !dbg !7399
  %conv = zext i32 %call to i64, !dbg !7399
  %mul = mul i64 %conv, 4, !dbg !7400
  %4 = load i64, i64* %size, align 8, !dbg !7401
  %add1 = add i64 %4, %mul, !dbg !7401
  store i64 %add1, i64* %size, align 8, !dbg !7401
  br label %for.inc, !dbg !7402

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !7403
  %inc = add nsw i32 %5, 1, !dbg !7403
  store i32 %inc, i32* %i, align 4, !dbg !7403
  br label %for.cond, !dbg !7404, !llvm.loop !7405

for.end:                                          ; preds = %for.cond
  %6 = load i64, i64* %size, align 8, !dbg !7407
  ret i64 %6, !dbg !7408
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_output_decl_state_refs(%struct.output_block* %ob, %struct.lto_output_stream* %out_stream, %struct.lto_out_decl_state* %state) #0 !dbg !7409 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %out_stream.addr = alloca %struct.lto_output_stream*, align 8
  %state.addr = alloca %struct.lto_out_decl_state*, align 8
  %i = alloca i32, align 4
  %ref = alloca i32, align 4
  %decl = alloca %union.tree_node*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !7412, metadata !DIExpression()), !dbg !7413
  store %struct.lto_output_stream* %out_stream, %struct.lto_output_stream** %out_stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %out_stream.addr, metadata !7414, metadata !DIExpression()), !dbg !7415
  store %struct.lto_out_decl_state* %state, %struct.lto_out_decl_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_out_decl_state** %state.addr, metadata !7416, metadata !DIExpression()), !dbg !7417
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7418, metadata !DIExpression()), !dbg !7419
  call void @llvm.dbg.declare(metadata i32* %ref, metadata !7420, metadata !DIExpression()), !dbg !7421
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7422, metadata !DIExpression()), !dbg !7423
  %0 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %state.addr, align 8, !dbg !7424
  %fn_decl = getelementptr inbounds %struct.lto_out_decl_state, %struct.lto_out_decl_state* %0, i32 0, i32 2, !dbg !7425
  %1 = load %union.tree_node*, %union.tree_node** %fn_decl, align 8, !dbg !7425
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !7426
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7426

cond.true:                                        ; preds = %entry
  %2 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %state.addr, align 8, !dbg !7427
  %fn_decl1 = getelementptr inbounds %struct.lto_out_decl_state, %struct.lto_out_decl_state* %2, i32 0, i32 2, !dbg !7428
  %3 = load %union.tree_node*, %union.tree_node** %fn_decl1, align 8, !dbg !7428
  br label %cond.end, !dbg !7426

cond.false:                                       ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !7429
  br label %cond.end, !dbg !7426

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %3, %cond.true ], [ %4, %cond.false ], !dbg !7426
  store %union.tree_node* %cond, %union.tree_node** %decl, align 8, !dbg !7430
  %5 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7431
  %writer_cache = getelementptr inbounds %struct.output_block, %struct.output_block* %5, i32 0, i32 11, !dbg !7432
  %6 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %writer_cache, align 8, !dbg !7432
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7433
  %call = call zeroext i8 @lto_streamer_cache_lookup(%struct.lto_streamer_cache_d* %6, %union.tree_node* %7, i32* %ref), !dbg !7434
  %8 = load i32, i32* %ref, align 4, !dbg !7435
  %cmp = icmp sge i32 %8, 0, !dbg !7435
  br i1 %cmp, label %cond.false3, label %cond.true2, !dbg !7435

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 2256, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7435
  br label %cond.end4, !dbg !7435

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !7435

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !7435
  %9 = load %struct.lto_output_stream*, %struct.lto_output_stream** %out_stream.addr, align 8, !dbg !7436
  %10 = bitcast i32* %ref to i8*, !dbg !7437
  call void @lto_output_data_stream(%struct.lto_output_stream* %9, i8* %10, i64 4), !dbg !7438
  store i32 0, i32* %i, align 4, !dbg !7439
  br label %for.cond, !dbg !7441

for.cond:                                         ; preds = %for.inc, %cond.end4
  %11 = load i32, i32* %i, align 4, !dbg !7442
  %cmp6 = icmp ult i32 %11, 7, !dbg !7444
  br i1 %cmp6, label %for.body, label %for.end, !dbg !7445

for.body:                                         ; preds = %for.cond
  %12 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7446
  %13 = load %struct.lto_output_stream*, %struct.lto_output_stream** %out_stream.addr, align 8, !dbg !7447
  %14 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %state.addr, align 8, !dbg !7448
  %streams = getelementptr inbounds %struct.lto_out_decl_state, %struct.lto_out_decl_state* %14, i32 0, i32 0, !dbg !7449
  %15 = load i32, i32* %i, align 4, !dbg !7450
  %idxprom = zext i32 %15 to i64, !dbg !7448
  %arrayidx = getelementptr inbounds [7 x %struct.lto_tree_ref_encoder], [7 x %struct.lto_tree_ref_encoder]* %streams, i64 0, i64 %idxprom, !dbg !7448
  call void @write_global_references(%struct.output_block* %12, %struct.lto_output_stream* %13, %struct.lto_tree_ref_encoder* %arrayidx), !dbg !7451
  br label %for.inc, !dbg !7451

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4, !dbg !7452
  %inc = add i32 %16, 1, !dbg !7452
  store i32 %inc, i32* %i, align 4, !dbg !7452
  br label %for.cond, !dbg !7453, !llvm.loop !7454

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7456
}

; Function Attrs: noinline nounwind uwtable
define internal void @produce_symtab(%struct.lto_streamer_cache_d* %cache) #0 !dbg !7457 {
entry:
  %cache.addr = alloca %struct.lto_streamer_cache_d*, align 8
  %section_name = alloca i8*, align 8
  %seen = alloca %struct.bitmap_head_def*, align 8
  store %struct.lto_streamer_cache_d* %cache, %struct.lto_streamer_cache_d** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_streamer_cache_d** %cache.addr, metadata !7460, metadata !DIExpression()), !dbg !7461
  call void @llvm.dbg.declare(metadata i8** %section_name, metadata !7462, metadata !DIExpression()), !dbg !7463
  %call = call i8* @lto_get_section_name(i32 7, i8* null), !dbg !7464
  store i8* %call, i8** %section_name, align 8, !dbg !7463
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %seen, metadata !7465, metadata !DIExpression()), !dbg !7466
  %0 = load i8*, i8** %section_name, align 8, !dbg !7467
  call void @lto_begin_section(i8* %0, i8 zeroext 0), !dbg !7468
  %1 = load i8*, i8** %section_name, align 8, !dbg !7469
  call void @free(i8* %1), !dbg !7470
  %call1 = call %struct.bitmap_head_def* @lto_bitmap_alloc(), !dbg !7471
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %seen, align 8, !dbg !7472
  %2 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %cache.addr, align 8, !dbg !7473
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %seen, align 8, !dbg !7474
  call void @write_symbols_of_kind(i32 2, %struct.lto_streamer_cache_d* %2, %struct.bitmap_head_def* %3), !dbg !7475
  %4 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %cache.addr, align 8, !dbg !7476
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %seen, align 8, !dbg !7477
  call void @write_symbols_of_kind(i32 3, %struct.lto_streamer_cache_d* %4, %struct.bitmap_head_def* %5), !dbg !7478
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %seen, align 8, !dbg !7479
  call void @lto_bitmap_free(%struct.bitmap_head_def* %6), !dbg !7480
  call void @lto_end_section(), !dbg !7481
  ret void, !dbg !7482
}

declare dso_local void @lto_write_options() #2

declare dso_local void @lto_cgraph_encoder_delete(%struct.lto_cgraph_encoder_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_lto_out_decl_state_ptr_heap_free(%struct.VEC_lto_out_decl_state_ptr_heap** %vec_) #0 !dbg !7483 {
entry:
  %vec_.addr = alloca %struct.VEC_lto_out_decl_state_ptr_heap**, align 8
  store %struct.VEC_lto_out_decl_state_ptr_heap** %vec_, %struct.VEC_lto_out_decl_state_ptr_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lto_out_decl_state_ptr_heap*** %vec_.addr, metadata !7492, metadata !DIExpression()), !dbg !7493
  %0 = load %struct.VEC_lto_out_decl_state_ptr_heap**, %struct.VEC_lto_out_decl_state_ptr_heap*** %vec_.addr, align 8, !dbg !7494
  %1 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** %0, align 8, !dbg !7494
  %tobool = icmp ne %struct.VEC_lto_out_decl_state_ptr_heap* %1, null, !dbg !7494
  br i1 %tobool, label %if.then, label %if.end, !dbg !7493

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_lto_out_decl_state_ptr_heap**, %struct.VEC_lto_out_decl_state_ptr_heap*** %vec_.addr, align 8, !dbg !7494
  %3 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** %2, align 8, !dbg !7494
  %4 = bitcast %struct.VEC_lto_out_decl_state_ptr_heap* %3 to i8*, !dbg !7494
  call void @free(i8* %4), !dbg !7494
  br label %if.end, !dbg !7494

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_lto_out_decl_state_ptr_heap**, %struct.VEC_lto_out_decl_state_ptr_heap*** %vec_.addr, align 8, !dbg !7493
  store %struct.VEC_lto_out_decl_state_ptr_heap* null, %struct.VEC_lto_out_decl_state_ptr_heap** %5, align 8, !dbg !7493
  ret void, !dbg !7493
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alias_pair_base_iterate(%struct.VEC_alias_pair_base* %vec_, i32 %ix_, %struct.alias_pair** %ptr) #0 !dbg !7496 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_alias_pair_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.alias_pair**, align 8
  store %struct.VEC_alias_pair_base* %vec_, %struct.VEC_alias_pair_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_base** %vec_.addr, metadata !7508, metadata !DIExpression()), !dbg !7509
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7510, metadata !DIExpression()), !dbg !7509
  store %struct.alias_pair** %ptr, %struct.alias_pair*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alias_pair*** %ptr.addr, metadata !7511, metadata !DIExpression()), !dbg !7509
  %0 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !7512
  %tobool = icmp ne %struct.VEC_alias_pair_base* %0, null, !dbg !7512
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7512

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7512
  %2 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !7512
  %num = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %2, i32 0, i32 0, !dbg !7512
  %3 = load i32, i32* %num, align 8, !dbg !7512
  %cmp = icmp ult i32 %1, %3, !dbg !7512
  br i1 %cmp, label %if.then, label %if.else, !dbg !7509

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !7514
  %vec = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %4, i32 0, i32 2, !dbg !7514
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7514
  %idxprom = zext i32 %5 to i64, !dbg !7514
  %arrayidx = getelementptr inbounds [1 x %struct.alias_pair], [1 x %struct.alias_pair]* %vec, i64 0, i64 %idxprom, !dbg !7514
  %6 = load %struct.alias_pair**, %struct.alias_pair*** %ptr.addr, align 8, !dbg !7514
  store %struct.alias_pair* %arrayidx, %struct.alias_pair** %6, align 8, !dbg !7514
  store i32 1, i32* %retval, align 4, !dbg !7514
  br label %return, !dbg !7514

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.alias_pair**, %struct.alias_pair*** %ptr.addr, align 8, !dbg !7516
  store %struct.alias_pair* null, %struct.alias_pair** %7, align 8, !dbg !7516
  store i32 0, i32* %retval, align 4, !dbg !7516
  br label %return, !dbg !7516

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !7509
  ret i32 %8, !dbg !7509
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @output_alias_pair_p(%struct.alias_pair* %p, %struct.cgraph_node_set_def* %set) #0 !dbg !7518 {
entry:
  %retval = alloca i8, align 1
  %p.addr = alloca %struct.alias_pair*, align 8
  %set.addr = alloca %struct.cgraph_node_set_def*, align 8
  %csi = alloca %struct.cgraph_node_set_iterator, align 8
  %target_node = alloca %struct.cgraph_node*, align 8
  %tmp = alloca %struct.cgraph_node_set_iterator, align 8
  store %struct.alias_pair* %p, %struct.alias_pair** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %p.addr, metadata !7521, metadata !DIExpression()), !dbg !7522
  store %struct.cgraph_node_set_def* %set, %struct.cgraph_node_set_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_def** %set.addr, metadata !7523, metadata !DIExpression()), !dbg !7524
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_iterator* %csi, metadata !7525, metadata !DIExpression()), !dbg !7526
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %target_node, metadata !7527, metadata !DIExpression()), !dbg !7528
  %0 = load %struct.alias_pair*, %struct.alias_pair** %p.addr, align 8, !dbg !7529
  %decl = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %0, i32 0, i32 0, !dbg !7529
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7529
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7529
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7529
  %bf.load = load i64, i64* %2, align 8, !dbg !7529
  %bf.clear = and i64 %bf.load, 65535, !dbg !7529
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7529
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7531
  br i1 %cmp, label %if.then, label %if.end, !dbg !7532

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !7533
  br label %return, !dbg !7533

if.end:                                           ; preds = %entry
  %3 = load %struct.alias_pair*, %struct.alias_pair** %p.addr, align 8, !dbg !7534
  %decl1 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %3, i32 0, i32 0, !dbg !7534
  %4 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !7534
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !7534
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !7534
  %bf.load3 = load i64, i64* %5, align 8, !dbg !7534
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !7534
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !7534
  %cmp6 = icmp eq i32 %bf.cast5, 29, !dbg !7534
  br i1 %cmp6, label %cond.false, label %cond.true, !dbg !7534

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 1944, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7534
  br label %cond.end, !dbg !7534

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7534

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7534
  %6 = load %struct.alias_pair*, %struct.alias_pair** %p.addr, align 8, !dbg !7535
  %target = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %6, i32 0, i32 1, !dbg !7536
  %7 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !7536
  %call = call %struct.cgraph_node* @cgraph_node_for_asm(%union.tree_node* %7), !dbg !7537
  store %struct.cgraph_node* %call, %struct.cgraph_node** %target_node, align 8, !dbg !7538
  %8 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set.addr, align 8, !dbg !7539
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %target_node, align 8, !dbg !7540
  %call7 = call { %struct.cgraph_node_set_def*, i32 } @cgraph_node_set_find(%struct.cgraph_node_set_def* %8, %struct.cgraph_node* %9), !dbg !7541
  %10 = bitcast %struct.cgraph_node_set_iterator* %tmp to { %struct.cgraph_node_set_def*, i32 }*, !dbg !7541
  %11 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %10, i32 0, i32 0, !dbg !7541
  %12 = extractvalue { %struct.cgraph_node_set_def*, i32 } %call7, 0, !dbg !7541
  store %struct.cgraph_node_set_def* %12, %struct.cgraph_node_set_def** %11, align 8, !dbg !7541
  %13 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %10, i32 0, i32 1, !dbg !7541
  %14 = extractvalue { %struct.cgraph_node_set_def*, i32 } %call7, 1, !dbg !7541
  store i32 %14, i32* %13, align 8, !dbg !7541
  %15 = bitcast %struct.cgraph_node_set_iterator* %csi to i8*, !dbg !7541
  %16 = bitcast %struct.cgraph_node_set_iterator* %tmp to i8*, !dbg !7541
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 16, i1 false), !dbg !7541
  %17 = bitcast %struct.cgraph_node_set_iterator* %csi to { %struct.cgraph_node_set_def*, i32 }*, !dbg !7542
  %18 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %17, i32 0, i32 0, !dbg !7542
  %19 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %18, align 8, !dbg !7542
  %20 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %17, i32 0, i32 1, !dbg !7542
  %21 = load i32, i32* %20, align 8, !dbg !7542
  %call8 = call zeroext i8 @csi_end_p(%struct.cgraph_node_set_def* %19, i32 %21), !dbg !7542
  %tobool = icmp ne i8 %call8, 0, !dbg !7543
  %lnot = xor i1 %tobool, true, !dbg !7543
  %lnot.ext = zext i1 %lnot to i32, !dbg !7543
  %conv = trunc i32 %lnot.ext to i8, !dbg !7544
  store i8 %conv, i8* %retval, align 1, !dbg !7545
  br label %return, !dbg !7545

return:                                           ; preds = %cond.end, %if.then
  %22 = load i8, i8* %retval, align 1, !dbg !7546
  ret i8 %22, !dbg !7546
}

declare dso_local %struct.cgraph_node* @cgraph_node_for_asm(%union.tree_node*) #2

declare dso_local { %struct.cgraph_node_set_def*, i32 } @cgraph_node_set_find(%struct.cgraph_node_set_def*, %struct.cgraph_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @write_global_stream(%struct.output_block* %ob, %struct.lto_tree_ref_encoder* %encoder) #0 !dbg !7547 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %encoder.addr = alloca %struct.lto_tree_ref_encoder*, align 8
  %t = alloca %union.tree_node*, align 8
  %index = alloca i64, align 8
  %size = alloca i64, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !7550, metadata !DIExpression()), !dbg !7551
  store %struct.lto_tree_ref_encoder* %encoder, %struct.lto_tree_ref_encoder** %encoder.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_tree_ref_encoder** %encoder.addr, metadata !7552, metadata !DIExpression()), !dbg !7553
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7554, metadata !DIExpression()), !dbg !7555
  call void @llvm.dbg.declare(metadata i64* %index, metadata !7556, metadata !DIExpression()), !dbg !7557
  call void @llvm.dbg.declare(metadata i64* %size, metadata !7558, metadata !DIExpression()), !dbg !7560
  %0 = load %struct.lto_tree_ref_encoder*, %struct.lto_tree_ref_encoder** %encoder.addr, align 8, !dbg !7561
  %call = call i32 @lto_tree_ref_encoder_size(%struct.lto_tree_ref_encoder* %0), !dbg !7562
  %conv = zext i32 %call to i64, !dbg !7562
  store i64 %conv, i64* %size, align 8, !dbg !7560
  store i64 0, i64* %index, align 8, !dbg !7563
  br label %for.cond, !dbg !7565

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %index, align 8, !dbg !7566
  %2 = load i64, i64* %size, align 8, !dbg !7568
  %cmp = icmp ult i64 %1, %2, !dbg !7569
  br i1 %cmp, label %for.body, label %for.end, !dbg !7570

for.body:                                         ; preds = %for.cond
  %3 = load %struct.lto_tree_ref_encoder*, %struct.lto_tree_ref_encoder** %encoder.addr, align 8, !dbg !7571
  %4 = load i64, i64* %index, align 8, !dbg !7573
  %conv2 = trunc i64 %4 to i32, !dbg !7573
  %call3 = call %union.tree_node* @lto_tree_ref_encoder_get_tree(%struct.lto_tree_ref_encoder* %3, i32 %conv2), !dbg !7574
  store %union.tree_node* %call3, %union.tree_node** %t, align 8, !dbg !7575
  %5 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7576
  %writer_cache = getelementptr inbounds %struct.output_block, %struct.output_block* %5, i32 0, i32 11, !dbg !7578
  %6 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %writer_cache, align 8, !dbg !7578
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7579
  %call4 = call zeroext i8 @lto_streamer_cache_lookup(%struct.lto_streamer_cache_d* %6, %union.tree_node* %7, i32* null), !dbg !7580
  %tobool = icmp ne i8 %call4, 0, !dbg !7580
  br i1 %tobool, label %if.end, label %if.then, !dbg !7581

if.then:                                          ; preds = %for.body
  %8 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7582
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7583
  call void @lto_output_tree(%struct.output_block* %8, %union.tree_node* %9, i8 zeroext 0), !dbg !7584
  br label %if.end, !dbg !7584

if.end:                                           ; preds = %if.then, %for.body
  %10 = load i32, i32* @flag_wpa, align 4, !dbg !7585
  %tobool5 = icmp ne i32 %10, 0, !dbg !7585
  br i1 %tobool5, label %if.then6, label %if.end25, !dbg !7587

if.then6:                                         ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7588
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7588
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !7588
  %bf.load = load i64, i64* %12, align 8, !dbg !7588
  %bf.clear = and i64 %bf.load, 65535, !dbg !7588
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7588
  %cmp7 = icmp eq i32 %bf.cast, 32, !dbg !7591
  br i1 %cmp7, label %land.lhs.true, label %if.end24, !dbg !7592

land.lhs.true:                                    ; preds = %if.then6
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7593
  %base9 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7593
  %14 = bitcast %struct.tree_base* %base9 to i64*, !dbg !7593
  %bf.load10 = load i64, i64* %14, align 8, !dbg !7593
  %bf.lshr = lshr i64 %bf.load10, 27, !dbg !7593
  %bf.clear11 = and i64 %bf.lshr, 1, !dbg !7593
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !7593
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !7593
  br i1 %tobool13, label %land.lhs.true14, label %if.end24, !dbg !7594

land.lhs.true14:                                  ; preds = %land.lhs.true
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7595
  %decl_common = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !7595
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7595
  %16 = bitcast i40* %decl_flag_1 to i64*, !dbg !7595
  %bf.load15 = load i64, i64* %16, align 8, !dbg !7595
  %bf.lshr16 = lshr i64 %bf.load15, 25, !dbg !7595
  %bf.clear17 = and i64 %bf.lshr16, 1, !dbg !7595
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !7595
  %tobool19 = icmp ne i32 %bf.cast18, 0, !dbg !7595
  br i1 %tobool19, label %if.end24, label %if.then20, !dbg !7596

if.then20:                                        ; preds = %land.lhs.true14
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7597
  %base21 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !7597
  %18 = bitcast %struct.tree_base* %base21 to i64*, !dbg !7597
  %bf.load22 = load i64, i64* %18, align 8, !dbg !7598
  %bf.clear23 = and i64 %bf.load22, -4194305, !dbg !7598
  %bf.set = or i64 %bf.clear23, 4194304, !dbg !7598
  store i64 %bf.set, i64* %18, align 8, !dbg !7598
  br label %if.end24, !dbg !7597

if.end24:                                         ; preds = %if.then20, %land.lhs.true14, %land.lhs.true, %if.then6
  br label %if.end25, !dbg !7599

if.end25:                                         ; preds = %if.end24, %if.end
  br label %for.inc, !dbg !7600

for.inc:                                          ; preds = %if.end25
  %19 = load i64, i64* %index, align 8, !dbg !7601
  %inc = add i64 %19, 1, !dbg !7601
  store i64 %inc, i64* %index, align 8, !dbg !7601
  br label %for.cond, !dbg !7602, !llvm.loop !7603

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7605
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_tree_ref_encoder_get_tree(%struct.lto_tree_ref_encoder* %encoder, i32 %idx) #0 !dbg !7606 {
entry:
  %encoder.addr = alloca %struct.lto_tree_ref_encoder*, align 8
  %idx.addr = alloca i32, align 4
  store %struct.lto_tree_ref_encoder* %encoder, %struct.lto_tree_ref_encoder** %encoder.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_tree_ref_encoder** %encoder.addr, metadata !7609, metadata !DIExpression()), !dbg !7610
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !7611, metadata !DIExpression()), !dbg !7612
  %0 = load %struct.lto_tree_ref_encoder*, %struct.lto_tree_ref_encoder** %encoder.addr, align 8, !dbg !7613
  %trees = getelementptr inbounds %struct.lto_tree_ref_encoder, %struct.lto_tree_ref_encoder* %0, i32 0, i32 2, !dbg !7613
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %trees, align 8, !dbg !7613
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7613
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7613

cond.true:                                        ; preds = %entry
  %2 = load %struct.lto_tree_ref_encoder*, %struct.lto_tree_ref_encoder** %encoder.addr, align 8, !dbg !7613
  %trees1 = getelementptr inbounds %struct.lto_tree_ref_encoder, %struct.lto_tree_ref_encoder* %2, i32 0, i32 2, !dbg !7613
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %trees1, align 8, !dbg !7613
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7613
  br label %cond.end, !dbg !7613

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7613

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7613
  %4 = load i32, i32* %idx.addr, align 4, !dbg !7613
  %call = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %4), !dbg !7613
  ret %union.tree_node* %call, !dbg !7614
}

declare dso_local zeroext i8 @lto_streamer_cache_lookup(%struct.lto_streamer_cache_d*, %union.tree_node*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @write_global_references(%struct.output_block* %ob, %struct.lto_output_stream* %ref_stream, %struct.lto_tree_ref_encoder* %encoder) #0 !dbg !7615 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %ref_stream.addr = alloca %struct.lto_output_stream*, align 8
  %encoder.addr = alloca %struct.lto_tree_ref_encoder*, align 8
  %t = alloca %union.tree_node*, align 8
  %index = alloca i32, align 4
  %size = alloca i32, align 4
  %slot_num = alloca i32, align 4
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !7618, metadata !DIExpression()), !dbg !7619
  store %struct.lto_output_stream* %ref_stream, %struct.lto_output_stream** %ref_stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %ref_stream.addr, metadata !7620, metadata !DIExpression()), !dbg !7621
  store %struct.lto_tree_ref_encoder* %encoder, %struct.lto_tree_ref_encoder** %encoder.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_tree_ref_encoder** %encoder.addr, metadata !7622, metadata !DIExpression()), !dbg !7623
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7624, metadata !DIExpression()), !dbg !7625
  call void @llvm.dbg.declare(metadata i32* %index, metadata !7626, metadata !DIExpression()), !dbg !7627
  call void @llvm.dbg.declare(metadata i32* %size, metadata !7628, metadata !DIExpression()), !dbg !7630
  %0 = load %struct.lto_tree_ref_encoder*, %struct.lto_tree_ref_encoder** %encoder.addr, align 8, !dbg !7631
  %call = call i32 @lto_tree_ref_encoder_size(%struct.lto_tree_ref_encoder* %0), !dbg !7632
  store i32 %call, i32* %size, align 4, !dbg !7630
  %1 = load %struct.lto_output_stream*, %struct.lto_output_stream** %ref_stream.addr, align 8, !dbg !7633
  %2 = bitcast i32* %size to i8*, !dbg !7634
  call void @lto_output_data_stream(%struct.lto_output_stream* %1, i8* %2, i64 4), !dbg !7635
  store i32 0, i32* %index, align 4, !dbg !7636
  br label %for.cond, !dbg !7638

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %index, align 4, !dbg !7639
  %4 = load i32, i32* %size, align 4, !dbg !7641
  %cmp = icmp slt i32 %3, %4, !dbg !7642
  br i1 %cmp, label %for.body, label %for.end, !dbg !7643

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %slot_num, metadata !7644, metadata !DIExpression()), !dbg !7646
  %5 = load %struct.lto_tree_ref_encoder*, %struct.lto_tree_ref_encoder** %encoder.addr, align 8, !dbg !7647
  %6 = load i32, i32* %index, align 4, !dbg !7648
  %call1 = call %union.tree_node* @lto_tree_ref_encoder_get_tree(%struct.lto_tree_ref_encoder* %5, i32 %6), !dbg !7649
  store %union.tree_node* %call1, %union.tree_node** %t, align 8, !dbg !7650
  %7 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7651
  %writer_cache = getelementptr inbounds %struct.output_block, %struct.output_block* %7, i32 0, i32 11, !dbg !7652
  %8 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %writer_cache, align 8, !dbg !7652
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7653
  %call2 = call zeroext i8 @lto_streamer_cache_lookup(%struct.lto_streamer_cache_d* %8, %union.tree_node* %9, i32* %slot_num), !dbg !7654
  %10 = load i32, i32* %slot_num, align 4, !dbg !7655
  %cmp3 = icmp sge i32 %10, 0, !dbg !7655
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !7655

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 2220, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7655
  br label %cond.end, !dbg !7655

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !7655

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7655
  %11 = load %struct.lto_output_stream*, %struct.lto_output_stream** %ref_stream.addr, align 8, !dbg !7656
  %12 = bitcast i32* %slot_num to i8*, !dbg !7657
  call void @lto_output_data_stream(%struct.lto_output_stream* %11, i8* %12, i64 4), !dbg !7658
  br label %for.inc, !dbg !7659

for.inc:                                          ; preds = %cond.end
  %13 = load i32, i32* %index, align 4, !dbg !7660
  %inc = add nsw i32 %13, 1, !dbg !7660
  store i32 %inc, i32* %index, align 4, !dbg !7660
  br label %for.cond, !dbg !7661, !llvm.loop !7662

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7664
}

; Function Attrs: noinline nounwind uwtable
define internal void @write_symbols_of_kind(i32 %kind, %struct.lto_streamer_cache_d* %cache, %struct.bitmap_head_def* %seen) #0 !dbg !7665 {
entry:
  %kind.addr = alloca i32, align 4
  %cache.addr = alloca %struct.lto_streamer_cache_d*, align 8
  %seen.addr = alloca %struct.bitmap_head_def*, align 8
  %out_state = alloca %struct.lto_out_decl_state*, align 8
  %stream = alloca %struct.lto_output_stream, align 8
  %num_fns = alloca i32, align 4
  %idx = alloca i32, align 4
  store i32 %kind, i32* %kind.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kind.addr, metadata !7669, metadata !DIExpression()), !dbg !7670
  store %struct.lto_streamer_cache_d* %cache, %struct.lto_streamer_cache_d** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_streamer_cache_d** %cache.addr, metadata !7671, metadata !DIExpression()), !dbg !7672
  store %struct.bitmap_head_def* %seen, %struct.bitmap_head_def** %seen.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %seen.addr, metadata !7673, metadata !DIExpression()), !dbg !7674
  call void @llvm.dbg.declare(metadata %struct.lto_out_decl_state** %out_state, metadata !7675, metadata !DIExpression()), !dbg !7676
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream* %stream, metadata !7677, metadata !DIExpression()), !dbg !7678
  call void @llvm.dbg.declare(metadata i32* %num_fns, metadata !7679, metadata !DIExpression()), !dbg !7680
  %0 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !7681
  %tobool = icmp ne %struct.VEC_lto_out_decl_state_ptr_heap* %0, null, !dbg !7681
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7681

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !7681
  %base = getelementptr inbounds %struct.VEC_lto_out_decl_state_ptr_heap, %struct.VEC_lto_out_decl_state_ptr_heap* %1, i32 0, i32 0, !dbg !7681
  br label %cond.end, !dbg !7681

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7681

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lto_out_decl_state_ptr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7681
  %call = call i32 @VEC_lto_out_decl_state_ptr_base_length(%struct.VEC_lto_out_decl_state_ptr_base* %cond), !dbg !7681
  store i32 %call, i32* %num_fns, align 4, !dbg !7680
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !7682, metadata !DIExpression()), !dbg !7683
  %2 = bitcast %struct.lto_output_stream* %stream to i8*, !dbg !7684
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 40, i1 false), !dbg !7684
  %call1 = call %struct.lto_out_decl_state* @lto_get_out_decl_state(), !dbg !7685
  store %struct.lto_out_decl_state* %call1, %struct.lto_out_decl_state** %out_state, align 8, !dbg !7686
  %3 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %cache.addr, align 8, !dbg !7687
  %4 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %out_state, align 8, !dbg !7688
  %streams = getelementptr inbounds %struct.lto_out_decl_state, %struct.lto_out_decl_state* %4, i32 0, i32 0, !dbg !7689
  %5 = load i32, i32* %kind.addr, align 4, !dbg !7690
  %idxprom = zext i32 %5 to i64, !dbg !7688
  %arrayidx = getelementptr inbounds [7 x %struct.lto_tree_ref_encoder], [7 x %struct.lto_tree_ref_encoder]* %streams, i64 0, i64 %idxprom, !dbg !7688
  %trees = getelementptr inbounds %struct.lto_tree_ref_encoder, %struct.lto_tree_ref_encoder* %arrayidx, i32 0, i32 2, !dbg !7691
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %trees, align 8, !dbg !7691
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %seen.addr, align 8, !dbg !7692
  call void @write_symbol_vec(%struct.lto_streamer_cache_d* %3, %struct.lto_output_stream* %stream, %struct.VEC_tree_heap* %6, %struct.bitmap_head_def* %7), !dbg !7693
  store i32 0, i32* %idx, align 4, !dbg !7694
  br label %for.cond, !dbg !7696

for.cond:                                         ; preds = %for.inc, %cond.end
  %8 = load i32, i32* %idx, align 4, !dbg !7697
  %9 = load i32, i32* %num_fns, align 4, !dbg !7699
  %cmp = icmp ult i32 %8, %9, !dbg !7700
  br i1 %cmp, label %for.body, label %for.end, !dbg !7701

for.body:                                         ; preds = %for.cond
  %10 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !7702
  %tobool2 = icmp ne %struct.VEC_lto_out_decl_state_ptr_heap* %10, null, !dbg !7702
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !7702

cond.true3:                                       ; preds = %for.body
  %11 = load %struct.VEC_lto_out_decl_state_ptr_heap*, %struct.VEC_lto_out_decl_state_ptr_heap** @lto_function_decl_states, align 8, !dbg !7702
  %base4 = getelementptr inbounds %struct.VEC_lto_out_decl_state_ptr_heap, %struct.VEC_lto_out_decl_state_ptr_heap* %11, i32 0, i32 0, !dbg !7702
  br label %cond.end6, !dbg !7702

cond.false5:                                      ; preds = %for.body
  br label %cond.end6, !dbg !7702

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_lto_out_decl_state_ptr_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !7702
  %12 = load i32, i32* %idx, align 4, !dbg !7702
  %call8 = call %struct.lto_out_decl_state* @VEC_lto_out_decl_state_ptr_base_index(%struct.VEC_lto_out_decl_state_ptr_base* %cond7, i32 %12), !dbg !7702
  store %struct.lto_out_decl_state* %call8, %struct.lto_out_decl_state** %out_state, align 8, !dbg !7704
  %13 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %cache.addr, align 8, !dbg !7705
  %14 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %out_state, align 8, !dbg !7706
  %streams9 = getelementptr inbounds %struct.lto_out_decl_state, %struct.lto_out_decl_state* %14, i32 0, i32 0, !dbg !7707
  %15 = load i32, i32* %kind.addr, align 4, !dbg !7708
  %idxprom10 = zext i32 %15 to i64, !dbg !7706
  %arrayidx11 = getelementptr inbounds [7 x %struct.lto_tree_ref_encoder], [7 x %struct.lto_tree_ref_encoder]* %streams9, i64 0, i64 %idxprom10, !dbg !7706
  %trees12 = getelementptr inbounds %struct.lto_tree_ref_encoder, %struct.lto_tree_ref_encoder* %arrayidx11, i32 0, i32 2, !dbg !7709
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %trees12, align 8, !dbg !7709
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %seen.addr, align 8, !dbg !7710
  call void @write_symbol_vec(%struct.lto_streamer_cache_d* %13, %struct.lto_output_stream* %stream, %struct.VEC_tree_heap* %16, %struct.bitmap_head_def* %17), !dbg !7711
  br label %for.inc, !dbg !7712

for.inc:                                          ; preds = %cond.end6
  %18 = load i32, i32* %idx, align 4, !dbg !7713
  %inc = add i32 %18, 1, !dbg !7713
  store i32 %inc, i32* %idx, align 4, !dbg !7713
  br label %for.cond, !dbg !7714, !llvm.loop !7715

for.end:                                          ; preds = %for.cond
  call void @lto_write_stream(%struct.lto_output_stream* %stream), !dbg !7717
  ret void, !dbg !7718
}

; Function Attrs: noinline nounwind uwtable
define internal void @write_symbol_vec(%struct.lto_streamer_cache_d* %cache, %struct.lto_output_stream* %stream, %struct.VEC_tree_heap* %v, %struct.bitmap_head_def* %seen) #0 !dbg !7719 {
entry:
  %cache.addr = alloca %struct.lto_streamer_cache_d*, align 8
  %stream.addr = alloca %struct.lto_output_stream*, align 8
  %v.addr = alloca %struct.VEC_tree_heap*, align 8
  %seen.addr = alloca %struct.bitmap_head_def*, align 8
  %t = alloca %union.tree_node*, align 8
  %index = alloca i32, align 4
  %name = alloca i8*, align 8
  %kind = alloca i32, align 4
  %visibility = alloca i32, align 4
  %slot_num = alloca i32, align 4
  %size = alloca i64, align 8
  %comdat = alloca i8*, align 8
  store %struct.lto_streamer_cache_d* %cache, %struct.lto_streamer_cache_d** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_streamer_cache_d** %cache.addr, metadata !7722, metadata !DIExpression()), !dbg !7723
  store %struct.lto_output_stream* %stream, %struct.lto_output_stream** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_output_stream** %stream.addr, metadata !7724, metadata !DIExpression()), !dbg !7725
  store %struct.VEC_tree_heap* %v, %struct.VEC_tree_heap** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %v.addr, metadata !7726, metadata !DIExpression()), !dbg !7727
  store %struct.bitmap_head_def* %seen, %struct.bitmap_head_def** %seen.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %seen.addr, metadata !7728, metadata !DIExpression()), !dbg !7729
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7730, metadata !DIExpression()), !dbg !7731
  call void @llvm.dbg.declare(metadata i32* %index, metadata !7732, metadata !DIExpression()), !dbg !7733
  store i32 0, i32* %index, align 4, !dbg !7734
  br label %for.cond, !dbg !7736

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %v.addr, align 8, !dbg !7737
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !7737
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7737

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %v.addr, align 8, !dbg !7737
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !7737
  br label %cond.end, !dbg !7737

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7737

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7737
  %2 = load i32, i32* %index, align 4, !dbg !7737
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %2, %union.tree_node** %t), !dbg !7737
  %tobool1 = icmp ne i32 %call, 0, !dbg !7739
  br i1 %tobool1, label %for.body, label %for.end, !dbg !7739

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i8** %name, metadata !7740, metadata !DIExpression()), !dbg !7742
  call void @llvm.dbg.declare(metadata i32* %kind, metadata !7743, metadata !DIExpression()), !dbg !7744
  call void @llvm.dbg.declare(metadata i32* %visibility, metadata !7745, metadata !DIExpression()), !dbg !7746
  call void @llvm.dbg.declare(metadata i32* %slot_num, metadata !7747, metadata !DIExpression()), !dbg !7748
  call void @llvm.dbg.declare(metadata i64* %size, metadata !7749, metadata !DIExpression()), !dbg !7750
  call void @llvm.dbg.declare(metadata i8** %comdat, metadata !7751, metadata !DIExpression()), !dbg !7752
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7753
  %base2 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7753
  %4 = bitcast %struct.tree_base* %base2 to i64*, !dbg !7753
  %bf.load = load i64, i64* %4, align 8, !dbg !7753
  %bf.lshr = lshr i64 %bf.load, 27, !dbg !7753
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7753
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7753
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !7753
  br i1 %tobool3, label %lor.lhs.false, label %if.then, !dbg !7755

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7756
  %call4 = call zeroext i8 @is_builtin_fn(%union.tree_node* %5), !dbg !7757
  %conv = zext i8 %call4 to i32, !dbg !7757
  %tobool5 = icmp ne i32 %conv, 0, !dbg !7757
  br i1 %tobool5, label %if.then, label %lor.lhs.false6, !dbg !7758

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7759
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !7759
  %abstract_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7759
  %7 = bitcast i40* %abstract_flag to i64*, !dbg !7759
  %bf.load7 = load i64, i64* %7, align 8, !dbg !7759
  %bf.lshr8 = lshr i64 %bf.load7, 11, !dbg !7759
  %bf.clear9 = and i64 %bf.lshr8, 1, !dbg !7759
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !7759
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !7759
  br i1 %tobool11, label %if.then, label %lor.lhs.false12, !dbg !7760

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7761
  %base13 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7761
  %9 = bitcast %struct.tree_base* %base13 to i64*, !dbg !7761
  %bf.load14 = load i64, i64* %9, align 8, !dbg !7761
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !7761
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !7761
  %cmp = icmp eq i32 %bf.cast16, 36, !dbg !7762
  br i1 %cmp, label %if.then, label %if.end, !dbg !7763

if.then:                                          ; preds = %lor.lhs.false12, %lor.lhs.false6, %lor.lhs.false, %for.body
  br label %for.inc, !dbg !7764

if.end:                                           ; preds = %lor.lhs.false12
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7765
  %base18 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7765
  %11 = bitcast %struct.tree_base* %base18 to i64*, !dbg !7765
  %bf.load19 = load i64, i64* %11, align 8, !dbg !7765
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !7765
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !7765
  %cmp22 = icmp eq i32 %bf.cast21, 32, !dbg !7765
  br i1 %cmp22, label %cond.false32, label %lor.lhs.false24, !dbg !7765

lor.lhs.false24:                                  ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7765
  %base25 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7765
  %13 = bitcast %struct.tree_base* %base25 to i64*, !dbg !7765
  %bf.load26 = load i64, i64* %13, align 8, !dbg !7765
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !7765
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !7765
  %cmp29 = icmp eq i32 %bf.cast28, 29, !dbg !7765
  br i1 %cmp29, label %cond.false32, label %cond.true31, !dbg !7765

cond.true31:                                      ; preds = %lor.lhs.false24
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 2314, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7765
  br label %cond.end33, !dbg !7765

cond.false32:                                     ; preds = %lor.lhs.false24, %if.end
  br label %cond.end33, !dbg !7765

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond34 = phi i32 [ 0, %cond.true31 ], [ 0, %cond.false32 ], !dbg !7765
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7766
  %call35 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %14), !dbg !7766
  %identifier = bitcast %union.tree_node* %call35 to %struct.tree_identifier*, !dbg !7766
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !7766
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !7766
  %15 = load i8*, i8** %str, align 8, !dbg !7766
  store i8* %15, i8** %name, align 8, !dbg !7767
  %16 = load i8*, i8** %name, align 8, !dbg !7768
  %arrayidx = getelementptr inbounds i8, i8* %16, i64 0, !dbg !7768
  %17 = load i8, i8* %arrayidx, align 1, !dbg !7768
  %conv36 = sext i8 %17 to i32, !dbg !7768
  %cmp37 = icmp eq i32 %conv36, 42, !dbg !7770
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !7771

if.then39:                                        ; preds = %cond.end33
  %18 = load i8*, i8** %name, align 8, !dbg !7772
  %arrayidx40 = getelementptr inbounds i8, i8* %18, i64 1, !dbg !7772
  store i8* %arrayidx40, i8** %name, align 8, !dbg !7773
  br label %if.end41, !dbg !7774

if.end41:                                         ; preds = %if.then39, %cond.end33
  %19 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %cache.addr, align 8, !dbg !7775
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7776
  %call42 = call zeroext i8 @lto_streamer_cache_lookup(%struct.lto_streamer_cache_d* %19, %union.tree_node* %20, i32* %slot_num), !dbg !7777
  %21 = load i32, i32* %slot_num, align 4, !dbg !7778
  %cmp43 = icmp sge i32 %21, 0, !dbg !7778
  br i1 %cmp43, label %cond.false46, label %cond.true45, !dbg !7778

cond.true45:                                      ; preds = %if.end41
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 2325, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7778
  br label %cond.end47, !dbg !7778

cond.false46:                                     ; preds = %if.end41
  br label %cond.end47, !dbg !7778

cond.end47:                                       ; preds = %cond.false46, %cond.true45
  %cond48 = phi i32 [ 0, %cond.true45 ], [ 0, %cond.false46 ], !dbg !7778
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %seen.addr, align 8, !dbg !7779
  %23 = load i32, i32* %slot_num, align 4, !dbg !7781
  %call49 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %22, i32 %23), !dbg !7782
  %tobool50 = icmp ne i32 %call49, 0, !dbg !7782
  br i1 %tobool50, label %if.then51, label %if.else, !dbg !7783

if.then51:                                        ; preds = %cond.end47
  br label %for.inc, !dbg !7784

if.else:                                          ; preds = %cond.end47
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %seen.addr, align 8, !dbg !7785
  %25 = load i32, i32* %slot_num, align 4, !dbg !7786
  %call52 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %24, i32 %25), !dbg !7787
  br label %if.end53

if.end53:                                         ; preds = %if.else
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7788
  %decl_common54 = bitcast %union.tree_node* %26 to %struct.tree_decl_common*, !dbg !7788
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common54, i32 0, i32 2, !dbg !7788
  %27 = bitcast i40* %decl_flag_1 to i64*, !dbg !7788
  %bf.load55 = load i64, i64* %27, align 8, !dbg !7788
  %bf.lshr56 = lshr i64 %bf.load55, 25, !dbg !7788
  %bf.clear57 = and i64 %bf.lshr56, 1, !dbg !7788
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !7788
  %tobool59 = icmp ne i32 %bf.cast58, 0, !dbg !7788
  br i1 %tobool59, label %if.then60, label %if.else68, !dbg !7790

if.then60:                                        ; preds = %if.end53
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7791
  %decl_with_vis = bitcast %union.tree_node* %28 to %struct.tree_decl_with_vis*, !dbg !7791
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !7791
  %29 = bitcast i24* %weak_flag to i32*, !dbg !7791
  %bf.load61 = load i32, i32* %29, align 8, !dbg !7791
  %bf.lshr62 = lshr i32 %bf.load61, 7, !dbg !7791
  %bf.clear63 = and i32 %bf.lshr62, 1, !dbg !7791
  %tobool64 = icmp ne i32 %bf.clear63, 0, !dbg !7791
  br i1 %tobool64, label %if.then65, label %if.else66, !dbg !7794

if.then65:                                        ; preds = %if.then60
  store i32 3, i32* %kind, align 4, !dbg !7795
  br label %if.end67, !dbg !7796

if.else66:                                        ; preds = %if.then60
  store i32 2, i32* %kind, align 4, !dbg !7797
  br label %if.end67

if.end67:                                         ; preds = %if.else66, %if.then65
  br label %if.end86, !dbg !7798

if.else68:                                        ; preds = %if.end53
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7799
  %decl_with_vis69 = bitcast %union.tree_node* %30 to %struct.tree_decl_with_vis*, !dbg !7799
  %weak_flag70 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis69, i32 0, i32 4, !dbg !7799
  %31 = bitcast i24* %weak_flag70 to i32*, !dbg !7799
  %bf.load71 = load i32, i32* %31, align 8, !dbg !7799
  %bf.lshr72 = lshr i32 %bf.load71, 7, !dbg !7799
  %bf.clear73 = and i32 %bf.lshr72, 1, !dbg !7799
  %tobool74 = icmp ne i32 %bf.clear73, 0, !dbg !7799
  br i1 %tobool74, label %if.then75, label %if.else76, !dbg !7802

if.then75:                                        ; preds = %if.else68
  store i32 1, i32* %kind, align 4, !dbg !7803
  br label %if.end85, !dbg !7804

if.else76:                                        ; preds = %if.else68
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7805
  %decl_with_vis77 = bitcast %union.tree_node* %32 to %struct.tree_decl_with_vis*, !dbg !7805
  %common_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis77, i32 0, i32 4, !dbg !7805
  %33 = bitcast i24* %common_flag to i32*, !dbg !7805
  %bf.load78 = load i32, i32* %33, align 8, !dbg !7805
  %bf.lshr79 = lshr i32 %bf.load78, 3, !dbg !7805
  %bf.clear80 = and i32 %bf.lshr79, 1, !dbg !7805
  %tobool81 = icmp ne i32 %bf.clear80, 0, !dbg !7805
  br i1 %tobool81, label %if.then82, label %if.else83, !dbg !7807

if.then82:                                        ; preds = %if.else76
  store i32 4, i32* %kind, align 4, !dbg !7808
  br label %if.end84, !dbg !7809

if.else83:                                        ; preds = %if.else76
  store i32 0, i32* %kind, align 4, !dbg !7810
  br label %if.end84

if.end84:                                         ; preds = %if.else83, %if.then82
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.then75
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.end67
  %34 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7811
  %decl_with_vis87 = bitcast %union.tree_node* %34 to %struct.tree_decl_with_vis*, !dbg !7811
  %visibility88 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis87, i32 0, i32 4, !dbg !7811
  %35 = bitcast i24* %visibility88 to i32*, !dbg !7811
  %bf.load89 = load i32, i32* %35, align 8, !dbg !7811
  %bf.lshr90 = lshr i32 %bf.load89, 10, !dbg !7811
  %bf.clear91 = and i32 %bf.lshr90, 3, !dbg !7811
  switch i32 %bf.clear91, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb92
    i32 2, label %sw.bb93
    i32 3, label %sw.bb94
  ], !dbg !7812

sw.bb:                                            ; preds = %if.end86
  store i32 0, i32* %visibility, align 4, !dbg !7813
  br label %sw.epilog, !dbg !7815

sw.bb92:                                          ; preds = %if.end86
  store i32 1, i32* %visibility, align 4, !dbg !7816
  br label %sw.epilog, !dbg !7817

sw.bb93:                                          ; preds = %if.end86
  store i32 3, i32* %visibility, align 4, !dbg !7818
  br label %sw.epilog, !dbg !7819

sw.bb94:                                          ; preds = %if.end86
  store i32 2, i32* %visibility, align 4, !dbg !7820
  br label %sw.epilog, !dbg !7821

sw.epilog:                                        ; preds = %if.end86, %sw.bb94, %sw.bb93, %sw.bb92, %sw.bb
  %36 = load i32, i32* %kind, align 4, !dbg !7822
  %cmp95 = icmp eq i32 %36, 4, !dbg !7824
  br i1 %cmp95, label %land.lhs.true, label %if.else117, !dbg !7825

land.lhs.true:                                    ; preds = %sw.epilog
  %37 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7826
  %decl_common97 = bitcast %union.tree_node* %37 to %struct.tree_decl_common*, !dbg !7826
  %size98 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common97, i32 0, i32 1, !dbg !7826
  %38 = load %union.tree_node*, %union.tree_node** %size98, align 8, !dbg !7826
  %tobool99 = icmp ne %union.tree_node* %38, null, !dbg !7826
  br i1 %tobool99, label %land.lhs.true100, label %if.else117, !dbg !7827

land.lhs.true100:                                 ; preds = %land.lhs.true
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7828
  %decl_common101 = bitcast %union.tree_node* %39 to %struct.tree_decl_common*, !dbg !7828
  %size102 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common101, i32 0, i32 1, !dbg !7828
  %40 = load %union.tree_node*, %union.tree_node** %size102, align 8, !dbg !7828
  %base103 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !7828
  %41 = bitcast %struct.tree_base* %base103 to i64*, !dbg !7828
  %bf.load104 = load i64, i64* %41, align 8, !dbg !7828
  %bf.clear105 = and i64 %bf.load104, 65535, !dbg !7828
  %bf.cast106 = trunc i64 %bf.clear105 to i32, !dbg !7828
  %cmp107 = icmp eq i32 %bf.cast106, 23, !dbg !7829
  br i1 %cmp107, label %if.then109, label %if.else117, !dbg !7830

if.then109:                                       ; preds = %land.lhs.true100
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7831
  %decl_common110 = bitcast %union.tree_node* %42 to %struct.tree_decl_common*, !dbg !7831
  %size111 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common110, i32 0, i32 1, !dbg !7831
  %43 = load %union.tree_node*, %union.tree_node** %size111, align 8, !dbg !7831
  %int_cst = bitcast %union.tree_node* %43 to %struct.tree_int_cst*, !dbg !7831
  %int_cst112 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7831
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst112, i32 0, i32 1, !dbg !7831
  %44 = load i64, i64* %high, align 8, !dbg !7831
  %shl = shl i64 %44, 32, !dbg !7832
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7833
  %decl_common113 = bitcast %union.tree_node* %45 to %struct.tree_decl_common*, !dbg !7833
  %size114 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common113, i32 0, i32 1, !dbg !7833
  %46 = load %union.tree_node*, %union.tree_node** %size114, align 8, !dbg !7833
  %int_cst115 = bitcast %union.tree_node* %46 to %struct.tree_int_cst*, !dbg !7833
  %int_cst116 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst115, i32 0, i32 1, !dbg !7833
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst116, i32 0, i32 0, !dbg !7833
  %47 = load i64, i64* %low, align 8, !dbg !7833
  %or = or i64 %shl, %47, !dbg !7834
  store i64 %or, i64* %size, align 8, !dbg !7835
  br label %if.end118, !dbg !7836

if.else117:                                       ; preds = %land.lhs.true100, %land.lhs.true, %sw.epilog
  store i64 0, i64* %size, align 8, !dbg !7837
  br label %if.end118

if.end118:                                        ; preds = %if.else117, %if.then109
  %48 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7838
  %decl_with_vis119 = bitcast %union.tree_node* %48 to %struct.tree_decl_with_vis*, !dbg !7838
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis119, i32 0, i32 3, !dbg !7838
  %49 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !7838
  %cmp120 = icmp ne %union.tree_node* %49, null, !dbg !7838
  br i1 %cmp120, label %if.then122, label %if.else128, !dbg !7840

if.then122:                                       ; preds = %if.end118
  %50 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7841
  %decl_with_vis123 = bitcast %union.tree_node* %50 to %struct.tree_decl_with_vis*, !dbg !7841
  %comdat_group124 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis123, i32 0, i32 3, !dbg !7841
  %51 = load %union.tree_node*, %union.tree_node** %comdat_group124, align 8, !dbg !7841
  %identifier125 = bitcast %union.tree_node* %51 to %struct.tree_identifier*, !dbg !7841
  %id126 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier125, i32 0, i32 1, !dbg !7841
  %str127 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id126, i32 0, i32 0, !dbg !7841
  %52 = load i8*, i8** %str127, align 8, !dbg !7841
  store i8* %52, i8** %comdat, align 8, !dbg !7842
  br label %if.end129, !dbg !7843

if.else128:                                       ; preds = %if.end118
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i64 0, i64 0), i8** %comdat, align 8, !dbg !7844
  br label %if.end129

if.end129:                                        ; preds = %if.else128, %if.then122
  %53 = load %struct.lto_output_stream*, %struct.lto_output_stream** %stream.addr, align 8, !dbg !7845
  %54 = load i8*, i8** %name, align 8, !dbg !7846
  %55 = load i8*, i8** %name, align 8, !dbg !7847
  %call130 = call i64 @strlen(i8* %55), !dbg !7848
  %add = add i64 %call130, 1, !dbg !7849
  call void @lto_output_data_stream(%struct.lto_output_stream* %53, i8* %54, i64 %add), !dbg !7850
  %56 = load %struct.lto_output_stream*, %struct.lto_output_stream** %stream.addr, align 8, !dbg !7851
  %57 = load i8*, i8** %comdat, align 8, !dbg !7852
  %58 = load i8*, i8** %comdat, align 8, !dbg !7853
  %call131 = call i64 @strlen(i8* %58), !dbg !7854
  %add132 = add i64 %call131, 1, !dbg !7855
  call void @lto_output_data_stream(%struct.lto_output_stream* %56, i8* %57, i64 %add132), !dbg !7856
  %59 = load %struct.lto_output_stream*, %struct.lto_output_stream** %stream.addr, align 8, !dbg !7857
  %60 = bitcast i32* %kind to i8*, !dbg !7858
  call void @lto_output_data_stream(%struct.lto_output_stream* %59, i8* %60, i64 1), !dbg !7859
  %61 = load %struct.lto_output_stream*, %struct.lto_output_stream** %stream.addr, align 8, !dbg !7860
  %62 = bitcast i32* %visibility to i8*, !dbg !7861
  call void @lto_output_data_stream(%struct.lto_output_stream* %61, i8* %62, i64 1), !dbg !7862
  %63 = load %struct.lto_output_stream*, %struct.lto_output_stream** %stream.addr, align 8, !dbg !7863
  %64 = bitcast i64* %size to i8*, !dbg !7864
  call void @lto_output_data_stream(%struct.lto_output_stream* %63, i8* %64, i64 8), !dbg !7865
  %65 = load %struct.lto_output_stream*, %struct.lto_output_stream** %stream.addr, align 8, !dbg !7866
  %66 = bitcast i32* %slot_num to i8*, !dbg !7867
  call void @lto_output_data_stream(%struct.lto_output_stream* %65, i8* %66, i64 4), !dbg !7868
  br label %for.inc, !dbg !7869

for.inc:                                          ; preds = %if.end129, %if.then51, %if.then
  %67 = load i32, i32* %index, align 4, !dbg !7870
  %inc = add nsw i32 %67, 1, !dbg !7870
  store i32 %inc, i32* %index, align 4, !dbg !7870
  br label %for.cond, !dbg !7871, !llvm.loop !7872

for.end:                                          ; preds = %cond.end
  ret void, !dbg !7874
}

declare dso_local zeroext i8 @is_builtin_fn(%union.tree_node*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2675, !2676, !2677}
!llvm.ident = !{!2678}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_ipa_lto_gimple_out", scope: !2, file: !3, line: 2130, type: !2430, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !931, globals: !2672, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "lto-streamer-out.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !20, !148, !343, !350, !356, !361, !366, !384, !391, !398, !421, !428, !604, !633, !646, !652, !689, !694, !708, !747, !773, !783, !917, !925}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lto_section_type", file: !6, line: 256, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./lto-streamer.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19}
!9 = !DIEnumerator(name: "LTO_section_decls", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "LTO_section_function_body", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "LTO_section_static_initializer", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "LTO_section_cgraph", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "LTO_section_jump_functions", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "LTO_section_ipa_pure_const", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "LTO_section_ipa_reference", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "LTO_section_symtab", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "LTO_section_wpa_fixup", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "LTO_section_opts", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "LTO_N_SECTION_TYPES", value: 10, isUnsigned: true)
!20 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !21, line: 7, baseType: !7, size: 32, elements: !22)
!21 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!22 = !{!23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147}
!23 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!24 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!25 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!26 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!27 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!28 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!29 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!30 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!31 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!32 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!33 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!34 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!35 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!36 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!37 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!38 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!39 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!40 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!41 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!42 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!43 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!44 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!45 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!46 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!47 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!48 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!49 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!50 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!51 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!52 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!53 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!54 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!55 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!56 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!57 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!58 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!59 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!60 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!61 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!62 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!63 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!64 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!65 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!66 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!67 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!68 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!69 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!70 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!71 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!72 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!73 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!74 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!75 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!76 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!77 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!78 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!79 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!80 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!81 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!82 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!83 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!84 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!85 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!86 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!87 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!90 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!91 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!92 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!93 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!94 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!95 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!96 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!97 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!98 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!99 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!100 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!101 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!102 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!103 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!104 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!105 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!106 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!107 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!108 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!109 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!133 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!134 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!135 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!136 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!137 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!139 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!140 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!141 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!142 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!144 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!146 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!147 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!148 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !149, line: 39, baseType: !7, size: 32, elements: !150)
!149 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!150 = !{!151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342}
!151 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!152 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!153 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!154 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!155 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!156 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!157 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!158 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!159 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!160 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!161 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!163 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!164 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!165 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!166 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!167 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!168 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!169 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!170 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!171 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!172 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!173 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!174 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!175 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!176 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!177 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!178 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!179 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!180 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!181 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!182 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!183 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!184 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!185 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!186 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!187 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!188 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!189 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!190 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!191 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!192 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!193 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!194 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!195 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!196 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!197 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!198 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!199 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!200 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!201 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!202 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!203 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!204 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!205 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!206 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!207 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!208 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!209 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!210 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!211 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!212 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!213 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!214 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!215 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!216 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!217 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!218 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!219 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!220 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!221 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!222 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!223 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!224 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!225 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!226 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!227 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!228 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!229 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!230 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!231 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!232 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!233 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!234 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!235 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!236 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!237 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!238 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!239 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!240 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!241 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!242 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!243 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!244 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!245 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!246 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!247 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!248 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!249 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!250 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!251 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!252 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!253 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!254 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!255 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!256 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!257 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!258 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!259 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!260 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!261 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!262 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!263 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!264 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!265 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!266 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!267 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!268 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!269 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!270 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!271 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!272 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!273 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!274 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!275 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!276 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!277 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!278 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!279 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!280 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!281 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!282 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!283 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!284 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!285 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!286 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!287 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!288 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!289 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!290 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!291 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!292 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!293 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!294 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!295 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!296 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!297 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!298 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!299 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!300 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!301 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!302 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!303 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!304 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!305 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!306 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!307 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!308 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!309 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!310 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!311 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!312 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!313 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!314 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!315 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!316 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!317 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!318 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!319 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!320 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!322 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!323 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!324 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!325 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!326 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!327 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!328 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!329 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!330 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!331 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!332 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!333 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!334 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!335 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!336 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!337 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!338 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!339 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!340 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!341 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!342 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!343 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !344, line: 30, baseType: !7, size: 32, elements: !345)
!344 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!345 = !{!346, !347, !348, !349}
!346 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!347 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!348 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!349 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!350 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !351, line: 363, baseType: !7, size: 32, elements: !352)
!351 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!352 = !{!353, !354, !355}
!353 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!354 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!355 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!356 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !351, line: 355, baseType: !7, size: 32, elements: !357)
!357 = !{!358, !359, !360}
!358 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!359 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!360 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!361 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !362, line: 474, baseType: !7, size: 32, elements: !363)
!362 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!363 = !{!364, !365}
!364 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!365 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!366 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !149, line: 280, baseType: !7, size: 32, elements: !367)
!367 = !{!368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383}
!368 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!377 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!378 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!383 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !149, line: 1817, baseType: !7, size: 32, elements: !385)
!385 = !{!386, !387, !388, !389, !390}
!386 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!389 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!390 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!391 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !149, line: 1805, baseType: !7, size: 32, elements: !392)
!392 = !{!393, !394, !395, !396, !397}
!393 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!397 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!398 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !399, line: 309, baseType: !7, size: 32, elements: !400)
!399 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!400 = !{!401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420}
!401 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!402 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!403 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!404 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!405 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!406 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!407 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!408 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!409 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!410 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!411 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!412 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!413 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!414 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!415 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!416 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!417 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!418 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!419 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!420 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!421 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !422, line: 104, baseType: !7, size: 32, elements: !423)
!422 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!423 = !{!424, !425, !426, !427}
!424 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!425 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!426 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!427 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!428 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !429, line: 74, baseType: !7, size: 32, elements: !430)
!429 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!430 = !{!431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603}
!431 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!589 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!590 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!591 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!592 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!593 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!594 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!595 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!596 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!597 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!598 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!599 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!600 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!601 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!602 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!603 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!604 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "LTO_tags", file: !6, line: 175, baseType: !7, size: 32, elements: !605)
!605 = !{!606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632}
!606 = !DIEnumerator(name: "LTO_null", value: 0, isUnsigned: true)
!607 = !DIEnumerator(name: "LTO_bb0", value: 224, isUnsigned: true)
!608 = !DIEnumerator(name: "LTO_bb1", value: 225, isUnsigned: true)
!609 = !DIEnumerator(name: "LTO_eh_region", value: 226, isUnsigned: true)
!610 = !DIEnumerator(name: "LTO_builtin_decl", value: 227, isUnsigned: true)
!611 = !DIEnumerator(name: "LTO_function", value: 228, isUnsigned: true)
!612 = !DIEnumerator(name: "LTO_eh_table", value: 229, isUnsigned: true)
!613 = !DIEnumerator(name: "LTO_ert_cleanup", value: 230, isUnsigned: true)
!614 = !DIEnumerator(name: "LTO_ert_try", value: 231, isUnsigned: true)
!615 = !DIEnumerator(name: "LTO_ert_allowed_exceptions", value: 232, isUnsigned: true)
!616 = !DIEnumerator(name: "LTO_ert_must_not_throw", value: 233, isUnsigned: true)
!617 = !DIEnumerator(name: "LTO_eh_landing_pad", value: 234, isUnsigned: true)
!618 = !DIEnumerator(name: "LTO_eh_catch", value: 235, isUnsigned: true)
!619 = !DIEnumerator(name: "LTO_tree_pickle_reference", value: 236, isUnsigned: true)
!620 = !DIEnumerator(name: "LTO_var_decl_alias", value: 237, isUnsigned: true)
!621 = !DIEnumerator(name: "LTO_field_decl_ref", value: 238, isUnsigned: true)
!622 = !DIEnumerator(name: "LTO_function_decl_ref", value: 239, isUnsigned: true)
!623 = !DIEnumerator(name: "LTO_label_decl_ref", value: 240, isUnsigned: true)
!624 = !DIEnumerator(name: "LTO_namespace_decl_ref", value: 241, isUnsigned: true)
!625 = !DIEnumerator(name: "LTO_result_decl_ref", value: 242, isUnsigned: true)
!626 = !DIEnumerator(name: "LTO_ssa_name_ref", value: 243, isUnsigned: true)
!627 = !DIEnumerator(name: "LTO_type_decl_ref", value: 244, isUnsigned: true)
!628 = !DIEnumerator(name: "LTO_type_ref", value: 245, isUnsigned: true)
!629 = !DIEnumerator(name: "LTO_const_decl_ref", value: 246, isUnsigned: true)
!630 = !DIEnumerator(name: "LTO_imported_decl_ref", value: 247, isUnsigned: true)
!631 = !DIEnumerator(name: "LTO_global_decl_ref", value: 248, isUnsigned: true)
!632 = !DIEnumerator(name: "LTO_NUM_TAGS", value: 249, isUnsigned: true)
!633 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !149, line: 58, baseType: !7, size: 32, elements: !634)
!634 = !{!635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645}
!635 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!636 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!637 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!638 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!639 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!640 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!641 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!642 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!643 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!644 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!645 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!646 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !149, line: 205, baseType: !7, size: 32, elements: !647)
!647 = !{!648, !649, !650, !651}
!648 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!649 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!650 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!651 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!652 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !149, line: 630, baseType: !7, size: 32, elements: !653)
!653 = !{!654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688}
!654 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!655 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!656 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!657 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!658 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!659 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!660 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!661 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!662 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!663 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!664 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!665 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!666 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!667 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!668 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!669 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!670 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!671 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!672 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!673 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!674 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!675 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!676 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!677 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!678 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!679 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!680 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!681 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!682 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!683 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!684 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!685 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!686 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!687 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!688 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!689 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !690, line: 147, baseType: !7, size: 32, elements: !691)
!690 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!691 = !{!692, !693}
!692 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!693 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!694 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !351, line: 295, baseType: !7, size: 32, elements: !695)
!695 = !{!696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707}
!696 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!697 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!698 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!699 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!700 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!701 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!702 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!703 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!704 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!705 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!706 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!707 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!708 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !709, line: 51, baseType: !7, size: 32, elements: !710)
!709 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!710 = !{!711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746}
!711 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!712 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!713 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!714 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!715 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!716 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!717 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!718 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!719 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!720 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!721 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!722 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!723 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!724 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!725 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!726 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!727 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!728 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!729 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!730 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!731 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!732 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!733 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!734 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!735 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!736 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!737 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!738 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!739 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!740 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!741 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!742 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!743 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!744 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!745 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!746 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!747 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !709, line: 727, baseType: !7, size: 32, elements: !748)
!748 = !{!749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772}
!749 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!750 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!751 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!752 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!753 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!754 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!755 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!756 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!757 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!758 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!759 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!760 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!761 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!762 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!763 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!764 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!765 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!766 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!767 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!768 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!769 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!770 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!771 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!772 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!773 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 272, baseType: !7, size: 32, elements: !774)
!774 = !{!775, !776, !777, !778, !779, !780, !781, !782}
!775 = !DIEnumerator(name: "LTO_DECL_STREAM_TYPE", value: 0, isUnsigned: true)
!776 = !DIEnumerator(name: "LTO_DECL_STREAM_FIELD_DECL", value: 1, isUnsigned: true)
!777 = !DIEnumerator(name: "LTO_DECL_STREAM_FN_DECL", value: 2, isUnsigned: true)
!778 = !DIEnumerator(name: "LTO_DECL_STREAM_VAR_DECL", value: 3, isUnsigned: true)
!779 = !DIEnumerator(name: "LTO_DECL_STREAM_TYPE_DECL", value: 4, isUnsigned: true)
!780 = !DIEnumerator(name: "LTO_DECL_STREAM_NAMESPACE_DECL", value: 5, isUnsigned: true)
!781 = !DIEnumerator(name: "LTO_DECL_STREAM_LABEL_DECL", value: 6, isUnsigned: true)
!782 = !DIEnumerator(name: "LTO_N_DECL_STREAMS", value: 7, isUnsigned: true)
!783 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !149, line: 3410, baseType: !7, size: 32, elements: !784)
!784 = !{!785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916}
!785 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!786 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!787 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!788 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!789 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!790 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!791 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!792 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!793 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!794 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!795 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!796 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!797 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!798 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!799 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!800 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!801 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!802 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!803 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!804 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!805 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!806 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!807 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!808 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!809 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!810 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!811 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!812 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!813 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!814 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!815 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!816 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!817 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!818 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!819 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!820 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!821 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!822 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!823 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!824 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!825 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!826 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!827 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!828 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!829 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!830 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!831 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!832 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!833 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!834 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!835 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!836 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!837 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!838 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!839 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!840 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!841 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!842 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!843 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!844 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!845 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!846 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!847 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!848 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!849 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!850 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!851 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!852 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!853 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!854 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!855 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!856 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!857 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!858 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!859 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!860 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!861 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!862 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!863 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!864 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!865 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!866 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!867 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!868 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!869 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!870 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!871 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!872 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!873 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!874 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!875 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!876 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!877 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!878 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!879 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!880 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!881 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!882 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!883 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!884 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!885 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!886 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!887 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!888 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!889 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!890 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!891 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!892 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!893 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!894 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!895 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!896 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!897 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!898 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!899 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!900 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!901 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!902 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!903 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!904 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!905 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!906 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!907 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!908 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!909 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!910 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!911 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!912 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!913 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!914 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!915 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!916 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!917 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gcc_plugin_symbol_kind", file: !918, line: 24, baseType: !7, size: 32, elements: !919)
!918 = !DIFile(filename: "./include/lto-symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!919 = !{!920, !921, !922, !923, !924}
!920 = !DIEnumerator(name: "GCCPK_DEF", value: 0, isUnsigned: true)
!921 = !DIEnumerator(name: "GCCPK_WEAKDEF", value: 1, isUnsigned: true)
!922 = !DIEnumerator(name: "GCCPK_UNDEF", value: 2, isUnsigned: true)
!923 = !DIEnumerator(name: "GCCPK_WEAKUNDEF", value: 3, isUnsigned: true)
!924 = !DIEnumerator(name: "GCCPK_COMMON", value: 4, isUnsigned: true)
!925 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gcc_plugin_symbol_visibility", file: !918, line: 33, baseType: !7, size: 32, elements: !926)
!926 = !{!927, !928, !929, !930}
!927 = !DIEnumerator(name: "GCCPV_DEFAULT", value: 0, isUnsigned: true)
!928 = !DIEnumerator(name: "GCCPV_PROTECTED", value: 1, isUnsigned: true)
!929 = !DIEnumerator(name: "GCCPV_INTERNAL", value: 2, isUnsigned: true)
!930 = !DIEnumerator(name: "GCCPV_HIDDEN", value: 3, isUnsigned: true)
!931 = !{!932, !2615, !1012, !968, !148, !1214, !2656, !954, !2663, !955, !2664, !962, !604, !7, !1140, !1279, !2665, !974, !1734, !1808, !1834, !1341, !2666, !1375, !1000, !2668}
!932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !933, size: 64)
!933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "output_block", file: !6, line: 625, size: 704, elements: !934)
!934 = !{!935, !936, !2614, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636}
!935 = !DIDerivedType(tag: DW_TAG_member, name: "section_type", scope: !933, file: !6, line: 627, baseType: !5, size: 32)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "decl_state", scope: !933, file: !6, line: 628, baseType: !937, size: 64, offset: 64)
!937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !938, size: 64)
!938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_out_decl_state", file: !6, line: 517, size: 1472, elements: !939)
!939 = !{!940, !2353, !2613}
!940 = !DIDerivedType(tag: DW_TAG_member, name: "streams", scope: !938, file: !6, line: 521, baseType: !941, size: 1344)
!941 = !DICompositeType(tag: DW_TAG_array_type, baseType: !942, size: 1344, elements: !2351)
!942 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_tree_ref_encoder", file: !6, line: 493, size: 192, elements: !943)
!943 = !{!944, !998, !999}
!944 = !DIDerivedType(tag: DW_TAG_member, name: "tree_hash_table", scope: !942, file: !6, line: 495, baseType: !945, size: 64)
!945 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !690, line: 144, baseType: !946)
!946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !947, size: 64)
!947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !690, line: 100, size: 896, elements: !948)
!948 = !{!949, !957, !963, !969, !971, !975, !976, !977, !978, !979, !984, !986, !987, !992, !997}
!949 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !947, file: !690, line: 102, baseType: !950, size: 64)
!950 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !690, line: 52, baseType: !951)
!951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !952, size: 64)
!952 = !DISubroutineType(types: !953)
!953 = !{!954, !955}
!954 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !690, line: 47, baseType: !7)
!955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !956, size: 64)
!956 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !947, file: !690, line: 105, baseType: !958, size: 64, offset: 64)
!958 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !690, line: 59, baseType: !959)
!959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !960, size: 64)
!960 = !DISubroutineType(types: !961)
!961 = !{!962, !955, !955}
!962 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !947, file: !690, line: 108, baseType: !964, size: 64, offset: 128)
!964 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !690, line: 63, baseType: !965)
!965 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !966, size: 64)
!966 = !DISubroutineType(types: !967)
!967 = !{null, !968}
!968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !947, file: !690, line: 111, baseType: !970, size: 64, offset: 192)
!970 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !968, size: 64)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !947, file: !690, line: 114, baseType: !972, size: 64, offset: 256)
!972 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !973, line: 46, baseType: !974)
!973 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!974 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !947, file: !690, line: 117, baseType: !972, size: 64, offset: 320)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !947, file: !690, line: 120, baseType: !972, size: 64, offset: 384)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !947, file: !690, line: 124, baseType: !7, size: 32, offset: 448)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !947, file: !690, line: 128, baseType: !7, size: 32, offset: 480)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !947, file: !690, line: 131, baseType: !980, size: 64, offset: 512)
!980 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !690, line: 75, baseType: !981)
!981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !982, size: 64)
!982 = !DISubroutineType(types: !983)
!983 = !{!968, !972, !972}
!984 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !947, file: !690, line: 132, baseType: !985, size: 64, offset: 576)
!985 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !690, line: 78, baseType: !965)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !947, file: !690, line: 135, baseType: !968, size: 64, offset: 640)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !947, file: !690, line: 136, baseType: !988, size: 64, offset: 704)
!988 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !690, line: 82, baseType: !989)
!989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !990, size: 64)
!990 = !DISubroutineType(types: !991)
!991 = !{!968, !968, !972, !972}
!992 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !947, file: !690, line: 137, baseType: !993, size: 64, offset: 768)
!993 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !690, line: 83, baseType: !994)
!994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !995, size: 64)
!995 = !DISubroutineType(types: !996)
!996 = !{null, !968, !968}
!997 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !947, file: !690, line: 141, baseType: !7, size: 32, offset: 832)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "next_index", scope: !942, file: !6, line: 496, baseType: !7, size: 32, offset: 64)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "trees", scope: !942, file: !6, line: 497, baseType: !1000, size: 64, offset: 128)
!1000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1001, size: 64)
!1001 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !149, line: 184, baseType: !1002)
!1002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !149, line: 184, size: 128, elements: !1003)
!1003 = !{!1004}
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1002, file: !149, line: 184, baseType: !1005, size: 128)
!1005 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !149, line: 182, baseType: !1006)
!1006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !149, line: 182, size: 128, elements: !1007)
!1007 = !{!1008, !1009, !1010}
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1006, file: !149, line: 182, baseType: !7, size: 32)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1006, file: !149, line: 182, baseType: !7, size: 32, offset: 32)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1006, file: !149, line: 182, baseType: !1011, size: 64, offset: 64)
!1011 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1012, size: 64, elements: !1111)
!1012 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1013, line: 56, baseType: !1014)
!1013 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1015, size: 64)
!1015 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !149, line: 3371, size: 1792, elements: !1016)
!1016 = !{!1017, !1050, !1056, !1068, !1087, !1098, !1103, !1113, !1119, !1133, !1145, !1183, !1641, !1669, !1686, !1687, !1692, !1701, !1707, !1712, !1716, !1720, !2002, !2049, !2055, !2061, !2068, !2081, !2095, !2112, !2124, !2146, !2161, !2333}
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1015, file: !149, line: 3372, baseType: !1018, size: 64)
!1018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !149, line: 360, size: 64, elements: !1019)
!1019 = !{!1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049}
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1018, file: !149, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1018, file: !149, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1018, file: !149, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1018, file: !149, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1018, file: !149, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1018, file: !149, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1018, file: !149, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1018, file: !149, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1018, file: !149, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1018, file: !149, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1018, file: !149, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1018, file: !149, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1018, file: !149, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1018, file: !149, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1018, file: !149, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1018, file: !149, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1018, file: !149, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1018, file: !149, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1018, file: !149, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1018, file: !149, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1018, file: !149, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1018, file: !149, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1018, file: !149, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1018, file: !149, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1018, file: !149, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1018, file: !149, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1018, file: !149, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1018, file: !149, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1018, file: !149, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1018, file: !149, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1015, file: !149, line: 3373, baseType: !1051, size: 192)
!1051 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !149, line: 402, size: 192, elements: !1052)
!1052 = !{!1053, !1054, !1055}
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1051, file: !149, line: 403, baseType: !1018, size: 64)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1051, file: !149, line: 404, baseType: !1012, size: 64, offset: 64)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1051, file: !149, line: 405, baseType: !1012, size: 64, offset: 128)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1015, file: !149, line: 3374, baseType: !1057, size: 320)
!1057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !149, line: 1384, size: 320, elements: !1058)
!1058 = !{!1059, !1060}
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1057, file: !149, line: 1385, baseType: !1051, size: 192)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1057, file: !149, line: 1386, baseType: !1061, size: 128, offset: 192)
!1061 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1062, line: 58, baseType: !1063)
!1062 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1063 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1062, line: 54, size: 128, elements: !1064)
!1064 = !{!1065, !1066}
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1063, file: !1062, line: 56, baseType: !974, size: 64)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1063, file: !1062, line: 57, baseType: !1067, size: 64, offset: 64)
!1067 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1015, file: !149, line: 3375, baseType: !1069, size: 256)
!1069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !149, line: 1397, size: 256, elements: !1070)
!1070 = !{!1071, !1072}
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1069, file: !149, line: 1398, baseType: !1051, size: 192)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1069, file: !149, line: 1399, baseType: !1073, size: 64, offset: 192)
!1073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1074, size: 64)
!1074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1075, line: 52, size: 256, elements: !1076)
!1075 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1076 = !{!1077, !1078, !1079, !1080, !1081, !1082, !1083}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1074, file: !1075, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1074, file: !1075, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1074, file: !1075, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1074, file: !1075, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1074, file: !1075, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1074, file: !1075, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1074, file: !1075, line: 62, baseType: !1084, size: 192, offset: 64)
!1084 = !DICompositeType(tag: DW_TAG_array_type, baseType: !974, size: 192, elements: !1085)
!1085 = !{!1086}
!1086 = !DISubrange(count: 3)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1015, file: !149, line: 3376, baseType: !1088, size: 256)
!1088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !149, line: 1408, size: 256, elements: !1089)
!1089 = !{!1090, !1091}
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1088, file: !149, line: 1409, baseType: !1051, size: 192)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1088, file: !149, line: 1410, baseType: !1092, size: 64, offset: 192)
!1092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1093, size: 64)
!1093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1094, line: 27, size: 192, elements: !1095)
!1094 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1095 = !{!1096, !1097}
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1093, file: !1094, line: 29, baseType: !1061, size: 128)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1093, file: !1094, line: 30, baseType: !20, size: 32, offset: 128)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1015, file: !149, line: 3377, baseType: !1099, size: 256)
!1099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !149, line: 1437, size: 256, elements: !1100)
!1100 = !{!1101, !1102}
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1099, file: !149, line: 1438, baseType: !1051, size: 192)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1099, file: !149, line: 1439, baseType: !1012, size: 64, offset: 192)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1015, file: !149, line: 3378, baseType: !1104, size: 256)
!1104 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !149, line: 1418, size: 256, elements: !1105)
!1105 = !{!1106, !1107, !1108}
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1104, file: !149, line: 1419, baseType: !1051, size: 192)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1104, file: !149, line: 1420, baseType: !962, size: 32, offset: 192)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1104, file: !149, line: 1421, baseType: !1109, size: 8, offset: 224)
!1109 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1110, size: 8, elements: !1111)
!1110 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1111 = !{!1112}
!1112 = !DISubrange(count: 1)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1015, file: !149, line: 3379, baseType: !1114, size: 320)
!1114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !149, line: 1428, size: 320, elements: !1115)
!1115 = !{!1116, !1117, !1118}
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1114, file: !149, line: 1429, baseType: !1051, size: 192)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1114, file: !149, line: 1430, baseType: !1012, size: 64, offset: 192)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1114, file: !149, line: 1431, baseType: !1012, size: 64, offset: 256)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1015, file: !149, line: 3380, baseType: !1120, size: 320)
!1120 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !149, line: 1460, size: 320, elements: !1121)
!1121 = !{!1122, !1123}
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1120, file: !149, line: 1461, baseType: !1051, size: 192)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1120, file: !149, line: 1462, baseType: !1124, size: 128, offset: 192)
!1124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1125, line: 31, size: 128, elements: !1126)
!1125 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1126 = !{!1127, !1131, !1132}
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1124, file: !1125, line: 32, baseType: !1128, size: 64)
!1128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1129, size: 64)
!1129 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1130)
!1130 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1124, file: !1125, line: 33, baseType: !7, size: 32, offset: 64)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1124, file: !1125, line: 34, baseType: !7, size: 32, offset: 96)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1015, file: !149, line: 3381, baseType: !1134, size: 384)
!1134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !149, line: 2507, size: 384, elements: !1135)
!1135 = !{!1136, !1137, !1142, !1143, !1144}
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1134, file: !149, line: 2508, baseType: !1051, size: 192)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1134, file: !149, line: 2509, baseType: !1138, size: 32, offset: 192)
!1138 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1139, line: 58, baseType: !1140)
!1139 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1140 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1141, line: 44, baseType: !7)
!1141 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1134, file: !149, line: 2510, baseType: !7, size: 32, offset: 224)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1134, file: !149, line: 2511, baseType: !1012, size: 64, offset: 256)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1134, file: !149, line: 2512, baseType: !1012, size: 64, offset: 320)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1015, file: !149, line: 3382, baseType: !1146, size: 896)
!1146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !149, line: 2652, size: 896, elements: !1147)
!1147 = !{!1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180}
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1146, file: !149, line: 2653, baseType: !1134, size: 384)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1146, file: !149, line: 2654, baseType: !1012, size: 64, offset: 384)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1146, file: !149, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1146, file: !149, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1146, file: !149, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1146, file: !149, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1146, file: !149, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1146, file: !149, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1146, file: !149, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1146, file: !149, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1146, file: !149, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1146, file: !149, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1146, file: !149, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1146, file: !149, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1146, file: !149, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1146, file: !149, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1146, file: !149, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1146, file: !149, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1146, file: !149, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1146, file: !149, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1146, file: !149, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1146, file: !149, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1146, file: !149, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1146, file: !149, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1146, file: !149, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1146, file: !149, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1146, file: !149, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1146, file: !149, line: 2703, baseType: !7, size: 32, offset: 512)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1146, file: !149, line: 2705, baseType: !1012, size: 64, offset: 576)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1146, file: !149, line: 2706, baseType: !1012, size: 64, offset: 640)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1146, file: !149, line: 2707, baseType: !1012, size: 64, offset: 704)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1146, file: !149, line: 2708, baseType: !1012, size: 64, offset: 768)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1146, file: !149, line: 2711, baseType: !1181, size: 64, offset: 832)
!1181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1182, size: 64)
!1182 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !149, line: 2711, flags: DIFlagFwdDecl)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1015, file: !149, line: 3383, baseType: !1184, size: 960)
!1184 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !149, line: 2756, size: 960, elements: !1185)
!1185 = !{!1186, !1187}
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1184, file: !149, line: 2757, baseType: !1146, size: 896)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1184, file: !149, line: 2758, baseType: !1188, size: 64, offset: 896)
!1188 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1013, line: 50, baseType: !1189)
!1189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1190, size: 64)
!1190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1191, line: 240, size: 384, elements: !1192)
!1191 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1192 = !{!1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203}
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1190, file: !1191, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1190, file: !1191, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1190, file: !1191, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1190, file: !1191, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1190, file: !1191, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1190, file: !1191, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1190, file: !1191, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1190, file: !1191, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1190, file: !1191, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1190, file: !1191, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1190, file: !1191, line: 321, baseType: !1204, size: 320, offset: 64)
!1204 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1191, line: 315, size: 320, elements: !1205)
!1205 = !{!1206, !1608, !1610, !1639, !1640}
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1204, file: !1191, line: 316, baseType: !1207, size: 64)
!1207 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1208, size: 64, elements: !1111)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1191, line: 183, baseType: !1209)
!1209 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1191, line: 166, size: 64, elements: !1210)
!1210 = !{!1211, !1212, !1213, !1216, !1217, !1225, !1226, !1238, !1241, !1302, !1303, !1585, !1598, !1605}
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1209, file: !1191, line: 168, baseType: !962, size: 32)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1209, file: !1191, line: 169, baseType: !7, size: 32)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1209, file: !1191, line: 170, baseType: !1214, size: 64)
!1214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1215, size: 64)
!1215 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1110)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1209, file: !1191, line: 171, baseType: !1188, size: 64)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1209, file: !1191, line: 172, baseType: !1218, size: 64)
!1218 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1013, line: 53, baseType: !1219)
!1219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1220, size: 64)
!1220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1191, line: 359, size: 128, elements: !1221)
!1221 = !{!1222, !1223}
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1220, file: !1191, line: 360, baseType: !962, size: 32)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1220, file: !1191, line: 361, baseType: !1224, size: 64, offset: 64)
!1224 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1188, size: 64, elements: !1111)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1209, file: !1191, line: 173, baseType: !20, size: 32)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1209, file: !1191, line: 174, baseType: !1227, size: 32)
!1227 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1191, line: 133, baseType: !1228)
!1228 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1191, line: 115, size: 32, elements: !1229)
!1229 = !{!1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237}
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1228, file: !1191, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1228, file: !1191, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1228, file: !1191, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1228, file: !1191, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1228, file: !1191, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1228, file: !1191, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1228, file: !1191, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1228, file: !1191, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1209, file: !1191, line: 175, baseType: !1239, size: 64)
!1239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1240, size: 64)
!1240 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1191, line: 175, flags: DIFlagFwdDecl)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1209, file: !1191, line: 176, baseType: !1242, size: 64)
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1244, line: 75, size: 256, elements: !1245)
!1244 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1245 = !{!1246, !1260, !1261, !1262}
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1243, file: !1244, line: 76, baseType: !1247, size: 64)
!1247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1248, size: 64)
!1248 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1244, line: 68, baseType: !1249)
!1249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1244, line: 63, size: 320, elements: !1250)
!1250 = !{!1251, !1253, !1254, !1255}
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1249, file: !1244, line: 64, baseType: !1252, size: 64)
!1252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1249, size: 64)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1249, file: !1244, line: 65, baseType: !1252, size: 64, offset: 64)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1249, file: !1244, line: 66, baseType: !7, size: 32, offset: 128)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1249, file: !1244, line: 67, baseType: !1256, size: 128, offset: 192)
!1256 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1257, size: 128, elements: !1258)
!1257 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1244, line: 29, baseType: !974)
!1258 = !{!1259}
!1259 = !DISubrange(count: 2)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1243, file: !1244, line: 77, baseType: !1247, size: 64, offset: 64)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1243, file: !1244, line: 78, baseType: !7, size: 32, offset: 128)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1243, file: !1244, line: 79, baseType: !1263, size: 64, offset: 192)
!1263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1264, size: 64)
!1264 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1244, line: 49, baseType: !1265)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1244, line: 45, size: 832, elements: !1266)
!1266 = !{!1267, !1268, !1269}
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1265, file: !1244, line: 46, baseType: !1252, size: 64)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1265, file: !1244, line: 47, baseType: !1242, size: 64, offset: 64)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1265, file: !1244, line: 48, baseType: !1270, size: 704, offset: 128)
!1270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1271, line: 164, size: 704, elements: !1272)
!1271 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1272 = !{!1273, !1274, !1285, !1286, !1287, !1288, !1289, !1290, !1294, !1298, !1299, !1300, !1301}
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1270, file: !1271, line: 166, baseType: !1067, size: 64)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1270, file: !1271, line: 167, baseType: !1275, size: 64, offset: 64)
!1275 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1276, size: 64)
!1276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1271, line: 157, size: 192, elements: !1277)
!1277 = !{!1278, !1280, !1281}
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1276, file: !1271, line: 159, baseType: !1279, size: 64)
!1279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1110, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1276, file: !1271, line: 160, baseType: !1275, size: 64, offset: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1276, file: !1271, line: 161, baseType: !1282, size: 32, offset: 128)
!1282 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1110, size: 32, elements: !1283)
!1283 = !{!1284}
!1284 = !DISubrange(count: 4)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1270, file: !1271, line: 168, baseType: !1279, size: 64, offset: 128)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1270, file: !1271, line: 169, baseType: !1279, size: 64, offset: 192)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1270, file: !1271, line: 170, baseType: !1279, size: 64, offset: 256)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1270, file: !1271, line: 171, baseType: !1067, size: 64, offset: 320)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1270, file: !1271, line: 172, baseType: !962, size: 32, offset: 384)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1270, file: !1271, line: 176, baseType: !1291, size: 64, offset: 448)
!1291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1292, size: 64)
!1292 = !DISubroutineType(types: !1293)
!1293 = !{!1275, !968, !1067}
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1270, file: !1271, line: 177, baseType: !1295, size: 64, offset: 512)
!1295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1296, size: 64)
!1296 = !DISubroutineType(types: !1297)
!1297 = !{null, !968, !1275}
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1270, file: !1271, line: 178, baseType: !968, size: 64, offset: 576)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1270, file: !1271, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1270, file: !1271, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1270, file: !1271, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1209, file: !1191, line: 177, baseType: !1012, size: 64)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1209, file: !1191, line: 178, baseType: !1304, size: 64)
!1304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1305, size: 64)
!1305 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !351, line: 217, size: 832, elements: !1306)
!1306 = !{!1307, !1550, !1551, !1552, !1555, !1559, !1560, !1561, !1579, !1580, !1581, !1582, !1583, !1584}
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1305, file: !351, line: 219, baseType: !1308, size: 64)
!1308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1309, size: 64)
!1309 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !351, line: 151, baseType: !1310)
!1310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !351, line: 151, size: 128, elements: !1311)
!1311 = !{!1312}
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1310, file: !351, line: 151, baseType: !1313, size: 128)
!1313 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !351, line: 150, baseType: !1314)
!1314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !351, line: 150, size: 128, elements: !1315)
!1315 = !{!1316, !1317, !1318}
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1314, file: !351, line: 150, baseType: !7, size: 32)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1314, file: !351, line: 150, baseType: !7, size: 32, offset: 32)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1314, file: !351, line: 150, baseType: !1319, size: 64, offset: 64)
!1319 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1320, size: 64, elements: !1111)
!1320 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1013, line: 108, baseType: !1321)
!1321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1322, size: 64)
!1322 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !351, line: 122, size: 512, elements: !1323)
!1323 = !{!1324, !1325, !1326, !1542, !1543, !1544, !1545, !1546, !1547, !1548}
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1322, file: !351, line: 124, baseType: !1304, size: 64)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1322, file: !351, line: 125, baseType: !1304, size: 64, offset: 64)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1322, file: !351, line: 131, baseType: !1327, size: 64, offset: 128)
!1327 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !351, line: 128, size: 64, elements: !1328)
!1328 = !{!1329, !1541}
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1327, file: !351, line: 129, baseType: !1330, size: 64)
!1330 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1013, line: 66, baseType: !1331)
!1331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1332, size: 64)
!1332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !709, line: 143, size: 192, elements: !1333)
!1333 = !{!1334, !1539, !1540}
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1332, file: !709, line: 145, baseType: !1335, size: 64)
!1335 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1013, line: 69, baseType: !1336)
!1336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1337, size: 64)
!1337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !709, line: 136, size: 192, elements: !1338)
!1338 = !{!1339, !1537, !1538}
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1337, file: !709, line: 137, baseType: !1340, size: 64)
!1340 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1013, line: 58, baseType: !1341)
!1341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1342, size: 64)
!1342 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !709, line: 737, size: 768, elements: !1343)
!1343 = !{!1344, !1361, !1394, !1400, !1405, !1410, !1417, !1423, !1429, !1434, !1448, !1453, !1459, !1464, !1474, !1479, !1495, !1502, !1509, !1515, !1520, !1526, !1532}
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1342, file: !709, line: 738, baseType: !1345, size: 256)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !709, line: 271, size: 256, elements: !1346)
!1346 = !{!1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1345, file: !709, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1345, file: !709, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1345, file: !709, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1345, file: !709, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1345, file: !709, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1345, file: !709, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1345, file: !709, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1345, file: !709, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1345, file: !709, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1345, file: !709, line: 312, baseType: !7, size: 32, offset: 32)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1345, file: !709, line: 316, baseType: !1138, size: 32, offset: 64)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1345, file: !709, line: 319, baseType: !7, size: 32, offset: 96)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1345, file: !709, line: 323, baseType: !1304, size: 64, offset: 128)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1345, file: !709, line: 327, baseType: !1012, size: 64, offset: 192)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1342, file: !709, line: 739, baseType: !1362, size: 448)
!1362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !709, line: 350, size: 448, elements: !1363)
!1363 = !{!1364, !1393}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1362, file: !709, line: 353, baseType: !1365, size: 384)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !709, line: 333, size: 384, elements: !1366)
!1366 = !{!1367, !1368, !1376}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1365, file: !709, line: 336, baseType: !1345, size: 256)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1365, file: !709, line: 343, baseType: !1369, size: 64, offset: 256)
!1369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1370, size: 64)
!1370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1371, line: 37, size: 128, elements: !1372)
!1371 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1372 = !{!1373, !1374}
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1370, file: !1371, line: 39, baseType: !1369, size: 64)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1370, file: !1371, line: 40, baseType: !1375, size: 64, offset: 64)
!1375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1012, size: 64)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1365, file: !709, line: 344, baseType: !1377, size: 64, offset: 320)
!1377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1378, size: 64)
!1378 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1371, line: 45, size: 320, elements: !1379)
!1379 = !{!1380, !1381}
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1378, file: !1371, line: 47, baseType: !1377, size: 64)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1378, file: !1371, line: 48, baseType: !1382, size: 256, offset: 64)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !149, line: 1883, size: 256, elements: !1383)
!1383 = !{!1384, !1386, !1387, !1392}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1382, file: !149, line: 1884, baseType: !1385, size: 64)
!1385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1382, size: 64)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1382, file: !149, line: 1885, baseType: !1385, size: 64, offset: 64)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1382, file: !149, line: 1891, baseType: !1388, size: 64, offset: 128)
!1388 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1382, file: !149, line: 1891, size: 64, elements: !1389)
!1389 = !{!1390, !1391}
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1388, file: !149, line: 1891, baseType: !1340, size: 64)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1388, file: !149, line: 1891, baseType: !1012, size: 64)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1382, file: !149, line: 1892, baseType: !1375, size: 64, offset: 192)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1362, file: !709, line: 359, baseType: !1011, size: 64, offset: 384)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1342, file: !709, line: 740, baseType: !1395, size: 512)
!1395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !709, line: 365, size: 512, elements: !1396)
!1396 = !{!1397, !1398, !1399}
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1395, file: !709, line: 368, baseType: !1365, size: 384)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1395, file: !709, line: 373, baseType: !1012, size: 64, offset: 384)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1395, file: !709, line: 374, baseType: !1012, size: 64, offset: 448)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1342, file: !709, line: 741, baseType: !1401, size: 576)
!1401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !709, line: 380, size: 576, elements: !1402)
!1402 = !{!1403, !1404}
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1401, file: !709, line: 383, baseType: !1395, size: 512)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1401, file: !709, line: 389, baseType: !1011, size: 64, offset: 512)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1342, file: !709, line: 742, baseType: !1406, size: 320)
!1406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !709, line: 395, size: 320, elements: !1407)
!1407 = !{!1408, !1409}
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1406, file: !709, line: 397, baseType: !1345, size: 256)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1406, file: !709, line: 400, baseType: !1330, size: 64, offset: 256)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1342, file: !709, line: 743, baseType: !1411, size: 448)
!1411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !709, line: 406, size: 448, elements: !1412)
!1412 = !{!1413, !1414, !1415, !1416}
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1411, file: !709, line: 408, baseType: !1345, size: 256)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1411, file: !709, line: 412, baseType: !1012, size: 64, offset: 256)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1411, file: !709, line: 420, baseType: !1012, size: 64, offset: 320)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1411, file: !709, line: 423, baseType: !1330, size: 64, offset: 384)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1342, file: !709, line: 744, baseType: !1418, size: 384)
!1418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !709, line: 429, size: 384, elements: !1419)
!1419 = !{!1420, !1421, !1422}
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1418, file: !709, line: 431, baseType: !1345, size: 256)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1418, file: !709, line: 434, baseType: !1012, size: 64, offset: 256)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1418, file: !709, line: 437, baseType: !1330, size: 64, offset: 320)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1342, file: !709, line: 745, baseType: !1424, size: 384)
!1424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !709, line: 443, size: 384, elements: !1425)
!1425 = !{!1426, !1427, !1428}
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1424, file: !709, line: 445, baseType: !1345, size: 256)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1424, file: !709, line: 449, baseType: !1012, size: 64, offset: 256)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1424, file: !709, line: 453, baseType: !1330, size: 64, offset: 320)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1342, file: !709, line: 746, baseType: !1430, size: 320)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !709, line: 459, size: 320, elements: !1431)
!1431 = !{!1432, !1433}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1430, file: !709, line: 461, baseType: !1345, size: 256)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1430, file: !709, line: 464, baseType: !1012, size: 64, offset: 256)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1342, file: !709, line: 747, baseType: !1435, size: 768)
!1435 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !709, line: 469, size: 768, elements: !1436)
!1436 = !{!1437, !1438, !1439, !1440, !1441}
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1435, file: !709, line: 471, baseType: !1345, size: 256)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1435, file: !709, line: 474, baseType: !7, size: 32, offset: 256)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1435, file: !709, line: 475, baseType: !7, size: 32, offset: 288)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1435, file: !709, line: 478, baseType: !1012, size: 64, offset: 320)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1435, file: !709, line: 481, baseType: !1442, size: 384, offset: 384)
!1442 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1443, size: 384, elements: !1111)
!1443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !149, line: 1917, size: 384, elements: !1444)
!1444 = !{!1445, !1446, !1447}
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1443, file: !149, line: 1920, baseType: !1382, size: 256)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1443, file: !149, line: 1921, baseType: !1012, size: 64, offset: 256)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1443, file: !149, line: 1922, baseType: !1138, size: 32, offset: 320)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1342, file: !709, line: 748, baseType: !1449, size: 320)
!1449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !709, line: 487, size: 320, elements: !1450)
!1450 = !{!1451, !1452}
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1449, file: !709, line: 490, baseType: !1345, size: 256)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1449, file: !709, line: 494, baseType: !962, size: 32, offset: 256)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1342, file: !709, line: 749, baseType: !1454, size: 384)
!1454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !709, line: 500, size: 384, elements: !1455)
!1455 = !{!1456, !1457, !1458}
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1454, file: !709, line: 502, baseType: !1345, size: 256)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1454, file: !709, line: 506, baseType: !1330, size: 64, offset: 256)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1454, file: !709, line: 510, baseType: !1330, size: 64, offset: 320)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1342, file: !709, line: 750, baseType: !1460, size: 320)
!1460 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !709, line: 529, size: 320, elements: !1461)
!1461 = !{!1462, !1463}
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1460, file: !709, line: 531, baseType: !1345, size: 256)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1460, file: !709, line: 540, baseType: !1330, size: 64, offset: 256)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1342, file: !709, line: 751, baseType: !1465, size: 704)
!1465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !709, line: 546, size: 704, elements: !1466)
!1466 = !{!1467, !1468, !1469, !1470, !1471, !1472, !1473}
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1465, file: !709, line: 549, baseType: !1395, size: 512)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1465, file: !709, line: 553, baseType: !1214, size: 64, offset: 512)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1465, file: !709, line: 557, baseType: !1130, size: 8, offset: 576)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1465, file: !709, line: 558, baseType: !1130, size: 8, offset: 584)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1465, file: !709, line: 559, baseType: !1130, size: 8, offset: 592)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1465, file: !709, line: 560, baseType: !1130, size: 8, offset: 600)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1465, file: !709, line: 566, baseType: !1011, size: 64, offset: 640)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1342, file: !709, line: 752, baseType: !1475, size: 384)
!1475 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !709, line: 571, size: 384, elements: !1476)
!1476 = !{!1477, !1478}
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1475, file: !709, line: 573, baseType: !1406, size: 320)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1475, file: !709, line: 577, baseType: !1012, size: 64, offset: 320)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1342, file: !709, line: 753, baseType: !1480, size: 576)
!1480 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !709, line: 600, size: 576, elements: !1481)
!1481 = !{!1482, !1483, !1484, !1485, !1494}
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1480, file: !709, line: 602, baseType: !1406, size: 320)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1480, file: !709, line: 605, baseType: !1012, size: 64, offset: 320)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1480, file: !709, line: 609, baseType: !972, size: 64, offset: 384)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1480, file: !709, line: 612, baseType: !1486, size: 64, offset: 448)
!1486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1487, size: 64)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !709, line: 581, size: 320, elements: !1488)
!1488 = !{!1489, !1490, !1491, !1492, !1493}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1487, file: !709, line: 583, baseType: !148, size: 32)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1487, file: !709, line: 586, baseType: !1012, size: 64, offset: 64)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1487, file: !709, line: 589, baseType: !1012, size: 64, offset: 128)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1487, file: !709, line: 592, baseType: !1012, size: 64, offset: 192)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1487, file: !709, line: 595, baseType: !1012, size: 64, offset: 256)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1480, file: !709, line: 616, baseType: !1330, size: 64, offset: 512)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1342, file: !709, line: 754, baseType: !1496, size: 512)
!1496 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !709, line: 622, size: 512, elements: !1497)
!1497 = !{!1498, !1499, !1500, !1501}
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1496, file: !709, line: 624, baseType: !1406, size: 320)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1496, file: !709, line: 628, baseType: !1012, size: 64, offset: 320)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1496, file: !709, line: 632, baseType: !1012, size: 64, offset: 384)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1496, file: !709, line: 636, baseType: !1012, size: 64, offset: 448)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1342, file: !709, line: 755, baseType: !1503, size: 704)
!1503 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !709, line: 642, size: 704, elements: !1504)
!1504 = !{!1505, !1506, !1507, !1508}
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1503, file: !709, line: 644, baseType: !1496, size: 512)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1503, file: !709, line: 648, baseType: !1012, size: 64, offset: 512)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1503, file: !709, line: 652, baseType: !1012, size: 64, offset: 576)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1503, file: !709, line: 653, baseType: !1012, size: 64, offset: 640)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1342, file: !709, line: 756, baseType: !1510, size: 448)
!1510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !709, line: 663, size: 448, elements: !1511)
!1511 = !{!1512, !1513, !1514}
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1510, file: !709, line: 665, baseType: !1406, size: 320)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1510, file: !709, line: 668, baseType: !1012, size: 64, offset: 320)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1510, file: !709, line: 673, baseType: !1012, size: 64, offset: 384)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1342, file: !709, line: 757, baseType: !1516, size: 384)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !709, line: 694, size: 384, elements: !1517)
!1517 = !{!1518, !1519}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1516, file: !709, line: 696, baseType: !1406, size: 320)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1516, file: !709, line: 699, baseType: !1012, size: 64, offset: 320)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1342, file: !709, line: 758, baseType: !1521, size: 384)
!1521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !709, line: 681, size: 384, elements: !1522)
!1522 = !{!1523, !1524, !1525}
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1521, file: !709, line: 683, baseType: !1345, size: 256)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1521, file: !709, line: 686, baseType: !1012, size: 64, offset: 256)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1521, file: !709, line: 689, baseType: !1012, size: 64, offset: 320)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1342, file: !709, line: 759, baseType: !1527, size: 384)
!1527 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !709, line: 707, size: 384, elements: !1528)
!1528 = !{!1529, !1530, !1531}
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1527, file: !709, line: 709, baseType: !1345, size: 256)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1527, file: !709, line: 712, baseType: !1012, size: 64, offset: 256)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1527, file: !709, line: 712, baseType: !1012, size: 64, offset: 320)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1342, file: !709, line: 760, baseType: !1533, size: 320)
!1533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !709, line: 718, size: 320, elements: !1534)
!1534 = !{!1535, !1536}
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1533, file: !709, line: 720, baseType: !1345, size: 256)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1533, file: !709, line: 723, baseType: !1012, size: 64, offset: 256)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1337, file: !709, line: 138, baseType: !1336, size: 64, offset: 64)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1337, file: !709, line: 139, baseType: !1336, size: 64, offset: 128)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1332, file: !709, line: 146, baseType: !1335, size: 64, offset: 64)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1332, file: !709, line: 152, baseType: !1330, size: 64, offset: 128)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1327, file: !351, line: 130, baseType: !1188, size: 64)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1322, file: !351, line: 134, baseType: !968, size: 64, offset: 192)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1322, file: !351, line: 137, baseType: !1012, size: 64, offset: 256)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1322, file: !351, line: 138, baseType: !1138, size: 32, offset: 320)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1322, file: !351, line: 142, baseType: !7, size: 32, offset: 352)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1322, file: !351, line: 144, baseType: !962, size: 32, offset: 384)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1322, file: !351, line: 145, baseType: !962, size: 32, offset: 416)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1322, file: !351, line: 146, baseType: !1549, size: 64, offset: 448)
!1549 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !351, line: 119, baseType: !1067)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1305, file: !351, line: 220, baseType: !1308, size: 64, offset: 64)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1305, file: !351, line: 223, baseType: !968, size: 64, offset: 128)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1305, file: !351, line: 226, baseType: !1553, size: 64, offset: 192)
!1553 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1554, size: 64)
!1554 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !351, line: 185, flags: DIFlagFwdDecl)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1305, file: !351, line: 229, baseType: !1556, size: 128, offset: 256)
!1556 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1557, size: 128, elements: !1258)
!1557 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1558, size: 64)
!1558 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !351, line: 229, flags: DIFlagFwdDecl)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1305, file: !351, line: 232, baseType: !1304, size: 64, offset: 384)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1305, file: !351, line: 233, baseType: !1304, size: 64, offset: 448)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1305, file: !351, line: 238, baseType: !1562, size: 64, offset: 512)
!1562 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !351, line: 235, size: 64, elements: !1563)
!1563 = !{!1564, !1570}
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1562, file: !351, line: 236, baseType: !1565, size: 64)
!1565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1566, size: 64)
!1566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !351, line: 273, size: 128, elements: !1567)
!1567 = !{!1568, !1569}
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1566, file: !351, line: 275, baseType: !1330, size: 64)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1566, file: !351, line: 278, baseType: !1330, size: 64, offset: 64)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1562, file: !351, line: 237, baseType: !1571, size: 64)
!1571 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1572, size: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !351, line: 259, size: 320, elements: !1573)
!1573 = !{!1574, !1575, !1576, !1577, !1578}
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1572, file: !351, line: 261, baseType: !1188, size: 64)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1572, file: !351, line: 262, baseType: !1188, size: 64, offset: 64)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1572, file: !351, line: 266, baseType: !1188, size: 64, offset: 128)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1572, file: !351, line: 267, baseType: !1188, size: 64, offset: 192)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1572, file: !351, line: 270, baseType: !962, size: 32, offset: 256)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1305, file: !351, line: 241, baseType: !1549, size: 64, offset: 576)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1305, file: !351, line: 244, baseType: !962, size: 32, offset: 640)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1305, file: !351, line: 247, baseType: !962, size: 32, offset: 672)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1305, file: !351, line: 250, baseType: !962, size: 32, offset: 704)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1305, file: !351, line: 253, baseType: !962, size: 32, offset: 736)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1305, file: !351, line: 256, baseType: !962, size: 32, offset: 768)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1209, file: !1191, line: 179, baseType: !1586, size: 64)
!1586 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1587, size: 64)
!1587 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1191, line: 150, baseType: !1588)
!1588 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1191, line: 142, size: 320, elements: !1589)
!1589 = !{!1590, !1591, !1592, !1593, !1596, !1597}
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1588, file: !1191, line: 144, baseType: !1012, size: 64)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1588, file: !1191, line: 145, baseType: !1188, size: 64, offset: 64)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1588, file: !1191, line: 146, baseType: !1188, size: 64, offset: 128)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1588, file: !1191, line: 147, baseType: !1594, size: 32, offset: 192)
!1594 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1595, line: 31, baseType: !962)
!1595 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1588, file: !1191, line: 148, baseType: !7, size: 32, offset: 224)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1588, file: !1191, line: 149, baseType: !1130, size: 8, offset: 256)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1209, file: !1191, line: 180, baseType: !1599, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1600, size: 64)
!1600 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1191, line: 162, baseType: !1601)
!1601 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1191, line: 159, size: 128, elements: !1602)
!1602 = !{!1603, !1604}
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1601, file: !1191, line: 160, baseType: !1012, size: 64)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1601, file: !1191, line: 161, baseType: !1067, size: 64, offset: 64)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1209, file: !1191, line: 181, baseType: !1606, size: 64)
!1606 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1607, size: 64)
!1607 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1191, line: 181, flags: DIFlagFwdDecl)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1204, file: !1191, line: 317, baseType: !1609, size: 64)
!1609 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1067, size: 64, elements: !1111)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1204, file: !1191, line: 318, baseType: !1611, size: 320)
!1611 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1191, line: 188, size: 320, elements: !1612)
!1612 = !{!1613, !1615, !1638}
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1611, file: !1191, line: 190, baseType: !1614, size: 192)
!1614 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1208, size: 192, elements: !1085)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1611, file: !1191, line: 193, baseType: !1616, size: 64, offset: 192)
!1616 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1617, size: 64)
!1617 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1191, line: 206, size: 320, elements: !1618)
!1618 = !{!1619, !1623, !1624, !1625, !1637}
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1617, file: !1191, line: 208, baseType: !1620, size: 64)
!1620 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1621, size: 64)
!1621 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1013, line: 62, baseType: !1622)
!1622 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1013, line: 61, flags: DIFlagFwdDecl)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1617, file: !1191, line: 211, baseType: !7, size: 32, offset: 64)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1617, file: !1191, line: 214, baseType: !1067, size: 64, offset: 128)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1617, file: !1191, line: 224, baseType: !1626, size: 64, offset: 192)
!1626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1627, size: 64)
!1627 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1191, line: 202, baseType: !1628)
!1628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1191, line: 202, size: 128, elements: !1629)
!1629 = !{!1630}
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1628, file: !1191, line: 202, baseType: !1631, size: 128)
!1631 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1191, line: 200, baseType: !1632)
!1632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1191, line: 200, size: 128, elements: !1633)
!1633 = !{!1634, !1635, !1636}
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1632, file: !1191, line: 200, baseType: !7, size: 32)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1632, file: !1191, line: 200, baseType: !7, size: 32, offset: 32)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1632, file: !1191, line: 200, baseType: !1224, size: 64, offset: 64)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1617, file: !1191, line: 234, baseType: !1626, size: 64, offset: 256)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1611, file: !1191, line: 197, baseType: !1067, size: 64, offset: 256)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1204, file: !1191, line: 319, baseType: !1074, size: 256)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1204, file: !1191, line: 320, baseType: !1093, size: 192)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1015, file: !149, line: 3384, baseType: !1642, size: 1472)
!1642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !149, line: 3114, size: 1472, elements: !1643)
!1643 = !{!1644, !1665, !1666, !1667, !1668}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1642, file: !149, line: 3115, baseType: !1645, size: 1216)
!1645 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !149, line: 2984, size: 1216, elements: !1646)
!1646 = !{!1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664}
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1645, file: !149, line: 2985, baseType: !1184, size: 960)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1645, file: !149, line: 2986, baseType: !1012, size: 64, offset: 960)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1645, file: !149, line: 2987, baseType: !1012, size: 64, offset: 1024)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1645, file: !149, line: 2988, baseType: !1012, size: 64, offset: 1088)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1645, file: !149, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1645, file: !149, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1645, file: !149, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1645, file: !149, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1645, file: !149, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1645, file: !149, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1645, file: !149, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1645, file: !149, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1645, file: !149, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1645, file: !149, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1645, file: !149, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1645, file: !149, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1645, file: !149, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1645, file: !149, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1642, file: !149, line: 3117, baseType: !1012, size: 64, offset: 1216)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1642, file: !149, line: 3119, baseType: !1012, size: 64, offset: 1280)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1642, file: !149, line: 3121, baseType: !1012, size: 64, offset: 1344)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1642, file: !149, line: 3123, baseType: !1012, size: 64, offset: 1408)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1015, file: !149, line: 3385, baseType: !1670, size: 1088)
!1670 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !149, line: 2874, size: 1088, elements: !1671)
!1671 = !{!1672, !1673, !1674}
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1670, file: !149, line: 2875, baseType: !1184, size: 960)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1670, file: !149, line: 2876, baseType: !1188, size: 64, offset: 960)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1670, file: !149, line: 2877, baseType: !1675, size: 64, offset: 1024)
!1675 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1676, size: 64)
!1676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1677, line: 172, size: 128, elements: !1678)
!1677 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1678 = !{!1679, !1680, !1681, !1682, !1683, !1684, !1685}
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1676, file: !1677, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1676, file: !1677, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1676, file: !1677, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1676, file: !1677, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1676, file: !1677, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1676, file: !1677, line: 195, baseType: !7, size: 32, offset: 32)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1676, file: !1677, line: 199, baseType: !1012, size: 64, offset: 64)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1015, file: !149, line: 3386, baseType: !1645, size: 1216)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1015, file: !149, line: 3387, baseType: !1688, size: 1280)
!1688 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !149, line: 3093, size: 1280, elements: !1689)
!1689 = !{!1690, !1691}
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1688, file: !149, line: 3094, baseType: !1645, size: 1216)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1688, file: !149, line: 3095, baseType: !1675, size: 64, offset: 1216)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1015, file: !149, line: 3388, baseType: !1693, size: 1216)
!1693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !149, line: 2824, size: 1216, elements: !1694)
!1694 = !{!1695, !1696, !1697, !1698, !1699, !1700}
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1693, file: !149, line: 2825, baseType: !1146, size: 896)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1693, file: !149, line: 2827, baseType: !1012, size: 64, offset: 896)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1693, file: !149, line: 2828, baseType: !1012, size: 64, offset: 960)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1693, file: !149, line: 2829, baseType: !1012, size: 64, offset: 1024)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1693, file: !149, line: 2830, baseType: !1012, size: 64, offset: 1088)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1693, file: !149, line: 2831, baseType: !1012, size: 64, offset: 1152)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1015, file: !149, line: 3389, baseType: !1702, size: 1024)
!1702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !149, line: 2850, size: 1024, elements: !1703)
!1703 = !{!1704, !1705, !1706}
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1702, file: !149, line: 2851, baseType: !1184, size: 960)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1702, file: !149, line: 2852, baseType: !962, size: 32, offset: 960)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1702, file: !149, line: 2853, baseType: !962, size: 32, offset: 992)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1015, file: !149, line: 3390, baseType: !1708, size: 1024)
!1708 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !149, line: 2857, size: 1024, elements: !1709)
!1709 = !{!1710, !1711}
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1708, file: !149, line: 2858, baseType: !1184, size: 960)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1708, file: !149, line: 2859, baseType: !1675, size: 64, offset: 960)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1015, file: !149, line: 3391, baseType: !1713, size: 960)
!1713 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !149, line: 2862, size: 960, elements: !1714)
!1714 = !{!1715}
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1713, file: !149, line: 2863, baseType: !1184, size: 960)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1015, file: !149, line: 3392, baseType: !1717, size: 1472)
!1717 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !149, line: 3304, size: 1472, elements: !1718)
!1718 = !{!1719}
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1717, file: !149, line: 3305, baseType: !1642, size: 1472)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1015, file: !149, line: 3393, baseType: !1721, size: 1792)
!1721 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !149, line: 3248, size: 1792, elements: !1722)
!1722 = !{!1723, !1724, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001}
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1721, file: !149, line: 3249, baseType: !1642, size: 1472)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1721, file: !149, line: 3251, baseType: !1725, size: 64, offset: 1472)
!1725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1726, size: 64)
!1726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1727, line: 463, size: 1152, elements: !1728)
!1727 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1728 = !{!1729, !1835, !1866, !1867, !1922, !1925, !1926, !1927, !1928, !1929, !1930, !1954, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980}
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1726, file: !1727, line: 464, baseType: !1730, size: 64)
!1730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1731, size: 64)
!1731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !344, line: 194, size: 384, elements: !1732)
!1732 = !{!1733, !1782, !1795, !1809, !1810, !1816}
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1731, file: !344, line: 197, baseType: !1734, size: 64)
!1734 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !344, line: 182, baseType: !1735)
!1735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1736, size: 64)
!1736 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !344, line: 116, size: 704, elements: !1737)
!1737 = !{!1738, !1739, !1740, !1741, !1742, !1743, !1770, !1779, !1780, !1781}
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1736, file: !344, line: 119, baseType: !1735, size: 64)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1736, file: !344, line: 122, baseType: !1735, size: 64, offset: 64)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1736, file: !344, line: 123, baseType: !1735, size: 64, offset: 128)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1736, file: !344, line: 126, baseType: !962, size: 32, offset: 192)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1736, file: !344, line: 129, baseType: !343, size: 32, offset: 224)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1736, file: !344, line: 165, baseType: !1744, size: 192, offset: 256)
!1744 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !344, line: 132, size: 192, elements: !1745)
!1745 = !{!1746, !1759, !1765}
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1744, file: !344, line: 137, baseType: !1747, size: 128)
!1747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !344, line: 133, size: 128, elements: !1748)
!1748 = !{!1749, !1758}
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1747, file: !344, line: 135, baseType: !1750, size: 64)
!1750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1751, size: 64)
!1751 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !344, line: 93, size: 320, elements: !1752)
!1752 = !{!1753, !1754, !1755, !1756, !1757}
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1751, file: !344, line: 96, baseType: !1750, size: 64)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1751, file: !344, line: 97, baseType: !1750, size: 64, offset: 64)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1751, file: !344, line: 101, baseType: !1012, size: 64, offset: 128)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1751, file: !344, line: 106, baseType: !1012, size: 64, offset: 192)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1751, file: !344, line: 111, baseType: !1012, size: 64, offset: 256)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1747, file: !344, line: 136, baseType: !1750, size: 64, offset: 64)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1744, file: !344, line: 151, baseType: !1760, size: 192)
!1760 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !344, line: 139, size: 192, elements: !1761)
!1761 = !{!1762, !1763, !1764}
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1760, file: !344, line: 141, baseType: !1012, size: 64)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1760, file: !344, line: 145, baseType: !1012, size: 64, offset: 64)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1760, file: !344, line: 150, baseType: !962, size: 32, offset: 128)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1744, file: !344, line: 164, baseType: !1766, size: 128)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !344, line: 153, size: 128, elements: !1767)
!1767 = !{!1768, !1769}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !1766, file: !344, line: 161, baseType: !1012, size: 64)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !1766, file: !344, line: 163, baseType: !1138, size: 32, offset: 64)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1736, file: !344, line: 168, baseType: !1771, size: 64, offset: 448)
!1771 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1772, size: 64)
!1772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !344, line: 67, size: 320, elements: !1773)
!1773 = !{!1774, !1775, !1776, !1777, !1778}
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !1772, file: !344, line: 70, baseType: !1771, size: 64)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1772, file: !344, line: 73, baseType: !1735, size: 64, offset: 64)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !1772, file: !344, line: 78, baseType: !1012, size: 64, offset: 128)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !1772, file: !344, line: 85, baseType: !1188, size: 64, offset: 192)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1772, file: !344, line: 88, baseType: !962, size: 32, offset: 256)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1736, file: !344, line: 173, baseType: !1188, size: 64, offset: 512)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1736, file: !344, line: 173, baseType: !1188, size: 64, offset: 576)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1736, file: !344, line: 177, baseType: !1130, size: 8, offset: 640)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1731, file: !344, line: 200, baseType: !1783, size: 64, offset: 64)
!1783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1784, size: 64)
!1784 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !344, line: 185, baseType: !1785)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !344, line: 185, size: 128, elements: !1786)
!1786 = !{!1787}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1785, file: !344, line: 185, baseType: !1788, size: 128)
!1788 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !344, line: 184, baseType: !1789)
!1789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !344, line: 184, size: 128, elements: !1790)
!1790 = !{!1791, !1792, !1793}
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1789, file: !344, line: 184, baseType: !7, size: 32)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1789, file: !344, line: 184, baseType: !7, size: 32, offset: 32)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1789, file: !344, line: 184, baseType: !1794, size: 64, offset: 64)
!1794 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1734, size: 64, elements: !1111)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1731, file: !344, line: 203, baseType: !1796, size: 64, offset: 128)
!1796 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1797, size: 64)
!1797 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !344, line: 189, baseType: !1798)
!1798 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !344, line: 189, size: 128, elements: !1799)
!1799 = !{!1800}
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1798, file: !344, line: 189, baseType: !1801, size: 128)
!1801 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !344, line: 188, baseType: !1802)
!1802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !344, line: 188, size: 128, elements: !1803)
!1803 = !{!1804, !1805, !1806}
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1802, file: !344, line: 188, baseType: !7, size: 32)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1802, file: !344, line: 188, baseType: !7, size: 32, offset: 32)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1802, file: !344, line: 188, baseType: !1807, size: 64, offset: 64)
!1807 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1808, size: 64, elements: !1111)
!1808 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !344, line: 180, baseType: !1771)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1731, file: !344, line: 207, baseType: !945, size: 64, offset: 192)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1731, file: !344, line: 211, baseType: !1811, size: 64, offset: 256)
!1811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1812, size: 64)
!1812 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !149, line: 183, baseType: !1813)
!1813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !149, line: 183, size: 128, elements: !1814)
!1814 = !{!1815}
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1813, file: !149, line: 183, baseType: !1005, size: 128)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1731, file: !344, line: 220, baseType: !1817, size: 64, offset: 320)
!1817 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !344, line: 217, size: 64, elements: !1818)
!1818 = !{!1819, !1820}
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !1817, file: !344, line: 218, baseType: !1811, size: 64)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !1817, file: !344, line: 219, baseType: !1821, size: 64)
!1821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1822, size: 64)
!1822 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !1823, line: 29, baseType: !1824)
!1823 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1824 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !1823, line: 29, size: 96, elements: !1825)
!1825 = !{!1826}
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1824, file: !1823, line: 29, baseType: !1827, size: 96)
!1827 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !1823, line: 27, baseType: !1828)
!1828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !1823, line: 27, size: 96, elements: !1829)
!1829 = !{!1830, !1831, !1832}
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1828, file: !1823, line: 27, baseType: !7, size: 32)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1828, file: !1823, line: 27, baseType: !7, size: 32, offset: 32)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1828, file: !1823, line: 27, baseType: !1833, size: 8, offset: 64)
!1833 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1834, size: 8, elements: !1111)
!1834 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !1823, line: 26, baseType: !1130)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1726, file: !1727, line: 467, baseType: !1836, size: 64, offset: 64)
!1836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1837, size: 64)
!1837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !351, line: 374, size: 640, elements: !1838)
!1838 = !{!1839, !1841, !1842, !1855, !1856, !1857, !1858, !1859, !1860, !1862, !1864, !1865}
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1837, file: !351, line: 377, baseType: !1840, size: 64)
!1840 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1013, line: 111, baseType: !1304)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1837, file: !351, line: 378, baseType: !1840, size: 64, offset: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1837, file: !351, line: 381, baseType: !1843, size: 64, offset: 128)
!1843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1844, size: 64)
!1844 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !351, line: 282, baseType: !1845)
!1845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !351, line: 282, size: 128, elements: !1846)
!1846 = !{!1847}
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1845, file: !351, line: 282, baseType: !1848, size: 128)
!1848 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !351, line: 281, baseType: !1849)
!1849 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !351, line: 281, size: 128, elements: !1850)
!1850 = !{!1851, !1852, !1853}
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1849, file: !351, line: 281, baseType: !7, size: 32)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1849, file: !351, line: 281, baseType: !7, size: 32, offset: 32)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1849, file: !351, line: 281, baseType: !1854, size: 64, offset: 64)
!1854 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1840, size: 64, elements: !1111)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1837, file: !351, line: 384, baseType: !962, size: 32, offset: 192)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1837, file: !351, line: 387, baseType: !962, size: 32, offset: 224)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1837, file: !351, line: 390, baseType: !962, size: 32, offset: 256)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1837, file: !351, line: 394, baseType: !1843, size: 64, offset: 320)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1837, file: !351, line: 396, baseType: !350, size: 32, offset: 384)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1837, file: !351, line: 399, baseType: !1861, size: 64, offset: 416)
!1861 = !DICompositeType(tag: DW_TAG_array_type, baseType: !356, size: 64, elements: !1258)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1837, file: !351, line: 402, baseType: !1863, size: 64, offset: 480)
!1863 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1258)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1837, file: !351, line: 406, baseType: !962, size: 32, offset: 544)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1837, file: !351, line: 409, baseType: !962, size: 32, offset: 576)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1726, file: !1727, line: 470, baseType: !1331, size: 64, offset: 128)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1726, file: !1727, line: 473, baseType: !1868, size: 64, offset: 192)
!1868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1869, size: 64)
!1869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1677, line: 39, size: 1152, elements: !1870)
!1870 = !{!1871, !1872, !1885, !1886, !1887, !1899, !1900, !1904, !1905, !1906, !1907, !1908}
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1869, file: !1677, line: 41, baseType: !945, size: 64)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1869, file: !1677, line: 48, baseType: !1873, size: 64, offset: 64)
!1873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1874, size: 64)
!1874 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !709, line: 35, baseType: !1875)
!1875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !709, line: 35, size: 128, elements: !1876)
!1876 = !{!1877}
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1875, file: !709, line: 35, baseType: !1878, size: 128)
!1878 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !709, line: 33, baseType: !1879)
!1879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !709, line: 33, size: 128, elements: !1880)
!1880 = !{!1881, !1882, !1883}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1879, file: !709, line: 33, baseType: !7, size: 32)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1879, file: !709, line: 33, baseType: !7, size: 32, offset: 32)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1879, file: !709, line: 33, baseType: !1884, size: 64, offset: 64)
!1884 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1340, size: 64, elements: !1111)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1869, file: !1677, line: 51, baseType: !1811, size: 64, offset: 128)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1869, file: !1677, line: 54, baseType: !1012, size: 64, offset: 192)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1869, file: !1677, line: 57, baseType: !1888, size: 128, offset: 256)
!1888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1889, line: 31, size: 128, elements: !1890)
!1889 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1890 = !{!1891, !1892, !1893, !1894, !1895, !1896, !1897}
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1888, file: !1889, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1888, file: !1889, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1888, file: !1889, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1888, file: !1889, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1888, file: !1889, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1888, file: !1889, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1888, file: !1889, line: 56, baseType: !1898, size: 64, offset: 64)
!1898 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1013, line: 47, baseType: !1242)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1869, file: !1677, line: 60, baseType: !1888, size: 128, offset: 384)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1869, file: !1677, line: 64, baseType: !1901, size: 64, offset: 512)
!1901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1902, size: 64)
!1902 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1903, line: 33, flags: DIFlagFwdDecl)
!1903 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1869, file: !1677, line: 67, baseType: !1012, size: 64, offset: 576)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1869, file: !1677, line: 73, baseType: !945, size: 64, offset: 640)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1869, file: !1677, line: 77, baseType: !1898, size: 64, offset: 704)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1869, file: !1677, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1869, file: !1677, line: 82, baseType: !1909, size: 320, offset: 832)
!1909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1371, line: 62, size: 320, elements: !1910)
!1910 = !{!1911, !1917, !1918, !1919, !1920, !1921}
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1909, file: !1371, line: 63, baseType: !1912, size: 64)
!1912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1913, size: 64)
!1913 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1371, line: 56, size: 128, elements: !1914)
!1914 = !{!1915, !1916}
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1913, file: !1371, line: 57, baseType: !1912, size: 64)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1913, file: !1371, line: 58, baseType: !1109, size: 8, offset: 64)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1909, file: !1371, line: 64, baseType: !7, size: 32, offset: 64)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1909, file: !1371, line: 66, baseType: !7, size: 32, offset: 96)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1909, file: !1371, line: 68, baseType: !1130, size: 8, offset: 128)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1909, file: !1371, line: 70, baseType: !1369, size: 64, offset: 192)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1909, file: !1371, line: 71, baseType: !1377, size: 64, offset: 256)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1726, file: !1727, line: 476, baseType: !1923, size: 64, offset: 256)
!1923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1924, size: 64)
!1924 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1727, line: 476, flags: DIFlagFwdDecl)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1726, file: !1727, line: 479, baseType: !945, size: 64, offset: 320)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1726, file: !1727, line: 484, baseType: !1012, size: 64, offset: 384)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1726, file: !1727, line: 488, baseType: !1012, size: 64, offset: 448)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1726, file: !1727, line: 493, baseType: !1012, size: 64, offset: 512)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1726, file: !1727, line: 496, baseType: !1012, size: 64, offset: 576)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1726, file: !1727, line: 501, baseType: !1931, size: 64, offset: 640)
!1931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1932, size: 64)
!1932 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !362, line: 2355, size: 576, elements: !1933)
!1933 = !{!1934, !1937, !1938, !1939, !1940, !1942, !1943, !1948, !1949, !1950, !1951, !1952, !1953}
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1932, file: !362, line: 2356, baseType: !1935, size: 64)
!1935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1936, size: 64)
!1936 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !362, line: 2356, flags: DIFlagFwdDecl)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1932, file: !362, line: 2357, baseType: !1214, size: 64, offset: 64)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1932, file: !362, line: 2358, baseType: !962, size: 32, offset: 128)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1932, file: !362, line: 2359, baseType: !962, size: 32, offset: 160)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1932, file: !362, line: 2360, baseType: !1941, size: 128, offset: 192)
!1941 = !DICompositeType(tag: DW_TAG_array_type, baseType: !962, size: 128, elements: !1283)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1932, file: !362, line: 2364, baseType: !962, size: 32, offset: 320)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1932, file: !362, line: 2367, baseType: !1944, size: 128, offset: 384)
!1944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !362, line: 2349, size: 128, elements: !1945)
!1945 = !{!1946, !1947}
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1944, file: !362, line: 2351, baseType: !1188, size: 64)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1944, file: !362, line: 2352, baseType: !1067, size: 64, offset: 64)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1932, file: !362, line: 2371, baseType: !361, size: 32, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1932, file: !362, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1932, file: !362, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1932, file: !362, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1932, file: !362, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1932, file: !362, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1726, file: !1727, line: 504, baseType: !1955, size: 64, offset: 704)
!1955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1956, size: 64)
!1956 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1727, line: 504, flags: DIFlagFwdDecl)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1726, file: !1727, line: 507, baseType: !945, size: 64, offset: 768)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1726, file: !1727, line: 510, baseType: !962, size: 32, offset: 832)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1726, file: !1727, line: 513, baseType: !962, size: 32, offset: 864)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1726, file: !1727, line: 516, baseType: !1138, size: 32, offset: 896)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1726, file: !1727, line: 519, baseType: !1138, size: 32, offset: 928)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1726, file: !1727, line: 522, baseType: !7, size: 32, offset: 960)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1726, file: !1727, line: 523, baseType: !7, size: 32, offset: 992)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1726, file: !1727, line: 528, baseType: !1214, size: 64, offset: 1024)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1726, file: !1727, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1726, file: !1727, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1726, file: !1727, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1726, file: !1727, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1726, file: !1727, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1726, file: !1727, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1726, file: !1727, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1726, file: !1727, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1726, file: !1727, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1726, file: !1727, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1726, file: !1727, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1726, file: !1727, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1726, file: !1727, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1726, file: !1727, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1726, file: !1727, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1726, file: !1727, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1721, file: !149, line: 3254, baseType: !1012, size: 64, offset: 1536)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1721, file: !149, line: 3257, baseType: !1012, size: 64, offset: 1600)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1721, file: !149, line: 3258, baseType: !1012, size: 64, offset: 1664)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1721, file: !149, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1721, file: !149, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1721, file: !149, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1721, file: !149, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1721, file: !149, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1721, file: !149, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1721, file: !149, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1721, file: !149, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1721, file: !149, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1721, file: !149, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1721, file: !149, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1721, file: !149, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1721, file: !149, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1721, file: !149, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1721, file: !149, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1721, file: !149, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1721, file: !149, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1721, file: !149, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1015, file: !149, line: 3394, baseType: !2003, size: 1344)
!2003 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !149, line: 2279, size: 1344, elements: !2004)
!2004 = !{!2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046}
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2003, file: !149, line: 2280, baseType: !1051, size: 192)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2003, file: !149, line: 2281, baseType: !1012, size: 64, offset: 192)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2003, file: !149, line: 2282, baseType: !1012, size: 64, offset: 256)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2003, file: !149, line: 2283, baseType: !1012, size: 64, offset: 320)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2003, file: !149, line: 2284, baseType: !1012, size: 64, offset: 384)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2003, file: !149, line: 2285, baseType: !7, size: 32, offset: 448)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2003, file: !149, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2003, file: !149, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2003, file: !149, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2003, file: !149, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2003, file: !149, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2003, file: !149, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2003, file: !149, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2003, file: !149, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2003, file: !149, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2003, file: !149, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2003, file: !149, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2003, file: !149, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2003, file: !149, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2003, file: !149, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2003, file: !149, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2003, file: !149, line: 2305, baseType: !7, size: 32, offset: 512)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2003, file: !149, line: 2306, baseType: !1594, size: 32, offset: 544)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2003, file: !149, line: 2307, baseType: !1012, size: 64, offset: 576)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2003, file: !149, line: 2308, baseType: !1012, size: 64, offset: 640)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2003, file: !149, line: 2314, baseType: !2031, size: 64, offset: 704)
!2031 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !149, line: 2309, size: 64, elements: !2032)
!2032 = !{!2033, !2034, !2035}
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2031, file: !149, line: 2310, baseType: !962, size: 32)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2031, file: !149, line: 2311, baseType: !1214, size: 64)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2031, file: !149, line: 2312, baseType: !2036, size: 64)
!2036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2037, size: 64)
!2037 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !149, line: 2277, flags: DIFlagFwdDecl)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2003, file: !149, line: 2315, baseType: !1012, size: 64, offset: 768)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2003, file: !149, line: 2316, baseType: !1012, size: 64, offset: 832)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2003, file: !149, line: 2317, baseType: !1012, size: 64, offset: 896)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2003, file: !149, line: 2318, baseType: !1012, size: 64, offset: 960)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2003, file: !149, line: 2319, baseType: !1012, size: 64, offset: 1024)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2003, file: !149, line: 2320, baseType: !1012, size: 64, offset: 1088)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2003, file: !149, line: 2321, baseType: !1012, size: 64, offset: 1152)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2003, file: !149, line: 2322, baseType: !1012, size: 64, offset: 1216)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2003, file: !149, line: 2324, baseType: !2047, size: 64, offset: 1280)
!2047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2048, size: 64)
!2048 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !149, line: 2324, flags: DIFlagFwdDecl)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1015, file: !149, line: 3395, baseType: !2050, size: 320)
!2050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !149, line: 1469, size: 320, elements: !2051)
!2051 = !{!2052, !2053, !2054}
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2050, file: !149, line: 1470, baseType: !1051, size: 192)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2050, file: !149, line: 1471, baseType: !1012, size: 64, offset: 192)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2050, file: !149, line: 1472, baseType: !1012, size: 64, offset: 256)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1015, file: !149, line: 3396, baseType: !2056, size: 320)
!2056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !149, line: 1482, size: 320, elements: !2057)
!2057 = !{!2058, !2059, !2060}
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2056, file: !149, line: 1483, baseType: !1051, size: 192)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2056, file: !149, line: 1484, baseType: !962, size: 32, offset: 192)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2056, file: !149, line: 1485, baseType: !1011, size: 64, offset: 256)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1015, file: !149, line: 3397, baseType: !2062, size: 384)
!2062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !149, line: 1829, size: 384, elements: !2063)
!2063 = !{!2064, !2065, !2066, !2067}
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2062, file: !149, line: 1830, baseType: !1051, size: 192)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2062, file: !149, line: 1831, baseType: !1138, size: 32, offset: 192)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2062, file: !149, line: 1832, baseType: !1012, size: 64, offset: 256)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2062, file: !149, line: 1835, baseType: !1011, size: 64, offset: 320)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1015, file: !149, line: 3398, baseType: !2069, size: 704)
!2069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !149, line: 1898, size: 704, elements: !2070)
!2070 = !{!2071, !2072, !2073, !2074, !2075, !2080}
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2069, file: !149, line: 1899, baseType: !1051, size: 192)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2069, file: !149, line: 1902, baseType: !1012, size: 64, offset: 192)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2069, file: !149, line: 1905, baseType: !1340, size: 64, offset: 256)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2069, file: !149, line: 1908, baseType: !7, size: 32, offset: 320)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2069, file: !149, line: 1911, baseType: !2076, size: 64, offset: 384)
!2076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2077, size: 64)
!2077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1677, line: 117, size: 128, elements: !2078)
!2078 = !{!2079}
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2077, file: !1677, line: 120, baseType: !1888, size: 128)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2069, file: !149, line: 1914, baseType: !1382, size: 256, offset: 448)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1015, file: !149, line: 3399, baseType: !2082, size: 704)
!2082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !149, line: 2008, size: 704, elements: !2083)
!2083 = !{!2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094}
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2082, file: !149, line: 2009, baseType: !1051, size: 192)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2082, file: !149, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2082, file: !149, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2082, file: !149, line: 2014, baseType: !1138, size: 32, offset: 224)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2082, file: !149, line: 2016, baseType: !1012, size: 64, offset: 256)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2082, file: !149, line: 2017, baseType: !1811, size: 64, offset: 320)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2082, file: !149, line: 2019, baseType: !1012, size: 64, offset: 384)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2082, file: !149, line: 2020, baseType: !1012, size: 64, offset: 448)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2082, file: !149, line: 2021, baseType: !1012, size: 64, offset: 512)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2082, file: !149, line: 2022, baseType: !1012, size: 64, offset: 576)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2082, file: !149, line: 2023, baseType: !1012, size: 64, offset: 640)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1015, file: !149, line: 3400, baseType: !2096, size: 832)
!2096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !149, line: 2430, size: 832, elements: !2097)
!2097 = !{!2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107}
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2096, file: !149, line: 2431, baseType: !1051, size: 192)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2096, file: !149, line: 2433, baseType: !1012, size: 64, offset: 192)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2096, file: !149, line: 2434, baseType: !1012, size: 64, offset: 256)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2096, file: !149, line: 2435, baseType: !1012, size: 64, offset: 320)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2096, file: !149, line: 2436, baseType: !1012, size: 64, offset: 384)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2096, file: !149, line: 2437, baseType: !1811, size: 64, offset: 448)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2096, file: !149, line: 2438, baseType: !1012, size: 64, offset: 512)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2096, file: !149, line: 2440, baseType: !1012, size: 64, offset: 576)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2096, file: !149, line: 2441, baseType: !1012, size: 64, offset: 640)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2096, file: !149, line: 2443, baseType: !2108, size: 128, offset: 704)
!2108 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !149, line: 182, baseType: !2109)
!2109 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !149, line: 182, size: 128, elements: !2110)
!2110 = !{!2111}
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2109, file: !149, line: 182, baseType: !1005, size: 128)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1015, file: !149, line: 3401, baseType: !2113, size: 320)
!2113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !149, line: 3327, size: 320, elements: !2114)
!2114 = !{!2115, !2116, !2123}
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2113, file: !149, line: 3329, baseType: !1051, size: 192)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2113, file: !149, line: 3330, baseType: !2117, size: 64, offset: 192)
!2117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2118, size: 64)
!2118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !149, line: 3320, size: 192, elements: !2119)
!2119 = !{!2120, !2121, !2122}
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2118, file: !149, line: 3322, baseType: !2117, size: 64)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2118, file: !149, line: 3323, baseType: !2117, size: 64, offset: 64)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2118, file: !149, line: 3324, baseType: !1012, size: 64, offset: 128)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2113, file: !149, line: 3331, baseType: !2117, size: 64, offset: 256)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1015, file: !149, line: 3402, baseType: !2125, size: 256)
!2125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !149, line: 1540, size: 256, elements: !2126)
!2126 = !{!2127, !2128}
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2125, file: !149, line: 1541, baseType: !1051, size: 192)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2125, file: !149, line: 1542, baseType: !2129, size: 64, offset: 192)
!2129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2130, size: 64)
!2130 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !149, line: 1538, baseType: !2131)
!2131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !149, line: 1538, size: 192, elements: !2132)
!2132 = !{!2133}
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2131, file: !149, line: 1538, baseType: !2134, size: 192)
!2134 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !149, line: 1537, baseType: !2135)
!2135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !149, line: 1537, size: 192, elements: !2136)
!2136 = !{!2137, !2138, !2139}
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2135, file: !149, line: 1537, baseType: !7, size: 32)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2135, file: !149, line: 1537, baseType: !7, size: 32, offset: 32)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2135, file: !149, line: 1537, baseType: !2140, size: 128, offset: 64)
!2140 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2141, size: 128, elements: !1111)
!2141 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !149, line: 1535, baseType: !2142)
!2142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !149, line: 1532, size: 128, elements: !2143)
!2143 = !{!2144, !2145}
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2142, file: !149, line: 1533, baseType: !1012, size: 64)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2142, file: !149, line: 1534, baseType: !1012, size: 64, offset: 64)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1015, file: !149, line: 3403, baseType: !2147, size: 512)
!2147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !149, line: 1938, size: 512, elements: !2148)
!2148 = !{!2149, !2150, !2151, !2152, !2158, !2159, !2160}
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2147, file: !149, line: 1939, baseType: !1051, size: 192)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2147, file: !149, line: 1940, baseType: !1138, size: 32, offset: 192)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2147, file: !149, line: 1941, baseType: !366, size: 32, offset: 224)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2147, file: !149, line: 1946, baseType: !2153, size: 32, offset: 256)
!2153 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !149, line: 1942, size: 32, elements: !2154)
!2154 = !{!2155, !2156, !2157}
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2153, file: !149, line: 1943, baseType: !384, size: 32)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2153, file: !149, line: 1944, baseType: !391, size: 32)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2153, file: !149, line: 1945, baseType: !148, size: 32)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2147, file: !149, line: 1950, baseType: !1330, size: 64, offset: 320)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2147, file: !149, line: 1951, baseType: !1330, size: 64, offset: 384)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2147, file: !149, line: 1953, baseType: !1011, size: 64, offset: 448)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1015, file: !149, line: 3404, baseType: !2162, size: 1664)
!2162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !149, line: 3337, size: 1664, elements: !2163)
!2163 = !{!2164, !2165}
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2162, file: !149, line: 3338, baseType: !1051, size: 192)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2162, file: !149, line: 3341, baseType: !2166, size: 1472, offset: 192)
!2166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2167, line: 410, size: 1472, elements: !2168)
!2167 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2168 = !{!2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332}
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2166, file: !2167, line: 412, baseType: !962, size: 32)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2166, file: !2167, line: 413, baseType: !962, size: 32, offset: 32)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2166, file: !2167, line: 414, baseType: !962, size: 32, offset: 64)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2166, file: !2167, line: 415, baseType: !962, size: 32, offset: 96)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2166, file: !2167, line: 416, baseType: !962, size: 32, offset: 128)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2166, file: !2167, line: 417, baseType: !962, size: 32, offset: 160)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2166, file: !2167, line: 418, baseType: !1130, size: 8, offset: 192)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2166, file: !2167, line: 419, baseType: !1130, size: 8, offset: 200)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2166, file: !2167, line: 420, baseType: !2178, size: 8, offset: 208)
!2178 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2166, file: !2167, line: 421, baseType: !2178, size: 8, offset: 216)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2166, file: !2167, line: 422, baseType: !2178, size: 8, offset: 224)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2166, file: !2167, line: 423, baseType: !2178, size: 8, offset: 232)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2166, file: !2167, line: 424, baseType: !2178, size: 8, offset: 240)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2166, file: !2167, line: 425, baseType: !2178, size: 8, offset: 248)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2166, file: !2167, line: 426, baseType: !2178, size: 8, offset: 256)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2166, file: !2167, line: 427, baseType: !2178, size: 8, offset: 264)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2166, file: !2167, line: 428, baseType: !2178, size: 8, offset: 272)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2166, file: !2167, line: 429, baseType: !2178, size: 8, offset: 280)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2166, file: !2167, line: 430, baseType: !2178, size: 8, offset: 288)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2166, file: !2167, line: 431, baseType: !2178, size: 8, offset: 296)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2166, file: !2167, line: 432, baseType: !2178, size: 8, offset: 304)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2166, file: !2167, line: 433, baseType: !2178, size: 8, offset: 312)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2166, file: !2167, line: 434, baseType: !2178, size: 8, offset: 320)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2166, file: !2167, line: 435, baseType: !2178, size: 8, offset: 328)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2166, file: !2167, line: 436, baseType: !2178, size: 8, offset: 336)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2166, file: !2167, line: 437, baseType: !2178, size: 8, offset: 344)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2166, file: !2167, line: 438, baseType: !2178, size: 8, offset: 352)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2166, file: !2167, line: 439, baseType: !2178, size: 8, offset: 360)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2166, file: !2167, line: 440, baseType: !2178, size: 8, offset: 368)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2166, file: !2167, line: 441, baseType: !2178, size: 8, offset: 376)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2166, file: !2167, line: 442, baseType: !2178, size: 8, offset: 384)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2166, file: !2167, line: 443, baseType: !2178, size: 8, offset: 392)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2166, file: !2167, line: 444, baseType: !2178, size: 8, offset: 400)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2166, file: !2167, line: 445, baseType: !2178, size: 8, offset: 408)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2166, file: !2167, line: 446, baseType: !2178, size: 8, offset: 416)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2166, file: !2167, line: 447, baseType: !2178, size: 8, offset: 424)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2166, file: !2167, line: 448, baseType: !2178, size: 8, offset: 432)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2166, file: !2167, line: 449, baseType: !2178, size: 8, offset: 440)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2166, file: !2167, line: 450, baseType: !2178, size: 8, offset: 448)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2166, file: !2167, line: 451, baseType: !2178, size: 8, offset: 456)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2166, file: !2167, line: 452, baseType: !2178, size: 8, offset: 464)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2166, file: !2167, line: 453, baseType: !2178, size: 8, offset: 472)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2166, file: !2167, line: 454, baseType: !2178, size: 8, offset: 480)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2166, file: !2167, line: 455, baseType: !2178, size: 8, offset: 488)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2166, file: !2167, line: 456, baseType: !2178, size: 8, offset: 496)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2166, file: !2167, line: 457, baseType: !2178, size: 8, offset: 504)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2166, file: !2167, line: 458, baseType: !2178, size: 8, offset: 512)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2166, file: !2167, line: 459, baseType: !2178, size: 8, offset: 520)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2166, file: !2167, line: 460, baseType: !2178, size: 8, offset: 528)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2166, file: !2167, line: 461, baseType: !2178, size: 8, offset: 536)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2166, file: !2167, line: 462, baseType: !2178, size: 8, offset: 544)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2166, file: !2167, line: 463, baseType: !2178, size: 8, offset: 552)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2166, file: !2167, line: 464, baseType: !2178, size: 8, offset: 560)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2166, file: !2167, line: 465, baseType: !2178, size: 8, offset: 568)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2166, file: !2167, line: 466, baseType: !2178, size: 8, offset: 576)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2166, file: !2167, line: 467, baseType: !2178, size: 8, offset: 584)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2166, file: !2167, line: 468, baseType: !2178, size: 8, offset: 592)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2166, file: !2167, line: 469, baseType: !2178, size: 8, offset: 600)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2166, file: !2167, line: 470, baseType: !2178, size: 8, offset: 608)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2166, file: !2167, line: 471, baseType: !2178, size: 8, offset: 616)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2166, file: !2167, line: 472, baseType: !2178, size: 8, offset: 624)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2166, file: !2167, line: 473, baseType: !2178, size: 8, offset: 632)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2166, file: !2167, line: 474, baseType: !2178, size: 8, offset: 640)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2166, file: !2167, line: 475, baseType: !2178, size: 8, offset: 648)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2166, file: !2167, line: 476, baseType: !2178, size: 8, offset: 656)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2166, file: !2167, line: 477, baseType: !2178, size: 8, offset: 664)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2166, file: !2167, line: 478, baseType: !2178, size: 8, offset: 672)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2166, file: !2167, line: 479, baseType: !2178, size: 8, offset: 680)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2166, file: !2167, line: 480, baseType: !2178, size: 8, offset: 688)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2166, file: !2167, line: 481, baseType: !2178, size: 8, offset: 696)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2166, file: !2167, line: 482, baseType: !2178, size: 8, offset: 704)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2166, file: !2167, line: 483, baseType: !2178, size: 8, offset: 712)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2166, file: !2167, line: 484, baseType: !2178, size: 8, offset: 720)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2166, file: !2167, line: 485, baseType: !2178, size: 8, offset: 728)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2166, file: !2167, line: 486, baseType: !2178, size: 8, offset: 736)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2166, file: !2167, line: 487, baseType: !2178, size: 8, offset: 744)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2166, file: !2167, line: 488, baseType: !2178, size: 8, offset: 752)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2166, file: !2167, line: 489, baseType: !2178, size: 8, offset: 760)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2166, file: !2167, line: 490, baseType: !2178, size: 8, offset: 768)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2166, file: !2167, line: 491, baseType: !2178, size: 8, offset: 776)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2166, file: !2167, line: 492, baseType: !2178, size: 8, offset: 784)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2166, file: !2167, line: 493, baseType: !2178, size: 8, offset: 792)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2166, file: !2167, line: 494, baseType: !2178, size: 8, offset: 800)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2166, file: !2167, line: 495, baseType: !2178, size: 8, offset: 808)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2166, file: !2167, line: 496, baseType: !2178, size: 8, offset: 816)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2166, file: !2167, line: 497, baseType: !2178, size: 8, offset: 824)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2166, file: !2167, line: 498, baseType: !2178, size: 8, offset: 832)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2166, file: !2167, line: 499, baseType: !2178, size: 8, offset: 840)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2166, file: !2167, line: 500, baseType: !2178, size: 8, offset: 848)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2166, file: !2167, line: 501, baseType: !2178, size: 8, offset: 856)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2166, file: !2167, line: 502, baseType: !2178, size: 8, offset: 864)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2166, file: !2167, line: 503, baseType: !2178, size: 8, offset: 872)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2166, file: !2167, line: 504, baseType: !2178, size: 8, offset: 880)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2166, file: !2167, line: 505, baseType: !2178, size: 8, offset: 888)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2166, file: !2167, line: 506, baseType: !2178, size: 8, offset: 896)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2166, file: !2167, line: 507, baseType: !2178, size: 8, offset: 904)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2166, file: !2167, line: 508, baseType: !2178, size: 8, offset: 912)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2166, file: !2167, line: 509, baseType: !2178, size: 8, offset: 920)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2166, file: !2167, line: 510, baseType: !2178, size: 8, offset: 928)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2166, file: !2167, line: 511, baseType: !2178, size: 8, offset: 936)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2166, file: !2167, line: 512, baseType: !2178, size: 8, offset: 944)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2166, file: !2167, line: 513, baseType: !2178, size: 8, offset: 952)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2166, file: !2167, line: 514, baseType: !2178, size: 8, offset: 960)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2166, file: !2167, line: 515, baseType: !2178, size: 8, offset: 968)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2166, file: !2167, line: 516, baseType: !2178, size: 8, offset: 976)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2166, file: !2167, line: 517, baseType: !2178, size: 8, offset: 984)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2166, file: !2167, line: 518, baseType: !2178, size: 8, offset: 992)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2166, file: !2167, line: 519, baseType: !2178, size: 8, offset: 1000)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2166, file: !2167, line: 520, baseType: !2178, size: 8, offset: 1008)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2166, file: !2167, line: 521, baseType: !2178, size: 8, offset: 1016)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2166, file: !2167, line: 522, baseType: !2178, size: 8, offset: 1024)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2166, file: !2167, line: 523, baseType: !2178, size: 8, offset: 1032)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2166, file: !2167, line: 524, baseType: !2178, size: 8, offset: 1040)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2166, file: !2167, line: 525, baseType: !2178, size: 8, offset: 1048)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2166, file: !2167, line: 526, baseType: !2178, size: 8, offset: 1056)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2166, file: !2167, line: 527, baseType: !2178, size: 8, offset: 1064)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2166, file: !2167, line: 528, baseType: !2178, size: 8, offset: 1072)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2166, file: !2167, line: 529, baseType: !2178, size: 8, offset: 1080)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2166, file: !2167, line: 530, baseType: !2178, size: 8, offset: 1088)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2166, file: !2167, line: 531, baseType: !2178, size: 8, offset: 1096)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2166, file: !2167, line: 532, baseType: !2178, size: 8, offset: 1104)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2166, file: !2167, line: 533, baseType: !2178, size: 8, offset: 1112)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2166, file: !2167, line: 534, baseType: !2178, size: 8, offset: 1120)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2166, file: !2167, line: 535, baseType: !2178, size: 8, offset: 1128)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2166, file: !2167, line: 536, baseType: !2178, size: 8, offset: 1136)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2166, file: !2167, line: 537, baseType: !2178, size: 8, offset: 1144)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2166, file: !2167, line: 538, baseType: !2178, size: 8, offset: 1152)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2166, file: !2167, line: 539, baseType: !2178, size: 8, offset: 1160)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2166, file: !2167, line: 540, baseType: !2178, size: 8, offset: 1168)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2166, file: !2167, line: 541, baseType: !2178, size: 8, offset: 1176)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2166, file: !2167, line: 542, baseType: !2178, size: 8, offset: 1184)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2166, file: !2167, line: 543, baseType: !2178, size: 8, offset: 1192)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2166, file: !2167, line: 544, baseType: !2178, size: 8, offset: 1200)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2166, file: !2167, line: 545, baseType: !2178, size: 8, offset: 1208)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2166, file: !2167, line: 546, baseType: !2178, size: 8, offset: 1216)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2166, file: !2167, line: 547, baseType: !2178, size: 8, offset: 1224)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2166, file: !2167, line: 548, baseType: !2178, size: 8, offset: 1232)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2166, file: !2167, line: 549, baseType: !2178, size: 8, offset: 1240)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2166, file: !2167, line: 550, baseType: !2178, size: 8, offset: 1248)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2166, file: !2167, line: 551, baseType: !2178, size: 8, offset: 1256)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2166, file: !2167, line: 552, baseType: !2178, size: 8, offset: 1264)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2166, file: !2167, line: 553, baseType: !2178, size: 8, offset: 1272)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2166, file: !2167, line: 554, baseType: !2178, size: 8, offset: 1280)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2166, file: !2167, line: 555, baseType: !2178, size: 8, offset: 1288)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2166, file: !2167, line: 556, baseType: !2178, size: 8, offset: 1296)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2166, file: !2167, line: 557, baseType: !2178, size: 8, offset: 1304)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2166, file: !2167, line: 558, baseType: !2178, size: 8, offset: 1312)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2166, file: !2167, line: 559, baseType: !2178, size: 8, offset: 1320)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2166, file: !2167, line: 560, baseType: !2178, size: 8, offset: 1328)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2166, file: !2167, line: 561, baseType: !2178, size: 8, offset: 1336)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2166, file: !2167, line: 562, baseType: !2178, size: 8, offset: 1344)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2166, file: !2167, line: 563, baseType: !2178, size: 8, offset: 1352)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2166, file: !2167, line: 564, baseType: !2178, size: 8, offset: 1360)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2166, file: !2167, line: 565, baseType: !2178, size: 8, offset: 1368)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2166, file: !2167, line: 566, baseType: !2178, size: 8, offset: 1376)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2166, file: !2167, line: 567, baseType: !2178, size: 8, offset: 1384)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2166, file: !2167, line: 568, baseType: !2178, size: 8, offset: 1392)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2166, file: !2167, line: 569, baseType: !2178, size: 8, offset: 1400)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2166, file: !2167, line: 570, baseType: !2178, size: 8, offset: 1408)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2166, file: !2167, line: 571, baseType: !2178, size: 8, offset: 1416)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2166, file: !2167, line: 572, baseType: !2178, size: 8, offset: 1424)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2166, file: !2167, line: 573, baseType: !2178, size: 8, offset: 1432)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2166, file: !2167, line: 574, baseType: !2178, size: 8, offset: 1440)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1015, file: !149, line: 3405, baseType: !2334, size: 384)
!2334 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !149, line: 3352, size: 384, elements: !2335)
!2335 = !{!2336, !2337}
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2334, file: !149, line: 3353, baseType: !1051, size: 192)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2334, file: !149, line: 3356, baseType: !2338, size: 192, offset: 192)
!2338 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2167, line: 578, size: 192, elements: !2339)
!2339 = !{!2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350}
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2338, file: !2167, line: 580, baseType: !962, size: 32)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2338, file: !2167, line: 581, baseType: !962, size: 32, offset: 32)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2338, file: !2167, line: 582, baseType: !962, size: 32, offset: 64)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2338, file: !2167, line: 583, baseType: !962, size: 32, offset: 96)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2338, file: !2167, line: 584, baseType: !1130, size: 8, offset: 128)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2338, file: !2167, line: 585, baseType: !1130, size: 8, offset: 136)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2338, file: !2167, line: 586, baseType: !1130, size: 8, offset: 144)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2338, file: !2167, line: 587, baseType: !1130, size: 8, offset: 152)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2338, file: !2167, line: 588, baseType: !1130, size: 8, offset: 160)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2338, file: !2167, line: 589, baseType: !1130, size: 8, offset: 168)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2338, file: !2167, line: 590, baseType: !1130, size: 8, offset: 176)
!2351 = !{!2352}
!2352 = !DISubrange(count: 7)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "cgraph_node_encoder", scope: !938, file: !6, line: 524, baseType: !2354, size: 64, offset: 1344)
!2354 = !DIDerivedType(tag: DW_TAG_typedef, name: "lto_cgraph_encoder_t", file: !6, line: 470, baseType: !2355)
!2355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2356, size: 64)
!2356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_cgraph_encoder_d", file: !6, line: 461, size: 128, elements: !2357)
!2357 = !{!2358, !2359}
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !2356, file: !6, line: 464, baseType: !1901, size: 64)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !2356, file: !6, line: 467, baseType: !2360, size: 64, offset: 64)
!2360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2361, size: 64)
!2361 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_heap", file: !399, line: 271, baseType: !2362)
!2362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_heap", file: !399, line: 271, size: 128, elements: !2363)
!2363 = !{!2364}
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2362, file: !399, line: 271, baseType: !2365, size: 128)
!2365 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !399, line: 270, baseType: !2366)
!2366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !399, line: 270, size: 128, elements: !2367)
!2367 = !{!2368, !2369, !2370}
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2366, file: !399, line: 270, baseType: !7, size: 32)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2366, file: !399, line: 270, baseType: !7, size: 32, offset: 32)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2366, file: !399, line: 270, baseType: !2371, size: 64, offset: 64)
!2371 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2372, size: 64, elements: !1111)
!2372 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !399, line: 268, baseType: !2373)
!2373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2374, size: 64)
!2374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !399, line: 181, size: 2496, elements: !2375)
!2375 = !{!2376, !2377, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2509, !2550, !2560, !2564, !2590, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612}
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2374, file: !399, line: 182, baseType: !1012, size: 64)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !2374, file: !399, line: 183, baseType: !2378, size: 64, offset: 64)
!2378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2379, size: 64)
!2379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !399, line: 314, size: 768, elements: !2380)
!2380 = !{!2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2392, !2393, !2394, !2395, !2397, !2398, !2399}
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2379, file: !399, line: 316, baseType: !1549, size: 64)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !2379, file: !399, line: 317, baseType: !2373, size: 64, offset: 64)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !2379, file: !399, line: 318, baseType: !2373, size: 64, offset: 128)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !2379, file: !399, line: 319, baseType: !2378, size: 64, offset: 192)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !2379, file: !399, line: 320, baseType: !2378, size: 64, offset: 256)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !2379, file: !399, line: 321, baseType: !2378, size: 64, offset: 320)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !2379, file: !399, line: 322, baseType: !2378, size: 64, offset: 384)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !2379, file: !399, line: 323, baseType: !1340, size: 64, offset: 448)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2379, file: !399, line: 324, baseType: !968, size: 64, offset: 512)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !2379, file: !399, line: 327, baseType: !2391, size: 32, offset: 576)
!2391 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !399, line: 312, baseType: !398)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !2379, file: !399, line: 330, baseType: !7, size: 32, offset: 608)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2379, file: !399, line: 334, baseType: !962, size: 32, offset: 640)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2379, file: !399, line: 336, baseType: !962, size: 32, offset: 672)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2379, file: !399, line: 338, baseType: !2396, size: 16, offset: 704)
!2396 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !2379, file: !399, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !2379, file: !399, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !2379, file: !399, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !2374, file: !399, line: 184, baseType: !2378, size: 64, offset: 128)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2374, file: !399, line: 185, baseType: !2373, size: 64, offset: 192)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !2374, file: !399, line: 186, baseType: !2373, size: 64, offset: 256)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !2374, file: !399, line: 188, baseType: !2373, size: 64, offset: 320)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !2374, file: !399, line: 190, baseType: !2373, size: 64, offset: 384)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !2374, file: !399, line: 192, baseType: !2373, size: 64, offset: 448)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2374, file: !399, line: 194, baseType: !2373, size: 64, offset: 512)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !2374, file: !399, line: 196, baseType: !2373, size: 64, offset: 576)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !2374, file: !399, line: 197, baseType: !2373, size: 64, offset: 640)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !2374, file: !399, line: 198, baseType: !2373, size: 64, offset: 704)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !2374, file: !399, line: 199, baseType: !2373, size: 64, offset: 768)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !2374, file: !399, line: 202, baseType: !2373, size: 64, offset: 832)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !2374, file: !399, line: 204, baseType: !2373, size: 64, offset: 896)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !2374, file: !399, line: 207, baseType: !945, size: 64, offset: 960)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2374, file: !399, line: 209, baseType: !968, size: 64, offset: 1024)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !2374, file: !399, line: 214, baseType: !2416, size: 64, offset: 1088)
!2416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2417, size: 64)
!2417 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !1727, line: 177, baseType: !2418)
!2418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !1727, line: 177, size: 128, elements: !2419)
!2419 = !{!2420}
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2418, file: !1727, line: 177, baseType: !2421, size: 128)
!2421 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !1727, line: 176, baseType: !2422)
!2422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !1727, line: 176, size: 128, elements: !2423)
!2423 = !{!2424, !2425, !2426}
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2422, file: !1727, line: 176, baseType: !7, size: 32)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2422, file: !1727, line: 176, baseType: !7, size: 32, offset: 32)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2422, file: !1727, line: 176, baseType: !2427, size: 64, offset: 64)
!2427 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2428, size: 64, elements: !1111)
!2428 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !1727, line: 174, baseType: !2429)
!2429 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2430, size: 64)
!2430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !422, line: 173, size: 1152, elements: !2431)
!2431 = !{!2432, !2456, !2460, !2475, !2476, !2480, !2485, !2486, !2490}
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2430, file: !422, line: 175, baseType: !2433, size: 640)
!2433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !422, line: 114, size: 640, elements: !2434)
!2434 = !{!2435, !2436, !2437, !2441, !2445, !2447, !2448, !2449, !2451, !2452, !2453, !2454, !2455}
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2433, file: !422, line: 117, baseType: !421, size: 32)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2433, file: !422, line: 121, baseType: !1214, size: 64, offset: 64)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2433, file: !422, line: 125, baseType: !2438, size: 64, offset: 128)
!2438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2439, size: 64)
!2439 = !DISubroutineType(types: !2440)
!2440 = !{!1130}
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2433, file: !422, line: 130, baseType: !2442, size: 64, offset: 192)
!2442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2443, size: 64)
!2443 = !DISubroutineType(types: !2444)
!2444 = !{!7}
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2433, file: !422, line: 133, baseType: !2446, size: 64, offset: 256)
!2446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2433, size: 64)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2433, file: !422, line: 136, baseType: !2446, size: 64, offset: 320)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2433, file: !422, line: 139, baseType: !962, size: 32, offset: 384)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2433, file: !422, line: 143, baseType: !2450, size: 32, offset: 416)
!2450 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !429, line: 80, baseType: !428)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2433, file: !422, line: 146, baseType: !7, size: 32, offset: 448)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2433, file: !422, line: 147, baseType: !7, size: 32, offset: 480)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2433, file: !422, line: 148, baseType: !7, size: 32, offset: 512)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2433, file: !422, line: 151, baseType: !7, size: 32, offset: 544)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2433, file: !422, line: 152, baseType: !7, size: 32, offset: 576)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !2430, file: !422, line: 179, baseType: !2457, size: 64, offset: 640)
!2457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2458, size: 64)
!2458 = !DISubroutineType(types: !2459)
!2459 = !{null}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !2430, file: !422, line: 182, baseType: !2461, size: 64, offset: 704)
!2461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2462, size: 64)
!2462 = !DISubroutineType(types: !2463)
!2463 = !{null, !2464}
!2464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2465, size: 64)
!2465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !399, line: 276, size: 192, elements: !2466)
!2466 = !{!2467, !2468, !2474}
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !2465, file: !399, line: 278, baseType: !945, size: 64)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !2465, file: !399, line: 279, baseType: !2469, size: 64, offset: 64)
!2469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2470, size: 64)
!2470 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !399, line: 272, baseType: !2471)
!2471 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !399, line: 272, size: 128, elements: !2472)
!2472 = !{!2473}
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2471, file: !399, line: 272, baseType: !2365, size: 128)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2465, file: !399, line: 280, baseType: !968, size: 64, offset: 128)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !2430, file: !422, line: 187, baseType: !2457, size: 64, offset: 768)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !2430, file: !422, line: 188, baseType: !2477, size: 64, offset: 832)
!2477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2478, size: 64)
!2478 = !DISubroutineType(types: !2479)
!2479 = !{null, !2373}
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !2430, file: !422, line: 191, baseType: !2481, size: 64, offset: 896)
!2481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2482, size: 64)
!2482 = !DISubroutineType(types: !2483)
!2483 = !{null, !2373, !2484}
!2484 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1340, size: 64)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !2430, file: !422, line: 195, baseType: !7, size: 32, offset: 960)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !2430, file: !422, line: 196, baseType: !2487, size: 64, offset: 1024)
!2487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2488, size: 64)
!2488 = !DISubroutineType(types: !2489)
!2489 = !{!7, !2373}
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !2430, file: !422, line: 197, baseType: !2491, size: 64, offset: 1088)
!2491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2492, size: 64)
!2492 = !DISubroutineType(types: !2493)
!2493 = !{null, !2494}
!2494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2495, size: 64)
!2495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !399, line: 358, size: 320, elements: !2496)
!2496 = !{!2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508}
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2495, file: !399, line: 359, baseType: !1012, size: 64)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2495, file: !399, line: 361, baseType: !2494, size: 64, offset: 64)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2495, file: !399, line: 363, baseType: !2494, size: 64, offset: 128)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !2495, file: !399, line: 366, baseType: !2494, size: 64, offset: 192)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2495, file: !399, line: 368, baseType: !962, size: 32, offset: 256)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2495, file: !399, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !2495, file: !399, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2495, file: !399, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2495, file: !399, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !2495, file: !399, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2495, file: !399, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2495, file: !399, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2374, file: !399, line: 216, baseType: !2510, size: 320, offset: 1152)
!2510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !399, line: 88, size: 320, elements: !2511)
!2511 = !{!2512, !2534, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549}
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !2510, file: !399, line: 90, baseType: !2513, size: 64)
!2513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2514, size: 64)
!2514 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !6, line: 540, size: 512, elements: !2515)
!2515 = !{!2516, !2527, !2528, !2529, !2530, !2531, !2532, !2533}
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "current_decl_state", scope: !2514, file: !6, line: 543, baseType: !2517, size: 64)
!2517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2518, size: 64)
!2518 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_in_decl_state", file: !6, line: 502, size: 960, elements: !2519)
!2519 = !{!2520, !2526}
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "streams", scope: !2518, file: !6, line: 505, baseType: !2521, size: 896)
!2521 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2522, size: 896, elements: !2351)
!2522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_tree_ref_table", file: !6, line: 473, size: 128, elements: !2523)
!2523 = !{!2524, !2525}
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "trees", scope: !2522, file: !6, line: 476, baseType: !1375, size: 64)
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2522, file: !6, line: 479, baseType: !7, size: 32, offset: 64)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "fn_decl", scope: !2518, file: !6, line: 509, baseType: !1012, size: 64, offset: 896)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "global_decl_state", scope: !2514, file: !6, line: 547, baseType: !2517, size: 64, offset: 64)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "cgraph_node_encoder", scope: !2514, file: !6, line: 550, baseType: !2354, size: 64, offset: 128)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl_states", scope: !2514, file: !6, line: 553, baseType: !945, size: 64, offset: 192)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "file_name", scope: !2514, file: !6, line: 556, baseType: !1214, size: 64, offset: 256)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "needs_ltrans_p", scope: !2514, file: !6, line: 559, baseType: !7, size: 1, offset: 320, flags: DIFlagBitField, extraData: i64 320)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "section_hash_table", scope: !2514, file: !6, line: 562, baseType: !945, size: 64, offset: 384)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "renaming_hash_table", scope: !2514, file: !6, line: 565, baseType: !945, size: 64, offset: 448)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !2510, file: !399, line: 92, baseType: !2535, size: 192, offset: 64)
!2535 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !399, line: 57, size: 192, elements: !2536)
!2536 = !{!2537, !2538, !2539, !2540, !2541}
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !2535, file: !399, line: 60, baseType: !1067, size: 64)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !2535, file: !399, line: 63, baseType: !962, size: 32, offset: 64)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !2535, file: !399, line: 65, baseType: !962, size: 32, offset: 96)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !2535, file: !399, line: 67, baseType: !962, size: 32, offset: 128)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !2535, file: !399, line: 69, baseType: !962, size: 32, offset: 160)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2510, file: !399, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2510, file: !399, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2510, file: !399, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !2510, file: !399, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2510, file: !399, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !2510, file: !399, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !2510, file: !399, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !2510, file: !399, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !2374, file: !399, line: 217, baseType: !2551, size: 320, offset: 1472)
!2551 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !399, line: 126, size: 320, elements: !2552)
!2552 = !{!2553, !2554, !2555, !2556, !2557, !2558, !2559}
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !2551, file: !399, line: 128, baseType: !1067, size: 64)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !2551, file: !399, line: 130, baseType: !1067, size: 64, offset: 64)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !2551, file: !399, line: 134, baseType: !2373, size: 64, offset: 128)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !2551, file: !399, line: 137, baseType: !962, size: 32, offset: 192)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2551, file: !399, line: 138, baseType: !962, size: 32, offset: 224)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !2551, file: !399, line: 141, baseType: !962, size: 32, offset: 256)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !2551, file: !399, line: 144, baseType: !1130, size: 8, offset: 288)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2374, file: !399, line: 218, baseType: !2561, size: 32, offset: 1792)
!2561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !399, line: 150, size: 32, elements: !2562)
!2562 = !{!2563}
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !2561, file: !399, line: 151, baseType: !7, size: 32)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !2374, file: !399, line: 219, baseType: !2565, size: 192, offset: 1856)
!2565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !399, line: 171, size: 192, elements: !2566)
!2566 = !{!2567, !2588, !2589}
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !2565, file: !399, line: 173, baseType: !2568, size: 64)
!2568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2569, size: 64)
!2569 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !399, line: 169, baseType: !2570)
!2570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !399, line: 169, size: 128, elements: !2571)
!2571 = !{!2572}
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2570, file: !399, line: 169, baseType: !2573, size: 128)
!2573 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !399, line: 168, baseType: !2574)
!2574 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !399, line: 168, size: 128, elements: !2575)
!2575 = !{!2576, !2577, !2578}
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2574, file: !399, line: 168, baseType: !7, size: 32)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2574, file: !399, line: 168, baseType: !7, size: 32, offset: 32)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2574, file: !399, line: 168, baseType: !2579, size: 64, offset: 64)
!2579 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2580, size: 64, elements: !1111)
!2580 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !399, line: 167, baseType: !2581)
!2581 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2582, size: 64)
!2582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !399, line: 156, size: 192, elements: !2583)
!2583 = !{!2584, !2585, !2586, !2587}
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !2582, file: !399, line: 159, baseType: !1012, size: 64)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !2582, file: !399, line: 161, baseType: !1012, size: 64, offset: 64)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !2582, file: !399, line: 163, baseType: !1130, size: 8, offset: 128)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !2582, file: !399, line: 165, baseType: !1130, size: 8, offset: 136)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !2565, file: !399, line: 174, baseType: !1898, size: 64, offset: 64)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !2565, file: !399, line: 175, baseType: !1898, size: 64, offset: 128)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !2374, file: !399, line: 220, baseType: !2591, size: 256, offset: 2048)
!2591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !399, line: 74, size: 256, elements: !2592)
!2592 = !{!2593, !2594, !2595, !2596, !2597, !2598}
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !2591, file: !399, line: 76, baseType: !1067, size: 64)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !2591, file: !399, line: 77, baseType: !1067, size: 64, offset: 64)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2591, file: !399, line: 78, baseType: !1012, size: 64, offset: 128)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !2591, file: !399, line: 79, baseType: !1130, size: 8, offset: 192)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !2591, file: !399, line: 80, baseType: !1130, size: 8, offset: 200)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !2591, file: !399, line: 82, baseType: !1130, size: 8, offset: 208)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2374, file: !399, line: 223, baseType: !1549, size: 64, offset: 2304)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2374, file: !399, line: 225, baseType: !962, size: 32, offset: 2368)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2374, file: !399, line: 227, baseType: !962, size: 32, offset: 2400)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !2374, file: !399, line: 231, baseType: !962, size: 32, offset: 2432)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2374, file: !399, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !2374, file: !399, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !2374, file: !399, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !2374, file: !399, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !2374, file: !399, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2374, file: !399, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !2374, file: !399, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2374, file: !399, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !2374, file: !399, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !2374, file: !399, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "fn_decl", scope: !938, file: !6, line: 528, baseType: !1012, size: 64, offset: 1408)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "main_stream", scope: !933, file: !6, line: 631, baseType: !2615, size: 64, offset: 128)
!2615 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2616, size: 64)
!2616 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_output_stream", file: !6, line: 577, size: 320, elements: !2617)
!2617 = !{!2618, !2623, !2624, !2625, !2626, !2627}
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "first_block", scope: !2616, file: !6, line: 580, baseType: !2619, size: 64)
!2619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2620, size: 64)
!2620 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_char_ptr_base", file: !6, line: 568, size: 64, elements: !2621)
!2621 = !{!2622}
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2620, file: !6, line: 570, baseType: !1279, size: 64)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "current_block", scope: !2616, file: !6, line: 583, baseType: !2619, size: 64, offset: 64)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "current_pointer", scope: !2616, file: !6, line: 586, baseType: !1279, size: 64, offset: 128)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "left_in_block", scope: !2616, file: !6, line: 589, baseType: !7, size: 32, offset: 192)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !2616, file: !6, line: 592, baseType: !7, size: 32, offset: 224)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "total_size", scope: !2616, file: !6, line: 595, baseType: !7, size: 32, offset: 256)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "string_stream", scope: !933, file: !6, line: 634, baseType: !2615, size: 64, offset: 192)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "cfg_stream", scope: !933, file: !6, line: 637, baseType: !2615, size: 64, offset: 256)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "string_hash_table", scope: !933, file: !6, line: 641, baseType: !945, size: 64, offset: 320)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "cgraph_node", scope: !933, file: !6, line: 645, baseType: !2373, size: 64, offset: 384)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "current_file", scope: !933, file: !6, line: 650, baseType: !1214, size: 64, offset: 448)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "current_line", scope: !933, file: !6, line: 651, baseType: !962, size: 32, offset: 512)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "current_col", scope: !933, file: !6, line: 652, baseType: !962, size: 32, offset: 544)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !933, file: !6, line: 655, baseType: !1130, size: 8, offset: 576)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "writer_cache", scope: !933, file: !6, line: 658, baseType: !2637, size: 64, offset: 640)
!2637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2638, size: 64)
!2638 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_streamer_cache_d", file: !6, line: 346, size: 256, elements: !2639)
!2639 = !{!2640, !2641, !2642, !2643}
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "node_map", scope: !2638, file: !6, line: 349, baseType: !945, size: 64)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "next_slot", scope: !2638, file: !6, line: 352, baseType: !7, size: 32, offset: 64)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !2638, file: !6, line: 355, baseType: !1811, size: 64, offset: 128)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "offsets", scope: !2638, file: !6, line: 358, baseType: !2644, size: 64, offset: 192)
!2644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2645, size: 64)
!2645 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_unsigned_heap", file: !1823, line: 35, baseType: !2646)
!2646 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_unsigned_heap", file: !1823, line: 35, size: 96, elements: !2647)
!2647 = !{!2648}
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2646, file: !1823, line: 35, baseType: !2649, size: 96)
!2649 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_unsigned_base", file: !1823, line: 34, baseType: !2650)
!2650 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_unsigned_base", file: !1823, line: 34, size: 96, elements: !2651)
!2651 = !{!2652, !2653, !2654}
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2650, file: !1823, line: 34, baseType: !7, size: 32)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2650, file: !1823, line: 34, baseType: !7, size: 32, offset: 32)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2650, file: !1823, line: 34, baseType: !2655, size: 32, offset: 64)
!2655 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 32, elements: !1111)
!2656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2657, size: 64)
!2657 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2658)
!2658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "string_slot", file: !3, line: 48, size: 128, elements: !2659)
!2659 = !{!2660, !2661, !2662}
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "s", scope: !2658, file: !3, line: 50, baseType: !1214, size: 64)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2658, file: !3, line: 51, baseType: !962, size: 32, offset: 64)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "slot_num", scope: !2658, file: !3, line: 52, baseType: !7, size: 32, offset: 96)
!2663 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2658, size: 64)
!2664 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitpack_word_t", file: !6, line: 152, baseType: !974)
!2665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2663, size: 64)
!2666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2667, size: 64)
!2667 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1342)
!2668 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !2669, line: 27, baseType: !2670)
!2669 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!2670 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint64_t", file: !2671, line: 45, baseType: !974)
!2671 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2672 = !{!0, !2673}
!2673 = !DIGlobalVariableExpression(var: !2674, expr: !DIExpression())
!2674 = distinct !DIGlobalVariable(name: "pass_ipa_lto_finish_out", scope: !2, file: !3, line: 2548, type: !2430, isLocal: false, isDefinition: true)
!2675 = !{i32 7, !"Dwarf Version", i32 4}
!2676 = !{i32 2, !"Debug Info Version", i32 3}
!2677 = !{i32 1, !"wchar_size", i32 4}
!2678 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2679 = distinct !DISubprogram(name: "create_output_block", scope: !3, file: !3, line: 113, type: !2680, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2680 = !DISubroutineType(types: !2681)
!2681 = !{!932, !5}
!2682 = !{}
!2683 = !DILocalVariable(name: "section_type", arg: 1, scope: !2679, file: !3, line: 113, type: !5)
!2684 = !DILocation(line: 113, column: 44, scope: !2679)
!2685 = !DILocalVariable(name: "ob", scope: !2679, file: !3, line: 115, type: !932)
!2686 = !DILocation(line: 115, column: 24, scope: !2679)
!2687 = !DILocation(line: 115, column: 29, scope: !2679)
!2688 = !DILocation(line: 117, column: 22, scope: !2679)
!2689 = !DILocation(line: 117, column: 3, scope: !2679)
!2690 = !DILocation(line: 117, column: 7, scope: !2679)
!2691 = !DILocation(line: 117, column: 20, scope: !2679)
!2692 = !DILocation(line: 118, column: 20, scope: !2679)
!2693 = !DILocation(line: 118, column: 3, scope: !2679)
!2694 = !DILocation(line: 118, column: 7, scope: !2679)
!2695 = !DILocation(line: 118, column: 18, scope: !2679)
!2696 = !DILocation(line: 119, column: 21, scope: !2679)
!2697 = !DILocation(line: 119, column: 3, scope: !2679)
!2698 = !DILocation(line: 119, column: 7, scope: !2679)
!2699 = !DILocation(line: 119, column: 19, scope: !2679)
!2700 = !DILocation(line: 120, column: 23, scope: !2679)
!2701 = !DILocation(line: 120, column: 3, scope: !2679)
!2702 = !DILocation(line: 120, column: 7, scope: !2679)
!2703 = !DILocation(line: 120, column: 21, scope: !2679)
!2704 = !DILocation(line: 121, column: 22, scope: !2679)
!2705 = !DILocation(line: 121, column: 3, scope: !2679)
!2706 = !DILocation(line: 121, column: 7, scope: !2679)
!2707 = !DILocation(line: 121, column: 20, scope: !2679)
!2708 = !DILocation(line: 123, column: 7, scope: !2709)
!2709 = distinct !DILexicalBlock(scope: !2679, file: !3, line: 123, column: 7)
!2710 = !DILocation(line: 123, column: 20, scope: !2709)
!2711 = !DILocation(line: 123, column: 7, scope: !2679)
!2712 = !DILocation(line: 124, column: 22, scope: !2709)
!2713 = !DILocation(line: 124, column: 5, scope: !2709)
!2714 = !DILocation(line: 124, column: 9, scope: !2709)
!2715 = !DILocation(line: 124, column: 20, scope: !2709)
!2716 = !DILocation(line: 126, column: 20, scope: !2679)
!2717 = !DILocation(line: 126, column: 3, scope: !2679)
!2718 = !DILocation(line: 128, column: 27, scope: !2679)
!2719 = !DILocation(line: 128, column: 3, scope: !2679)
!2720 = !DILocation(line: 128, column: 7, scope: !2679)
!2721 = !DILocation(line: 128, column: 25, scope: !2679)
!2722 = !DILocation(line: 131, column: 10, scope: !2679)
!2723 = !DILocation(line: 131, column: 3, scope: !2679)
!2724 = distinct !DISubprogram(name: "clear_line_info", scope: !3, file: !3, line: 101, type: !2725, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2725 = !DISubroutineType(types: !2726)
!2726 = !{null, !932}
!2727 = !DILocalVariable(name: "ob", arg: 1, scope: !2724, file: !3, line: 101, type: !932)
!2728 = !DILocation(line: 101, column: 39, scope: !2724)
!2729 = !DILocation(line: 103, column: 3, scope: !2724)
!2730 = !DILocation(line: 103, column: 7, scope: !2724)
!2731 = !DILocation(line: 103, column: 20, scope: !2724)
!2732 = !DILocation(line: 104, column: 3, scope: !2724)
!2733 = !DILocation(line: 104, column: 7, scope: !2724)
!2734 = !DILocation(line: 104, column: 20, scope: !2724)
!2735 = !DILocation(line: 105, column: 3, scope: !2724)
!2736 = !DILocation(line: 105, column: 7, scope: !2724)
!2737 = !DILocation(line: 105, column: 19, scope: !2724)
!2738 = !DILocation(line: 106, column: 1, scope: !2724)
!2739 = distinct !DISubprogram(name: "hash_string_slot_node", scope: !3, file: !3, line: 59, type: !952, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2740 = !DILocalVariable(name: "p", arg: 1, scope: !2739, file: !3, line: 59, type: !955)
!2741 = !DILocation(line: 59, column: 36, scope: !2739)
!2742 = !DILocalVariable(name: "ds", scope: !2739, file: !3, line: 61, type: !2656)
!2743 = !DILocation(line: 61, column: 29, scope: !2739)
!2744 = !DILocation(line: 61, column: 63, scope: !2739)
!2745 = !DILocation(line: 61, column: 34, scope: !2739)
!2746 = !DILocation(line: 62, column: 40, scope: !2739)
!2747 = !DILocation(line: 62, column: 44, scope: !2739)
!2748 = !DILocation(line: 62, column: 22, scope: !2739)
!2749 = !DILocation(line: 62, column: 3, scope: !2739)
!2750 = distinct !DISubprogram(name: "eq_string_slot_node", scope: !3, file: !3, line: 69, type: !960, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2751 = !DILocalVariable(name: "p1", arg: 1, scope: !2750, file: !3, line: 69, type: !955)
!2752 = !DILocation(line: 69, column: 34, scope: !2750)
!2753 = !DILocalVariable(name: "p2", arg: 2, scope: !2750, file: !3, line: 69, type: !955)
!2754 = !DILocation(line: 69, column: 50, scope: !2750)
!2755 = !DILocalVariable(name: "ds1", scope: !2750, file: !3, line: 71, type: !2656)
!2756 = !DILocation(line: 71, column: 29, scope: !2750)
!2757 = !DILocation(line: 71, column: 64, scope: !2750)
!2758 = !DILocation(line: 71, column: 35, scope: !2750)
!2759 = !DILocalVariable(name: "ds2", scope: !2750, file: !3, line: 72, type: !2656)
!2760 = !DILocation(line: 72, column: 29, scope: !2750)
!2761 = !DILocation(line: 72, column: 64, scope: !2750)
!2762 = !DILocation(line: 72, column: 35, scope: !2750)
!2763 = !DILocation(line: 74, column: 7, scope: !2764)
!2764 = distinct !DILexicalBlock(scope: !2750, file: !3, line: 74, column: 7)
!2765 = !DILocation(line: 74, column: 12, scope: !2764)
!2766 = !DILocation(line: 74, column: 19, scope: !2764)
!2767 = !DILocation(line: 74, column: 24, scope: !2764)
!2768 = !DILocation(line: 74, column: 16, scope: !2764)
!2769 = !DILocation(line: 74, column: 7, scope: !2750)
!2770 = !DILocalVariable(name: "i", scope: !2771, file: !3, line: 76, type: !962)
!2771 = distinct !DILexicalBlock(scope: !2764, file: !3, line: 75, column: 5)
!2772 = !DILocation(line: 76, column: 11, scope: !2771)
!2773 = !DILocation(line: 77, column: 14, scope: !2774)
!2774 = distinct !DILexicalBlock(scope: !2771, file: !3, line: 77, column: 7)
!2775 = !DILocation(line: 77, column: 12, scope: !2774)
!2776 = !DILocation(line: 77, column: 19, scope: !2777)
!2777 = distinct !DILexicalBlock(scope: !2774, file: !3, line: 77, column: 7)
!2778 = !DILocation(line: 77, column: 23, scope: !2777)
!2779 = !DILocation(line: 77, column: 28, scope: !2777)
!2780 = !DILocation(line: 77, column: 21, scope: !2777)
!2781 = !DILocation(line: 77, column: 7, scope: !2774)
!2782 = !DILocation(line: 78, column: 6, scope: !2783)
!2783 = distinct !DILexicalBlock(scope: !2777, file: !3, line: 78, column: 6)
!2784 = !DILocation(line: 78, column: 11, scope: !2783)
!2785 = !DILocation(line: 78, column: 13, scope: !2783)
!2786 = !DILocation(line: 78, column: 19, scope: !2783)
!2787 = !DILocation(line: 78, column: 24, scope: !2783)
!2788 = !DILocation(line: 78, column: 26, scope: !2783)
!2789 = !DILocation(line: 78, column: 16, scope: !2783)
!2790 = !DILocation(line: 78, column: 6, scope: !2777)
!2791 = !DILocation(line: 79, column: 4, scope: !2783)
!2792 = !DILocation(line: 78, column: 27, scope: !2783)
!2793 = !DILocation(line: 77, column: 34, scope: !2777)
!2794 = !DILocation(line: 77, column: 7, scope: !2777)
!2795 = distinct !{!2795, !2781, !2796}
!2796 = !DILocation(line: 79, column: 11, scope: !2774)
!2797 = !DILocation(line: 80, column: 7, scope: !2771)
!2798 = !DILocation(line: 83, column: 3, scope: !2750)
!2799 = !DILocation(line: 84, column: 1, scope: !2750)
!2800 = distinct !DISubprogram(name: "string_slot_free", scope: !3, file: !3, line: 90, type: !966, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2801 = !DILocalVariable(name: "p", arg: 1, scope: !2800, file: !3, line: 90, type: !968)
!2802 = !DILocation(line: 90, column: 25, scope: !2800)
!2803 = !DILocalVariable(name: "slot", scope: !2800, file: !3, line: 92, type: !2663)
!2804 = !DILocation(line: 92, column: 23, scope: !2800)
!2805 = !DILocation(line: 92, column: 53, scope: !2800)
!2806 = !DILocation(line: 92, column: 30, scope: !2800)
!2807 = !DILocation(line: 93, column: 9, scope: !2800)
!2808 = !DILocation(line: 93, column: 3, scope: !2800)
!2809 = !DILocation(line: 94, column: 9, scope: !2800)
!2810 = !DILocation(line: 94, column: 3, scope: !2800)
!2811 = !DILocation(line: 95, column: 1, scope: !2800)
!2812 = distinct !DISubprogram(name: "destroy_output_block", scope: !3, file: !3, line: 138, type: !2725, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2813 = !DILocalVariable(name: "ob", arg: 1, scope: !2812, file: !3, line: 138, type: !932)
!2814 = !DILocation(line: 138, column: 44, scope: !2812)
!2815 = !DILocalVariable(name: "section_type", scope: !2812, file: !3, line: 140, type: !5)
!2816 = !DILocation(line: 140, column: 25, scope: !2812)
!2817 = !DILocation(line: 140, column: 40, scope: !2812)
!2818 = !DILocation(line: 140, column: 44, scope: !2812)
!2819 = !DILocation(line: 142, column: 16, scope: !2812)
!2820 = !DILocation(line: 142, column: 20, scope: !2812)
!2821 = !DILocation(line: 142, column: 3, scope: !2812)
!2822 = !DILocation(line: 144, column: 9, scope: !2812)
!2823 = !DILocation(line: 144, column: 13, scope: !2812)
!2824 = !DILocation(line: 144, column: 3, scope: !2812)
!2825 = !DILocation(line: 145, column: 9, scope: !2812)
!2826 = !DILocation(line: 145, column: 13, scope: !2812)
!2827 = !DILocation(line: 145, column: 3, scope: !2812)
!2828 = !DILocation(line: 146, column: 7, scope: !2829)
!2829 = distinct !DILexicalBlock(scope: !2812, file: !3, line: 146, column: 7)
!2830 = !DILocation(line: 146, column: 20, scope: !2829)
!2831 = !DILocation(line: 146, column: 7, scope: !2812)
!2832 = !DILocation(line: 147, column: 11, scope: !2829)
!2833 = !DILocation(line: 147, column: 15, scope: !2829)
!2834 = !DILocation(line: 147, column: 5, scope: !2829)
!2835 = !DILocation(line: 149, column: 30, scope: !2812)
!2836 = !DILocation(line: 149, column: 34, scope: !2812)
!2837 = !DILocation(line: 149, column: 3, scope: !2812)
!2838 = !DILocation(line: 151, column: 9, scope: !2812)
!2839 = !DILocation(line: 151, column: 3, scope: !2812)
!2840 = !DILocation(line: 152, column: 1, scope: !2812)
!2841 = distinct !DISubprogram(name: "lto_output_bitpack", scope: !3, file: !3, line: 158, type: !2842, scopeLine: 159, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2842 = !DISubroutineType(types: !2843)
!2843 = !{null, !2615, !2844}
!2844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2845, size: 64)
!2845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitpack_d", file: !6, line: 156, size: 192, elements: !2846)
!2846 = !{!2847, !2848, !2849}
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "num_bits", scope: !2845, file: !6, line: 159, baseType: !972, size: 64)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "first_unused_bit", scope: !2845, file: !6, line: 165, baseType: !972, size: 64, offset: 64)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2845, file: !6, line: 168, baseType: !2850, size: 64, offset: 128)
!2850 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2851, size: 64)
!2851 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitpack_word_t_heap", file: !6, line: 154, baseType: !2852)
!2852 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitpack_word_t_heap", file: !6, line: 154, size: 128, elements: !2853)
!2853 = !{!2854}
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2852, file: !6, line: 154, baseType: !2855, size: 128)
!2855 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitpack_word_t_base", file: !6, line: 153, baseType: !2856)
!2856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitpack_word_t_base", file: !6, line: 153, size: 128, elements: !2857)
!2857 = !{!2858, !2859, !2860}
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2856, file: !6, line: 153, baseType: !7, size: 32)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2856, file: !6, line: 153, baseType: !7, size: 32, offset: 32)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2856, file: !6, line: 153, baseType: !2861, size: 64, offset: 64)
!2861 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2664, size: 64, elements: !1111)
!2862 = !DILocalVariable(name: "s", arg: 1, scope: !2841, file: !3, line: 158, type: !2615)
!2863 = !DILocation(line: 158, column: 47, scope: !2841)
!2864 = !DILocalVariable(name: "bp", arg: 2, scope: !2841, file: !3, line: 158, type: !2844)
!2865 = !DILocation(line: 158, column: 68, scope: !2841)
!2866 = !DILocalVariable(name: "i", scope: !2841, file: !3, line: 160, type: !7)
!2867 = !DILocation(line: 160, column: 12, scope: !2841)
!2868 = !DILocalVariable(name: "v", scope: !2841, file: !3, line: 161, type: !2664)
!2869 = !DILocation(line: 161, column: 18, scope: !2841)
!2870 = !DILocation(line: 163, column: 30, scope: !2841)
!2871 = !DILocation(line: 163, column: 33, scope: !2841)
!2872 = !DILocation(line: 163, column: 3, scope: !2841)
!2873 = !DILocation(line: 164, column: 10, scope: !2874)
!2874 = distinct !DILexicalBlock(scope: !2841, file: !3, line: 164, column: 3)
!2875 = !DILocation(line: 164, column: 8, scope: !2874)
!2876 = !DILocation(line: 164, column: 15, scope: !2877)
!2877 = distinct !DILexicalBlock(scope: !2874, file: !3, line: 164, column: 3)
!2878 = !DILocation(line: 164, column: 3, scope: !2874)
!2879 = !DILocation(line: 165, column: 32, scope: !2877)
!2880 = !DILocation(line: 165, column: 35, scope: !2877)
!2881 = !DILocation(line: 165, column: 5, scope: !2877)
!2882 = !DILocation(line: 164, column: 64, scope: !2877)
!2883 = !DILocation(line: 164, column: 3, scope: !2877)
!2884 = distinct !{!2884, !2878, !2885}
!2885 = !DILocation(line: 165, column: 36, scope: !2874)
!2886 = !DILocation(line: 166, column: 1, scope: !2841)
!2887 = distinct !DISubprogram(name: "VEC_bitpack_word_t_base_length", scope: !6, file: !6, line: 153, type: !2888, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2888 = !DISubroutineType(types: !2889)
!2889 = !{!7, !2890}
!2890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2891, size: 64)
!2891 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2855)
!2892 = !DILocalVariable(name: "vec_", arg: 1, scope: !2887, file: !6, line: 153, type: !2890)
!2893 = !DILocation(line: 153, column: 1, scope: !2887)
!2894 = distinct !DISubprogram(name: "VEC_bitpack_word_t_base_iterate", scope: !6, file: !6, line: 153, type: !2895, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2895 = !DISubroutineType(types: !2896)
!2896 = !{!962, !2890, !7, !2897}
!2897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2664, size: 64)
!2898 = !DILocalVariable(name: "vec_", arg: 1, scope: !2894, file: !6, line: 153, type: !2890)
!2899 = !DILocation(line: 153, column: 1, scope: !2894)
!2900 = !DILocalVariable(name: "ix_", arg: 2, scope: !2894, file: !6, line: 153, type: !7)
!2901 = !DILocalVariable(name: "ptr", arg: 3, scope: !2894, file: !6, line: 153, type: !2897)
!2902 = !DILocation(line: 153, column: 1, scope: !2903)
!2903 = distinct !DILexicalBlock(scope: !2894, file: !6, line: 153, column: 1)
!2904 = !DILocation(line: 153, column: 1, scope: !2905)
!2905 = distinct !DILexicalBlock(scope: !2903, file: !6, line: 153, column: 1)
!2906 = !DILocation(line: 153, column: 1, scope: !2907)
!2907 = distinct !DILexicalBlock(scope: !2903, file: !6, line: 153, column: 1)
!2908 = distinct !DISubprogram(name: "lto_output_tree", scope: !3, file: !3, line: 1317, type: !2909, scopeLine: 1318, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2909 = !DISubroutineType(types: !2910)
!2910 = !{null, !932, !1012, !1130}
!2911 = !DILocalVariable(name: "ob", arg: 1, scope: !2908, file: !3, line: 1317, type: !932)
!2912 = !DILocation(line: 1317, column: 39, scope: !2908)
!2913 = !DILocalVariable(name: "expr", arg: 2, scope: !2908, file: !3, line: 1317, type: !1012)
!2914 = !DILocation(line: 1317, column: 48, scope: !2908)
!2915 = !DILocalVariable(name: "ref_p", arg: 3, scope: !2908, file: !3, line: 1317, type: !1130)
!2916 = !DILocation(line: 1317, column: 59, scope: !2908)
!2917 = !DILocalVariable(name: "ix", scope: !2908, file: !3, line: 1319, type: !962)
!2918 = !DILocation(line: 1319, column: 7, scope: !2908)
!2919 = !DILocalVariable(name: "existed_p", scope: !2908, file: !3, line: 1320, type: !1130)
!2920 = !DILocation(line: 1320, column: 8, scope: !2908)
!2921 = !DILocalVariable(name: "offset", scope: !2908, file: !3, line: 1321, type: !7)
!2922 = !DILocation(line: 1321, column: 12, scope: !2908)
!2923 = !DILocation(line: 1323, column: 7, scope: !2924)
!2924 = distinct !DILexicalBlock(scope: !2908, file: !3, line: 1323, column: 7)
!2925 = !DILocation(line: 1323, column: 12, scope: !2924)
!2926 = !DILocation(line: 1323, column: 7, scope: !2908)
!2927 = !DILocation(line: 1325, column: 20, scope: !2928)
!2928 = distinct !DILexicalBlock(scope: !2924, file: !3, line: 1324, column: 5)
!2929 = !DILocation(line: 1325, column: 7, scope: !2928)
!2930 = !DILocation(line: 1326, column: 7, scope: !2928)
!2931 = !DILocation(line: 1331, column: 7, scope: !2932)
!2932 = distinct !DILexicalBlock(scope: !2908, file: !3, line: 1331, column: 7)
!2933 = !DILocation(line: 1331, column: 24, scope: !2932)
!2934 = !DILocation(line: 1331, column: 7, scope: !2908)
!2935 = !DILocation(line: 1333, column: 31, scope: !2936)
!2936 = distinct !DILexicalBlock(scope: !2932, file: !3, line: 1332, column: 5)
!2937 = !DILocation(line: 1333, column: 35, scope: !2936)
!2938 = !DILocation(line: 1333, column: 41, scope: !2936)
!2939 = !DILocation(line: 1333, column: 7, scope: !2936)
!2940 = !DILocation(line: 1334, column: 7, scope: !2936)
!2941 = !DILocation(line: 1341, column: 12, scope: !2908)
!2942 = !DILocation(line: 1341, column: 16, scope: !2908)
!2943 = !DILocation(line: 1341, column: 29, scope: !2908)
!2944 = !DILocation(line: 1341, column: 10, scope: !2908)
!2945 = !DILocation(line: 1343, column: 42, scope: !2908)
!2946 = !DILocation(line: 1343, column: 46, scope: !2908)
!2947 = !DILocation(line: 1343, column: 60, scope: !2908)
!2948 = !DILocation(line: 1343, column: 15, scope: !2908)
!2949 = !DILocation(line: 1343, column: 13, scope: !2908)
!2950 = !DILocation(line: 1344, column: 7, scope: !2951)
!2951 = distinct !DILexicalBlock(scope: !2908, file: !3, line: 1344, column: 7)
!2952 = !DILocation(line: 1344, column: 7, scope: !2908)
!2953 = !DILocation(line: 1349, column: 28, scope: !2954)
!2954 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 1345, column: 5)
!2955 = !DILocation(line: 1349, column: 7, scope: !2954)
!2956 = !DILocation(line: 1350, column: 23, scope: !2954)
!2957 = !DILocation(line: 1350, column: 27, scope: !2954)
!2958 = !DILocation(line: 1350, column: 7, scope: !2954)
!2959 = !DILocation(line: 1351, column: 23, scope: !2954)
!2960 = !DILocation(line: 1351, column: 49, scope: !2954)
!2961 = !DILocation(line: 1351, column: 27, scope: !2954)
!2962 = !DILocation(line: 1351, column: 7, scope: !2954)
!2963 = !DILocation(line: 1352, column: 23, scope: !2954)
!2964 = !DILocation(line: 1352, column: 27, scope: !2954)
!2965 = !DILocation(line: 1352, column: 7, scope: !2954)
!2966 = !DILocation(line: 1353, column: 5, scope: !2954)
!2967 = !DILocation(line: 1354, column: 37, scope: !2968)
!2968 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 1354, column: 12)
!2969 = !DILocation(line: 1354, column: 12, scope: !2968)
!2970 = !DILocation(line: 1354, column: 12, scope: !2951)
!2971 = !DILocation(line: 1361, column: 32, scope: !2972)
!2972 = distinct !DILexicalBlock(scope: !2968, file: !3, line: 1355, column: 5)
!2973 = !DILocation(line: 1361, column: 36, scope: !2972)
!2974 = !DILocation(line: 1361, column: 42, scope: !2972)
!2975 = !DILocation(line: 1361, column: 7, scope: !2972)
!2976 = !DILocation(line: 1362, column: 5, scope: !2972)
!2977 = !DILocation(line: 1367, column: 23, scope: !2978)
!2978 = distinct !DILexicalBlock(scope: !2968, file: !3, line: 1364, column: 5)
!2979 = !DILocation(line: 1367, column: 27, scope: !2978)
!2980 = !DILocation(line: 1367, column: 33, scope: !2978)
!2981 = !DILocation(line: 1367, column: 40, scope: !2978)
!2982 = !DILocation(line: 1367, column: 7, scope: !2978)
!2983 = !DILocation(line: 1369, column: 1, scope: !2908)
!2984 = distinct !DISubprogram(name: "output_zero", scope: !3, file: !3, line: 276, type: !2725, scopeLine: 277, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2985 = !DILocalVariable(name: "ob", arg: 1, scope: !2984, file: !3, line: 276, type: !932)
!2986 = !DILocation(line: 276, column: 35, scope: !2984)
!2987 = !DILocation(line: 278, column: 24, scope: !2984)
!2988 = !DILocation(line: 278, column: 28, scope: !2984)
!2989 = !DILocation(line: 278, column: 3, scope: !2984)
!2990 = !DILocation(line: 279, column: 1, scope: !2984)
!2991 = distinct !DISubprogram(name: "lto_output_integer_cst", scope: !3, file: !3, line: 1302, type: !2909, scopeLine: 1303, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!2992 = !DILocalVariable(name: "ob", arg: 1, scope: !2991, file: !3, line: 1302, type: !932)
!2993 = !DILocation(line: 1302, column: 46, scope: !2991)
!2994 = !DILocalVariable(name: "cst", arg: 2, scope: !2991, file: !3, line: 1302, type: !1012)
!2995 = !DILocation(line: 1302, column: 55, scope: !2991)
!2996 = !DILocalVariable(name: "ref_p", arg: 3, scope: !2991, file: !3, line: 1302, type: !1130)
!2997 = !DILocation(line: 1302, column: 65, scope: !2991)
!2998 = !DILocation(line: 1304, column: 24, scope: !2991)
!2999 = !DILocation(line: 1304, column: 28, scope: !2991)
!3000 = !DILocation(line: 1304, column: 3, scope: !2991)
!3001 = !DILocation(line: 1305, column: 27, scope: !2991)
!3002 = !DILocation(line: 1305, column: 31, scope: !2991)
!3003 = !DILocation(line: 1305, column: 48, scope: !2991)
!3004 = !DILocation(line: 1305, column: 3, scope: !2991)
!3005 = !DILocation(line: 1306, column: 24, scope: !2991)
!3006 = !DILocation(line: 1306, column: 28, scope: !2991)
!3007 = !DILocation(line: 1306, column: 41, scope: !2991)
!3008 = !DILocation(line: 0, scope: !2991)
!3009 = !DILocation(line: 1306, column: 3, scope: !2991)
!3010 = !DILocation(line: 1307, column: 19, scope: !2991)
!3011 = !DILocation(line: 1307, column: 23, scope: !2991)
!3012 = !DILocation(line: 1307, column: 3, scope: !2991)
!3013 = !DILocation(line: 1308, column: 19, scope: !2991)
!3014 = !DILocation(line: 1308, column: 23, scope: !2991)
!3015 = !DILocation(line: 1308, column: 3, scope: !2991)
!3016 = !DILocation(line: 1309, column: 1, scope: !2991)
!3017 = distinct !DISubprogram(name: "output_record_start", scope: !3, file: !3, line: 303, type: !3018, scopeLine: 304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3018 = !DISubroutineType(types: !3019)
!3019 = !{null, !932, !604}
!3020 = !DILocalVariable(name: "ob", arg: 1, scope: !3017, file: !3, line: 303, type: !932)
!3021 = !DILocation(line: 303, column: 43, scope: !3017)
!3022 = !DILocalVariable(name: "tag", arg: 2, scope: !3017, file: !3, line: 303, type: !604)
!3023 = !DILocation(line: 303, column: 61, scope: !3017)
!3024 = !DILocation(line: 306, column: 3, scope: !3017)
!3025 = !DILocation(line: 307, column: 19, scope: !3017)
!3026 = !DILocation(line: 307, column: 23, scope: !3017)
!3027 = !DILocation(line: 307, column: 3, scope: !3017)
!3028 = !DILocation(line: 308, column: 1, scope: !3017)
!3029 = distinct !DISubprogram(name: "output_sleb128", scope: !3, file: !3, line: 294, type: !3030, scopeLine: 295, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3030 = !DISubroutineType(types: !3031)
!3031 = !{null, !932, !1067}
!3032 = !DILocalVariable(name: "ob", arg: 1, scope: !3029, file: !3, line: 294, type: !932)
!3033 = !DILocation(line: 294, column: 38, scope: !3029)
!3034 = !DILocalVariable(name: "work", arg: 2, scope: !3029, file: !3, line: 294, type: !1067)
!3035 = !DILocation(line: 294, column: 56, scope: !3029)
!3036 = !DILocation(line: 296, column: 30, scope: !3029)
!3037 = !DILocation(line: 296, column: 34, scope: !3029)
!3038 = !DILocation(line: 296, column: 47, scope: !3029)
!3039 = !DILocation(line: 296, column: 3, scope: !3029)
!3040 = !DILocation(line: 297, column: 1, scope: !3029)
!3041 = distinct !DISubprogram(name: "output_uleb128", scope: !3, file: !3, line: 285, type: !3042, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3042 = !DISubroutineType(types: !3043)
!3043 = !{null, !932, !974}
!3044 = !DILocalVariable(name: "ob", arg: 1, scope: !3041, file: !3, line: 285, type: !932)
!3045 = !DILocation(line: 285, column: 38, scope: !3041)
!3046 = !DILocalVariable(name: "work", arg: 2, scope: !3041, file: !3, line: 285, type: !974)
!3047 = !DILocation(line: 285, column: 65, scope: !3041)
!3048 = !DILocation(line: 287, column: 30, scope: !3041)
!3049 = !DILocation(line: 287, column: 34, scope: !3041)
!3050 = !DILocation(line: 287, column: 47, scope: !3041)
!3051 = !DILocation(line: 287, column: 3, scope: !3041)
!3052 = !DILocation(line: 288, column: 1, scope: !3041)
!3053 = distinct !DISubprogram(name: "lto_tree_code_to_tag", scope: !6, file: !6, line: 915, type: !3054, scopeLine: 916, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3054 = !DISubroutineType(types: !3055)
!3055 = !{!604, !148}
!3056 = !DILocalVariable(name: "code", arg: 1, scope: !3053, file: !6, line: 915, type: !148)
!3057 = !DILocation(line: 915, column: 38, scope: !3053)
!3058 = !DILocation(line: 917, column: 38, scope: !3053)
!3059 = !DILocation(line: 917, column: 43, scope: !3053)
!3060 = !DILocation(line: 917, column: 3, scope: !3053)
!3061 = distinct !DISubprogram(name: "lto_stream_as_builtin_p", scope: !6, file: !6, line: 1010, type: !3062, scopeLine: 1011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3062 = !DISubroutineType(types: !3063)
!3063 = !{!1130, !1012}
!3064 = !DILocalVariable(name: "expr", arg: 1, scope: !3061, file: !6, line: 1010, type: !1012)
!3065 = !DILocation(line: 1010, column: 31, scope: !3061)
!3066 = !DILocation(line: 1012, column: 11, scope: !3061)
!3067 = !DILocation(line: 1012, column: 28, scope: !3061)
!3068 = !DILocation(line: 1013, column: 4, scope: !3061)
!3069 = !DILocation(line: 1013, column: 7, scope: !3061)
!3070 = !DILocation(line: 1014, column: 4, scope: !3061)
!3071 = !DILocation(line: 1014, column: 8, scope: !3061)
!3072 = !DILocation(line: 1014, column: 35, scope: !3061)
!3073 = !DILocation(line: 1015, column: 8, scope: !3061)
!3074 = !DILocation(line: 1015, column: 11, scope: !3061)
!3075 = !DILocation(line: 1015, column: 38, scope: !3061)
!3076 = !DILocation(line: 0, scope: !3061)
!3077 = !DILocation(line: 1012, column: 10, scope: !3061)
!3078 = !DILocation(line: 1012, column: 3, scope: !3061)
!3079 = distinct !DISubprogram(name: "lto_output_builtin_tree", scope: !3, file: !3, line: 1239, type: !3080, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3080 = !DISubroutineType(types: !3081)
!3081 = !{null, !932, !1012, !962}
!3082 = !DILocalVariable(name: "ob", arg: 1, scope: !3079, file: !3, line: 1239, type: !932)
!3083 = !DILocation(line: 1239, column: 47, scope: !3079)
!3084 = !DILocalVariable(name: "expr", arg: 2, scope: !3079, file: !3, line: 1239, type: !1012)
!3085 = !DILocation(line: 1239, column: 56, scope: !3079)
!3086 = !DILocalVariable(name: "ix", arg: 3, scope: !3079, file: !3, line: 1239, type: !962)
!3087 = !DILocation(line: 1239, column: 66, scope: !3079)
!3088 = !DILocation(line: 1241, column: 3, scope: !3079)
!3089 = !DILocation(line: 1243, column: 7, scope: !3090)
!3090 = distinct !DILexicalBlock(scope: !3079, file: !3, line: 1243, column: 7)
!3091 = !DILocation(line: 1243, column: 34, scope: !3090)
!3092 = !DILocation(line: 1244, column: 7, scope: !3090)
!3093 = !DILocation(line: 1244, column: 19, scope: !3090)
!3094 = !DILocation(line: 1244, column: 11, scope: !3090)
!3095 = !DILocation(line: 1243, column: 7, scope: !3079)
!3096 = !DILocation(line: 1245, column: 5, scope: !3090)
!3097 = !DILocation(line: 1248, column: 24, scope: !3079)
!3098 = !DILocation(line: 1248, column: 3, scope: !3079)
!3099 = !DILocation(line: 1249, column: 19, scope: !3079)
!3100 = !DILocation(line: 1249, column: 23, scope: !3079)
!3101 = !DILocation(line: 1249, column: 3, scope: !3079)
!3102 = !DILocation(line: 1250, column: 19, scope: !3079)
!3103 = !DILocation(line: 1250, column: 23, scope: !3079)
!3104 = !DILocation(line: 1250, column: 3, scope: !3079)
!3105 = !DILocation(line: 1251, column: 19, scope: !3079)
!3106 = !DILocation(line: 1251, column: 23, scope: !3079)
!3107 = !DILocation(line: 1251, column: 3, scope: !3079)
!3108 = !DILocation(line: 1253, column: 7, scope: !3109)
!3109 = distinct !DILexicalBlock(scope: !3079, file: !3, line: 1253, column: 7)
!3110 = !DILocation(line: 1253, column: 7, scope: !3079)
!3111 = !DILocalVariable(name: "str", scope: !3112, file: !3, line: 1259, type: !1214)
!3112 = distinct !DILexicalBlock(scope: !3109, file: !3, line: 1254, column: 5)
!3113 = !DILocation(line: 1259, column: 19, scope: !3112)
!3114 = !DILocation(line: 1259, column: 25, scope: !3112)
!3115 = !DILocation(line: 1260, column: 19, scope: !3116)
!3116 = distinct !DILexicalBlock(scope: !3112, file: !3, line: 1260, column: 11)
!3117 = !DILocation(line: 1260, column: 11, scope: !3116)
!3118 = !DILocation(line: 1260, column: 24, scope: !3116)
!3119 = !DILocation(line: 1260, column: 28, scope: !3116)
!3120 = !DILocation(line: 1260, column: 31, scope: !3116)
!3121 = !DILocation(line: 1260, column: 38, scope: !3116)
!3122 = !DILocation(line: 1260, column: 11, scope: !3112)
!3123 = !DILocation(line: 1261, column: 17, scope: !3116)
!3124 = !DILocation(line: 1261, column: 21, scope: !3116)
!3125 = !DILocation(line: 1261, column: 25, scope: !3116)
!3126 = !DILocation(line: 1261, column: 39, scope: !3116)
!3127 = !DILocation(line: 1261, column: 2, scope: !3116)
!3128 = !DILocation(line: 1263, column: 17, scope: !3116)
!3129 = !DILocation(line: 1263, column: 21, scope: !3116)
!3130 = !DILocation(line: 1263, column: 25, scope: !3116)
!3131 = !DILocation(line: 1263, column: 2, scope: !3116)
!3132 = !DILocation(line: 1264, column: 5, scope: !3112)
!3133 = !DILocation(line: 1266, column: 20, scope: !3109)
!3134 = !DILocation(line: 1266, column: 24, scope: !3109)
!3135 = !DILocation(line: 1266, column: 28, scope: !3109)
!3136 = !DILocation(line: 1266, column: 5, scope: !3109)
!3137 = !DILocation(line: 1267, column: 1, scope: !3079)
!3138 = distinct !DISubprogram(name: "lto_write_tree", scope: !3, file: !3, line: 1276, type: !3139, scopeLine: 1277, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3139 = !DISubroutineType(types: !3140)
!3140 = !{null, !932, !1012, !1130, !962}
!3141 = !DILocalVariable(name: "ob", arg: 1, scope: !3138, file: !3, line: 1276, type: !932)
!3142 = !DILocation(line: 1276, column: 38, scope: !3138)
!3143 = !DILocalVariable(name: "expr", arg: 2, scope: !3138, file: !3, line: 1276, type: !1012)
!3144 = !DILocation(line: 1276, column: 47, scope: !3138)
!3145 = !DILocalVariable(name: "ref_p", arg: 3, scope: !3138, file: !3, line: 1276, type: !1130)
!3146 = !DILocation(line: 1276, column: 58, scope: !3138)
!3147 = !DILocalVariable(name: "ix", arg: 4, scope: !3138, file: !3, line: 1276, type: !962)
!3148 = !DILocation(line: 1276, column: 69, scope: !3138)
!3149 = !DILocalVariable(name: "bp", scope: !3138, file: !3, line: 1278, type: !2844)
!3150 = !DILocation(line: 1278, column: 21, scope: !3138)
!3151 = !DILocation(line: 1282, column: 27, scope: !3138)
!3152 = !DILocation(line: 1282, column: 31, scope: !3138)
!3153 = !DILocation(line: 1282, column: 37, scope: !3138)
!3154 = !DILocation(line: 1282, column: 3, scope: !3138)
!3155 = !DILocation(line: 1286, column: 27, scope: !3138)
!3156 = !DILocation(line: 1286, column: 8, scope: !3138)
!3157 = !DILocation(line: 1286, column: 6, scope: !3138)
!3158 = !DILocation(line: 1287, column: 23, scope: !3138)
!3159 = !DILocation(line: 1287, column: 27, scope: !3138)
!3160 = !DILocation(line: 1287, column: 40, scope: !3138)
!3161 = !DILocation(line: 1287, column: 3, scope: !3138)
!3162 = !DILocation(line: 1288, column: 19, scope: !3138)
!3163 = !DILocation(line: 1288, column: 3, scope: !3138)
!3164 = !DILocation(line: 1291, column: 29, scope: !3138)
!3165 = !DILocation(line: 1291, column: 33, scope: !3138)
!3166 = !DILocation(line: 1291, column: 39, scope: !3138)
!3167 = !DILocation(line: 1291, column: 3, scope: !3138)
!3168 = !DILocation(line: 1294, column: 16, scope: !3138)
!3169 = !DILocation(line: 1294, column: 3, scope: !3138)
!3170 = !DILocation(line: 1295, column: 1, scope: !3138)
!3171 = distinct !DISubprogram(name: "produce_asm", scope: !3, file: !3, line: 1777, type: !3172, scopeLine: 1778, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3172 = !DISubroutineType(types: !3173)
!3173 = !{null, !932, !1012}
!3174 = !DILocalVariable(name: "ob", arg: 1, scope: !3171, file: !3, line: 1777, type: !932)
!3175 = !DILocation(line: 1777, column: 35, scope: !3171)
!3176 = !DILocalVariable(name: "fn", arg: 2, scope: !3171, file: !3, line: 1777, type: !1012)
!3177 = !DILocation(line: 1777, column: 44, scope: !3171)
!3178 = !DILocalVariable(name: "section_type", scope: !3171, file: !3, line: 1779, type: !5)
!3179 = !DILocation(line: 1779, column: 25, scope: !3171)
!3180 = !DILocation(line: 1779, column: 40, scope: !3171)
!3181 = !DILocation(line: 1779, column: 44, scope: !3171)
!3182 = !DILocalVariable(name: "header", scope: !3171, file: !3, line: 1780, type: !3183)
!3183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_function_header", file: !6, line: 395, size: 288, elements: !3184)
!3184 = !{!3185, !3195, !3198, !3199, !3200, !3201, !3202, !3203}
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "lto_header", scope: !3183, file: !6, line: 398, baseType: !3186, size: 64)
!3186 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_header", file: !6, line: 387, size: 64, elements: !3187)
!3187 = !{!3188, !3193, !3194}
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "major_version", scope: !3186, file: !6, line: 389, baseType: !3189, size: 16)
!3189 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !3190, line: 25, baseType: !3191)
!3190 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "")
!3191 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int16_t", file: !2671, line: 39, baseType: !3192)
!3192 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "minor_version", scope: !3186, file: !6, line: 390, baseType: !3189, size: 16, offset: 16)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "section_type", scope: !3186, file: !6, line: 391, baseType: !5, size: 32, offset: 32)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "num_named_labels", scope: !3183, file: !6, line: 401, baseType: !3196, size: 32, offset: 64)
!3196 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !3190, line: 26, baseType: !3197)
!3197 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !2671, line: 41, baseType: !962)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "num_unnamed_labels", scope: !3183, file: !6, line: 404, baseType: !3196, size: 32, offset: 96)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "compressed_size", scope: !3183, file: !6, line: 407, baseType: !3196, size: 32, offset: 128)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "named_label_size", scope: !3183, file: !6, line: 410, baseType: !3196, size: 32, offset: 160)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "cfg_size", scope: !3183, file: !6, line: 413, baseType: !3196, size: 32, offset: 192)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "main_size", scope: !3183, file: !6, line: 416, baseType: !3196, size: 32, offset: 224)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "string_size", scope: !3183, file: !6, line: 419, baseType: !3196, size: 32, offset: 256)
!3204 = !DILocation(line: 1780, column: 30, scope: !3171)
!3205 = !DILocalVariable(name: "section_name", scope: !3171, file: !3, line: 1781, type: !1279)
!3206 = !DILocation(line: 1781, column: 9, scope: !3171)
!3207 = !DILocalVariable(name: "header_stream", scope: !3171, file: !3, line: 1782, type: !2615)
!3208 = !DILocation(line: 1782, column: 29, scope: !3171)
!3209 = !DILocation(line: 1784, column: 7, scope: !3210)
!3210 = distinct !DILexicalBlock(scope: !3171, file: !3, line: 1784, column: 7)
!3211 = !DILocation(line: 1784, column: 20, scope: !3210)
!3212 = !DILocation(line: 1784, column: 7, scope: !3171)
!3213 = !DILocalVariable(name: "name", scope: !3214, file: !3, line: 1786, type: !1214)
!3214 = distinct !DILexicalBlock(scope: !3210, file: !3, line: 1785, column: 5)
!3215 = !DILocation(line: 1786, column: 19, scope: !3214)
!3216 = !DILocation(line: 1786, column: 26, scope: !3214)
!3217 = !DILocation(line: 1787, column: 44, scope: !3214)
!3218 = !DILocation(line: 1787, column: 58, scope: !3214)
!3219 = !DILocation(line: 1787, column: 22, scope: !3214)
!3220 = !DILocation(line: 1787, column: 20, scope: !3214)
!3221 = !DILocation(line: 1788, column: 5, scope: !3214)
!3222 = !DILocation(line: 1790, column: 42, scope: !3210)
!3223 = !DILocation(line: 1790, column: 20, scope: !3210)
!3224 = !DILocation(line: 1790, column: 18, scope: !3210)
!3225 = !DILocation(line: 1792, column: 22, scope: !3171)
!3226 = !DILocation(line: 1792, column: 37, scope: !3171)
!3227 = !DILocation(line: 1792, column: 36, scope: !3171)
!3228 = !DILocation(line: 1792, column: 3, scope: !3171)
!3229 = !DILocation(line: 1793, column: 9, scope: !3171)
!3230 = !DILocation(line: 1793, column: 3, scope: !3171)
!3231 = !DILocation(line: 1796, column: 3, scope: !3171)
!3232 = !DILocation(line: 1799, column: 10, scope: !3171)
!3233 = !DILocation(line: 1799, column: 21, scope: !3171)
!3234 = !DILocation(line: 1799, column: 35, scope: !3171)
!3235 = !DILocation(line: 1800, column: 10, scope: !3171)
!3236 = !DILocation(line: 1800, column: 21, scope: !3171)
!3237 = !DILocation(line: 1800, column: 35, scope: !3171)
!3238 = !DILocation(line: 1801, column: 36, scope: !3171)
!3239 = !DILocation(line: 1801, column: 10, scope: !3171)
!3240 = !DILocation(line: 1801, column: 21, scope: !3171)
!3241 = !DILocation(line: 1801, column: 34, scope: !3171)
!3242 = !DILocation(line: 1803, column: 10, scope: !3171)
!3243 = !DILocation(line: 1803, column: 26, scope: !3171)
!3244 = !DILocation(line: 1805, column: 7, scope: !3245)
!3245 = distinct !DILexicalBlock(scope: !3171, file: !3, line: 1805, column: 7)
!3246 = !DILocation(line: 1805, column: 20, scope: !3245)
!3247 = !DILocation(line: 1805, column: 7, scope: !3171)
!3248 = !DILocation(line: 1806, column: 23, scope: !3245)
!3249 = !DILocation(line: 1806, column: 27, scope: !3245)
!3250 = !DILocation(line: 1806, column: 39, scope: !3245)
!3251 = !DILocation(line: 1806, column: 12, scope: !3245)
!3252 = !DILocation(line: 1806, column: 21, scope: !3245)
!3253 = !DILocation(line: 1806, column: 5, scope: !3245)
!3254 = !DILocation(line: 1807, column: 22, scope: !3171)
!3255 = !DILocation(line: 1807, column: 26, scope: !3171)
!3256 = !DILocation(line: 1807, column: 39, scope: !3171)
!3257 = !DILocation(line: 1807, column: 10, scope: !3171)
!3258 = !DILocation(line: 1807, column: 20, scope: !3171)
!3259 = !DILocation(line: 1808, column: 24, scope: !3171)
!3260 = !DILocation(line: 1808, column: 28, scope: !3171)
!3261 = !DILocation(line: 1808, column: 43, scope: !3171)
!3262 = !DILocation(line: 1808, column: 10, scope: !3171)
!3263 = !DILocation(line: 1808, column: 22, scope: !3171)
!3264 = !DILocation(line: 1810, column: 19, scope: !3171)
!3265 = !DILocation(line: 1810, column: 17, scope: !3171)
!3266 = !DILocation(line: 1811, column: 27, scope: !3171)
!3267 = !DILocation(line: 1811, column: 42, scope: !3171)
!3268 = !DILocation(line: 1811, column: 3, scope: !3171)
!3269 = !DILocation(line: 1812, column: 21, scope: !3171)
!3270 = !DILocation(line: 1812, column: 3, scope: !3171)
!3271 = !DILocation(line: 1813, column: 9, scope: !3171)
!3272 = !DILocation(line: 1813, column: 3, scope: !3171)
!3273 = !DILocation(line: 1817, column: 7, scope: !3274)
!3274 = distinct !DILexicalBlock(scope: !3171, file: !3, line: 1817, column: 7)
!3275 = !DILocation(line: 1817, column: 20, scope: !3274)
!3276 = !DILocation(line: 1817, column: 7, scope: !3171)
!3277 = !DILocation(line: 1818, column: 23, scope: !3274)
!3278 = !DILocation(line: 1818, column: 27, scope: !3274)
!3279 = !DILocation(line: 1818, column: 5, scope: !3274)
!3280 = !DILocation(line: 1819, column: 21, scope: !3171)
!3281 = !DILocation(line: 1819, column: 25, scope: !3171)
!3282 = !DILocation(line: 1819, column: 3, scope: !3171)
!3283 = !DILocation(line: 1820, column: 21, scope: !3171)
!3284 = !DILocation(line: 1820, column: 25, scope: !3171)
!3285 = !DILocation(line: 1820, column: 3, scope: !3171)
!3286 = !DILocation(line: 1822, column: 3, scope: !3171)
!3287 = !DILocation(line: 1823, column: 1, scope: !3171)
!3288 = distinct !DISubprogram(name: "lto_output", scope: !3, file: !3, line: 2093, type: !3289, scopeLine: 2094, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3289 = !DISubroutineType(types: !3290)
!3290 = !{null, !3291}
!3291 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_set", file: !399, line: 283, baseType: !2464)
!3292 = !DILocalVariable(name: "set", arg: 1, scope: !3288, file: !3, line: 2093, type: !3291)
!3293 = !DILocation(line: 2093, column: 29, scope: !3288)
!3294 = !DILocalVariable(name: "node", scope: !3288, file: !3, line: 2095, type: !2373)
!3295 = !DILocation(line: 2095, column: 23, scope: !3288)
!3296 = !DILocalVariable(name: "decl_state", scope: !3288, file: !3, line: 2096, type: !937)
!3297 = !DILocation(line: 2096, column: 30, scope: !3288)
!3298 = !DILocalVariable(name: "csi", scope: !3288, file: !3, line: 2097, type: !3299)
!3299 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_set_iterator", file: !399, line: 305, baseType: !3300)
!3300 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !399, line: 301, size: 128, elements: !3301)
!3301 = !{!3302, !3303}
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !3300, file: !399, line: 303, baseType: !3291, size: 64)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3300, file: !399, line: 304, baseType: !7, size: 32, offset: 64)
!3304 = !DILocation(line: 2097, column: 28, scope: !3288)
!3305 = !DILocalVariable(name: "output", scope: !3288, file: !3, line: 2098, type: !1898)
!3306 = !DILocation(line: 2098, column: 10, scope: !3288)
!3307 = !DILocation(line: 2098, column: 19, scope: !3288)
!3308 = !DILocation(line: 2100, column: 3, scope: !3288)
!3309 = !DILocation(line: 2103, column: 25, scope: !3310)
!3310 = distinct !DILexicalBlock(scope: !3288, file: !3, line: 2103, column: 3)
!3311 = !DILocation(line: 2103, column: 14, scope: !3310)
!3312 = !DILocation(line: 2103, column: 8, scope: !3310)
!3313 = !DILocation(line: 2103, column: 32, scope: !3314)
!3314 = distinct !DILexicalBlock(scope: !3310, file: !3, line: 2103, column: 3)
!3315 = !DILocation(line: 2103, column: 31, scope: !3314)
!3316 = !DILocation(line: 2103, column: 3, scope: !3310)
!3317 = !DILocation(line: 2105, column: 14, scope: !3318)
!3318 = distinct !DILexicalBlock(scope: !3314, file: !3, line: 2104, column: 5)
!3319 = !DILocation(line: 2105, column: 12, scope: !3318)
!3320 = !DILocation(line: 2106, column: 11, scope: !3321)
!3321 = distinct !DILexicalBlock(scope: !3318, file: !3, line: 2106, column: 11)
!3322 = !DILocation(line: 2106, column: 17, scope: !3321)
!3323 = !DILocation(line: 2106, column: 26, scope: !3321)
!3324 = !DILocation(line: 2106, column: 44, scope: !3321)
!3325 = !DILocation(line: 2106, column: 52, scope: !3321)
!3326 = !DILocation(line: 2106, column: 30, scope: !3321)
!3327 = !DILocation(line: 2106, column: 11, scope: !3318)
!3328 = !DILocation(line: 2108, column: 20, scope: !3329)
!3329 = distinct !DILexicalBlock(scope: !3321, file: !3, line: 2107, column: 2)
!3330 = !DILocation(line: 2108, column: 28, scope: !3329)
!3331 = !DILocation(line: 2108, column: 4, scope: !3329)
!3332 = !DILocation(line: 2109, column: 17, scope: !3329)
!3333 = !DILocation(line: 2109, column: 15, scope: !3329)
!3334 = !DILocation(line: 2110, column: 29, scope: !3329)
!3335 = !DILocation(line: 2110, column: 4, scope: !3329)
!3336 = !DILocation(line: 2111, column: 9, scope: !3337)
!3337 = distinct !DILexicalBlock(scope: !3329, file: !3, line: 2111, column: 8)
!3338 = !DILocation(line: 2111, column: 8, scope: !3329)
!3339 = !DILocation(line: 2112, column: 23, scope: !3337)
!3340 = !DILocation(line: 2112, column: 6, scope: !3337)
!3341 = !DILocation(line: 2114, column: 21, scope: !3337)
!3342 = !DILocation(line: 2114, column: 6, scope: !3337)
!3343 = !DILocation(line: 2115, column: 4, scope: !3329)
!3344 = !DILocation(line: 2116, column: 4, scope: !3329)
!3345 = !DILocation(line: 2117, column: 40, scope: !3329)
!3346 = !DILocation(line: 2117, column: 46, scope: !3329)
!3347 = !DILocation(line: 2117, column: 52, scope: !3329)
!3348 = !DILocation(line: 2117, column: 4, scope: !3329)
!3349 = !DILocation(line: 2118, column: 2, scope: !3329)
!3350 = !DILocation(line: 2119, column: 5, scope: !3318)
!3351 = !DILocation(line: 2103, column: 49, scope: !3314)
!3352 = !DILocation(line: 2103, column: 3, scope: !3314)
!3353 = distinct !{!3353, !3316, !3354}
!3354 = !DILocation(line: 2119, column: 5, scope: !3310)
!3355 = !DILocation(line: 2125, column: 18, scope: !3288)
!3356 = !DILocation(line: 2125, column: 3, scope: !3288)
!3357 = !DILocation(line: 2127, column: 20, scope: !3288)
!3358 = !DILocation(line: 2127, column: 3, scope: !3288)
!3359 = !DILocation(line: 2128, column: 1, scope: !3288)
!3360 = distinct !DISubprogram(name: "produce_asm_for_decls", scope: !3, file: !3, line: 2445, type: !3289, scopeLine: 2446, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3361 = !DILocalVariable(name: "set", arg: 1, scope: !3360, file: !3, line: 2445, type: !3291)
!3362 = !DILocation(line: 2445, column: 40, scope: !3360)
!3363 = !DILocalVariable(name: "out_state", scope: !3360, file: !3, line: 2447, type: !937)
!3364 = !DILocation(line: 2447, column: 30, scope: !3360)
!3365 = !DILocalVariable(name: "fn_out_state", scope: !3360, file: !3, line: 2448, type: !937)
!3366 = !DILocation(line: 2448, column: 30, scope: !3360)
!3367 = !DILocalVariable(name: "header", scope: !3360, file: !3, line: 2449, type: !3368)
!3368 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_decl_header", file: !6, line: 424, size: 192, elements: !3369)
!3369 = !{!3370, !3371, !3372, !3373, !3374}
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "lto_header", scope: !3368, file: !6, line: 427, baseType: !3186, size: 64)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "decl_state_size", scope: !3368, file: !6, line: 430, baseType: !3196, size: 32, offset: 64)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !3368, file: !6, line: 433, baseType: !3196, size: 32, offset: 96)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "main_size", scope: !3368, file: !6, line: 436, baseType: !3196, size: 32, offset: 128)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "string_size", scope: !3368, file: !6, line: 439, baseType: !3196, size: 32, offset: 160)
!3375 = !DILocation(line: 2449, column: 26, scope: !3360)
!3376 = !DILocalVariable(name: "section_name", scope: !3360, file: !3, line: 2450, type: !1279)
!3377 = !DILocation(line: 2450, column: 9, scope: !3360)
!3378 = !DILocalVariable(name: "ob", scope: !3360, file: !3, line: 2451, type: !932)
!3379 = !DILocation(line: 2451, column: 24, scope: !3360)
!3380 = !DILocalVariable(name: "header_stream", scope: !3360, file: !3, line: 2452, type: !2615)
!3381 = !DILocation(line: 2452, column: 29, scope: !3360)
!3382 = !DILocalVariable(name: "decl_state_stream", scope: !3360, file: !3, line: 2452, type: !2615)
!3383 = !DILocation(line: 2452, column: 45, scope: !3360)
!3384 = !DILocalVariable(name: "idx", scope: !3360, file: !3, line: 2453, type: !7)
!3385 = !DILocation(line: 2453, column: 12, scope: !3360)
!3386 = !DILocalVariable(name: "num_fns", scope: !3360, file: !3, line: 2453, type: !7)
!3387 = !DILocation(line: 2453, column: 17, scope: !3360)
!3388 = !DILocalVariable(name: "decl_state_size", scope: !3360, file: !3, line: 2454, type: !972)
!3389 = !DILocation(line: 2454, column: 10, scope: !3360)
!3390 = !DILocalVariable(name: "num_decl_states", scope: !3360, file: !3, line: 2455, type: !3196)
!3391 = !DILocation(line: 2455, column: 11, scope: !3360)
!3392 = !DILocation(line: 2457, column: 8, scope: !3360)
!3393 = !DILocation(line: 2457, column: 6, scope: !3360)
!3394 = !DILocation(line: 2458, column: 3, scope: !3360)
!3395 = !DILocation(line: 2458, column: 7, scope: !3360)
!3396 = !DILocation(line: 2458, column: 14, scope: !3360)
!3397 = !DILocation(line: 2463, column: 32, scope: !3360)
!3398 = !DILocation(line: 2463, column: 3, scope: !3360)
!3399 = !DILocation(line: 2465, column: 3, scope: !3360)
!3400 = !DILocation(line: 2467, column: 18, scope: !3360)
!3401 = !DILocation(line: 2467, column: 16, scope: !3360)
!3402 = !DILocation(line: 2468, column: 22, scope: !3360)
!3403 = !DILocation(line: 2468, column: 37, scope: !3360)
!3404 = !DILocation(line: 2468, column: 36, scope: !3360)
!3405 = !DILocation(line: 2468, column: 3, scope: !3360)
!3406 = !DILocation(line: 2469, column: 9, scope: !3360)
!3407 = !DILocation(line: 2469, column: 3, scope: !3360)
!3408 = !DILocation(line: 2472, column: 24, scope: !3360)
!3409 = !DILocation(line: 2472, column: 28, scope: !3360)
!3410 = !DILocation(line: 2472, column: 3, scope: !3360)
!3411 = !DILocation(line: 2475, column: 15, scope: !3360)
!3412 = !DILocation(line: 2475, column: 13, scope: !3360)
!3413 = !DILocation(line: 2476, column: 13, scope: !3360)
!3414 = !DILocation(line: 2476, column: 11, scope: !3360)
!3415 = !DILocation(line: 2477, column: 34, scope: !3360)
!3416 = !DILocation(line: 2477, column: 38, scope: !3360)
!3417 = !DILocation(line: 2477, column: 3, scope: !3360)
!3418 = !DILocation(line: 2478, column: 12, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3360, file: !3, line: 2478, column: 3)
!3420 = !DILocation(line: 2478, column: 8, scope: !3419)
!3421 = !DILocation(line: 2478, column: 17, scope: !3422)
!3422 = distinct !DILexicalBlock(scope: !3419, file: !3, line: 2478, column: 3)
!3423 = !DILocation(line: 2478, column: 23, scope: !3422)
!3424 = !DILocation(line: 2478, column: 21, scope: !3422)
!3425 = !DILocation(line: 2478, column: 3, scope: !3419)
!3426 = !DILocation(line: 2481, column: 2, scope: !3427)
!3427 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 2479, column: 5)
!3428 = !DILocation(line: 2480, column: 20, scope: !3427)
!3429 = !DILocation(line: 2482, column: 38, scope: !3427)
!3430 = !DILocation(line: 2482, column: 42, scope: !3427)
!3431 = !DILocation(line: 2482, column: 7, scope: !3427)
!3432 = !DILocation(line: 2483, column: 5, scope: !3427)
!3433 = !DILocation(line: 2478, column: 35, scope: !3422)
!3434 = !DILocation(line: 2478, column: 3, scope: !3422)
!3435 = distinct !{!3435, !3425, !3436}
!3436 = !DILocation(line: 2483, column: 5, scope: !3419)
!3437 = !DILocation(line: 2485, column: 10, scope: !3360)
!3438 = !DILocation(line: 2485, column: 21, scope: !3360)
!3439 = !DILocation(line: 2485, column: 35, scope: !3360)
!3440 = !DILocation(line: 2486, column: 10, scope: !3360)
!3441 = !DILocation(line: 2486, column: 21, scope: !3360)
!3442 = !DILocation(line: 2486, column: 35, scope: !3360)
!3443 = !DILocation(line: 2487, column: 10, scope: !3360)
!3444 = !DILocation(line: 2487, column: 21, scope: !3360)
!3445 = !DILocation(line: 2487, column: 34, scope: !3360)
!3446 = !DILocation(line: 2491, column: 10, scope: !3360)
!3447 = !DILocation(line: 2491, column: 20, scope: !3360)
!3448 = !DILocation(line: 2494, column: 19, scope: !3360)
!3449 = !DILocation(line: 2495, column: 55, scope: !3360)
!3450 = !DILocation(line: 2495, column: 22, scope: !3360)
!3451 = !DILocation(line: 2495, column: 19, scope: !3360)
!3452 = !DILocation(line: 2496, column: 12, scope: !3453)
!3453 = distinct !DILexicalBlock(scope: !3360, file: !3, line: 2496, column: 3)
!3454 = !DILocation(line: 2496, column: 8, scope: !3453)
!3455 = !DILocation(line: 2496, column: 17, scope: !3456)
!3456 = distinct !DILexicalBlock(scope: !3453, file: !3, line: 2496, column: 3)
!3457 = !DILocation(line: 2496, column: 23, scope: !3456)
!3458 = !DILocation(line: 2496, column: 21, scope: !3456)
!3459 = !DILocation(line: 2496, column: 3, scope: !3453)
!3460 = !DILocation(line: 2499, column: 2, scope: !3461)
!3461 = distinct !DILexicalBlock(scope: !3456, file: !3, line: 2497, column: 5)
!3462 = !DILocation(line: 2498, column: 20, scope: !3461)
!3463 = !DILocation(line: 2500, column: 59, scope: !3461)
!3464 = !DILocation(line: 2500, column: 26, scope: !3461)
!3465 = !DILocation(line: 2500, column: 23, scope: !3461)
!3466 = !DILocation(line: 2501, column: 5, scope: !3461)
!3467 = !DILocation(line: 2496, column: 35, scope: !3456)
!3468 = !DILocation(line: 2496, column: 3, scope: !3456)
!3469 = distinct !{!3469, !3459, !3470}
!3470 = !DILocation(line: 2501, column: 5, scope: !3453)
!3471 = !DILocation(line: 2502, column: 28, scope: !3360)
!3472 = !DILocation(line: 2502, column: 10, scope: !3360)
!3473 = !DILocation(line: 2502, column: 26, scope: !3360)
!3474 = !DILocation(line: 2504, column: 22, scope: !3360)
!3475 = !DILocation(line: 2504, column: 26, scope: !3360)
!3476 = !DILocation(line: 2504, column: 39, scope: !3360)
!3477 = !DILocation(line: 2504, column: 10, scope: !3360)
!3478 = !DILocation(line: 2504, column: 20, scope: !3360)
!3479 = !DILocation(line: 2505, column: 24, scope: !3360)
!3480 = !DILocation(line: 2505, column: 28, scope: !3360)
!3481 = !DILocation(line: 2505, column: 43, scope: !3360)
!3482 = !DILocation(line: 2505, column: 10, scope: !3360)
!3483 = !DILocation(line: 2505, column: 22, scope: !3360)
!3484 = !DILocation(line: 2507, column: 19, scope: !3360)
!3485 = !DILocation(line: 2507, column: 17, scope: !3360)
!3486 = !DILocation(line: 2508, column: 27, scope: !3360)
!3487 = !DILocation(line: 2508, column: 42, scope: !3360)
!3488 = !DILocation(line: 2508, column: 3, scope: !3360)
!3489 = !DILocation(line: 2509, column: 21, scope: !3360)
!3490 = !DILocation(line: 2509, column: 3, scope: !3360)
!3491 = !DILocation(line: 2510, column: 9, scope: !3360)
!3492 = !DILocation(line: 2510, column: 3, scope: !3360)
!3493 = !DILocation(line: 2515, column: 10, scope: !3360)
!3494 = !DILocation(line: 2514, column: 24, scope: !3360)
!3495 = !DILocation(line: 2514, column: 21, scope: !3360)
!3496 = !DILocation(line: 2516, column: 21, scope: !3360)
!3497 = !DILocation(line: 2516, column: 29, scope: !3360)
!3498 = !DILocation(line: 2516, column: 19, scope: !3360)
!3499 = !DILocation(line: 2517, column: 27, scope: !3360)
!3500 = !DILocation(line: 2517, column: 46, scope: !3360)
!3501 = !DILocation(line: 2517, column: 3, scope: !3360)
!3502 = !DILocation(line: 2519, column: 31, scope: !3360)
!3503 = !DILocation(line: 2519, column: 35, scope: !3360)
!3504 = !DILocation(line: 2519, column: 54, scope: !3360)
!3505 = !DILocation(line: 2519, column: 3, scope: !3360)
!3506 = !DILocation(line: 2520, column: 12, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3360, file: !3, line: 2520, column: 3)
!3508 = !DILocation(line: 2520, column: 8, scope: !3507)
!3509 = !DILocation(line: 2520, column: 17, scope: !3510)
!3510 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 2520, column: 3)
!3511 = !DILocation(line: 2520, column: 23, scope: !3510)
!3512 = !DILocation(line: 2520, column: 21, scope: !3510)
!3513 = !DILocation(line: 2520, column: 3, scope: !3507)
!3514 = !DILocation(line: 2523, column: 2, scope: !3515)
!3515 = distinct !DILexicalBlock(scope: !3510, file: !3, line: 2521, column: 5)
!3516 = !DILocation(line: 2522, column: 20, scope: !3515)
!3517 = !DILocation(line: 2524, column: 35, scope: !3515)
!3518 = !DILocation(line: 2524, column: 39, scope: !3515)
!3519 = !DILocation(line: 2524, column: 58, scope: !3515)
!3520 = !DILocation(line: 2524, column: 7, scope: !3515)
!3521 = !DILocation(line: 2525, column: 5, scope: !3515)
!3522 = !DILocation(line: 2520, column: 35, scope: !3510)
!3523 = !DILocation(line: 2520, column: 3, scope: !3510)
!3524 = distinct !{!3524, !3513, !3525}
!3525 = !DILocation(line: 2525, column: 5, scope: !3507)
!3526 = !DILocation(line: 2526, column: 21, scope: !3360)
!3527 = !DILocation(line: 2526, column: 3, scope: !3360)
!3528 = !DILocation(line: 2527, column: 8, scope: !3360)
!3529 = !DILocation(line: 2527, column: 3, scope: !3360)
!3530 = !DILocation(line: 2529, column: 21, scope: !3360)
!3531 = !DILocation(line: 2529, column: 25, scope: !3360)
!3532 = !DILocation(line: 2529, column: 3, scope: !3360)
!3533 = !DILocation(line: 2530, column: 21, scope: !3360)
!3534 = !DILocation(line: 2530, column: 25, scope: !3360)
!3535 = !DILocation(line: 2530, column: 3, scope: !3360)
!3536 = !DILocation(line: 2532, column: 3, scope: !3360)
!3537 = !DILocation(line: 2535, column: 19, scope: !3360)
!3538 = !DILocation(line: 2535, column: 23, scope: !3360)
!3539 = !DILocation(line: 2535, column: 3, scope: !3360)
!3540 = !DILocation(line: 2538, column: 3, scope: !3360)
!3541 = !DILocation(line: 2541, column: 30, scope: !3360)
!3542 = !DILocation(line: 2541, column: 34, scope: !3360)
!3543 = !DILocation(line: 2541, column: 46, scope: !3360)
!3544 = !DILocation(line: 2541, column: 3, scope: !3360)
!3545 = !DILocation(line: 2542, column: 3, scope: !3360)
!3546 = !DILocation(line: 2543, column: 28, scope: !3360)
!3547 = !DILocation(line: 2544, column: 25, scope: !3360)
!3548 = !DILocation(line: 2544, column: 3, scope: !3360)
!3549 = !DILocation(line: 2545, column: 1, scope: !3360)
!3550 = distinct !DISubprogram(name: "lto_output_tree_or_ref", scope: !3, file: !3, line: 747, type: !2909, scopeLine: 748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3551 = !DILocalVariable(name: "ob", arg: 1, scope: !3550, file: !3, line: 747, type: !932)
!3552 = !DILocation(line: 747, column: 46, scope: !3550)
!3553 = !DILocalVariable(name: "expr", arg: 2, scope: !3550, file: !3, line: 747, type: !1012)
!3554 = !DILocation(line: 747, column: 55, scope: !3550)
!3555 = !DILocalVariable(name: "ref_p", arg: 3, scope: !3550, file: !3, line: 747, type: !1130)
!3556 = !DILocation(line: 747, column: 66, scope: !3550)
!3557 = !DILocation(line: 749, column: 7, scope: !3558)
!3558 = distinct !DILexicalBlock(scope: !3550, file: !3, line: 749, column: 7)
!3559 = !DILocation(line: 749, column: 7, scope: !3550)
!3560 = !DILocation(line: 750, column: 26, scope: !3558)
!3561 = !DILocation(line: 750, column: 30, scope: !3558)
!3562 = !DILocation(line: 750, column: 5, scope: !3558)
!3563 = !DILocation(line: 752, column: 22, scope: !3558)
!3564 = !DILocation(line: 752, column: 26, scope: !3558)
!3565 = !DILocation(line: 752, column: 5, scope: !3558)
!3566 = !DILocation(line: 753, column: 1, scope: !3550)
!3567 = distinct !DISubprogram(name: "lto_output_tree_ref", scope: !3, file: !3, line: 654, type: !3172, scopeLine: 655, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3568 = !DILocalVariable(name: "ob", arg: 1, scope: !3567, file: !3, line: 654, type: !932)
!3569 = !DILocation(line: 654, column: 43, scope: !3567)
!3570 = !DILocalVariable(name: "expr", arg: 2, scope: !3567, file: !3, line: 654, type: !1012)
!3571 = !DILocation(line: 654, column: 52, scope: !3567)
!3572 = !DILocalVariable(name: "code", scope: !3567, file: !3, line: 656, type: !148)
!3573 = !DILocation(line: 656, column: 18, scope: !3567)
!3574 = !DILocation(line: 658, column: 7, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 658, column: 7)
!3576 = !DILocation(line: 658, column: 12, scope: !3575)
!3577 = !DILocation(line: 658, column: 7, scope: !3567)
!3578 = !DILocation(line: 660, column: 20, scope: !3579)
!3579 = distinct !DILexicalBlock(scope: !3575, file: !3, line: 659, column: 5)
!3580 = !DILocation(line: 660, column: 7, scope: !3579)
!3581 = !DILocation(line: 661, column: 7, scope: !3579)
!3582 = !DILocation(line: 664, column: 27, scope: !3583)
!3583 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 664, column: 7)
!3584 = !DILocation(line: 664, column: 8, scope: !3583)
!3585 = !DILocation(line: 664, column: 7, scope: !3567)
!3586 = !DILocation(line: 668, column: 24, scope: !3587)
!3587 = distinct !DILexicalBlock(scope: !3583, file: !3, line: 665, column: 5)
!3588 = !DILocation(line: 668, column: 28, scope: !3587)
!3589 = !DILocation(line: 668, column: 7, scope: !3587)
!3590 = !DILocation(line: 669, column: 7, scope: !3587)
!3591 = !DILocation(line: 672, column: 7, scope: !3592)
!3592 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 672, column: 7)
!3593 = !DILocation(line: 672, column: 7, scope: !3567)
!3594 = !DILocation(line: 674, column: 24, scope: !3595)
!3595 = distinct !DILexicalBlock(scope: !3592, file: !3, line: 673, column: 5)
!3596 = !DILocation(line: 674, column: 28, scope: !3595)
!3597 = !DILocation(line: 674, column: 7, scope: !3595)
!3598 = !DILocation(line: 675, column: 7, scope: !3595)
!3599 = !DILocation(line: 678, column: 10, scope: !3567)
!3600 = !DILocation(line: 678, column: 8, scope: !3567)
!3601 = !DILocation(line: 679, column: 11, scope: !3567)
!3602 = !DILocation(line: 679, column: 3, scope: !3567)
!3603 = !DILocation(line: 682, column: 28, scope: !3604)
!3604 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 680, column: 5)
!3605 = !DILocation(line: 682, column: 7, scope: !3604)
!3606 = !DILocation(line: 683, column: 23, scope: !3604)
!3607 = !DILocation(line: 683, column: 27, scope: !3604)
!3608 = !DILocation(line: 683, column: 7, scope: !3604)
!3609 = !DILocation(line: 684, column: 7, scope: !3604)
!3610 = !DILocation(line: 687, column: 28, scope: !3604)
!3611 = !DILocation(line: 687, column: 7, scope: !3604)
!3612 = !DILocation(line: 688, column: 36, scope: !3604)
!3613 = !DILocation(line: 688, column: 40, scope: !3604)
!3614 = !DILocation(line: 688, column: 52, scope: !3604)
!3615 = !DILocation(line: 688, column: 56, scope: !3604)
!3616 = !DILocation(line: 688, column: 69, scope: !3604)
!3617 = !DILocation(line: 688, column: 7, scope: !3604)
!3618 = !DILocation(line: 689, column: 7, scope: !3604)
!3619 = !DILocation(line: 692, column: 28, scope: !3604)
!3620 = !DILocation(line: 692, column: 7, scope: !3604)
!3621 = !DILocation(line: 693, column: 33, scope: !3604)
!3622 = !DILocation(line: 693, column: 37, scope: !3604)
!3623 = !DILocation(line: 693, column: 49, scope: !3604)
!3624 = !DILocation(line: 693, column: 53, scope: !3604)
!3625 = !DILocation(line: 693, column: 66, scope: !3604)
!3626 = !DILocation(line: 693, column: 7, scope: !3604)
!3627 = !DILocation(line: 694, column: 7, scope: !3604)
!3628 = !DILocation(line: 698, column: 7, scope: !3604)
!3629 = !DILocation(line: 700, column: 28, scope: !3604)
!3630 = !DILocation(line: 700, column: 7, scope: !3604)
!3631 = !DILocation(line: 701, column: 34, scope: !3604)
!3632 = !DILocation(line: 701, column: 38, scope: !3604)
!3633 = !DILocation(line: 701, column: 50, scope: !3604)
!3634 = !DILocation(line: 701, column: 54, scope: !3604)
!3635 = !DILocation(line: 701, column: 67, scope: !3604)
!3636 = !DILocation(line: 701, column: 7, scope: !3604)
!3637 = !DILocation(line: 702, column: 7, scope: !3604)
!3638 = !DILocation(line: 705, column: 28, scope: !3604)
!3639 = !DILocation(line: 705, column: 7, scope: !3604)
!3640 = !DILocation(line: 706, column: 34, scope: !3604)
!3641 = !DILocation(line: 706, column: 38, scope: !3604)
!3642 = !DILocation(line: 706, column: 50, scope: !3604)
!3643 = !DILocation(line: 706, column: 54, scope: !3604)
!3644 = !DILocation(line: 706, column: 67, scope: !3604)
!3645 = !DILocation(line: 706, column: 7, scope: !3604)
!3646 = !DILocation(line: 707, column: 7, scope: !3604)
!3647 = !DILocation(line: 710, column: 7, scope: !3604)
!3648 = !DILocation(line: 711, column: 28, scope: !3604)
!3649 = !DILocation(line: 711, column: 7, scope: !3604)
!3650 = !DILocation(line: 712, column: 34, scope: !3604)
!3651 = !DILocation(line: 712, column: 38, scope: !3604)
!3652 = !DILocation(line: 712, column: 50, scope: !3604)
!3653 = !DILocation(line: 712, column: 54, scope: !3604)
!3654 = !DILocation(line: 712, column: 67, scope: !3604)
!3655 = !DILocation(line: 712, column: 7, scope: !3604)
!3656 = !DILocation(line: 713, column: 7, scope: !3604)
!3657 = !DILocation(line: 716, column: 28, scope: !3604)
!3658 = !DILocation(line: 716, column: 7, scope: !3604)
!3659 = !DILocation(line: 717, column: 35, scope: !3604)
!3660 = !DILocation(line: 717, column: 39, scope: !3604)
!3661 = !DILocation(line: 717, column: 51, scope: !3604)
!3662 = !DILocation(line: 717, column: 55, scope: !3604)
!3663 = !DILocation(line: 717, column: 68, scope: !3604)
!3664 = !DILocation(line: 717, column: 7, scope: !3604)
!3665 = !DILocation(line: 718, column: 7, scope: !3604)
!3666 = !DILocation(line: 721, column: 28, scope: !3604)
!3667 = !DILocation(line: 721, column: 7, scope: !3604)
!3668 = !DILocation(line: 722, column: 40, scope: !3604)
!3669 = !DILocation(line: 722, column: 44, scope: !3604)
!3670 = !DILocation(line: 722, column: 56, scope: !3604)
!3671 = !DILocation(line: 722, column: 60, scope: !3604)
!3672 = !DILocation(line: 722, column: 73, scope: !3604)
!3673 = !DILocation(line: 722, column: 7, scope: !3604)
!3674 = !DILocation(line: 723, column: 7, scope: !3604)
!3675 = !DILocation(line: 726, column: 28, scope: !3604)
!3676 = !DILocation(line: 726, column: 7, scope: !3604)
!3677 = !DILocation(line: 727, column: 34, scope: !3604)
!3678 = !DILocation(line: 727, column: 38, scope: !3604)
!3679 = !DILocation(line: 727, column: 50, scope: !3604)
!3680 = !DILocation(line: 727, column: 54, scope: !3604)
!3681 = !DILocation(line: 727, column: 67, scope: !3604)
!3682 = !DILocation(line: 727, column: 7, scope: !3604)
!3683 = !DILocation(line: 728, column: 7, scope: !3604)
!3684 = !DILocation(line: 731, column: 28, scope: !3604)
!3685 = !DILocation(line: 731, column: 7, scope: !3604)
!3686 = !DILocation(line: 732, column: 34, scope: !3604)
!3687 = !DILocation(line: 732, column: 38, scope: !3604)
!3688 = !DILocation(line: 732, column: 50, scope: !3604)
!3689 = !DILocation(line: 732, column: 54, scope: !3604)
!3690 = !DILocation(line: 732, column: 67, scope: !3604)
!3691 = !DILocation(line: 732, column: 7, scope: !3604)
!3692 = !DILocation(line: 733, column: 7, scope: !3604)
!3693 = !DILocation(line: 738, column: 7, scope: !3604)
!3694 = !DILocation(line: 739, column: 5, scope: !3604)
!3695 = !DILocation(line: 740, column: 1, scope: !3567)
!3696 = distinct !DISubprogram(name: "tree_is_indexable", scope: !3, file: !3, line: 637, type: !3062, scopeLine: 638, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3697 = !DILocalVariable(name: "t", arg: 1, scope: !3696, file: !3, line: 637, type: !1012)
!3698 = !DILocation(line: 637, column: 25, scope: !3696)
!3699 = !DILocation(line: 639, column: 7, scope: !3700)
!3700 = distinct !DILexicalBlock(scope: !3696, file: !3, line: 639, column: 7)
!3701 = !DILocation(line: 639, column: 21, scope: !3700)
!3702 = !DILocation(line: 639, column: 7, scope: !3696)
!3703 = !DILocation(line: 640, column: 5, scope: !3700)
!3704 = !DILocation(line: 641, column: 12, scope: !3705)
!3705 = distinct !DILexicalBlock(scope: !3700, file: !3, line: 641, column: 12)
!3706 = !DILocation(line: 641, column: 26, scope: !3705)
!3707 = !DILocation(line: 641, column: 38, scope: !3705)
!3708 = !DILocation(line: 641, column: 64, scope: !3705)
!3709 = !DILocation(line: 641, column: 41, scope: !3705)
!3710 = !DILocation(line: 642, column: 5, scope: !3705)
!3711 = !DILocation(line: 642, column: 9, scope: !3705)
!3712 = !DILocation(line: 641, column: 12, scope: !3700)
!3713 = !DILocation(line: 643, column: 5, scope: !3705)
!3714 = !DILocation(line: 645, column: 13, scope: !3705)
!3715 = !DILocation(line: 645, column: 24, scope: !3705)
!3716 = !DILocation(line: 645, column: 27, scope: !3705)
!3717 = !DILocation(line: 645, column: 38, scope: !3705)
!3718 = !DILocation(line: 645, column: 41, scope: !3705)
!3719 = !DILocation(line: 645, column: 55, scope: !3705)
!3720 = !DILocation(line: 645, column: 12, scope: !3705)
!3721 = !DILocation(line: 645, column: 5, scope: !3705)
!3722 = !DILocation(line: 646, column: 1, scope: !3696)
!3723 = distinct !DISubprogram(name: "output_type_ref", scope: !3, file: !3, line: 314, type: !3172, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3724 = !DILocalVariable(name: "ob", arg: 1, scope: !3723, file: !3, line: 314, type: !932)
!3725 = !DILocation(line: 314, column: 39, scope: !3723)
!3726 = !DILocalVariable(name: "node", arg: 2, scope: !3723, file: !3, line: 314, type: !1012)
!3727 = !DILocation(line: 314, column: 48, scope: !3723)
!3728 = !DILocation(line: 316, column: 24, scope: !3723)
!3729 = !DILocation(line: 316, column: 3, scope: !3723)
!3730 = !DILocation(line: 317, column: 30, scope: !3723)
!3731 = !DILocation(line: 317, column: 34, scope: !3723)
!3732 = !DILocation(line: 317, column: 46, scope: !3723)
!3733 = !DILocation(line: 317, column: 50, scope: !3723)
!3734 = !DILocation(line: 317, column: 63, scope: !3723)
!3735 = !DILocation(line: 317, column: 3, scope: !3723)
!3736 = !DILocation(line: 318, column: 1, scope: !3723)
!3737 = distinct !DISubprogram(name: "output_string", scope: !3, file: !3, line: 220, type: !3738, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3738 = !DISubroutineType(types: !3739)
!3739 = !{null, !932, !2615, !1214}
!3740 = !DILocalVariable(name: "ob", arg: 1, scope: !3737, file: !3, line: 220, type: !932)
!3741 = !DILocation(line: 220, column: 37, scope: !3737)
!3742 = !DILocalVariable(name: "index_stream", arg: 2, scope: !3737, file: !3, line: 221, type: !2615)
!3743 = !DILocation(line: 221, column: 35, scope: !3737)
!3744 = !DILocalVariable(name: "string", arg: 3, scope: !3737, file: !3, line: 222, type: !1214)
!3745 = !DILocation(line: 222, column: 21, scope: !3737)
!3746 = !DILocation(line: 224, column: 7, scope: !3747)
!3747 = distinct !DILexicalBlock(scope: !3737, file: !3, line: 224, column: 7)
!3748 = !DILocation(line: 224, column: 7, scope: !3737)
!3749 = !DILocation(line: 226, column: 34, scope: !3750)
!3750 = distinct !DILexicalBlock(scope: !3747, file: !3, line: 225, column: 5)
!3751 = !DILocation(line: 226, column: 7, scope: !3750)
!3752 = !DILocation(line: 227, column: 34, scope: !3750)
!3753 = !DILocation(line: 227, column: 38, scope: !3750)
!3754 = !DILocation(line: 227, column: 52, scope: !3750)
!3755 = !DILocation(line: 227, column: 68, scope: !3750)
!3756 = !DILocation(line: 227, column: 60, scope: !3750)
!3757 = !DILocation(line: 227, column: 76, scope: !3750)
!3758 = !DILocation(line: 227, column: 7, scope: !3750)
!3759 = !DILocation(line: 228, column: 5, scope: !3750)
!3760 = !DILocation(line: 230, column: 32, scope: !3747)
!3761 = !DILocation(line: 230, column: 5, scope: !3747)
!3762 = !DILocation(line: 231, column: 1, scope: !3737)
!3763 = distinct !DISubprogram(name: "output_string_with_length", scope: !3, file: !3, line: 174, type: !3764, scopeLine: 178, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3764 = !DISubroutineType(types: !3765)
!3765 = !{null, !932, !2615, !1214, !7}
!3766 = !DILocalVariable(name: "ob", arg: 1, scope: !3763, file: !3, line: 174, type: !932)
!3767 = !DILocation(line: 174, column: 49, scope: !3763)
!3768 = !DILocalVariable(name: "index_stream", arg: 2, scope: !3763, file: !3, line: 175, type: !2615)
!3769 = !DILocation(line: 175, column: 33, scope: !3763)
!3770 = !DILocalVariable(name: "s", arg: 3, scope: !3763, file: !3, line: 176, type: !1214)
!3771 = !DILocation(line: 176, column: 19, scope: !3763)
!3772 = !DILocalVariable(name: "len", arg: 4, scope: !3763, file: !3, line: 177, type: !7)
!3773 = !DILocation(line: 177, column: 20, scope: !3763)
!3774 = !DILocalVariable(name: "slot", scope: !3763, file: !3, line: 179, type: !2665)
!3775 = !DILocation(line: 179, column: 24, scope: !3763)
!3776 = !DILocalVariable(name: "s_slot", scope: !3763, file: !3, line: 180, type: !2658)
!3777 = !DILocation(line: 180, column: 22, scope: !3763)
!3778 = !DILocalVariable(name: "string", scope: !3763, file: !3, line: 181, type: !1279)
!3779 = !DILocation(line: 181, column: 9, scope: !3763)
!3780 = !DILocation(line: 181, column: 36, scope: !3763)
!3781 = !DILocation(line: 181, column: 40, scope: !3763)
!3782 = !DILocation(line: 181, column: 27, scope: !3763)
!3783 = !DILocation(line: 182, column: 11, scope: !3763)
!3784 = !DILocation(line: 182, column: 19, scope: !3763)
!3785 = !DILocation(line: 182, column: 22, scope: !3763)
!3786 = !DILocation(line: 182, column: 3, scope: !3763)
!3787 = !DILocation(line: 183, column: 3, scope: !3763)
!3788 = !DILocation(line: 183, column: 10, scope: !3763)
!3789 = !DILocation(line: 183, column: 15, scope: !3763)
!3790 = !DILocation(line: 185, column: 14, scope: !3763)
!3791 = !DILocation(line: 185, column: 10, scope: !3763)
!3792 = !DILocation(line: 185, column: 12, scope: !3763)
!3793 = !DILocation(line: 186, column: 16, scope: !3763)
!3794 = !DILocation(line: 186, column: 10, scope: !3763)
!3795 = !DILocation(line: 186, column: 14, scope: !3763)
!3796 = !DILocation(line: 187, column: 10, scope: !3763)
!3797 = !DILocation(line: 187, column: 19, scope: !3763)
!3798 = !DILocation(line: 189, column: 50, scope: !3763)
!3799 = !DILocation(line: 189, column: 54, scope: !3763)
!3800 = !DILocation(line: 190, column: 8, scope: !3763)
!3801 = !DILocation(line: 189, column: 34, scope: !3763)
!3802 = !DILocation(line: 189, column: 10, scope: !3763)
!3803 = !DILocation(line: 189, column: 8, scope: !3763)
!3804 = !DILocation(line: 191, column: 8, scope: !3805)
!3805 = distinct !DILexicalBlock(scope: !3763, file: !3, line: 191, column: 7)
!3806 = !DILocation(line: 191, column: 7, scope: !3805)
!3807 = !DILocation(line: 191, column: 13, scope: !3805)
!3808 = !DILocation(line: 191, column: 7, scope: !3763)
!3809 = !DILocalVariable(name: "string_stream", scope: !3810, file: !3, line: 193, type: !2615)
!3810 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 192, column: 5)
!3811 = !DILocation(line: 193, column: 33, scope: !3810)
!3812 = !DILocation(line: 193, column: 49, scope: !3810)
!3813 = !DILocation(line: 193, column: 53, scope: !3810)
!3814 = !DILocalVariable(name: "start", scope: !3810, file: !3, line: 194, type: !7)
!3815 = !DILocation(line: 194, column: 20, scope: !3810)
!3816 = !DILocation(line: 194, column: 28, scope: !3810)
!3817 = !DILocation(line: 194, column: 43, scope: !3810)
!3818 = !DILocalVariable(name: "new_slot", scope: !3810, file: !3, line: 195, type: !2663)
!3819 = !DILocation(line: 195, column: 27, scope: !3810)
!3820 = !DILocation(line: 196, column: 27, scope: !3810)
!3821 = !DILocation(line: 196, column: 4, scope: !3810)
!3822 = !DILocalVariable(name: "i", scope: !3810, file: !3, line: 197, type: !7)
!3823 = !DILocation(line: 197, column: 20, scope: !3810)
!3824 = !DILocation(line: 199, column: 21, scope: !3810)
!3825 = !DILocation(line: 199, column: 7, scope: !3810)
!3826 = !DILocation(line: 199, column: 17, scope: !3810)
!3827 = !DILocation(line: 199, column: 19, scope: !3810)
!3828 = !DILocation(line: 200, column: 23, scope: !3810)
!3829 = !DILocation(line: 200, column: 7, scope: !3810)
!3830 = !DILocation(line: 200, column: 17, scope: !3810)
!3831 = !DILocation(line: 200, column: 21, scope: !3810)
!3832 = !DILocation(line: 201, column: 28, scope: !3810)
!3833 = !DILocation(line: 201, column: 7, scope: !3810)
!3834 = !DILocation(line: 201, column: 17, scope: !3810)
!3835 = !DILocation(line: 201, column: 26, scope: !3810)
!3836 = !DILocation(line: 202, column: 15, scope: !3810)
!3837 = !DILocation(line: 202, column: 8, scope: !3810)
!3838 = !DILocation(line: 202, column: 13, scope: !3810)
!3839 = !DILocation(line: 203, column: 34, scope: !3810)
!3840 = !DILocation(line: 203, column: 48, scope: !3810)
!3841 = !DILocation(line: 203, column: 7, scope: !3810)
!3842 = !DILocation(line: 204, column: 34, scope: !3810)
!3843 = !DILocation(line: 204, column: 49, scope: !3810)
!3844 = !DILocation(line: 204, column: 7, scope: !3810)
!3845 = !DILocation(line: 205, column: 14, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3810, file: !3, line: 205, column: 7)
!3847 = !DILocation(line: 205, column: 12, scope: !3846)
!3848 = !DILocation(line: 205, column: 19, scope: !3849)
!3849 = distinct !DILexicalBlock(scope: !3846, file: !3, line: 205, column: 7)
!3850 = !DILocation(line: 205, column: 23, scope: !3849)
!3851 = !DILocation(line: 205, column: 21, scope: !3849)
!3852 = !DILocation(line: 205, column: 7, scope: !3846)
!3853 = !DILocation(line: 206, column: 23, scope: !3849)
!3854 = !DILocation(line: 206, column: 38, scope: !3849)
!3855 = !DILocation(line: 206, column: 45, scope: !3849)
!3856 = !DILocation(line: 206, column: 2, scope: !3849)
!3857 = !DILocation(line: 205, column: 29, scope: !3849)
!3858 = !DILocation(line: 205, column: 7, scope: !3849)
!3859 = distinct !{!3859, !3852, !3860}
!3860 = !DILocation(line: 206, column: 47, scope: !3846)
!3861 = !DILocation(line: 207, column: 5, scope: !3810)
!3862 = !DILocalVariable(name: "old_slot", scope: !3863, file: !3, line: 210, type: !2663)
!3863 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 209, column: 5)
!3864 = !DILocation(line: 210, column: 27, scope: !3863)
!3865 = !DILocation(line: 210, column: 61, scope: !3863)
!3866 = !DILocation(line: 210, column: 60, scope: !3863)
!3867 = !DILocation(line: 211, column: 34, scope: !3863)
!3868 = !DILocation(line: 211, column: 48, scope: !3863)
!3869 = !DILocation(line: 211, column: 58, scope: !3863)
!3870 = !DILocation(line: 211, column: 7, scope: !3863)
!3871 = !DILocation(line: 212, column: 13, scope: !3863)
!3872 = !DILocation(line: 212, column: 7, scope: !3863)
!3873 = !DILocation(line: 214, column: 1, scope: !3763)
!3874 = distinct !DISubprogram(name: "lto_output_tree_header", scope: !3, file: !3, line: 1193, type: !3080, scopeLine: 1194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3875 = !DILocalVariable(name: "ob", arg: 1, scope: !3874, file: !3, line: 1193, type: !932)
!3876 = !DILocation(line: 1193, column: 46, scope: !3874)
!3877 = !DILocalVariable(name: "expr", arg: 2, scope: !3874, file: !3, line: 1193, type: !1012)
!3878 = !DILocation(line: 1193, column: 55, scope: !3874)
!3879 = !DILocalVariable(name: "ix", arg: 3, scope: !3874, file: !3, line: 1193, type: !962)
!3880 = !DILocation(line: 1193, column: 65, scope: !3874)
!3881 = !DILocalVariable(name: "tag", scope: !3874, file: !3, line: 1195, type: !604)
!3882 = !DILocation(line: 1195, column: 17, scope: !3874)
!3883 = !DILocalVariable(name: "code", scope: !3874, file: !3, line: 1196, type: !148)
!3884 = !DILocation(line: 1196, column: 18, scope: !3874)
!3885 = !DILocation(line: 1199, column: 10, scope: !3874)
!3886 = !DILocation(line: 1199, column: 8, scope: !3874)
!3887 = !DILocation(line: 1200, column: 27, scope: !3888)
!3888 = distinct !DILexicalBlock(scope: !3874, file: !3, line: 1200, column: 7)
!3889 = !DILocation(line: 1200, column: 8, scope: !3888)
!3890 = !DILocation(line: 1200, column: 7, scope: !3874)
!3891 = !DILocation(line: 1202, column: 22, scope: !3888)
!3892 = !DILocation(line: 1202, column: 7, scope: !3888)
!3893 = !DILocation(line: 1201, column: 5, scope: !3888)
!3894 = !DILocation(line: 1208, column: 31, scope: !3874)
!3895 = !DILocation(line: 1208, column: 9, scope: !3874)
!3896 = !DILocation(line: 1208, column: 7, scope: !3874)
!3897 = !DILocation(line: 1209, column: 24, scope: !3874)
!3898 = !DILocation(line: 1209, column: 28, scope: !3874)
!3899 = !DILocation(line: 1209, column: 3, scope: !3874)
!3900 = !DILocation(line: 1210, column: 19, scope: !3874)
!3901 = !DILocation(line: 1210, column: 23, scope: !3874)
!3902 = !DILocation(line: 1210, column: 3, scope: !3874)
!3903 = !DILocation(line: 1224, column: 7, scope: !3904)
!3904 = distinct !DILexicalBlock(scope: !3874, file: !3, line: 1224, column: 7)
!3905 = !DILocation(line: 1224, column: 7, scope: !3874)
!3906 = !DILocation(line: 1225, column: 24, scope: !3904)
!3907 = !DILocation(line: 1225, column: 28, scope: !3904)
!3908 = !DILocation(line: 1225, column: 32, scope: !3904)
!3909 = !DILocation(line: 1225, column: 45, scope: !3904)
!3910 = !DILocation(line: 1225, column: 5, scope: !3904)
!3911 = !DILocation(line: 1226, column: 12, scope: !3912)
!3912 = distinct !DILexicalBlock(scope: !3904, file: !3, line: 1226, column: 12)
!3913 = !DILocation(line: 1226, column: 12, scope: !3904)
!3914 = !DILocation(line: 1227, column: 24, scope: !3912)
!3915 = !DILocation(line: 1227, column: 28, scope: !3912)
!3916 = !DILocation(line: 1227, column: 32, scope: !3912)
!3917 = !DILocation(line: 1227, column: 45, scope: !3912)
!3918 = !DILocation(line: 1227, column: 5, scope: !3912)
!3919 = !DILocation(line: 1228, column: 12, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3912, file: !3, line: 1228, column: 12)
!3921 = !DILocation(line: 1228, column: 12, scope: !3912)
!3922 = !DILocation(line: 1229, column: 21, scope: !3920)
!3923 = !DILocation(line: 1229, column: 25, scope: !3920)
!3924 = !DILocation(line: 1229, column: 5, scope: !3920)
!3925 = !DILocation(line: 1230, column: 12, scope: !3926)
!3926 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 1230, column: 12)
!3927 = !DILocation(line: 1230, column: 12, scope: !3920)
!3928 = !DILocation(line: 1231, column: 21, scope: !3926)
!3929 = !DILocation(line: 1231, column: 25, scope: !3926)
!3930 = !DILocation(line: 1231, column: 5, scope: !3926)
!3931 = !DILocation(line: 1232, column: 1, scope: !3874)
!3932 = distinct !DISubprogram(name: "pack_value_fields", scope: !3, file: !3, line: 547, type: !3933, scopeLine: 548, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!3933 = !DISubroutineType(types: !3934)
!3934 = !{!2844, !1012}
!3935 = !DILocalVariable(name: "expr", arg: 1, scope: !3932, file: !3, line: 547, type: !1012)
!3936 = !DILocation(line: 547, column: 25, scope: !3932)
!3937 = !DILocalVariable(name: "code", scope: !3932, file: !3, line: 549, type: !148)
!3938 = !DILocation(line: 549, column: 18, scope: !3932)
!3939 = !DILocalVariable(name: "bp", scope: !3932, file: !3, line: 550, type: !2844)
!3940 = !DILocation(line: 550, column: 21, scope: !3932)
!3941 = !DILocation(line: 552, column: 10, scope: !3932)
!3942 = !DILocation(line: 552, column: 8, scope: !3932)
!3943 = !DILocation(line: 553, column: 8, scope: !3932)
!3944 = !DILocation(line: 553, column: 6, scope: !3932)
!3945 = !DILocation(line: 557, column: 30, scope: !3932)
!3946 = !DILocation(line: 557, column: 34, scope: !3932)
!3947 = !DILocation(line: 557, column: 3, scope: !3932)
!3948 = !DILocation(line: 559, column: 7, scope: !3949)
!3949 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 559, column: 7)
!3950 = !DILocation(line: 559, column: 7, scope: !3932)
!3951 = !DILocation(line: 560, column: 36, scope: !3949)
!3952 = !DILocation(line: 560, column: 40, scope: !3949)
!3953 = !DILocation(line: 560, column: 5, scope: !3949)
!3954 = !DILocation(line: 562, column: 7, scope: !3955)
!3955 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 562, column: 7)
!3956 = !DILocation(line: 562, column: 7, scope: !3932)
!3957 = !DILocation(line: 563, column: 37, scope: !3955)
!3958 = !DILocation(line: 563, column: 41, scope: !3955)
!3959 = !DILocation(line: 563, column: 5, scope: !3955)
!3960 = !DILocation(line: 565, column: 7, scope: !3961)
!3961 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 565, column: 7)
!3962 = !DILocation(line: 565, column: 7, scope: !3932)
!3963 = !DILocation(line: 566, column: 39, scope: !3961)
!3964 = !DILocation(line: 566, column: 43, scope: !3961)
!3965 = !DILocation(line: 566, column: 5, scope: !3961)
!3966 = !DILocation(line: 568, column: 7, scope: !3967)
!3967 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 568, column: 7)
!3968 = !DILocation(line: 568, column: 7, scope: !3932)
!3969 = !DILocation(line: 569, column: 37, scope: !3967)
!3970 = !DILocation(line: 569, column: 41, scope: !3967)
!3971 = !DILocation(line: 569, column: 5, scope: !3967)
!3972 = !DILocation(line: 571, column: 7, scope: !3973)
!3973 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 571, column: 7)
!3974 = !DILocation(line: 571, column: 7, scope: !3932)
!3975 = !DILocation(line: 572, column: 41, scope: !3973)
!3976 = !DILocation(line: 572, column: 45, scope: !3973)
!3977 = !DILocation(line: 572, column: 5, scope: !3973)
!3978 = !DILocation(line: 574, column: 7, scope: !3979)
!3979 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 574, column: 7)
!3980 = !DILocation(line: 574, column: 7, scope: !3932)
!3981 = !DILocation(line: 575, column: 41, scope: !3979)
!3982 = !DILocation(line: 575, column: 45, scope: !3979)
!3983 = !DILocation(line: 575, column: 5, scope: !3979)
!3984 = !DILocation(line: 577, column: 7, scope: !3985)
!3985 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 577, column: 7)
!3986 = !DILocation(line: 577, column: 7, scope: !3932)
!3987 = !DILocation(line: 578, column: 32, scope: !3985)
!3988 = !DILocation(line: 578, column: 36, scope: !3985)
!3989 = !DILocation(line: 578, column: 5, scope: !3985)
!3990 = !DILocation(line: 580, column: 7, scope: !3991)
!3991 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 580, column: 7)
!3992 = !DILocation(line: 580, column: 7, scope: !3932)
!3993 = !DILocation(line: 581, column: 33, scope: !3991)
!3994 = !DILocation(line: 581, column: 37, scope: !3991)
!3995 = !DILocation(line: 581, column: 5, scope: !3991)
!3996 = !DILocation(line: 583, column: 7, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 583, column: 7)
!3998 = !DILocation(line: 583, column: 7, scope: !3932)
!3999 = !DILocation(line: 586, column: 7, scope: !4000)
!4000 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 584, column: 5)
!4001 = !DILocation(line: 587, column: 5, scope: !4000)
!4002 = !DILocation(line: 589, column: 7, scope: !4003)
!4003 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 589, column: 7)
!4004 = !DILocation(line: 589, column: 7, scope: !3932)
!4005 = !DILocation(line: 592, column: 7, scope: !4006)
!4006 = distinct !DILexicalBlock(scope: !4003, file: !3, line: 590, column: 5)
!4007 = !DILocation(line: 593, column: 5, scope: !4006)
!4008 = !DILocation(line: 595, column: 7, scope: !4009)
!4009 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 595, column: 7)
!4010 = !DILocation(line: 595, column: 7, scope: !3932)
!4011 = !DILocation(line: 598, column: 7, scope: !4012)
!4012 = distinct !DILexicalBlock(scope: !4009, file: !3, line: 596, column: 5)
!4013 = !DILocation(line: 599, column: 5, scope: !4012)
!4014 = !DILocation(line: 601, column: 10, scope: !3932)
!4015 = !DILocation(line: 601, column: 3, scope: !3932)
!4016 = distinct !DISubprogram(name: "lto_output_tree_pointers", scope: !3, file: !3, line: 1107, type: !2909, scopeLine: 1108, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4017 = !DILocalVariable(name: "ob", arg: 1, scope: !4016, file: !3, line: 1107, type: !932)
!4018 = !DILocation(line: 1107, column: 48, scope: !4016)
!4019 = !DILocalVariable(name: "expr", arg: 2, scope: !4016, file: !3, line: 1107, type: !1012)
!4020 = !DILocation(line: 1107, column: 57, scope: !4016)
!4021 = !DILocalVariable(name: "ref_p", arg: 3, scope: !4016, file: !3, line: 1107, type: !1130)
!4022 = !DILocation(line: 1107, column: 68, scope: !4016)
!4023 = !DILocalVariable(name: "code", scope: !4016, file: !3, line: 1109, type: !148)
!4024 = !DILocation(line: 1109, column: 18, scope: !4016)
!4025 = !DILocation(line: 1111, column: 10, scope: !4016)
!4026 = !DILocation(line: 1111, column: 8, scope: !4016)
!4027 = !DILocation(line: 1113, column: 7, scope: !4028)
!4028 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1113, column: 7)
!4029 = !DILocation(line: 1113, column: 7, scope: !4016)
!4030 = !DILocation(line: 1114, column: 41, scope: !4028)
!4031 = !DILocation(line: 1114, column: 45, scope: !4028)
!4032 = !DILocation(line: 1114, column: 51, scope: !4028)
!4033 = !DILocation(line: 1114, column: 5, scope: !4028)
!4034 = !DILocation(line: 1116, column: 7, scope: !4035)
!4035 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1116, column: 7)
!4036 = !DILocation(line: 1116, column: 7, scope: !4016)
!4037 = !DILocation(line: 1117, column: 41, scope: !4035)
!4038 = !DILocation(line: 1117, column: 45, scope: !4035)
!4039 = !DILocation(line: 1117, column: 51, scope: !4035)
!4040 = !DILocation(line: 1117, column: 5, scope: !4035)
!4041 = !DILocation(line: 1119, column: 7, scope: !4042)
!4042 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1119, column: 7)
!4043 = !DILocation(line: 1119, column: 7, scope: !4016)
!4044 = !DILocation(line: 1120, column: 42, scope: !4042)
!4045 = !DILocation(line: 1120, column: 46, scope: !4042)
!4046 = !DILocation(line: 1120, column: 52, scope: !4042)
!4047 = !DILocation(line: 1120, column: 5, scope: !4042)
!4048 = !DILocation(line: 1122, column: 7, scope: !4049)
!4049 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1122, column: 7)
!4050 = !DILocation(line: 1122, column: 7, scope: !4016)
!4051 = !DILocation(line: 1123, column: 47, scope: !4049)
!4052 = !DILocation(line: 1123, column: 51, scope: !4049)
!4053 = !DILocation(line: 1123, column: 57, scope: !4049)
!4054 = !DILocation(line: 1123, column: 5, scope: !4049)
!4055 = !DILocation(line: 1125, column: 7, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1125, column: 7)
!4057 = !DILocation(line: 1125, column: 7, scope: !4016)
!4058 = !DILocation(line: 1126, column: 46, scope: !4056)
!4059 = !DILocation(line: 1126, column: 50, scope: !4056)
!4060 = !DILocation(line: 1126, column: 56, scope: !4056)
!4061 = !DILocation(line: 1126, column: 5, scope: !4056)
!4062 = !DILocation(line: 1128, column: 7, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1128, column: 7)
!4064 = !DILocation(line: 1128, column: 7, scope: !4016)
!4065 = !DILocation(line: 1129, column: 50, scope: !4063)
!4066 = !DILocation(line: 1129, column: 54, scope: !4063)
!4067 = !DILocation(line: 1129, column: 60, scope: !4063)
!4068 = !DILocation(line: 1129, column: 5, scope: !4063)
!4069 = !DILocation(line: 1131, column: 7, scope: !4070)
!4070 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1131, column: 7)
!4071 = !DILocation(line: 1131, column: 7, scope: !4016)
!4072 = !DILocation(line: 1132, column: 48, scope: !4070)
!4073 = !DILocation(line: 1132, column: 52, scope: !4070)
!4074 = !DILocation(line: 1132, column: 58, scope: !4070)
!4075 = !DILocation(line: 1132, column: 5, scope: !4070)
!4076 = !DILocation(line: 1134, column: 7, scope: !4077)
!4077 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1134, column: 7)
!4078 = !DILocation(line: 1134, column: 7, scope: !4016)
!4079 = !DILocation(line: 1135, column: 45, scope: !4077)
!4080 = !DILocation(line: 1135, column: 49, scope: !4077)
!4081 = !DILocation(line: 1135, column: 55, scope: !4077)
!4082 = !DILocation(line: 1135, column: 5, scope: !4077)
!4083 = !DILocation(line: 1137, column: 7, scope: !4084)
!4084 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1137, column: 7)
!4085 = !DILocation(line: 1137, column: 7, scope: !4016)
!4086 = !DILocation(line: 1138, column: 48, scope: !4084)
!4087 = !DILocation(line: 1138, column: 52, scope: !4084)
!4088 = !DILocation(line: 1138, column: 58, scope: !4084)
!4089 = !DILocation(line: 1138, column: 5, scope: !4084)
!4090 = !DILocation(line: 1140, column: 7, scope: !4091)
!4091 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1140, column: 7)
!4092 = !DILocation(line: 1140, column: 7, scope: !4016)
!4093 = !DILocation(line: 1141, column: 39, scope: !4091)
!4094 = !DILocation(line: 1141, column: 43, scope: !4091)
!4095 = !DILocation(line: 1141, column: 49, scope: !4091)
!4096 = !DILocation(line: 1141, column: 5, scope: !4091)
!4097 = !DILocation(line: 1143, column: 7, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1143, column: 7)
!4099 = !DILocation(line: 1143, column: 7, scope: !4016)
!4100 = !DILocation(line: 1144, column: 39, scope: !4098)
!4101 = !DILocation(line: 1144, column: 43, scope: !4098)
!4102 = !DILocation(line: 1144, column: 49, scope: !4098)
!4103 = !DILocation(line: 1144, column: 5, scope: !4098)
!4104 = !DILocation(line: 1146, column: 7, scope: !4105)
!4105 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1146, column: 7)
!4106 = !DILocation(line: 1146, column: 7, scope: !4016)
!4107 = !DILocation(line: 1147, column: 38, scope: !4105)
!4108 = !DILocation(line: 1147, column: 42, scope: !4105)
!4109 = !DILocation(line: 1147, column: 48, scope: !4105)
!4110 = !DILocation(line: 1147, column: 5, scope: !4105)
!4111 = !DILocation(line: 1149, column: 7, scope: !4112)
!4112 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1149, column: 7)
!4113 = !DILocation(line: 1149, column: 7, scope: !4016)
!4114 = !DILocation(line: 1150, column: 38, scope: !4112)
!4115 = !DILocation(line: 1150, column: 42, scope: !4112)
!4116 = !DILocation(line: 1150, column: 48, scope: !4112)
!4117 = !DILocation(line: 1150, column: 5, scope: !4112)
!4118 = !DILocation(line: 1152, column: 7, scope: !4119)
!4119 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1152, column: 7)
!4120 = !DILocation(line: 1152, column: 7, scope: !4016)
!4121 = !DILocation(line: 1155, column: 7, scope: !4122)
!4122 = distinct !DILexicalBlock(scope: !4119, file: !3, line: 1153, column: 5)
!4123 = !DILocation(line: 1156, column: 5, scope: !4122)
!4124 = !DILocation(line: 1158, column: 7, scope: !4125)
!4125 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1158, column: 7)
!4126 = !DILocation(line: 1158, column: 7, scope: !4016)
!4127 = !DILocation(line: 1159, column: 40, scope: !4125)
!4128 = !DILocation(line: 1159, column: 44, scope: !4125)
!4129 = !DILocation(line: 1159, column: 50, scope: !4125)
!4130 = !DILocation(line: 1159, column: 5, scope: !4125)
!4131 = !DILocation(line: 1161, column: 7, scope: !4132)
!4132 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1161, column: 7)
!4133 = !DILocation(line: 1161, column: 7, scope: !4016)
!4134 = !DILocation(line: 1162, column: 40, scope: !4132)
!4135 = !DILocation(line: 1162, column: 44, scope: !4132)
!4136 = !DILocation(line: 1162, column: 50, scope: !4132)
!4137 = !DILocation(line: 1162, column: 5, scope: !4132)
!4138 = !DILocation(line: 1164, column: 7, scope: !4139)
!4139 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1164, column: 7)
!4140 = !DILocation(line: 1164, column: 7, scope: !4016)
!4141 = !DILocation(line: 1165, column: 46, scope: !4139)
!4142 = !DILocation(line: 1165, column: 50, scope: !4139)
!4143 = !DILocation(line: 1165, column: 56, scope: !4139)
!4144 = !DILocation(line: 1165, column: 5, scope: !4139)
!4145 = !DILocation(line: 1167, column: 7, scope: !4146)
!4146 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1167, column: 7)
!4147 = !DILocation(line: 1167, column: 7, scope: !4016)
!4148 = !DILocation(line: 1170, column: 7, scope: !4149)
!4149 = distinct !DILexicalBlock(scope: !4146, file: !3, line: 1168, column: 5)
!4150 = !DILocation(line: 1171, column: 5, scope: !4149)
!4151 = !DILocation(line: 1173, column: 7, scope: !4152)
!4152 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1173, column: 7)
!4153 = !DILocation(line: 1173, column: 7, scope: !4016)
!4154 = !DILocation(line: 1176, column: 7, scope: !4155)
!4155 = distinct !DILexicalBlock(scope: !4152, file: !3, line: 1174, column: 5)
!4156 = !DILocation(line: 1177, column: 5, scope: !4155)
!4157 = !DILocation(line: 1179, column: 7, scope: !4158)
!4158 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1179, column: 7)
!4159 = !DILocation(line: 1179, column: 7, scope: !4016)
!4160 = !DILocation(line: 1180, column: 5, scope: !4158)
!4161 = !DILocation(line: 1182, column: 7, scope: !4162)
!4162 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1182, column: 7)
!4163 = !DILocation(line: 1182, column: 7, scope: !4016)
!4164 = !DILocation(line: 1183, column: 5, scope: !4162)
!4165 = !DILocation(line: 1184, column: 1, scope: !4016)
!4166 = distinct !DISubprogram(name: "lto_is_streamable", scope: !6, file: !6, line: 1020, type: !3062, scopeLine: 1021, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4167 = !DILocalVariable(name: "expr", arg: 1, scope: !4166, file: !6, line: 1020, type: !1012)
!4168 = !DILocation(line: 1020, column: 25, scope: !4166)
!4169 = !DILocalVariable(name: "code", scope: !4166, file: !6, line: 1022, type: !148)
!4170 = !DILocation(line: 1022, column: 18, scope: !4166)
!4171 = !DILocation(line: 1022, column: 25, scope: !4166)
!4172 = !DILocation(line: 1026, column: 29, scope: !4166)
!4173 = !DILocation(line: 1026, column: 11, scope: !4166)
!4174 = !DILocation(line: 1027, column: 3, scope: !4166)
!4175 = !DILocation(line: 1027, column: 6, scope: !4166)
!4176 = !DILocation(line: 1027, column: 11, scope: !4166)
!4177 = !DILocation(line: 1028, column: 3, scope: !4166)
!4178 = !DILocation(line: 1028, column: 6, scope: !4166)
!4179 = !DILocation(line: 1028, column: 11, scope: !4166)
!4180 = !DILocation(line: 1029, column: 3, scope: !4166)
!4181 = !DILocation(line: 1029, column: 6, scope: !4166)
!4182 = !DILocation(line: 1029, column: 11, scope: !4166)
!4183 = !DILocation(line: 1030, column: 3, scope: !4166)
!4184 = !DILocation(line: 1030, column: 6, scope: !4166)
!4185 = !DILocation(line: 1030, column: 11, scope: !4166)
!4186 = !DILocation(line: 1031, column: 3, scope: !4166)
!4187 = !DILocation(line: 1031, column: 6, scope: !4166)
!4188 = !DILocation(line: 1031, column: 11, scope: !4166)
!4189 = !DILocation(line: 1032, column: 3, scope: !4166)
!4190 = !DILocation(line: 1032, column: 6, scope: !4166)
!4191 = !DILocation(line: 1032, column: 11, scope: !4166)
!4192 = !DILocation(line: 1033, column: 3, scope: !4166)
!4193 = !DILocation(line: 1033, column: 6, scope: !4166)
!4194 = !DILocation(line: 1033, column: 11, scope: !4166)
!4195 = !DILocation(line: 1034, column: 3, scope: !4166)
!4196 = !DILocation(line: 1034, column: 6, scope: !4166)
!4197 = !DILocation(line: 1034, column: 11, scope: !4166)
!4198 = !DILocation(line: 1035, column: 3, scope: !4166)
!4199 = !DILocation(line: 1035, column: 6, scope: !4166)
!4200 = !DILocation(line: 1035, column: 11, scope: !4166)
!4201 = !DILocation(line: 1036, column: 3, scope: !4166)
!4202 = !DILocation(line: 1036, column: 7, scope: !4166)
!4203 = !DILocation(line: 1036, column: 12, scope: !4166)
!4204 = !DILocation(line: 1037, column: 7, scope: !4166)
!4205 = !DILocation(line: 1037, column: 10, scope: !4166)
!4206 = !DILocation(line: 1037, column: 15, scope: !4166)
!4207 = !DILocation(line: 1038, column: 7, scope: !4166)
!4208 = !DILocation(line: 1038, column: 10, scope: !4166)
!4209 = !DILocation(line: 1038, column: 33, scope: !4166)
!4210 = !DILocation(line: 0, scope: !4166)
!4211 = !DILocation(line: 1026, column: 10, scope: !4166)
!4212 = !DILocation(line: 1026, column: 3, scope: !4166)
!4213 = distinct !DISubprogram(name: "output_string_cst", scope: !3, file: !3, line: 238, type: !4214, scopeLine: 241, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4214 = !DISubroutineType(types: !4215)
!4215 = !{null, !932, !2615, !1012}
!4216 = !DILocalVariable(name: "ob", arg: 1, scope: !4213, file: !3, line: 238, type: !932)
!4217 = !DILocation(line: 238, column: 41, scope: !4213)
!4218 = !DILocalVariable(name: "index_stream", arg: 2, scope: !4213, file: !3, line: 239, type: !2615)
!4219 = !DILocation(line: 239, column: 32, scope: !4213)
!4220 = !DILocalVariable(name: "string", arg: 3, scope: !4213, file: !3, line: 240, type: !1012)
!4221 = !DILocation(line: 240, column: 11, scope: !4213)
!4222 = !DILocation(line: 242, column: 7, scope: !4223)
!4223 = distinct !DILexicalBlock(scope: !4213, file: !3, line: 242, column: 7)
!4224 = !DILocation(line: 242, column: 7, scope: !4213)
!4225 = !DILocation(line: 244, column: 34, scope: !4226)
!4226 = distinct !DILexicalBlock(scope: !4223, file: !3, line: 243, column: 5)
!4227 = !DILocation(line: 244, column: 7, scope: !4226)
!4228 = !DILocation(line: 245, column: 34, scope: !4226)
!4229 = !DILocation(line: 245, column: 38, scope: !4226)
!4230 = !DILocation(line: 246, column: 6, scope: !4226)
!4231 = !DILocation(line: 247, column: 6, scope: !4226)
!4232 = !DILocation(line: 245, column: 7, scope: !4226)
!4233 = !DILocation(line: 248, column: 5, scope: !4226)
!4234 = !DILocation(line: 250, column: 32, scope: !4223)
!4235 = !DILocation(line: 250, column: 5, scope: !4223)
!4236 = !DILocation(line: 251, column: 1, scope: !4213)
!4237 = distinct !DISubprogram(name: "output_identifier", scope: !3, file: !3, line: 258, type: !4214, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4238 = !DILocalVariable(name: "ob", arg: 1, scope: !4237, file: !3, line: 258, type: !932)
!4239 = !DILocation(line: 258, column: 41, scope: !4237)
!4240 = !DILocalVariable(name: "index_stream", arg: 2, scope: !4237, file: !3, line: 259, type: !2615)
!4241 = !DILocation(line: 259, column: 32, scope: !4237)
!4242 = !DILocalVariable(name: "id", arg: 3, scope: !4237, file: !3, line: 260, type: !1012)
!4243 = !DILocation(line: 260, column: 11, scope: !4237)
!4244 = !DILocation(line: 262, column: 7, scope: !4245)
!4245 = distinct !DILexicalBlock(scope: !4237, file: !3, line: 262, column: 7)
!4246 = !DILocation(line: 262, column: 7, scope: !4237)
!4247 = !DILocation(line: 264, column: 34, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4245, file: !3, line: 263, column: 5)
!4249 = !DILocation(line: 264, column: 7, scope: !4248)
!4250 = !DILocation(line: 265, column: 34, scope: !4248)
!4251 = !DILocation(line: 265, column: 38, scope: !4248)
!4252 = !DILocation(line: 266, column: 6, scope: !4248)
!4253 = !DILocation(line: 267, column: 6, scope: !4248)
!4254 = !DILocation(line: 265, column: 7, scope: !4248)
!4255 = !DILocation(line: 268, column: 5, scope: !4248)
!4256 = !DILocation(line: 270, column: 32, scope: !4245)
!4257 = !DILocation(line: 270, column: 5, scope: !4245)
!4258 = !DILocation(line: 271, column: 1, scope: !4237)
!4259 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !149, file: !149, line: 182, type: !4260, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4260 = !DISubroutineType(types: !4261)
!4261 = !{!7, !4262}
!4262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4263, size: 64)
!4263 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1005)
!4264 = !DILocalVariable(name: "vec_", arg: 1, scope: !4259, file: !149, line: 182, type: !4262)
!4265 = !DILocation(line: 182, column: 1, scope: !4259)
!4266 = distinct !DISubprogram(name: "is_lang_specific", scope: !149, file: !149, line: 5458, type: !3062, scopeLine: 5459, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4267 = !DILocalVariable(name: "t", arg: 1, scope: !4266, file: !149, line: 5458, type: !1012)
!4268 = !DILocation(line: 5458, column: 24, scope: !4266)
!4269 = !DILocation(line: 5460, column: 10, scope: !4266)
!4270 = !DILocation(line: 5460, column: 24, scope: !4266)
!4271 = !DILocation(line: 5460, column: 37, scope: !4266)
!4272 = !DILocation(line: 5460, column: 40, scope: !4266)
!4273 = !DILocation(line: 5460, column: 54, scope: !4266)
!4274 = !DILocation(line: 5460, column: 3, scope: !4266)
!4275 = distinct !DISubprogram(name: "pack_ts_base_value_fields", scope: !3, file: !3, line: 325, type: !4276, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4276 = !DISubroutineType(types: !4277)
!4277 = !{null, !2844, !1012}
!4278 = !DILocalVariable(name: "bp", arg: 1, scope: !4275, file: !3, line: 325, type: !2844)
!4279 = !DILocation(line: 325, column: 46, scope: !4275)
!4280 = !DILocalVariable(name: "expr", arg: 2, scope: !4275, file: !3, line: 325, type: !1012)
!4281 = !DILocation(line: 325, column: 55, scope: !4275)
!4282 = !DILocation(line: 327, column: 18, scope: !4275)
!4283 = !DILocation(line: 327, column: 22, scope: !4275)
!4284 = !DILocation(line: 327, column: 3, scope: !4275)
!4285 = !DILocation(line: 328, column: 8, scope: !4286)
!4286 = distinct !DILexicalBlock(scope: !4275, file: !3, line: 328, column: 7)
!4287 = !DILocation(line: 328, column: 7, scope: !4275)
!4288 = !DILocation(line: 330, column: 22, scope: !4289)
!4289 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 329, column: 5)
!4290 = !DILocation(line: 330, column: 26, scope: !4289)
!4291 = !DILocation(line: 330, column: 7, scope: !4289)
!4292 = !DILocation(line: 331, column: 22, scope: !4289)
!4293 = !DILocation(line: 331, column: 26, scope: !4289)
!4294 = !DILocation(line: 331, column: 7, scope: !4289)
!4295 = !DILocation(line: 332, column: 22, scope: !4289)
!4296 = !DILocation(line: 332, column: 26, scope: !4289)
!4297 = !DILocation(line: 332, column: 7, scope: !4289)
!4298 = !DILocation(line: 337, column: 22, scope: !4289)
!4299 = !DILocation(line: 337, column: 26, scope: !4289)
!4300 = !DILocation(line: 337, column: 7, scope: !4289)
!4301 = !DILocation(line: 338, column: 5, scope: !4289)
!4302 = !DILocation(line: 339, column: 18, scope: !4275)
!4303 = !DILocation(line: 339, column: 22, scope: !4275)
!4304 = !DILocation(line: 339, column: 3, scope: !4275)
!4305 = !DILocation(line: 340, column: 18, scope: !4275)
!4306 = !DILocation(line: 340, column: 22, scope: !4275)
!4307 = !DILocation(line: 340, column: 3, scope: !4275)
!4308 = !DILocation(line: 341, column: 7, scope: !4309)
!4309 = distinct !DILexicalBlock(scope: !4275, file: !3, line: 341, column: 7)
!4310 = !DILocation(line: 341, column: 7, scope: !4275)
!4311 = !DILocation(line: 342, column: 20, scope: !4309)
!4312 = !DILocation(line: 342, column: 24, scope: !4309)
!4313 = !DILocation(line: 342, column: 5, scope: !4309)
!4314 = !DILocation(line: 343, column: 12, scope: !4315)
!4315 = distinct !DILexicalBlock(scope: !4309, file: !3, line: 343, column: 12)
!4316 = !DILocation(line: 343, column: 12, scope: !4309)
!4317 = !DILocation(line: 344, column: 20, scope: !4315)
!4318 = !DILocation(line: 344, column: 24, scope: !4315)
!4319 = !DILocation(line: 344, column: 5, scope: !4315)
!4320 = !DILocation(line: 346, column: 18, scope: !4275)
!4321 = !DILocation(line: 346, column: 22, scope: !4275)
!4322 = !DILocation(line: 346, column: 42, scope: !4275)
!4323 = !DILocation(line: 346, column: 3, scope: !4275)
!4324 = !DILocation(line: 347, column: 18, scope: !4275)
!4325 = !DILocation(line: 347, column: 22, scope: !4275)
!4326 = !DILocation(line: 347, column: 3, scope: !4275)
!4327 = !DILocation(line: 348, column: 18, scope: !4275)
!4328 = !DILocation(line: 348, column: 22, scope: !4275)
!4329 = !DILocation(line: 348, column: 3, scope: !4275)
!4330 = !DILocation(line: 349, column: 18, scope: !4275)
!4331 = !DILocation(line: 349, column: 22, scope: !4275)
!4332 = !DILocation(line: 349, column: 3, scope: !4275)
!4333 = !DILocation(line: 350, column: 18, scope: !4275)
!4334 = !DILocation(line: 350, column: 22, scope: !4275)
!4335 = !DILocation(line: 350, column: 3, scope: !4275)
!4336 = !DILocation(line: 351, column: 18, scope: !4275)
!4337 = !DILocation(line: 351, column: 22, scope: !4275)
!4338 = !DILocation(line: 351, column: 3, scope: !4275)
!4339 = !DILocation(line: 352, column: 18, scope: !4275)
!4340 = !DILocation(line: 352, column: 22, scope: !4275)
!4341 = !DILocation(line: 352, column: 3, scope: !4275)
!4342 = !DILocation(line: 353, column: 18, scope: !4275)
!4343 = !DILocation(line: 353, column: 22, scope: !4275)
!4344 = !DILocation(line: 353, column: 3, scope: !4275)
!4345 = !DILocation(line: 354, column: 7, scope: !4346)
!4346 = distinct !DILexicalBlock(scope: !4275, file: !3, line: 354, column: 7)
!4347 = !DILocation(line: 354, column: 7, scope: !4275)
!4348 = !DILocation(line: 355, column: 20, scope: !4346)
!4349 = !DILocation(line: 355, column: 24, scope: !4346)
!4350 = !DILocation(line: 355, column: 5, scope: !4346)
!4351 = !DILocation(line: 356, column: 7, scope: !4352)
!4352 = distinct !DILexicalBlock(scope: !4275, file: !3, line: 356, column: 7)
!4353 = !DILocation(line: 356, column: 24, scope: !4352)
!4354 = !DILocation(line: 356, column: 7, scope: !4275)
!4355 = !DILocation(line: 357, column: 20, scope: !4352)
!4356 = !DILocation(line: 357, column: 24, scope: !4352)
!4357 = !DILocation(line: 357, column: 5, scope: !4352)
!4358 = !DILocation(line: 358, column: 1, scope: !4275)
!4359 = distinct !DISubprogram(name: "pack_ts_real_cst_value_fields", scope: !3, file: !3, line: 365, type: !4276, scopeLine: 366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4360 = !DILocalVariable(name: "bp", arg: 1, scope: !4359, file: !3, line: 365, type: !2844)
!4361 = !DILocation(line: 365, column: 50, scope: !4359)
!4362 = !DILocalVariable(name: "expr", arg: 2, scope: !4359, file: !3, line: 365, type: !1012)
!4363 = !DILocation(line: 365, column: 59, scope: !4359)
!4364 = !DILocalVariable(name: "i", scope: !4359, file: !3, line: 367, type: !7)
!4365 = !DILocation(line: 367, column: 12, scope: !4359)
!4366 = !DILocalVariable(name: "r", scope: !4359, file: !3, line: 368, type: !1074)
!4367 = !DILocation(line: 368, column: 19, scope: !4359)
!4368 = !DILocation(line: 370, column: 7, scope: !4359)
!4369 = !DILocation(line: 371, column: 18, scope: !4359)
!4370 = !DILocation(line: 371, column: 24, scope: !4359)
!4371 = !DILocation(line: 371, column: 22, scope: !4359)
!4372 = !DILocation(line: 371, column: 3, scope: !4359)
!4373 = !DILocation(line: 372, column: 18, scope: !4359)
!4374 = !DILocation(line: 372, column: 24, scope: !4359)
!4375 = !DILocation(line: 372, column: 22, scope: !4359)
!4376 = !DILocation(line: 372, column: 3, scope: !4359)
!4377 = !DILocation(line: 373, column: 18, scope: !4359)
!4378 = !DILocation(line: 373, column: 24, scope: !4359)
!4379 = !DILocation(line: 373, column: 22, scope: !4359)
!4380 = !DILocation(line: 373, column: 3, scope: !4359)
!4381 = !DILocation(line: 374, column: 18, scope: !4359)
!4382 = !DILocation(line: 374, column: 24, scope: !4359)
!4383 = !DILocation(line: 374, column: 22, scope: !4359)
!4384 = !DILocation(line: 374, column: 3, scope: !4359)
!4385 = !DILocation(line: 375, column: 18, scope: !4359)
!4386 = !DILocation(line: 375, column: 24, scope: !4359)
!4387 = !DILocation(line: 375, column: 22, scope: !4359)
!4388 = !DILocation(line: 375, column: 3, scope: !4359)
!4389 = !DILocation(line: 376, column: 18, scope: !4359)
!4390 = !DILocation(line: 376, column: 24, scope: !4359)
!4391 = !DILocation(line: 376, column: 22, scope: !4359)
!4392 = !DILocation(line: 376, column: 3, scope: !4359)
!4393 = !DILocation(line: 377, column: 10, scope: !4394)
!4394 = distinct !DILexicalBlock(scope: !4359, file: !3, line: 377, column: 3)
!4395 = !DILocation(line: 377, column: 8, scope: !4394)
!4396 = !DILocation(line: 377, column: 15, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4394, file: !3, line: 377, column: 3)
!4398 = !DILocation(line: 377, column: 17, scope: !4397)
!4399 = !DILocation(line: 377, column: 3, scope: !4394)
!4400 = !DILocation(line: 378, column: 20, scope: !4397)
!4401 = !DILocation(line: 378, column: 26, scope: !4397)
!4402 = !DILocation(line: 378, column: 30, scope: !4397)
!4403 = !DILocation(line: 378, column: 24, scope: !4397)
!4404 = !DILocation(line: 378, column: 5, scope: !4397)
!4405 = !DILocation(line: 377, column: 27, scope: !4397)
!4406 = !DILocation(line: 377, column: 3, scope: !4397)
!4407 = distinct !{!4407, !4399, !4408}
!4408 = !DILocation(line: 378, column: 52, scope: !4394)
!4409 = !DILocation(line: 379, column: 1, scope: !4359)
!4410 = distinct !DISubprogram(name: "pack_ts_fixed_cst_value_fields", scope: !3, file: !3, line: 386, type: !4276, scopeLine: 387, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4411 = !DILocalVariable(name: "bp", arg: 1, scope: !4410, file: !3, line: 386, type: !2844)
!4412 = !DILocation(line: 386, column: 51, scope: !4410)
!4413 = !DILocalVariable(name: "expr", arg: 2, scope: !4410, file: !3, line: 386, type: !1012)
!4414 = !DILocation(line: 386, column: 60, scope: !4410)
!4415 = !DILocalVariable(name: "fv", scope: !4410, file: !3, line: 388, type: !1093)
!4416 = !DILocation(line: 388, column: 22, scope: !4410)
!4417 = !DILocation(line: 388, column: 27, scope: !4410)
!4418 = !DILocation(line: 389, column: 18, scope: !4410)
!4419 = !DILocation(line: 389, column: 25, scope: !4410)
!4420 = !DILocation(line: 389, column: 30, scope: !4410)
!4421 = !DILocation(line: 389, column: 3, scope: !4410)
!4422 = !DILocation(line: 390, column: 18, scope: !4410)
!4423 = !DILocation(line: 390, column: 25, scope: !4410)
!4424 = !DILocation(line: 390, column: 30, scope: !4410)
!4425 = !DILocation(line: 390, column: 3, scope: !4410)
!4426 = !DILocation(line: 391, column: 1, scope: !4410)
!4427 = distinct !DISubprogram(name: "pack_ts_decl_common_value_fields", scope: !3, file: !3, line: 398, type: !4276, scopeLine: 399, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4428 = !DILocalVariable(name: "bp", arg: 1, scope: !4427, file: !3, line: 398, type: !2844)
!4429 = !DILocation(line: 398, column: 53, scope: !4427)
!4430 = !DILocalVariable(name: "expr", arg: 2, scope: !4427, file: !3, line: 398, type: !1012)
!4431 = !DILocation(line: 398, column: 62, scope: !4427)
!4432 = !DILocation(line: 400, column: 18, scope: !4427)
!4433 = !DILocation(line: 400, column: 22, scope: !4427)
!4434 = !DILocation(line: 400, column: 3, scope: !4427)
!4435 = !DILocation(line: 401, column: 18, scope: !4427)
!4436 = !DILocation(line: 401, column: 22, scope: !4427)
!4437 = !DILocation(line: 401, column: 3, scope: !4427)
!4438 = !DILocation(line: 402, column: 18, scope: !4427)
!4439 = !DILocation(line: 402, column: 22, scope: !4427)
!4440 = !DILocation(line: 402, column: 3, scope: !4427)
!4441 = !DILocation(line: 403, column: 18, scope: !4427)
!4442 = !DILocation(line: 403, column: 22, scope: !4427)
!4443 = !DILocation(line: 403, column: 3, scope: !4427)
!4444 = !DILocation(line: 404, column: 18, scope: !4427)
!4445 = !DILocation(line: 404, column: 22, scope: !4427)
!4446 = !DILocation(line: 404, column: 3, scope: !4427)
!4447 = !DILocation(line: 405, column: 18, scope: !4427)
!4448 = !DILocation(line: 405, column: 22, scope: !4427)
!4449 = !DILocation(line: 405, column: 3, scope: !4427)
!4450 = !DILocation(line: 406, column: 18, scope: !4427)
!4451 = !DILocation(line: 406, column: 22, scope: !4427)
!4452 = !DILocation(line: 406, column: 3, scope: !4427)
!4453 = !DILocation(line: 407, column: 18, scope: !4427)
!4454 = !DILocation(line: 407, column: 22, scope: !4427)
!4455 = !DILocation(line: 407, column: 3, scope: !4427)
!4456 = !DILocation(line: 408, column: 18, scope: !4427)
!4457 = !DILocation(line: 408, column: 22, scope: !4427)
!4458 = !DILocation(line: 408, column: 3, scope: !4427)
!4459 = !DILocation(line: 409, column: 18, scope: !4427)
!4460 = !DILocation(line: 409, column: 22, scope: !4427)
!4461 = !DILocation(line: 409, column: 3, scope: !4427)
!4462 = !DILocation(line: 410, column: 18, scope: !4427)
!4463 = !DILocation(line: 410, column: 22, scope: !4427)
!4464 = !DILocation(line: 410, column: 3, scope: !4427)
!4465 = !DILocation(line: 411, column: 18, scope: !4427)
!4466 = !DILocation(line: 411, column: 22, scope: !4427)
!4467 = !DILocation(line: 411, column: 3, scope: !4427)
!4468 = !DILocation(line: 413, column: 7, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4427, file: !3, line: 413, column: 7)
!4470 = !DILocation(line: 413, column: 24, scope: !4469)
!4471 = !DILocation(line: 413, column: 7, scope: !4427)
!4472 = !DILocation(line: 418, column: 22, scope: !4473)
!4473 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 414, column: 5)
!4474 = !DILocation(line: 418, column: 26, scope: !4473)
!4475 = !DILocation(line: 418, column: 7, scope: !4473)
!4476 = !DILocation(line: 419, column: 22, scope: !4473)
!4477 = !DILocation(line: 419, column: 26, scope: !4473)
!4478 = !DILocation(line: 419, column: 7, scope: !4473)
!4479 = !DILocation(line: 420, column: 5, scope: !4473)
!4480 = !DILocation(line: 422, column: 7, scope: !4481)
!4481 = distinct !DILexicalBlock(scope: !4427, file: !3, line: 422, column: 7)
!4482 = !DILocation(line: 422, column: 24, scope: !4481)
!4483 = !DILocation(line: 422, column: 7, scope: !4427)
!4484 = !DILocation(line: 424, column: 22, scope: !4485)
!4485 = distinct !DILexicalBlock(scope: !4481, file: !3, line: 423, column: 5)
!4486 = !DILocation(line: 424, column: 26, scope: !4485)
!4487 = !DILocation(line: 424, column: 7, scope: !4485)
!4488 = !DILocation(line: 425, column: 22, scope: !4485)
!4489 = !DILocation(line: 425, column: 26, scope: !4485)
!4490 = !DILocation(line: 425, column: 7, scope: !4485)
!4491 = !DILocation(line: 426, column: 22, scope: !4485)
!4492 = !DILocation(line: 426, column: 26, scope: !4485)
!4493 = !DILocation(line: 426, column: 7, scope: !4485)
!4494 = !DILocation(line: 427, column: 5, scope: !4485)
!4495 = !DILocation(line: 429, column: 7, scope: !4496)
!4496 = distinct !DILexicalBlock(scope: !4427, file: !3, line: 429, column: 7)
!4497 = !DILocation(line: 429, column: 24, scope: !4496)
!4498 = !DILocation(line: 430, column: 7, scope: !4496)
!4499 = !DILocation(line: 430, column: 10, scope: !4496)
!4500 = !DILocation(line: 430, column: 27, scope: !4496)
!4501 = !DILocation(line: 431, column: 7, scope: !4496)
!4502 = !DILocation(line: 431, column: 10, scope: !4496)
!4503 = !DILocation(line: 431, column: 27, scope: !4496)
!4504 = !DILocation(line: 429, column: 7, scope: !4427)
!4505 = !DILocation(line: 433, column: 22, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4496, file: !3, line: 432, column: 5)
!4507 = !DILocation(line: 433, column: 26, scope: !4506)
!4508 = !DILocation(line: 433, column: 7, scope: !4506)
!4509 = !DILocation(line: 434, column: 11, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4506, file: !3, line: 434, column: 11)
!4511 = !DILocation(line: 434, column: 28, scope: !4510)
!4512 = !DILocation(line: 435, column: 4, scope: !4510)
!4513 = !DILocation(line: 435, column: 7, scope: !4510)
!4514 = !DILocation(line: 435, column: 24, scope: !4510)
!4515 = !DILocation(line: 434, column: 11, scope: !4506)
!4516 = !DILocation(line: 436, column: 17, scope: !4510)
!4517 = !DILocation(line: 436, column: 21, scope: !4510)
!4518 = !DILocation(line: 436, column: 2, scope: !4510)
!4519 = !DILocation(line: 437, column: 22, scope: !4506)
!4520 = !DILocation(line: 437, column: 26, scope: !4506)
!4521 = !DILocation(line: 437, column: 7, scope: !4506)
!4522 = !DILocation(line: 438, column: 5, scope: !4506)
!4523 = !DILocation(line: 439, column: 1, scope: !4427)
!4524 = distinct !DISubprogram(name: "pack_ts_decl_wrtl_value_fields", scope: !3, file: !3, line: 446, type: !4276, scopeLine: 447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4525 = !DILocalVariable(name: "bp", arg: 1, scope: !4524, file: !3, line: 446, type: !2844)
!4526 = !DILocation(line: 446, column: 51, scope: !4524)
!4527 = !DILocalVariable(name: "expr", arg: 2, scope: !4524, file: !3, line: 446, type: !1012)
!4528 = !DILocation(line: 446, column: 60, scope: !4524)
!4529 = !DILocation(line: 448, column: 18, scope: !4524)
!4530 = !DILocation(line: 448, column: 22, scope: !4524)
!4531 = !DILocation(line: 448, column: 3, scope: !4524)
!4532 = !DILocation(line: 449, column: 1, scope: !4524)
!4533 = distinct !DISubprogram(name: "pack_ts_decl_with_vis_value_fields", scope: !3, file: !3, line: 456, type: !4276, scopeLine: 457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4534 = !DILocalVariable(name: "bp", arg: 1, scope: !4533, file: !3, line: 456, type: !2844)
!4535 = !DILocation(line: 456, column: 55, scope: !4533)
!4536 = !DILocalVariable(name: "expr", arg: 2, scope: !4533, file: !3, line: 456, type: !1012)
!4537 = !DILocation(line: 456, column: 64, scope: !4533)
!4538 = !DILocation(line: 458, column: 18, scope: !4533)
!4539 = !DILocation(line: 458, column: 22, scope: !4533)
!4540 = !DILocation(line: 458, column: 3, scope: !4533)
!4541 = !DILocation(line: 459, column: 18, scope: !4533)
!4542 = !DILocation(line: 459, column: 22, scope: !4533)
!4543 = !DILocation(line: 459, column: 3, scope: !4533)
!4544 = !DILocation(line: 460, column: 18, scope: !4533)
!4545 = !DILocation(line: 460, column: 22, scope: !4533)
!4546 = !DILocation(line: 460, column: 3, scope: !4533)
!4547 = !DILocation(line: 461, column: 18, scope: !4533)
!4548 = !DILocation(line: 461, column: 22, scope: !4533)
!4549 = !DILocation(line: 461, column: 3, scope: !4533)
!4550 = !DILocation(line: 462, column: 18, scope: !4533)
!4551 = !DILocation(line: 462, column: 22, scope: !4533)
!4552 = !DILocation(line: 462, column: 3, scope: !4533)
!4553 = !DILocation(line: 463, column: 18, scope: !4533)
!4554 = !DILocation(line: 463, column: 22, scope: !4533)
!4555 = !DILocation(line: 463, column: 3, scope: !4533)
!4556 = !DILocation(line: 464, column: 18, scope: !4533)
!4557 = !DILocation(line: 464, column: 22, scope: !4533)
!4558 = !DILocation(line: 464, column: 3, scope: !4533)
!4559 = !DILocation(line: 465, column: 18, scope: !4533)
!4560 = !DILocation(line: 465, column: 22, scope: !4533)
!4561 = !DILocation(line: 465, column: 3, scope: !4533)
!4562 = !DILocation(line: 467, column: 7, scope: !4563)
!4563 = distinct !DILexicalBlock(scope: !4533, file: !3, line: 467, column: 7)
!4564 = !DILocation(line: 467, column: 24, scope: !4563)
!4565 = !DILocation(line: 467, column: 7, scope: !4533)
!4566 = !DILocation(line: 469, column: 22, scope: !4567)
!4567 = distinct !DILexicalBlock(scope: !4563, file: !3, line: 468, column: 5)
!4568 = !DILocation(line: 469, column: 26, scope: !4567)
!4569 = !DILocation(line: 469, column: 7, scope: !4567)
!4570 = !DILocation(line: 470, column: 22, scope: !4567)
!4571 = !DILocation(line: 470, column: 26, scope: !4567)
!4572 = !DILocation(line: 470, column: 7, scope: !4567)
!4573 = !DILocation(line: 471, column: 22, scope: !4567)
!4574 = !DILocation(line: 471, column: 26, scope: !4567)
!4575 = !DILocation(line: 471, column: 7, scope: !4567)
!4576 = !DILocation(line: 472, column: 5, scope: !4567)
!4577 = !DILocation(line: 474, column: 7, scope: !4578)
!4578 = distinct !DILexicalBlock(scope: !4533, file: !3, line: 474, column: 7)
!4579 = !DILocation(line: 474, column: 7, scope: !4533)
!4580 = !DILocation(line: 475, column: 20, scope: !4578)
!4581 = !DILocation(line: 475, column: 24, scope: !4578)
!4582 = !DILocation(line: 475, column: 5, scope: !4578)
!4583 = !DILocation(line: 476, column: 1, scope: !4533)
!4584 = distinct !DISubprogram(name: "pack_ts_function_decl_value_fields", scope: !3, file: !3, line: 483, type: !4276, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4585 = !DILocalVariable(name: "bp", arg: 1, scope: !4584, file: !3, line: 483, type: !2844)
!4586 = !DILocation(line: 483, column: 55, scope: !4584)
!4587 = !DILocalVariable(name: "expr", arg: 2, scope: !4584, file: !3, line: 483, type: !1012)
!4588 = !DILocation(line: 483, column: 64, scope: !4584)
!4589 = !DILocation(line: 487, column: 3, scope: !4584)
!4590 = !DILocation(line: 489, column: 18, scope: !4584)
!4591 = !DILocation(line: 489, column: 22, scope: !4584)
!4592 = !DILocation(line: 489, column: 3, scope: !4584)
!4593 = !DILocation(line: 490, column: 18, scope: !4584)
!4594 = !DILocation(line: 490, column: 22, scope: !4584)
!4595 = !DILocation(line: 490, column: 3, scope: !4584)
!4596 = !DILocation(line: 491, column: 18, scope: !4584)
!4597 = !DILocation(line: 491, column: 22, scope: !4584)
!4598 = !DILocation(line: 491, column: 3, scope: !4584)
!4599 = !DILocation(line: 492, column: 18, scope: !4584)
!4600 = !DILocation(line: 492, column: 22, scope: !4584)
!4601 = !DILocation(line: 492, column: 3, scope: !4584)
!4602 = !DILocation(line: 493, column: 18, scope: !4584)
!4603 = !DILocation(line: 493, column: 22, scope: !4584)
!4604 = !DILocation(line: 493, column: 3, scope: !4584)
!4605 = !DILocation(line: 494, column: 18, scope: !4584)
!4606 = !DILocation(line: 494, column: 22, scope: !4584)
!4607 = !DILocation(line: 494, column: 3, scope: !4584)
!4608 = !DILocation(line: 495, column: 18, scope: !4584)
!4609 = !DILocation(line: 495, column: 22, scope: !4584)
!4610 = !DILocation(line: 495, column: 3, scope: !4584)
!4611 = !DILocation(line: 496, column: 18, scope: !4584)
!4612 = !DILocation(line: 496, column: 22, scope: !4584)
!4613 = !DILocation(line: 496, column: 3, scope: !4584)
!4614 = !DILocation(line: 497, column: 18, scope: !4584)
!4615 = !DILocation(line: 497, column: 22, scope: !4584)
!4616 = !DILocation(line: 497, column: 3, scope: !4584)
!4617 = !DILocation(line: 498, column: 18, scope: !4584)
!4618 = !DILocation(line: 498, column: 22, scope: !4584)
!4619 = !DILocation(line: 498, column: 3, scope: !4584)
!4620 = !DILocation(line: 499, column: 18, scope: !4584)
!4621 = !DILocation(line: 499, column: 22, scope: !4584)
!4622 = !DILocation(line: 499, column: 3, scope: !4584)
!4623 = !DILocation(line: 500, column: 18, scope: !4584)
!4624 = !DILocation(line: 500, column: 22, scope: !4584)
!4625 = !DILocation(line: 500, column: 3, scope: !4584)
!4626 = !DILocation(line: 501, column: 18, scope: !4584)
!4627 = !DILocation(line: 501, column: 22, scope: !4584)
!4628 = !DILocation(line: 501, column: 3, scope: !4584)
!4629 = !DILocation(line: 502, column: 18, scope: !4584)
!4630 = !DILocation(line: 502, column: 22, scope: !4584)
!4631 = !DILocation(line: 502, column: 3, scope: !4584)
!4632 = !DILocation(line: 503, column: 18, scope: !4584)
!4633 = !DILocation(line: 503, column: 22, scope: !4584)
!4634 = !DILocation(line: 503, column: 3, scope: !4584)
!4635 = !DILocation(line: 504, column: 18, scope: !4584)
!4636 = !DILocation(line: 504, column: 22, scope: !4584)
!4637 = !DILocation(line: 504, column: 3, scope: !4584)
!4638 = !DILocation(line: 505, column: 18, scope: !4584)
!4639 = !DILocation(line: 505, column: 22, scope: !4584)
!4640 = !DILocation(line: 505, column: 3, scope: !4584)
!4641 = !DILocation(line: 506, column: 18, scope: !4584)
!4642 = !DILocation(line: 506, column: 22, scope: !4584)
!4643 = !DILocation(line: 506, column: 3, scope: !4584)
!4644 = !DILocation(line: 507, column: 1, scope: !4584)
!4645 = distinct !DISubprogram(name: "pack_ts_type_value_fields", scope: !3, file: !3, line: 514, type: !4276, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4646 = !DILocalVariable(name: "bp", arg: 1, scope: !4645, file: !3, line: 514, type: !2844)
!4647 = !DILocation(line: 514, column: 46, scope: !4645)
!4648 = !DILocalVariable(name: "expr", arg: 2, scope: !4645, file: !3, line: 514, type: !1012)
!4649 = !DILocation(line: 514, column: 55, scope: !4645)
!4650 = !DILocation(line: 516, column: 18, scope: !4645)
!4651 = !DILocation(line: 516, column: 22, scope: !4645)
!4652 = !DILocation(line: 516, column: 3, scope: !4645)
!4653 = !DILocation(line: 517, column: 18, scope: !4645)
!4654 = !DILocation(line: 517, column: 22, scope: !4645)
!4655 = !DILocation(line: 517, column: 3, scope: !4645)
!4656 = !DILocation(line: 518, column: 18, scope: !4645)
!4657 = !DILocation(line: 518, column: 22, scope: !4645)
!4658 = !DILocation(line: 518, column: 3, scope: !4645)
!4659 = !DILocation(line: 519, column: 18, scope: !4645)
!4660 = !DILocation(line: 519, column: 22, scope: !4645)
!4661 = !DILocation(line: 519, column: 3, scope: !4645)
!4662 = !DILocation(line: 520, column: 18, scope: !4645)
!4663 = !DILocation(line: 520, column: 22, scope: !4645)
!4664 = !DILocation(line: 520, column: 3, scope: !4645)
!4665 = !DILocation(line: 521, column: 7, scope: !4666)
!4666 = distinct !DILexicalBlock(scope: !4645, file: !3, line: 521, column: 7)
!4667 = !DILocation(line: 521, column: 24, scope: !4666)
!4668 = !DILocation(line: 521, column: 38, scope: !4666)
!4669 = !DILocation(line: 521, column: 41, scope: !4666)
!4670 = !DILocation(line: 521, column: 58, scope: !4666)
!4671 = !DILocation(line: 521, column: 7, scope: !4645)
!4672 = !DILocation(line: 522, column: 20, scope: !4666)
!4673 = !DILocation(line: 522, column: 24, scope: !4666)
!4674 = !DILocation(line: 522, column: 5, scope: !4666)
!4675 = !DILocation(line: 523, column: 18, scope: !4645)
!4676 = !DILocation(line: 523, column: 22, scope: !4645)
!4677 = !DILocation(line: 523, column: 3, scope: !4645)
!4678 = !DILocation(line: 524, column: 18, scope: !4645)
!4679 = !DILocation(line: 524, column: 22, scope: !4645)
!4680 = !DILocation(line: 524, column: 3, scope: !4645)
!4681 = !DILocation(line: 525, column: 18, scope: !4645)
!4682 = !DILocation(line: 525, column: 22, scope: !4645)
!4683 = !DILocation(line: 525, column: 3, scope: !4645)
!4684 = !DILocation(line: 526, column: 18, scope: !4645)
!4685 = !DILocation(line: 526, column: 22, scope: !4645)
!4686 = !DILocation(line: 526, column: 3, scope: !4645)
!4687 = !DILocation(line: 527, column: 18, scope: !4645)
!4688 = !DILocation(line: 527, column: 22, scope: !4645)
!4689 = !DILocation(line: 527, column: 3, scope: !4645)
!4690 = !DILocation(line: 528, column: 18, scope: !4645)
!4691 = !DILocation(line: 528, column: 22, scope: !4645)
!4692 = !DILocation(line: 528, column: 3, scope: !4645)
!4693 = !DILocation(line: 529, column: 18, scope: !4645)
!4694 = !DILocation(line: 529, column: 22, scope: !4645)
!4695 = !DILocation(line: 529, column: 44, scope: !4645)
!4696 = !DILocation(line: 529, column: 3, scope: !4645)
!4697 = !DILocation(line: 530, column: 1, scope: !4645)
!4698 = distinct !DISubprogram(name: "pack_ts_block_value_fields", scope: !3, file: !3, line: 537, type: !4276, scopeLine: 538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4699 = !DILocalVariable(name: "bp", arg: 1, scope: !4698, file: !3, line: 537, type: !2844)
!4700 = !DILocation(line: 537, column: 47, scope: !4698)
!4701 = !DILocalVariable(name: "expr", arg: 2, scope: !4698, file: !3, line: 537, type: !1012)
!4702 = !DILocation(line: 537, column: 56, scope: !4698)
!4703 = !DILocation(line: 539, column: 18, scope: !4698)
!4704 = !DILocation(line: 539, column: 22, scope: !4698)
!4705 = !DILocation(line: 539, column: 3, scope: !4698)
!4706 = !DILocation(line: 540, column: 18, scope: !4698)
!4707 = !DILocation(line: 540, column: 22, scope: !4698)
!4708 = !DILocation(line: 540, column: 3, scope: !4698)
!4709 = !DILocation(line: 541, column: 1, scope: !4698)
!4710 = distinct !DISubprogram(name: "lto_output_ts_common_tree_pointers", scope: !3, file: !3, line: 789, type: !2909, scopeLine: 791, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4711 = !DILocalVariable(name: "ob", arg: 1, scope: !4710, file: !3, line: 789, type: !932)
!4712 = !DILocation(line: 789, column: 58, scope: !4710)
!4713 = !DILocalVariable(name: "expr", arg: 2, scope: !4710, file: !3, line: 789, type: !1012)
!4714 = !DILocation(line: 789, column: 67, scope: !4710)
!4715 = !DILocalVariable(name: "ref_p", arg: 3, scope: !4710, file: !3, line: 790, type: !1130)
!4716 = !DILocation(line: 790, column: 14, scope: !4710)
!4717 = !DILocation(line: 792, column: 27, scope: !4710)
!4718 = !DILocation(line: 792, column: 31, scope: !4710)
!4719 = !DILocation(line: 792, column: 49, scope: !4710)
!4720 = !DILocation(line: 792, column: 3, scope: !4710)
!4721 = !DILocation(line: 793, column: 1, scope: !4710)
!4722 = distinct !DISubprogram(name: "lto_output_ts_vector_tree_pointers", scope: !3, file: !3, line: 801, type: !2909, scopeLine: 803, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4723 = !DILocalVariable(name: "ob", arg: 1, scope: !4722, file: !3, line: 801, type: !932)
!4724 = !DILocation(line: 801, column: 58, scope: !4722)
!4725 = !DILocalVariable(name: "expr", arg: 2, scope: !4722, file: !3, line: 801, type: !1012)
!4726 = !DILocation(line: 801, column: 67, scope: !4722)
!4727 = !DILocalVariable(name: "ref_p", arg: 3, scope: !4722, file: !3, line: 802, type: !1130)
!4728 = !DILocation(line: 802, column: 14, scope: !4722)
!4729 = !DILocation(line: 804, column: 21, scope: !4722)
!4730 = !DILocation(line: 804, column: 25, scope: !4722)
!4731 = !DILocation(line: 804, column: 54, scope: !4722)
!4732 = !DILocation(line: 804, column: 3, scope: !4722)
!4733 = !DILocation(line: 805, column: 1, scope: !4722)
!4734 = distinct !DISubprogram(name: "lto_output_ts_complex_tree_pointers", scope: !3, file: !3, line: 813, type: !2909, scopeLine: 815, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4735 = !DILocalVariable(name: "ob", arg: 1, scope: !4734, file: !3, line: 813, type: !932)
!4736 = !DILocation(line: 813, column: 59, scope: !4734)
!4737 = !DILocalVariable(name: "expr", arg: 2, scope: !4734, file: !3, line: 813, type: !1012)
!4738 = !DILocation(line: 813, column: 68, scope: !4734)
!4739 = !DILocalVariable(name: "ref_p", arg: 3, scope: !4734, file: !3, line: 814, type: !1130)
!4740 = !DILocation(line: 814, column: 15, scope: !4734)
!4741 = !DILocation(line: 816, column: 27, scope: !4734)
!4742 = !DILocation(line: 816, column: 31, scope: !4734)
!4743 = !DILocation(line: 816, column: 53, scope: !4734)
!4744 = !DILocation(line: 816, column: 3, scope: !4734)
!4745 = !DILocation(line: 817, column: 27, scope: !4734)
!4746 = !DILocation(line: 817, column: 31, scope: !4734)
!4747 = !DILocation(line: 817, column: 53, scope: !4734)
!4748 = !DILocation(line: 817, column: 3, scope: !4734)
!4749 = !DILocation(line: 818, column: 1, scope: !4734)
!4750 = distinct !DISubprogram(name: "lto_output_ts_decl_minimal_tree_pointers", scope: !3, file: !3, line: 826, type: !2909, scopeLine: 828, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4751 = !DILocalVariable(name: "ob", arg: 1, scope: !4750, file: !3, line: 826, type: !932)
!4752 = !DILocation(line: 826, column: 64, scope: !4750)
!4753 = !DILocalVariable(name: "expr", arg: 2, scope: !4750, file: !3, line: 826, type: !1012)
!4754 = !DILocation(line: 826, column: 73, scope: !4750)
!4755 = !DILocalVariable(name: "ref_p", arg: 3, scope: !4750, file: !3, line: 827, type: !1130)
!4756 = !DILocation(line: 827, column: 13, scope: !4750)
!4757 = !DILocation(line: 829, column: 27, scope: !4750)
!4758 = !DILocation(line: 829, column: 31, scope: !4750)
!4759 = !DILocation(line: 829, column: 49, scope: !4750)
!4760 = !DILocation(line: 829, column: 3, scope: !4750)
!4761 = !DILocation(line: 830, column: 27, scope: !4750)
!4762 = !DILocation(line: 830, column: 31, scope: !4750)
!4763 = !DILocation(line: 830, column: 52, scope: !4750)
!4764 = !DILocation(line: 830, column: 3, scope: !4750)
!4765 = !DILocation(line: 831, column: 24, scope: !4750)
!4766 = !DILocation(line: 831, column: 28, scope: !4750)
!4767 = !DILocation(line: 831, column: 3, scope: !4750)
!4768 = !DILocation(line: 832, column: 1, scope: !4750)
!4769 = distinct !DISubprogram(name: "lto_output_ts_decl_common_tree_pointers", scope: !3, file: !3, line: 840, type: !2909, scopeLine: 842, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4770 = !DILocalVariable(name: "ob", arg: 1, scope: !4769, file: !3, line: 840, type: !932)
!4771 = !DILocation(line: 840, column: 63, scope: !4769)
!4772 = !DILocalVariable(name: "expr", arg: 2, scope: !4769, file: !3, line: 840, type: !1012)
!4773 = !DILocation(line: 840, column: 72, scope: !4769)
!4774 = !DILocalVariable(name: "ref_p", arg: 3, scope: !4769, file: !3, line: 841, type: !1130)
!4775 = !DILocation(line: 841, column: 12, scope: !4769)
!4776 = !DILocation(line: 843, column: 27, scope: !4769)
!4777 = !DILocation(line: 843, column: 31, scope: !4769)
!4778 = !DILocation(line: 843, column: 49, scope: !4769)
!4779 = !DILocation(line: 843, column: 3, scope: !4769)
!4780 = !DILocation(line: 844, column: 27, scope: !4769)
!4781 = !DILocation(line: 844, column: 31, scope: !4769)
!4782 = !DILocation(line: 844, column: 54, scope: !4769)
!4783 = !DILocation(line: 844, column: 3, scope: !4769)
!4784 = !DILocation(line: 846, column: 7, scope: !4785)
!4785 = distinct !DILexicalBlock(scope: !4769, file: !3, line: 846, column: 7)
!4786 = !DILocation(line: 846, column: 24, scope: !4785)
!4787 = !DILocation(line: 846, column: 7, scope: !4769)
!4788 = !DILocation(line: 847, column: 29, scope: !4785)
!4789 = !DILocation(line: 847, column: 33, scope: !4785)
!4790 = !DILocation(line: 847, column: 54, scope: !4785)
!4791 = !DILocation(line: 847, column: 5, scope: !4785)
!4792 = !DILocation(line: 849, column: 27, scope: !4769)
!4793 = !DILocation(line: 849, column: 31, scope: !4769)
!4794 = !DILocation(line: 849, column: 55, scope: !4769)
!4795 = !DILocation(line: 849, column: 3, scope: !4769)
!4796 = !DILocation(line: 850, column: 27, scope: !4769)
!4797 = !DILocation(line: 850, column: 31, scope: !4769)
!4798 = !DILocation(line: 850, column: 60, scope: !4769)
!4799 = !DILocation(line: 850, column: 3, scope: !4769)
!4800 = !DILocation(line: 852, column: 7, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4769, file: !3, line: 852, column: 7)
!4802 = !DILocation(line: 852, column: 24, scope: !4801)
!4803 = !DILocation(line: 852, column: 7, scope: !4769)
!4804 = !DILocation(line: 853, column: 23, scope: !4801)
!4805 = !DILocation(line: 853, column: 27, scope: !4801)
!4806 = !DILocation(line: 853, column: 46, scope: !4801)
!4807 = !DILocation(line: 853, column: 5, scope: !4801)
!4808 = !DILocation(line: 855, column: 8, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4769, file: !3, line: 855, column: 7)
!4810 = !DILocation(line: 855, column: 25, scope: !4809)
!4811 = !DILocation(line: 856, column: 8, scope: !4809)
!4812 = !DILocation(line: 856, column: 11, scope: !4809)
!4813 = !DILocation(line: 856, column: 28, scope: !4809)
!4814 = !DILocation(line: 857, column: 7, scope: !4809)
!4815 = !DILocation(line: 857, column: 10, scope: !4809)
!4816 = !DILocation(line: 855, column: 7, scope: !4769)
!4817 = !DILocation(line: 858, column: 29, scope: !4809)
!4818 = !DILocation(line: 858, column: 33, scope: !4809)
!4819 = !DILocation(line: 858, column: 57, scope: !4809)
!4820 = !DILocation(line: 858, column: 5, scope: !4809)
!4821 = !DILocation(line: 859, column: 1, scope: !4769)
!4822 = distinct !DISubprogram(name: "lto_output_ts_decl_non_common_tree_pointers", scope: !3, file: !3, line: 867, type: !2909, scopeLine: 869, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4823 = !DILocalVariable(name: "ob", arg: 1, scope: !4822, file: !3, line: 867, type: !932)
!4824 = !DILocation(line: 867, column: 67, scope: !4822)
!4825 = !DILocalVariable(name: "expr", arg: 2, scope: !4822, file: !3, line: 868, type: !1012)
!4826 = !DILocation(line: 868, column: 16, scope: !4822)
!4827 = !DILocalVariable(name: "ref_p", arg: 3, scope: !4822, file: !3, line: 868, type: !1130)
!4828 = !DILocation(line: 868, column: 27, scope: !4822)
!4829 = !DILocation(line: 870, column: 7, scope: !4830)
!4830 = distinct !DILexicalBlock(scope: !4822, file: !3, line: 870, column: 7)
!4831 = !DILocation(line: 870, column: 24, scope: !4830)
!4832 = !DILocation(line: 870, column: 7, scope: !4822)
!4833 = !DILocation(line: 876, column: 7, scope: !4834)
!4834 = distinct !DILexicalBlock(scope: !4830, file: !3, line: 871, column: 5)
!4835 = !DILocation(line: 877, column: 31, scope: !4834)
!4836 = !DILocation(line: 877, column: 35, scope: !4834)
!4837 = !DILocation(line: 877, column: 58, scope: !4834)
!4838 = !DILocation(line: 877, column: 7, scope: !4834)
!4839 = !DILocation(line: 878, column: 31, scope: !4834)
!4840 = !DILocation(line: 878, column: 35, scope: !4834)
!4841 = !DILocation(line: 878, column: 55, scope: !4834)
!4842 = !DILocation(line: 878, column: 7, scope: !4834)
!4843 = !DILocation(line: 879, column: 5, scope: !4834)
!4844 = !DILocation(line: 880, column: 27, scope: !4822)
!4845 = !DILocation(line: 880, column: 31, scope: !4822)
!4846 = !DILocation(line: 880, column: 51, scope: !4822)
!4847 = !DILocation(line: 880, column: 3, scope: !4822)
!4848 = !DILocation(line: 881, column: 1, scope: !4822)
!4849 = distinct !DISubprogram(name: "lto_output_ts_decl_with_vis_tree_pointers", scope: !3, file: !3, line: 889, type: !2909, scopeLine: 891, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4850 = !DILocalVariable(name: "ob", arg: 1, scope: !4849, file: !3, line: 889, type: !932)
!4851 = !DILocation(line: 889, column: 65, scope: !4849)
!4852 = !DILocalVariable(name: "expr", arg: 2, scope: !4849, file: !3, line: 889, type: !1012)
!4853 = !DILocation(line: 889, column: 74, scope: !4849)
!4854 = !DILocalVariable(name: "ref_p", arg: 3, scope: !4849, file: !3, line: 890, type: !1130)
!4855 = !DILocation(line: 890, column: 14, scope: !4849)
!4856 = !DILocation(line: 893, column: 7, scope: !4857)
!4857 = distinct !DILexicalBlock(scope: !4849, file: !3, line: 893, column: 7)
!4858 = !DILocation(line: 893, column: 7, scope: !4849)
!4859 = !DILocation(line: 894, column: 29, scope: !4857)
!4860 = !DILocation(line: 894, column: 33, scope: !4857)
!4861 = !DILocation(line: 894, column: 61, scope: !4857)
!4862 = !DILocation(line: 894, column: 5, scope: !4857)
!4863 = !DILocation(line: 896, column: 18, scope: !4857)
!4864 = !DILocation(line: 896, column: 5, scope: !4857)
!4865 = !DILocation(line: 898, column: 27, scope: !4849)
!4866 = !DILocation(line: 898, column: 31, scope: !4849)
!4867 = !DILocation(line: 898, column: 57, scope: !4849)
!4868 = !DILocation(line: 898, column: 3, scope: !4849)
!4869 = !DILocation(line: 899, column: 27, scope: !4849)
!4870 = !DILocation(line: 899, column: 31, scope: !4849)
!4871 = !DILocation(line: 899, column: 57, scope: !4849)
!4872 = !DILocation(line: 899, column: 3, scope: !4849)
!4873 = !DILocation(line: 900, column: 1, scope: !4849)
!4874 = distinct !DISubprogram(name: "lto_output_ts_field_decl_tree_pointers", scope: !3, file: !3, line: 908, type: !2909, scopeLine: 910, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4875 = !DILocalVariable(name: "ob", arg: 1, scope: !4874, file: !3, line: 908, type: !932)
!4876 = !DILocation(line: 908, column: 62, scope: !4874)
!4877 = !DILocalVariable(name: "expr", arg: 2, scope: !4874, file: !3, line: 908, type: !1012)
!4878 = !DILocation(line: 908, column: 71, scope: !4874)
!4879 = !DILocalVariable(name: "ref_p", arg: 3, scope: !4874, file: !3, line: 909, type: !1130)
!4880 = !DILocation(line: 909, column: 11, scope: !4874)
!4881 = !DILocation(line: 911, column: 27, scope: !4874)
!4882 = !DILocation(line: 911, column: 31, scope: !4874)
!4883 = !DILocation(line: 911, column: 57, scope: !4874)
!4884 = !DILocation(line: 911, column: 3, scope: !4874)
!4885 = !DILocation(line: 912, column: 27, scope: !4874)
!4886 = !DILocation(line: 912, column: 31, scope: !4874)
!4887 = !DILocation(line: 912, column: 59, scope: !4874)
!4888 = !DILocation(line: 912, column: 3, scope: !4874)
!4889 = !DILocation(line: 913, column: 27, scope: !4874)
!4890 = !DILocation(line: 913, column: 31, scope: !4874)
!4891 = !DILocation(line: 913, column: 54, scope: !4874)
!4892 = !DILocation(line: 913, column: 3, scope: !4874)
!4893 = !DILocation(line: 914, column: 27, scope: !4874)
!4894 = !DILocation(line: 914, column: 31, scope: !4874)
!4895 = !DILocation(line: 914, column: 61, scope: !4874)
!4896 = !DILocation(line: 914, column: 3, scope: !4874)
!4897 = !DILocation(line: 915, column: 27, scope: !4874)
!4898 = !DILocation(line: 915, column: 31, scope: !4874)
!4899 = !DILocation(line: 915, column: 53, scope: !4874)
!4900 = !DILocation(line: 915, column: 3, scope: !4874)
!4901 = !DILocation(line: 916, column: 21, scope: !4874)
!4902 = !DILocation(line: 916, column: 25, scope: !4874)
!4903 = !DILocation(line: 916, column: 44, scope: !4874)
!4904 = !DILocation(line: 916, column: 3, scope: !4874)
!4905 = !DILocation(line: 917, column: 1, scope: !4874)
!4906 = distinct !DISubprogram(name: "lto_output_ts_function_decl_tree_pointers", scope: !3, file: !3, line: 925, type: !2909, scopeLine: 927, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4907 = !DILocalVariable(name: "ob", arg: 1, scope: !4906, file: !3, line: 925, type: !932)
!4908 = !DILocation(line: 925, column: 65, scope: !4906)
!4909 = !DILocalVariable(name: "expr", arg: 2, scope: !4906, file: !3, line: 925, type: !1012)
!4910 = !DILocation(line: 925, column: 74, scope: !4906)
!4911 = !DILocalVariable(name: "ref_p", arg: 3, scope: !4906, file: !3, line: 926, type: !1130)
!4912 = !DILocation(line: 926, column: 14, scope: !4906)
!4913 = !DILocation(line: 930, column: 27, scope: !4906)
!4914 = !DILocation(line: 930, column: 31, scope: !4906)
!4915 = !DILocation(line: 930, column: 65, scope: !4906)
!4916 = !DILocation(line: 930, column: 3, scope: !4906)
!4917 = !DILocation(line: 931, column: 27, scope: !4906)
!4918 = !DILocation(line: 931, column: 31, scope: !4906)
!4919 = !DILocation(line: 931, column: 69, scope: !4906)
!4920 = !DILocation(line: 931, column: 3, scope: !4906)
!4921 = !DILocation(line: 932, column: 27, scope: !4906)
!4922 = !DILocation(line: 932, column: 31, scope: !4906)
!4923 = !DILocation(line: 933, column: 6, scope: !4906)
!4924 = !DILocation(line: 932, column: 3, scope: !4906)
!4925 = !DILocation(line: 934, column: 1, scope: !4906)
!4926 = distinct !DISubprogram(name: "lto_output_ts_type_tree_pointers", scope: !3, file: !3, line: 942, type: !2909, scopeLine: 944, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!4927 = !DILocalVariable(name: "ob", arg: 1, scope: !4926, file: !3, line: 942, type: !932)
!4928 = !DILocation(line: 942, column: 56, scope: !4926)
!4929 = !DILocalVariable(name: "expr", arg: 2, scope: !4926, file: !3, line: 942, type: !1012)
!4930 = !DILocation(line: 942, column: 65, scope: !4926)
!4931 = !DILocalVariable(name: "ref_p", arg: 3, scope: !4926, file: !3, line: 943, type: !1130)
!4932 = !DILocation(line: 943, column: 12, scope: !4926)
!4933 = !DILocation(line: 945, column: 7, scope: !4934)
!4934 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 945, column: 7)
!4935 = !DILocation(line: 945, column: 24, scope: !4934)
!4936 = !DILocation(line: 945, column: 7, scope: !4926)
!4937 = !DILocation(line: 946, column: 29, scope: !4934)
!4938 = !DILocation(line: 946, column: 33, scope: !4934)
!4939 = !DILocation(line: 946, column: 53, scope: !4934)
!4940 = !DILocation(line: 946, column: 5, scope: !4934)
!4941 = !DILocation(line: 947, column: 12, scope: !4942)
!4942 = distinct !DILexicalBlock(scope: !4934, file: !3, line: 947, column: 12)
!4943 = !DILocation(line: 947, column: 29, scope: !4942)
!4944 = !DILocation(line: 947, column: 12, scope: !4934)
!4945 = !DILocation(line: 948, column: 29, scope: !4942)
!4946 = !DILocation(line: 948, column: 33, scope: !4942)
!4947 = !DILocation(line: 948, column: 53, scope: !4942)
!4948 = !DILocation(line: 948, column: 5, scope: !4942)
!4949 = !DILocation(line: 949, column: 12, scope: !4950)
!4950 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 949, column: 12)
!4951 = !DILocation(line: 949, column: 29, scope: !4950)
!4952 = !DILocation(line: 949, column: 44, scope: !4950)
!4953 = !DILocation(line: 949, column: 47, scope: !4950)
!4954 = !DILocation(line: 949, column: 64, scope: !4950)
!4955 = !DILocation(line: 949, column: 12, scope: !4942)
!4956 = !DILocation(line: 950, column: 29, scope: !4950)
!4957 = !DILocation(line: 950, column: 33, scope: !4950)
!4958 = !DILocation(line: 950, column: 53, scope: !4950)
!4959 = !DILocation(line: 950, column: 5, scope: !4950)
!4960 = !DILocation(line: 951, column: 12, scope: !4961)
!4961 = distinct !DILexicalBlock(scope: !4950, file: !3, line: 951, column: 12)
!4962 = !DILocation(line: 951, column: 29, scope: !4961)
!4963 = !DILocation(line: 951, column: 46, scope: !4961)
!4964 = !DILocation(line: 951, column: 49, scope: !4961)
!4965 = !DILocation(line: 951, column: 66, scope: !4961)
!4966 = !DILocation(line: 951, column: 12, scope: !4950)
!4967 = !DILocation(line: 952, column: 29, scope: !4961)
!4968 = !DILocation(line: 952, column: 33, scope: !4961)
!4969 = !DILocation(line: 952, column: 56, scope: !4961)
!4970 = !DILocation(line: 952, column: 5, scope: !4961)
!4971 = !DILocation(line: 953, column: 12, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4961, file: !3, line: 953, column: 12)
!4973 = !DILocation(line: 953, column: 29, scope: !4972)
!4974 = !DILocation(line: 953, column: 12, scope: !4961)
!4975 = !DILocation(line: 954, column: 29, scope: !4972)
!4976 = !DILocation(line: 954, column: 33, scope: !4972)
!4977 = !DILocation(line: 954, column: 72, scope: !4972)
!4978 = !DILocation(line: 954, column: 5, scope: !4972)
!4979 = !DILocation(line: 956, column: 27, scope: !4926)
!4980 = !DILocation(line: 956, column: 31, scope: !4926)
!4981 = !DILocation(line: 956, column: 49, scope: !4926)
!4982 = !DILocation(line: 956, column: 3, scope: !4926)
!4983 = !DILocation(line: 957, column: 27, scope: !4926)
!4984 = !DILocation(line: 957, column: 31, scope: !4926)
!4985 = !DILocation(line: 957, column: 54, scope: !4926)
!4986 = !DILocation(line: 957, column: 3, scope: !4926)
!4987 = !DILocation(line: 958, column: 27, scope: !4926)
!4988 = !DILocation(line: 958, column: 31, scope: !4926)
!4989 = !DILocation(line: 958, column: 55, scope: !4926)
!4990 = !DILocation(line: 958, column: 3, scope: !4926)
!4991 = !DILocation(line: 959, column: 27, scope: !4926)
!4992 = !DILocation(line: 959, column: 31, scope: !4926)
!4993 = !DILocation(line: 959, column: 49, scope: !4926)
!4994 = !DILocation(line: 959, column: 3, scope: !4926)
!4995 = !DILocation(line: 962, column: 8, scope: !4996)
!4996 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 962, column: 7)
!4997 = !DILocation(line: 962, column: 7, scope: !4926)
!4998 = !DILocation(line: 963, column: 29, scope: !4996)
!4999 = !DILocation(line: 963, column: 33, scope: !4996)
!5000 = !DILocation(line: 963, column: 53, scope: !4996)
!5001 = !DILocation(line: 963, column: 5, scope: !4996)
!5002 = !DILocation(line: 964, column: 27, scope: !4926)
!5003 = !DILocation(line: 964, column: 31, scope: !4926)
!5004 = !DILocation(line: 964, column: 51, scope: !4926)
!5005 = !DILocation(line: 964, column: 3, scope: !4926)
!5006 = !DILocation(line: 965, column: 27, scope: !4926)
!5007 = !DILocation(line: 965, column: 31, scope: !4926)
!5008 = !DILocation(line: 965, column: 57, scope: !4926)
!5009 = !DILocation(line: 965, column: 3, scope: !4926)
!5010 = !DILocation(line: 968, column: 7, scope: !5011)
!5011 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 968, column: 7)
!5012 = !DILocation(line: 968, column: 24, scope: !5011)
!5013 = !DILocation(line: 968, column: 39, scope: !5011)
!5014 = !DILocation(line: 968, column: 42, scope: !5011)
!5015 = !DILocation(line: 968, column: 59, scope: !5011)
!5016 = !DILocation(line: 968, column: 7, scope: !4926)
!5017 = !DILocation(line: 969, column: 29, scope: !5011)
!5018 = !DILocation(line: 969, column: 33, scope: !5011)
!5019 = !DILocation(line: 969, column: 52, scope: !5011)
!5020 = !DILocation(line: 969, column: 5, scope: !5011)
!5021 = !DILocation(line: 970, column: 27, scope: !4926)
!5022 = !DILocation(line: 970, column: 31, scope: !4926)
!5023 = !DILocation(line: 970, column: 52, scope: !4926)
!5024 = !DILocation(line: 970, column: 3, scope: !4926)
!5025 = !DILocation(line: 971, column: 27, scope: !4926)
!5026 = !DILocation(line: 971, column: 31, scope: !4926)
!5027 = !DILocation(line: 971, column: 54, scope: !4926)
!5028 = !DILocation(line: 971, column: 3, scope: !4926)
!5029 = !DILocation(line: 972, column: 27, scope: !4926)
!5030 = !DILocation(line: 972, column: 31, scope: !4926)
!5031 = !DILocation(line: 972, column: 54, scope: !4926)
!5032 = !DILocation(line: 972, column: 3, scope: !4926)
!5033 = !DILocation(line: 973, column: 1, scope: !4926)
!5034 = distinct !DISubprogram(name: "lto_output_ts_list_tree_pointers", scope: !3, file: !3, line: 981, type: !2909, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5035 = !DILocalVariable(name: "ob", arg: 1, scope: !5034, file: !3, line: 981, type: !932)
!5036 = !DILocation(line: 981, column: 56, scope: !5034)
!5037 = !DILocalVariable(name: "expr", arg: 2, scope: !5034, file: !3, line: 981, type: !1012)
!5038 = !DILocation(line: 981, column: 65, scope: !5034)
!5039 = !DILocalVariable(name: "ref_p", arg: 3, scope: !5034, file: !3, line: 982, type: !1130)
!5040 = !DILocation(line: 982, column: 12, scope: !5034)
!5041 = !DILocation(line: 984, column: 27, scope: !5034)
!5042 = !DILocation(line: 984, column: 31, scope: !5034)
!5043 = !DILocation(line: 984, column: 52, scope: !5034)
!5044 = !DILocation(line: 984, column: 3, scope: !5034)
!5045 = !DILocation(line: 985, column: 27, scope: !5034)
!5046 = !DILocation(line: 985, column: 31, scope: !5034)
!5047 = !DILocation(line: 985, column: 50, scope: !5034)
!5048 = !DILocation(line: 985, column: 3, scope: !5034)
!5049 = !DILocation(line: 986, column: 21, scope: !5034)
!5050 = !DILocation(line: 986, column: 25, scope: !5034)
!5051 = !DILocation(line: 986, column: 44, scope: !5034)
!5052 = !DILocation(line: 986, column: 3, scope: !5034)
!5053 = !DILocation(line: 987, column: 1, scope: !5034)
!5054 = distinct !DISubprogram(name: "lto_output_ts_vec_tree_pointers", scope: !3, file: !3, line: 995, type: !2909, scopeLine: 996, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5055 = !DILocalVariable(name: "ob", arg: 1, scope: !5054, file: !3, line: 995, type: !932)
!5056 = !DILocation(line: 995, column: 55, scope: !5054)
!5057 = !DILocalVariable(name: "expr", arg: 2, scope: !5054, file: !3, line: 995, type: !1012)
!5058 = !DILocation(line: 995, column: 64, scope: !5054)
!5059 = !DILocalVariable(name: "ref_p", arg: 3, scope: !5054, file: !3, line: 995, type: !1130)
!5060 = !DILocation(line: 995, column: 75, scope: !5054)
!5061 = !DILocalVariable(name: "i", scope: !5054, file: !3, line: 997, type: !962)
!5062 = !DILocation(line: 997, column: 7, scope: !5054)
!5063 = !DILocation(line: 1001, column: 10, scope: !5064)
!5064 = distinct !DILexicalBlock(scope: !5054, file: !3, line: 1001, column: 3)
!5065 = !DILocation(line: 1001, column: 8, scope: !5064)
!5066 = !DILocation(line: 1001, column: 15, scope: !5067)
!5067 = distinct !DILexicalBlock(scope: !5064, file: !3, line: 1001, column: 3)
!5068 = !DILocation(line: 1001, column: 19, scope: !5067)
!5069 = !DILocation(line: 1001, column: 17, scope: !5067)
!5070 = !DILocation(line: 1001, column: 3, scope: !5064)
!5071 = !DILocation(line: 1002, column: 29, scope: !5067)
!5072 = !DILocation(line: 1002, column: 33, scope: !5067)
!5073 = !DILocation(line: 1002, column: 57, scope: !5067)
!5074 = !DILocation(line: 1002, column: 5, scope: !5067)
!5075 = !DILocation(line: 1001, column: 44, scope: !5067)
!5076 = !DILocation(line: 1001, column: 3, scope: !5067)
!5077 = distinct !{!5077, !5070, !5078}
!5078 = !DILocation(line: 1002, column: 62, scope: !5064)
!5079 = !DILocation(line: 1003, column: 1, scope: !5054)
!5080 = distinct !DISubprogram(name: "lto_output_ts_exp_tree_pointers", scope: !3, file: !3, line: 1011, type: !2909, scopeLine: 1012, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5081 = !DILocalVariable(name: "ob", arg: 1, scope: !5080, file: !3, line: 1011, type: !932)
!5082 = !DILocation(line: 1011, column: 55, scope: !5080)
!5083 = !DILocalVariable(name: "expr", arg: 2, scope: !5080, file: !3, line: 1011, type: !1012)
!5084 = !DILocation(line: 1011, column: 64, scope: !5080)
!5085 = !DILocalVariable(name: "ref_p", arg: 3, scope: !5080, file: !3, line: 1011, type: !1130)
!5086 = !DILocation(line: 1011, column: 75, scope: !5080)
!5087 = !DILocalVariable(name: "i", scope: !5080, file: !3, line: 1013, type: !962)
!5088 = !DILocation(line: 1013, column: 7, scope: !5080)
!5089 = !DILocation(line: 1015, column: 19, scope: !5080)
!5090 = !DILocation(line: 1015, column: 23, scope: !5080)
!5091 = !DILocation(line: 1015, column: 3, scope: !5080)
!5092 = !DILocation(line: 1016, column: 10, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5080, file: !3, line: 1016, column: 3)
!5094 = !DILocation(line: 1016, column: 8, scope: !5093)
!5095 = !DILocation(line: 1016, column: 15, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5093, file: !3, line: 1016, column: 3)
!5097 = !DILocation(line: 1016, column: 19, scope: !5096)
!5098 = !DILocation(line: 1016, column: 17, scope: !5096)
!5099 = !DILocation(line: 1016, column: 3, scope: !5093)
!5100 = !DILocation(line: 1017, column: 29, scope: !5096)
!5101 = !DILocation(line: 1017, column: 33, scope: !5096)
!5102 = !DILocation(line: 1017, column: 57, scope: !5096)
!5103 = !DILocation(line: 1017, column: 5, scope: !5096)
!5104 = !DILocation(line: 1016, column: 48, scope: !5096)
!5105 = !DILocation(line: 1016, column: 3, scope: !5096)
!5106 = distinct !{!5106, !5099, !5107}
!5107 = !DILocation(line: 1017, column: 62, scope: !5093)
!5108 = !DILocation(line: 1018, column: 24, scope: !5080)
!5109 = !DILocation(line: 1018, column: 28, scope: !5080)
!5110 = !DILocation(line: 1018, column: 3, scope: !5080)
!5111 = !DILocation(line: 1019, column: 27, scope: !5080)
!5112 = !DILocation(line: 1019, column: 31, scope: !5080)
!5113 = !DILocation(line: 1019, column: 50, scope: !5080)
!5114 = !DILocation(line: 1019, column: 3, scope: !5080)
!5115 = !DILocation(line: 1020, column: 1, scope: !5080)
!5116 = distinct !DISubprogram(name: "lto_output_ts_block_tree_pointers", scope: !3, file: !3, line: 1028, type: !2909, scopeLine: 1030, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5117 = !DILocalVariable(name: "ob", arg: 1, scope: !5116, file: !3, line: 1028, type: !932)
!5118 = !DILocation(line: 1028, column: 57, scope: !5116)
!5119 = !DILocalVariable(name: "expr", arg: 2, scope: !5116, file: !3, line: 1028, type: !1012)
!5120 = !DILocation(line: 1028, column: 66, scope: !5116)
!5121 = !DILocalVariable(name: "ref_p", arg: 3, scope: !5116, file: !3, line: 1029, type: !1130)
!5122 = !DILocation(line: 1029, column: 13, scope: !5116)
!5123 = !DILocalVariable(name: "i", scope: !5116, file: !3, line: 1031, type: !7)
!5124 = !DILocation(line: 1031, column: 12, scope: !5116)
!5125 = !DILocalVariable(name: "t", scope: !5116, file: !3, line: 1032, type: !1012)
!5126 = !DILocation(line: 1032, column: 8, scope: !5116)
!5127 = !DILocation(line: 1034, column: 24, scope: !5116)
!5128 = !DILocation(line: 1034, column: 28, scope: !5116)
!5129 = !DILocation(line: 1034, column: 3, scope: !5116)
!5130 = !DILocation(line: 1035, column: 21, scope: !5116)
!5131 = !DILocation(line: 1035, column: 25, scope: !5116)
!5132 = !DILocation(line: 1035, column: 44, scope: !5116)
!5133 = !DILocation(line: 1035, column: 3, scope: !5116)
!5134 = !DILocation(line: 1037, column: 19, scope: !5116)
!5135 = !DILocation(line: 1037, column: 23, scope: !5116)
!5136 = !DILocation(line: 1037, column: 3, scope: !5116)
!5137 = !DILocation(line: 1038, column: 10, scope: !5138)
!5138 = distinct !DILexicalBlock(scope: !5116, file: !3, line: 1038, column: 3)
!5139 = !DILocation(line: 1038, column: 8, scope: !5138)
!5140 = !DILocation(line: 1038, column: 15, scope: !5141)
!5141 = distinct !DILexicalBlock(scope: !5138, file: !3, line: 1038, column: 3)
!5142 = !DILocation(line: 1038, column: 3, scope: !5138)
!5143 = !DILocation(line: 1039, column: 29, scope: !5141)
!5144 = !DILocation(line: 1039, column: 33, scope: !5141)
!5145 = !DILocation(line: 1039, column: 36, scope: !5141)
!5146 = !DILocation(line: 1039, column: 5, scope: !5141)
!5147 = !DILocation(line: 1038, column: 74, scope: !5141)
!5148 = !DILocation(line: 1038, column: 3, scope: !5141)
!5149 = distinct !{!5149, !5142, !5150}
!5150 = !DILocation(line: 1039, column: 41, scope: !5138)
!5151 = !DILocation(line: 1041, column: 27, scope: !5116)
!5152 = !DILocation(line: 1041, column: 31, scope: !5116)
!5153 = !DILocation(line: 1041, column: 58, scope: !5116)
!5154 = !DILocation(line: 1041, column: 3, scope: !5116)
!5155 = !DILocation(line: 1042, column: 27, scope: !5116)
!5156 = !DILocation(line: 1042, column: 31, scope: !5116)
!5157 = !DILocation(line: 1042, column: 61, scope: !5116)
!5158 = !DILocation(line: 1042, column: 3, scope: !5116)
!5159 = !DILocation(line: 1043, column: 27, scope: !5116)
!5160 = !DILocation(line: 1043, column: 31, scope: !5116)
!5161 = !DILocation(line: 1043, column: 61, scope: !5116)
!5162 = !DILocation(line: 1043, column: 3, scope: !5116)
!5163 = !DILocation(line: 1044, column: 27, scope: !5116)
!5164 = !DILocation(line: 1044, column: 31, scope: !5116)
!5165 = !DILocation(line: 1044, column: 60, scope: !5116)
!5166 = !DILocation(line: 1044, column: 3, scope: !5116)
!5167 = !DILocation(line: 1045, column: 21, scope: !5116)
!5168 = !DILocation(line: 1045, column: 25, scope: !5116)
!5169 = !DILocation(line: 1045, column: 49, scope: !5116)
!5170 = !DILocation(line: 1045, column: 3, scope: !5116)
!5171 = !DILocation(line: 1046, column: 1, scope: !5116)
!5172 = distinct !DISubprogram(name: "lto_output_ts_binfo_tree_pointers", scope: !3, file: !3, line: 1054, type: !2909, scopeLine: 1056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5173 = !DILocalVariable(name: "ob", arg: 1, scope: !5172, file: !3, line: 1054, type: !932)
!5174 = !DILocation(line: 1054, column: 57, scope: !5172)
!5175 = !DILocalVariable(name: "expr", arg: 2, scope: !5172, file: !3, line: 1054, type: !1012)
!5176 = !DILocation(line: 1054, column: 66, scope: !5172)
!5177 = !DILocalVariable(name: "ref_p", arg: 3, scope: !5172, file: !3, line: 1055, type: !1130)
!5178 = !DILocation(line: 1055, column: 13, scope: !5172)
!5179 = !DILocalVariable(name: "i", scope: !5172, file: !3, line: 1057, type: !7)
!5180 = !DILocation(line: 1057, column: 12, scope: !5172)
!5181 = !DILocalVariable(name: "t", scope: !5172, file: !3, line: 1058, type: !1012)
!5182 = !DILocation(line: 1058, column: 8, scope: !5172)
!5183 = !DILocation(line: 1063, column: 10, scope: !5184)
!5184 = distinct !DILexicalBlock(scope: !5172, file: !3, line: 1063, column: 3)
!5185 = !DILocation(line: 1063, column: 8, scope: !5184)
!5186 = !DILocation(line: 1063, column: 15, scope: !5187)
!5187 = distinct !DILexicalBlock(scope: !5184, file: !3, line: 1063, column: 3)
!5188 = !DILocation(line: 1063, column: 3, scope: !5184)
!5189 = !DILocation(line: 1064, column: 29, scope: !5187)
!5190 = !DILocation(line: 1064, column: 33, scope: !5187)
!5191 = !DILocation(line: 1064, column: 36, scope: !5187)
!5192 = !DILocation(line: 1064, column: 5, scope: !5187)
!5193 = !DILocation(line: 1063, column: 68, scope: !5187)
!5194 = !DILocation(line: 1063, column: 3, scope: !5187)
!5195 = distinct !{!5195, !5188, !5196}
!5196 = !DILocation(line: 1064, column: 41, scope: !5184)
!5197 = !DILocation(line: 1065, column: 16, scope: !5172)
!5198 = !DILocation(line: 1065, column: 3, scope: !5172)
!5199 = !DILocation(line: 1067, column: 27, scope: !5172)
!5200 = !DILocation(line: 1067, column: 31, scope: !5172)
!5201 = !DILocation(line: 1067, column: 52, scope: !5172)
!5202 = !DILocation(line: 1067, column: 3, scope: !5172)
!5203 = !DILocation(line: 1068, column: 27, scope: !5172)
!5204 = !DILocation(line: 1068, column: 31, scope: !5172)
!5205 = !DILocation(line: 1068, column: 52, scope: !5172)
!5206 = !DILocation(line: 1068, column: 3, scope: !5172)
!5207 = !DILocation(line: 1069, column: 27, scope: !5172)
!5208 = !DILocation(line: 1069, column: 31, scope: !5172)
!5209 = !DILocation(line: 1069, column: 54, scope: !5172)
!5210 = !DILocation(line: 1069, column: 3, scope: !5172)
!5211 = !DILocation(line: 1070, column: 27, scope: !5172)
!5212 = !DILocation(line: 1070, column: 31, scope: !5172)
!5213 = !DILocation(line: 1070, column: 56, scope: !5172)
!5214 = !DILocation(line: 1070, column: 3, scope: !5172)
!5215 = !DILocation(line: 1072, column: 19, scope: !5172)
!5216 = !DILocation(line: 1072, column: 23, scope: !5172)
!5217 = !DILocation(line: 1072, column: 3, scope: !5172)
!5218 = !DILocation(line: 1073, column: 10, scope: !5219)
!5219 = distinct !DILexicalBlock(scope: !5172, file: !3, line: 1073, column: 3)
!5220 = !DILocation(line: 1073, column: 8, scope: !5219)
!5221 = !DILocation(line: 1073, column: 15, scope: !5222)
!5222 = distinct !DILexicalBlock(scope: !5219, file: !3, line: 1073, column: 3)
!5223 = !DILocation(line: 1073, column: 3, scope: !5219)
!5224 = !DILocation(line: 1074, column: 29, scope: !5222)
!5225 = !DILocation(line: 1074, column: 33, scope: !5222)
!5226 = !DILocation(line: 1074, column: 36, scope: !5222)
!5227 = !DILocation(line: 1074, column: 5, scope: !5222)
!5228 = !DILocation(line: 1073, column: 70, scope: !5222)
!5229 = !DILocation(line: 1073, column: 3, scope: !5222)
!5230 = distinct !{!5230, !5223, !5231}
!5231 = !DILocation(line: 1074, column: 41, scope: !5219)
!5232 = !DILocation(line: 1076, column: 27, scope: !5172)
!5233 = !DILocation(line: 1076, column: 31, scope: !5172)
!5234 = !DILocation(line: 1076, column: 63, scope: !5172)
!5235 = !DILocation(line: 1076, column: 3, scope: !5172)
!5236 = !DILocation(line: 1077, column: 27, scope: !5172)
!5237 = !DILocation(line: 1077, column: 31, scope: !5172)
!5238 = !DILocation(line: 1077, column: 58, scope: !5172)
!5239 = !DILocation(line: 1077, column: 3, scope: !5172)
!5240 = !DILocation(line: 1078, column: 27, scope: !5172)
!5241 = !DILocation(line: 1078, column: 31, scope: !5172)
!5242 = !DILocation(line: 1078, column: 56, scope: !5172)
!5243 = !DILocation(line: 1078, column: 3, scope: !5172)
!5244 = !DILocation(line: 1079, column: 1, scope: !5172)
!5245 = distinct !DISubprogram(name: "lto_output_ts_constructor_tree_pointers", scope: !3, file: !3, line: 1087, type: !2909, scopeLine: 1089, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5246 = !DILocalVariable(name: "ob", arg: 1, scope: !5245, file: !3, line: 1087, type: !932)
!5247 = !DILocation(line: 1087, column: 63, scope: !5245)
!5248 = !DILocalVariable(name: "expr", arg: 2, scope: !5245, file: !3, line: 1087, type: !1012)
!5249 = !DILocation(line: 1087, column: 72, scope: !5245)
!5250 = !DILocalVariable(name: "ref_p", arg: 3, scope: !5245, file: !3, line: 1088, type: !1130)
!5251 = !DILocation(line: 1088, column: 12, scope: !5245)
!5252 = !DILocalVariable(name: "i", scope: !5245, file: !3, line: 1090, type: !7)
!5253 = !DILocation(line: 1090, column: 12, scope: !5245)
!5254 = !DILocalVariable(name: "index", scope: !5245, file: !3, line: 1091, type: !1012)
!5255 = !DILocation(line: 1091, column: 8, scope: !5245)
!5256 = !DILocalVariable(name: "value", scope: !5245, file: !3, line: 1091, type: !1012)
!5257 = !DILocation(line: 1091, column: 15, scope: !5245)
!5258 = !DILocation(line: 1093, column: 19, scope: !5245)
!5259 = !DILocation(line: 1093, column: 23, scope: !5245)
!5260 = !DILocation(line: 1093, column: 3, scope: !5245)
!5261 = !DILocation(line: 1094, column: 3, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 1094, column: 3)
!5263 = !DILocation(line: 1094, column: 3, scope: !5264)
!5264 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 1094, column: 3)
!5265 = !DILocation(line: 1096, column: 31, scope: !5266)
!5266 = distinct !DILexicalBlock(scope: !5264, file: !3, line: 1095, column: 5)
!5267 = !DILocation(line: 1096, column: 35, scope: !5266)
!5268 = !DILocation(line: 1096, column: 42, scope: !5266)
!5269 = !DILocation(line: 1096, column: 7, scope: !5266)
!5270 = !DILocation(line: 1097, column: 31, scope: !5266)
!5271 = !DILocation(line: 1097, column: 35, scope: !5266)
!5272 = !DILocation(line: 1097, column: 42, scope: !5266)
!5273 = !DILocation(line: 1097, column: 7, scope: !5266)
!5274 = !DILocation(line: 1098, column: 5, scope: !5266)
!5275 = distinct !{!5275, !5261, !5276}
!5276 = !DILocation(line: 1098, column: 5, scope: !5262)
!5277 = !DILocation(line: 1099, column: 1, scope: !5245)
!5278 = distinct !DISubprogram(name: "lto_output_chain", scope: !3, file: !3, line: 761, type: !2909, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5279 = !DILocalVariable(name: "ob", arg: 1, scope: !5278, file: !3, line: 761, type: !932)
!5280 = !DILocation(line: 761, column: 40, scope: !5278)
!5281 = !DILocalVariable(name: "t", arg: 2, scope: !5278, file: !3, line: 761, type: !1012)
!5282 = !DILocation(line: 761, column: 49, scope: !5278)
!5283 = !DILocalVariable(name: "ref_p", arg: 3, scope: !5278, file: !3, line: 761, type: !1130)
!5284 = !DILocation(line: 761, column: 57, scope: !5278)
!5285 = !DILocalVariable(name: "i", scope: !5278, file: !3, line: 763, type: !962)
!5286 = !DILocation(line: 763, column: 7, scope: !5278)
!5287 = !DILocalVariable(name: "count", scope: !5278, file: !3, line: 763, type: !962)
!5288 = !DILocation(line: 763, column: 10, scope: !5278)
!5289 = !DILocation(line: 765, column: 24, scope: !5278)
!5290 = !DILocation(line: 765, column: 11, scope: !5278)
!5291 = !DILocation(line: 765, column: 9, scope: !5278)
!5292 = !DILocation(line: 766, column: 19, scope: !5278)
!5293 = !DILocation(line: 766, column: 23, scope: !5278)
!5294 = !DILocation(line: 766, column: 3, scope: !5278)
!5295 = !DILocation(line: 767, column: 10, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !5278, file: !3, line: 767, column: 3)
!5297 = !DILocation(line: 767, column: 8, scope: !5296)
!5298 = !DILocation(line: 767, column: 15, scope: !5299)
!5299 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 767, column: 3)
!5300 = !DILocation(line: 767, column: 19, scope: !5299)
!5301 = !DILocation(line: 767, column: 17, scope: !5299)
!5302 = !DILocation(line: 767, column: 3, scope: !5296)
!5303 = !DILocalVariable(name: "saved_chain", scope: !5304, file: !3, line: 769, type: !1012)
!5304 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 768, column: 5)
!5305 = !DILocation(line: 769, column: 12, scope: !5304)
!5306 = !DILocation(line: 773, column: 21, scope: !5304)
!5307 = !DILocation(line: 773, column: 19, scope: !5304)
!5308 = !DILocation(line: 774, column: 7, scope: !5304)
!5309 = !DILocation(line: 774, column: 22, scope: !5304)
!5310 = !DILocation(line: 776, column: 31, scope: !5304)
!5311 = !DILocation(line: 776, column: 35, scope: !5304)
!5312 = !DILocation(line: 776, column: 38, scope: !5304)
!5313 = !DILocation(line: 776, column: 7, scope: !5304)
!5314 = !DILocation(line: 778, column: 24, scope: !5304)
!5315 = !DILocation(line: 778, column: 7, scope: !5304)
!5316 = !DILocation(line: 778, column: 22, scope: !5304)
!5317 = !DILocation(line: 779, column: 11, scope: !5304)
!5318 = !DILocation(line: 779, column: 9, scope: !5304)
!5319 = !DILocation(line: 780, column: 5, scope: !5304)
!5320 = !DILocation(line: 767, column: 27, scope: !5299)
!5321 = !DILocation(line: 767, column: 3, scope: !5299)
!5322 = distinct !{!5322, !5302, !5323}
!5323 = !DILocation(line: 780, column: 5, scope: !5296)
!5324 = !DILocation(line: 781, column: 1, scope: !5278)
!5325 = distinct !DISubprogram(name: "lto_output_location", scope: !3, file: !3, line: 608, type: !5326, scopeLine: 609, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5326 = !DISubroutineType(types: !5327)
!5327 = !{null, !932, !1138}
!5328 = !DILocalVariable(name: "ob", arg: 1, scope: !5325, file: !3, line: 608, type: !932)
!5329 = !DILocation(line: 608, column: 43, scope: !5325)
!5330 = !DILocalVariable(name: "loc", arg: 2, scope: !5325, file: !3, line: 608, type: !1138)
!5331 = !DILocation(line: 608, column: 58, scope: !5325)
!5332 = !DILocalVariable(name: "xloc", scope: !5325, file: !3, line: 610, type: !5333)
!5333 = !DIDerivedType(tag: DW_TAG_typedef, name: "expanded_location", file: !1139, line: 52, baseType: !5334)
!5334 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1139, line: 40, size: 192, elements: !5335)
!5335 = !{!5336, !5337, !5338, !5339}
!5336 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !5334, file: !1139, line: 43, baseType: !1214, size: 64)
!5337 = !DIDerivedType(tag: DW_TAG_member, name: "line", scope: !5334, file: !1139, line: 46, baseType: !962, size: 32, offset: 64)
!5338 = !DIDerivedType(tag: DW_TAG_member, name: "column", scope: !5334, file: !1139, line: 48, baseType: !962, size: 32, offset: 96)
!5339 = !DIDerivedType(tag: DW_TAG_member, name: "sysp", scope: !5334, file: !1139, line: 51, baseType: !1130, size: 8, offset: 128)
!5340 = !DILocation(line: 610, column: 21, scope: !5325)
!5341 = !DILocation(line: 612, column: 7, scope: !5342)
!5342 = distinct !DILexicalBlock(scope: !5325, file: !3, line: 612, column: 7)
!5343 = !DILocation(line: 612, column: 11, scope: !5342)
!5344 = !DILocation(line: 612, column: 7, scope: !5325)
!5345 = !DILocation(line: 614, column: 22, scope: !5346)
!5346 = distinct !DILexicalBlock(scope: !5342, file: !3, line: 613, column: 5)
!5347 = !DILocation(line: 614, column: 26, scope: !5346)
!5348 = !DILocation(line: 614, column: 30, scope: !5346)
!5349 = !DILocation(line: 614, column: 7, scope: !5346)
!5350 = !DILocation(line: 615, column: 7, scope: !5346)
!5351 = !DILocation(line: 618, column: 27, scope: !5325)
!5352 = !DILocation(line: 618, column: 10, scope: !5325)
!5353 = !DILocation(line: 620, column: 18, scope: !5325)
!5354 = !DILocation(line: 620, column: 22, scope: !5325)
!5355 = !DILocation(line: 620, column: 26, scope: !5325)
!5356 = !DILocation(line: 620, column: 44, scope: !5325)
!5357 = !DILocation(line: 620, column: 3, scope: !5325)
!5358 = !DILocation(line: 621, column: 19, scope: !5325)
!5359 = !DILocation(line: 621, column: 28, scope: !5325)
!5360 = !DILocation(line: 621, column: 23, scope: !5325)
!5361 = !DILocation(line: 621, column: 3, scope: !5325)
!5362 = !DILocation(line: 622, column: 19, scope: !5325)
!5363 = !DILocation(line: 622, column: 28, scope: !5325)
!5364 = !DILocation(line: 622, column: 23, scope: !5325)
!5365 = !DILocation(line: 622, column: 3, scope: !5325)
!5366 = !DILocation(line: 623, column: 19, scope: !5325)
!5367 = !DILocation(line: 623, column: 28, scope: !5325)
!5368 = !DILocation(line: 623, column: 23, scope: !5325)
!5369 = !DILocation(line: 623, column: 3, scope: !5325)
!5370 = !DILocation(line: 625, column: 27, scope: !5325)
!5371 = !DILocation(line: 625, column: 3, scope: !5325)
!5372 = !DILocation(line: 625, column: 7, scope: !5325)
!5373 = !DILocation(line: 625, column: 20, scope: !5325)
!5374 = !DILocation(line: 626, column: 27, scope: !5325)
!5375 = !DILocation(line: 626, column: 3, scope: !5325)
!5376 = !DILocation(line: 626, column: 7, scope: !5325)
!5377 = !DILocation(line: 626, column: 20, scope: !5325)
!5378 = !DILocation(line: 627, column: 26, scope: !5325)
!5379 = !DILocation(line: 627, column: 3, scope: !5325)
!5380 = !DILocation(line: 627, column: 7, scope: !5325)
!5381 = !DILocation(line: 627, column: 19, scope: !5325)
!5382 = !DILocation(line: 628, column: 1, scope: !5325)
!5383 = distinct !DISubprogram(name: "tree_operand_length", scope: !149, file: !149, line: 5347, type: !5384, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5384 = !DISubroutineType(types: !5385)
!5385 = !{!962, !5386}
!5386 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1013, line: 59, baseType: !5387)
!5387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5388, size: 64)
!5388 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1015)
!5389 = !DILocalVariable(name: "node", arg: 1, scope: !5383, file: !149, line: 5347, type: !5386)
!5390 = !DILocation(line: 5347, column: 33, scope: !5383)
!5391 = !DILocation(line: 5349, column: 7, scope: !5392)
!5392 = distinct !DILexicalBlock(scope: !5383, file: !149, line: 5349, column: 7)
!5393 = !DILocation(line: 5349, column: 7, scope: !5383)
!5394 = !DILocation(line: 5350, column: 12, scope: !5392)
!5395 = !DILocation(line: 5350, column: 5, scope: !5392)
!5396 = !DILocation(line: 5352, column: 12, scope: !5392)
!5397 = !DILocation(line: 5352, column: 5, scope: !5392)
!5398 = !DILocation(line: 5353, column: 1, scope: !5383)
!5399 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !149, file: !149, line: 182, type: !5400, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5400 = !DISubroutineType(types: !5401)
!5401 = !{!962, !4262, !7, !1375}
!5402 = !DILocalVariable(name: "vec_", arg: 1, scope: !5399, file: !149, line: 182, type: !4262)
!5403 = !DILocation(line: 182, column: 1, scope: !5399)
!5404 = !DILocalVariable(name: "ix_", arg: 2, scope: !5399, file: !149, line: 182, type: !7)
!5405 = !DILocalVariable(name: "ptr", arg: 3, scope: !5399, file: !149, line: 182, type: !1375)
!5406 = !DILocation(line: 182, column: 1, scope: !5407)
!5407 = distinct !DILexicalBlock(scope: !5399, file: !149, line: 182, column: 1)
!5408 = !DILocation(line: 182, column: 1, scope: !5409)
!5409 = distinct !DILexicalBlock(scope: !5407, file: !149, line: 182, column: 1)
!5410 = !DILocation(line: 182, column: 1, scope: !5411)
!5411 = distinct !DILexicalBlock(scope: !5407, file: !149, line: 182, column: 1)
!5412 = distinct !DISubprogram(name: "VEC_constructor_elt_base_length", scope: !149, file: !149, line: 1537, type: !5413, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5413 = !DISubroutineType(types: !5414)
!5414 = !{!7, !5415}
!5415 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5416, size: 64)
!5416 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2134)
!5417 = !DILocalVariable(name: "vec_", arg: 1, scope: !5412, file: !149, line: 1537, type: !5415)
!5418 = !DILocation(line: 1537, column: 1, scope: !5412)
!5419 = distinct !DISubprogram(name: "VEC_constructor_elt_base_index", scope: !149, file: !149, line: 1537, type: !5420, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5420 = !DISubroutineType(types: !5421)
!5421 = !{!5422, !5423, !7}
!5422 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2141, size: 64)
!5423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2134, size: 64)
!5424 = !DILocalVariable(name: "vec_", arg: 1, scope: !5419, file: !149, line: 1537, type: !5423)
!5425 = !DILocation(line: 1537, column: 1, scope: !5419)
!5426 = !DILocalVariable(name: "ix_", arg: 2, scope: !5419, file: !149, line: 1537, type: !7)
!5427 = !DILocation(line: 0, scope: !5419)
!5428 = distinct !DISubprogram(name: "lto_writer_init", scope: !3, file: !3, line: 2084, type: !2458, scopeLine: 2085, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5429 = !DILocation(line: 2086, column: 3, scope: !5428)
!5430 = !DILocation(line: 2087, column: 1, scope: !5428)
!5431 = distinct !DISubprogram(name: "csi_start", scope: !399, file: !399, line: 668, type: !5432, scopeLine: 669, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5432 = !DISubroutineType(types: !5433)
!5433 = !{!3299, !3291}
!5434 = !DILocalVariable(name: "set", arg: 1, scope: !5431, file: !399, line: 668, type: !3291)
!5435 = !DILocation(line: 668, column: 28, scope: !5431)
!5436 = !DILocalVariable(name: "csi", scope: !5431, file: !399, line: 670, type: !3299)
!5437 = !DILocation(line: 670, column: 28, scope: !5431)
!5438 = !DILocation(line: 672, column: 13, scope: !5431)
!5439 = !DILocation(line: 672, column: 7, scope: !5431)
!5440 = !DILocation(line: 672, column: 11, scope: !5431)
!5441 = !DILocation(line: 673, column: 7, scope: !5431)
!5442 = !DILocation(line: 673, column: 13, scope: !5431)
!5443 = !DILocation(line: 674, column: 3, scope: !5431)
!5444 = distinct !DISubprogram(name: "csi_end_p", scope: !399, file: !399, line: 647, type: !5445, scopeLine: 648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5445 = !DISubroutineType(types: !5446)
!5446 = !{!1130, !3299}
!5447 = !DILocalVariable(name: "csi", arg: 1, scope: !5444, file: !399, line: 647, type: !3299)
!5448 = !DILocation(line: 647, column: 37, scope: !5444)
!5449 = !DILocation(line: 649, column: 14, scope: !5444)
!5450 = !DILocation(line: 649, column: 23, scope: !5444)
!5451 = !DILocation(line: 649, column: 20, scope: !5444)
!5452 = !DILocation(line: 649, column: 10, scope: !5444)
!5453 = !DILocation(line: 649, column: 3, scope: !5444)
!5454 = distinct !DISubprogram(name: "csi_node", scope: !399, file: !399, line: 661, type: !5455, scopeLine: 662, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5455 = !DISubroutineType(types: !5456)
!5456 = !{!2373, !3299}
!5457 = !DILocalVariable(name: "csi", arg: 1, scope: !5454, file: !399, line: 661, type: !3299)
!5458 = !DILocation(line: 661, column: 36, scope: !5454)
!5459 = !DILocation(line: 663, column: 10, scope: !5454)
!5460 = !DILocation(line: 663, column: 3, scope: !5454)
!5461 = distinct !DISubprogram(name: "output_function", scope: !3, file: !3, line: 1829, type: !2478, scopeLine: 1830, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5462 = !DILocalVariable(name: "node", arg: 1, scope: !5461, file: !3, line: 1829, type: !2373)
!5463 = !DILocation(line: 1829, column: 38, scope: !5461)
!5464 = !DILocalVariable(name: "bp", scope: !5461, file: !3, line: 1831, type: !2844)
!5465 = !DILocation(line: 1831, column: 21, scope: !5461)
!5466 = !DILocalVariable(name: "function", scope: !5461, file: !3, line: 1832, type: !1012)
!5467 = !DILocation(line: 1832, column: 8, scope: !5461)
!5468 = !DILocalVariable(name: "fn", scope: !5461, file: !3, line: 1833, type: !1725)
!5469 = !DILocation(line: 1833, column: 20, scope: !5461)
!5470 = !DILocalVariable(name: "bb", scope: !5461, file: !3, line: 1834, type: !1840)
!5471 = !DILocation(line: 1834, column: 15, scope: !5461)
!5472 = !DILocalVariable(name: "ob", scope: !5461, file: !3, line: 1835, type: !932)
!5473 = !DILocation(line: 1835, column: 24, scope: !5461)
!5474 = !DILocation(line: 1837, column: 14, scope: !5461)
!5475 = !DILocation(line: 1837, column: 20, scope: !5461)
!5476 = !DILocation(line: 1837, column: 12, scope: !5461)
!5477 = !DILocation(line: 1838, column: 8, scope: !5461)
!5478 = !DILocation(line: 1838, column: 6, scope: !5461)
!5479 = !DILocation(line: 1839, column: 8, scope: !5461)
!5480 = !DILocation(line: 1839, column: 6, scope: !5461)
!5481 = !DILocation(line: 1841, column: 20, scope: !5461)
!5482 = !DILocation(line: 1841, column: 3, scope: !5461)
!5483 = !DILocation(line: 1842, column: 21, scope: !5461)
!5484 = !DILocation(line: 1842, column: 3, scope: !5461)
!5485 = !DILocation(line: 1842, column: 7, scope: !5461)
!5486 = !DILocation(line: 1842, column: 19, scope: !5461)
!5487 = !DILocation(line: 1844, column: 3, scope: !5461)
!5488 = !DILocation(line: 1847, column: 27, scope: !5461)
!5489 = !DILocation(line: 1847, column: 25, scope: !5461)
!5490 = !DILocation(line: 1848, column: 14, scope: !5461)
!5491 = !DILocation(line: 1848, column: 3, scope: !5461)
!5492 = !DILocation(line: 1851, column: 24, scope: !5461)
!5493 = !DILocation(line: 1851, column: 28, scope: !5461)
!5494 = !DILocation(line: 1851, column: 3, scope: !5461)
!5495 = !DILocation(line: 1853, column: 24, scope: !5461)
!5496 = !DILocation(line: 1853, column: 3, scope: !5461)
!5497 = !DILocation(line: 1856, column: 8, scope: !5461)
!5498 = !DILocation(line: 1856, column: 6, scope: !5461)
!5499 = !DILocation(line: 1857, column: 18, scope: !5461)
!5500 = !DILocation(line: 1857, column: 22, scope: !5461)
!5501 = !DILocation(line: 1857, column: 26, scope: !5461)
!5502 = !DILocation(line: 1857, column: 3, scope: !5461)
!5503 = !DILocation(line: 1858, column: 18, scope: !5461)
!5504 = !DILocation(line: 1858, column: 22, scope: !5461)
!5505 = !DILocation(line: 1858, column: 26, scope: !5461)
!5506 = !DILocation(line: 1858, column: 3, scope: !5461)
!5507 = !DILocation(line: 1859, column: 18, scope: !5461)
!5508 = !DILocation(line: 1859, column: 22, scope: !5461)
!5509 = !DILocation(line: 1859, column: 26, scope: !5461)
!5510 = !DILocation(line: 1859, column: 3, scope: !5461)
!5511 = !DILocation(line: 1860, column: 18, scope: !5461)
!5512 = !DILocation(line: 1860, column: 22, scope: !5461)
!5513 = !DILocation(line: 1860, column: 26, scope: !5461)
!5514 = !DILocation(line: 1860, column: 3, scope: !5461)
!5515 = !DILocation(line: 1861, column: 18, scope: !5461)
!5516 = !DILocation(line: 1861, column: 22, scope: !5461)
!5517 = !DILocation(line: 1861, column: 26, scope: !5461)
!5518 = !DILocation(line: 1861, column: 3, scope: !5461)
!5519 = !DILocation(line: 1862, column: 18, scope: !5461)
!5520 = !DILocation(line: 1862, column: 22, scope: !5461)
!5521 = !DILocation(line: 1862, column: 26, scope: !5461)
!5522 = !DILocation(line: 1862, column: 3, scope: !5461)
!5523 = !DILocation(line: 1863, column: 18, scope: !5461)
!5524 = !DILocation(line: 1863, column: 22, scope: !5461)
!5525 = !DILocation(line: 1863, column: 26, scope: !5461)
!5526 = !DILocation(line: 1863, column: 3, scope: !5461)
!5527 = !DILocation(line: 1864, column: 18, scope: !5461)
!5528 = !DILocation(line: 1864, column: 22, scope: !5461)
!5529 = !DILocation(line: 1864, column: 26, scope: !5461)
!5530 = !DILocation(line: 1864, column: 3, scope: !5461)
!5531 = !DILocation(line: 1865, column: 18, scope: !5461)
!5532 = !DILocation(line: 1865, column: 22, scope: !5461)
!5533 = !DILocation(line: 1865, column: 26, scope: !5461)
!5534 = !DILocation(line: 1865, column: 3, scope: !5461)
!5535 = !DILocation(line: 1866, column: 18, scope: !5461)
!5536 = !DILocation(line: 1866, column: 22, scope: !5461)
!5537 = !DILocation(line: 1866, column: 26, scope: !5461)
!5538 = !DILocation(line: 1866, column: 3, scope: !5461)
!5539 = !DILocation(line: 1867, column: 18, scope: !5461)
!5540 = !DILocation(line: 1867, column: 22, scope: !5461)
!5541 = !DILocation(line: 1867, column: 26, scope: !5461)
!5542 = !DILocation(line: 1867, column: 3, scope: !5461)
!5543 = !DILocation(line: 1868, column: 18, scope: !5461)
!5544 = !DILocation(line: 1868, column: 22, scope: !5461)
!5545 = !DILocation(line: 1868, column: 26, scope: !5461)
!5546 = !DILocation(line: 1868, column: 3, scope: !5461)
!5547 = !DILocation(line: 1869, column: 18, scope: !5461)
!5548 = !DILocation(line: 1869, column: 22, scope: !5461)
!5549 = !DILocation(line: 1869, column: 26, scope: !5461)
!5550 = !DILocation(line: 1869, column: 3, scope: !5461)
!5551 = !DILocation(line: 1870, column: 18, scope: !5461)
!5552 = !DILocation(line: 1870, column: 22, scope: !5461)
!5553 = !DILocation(line: 1870, column: 26, scope: !5461)
!5554 = !DILocation(line: 1870, column: 3, scope: !5461)
!5555 = !DILocation(line: 1871, column: 18, scope: !5461)
!5556 = !DILocation(line: 1871, column: 22, scope: !5461)
!5557 = !DILocation(line: 1871, column: 26, scope: !5461)
!5558 = !DILocation(line: 1871, column: 3, scope: !5461)
!5559 = !DILocation(line: 1872, column: 23, scope: !5461)
!5560 = !DILocation(line: 1872, column: 27, scope: !5461)
!5561 = !DILocation(line: 1872, column: 40, scope: !5461)
!5562 = !DILocation(line: 1872, column: 3, scope: !5461)
!5563 = !DILocation(line: 1873, column: 19, scope: !5461)
!5564 = !DILocation(line: 1873, column: 3, scope: !5461)
!5565 = !DILocation(line: 1876, column: 19, scope: !5461)
!5566 = !DILocation(line: 1876, column: 23, scope: !5461)
!5567 = !DILocation(line: 1876, column: 27, scope: !5461)
!5568 = !DILocation(line: 1876, column: 3, scope: !5461)
!5569 = !DILocation(line: 1879, column: 24, scope: !5461)
!5570 = !DILocation(line: 1879, column: 28, scope: !5461)
!5571 = !DILocation(line: 1879, column: 32, scope: !5461)
!5572 = !DILocation(line: 1879, column: 3, scope: !5461)
!5573 = !DILocation(line: 1880, column: 24, scope: !5461)
!5574 = !DILocation(line: 1880, column: 28, scope: !5461)
!5575 = !DILocation(line: 1880, column: 32, scope: !5461)
!5576 = !DILocation(line: 1880, column: 3, scope: !5461)
!5577 = !DILocation(line: 1883, column: 24, scope: !5461)
!5578 = !DILocation(line: 1883, column: 28, scope: !5461)
!5579 = !DILocation(line: 1883, column: 32, scope: !5461)
!5580 = !DILocation(line: 1883, column: 3, scope: !5461)
!5581 = !DILocation(line: 1886, column: 24, scope: !5461)
!5582 = !DILocation(line: 1886, column: 28, scope: !5461)
!5583 = !DILocation(line: 1886, column: 3, scope: !5461)
!5584 = !DILocation(line: 1889, column: 21, scope: !5461)
!5585 = !DILocation(line: 1889, column: 25, scope: !5461)
!5586 = !DILocation(line: 1889, column: 3, scope: !5461)
!5587 = !DILocation(line: 1892, column: 22, scope: !5461)
!5588 = !DILocation(line: 1892, column: 26, scope: !5461)
!5589 = !DILocation(line: 1892, column: 3, scope: !5461)
!5590 = !DILocation(line: 1896, column: 20, scope: !5461)
!5591 = !DILocation(line: 1896, column: 24, scope: !5461)
!5592 = !DILocation(line: 1896, column: 3, scope: !5461)
!5593 = !DILocation(line: 1902, column: 3, scope: !5461)
!5594 = !DILocation(line: 1905, column: 3, scope: !5595)
!5595 = distinct !DILexicalBlock(scope: !5461, file: !3, line: 1905, column: 3)
!5596 = !DILocation(line: 1905, column: 3, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1905, column: 3)
!5598 = !DILocation(line: 1906, column: 16, scope: !5597)
!5599 = !DILocation(line: 1906, column: 20, scope: !5597)
!5600 = !DILocation(line: 1906, column: 24, scope: !5597)
!5601 = !DILocation(line: 1906, column: 5, scope: !5597)
!5602 = distinct !{!5602, !5594, !5603}
!5603 = !DILocation(line: 1906, column: 26, scope: !5595)
!5604 = !DILocation(line: 1909, column: 16, scope: !5461)
!5605 = !DILocation(line: 1909, column: 3, scope: !5461)
!5606 = !DILocation(line: 1911, column: 15, scope: !5461)
!5607 = !DILocation(line: 1911, column: 19, scope: !5461)
!5608 = !DILocation(line: 1911, column: 3, scope: !5461)
!5609 = !DILocation(line: 1914, column: 16, scope: !5461)
!5610 = !DILocation(line: 1914, column: 20, scope: !5461)
!5611 = !DILocation(line: 1914, column: 3, scope: !5461)
!5612 = !DILocation(line: 1916, column: 25, scope: !5461)
!5613 = !DILocation(line: 1916, column: 3, scope: !5461)
!5614 = !DILocation(line: 1918, column: 25, scope: !5461)
!5615 = !DILocation(line: 1919, column: 3, scope: !5461)
!5616 = !DILocation(line: 1920, column: 1, scope: !5461)
!5617 = distinct !DISubprogram(name: "copy_function", scope: !3, file: !3, line: 2026, type: !2478, scopeLine: 2027, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5618 = !DILocalVariable(name: "node", arg: 1, scope: !5617, file: !3, line: 2026, type: !2373)
!5619 = !DILocation(line: 2026, column: 36, scope: !5617)
!5620 = !DILocalVariable(name: "function", scope: !5617, file: !3, line: 2028, type: !1012)
!5621 = !DILocation(line: 2028, column: 8, scope: !5617)
!5622 = !DILocation(line: 2028, column: 19, scope: !5617)
!5623 = !DILocation(line: 2028, column: 25, scope: !5617)
!5624 = !DILocalVariable(name: "file_data", scope: !5617, file: !3, line: 2029, type: !2513)
!5625 = !DILocation(line: 2029, column: 30, scope: !5617)
!5626 = !DILocation(line: 2029, column: 42, scope: !5617)
!5627 = !DILocation(line: 2029, column: 48, scope: !5617)
!5628 = !DILocation(line: 2029, column: 54, scope: !5617)
!5629 = !DILocalVariable(name: "output_stream", scope: !5617, file: !3, line: 2030, type: !2615)
!5630 = !DILocation(line: 2030, column: 29, scope: !5617)
!5631 = !DILocation(line: 2030, column: 45, scope: !5617)
!5632 = !DILocalVariable(name: "data", scope: !5617, file: !3, line: 2031, type: !1214)
!5633 = !DILocation(line: 2031, column: 15, scope: !5617)
!5634 = !DILocalVariable(name: "len", scope: !5617, file: !3, line: 2032, type: !972)
!5635 = !DILocation(line: 2032, column: 10, scope: !5617)
!5636 = !DILocalVariable(name: "name", scope: !5617, file: !3, line: 2033, type: !1214)
!5637 = !DILocation(line: 2033, column: 15, scope: !5617)
!5638 = !DILocation(line: 2033, column: 22, scope: !5617)
!5639 = !DILocalVariable(name: "section_name", scope: !5617, file: !3, line: 2034, type: !1279)
!5640 = !DILocation(line: 2034, column: 9, scope: !5617)
!5641 = !DILocation(line: 2035, column: 54, scope: !5617)
!5642 = !DILocation(line: 2035, column: 5, scope: !5617)
!5643 = !DILocalVariable(name: "i", scope: !5617, file: !3, line: 2036, type: !972)
!5644 = !DILocation(line: 2036, column: 10, scope: !5617)
!5645 = !DILocalVariable(name: "j", scope: !5617, file: !3, line: 2036, type: !972)
!5646 = !DILocation(line: 2036, column: 13, scope: !5617)
!5647 = !DILocalVariable(name: "in_state", scope: !5617, file: !3, line: 2037, type: !2517)
!5648 = !DILocation(line: 2037, column: 29, scope: !5617)
!5649 = !DILocalVariable(name: "out_state", scope: !5617, file: !3, line: 2038, type: !937)
!5650 = !DILocation(line: 2038, column: 30, scope: !5617)
!5651 = !DILocation(line: 2038, column: 42, scope: !5617)
!5652 = !DILocation(line: 2040, column: 22, scope: !5617)
!5653 = !DILocation(line: 2040, column: 37, scope: !5617)
!5654 = !DILocation(line: 2040, column: 36, scope: !5617)
!5655 = !DILocation(line: 2040, column: 3, scope: !5617)
!5656 = !DILocation(line: 2041, column: 9, scope: !5617)
!5657 = !DILocation(line: 2041, column: 3, scope: !5617)
!5658 = !DILocation(line: 2044, column: 37, scope: !5617)
!5659 = !DILocation(line: 2044, column: 48, scope: !5617)
!5660 = !DILocation(line: 2044, column: 10, scope: !5617)
!5661 = !DILocation(line: 2044, column: 8, scope: !5617)
!5662 = !DILocation(line: 2046, column: 32, scope: !5617)
!5663 = !DILocation(line: 2047, column: 32, scope: !5617)
!5664 = !DILocation(line: 2046, column: 10, scope: !5617)
!5665 = !DILocation(line: 2046, column: 8, scope: !5617)
!5666 = !DILocation(line: 2048, column: 3, scope: !5617)
!5667 = !DILocation(line: 2051, column: 27, scope: !5617)
!5668 = !DILocation(line: 2051, column: 42, scope: !5617)
!5669 = !DILocation(line: 2051, column: 48, scope: !5617)
!5670 = !DILocation(line: 2051, column: 3, scope: !5617)
!5671 = !DILocation(line: 2052, column: 21, scope: !5617)
!5672 = !DILocation(line: 2052, column: 3, scope: !5617)
!5673 = !DILocation(line: 2056, column: 37, scope: !5617)
!5674 = !DILocation(line: 2056, column: 43, scope: !5617)
!5675 = !DILocation(line: 2056, column: 49, scope: !5617)
!5676 = !DILocation(line: 2056, column: 64, scope: !5617)
!5677 = !DILocation(line: 2056, column: 5, scope: !5617)
!5678 = !DILocation(line: 2055, column: 12, scope: !5617)
!5679 = !DILocation(line: 2057, column: 3, scope: !5617)
!5680 = !DILocation(line: 2059, column: 10, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5617, file: !3, line: 2059, column: 3)
!5682 = !DILocation(line: 2059, column: 8, scope: !5681)
!5683 = !DILocation(line: 2059, column: 15, scope: !5684)
!5684 = distinct !DILexicalBlock(scope: !5681, file: !3, line: 2059, column: 3)
!5685 = !DILocation(line: 2059, column: 17, scope: !5684)
!5686 = !DILocation(line: 2059, column: 3, scope: !5681)
!5687 = !DILocalVariable(name: "n", scope: !5688, file: !3, line: 2061, type: !972)
!5688 = distinct !DILexicalBlock(scope: !5684, file: !3, line: 2060, column: 5)
!5689 = !DILocation(line: 2061, column: 14, scope: !5688)
!5690 = !DILocation(line: 2061, column: 18, scope: !5688)
!5691 = !DILocation(line: 2061, column: 28, scope: !5688)
!5692 = !DILocation(line: 2061, column: 36, scope: !5688)
!5693 = !DILocation(line: 2061, column: 39, scope: !5688)
!5694 = !DILocalVariable(name: "trees", scope: !5688, file: !3, line: 2062, type: !1375)
!5695 = !DILocation(line: 2062, column: 13, scope: !5688)
!5696 = !DILocation(line: 2062, column: 21, scope: !5688)
!5697 = !DILocation(line: 2062, column: 31, scope: !5688)
!5698 = !DILocation(line: 2062, column: 39, scope: !5688)
!5699 = !DILocation(line: 2062, column: 42, scope: !5688)
!5700 = !DILocalVariable(name: "encoder", scope: !5688, file: !3, line: 2063, type: !5701)
!5701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !942, size: 64)
!5702 = !DILocation(line: 2063, column: 36, scope: !5688)
!5703 = !DILocation(line: 2063, column: 48, scope: !5688)
!5704 = !DILocation(line: 2063, column: 59, scope: !5688)
!5705 = !DILocation(line: 2063, column: 67, scope: !5688)
!5706 = !DILocation(line: 2068, column: 7, scope: !5688)
!5707 = !DILocation(line: 2069, column: 14, scope: !5708)
!5708 = distinct !DILexicalBlock(scope: !5688, file: !3, line: 2069, column: 7)
!5709 = !DILocation(line: 2069, column: 12, scope: !5708)
!5710 = !DILocation(line: 2069, column: 19, scope: !5711)
!5711 = distinct !DILexicalBlock(scope: !5708, file: !3, line: 2069, column: 7)
!5712 = !DILocation(line: 2069, column: 23, scope: !5711)
!5713 = !DILocation(line: 2069, column: 21, scope: !5711)
!5714 = !DILocation(line: 2069, column: 7, scope: !5708)
!5715 = !DILocation(line: 2070, column: 2, scope: !5711)
!5716 = !DILocation(line: 2069, column: 27, scope: !5711)
!5717 = !DILocation(line: 2069, column: 7, scope: !5711)
!5718 = distinct !{!5718, !5714, !5719}
!5719 = !DILocation(line: 2070, column: 2, scope: !5708)
!5720 = !DILocation(line: 2071, column: 29, scope: !5688)
!5721 = !DILocation(line: 2071, column: 7, scope: !5688)
!5722 = !DILocation(line: 2071, column: 16, scope: !5688)
!5723 = !DILocation(line: 2071, column: 27, scope: !5688)
!5724 = !DILocation(line: 2072, column: 5, scope: !5688)
!5725 = !DILocation(line: 2059, column: 40, scope: !5684)
!5726 = !DILocation(line: 2059, column: 3, scope: !5684)
!5727 = distinct !{!5727, !5686, !5728}
!5728 = !DILocation(line: 2072, column: 5, scope: !5681)
!5729 = !DILocation(line: 2074, column: 26, scope: !5617)
!5730 = !DILocation(line: 2074, column: 64, scope: !5617)
!5731 = !DILocation(line: 2075, column: 5, scope: !5617)
!5732 = !DILocation(line: 2075, column: 11, scope: !5617)
!5733 = !DILocation(line: 2074, column: 3, scope: !5617)
!5734 = !DILocation(line: 2076, column: 9, scope: !5617)
!5735 = !DILocation(line: 2076, column: 3, scope: !5617)
!5736 = !DILocation(line: 2077, column: 3, scope: !5617)
!5737 = !DILocation(line: 2078, column: 1, scope: !5617)
!5738 = distinct !DISubprogram(name: "csi_next", scope: !399, file: !399, line: 654, type: !5739, scopeLine: 655, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5739 = !DISubroutineType(types: !5740)
!5740 = !{null, !5741}
!5741 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3299, size: 64)
!5742 = !DILocalVariable(name: "csi", arg: 1, scope: !5738, file: !399, line: 654, type: !5741)
!5743 = !DILocation(line: 654, column: 37, scope: !5738)
!5744 = !DILocation(line: 656, column: 3, scope: !5738)
!5745 = !DILocation(line: 656, column: 8, scope: !5738)
!5746 = !DILocation(line: 656, column: 13, scope: !5738)
!5747 = !DILocation(line: 657, column: 1, scope: !5738)
!5748 = distinct !DISubprogram(name: "VEC_cgraph_node_ptr_base_length", scope: !399, file: !399, line: 270, type: !5749, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5749 = !DISubroutineType(types: !5750)
!5750 = !{!7, !5751}
!5751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5752, size: 64)
!5752 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2365)
!5753 = !DILocalVariable(name: "vec_", arg: 1, scope: !5748, file: !399, line: 270, type: !5751)
!5754 = !DILocation(line: 270, column: 1, scope: !5748)
!5755 = distinct !DISubprogram(name: "VEC_cgraph_node_ptr_base_index", scope: !399, file: !399, line: 270, type: !5756, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5756 = !DISubroutineType(types: !5757)
!5757 = !{!2372, !5751, !7}
!5758 = !DILocalVariable(name: "vec_", arg: 1, scope: !5755, file: !399, line: 270, type: !5751)
!5759 = !DILocation(line: 270, column: 1, scope: !5755)
!5760 = !DILocalVariable(name: "ix_", arg: 2, scope: !5755, file: !399, line: 270, type: !7)
!5761 = !DILocation(line: 0, scope: !5755)
!5762 = distinct !DISubprogram(name: "output_ssa_names", scope: !3, file: !3, line: 1545, type: !5763, scopeLine: 1546, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5763 = !DISubroutineType(types: !5764)
!5764 = !{null, !932, !1725}
!5765 = !DILocalVariable(name: "ob", arg: 1, scope: !5762, file: !3, line: 1545, type: !932)
!5766 = !DILocation(line: 1545, column: 40, scope: !5762)
!5767 = !DILocalVariable(name: "fn", arg: 2, scope: !5762, file: !3, line: 1545, type: !1725)
!5768 = !DILocation(line: 1545, column: 61, scope: !5762)
!5769 = !DILocalVariable(name: "i", scope: !5762, file: !3, line: 1547, type: !7)
!5770 = !DILocation(line: 1547, column: 16, scope: !5762)
!5771 = !DILocalVariable(name: "len", scope: !5762, file: !3, line: 1547, type: !7)
!5772 = !DILocation(line: 1547, column: 19, scope: !5762)
!5773 = !DILocation(line: 1549, column: 9, scope: !5762)
!5774 = !DILocation(line: 1549, column: 7, scope: !5762)
!5775 = !DILocation(line: 1550, column: 19, scope: !5762)
!5776 = !DILocation(line: 1550, column: 23, scope: !5762)
!5777 = !DILocation(line: 1550, column: 3, scope: !5762)
!5778 = !DILocation(line: 1552, column: 10, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !5762, file: !3, line: 1552, column: 3)
!5780 = !DILocation(line: 1552, column: 8, scope: !5779)
!5781 = !DILocation(line: 1552, column: 15, scope: !5782)
!5782 = distinct !DILexicalBlock(scope: !5779, file: !3, line: 1552, column: 3)
!5783 = !DILocation(line: 1552, column: 19, scope: !5782)
!5784 = !DILocation(line: 1552, column: 17, scope: !5782)
!5785 = !DILocation(line: 1552, column: 3, scope: !5779)
!5786 = !DILocalVariable(name: "ptr", scope: !5787, file: !3, line: 1554, type: !1012)
!5787 = distinct !DILexicalBlock(scope: !5782, file: !3, line: 1553, column: 5)
!5788 = !DILocation(line: 1554, column: 12, scope: !5787)
!5789 = !DILocation(line: 1554, column: 18, scope: !5787)
!5790 = !DILocation(line: 1556, column: 11, scope: !5791)
!5791 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 1556, column: 11)
!5792 = !DILocation(line: 1556, column: 15, scope: !5791)
!5793 = !DILocation(line: 1557, column: 4, scope: !5791)
!5794 = !DILocation(line: 1557, column: 7, scope: !5791)
!5795 = !DILocation(line: 1558, column: 4, scope: !5791)
!5796 = !DILocation(line: 1558, column: 23, scope: !5791)
!5797 = !DILocation(line: 1558, column: 8, scope: !5791)
!5798 = !DILocation(line: 1556, column: 11, scope: !5787)
!5799 = !DILocation(line: 1559, column: 2, scope: !5791)
!5800 = !DILocation(line: 1561, column: 23, scope: !5787)
!5801 = !DILocation(line: 1561, column: 27, scope: !5787)
!5802 = !DILocation(line: 1561, column: 7, scope: !5787)
!5803 = !DILocation(line: 1562, column: 28, scope: !5787)
!5804 = !DILocation(line: 1562, column: 32, scope: !5787)
!5805 = !DILocation(line: 1562, column: 45, scope: !5787)
!5806 = !DILocation(line: 1562, column: 7, scope: !5787)
!5807 = !DILocation(line: 1563, column: 28, scope: !5787)
!5808 = !DILocation(line: 1563, column: 32, scope: !5787)
!5809 = !DILocation(line: 1563, column: 7, scope: !5787)
!5810 = !DILocation(line: 1564, column: 5, scope: !5787)
!5811 = !DILocation(line: 1552, column: 25, scope: !5782)
!5812 = !DILocation(line: 1552, column: 3, scope: !5782)
!5813 = distinct !{!5813, !5785, !5814}
!5814 = !DILocation(line: 1564, column: 5, scope: !5779)
!5815 = !DILocation(line: 1566, column: 16, scope: !5762)
!5816 = !DILocation(line: 1566, column: 3, scope: !5762)
!5817 = !DILocation(line: 1567, column: 1, scope: !5762)
!5818 = distinct !DISubprogram(name: "output_eh_regions", scope: !3, file: !3, line: 1488, type: !5763, scopeLine: 1489, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5819 = !DILocalVariable(name: "ob", arg: 1, scope: !5818, file: !3, line: 1488, type: !932)
!5820 = !DILocation(line: 1488, column: 41, scope: !5818)
!5821 = !DILocalVariable(name: "fn", arg: 2, scope: !5818, file: !3, line: 1488, type: !1725)
!5822 = !DILocation(line: 1488, column: 62, scope: !5818)
!5823 = !DILocation(line: 1490, column: 7, scope: !5824)
!5824 = distinct !DILexicalBlock(scope: !5818, file: !3, line: 1490, column: 7)
!5825 = !DILocation(line: 1490, column: 11, scope: !5824)
!5826 = !DILocation(line: 1490, column: 14, scope: !5824)
!5827 = !DILocation(line: 1490, column: 17, scope: !5824)
!5828 = !DILocation(line: 1490, column: 21, scope: !5824)
!5829 = !DILocation(line: 1490, column: 25, scope: !5824)
!5830 = !DILocation(line: 1490, column: 7, scope: !5818)
!5831 = !DILocalVariable(name: "i", scope: !5832, file: !3, line: 1492, type: !7)
!5832 = distinct !DILexicalBlock(scope: !5824, file: !3, line: 1491, column: 5)
!5833 = !DILocation(line: 1492, column: 16, scope: !5832)
!5834 = !DILocalVariable(name: "eh", scope: !5832, file: !3, line: 1493, type: !1734)
!5835 = !DILocation(line: 1493, column: 17, scope: !5832)
!5836 = !DILocalVariable(name: "lp", scope: !5832, file: !3, line: 1494, type: !1808)
!5837 = !DILocation(line: 1494, column: 22, scope: !5832)
!5838 = !DILocalVariable(name: "ttype", scope: !5832, file: !3, line: 1495, type: !1012)
!5839 = !DILocation(line: 1495, column: 12, scope: !5832)
!5840 = !DILocation(line: 1497, column: 28, scope: !5832)
!5841 = !DILocation(line: 1497, column: 7, scope: !5832)
!5842 = !DILocation(line: 1500, column: 23, scope: !5832)
!5843 = !DILocation(line: 1500, column: 27, scope: !5832)
!5844 = !DILocation(line: 1500, column: 31, scope: !5832)
!5845 = !DILocation(line: 1500, column: 35, scope: !5832)
!5846 = !DILocation(line: 1500, column: 48, scope: !5832)
!5847 = !DILocation(line: 1500, column: 7, scope: !5832)
!5848 = !DILocation(line: 1503, column: 23, scope: !5832)
!5849 = !DILocation(line: 1503, column: 27, scope: !5832)
!5850 = !DILocation(line: 1503, column: 7, scope: !5832)
!5851 = !DILocation(line: 1504, column: 14, scope: !5852)
!5852 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 1504, column: 7)
!5853 = !DILocation(line: 1504, column: 12, scope: !5852)
!5854 = !DILocation(line: 1504, column: 19, scope: !5855)
!5855 = distinct !DILexicalBlock(scope: !5852, file: !3, line: 1504, column: 7)
!5856 = !DILocation(line: 1504, column: 7, scope: !5852)
!5857 = !DILocation(line: 1505, column: 20, scope: !5855)
!5858 = !DILocation(line: 1505, column: 24, scope: !5855)
!5859 = !DILocation(line: 1505, column: 2, scope: !5855)
!5860 = !DILocation(line: 1504, column: 74, scope: !5855)
!5861 = !DILocation(line: 1504, column: 7, scope: !5855)
!5862 = distinct !{!5862, !5856, !5863}
!5863 = !DILocation(line: 1505, column: 26, scope: !5852)
!5864 = !DILocation(line: 1508, column: 23, scope: !5832)
!5865 = !DILocation(line: 1508, column: 27, scope: !5832)
!5866 = !DILocation(line: 1508, column: 7, scope: !5832)
!5867 = !DILocation(line: 1509, column: 14, scope: !5868)
!5868 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 1509, column: 7)
!5869 = !DILocation(line: 1509, column: 12, scope: !5868)
!5870 = !DILocation(line: 1509, column: 19, scope: !5871)
!5871 = distinct !DILexicalBlock(scope: !5868, file: !3, line: 1509, column: 7)
!5872 = !DILocation(line: 1509, column: 7, scope: !5868)
!5873 = !DILocation(line: 1510, column: 16, scope: !5871)
!5874 = !DILocation(line: 1510, column: 20, scope: !5871)
!5875 = !DILocation(line: 1510, column: 2, scope: !5871)
!5876 = !DILocation(line: 1509, column: 75, scope: !5871)
!5877 = !DILocation(line: 1509, column: 7, scope: !5871)
!5878 = distinct !{!5878, !5872, !5879}
!5879 = !DILocation(line: 1510, column: 22, scope: !5868)
!5880 = !DILocation(line: 1513, column: 23, scope: !5832)
!5881 = !DILocation(line: 1513, column: 27, scope: !5832)
!5882 = !DILocation(line: 1513, column: 7, scope: !5832)
!5883 = !DILocation(line: 1514, column: 14, scope: !5884)
!5884 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 1514, column: 7)
!5885 = !DILocation(line: 1514, column: 12, scope: !5884)
!5886 = !DILocation(line: 1514, column: 19, scope: !5887)
!5887 = distinct !DILexicalBlock(scope: !5884, file: !3, line: 1514, column: 7)
!5888 = !DILocation(line: 1514, column: 7, scope: !5884)
!5889 = !DILocation(line: 1515, column: 23, scope: !5887)
!5890 = !DILocation(line: 1515, column: 27, scope: !5887)
!5891 = !DILocation(line: 1515, column: 2, scope: !5887)
!5892 = !DILocation(line: 1514, column: 70, scope: !5887)
!5893 = !DILocation(line: 1514, column: 7, scope: !5887)
!5894 = distinct !{!5894, !5888, !5895}
!5895 = !DILocation(line: 1515, column: 32, scope: !5884)
!5896 = !DILocation(line: 1518, column: 19, scope: !5897)
!5897 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 1518, column: 11)
!5898 = !DILocation(line: 1518, column: 11, scope: !5897)
!5899 = !DILocation(line: 1518, column: 11, scope: !5832)
!5900 = !DILocalVariable(name: "t", scope: !5901, file: !3, line: 1520, type: !1012)
!5901 = distinct !DILexicalBlock(scope: !5897, file: !3, line: 1519, column: 2)
!5902 = !DILocation(line: 1520, column: 9, scope: !5901)
!5903 = !DILocation(line: 1521, column: 20, scope: !5901)
!5904 = !DILocation(line: 1521, column: 24, scope: !5901)
!5905 = !DILocation(line: 1521, column: 4, scope: !5901)
!5906 = !DILocation(line: 1522, column: 11, scope: !5907)
!5907 = distinct !DILexicalBlock(scope: !5901, file: !3, line: 1522, column: 4)
!5908 = !DILocation(line: 1522, column: 9, scope: !5907)
!5909 = !DILocation(line: 1523, column: 9, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !5907, file: !3, line: 1522, column: 4)
!5911 = !DILocation(line: 1522, column: 4, scope: !5907)
!5912 = !DILocation(line: 1525, column: 27, scope: !5910)
!5913 = !DILocation(line: 1525, column: 31, scope: !5910)
!5914 = !DILocation(line: 1525, column: 6, scope: !5910)
!5915 = !DILocation(line: 1524, column: 10, scope: !5910)
!5916 = !DILocation(line: 1522, column: 4, scope: !5910)
!5917 = distinct !{!5917, !5911, !5918}
!5918 = !DILocation(line: 1525, column: 32, scope: !5907)
!5919 = !DILocation(line: 1526, column: 2, scope: !5901)
!5920 = !DILocalVariable(name: "c", scope: !5921, file: !3, line: 1529, type: !1834)
!5921 = distinct !DILexicalBlock(scope: !5897, file: !3, line: 1528, column: 2)
!5922 = !DILocation(line: 1529, column: 10, scope: !5921)
!5923 = !DILocation(line: 1530, column: 20, scope: !5921)
!5924 = !DILocation(line: 1530, column: 24, scope: !5921)
!5925 = !DILocation(line: 1530, column: 4, scope: !5921)
!5926 = !DILocation(line: 1531, column: 11, scope: !5927)
!5927 = distinct !DILexicalBlock(scope: !5921, file: !3, line: 1531, column: 4)
!5928 = !DILocation(line: 1531, column: 9, scope: !5927)
!5929 = !DILocation(line: 1531, column: 16, scope: !5930)
!5930 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 1531, column: 4)
!5931 = !DILocation(line: 1531, column: 4, scope: !5927)
!5932 = !DILocation(line: 1532, column: 27, scope: !5930)
!5933 = !DILocation(line: 1532, column: 31, scope: !5930)
!5934 = !DILocation(line: 1532, column: 44, scope: !5930)
!5935 = !DILocation(line: 1532, column: 6, scope: !5930)
!5936 = !DILocation(line: 1531, column: 71, scope: !5930)
!5937 = !DILocation(line: 1531, column: 4, scope: !5930)
!5938 = distinct !{!5938, !5931, !5939}
!5939 = !DILocation(line: 1532, column: 45, scope: !5927)
!5940 = !DILocation(line: 1534, column: 5, scope: !5832)
!5941 = !DILocation(line: 1538, column: 16, scope: !5818)
!5942 = !DILocation(line: 1538, column: 3, scope: !5818)
!5943 = !DILocation(line: 1539, column: 1, scope: !5818)
!5944 = distinct !DISubprogram(name: "output_bb", scope: !3, file: !3, line: 1719, type: !5945, scopeLine: 1720, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!5945 = !DISubroutineType(types: !5946)
!5946 = !{null, !932, !1840, !1725}
!5947 = !DILocalVariable(name: "ob", arg: 1, scope: !5944, file: !3, line: 1719, type: !932)
!5948 = !DILocation(line: 1719, column: 33, scope: !5944)
!5949 = !DILocalVariable(name: "bb", arg: 2, scope: !5944, file: !3, line: 1719, type: !1840)
!5950 = !DILocation(line: 1719, column: 49, scope: !5944)
!5951 = !DILocalVariable(name: "fn", arg: 3, scope: !5944, file: !3, line: 1719, type: !1725)
!5952 = !DILocation(line: 1719, column: 70, scope: !5944)
!5953 = !DILocalVariable(name: "bsi", scope: !5944, file: !3, line: 1721, type: !5954)
!5954 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !709, line: 265, baseType: !5955)
!5955 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !709, line: 254, size: 192, elements: !5956)
!5956 = !{!5957, !5958, !5959}
!5957 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !5955, file: !709, line: 257, baseType: !1335, size: 64)
!5958 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !5955, file: !709, line: 263, baseType: !1330, size: 64, offset: 64)
!5959 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !5955, file: !709, line: 264, baseType: !1840, size: 64, offset: 128)
!5960 = !DILocation(line: 1721, column: 24, scope: !5944)
!5961 = !DILocation(line: 1721, column: 44, scope: !5944)
!5962 = !DILocation(line: 1721, column: 30, scope: !5944)
!5963 = !DILocation(line: 1723, column: 24, scope: !5944)
!5964 = !DILocation(line: 1724, column: 12, scope: !5944)
!5965 = !DILocation(line: 1724, column: 29, scope: !5944)
!5966 = !DILocation(line: 1724, column: 43, scope: !5944)
!5967 = !DILocation(line: 1724, column: 32, scope: !5944)
!5968 = !DILocation(line: 1724, column: 10, scope: !5944)
!5969 = !DILocation(line: 1723, column: 3, scope: !5944)
!5970 = !DILocation(line: 1728, column: 19, scope: !5944)
!5971 = !DILocation(line: 1728, column: 23, scope: !5944)
!5972 = !DILocation(line: 1728, column: 27, scope: !5944)
!5973 = !DILocation(line: 1728, column: 3, scope: !5944)
!5974 = !DILocation(line: 1729, column: 19, scope: !5944)
!5975 = !DILocation(line: 1729, column: 23, scope: !5944)
!5976 = !DILocation(line: 1729, column: 27, scope: !5944)
!5977 = !DILocation(line: 1729, column: 3, scope: !5944)
!5978 = !DILocation(line: 1730, column: 19, scope: !5944)
!5979 = !DILocation(line: 1730, column: 23, scope: !5944)
!5980 = !DILocation(line: 1730, column: 27, scope: !5944)
!5981 = !DILocation(line: 1730, column: 3, scope: !5944)
!5982 = !DILocation(line: 1731, column: 19, scope: !5944)
!5983 = !DILocation(line: 1731, column: 23, scope: !5944)
!5984 = !DILocation(line: 1731, column: 27, scope: !5944)
!5985 = !DILocation(line: 1731, column: 3, scope: !5944)
!5986 = !DILocation(line: 1732, column: 19, scope: !5944)
!5987 = !DILocation(line: 1732, column: 23, scope: !5944)
!5988 = !DILocation(line: 1732, column: 27, scope: !5944)
!5989 = !DILocation(line: 1732, column: 3, scope: !5944)
!5990 = !DILocation(line: 1734, column: 8, scope: !5991)
!5991 = distinct !DILexicalBlock(scope: !5944, file: !3, line: 1734, column: 7)
!5992 = !DILocation(line: 1734, column: 24, scope: !5991)
!5993 = !DILocation(line: 1734, column: 38, scope: !5991)
!5994 = !DILocation(line: 1734, column: 27, scope: !5991)
!5995 = !DILocation(line: 1734, column: 7, scope: !5944)
!5996 = !DILocation(line: 1738, column: 32, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5998, file: !3, line: 1738, column: 7)
!5998 = distinct !DILexicalBlock(scope: !5991, file: !3, line: 1735, column: 5)
!5999 = !DILocation(line: 1738, column: 18, scope: !5997)
!6000 = !DILocation(line: 1738, column: 12, scope: !5997)
!6001 = !DILocation(line: 1738, column: 38, scope: !6002)
!6002 = distinct !DILexicalBlock(scope: !5997, file: !3, line: 1738, column: 7)
!6003 = !DILocation(line: 1738, column: 37, scope: !6002)
!6004 = !DILocation(line: 1738, column: 7, scope: !5997)
!6005 = !DILocalVariable(name: "region", scope: !6006, file: !3, line: 1740, type: !962)
!6006 = distinct !DILexicalBlock(scope: !6002, file: !3, line: 1739, column: 2)
!6007 = !DILocation(line: 1740, column: 8, scope: !6006)
!6008 = !DILocalVariable(name: "stmt", scope: !6006, file: !3, line: 1741, type: !1340)
!6009 = !DILocation(line: 1741, column: 11, scope: !6006)
!6010 = !DILocation(line: 1741, column: 18, scope: !6006)
!6011 = !DILocation(line: 1743, column: 24, scope: !6006)
!6012 = !DILocation(line: 1743, column: 28, scope: !6006)
!6013 = !DILocation(line: 1743, column: 4, scope: !6006)
!6014 = !DILocation(line: 1746, column: 35, scope: !6006)
!6015 = !DILocation(line: 1746, column: 39, scope: !6006)
!6016 = !DILocation(line: 1746, column: 13, scope: !6006)
!6017 = !DILocation(line: 1746, column: 11, scope: !6006)
!6018 = !DILocation(line: 1747, column: 8, scope: !6019)
!6019 = distinct !DILexicalBlock(scope: !6006, file: !3, line: 1747, column: 8)
!6020 = !DILocation(line: 1747, column: 15, scope: !6019)
!6021 = !DILocation(line: 1747, column: 8, scope: !6006)
!6022 = !DILocation(line: 1749, column: 29, scope: !6023)
!6023 = distinct !DILexicalBlock(scope: !6019, file: !3, line: 1748, column: 6)
!6024 = !DILocation(line: 1749, column: 8, scope: !6023)
!6025 = !DILocation(line: 1750, column: 24, scope: !6023)
!6026 = !DILocation(line: 1750, column: 28, scope: !6023)
!6027 = !DILocation(line: 1750, column: 8, scope: !6023)
!6028 = !DILocation(line: 1751, column: 6, scope: !6023)
!6029 = !DILocation(line: 1753, column: 19, scope: !6019)
!6030 = !DILocation(line: 1753, column: 6, scope: !6019)
!6031 = !DILocation(line: 1754, column: 2, scope: !6006)
!6032 = !DILocation(line: 1738, column: 55, scope: !6002)
!6033 = !DILocation(line: 1738, column: 7, scope: !6002)
!6034 = distinct !{!6034, !6004, !6035}
!6035 = !DILocation(line: 1754, column: 2, scope: !5997)
!6036 = !DILocation(line: 1756, column: 20, scope: !5998)
!6037 = !DILocation(line: 1756, column: 7, scope: !5998)
!6038 = !DILocation(line: 1758, column: 34, scope: !6039)
!6039 = distinct !DILexicalBlock(scope: !5998, file: !3, line: 1758, column: 7)
!6040 = !DILocation(line: 1758, column: 18, scope: !6039)
!6041 = !DILocation(line: 1758, column: 12, scope: !6039)
!6042 = !DILocation(line: 1758, column: 40, scope: !6043)
!6043 = distinct !DILexicalBlock(scope: !6039, file: !3, line: 1758, column: 7)
!6044 = !DILocation(line: 1758, column: 39, scope: !6043)
!6045 = !DILocation(line: 1758, column: 7, scope: !6039)
!6046 = !DILocalVariable(name: "phi", scope: !6047, file: !3, line: 1760, type: !1340)
!6047 = distinct !DILexicalBlock(scope: !6043, file: !3, line: 1759, column: 2)
!6048 = !DILocation(line: 1760, column: 11, scope: !6047)
!6049 = !DILocation(line: 1760, column: 17, scope: !6047)
!6050 = !DILocation(line: 1765, column: 42, scope: !6051)
!6051 = distinct !DILexicalBlock(scope: !6047, file: !3, line: 1765, column: 8)
!6052 = !DILocation(line: 1765, column: 23, scope: !6051)
!6053 = !DILocation(line: 1765, column: 8, scope: !6051)
!6054 = !DILocation(line: 1765, column: 8, scope: !6047)
!6055 = !DILocation(line: 1766, column: 18, scope: !6051)
!6056 = !DILocation(line: 1766, column: 22, scope: !6051)
!6057 = !DILocation(line: 1766, column: 6, scope: !6051)
!6058 = !DILocation(line: 1767, column: 2, scope: !6047)
!6059 = !DILocation(line: 1758, column: 57, scope: !6043)
!6060 = !DILocation(line: 1758, column: 7, scope: !6043)
!6061 = distinct !{!6061, !6045, !6062}
!6062 = !DILocation(line: 1767, column: 2, scope: !6039)
!6063 = !DILocation(line: 1769, column: 20, scope: !5998)
!6064 = !DILocation(line: 1769, column: 7, scope: !5998)
!6065 = !DILocation(line: 1770, column: 5, scope: !5998)
!6066 = !DILocation(line: 1771, column: 1, scope: !5944)
!6067 = distinct !DISubprogram(name: "output_cfg", scope: !3, file: !3, line: 1573, type: !5763, scopeLine: 1574, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6068 = !DILocalVariable(name: "ob", arg: 1, scope: !6067, file: !3, line: 1573, type: !932)
!6069 = !DILocation(line: 1573, column: 34, scope: !6067)
!6070 = !DILocalVariable(name: "fn", arg: 2, scope: !6067, file: !3, line: 1573, type: !1725)
!6071 = !DILocation(line: 1573, column: 55, scope: !6067)
!6072 = !DILocalVariable(name: "tmp_stream", scope: !6067, file: !3, line: 1575, type: !2615)
!6073 = !DILocation(line: 1575, column: 29, scope: !6067)
!6074 = !DILocation(line: 1575, column: 42, scope: !6067)
!6075 = !DILocation(line: 1575, column: 46, scope: !6067)
!6076 = !DILocalVariable(name: "bb", scope: !6067, file: !3, line: 1576, type: !1840)
!6077 = !DILocation(line: 1576, column: 15, scope: !6067)
!6078 = !DILocation(line: 1578, column: 21, scope: !6067)
!6079 = !DILocation(line: 1578, column: 25, scope: !6067)
!6080 = !DILocation(line: 1578, column: 3, scope: !6067)
!6081 = !DILocation(line: 1578, column: 7, scope: !6067)
!6082 = !DILocation(line: 1578, column: 19, scope: !6067)
!6083 = !DILocation(line: 1580, column: 19, scope: !6067)
!6084 = !DILocation(line: 1580, column: 23, scope: !6067)
!6085 = !DILocation(line: 1580, column: 3, scope: !6067)
!6086 = !DILocation(line: 1583, column: 19, scope: !6067)
!6087 = !DILocation(line: 1583, column: 23, scope: !6067)
!6088 = !DILocation(line: 1583, column: 3, scope: !6067)
!6089 = !DILocation(line: 1585, column: 3, scope: !6090)
!6090 = distinct !DILexicalBlock(scope: !6067, file: !3, line: 1585, column: 3)
!6091 = !DILocation(line: 1585, column: 3, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !6090, file: !3, line: 1585, column: 3)
!6093 = !DILocalVariable(name: "ei", scope: !6094, file: !3, line: 1587, type: !6095)
!6094 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 1586, column: 5)
!6095 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !351, line: 682, baseType: !6096)
!6096 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !351, line: 679, size: 128, elements: !6097)
!6097 = !{!6098, !6099}
!6098 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !6096, file: !351, line: 680, baseType: !7, size: 32)
!6099 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !6096, file: !351, line: 681, baseType: !6100, size: 64, offset: 64)
!6100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1308, size: 64)
!6101 = !DILocation(line: 1587, column: 21, scope: !6094)
!6102 = !DILocalVariable(name: "e", scope: !6094, file: !3, line: 1588, type: !1320)
!6103 = !DILocation(line: 1588, column: 12, scope: !6094)
!6104 = !DILocation(line: 1590, column: 23, scope: !6094)
!6105 = !DILocation(line: 1590, column: 27, scope: !6094)
!6106 = !DILocation(line: 1590, column: 31, scope: !6094)
!6107 = !DILocation(line: 1590, column: 7, scope: !6094)
!6108 = !DILocation(line: 1593, column: 23, scope: !6094)
!6109 = !DILocation(line: 1593, column: 27, scope: !6094)
!6110 = !DILocation(line: 1593, column: 7, scope: !6094)
!6111 = !DILocation(line: 1594, column: 7, scope: !6112)
!6112 = distinct !DILexicalBlock(scope: !6094, file: !3, line: 1594, column: 7)
!6113 = !DILocation(line: 1594, column: 7, scope: !6114)
!6114 = distinct !DILexicalBlock(scope: !6112, file: !3, line: 1594, column: 7)
!6115 = !DILocation(line: 1596, column: 20, scope: !6116)
!6116 = distinct !DILexicalBlock(scope: !6114, file: !3, line: 1595, column: 2)
!6117 = !DILocation(line: 1596, column: 24, scope: !6116)
!6118 = !DILocation(line: 1596, column: 27, scope: !6116)
!6119 = !DILocation(line: 1596, column: 33, scope: !6116)
!6120 = !DILocation(line: 1596, column: 4, scope: !6116)
!6121 = !DILocation(line: 1597, column: 20, scope: !6116)
!6122 = !DILocation(line: 1597, column: 24, scope: !6116)
!6123 = !DILocation(line: 1597, column: 27, scope: !6116)
!6124 = !DILocation(line: 1597, column: 4, scope: !6116)
!6125 = !DILocation(line: 1598, column: 20, scope: !6116)
!6126 = !DILocation(line: 1598, column: 24, scope: !6116)
!6127 = !DILocation(line: 1598, column: 27, scope: !6116)
!6128 = !DILocation(line: 1598, column: 4, scope: !6116)
!6129 = !DILocation(line: 1599, column: 20, scope: !6116)
!6130 = !DILocation(line: 1599, column: 24, scope: !6116)
!6131 = !DILocation(line: 1599, column: 27, scope: !6116)
!6132 = !DILocation(line: 1599, column: 4, scope: !6116)
!6133 = !DILocation(line: 1600, column: 2, scope: !6116)
!6134 = distinct !{!6134, !6111, !6135}
!6135 = !DILocation(line: 1600, column: 2, scope: !6112)
!6136 = !DILocation(line: 1601, column: 5, scope: !6094)
!6137 = distinct !{!6137, !6089, !6138}
!6138 = !DILocation(line: 1601, column: 5, scope: !6090)
!6139 = !DILocation(line: 1603, column: 19, scope: !6067)
!6140 = !DILocation(line: 1603, column: 3, scope: !6067)
!6141 = !DILocation(line: 1605, column: 8, scope: !6067)
!6142 = !DILocation(line: 1605, column: 6, scope: !6067)
!6143 = !DILocation(line: 1606, column: 3, scope: !6067)
!6144 = !DILocation(line: 1606, column: 10, scope: !6067)
!6145 = !DILocation(line: 1606, column: 14, scope: !6067)
!6146 = !DILocation(line: 1608, column: 23, scope: !6147)
!6147 = distinct !DILexicalBlock(scope: !6067, file: !3, line: 1607, column: 5)
!6148 = !DILocation(line: 1608, column: 27, scope: !6147)
!6149 = !DILocation(line: 1608, column: 31, scope: !6147)
!6150 = !DILocation(line: 1608, column: 40, scope: !6147)
!6151 = !DILocation(line: 1608, column: 7, scope: !6147)
!6152 = !DILocation(line: 1609, column: 12, scope: !6147)
!6153 = !DILocation(line: 1609, column: 16, scope: !6147)
!6154 = !DILocation(line: 1609, column: 10, scope: !6147)
!6155 = distinct !{!6155, !6143, !6156}
!6156 = !DILocation(line: 1610, column: 5, scope: !6067)
!6157 = !DILocation(line: 1612, column: 19, scope: !6067)
!6158 = !DILocation(line: 1612, column: 3, scope: !6067)
!6159 = !DILocation(line: 1614, column: 21, scope: !6067)
!6160 = !DILocation(line: 1614, column: 3, scope: !6067)
!6161 = !DILocation(line: 1614, column: 7, scope: !6067)
!6162 = !DILocation(line: 1614, column: 19, scope: !6067)
!6163 = !DILocation(line: 1615, column: 1, scope: !6067)
!6164 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !149, file: !149, line: 182, type: !6165, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6165 = !DISubroutineType(types: !6166)
!6166 = !{!1012, !4262, !7}
!6167 = !DILocalVariable(name: "vec_", arg: 1, scope: !6164, file: !149, line: 182, type: !4262)
!6168 = !DILocation(line: 182, column: 1, scope: !6164)
!6169 = !DILocalVariable(name: "ix_", arg: 2, scope: !6164, file: !149, line: 182, type: !7)
!6170 = !DILocation(line: 0, scope: !6164)
!6171 = distinct !DISubprogram(name: "VEC_eh_region_base_length", scope: !344, file: !344, line: 184, type: !6172, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6172 = !DISubroutineType(types: !6173)
!6173 = !{!7, !6174}
!6174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6175, size: 64)
!6175 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1788)
!6176 = !DILocalVariable(name: "vec_", arg: 1, scope: !6171, file: !344, line: 184, type: !6174)
!6177 = !DILocation(line: 184, column: 1, scope: !6171)
!6178 = distinct !DISubprogram(name: "VEC_eh_region_base_iterate", scope: !344, file: !344, line: 184, type: !6179, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6179 = !DISubroutineType(types: !6180)
!6180 = !{!962, !6174, !7, !6181}
!6181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1734, size: 64)
!6182 = !DILocalVariable(name: "vec_", arg: 1, scope: !6178, file: !344, line: 184, type: !6174)
!6183 = !DILocation(line: 184, column: 1, scope: !6178)
!6184 = !DILocalVariable(name: "ix_", arg: 2, scope: !6178, file: !344, line: 184, type: !7)
!6185 = !DILocalVariable(name: "ptr", arg: 3, scope: !6178, file: !344, line: 184, type: !6181)
!6186 = !DILocation(line: 184, column: 1, scope: !6187)
!6187 = distinct !DILexicalBlock(scope: !6178, file: !344, line: 184, column: 1)
!6188 = !DILocation(line: 184, column: 1, scope: !6189)
!6189 = distinct !DILexicalBlock(scope: !6187, file: !344, line: 184, column: 1)
!6190 = !DILocation(line: 184, column: 1, scope: !6191)
!6191 = distinct !DILexicalBlock(scope: !6187, file: !344, line: 184, column: 1)
!6192 = distinct !DISubprogram(name: "output_eh_region", scope: !3, file: !3, line: 1396, type: !6193, scopeLine: 1397, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6193 = !DISubroutineType(types: !6194)
!6194 = !{null, !932, !1734}
!6195 = !DILocalVariable(name: "ob", arg: 1, scope: !6192, file: !3, line: 1396, type: !932)
!6196 = !DILocation(line: 1396, column: 40, scope: !6192)
!6197 = !DILocalVariable(name: "r", arg: 2, scope: !6192, file: !3, line: 1396, type: !1734)
!6198 = !DILocation(line: 1396, column: 54, scope: !6192)
!6199 = !DILocalVariable(name: "tag", scope: !6192, file: !3, line: 1398, type: !604)
!6200 = !DILocation(line: 1398, column: 17, scope: !6192)
!6201 = !DILocation(line: 1400, column: 7, scope: !6202)
!6202 = distinct !DILexicalBlock(scope: !6192, file: !3, line: 1400, column: 7)
!6203 = !DILocation(line: 1400, column: 9, scope: !6202)
!6204 = !DILocation(line: 1400, column: 7, scope: !6192)
!6205 = !DILocation(line: 1402, column: 20, scope: !6206)
!6206 = distinct !DILexicalBlock(scope: !6202, file: !3, line: 1401, column: 5)
!6207 = !DILocation(line: 1402, column: 7, scope: !6206)
!6208 = !DILocation(line: 1403, column: 7, scope: !6206)
!6209 = !DILocation(line: 1406, column: 7, scope: !6210)
!6210 = distinct !DILexicalBlock(scope: !6192, file: !3, line: 1406, column: 7)
!6211 = !DILocation(line: 1406, column: 10, scope: !6210)
!6212 = !DILocation(line: 1406, column: 15, scope: !6210)
!6213 = !DILocation(line: 1406, column: 7, scope: !6192)
!6214 = !DILocation(line: 1407, column: 9, scope: !6210)
!6215 = !DILocation(line: 1407, column: 5, scope: !6210)
!6216 = !DILocation(line: 1408, column: 12, scope: !6217)
!6217 = distinct !DILexicalBlock(scope: !6210, file: !3, line: 1408, column: 12)
!6218 = !DILocation(line: 1408, column: 15, scope: !6217)
!6219 = !DILocation(line: 1408, column: 20, scope: !6217)
!6220 = !DILocation(line: 1408, column: 12, scope: !6210)
!6221 = !DILocation(line: 1409, column: 9, scope: !6217)
!6222 = !DILocation(line: 1409, column: 5, scope: !6217)
!6223 = !DILocation(line: 1410, column: 12, scope: !6224)
!6224 = distinct !DILexicalBlock(scope: !6217, file: !3, line: 1410, column: 12)
!6225 = !DILocation(line: 1410, column: 15, scope: !6224)
!6226 = !DILocation(line: 1410, column: 20, scope: !6224)
!6227 = !DILocation(line: 1410, column: 12, scope: !6217)
!6228 = !DILocation(line: 1411, column: 9, scope: !6224)
!6229 = !DILocation(line: 1411, column: 5, scope: !6224)
!6230 = !DILocation(line: 1412, column: 12, scope: !6231)
!6231 = distinct !DILexicalBlock(scope: !6224, file: !3, line: 1412, column: 12)
!6232 = !DILocation(line: 1412, column: 15, scope: !6231)
!6233 = !DILocation(line: 1412, column: 20, scope: !6231)
!6234 = !DILocation(line: 1412, column: 12, scope: !6224)
!6235 = !DILocation(line: 1413, column: 9, scope: !6231)
!6236 = !DILocation(line: 1413, column: 5, scope: !6231)
!6237 = !DILocation(line: 1415, column: 5, scope: !6231)
!6238 = !DILocation(line: 1417, column: 24, scope: !6192)
!6239 = !DILocation(line: 1417, column: 28, scope: !6192)
!6240 = !DILocation(line: 1417, column: 3, scope: !6192)
!6241 = !DILocation(line: 1418, column: 19, scope: !6192)
!6242 = !DILocation(line: 1418, column: 23, scope: !6192)
!6243 = !DILocation(line: 1418, column: 26, scope: !6192)
!6244 = !DILocation(line: 1418, column: 3, scope: !6192)
!6245 = !DILocation(line: 1420, column: 7, scope: !6246)
!6246 = distinct !DILexicalBlock(scope: !6192, file: !3, line: 1420, column: 7)
!6247 = !DILocation(line: 1420, column: 10, scope: !6246)
!6248 = !DILocation(line: 1420, column: 7, scope: !6192)
!6249 = !DILocation(line: 1421, column: 21, scope: !6246)
!6250 = !DILocation(line: 1421, column: 25, scope: !6246)
!6251 = !DILocation(line: 1421, column: 28, scope: !6246)
!6252 = !DILocation(line: 1421, column: 35, scope: !6246)
!6253 = !DILocation(line: 1421, column: 5, scope: !6246)
!6254 = !DILocation(line: 1423, column: 18, scope: !6246)
!6255 = !DILocation(line: 1423, column: 5, scope: !6246)
!6256 = !DILocation(line: 1425, column: 7, scope: !6257)
!6257 = distinct !DILexicalBlock(scope: !6192, file: !3, line: 1425, column: 7)
!6258 = !DILocation(line: 1425, column: 10, scope: !6257)
!6259 = !DILocation(line: 1425, column: 7, scope: !6192)
!6260 = !DILocation(line: 1426, column: 21, scope: !6257)
!6261 = !DILocation(line: 1426, column: 25, scope: !6257)
!6262 = !DILocation(line: 1426, column: 28, scope: !6257)
!6263 = !DILocation(line: 1426, column: 35, scope: !6257)
!6264 = !DILocation(line: 1426, column: 5, scope: !6257)
!6265 = !DILocation(line: 1428, column: 18, scope: !6257)
!6266 = !DILocation(line: 1428, column: 5, scope: !6257)
!6267 = !DILocation(line: 1430, column: 7, scope: !6268)
!6268 = distinct !DILexicalBlock(scope: !6192, file: !3, line: 1430, column: 7)
!6269 = !DILocation(line: 1430, column: 10, scope: !6268)
!6270 = !DILocation(line: 1430, column: 7, scope: !6192)
!6271 = !DILocation(line: 1431, column: 21, scope: !6268)
!6272 = !DILocation(line: 1431, column: 25, scope: !6268)
!6273 = !DILocation(line: 1431, column: 28, scope: !6268)
!6274 = !DILocation(line: 1431, column: 39, scope: !6268)
!6275 = !DILocation(line: 1431, column: 5, scope: !6268)
!6276 = !DILocation(line: 1433, column: 18, scope: !6268)
!6277 = !DILocation(line: 1433, column: 5, scope: !6268)
!6278 = !DILocation(line: 1435, column: 7, scope: !6279)
!6279 = distinct !DILexicalBlock(scope: !6192, file: !3, line: 1435, column: 7)
!6280 = !DILocation(line: 1435, column: 10, scope: !6279)
!6281 = !DILocation(line: 1435, column: 15, scope: !6279)
!6282 = !DILocation(line: 1435, column: 7, scope: !6192)
!6283 = !DILocation(line: 1437, column: 27, scope: !6284)
!6284 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 1436, column: 5)
!6285 = !DILocation(line: 1437, column: 31, scope: !6284)
!6286 = !DILocation(line: 1437, column: 34, scope: !6284)
!6287 = !DILocation(line: 1437, column: 36, scope: !6284)
!6288 = !DILocation(line: 1437, column: 43, scope: !6284)
!6289 = !DILocation(line: 1437, column: 7, scope: !6284)
!6290 = !DILocation(line: 1438, column: 5, scope: !6284)
!6291 = !DILocation(line: 1439, column: 12, scope: !6292)
!6292 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 1439, column: 12)
!6293 = !DILocation(line: 1439, column: 15, scope: !6292)
!6294 = !DILocation(line: 1439, column: 20, scope: !6292)
!6295 = !DILocation(line: 1439, column: 12, scope: !6279)
!6296 = !DILocation(line: 1441, column: 28, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6292, file: !3, line: 1440, column: 5)
!6298 = !DILocation(line: 1441, column: 32, scope: !6297)
!6299 = !DILocation(line: 1441, column: 35, scope: !6297)
!6300 = !DILocation(line: 1441, column: 37, scope: !6297)
!6301 = !DILocation(line: 1441, column: 45, scope: !6297)
!6302 = !DILocation(line: 1441, column: 7, scope: !6297)
!6303 = !DILocation(line: 1442, column: 28, scope: !6297)
!6304 = !DILocation(line: 1442, column: 32, scope: !6297)
!6305 = !DILocation(line: 1442, column: 35, scope: !6297)
!6306 = !DILocation(line: 1442, column: 37, scope: !6297)
!6307 = !DILocation(line: 1442, column: 45, scope: !6297)
!6308 = !DILocation(line: 1442, column: 7, scope: !6297)
!6309 = !DILocation(line: 1443, column: 23, scope: !6297)
!6310 = !DILocation(line: 1443, column: 27, scope: !6297)
!6311 = !DILocation(line: 1443, column: 30, scope: !6297)
!6312 = !DILocation(line: 1443, column: 32, scope: !6297)
!6313 = !DILocation(line: 1443, column: 40, scope: !6297)
!6314 = !DILocation(line: 1443, column: 7, scope: !6297)
!6315 = !DILocation(line: 1444, column: 5, scope: !6297)
!6316 = !DILocation(line: 1445, column: 12, scope: !6317)
!6317 = distinct !DILexicalBlock(scope: !6292, file: !3, line: 1445, column: 12)
!6318 = !DILocation(line: 1445, column: 15, scope: !6317)
!6319 = !DILocation(line: 1445, column: 20, scope: !6317)
!6320 = !DILocation(line: 1445, column: 12, scope: !6292)
!6321 = !DILocation(line: 1447, column: 28, scope: !6322)
!6322 = distinct !DILexicalBlock(scope: !6317, file: !3, line: 1446, column: 5)
!6323 = !DILocation(line: 1447, column: 32, scope: !6322)
!6324 = !DILocation(line: 1447, column: 35, scope: !6322)
!6325 = !DILocation(line: 1447, column: 37, scope: !6322)
!6326 = !DILocation(line: 1447, column: 52, scope: !6322)
!6327 = !DILocation(line: 1447, column: 7, scope: !6322)
!6328 = !DILocation(line: 1448, column: 28, scope: !6322)
!6329 = !DILocation(line: 1448, column: 32, scope: !6322)
!6330 = !DILocation(line: 1448, column: 35, scope: !6322)
!6331 = !DILocation(line: 1448, column: 37, scope: !6322)
!6332 = !DILocation(line: 1448, column: 52, scope: !6322)
!6333 = !DILocation(line: 1448, column: 7, scope: !6322)
!6334 = !DILocation(line: 1449, column: 5, scope: !6322)
!6335 = !DILocation(line: 1451, column: 7, scope: !6336)
!6336 = distinct !DILexicalBlock(scope: !6192, file: !3, line: 1451, column: 7)
!6337 = !DILocation(line: 1451, column: 10, scope: !6336)
!6338 = !DILocation(line: 1451, column: 7, scope: !6192)
!6339 = !DILocation(line: 1452, column: 21, scope: !6336)
!6340 = !DILocation(line: 1452, column: 25, scope: !6336)
!6341 = !DILocation(line: 1452, column: 28, scope: !6336)
!6342 = !DILocation(line: 1452, column: 42, scope: !6336)
!6343 = !DILocation(line: 1452, column: 5, scope: !6336)
!6344 = !DILocation(line: 1454, column: 18, scope: !6336)
!6345 = !DILocation(line: 1454, column: 5, scope: !6336)
!6346 = !DILocation(line: 1455, column: 1, scope: !6192)
!6347 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_length", scope: !344, file: !344, line: 188, type: !6348, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6348 = !DISubroutineType(types: !6349)
!6349 = !{!7, !6350}
!6350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6351, size: 64)
!6351 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1801)
!6352 = !DILocalVariable(name: "vec_", arg: 1, scope: !6347, file: !344, line: 188, type: !6350)
!6353 = !DILocation(line: 188, column: 1, scope: !6347)
!6354 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_iterate", scope: !344, file: !344, line: 188, type: !6355, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6355 = !DISubroutineType(types: !6356)
!6356 = !{!962, !6350, !7, !6357}
!6357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1808, size: 64)
!6358 = !DILocalVariable(name: "vec_", arg: 1, scope: !6354, file: !344, line: 188, type: !6350)
!6359 = !DILocation(line: 188, column: 1, scope: !6354)
!6360 = !DILocalVariable(name: "ix_", arg: 2, scope: !6354, file: !344, line: 188, type: !7)
!6361 = !DILocalVariable(name: "ptr", arg: 3, scope: !6354, file: !344, line: 188, type: !6357)
!6362 = !DILocation(line: 188, column: 1, scope: !6363)
!6363 = distinct !DILexicalBlock(scope: !6354, file: !344, line: 188, column: 1)
!6364 = !DILocation(line: 188, column: 1, scope: !6365)
!6365 = distinct !DILexicalBlock(scope: !6363, file: !344, line: 188, column: 1)
!6366 = !DILocation(line: 188, column: 1, scope: !6367)
!6367 = distinct !DILexicalBlock(scope: !6363, file: !344, line: 188, column: 1)
!6368 = distinct !DISubprogram(name: "output_eh_lp", scope: !3, file: !3, line: 1461, type: !6369, scopeLine: 1462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6369 = !DISubroutineType(types: !6370)
!6370 = !{null, !932, !1808}
!6371 = !DILocalVariable(name: "ob", arg: 1, scope: !6368, file: !3, line: 1461, type: !932)
!6372 = !DILocation(line: 1461, column: 36, scope: !6368)
!6373 = !DILocalVariable(name: "lp", arg: 2, scope: !6368, file: !3, line: 1461, type: !1808)
!6374 = !DILocation(line: 1461, column: 55, scope: !6368)
!6375 = !DILocation(line: 1463, column: 7, scope: !6376)
!6376 = distinct !DILexicalBlock(scope: !6368, file: !3, line: 1463, column: 7)
!6377 = !DILocation(line: 1463, column: 10, scope: !6376)
!6378 = !DILocation(line: 1463, column: 7, scope: !6368)
!6379 = !DILocation(line: 1465, column: 20, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6376, file: !3, line: 1464, column: 5)
!6381 = !DILocation(line: 1465, column: 7, scope: !6380)
!6382 = !DILocation(line: 1466, column: 7, scope: !6380)
!6383 = !DILocation(line: 1469, column: 24, scope: !6368)
!6384 = !DILocation(line: 1469, column: 3, scope: !6368)
!6385 = !DILocation(line: 1470, column: 19, scope: !6368)
!6386 = !DILocation(line: 1470, column: 23, scope: !6368)
!6387 = !DILocation(line: 1470, column: 27, scope: !6368)
!6388 = !DILocation(line: 1470, column: 3, scope: !6368)
!6389 = !DILocation(line: 1471, column: 7, scope: !6390)
!6390 = distinct !DILexicalBlock(scope: !6368, file: !3, line: 1471, column: 7)
!6391 = !DILocation(line: 1471, column: 11, scope: !6390)
!6392 = !DILocation(line: 1471, column: 7, scope: !6368)
!6393 = !DILocation(line: 1472, column: 21, scope: !6390)
!6394 = !DILocation(line: 1472, column: 25, scope: !6390)
!6395 = !DILocation(line: 1472, column: 29, scope: !6390)
!6396 = !DILocation(line: 1472, column: 38, scope: !6390)
!6397 = !DILocation(line: 1472, column: 5, scope: !6390)
!6398 = !DILocation(line: 1474, column: 18, scope: !6390)
!6399 = !DILocation(line: 1474, column: 5, scope: !6390)
!6400 = !DILocation(line: 1476, column: 7, scope: !6401)
!6401 = distinct !DILexicalBlock(scope: !6368, file: !3, line: 1476, column: 7)
!6402 = !DILocation(line: 1476, column: 11, scope: !6401)
!6403 = !DILocation(line: 1476, column: 7, scope: !6368)
!6404 = !DILocation(line: 1477, column: 21, scope: !6401)
!6405 = !DILocation(line: 1477, column: 25, scope: !6401)
!6406 = !DILocation(line: 1477, column: 29, scope: !6401)
!6407 = !DILocation(line: 1477, column: 37, scope: !6401)
!6408 = !DILocation(line: 1477, column: 5, scope: !6401)
!6409 = !DILocation(line: 1479, column: 18, scope: !6401)
!6410 = !DILocation(line: 1479, column: 5, scope: !6401)
!6411 = !DILocation(line: 1481, column: 24, scope: !6368)
!6412 = !DILocation(line: 1481, column: 28, scope: !6368)
!6413 = !DILocation(line: 1481, column: 32, scope: !6368)
!6414 = !DILocation(line: 1481, column: 3, scope: !6368)
!6415 = !DILocation(line: 1482, column: 1, scope: !6368)
!6416 = distinct !DISubprogram(name: "VEC_uchar_base_length", scope: !1823, file: !1823, line: 27, type: !6417, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6417 = !DISubroutineType(types: !6418)
!6418 = !{!7, !6419}
!6419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6420, size: 64)
!6420 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1827)
!6421 = !DILocalVariable(name: "vec_", arg: 1, scope: !6416, file: !1823, line: 27, type: !6419)
!6422 = !DILocation(line: 27, column: 1, scope: !6416)
!6423 = distinct !DISubprogram(name: "VEC_uchar_base_iterate", scope: !1823, file: !1823, line: 27, type: !6424, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6424 = !DISubroutineType(types: !6425)
!6425 = !{!962, !6419, !7, !6426}
!6426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1834, size: 64)
!6427 = !DILocalVariable(name: "vec_", arg: 1, scope: !6423, file: !1823, line: 27, type: !6419)
!6428 = !DILocation(line: 27, column: 1, scope: !6423)
!6429 = !DILocalVariable(name: "ix_", arg: 2, scope: !6423, file: !1823, line: 27, type: !7)
!6430 = !DILocalVariable(name: "ptr", arg: 3, scope: !6423, file: !1823, line: 27, type: !6426)
!6431 = !DILocation(line: 27, column: 1, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6423, file: !1823, line: 27, column: 1)
!6433 = !DILocation(line: 27, column: 1, scope: !6434)
!6434 = distinct !DILexicalBlock(scope: !6432, file: !1823, line: 27, column: 1)
!6435 = !DILocation(line: 27, column: 1, scope: !6436)
!6436 = distinct !DILexicalBlock(scope: !6432, file: !1823, line: 27, column: 1)
!6437 = distinct !DISubprogram(name: "output_eh_try_list", scope: !3, file: !3, line: 1375, type: !6438, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6438 = !DISubroutineType(types: !6439)
!6439 = !{null, !932, !6440}
!6440 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_catch", file: !344, line: 181, baseType: !1750)
!6441 = !DILocalVariable(name: "ob", arg: 1, scope: !6437, file: !3, line: 1375, type: !932)
!6442 = !DILocation(line: 1375, column: 42, scope: !6437)
!6443 = !DILocalVariable(name: "first", arg: 2, scope: !6437, file: !3, line: 1375, type: !6440)
!6444 = !DILocation(line: 1375, column: 55, scope: !6437)
!6445 = !DILocalVariable(name: "n", scope: !6437, file: !3, line: 1377, type: !6440)
!6446 = !DILocation(line: 1377, column: 12, scope: !6437)
!6447 = !DILocation(line: 1379, column: 12, scope: !6448)
!6448 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 1379, column: 3)
!6449 = !DILocation(line: 1379, column: 10, scope: !6448)
!6450 = !DILocation(line: 1379, column: 8, scope: !6448)
!6451 = !DILocation(line: 1379, column: 19, scope: !6452)
!6452 = distinct !DILexicalBlock(scope: !6448, file: !3, line: 1379, column: 3)
!6453 = !DILocation(line: 1379, column: 3, scope: !6448)
!6454 = !DILocation(line: 1381, column: 28, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6452, file: !3, line: 1380, column: 5)
!6456 = !DILocation(line: 1381, column: 7, scope: !6455)
!6457 = !DILocation(line: 1382, column: 28, scope: !6455)
!6458 = !DILocation(line: 1382, column: 32, scope: !6455)
!6459 = !DILocation(line: 1382, column: 35, scope: !6455)
!6460 = !DILocation(line: 1382, column: 7, scope: !6455)
!6461 = !DILocation(line: 1383, column: 28, scope: !6455)
!6462 = !DILocation(line: 1383, column: 32, scope: !6455)
!6463 = !DILocation(line: 1383, column: 35, scope: !6455)
!6464 = !DILocation(line: 1383, column: 7, scope: !6455)
!6465 = !DILocation(line: 1384, column: 28, scope: !6455)
!6466 = !DILocation(line: 1384, column: 32, scope: !6455)
!6467 = !DILocation(line: 1384, column: 35, scope: !6455)
!6468 = !DILocation(line: 1384, column: 7, scope: !6455)
!6469 = !DILocation(line: 1385, column: 5, scope: !6455)
!6470 = !DILocation(line: 1379, column: 26, scope: !6452)
!6471 = !DILocation(line: 1379, column: 29, scope: !6452)
!6472 = !DILocation(line: 1379, column: 24, scope: !6452)
!6473 = !DILocation(line: 1379, column: 3, scope: !6452)
!6474 = distinct !{!6474, !6453, !6475}
!6475 = !DILocation(line: 1385, column: 5, scope: !6448)
!6476 = !DILocation(line: 1387, column: 16, scope: !6437)
!6477 = !DILocation(line: 1387, column: 3, scope: !6437)
!6478 = !DILocation(line: 1388, column: 1, scope: !6437)
!6479 = distinct !DISubprogram(name: "gsi_start_bb", scope: !709, file: !709, line: 4418, type: !6480, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6480 = !DISubroutineType(types: !6481)
!6481 = !{!5954, !1840}
!6482 = !DILocalVariable(name: "bb", arg: 1, scope: !6479, file: !709, line: 4418, type: !1840)
!6483 = !DILocation(line: 4418, column: 27, scope: !6479)
!6484 = !DILocalVariable(name: "i", scope: !6479, file: !709, line: 4420, type: !5954)
!6485 = !DILocation(line: 4420, column: 24, scope: !6479)
!6486 = !DILocalVariable(name: "seq", scope: !6479, file: !709, line: 4421, type: !1330)
!6487 = !DILocation(line: 4421, column: 14, scope: !6479)
!6488 = !DILocation(line: 4423, column: 17, scope: !6479)
!6489 = !DILocation(line: 4423, column: 9, scope: !6479)
!6490 = !DILocation(line: 4423, column: 7, scope: !6479)
!6491 = !DILocation(line: 4424, column: 29, scope: !6479)
!6492 = !DILocation(line: 4424, column: 11, scope: !6479)
!6493 = !DILocation(line: 4424, column: 5, scope: !6479)
!6494 = !DILocation(line: 4424, column: 9, scope: !6479)
!6495 = !DILocation(line: 4425, column: 11, scope: !6479)
!6496 = !DILocation(line: 4425, column: 5, scope: !6479)
!6497 = !DILocation(line: 4425, column: 9, scope: !6479)
!6498 = !DILocation(line: 4426, column: 10, scope: !6479)
!6499 = !DILocation(line: 4426, column: 5, scope: !6479)
!6500 = !DILocation(line: 4426, column: 8, scope: !6479)
!6501 = !DILocation(line: 4428, column: 3, scope: !6479)
!6502 = distinct !DISubprogram(name: "gsi_end_p", scope: !709, file: !709, line: 4467, type: !6503, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6503 = !DISubroutineType(types: !6504)
!6504 = !{!1130, !5954}
!6505 = !DILocalVariable(name: "i", arg: 1, scope: !6502, file: !709, line: 4467, type: !5954)
!6506 = !DILocation(line: 4467, column: 33, scope: !6502)
!6507 = !DILocation(line: 4469, column: 12, scope: !6502)
!6508 = !DILocation(line: 4469, column: 16, scope: !6502)
!6509 = !DILocation(line: 4469, column: 10, scope: !6502)
!6510 = !DILocation(line: 4469, column: 3, scope: !6502)
!6511 = distinct !DISubprogram(name: "phi_nodes", scope: !6512, file: !6512, line: 508, type: !6513, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6512 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!6513 = !DISubroutineType(types: !6514)
!6514 = !{!1330, !6515}
!6515 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1013, line: 112, baseType: !6516)
!6516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6517, size: 64)
!6517 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1305)
!6518 = !DILocalVariable(name: "bb", arg: 1, scope: !6511, file: !6512, line: 508, type: !6515)
!6519 = !DILocation(line: 508, column: 30, scope: !6511)
!6520 = !DILocation(line: 510, column: 3, scope: !6511)
!6521 = !DILocation(line: 511, column: 8, scope: !6522)
!6522 = distinct !DILexicalBlock(scope: !6511, file: !6512, line: 511, column: 7)
!6523 = !DILocation(line: 511, column: 12, scope: !6522)
!6524 = !DILocation(line: 511, column: 15, scope: !6522)
!6525 = !DILocation(line: 511, column: 7, scope: !6511)
!6526 = !DILocation(line: 512, column: 5, scope: !6522)
!6527 = !DILocation(line: 513, column: 10, scope: !6511)
!6528 = !DILocation(line: 513, column: 14, scope: !6511)
!6529 = !DILocation(line: 513, column: 17, scope: !6511)
!6530 = !DILocation(line: 513, column: 25, scope: !6511)
!6531 = !DILocation(line: 513, column: 3, scope: !6511)
!6532 = !DILocation(line: 514, column: 1, scope: !6511)
!6533 = distinct !DISubprogram(name: "gsi_stmt", scope: !709, file: !709, line: 4501, type: !6534, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6534 = !DISubroutineType(types: !6535)
!6535 = !{!1340, !5954}
!6536 = !DILocalVariable(name: "i", arg: 1, scope: !6533, file: !709, line: 4501, type: !5954)
!6537 = !DILocation(line: 4501, column: 32, scope: !6533)
!6538 = !DILocation(line: 4503, column: 12, scope: !6533)
!6539 = !DILocation(line: 4503, column: 17, scope: !6533)
!6540 = !DILocation(line: 4503, column: 3, scope: !6533)
!6541 = distinct !DISubprogram(name: "output_gimple_stmt", scope: !3, file: !3, line: 1640, type: !6542, scopeLine: 1641, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6542 = !DISubroutineType(types: !6543)
!6543 = !{null, !932, !1340}
!6544 = !DILocalVariable(name: "ob", arg: 1, scope: !6541, file: !3, line: 1640, type: !932)
!6545 = !DILocation(line: 1640, column: 42, scope: !6541)
!6546 = !DILocalVariable(name: "stmt", arg: 2, scope: !6541, file: !3, line: 1640, type: !1340)
!6547 = !DILocation(line: 1640, column: 53, scope: !6541)
!6548 = !DILocalVariable(name: "i", scope: !6541, file: !3, line: 1642, type: !7)
!6549 = !DILocation(line: 1642, column: 12, scope: !6541)
!6550 = !DILocalVariable(name: "code", scope: !6541, file: !3, line: 1643, type: !708)
!6551 = !DILocation(line: 1643, column: 20, scope: !6541)
!6552 = !DILocalVariable(name: "tag", scope: !6541, file: !3, line: 1644, type: !604)
!6553 = !DILocation(line: 1644, column: 17, scope: !6541)
!6554 = !DILocalVariable(name: "bp", scope: !6541, file: !3, line: 1645, type: !2844)
!6555 = !DILocation(line: 1645, column: 21, scope: !6541)
!6556 = !DILocation(line: 1648, column: 23, scope: !6541)
!6557 = !DILocation(line: 1648, column: 10, scope: !6541)
!6558 = !DILocation(line: 1648, column: 8, scope: !6541)
!6559 = !DILocation(line: 1649, column: 33, scope: !6541)
!6560 = !DILocation(line: 1649, column: 9, scope: !6541)
!6561 = !DILocation(line: 1649, column: 7, scope: !6541)
!6562 = !DILocation(line: 1650, column: 24, scope: !6541)
!6563 = !DILocation(line: 1650, column: 28, scope: !6541)
!6564 = !DILocation(line: 1650, column: 3, scope: !6541)
!6565 = !DILocation(line: 1653, column: 8, scope: !6541)
!6566 = !DILocation(line: 1653, column: 6, scope: !6541)
!6567 = !DILocation(line: 1654, column: 18, scope: !6541)
!6568 = !DILocation(line: 1654, column: 38, scope: !6541)
!6569 = !DILocation(line: 1654, column: 22, scope: !6541)
!6570 = !DILocation(line: 1654, column: 3, scope: !6541)
!6571 = !DILocation(line: 1655, column: 18, scope: !6541)
!6572 = !DILocation(line: 1655, column: 43, scope: !6541)
!6573 = !DILocation(line: 1655, column: 22, scope: !6541)
!6574 = !DILocation(line: 1655, column: 3, scope: !6541)
!6575 = !DILocation(line: 1656, column: 25, scope: !6576)
!6576 = distinct !DILexicalBlock(scope: !6541, file: !3, line: 1656, column: 7)
!6577 = !DILocation(line: 1656, column: 7, scope: !6576)
!6578 = !DILocation(line: 1656, column: 7, scope: !6541)
!6579 = !DILocation(line: 1657, column: 20, scope: !6576)
!6580 = !DILocation(line: 1657, column: 58, scope: !6576)
!6581 = !DILocation(line: 1657, column: 24, scope: !6576)
!6582 = !DILocation(line: 1657, column: 5, scope: !6576)
!6583 = !DILocation(line: 1658, column: 18, scope: !6541)
!6584 = !DILocation(line: 1658, column: 47, scope: !6541)
!6585 = !DILocation(line: 1658, column: 22, scope: !6541)
!6586 = !DILocation(line: 1658, column: 3, scope: !6541)
!6587 = !DILocation(line: 1659, column: 18, scope: !6541)
!6588 = !DILocation(line: 1659, column: 22, scope: !6541)
!6589 = !DILocation(line: 1659, column: 28, scope: !6541)
!6590 = !DILocation(line: 1659, column: 35, scope: !6541)
!6591 = !DILocation(line: 1659, column: 3, scope: !6541)
!6592 = !DILocation(line: 1660, column: 23, scope: !6541)
!6593 = !DILocation(line: 1660, column: 27, scope: !6541)
!6594 = !DILocation(line: 1660, column: 40, scope: !6541)
!6595 = !DILocation(line: 1660, column: 3, scope: !6541)
!6596 = !DILocation(line: 1661, column: 19, scope: !6541)
!6597 = !DILocation(line: 1661, column: 3, scope: !6541)
!6598 = !DILocation(line: 1664, column: 24, scope: !6541)
!6599 = !DILocation(line: 1664, column: 45, scope: !6541)
!6600 = !DILocation(line: 1664, column: 28, scope: !6541)
!6601 = !DILocation(line: 1664, column: 3, scope: !6541)
!6602 = !DILocation(line: 1667, column: 20, scope: !6541)
!6603 = !DILocation(line: 1667, column: 38, scope: !6541)
!6604 = !DILocation(line: 1667, column: 24, scope: !6541)
!6605 = !DILocation(line: 1667, column: 3, scope: !6541)
!6606 = !DILocation(line: 1670, column: 24, scope: !6541)
!6607 = !DILocation(line: 1670, column: 11, scope: !6541)
!6608 = !DILocation(line: 1670, column: 3, scope: !6541)
!6609 = !DILocation(line: 1673, column: 23, scope: !6610)
!6610 = distinct !DILexicalBlock(scope: !6541, file: !3, line: 1671, column: 5)
!6611 = !DILocation(line: 1673, column: 47, scope: !6610)
!6612 = !DILocation(line: 1673, column: 27, scope: !6610)
!6613 = !DILocation(line: 1673, column: 7, scope: !6610)
!6614 = !DILocation(line: 1674, column: 7, scope: !6610)
!6615 = !DILocation(line: 1677, column: 28, scope: !6610)
!6616 = !DILocation(line: 1677, column: 65, scope: !6610)
!6617 = !DILocation(line: 1677, column: 32, scope: !6610)
!6618 = !DILocation(line: 1677, column: 7, scope: !6610)
!6619 = !DILocation(line: 1678, column: 7, scope: !6610)
!6620 = !DILocation(line: 1681, column: 23, scope: !6610)
!6621 = !DILocation(line: 1681, column: 54, scope: !6610)
!6622 = !DILocation(line: 1681, column: 27, scope: !6610)
!6623 = !DILocation(line: 1681, column: 7, scope: !6610)
!6624 = !DILocation(line: 1682, column: 7, scope: !6610)
!6625 = !DILocation(line: 1685, column: 34, scope: !6610)
!6626 = !DILocation(line: 1685, column: 38, scope: !6610)
!6627 = !DILocation(line: 1685, column: 71, scope: !6610)
!6628 = !DILocation(line: 1685, column: 51, scope: !6610)
!6629 = !DILocation(line: 1685, column: 7, scope: !6610)
!6630 = !DILocation(line: 1686, column: 34, scope: !6610)
!6631 = !DILocation(line: 1686, column: 38, scope: !6610)
!6632 = !DILocation(line: 1686, column: 72, scope: !6610)
!6633 = !DILocation(line: 1686, column: 51, scope: !6610)
!6634 = !DILocation(line: 1686, column: 7, scope: !6610)
!6635 = !DILocation(line: 1687, column: 34, scope: !6610)
!6636 = !DILocation(line: 1687, column: 38, scope: !6610)
!6637 = !DILocation(line: 1687, column: 73, scope: !6610)
!6638 = !DILocation(line: 1687, column: 51, scope: !6610)
!6639 = !DILocation(line: 1687, column: 7, scope: !6610)
!6640 = !DILocation(line: 1688, column: 22, scope: !6610)
!6641 = !DILocation(line: 1688, column: 26, scope: !6610)
!6642 = !DILocation(line: 1688, column: 30, scope: !6610)
!6643 = !DILocation(line: 1688, column: 62, scope: !6610)
!6644 = !DILocation(line: 1688, column: 43, scope: !6610)
!6645 = !DILocation(line: 1688, column: 7, scope: !6610)
!6646 = !DILocation(line: 1699, column: 14, scope: !6647)
!6647 = distinct !DILexicalBlock(scope: !6610, file: !3, line: 1699, column: 7)
!6648 = !DILocation(line: 1699, column: 12, scope: !6647)
!6649 = !DILocation(line: 1699, column: 19, scope: !6650)
!6650 = distinct !DILexicalBlock(scope: !6647, file: !3, line: 1699, column: 7)
!6651 = !DILocation(line: 1699, column: 39, scope: !6650)
!6652 = !DILocation(line: 1699, column: 23, scope: !6650)
!6653 = !DILocation(line: 1699, column: 21, scope: !6650)
!6654 = !DILocation(line: 1699, column: 7, scope: !6647)
!6655 = !DILocalVariable(name: "op", scope: !6656, file: !3, line: 1701, type: !1012)
!6656 = distinct !DILexicalBlock(scope: !6650, file: !3, line: 1700, column: 2)
!6657 = !DILocation(line: 1701, column: 9, scope: !6656)
!6658 = !DILocation(line: 1701, column: 25, scope: !6656)
!6659 = !DILocation(line: 1701, column: 31, scope: !6656)
!6660 = !DILocation(line: 1701, column: 14, scope: !6656)
!6661 = !DILocation(line: 1702, column: 25, scope: !6656)
!6662 = !DILocation(line: 1702, column: 29, scope: !6656)
!6663 = !DILocation(line: 1702, column: 4, scope: !6656)
!6664 = !DILocation(line: 1703, column: 2, scope: !6656)
!6665 = !DILocation(line: 1699, column: 47, scope: !6650)
!6666 = !DILocation(line: 1699, column: 7, scope: !6650)
!6667 = distinct !{!6667, !6654, !6668}
!6668 = !DILocation(line: 1703, column: 2, scope: !6647)
!6669 = !DILocation(line: 1704, column: 7, scope: !6610)
!6670 = !DILocation(line: 1708, column: 7, scope: !6610)
!6671 = !DILocation(line: 1711, column: 7, scope: !6610)
!6672 = !DILocation(line: 1712, column: 5, scope: !6610)
!6673 = !DILocation(line: 1713, column: 1, scope: !6541)
!6674 = distinct !DISubprogram(name: "gsi_next", scope: !709, file: !709, line: 4485, type: !6675, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6675 = !DISubroutineType(types: !6676)
!6676 = !{null, !6677}
!6677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5954, size: 64)
!6678 = !DILocalVariable(name: "i", arg: 1, scope: !6674, file: !709, line: 4485, type: !6677)
!6679 = !DILocation(line: 4485, column: 33, scope: !6674)
!6680 = !DILocation(line: 4487, column: 12, scope: !6674)
!6681 = !DILocation(line: 4487, column: 15, scope: !6674)
!6682 = !DILocation(line: 4487, column: 20, scope: !6674)
!6683 = !DILocation(line: 4487, column: 3, scope: !6674)
!6684 = !DILocation(line: 4487, column: 6, scope: !6674)
!6685 = !DILocation(line: 4487, column: 10, scope: !6674)
!6686 = !DILocation(line: 4488, column: 1, scope: !6674)
!6687 = distinct !DISubprogram(name: "gimple_phi_result", scope: !709, file: !709, line: 3071, type: !6688, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6688 = !DISubroutineType(types: !6689)
!6689 = !{!1012, !6690}
!6690 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1013, line: 60, baseType: !2666)
!6691 = !DILocalVariable(name: "gs", arg: 1, scope: !6687, file: !709, line: 3071, type: !6690)
!6692 = !DILocation(line: 3071, column: 33, scope: !6687)
!6693 = !DILocation(line: 3074, column: 10, scope: !6687)
!6694 = !DILocation(line: 3074, column: 14, scope: !6687)
!6695 = !DILocation(line: 3074, column: 25, scope: !6687)
!6696 = !DILocation(line: 3074, column: 3, scope: !6687)
!6697 = distinct !DISubprogram(name: "output_phi", scope: !3, file: !3, line: 1621, type: !6542, scopeLine: 1622, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6698 = !DILocalVariable(name: "ob", arg: 1, scope: !6697, file: !3, line: 1621, type: !932)
!6699 = !DILocation(line: 1621, column: 34, scope: !6697)
!6700 = !DILocalVariable(name: "phi", arg: 2, scope: !6697, file: !3, line: 1621, type: !1340)
!6701 = !DILocation(line: 1621, column: 45, scope: !6697)
!6702 = !DILocalVariable(name: "i", scope: !6697, file: !3, line: 1623, type: !7)
!6703 = !DILocation(line: 1623, column: 12, scope: !6697)
!6704 = !DILocalVariable(name: "len", scope: !6697, file: !3, line: 1623, type: !7)
!6705 = !DILocation(line: 1623, column: 15, scope: !6697)
!6706 = !DILocation(line: 1623, column: 42, scope: !6697)
!6707 = !DILocation(line: 1623, column: 21, scope: !6697)
!6708 = !DILocation(line: 1625, column: 24, scope: !6697)
!6709 = !DILocation(line: 1625, column: 28, scope: !6697)
!6710 = !DILocation(line: 1625, column: 3, scope: !6697)
!6711 = !DILocation(line: 1626, column: 19, scope: !6697)
!6712 = !DILocation(line: 1626, column: 23, scope: !6697)
!6713 = !DILocation(line: 1626, column: 3, scope: !6697)
!6714 = !DILocation(line: 1628, column: 10, scope: !6715)
!6715 = distinct !DILexicalBlock(scope: !6697, file: !3, line: 1628, column: 3)
!6716 = !DILocation(line: 1628, column: 8, scope: !6715)
!6717 = !DILocation(line: 1628, column: 15, scope: !6718)
!6718 = distinct !DILexicalBlock(scope: !6715, file: !3, line: 1628, column: 3)
!6719 = !DILocation(line: 1628, column: 19, scope: !6718)
!6720 = !DILocation(line: 1628, column: 17, scope: !6718)
!6721 = !DILocation(line: 1628, column: 3, scope: !6715)
!6722 = !DILocation(line: 1630, column: 28, scope: !6723)
!6723 = distinct !DILexicalBlock(scope: !6718, file: !3, line: 1629, column: 5)
!6724 = !DILocation(line: 1630, column: 52, scope: !6723)
!6725 = !DILocation(line: 1630, column: 57, scope: !6723)
!6726 = !DILocation(line: 1630, column: 32, scope: !6723)
!6727 = !DILocation(line: 1630, column: 7, scope: !6723)
!6728 = !DILocation(line: 1631, column: 23, scope: !6723)
!6729 = !DILocation(line: 1631, column: 48, scope: !6723)
!6730 = !DILocation(line: 1631, column: 53, scope: !6723)
!6731 = !DILocation(line: 1631, column: 27, scope: !6723)
!6732 = !DILocation(line: 1631, column: 57, scope: !6723)
!6733 = !DILocation(line: 1631, column: 62, scope: !6723)
!6734 = !DILocation(line: 1631, column: 7, scope: !6723)
!6735 = !DILocation(line: 1632, column: 28, scope: !6723)
!6736 = !DILocation(line: 1632, column: 57, scope: !6723)
!6737 = !DILocation(line: 1632, column: 62, scope: !6723)
!6738 = !DILocation(line: 1632, column: 32, scope: !6723)
!6739 = !DILocation(line: 1632, column: 7, scope: !6723)
!6740 = !DILocation(line: 1633, column: 5, scope: !6723)
!6741 = !DILocation(line: 1628, column: 25, scope: !6718)
!6742 = !DILocation(line: 1628, column: 3, scope: !6718)
!6743 = distinct !{!6743, !6721, !6744}
!6744 = !DILocation(line: 1633, column: 5, scope: !6715)
!6745 = !DILocation(line: 1634, column: 1, scope: !6697)
!6746 = distinct !DISubprogram(name: "bb_seq", scope: !709, file: !709, line: 237, type: !6513, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6747 = !DILocalVariable(name: "bb", arg: 1, scope: !6746, file: !709, line: 237, type: !6515)
!6748 = !DILocation(line: 237, column: 27, scope: !6746)
!6749 = !DILocation(line: 239, column: 13, scope: !6746)
!6750 = !DILocation(line: 239, column: 17, scope: !6746)
!6751 = !DILocation(line: 239, column: 23, scope: !6746)
!6752 = !DILocation(line: 239, column: 33, scope: !6746)
!6753 = !DILocation(line: 239, column: 36, scope: !6746)
!6754 = !DILocation(line: 239, column: 40, scope: !6746)
!6755 = !DILocation(line: 239, column: 43, scope: !6746)
!6756 = !DILocation(line: 239, column: 10, scope: !6746)
!6757 = !DILocation(line: 239, column: 53, scope: !6746)
!6758 = !DILocation(line: 239, column: 57, scope: !6746)
!6759 = !DILocation(line: 239, column: 60, scope: !6746)
!6760 = !DILocation(line: 239, column: 68, scope: !6746)
!6761 = !DILocation(line: 239, column: 3, scope: !6746)
!6762 = distinct !DISubprogram(name: "gimple_seq_first", scope: !709, file: !709, line: 159, type: !6763, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6763 = !DISubroutineType(types: !6764)
!6764 = !{!1335, !6765}
!6765 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1013, line: 67, baseType: !6766)
!6766 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6767, size: 64)
!6767 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1332)
!6768 = !DILocalVariable(name: "s", arg: 1, scope: !6762, file: !709, line: 159, type: !6765)
!6769 = !DILocation(line: 159, column: 36, scope: !6762)
!6770 = !DILocation(line: 161, column: 10, scope: !6762)
!6771 = !DILocation(line: 161, column: 14, scope: !6762)
!6772 = !DILocation(line: 161, column: 17, scope: !6762)
!6773 = !DILocation(line: 161, column: 3, scope: !6762)
!6774 = distinct !DISubprogram(name: "gimple_code", scope: !709, file: !709, line: 1052, type: !6775, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6775 = !DISubroutineType(types: !6776)
!6776 = !{!708, !6690}
!6777 = !DILocalVariable(name: "g", arg: 1, scope: !6774, file: !709, line: 1052, type: !6690)
!6778 = !DILocation(line: 1052, column: 27, scope: !6774)
!6779 = !DILocation(line: 1054, column: 10, scope: !6774)
!6780 = !DILocation(line: 1054, column: 13, scope: !6774)
!6781 = !DILocation(line: 1054, column: 20, scope: !6774)
!6782 = !DILocation(line: 1054, column: 3, scope: !6774)
!6783 = distinct !DISubprogram(name: "lto_gimple_code_to_tag", scope: !6, file: !6, line: 896, type: !6784, scopeLine: 897, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6784 = !DISubroutineType(types: !6785)
!6785 = !{!604, !708}
!6786 = !DILocalVariable(name: "code", arg: 1, scope: !6783, file: !6, line: 896, type: !708)
!6787 = !DILocation(line: 896, column: 42, scope: !6783)
!6788 = !DILocation(line: 898, column: 38, scope: !6783)
!6789 = !DILocation(line: 898, column: 43, scope: !6783)
!6790 = !DILocation(line: 898, column: 60, scope: !6783)
!6791 = !DILocation(line: 898, column: 3, scope: !6783)
!6792 = distinct !DISubprogram(name: "gimple_num_ops", scope: !709, file: !709, line: 1596, type: !6793, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6793 = !DISubroutineType(types: !6794)
!6794 = !{!7, !6690}
!6795 = !DILocalVariable(name: "gs", arg: 1, scope: !6792, file: !709, line: 1596, type: !6690)
!6796 = !DILocation(line: 1596, column: 30, scope: !6792)
!6797 = !DILocation(line: 1598, column: 10, scope: !6792)
!6798 = !DILocation(line: 1598, column: 14, scope: !6792)
!6799 = !DILocation(line: 1598, column: 21, scope: !6792)
!6800 = !DILocation(line: 1598, column: 3, scope: !6792)
!6801 = distinct !DISubprogram(name: "gimple_no_warning_p", scope: !709, file: !709, line: 1201, type: !6802, scopeLine: 1202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6802 = !DISubroutineType(types: !6803)
!6803 = !{!1130, !6690}
!6804 = !DILocalVariable(name: "stmt", arg: 1, scope: !6801, file: !709, line: 1201, type: !6690)
!6805 = !DILocation(line: 1201, column: 35, scope: !6801)
!6806 = !DILocation(line: 1203, column: 10, scope: !6801)
!6807 = !DILocation(line: 1203, column: 16, scope: !6801)
!6808 = !DILocation(line: 1203, column: 23, scope: !6801)
!6809 = !DILocation(line: 1203, column: 3, scope: !6801)
!6810 = distinct !DISubprogram(name: "is_gimple_assign", scope: !709, file: !709, line: 1677, type: !6802, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6811 = !DILocalVariable(name: "gs", arg: 1, scope: !6810, file: !709, line: 1677, type: !6690)
!6812 = !DILocation(line: 1677, column: 32, scope: !6810)
!6813 = !DILocation(line: 1679, column: 23, scope: !6810)
!6814 = !DILocation(line: 1679, column: 10, scope: !6810)
!6815 = !DILocation(line: 1679, column: 27, scope: !6810)
!6816 = !DILocation(line: 1679, column: 3, scope: !6810)
!6817 = distinct !DISubprogram(name: "gimple_assign_nontemporal_move_p", scope: !709, file: !709, line: 1794, type: !6802, scopeLine: 1795, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6818 = !DILocalVariable(name: "gs", arg: 1, scope: !6817, file: !709, line: 1794, type: !6690)
!6819 = !DILocation(line: 1794, column: 48, scope: !6817)
!6820 = !DILocation(line: 1797, column: 10, scope: !6817)
!6821 = !DILocation(line: 1797, column: 14, scope: !6817)
!6822 = !DILocation(line: 1797, column: 21, scope: !6817)
!6823 = !DILocation(line: 1797, column: 3, scope: !6817)
!6824 = distinct !DISubprogram(name: "gimple_has_volatile_ops", scope: !709, file: !709, line: 1477, type: !6802, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6825 = !DILocalVariable(name: "stmt", arg: 1, scope: !6824, file: !709, line: 1477, type: !6690)
!6826 = !DILocation(line: 1477, column: 39, scope: !6824)
!6827 = !DILocation(line: 1479, column: 27, scope: !6828)
!6828 = distinct !DILexicalBlock(scope: !6824, file: !709, line: 1479, column: 7)
!6829 = !DILocation(line: 1479, column: 7, scope: !6828)
!6830 = !DILocation(line: 1479, column: 7, scope: !6824)
!6831 = !DILocation(line: 1480, column: 12, scope: !6828)
!6832 = !DILocation(line: 1480, column: 18, scope: !6828)
!6833 = !DILocation(line: 1480, column: 25, scope: !6828)
!6834 = !DILocation(line: 1480, column: 5, scope: !6828)
!6835 = !DILocation(line: 1482, column: 5, scope: !6828)
!6836 = !DILocation(line: 1483, column: 1, scope: !6824)
!6837 = distinct !DISubprogram(name: "gimple_location", scope: !709, file: !709, line: 1139, type: !6838, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6838 = !DISubroutineType(types: !6839)
!6839 = !{!1138, !6690}
!6840 = !DILocalVariable(name: "g", arg: 1, scope: !6837, file: !709, line: 1139, type: !6690)
!6841 = !DILocation(line: 1139, column: 31, scope: !6837)
!6842 = !DILocation(line: 1141, column: 10, scope: !6837)
!6843 = !DILocation(line: 1141, column: 13, scope: !6837)
!6844 = !DILocation(line: 1141, column: 20, scope: !6837)
!6845 = !DILocation(line: 1141, column: 3, scope: !6837)
!6846 = distinct !DISubprogram(name: "gimple_block", scope: !709, file: !709, line: 1121, type: !6688, scopeLine: 1122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6847 = !DILocalVariable(name: "g", arg: 1, scope: !6846, file: !709, line: 1121, type: !6690)
!6848 = !DILocation(line: 1121, column: 28, scope: !6846)
!6849 = !DILocation(line: 1123, column: 10, scope: !6846)
!6850 = !DILocation(line: 1123, column: 13, scope: !6846)
!6851 = !DILocation(line: 1123, column: 20, scope: !6846)
!6852 = !DILocation(line: 1123, column: 3, scope: !6846)
!6853 = distinct !DISubprogram(name: "gimple_resx_region", scope: !709, file: !709, line: 3121, type: !6854, scopeLine: 3122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6854 = !DISubroutineType(types: !6855)
!6855 = !{!962, !6690}
!6856 = !DILocalVariable(name: "gs", arg: 1, scope: !6853, file: !709, line: 3121, type: !6690)
!6857 = !DILocation(line: 3121, column: 34, scope: !6853)
!6858 = !DILocation(line: 3124, column: 10, scope: !6853)
!6859 = !DILocation(line: 3124, column: 14, scope: !6853)
!6860 = !DILocation(line: 3124, column: 29, scope: !6853)
!6861 = !DILocation(line: 3124, column: 3, scope: !6853)
!6862 = distinct !DISubprogram(name: "gimple_eh_must_not_throw_fndecl", scope: !709, file: !709, line: 2899, type: !6863, scopeLine: 2900, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6863 = !DISubroutineType(types: !6864)
!6864 = !{!1012, !1340}
!6865 = !DILocalVariable(name: "gs", arg: 1, scope: !6862, file: !709, line: 2899, type: !1340)
!6866 = !DILocation(line: 2899, column: 41, scope: !6862)
!6867 = !DILocation(line: 2902, column: 10, scope: !6862)
!6868 = !DILocation(line: 2902, column: 14, scope: !6862)
!6869 = !DILocation(line: 2902, column: 28, scope: !6862)
!6870 = !DILocation(line: 2902, column: 3, scope: !6862)
!6871 = distinct !DISubprogram(name: "gimple_eh_dispatch_region", scope: !709, file: !709, line: 3139, type: !6854, scopeLine: 3140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6872 = !DILocalVariable(name: "gs", arg: 1, scope: !6871, file: !709, line: 3139, type: !6690)
!6873 = !DILocation(line: 3139, column: 41, scope: !6871)
!6874 = !DILocation(line: 3142, column: 10, scope: !6871)
!6875 = !DILocation(line: 3142, column: 14, scope: !6871)
!6876 = !DILocation(line: 3142, column: 29, scope: !6871)
!6877 = !DILocation(line: 3142, column: 3, scope: !6871)
!6878 = distinct !DISubprogram(name: "gimple_asm_ninputs", scope: !709, file: !709, line: 2581, type: !6793, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6879 = !DILocalVariable(name: "gs", arg: 1, scope: !6878, file: !709, line: 2581, type: !6690)
!6880 = !DILocation(line: 2581, column: 34, scope: !6878)
!6881 = !DILocation(line: 2584, column: 10, scope: !6878)
!6882 = !DILocation(line: 2584, column: 14, scope: !6878)
!6883 = !DILocation(line: 2584, column: 25, scope: !6878)
!6884 = !DILocation(line: 2584, column: 3, scope: !6878)
!6885 = distinct !DISubprogram(name: "gimple_asm_noutputs", scope: !709, file: !709, line: 2591, type: !6793, scopeLine: 2592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6886 = !DILocalVariable(name: "gs", arg: 1, scope: !6885, file: !709, line: 2591, type: !6690)
!6887 = !DILocation(line: 2591, column: 35, scope: !6885)
!6888 = !DILocation(line: 2594, column: 10, scope: !6885)
!6889 = !DILocation(line: 2594, column: 14, scope: !6885)
!6890 = !DILocation(line: 2594, column: 25, scope: !6885)
!6891 = !DILocation(line: 2594, column: 3, scope: !6885)
!6892 = distinct !DISubprogram(name: "gimple_asm_nclobbers", scope: !709, file: !709, line: 2601, type: !6793, scopeLine: 2602, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6893 = !DILocalVariable(name: "gs", arg: 1, scope: !6892, file: !709, line: 2601, type: !6690)
!6894 = !DILocation(line: 2601, column: 36, scope: !6892)
!6895 = !DILocation(line: 2604, column: 10, scope: !6892)
!6896 = !DILocation(line: 2604, column: 14, scope: !6892)
!6897 = !DILocation(line: 2604, column: 25, scope: !6892)
!6898 = !DILocation(line: 2604, column: 3, scope: !6892)
!6899 = distinct !DISubprogram(name: "gimple_asm_string", scope: !709, file: !709, line: 2729, type: !6900, scopeLine: 2730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6900 = !DISubroutineType(types: !6901)
!6901 = !{!1214, !6690}
!6902 = !DILocalVariable(name: "gs", arg: 1, scope: !6899, file: !709, line: 2729, type: !6690)
!6903 = !DILocation(line: 2729, column: 33, scope: !6899)
!6904 = !DILocation(line: 2732, column: 10, scope: !6899)
!6905 = !DILocation(line: 2732, column: 14, scope: !6899)
!6906 = !DILocation(line: 2732, column: 25, scope: !6899)
!6907 = !DILocation(line: 2732, column: 3, scope: !6899)
!6908 = distinct !DISubprogram(name: "gimple_op", scope: !709, file: !709, line: 1631, type: !6909, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6909 = !DISubroutineType(types: !6910)
!6910 = !{!1012, !6690, !7}
!6911 = !DILocalVariable(name: "gs", arg: 1, scope: !6908, file: !709, line: 1631, type: !6690)
!6912 = !DILocation(line: 1631, column: 25, scope: !6908)
!6913 = !DILocalVariable(name: "i", arg: 2, scope: !6908, file: !709, line: 1631, type: !7)
!6914 = !DILocation(line: 1631, column: 38, scope: !6908)
!6915 = !DILocation(line: 1633, column: 23, scope: !6916)
!6916 = distinct !DILexicalBlock(scope: !6908, file: !709, line: 1633, column: 7)
!6917 = !DILocation(line: 1633, column: 7, scope: !6916)
!6918 = !DILocation(line: 1633, column: 7, scope: !6908)
!6919 = !DILocation(line: 1638, column: 26, scope: !6920)
!6920 = distinct !DILexicalBlock(scope: !6916, file: !709, line: 1634, column: 5)
!6921 = !DILocation(line: 1638, column: 14, scope: !6920)
!6922 = !DILocation(line: 1638, column: 50, scope: !6920)
!6923 = !DILocation(line: 1638, column: 7, scope: !6920)
!6924 = !DILocation(line: 1641, column: 5, scope: !6916)
!6925 = !DILocation(line: 1642, column: 1, scope: !6908)
!6926 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !709, file: !709, line: 1283, type: !6802, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6927 = !DILocalVariable(name: "g", arg: 1, scope: !6926, file: !709, line: 1283, type: !6690)
!6928 = !DILocation(line: 1283, column: 34, scope: !6926)
!6929 = !DILocation(line: 1285, column: 23, scope: !6926)
!6930 = !DILocation(line: 1285, column: 10, scope: !6926)
!6931 = !DILocation(line: 1285, column: 26, scope: !6926)
!6932 = !DILocation(line: 1285, column: 43, scope: !6926)
!6933 = !DILocation(line: 1285, column: 59, scope: !6926)
!6934 = !DILocation(line: 1285, column: 46, scope: !6926)
!6935 = !DILocation(line: 1285, column: 62, scope: !6926)
!6936 = !DILocation(line: 0, scope: !6926)
!6937 = !DILocation(line: 1285, column: 3, scope: !6926)
!6938 = distinct !DISubprogram(name: "gimple_has_ops", scope: !709, file: !709, line: 1274, type: !6802, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6939 = !DILocalVariable(name: "g", arg: 1, scope: !6938, file: !709, line: 1274, type: !6690)
!6940 = !DILocation(line: 1274, column: 30, scope: !6938)
!6941 = !DILocation(line: 1276, column: 23, scope: !6938)
!6942 = !DILocation(line: 1276, column: 10, scope: !6938)
!6943 = !DILocation(line: 1276, column: 26, scope: !6938)
!6944 = !DILocation(line: 1276, column: 41, scope: !6938)
!6945 = !DILocation(line: 1276, column: 57, scope: !6938)
!6946 = !DILocation(line: 1276, column: 44, scope: !6938)
!6947 = !DILocation(line: 1276, column: 60, scope: !6938)
!6948 = !DILocation(line: 0, scope: !6938)
!6949 = !DILocation(line: 1276, column: 3, scope: !6938)
!6950 = distinct !DISubprogram(name: "gimple_ops", scope: !709, file: !709, line: 1614, type: !6951, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6951 = !DISubroutineType(types: !6952)
!6952 = !{!1375, !1340}
!6953 = !DILocalVariable(name: "gs", arg: 1, scope: !6950, file: !709, line: 1614, type: !1340)
!6954 = !DILocation(line: 1614, column: 20, scope: !6950)
!6955 = !DILocalVariable(name: "off", scope: !6950, file: !709, line: 1616, type: !972)
!6956 = !DILocation(line: 1616, column: 10, scope: !6950)
!6957 = !DILocation(line: 1621, column: 56, scope: !6950)
!6958 = !DILocation(line: 1621, column: 28, scope: !6950)
!6959 = !DILocation(line: 1621, column: 9, scope: !6950)
!6960 = !DILocation(line: 1621, column: 7, scope: !6950)
!6961 = !DILocation(line: 1622, column: 3, scope: !6950)
!6962 = !DILocation(line: 1624, column: 29, scope: !6950)
!6963 = !DILocation(line: 1624, column: 20, scope: !6950)
!6964 = !DILocation(line: 1624, column: 34, scope: !6950)
!6965 = !DILocation(line: 1624, column: 32, scope: !6950)
!6966 = !DILocation(line: 1624, column: 10, scope: !6950)
!6967 = !DILocation(line: 1624, column: 3, scope: !6950)
!6968 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !709, file: !709, line: 1073, type: !6969, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6969 = !DISubroutineType(types: !6970)
!6970 = !{!747, !1340}
!6971 = !DILocalVariable(name: "gs", arg: 1, scope: !6968, file: !709, line: 1073, type: !1340)
!6972 = !DILocation(line: 1073, column: 36, scope: !6968)
!6973 = !DILocation(line: 1075, column: 37, scope: !6968)
!6974 = !DILocation(line: 1075, column: 24, scope: !6968)
!6975 = !DILocation(line: 1075, column: 10, scope: !6968)
!6976 = !DILocation(line: 1075, column: 3, scope: !6968)
!6977 = distinct !DISubprogram(name: "gss_for_code", scope: !709, file: !709, line: 1061, type: !6978, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6978 = !DISubroutineType(types: !6979)
!6979 = !{!747, !708}
!6980 = !DILocalVariable(name: "code", arg: 1, scope: !6977, file: !709, line: 1061, type: !708)
!6981 = !DILocation(line: 1061, column: 32, scope: !6977)
!6982 = !DILocation(line: 1066, column: 24, scope: !6977)
!6983 = !DILocation(line: 1066, column: 10, scope: !6977)
!6984 = !DILocation(line: 1066, column: 3, scope: !6977)
!6985 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !709, file: !709, line: 3061, type: !6793, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6986 = !DILocalVariable(name: "gs", arg: 1, scope: !6985, file: !709, line: 3061, type: !6690)
!6987 = !DILocation(line: 3061, column: 35, scope: !6985)
!6988 = !DILocation(line: 3064, column: 10, scope: !6985)
!6989 = !DILocation(line: 3064, column: 14, scope: !6985)
!6990 = !DILocation(line: 3064, column: 25, scope: !6985)
!6991 = !DILocation(line: 3064, column: 3, scope: !6985)
!6992 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !6512, file: !6512, line: 434, type: !6993, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!6993 = !DISubroutineType(types: !6994)
!6994 = !{!1012, !6995}
!6995 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !1371, line: 27, baseType: !1375)
!6996 = !DILocalVariable(name: "def", arg: 1, scope: !6992, file: !6512, line: 434, type: !6995)
!6997 = !DILocation(line: 434, column: 33, scope: !6992)
!6998 = !DILocation(line: 436, column: 11, scope: !6992)
!6999 = !DILocation(line: 436, column: 10, scope: !6992)
!7000 = !DILocation(line: 436, column: 3, scope: !6992)
!7001 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !709, file: !709, line: 3080, type: !6951, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7002 = !DILocalVariable(name: "gs", arg: 1, scope: !7001, file: !709, line: 3080, type: !1340)
!7003 = !DILocation(line: 3080, column: 31, scope: !7001)
!7004 = !DILocation(line: 3083, column: 11, scope: !7001)
!7005 = !DILocation(line: 3083, column: 15, scope: !7001)
!7006 = !DILocation(line: 3083, column: 26, scope: !7001)
!7007 = !DILocation(line: 3083, column: 3, scope: !7001)
!7008 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !6512, file: !6512, line: 450, type: !7009, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7009 = !DISubroutineType(types: !7010)
!7010 = !{!1012, !1340, !972}
!7011 = !DILocalVariable(name: "gs", arg: 1, scope: !7008, file: !6512, line: 450, type: !1340)
!7012 = !DILocation(line: 450, column: 28, scope: !7008)
!7013 = !DILocalVariable(name: "index", arg: 2, scope: !7008, file: !6512, line: 450, type: !972)
!7014 = !DILocation(line: 450, column: 39, scope: !7008)
!7015 = !DILocalVariable(name: "pd", scope: !7008, file: !6512, line: 452, type: !7016)
!7016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1443, size: 64)
!7017 = !DILocation(line: 452, column: 21, scope: !7008)
!7018 = !DILocation(line: 452, column: 42, scope: !7008)
!7019 = !DILocation(line: 452, column: 46, scope: !7008)
!7020 = !DILocation(line: 452, column: 26, scope: !7008)
!7021 = !DILocation(line: 453, column: 29, scope: !7008)
!7022 = !DILocation(line: 453, column: 33, scope: !7008)
!7023 = !DILocation(line: 453, column: 10, scope: !7008)
!7024 = !DILocation(line: 453, column: 3, scope: !7008)
!7025 = distinct !DISubprogram(name: "gimple_phi_arg_edge", scope: !6512, file: !6512, line: 467, type: !7026, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7026 = !DISubroutineType(types: !7027)
!7027 = !{!1320, !1340, !972}
!7028 = !DILocalVariable(name: "gs", arg: 1, scope: !7025, file: !6512, line: 467, type: !1340)
!7029 = !DILocation(line: 467, column: 29, scope: !7025)
!7030 = !DILocalVariable(name: "i", arg: 2, scope: !7025, file: !6512, line: 467, type: !972)
!7031 = !DILocation(line: 467, column: 40, scope: !7025)
!7032 = !DILocation(line: 469, column: 10, scope: !7025)
!7033 = !DILocation(line: 469, column: 3, scope: !7025)
!7034 = distinct !DISubprogram(name: "gimple_phi_arg_location", scope: !6512, file: !6512, line: 475, type: !7035, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7035 = !DISubroutineType(types: !7036)
!7036 = !{!1140, !1340, !972}
!7037 = !DILocalVariable(name: "gs", arg: 1, scope: !7034, file: !6512, line: 475, type: !1340)
!7038 = !DILocation(line: 475, column: 33, scope: !7034)
!7039 = !DILocalVariable(name: "i", arg: 2, scope: !7034, file: !6512, line: 475, type: !972)
!7040 = !DILocation(line: 475, column: 44, scope: !7034)
!7041 = !DILocation(line: 477, column: 26, scope: !7034)
!7042 = !DILocation(line: 477, column: 30, scope: !7034)
!7043 = !DILocation(line: 477, column: 10, scope: !7034)
!7044 = !DILocation(line: 477, column: 34, scope: !7034)
!7045 = !DILocation(line: 477, column: 3, scope: !7034)
!7046 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !709, file: !709, line: 3100, type: !7047, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7047 = !DISubroutineType(types: !7048)
!7048 = !{!7016, !1340, !7}
!7049 = !DILocalVariable(name: "gs", arg: 1, scope: !7046, file: !709, line: 3100, type: !1340)
!7050 = !DILocation(line: 3100, column: 24, scope: !7046)
!7051 = !DILocalVariable(name: "index", arg: 2, scope: !7046, file: !709, line: 3100, type: !7)
!7052 = !DILocation(line: 3100, column: 37, scope: !7046)
!7053 = !DILocation(line: 3103, column: 3, scope: !7046)
!7054 = !DILocation(line: 3104, column: 12, scope: !7046)
!7055 = !DILocation(line: 3104, column: 16, scope: !7046)
!7056 = !DILocation(line: 3104, column: 27, scope: !7046)
!7057 = !DILocation(line: 3104, column: 32, scope: !7046)
!7058 = !DILocation(line: 3104, column: 3, scope: !7046)
!7059 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !6512, file: !6512, line: 427, type: !7060, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7060 = !DISubroutineType(types: !7061)
!7061 = !{!1012, !7062}
!7062 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1371, line: 30, baseType: !7063)
!7063 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7064, size: 64)
!7064 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !149, line: 1893, baseType: !1382)
!7065 = !DILocalVariable(name: "use", arg: 1, scope: !7059, file: !6512, line: 427, type: !7062)
!7066 = !DILocation(line: 427, column: 33, scope: !7059)
!7067 = !DILocation(line: 429, column: 12, scope: !7059)
!7068 = !DILocation(line: 429, column: 17, scope: !7059)
!7069 = !DILocation(line: 429, column: 10, scope: !7059)
!7070 = !DILocation(line: 429, column: 3, scope: !7059)
!7071 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !351, file: !351, line: 150, type: !7072, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7072 = !DISubroutineType(types: !7073)
!7073 = !{!1320, !7074, !7}
!7074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7075, size: 64)
!7075 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1313)
!7076 = !DILocalVariable(name: "vec_", arg: 1, scope: !7071, file: !351, line: 150, type: !7074)
!7077 = !DILocation(line: 150, column: 1, scope: !7071)
!7078 = !DILocalVariable(name: "ix_", arg: 2, scope: !7071, file: !351, line: 150, type: !7)
!7079 = !DILocation(line: 0, scope: !7071)
!7080 = distinct !DISubprogram(name: "gimple_bb", scope: !709, file: !709, line: 1112, type: !7081, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7081 = !DISubroutineType(types: !7082)
!7082 = !{!1304, !6690}
!7083 = !DILocalVariable(name: "g", arg: 1, scope: !7080, file: !709, line: 1112, type: !6690)
!7084 = !DILocation(line: 1112, column: 25, scope: !7080)
!7085 = !DILocation(line: 1114, column: 10, scope: !7080)
!7086 = !DILocation(line: 1114, column: 13, scope: !7080)
!7087 = !DILocation(line: 1114, column: 20, scope: !7080)
!7088 = !DILocation(line: 1114, column: 3, scope: !7080)
!7089 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !351, file: !351, line: 150, type: !7090, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7090 = !DISubroutineType(types: !7091)
!7091 = !{!7, !7074}
!7092 = !DILocalVariable(name: "vec_", arg: 1, scope: !7089, file: !351, line: 150, type: !7074)
!7093 = !DILocation(line: 150, column: 1, scope: !7089)
!7094 = distinct !DISubprogram(name: "ei_start_1", scope: !351, file: !351, line: 696, type: !7095, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7095 = !DISubroutineType(types: !7096)
!7096 = !{!6095, !6100}
!7097 = !DILocalVariable(name: "ev", arg: 1, scope: !7094, file: !351, line: 696, type: !6100)
!7098 = !DILocation(line: 696, column: 28, scope: !7094)
!7099 = !DILocalVariable(name: "i", scope: !7094, file: !351, line: 698, type: !6095)
!7100 = !DILocation(line: 698, column: 17, scope: !7094)
!7101 = !DILocation(line: 700, column: 5, scope: !7094)
!7102 = !DILocation(line: 700, column: 11, scope: !7094)
!7103 = !DILocation(line: 701, column: 17, scope: !7094)
!7104 = !DILocation(line: 701, column: 5, scope: !7094)
!7105 = !DILocation(line: 701, column: 15, scope: !7094)
!7106 = !DILocation(line: 703, column: 3, scope: !7094)
!7107 = distinct !DISubprogram(name: "ei_cond", scope: !351, file: !351, line: 771, type: !7108, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7108 = !DISubroutineType(types: !7109)
!7109 = !{!1130, !6095, !7110}
!7110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1320, size: 64)
!7111 = !DILocalVariable(name: "ei", arg: 1, scope: !7107, file: !351, line: 771, type: !6095)
!7112 = !DILocation(line: 771, column: 24, scope: !7107)
!7113 = !DILocalVariable(name: "p", arg: 2, scope: !7107, file: !351, line: 771, type: !7110)
!7114 = !DILocation(line: 771, column: 34, scope: !7107)
!7115 = !DILocation(line: 773, column: 8, scope: !7116)
!7116 = distinct !DILexicalBlock(scope: !7107, file: !351, line: 773, column: 7)
!7117 = !DILocation(line: 773, column: 7, scope: !7107)
!7118 = !DILocation(line: 775, column: 12, scope: !7119)
!7119 = distinct !DILexicalBlock(scope: !7116, file: !351, line: 774, column: 5)
!7120 = !DILocation(line: 775, column: 8, scope: !7119)
!7121 = !DILocation(line: 775, column: 10, scope: !7119)
!7122 = !DILocation(line: 776, column: 7, scope: !7119)
!7123 = !DILocation(line: 780, column: 8, scope: !7124)
!7124 = distinct !DILexicalBlock(scope: !7116, file: !351, line: 779, column: 5)
!7125 = !DILocation(line: 780, column: 10, scope: !7124)
!7126 = !DILocation(line: 781, column: 7, scope: !7124)
!7127 = !DILocation(line: 783, column: 1, scope: !7107)
!7128 = distinct !DISubprogram(name: "ei_next", scope: !351, file: !351, line: 736, type: !7129, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7129 = !DISubroutineType(types: !7130)
!7130 = !{null, !7131}
!7131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6095, size: 64)
!7132 = !DILocalVariable(name: "i", arg: 1, scope: !7128, file: !351, line: 736, type: !7131)
!7133 = !DILocation(line: 736, column: 25, scope: !7128)
!7134 = !DILocation(line: 738, column: 3, scope: !7128)
!7135 = !DILocation(line: 739, column: 3, scope: !7128)
!7136 = !DILocation(line: 739, column: 6, scope: !7128)
!7137 = !DILocation(line: 739, column: 11, scope: !7128)
!7138 = !DILocation(line: 740, column: 1, scope: !7128)
!7139 = distinct !DISubprogram(name: "ei_end_p", scope: !351, file: !351, line: 721, type: !7140, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7140 = !DISubroutineType(types: !7141)
!7141 = !{!1130, !6095}
!7142 = !DILocalVariable(name: "i", arg: 1, scope: !7139, file: !351, line: 721, type: !6095)
!7143 = !DILocation(line: 721, column: 25, scope: !7139)
!7144 = !DILocation(line: 723, column: 13, scope: !7139)
!7145 = !DILocation(line: 723, column: 22, scope: !7139)
!7146 = !DILocation(line: 723, column: 19, scope: !7139)
!7147 = !DILocation(line: 723, column: 10, scope: !7139)
!7148 = !DILocation(line: 723, column: 3, scope: !7139)
!7149 = distinct !DISubprogram(name: "ei_edge", scope: !351, file: !351, line: 752, type: !7150, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7150 = !DISubroutineType(types: !7151)
!7151 = !{!1320, !6095}
!7152 = !DILocalVariable(name: "i", arg: 1, scope: !7149, file: !351, line: 752, type: !6095)
!7153 = !DILocation(line: 752, column: 24, scope: !7149)
!7154 = !DILocation(line: 754, column: 10, scope: !7149)
!7155 = !DILocation(line: 754, column: 3, scope: !7149)
!7156 = distinct !DISubprogram(name: "ei_container", scope: !351, file: !351, line: 685, type: !7157, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7157 = !DISubroutineType(types: !7158)
!7158 = !{!1308, !6095}
!7159 = !DILocalVariable(name: "i", arg: 1, scope: !7156, file: !351, line: 685, type: !6095)
!7160 = !DILocation(line: 685, column: 29, scope: !7156)
!7161 = !DILocation(line: 687, column: 3, scope: !7156)
!7162 = !DILocation(line: 688, column: 13, scope: !7156)
!7163 = !DILocation(line: 688, column: 10, scope: !7156)
!7164 = !DILocation(line: 688, column: 3, scope: !7156)
!7165 = distinct !DISubprogram(name: "lto_tree_ref_encoder_size", scope: !6, file: !6, line: 986, type: !7166, scopeLine: 987, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7166 = !DISubroutineType(types: !7167)
!7167 = !{!7, !5701}
!7168 = !DILocalVariable(name: "encoder", arg: 1, scope: !7165, file: !6, line: 986, type: !5701)
!7169 = !DILocation(line: 986, column: 57, scope: !7165)
!7170 = !DILocation(line: 988, column: 10, scope: !7165)
!7171 = !DILocation(line: 988, column: 3, scope: !7165)
!7172 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !149, file: !149, line: 184, type: !7173, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7173 = !DISubroutineType(types: !7174)
!7174 = !{!1375, !7175, !1012}
!7175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1000, size: 64)
!7176 = !DILocalVariable(name: "vec_", arg: 1, scope: !7172, file: !149, line: 184, type: !7175)
!7177 = !DILocation(line: 184, column: 1, scope: !7172)
!7178 = !DILocalVariable(name: "obj_", arg: 2, scope: !7172, file: !149, line: 184, type: !1012)
!7179 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !149, file: !149, line: 184, type: !7180, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7180 = !DISubroutineType(types: !7181)
!7181 = !{!962, !7175, !962}
!7182 = !DILocalVariable(name: "vec_", arg: 1, scope: !7179, file: !149, line: 184, type: !7175)
!7183 = !DILocation(line: 184, column: 1, scope: !7179)
!7184 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7179, file: !149, line: 184, type: !962)
!7185 = !DILocalVariable(name: "extend", scope: !7179, file: !149, line: 184, type: !962)
!7186 = !DILocation(line: 184, column: 1, scope: !7187)
!7187 = distinct !DILexicalBlock(scope: !7179, file: !149, line: 184, column: 1)
!7188 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !149, file: !149, line: 182, type: !7189, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7189 = !DISubroutineType(types: !7190)
!7190 = !{!1375, !7191, !1012}
!7191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1005, size: 64)
!7192 = !DILocalVariable(name: "vec_", arg: 1, scope: !7188, file: !149, line: 182, type: !7191)
!7193 = !DILocation(line: 182, column: 1, scope: !7188)
!7194 = !DILocalVariable(name: "obj_", arg: 2, scope: !7188, file: !149, line: 182, type: !1012)
!7195 = !DILocalVariable(name: "slot_", scope: !7188, file: !149, line: 182, type: !1375)
!7196 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !149, file: !149, line: 182, type: !7197, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7197 = !DISubroutineType(types: !7198)
!7198 = !{!962, !7191, !962}
!7199 = !DILocalVariable(name: "vec_", arg: 1, scope: !7196, file: !149, line: 182, type: !7191)
!7200 = !DILocation(line: 182, column: 1, scope: !7196)
!7201 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7196, file: !149, line: 182, type: !962)
!7202 = distinct !DISubprogram(name: "output_unreferenced_globals", scope: !3, file: !3, line: 1955, type: !3289, scopeLine: 1956, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7203 = !DILocalVariable(name: "set", arg: 1, scope: !7202, file: !3, line: 1955, type: !3291)
!7204 = !DILocation(line: 1955, column: 46, scope: !7202)
!7205 = !DILocalVariable(name: "ob", scope: !7202, file: !3, line: 1957, type: !932)
!7206 = !DILocation(line: 1957, column: 24, scope: !7202)
!7207 = !DILocalVariable(name: "p", scope: !7202, file: !3, line: 1958, type: !7208)
!7208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7209, size: 64)
!7209 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_pair", file: !149, line: 194, baseType: !7210)
!7210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alias_pair", file: !149, line: 190, size: 128, elements: !7211)
!7211 = !{!7212, !7213}
!7212 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !7210, file: !149, line: 192, baseType: !1012, size: 64)
!7213 = !DIDerivedType(tag: DW_TAG_member, name: "target", scope: !7210, file: !149, line: 193, baseType: !1012, size: 64, offset: 64)
!7214 = !DILocation(line: 1958, column: 15, scope: !7202)
!7215 = !DILocalVariable(name: "i", scope: !7202, file: !3, line: 1959, type: !7)
!7216 = !DILocation(line: 1959, column: 12, scope: !7202)
!7217 = !DILocalVariable(name: "vnode", scope: !7202, file: !3, line: 1960, type: !2494)
!7218 = !DILocation(line: 1960, column: 24, scope: !7202)
!7219 = !DILocation(line: 1962, column: 8, scope: !7202)
!7220 = !DILocation(line: 1962, column: 6, scope: !7202)
!7221 = !DILocation(line: 1963, column: 3, scope: !7202)
!7222 = !DILocation(line: 1963, column: 7, scope: !7202)
!7223 = !DILocation(line: 1963, column: 19, scope: !7202)
!7224 = !DILocation(line: 1965, column: 20, scope: !7202)
!7225 = !DILocation(line: 1965, column: 3, scope: !7202)
!7226 = !DILocation(line: 1968, column: 24, scope: !7202)
!7227 = !DILocation(line: 1968, column: 28, scope: !7202)
!7228 = !DILocation(line: 1968, column: 3, scope: !7202)
!7229 = !DILocation(line: 1975, column: 3, scope: !7230)
!7230 = distinct !DILexicalBlock(scope: !7202, file: !3, line: 1975, column: 3)
!7231 = !DILocation(line: 1975, column: 3, scope: !7232)
!7232 = distinct !DILexicalBlock(scope: !7230, file: !3, line: 1975, column: 3)
!7233 = !DILocalVariable(name: "var", scope: !7234, file: !3, line: 1977, type: !1012)
!7234 = distinct !DILexicalBlock(scope: !7232, file: !3, line: 1976, column: 5)
!7235 = !DILocation(line: 1977, column: 12, scope: !7234)
!7236 = !DILocation(line: 1977, column: 18, scope: !7234)
!7237 = !DILocation(line: 1977, column: 25, scope: !7234)
!7238 = !DILocation(line: 1979, column: 11, scope: !7239)
!7239 = distinct !DILexicalBlock(scope: !7234, file: !3, line: 1979, column: 11)
!7240 = !DILocation(line: 1979, column: 27, scope: !7239)
!7241 = !DILocation(line: 1979, column: 11, scope: !7234)
!7242 = !DILocalVariable(name: "alias", scope: !7243, file: !3, line: 1981, type: !2494)
!7243 = distinct !DILexicalBlock(scope: !7239, file: !3, line: 1980, column: 9)
!7244 = !DILocation(line: 1981, column: 25, scope: !7243)
!7245 = !DILocation(line: 1985, column: 28, scope: !7243)
!7246 = !DILocation(line: 1985, column: 32, scope: !7243)
!7247 = !DILocation(line: 1985, column: 11, scope: !7243)
!7248 = !DILocation(line: 1988, column: 15, scope: !7249)
!7249 = distinct !DILexicalBlock(scope: !7243, file: !3, line: 1988, column: 15)
!7250 = !DILocation(line: 1988, column: 15, scope: !7243)
!7251 = !DILocation(line: 1989, column: 34, scope: !7249)
!7252 = !DILocation(line: 1989, column: 38, scope: !7249)
!7253 = !DILocation(line: 1989, column: 13, scope: !7249)
!7254 = !DILocation(line: 1992, column: 17, scope: !7255)
!7255 = distinct !DILexicalBlock(scope: !7243, file: !3, line: 1992, column: 4)
!7256 = !DILocation(line: 1992, column: 24, scope: !7255)
!7257 = !DILocation(line: 1992, column: 15, scope: !7255)
!7258 = !DILocation(line: 1992, column: 9, scope: !7255)
!7259 = !DILocation(line: 1992, column: 36, scope: !7260)
!7260 = distinct !DILexicalBlock(scope: !7255, file: !3, line: 1992, column: 4)
!7261 = !DILocation(line: 1992, column: 4, scope: !7255)
!7262 = !DILocation(line: 1994, column: 25, scope: !7263)
!7263 = distinct !DILexicalBlock(scope: !7260, file: !3, line: 1993, column: 6)
!7264 = !DILocation(line: 1994, column: 29, scope: !7263)
!7265 = !DILocation(line: 1994, column: 36, scope: !7263)
!7266 = !DILocation(line: 1994, column: 8, scope: !7263)
!7267 = !DILocation(line: 1995, column: 29, scope: !7263)
!7268 = !DILocation(line: 1995, column: 8, scope: !7263)
!7269 = !DILocation(line: 1996, column: 35, scope: !7263)
!7270 = !DILocation(line: 1996, column: 39, scope: !7263)
!7271 = !DILocation(line: 1996, column: 51, scope: !7263)
!7272 = !DILocation(line: 1996, column: 55, scope: !7263)
!7273 = !DILocation(line: 1997, column: 7, scope: !7263)
!7274 = !DILocation(line: 1997, column: 14, scope: !7263)
!7275 = !DILocation(line: 1996, column: 8, scope: !7263)
!7276 = !DILocation(line: 1998, column: 35, scope: !7263)
!7277 = !DILocation(line: 1998, column: 39, scope: !7263)
!7278 = !DILocation(line: 1998, column: 51, scope: !7263)
!7279 = !DILocation(line: 1998, column: 55, scope: !7263)
!7280 = !DILocation(line: 1999, column: 7, scope: !7263)
!7281 = !DILocation(line: 1998, column: 8, scope: !7263)
!7282 = !DILocation(line: 2000, column: 6, scope: !7263)
!7283 = !DILocation(line: 1992, column: 51, scope: !7260)
!7284 = !DILocation(line: 1992, column: 58, scope: !7260)
!7285 = !DILocation(line: 1992, column: 49, scope: !7260)
!7286 = !DILocation(line: 1992, column: 4, scope: !7260)
!7287 = distinct !{!7287, !7261, !7288}
!7288 = !DILocation(line: 2000, column: 6, scope: !7255)
!7289 = !DILocation(line: 2001, column: 9, scope: !7243)
!7290 = !DILocation(line: 2002, column: 5, scope: !7234)
!7291 = distinct !{!7291, !7229, !7292}
!7292 = !DILocation(line: 2002, column: 5, scope: !7230)
!7293 = !DILocation(line: 2004, column: 16, scope: !7202)
!7294 = !DILocation(line: 2004, column: 3, scope: !7202)
!7295 = !DILocation(line: 2007, column: 10, scope: !7296)
!7296 = distinct !DILexicalBlock(scope: !7202, file: !3, line: 2007, column: 3)
!7297 = !DILocation(line: 2007, column: 8, scope: !7296)
!7298 = !DILocation(line: 2007, column: 15, scope: !7299)
!7299 = distinct !DILexicalBlock(scope: !7296, file: !3, line: 2007, column: 3)
!7300 = !DILocation(line: 2007, column: 3, scope: !7296)
!7301 = !DILocation(line: 2009, column: 32, scope: !7302)
!7302 = distinct !DILexicalBlock(scope: !7303, file: !3, line: 2009, column: 11)
!7303 = distinct !DILexicalBlock(scope: !7299, file: !3, line: 2008, column: 5)
!7304 = !DILocation(line: 2009, column: 35, scope: !7302)
!7305 = !DILocation(line: 2009, column: 11, scope: !7302)
!7306 = !DILocation(line: 2009, column: 11, scope: !7303)
!7307 = !DILocation(line: 2011, column: 25, scope: !7308)
!7308 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 2010, column: 2)
!7309 = !DILocation(line: 2011, column: 29, scope: !7308)
!7310 = !DILocation(line: 2011, column: 32, scope: !7308)
!7311 = !DILocation(line: 2011, column: 4, scope: !7308)
!7312 = !DILocation(line: 2012, column: 25, scope: !7308)
!7313 = !DILocation(line: 2012, column: 29, scope: !7308)
!7314 = !DILocation(line: 2012, column: 32, scope: !7308)
!7315 = !DILocation(line: 2012, column: 4, scope: !7308)
!7316 = !DILocation(line: 2013, column: 2, scope: !7308)
!7317 = !DILocation(line: 2014, column: 5, scope: !7303)
!7318 = !DILocation(line: 2007, column: 61, scope: !7299)
!7319 = !DILocation(line: 2007, column: 3, scope: !7299)
!7320 = distinct !{!7320, !7300, !7321}
!7321 = !DILocation(line: 2014, column: 5, scope: !7296)
!7322 = !DILocation(line: 2016, column: 16, scope: !7202)
!7323 = !DILocation(line: 2016, column: 3, scope: !7202)
!7324 = !DILocation(line: 2018, column: 16, scope: !7202)
!7325 = !DILocation(line: 2018, column: 3, scope: !7202)
!7326 = !DILocation(line: 2019, column: 25, scope: !7202)
!7327 = !DILocation(line: 2019, column: 3, scope: !7202)
!7328 = !DILocation(line: 2020, column: 1, scope: !7202)
!7329 = distinct !DISubprogram(name: "VEC_lto_out_decl_state_ptr_base_length", scope: !6, file: !6, line: 533, type: !7330, scopeLine: 533, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7330 = !DISubroutineType(types: !7331)
!7331 = !{!7, !7332}
!7332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7333, size: 64)
!7333 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7334)
!7334 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lto_out_decl_state_ptr_base", file: !6, line: 533, baseType: !7335)
!7335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lto_out_decl_state_ptr_base", file: !6, line: 533, size: 128, elements: !7336)
!7336 = !{!7337, !7338, !7339}
!7337 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !7335, file: !6, line: 533, baseType: !7, size: 32)
!7338 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !7335, file: !6, line: 533, baseType: !7, size: 32, offset: 32)
!7339 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !7335, file: !6, line: 533, baseType: !7340, size: 64, offset: 64)
!7340 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7341, size: 64, elements: !1111)
!7341 = !DIDerivedType(tag: DW_TAG_typedef, name: "lto_out_decl_state_ptr", file: !6, line: 531, baseType: !937)
!7342 = !DILocalVariable(name: "vec_", arg: 1, scope: !7329, file: !6, line: 533, type: !7332)
!7343 = !DILocation(line: 533, column: 1, scope: !7329)
!7344 = distinct !DISubprogram(name: "lto_output_decl_state_streams", scope: !3, file: !3, line: 2230, type: !7345, scopeLine: 2232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7345 = !DISubroutineType(types: !7346)
!7346 = !{null, !932, !937}
!7347 = !DILocalVariable(name: "ob", arg: 1, scope: !7344, file: !3, line: 2230, type: !932)
!7348 = !DILocation(line: 2230, column: 53, scope: !7344)
!7349 = !DILocalVariable(name: "state", arg: 2, scope: !7344, file: !3, line: 2231, type: !937)
!7350 = !DILocation(line: 2231, column: 38, scope: !7344)
!7351 = !DILocalVariable(name: "i", scope: !7344, file: !3, line: 2233, type: !962)
!7352 = !DILocation(line: 2233, column: 7, scope: !7344)
!7353 = !DILocation(line: 2235, column: 10, scope: !7354)
!7354 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 2235, column: 3)
!7355 = !DILocation(line: 2235, column: 8, scope: !7354)
!7356 = !DILocation(line: 2235, column: 16, scope: !7357)
!7357 = distinct !DILexicalBlock(scope: !7354, file: !3, line: 2235, column: 3)
!7358 = !DILocation(line: 2235, column: 18, scope: !7357)
!7359 = !DILocation(line: 2235, column: 3, scope: !7354)
!7360 = !DILocation(line: 2236, column: 26, scope: !7357)
!7361 = !DILocation(line: 2236, column: 31, scope: !7357)
!7362 = !DILocation(line: 2236, column: 38, scope: !7357)
!7363 = !DILocation(line: 2236, column: 46, scope: !7357)
!7364 = !DILocation(line: 2236, column: 5, scope: !7357)
!7365 = !DILocation(line: 2235, column: 41, scope: !7357)
!7366 = !DILocation(line: 2235, column: 3, scope: !7357)
!7367 = distinct !{!7367, !7359, !7368}
!7368 = !DILocation(line: 2236, column: 48, scope: !7354)
!7369 = !DILocation(line: 2237, column: 1, scope: !7344)
!7370 = distinct !DISubprogram(name: "VEC_lto_out_decl_state_ptr_base_index", scope: !6, file: !6, line: 533, type: !7371, scopeLine: 533, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7371 = !DISubroutineType(types: !7372)
!7372 = !{!7341, !7332, !7}
!7373 = !DILocalVariable(name: "vec_", arg: 1, scope: !7370, file: !6, line: 533, type: !7332)
!7374 = !DILocation(line: 533, column: 1, scope: !7370)
!7375 = !DILocalVariable(name: "ix_", arg: 2, scope: !7370, file: !6, line: 533, type: !7)
!7376 = !DILocation(line: 0, scope: !7370)
!7377 = distinct !DISubprogram(name: "lto_out_decl_state_written_size", scope: !3, file: !3, line: 2267, type: !7378, scopeLine: 2268, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7378 = !DISubroutineType(types: !7379)
!7379 = !{!972, !937}
!7380 = !DILocalVariable(name: "state", arg: 1, scope: !7377, file: !3, line: 2267, type: !937)
!7381 = !DILocation(line: 2267, column: 61, scope: !7377)
!7382 = !DILocalVariable(name: "i", scope: !7377, file: !3, line: 2269, type: !962)
!7383 = !DILocation(line: 2269, column: 7, scope: !7377)
!7384 = !DILocalVariable(name: "size", scope: !7377, file: !3, line: 2270, type: !972)
!7385 = !DILocation(line: 2270, column: 10, scope: !7377)
!7386 = !DILocation(line: 2272, column: 8, scope: !7377)
!7387 = !DILocation(line: 2273, column: 10, scope: !7388)
!7388 = distinct !DILexicalBlock(scope: !7377, file: !3, line: 2273, column: 3)
!7389 = !DILocation(line: 2273, column: 8, scope: !7388)
!7390 = !DILocation(line: 2273, column: 15, scope: !7391)
!7391 = distinct !DILexicalBlock(scope: !7388, file: !3, line: 2273, column: 3)
!7392 = !DILocation(line: 2273, column: 17, scope: !7391)
!7393 = !DILocation(line: 2273, column: 3, scope: !7388)
!7394 = !DILocation(line: 2275, column: 12, scope: !7395)
!7395 = distinct !DILexicalBlock(scope: !7391, file: !3, line: 2274, column: 5)
!7396 = !DILocation(line: 2276, column: 44, scope: !7395)
!7397 = !DILocation(line: 2276, column: 51, scope: !7395)
!7398 = !DILocation(line: 2276, column: 59, scope: !7395)
!7399 = !DILocation(line: 2276, column: 16, scope: !7395)
!7400 = !DILocation(line: 2277, column: 9, scope: !7395)
!7401 = !DILocation(line: 2276, column: 12, scope: !7395)
!7402 = !DILocation(line: 2278, column: 5, scope: !7395)
!7403 = !DILocation(line: 2273, column: 40, scope: !7391)
!7404 = !DILocation(line: 2273, column: 3, scope: !7391)
!7405 = distinct !{!7405, !7393, !7406}
!7406 = !DILocation(line: 2278, column: 5, scope: !7388)
!7407 = !DILocation(line: 2279, column: 10, scope: !7377)
!7408 = !DILocation(line: 2279, column: 3, scope: !7377)
!7409 = distinct !DISubprogram(name: "lto_output_decl_state_refs", scope: !3, file: !3, line: 2244, type: !7410, scopeLine: 2247, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7410 = !DISubroutineType(types: !7411)
!7411 = !{null, !932, !2615, !937}
!7412 = !DILocalVariable(name: "ob", arg: 1, scope: !7409, file: !3, line: 2244, type: !932)
!7413 = !DILocation(line: 2244, column: 50, scope: !7409)
!7414 = !DILocalVariable(name: "out_stream", arg: 2, scope: !7409, file: !3, line: 2245, type: !2615)
!7415 = !DILocation(line: 2245, column: 34, scope: !7409)
!7416 = !DILocalVariable(name: "state", arg: 3, scope: !7409, file: !3, line: 2246, type: !937)
!7417 = !DILocation(line: 2246, column: 35, scope: !7409)
!7418 = !DILocalVariable(name: "i", scope: !7409, file: !3, line: 2248, type: !7)
!7419 = !DILocation(line: 2248, column: 12, scope: !7409)
!7420 = !DILocalVariable(name: "ref", scope: !7409, file: !3, line: 2249, type: !3196)
!7421 = !DILocation(line: 2249, column: 11, scope: !7409)
!7422 = !DILocalVariable(name: "decl", scope: !7409, file: !3, line: 2250, type: !1012)
!7423 = !DILocation(line: 2250, column: 8, scope: !7409)
!7424 = !DILocation(line: 2254, column: 11, scope: !7409)
!7425 = !DILocation(line: 2254, column: 18, scope: !7409)
!7426 = !DILocation(line: 2254, column: 10, scope: !7409)
!7427 = !DILocation(line: 2254, column: 29, scope: !7409)
!7428 = !DILocation(line: 2254, column: 36, scope: !7409)
!7429 = !DILocation(line: 2254, column: 46, scope: !7409)
!7430 = !DILocation(line: 2254, column: 8, scope: !7409)
!7431 = !DILocation(line: 2255, column: 30, scope: !7409)
!7432 = !DILocation(line: 2255, column: 34, scope: !7409)
!7433 = !DILocation(line: 2255, column: 48, scope: !7409)
!7434 = !DILocation(line: 2255, column: 3, scope: !7409)
!7435 = !DILocation(line: 2256, column: 3, scope: !7409)
!7436 = !DILocation(line: 2257, column: 27, scope: !7409)
!7437 = !DILocation(line: 2257, column: 39, scope: !7409)
!7438 = !DILocation(line: 2257, column: 3, scope: !7409)
!7439 = !DILocation(line: 2259, column: 10, scope: !7440)
!7440 = distinct !DILexicalBlock(scope: !7409, file: !3, line: 2259, column: 3)
!7441 = !DILocation(line: 2259, column: 8, scope: !7440)
!7442 = !DILocation(line: 2259, column: 16, scope: !7443)
!7443 = distinct !DILexicalBlock(scope: !7440, file: !3, line: 2259, column: 3)
!7444 = !DILocation(line: 2259, column: 18, scope: !7443)
!7445 = !DILocation(line: 2259, column: 3, scope: !7440)
!7446 = !DILocation(line: 2260, column: 30, scope: !7443)
!7447 = !DILocation(line: 2260, column: 34, scope: !7443)
!7448 = !DILocation(line: 2260, column: 47, scope: !7443)
!7449 = !DILocation(line: 2260, column: 54, scope: !7443)
!7450 = !DILocation(line: 2260, column: 62, scope: !7443)
!7451 = !DILocation(line: 2260, column: 5, scope: !7443)
!7452 = !DILocation(line: 2259, column: 41, scope: !7443)
!7453 = !DILocation(line: 2259, column: 3, scope: !7443)
!7454 = distinct !{!7454, !7445, !7455}
!7455 = !DILocation(line: 2260, column: 64, scope: !7440)
!7456 = !DILocation(line: 2261, column: 1, scope: !7409)
!7457 = distinct !DISubprogram(name: "produce_symtab", scope: !3, file: !3, line: 2421, type: !7458, scopeLine: 2422, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7458 = !DISubroutineType(types: !7459)
!7459 = !{null, !2637}
!7460 = !DILocalVariable(name: "cache", arg: 1, scope: !7457, file: !3, line: 2421, type: !2637)
!7461 = !DILocation(line: 2421, column: 46, scope: !7457)
!7462 = !DILocalVariable(name: "section_name", scope: !7457, file: !3, line: 2423, type: !1279)
!7463 = !DILocation(line: 2423, column: 9, scope: !7457)
!7464 = !DILocation(line: 2423, column: 24, scope: !7457)
!7465 = !DILocalVariable(name: "seen", scope: !7457, file: !3, line: 2424, type: !1898)
!7466 = !DILocation(line: 2424, column: 10, scope: !7457)
!7467 = !DILocation(line: 2426, column: 22, scope: !7457)
!7468 = !DILocation(line: 2426, column: 3, scope: !7457)
!7469 = !DILocation(line: 2427, column: 9, scope: !7457)
!7470 = !DILocation(line: 2427, column: 3, scope: !7457)
!7471 = !DILocation(line: 2429, column: 10, scope: !7457)
!7472 = !DILocation(line: 2429, column: 8, scope: !7457)
!7473 = !DILocation(line: 2430, column: 51, scope: !7457)
!7474 = !DILocation(line: 2430, column: 58, scope: !7457)
!7475 = !DILocation(line: 2430, column: 3, scope: !7457)
!7476 = !DILocation(line: 2431, column: 52, scope: !7457)
!7477 = !DILocation(line: 2431, column: 59, scope: !7457)
!7478 = !DILocation(line: 2431, column: 3, scope: !7457)
!7479 = !DILocation(line: 2432, column: 20, scope: !7457)
!7480 = !DILocation(line: 2432, column: 3, scope: !7457)
!7481 = !DILocation(line: 2434, column: 3, scope: !7457)
!7482 = !DILocation(line: 2435, column: 1, scope: !7457)
!7483 = distinct !DISubprogram(name: "VEC_lto_out_decl_state_ptr_heap_free", scope: !6, file: !6, line: 534, type: !7484, scopeLine: 534, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7484 = !DISubroutineType(types: !7485)
!7485 = !{null, !7486}
!7486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7487, size: 64)
!7487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7488, size: 64)
!7488 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lto_out_decl_state_ptr_heap", file: !6, line: 534, baseType: !7489)
!7489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lto_out_decl_state_ptr_heap", file: !6, line: 534, size: 128, elements: !7490)
!7490 = !{!7491}
!7491 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !7489, file: !6, line: 534, baseType: !7334, size: 128)
!7492 = !DILocalVariable(name: "vec_", arg: 1, scope: !7483, file: !6, line: 534, type: !7486)
!7493 = !DILocation(line: 534, column: 1, scope: !7483)
!7494 = !DILocation(line: 534, column: 1, scope: !7495)
!7495 = distinct !DILexicalBlock(scope: !7483, file: !6, line: 534, column: 1)
!7496 = distinct !DISubprogram(name: "VEC_alias_pair_base_iterate", scope: !149, file: !149, line: 197, type: !7497, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7497 = !DISubroutineType(types: !7498)
!7498 = !{!962, !7499, !7, !7507}
!7499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7500, size: 64)
!7500 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_alias_pair_base", file: !149, line: 197, baseType: !7501)
!7501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_alias_pair_base", file: !149, line: 197, size: 192, elements: !7502)
!7502 = !{!7503, !7504, !7505}
!7503 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !7501, file: !149, line: 197, baseType: !7, size: 32)
!7504 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !7501, file: !149, line: 197, baseType: !7, size: 32, offset: 32)
!7505 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !7501, file: !149, line: 197, baseType: !7506, size: 128, offset: 64)
!7506 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7209, size: 128, elements: !1111)
!7507 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7208, size: 64)
!7508 = !DILocalVariable(name: "vec_", arg: 1, scope: !7496, file: !149, line: 197, type: !7499)
!7509 = !DILocation(line: 197, column: 1, scope: !7496)
!7510 = !DILocalVariable(name: "ix_", arg: 2, scope: !7496, file: !149, line: 197, type: !7)
!7511 = !DILocalVariable(name: "ptr", arg: 3, scope: !7496, file: !149, line: 197, type: !7507)
!7512 = !DILocation(line: 197, column: 1, scope: !7513)
!7513 = distinct !DILexicalBlock(scope: !7496, file: !149, line: 197, column: 1)
!7514 = !DILocation(line: 197, column: 1, scope: !7515)
!7515 = distinct !DILexicalBlock(scope: !7513, file: !149, line: 197, column: 1)
!7516 = !DILocation(line: 197, column: 1, scope: !7517)
!7517 = distinct !DILexicalBlock(scope: !7513, file: !149, line: 197, column: 1)
!7518 = distinct !DISubprogram(name: "output_alias_pair_p", scope: !3, file: !3, line: 1932, type: !7519, scopeLine: 1933, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7519 = !DISubroutineType(types: !7520)
!7520 = !{!1130, !7208, !3291}
!7521 = !DILocalVariable(name: "p", arg: 1, scope: !7518, file: !3, line: 1932, type: !7208)
!7522 = !DILocation(line: 1932, column: 34, scope: !7518)
!7523 = !DILocalVariable(name: "set", arg: 2, scope: !7518, file: !3, line: 1932, type: !3291)
!7524 = !DILocation(line: 1932, column: 53, scope: !7518)
!7525 = !DILocalVariable(name: "csi", scope: !7518, file: !3, line: 1934, type: !3299)
!7526 = !DILocation(line: 1934, column: 28, scope: !7518)
!7527 = !DILocalVariable(name: "target_node", scope: !7518, file: !3, line: 1935, type: !2373)
!7528 = !DILocation(line: 1935, column: 23, scope: !7518)
!7529 = !DILocation(line: 1940, column: 7, scope: !7530)
!7530 = distinct !DILexicalBlock(scope: !7518, file: !3, line: 1940, column: 7)
!7531 = !DILocation(line: 1940, column: 27, scope: !7530)
!7532 = !DILocation(line: 1940, column: 7, scope: !7518)
!7533 = !DILocation(line: 1941, column: 5, scope: !7530)
!7534 = !DILocation(line: 1944, column: 3, scope: !7518)
!7535 = !DILocation(line: 1945, column: 38, scope: !7518)
!7536 = !DILocation(line: 1945, column: 41, scope: !7518)
!7537 = !DILocation(line: 1945, column: 17, scope: !7518)
!7538 = !DILocation(line: 1945, column: 15, scope: !7518)
!7539 = !DILocation(line: 1946, column: 31, scope: !7518)
!7540 = !DILocation(line: 1946, column: 36, scope: !7518)
!7541 = !DILocation(line: 1946, column: 9, scope: !7518)
!7542 = !DILocation(line: 1947, column: 12, scope: !7518)
!7543 = !DILocation(line: 1947, column: 11, scope: !7518)
!7544 = !DILocation(line: 1947, column: 10, scope: !7518)
!7545 = !DILocation(line: 1947, column: 3, scope: !7518)
!7546 = !DILocation(line: 1948, column: 1, scope: !7518)
!7547 = distinct !DISubprogram(name: "write_global_stream", scope: !3, file: !3, line: 2167, type: !7548, scopeLine: 2169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7548 = !DISubroutineType(types: !7549)
!7549 = !{null, !932, !5701}
!7550 = !DILocalVariable(name: "ob", arg: 1, scope: !7547, file: !3, line: 2167, type: !932)
!7551 = !DILocation(line: 2167, column: 43, scope: !7547)
!7552 = !DILocalVariable(name: "encoder", arg: 2, scope: !7547, file: !3, line: 2168, type: !5701)
!7553 = !DILocation(line: 2168, column: 37, scope: !7547)
!7554 = !DILocalVariable(name: "t", scope: !7547, file: !3, line: 2170, type: !1012)
!7555 = !DILocation(line: 2170, column: 8, scope: !7547)
!7556 = !DILocalVariable(name: "index", scope: !7547, file: !3, line: 2171, type: !972)
!7557 = !DILocation(line: 2171, column: 10, scope: !7547)
!7558 = !DILocalVariable(name: "size", scope: !7547, file: !3, line: 2172, type: !7559)
!7559 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !972)
!7560 = !DILocation(line: 2172, column: 16, scope: !7547)
!7561 = !DILocation(line: 2172, column: 50, scope: !7547)
!7562 = !DILocation(line: 2172, column: 23, scope: !7547)
!7563 = !DILocation(line: 2174, column: 14, scope: !7564)
!7564 = distinct !DILexicalBlock(scope: !7547, file: !3, line: 2174, column: 3)
!7565 = !DILocation(line: 2174, column: 8, scope: !7564)
!7566 = !DILocation(line: 2174, column: 19, scope: !7567)
!7567 = distinct !DILexicalBlock(scope: !7564, file: !3, line: 2174, column: 3)
!7568 = !DILocation(line: 2174, column: 27, scope: !7567)
!7569 = !DILocation(line: 2174, column: 25, scope: !7567)
!7570 = !DILocation(line: 2174, column: 3, scope: !7564)
!7571 = !DILocation(line: 2176, column: 42, scope: !7572)
!7572 = distinct !DILexicalBlock(scope: !7567, file: !3, line: 2175, column: 5)
!7573 = !DILocation(line: 2176, column: 51, scope: !7572)
!7574 = !DILocation(line: 2176, column: 11, scope: !7572)
!7575 = !DILocation(line: 2176, column: 9, scope: !7572)
!7576 = !DILocation(line: 2177, column: 39, scope: !7577)
!7577 = distinct !DILexicalBlock(scope: !7572, file: !3, line: 2177, column: 11)
!7578 = !DILocation(line: 2177, column: 43, scope: !7577)
!7579 = !DILocation(line: 2177, column: 57, scope: !7577)
!7580 = !DILocation(line: 2177, column: 12, scope: !7577)
!7581 = !DILocation(line: 2177, column: 11, scope: !7572)
!7582 = !DILocation(line: 2178, column: 19, scope: !7577)
!7583 = !DILocation(line: 2178, column: 23, scope: !7577)
!7584 = !DILocation(line: 2178, column: 2, scope: !7577)
!7585 = !DILocation(line: 2180, column: 11, scope: !7586)
!7586 = distinct !DILexicalBlock(scope: !7572, file: !3, line: 2180, column: 11)
!7587 = !DILocation(line: 2180, column: 11, scope: !7572)
!7588 = !DILocation(line: 2188, column: 8, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7590, file: !3, line: 2188, column: 8)
!7590 = distinct !DILexicalBlock(scope: !7586, file: !3, line: 2181, column: 2)
!7591 = !DILocation(line: 2188, column: 22, scope: !7589)
!7592 = !DILocation(line: 2189, column: 8, scope: !7589)
!7593 = !DILocation(line: 2189, column: 11, scope: !7589)
!7594 = !DILocation(line: 2190, column: 8, scope: !7589)
!7595 = !DILocation(line: 2190, column: 12, scope: !7589)
!7596 = !DILocation(line: 2188, column: 8, scope: !7590)
!7597 = !DILocation(line: 2191, column: 6, scope: !7589)
!7598 = !DILocation(line: 2191, column: 27, scope: !7589)
!7599 = !DILocation(line: 2192, column: 2, scope: !7590)
!7600 = !DILocation(line: 2193, column: 5, scope: !7572)
!7601 = !DILocation(line: 2174, column: 38, scope: !7567)
!7602 = !DILocation(line: 2174, column: 3, scope: !7567)
!7603 = distinct !{!7603, !7570, !7604}
!7604 = !DILocation(line: 2193, column: 5, scope: !7564)
!7605 = !DILocation(line: 2194, column: 1, scope: !7547)
!7606 = distinct !DISubprogram(name: "lto_tree_ref_encoder_get_tree", scope: !6, file: !6, line: 993, type: !7607, scopeLine: 995, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7607 = !DISubroutineType(types: !7608)
!7608 = !{!1012, !5701, !7}
!7609 = !DILocalVariable(name: "encoder", arg: 1, scope: !7606, file: !6, line: 993, type: !5701)
!7610 = !DILocation(line: 993, column: 61, scope: !7606)
!7611 = !DILocalVariable(name: "idx", arg: 2, scope: !7606, file: !6, line: 994, type: !7)
!7612 = !DILocation(line: 994, column: 24, scope: !7606)
!7613 = !DILocation(line: 996, column: 10, scope: !7606)
!7614 = !DILocation(line: 996, column: 3, scope: !7606)
!7615 = distinct !DISubprogram(name: "write_global_references", scope: !3, file: !3, line: 2203, type: !7616, scopeLine: 2206, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7616 = !DISubroutineType(types: !7617)
!7617 = !{null, !932, !2615, !5701}
!7618 = !DILocalVariable(name: "ob", arg: 1, scope: !7615, file: !3, line: 2203, type: !932)
!7619 = !DILocation(line: 2203, column: 47, scope: !7615)
!7620 = !DILocalVariable(name: "ref_stream", arg: 2, scope: !7615, file: !3, line: 2204, type: !2615)
!7621 = !DILocation(line: 2204, column: 31, scope: !7615)
!7622 = !DILocalVariable(name: "encoder", arg: 3, scope: !7615, file: !3, line: 2205, type: !5701)
!7623 = !DILocation(line: 2205, column: 35, scope: !7615)
!7624 = !DILocalVariable(name: "t", scope: !7615, file: !3, line: 2207, type: !1012)
!7625 = !DILocation(line: 2207, column: 8, scope: !7615)
!7626 = !DILocalVariable(name: "index", scope: !7615, file: !3, line: 2208, type: !3196)
!7627 = !DILocation(line: 2208, column: 11, scope: !7615)
!7628 = !DILocalVariable(name: "size", scope: !7615, file: !3, line: 2209, type: !7629)
!7629 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3196)
!7630 = !DILocation(line: 2209, column: 17, scope: !7615)
!7631 = !DILocation(line: 2209, column: 51, scope: !7615)
!7632 = !DILocation(line: 2209, column: 24, scope: !7615)
!7633 = !DILocation(line: 2212, column: 27, scope: !7615)
!7634 = !DILocation(line: 2212, column: 39, scope: !7615)
!7635 = !DILocation(line: 2212, column: 3, scope: !7615)
!7636 = !DILocation(line: 2214, column: 14, scope: !7637)
!7637 = distinct !DILexicalBlock(scope: !7615, file: !3, line: 2214, column: 3)
!7638 = !DILocation(line: 2214, column: 8, scope: !7637)
!7639 = !DILocation(line: 2214, column: 19, scope: !7640)
!7640 = distinct !DILexicalBlock(scope: !7637, file: !3, line: 2214, column: 3)
!7641 = !DILocation(line: 2214, column: 27, scope: !7640)
!7642 = !DILocation(line: 2214, column: 25, scope: !7640)
!7643 = !DILocation(line: 2214, column: 3, scope: !7637)
!7644 = !DILocalVariable(name: "slot_num", scope: !7645, file: !3, line: 2216, type: !3196)
!7645 = distinct !DILexicalBlock(scope: !7640, file: !3, line: 2215, column: 5)
!7646 = !DILocation(line: 2216, column: 15, scope: !7645)
!7647 = !DILocation(line: 2218, column: 42, scope: !7645)
!7648 = !DILocation(line: 2218, column: 51, scope: !7645)
!7649 = !DILocation(line: 2218, column: 11, scope: !7645)
!7650 = !DILocation(line: 2218, column: 9, scope: !7645)
!7651 = !DILocation(line: 2219, column: 34, scope: !7645)
!7652 = !DILocation(line: 2219, column: 38, scope: !7645)
!7653 = !DILocation(line: 2219, column: 52, scope: !7645)
!7654 = !DILocation(line: 2219, column: 7, scope: !7645)
!7655 = !DILocation(line: 2220, column: 7, scope: !7645)
!7656 = !DILocation(line: 2221, column: 31, scope: !7645)
!7657 = !DILocation(line: 2221, column: 43, scope: !7645)
!7658 = !DILocation(line: 2221, column: 7, scope: !7645)
!7659 = !DILocation(line: 2222, column: 5, scope: !7645)
!7660 = !DILocation(line: 2214, column: 38, scope: !7640)
!7661 = !DILocation(line: 2214, column: 3, scope: !7640)
!7662 = distinct !{!7662, !7643, !7663}
!7663 = !DILocation(line: 2222, column: 5, scope: !7637)
!7664 = !DILocation(line: 2223, column: 1, scope: !7615)
!7665 = distinct !DISubprogram(name: "write_symbols_of_kind", scope: !3, file: !3, line: 2393, type: !7666, scopeLine: 2395, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7666 = !DISubroutineType(types: !7667)
!7667 = !{null, !7668, !2637, !1898}
!7668 = !DIDerivedType(tag: DW_TAG_typedef, name: "lto_decl_stream_e_t", file: !6, line: 282, baseType: !773)
!7669 = !DILocalVariable(name: "kind", arg: 1, scope: !7665, file: !3, line: 2393, type: !7668)
!7670 = !DILocation(line: 2393, column: 44, scope: !7665)
!7671 = !DILocalVariable(name: "cache", arg: 2, scope: !7665, file: !3, line: 2394, type: !2637)
!7672 = !DILocation(line: 2394, column: 39, scope: !7665)
!7673 = !DILocalVariable(name: "seen", arg: 3, scope: !7665, file: !3, line: 2394, type: !1898)
!7674 = !DILocation(line: 2394, column: 53, scope: !7665)
!7675 = !DILocalVariable(name: "out_state", scope: !7665, file: !3, line: 2396, type: !937)
!7676 = !DILocation(line: 2396, column: 30, scope: !7665)
!7677 = !DILocalVariable(name: "stream", scope: !7665, file: !3, line: 2397, type: !2616)
!7678 = !DILocation(line: 2397, column: 28, scope: !7665)
!7679 = !DILocalVariable(name: "num_fns", scope: !7665, file: !3, line: 2398, type: !7)
!7680 = !DILocation(line: 2398, column: 12, scope: !7665)
!7681 = !DILocation(line: 2399, column: 5, scope: !7665)
!7682 = !DILocalVariable(name: "idx", scope: !7665, file: !3, line: 2400, type: !7)
!7683 = !DILocation(line: 2400, column: 12, scope: !7665)
!7684 = !DILocation(line: 2402, column: 3, scope: !7665)
!7685 = !DILocation(line: 2403, column: 15, scope: !7665)
!7686 = !DILocation(line: 2403, column: 13, scope: !7665)
!7687 = !DILocation(line: 2404, column: 21, scope: !7665)
!7688 = !DILocation(line: 2404, column: 37, scope: !7665)
!7689 = !DILocation(line: 2404, column: 48, scope: !7665)
!7690 = !DILocation(line: 2404, column: 56, scope: !7665)
!7691 = !DILocation(line: 2404, column: 62, scope: !7665)
!7692 = !DILocation(line: 2404, column: 69, scope: !7665)
!7693 = !DILocation(line: 2404, column: 3, scope: !7665)
!7694 = !DILocation(line: 2406, column: 12, scope: !7695)
!7695 = distinct !DILexicalBlock(scope: !7665, file: !3, line: 2406, column: 3)
!7696 = !DILocation(line: 2406, column: 8, scope: !7695)
!7697 = !DILocation(line: 2406, column: 17, scope: !7698)
!7698 = distinct !DILexicalBlock(scope: !7695, file: !3, line: 2406, column: 3)
!7699 = !DILocation(line: 2406, column: 23, scope: !7698)
!7700 = !DILocation(line: 2406, column: 21, scope: !7698)
!7701 = !DILocation(line: 2406, column: 3, scope: !7695)
!7702 = !DILocation(line: 2409, column: 2, scope: !7703)
!7703 = distinct !DILexicalBlock(scope: !7698, file: !3, line: 2407, column: 5)
!7704 = !DILocation(line: 2408, column: 17, scope: !7703)
!7705 = !DILocation(line: 2410, column: 25, scope: !7703)
!7706 = !DILocation(line: 2410, column: 41, scope: !7703)
!7707 = !DILocation(line: 2410, column: 52, scope: !7703)
!7708 = !DILocation(line: 2410, column: 60, scope: !7703)
!7709 = !DILocation(line: 2410, column: 66, scope: !7703)
!7710 = !DILocation(line: 2410, column: 73, scope: !7703)
!7711 = !DILocation(line: 2410, column: 7, scope: !7703)
!7712 = !DILocation(line: 2411, column: 5, scope: !7703)
!7713 = !DILocation(line: 2406, column: 35, scope: !7698)
!7714 = !DILocation(line: 2406, column: 3, scope: !7698)
!7715 = distinct !{!7715, !7701, !7716}
!7716 = !DILocation(line: 2411, column: 5, scope: !7695)
!7717 = !DILocation(line: 2413, column: 3, scope: !7665)
!7718 = !DILocation(line: 2414, column: 1, scope: !7665)
!7719 = distinct !DISubprogram(name: "write_symbol_vec", scope: !3, file: !3, line: 2289, type: !7720, scopeLine: 2292, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2682)
!7720 = !DISubroutineType(types: !7721)
!7721 = !{null, !2637, !2615, !1000, !1898}
!7722 = !DILocalVariable(name: "cache", arg: 1, scope: !7719, file: !3, line: 2289, type: !2637)
!7723 = !DILocation(line: 2289, column: 48, scope: !7719)
!7724 = !DILocalVariable(name: "stream", arg: 2, scope: !7719, file: !3, line: 2290, type: !2615)
!7725 = !DILocation(line: 2290, column: 31, scope: !7719)
!7726 = !DILocalVariable(name: "v", arg: 3, scope: !7719, file: !3, line: 2291, type: !1000)
!7727 = !DILocation(line: 2291, column: 21, scope: !7719)
!7728 = !DILocalVariable(name: "seen", arg: 4, scope: !7719, file: !3, line: 2291, type: !1898)
!7729 = !DILocation(line: 2291, column: 31, scope: !7719)
!7730 = !DILocalVariable(name: "t", scope: !7719, file: !3, line: 2293, type: !1012)
!7731 = !DILocation(line: 2293, column: 8, scope: !7719)
!7732 = !DILocalVariable(name: "index", scope: !7719, file: !3, line: 2294, type: !962)
!7733 = !DILocation(line: 2294, column: 7, scope: !7719)
!7734 = !DILocation(line: 2296, column: 14, scope: !7735)
!7735 = distinct !DILexicalBlock(scope: !7719, file: !3, line: 2296, column: 3)
!7736 = !DILocation(line: 2296, column: 8, scope: !7735)
!7737 = !DILocation(line: 2296, column: 19, scope: !7738)
!7738 = distinct !DILexicalBlock(scope: !7735, file: !3, line: 2296, column: 3)
!7739 = !DILocation(line: 2296, column: 3, scope: !7735)
!7740 = !DILocalVariable(name: "name", scope: !7741, file: !3, line: 2298, type: !1214)
!7741 = distinct !DILexicalBlock(scope: !7738, file: !3, line: 2297, column: 5)
!7742 = !DILocation(line: 2298, column: 19, scope: !7741)
!7743 = !DILocalVariable(name: "kind", scope: !7741, file: !3, line: 2299, type: !917)
!7744 = !DILocation(line: 2299, column: 35, scope: !7741)
!7745 = !DILocalVariable(name: "visibility", scope: !7741, file: !3, line: 2300, type: !925)
!7746 = !DILocation(line: 2300, column: 41, scope: !7741)
!7747 = !DILocalVariable(name: "slot_num", scope: !7741, file: !3, line: 2301, type: !962)
!7748 = !DILocation(line: 2301, column: 11, scope: !7741)
!7749 = !DILocalVariable(name: "size", scope: !7741, file: !3, line: 2302, type: !2668)
!7750 = !DILocation(line: 2302, column: 16, scope: !7741)
!7751 = !DILocalVariable(name: "comdat", scope: !7741, file: !3, line: 2303, type: !1214)
!7752 = !DILocation(line: 2303, column: 19, scope: !7741)
!7753 = !DILocation(line: 2307, column: 12, scope: !7754)
!7754 = distinct !DILexicalBlock(scope: !7741, file: !3, line: 2307, column: 11)
!7755 = !DILocation(line: 2308, column: 4, scope: !7754)
!7756 = !DILocation(line: 2308, column: 22, scope: !7754)
!7757 = !DILocation(line: 2308, column: 7, scope: !7754)
!7758 = !DILocation(line: 2309, column: 4, scope: !7754)
!7759 = !DILocation(line: 2309, column: 7, scope: !7754)
!7760 = !DILocation(line: 2310, column: 4, scope: !7754)
!7761 = !DILocation(line: 2310, column: 7, scope: !7754)
!7762 = !DILocation(line: 2310, column: 21, scope: !7754)
!7763 = !DILocation(line: 2307, column: 11, scope: !7741)
!7764 = !DILocation(line: 2311, column: 2, scope: !7754)
!7765 = !DILocation(line: 2313, column: 7, scope: !7741)
!7766 = !DILocation(line: 2316, column: 14, scope: !7741)
!7767 = !DILocation(line: 2316, column: 12, scope: !7741)
!7768 = !DILocation(line: 2321, column: 11, scope: !7769)
!7769 = distinct !DILexicalBlock(scope: !7741, file: !3, line: 2321, column: 11)
!7770 = !DILocation(line: 2321, column: 19, scope: !7769)
!7771 = !DILocation(line: 2321, column: 11, scope: !7741)
!7772 = !DILocation(line: 2322, column: 10, scope: !7769)
!7773 = !DILocation(line: 2322, column: 7, scope: !7769)
!7774 = !DILocation(line: 2322, column: 2, scope: !7769)
!7775 = !DILocation(line: 2324, column: 34, scope: !7741)
!7776 = !DILocation(line: 2324, column: 41, scope: !7741)
!7777 = !DILocation(line: 2324, column: 7, scope: !7741)
!7778 = !DILocation(line: 2325, column: 7, scope: !7741)
!7779 = !DILocation(line: 2328, column: 25, scope: !7780)
!7780 = distinct !DILexicalBlock(scope: !7741, file: !3, line: 2328, column: 11)
!7781 = !DILocation(line: 2328, column: 31, scope: !7780)
!7782 = !DILocation(line: 2328, column: 11, scope: !7780)
!7783 = !DILocation(line: 2328, column: 11, scope: !7741)
!7784 = !DILocation(line: 2329, column: 2, scope: !7780)
!7785 = !DILocation(line: 2331, column: 25, scope: !7780)
!7786 = !DILocation(line: 2331, column: 31, scope: !7780)
!7787 = !DILocation(line: 2331, column: 9, scope: !7780)
!7788 = !DILocation(line: 2333, column: 11, scope: !7789)
!7789 = distinct !DILexicalBlock(scope: !7741, file: !3, line: 2333, column: 11)
!7790 = !DILocation(line: 2333, column: 11, scope: !7741)
!7791 = !DILocation(line: 2335, column: 8, scope: !7792)
!7792 = distinct !DILexicalBlock(scope: !7793, file: !3, line: 2335, column: 8)
!7793 = distinct !DILexicalBlock(scope: !7789, file: !3, line: 2334, column: 2)
!7794 = !DILocation(line: 2335, column: 8, scope: !7793)
!7795 = !DILocation(line: 2336, column: 11, scope: !7792)
!7796 = !DILocation(line: 2336, column: 6, scope: !7792)
!7797 = !DILocation(line: 2338, column: 11, scope: !7792)
!7798 = !DILocation(line: 2339, column: 2, scope: !7793)
!7799 = !DILocation(line: 2342, column: 8, scope: !7800)
!7800 = distinct !DILexicalBlock(scope: !7801, file: !3, line: 2342, column: 8)
!7801 = distinct !DILexicalBlock(scope: !7789, file: !3, line: 2341, column: 2)
!7802 = !DILocation(line: 2342, column: 8, scope: !7801)
!7803 = !DILocation(line: 2343, column: 11, scope: !7800)
!7804 = !DILocation(line: 2343, column: 6, scope: !7800)
!7805 = !DILocation(line: 2344, column: 13, scope: !7806)
!7806 = distinct !DILexicalBlock(scope: !7800, file: !3, line: 2344, column: 13)
!7807 = !DILocation(line: 2344, column: 13, scope: !7800)
!7808 = !DILocation(line: 2345, column: 11, scope: !7806)
!7809 = !DILocation(line: 2345, column: 6, scope: !7806)
!7810 = !DILocation(line: 2347, column: 11, scope: !7806)
!7811 = !DILocation(line: 2350, column: 15, scope: !7741)
!7812 = !DILocation(line: 2350, column: 7, scope: !7741)
!7813 = !DILocation(line: 2353, column: 15, scope: !7814)
!7814 = distinct !DILexicalBlock(scope: !7741, file: !3, line: 2351, column: 2)
!7815 = !DILocation(line: 2354, column: 4, scope: !7814)
!7816 = !DILocation(line: 2356, column: 15, scope: !7814)
!7817 = !DILocation(line: 2357, column: 4, scope: !7814)
!7818 = !DILocation(line: 2359, column: 15, scope: !7814)
!7819 = !DILocation(line: 2360, column: 4, scope: !7814)
!7820 = !DILocation(line: 2362, column: 15, scope: !7814)
!7821 = !DILocation(line: 2363, column: 4, scope: !7814)
!7822 = !DILocation(line: 2366, column: 11, scope: !7823)
!7823 = distinct !DILexicalBlock(scope: !7741, file: !3, line: 2366, column: 11)
!7824 = !DILocation(line: 2366, column: 16, scope: !7823)
!7825 = !DILocation(line: 2367, column: 4, scope: !7823)
!7826 = !DILocation(line: 2367, column: 7, scope: !7823)
!7827 = !DILocation(line: 2368, column: 4, scope: !7823)
!7828 = !DILocation(line: 2368, column: 7, scope: !7823)
!7829 = !DILocation(line: 2368, column: 33, scope: !7823)
!7830 = !DILocation(line: 2366, column: 11, scope: !7741)
!7831 = !DILocation(line: 2369, column: 22, scope: !7823)
!7832 = !DILocation(line: 2369, column: 57, scope: !7823)
!7833 = !DILocation(line: 2370, column: 6, scope: !7823)
!7834 = !DILocation(line: 2370, column: 4, scope: !7823)
!7835 = !DILocation(line: 2369, column: 7, scope: !7823)
!7836 = !DILocation(line: 2369, column: 2, scope: !7823)
!7837 = !DILocation(line: 2372, column: 7, scope: !7823)
!7838 = !DILocation(line: 2374, column: 11, scope: !7839)
!7839 = distinct !DILexicalBlock(scope: !7741, file: !3, line: 2374, column: 11)
!7840 = !DILocation(line: 2374, column: 11, scope: !7741)
!7841 = !DILocation(line: 2375, column: 11, scope: !7839)
!7842 = !DILocation(line: 2375, column: 9, scope: !7839)
!7843 = !DILocation(line: 2375, column: 2, scope: !7839)
!7844 = !DILocation(line: 2377, column: 9, scope: !7839)
!7845 = !DILocation(line: 2379, column: 31, scope: !7741)
!7846 = !DILocation(line: 2379, column: 39, scope: !7741)
!7847 = !DILocation(line: 2379, column: 53, scope: !7741)
!7848 = !DILocation(line: 2379, column: 45, scope: !7741)
!7849 = !DILocation(line: 2379, column: 59, scope: !7741)
!7850 = !DILocation(line: 2379, column: 7, scope: !7741)
!7851 = !DILocation(line: 2380, column: 31, scope: !7741)
!7852 = !DILocation(line: 2380, column: 39, scope: !7741)
!7853 = !DILocation(line: 2380, column: 55, scope: !7741)
!7854 = !DILocation(line: 2380, column: 47, scope: !7741)
!7855 = !DILocation(line: 2380, column: 63, scope: !7741)
!7856 = !DILocation(line: 2380, column: 7, scope: !7741)
!7857 = !DILocation(line: 2381, column: 31, scope: !7741)
!7858 = !DILocation(line: 2381, column: 39, scope: !7741)
!7859 = !DILocation(line: 2381, column: 7, scope: !7741)
!7860 = !DILocation(line: 2382, column: 31, scope: !7741)
!7861 = !DILocation(line: 2382, column: 39, scope: !7741)
!7862 = !DILocation(line: 2382, column: 7, scope: !7741)
!7863 = !DILocation(line: 2383, column: 31, scope: !7741)
!7864 = !DILocation(line: 2383, column: 39, scope: !7741)
!7865 = !DILocation(line: 2383, column: 7, scope: !7741)
!7866 = !DILocation(line: 2384, column: 31, scope: !7741)
!7867 = !DILocation(line: 2384, column: 39, scope: !7741)
!7868 = !DILocation(line: 2384, column: 7, scope: !7741)
!7869 = !DILocation(line: 2385, column: 5, scope: !7741)
!7870 = !DILocation(line: 2296, column: 56, scope: !7738)
!7871 = !DILocation(line: 2296, column: 3, scope: !7738)
!7872 = distinct !{!7872, !7739, !7873}
!7873 = !DILocation(line: 2385, column: 5, scope: !7735)
!7874 = !DILocation(line: 2386, column: 1, scope: !7719)
