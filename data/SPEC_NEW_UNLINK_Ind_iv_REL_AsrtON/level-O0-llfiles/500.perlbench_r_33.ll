; ModuleID = 'pp_hot.c'
source_filename = "pp_hot.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sv = type { i8*, i32, i32, %union.anon }
%union.anon = type { i8* }
%struct.op = type { %struct.op*, %struct.op*, {}*, i64, i16, i8, i8 }
%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, i32, %struct.hv*, %struct.gv*, i32, i32, i64*, %struct.refcounted_he* }
%struct.hv = type { %struct.xpvhv*, i32, i32, %union.anon.5 }
%struct.xpvhv = type { %struct.hv*, %union._xmgu, i64, i64 }
%union._xmgu = type { %struct.magic* }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, i64, %struct.sv*, i8* }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)*, i32 (%struct.sv*, %struct.magic*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter*, %struct.interpreter*, %struct.av* }
%struct.interpreter = type { i8 }
%struct.av = type { %struct.xpvav*, i32, i32, %union.anon.0 }
%struct.xpvav = type { %struct.hv*, %union._xmgu, i64, i64, %struct.sv** }
%union.anon.0 = type { i8* }
%union.anon.5 = type { i8* }
%struct.gv = type { %struct.xpvgv*, i32, i32, %union.anon.4 }
%struct.xpvgv = type { %struct.hv*, %union._xmgu, i64, %union.anon.8, %union._xivu, %union._xnvu }
%union.anon.8 = type { i64 }
%union._xivu = type { i64 }
%union._xnvu = type { double }
%union.anon.4 = type { i8* }
%struct.refcounted_he = type { %struct.refcounted_he*, %struct.hek*, %union.anon.16, i32, [1 x i8] }
%struct.hek = type { i32, i32, [1 x i8] }
%union.anon.16 = type { i64 }
%struct.stackinfo = type { %struct.av*, %struct.context*, %struct.stackinfo*, %struct.stackinfo*, i32, i32, i32, i32 }
%struct.context = type { %union.anon.17 }
%union.anon.17 = type { %struct.subst }
%struct.subst = type { i8, i8, i16, i32, i64, i64, i8*, %struct.sv*, %struct.sv*, i8*, i8*, i8*, i8*, %struct.p5rx* }
%struct.p5rx = type { %struct.regexp*, i32, i32, %union.anon.7 }
%struct.regexp = type { %struct.hv*, %union._xmgu, i64, %union.anon.6, %struct.regexp_engine*, %struct.p5rx*, %struct.hv*, i32, i64, i64, i64, %struct.reg_substr_data*, i32, i32, i8*, i32, i32, %struct.regexp_paren_pair*, i8*, %struct.sv*, i64, i64, i64, i64, i16, %struct.cv* }
%union.anon.6 = type { i64 }
%struct.regexp_engine = type { %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }
%struct.re_scream_pos_data_s = type { i8**, i64* }
%struct.reg_substr_data = type { i8, [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i64, i64, %struct.sv*, %struct.sv*, i64 }
%struct.regexp_paren_pair = type { i64, i64, i64 }
%struct.cv = type { %struct.xpvcv*, i32, i32, %union.anon.3 }
%struct.xpvcv = type { %struct.hv*, %union._xmgu, i64, %union.anon.9, %struct.hv*, %union.anon.10, %union.anon.11, %union.anon.12, i8*, %union.anon.13, %struct.cv*, i32, i32, i32 }
%union.anon.9 = type { i64 }
%union.anon.10 = type { %struct.op* }
%union.anon.11 = type { %struct.op* }
%union.anon.12 = type { %struct.gv* }
%union.anon.13 = type { %struct.padlist* }
%struct.padlist = type { i64, %struct.av**, i32, i32 }
%union.anon.3 = type { i8* }
%union.anon.7 = type { i8* }
%union.any = type { i8* }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op*, %struct.p5rx*, i32, %union.anon.18, %union.anon.19, %struct.op* }
%union.anon.18 = type { %struct.op* }
%union.anon.19 = type { %struct.op* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%union.UNOP_AUX_item = type { i64 }
%struct.svop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.sv* }
%struct.block = type { i8, i8, i16, i32, %struct.cop*, i32, i32, %struct.pmop*, %union.anon.20 }
%union.anon.20 = type { %struct.block_sub }
%struct.block_sub = type { %struct.op*, %struct.cv*, %struct.av*, %struct.av*, i32, %struct.av* }
%struct.gp = type { %struct.sv*, %struct.io*, %struct.cv*, i32, i32, %struct.hv*, %struct.av*, %struct.cv*, %struct.gv*, i32, %struct.hek* }
%struct.io = type { %struct.xpvio*, i32, i32, %union.anon.2 }
%struct.xpvio = type { %struct.hv*, %union._xmgu, i64, %union.anon.14, %union._xivu, %struct._PerlIO**, %union.anon.15, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i8, i8 }
%union.anon.14 = type { i64 }
%struct._PerlIO = type opaque
%union.anon.15 = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%union.anon.2 = type { i8* }
%struct.xpv = type { %struct.hv*, %union._xmgu, i64, %union.anon.26 }
%union.anon.26 = type { i64 }
%struct.xpviv = type { %struct.hv*, %union._xmgu, i64, %union.anon.27, %union._xivu }
%union.anon.27 = type { i64 }
%struct.xpvnv = type { %struct.hv*, %union._xmgu, i64, %union.anon.28, %union._xivu, %union._xnvu }
%union.anon.28 = type { i64 }
%struct.logop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op* }
%struct.xpvmg = type { %struct.hv*, %union._xmgu, i64, %union.anon.29, %union._xivu, %union._xnvu }
%union.anon.29 = type { i64 }
%struct.he = type { %struct.he*, %struct.hek*, %union.anon.1 }
%union.anon.1 = type { %struct.sv* }
%struct.xpvuv = type { %struct.hv*, %union._xmgu, i64, %union.anon.30, %union._xivu }
%union.anon.30 = type { i64 }
%struct.xpvlv = type { %struct.hv*, %union._xmgu, i64, %union.anon.31, %union._xivu, %union._xnvu, %union.anon.32, i64, %struct.sv*, i8, i8 }
%union.anon.31 = type { i64 }
%union.anon.32 = type { i64 }
%struct.xpvhv_aux = type { %union._xhvnameu, %struct.av*, %struct.he*, i32, i32, %struct.mro_meta*, i32, i32, i32, i32 }
%union._xhvnameu = type { %struct.hek* }
%struct.mro_meta = type { %struct.hv*, %struct.sv*, %struct.hv*, i32, i32, %struct.mro_alg*, %struct.hv*, %struct.hv*, i32 }
%struct.mro_alg = type { %struct.av* (%struct.hv*, i32)*, i8*, i16, i16, i32 }
%struct.unop_aux = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %union.UNOP_AUX_item* }
%struct.block_loop = type { i32, %struct.loop*, %union.anon.21, %union.anon.22 }
%struct.loop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op*, %struct.op*, %struct.op*, %struct.op* }
%union.anon.21 = type { %struct.sv** }
%union.anon.22 = type { %struct.anon.23 }
%struct.anon.23 = type { %struct.av*, i64 }
%struct.anon.25 = type { %struct.sv*, %struct.sv* }
%struct.anon.24 = type { i64, i64 }
%struct.methop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %union.anon.33, %struct.sv* }
%union.anon.33 = type { %struct.op* }

@PL_stack_sp = external dso_local global %struct.sv**, align 8
@PL_stack_max = external dso_local global %struct.sv**, align 8
@PL_op = external dso_local global %struct.op*, align 8
@PL_curcop = external dso_local global %struct.cop*, align 8
@PL_sawalias = external dso_local global i8, align 1
@PL_tainted = external dso_local global i8, align 1
@PL_stack_base = external dso_local global %struct.sv**, align 8
@PL_curstackinfo = external dso_local global %struct.stackinfo*, align 8
@PL_tmps_ix = external dso_local global i64, align 8
@PL_tmps_floor = external dso_local global i64, align 8
@PL_sig_pending = external dso_local global i32, align 4
@PL_signalhook = external dso_local global void ()*, align 8
@PL_markstack_ptr = external dso_local global i32*, align 8
@PL_markstack_max = external dso_local global i32*, align 8
@PL_curpad = external dso_local global %struct.sv**, align 8
@PL_tainting = external dso_local global i8, align 1
@.str = private unnamed_addr constant [34 x i8] c"Useless assignment to a temporary\00", align 1
@PL_Sv = external dso_local global %struct.sv*, align 8
@PL_scopestack = external dso_local global i32*, align 8
@PL_scopestack_ix = external dso_local global i32, align 4
@PL_savestack_ix = external dso_local global i32, align 4
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PL_defgv = external dso_local global %struct.gv*, align 8
@PL_savestack = external dso_local global %union.any*, align 8
@PL_savestack_max = external dso_local global i32, align 4
@PL_sv_undef = external dso_local global %struct.sv, align 8
@PL_last_in_gv = external dso_local global %struct.gv*, align 8
@PL_argvgv = external dso_local global %struct.gv*, align 8
@PL_sv_yes = external dso_local global %struct.sv, align 8
@PL_sv_no = external dso_local global %struct.sv, align 8
@PL_no_aelem = external dso_local constant [0 x i8], align 1
@PL_defoutgv = external dso_local global %struct.gv*, align 8
@PL_sv_consts = external dso_local global [35 x %struct.sv*], align 16
@.str.2 = private unnamed_addr constant [6 x i8] c"PRINT\00", align 1
@PL_ofsgv = external dso_local global %struct.gv*, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@PL_ors_sv = external dso_local global %struct.sv*, align 8
@Perl_pp_rv2av.an_array = internal constant [9 x i8] c"an ARRAY\00", align 1
@Perl_pp_rv2av.a_hash = internal constant [7 x i8] c"a HASH\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"Not %s reference\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@PL_no_localize_ref = external dso_local constant [0 x i8], align 1
@.str.6 = private unnamed_addr constant [41 x i8] c"Can't return %s to lvalue scalar context\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"array\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"hash\00", align 1
@PL_delaymagic = external dso_local global i16, align 2
@PL_tmps_max = external dso_local global i64, align 8
@.str.9 = private unnamed_addr constant [39 x i8] c"panic: attempt to copy freed scalar %p\00", align 1
@.str.10 = private unnamed_addr constant [34 x i8] c"Assigned value is not a reference\00", align 1
@.str.11 = private unnamed_addr constant [41 x i8] c"Assigned value is not a SCALAR reference\00", align 1
@PL_sv_placeholder = external dso_local global %struct.sv, align 8
@PL_delaymagic_uid = external dso_local global i32, align 4
@PL_delaymagic_euid = external dso_local global i32, align 4
@.str.12 = private unnamed_addr constant [22 x i8] c"No setreuid available\00", align 1
@PL_delaymagic_gid = external dso_local global i32, align 4
@PL_delaymagic_egid = external dso_local global i32, align 4
@.str.13 = private unnamed_addr constant [22 x i8] c"No setregid available\00", align 1
@.str.14 = private unnamed_addr constant [16 x i8] c"panic: pp_match\00", align 1
@PL_curpm = external dso_local global %struct.pmop*, align 8
@.str.15 = private unnamed_addr constant [88 x i8] c"panic: pp_match start/end pointers, i=%ld, start=%ld, end=%ld, s=%p, strend=%p, len=%lu\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"READLINE\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@PL_rs = external dso_local global %struct.sv*, align 8
@.str.18 = private unnamed_addr constant [44 x i8] c"glob failed (child exited with status %d%s)\00", align 1
@PL_statusvalue = external dso_local global i32, align 4
@.str.19 = private unnamed_addr constant [14 x i8] c", core dumped\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"$&*(){}[]'\22;\\|?<>~`\00", align 1
@PL_statbuf = external dso_local global %struct.stat, align 8
@.str.21 = private unnamed_addr constant [38 x i8] c"utf8 \22\\x%02X\22 does not map to Unicode\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"EXISTS\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"DELETE\00", align 1
@PL_no_helem_sv = external dso_local constant [0 x i8], align 1
@PL_no_symref_sv = external dso_local constant [0 x i8], align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@PL_no_usym = external dso_local constant [0 x i8], align 1
@PL_multideref_pc = external dso_local global %union.UNOP_AUX_item*, align 8
@.str.25 = private unnamed_addr constant [23 x i8] c"Not an ARRAY reference\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c"an ARRAY\00", align 1
@.str.27 = private unnamed_addr constant [38 x i8] c"Use of reference \22%-p\22 as array index\00", align 1
@.str.28 = private unnamed_addr constant [21 x i8] c"Not a HASH reference\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c"a HASH\00", align 1
@PL_curstack = external dso_local global %struct.av*, align 8
@.str.30 = private unnamed_addr constant [32 x i8] c"Use of freed value in iteration\00", align 1
@.str.31 = private unnamed_addr constant [24 x i8] c"panic: pp_iter, type=%u\00", align 1
@.str.32 = private unnamed_addr constant [32 x i8] c"panic: pp_subst, pm=%p, orig=%p\00", align 1
@PL_encoding = external dso_local global %struct.sv*, align 8
@PL_lex_encoding = external dso_local global %struct.sv*, align 8
@.str.33 = private unnamed_addr constant [18 x i8] c"Substitution loop\00", align 1
@PL_markstack = external dso_local global i32*, align 8
@.str.34 = private unnamed_addr constant [21 x i8] c"Not a CODE reference\00", align 1
@.str.35 = private unnamed_addr constant [13 x i8] c"a subroutine\00", align 1
@.str.36 = private unnamed_addr constant [76 x i8] c"Can't use string (\22%-32p\22%s) as a subroutine ref while \22strict refs\22 in use\00", align 1
@.str.37 = private unnamed_addr constant [25 x i8] c"Closure prototype called\00", align 1
@.str.38 = private unnamed_addr constant [33 x i8] c"Undefined subroutine &%-p called\00", align 1
@.str.39 = private unnamed_addr constant [28 x i8] c"Undefined subroutine called\00", align 1
@PL_DBsub = external dso_local global %struct.gv*, align 8
@PL_curcopdb = external dso_local global %struct.cop*, align 8
@.str.40 = private unnamed_addr constant [9 x i8] c"DB::lsub\00", align 1
@.str.41 = private unnamed_addr constant [27 x i8] c"No DB::sub routine defined\00", align 1
@PL_comppad = external dso_local global %struct.av*, align 8
@.str.42 = private unnamed_addr constant [40 x i8] c"Can't modify non-lvalue subroutine call\00", align 1
@PL_perldb = external dso_local global i32, align 4
@.str.43 = private unnamed_addr constant [39 x i8] c"Deep recursion on anonymous subroutine\00", align 1
@.str.44 = private unnamed_addr constant [35 x i8] c"Deep recursion on subroutine \22%-p\22\00", align 1
@PL_sub_generation = external dso_local global i32, align 4
@.str.45 = private unnamed_addr constant [47 x i8] c"Reference found where even-sized list expected\00", align 1
@.str.46 = private unnamed_addr constant [42 x i8] c"Odd number of elements in hash assignment\00", align 1
@.str.47 = private unnamed_addr constant [62 x i8] c"Can't call method \22%-p\22 without a package or object reference\00", align 1
@.str.48 = private unnamed_addr constant [46 x i8] c"Can't call method \22%-p\22 on an undefined value\00", align 1
@.str.49 = private unnamed_addr constant [47 x i8] c"Can't call method \22%-p\22 on unblessed reference\00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"isa\00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c"DOES\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_const() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body1
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body1
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %7 = bitcast %struct.op* %6 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %7, i32 0, i32 7
  %8 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %8, %struct.sv** %incdec.ptr, align 8
  br label %do.end2

do.end2:                                          ; preds = %do.end
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %10, %struct.sv*** @PL_stack_sp, align 8
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 0
  %12 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %12
}

declare dso_local %struct.sv** @Perl_stack_grow(%struct.sv**, %struct.sv**, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_nextstate() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %1 = bitcast %struct.op* %0 to %struct.cop*
  store %struct.cop* %1, %struct.cop** @PL_curcop, align 8
  store i8 0, i8* @PL_sawalias, align 1
  store i8 0, i8* @PL_tainted, align 1
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 1
  %4 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 4
  %6 = load i32, i32* %si_cxix, align 8
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %4, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 0
  %cx_blk = bitcast %union.anon.17* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 3
  %7 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %2, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_sp, align 8
  %8 = load i64, i64* @PL_tmps_ix, align 8
  %9 = load i64, i64* @PL_tmps_floor, align 8
  %cmp = icmp sgt i64 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Perl_free_tmps()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i32, i32* @PL_sig_pending, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br i1 true, label %if.then1, label %if.end2

cond.false:                                       ; preds = %if.end
  br i1 false, label %if.then1, label %if.end2

if.then1:                                         ; preds = %cond.false, %cond.true
  %11 = load void ()*, void ()** @PL_signalhook, align 8
  call void %11()
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %cond.false, %cond.true
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 0
  %13 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %13
}

declare dso_local void @Perl_free_tmps() #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_gvsv() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 6
  %7 = load i8, i8* %op_private, align 1
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true1, label %cond.false2

cond.true1:                                       ; preds = %do.end
  br i1 true, label %if.then3, label %if.else

cond.false2:                                      ; preds = %do.end
  br i1 false, label %if.then3, label %if.else

if.then3:                                         ; preds = %cond.false2, %cond.true1
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %9 = bitcast %struct.op* %8 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %9, i32 0, i32 7
  %10 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %11 = bitcast %struct.sv* %10 to %struct.gv*
  %call4 = call %struct.sv* @Perl_save_scalar(%struct.gv* %11)
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %12, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %call4, %struct.sv** %incdec.ptr, align 8
  br label %if.end21

if.else:                                          ; preds = %cond.false2, %cond.true1
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %14 = bitcast %struct.op* %13 to %struct.svop*
  %op_sv5 = getelementptr inbounds %struct.svop, %struct.svop* %14, i32 0, i32 7
  %15 = load %struct.sv*, %struct.sv** %op_sv5, align 8
  %16 = bitcast %struct.sv* %15 to %struct.gv*
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %17 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %17, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %18 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool6 = icmp ne %struct.sv* %18, null
  br i1 %tobool6, label %cond.true7, label %cond.false13

cond.true7:                                       ; preds = %if.else
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %20 = bitcast %struct.op* %19 to %struct.svop*
  %op_sv8 = getelementptr inbounds %struct.svop, %struct.svop* %20, i32 0, i32 7
  %21 = load %struct.sv*, %struct.sv** %op_sv8, align 8
  %22 = bitcast %struct.sv* %21 to %struct.gv*
  %sv_u9 = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_gp10 = bitcast %union.anon.4* %sv_u9 to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp10, align 8
  %add.ptr11 = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %gp_sv12 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr11, i32 0, i32 0
  br label %cond.end

cond.false13:                                     ; preds = %if.else
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %25 = bitcast %struct.op* %24 to %struct.svop*
  %op_sv14 = getelementptr inbounds %struct.svop, %struct.svop* %25, i32 0, i32 7
  %26 = load %struct.sv*, %struct.sv** %op_sv14, align 8
  %27 = bitcast %struct.sv* %26 to %struct.gv*
  %call15 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %27, i32 0)
  %sv_u16 = getelementptr inbounds %struct.gv, %struct.gv* %call15, i32 0, i32 3
  %svu_gp17 = bitcast %union.anon.4* %sv_u16 to %struct.gp**
  %28 = load %struct.gp*, %struct.gp** %svu_gp17, align 8
  %add.ptr18 = getelementptr inbounds %struct.gp, %struct.gp* %28, i64 0
  %gp_sv19 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr18, i32 0, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false13, %cond.true7
  %cond = phi %struct.sv** [ %gp_sv12, %cond.true7 ], [ %gp_sv19, %cond.false13 ]
  %29 = load %struct.sv*, %struct.sv** %cond, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr20 = getelementptr inbounds %struct.sv*, %struct.sv** %30, i32 1
  store %struct.sv** %incdec.ptr20, %struct.sv*** %sp, align 8
  store %struct.sv* %29, %struct.sv** %incdec.ptr20, align 8
  br label %if.end21

if.end21:                                         ; preds = %cond.end, %if.then3
  %31 = load %struct.op*, %struct.op** @PL_op, align 8
  %32 = bitcast %struct.op* %31 to %struct.svop*
  %op_sv22 = getelementptr inbounds %struct.svop, %struct.svop* %32, i32 0, i32 7
  %33 = load %struct.sv*, %struct.sv** %op_sv22, align 8
  %34 = bitcast %struct.sv* %33 to %struct.gv*
  %sv_u23 = getelementptr inbounds %struct.gv, %struct.gv* %34, i32 0, i32 3
  %svu_gp24 = bitcast %union.anon.4* %sv_u23 to %struct.gp**
  %35 = load %struct.gp*, %struct.gp** %svu_gp24, align 8
  %add.ptr25 = getelementptr inbounds %struct.gp, %struct.gp* %35, i64 0
  %gp_refcnt = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr25, i32 0, i32 4
  %36 = load i32, i32* %gp_refcnt, align 4
  %cmp26 = icmp ugt i32 %36, 1
  br i1 %cmp26, label %if.then34, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %37 = load %struct.op*, %struct.op** @PL_op, align 8
  %38 = bitcast %struct.op* %37 to %struct.svop*
  %op_sv28 = getelementptr inbounds %struct.svop, %struct.svop* %38, i32 0, i32 7
  %39 = load %struct.sv*, %struct.sv** %op_sv28, align 8
  %40 = bitcast %struct.sv* %39 to %struct.gv*
  %sv_u29 = getelementptr inbounds %struct.gv, %struct.gv* %40, i32 0, i32 3
  %svu_gp30 = bitcast %union.anon.4* %sv_u29 to %struct.gp**
  %41 = load %struct.gp*, %struct.gp** %svu_gp30, align 8
  %add.ptr31 = getelementptr inbounds %struct.gp, %struct.gp* %41, i64 0
  %gp_flags = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr31, i32 0, i32 9
  %bf.load = load i32, i32* %gp_flags, align 8
  %bf.lshr = lshr i32 %bf.load, 31
  %and32 = and i32 %bf.lshr, 1
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %lor.lhs.false, %if.end21
  store i8 1, i8* @PL_sawalias, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %lor.lhs.false
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %42, %struct.sv*** @PL_stack_sp, align 8
  %43 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 0
  %44 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %44
}

declare dso_local %struct.sv* @Perl_save_scalar(%struct.gv*) #1

declare dso_local %struct.gv* @Perl_gv_add_by_type(%struct.gv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_null() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 0
  %1 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_pushmark() #0 {
entry:
  %mark_stack_entry = alloca i32*, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %0, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr, i32** %mark_stack_entry, align 8
  %1 = load i32*, i32** @PL_markstack_max, align 8
  %cmp = icmp eq i32* %incdec.ptr, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %call = call i32* @Perl_markstack_grow()
  store i32* %call, i32** %mark_stack_entry, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  %4 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv, i32* %4, align 4
  br label %do.end

do.end:                                           ; preds = %if.end
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 0
  %6 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %6
}

declare dso_local i32* @Perl_markstack_grow() #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_stringify() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %sv, align 8
  %7 = load %struct.sv*, %struct.sv** %targ, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %7, %struct.sv** %8, align 8
  %9 = load %struct.sv*, %struct.sv** %targ, align 8
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_copypv_flags(%struct.sv* %9, %struct.sv* %10, i32 2)
  br label %do.body

do.body:                                          ; preds = %entry
  %11 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags, align 4
  %and = and i32 %12, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %13 = load %struct.sv*, %struct.sv** %targ, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %13)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 0
  %15 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %15
}

declare dso_local void @Perl_sv_copypv_flags(%struct.sv*, %struct.sv*, i32) #1

declare dso_local i32 @Perl_mg_set(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_gv() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body1
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body1
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %7 = bitcast %struct.op* %6 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %7, i32 0, i32 7
  %8 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %9 = bitcast %struct.sv* %8 to %struct.gv*
  %10 = bitcast %struct.gv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.sv*
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %12, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %11, %struct.sv** %incdec.ptr, align 8
  br label %do.end2

do.end2:                                          ; preds = %do.end
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %14 = bitcast %struct.op* %13 to %struct.svop*
  %op_sv3 = getelementptr inbounds %struct.svop, %struct.svop* %14, i32 0, i32 7
  %15 = load %struct.sv*, %struct.sv** %op_sv3, align 8
  %16 = bitcast %struct.sv* %15 to %struct.gv*
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags, align 4
  %and = and i32 %17, 255
  %cmp4 = icmp eq i32 %and, 9
  br i1 %cmp4, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %do.end2
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %19 = bitcast %struct.op* %18 to %struct.svop*
  %op_sv5 = getelementptr inbounds %struct.svop, %struct.svop* %19, i32 0, i32 7
  %20 = load %struct.sv*, %struct.sv** %op_sv5, align 8
  %21 = bitcast %struct.sv* %20 to %struct.gv*
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %21, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %22 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %22, i64 0
  %gp_refcnt = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 4
  %23 = load i32, i32* %gp_refcnt, align 4
  %cmp6 = icmp ugt i32 %23, 1
  br i1 %cmp6, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %25 = bitcast %struct.op* %24 to %struct.svop*
  %op_sv7 = getelementptr inbounds %struct.svop, %struct.svop* %25, i32 0, i32 7
  %26 = load %struct.sv*, %struct.sv** %op_sv7, align 8
  %27 = bitcast %struct.sv* %26 to %struct.gv*
  %sv_u8 = getelementptr inbounds %struct.gv, %struct.gv* %27, i32 0, i32 3
  %svu_gp9 = bitcast %union.anon.4* %sv_u8 to %struct.gp**
  %28 = load %struct.gp*, %struct.gp** %svu_gp9, align 8
  %add.ptr10 = getelementptr inbounds %struct.gp, %struct.gp* %28, i64 0
  %gp_flags = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr10, i32 0, i32 9
  %bf.load = load i32, i32* %gp_flags, align 8
  %bf.lshr = lshr i32 %bf.load, 31
  %and11 = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %and11, 0
  br i1 %tobool, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false, %land.lhs.true
  store i8 1, i8* @PL_sawalias, align 1
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %lor.lhs.false, %do.end2
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %31
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_and() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load i32, i32* @PL_sig_pending, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load void ()*, void ()** @PL_signalhook, align 8
  call void %1()
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %3 = load %struct.sv*, %struct.sv** %2, align 8
  store %struct.sv* %3, %struct.sv** %sv, align 8
  %4 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 2097152
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %if.end
  br i1 true, label %cond.true4, label %cond.false5

cond.false3:                                      ; preds = %if.end
  br i1 false, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %cond.false3, %cond.true2
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %6, i32 2)
  br i1 %call, label %if.else, label %if.then59

cond.false5:                                      ; preds = %cond.false3, %cond.true2
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %8, 65280
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.false16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false5
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %10, 255
  %cmp = icmp eq i32 %and10, 8
  br i1 %cmp, label %cond.false16, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %12, 16826623
  %cmp14 = icmp eq i32 %and13, 16777226
  br i1 %cmp14, label %cond.false16, label %cond.true15

cond.true15:                                      ; preds = %lor.lhs.false11
  br i1 false, label %if.else, label %if.then59

cond.false16:                                     ; preds = %lor.lhs.false11, %lor.lhs.false, %cond.false5
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %14, 1024
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %cond.true20, label %cond.false31

cond.true20:                                      ; preds = %cond.false16
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %tobool21 = icmp ne %struct.xpv* %17, null
  br i1 %tobool21, label %land.lhs.true, label %if.then59

land.lhs.true:                                    ; preds = %cond.true20
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any22 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any22, align 8
  %20 = bitcast i8* %19 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 2
  %21 = load i64, i64* %xpv_cur, align 8
  %cmp23 = icmp ugt i64 %21, 1
  br i1 %cmp23, label %if.else, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %land.lhs.true
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any25 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any25, align 8
  %24 = bitcast i8* %23 to %struct.xpv*
  %xpv_cur26 = getelementptr inbounds %struct.xpv, %struct.xpv* %24, i32 0, i32 2
  %25 = load i64, i64* %xpv_cur26, align 8
  %tobool27 = icmp ne i64 %25, 0
  br i1 %tobool27, label %land.lhs.true28, label %if.then59

land.lhs.true28:                                  ; preds = %lor.lhs.false24
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %27 = load i8*, i8** %svu_pv, align 8
  %28 = load i8, i8* %27, align 1
  %conv = sext i8 %28 to i32
  %cmp29 = icmp ne i32 %conv, 48
  br i1 %cmp29, label %if.else, label %if.then59

cond.false31:                                     ; preds = %cond.false16
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %30, 768
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %cond.true35, label %cond.false56

cond.true35:                                      ; preds = %cond.false31
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %32, 256
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %land.lhs.true39, label %lor.lhs.false43

land.lhs.true39:                                  ; preds = %cond.true35
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any40, align 8
  %35 = bitcast i8* %34 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %35, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %36 = load i64, i64* %xivu_iv, align 8
  %cmp41 = icmp ne i64 %36, 0
  br i1 %cmp41, label %if.else, label %lor.lhs.false43

lor.lhs.false43:                                  ; preds = %land.lhs.true39, %cond.true35
  %37 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %38, 512
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %land.lhs.true47, label %if.then59

land.lhs.true47:                                  ; preds = %lor.lhs.false43
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any48, align 8
  %41 = bitcast i8* %40 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %41, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %42 = load double, double* %xnv_nv, align 8
  %cmp49 = fcmp uno double %42, %42
  br i1 %cmp49, label %if.else, label %lor.lhs.false50

lor.lhs.false50:                                  ; preds = %land.lhs.true47
  %43 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any51 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any51, align 8
  %45 = bitcast i8* %44 to %struct.xpvnv*
  %xnv_u52 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %45, i32 0, i32 5
  %xnv_nv53 = bitcast %union._xnvu* %xnv_u52 to double*
  %46 = load double, double* %xnv_nv53, align 8
  %cmp54 = fcmp une double %46, 0.000000e+00
  br i1 %cmp54, label %if.else, label %if.then59

cond.false56:                                     ; preds = %cond.false31
  %47 = load %struct.sv*, %struct.sv** %sv, align 8
  %call57 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %47, i32 0)
  br i1 %call57, label %if.else, label %if.then59

if.then59:                                        ; preds = %cond.false56, %lor.lhs.false50, %lor.lhs.false43, %land.lhs.true28, %lor.lhs.false24, %cond.true20, %cond.true15, %cond.true4
  %48 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 0
  %49 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %49, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %cond.false56, %lor.lhs.false50, %land.lhs.true47, %land.lhs.true39, %land.lhs.true28, %land.lhs.true, %cond.true15, %cond.true4
  %50 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %50, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp60 = icmp eq i32 %bf.cast, 176
  br i1 %cmp60, label %if.then62, label %if.end63

if.then62:                                        ; preds = %if.else
  %51 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %51, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %if.else
  %52 = load %struct.op*, %struct.op** @PL_op, align 8
  %53 = bitcast %struct.op* %52 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %53, i32 0, i32 8
  %54 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %54, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end63, %if.then59
  %55 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %55
}

declare dso_local zeroext i1 @Perl_sv_2bool_flags(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sassign() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %left = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %temp = alloca %struct.sv*, align 8
  %cv = alloca %struct.sv*, align 8
  %cv_type = alloca i32, align 4
  %is_gv = alloca i8, align 1
  %got_coderef = alloca i8, align 1
  %gv = alloca %struct.gv*, align 8
  %value = alloca %struct.sv*, align 8
  %upgraded = alloca %struct.gv*, align 8
  %source = alloca %struct.cv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %left, align 8
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  store %struct.sv* %4, %struct.sv** %right, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.sv*, %struct.sv** %left, align 8
  store %struct.sv* %7, %struct.sv** %temp, align 8
  %8 = load %struct.sv*, %struct.sv** %right, align 8
  store %struct.sv* %8, %struct.sv** %left, align 8
  %9 = load %struct.sv*, %struct.sv** %temp, align 8
  store %struct.sv* %9, %struct.sv** %right, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i8, i8* @PL_tainting, align 1
  %tobool1 = trunc i8 %10 to i1
  br i1 %tobool1, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end
  %11 = load i8, i8* @PL_tainted, align 1
  %tobool3 = trunc i8 %11 to i1
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 true, label %land.lhs.true5, label %if.end11

cond.false:                                       ; preds = %land.lhs.true
  br i1 false, label %land.lhs.true5, label %if.end11

land.lhs.true5:                                   ; preds = %cond.false, %cond.true
  %12 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags, align 4
  %and6 = and i32 %13, 14680064
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true8, label %if.then10

land.lhs.true8:                                   ; preds = %land.lhs.true5
  %14 = load %struct.sv*, %struct.sv** %right, align 8
  %call = call zeroext i1 @Perl_sv_tainted(%struct.sv* %14)
  br i1 %call, label %if.end11, label %if.then10

if.then10:                                        ; preds = %land.lhs.true8, %land.lhs.true5
  store i8 0, i8* @PL_tainted, align 1
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %land.lhs.true8, %cond.false, %cond.true, %if.end
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private12 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 6
  %16 = load i8, i8* %op_private12, align 1
  %conv13 = zext i8 %16 to i32
  %and14 = and i32 %conv13, 128
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %cond.true16, label %cond.false17

cond.true16:                                      ; preds = %if.end11
  br i1 true, label %if.then18, label %if.end122

cond.false17:                                     ; preds = %if.end11
  br i1 false, label %if.then18, label %if.end122

if.then18:                                        ; preds = %cond.false17, %cond.true16
  %17 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %18 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %18, %struct.sv** %cv, align 8
  %19 = load %struct.sv*, %struct.sv** %cv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %20, 255
  store i32 %and20, i32* %cv_type, align 4
  %21 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %22, 49152
  %cmp = icmp eq i32 %and22, 32768
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then18
  %23 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %24, 255
  %cmp26 = icmp eq i32 %and25, 9
  br i1 %cmp26, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %25 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %26, 255
  %cmp30 = icmp eq i32 %and29, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %27 = phi i1 [ true, %land.rhs ], [ %cmp30, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.then18
  %28 = phi i1 [ false, %if.then18 ], [ %27, %lor.end ]
  %frombool = zext i1 %28 to i8
  store i8 %frombool, i8* %is_gv, align 1
  %29 = load i32, i32* %cv_type, align 4
  %cmp32 = icmp eq i32 %29, 13
  br i1 %cmp32, label %lor.end37, label %lor.rhs34

lor.rhs34:                                        ; preds = %land.end
  %30 = load i32, i32* %cv_type, align 4
  %cmp35 = icmp eq i32 %30, 14
  br label %lor.end37

lor.end37:                                        ; preds = %lor.rhs34, %land.end
  %31 = phi i1 [ true, %land.end ], [ %cmp35, %lor.rhs34 ]
  %frombool38 = zext i1 %31 to i8
  store i8 %frombool38, i8* %got_coderef, align 1
  %32 = load i8, i8* %got_coderef, align 1
  %tobool39 = trunc i8 %32 to i1
  br i1 %tobool39, label %if.end41, label %if.then40

if.then40:                                        ; preds = %lor.end37
  br label %if.end41

if.end41:                                         ; preds = %if.then40, %lor.end37
  %33 = load i8, i8* %got_coderef, align 1
  %tobool42 = trunc i8 %33 to i1
  br i1 %tobool42, label %if.end94, label %land.lhs.true43

land.lhs.true43:                                  ; preds = %if.end41
  %34 = load i8, i8* %is_gv, align 1
  %tobool44 = trunc i8 %34 to i1
  br i1 %tobool44, label %if.end94, label %land.lhs.true45

land.lhs.true45:                                  ; preds = %land.lhs.true43
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 5
  %36 = load i8, i8* %op_flags, align 2
  %conv46 = zext i8 %36 to i32
  %and47 = and i32 %conv46, 3
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %cond.true49, label %cond.false53

cond.true49:                                      ; preds = %land.lhs.true45
  %37 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags50 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 5
  %38 = load i8, i8* %op_flags50, align 2
  %conv51 = zext i8 %38 to i32
  %and52 = and i32 %conv51, 3
  br label %cond.end

cond.false53:                                     ; preds = %land.lhs.true45
  %call54 = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false53, %cond.true49
  %cond = phi i32 [ %and52, %cond.true49 ], [ %call54, %cond.false53 ]
  %cmp55 = icmp eq i32 %cond, 1
  br i1 %cmp55, label %if.then57, label %if.end94

if.then57:                                        ; preds = %cond.end
  %39 = load %struct.sv*, %struct.sv** %left, align 8
  %call58 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %39, i32 2064, i32 9)
  store %struct.gv* %call58, %struct.gv** %gv, align 8
  %40 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags59 = getelementptr inbounds %struct.gv, %struct.gv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %41, 255
  %cmp61 = icmp ne i32 %and60, 9
  br i1 %cmp61, label %land.lhs.true63, label %if.end93

land.lhs.true63:                                  ; preds = %if.then57
  %42 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags64 = getelementptr inbounds %struct.gv, %struct.gv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %43, 65280
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.end93, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true63
  %44 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags67 = getelementptr inbounds %struct.gv, %struct.gv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %45, 255
  %cmp69 = icmp eq i32 %and68, 8
  br i1 %cmp69, label %if.end93, label %lor.lhs.false71

lor.lhs.false71:                                  ; preds = %lor.lhs.false
  %46 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags72 = getelementptr inbounds %struct.gv, %struct.gv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags72, align 4
  %and73 = and i32 %47, 16826623
  %cmp74 = icmp eq i32 %and73, 16777226
  br i1 %cmp74, label %if.end93, label %if.then76

if.then76:                                        ; preds = %lor.lhs.false71
  %48 = load %struct.sv*, %struct.sv** %cv, align 8
  %sv_u77 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 3
  %svu_rv78 = bitcast %union.anon* %sv_u77 to %struct.sv**
  %49 = load %struct.sv*, %struct.sv** %svu_rv78, align 8
  store %struct.sv* %49, %struct.sv** %value, align 8
  %50 = load %struct.gv*, %struct.gv** %gv, align 8
  %51 = bitcast %struct.gv* %50 to i8*
  %52 = bitcast i8* %51 to %struct.sv*
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %53, 255
  %cmp81 = icmp uge i32 %and80, 1
  br i1 %cmp81, label %lor.end84, label %lor.rhs83

lor.rhs83:                                        ; preds = %if.then76
  %54 = load %struct.gv*, %struct.gv** %gv, align 8
  %55 = bitcast %struct.gv* %54 to i8*
  %56 = bitcast i8* %55 to %struct.sv*
  call void @Perl_sv_upgrade(%struct.sv* %56, i32 1)
  br label %lor.end84

lor.end84:                                        ; preds = %lor.rhs83, %if.then76
  %57 = phi i1 [ true, %if.then76 ], [ true, %lor.rhs83 ]
  %lor.ext = zext i1 %57 to i32
  %58 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags85 = getelementptr inbounds %struct.gv, %struct.gv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags85, align 4
  %or = or i32 %59, 34816
  store i32 %or, i32* %sv_flags85, align 4
  br label %do.body

do.body:                                          ; preds = %lor.end84
  %60 = load %struct.sv*, %struct.sv** %value, align 8
  %61 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u86 = getelementptr inbounds %struct.gv, %struct.gv* %61, i32 0, i32 3
  %svu_rv87 = bitcast %union.anon.4* %sv_u86 to %struct.sv**
  store %struct.sv* %60, %struct.sv** %svu_rv87, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body88

do.body88:                                        ; preds = %do.end
  %62 = load %struct.sv*, %struct.sv** %value, align 8
  %tobool89 = icmp ne %struct.sv* %62, null
  br i1 %tobool89, label %if.then90, label %if.end91

if.then90:                                        ; preds = %do.body88
  %63 = load %struct.sv*, %struct.sv** %value, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 1
  %64 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %64, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end91

if.end91:                                         ; preds = %if.then90, %do.body88
  br label %do.end92

do.end92:                                         ; preds = %if.end91
  %65 = load %struct.sv*, %struct.sv** %left, align 8
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %65, %struct.sv** %66, align 8
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %67, %struct.sv*** @PL_stack_sp, align 8
  %68 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %68, i32 0, i32 0
  %69 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %69, %struct.op** %retval, align 8
  br label %return

if.end93:                                         ; preds = %lor.lhs.false71, %lor.lhs.false, %land.lhs.true63, %if.then57
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %cond.end, %land.lhs.true43, %if.end41
  %70 = load i8, i8* %is_gv, align 1
  %tobool95 = trunc i8 %70 to i1
  br i1 %tobool95, label %if.end98, label %if.then96

if.then96:                                        ; preds = %if.end94
  %71 = load %struct.sv*, %struct.sv** %left, align 8
  %call97 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %71, i32 2049, i32 9)
  %72 = bitcast %struct.gv* %call97 to i8*
  %73 = bitcast i8* %72 to %struct.sv*
  store %struct.sv* %73, %struct.sv** %left, align 8
  br label %if.end98

if.end98:                                         ; preds = %if.then96, %if.end94
  %74 = load i8, i8* %got_coderef, align 1
  %tobool99 = trunc i8 %74 to i1
  br i1 %tobool99, label %if.end121, label %if.then100

if.then100:                                       ; preds = %if.end98
  %75 = load %struct.sv*, %struct.sv** %cv, align 8
  %sv_flags101 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags101, align 4
  %and102 = and i32 %76, 2048
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %if.then104, label %if.else

if.then104:                                       ; preds = %if.then100
  call void @Perl_push_scope()
  %77 = load %struct.sv*, %struct.sv** %cv, align 8
  %sv_u105 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 3
  %svu_rv106 = bitcast %union.anon* %sv_u105 to %struct.sv**
  %78 = load %struct.sv*, %struct.sv** %svu_rv106, align 8
  %79 = bitcast %struct.sv* %78 to i8*
  %80 = bitcast i8* %79 to %struct.sv*
  call void @S_SvREFCNT_inc_void(%struct.sv* %80)
  br label %do.body107

do.body107:                                       ; preds = %if.then104
  %81 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 0
  %82 = load i8*, i8** %sv_any, align 8
  %83 = bitcast i8* %82 to %struct.xpvgv*
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %83, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %84 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %85 = load %struct.sv*, %struct.sv** %cv, align 8
  %sv_u108 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 3
  %svu_rv109 = bitcast %union.anon* %sv_u108 to %struct.sv**
  %86 = load %struct.sv*, %struct.sv** %svu_rv109, align 8
  %call110 = call %struct.cv* @Perl_newCONSTSUB(%struct.hv* %84, i8* null, %struct.sv* %86)
  %87 = bitcast %struct.cv* %call110 to i8*
  %88 = bitcast i8* %87 to %struct.sv*
  %89 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_u111 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 3
  %svu_rv112 = bitcast %union.anon* %sv_u111 to %struct.sv**
  store %struct.sv* %88, %struct.sv** %svu_rv112, align 8
  br label %do.end113

do.end113:                                        ; preds = %do.body107
  %90 = load %struct.sv*, %struct.sv** %cv, align 8
  %91 = bitcast %struct.sv* %90 to i8*
  %92 = bitcast i8* %91 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %92)
  call void @Perl_pop_scope()
  br label %if.end120

if.else:                                          ; preds = %if.then100
  %93 = load %struct.sv*, %struct.sv** %cv, align 8
  %94 = bitcast %struct.sv* %93 to i8*
  %95 = bitcast i8* %94 to %struct.gv*
  store %struct.gv* %95, %struct.gv** %upgraded, align 8
  %96 = load %struct.gv*, %struct.gv** %upgraded, align 8
  %sv_u114 = getelementptr inbounds %struct.gv, %struct.gv* %96, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u114 to %struct.gp**
  %97 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %97, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %98 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr115 = getelementptr inbounds %struct.cv, %struct.cv* %98, i64 0
  store %struct.cv* %add.ptr115, %struct.cv** %source, align 8
  %99 = load %struct.cv*, %struct.cv** %source, align 8
  %100 = bitcast %struct.cv* %99 to i8*
  %101 = bitcast i8* %100 to %struct.sv*
  call void @S_SvREFCNT_inc_void(%struct.sv* %101)
  %102 = load %struct.gv*, %struct.gv** %upgraded, align 8
  %103 = bitcast %struct.gv* %102 to i8*
  %104 = bitcast i8* %103 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %104)
  br label %do.body116

do.body116:                                       ; preds = %if.else
  %105 = load %struct.cv*, %struct.cv** %source, align 8
  %106 = bitcast %struct.cv* %105 to i8*
  %107 = bitcast i8* %106 to %struct.sv*
  %108 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_u117 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 3
  %svu_rv118 = bitcast %union.anon* %sv_u117 to %struct.sv**
  store %struct.sv* %107, %struct.sv** %svu_rv118, align 8
  br label %do.end119

do.end119:                                        ; preds = %do.body116
  br label %if.end120

if.end120:                                        ; preds = %do.end119, %do.end113
  br label %if.end121

if.end121:                                        ; preds = %if.end120, %if.end98
  br label %if.end122

if.end122:                                        ; preds = %if.end121, %cond.false17, %cond.true16
  %109 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags123 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags123, align 4
  %and124 = and i32 %110, 524288
  %tobool125 = icmp ne i32 %and124, 0
  br i1 %tobool125, label %cond.true126, label %cond.false127

cond.true126:                                     ; preds = %if.end122
  br i1 true, label %land.lhs.true128, label %if.end159

cond.false127:                                    ; preds = %if.end122
  br i1 false, label %land.lhs.true128, label %if.end159

land.lhs.true128:                                 ; preds = %cond.false127, %cond.true126
  %111 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags129 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 2
  %112 = load i32, i32* %sv_flags129, align 4
  %and130 = and i32 %112, 4194304
  %tobool131 = icmp ne i32 %and130, 0
  br i1 %tobool131, label %if.end159, label %land.lhs.true132

land.lhs.true132:                                 ; preds = %land.lhs.true128
  %113 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_refcnt133 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 1
  %114 = load i32, i32* %sv_refcnt133, align 8
  %cmp134 = icmp eq i32 %114, 1
  br i1 %cmp134, label %land.lhs.true136, label %if.end159

land.lhs.true136:                                 ; preds = %land.lhs.true132
  %115 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags137 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags137, align 4
  %and138 = and i32 %116, 49152
  %cmp139 = icmp eq i32 %and138, 32768
  br i1 %cmp139, label %land.lhs.true141, label %land.lhs.true155

land.lhs.true141:                                 ; preds = %land.lhs.true136
  %117 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags142 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags142, align 4
  %and143 = and i32 %118, 255
  %cmp144 = icmp eq i32 %and143, 9
  br i1 %cmp144, label %lor.lhs.false151, label %lor.lhs.false146

lor.lhs.false146:                                 ; preds = %land.lhs.true141
  %119 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags147 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags147, align 4
  %and148 = and i32 %120, 255
  %cmp149 = icmp eq i32 %and148, 10
  br i1 %cmp149, label %lor.lhs.false151, label %land.lhs.true155

lor.lhs.false151:                                 ; preds = %lor.lhs.false146, %land.lhs.true141
  %121 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags152 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags152, align 4
  %and153 = and i32 %122, 16777216
  %tobool154 = icmp ne i32 %and153, 0
  br i1 %tobool154, label %land.lhs.true155, label %if.end159

land.lhs.true155:                                 ; preds = %lor.lhs.false151, %lor.lhs.false146, %land.lhs.true136
  %call156 = call zeroext i1 @Perl_ckwarn(i32 12)
  br i1 %call156, label %if.then158, label %if.end159

if.then158:                                       ; preds = %land.lhs.true155
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0))
  br label %if.end159

if.end159:                                        ; preds = %if.then158, %land.lhs.true155, %lor.lhs.false151, %land.lhs.true132, %land.lhs.true128, %cond.false127, %cond.true126
  br label %do.body160

do.body160:                                       ; preds = %if.end159
  %123 = load %struct.sv*, %struct.sv** %left, align 8
  %124 = load %struct.sv*, %struct.sv** %right, align 8
  %cmp161 = icmp ne %struct.sv* %123, %124
  br i1 %cmp161, label %cond.true163, label %cond.false164

cond.true163:                                     ; preds = %do.body160
  br i1 true, label %if.then165, label %if.end176

cond.false164:                                    ; preds = %do.body160
  br i1 false, label %if.then165, label %if.end176

if.then165:                                       ; preds = %cond.false164, %cond.true163
  %125 = load %struct.sv*, %struct.sv** %left, align 8
  %126 = load %struct.sv*, %struct.sv** %right, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %125, %struct.sv* %126, i32 1538)
  br label %do.body166

do.body166:                                       ; preds = %if.then165
  %127 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags167 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 2
  %128 = load i32, i32* %sv_flags167, align 4
  %and168 = and i32 %128, 4194304
  %tobool169 = icmp ne i32 %and168, 0
  br i1 %tobool169, label %cond.true170, label %cond.false171

cond.true170:                                     ; preds = %do.body166
  br i1 true, label %if.then172, label %if.end174

cond.false171:                                    ; preds = %do.body166
  br i1 false, label %if.then172, label %if.end174

if.then172:                                       ; preds = %cond.false171, %cond.true170
  %129 = load %struct.sv*, %struct.sv** %left, align 8
  %call173 = call i32 @Perl_mg_set(%struct.sv* %129)
  br label %if.end174

if.end174:                                        ; preds = %if.then172, %cond.false171, %cond.true170
  br label %do.end175

do.end175:                                        ; preds = %if.end174
  br label %if.end176

if.end176:                                        ; preds = %do.end175, %cond.false164, %cond.true163
  br label %do.end177

do.end177:                                        ; preds = %if.end176
  %130 = load %struct.sv*, %struct.sv** %left, align 8
  %131 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %130, %struct.sv** %131, align 8
  %132 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %132, %struct.sv*** @PL_stack_sp, align 8
  %133 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next178 = getelementptr inbounds %struct.op, %struct.op* %133, i32 0, i32 0
  %134 = load %struct.op*, %struct.op** %op_next178, align 8
  store %struct.op* %134, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end177, %do.end92
  %135 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %135
}

declare dso_local zeroext i1 @Perl_sv_tainted(%struct.sv*) #1

declare dso_local i32 @Perl_block_gimme() #1

declare dso_local %struct.gv* @Perl_gv_fetchsv(%struct.sv*, i32, i32) #1

declare dso_local void @Perl_sv_upgrade(%struct.sv*, i32) #1

declare dso_local void @Perl_push_scope() #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_inc_void(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  ret void
}

declare dso_local %struct.cv* @Perl_newCONSTSUB(%struct.hv*, i8*, %struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec_NN(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 1
  %1 = load i32, i32* %sv_refcnt, align 8
  store i32 %1, i32* %rc, align 4
  %2 = load i32, i32* %rc, align 4
  %cmp = icmp ugt i32 %2, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.else

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load i32, i32* %rc, align 4
  %sub = sub i32 %3, 1
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt1, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %6 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %5, i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare dso_local void @Perl_pop_scope() #1

declare dso_local zeroext i1 @Perl_ckwarn(i32) #1

declare dso_local void @Perl_warner(i32, i8*, ...) #1

declare dso_local void @Perl_sv_setsv_flags(%struct.sv*, %struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_cond_expr() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load i32, i32* @PL_sig_pending, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %2 = load void ()*, void ()** @PL_signalhook, align 8
  call void %2()
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  store %struct.sv* %4, %struct.sv** @PL_Sv, align 8
  %5 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool1 = icmp ne %struct.sv* %5, null
  br i1 %tobool1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %if.end
  br i1 true, label %land.rhs, label %land.end77

cond.false3:                                      ; preds = %if.end
  br i1 false, label %land.rhs, label %land.end77

land.rhs:                                         ; preds = %cond.false3, %cond.true2
  %6 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 2097152
  %tobool4 = icmp ne i32 %and, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %land.rhs
  br i1 true, label %cond.true7, label %cond.false8

cond.false6:                                      ; preds = %land.rhs
  br i1 false, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %cond.false6, %cond.true5
  %8 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %8, i32 2)
  %conv = zext i1 %call to i32
  br label %cond.end74

cond.false8:                                      ; preds = %cond.false6, %cond.true5
  %9 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %10, 65280
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cond.false21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false8
  %11 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %12, 255
  %cmp = icmp eq i32 %and13, 8
  br i1 %cmp, label %cond.false21, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %13 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %14, 16826623
  %cmp18 = icmp eq i32 %and17, 16777226
  br i1 %cmp18, label %cond.false21, label %cond.true20

cond.true20:                                      ; preds = %lor.lhs.false15
  br label %cond.end72

cond.false21:                                     ; preds = %lor.lhs.false15, %lor.lhs.false, %cond.false8
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %16, 1024
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %cond.true25, label %cond.false39

cond.true25:                                      ; preds = %cond.false21
  %17 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpv*
  %tobool26 = icmp ne %struct.xpv* %19, null
  br i1 %tobool26, label %land.rhs27, label %land.end38

land.rhs27:                                       ; preds = %cond.true25
  %20 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any28 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any28, align 8
  %22 = bitcast i8* %21 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %22, i32 0, i32 2
  %23 = load i64, i64* %xpv_cur, align 8
  %cmp29 = icmp ugt i64 %23, 1
  br i1 %cmp29, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs27
  %24 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any31 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any31, align 8
  %26 = bitcast i8* %25 to %struct.xpv*
  %xpv_cur32 = getelementptr inbounds %struct.xpv, %struct.xpv* %26, i32 0, i32 2
  %27 = load i64, i64* %xpv_cur32, align 8
  %tobool33 = icmp ne i64 %27, 0
  br i1 %tobool33, label %land.rhs34, label %land.end

land.rhs34:                                       ; preds = %lor.rhs
  %28 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %29 = load i8*, i8** %svu_pv, align 8
  %30 = load i8, i8* %29, align 1
  %conv35 = sext i8 %30 to i32
  %cmp36 = icmp ne i32 %conv35, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs34, %lor.rhs
  %31 = phi i1 [ false, %lor.rhs ], [ %cmp36, %land.rhs34 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs27
  %32 = phi i1 [ true, %land.rhs27 ], [ %31, %land.end ]
  br label %land.end38

land.end38:                                       ; preds = %lor.end, %cond.true25
  %33 = phi i1 [ false, %cond.true25 ], [ %32, %lor.end ]
  %land.ext = zext i1 %33 to i32
  br label %cond.end70

cond.false39:                                     ; preds = %cond.false21
  %34 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %35, 768
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %cond.true43, label %cond.false67

cond.true43:                                      ; preds = %cond.false39
  %36 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %37, 256
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %land.lhs.true, label %lor.rhs50

land.lhs.true:                                    ; preds = %cond.true43
  %38 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any47 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any47, align 8
  %40 = bitcast i8* %39 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %40, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %41 = load i64, i64* %xivu_iv, align 8
  %cmp48 = icmp ne i64 %41, 0
  br i1 %cmp48, label %lor.end66, label %lor.rhs50

lor.rhs50:                                        ; preds = %land.lhs.true, %cond.true43
  %42 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %43, 512
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %land.rhs54, label %land.end64

land.rhs54:                                       ; preds = %lor.rhs50
  %44 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any55 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 0
  %45 = load i8*, i8** %sv_any55, align 8
  %46 = bitcast i8* %45 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %46, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %47 = load double, double* %xnv_nv, align 8
  %cmp56 = fcmp uno double %47, %47
  br i1 %cmp56, label %lor.end63, label %lor.rhs57

lor.rhs57:                                        ; preds = %land.rhs54
  %48 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any58 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any58, align 8
  %50 = bitcast i8* %49 to %struct.xpvnv*
  %xnv_u59 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %50, i32 0, i32 5
  %xnv_nv60 = bitcast %union._xnvu* %xnv_u59 to double*
  %51 = load double, double* %xnv_nv60, align 8
  %cmp61 = fcmp une double %51, 0.000000e+00
  br label %lor.end63

lor.end63:                                        ; preds = %lor.rhs57, %land.rhs54
  %52 = phi i1 [ true, %land.rhs54 ], [ %cmp61, %lor.rhs57 ]
  br label %land.end64

land.end64:                                       ; preds = %lor.end63, %lor.rhs50
  %53 = phi i1 [ false, %lor.rhs50 ], [ %52, %lor.end63 ]
  br label %lor.end66

lor.end66:                                        ; preds = %land.end64, %land.lhs.true
  %54 = phi i1 [ true, %land.lhs.true ], [ %53, %land.end64 ]
  %lor.ext = zext i1 %54 to i32
  br label %cond.end

cond.false67:                                     ; preds = %cond.false39
  %55 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call68 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %55, i32 0)
  %conv69 = zext i1 %call68 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false67, %lor.end66
  %cond = phi i32 [ %lor.ext, %lor.end66 ], [ %conv69, %cond.false67 ]
  br label %cond.end70

cond.end70:                                       ; preds = %cond.end, %land.end38
  %cond71 = phi i32 [ %land.ext, %land.end38 ], [ %cond, %cond.end ]
  br label %cond.end72

cond.end72:                                       ; preds = %cond.end70, %cond.true20
  %cond73 = phi i32 [ 0, %cond.true20 ], [ %cond71, %cond.end70 ]
  br label %cond.end74

cond.end74:                                       ; preds = %cond.end72, %cond.true7
  %cond75 = phi i32 [ %conv, %cond.true7 ], [ %cond73, %cond.end72 ]
  %tobool76 = icmp ne i32 %cond75, 0
  br label %land.end77

land.end77:                                       ; preds = %cond.end74, %cond.false3, %cond.true2
  %56 = phi i1 [ false, %cond.false3 ], [ false, %cond.true2 ], [ %tobool76, %cond.end74 ]
  br i1 %56, label %if.then79, label %if.else

if.then79:                                        ; preds = %land.end77
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %57, %struct.sv*** @PL_stack_sp, align 8
  %58 = load %struct.op*, %struct.op** @PL_op, align 8
  %59 = bitcast %struct.op* %58 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %59, i32 0, i32 8
  %60 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %60, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %land.end77
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %61, %struct.sv*** @PL_stack_sp, align 8
  %62 = load %struct.op*, %struct.op** @PL_op, align 8
  %63 = bitcast %struct.op* %62 to %struct.logop*
  %op_next = getelementptr inbounds %struct.logop, %struct.logop* %63, i32 0, i32 0
  %64 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %64, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then79
  %65 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %65
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_unstack() #0 {
entry:
  %oldsave = alloca i32, align 4
  %0 = load i32, i32* @PL_sig_pending, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load void ()*, void ()** @PL_signalhook, align 8
  call void %1()
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  store i8 0, i8* @PL_tainted, align 1
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 1
  %4 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 4
  %6 = load i32, i32* %si_cxix, align 8
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %4, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 0
  %cx_blk = bitcast %union.anon.17* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 3
  %7 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %2, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_sp, align 8
  %8 = load i64, i64* @PL_tmps_ix, align 8
  %9 = load i64, i64* @PL_tmps_floor, align 8
  %cmp = icmp sgt i64 %8, %9
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  call void @Perl_free_tmps()
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 5
  %11 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %11 to i32
  %and = and i32 %conv, 128
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.end11, label %if.then4

if.then4:                                         ; preds = %if.end2
  %12 = load i32*, i32** @PL_scopestack, align 8
  %13 = load i32, i32* @PL_scopestack_ix, align 4
  %sub = sub nsw i32 %13, 1
  %idxprom5 = sext i32 %sub to i64
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i64 %idxprom5
  %14 = load i32, i32* %arrayidx6, align 4
  store i32 %14, i32* %oldsave, align 4
  br label %do.body

do.body:                                          ; preds = %if.then4
  %15 = load i32, i32* @PL_savestack_ix, align 4
  %16 = load i32, i32* %oldsave, align 4
  %cmp7 = icmp sgt i32 %15, %16
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %do.body
  %17 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %17)
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end10
  br label %if.end11

if.end11:                                         ; preds = %do.end, %if.end2
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  %19 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %19
}

declare dso_local void @Perl_leave_scope(i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_concat() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %lbyte = alloca i8, align 1
  %rlen = alloca i64, align 8
  %rpv = alloca i8*, align 8
  %rbyte = alloca i8, align 1
  %rcopied = alloca i8, align 1
  %llen = alloca i64, align 8
  %lpv = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 70, i32 4)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %right, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  store %struct.sv* %20, %struct.sv** %left, align 8
  store i8* null, i8** %rpv, align 8
  store i8 0, i8* %rbyte, align 1
  store i8 0, i8* %rcopied, align 1
  %21 = load %struct.sv*, %struct.sv** %targ, align 8
  %22 = load %struct.sv*, %struct.sv** %right, align 8
  %cmp = icmp eq %struct.sv* %21, %22
  br i1 %cmp, label %land.lhs.true9, label %if.end44

land.lhs.true9:                                   ; preds = %do.end
  %23 = load %struct.sv*, %struct.sv** %right, align 8
  %24 = load %struct.sv*, %struct.sv** %left, align 8
  %cmp10 = icmp ne %struct.sv* %23, %24
  br i1 %cmp10, label %if.then12, label %if.end44

if.then12:                                        ; preds = %land.lhs.true9
  %25 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %26, 2098176
  %cmp15 = icmp eq i32 %and14, 1024
  br i1 %cmp15, label %cond.true17, label %cond.false19

cond.true17:                                      ; preds = %if.then12
  %27 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any, align 8
  %29 = bitcast i8* %28 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %29, i32 0, i32 2
  %30 = load i64, i64* %xpv_cur, align 8
  store i64 %30, i64* %rlen, align 8
  %31 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %32 = load i8*, i8** %svu_pv, align 8
  %add.ptr18 = getelementptr inbounds i8, i8* %32, i64 0
  br label %cond.end21

cond.false19:                                     ; preds = %if.then12
  %33 = load %struct.sv*, %struct.sv** %right, align 8
  %call20 = call i8* @Perl_sv_2pv_flags(%struct.sv* %33, i64* %rlen, i32 32)
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false19, %cond.true17
  %cond22 = phi i8* [ %add.ptr18, %cond.true17 ], [ %call20, %cond.false19 ]
  store i8* %cond22, i8** %rpv, align 8
  %34 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %35, 536870912
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end21
  %36 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %36, i32 0, i32 10
  %37 = load i32, i32* %cop_hints, align 8
  %add = add i32 %37, 0
  %and26 = and i32 %add, 8
  %tobool27 = icmp ne i32 %and26, 0
  %lnot = xor i1 %tobool27, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end21
  %38 = phi i1 [ false, %cond.end21 ], [ %lnot, %land.rhs ]
  %lnot28 = xor i1 %38, true
  %frombool = zext i1 %lnot28 to i8
  store i8 %frombool, i8* %rbyte, align 1
  %39 = load i8*, i8** %rpv, align 8
  %40 = load i64, i64* %rlen, align 8
  %call29 = call %struct.sv* @Perl_newSVpvn_flags(i8* %39, i64 %40, i32 524288)
  store %struct.sv* %call29, %struct.sv** %right, align 8
  %41 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %42, 2098176
  %cmp32 = icmp eq i32 %and31, 1024
  br i1 %cmp32, label %cond.true34, label %cond.false40

cond.true34:                                      ; preds = %land.end
  %43 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any35, align 8
  %45 = bitcast i8* %44 to %struct.xpv*
  %xpv_cur36 = getelementptr inbounds %struct.xpv, %struct.xpv* %45, i32 0, i32 2
  %46 = load i64, i64* %xpv_cur36, align 8
  store i64 %46, i64* %rlen, align 8
  %47 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_u37 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 3
  %svu_pv38 = bitcast %union.anon* %sv_u37 to i8**
  %48 = load i8*, i8** %svu_pv38, align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %48, i64 0
  br label %cond.end42

cond.false40:                                     ; preds = %land.end
  %49 = load %struct.sv*, %struct.sv** %right, align 8
  %call41 = call i8* @Perl_sv_2pv_flags(%struct.sv* %49, i64* %rlen, i32 34)
  br label %cond.end42

cond.end42:                                       ; preds = %cond.false40, %cond.true34
  %cond43 = phi i8* [ %add.ptr39, %cond.true34 ], [ %call41, %cond.false40 ]
  store i8* %cond43, i8** %rpv, align 8
  store i8 1, i8* %rcopied, align 1
  br label %if.end44

if.end44:                                         ; preds = %cond.end42, %land.lhs.true9, %do.end
  %50 = load %struct.sv*, %struct.sv** %targ, align 8
  %51 = load %struct.sv*, %struct.sv** %left, align 8
  %cmp45 = icmp ne %struct.sv* %50, %51
  br i1 %cmp45, label %if.then47, label %if.else81

if.then47:                                        ; preds = %if.end44
  %52 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %53, 2098176
  %cmp50 = icmp eq i32 %and49, 1024
  br i1 %cmp50, label %cond.true52, label %cond.false58

cond.true52:                                      ; preds = %if.then47
  %54 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any53, align 8
  %56 = bitcast i8* %55 to %struct.xpv*
  %xpv_cur54 = getelementptr inbounds %struct.xpv, %struct.xpv* %56, i32 0, i32 2
  %57 = load i64, i64* %xpv_cur54, align 8
  store i64 %57, i64* %llen, align 8
  %58 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_u55 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 3
  %svu_pv56 = bitcast %union.anon* %sv_u55 to i8**
  %59 = load i8*, i8** %svu_pv56, align 8
  %add.ptr57 = getelementptr inbounds i8, i8* %59, i64 0
  br label %cond.end60

cond.false58:                                     ; preds = %if.then47
  %60 = load %struct.sv*, %struct.sv** %left, align 8
  %call59 = call i8* @Perl_sv_2pv_flags(%struct.sv* %60, i64* %llen, i32 32)
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false58, %cond.true52
  %cond61 = phi i8* [ %add.ptr57, %cond.true52 ], [ %call59, %cond.false58 ]
  store i8* %cond61, i8** %lpv, align 8
  %61 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %62, 536870912
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %land.rhs65, label %land.end71

land.rhs65:                                       ; preds = %cond.end60
  %63 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints66 = getelementptr inbounds %struct.cop, %struct.cop* %63, i32 0, i32 10
  %64 = load i32, i32* %cop_hints66, align 8
  %add67 = add i32 %64, 0
  %and68 = and i32 %add67, 8
  %tobool69 = icmp ne i32 %and68, 0
  %lnot70 = xor i1 %tobool69, true
  br label %land.end71

land.end71:                                       ; preds = %land.rhs65, %cond.end60
  %65 = phi i1 [ false, %cond.end60 ], [ %lnot70, %land.rhs65 ]
  %lnot72 = xor i1 %65, true
  %frombool73 = zext i1 %lnot72 to i8
  store i8 %frombool73, i8* %lbyte, align 1
  %66 = load %struct.sv*, %struct.sv** %targ, align 8
  %67 = load i8*, i8** %lpv, align 8
  %68 = load i64, i64* %llen, align 8
  call void @Perl_sv_setpvn(%struct.sv* %66, i8* %67, i64 %68)
  %69 = load i8, i8* %lbyte, align 1
  %tobool74 = trunc i8 %69 to i1
  br i1 %tobool74, label %if.else, label %if.then75

if.then75:                                        ; preds = %land.end71
  %70 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags76 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags76, align 4
  %or77 = or i32 %71, 536870912
  store i32 %or77, i32* %sv_flags76, align 4
  br label %if.end80

if.else:                                          ; preds = %land.end71
  %72 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags78 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags78, align 4
  %and79 = and i32 %73, -536870913
  store i32 %and79, i32* %sv_flags78, align 4
  br label %if.end80

if.end80:                                         ; preds = %if.else, %if.then75
  br label %if.end135

if.else81:                                        ; preds = %if.end44
  %74 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags82 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags82, align 4
  %and83 = and i32 %75, 65280
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %if.else102, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else81
  %76 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags85 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags85, align 4
  %and86 = and i32 %77, 255
  %cmp87 = icmp eq i32 %and86, 8
  br i1 %cmp87, label %if.else102, label %lor.lhs.false89

lor.lhs.false89:                                  ; preds = %lor.lhs.false
  %78 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags90 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags90, align 4
  %and91 = and i32 %79, 16826623
  %cmp92 = icmp eq i32 %and91, 16777226
  br i1 %cmp92, label %if.else102, label %if.then94

if.then94:                                        ; preds = %lor.lhs.false89
  %80 = load %struct.sv*, %struct.sv** %left, align 8
  %81 = load %struct.sv*, %struct.sv** %right, align 8
  %cmp95 = icmp eq %struct.sv* %80, %81
  br i1 %cmp95, label %land.lhs.true97, label %if.end101

land.lhs.true97:                                  ; preds = %if.then94
  %call98 = call zeroext i1 @Perl_ckwarn(i32 41)
  br i1 %call98, label %if.then100, label %if.end101

if.then100:                                       ; preds = %land.lhs.true97
  %82 = load %struct.sv*, %struct.sv** %right, align 8
  call void @Perl_report_uninit(%struct.sv* %82)
  br label %if.end101

if.end101:                                        ; preds = %if.then100, %land.lhs.true97, %if.then94
  %83 = load %struct.sv*, %struct.sv** %left, align 8
  call void @Perl_sv_setpvn(%struct.sv* %83, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)
  br label %if.end114

if.else102:                                       ; preds = %lor.lhs.false89, %lor.lhs.false, %if.else81
  %84 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags103 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags103, align 4
  %and104 = and i32 %85, 430018304
  %cmp105 = icmp eq i32 %and104, 1024
  br i1 %cmp105, label %cond.true107, label %cond.false110

cond.true107:                                     ; preds = %if.else102
  %86 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_u108 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 3
  %svu_pv109 = bitcast %union.anon* %sv_u108 to i8**
  %87 = load i8*, i8** %svu_pv109, align 8
  br label %cond.end112

cond.false110:                                    ; preds = %if.else102
  %88 = load %struct.sv*, %struct.sv** %left, align 8
  %call111 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %88, i64* null, i32 0)
  br label %cond.end112

cond.end112:                                      ; preds = %cond.false110, %cond.true107
  %cond113 = phi i8* [ %87, %cond.true107 ], [ %call111, %cond.false110 ]
  br label %if.end114

if.end114:                                        ; preds = %cond.end112, %if.end101
  %89 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %90, 536870912
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %land.rhs118, label %land.end124

land.rhs118:                                      ; preds = %if.end114
  %91 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints119 = getelementptr inbounds %struct.cop, %struct.cop* %91, i32 0, i32 10
  %92 = load i32, i32* %cop_hints119, align 8
  %add120 = add i32 %92, 0
  %and121 = and i32 %add120, 8
  %tobool122 = icmp ne i32 %and121, 0
  %lnot123 = xor i1 %tobool122, true
  br label %land.end124

land.end124:                                      ; preds = %land.rhs118, %if.end114
  %93 = phi i1 [ false, %if.end114 ], [ %lnot123, %land.rhs118 ]
  %lnot125 = xor i1 %93, true
  %frombool126 = zext i1 %lnot125 to i8
  store i8 %frombool126, i8* %lbyte, align 1
  %94 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints127 = getelementptr inbounds %struct.cop, %struct.cop* %94, i32 0, i32 10
  %95 = load i32, i32* %cop_hints127, align 8
  %add128 = add i32 %95, 0
  %and129 = and i32 %add128, 8
  %tobool130 = icmp ne i32 %and129, 0
  br i1 %tobool130, label %if.then131, label %if.end134

if.then131:                                       ; preds = %land.end124
  %96 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags132 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags132, align 4
  %and133 = and i32 %97, -536870913
  store i32 %and133, i32* %sv_flags132, align 4
  br label %if.end134

if.end134:                                        ; preds = %if.then131, %land.end124
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %if.end80
  %98 = load i8, i8* %rcopied, align 1
  %tobool136 = trunc i8 %98 to i1
  br i1 %tobool136, label %if.end164, label %if.then137

if.then137:                                       ; preds = %if.end135
  %99 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags138 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 2
  %100 = load i32, i32* %sv_flags138, align 4
  %and139 = and i32 %100, 2098176
  %cmp140 = icmp eq i32 %and139, 1024
  br i1 %cmp140, label %cond.true142, label %cond.false148

cond.true142:                                     ; preds = %if.then137
  %101 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any143 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 0
  %102 = load i8*, i8** %sv_any143, align 8
  %103 = bitcast i8* %102 to %struct.xpv*
  %xpv_cur144 = getelementptr inbounds %struct.xpv, %struct.xpv* %103, i32 0, i32 2
  %104 = load i64, i64* %xpv_cur144, align 8
  store i64 %104, i64* %rlen, align 8
  %105 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_u145 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 3
  %svu_pv146 = bitcast %union.anon* %sv_u145 to i8**
  %106 = load i8*, i8** %svu_pv146, align 8
  %add.ptr147 = getelementptr inbounds i8, i8* %106, i64 0
  br label %cond.end150

cond.false148:                                    ; preds = %if.then137
  %107 = load %struct.sv*, %struct.sv** %right, align 8
  %call149 = call i8* @Perl_sv_2pv_flags(%struct.sv* %107, i64* %rlen, i32 32)
  br label %cond.end150

cond.end150:                                      ; preds = %cond.false148, %cond.true142
  %cond151 = phi i8* [ %add.ptr147, %cond.true142 ], [ %call149, %cond.false148 ]
  store i8* %cond151, i8** %rpv, align 8
  %108 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags152 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 2
  %109 = load i32, i32* %sv_flags152, align 4
  %and153 = and i32 %109, 536870912
  %tobool154 = icmp ne i32 %and153, 0
  br i1 %tobool154, label %land.rhs155, label %land.end161

land.rhs155:                                      ; preds = %cond.end150
  %110 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints156 = getelementptr inbounds %struct.cop, %struct.cop* %110, i32 0, i32 10
  %111 = load i32, i32* %cop_hints156, align 8
  %add157 = add i32 %111, 0
  %and158 = and i32 %add157, 8
  %tobool159 = icmp ne i32 %and158, 0
  %lnot160 = xor i1 %tobool159, true
  br label %land.end161

land.end161:                                      ; preds = %land.rhs155, %cond.end150
  %112 = phi i1 [ false, %cond.end150 ], [ %lnot160, %land.rhs155 ]
  %lnot162 = xor i1 %112, true
  %frombool163 = zext i1 %lnot162 to i8
  store i8 %frombool163, i8* %rbyte, align 1
  br label %if.end164

if.end164:                                        ; preds = %land.end161, %if.end135
  %113 = load i8, i8* %lbyte, align 1
  %tobool165 = trunc i8 %113 to i1
  %conv166 = zext i1 %tobool165 to i32
  %114 = load i8, i8* %rbyte, align 1
  %tobool167 = trunc i8 %114 to i1
  %conv168 = zext i1 %tobool167 to i32
  %cmp169 = icmp ne i32 %conv166, %conv168
  br i1 %cmp169, label %if.then171, label %if.end196

if.then171:                                       ; preds = %if.end164
  %115 = load i8, i8* %lbyte, align 1
  %tobool172 = trunc i8 %115 to i1
  br i1 %tobool172, label %if.then173, label %if.else175

if.then173:                                       ; preds = %if.then171
  %116 = load %struct.sv*, %struct.sv** %targ, align 8
  %call174 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %116, i32 0, i64 0)
  br label %if.end195

if.else175:                                       ; preds = %if.then171
  %117 = load i8, i8* %rcopied, align 1
  %tobool176 = trunc i8 %117 to i1
  br i1 %tobool176, label %if.end179, label %if.then177

if.then177:                                       ; preds = %if.else175
  %118 = load i8*, i8** %rpv, align 8
  %119 = load i64, i64* %rlen, align 8
  %call178 = call %struct.sv* @Perl_newSVpvn_flags(i8* %118, i64 %119, i32 524288)
  store %struct.sv* %call178, %struct.sv** %right, align 8
  br label %if.end179

if.end179:                                        ; preds = %if.then177, %if.else175
  %120 = load %struct.sv*, %struct.sv** %right, align 8
  %call180 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %120, i32 0, i64 0)
  %121 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags181 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags181, align 4
  %and182 = and i32 %122, 2098176
  %cmp183 = icmp eq i32 %and182, 1024
  br i1 %cmp183, label %cond.true185, label %cond.false191

cond.true185:                                     ; preds = %if.end179
  %123 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any186 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any186, align 8
  %125 = bitcast i8* %124 to %struct.xpv*
  %xpv_cur187 = getelementptr inbounds %struct.xpv, %struct.xpv* %125, i32 0, i32 2
  %126 = load i64, i64* %xpv_cur187, align 8
  store i64 %126, i64* %rlen, align 8
  %127 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_u188 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 3
  %svu_pv189 = bitcast %union.anon* %sv_u188 to i8**
  %128 = load i8*, i8** %svu_pv189, align 8
  %add.ptr190 = getelementptr inbounds i8, i8* %128, i64 0
  br label %cond.end193

cond.false191:                                    ; preds = %if.end179
  %129 = load %struct.sv*, %struct.sv** %right, align 8
  %call192 = call i8* @Perl_sv_2pv_flags(%struct.sv* %129, i64* %rlen, i32 32)
  br label %cond.end193

cond.end193:                                      ; preds = %cond.false191, %cond.true185
  %cond194 = phi i8* [ %add.ptr190, %cond.true185 ], [ %call192, %cond.false191 ]
  store i8* %cond194, i8** %rpv, align 8
  br label %if.end195

if.end195:                                        ; preds = %cond.end193, %if.then173
  br label %if.end196

if.end196:                                        ; preds = %if.end195, %if.end164
  %130 = load %struct.sv*, %struct.sv** %targ, align 8
  %131 = load i8*, i8** %rpv, align 8
  %132 = load i64, i64* %rlen, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %130, i8* %131, i64 %132, i32 0)
  br label %do.body197

do.body197:                                       ; preds = %if.end196
  br label %do.body198

do.body198:                                       ; preds = %do.body197
  %133 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags199 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 2
  %134 = load i32, i32* %sv_flags199, align 4
  %and200 = and i32 %134, 4194304
  %tobool201 = icmp ne i32 %and200, 0
  br i1 %tobool201, label %cond.true202, label %cond.false203

cond.true202:                                     ; preds = %do.body198
  br i1 true, label %if.then204, label %if.end206

cond.false203:                                    ; preds = %do.body198
  br i1 false, label %if.then204, label %if.end206

if.then204:                                       ; preds = %cond.false203, %cond.true202
  %135 = load %struct.sv*, %struct.sv** %targ, align 8
  %call205 = call i32 @Perl_mg_set(%struct.sv* %135)
  br label %if.end206

if.end206:                                        ; preds = %if.then204, %cond.false203, %cond.true202
  br label %do.end207

do.end207:                                        ; preds = %if.end206
  %136 = load %struct.sv*, %struct.sv** %targ, align 8
  %137 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %136, %struct.sv** %137, align 8
  br label %do.end208

do.end208:                                        ; preds = %do.end207
  %138 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %138, %struct.sv*** @PL_stack_sp, align 8
  %139 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next209 = getelementptr inbounds %struct.op, %struct.op* %139, i32 0, i32 0
  %140 = load %struct.op*, %struct.op** %op_next209, align 8
  store %struct.op* %140, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end208, %if.then
  %141 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %141
}

declare dso_local zeroext i1 @Perl_try_amagic_bin(i32, i32) #1

declare dso_local i8* @Perl_sv_2pv_flags(%struct.sv*, i64*, i32) #1

declare dso_local %struct.sv* @Perl_newSVpvn_flags(i8*, i64, i32) #1

declare dso_local void @Perl_sv_setpvn(%struct.sv*, i8*, i64) #1

declare dso_local void @Perl_report_uninit(%struct.sv*) #1

declare dso_local i8* @Perl_sv_pvn_force_flags(%struct.sv*, i64*, i32) #1

declare dso_local i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv*, i32, i64) #1

declare dso_local void @Perl_sv_catpvn_flags(%struct.sv*, i8*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_padrange() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %base = alloca i64, align 8
  %count = alloca i32, align 4
  %i = alloca i32, align 4
  %mark_stack_entry = alloca i32*, align 8
  %mark_stack_entry41 = alloca i32*, align 8
  %svp = alloca %struct.sv**, align 8
  %payload = alloca i64, align 8
  %ix = alloca i32, align 4
  %ssp = alloca %union.any*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 3
  %2 = load i64, i64* %op_targ, align 8
  store i64 %2, i64* %base, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_private, align 1
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 127
  store i32 %and, i32* %count, align 4
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags, align 2
  %conv1 = zext i8 %6 to i32
  %and2 = and i32 %conv1, 128
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %7 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %7, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr, i32** %mark_stack_entry, align 8
  %8 = load i32*, i32** @PL_markstack_max, align 8
  %cmp = icmp eq i32* %incdec.ptr, %8
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then4, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then4, label %if.end

if.then4:                                         ; preds = %cond.false, %cond.true
  %call = call i32* @Perl_markstack_grow()
  store i32* %call, i32** %mark_stack_entry, align 8
  br label %if.end

if.end:                                           ; preds = %if.then4, %cond.false, %cond.true
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %10 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %9 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv5 = trunc i64 %sub.ptr.div to i32
  %11 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv5, i32* %11, align 4
  br label %do.end

do.end:                                           ; preds = %if.end
  %12 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %12, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %13 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %13, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 6
  %14 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool6 = icmp ne %struct.av* %14, null
  br i1 %tobool6, label %cond.true7, label %cond.false12

cond.true7:                                       ; preds = %do.end
  %15 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u8 = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 3
  %svu_gp9 = bitcast %union.anon.4* %sv_u8 to %struct.gp**
  %16 = load %struct.gp*, %struct.gp** %svu_gp9, align 8
  %add.ptr10 = getelementptr inbounds %struct.gp, %struct.gp* %16, i64 0
  %gp_av11 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr10, i32 0, i32 6
  %17 = load %struct.av*, %struct.av** %gp_av11, align 8
  br label %cond.end

cond.false12:                                     ; preds = %do.end
  %18 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %call13 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %18, i32 11)
  %sv_u14 = getelementptr inbounds %struct.gv, %struct.gv* %call13, i32 0, i32 3
  %svu_gp15 = bitcast %union.anon.4* %sv_u14 to %struct.gp**
  %19 = load %struct.gp*, %struct.gp** %svu_gp15, align 8
  %add.ptr16 = getelementptr inbounds %struct.gp, %struct.gp* %19, i64 0
  %gp_av17 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr16, i32 0, i32 6
  %20 = load %struct.av*, %struct.av** %gp_av17, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false12, %cond.true7
  %cond = phi %struct.av* [ %17, %cond.true7 ], [ %20, %cond.false12 ]
  call void @S_pushav(%struct.av* %cond)
  %21 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %21, %struct.sv*** %sp, align 8
  br label %if.end18

if.end18:                                         ; preds = %cond.end, %entry
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags19 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 5
  %23 = load i8, i8* %op_flags19, align 2
  %conv20 = zext i8 %23 to i32
  %and21 = and i32 %conv20, 3
  %cmp22 = icmp ne i32 %and21, 1
  br i1 %cmp22, label %if.then24, label %if.end60

if.then24:                                        ; preds = %if.end18
  br label %do.body25

do.body25:                                        ; preds = %if.then24
  %24 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast26 = ptrtoint %struct.sv** %24 to i64
  %sub.ptr.rhs.cast27 = ptrtoint %struct.sv** %25 to i64
  %sub.ptr.sub28 = sub i64 %sub.ptr.lhs.cast26, %sub.ptr.rhs.cast27
  %sub.ptr.div29 = sdiv exact i64 %sub.ptr.sub28, 8
  %26 = load i32, i32* %count, align 4
  %conv30 = sext i32 %26 to i64
  %cmp31 = icmp slt i64 %sub.ptr.div29, %conv30
  br i1 %cmp31, label %cond.true33, label %cond.false34

cond.true33:                                      ; preds = %do.body25
  br i1 true, label %if.then35, label %if.end38

cond.false34:                                     ; preds = %do.body25
  br i1 false, label %if.then35, label %if.end38

if.then35:                                        ; preds = %cond.false34, %cond.true33
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load i32, i32* %count, align 4
  %conv36 = sext i32 %29 to i64
  %call37 = call %struct.sv** @Perl_stack_grow(%struct.sv** %27, %struct.sv** %28, i64 %conv36)
  store %struct.sv** %call37, %struct.sv*** %sp, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.then35, %cond.false34, %cond.true33
  br label %do.end39

do.end39:                                         ; preds = %if.end38
  br label %do.body40

do.body40:                                        ; preds = %do.end39
  %31 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr42 = getelementptr inbounds i32, i32* %31, i32 1
  store i32* %incdec.ptr42, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr42, i32** %mark_stack_entry41, align 8
  %32 = load i32*, i32** @PL_markstack_max, align 8
  %cmp43 = icmp eq i32* %incdec.ptr42, %32
  br i1 %cmp43, label %cond.true45, label %cond.false46

cond.true45:                                      ; preds = %do.body40
  br i1 true, label %if.then47, label %if.end49

cond.false46:                                     ; preds = %do.body40
  br i1 false, label %if.then47, label %if.end49

if.then47:                                        ; preds = %cond.false46, %cond.true45
  %call48 = call i32* @Perl_markstack_grow()
  store i32* %call48, i32** %mark_stack_entry41, align 8
  br label %if.end49

if.end49:                                         ; preds = %if.then47, %cond.false46, %cond.true45
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast50 = ptrtoint %struct.sv** %33 to i64
  %sub.ptr.rhs.cast51 = ptrtoint %struct.sv** %34 to i64
  %sub.ptr.sub52 = sub i64 %sub.ptr.lhs.cast50, %sub.ptr.rhs.cast51
  %sub.ptr.div53 = sdiv exact i64 %sub.ptr.sub52, 8
  %conv54 = trunc i64 %sub.ptr.div53 to i32
  %35 = load i32*, i32** %mark_stack_entry41, align 8
  store i32 %conv54, i32* %35, align 4
  br label %do.end55

do.end55:                                         ; preds = %if.end49
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end55
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %count, align 4
  %cmp56 = icmp slt i32 %36, %37
  br i1 %cmp56, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %38 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %39 = load i64, i64* %base, align 8
  %40 = load i32, i32* %i, align 4
  %conv58 = sext i32 %40 to i64
  %add = add i64 %39, %conv58
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %38, i64 %add
  %41 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr59 = getelementptr inbounds %struct.sv*, %struct.sv** %42, i32 1
  store %struct.sv** %incdec.ptr59, %struct.sv*** %sp, align 8
  store %struct.sv* %41, %struct.sv** %incdec.ptr59, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %43 = load i32, i32* %i, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end60

if.end60:                                         ; preds = %for.end, %if.end18
  %44 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private61 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 6
  %45 = load i8, i8* %op_private61, align 1
  %conv62 = zext i8 %45 to i32
  %and63 = and i32 %conv62, 128
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.then65, label %if.end89

if.then65:                                        ; preds = %if.end60
  %46 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %47 = load i64, i64* %base, align 8
  %arrayidx66 = getelementptr inbounds %struct.sv*, %struct.sv** %46, i64 %47
  store %struct.sv** %arrayidx66, %struct.sv*** %svp, align 8
  %48 = load i64, i64* %base, align 8
  %shl = shl i64 %48, 13
  %49 = load i32, i32* %count, align 4
  %shl67 = shl i32 %49, 6
  %conv68 = sext i32 %shl67 to i64
  %or = or i64 %shl, %conv68
  %or69 = or i64 %or, 1
  store i64 %or69, i64* %payload, align 8
  %50 = load i32, i32* @PL_savestack_ix, align 4
  store i32 %50, i32* %ix, align 4
  %51 = load %union.any*, %union.any** @PL_savestack, align 8
  %52 = load i32, i32* %ix, align 4
  %idxprom = sext i32 %52 to i64
  %arrayidx70 = getelementptr inbounds %union.any, %union.any* %51, i64 %idxprom
  store %union.any* %arrayidx70, %union.any** %ssp, align 8
  %53 = load i64, i64* %payload, align 8
  %54 = load %union.any*, %union.any** %ssp, align 8
  %incdec.ptr71 = getelementptr inbounds %union.any, %union.any* %54, i32 1
  store %union.any* %incdec.ptr71, %union.any** %ssp, align 8
  %any_uv = bitcast %union.any* %54 to i64*
  store i64 %53, i64* %any_uv, align 8
  %55 = load i32, i32* %ix, align 4
  %add72 = add nsw i32 %55, 1
  store i32 %add72, i32* %ix, align 4
  %56 = load i32, i32* %ix, align 4
  store i32 %56, i32* @PL_savestack_ix, align 4
  %57 = load i32, i32* %ix, align 4
  %add73 = add nsw i32 %57, 4
  %58 = load i32, i32* @PL_savestack_max, align 4
  %cmp74 = icmp sgt i32 %add73, %58
  br i1 %cmp74, label %cond.true76, label %cond.false77

cond.true76:                                      ; preds = %if.then65
  br i1 true, label %if.then78, label %if.end79

cond.false77:                                     ; preds = %if.then65
  br i1 false, label %if.then78, label %if.end79

if.then78:                                        ; preds = %cond.false77, %cond.true76
  call void @Perl_savestack_grow()
  br label %if.end79

if.end79:                                         ; preds = %if.then78, %cond.false77, %cond.true76
  store i32 0, i32* %i, align 4
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc86, %if.end79
  %59 = load i32, i32* %i, align 4
  %60 = load i32, i32* %count, align 4
  %cmp81 = icmp slt i32 %59, %60
  br i1 %cmp81, label %for.body83, label %for.end88

for.body83:                                       ; preds = %for.cond80
  %61 = load %struct.sv**, %struct.sv*** %svp, align 8
  %incdec.ptr84 = getelementptr inbounds %struct.sv*, %struct.sv** %61, i32 1
  store %struct.sv** %incdec.ptr84, %struct.sv*** %svp, align 8
  %62 = load %struct.sv*, %struct.sv** %61, align 8
  %63 = bitcast %struct.sv* %62 to i8*
  %64 = bitcast i8* %63 to %struct.sv*
  %call85 = call i32 @S_SvPADSTALE_off(%struct.sv* %64)
  br label %for.inc86

for.inc86:                                        ; preds = %for.body83
  %65 = load i32, i32* %i, align 4
  %inc87 = add nsw i32 %65, 1
  store i32 %inc87, i32* %i, align 4
  br label %for.cond80

for.end88:                                        ; preds = %for.cond80
  br label %if.end89

if.end89:                                         ; preds = %for.end88, %if.end60
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %66, %struct.sv*** @PL_stack_sp, align 8
  %67 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %67, i32 0, i32 0
  %68 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %68
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_pushav(%struct.av* %av) #0 {
entry:
  %av.addr = alloca %struct.av*, align 8
  %sp = alloca %struct.sv**, align 8
  %maxarg = alloca i64, align 8
  %i = alloca i64, align 8
  %svp = alloca %struct.sv**, align 8
  %i28 = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  store %struct.av* %av, %struct.av** %av.addr, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.av*, %struct.av** %av.addr, align 8
  %2 = bitcast %struct.av* %1 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 8388608
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.av*, %struct.av** %av.addr, align 8
  %5 = bitcast %struct.av* %4 to i8*
  %6 = bitcast i8* %5 to %struct.sv*
  %call = call i32 @Perl_mg_size(%struct.sv* %6)
  %conv = sext i32 %call to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %7, i32 0, i32 0
  %8 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %8, i32 0, i32 2
  %9 = load i64, i64* %xav_fill, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %9, %cond.false ]
  %add = add nsw i64 %cond, 1
  store i64 %add, i64* %maxarg, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %10 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %10 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %12 = load i64, i64* %maxarg, align 8
  %cmp = icmp slt i64 %sub.ptr.div, %12
  br i1 %cmp, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false3:                                      ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false3, %cond.true2
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %15 = load i64, i64* %maxarg, align 8
  %call4 = call %struct.sv** @Perl_stack_grow(%struct.sv** %13, %struct.sv** %14, i64 %15)
  store %struct.sv** %call4, %struct.sv*** %sp, align 8
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false3, %cond.true2
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.av, %struct.av* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %18, 8388608
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %do.end
  br i1 true, label %if.then10, label %if.else

cond.false9:                                      ; preds = %do.end
  br i1 false, label %if.then10, label %if.else

if.then10:                                        ; preds = %cond.false9, %cond.true8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then10
  %19 = load i64, i64* %i, align 8
  %20 = load i64, i64* %maxarg, align 8
  %cmp11 = icmp ult i64 %19, %20
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load %struct.av*, %struct.av** %av.addr, align 8
  %22 = load i64, i64* %i, align 8
  %call13 = call %struct.sv** @Perl_av_fetch(%struct.av* %21, i64 %22, i32 0)
  store %struct.sv** %call13, %struct.sv*** %svp, align 8
  %23 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool14 = icmp ne %struct.sv** %23, null
  br i1 %tobool14, label %cond.true15, label %cond.false24

cond.true15:                                      ; preds = %for.body
  %24 = load %struct.sv**, %struct.sv*** %svp, align 8
  %25 = load %struct.sv*, %struct.sv** %24, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %26, 2097152
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %cond.true19, label %cond.false21

cond.true19:                                      ; preds = %cond.true15
  %27 = load %struct.sv**, %struct.sv*** %svp, align 8
  %28 = load %struct.sv*, %struct.sv** %27, align 8
  %call20 = call i32 @Perl_mg_get(%struct.sv* %28)
  %29 = load %struct.sv**, %struct.sv*** %svp, align 8
  %30 = load %struct.sv*, %struct.sv** %29, align 8
  br label %cond.end22

cond.false21:                                     ; preds = %cond.true15
  %31 = load %struct.sv**, %struct.sv*** %svp, align 8
  %32 = load %struct.sv*, %struct.sv** %31, align 8
  br label %cond.end22

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi %struct.sv* [ %30, %cond.true19 ], [ %32, %cond.false21 ]
  br label %cond.end25

cond.false24:                                     ; preds = %for.body
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false24, %cond.end22
  %cond26 = phi %struct.sv* [ %cond23, %cond.end22 ], [ @PL_sv_undef, %cond.false24 ]
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load i64, i64* %i, align 8
  %add27 = add i64 %34, 1
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %33, i64 %add27
  store %struct.sv* %cond26, %struct.sv** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end25
  %35 = load i64, i64* %i, align 8
  %inc = add i64 %35, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end46

if.else:                                          ; preds = %cond.false9, %cond.true8
  store i64 0, i64* %i28, align 8
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc43, %if.else
  %36 = load i64, i64* %i28, align 8
  %37 = load i64, i64* %maxarg, align 8
  %cmp30 = icmp ult i64 %36, %37
  br i1 %cmp30, label %for.body32, label %for.end45

for.body32:                                       ; preds = %for.cond29
  %38 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %38, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u to %struct.sv***
  %39 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %40 = load i64, i64* %i28, align 8
  %arrayidx33 = getelementptr inbounds %struct.sv*, %struct.sv** %39, i64 %40
  %41 = load %struct.sv*, %struct.sv** %arrayidx33, align 8
  store %struct.sv* %41, %struct.sv** %sv, align 8
  %42 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool34 = icmp ne %struct.sv* %42, null
  br i1 %tobool34, label %cond.true35, label %cond.false36

cond.true35:                                      ; preds = %for.body32
  br i1 true, label %cond.true37, label %cond.false38

cond.false36:                                     ; preds = %for.body32
  br i1 false, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %cond.false36, %cond.true35
  %43 = load %struct.sv*, %struct.sv** %sv, align 8
  br label %cond.end39

cond.false38:                                     ; preds = %cond.false36, %cond.true35
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond40 = phi %struct.sv* [ %43, %cond.true37 ], [ @PL_sv_undef, %cond.false38 ]
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %45 = load i64, i64* %i28, align 8
  %add41 = add i64 %45, 1
  %arrayidx42 = getelementptr inbounds %struct.sv*, %struct.sv** %44, i64 %add41
  store %struct.sv* %cond40, %struct.sv** %arrayidx42, align 8
  br label %for.inc43

for.inc43:                                        ; preds = %cond.end39
  %46 = load i64, i64* %i28, align 8
  %inc44 = add i64 %46, 1
  store i64 %inc44, i64* %i28, align 8
  br label %for.cond29

for.end45:                                        ; preds = %for.cond29
  br label %if.end46

if.end46:                                         ; preds = %for.end45, %for.end
  %47 = load i64, i64* %maxarg, align 8
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %48, i64 %47
  store %struct.sv** %add.ptr, %struct.sv*** %sp, align 8
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %49, %struct.sv*** @PL_stack_sp, align 8
  ret void
}

declare dso_local void @Perl_savestack_grow() #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_SvPADSTALE_off(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, -262145
  store i32 %and, i32* %sv_flags, align 4
  ret i32 %and
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_padsv() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %op = alloca %struct.op*, align 8
  %padentry = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  store %struct.op* %6, %struct.op** %op, align 8
  %7 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %8 = load %struct.op*, %struct.op** %op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 3
  %9 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %7, i64 %9
  store %struct.sv** %arrayidx, %struct.sv*** %padentry, align 8
  %10 = load %struct.sv**, %struct.sv*** %padentry, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** %targ, align 8
  %12 = load %struct.sv*, %struct.sv** %targ, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %13, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %12, %struct.sv** %incdec.ptr, align 8
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %14, %struct.sv*** @PL_stack_sp, align 8
  %15 = load %struct.op*, %struct.op** %op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 5
  %16 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %16 to i32
  %and = and i32 %conv, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then1, label %if.end23

if.then1:                                         ; preds = %do.end
  %17 = load %struct.op*, %struct.op** %op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 6
  %18 = load i8, i8* %op_private, align 1
  %conv2 = zext i8 %18 to i32
  %and3 = and i32 %conv2, 128
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end12

if.then5:                                         ; preds = %if.then1
  %19 = load %struct.op*, %struct.op** %op, align 8
  %op_private6 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 6
  %20 = load i8, i8* %op_private6, align 1
  %conv7 = zext i8 %20 to i32
  %and8 = and i32 %conv7, 64
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.then5
  %21 = load %struct.sv**, %struct.sv*** %padentry, align 8
  call void @Perl_save_clearsv(%struct.sv** %21)
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.then5
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then1
  %22 = load %struct.op*, %struct.op** %op, align 8
  %op_private13 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 6
  %23 = load i8, i8* %op_private13, align 1
  %conv14 = zext i8 %23 to i32
  %and15 = and i32 %conv14, 48
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end22

if.then17:                                        ; preds = %if.end12
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %25 = load %struct.sv*, %struct.sv** %24, align 8
  %26 = load %struct.op*, %struct.op** %op, align 8
  %op_private18 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 6
  %27 = load i8, i8* %op_private18, align 1
  %conv19 = zext i8 %27 to i32
  %and20 = and i32 %conv19, 48
  %call21 = call %struct.sv* @Perl_vivify_ref(%struct.sv* %25, i32 %and20)
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %call21, %struct.sv** %28, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.then17, %if.end12
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %do.end
  %29 = load %struct.op*, %struct.op** %op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 0
  %30 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %30
}

declare dso_local void @Perl_save_clearsv(%struct.sv**) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_vivify_ref(%struct.sv* %sv, i32 %to_what) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %to_what.addr = alloca i32, align 4
  %zok = alloca i64, align 8
  %msv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %to_what, i32* %to_what.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %entry
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %2)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %3 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %3 to i32
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %5, 65280
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.end113, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %7, 255
  %cmp = icmp eq i32 %and6, 8
  br i1 %cmp, label %if.end113, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %9, 16826623
  %cmp10 = icmp eq i32 %and9, 16777226
  br i1 %cmp10, label %if.end113, label %if.then

if.then:                                          ; preds = %lor.lhs.false7
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %11, 134283264
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.then
  call void @Perl_croak_no_modify()
  br label %if.end

if.end:                                           ; preds = %if.then14, %if.then
  br label %do.body

do.body:                                          ; preds = %if.end
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %13, 255
  %cmp17 = icmp ult i32 %and16, 3
  br i1 %cmp17, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %do.body
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %15, 255
  %cmp20 = icmp ne i32 %and19, 1
  br i1 %cmp20, label %if.then21, label %if.else

if.then21:                                        ; preds = %land.lhs.true
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %16, i32 1)
  br label %if.end74

if.else:                                          ; preds = %land.lhs.true, %do.body
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %18, 255
  %cmp24 = icmp uge i32 %and23, 3
  br i1 %cmp24, label %if.then25, label %if.end73

if.then25:                                        ; preds = %if.else
  br label %do.body26

do.body26:                                        ; preds = %if.then25
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any, align 8
  %21 = bitcast i8* %20 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %21, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.26* %xpv_len_u to i64*
  %22 = load i64, i64* %xpvlenu_len, align 8
  %tobool27 = icmp ne i64 %22, 0
  br i1 %tobool27, label %if.then28, label %if.end63

if.then28:                                        ; preds = %do.body26
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %24, 33554432
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %cond.true32, label %cond.false33

cond.true32:                                      ; preds = %if.then28
  br i1 true, label %if.then34, label %if.end60

cond.false33:                                     ; preds = %if.then28
  br i1 false, label %if.then34, label %if.end60

if.then34:                                        ; preds = %cond.false33, %cond.true32
  br label %do.body35

do.body35:                                        ; preds = %if.then34
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %26, 33554432
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %if.then39, label %if.else48

if.then39:                                        ; preds = %do.body35
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %28 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 0
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %29 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %29 to i64
  store i64 %conv, i64* %zok, align 8
  %30 = load i64, i64* %zok, align 8
  %tobool40 = icmp ne i64 %30, 0
  br i1 %tobool40, label %if.end47, label %if.then41

if.then41:                                        ; preds = %if.then39
  %31 = bitcast i64* %zok to i8*
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u42 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 3
  %svu_pv43 = bitcast %union.anon* %sv_u42 to i8**
  %33 = load i8*, i8** %svu_pv43, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %33, i64 0
  %add.ptr45 = getelementptr inbounds i8, i8* %add.ptr44, i64 -1
  %add.ptr46 = getelementptr inbounds i8, i8* %add.ptr45, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 1 %add.ptr46, i64 8, i1 false)
  br label %if.end47

if.end47:                                         ; preds = %if.then41, %if.then39
  br label %if.end49

if.else48:                                        ; preds = %do.body35
  store i64 0, i64* %zok, align 8
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.end47
  br label %do.end

do.end:                                           ; preds = %if.end49
  br label %do.body50

do.body50:                                        ; preds = %do.end
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u51 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 3
  %svu_pv52 = bitcast %union.anon* %sv_u51 to i8**
  %35 = load i8*, i8** %svu_pv52, align 8
  %add.ptr53 = getelementptr inbounds i8, i8* %35, i64 0
  %36 = load i64, i64* %zok, align 8
  %idx.neg = sub i64 0, %36
  %add.ptr54 = getelementptr inbounds i8, i8* %add.ptr53, i64 %idx.neg
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u55 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 3
  %svu_pv56 = bitcast %union.anon* %sv_u55 to i8**
  store i8* %add.ptr54, i8** %svu_pv56, align 8
  br label %do.end57

do.end57:                                         ; preds = %do.body50
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %39, -33554433
  store i32 %and59, i32* %sv_flags58, align 4
  br label %if.end60

if.end60:                                         ; preds = %do.end57, %cond.false33, %cond.true32
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u61 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 3
  %svu_pv62 = bitcast %union.anon* %sv_u61 to i8**
  %41 = load i8*, i8** %svu_pv62, align 8
  call void @Perl_safesysfree(i8* %41)
  br label %if.end63

if.end63:                                         ; preds = %if.end60, %do.body26
  br label %do.end64

do.end64:                                         ; preds = %if.end63
  br label %do.body65

do.body65:                                        ; preds = %do.end64
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any66 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any66, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_len_u67 = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 3
  %xpvlenu_len68 = bitcast %union.anon.26* %xpv_len_u67 to i64*
  store i64 0, i64* %xpvlenu_len68, align 8
  br label %do.end69

do.end69:                                         ; preds = %do.body65
  br label %do.body70

do.body70:                                        ; preds = %do.end69
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any71 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any71, align 8
  %47 = bitcast i8* %46 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %47, i32 0, i32 2
  store i64 0, i64* %xpv_cur, align 8
  br label %do.end72

do.end72:                                         ; preds = %do.body70
  br label %if.end73

if.end73:                                         ; preds = %do.end72, %if.else
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then21
  br label %do.end75

do.end75:                                         ; preds = %if.end74
  %48 = load i32, i32* %to_what.addr, align 4
  switch i32 %48, label %sw.epilog [
    i32 48, label %sw.bb
    i32 16, label %sw.bb80
    i32 32, label %sw.bb86
  ]

sw.bb:                                            ; preds = %do.end75
  br label %do.body76

do.body76:                                        ; preds = %sw.bb
  %call77 = call %struct.sv* @Perl_newSV(i64 0)
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u78 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u78 to %struct.sv**
  store %struct.sv* %call77, %struct.sv** %svu_rv, align 8
  br label %do.end79

do.end79:                                         ; preds = %do.body76
  br label %sw.epilog

sw.bb80:                                          ; preds = %do.end75
  br label %do.body81

do.body81:                                        ; preds = %sw.bb80
  %call82 = call %struct.sv* @Perl_newSV_type(i32 11)
  %50 = bitcast %struct.sv* %call82 to i8*
  %51 = bitcast i8* %50 to %struct.av*
  %52 = bitcast %struct.av* %51 to i8*
  %53 = bitcast i8* %52 to %struct.sv*
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u83 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 3
  %svu_rv84 = bitcast %union.anon* %sv_u83 to %struct.sv**
  store %struct.sv* %53, %struct.sv** %svu_rv84, align 8
  br label %do.end85

do.end85:                                         ; preds = %do.body81
  br label %sw.epilog

sw.bb86:                                          ; preds = %do.end75
  br label %do.body87

do.body87:                                        ; preds = %sw.bb86
  %call88 = call %struct.sv* @Perl_newSV_type(i32 12)
  %55 = bitcast %struct.sv* %call88 to i8*
  %56 = bitcast i8* %55 to %struct.hv*
  %57 = bitcast %struct.hv* %56 to i8*
  %58 = bitcast i8* %57 to %struct.sv*
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u89 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 3
  %svu_rv90 = bitcast %union.anon* %sv_u89 to %struct.sv**
  store %struct.sv* %58, %struct.sv** %svu_rv90, align 8
  br label %do.end91

do.end91:                                         ; preds = %do.body87
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end75, %do.end91, %do.end85, %do.end79
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags92 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags92, align 4
  %or = or i32 %61, 2048
  store i32 %or, i32* %sv_flags92, align 4
  br label %do.body93

do.body93:                                        ; preds = %sw.epilog
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags94 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags94, align 4
  %and95 = and i32 %63, 4194304
  %tobool96 = icmp ne i32 %and95, 0
  br i1 %tobool96, label %cond.true97, label %cond.false98

cond.true97:                                      ; preds = %do.body93
  br i1 true, label %if.then99, label %if.end101

cond.false98:                                     ; preds = %do.body93
  br i1 false, label %if.then99, label %if.end101

if.then99:                                        ; preds = %cond.false98, %cond.true97
  %64 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call100 = call i32 @Perl_mg_set(%struct.sv* %64)
  br label %if.end101

if.end101:                                        ; preds = %if.then99, %cond.false98, %cond.true97
  br label %do.end102

do.end102:                                        ; preds = %if.end101
  %65 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags103 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags103, align 4
  %and104 = and i32 %66, 2097152
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %cond.true106, label %cond.false107

cond.true106:                                     ; preds = %do.end102
  br i1 true, label %land.rhs108, label %land.end111

cond.false107:                                    ; preds = %do.end102
  br i1 false, label %land.rhs108, label %land.end111

land.rhs108:                                      ; preds = %cond.false107, %cond.true106
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call109 = call i32 @Perl_mg_get(%struct.sv* %67)
  %tobool110 = icmp ne i32 %call109, 0
  br label %land.end111

land.end111:                                      ; preds = %land.rhs108, %cond.false107, %cond.true106
  %68 = phi i1 [ false, %cond.false107 ], [ false, %cond.true106 ], [ %tobool110, %land.rhs108 ]
  %land.ext112 = zext i1 %68 to i32
  br label %if.end113

if.end113:                                        ; preds = %land.end111, %lor.lhs.false7, %lor.lhs.false, %land.end
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags114 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags114, align 4
  %and115 = and i32 %70, 2097152
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %if.then117, label %if.end119

if.then117:                                       ; preds = %if.end113
  %call118 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call118, %struct.sv** %msv, align 8
  %71 = load %struct.sv*, %struct.sv** %msv, align 8
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %71, %struct.sv* %72, i32 1536)
  %73 = load %struct.sv*, %struct.sv** %msv, align 8
  store %struct.sv* %73, %struct.sv** %retval, align 8
  br label %return

if.end119:                                        ; preds = %if.end113
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %74, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end119, %if.then117
  %75 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %75
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_readline() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sp3 = alloca %struct.sv**, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %arg = alloca %struct.sv*, align 8
  %gimme = alloca i32, align 4
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %targ = alloca %struct.sv*, align 8
  %sp126 = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %tobool = icmp ne %struct.sv* %2, null
  br i1 %tobool, label %if.then, label %if.else81

if.then:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 2097152
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.then
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %7)
  %tobool2 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %8 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %8 to i32
  br label %do.body

do.body:                                          ; preds = %land.end
  %9 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %9, %struct.sv*** %sp3, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp3, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** %arg, align 8
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 5
  %13 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %13 to i32
  %and4 = and i32 %conv, 3
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %cond.true6, label %cond.false10

cond.true6:                                       ; preds = %do.body
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags7 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 5
  %15 = load i8, i8* %op_flags7, align 2
  %conv8 = zext i8 %15 to i32
  %and9 = and i32 %conv8, 3
  br label %cond.end

cond.false10:                                     ; preds = %do.body
  %call11 = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false10, %cond.true6
  %cond = phi i32 [ %and9, %cond.true6 ], [ %call11, %cond.false10 ]
  store i32 %cond, i32* %gimme, align 4
  %16 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %17, 2048
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %land.lhs.true, label %cond.false28

land.lhs.true:                                    ; preds = %cond.end
  %18 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %19 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %20, 1048576
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.lhs.true18, label %cond.false28

land.lhs.true18:                                  ; preds = %land.lhs.true
  %21 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_u19 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 3
  %svu_rv20 = bitcast %union.anon* %sv_u19 to %struct.sv**
  %22 = load %struct.sv*, %struct.sv** %svu_rv20, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any, align 8
  %24 = bitcast i8* %23 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %24, i32 0, i32 0
  %25 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags21 = getelementptr inbounds %struct.hv, %struct.hv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %26, 268435456
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %land.lhs.true24, label %cond.false28

land.lhs.true24:                                  ; preds = %land.lhs.true18
  %27 = load %struct.sv*, %struct.sv** %arg, align 8
  %call25 = call %struct.sv* @Perl_amagic_call(%struct.sv* %27, %struct.sv* @PL_sv_undef, i32 15, i32 73)
  store %struct.sv* %call25, %struct.sv** %tmpsv, align 8
  %tobool26 = icmp ne %struct.sv* %call25, null
  br i1 %tobool26, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %land.lhs.true24
  br i1 true, label %if.then29, label %if.end78

cond.false28:                                     ; preds = %land.lhs.true24, %land.lhs.true18, %land.lhs.true, %cond.end
  br i1 false, label %if.then29, label %if.end78

if.then29:                                        ; preds = %cond.false28, %cond.true27
  %28 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %28, %struct.sv*** %sp3, align 8
  %29 = load i32, i32* %gimme, align 4
  %cmp = icmp eq i32 %29, 1
  br i1 %cmp, label %if.then31, label %if.else

if.then31:                                        ; preds = %if.then29
  br label %if.end77

if.else:                                          ; preds = %if.then29
  %30 = load i32, i32* %gimme, align 4
  %cmp32 = icmp eq i32 %30, 3
  br i1 %cmp32, label %if.then34, label %if.else47

if.then34:                                        ; preds = %if.else
  %31 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %32 = bitcast %struct.sv* %31 to %struct.av*
  %call35 = call i64 @S_av_top_index(%struct.av* %32)
  %add = add nsw i64 %call35, 1
  store i64 %add, i64* %len, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp3, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %33, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp3, align 8
  %34 = load %struct.sv*, %struct.sv** %33, align 8
  br label %do.body36

do.body36:                                        ; preds = %if.then34
  %35 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %36 = load %struct.sv**, %struct.sv*** %sp3, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %35 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %36 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %37 = load i64, i64* %len, align 8
  %cmp37 = icmp slt i64 %sub.ptr.div, %37
  br i1 %cmp37, label %cond.true39, label %cond.false40

cond.true39:                                      ; preds = %do.body36
  br i1 true, label %if.then41, label %if.end

cond.false40:                                     ; preds = %do.body36
  br i1 false, label %if.then41, label %if.end

if.then41:                                        ; preds = %cond.false40, %cond.true39
  %38 = load %struct.sv**, %struct.sv*** %sp3, align 8
  %39 = load %struct.sv**, %struct.sv*** %sp3, align 8
  %40 = load i64, i64* %len, align 8
  %call42 = call %struct.sv** @Perl_stack_grow(%struct.sv** %38, %struct.sv** %39, i64 %40)
  store %struct.sv** %call42, %struct.sv*** %sp3, align 8
  %41 = load %struct.sv**, %struct.sv*** %sp3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then41, %cond.false40, %cond.true39
  br label %do.end

do.end:                                           ; preds = %if.end
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %42 = load i64, i64* %i, align 8
  %43 = load i64, i64* %len, align 8
  %cmp43 = icmp slt i64 %42, %43
  br i1 %cmp43, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %44 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %45 = bitcast %struct.sv* %44 to %struct.av*
  %call45 = call %struct.sv* @Perl_av_shift(%struct.av* %45)
  %46 = load %struct.sv**, %struct.sv*** %sp3, align 8
  %incdec.ptr46 = getelementptr inbounds %struct.sv*, %struct.sv** %46, i32 1
  store %struct.sv** %incdec.ptr46, %struct.sv*** %sp3, align 8
  store %struct.sv* %call45, %struct.sv** %incdec.ptr46, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %47 = load i64, i64* %i, align 8
  %inc = add nsw i64 %47, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end76

if.else47:                                        ; preds = %if.else
  %48 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags48 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 5
  %49 = load i8, i8* %op_flags48, align 2
  %conv49 = zext i8 %49 to i32
  %and50 = and i32 %conv49, 64
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %cond.true52, label %cond.false53

cond.true52:                                      ; preds = %if.else47
  %50 = load %struct.sv**, %struct.sv*** %sp3, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %50, i64 -1
  %51 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end55

cond.false53:                                     ; preds = %if.else47
  %52 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %53 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 3
  %54 = load i64, i64* %op_targ, align 8
  %arrayidx54 = getelementptr inbounds %struct.sv*, %struct.sv** %52, i64 %54
  %55 = load %struct.sv*, %struct.sv** %arrayidx54, align 8
  br label %cond.end55

cond.end55:                                       ; preds = %cond.false53, %cond.true52
  %cond56 = phi %struct.sv* [ %51, %cond.true52 ], [ %55, %cond.false53 ]
  store %struct.sv* %cond56, %struct.sv** %targ, align 8
  %56 = load %struct.sv*, %struct.sv** %targ, align 8
  %57 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %56, %struct.sv* %57, i32 1538)
  %58 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags57 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 5
  %59 = load i8, i8* %op_flags57, align 2
  %conv58 = zext i8 %59 to i32
  %and59 = and i32 %conv58, 64
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %if.then61, label %if.end63

if.then61:                                        ; preds = %cond.end55
  %60 = load %struct.sv**, %struct.sv*** %sp3, align 8
  %incdec.ptr62 = getelementptr inbounds %struct.sv*, %struct.sv** %60, i32 -1
  store %struct.sv** %incdec.ptr62, %struct.sv*** %sp3, align 8
  br label %if.end63

if.end63:                                         ; preds = %if.then61, %cond.end55
  br label %do.body64

do.body64:                                        ; preds = %if.end63
  br label %do.body65

do.body65:                                        ; preds = %do.body64
  %61 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %62, 4194304
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %cond.true69, label %cond.false70

cond.true69:                                      ; preds = %do.body65
  br i1 true, label %if.then71, label %if.end73

cond.false70:                                     ; preds = %do.body65
  br i1 false, label %if.then71, label %if.end73

if.then71:                                        ; preds = %cond.false70, %cond.true69
  %63 = load %struct.sv*, %struct.sv** %targ, align 8
  %call72 = call i32 @Perl_mg_set(%struct.sv* %63)
  br label %if.end73

if.end73:                                         ; preds = %if.then71, %cond.false70, %cond.true69
  br label %do.end74

do.end74:                                         ; preds = %if.end73
  %64 = load %struct.sv*, %struct.sv** %targ, align 8
  %65 = load %struct.sv**, %struct.sv*** %sp3, align 8
  store %struct.sv* %64, %struct.sv** %65, align 8
  br label %do.end75

do.end75:                                         ; preds = %do.end74
  br label %if.end76

if.end76:                                         ; preds = %do.end75, %for.end
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.then31
  %66 = load %struct.sv**, %struct.sv*** %sp3, align 8
  store %struct.sv** %66, %struct.sv*** @PL_stack_sp, align 8
  %67 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %67, i32 0, i32 0
  %68 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %68, %struct.op** %retval, align 8
  br label %return

if.end78:                                         ; preds = %cond.false28, %cond.true27
  br label %do.end79

do.end79:                                         ; preds = %if.end78
  %69 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr80 = getelementptr inbounds %struct.sv*, %struct.sv** %69, i32 -1
  store %struct.sv** %incdec.ptr80, %struct.sv*** @PL_stack_sp, align 8
  %70 = load %struct.sv*, %struct.sv** %69, align 8
  %71 = bitcast %struct.sv* %70 to i8*
  %72 = bitcast i8* %71 to %struct.gv*
  store %struct.gv* %72, %struct.gv** @PL_last_in_gv, align 8
  br label %if.end83

if.else81:                                        ; preds = %entry
  %73 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  store %struct.gv* %73, %struct.gv** @PL_last_in_gv, align 8
  %74 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr82 = getelementptr inbounds %struct.sv*, %struct.sv** %74, i32 -1
  store %struct.sv** %incdec.ptr82, %struct.sv*** @PL_stack_sp, align 8
  br label %if.end83

if.end83:                                         ; preds = %if.else81, %do.end79
  %75 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_flags84 = getelementptr inbounds %struct.gv, %struct.gv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %76, 49152
  %cmp86 = icmp eq i32 %and85, 32768
  br i1 %cmp86, label %land.lhs.true88, label %if.then97

land.lhs.true88:                                  ; preds = %if.end83
  %77 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_flags89 = getelementptr inbounds %struct.gv, %struct.gv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %78, 255
  %cmp91 = icmp eq i32 %and90, 9
  br i1 %cmp91, label %if.end151, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true88
  %79 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_flags93 = getelementptr inbounds %struct.gv, %struct.gv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags93, align 4
  %and94 = and i32 %80, 255
  %cmp95 = icmp eq i32 %and94, 10
  br i1 %cmp95, label %if.end151, label %if.then97

if.then97:                                        ; preds = %lor.lhs.false, %if.end83
  %81 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_flags98 = getelementptr inbounds %struct.gv, %struct.gv* %81, i32 0, i32 2
  %82 = load i32, i32* %sv_flags98, align 4
  %and99 = and i32 %82, 2048
  %tobool100 = icmp ne i32 %and99, 0
  br i1 %tobool100, label %land.lhs.true101, label %if.else125

land.lhs.true101:                                 ; preds = %if.then97
  %83 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u102 = getelementptr inbounds %struct.gv, %struct.gv* %83, i32 0, i32 3
  %svu_rv103 = bitcast %union.anon.4* %sv_u102 to %struct.sv**
  %84 = load %struct.sv*, %struct.sv** %svu_rv103, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags104, align 4
  %and105 = and i32 %85, 49152
  %cmp106 = icmp eq i32 %and105, 32768
  br i1 %cmp106, label %land.lhs.true108, label %if.else125

land.lhs.true108:                                 ; preds = %land.lhs.true101
  %86 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u109 = getelementptr inbounds %struct.gv, %struct.gv* %86, i32 0, i32 3
  %svu_rv110 = bitcast %union.anon.4* %sv_u109 to %struct.sv**
  %87 = load %struct.sv*, %struct.sv** %svu_rv110, align 8
  %sv_flags111 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags111, align 4
  %and112 = and i32 %88, 255
  %cmp113 = icmp eq i32 %and112, 9
  br i1 %cmp113, label %if.then122, label %lor.lhs.false115

lor.lhs.false115:                                 ; preds = %land.lhs.true108
  %89 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u116 = getelementptr inbounds %struct.gv, %struct.gv* %89, i32 0, i32 3
  %svu_rv117 = bitcast %union.anon.4* %sv_u116 to %struct.sv**
  %90 = load %struct.sv*, %struct.sv** %svu_rv117, align 8
  %sv_flags118 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %91, 255
  %cmp120 = icmp eq i32 %and119, 10
  br i1 %cmp120, label %if.then122, label %if.else125

if.then122:                                       ; preds = %lor.lhs.false115, %land.lhs.true108
  %92 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u123 = getelementptr inbounds %struct.gv, %struct.gv* %92, i32 0, i32 3
  %svu_rv124 = bitcast %union.anon.4* %sv_u123 to %struct.sv**
  %93 = load %struct.sv*, %struct.sv** %svu_rv124, align 8
  %94 = bitcast %struct.sv* %93 to i8*
  %95 = bitcast i8* %94 to %struct.gv*
  store %struct.gv* %95, %struct.gv** @PL_last_in_gv, align 8
  br label %if.end150

if.else125:                                       ; preds = %lor.lhs.false115, %land.lhs.true101, %if.then97
  %96 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %96, %struct.sv*** %sp126, align 8
  br label %do.body127

do.body127:                                       ; preds = %if.else125
  br label %do.body128

do.body128:                                       ; preds = %do.body127
  %97 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %98 = load %struct.sv**, %struct.sv*** %sp126, align 8
  %sub.ptr.lhs.cast129 = ptrtoint %struct.sv** %97 to i64
  %sub.ptr.rhs.cast130 = ptrtoint %struct.sv** %98 to i64
  %sub.ptr.sub131 = sub i64 %sub.ptr.lhs.cast129, %sub.ptr.rhs.cast130
  %sub.ptr.div132 = sdiv exact i64 %sub.ptr.sub131, 8
  %cmp133 = icmp slt i64 %sub.ptr.div132, 1
  br i1 %cmp133, label %cond.true135, label %cond.false136

cond.true135:                                     ; preds = %do.body128
  br i1 true, label %if.then137, label %if.end139

cond.false136:                                    ; preds = %do.body128
  br i1 false, label %if.then137, label %if.end139

if.then137:                                       ; preds = %cond.false136, %cond.true135
  %99 = load %struct.sv**, %struct.sv*** %sp126, align 8
  %100 = load %struct.sv**, %struct.sv*** %sp126, align 8
  %call138 = call %struct.sv** @Perl_stack_grow(%struct.sv** %99, %struct.sv** %100, i64 1)
  store %struct.sv** %call138, %struct.sv*** %sp126, align 8
  %101 = load %struct.sv**, %struct.sv*** %sp126, align 8
  br label %if.end139

if.end139:                                        ; preds = %if.then137, %cond.false136, %cond.true135
  br label %do.end140

do.end140:                                        ; preds = %if.end139
  %102 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %103 = bitcast %struct.gv* %102 to i8*
  %104 = bitcast i8* %103 to %struct.sv*
  %105 = load %struct.sv**, %struct.sv*** %sp126, align 8
  %incdec.ptr141 = getelementptr inbounds %struct.sv*, %struct.sv** %105, i32 1
  store %struct.sv** %incdec.ptr141, %struct.sv*** %sp126, align 8
  store %struct.sv* %104, %struct.sv** %incdec.ptr141, align 8
  br label %do.end142

do.end142:                                        ; preds = %do.end140
  %106 = load %struct.sv**, %struct.sv*** %sp126, align 8
  store %struct.sv** %106, %struct.sv*** @PL_stack_sp, align 8
  %call143 = call %struct.op* @Perl_pp_rv2gv()
  %107 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr144 = getelementptr inbounds %struct.sv*, %struct.sv** %107, i32 -1
  store %struct.sv** %incdec.ptr144, %struct.sv*** @PL_stack_sp, align 8
  %108 = load %struct.sv*, %struct.sv** %107, align 8
  %109 = bitcast %struct.sv* %108 to i8*
  %110 = bitcast i8* %109 to %struct.gv*
  store %struct.gv* %110, %struct.gv** @PL_last_in_gv, align 8
  %111 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %cmp145 = icmp eq %struct.gv* %111, bitcast (%struct.sv* @PL_sv_undef to %struct.gv*)
  br i1 %cmp145, label %if.then147, label %if.else148

if.then147:                                       ; preds = %do.end142
  store %struct.gv* null, %struct.gv** @PL_last_in_gv, align 8
  br label %if.end149

if.else148:                                       ; preds = %do.end142
  br label %if.end149

if.end149:                                        ; preds = %if.else148, %if.then147
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %if.then122
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %lor.lhs.false, %land.lhs.true88
  %call152 = call %struct.op* @Perl_do_readline()
  store %struct.op* %call152, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end151, %if.end77
  %112 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %112
}

declare dso_local i32 @Perl_mg_get(%struct.sv*) #1

declare dso_local %struct.sv* @Perl_amagic_call(%struct.sv*, %struct.sv*, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_av_top_index(%struct.av* %av) #0 {
entry:
  %av.addr = alloca %struct.av*, align 8
  store %struct.av* %av, %struct.av** %av.addr, align 8
  %0 = load %struct.av*, %struct.av** %av.addr, align 8
  %1 = bitcast %struct.av* %0 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8388608
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.av*, %struct.av** %av.addr, align 8
  %4 = bitcast %struct.av* %3 to i8*
  %5 = bitcast i8* %4 to %struct.sv*
  %call = call i32 @Perl_mg_size(%struct.sv* %5)
  %conv = sext i32 %call to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %6, i32 0, i32 0
  %7 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %7, i32 0, i32 2
  %8 = load i64, i64* %xav_fill, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %8, %cond.false ]
  ret i64 %cond
}

declare dso_local %struct.sv* @Perl_av_shift(%struct.av*) #1

declare dso_local %struct.op* @Perl_pp_rv2gv() #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_do_readline() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %tmplen = alloca i64, align 8
  %offset = alloca i64, align 8
  %fp = alloca %struct._PerlIO**, align 8
  %io = alloca %struct.io*, align 8
  %type = alloca i32, align 4
  %gimme = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %t1 = alloca i8*, align 8
  %tmps = alloca i8*, align 8
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %f = alloca i8*, align 8
  %_lEnGtH = alloca i64, align 8
  %new_len = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  store i64 0, i64* %tmplen, align 8
  %9 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %tobool1 = icmp ne %struct.gv* %9, null
  br i1 %tobool1, label %land.lhs.true, label %cond.false14

land.lhs.true:                                    ; preds = %cond.end
  %10 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %11 = bitcast %struct.gv* %10 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags, align 4
  %and2 = and i32 %12, 255
  %cmp = icmp eq i32 %and2, 9
  br i1 %cmp, label %land.lhs.true8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %13 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %14 = bitcast %struct.gv* %13 to %struct.sv*
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %15, 255
  %cmp6 = icmp eq i32 %and5, 10
  br i1 %cmp6, label %land.lhs.true8, label %cond.false14

land.lhs.true8:                                   ; preds = %lor.lhs.false, %land.lhs.true
  %16 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %17 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %17, i64 0
  %tobool9 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool9, label %cond.true10, label %cond.false14

cond.true10:                                      ; preds = %land.lhs.true8
  %18 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u11 = getelementptr inbounds %struct.gv, %struct.gv* %18, i32 0, i32 3
  %svu_gp12 = bitcast %union.anon.4* %sv_u11 to %struct.gp**
  %19 = load %struct.gp*, %struct.gp** %svu_gp12, align 8
  %add.ptr13 = getelementptr inbounds %struct.gp, %struct.gp* %19, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr13, i32 0, i32 1
  %20 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end15

cond.false14:                                     ; preds = %land.lhs.true8, %lor.lhs.false, %cond.end
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true10
  %cond16 = phi %struct.io* [ %20, %cond.true10 ], [ null, %cond.false14 ]
  store %struct.io* %cond16, %struct.io** %io, align 8
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %type, align 4
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags17 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 5
  %23 = load i8, i8* %op_flags17, align 2
  %conv18 = zext i8 %23 to i32
  %and19 = and i32 %conv18, 3
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %cond.true21, label %cond.false25

cond.true21:                                      ; preds = %cond.end15
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags22 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 5
  %25 = load i8, i8* %op_flags22, align 2
  %conv23 = zext i8 %25 to i32
  %and24 = and i32 %conv23, 3
  br label %cond.end26

cond.false25:                                     ; preds = %cond.end15
  %call = call i32 @Perl_block_gimme()
  br label %cond.end26

cond.end26:                                       ; preds = %cond.false25, %cond.true21
  %cond27 = phi i32 [ %and24, %cond.true21 ], [ %call, %cond.false25 ]
  store i32 %cond27, i32* %gimme, align 4
  %26 = load %struct.io*, %struct.io** %io, align 8
  %tobool28 = icmp ne %struct.io* %26, null
  br i1 %tobool28, label %if.then, label %if.end68

if.then:                                          ; preds = %cond.end26
  %27 = load %struct.io*, %struct.io** %io, align 8
  %28 = bitcast %struct.io* %27 to %struct.sv*
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %29, 8388608
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %cond.true32, label %cond.false34

cond.true32:                                      ; preds = %if.then
  %30 = load %struct.io*, %struct.io** %io, align 8
  %31 = bitcast %struct.io* %30 to %struct.sv*
  %call33 = call %struct.magic* @Perl_mg_find(%struct.sv* %31, i32 113)
  br label %cond.end35

cond.false34:                                     ; preds = %if.then
  br label %cond.end35

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi %struct.magic* [ %call33, %cond.true32 ], [ null, %cond.false34 ]
  store %struct.magic* %cond36, %struct.magic** %mg, align 8
  %32 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool37 = icmp ne %struct.magic* %32, null
  br i1 %tobool37, label %if.then38, label %if.end67

if.then38:                                        ; preds = %cond.end35
  %33 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 23), align 8
  %tobool39 = icmp ne %struct.sv* %33, null
  br i1 %tobool39, label %cond.true40, label %cond.false41

cond.true40:                                      ; preds = %if.then38
  %34 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 23), align 8
  br label %cond.end43

cond.false41:                                     ; preds = %if.then38
  %call42 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i64 0, i64 0), i32 0)
  store %struct.sv* %call42, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 23), align 8
  br label %cond.end43

cond.end43:                                       ; preds = %cond.false41, %cond.true40
  %cond44 = phi %struct.sv* [ %34, %cond.true40 ], [ %call42, %cond.false41 ]
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %36 = load %struct.io*, %struct.io** %io, align 8
  %37 = bitcast %struct.io* %36 to i8*
  %38 = bitcast i8* %37 to %struct.sv*
  %39 = load %struct.magic*, %struct.magic** %mg, align 8
  %40 = load i32, i32* %gimme, align 4
  %call45 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond44, %struct.sv** %35, %struct.sv* %38, %struct.magic* %39, i32 %40, i32 0)
  %41 = load i32, i32* %gimme, align 4
  %cmp46 = icmp eq i32 %41, 2
  br i1 %cmp46, label %if.then48, label %if.end66

if.then48:                                        ; preds = %cond.end43
  %42 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %42, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %if.then48
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %45 = load %struct.sv*, %struct.sv** %44, align 8
  %cmp49 = icmp ne %struct.sv* %43, %45
  br i1 %cmp49, label %cond.true51, label %cond.false52

cond.true51:                                      ; preds = %do.body
  br i1 true, label %if.then53, label %if.end

cond.false52:                                     ; preds = %do.body
  br i1 false, label %if.then53, label %if.end

if.then53:                                        ; preds = %cond.false52, %cond.true51
  %46 = load %struct.sv*, %struct.sv** %targ, align 8
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  %48 = load %struct.sv*, %struct.sv** %47, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %46, %struct.sv* %48, i32 1554)
  br label %if.end

if.end:                                           ; preds = %if.then53, %cond.false52, %cond.true51
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body54

do.body54:                                        ; preds = %do.end
  br label %do.body55

do.body55:                                        ; preds = %do.body54
  %49 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %50, 4194304
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %do.body55
  br i1 true, label %if.then61, label %if.end63

cond.false60:                                     ; preds = %do.body55
  br i1 false, label %if.then61, label %if.end63

if.then61:                                        ; preds = %cond.false60, %cond.true59
  %51 = load %struct.sv*, %struct.sv** %targ, align 8
  %call62 = call i32 @Perl_mg_set(%struct.sv* %51)
  br label %if.end63

if.end63:                                         ; preds = %if.then61, %cond.false60, %cond.true59
  br label %do.end64

do.end64:                                         ; preds = %if.end63
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %52, %struct.sv** %53, align 8
  br label %do.end65

do.end65:                                         ; preds = %do.end64
  br label %if.end66

if.end66:                                         ; preds = %do.end65, %cond.end43
  %54 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 0
  %55 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %55, %struct.op** %retval, align 8
  br label %return

if.end67:                                         ; preds = %cond.end35
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %cond.end26
  store %struct._PerlIO** null, %struct._PerlIO*** %fp, align 8
  %56 = load %struct.io*, %struct.io** %io, align 8
  %tobool69 = icmp ne %struct.io* %56, null
  br i1 %tobool69, label %if.then70, label %if.end207

if.then70:                                        ; preds = %if.end68
  %57 = load %struct.io*, %struct.io** %io, align 8
  %sv_u71 = getelementptr inbounds %struct.io, %struct.io* %57, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u71 to %struct._PerlIO***
  %58 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  store %struct._PerlIO** %58, %struct._PerlIO*** %fp, align 8
  %59 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %tobool72 = icmp ne %struct._PerlIO** %59, null
  br i1 %tobool72, label %if.else193, label %if.then73

if.then73:                                        ; preds = %if.then70
  %60 = load %struct.io*, %struct.io** %io, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %60, i32 0, i32 0
  %61 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %61, i32 0, i32 17
  %62 = load i8, i8* %xio_flags, align 1
  %conv74 = zext i8 %62 to i32
  %and75 = and i32 %conv74, 1
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %if.then77, label %if.else

if.then77:                                        ; preds = %if.then73
  %63 = load %struct.io*, %struct.io** %io, align 8
  %sv_any78 = getelementptr inbounds %struct.io, %struct.io* %63, i32 0, i32 0
  %64 = load %struct.xpvio*, %struct.xpvio** %sv_any78, align 8
  %xio_flags79 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %64, i32 0, i32 17
  %65 = load i8, i8* %xio_flags79, align 1
  %conv80 = zext i8 %65 to i32
  %and81 = and i32 %conv80, 2
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %if.then83, label %if.end176

if.then83:                                        ; preds = %if.then77
  %66 = load %struct.io*, %struct.io** %io, align 8
  %sv_any84 = getelementptr inbounds %struct.io, %struct.io* %66, i32 0, i32 0
  %67 = load %struct.xpvio*, %struct.xpvio** %sv_any84, align 8
  %xiv_u = getelementptr inbounds %struct.xpvio, %struct.xpvio* %67, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  store i64 0, i64* %xivu_iv, align 8
  %68 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u85 = getelementptr inbounds %struct.gv, %struct.gv* %68, i32 0, i32 3
  %svu_gp86 = bitcast %union.anon.4* %sv_u85 to %struct.gp**
  %69 = load %struct.gp*, %struct.gp** %svu_gp86, align 8
  %add.ptr87 = getelementptr inbounds %struct.gp, %struct.gp* %69, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr87, i32 0, i32 6
  %70 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool88 = icmp ne %struct.av* %70, null
  br i1 %tobool88, label %cond.true89, label %cond.false94

cond.true89:                                      ; preds = %if.then83
  %71 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u90 = getelementptr inbounds %struct.gv, %struct.gv* %71, i32 0, i32 3
  %svu_gp91 = bitcast %union.anon.4* %sv_u90 to %struct.gp**
  %72 = load %struct.gp*, %struct.gp** %svu_gp91, align 8
  %add.ptr92 = getelementptr inbounds %struct.gp, %struct.gp* %72, i64 0
  %gp_av93 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr92, i32 0, i32 6
  %73 = load %struct.av*, %struct.av** %gp_av93, align 8
  br label %cond.end100

cond.false94:                                     ; preds = %if.then83
  %74 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call95 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %74, i32 11)
  %sv_u96 = getelementptr inbounds %struct.gv, %struct.gv* %call95, i32 0, i32 3
  %svu_gp97 = bitcast %union.anon.4* %sv_u96 to %struct.gp**
  %75 = load %struct.gp*, %struct.gp** %svu_gp97, align 8
  %add.ptr98 = getelementptr inbounds %struct.gp, %struct.gp* %75, i64 0
  %gp_av99 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr98, i32 0, i32 6
  %76 = load %struct.av*, %struct.av** %gp_av99, align 8
  br label %cond.end100

cond.end100:                                      ; preds = %cond.false94, %cond.true89
  %cond101 = phi %struct.av* [ %73, %cond.true89 ], [ %76, %cond.false94 ]
  %call102 = call i64 @S_av_top_index(%struct.av* %cond101)
  %cmp103 = icmp slt i64 %call102, 0
  br i1 %cmp103, label %if.then105, label %if.end175

if.then105:                                       ; preds = %cond.end100
  %77 = load %struct.io*, %struct.io** %io, align 8
  %sv_any106 = getelementptr inbounds %struct.io, %struct.io* %77, i32 0, i32 0
  %78 = load %struct.xpvio*, %struct.xpvio** %sv_any106, align 8
  %xio_flags107 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %78, i32 0, i32 17
  %79 = load i8, i8* %xio_flags107, align 1
  %conv108 = zext i8 %79 to i32
  %and109 = and i32 %conv108, -3
  %conv110 = trunc i32 %and109 to i8
  store i8 %conv110, i8* %xio_flags107, align 1
  %80 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call111 = call zeroext i1 @Perl_do_open6(%struct.gv* %80, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0), i64 1, %struct._PerlIO** null, %struct.sv** null, i32 0)
  br label %do.body112

do.body112:                                       ; preds = %if.then105
  %81 = load i8, i8* @PL_tainting, align 1
  %tobool113 = trunc i8 %81 to i1
  br i1 %tobool113, label %cond.true115, label %cond.false116

cond.true115:                                     ; preds = %do.body112
  br i1 true, label %if.then117, label %if.end135

cond.false116:                                    ; preds = %do.body112
  br i1 false, label %if.then117, label %if.end135

if.then117:                                       ; preds = %cond.false116, %cond.true115
  %82 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u118 = getelementptr inbounds %struct.gv, %struct.gv* %82, i32 0, i32 3
  %svu_gp119 = bitcast %union.anon.4* %sv_u118 to %struct.gp**
  %83 = load %struct.gp*, %struct.gp** %svu_gp119, align 8
  %add.ptr120 = getelementptr inbounds %struct.gp, %struct.gp* %83, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr120, i32 0, i32 0
  %84 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool121 = icmp ne %struct.sv* %84, null
  br i1 %tobool121, label %cond.true122, label %cond.false127

cond.true122:                                     ; preds = %if.then117
  %85 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u123 = getelementptr inbounds %struct.gv, %struct.gv* %85, i32 0, i32 3
  %svu_gp124 = bitcast %union.anon.4* %sv_u123 to %struct.gp**
  %86 = load %struct.gp*, %struct.gp** %svu_gp124, align 8
  %add.ptr125 = getelementptr inbounds %struct.gp, %struct.gp* %86, i64 0
  %gp_sv126 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr125, i32 0, i32 0
  br label %cond.end133

cond.false127:                                    ; preds = %if.then117
  %87 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call128 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %87, i32 0)
  %sv_u129 = getelementptr inbounds %struct.gv, %struct.gv* %call128, i32 0, i32 3
  %svu_gp130 = bitcast %union.anon.4* %sv_u129 to %struct.gp**
  %88 = load %struct.gp*, %struct.gp** %svu_gp130, align 8
  %add.ptr131 = getelementptr inbounds %struct.gp, %struct.gp* %88, i64 0
  %gp_sv132 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr131, i32 0, i32 0
  br label %cond.end133

cond.end133:                                      ; preds = %cond.false127, %cond.true122
  %cond134 = phi %struct.sv** [ %gp_sv126, %cond.true122 ], [ %gp_sv132, %cond.false127 ]
  %89 = load %struct.sv*, %struct.sv** %cond134, align 8
  call void @Perl_sv_untaint(%struct.sv* %89)
  br label %if.end135

if.end135:                                        ; preds = %cond.end133, %cond.false116, %cond.true115
  br label %do.end136

do.end136:                                        ; preds = %if.end135
  %90 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u137 = getelementptr inbounds %struct.gv, %struct.gv* %90, i32 0, i32 3
  %svu_gp138 = bitcast %union.anon.4* %sv_u137 to %struct.gp**
  %91 = load %struct.gp*, %struct.gp** %svu_gp138, align 8
  %add.ptr139 = getelementptr inbounds %struct.gp, %struct.gp* %91, i64 0
  %gp_sv140 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr139, i32 0, i32 0
  %92 = load %struct.sv*, %struct.sv** %gp_sv140, align 8
  %tobool141 = icmp ne %struct.sv* %92, null
  br i1 %tobool141, label %cond.true142, label %cond.false147

cond.true142:                                     ; preds = %do.end136
  %93 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u143 = getelementptr inbounds %struct.gv, %struct.gv* %93, i32 0, i32 3
  %svu_gp144 = bitcast %union.anon.4* %sv_u143 to %struct.gp**
  %94 = load %struct.gp*, %struct.gp** %svu_gp144, align 8
  %add.ptr145 = getelementptr inbounds %struct.gp, %struct.gp* %94, i64 0
  %gp_sv146 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr145, i32 0, i32 0
  br label %cond.end153

cond.false147:                                    ; preds = %do.end136
  %95 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call148 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %95, i32 0)
  %sv_u149 = getelementptr inbounds %struct.gv, %struct.gv* %call148, i32 0, i32 3
  %svu_gp150 = bitcast %union.anon.4* %sv_u149 to %struct.gp**
  %96 = load %struct.gp*, %struct.gp** %svu_gp150, align 8
  %add.ptr151 = getelementptr inbounds %struct.gp, %struct.gp* %96, i64 0
  %gp_sv152 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr151, i32 0, i32 0
  br label %cond.end153

cond.end153:                                      ; preds = %cond.false147, %cond.true142
  %cond154 = phi %struct.sv** [ %gp_sv146, %cond.true142 ], [ %gp_sv152, %cond.false147 ]
  %97 = load %struct.sv*, %struct.sv** %cond154, align 8
  call void @Perl_sv_setpvn(%struct.sv* %97, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0), i64 1)
  br label %do.body155

do.body155:                                       ; preds = %cond.end153
  %98 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u156 = getelementptr inbounds %struct.gv, %struct.gv* %98, i32 0, i32 3
  %svu_gp157 = bitcast %union.anon.4* %sv_u156 to %struct.gp**
  %99 = load %struct.gp*, %struct.gp** %svu_gp157, align 8
  %add.ptr158 = getelementptr inbounds %struct.gp, %struct.gp* %99, i64 0
  %gp_sv159 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr158, i32 0, i32 0
  %100 = load %struct.sv*, %struct.sv** %gp_sv159, align 8
  %sv_flags160 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 2
  %101 = load i32, i32* %sv_flags160, align 4
  %and161 = and i32 %101, 4194304
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %cond.true163, label %cond.false164

cond.true163:                                     ; preds = %do.body155
  br i1 true, label %if.then165, label %if.end171

cond.false164:                                    ; preds = %do.body155
  br i1 false, label %if.then165, label %if.end171

if.then165:                                       ; preds = %cond.false164, %cond.true163
  %102 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_u166 = getelementptr inbounds %struct.gv, %struct.gv* %102, i32 0, i32 3
  %svu_gp167 = bitcast %union.anon.4* %sv_u166 to %struct.gp**
  %103 = load %struct.gp*, %struct.gp** %svu_gp167, align 8
  %add.ptr168 = getelementptr inbounds %struct.gp, %struct.gp* %103, i64 0
  %gp_sv169 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr168, i32 0, i32 0
  %104 = load %struct.sv*, %struct.sv** %gp_sv169, align 8
  %call170 = call i32 @Perl_mg_set(%struct.sv* %104)
  br label %if.end171

if.end171:                                        ; preds = %if.then165, %cond.false164, %cond.true163
  br label %do.end172

do.end172:                                        ; preds = %if.end171
  %105 = load %struct.io*, %struct.io** %io, align 8
  %sv_u173 = getelementptr inbounds %struct.io, %struct.io* %105, i32 0, i32 3
  %svu_fp174 = bitcast %union.anon.2* %sv_u173 to %struct._PerlIO***
  %106 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp174, align 8
  store %struct._PerlIO** %106, %struct._PerlIO*** %fp, align 8
  br label %have_fp

if.end175:                                        ; preds = %cond.end100
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %if.then77
  %107 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %108 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags177 = getelementptr inbounds %struct.op, %struct.op* %108, i32 0, i32 5
  %109 = load i8, i8* %op_flags177, align 2
  %conv178 = zext i8 %109 to i32
  %and179 = and i32 %conv178, 128
  %tobool180 = icmp ne i32 %and179, 0
  %call181 = call %struct._PerlIO** @Perl_nextargv(%struct.gv* %107, i1 zeroext %tobool180)
  store %struct._PerlIO** %call181, %struct._PerlIO*** %fp, align 8
  %110 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %tobool182 = icmp ne %struct._PerlIO** %110, null
  br i1 %tobool182, label %if.end185, label %if.then183

if.then183:                                       ; preds = %if.end176
  %111 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call184 = call zeroext i1 @Perl_do_close(%struct.gv* %111, i1 zeroext false)
  br label %if.end185

if.end185:                                        ; preds = %if.then183, %if.end176
  br label %if.end192

if.else:                                          ; preds = %if.then73
  %112 = load i32, i32* %type, align 4
  %cmp186 = icmp eq i32 %112, 25
  br i1 %cmp186, label %if.then188, label %if.end191

if.then188:                                       ; preds = %if.else
  %113 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr189 = getelementptr inbounds %struct.sv*, %struct.sv** %113, i32 -1
  store %struct.sv** %incdec.ptr189, %struct.sv*** %sp, align 8
  %114 = load %struct.sv*, %struct.sv** %113, align 8
  %115 = load %struct.io*, %struct.io** %io, align 8
  %call190 = call %struct._PerlIO** @Perl_start_glob(%struct.sv* %114, %struct.io* %115)
  store %struct._PerlIO** %call190, %struct._PerlIO*** %fp, align 8
  br label %if.end191

if.end191:                                        ; preds = %if.then188, %if.else
  br label %if.end192

if.end192:                                        ; preds = %if.end191, %if.end185
  br label %if.end206

if.else193:                                       ; preds = %if.then70
  %116 = load i32, i32* %type, align 4
  %cmp194 = icmp eq i32 %116, 25
  br i1 %cmp194, label %if.then196, label %if.else198

if.then196:                                       ; preds = %if.else193
  %117 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr197 = getelementptr inbounds %struct.sv*, %struct.sv** %117, i32 -1
  store %struct.sv** %incdec.ptr197, %struct.sv*** %sp, align 8
  br label %if.end205

if.else198:                                       ; preds = %if.else193
  %118 = load %struct.io*, %struct.io** %io, align 8
  %sv_any199 = getelementptr inbounds %struct.io, %struct.io* %118, i32 0, i32 0
  %119 = load %struct.xpvio*, %struct.xpvio** %sv_any199, align 8
  %xio_type = getelementptr inbounds %struct.xpvio, %struct.xpvio* %119, i32 0, i32 16
  %120 = load i8, i8* %xio_type, align 8
  %conv200 = sext i8 %120 to i32
  %cmp201 = icmp eq i32 %conv200, 62
  br i1 %cmp201, label %if.then203, label %if.end204

if.then203:                                       ; preds = %if.else198
  %121 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  call void @Perl_report_wrongway_fh(%struct.gv* %121, i8 signext 62)
  br label %if.end204

if.end204:                                        ; preds = %if.then203, %if.else198
  br label %if.end205

if.end205:                                        ; preds = %if.end204, %if.then196
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.end192
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %if.end68
  %122 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %tobool208 = icmp ne %struct._PerlIO** %122, null
  br i1 %tobool208, label %if.end247, label %if.then209

if.then209:                                       ; preds = %if.end207
  %123 = load %struct.io*, %struct.io** %io, align 8
  %tobool210 = icmp ne %struct.io* %123, null
  br i1 %tobool210, label %lor.lhs.false211, label %land.lhs.true217

lor.lhs.false211:                                 ; preds = %if.then209
  %124 = load %struct.io*, %struct.io** %io, align 8
  %sv_any212 = getelementptr inbounds %struct.io, %struct.io* %124, i32 0, i32 0
  %125 = load %struct.xpvio*, %struct.xpvio** %sv_any212, align 8
  %xio_flags213 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %125, i32 0, i32 17
  %126 = load i8, i8* %xio_flags213, align 1
  %conv214 = zext i8 %126 to i32
  %and215 = and i32 %conv214, 2
  %tobool216 = icmp ne i32 %and215, 0
  br i1 %tobool216, label %if.end224, label %land.lhs.true217

land.lhs.true217:                                 ; preds = %lor.lhs.false211, %if.then209
  %call218 = call zeroext i1 @Perl_ckwarn(i32 6)
  br i1 %call218, label %land.lhs.true220, label %if.end224

land.lhs.true220:                                 ; preds = %land.lhs.true217
  %127 = load i32, i32* %type, align 4
  %cmp221 = icmp ne i32 %127, 25
  br i1 %cmp221, label %if.then223, label %if.end224

if.then223:                                       ; preds = %land.lhs.true220
  %128 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %128)
  br label %if.end224

if.end224:                                        ; preds = %if.then223, %land.lhs.true220, %land.lhs.true217, %lor.lhs.false211
  %129 = load i32, i32* %gimme, align 4
  %cmp225 = icmp eq i32 %129, 2
  br i1 %cmp225, label %if.then227, label %if.end245

if.then227:                                       ; preds = %if.end224
  %130 = load i32, i32* %type, align 4
  %cmp228 = icmp ne i32 %130, 27
  br i1 %cmp228, label %if.then230, label %if.end231

if.then230:                                       ; preds = %if.then227
  %131 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %131, %struct.sv* null, i32 1538)
  br label %if.end231

if.end231:                                        ; preds = %if.then230, %if.then227
  br label %do.body232

do.body232:                                       ; preds = %if.end231
  br label %do.body233

do.body233:                                       ; preds = %do.body232
  %132 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags234 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 2
  %133 = load i32, i32* %sv_flags234, align 4
  %and235 = and i32 %133, 4194304
  %tobool236 = icmp ne i32 %and235, 0
  br i1 %tobool236, label %cond.true237, label %cond.false238

cond.true237:                                     ; preds = %do.body233
  br i1 true, label %if.then239, label %if.end241

cond.false238:                                    ; preds = %do.body233
  br i1 false, label %if.then239, label %if.end241

if.then239:                                       ; preds = %cond.false238, %cond.true237
  %134 = load %struct.sv*, %struct.sv** %targ, align 8
  %call240 = call i32 @Perl_mg_set(%struct.sv* %134)
  br label %if.end241

if.end241:                                        ; preds = %if.then239, %cond.false238, %cond.true237
  br label %do.end242

do.end242:                                        ; preds = %if.end241
  %135 = load %struct.sv*, %struct.sv** %targ, align 8
  %136 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr243 = getelementptr inbounds %struct.sv*, %struct.sv** %136, i32 1
  store %struct.sv** %incdec.ptr243, %struct.sv*** %sp, align 8
  store %struct.sv* %135, %struct.sv** %incdec.ptr243, align 8
  br label %do.end244

do.end244:                                        ; preds = %do.end242
  br label %if.end245

if.end245:                                        ; preds = %do.end244, %if.end224
  %137 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %137, %struct.sv*** @PL_stack_sp, align 8
  %138 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next246 = getelementptr inbounds %struct.op, %struct.op* %138, i32 0, i32 0
  %139 = load %struct.op*, %struct.op** %op_next246, align 8
  store %struct.op* %139, %struct.op** %retval, align 8
  br label %return

if.end247:                                        ; preds = %if.end207
  br label %have_fp

have_fp:                                          ; preds = %if.end247, %do.end172
  %140 = load i32, i32* %gimme, align 4
  %cmp248 = icmp eq i32 %140, 2
  br i1 %cmp248, label %if.then250, label %if.else360

if.then250:                                       ; preds = %have_fp
  %141 = load %struct.sv*, %struct.sv** %targ, align 8
  store %struct.sv* %141, %struct.sv** %sv, align 8
  %142 = load i32, i32* %type, align 4
  %cmp251 = icmp eq i32 %142, 27
  br i1 %cmp251, label %land.lhs.true253, label %if.end259

land.lhs.true253:                                 ; preds = %if.then250
  %143 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags254 = getelementptr inbounds %struct.sv, %struct.sv* %143, i32 0, i32 2
  %144 = load i32, i32* %sv_flags254, align 4
  %and255 = and i32 %144, 2097152
  %tobool256 = icmp ne i32 %and255, 0
  br i1 %tobool256, label %if.then257, label %if.end259

if.then257:                                       ; preds = %land.lhs.true253
  %145 = load %struct.sv*, %struct.sv** %sv, align 8
  %call258 = call i32 @Perl_mg_get(%struct.sv* %145)
  br label %if.end259

if.end259:                                        ; preds = %if.then257, %land.lhs.true253, %if.then250
  %146 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags260 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 2
  %147 = load i32, i32* %sv_flags260, align 4
  %and261 = and i32 %147, 2048
  %tobool262 = icmp ne i32 %and261, 0
  br i1 %tobool262, label %if.then263, label %if.else279

if.then263:                                       ; preds = %if.end259
  %148 = load i32, i32* %type, align 4
  %cmp264 = icmp eq i32 %148, 27
  br i1 %cmp264, label %if.then266, label %if.else277

if.then266:                                       ; preds = %if.then263
  %149 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags267 = getelementptr inbounds %struct.sv, %struct.sv* %149, i32 0, i32 2
  %150 = load i32, i32* %sv_flags267, align 4
  %and268 = and i32 %150, 430018304
  %cmp269 = icmp eq i32 %and268, 1024
  br i1 %cmp269, label %cond.true271, label %cond.false273

cond.true271:                                     ; preds = %if.then266
  %151 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u272 = getelementptr inbounds %struct.sv, %struct.sv* %151, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u272 to i8**
  %152 = load i8*, i8** %svu_pv, align 8
  br label %cond.end275

cond.false273:                                    ; preds = %if.then266
  %153 = load %struct.sv*, %struct.sv** %sv, align 8
  %call274 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %153, i64* null, i32 0)
  br label %cond.end275

cond.end275:                                      ; preds = %cond.false273, %cond.true271
  %cond276 = phi i8* [ %152, %cond.true271 ], [ %call274, %cond.false273 ]
  br label %if.end278

if.else277:                                       ; preds = %if.then263
  %154 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_unref_flags(%struct.sv* %154, i32 0)
  br label %if.end278

if.end278:                                        ; preds = %if.else277, %cond.end275
  br label %if.end307

if.else279:                                       ; preds = %if.end259
  %155 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags280 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 2
  %156 = load i32, i32* %sv_flags280, align 4
  %and281 = and i32 %156, 49152
  %cmp282 = icmp eq i32 %and281, 32768
  br i1 %cmp282, label %land.lhs.true284, label %if.end306

land.lhs.true284:                                 ; preds = %if.else279
  %157 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags285 = getelementptr inbounds %struct.sv, %struct.sv* %157, i32 0, i32 2
  %158 = load i32, i32* %sv_flags285, align 4
  %and286 = and i32 %158, 255
  %cmp287 = icmp eq i32 %and286, 9
  br i1 %cmp287, label %if.then294, label %lor.lhs.false289

lor.lhs.false289:                                 ; preds = %land.lhs.true284
  %159 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags290 = getelementptr inbounds %struct.sv, %struct.sv* %159, i32 0, i32 2
  %160 = load i32, i32* %sv_flags290, align 4
  %and291 = and i32 %160, 255
  %cmp292 = icmp eq i32 %and291, 10
  br i1 %cmp292, label %if.then294, label %if.end306

if.then294:                                       ; preds = %lor.lhs.false289, %land.lhs.true284
  %161 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags295 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 2
  %162 = load i32, i32* %sv_flags295, align 4
  %and296 = and i32 %162, 430018304
  %cmp297 = icmp eq i32 %and296, 1024
  br i1 %cmp297, label %cond.true299, label %cond.false302

cond.true299:                                     ; preds = %if.then294
  %163 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u300 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 3
  %svu_pv301 = bitcast %union.anon* %sv_u300 to i8**
  %164 = load i8*, i8** %svu_pv301, align 8
  br label %cond.end304

cond.false302:                                    ; preds = %if.then294
  %165 = load %struct.sv*, %struct.sv** %sv, align 8
  %call303 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %165, i64* null, i32 0)
  br label %cond.end304

cond.end304:                                      ; preds = %cond.false302, %cond.true299
  %cond305 = phi i8* [ %164, %cond.true299 ], [ %call303, %cond.false302 ]
  br label %if.end306

if.end306:                                        ; preds = %cond.end304, %lor.lhs.false289, %if.else279
  br label %if.end307

if.end307:                                        ; preds = %if.end306, %if.end278
  %166 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags308 = getelementptr inbounds %struct.sv, %struct.sv* %166, i32 0, i32 2
  %167 = load i32, i32* %sv_flags308, align 4
  %and309 = and i32 %167, 255
  %cmp310 = icmp uge i32 %and309, 3
  br i1 %cmp310, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end307
  %168 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_upgrade(%struct.sv* %168, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end307
  %169 = phi i1 [ true, %if.end307 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %169 to i32
  %170 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any312 = getelementptr inbounds %struct.sv, %struct.sv* %170, i32 0, i32 0
  %171 = load i8*, i8** %sv_any312, align 8
  %172 = bitcast i8* %171 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %172, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.26* %xpv_len_u to i64*
  %173 = load i64, i64* %xpvlenu_len, align 8
  store i64 %173, i64* %tmplen, align 8
  %174 = load i64, i64* %tmplen, align 8
  %tobool313 = icmp ne i64 %174, 0
  br i1 %tobool313, label %if.end324, label %land.lhs.true314

land.lhs.true314:                                 ; preds = %lor.end
  %175 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags315 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 2
  %176 = load i32, i32* %sv_flags315, align 4
  %and316 = and i32 %176, 134283264
  %tobool317 = icmp ne i32 %and316, 0
  br i1 %tobool317, label %if.end324, label %land.lhs.true318

land.lhs.true318:                                 ; preds = %land.lhs.true314
  %177 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags319 = getelementptr inbounds %struct.sv, %struct.sv* %177, i32 0, i32 2
  %178 = load i32, i32* %sv_flags319, align 4
  %and320 = and i32 %178, 268435456
  %tobool321 = icmp ne i32 %and320, 0
  br i1 %tobool321, label %if.end324, label %if.then322

if.then322:                                       ; preds = %land.lhs.true318
  %179 = load %struct.sv*, %struct.sv** %sv, align 8
  %call323 = call i8* @Perl_sv_grow(%struct.sv* %179, i64 80)
  br label %if.end324

if.end324:                                        ; preds = %if.then322, %land.lhs.true318, %land.lhs.true314, %lor.end
  store i64 0, i64* %offset, align 8
  %180 = load i32, i32* %type, align 4
  %cmp325 = icmp eq i32 %180, 27
  br i1 %cmp325, label %land.lhs.true327, label %if.end359

land.lhs.true327:                                 ; preds = %if.end324
  %181 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags328 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 2
  %182 = load i32, i32* %sv_flags328, align 4
  %and329 = and i32 %182, 65280
  %tobool330 = icmp ne i32 %and329, 0
  br i1 %tobool330, label %if.then341, label %lor.lhs.false331

lor.lhs.false331:                                 ; preds = %land.lhs.true327
  %183 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags332 = getelementptr inbounds %struct.sv, %struct.sv* %183, i32 0, i32 2
  %184 = load i32, i32* %sv_flags332, align 4
  %and333 = and i32 %184, 255
  %cmp334 = icmp eq i32 %and333, 8
  br i1 %cmp334, label %if.then341, label %lor.lhs.false336

lor.lhs.false336:                                 ; preds = %lor.lhs.false331
  %185 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags337 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 2
  %186 = load i32, i32* %sv_flags337, align 4
  %and338 = and i32 %186, 16826623
  %cmp339 = icmp eq i32 %and338, 16777226
  br i1 %cmp339, label %if.then341, label %if.end359

if.then341:                                       ; preds = %lor.lhs.false336, %lor.lhs.false331, %land.lhs.true327
  %187 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags342 = getelementptr inbounds %struct.sv, %struct.sv* %187, i32 0, i32 2
  %188 = load i32, i32* %sv_flags342, align 4
  %and343 = and i32 %188, 1024
  %tobool344 = icmp ne i32 %and343, 0
  br i1 %tobool344, label %if.end357, label %if.then345

if.then345:                                       ; preds = %if.then341
  %189 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags346 = getelementptr inbounds %struct.sv, %struct.sv* %189, i32 0, i32 2
  %190 = load i32, i32* %sv_flags346, align 4
  %and347 = and i32 %190, 430018304
  %cmp348 = icmp eq i32 %and347, 1024
  br i1 %cmp348, label %cond.true350, label %cond.false353

cond.true350:                                     ; preds = %if.then345
  %191 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u351 = getelementptr inbounds %struct.sv, %struct.sv* %191, i32 0, i32 3
  %svu_pv352 = bitcast %union.anon* %sv_u351 to i8**
  %192 = load i8*, i8** %svu_pv352, align 8
  br label %cond.end355

cond.false353:                                    ; preds = %if.then345
  %193 = load %struct.sv*, %struct.sv** %sv, align 8
  %call354 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %193, i64* null, i32 0)
  br label %cond.end355

cond.end355:                                      ; preds = %cond.false353, %cond.true350
  %cond356 = phi i8* [ %192, %cond.true350 ], [ %call354, %cond.false353 ]
  br label %if.end357

if.end357:                                        ; preds = %cond.end355, %if.then341
  %194 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any358 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 0
  %195 = load i8*, i8** %sv_any358, align 8
  %196 = bitcast i8* %195 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %196, i32 0, i32 2
  %197 = load i64, i64* %xpv_cur, align 8
  store i64 %197, i64* %offset, align 8
  br label %if.end359

if.end359:                                        ; preds = %if.end357, %lor.lhs.false336, %if.end324
  br label %if.end363

if.else360:                                       ; preds = %have_fp
  %call361 = call %struct.sv* @Perl_newSV(i64 80)
  %call362 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call361)
  store %struct.sv* %call362, %struct.sv** %sv, align 8
  store i64 0, i64* %offset, align 8
  br label %if.end363

if.end363:                                        ; preds = %if.else360, %if.end359
  br label %for.cond

for.cond:                                         ; preds = %if.end642, %if.then577, %if.then413, %if.end363
  %198 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %198, %struct.sv*** @PL_stack_sp, align 8
  %199 = load %struct.sv*, %struct.sv** %sv, align 8
  %200 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %201 = load i64, i64* %offset, align 8
  %conv364 = trunc i64 %201 to i32
  %call365 = call i8* @Perl_sv_gets(%struct.sv* %199, %struct._PerlIO** %200, i32 %conv364)
  %tobool366 = icmp ne i8* %call365, null
  br i1 %tobool366, label %if.end477, label %land.lhs.true367

land.lhs.true367:                                 ; preds = %for.cond
  %202 = load i32, i32* %type, align 4
  %cmp368 = icmp eq i32 %202, 25
  br i1 %cmp368, label %if.then400, label %lor.lhs.false370

lor.lhs.false370:                                 ; preds = %land.lhs.true367
  %203 = load i32, i32* %gimme, align 4
  %cmp371 = icmp ne i32 %203, 2
  br i1 %cmp371, label %if.then400, label %lor.lhs.false373

lor.lhs.false373:                                 ; preds = %lor.lhs.false370
  %204 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any374 = getelementptr inbounds %struct.sv, %struct.sv* %204, i32 0, i32 0
  %205 = load i8*, i8** %sv_any374, align 8
  %206 = bitcast i8* %205 to %struct.xpv*
  %xpv_cur375 = getelementptr inbounds %struct.xpv, %struct.xpv* %206, i32 0, i32 2
  %207 = load i64, i64* %xpv_cur375, align 8
  %tobool376 = icmp ne i64 %207, 0
  br i1 %tobool376, label %if.then400, label %lor.lhs.false377

lor.lhs.false377:                                 ; preds = %lor.lhs.false373
  %208 = load %struct.io*, %struct.io** %io, align 8
  %sv_any378 = getelementptr inbounds %struct.io, %struct.io* %208, i32 0, i32 0
  %209 = load %struct.xpvio*, %struct.xpvio** %sv_any378, align 8
  %xio_flags379 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %209, i32 0, i32 17
  %210 = load i8, i8* %xio_flags379, align 1
  %conv380 = zext i8 %210 to i32
  %and381 = and i32 %conv380, 32
  %tobool382 = icmp ne i32 %and381, 0
  br i1 %tobool382, label %if.then400, label %lor.lhs.false383

lor.lhs.false383:                                 ; preds = %lor.lhs.false377
  %211 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags384 = getelementptr inbounds %struct.sv, %struct.sv* %211, i32 0, i32 2
  %212 = load i32, i32* %sv_flags384, align 4
  %and385 = and i32 %212, 65280
  %tobool386 = icmp ne i32 %and385, 0
  br i1 %tobool386, label %if.then400, label %lor.lhs.false387

lor.lhs.false387:                                 ; preds = %lor.lhs.false383
  %213 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags388 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 2
  %214 = load i32, i32* %sv_flags388, align 4
  %and389 = and i32 %214, 255
  %cmp390 = icmp eq i32 %and389, 8
  br i1 %cmp390, label %if.then400, label %lor.lhs.false392

lor.lhs.false392:                                 ; preds = %lor.lhs.false387
  %215 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags393 = getelementptr inbounds %struct.sv, %struct.sv* %215, i32 0, i32 2
  %216 = load i32, i32* %sv_flags393, align 4
  %and394 = and i32 %216, 16826623
  %cmp395 = icmp eq i32 %and394, 16777226
  br i1 %cmp395, label %if.then400, label %lor.lhs.false397

lor.lhs.false397:                                 ; preds = %lor.lhs.false392
  %217 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call398 = call i32 @Perl_PerlIO_error(%struct._PerlIO** %217)
  %tobool399 = icmp ne i32 %call398, 0
  br i1 %tobool399, label %if.then400, label %if.end477

if.then400:                                       ; preds = %lor.lhs.false397, %lor.lhs.false392, %lor.lhs.false387, %lor.lhs.false383, %lor.lhs.false377, %lor.lhs.false373, %lor.lhs.false370, %land.lhs.true367
  %218 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  call void @Perl_PerlIO_clearerr(%struct._PerlIO** %218)
  %219 = load %struct.io*, %struct.io** %io, align 8
  %sv_any401 = getelementptr inbounds %struct.io, %struct.io* %219, i32 0, i32 0
  %220 = load %struct.xpvio*, %struct.xpvio** %sv_any401, align 8
  %xio_flags402 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %220, i32 0, i32 17
  %221 = load i8, i8* %xio_flags402, align 1
  %conv403 = zext i8 %221 to i32
  %and404 = and i32 %conv403, 1
  %tobool405 = icmp ne i32 %and404, 0
  br i1 %tobool405, label %if.then406, label %if.else416

if.then406:                                       ; preds = %if.then400
  %222 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %223 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags407 = getelementptr inbounds %struct.op, %struct.op* %223, i32 0, i32 5
  %224 = load i8, i8* %op_flags407, align 2
  %conv408 = zext i8 %224 to i32
  %and409 = and i32 %conv408, 128
  %tobool410 = icmp ne i32 %and409, 0
  %call411 = call %struct._PerlIO** @Perl_nextargv(%struct.gv* %222, i1 zeroext %tobool410)
  store %struct._PerlIO** %call411, %struct._PerlIO*** %fp, align 8
  %225 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %tobool412 = icmp ne %struct._PerlIO** %225, null
  br i1 %tobool412, label %if.then413, label %if.end414

if.then413:                                       ; preds = %if.then406
  br label %for.cond

if.end414:                                        ; preds = %if.then406
  %226 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call415 = call zeroext i1 @Perl_do_close(%struct.gv* %226, i1 zeroext false)
  br label %if.end427

if.else416:                                       ; preds = %if.then400
  %227 = load i32, i32* %type, align 4
  %cmp417 = icmp eq i32 %227, 25
  br i1 %cmp417, label %if.then419, label %if.end426

if.then419:                                       ; preds = %if.else416
  %228 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call420 = call zeroext i1 @Perl_do_close(%struct.gv* %228, i1 zeroext false)
  br i1 %call420, label %if.end425, label %if.then421

if.then421:                                       ; preds = %if.then419
  %229 = load i32, i32* @PL_statusvalue, align 4
  %shr = ashr i32 %229, 8
  %230 = load i32, i32* @PL_statusvalue, align 4
  %and422 = and i32 %230, 128
  %tobool423 = icmp ne i32 %and422, 0
  %231 = zext i1 %tobool423 to i64
  %cond424 = select i1 %tobool423, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)
  call void (i32, i8*, ...) @Perl_ck_warner(i32 4, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.18, i64 0, i64 0), i32 %shr, i8* %cond424)
  br label %if.end425

if.end425:                                        ; preds = %if.then421, %if.then419
  br label %if.end426

if.end426:                                        ; preds = %if.end425, %if.else416
  br label %if.end427

if.end427:                                        ; preds = %if.end426, %if.end414
  %232 = load i32, i32* %gimme, align 4
  %cmp428 = icmp eq i32 %232, 2
  br i1 %cmp428, label %if.then430, label %if.end460

if.then430:                                       ; preds = %if.end427
  %233 = load i32, i32* %type, align 4
  %cmp431 = icmp ne i32 %233, 27
  br i1 %cmp431, label %if.then433, label %if.end446

if.then433:                                       ; preds = %if.then430
  %234 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags434 = getelementptr inbounds %struct.sv, %struct.sv* %234, i32 0, i32 2
  %235 = load i32, i32* %sv_flags434, align 4
  %and435 = and i32 %235, 427886592
  %tobool436 = icmp ne i32 %and435, 0
  br i1 %tobool436, label %if.then437, label %if.end438

if.then437:                                       ; preds = %if.then433
  %236 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %236, i32 4)
  br label %if.end438

if.end438:                                        ; preds = %if.then437, %if.then433
  %237 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags439 = getelementptr inbounds %struct.sv, %struct.sv* %237, i32 0, i32 2
  %238 = load i32, i32* %sv_flags439, align 4
  %and440 = and i32 %238, 1610547455
  store i32 %and440, i32* %sv_flags439, align 4
  %239 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags441 = getelementptr inbounds %struct.sv, %struct.sv* %239, i32 0, i32 2
  %240 = load i32, i32* %sv_flags441, align 4
  %and442 = and i32 %240, 33554432
  %tobool443 = icmp ne i32 %and442, 0
  br i1 %tobool443, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end438
  %241 = load %struct.sv*, %struct.sv** %targ, align 8
  %call444 = call i32 @Perl_sv_backoff(%struct.sv* %241)
  %tobool445 = icmp ne i32 %call444, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end438
  %242 = phi i1 [ false, %if.end438 ], [ %tobool445, %land.rhs ]
  %land.ext = zext i1 %242 to i32
  br label %if.end446

if.end446:                                        ; preds = %land.end, %if.then430
  %243 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %243, %struct.sv*** %sp, align 8
  br label %do.body447

do.body447:                                       ; preds = %if.end446
  br label %do.body448

do.body448:                                       ; preds = %do.body447
  %244 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags449 = getelementptr inbounds %struct.sv, %struct.sv* %244, i32 0, i32 2
  %245 = load i32, i32* %sv_flags449, align 4
  %and450 = and i32 %245, 4194304
  %tobool451 = icmp ne i32 %and450, 0
  br i1 %tobool451, label %cond.true452, label %cond.false453

cond.true452:                                     ; preds = %do.body448
  br i1 true, label %if.then454, label %if.end456

cond.false453:                                    ; preds = %do.body448
  br i1 false, label %if.then454, label %if.end456

if.then454:                                       ; preds = %cond.false453, %cond.true452
  %246 = load %struct.sv*, %struct.sv** %targ, align 8
  %call455 = call i32 @Perl_mg_set(%struct.sv* %246)
  br label %if.end456

if.end456:                                        ; preds = %if.then454, %cond.false453, %cond.true452
  br label %do.end457

do.end457:                                        ; preds = %if.end456
  %247 = load %struct.sv*, %struct.sv** %targ, align 8
  %248 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr458 = getelementptr inbounds %struct.sv*, %struct.sv** %248, i32 1
  store %struct.sv** %incdec.ptr458, %struct.sv*** %sp, align 8
  store %struct.sv* %247, %struct.sv** %incdec.ptr458, align 8
  br label %do.end459

do.end459:                                        ; preds = %do.end457
  br label %if.end460

if.end460:                                        ; preds = %do.end459, %if.end427
  %249 = load %struct.io*, %struct.io** %io, align 8
  %sv_any461 = getelementptr inbounds %struct.io, %struct.io* %249, i32 0, i32 0
  %250 = load %struct.xpvio*, %struct.xpvio** %sv_any461, align 8
  %xio_flags462 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %250, i32 0, i32 17
  %251 = load i8, i8* %xio_flags462, align 1
  %conv463 = zext i8 %251 to i32
  %and464 = and i32 %conv463, 16
  %tobool465 = icmp ne i32 %and464, 0
  br i1 %tobool465, label %if.end475, label %if.then466

if.then466:                                       ; preds = %if.end460
  store i8 1, i8* @PL_tainted, align 1
  br label %do.body467

do.body467:                                       ; preds = %if.then466
  %252 = load i8, i8* @PL_tainting, align 1
  %tobool468 = trunc i8 %252 to i1
  br i1 %tobool468, label %cond.true470, label %cond.false471

cond.true470:                                     ; preds = %do.body467
  br i1 true, label %if.then472, label %if.end473

cond.false471:                                    ; preds = %do.body467
  br i1 false, label %if.then472, label %if.end473

if.then472:                                       ; preds = %cond.false471, %cond.true470
  %253 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_magic(%struct.sv* %253, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end473

if.end473:                                        ; preds = %if.then472, %cond.false471, %cond.true470
  br label %do.end474

do.end474:                                        ; preds = %if.end473
  br label %if.end475

if.end475:                                        ; preds = %do.end474, %if.end460
  %254 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %254, %struct.sv*** @PL_stack_sp, align 8
  %255 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next476 = getelementptr inbounds %struct.op, %struct.op* %255, i32 0, i32 0
  %256 = load %struct.op*, %struct.op** %op_next476, align 8
  store %struct.op* %256, %struct.op** %retval, align 8
  br label %return

if.end477:                                        ; preds = %lor.lhs.false397, %for.cond
  %257 = load %struct.io*, %struct.io** %io, align 8
  %sv_any478 = getelementptr inbounds %struct.io, %struct.io* %257, i32 0, i32 0
  %258 = load %struct.xpvio*, %struct.xpvio** %sv_any478, align 8
  %xio_flags479 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %258, i32 0, i32 17
  %259 = load i8, i8* %xio_flags479, align 1
  %conv480 = zext i8 %259 to i32
  %and481 = and i32 %conv480, 16
  %tobool482 = icmp ne i32 %and481, 0
  br i1 %tobool482, label %if.end492, label %if.then483

if.then483:                                       ; preds = %if.end477
  store i8 1, i8* @PL_tainted, align 1
  br label %do.body484

do.body484:                                       ; preds = %if.then483
  %260 = load i8, i8* @PL_tainting, align 1
  %tobool485 = trunc i8 %260 to i1
  br i1 %tobool485, label %cond.true487, label %cond.false488

cond.true487:                                     ; preds = %do.body484
  br i1 true, label %if.then489, label %if.end490

cond.false488:                                    ; preds = %do.body484
  br i1 false, label %if.then489, label %if.end490

if.then489:                                       ; preds = %cond.false488, %cond.true487
  %261 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_magic(%struct.sv* %261, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end490

if.end490:                                        ; preds = %if.then489, %cond.false488, %cond.true487
  br label %do.end491

do.end491:                                        ; preds = %if.end490
  br label %if.end492

if.end492:                                        ; preds = %do.end491, %if.end477
  %262 = load %struct.io*, %struct.io** %io, align 8
  %sv_any493 = getelementptr inbounds %struct.io, %struct.io* %262, i32 0, i32 0
  %263 = load %struct.xpvio*, %struct.xpvio** %sv_any493, align 8
  %xiv_u494 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %263, i32 0, i32 4
  %xivu_iv495 = bitcast %union._xivu* %xiv_u494 to i64*
  %264 = load i64, i64* %xivu_iv495, align 8
  %inc = add nsw i64 %264, 1
  store i64 %inc, i64* %xivu_iv495, align 8
  %265 = load %struct.io*, %struct.io** %io, align 8
  %sv_any496 = getelementptr inbounds %struct.io, %struct.io* %265, i32 0, i32 0
  %266 = load %struct.xpvio*, %struct.xpvio** %sv_any496, align 8
  %xio_flags497 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %266, i32 0, i32 17
  %267 = load i8, i8* %xio_flags497, align 1
  %conv498 = zext i8 %267 to i32
  %or = or i32 %conv498, 32
  %conv499 = trunc i32 %or to i8
  store i8 %conv499, i8* %xio_flags497, align 1
  br label %do.body500

do.body500:                                       ; preds = %if.end492
  %268 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags501 = getelementptr inbounds %struct.sv, %struct.sv* %268, i32 0, i32 2
  %269 = load i32, i32* %sv_flags501, align 4
  %and502 = and i32 %269, 4194304
  %tobool503 = icmp ne i32 %and502, 0
  br i1 %tobool503, label %cond.true504, label %cond.false505

cond.true504:                                     ; preds = %do.body500
  br i1 true, label %if.then506, label %if.end508

cond.false505:                                    ; preds = %do.body500
  br i1 false, label %if.then506, label %if.end508

if.then506:                                       ; preds = %cond.false505, %cond.true504
  %270 = load %struct.sv*, %struct.sv** %sv, align 8
  %call507 = call i32 @Perl_mg_set(%struct.sv* %270)
  br label %if.end508

if.end508:                                        ; preds = %if.then506, %cond.false505, %cond.true504
  br label %do.end509

do.end509:                                        ; preds = %if.end508
  %271 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %271, %struct.sv*** %sp, align 8
  br label %do.body510

do.body510:                                       ; preds = %do.end509
  br label %do.body511

do.body511:                                       ; preds = %do.body510
  %272 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %273 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %272 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %273 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp512 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp512, label %cond.true514, label %cond.false515

cond.true514:                                     ; preds = %do.body511
  br i1 true, label %if.then516, label %if.end518

cond.false515:                                    ; preds = %do.body511
  br i1 false, label %if.then516, label %if.end518

if.then516:                                       ; preds = %cond.false515, %cond.true514
  %274 = load %struct.sv**, %struct.sv*** %sp, align 8
  %275 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call517 = call %struct.sv** @Perl_stack_grow(%struct.sv** %274, %struct.sv** %275, i64 1)
  store %struct.sv** %call517, %struct.sv*** %sp, align 8
  %276 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end518

if.end518:                                        ; preds = %if.then516, %cond.false515, %cond.true514
  br label %do.end519

do.end519:                                        ; preds = %if.end518
  %277 = load %struct.sv*, %struct.sv** %sv, align 8
  %278 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr520 = getelementptr inbounds %struct.sv*, %struct.sv** %278, i32 1
  store %struct.sv** %incdec.ptr520, %struct.sv*** %sp, align 8
  store %struct.sv* %277, %struct.sv** %incdec.ptr520, align 8
  br label %do.end521

do.end521:                                        ; preds = %do.end519
  %279 = load i32, i32* %type, align 4
  %cmp522 = icmp eq i32 %279, 25
  br i1 %cmp522, label %if.then524, label %if.else580

if.then524:                                       ; preds = %do.end521
  %280 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any525 = getelementptr inbounds %struct.sv, %struct.sv* %280, i32 0, i32 0
  %281 = load i8*, i8** %sv_any525, align 8
  %282 = bitcast i8* %281 to %struct.xpv*
  %xpv_cur526 = getelementptr inbounds %struct.xpv, %struct.xpv* %282, i32 0, i32 2
  %283 = load i64, i64* %xpv_cur526, align 8
  %cmp527 = icmp ugt i64 %283, 0
  br i1 %cmp527, label %land.lhs.true529, label %if.end556

land.lhs.true529:                                 ; preds = %if.then524
  %284 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any530 = getelementptr inbounds %struct.sv, %struct.sv* %284, i32 0, i32 0
  %285 = load i8*, i8** %sv_any530, align 8
  %286 = bitcast i8* %285 to %struct.xpv*
  %xpv_cur531 = getelementptr inbounds %struct.xpv, %struct.xpv* %286, i32 0, i32 2
  %287 = load i64, i64* %xpv_cur531, align 8
  %cmp532 = icmp ugt i64 %287, 0
  br i1 %cmp532, label %if.then534, label %if.end556

if.then534:                                       ; preds = %land.lhs.true529
  %288 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u535 = getelementptr inbounds %struct.sv, %struct.sv* %288, i32 0, i32 3
  %svu_pv536 = bitcast %union.anon* %sv_u535 to i8**
  %289 = load i8*, i8** %svu_pv536, align 8
  %290 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any537 = getelementptr inbounds %struct.sv, %struct.sv* %290, i32 0, i32 0
  %291 = load i8*, i8** %sv_any537, align 8
  %292 = bitcast i8* %291 to %struct.xpv*
  %xpv_cur538 = getelementptr inbounds %struct.xpv, %struct.xpv* %292, i32 0, i32 2
  %293 = load i64, i64* %xpv_cur538, align 8
  %add.ptr539 = getelementptr inbounds i8, i8* %289, i64 %293
  %add.ptr540 = getelementptr inbounds i8, i8* %add.ptr539, i64 -1
  store i8* %add.ptr540, i8** %tmps, align 8
  %294 = load i8*, i8** %tmps, align 8
  %295 = load i8, i8* %294, align 1
  %conv541 = sext i8 %295 to i32
  %296 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u542 = getelementptr inbounds %struct.sv, %struct.sv* %296, i32 0, i32 3
  %svu_pv543 = bitcast %union.anon* %sv_u542 to i8**
  %297 = load i8*, i8** %svu_pv543, align 8
  %add.ptr544 = getelementptr inbounds i8, i8* %297, i64 0
  %298 = load i8, i8* %add.ptr544, align 1
  %conv545 = sext i8 %298 to i32
  %cmp546 = icmp eq i32 %conv541, %conv545
  br i1 %cmp546, label %if.then548, label %if.end555

if.then548:                                       ; preds = %if.then534
  %299 = load i8*, i8** %tmps, align 8
  store i8 0, i8* %299, align 1
  br label %do.body549

do.body549:                                       ; preds = %if.then548
  %300 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any550 = getelementptr inbounds %struct.sv, %struct.sv* %300, i32 0, i32 0
  %301 = load i8*, i8** %sv_any550, align 8
  %302 = bitcast i8* %301 to %struct.xpv*
  %xpv_cur551 = getelementptr inbounds %struct.xpv, %struct.xpv* %302, i32 0, i32 2
  %303 = load i64, i64* %xpv_cur551, align 8
  %sub = sub i64 %303, 1
  %304 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any552 = getelementptr inbounds %struct.sv, %struct.sv* %304, i32 0, i32 0
  %305 = load i8*, i8** %sv_any552, align 8
  %306 = bitcast i8* %305 to %struct.xpv*
  %xpv_cur553 = getelementptr inbounds %struct.xpv, %struct.xpv* %306, i32 0, i32 2
  store i64 %sub, i64* %xpv_cur553, align 8
  br label %do.end554

do.end554:                                        ; preds = %do.body549
  br label %if.end555

if.end555:                                        ; preds = %do.end554, %if.then534
  br label %if.end556

if.end556:                                        ; preds = %if.end555, %land.lhs.true529, %if.then524
  %307 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u557 = getelementptr inbounds %struct.sv, %struct.sv* %307, i32 0, i32 3
  %svu_pv558 = bitcast %union.anon* %sv_u557 to i8**
  %308 = load i8*, i8** %svu_pv558, align 8
  %add.ptr559 = getelementptr inbounds i8, i8* %308, i64 0
  store i8* %add.ptr559, i8** %t1, align 8
  br label %for.cond560

for.cond560:                                      ; preds = %for.inc, %if.end556
  %309 = load i8*, i8** %t1, align 8
  %310 = load i8, i8* %309, align 1
  %tobool561 = icmp ne i8 %310, 0
  br i1 %tobool561, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond560
  %311 = load i8*, i8** %t1, align 8
  %312 = load i8, i8* %311, align 1
  %conv562 = sext i8 %312 to i32
  %call563 = call i8* @strchr(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0), i32 %conv562) #6
  %tobool564 = icmp ne i8* %call563, null
  br i1 %tobool564, label %if.then565, label %if.end566

if.then565:                                       ; preds = %for.body
  br label %for.end

if.end566:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end566
  %313 = load i8*, i8** %t1, align 8
  %incdec.ptr567 = getelementptr inbounds i8, i8* %313, i32 1
  store i8* %incdec.ptr567, i8** %t1, align 8
  br label %for.cond560

for.end:                                          ; preds = %if.then565, %for.cond560
  %314 = load i8*, i8** %t1, align 8
  %315 = load i8, i8* %314, align 1
  %conv568 = sext i8 %315 to i32
  %tobool569 = icmp ne i32 %conv568, 0
  br i1 %tobool569, label %land.lhs.true570, label %if.end579

land.lhs.true570:                                 ; preds = %for.end
  %316 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u571 = getelementptr inbounds %struct.sv, %struct.sv* %316, i32 0, i32 3
  %svu_pv572 = bitcast %union.anon* %sv_u571 to i8**
  %317 = load i8*, i8** %svu_pv572, align 8
  %add.ptr573 = getelementptr inbounds i8, i8* %317, i64 0
  %call574 = call i32 @stat64(i8* %add.ptr573, %struct.stat* @PL_statbuf) #7
  %cmp575 = icmp slt i32 %call574, 0
  br i1 %cmp575, label %if.then577, label %if.end579

if.then577:                                       ; preds = %land.lhs.true570
  %318 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr578 = getelementptr inbounds %struct.sv*, %struct.sv** %318, i32 -1
  store %struct.sv** %incdec.ptr578, %struct.sv*** %sp, align 8
  %319 = load %struct.sv*, %struct.sv** %318, align 8
  br label %for.cond

if.end579:                                        ; preds = %land.lhs.true570, %for.end
  br label %if.end611

if.else580:                                       ; preds = %do.end521
  %320 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags581 = getelementptr inbounds %struct.sv, %struct.sv* %320, i32 0, i32 2
  %321 = load i32, i32* %sv_flags581, align 4
  %and582 = and i32 %321, 536870912
  %tobool583 = icmp ne i32 %and582, 0
  br i1 %tobool583, label %if.then584, label %if.end610

if.then584:                                       ; preds = %if.else580
  %call585 = call zeroext i1 @Perl_ckwarn(i32 44)
  br i1 %call585, label %if.then586, label %if.end609

if.then586:                                       ; preds = %if.then584
  %322 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u587 = getelementptr inbounds %struct.sv, %struct.sv* %322, i32 0, i32 3
  %svu_pv588 = bitcast %union.anon* %sv_u587 to i8**
  %323 = load i8*, i8** %svu_pv588, align 8
  %add.ptr589 = getelementptr inbounds i8, i8* %323, i64 0
  %324 = load i64, i64* %offset, align 8
  %add.ptr590 = getelementptr inbounds i8, i8* %add.ptr589, i64 %324
  store i8* %add.ptr590, i8** %s, align 8
  %325 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any591 = getelementptr inbounds %struct.sv, %struct.sv* %325, i32 0, i32 0
  %326 = load i8*, i8** %sv_any591, align 8
  %327 = bitcast i8* %326 to %struct.xpv*
  %xpv_cur592 = getelementptr inbounds %struct.xpv, %struct.xpv* %327, i32 0, i32 2
  %328 = load i64, i64* %xpv_cur592, align 8
  %329 = load i64, i64* %offset, align 8
  %sub593 = sub i64 %328, %329
  store i64 %sub593, i64* %len, align 8
  %330 = load i8*, i8** %s, align 8
  %331 = load i64, i64* %len, align 8
  %call594 = call zeroext i1 @Perl_is_utf8_string_loclen(i8* %330, i64 %331, i8** %f, i64* null)
  br i1 %call594, label %if.end608, label %if.then595

if.then595:                                       ; preds = %if.then586
  %332 = load i8*, i8** %f, align 8
  %333 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u596 = getelementptr inbounds %struct.sv, %struct.sv* %333, i32 0, i32 3
  %svu_pv597 = bitcast %union.anon* %sv_u596 to i8**
  %334 = load i8*, i8** %svu_pv597, align 8
  %335 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any598 = getelementptr inbounds %struct.sv, %struct.sv* %335, i32 0, i32 0
  %336 = load i8*, i8** %sv_any598, align 8
  %337 = bitcast i8* %336 to %struct.xpv*
  %xpv_cur599 = getelementptr inbounds %struct.xpv, %struct.xpv* %337, i32 0, i32 2
  %338 = load i64, i64* %xpv_cur599, align 8
  %add.ptr600 = getelementptr inbounds i8, i8* %334, i64 %338
  %cmp601 = icmp ult i8* %332, %add.ptr600
  br i1 %cmp601, label %cond.true603, label %cond.false605

cond.true603:                                     ; preds = %if.then595
  %339 = load i8*, i8** %f, align 8
  %340 = load i8, i8* %339, align 1
  %conv604 = zext i8 %340 to i32
  br label %cond.end606

cond.false605:                                    ; preds = %if.then595
  br label %cond.end606

cond.end606:                                      ; preds = %cond.false605, %cond.true603
  %cond607 = phi i32 [ %conv604, %cond.true603 ], [ 0, %cond.false605 ]
  call void (i32, i8*, ...) @Perl_warner(i32 44, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.21, i64 0, i64 0), i32 %cond607)
  br label %if.end608

if.end608:                                        ; preds = %cond.end606, %if.then586
  br label %if.end609

if.end609:                                        ; preds = %if.end608, %if.then584
  br label %if.end610

if.end610:                                        ; preds = %if.end609, %if.else580
  br label %if.end611

if.end611:                                        ; preds = %if.end610, %if.end579
  %341 = load i32, i32* %gimme, align 4
  %cmp612 = icmp eq i32 %341, 3
  br i1 %cmp612, label %if.then614, label %if.else645

if.then614:                                       ; preds = %if.end611
  %342 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any615 = getelementptr inbounds %struct.sv, %struct.sv* %342, i32 0, i32 0
  %343 = load i8*, i8** %sv_any615, align 8
  %344 = bitcast i8* %343 to %struct.xpv*
  %xpv_len_u616 = getelementptr inbounds %struct.xpv, %struct.xpv* %344, i32 0, i32 3
  %xpvlenu_len617 = bitcast %union.anon.26* %xpv_len_u616 to i64*
  %345 = load i64, i64* %xpvlenu_len617, align 8
  %346 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any618 = getelementptr inbounds %struct.sv, %struct.sv* %346, i32 0, i32 0
  %347 = load i8*, i8** %sv_any618, align 8
  %348 = bitcast i8* %347 to %struct.xpv*
  %xpv_cur619 = getelementptr inbounds %struct.xpv, %struct.xpv* %348, i32 0, i32 2
  %349 = load i64, i64* %xpv_cur619, align 8
  %sub620 = sub i64 %345, %349
  %cmp621 = icmp ugt i64 %sub620, 20
  br i1 %cmp621, label %if.then623, label %if.end642

if.then623:                                       ; preds = %if.then614
  br label %do.body624

do.body624:                                       ; preds = %if.then623
  %350 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any625 = getelementptr inbounds %struct.sv, %struct.sv* %350, i32 0, i32 0
  %351 = load i8*, i8** %sv_any625, align 8
  %352 = bitcast i8* %351 to %struct.xpv*
  %xpv_cur626 = getelementptr inbounds %struct.xpv, %struct.xpv* %352, i32 0, i32 2
  %353 = load i64, i64* %xpv_cur626, align 8
  %add = add i64 %353, 1
  store i64 %add, i64* %_lEnGtH, align 8
  br label %do.body627

do.body627:                                       ; preds = %do.body624
  br label %do.body628

do.body628:                                       ; preds = %do.body627
  %354 = load i64, i64* %_lEnGtH, align 8
  %355 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any629 = getelementptr inbounds %struct.sv, %struct.sv* %355, i32 0, i32 0
  %356 = load i8*, i8** %sv_any629, align 8
  %357 = bitcast i8* %356 to %struct.xpv*
  %xpv_len_u630 = getelementptr inbounds %struct.xpv, %struct.xpv* %357, i32 0, i32 3
  %xpvlenu_len631 = bitcast %union.anon.26* %xpv_len_u630 to i64*
  store i64 %354, i64* %xpvlenu_len631, align 8
  br label %do.end632

do.end632:                                        ; preds = %do.body628
  br label %do.body633

do.body633:                                       ; preds = %do.end632
  %358 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u634 = getelementptr inbounds %struct.sv, %struct.sv* %358, i32 0, i32 3
  %svu_pv635 = bitcast %union.anon* %sv_u634 to i8**
  %359 = load i8*, i8** %svu_pv635, align 8
  %360 = load i64, i64* %_lEnGtH, align 8
  %call636 = call i8* @Perl_safesysrealloc(i8* %359, i64 %360)
  %361 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u637 = getelementptr inbounds %struct.sv, %struct.sv* %361, i32 0, i32 3
  %svu_pv638 = bitcast %union.anon* %sv_u637 to i8**
  store i8* %call636, i8** %svu_pv638, align 8
  br label %do.end639

do.end639:                                        ; preds = %do.body633
  br label %do.end640

do.end640:                                        ; preds = %do.end639
  br label %do.end641

do.end641:                                        ; preds = %do.end640
  br label %if.end642

if.end642:                                        ; preds = %do.end641, %if.then614
  %call643 = call %struct.sv* @Perl_newSV(i64 80)
  %call644 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call643)
  store %struct.sv* %call644, %struct.sv** %sv, align 8
  br label %for.cond

if.else645:                                       ; preds = %if.end611
  %362 = load i32, i32* %gimme, align 4
  %cmp646 = icmp eq i32 %362, 2
  br i1 %cmp646, label %land.lhs.true648, label %if.end685

land.lhs.true648:                                 ; preds = %if.else645
  %363 = load i64, i64* %tmplen, align 8
  %tobool649 = icmp ne i64 %363, 0
  br i1 %tobool649, label %if.end685, label %land.lhs.true650

land.lhs.true650:                                 ; preds = %land.lhs.true648
  %364 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any651 = getelementptr inbounds %struct.sv, %struct.sv* %364, i32 0, i32 0
  %365 = load i8*, i8** %sv_any651, align 8
  %366 = bitcast i8* %365 to %struct.xpv*
  %xpv_len_u652 = getelementptr inbounds %struct.xpv, %struct.xpv* %366, i32 0, i32 3
  %xpvlenu_len653 = bitcast %union.anon.26* %xpv_len_u652 to i64*
  %367 = load i64, i64* %xpvlenu_len653, align 8
  %368 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any654 = getelementptr inbounds %struct.sv, %struct.sv* %368, i32 0, i32 0
  %369 = load i8*, i8** %sv_any654, align 8
  %370 = bitcast i8* %369 to %struct.xpv*
  %xpv_cur655 = getelementptr inbounds %struct.xpv, %struct.xpv* %370, i32 0, i32 2
  %371 = load i64, i64* %xpv_cur655, align 8
  %sub656 = sub i64 %367, %371
  %cmp657 = icmp ugt i64 %sub656, 80
  br i1 %cmp657, label %if.then659, label %if.end685

if.then659:                                       ; preds = %land.lhs.true650
  %372 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any660 = getelementptr inbounds %struct.sv, %struct.sv* %372, i32 0, i32 0
  %373 = load i8*, i8** %sv_any660, align 8
  %374 = bitcast i8* %373 to %struct.xpv*
  %xpv_cur661 = getelementptr inbounds %struct.xpv, %struct.xpv* %374, i32 0, i32 2
  %375 = load i64, i64* %xpv_cur661, align 8
  %cmp662 = icmp ult i64 %375, 60
  br i1 %cmp662, label %cond.true664, label %cond.false665

cond.true664:                                     ; preds = %if.then659
  br label %cond.end669

cond.false665:                                    ; preds = %if.then659
  %376 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any666 = getelementptr inbounds %struct.sv, %struct.sv* %376, i32 0, i32 0
  %377 = load i8*, i8** %sv_any666, align 8
  %378 = bitcast i8* %377 to %struct.xpv*
  %xpv_cur667 = getelementptr inbounds %struct.xpv, %struct.xpv* %378, i32 0, i32 2
  %379 = load i64, i64* %xpv_cur667, align 8
  %add668 = add i64 %379, 40
  br label %cond.end669

cond.end669:                                      ; preds = %cond.false665, %cond.true664
  %cond670 = phi i64 [ 80, %cond.true664 ], [ %add668, %cond.false665 ]
  store i64 %cond670, i64* %new_len, align 8
  br label %do.body671

do.body671:                                       ; preds = %cond.end669
  br label %do.body672

do.body672:                                       ; preds = %do.body671
  %380 = load i64, i64* %new_len, align 8
  %381 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any673 = getelementptr inbounds %struct.sv, %struct.sv* %381, i32 0, i32 0
  %382 = load i8*, i8** %sv_any673, align 8
  %383 = bitcast i8* %382 to %struct.xpv*
  %xpv_len_u674 = getelementptr inbounds %struct.xpv, %struct.xpv* %383, i32 0, i32 3
  %xpvlenu_len675 = bitcast %union.anon.26* %xpv_len_u674 to i64*
  store i64 %380, i64* %xpvlenu_len675, align 8
  br label %do.end676

do.end676:                                        ; preds = %do.body672
  br label %do.body677

do.body677:                                       ; preds = %do.end676
  %384 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u678 = getelementptr inbounds %struct.sv, %struct.sv* %384, i32 0, i32 3
  %svu_pv679 = bitcast %union.anon* %sv_u678 to i8**
  %385 = load i8*, i8** %svu_pv679, align 8
  %386 = load i64, i64* %new_len, align 8
  %call680 = call i8* @Perl_safesysrealloc(i8* %385, i64 %386)
  %387 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u681 = getelementptr inbounds %struct.sv, %struct.sv* %387, i32 0, i32 3
  %svu_pv682 = bitcast %union.anon* %sv_u681 to i8**
  store i8* %call680, i8** %svu_pv682, align 8
  br label %do.end683

do.end683:                                        ; preds = %do.body677
  br label %do.end684

do.end684:                                        ; preds = %do.end683
  br label %if.end685

if.end685:                                        ; preds = %do.end684, %land.lhs.true650, %land.lhs.true648, %if.else645
  br label %if.end686

if.end686:                                        ; preds = %if.end685
  %388 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %388, %struct.sv*** @PL_stack_sp, align 8
  %389 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next687 = getelementptr inbounds %struct.op, %struct.op* %389, i32 0, i32 0
  %390 = load %struct.op*, %struct.op** %op_next687, align 8
  store %struct.op* %390, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end686, %if.end475, %if.end245, %if.end66
  %391 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %391
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_eq() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %left = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 21, i32 48)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %right, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %left, align 8
  %13 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %14, -2147483392
  %cmp = icmp eq i32 %and3, 256
  br i1 %cmp, label %land.lhs.true4, label %cond.false13

land.lhs.true4:                                   ; preds = %do.end
  %15 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %16, -2147483392
  %cmp7 = icmp eq i32 %and6, 256
  br i1 %cmp7, label %cond.true8, label %cond.false13

cond.true8:                                       ; preds = %land.lhs.true4
  %17 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %19, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %20 = load i64, i64* %xivu_iv, align 8
  %21 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any9, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_u10 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 4
  %xivu_iv11 = bitcast %union._xivu* %xiv_u10 to i64*
  %24 = load i64, i64* %xivu_iv11, align 8
  %cmp12 = icmp eq i64 %20, %24
  %conv = zext i1 %cmp12 to i32
  br label %cond.end

cond.false13:                                     ; preds = %land.lhs.true4, %do.end
  %25 = load %struct.sv*, %struct.sv** %left, align 8
  %26 = load %struct.sv*, %struct.sv** %right, align 8
  %call14 = call i32 @Perl_do_ncmp(%struct.sv* %25, %struct.sv* %26)
  %cmp15 = icmp eq i32 %call14, 0
  %conv16 = zext i1 %cmp15 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false13, %cond.true8
  %cond = phi i32 [ %conv, %cond.true8 ], [ %conv16, %cond.false13 ]
  %tobool17 = icmp ne i32 %cond, 0
  %27 = zext i1 %tobool17 to i64
  %cond18 = select i1 %tobool17, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond18, %struct.sv** %28, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next19 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next19, align 8
  store %struct.op* %31, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %32 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %32
}

declare dso_local i32 @Perl_do_ncmp(%struct.sv*, %struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_preinc() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %inc = alloca i8, align 1
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 47
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 48
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp5, %lor.rhs ]
  %frombool = zext i1 %3 to i8
  store i8 %frombool, i8* %inc, align 1
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %and = and i32 %6, 255
  %cmp6 = icmp uge i32 %and, 11
  br i1 %cmp6, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.end
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %9, 49152
  %cmp9 = icmp eq i32 %and8, 32768
  br i1 %cmp9, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %12, 255
  %cmp12 = icmp eq i32 %and11, 9
  br i1 %cmp12, label %land.lhs.true17, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %land.lhs.true
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %15, 255
  %cmp16 = icmp eq i32 %and15, 10
  br i1 %cmp16, label %land.lhs.true17, label %cond.false

land.lhs.true17:                                  ; preds = %lor.lhs.false13, %land.lhs.true
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %18, 16777216
  %tobool = icmp ne i32 %and19, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true17, %lor.end
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %land.lhs.true17, %lor.lhs.false13, %lor.lhs.false
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  call void @Perl_croak_no_modify()
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %21, 134283264
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.false40, label %land.lhs.true23

land.lhs.true23:                                  ; preds = %if.end
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %24, 2097152
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %cond.false40, label %land.lhs.true27

land.lhs.true27:                                  ; preds = %land.lhs.true23
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %27, -2147483392
  %cmp30 = icmp eq i32 %and29, 256
  br i1 %cmp30, label %land.lhs.true31, label %cond.false40

land.lhs.true31:                                  ; preds = %land.lhs.true27
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %30, 512
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %cond.false40, label %land.lhs.true35

land.lhs.true35:                                  ; preds = %land.lhs.true31
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %32 = load %struct.sv*, %struct.sv** %31, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %33, 1024
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.false40, label %cond.true39

cond.true39:                                      ; preds = %land.lhs.true35
  br i1 true, label %land.lhs.true41, label %if.else

cond.false40:                                     ; preds = %land.lhs.true35, %land.lhs.true31, %land.lhs.true27, %land.lhs.true23, %if.end
  br i1 false, label %land.lhs.true41, label %if.else

land.lhs.true41:                                  ; preds = %cond.false40, %cond.true39
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  %35 = load %struct.sv*, %struct.sv** %34, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any, align 8
  %37 = bitcast i8* %36 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %37, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %38 = load i64, i64* %xivu_iv, align 8
  %39 = load i8, i8* %inc, align 1
  %tobool42 = trunc i8 %39 to i1
  %40 = zext i1 %tobool42 to i64
  %cond = select i1 %tobool42, i64 9223372036854775807, i64 -9223372036854775808
  %cmp43 = icmp ne i64 %38, %cond
  br i1 %cmp43, label %if.then44, label %if.else

if.then44:                                        ; preds = %land.lhs.true41
  br label %do.body

do.body:                                          ; preds = %if.then44
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  %sv_any45 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any45, align 8
  %44 = bitcast i8* %43 to %struct.xpviv*
  %xiv_u46 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %44, i32 0, i32 4
  %xivu_iv47 = bitcast %union._xivu* %xiv_u46 to i64*
  %45 = load i64, i64* %xivu_iv47, align 8
  %46 = load i8, i8* %inc, align 1
  %tobool48 = trunc i8 %46 to i1
  %47 = zext i1 %tobool48 to i64
  %cond49 = select i1 %tobool48, i32 1, i32 -1
  %conv = sext i32 %cond49 to i64
  %add = add nsw i64 %45, %conv
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %49 = load %struct.sv*, %struct.sv** %48, align 8
  %sv_any50 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any50, align 8
  %51 = bitcast i8* %50 to %struct.xpviv*
  %xiv_u51 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %51, i32 0, i32 4
  %xivu_iv52 = bitcast %union._xivu* %xiv_u51 to i64*
  store i64 %add, i64* %xivu_iv52, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  %53 = load %struct.sv*, %struct.sv** %52, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %54, -24577
  store i32 %and54, i32* %sv_flags53, align 4
  br label %if.end59

if.else:                                          ; preds = %land.lhs.true41, %cond.false40, %cond.true39
  %55 = load i8, i8* %inc, align 1
  %tobool55 = trunc i8 %55 to i1
  br i1 %tobool55, label %if.then56, label %if.else57

if.then56:                                        ; preds = %if.else
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  %57 = load %struct.sv*, %struct.sv** %56, align 8
  call void @Perl_sv_inc(%struct.sv* %57)
  br label %if.end58

if.else57:                                        ; preds = %if.else
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  %59 = load %struct.sv*, %struct.sv** %58, align 8
  call void @Perl_sv_dec(%struct.sv* %59)
  br label %if.end58

if.end58:                                         ; preds = %if.else57, %if.then56
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %do.end
  br label %do.body60

do.body60:                                        ; preds = %if.end59
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %61 = load %struct.sv*, %struct.sv** %60, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %62, 4194304
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %cond.true64, label %cond.false65

cond.true64:                                      ; preds = %do.body60
  br i1 true, label %if.then66, label %if.end67

cond.false65:                                     ; preds = %do.body60
  br i1 false, label %if.then66, label %if.end67

if.then66:                                        ; preds = %cond.false65, %cond.true64
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  %64 = load %struct.sv*, %struct.sv** %63, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %64)
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %cond.false65, %cond.true64
  br label %do.end68

do.end68:                                         ; preds = %if.end67
  %65 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 0
  %66 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %66
}

declare dso_local void @Perl_croak_no_modify() #1

declare dso_local void @Perl_sv_inc(%struct.sv*) #1

declare dso_local void @Perl_sv_dec(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_or() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load i32, i32* @PL_sig_pending, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %2 = load void ()*, void ()** @PL_signalhook, align 8
  call void %2()
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %tobool1 = icmp ne %struct.sv* %4, null
  br i1 %tobool1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %if.end
  br i1 true, label %land.lhs.true, label %if.else

cond.false3:                                      ; preds = %if.end
  br i1 false, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false3, %cond.true2
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 2097152
  %tobool4 = icmp ne i32 %and, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %land.lhs.true
  br i1 true, label %cond.true7, label %cond.false8

cond.false6:                                      ; preds = %land.lhs.true
  br i1 false, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %cond.false6, %cond.true5
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  %call = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %9, i32 2)
  br i1 %call, label %if.then63, label %if.else

cond.false8:                                      ; preds = %cond.false6, %cond.true5
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %12, 65280
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cond.false19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %15, 255
  %cmp = icmp eq i32 %and13, 8
  br i1 %cmp, label %cond.false19, label %lor.lhs.false14

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %18, 16826623
  %cmp17 = icmp eq i32 %and16, 16777226
  br i1 %cmp17, label %cond.false19, label %cond.true18

cond.true18:                                      ; preds = %lor.lhs.false14
  br i1 false, label %if.then63, label %if.else

cond.false19:                                     ; preds = %lor.lhs.false14, %lor.lhs.false, %cond.false8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %21, 1024
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true23, label %cond.false35

cond.true23:                                      ; preds = %cond.false19
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any, align 8
  %25 = bitcast i8* %24 to %struct.xpv*
  %tobool24 = icmp ne %struct.xpv* %25, null
  br i1 %tobool24, label %land.lhs.true25, label %if.else

land.lhs.true25:                                  ; preds = %cond.true23
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %27 = load %struct.sv*, %struct.sv** %26, align 8
  %sv_any26 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any26, align 8
  %29 = bitcast i8* %28 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %29, i32 0, i32 2
  %30 = load i64, i64* %xpv_cur, align 8
  %cmp27 = icmp ugt i64 %30, 1
  br i1 %cmp27, label %if.then63, label %lor.lhs.false28

lor.lhs.false28:                                  ; preds = %land.lhs.true25
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %32 = load %struct.sv*, %struct.sv** %31, align 8
  %sv_any29 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any29, align 8
  %34 = bitcast i8* %33 to %struct.xpv*
  %xpv_cur30 = getelementptr inbounds %struct.xpv, %struct.xpv* %34, i32 0, i32 2
  %35 = load i64, i64* %xpv_cur30, align 8
  %tobool31 = icmp ne i64 %35, 0
  br i1 %tobool31, label %land.lhs.true32, label %if.else

land.lhs.true32:                                  ; preds = %lor.lhs.false28
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %37 = load %struct.sv*, %struct.sv** %36, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %38 = load i8*, i8** %svu_pv, align 8
  %39 = load i8, i8* %38, align 1
  %conv = sext i8 %39 to i32
  %cmp33 = icmp ne i32 %conv, 48
  br i1 %cmp33, label %if.then63, label %if.else

cond.false35:                                     ; preds = %cond.false19
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %41 = load %struct.sv*, %struct.sv** %40, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %42, 768
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.true39, label %cond.false60

cond.true39:                                      ; preds = %cond.false35
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  %44 = load %struct.sv*, %struct.sv** %43, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %45, 256
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %land.lhs.true43, label %lor.lhs.false47

land.lhs.true43:                                  ; preds = %cond.true39
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  %47 = load %struct.sv*, %struct.sv** %46, align 8
  %sv_any44 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any44, align 8
  %49 = bitcast i8* %48 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %49, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %50 = load i64, i64* %xivu_iv, align 8
  %cmp45 = icmp ne i64 %50, 0
  br i1 %cmp45, label %if.then63, label %lor.lhs.false47

lor.lhs.false47:                                  ; preds = %land.lhs.true43, %cond.true39
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  %52 = load %struct.sv*, %struct.sv** %51, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %53, 512
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %land.lhs.true51, label %if.else

land.lhs.true51:                                  ; preds = %lor.lhs.false47
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  %55 = load %struct.sv*, %struct.sv** %54, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any52, align 8
  %57 = bitcast i8* %56 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %57, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %58 = load double, double* %xnv_nv, align 8
  %cmp53 = fcmp uno double %58, %58
  br i1 %cmp53, label %if.then63, label %lor.lhs.false54

lor.lhs.false54:                                  ; preds = %land.lhs.true51
  %59 = load %struct.sv**, %struct.sv*** %sp, align 8
  %60 = load %struct.sv*, %struct.sv** %59, align 8
  %sv_any55 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any55, align 8
  %62 = bitcast i8* %61 to %struct.xpvnv*
  %xnv_u56 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %62, i32 0, i32 5
  %xnv_nv57 = bitcast %union._xnvu* %xnv_u56 to double*
  %63 = load double, double* %xnv_nv57, align 8
  %cmp58 = fcmp une double %63, 0.000000e+00
  br i1 %cmp58, label %if.then63, label %if.else

cond.false60:                                     ; preds = %cond.false35
  %64 = load %struct.sv**, %struct.sv*** %sp, align 8
  %65 = load %struct.sv*, %struct.sv** %64, align 8
  %call61 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %65, i32 0)
  br i1 %call61, label %if.then63, label %if.else

if.then63:                                        ; preds = %cond.false60, %lor.lhs.false54, %land.lhs.true51, %land.lhs.true43, %land.lhs.true32, %land.lhs.true25, %cond.true18, %cond.true7
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %66, %struct.sv*** @PL_stack_sp, align 8
  %67 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %67, i32 0, i32 0
  %68 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %68, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %cond.false60, %lor.lhs.false54, %lor.lhs.false47, %land.lhs.true32, %lor.lhs.false28, %cond.true23, %cond.true18, %cond.true7, %cond.false3, %cond.true2
  %69 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp64 = icmp eq i32 %bf.cast, 177
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.else
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %70, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %if.else
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %71, %struct.sv*** @PL_stack_sp, align 8
  %72 = load %struct.op*, %struct.op** @PL_op, align 8
  %73 = bitcast %struct.op* %72 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %73, i32 0, i32 8
  %74 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %74, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end67, %if.then63
  %75 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %75
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_defined() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %defined = alloca i8, align 1
  %op_type = alloca i32, align 4
  %is_dor = alloca i8, align 1
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type1, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %op_type, align 4
  %2 = load i32, i32* %op_type, align 4
  %cmp = icmp eq i32 %2, 179
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %3 = load i32, i32* %op_type, align 4
  %cmp2 = icmp eq i32 %3, 183
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %frombool = zext i1 %4 to i8
  store i8 %frombool, i8* %is_dor, align 1
  %5 = load i8, i8* %is_dor, align 1
  %tobool = trunc i8 %5 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %lor.end
  %6 = load i32, i32* @PL_sig_pending, align 4
  %tobool3 = icmp ne i32 %6, 0
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br i1 true, label %if.then4, label %if.end

cond.false:                                       ; preds = %if.then
  br i1 false, label %if.then4, label %if.end

if.then4:                                         ; preds = %cond.false, %cond.true
  %7 = load void ()*, void ()** @PL_signalhook, align 8
  call void %7()
  br label %if.end

if.end:                                           ; preds = %if.then4, %cond.false, %cond.true
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  store %struct.sv* %9, %struct.sv** %sv, align 8
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool5 = icmp ne %struct.sv* %10, null
  br i1 %tobool5, label %lor.lhs.false, label %cond.true7

lor.lhs.false:                                    ; preds = %if.end
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %tobool6 = icmp ne i8* %12, null
  br i1 %tobool6, label %cond.false8, label %cond.true7

cond.true7:                                       ; preds = %lor.lhs.false, %if.end
  br i1 true, label %if.then9, label %if.end13

cond.false8:                                      ; preds = %lor.lhs.false
  br i1 false, label %if.then9, label %if.end13

if.then9:                                         ; preds = %cond.false8, %cond.true7
  %13 = load i32, i32* %op_type, align 4
  %cmp10 = icmp eq i32 %13, 179
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then9
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %14, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then9
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %15, %struct.sv*** @PL_stack_sp, align 8
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %17 = bitcast %struct.op* %16 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %17, i32 0, i32 8
  %18 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %18, %struct.op** %retval, align 8
  br label %return

if.end13:                                         ; preds = %cond.false8, %cond.true7
  br label %if.end24

if.else:                                          ; preds = %lor.end
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr14 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 -1
  store %struct.sv** %incdec.ptr14, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  store %struct.sv* %20, %struct.sv** %sv, align 8
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool15 = icmp ne %struct.sv* %21, null
  br i1 %tobool15, label %lor.lhs.false16, label %cond.true19

lor.lhs.false16:                                  ; preds = %if.else
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any17 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any17, align 8
  %tobool18 = icmp ne i8* %23, null
  br i1 %tobool18, label %cond.false20, label %cond.true19

cond.true19:                                      ; preds = %lor.lhs.false16, %if.else
  br i1 true, label %if.then21, label %if.end23

cond.false20:                                     ; preds = %lor.lhs.false16
  br i1 false, label %if.then21, label %if.end23

if.then21:                                        ; preds = %cond.false20, %cond.true19
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr22 = getelementptr inbounds %struct.sv*, %struct.sv** %24, i32 1
  store %struct.sv** %incdec.ptr22, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr22, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %25, %struct.sv*** @PL_stack_sp, align 8
  %26 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 0
  %27 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %27, %struct.op** %retval, align 8
  br label %return

if.end23:                                         ; preds = %cond.false20, %cond.true19
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.end13
  store i8 0, i8* %defined, align 1
  %28 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags, align 4
  %and = and i32 %29, 255
  switch i32 %and, label %sw.default [
    i32 11, label %sw.bb
    i32 12, label %sw.bb38
    i32 13, label %sw.bb53
  ]

sw.bb:                                            ; preds = %if.end24
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any25 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any25, align 8
  %32 = bitcast i8* %31 to %struct.xpvav*
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %32, i32 0, i32 3
  %33 = load i64, i64* %xav_max, align 8
  %cmp26 = icmp sge i64 %33, 0
  br i1 %cmp26, label %if.then36, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %sw.bb
  %34 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %35, 2097152
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.then36, label %lor.lhs.false31

lor.lhs.false31:                                  ; preds = %lor.lhs.false27
  %36 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %37, 8388608
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %land.lhs.true, label %if.end37

land.lhs.true:                                    ; preds = %lor.lhs.false31
  %38 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %38, i32 80)
  %tobool35 = icmp ne %struct.magic* %call, null
  br i1 %tobool35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %land.lhs.true, %lor.lhs.false27, %sw.bb
  store i8 1, i8* %defined, align 1
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %land.lhs.true, %lor.lhs.false31
  br label %sw.epilog

sw.bb38:                                          ; preds = %if.end24
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 3
  %svu_hash = bitcast %union.anon* %sv_u to %struct.he***
  %40 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %tobool39 = icmp ne %struct.he** %40, null
  br i1 %tobool39, label %if.then51, label %lor.lhs.false40

lor.lhs.false40:                                  ; preds = %sw.bb38
  %41 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %42, 2097152
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.then51, label %lor.lhs.false44

lor.lhs.false44:                                  ; preds = %lor.lhs.false40
  %43 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %44, 8388608
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %land.lhs.true48, label %if.end52

land.lhs.true48:                                  ; preds = %lor.lhs.false44
  %45 = load %struct.sv*, %struct.sv** %sv, align 8
  %call49 = call %struct.magic* @Perl_mg_find(%struct.sv* %45, i32 80)
  %tobool50 = icmp ne %struct.magic* %call49, null
  br i1 %tobool50, label %if.then51, label %if.end52

if.then51:                                        ; preds = %land.lhs.true48, %lor.lhs.false40, %sw.bb38
  store i8 1, i8* %defined, align 1
  br label %if.end52

if.end52:                                         ; preds = %if.then51, %land.lhs.true48, %lor.lhs.false44
  br label %sw.epilog

sw.bb53:                                          ; preds = %if.end24
  %46 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any54 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any54, align 8
  %48 = bitcast i8* %47 to %struct.xpvcv*
  %xcv_root_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %48, i32 0, i32 6
  %xcv_root = bitcast %union.anon.11* %xcv_root_u to %struct.op**
  %49 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool55 = icmp ne %struct.op* %49, null
  br i1 %tobool55, label %if.then60, label %lor.lhs.false56

lor.lhs.false56:                                  ; preds = %sw.bb53
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any57 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any57, align 8
  %52 = bitcast i8* %51 to %struct.xpvcv*
  %xcv_root_u58 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %52, i32 0, i32 6
  %xcv_xsub = bitcast %union.anon.11* %xcv_root_u58 to void (%struct.cv*)**
  %53 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub, align 8
  %tobool59 = icmp ne void (%struct.cv*)* %53, null
  br i1 %tobool59, label %if.then60, label %if.end61

if.then60:                                        ; preds = %lor.lhs.false56, %sw.bb53
  store i8 1, i8* %defined, align 1
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %lor.lhs.false56
  br label %sw.epilog

sw.default:                                       ; preds = %if.end24
  %54 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %55, 2097152
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %sw.default
  br i1 true, label %land.rhs, label %land.end

cond.false66:                                     ; preds = %sw.default
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false66, %cond.true65
  %56 = load %struct.sv*, %struct.sv** %sv, align 8
  %call67 = call i32 @Perl_mg_get(%struct.sv* %56)
  %tobool68 = icmp ne i32 %call67, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false66, %cond.true65
  %57 = phi i1 [ false, %cond.false66 ], [ false, %cond.true65 ], [ %tobool68, %land.rhs ]
  %land.ext = zext i1 %57 to i32
  %58 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %59, 65280
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %if.then80, label %lor.lhs.false72

lor.lhs.false72:                                  ; preds = %land.end
  %60 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags73 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags73, align 4
  %and74 = and i32 %61, 255
  %cmp75 = icmp eq i32 %and74, 8
  br i1 %cmp75, label %if.then80, label %lor.lhs.false76

lor.lhs.false76:                                  ; preds = %lor.lhs.false72
  %62 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags77 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags77, align 4
  %and78 = and i32 %63, 16826623
  %cmp79 = icmp eq i32 %and78, 16777226
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %lor.lhs.false76, %lor.lhs.false72, %land.end
  store i8 1, i8* %defined, align 1
  br label %if.end81

if.end81:                                         ; preds = %if.then80, %lor.lhs.false76
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end81, %if.end61, %if.end52, %if.end37
  %64 = load i8, i8* %is_dor, align 1
  %tobool82 = trunc i8 %64 to i1
  br i1 %tobool82, label %if.then83, label %if.end93

if.then83:                                        ; preds = %sw.epilog
  %65 = load i8, i8* %defined, align 1
  %tobool84 = trunc i8 %65 to i1
  br i1 %tobool84, label %if.then85, label %if.end87

if.then85:                                        ; preds = %if.then83
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %66, %struct.sv*** @PL_stack_sp, align 8
  %67 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next86 = getelementptr inbounds %struct.op, %struct.op* %67, i32 0, i32 0
  %68 = load %struct.op*, %struct.op** %op_next86, align 8
  store %struct.op* %68, %struct.op** %retval, align 8
  br label %return

if.end87:                                         ; preds = %if.then83
  %69 = load i32, i32* %op_type, align 4
  %cmp88 = icmp eq i32 %69, 179
  br i1 %cmp88, label %if.then89, label %if.end91

if.then89:                                        ; preds = %if.end87
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr90 = getelementptr inbounds %struct.sv*, %struct.sv** %70, i32 -1
  store %struct.sv** %incdec.ptr90, %struct.sv*** %sp, align 8
  br label %if.end91

if.end91:                                         ; preds = %if.then89, %if.end87
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %71, %struct.sv*** @PL_stack_sp, align 8
  %72 = load %struct.op*, %struct.op** @PL_op, align 8
  %73 = bitcast %struct.op* %72 to %struct.logop*
  %op_other92 = getelementptr inbounds %struct.logop, %struct.logop* %73, i32 0, i32 8
  %74 = load %struct.op*, %struct.op** %op_other92, align 8
  store %struct.op* %74, %struct.op** %retval, align 8
  br label %return

if.end93:                                         ; preds = %sw.epilog
  %75 = load i8, i8* %defined, align 1
  %tobool94 = trunc i8 %75 to i1
  br i1 %tobool94, label %if.then95, label %if.end98

if.then95:                                        ; preds = %if.end93
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr96 = getelementptr inbounds %struct.sv*, %struct.sv** %76, i32 1
  store %struct.sv** %incdec.ptr96, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr96, align 8
  %77 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %77, %struct.sv*** @PL_stack_sp, align 8
  %78 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next97 = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 0
  %79 = load %struct.op*, %struct.op** %op_next97, align 8
  store %struct.op* %79, %struct.op** %retval, align 8
  br label %return

if.end98:                                         ; preds = %if.end93
  %80 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr99 = getelementptr inbounds %struct.sv*, %struct.sv** %80, i32 1
  store %struct.sv** %incdec.ptr99, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr99, align 8
  %81 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %81, %struct.sv*** @PL_stack_sp, align 8
  %82 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next100 = getelementptr inbounds %struct.op, %struct.op* %82, i32 0, i32 0
  %83 = load %struct.op*, %struct.op** %op_next100, align 8
  store %struct.op* %83, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end98, %if.then95, %if.end91, %if.then85, %if.then21, %if.end12
  %84 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %84
}

declare dso_local %struct.magic* @Perl_mg_find(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_add() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %useleft = alloca i8, align 1
  %svl = alloca %struct.sv*, align 8
  %svr = alloca %struct.sv*, align 8
  %auv = alloca i64, align 8
  %auvok = alloca i8, align 1
  %a_valid = alloca i8, align 1
  %aiv = alloca i64, align 8
  %result_good = alloca i8, align 1
  %result = alloca i64, align 8
  %buv = alloca i64, align 8
  %buvok = alloca i8, align 1
  %biv = alloca i64, align 8
  %value = alloca double, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 30, i32 20)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %svr, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i64 -1
  %20 = load %struct.sv*, %struct.sv** %add.ptr8, align 8
  store %struct.sv* %20, %struct.sv** %svl, align 8
  %21 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %22, 65280
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end
  %23 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %24, 255
  %cmp = icmp eq i32 %and13, 8
  br i1 %cmp, label %lor.end, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %25 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %26, 16826623
  %cmp18 = icmp eq i32 %and17, 16777226
  br i1 %cmp18, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false15
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags20 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 5
  %28 = load i8, i8* %op_flags20, align 2
  %conv21 = zext i8 %28 to i32
  %and22 = and i32 %conv21, 64
  %tobool23 = icmp ne i32 %and22, 0
  %lnot = xor i1 %tobool23, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false15, %lor.lhs.false, %do.end
  %29 = phi i1 [ true, %lor.lhs.false15 ], [ true, %lor.lhs.false ], [ true, %do.end ], [ %lnot, %lor.rhs ]
  %frombool = zext i1 %29 to i8
  store i8 %frombool, i8* %useleft, align 1
  %30 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %31, 4352
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %cond.false36, label %land.lhs.true27

land.lhs.true27:                                  ; preds = %lor.end
  %32 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %33, 1536
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %cond.true31, label %cond.false36

cond.true31:                                      ; preds = %land.lhs.true27
  %34 = load %struct.sv*, %struct.sv** %svr, align 8
  %call32 = call i64 @Perl_sv_2iv_flags(%struct.sv* %34, i32 0)
  %35 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %36, 256
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then40, label %if.end205

cond.false36:                                     ; preds = %land.lhs.true27, %lor.end
  %37 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %38, 256
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.then40, label %if.end205

if.then40:                                        ; preds = %cond.false36, %cond.true31
  store i64 0, i64* %auv, align 8
  store i8 0, i8* %auvok, align 1
  store i8 0, i8* %a_valid, align 1
  %39 = load i8, i8* %useleft, align 1
  %tobool41 = trunc i8 %39 to i1
  br i1 %tobool41, label %if.else, label %if.then42

if.then42:                                        ; preds = %if.then40
  store i64 0, i64* %auv, align 8
  store i8 1, i8* %auvok, align 1
  store i8 1, i8* %a_valid, align 1
  br label %if.end81

if.else:                                          ; preds = %if.then40
  %40 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %41, 4352
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %cond.false55, label %land.lhs.true46

land.lhs.true46:                                  ; preds = %if.else
  %42 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %43, 1536
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %cond.true50, label %cond.false55

cond.true50:                                      ; preds = %land.lhs.true46
  %44 = load %struct.sv*, %struct.sv** %svl, align 8
  %call51 = call i64 @Perl_sv_2iv_flags(%struct.sv* %44, i32 0)
  %45 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %46, 256
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %if.then59, label %if.end80

cond.false55:                                     ; preds = %land.lhs.true46, %if.else
  %47 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %48, 256
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then59, label %if.end80

if.then59:                                        ; preds = %cond.false55, %cond.true50
  %49 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %50, -2147483392
  %cmp62 = icmp eq i32 %and61, -2147483392
  %frombool64 = zext i1 %cmp62 to i8
  store i8 %frombool64, i8* %auvok, align 1
  br i1 %cmp62, label %if.then65, label %if.else66

if.then65:                                        ; preds = %if.then59
  %51 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 0
  %52 = load i8*, i8** %sv_any, align 8
  %53 = bitcast i8* %52 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %53, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %54 = load i64, i64* %xivu_uv, align 8
  store i64 %54, i64* %auv, align 8
  br label %if.end79

if.else66:                                        ; preds = %if.then59
  %55 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any67, align 8
  %57 = bitcast i8* %56 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %57, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %58 = load i64, i64* %xivu_iv, align 8
  store i64 %58, i64* %aiv, align 8
  %59 = load i64, i64* %aiv, align 8
  %cmp68 = icmp sge i64 %59, 0
  br i1 %cmp68, label %if.then70, label %if.else71

if.then70:                                        ; preds = %if.else66
  %60 = load i64, i64* %aiv, align 8
  store i64 %60, i64* %auv, align 8
  store i8 1, i8* %auvok, align 1
  br label %if.end78

if.else71:                                        ; preds = %if.else66
  %61 = load i64, i64* %aiv, align 8
  %cmp72 = icmp eq i64 %61, -9223372036854775808
  br i1 %cmp72, label %cond.true74, label %cond.false75

cond.true74:                                      ; preds = %if.else71
  %62 = load i64, i64* %aiv, align 8
  br label %cond.end76

cond.false75:                                     ; preds = %if.else71
  %63 = load i64, i64* %aiv, align 8
  %sub = sub nsw i64 0, %63
  br label %cond.end76

cond.end76:                                       ; preds = %cond.false75, %cond.true74
  %cond77 = phi i64 [ %62, %cond.true74 ], [ %sub, %cond.false75 ]
  store i64 %cond77, i64* %auv, align 8
  br label %if.end78

if.end78:                                         ; preds = %cond.end76, %if.then70
  br label %if.end79

if.end79:                                         ; preds = %if.end78, %if.then65
  store i8 1, i8* %a_valid, align 1
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %cond.false55, %cond.true50
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.then42
  %64 = load i8, i8* %a_valid, align 1
  %tobool82 = trunc i8 %64 to i1
  br i1 %tobool82, label %if.then83, label %if.end204

if.then83:                                        ; preds = %if.end81
  store i8 0, i8* %result_good, align 1
  %65 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags84 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %66, -2147483392
  %cmp86 = icmp eq i32 %and85, -2147483392
  %frombool88 = zext i1 %cmp86 to i8
  store i8 %frombool88, i8* %buvok, align 1
  %67 = load i8, i8* %buvok, align 1
  %tobool89 = trunc i8 %67 to i1
  br i1 %tobool89, label %if.then90, label %if.else94

if.then90:                                        ; preds = %if.then83
  %68 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 0
  %69 = load i8*, i8** %sv_any91, align 8
  %70 = bitcast i8* %69 to %struct.xpvuv*
  %xuv_u92 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %70, i32 0, i32 4
  %xivu_uv93 = bitcast %union._xivu* %xuv_u92 to i64*
  %71 = load i64, i64* %xivu_uv93, align 8
  store i64 %71, i64* %buv, align 8
  br label %if.end110

if.else94:                                        ; preds = %if.then83
  %72 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 0
  %73 = load i8*, i8** %sv_any95, align 8
  %74 = bitcast i8* %73 to %struct.xpviv*
  %xiv_u96 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %74, i32 0, i32 4
  %xivu_iv97 = bitcast %union._xivu* %xiv_u96 to i64*
  %75 = load i64, i64* %xivu_iv97, align 8
  store i64 %75, i64* %biv, align 8
  %76 = load i64, i64* %biv, align 8
  %cmp98 = icmp sge i64 %76, 0
  br i1 %cmp98, label %if.then100, label %if.else101

if.then100:                                       ; preds = %if.else94
  %77 = load i64, i64* %biv, align 8
  store i64 %77, i64* %buv, align 8
  store i8 1, i8* %buvok, align 1
  br label %if.end109

if.else101:                                       ; preds = %if.else94
  %78 = load i64, i64* %biv, align 8
  %cmp102 = icmp eq i64 %78, -9223372036854775808
  br i1 %cmp102, label %cond.true104, label %cond.false105

cond.true104:                                     ; preds = %if.else101
  %79 = load i64, i64* %biv, align 8
  br label %cond.end107

cond.false105:                                    ; preds = %if.else101
  %80 = load i64, i64* %biv, align 8
  %sub106 = sub nsw i64 0, %80
  br label %cond.end107

cond.end107:                                      ; preds = %cond.false105, %cond.true104
  %cond108 = phi i64 [ %79, %cond.true104 ], [ %sub106, %cond.false105 ]
  store i64 %cond108, i64* %buv, align 8
  br label %if.end109

if.end109:                                        ; preds = %cond.end107, %if.then100
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.then90
  %81 = load i8, i8* %auvok, align 1
  %tobool111 = trunc i8 %81 to i1
  %conv112 = zext i1 %tobool111 to i32
  %82 = load i8, i8* %buvok, align 1
  %tobool113 = trunc i8 %82 to i1
  %conv114 = zext i1 %tobool113 to i32
  %xor = xor i32 %conv112, %conv114
  %tobool115 = icmp ne i32 %xor, 0
  br i1 %tobool115, label %if.then116, label %if.else135

if.then116:                                       ; preds = %if.end110
  %83 = load i64, i64* %auv, align 8
  %84 = load i64, i64* %buv, align 8
  %cmp117 = icmp uge i64 %83, %84
  br i1 %cmp117, label %if.then119, label %if.else125

if.then119:                                       ; preds = %if.then116
  %85 = load i64, i64* %auv, align 8
  %86 = load i64, i64* %buv, align 8
  %sub120 = sub i64 %85, %86
  store i64 %sub120, i64* %result, align 8
  %87 = load i64, i64* %result, align 8
  %88 = load i64, i64* %auv, align 8
  %cmp121 = icmp ule i64 %87, %88
  br i1 %cmp121, label %if.then123, label %if.end124

if.then123:                                       ; preds = %if.then119
  store i8 1, i8* %result_good, align 1
  br label %if.end124

if.end124:                                        ; preds = %if.then123, %if.then119
  br label %if.end134

if.else125:                                       ; preds = %if.then116
  %89 = load i64, i64* %buv, align 8
  %90 = load i64, i64* %auv, align 8
  %sub126 = sub i64 %89, %90
  store i64 %sub126, i64* %result, align 8
  %91 = load i64, i64* %result, align 8
  %92 = load i64, i64* %buv, align 8
  %cmp127 = icmp ule i64 %91, %92
  br i1 %cmp127, label %if.then129, label %if.end133

if.then129:                                       ; preds = %if.else125
  %93 = load i8, i8* %auvok, align 1
  %tobool130 = trunc i8 %93 to i1
  %lnot131 = xor i1 %tobool130, true
  %frombool132 = zext i1 %lnot131 to i8
  store i8 %frombool132, i8* %auvok, align 1
  store i8 1, i8* %result_good, align 1
  br label %if.end133

if.end133:                                        ; preds = %if.then129, %if.else125
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.end124
  br label %if.end140

if.else135:                                       ; preds = %if.end110
  %94 = load i64, i64* %auv, align 8
  %95 = load i64, i64* %buv, align 8
  %add = add i64 %94, %95
  store i64 %add, i64* %result, align 8
  %96 = load i64, i64* %result, align 8
  %97 = load i64, i64* %auv, align 8
  %cmp136 = icmp uge i64 %96, %97
  br i1 %cmp136, label %if.then138, label %if.end139

if.then138:                                       ; preds = %if.else135
  store i8 1, i8* %result_good, align 1
  br label %if.end139

if.end139:                                        ; preds = %if.then138, %if.else135
  br label %if.end140

if.end140:                                        ; preds = %if.end139, %if.end134
  %98 = load i8, i8* %result_good, align 1
  %tobool141 = trunc i8 %98 to i1
  br i1 %tobool141, label %if.then142, label %if.end203

if.then142:                                       ; preds = %if.end140
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %99, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %100 = load i8, i8* %auvok, align 1
  %tobool143 = trunc i8 %100 to i1
  br i1 %tobool143, label %if.then144, label %if.else159

if.then144:                                       ; preds = %if.then142
  br label %do.body145

do.body145:                                       ; preds = %if.then144
  %101 = load %struct.sv*, %struct.sv** %targ, align 8
  %102 = load i64, i64* %result, align 8
  call void @Perl_sv_setuv(%struct.sv* %101, i64 %102)
  br label %do.body146

do.body146:                                       ; preds = %do.body145
  br label %do.body147

do.body147:                                       ; preds = %do.body146
  %103 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags148 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %104, 4194304
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %cond.true151, label %cond.false152

cond.true151:                                     ; preds = %do.body147
  br i1 true, label %if.then153, label %if.end155

cond.false152:                                    ; preds = %do.body147
  br i1 false, label %if.then153, label %if.end155

if.then153:                                       ; preds = %cond.false152, %cond.true151
  %105 = load %struct.sv*, %struct.sv** %targ, align 8
  %call154 = call i32 @Perl_mg_set(%struct.sv* %105)
  br label %if.end155

if.end155:                                        ; preds = %if.then153, %cond.false152, %cond.true151
  br label %do.end156

do.end156:                                        ; preds = %if.end155
  %106 = load %struct.sv*, %struct.sv** %targ, align 8
  %107 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %106, %struct.sv** %107, align 8
  br label %do.end157

do.end157:                                        ; preds = %do.end156
  br label %do.end158

do.end158:                                        ; preds = %do.end157
  br label %if.end201

if.else159:                                       ; preds = %if.then142
  %108 = load i64, i64* %result, align 8
  %cmp160 = icmp ule i64 %108, -9223372036854775808
  br i1 %cmp160, label %if.then162, label %if.else184

if.then162:                                       ; preds = %if.else159
  br label %do.body163

do.body163:                                       ; preds = %if.then162
  %109 = load %struct.sv*, %struct.sv** %targ, align 8
  %110 = load i64, i64* %result, align 8
  %cmp164 = icmp eq i64 %110, -9223372036854775808
  br i1 %cmp164, label %cond.true166, label %cond.false167

cond.true166:                                     ; preds = %do.body163
  br label %cond.end169

cond.false167:                                    ; preds = %do.body163
  %111 = load i64, i64* %result, align 8
  %sub168 = sub nsw i64 0, %111
  br label %cond.end169

cond.end169:                                      ; preds = %cond.false167, %cond.true166
  %cond170 = phi i64 [ -9223372036854775808, %cond.true166 ], [ %sub168, %cond.false167 ]
  call void @Perl_sv_setiv(%struct.sv* %109, i64 %cond170)
  br label %do.body171

do.body171:                                       ; preds = %cond.end169
  br label %do.body172

do.body172:                                       ; preds = %do.body171
  %112 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags173 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags173, align 4
  %and174 = and i32 %113, 4194304
  %tobool175 = icmp ne i32 %and174, 0
  br i1 %tobool175, label %cond.true176, label %cond.false177

cond.true176:                                     ; preds = %do.body172
  br i1 true, label %if.then178, label %if.end180

cond.false177:                                    ; preds = %do.body172
  br i1 false, label %if.then178, label %if.end180

if.then178:                                       ; preds = %cond.false177, %cond.true176
  %114 = load %struct.sv*, %struct.sv** %targ, align 8
  %call179 = call i32 @Perl_mg_set(%struct.sv* %114)
  br label %if.end180

if.end180:                                        ; preds = %if.then178, %cond.false177, %cond.true176
  br label %do.end181

do.end181:                                        ; preds = %if.end180
  %115 = load %struct.sv*, %struct.sv** %targ, align 8
  %116 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %115, %struct.sv** %116, align 8
  br label %do.end182

do.end182:                                        ; preds = %do.end181
  br label %do.end183

do.end183:                                        ; preds = %do.end182
  br label %if.end200

if.else184:                                       ; preds = %if.else159
  br label %do.body185

do.body185:                                       ; preds = %if.else184
  %117 = load %struct.sv*, %struct.sv** %targ, align 8
  %118 = load i64, i64* %result, align 8
  %conv186 = uitofp i64 %118 to double
  %fneg = fneg double %conv186
  call void @Perl_sv_setnv(%struct.sv* %117, double %fneg)
  br label %do.body187

do.body187:                                       ; preds = %do.body185
  br label %do.body188

do.body188:                                       ; preds = %do.body187
  %119 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags189 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags189, align 4
  %and190 = and i32 %120, 4194304
  %tobool191 = icmp ne i32 %and190, 0
  br i1 %tobool191, label %cond.true192, label %cond.false193

cond.true192:                                     ; preds = %do.body188
  br i1 true, label %if.then194, label %if.end196

cond.false193:                                    ; preds = %do.body188
  br i1 false, label %if.then194, label %if.end196

if.then194:                                       ; preds = %cond.false193, %cond.true192
  %121 = load %struct.sv*, %struct.sv** %targ, align 8
  %call195 = call i32 @Perl_mg_set(%struct.sv* %121)
  br label %if.end196

if.end196:                                        ; preds = %if.then194, %cond.false193, %cond.true192
  br label %do.end197

do.end197:                                        ; preds = %if.end196
  %122 = load %struct.sv*, %struct.sv** %targ, align 8
  %123 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %122, %struct.sv** %123, align 8
  br label %do.end198

do.end198:                                        ; preds = %do.end197
  br label %do.end199

do.end199:                                        ; preds = %do.end198
  br label %if.end200

if.end200:                                        ; preds = %do.end199, %do.end183
  br label %if.end201

if.end201:                                        ; preds = %if.end200, %do.end158
  %124 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %124, %struct.sv*** @PL_stack_sp, align 8
  %125 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next202 = getelementptr inbounds %struct.op, %struct.op* %125, i32 0, i32 0
  %126 = load %struct.op*, %struct.op** %op_next202, align 8
  store %struct.op* %126, %struct.op** %retval, align 8
  br label %return

if.end203:                                        ; preds = %if.end140
  br label %if.end204

if.end204:                                        ; preds = %if.end203, %if.end81
  br label %if.end205

if.end205:                                        ; preds = %if.end204, %cond.false36, %cond.true31
  %127 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags206 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 2
  %128 = load i32, i32* %sv_flags206, align 4
  %and207 = and i32 %128, 512
  %tobool208 = icmp ne i32 %and207, 0
  br i1 %tobool208, label %cond.true209, label %cond.false211

cond.true209:                                     ; preds = %if.end205
  %129 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any210 = getelementptr inbounds %struct.sv, %struct.sv* %129, i32 0, i32 0
  %130 = load i8*, i8** %sv_any210, align 8
  %131 = bitcast i8* %130 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %131, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %132 = load double, double* %xnv_nv, align 8
  br label %cond.end213

cond.false211:                                    ; preds = %if.end205
  %133 = load %struct.sv*, %struct.sv** %svr, align 8
  %call212 = call double @Perl_sv_2nv_flags(%struct.sv* %133, i32 0)
  br label %cond.end213

cond.end213:                                      ; preds = %cond.false211, %cond.true209
  %cond214 = phi double [ %132, %cond.true209 ], [ %call212, %cond.false211 ]
  store double %cond214, double* %value, align 8
  %134 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr215 = getelementptr inbounds %struct.sv*, %struct.sv** %134, i32 -1
  store %struct.sv** %incdec.ptr215, %struct.sv*** %sp, align 8
  %135 = load %struct.sv*, %struct.sv** %134, align 8
  %136 = load i8, i8* %useleft, align 1
  %tobool216 = trunc i8 %136 to i1
  br i1 %tobool216, label %if.end233, label %if.then217

if.then217:                                       ; preds = %cond.end213
  br label %do.body218

do.body218:                                       ; preds = %if.then217
  %137 = load %struct.sv*, %struct.sv** %targ, align 8
  %138 = load double, double* %value, align 8
  call void @Perl_sv_setnv(%struct.sv* %137, double %138)
  br label %do.body219

do.body219:                                       ; preds = %do.body218
  br label %do.body220

do.body220:                                       ; preds = %do.body219
  %139 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags221 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags221, align 4
  %and222 = and i32 %140, 4194304
  %tobool223 = icmp ne i32 %and222, 0
  br i1 %tobool223, label %cond.true224, label %cond.false225

cond.true224:                                     ; preds = %do.body220
  br i1 true, label %if.then226, label %if.end228

cond.false225:                                    ; preds = %do.body220
  br i1 false, label %if.then226, label %if.end228

if.then226:                                       ; preds = %cond.false225, %cond.true224
  %141 = load %struct.sv*, %struct.sv** %targ, align 8
  %call227 = call i32 @Perl_mg_set(%struct.sv* %141)
  br label %if.end228

if.end228:                                        ; preds = %if.then226, %cond.false225, %cond.true224
  br label %do.end229

do.end229:                                        ; preds = %if.end228
  %142 = load %struct.sv*, %struct.sv** %targ, align 8
  %143 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %142, %struct.sv** %143, align 8
  br label %do.end230

do.end230:                                        ; preds = %do.end229
  br label %do.end231

do.end231:                                        ; preds = %do.end230
  %144 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %144, %struct.sv*** @PL_stack_sp, align 8
  %145 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next232 = getelementptr inbounds %struct.op, %struct.op* %145, i32 0, i32 0
  %146 = load %struct.op*, %struct.op** %op_next232, align 8
  store %struct.op* %146, %struct.op** %retval, align 8
  br label %return

if.end233:                                        ; preds = %cond.end213
  br label %do.body234

do.body234:                                       ; preds = %if.end233
  %147 = load %struct.sv*, %struct.sv** %targ, align 8
  %148 = load double, double* %value, align 8
  %149 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags235 = getelementptr inbounds %struct.sv, %struct.sv* %149, i32 0, i32 2
  %150 = load i32, i32* %sv_flags235, align 4
  %and236 = and i32 %150, 512
  %tobool237 = icmp ne i32 %and236, 0
  br i1 %tobool237, label %cond.true238, label %cond.false242

cond.true238:                                     ; preds = %do.body234
  %151 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any239 = getelementptr inbounds %struct.sv, %struct.sv* %151, i32 0, i32 0
  %152 = load i8*, i8** %sv_any239, align 8
  %153 = bitcast i8* %152 to %struct.xpvnv*
  %xnv_u240 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %153, i32 0, i32 5
  %xnv_nv241 = bitcast %union._xnvu* %xnv_u240 to double*
  %154 = load double, double* %xnv_nv241, align 8
  br label %cond.end244

cond.false242:                                    ; preds = %do.body234
  %155 = load %struct.sv*, %struct.sv** %svl, align 8
  %call243 = call double @Perl_sv_2nv_flags(%struct.sv* %155, i32 0)
  br label %cond.end244

cond.end244:                                      ; preds = %cond.false242, %cond.true238
  %cond245 = phi double [ %154, %cond.true238 ], [ %call243, %cond.false242 ]
  %add246 = fadd double %148, %cond245
  call void @Perl_sv_setnv(%struct.sv* %147, double %add246)
  br label %do.body247

do.body247:                                       ; preds = %cond.end244
  br label %do.body248

do.body248:                                       ; preds = %do.body247
  %156 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags249 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 2
  %157 = load i32, i32* %sv_flags249, align 4
  %and250 = and i32 %157, 4194304
  %tobool251 = icmp ne i32 %and250, 0
  br i1 %tobool251, label %cond.true252, label %cond.false253

cond.true252:                                     ; preds = %do.body248
  br i1 true, label %if.then254, label %if.end256

cond.false253:                                    ; preds = %do.body248
  br i1 false, label %if.then254, label %if.end256

if.then254:                                       ; preds = %cond.false253, %cond.true252
  %158 = load %struct.sv*, %struct.sv** %targ, align 8
  %call255 = call i32 @Perl_mg_set(%struct.sv* %158)
  br label %if.end256

if.end256:                                        ; preds = %if.then254, %cond.false253, %cond.true252
  br label %do.end257

do.end257:                                        ; preds = %if.end256
  %159 = load %struct.sv*, %struct.sv** %targ, align 8
  %160 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %159, %struct.sv** %160, align 8
  br label %do.end258

do.end258:                                        ; preds = %do.end257
  br label %do.end259

do.end259:                                        ; preds = %do.end258
  %161 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %161, %struct.sv*** @PL_stack_sp, align 8
  %162 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next260 = getelementptr inbounds %struct.op, %struct.op* %162, i32 0, i32 0
  %163 = load %struct.op*, %struct.op** %op_next260, align 8
  store %struct.op* %163, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end259, %do.end231, %if.end201, %if.then
  %164 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %164
}

declare dso_local i64 @Perl_sv_2iv_flags(%struct.sv*, i32) #1

declare dso_local void @Perl_sv_setuv(%struct.sv*, i64) #1

declare dso_local void @Perl_sv_setiv(%struct.sv*, i64) #1

declare dso_local void @Perl_sv_setnv(%struct.sv*, double) #1

declare dso_local double @Perl_sv_2nv_flags(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_aelemfast() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %av = alloca %struct.av*, align 8
  %lval = alloca i32, align 4
  %svp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 137
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 3
  %4 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %2, i64 %4
  %5 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %6 = bitcast %struct.sv* %5 to i8*
  %7 = bitcast i8* %6 to %struct.av*
  br label %cond.end13

cond.false:                                       ; preds = %entry
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %9 = bitcast %struct.op* %8 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %9, i32 0, i32 7
  %10 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %11 = bitcast %struct.sv* %10 to %struct.gv*
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %11, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %12 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %12, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 6
  %13 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool = icmp ne %struct.av* %13, null
  br i1 %tobool, label %cond.true1, label %cond.false7

cond.true1:                                       ; preds = %cond.false
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %15 = bitcast %struct.op* %14 to %struct.svop*
  %op_sv2 = getelementptr inbounds %struct.svop, %struct.svop* %15, i32 0, i32 7
  %16 = load %struct.sv*, %struct.sv** %op_sv2, align 8
  %17 = bitcast %struct.sv* %16 to %struct.gv*
  %sv_u3 = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 3
  %svu_gp4 = bitcast %union.anon.4* %sv_u3 to %struct.gp**
  %18 = load %struct.gp*, %struct.gp** %svu_gp4, align 8
  %add.ptr5 = getelementptr inbounds %struct.gp, %struct.gp* %18, i64 0
  %gp_av6 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr5, i32 0, i32 6
  %19 = load %struct.av*, %struct.av** %gp_av6, align 8
  br label %cond.end

cond.false7:                                      ; preds = %cond.false
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %21 = bitcast %struct.op* %20 to %struct.svop*
  %op_sv8 = getelementptr inbounds %struct.svop, %struct.svop* %21, i32 0, i32 7
  %22 = load %struct.sv*, %struct.sv** %op_sv8, align 8
  %23 = bitcast %struct.sv* %22 to %struct.gv*
  %call = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %23, i32 11)
  %sv_u9 = getelementptr inbounds %struct.gv, %struct.gv* %call, i32 0, i32 3
  %svu_gp10 = bitcast %union.anon.4* %sv_u9 to %struct.gp**
  %24 = load %struct.gp*, %struct.gp** %svu_gp10, align 8
  %add.ptr11 = getelementptr inbounds %struct.gp, %struct.gp* %24, i64 0
  %gp_av12 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr11, i32 0, i32 6
  %25 = load %struct.av*, %struct.av** %gp_av12, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false7, %cond.true1
  %cond = phi %struct.av* [ %19, %cond.true1 ], [ %25, %cond.false7 ]
  br label %cond.end13

cond.end13:                                       ; preds = %cond.end, %cond.true
  %cond14 = phi %struct.av* [ %7, %cond.true ], [ %cond, %cond.end ]
  store %struct.av* %cond14, %struct.av** %av, align 8
  %26 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 5
  %27 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %27 to i32
  %and = and i32 %conv, 32
  store i32 %and, i32* %lval, align 4
  %28 = load %struct.av*, %struct.av** %av, align 8
  %29 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 6
  %30 = load i8, i8* %op_private, align 1
  %conv15 = sext i8 %30 to i64
  %31 = load i32, i32* %lval, align 4
  %call16 = call %struct.sv** @Perl_av_fetch(%struct.av* %28, i64 %conv15, i32 %31)
  store %struct.sv** %call16, %struct.sv*** %svp, align 8
  %32 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool17 = icmp ne %struct.sv** %32, null
  br i1 %tobool17, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %cond.end13
  %33 = load %struct.sv**, %struct.sv*** %svp, align 8
  %34 = load %struct.sv*, %struct.sv** %33, align 8
  br label %cond.end20

cond.false19:                                     ; preds = %cond.end13
  br label %cond.end20

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi %struct.sv* [ %34, %cond.true18 ], [ @PL_sv_undef, %cond.false19 ]
  store %struct.sv* %cond21, %struct.sv** %sv, align 8
  %35 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool22 = icmp ne %struct.sv** %35, null
  br i1 %tobool22, label %cond.false25, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end20
  %36 = load i32, i32* %lval, align 4
  %tobool23 = icmp ne i32 %36, 0
  br i1 %tobool23, label %cond.true24, label %cond.false25

cond.true24:                                      ; preds = %land.lhs.true
  br i1 true, label %if.then, label %if.end

cond.false25:                                     ; preds = %land.lhs.true, %cond.end20
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false25, %cond.true24
  %37 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private26 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 6
  %38 = load i8, i8* %op_private26, align 1
  %conv27 = sext i8 %38 to i32
  %call28 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_aelem, i64 0, i64 0), i32 %conv27)
  store %struct.op* %call28, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.false25, %cond.true24
  br label %do.body

do.body:                                          ; preds = %if.end
  %39 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %39 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %40 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp29 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp29, label %cond.true31, label %cond.false32

cond.true31:                                      ; preds = %do.body
  br i1 true, label %if.then33, label %if.end35

cond.false32:                                     ; preds = %do.body
  br i1 false, label %if.then33, label %if.end35

if.then33:                                        ; preds = %cond.false32, %cond.true31
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call34 = call %struct.sv** @Perl_stack_grow(%struct.sv** %41, %struct.sv** %42, i64 1)
  store %struct.sv** %call34, %struct.sv*** %sp, align 8
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end35

if.end35:                                         ; preds = %if.then33, %cond.false32, %cond.true31
  br label %do.end

do.end:                                           ; preds = %if.end35
  %44 = load i32, i32* %lval, align 4
  %tobool36 = icmp ne i32 %44, 0
  br i1 %tobool36, label %if.end46, label %land.lhs.true37

land.lhs.true37:                                  ; preds = %do.end
  %45 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags, align 4
  %and38 = and i32 %46, 8388608
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %land.lhs.true40, label %if.end46

land.lhs.true40:                                  ; preds = %land.lhs.true37
  %47 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %48, 2097152
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.then44, label %if.end46

if.then44:                                        ; preds = %land.lhs.true40
  %49 = load %struct.sv*, %struct.sv** %sv, align 8
  %call45 = call i32 @Perl_mg_get(%struct.sv* %49)
  br label %if.end46

if.end46:                                         ; preds = %if.then44, %land.lhs.true40, %land.lhs.true37, %do.end
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %51, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %50, %struct.sv** %incdec.ptr, align 8
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %52, %struct.sv*** @PL_stack_sp, align 8
  %53 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 0
  %54 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %54, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end46, %if.then
  %55 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %55
}

declare dso_local %struct.sv** @Perl_av_fetch(%struct.av*, i64, i32) #1

declare dso_local %struct.op* @Perl_die(i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_join() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 3
  %6 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %4, i64 %6
  %7 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %7, %struct.sv** %targ, align 8
  %8 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %mark, align 8
  %9 = load %struct.sv*, %struct.sv** %targ, align 8
  %10 = load %struct.sv**, %struct.sv*** %mark, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %12 = load %struct.sv**, %struct.sv*** %mark, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  call void @Perl_do_join(%struct.sv* %9, %struct.sv* %11, %struct.sv** %12, %struct.sv** %13)
  %14 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %14, %struct.sv*** %sp, align 8
  %15 = load %struct.sv*, %struct.sv** %targ, align 8
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %15, %struct.sv** %16, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %17, %struct.sv*** @PL_stack_sp, align 8
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  %19 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %19
}

declare dso_local void @Perl_do_join(%struct.sv*, %struct.sv*, %struct.sv**, %struct.sv**) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_pushre() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body1
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body1
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %7 = bitcast %struct.op* %6 to i8*
  %8 = bitcast i8* %7 to %struct.sv*
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %8, %struct.sv** %incdec.ptr, align 8
  br label %do.end2

do.end2:                                          ; preds = %do.end
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %10, %struct.sv*** @PL_stack_sp, align 8
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 0
  %12 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %12
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_print() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %fp = alloca %struct._PerlIO**, align 8
  %mg = alloca %struct.magic*, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %markoff = alloca i64, align 8
  %ofs = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 5
  %7 = load i8, i8* %op_flags, align 2
  %conv1 = zext i8 %7 to i32
  %and = and i32 %conv1, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 1
  store %struct.sv** %incdec.ptr2, %struct.sv*** %mark, align 8
  %9 = load %struct.sv*, %struct.sv** %incdec.ptr2, align 8
  %10 = bitcast %struct.sv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.gv*
  br label %cond.end

cond.false:                                       ; preds = %entry
  %12 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %11, %cond.true ], [ %12, %cond.false ]
  store %struct.gv* %cond, %struct.gv** %gv, align 8
  %13 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool3 = icmp ne %struct.gv* %13, null
  br i1 %tobool3, label %land.lhs.true, label %cond.false17

land.lhs.true:                                    ; preds = %cond.end
  %14 = load %struct.gv*, %struct.gv** %gv, align 8
  %15 = bitcast %struct.gv* %14 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and4 = and i32 %16, 255
  %cmp = icmp eq i32 %and4, 9
  br i1 %cmp, label %land.lhs.true10, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %18 = bitcast %struct.gv* %17 to %struct.sv*
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %19, 255
  %cmp8 = icmp eq i32 %and7, 10
  br i1 %cmp8, label %land.lhs.true10, label %cond.false17

land.lhs.true10:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %20 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %20, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %21 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr11 = getelementptr inbounds %struct.gp, %struct.gp* %21, i64 0
  %tobool12 = icmp ne %struct.gp* %add.ptr11, null
  br i1 %tobool12, label %cond.true13, label %cond.false17

cond.true13:                                      ; preds = %land.lhs.true10
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u14 = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_gp15 = bitcast %union.anon.4* %sv_u14 to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp15, align 8
  %add.ptr16 = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr16, i32 0, i32 1
  %24 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end18

cond.false17:                                     ; preds = %land.lhs.true10, %lor.lhs.false, %cond.end
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true13
  %cond19 = phi %struct.io* [ %24, %cond.true13 ], [ null, %cond.false17 ]
  store %struct.io* %cond19, %struct.io** %io, align 8
  %25 = load %struct.io*, %struct.io** %io, align 8
  %tobool20 = icmp ne %struct.io* %25, null
  br i1 %tobool20, label %land.lhs.true21, label %if.end74

land.lhs.true21:                                  ; preds = %cond.end18
  %26 = load %struct.io*, %struct.io** %io, align 8
  %27 = bitcast %struct.io* %26 to %struct.sv*
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %28, 8388608
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %cond.true25, label %cond.false26

cond.true25:                                      ; preds = %land.lhs.true21
  %29 = load %struct.io*, %struct.io** %io, align 8
  %30 = bitcast %struct.io* %29 to %struct.sv*
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %30, i32 113)
  br label %cond.end27

cond.false26:                                     ; preds = %land.lhs.true21
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi %struct.magic* [ %call, %cond.true25 ], [ null, %cond.false26 ]
  store %struct.magic* %cond28, %struct.magic** %mg, align 8
  %tobool29 = icmp ne %struct.magic* %cond28, null
  br i1 %tobool29, label %if.then, label %if.end74

if.then:                                          ; preds = %cond.end27
  br label %had_magic

had_magic:                                        ; preds = %if.then155, %if.then
  %31 = load %struct.sv**, %struct.sv*** %mark, align 8
  %32 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %33 = load i32, i32* %origmark, align 4
  %idx.ext30 = sext i32 %33 to i64
  %add.ptr31 = getelementptr inbounds %struct.sv*, %struct.sv** %32, i64 %idx.ext30
  %cmp32 = icmp eq %struct.sv** %31, %add.ptr31
  br i1 %cmp32, label %if.then34, label %if.end57

if.then34:                                        ; preds = %had_magic
  br label %do.body

do.body:                                          ; preds = %if.then34
  %34 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast35 = ptrtoint %struct.sv** %34 to i64
  %sub.ptr.rhs.cast36 = ptrtoint %struct.sv** %35 to i64
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast35, %sub.ptr.rhs.cast36
  %sub.ptr.div38 = sdiv exact i64 %sub.ptr.sub37, 8
  %cmp39 = icmp slt i64 %sub.ptr.div38, 1
  br i1 %cmp39, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %do.body
  br i1 true, label %if.then43, label %if.end

cond.false42:                                     ; preds = %do.body
  br i1 false, label %if.then43, label %if.end

if.then43:                                        ; preds = %cond.false42, %cond.true41
  %36 = load %struct.sv**, %struct.sv*** %mark, align 8
  %37 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast44 = ptrtoint %struct.sv** %36 to i64
  %sub.ptr.rhs.cast45 = ptrtoint %struct.sv** %37 to i64
  %sub.ptr.sub46 = sub i64 %sub.ptr.lhs.cast44, %sub.ptr.rhs.cast45
  %sub.ptr.div47 = sdiv exact i64 %sub.ptr.sub46, 8
  store i64 %sub.ptr.div47, i64* %markoff, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call48 = call %struct.sv** @Perl_stack_grow(%struct.sv** %38, %struct.sv** %39, i64 1)
  store %struct.sv** %call48, %struct.sv*** %sp, align 8
  %40 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %41 = load i64, i64* %markoff, align 8
  %add.ptr49 = getelementptr inbounds %struct.sv*, %struct.sv** %40, i64 %41
  store %struct.sv** %add.ptr49, %struct.sv*** %mark, align 8
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then43, %cond.false42, %cond.true41
  br label %do.end

do.end:                                           ; preds = %if.end
  %43 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr50 = getelementptr inbounds %struct.sv*, %struct.sv** %43, i32 1
  store %struct.sv** %incdec.ptr50, %struct.sv*** %mark, align 8
  %44 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr51 = getelementptr inbounds %struct.sv*, %struct.sv** %44, i64 1
  %45 = bitcast %struct.sv** %add.ptr51 to i8*
  %46 = load %struct.sv**, %struct.sv*** %mark, align 8
  %47 = bitcast %struct.sv** %46 to i8*
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %49 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast52 = ptrtoint %struct.sv** %48 to i64
  %sub.ptr.rhs.cast53 = ptrtoint %struct.sv** %49 to i64
  %sub.ptr.sub54 = sub i64 %sub.ptr.lhs.cast52, %sub.ptr.rhs.cast53
  %sub.ptr.div55 = sdiv exact i64 %sub.ptr.sub54, 8
  %add = add nsw i64 %sub.ptr.div55, 1
  %mul = mul i64 %add, 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %45, i8* align 1 %47, i64 %mul, i1 false)
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr56 = getelementptr inbounds %struct.sv*, %struct.sv** %50, i32 1
  store %struct.sv** %incdec.ptr56, %struct.sv*** %sp, align 8
  br label %if.end57

if.end57:                                         ; preds = %do.end, %had_magic
  %51 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 20), align 16
  %tobool58 = icmp ne %struct.sv* %51, null
  br i1 %tobool58, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %if.end57
  %52 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 20), align 16
  br label %cond.end62

cond.false60:                                     ; preds = %if.end57
  %call61 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32 0)
  store %struct.sv* %call61, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 20), align 16
  br label %cond.end62

cond.end62:                                       ; preds = %cond.false60, %cond.true59
  %cond63 = phi %struct.sv* [ %52, %cond.true59 ], [ %call61, %cond.false60 ]
  %53 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr64 = getelementptr inbounds %struct.sv*, %struct.sv** %53, i64 -1
  %54 = load %struct.io*, %struct.io** %io, align 8
  %55 = bitcast %struct.io* %54 to i8*
  %56 = bitcast i8* %55 to %struct.sv*
  %57 = load %struct.magic*, %struct.magic** %mg, align 8
  %58 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp65 = icmp eq i32 %bf.cast, 239
  %59 = zext i1 %cmp65 to i64
  %cond67 = select i1 %cmp65, i32 16, i32 0
  %or = or i32 10, %cond67
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %61 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast68 = ptrtoint %struct.sv** %60 to i64
  %sub.ptr.rhs.cast69 = ptrtoint %struct.sv** %61 to i64
  %sub.ptr.sub70 = sub i64 %sub.ptr.lhs.cast68, %sub.ptr.rhs.cast69
  %sub.ptr.div71 = sdiv exact i64 %sub.ptr.sub70, 8
  %conv72 = trunc i64 %sub.ptr.div71 to i32
  %call73 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond63, %struct.sv** %add.ptr64, %struct.sv* %56, %struct.magic* %57, i32 %or, i32 %conv72)
  store %struct.op* %call73, %struct.op** %retval, align 8
  br label %return

if.end74:                                         ; preds = %cond.end27, %cond.end18
  %62 = load %struct.io*, %struct.io** %io, align 8
  %tobool75 = icmp ne %struct.io* %62, null
  br i1 %tobool75, label %if.else, label %if.then76

if.then76:                                        ; preds = %if.end74
  %63 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool77 = icmp ne %struct.gv* %63, null
  br i1 %tobool77, label %land.lhs.true78, label %if.end156

land.lhs.true78:                                  ; preds = %if.then76
  %64 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags79 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %65, 49152
  %cmp81 = icmp eq i32 %and80, 32768
  br i1 %cmp81, label %land.lhs.true83, label %cond.false98

land.lhs.true83:                                  ; preds = %land.lhs.true78
  %66 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags84 = getelementptr inbounds %struct.gv, %struct.gv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %67, 255
  %cmp86 = icmp eq i32 %and85, 9
  br i1 %cmp86, label %cond.true93, label %lor.lhs.false88

lor.lhs.false88:                                  ; preds = %land.lhs.true83
  %68 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags89 = getelementptr inbounds %struct.gv, %struct.gv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %69, 255
  %cmp91 = icmp eq i32 %and90, 10
  br i1 %cmp91, label %cond.true93, label %cond.false98

cond.true93:                                      ; preds = %lor.lhs.false88, %land.lhs.true83
  %70 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u94 = getelementptr inbounds %struct.gv, %struct.gv* %70, i32 0, i32 3
  %svu_gp95 = bitcast %union.anon.4* %sv_u94 to %struct.gp**
  %71 = load %struct.gp*, %struct.gp** %svu_gp95, align 8
  %add.ptr96 = getelementptr inbounds %struct.gp, %struct.gp* %71, i64 0
  %gp_egv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr96, i32 0, i32 8
  %72 = load %struct.gv*, %struct.gv** %gp_egv, align 8
  %tobool97 = icmp ne %struct.gv* %72, null
  br i1 %tobool97, label %land.lhs.true99, label %if.end156

cond.false98:                                     ; preds = %lor.lhs.false88, %land.lhs.true78
  br i1 false, label %land.lhs.true99, label %if.end156

land.lhs.true99:                                  ; preds = %cond.false98, %cond.true93
  %73 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u100 = getelementptr inbounds %struct.gv, %struct.gv* %73, i32 0, i32 3
  %svu_gp101 = bitcast %union.anon.4* %sv_u100 to %struct.gp**
  %74 = load %struct.gp*, %struct.gp** %svu_gp101, align 8
  %add.ptr102 = getelementptr inbounds %struct.gp, %struct.gp* %74, i64 0
  %gp_egv103 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr102, i32 0, i32 8
  %75 = load %struct.gv*, %struct.gv** %gp_egv103, align 8
  %tobool104 = icmp ne %struct.gv* %75, null
  br i1 %tobool104, label %land.lhs.true105, label %cond.false141

land.lhs.true105:                                 ; preds = %land.lhs.true99
  %76 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u106 = getelementptr inbounds %struct.gv, %struct.gv* %76, i32 0, i32 3
  %svu_gp107 = bitcast %union.anon.4* %sv_u106 to %struct.gp**
  %77 = load %struct.gp*, %struct.gp** %svu_gp107, align 8
  %add.ptr108 = getelementptr inbounds %struct.gp, %struct.gp* %77, i64 0
  %gp_egv109 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr108, i32 0, i32 8
  %78 = load %struct.gv*, %struct.gv** %gp_egv109, align 8
  %79 = bitcast %struct.gv* %78 to %struct.sv*
  %sv_flags110 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags110, align 4
  %and111 = and i32 %80, 255
  %cmp112 = icmp eq i32 %and111, 9
  br i1 %cmp112, label %land.lhs.true123, label %lor.lhs.false114

lor.lhs.false114:                                 ; preds = %land.lhs.true105
  %81 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u115 = getelementptr inbounds %struct.gv, %struct.gv* %81, i32 0, i32 3
  %svu_gp116 = bitcast %union.anon.4* %sv_u115 to %struct.gp**
  %82 = load %struct.gp*, %struct.gp** %svu_gp116, align 8
  %add.ptr117 = getelementptr inbounds %struct.gp, %struct.gp* %82, i64 0
  %gp_egv118 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr117, i32 0, i32 8
  %83 = load %struct.gv*, %struct.gv** %gp_egv118, align 8
  %84 = bitcast %struct.gv* %83 to %struct.sv*
  %sv_flags119 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags119, align 4
  %and120 = and i32 %85, 255
  %cmp121 = icmp eq i32 %and120, 10
  br i1 %cmp121, label %land.lhs.true123, label %cond.false141

land.lhs.true123:                                 ; preds = %lor.lhs.false114, %land.lhs.true105
  %86 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u124 = getelementptr inbounds %struct.gv, %struct.gv* %86, i32 0, i32 3
  %svu_gp125 = bitcast %union.anon.4* %sv_u124 to %struct.gp**
  %87 = load %struct.gp*, %struct.gp** %svu_gp125, align 8
  %add.ptr126 = getelementptr inbounds %struct.gp, %struct.gp* %87, i64 0
  %gp_egv127 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr126, i32 0, i32 8
  %88 = load %struct.gv*, %struct.gv** %gp_egv127, align 8
  %sv_u128 = getelementptr inbounds %struct.gv, %struct.gv* %88, i32 0, i32 3
  %svu_gp129 = bitcast %union.anon.4* %sv_u128 to %struct.gp**
  %89 = load %struct.gp*, %struct.gp** %svu_gp129, align 8
  %add.ptr130 = getelementptr inbounds %struct.gp, %struct.gp* %89, i64 0
  %tobool131 = icmp ne %struct.gp* %add.ptr130, null
  br i1 %tobool131, label %cond.true132, label %cond.false141

cond.true132:                                     ; preds = %land.lhs.true123
  %90 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u133 = getelementptr inbounds %struct.gv, %struct.gv* %90, i32 0, i32 3
  %svu_gp134 = bitcast %union.anon.4* %sv_u133 to %struct.gp**
  %91 = load %struct.gp*, %struct.gp** %svu_gp134, align 8
  %add.ptr135 = getelementptr inbounds %struct.gp, %struct.gp* %91, i64 0
  %gp_egv136 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr135, i32 0, i32 8
  %92 = load %struct.gv*, %struct.gv** %gp_egv136, align 8
  %sv_u137 = getelementptr inbounds %struct.gv, %struct.gv* %92, i32 0, i32 3
  %svu_gp138 = bitcast %union.anon.4* %sv_u137 to %struct.gp**
  %93 = load %struct.gp*, %struct.gp** %svu_gp138, align 8
  %add.ptr139 = getelementptr inbounds %struct.gp, %struct.gp* %93, i64 0
  %gp_io140 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr139, i32 0, i32 1
  %94 = load %struct.io*, %struct.io** %gp_io140, align 8
  br label %cond.end142

cond.false141:                                    ; preds = %land.lhs.true123, %lor.lhs.false114, %land.lhs.true99
  br label %cond.end142

cond.end142:                                      ; preds = %cond.false141, %cond.true132
  %cond143 = phi %struct.io* [ %94, %cond.true132 ], [ null, %cond.false141 ]
  store %struct.io* %cond143, %struct.io** %io, align 8
  %tobool144 = icmp ne %struct.io* %cond143, null
  br i1 %tobool144, label %land.lhs.true145, label %if.end156

land.lhs.true145:                                 ; preds = %cond.end142
  %95 = load %struct.io*, %struct.io** %io, align 8
  %96 = bitcast %struct.io* %95 to %struct.sv*
  %sv_flags146 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags146, align 4
  %and147 = and i32 %97, 8388608
  %tobool148 = icmp ne i32 %and147, 0
  br i1 %tobool148, label %cond.true149, label %cond.false151

cond.true149:                                     ; preds = %land.lhs.true145
  %98 = load %struct.io*, %struct.io** %io, align 8
  %99 = bitcast %struct.io* %98 to %struct.sv*
  %call150 = call %struct.magic* @Perl_mg_find(%struct.sv* %99, i32 113)
  br label %cond.end152

cond.false151:                                    ; preds = %land.lhs.true145
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false151, %cond.true149
  %cond153 = phi %struct.magic* [ %call150, %cond.true149 ], [ null, %cond.false151 ]
  store %struct.magic* %cond153, %struct.magic** %mg, align 8
  %tobool154 = icmp ne %struct.magic* %cond153, null
  br i1 %tobool154, label %if.then155, label %if.end156

if.then155:                                       ; preds = %cond.end152
  br label %had_magic

if.end156:                                        ; preds = %cond.end152, %cond.end142, %cond.false98, %cond.true93, %if.then76
  %100 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %100)
  %call157 = call i32* @__errno_location() #8
  store i32 9, i32* %call157, align 4
  br label %just_say_no

if.else:                                          ; preds = %if.end74
  %101 = load %struct.io*, %struct.io** %io, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %101, i32 0, i32 0
  %102 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %102, i32 0, i32 5
  %103 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  store %struct._PerlIO** %103, %struct._PerlIO*** %fp, align 8
  %tobool158 = icmp ne %struct._PerlIO** %103, null
  br i1 %tobool158, label %if.else166, label %if.then159

if.then159:                                       ; preds = %if.else
  %104 = load %struct.io*, %struct.io** %io, align 8
  %sv_u160 = getelementptr inbounds %struct.io, %struct.io* %104, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u160 to %struct._PerlIO***
  %105 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool161 = icmp ne %struct._PerlIO** %105, null
  br i1 %tobool161, label %if.then162, label %if.else163

if.then162:                                       ; preds = %if.then159
  %106 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_wrongway_fh(%struct.gv* %106, i8 signext 60)
  br label %if.end164

if.else163:                                       ; preds = %if.then159
  %107 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %107)
  br label %if.end164

if.end164:                                        ; preds = %if.else163, %if.then162
  %call165 = call i32* @__errno_location() #8
  store i32 9, i32* %call165, align 4
  br label %just_say_no

if.else166:                                       ; preds = %if.else
  %108 = load %struct.gv*, %struct.gv** @PL_ofsgv, align 8
  %sv_u167 = getelementptr inbounds %struct.gv, %struct.gv* %108, i32 0, i32 3
  %svu_gp168 = bitcast %union.anon.4* %sv_u167 to %struct.gp**
  %109 = load %struct.gp*, %struct.gp** %svu_gp168, align 8
  %add.ptr169 = getelementptr inbounds %struct.gp, %struct.gp* %109, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr169, i32 0, i32 0
  %110 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %110, %struct.sv** %ofs, align 8
  %111 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr170 = getelementptr inbounds %struct.sv*, %struct.sv** %111, i32 1
  store %struct.sv** %incdec.ptr170, %struct.sv*** %mark, align 8
  %112 = load %struct.sv*, %struct.sv** %ofs, align 8
  %tobool171 = icmp ne %struct.sv* %112, null
  br i1 %tobool171, label %land.lhs.true172, label %if.else209

land.lhs.true172:                                 ; preds = %if.else166
  %113 = load %struct.sv*, %struct.sv** %ofs, align 8
  %sv_flags173 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags173, align 4
  %and174 = and i32 %114, 2097152
  %tobool175 = icmp ne i32 %and174, 0
  br i1 %tobool175, label %if.then190, label %lor.lhs.false176

lor.lhs.false176:                                 ; preds = %land.lhs.true172
  %115 = load %struct.sv*, %struct.sv** %ofs, align 8
  %sv_flags177 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags177, align 4
  %and178 = and i32 %116, 65280
  %tobool179 = icmp ne i32 %and178, 0
  br i1 %tobool179, label %if.then190, label %lor.lhs.false180

lor.lhs.false180:                                 ; preds = %lor.lhs.false176
  %117 = load %struct.sv*, %struct.sv** %ofs, align 8
  %sv_flags181 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags181, align 4
  %and182 = and i32 %118, 255
  %cmp183 = icmp eq i32 %and182, 8
  br i1 %cmp183, label %if.then190, label %lor.lhs.false185

lor.lhs.false185:                                 ; preds = %lor.lhs.false180
  %119 = load %struct.sv*, %struct.sv** %ofs, align 8
  %sv_flags186 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags186, align 4
  %and187 = and i32 %120, 16826623
  %cmp188 = icmp eq i32 %and187, 16777226
  br i1 %cmp188, label %if.then190, label %if.else209

if.then190:                                       ; preds = %lor.lhs.false185, %lor.lhs.false180, %lor.lhs.false176, %land.lhs.true172
  br label %while.cond

while.cond:                                       ; preds = %if.end208, %if.then190
  %121 = load %struct.sv**, %struct.sv*** %mark, align 8
  %122 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp191 = icmp ule %struct.sv** %121, %122
  br i1 %cmp191, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %123 = load %struct.sv**, %struct.sv*** %mark, align 8
  %124 = load %struct.sv*, %struct.sv** %123, align 8
  %125 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call193 = call zeroext i1 @Perl_do_print(%struct.sv* %124, %struct._PerlIO** %125)
  br i1 %call193, label %if.end195, label %if.then194

if.then194:                                       ; preds = %while.body
  br label %while.end

if.end195:                                        ; preds = %while.body
  %126 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr196 = getelementptr inbounds %struct.sv*, %struct.sv** %126, i32 1
  store %struct.sv** %incdec.ptr196, %struct.sv*** %mark, align 8
  %127 = load %struct.sv**, %struct.sv*** %mark, align 8
  %128 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp197 = icmp ule %struct.sv** %127, %128
  br i1 %cmp197, label %if.then199, label %if.end208

if.then199:                                       ; preds = %if.end195
  %129 = load %struct.gv*, %struct.gv** @PL_ofsgv, align 8
  %sv_u200 = getelementptr inbounds %struct.gv, %struct.gv* %129, i32 0, i32 3
  %svu_gp201 = bitcast %union.anon.4* %sv_u200 to %struct.gp**
  %130 = load %struct.gp*, %struct.gp** %svu_gp201, align 8
  %add.ptr202 = getelementptr inbounds %struct.gp, %struct.gp* %130, i64 0
  %gp_sv203 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr202, i32 0, i32 0
  %131 = load %struct.sv*, %struct.sv** %gp_sv203, align 8
  %132 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call204 = call zeroext i1 @Perl_do_print(%struct.sv* %131, %struct._PerlIO** %132)
  br i1 %call204, label %if.end207, label %if.then205

if.then205:                                       ; preds = %if.then199
  %133 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr206 = getelementptr inbounds %struct.sv*, %struct.sv** %133, i32 -1
  store %struct.sv** %incdec.ptr206, %struct.sv*** %mark, align 8
  br label %while.end

if.end207:                                        ; preds = %if.then199
  br label %if.end208

if.end208:                                        ; preds = %if.end207, %if.end195
  br label %while.cond

while.end:                                        ; preds = %if.then205, %if.then194, %while.cond
  br label %if.end219

if.else209:                                       ; preds = %lor.lhs.false185, %if.else166
  br label %while.cond210

while.cond210:                                    ; preds = %if.end216, %if.else209
  %134 = load %struct.sv**, %struct.sv*** %mark, align 8
  %135 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp211 = icmp ule %struct.sv** %134, %135
  br i1 %cmp211, label %while.body213, label %while.end218

while.body213:                                    ; preds = %while.cond210
  %136 = load %struct.sv**, %struct.sv*** %mark, align 8
  %137 = load %struct.sv*, %struct.sv** %136, align 8
  %138 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call214 = call zeroext i1 @Perl_do_print(%struct.sv* %137, %struct._PerlIO** %138)
  br i1 %call214, label %if.end216, label %if.then215

if.then215:                                       ; preds = %while.body213
  br label %while.end218

if.end216:                                        ; preds = %while.body213
  %139 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr217 = getelementptr inbounds %struct.sv*, %struct.sv** %139, i32 1
  store %struct.sv** %incdec.ptr217, %struct.sv*** %mark, align 8
  br label %while.cond210

while.end218:                                     ; preds = %if.then215, %while.cond210
  br label %if.end219

if.end219:                                        ; preds = %while.end218, %while.end
  %140 = load %struct.sv**, %struct.sv*** %mark, align 8
  %141 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp220 = icmp ule %struct.sv** %140, %141
  br i1 %cmp220, label %if.then222, label %if.else223

if.then222:                                       ; preds = %if.end219
  br label %just_say_no

if.else223:                                       ; preds = %if.end219
  %142 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type224 = getelementptr inbounds %struct.op, %struct.op* %142, i32 0, i32 4
  %bf.load225 = load i16, i16* %op_type224, align 8
  %bf.clear226 = and i16 %bf.load225, 511
  %bf.cast227 = zext i16 %bf.clear226 to i32
  %cmp228 = icmp eq i32 %bf.cast227, 239
  br i1 %cmp228, label %if.then230, label %if.else239

if.then230:                                       ; preds = %if.else223
  %143 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call231 = call i64 @Perl_PerlIO_write(%struct._PerlIO** %143, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i64 1)
  %cmp232 = icmp eq i64 %call231, 0
  br i1 %cmp232, label %if.then237, label %lor.lhs.false234

lor.lhs.false234:                                 ; preds = %if.then230
  %144 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call235 = call i32 @Perl_PerlIO_error(%struct._PerlIO** %144)
  %tobool236 = icmp ne i32 %call235, 0
  br i1 %tobool236, label %if.then237, label %if.end238

if.then237:                                       ; preds = %lor.lhs.false234, %if.then230
  br label %just_say_no

if.end238:                                        ; preds = %lor.lhs.false234
  br label %if.end260

if.else239:                                       ; preds = %if.else223
  %145 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %tobool240 = icmp ne %struct.sv* %145, null
  br i1 %tobool240, label %land.lhs.true241, label %if.end259

land.lhs.true241:                                 ; preds = %if.else239
  %146 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %sv_flags242 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 2
  %147 = load i32, i32* %sv_flags242, align 4
  %and243 = and i32 %147, 65280
  %tobool244 = icmp ne i32 %and243, 0
  br i1 %tobool244, label %if.then255, label %lor.lhs.false245

lor.lhs.false245:                                 ; preds = %land.lhs.true241
  %148 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %sv_flags246 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 2
  %149 = load i32, i32* %sv_flags246, align 4
  %and247 = and i32 %149, 255
  %cmp248 = icmp eq i32 %and247, 8
  br i1 %cmp248, label %if.then255, label %lor.lhs.false250

lor.lhs.false250:                                 ; preds = %lor.lhs.false245
  %150 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %sv_flags251 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 2
  %151 = load i32, i32* %sv_flags251, align 4
  %and252 = and i32 %151, 16826623
  %cmp253 = icmp eq i32 %and252, 16777226
  br i1 %cmp253, label %if.then255, label %if.end259

if.then255:                                       ; preds = %lor.lhs.false250, %lor.lhs.false245, %land.lhs.true241
  %152 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %153 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call256 = call zeroext i1 @Perl_do_print(%struct.sv* %152, %struct._PerlIO** %153)
  br i1 %call256, label %if.end258, label %if.then257

if.then257:                                       ; preds = %if.then255
  br label %just_say_no

if.end258:                                        ; preds = %if.then255
  br label %if.end259

if.end259:                                        ; preds = %if.end258, %lor.lhs.false250, %if.else239
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.end238
  %154 = load %struct.io*, %struct.io** %io, align 8
  %sv_any261 = getelementptr inbounds %struct.io, %struct.io* %154, i32 0, i32 0
  %155 = load %struct.xpvio*, %struct.xpvio** %sv_any261, align 8
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %155, i32 0, i32 17
  %156 = load i8, i8* %xio_flags, align 1
  %conv262 = zext i8 %156 to i32
  %and263 = and i32 %conv262, 4
  %tobool264 = icmp ne i32 %and263, 0
  br i1 %tobool264, label %if.then265, label %if.end271

if.then265:                                       ; preds = %if.end260
  %157 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call266 = call i32 @Perl_PerlIO_flush(%struct._PerlIO** %157)
  %cmp267 = icmp eq i32 %call266, -1
  br i1 %cmp267, label %if.then269, label %if.end270

if.then269:                                       ; preds = %if.then265
  br label %just_say_no

if.end270:                                        ; preds = %if.then265
  br label %if.end271

if.end271:                                        ; preds = %if.end270, %if.end260
  br label %if.end272

if.end272:                                        ; preds = %if.end271
  br label %if.end273

if.end273:                                        ; preds = %if.end272
  br label %if.end274

if.end274:                                        ; preds = %if.end273
  %158 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %159 = load i32, i32* %origmark, align 4
  %idx.ext275 = sext i32 %159 to i64
  %add.ptr276 = getelementptr inbounds %struct.sv*, %struct.sv** %158, i64 %idx.ext275
  store %struct.sv** %add.ptr276, %struct.sv*** %sp, align 8
  br label %do.body277

do.body277:                                       ; preds = %if.end274
  br label %do.body278

do.body278:                                       ; preds = %do.body277
  %160 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %161 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast279 = ptrtoint %struct.sv** %160 to i64
  %sub.ptr.rhs.cast280 = ptrtoint %struct.sv** %161 to i64
  %sub.ptr.sub281 = sub i64 %sub.ptr.lhs.cast279, %sub.ptr.rhs.cast280
  %sub.ptr.div282 = sdiv exact i64 %sub.ptr.sub281, 8
  %cmp283 = icmp slt i64 %sub.ptr.div282, 1
  br i1 %cmp283, label %cond.true285, label %cond.false286

cond.true285:                                     ; preds = %do.body278
  br i1 true, label %if.then287, label %if.end289

cond.false286:                                    ; preds = %do.body278
  br i1 false, label %if.then287, label %if.end289

if.then287:                                       ; preds = %cond.false286, %cond.true285
  %162 = load %struct.sv**, %struct.sv*** %sp, align 8
  %163 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call288 = call %struct.sv** @Perl_stack_grow(%struct.sv** %162, %struct.sv** %163, i64 1)
  store %struct.sv** %call288, %struct.sv*** %sp, align 8
  %164 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end289

if.end289:                                        ; preds = %if.then287, %cond.false286, %cond.true285
  br label %do.end290

do.end290:                                        ; preds = %if.end289
  %165 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr291 = getelementptr inbounds %struct.sv*, %struct.sv** %165, i32 1
  store %struct.sv** %incdec.ptr291, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr291, align 8
  br label %do.end292

do.end292:                                        ; preds = %do.end290
  %166 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %166, %struct.sv*** @PL_stack_sp, align 8
  %167 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %167, i32 0, i32 0
  %168 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %168, %struct.op** %retval, align 8
  br label %return

just_say_no:                                      ; preds = %if.then269, %if.then257, %if.then237, %if.then222, %if.end164, %if.end156
  %169 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %170 = load i32, i32* %origmark, align 4
  %idx.ext293 = sext i32 %170 to i64
  %add.ptr294 = getelementptr inbounds %struct.sv*, %struct.sv** %169, i64 %idx.ext293
  store %struct.sv** %add.ptr294, %struct.sv*** %sp, align 8
  br label %do.body295

do.body295:                                       ; preds = %just_say_no
  br label %do.body296

do.body296:                                       ; preds = %do.body295
  %171 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %172 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast297 = ptrtoint %struct.sv** %171 to i64
  %sub.ptr.rhs.cast298 = ptrtoint %struct.sv** %172 to i64
  %sub.ptr.sub299 = sub i64 %sub.ptr.lhs.cast297, %sub.ptr.rhs.cast298
  %sub.ptr.div300 = sdiv exact i64 %sub.ptr.sub299, 8
  %cmp301 = icmp slt i64 %sub.ptr.div300, 1
  br i1 %cmp301, label %cond.true303, label %cond.false304

cond.true303:                                     ; preds = %do.body296
  br i1 true, label %if.then305, label %if.end307

cond.false304:                                    ; preds = %do.body296
  br i1 false, label %if.then305, label %if.end307

if.then305:                                       ; preds = %cond.false304, %cond.true303
  %173 = load %struct.sv**, %struct.sv*** %sp, align 8
  %174 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call306 = call %struct.sv** @Perl_stack_grow(%struct.sv** %173, %struct.sv** %174, i64 1)
  store %struct.sv** %call306, %struct.sv*** %sp, align 8
  %175 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end307

if.end307:                                        ; preds = %if.then305, %cond.false304, %cond.true303
  br label %do.end308

do.end308:                                        ; preds = %if.end307
  %176 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr309 = getelementptr inbounds %struct.sv*, %struct.sv** %176, i32 1
  store %struct.sv** %incdec.ptr309, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr309, align 8
  br label %do.end310

do.end310:                                        ; preds = %do.end308
  %177 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %177, %struct.sv*** @PL_stack_sp, align 8
  %178 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next311 = getelementptr inbounds %struct.op, %struct.op* %178, i32 0, i32 0
  %179 = load %struct.op*, %struct.op** %op_next311, align 8
  store %struct.op* %179, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end310, %do.end292, %cond.end62
  %180 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %180
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare dso_local %struct.op* @Perl_tied_method(%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) #1

declare dso_local %struct.sv* @Perl_newSVpv_share(i8*, i32) #1

declare dso_local void @Perl_report_evil_fh(%struct.gv*) #1

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #3

declare dso_local void @Perl_report_wrongway_fh(%struct.gv*, i8 signext) #1

declare dso_local zeroext i1 @Perl_do_print(%struct.sv*, %struct._PerlIO**) #1

declare dso_local i64 @Perl_PerlIO_write(%struct._PerlIO**, i8*, i64) #1

declare dso_local i32 @Perl_PerlIO_error(%struct._PerlIO**) #1

declare dso_local i32 @Perl_PerlIO_flush(%struct._PerlIO**) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_rv2av() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %gimme = alloca i32, align 4
  %is_pp_rv2av = alloca i8, align 1
  %type = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %flags = alloca i32, align 4
  %av = alloca %struct.av*, align 8
  %targ = alloca %struct.sv*, align 8
  %maxarg = alloca i64, align 8
  %targ261 = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %6 to i32
  %and3 = and i32 %conv2, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and3, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %gimme, align 4
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 135
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type5 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type5, align 8
  %bf.clear7 = and i16 %bf.load6, 511
  %bf.cast8 = zext i16 %bf.clear7 to i32
  %cmp9 = icmp eq i32 %bf.cast8, 394
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end
  %9 = phi i1 [ true, %cond.end ], [ %cmp9, %lor.rhs ]
  %frombool = zext i1 %9 to i8
  store i8 %frombool, i8* %is_pp_rv2av, align 1
  %10 = load i8, i8* %is_pp_rv2av, align 1
  %tobool11 = trunc i8 %10 to i1
  %11 = zext i1 %tobool11 to i64
  %cond13 = select i1 %tobool11, i32 11, i32 12
  store i32 %cond13, i32* %type, align 4
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags, align 4
  %and14 = and i32 %13, 2097152
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %cond.true16, label %cond.false17

cond.true16:                                      ; preds = %lor.end
  br i1 true, label %land.rhs, label %land.end

cond.false17:                                     ; preds = %lor.end
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false17, %cond.true16
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %call18 = call i32 @Perl_mg_get(%struct.sv* %14)
  %tobool19 = icmp ne i32 %call18, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false17, %cond.true16
  %15 = phi i1 [ false, %cond.false17 ], [ false, %cond.true16 ], [ %tobool19, %land.rhs ]
  %land.ext = zext i1 %15 to i32
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %17, 2048
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then, label %if.else68

if.then:                                          ; preds = %land.end
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %19, 2048
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %land.lhs.true, label %cond.false36

land.lhs.true:                                    ; preds = %if.then
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %21 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %22, 1048576
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %land.lhs.true29, label %cond.false36

land.lhs.true29:                                  ; preds = %land.lhs.true
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u30 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 3
  %svu_rv31 = bitcast %union.anon* %sv_u30 to %struct.sv**
  %24 = load %struct.sv*, %struct.sv** %svu_rv31, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any, align 8
  %26 = bitcast i8* %25 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %26, i32 0, i32 0
  %27 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags32 = getelementptr inbounds %struct.hv, %struct.hv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %28, 268435456
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %cond.true35, label %cond.false36

cond.true35:                                      ; preds = %land.lhs.true29
  br i1 true, label %if.then37, label %if.end

cond.false36:                                     ; preds = %land.lhs.true29, %land.lhs.true, %if.then
  br i1 false, label %if.then37, label %if.end

if.then37:                                        ; preds = %cond.false36, %cond.true35
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %30 = load i8, i8* %is_pp_rv2av, align 1
  %tobool38 = trunc i8 %30 to i1
  %31 = zext i1 %tobool38 to i64
  %cond40 = select i1 %tobool38, i32 2, i32 3
  %call41 = call %struct.sv* @Perl_amagic_deref_call(%struct.sv* %29, i32 %cond40)
  store %struct.sv* %call41, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.then37, %cond.false36, %cond.true35
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u42 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 3
  %svu_rv43 = bitcast %union.anon* %sv_u42 to %struct.sv**
  %33 = load %struct.sv*, %struct.sv** %svu_rv43, align 8
  store %struct.sv* %33, %struct.sv** %sv, align 8
  %34 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %35, 255
  %36 = load i32, i32* %type, align 4
  %cmp46 = icmp ne i32 %and45, %36
  br i1 %cmp46, label %cond.true48, label %cond.false49

cond.true48:                                      ; preds = %if.end
  br i1 true, label %if.then50, label %if.else

cond.false49:                                     ; preds = %if.end
  br i1 false, label %if.then50, label %if.else

if.then50:                                        ; preds = %cond.false49, %cond.true48
  %37 = load i8, i8* %is_pp_rv2av, align 1
  %tobool51 = trunc i8 %37 to i1
  %38 = zext i1 %tobool51 to i64
  %cond53 = select i1 %tobool51, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @Perl_pp_rv2av.an_array, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Perl_pp_rv2av.a_hash, i64 0, i64 0)
  %call54 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i8* %cond53)
  store %struct.op* %call54, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %cond.false49, %cond.true48
  %39 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags55 = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 5
  %40 = load i8, i8* %op_flags55, align 2
  %conv56 = zext i8 %40 to i32
  %and57 = and i32 %conv56, 32
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %land.lhs.true59, label %cond.false64

land.lhs.true59:                                  ; preds = %if.else
  %41 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 6
  %42 = load i8, i8* %op_private, align 1
  %conv60 = zext i8 %42 to i32
  %and61 = and i32 %conv60, 128
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %cond.true63, label %cond.false64

cond.true63:                                      ; preds = %land.lhs.true59
  br i1 true, label %if.then65, label %if.end66

cond.false64:                                     ; preds = %land.lhs.true59, %if.else
  br i1 false, label %if.then65, label %if.end66

if.then65:                                        ; preds = %cond.false64, %cond.true63
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_localize_ref, i64 0, i64 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %cond.false64, %cond.true63
  br label %if.end67

if.end67:                                         ; preds = %if.end66
  br label %if.end152

if.else68:                                        ; preds = %land.end
  %43 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %44, 255
  %45 = load i32, i32* %type, align 4
  %cmp71 = icmp ne i32 %and70, %45
  br i1 %cmp71, label %cond.true73, label %cond.false74

cond.true73:                                      ; preds = %if.else68
  br i1 true, label %if.then75, label %if.end151

cond.false74:                                     ; preds = %if.else68
  br i1 false, label %if.then75, label %if.end151

if.then75:                                        ; preds = %cond.false74, %cond.true73
  %46 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags76 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags76, align 4
  %and77 = and i32 %47, 49152
  %cmp78 = icmp eq i32 %and77, 32768
  br i1 %cmp78, label %land.lhs.true80, label %if.then89

land.lhs.true80:                                  ; preds = %if.then75
  %48 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %49, 255
  %cmp83 = icmp eq i32 %and82, 9
  br i1 %cmp83, label %if.else97, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true80
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags85 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags85, align 4
  %and86 = and i32 %51, 255
  %cmp87 = icmp eq i32 %and86, 10
  br i1 %cmp87, label %if.else97, label %if.then89

if.then89:                                        ; preds = %lor.lhs.false, %if.then75
  %52 = load %struct.sv*, %struct.sv** %sv, align 8
  %53 = load i8, i8* %is_pp_rv2av, align 1
  %tobool90 = trunc i8 %53 to i1
  %54 = zext i1 %tobool90 to i64
  %cond92 = select i1 %tobool90, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @Perl_pp_rv2av.an_array, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Perl_pp_rv2av.a_hash, i64 0, i64 0)
  %55 = load i32, i32* %type, align 4
  %call93 = call %struct.gv* @Perl_softref2xv(%struct.sv* %52, i8* %cond92, i32 %55, %struct.sv*** %sp)
  store %struct.gv* %call93, %struct.gv** %gv, align 8
  %56 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool94 = icmp ne %struct.gv* %56, null
  br i1 %tobool94, label %if.end96, label %if.then95

if.then95:                                        ; preds = %if.then89
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %57, %struct.sv*** @PL_stack_sp, align 8
  %58 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 0
  %59 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %59, %struct.op** %retval, align 8
  br label %return

if.end96:                                         ; preds = %if.then89
  br label %if.end98

if.else97:                                        ; preds = %lor.lhs.false, %land.lhs.true80
  %60 = load %struct.sv*, %struct.sv** %sv, align 8
  %61 = bitcast %struct.sv* %60 to i8*
  %62 = bitcast i8* %61 to %struct.gv*
  store %struct.gv* %62, %struct.gv** %gv, align 8
  br label %if.end98

if.end98:                                         ; preds = %if.else97, %if.end96
  %63 = load i8, i8* %is_pp_rv2av, align 1
  %tobool99 = trunc i8 %63 to i1
  br i1 %tobool99, label %cond.true101, label %cond.false117

cond.true101:                                     ; preds = %if.end98
  %64 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u102 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u102 to %struct.gp**
  %65 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %65, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 6
  %66 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool103 = icmp ne %struct.av* %66, null
  br i1 %tobool103, label %cond.true104, label %cond.false109

cond.true104:                                     ; preds = %cond.true101
  %67 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u105 = getelementptr inbounds %struct.gv, %struct.gv* %67, i32 0, i32 3
  %svu_gp106 = bitcast %union.anon.4* %sv_u105 to %struct.gp**
  %68 = load %struct.gp*, %struct.gp** %svu_gp106, align 8
  %add.ptr107 = getelementptr inbounds %struct.gp, %struct.gp* %68, i64 0
  %gp_av108 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr107, i32 0, i32 6
  %69 = load %struct.av*, %struct.av** %gp_av108, align 8
  br label %cond.end115

cond.false109:                                    ; preds = %cond.true101
  %70 = load %struct.gv*, %struct.gv** %gv, align 8
  %call110 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %70, i32 11)
  %sv_u111 = getelementptr inbounds %struct.gv, %struct.gv* %call110, i32 0, i32 3
  %svu_gp112 = bitcast %union.anon.4* %sv_u111 to %struct.gp**
  %71 = load %struct.gp*, %struct.gp** %svu_gp112, align 8
  %add.ptr113 = getelementptr inbounds %struct.gp, %struct.gp* %71, i64 0
  %gp_av114 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr113, i32 0, i32 6
  %72 = load %struct.av*, %struct.av** %gp_av114, align 8
  br label %cond.end115

cond.end115:                                      ; preds = %cond.false109, %cond.true104
  %cond116 = phi %struct.av* [ %69, %cond.true104 ], [ %72, %cond.false109 ]
  %73 = bitcast %struct.av* %cond116 to i8*
  %74 = bitcast i8* %73 to %struct.sv*
  br label %cond.end135

cond.false117:                                    ; preds = %if.end98
  %75 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u118 = getelementptr inbounds %struct.gv, %struct.gv* %75, i32 0, i32 3
  %svu_gp119 = bitcast %union.anon.4* %sv_u118 to %struct.gp**
  %76 = load %struct.gp*, %struct.gp** %svu_gp119, align 8
  %add.ptr120 = getelementptr inbounds %struct.gp, %struct.gp* %76, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr120, i32 0, i32 5
  %77 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool121 = icmp ne %struct.hv* %77, null
  br i1 %tobool121, label %cond.true122, label %cond.false127

cond.true122:                                     ; preds = %cond.false117
  %78 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u123 = getelementptr inbounds %struct.gv, %struct.gv* %78, i32 0, i32 3
  %svu_gp124 = bitcast %union.anon.4* %sv_u123 to %struct.gp**
  %79 = load %struct.gp*, %struct.gp** %svu_gp124, align 8
  %add.ptr125 = getelementptr inbounds %struct.gp, %struct.gp* %79, i64 0
  %gp_hv126 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr125, i32 0, i32 5
  %80 = load %struct.hv*, %struct.hv** %gp_hv126, align 8
  br label %cond.end133

cond.false127:                                    ; preds = %cond.false117
  %81 = load %struct.gv*, %struct.gv** %gv, align 8
  %call128 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %81, i32 12)
  %sv_u129 = getelementptr inbounds %struct.gv, %struct.gv* %call128, i32 0, i32 3
  %svu_gp130 = bitcast %union.anon.4* %sv_u129 to %struct.gp**
  %82 = load %struct.gp*, %struct.gp** %svu_gp130, align 8
  %add.ptr131 = getelementptr inbounds %struct.gp, %struct.gp* %82, i64 0
  %gp_hv132 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr131, i32 0, i32 5
  %83 = load %struct.hv*, %struct.hv** %gp_hv132, align 8
  br label %cond.end133

cond.end133:                                      ; preds = %cond.false127, %cond.true122
  %cond134 = phi %struct.hv* [ %80, %cond.true122 ], [ %83, %cond.false127 ]
  %84 = bitcast %struct.hv* %cond134 to i8*
  %85 = bitcast i8* %84 to %struct.sv*
  br label %cond.end135

cond.end135:                                      ; preds = %cond.end133, %cond.end115
  %cond136 = phi %struct.sv* [ %74, %cond.end115 ], [ %85, %cond.end133 ]
  store %struct.sv* %cond136, %struct.sv** %sv, align 8
  %86 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private137 = getelementptr inbounds %struct.op, %struct.op* %86, i32 0, i32 6
  %87 = load i8, i8* %op_private137, align 1
  %conv138 = zext i8 %87 to i32
  %and139 = and i32 %conv138, 128
  %tobool140 = icmp ne i32 %and139, 0
  br i1 %tobool140, label %if.then141, label %if.end150

if.then141:                                       ; preds = %cond.end135
  %88 = load i8, i8* %is_pp_rv2av, align 1
  %tobool142 = trunc i8 %88 to i1
  br i1 %tobool142, label %cond.true144, label %cond.false146

cond.true144:                                     ; preds = %if.then141
  %89 = load %struct.gv*, %struct.gv** %gv, align 8
  %call145 = call %struct.av* @Perl_save_ary(%struct.gv* %89)
  %90 = bitcast %struct.av* %call145 to i8*
  %91 = bitcast i8* %90 to %struct.sv*
  br label %cond.end148

cond.false146:                                    ; preds = %if.then141
  %92 = load %struct.gv*, %struct.gv** %gv, align 8
  %call147 = call %struct.hv* @Perl_save_hash(%struct.gv* %92)
  %93 = bitcast %struct.hv* %call147 to i8*
  %94 = bitcast i8* %93 to %struct.sv*
  br label %cond.end148

cond.end148:                                      ; preds = %cond.false146, %cond.true144
  %cond149 = phi %struct.sv* [ %91, %cond.true144 ], [ %94, %cond.false146 ]
  store %struct.sv* %cond149, %struct.sv** %sv, align 8
  br label %if.end150

if.end150:                                        ; preds = %cond.end148, %cond.end135
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %cond.false74, %cond.true73
  br label %if.end152

if.end152:                                        ; preds = %if.end151, %if.end67
  %95 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags153 = getelementptr inbounds %struct.op, %struct.op* %95, i32 0, i32 5
  %96 = load i8, i8* %op_flags153, align 2
  %conv154 = zext i8 %96 to i32
  %and155 = and i32 %conv154, 16
  %tobool156 = icmp ne i32 %and155, 0
  br i1 %tobool156, label %if.then157, label %if.else159

if.then157:                                       ; preds = %if.end152
  %97 = load %struct.sv*, %struct.sv** %sv, align 8
  %98 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %97, %struct.sv** %98, align 8
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %99, %struct.sv*** @PL_stack_sp, align 8
  %100 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next158 = getelementptr inbounds %struct.op, %struct.op* %100, i32 0, i32 0
  %101 = load %struct.op*, %struct.op** %op_next158, align 8
  store %struct.op* %101, %struct.op** %retval, align 8
  br label %return

if.else159:                                       ; preds = %if.end152
  %102 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private160 = getelementptr inbounds %struct.op, %struct.op* %102, i32 0, i32 6
  %103 = load i8, i8* %op_private160, align 1
  %conv161 = zext i8 %103 to i32
  %and162 = and i32 %conv161, 8
  %tobool163 = icmp ne i32 %and162, 0
  br i1 %tobool163, label %cond.true164, label %cond.false165

cond.true164:                                     ; preds = %if.else159
  br i1 true, label %if.then166, label %if.end179

cond.false165:                                    ; preds = %if.else159
  br i1 false, label %if.then166, label %if.end179

if.then166:                                       ; preds = %cond.false165, %cond.true164
  %call167 = call i32 @Perl_is_lvalue_sub()
  store i32 %call167, i32* %flags, align 4
  %104 = load i32, i32* %flags, align 4
  %tobool168 = icmp ne i32 %104, 0
  br i1 %tobool168, label %land.lhs.true169, label %if.end178

land.lhs.true169:                                 ; preds = %if.then166
  %105 = load i32, i32* %flags, align 4
  %and170 = and i32 %105, 1
  %tobool171 = icmp ne i32 %and170, 0
  br i1 %tobool171, label %if.end178, label %if.then172

if.then172:                                       ; preds = %land.lhs.true169
  %106 = load i32, i32* %gimme, align 4
  %cmp173 = icmp ne i32 %106, 3
  br i1 %cmp173, label %if.then175, label %if.end176

if.then175:                                       ; preds = %if.then172
  br label %croak_cant_return

if.end176:                                        ; preds = %if.then172
  %107 = load %struct.sv*, %struct.sv** %sv, align 8
  %108 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %107, %struct.sv** %108, align 8
  %109 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %109, %struct.sv*** @PL_stack_sp, align 8
  %110 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next177 = getelementptr inbounds %struct.op, %struct.op* %110, i32 0, i32 0
  %111 = load %struct.op*, %struct.op** %op_next177, align 8
  store %struct.op* %111, %struct.op** %retval, align 8
  br label %return

if.end178:                                        ; preds = %land.lhs.true169, %if.then166
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %cond.false165, %cond.true164
  br label %if.end180

if.end180:                                        ; preds = %if.end179
  %112 = load i8, i8* %is_pp_rv2av, align 1
  %tobool181 = trunc i8 %112 to i1
  br i1 %tobool181, label %if.then182, label %if.else214

if.then182:                                       ; preds = %if.end180
  %113 = load %struct.sv*, %struct.sv** %sv, align 8
  %114 = bitcast %struct.sv* %113 to i8*
  %115 = bitcast i8* %114 to %struct.av*
  store %struct.av* %115, %struct.av** %av, align 8
  %116 = load i32, i32* %gimme, align 4
  %cmp183 = icmp eq i32 %116, 3
  br i1 %cmp183, label %if.then185, label %if.else186

if.then185:                                       ; preds = %if.then182
  %117 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %117, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %118 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %118, %struct.sv*** @PL_stack_sp, align 8
  %119 = load %struct.av*, %struct.av** %av, align 8
  call void @S_pushav(%struct.av* %119)
  %120 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %120, %struct.sv*** %sp, align 8
  br label %if.end213

if.else186:                                       ; preds = %if.then182
  %121 = load i32, i32* %gimme, align 4
  %cmp187 = icmp eq i32 %121, 2
  br i1 %cmp187, label %if.then189, label %if.end212

if.then189:                                       ; preds = %if.else186
  %122 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %123 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %123, i32 0, i32 3
  %124 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %122, i64 %124
  %125 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %125, %struct.sv** %targ, align 8
  %126 = load %struct.av*, %struct.av** %av, align 8
  %127 = bitcast %struct.av* %126 to %struct.sv*
  %sv_flags190 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 2
  %128 = load i32, i32* %sv_flags190, align 4
  %and191 = and i32 %128, 8388608
  %tobool192 = icmp ne i32 %and191, 0
  br i1 %tobool192, label %cond.true193, label %cond.false196

cond.true193:                                     ; preds = %if.then189
  %129 = load %struct.av*, %struct.av** %av, align 8
  %130 = bitcast %struct.av* %129 to i8*
  %131 = bitcast i8* %130 to %struct.sv*
  %call194 = call i32 @Perl_mg_size(%struct.sv* %131)
  %conv195 = sext i32 %call194 to i64
  br label %cond.end198

cond.false196:                                    ; preds = %if.then189
  %132 = load %struct.av*, %struct.av** %av, align 8
  %sv_any197 = getelementptr inbounds %struct.av, %struct.av* %132, i32 0, i32 0
  %133 = load %struct.xpvav*, %struct.xpvav** %sv_any197, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %133, i32 0, i32 2
  %134 = load i64, i64* %xav_fill, align 8
  br label %cond.end198

cond.end198:                                      ; preds = %cond.false196, %cond.true193
  %cond199 = phi i64 [ %conv195, %cond.true193 ], [ %134, %cond.false196 ]
  %add = add nsw i64 %cond199, 1
  store i64 %add, i64* %maxarg, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end198
  %135 = load %struct.sv*, %struct.sv** %targ, align 8
  %136 = load i64, i64* %maxarg, align 8
  call void @Perl_sv_setiv(%struct.sv* %135, i64 %136)
  br label %do.body200

do.body200:                                       ; preds = %do.body
  br label %do.body201

do.body201:                                       ; preds = %do.body200
  %137 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags202 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 2
  %138 = load i32, i32* %sv_flags202, align 4
  %and203 = and i32 %138, 4194304
  %tobool204 = icmp ne i32 %and203, 0
  br i1 %tobool204, label %cond.true205, label %cond.false206

cond.true205:                                     ; preds = %do.body201
  br i1 true, label %if.then207, label %if.end209

cond.false206:                                    ; preds = %do.body201
  br i1 false, label %if.then207, label %if.end209

if.then207:                                       ; preds = %cond.false206, %cond.true205
  %139 = load %struct.sv*, %struct.sv** %targ, align 8
  %call208 = call i32 @Perl_mg_set(%struct.sv* %139)
  br label %if.end209

if.end209:                                        ; preds = %if.then207, %cond.false206, %cond.true205
  br label %do.end

do.end:                                           ; preds = %if.end209
  %140 = load %struct.sv*, %struct.sv** %targ, align 8
  %141 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %140, %struct.sv** %141, align 8
  br label %do.end210

do.end210:                                        ; preds = %do.end
  br label %do.end211

do.end211:                                        ; preds = %do.end210
  br label %if.end212

if.end212:                                        ; preds = %do.end211, %if.else186
  br label %if.end213

if.end213:                                        ; preds = %if.end212, %if.then185
  br label %if.end278

if.else214:                                       ; preds = %if.end180
  %142 = load i32, i32* %gimme, align 4
  %cmp215 = icmp eq i32 %142, 3
  br i1 %cmp215, label %if.then217, label %if.else219

if.then217:                                       ; preds = %if.else214
  %143 = load %struct.sv*, %struct.sv** %sv, align 8
  %144 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv* %143, %struct.sv** %144, align 8
  %call218 = call %struct.op* @Perl_do_kv()
  store %struct.op* %call218, %struct.op** %retval, align 8
  br label %return

if.else219:                                       ; preds = %if.else214
  %145 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private220 = getelementptr inbounds %struct.op, %struct.op* %145, i32 0, i32 6
  %146 = load i8, i8* %op_private220, align 1
  %conv221 = zext i8 %146 to i32
  %and222 = and i32 %conv221, 32
  %tobool223 = icmp ne i32 %and222, 0
  br i1 %tobool223, label %land.lhs.true233, label %lor.lhs.false224

lor.lhs.false224:                                 ; preds = %if.else219
  %147 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private225 = getelementptr inbounds %struct.op, %struct.op* %147, i32 0, i32 6
  %148 = load i8, i8* %op_private225, align 1
  %conv226 = zext i8 %148 to i32
  %and227 = and i32 %conv226, 16
  %tobool228 = icmp ne i32 %and227, 0
  br i1 %tobool228, label %land.lhs.true229, label %if.else257

land.lhs.true229:                                 ; preds = %lor.lhs.false224
  %call230 = call i32 @Perl_block_gimme()
  %cmp231 = icmp eq i32 %call230, 1
  br i1 %cmp231, label %land.lhs.true233, label %if.else257

land.lhs.true233:                                 ; preds = %land.lhs.true229, %if.else219
  %149 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags234 = getelementptr inbounds %struct.sv, %struct.sv* %149, i32 0, i32 2
  %150 = load i32, i32* %sv_flags234, align 4
  %and235 = and i32 %150, 8388608
  %tobool236 = icmp ne i32 %and235, 0
  br i1 %tobool236, label %lor.lhs.false237, label %if.then240

lor.lhs.false237:                                 ; preds = %land.lhs.true233
  %151 = load %struct.sv*, %struct.sv** %sv, align 8
  %call238 = call %struct.magic* @Perl_mg_find(%struct.sv* %151, i32 80)
  %tobool239 = icmp ne %struct.magic* %call238, null
  br i1 %tobool239, label %if.else257, label %if.then240

if.then240:                                       ; preds = %lor.lhs.false237, %land.lhs.true233
  %152 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any241 = getelementptr inbounds %struct.sv, %struct.sv* %152, i32 0, i32 0
  %153 = load i8*, i8** %sv_any241, align 8
  %154 = bitcast i8* %153 to %struct.xpvhv*
  %xhv_keys = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %154, i32 0, i32 2
  %155 = load i64, i64* %xhv_keys, align 8
  %156 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any242 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 0
  %157 = load i8*, i8** %sv_any242, align 8
  %158 = bitcast i8* %157 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %158, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %159 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool243 = icmp ne %struct.magic* %159, null
  br i1 %tobool243, label %cond.true244, label %cond.false246

cond.true244:                                     ; preds = %if.then240
  %160 = load %struct.sv*, %struct.sv** %sv, align 8
  %161 = bitcast %struct.sv* %160 to %struct.hv*
  %call245 = call i32 @Perl_hv_placeholders_get(%struct.hv* %161)
  br label %cond.end247

cond.false246:                                    ; preds = %if.then240
  br label %cond.end247

cond.end247:                                      ; preds = %cond.false246, %cond.true244
  %cond248 = phi i32 [ %call245, %cond.true244 ], [ 0, %cond.false246 ]
  %conv249 = sext i32 %cond248 to i64
  %sub = sub i64 %155, %conv249
  %tobool250 = icmp ne i64 %sub, 0
  br i1 %tobool250, label %cond.true251, label %cond.false252

cond.true251:                                     ; preds = %cond.end247
  br label %cond.end255

cond.false252:                                    ; preds = %cond.end247
  %call253 = call %struct.sv* @Perl_newSViv(i64 0)
  %call254 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call253)
  br label %cond.end255

cond.end255:                                      ; preds = %cond.false252, %cond.true251
  %cond256 = phi %struct.sv* [ @PL_sv_yes, %cond.true251 ], [ %call254, %cond.false252 ]
  %162 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond256, %struct.sv** %162, align 8
  br label %if.end276

if.else257:                                       ; preds = %lor.lhs.false237, %land.lhs.true229, %lor.lhs.false224
  %163 = load i32, i32* %gimme, align 4
  %cmp258 = icmp eq i32 %163, 2
  br i1 %cmp258, label %if.then260, label %if.end275

if.then260:                                       ; preds = %if.else257
  %164 = load %struct.sv*, %struct.sv** %sv, align 8
  %165 = bitcast %struct.sv* %164 to i8*
  %166 = bitcast i8* %165 to %struct.hv*
  %call262 = call %struct.sv* @Perl_hv_scalar(%struct.hv* %166)
  store %struct.sv* %call262, %struct.sv** %targ261, align 8
  br label %do.body263

do.body263:                                       ; preds = %if.then260
  br label %do.body264

do.body264:                                       ; preds = %do.body263
  %167 = load %struct.sv*, %struct.sv** %targ261, align 8
  %sv_flags265 = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 2
  %168 = load i32, i32* %sv_flags265, align 4
  %and266 = and i32 %168, 4194304
  %tobool267 = icmp ne i32 %and266, 0
  br i1 %tobool267, label %cond.true268, label %cond.false269

cond.true268:                                     ; preds = %do.body264
  br i1 true, label %if.then270, label %if.end272

cond.false269:                                    ; preds = %do.body264
  br i1 false, label %if.then270, label %if.end272

if.then270:                                       ; preds = %cond.false269, %cond.true268
  %169 = load %struct.sv*, %struct.sv** %targ261, align 8
  %call271 = call i32 @Perl_mg_set(%struct.sv* %169)
  br label %if.end272

if.end272:                                        ; preds = %if.then270, %cond.false269, %cond.true268
  br label %do.end273

do.end273:                                        ; preds = %if.end272
  %170 = load %struct.sv*, %struct.sv** %targ261, align 8
  %171 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %170, %struct.sv** %171, align 8
  br label %do.end274

do.end274:                                        ; preds = %do.end273
  br label %if.end275

if.end275:                                        ; preds = %do.end274, %if.else257
  br label %if.end276

if.end276:                                        ; preds = %if.end275, %cond.end255
  br label %if.end277

if.end277:                                        ; preds = %if.end276
  br label %if.end278

if.end278:                                        ; preds = %if.end277, %if.end213
  %172 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %172, %struct.sv*** @PL_stack_sp, align 8
  %173 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next279 = getelementptr inbounds %struct.op, %struct.op* %173, i32 0, i32 0
  %174 = load %struct.op*, %struct.op** %op_next279, align 8
  store %struct.op* %174, %struct.op** %retval, align 8
  br label %return

croak_cant_return:                                ; preds = %if.then175
  %175 = load i8, i8* %is_pp_rv2av, align 1
  %tobool280 = trunc i8 %175 to i1
  %176 = zext i1 %tobool280 to i64
  %cond282 = select i1 %tobool280, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0)
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6, i64 0, i64 0), i8* %cond282)
  %177 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %177, %struct.sv*** @PL_stack_sp, align 8
  %178 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next283 = getelementptr inbounds %struct.op, %struct.op* %178, i32 0, i32 0
  %179 = load %struct.op*, %struct.op** %op_next283, align 8
  store %struct.op* %179, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %croak_cant_return, %if.end278, %if.then217, %if.end176, %if.then157, %if.then95, %if.then50
  %180 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %180
}

declare dso_local %struct.sv* @Perl_amagic_deref_call(%struct.sv*, i32) #1

declare dso_local void @Perl_croak(i8*, ...) #1

declare dso_local %struct.gv* @Perl_softref2xv(%struct.sv*, i8*, i32, %struct.sv***) #1

declare dso_local %struct.av* @Perl_save_ary(%struct.gv*) #1

declare dso_local %struct.hv* @Perl_save_hash(%struct.gv*) #1

declare dso_local i32 @Perl_is_lvalue_sub() #1

declare dso_local i32 @Perl_mg_size(%struct.sv*) #1

declare dso_local %struct.op* @Perl_do_kv() #1

declare dso_local i32 @Perl_hv_placeholders_get(%struct.hv*) #1

declare dso_local %struct.sv* @Perl_sv_2mortal(%struct.sv*) #1

declare dso_local %struct.sv* @Perl_newSViv(i64) #1

declare dso_local %struct.sv* @Perl_hv_scalar(%struct.hv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_aassign() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %lastlelem = alloca %struct.sv**, align 8
  %lastrelem = alloca %struct.sv**, align 8
  %firstrelem = alloca %struct.sv**, align 8
  %firstlelem = alloca %struct.sv**, align 8
  %relem = alloca %struct.sv**, align 8
  %lelem = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %ary = alloca %struct.av*, align 8
  %gimme = alloca i32, align 4
  %hash = alloca %struct.hv*, align 8
  %i = alloca i64, align 8
  %magic = alloca i32, align 4
  %lval = alloca i32, align 4
  %eMiX = alloca i64, align 8
  %alias = alloca i8, align 1
  %didstore = alloca %struct.sv**, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %odd = alloca i32, align 4
  %duplicates = alloca i32, align 4
  %topelem = alloca %struct.sv**, align 8
  %firsthashrelem = alloca %struct.sv**, align 8
  %didstore233 = alloca %struct.he*, align 8
  %he = alloca %struct.he*, align 8
  %tmp_uid = alloca i32, align 4
  %tmp_euid = alloca i32, align 4
  %tmp_gid = alloca i32, align 4
  %tmp_egid = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %1, %struct.sv*** %lastlelem, align 8
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %3 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %3, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %4 = load i32, i32* %3, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %2, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %lastrelem, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %6 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr1 = getelementptr inbounds i32, i32* %6, i32 -1
  store i32* %incdec.ptr1, i32** @PL_markstack_ptr, align 8
  %7 = load i32, i32* %6, align 4
  %idx.ext2 = sext i32 %7 to i64
  %add.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %idx.ext2
  %add.ptr4 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr3, i64 1
  store %struct.sv** %add.ptr4, %struct.sv*** %firstrelem, align 8
  %8 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %add.ptr5 = getelementptr inbounds %struct.sv*, %struct.sv** %8, i64 1
  store %struct.sv** %add.ptr5, %struct.sv*** %firstlelem, align 8
  store i32 0, i32* %lval, align 4
  store i16 256, i16* @PL_delaymagic, align 2
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 5
  %10 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %10 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags6 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 5
  %12 = load i8, i8* %op_flags6, align 2
  %conv7 = zext i8 %12 to i32
  %and8 = and i32 %conv7, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and8, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %gimme, align 4
  %13 = load i32, i32* %gimme, align 4
  %cmp = icmp eq i32 %13, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags10 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 5
  %15 = load i8, i8* %op_flags10, align 2
  %conv11 = zext i8 %15 to i32
  %and12 = and i32 %conv11, 32
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 6
  %17 = load i8, i8* %op_private, align 1
  %conv14 = zext i8 %17 to i32
  %and15 = and i32 %conv14, 8
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %call17 = call i32 @Perl_is_lvalue_sub()
  %tobool18 = icmp ne i32 %call17, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %18 = phi i1 [ false, %lor.rhs ], [ %tobool18, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %if.then
  %19 = phi i1 [ true, %if.then ], [ %18, %land.end ]
  %lor.ext = zext i1 %19 to i32
  store i32 %lor.ext, i32* %lval, align 4
  br label %if.end

if.end:                                           ; preds = %lor.end, %cond.end
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private19 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 6
  %21 = load i8, i8* %op_private19, align 1
  %conv20 = zext i8 %21 to i32
  %and21 = and i32 %conv20, 64
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %22 = load i8, i8* @PL_sawalias, align 1
  %tobool23 = trunc i8 %22 to i1
  br i1 %tobool23, label %land.lhs.true, label %if.end103

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end
  %23 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  %24 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %cmp25 = icmp ne %struct.sv** %23, %24
  br i1 %cmp25, label %if.then76, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %land.lhs.true
  %25 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  store %struct.sv* %26, %struct.sv** %sv, align 8
  %tobool28 = icmp ne %struct.sv* %26, null
  br i1 %tobool28, label %lor.lhs.false29, label %if.then76

lor.lhs.false29:                                  ; preds = %lor.lhs.false27
  %27 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags, align 4
  %and30 = and i32 %28, 14680064
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.then76, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %lor.lhs.false29
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %30, 255
  %cmp35 = icmp eq i32 %and34, 11
  br i1 %cmp35, label %lor.lhs.false42, label %lor.lhs.false37

lor.lhs.false37:                                  ; preds = %lor.lhs.false32
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %32, 255
  %cmp40 = icmp eq i32 %and39, 12
  br i1 %cmp40, label %lor.lhs.false42, label %if.then76

lor.lhs.false42:                                  ; preds = %lor.lhs.false37, %lor.lhs.false32
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %34, 255
  %cmp45 = icmp eq i32 %and44, 11
  br i1 %cmp45, label %land.lhs.true47, label %lor.lhs.false59

land.lhs.true47:                                  ; preds = %lor.lhs.false42
  %35 = load %struct.sv*, %struct.sv** %sv, align 8
  %36 = bitcast %struct.sv* %35 to %struct.av*
  %37 = bitcast %struct.av* %36 to %struct.sv*
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %38, 8388608
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %cond.true51, label %cond.false54

cond.true51:                                      ; preds = %land.lhs.true47
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %40 = bitcast %struct.sv* %39 to %struct.av*
  %41 = bitcast %struct.av* %40 to i8*
  %42 = bitcast i8* %41 to %struct.sv*
  %call52 = call i32 @Perl_mg_size(%struct.sv* %42)
  %conv53 = sext i32 %call52 to i64
  br label %cond.end55

cond.false54:                                     ; preds = %land.lhs.true47
  %43 = load %struct.sv*, %struct.sv** %sv, align 8
  %44 = bitcast %struct.sv* %43 to %struct.av*
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %44, i32 0, i32 0
  %45 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %45, i32 0, i32 2
  %46 = load i64, i64* %xav_fill, align 8
  br label %cond.end55

cond.end55:                                       ; preds = %cond.false54, %cond.true51
  %cond56 = phi i64 [ %conv53, %cond.true51 ], [ %46, %cond.false54 ]
  %cmp57 = icmp ne i64 %cond56, -1
  br i1 %cmp57, label %if.then76, label %lor.lhs.false59

lor.lhs.false59:                                  ; preds = %cond.end55, %lor.lhs.false42
  %47 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %48, 255
  %cmp62 = icmp eq i32 %and61, 12
  br i1 %cmp62, label %land.lhs.true64, label %if.end103

land.lhs.true64:                                  ; preds = %lor.lhs.false59
  %49 = load %struct.sv*, %struct.sv** %sv, align 8
  %50 = bitcast %struct.sv* %49 to %struct.hv*
  %sv_any65 = getelementptr inbounds %struct.hv, %struct.hv* %50, i32 0, i32 0
  %51 = load %struct.xpvhv*, %struct.xpvhv** %sv_any65, align 8
  %xhv_keys = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %51, i32 0, i32 2
  %52 = load i64, i64* %xhv_keys, align 8
  %53 = load %struct.sv*, %struct.sv** %sv, align 8
  %54 = bitcast %struct.sv* %53 to %struct.hv*
  %sv_any66 = getelementptr inbounds %struct.hv, %struct.hv* %54, i32 0, i32 0
  %55 = load %struct.xpvhv*, %struct.xpvhv** %sv_any66, align 8
  %56 = bitcast %struct.xpvhv* %55 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %56, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %57 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool67 = icmp ne %struct.magic* %57, null
  br i1 %tobool67, label %cond.true68, label %cond.false70

cond.true68:                                      ; preds = %land.lhs.true64
  %58 = load %struct.sv*, %struct.sv** %sv, align 8
  %59 = bitcast %struct.sv* %58 to %struct.hv*
  %call69 = call i32 @Perl_hv_placeholders_get(%struct.hv* %59)
  br label %cond.end71

cond.false70:                                     ; preds = %land.lhs.true64
  br label %cond.end71

cond.end71:                                       ; preds = %cond.false70, %cond.true68
  %cond72 = phi i32 [ %call69, %cond.true68 ], [ 0, %cond.false70 ]
  %conv73 = sext i32 %cond72 to i64
  %sub = sub i64 %52, %conv73
  %cmp74 = icmp ne i64 %sub, 0
  br i1 %cmp74, label %if.then76, label %if.end103

if.then76:                                        ; preds = %cond.end71, %cond.end55, %lor.lhs.false37, %lor.lhs.false29, %lor.lhs.false27, %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %if.then76
  %60 = load i64, i64* @PL_tmps_ix, align 8
  %61 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %62 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %61 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %62 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %add = add nsw i64 %sub.ptr.div, 1
  %add77 = add nsw i64 %60, %add
  store i64 %add77, i64* %eMiX, align 8
  %63 = load i64, i64* %eMiX, align 8
  %64 = load i64, i64* @PL_tmps_max, align 8
  %cmp78 = icmp sge i64 %63, %64
  br i1 %cmp78, label %cond.true80, label %cond.false81

cond.true80:                                      ; preds = %do.body
  br i1 true, label %if.then82, label %if.end84

cond.false81:                                     ; preds = %do.body
  br i1 false, label %if.then82, label %if.end84

if.then82:                                        ; preds = %cond.false81, %cond.true80
  %65 = load i64, i64* %eMiX, align 8
  %call83 = call i64 @Perl_tmps_grow_p(i64 %65)
  br label %if.end84

if.end84:                                         ; preds = %if.then82, %cond.false81, %cond.true80
  br label %do.end

do.end:                                           ; preds = %if.end84
  %66 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  store %struct.sv** %66, %struct.sv*** %relem, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %67 = load %struct.sv**, %struct.sv*** %relem, align 8
  %68 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %cmp85 = icmp ule %struct.sv** %67, %68
  br i1 %cmp85, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %69 = load %struct.sv**, %struct.sv*** %relem, align 8
  %70 = load %struct.sv*, %struct.sv** %69, align 8
  store %struct.sv* %70, %struct.sv** %sv, align 8
  %tobool87 = icmp ne %struct.sv* %70, null
  br i1 %tobool87, label %cond.true88, label %cond.false89

cond.true88:                                      ; preds = %for.body
  br i1 true, label %if.then90, label %if.end101

cond.false89:                                     ; preds = %for.body
  br i1 false, label %if.then90, label %if.end101

if.then90:                                        ; preds = %cond.false89, %cond.true88
  store i8 0, i8* @PL_tainted, align 1
  %71 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags91 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags91, align 4
  %cmp92 = icmp eq i32 %72, 255
  br i1 %cmp92, label %cond.true94, label %cond.false95

cond.true94:                                      ; preds = %if.then90
  br i1 true, label %cond.true96, label %cond.false97

cond.false95:                                     ; preds = %if.then90
  br i1 false, label %cond.true96, label %cond.false97

cond.true96:                                      ; preds = %cond.false95, %cond.true94
  br i1 true, label %if.then98, label %if.end99

cond.false97:                                     ; preds = %cond.false95, %cond.true94
  br i1 false, label %if.then98, label %if.end99

if.then98:                                        ; preds = %cond.false97, %cond.true96
  %73 = load %struct.sv*, %struct.sv** %sv, align 8
  %74 = bitcast %struct.sv* %73 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i8* %74)
  br label %if.end99

if.end99:                                         ; preds = %if.then98, %cond.false97, %cond.true96
  %75 = load %struct.sv*, %struct.sv** %sv, align 8
  %call100 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %75, i32 1554)
  %76 = load %struct.sv**, %struct.sv*** %relem, align 8
  store %struct.sv* %call100, %struct.sv** %76, align 8
  br label %if.end101

if.end101:                                        ; preds = %if.end99, %cond.false89, %cond.true88
  br label %for.inc

for.inc:                                          ; preds = %if.end101
  %77 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr102 = getelementptr inbounds %struct.sv*, %struct.sv** %77, i32 1
  store %struct.sv** %incdec.ptr102, %struct.sv*** %relem, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end103

if.end103:                                        ; preds = %for.end, %cond.end71, %lor.lhs.false59, %lor.lhs.false
  %78 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  store %struct.sv** %78, %struct.sv*** %relem, align 8
  %79 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  store %struct.sv** %79, %struct.sv*** %lelem, align 8
  store %struct.av* null, %struct.av** %ary, align 8
  store %struct.hv* null, %struct.hv** %hash, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end103
  %80 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %81 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %cmp104 = icmp ule %struct.sv** %80, %81
  %82 = zext i1 %cmp104 to i64
  %cond106 = select i1 %cmp104, i32 1, i32 0
  %tobool107 = icmp ne i32 %cond106, 0
  br i1 %tobool107, label %while.body, label %while.end395

while.body:                                       ; preds = %while.cond
  store i8 0, i8* %alias, align 1
  store i8 0, i8* @PL_tainted, align 1
  %83 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %incdec.ptr108 = getelementptr inbounds %struct.sv*, %struct.sv** %83, i32 1
  store %struct.sv** %incdec.ptr108, %struct.sv*** %lelem, align 8
  %84 = load %struct.sv*, %struct.sv** %83, align 8
  store %struct.sv* %84, %struct.sv** %sv, align 8
  %85 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool109 = icmp ne %struct.sv* %85, null
  br i1 %tobool109, label %cond.false111, label %cond.true110

cond.true110:                                     ; preds = %while.body
  br i1 true, label %if.then112, label %if.end114

cond.false111:                                    ; preds = %while.body
  br i1 false, label %if.then112, label %if.end114

if.then112:                                       ; preds = %cond.false111, %cond.true110
  store i8 1, i8* %alias, align 1
  %86 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %incdec.ptr113 = getelementptr inbounds %struct.sv*, %struct.sv** %86, i32 1
  store %struct.sv** %incdec.ptr113, %struct.sv*** %lelem, align 8
  %87 = load %struct.sv*, %struct.sv** %86, align 8
  store %struct.sv* %87, %struct.sv** %sv, align 8
  br label %if.end114

if.end114:                                        ; preds = %if.then112, %cond.false111, %cond.true110
  %88 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %89, 255
  switch i32 %and116, label %sw.default [
    i32 11, label %sw.bb
    i32 12, label %sw.bb205
  ]

sw.bb:                                            ; preds = %if.end114
  %90 = load %struct.sv*, %struct.sv** %sv, align 8
  %91 = bitcast %struct.sv* %90 to i8*
  %92 = bitcast i8* %91 to %struct.av*
  store %struct.av* %92, %struct.av** %ary, align 8
  %93 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags117 = getelementptr inbounds %struct.av, %struct.av* %93, i32 0, i32 2
  %94 = load i32, i32* %sv_flags117, align 4
  %and118 = and i32 %94, 14680064
  %cmp119 = icmp ne i32 %and118, 0
  %conv120 = zext i1 %cmp119 to i32
  store i32 %conv120, i32* %magic, align 4
  call void @Perl_push_scope()
  %95 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 1
  %96 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %96, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %97 = load %struct.sv*, %struct.sv** %sv, align 8
  %98 = bitcast %struct.sv* %97 to i8*
  %99 = bitcast i8* %98 to %struct.sv*
  %100 = bitcast %struct.sv* %99 to i8*
  %101 = bitcast i8* %100 to %struct.sv*
  %102 = bitcast %struct.sv* %101 to i8*
  call void @Perl_save_pushptr(i8* %102, i32 11)
  %103 = load %struct.av*, %struct.av** %ary, align 8
  call void @Perl_av_clear(%struct.av* %103)
  %104 = load %struct.av*, %struct.av** %ary, align 8
  %105 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %106 = load %struct.sv**, %struct.sv*** %relem, align 8
  %sub.ptr.lhs.cast121 = ptrtoint %struct.sv** %105 to i64
  %sub.ptr.rhs.cast122 = ptrtoint %struct.sv** %106 to i64
  %sub.ptr.sub123 = sub i64 %sub.ptr.lhs.cast121, %sub.ptr.rhs.cast122
  %sub.ptr.div124 = sdiv exact i64 %sub.ptr.sub123, 8
  call void @Perl_av_extend(%struct.av* %104, i64 %sub.ptr.div124)
  store i64 0, i64* %i, align 8
  br label %while.cond125

while.cond125:                                    ; preds = %if.end187, %sw.bb
  %107 = load %struct.sv**, %struct.sv*** %relem, align 8
  %108 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %cmp126 = icmp ule %struct.sv** %107, %108
  br i1 %cmp126, label %while.body128, label %while.end

while.body128:                                    ; preds = %while.cond125
  %109 = load %struct.sv**, %struct.sv*** %relem, align 8
  %110 = load %struct.sv*, %struct.sv** %109, align 8
  %tobool129 = icmp ne %struct.sv* %110, null
  br i1 %tobool129, label %cond.true130, label %cond.false131

cond.true130:                                     ; preds = %while.body128
  br i1 true, label %if.then132, label %if.end142

cond.false131:                                    ; preds = %while.body128
  br i1 false, label %if.then132, label %if.end142

if.then132:                                       ; preds = %cond.false131, %cond.true130
  %111 = load %struct.sv**, %struct.sv*** %relem, align 8
  %112 = load %struct.sv*, %struct.sv** %111, align 8
  %sv_flags133 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags133, align 4
  %and134 = and i32 %113, 2097152
  %tobool135 = icmp ne i32 %and134, 0
  br i1 %tobool135, label %cond.true136, label %cond.false137

cond.true136:                                     ; preds = %if.then132
  br i1 true, label %land.rhs138, label %land.end141

cond.false137:                                    ; preds = %if.then132
  br i1 false, label %land.rhs138, label %land.end141

land.rhs138:                                      ; preds = %cond.false137, %cond.true136
  %114 = load %struct.sv**, %struct.sv*** %relem, align 8
  %115 = load %struct.sv*, %struct.sv** %114, align 8
  %call139 = call i32 @Perl_mg_get(%struct.sv* %115)
  %tobool140 = icmp ne i32 %call139, 0
  br label %land.end141

land.end141:                                      ; preds = %land.rhs138, %cond.false137, %cond.true136
  %116 = phi i1 [ false, %cond.false137 ], [ false, %cond.true136 ], [ %tobool140, %land.rhs138 ]
  %land.ext = zext i1 %116 to i32
  br label %if.end142

if.end142:                                        ; preds = %land.end141, %cond.false131, %cond.true130
  %117 = load i8, i8* %alias, align 1
  %tobool143 = trunc i8 %117 to i1
  br i1 %tobool143, label %cond.false145, label %cond.true144

cond.true144:                                     ; preds = %if.end142
  br i1 true, label %if.then146, label %if.else

cond.false145:                                    ; preds = %if.end142
  br i1 false, label %if.then146, label %if.else

if.then146:                                       ; preds = %cond.false145, %cond.true144
  %call147 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call147, %struct.sv** %sv, align 8
  %118 = load %struct.sv*, %struct.sv** %sv, align 8
  %119 = load %struct.sv**, %struct.sv*** %relem, align 8
  %120 = load %struct.sv*, %struct.sv** %119, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %118, %struct.sv* %120, i32 1536)
  %121 = load %struct.sv*, %struct.sv** %sv, align 8
  %122 = load %struct.sv**, %struct.sv*** %relem, align 8
  store %struct.sv* %121, %struct.sv** %122, align 8
  br label %if.end171

if.else:                                          ; preds = %cond.false145, %cond.true144
  %123 = load %struct.sv**, %struct.sv*** %relem, align 8
  %124 = load %struct.sv*, %struct.sv** %123, align 8
  %sv_flags148 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 2
  %125 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %125, 2048
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %if.end153, label %if.then151

if.then151:                                       ; preds = %if.else
  %call152 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.10, i64 0, i64 0))
  store %struct.op* %call152, %struct.op** %retval, align 8
  br label %return

if.end153:                                        ; preds = %if.else
  %126 = load %struct.sv**, %struct.sv*** %relem, align 8
  %127 = load %struct.sv*, %struct.sv** %126, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %128 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags154 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 2
  %129 = load i32, i32* %sv_flags154, align 4
  %and155 = and i32 %129, 255
  %cmp156 = icmp ugt i32 %and155, 10
  br i1 %cmp156, label %if.then158, label %if.end160

if.then158:                                       ; preds = %if.end153
  %call159 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.11, i64 0, i64 0))
  store %struct.op* %call159, %struct.op** %retval, align 8
  br label %return

if.end160:                                        ; preds = %if.end153
  %130 = load i32, i32* %lval, align 4
  %tobool161 = icmp ne i32 %130, 0
  br i1 %tobool161, label %if.then162, label %if.end164

if.then162:                                       ; preds = %if.end160
  %131 = load %struct.sv**, %struct.sv*** %relem, align 8
  %132 = load %struct.sv*, %struct.sv** %131, align 8
  %call163 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %132, i32 1538)
  %133 = load %struct.sv**, %struct.sv*** %relem, align 8
  store %struct.sv* %call163, %struct.sv** %133, align 8
  br label %if.end164

if.end164:                                        ; preds = %if.then162, %if.end160
  %134 = load %struct.sv**, %struct.sv*** %relem, align 8
  %135 = load %struct.sv*, %struct.sv** %134, align 8
  %sv_u165 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 3
  %svu_rv166 = bitcast %union.anon* %sv_u165 to %struct.sv**
  %136 = load %struct.sv*, %struct.sv** %svu_rv166, align 8
  %sv_refcnt167 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 1
  %137 = load i32, i32* %sv_refcnt167, align 8
  %inc168 = add i32 %137, 1
  store i32 %inc168, i32* %sv_refcnt167, align 8
  %138 = load %struct.sv**, %struct.sv*** %relem, align 8
  %139 = load %struct.sv*, %struct.sv** %138, align 8
  %sv_u169 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 3
  %svu_rv170 = bitcast %union.anon* %sv_u169 to %struct.sv**
  %140 = load %struct.sv*, %struct.sv** %svu_rv170, align 8
  %141 = bitcast %struct.sv* %140 to i8*
  %142 = bitcast i8* %141 to %struct.sv*
  store %struct.sv* %142, %struct.sv** %sv, align 8
  br label %if.end171

if.end171:                                        ; preds = %if.end164, %if.then146
  %143 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr172 = getelementptr inbounds %struct.sv*, %struct.sv** %143, i32 1
  store %struct.sv** %incdec.ptr172, %struct.sv*** %relem, align 8
  %144 = load %struct.av*, %struct.av** %ary, align 8
  %145 = load i64, i64* %i, align 8
  %inc173 = add nsw i64 %145, 1
  store i64 %inc173, i64* %i, align 8
  %146 = load %struct.sv*, %struct.sv** %sv, align 8
  %call174 = call %struct.sv** @Perl_av_store(%struct.av* %144, i64 %145, %struct.sv* %146)
  store %struct.sv** %call174, %struct.sv*** %didstore, align 8
  %147 = load i32, i32* %magic, align 4
  %tobool175 = icmp ne i32 %147, 0
  br i1 %tobool175, label %if.then176, label %if.end187

if.then176:                                       ; preds = %if.end171
  %148 = load %struct.sv**, %struct.sv*** %didstore, align 8
  %tobool177 = icmp ne %struct.sv** %148, null
  br i1 %tobool177, label %if.end180, label %if.then178

if.then178:                                       ; preds = %if.then176
  %149 = load %struct.sv*, %struct.sv** %sv, align 8
  %call179 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %149)
  br label %if.end180

if.end180:                                        ; preds = %if.then178, %if.then176
  %150 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags181 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 2
  %151 = load i32, i32* %sv_flags181, align 4
  %and182 = and i32 %151, 4194304
  %tobool183 = icmp ne i32 %and182, 0
  br i1 %tobool183, label %if.then184, label %if.end186

if.then184:                                       ; preds = %if.end180
  %152 = load %struct.sv*, %struct.sv** %sv, align 8
  %call185 = call i32 @Perl_mg_set(%struct.sv* %152)
  br label %if.end186

if.end186:                                        ; preds = %if.then184, %if.end180
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %if.end171
  store i8 0, i8* @PL_tainted, align 1
  br label %while.cond125

while.end:                                        ; preds = %while.cond125
  %153 = load i16, i16* @PL_delaymagic, align 2
  %conv188 = zext i16 %153 to i32
  %and189 = and i32 %conv188, 4
  %tobool190 = icmp ne i32 %and189, 0
  br i1 %tobool190, label %cond.true191, label %cond.false192

cond.true191:                                     ; preds = %while.end
  br i1 true, label %if.then193, label %if.end204

cond.false192:                                    ; preds = %while.end
  br i1 false, label %if.then193, label %if.end204

if.then193:                                       ; preds = %cond.false192, %cond.true191
  br label %do.body194

do.body194:                                       ; preds = %if.then193
  %154 = load %struct.av*, %struct.av** %ary, align 8
  %155 = bitcast %struct.av* %154 to i8*
  %156 = bitcast i8* %155 to %struct.sv*
  %sv_flags195 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 2
  %157 = load i32, i32* %sv_flags195, align 4
  %and196 = and i32 %157, 4194304
  %tobool197 = icmp ne i32 %and196, 0
  br i1 %tobool197, label %cond.true198, label %cond.false199

cond.true198:                                     ; preds = %do.body194
  br i1 true, label %if.then200, label %if.end202

cond.false199:                                    ; preds = %do.body194
  br i1 false, label %if.then200, label %if.end202

if.then200:                                       ; preds = %cond.false199, %cond.true198
  %158 = load %struct.av*, %struct.av** %ary, align 8
  %159 = bitcast %struct.av* %158 to i8*
  %160 = bitcast i8* %159 to %struct.sv*
  %call201 = call i32 @Perl_mg_set(%struct.sv* %160)
  br label %if.end202

if.end202:                                        ; preds = %if.then200, %cond.false199, %cond.true198
  br label %do.end203

do.end203:                                        ; preds = %if.end202
  br label %if.end204

if.end204:                                        ; preds = %do.end203, %cond.false192, %cond.true191
  call void @Perl_pop_scope()
  br label %sw.epilog

sw.bb205:                                         ; preds = %if.end114
  store i32 0, i32* %duplicates, align 4
  %161 = load %struct.sv**, %struct.sv*** %relem, align 8
  store %struct.sv** %161, %struct.sv*** %topelem, align 8
  %162 = load %struct.sv**, %struct.sv*** %relem, align 8
  store %struct.sv** %162, %struct.sv*** %firsthashrelem, align 8
  %163 = load %struct.sv*, %struct.sv** %sv, align 8
  %164 = bitcast %struct.sv* %163 to i8*
  %165 = bitcast i8* %164 to %struct.hv*
  store %struct.hv* %165, %struct.hv** %hash, align 8
  %166 = load %struct.hv*, %struct.hv** %hash, align 8
  %sv_flags206 = getelementptr inbounds %struct.hv, %struct.hv* %166, i32 0, i32 2
  %167 = load i32, i32* %sv_flags206, align 4
  %and207 = and i32 %167, 14680064
  %cmp208 = icmp ne i32 %and207, 0
  %conv209 = zext i1 %cmp208 to i32
  store i32 %conv209, i32* %magic, align 4
  %168 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %169 = load %struct.sv**, %struct.sv*** %firsthashrelem, align 8
  %sub.ptr.lhs.cast210 = ptrtoint %struct.sv** %168 to i64
  %sub.ptr.rhs.cast211 = ptrtoint %struct.sv** %169 to i64
  %sub.ptr.sub212 = sub i64 %sub.ptr.lhs.cast210, %sub.ptr.rhs.cast211
  %sub.ptr.div213 = sdiv exact i64 %sub.ptr.sub212, 8
  %and214 = and i64 %sub.ptr.div213, 1
  %tobool215 = icmp ne i64 %and214, 0
  %170 = zext i1 %tobool215 to i64
  %cond216 = select i1 %tobool215, i32 0, i32 1
  store i32 %cond216, i32* %odd, align 4
  %171 = load i32, i32* %odd, align 4
  %tobool217 = icmp ne i32 %171, 0
  br i1 %tobool217, label %cond.true218, label %cond.false219

cond.true218:                                     ; preds = %sw.bb205
  br i1 true, label %if.then220, label %if.end222

cond.false219:                                    ; preds = %sw.bb205
  br i1 false, label %if.then220, label %if.end222

if.then220:                                       ; preds = %cond.false219, %cond.true218
  %172 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %173 = load %struct.sv**, %struct.sv*** %firsthashrelem, align 8
  call void @S_do_oddball(%struct.sv** %172, %struct.sv** %173)
  %174 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %add.ptr221 = getelementptr inbounds %struct.sv*, %struct.sv** %174, i64 1
  store %struct.sv* @PL_sv_undef, %struct.sv** %add.ptr221, align 8
  br label %if.end222

if.end222:                                        ; preds = %if.then220, %cond.false219, %cond.true218
  call void @Perl_push_scope()
  %175 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt223 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 1
  %176 = load i32, i32* %sv_refcnt223, align 8
  %inc224 = add i32 %176, 1
  store i32 %inc224, i32* %sv_refcnt223, align 8
  %177 = load %struct.sv*, %struct.sv** %sv, align 8
  %178 = bitcast %struct.sv* %177 to i8*
  %179 = bitcast i8* %178 to %struct.sv*
  %180 = bitcast %struct.sv* %179 to i8*
  %181 = bitcast i8* %180 to %struct.sv*
  %182 = bitcast %struct.sv* %181 to i8*
  call void @Perl_save_pushptr(i8* %182, i32 11)
  %183 = load %struct.hv*, %struct.hv** %hash, align 8
  call void @Perl_hv_clear(%struct.hv* %183)
  br label %while.cond225

while.cond225:                                    ; preds = %if.end288, %if.end222
  %184 = load %struct.sv**, %struct.sv*** %relem, align 8
  %185 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %186 = load i32, i32* %odd, align 4
  %idx.ext226 = sext i32 %186 to i64
  %add.ptr227 = getelementptr inbounds %struct.sv*, %struct.sv** %185, i64 %idx.ext226
  %cmp228 = icmp ult %struct.sv** %184, %add.ptr227
  %187 = zext i1 %cmp228 to i64
  %cond230 = select i1 %cmp228, i32 1, i32 0
  %tobool231 = icmp ne i32 %cond230, 0
  br i1 %tobool231, label %while.body232, label %while.end289

while.body232:                                    ; preds = %while.cond225
  %188 = load i32, i32* %lval, align 4
  %tobool234 = icmp ne i32 %188, 0
  br i1 %tobool234, label %cond.true239, label %lor.lhs.false235

lor.lhs.false235:                                 ; preds = %while.body232
  %189 = load %struct.sv**, %struct.sv*** %relem, align 8
  %190 = load %struct.sv*, %struct.sv** %189, align 8
  %sv_flags236 = getelementptr inbounds %struct.sv, %struct.sv* %190, i32 0, i32 2
  %191 = load i32, i32* %sv_flags236, align 4
  %and237 = and i32 %191, 2097152
  %tobool238 = icmp ne i32 %and237, 0
  br i1 %tobool238, label %cond.true239, label %cond.false241

cond.true239:                                     ; preds = %lor.lhs.false235, %while.body232
  %192 = load %struct.sv**, %struct.sv*** %relem, align 8
  %193 = load %struct.sv*, %struct.sv** %192, align 8
  %call240 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %193, i32 1538)
  br label %cond.end242

cond.false241:                                    ; preds = %lor.lhs.false235
  %194 = load %struct.sv**, %struct.sv*** %relem, align 8
  %195 = load %struct.sv*, %struct.sv** %194, align 8
  br label %cond.end242

cond.end242:                                      ; preds = %cond.false241, %cond.true239
  %cond243 = phi %struct.sv* [ %call240, %cond.true239 ], [ %195, %cond.false241 ]
  store %struct.sv* %cond243, %struct.sv** %sv, align 8
  %196 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr244 = getelementptr inbounds %struct.sv*, %struct.sv** %196, i32 1
  store %struct.sv** %incdec.ptr244, %struct.sv*** %relem, align 8
  %197 = load %struct.sv**, %struct.sv*** %relem, align 8
  %198 = load %struct.sv*, %struct.sv** %197, align 8
  %sv_flags245 = getelementptr inbounds %struct.sv, %struct.sv* %198, i32 0, i32 2
  %199 = load i32, i32* %sv_flags245, align 4
  %and246 = and i32 %199, 2097152
  %tobool247 = icmp ne i32 %and246, 0
  br i1 %tobool247, label %cond.true248, label %cond.false249

cond.true248:                                     ; preds = %cond.end242
  br i1 true, label %land.rhs250, label %land.end253

cond.false249:                                    ; preds = %cond.end242
  br i1 false, label %land.rhs250, label %land.end253

land.rhs250:                                      ; preds = %cond.false249, %cond.true248
  %200 = load %struct.sv**, %struct.sv*** %relem, align 8
  %201 = load %struct.sv*, %struct.sv** %200, align 8
  %call251 = call i32 @Perl_mg_get(%struct.sv* %201)
  %tobool252 = icmp ne i32 %call251, 0
  br label %land.end253

land.end253:                                      ; preds = %land.rhs250, %cond.false249, %cond.true248
  %202 = phi i1 [ false, %cond.false249 ], [ false, %cond.true248 ], [ %tobool252, %land.rhs250 ]
  %land.ext254 = zext i1 %202 to i32
  %call255 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call255, %struct.sv** %tmpstr, align 8
  %203 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %204 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr256 = getelementptr inbounds %struct.sv*, %struct.sv** %204, i32 1
  store %struct.sv** %incdec.ptr256, %struct.sv*** %relem, align 8
  %205 = load %struct.sv*, %struct.sv** %204, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %203, %struct.sv* %205, i32 1536)
  %206 = load i32, i32* %gimme, align 4
  %cmp257 = icmp eq i32 %206, 3
  br i1 %cmp257, label %if.then259, label %if.end270

if.then259:                                       ; preds = %land.end253
  %207 = load %struct.hv*, %struct.hv** %hash, align 8
  %208 = load %struct.sv*, %struct.sv** %sv, align 8
  %call260 = call i8* @Perl_hv_common(%struct.hv* %207, %struct.sv* %208, i8* null, i64 0, i32 0, i32 8, %struct.sv* null, i32 0)
  %tobool261 = icmp ne i8* %call260, null
  br i1 %tobool261, label %cond.true262, label %cond.false263

cond.true262:                                     ; preds = %if.then259
  br i1 true, label %if.then264, label %if.else266

cond.false263:                                    ; preds = %if.then259
  br i1 false, label %if.then264, label %if.else266

if.then264:                                       ; preds = %cond.false263, %cond.true262
  %209 = load i32, i32* %duplicates, align 4
  %add265 = add nsw i32 %209, 2
  store i32 %add265, i32* %duplicates, align 4
  br label %if.end269

if.else266:                                       ; preds = %cond.false263, %cond.true262
  %210 = load %struct.sv*, %struct.sv** %sv, align 8
  %211 = load %struct.sv**, %struct.sv*** %topelem, align 8
  %incdec.ptr267 = getelementptr inbounds %struct.sv*, %struct.sv** %211, i32 1
  store %struct.sv** %incdec.ptr267, %struct.sv*** %topelem, align 8
  store %struct.sv* %210, %struct.sv** %211, align 8
  %212 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %213 = load %struct.sv**, %struct.sv*** %topelem, align 8
  %incdec.ptr268 = getelementptr inbounds %struct.sv*, %struct.sv** %213, i32 1
  store %struct.sv** %incdec.ptr268, %struct.sv*** %topelem, align 8
  store %struct.sv* %212, %struct.sv** %213, align 8
  br label %if.end269

if.end269:                                        ; preds = %if.else266, %if.then264
  br label %if.end270

if.end270:                                        ; preds = %if.end269, %land.end253
  %214 = load %struct.hv*, %struct.hv** %hash, align 8
  %215 = load %struct.sv*, %struct.sv** %sv, align 8
  %216 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call271 = call i8* @Perl_hv_common(%struct.hv* %214, %struct.sv* %215, i8* null, i64 0, i32 0, i32 4, %struct.sv* %216, i32 0)
  %217 = bitcast i8* %call271 to %struct.he*
  store %struct.he* %217, %struct.he** %didstore233, align 8
  %218 = load i32, i32* %magic, align 4
  %tobool272 = icmp ne i32 %218, 0
  br i1 %tobool272, label %if.then273, label %if.end288

if.then273:                                       ; preds = %if.end270
  %219 = load %struct.he*, %struct.he** %didstore233, align 8
  %tobool274 = icmp ne %struct.he* %219, null
  br i1 %tobool274, label %if.end277, label %if.then275

if.then275:                                       ; preds = %if.then273
  %220 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call276 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %220)
  br label %if.end277

if.end277:                                        ; preds = %if.then275, %if.then273
  br label %do.body278

do.body278:                                       ; preds = %if.end277
  %221 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags279 = getelementptr inbounds %struct.sv, %struct.sv* %221, i32 0, i32 2
  %222 = load i32, i32* %sv_flags279, align 4
  %and280 = and i32 %222, 4194304
  %tobool281 = icmp ne i32 %and280, 0
  br i1 %tobool281, label %cond.true282, label %cond.false283

cond.true282:                                     ; preds = %do.body278
  br i1 true, label %if.then284, label %if.end286

cond.false283:                                    ; preds = %do.body278
  br i1 false, label %if.then284, label %if.end286

if.then284:                                       ; preds = %cond.false283, %cond.true282
  %223 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call285 = call i32 @Perl_mg_set(%struct.sv* %223)
  br label %if.end286

if.end286:                                        ; preds = %if.then284, %cond.false283, %cond.true282
  br label %do.end287

do.end287:                                        ; preds = %if.end286
  br label %if.end288

if.end288:                                        ; preds = %do.end287, %if.end270
  store i8 0, i8* @PL_tainted, align 1
  br label %while.cond225

while.end289:                                     ; preds = %while.cond225
  call void @Perl_pop_scope()
  %224 = load i32, i32* %duplicates, align 4
  %tobool290 = icmp ne i32 %224, 0
  br i1 %tobool290, label %land.lhs.true291, label %if.end312

land.lhs.true291:                                 ; preds = %while.end289
  %225 = load i32, i32* %gimme, align 4
  %cmp292 = icmp eq i32 %225, 3
  br i1 %cmp292, label %if.then294, label %if.end312

if.then294:                                       ; preds = %land.lhs.true291
  %226 = load i32, i32* %duplicates, align 4
  %227 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %idx.ext295 = sext i32 %226 to i64
  %idx.neg = sub i64 0, %idx.ext295
  %add.ptr296 = getelementptr inbounds %struct.sv*, %struct.sv** %227, i64 %idx.neg
  store %struct.sv** %add.ptr296, %struct.sv*** %lastrelem, align 8
  %228 = load %struct.sv**, %struct.sv*** %firsthashrelem, align 8
  store %struct.sv** %228, %struct.sv*** %relem, align 8
  br label %while.cond297

while.cond297:                                    ; preds = %cond.end308, %if.then294
  %229 = load %struct.sv**, %struct.sv*** %relem, align 8
  %230 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %231 = load i32, i32* %odd, align 4
  %idx.ext298 = sext i32 %231 to i64
  %add.ptr299 = getelementptr inbounds %struct.sv*, %struct.sv** %230, i64 %idx.ext298
  %cmp300 = icmp ult %struct.sv** %229, %add.ptr299
  br i1 %cmp300, label %while.body302, label %while.end311

while.body302:                                    ; preds = %while.cond297
  %232 = load %struct.hv*, %struct.hv** %hash, align 8
  %233 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr303 = getelementptr inbounds %struct.sv*, %struct.sv** %233, i32 1
  store %struct.sv** %incdec.ptr303, %struct.sv*** %relem, align 8
  %234 = load %struct.sv*, %struct.sv** %233, align 8
  %call304 = call i8* @Perl_hv_common(%struct.hv* %232, %struct.sv* %234, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %235 = bitcast i8* %call304 to %struct.he*
  store %struct.he* %235, %struct.he** %he, align 8
  %236 = load %struct.he*, %struct.he** %he, align 8
  %tobool305 = icmp ne %struct.he* %236, null
  br i1 %tobool305, label %cond.true306, label %cond.false307

cond.true306:                                     ; preds = %while.body302
  %237 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %237, i32 0, i32 2
  %hent_val = bitcast %union.anon.1* %he_valu to %struct.sv**
  %238 = load %struct.sv*, %struct.sv** %hent_val, align 8
  br label %cond.end308

cond.false307:                                    ; preds = %while.body302
  br label %cond.end308

cond.end308:                                      ; preds = %cond.false307, %cond.true306
  %cond309 = phi %struct.sv* [ %238, %cond.true306 ], [ @PL_sv_undef, %cond.false307 ]
  %239 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr310 = getelementptr inbounds %struct.sv*, %struct.sv** %239, i32 1
  store %struct.sv** %incdec.ptr310, %struct.sv*** %relem, align 8
  store %struct.sv* %cond309, %struct.sv** %239, align 8
  br label %while.cond297

while.end311:                                     ; preds = %while.cond297
  br label %if.end312

if.end312:                                        ; preds = %while.end311, %land.lhs.true291, %while.end289
  %240 = load i32, i32* %odd, align 4
  %tobool313 = icmp ne i32 %240, 0
  br i1 %tobool313, label %land.lhs.true314, label %if.end319

land.lhs.true314:                                 ; preds = %if.end312
  %241 = load i32, i32* %gimme, align 4
  %cmp315 = icmp eq i32 %241, 3
  br i1 %cmp315, label %if.then317, label %if.end319

if.then317:                                       ; preds = %land.lhs.true314
  %242 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %incdec.ptr318 = getelementptr inbounds %struct.sv*, %struct.sv** %242, i32 1
  store %struct.sv** %incdec.ptr318, %struct.sv*** %lastrelem, align 8
  br label %if.end319

if.end319:                                        ; preds = %if.then317, %land.lhs.true314, %if.end312
  br label %sw.epilog

sw.default:                                       ; preds = %if.end114
  %243 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags320 = getelementptr inbounds %struct.sv, %struct.sv* %243, i32 0, i32 2
  %244 = load i32, i32* %sv_flags320, align 4
  %and321 = and i32 %244, 134283264
  %tobool322 = icmp ne i32 %and321, 0
  br i1 %tobool322, label %land.lhs.true323, label %if.end341

land.lhs.true323:                                 ; preds = %sw.default
  %245 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp324 = icmp eq %struct.sv* %245, @PL_sv_undef
  br i1 %cmp324, label %if.then335, label %lor.lhs.false326

lor.lhs.false326:                                 ; preds = %land.lhs.true323
  %246 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp327 = icmp eq %struct.sv* %246, @PL_sv_yes
  br i1 %cmp327, label %if.then335, label %lor.lhs.false329

lor.lhs.false329:                                 ; preds = %lor.lhs.false326
  %247 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp330 = icmp eq %struct.sv* %247, @PL_sv_no
  br i1 %cmp330, label %if.then335, label %lor.lhs.false332

lor.lhs.false332:                                 ; preds = %lor.lhs.false329
  %248 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp333 = icmp eq %struct.sv* %248, @PL_sv_placeholder
  br i1 %cmp333, label %if.then335, label %if.end341

if.then335:                                       ; preds = %lor.lhs.false332, %lor.lhs.false329, %lor.lhs.false326, %land.lhs.true323
  %249 = load %struct.sv**, %struct.sv*** %relem, align 8
  %250 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %cmp336 = icmp ule %struct.sv** %249, %250
  br i1 %cmp336, label %if.then338, label %if.end340

if.then338:                                       ; preds = %if.then335
  %251 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr339 = getelementptr inbounds %struct.sv*, %struct.sv** %251, i32 1
  store %struct.sv** %incdec.ptr339, %struct.sv*** %relem, align 8
  br label %if.end340

if.end340:                                        ; preds = %if.then338, %if.then335
  br label %sw.epilog

if.end341:                                        ; preds = %lor.lhs.false332, %sw.default
  %252 = load %struct.sv**, %struct.sv*** %relem, align 8
  %253 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %cmp342 = icmp ule %struct.sv** %252, %253
  br i1 %cmp342, label %if.then344, label %if.else383

if.then344:                                       ; preds = %if.end341
  %254 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags345 = getelementptr inbounds %struct.sv, %struct.sv* %254, i32 0, i32 2
  %255 = load i32, i32* %sv_flags345, align 4
  %and346 = and i32 %255, 524288
  %tobool347 = icmp ne i32 %and346, 0
  br i1 %tobool347, label %land.lhs.true348, label %cond.false379

land.lhs.true348:                                 ; preds = %if.then344
  %256 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags349 = getelementptr inbounds %struct.sv, %struct.sv* %256, i32 0, i32 2
  %257 = load i32, i32* %sv_flags349, align 4
  %and350 = and i32 %257, 4194304
  %tobool351 = icmp ne i32 %and350, 0
  br i1 %tobool351, label %cond.false379, label %land.lhs.true352

land.lhs.true352:                                 ; preds = %land.lhs.true348
  %258 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt353 = getelementptr inbounds %struct.sv, %struct.sv* %258, i32 0, i32 1
  %259 = load i32, i32* %sv_refcnt353, align 8
  %cmp354 = icmp eq i32 %259, 1
  br i1 %cmp354, label %land.lhs.true356, label %cond.false379

land.lhs.true356:                                 ; preds = %land.lhs.true352
  %260 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags357 = getelementptr inbounds %struct.sv, %struct.sv* %260, i32 0, i32 2
  %261 = load i32, i32* %sv_flags357, align 4
  %and358 = and i32 %261, 49152
  %cmp359 = icmp eq i32 %and358, 32768
  br i1 %cmp359, label %land.lhs.true361, label %land.lhs.true375

land.lhs.true361:                                 ; preds = %land.lhs.true356
  %262 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags362 = getelementptr inbounds %struct.sv, %struct.sv* %262, i32 0, i32 2
  %263 = load i32, i32* %sv_flags362, align 4
  %and363 = and i32 %263, 255
  %cmp364 = icmp eq i32 %and363, 9
  br i1 %cmp364, label %lor.lhs.false371, label %lor.lhs.false366

lor.lhs.false366:                                 ; preds = %land.lhs.true361
  %264 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags367 = getelementptr inbounds %struct.sv, %struct.sv* %264, i32 0, i32 2
  %265 = load i32, i32* %sv_flags367, align 4
  %and368 = and i32 %265, 255
  %cmp369 = icmp eq i32 %and368, 10
  br i1 %cmp369, label %lor.lhs.false371, label %land.lhs.true375

lor.lhs.false371:                                 ; preds = %lor.lhs.false366, %land.lhs.true361
  %266 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags372 = getelementptr inbounds %struct.sv, %struct.sv* %266, i32 0, i32 2
  %267 = load i32, i32* %sv_flags372, align 4
  %and373 = and i32 %267, 16777216
  %tobool374 = icmp ne i32 %and373, 0
  br i1 %tobool374, label %land.lhs.true375, label %cond.false379

land.lhs.true375:                                 ; preds = %lor.lhs.false371, %lor.lhs.false366, %land.lhs.true356
  %call376 = call zeroext i1 @Perl_ckwarn(i32 12)
  br i1 %call376, label %cond.true378, label %cond.false379

cond.true378:                                     ; preds = %land.lhs.true375
  br i1 true, label %if.then380, label %if.end381

cond.false379:                                    ; preds = %land.lhs.true375, %lor.lhs.false371, %land.lhs.true352, %land.lhs.true348, %if.then344
  br i1 false, label %if.then380, label %if.end381

if.then380:                                       ; preds = %cond.false379, %cond.true378
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0))
  br label %if.end381

if.end381:                                        ; preds = %if.then380, %cond.false379, %cond.true378
  %268 = load %struct.sv*, %struct.sv** %sv, align 8
  %269 = load %struct.sv**, %struct.sv*** %relem, align 8
  %270 = load %struct.sv*, %struct.sv** %269, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %268, %struct.sv* %270, i32 1538)
  %271 = load %struct.sv*, %struct.sv** %sv, align 8
  %272 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr382 = getelementptr inbounds %struct.sv*, %struct.sv** %272, i32 1
  store %struct.sv** %incdec.ptr382, %struct.sv*** %relem, align 8
  store %struct.sv* %271, %struct.sv** %272, align 8
  br label %if.end384

if.else383:                                       ; preds = %if.end341
  %273 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %273, %struct.sv* @PL_sv_undef, i32 1538)
  br label %if.end384

if.end384:                                        ; preds = %if.else383, %if.end381
  br label %do.body385

do.body385:                                       ; preds = %if.end384
  %274 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags386 = getelementptr inbounds %struct.sv, %struct.sv* %274, i32 0, i32 2
  %275 = load i32, i32* %sv_flags386, align 4
  %and387 = and i32 %275, 4194304
  %tobool388 = icmp ne i32 %and387, 0
  br i1 %tobool388, label %cond.true389, label %cond.false390

cond.true389:                                     ; preds = %do.body385
  br i1 true, label %if.then391, label %if.end393

cond.false390:                                    ; preds = %do.body385
  br i1 false, label %if.then391, label %if.end393

if.then391:                                       ; preds = %cond.false390, %cond.true389
  %276 = load %struct.sv*, %struct.sv** %sv, align 8
  %call392 = call i32 @Perl_mg_set(%struct.sv* %276)
  br label %if.end393

if.end393:                                        ; preds = %if.then391, %cond.false390, %cond.true389
  br label %do.end394

do.end394:                                        ; preds = %if.end393
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end394, %if.end340, %if.end319, %if.end204
  br label %while.cond

while.end395:                                     ; preds = %while.cond
  %277 = load i16, i16* @PL_delaymagic, align 2
  %conv396 = zext i16 %277 to i32
  %and397 = and i32 %conv396, -257
  %tobool398 = icmp ne i32 %and397, 0
  br i1 %tobool398, label %cond.true399, label %cond.false400

cond.true399:                                     ; preds = %while.end395
  br i1 true, label %if.then401, label %if.end456

cond.false400:                                    ; preds = %while.end395
  br i1 false, label %if.then401, label %if.end456

if.then401:                                       ; preds = %cond.false400, %cond.true399
  %call402 = call i32 @getuid() #7
  store i32 %call402, i32* %tmp_uid, align 4
  %call403 = call i32 @geteuid() #7
  store i32 %call403, i32* %tmp_euid, align 4
  %call404 = call i32 @getgid() #7
  store i32 %call404, i32* %tmp_gid, align 4
  %call405 = call i32 @getegid() #7
  store i32 %call405, i32* %tmp_egid, align 4
  %278 = load i16, i16* @PL_delaymagic, align 2
  %conv406 = zext i16 %278 to i32
  %and407 = and i32 %conv406, 3
  %tobool408 = icmp ne i32 %and407, 0
  br i1 %tobool408, label %if.then409, label %if.end423

if.then409:                                       ; preds = %if.then401
  %279 = load i16, i16* @PL_delaymagic, align 2
  %conv410 = zext i16 %279 to i32
  %and411 = and i32 %conv410, 3
  %tobool412 = icmp ne i32 %and411, 0
  br i1 %tobool412, label %if.then413, label %if.end420

if.then413:                                       ; preds = %if.then409
  %280 = load i32, i32* @PL_delaymagic_uid, align 4
  %281 = load i32, i32* @PL_delaymagic_euid, align 4
  %cmp414 = icmp ne i32 %280, %281
  br i1 %cmp414, label %if.then416, label %if.end418

if.then416:                                       ; preds = %if.then413
  %call417 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0))
  store %struct.op* %call417, %struct.op** %retval, align 8
  br label %return

if.end418:                                        ; preds = %if.then413
  %282 = load i32, i32* @PL_delaymagic_uid, align 4
  %call419 = call i32 @setuid(i32 %282) #7
  br label %if.end420

if.end420:                                        ; preds = %if.end418, %if.then409
  %call421 = call i32 @getuid() #7
  store i32 %call421, i32* %tmp_uid, align 4
  %call422 = call i32 @geteuid() #7
  store i32 %call422, i32* %tmp_euid, align 4
  br label %if.end423

if.end423:                                        ; preds = %if.end420, %if.then401
  %283 = load i16, i16* @PL_delaymagic, align 2
  %conv424 = zext i16 %283 to i32
  %and425 = and i32 %conv424, 48
  %tobool426 = icmp ne i32 %and425, 0
  br i1 %tobool426, label %if.then427, label %if.end441

if.then427:                                       ; preds = %if.end423
  %284 = load i16, i16* @PL_delaymagic, align 2
  %conv428 = zext i16 %284 to i32
  %and429 = and i32 %conv428, 48
  %tobool430 = icmp ne i32 %and429, 0
  br i1 %tobool430, label %if.then431, label %if.end438

if.then431:                                       ; preds = %if.then427
  %285 = load i32, i32* @PL_delaymagic_gid, align 4
  %286 = load i32, i32* @PL_delaymagic_egid, align 4
  %cmp432 = icmp ne i32 %285, %286
  br i1 %cmp432, label %if.then434, label %if.end436

if.then434:                                       ; preds = %if.then431
  %call435 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0))
  store %struct.op* %call435, %struct.op** %retval, align 8
  br label %return

if.end436:                                        ; preds = %if.then431
  %287 = load i32, i32* @PL_delaymagic_gid, align 4
  %call437 = call i32 @setgid(i32 %287) #7
  br label %if.end438

if.end438:                                        ; preds = %if.end436, %if.then427
  %call439 = call i32 @getgid() #7
  store i32 %call439, i32* %tmp_gid, align 4
  %call440 = call i32 @getegid() #7
  store i32 %call440, i32* %tmp_egid, align 4
  br label %if.end441

if.end441:                                        ; preds = %if.end438, %if.end423
  %288 = load i8, i8* @PL_tainting, align 1
  %tobool442 = trunc i8 %288 to i1
  %conv443 = zext i1 %tobool442 to i32
  %289 = load i32, i32* %tmp_uid, align 4
  %tobool444 = icmp ne i32 %289, 0
  br i1 %tobool444, label %land.rhs445, label %land.end453

land.rhs445:                                      ; preds = %if.end441
  %290 = load i32, i32* %tmp_euid, align 4
  %291 = load i32, i32* %tmp_uid, align 4
  %cmp446 = icmp ne i32 %290, %291
  br i1 %cmp446, label %lor.end451, label %lor.rhs448

lor.rhs448:                                       ; preds = %land.rhs445
  %292 = load i32, i32* %tmp_egid, align 4
  %293 = load i32, i32* %tmp_gid, align 4
  %cmp449 = icmp ne i32 %292, %293
  br label %lor.end451

lor.end451:                                       ; preds = %lor.rhs448, %land.rhs445
  %294 = phi i1 [ true, %land.rhs445 ], [ %cmp449, %lor.rhs448 ]
  br label %land.end453

land.end453:                                      ; preds = %lor.end451, %if.end441
  %295 = phi i1 [ false, %if.end441 ], [ %294, %lor.end451 ]
  %land.ext454 = zext i1 %295 to i32
  %or = or i32 %conv443, %land.ext454
  %tobool455 = icmp ne i32 %or, 0
  %frombool = zext i1 %tobool455 to i8
  store i8 %frombool, i8* @PL_tainting, align 1
  br label %if.end456

if.end456:                                        ; preds = %land.end453, %cond.false400, %cond.true399
  store i16 0, i16* @PL_delaymagic, align 2
  %296 = load i32, i32* %gimme, align 4
  %cmp457 = icmp eq i32 %296, 1
  br i1 %cmp457, label %if.then459, label %if.else461

if.then459:                                       ; preds = %if.end456
  %297 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %add.ptr460 = getelementptr inbounds %struct.sv*, %struct.sv** %297, i64 -1
  store %struct.sv** %add.ptr460, %struct.sv*** %sp, align 8
  br label %if.end515

if.else461:                                       ; preds = %if.end456
  %298 = load i32, i32* %gimme, align 4
  %cmp462 = icmp eq i32 %298, 2
  br i1 %cmp462, label %if.then464, label %if.else484

if.then464:                                       ; preds = %if.else461
  %299 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %300 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %300, i32 0, i32 3
  %301 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %299, i64 %301
  %302 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %302, %struct.sv** %targ, align 8
  %303 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  store %struct.sv** %303, %struct.sv*** %sp, align 8
  br label %do.body465

do.body465:                                       ; preds = %if.then464
  %304 = load %struct.sv*, %struct.sv** %targ, align 8
  %305 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %306 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %sub.ptr.lhs.cast466 = ptrtoint %struct.sv** %305 to i64
  %sub.ptr.rhs.cast467 = ptrtoint %struct.sv** %306 to i64
  %sub.ptr.sub468 = sub i64 %sub.ptr.lhs.cast466, %sub.ptr.rhs.cast467
  %sub.ptr.div469 = sdiv exact i64 %sub.ptr.sub468, 8
  %add470 = add nsw i64 %sub.ptr.div469, 1
  call void @Perl_sv_setiv(%struct.sv* %304, i64 %add470)
  br label %do.body471

do.body471:                                       ; preds = %do.body465
  br label %do.body472

do.body472:                                       ; preds = %do.body471
  %307 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags473 = getelementptr inbounds %struct.sv, %struct.sv* %307, i32 0, i32 2
  %308 = load i32, i32* %sv_flags473, align 4
  %and474 = and i32 %308, 4194304
  %tobool475 = icmp ne i32 %and474, 0
  br i1 %tobool475, label %cond.true476, label %cond.false477

cond.true476:                                     ; preds = %do.body472
  br i1 true, label %if.then478, label %if.end480

cond.false477:                                    ; preds = %do.body472
  br i1 false, label %if.then478, label %if.end480

if.then478:                                       ; preds = %cond.false477, %cond.true476
  %309 = load %struct.sv*, %struct.sv** %targ, align 8
  %call479 = call i32 @Perl_mg_set(%struct.sv* %309)
  br label %if.end480

if.end480:                                        ; preds = %if.then478, %cond.false477, %cond.true476
  br label %do.end481

do.end481:                                        ; preds = %if.end480
  %310 = load %struct.sv*, %struct.sv** %targ, align 8
  %311 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %310, %struct.sv** %311, align 8
  br label %do.end482

do.end482:                                        ; preds = %do.end481
  br label %do.end483

do.end483:                                        ; preds = %do.end482
  br label %if.end514

if.else484:                                       ; preds = %if.else461
  %312 = load %struct.av*, %struct.av** %ary, align 8
  %tobool485 = icmp ne %struct.av* %312, null
  br i1 %tobool485, label %if.then488, label %lor.lhs.false486

lor.lhs.false486:                                 ; preds = %if.else484
  %313 = load %struct.hv*, %struct.hv** %hash, align 8
  %tobool487 = icmp ne %struct.hv* %313, null
  br i1 %tobool487, label %if.then488, label %if.else489

if.then488:                                       ; preds = %lor.lhs.false486, %if.else484
  %314 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  store %struct.sv** %314, %struct.sv*** %sp, align 8
  br label %if.end513

if.else489:                                       ; preds = %lor.lhs.false486
  %315 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %316 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %317 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  %sub.ptr.lhs.cast490 = ptrtoint %struct.sv** %316 to i64
  %sub.ptr.rhs.cast491 = ptrtoint %struct.sv** %317 to i64
  %sub.ptr.sub492 = sub i64 %sub.ptr.lhs.cast490, %sub.ptr.rhs.cast491
  %sub.ptr.div493 = sdiv exact i64 %sub.ptr.sub492, 8
  %add.ptr494 = getelementptr inbounds %struct.sv*, %struct.sv** %315, i64 %sub.ptr.div493
  store %struct.sv** %add.ptr494, %struct.sv*** %sp, align 8
  %318 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  %319 = load %struct.sv**, %struct.sv*** %relem, align 8
  %320 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %sub.ptr.lhs.cast495 = ptrtoint %struct.sv** %319 to i64
  %sub.ptr.rhs.cast496 = ptrtoint %struct.sv** %320 to i64
  %sub.ptr.sub497 = sub i64 %sub.ptr.lhs.cast495, %sub.ptr.rhs.cast496
  %sub.ptr.div498 = sdiv exact i64 %sub.ptr.sub497, 8
  %add.ptr499 = getelementptr inbounds %struct.sv*, %struct.sv** %318, i64 %sub.ptr.div498
  store %struct.sv** %add.ptr499, %struct.sv*** %lelem, align 8
  br label %while.cond500

while.cond500:                                    ; preds = %cond.end509, %if.else489
  %321 = load %struct.sv**, %struct.sv*** %relem, align 8
  %322 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp501 = icmp ule %struct.sv** %321, %322
  br i1 %cmp501, label %while.body503, label %while.end512

while.body503:                                    ; preds = %while.cond500
  %323 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %324 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %cmp504 = icmp ule %struct.sv** %323, %324
  br i1 %cmp504, label %cond.true506, label %cond.false508

cond.true506:                                     ; preds = %while.body503
  %325 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %incdec.ptr507 = getelementptr inbounds %struct.sv*, %struct.sv** %325, i32 1
  store %struct.sv** %incdec.ptr507, %struct.sv*** %lelem, align 8
  %326 = load %struct.sv*, %struct.sv** %325, align 8
  br label %cond.end509

cond.false508:                                    ; preds = %while.body503
  br label %cond.end509

cond.end509:                                      ; preds = %cond.false508, %cond.true506
  %cond510 = phi %struct.sv* [ %326, %cond.true506 ], [ @PL_sv_undef, %cond.false508 ]
  %327 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr511 = getelementptr inbounds %struct.sv*, %struct.sv** %327, i32 1
  store %struct.sv** %incdec.ptr511, %struct.sv*** %relem, align 8
  store %struct.sv* %cond510, %struct.sv** %327, align 8
  br label %while.cond500

while.end512:                                     ; preds = %while.cond500
  br label %if.end513

if.end513:                                        ; preds = %while.end512, %if.then488
  br label %if.end514

if.end514:                                        ; preds = %if.end513, %do.end483
  br label %if.end515

if.end515:                                        ; preds = %if.end514, %if.then459
  %328 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %328, %struct.sv*** @PL_stack_sp, align 8
  %329 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %329, i32 0, i32 0
  %330 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %330, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end515, %if.then434, %if.then416, %if.then158, %if.then151
  %331 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %331
}

declare dso_local i64 @Perl_tmps_grow_p(i64) #1

declare dso_local %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv*, i32) #1

declare dso_local void @Perl_save_pushptr(i8*, i32) #1

declare dso_local void @Perl_av_clear(%struct.av*) #1

declare dso_local void @Perl_av_extend(%struct.av*, i64) #1

declare dso_local %struct.sv* @Perl_newSV(i64) #1

declare dso_local %struct.sv** @Perl_av_store(%struct.av*, i64, %struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_do_oddball(%struct.sv** %oddkey, %struct.sv** %firstkey) #0 {
entry:
  %oddkey.addr = alloca %struct.sv**, align 8
  %firstkey.addr = alloca %struct.sv**, align 8
  %err = alloca i8*, align 8
  store %struct.sv** %oddkey, %struct.sv*** %oddkey.addr, align 8
  store %struct.sv** %firstkey, %struct.sv*** %firstkey.addr, align 8
  %0 = load %struct.sv**, %struct.sv*** %oddkey.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %0, align 8
  %tobool = icmp ne %struct.sv* %1, null
  br i1 %tobool, label %if.then, label %if.end14

if.then:                                          ; preds = %entry
  %call = call zeroext i1 @Perl_ckwarn(i32 12)
  br i1 %call, label %if.then1, label %if.end13

if.then1:                                         ; preds = %if.then
  %2 = load %struct.sv**, %struct.sv*** %oddkey.addr, align 8
  %3 = load %struct.sv**, %struct.sv*** %firstkey.addr, align 8
  %cmp = icmp eq %struct.sv** %2, %3
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then1
  %4 = load %struct.sv**, %struct.sv*** %oddkey.addr, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %and = and i32 %6, 2048
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %land.lhs.true3, label %if.else

land.lhs.true3:                                   ; preds = %land.lhs.true
  %7 = load %struct.sv**, %struct.sv*** %oddkey.addr, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %9 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %10, 255
  %cmp6 = icmp eq i32 %and5, 11
  br i1 %cmp6, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true3
  %11 = load %struct.sv**, %struct.sv*** %oddkey.addr, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  %sv_u7 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 3
  %svu_rv8 = bitcast %union.anon* %sv_u7 to %struct.sv**
  %13 = load %struct.sv*, %struct.sv** %svu_rv8, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %14, 255
  %cmp11 = icmp eq i32 %and10, 12
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %lor.lhs.false, %land.lhs.true3
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.45, i64 0, i64 0), i8** %err, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false, %land.lhs.true, %if.then1
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.46, i64 0, i64 0), i8** %err, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then12
  %15 = load i8*, i8** %err, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %15)
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %entry
  ret void
}

declare dso_local void @Perl_hv_clear(%struct.hv*) #1

declare dso_local i8* @Perl_hv_common(%struct.hv*, %struct.sv*, i8*, i64, i32, i32, %struct.sv*, i32) #1

; Function Attrs: nounwind
declare dso_local i32 @getuid() #4

; Function Attrs: nounwind
declare dso_local i32 @geteuid() #4

; Function Attrs: nounwind
declare dso_local i32 @getgid() #4

; Function Attrs: nounwind
declare dso_local i32 @getegid() #4

; Function Attrs: nounwind
declare dso_local i32 @setuid(i32) #4

; Function Attrs: nounwind
declare dso_local i32 @setgid(i32) #4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_qr() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %pm = alloca %struct.pmop*, align 8
  %rx = alloca %struct.p5rx*, align 8
  %pkg = alloca %struct.sv*, align 8
  %rv = alloca %struct.sv*, align 8
  %cvp = alloca %struct.cv**, align 8
  %cv = alloca %struct.cv*, align 8
  %stash = alloca %struct.hv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.pmop*
  store %struct.pmop* %2, %struct.pmop** %pm, align 8
  %3 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %3, i32 0, i32 9
  %4 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp, align 8
  store %struct.p5rx* %4, %struct.p5rx** %rx, align 8
  %5 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %tobool = icmp ne %struct.p5rx* %5, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %6 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %6)
  %engine = getelementptr inbounds %struct.regexp, %struct.regexp* %call, i32 0, i32 4
  %7 = load %struct.regexp_engine*, %struct.regexp_engine** %engine, align 8
  %qr_package = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %7, i32 0, i32 10
  %8 = load %struct.sv* (%struct.p5rx*)*, %struct.sv* (%struct.p5rx*)** %qr_package, align 8
  %9 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1 = call %struct.sv* %8(%struct.p5rx* %9)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %call1, %cond.true ], [ null, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %pkg, align 8
  %call2 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call2, %struct.sv** %rv, align 8
  %10 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %and = and i32 %11, 255
  %cmp = icmp uge i32 %and, 1
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end
  %12 = load %struct.sv*, %struct.sv** %rv, align 8
  call void @Perl_sv_upgrade(%struct.sv* %12, i32 1)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end
  %13 = phi i1 [ true, %cond.end ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %13 to i32
  br label %do.body

do.body:                                          ; preds = %lor.end
  %14 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call3 = call %struct.p5rx* @Perl_reg_temp_copy(%struct.p5rx* null, %struct.p5rx* %14)
  %15 = bitcast %struct.p5rx* %call3 to i8*
  %16 = bitcast i8* %15 to %struct.sv*
  %17 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  store %struct.sv* %16, %struct.sv** %svu_rv, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %18 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags4, align 4
  %or = or i32 %19, 2048
  store i32 %or, i32* %sv_flags4, align 4
  %20 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_u5 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 3
  %svu_rv6 = bitcast %union.anon* %sv_u5 to %struct.sv**
  %21 = load %struct.sv*, %struct.sv** %svu_rv6, align 8
  %22 = bitcast %struct.sv* %21 to %struct.p5rx*
  %call7 = call %struct.regexp* @S_ReANY(%struct.p5rx* %22)
  %qr_anoncv = getelementptr inbounds %struct.regexp, %struct.regexp* %call7, i32 0, i32 25
  store %struct.cv** %qr_anoncv, %struct.cv*** %cvp, align 8
  %23 = load %struct.cv**, %struct.cv*** %cvp, align 8
  %24 = load %struct.cv*, %struct.cv** %23, align 8
  store %struct.cv* %24, %struct.cv** %cv, align 8
  %tobool8 = icmp ne %struct.cv* %24, null
  br i1 %tobool8, label %land.lhs.true, label %cond.false12

land.lhs.true:                                    ; preds = %do.end
  %25 = load %struct.cv**, %struct.cv*** %cvp, align 8
  %26 = load %struct.cv*, %struct.cv** %25, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %26, i32 0, i32 0
  %27 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %28 = bitcast %struct.xpvcv* %27 to i8*
  %29 = bitcast i8* %28 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %29, i32 0, i32 12
  %30 = load i32, i32* %xcv_flags, align 4
  %and9 = and i32 %30, 32
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %land.lhs.true
  br i1 true, label %if.then, label %if.end

cond.false12:                                     ; preds = %land.lhs.true, %do.end
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false12, %cond.true11
  %31 = load %struct.cv*, %struct.cv** %cv, align 8
  %call13 = call %struct.cv* @Perl_cv_clone(%struct.cv* %31)
  %32 = load %struct.cv**, %struct.cv*** %cvp, align 8
  store %struct.cv* %call13, %struct.cv** %32, align 8
  %33 = load %struct.cv*, %struct.cv** %cv, align 8
  %34 = bitcast %struct.cv* %33 to i8*
  %35 = bitcast i8* %34 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %35)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false12, %cond.true11
  %36 = load %struct.sv*, %struct.sv** %pkg, align 8
  %tobool14 = icmp ne %struct.sv* %36, null
  br i1 %tobool14, label %if.then15, label %if.end18

if.then15:                                        ; preds = %if.end
  %37 = load %struct.sv*, %struct.sv** %pkg, align 8
  %call16 = call %struct.hv* @Perl_gv_stashsv(%struct.sv* %37, i32 1)
  store %struct.hv* %call16, %struct.hv** %stash, align 8
  %38 = load %struct.sv*, %struct.sv** %pkg, align 8
  %39 = bitcast %struct.sv* %38 to i8*
  %40 = bitcast i8* %39 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %40)
  %41 = load %struct.sv*, %struct.sv** %rv, align 8
  %42 = load %struct.hv*, %struct.hv** %stash, align 8
  %call17 = call %struct.sv* @Perl_sv_bless(%struct.sv* %41, %struct.hv* %42)
  br label %if.end18

if.end18:                                         ; preds = %if.then15, %if.end
  %43 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call19 = call %struct.regexp* @S_ReANY(%struct.p5rx* %43)
  %extflags = getelementptr inbounds %struct.regexp, %struct.regexp* %call19, i32 0, i32 7
  %44 = load i32, i32* %extflags, align 8
  %and20 = and i32 %44, 134217728
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.true22, label %cond.false23

cond.true22:                                      ; preds = %if.end18
  br i1 true, label %if.then24, label %if.end41

cond.false23:                                     ; preds = %if.end18
  br i1 false, label %if.then24, label %if.end41

if.then24:                                        ; preds = %cond.false23, %cond.true22
  br label %do.body25

do.body25:                                        ; preds = %if.then24
  %45 = load i8, i8* @PL_tainting, align 1
  %tobool26 = trunc i8 %45 to i1
  br i1 %tobool26, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %do.body25
  br i1 true, label %if.then29, label %if.end30

cond.false28:                                     ; preds = %do.body25
  br i1 false, label %if.then29, label %if.end30

if.then29:                                        ; preds = %cond.false28, %cond.true27
  %46 = load %struct.sv*, %struct.sv** %rv, align 8
  call void @Perl_sv_magic(%struct.sv* %46, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %cond.false28, %cond.true27
  br label %do.end31

do.end31:                                         ; preds = %if.end30
  br label %do.body32

do.body32:                                        ; preds = %do.end31
  %47 = load i8, i8* @PL_tainting, align 1
  %tobool33 = trunc i8 %47 to i1
  br i1 %tobool33, label %cond.true34, label %cond.false35

cond.true34:                                      ; preds = %do.body32
  br i1 true, label %if.then36, label %if.end39

cond.false35:                                     ; preds = %do.body32
  br i1 false, label %if.then36, label %if.end39

if.then36:                                        ; preds = %cond.false35, %cond.true34
  %48 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_u37 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 3
  %svu_rv38 = bitcast %union.anon* %sv_u37 to %struct.sv**
  %49 = load %struct.sv*, %struct.sv** %svu_rv38, align 8
  call void @Perl_sv_magic(%struct.sv* %49, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end39

if.end39:                                         ; preds = %if.then36, %cond.false35, %cond.true34
  br label %do.end40

do.end40:                                         ; preds = %if.end39
  br label %if.end41

if.end41:                                         ; preds = %do.end40, %cond.false23, %cond.true22
  br label %do.body42

do.body42:                                        ; preds = %if.end41
  br label %do.body43

do.body43:                                        ; preds = %do.body42
  %50 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %50 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %51 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp44 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp44, label %cond.true45, label %cond.false46

cond.true45:                                      ; preds = %do.body43
  br i1 true, label %if.then47, label %if.end49

cond.false46:                                     ; preds = %do.body43
  br i1 false, label %if.then47, label %if.end49

if.then47:                                        ; preds = %cond.false46, %cond.true45
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call48 = call %struct.sv** @Perl_stack_grow(%struct.sv** %52, %struct.sv** %53, i64 1)
  store %struct.sv** %call48, %struct.sv*** %sp, align 8
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end49

if.end49:                                         ; preds = %if.then47, %cond.false46, %cond.true45
  br label %do.end50

do.end50:                                         ; preds = %if.end49
  %55 = load %struct.sv*, %struct.sv** %rv, align 8
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %56, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %55, %struct.sv** %incdec.ptr, align 8
  br label %do.end51

do.end51:                                         ; preds = %do.end50
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %57, %struct.sv*** @PL_stack_sp, align 8
  %58 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 0
  %59 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %59
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.regexp* @S_ReANY(%struct.p5rx* %re) #0 {
entry:
  %re.addr = alloca %struct.p5rx*, align 8
  store %struct.p5rx* %re, %struct.p5rx** %re.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %re.addr, align 8
  %sv_u = getelementptr inbounds %struct.p5rx, %struct.p5rx* %0, i32 0, i32 3
  %svu_rx = bitcast %union.anon.7* %sv_u to %struct.regexp**
  %1 = load %struct.regexp*, %struct.regexp** %svu_rx, align 8
  ret %struct.regexp* %1
}

declare dso_local %struct.sv* @Perl_sv_newmortal() #1

declare dso_local %struct.p5rx* @Perl_reg_temp_copy(%struct.p5rx*, %struct.p5rx*) #1

declare dso_local %struct.cv* @Perl_cv_clone(%struct.cv*) #1

declare dso_local %struct.hv* @Perl_gv_stashsv(%struct.sv*, i32) #1

declare dso_local %struct.sv* @Perl_sv_bless(%struct.sv*, %struct.hv*) #1

declare dso_local void @Perl_sv_magic(%struct.sv*, %struct.sv*, i32, i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_match() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %pm = alloca %struct.pmop*, align 8
  %dynpm = alloca %struct.pmop*, align 8
  %s = alloca i8*, align 8
  %strend = alloca i8*, align 8
  %curpos = alloca i64, align 8
  %global = alloca i32, align 4
  %r_flags = alloca i8, align 1
  %truebase = alloca i8*, align 8
  %rx = alloca %struct.p5rx*, align 8
  %rxtainted = alloca i8, align 1
  %gimme = alloca i32, align 4
  %len = alloca i64, align 8
  %oldsave = alloca i32, align 4
  %had_zerolen = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %nparens265 = alloca i32, align 4
  %i = alloca i32, align 4
  %eMiX = alloca i64, align 8
  %len325 = alloca i32, align 4
  %s338 = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.pmop*
  store %struct.pmop* %2, %struct.pmop** %pm, align 8
  %3 = load %struct.pmop*, %struct.pmop** %pm, align 8
  store %struct.pmop* %3, %struct.pmop** %dynpm, align 8
  store i64 0, i64* %curpos, align 8
  store i8 0, i8* %r_flags, align 1
  %4 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %4, i32 0, i32 9
  %5 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp, align 8
  store %struct.p5rx* %5, %struct.p5rx** %rx, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 5
  %7 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 5
  %9 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %9 to i32
  %and3 = and i32 %conv2, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and3, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %gimme, align 4
  %10 = load i32, i32* @PL_savestack_ix, align 4
  store i32 %10, i32* %oldsave, align 4
  store i32 0, i32* %had_zerolen, align 4
  store %struct.magic* null, %struct.magic** %mg, align 8
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags4 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 5
  %12 = load i8, i8* %op_flags4, align 2
  %conv5 = zext i8 %12 to i32
  %and6 = and i32 %conv5, 64
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %13, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  store %struct.sv* %14, %struct.sv** %targ, align 8
  br label %if.end33

if.else:                                          ; preds = %cond.end
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 3
  %16 = load i64, i64* %op_targ, align 8
  %tobool8 = icmp ne i64 %16, 0
  br i1 %tobool8, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else
  %17 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ10 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 3
  %19 = load i64, i64* %op_targ10, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %17, i64 %19
  %20 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %20, %struct.sv** %targ, align 8
  br label %if.end32

if.else11:                                        ; preds = %if.else
  %21 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %21, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %22 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %22, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %23 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool12 = icmp ne %struct.sv* %23, null
  br i1 %tobool12, label %cond.true13, label %cond.false18

cond.true13:                                      ; preds = %if.else11
  %24 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u14 = getelementptr inbounds %struct.gv, %struct.gv* %24, i32 0, i32 3
  %svu_gp15 = bitcast %union.anon.4* %sv_u14 to %struct.gp**
  %25 = load %struct.gp*, %struct.gp** %svu_gp15, align 8
  %add.ptr16 = getelementptr inbounds %struct.gp, %struct.gp* %25, i64 0
  %gp_sv17 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr16, i32 0, i32 0
  br label %cond.end24

cond.false18:                                     ; preds = %if.else11
  %26 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %call19 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %26, i32 0)
  %sv_u20 = getelementptr inbounds %struct.gv, %struct.gv* %call19, i32 0, i32 3
  %svu_gp21 = bitcast %union.anon.4* %sv_u20 to %struct.gp**
  %27 = load %struct.gp*, %struct.gp** %svu_gp21, align 8
  %add.ptr22 = getelementptr inbounds %struct.gp, %struct.gp* %27, i64 0
  %gp_sv23 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr22, i32 0, i32 0
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false18, %cond.true13
  %cond25 = phi %struct.sv** [ %gp_sv17, %cond.true13 ], [ %gp_sv23, %cond.false18 ]
  %28 = load %struct.sv*, %struct.sv** %cond25, align 8
  %add.ptr26 = getelementptr inbounds %struct.sv, %struct.sv* %28, i64 0
  store %struct.sv* %add.ptr26, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end24
  %29 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %29 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %30 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true28, label %cond.false29

cond.true28:                                      ; preds = %do.body
  br i1 true, label %if.then30, label %if.end

cond.false29:                                     ; preds = %do.body
  br i1 false, label %if.then30, label %if.end

if.then30:                                        ; preds = %cond.false29, %cond.true28
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call31 = call %struct.sv** @Perl_stack_grow(%struct.sv** %31, %struct.sv** %32, i64 1)
  store %struct.sv** %call31, %struct.sv*** %sp, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then30, %cond.false29, %cond.true28
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end32

if.end32:                                         ; preds = %do.end, %if.then9
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call34 = call %struct.regexp* @S_ReANY(%struct.p5rx* %35)
  %mother_re = getelementptr inbounds %struct.regexp, %struct.regexp* %call34, i32 0, i32 5
  %36 = load %struct.p5rx*, %struct.p5rx** %mother_re, align 8
  %tobool35 = icmp ne %struct.p5rx* %36, null
  br i1 %tobool35, label %cond.true36, label %cond.false47

cond.true36:                                      ; preds = %if.end33
  %37 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags, align 4
  %and37 = and i32 %38, 2098176
  %cmp38 = icmp eq i32 %and37, 1024
  br i1 %cmp38, label %cond.true40, label %cond.false43

cond.true40:                                      ; preds = %cond.true36
  %39 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any, align 8
  %41 = bitcast i8* %40 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %41, i32 0, i32 2
  %42 = load i64, i64* %xpv_cur, align 8
  store i64 %42, i64* %len, align 8
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u41 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u41 to i8**
  %44 = load i8*, i8** %svu_pv, align 8
  %add.ptr42 = getelementptr inbounds i8, i8* %44, i64 0
  br label %cond.end45

cond.false43:                                     ; preds = %cond.true36
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %call44 = call i8* @Perl_sv_2pv_flags(%struct.sv* %45, i64* %len, i32 32)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false43, %cond.true40
  %cond46 = phi i8* [ %add.ptr42, %cond.true40 ], [ %call44, %cond.false43 ]
  br label %cond.end62

cond.false47:                                     ; preds = %if.end33
  %46 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %47, 2098176
  %cmp50 = icmp eq i32 %and49, 1024
  br i1 %cmp50, label %cond.true52, label %cond.false58

cond.true52:                                      ; preds = %cond.false47
  %48 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any53, align 8
  %50 = bitcast i8* %49 to %struct.xpv*
  %xpv_cur54 = getelementptr inbounds %struct.xpv, %struct.xpv* %50, i32 0, i32 2
  %51 = load i64, i64* %xpv_cur54, align 8
  store i64 %51, i64* %len, align 8
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u55 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 3
  %svu_pv56 = bitcast %union.anon* %sv_u55 to i8**
  %53 = load i8*, i8** %svu_pv56, align 8
  %add.ptr57 = getelementptr inbounds i8, i8* %53, i64 0
  br label %cond.end60

cond.false58:                                     ; preds = %cond.false47
  %54 = load %struct.sv*, %struct.sv** %targ, align 8
  %call59 = call i8* @Perl_sv_2pv_flags(%struct.sv* %54, i64* %len, i32 34)
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false58, %cond.true52
  %cond61 = phi i8* [ %add.ptr57, %cond.true52 ], [ %call59, %cond.false58 ]
  br label %cond.end62

cond.end62:                                       ; preds = %cond.end60, %cond.end45
  %cond63 = phi i8* [ %cond46, %cond.end45 ], [ %cond61, %cond.end60 ]
  store i8* %cond63, i8** %truebase, align 8
  %55 = load i8*, i8** %truebase, align 8
  %tobool64 = icmp ne i8* %55, null
  br i1 %tobool64, label %if.end67, label %if.then65

if.then65:                                        ; preds = %cond.end62
  %call66 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i64 0, i64 0))
  store %struct.op* %call66, %struct.op** %retval, align 8
  br label %return

if.end67:                                         ; preds = %cond.end62
  %56 = load i8*, i8** %truebase, align 8
  %57 = load i64, i64* %len, align 8
  %add.ptr68 = getelementptr inbounds i8, i8* %56, i64 %57
  store i8* %add.ptr68, i8** %strend, align 8
  %58 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call69 = call %struct.regexp* @S_ReANY(%struct.p5rx* %58)
  %extflags = getelementptr inbounds %struct.regexp, %struct.regexp* %call69, i32 0, i32 7
  %59 = load i32, i32* %extflags, align 8
  %and70 = and i32 %59, 134217728
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end67
  %60 = load i8, i8* @PL_tainted, align 1
  %tobool72 = trunc i8 %60 to i1
  br i1 %tobool72, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %61 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %61, i32 0, i32 10
  %62 = load i32, i32* %op_pmflags, align 8
  %and74 = and i32 %62, 524288
  %tobool75 = icmp ne i32 %and74, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %63 = phi i1 [ false, %lor.rhs ], [ %tobool75, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %if.end67
  %64 = phi i1 [ true, %if.end67 ], [ %63, %land.end ]
  %frombool = zext i1 %64 to i8
  store i8 %frombool, i8* %rxtainted, align 1
  store i8 0, i8* @PL_tainted, align 1
  %65 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmflags76 = getelementptr inbounds %struct.pmop, %struct.pmop* %65, i32 0, i32 10
  %66 = load i32, i32* %op_pmflags76, align 8
  %and77 = and i32 %66, 16777216
  store i32 %and77, i32* %global, align 4
  %67 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags78 = getelementptr inbounds %struct.pmop, %struct.pmop* %67, i32 0, i32 10
  %68 = load i32, i32* %op_pmflags78, align 8
  %and79 = and i32 %68, 2097152
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %if.then81, label %if.end82

if.then81:                                        ; preds = %lor.end
  br label %nope

if.end82:                                         ; preds = %lor.end
  %69 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call83 = call %struct.regexp* @S_ReANY(%struct.p5rx* %69)
  %mother_re84 = getelementptr inbounds %struct.regexp, %struct.regexp* %call83, i32 0, i32 5
  %70 = load %struct.p5rx*, %struct.p5rx** %mother_re84, align 8
  %tobool85 = icmp ne %struct.p5rx* %70, null
  br i1 %tobool85, label %if.end96, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end82
  %71 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %sv_any86 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %71, i32 0, i32 0
  %72 = load %struct.regexp*, %struct.regexp** %sv_any86, align 8
  %73 = bitcast %struct.regexp* %72 to %struct.xpv*
  %xpv_cur87 = getelementptr inbounds %struct.xpv, %struct.xpv* %73, i32 0, i32 2
  %74 = load i64, i64* %xpv_cur87, align 8
  %75 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call88 = call %struct.regexp* @S_ReANY(%struct.p5rx* %75)
  %pre_prefix = getelementptr inbounds %struct.regexp, %struct.regexp* %call88, i32 0, i32 24
  %bf.load = load i16, i16* %pre_prefix, align 8
  %bf.clear = and i16 %bf.load, 15
  %bf.cast = zext i16 %bf.clear to i32
  %conv89 = zext i32 %bf.cast to i64
  %sub = sub i64 %74, %conv89
  %sub90 = sub i64 %sub, 1
  %tobool91 = icmp ne i64 %sub90, 0
  br i1 %tobool91, label %if.end96, label %land.lhs.true92

land.lhs.true92:                                  ; preds = %land.lhs.true
  %76 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %tobool93 = icmp ne %struct.pmop* %76, null
  br i1 %tobool93, label %if.then94, label %if.end96

if.then94:                                        ; preds = %land.lhs.true92
  %77 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  store %struct.pmop* %77, %struct.pmop** %pm, align 8
  %78 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp95 = getelementptr inbounds %struct.pmop, %struct.pmop* %78, i32 0, i32 9
  %79 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp95, align 8
  store %struct.p5rx* %79, %struct.p5rx** %rx, align 8
  br label %if.end96

if.end96:                                         ; preds = %if.then94, %land.lhs.true92, %land.lhs.true, %if.end82
  %80 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call97 = call %struct.regexp* @S_ReANY(%struct.p5rx* %80)
  %minlen = getelementptr inbounds %struct.regexp, %struct.regexp* %call97, i32 0, i32 8
  %81 = load i64, i64* %minlen, align 8
  %cmp98 = icmp sge i64 %81, 0
  br i1 %cmp98, label %land.lhs.true100, label %if.end106

land.lhs.true100:                                 ; preds = %if.end96
  %82 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call101 = call %struct.regexp* @S_ReANY(%struct.p5rx* %82)
  %minlen102 = getelementptr inbounds %struct.regexp, %struct.regexp* %call101, i32 0, i32 8
  %83 = load i64, i64* %minlen102, align 8
  %84 = load i64, i64* %len, align 8
  %cmp103 = icmp ugt i64 %83, %84
  br i1 %cmp103, label %if.then105, label %if.end106

if.then105:                                       ; preds = %land.lhs.true100
  br label %nope

if.end106:                                        ; preds = %land.lhs.true100, %if.end96
  %85 = load i32, i32* %global, align 4
  %tobool107 = icmp ne i32 %85, 0
  br i1 %tobool107, label %if.then108, label %if.end122

if.then108:                                       ; preds = %if.end106
  %86 = load %struct.sv*, %struct.sv** %targ, align 8
  %call109 = call %struct.magic* @Perl_mg_find_mglob(%struct.sv* %86)
  store %struct.magic* %call109, %struct.magic** %mg, align 8
  %87 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool110 = icmp ne %struct.magic* %87, null
  br i1 %tobool110, label %land.lhs.true111, label %if.end121

land.lhs.true111:                                 ; preds = %if.then108
  %88 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %88, i32 0, i32 5
  %89 = load i64, i64* %mg_len, align 8
  %cmp112 = icmp sge i64 %89, 0
  br i1 %cmp112, label %if.then114, label %if.end121

if.then114:                                       ; preds = %land.lhs.true111
  %90 = load %struct.magic*, %struct.magic** %mg, align 8
  %91 = load %struct.sv*, %struct.sv** %targ, align 8
  %92 = load i8*, i8** %truebase, align 8
  %93 = load i64, i64* %len, align 8
  %call115 = call i64 @S_MgBYTEPOS(%struct.magic* %90, %struct.sv* %91, i8* %92, i64 %93)
  store i64 %call115, i64* %curpos, align 8
  %94 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %94, i32 0, i32 4
  %95 = load i8, i8* %mg_flags, align 1
  %conv116 = zext i8 %95 to i32
  %and117 = and i32 %conv116, 1
  %tobool118 = icmp ne i32 %and117, 0
  br i1 %tobool118, label %if.then119, label %if.end120

if.then119:                                       ; preds = %if.then114
  store i32 1, i32* %had_zerolen, align 4
  br label %if.end120

if.end120:                                        ; preds = %if.then119, %if.then114
  br label %if.end121

if.end121:                                        ; preds = %if.end120, %land.lhs.true111, %if.then108
  br label %if.end122

if.end122:                                        ; preds = %if.end121, %if.end106
  %96 = load i8, i8* %r_flags, align 1
  %conv123 = zext i8 %96 to i32
  %or = or i32 %conv123, 33
  %conv124 = trunc i32 %or to i8
  store i8 %conv124, i8* %r_flags, align 1
  %97 = load i32, i32* %global, align 4
  %tobool125 = icmp ne i32 %97, 0
  br i1 %tobool125, label %land.lhs.true126, label %if.then129

land.lhs.true126:                                 ; preds = %if.end122
  %98 = load i32, i32* %gimme, align 4
  %cmp127 = icmp eq i32 %98, 3
  br i1 %cmp127, label %if.end133, label %if.then129

if.then129:                                       ; preds = %land.lhs.true126, %if.end122
  %99 = load i8, i8* %r_flags, align 1
  %conv130 = zext i8 %99 to i32
  %or131 = or i32 %conv130, 64
  %conv132 = trunc i32 %or131 to i8
  store i8 %conv132, i8* %r_flags, align 1
  br label %if.end133

if.end133:                                        ; preds = %if.then129, %land.lhs.true126
  %100 = load i8*, i8** %truebase, align 8
  store i8* %100, i8** %s, align 8
  br label %play_it_again

play_it_again:                                    ; preds = %if.then406, %if.end133
  %101 = load i32, i32* %global, align 4
  %tobool134 = icmp ne i32 %101, 0
  br i1 %tobool134, label %if.then135, label %if.end137

if.then135:                                       ; preds = %play_it_again
  %102 = load i8*, i8** %truebase, align 8
  %103 = load i64, i64* %curpos, align 8
  %add.ptr136 = getelementptr inbounds i8, i8* %102, i64 %103
  store i8* %add.ptr136, i8** %s, align 8
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %play_it_again
  %104 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call138 = call %struct.regexp* @S_ReANY(%struct.p5rx* %104)
  %engine = getelementptr inbounds %struct.regexp, %struct.regexp* %call138, i32 0, i32 4
  %105 = load %struct.regexp_engine*, %struct.regexp_engine** %engine, align 8
  %exec = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %105, i32 0, i32 1
  %106 = load i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)** %exec, align 8
  %107 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %108 = load i8*, i8** %s, align 8
  %109 = load i8*, i8** %strend, align 8
  %110 = load i8*, i8** %truebase, align 8
  %111 = load i32, i32* %had_zerolen, align 4
  %conv139 = sext i32 %111 to i64
  %112 = load %struct.sv*, %struct.sv** %targ, align 8
  %113 = load i8, i8* %r_flags, align 1
  %conv140 = zext i8 %113 to i32
  %call141 = call i32 %106(%struct.p5rx* %107, i8* %108, i8* %109, i8* %110, i64 %conv139, %struct.sv* %112, i8* null, i32 %conv140)
  %tobool142 = icmp ne i32 %call141, 0
  br i1 %tobool142, label %if.end144, label %if.then143

if.then143:                                       ; preds = %if.end137
  br label %nope

if.end144:                                        ; preds = %if.end137
  %114 = load %struct.pmop*, %struct.pmop** %pm, align 8
  store %struct.pmop* %114, %struct.pmop** @PL_curpm, align 8
  %115 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmflags145 = getelementptr inbounds %struct.pmop, %struct.pmop* %115, i32 0, i32 10
  %116 = load i32, i32* %op_pmflags145, align 8
  %and146 = and i32 %116, 1048576
  %tobool147 = icmp ne i32 %and146, 0
  br i1 %tobool147, label %if.then148, label %if.end151

if.then148:                                       ; preds = %if.end144
  %117 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmflags149 = getelementptr inbounds %struct.pmop, %struct.pmop* %117, i32 0, i32 10
  %118 = load i32, i32* %op_pmflags149, align 8
  %or150 = or i32 %118, 2097152
  store i32 %or150, i32* %op_pmflags149, align 8
  br label %if.end151

if.end151:                                        ; preds = %if.then148, %if.end144
  %119 = load i8, i8* %rxtainted, align 1
  %tobool152 = trunc i8 %119 to i1
  br i1 %tobool152, label %if.then153, label %if.end157

if.then153:                                       ; preds = %if.end151
  %120 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call154 = call %struct.regexp* @S_ReANY(%struct.p5rx* %120)
  %extflags155 = getelementptr inbounds %struct.regexp, %struct.regexp* %call154, i32 0, i32 7
  %121 = load i32, i32* %extflags155, align 8
  %or156 = or i32 %121, 67108864
  store i32 %or156, i32* %extflags155, align 8
  br label %if.end157

if.end157:                                        ; preds = %if.then153, %if.end151
  %122 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call158 = call %struct.regexp* @S_ReANY(%struct.p5rx* %122)
  %extflags159 = getelementptr inbounds %struct.regexp, %struct.regexp* %call158, i32 0, i32 7
  %123 = load i32, i32* %extflags159, align 8
  %and160 = and i32 %123, 67108864
  %tobool161 = icmp ne i32 %and160, 0
  br i1 %tobool161, label %cond.true162, label %cond.false163

cond.true162:                                     ; preds = %if.end157
  br i1 true, label %if.then164, label %if.end165

cond.false163:                                    ; preds = %if.end157
  br i1 false, label %if.then164, label %if.end165

if.then164:                                       ; preds = %cond.false163, %cond.true162
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end165

if.end165:                                        ; preds = %if.then164, %cond.false163, %cond.true162
  %124 = load i32, i32* %global, align 4
  %tobool166 = icmp ne i32 %124, 0
  br i1 %tobool166, label %land.lhs.true167, label %if.end248

land.lhs.true167:                                 ; preds = %if.end165
  %125 = load i32, i32* %gimme, align 4
  %cmp168 = icmp ne i32 %125, 3
  br i1 %cmp168, label %if.then173, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true167
  %126 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmflags170 = getelementptr inbounds %struct.pmop, %struct.pmop* %126, i32 0, i32 10
  %127 = load i32, i32* %op_pmflags170, align 8
  %and171 = and i32 %127, 33554432
  %tobool172 = icmp ne i32 %and171, 0
  br i1 %tobool172, label %if.then173, label %if.end248

if.then173:                                       ; preds = %lor.lhs.false, %land.lhs.true167
  %128 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool174 = icmp ne %struct.magic* %128, null
  br i1 %tobool174, label %if.end177, label %if.then175

if.then175:                                       ; preds = %if.then173
  %129 = load %struct.sv*, %struct.sv** %targ, align 8
  %call176 = call %struct.magic* @Perl_sv_magicext_mglob(%struct.sv* %129)
  store %struct.magic* %call176, %struct.magic** %mg, align 8
  br label %if.end177

if.end177:                                        ; preds = %if.then175, %if.then173
  %130 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags178 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 2
  %131 = load i32, i32* %sv_flags178, align 4
  %and179 = and i32 %131, 1024
  %tobool180 = icmp ne i32 %and179, 0
  br i1 %tobool180, label %land.lhs.true181, label %cond.false197

land.lhs.true181:                                 ; preds = %if.end177
  %132 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags182 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 2
  %133 = load i32, i32* %sv_flags182, align 4
  %and183 = and i32 %133, 2097152
  %tobool184 = icmp ne i32 %and183, 0
  br i1 %tobool184, label %lor.lhs.false185, label %cond.true188

lor.lhs.false185:                                 ; preds = %land.lhs.true181
  %134 = load %struct.sv*, %struct.sv** %targ, align 8
  %call186 = call zeroext i1 @S_sv_only_taint_gmagic(%struct.sv* %134)
  br i1 %call186, label %cond.true188, label %cond.false197

cond.true188:                                     ; preds = %lor.lhs.false185, %land.lhs.true181
  %135 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call189 = call %struct.regexp* @S_ReANY(%struct.p5rx* %135)
  %offs = getelementptr inbounds %struct.regexp, %struct.regexp* %call189, i32 0, i32 17
  %136 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs, align 8
  %arrayidx190 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %136, i64 0
  %end = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx190, i32 0, i32 1
  %137 = load i64, i64* %end, align 8
  %138 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len191 = getelementptr inbounds %struct.magic, %struct.magic* %138, i32 0, i32 5
  store i64 %137, i64* %mg_len191, align 8
  %139 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags192 = getelementptr inbounds %struct.magic, %struct.magic* %139, i32 0, i32 4
  %140 = load i8, i8* %mg_flags192, align 1
  %conv193 = zext i8 %140 to i32
  %or194 = or i32 %conv193, 64
  %conv195 = trunc i32 %or194 to i8
  store i8 %conv195, i8* %mg_flags192, align 1
  %conv196 = zext i8 %conv195 to i32
  br label %cond.end224

cond.false197:                                    ; preds = %lor.lhs.false185, %if.end177
  %141 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags198 = getelementptr inbounds %struct.sv, %struct.sv* %141, i32 0, i32 2
  %142 = load i32, i32* %sv_flags198, align 4
  %and199 = and i32 %142, 536870912
  %tobool200 = icmp ne i32 %and199, 0
  br i1 %tobool200, label %land.lhs.true201, label %cond.false211

land.lhs.true201:                                 ; preds = %cond.false197
  %143 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %143, i32 0, i32 10
  %144 = load i32, i32* %cop_hints, align 8
  %add = add i32 %144, 0
  %and202 = and i32 %add, 8
  %tobool203 = icmp ne i32 %and202, 0
  br i1 %tobool203, label %cond.false211, label %cond.true204

cond.true204:                                     ; preds = %land.lhs.true201
  %145 = load i8*, i8** %truebase, align 8
  %146 = load i8*, i8** %truebase, align 8
  %147 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call205 = call %struct.regexp* @S_ReANY(%struct.p5rx* %147)
  %offs206 = getelementptr inbounds %struct.regexp, %struct.regexp* %call205, i32 0, i32 17
  %148 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs206, align 8
  %arrayidx207 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %148, i64 0
  %end208 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx207, i32 0, i32 1
  %149 = load i64, i64* %end208, align 8
  %add.ptr209 = getelementptr inbounds i8, i8* %146, i64 %149
  %call210 = call i64 @Perl_utf8_length(i8* %145, i8* %add.ptr209)
  br label %cond.end216

cond.false211:                                    ; preds = %land.lhs.true201, %cond.false197
  %150 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call212 = call %struct.regexp* @S_ReANY(%struct.p5rx* %150)
  %offs213 = getelementptr inbounds %struct.regexp, %struct.regexp* %call212, i32 0, i32 17
  %151 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs213, align 8
  %arrayidx214 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %151, i64 0
  %end215 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx214, i32 0, i32 1
  %152 = load i64, i64* %end215, align 8
  br label %cond.end216

cond.end216:                                      ; preds = %cond.false211, %cond.true204
  %cond217 = phi i64 [ %call210, %cond.true204 ], [ %152, %cond.false211 ]
  %153 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len218 = getelementptr inbounds %struct.magic, %struct.magic* %153, i32 0, i32 5
  store i64 %cond217, i64* %mg_len218, align 8
  %154 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags219 = getelementptr inbounds %struct.magic, %struct.magic* %154, i32 0, i32 4
  %155 = load i8, i8* %mg_flags219, align 1
  %conv220 = zext i8 %155 to i32
  %and221 = and i32 %conv220, -65
  %conv222 = trunc i32 %and221 to i8
  store i8 %conv222, i8* %mg_flags219, align 1
  %conv223 = zext i8 %conv222 to i32
  br label %cond.end224

cond.end224:                                      ; preds = %cond.end216, %cond.true188
  %cond225 = phi i32 [ %conv196, %cond.true188 ], [ %conv223, %cond.end216 ]
  %156 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call226 = call %struct.regexp* @S_ReANY(%struct.p5rx* %156)
  %offs227 = getelementptr inbounds %struct.regexp, %struct.regexp* %call226, i32 0, i32 17
  %157 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs227, align 8
  %arrayidx228 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %157, i64 0
  %start = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx228, i32 0, i32 0
  %158 = load i64, i64* %start, align 8
  %159 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call229 = call %struct.regexp* @S_ReANY(%struct.p5rx* %159)
  %gofs = getelementptr inbounds %struct.regexp, %struct.regexp* %call229, i32 0, i32 10
  %160 = load i64, i64* %gofs, align 8
  %add230 = add nsw i64 %158, %160
  %161 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call231 = call %struct.regexp* @S_ReANY(%struct.p5rx* %161)
  %offs232 = getelementptr inbounds %struct.regexp, %struct.regexp* %call231, i32 0, i32 17
  %162 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs232, align 8
  %arrayidx233 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %162, i64 0
  %end234 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx233, i32 0, i32 1
  %163 = load i64, i64* %end234, align 8
  %cmp235 = icmp eq i64 %add230, %163
  br i1 %cmp235, label %if.then237, label %if.else242

if.then237:                                       ; preds = %cond.end224
  %164 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags238 = getelementptr inbounds %struct.magic, %struct.magic* %164, i32 0, i32 4
  %165 = load i8, i8* %mg_flags238, align 1
  %conv239 = zext i8 %165 to i32
  %or240 = or i32 %conv239, 1
  %conv241 = trunc i32 %or240 to i8
  store i8 %conv241, i8* %mg_flags238, align 1
  br label %if.end247

if.else242:                                       ; preds = %cond.end224
  %166 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags243 = getelementptr inbounds %struct.magic, %struct.magic* %166, i32 0, i32 4
  %167 = load i8, i8* %mg_flags243, align 1
  %conv244 = zext i8 %167 to i32
  %and245 = and i32 %conv244, -2
  %conv246 = trunc i32 %and245 to i8
  store i8 %conv246, i8* %mg_flags243, align 1
  br label %if.end247

if.end247:                                        ; preds = %if.else242, %if.then237
  br label %if.end248

if.end248:                                        ; preds = %if.end247, %lor.lhs.false, %if.end165
  %168 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call249 = call %struct.regexp* @S_ReANY(%struct.p5rx* %168)
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %call249, i32 0, i32 12
  %169 = load i32, i32* %nparens, align 8
  %tobool250 = icmp ne i32 %169, 0
  br i1 %tobool250, label %lor.lhs.false253, label %land.lhs.true251

land.lhs.true251:                                 ; preds = %if.end248
  %170 = load i32, i32* %global, align 4
  %tobool252 = icmp ne i32 %170, 0
  br i1 %tobool252, label %lor.lhs.false253, label %if.then256

lor.lhs.false253:                                 ; preds = %land.lhs.true251, %if.end248
  %171 = load i32, i32* %gimme, align 4
  %cmp254 = icmp ne i32 %171, 3
  br i1 %cmp254, label %if.then256, label %if.end264

if.then256:                                       ; preds = %lor.lhs.false253, %land.lhs.true251
  br label %do.body257

do.body257:                                       ; preds = %if.then256
  %172 = load i32, i32* @PL_savestack_ix, align 4
  %173 = load i32, i32* %oldsave, align 4
  %cmp258 = icmp sgt i32 %172, %173
  br i1 %cmp258, label %if.then260, label %if.end261

if.then260:                                       ; preds = %do.body257
  %174 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %174)
  br label %if.end261

if.end261:                                        ; preds = %if.then260, %do.body257
  br label %do.end262

do.end262:                                        ; preds = %if.end261
  %175 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr263 = getelementptr inbounds %struct.sv*, %struct.sv** %175, i32 1
  store %struct.sv** %incdec.ptr263, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr263, align 8
  %176 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %176, %struct.sv*** @PL_stack_sp, align 8
  %177 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %177, i32 0, i32 0
  %178 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %178, %struct.op** %retval, align 8
  br label %return

if.end264:                                        ; preds = %lor.lhs.false253
  %179 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call266 = call %struct.regexp* @S_ReANY(%struct.p5rx* %179)
  %nparens267 = getelementptr inbounds %struct.regexp, %struct.regexp* %call266, i32 0, i32 12
  %180 = load i32, i32* %nparens267, align 8
  store i32 %180, i32* %nparens265, align 4
  %181 = load i32, i32* %global, align 4
  %tobool268 = icmp ne i32 %181, 0
  br i1 %tobool268, label %land.rhs269, label %land.end271

land.rhs269:                                      ; preds = %if.end264
  %182 = load i32, i32* %nparens265, align 4
  %tobool270 = icmp ne i32 %182, 0
  %lnot = xor i1 %tobool270, true
  br label %land.end271

land.end271:                                      ; preds = %land.rhs269, %if.end264
  %183 = phi i1 [ false, %if.end264 ], [ %lnot, %land.rhs269 ]
  %184 = zext i1 %183 to i64
  %cond272 = select i1 %183, i32 1, i32 0
  store i32 %cond272, i32* %i, align 4
  %185 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %185, %struct.sv*** %sp, align 8
  br label %do.body273

do.body273:                                       ; preds = %land.end271
  %186 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %187 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast274 = ptrtoint %struct.sv** %186 to i64
  %sub.ptr.rhs.cast275 = ptrtoint %struct.sv** %187 to i64
  %sub.ptr.sub276 = sub i64 %sub.ptr.lhs.cast274, %sub.ptr.rhs.cast275
  %sub.ptr.div277 = sdiv exact i64 %sub.ptr.sub276, 8
  %188 = load i32, i32* %nparens265, align 4
  %189 = load i32, i32* %i, align 4
  %add278 = add nsw i32 %188, %189
  %conv279 = sext i32 %add278 to i64
  %cmp280 = icmp slt i64 %sub.ptr.div277, %conv279
  br i1 %cmp280, label %cond.true282, label %cond.false283

cond.true282:                                     ; preds = %do.body273
  br i1 true, label %if.then284, label %if.end288

cond.false283:                                    ; preds = %do.body273
  br i1 false, label %if.then284, label %if.end288

if.then284:                                       ; preds = %cond.false283, %cond.true282
  %190 = load %struct.sv**, %struct.sv*** %sp, align 8
  %191 = load %struct.sv**, %struct.sv*** %sp, align 8
  %192 = load i32, i32* %nparens265, align 4
  %193 = load i32, i32* %i, align 4
  %add285 = add nsw i32 %192, %193
  %conv286 = sext i32 %add285 to i64
  %call287 = call %struct.sv** @Perl_stack_grow(%struct.sv** %190, %struct.sv** %191, i64 %conv286)
  store %struct.sv** %call287, %struct.sv*** %sp, align 8
  %194 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end288

if.end288:                                        ; preds = %if.then284, %cond.false283, %cond.true282
  br label %do.end289

do.end289:                                        ; preds = %if.end288
  br label %do.body290

do.body290:                                       ; preds = %do.end289
  %195 = load i64, i64* @PL_tmps_ix, align 8
  %196 = load i32, i32* %nparens265, align 4
  %197 = load i32, i32* %i, align 4
  %add291 = add nsw i32 %196, %197
  %conv292 = sext i32 %add291 to i64
  %add293 = add nsw i64 %195, %conv292
  store i64 %add293, i64* %eMiX, align 8
  %198 = load i64, i64* %eMiX, align 8
  %199 = load i64, i64* @PL_tmps_max, align 8
  %cmp294 = icmp sge i64 %198, %199
  br i1 %cmp294, label %cond.true296, label %cond.false297

cond.true296:                                     ; preds = %do.body290
  br i1 true, label %if.then298, label %if.end300

cond.false297:                                    ; preds = %do.body290
  br i1 false, label %if.then298, label %if.end300

if.then298:                                       ; preds = %cond.false297, %cond.true296
  %200 = load i64, i64* %eMiX, align 8
  %call299 = call i64 @Perl_tmps_grow_p(i64 %200)
  br label %if.end300

if.end300:                                        ; preds = %if.then298, %cond.false297, %cond.true296
  br label %do.end301

do.end301:                                        ; preds = %if.end300
  %201 = load i32, i32* %i, align 4
  %tobool302 = icmp ne i32 %201, 0
  %lnot303 = xor i1 %tobool302, true
  %lnot.ext = zext i1 %lnot303 to i32
  store i32 %lnot.ext, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end301
  %202 = load i32, i32* %i, align 4
  %203 = load i32, i32* %nparens265, align 4
  %cmp304 = icmp sle i32 %202, %203
  br i1 %cmp304, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call306 = call %struct.sv* @Perl_sv_newmortal()
  %204 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr307 = getelementptr inbounds %struct.sv*, %struct.sv** %204, i32 1
  store %struct.sv** %incdec.ptr307, %struct.sv*** %sp, align 8
  store %struct.sv* %call306, %struct.sv** %incdec.ptr307, align 8
  %205 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call308 = call %struct.regexp* @S_ReANY(%struct.p5rx* %205)
  %offs309 = getelementptr inbounds %struct.regexp, %struct.regexp* %call308, i32 0, i32 17
  %206 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs309, align 8
  %207 = load i32, i32* %i, align 4
  %idxprom = sext i32 %207 to i64
  %arrayidx310 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %206, i64 %idxprom
  %start311 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx310, i32 0, i32 0
  %208 = load i64, i64* %start311, align 8
  %cmp312 = icmp ne i64 %208, -1
  br i1 %cmp312, label %land.lhs.true314, label %cond.false323

land.lhs.true314:                                 ; preds = %for.body
  %209 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call315 = call %struct.regexp* @S_ReANY(%struct.p5rx* %209)
  %offs316 = getelementptr inbounds %struct.regexp, %struct.regexp* %call315, i32 0, i32 17
  %210 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs316, align 8
  %211 = load i32, i32* %i, align 4
  %idxprom317 = sext i32 %211 to i64
  %arrayidx318 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %210, i64 %idxprom317
  %end319 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx318, i32 0, i32 1
  %212 = load i64, i64* %end319, align 8
  %cmp320 = icmp ne i64 %212, -1
  br i1 %cmp320, label %cond.true322, label %cond.false323

cond.true322:                                     ; preds = %land.lhs.true314
  br i1 true, label %if.then324, label %if.end404

cond.false323:                                    ; preds = %land.lhs.true314, %for.body
  br i1 false, label %if.then324, label %if.end404

if.then324:                                       ; preds = %cond.false323, %cond.true322
  %213 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call326 = call %struct.regexp* @S_ReANY(%struct.p5rx* %213)
  %offs327 = getelementptr inbounds %struct.regexp, %struct.regexp* %call326, i32 0, i32 17
  %214 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs327, align 8
  %215 = load i32, i32* %i, align 4
  %idxprom328 = sext i32 %215 to i64
  %arrayidx329 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %214, i64 %idxprom328
  %end330 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx329, i32 0, i32 1
  %216 = load i64, i64* %end330, align 8
  %217 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call331 = call %struct.regexp* @S_ReANY(%struct.p5rx* %217)
  %offs332 = getelementptr inbounds %struct.regexp, %struct.regexp* %call331, i32 0, i32 17
  %218 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs332, align 8
  %219 = load i32, i32* %i, align 4
  %idxprom333 = sext i32 %219 to i64
  %arrayidx334 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %218, i64 %idxprom333
  %start335 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx334, i32 0, i32 0
  %220 = load i64, i64* %start335, align 8
  %sub336 = sub nsw i64 %216, %220
  %conv337 = trunc i64 %sub336 to i32
  store i32 %conv337, i32* %len325, align 4
  %221 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call339 = call %struct.regexp* @S_ReANY(%struct.p5rx* %221)
  %offs340 = getelementptr inbounds %struct.regexp, %struct.regexp* %call339, i32 0, i32 17
  %222 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs340, align 8
  %223 = load i32, i32* %i, align 4
  %idxprom341 = sext i32 %223 to i64
  %arrayidx342 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %222, i64 %idxprom341
  %start343 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx342, i32 0, i32 0
  %224 = load i64, i64* %start343, align 8
  %225 = load i8*, i8** %truebase, align 8
  %add.ptr344 = getelementptr inbounds i8, i8* %225, i64 %224
  store i8* %add.ptr344, i8** %s338, align 8
  %226 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call345 = call %struct.regexp* @S_ReANY(%struct.p5rx* %226)
  %offs346 = getelementptr inbounds %struct.regexp, %struct.regexp* %call345, i32 0, i32 17
  %227 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs346, align 8
  %228 = load i32, i32* %i, align 4
  %idxprom347 = sext i32 %228 to i64
  %arrayidx348 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %227, i64 %idxprom347
  %end349 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx348, i32 0, i32 1
  %229 = load i64, i64* %end349, align 8
  %cmp350 = icmp slt i64 %229, 0
  br i1 %cmp350, label %cond.true370, label %lor.lhs.false352

lor.lhs.false352:                                 ; preds = %if.then324
  %230 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call353 = call %struct.regexp* @S_ReANY(%struct.p5rx* %230)
  %offs354 = getelementptr inbounds %struct.regexp, %struct.regexp* %call353, i32 0, i32 17
  %231 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs354, align 8
  %232 = load i32, i32* %i, align 4
  %idxprom355 = sext i32 %232 to i64
  %arrayidx356 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %231, i64 %idxprom355
  %start357 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx356, i32 0, i32 0
  %233 = load i64, i64* %start357, align 8
  %cmp358 = icmp slt i64 %233, 0
  br i1 %cmp358, label %cond.true370, label %lor.lhs.false360

lor.lhs.false360:                                 ; preds = %lor.lhs.false352
  %234 = load i32, i32* %len325, align 4
  %cmp361 = icmp slt i32 %234, 0
  br i1 %cmp361, label %cond.true370, label %lor.lhs.false363

lor.lhs.false363:                                 ; preds = %lor.lhs.false360
  %235 = load i32, i32* %len325, align 4
  %conv364 = sext i32 %235 to i64
  %236 = load i8*, i8** %strend, align 8
  %237 = load i8*, i8** %s338, align 8
  %sub.ptr.lhs.cast365 = ptrtoint i8* %236 to i64
  %sub.ptr.rhs.cast366 = ptrtoint i8* %237 to i64
  %sub.ptr.sub367 = sub i64 %sub.ptr.lhs.cast365, %sub.ptr.rhs.cast366
  %cmp368 = icmp sgt i64 %conv364, %sub.ptr.sub367
  br i1 %cmp368, label %cond.true370, label %cond.false371

cond.true370:                                     ; preds = %lor.lhs.false363, %lor.lhs.false360, %lor.lhs.false352, %if.then324
  br i1 true, label %if.then372, label %if.end386

cond.false371:                                    ; preds = %lor.lhs.false363
  br i1 false, label %if.then372, label %if.end386

if.then372:                                       ; preds = %cond.false371, %cond.true370
  %238 = load i32, i32* %i, align 4
  %conv373 = sext i32 %238 to i64
  %239 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call374 = call %struct.regexp* @S_ReANY(%struct.p5rx* %239)
  %offs375 = getelementptr inbounds %struct.regexp, %struct.regexp* %call374, i32 0, i32 17
  %240 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs375, align 8
  %241 = load i32, i32* %i, align 4
  %idxprom376 = sext i32 %241 to i64
  %arrayidx377 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %240, i64 %idxprom376
  %start378 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx377, i32 0, i32 0
  %242 = load i64, i64* %start378, align 8
  %243 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call379 = call %struct.regexp* @S_ReANY(%struct.p5rx* %243)
  %offs380 = getelementptr inbounds %struct.regexp, %struct.regexp* %call379, i32 0, i32 17
  %244 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs380, align 8
  %245 = load i32, i32* %i, align 4
  %idxprom381 = sext i32 %245 to i64
  %arrayidx382 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %244, i64 %idxprom381
  %end383 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx382, i32 0, i32 1
  %246 = load i64, i64* %end383, align 8
  %247 = load i8*, i8** %s338, align 8
  %248 = load i8*, i8** %strend, align 8
  %249 = load i32, i32* %len325, align 4
  %conv384 = sext i32 %249 to i64
  %call385 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.15, i64 0, i64 0), i64 %conv373, i64 %242, i64 %246, i8* %247, i8* %248, i64 %conv384)
  store %struct.op* %call385, %struct.op** %retval, align 8
  br label %return

if.end386:                                        ; preds = %cond.false371, %cond.true370
  %250 = load %struct.sv**, %struct.sv*** %sp, align 8
  %251 = load %struct.sv*, %struct.sv** %250, align 8
  %252 = load i8*, i8** %s338, align 8
  %253 = load i32, i32* %len325, align 4
  %conv387 = sext i32 %253 to i64
  call void @Perl_sv_setpvn(%struct.sv* %251, i8* %252, i64 %conv387)
  %254 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags388 = getelementptr inbounds %struct.sv, %struct.sv* %254, i32 0, i32 2
  %255 = load i32, i32* %sv_flags388, align 4
  %and389 = and i32 %255, 536870912
  %tobool390 = icmp ne i32 %and389, 0
  br i1 %tobool390, label %land.lhs.true391, label %if.end403

land.lhs.true391:                                 ; preds = %if.end386
  %256 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints392 = getelementptr inbounds %struct.cop, %struct.cop* %256, i32 0, i32 10
  %257 = load i32, i32* %cop_hints392, align 8
  %add393 = add i32 %257, 0
  %and394 = and i32 %add393, 8
  %tobool395 = icmp ne i32 %and394, 0
  br i1 %tobool395, label %if.end403, label %land.lhs.true396

land.lhs.true396:                                 ; preds = %land.lhs.true391
  %258 = load i8*, i8** %s338, align 8
  %259 = load i32, i32* %len325, align 4
  %conv397 = sext i32 %259 to i64
  %call398 = call zeroext i1 @Perl_is_utf8_string(i8* %258, i64 %conv397)
  br i1 %call398, label %if.then400, label %if.end403

if.then400:                                       ; preds = %land.lhs.true396
  %260 = load %struct.sv**, %struct.sv*** %sp, align 8
  %261 = load %struct.sv*, %struct.sv** %260, align 8
  %sv_flags401 = getelementptr inbounds %struct.sv, %struct.sv* %261, i32 0, i32 2
  %262 = load i32, i32* %sv_flags401, align 4
  %or402 = or i32 %262, 536870912
  store i32 %or402, i32* %sv_flags401, align 4
  br label %if.end403

if.end403:                                        ; preds = %if.then400, %land.lhs.true396, %land.lhs.true391, %if.end386
  br label %if.end404

if.end404:                                        ; preds = %if.end403, %cond.false323, %cond.true322
  br label %for.inc

for.inc:                                          ; preds = %if.end404
  %263 = load i32, i32* %i, align 4
  %inc = add nsw i32 %263, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %264 = load i32, i32* %global, align 4
  %tobool405 = icmp ne i32 %264, 0
  br i1 %tobool405, label %if.then406, label %if.end427

if.then406:                                       ; preds = %for.end
  %265 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call407 = call %struct.regexp* @S_ReANY(%struct.p5rx* %265)
  %offs408 = getelementptr inbounds %struct.regexp, %struct.regexp* %call407, i32 0, i32 17
  %266 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs408, align 8
  %arrayidx409 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %266, i64 0
  %end410 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx409, i32 0, i32 1
  %267 = load i64, i64* %end410, align 8
  store i64 %267, i64* %curpos, align 8
  %268 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call411 = call %struct.regexp* @S_ReANY(%struct.p5rx* %268)
  %offs412 = getelementptr inbounds %struct.regexp, %struct.regexp* %call411, i32 0, i32 17
  %269 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs412, align 8
  %arrayidx413 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %269, i64 0
  %start414 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx413, i32 0, i32 0
  %270 = load i64, i64* %start414, align 8
  %271 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call415 = call %struct.regexp* @S_ReANY(%struct.p5rx* %271)
  %gofs416 = getelementptr inbounds %struct.regexp, %struct.regexp* %call415, i32 0, i32 10
  %272 = load i64, i64* %gofs416, align 8
  %add417 = add nsw i64 %270, %272
  %273 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call418 = call %struct.regexp* @S_ReANY(%struct.p5rx* %273)
  %offs419 = getelementptr inbounds %struct.regexp, %struct.regexp* %call418, i32 0, i32 17
  %274 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs419, align 8
  %arrayidx420 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %274, i64 0
  %end421 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx420, i32 0, i32 1
  %275 = load i64, i64* %end421, align 8
  %cmp422 = icmp eq i64 %add417, %275
  %conv423 = zext i1 %cmp422 to i32
  store i32 %conv423, i32* %had_zerolen, align 4
  %276 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %276, %struct.sv*** @PL_stack_sp, align 8
  %277 = load i8, i8* %r_flags, align 1
  %conv424 = zext i8 %277 to i32
  %or425 = or i32 %conv424, 24
  %conv426 = trunc i32 %or425 to i8
  store i8 %conv426, i8* %r_flags, align 1
  br label %play_it_again

if.end427:                                        ; preds = %for.end
  br label %do.body428

do.body428:                                       ; preds = %if.end427
  %278 = load i32, i32* @PL_savestack_ix, align 4
  %279 = load i32, i32* %oldsave, align 4
  %cmp429 = icmp sgt i32 %278, %279
  br i1 %cmp429, label %if.then431, label %if.end432

if.then431:                                       ; preds = %do.body428
  %280 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %280)
  br label %if.end432

if.end432:                                        ; preds = %if.then431, %do.body428
  br label %do.end433

do.end433:                                        ; preds = %if.end432
  %281 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %281, %struct.sv*** @PL_stack_sp, align 8
  %282 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next434 = getelementptr inbounds %struct.op, %struct.op* %282, i32 0, i32 0
  %283 = load %struct.op*, %struct.op** %op_next434, align 8
  store %struct.op* %283, %struct.op** %retval, align 8
  br label %return

nope:                                             ; preds = %if.then143, %if.then105, %if.then81
  %284 = load i32, i32* %global, align 4
  %tobool435 = icmp ne i32 %284, 0
  br i1 %tobool435, label %land.lhs.true436, label %if.end449

land.lhs.true436:                                 ; preds = %nope
  %285 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmflags437 = getelementptr inbounds %struct.pmop, %struct.pmop* %285, i32 0, i32 10
  %286 = load i32, i32* %op_pmflags437, align 8
  %and438 = and i32 %286, 33554432
  %tobool439 = icmp ne i32 %and438, 0
  br i1 %tobool439, label %if.end449, label %if.then440

if.then440:                                       ; preds = %land.lhs.true436
  %287 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool441 = icmp ne %struct.magic* %287, null
  br i1 %tobool441, label %if.end444, label %if.then442

if.then442:                                       ; preds = %if.then440
  %288 = load %struct.sv*, %struct.sv** %targ, align 8
  %call443 = call %struct.magic* @Perl_mg_find_mglob(%struct.sv* %288)
  store %struct.magic* %call443, %struct.magic** %mg, align 8
  br label %if.end444

if.end444:                                        ; preds = %if.then442, %if.then440
  %289 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool445 = icmp ne %struct.magic* %289, null
  br i1 %tobool445, label %if.then446, label %if.end448

if.then446:                                       ; preds = %if.end444
  %290 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len447 = getelementptr inbounds %struct.magic, %struct.magic* %290, i32 0, i32 5
  store i64 -1, i64* %mg_len447, align 8
  br label %if.end448

if.end448:                                        ; preds = %if.then446, %if.end444
  br label %if.end449

if.end449:                                        ; preds = %if.end448, %land.lhs.true436, %nope
  br label %do.body450

do.body450:                                       ; preds = %if.end449
  %291 = load i32, i32* @PL_savestack_ix, align 4
  %292 = load i32, i32* %oldsave, align 4
  %cmp451 = icmp sgt i32 %291, %292
  br i1 %cmp451, label %if.then453, label %if.end454

if.then453:                                       ; preds = %do.body450
  %293 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %293)
  br label %if.end454

if.end454:                                        ; preds = %if.then453, %do.body450
  br label %do.end455

do.end455:                                        ; preds = %if.end454
  %294 = load i32, i32* %gimme, align 4
  %cmp456 = icmp eq i32 %294, 3
  br i1 %cmp456, label %if.then458, label %if.end460

if.then458:                                       ; preds = %do.end455
  %295 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %295, %struct.sv*** @PL_stack_sp, align 8
  %296 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next459 = getelementptr inbounds %struct.op, %struct.op* %296, i32 0, i32 0
  %297 = load %struct.op*, %struct.op** %op_next459, align 8
  store %struct.op* %297, %struct.op** %retval, align 8
  br label %return

if.end460:                                        ; preds = %do.end455
  %298 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr461 = getelementptr inbounds %struct.sv*, %struct.sv** %298, i32 1
  store %struct.sv** %incdec.ptr461, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr461, align 8
  %299 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %299, %struct.sv*** @PL_stack_sp, align 8
  %300 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next462 = getelementptr inbounds %struct.op, %struct.op* %300, i32 0, i32 0
  %301 = load %struct.op*, %struct.op** %op_next462, align 8
  store %struct.op* %301, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end460, %if.then458, %do.end433, %if.then372, %do.end262, %if.then65
  %302 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %302
}

declare dso_local %struct.magic* @Perl_mg_find_mglob(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_MgBYTEPOS(%struct.magic* %mg, %struct.sv* %sv, i8* %s, i64 %len) #0 {
entry:
  %retval = alloca i64, align 8
  %mg.addr = alloca %struct.magic*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %pos = alloca i64, align 8
  store %struct.magic* %mg, %struct.magic** %mg.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.magic*, %struct.magic** %mg.addr, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %0, i32 0, i32 4
  %1 = load i8, i8* %mg_flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %3, 536870912
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %4, i32 0, i32 10
  %5 = load i32, i32* %cop_hints, align 8
  %add = add i32 %5, 0
  %and3 = and i32 %add, 8
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false, %entry
  %6 = load %struct.magic*, %struct.magic** %mg.addr, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %6, i32 0, i32 5
  %7 = load i64, i64* %mg_len, align 8
  store i64 %7, i64* %retval, align 8
  br label %return

if.else:                                          ; preds = %land.lhs.true
  %8 = load %struct.magic*, %struct.magic** %mg.addr, align 8
  %mg_len5 = getelementptr inbounds %struct.magic, %struct.magic* %8, i32 0, i32 5
  %9 = load i64, i64* %mg_len5, align 8
  store i64 %9, i64* %pos, align 8
  %10 = load i64, i64* %pos, align 8
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %12, 2097152
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.true, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %if.else
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %14, 2048
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %land.lhs.true13, label %cond.false

land.lhs.true13:                                  ; preds = %lor.lhs.false9
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %16 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %17, 1048576
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %land.lhs.true17, label %cond.false

land.lhs.true17:                                  ; preds = %land.lhs.true13
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u18 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 3
  %svu_rv19 = bitcast %union.anon* %sv_u18 to %struct.sv**
  %19 = load %struct.sv*, %struct.sv** %svu_rv19, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any, align 8
  %21 = bitcast i8* %20 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %21, i32 0, i32 0
  %22 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags20 = getelementptr inbounds %struct.hv, %struct.hv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %23, 268435456
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true17, %if.else
  %24 = load i8*, i8** %s.addr, align 8
  %25 = load i8*, i8** %s.addr, align 8
  %26 = load i64, i64* %len.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 %26
  %call = call i64 @Perl_utf8_length(i8* %24, i8* %add.ptr)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true17, %land.lhs.true13, %lor.lhs.false9
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call23 = call i64 @Perl_sv_len_utf8(%struct.sv* %27)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ %call23, %cond.false ]
  %cmp = icmp ugt i64 %10, %cond
  br i1 %cmp, label %if.then25, label %if.end

if.then25:                                        ; preds = %cond.end
  %28 = load i64, i64* %len.addr, align 8
  %add26 = add i64 %28, 1
  store i64 %add26, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %30 = load i8*, i8** %s.addr, align 8
  %31 = load i64, i64* %pos, align 8
  %call27 = call i64 @S_sv_or_pv_pos_u2b(%struct.sv* %29, i8* %30, i64 %31, i64* null)
  store i64 %call27, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then25, %if.then
  %32 = load i64, i64* %retval, align 8
  ret i64 %32
}

declare dso_local %struct.magic* @Perl_sv_magicext_mglob(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_sv_only_taint_gmagic(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i1, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %2, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %3 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  store %struct.magic* %3, %struct.magic** %mg, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %4 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool = icmp ne %struct.magic* %4, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_type = getelementptr inbounds %struct.magic, %struct.magic* %5, i32 0, i32 3
  %6 = load i8, i8* %mg_type, align 2
  %conv = sext i8 %6 to i32
  %cmp = icmp ne i32 %conv, 116
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %7 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %7, i32 0, i32 4
  %8 = load i8, i8* %mg_flags, align 1
  %conv2 = zext i8 %8 to i32
  %and = and i32 %conv2, 4
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.end, label %land.lhs.true4

land.lhs.true4:                                   ; preds = %land.lhs.true
  %9 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_virtual = getelementptr inbounds %struct.magic, %struct.magic* %9, i32 0, i32 1
  %10 = load %struct.mgvtbl*, %struct.mgvtbl** %mg_virtual, align 8
  %svt_get = getelementptr inbounds %struct.mgvtbl, %struct.mgvtbl* %10, i32 0, i32 0
  %11 = load i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)** %svt_get, align 8
  %tobool5 = icmp ne i32 (%struct.sv*, %struct.magic*)* %11, null
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true4
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true4, %land.lhs.true, %while.body
  %12 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_moremagic = getelementptr inbounds %struct.magic, %struct.magic* %12, i32 0, i32 0
  %13 = load %struct.magic*, %struct.magic** %mg_moremagic, align 8
  store %struct.magic* %13, %struct.magic** %mg, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then
  %14 = load i1, i1* %retval, align 1
  ret i1 %14
}

declare dso_local i64 @Perl_utf8_length(i8*, i8*) #1

declare dso_local zeroext i1 @Perl_is_utf8_string(i8*, i64) #1

declare dso_local zeroext i1 @Perl_do_open6(%struct.gv*, i8*, i64, %struct._PerlIO**, %struct.sv**, i32) #1

declare dso_local void @Perl_sv_untaint(%struct.sv*) #1

declare dso_local %struct._PerlIO** @Perl_nextargv(%struct.gv*, i1 zeroext) #1

declare dso_local zeroext i1 @Perl_do_close(%struct.gv*, i1 zeroext) #1

declare dso_local %struct._PerlIO** @Perl_start_glob(%struct.sv*, %struct.io*) #1

declare dso_local void @Perl_sv_unref_flags(%struct.sv*, i32) #1

declare dso_local i8* @Perl_sv_grow(%struct.sv*, i64) #1

declare dso_local i8* @Perl_sv_gets(%struct.sv*, %struct._PerlIO**, i32) #1

declare dso_local void @Perl_PerlIO_clearerr(%struct._PerlIO**) #1

declare dso_local void @Perl_ck_warner(i32, i8*, ...) #1

declare dso_local void @Perl_sv_force_normal_flags(%struct.sv*, i32) #1

declare dso_local i32 @Perl_sv_backoff(%struct.sv*) #1

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #5

; Function Attrs: nounwind
declare dso_local i32 @stat64(i8*, %struct.stat*) #4

declare dso_local zeroext i1 @Perl_is_utf8_string_loclen(i8*, i64, i8**, i64*) #1

declare dso_local i8* @Perl_safesysrealloc(i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_helem() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %he = alloca %struct.he*, align 8
  %svp = alloca %struct.sv**, align 8
  %keysv = alloca %struct.sv*, align 8
  %hv = alloca %struct.hv*, align 8
  %lval = alloca i32, align 4
  %defer = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %localizing = alloca i8, align 1
  %preeminent = alloca i8, align 1
  %mg = alloca %struct.magic*, align 8
  %stash = alloca %struct.hv*, align 8
  %lv = alloca %struct.sv*, align 8
  %key2 = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %keysv, align 8
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %5 = bitcast %struct.sv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.hv*
  store %struct.hv* %6, %struct.hv** %hv, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 5
  %8 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %8 to i32
  %and = and i32 %conv, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 6
  %10 = load i8, i8* %op_private, align 1
  %conv2 = zext i8 %10 to i32
  %and3 = and i32 %conv2, 8
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %call = call i32 @Perl_is_lvalue_sub()
  %tobool5 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %11 = phi i1 [ false, %lor.rhs ], [ %tobool5, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %entry
  %12 = phi i1 [ true, %entry ], [ %11, %land.end ]
  %lor.ext = zext i1 %12 to i32
  store i32 %lor.ext, i32* %lval, align 4
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private6 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 6
  %14 = load i8, i8* %op_private6, align 1
  %conv7 = zext i8 %14 to i32
  %and8 = and i32 %conv7, 64
  store i32 %and8, i32* %defer, align 4
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private9 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 6
  %16 = load i8, i8* %op_private9, align 1
  %conv10 = zext i8 %16 to i32
  %and11 = and i32 %conv10, 128
  %tobool12 = icmp ne i32 %and11, 0
  %frombool = zext i1 %tobool12 to i8
  store i8 %frombool, i8* %localizing, align 1
  store i8 1, i8* %preeminent, align 1
  %17 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and13 = and i32 %18, 255
  %cmp = icmp ne i32 %and13, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.end
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr15 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 1
  store %struct.sv** %incdec.ptr15, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr15, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %20, %struct.sv*** @PL_stack_sp, align 8
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 0
  %22 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %22, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.end
  %23 = load i8, i8* %localizing, align 1
  %tobool16 = trunc i8 %23 to i1
  br i1 %tobool16, label %if.then17, label %if.end41

if.then17:                                        ; preds = %if.end
  %24 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags18 = getelementptr inbounds %struct.hv, %struct.hv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %25, 8388608
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %lor.lhs.false, label %if.then34

lor.lhs.false:                                    ; preds = %if.then17
  %26 = load %struct.hv*, %struct.hv** %hv, align 8
  %27 = bitcast %struct.hv* %26 to %struct.sv*
  %call21 = call %struct.magic* @Perl_mg_find(%struct.sv* %27, i32 80)
  store %struct.magic* %call21, %struct.magic** %mg, align 8
  %tobool22 = icmp ne %struct.magic* %call21, null
  br i1 %tobool22, label %lor.lhs.false23, label %if.then34

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %28 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %28, i32 0, i32 6
  %29 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool24 = icmp ne %struct.sv* %29, null
  br i1 %tobool24, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false23
  %30 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj25 = getelementptr inbounds %struct.magic, %struct.magic* %30, i32 0, i32 6
  %31 = load %struct.sv*, %struct.sv** %mg_obj25, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false23
  %32 = load %struct.hv*, %struct.hv** %hv, align 8
  %33 = bitcast %struct.hv* %32 to i8*
  %34 = bitcast i8* %33 to %struct.sv*
  %call26 = call %struct.sv* @Perl_newRV(%struct.sv* %34)
  %call27 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call26)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %31, %cond.true ], [ %call27, %cond.false ]
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %cond, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %35 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any, align 8
  %37 = bitcast i8* %36 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %37, i32 0, i32 0
  %38 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %38, %struct.hv** %stash, align 8
  %tobool28 = icmp ne %struct.hv* %38, null
  br i1 %tobool28, label %land.lhs.true, label %if.end40

land.lhs.true:                                    ; preds = %cond.end
  %39 = load %struct.hv*, %struct.hv** %stash, align 8
  %call29 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %39, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0), i32 1)
  %tobool30 = icmp ne %struct.gv* %call29, null
  br i1 %tobool30, label %land.lhs.true31, label %if.end40

land.lhs.true31:                                  ; preds = %land.lhs.true
  %40 = load %struct.hv*, %struct.hv** %stash, align 8
  %call32 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %40, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i64 0, i64 0), i32 1)
  %tobool33 = icmp ne %struct.gv* %call32, null
  br i1 %tobool33, label %if.then34, label %if.end40

if.then34:                                        ; preds = %land.lhs.true31, %lor.lhs.false, %if.then17
  %41 = load %struct.hv*, %struct.hv** %hv, align 8
  %42 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call35 = call i8* @Perl_hv_common(%struct.hv* %41, %struct.sv* %42, i8* null, i64 0, i32 0, i32 8, %struct.sv* null, i32 0)
  %tobool36 = icmp ne i8* %call35, null
  %43 = zext i1 %tobool36 to i64
  %cond37 = select i1 %tobool36, i32 1, i32 0
  %tobool38 = icmp ne i32 %cond37, 0
  %frombool39 = zext i1 %tobool38 to i8
  store i8 %frombool39, i8* %preeminent, align 1
  br label %if.end40

if.end40:                                         ; preds = %if.then34, %land.lhs.true31, %land.lhs.true, %cond.end
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end
  %44 = load %struct.hv*, %struct.hv** %hv, align 8
  %45 = load %struct.sv*, %struct.sv** %keysv, align 8
  %46 = load i32, i32* %lval, align 4
  %tobool42 = icmp ne i32 %46, 0
  br i1 %tobool42, label %land.rhs43, label %land.end45

land.rhs43:                                       ; preds = %if.end41
  %47 = load i32, i32* %defer, align 4
  %tobool44 = icmp ne i32 %47, 0
  %lnot = xor i1 %tobool44, true
  br label %land.end45

land.end45:                                       ; preds = %land.rhs43, %if.end41
  %48 = phi i1 [ false, %if.end41 ], [ %lnot, %land.rhs43 ]
  %49 = zext i1 %48 to i64
  %cond46 = select i1 %48, i32 16, i32 0
  %call47 = call i8* @Perl_hv_common(%struct.hv* %44, %struct.sv* %45, i8* null, i64 0, i32 0, i32 %cond46, %struct.sv* null, i32 0)
  %50 = bitcast i8* %call47 to %struct.he*
  store %struct.he* %50, %struct.he** %he, align 8
  %51 = load %struct.he*, %struct.he** %he, align 8
  %tobool48 = icmp ne %struct.he* %51, null
  br i1 %tobool48, label %cond.true49, label %cond.false50

cond.true49:                                      ; preds = %land.end45
  %52 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %52, i32 0, i32 2
  %hent_val = bitcast %union.anon.1* %he_valu to %struct.sv**
  br label %cond.end51

cond.false50:                                     ; preds = %land.end45
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false50, %cond.true49
  %cond52 = phi %struct.sv** [ %hent_val, %cond.true49 ], [ null, %cond.false50 ]
  store %struct.sv** %cond52, %struct.sv*** %svp, align 8
  %53 = load i32, i32* %lval, align 4
  %tobool53 = icmp ne i32 %53, 0
  br i1 %tobool53, label %if.then54, label %if.end177

if.then54:                                        ; preds = %cond.end51
  %54 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool55 = icmp ne %struct.sv** %54, null
  br i1 %tobool55, label %lor.lhs.false56, label %if.then61

lor.lhs.false56:                                  ; preds = %if.then54
  %55 = load %struct.sv**, %struct.sv*** %svp, align 8
  %56 = load %struct.sv*, %struct.sv** %55, align 8
  %tobool57 = icmp ne %struct.sv* %56, null
  br i1 %tobool57, label %lor.lhs.false58, label %if.then61

lor.lhs.false58:                                  ; preds = %lor.lhs.false56
  %57 = load %struct.sv**, %struct.sv*** %svp, align 8
  %58 = load %struct.sv*, %struct.sv** %57, align 8
  %cmp59 = icmp eq %struct.sv* %58, @PL_sv_undef
  br i1 %cmp59, label %if.then61, label %if.end74

if.then61:                                        ; preds = %lor.lhs.false58, %lor.lhs.false56, %if.then54
  %59 = load i32, i32* %defer, align 4
  %tobool62 = icmp ne i32 %59, 0
  br i1 %tobool62, label %if.end65, label %if.then63

if.then63:                                        ; preds = %if.then61
  %60 = load %struct.sv*, %struct.sv** %keysv, align 8
  %61 = bitcast %struct.sv* %60 to i8*
  %call64 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_helem_sv, i64 0, i64 0), i8* %61)
  store %struct.op* %call64, %struct.op** %retval, align 8
  br label %return

if.end65:                                         ; preds = %if.then61
  %call66 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call66, %struct.sv** %lv, align 8
  %62 = load %struct.sv*, %struct.sv** %lv, align 8
  call void @Perl_sv_upgrade(%struct.sv* %62, i32 10)
  %63 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any67, align 8
  %65 = bitcast i8* %64 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %65, i32 0, i32 9
  store i8 121, i8* %xlv_type, align 8
  %66 = load %struct.sv*, %struct.sv** %lv, align 8
  %67 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call68 = call %struct.sv* @Perl_newSVsv(%struct.sv* %67)
  store %struct.sv* %call68, %struct.sv** %key2, align 8
  call void @Perl_sv_magic(%struct.sv* %66, %struct.sv* %call68, i32 121, i8* null, i32 0)
  %68 = load %struct.sv*, %struct.sv** %key2, align 8
  %69 = bitcast %struct.sv* %68 to i8*
  %70 = bitcast i8* %69 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %70)
  %71 = load %struct.hv*, %struct.hv** %hv, align 8
  %72 = bitcast %struct.hv* %71 to i8*
  %73 = bitcast i8* %72 to %struct.sv*
  %call69 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %73)
  %74 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any70 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 0
  %75 = load i8*, i8** %sv_any70, align 8
  %76 = bitcast i8* %75 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %76, i32 0, i32 8
  store %struct.sv* %call69, %struct.sv** %xlv_targ, align 8
  %77 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any71 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 0
  %78 = load i8*, i8** %sv_any71, align 8
  %79 = bitcast i8* %78 to %struct.xpvlv*
  %xlv_targlen = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %79, i32 0, i32 7
  store i64 1, i64* %xlv_targlen, align 8
  %80 = load %struct.sv*, %struct.sv** %lv, align 8
  %81 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr72 = getelementptr inbounds %struct.sv*, %struct.sv** %81, i32 1
  store %struct.sv** %incdec.ptr72, %struct.sv*** %sp, align 8
  store %struct.sv* %80, %struct.sv** %incdec.ptr72, align 8
  %82 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %82, %struct.sv*** @PL_stack_sp, align 8
  %83 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next73 = getelementptr inbounds %struct.op, %struct.op* %83, i32 0, i32 0
  %84 = load %struct.op*, %struct.op** %op_next73, align 8
  store %struct.op* %84, %struct.op** %retval, align 8
  br label %return

if.end74:                                         ; preds = %lor.lhs.false58
  %85 = load i8, i8* %localizing, align 1
  %tobool75 = trunc i8 %85 to i1
  br i1 %tobool75, label %if.then76, label %if.else163

if.then76:                                        ; preds = %if.end74
  %86 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags77 = getelementptr inbounds %struct.hv, %struct.hv* %86, i32 0, i32 2
  %87 = load i32, i32* %sv_flags77, align 4
  %and78 = and i32 %87, 33554432
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %land.lhs.true80, label %cond.false141

land.lhs.true80:                                  ; preds = %if.then76
  %88 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u81 = getelementptr inbounds %struct.hv, %struct.hv* %88, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u81 to %struct.he***
  %89 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %90 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any82 = getelementptr inbounds %struct.hv, %struct.hv* %90, i32 0, i32 0
  %91 = load %struct.xpvhv*, %struct.xpvhv** %sv_any82, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %91, i32 0, i32 3
  %92 = load i64, i64* %xhv_max, align 8
  %add = add i64 %92, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %89, i64 %add
  %93 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %93, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %94 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool83 = icmp ne %struct.hek* %94, null
  br i1 %tobool83, label %land.lhs.true84, label %cond.false141

land.lhs.true84:                                  ; preds = %land.lhs.true80
  %95 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u85 = getelementptr inbounds %struct.hv, %struct.hv* %95, i32 0, i32 3
  %svu_hash86 = bitcast %union.anon.5* %sv_u85 to %struct.he***
  %96 = load %struct.he**, %struct.he*** %svu_hash86, align 8
  %97 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any87 = getelementptr inbounds %struct.hv, %struct.hv* %97, i32 0, i32 0
  %98 = load %struct.xpvhv*, %struct.xpvhv** %sv_any87, align 8
  %xhv_max88 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %98, i32 0, i32 3
  %99 = load i64, i64* %xhv_max88, align 8
  %add89 = add i64 %99, 1
  %arrayidx90 = getelementptr inbounds %struct.he*, %struct.he** %96, i64 %add89
  %100 = bitcast %struct.he** %arrayidx90 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %100, i32 0, i32 4
  %101 = load i32, i32* %xhv_name_count, align 4
  %tobool91 = icmp ne i32 %101, 0
  br i1 %tobool91, label %cond.true92, label %cond.false101

cond.true92:                                      ; preds = %land.lhs.true84
  %102 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u93 = getelementptr inbounds %struct.hv, %struct.hv* %102, i32 0, i32 3
  %svu_hash94 = bitcast %union.anon.5* %sv_u93 to %struct.he***
  %103 = load %struct.he**, %struct.he*** %svu_hash94, align 8
  %104 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any95 = getelementptr inbounds %struct.hv, %struct.hv* %104, i32 0, i32 0
  %105 = load %struct.xpvhv*, %struct.xpvhv** %sv_any95, align 8
  %xhv_max96 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %105, i32 0, i32 3
  %106 = load i64, i64* %xhv_max96, align 8
  %add97 = add i64 %106, 1
  %arrayidx98 = getelementptr inbounds %struct.he*, %struct.he** %103, i64 %add97
  %107 = bitcast %struct.he** %arrayidx98 to %struct.xpvhv_aux*
  %xhv_name_u99 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %107, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u99 to %struct.hek***
  %108 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %109 = load %struct.hek*, %struct.hek** %108, align 8
  %tobool100 = icmp ne %struct.hek* %109, null
  br i1 %tobool100, label %cond.true111, label %cond.false141

cond.false101:                                    ; preds = %land.lhs.true84
  %110 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u102 = getelementptr inbounds %struct.hv, %struct.hv* %110, i32 0, i32 3
  %svu_hash103 = bitcast %union.anon.5* %sv_u102 to %struct.he***
  %111 = load %struct.he**, %struct.he*** %svu_hash103, align 8
  %112 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any104 = getelementptr inbounds %struct.hv, %struct.hv* %112, i32 0, i32 0
  %113 = load %struct.xpvhv*, %struct.xpvhv** %sv_any104, align 8
  %xhv_max105 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %113, i32 0, i32 3
  %114 = load i64, i64* %xhv_max105, align 8
  %add106 = add i64 %114, 1
  %arrayidx107 = getelementptr inbounds %struct.he*, %struct.he** %111, i64 %add106
  %115 = bitcast %struct.he** %arrayidx107 to %struct.xpvhv_aux*
  %xhv_name_u108 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %115, i32 0, i32 0
  %xhvnameu_name109 = bitcast %union._xhvnameu* %xhv_name_u108 to %struct.hek**
  %116 = load %struct.hek*, %struct.hek** %xhvnameu_name109, align 8
  %tobool110 = icmp ne %struct.hek* %116, null
  br i1 %tobool110, label %cond.true111, label %cond.false141

cond.true111:                                     ; preds = %cond.false101, %cond.true92
  %117 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u112 = getelementptr inbounds %struct.hv, %struct.hv* %117, i32 0, i32 3
  %svu_hash113 = bitcast %union.anon.5* %sv_u112 to %struct.he***
  %118 = load %struct.he**, %struct.he*** %svu_hash113, align 8
  %119 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any114 = getelementptr inbounds %struct.hv, %struct.hv* %119, i32 0, i32 0
  %120 = load %struct.xpvhv*, %struct.xpvhv** %sv_any114, align 8
  %xhv_max115 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %120, i32 0, i32 3
  %121 = load i64, i64* %xhv_max115, align 8
  %add116 = add i64 %121, 1
  %arrayidx117 = getelementptr inbounds %struct.he*, %struct.he** %118, i64 %add116
  %122 = bitcast %struct.he** %arrayidx117 to %struct.xpvhv_aux*
  %xhv_name_count118 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %122, i32 0, i32 4
  %123 = load i32, i32* %xhv_name_count118, align 4
  %tobool119 = icmp ne i32 %123, 0
  br i1 %tobool119, label %cond.true120, label %cond.false129

cond.true120:                                     ; preds = %cond.true111
  %124 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u121 = getelementptr inbounds %struct.hv, %struct.hv* %124, i32 0, i32 3
  %svu_hash122 = bitcast %union.anon.5* %sv_u121 to %struct.he***
  %125 = load %struct.he**, %struct.he*** %svu_hash122, align 8
  %126 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any123 = getelementptr inbounds %struct.hv, %struct.hv* %126, i32 0, i32 0
  %127 = load %struct.xpvhv*, %struct.xpvhv** %sv_any123, align 8
  %xhv_max124 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %127, i32 0, i32 3
  %128 = load i64, i64* %xhv_max124, align 8
  %add125 = add i64 %128, 1
  %arrayidx126 = getelementptr inbounds %struct.he*, %struct.he** %125, i64 %add125
  %129 = bitcast %struct.he** %arrayidx126 to %struct.xpvhv_aux*
  %xhv_name_u127 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %129, i32 0, i32 0
  %xhvnameu_names128 = bitcast %union._xhvnameu* %xhv_name_u127 to %struct.hek***
  %130 = load %struct.hek**, %struct.hek*** %xhvnameu_names128, align 8
  %131 = load %struct.hek*, %struct.hek** %130, align 8
  br label %cond.end138

cond.false129:                                    ; preds = %cond.true111
  %132 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u130 = getelementptr inbounds %struct.hv, %struct.hv* %132, i32 0, i32 3
  %svu_hash131 = bitcast %union.anon.5* %sv_u130 to %struct.he***
  %133 = load %struct.he**, %struct.he*** %svu_hash131, align 8
  %134 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any132 = getelementptr inbounds %struct.hv, %struct.hv* %134, i32 0, i32 0
  %135 = load %struct.xpvhv*, %struct.xpvhv** %sv_any132, align 8
  %xhv_max133 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %135, i32 0, i32 3
  %136 = load i64, i64* %xhv_max133, align 8
  %add134 = add i64 %136, 1
  %arrayidx135 = getelementptr inbounds %struct.he*, %struct.he** %133, i64 %add134
  %137 = bitcast %struct.he** %arrayidx135 to %struct.xpvhv_aux*
  %xhv_name_u136 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %137, i32 0, i32 0
  %xhvnameu_name137 = bitcast %union._xhvnameu* %xhv_name_u136 to %struct.hek**
  %138 = load %struct.hek*, %struct.hek** %xhvnameu_name137, align 8
  br label %cond.end138

cond.end138:                                      ; preds = %cond.false129, %cond.true120
  %cond139 = phi %struct.hek* [ %131, %cond.true120 ], [ %138, %cond.false129 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond139, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %tobool140 = icmp ne i8* %arraydecay, null
  br i1 %tobool140, label %land.lhs.true142, label %if.else

cond.false141:                                    ; preds = %cond.false101, %cond.true92, %land.lhs.true80, %if.then76
  br i1 false, label %land.lhs.true142, label %if.else

land.lhs.true142:                                 ; preds = %cond.false141, %cond.end138
  %139 = load %struct.sv**, %struct.sv*** %svp, align 8
  %140 = load %struct.sv*, %struct.sv** %139, align 8
  %sv_flags143 = getelementptr inbounds %struct.sv, %struct.sv* %140, i32 0, i32 2
  %141 = load i32, i32* %sv_flags143, align 4
  %and144 = and i32 %141, 255
  %cmp145 = icmp eq i32 %and144, 9
  br i1 %cmp145, label %if.then147, label %if.else

if.then147:                                       ; preds = %land.lhs.true142
  %142 = load %struct.sv**, %struct.sv*** %svp, align 8
  %143 = load %struct.sv*, %struct.sv** %142, align 8
  %144 = bitcast %struct.sv* %143 to i8*
  %145 = bitcast i8* %144 to %struct.gv*
  %146 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags148 = getelementptr inbounds %struct.op, %struct.op* %146, i32 0, i32 5
  %147 = load i8, i8* %op_flags148, align 2
  %conv149 = zext i8 %147 to i32
  %and150 = and i32 %conv149, 128
  %tobool151 = icmp ne i32 %and150, 0
  %lnot152 = xor i1 %tobool151, true
  %lnot.ext = zext i1 %lnot152 to i32
  call void @Perl_save_gp(%struct.gv* %145, i32 %lnot.ext)
  br label %if.end162

if.else:                                          ; preds = %land.lhs.true142, %cond.false141, %cond.end138
  %148 = load i8, i8* %preeminent, align 1
  %tobool153 = trunc i8 %148 to i1
  br i1 %tobool153, label %if.then154, label %if.else160

if.then154:                                       ; preds = %if.else
  %149 = load %struct.hv*, %struct.hv** %hv, align 8
  %150 = load %struct.sv*, %struct.sv** %keysv, align 8
  %151 = load %struct.sv**, %struct.sv*** %svp, align 8
  %152 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags155 = getelementptr inbounds %struct.op, %struct.op* %152, i32 0, i32 5
  %153 = load i8, i8* %op_flags155, align 2
  %conv156 = zext i8 %153 to i32
  %and157 = and i32 %conv156, 128
  %tobool158 = icmp ne i32 %and157, 0
  %154 = zext i1 %tobool158 to i64
  %cond159 = select i1 %tobool158, i32 0, i32 1
  call void @Perl_save_helem_flags(%struct.hv* %149, %struct.sv* %150, %struct.sv** %151, i32 %cond159)
  br label %if.end161

if.else160:                                       ; preds = %if.else
  %155 = load %struct.hv*, %struct.hv** %hv, align 8
  %156 = bitcast %struct.hv* %155 to i8*
  %157 = bitcast i8* %156 to %struct.hv*
  %158 = load %struct.sv*, %struct.sv** %keysv, align 8
  call void @Perl_save_hdelete(%struct.hv* %157, %struct.sv* %158)
  br label %if.end161

if.end161:                                        ; preds = %if.else160, %if.then154
  br label %if.end162

if.end162:                                        ; preds = %if.end161, %if.then147
  br label %if.end176

if.else163:                                       ; preds = %if.end74
  %159 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private164 = getelementptr inbounds %struct.op, %struct.op* %159, i32 0, i32 6
  %160 = load i8, i8* %op_private164, align 1
  %conv165 = zext i8 %160 to i32
  %and166 = and i32 %conv165, 48
  %tobool167 = icmp ne i32 %and166, 0
  br i1 %tobool167, label %if.then168, label %if.end175

if.then168:                                       ; preds = %if.else163
  %161 = load %struct.sv**, %struct.sv*** %svp, align 8
  %162 = load %struct.sv*, %struct.sv** %161, align 8
  %163 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private169 = getelementptr inbounds %struct.op, %struct.op* %163, i32 0, i32 6
  %164 = load i8, i8* %op_private169, align 1
  %conv170 = zext i8 %164 to i32
  %and171 = and i32 %conv170, 48
  %call172 = call %struct.sv* @Perl_vivify_ref(%struct.sv* %162, i32 %and171)
  %165 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr173 = getelementptr inbounds %struct.sv*, %struct.sv** %165, i32 1
  store %struct.sv** %incdec.ptr173, %struct.sv*** %sp, align 8
  store %struct.sv* %call172, %struct.sv** %incdec.ptr173, align 8
  %166 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %166, %struct.sv*** @PL_stack_sp, align 8
  %167 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next174 = getelementptr inbounds %struct.op, %struct.op* %167, i32 0, i32 0
  %168 = load %struct.op*, %struct.op** %op_next174, align 8
  store %struct.op* %168, %struct.op** %retval, align 8
  br label %return

if.end175:                                        ; preds = %if.else163
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %if.end162
  br label %if.end177

if.end177:                                        ; preds = %if.end176, %cond.end51
  %169 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool178 = icmp ne %struct.sv** %169, null
  br i1 %tobool178, label %land.lhs.true179, label %cond.false182

land.lhs.true179:                                 ; preds = %if.end177
  %170 = load %struct.sv**, %struct.sv*** %svp, align 8
  %171 = load %struct.sv*, %struct.sv** %170, align 8
  %tobool180 = icmp ne %struct.sv* %171, null
  br i1 %tobool180, label %cond.true181, label %cond.false182

cond.true181:                                     ; preds = %land.lhs.true179
  %172 = load %struct.sv**, %struct.sv*** %svp, align 8
  %173 = load %struct.sv*, %struct.sv** %172, align 8
  br label %cond.end183

cond.false182:                                    ; preds = %land.lhs.true179, %if.end177
  br label %cond.end183

cond.end183:                                      ; preds = %cond.false182, %cond.true181
  %cond184 = phi %struct.sv* [ %173, %cond.true181 ], [ @PL_sv_undef, %cond.false182 ]
  store %struct.sv* %cond184, %struct.sv** %sv, align 8
  %174 = load i32, i32* %lval, align 4
  %tobool185 = icmp ne i32 %174, 0
  br i1 %tobool185, label %if.end196, label %land.lhs.true186

land.lhs.true186:                                 ; preds = %cond.end183
  %175 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags187 = getelementptr inbounds %struct.hv, %struct.hv* %175, i32 0, i32 2
  %176 = load i32, i32* %sv_flags187, align 4
  %and188 = and i32 %176, 8388608
  %tobool189 = icmp ne i32 %and188, 0
  br i1 %tobool189, label %land.lhs.true190, label %if.end196

land.lhs.true190:                                 ; preds = %land.lhs.true186
  %177 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags191 = getelementptr inbounds %struct.sv, %struct.sv* %177, i32 0, i32 2
  %178 = load i32, i32* %sv_flags191, align 4
  %and192 = and i32 %178, 2097152
  %tobool193 = icmp ne i32 %and192, 0
  br i1 %tobool193, label %if.then194, label %if.end196

if.then194:                                       ; preds = %land.lhs.true190
  %179 = load %struct.sv*, %struct.sv** %sv, align 8
  %call195 = call i32 @Perl_mg_get(%struct.sv* %179)
  br label %if.end196

if.end196:                                        ; preds = %if.then194, %land.lhs.true190, %land.lhs.true186, %cond.end183
  %180 = load %struct.sv*, %struct.sv** %sv, align 8
  %181 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr197 = getelementptr inbounds %struct.sv*, %struct.sv** %181, i32 1
  store %struct.sv** %incdec.ptr197, %struct.sv*** %sp, align 8
  store %struct.sv* %180, %struct.sv** %incdec.ptr197, align 8
  %182 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %182, %struct.sv*** @PL_stack_sp, align 8
  %183 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next198 = getelementptr inbounds %struct.op, %struct.op* %183, i32 0, i32 0
  %184 = load %struct.op*, %struct.op** %op_next198, align 8
  store %struct.op* %184, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end196, %if.then168, %if.end65, %if.then63, %if.then
  %185 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %185
}

declare dso_local %struct.sv* @Perl_newRV(%struct.sv*) #1

declare dso_local %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv*, i8*, i32) #1

declare dso_local %struct.sv* @Perl_newSVsv(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_SvREFCNT_inc(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %3
}

declare dso_local void @Perl_save_gp(%struct.gv*, i32) #1

declare dso_local void @Perl_save_helem_flags(%struct.hv*, %struct.sv*, %struct.sv**, i32) #1

declare dso_local void @Perl_save_hdelete(%struct.hv*, %struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gv* @S_softref2xv_lite(%struct.sv* %sv, i8* %what, i32 %type) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %what.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %what, i8** %what.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 6
  %1 = load i8, i8* %op_private, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %3, 65280
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 255
  %cmp = icmp eq i32 %and4, 8
  br i1 %cmp, label %if.then11, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %7, 16826623
  %cmp9 = icmp eq i32 %and8, 16777226
  br i1 %cmp9, label %if.then11, label %if.else

if.then11:                                        ; preds = %lor.lhs.false6, %lor.lhs.false, %if.then
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %10, 16384
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then11
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 2
  %14 = load i64, i64* %xpv_cur, align 8
  %cmp15 = icmp ugt i64 %14, 32
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then11
  %15 = phi i1 [ false, %if.then11 ], [ %cmp15, %land.rhs ]
  %16 = zext i1 %15 to i64
  %cond = select i1 %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)
  %17 = load i8*, i8** %what.addr, align 8
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_symref_sv, i64 0, i64 0), %struct.sv* %8, i8* %cond, i8* %17)
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false6
  %18 = load i8*, i8** %what.addr, align 8
  %call17 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i64 0, i64 0), i8* %18)
  br label %if.end

if.end:                                           ; preds = %if.else, %land.end
  br label %if.end18

if.end18:                                         ; preds = %if.end, %entry
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %20, 65280
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.end34, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %if.end18
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %22, 255
  %cmp25 = icmp eq i32 %and24, 8
  br i1 %cmp25, label %if.end34, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %lor.lhs.false22
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %24, 16826623
  %cmp30 = icmp eq i32 %and29, 16777226
  br i1 %cmp30, label %if.end34, label %if.then32

if.then32:                                        ; preds = %lor.lhs.false27
  %25 = load i8*, i8** %what.addr, align 8
  %call33 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i64 0, i64 0), i8* %25)
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %lor.lhs.false27, %lor.lhs.false22, %if.end18
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %27 = load i32, i32* %type.addr, align 4
  %call35 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %26, i32 2049, i32 %27)
  ret %struct.gv* %call35
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_multideref() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sv = alloca %struct.sv*, align 8
  %items = alloca %union.UNOP_AUX_item*, align 8
  %actions = alloca i64, align 8
  %sp = alloca %struct.sv**, align 8
  %elemsv = alloca %struct.sv*, align 8
  %elem = alloca i64, align 8
  %svp = alloca %struct.sv**, align 8
  %discard = alloca i32, align 4
  %lval = alloca i32, align 4
  %defer = alloca i32, align 4
  %localizing = alloca i8, align 1
  %preeminent = alloca i8, align 1
  %av = alloca %struct.av*, align 8
  %svp252 = alloca %struct.sv**, align 8
  %mg = alloca %struct.magic*, align 8
  %stash = alloca %struct.hv*, align 8
  %len = alloca i64, align 8
  %sp348 = alloca %struct.sv**, align 8
  %sp385 = alloca %struct.sv**, align 8
  %keysv = alloca %struct.sv*, align 8
  %he = alloca %struct.he*, align 8
  %discard567 = alloca i32, align 4
  %lval593 = alloca i32, align 4
  %defer610 = alloca i32, align 4
  %localizing614 = alloca i8, align 1
  %preeminent620 = alloca i8, align 1
  %svp621 = alloca %struct.sv**, align 8
  %hv = alloca %struct.hv*, align 8
  %he622 = alloca %struct.he*, align 8
  %mg628 = alloca %struct.magic*, align 8
  %stash629 = alloca %struct.hv*, align 8
  %lv = alloca %struct.sv*, align 8
  %key2 = alloca %struct.sv*, align 8
  store %struct.sv* null, %struct.sv** %sv, align 8
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %1 = bitcast %struct.op* %0 to %struct.unop_aux*
  %op_aux = getelementptr inbounds %struct.unop_aux, %struct.unop_aux* %1, i32 0, i32 8
  %2 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %op_aux, align 8
  store %union.UNOP_AUX_item* %2, %union.UNOP_AUX_item** %items, align 8
  %3 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %uv = bitcast %union.UNOP_AUX_item* %3 to i64*
  %4 = load i64, i64* %uv, align 8
  store i64 %4, i64* %actions, align 8
  %5 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  store %union.UNOP_AUX_item* %5, %union.UNOP_AUX_item** @PL_multideref_pc, align 8
  br label %while.body

while.body:                                       ; preds = %entry, %sw.bb, %sw.epilog813
  %6 = load i64, i64* %actions, align 8
  %and = and i64 %6, 15
  switch i64 %and, label %sw.epilog813 [
    i64 0, label %sw.bb
    i64 5, label %sw.bb2
    i64 6, label %sw.bb4
    i64 1, label %sw.bb15
    i64 2, label %sw.bb17
    i64 3, label %sw.bb37
    i64 4, label %sw.bb41
    i64 12, label %sw.bb360
    i64 13, label %sw.bb364
    i64 8, label %sw.bb384
    i64 9, label %sw.bb387
    i64 10, label %sw.bb408
    i64 11, label %sw.bb412
  ]

sw.bb:                                            ; preds = %while.body
  %7 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %7, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr, %union.UNOP_AUX_item** %items, align 8
  %uv1 = bitcast %union.UNOP_AUX_item* %incdec.ptr to i64*
  %8 = load i64, i64* %uv1, align 8
  store i64 %8, i64* %actions, align 8
  br label %while.body

sw.bb2:                                           ; preds = %while.body
  %9 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %10 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr3 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %10, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr3, %union.UNOP_AUX_item** %items, align 8
  %pad_offset = bitcast %union.UNOP_AUX_item* %incdec.ptr3 to i64*
  %11 = load i64, i64* %pad_offset, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 %11
  %12 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %12, %struct.sv** %sv, align 8
  br label %do_AV_aelem

sw.bb4:                                           ; preds = %while.body
  %13 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr5 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %13, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr5, %union.UNOP_AUX_item** %items, align 8
  %sv6 = bitcast %union.UNOP_AUX_item* %incdec.ptr5 to %struct.sv**
  %14 = load %struct.sv*, %struct.sv** %sv6, align 8
  store %struct.sv* %14, %struct.sv** %sv, align 8
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %16 = bitcast %struct.sv* %15 to %struct.gv*
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %17 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %17, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 6
  %18 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool = icmp ne %struct.av* %18, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb4
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %20 = bitcast %struct.sv* %19 to %struct.gv*
  %sv_u7 = getelementptr inbounds %struct.gv, %struct.gv* %20, i32 0, i32 3
  %svu_gp8 = bitcast %union.anon.4* %sv_u7 to %struct.gp**
  %21 = load %struct.gp*, %struct.gp** %svu_gp8, align 8
  %add.ptr9 = getelementptr inbounds %struct.gp, %struct.gp* %21, i64 0
  %gp_av10 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr9, i32 0, i32 6
  %22 = load %struct.av*, %struct.av** %gp_av10, align 8
  br label %cond.end

cond.false:                                       ; preds = %sw.bb4
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %24 = bitcast %struct.sv* %23 to %struct.gv*
  %call = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %24, i32 11)
  %sv_u11 = getelementptr inbounds %struct.gv, %struct.gv* %call, i32 0, i32 3
  %svu_gp12 = bitcast %union.anon.4* %sv_u11 to %struct.gp**
  %25 = load %struct.gp*, %struct.gp** %svu_gp12, align 8
  %add.ptr13 = getelementptr inbounds %struct.gp, %struct.gp* %25, i64 0
  %gp_av14 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr13, i32 0, i32 6
  %26 = load %struct.av*, %struct.av** %gp_av14, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.av* [ %22, %cond.true ], [ %26, %cond.false ]
  %27 = bitcast %struct.av* %cond to %struct.sv*
  store %struct.sv* %27, %struct.sv** %sv, align 8
  br label %do_AV_aelem

sw.bb15:                                          ; preds = %while.body
  %28 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %28, %struct.sv*** %sp, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr16 = getelementptr inbounds %struct.sv*, %struct.sv** %29, i32 -1
  store %struct.sv** %incdec.ptr16, %struct.sv*** %sp, align 8
  %30 = load %struct.sv*, %struct.sv** %29, align 8
  store %struct.sv* %30, %struct.sv** %sv, align 8
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %31, %struct.sv*** @PL_stack_sp, align 8
  br label %do_AV_rv2av_aelem

sw.bb17:                                          ; preds = %while.body
  %32 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr18 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %32, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr18, %union.UNOP_AUX_item** %items, align 8
  %sv19 = bitcast %union.UNOP_AUX_item* %incdec.ptr18 to %struct.sv**
  %33 = load %struct.sv*, %struct.sv** %sv19, align 8
  store %struct.sv* %33, %struct.sv** %sv, align 8
  %34 = load %struct.sv*, %struct.sv** %sv, align 8
  %35 = bitcast %struct.sv* %34 to %struct.gv*
  %sv_u20 = getelementptr inbounds %struct.gv, %struct.gv* %35, i32 0, i32 3
  %svu_gp21 = bitcast %union.anon.4* %sv_u20 to %struct.gp**
  %36 = load %struct.gp*, %struct.gp** %svu_gp21, align 8
  %add.ptr22 = getelementptr inbounds %struct.gp, %struct.gp* %36, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr22, i32 0, i32 0
  %37 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool23 = icmp ne %struct.sv* %37, null
  br i1 %tobool23, label %cond.true24, label %cond.false29

cond.true24:                                      ; preds = %sw.bb17
  %38 = load %struct.sv*, %struct.sv** %sv, align 8
  %39 = bitcast %struct.sv* %38 to %struct.gv*
  %sv_u25 = getelementptr inbounds %struct.gv, %struct.gv* %39, i32 0, i32 3
  %svu_gp26 = bitcast %union.anon.4* %sv_u25 to %struct.gp**
  %40 = load %struct.gp*, %struct.gp** %svu_gp26, align 8
  %add.ptr27 = getelementptr inbounds %struct.gp, %struct.gp* %40, i64 0
  %gp_sv28 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr27, i32 0, i32 0
  br label %cond.end35

cond.false29:                                     ; preds = %sw.bb17
  %41 = load %struct.sv*, %struct.sv** %sv, align 8
  %42 = bitcast %struct.sv* %41 to %struct.gv*
  %call30 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %42, i32 0)
  %sv_u31 = getelementptr inbounds %struct.gv, %struct.gv* %call30, i32 0, i32 3
  %svu_gp32 = bitcast %union.anon.4* %sv_u31 to %struct.gp**
  %43 = load %struct.gp*, %struct.gp** %svu_gp32, align 8
  %add.ptr33 = getelementptr inbounds %struct.gp, %struct.gp* %43, i64 0
  %gp_sv34 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr33, i32 0, i32 0
  br label %cond.end35

cond.end35:                                       ; preds = %cond.false29, %cond.true24
  %cond36 = phi %struct.sv** [ %gp_sv28, %cond.true24 ], [ %gp_sv34, %cond.false29 ]
  %44 = load %struct.sv*, %struct.sv** %cond36, align 8
  store %struct.sv* %44, %struct.sv** %sv, align 8
  br label %do_AV_vivify_rv2av_aelem

sw.bb37:                                          ; preds = %while.body
  %45 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %46 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr38 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %46, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr38, %union.UNOP_AUX_item** %items, align 8
  %pad_offset39 = bitcast %union.UNOP_AUX_item* %incdec.ptr38 to i64*
  %47 = load i64, i64* %pad_offset39, align 8
  %arrayidx40 = getelementptr inbounds %struct.sv*, %struct.sv** %45, i64 %47
  %48 = load %struct.sv*, %struct.sv** %arrayidx40, align 8
  store %struct.sv* %48, %struct.sv** %sv, align 8
  br label %do_AV_vivify_rv2av_aelem

do_AV_vivify_rv2av_aelem:                         ; preds = %sw.bb37, %cond.end35
  br label %sw.bb41

sw.bb41:                                          ; preds = %while.body, %do_AV_vivify_rv2av_aelem
  %49 = load %struct.sv*, %struct.sv** %sv, align 8
  %call42 = call %struct.sv* @Perl_vivify_ref(%struct.sv* %49, i32 16)
  store %struct.sv* %call42, %struct.sv** %sv, align 8
  br label %do_AV_rv2av_aelem

do_AV_rv2av_aelem:                                ; preds = %sw.bb41, %sw.bb15
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags, align 4
  %and43 = and i32 %51, 2097152
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %cond.true45, label %cond.false46

cond.true45:                                      ; preds = %do_AV_rv2av_aelem
  br i1 true, label %land.rhs, label %land.end

cond.false46:                                     ; preds = %do_AV_rv2av_aelem
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false46, %cond.true45
  %52 = load %struct.sv*, %struct.sv** %sv, align 8
  %call47 = call i32 @Perl_mg_get(%struct.sv* %52)
  %tobool48 = icmp ne i32 %call47, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false46, %cond.true45
  %53 = phi i1 [ false, %cond.false46 ], [ false, %cond.true45 ], [ %tobool48, %land.rhs ]
  %land.ext = zext i1 %53 to i32
  %54 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags49 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags49, align 4
  %and50 = and i32 %55, 2048
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %cond.true52, label %cond.false53

cond.true52:                                      ; preds = %land.end
  br i1 true, label %if.then, label %if.else

cond.false53:                                     ; preds = %land.end
  br i1 false, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false53, %cond.true52
  %56 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %57, 2048
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %land.lhs.true, label %cond.false68

land.lhs.true:                                    ; preds = %if.then
  %58 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u57 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u57 to %struct.sv**
  %59 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %60, 1048576
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %land.lhs.true61, label %cond.false68

land.lhs.true61:                                  ; preds = %land.lhs.true
  %61 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u62 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 3
  %svu_rv63 = bitcast %union.anon* %sv_u62 to %struct.sv**
  %62 = load %struct.sv*, %struct.sv** %svu_rv63, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any, align 8
  %64 = bitcast i8* %63 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %64, i32 0, i32 0
  %65 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags64 = getelementptr inbounds %struct.hv, %struct.hv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %66, 268435456
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %cond.true67, label %cond.false68

cond.true67:                                      ; preds = %land.lhs.true61
  br i1 true, label %if.then69, label %if.end

cond.false68:                                     ; preds = %land.lhs.true61, %land.lhs.true, %if.then
  br i1 false, label %if.then69, label %if.end

if.then69:                                        ; preds = %cond.false68, %cond.true67
  %67 = load %struct.sv*, %struct.sv** %sv, align 8
  %call70 = call %struct.sv* @Perl_amagic_deref_call(%struct.sv* %67, i32 2)
  store %struct.sv* %call70, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.then69, %cond.false68, %cond.true67
  %68 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u71 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 3
  %svu_rv72 = bitcast %union.anon* %sv_u71 to %struct.sv**
  %69 = load %struct.sv*, %struct.sv** %svu_rv72, align 8
  store %struct.sv* %69, %struct.sv** %sv, align 8
  %70 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags73 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags73, align 4
  %and74 = and i32 %71, 255
  %cmp = icmp ne i32 %and74, 11
  br i1 %cmp, label %cond.true75, label %cond.false76

cond.true75:                                      ; preds = %if.end
  br i1 true, label %if.then77, label %if.end79

cond.false76:                                     ; preds = %if.end
  br i1 false, label %if.then77, label %if.end79

if.then77:                                        ; preds = %cond.false76, %cond.true75
  %call78 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0))
  store %struct.op* %call78, %struct.op** %retval, align 8
  br label %return

if.end79:                                         ; preds = %cond.false76, %cond.true75
  br label %if.end116

if.else:                                          ; preds = %cond.false53, %cond.true52
  %72 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags80 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags80, align 4
  %and81 = and i32 %73, 255
  %cmp82 = icmp ne i32 %and81, 11
  br i1 %cmp82, label %if.then83, label %if.end115

if.then83:                                        ; preds = %if.else
  %74 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags84 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %75, 49152
  %cmp86 = icmp eq i32 %and85, 32768
  br i1 %cmp86, label %land.lhs.true87, label %if.then94

land.lhs.true87:                                  ; preds = %if.then83
  %76 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags88 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags88, align 4
  %and89 = and i32 %77, 255
  %cmp90 = icmp eq i32 %and89, 9
  br i1 %cmp90, label %if.end96, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true87
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags91 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags91, align 4
  %and92 = and i32 %79, 255
  %cmp93 = icmp eq i32 %and92, 10
  br i1 %cmp93, label %if.end96, label %if.then94

if.then94:                                        ; preds = %lor.lhs.false, %if.then83
  %80 = load %struct.sv*, %struct.sv** %sv, align 8
  %call95 = call %struct.gv* @S_softref2xv_lite(%struct.sv* %80, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0), i32 11)
  %81 = bitcast %struct.gv* %call95 to %struct.sv*
  store %struct.sv* %81, %struct.sv** %sv, align 8
  br label %if.end96

if.end96:                                         ; preds = %if.then94, %lor.lhs.false, %land.lhs.true87
  %82 = load %struct.sv*, %struct.sv** %sv, align 8
  %83 = bitcast %struct.sv* %82 to %struct.gv*
  %sv_u97 = getelementptr inbounds %struct.gv, %struct.gv* %83, i32 0, i32 3
  %svu_gp98 = bitcast %union.anon.4* %sv_u97 to %struct.gp**
  %84 = load %struct.gp*, %struct.gp** %svu_gp98, align 8
  %add.ptr99 = getelementptr inbounds %struct.gp, %struct.gp* %84, i64 0
  %gp_av100 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr99, i32 0, i32 6
  %85 = load %struct.av*, %struct.av** %gp_av100, align 8
  %tobool101 = icmp ne %struct.av* %85, null
  br i1 %tobool101, label %cond.true102, label %cond.false107

cond.true102:                                     ; preds = %if.end96
  %86 = load %struct.sv*, %struct.sv** %sv, align 8
  %87 = bitcast %struct.sv* %86 to %struct.gv*
  %sv_u103 = getelementptr inbounds %struct.gv, %struct.gv* %87, i32 0, i32 3
  %svu_gp104 = bitcast %union.anon.4* %sv_u103 to %struct.gp**
  %88 = load %struct.gp*, %struct.gp** %svu_gp104, align 8
  %add.ptr105 = getelementptr inbounds %struct.gp, %struct.gp* %88, i64 0
  %gp_av106 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr105, i32 0, i32 6
  %89 = load %struct.av*, %struct.av** %gp_av106, align 8
  br label %cond.end113

cond.false107:                                    ; preds = %if.end96
  %90 = load %struct.sv*, %struct.sv** %sv, align 8
  %91 = bitcast %struct.sv* %90 to %struct.gv*
  %call108 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %91, i32 11)
  %sv_u109 = getelementptr inbounds %struct.gv, %struct.gv* %call108, i32 0, i32 3
  %svu_gp110 = bitcast %union.anon.4* %sv_u109 to %struct.gp**
  %92 = load %struct.gp*, %struct.gp** %svu_gp110, align 8
  %add.ptr111 = getelementptr inbounds %struct.gp, %struct.gp* %92, i64 0
  %gp_av112 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr111, i32 0, i32 6
  %93 = load %struct.av*, %struct.av** %gp_av112, align 8
  br label %cond.end113

cond.end113:                                      ; preds = %cond.false107, %cond.true102
  %cond114 = phi %struct.av* [ %89, %cond.true102 ], [ %93, %cond.false107 ]
  %94 = bitcast %struct.av* %cond114 to i8*
  %95 = bitcast i8* %94 to %struct.sv*
  store %struct.sv* %95, %struct.sv** %sv, align 8
  br label %if.end115

if.end115:                                        ; preds = %cond.end113, %if.else
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %if.end79
  br label %do_AV_aelem

do_AV_aelem:                                      ; preds = %if.end116, %cond.end, %sw.bb2
  store i64 0, i64* %elem, align 8
  %96 = load i64, i64* %actions, align 8
  %and117 = and i64 %96, 48
  switch i64 %and117, label %sw.epilog [
    i64 0, label %sw.bb118
    i64 16, label %sw.bb119
    i64 32, label %sw.bb121
    i64 48, label %sw.bb125
  ]

sw.bb118:                                         ; preds = %do_AV_aelem
  br label %finish

sw.bb119:                                         ; preds = %do_AV_aelem
  %97 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr120 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %97, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr120, %union.UNOP_AUX_item** %items, align 8
  %iv = bitcast %union.UNOP_AUX_item* %incdec.ptr120 to i64*
  %98 = load i64, i64* %iv, align 8
  store i64 %98, i64* %elem, align 8
  br label %sw.epilog

sw.bb121:                                         ; preds = %do_AV_aelem
  %99 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %100 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr122 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %100, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr122, %union.UNOP_AUX_item** %items, align 8
  %pad_offset123 = bitcast %union.UNOP_AUX_item* %incdec.ptr122 to i64*
  %101 = load i64, i64* %pad_offset123, align 8
  %arrayidx124 = getelementptr inbounds %struct.sv*, %struct.sv** %99, i64 %101
  %102 = load %struct.sv*, %struct.sv** %arrayidx124, align 8
  store %struct.sv* %102, %struct.sv** %elemsv, align 8
  br label %check_elem

sw.bb125:                                         ; preds = %do_AV_aelem
  %103 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr126 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %103, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr126, %union.UNOP_AUX_item** %items, align 8
  %sv127 = bitcast %union.UNOP_AUX_item* %incdec.ptr126 to %struct.sv**
  %104 = load %struct.sv*, %struct.sv** %sv127, align 8
  store %struct.sv* %104, %struct.sv** %elemsv, align 8
  %105 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %106 = bitcast %struct.sv* %105 to %struct.gv*
  %sv_u128 = getelementptr inbounds %struct.gv, %struct.gv* %106, i32 0, i32 3
  %svu_gp129 = bitcast %union.anon.4* %sv_u128 to %struct.gp**
  %107 = load %struct.gp*, %struct.gp** %svu_gp129, align 8
  %add.ptr130 = getelementptr inbounds %struct.gp, %struct.gp* %107, i64 0
  %gp_sv131 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr130, i32 0, i32 0
  %108 = load %struct.sv*, %struct.sv** %gp_sv131, align 8
  %tobool132 = icmp ne %struct.sv* %108, null
  br i1 %tobool132, label %cond.true133, label %cond.false138

cond.true133:                                     ; preds = %sw.bb125
  %109 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %110 = bitcast %struct.sv* %109 to %struct.gv*
  %sv_u134 = getelementptr inbounds %struct.gv, %struct.gv* %110, i32 0, i32 3
  %svu_gp135 = bitcast %union.anon.4* %sv_u134 to %struct.gp**
  %111 = load %struct.gp*, %struct.gp** %svu_gp135, align 8
  %add.ptr136 = getelementptr inbounds %struct.gp, %struct.gp* %111, i64 0
  %gp_sv137 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr136, i32 0, i32 0
  br label %cond.end144

cond.false138:                                    ; preds = %sw.bb125
  %112 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %113 = bitcast %struct.sv* %112 to %struct.gv*
  %call139 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %113, i32 0)
  %sv_u140 = getelementptr inbounds %struct.gv, %struct.gv* %call139, i32 0, i32 3
  %svu_gp141 = bitcast %union.anon.4* %sv_u140 to %struct.gp**
  %114 = load %struct.gp*, %struct.gp** %svu_gp141, align 8
  %add.ptr142 = getelementptr inbounds %struct.gp, %struct.gp* %114, i64 0
  %gp_sv143 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr142, i32 0, i32 0
  br label %cond.end144

cond.end144:                                      ; preds = %cond.false138, %cond.true133
  %cond145 = phi %struct.sv** [ %gp_sv137, %cond.true133 ], [ %gp_sv143, %cond.false138 ]
  %115 = load %struct.sv*, %struct.sv** %cond145, align 8
  store %struct.sv* %115, %struct.sv** %elemsv, align 8
  br label %check_elem

check_elem:                                       ; preds = %cond.end144, %sw.bb121
  %116 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_flags146 = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 2
  %117 = load i32, i32* %sv_flags146, align 4
  %and147 = and i32 %117, 2048
  %tobool148 = icmp ne i32 %and147, 0
  br i1 %tobool148, label %land.lhs.true149, label %cond.false174

land.lhs.true149:                                 ; preds = %check_elem
  %118 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_flags150 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 2
  %119 = load i32, i32* %sv_flags150, align 4
  %and151 = and i32 %119, 2097152
  %tobool152 = icmp ne i32 %and151, 0
  br i1 %tobool152, label %cond.false174, label %lor.lhs.false153

lor.lhs.false153:                                 ; preds = %land.lhs.true149
  %120 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_flags154 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 2
  %121 = load i32, i32* %sv_flags154, align 4
  %and155 = and i32 %121, 2048
  %tobool156 = icmp ne i32 %and155, 0
  br i1 %tobool156, label %land.lhs.true157, label %land.lhs.true171

land.lhs.true157:                                 ; preds = %lor.lhs.false153
  %122 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_u158 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 3
  %svu_rv159 = bitcast %union.anon* %sv_u158 to %struct.sv**
  %123 = load %struct.sv*, %struct.sv** %svu_rv159, align 8
  %sv_flags160 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 2
  %124 = load i32, i32* %sv_flags160, align 4
  %and161 = and i32 %124, 1048576
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %land.lhs.true163, label %land.lhs.true171

land.lhs.true163:                                 ; preds = %land.lhs.true157
  %125 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_u164 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 3
  %svu_rv165 = bitcast %union.anon* %sv_u164 to %struct.sv**
  %126 = load %struct.sv*, %struct.sv** %svu_rv165, align 8
  %sv_any166 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 0
  %127 = load i8*, i8** %sv_any166, align 8
  %128 = bitcast i8* %127 to %struct.xpvmg*
  %xmg_stash167 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %128, i32 0, i32 0
  %129 = load %struct.hv*, %struct.hv** %xmg_stash167, align 8
  %sv_flags168 = getelementptr inbounds %struct.hv, %struct.hv* %129, i32 0, i32 2
  %130 = load i32, i32* %sv_flags168, align 4
  %and169 = and i32 %130, 268435456
  %tobool170 = icmp ne i32 %and169, 0
  br i1 %tobool170, label %cond.false174, label %land.lhs.true171

land.lhs.true171:                                 ; preds = %land.lhs.true163, %land.lhs.true157, %lor.lhs.false153
  %call172 = call zeroext i1 @Perl_ckwarn(i32 12)
  br i1 %call172, label %cond.true173, label %cond.false174

cond.true173:                                     ; preds = %land.lhs.true171
  br i1 true, label %if.then175, label %if.end176

cond.false174:                                    ; preds = %land.lhs.true171, %land.lhs.true163, %land.lhs.true149, %check_elem
  br i1 false, label %if.then175, label %if.end176

if.then175:                                       ; preds = %cond.false174, %cond.true173
  %131 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %132 = bitcast %struct.sv* %131 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.27, i64 0, i64 0), i8* %132)
  br label %if.end176

if.end176:                                        ; preds = %if.then175, %cond.false174, %cond.true173
  %133 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  store %union.UNOP_AUX_item* %133, %union.UNOP_AUX_item** @PL_multideref_pc, align 8
  %134 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_flags177 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 2
  %135 = load i32, i32* %sv_flags177, align 4
  %and178 = and i32 %135, 2097408
  %cmp179 = icmp eq i32 %and178, 256
  br i1 %cmp179, label %cond.true180, label %cond.false182

cond.true180:                                     ; preds = %if.end176
  %136 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_any181 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 0
  %137 = load i8*, i8** %sv_any181, align 8
  %138 = bitcast i8* %137 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %138, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %139 = load i64, i64* %xivu_iv, align 8
  br label %cond.end184

cond.false182:                                    ; preds = %if.end176
  %140 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %call183 = call i64 @Perl_sv_2iv_flags(%struct.sv* %140, i32 2)
  br label %cond.end184

cond.end184:                                      ; preds = %cond.false182, %cond.true180
  %cond185 = phi i64 [ %139, %cond.true180 ], [ %call183, %cond.false182 ]
  store i64 %cond185, i64* %elem, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %do_AV_aelem, %cond.end184, %sw.bb119
  %141 = load i64, i64* %actions, align 8
  %and186 = and i64 %141, 64
  %tobool187 = icmp ne i64 %and186, 0
  br i1 %tobool187, label %if.end196, label %if.then188

if.then188:                                       ; preds = %sw.epilog
  %142 = load %struct.sv*, %struct.sv** %sv, align 8
  %143 = bitcast %struct.sv* %142 to %struct.av*
  %144 = load i64, i64* %elem, align 8
  %call189 = call %struct.sv** @Perl_av_fetch(%struct.av* %143, i64 %144, i32 1)
  store %struct.sv** %call189, %struct.sv*** %svp, align 8
  %145 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool190 = icmp ne %struct.sv** %145, null
  br i1 %tobool190, label %lor.lhs.false191, label %if.then193

lor.lhs.false191:                                 ; preds = %if.then188
  %146 = load %struct.sv**, %struct.sv*** %svp, align 8
  %147 = load %struct.sv*, %struct.sv** %146, align 8
  store %struct.sv* %147, %struct.sv** %sv, align 8
  %tobool192 = icmp ne %struct.sv* %147, null
  br i1 %tobool192, label %if.end195, label %if.then193

if.then193:                                       ; preds = %lor.lhs.false191, %if.then188
  %148 = load i64, i64* %elem, align 8
  %call194 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_aelem, i64 0, i64 0), i64 %148)
  store %struct.op* %call194, %struct.op** %retval, align 8
  br label %return

if.end195:                                        ; preds = %lor.lhs.false191
  br label %sw.epilog813

if.end196:                                        ; preds = %sw.epilog
  %149 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %149, i32 0, i32 6
  %150 = load i8, i8* %op_private, align 1
  %conv = zext i8 %150 to i32
  %and197 = and i32 %conv, 48
  %tobool198 = icmp ne i32 %and197, 0
  br i1 %tobool198, label %if.then199, label %if.else231

if.then199:                                       ; preds = %if.end196
  %151 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private200 = getelementptr inbounds %struct.op, %struct.op* %151, i32 0, i32 6
  %152 = load i8, i8* %op_private200, align 1
  %conv201 = zext i8 %152 to i32
  %and202 = and i32 %conv201, 16
  %tobool203 = icmp ne i32 %and202, 0
  br i1 %tobool203, label %if.then204, label %if.else208

if.then204:                                       ; preds = %if.then199
  %153 = load %struct.sv*, %struct.sv** %sv, align 8
  %154 = bitcast %struct.sv* %153 to %struct.av*
  %155 = load i64, i64* %elem, align 8
  %call205 = call zeroext i1 @Perl_av_exists(%struct.av* %154, i64 %155)
  %156 = zext i1 %call205 to i64
  %cond207 = select i1 %call205, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  store %struct.sv* %cond207, %struct.sv** %sv, align 8
  br label %if.end230

if.else208:                                       ; preds = %if.then199
  %157 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %157, i32 0, i32 5
  %158 = load i8, i8* %op_flags, align 2
  %conv209 = zext i8 %158 to i32
  %and210 = and i32 %conv209, 3
  %tobool211 = icmp ne i32 %and210, 0
  br i1 %tobool211, label %cond.true212, label %cond.false216

cond.true212:                                     ; preds = %if.else208
  %159 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags213 = getelementptr inbounds %struct.op, %struct.op* %159, i32 0, i32 5
  %160 = load i8, i8* %op_flags213, align 2
  %conv214 = zext i8 %160 to i32
  %and215 = and i32 %conv214, 3
  br label %cond.end218

cond.false216:                                    ; preds = %if.else208
  %call217 = call i32 @Perl_block_gimme()
  br label %cond.end218

cond.end218:                                      ; preds = %cond.false216, %cond.true212
  %cond219 = phi i32 [ %and215, %cond.true212 ], [ %call217, %cond.false216 ]
  %cmp220 = icmp eq i32 %cond219, 1
  %161 = zext i1 %cmp220 to i64
  %cond222 = select i1 %cmp220, i32 4, i32 0
  store i32 %cond222, i32* %discard, align 4
  %162 = load %struct.sv*, %struct.sv** %sv, align 8
  %163 = bitcast %struct.sv* %162 to %struct.av*
  %164 = load i64, i64* %elem, align 8
  %165 = load i32, i32* %discard, align 4
  %call223 = call %struct.sv* @Perl_av_delete(%struct.av* %163, i64 %164, i32 %165)
  store %struct.sv* %call223, %struct.sv** %sv, align 8
  %166 = load i32, i32* %discard, align 4
  %tobool224 = icmp ne i32 %166, 0
  br i1 %tobool224, label %if.then225, label %if.end226

if.then225:                                       ; preds = %cond.end218
  %167 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %167, i32 0, i32 0
  %168 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %168, %struct.op** %retval, align 8
  br label %return

if.end226:                                        ; preds = %cond.end218
  %169 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool227 = icmp ne %struct.sv* %169, null
  br i1 %tobool227, label %if.end229, label %if.then228

if.then228:                                       ; preds = %if.end226
  store %struct.sv* @PL_sv_undef, %struct.sv** %sv, align 8
  br label %if.end229

if.end229:                                        ; preds = %if.then228, %if.end226
  br label %if.end230

if.end230:                                        ; preds = %if.end229, %if.then204
  br label %if.end347

if.else231:                                       ; preds = %if.end196
  %170 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags232 = getelementptr inbounds %struct.op, %struct.op* %170, i32 0, i32 5
  %171 = load i8, i8* %op_flags232, align 2
  %conv233 = zext i8 %171 to i32
  %and234 = and i32 %conv233, 32
  %tobool235 = icmp ne i32 %and234, 0
  br i1 %tobool235, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.else231
  %172 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private236 = getelementptr inbounds %struct.op, %struct.op* %172, i32 0, i32 6
  %173 = load i8, i8* %op_private236, align 1
  %conv237 = zext i8 %173 to i32
  %and238 = and i32 %conv237, 8
  %tobool239 = icmp ne i32 %and238, 0
  br i1 %tobool239, label %land.rhs240, label %land.end243

land.rhs240:                                      ; preds = %lor.rhs
  %call241 = call i32 @Perl_is_lvalue_sub()
  %tobool242 = icmp ne i32 %call241, 0
  br label %land.end243

land.end243:                                      ; preds = %land.rhs240, %lor.rhs
  %174 = phi i1 [ false, %lor.rhs ], [ %tobool242, %land.rhs240 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end243, %if.else231
  %175 = phi i1 [ true, %if.else231 ], [ %174, %land.end243 ]
  %lor.ext = zext i1 %175 to i32
  store i32 %lor.ext, i32* %lval, align 4
  %176 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private245 = getelementptr inbounds %struct.op, %struct.op* %176, i32 0, i32 6
  %177 = load i8, i8* %op_private245, align 1
  %conv246 = zext i8 %177 to i32
  %and247 = and i32 %conv246, 64
  store i32 %and247, i32* %defer, align 4
  %178 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private248 = getelementptr inbounds %struct.op, %struct.op* %178, i32 0, i32 6
  %179 = load i8, i8* %op_private248, align 1
  %conv249 = zext i8 %179 to i32
  %and250 = and i32 %conv249, 128
  %tobool251 = icmp ne i32 %and250, 0
  %frombool = zext i1 %tobool251 to i8
  store i8 %frombool, i8* %localizing, align 1
  store i8 1, i8* %preeminent, align 1
  %180 = load %struct.sv*, %struct.sv** %sv, align 8
  %181 = bitcast %struct.sv* %180 to %struct.av*
  store %struct.av* %181, %struct.av** %av, align 8
  %182 = load i8, i8* %localizing, align 1
  %tobool253 = trunc i8 %182 to i1
  br i1 %tobool253, label %cond.true255, label %cond.false256

cond.true255:                                     ; preds = %lor.end
  br i1 true, label %if.then257, label %if.end288

cond.false256:                                    ; preds = %lor.end
  br i1 false, label %if.then257, label %if.end288

if.then257:                                       ; preds = %cond.false256, %cond.true255
  %183 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags258 = getelementptr inbounds %struct.av, %struct.av* %183, i32 0, i32 2
  %184 = load i32, i32* %sv_flags258, align 4
  %and259 = and i32 %184, 8388608
  %tobool260 = icmp ne i32 %and259, 0
  br i1 %tobool260, label %lor.lhs.false261, label %if.then284

lor.lhs.false261:                                 ; preds = %if.then257
  %185 = load %struct.av*, %struct.av** %av, align 8
  %186 = bitcast %struct.av* %185 to %struct.sv*
  %call262 = call %struct.magic* @Perl_mg_find(%struct.sv* %186, i32 80)
  store %struct.magic* %call262, %struct.magic** %mg, align 8
  %tobool263 = icmp ne %struct.magic* %call262, null
  br i1 %tobool263, label %lor.lhs.false264, label %if.then284

lor.lhs.false264:                                 ; preds = %lor.lhs.false261
  %187 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %187, i32 0, i32 6
  %188 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool265 = icmp ne %struct.sv* %188, null
  br i1 %tobool265, label %cond.true266, label %cond.false268

cond.true266:                                     ; preds = %lor.lhs.false264
  %189 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj267 = getelementptr inbounds %struct.magic, %struct.magic* %189, i32 0, i32 6
  %190 = load %struct.sv*, %struct.sv** %mg_obj267, align 8
  br label %cond.end271

cond.false268:                                    ; preds = %lor.lhs.false264
  %191 = load %struct.av*, %struct.av** %av, align 8
  %192 = bitcast %struct.av* %191 to i8*
  %193 = bitcast i8* %192 to %struct.sv*
  %call269 = call %struct.sv* @Perl_newRV(%struct.sv* %193)
  %call270 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call269)
  br label %cond.end271

cond.end271:                                      ; preds = %cond.false268, %cond.true266
  %cond272 = phi %struct.sv* [ %190, %cond.true266 ], [ %call270, %cond.false268 ]
  %sv_u273 = getelementptr inbounds %struct.sv, %struct.sv* %cond272, i32 0, i32 3
  %svu_rv274 = bitcast %union.anon* %sv_u273 to %struct.sv**
  %194 = load %struct.sv*, %struct.sv** %svu_rv274, align 8
  %sv_any275 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 0
  %195 = load i8*, i8** %sv_any275, align 8
  %196 = bitcast i8* %195 to %struct.xpvmg*
  %xmg_stash276 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %196, i32 0, i32 0
  %197 = load %struct.hv*, %struct.hv** %xmg_stash276, align 8
  store %struct.hv* %197, %struct.hv** %stash, align 8
  %tobool277 = icmp ne %struct.hv* %197, null
  br i1 %tobool277, label %land.lhs.true278, label %if.end287

land.lhs.true278:                                 ; preds = %cond.end271
  %198 = load %struct.hv*, %struct.hv** %stash, align 8
  %call279 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %198, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0), i32 1)
  %tobool280 = icmp ne %struct.gv* %call279, null
  br i1 %tobool280, label %land.lhs.true281, label %if.end287

land.lhs.true281:                                 ; preds = %land.lhs.true278
  %199 = load %struct.hv*, %struct.hv** %stash, align 8
  %call282 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %199, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i64 0, i64 0), i32 1)
  %tobool283 = icmp ne %struct.gv* %call282, null
  br i1 %tobool283, label %if.then284, label %if.end287

if.then284:                                       ; preds = %land.lhs.true281, %lor.lhs.false261, %if.then257
  %200 = load %struct.av*, %struct.av** %av, align 8
  %201 = load i64, i64* %elem, align 8
  %call285 = call zeroext i1 @Perl_av_exists(%struct.av* %200, i64 %201)
  %frombool286 = zext i1 %call285 to i8
  store i8 %frombool286, i8* %preeminent, align 1
  br label %if.end287

if.end287:                                        ; preds = %if.then284, %land.lhs.true281, %land.lhs.true278, %cond.end271
  br label %if.end288

if.end288:                                        ; preds = %if.end287, %cond.false256, %cond.true255
  %202 = load %struct.av*, %struct.av** %av, align 8
  %203 = load i64, i64* %elem, align 8
  %204 = load i32, i32* %lval, align 4
  %tobool289 = icmp ne i32 %204, 0
  br i1 %tobool289, label %land.rhs290, label %land.end292

land.rhs290:                                      ; preds = %if.end288
  %205 = load i32, i32* %defer, align 4
  %tobool291 = icmp ne i32 %205, 0
  %lnot = xor i1 %tobool291, true
  br label %land.end292

land.end292:                                      ; preds = %land.rhs290, %if.end288
  %206 = phi i1 [ false, %if.end288 ], [ %lnot, %land.rhs290 ]
  %land.ext293 = zext i1 %206 to i32
  %call294 = call %struct.sv** @Perl_av_fetch(%struct.av* %202, i64 %203, i32 %land.ext293)
  store %struct.sv** %call294, %struct.sv*** %svp252, align 8
  %207 = load i32, i32* %lval, align 4
  %tobool295 = icmp ne i32 %207, 0
  br i1 %tobool295, label %if.then296, label %if.else330

if.then296:                                       ; preds = %land.end292
  %208 = load %struct.sv**, %struct.sv*** %svp252, align 8
  %tobool297 = icmp ne %struct.sv** %208, null
  br i1 %tobool297, label %lor.lhs.false298, label %if.then300

lor.lhs.false298:                                 ; preds = %if.then296
  %209 = load %struct.sv**, %struct.sv*** %svp252, align 8
  %210 = load %struct.sv*, %struct.sv** %209, align 8
  store %struct.sv* %210, %struct.sv** %sv, align 8
  %tobool299 = icmp ne %struct.sv* %210, null
  br i1 %tobool299, label %if.else318, label %if.then300

if.then300:                                       ; preds = %lor.lhs.false298, %if.then296
  %211 = load i32, i32* %defer, align 4
  %tobool301 = icmp ne i32 %211, 0
  br i1 %tobool301, label %if.end304, label %if.then302

if.then302:                                       ; preds = %if.then300
  %212 = load i64, i64* %elem, align 8
  %call303 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_aelem, i64 0, i64 0), i64 %212)
  store %struct.op* %call303, %struct.op** %retval, align 8
  br label %return

if.end304:                                        ; preds = %if.then300
  %213 = load %struct.av*, %struct.av** %av, align 8
  %call305 = call i64 @S_av_top_index(%struct.av* %213)
  store i64 %call305, i64* %len, align 8
  %214 = load %struct.av*, %struct.av** %av, align 8
  %215 = load i64, i64* %elem, align 8
  %cmp306 = icmp slt i64 %215, 0
  br i1 %cmp306, label %land.lhs.true308, label %cond.false313

land.lhs.true308:                                 ; preds = %if.end304
  %216 = load i64, i64* %len, align 8
  %217 = load i64, i64* %elem, align 8
  %add = add nsw i64 %216, %217
  %cmp309 = icmp sge i64 %add, 0
  br i1 %cmp309, label %cond.true311, label %cond.false313

cond.true311:                                     ; preds = %land.lhs.true308
  %218 = load i64, i64* %len, align 8
  %219 = load i64, i64* %elem, align 8
  %add312 = add nsw i64 %218, %219
  br label %cond.end314

cond.false313:                                    ; preds = %land.lhs.true308, %if.end304
  %220 = load i64, i64* %elem, align 8
  br label %cond.end314

cond.end314:                                      ; preds = %cond.false313, %cond.true311
  %cond315 = phi i64 [ %add312, %cond.true311 ], [ %220, %cond.false313 ]
  %call316 = call %struct.sv* @Perl_newSVavdefelem(%struct.av* %214, i64 %cond315, i1 zeroext true)
  %call317 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call316)
  store %struct.sv* %call317, %struct.sv** %sv, align 8
  br label %if.end329

if.else318:                                       ; preds = %lor.lhs.false298
  %221 = load i8, i8* %localizing, align 1
  %tobool319 = trunc i8 %221 to i1
  br i1 %tobool319, label %cond.true321, label %cond.false322

cond.true321:                                     ; preds = %if.else318
  br i1 true, label %if.then323, label %if.end328

cond.false322:                                    ; preds = %if.else318
  br i1 false, label %if.then323, label %if.end328

if.then323:                                       ; preds = %cond.false322, %cond.true321
  %222 = load i8, i8* %preeminent, align 1
  %tobool324 = trunc i8 %222 to i1
  br i1 %tobool324, label %if.then325, label %if.else326

if.then325:                                       ; preds = %if.then323
  %223 = load %struct.av*, %struct.av** %av, align 8
  %224 = load i64, i64* %elem, align 8
  %225 = load %struct.sv**, %struct.sv*** %svp252, align 8
  call void @Perl_save_aelem_flags(%struct.av* %223, i64 %224, %struct.sv** %225, i32 1)
  %226 = load %struct.sv**, %struct.sv*** %svp252, align 8
  %227 = load %struct.sv*, %struct.sv** %226, align 8
  store %struct.sv* %227, %struct.sv** %sv, align 8
  br label %if.end327

if.else326:                                       ; preds = %if.then323
  %228 = load %struct.av*, %struct.av** %av, align 8
  %229 = bitcast %struct.av* %228 to i8*
  %230 = bitcast i8* %229 to %struct.av*
  %231 = load i64, i64* %elem, align 8
  call void @Perl_save_adelete(%struct.av* %230, i64 %231)
  br label %if.end327

if.end327:                                        ; preds = %if.else326, %if.then325
  br label %if.end328

if.end328:                                        ; preds = %if.end327, %cond.false322, %cond.true321
  br label %if.end329

if.end329:                                        ; preds = %if.end328, %cond.end314
  br label %if.end346

if.else330:                                       ; preds = %land.end292
  %232 = load %struct.sv**, %struct.sv*** %svp252, align 8
  %tobool331 = icmp ne %struct.sv** %232, null
  br i1 %tobool331, label %cond.true332, label %cond.false333

cond.true332:                                     ; preds = %if.else330
  %233 = load %struct.sv**, %struct.sv*** %svp252, align 8
  %234 = load %struct.sv*, %struct.sv** %233, align 8
  br label %cond.end334

cond.false333:                                    ; preds = %if.else330
  br label %cond.end334

cond.end334:                                      ; preds = %cond.false333, %cond.true332
  %cond335 = phi %struct.sv* [ %234, %cond.true332 ], [ @PL_sv_undef, %cond.false333 ]
  store %struct.sv* %cond335, %struct.sv** %sv, align 8
  %235 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags336 = getelementptr inbounds %struct.av, %struct.av* %235, i32 0, i32 2
  %236 = load i32, i32* %sv_flags336, align 4
  %and337 = and i32 %236, 8388608
  %tobool338 = icmp ne i32 %and337, 0
  br i1 %tobool338, label %land.lhs.true339, label %if.end345

land.lhs.true339:                                 ; preds = %cond.end334
  %237 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags340 = getelementptr inbounds %struct.sv, %struct.sv* %237, i32 0, i32 2
  %238 = load i32, i32* %sv_flags340, align 4
  %and341 = and i32 %238, 2097152
  %tobool342 = icmp ne i32 %and341, 0
  br i1 %tobool342, label %if.then343, label %if.end345

if.then343:                                       ; preds = %land.lhs.true339
  %239 = load %struct.sv*, %struct.sv** %sv, align 8
  %call344 = call i32 @Perl_mg_get(%struct.sv* %239)
  br label %if.end345

if.end345:                                        ; preds = %if.then343, %land.lhs.true339, %cond.end334
  br label %if.end346

if.end346:                                        ; preds = %if.end345, %if.end329
  br label %if.end347

if.end347:                                        ; preds = %if.end346, %if.end230
  br label %finish

finish:                                           ; preds = %if.end812, %sw.bb507, %if.end347, %sw.bb118
  %240 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %240, %struct.sv*** %sp348, align 8
  br label %do.body

do.body:                                          ; preds = %finish
  br label %do.body349

do.body349:                                       ; preds = %do.body
  %241 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %242 = load %struct.sv**, %struct.sv*** %sp348, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %241 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %242 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp350 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp350, label %cond.true352, label %cond.false353

cond.true352:                                     ; preds = %do.body349
  br i1 true, label %if.then354, label %if.end356

cond.false353:                                    ; preds = %do.body349
  br i1 false, label %if.then354, label %if.end356

if.then354:                                       ; preds = %cond.false353, %cond.true352
  %243 = load %struct.sv**, %struct.sv*** %sp348, align 8
  %244 = load %struct.sv**, %struct.sv*** %sp348, align 8
  %call355 = call %struct.sv** @Perl_stack_grow(%struct.sv** %243, %struct.sv** %244, i64 1)
  store %struct.sv** %call355, %struct.sv*** %sp348, align 8
  %245 = load %struct.sv**, %struct.sv*** %sp348, align 8
  br label %if.end356

if.end356:                                        ; preds = %if.then354, %cond.false353, %cond.true352
  br label %do.end

do.end:                                           ; preds = %if.end356
  %246 = load %struct.sv*, %struct.sv** %sv, align 8
  %247 = load %struct.sv**, %struct.sv*** %sp348, align 8
  %incdec.ptr357 = getelementptr inbounds %struct.sv*, %struct.sv** %247, i32 1
  store %struct.sv** %incdec.ptr357, %struct.sv*** %sp348, align 8
  store %struct.sv* %246, %struct.sv** %incdec.ptr357, align 8
  br label %do.end358

do.end358:                                        ; preds = %do.end
  %248 = load %struct.sv**, %struct.sv*** %sp348, align 8
  store %struct.sv** %248, %struct.sv*** @PL_stack_sp, align 8
  %249 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next359 = getelementptr inbounds %struct.op, %struct.op* %249, i32 0, i32 0
  %250 = load %struct.op*, %struct.op** %op_next359, align 8
  store %struct.op* %250, %struct.op** %retval, align 8
  br label %return

sw.bb360:                                         ; preds = %while.body
  %251 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %252 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr361 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %252, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr361, %union.UNOP_AUX_item** %items, align 8
  %pad_offset362 = bitcast %union.UNOP_AUX_item* %incdec.ptr361 to i64*
  %253 = load i64, i64* %pad_offset362, align 8
  %arrayidx363 = getelementptr inbounds %struct.sv*, %struct.sv** %251, i64 %253
  %254 = load %struct.sv*, %struct.sv** %arrayidx363, align 8
  store %struct.sv* %254, %struct.sv** %sv, align 8
  br label %do_HV_helem

sw.bb364:                                         ; preds = %while.body
  %255 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr365 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %255, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr365, %union.UNOP_AUX_item** %items, align 8
  %sv366 = bitcast %union.UNOP_AUX_item* %incdec.ptr365 to %struct.sv**
  %256 = load %struct.sv*, %struct.sv** %sv366, align 8
  store %struct.sv* %256, %struct.sv** %sv, align 8
  %257 = load %struct.sv*, %struct.sv** %sv, align 8
  %258 = bitcast %struct.sv* %257 to %struct.gv*
  %sv_u367 = getelementptr inbounds %struct.gv, %struct.gv* %258, i32 0, i32 3
  %svu_gp368 = bitcast %union.anon.4* %sv_u367 to %struct.gp**
  %259 = load %struct.gp*, %struct.gp** %svu_gp368, align 8
  %add.ptr369 = getelementptr inbounds %struct.gp, %struct.gp* %259, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr369, i32 0, i32 5
  %260 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool370 = icmp ne %struct.hv* %260, null
  br i1 %tobool370, label %cond.true371, label %cond.false376

cond.true371:                                     ; preds = %sw.bb364
  %261 = load %struct.sv*, %struct.sv** %sv, align 8
  %262 = bitcast %struct.sv* %261 to %struct.gv*
  %sv_u372 = getelementptr inbounds %struct.gv, %struct.gv* %262, i32 0, i32 3
  %svu_gp373 = bitcast %union.anon.4* %sv_u372 to %struct.gp**
  %263 = load %struct.gp*, %struct.gp** %svu_gp373, align 8
  %add.ptr374 = getelementptr inbounds %struct.gp, %struct.gp* %263, i64 0
  %gp_hv375 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr374, i32 0, i32 5
  %264 = load %struct.hv*, %struct.hv** %gp_hv375, align 8
  br label %cond.end382

cond.false376:                                    ; preds = %sw.bb364
  %265 = load %struct.sv*, %struct.sv** %sv, align 8
  %266 = bitcast %struct.sv* %265 to %struct.gv*
  %call377 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %266, i32 12)
  %sv_u378 = getelementptr inbounds %struct.gv, %struct.gv* %call377, i32 0, i32 3
  %svu_gp379 = bitcast %union.anon.4* %sv_u378 to %struct.gp**
  %267 = load %struct.gp*, %struct.gp** %svu_gp379, align 8
  %add.ptr380 = getelementptr inbounds %struct.gp, %struct.gp* %267, i64 0
  %gp_hv381 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr380, i32 0, i32 5
  %268 = load %struct.hv*, %struct.hv** %gp_hv381, align 8
  br label %cond.end382

cond.end382:                                      ; preds = %cond.false376, %cond.true371
  %cond383 = phi %struct.hv* [ %264, %cond.true371 ], [ %268, %cond.false376 ]
  %269 = bitcast %struct.hv* %cond383 to %struct.sv*
  store %struct.sv* %269, %struct.sv** %sv, align 8
  br label %do_HV_helem

sw.bb384:                                         ; preds = %while.body
  %270 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %270, %struct.sv*** %sp385, align 8
  %271 = load %struct.sv**, %struct.sv*** %sp385, align 8
  %incdec.ptr386 = getelementptr inbounds %struct.sv*, %struct.sv** %271, i32 -1
  store %struct.sv** %incdec.ptr386, %struct.sv*** %sp385, align 8
  %272 = load %struct.sv*, %struct.sv** %271, align 8
  store %struct.sv* %272, %struct.sv** %sv, align 8
  %273 = load %struct.sv**, %struct.sv*** %sp385, align 8
  store %struct.sv** %273, %struct.sv*** @PL_stack_sp, align 8
  br label %do_HV_rv2hv_helem

sw.bb387:                                         ; preds = %while.body
  %274 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr388 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %274, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr388, %union.UNOP_AUX_item** %items, align 8
  %sv389 = bitcast %union.UNOP_AUX_item* %incdec.ptr388 to %struct.sv**
  %275 = load %struct.sv*, %struct.sv** %sv389, align 8
  store %struct.sv* %275, %struct.sv** %sv, align 8
  %276 = load %struct.sv*, %struct.sv** %sv, align 8
  %277 = bitcast %struct.sv* %276 to %struct.gv*
  %sv_u390 = getelementptr inbounds %struct.gv, %struct.gv* %277, i32 0, i32 3
  %svu_gp391 = bitcast %union.anon.4* %sv_u390 to %struct.gp**
  %278 = load %struct.gp*, %struct.gp** %svu_gp391, align 8
  %add.ptr392 = getelementptr inbounds %struct.gp, %struct.gp* %278, i64 0
  %gp_sv393 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr392, i32 0, i32 0
  %279 = load %struct.sv*, %struct.sv** %gp_sv393, align 8
  %tobool394 = icmp ne %struct.sv* %279, null
  br i1 %tobool394, label %cond.true395, label %cond.false400

cond.true395:                                     ; preds = %sw.bb387
  %280 = load %struct.sv*, %struct.sv** %sv, align 8
  %281 = bitcast %struct.sv* %280 to %struct.gv*
  %sv_u396 = getelementptr inbounds %struct.gv, %struct.gv* %281, i32 0, i32 3
  %svu_gp397 = bitcast %union.anon.4* %sv_u396 to %struct.gp**
  %282 = load %struct.gp*, %struct.gp** %svu_gp397, align 8
  %add.ptr398 = getelementptr inbounds %struct.gp, %struct.gp* %282, i64 0
  %gp_sv399 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr398, i32 0, i32 0
  br label %cond.end406

cond.false400:                                    ; preds = %sw.bb387
  %283 = load %struct.sv*, %struct.sv** %sv, align 8
  %284 = bitcast %struct.sv* %283 to %struct.gv*
  %call401 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %284, i32 0)
  %sv_u402 = getelementptr inbounds %struct.gv, %struct.gv* %call401, i32 0, i32 3
  %svu_gp403 = bitcast %union.anon.4* %sv_u402 to %struct.gp**
  %285 = load %struct.gp*, %struct.gp** %svu_gp403, align 8
  %add.ptr404 = getelementptr inbounds %struct.gp, %struct.gp* %285, i64 0
  %gp_sv405 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr404, i32 0, i32 0
  br label %cond.end406

cond.end406:                                      ; preds = %cond.false400, %cond.true395
  %cond407 = phi %struct.sv** [ %gp_sv399, %cond.true395 ], [ %gp_sv405, %cond.false400 ]
  %286 = load %struct.sv*, %struct.sv** %cond407, align 8
  store %struct.sv* %286, %struct.sv** %sv, align 8
  br label %do_HV_vivify_rv2hv_helem

sw.bb408:                                         ; preds = %while.body
  %287 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %288 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr409 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %288, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr409, %union.UNOP_AUX_item** %items, align 8
  %pad_offset410 = bitcast %union.UNOP_AUX_item* %incdec.ptr409 to i64*
  %289 = load i64, i64* %pad_offset410, align 8
  %arrayidx411 = getelementptr inbounds %struct.sv*, %struct.sv** %287, i64 %289
  %290 = load %struct.sv*, %struct.sv** %arrayidx411, align 8
  store %struct.sv* %290, %struct.sv** %sv, align 8
  br label %do_HV_vivify_rv2hv_helem

do_HV_vivify_rv2hv_helem:                         ; preds = %sw.bb408, %cond.end406
  br label %sw.bb412

sw.bb412:                                         ; preds = %while.body, %do_HV_vivify_rv2hv_helem
  %291 = load %struct.sv*, %struct.sv** %sv, align 8
  %call413 = call %struct.sv* @Perl_vivify_ref(%struct.sv* %291, i32 32)
  store %struct.sv* %call413, %struct.sv** %sv, align 8
  br label %do_HV_rv2hv_helem

do_HV_rv2hv_helem:                                ; preds = %sw.bb412, %sw.bb384
  %292 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags414 = getelementptr inbounds %struct.sv, %struct.sv* %292, i32 0, i32 2
  %293 = load i32, i32* %sv_flags414, align 4
  %and415 = and i32 %293, 2097152
  %tobool416 = icmp ne i32 %and415, 0
  br i1 %tobool416, label %cond.true417, label %cond.false418

cond.true417:                                     ; preds = %do_HV_rv2hv_helem
  br i1 true, label %land.rhs419, label %land.end422

cond.false418:                                    ; preds = %do_HV_rv2hv_helem
  br i1 false, label %land.rhs419, label %land.end422

land.rhs419:                                      ; preds = %cond.false418, %cond.true417
  %294 = load %struct.sv*, %struct.sv** %sv, align 8
  %call420 = call i32 @Perl_mg_get(%struct.sv* %294)
  %tobool421 = icmp ne i32 %call420, 0
  br label %land.end422

land.end422:                                      ; preds = %land.rhs419, %cond.false418, %cond.true417
  %295 = phi i1 [ false, %cond.false418 ], [ false, %cond.true417 ], [ %tobool421, %land.rhs419 ]
  %land.ext423 = zext i1 %295 to i32
  %296 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags424 = getelementptr inbounds %struct.sv, %struct.sv* %296, i32 0, i32 2
  %297 = load i32, i32* %sv_flags424, align 4
  %and425 = and i32 %297, 2048
  %tobool426 = icmp ne i32 %and425, 0
  br i1 %tobool426, label %cond.true427, label %cond.false428

cond.true427:                                     ; preds = %land.end422
  br i1 true, label %if.then429, label %if.else463

cond.false428:                                    ; preds = %land.end422
  br i1 false, label %if.then429, label %if.else463

if.then429:                                       ; preds = %cond.false428, %cond.true427
  %298 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags430 = getelementptr inbounds %struct.sv, %struct.sv* %298, i32 0, i32 2
  %299 = load i32, i32* %sv_flags430, align 4
  %and431 = and i32 %299, 2048
  %tobool432 = icmp ne i32 %and431, 0
  br i1 %tobool432, label %land.lhs.true433, label %cond.false448

land.lhs.true433:                                 ; preds = %if.then429
  %300 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u434 = getelementptr inbounds %struct.sv, %struct.sv* %300, i32 0, i32 3
  %svu_rv435 = bitcast %union.anon* %sv_u434 to %struct.sv**
  %301 = load %struct.sv*, %struct.sv** %svu_rv435, align 8
  %sv_flags436 = getelementptr inbounds %struct.sv, %struct.sv* %301, i32 0, i32 2
  %302 = load i32, i32* %sv_flags436, align 4
  %and437 = and i32 %302, 1048576
  %tobool438 = icmp ne i32 %and437, 0
  br i1 %tobool438, label %land.lhs.true439, label %cond.false448

land.lhs.true439:                                 ; preds = %land.lhs.true433
  %303 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u440 = getelementptr inbounds %struct.sv, %struct.sv* %303, i32 0, i32 3
  %svu_rv441 = bitcast %union.anon* %sv_u440 to %struct.sv**
  %304 = load %struct.sv*, %struct.sv** %svu_rv441, align 8
  %sv_any442 = getelementptr inbounds %struct.sv, %struct.sv* %304, i32 0, i32 0
  %305 = load i8*, i8** %sv_any442, align 8
  %306 = bitcast i8* %305 to %struct.xpvmg*
  %xmg_stash443 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %306, i32 0, i32 0
  %307 = load %struct.hv*, %struct.hv** %xmg_stash443, align 8
  %sv_flags444 = getelementptr inbounds %struct.hv, %struct.hv* %307, i32 0, i32 2
  %308 = load i32, i32* %sv_flags444, align 4
  %and445 = and i32 %308, 268435456
  %tobool446 = icmp ne i32 %and445, 0
  br i1 %tobool446, label %cond.true447, label %cond.false448

cond.true447:                                     ; preds = %land.lhs.true439
  br i1 true, label %if.then449, label %if.end451

cond.false448:                                    ; preds = %land.lhs.true439, %land.lhs.true433, %if.then429
  br i1 false, label %if.then449, label %if.end451

if.then449:                                       ; preds = %cond.false448, %cond.true447
  %309 = load %struct.sv*, %struct.sv** %sv, align 8
  %call450 = call %struct.sv* @Perl_amagic_deref_call(%struct.sv* %309, i32 3)
  store %struct.sv* %call450, %struct.sv** %sv, align 8
  br label %if.end451

if.end451:                                        ; preds = %if.then449, %cond.false448, %cond.true447
  %310 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u452 = getelementptr inbounds %struct.sv, %struct.sv* %310, i32 0, i32 3
  %svu_rv453 = bitcast %union.anon* %sv_u452 to %struct.sv**
  %311 = load %struct.sv*, %struct.sv** %svu_rv453, align 8
  store %struct.sv* %311, %struct.sv** %sv, align 8
  %312 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags454 = getelementptr inbounds %struct.sv, %struct.sv* %312, i32 0, i32 2
  %313 = load i32, i32* %sv_flags454, align 4
  %and455 = and i32 %313, 255
  %cmp456 = icmp ne i32 %and455, 12
  br i1 %cmp456, label %cond.true458, label %cond.false459

cond.true458:                                     ; preds = %if.end451
  br i1 true, label %if.then460, label %if.end462

cond.false459:                                    ; preds = %if.end451
  br i1 false, label %if.then460, label %if.end462

if.then460:                                       ; preds = %cond.false459, %cond.true458
  %call461 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.28, i64 0, i64 0))
  store %struct.op* %call461, %struct.op** %retval, align 8
  br label %return

if.end462:                                        ; preds = %cond.false459, %cond.true458
  br label %if.end505

if.else463:                                       ; preds = %cond.false428, %cond.true427
  %314 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags464 = getelementptr inbounds %struct.sv, %struct.sv* %314, i32 0, i32 2
  %315 = load i32, i32* %sv_flags464, align 4
  %and465 = and i32 %315, 255
  %cmp466 = icmp ne i32 %and465, 12
  br i1 %cmp466, label %if.then468, label %if.end504

if.then468:                                       ; preds = %if.else463
  %316 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags469 = getelementptr inbounds %struct.sv, %struct.sv* %316, i32 0, i32 2
  %317 = load i32, i32* %sv_flags469, align 4
  %and470 = and i32 %317, 49152
  %cmp471 = icmp eq i32 %and470, 32768
  br i1 %cmp471, label %land.lhs.true473, label %if.then483

land.lhs.true473:                                 ; preds = %if.then468
  %318 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags474 = getelementptr inbounds %struct.sv, %struct.sv* %318, i32 0, i32 2
  %319 = load i32, i32* %sv_flags474, align 4
  %and475 = and i32 %319, 255
  %cmp476 = icmp eq i32 %and475, 9
  br i1 %cmp476, label %if.end485, label %lor.lhs.false478

lor.lhs.false478:                                 ; preds = %land.lhs.true473
  %320 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags479 = getelementptr inbounds %struct.sv, %struct.sv* %320, i32 0, i32 2
  %321 = load i32, i32* %sv_flags479, align 4
  %and480 = and i32 %321, 255
  %cmp481 = icmp eq i32 %and480, 10
  br i1 %cmp481, label %if.end485, label %if.then483

if.then483:                                       ; preds = %lor.lhs.false478, %if.then468
  %322 = load %struct.sv*, %struct.sv** %sv, align 8
  %call484 = call %struct.gv* @S_softref2xv_lite(%struct.sv* %322, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i64 0, i64 0), i32 12)
  %323 = bitcast %struct.gv* %call484 to %struct.sv*
  store %struct.sv* %323, %struct.sv** %sv, align 8
  br label %if.end485

if.end485:                                        ; preds = %if.then483, %lor.lhs.false478, %land.lhs.true473
  %324 = load %struct.sv*, %struct.sv** %sv, align 8
  %325 = bitcast %struct.sv* %324 to %struct.gv*
  %sv_u486 = getelementptr inbounds %struct.gv, %struct.gv* %325, i32 0, i32 3
  %svu_gp487 = bitcast %union.anon.4* %sv_u486 to %struct.gp**
  %326 = load %struct.gp*, %struct.gp** %svu_gp487, align 8
  %add.ptr488 = getelementptr inbounds %struct.gp, %struct.gp* %326, i64 0
  %gp_hv489 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr488, i32 0, i32 5
  %327 = load %struct.hv*, %struct.hv** %gp_hv489, align 8
  %tobool490 = icmp ne %struct.hv* %327, null
  br i1 %tobool490, label %cond.true491, label %cond.false496

cond.true491:                                     ; preds = %if.end485
  %328 = load %struct.sv*, %struct.sv** %sv, align 8
  %329 = bitcast %struct.sv* %328 to %struct.gv*
  %sv_u492 = getelementptr inbounds %struct.gv, %struct.gv* %329, i32 0, i32 3
  %svu_gp493 = bitcast %union.anon.4* %sv_u492 to %struct.gp**
  %330 = load %struct.gp*, %struct.gp** %svu_gp493, align 8
  %add.ptr494 = getelementptr inbounds %struct.gp, %struct.gp* %330, i64 0
  %gp_hv495 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr494, i32 0, i32 5
  %331 = load %struct.hv*, %struct.hv** %gp_hv495, align 8
  br label %cond.end502

cond.false496:                                    ; preds = %if.end485
  %332 = load %struct.sv*, %struct.sv** %sv, align 8
  %333 = bitcast %struct.sv* %332 to %struct.gv*
  %call497 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %333, i32 12)
  %sv_u498 = getelementptr inbounds %struct.gv, %struct.gv* %call497, i32 0, i32 3
  %svu_gp499 = bitcast %union.anon.4* %sv_u498 to %struct.gp**
  %334 = load %struct.gp*, %struct.gp** %svu_gp499, align 8
  %add.ptr500 = getelementptr inbounds %struct.gp, %struct.gp* %334, i64 0
  %gp_hv501 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr500, i32 0, i32 5
  %335 = load %struct.hv*, %struct.hv** %gp_hv501, align 8
  br label %cond.end502

cond.end502:                                      ; preds = %cond.false496, %cond.true491
  %cond503 = phi %struct.hv* [ %331, %cond.true491 ], [ %335, %cond.false496 ]
  %336 = bitcast %struct.hv* %cond503 to i8*
  %337 = bitcast i8* %336 to %struct.sv*
  store %struct.sv* %337, %struct.sv** %sv, align 8
  br label %if.end504

if.end504:                                        ; preds = %cond.end502, %if.else463
  br label %if.end505

if.end505:                                        ; preds = %if.end504, %if.end462
  br label %do_HV_helem

do_HV_helem:                                      ; preds = %if.end505, %cond.end382, %sw.bb360
  store %struct.sv* null, %struct.sv** %keysv, align 8
  %338 = load i64, i64* %actions, align 8
  %and506 = and i64 %338, 48
  switch i64 %and506, label %sw.epilog536 [
    i64 0, label %sw.bb507
    i64 16, label %sw.bb508
    i64 32, label %sw.bb511
    i64 48, label %sw.bb515
  ]

sw.bb507:                                         ; preds = %do_HV_helem
  br label %finish

sw.bb508:                                         ; preds = %do_HV_helem
  %339 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr509 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %339, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr509, %union.UNOP_AUX_item** %items, align 8
  %sv510 = bitcast %union.UNOP_AUX_item* %incdec.ptr509 to %struct.sv**
  %340 = load %struct.sv*, %struct.sv** %sv510, align 8
  store %struct.sv* %340, %struct.sv** %keysv, align 8
  br label %sw.epilog536

sw.bb511:                                         ; preds = %do_HV_helem
  %341 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %342 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr512 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %342, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr512, %union.UNOP_AUX_item** %items, align 8
  %pad_offset513 = bitcast %union.UNOP_AUX_item* %incdec.ptr512 to i64*
  %343 = load i64, i64* %pad_offset513, align 8
  %arrayidx514 = getelementptr inbounds %struct.sv*, %struct.sv** %341, i64 %343
  %344 = load %struct.sv*, %struct.sv** %arrayidx514, align 8
  store %struct.sv* %344, %struct.sv** %keysv, align 8
  br label %sw.epilog536

sw.bb515:                                         ; preds = %do_HV_helem
  %345 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr516 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %345, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr516, %union.UNOP_AUX_item** %items, align 8
  %sv517 = bitcast %union.UNOP_AUX_item* %incdec.ptr516 to %struct.sv**
  %346 = load %struct.sv*, %struct.sv** %sv517, align 8
  store %struct.sv* %346, %struct.sv** %keysv, align 8
  %347 = load %struct.sv*, %struct.sv** %keysv, align 8
  %348 = bitcast %struct.sv* %347 to %struct.gv*
  %sv_u518 = getelementptr inbounds %struct.gv, %struct.gv* %348, i32 0, i32 3
  %svu_gp519 = bitcast %union.anon.4* %sv_u518 to %struct.gp**
  %349 = load %struct.gp*, %struct.gp** %svu_gp519, align 8
  %add.ptr520 = getelementptr inbounds %struct.gp, %struct.gp* %349, i64 0
  %gp_sv521 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr520, i32 0, i32 0
  %350 = load %struct.sv*, %struct.sv** %gp_sv521, align 8
  %tobool522 = icmp ne %struct.sv* %350, null
  br i1 %tobool522, label %cond.true523, label %cond.false528

cond.true523:                                     ; preds = %sw.bb515
  %351 = load %struct.sv*, %struct.sv** %keysv, align 8
  %352 = bitcast %struct.sv* %351 to %struct.gv*
  %sv_u524 = getelementptr inbounds %struct.gv, %struct.gv* %352, i32 0, i32 3
  %svu_gp525 = bitcast %union.anon.4* %sv_u524 to %struct.gp**
  %353 = load %struct.gp*, %struct.gp** %svu_gp525, align 8
  %add.ptr526 = getelementptr inbounds %struct.gp, %struct.gp* %353, i64 0
  %gp_sv527 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr526, i32 0, i32 0
  br label %cond.end534

cond.false528:                                    ; preds = %sw.bb515
  %354 = load %struct.sv*, %struct.sv** %keysv, align 8
  %355 = bitcast %struct.sv* %354 to %struct.gv*
  %call529 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %355, i32 0)
  %sv_u530 = getelementptr inbounds %struct.gv, %struct.gv* %call529, i32 0, i32 3
  %svu_gp531 = bitcast %union.anon.4* %sv_u530 to %struct.gp**
  %356 = load %struct.gp*, %struct.gp** %svu_gp531, align 8
  %add.ptr532 = getelementptr inbounds %struct.gp, %struct.gp* %356, i64 0
  %gp_sv533 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr532, i32 0, i32 0
  br label %cond.end534

cond.end534:                                      ; preds = %cond.false528, %cond.true523
  %cond535 = phi %struct.sv** [ %gp_sv527, %cond.true523 ], [ %gp_sv533, %cond.false528 ]
  %357 = load %struct.sv*, %struct.sv** %cond535, align 8
  store %struct.sv* %357, %struct.sv** %keysv, align 8
  br label %sw.epilog536

sw.epilog536:                                     ; preds = %do_HV_helem, %cond.end534, %sw.bb511, %sw.bb508
  %358 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  store %union.UNOP_AUX_item* %358, %union.UNOP_AUX_item** @PL_multideref_pc, align 8
  %359 = load i64, i64* %actions, align 8
  %and537 = and i64 %359, 64
  %tobool538 = icmp ne i64 %and537, 0
  br i1 %tobool538, label %if.end550, label %if.then539

if.then539:                                       ; preds = %sw.epilog536
  %360 = load %struct.sv*, %struct.sv** %sv, align 8
  %361 = bitcast %struct.sv* %360 to %struct.hv*
  %362 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call540 = call i8* @Perl_hv_common(%struct.hv* %361, %struct.sv* %362, i8* null, i64 0, i32 0, i32 16, %struct.sv* null, i32 0)
  %363 = bitcast i8* %call540 to %struct.he*
  store %struct.he* %363, %struct.he** %he, align 8
  %364 = load %struct.he*, %struct.he** %he, align 8
  %tobool541 = icmp ne %struct.he* %364, null
  br i1 %tobool541, label %lor.lhs.false542, label %if.then547

lor.lhs.false542:                                 ; preds = %if.then539
  %365 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %365, i32 0, i32 2
  %hent_val = bitcast %union.anon.1* %he_valu to %struct.sv**
  %366 = load %struct.sv*, %struct.sv** %hent_val, align 8
  store %struct.sv* %366, %struct.sv** %sv, align 8
  %tobool543 = icmp ne %struct.sv* %366, null
  br i1 %tobool543, label %lor.lhs.false544, label %if.then547

lor.lhs.false544:                                 ; preds = %lor.lhs.false542
  %367 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp545 = icmp eq %struct.sv* %367, @PL_sv_undef
  br i1 %cmp545, label %if.then547, label %if.end549

if.then547:                                       ; preds = %lor.lhs.false544, %lor.lhs.false542, %if.then539
  %368 = load %struct.sv*, %struct.sv** %keysv, align 8
  %369 = bitcast %struct.sv* %368 to i8*
  %call548 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_helem_sv, i64 0, i64 0), i8* %369)
  store %struct.op* %call548, %struct.op** %retval, align 8
  br label %return

if.end549:                                        ; preds = %lor.lhs.false544
  br label %sw.epilog813

if.end550:                                        ; preds = %sw.epilog536
  %370 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private551 = getelementptr inbounds %struct.op, %struct.op* %370, i32 0, i32 6
  %371 = load i8, i8* %op_private551, align 1
  %conv552 = zext i8 %371 to i32
  %and553 = and i32 %conv552, 48
  %tobool554 = icmp ne i32 %and553, 0
  br i1 %tobool554, label %if.then555, label %if.else592

if.then555:                                       ; preds = %if.end550
  %372 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private556 = getelementptr inbounds %struct.op, %struct.op* %372, i32 0, i32 6
  %373 = load i8, i8* %op_private556, align 1
  %conv557 = zext i8 %373 to i32
  %and558 = and i32 %conv557, 16
  %tobool559 = icmp ne i32 %and558, 0
  br i1 %tobool559, label %if.then560, label %if.else566

if.then560:                                       ; preds = %if.then555
  %374 = load %struct.sv*, %struct.sv** %sv, align 8
  %375 = bitcast %struct.sv* %374 to %struct.hv*
  %376 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call561 = call i8* @Perl_hv_common(%struct.hv* %375, %struct.sv* %376, i8* null, i64 0, i32 0, i32 8, %struct.sv* null, i32 0)
  %tobool562 = icmp ne i8* %call561, null
  %377 = zext i1 %tobool562 to i64
  %cond563 = select i1 %tobool562, i32 1, i32 0
  %tobool564 = icmp ne i32 %cond563, 0
  %378 = zext i1 %tobool564 to i64
  %cond565 = select i1 %tobool564, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  store %struct.sv* %cond565, %struct.sv** %sv, align 8
  br label %if.end591

if.else566:                                       ; preds = %if.then555
  %379 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags568 = getelementptr inbounds %struct.op, %struct.op* %379, i32 0, i32 5
  %380 = load i8, i8* %op_flags568, align 2
  %conv569 = zext i8 %380 to i32
  %and570 = and i32 %conv569, 3
  %tobool571 = icmp ne i32 %and570, 0
  br i1 %tobool571, label %cond.true572, label %cond.false576

cond.true572:                                     ; preds = %if.else566
  %381 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags573 = getelementptr inbounds %struct.op, %struct.op* %381, i32 0, i32 5
  %382 = load i8, i8* %op_flags573, align 2
  %conv574 = zext i8 %382 to i32
  %and575 = and i32 %conv574, 3
  br label %cond.end578

cond.false576:                                    ; preds = %if.else566
  %call577 = call i32 @Perl_block_gimme()
  br label %cond.end578

cond.end578:                                      ; preds = %cond.false576, %cond.true572
  %cond579 = phi i32 [ %and575, %cond.true572 ], [ %call577, %cond.false576 ]
  %cmp580 = icmp eq i32 %cond579, 1
  %383 = zext i1 %cmp580 to i64
  %cond582 = select i1 %cmp580, i32 4, i32 0
  store i32 %cond582, i32* %discard567, align 4
  %384 = load %struct.sv*, %struct.sv** %sv, align 8
  %385 = bitcast %struct.sv* %384 to %struct.hv*
  %386 = load %struct.sv*, %struct.sv** %keysv, align 8
  %387 = load i32, i32* %discard567, align 4
  %or = or i32 %387, 64
  %call583 = call i8* @Perl_hv_common(%struct.hv* %385, %struct.sv* %386, i8* null, i64 0, i32 0, i32 %or, %struct.sv* null, i32 0)
  %388 = bitcast i8* %call583 to %struct.sv*
  store %struct.sv* %388, %struct.sv** %sv, align 8
  %389 = load i32, i32* %discard567, align 4
  %tobool584 = icmp ne i32 %389, 0
  br i1 %tobool584, label %if.then585, label %if.end587

if.then585:                                       ; preds = %cond.end578
  %390 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next586 = getelementptr inbounds %struct.op, %struct.op* %390, i32 0, i32 0
  %391 = load %struct.op*, %struct.op** %op_next586, align 8
  store %struct.op* %391, %struct.op** %retval, align 8
  br label %return

if.end587:                                        ; preds = %cond.end578
  %392 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool588 = icmp ne %struct.sv* %392, null
  br i1 %tobool588, label %if.end590, label %if.then589

if.then589:                                       ; preds = %if.end587
  store %struct.sv* @PL_sv_undef, %struct.sv** %sv, align 8
  br label %if.end590

if.end590:                                        ; preds = %if.then589, %if.end587
  br label %if.end591

if.end591:                                        ; preds = %if.end590, %if.then560
  br label %if.end812

if.else592:                                       ; preds = %if.end550
  %393 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags594 = getelementptr inbounds %struct.op, %struct.op* %393, i32 0, i32 5
  %394 = load i8, i8* %op_flags594, align 2
  %conv595 = zext i8 %394 to i32
  %and596 = and i32 %conv595, 32
  %tobool597 = icmp ne i32 %and596, 0
  br i1 %tobool597, label %lor.end608, label %lor.rhs598

lor.rhs598:                                       ; preds = %if.else592
  %395 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private599 = getelementptr inbounds %struct.op, %struct.op* %395, i32 0, i32 6
  %396 = load i8, i8* %op_private599, align 1
  %conv600 = zext i8 %396 to i32
  %and601 = and i32 %conv600, 8
  %tobool602 = icmp ne i32 %and601, 0
  br i1 %tobool602, label %land.rhs603, label %land.end606

land.rhs603:                                      ; preds = %lor.rhs598
  %call604 = call i32 @Perl_is_lvalue_sub()
  %tobool605 = icmp ne i32 %call604, 0
  br label %land.end606

land.end606:                                      ; preds = %land.rhs603, %lor.rhs598
  %397 = phi i1 [ false, %lor.rhs598 ], [ %tobool605, %land.rhs603 ]
  br label %lor.end608

lor.end608:                                       ; preds = %land.end606, %if.else592
  %398 = phi i1 [ true, %if.else592 ], [ %397, %land.end606 ]
  %lor.ext609 = zext i1 %398 to i32
  store i32 %lor.ext609, i32* %lval593, align 4
  %399 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private611 = getelementptr inbounds %struct.op, %struct.op* %399, i32 0, i32 6
  %400 = load i8, i8* %op_private611, align 1
  %conv612 = zext i8 %400 to i32
  %and613 = and i32 %conv612, 64
  store i32 %and613, i32* %defer610, align 4
  %401 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private615 = getelementptr inbounds %struct.op, %struct.op* %401, i32 0, i32 6
  %402 = load i8, i8* %op_private615, align 1
  %conv616 = zext i8 %402 to i32
  %and617 = and i32 %conv616, 128
  %tobool618 = icmp ne i32 %and617, 0
  %frombool619 = zext i1 %tobool618 to i8
  store i8 %frombool619, i8* %localizing614, align 1
  store i8 1, i8* %preeminent620, align 1
  %403 = load %struct.sv*, %struct.sv** %sv, align 8
  %404 = bitcast %struct.sv* %403 to %struct.hv*
  store %struct.hv* %404, %struct.hv** %hv, align 8
  %405 = load i8, i8* %localizing614, align 1
  %tobool623 = trunc i8 %405 to i1
  br i1 %tobool623, label %cond.true625, label %cond.false626

cond.true625:                                     ; preds = %lor.end608
  br i1 true, label %if.then627, label %if.end664

cond.false626:                                    ; preds = %lor.end608
  br i1 false, label %if.then627, label %if.end664

if.then627:                                       ; preds = %cond.false626, %cond.true625
  %406 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags630 = getelementptr inbounds %struct.hv, %struct.hv* %406, i32 0, i32 2
  %407 = load i32, i32* %sv_flags630, align 4
  %and631 = and i32 %407, 8388608
  %tobool632 = icmp ne i32 %and631, 0
  br i1 %tobool632, label %lor.lhs.false633, label %if.then657

lor.lhs.false633:                                 ; preds = %if.then627
  %408 = load %struct.hv*, %struct.hv** %hv, align 8
  %409 = bitcast %struct.hv* %408 to %struct.sv*
  %call634 = call %struct.magic* @Perl_mg_find(%struct.sv* %409, i32 80)
  store %struct.magic* %call634, %struct.magic** %mg628, align 8
  %tobool635 = icmp ne %struct.magic* %call634, null
  br i1 %tobool635, label %lor.lhs.false636, label %if.then657

lor.lhs.false636:                                 ; preds = %lor.lhs.false633
  %410 = load %struct.magic*, %struct.magic** %mg628, align 8
  %mg_obj637 = getelementptr inbounds %struct.magic, %struct.magic* %410, i32 0, i32 6
  %411 = load %struct.sv*, %struct.sv** %mg_obj637, align 8
  %tobool638 = icmp ne %struct.sv* %411, null
  br i1 %tobool638, label %cond.true639, label %cond.false641

cond.true639:                                     ; preds = %lor.lhs.false636
  %412 = load %struct.magic*, %struct.magic** %mg628, align 8
  %mg_obj640 = getelementptr inbounds %struct.magic, %struct.magic* %412, i32 0, i32 6
  %413 = load %struct.sv*, %struct.sv** %mg_obj640, align 8
  br label %cond.end644

cond.false641:                                    ; preds = %lor.lhs.false636
  %414 = load %struct.hv*, %struct.hv** %hv, align 8
  %415 = bitcast %struct.hv* %414 to i8*
  %416 = bitcast i8* %415 to %struct.sv*
  %call642 = call %struct.sv* @Perl_newRV(%struct.sv* %416)
  %call643 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call642)
  br label %cond.end644

cond.end644:                                      ; preds = %cond.false641, %cond.true639
  %cond645 = phi %struct.sv* [ %413, %cond.true639 ], [ %call643, %cond.false641 ]
  %sv_u646 = getelementptr inbounds %struct.sv, %struct.sv* %cond645, i32 0, i32 3
  %svu_rv647 = bitcast %union.anon* %sv_u646 to %struct.sv**
  %417 = load %struct.sv*, %struct.sv** %svu_rv647, align 8
  %sv_any648 = getelementptr inbounds %struct.sv, %struct.sv* %417, i32 0, i32 0
  %418 = load i8*, i8** %sv_any648, align 8
  %419 = bitcast i8* %418 to %struct.xpvmg*
  %xmg_stash649 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %419, i32 0, i32 0
  %420 = load %struct.hv*, %struct.hv** %xmg_stash649, align 8
  store %struct.hv* %420, %struct.hv** %stash629, align 8
  %tobool650 = icmp ne %struct.hv* %420, null
  br i1 %tobool650, label %land.lhs.true651, label %if.end663

land.lhs.true651:                                 ; preds = %cond.end644
  %421 = load %struct.hv*, %struct.hv** %stash629, align 8
  %call652 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %421, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0), i32 1)
  %tobool653 = icmp ne %struct.gv* %call652, null
  br i1 %tobool653, label %land.lhs.true654, label %if.end663

land.lhs.true654:                                 ; preds = %land.lhs.true651
  %422 = load %struct.hv*, %struct.hv** %stash629, align 8
  %call655 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %422, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i64 0, i64 0), i32 1)
  %tobool656 = icmp ne %struct.gv* %call655, null
  br i1 %tobool656, label %if.then657, label %if.end663

if.then657:                                       ; preds = %land.lhs.true654, %lor.lhs.false633, %if.then627
  %423 = load %struct.hv*, %struct.hv** %hv, align 8
  %424 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call658 = call i8* @Perl_hv_common(%struct.hv* %423, %struct.sv* %424, i8* null, i64 0, i32 0, i32 8, %struct.sv* null, i32 0)
  %tobool659 = icmp ne i8* %call658, null
  %425 = zext i1 %tobool659 to i64
  %cond660 = select i1 %tobool659, i32 1, i32 0
  %tobool661 = icmp ne i32 %cond660, 0
  %frombool662 = zext i1 %tobool661 to i8
  store i8 %frombool662, i8* %preeminent620, align 1
  br label %if.end663

if.end663:                                        ; preds = %if.then657, %land.lhs.true654, %land.lhs.true651, %cond.end644
  br label %if.end664

if.end664:                                        ; preds = %if.end663, %cond.false626, %cond.true625
  %426 = load %struct.hv*, %struct.hv** %hv, align 8
  %427 = load %struct.sv*, %struct.sv** %keysv, align 8
  %428 = load i32, i32* %lval593, align 4
  %tobool665 = icmp ne i32 %428, 0
  br i1 %tobool665, label %land.rhs666, label %land.end669

land.rhs666:                                      ; preds = %if.end664
  %429 = load i32, i32* %defer610, align 4
  %tobool667 = icmp ne i32 %429, 0
  %lnot668 = xor i1 %tobool667, true
  br label %land.end669

land.end669:                                      ; preds = %land.rhs666, %if.end664
  %430 = phi i1 [ false, %if.end664 ], [ %lnot668, %land.rhs666 ]
  %431 = zext i1 %430 to i64
  %cond671 = select i1 %430, i32 16, i32 0
  %call672 = call i8* @Perl_hv_common(%struct.hv* %426, %struct.sv* %427, i8* null, i64 0, i32 0, i32 %cond671, %struct.sv* null, i32 0)
  %432 = bitcast i8* %call672 to %struct.he*
  store %struct.he* %432, %struct.he** %he622, align 8
  %433 = load %struct.he*, %struct.he** %he622, align 8
  %tobool673 = icmp ne %struct.he* %433, null
  br i1 %tobool673, label %cond.true674, label %cond.false677

cond.true674:                                     ; preds = %land.end669
  %434 = load %struct.he*, %struct.he** %he622, align 8
  %he_valu675 = getelementptr inbounds %struct.he, %struct.he* %434, i32 0, i32 2
  %hent_val676 = bitcast %union.anon.1* %he_valu675 to %struct.sv**
  br label %cond.end678

cond.false677:                                    ; preds = %land.end669
  br label %cond.end678

cond.end678:                                      ; preds = %cond.false677, %cond.true674
  %cond679 = phi %struct.sv** [ %hent_val676, %cond.true674 ], [ null, %cond.false677 ]
  store %struct.sv** %cond679, %struct.sv*** %svp621, align 8
  %435 = load i32, i32* %lval593, align 4
  %tobool680 = icmp ne i32 %435, 0
  br i1 %tobool680, label %if.then681, label %if.else793

if.then681:                                       ; preds = %cond.end678
  %436 = load %struct.sv**, %struct.sv*** %svp621, align 8
  %tobool682 = icmp ne %struct.sv** %436, null
  br i1 %tobool682, label %lor.lhs.false683, label %if.then688

lor.lhs.false683:                                 ; preds = %if.then681
  %437 = load %struct.sv**, %struct.sv*** %svp621, align 8
  %438 = load %struct.sv*, %struct.sv** %437, align 8
  store %struct.sv* %438, %struct.sv** %sv, align 8
  %tobool684 = icmp ne %struct.sv* %438, null
  br i1 %tobool684, label %lor.lhs.false685, label %if.then688

lor.lhs.false685:                                 ; preds = %lor.lhs.false683
  %439 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp686 = icmp eq %struct.sv* %439, @PL_sv_undef
  br i1 %cmp686, label %if.then688, label %if.else699

if.then688:                                       ; preds = %lor.lhs.false685, %lor.lhs.false683, %if.then681
  %440 = load i32, i32* %defer610, align 4
  %tobool689 = icmp ne i32 %440, 0
  br i1 %tobool689, label %if.end692, label %if.then690

if.then690:                                       ; preds = %if.then688
  %441 = load %struct.sv*, %struct.sv** %keysv, align 8
  %442 = bitcast %struct.sv* %441 to i8*
  %call691 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_helem_sv, i64 0, i64 0), i8* %442)
  store %struct.op* %call691, %struct.op** %retval, align 8
  br label %return

if.end692:                                        ; preds = %if.then688
  %call693 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call693, %struct.sv** %lv, align 8
  %443 = load %struct.sv*, %struct.sv** %lv, align 8
  call void @Perl_sv_upgrade(%struct.sv* %443, i32 10)
  %444 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any694 = getelementptr inbounds %struct.sv, %struct.sv* %444, i32 0, i32 0
  %445 = load i8*, i8** %sv_any694, align 8
  %446 = bitcast i8* %445 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %446, i32 0, i32 9
  store i8 121, i8* %xlv_type, align 8
  %447 = load %struct.sv*, %struct.sv** %lv, align 8
  %448 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call695 = call %struct.sv* @Perl_newSVsv(%struct.sv* %448)
  store %struct.sv* %call695, %struct.sv** %key2, align 8
  call void @Perl_sv_magic(%struct.sv* %447, %struct.sv* %call695, i32 121, i8* null, i32 0)
  %449 = load %struct.sv*, %struct.sv** %key2, align 8
  %450 = bitcast %struct.sv* %449 to i8*
  %451 = bitcast i8* %450 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %451)
  %452 = load %struct.hv*, %struct.hv** %hv, align 8
  %453 = bitcast %struct.hv* %452 to i8*
  %454 = bitcast i8* %453 to %struct.sv*
  %call696 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %454)
  %455 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any697 = getelementptr inbounds %struct.sv, %struct.sv* %455, i32 0, i32 0
  %456 = load i8*, i8** %sv_any697, align 8
  %457 = bitcast i8* %456 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %457, i32 0, i32 8
  store %struct.sv* %call696, %struct.sv** %xlv_targ, align 8
  %458 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any698 = getelementptr inbounds %struct.sv, %struct.sv* %458, i32 0, i32 0
  %459 = load i8*, i8** %sv_any698, align 8
  %460 = bitcast i8* %459 to %struct.xpvlv*
  %xlv_targlen = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %460, i32 0, i32 7
  store i64 1, i64* %xlv_targlen, align 8
  %461 = load %struct.sv*, %struct.sv** %lv, align 8
  store %struct.sv* %461, %struct.sv** %sv, align 8
  br label %if.end792

if.else699:                                       ; preds = %lor.lhs.false685
  %462 = load i8, i8* %localizing614, align 1
  %tobool700 = trunc i8 %462 to i1
  br i1 %tobool700, label %if.then701, label %if.end791

if.then701:                                       ; preds = %if.else699
  %463 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags702 = getelementptr inbounds %struct.hv, %struct.hv* %463, i32 0, i32 2
  %464 = load i32, i32* %sv_flags702, align 4
  %and703 = and i32 %464, 33554432
  %tobool704 = icmp ne i32 %and703, 0
  br i1 %tobool704, label %land.lhs.true705, label %cond.false768

land.lhs.true705:                                 ; preds = %if.then701
  %465 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u706 = getelementptr inbounds %struct.hv, %struct.hv* %465, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u706 to %struct.he***
  %466 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %467 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any707 = getelementptr inbounds %struct.hv, %struct.hv* %467, i32 0, i32 0
  %468 = load %struct.xpvhv*, %struct.xpvhv** %sv_any707, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %468, i32 0, i32 3
  %469 = load i64, i64* %xhv_max, align 8
  %add708 = add i64 %469, 1
  %arrayidx709 = getelementptr inbounds %struct.he*, %struct.he** %466, i64 %add708
  %470 = bitcast %struct.he** %arrayidx709 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %470, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %471 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool710 = icmp ne %struct.hek* %471, null
  br i1 %tobool710, label %land.lhs.true711, label %cond.false768

land.lhs.true711:                                 ; preds = %land.lhs.true705
  %472 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u712 = getelementptr inbounds %struct.hv, %struct.hv* %472, i32 0, i32 3
  %svu_hash713 = bitcast %union.anon.5* %sv_u712 to %struct.he***
  %473 = load %struct.he**, %struct.he*** %svu_hash713, align 8
  %474 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any714 = getelementptr inbounds %struct.hv, %struct.hv* %474, i32 0, i32 0
  %475 = load %struct.xpvhv*, %struct.xpvhv** %sv_any714, align 8
  %xhv_max715 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %475, i32 0, i32 3
  %476 = load i64, i64* %xhv_max715, align 8
  %add716 = add i64 %476, 1
  %arrayidx717 = getelementptr inbounds %struct.he*, %struct.he** %473, i64 %add716
  %477 = bitcast %struct.he** %arrayidx717 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %477, i32 0, i32 4
  %478 = load i32, i32* %xhv_name_count, align 4
  %tobool718 = icmp ne i32 %478, 0
  br i1 %tobool718, label %cond.true719, label %cond.false728

cond.true719:                                     ; preds = %land.lhs.true711
  %479 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u720 = getelementptr inbounds %struct.hv, %struct.hv* %479, i32 0, i32 3
  %svu_hash721 = bitcast %union.anon.5* %sv_u720 to %struct.he***
  %480 = load %struct.he**, %struct.he*** %svu_hash721, align 8
  %481 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any722 = getelementptr inbounds %struct.hv, %struct.hv* %481, i32 0, i32 0
  %482 = load %struct.xpvhv*, %struct.xpvhv** %sv_any722, align 8
  %xhv_max723 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %482, i32 0, i32 3
  %483 = load i64, i64* %xhv_max723, align 8
  %add724 = add i64 %483, 1
  %arrayidx725 = getelementptr inbounds %struct.he*, %struct.he** %480, i64 %add724
  %484 = bitcast %struct.he** %arrayidx725 to %struct.xpvhv_aux*
  %xhv_name_u726 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %484, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u726 to %struct.hek***
  %485 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %486 = load %struct.hek*, %struct.hek** %485, align 8
  %tobool727 = icmp ne %struct.hek* %486, null
  br i1 %tobool727, label %cond.true738, label %cond.false768

cond.false728:                                    ; preds = %land.lhs.true711
  %487 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u729 = getelementptr inbounds %struct.hv, %struct.hv* %487, i32 0, i32 3
  %svu_hash730 = bitcast %union.anon.5* %sv_u729 to %struct.he***
  %488 = load %struct.he**, %struct.he*** %svu_hash730, align 8
  %489 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any731 = getelementptr inbounds %struct.hv, %struct.hv* %489, i32 0, i32 0
  %490 = load %struct.xpvhv*, %struct.xpvhv** %sv_any731, align 8
  %xhv_max732 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %490, i32 0, i32 3
  %491 = load i64, i64* %xhv_max732, align 8
  %add733 = add i64 %491, 1
  %arrayidx734 = getelementptr inbounds %struct.he*, %struct.he** %488, i64 %add733
  %492 = bitcast %struct.he** %arrayidx734 to %struct.xpvhv_aux*
  %xhv_name_u735 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %492, i32 0, i32 0
  %xhvnameu_name736 = bitcast %union._xhvnameu* %xhv_name_u735 to %struct.hek**
  %493 = load %struct.hek*, %struct.hek** %xhvnameu_name736, align 8
  %tobool737 = icmp ne %struct.hek* %493, null
  br i1 %tobool737, label %cond.true738, label %cond.false768

cond.true738:                                     ; preds = %cond.false728, %cond.true719
  %494 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u739 = getelementptr inbounds %struct.hv, %struct.hv* %494, i32 0, i32 3
  %svu_hash740 = bitcast %union.anon.5* %sv_u739 to %struct.he***
  %495 = load %struct.he**, %struct.he*** %svu_hash740, align 8
  %496 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any741 = getelementptr inbounds %struct.hv, %struct.hv* %496, i32 0, i32 0
  %497 = load %struct.xpvhv*, %struct.xpvhv** %sv_any741, align 8
  %xhv_max742 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %497, i32 0, i32 3
  %498 = load i64, i64* %xhv_max742, align 8
  %add743 = add i64 %498, 1
  %arrayidx744 = getelementptr inbounds %struct.he*, %struct.he** %495, i64 %add743
  %499 = bitcast %struct.he** %arrayidx744 to %struct.xpvhv_aux*
  %xhv_name_count745 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %499, i32 0, i32 4
  %500 = load i32, i32* %xhv_name_count745, align 4
  %tobool746 = icmp ne i32 %500, 0
  br i1 %tobool746, label %cond.true747, label %cond.false756

cond.true747:                                     ; preds = %cond.true738
  %501 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u748 = getelementptr inbounds %struct.hv, %struct.hv* %501, i32 0, i32 3
  %svu_hash749 = bitcast %union.anon.5* %sv_u748 to %struct.he***
  %502 = load %struct.he**, %struct.he*** %svu_hash749, align 8
  %503 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any750 = getelementptr inbounds %struct.hv, %struct.hv* %503, i32 0, i32 0
  %504 = load %struct.xpvhv*, %struct.xpvhv** %sv_any750, align 8
  %xhv_max751 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %504, i32 0, i32 3
  %505 = load i64, i64* %xhv_max751, align 8
  %add752 = add i64 %505, 1
  %arrayidx753 = getelementptr inbounds %struct.he*, %struct.he** %502, i64 %add752
  %506 = bitcast %struct.he** %arrayidx753 to %struct.xpvhv_aux*
  %xhv_name_u754 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %506, i32 0, i32 0
  %xhvnameu_names755 = bitcast %union._xhvnameu* %xhv_name_u754 to %struct.hek***
  %507 = load %struct.hek**, %struct.hek*** %xhvnameu_names755, align 8
  %508 = load %struct.hek*, %struct.hek** %507, align 8
  br label %cond.end765

cond.false756:                                    ; preds = %cond.true738
  %509 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u757 = getelementptr inbounds %struct.hv, %struct.hv* %509, i32 0, i32 3
  %svu_hash758 = bitcast %union.anon.5* %sv_u757 to %struct.he***
  %510 = load %struct.he**, %struct.he*** %svu_hash758, align 8
  %511 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any759 = getelementptr inbounds %struct.hv, %struct.hv* %511, i32 0, i32 0
  %512 = load %struct.xpvhv*, %struct.xpvhv** %sv_any759, align 8
  %xhv_max760 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %512, i32 0, i32 3
  %513 = load i64, i64* %xhv_max760, align 8
  %add761 = add i64 %513, 1
  %arrayidx762 = getelementptr inbounds %struct.he*, %struct.he** %510, i64 %add761
  %514 = bitcast %struct.he** %arrayidx762 to %struct.xpvhv_aux*
  %xhv_name_u763 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %514, i32 0, i32 0
  %xhvnameu_name764 = bitcast %union._xhvnameu* %xhv_name_u763 to %struct.hek**
  %515 = load %struct.hek*, %struct.hek** %xhvnameu_name764, align 8
  br label %cond.end765

cond.end765:                                      ; preds = %cond.false756, %cond.true747
  %cond766 = phi %struct.hek* [ %508, %cond.true747 ], [ %515, %cond.false756 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond766, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %tobool767 = icmp ne i8* %arraydecay, null
  br i1 %tobool767, label %land.lhs.true769, label %if.else780

cond.false768:                                    ; preds = %cond.false728, %cond.true719, %land.lhs.true705, %if.then701
  br i1 false, label %land.lhs.true769, label %if.else780

land.lhs.true769:                                 ; preds = %cond.false768, %cond.end765
  %516 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags770 = getelementptr inbounds %struct.sv, %struct.sv* %516, i32 0, i32 2
  %517 = load i32, i32* %sv_flags770, align 4
  %and771 = and i32 %517, 255
  %cmp772 = icmp eq i32 %and771, 9
  br i1 %cmp772, label %if.then774, label %if.else780

if.then774:                                       ; preds = %land.lhs.true769
  %518 = load %struct.sv*, %struct.sv** %sv, align 8
  %519 = bitcast %struct.sv* %518 to i8*
  %520 = bitcast i8* %519 to %struct.gv*
  %521 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags775 = getelementptr inbounds %struct.op, %struct.op* %521, i32 0, i32 5
  %522 = load i8, i8* %op_flags775, align 2
  %conv776 = zext i8 %522 to i32
  %and777 = and i32 %conv776, 128
  %tobool778 = icmp ne i32 %and777, 0
  %lnot779 = xor i1 %tobool778, true
  %lnot.ext = zext i1 %lnot779 to i32
  call void @Perl_save_gp(%struct.gv* %520, i32 %lnot.ext)
  br label %if.end790

if.else780:                                       ; preds = %land.lhs.true769, %cond.false768, %cond.end765
  %523 = load i8, i8* %preeminent620, align 1
  %tobool781 = trunc i8 %523 to i1
  br i1 %tobool781, label %if.then782, label %if.else788

if.then782:                                       ; preds = %if.else780
  %524 = load %struct.hv*, %struct.hv** %hv, align 8
  %525 = load %struct.sv*, %struct.sv** %keysv, align 8
  %526 = load %struct.sv**, %struct.sv*** %svp621, align 8
  %527 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags783 = getelementptr inbounds %struct.op, %struct.op* %527, i32 0, i32 5
  %528 = load i8, i8* %op_flags783, align 2
  %conv784 = zext i8 %528 to i32
  %and785 = and i32 %conv784, 128
  %tobool786 = icmp ne i32 %and785, 0
  %529 = zext i1 %tobool786 to i64
  %cond787 = select i1 %tobool786, i32 0, i32 1
  call void @Perl_save_helem_flags(%struct.hv* %524, %struct.sv* %525, %struct.sv** %526, i32 %cond787)
  %530 = load %struct.sv**, %struct.sv*** %svp621, align 8
  %531 = load %struct.sv*, %struct.sv** %530, align 8
  store %struct.sv* %531, %struct.sv** %sv, align 8
  br label %if.end789

if.else788:                                       ; preds = %if.else780
  %532 = load %struct.hv*, %struct.hv** %hv, align 8
  %533 = bitcast %struct.hv* %532 to i8*
  %534 = bitcast i8* %533 to %struct.hv*
  %535 = load %struct.sv*, %struct.sv** %keysv, align 8
  call void @Perl_save_hdelete(%struct.hv* %534, %struct.sv* %535)
  br label %if.end789

if.end789:                                        ; preds = %if.else788, %if.then782
  br label %if.end790

if.end790:                                        ; preds = %if.end789, %if.then774
  br label %if.end791

if.end791:                                        ; preds = %if.end790, %if.else699
  br label %if.end792

if.end792:                                        ; preds = %if.end791, %if.end692
  br label %if.end811

if.else793:                                       ; preds = %cond.end678
  %536 = load %struct.sv**, %struct.sv*** %svp621, align 8
  %tobool794 = icmp ne %struct.sv** %536, null
  br i1 %tobool794, label %land.lhs.true795, label %cond.false798

land.lhs.true795:                                 ; preds = %if.else793
  %537 = load %struct.sv**, %struct.sv*** %svp621, align 8
  %538 = load %struct.sv*, %struct.sv** %537, align 8
  %tobool796 = icmp ne %struct.sv* %538, null
  br i1 %tobool796, label %cond.true797, label %cond.false798

cond.true797:                                     ; preds = %land.lhs.true795
  %539 = load %struct.sv**, %struct.sv*** %svp621, align 8
  %540 = load %struct.sv*, %struct.sv** %539, align 8
  br label %cond.end799

cond.false798:                                    ; preds = %land.lhs.true795, %if.else793
  br label %cond.end799

cond.end799:                                      ; preds = %cond.false798, %cond.true797
  %cond800 = phi %struct.sv* [ %540, %cond.true797 ], [ @PL_sv_undef, %cond.false798 ]
  store %struct.sv* %cond800, %struct.sv** %sv, align 8
  %541 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags801 = getelementptr inbounds %struct.hv, %struct.hv* %541, i32 0, i32 2
  %542 = load i32, i32* %sv_flags801, align 4
  %and802 = and i32 %542, 8388608
  %tobool803 = icmp ne i32 %and802, 0
  br i1 %tobool803, label %land.lhs.true804, label %if.end810

land.lhs.true804:                                 ; preds = %cond.end799
  %543 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags805 = getelementptr inbounds %struct.sv, %struct.sv* %543, i32 0, i32 2
  %544 = load i32, i32* %sv_flags805, align 4
  %and806 = and i32 %544, 2097152
  %tobool807 = icmp ne i32 %and806, 0
  br i1 %tobool807, label %if.then808, label %if.end810

if.then808:                                       ; preds = %land.lhs.true804
  %545 = load %struct.sv*, %struct.sv** %sv, align 8
  %call809 = call i32 @Perl_mg_get(%struct.sv* %545)
  br label %if.end810

if.end810:                                        ; preds = %if.then808, %land.lhs.true804, %cond.end799
  br label %if.end811

if.end811:                                        ; preds = %if.end810, %if.end792
  br label %if.end812

if.end812:                                        ; preds = %if.end811, %if.end591
  br label %finish

sw.epilog813:                                     ; preds = %while.body, %if.end549, %if.end195
  %546 = load i64, i64* %actions, align 8
  %shr = lshr i64 %546, 7
  store i64 %shr, i64* %actions, align 8
  br label %while.body

return:                                           ; preds = %if.then690, %if.then585, %if.then547, %if.then460, %do.end358, %if.then302, %if.then225, %if.then193, %if.then77
  %547 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %547
}

declare dso_local zeroext i1 @Perl_av_exists(%struct.av*, i64) #1

declare dso_local %struct.sv* @Perl_av_delete(%struct.av*, i64, i32) #1

declare dso_local %struct.sv* @Perl_newSVavdefelem(%struct.av*, i64, i1 zeroext) #1

declare dso_local void @Perl_save_aelem_flags(%struct.av*, i64, %struct.sv**, i32) #1

declare dso_local void @Perl_save_adelete(%struct.av*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_iter() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %oldsv = alloca %struct.sv*, align 8
  %itersvp = alloca %struct.sv**, align 8
  %cur = alloca %struct.sv*, align 8
  %end = alloca %struct.sv*, align 8
  %maxlen = alloca i64, align 8
  %max = alloca i8*, align 8
  %cur94 = alloca i64, align 8
  %av = alloca %struct.av*, align 8
  %sv = alloca %struct.sv*, align 8
  %av_is_stack = alloca i8, align 1
  %ix = alloca i64, align 8
  %svp237 = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %6, i32 0, i32 1
  %7 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %8 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %8, i32 0, i32 4
  %9 = load i32, i32* %si_cxix, align 8
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %7, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %10 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %10, i32 0, i32 0
  %cx_blk = bitcast %union.anon.17* %cx_u to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 8
  %blku_loop = bitcast %union.anon.20* %blk_u to %struct.block_loop*
  %itervar_u = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop, i32 0, i32 2
  %oldcomppad = bitcast %union.anon.21* %itervar_u to %struct.av**
  %11 = load %struct.av*, %struct.av** %oldcomppad, align 8
  %tobool = icmp ne %struct.av* %11, null
  br i1 %tobool, label %cond.true1, label %cond.false36

cond.true1:                                       ; preds = %do.end
  %12 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u2 = getelementptr inbounds %struct.context, %struct.context* %12, i32 0, i32 0
  %cx_blk3 = bitcast %union.anon.17* %cx_u2 to %struct.block*
  %blk_u4 = getelementptr inbounds %struct.block, %struct.block* %cx_blk3, i32 0, i32 8
  %blku_loop5 = bitcast %union.anon.20* %blk_u4 to %struct.block_loop*
  %my_op = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop5, i32 0, i32 1
  %13 = load %struct.loop*, %struct.loop** %my_op, align 8
  %op_targ = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 3
  %14 = load i64, i64* %op_targ, align 8
  %tobool6 = icmp ne i64 %14, 0
  br i1 %tobool6, label %cond.true7, label %cond.false13

cond.true7:                                       ; preds = %cond.true1
  %15 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u8 = getelementptr inbounds %struct.context, %struct.context* %15, i32 0, i32 0
  %cx_blk9 = bitcast %union.anon.17* %cx_u8 to %struct.block*
  %blk_u10 = getelementptr inbounds %struct.block, %struct.block* %cx_blk9, i32 0, i32 8
  %blku_loop11 = bitcast %union.anon.20* %blk_u10 to %struct.block_loop*
  %itervar_u12 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop11, i32 0, i32 2
  %svp = bitcast %union.anon.21* %itervar_u12 to %struct.sv***
  %16 = load %struct.sv**, %struct.sv*** %svp, align 8
  br label %cond.end34

cond.false13:                                     ; preds = %cond.true1
  %17 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u14 = getelementptr inbounds %struct.context, %struct.context* %17, i32 0, i32 0
  %cx_blk15 = bitcast %union.anon.17* %cx_u14 to %struct.block*
  %blk_u16 = getelementptr inbounds %struct.block, %struct.block* %cx_blk15, i32 0, i32 8
  %blku_loop17 = bitcast %union.anon.20* %blk_u16 to %struct.block_loop*
  %itervar_u18 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop17, i32 0, i32 2
  %gv = bitcast %union.anon.21* %itervar_u18 to %struct.gv**
  %18 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %and = and i32 %19, 255
  %cmp19 = icmp eq i32 %and, 9
  br i1 %cmp19, label %cond.true20, label %cond.false27

cond.true20:                                      ; preds = %cond.false13
  %20 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u21 = getelementptr inbounds %struct.context, %struct.context* %20, i32 0, i32 0
  %cx_blk22 = bitcast %union.anon.17* %cx_u21 to %struct.block*
  %blk_u23 = getelementptr inbounds %struct.block, %struct.block* %cx_blk22, i32 0, i32 8
  %blku_loop24 = bitcast %union.anon.20* %blk_u23 to %struct.block_loop*
  %itervar_u25 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop24, i32 0, i32 2
  %gv26 = bitcast %union.anon.21* %itervar_u25 to %struct.gv**
  %21 = load %struct.gv*, %struct.gv** %gv26, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %21, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %22 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %22, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  br label %cond.end

cond.false27:                                     ; preds = %cond.false13
  %23 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u28 = getelementptr inbounds %struct.context, %struct.context* %23, i32 0, i32 0
  %cx_blk29 = bitcast %union.anon.17* %cx_u28 to %struct.block*
  %blk_u30 = getelementptr inbounds %struct.block, %struct.block* %cx_blk29, i32 0, i32 8
  %blku_loop31 = bitcast %union.anon.20* %blk_u30 to %struct.block_loop*
  %itervar_u32 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop31, i32 0, i32 2
  %gv33 = bitcast %union.anon.21* %itervar_u32 to %struct.gv**
  %24 = bitcast %struct.gv** %gv33 to %struct.sv**
  br label %cond.end

cond.end:                                         ; preds = %cond.false27, %cond.true20
  %cond = phi %struct.sv** [ %gp_sv, %cond.true20 ], [ %24, %cond.false27 ]
  br label %cond.end34

cond.end34:                                       ; preds = %cond.end, %cond.true7
  %cond35 = phi %struct.sv** [ %16, %cond.true7 ], [ %cond, %cond.end ]
  br label %cond.end37

cond.false36:                                     ; preds = %do.end
  br label %cond.end37

cond.end37:                                       ; preds = %cond.false36, %cond.end34
  %cond38 = phi %struct.sv** [ %cond35, %cond.end34 ], [ null, %cond.false36 ]
  store %struct.sv** %cond38, %struct.sv*** %itersvp, align 8
  %25 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u39 = getelementptr inbounds %struct.context, %struct.context* %25, i32 0, i32 0
  %cx_subst = bitcast %union.anon.17* %cx_u39 to %struct.subst*
  %sbu_type = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst, i32 0, i32 0
  %26 = load i8, i8* %sbu_type, align 8
  %conv = zext i8 %26 to i32
  %and40 = and i32 %conv, 15
  switch i32 %and40, label %sw.default [
    i32 6, label %sw.bb
    i32 7, label %sw.bb93
    i32 4, label %sw.bb150
  ]

sw.bb:                                            ; preds = %cond.end37
  %27 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u41 = getelementptr inbounds %struct.context, %struct.context* %27, i32 0, i32 0
  %cx_blk42 = bitcast %union.anon.17* %cx_u41 to %struct.block*
  %blk_u43 = getelementptr inbounds %struct.block, %struct.block* %cx_blk42, i32 0, i32 8
  %blku_loop44 = bitcast %union.anon.20* %blk_u43 to %struct.block_loop*
  %state_u = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop44, i32 0, i32 3
  %lazysv = bitcast %union.anon.22* %state_u to %struct.anon.25*
  %cur45 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %lazysv, i32 0, i32 0
  %28 = load %struct.sv*, %struct.sv** %cur45, align 8
  store %struct.sv* %28, %struct.sv** %cur, align 8
  %29 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u46 = getelementptr inbounds %struct.context, %struct.context* %29, i32 0, i32 0
  %cx_blk47 = bitcast %union.anon.17* %cx_u46 to %struct.block*
  %blk_u48 = getelementptr inbounds %struct.block, %struct.block* %cx_blk47, i32 0, i32 8
  %blku_loop49 = bitcast %union.anon.20* %blk_u48 to %struct.block_loop*
  %state_u50 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop49, i32 0, i32 3
  %lazysv51 = bitcast %union.anon.22* %state_u50 to %struct.anon.25*
  %end52 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %lazysv51, i32 0, i32 1
  %30 = load %struct.sv*, %struct.sv** %end52, align 8
  store %struct.sv* %30, %struct.sv** %end, align 8
  store i64 0, i64* %maxlen, align 8
  %31 = load %struct.sv*, %struct.sv** %end, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %32, 2098176
  %cmp55 = icmp eq i32 %and54, 1024
  br i1 %cmp55, label %cond.true57, label %cond.false60

cond.true57:                                      ; preds = %sw.bb
  %33 = load %struct.sv*, %struct.sv** %end, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 2
  %36 = load i64, i64* %xpv_cur, align 8
  store i64 %36, i64* %maxlen, align 8
  %37 = load %struct.sv*, %struct.sv** %end, align 8
  %sv_u58 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u58 to i8**
  %38 = load i8*, i8** %svu_pv, align 8
  %add.ptr59 = getelementptr inbounds i8, i8* %38, i64 0
  br label %cond.end62

cond.false60:                                     ; preds = %sw.bb
  %39 = load %struct.sv*, %struct.sv** %end, align 8
  %call61 = call i8* @Perl_sv_2pv_flags(%struct.sv* %39, i64* %maxlen, i32 34)
  br label %cond.end62

cond.end62:                                       ; preds = %cond.false60, %cond.true57
  %cond63 = phi i8* [ %add.ptr59, %cond.true57 ], [ %call61, %cond.false60 ]
  store i8* %cond63, i8** %max, align 8
  %40 = load %struct.sv*, %struct.sv** %cur, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %41, 768
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %cond.true71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end62
  %42 = load %struct.sv*, %struct.sv** %cur, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any67, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_cur68 = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 2
  %45 = load i64, i64* %xpv_cur68, align 8
  %46 = load i64, i64* %maxlen, align 8
  %cmp69 = icmp ugt i64 %45, %46
  br i1 %cmp69, label %cond.true71, label %cond.false72

cond.true71:                                      ; preds = %lor.lhs.false, %cond.end62
  br i1 true, label %if.then73, label %if.end74

cond.false72:                                     ; preds = %lor.lhs.false
  br i1 false, label %if.then73, label %if.end74

if.then73:                                        ; preds = %cond.false72, %cond.true71
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %47, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr, align 8
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %48, %struct.sv*** @PL_stack_sp, align 8
  %49 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %49, i32 0, i32 0
  %50 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %50, %struct.op** %retval, align 8
  br label %return

if.end74:                                         ; preds = %cond.false72, %cond.true71
  %51 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %52 = load %struct.sv*, %struct.sv** %51, align 8
  store %struct.sv* %52, %struct.sv** %oldsv, align 8
  %53 = load %struct.sv*, %struct.sv** %oldsv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 1
  %54 = load i32, i32* %sv_refcnt, align 8
  %cmp75 = icmp eq i32 %54, 1
  br i1 %cmp75, label %land.lhs.true, label %cond.false81

land.lhs.true:                                    ; preds = %if.end74
  %55 = load %struct.sv*, %struct.sv** %oldsv, align 8
  %sv_flags77 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags77, align 4
  %and78 = and i32 %56, 14680064
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %cond.false81, label %cond.true80

cond.true80:                                      ; preds = %land.lhs.true
  br i1 true, label %if.then82, label %if.else

cond.false81:                                     ; preds = %land.lhs.true, %if.end74
  br i1 false, label %if.then82, label %if.else

if.then82:                                        ; preds = %cond.false81, %cond.true80
  %57 = load %struct.sv*, %struct.sv** %oldsv, align 8
  %58 = load %struct.sv*, %struct.sv** %cur, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %57, %struct.sv* %58, i32 1538)
  br label %if.end84

if.else:                                          ; preds = %cond.false81, %cond.true80
  %59 = load %struct.sv*, %struct.sv** %cur, align 8
  %call83 = call %struct.sv* @Perl_newSVsv(%struct.sv* %59)
  %60 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  store %struct.sv* %call83, %struct.sv** %60, align 8
  %61 = load %struct.sv*, %struct.sv** %oldsv, align 8
  %62 = bitcast %struct.sv* %61 to i8*
  %63 = bitcast i8* %62 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %63)
  br label %if.end84

if.end84:                                         ; preds = %if.else, %if.then82
  %64 = load %struct.sv*, %struct.sv** %cur, align 8
  %sv_u85 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 3
  %svu_pv86 = bitcast %union.anon* %sv_u85 to i8**
  %65 = load i8*, i8** %svu_pv86, align 8
  %add.ptr87 = getelementptr inbounds i8, i8* %65, i64 0
  %66 = load i8*, i8** %max, align 8
  %call88 = call i32 @strcmp(i8* %add.ptr87, i8* %66) #6
  %tobool89 = icmp ne i32 %call88, 0
  br i1 %tobool89, label %if.else91, label %if.then90

if.then90:                                        ; preds = %if.end84
  %67 = load %struct.sv*, %struct.sv** %cur, align 8
  call void @Perl_sv_setiv(%struct.sv* %67, i64 0)
  br label %if.end92

if.else91:                                        ; preds = %if.end84
  %68 = load %struct.sv*, %struct.sv** %cur, align 8
  call void @Perl_sv_inc(%struct.sv* %68)
  br label %if.end92

if.end92:                                         ; preds = %if.else91, %if.then90
  br label %sw.epilog

sw.bb93:                                          ; preds = %cond.end37
  %69 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u95 = getelementptr inbounds %struct.context, %struct.context* %69, i32 0, i32 0
  %cx_blk96 = bitcast %union.anon.17* %cx_u95 to %struct.block*
  %blk_u97 = getelementptr inbounds %struct.block, %struct.block* %cx_blk96, i32 0, i32 8
  %blku_loop98 = bitcast %union.anon.20* %blk_u97 to %struct.block_loop*
  %state_u99 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop98, i32 0, i32 3
  %lazyiv = bitcast %union.anon.22* %state_u99 to %struct.anon.24*
  %cur100 = getelementptr inbounds %struct.anon.24, %struct.anon.24* %lazyiv, i32 0, i32 0
  %70 = load i64, i64* %cur100, align 8
  store i64 %70, i64* %cur94, align 8
  %71 = load i64, i64* %cur94, align 8
  %72 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u101 = getelementptr inbounds %struct.context, %struct.context* %72, i32 0, i32 0
  %cx_blk102 = bitcast %union.anon.17* %cx_u101 to %struct.block*
  %blk_u103 = getelementptr inbounds %struct.block, %struct.block* %cx_blk102, i32 0, i32 8
  %blku_loop104 = bitcast %union.anon.20* %blk_u103 to %struct.block_loop*
  %state_u105 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop104, i32 0, i32 3
  %lazyiv106 = bitcast %union.anon.22* %state_u105 to %struct.anon.24*
  %end107 = getelementptr inbounds %struct.anon.24, %struct.anon.24* %lazyiv106, i32 0, i32 1
  %73 = load i64, i64* %end107, align 8
  %cmp108 = icmp sgt i64 %71, %73
  br i1 %cmp108, label %cond.true110, label %cond.false111

cond.true110:                                     ; preds = %sw.bb93
  br i1 true, label %if.then112, label %if.end115

cond.false111:                                    ; preds = %sw.bb93
  br i1 false, label %if.then112, label %if.end115

if.then112:                                       ; preds = %cond.false111, %cond.true110
  %74 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr113 = getelementptr inbounds %struct.sv*, %struct.sv** %74, i32 1
  store %struct.sv** %incdec.ptr113, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr113, align 8
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %75, %struct.sv*** @PL_stack_sp, align 8
  %76 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next114 = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 0
  %77 = load %struct.op*, %struct.op** %op_next114, align 8
  store %struct.op* %77, %struct.op** %retval, align 8
  br label %return

if.end115:                                        ; preds = %cond.false111, %cond.true110
  %78 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %79 = load %struct.sv*, %struct.sv** %78, align 8
  store %struct.sv* %79, %struct.sv** %oldsv, align 8
  %80 = load %struct.sv*, %struct.sv** %oldsv, align 8
  %sv_refcnt116 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 1
  %81 = load i32, i32* %sv_refcnt116, align 8
  %cmp117 = icmp eq i32 %81, 1
  br i1 %cmp117, label %land.lhs.true119, label %cond.false124

land.lhs.true119:                                 ; preds = %if.end115
  %82 = load %struct.sv*, %struct.sv** %oldsv, align 8
  %sv_flags120 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags120, align 4
  %and121 = and i32 %83, 14680064
  %tobool122 = icmp ne i32 %and121, 0
  br i1 %tobool122, label %cond.false124, label %cond.true123

cond.true123:                                     ; preds = %land.lhs.true119
  br i1 true, label %if.then125, label %if.else126

cond.false124:                                    ; preds = %land.lhs.true119, %if.end115
  br i1 false, label %if.then125, label %if.else126

if.then125:                                       ; preds = %cond.false124, %cond.true123
  %84 = load %struct.sv*, %struct.sv** %oldsv, align 8
  %85 = load i64, i64* %cur94, align 8
  call void @Perl_sv_setiv(%struct.sv* %84, i64 %85)
  br label %if.end128

if.else126:                                       ; preds = %cond.false124, %cond.true123
  %86 = load i64, i64* %cur94, align 8
  %call127 = call %struct.sv* @Perl_newSViv(i64 %86)
  %87 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  store %struct.sv* %call127, %struct.sv** %87, align 8
  %88 = load %struct.sv*, %struct.sv** %oldsv, align 8
  %89 = bitcast %struct.sv* %88 to i8*
  %90 = bitcast i8* %89 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %90)
  br label %if.end128

if.end128:                                        ; preds = %if.else126, %if.then125
  %91 = load i64, i64* %cur94, align 8
  %cmp129 = icmp eq i64 %91, 9223372036854775807
  br i1 %cmp129, label %cond.true131, label %cond.false132

cond.true131:                                     ; preds = %if.end128
  br i1 true, label %if.then133, label %if.else141

cond.false132:                                    ; preds = %if.end128
  br i1 false, label %if.then133, label %if.else141

if.then133:                                       ; preds = %cond.false132, %cond.true131
  %92 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u134 = getelementptr inbounds %struct.context, %struct.context* %92, i32 0, i32 0
  %cx_blk135 = bitcast %union.anon.17* %cx_u134 to %struct.block*
  %blk_u136 = getelementptr inbounds %struct.block, %struct.block* %cx_blk135, i32 0, i32 8
  %blku_loop137 = bitcast %union.anon.20* %blk_u136 to %struct.block_loop*
  %state_u138 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop137, i32 0, i32 3
  %lazyiv139 = bitcast %union.anon.22* %state_u138 to %struct.anon.24*
  %end140 = getelementptr inbounds %struct.anon.24, %struct.anon.24* %lazyiv139, i32 0, i32 1
  store i64 -9223372036854775808, i64* %end140, align 8
  br label %if.end149

if.else141:                                       ; preds = %cond.false132, %cond.true131
  %93 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u142 = getelementptr inbounds %struct.context, %struct.context* %93, i32 0, i32 0
  %cx_blk143 = bitcast %union.anon.17* %cx_u142 to %struct.block*
  %blk_u144 = getelementptr inbounds %struct.block, %struct.block* %cx_blk143, i32 0, i32 8
  %blku_loop145 = bitcast %union.anon.20* %blk_u144 to %struct.block_loop*
  %state_u146 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop145, i32 0, i32 3
  %lazyiv147 = bitcast %union.anon.22* %state_u146 to %struct.anon.24*
  %cur148 = getelementptr inbounds %struct.anon.24, %struct.anon.24* %lazyiv147, i32 0, i32 0
  %94 = load i64, i64* %cur148, align 8
  %inc = add nsw i64 %94, 1
  store i64 %inc, i64* %cur148, align 8
  br label %if.end149

if.end149:                                        ; preds = %if.else141, %if.then133
  br label %sw.epilog

sw.bb150:                                         ; preds = %cond.end37
  %95 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u151 = getelementptr inbounds %struct.context, %struct.context* %95, i32 0, i32 0
  %cx_blk152 = bitcast %union.anon.17* %cx_u151 to %struct.block*
  %blk_u153 = getelementptr inbounds %struct.block, %struct.block* %cx_blk152, i32 0, i32 8
  %blku_loop154 = bitcast %union.anon.20* %blk_u153 to %struct.block_loop*
  %state_u155 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop154, i32 0, i32 3
  %ary = bitcast %union.anon.22* %state_u155 to %struct.anon.23*
  %ary156 = getelementptr inbounds %struct.anon.23, %struct.anon.23* %ary, i32 0, i32 0
  %96 = load %struct.av*, %struct.av** %ary156, align 8
  store %struct.av* %96, %struct.av** %av, align 8
  store i8 0, i8* %av_is_stack, align 1
  %97 = load %struct.av*, %struct.av** %av, align 8
  %tobool157 = icmp ne %struct.av* %97, null
  br i1 %tobool157, label %if.end159, label %if.then158

if.then158:                                       ; preds = %sw.bb150
  store i8 1, i8* %av_is_stack, align 1
  %98 = load %struct.av*, %struct.av** @PL_curstack, align 8
  store %struct.av* %98, %struct.av** %av, align 8
  br label %if.end159

if.end159:                                        ; preds = %if.then158, %sw.bb150
  %99 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %99, i32 0, i32 6
  %100 = load i8, i8* %op_private, align 1
  %conv160 = zext i8 %100 to i32
  %and161 = and i32 %conv160, 4
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %if.then163, label %if.else190

if.then163:                                       ; preds = %if.end159
  %101 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u164 = getelementptr inbounds %struct.context, %struct.context* %101, i32 0, i32 0
  %cx_blk165 = bitcast %union.anon.17* %cx_u164 to %struct.block*
  %blk_u166 = getelementptr inbounds %struct.block, %struct.block* %cx_blk165, i32 0, i32 8
  %blku_loop167 = bitcast %union.anon.20* %blk_u166 to %struct.block_loop*
  %state_u168 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop167, i32 0, i32 3
  %ary169 = bitcast %union.anon.22* %state_u168 to %struct.anon.23*
  %ix170 = getelementptr inbounds %struct.anon.23, %struct.anon.23* %ary169, i32 0, i32 1
  %102 = load i64, i64* %ix170, align 8
  %dec = add nsw i64 %102, -1
  store i64 %dec, i64* %ix170, align 8
  store i64 %dec, i64* %ix, align 8
  %103 = load i64, i64* %ix, align 8
  %104 = load i8, i8* %av_is_stack, align 1
  %tobool171 = trunc i8 %104 to i1
  br i1 %tobool171, label %cond.true173, label %cond.false178

cond.true173:                                     ; preds = %if.then163
  %105 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u174 = getelementptr inbounds %struct.context, %struct.context* %105, i32 0, i32 0
  %cx_blk175 = bitcast %union.anon.17* %cx_u174 to %struct.block*
  %blk_u176 = getelementptr inbounds %struct.block, %struct.block* %cx_blk175, i32 0, i32 8
  %blku_loop177 = bitcast %union.anon.20* %blk_u176 to %struct.block_loop*
  %resetsp = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop177, i32 0, i32 0
  %106 = load i32, i32* %resetsp, align 8
  br label %cond.end179

cond.false178:                                    ; preds = %if.then163
  br label %cond.end179

cond.end179:                                      ; preds = %cond.false178, %cond.true173
  %cond180 = phi i32 [ %106, %cond.true173 ], [ -1, %cond.false178 ]
  %conv181 = sext i32 %cond180 to i64
  %cmp182 = icmp sle i64 %103, %conv181
  br i1 %cmp182, label %cond.true184, label %cond.false185

cond.true184:                                     ; preds = %cond.end179
  br i1 true, label %if.then186, label %if.end189

cond.false185:                                    ; preds = %cond.end179
  br i1 false, label %if.then186, label %if.end189

if.then186:                                       ; preds = %cond.false185, %cond.true184
  %107 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr187 = getelementptr inbounds %struct.sv*, %struct.sv** %107, i32 1
  store %struct.sv** %incdec.ptr187, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr187, align 8
  %108 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %108, %struct.sv*** @PL_stack_sp, align 8
  %109 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next188 = getelementptr inbounds %struct.op, %struct.op* %109, i32 0, i32 0
  %110 = load %struct.op*, %struct.op** %op_next188, align 8
  store %struct.op* %110, %struct.op** %retval, align 8
  br label %return

if.end189:                                        ; preds = %cond.false185, %cond.true184
  br label %if.end226

if.else190:                                       ; preds = %if.end159
  %111 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u191 = getelementptr inbounds %struct.context, %struct.context* %111, i32 0, i32 0
  %cx_blk192 = bitcast %union.anon.17* %cx_u191 to %struct.block*
  %blk_u193 = getelementptr inbounds %struct.block, %struct.block* %cx_blk192, i32 0, i32 8
  %blku_loop194 = bitcast %union.anon.20* %blk_u193 to %struct.block_loop*
  %state_u195 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop194, i32 0, i32 3
  %ary196 = bitcast %union.anon.22* %state_u195 to %struct.anon.23*
  %ix197 = getelementptr inbounds %struct.anon.23, %struct.anon.23* %ary196, i32 0, i32 1
  %112 = load i64, i64* %ix197, align 8
  %inc198 = add nsw i64 %112, 1
  store i64 %inc198, i64* %ix197, align 8
  store i64 %inc198, i64* %ix, align 8
  %113 = load i64, i64* %ix, align 8
  %114 = load i8, i8* %av_is_stack, align 1
  %tobool199 = trunc i8 %114 to i1
  br i1 %tobool199, label %cond.true201, label %cond.false205

cond.true201:                                     ; preds = %if.else190
  %115 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u202 = getelementptr inbounds %struct.context, %struct.context* %115, i32 0, i32 0
  %cx_blk203 = bitcast %union.anon.17* %cx_u202 to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk203, i32 0, i32 3
  %116 = load i32, i32* %blku_oldsp, align 4
  %conv204 = sext i32 %116 to i64
  br label %cond.end216

cond.false205:                                    ; preds = %if.else190
  %117 = load %struct.av*, %struct.av** %av, align 8
  %118 = bitcast %struct.av* %117 to %struct.sv*
  %sv_flags206 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 2
  %119 = load i32, i32* %sv_flags206, align 4
  %and207 = and i32 %119, 8388608
  %tobool208 = icmp ne i32 %and207, 0
  br i1 %tobool208, label %cond.true209, label %cond.false212

cond.true209:                                     ; preds = %cond.false205
  %120 = load %struct.av*, %struct.av** %av, align 8
  %121 = bitcast %struct.av* %120 to i8*
  %122 = bitcast i8* %121 to %struct.sv*
  %call210 = call i32 @Perl_mg_size(%struct.sv* %122)
  %conv211 = sext i32 %call210 to i64
  br label %cond.end214

cond.false212:                                    ; preds = %cond.false205
  %123 = load %struct.av*, %struct.av** %av, align 8
  %sv_any213 = getelementptr inbounds %struct.av, %struct.av* %123, i32 0, i32 0
  %124 = load %struct.xpvav*, %struct.xpvav** %sv_any213, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %124, i32 0, i32 2
  %125 = load i64, i64* %xav_fill, align 8
  br label %cond.end214

cond.end214:                                      ; preds = %cond.false212, %cond.true209
  %cond215 = phi i64 [ %conv211, %cond.true209 ], [ %125, %cond.false212 ]
  br label %cond.end216

cond.end216:                                      ; preds = %cond.end214, %cond.true201
  %cond217 = phi i64 [ %conv204, %cond.true201 ], [ %cond215, %cond.end214 ]
  %cmp218 = icmp sgt i64 %113, %cond217
  br i1 %cmp218, label %cond.true220, label %cond.false221

cond.true220:                                     ; preds = %cond.end216
  br i1 true, label %if.then222, label %if.end225

cond.false221:                                    ; preds = %cond.end216
  br i1 false, label %if.then222, label %if.end225

if.then222:                                       ; preds = %cond.false221, %cond.true220
  %126 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr223 = getelementptr inbounds %struct.sv*, %struct.sv** %126, i32 1
  store %struct.sv** %incdec.ptr223, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr223, align 8
  %127 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %127, %struct.sv*** @PL_stack_sp, align 8
  %128 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next224 = getelementptr inbounds %struct.op, %struct.op* %128, i32 0, i32 0
  %129 = load %struct.op*, %struct.op** %op_next224, align 8
  store %struct.op* %129, %struct.op** %retval, align 8
  br label %return

if.end225:                                        ; preds = %cond.false221, %cond.true220
  br label %if.end226

if.end226:                                        ; preds = %if.end225, %if.end189
  %130 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags227 = getelementptr inbounds %struct.av, %struct.av* %130, i32 0, i32 2
  %131 = load i32, i32* %sv_flags227, align 4
  %and228 = and i32 %131, 14680064
  %tobool229 = icmp ne i32 %and228, 0
  br i1 %tobool229, label %cond.true234, label %lor.lhs.false230

lor.lhs.false230:                                 ; preds = %if.end226
  %132 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags231 = getelementptr inbounds %struct.av, %struct.av* %132, i32 0, i32 2
  %133 = load i32, i32* %sv_flags231, align 4
  %and232 = and i32 %133, -2147483648
  %tobool233 = icmp ne i32 %and232, 0
  br i1 %tobool233, label %cond.true234, label %cond.false235

cond.true234:                                     ; preds = %lor.lhs.false230, %if.end226
  br i1 true, label %if.then236, label %if.else244

cond.false235:                                    ; preds = %lor.lhs.false230
  br i1 false, label %if.then236, label %if.else244

if.then236:                                       ; preds = %cond.false235, %cond.true234
  %134 = load %struct.av*, %struct.av** %av, align 8
  %135 = load i64, i64* %ix, align 8
  %call238 = call %struct.sv** @Perl_av_fetch(%struct.av* %134, i64 %135, i32 0)
  store %struct.sv** %call238, %struct.sv*** %svp237, align 8
  %136 = load %struct.sv**, %struct.sv*** %svp237, align 8
  %tobool239 = icmp ne %struct.sv** %136, null
  br i1 %tobool239, label %cond.true240, label %cond.false241

cond.true240:                                     ; preds = %if.then236
  %137 = load %struct.sv**, %struct.sv*** %svp237, align 8
  %138 = load %struct.sv*, %struct.sv** %137, align 8
  br label %cond.end242

cond.false241:                                    ; preds = %if.then236
  br label %cond.end242

cond.end242:                                      ; preds = %cond.false241, %cond.true240
  %cond243 = phi %struct.sv* [ %138, %cond.true240 ], [ null, %cond.false241 ]
  store %struct.sv* %cond243, %struct.sv** %sv, align 8
  br label %if.end247

if.else244:                                       ; preds = %cond.false235, %cond.true234
  %139 = load %struct.av*, %struct.av** %av, align 8
  %sv_u245 = getelementptr inbounds %struct.av, %struct.av* %139, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u245 to %struct.sv***
  %140 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %141 = load i64, i64* %ix, align 8
  %arrayidx246 = getelementptr inbounds %struct.sv*, %struct.sv** %140, i64 %141
  %142 = load %struct.sv*, %struct.sv** %arrayidx246, align 8
  store %struct.sv* %142, %struct.sv** %sv, align 8
  br label %if.end247

if.end247:                                        ; preds = %if.else244, %cond.end242
  %143 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u248 = getelementptr inbounds %struct.context, %struct.context* %143, i32 0, i32 0
  %cx_subst249 = bitcast %union.anon.17* %cx_u248 to %struct.subst*
  %sbu_type250 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst249, i32 0, i32 0
  %144 = load i8, i8* %sbu_type250, align 8
  %conv251 = zext i8 %144 to i32
  %and252 = and i32 %conv251, 32
  %tobool253 = icmp ne i32 %and252, 0
  br i1 %tobool253, label %cond.true254, label %cond.false255

cond.true254:                                     ; preds = %if.end247
  br i1 true, label %if.then256, label %if.end275

cond.false255:                                    ; preds = %if.end247
  br i1 false, label %if.then256, label %if.end275

if.then256:                                       ; preds = %cond.false255, %cond.true254
  br label %do.body257

do.body257:                                       ; preds = %if.then256
  %145 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %146 = load %struct.sv*, %struct.sv** %145, align 8
  %147 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp258 = icmp ne %struct.sv* %146, %147
  br i1 %cmp258, label %cond.true260, label %cond.false261

cond.true260:                                     ; preds = %do.body257
  br i1 true, label %if.then262, label %if.end273

cond.false261:                                    ; preds = %do.body257
  br i1 false, label %if.then262, label %if.end273

if.then262:                                       ; preds = %cond.false261, %cond.true260
  %148 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %149 = load %struct.sv*, %struct.sv** %148, align 8
  %150 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %149, %struct.sv* %150, i32 1538)
  br label %do.body263

do.body263:                                       ; preds = %if.then262
  %151 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %152 = load %struct.sv*, %struct.sv** %151, align 8
  %sv_flags264 = getelementptr inbounds %struct.sv, %struct.sv* %152, i32 0, i32 2
  %153 = load i32, i32* %sv_flags264, align 4
  %and265 = and i32 %153, 4194304
  %tobool266 = icmp ne i32 %and265, 0
  br i1 %tobool266, label %cond.true267, label %cond.false268

cond.true267:                                     ; preds = %do.body263
  br i1 true, label %if.then269, label %if.end271

cond.false268:                                    ; preds = %do.body263
  br i1 false, label %if.then269, label %if.end271

if.then269:                                       ; preds = %cond.false268, %cond.true267
  %154 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %155 = load %struct.sv*, %struct.sv** %154, align 8
  %call270 = call i32 @Perl_mg_set(%struct.sv* %155)
  br label %if.end271

if.end271:                                        ; preds = %if.then269, %cond.false268, %cond.true267
  br label %do.end272

do.end272:                                        ; preds = %if.end271
  br label %if.end273

if.end273:                                        ; preds = %do.end272, %cond.false261, %cond.true260
  br label %do.end274

do.end274:                                        ; preds = %if.end273
  br label %sw.epilog

if.end275:                                        ; preds = %cond.false255, %cond.true254
  %156 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool276 = icmp ne %struct.sv* %156, null
  br i1 %tobool276, label %cond.true277, label %cond.false278

cond.true277:                                     ; preds = %if.end275
  br i1 true, label %if.then279, label %if.else300

cond.false278:                                    ; preds = %if.end275
  br i1 false, label %if.then279, label %if.else300

if.then279:                                       ; preds = %cond.false278, %cond.true277
  %157 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags280 = getelementptr inbounds %struct.sv, %struct.sv* %157, i32 0, i32 2
  %158 = load i32, i32* %sv_flags280, align 4
  %cmp281 = icmp eq i32 %158, 255
  br i1 %cmp281, label %cond.true283, label %cond.false284

cond.true283:                                     ; preds = %if.then279
  br i1 true, label %cond.true285, label %cond.false286

cond.false284:                                    ; preds = %if.then279
  br i1 false, label %cond.true285, label %cond.false286

cond.true285:                                     ; preds = %cond.false284, %cond.true283
  br i1 true, label %if.then287, label %if.end288

cond.false286:                                    ; preds = %cond.false284, %cond.true283
  br i1 false, label %if.then287, label %if.end288

if.then287:                                       ; preds = %cond.false286, %cond.true285
  %159 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  store %struct.sv* null, %struct.sv** %159, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.30, i64 0, i64 0))
  br label %if.end288

if.end288:                                        ; preds = %if.then287, %cond.false286, %cond.true285
  %160 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags289 = getelementptr inbounds %struct.sv, %struct.sv* %160, i32 0, i32 2
  %161 = load i32, i32* %sv_flags289, align 4
  %and290 = and i32 %161, 131072
  %tobool291 = icmp ne i32 %and290, 0
  br i1 %tobool291, label %if.then292, label %if.else294

if.then292:                                       ; preds = %if.end288
  %162 = load %struct.sv*, %struct.sv** %sv, align 8
  %call293 = call %struct.sv* @Perl_newSVsv(%struct.sv* %162)
  store %struct.sv* %call293, %struct.sv** %sv, align 8
  br label %if.end299

if.else294:                                       ; preds = %if.end288
  %163 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags295 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 2
  %164 = load i32, i32* %sv_flags295, align 4
  %and296 = and i32 %164, -524289
  store i32 %and296, i32* %sv_flags295, align 4
  %165 = load %struct.sv*, %struct.sv** %sv, align 8
  %166 = bitcast %struct.sv* %165 to i8*
  %167 = bitcast i8* %166 to %struct.sv*
  %sv_refcnt297 = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 1
  %168 = load i32, i32* %sv_refcnt297, align 8
  %inc298 = add i32 %168, 1
  store i32 %inc298, i32* %sv_refcnt297, align 8
  br label %if.end299

if.end299:                                        ; preds = %if.else294, %if.then292
  br label %if.end306

if.else300:                                       ; preds = %cond.false278, %cond.true277
  %169 = load i8, i8* %av_is_stack, align 1
  %tobool301 = trunc i8 %169 to i1
  br i1 %tobool301, label %if.else304, label %if.then302

if.then302:                                       ; preds = %if.else300
  %170 = load %struct.av*, %struct.av** %av, align 8
  %171 = load i64, i64* %ix, align 8
  %call303 = call %struct.sv* @Perl_newSVavdefelem(%struct.av* %170, i64 %171, i1 zeroext false)
  store %struct.sv* %call303, %struct.sv** %sv, align 8
  br label %if.end305

if.else304:                                       ; preds = %if.else300
  store %struct.sv* @PL_sv_undef, %struct.sv** %sv, align 8
  br label %if.end305

if.end305:                                        ; preds = %if.else304, %if.then302
  br label %if.end306

if.end306:                                        ; preds = %if.end305, %if.end299
  %172 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %173 = load %struct.sv*, %struct.sv** %172, align 8
  store %struct.sv* %173, %struct.sv** %oldsv, align 8
  %174 = load %struct.sv*, %struct.sv** %sv, align 8
  %175 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  store %struct.sv* %174, %struct.sv** %175, align 8
  %176 = load %struct.sv*, %struct.sv** %oldsv, align 8
  %177 = bitcast %struct.sv* %176 to i8*
  %178 = bitcast i8* %177 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %178)
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end37
  %179 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u307 = getelementptr inbounds %struct.context, %struct.context* %179, i32 0, i32 0
  %cx_subst308 = bitcast %union.anon.17* %cx_u307 to %struct.subst*
  %sbu_type309 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst308, i32 0, i32 0
  %180 = load i8, i8* %sbu_type309, align 8
  %conv310 = zext i8 %180 to i32
  %and311 = and i32 %conv310, 15
  %call312 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.31, i64 0, i64 0), i32 %and311)
  store %struct.op* %call312, %struct.op** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %if.end306, %do.end274, %if.end149, %if.end92
  %181 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr313 = getelementptr inbounds %struct.sv*, %struct.sv** %181, i32 1
  store %struct.sv** %incdec.ptr313, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr313, align 8
  %182 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %182, %struct.sv*** @PL_stack_sp, align 8
  %183 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next314 = getelementptr inbounds %struct.op, %struct.op* %183, i32 0, i32 0
  %184 = load %struct.op*, %struct.op** %op_next314, align 8
  store %struct.op* %184, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default, %if.then222, %if.then186, %if.then112, %if.then73
  %185 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %185
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #5

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end6

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end6

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  store i32 %2, i32* %rc, align 4
  %3 = load i32, i32* %rc, align 4
  %cmp1 = icmp ugt i32 %3, 1
  br i1 %cmp1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %if.then
  br i1 true, label %if.then4, label %if.else

cond.false3:                                      ; preds = %if.then
  br i1 false, label %if.then4, label %if.else

if.then4:                                         ; preds = %cond.false3, %cond.true2
  %4 = load i32, i32* %rc, align 4
  %sub = sub i32 %4, 1
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt5 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt5, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false3, %cond.true2
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %7 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end6

if.end6:                                          ; preds = %if.end, %cond.false, %cond.true
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_subst() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %pm = alloca %struct.pmop*, align 8
  %rpm = alloca %struct.pmop*, align 8
  %s = alloca i8*, align 8
  %strend = alloca i8*, align 8
  %c = alloca i8*, align 8
  %clen = alloca i64, align 8
  %iters = alloca i64, align 8
  %maxiters = alloca i64, align 8
  %once = alloca i8, align 1
  %rxtainted = alloca i8, align 1
  %orig = alloca i8*, align 8
  %r_flags = alloca i8, align 1
  %rx = alloca %struct.p5rx*, align 8
  %len = alloca i64, align 8
  %force_on_match = alloca i32, align 4
  %oldsave = alloca i32, align 4
  %slen = alloca i64, align 8
  %doutf8 = alloca i8, align 1
  %is_cow = alloca i8, align 1
  %nsv = alloca %struct.sv*, align 8
  %dstr = alloca %struct.sv*, align 8
  %d = alloca i8*, align 8
  %m = alloca i8*, align 8
  %i = alloca i32, align 4
  %i411 = alloca i32, align 4
  %d436 = alloca i8*, align 8
  %m437 = alloca i8*, align 8
  %i444 = alloca i32, align 4
  %i505 = alloca i32, align 4
  %first = alloca i8, align 1
  %m531 = alloca i8*, align 8
  %repl = alloca %struct.sv*, align 8
  %cx = alloca %struct.context*, align 8
  %old_s = alloca i8*, align 8
  %old_orig = alloca i8*, align 8
  %zok = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.pmop*
  store %struct.pmop* %2, %struct.pmop** %pm, align 8
  %3 = load %struct.pmop*, %struct.pmop** %pm, align 8
  store %struct.pmop* %3, %struct.pmop** %rpm, align 8
  store i64 0, i64* %iters, align 8
  store i8 0, i8* %rxtainted, align 1
  %4 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %4, i32 0, i32 9
  %5 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp, align 8
  store %struct.p5rx* %5, %struct.p5rx** %rx, align 8
  store i32 0, i32* %force_on_match, align 4
  %6 = load i32, i32* @PL_savestack_ix, align 4
  store i32 %6, i32* %oldsave, align 4
  store i8 0, i8* %doutf8, align 1
  store %struct.sv* null, %struct.sv** %nsv, align 8
  %7 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %7, i32 0, i32 10
  %8 = load i32, i32* %op_pmflags, align 8
  %and = and i32 %8, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %10, %cond.true ], [ null, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %dstr, align 8
  %11 = load i32, i32* @PL_sig_pending, align 4
  %tobool1 = icmp ne i32 %11, 0
  br i1 %tobool1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %cond.end
  br i1 true, label %if.then, label %if.end

cond.false3:                                      ; preds = %cond.end
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false3, %cond.true2
  %12 = load void ()*, void ()** @PL_signalhook, align 8
  call void %12()
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false3, %cond.true2
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 5
  %14 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %14 to i32
  %and4 = and i32 %conv, 64
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr7 = getelementptr inbounds %struct.sv*, %struct.sv** %15, i32 -1
  store %struct.sv** %incdec.ptr7, %struct.sv*** %sp, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  store %struct.sv* %16, %struct.sv** %targ, align 8
  br label %if.end33

if.else:                                          ; preds = %if.end
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 3
  %18 = load i64, i64* %op_targ, align 8
  %tobool8 = icmp ne i64 %18, 0
  br i1 %tobool8, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else
  %19 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ10 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 3
  %21 = load i64, i64* %op_targ10, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %19, i64 %21
  %22 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %22, %struct.sv** %targ, align 8
  br label %if.end32

if.else11:                                        ; preds = %if.else
  %23 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %23, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %24 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %24, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %25 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool12 = icmp ne %struct.sv* %25, null
  br i1 %tobool12, label %cond.true13, label %cond.false18

cond.true13:                                      ; preds = %if.else11
  %26 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u14 = getelementptr inbounds %struct.gv, %struct.gv* %26, i32 0, i32 3
  %svu_gp15 = bitcast %union.anon.4* %sv_u14 to %struct.gp**
  %27 = load %struct.gp*, %struct.gp** %svu_gp15, align 8
  %add.ptr16 = getelementptr inbounds %struct.gp, %struct.gp* %27, i64 0
  %gp_sv17 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr16, i32 0, i32 0
  br label %cond.end23

cond.false18:                                     ; preds = %if.else11
  %28 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %call = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %28, i32 0)
  %sv_u19 = getelementptr inbounds %struct.gv, %struct.gv* %call, i32 0, i32 3
  %svu_gp20 = bitcast %union.anon.4* %sv_u19 to %struct.gp**
  %29 = load %struct.gp*, %struct.gp** %svu_gp20, align 8
  %add.ptr21 = getelementptr inbounds %struct.gp, %struct.gp* %29, i64 0
  %gp_sv22 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr21, i32 0, i32 0
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false18, %cond.true13
  %cond24 = phi %struct.sv** [ %gp_sv17, %cond.true13 ], [ %gp_sv22, %cond.false18 ]
  %30 = load %struct.sv*, %struct.sv** %cond24, align 8
  %add.ptr25 = getelementptr inbounds %struct.sv, %struct.sv* %30, i64 0
  store %struct.sv* %add.ptr25, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end23
  %31 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %31 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %32 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %do.body
  br i1 true, label %if.then29, label %if.end31

cond.false28:                                     ; preds = %do.body
  br i1 false, label %if.then29, label %if.end31

if.then29:                                        ; preds = %cond.false28, %cond.true27
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call30 = call %struct.sv** @Perl_stack_grow(%struct.sv** %33, %struct.sv** %34, i64 1)
  store %struct.sv** %call30, %struct.sv*** %sp, align 8
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %cond.false28, %cond.true27
  br label %do.end

do.end:                                           ; preds = %if.end31
  br label %if.end32

if.end32:                                         ; preds = %do.end, %if.then9
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then6
  %36 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags, align 4
  %and34 = and i32 %37, 2097152
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %cond.true36, label %cond.false37

cond.true36:                                      ; preds = %if.end33
  br i1 true, label %land.rhs, label %land.end

cond.false37:                                     ; preds = %if.end33
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false37, %cond.true36
  %38 = load %struct.sv*, %struct.sv** %targ, align 8
  %call38 = call i32 @Perl_mg_get(%struct.sv* %38)
  %tobool39 = icmp ne i32 %call38, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false37, %cond.true36
  %39 = phi i1 [ false, %cond.false37 ], [ false, %cond.true36 ], [ %tobool39, %land.rhs ]
  %land.ext = zext i1 %39 to i32
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %41, 268435456
  %tobool42 = icmp ne i32 %and41, 0
  %42 = zext i1 %tobool42 to i64
  %cond43 = select i1 %tobool42, i32 1, i32 0
  %tobool44 = icmp ne i32 %cond43, 0
  %frombool = zext i1 %tobool44 to i8
  store i8 %frombool, i8* %is_cow, align 1
  %43 = load %struct.pmop*, %struct.pmop** %rpm, align 8
  %op_pmflags45 = getelementptr inbounds %struct.pmop, %struct.pmop* %43, i32 0, i32 10
  %44 = load i32, i32* %op_pmflags45, align 8
  %and46 = and i32 %44, 134217728
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.end85, label %land.lhs.true

land.lhs.true:                                    ; preds = %land.end
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %46, 134283264
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.then84, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %47 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %48, 255
  %cmp53 = icmp eq i32 %and52, 9
  br i1 %cmp53, label %land.lhs.true55, label %lor.lhs.false70

land.lhs.true55:                                  ; preds = %lor.lhs.false
  %49 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %50, 49152
  %cmp58 = icmp eq i32 %and57, 32768
  br i1 %cmp58, label %land.lhs.true60, label %lor.lhs.false70

land.lhs.true60:                                  ; preds = %land.lhs.true55
  %51 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %52, 255
  %cmp63 = icmp eq i32 %and62, 9
  br i1 %cmp63, label %land.lhs.true75, label %lor.lhs.false65

lor.lhs.false65:                                  ; preds = %land.lhs.true60
  %53 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %54, 255
  %cmp68 = icmp eq i32 %and67, 10
  br i1 %cmp68, label %land.lhs.true75, label %lor.lhs.false70

lor.lhs.false70:                                  ; preds = %lor.lhs.false65, %land.lhs.true55, %lor.lhs.false
  %55 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags71 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags71, align 4
  %and72 = and i32 %56, 255
  %cmp73 = icmp ugt i32 %and72, 10
  br i1 %cmp73, label %land.lhs.true75, label %if.end85

land.lhs.true75:                                  ; preds = %lor.lhs.false70, %lor.lhs.false65, %land.lhs.true60
  %57 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags76 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags76, align 4
  %and77 = and i32 %58, 255
  %cmp78 = icmp eq i32 %and77, 9
  br i1 %cmp78, label %land.lhs.true80, label %if.then84

land.lhs.true80:                                  ; preds = %land.lhs.true75
  %59 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %60, 16777216
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %if.end85, label %if.then84

if.then84:                                        ; preds = %land.lhs.true80, %land.lhs.true75, %land.lhs.true
  call void @Perl_croak_no_modify()
  br label %if.end85

if.end85:                                         ; preds = %if.then84, %land.lhs.true80, %lor.lhs.false70, %land.end
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %61, %struct.sv*** @PL_stack_sp, align 8
  %62 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags86 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags86, align 4
  %and87 = and i32 %63, 2098176
  %cmp88 = icmp eq i32 %and87, 1024
  br i1 %cmp88, label %cond.true90, label %cond.false92

cond.true90:                                      ; preds = %if.end85
  %64 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any, align 8
  %66 = bitcast i8* %65 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %66, i32 0, i32 2
  %67 = load i64, i64* %xpv_cur, align 8
  store i64 %67, i64* %len, align 8
  %68 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u91 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u91 to i8**
  %69 = load i8*, i8** %svu_pv, align 8
  br label %cond.end94

cond.false92:                                     ; preds = %if.end85
  %70 = load %struct.sv*, %struct.sv** %targ, align 8
  %call93 = call i8* @Perl_sv_2pv_flags(%struct.sv* %70, i64* %len, i32 0)
  br label %cond.end94

cond.end94:                                       ; preds = %cond.false92, %cond.true90
  %cond95 = phi i8* [ %69, %cond.true90 ], [ %call93, %cond.false92 ]
  store i8* %cond95, i8** %orig, align 8
  %71 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags96 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags96, align 4
  %and97 = and i32 %72, 16384
  %tobool98 = icmp ne i32 %and97, 0
  br i1 %tobool98, label %lor.lhs.false99, label %if.then111

lor.lhs.false99:                                  ; preds = %cond.end94
  %73 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags100 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags100, align 4
  %and101 = and i32 %74, 255
  %cmp102 = icmp eq i32 %and101, 9
  br i1 %cmp102, label %if.then111, label %lor.lhs.false104

lor.lhs.false104:                                 ; preds = %lor.lhs.false99
  %75 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags105 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags105, align 4
  %and106 = and i32 %76, 14680064
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %land.lhs.true108, label %if.end112

land.lhs.true108:                                 ; preds = %lor.lhs.false104
  %77 = load %struct.sv*, %struct.sv** %targ, align 8
  %call109 = call %struct.magic* @Perl_mg_find(%struct.sv* %77, i32 86)
  %tobool110 = icmp ne %struct.magic* %call109, null
  br i1 %tobool110, label %if.then111, label %if.end112

if.then111:                                       ; preds = %land.lhs.true108, %lor.lhs.false99, %cond.end94
  store i32 1, i32* %force_on_match, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then111, %land.lhs.true108, %lor.lhs.false104
  %78 = load %struct.pmop*, %struct.pmop** %rpm, align 8
  %op_pmflags113 = getelementptr inbounds %struct.pmop, %struct.pmop* %78, i32 0, i32 10
  %79 = load i32, i32* %op_pmflags113, align 8
  %and114 = and i32 %79, 16777216
  %tobool115 = icmp ne i32 %and114, 0
  %lnot = xor i1 %tobool115, true
  %frombool116 = zext i1 %lnot to i8
  store i8 %frombool116, i8* %once, align 1
  %80 = load i8, i8* @PL_tainting, align 1
  %tobool117 = trunc i8 %80 to i1
  br i1 %tobool117, label %if.then118, label %if.end149

if.then118:                                       ; preds = %if.end112
  %81 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags119 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 2
  %82 = load i32, i32* %sv_flags119, align 4
  %and120 = and i32 %82, 14680064
  %tobool121 = icmp ne i32 %and120, 0
  br i1 %tobool121, label %land.rhs122, label %land.end125

land.rhs122:                                      ; preds = %if.then118
  %83 = load %struct.sv*, %struct.sv** %targ, align 8
  %call123 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %83)
  br label %land.end125

land.end125:                                      ; preds = %land.rhs122, %if.then118
  %84 = phi i1 [ false, %if.then118 ], [ %call123, %land.rhs122 ]
  %85 = zext i1 %84 to i64
  %cond127 = select i1 %84, i32 1, i32 0
  %86 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call128 = call %struct.regexp* @S_ReANY(%struct.p5rx* %86)
  %extflags = getelementptr inbounds %struct.regexp, %struct.regexp* %call128, i32 0, i32 7
  %87 = load i32, i32* %extflags, align 8
  %and129 = and i32 %87, 134217728
  %tobool130 = icmp ne i32 %and129, 0
  %88 = zext i1 %tobool130 to i64
  %cond131 = select i1 %tobool130, i32 2, i32 0
  %or = or i32 %cond127, %cond131
  %89 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags132 = getelementptr inbounds %struct.pmop, %struct.pmop* %89, i32 0, i32 10
  %90 = load i32, i32* %op_pmflags132, align 8
  %and133 = and i32 %90, 524288
  %tobool134 = icmp ne i32 %and133, 0
  %91 = zext i1 %tobool134 to i64
  %cond135 = select i1 %tobool134, i32 8, i32 0
  %or136 = or i32 %or, %cond135
  %92 = load i8, i8* %once, align 1
  %tobool137 = trunc i8 %92 to i1
  br i1 %tobool137, label %land.rhs139, label %land.end144

land.rhs139:                                      ; preds = %land.end125
  %93 = load %struct.pmop*, %struct.pmop** %rpm, align 8
  %op_pmflags140 = getelementptr inbounds %struct.pmop, %struct.pmop* %93, i32 0, i32 10
  %94 = load i32, i32* %op_pmflags140, align 8
  %and141 = and i32 %94, 134217728
  %tobool142 = icmp ne i32 %and141, 0
  %lnot143 = xor i1 %tobool142, true
  br label %land.end144

land.end144:                                      ; preds = %land.rhs139, %land.end125
  %95 = phi i1 [ false, %land.end125 ], [ %lnot143, %land.rhs139 ]
  %96 = zext i1 %95 to i64
  %cond146 = select i1 %95, i32 16, i32 0
  %or147 = or i32 %or136, %cond146
  %conv148 = trunc i32 %or147 to i8
  store i8 %conv148, i8* %rxtainted, align 1
  store i8 0, i8* @PL_tainted, align 1
  br label %if.end149

if.end149:                                        ; preds = %land.end144, %if.end112
  br label %force_it

force_it:                                         ; preds = %cond.end552, %cond.end357, %if.end149
  %97 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %tobool150 = icmp ne %struct.pmop* %97, null
  br i1 %tobool150, label %lor.lhs.false151, label %if.then153

lor.lhs.false151:                                 ; preds = %force_it
  %98 = load i8*, i8** %orig, align 8
  %tobool152 = icmp ne i8* %98, null
  br i1 %tobool152, label %if.end155, label %if.then153

if.then153:                                       ; preds = %lor.lhs.false151, %force_it
  %99 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %100 = load i8*, i8** %orig, align 8
  %call154 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.32, i64 0, i64 0), %struct.pmop* %99, i8* %100)
  store %struct.op* %call154, %struct.op** %retval, align 8
  br label %return

if.end155:                                        ; preds = %lor.lhs.false151
  %101 = load i8*, i8** %orig, align 8
  %102 = load i64, i64* %len, align 8
  %add.ptr156 = getelementptr inbounds i8, i8* %101, i64 %102
  store i8* %add.ptr156, i8** %strend, align 8
  %103 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags157 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags157, align 4
  %and158 = and i32 %104, 536870912
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %land.lhs.true160, label %cond.false165

land.lhs.true160:                                 ; preds = %if.end155
  %105 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %105, i32 0, i32 10
  %106 = load i32, i32* %cop_hints, align 8
  %add = add i32 %106, 0
  %and161 = and i32 %add, 8
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %cond.false165, label %cond.true163

cond.true163:                                     ; preds = %land.lhs.true160
  %107 = load i8*, i8** %orig, align 8
  %108 = load i8*, i8** %strend, align 8
  %call164 = call i64 @Perl_utf8_length(i8* %107, i8* %108)
  br label %cond.end166

cond.false165:                                    ; preds = %land.lhs.true160, %if.end155
  %109 = load i64, i64* %len, align 8
  br label %cond.end166

cond.end166:                                      ; preds = %cond.false165, %cond.true163
  %cond167 = phi i64 [ %call164, %cond.true163 ], [ %109, %cond.false165 ]
  store i64 %cond167, i64* %slen, align 8
  %110 = load i64, i64* %slen, align 8
  %mul = mul i64 2, %110
  %add168 = add i64 %mul, 10
  store i64 %add168, i64* %maxiters, align 8
  %111 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %sv_any169 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %111, i32 0, i32 0
  %112 = load %struct.regexp*, %struct.regexp** %sv_any169, align 8
  %113 = bitcast %struct.regexp* %112 to %struct.xpv*
  %xpv_cur170 = getelementptr inbounds %struct.xpv, %struct.xpv* %113, i32 0, i32 2
  %114 = load i64, i64* %xpv_cur170, align 8
  %115 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call171 = call %struct.regexp* @S_ReANY(%struct.p5rx* %115)
  %pre_prefix = getelementptr inbounds %struct.regexp, %struct.regexp* %call171, i32 0, i32 24
  %bf.load = load i16, i16* %pre_prefix, align 8
  %bf.clear = and i16 %bf.load, 15
  %bf.cast = zext i16 %bf.clear to i32
  %conv172 = zext i32 %bf.cast to i64
  %sub = sub i64 %114, %conv172
  %sub173 = sub i64 %sub, 1
  %tobool174 = icmp ne i64 %sub173, 0
  br i1 %tobool174, label %if.end182, label %land.lhs.true175

land.lhs.true175:                                 ; preds = %cond.end166
  %116 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %tobool176 = icmp ne %struct.pmop* %116, null
  br i1 %tobool176, label %land.lhs.true177, label %if.end182

land.lhs.true177:                                 ; preds = %land.lhs.true175
  %117 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call178 = call %struct.regexp* @S_ReANY(%struct.p5rx* %117)
  %mother_re = getelementptr inbounds %struct.regexp, %struct.regexp* %call178, i32 0, i32 5
  %118 = load %struct.p5rx*, %struct.p5rx** %mother_re, align 8
  %tobool179 = icmp ne %struct.p5rx* %118, null
  br i1 %tobool179, label %if.end182, label %if.then180

if.then180:                                       ; preds = %land.lhs.true177
  %119 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  store %struct.pmop* %119, %struct.pmop** %pm, align 8
  %120 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp181 = getelementptr inbounds %struct.pmop, %struct.pmop* %120, i32 0, i32 9
  %121 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp181, align 8
  store %struct.p5rx* %121, %struct.p5rx** %rx, align 8
  br label %if.end182

if.end182:                                        ; preds = %if.then180, %land.lhs.true177, %land.lhs.true175, %cond.end166
  store i8 1, i8* %r_flags, align 1
  %122 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call183 = call %struct.regexp* @S_ReANY(%struct.p5rx* %122)
  %engine = getelementptr inbounds %struct.regexp, %struct.regexp* %call183, i32 0, i32 4
  %123 = load %struct.regexp_engine*, %struct.regexp_engine** %engine, align 8
  %exec = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %123, i32 0, i32 1
  %124 = load i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)** %exec, align 8
  %125 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %126 = load i8*, i8** %orig, align 8
  %127 = load i8*, i8** %strend, align 8
  %128 = load i8*, i8** %orig, align 8
  %129 = load %struct.sv*, %struct.sv** %targ, align 8
  %130 = load i8, i8* %r_flags, align 1
  %conv184 = zext i8 %130 to i32
  %call185 = call i32 %124(%struct.p5rx* %125, i8* %126, i8* %127, i8* %128, i64 0, %struct.sv* %129, i8* null, i32 %conv184)
  %tobool186 = icmp ne i32 %call185, 0
  br i1 %tobool186, label %if.end202, label %if.then187

if.then187:                                       ; preds = %if.end182
  %131 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %131, %struct.sv*** %sp, align 8
  %132 = load %struct.pmop*, %struct.pmop** %rpm, align 8
  %op_pmflags188 = getelementptr inbounds %struct.pmop, %struct.pmop* %132, i32 0, i32 10
  %133 = load i32, i32* %op_pmflags188, align 8
  %and189 = and i32 %133, 134217728
  %tobool190 = icmp ne i32 %and189, 0
  br i1 %tobool190, label %cond.true191, label %cond.false192

cond.true191:                                     ; preds = %if.then187
  %134 = load %struct.sv*, %struct.sv** %targ, align 8
  br label %cond.end193

cond.false192:                                    ; preds = %if.then187
  br label %cond.end193

cond.end193:                                      ; preds = %cond.false192, %cond.true191
  %cond194 = phi %struct.sv* [ %134, %cond.true191 ], [ @PL_sv_no, %cond.false192 ]
  %135 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr195 = getelementptr inbounds %struct.sv*, %struct.sv** %135, i32 1
  store %struct.sv** %incdec.ptr195, %struct.sv*** %sp, align 8
  store %struct.sv* %cond194, %struct.sv** %incdec.ptr195, align 8
  br label %do.body196

do.body196:                                       ; preds = %cond.end193
  %136 = load i32, i32* @PL_savestack_ix, align 4
  %137 = load i32, i32* %oldsave, align 4
  %cmp197 = icmp sgt i32 %136, %137
  br i1 %cmp197, label %if.then199, label %if.end200

if.then199:                                       ; preds = %do.body196
  %138 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %138)
  br label %if.end200

if.end200:                                        ; preds = %if.then199, %do.body196
  br label %do.end201

do.end201:                                        ; preds = %if.end200
  %139 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %139, %struct.sv*** @PL_stack_sp, align 8
  %140 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %140, i32 0, i32 0
  %141 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %141, %struct.op** %retval, align 8
  br label %return

if.end202:                                        ; preds = %if.end182
  %142 = load %struct.pmop*, %struct.pmop** %pm, align 8
  store %struct.pmop* %142, %struct.pmop** @PL_curpm, align 8
  %143 = load %struct.sv*, %struct.sv** %dstr, align 8
  %tobool203 = icmp ne %struct.sv* %143, null
  br i1 %tobool203, label %if.then204, label %if.else293

if.then204:                                       ; preds = %if.end202
  %144 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags205 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 2
  %145 = load i32, i32* %sv_flags205, align 4
  %and206 = and i32 %145, 536870912
  %tobool207 = icmp ne i32 %and206, 0
  br i1 %tobool207, label %land.lhs.true208, label %if.else254

land.lhs.true208:                                 ; preds = %if.then204
  %146 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints209 = getelementptr inbounds %struct.cop, %struct.cop* %146, i32 0, i32 10
  %147 = load i32, i32* %cop_hints209, align 8
  %add210 = add i32 %147, 0
  %and211 = and i32 %add210, 8
  %tobool212 = icmp ne i32 %and211, 0
  br i1 %tobool212, label %if.else254, label %land.lhs.true213

land.lhs.true213:                                 ; preds = %land.lhs.true208
  %148 = load i8, i8* %doutf8, align 1
  %tobool214 = trunc i8 %148 to i1
  br i1 %tobool214, label %if.else254, label %if.then215

if.then215:                                       ; preds = %land.lhs.true213
  %call216 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call216, %struct.sv** %nsv, align 8
  br label %do.body217

do.body217:                                       ; preds = %if.then215
  %149 = load %struct.sv*, %struct.sv** %nsv, align 8
  %150 = load %struct.sv*, %struct.sv** %dstr, align 8
  %cmp218 = icmp ne %struct.sv* %149, %150
  br i1 %cmp218, label %cond.true220, label %cond.false221

cond.true220:                                     ; preds = %do.body217
  br i1 true, label %if.then222, label %if.end223

cond.false221:                                    ; preds = %do.body217
  br i1 false, label %if.then222, label %if.end223

if.then222:                                       ; preds = %cond.false221, %cond.true220
  %151 = load %struct.sv*, %struct.sv** %nsv, align 8
  %152 = load %struct.sv*, %struct.sv** %dstr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %151, %struct.sv* %152, i32 1538)
  br label %if.end223

if.end223:                                        ; preds = %if.then222, %cond.false221, %cond.true220
  br label %do.end224

do.end224:                                        ; preds = %if.end223
  %153 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool225 = icmp ne %struct.sv* %153, null
  br i1 %tobool225, label %cond.true232, label %lor.lhs.false226

lor.lhs.false226:                                 ; preds = %do.end224
  %154 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool227 = icmp ne %struct.sv* %154, null
  br i1 %tobool227, label %land.lhs.true228, label %cond.false233

land.lhs.true228:                                 ; preds = %lor.lhs.false226
  %call229 = call %struct.sv* @Perl__get_encoding()
  %cmp230 = icmp ne %struct.sv* %call229, null
  br i1 %cmp230, label %cond.true232, label %cond.false233

cond.true232:                                     ; preds = %land.lhs.true228, %do.end224
  br i1 true, label %if.then234, label %if.else237

cond.false233:                                    ; preds = %land.lhs.true228, %lor.lhs.false226
  br i1 false, label %if.then234, label %if.else237

if.then234:                                       ; preds = %cond.false233, %cond.true232
  %155 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call235 = call %struct.sv* @Perl__get_encoding()
  %call236 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %155, %struct.sv* %call235)
  br label %if.end239

if.else237:                                       ; preds = %cond.false233, %cond.true232
  %156 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call238 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %156, i32 2, i64 0)
  br label %if.end239

if.end239:                                        ; preds = %if.else237, %if.then234
  %157 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags240 = getelementptr inbounds %struct.sv, %struct.sv* %157, i32 0, i32 2
  %158 = load i32, i32* %sv_flags240, align 4
  %and241 = and i32 %158, 2098176
  %cmp242 = icmp eq i32 %and241, 1024
  br i1 %cmp242, label %cond.true244, label %cond.false250

cond.true244:                                     ; preds = %if.end239
  %159 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_any245 = getelementptr inbounds %struct.sv, %struct.sv* %159, i32 0, i32 0
  %160 = load i8*, i8** %sv_any245, align 8
  %161 = bitcast i8* %160 to %struct.xpv*
  %xpv_cur246 = getelementptr inbounds %struct.xpv, %struct.xpv* %161, i32 0, i32 2
  %162 = load i64, i64* %xpv_cur246, align 8
  store i64 %162, i64* %clen, align 8
  %163 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_u247 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 3
  %svu_pv248 = bitcast %union.anon* %sv_u247 to i8**
  %164 = load i8*, i8** %svu_pv248, align 8
  %add.ptr249 = getelementptr inbounds i8, i8* %164, i64 0
  br label %cond.end252

cond.false250:                                    ; preds = %if.end239
  %165 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call251 = call i8* @Perl_sv_2pv_flags(%struct.sv* %165, i64* %clen, i32 34)
  br label %cond.end252

cond.end252:                                      ; preds = %cond.false250, %cond.true244
  %cond253 = phi i8* [ %add.ptr249, %cond.true244 ], [ %call251, %cond.false250 ]
  store i8* %cond253, i8** %c, align 8
  store i8 1, i8* %doutf8, align 1
  br label %if.end281

if.else254:                                       ; preds = %land.lhs.true213, %land.lhs.true208, %if.then204
  %166 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags255 = getelementptr inbounds %struct.sv, %struct.sv* %166, i32 0, i32 2
  %167 = load i32, i32* %sv_flags255, align 4
  %and256 = and i32 %167, 2098176
  %cmp257 = icmp eq i32 %and256, 1024
  br i1 %cmp257, label %cond.true259, label %cond.false265

cond.true259:                                     ; preds = %if.else254
  %168 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any260 = getelementptr inbounds %struct.sv, %struct.sv* %168, i32 0, i32 0
  %169 = load i8*, i8** %sv_any260, align 8
  %170 = bitcast i8* %169 to %struct.xpv*
  %xpv_cur261 = getelementptr inbounds %struct.xpv, %struct.xpv* %170, i32 0, i32 2
  %171 = load i64, i64* %xpv_cur261, align 8
  store i64 %171, i64* %clen, align 8
  %172 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_u262 = getelementptr inbounds %struct.sv, %struct.sv* %172, i32 0, i32 3
  %svu_pv263 = bitcast %union.anon* %sv_u262 to i8**
  %173 = load i8*, i8** %svu_pv263, align 8
  %add.ptr264 = getelementptr inbounds i8, i8* %173, i64 0
  br label %cond.end267

cond.false265:                                    ; preds = %if.else254
  %174 = load %struct.sv*, %struct.sv** %dstr, align 8
  %call266 = call i8* @Perl_sv_2pv_flags(%struct.sv* %174, i64* %clen, i32 34)
  br label %cond.end267

cond.end267:                                      ; preds = %cond.false265, %cond.true259
  %cond268 = phi i8* [ %add.ptr264, %cond.true259 ], [ %call266, %cond.false265 ]
  store i8* %cond268, i8** %c, align 8
  %175 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags269 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 2
  %176 = load i32, i32* %sv_flags269, align 4
  %and270 = and i32 %176, 536870912
  %tobool271 = icmp ne i32 %and270, 0
  br i1 %tobool271, label %land.rhs272, label %land.end278

land.rhs272:                                      ; preds = %cond.end267
  %177 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints273 = getelementptr inbounds %struct.cop, %struct.cop* %177, i32 0, i32 10
  %178 = load i32, i32* %cop_hints273, align 8
  %add274 = add i32 %178, 0
  %and275 = and i32 %add274, 8
  %tobool276 = icmp ne i32 %and275, 0
  %lnot277 = xor i1 %tobool276, true
  br label %land.end278

land.end278:                                      ; preds = %land.rhs272, %cond.end267
  %179 = phi i1 [ false, %cond.end267 ], [ %lnot277, %land.rhs272 ]
  %frombool280 = zext i1 %179 to i8
  store i8 %frombool280, i8* %doutf8, align 1
  br label %if.end281

if.end281:                                        ; preds = %land.end278, %cond.end252
  %180 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags282 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 2
  %181 = load i32, i32* %sv_flags282, align 4
  %and283 = and i32 %181, 14680064
  %tobool284 = icmp ne i32 %and283, 0
  br i1 %tobool284, label %land.lhs.true285, label %if.end292

land.lhs.true285:                                 ; preds = %if.end281
  %182 = load %struct.sv*, %struct.sv** %dstr, align 8
  %call286 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %182)
  br i1 %call286, label %if.then288, label %if.end292

if.then288:                                       ; preds = %land.lhs.true285
  %183 = load i8, i8* %rxtainted, align 1
  %conv289 = zext i8 %183 to i32
  %or290 = or i32 %conv289, 4
  %conv291 = trunc i32 %or290 to i8
  store i8 %conv291, i8* %rxtainted, align 1
  br label %if.end292

if.end292:                                        ; preds = %if.then288, %land.lhs.true285, %if.end281
  br label %if.end294

if.else293:                                       ; preds = %if.end202
  store i8* null, i8** %c, align 8
  store i8 0, i8* %doutf8, align 1
  br label %if.end294

if.end294:                                        ; preds = %if.else293, %if.end292
  %184 = load i8*, i8** %c, align 8
  %tobool295 = icmp ne i8* %184, null
  br i1 %tobool295, label %land.lhs.true296, label %if.else530

land.lhs.true296:                                 ; preds = %if.end294
  %185 = load i8, i8* %is_cow, align 1
  %tobool297 = trunc i8 %185 to i1
  br i1 %tobool297, label %if.else530, label %land.lhs.true298

land.lhs.true298:                                 ; preds = %land.lhs.true296
  %186 = load i64, i64* %clen, align 8
  %conv299 = trunc i64 %186 to i32
  %conv300 = sext i32 %conv299 to i64
  %187 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call301 = call %struct.regexp* @S_ReANY(%struct.p5rx* %187)
  %minlenret = getelementptr inbounds %struct.regexp, %struct.regexp* %call301, i32 0, i32 9
  %188 = load i64, i64* %minlenret, align 8
  %cmp302 = icmp sle i64 %conv300, %188
  br i1 %cmp302, label %land.lhs.true304, label %if.else530

land.lhs.true304:                                 ; preds = %land.lhs.true298
  %189 = load i8, i8* %once, align 1
  %tobool305 = trunc i8 %189 to i1
  br i1 %tobool305, label %land.lhs.true320, label %lor.lhs.false307

lor.lhs.false307:                                 ; preds = %land.lhs.true304
  %190 = load i8, i8* %r_flags, align 1
  %conv308 = zext i8 %190 to i32
  %and309 = and i32 %conv308, 1
  %tobool310 = icmp ne i32 %and309, 0
  br i1 %tobool310, label %lor.lhs.false311, label %land.lhs.true320

lor.lhs.false311:                                 ; preds = %lor.lhs.false307
  %191 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags312 = getelementptr inbounds %struct.sv, %struct.sv* %191, i32 0, i32 2
  %192 = load i32, i32* %sv_flags312, align 4
  %and313 = and i32 %192, 2097152
  %tobool314 = icmp ne i32 %and313, 0
  br i1 %tobool314, label %if.else530, label %land.lhs.true315

land.lhs.true315:                                 ; preds = %lor.lhs.false311
  %193 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call316 = call %struct.regexp* @S_ReANY(%struct.p5rx* %193)
  %extflags317 = getelementptr inbounds %struct.regexp, %struct.regexp* %call316, i32 0, i32 7
  %194 = load i32, i32* %extflags317, align 8
  %and318 = and i32 %194, 131072
  %tobool319 = icmp ne i32 %and318, 0
  br i1 %tobool319, label %if.else530, label %land.lhs.true320

land.lhs.true320:                                 ; preds = %land.lhs.true315, %lor.lhs.false307, %land.lhs.true304
  %195 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call321 = call %struct.regexp* @S_ReANY(%struct.p5rx* %195)
  %extflags322 = getelementptr inbounds %struct.regexp, %struct.regexp* %call321, i32 0, i32 7
  %196 = load i32, i32* %extflags322, align 8
  %and323 = and i32 %196, 65536
  %tobool324 = icmp ne i32 %and323, 0
  br i1 %tobool324, label %if.else530, label %land.lhs.true325

land.lhs.true325:                                 ; preds = %land.lhs.true320
  %197 = load i8, i8* %doutf8, align 1
  %tobool326 = trunc i8 %197 to i1
  br i1 %tobool326, label %lor.lhs.false327, label %land.lhs.true331

lor.lhs.false327:                                 ; preds = %land.lhs.true325
  %198 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags328 = getelementptr inbounds %struct.sv, %struct.sv* %198, i32 0, i32 2
  %199 = load i32, i32* %sv_flags328, align 4
  %and329 = and i32 %199, 536870912
  %tobool330 = icmp ne i32 %and329, 0
  br i1 %tobool330, label %land.lhs.true331, label %if.else530

land.lhs.true331:                                 ; preds = %lor.lhs.false327, %land.lhs.true325
  %200 = load %struct.pmop*, %struct.pmop** %rpm, align 8
  %op_pmflags332 = getelementptr inbounds %struct.pmop, %struct.pmop* %200, i32 0, i32 10
  %201 = load i32, i32* %op_pmflags332, align 8
  %and333 = and i32 %201, 134217728
  %tobool334 = icmp ne i32 %and333, 0
  br i1 %tobool334, label %if.else530, label %if.then335

if.then335:                                       ; preds = %land.lhs.true331
  %202 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags336 = getelementptr inbounds %struct.sv, %struct.sv* %202, i32 0, i32 2
  %203 = load i32, i32* %sv_flags336, align 4
  %and337 = and i32 %203, 268435456
  %tobool338 = icmp ne i32 %and337, 0
  br i1 %tobool338, label %if.then339, label %if.end343

if.then339:                                       ; preds = %if.then335
  %204 = load i32, i32* %force_on_match, align 4
  %tobool340 = icmp ne i32 %204, 0
  br i1 %tobool340, label %if.end342, label %if.then341

if.then341:                                       ; preds = %if.then339
  br label %have_a_cow

if.end342:                                        ; preds = %if.then339
  br label %if.end343

if.end343:                                        ; preds = %if.end342, %if.then335
  %205 = load i32, i32* %force_on_match, align 4
  %tobool344 = icmp ne i32 %205, 0
  br i1 %tobool344, label %if.then345, label %if.end359

if.then345:                                       ; preds = %if.end343
  store i32 0, i32* %force_on_match, align 4
  %206 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags346 = getelementptr inbounds %struct.sv, %struct.sv* %206, i32 0, i32 2
  %207 = load i32, i32* %sv_flags346, align 4
  %and347 = and i32 %207, 430018304
  %cmp348 = icmp eq i32 %and347, 1024
  br i1 %cmp348, label %cond.true350, label %cond.false355

cond.true350:                                     ; preds = %if.then345
  %208 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any351 = getelementptr inbounds %struct.sv, %struct.sv* %208, i32 0, i32 0
  %209 = load i8*, i8** %sv_any351, align 8
  %210 = bitcast i8* %209 to %struct.xpv*
  %xpv_cur352 = getelementptr inbounds %struct.xpv, %struct.xpv* %210, i32 0, i32 2
  %211 = load i64, i64* %xpv_cur352, align 8
  store i64 %211, i64* %len, align 8
  %212 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u353 = getelementptr inbounds %struct.sv, %struct.sv* %212, i32 0, i32 3
  %svu_pv354 = bitcast %union.anon* %sv_u353 to i8**
  %213 = load i8*, i8** %svu_pv354, align 8
  br label %cond.end357

cond.false355:                                    ; preds = %if.then345
  %214 = load %struct.sv*, %struct.sv** %targ, align 8
  %call356 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %214, i64* %len, i32 0)
  br label %cond.end357

cond.end357:                                      ; preds = %cond.false355, %cond.true350
  %cond358 = phi i8* [ %213, %cond.true350 ], [ %call356, %cond.false355 ]
  store i8* %cond358, i8** %orig, align 8
  br label %force_it

if.end359:                                        ; preds = %if.end343
  %215 = load i8, i8* %once, align 1
  %tobool360 = trunc i8 %215 to i1
  br i1 %tobool360, label %if.then361, label %if.else435

if.then361:                                       ; preds = %if.end359
  %216 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call362 = call %struct.regexp* @S_ReANY(%struct.p5rx* %216)
  %extflags363 = getelementptr inbounds %struct.regexp, %struct.regexp* %call362, i32 0, i32 7
  %217 = load i32, i32* %extflags363, align 8
  %and364 = and i32 %217, 67108864
  %tobool365 = icmp ne i32 %and364, 0
  br i1 %tobool365, label %if.then366, label %if.end370

if.then366:                                       ; preds = %if.then361
  %218 = load i8, i8* %rxtainted, align 1
  %conv367 = zext i8 %218 to i32
  %or368 = or i32 %conv367, 2
  %conv369 = trunc i32 %or368 to i8
  store i8 %conv369, i8* %rxtainted, align 1
  br label %if.end370

if.end370:                                        ; preds = %if.then366, %if.then361
  %219 = load i8*, i8** %orig, align 8
  %220 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call371 = call %struct.regexp* @S_ReANY(%struct.p5rx* %220)
  %offs = getelementptr inbounds %struct.regexp, %struct.regexp* %call371, i32 0, i32 17
  %221 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs, align 8
  %arrayidx372 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %221, i64 0
  %start = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx372, i32 0, i32 0
  %222 = load i64, i64* %start, align 8
  %add.ptr373 = getelementptr inbounds i8, i8* %219, i64 %222
  store i8* %add.ptr373, i8** %m, align 8
  %223 = load i8*, i8** %orig, align 8
  %224 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call374 = call %struct.regexp* @S_ReANY(%struct.p5rx* %224)
  %offs375 = getelementptr inbounds %struct.regexp, %struct.regexp* %call374, i32 0, i32 17
  %225 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs375, align 8
  %arrayidx376 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %225, i64 0
  %end = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx376, i32 0, i32 1
  %226 = load i64, i64* %end, align 8
  %add.ptr377 = getelementptr inbounds i8, i8* %223, i64 %226
  store i8* %add.ptr377, i8** %d, align 8
  %227 = load i8*, i8** %orig, align 8
  store i8* %227, i8** %s, align 8
  %228 = load i8*, i8** %m, align 8
  %229 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast378 = ptrtoint i8* %228 to i64
  %sub.ptr.rhs.cast379 = ptrtoint i8* %229 to i64
  %sub.ptr.sub380 = sub i64 %sub.ptr.lhs.cast378, %sub.ptr.rhs.cast379
  %230 = load i8*, i8** %strend, align 8
  %231 = load i8*, i8** %d, align 8
  %sub.ptr.lhs.cast381 = ptrtoint i8* %230 to i64
  %sub.ptr.rhs.cast382 = ptrtoint i8* %231 to i64
  %sub.ptr.sub383 = sub i64 %sub.ptr.lhs.cast381, %sub.ptr.rhs.cast382
  %cmp384 = icmp sgt i64 %sub.ptr.sub380, %sub.ptr.sub383
  br i1 %cmp384, label %if.then386, label %if.else410

if.then386:                                       ; preds = %if.end370
  %232 = load i64, i64* %clen, align 8
  %tobool387 = icmp ne i64 %232, 0
  br i1 %tobool387, label %if.then388, label %if.end391

if.then388:                                       ; preds = %if.then386
  %233 = load i8*, i8** %m, align 8
  %234 = load i8*, i8** %c, align 8
  %235 = load i64, i64* %clen, align 8
  %mul389 = mul i64 %235, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %233, i8* align 1 %234, i64 %mul389, i1 false)
  %236 = load i64, i64* %clen, align 8
  %237 = load i8*, i8** %m, align 8
  %add.ptr390 = getelementptr inbounds i8, i8* %237, i64 %236
  store i8* %add.ptr390, i8** %m, align 8
  br label %if.end391

if.end391:                                        ; preds = %if.then388, %if.then386
  %238 = load i8*, i8** %strend, align 8
  %239 = load i8*, i8** %d, align 8
  %sub.ptr.lhs.cast392 = ptrtoint i8* %238 to i64
  %sub.ptr.rhs.cast393 = ptrtoint i8* %239 to i64
  %sub.ptr.sub394 = sub i64 %sub.ptr.lhs.cast392, %sub.ptr.rhs.cast393
  %conv395 = trunc i64 %sub.ptr.sub394 to i32
  store i32 %conv395, i32* %i, align 4
  %240 = load i32, i32* %i, align 4
  %cmp396 = icmp sgt i32 %240, 0
  br i1 %cmp396, label %if.then398, label %if.end402

if.then398:                                       ; preds = %if.end391
  %241 = load i8*, i8** %m, align 8
  %242 = load i8*, i8** %d, align 8
  %243 = load i32, i32* %i, align 4
  %conv399 = sext i32 %243 to i64
  %mul400 = mul i64 %conv399, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %241, i8* align 1 %242, i64 %mul400, i1 false)
  %244 = load i32, i32* %i, align 4
  %245 = load i8*, i8** %m, align 8
  %idx.ext = sext i32 %244 to i64
  %add.ptr401 = getelementptr inbounds i8, i8* %245, i64 %idx.ext
  store i8* %add.ptr401, i8** %m, align 8
  br label %if.end402

if.end402:                                        ; preds = %if.then398, %if.end391
  %246 = load i8*, i8** %m, align 8
  store i8 0, i8* %246, align 1
  br label %do.body403

do.body403:                                       ; preds = %if.end402
  %247 = load i8*, i8** %m, align 8
  %248 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast404 = ptrtoint i8* %247 to i64
  %sub.ptr.rhs.cast405 = ptrtoint i8* %248 to i64
  %sub.ptr.sub406 = sub i64 %sub.ptr.lhs.cast404, %sub.ptr.rhs.cast405
  %249 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any407 = getelementptr inbounds %struct.sv, %struct.sv* %249, i32 0, i32 0
  %250 = load i8*, i8** %sv_any407, align 8
  %251 = bitcast i8* %250 to %struct.xpv*
  %xpv_cur408 = getelementptr inbounds %struct.xpv, %struct.xpv* %251, i32 0, i32 2
  store i64 %sub.ptr.sub406, i64* %xpv_cur408, align 8
  br label %do.end409

do.end409:                                        ; preds = %do.body403
  br label %if.end433

if.else410:                                       ; preds = %if.end370
  %252 = load i8*, i8** %m, align 8
  %253 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast412 = ptrtoint i8* %252 to i64
  %sub.ptr.rhs.cast413 = ptrtoint i8* %253 to i64
  %sub.ptr.sub414 = sub i64 %sub.ptr.lhs.cast412, %sub.ptr.rhs.cast413
  %conv415 = trunc i64 %sub.ptr.sub414 to i32
  store i32 %conv415, i32* %i411, align 4
  %254 = load i64, i64* %clen, align 8
  %255 = load i8*, i8** %d, align 8
  %idx.neg = sub i64 0, %254
  %add.ptr416 = getelementptr inbounds i8, i8* %255, i64 %idx.neg
  store i8* %add.ptr416, i8** %d, align 8
  %256 = load i32, i32* %i411, align 4
  %cmp417 = icmp sgt i32 %256, 0
  br i1 %cmp417, label %if.then419, label %if.end425

if.then419:                                       ; preds = %if.else410
  %257 = load i8*, i8** %d, align 8
  %258 = load i32, i32* %i411, align 4
  %idx.ext420 = sext i32 %258 to i64
  %idx.neg421 = sub i64 0, %idx.ext420
  %add.ptr422 = getelementptr inbounds i8, i8* %257, i64 %idx.neg421
  %259 = load i8*, i8** %s, align 8
  %260 = load i32, i32* %i411, align 4
  %conv423 = sext i32 %260 to i64
  %mul424 = mul i64 %conv423, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr422, i8* align 1 %259, i64 %mul424, i1 false)
  br label %if.end425

if.end425:                                        ; preds = %if.then419, %if.else410
  %261 = load %struct.sv*, %struct.sv** %targ, align 8
  %262 = load i8*, i8** %d, align 8
  %263 = load i32, i32* %i411, align 4
  %idx.ext426 = sext i32 %263 to i64
  %idx.neg427 = sub i64 0, %idx.ext426
  %add.ptr428 = getelementptr inbounds i8, i8* %262, i64 %idx.neg427
  call void @Perl_sv_chop(%struct.sv* %261, i8* %add.ptr428)
  %264 = load i64, i64* %clen, align 8
  %tobool429 = icmp ne i64 %264, 0
  br i1 %tobool429, label %if.then430, label %if.end432

if.then430:                                       ; preds = %if.end425
  %265 = load i8*, i8** %d, align 8
  %266 = load i8*, i8** %c, align 8
  %267 = load i64, i64* %clen, align 8
  %mul431 = mul i64 %267, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %265, i8* align 1 %266, i64 %mul431, i1 false)
  br label %if.end432

if.end432:                                        ; preds = %if.then430, %if.end425
  br label %if.end433

if.end433:                                        ; preds = %if.end432, %do.end409
  %268 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %268, %struct.sv*** %sp, align 8
  %269 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr434 = getelementptr inbounds %struct.sv*, %struct.sv** %269, i32 1
  store %struct.sv** %incdec.ptr434, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr434, align 8
  br label %if.end529

if.else435:                                       ; preds = %if.end359
  %270 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call438 = call %struct.regexp* @S_ReANY(%struct.p5rx* %270)
  %offs439 = getelementptr inbounds %struct.regexp, %struct.regexp* %call438, i32 0, i32 17
  %271 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs439, align 8
  %arrayidx440 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %271, i64 0
  %start441 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx440, i32 0, i32 0
  %272 = load i64, i64* %start441, align 8
  %273 = load i8*, i8** %orig, align 8
  %add.ptr442 = getelementptr inbounds i8, i8* %273, i64 %272
  store i8* %add.ptr442, i8** %s, align 8
  store i8* %add.ptr442, i8** %d436, align 8
  br label %do.body443

do.body443:                                       ; preds = %do.cond, %if.else435
  %274 = load i64, i64* %iters, align 8
  %inc = add nsw i64 %274, 1
  store i64 %inc, i64* %iters, align 8
  %275 = load i64, i64* %maxiters, align 8
  %cmp445 = icmp sgt i64 %274, %275
  br i1 %cmp445, label %cond.true447, label %cond.false448

cond.true447:                                     ; preds = %do.body443
  br i1 true, label %if.then449, label %if.end451

cond.false448:                                    ; preds = %do.body443
  br i1 false, label %if.then449, label %if.end451

if.then449:                                       ; preds = %cond.false448, %cond.true447
  %call450 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.33, i64 0, i64 0))
  store %struct.op* %call450, %struct.op** %retval, align 8
  br label %return

if.end451:                                        ; preds = %cond.false448, %cond.true447
  %276 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call452 = call %struct.regexp* @S_ReANY(%struct.p5rx* %276)
  %extflags453 = getelementptr inbounds %struct.regexp, %struct.regexp* %call452, i32 0, i32 7
  %277 = load i32, i32* %extflags453, align 8
  %and454 = and i32 %277, 67108864
  %tobool455 = icmp ne i32 %and454, 0
  br i1 %tobool455, label %cond.true456, label %cond.false457

cond.true456:                                     ; preds = %if.end451
  br i1 true, label %if.then458, label %if.end462

cond.false457:                                    ; preds = %if.end451
  br i1 false, label %if.then458, label %if.end462

if.then458:                                       ; preds = %cond.false457, %cond.true456
  %278 = load i8, i8* %rxtainted, align 1
  %conv459 = zext i8 %278 to i32
  %or460 = or i32 %conv459, 2
  %conv461 = trunc i32 %or460 to i8
  store i8 %conv461, i8* %rxtainted, align 1
  br label %if.end462

if.end462:                                        ; preds = %if.then458, %cond.false457, %cond.true456
  %279 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call463 = call %struct.regexp* @S_ReANY(%struct.p5rx* %279)
  %offs464 = getelementptr inbounds %struct.regexp, %struct.regexp* %call463, i32 0, i32 17
  %280 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs464, align 8
  %arrayidx465 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %280, i64 0
  %start466 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx465, i32 0, i32 0
  %281 = load i64, i64* %start466, align 8
  %282 = load i8*, i8** %orig, align 8
  %add.ptr467 = getelementptr inbounds i8, i8* %282, i64 %281
  store i8* %add.ptr467, i8** %m437, align 8
  %283 = load i8*, i8** %m437, align 8
  %284 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast468 = ptrtoint i8* %283 to i64
  %sub.ptr.rhs.cast469 = ptrtoint i8* %284 to i64
  %sub.ptr.sub470 = sub i64 %sub.ptr.lhs.cast468, %sub.ptr.rhs.cast469
  %conv471 = trunc i64 %sub.ptr.sub470 to i32
  store i32 %conv471, i32* %i444, align 4
  %tobool472 = icmp ne i32 %conv471, 0
  br i1 %tobool472, label %if.then473, label %if.end482

if.then473:                                       ; preds = %if.end462
  %285 = load i8*, i8** %s, align 8
  %286 = load i8*, i8** %d436, align 8
  %cmp474 = icmp ne i8* %285, %286
  br i1 %cmp474, label %if.then476, label %if.end479

if.then476:                                       ; preds = %if.then473
  %287 = load i8*, i8** %d436, align 8
  %288 = load i8*, i8** %s, align 8
  %289 = load i32, i32* %i444, align 4
  %conv477 = sext i32 %289 to i64
  %mul478 = mul i64 %conv477, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %287, i8* align 1 %288, i64 %mul478, i1 false)
  br label %if.end479

if.end479:                                        ; preds = %if.then476, %if.then473
  %290 = load i32, i32* %i444, align 4
  %291 = load i8*, i8** %d436, align 8
  %idx.ext480 = sext i32 %290 to i64
  %add.ptr481 = getelementptr inbounds i8, i8* %291, i64 %idx.ext480
  store i8* %add.ptr481, i8** %d436, align 8
  br label %if.end482

if.end482:                                        ; preds = %if.end479, %if.end462
  %292 = load i64, i64* %clen, align 8
  %tobool483 = icmp ne i64 %292, 0
  br i1 %tobool483, label %if.then484, label %if.end487

if.then484:                                       ; preds = %if.end482
  %293 = load i8*, i8** %d436, align 8
  %294 = load i8*, i8** %c, align 8
  %295 = load i64, i64* %clen, align 8
  %mul485 = mul i64 %295, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %293, i8* align 1 %294, i64 %mul485, i1 false)
  %296 = load i64, i64* %clen, align 8
  %297 = load i8*, i8** %d436, align 8
  %add.ptr486 = getelementptr inbounds i8, i8* %297, i64 %296
  store i8* %add.ptr486, i8** %d436, align 8
  br label %if.end487

if.end487:                                        ; preds = %if.then484, %if.end482
  %298 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call488 = call %struct.regexp* @S_ReANY(%struct.p5rx* %298)
  %offs489 = getelementptr inbounds %struct.regexp, %struct.regexp* %call488, i32 0, i32 17
  %299 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs489, align 8
  %arrayidx490 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %299, i64 0
  %end491 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx490, i32 0, i32 1
  %300 = load i64, i64* %end491, align 8
  %301 = load i8*, i8** %orig, align 8
  %add.ptr492 = getelementptr inbounds i8, i8* %301, i64 %300
  store i8* %add.ptr492, i8** %s, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end487
  %302 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call493 = call %struct.regexp* @S_ReANY(%struct.p5rx* %302)
  %engine494 = getelementptr inbounds %struct.regexp, %struct.regexp* %call493, i32 0, i32 4
  %303 = load %struct.regexp_engine*, %struct.regexp_engine** %engine494, align 8
  %exec495 = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %303, i32 0, i32 1
  %304 = load i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)** %exec495, align 8
  %305 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %306 = load i8*, i8** %s, align 8
  %307 = load i8*, i8** %strend, align 8
  %308 = load i8*, i8** %orig, align 8
  %309 = load i8*, i8** %s, align 8
  %310 = load i8*, i8** %m437, align 8
  %cmp496 = icmp eq i8* %309, %310
  %conv497 = zext i1 %cmp496 to i32
  %conv498 = sext i32 %conv497 to i64
  %311 = load %struct.sv*, %struct.sv** %targ, align 8
  %call499 = call i32 %304(%struct.p5rx* %305, i8* %306, i8* %307, i8* %308, i64 %conv498, %struct.sv* %311, i8* null, i32 152)
  %tobool500 = icmp ne i32 %call499, 0
  br i1 %tobool500, label %do.body443, label %do.end501

do.end501:                                        ; preds = %do.cond
  %312 = load i8*, i8** %s, align 8
  %313 = load i8*, i8** %d436, align 8
  %cmp502 = icmp ne i8* %312, %313
  br i1 %cmp502, label %if.then504, label %if.end526

if.then504:                                       ; preds = %do.end501
  %314 = load i8*, i8** %strend, align 8
  %315 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast506 = ptrtoint i8* %314 to i64
  %sub.ptr.rhs.cast507 = ptrtoint i8* %315 to i64
  %sub.ptr.sub508 = sub i64 %sub.ptr.lhs.cast506, %sub.ptr.rhs.cast507
  %conv509 = trunc i64 %sub.ptr.sub508 to i32
  store i32 %conv509, i32* %i505, align 4
  br label %do.body510

do.body510:                                       ; preds = %if.then504
  %316 = load i8*, i8** %d436, align 8
  %317 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u511 = getelementptr inbounds %struct.sv, %struct.sv* %317, i32 0, i32 3
  %svu_pv512 = bitcast %union.anon* %sv_u511 to i8**
  %318 = load i8*, i8** %svu_pv512, align 8
  %add.ptr513 = getelementptr inbounds i8, i8* %318, i64 0
  %sub.ptr.lhs.cast514 = ptrtoint i8* %316 to i64
  %sub.ptr.rhs.cast515 = ptrtoint i8* %add.ptr513 to i64
  %sub.ptr.sub516 = sub i64 %sub.ptr.lhs.cast514, %sub.ptr.rhs.cast515
  %319 = load i32, i32* %i505, align 4
  %conv517 = sext i32 %319 to i64
  %add518 = add nsw i64 %sub.ptr.sub516, %conv517
  %320 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any519 = getelementptr inbounds %struct.sv, %struct.sv* %320, i32 0, i32 0
  %321 = load i8*, i8** %sv_any519, align 8
  %322 = bitcast i8* %321 to %struct.xpv*
  %xpv_cur520 = getelementptr inbounds %struct.xpv, %struct.xpv* %322, i32 0, i32 2
  store i64 %add518, i64* %xpv_cur520, align 8
  br label %do.end522

do.end522:                                        ; preds = %do.body510
  %323 = load i8*, i8** %d436, align 8
  %324 = load i8*, i8** %s, align 8
  %325 = load i32, i32* %i505, align 4
  %add523 = add nsw i32 %325, 1
  %conv524 = sext i32 %add523 to i64
  %mul525 = mul i64 %conv524, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %323, i8* align 1 %324, i64 %mul525, i1 false)
  br label %if.end526

if.end526:                                        ; preds = %do.end522, %do.end501
  %326 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %326, %struct.sv*** %sp, align 8
  %call527 = call %struct.sv* @Perl_sv_newmortal()
  %327 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr528 = getelementptr inbounds %struct.sv*, %struct.sv** %327, i32 1
  store %struct.sv** %incdec.ptr528, %struct.sv*** %sp, align 8
  store %struct.sv* %call527, %struct.sv** %incdec.ptr528, align 8
  %328 = load i64, i64* %iters, align 8
  call void @Perl_sv_setiv(%struct.sv* %call527, i64 %328)
  br label %if.end529

if.end529:                                        ; preds = %if.end526, %if.end433
  br label %if.end878

if.else530:                                       ; preds = %land.lhs.true331, %lor.lhs.false327, %land.lhs.true320, %land.lhs.true315, %lor.lhs.false311, %land.lhs.true298, %land.lhs.true296, %if.end294
  %329 = load i32, i32* %force_on_match, align 4
  %tobool532 = icmp ne i32 %329, 0
  br i1 %tobool532, label %if.then533, label %if.end554

if.then533:                                       ; preds = %if.else530
  store i32 0, i32* %force_on_match, align 4
  %330 = load %struct.pmop*, %struct.pmop** %rpm, align 8
  %op_pmflags534 = getelementptr inbounds %struct.pmop, %struct.pmop* %330, i32 0, i32 10
  %331 = load i32, i32* %op_pmflags534, align 8
  %and535 = and i32 %331, 134217728
  %tobool536 = icmp ne i32 %and535, 0
  br i1 %tobool536, label %if.then537, label %if.end540

if.then537:                                       ; preds = %if.then533
  %332 = load %struct.sv*, %struct.sv** %targ, align 8
  %call538 = call %struct.sv* @Perl_newSVsv(%struct.sv* %332)
  %call539 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call538)
  store %struct.sv* %call539, %struct.sv** %targ, align 8
  br label %if.end540

if.end540:                                        ; preds = %if.then537, %if.then533
  %333 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags541 = getelementptr inbounds %struct.sv, %struct.sv* %333, i32 0, i32 2
  %334 = load i32, i32* %sv_flags541, align 4
  %and542 = and i32 %334, 430018304
  %cmp543 = icmp eq i32 %and542, 1024
  br i1 %cmp543, label %cond.true545, label %cond.false550

cond.true545:                                     ; preds = %if.end540
  %335 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any546 = getelementptr inbounds %struct.sv, %struct.sv* %335, i32 0, i32 0
  %336 = load i8*, i8** %sv_any546, align 8
  %337 = bitcast i8* %336 to %struct.xpv*
  %xpv_cur547 = getelementptr inbounds %struct.xpv, %struct.xpv* %337, i32 0, i32 2
  %338 = load i64, i64* %xpv_cur547, align 8
  store i64 %338, i64* %len, align 8
  %339 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u548 = getelementptr inbounds %struct.sv, %struct.sv* %339, i32 0, i32 3
  %svu_pv549 = bitcast %union.anon* %sv_u548 to i8**
  %340 = load i8*, i8** %svu_pv549, align 8
  br label %cond.end552

cond.false550:                                    ; preds = %if.end540
  %341 = load %struct.sv*, %struct.sv** %targ, align 8
  %call551 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %341, i64* %len, i32 0)
  br label %cond.end552

cond.end552:                                      ; preds = %cond.false550, %cond.true545
  %cond553 = phi i8* [ %340, %cond.true545 ], [ %call551, %cond.false550 ]
  store i8* %cond553, i8** %orig, align 8
  br label %force_it

if.end554:                                        ; preds = %if.else530
  br label %have_a_cow

have_a_cow:                                       ; preds = %if.end554, %if.then341
  %342 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call555 = call %struct.regexp* @S_ReANY(%struct.p5rx* %342)
  %extflags556 = getelementptr inbounds %struct.regexp, %struct.regexp* %call555, i32 0, i32 7
  %343 = load i32, i32* %extflags556, align 8
  %and557 = and i32 %343, 67108864
  %tobool558 = icmp ne i32 %and557, 0
  br i1 %tobool558, label %if.then559, label %if.end563

if.then559:                                       ; preds = %have_a_cow
  %344 = load i8, i8* %rxtainted, align 1
  %conv560 = zext i8 %344 to i32
  %or561 = or i32 %conv560, 2
  %conv562 = trunc i32 %or561 to i8
  store i8 %conv562, i8* %rxtainted, align 1
  br label %if.end563

if.end563:                                        ; preds = %if.then559, %have_a_cow
  %345 = load %struct.sv*, %struct.sv** %dstr, align 8
  store %struct.sv* %345, %struct.sv** %repl, align 8
  %346 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call564 = call %struct.regexp* @S_ReANY(%struct.p5rx* %346)
  %offs565 = getelementptr inbounds %struct.regexp, %struct.regexp* %call564, i32 0, i32 17
  %347 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs565, align 8
  %arrayidx566 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %347, i64 0
  %start567 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx566, i32 0, i32 0
  %348 = load i64, i64* %start567, align 8
  %349 = load i8*, i8** %orig, align 8
  %add.ptr568 = getelementptr inbounds i8, i8* %349, i64 %348
  store i8* %add.ptr568, i8** %s, align 8
  %350 = load i8*, i8** %orig, align 8
  %351 = load i8*, i8** %s, align 8
  %352 = load i8*, i8** %orig, align 8
  %sub.ptr.lhs.cast569 = ptrtoint i8* %351 to i64
  %sub.ptr.rhs.cast570 = ptrtoint i8* %352 to i64
  %sub.ptr.sub571 = sub i64 %sub.ptr.lhs.cast569, %sub.ptr.rhs.cast570
  %353 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags572 = getelementptr inbounds %struct.sv, %struct.sv* %353, i32 0, i32 2
  %354 = load i32, i32* %sv_flags572, align 4
  %and573 = and i32 %354, 536870912
  %tobool574 = icmp ne i32 %and573, 0
  br i1 %tobool574, label %land.rhs575, label %land.end581

land.rhs575:                                      ; preds = %if.end563
  %355 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints576 = getelementptr inbounds %struct.cop, %struct.cop* %355, i32 0, i32 10
  %356 = load i32, i32* %cop_hints576, align 8
  %add577 = add i32 %356, 0
  %and578 = and i32 %add577, 8
  %tobool579 = icmp ne i32 %and578, 0
  %lnot580 = xor i1 %tobool579, true
  br label %land.end581

land.end581:                                      ; preds = %land.rhs575, %if.end563
  %357 = phi i1 [ false, %if.end563 ], [ %lnot580, %land.rhs575 ]
  %358 = zext i1 %357 to i64
  %cond583 = select i1 %357, i32 536870912, i32 0
  %or584 = or i32 524288, %cond583
  %call585 = call %struct.sv* @Perl_newSVpvn_flags(i8* %350, i64 %sub.ptr.sub571, i32 %or584)
  store %struct.sv* %call585, %struct.sv** %dstr, align 8
  %359 = load i8*, i8** %c, align 8
  %tobool586 = icmp ne i8* %359, null
  br i1 %tobool586, label %if.end636, label %if.then587

if.then587:                                       ; preds = %land.end581
  %360 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %360, %struct.sv*** %sp, align 8
  %361 = load i8*, i8** %orig, align 8
  store i8* %361, i8** %m531, align 8
  %362 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %362, i32 0, i32 4
  %363 = load i32, i32* %si_cxix, align 8
  %364 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %364, i32 0, i32 5
  %365 = load i32, i32* %si_cxmax, align 4
  %cmp588 = icmp slt i32 %363, %365
  br i1 %cmp588, label %cond.true590, label %cond.false593

cond.true590:                                     ; preds = %if.then587
  %366 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix591 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %366, i32 0, i32 4
  %367 = load i32, i32* %si_cxix591, align 8
  %inc592 = add nsw i32 %367, 1
  store i32 %inc592, i32* %si_cxix591, align 8
  br label %cond.end596

cond.false593:                                    ; preds = %if.then587
  %call594 = call i32 @Perl_cxinc()
  %368 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix595 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %368, i32 0, i32 4
  store i32 %call594, i32* %si_cxix595, align 8
  br label %cond.end596

cond.end596:                                      ; preds = %cond.false593, %cond.true590
  %cond597 = phi i32 [ %inc592, %cond.true590 ], [ %call594, %cond.false593 ]
  %369 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %369, i32 0, i32 1
  %370 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %371 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix598 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %371, i32 0, i32 4
  %372 = load i32, i32* %si_cxix598, align 8
  %idxprom = sext i32 %372 to i64
  %arrayidx599 = getelementptr inbounds %struct.context, %struct.context* %370, i64 %idxprom
  store %struct.context* %arrayidx599, %struct.context** %cx, align 8
  %373 = load i64, i64* %iters, align 8
  %374 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %374, i32 0, i32 0
  %cx_subst = bitcast %union.anon.17* %cx_u to %struct.subst*
  %sbu_iters = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst, i32 0, i32 4
  store i64 %373, i64* %sbu_iters, align 8
  %375 = load i64, i64* %maxiters, align 8
  %376 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u600 = getelementptr inbounds %struct.context, %struct.context* %376, i32 0, i32 0
  %cx_subst601 = bitcast %union.anon.17* %cx_u600 to %struct.subst*
  %sbu_maxiters = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst601, i32 0, i32 5
  store i64 %375, i64* %sbu_maxiters, align 8
  %377 = load i8, i8* %r_flags, align 1
  %378 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u602 = getelementptr inbounds %struct.context, %struct.context* %378, i32 0, i32 0
  %cx_subst603 = bitcast %union.anon.17* %cx_u602 to %struct.subst*
  %sbu_rflags = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst603, i32 0, i32 1
  store i8 %377, i8* %sbu_rflags, align 1
  %379 = load i32, i32* %oldsave, align 4
  %380 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u604 = getelementptr inbounds %struct.context, %struct.context* %380, i32 0, i32 0
  %cx_subst605 = bitcast %union.anon.17* %cx_u604 to %struct.subst*
  %sbu_oldsave = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst605, i32 0, i32 3
  store i32 %379, i32* %sbu_oldsave, align 4
  %381 = load i8, i8* %rxtainted, align 1
  %conv606 = zext i8 %381 to i16
  %382 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u607 = getelementptr inbounds %struct.context, %struct.context* %382, i32 0, i32 0
  %cx_subst608 = bitcast %union.anon.17* %cx_u607 to %struct.subst*
  %sbu_rxtainted = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst608, i32 0, i32 2
  store i16 %conv606, i16* %sbu_rxtainted, align 2
  %383 = load i8*, i8** %orig, align 8
  %384 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u609 = getelementptr inbounds %struct.context, %struct.context* %384, i32 0, i32 0
  %cx_subst610 = bitcast %union.anon.17* %cx_u609 to %struct.subst*
  %sbu_orig = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst610, i32 0, i32 6
  store i8* %383, i8** %sbu_orig, align 8
  %385 = load %struct.sv*, %struct.sv** %dstr, align 8
  %386 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u611 = getelementptr inbounds %struct.context, %struct.context* %386, i32 0, i32 0
  %cx_subst612 = bitcast %union.anon.17* %cx_u611 to %struct.subst*
  %sbu_dstr = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst612, i32 0, i32 7
  store %struct.sv* %385, %struct.sv** %sbu_dstr, align 8
  %387 = load %struct.sv*, %struct.sv** %targ, align 8
  %388 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u613 = getelementptr inbounds %struct.context, %struct.context* %388, i32 0, i32 0
  %cx_subst614 = bitcast %union.anon.17* %cx_u613 to %struct.subst*
  %sbu_targ = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst614, i32 0, i32 8
  store %struct.sv* %387, %struct.sv** %sbu_targ, align 8
  %389 = load i8*, i8** %s, align 8
  %390 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u615 = getelementptr inbounds %struct.context, %struct.context* %390, i32 0, i32 0
  %cx_subst616 = bitcast %union.anon.17* %cx_u615 to %struct.subst*
  %sbu_s = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst616, i32 0, i32 9
  store i8* %389, i8** %sbu_s, align 8
  %391 = load i8*, i8** %m531, align 8
  %392 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u617 = getelementptr inbounds %struct.context, %struct.context* %392, i32 0, i32 0
  %cx_subst618 = bitcast %union.anon.17* %cx_u617 to %struct.subst*
  %sbu_m = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst618, i32 0, i32 10
  store i8* %391, i8** %sbu_m, align 8
  %393 = load i8*, i8** %strend, align 8
  %394 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u619 = getelementptr inbounds %struct.context, %struct.context* %394, i32 0, i32 0
  %cx_subst620 = bitcast %union.anon.17* %cx_u619 to %struct.subst*
  %sbu_strend = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst620, i32 0, i32 11
  store i8* %393, i8** %sbu_strend, align 8
  %395 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u621 = getelementptr inbounds %struct.context, %struct.context* %395, i32 0, i32 0
  %cx_subst622 = bitcast %union.anon.17* %cx_u621 to %struct.subst*
  %sbu_rxres = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst622, i32 0, i32 12
  store i8* null, i8** %sbu_rxres, align 8
  %396 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %397 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u623 = getelementptr inbounds %struct.context, %struct.context* %397, i32 0, i32 0
  %cx_subst624 = bitcast %union.anon.17* %cx_u623 to %struct.subst*
  %sbu_rx = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst624, i32 0, i32 13
  store %struct.p5rx* %396, %struct.p5rx** %sbu_rx, align 8
  %398 = load i8, i8* %once, align 1
  %tobool625 = trunc i8 %398 to i1
  %399 = zext i1 %tobool625 to i64
  %cond627 = select i1 %tobool625, i32 16, i32 0
  %or628 = or i32 11, %cond627
  %conv629 = trunc i32 %or628 to i8
  %400 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u630 = getelementptr inbounds %struct.context, %struct.context* %400, i32 0, i32 0
  %cx_subst631 = bitcast %union.anon.17* %cx_u630 to %struct.subst*
  %sbu_type = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst631, i32 0, i32 0
  store i8 %conv629, i8* %sbu_type, align 8
  %401 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u632 = getelementptr inbounds %struct.context, %struct.context* %401, i32 0, i32 0
  %cx_subst633 = bitcast %union.anon.17* %cx_u632 to %struct.subst*
  %sbu_rxres634 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst633, i32 0, i32 12
  %402 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  call void @Perl_rxres_save(i8** %sbu_rxres634, %struct.p5rx* %402)
  %403 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %404 = bitcast %struct.p5rx* %403 to i8*
  %405 = bitcast i8* %404 to %struct.sv*
  %call635 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %405)
  %406 = bitcast %struct.sv* %call635 to %struct.p5rx*
  %407 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %407, %struct.sv*** @PL_stack_sp, align 8
  %408 = load %struct.op*, %struct.op** @PL_op, align 8
  %409 = bitcast %struct.op* %408 to %struct.pmop*
  %op_pmreplrootu = getelementptr inbounds %struct.pmop, %struct.pmop* %409, i32 0, i32 11
  %op_pmreplroot = bitcast %union.anon.18* %op_pmreplrootu to %struct.op**
  %410 = load %struct.op*, %struct.op** %op_pmreplroot, align 8
  store %struct.op* %410, %struct.op** %retval, align 8
  br label %return

if.end636:                                        ; preds = %land.end581
  store i8 1, i8* %first, align 1
  br label %do.body637

do.body637:                                       ; preds = %do.cond756, %if.end636
  %411 = load i64, i64* %iters, align 8
  %inc638 = add nsw i64 %411, 1
  store i64 %inc638, i64* %iters, align 8
  %412 = load i64, i64* %maxiters, align 8
  %cmp639 = icmp sgt i64 %411, %412
  br i1 %cmp639, label %cond.true641, label %cond.false642

cond.true641:                                     ; preds = %do.body637
  br i1 true, label %if.then643, label %if.end645

cond.false642:                                    ; preds = %do.body637
  br i1 false, label %if.then643, label %if.end645

if.then643:                                       ; preds = %cond.false642, %cond.true641
  %call644 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.33, i64 0, i64 0))
  store %struct.op* %call644, %struct.op** %retval, align 8
  br label %return

if.end645:                                        ; preds = %cond.false642, %cond.true641
  %413 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call646 = call %struct.regexp* @S_ReANY(%struct.p5rx* %413)
  %extflags647 = getelementptr inbounds %struct.regexp, %struct.regexp* %call646, i32 0, i32 7
  %414 = load i32, i32* %extflags647, align 8
  %and648 = and i32 %414, 67108864
  %tobool649 = icmp ne i32 %and648, 0
  br i1 %tobool649, label %cond.true650, label %cond.false651

cond.true650:                                     ; preds = %if.end645
  br i1 true, label %if.then652, label %if.end656

cond.false651:                                    ; preds = %if.end645
  br i1 false, label %if.then652, label %if.end656

if.then652:                                       ; preds = %cond.false651, %cond.true650
  %415 = load i8, i8* %rxtainted, align 1
  %conv653 = zext i8 %415 to i32
  %or654 = or i32 %conv653, 2
  %conv655 = trunc i32 %or654 to i8
  store i8 %conv655, i8* %rxtainted, align 1
  br label %if.end656

if.end656:                                        ; preds = %if.then652, %cond.false651, %cond.true650
  %416 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call657 = call %struct.regexp* @S_ReANY(%struct.p5rx* %416)
  %extflags658 = getelementptr inbounds %struct.regexp, %struct.regexp* %call657, i32 0, i32 7
  %417 = load i32, i32* %extflags658, align 8
  %and659 = and i32 %417, 33554432
  %tobool660 = icmp ne i32 %and659, 0
  br i1 %tobool660, label %land.lhs.true661, label %if.end676

land.lhs.true661:                                 ; preds = %if.end656
  %418 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call662 = call %struct.regexp* @S_ReANY(%struct.p5rx* %418)
  %subbeg = getelementptr inbounds %struct.regexp, %struct.regexp* %call662, i32 0, i32 18
  %419 = load i8*, i8** %subbeg, align 8
  %420 = load i8*, i8** %orig, align 8
  %cmp663 = icmp ne i8* %419, %420
  br i1 %cmp663, label %if.then665, label %if.end676

if.then665:                                       ; preds = %land.lhs.true661
  %421 = load i8*, i8** %s, align 8
  store i8* %421, i8** %old_s, align 8
  %422 = load i8*, i8** %orig, align 8
  store i8* %422, i8** %old_orig, align 8
  %423 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call666 = call %struct.regexp* @S_ReANY(%struct.p5rx* %423)
  %subbeg667 = getelementptr inbounds %struct.regexp, %struct.regexp* %call666, i32 0, i32 18
  %424 = load i8*, i8** %subbeg667, align 8
  store i8* %424, i8** %orig, align 8
  %425 = load i8*, i8** %orig, align 8
  %426 = load i8*, i8** %old_s, align 8
  %427 = load i8*, i8** %old_orig, align 8
  %sub.ptr.lhs.cast668 = ptrtoint i8* %426 to i64
  %sub.ptr.rhs.cast669 = ptrtoint i8* %427 to i64
  %sub.ptr.sub670 = sub i64 %sub.ptr.lhs.cast668, %sub.ptr.rhs.cast669
  %add.ptr671 = getelementptr inbounds i8, i8* %425, i64 %sub.ptr.sub670
  store i8* %add.ptr671, i8** %s, align 8
  %428 = load i8*, i8** %s, align 8
  %429 = load i8*, i8** %strend, align 8
  %430 = load i8*, i8** %old_s, align 8
  %sub.ptr.lhs.cast672 = ptrtoint i8* %429 to i64
  %sub.ptr.rhs.cast673 = ptrtoint i8* %430 to i64
  %sub.ptr.sub674 = sub i64 %sub.ptr.lhs.cast672, %sub.ptr.rhs.cast673
  %add.ptr675 = getelementptr inbounds i8, i8* %428, i64 %sub.ptr.sub674
  store i8* %add.ptr675, i8** %strend, align 8
  br label %if.end676

if.end676:                                        ; preds = %if.then665, %land.lhs.true661, %if.end656
  %431 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call677 = call %struct.regexp* @S_ReANY(%struct.p5rx* %431)
  %offs678 = getelementptr inbounds %struct.regexp, %struct.regexp* %call677, i32 0, i32 17
  %432 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs678, align 8
  %arrayidx679 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %432, i64 0
  %start680 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx679, i32 0, i32 0
  %433 = load i64, i64* %start680, align 8
  %434 = load i8*, i8** %orig, align 8
  %add.ptr681 = getelementptr inbounds i8, i8* %434, i64 %433
  store i8* %add.ptr681, i8** %m531, align 8
  %435 = load %struct.sv*, %struct.sv** %dstr, align 8
  %436 = load i8*, i8** %s, align 8
  %437 = load i8*, i8** %m531, align 8
  %438 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast682 = ptrtoint i8* %437 to i64
  %sub.ptr.rhs.cast683 = ptrtoint i8* %438 to i64
  %sub.ptr.sub684 = sub i64 %sub.ptr.lhs.cast682, %sub.ptr.rhs.cast683
  %439 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags685 = getelementptr inbounds %struct.sv, %struct.sv* %439, i32 0, i32 2
  %440 = load i32, i32* %sv_flags685, align 4
  %and686 = and i32 %440, 536870912
  %tobool687 = icmp ne i32 %and686, 0
  br i1 %tobool687, label %land.rhs688, label %land.end694

land.rhs688:                                      ; preds = %if.end676
  %441 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints689 = getelementptr inbounds %struct.cop, %struct.cop* %441, i32 0, i32 10
  %442 = load i32, i32* %cop_hints689, align 8
  %add690 = add i32 %442, 0
  %and691 = and i32 %add690, 8
  %tobool692 = icmp ne i32 %and691, 0
  %lnot693 = xor i1 %tobool692, true
  br label %land.end694

land.end694:                                      ; preds = %land.rhs688, %if.end676
  %443 = phi i1 [ false, %if.end676 ], [ %lnot693, %land.rhs688 ]
  %444 = zext i1 %443 to i64
  %cond696 = select i1 %443, i32 32768, i32 16384
  call void @Perl_sv_catpvn_flags(%struct.sv* %435, i8* %436, i64 %sub.ptr.sub684, i32 %cond696)
  %445 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call697 = call %struct.regexp* @S_ReANY(%struct.p5rx* %445)
  %offs698 = getelementptr inbounds %struct.regexp, %struct.regexp* %call697, i32 0, i32 17
  %446 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs698, align 8
  %arrayidx699 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %446, i64 0
  %end700 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx699, i32 0, i32 1
  %447 = load i64, i64* %end700, align 8
  %448 = load i8*, i8** %orig, align 8
  %add.ptr701 = getelementptr inbounds i8, i8* %448, i64 %447
  store i8* %add.ptr701, i8** %s, align 8
  %449 = load i8, i8* %first, align 1
  %tobool702 = trunc i8 %449 to i1
  br i1 %tobool702, label %if.then703, label %if.else710

if.then703:                                       ; preds = %land.end694
  %450 = load i64, i64* %clen, align 8
  %tobool704 = icmp ne i64 %450, 0
  br i1 %tobool704, label %if.then705, label %if.end709

if.then705:                                       ; preds = %if.then703
  %451 = load %struct.sv*, %struct.sv** %dstr, align 8
  %452 = load i8*, i8** %c, align 8
  %453 = load i64, i64* %clen, align 8
  %454 = load i8, i8* %doutf8, align 1
  %tobool706 = trunc i8 %454 to i1
  %455 = zext i1 %tobool706 to i64
  %cond708 = select i1 %tobool706, i32 32768, i32 16384
  call void @Perl_sv_catpvn_flags(%struct.sv* %451, i8* %452, i64 %453, i32 %cond708)
  br label %if.end709

if.end709:                                        ; preds = %if.then705, %if.then703
  store i8 0, i8* %first, align 1
  br label %if.end752

if.else710:                                       ; preds = %land.end694
  %456 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool711 = icmp ne %struct.sv* %456, null
  br i1 %tobool711, label %cond.true718, label %lor.lhs.false712

lor.lhs.false712:                                 ; preds = %if.else710
  %457 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool713 = icmp ne %struct.sv* %457, null
  br i1 %tobool713, label %land.lhs.true714, label %cond.false719

land.lhs.true714:                                 ; preds = %lor.lhs.false712
  %call715 = call %struct.sv* @Perl__get_encoding()
  %cmp716 = icmp ne %struct.sv* %call715, null
  br i1 %cmp716, label %cond.true718, label %cond.false719

cond.true718:                                     ; preds = %land.lhs.true714, %if.else710
  br i1 true, label %if.then720, label %if.else737

cond.false719:                                    ; preds = %land.lhs.true714, %lor.lhs.false712
  br i1 false, label %if.then720, label %if.else737

if.then720:                                       ; preds = %cond.false719, %cond.true718
  %458 = load %struct.sv*, %struct.sv** %nsv, align 8
  %tobool721 = icmp ne %struct.sv* %458, null
  br i1 %tobool721, label %if.end724, label %if.then722

if.then722:                                       ; preds = %if.then720
  %call723 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call723, %struct.sv** %nsv, align 8
  br label %if.end724

if.end724:                                        ; preds = %if.then722, %if.then720
  %459 = load %struct.sv*, %struct.sv** %nsv, align 8
  %460 = load %struct.sv*, %struct.sv** %repl, align 8
  call void @Perl_sv_copypv_flags(%struct.sv* %459, %struct.sv* %460, i32 2)
  %461 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags725 = getelementptr inbounds %struct.sv, %struct.sv* %461, i32 0, i32 2
  %462 = load i32, i32* %sv_flags725, align 4
  %and726 = and i32 %462, 536870912
  %tobool727 = icmp ne i32 %and726, 0
  br i1 %tobool727, label %land.lhs.true728, label %if.then733

land.lhs.true728:                                 ; preds = %if.end724
  %463 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints729 = getelementptr inbounds %struct.cop, %struct.cop* %463, i32 0, i32 10
  %464 = load i32, i32* %cop_hints729, align 8
  %add730 = add i32 %464, 0
  %and731 = and i32 %add730, 8
  %tobool732 = icmp ne i32 %and731, 0
  br i1 %tobool732, label %if.then733, label %if.end736

if.then733:                                       ; preds = %land.lhs.true728, %if.end724
  %465 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call734 = call %struct.sv* @Perl__get_encoding()
  %call735 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %465, %struct.sv* %call734)
  br label %if.end736

if.end736:                                        ; preds = %if.then733, %land.lhs.true728
  %466 = load %struct.sv*, %struct.sv** %dstr, align 8
  %467 = load %struct.sv*, %struct.sv** %nsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %466, %struct.sv* %467, i32 2)
  br label %if.end738

if.else737:                                       ; preds = %cond.false719, %cond.true718
  %468 = load %struct.sv*, %struct.sv** %dstr, align 8
  %469 = load %struct.sv*, %struct.sv** %repl, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %468, %struct.sv* %469, i32 2)
  br label %if.end738

if.end738:                                        ; preds = %if.else737, %if.end736
  %470 = load %struct.sv*, %struct.sv** %repl, align 8
  %sv_flags739 = getelementptr inbounds %struct.sv, %struct.sv* %470, i32 0, i32 2
  %471 = load i32, i32* %sv_flags739, align 4
  %and740 = and i32 %471, 14680064
  %tobool741 = icmp ne i32 %and740, 0
  br i1 %tobool741, label %land.lhs.true742, label %cond.false746

land.lhs.true742:                                 ; preds = %if.end738
  %472 = load %struct.sv*, %struct.sv** %repl, align 8
  %call743 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %472)
  br i1 %call743, label %cond.true745, label %cond.false746

cond.true745:                                     ; preds = %land.lhs.true742
  br i1 true, label %if.then747, label %if.end751

cond.false746:                                    ; preds = %land.lhs.true742, %if.end738
  br i1 false, label %if.then747, label %if.end751

if.then747:                                       ; preds = %cond.false746, %cond.true745
  %473 = load i8, i8* %rxtainted, align 1
  %conv748 = zext i8 %473 to i32
  %or749 = or i32 %conv748, 4
  %conv750 = trunc i32 %or749 to i8
  store i8 %conv750, i8* %rxtainted, align 1
  br label %if.end751

if.end751:                                        ; preds = %if.then747, %cond.false746, %cond.true745
  br label %if.end752

if.end752:                                        ; preds = %if.end751, %if.end709
  %474 = load i8, i8* %once, align 1
  %tobool753 = trunc i8 %474 to i1
  br i1 %tobool753, label %if.then754, label %if.end755

if.then754:                                       ; preds = %if.end752
  br label %do.end765

if.end755:                                        ; preds = %if.end752
  br label %do.cond756

do.cond756:                                       ; preds = %if.end755
  %475 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call757 = call %struct.regexp* @S_ReANY(%struct.p5rx* %475)
  %engine758 = getelementptr inbounds %struct.regexp, %struct.regexp* %call757, i32 0, i32 4
  %476 = load %struct.regexp_engine*, %struct.regexp_engine** %engine758, align 8
  %exec759 = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %476, i32 0, i32 1
  %477 = load i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)** %exec759, align 8
  %478 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %479 = load i8*, i8** %s, align 8
  %480 = load i8*, i8** %strend, align 8
  %481 = load i8*, i8** %orig, align 8
  %482 = load i8*, i8** %s, align 8
  %483 = load i8*, i8** %m531, align 8
  %cmp760 = icmp eq i8* %482, %483
  %conv761 = zext i1 %cmp760 to i32
  %conv762 = sext i32 %conv761 to i64
  %484 = load %struct.sv*, %struct.sv** %targ, align 8
  %call763 = call i32 %477(%struct.p5rx* %478, i8* %479, i8* %480, i8* %481, i64 %conv762, %struct.sv* %484, i8* null, i32 152)
  %tobool764 = icmp ne i32 %call763, 0
  br i1 %tobool764, label %do.body637, label %do.end765

do.end765:                                        ; preds = %do.cond756, %if.then754
  %485 = load %struct.sv*, %struct.sv** %dstr, align 8
  %486 = load i8*, i8** %s, align 8
  %487 = load i8*, i8** %strend, align 8
  %488 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast766 = ptrtoint i8* %487 to i64
  %sub.ptr.rhs.cast767 = ptrtoint i8* %488 to i64
  %sub.ptr.sub768 = sub i64 %sub.ptr.lhs.cast766, %sub.ptr.rhs.cast767
  %489 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags769 = getelementptr inbounds %struct.sv, %struct.sv* %489, i32 0, i32 2
  %490 = load i32, i32* %sv_flags769, align 4
  %and770 = and i32 %490, 536870912
  %tobool771 = icmp ne i32 %and770, 0
  br i1 %tobool771, label %land.rhs772, label %land.end778

land.rhs772:                                      ; preds = %do.end765
  %491 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints773 = getelementptr inbounds %struct.cop, %struct.cop* %491, i32 0, i32 10
  %492 = load i32, i32* %cop_hints773, align 8
  %add774 = add i32 %492, 0
  %and775 = and i32 %add774, 8
  %tobool776 = icmp ne i32 %and775, 0
  %lnot777 = xor i1 %tobool776, true
  br label %land.end778

land.end778:                                      ; preds = %land.rhs772, %do.end765
  %493 = phi i1 [ false, %do.end765 ], [ %lnot777, %land.rhs772 ]
  %494 = zext i1 %493 to i64
  %cond780 = select i1 %493, i32 32768, i32 16384
  call void @Perl_sv_catpvn_flags(%struct.sv* %485, i8* %486, i64 %sub.ptr.sub768, i32 %cond780)
  %495 = load %struct.pmop*, %struct.pmop** %rpm, align 8
  %op_pmflags781 = getelementptr inbounds %struct.pmop, %struct.pmop* %495, i32 0, i32 10
  %496 = load i32, i32* %op_pmflags781, align 8
  %and782 = and i32 %496, 134217728
  %tobool783 = icmp ne i32 %and782, 0
  br i1 %tobool783, label %if.then784, label %if.else786

if.then784:                                       ; preds = %land.end778
  %497 = load %struct.sv*, %struct.sv** %dstr, align 8
  store %struct.sv* %497, %struct.sv** %targ, align 8
  %498 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %498, %struct.sv*** %sp, align 8
  %499 = load %struct.sv*, %struct.sv** %dstr, align 8
  %500 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr785 = getelementptr inbounds %struct.sv*, %struct.sv** %500, i32 1
  store %struct.sv** %incdec.ptr785, %struct.sv*** %sp, align 8
  store %struct.sv* %499, %struct.sv** %incdec.ptr785, align 8
  br label %if.end877

if.else786:                                       ; preds = %land.end778
  %501 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags787 = getelementptr inbounds %struct.sv, %struct.sv* %501, i32 0, i32 2
  %502 = load i32, i32* %sv_flags787, align 4
  %and788 = and i32 %502, 268435456
  %tobool789 = icmp ne i32 %and788, 0
  br i1 %tobool789, label %if.then790, label %if.else791

if.then790:                                       ; preds = %if.else786
  %503 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %503, i32 4)
  br label %if.end842

if.else791:                                       ; preds = %if.else786
  br label %do.body792

do.body792:                                       ; preds = %if.else791
  %504 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any793 = getelementptr inbounds %struct.sv, %struct.sv* %504, i32 0, i32 0
  %505 = load i8*, i8** %sv_any793, align 8
  %506 = bitcast i8* %505 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %506, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.26* %xpv_len_u to i64*
  %507 = load i64, i64* %xpvlenu_len, align 8
  %tobool794 = icmp ne i64 %507, 0
  br i1 %tobool794, label %if.then795, label %if.end839

if.then795:                                       ; preds = %do.body792
  %508 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags796 = getelementptr inbounds %struct.sv, %struct.sv* %508, i32 0, i32 2
  %509 = load i32, i32* %sv_flags796, align 4
  %and797 = and i32 %509, 33554432
  %tobool798 = icmp ne i32 %and797, 0
  br i1 %tobool798, label %cond.true799, label %cond.false800

cond.true799:                                     ; preds = %if.then795
  br i1 true, label %if.then801, label %if.end836

cond.false800:                                    ; preds = %if.then795
  br i1 false, label %if.then801, label %if.end836

if.then801:                                       ; preds = %cond.false800, %cond.true799
  br label %do.body802

do.body802:                                       ; preds = %if.then801
  %510 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags803 = getelementptr inbounds %struct.sv, %struct.sv* %510, i32 0, i32 2
  %511 = load i32, i32* %sv_flags803, align 4
  %and804 = and i32 %511, 33554432
  %tobool805 = icmp ne i32 %and804, 0
  br i1 %tobool805, label %if.then806, label %if.else820

if.then806:                                       ; preds = %do.body802
  %512 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u807 = getelementptr inbounds %struct.sv, %struct.sv* %512, i32 0, i32 3
  %svu_pv808 = bitcast %union.anon* %sv_u807 to i8**
  %513 = load i8*, i8** %svu_pv808, align 8
  %add.ptr809 = getelementptr inbounds i8, i8* %513, i64 0
  %arrayidx810 = getelementptr inbounds i8, i8* %add.ptr809, i64 -1
  %514 = load i8, i8* %arrayidx810, align 1
  %conv811 = zext i8 %514 to i64
  store i64 %conv811, i64* %zok, align 8
  %515 = load i64, i64* %zok, align 8
  %tobool812 = icmp ne i64 %515, 0
  br i1 %tobool812, label %if.end819, label %if.then813

if.then813:                                       ; preds = %if.then806
  %516 = bitcast i64* %zok to i8*
  %517 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u814 = getelementptr inbounds %struct.sv, %struct.sv* %517, i32 0, i32 3
  %svu_pv815 = bitcast %union.anon* %sv_u814 to i8**
  %518 = load i8*, i8** %svu_pv815, align 8
  %add.ptr816 = getelementptr inbounds i8, i8* %518, i64 0
  %add.ptr817 = getelementptr inbounds i8, i8* %add.ptr816, i64 -1
  %add.ptr818 = getelementptr inbounds i8, i8* %add.ptr817, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %516, i8* align 1 %add.ptr818, i64 8, i1 false)
  br label %if.end819

if.end819:                                        ; preds = %if.then813, %if.then806
  br label %if.end821

if.else820:                                       ; preds = %do.body802
  store i64 0, i64* %zok, align 8
  br label %if.end821

if.end821:                                        ; preds = %if.else820, %if.end819
  br label %do.end823

do.end823:                                        ; preds = %if.end821
  br label %do.body824

do.body824:                                       ; preds = %do.end823
  %519 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u825 = getelementptr inbounds %struct.sv, %struct.sv* %519, i32 0, i32 3
  %svu_pv826 = bitcast %union.anon* %sv_u825 to i8**
  %520 = load i8*, i8** %svu_pv826, align 8
  %add.ptr827 = getelementptr inbounds i8, i8* %520, i64 0
  %521 = load i64, i64* %zok, align 8
  %idx.neg828 = sub i64 0, %521
  %add.ptr829 = getelementptr inbounds i8, i8* %add.ptr827, i64 %idx.neg828
  %522 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u830 = getelementptr inbounds %struct.sv, %struct.sv* %522, i32 0, i32 3
  %svu_pv831 = bitcast %union.anon* %sv_u830 to i8**
  store i8* %add.ptr829, i8** %svu_pv831, align 8
  br label %do.end833

do.end833:                                        ; preds = %do.body824
  %523 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags834 = getelementptr inbounds %struct.sv, %struct.sv* %523, i32 0, i32 2
  %524 = load i32, i32* %sv_flags834, align 4
  %and835 = and i32 %524, -33554433
  store i32 %and835, i32* %sv_flags834, align 4
  br label %if.end836

if.end836:                                        ; preds = %do.end833, %cond.false800, %cond.true799
  %525 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u837 = getelementptr inbounds %struct.sv, %struct.sv* %525, i32 0, i32 3
  %svu_pv838 = bitcast %union.anon* %sv_u837 to i8**
  %526 = load i8*, i8** %svu_pv838, align 8
  call void @Perl_safesysfree(i8* %526)
  br label %if.end839

if.end839:                                        ; preds = %if.end836, %do.body792
  br label %do.end841

do.end841:                                        ; preds = %if.end839
  br label %if.end842

if.end842:                                        ; preds = %do.end841, %if.then790
  br label %do.body843

do.body843:                                       ; preds = %if.end842
  %527 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_u844 = getelementptr inbounds %struct.sv, %struct.sv* %527, i32 0, i32 3
  %svu_pv845 = bitcast %union.anon* %sv_u844 to i8**
  %528 = load i8*, i8** %svu_pv845, align 8
  %529 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u846 = getelementptr inbounds %struct.sv, %struct.sv* %529, i32 0, i32 3
  %svu_pv847 = bitcast %union.anon* %sv_u846 to i8**
  store i8* %528, i8** %svu_pv847, align 8
  br label %do.end849

do.end849:                                        ; preds = %do.body843
  br label %do.body850

do.body850:                                       ; preds = %do.end849
  %530 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any851 = getelementptr inbounds %struct.sv, %struct.sv* %530, i32 0, i32 0
  %531 = load i8*, i8** %sv_any851, align 8
  %532 = bitcast i8* %531 to %struct.xpv*
  %xpv_cur852 = getelementptr inbounds %struct.xpv, %struct.xpv* %532, i32 0, i32 2
  %533 = load i64, i64* %xpv_cur852, align 8
  %534 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any853 = getelementptr inbounds %struct.sv, %struct.sv* %534, i32 0, i32 0
  %535 = load i8*, i8** %sv_any853, align 8
  %536 = bitcast i8* %535 to %struct.xpv*
  %xpv_cur854 = getelementptr inbounds %struct.xpv, %struct.xpv* %536, i32 0, i32 2
  store i64 %533, i64* %xpv_cur854, align 8
  br label %do.end856

do.end856:                                        ; preds = %do.body850
  br label %do.body857

do.body857:                                       ; preds = %do.end856
  %537 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any858 = getelementptr inbounds %struct.sv, %struct.sv* %537, i32 0, i32 0
  %538 = load i8*, i8** %sv_any858, align 8
  %539 = bitcast i8* %538 to %struct.xpv*
  %xpv_len_u859 = getelementptr inbounds %struct.xpv, %struct.xpv* %539, i32 0, i32 3
  %xpvlenu_len860 = bitcast %union.anon.26* %xpv_len_u859 to i64*
  %540 = load i64, i64* %xpvlenu_len860, align 8
  %541 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any861 = getelementptr inbounds %struct.sv, %struct.sv* %541, i32 0, i32 0
  %542 = load i8*, i8** %sv_any861, align 8
  %543 = bitcast i8* %542 to %struct.xpv*
  %xpv_len_u862 = getelementptr inbounds %struct.xpv, %struct.xpv* %543, i32 0, i32 3
  %xpvlenu_len863 = bitcast %union.anon.26* %xpv_len_u862 to i64*
  store i64 %540, i64* %xpvlenu_len863, align 8
  br label %do.end865

do.end865:                                        ; preds = %do.body857
  %544 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags866 = getelementptr inbounds %struct.sv, %struct.sv* %544, i32 0, i32 2
  %545 = load i32, i32* %sv_flags866, align 4
  %and867 = and i32 %545, 536870912
  %546 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags868 = getelementptr inbounds %struct.sv, %struct.sv* %546, i32 0, i32 2
  %547 = load i32, i32* %sv_flags868, align 4
  %or869 = or i32 %547, %and867
  store i32 %or869, i32* %sv_flags868, align 4
  br label %do.body870

do.body870:                                       ; preds = %do.end865
  %548 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_u871 = getelementptr inbounds %struct.sv, %struct.sv* %548, i32 0, i32 3
  %svu_pv872 = bitcast %union.anon* %sv_u871 to i8**
  store i8* null, i8** %svu_pv872, align 8
  br label %do.end874

do.end874:                                        ; preds = %do.body870
  %549 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %549, %struct.sv*** %sp, align 8
  %call875 = call %struct.sv* @Perl_sv_newmortal()
  %550 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr876 = getelementptr inbounds %struct.sv*, %struct.sv** %550, i32 1
  store %struct.sv** %incdec.ptr876, %struct.sv*** %sp, align 8
  store %struct.sv* %call875, %struct.sv** %incdec.ptr876, align 8
  %551 = load i64, i64* %iters, align 8
  call void @Perl_sv_setiv(%struct.sv* %call875, i64 %551)
  br label %if.end877

if.end877:                                        ; preds = %do.end874, %if.then784
  br label %if.end878

if.end878:                                        ; preds = %if.end877, %if.end529
  %552 = load %struct.pmop*, %struct.pmop** %rpm, align 8
  %op_pmflags879 = getelementptr inbounds %struct.pmop, %struct.pmop* %552, i32 0, i32 10
  %553 = load i32, i32* %op_pmflags879, align 8
  %and880 = and i32 %553, 134217728
  %tobool881 = icmp ne i32 %and880, 0
  br i1 %tobool881, label %if.end887, label %if.then882

if.then882:                                       ; preds = %if.end878
  %554 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags883 = getelementptr inbounds %struct.sv, %struct.sv* %554, i32 0, i32 2
  %555 = load i32, i32* %sv_flags883, align 4
  %and884 = and i32 %555, 2147418367
  store i32 %and884, i32* %sv_flags883, align 4
  %556 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags885 = getelementptr inbounds %struct.sv, %struct.sv* %556, i32 0, i32 2
  %557 = load i32, i32* %sv_flags885, align 4
  %or886 = or i32 %557, 17408
  store i32 %or886, i32* %sv_flags885, align 4
  br label %if.end887

if.end887:                                        ; preds = %if.then882, %if.end878
  %558 = load i8, i8* @PL_tainting, align 1
  %tobool888 = trunc i8 %558 to i1
  br i1 %tobool888, label %if.then889, label %if.end961

if.then889:                                       ; preds = %if.end887
  %559 = load i8, i8* %rxtainted, align 1
  %conv890 = zext i8 %559 to i32
  %and891 = and i32 %conv890, 2
  %tobool892 = icmp ne i32 %and891, 0
  br i1 %tobool892, label %if.then898, label %lor.lhs.false893

lor.lhs.false893:                                 ; preds = %if.then889
  %560 = load i8, i8* %rxtainted, align 1
  %conv894 = zext i8 %560 to i32
  %and895 = and i32 %conv894, 9
  %cmp896 = icmp eq i32 %and895, 9
  br i1 %cmp896, label %if.then898, label %if.end902

if.then898:                                       ; preds = %lor.lhs.false893, %if.then889
  %561 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call899 = call %struct.regexp* @S_ReANY(%struct.p5rx* %561)
  %extflags900 = getelementptr inbounds %struct.regexp, %struct.regexp* %call899, i32 0, i32 7
  %562 = load i32, i32* %extflags900, align 8
  %or901 = or i32 %562, 67108864
  store i32 %or901, i32* %extflags900, align 8
  br label %if.end902

if.end902:                                        ; preds = %if.then898, %lor.lhs.false893
  %563 = load i8, i8* %rxtainted, align 1
  %conv903 = zext i8 %563 to i32
  %and904 = and i32 %conv903, 16
  %tobool905 = icmp ne i32 %and904, 0
  br i1 %tobool905, label %if.else920, label %land.lhs.true906

land.lhs.true906:                                 ; preds = %if.end902
  %564 = load i8, i8* %rxtainted, align 1
  %conv907 = zext i8 %564 to i32
  %and908 = and i32 %conv907, 3
  %tobool909 = icmp ne i32 %and908, 0
  br i1 %tobool909, label %if.then910, label %if.else920

if.then910:                                       ; preds = %land.lhs.true906
  br label %do.body911

do.body911:                                       ; preds = %if.then910
  %565 = load i8, i8* @PL_tainting, align 1
  %tobool912 = trunc i8 %565 to i1
  br i1 %tobool912, label %cond.true914, label %cond.false915

cond.true914:                                     ; preds = %do.body911
  br i1 true, label %if.then916, label %if.end917

cond.false915:                                    ; preds = %do.body911
  br i1 false, label %if.then916, label %if.end917

if.then916:                                       ; preds = %cond.false915, %cond.true914
  %566 = load %struct.sv**, %struct.sv*** %sp, align 8
  %567 = load %struct.sv*, %struct.sv** %566, align 8
  call void @Perl_sv_magic(%struct.sv* %567, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end917

if.end917:                                        ; preds = %if.then916, %cond.false915, %cond.true914
  br label %do.end919

do.end919:                                        ; preds = %if.end917
  br label %if.end930

if.else920:                                       ; preds = %land.lhs.true906, %if.end902
  br label %do.body921

do.body921:                                       ; preds = %if.else920
  %568 = load i8, i8* @PL_tainting, align 1
  %tobool922 = trunc i8 %568 to i1
  br i1 %tobool922, label %cond.true924, label %cond.false925

cond.true924:                                     ; preds = %do.body921
  br i1 true, label %if.then926, label %if.end927

cond.false925:                                    ; preds = %do.body921
  br i1 false, label %if.then926, label %if.end927

if.then926:                                       ; preds = %cond.false925, %cond.true924
  %569 = load %struct.sv**, %struct.sv*** %sp, align 8
  %570 = load %struct.sv*, %struct.sv** %569, align 8
  call void @Perl_sv_untaint(%struct.sv* %570)
  br label %if.end927

if.end927:                                        ; preds = %if.then926, %cond.false925, %cond.true924
  br label %do.end929

do.end929:                                        ; preds = %if.end927
  br label %if.end930

if.end930:                                        ; preds = %do.end929, %do.end919
  %571 = load i8, i8* %rxtainted, align 1
  %conv931 = zext i8 %571 to i32
  %and932 = and i32 %conv931, 7
  %tobool933 = icmp ne i32 %and932, 0
  %572 = zext i1 %tobool933 to i64
  %cond934 = select i1 %tobool933, i32 1, i32 0
  %tobool935 = icmp ne i32 %cond934, 0
  %frombool936 = zext i1 %tobool935 to i8
  store i8 %frombool936, i8* @PL_tainted, align 1
  br label %do.body937

do.body937:                                       ; preds = %if.end930
  %573 = load i8, i8* @PL_tainting, align 1
  %tobool938 = trunc i8 %573 to i1
  br i1 %tobool938, label %cond.true940, label %cond.false941

cond.true940:                                     ; preds = %do.body937
  br i1 true, label %if.then942, label %if.end958

cond.false941:                                    ; preds = %do.body937
  br i1 false, label %if.then942, label %if.end958

if.then942:                                       ; preds = %cond.false941, %cond.true940
  %574 = load i8, i8* @PL_tainted, align 1
  %tobool943 = trunc i8 %574 to i1
  br i1 %tobool943, label %cond.true945, label %cond.false946

cond.true945:                                     ; preds = %if.then942
  br i1 true, label %if.then947, label %if.end957

cond.false946:                                    ; preds = %if.then942
  br i1 false, label %if.then947, label %if.end957

if.then947:                                       ; preds = %cond.false946, %cond.true945
  br label %do.body948

do.body948:                                       ; preds = %if.then947
  %575 = load i8, i8* @PL_tainting, align 1
  %tobool949 = trunc i8 %575 to i1
  br i1 %tobool949, label %cond.true951, label %cond.false952

cond.true951:                                     ; preds = %do.body948
  br i1 true, label %if.then953, label %if.end954

cond.false952:                                    ; preds = %do.body948
  br i1 false, label %if.then953, label %if.end954

if.then953:                                       ; preds = %cond.false952, %cond.true951
  %576 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_magic(%struct.sv* %576, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end954

if.end954:                                        ; preds = %if.then953, %cond.false952, %cond.true951
  br label %do.end956

do.end956:                                        ; preds = %if.end954
  br label %if.end957

if.end957:                                        ; preds = %do.end956, %cond.false946, %cond.true945
  br label %if.end958

if.end958:                                        ; preds = %if.end957, %cond.false941, %cond.true940
  br label %do.end960

do.end960:                                        ; preds = %if.end958
  br label %if.end961

if.end961:                                        ; preds = %do.end960, %if.end887
  br label %do.body962

do.body962:                                       ; preds = %if.end961
  %577 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags963 = getelementptr inbounds %struct.sv, %struct.sv* %577, i32 0, i32 2
  %578 = load i32, i32* %sv_flags963, align 4
  %and964 = and i32 %578, 4194304
  %tobool965 = icmp ne i32 %and964, 0
  br i1 %tobool965, label %cond.true966, label %cond.false967

cond.true966:                                     ; preds = %do.body962
  br i1 true, label %if.then968, label %if.end970

cond.false967:                                    ; preds = %do.body962
  br i1 false, label %if.then968, label %if.end970

if.then968:                                       ; preds = %cond.false967, %cond.true966
  %579 = load %struct.sv*, %struct.sv** %targ, align 8
  %call969 = call i32 @Perl_mg_set(%struct.sv* %579)
  br label %if.end970

if.end970:                                        ; preds = %if.then968, %cond.false967, %cond.true966
  br label %do.end972

do.end972:                                        ; preds = %if.end970
  store i8 0, i8* @PL_tainted, align 1
  br label %do.body973

do.body973:                                       ; preds = %do.end972
  %580 = load i32, i32* @PL_savestack_ix, align 4
  %581 = load i32, i32* %oldsave, align 4
  %cmp974 = icmp sgt i32 %580, %581
  br i1 %cmp974, label %if.then976, label %if.end977

if.then976:                                       ; preds = %do.body973
  %582 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %582)
  br label %if.end977

if.end977:                                        ; preds = %if.then976, %do.body973
  br label %do.end979

do.end979:                                        ; preds = %if.end977
  %583 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %583, %struct.sv*** @PL_stack_sp, align 8
  %584 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next980 = getelementptr inbounds %struct.op, %struct.op* %584, i32 0, i32 0
  %585 = load %struct.op*, %struct.op** %op_next980, align 8
  store %struct.op* %585, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end979, %if.then643, %cond.end596, %if.then449, %do.end201, %if.then153
  %586 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %586
}

declare dso_local %struct.sv* @Perl__get_encoding() #1

declare dso_local i8* @Perl_sv_recode_to_utf8(%struct.sv*, %struct.sv*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local void @Perl_sv_chop(%struct.sv*, i8*) #1

declare dso_local i32 @Perl_cxinc() #1

declare dso_local void @Perl_rxres_save(i8**, %struct.p5rx*) #1

declare dso_local void @Perl_sv_catsv_flags(%struct.sv*, %struct.sv*, i32) #1

declare dso_local void @Perl_safesysfree(i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_grepwhile() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %items = alloca i32, align 4
  %gimme = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %targ = alloca %struct.sv*, align 8
  %src = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** @PL_Sv, align 8
  %3 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool = icmp ne %struct.sv* %3, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %land.rhs, label %land.end74

cond.false:                                       ; preds = %entry
  br i1 false, label %land.rhs, label %land.end74

land.rhs:                                         ; preds = %cond.false, %cond.true
  %4 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 2097152
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %land.rhs
  br i1 true, label %cond.true4, label %cond.false5

cond.false3:                                      ; preds = %land.rhs
  br i1 false, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %cond.false3, %cond.true2
  %6 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %6, i32 2)
  %conv = zext i1 %call to i32
  br label %cond.end71

cond.false5:                                      ; preds = %cond.false3, %cond.true2
  %7 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %8, 65280
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.false18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false5
  %9 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %10, 255
  %cmp = icmp eq i32 %and10, 8
  br i1 %cmp, label %cond.false18, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %11 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %12, 16826623
  %cmp15 = icmp eq i32 %and14, 16777226
  br i1 %cmp15, label %cond.false18, label %cond.true17

cond.true17:                                      ; preds = %lor.lhs.false12
  br label %cond.end69

cond.false18:                                     ; preds = %lor.lhs.false12, %lor.lhs.false, %cond.false5
  %13 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %14, 1024
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.true22, label %cond.false36

cond.true22:                                      ; preds = %cond.false18
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %tobool23 = icmp ne %struct.xpv* %17, null
  br i1 %tobool23, label %land.rhs24, label %land.end35

land.rhs24:                                       ; preds = %cond.true22
  %18 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any25 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any25, align 8
  %20 = bitcast i8* %19 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 2
  %21 = load i64, i64* %xpv_cur, align 8
  %cmp26 = icmp ugt i64 %21, 1
  br i1 %cmp26, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs24
  %22 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any28 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any28, align 8
  %24 = bitcast i8* %23 to %struct.xpv*
  %xpv_cur29 = getelementptr inbounds %struct.xpv, %struct.xpv* %24, i32 0, i32 2
  %25 = load i64, i64* %xpv_cur29, align 8
  %tobool30 = icmp ne i64 %25, 0
  br i1 %tobool30, label %land.rhs31, label %land.end

land.rhs31:                                       ; preds = %lor.rhs
  %26 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %27 = load i8*, i8** %svu_pv, align 8
  %28 = load i8, i8* %27, align 1
  %conv32 = sext i8 %28 to i32
  %cmp33 = icmp ne i32 %conv32, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs31, %lor.rhs
  %29 = phi i1 [ false, %lor.rhs ], [ %cmp33, %land.rhs31 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs24
  %30 = phi i1 [ true, %land.rhs24 ], [ %29, %land.end ]
  br label %land.end35

land.end35:                                       ; preds = %lor.end, %cond.true22
  %31 = phi i1 [ false, %cond.true22 ], [ %30, %lor.end ]
  %land.ext = zext i1 %31 to i32
  br label %cond.end67

cond.false36:                                     ; preds = %cond.false18
  %32 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %33, 768
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %cond.true40, label %cond.false64

cond.true40:                                      ; preds = %cond.false36
  %34 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %35, 256
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %land.lhs.true, label %lor.rhs47

land.lhs.true:                                    ; preds = %cond.true40
  %36 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any44 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 0
  %37 = load i8*, i8** %sv_any44, align 8
  %38 = bitcast i8* %37 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %38, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %39 = load i64, i64* %xivu_iv, align 8
  %cmp45 = icmp ne i64 %39, 0
  br i1 %cmp45, label %lor.end63, label %lor.rhs47

lor.rhs47:                                        ; preds = %land.lhs.true, %cond.true40
  %40 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %41, 512
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %land.rhs51, label %land.end61

land.rhs51:                                       ; preds = %lor.rhs47
  %42 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any52, align 8
  %44 = bitcast i8* %43 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %44, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %45 = load double, double* %xnv_nv, align 8
  %cmp53 = fcmp uno double %45, %45
  br i1 %cmp53, label %lor.end60, label %lor.rhs54

lor.rhs54:                                        ; preds = %land.rhs51
  %46 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any55 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any55, align 8
  %48 = bitcast i8* %47 to %struct.xpvnv*
  %xnv_u56 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %48, i32 0, i32 5
  %xnv_nv57 = bitcast %union._xnvu* %xnv_u56 to double*
  %49 = load double, double* %xnv_nv57, align 8
  %cmp58 = fcmp une double %49, 0.000000e+00
  br label %lor.end60

lor.end60:                                        ; preds = %lor.rhs54, %land.rhs51
  %50 = phi i1 [ true, %land.rhs51 ], [ %cmp58, %lor.rhs54 ]
  br label %land.end61

land.end61:                                       ; preds = %lor.end60, %lor.rhs47
  %51 = phi i1 [ false, %lor.rhs47 ], [ %50, %lor.end60 ]
  br label %lor.end63

lor.end63:                                        ; preds = %land.end61, %land.lhs.true
  %52 = phi i1 [ true, %land.lhs.true ], [ %51, %land.end61 ]
  %lor.ext = zext i1 %52 to i32
  br label %cond.end

cond.false64:                                     ; preds = %cond.false36
  %53 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call65 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %53, i32 0)
  %conv66 = zext i1 %call65 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false64, %lor.end63
  %cond = phi i32 [ %lor.ext, %lor.end63 ], [ %conv66, %cond.false64 ]
  br label %cond.end67

cond.end67:                                       ; preds = %cond.end, %land.end35
  %cond68 = phi i32 [ %land.ext, %land.end35 ], [ %cond, %cond.end ]
  br label %cond.end69

cond.end69:                                       ; preds = %cond.end67, %cond.true17
  %cond70 = phi i32 [ 0, %cond.true17 ], [ %cond68, %cond.end67 ]
  br label %cond.end71

cond.end71:                                       ; preds = %cond.end69, %cond.true4
  %cond72 = phi i32 [ %conv, %cond.true4 ], [ %cond70, %cond.end69 ]
  %tobool73 = icmp ne i32 %cond72, 0
  br label %land.end74

land.end74:                                       ; preds = %cond.end71, %cond.false, %cond.true
  %54 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool73, %cond.end71 ]
  br i1 %54, label %if.then, label %if.end

if.then:                                          ; preds = %land.end74
  %55 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %56 = load i32*, i32** @PL_markstack_ptr, align 8
  %57 = load i32, i32* %56, align 4
  %idxprom = sext i32 %57 to i64
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %55, i64 %idxprom
  %58 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %59 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %60 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx76 = getelementptr inbounds i32, i32* %60, i64 -1
  %61 = load i32, i32* %arrayidx76, align 4
  %inc = add nsw i32 %61, 1
  store i32 %inc, i32* %arrayidx76, align 4
  %idxprom77 = sext i32 %61 to i64
  %arrayidx78 = getelementptr inbounds %struct.sv*, %struct.sv** %59, i64 %idxprom77
  store %struct.sv* %58, %struct.sv** %arrayidx78, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end74
  %62 = load i32*, i32** @PL_markstack_ptr, align 8
  %63 = load i32, i32* %62, align 4
  %inc79 = add nsw i32 %63, 1
  store i32 %inc79, i32* %62, align 4
  %64 = load i64, i64* @PL_tmps_ix, align 8
  %65 = load i64, i64* @PL_tmps_floor, align 8
  %cmp80 = icmp sgt i64 %64, %65
  br i1 %cmp80, label %if.then82, label %if.end83

if.then82:                                        ; preds = %if.end
  call void @Perl_free_tmps()
  br label %if.end83

if.end83:                                         ; preds = %if.then82, %if.end
  call void @Perl_pop_scope()
  %66 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %67 = load i32*, i32** @PL_markstack_ptr, align 8
  %68 = load i32, i32* %67, align 4
  %idx.ext = sext i32 %68 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %66, i64 %idx.ext
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp84 = icmp ugt %struct.sv** %add.ptr, %69
  br i1 %cmp84, label %cond.true86, label %cond.false87

cond.true86:                                      ; preds = %if.end83
  br i1 true, label %if.then88, label %if.else151

cond.false87:                                     ; preds = %if.end83
  br i1 false, label %if.then88, label %if.else151

if.then88:                                        ; preds = %cond.false87, %cond.true86
  %70 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %70, i32 0, i32 5
  %71 = load i8, i8* %op_flags, align 2
  %conv89 = zext i8 %71 to i32
  %and90 = and i32 %conv89, 3
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %cond.true92, label %cond.false96

cond.true92:                                      ; preds = %if.then88
  %72 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags93 = getelementptr inbounds %struct.op, %struct.op* %72, i32 0, i32 5
  %73 = load i8, i8* %op_flags93, align 2
  %conv94 = zext i8 %73 to i32
  %and95 = and i32 %conv94, 3
  br label %cond.end98

cond.false96:                                     ; preds = %if.then88
  %call97 = call i32 @Perl_block_gimme()
  br label %cond.end98

cond.end98:                                       ; preds = %cond.false96, %cond.true92
  %cond99 = phi i32 [ %and95, %cond.true92 ], [ %call97, %cond.false96 ]
  store i32 %cond99, i32* %gimme, align 4
  call void @Perl_pop_scope()
  %74 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr100 = getelementptr inbounds i32, i32* %74, i32 -1
  store i32* %incdec.ptr100, i32** @PL_markstack_ptr, align 8
  %75 = load i32, i32* %74, align 4
  %76 = load i32*, i32** @PL_markstack_ptr, align 8
  %77 = load i32, i32* %76, align 4
  %dec = add nsw i32 %77, -1
  store i32 %dec, i32* %76, align 4
  %78 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx101 = getelementptr inbounds i32, i32* %78, i64 -1
  %79 = load i32, i32* %arrayidx101, align 4
  %sub = sub nsw i32 %dec, %79
  store i32 %sub, i32* %items, align 4
  %80 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr102 = getelementptr inbounds i32, i32* %80, i32 -1
  store i32* %incdec.ptr102, i32** @PL_markstack_ptr, align 8
  %81 = load i32, i32* %80, align 4
  %82 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %83 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr103 = getelementptr inbounds i32, i32* %83, i32 -1
  store i32* %incdec.ptr103, i32** @PL_markstack_ptr, align 8
  %84 = load i32, i32* %83, align 4
  %idx.ext104 = sext i32 %84 to i64
  %add.ptr105 = getelementptr inbounds %struct.sv*, %struct.sv** %82, i64 %idx.ext104
  store %struct.sv** %add.ptr105, %struct.sv*** %sp, align 8
  %85 = load i32, i32* %gimme, align 4
  %cmp106 = icmp eq i32 %85, 2
  br i1 %cmp106, label %if.then108, label %if.else143

if.then108:                                       ; preds = %cond.end98
  %86 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %86, i32 0, i32 6
  %87 = load i8, i8* %op_private, align 1
  %conv109 = zext i8 %87 to i32
  %and110 = and i32 %conv109, 2
  %tobool111 = icmp ne i32 %and110, 0
  br i1 %tobool111, label %if.then112, label %if.else

if.then112:                                       ; preds = %if.then108
  %call113 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call113, %struct.sv** %sv, align 8
  %88 = load %struct.sv*, %struct.sv** %sv, align 8
  %89 = load i32, i32* %items, align 4
  %conv114 = sext i32 %89 to i64
  call void @Perl_sv_setiv(%struct.sv* %88, i64 %conv114)
  %90 = load %struct.sv*, %struct.sv** %sv, align 8
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr115 = getelementptr inbounds %struct.sv*, %struct.sv** %91, i32 1
  store %struct.sv** %incdec.ptr115, %struct.sv*** %sp, align 8
  store %struct.sv* %90, %struct.sv** %incdec.ptr115, align 8
  br label %if.end142

if.else:                                          ; preds = %if.then108
  %92 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %93 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 3
  %94 = load i64, i64* %op_targ, align 8
  %arrayidx116 = getelementptr inbounds %struct.sv*, %struct.sv** %92, i64 %94
  %95 = load %struct.sv*, %struct.sv** %arrayidx116, align 8
  store %struct.sv* %95, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %if.else
  %96 = load %struct.sv*, %struct.sv** %targ, align 8
  %97 = load i32, i32* %items, align 4
  %conv117 = sext i32 %97 to i64
  call void @Perl_sv_setiv(%struct.sv* %96, i64 %conv117)
  br label %do.body118

do.body118:                                       ; preds = %do.body
  br label %do.body119

do.body119:                                       ; preds = %do.body118
  %98 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags120 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags120, align 4
  %and121 = and i32 %99, 4194304
  %tobool122 = icmp ne i32 %and121, 0
  br i1 %tobool122, label %cond.true123, label %cond.false124

cond.true123:                                     ; preds = %do.body119
  br i1 true, label %if.then125, label %if.end127

cond.false124:                                    ; preds = %do.body119
  br i1 false, label %if.then125, label %if.end127

if.then125:                                       ; preds = %cond.false124, %cond.true123
  %100 = load %struct.sv*, %struct.sv** %targ, align 8
  %call126 = call i32 @Perl_mg_set(%struct.sv* %100)
  br label %if.end127

if.end127:                                        ; preds = %if.then125, %cond.false124, %cond.true123
  br label %do.end

do.end:                                           ; preds = %if.end127
  br label %do.body128

do.body128:                                       ; preds = %do.end
  br label %do.body129

do.body129:                                       ; preds = %do.body128
  %101 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %102 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %101 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %102 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp130 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp130, label %cond.true132, label %cond.false133

cond.true132:                                     ; preds = %do.body129
  br i1 true, label %if.then134, label %if.end136

cond.false133:                                    ; preds = %do.body129
  br i1 false, label %if.then134, label %if.end136

if.then134:                                       ; preds = %cond.false133, %cond.true132
  %103 = load %struct.sv**, %struct.sv*** %sp, align 8
  %104 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call135 = call %struct.sv** @Perl_stack_grow(%struct.sv** %103, %struct.sv** %104, i64 1)
  store %struct.sv** %call135, %struct.sv*** %sp, align 8
  %105 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end136

if.end136:                                        ; preds = %if.then134, %cond.false133, %cond.true132
  br label %do.end137

do.end137:                                        ; preds = %if.end136
  %106 = load %struct.sv*, %struct.sv** %targ, align 8
  %107 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr138 = getelementptr inbounds %struct.sv*, %struct.sv** %107, i32 1
  store %struct.sv** %incdec.ptr138, %struct.sv*** %sp, align 8
  store %struct.sv* %106, %struct.sv** %incdec.ptr138, align 8
  br label %do.end139

do.end139:                                        ; preds = %do.end137
  br label %do.end140

do.end140:                                        ; preds = %do.end139
  br label %do.end141

do.end141:                                        ; preds = %do.end140
  br label %if.end142

if.end142:                                        ; preds = %do.end141, %if.then112
  br label %if.end150

if.else143:                                       ; preds = %cond.end98
  %108 = load i32, i32* %gimme, align 4
  %cmp144 = icmp eq i32 %108, 3
  br i1 %cmp144, label %if.then146, label %if.end149

if.then146:                                       ; preds = %if.else143
  %109 = load i32, i32* %items, align 4
  %110 = load %struct.sv**, %struct.sv*** %sp, align 8
  %idx.ext147 = sext i32 %109 to i64
  %add.ptr148 = getelementptr inbounds %struct.sv*, %struct.sv** %110, i64 %idx.ext147
  store %struct.sv** %add.ptr148, %struct.sv*** %sp, align 8
  br label %if.end149

if.end149:                                        ; preds = %if.then146, %if.else143
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %if.end142
  %111 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %111, %struct.sv*** @PL_stack_sp, align 8
  %112 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %112, i32 0, i32 0
  %113 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %113, %struct.op** %retval, align 8
  br label %return

if.else151:                                       ; preds = %cond.false87, %cond.true86
  call void @Perl_push_scope()
  call void @Perl_save_vptr(i8* bitcast (%struct.pmop** @PL_curpm to i8*))
  %114 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %115 = load i32*, i32** @PL_markstack_ptr, align 8
  %116 = load i32, i32* %115, align 4
  %idxprom152 = sext i32 %116 to i64
  %arrayidx153 = getelementptr inbounds %struct.sv*, %struct.sv** %114, i64 %idxprom152
  %117 = load %struct.sv*, %struct.sv** %arrayidx153, align 8
  store %struct.sv* %117, %struct.sv** %src, align 8
  %118 = load %struct.sv*, %struct.sv** %src, align 8
  %sv_flags154 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 2
  %119 = load i32, i32* %sv_flags154, align 4
  %and155 = and i32 %119, 131072
  %tobool156 = icmp ne i32 %and155, 0
  br i1 %tobool156, label %if.then157, label %if.end162

if.then157:                                       ; preds = %if.else151
  %120 = load %struct.sv*, %struct.sv** %src, align 8
  %call158 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %120, i32 1538)
  %121 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %122 = load i32*, i32** @PL_markstack_ptr, align 8
  %123 = load i32, i32* %122, align 4
  %idxprom159 = sext i32 %123 to i64
  %arrayidx160 = getelementptr inbounds %struct.sv*, %struct.sv** %121, i64 %idxprom159
  store %struct.sv* %call158, %struct.sv** %arrayidx160, align 8
  store %struct.sv* %call158, %struct.sv** %src, align 8
  %124 = load i64, i64* @PL_tmps_floor, align 8
  %inc161 = add nsw i64 %124, 1
  store i64 %inc161, i64* @PL_tmps_floor, align 8
  br label %if.end162

if.end162:                                        ; preds = %if.then157, %if.else151
  %125 = load %struct.sv*, %struct.sv** %src, align 8
  %sv_flags163 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 2
  %126 = load i32, i32* %sv_flags163, align 4
  %and164 = and i32 %126, -524289
  store i32 %and164, i32* %sv_flags163, align 4
  %127 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private165 = getelementptr inbounds %struct.op, %struct.op* %127, i32 0, i32 6
  %128 = load i8, i8* %op_private165, align 1
  %conv166 = zext i8 %128 to i32
  %and167 = and i32 %conv166, 2
  %tobool168 = icmp ne i32 %and167, 0
  br i1 %tobool168, label %if.then169, label %if.else172

if.then169:                                       ; preds = %if.end162
  %129 = load %struct.sv*, %struct.sv** %src, align 8
  %130 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %131 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ170 = getelementptr inbounds %struct.op, %struct.op* %131, i32 0, i32 3
  %132 = load i64, i64* %op_targ170, align 8
  %arrayidx171 = getelementptr inbounds %struct.sv*, %struct.sv** %130, i64 %132
  store %struct.sv* %129, %struct.sv** %arrayidx171, align 8
  br label %if.end180

if.else172:                                       ; preds = %if.end162
  %133 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u173 = getelementptr inbounds %struct.gv, %struct.gv* %133, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u173 to %struct.gp**
  %134 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr174 = getelementptr inbounds %struct.gp, %struct.gp* %134, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr174, i32 0, i32 0
  %135 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %136 = bitcast %struct.sv* %135 to i8*
  %137 = bitcast i8* %136 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %137)
  %138 = load %struct.sv*, %struct.sv** %src, align 8
  %139 = bitcast %struct.sv* %138 to i8*
  %140 = bitcast i8* %139 to %struct.sv*
  %call175 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %140)
  %141 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u176 = getelementptr inbounds %struct.gv, %struct.gv* %141, i32 0, i32 3
  %svu_gp177 = bitcast %union.anon.4* %sv_u176 to %struct.gp**
  %142 = load %struct.gp*, %struct.gp** %svu_gp177, align 8
  %add.ptr178 = getelementptr inbounds %struct.gp, %struct.gp* %142, i64 0
  %gp_sv179 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr178, i32 0, i32 0
  store %struct.sv* %call175, %struct.sv** %gp_sv179, align 8
  br label %if.end180

if.end180:                                        ; preds = %if.else172, %if.then169
  %143 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %143, %struct.sv*** @PL_stack_sp, align 8
  %144 = load %struct.op*, %struct.op** @PL_op, align 8
  %145 = bitcast %struct.op* %144 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %145, i32 0, i32 8
  %146 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %146, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end180, %if.end150
  %147 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %147
}

declare dso_local void @Perl_save_vptr(i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_leavesub() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %newsp = alloca %struct.sv**, align 8
  %newpm = alloca %struct.pmop*, align 8
  %gimme = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %sv = alloca %struct.sv*, align 8
  %markoff = alloca i64, align 8
  %olddepth = alloca i32, align 4
  %fill = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %1, i32 0, i32 1
  %2 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 4
  %4 = load i32, i32* %si_cxix, align 8
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %2, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 0
  %cx_subst = bitcast %union.anon.17* %cx_u to %struct.subst*
  %sbu_type = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst, i32 0, i32 0
  %5 = load i8, i8* %sbu_type, align 8
  %conv = zext i8 %5 to i32
  %and = and i32 %conv, 16
  %cmp = icmp eq i32 %and, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.op* null, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack2 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %6, i32 0, i32 1
  %7 = load %struct.context*, %struct.context** %si_cxstack2, align 8
  %8 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix3 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %8, i32 0, i32 4
  %9 = load i32, i32* %si_cxix3, align 8
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %si_cxix3, align 8
  %idxprom4 = sext i32 %9 to i64
  %arrayidx5 = getelementptr inbounds %struct.context, %struct.context* %7, i64 %idxprom4
  store %struct.context* %arrayidx5, %struct.context** %cx, align 8
  %10 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %11 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u6 = getelementptr inbounds %struct.context, %struct.context* %11, i32 0, i32 0
  %cx_blk = bitcast %union.anon.17* %cx_u6 to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 3
  %12 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %12 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %10, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %newsp, align 8
  %13 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u7 = getelementptr inbounds %struct.context, %struct.context* %13, i32 0, i32 0
  %cx_blk8 = bitcast %union.anon.17* %cx_u7 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk8, i32 0, i32 4
  %14 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store %struct.cop* %14, %struct.cop** @PL_curcop, align 8
  %15 = load i32*, i32** @PL_markstack, align 8
  %16 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u9 = getelementptr inbounds %struct.context, %struct.context* %16, i32 0, i32 0
  %cx_blk10 = bitcast %union.anon.17* %cx_u9 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk10, i32 0, i32 5
  %17 = load i32, i32* %blku_oldmarksp, align 8
  %idx.ext11 = sext i32 %17 to i64
  %add.ptr12 = getelementptr inbounds i32, i32* %15, i64 %idx.ext11
  store i32* %add.ptr12, i32** @PL_markstack_ptr, align 8
  %18 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u13 = getelementptr inbounds %struct.context, %struct.context* %18, i32 0, i32 0
  %cx_blk14 = bitcast %union.anon.17* %cx_u13 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk14, i32 0, i32 6
  %19 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %19, i32* @PL_scopestack_ix, align 4
  %20 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u15 = getelementptr inbounds %struct.context, %struct.context* %20, i32 0, i32 0
  %cx_blk16 = bitcast %union.anon.17* %cx_u15 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk16, i32 0, i32 7
  %21 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %21, %struct.pmop** %newpm, align 8
  %22 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u17 = getelementptr inbounds %struct.context, %struct.context* %22, i32 0, i32 0
  %cx_blk18 = bitcast %union.anon.17* %cx_u17 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk18, i32 0, i32 1
  %23 = load i8, i8* %blku_gimme, align 1
  %conv19 = zext i8 %23 to i32
  store i32 %conv19, i32* %gimme, align 4
  %24 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix20 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %24, i32 0, i32 4
  %25 = load i32, i32* %si_cxix20, align 8
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %si_cxix20, align 8
  store i8 0, i8* @PL_tainted, align 1
  %26 = load i32, i32* %gimme, align 4
  %cmp21 = icmp eq i32 %26, 2
  br i1 %cmp21, label %if.then23, label %if.else92

if.then23:                                        ; preds = %if.end
  %27 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr24 = getelementptr inbounds %struct.sv*, %struct.sv** %27, i64 1
  store %struct.sv** %add.ptr24, %struct.sv*** %mark, align 8
  %28 = load %struct.sv**, %struct.sv*** %mark, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp25 = icmp ule %struct.sv** %28, %29
  br i1 %cmp25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then23
  br i1 true, label %if.then27, label %if.else78

cond.false:                                       ; preds = %if.then23
  br i1 false, label %if.then27, label %if.else78

if.then27:                                        ; preds = %cond.false, %cond.true
  %30 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u28 = getelementptr inbounds %struct.context, %struct.context* %30, i32 0, i32 0
  %cx_blk29 = bitcast %union.anon.17* %cx_u28 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk29, i32 0, i32 8
  %blku_sub = bitcast %union.anon.20* %blk_u to %struct.block_sub*
  %cv = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 1
  %31 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool = icmp ne %struct.cv* %31, null
  br i1 %tobool, label %land.lhs.true, label %if.else61

land.lhs.true:                                    ; preds = %if.then27
  %32 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u30 = getelementptr inbounds %struct.context, %struct.context* %32, i32 0, i32 0
  %cx_blk31 = bitcast %union.anon.17* %cx_u30 to %struct.block*
  %blk_u32 = getelementptr inbounds %struct.block, %struct.block* %cx_blk31, i32 0, i32 8
  %blku_sub33 = bitcast %union.anon.20* %blk_u32 to %struct.block_sub*
  %cv34 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub33, i32 0, i32 1
  %33 = load %struct.cv*, %struct.cv** %cv34, align 8
  %call = call i32* @S_CvDEPTHp(%struct.cv* %33)
  %34 = load i32, i32* %call, align 4
  %cmp35 = icmp sgt i32 %34, 1
  br i1 %cmp35, label %if.then37, label %if.else61

if.then37:                                        ; preds = %land.lhs.true
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %36 = load %struct.sv*, %struct.sv** %35, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags, align 4
  %and38 = and i32 %37, 524288
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %land.lhs.true40, label %if.else

land.lhs.true40:                                  ; preds = %if.then37
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %39 = load %struct.sv*, %struct.sv** %38, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 1
  %40 = load i32, i32* %sv_refcnt, align 8
  %cmp41 = icmp eq i32 %40, 1
  br i1 %cmp41, label %land.lhs.true43, label %if.else

land.lhs.true43:                                  ; preds = %land.lhs.true40
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %43, 14680064
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.else, label %if.then47

if.then47:                                        ; preds = %land.lhs.true43
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %45 = load %struct.sv*, %struct.sv** %44, align 8
  %46 = bitcast %struct.sv* %45 to i8*
  %47 = bitcast i8* %46 to %struct.sv*
  %call48 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %47)
  %48 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call48, %struct.sv** %48, align 8
  %49 = load i64, i64* @PL_tmps_ix, align 8
  %50 = load i64, i64* @PL_tmps_floor, align 8
  %cmp49 = icmp sgt i64 %49, %50
  br i1 %cmp49, label %if.then51, label %if.end52

if.then51:                                        ; preds = %if.then47
  call void @Perl_free_tmps()
  br label %if.end52

if.end52:                                         ; preds = %if.then51, %if.then47
  %51 = load %struct.sv**, %struct.sv*** %mark, align 8
  %52 = load %struct.sv*, %struct.sv** %51, align 8
  %call53 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %52)
  br label %if.end60

if.else:                                          ; preds = %land.lhs.true43, %land.lhs.true40, %if.then37
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  %54 = load %struct.sv*, %struct.sv** %53, align 8
  %55 = bitcast %struct.sv* %54 to i8*
  %56 = bitcast i8* %55 to %struct.sv*
  %call54 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %56)
  store %struct.sv* %call54, %struct.sv** %sv, align 8
  %57 = load i64, i64* @PL_tmps_ix, align 8
  %58 = load i64, i64* @PL_tmps_floor, align 8
  %cmp55 = icmp sgt i64 %57, %58
  br i1 %cmp55, label %if.then57, label %if.end58

if.then57:                                        ; preds = %if.else
  call void @Perl_free_tmps()
  br label %if.end58

if.end58:                                         ; preds = %if.then57, %if.else
  %59 = load %struct.sv*, %struct.sv** %sv, align 8
  %call59 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %59, i32 1538)
  %60 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call59, %struct.sv** %60, align 8
  %61 = load %struct.sv*, %struct.sv** %sv, align 8
  %62 = bitcast %struct.sv* %61 to i8*
  %63 = bitcast i8* %62 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %63)
  br label %if.end60

if.end60:                                         ; preds = %if.end58, %if.end52
  br label %if.end77

if.else61:                                        ; preds = %land.lhs.true, %if.then27
  %64 = load %struct.sv**, %struct.sv*** %sp, align 8
  %65 = load %struct.sv*, %struct.sv** %64, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %66, 524288
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %land.lhs.true65, label %if.else74

land.lhs.true65:                                  ; preds = %if.else61
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  %68 = load %struct.sv*, %struct.sv** %67, align 8
  %sv_refcnt66 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 1
  %69 = load i32, i32* %sv_refcnt66, align 8
  %cmp67 = icmp eq i32 %69, 1
  br i1 %cmp67, label %land.lhs.true69, label %if.else74

land.lhs.true69:                                  ; preds = %land.lhs.true65
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  %71 = load %struct.sv*, %struct.sv** %70, align 8
  %sv_flags70 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags70, align 4
  %and71 = and i32 %72, 14680064
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %if.else74, label %if.then73

if.then73:                                        ; preds = %land.lhs.true69
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  %74 = load %struct.sv*, %struct.sv** %73, align 8
  %75 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %74, %struct.sv** %75, align 8
  br label %if.end76

if.else74:                                        ; preds = %land.lhs.true69, %land.lhs.true65, %if.else61
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  %77 = load %struct.sv*, %struct.sv** %76, align 8
  %call75 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %77, i32 1538)
  %78 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call75, %struct.sv** %78, align 8
  br label %if.end76

if.end76:                                         ; preds = %if.else74, %if.then73
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.end60
  br label %if.end91

if.else78:                                        ; preds = %cond.false, %cond.true
  br label %do.body

do.body:                                          ; preds = %if.else78
  %79 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %80 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %79 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %80 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp79 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp79, label %cond.true81, label %cond.false82

cond.true81:                                      ; preds = %do.body
  br i1 true, label %if.then83, label %if.end90

cond.false82:                                     ; preds = %do.body
  br i1 false, label %if.then83, label %if.end90

if.then83:                                        ; preds = %cond.false82, %cond.true81
  %81 = load %struct.sv**, %struct.sv*** %mark, align 8
  %82 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast84 = ptrtoint %struct.sv** %81 to i64
  %sub.ptr.rhs.cast85 = ptrtoint %struct.sv** %82 to i64
  %sub.ptr.sub86 = sub i64 %sub.ptr.lhs.cast84, %sub.ptr.rhs.cast85
  %sub.ptr.div87 = sdiv exact i64 %sub.ptr.sub86, 8
  store i64 %sub.ptr.div87, i64* %markoff, align 8
  %83 = load %struct.sv**, %struct.sv*** %sp, align 8
  %84 = load %struct.sv**, %struct.sv*** %mark, align 8
  %call88 = call %struct.sv** @Perl_stack_grow(%struct.sv** %83, %struct.sv** %84, i64 0)
  store %struct.sv** %call88, %struct.sv*** %sp, align 8
  %85 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %86 = load i64, i64* %markoff, align 8
  %add.ptr89 = getelementptr inbounds %struct.sv*, %struct.sv** %85, i64 %86
  store %struct.sv** %add.ptr89, %struct.sv*** %mark, align 8
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end90

if.end90:                                         ; preds = %if.then83, %cond.false82, %cond.true81
  br label %do.end

do.end:                                           ; preds = %if.end90
  %88 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %88, align 8
  br label %if.end91

if.end91:                                         ; preds = %do.end, %if.end77
  %89 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %89, %struct.sv*** %sp, align 8
  br label %if.end113

if.else92:                                        ; preds = %if.end
  %90 = load i32, i32* %gimme, align 4
  %cmp93 = icmp eq i32 %90, 3
  br i1 %cmp93, label %if.then95, label %if.end112

if.then95:                                        ; preds = %if.else92
  %91 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr96 = getelementptr inbounds %struct.sv*, %struct.sv** %91, i64 1
  store %struct.sv** %add.ptr96, %struct.sv*** %mark, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then95
  %92 = load %struct.sv**, %struct.sv*** %mark, align 8
  %93 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp97 = icmp ule %struct.sv** %92, %93
  br i1 %cmp97, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %94 = load %struct.sv**, %struct.sv*** %mark, align 8
  %95 = load %struct.sv*, %struct.sv** %94, align 8
  %sv_flags99 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags99, align 4
  %and100 = and i32 %96, 524288
  %tobool101 = icmp ne i32 %and100, 0
  br i1 %tobool101, label %lor.lhs.false, label %if.then109

lor.lhs.false:                                    ; preds = %for.body
  %97 = load %struct.sv**, %struct.sv*** %mark, align 8
  %98 = load %struct.sv*, %struct.sv** %97, align 8
  %sv_refcnt102 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 1
  %99 = load i32, i32* %sv_refcnt102, align 8
  %cmp103 = icmp ne i32 %99, 1
  br i1 %cmp103, label %if.then109, label %lor.lhs.false105

lor.lhs.false105:                                 ; preds = %lor.lhs.false
  %100 = load %struct.sv**, %struct.sv*** %mark, align 8
  %101 = load %struct.sv*, %struct.sv** %100, align 8
  %sv_flags106 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 2
  %102 = load i32, i32* %sv_flags106, align 4
  %and107 = and i32 %102, 14680064
  %tobool108 = icmp ne i32 %and107, 0
  br i1 %tobool108, label %if.then109, label %if.end111

if.then109:                                       ; preds = %lor.lhs.false105, %lor.lhs.false, %for.body
  %103 = load %struct.sv**, %struct.sv*** %mark, align 8
  %104 = load %struct.sv*, %struct.sv** %103, align 8
  %call110 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %104, i32 1538)
  %105 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call110, %struct.sv** %105, align 8
  store i8 0, i8* @PL_tainted, align 1
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %lor.lhs.false105
  br label %for.inc

for.inc:                                          ; preds = %if.end111
  %106 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %106, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %mark, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end112

if.end112:                                        ; preds = %for.end, %if.else92
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.end91
  %107 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %107, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_pop_scope()
  br label %do.body114

do.body114:                                       ; preds = %if.end113
  %108 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u115 = getelementptr inbounds %struct.context, %struct.context* %108, i32 0, i32 0
  %cx_blk116 = bitcast %union.anon.17* %cx_u115 to %struct.block*
  %blk_u117 = getelementptr inbounds %struct.block, %struct.block* %cx_blk116, i32 0, i32 8
  %blku_sub118 = bitcast %union.anon.20* %blk_u117 to %struct.block_sub*
  %olddepth119 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub118, i32 0, i32 4
  %109 = load i32, i32* %olddepth119, align 8
  store i32 %109, i32* %olddepth, align 4
  %110 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u120 = getelementptr inbounds %struct.context, %struct.context* %110, i32 0, i32 0
  %cx_blk121 = bitcast %union.anon.17* %cx_u120 to %struct.block*
  %blku_u16 = getelementptr inbounds %struct.block, %struct.block* %cx_blk121, i32 0, i32 2
  %111 = load i16, i16* %blku_u16, align 2
  %conv122 = zext i16 %111 to i32
  %and123 = and i32 %conv122, 256
  %tobool124 = icmp ne i32 %and123, 0
  br i1 %tobool124, label %if.end253, label %if.then125

if.then125:                                       ; preds = %do.body114
  %112 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u126 = getelementptr inbounds %struct.context, %struct.context* %112, i32 0, i32 0
  %cx_blk127 = bitcast %union.anon.17* %cx_u126 to %struct.block*
  %blku_u16128 = getelementptr inbounds %struct.block, %struct.block* %cx_blk127, i32 0, i32 2
  %113 = load i16, i16* %blku_u16128, align 2
  %conv129 = zext i16 %113 to i32
  %or = or i32 %conv129, 256
  %conv130 = trunc i32 %or to i16
  store i16 %conv130, i16* %blku_u16128, align 2
  %114 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u131 = getelementptr inbounds %struct.context, %struct.context* %114, i32 0, i32 0
  %cx_subst132 = bitcast %union.anon.17* %cx_u131 to %struct.subst*
  %sbu_type133 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst132, i32 0, i32 0
  %115 = load i8, i8* %sbu_type133, align 8
  %conv134 = zext i8 %115 to i32
  %and135 = and i32 %conv134, 32
  %cmp136 = icmp eq i32 %and135, 32
  br i1 %cmp136, label %if.then138, label %if.end252

if.then138:                                       ; preds = %if.then125
  br label %do.body139

do.body139:                                       ; preds = %if.then138
  %116 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %116, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %117 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr140 = getelementptr inbounds %struct.gp, %struct.gp* %117, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr140, i32 0, i32 6
  %118 = load %struct.av*, %struct.av** %gp_av, align 8
  %119 = bitcast %struct.av* %118 to i8*
  %120 = bitcast i8* %119 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %120)
  %121 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u141 = getelementptr inbounds %struct.context, %struct.context* %121, i32 0, i32 0
  %cx_blk142 = bitcast %union.anon.17* %cx_u141 to %struct.block*
  %blk_u143 = getelementptr inbounds %struct.block, %struct.block* %cx_blk142, i32 0, i32 8
  %blku_sub144 = bitcast %union.anon.20* %blk_u143 to %struct.block_sub*
  %savearray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub144, i32 0, i32 2
  %122 = load %struct.av*, %struct.av** %savearray, align 8
  %123 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u145 = getelementptr inbounds %struct.gv, %struct.gv* %123, i32 0, i32 3
  %svu_gp146 = bitcast %union.anon.4* %sv_u145 to %struct.gp**
  %124 = load %struct.gp*, %struct.gp** %svu_gp146, align 8
  %add.ptr147 = getelementptr inbounds %struct.gp, %struct.gp* %124, i64 0
  %gp_av148 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr147, i32 0, i32 6
  store %struct.av* %122, %struct.av** %gp_av148, align 8
  br label %do.end149

do.end149:                                        ; preds = %do.body139
  %125 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u150 = getelementptr inbounds %struct.context, %struct.context* %125, i32 0, i32 0
  %cx_blk151 = bitcast %union.anon.17* %cx_u150 to %struct.block*
  %blk_u152 = getelementptr inbounds %struct.block, %struct.block* %cx_blk151, i32 0, i32 8
  %blku_sub153 = bitcast %union.anon.20* %blk_u152 to %struct.block_sub*
  %argarray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub153, i32 0, i32 3
  %126 = load %struct.av*, %struct.av** %argarray, align 8
  %sv_flags154 = getelementptr inbounds %struct.av, %struct.av* %126, i32 0, i32 2
  %127 = load i32, i32* %sv_flags154, align 4
  %and155 = and i32 %127, 1073741824
  %tobool156 = icmp ne i32 %and155, 0
  br i1 %tobool156, label %if.then157, label %if.else204

if.then157:                                       ; preds = %do.end149
  %128 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u158 = getelementptr inbounds %struct.context, %struct.context* %128, i32 0, i32 0
  %cx_blk159 = bitcast %union.anon.17* %cx_u158 to %struct.block*
  %blk_u160 = getelementptr inbounds %struct.block, %struct.block* %cx_blk159, i32 0, i32 8
  %blku_sub161 = bitcast %union.anon.20* %blk_u160 to %struct.block_sub*
  %argarray162 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub161, i32 0, i32 3
  %129 = load %struct.av*, %struct.av** %argarray162, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %129, i32 0, i32 0
  %130 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %130, i32 0, i32 2
  %131 = load i64, i64* %xav_fill, align 8
  store i64 %131, i64* %fill, align 8
  %132 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u163 = getelementptr inbounds %struct.context, %struct.context* %132, i32 0, i32 0
  %cx_blk164 = bitcast %union.anon.17* %cx_u163 to %struct.block*
  %blk_u165 = getelementptr inbounds %struct.block, %struct.block* %cx_blk164, i32 0, i32 8
  %blku_sub166 = bitcast %union.anon.20* %blk_u165 to %struct.block_sub*
  %argarray167 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub166, i32 0, i32 3
  %133 = load %struct.av*, %struct.av** %argarray167, align 8
  %134 = bitcast %struct.av* %133 to i8*
  %135 = bitcast i8* %134 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %135)
  %call168 = call %struct.sv* @Perl_newSV_type(i32 11)
  %136 = bitcast %struct.sv* %call168 to i8*
  %137 = bitcast i8* %136 to %struct.av*
  %138 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u169 = getelementptr inbounds %struct.context, %struct.context* %138, i32 0, i32 0
  %cx_blk170 = bitcast %union.anon.17* %cx_u169 to %struct.block*
  %blk_u171 = getelementptr inbounds %struct.block, %struct.block* %cx_blk170, i32 0, i32 8
  %blku_sub172 = bitcast %union.anon.20* %blk_u171 to %struct.block_sub*
  %argarray173 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub172, i32 0, i32 3
  store %struct.av* %137, %struct.av** %argarray173, align 8
  %139 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u174 = getelementptr inbounds %struct.context, %struct.context* %139, i32 0, i32 0
  %cx_blk175 = bitcast %union.anon.17* %cx_u174 to %struct.block*
  %blk_u176 = getelementptr inbounds %struct.block, %struct.block* %cx_blk175, i32 0, i32 8
  %blku_sub177 = bitcast %union.anon.20* %blk_u176 to %struct.block_sub*
  %argarray178 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub177, i32 0, i32 3
  %140 = load %struct.av*, %struct.av** %argarray178, align 8
  %141 = load i64, i64* %fill, align 8
  call void @Perl_av_extend(%struct.av* %140, i64 %141)
  %142 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u179 = getelementptr inbounds %struct.context, %struct.context* %142, i32 0, i32 0
  %cx_blk180 = bitcast %union.anon.17* %cx_u179 to %struct.block*
  %blk_u181 = getelementptr inbounds %struct.block, %struct.block* %cx_blk180, i32 0, i32 8
  %blku_sub182 = bitcast %union.anon.20* %blk_u181 to %struct.block_sub*
  %argarray183 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub182, i32 0, i32 3
  %143 = load %struct.av*, %struct.av** %argarray183, align 8
  %sv_flags184 = getelementptr inbounds %struct.av, %struct.av* %143, i32 0, i32 2
  %144 = load i32, i32* %sv_flags184, align 4
  %and185 = and i32 %144, -1073741825
  store i32 %and185, i32* %sv_flags184, align 4
  %145 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u186 = getelementptr inbounds %struct.context, %struct.context* %145, i32 0, i32 0
  %cx_blk187 = bitcast %union.anon.17* %cx_u186 to %struct.block*
  %blk_u188 = getelementptr inbounds %struct.block, %struct.block* %cx_blk187, i32 0, i32 8
  %blku_sub189 = bitcast %union.anon.20* %blk_u188 to %struct.block_sub*
  %argarray190 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub189, i32 0, i32 3
  %146 = load %struct.av*, %struct.av** %argarray190, align 8
  %sv_flags191 = getelementptr inbounds %struct.av, %struct.av* %146, i32 0, i32 2
  %147 = load i32, i32* %sv_flags191, align 4
  %or192 = or i32 %147, -2147483648
  store i32 %or192, i32* %sv_flags191, align 4
  %148 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u193 = getelementptr inbounds %struct.context, %struct.context* %148, i32 0, i32 0
  %cx_blk194 = bitcast %union.anon.17* %cx_u193 to %struct.block*
  %blk_u195 = getelementptr inbounds %struct.block, %struct.block* %cx_blk194, i32 0, i32 8
  %blku_sub196 = bitcast %union.anon.20* %blk_u195 to %struct.block_sub*
  %argarray197 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub196, i32 0, i32 3
  %149 = load %struct.av*, %struct.av** %argarray197, align 8
  %150 = bitcast %struct.av* %149 to i8*
  %151 = bitcast i8* %150 to %struct.sv*
  %152 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u198 = getelementptr inbounds %struct.context, %struct.context* %152, i32 0, i32 0
  %cx_blk199 = bitcast %union.anon.17* %cx_u198 to %struct.block*
  %blk_u200 = getelementptr inbounds %struct.block, %struct.block* %cx_blk199, i32 0, i32 8
  %blku_sub201 = bitcast %union.anon.20* %blk_u200 to %struct.block_sub*
  %oldcomppad = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub201, i32 0, i32 5
  %153 = load %struct.av*, %struct.av** %oldcomppad, align 8
  %154 = bitcast %struct.av* %153 to i8*
  %155 = bitcast i8* %154 to %struct.av*
  %sv_u202 = getelementptr inbounds %struct.av, %struct.av* %155, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u202 to %struct.sv***
  %156 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %arrayidx203 = getelementptr inbounds %struct.sv*, %struct.sv** %156, i64 0
  store %struct.sv* %151, %struct.sv** %arrayidx203, align 8
  br label %if.end251

if.else204:                                       ; preds = %do.end149
  br label %do.body205

do.body205:                                       ; preds = %if.else204
  %157 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u206 = getelementptr inbounds %struct.context, %struct.context* %157, i32 0, i32 0
  %cx_blk207 = bitcast %union.anon.17* %cx_u206 to %struct.block*
  %blk_u208 = getelementptr inbounds %struct.block, %struct.block* %cx_blk207, i32 0, i32 8
  %blku_sub209 = bitcast %union.anon.20* %blk_u208 to %struct.block_sub*
  %argarray210 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub209, i32 0, i32 3
  %158 = load %struct.av*, %struct.av** %argarray210, align 8
  %sv_u211 = getelementptr inbounds %struct.av, %struct.av* %158, i32 0, i32 3
  %svu_array212 = bitcast %union.anon.0* %sv_u211 to %struct.sv***
  %159 = load %struct.sv**, %struct.sv*** %svu_array212, align 8
  %160 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u213 = getelementptr inbounds %struct.context, %struct.context* %160, i32 0, i32 0
  %cx_blk214 = bitcast %union.anon.17* %cx_u213 to %struct.block*
  %blk_u215 = getelementptr inbounds %struct.block, %struct.block* %cx_blk214, i32 0, i32 8
  %blku_sub216 = bitcast %union.anon.20* %blk_u215 to %struct.block_sub*
  %argarray217 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub216, i32 0, i32 3
  %161 = load %struct.av*, %struct.av** %argarray217, align 8
  %sv_any218 = getelementptr inbounds %struct.av, %struct.av* %161, i32 0, i32 0
  %162 = load %struct.xpvav*, %struct.xpvav** %sv_any218, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %162, i32 0, i32 4
  %163 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  %sub.ptr.lhs.cast219 = ptrtoint %struct.sv** %159 to i64
  %sub.ptr.rhs.cast220 = ptrtoint %struct.sv** %163 to i64
  %sub.ptr.sub221 = sub i64 %sub.ptr.lhs.cast219, %sub.ptr.rhs.cast220
  %sub.ptr.div222 = sdiv exact i64 %sub.ptr.sub221, 8
  %164 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u223 = getelementptr inbounds %struct.context, %struct.context* %164, i32 0, i32 0
  %cx_blk224 = bitcast %union.anon.17* %cx_u223 to %struct.block*
  %blk_u225 = getelementptr inbounds %struct.block, %struct.block* %cx_blk224, i32 0, i32 8
  %blku_sub226 = bitcast %union.anon.20* %blk_u225 to %struct.block_sub*
  %argarray227 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub226, i32 0, i32 3
  %165 = load %struct.av*, %struct.av** %argarray227, align 8
  %sv_any228 = getelementptr inbounds %struct.av, %struct.av* %165, i32 0, i32 0
  %166 = load %struct.xpvav*, %struct.xpvav** %sv_any228, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %166, i32 0, i32 3
  %167 = load i64, i64* %xav_max, align 8
  %add = add nsw i64 %167, %sub.ptr.div222
  store i64 %add, i64* %xav_max, align 8
  %168 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u229 = getelementptr inbounds %struct.context, %struct.context* %168, i32 0, i32 0
  %cx_blk230 = bitcast %union.anon.17* %cx_u229 to %struct.block*
  %blk_u231 = getelementptr inbounds %struct.block, %struct.block* %cx_blk230, i32 0, i32 8
  %blku_sub232 = bitcast %union.anon.20* %blk_u231 to %struct.block_sub*
  %argarray233 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub232, i32 0, i32 3
  %169 = load %struct.av*, %struct.av** %argarray233, align 8
  %sv_any234 = getelementptr inbounds %struct.av, %struct.av* %169, i32 0, i32 0
  %170 = load %struct.xpvav*, %struct.xpvav** %sv_any234, align 8
  %xav_alloc235 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %170, i32 0, i32 4
  %171 = load %struct.sv**, %struct.sv*** %xav_alloc235, align 8
  %172 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u236 = getelementptr inbounds %struct.context, %struct.context* %172, i32 0, i32 0
  %cx_blk237 = bitcast %union.anon.17* %cx_u236 to %struct.block*
  %blk_u238 = getelementptr inbounds %struct.block, %struct.block* %cx_blk237, i32 0, i32 8
  %blku_sub239 = bitcast %union.anon.20* %blk_u238 to %struct.block_sub*
  %argarray240 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub239, i32 0, i32 3
  %173 = load %struct.av*, %struct.av** %argarray240, align 8
  %sv_u241 = getelementptr inbounds %struct.av, %struct.av* %173, i32 0, i32 3
  %svu_array242 = bitcast %union.anon.0* %sv_u241 to %struct.sv***
  store %struct.sv** %171, %struct.sv*** %svu_array242, align 8
  %174 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u243 = getelementptr inbounds %struct.context, %struct.context* %174, i32 0, i32 0
  %cx_blk244 = bitcast %union.anon.17* %cx_u243 to %struct.block*
  %blk_u245 = getelementptr inbounds %struct.block, %struct.block* %cx_blk244, i32 0, i32 8
  %blku_sub246 = bitcast %union.anon.20* %blk_u245 to %struct.block_sub*
  %argarray247 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub246, i32 0, i32 3
  %175 = load %struct.av*, %struct.av** %argarray247, align 8
  %sv_any248 = getelementptr inbounds %struct.av, %struct.av* %175, i32 0, i32 0
  %176 = load %struct.xpvav*, %struct.xpvav** %sv_any248, align 8
  %xav_fill249 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %176, i32 0, i32 2
  store i64 -1, i64* %xav_fill249, align 8
  br label %do.end250

do.end250:                                        ; preds = %do.body205
  br label %if.end251

if.end251:                                        ; preds = %do.end250, %if.then157
  br label %if.end252

if.end252:                                        ; preds = %if.end251, %if.then125
  br label %if.end253

if.end253:                                        ; preds = %if.end252, %do.body114
  %177 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u254 = getelementptr inbounds %struct.context, %struct.context* %177, i32 0, i32 0
  %cx_blk255 = bitcast %union.anon.17* %cx_u254 to %struct.block*
  %blk_u256 = getelementptr inbounds %struct.block, %struct.block* %cx_blk255, i32 0, i32 8
  %blku_sub257 = bitcast %union.anon.20* %blk_u256 to %struct.block_sub*
  %cv258 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub257, i32 0, i32 1
  %178 = load %struct.cv*, %struct.cv** %cv258, align 8
  %179 = bitcast %struct.cv* %178 to i8*
  %180 = bitcast i8* %179 to %struct.sv*
  store %struct.sv* %180, %struct.sv** %sv, align 8
  br label %do.body259

do.body259:                                       ; preds = %if.end253
  %181 = load i32, i32* @PL_savestack_ix, align 4
  %182 = load i32*, i32** @PL_scopestack, align 8
  %183 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u260 = getelementptr inbounds %struct.context, %struct.context* %183, i32 0, i32 0
  %cx_blk261 = bitcast %union.anon.17* %cx_u260 to %struct.block*
  %blku_oldscopesp262 = getelementptr inbounds %struct.block, %struct.block* %cx_blk261, i32 0, i32 6
  %184 = load i32, i32* %blku_oldscopesp262, align 4
  %sub = sub nsw i32 %184, 1
  %idxprom263 = sext i32 %sub to i64
  %arrayidx264 = getelementptr inbounds i32, i32* %182, i64 %idxprom263
  %185 = load i32, i32* %arrayidx264, align 4
  %cmp265 = icmp sgt i32 %181, %185
  br i1 %cmp265, label %if.then267, label %if.end274

if.then267:                                       ; preds = %do.body259
  %186 = load i32*, i32** @PL_scopestack, align 8
  %187 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u268 = getelementptr inbounds %struct.context, %struct.context* %187, i32 0, i32 0
  %cx_blk269 = bitcast %union.anon.17* %cx_u268 to %struct.block*
  %blku_oldscopesp270 = getelementptr inbounds %struct.block, %struct.block* %cx_blk269, i32 0, i32 6
  %188 = load i32, i32* %blku_oldscopesp270, align 4
  %sub271 = sub nsw i32 %188, 1
  %idxprom272 = sext i32 %sub271 to i64
  %arrayidx273 = getelementptr inbounds i32, i32* %186, i64 %idxprom272
  %189 = load i32, i32* %arrayidx273, align 4
  call void @Perl_leave_scope(i32 %189)
  br label %if.end274

if.end274:                                        ; preds = %if.then267, %do.body259
  br label %do.end275

do.end275:                                        ; preds = %if.end274
  %190 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool276 = icmp ne %struct.sv* %190, null
  br i1 %tobool276, label %land.lhs.true277, label %if.end281

land.lhs.true277:                                 ; preds = %do.end275
  %191 = load i32, i32* %olddepth, align 4
  %192 = load %struct.sv*, %struct.sv** %sv, align 8
  %193 = bitcast %struct.sv* %192 to %struct.cv*
  %call278 = call i32* @S_CvDEPTHp(%struct.cv* %193)
  store i32 %191, i32* %call278, align 4
  %tobool279 = icmp ne i32 %191, 0
  br i1 %tobool279, label %if.then280, label %if.end281

if.then280:                                       ; preds = %land.lhs.true277
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end281

if.end281:                                        ; preds = %if.then280, %land.lhs.true277, %do.end275
  br label %do.end282

do.end282:                                        ; preds = %if.end281
  %194 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix283 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %194, i32 0, i32 4
  %195 = load i32, i32* %si_cxix283, align 8
  %dec284 = add nsw i32 %195, -1
  store i32 %dec284, i32* %si_cxix283, align 8
  %196 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %196, %struct.pmop** @PL_curpm, align 8
  br label %do.body285

do.body285:                                       ; preds = %do.end282
  %197 = load %struct.sv*, %struct.sv** %sv, align 8
  %198 = bitcast %struct.sv* %197 to i8*
  %199 = bitcast i8* %198 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %199)
  br label %do.end286

do.end286:                                        ; preds = %do.body285
  %200 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u287 = getelementptr inbounds %struct.context, %struct.context* %200, i32 0, i32 0
  %cx_blk288 = bitcast %union.anon.17* %cx_u287 to %struct.block*
  %blk_u289 = getelementptr inbounds %struct.block, %struct.block* %cx_blk288, i32 0, i32 8
  %blku_sub290 = bitcast %union.anon.20* %blk_u289 to %struct.block_sub*
  %retop = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub290, i32 0, i32 0
  %201 = load %struct.op*, %struct.op** %retop, align 8
  store %struct.op* %201, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end286, %if.then
  %202 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %202
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @S_CvDEPTHp(%struct.cv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.cv*, align 8
  store %struct.cv* %sv, %struct.cv** %sv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1, i32 0, i32 13
  ret i32* %xcv_depth
}

declare dso_local %struct.sv* @Perl_newSV_type(i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_entersub() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %cv = alloca %struct.cv*, align 8
  %cx = alloca %struct.context*, align 8
  %gimme = alloca i32, align 4
  %hasargs = alloca i8, align 1
  %stash = alloca %struct.hv*, align 8
  %sym = alloca i8*, align 8
  %len = alloca i64, align 8
  %autogv = alloca %struct.gv*, align 8
  %sub_name = alloca %struct.sv*, align 8
  %mark = alloca %struct.sv**, align 8
  %padlist = alloca %struct.padlist*, align 8
  %depth = alloca i32, align 4
  %phlags = alloca i8, align 1
  %av = alloca %struct.av*, align 8
  %items = alloca i64, align 8
  %defavp = alloca %struct.av**, align 8
  %ary = alloca %struct.sv**, align 8
  %markix = alloca i64, align 8
  %av597 = alloca %struct.av*, align 8
  %items602 = alloca i64, align 8
  %i = alloca i64, align 8
  %m = alloca i8, align 1
  %sv635 = alloca %struct.sv*, align 8
  %svp = alloca %struct.sv**, align 8
  %mark662 = alloca %struct.sv**, align 8
  %items664 = alloca i64, align 8
  %svp695 = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 64
  %cmp = icmp ne i32 %and, 0
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %hasargs, align 1
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool = icmp ne %struct.sv* %5, null
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i64 0, i64 0))
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.false, %cond.true
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and2 = and i32 %7, 255
  %cmp3 = icmp eq i32 %and2, 9
  br i1 %cmp3, label %land.lhs.true, label %cond.false13

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %9 = bitcast %struct.sv* %8 to %struct.gv*
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %9, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %10 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %10, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 3
  %11 = load i32, i32* %gp_cvgen, align 8
  %tobool5 = icmp ne i32 %11, 0
  br i1 %tobool5, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %land.lhs.true
  br label %cond.end

cond.false7:                                      ; preds = %land.lhs.true
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %13 = bitcast %struct.sv* %12 to %struct.gv*
  %sv_u8 = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 3
  %svu_gp9 = bitcast %union.anon.4* %sv_u8 to %struct.gp**
  %14 = load %struct.gp*, %struct.gp** %svu_gp9, align 8
  %add.ptr10 = getelementptr inbounds %struct.gp, %struct.gp* %14, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr10, i32 0, i32 2
  %15 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false7, %cond.true6
  %cond = phi %struct.cv* [ null, %cond.true6 ], [ %15, %cond.false7 ]
  store %struct.cv* %cond, %struct.cv** %cv, align 8
  %tobool11 = icmp ne %struct.cv* %cond, null
  br i1 %tobool11, label %cond.true12, label %cond.false13

cond.true12:                                      ; preds = %cond.end
  br i1 true, label %if.end144, label %if.then14

cond.false13:                                     ; preds = %cond.end, %if.end
  br i1 false, label %if.end144, label %if.then14

if.then14:                                        ; preds = %cond.false13, %cond.true12
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %17, 255
  switch i32 %and16, label %sw.default [
    i32 9, label %sw.bb
    i32 10, label %sw.bb37
    i32 12, label %sw.bb141
    i32 11, label %sw.bb141
    i32 13, label %sw.bb143
  ]

sw.bb:                                            ; preds = %if.then14
  br label %we_have_a_glob

we_have_a_glob:                                   ; preds = %if.then51, %sw.bb
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %19 = bitcast %struct.sv* %18 to %struct.gv*
  %sv_u17 = getelementptr inbounds %struct.gv, %struct.gv* %19, i32 0, i32 3
  %svu_gp18 = bitcast %union.anon.4* %sv_u17 to %struct.gp**
  %20 = load %struct.gp*, %struct.gp** %svu_gp18, align 8
  %add.ptr19 = getelementptr inbounds %struct.gp, %struct.gp* %20, i64 0
  %gp_cvgen20 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr19, i32 0, i32 3
  %21 = load i32, i32* %gp_cvgen20, align 8
  %tobool21 = icmp ne i32 %21, 0
  br i1 %tobool21, label %cond.true22, label %cond.false23

cond.true22:                                      ; preds = %we_have_a_glob
  br label %cond.end28

cond.false23:                                     ; preds = %we_have_a_glob
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %23 = bitcast %struct.sv* %22 to %struct.gv*
  %sv_u24 = getelementptr inbounds %struct.gv, %struct.gv* %23, i32 0, i32 3
  %svu_gp25 = bitcast %union.anon.4* %sv_u24 to %struct.gp**
  %24 = load %struct.gp*, %struct.gp** %svu_gp25, align 8
  %add.ptr26 = getelementptr inbounds %struct.gp, %struct.gp* %24, i64 0
  %gp_cv27 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr26, i32 0, i32 2
  %25 = load %struct.cv*, %struct.cv** %gp_cv27, align 8
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false23, %cond.true22
  %cond29 = phi %struct.cv* [ null, %cond.true22 ], [ %25, %cond.false23 ]
  store %struct.cv* %cond29, %struct.cv** %cv, align 8
  %tobool30 = icmp ne %struct.cv* %cond29, null
  br i1 %tobool30, label %if.end33, label %if.then31

if.then31:                                        ; preds = %cond.end28
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %call32 = call %struct.cv* @Perl_sv_2cv(%struct.sv* %26, %struct.hv** %stash, %struct.gv** %gv, i32 0)
  store %struct.cv* %call32, %struct.cv** %cv, align 8
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %cond.end28
  %27 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool34 = icmp ne %struct.cv* %27, null
  br i1 %tobool34, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.end33
  call void @Perl_push_scope()
  call void @Perl_save_strlen(i64* @PL_tmps_floor)
  %28 = load i64, i64* @PL_tmps_ix, align 8
  store i64 %28, i64* @PL_tmps_floor, align 8
  br label %try_autoload

if.end36:                                         ; preds = %if.end33
  br label %sw.epilog

sw.bb37:                                          ; preds = %if.then14
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %30, 49152
  %cmp40 = icmp eq i32 %and39, 32768
  br i1 %cmp40, label %land.lhs.true42, label %if.end52

land.lhs.true42:                                  ; preds = %sw.bb37
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %32, 255
  %cmp45 = icmp eq i32 %and44, 9
  br i1 %cmp45, label %if.then51, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true42
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %34, 255
  %cmp49 = icmp eq i32 %and48, 10
  br i1 %cmp49, label %if.then51, label %if.end52

if.then51:                                        ; preds = %lor.lhs.false, %land.lhs.true42
  br label %we_have_a_glob

if.end52:                                         ; preds = %lor.lhs.false, %sw.bb37
  br label %sw.default

sw.default:                                       ; preds = %if.then14, %if.end52
  %35 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp53 = icmp eq %struct.sv* %35, @PL_sv_yes
  br i1 %cmp53, label %if.then55, label %if.end62

if.then55:                                        ; preds = %sw.default
  %36 = load i8, i8* %hasargs, align 1
  %tobool56 = trunc i8 %36 to i1
  br i1 %tobool56, label %if.then57, label %if.else

if.then57:                                        ; preds = %if.then55
  %37 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %38 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr58 = getelementptr inbounds i32, i32* %38, i32 -1
  store i32* %incdec.ptr58, i32** @PL_markstack_ptr, align 8
  %39 = load i32, i32* %38, align 4
  %idx.ext = sext i32 %39 to i64
  %add.ptr59 = getelementptr inbounds %struct.sv*, %struct.sv** %37, i64 %idx.ext
  store %struct.sv** %add.ptr59, %struct.sv*** %sp, align 8
  br label %if.end61

if.else:                                          ; preds = %if.then55
  %40 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr60 = getelementptr inbounds i32, i32* %40, i32 -1
  store i32* %incdec.ptr60, i32** @PL_markstack_ptr, align 8
  %41 = load i32, i32* %40, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.else, %if.then57
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %42, %struct.sv*** @PL_stack_sp, align 8
  %43 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 0
  %44 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %44, %struct.op** %retval, align 8
  br label %return

if.end62:                                         ; preds = %sw.default
  %45 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags63 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags63, align 4
  %and64 = and i32 %46, 2097152
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %cond.true66, label %cond.false67

cond.true66:                                      ; preds = %if.end62
  br i1 true, label %land.rhs, label %land.end

cond.false67:                                     ; preds = %if.end62
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false67, %cond.true66
  %47 = load %struct.sv*, %struct.sv** %sv, align 8
  %call68 = call i32 @Perl_mg_get(%struct.sv* %47)
  %tobool69 = icmp ne i32 %call68, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false67, %cond.true66
  %48 = phi i1 [ false, %cond.false67 ], [ false, %cond.true66 ], [ %tobool69, %land.rhs ]
  %land.ext = zext i1 %48 to i32
  %49 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags70 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags70, align 4
  %and71 = and i32 %50, 2048
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %if.then73, label %if.else91

if.then73:                                        ; preds = %land.end
  %51 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags74, align 4
  %and75 = and i32 %52, 2048
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %land.lhs.true77, label %if.end90

land.lhs.true77:                                  ; preds = %if.then73
  %53 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u78 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u78 to %struct.sv**
  %54 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %55, 1048576
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %land.lhs.true82, label %if.end90

land.lhs.true82:                                  ; preds = %land.lhs.true77
  %56 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u83 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 3
  %svu_rv84 = bitcast %union.anon* %sv_u83 to %struct.sv**
  %57 = load %struct.sv*, %struct.sv** %svu_rv84, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any, align 8
  %59 = bitcast i8* %58 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %59, i32 0, i32 0
  %60 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags85 = getelementptr inbounds %struct.hv, %struct.hv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags85, align 4
  %and86 = and i32 %61, 268435456
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %if.then88, label %if.end90

if.then88:                                        ; preds = %land.lhs.true82
  %62 = load %struct.sv*, %struct.sv** %sv, align 8
  %call89 = call %struct.sv* @Perl_amagic_deref_call(%struct.sv* %62, i32 5)
  store %struct.sv* %call89, %struct.sv** %sv, align 8
  br label %if.end90

if.end90:                                         ; preds = %if.then88, %land.lhs.true82, %land.lhs.true77, %if.then73
  br label %if.end132

if.else91:                                        ; preds = %land.end
  %63 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags92 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags92, align 4
  %and93 = and i32 %64, 65280
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %if.end107, label %lor.lhs.false95

lor.lhs.false95:                                  ; preds = %if.else91
  %65 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags96 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags96, align 4
  %and97 = and i32 %66, 255
  %cmp98 = icmp eq i32 %and97, 8
  br i1 %cmp98, label %if.end107, label %lor.lhs.false100

lor.lhs.false100:                                 ; preds = %lor.lhs.false95
  %67 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags101 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags101, align 4
  %and102 = and i32 %68, 16826623
  %cmp103 = icmp eq i32 %and102, 16777226
  br i1 %cmp103, label %if.end107, label %if.then105

if.then105:                                       ; preds = %lor.lhs.false100
  %call106 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.35, i64 0, i64 0))
  store %struct.op* %call106, %struct.op** %retval, align 8
  br label %return

if.end107:                                        ; preds = %lor.lhs.false100, %lor.lhs.false95, %if.else91
  %69 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags108 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags108, align 4
  %and109 = and i32 %70, 2098176
  %cmp110 = icmp eq i32 %and109, 1024
  br i1 %cmp110, label %cond.true112, label %cond.false116

cond.true112:                                     ; preds = %if.end107
  %71 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any113 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any113, align 8
  %73 = bitcast i8* %72 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %73, i32 0, i32 2
  %74 = load i64, i64* %xpv_cur, align 8
  store i64 %74, i64* %len, align 8
  %75 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u114 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u114 to i8**
  %76 = load i8*, i8** %svu_pv, align 8
  %add.ptr115 = getelementptr inbounds i8, i8* %76, i64 0
  br label %cond.end118

cond.false116:                                    ; preds = %if.end107
  %77 = load %struct.sv*, %struct.sv** %sv, align 8
  %call117 = call i8* @Perl_sv_2pv_flags(%struct.sv* %77, i64* %len, i32 32)
  br label %cond.end118

cond.end118:                                      ; preds = %cond.false116, %cond.true112
  %cond119 = phi i8* [ %add.ptr115, %cond.true112 ], [ %call117, %cond.false116 ]
  store i8* %cond119, i8** %sym, align 8
  %78 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 6
  %79 = load i8, i8* %op_private, align 1
  %conv120 = zext i8 %79 to i32
  %and121 = and i32 %conv120, 2
  %tobool122 = icmp ne i32 %and121, 0
  br i1 %tobool122, label %if.then123, label %if.end128

if.then123:                                       ; preds = %cond.end118
  %80 = load %struct.sv*, %struct.sv** %sv, align 8
  %81 = load i64, i64* %len, align 8
  %cmp124 = icmp ugt i64 %81, 32
  %82 = zext i1 %cmp124 to i64
  %cond126 = select i1 %cmp124, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)
  %call127 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.36, i64 0, i64 0), %struct.sv* %80, i8* %cond126)
  store %struct.op* %call127, %struct.op** %retval, align 8
  br label %return

if.end128:                                        ; preds = %cond.end118
  %83 = load i8*, i8** %sym, align 8
  %84 = load i64, i64* %len, align 8
  %85 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags129 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags129, align 4
  %and130 = and i32 %86, 536870912
  %or = or i32 1, %and130
  %call131 = call %struct.cv* @Perl_get_cvn_flags(i8* %83, i64 %84, i32 %or)
  store %struct.cv* %call131, %struct.cv** %cv, align 8
  br label %sw.epilog

if.end132:                                        ; preds = %if.end90
  %87 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u133 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 3
  %svu_rv134 = bitcast %union.anon* %sv_u133 to %struct.sv**
  %88 = load %struct.sv*, %struct.sv** %svu_rv134, align 8
  %89 = bitcast %struct.sv* %88 to i8*
  %90 = bitcast i8* %89 to %struct.cv*
  store %struct.cv* %90, %struct.cv** %cv, align 8
  %91 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags135 = getelementptr inbounds %struct.cv, %struct.cv* %91, i32 0, i32 2
  %92 = load i32, i32* %sv_flags135, align 4
  %and136 = and i32 %92, 255
  %cmp137 = icmp eq i32 %and136, 13
  br i1 %cmp137, label %if.then139, label %if.end140

if.then139:                                       ; preds = %if.end132
  br label %sw.epilog

if.end140:                                        ; preds = %if.end132
  br label %sw.bb141

sw.bb141:                                         ; preds = %if.then14, %if.then14, %if.end140
  %call142 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i64 0, i64 0))
  store %struct.op* %call142, %struct.op** %retval, align 8
  br label %return

sw.bb143:                                         ; preds = %if.then14
  %93 = load %struct.sv*, %struct.sv** %sv, align 8
  %94 = bitcast %struct.sv* %93 to i8*
  %95 = bitcast i8* %94 to %struct.cv*
  store %struct.cv* %95, %struct.cv** %cv, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb143, %if.then139, %if.end128, %if.end36
  br label %if.end144

if.end144:                                        ; preds = %sw.epilog, %cond.false13, %cond.true12
  call void @Perl_push_scope()
  br label %retry

retry:                                            ; preds = %if.end246, %if.end144
  %96 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any145 = getelementptr inbounds %struct.cv, %struct.cv* %96, i32 0, i32 0
  %97 = load %struct.xpvcv*, %struct.xpvcv** %sv_any145, align 8
  %98 = bitcast %struct.xpvcv* %97 to i8*
  %99 = bitcast i8* %98 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %99, i32 0, i32 12
  %100 = load i32, i32* %xcv_flags, align 4
  %and146 = and i32 %100, 32
  %tobool147 = icmp ne i32 %and146, 0
  br i1 %tobool147, label %land.lhs.true148, label %cond.false154

land.lhs.true148:                                 ; preds = %retry
  %101 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any149 = getelementptr inbounds %struct.cv, %struct.cv* %101, i32 0, i32 0
  %102 = load %struct.xpvcv*, %struct.xpvcv** %sv_any149, align 8
  %103 = bitcast %struct.xpvcv* %102 to i8*
  %104 = bitcast i8* %103 to %struct.xpvcv*
  %xcv_flags150 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %104, i32 0, i32 12
  %105 = load i32, i32* %xcv_flags150, align 4
  %and151 = and i32 %105, 64
  %tobool152 = icmp ne i32 %and151, 0
  br i1 %tobool152, label %cond.false154, label %cond.true153

cond.true153:                                     ; preds = %land.lhs.true148
  br i1 true, label %if.then155, label %if.end157

cond.false154:                                    ; preds = %land.lhs.true148, %retry
  br i1 false, label %if.then155, label %if.end157

if.then155:                                       ; preds = %cond.false154, %cond.true153
  %call156 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.37, i64 0, i64 0))
  store %struct.op* %call156, %struct.op** %retval, align 8
  br label %return

if.end157:                                        ; preds = %cond.false154, %cond.true153
  %106 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any158 = getelementptr inbounds %struct.cv, %struct.cv* %106, i32 0, i32 0
  %107 = load %struct.xpvcv*, %struct.xpvcv** %sv_any158, align 8
  %108 = bitcast %struct.xpvcv* %107 to i8*
  %109 = bitcast i8* %108 to %struct.xpvcv*
  %xcv_root_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %109, i32 0, i32 6
  %xcv_root = bitcast %union.anon.11* %xcv_root_u to %struct.op**
  %110 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool159 = icmp ne %struct.op* %110, null
  br i1 %tobool159, label %cond.false165, label %land.lhs.true160

land.lhs.true160:                                 ; preds = %if.end157
  %111 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any161 = getelementptr inbounds %struct.cv, %struct.cv* %111, i32 0, i32 0
  %112 = load %struct.xpvcv*, %struct.xpvcv** %sv_any161, align 8
  %113 = bitcast %struct.xpvcv* %112 to i8*
  %114 = bitcast i8* %113 to %struct.xpvcv*
  %xcv_root_u162 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %114, i32 0, i32 6
  %xcv_xsub = bitcast %union.anon.11* %xcv_root_u162 to void (%struct.cv*)**
  %115 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub, align 8
  %tobool163 = icmp ne void (%struct.cv*)* %115, null
  br i1 %tobool163, label %cond.false165, label %cond.true164

cond.true164:                                     ; preds = %land.lhs.true160
  br i1 true, label %if.then166, label %if.end247

cond.false165:                                    ; preds = %land.lhs.true160, %if.end157
  br i1 false, label %if.then166, label %if.end247

if.then166:                                       ; preds = %cond.false165, %cond.true164
  %116 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any167 = getelementptr inbounds %struct.cv, %struct.cv* %116, i32 0, i32 0
  %117 = load %struct.xpvcv*, %struct.xpvcv** %sv_any167, align 8
  %118 = bitcast %struct.xpvcv* %117 to i8*
  %119 = bitcast i8* %118 to %struct.xpvcv*
  %xcv_flags168 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %119, i32 0, i32 12
  %120 = load i32, i32* %xcv_flags168, align 4
  %and169 = and i32 %120, 65536
  %tobool170 = icmp ne i32 %and169, 0
  br i1 %tobool170, label %land.lhs.true171, label %if.end179

land.lhs.true171:                                 ; preds = %if.then166
  %121 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any172 = getelementptr inbounds %struct.cv, %struct.cv* %121, i32 0, i32 0
  %122 = load %struct.xpvcv*, %struct.xpvcv** %sv_any172, align 8
  %xcv_gv_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %122, i32 0, i32 7
  %xcv_gv = bitcast %union.anon.12* %xcv_gv_u to %struct.gv**
  %123 = load %struct.gv*, %struct.gv** %xcv_gv, align 8
  %tobool173 = icmp ne %struct.gv* %123, null
  br i1 %tobool173, label %cond.true174, label %cond.false175

cond.true174:                                     ; preds = %land.lhs.true171
  br i1 true, label %if.then176, label %if.end179

cond.false175:                                    ; preds = %land.lhs.true171
  br i1 false, label %if.then176, label %if.end179

if.then176:                                       ; preds = %cond.false175, %cond.true174
  %124 = load %struct.cv*, %struct.cv** %cv, align 8
  %call177 = call %struct.sv* @Perl_cv_name(%struct.cv* %124, %struct.sv* null, i32 0)
  %125 = bitcast %struct.sv* %call177 to i8*
  %call178 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.38, i64 0, i64 0), i8* %125)
  store %struct.op* %call178, %struct.op** %retval, align 8
  br label %return

if.end179:                                        ; preds = %cond.false175, %cond.true174, %if.then166
  %126 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any180 = getelementptr inbounds %struct.cv, %struct.cv* %126, i32 0, i32 0
  %127 = load %struct.xpvcv*, %struct.xpvcv** %sv_any180, align 8
  %128 = bitcast %struct.xpvcv* %127 to i8*
  %129 = bitcast i8* %128 to %struct.xpvcv*
  %xcv_flags181 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %129, i32 0, i32 12
  %130 = load i32, i32* %xcv_flags181, align 4
  %and182 = and i32 %130, 128
  %tobool183 = icmp ne i32 %and182, 0
  br i1 %tobool183, label %if.then191, label %lor.lhs.false184

lor.lhs.false184:                                 ; preds = %if.end179
  %131 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any185 = getelementptr inbounds %struct.cv, %struct.cv* %131, i32 0, i32 0
  %132 = load %struct.xpvcv*, %struct.xpvcv** %sv_any185, align 8
  %xcv_gv_u186 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %132, i32 0, i32 7
  %xcv_gv187 = bitcast %union.anon.12* %xcv_gv_u186 to %struct.gv**
  %133 = load %struct.gv*, %struct.gv** %xcv_gv187, align 8
  %tobool188 = icmp ne %struct.gv* %133, null
  br i1 %tobool188, label %cond.true189, label %cond.false190

cond.true189:                                     ; preds = %lor.lhs.false184
  br i1 true, label %if.end193, label %if.then191

cond.false190:                                    ; preds = %lor.lhs.false184
  br i1 false, label %if.end193, label %if.then191

if.then191:                                       ; preds = %cond.false190, %cond.true189, %if.end179
  %call192 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.39, i64 0, i64 0))
  store %struct.op* %call192, %struct.op** %retval, align 8
  br label %return

if.end193:                                        ; preds = %cond.false190, %cond.true189
  %134 = load %struct.cv*, %struct.cv** %cv, align 8
  %135 = load %struct.cv*, %struct.cv** %cv, align 8
  %call194 = call %struct.gv* @S_CvGV(%struct.cv* %135)
  store %struct.gv* %call194, %struct.gv** %gv, align 8
  %sv_u195 = getelementptr inbounds %struct.gv, %struct.gv* %call194, i32 0, i32 3
  %svu_gp196 = bitcast %union.anon.4* %sv_u195 to %struct.gp**
  %136 = load %struct.gp*, %struct.gp** %svu_gp196, align 8
  %add.ptr197 = getelementptr inbounds %struct.gp, %struct.gp* %136, i64 0
  %gp_cv198 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr197, i32 0, i32 2
  %137 = load %struct.cv*, %struct.cv** %gp_cv198, align 8
  %add.ptr199 = getelementptr inbounds %struct.cv, %struct.cv* %137, i64 0
  %cmp200 = icmp ne %struct.cv* %134, %add.ptr199
  br i1 %cmp200, label %if.then202, label %if.else208

if.then202:                                       ; preds = %if.end193
  %138 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u203 = getelementptr inbounds %struct.gv, %struct.gv* %138, i32 0, i32 3
  %svu_gp204 = bitcast %union.anon.4* %sv_u203 to %struct.gp**
  %139 = load %struct.gp*, %struct.gp** %svu_gp204, align 8
  %add.ptr205 = getelementptr inbounds %struct.gp, %struct.gp* %139, i64 0
  %gp_cv206 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr205, i32 0, i32 2
  %140 = load %struct.cv*, %struct.cv** %gp_cv206, align 8
  %add.ptr207 = getelementptr inbounds %struct.cv, %struct.cv* %140, i64 0
  store %struct.cv* %add.ptr207, %struct.cv** %cv, align 8
  br label %if.end243

if.else208:                                       ; preds = %if.end193
  br label %try_autoload

try_autoload:                                     ; preds = %if.else208, %if.then35
  %141 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any209 = getelementptr inbounds %struct.gv, %struct.gv* %141, i32 0, i32 0
  %142 = load %struct.xpvgv*, %struct.xpvgv** %sv_any209, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %142, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %143 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %144 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any210 = getelementptr inbounds %struct.gv, %struct.gv* %144, i32 0, i32 0
  %145 = load %struct.xpvgv*, %struct.xpvgv** %sv_any210, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %145, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %146 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %146, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %147 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any211 = getelementptr inbounds %struct.gv, %struct.gv* %147, i32 0, i32 0
  %148 = load %struct.xpvgv*, %struct.xpvgv** %sv_any211, align 8
  %xiv_u212 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %148, i32 0, i32 4
  %xivu_namehek213 = bitcast %union._xivu* %xiv_u212 to %struct.hek**
  %149 = load %struct.hek*, %struct.hek** %xivu_namehek213, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %149, i32 0, i32 1
  %150 = load i32, i32* %hek_len, align 4
  %conv214 = sext i32 %150 to i64
  %151 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any215 = getelementptr inbounds %struct.gv, %struct.gv* %151, i32 0, i32 0
  %152 = load %struct.xpvgv*, %struct.xpvgv** %sv_any215, align 8
  %xiv_u216 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %152, i32 0, i32 4
  %xivu_namehek217 = bitcast %union._xivu* %xiv_u216 to %struct.hek**
  %153 = load %struct.hek*, %struct.hek** %xivu_namehek217, align 8
  %hek_key218 = getelementptr inbounds %struct.hek, %struct.hek* %153, i32 0, i32 2
  %arraydecay219 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key218, i64 0, i64 0
  %154 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any220 = getelementptr inbounds %struct.gv, %struct.gv* %154, i32 0, i32 0
  %155 = load %struct.xpvgv*, %struct.xpvgv** %sv_any220, align 8
  %xiv_u221 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %155, i32 0, i32 4
  %xivu_namehek222 = bitcast %union._xivu* %xiv_u221 to %struct.hek**
  %156 = load %struct.hek*, %struct.hek** %xivu_namehek222, align 8
  %hek_len223 = getelementptr inbounds %struct.hek, %struct.hek* %156, i32 0, i32 1
  %157 = load i32, i32* %hek_len223, align 4
  %idx.ext224 = sext i32 %157 to i64
  %add.ptr225 = getelementptr inbounds i8, i8* %arraydecay219, i64 %idx.ext224
  %add.ptr226 = getelementptr inbounds i8, i8* %add.ptr225, i64 1
  %158 = load i8, i8* %add.ptr226, align 1
  %conv227 = zext i8 %158 to i32
  %and228 = and i32 %conv227, 1
  %tobool229 = icmp ne i32 %and228, 0
  %159 = zext i1 %tobool229 to i64
  %cond230 = select i1 %tobool229, i32 536870912, i32 0
  %call231 = call %struct.gv* @Perl_gv_autoload_pvn(%struct.hv* %143, i8* %arraydecay, i64 %conv214, i32 %cond230)
  store %struct.gv* %call231, %struct.gv** %autogv, align 8
  %tobool232 = icmp ne %struct.gv* %call231, null
  br i1 %tobool232, label %if.then233, label %if.else239

if.then233:                                       ; preds = %try_autoload
  %160 = load %struct.gv*, %struct.gv** %autogv, align 8
  %sv_u234 = getelementptr inbounds %struct.gv, %struct.gv* %160, i32 0, i32 3
  %svu_gp235 = bitcast %union.anon.4* %sv_u234 to %struct.gp**
  %161 = load %struct.gp*, %struct.gp** %svu_gp235, align 8
  %add.ptr236 = getelementptr inbounds %struct.gp, %struct.gp* %161, i64 0
  %gp_cv237 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr236, i32 0, i32 2
  %162 = load %struct.cv*, %struct.cv** %gp_cv237, align 8
  %add.ptr238 = getelementptr inbounds %struct.cv, %struct.cv* %162, i64 0
  store %struct.cv* %add.ptr238, %struct.cv** %cv, align 8
  br label %if.end242

if.else239:                                       ; preds = %try_autoload
  br label %sorry

sorry:                                            ; preds = %if.then245, %if.else239
  %call240 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call240, %struct.sv** %sub_name, align 8
  %163 = load %struct.sv*, %struct.sv** %sub_name, align 8
  %164 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %163, %struct.gv* %164, i8* null, i1 zeroext true)
  %165 = load %struct.sv*, %struct.sv** %sub_name, align 8
  %166 = bitcast %struct.sv* %165 to i8*
  %call241 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.38, i64 0, i64 0), i8* %166)
  store %struct.op* %call241, %struct.op** %retval, align 8
  br label %return

if.end242:                                        ; preds = %if.then233
  br label %if.end243

if.end243:                                        ; preds = %if.end242, %if.then202
  %167 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool244 = icmp ne %struct.cv* %167, null
  br i1 %tobool244, label %if.end246, label %if.then245

if.then245:                                       ; preds = %if.end243
  br label %sorry

if.end246:                                        ; preds = %if.end243
  br label %retry

if.end247:                                        ; preds = %cond.false165, %cond.true164
  %168 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private248 = getelementptr inbounds %struct.op, %struct.op* %168, i32 0, i32 6
  %169 = load i8, i8* %op_private248, align 1
  %conv249 = zext i8 %169 to i32
  %and250 = and i32 %conv249, 64
  %tobool251 = icmp ne i32 %and250, 0
  br i1 %tobool251, label %land.lhs.true252, label %cond.false265

land.lhs.true252:                                 ; preds = %if.end247
  %170 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_u253 = getelementptr inbounds %struct.gv, %struct.gv* %170, i32 0, i32 3
  %svu_gp254 = bitcast %union.anon.4* %sv_u253 to %struct.gp**
  %171 = load %struct.gp*, %struct.gp** %svu_gp254, align 8
  %add.ptr255 = getelementptr inbounds %struct.gp, %struct.gp* %171, i64 0
  %gp_cv256 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr255, i32 0, i32 2
  %172 = load %struct.cv*, %struct.cv** %gp_cv256, align 8
  %add.ptr257 = getelementptr inbounds %struct.cv, %struct.cv* %172, i64 0
  %tobool258 = icmp ne %struct.cv* %add.ptr257, null
  br i1 %tobool258, label %land.lhs.true259, label %cond.false265

land.lhs.true259:                                 ; preds = %land.lhs.true252
  %173 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any260 = getelementptr inbounds %struct.cv, %struct.cv* %173, i32 0, i32 0
  %174 = load %struct.xpvcv*, %struct.xpvcv** %sv_any260, align 8
  %175 = bitcast %struct.xpvcv* %174 to i8*
  %176 = bitcast i8* %175 to %struct.xpvcv*
  %xcv_flags261 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %176, i32 0, i32 12
  %177 = load i32, i32* %xcv_flags261, align 4
  %and262 = and i32 %177, 512
  %tobool263 = icmp ne i32 %and262, 0
  br i1 %tobool263, label %cond.false265, label %cond.true264

cond.true264:                                     ; preds = %land.lhs.true259
  br i1 true, label %if.then266, label %if.end311

cond.false265:                                    ; preds = %land.lhs.true259, %land.lhs.true252, %if.end247
  br i1 false, label %if.then266, label %if.end311

if.then266:                                       ; preds = %cond.false265, %cond.true264
  %178 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @Perl_get_db_sub(%struct.sv** %sv, %struct.cv* %178)
  %179 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any267 = getelementptr inbounds %struct.cv, %struct.cv* %179, i32 0, i32 0
  %180 = load %struct.xpvcv*, %struct.xpvcv** %sv_any267, align 8
  %181 = bitcast %struct.xpvcv* %180 to i8*
  %182 = bitcast i8* %181 to %struct.xpvcv*
  %xcv_flags268 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %182, i32 0, i32 12
  %183 = load i32, i32* %xcv_flags268, align 4
  %and269 = and i32 %183, 8
  %tobool270 = icmp ne i32 %and269, 0
  br i1 %tobool270, label %if.then271, label %if.end272

if.then271:                                       ; preds = %if.then266
  %184 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  store %struct.cop* %184, %struct.cop** @PL_curcopdb, align 8
  br label %if.end272

if.end272:                                        ; preds = %if.then271, %if.then266
  %185 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any273 = getelementptr inbounds %struct.cv, %struct.cv* %185, i32 0, i32 0
  %186 = load %struct.xpvcv*, %struct.xpvcv** %sv_any273, align 8
  %187 = bitcast %struct.xpvcv* %186 to i8*
  %188 = bitcast i8* %187 to %struct.xpvcv*
  %xcv_flags274 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %188, i32 0, i32 12
  %189 = load i32, i32* %xcv_flags274, align 4
  %and275 = and i32 %189, 2
  %tobool276 = icmp ne i32 %and275, 0
  br i1 %tobool276, label %if.then277, label %if.else292

if.then277:                                       ; preds = %if.end272
  %call278 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.40, i64 0, i64 0), i64 8, i32 2, i32 13)
  %sv_u279 = getelementptr inbounds %struct.gv, %struct.gv* %call278, i32 0, i32 3
  %svu_gp280 = bitcast %union.anon.4* %sv_u279 to %struct.gp**
  %190 = load %struct.gp*, %struct.gp** %svu_gp280, align 8
  %add.ptr281 = getelementptr inbounds %struct.gp, %struct.gp* %190, i64 0
  %gp_cv282 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr281, i32 0, i32 2
  %191 = load %struct.cv*, %struct.cv** %gp_cv282, align 8
  %add.ptr283 = getelementptr inbounds %struct.cv, %struct.cv* %191, i64 0
  store %struct.cv* %add.ptr283, %struct.cv** %cv, align 8
  %192 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool284 = icmp ne %struct.cv* %192, null
  br i1 %tobool284, label %if.end291, label %if.then285

if.then285:                                       ; preds = %if.then277
  %193 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_u286 = getelementptr inbounds %struct.gv, %struct.gv* %193, i32 0, i32 3
  %svu_gp287 = bitcast %union.anon.4* %sv_u286 to %struct.gp**
  %194 = load %struct.gp*, %struct.gp** %svu_gp287, align 8
  %add.ptr288 = getelementptr inbounds %struct.gp, %struct.gp* %194, i64 0
  %gp_cv289 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr288, i32 0, i32 2
  %195 = load %struct.cv*, %struct.cv** %gp_cv289, align 8
  %add.ptr290 = getelementptr inbounds %struct.cv, %struct.cv* %195, i64 0
  store %struct.cv* %add.ptr290, %struct.cv** %cv, align 8
  br label %if.end291

if.end291:                                        ; preds = %if.then285, %if.then277
  br label %if.end298

if.else292:                                       ; preds = %if.end272
  %196 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_u293 = getelementptr inbounds %struct.gv, %struct.gv* %196, i32 0, i32 3
  %svu_gp294 = bitcast %union.anon.4* %sv_u293 to %struct.gp**
  %197 = load %struct.gp*, %struct.gp** %svu_gp294, align 8
  %add.ptr295 = getelementptr inbounds %struct.gp, %struct.gp* %197, i64 0
  %gp_cv296 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr295, i32 0, i32 2
  %198 = load %struct.cv*, %struct.cv** %gp_cv296, align 8
  %add.ptr297 = getelementptr inbounds %struct.cv, %struct.cv* %198, i64 0
  store %struct.cv* %add.ptr297, %struct.cv** %cv, align 8
  br label %if.end298

if.end298:                                        ; preds = %if.else292, %if.end291
  %199 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool299 = icmp ne %struct.cv* %199, null
  br i1 %tobool299, label %lor.lhs.false300, label %if.then308

lor.lhs.false300:                                 ; preds = %if.end298
  %200 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any301 = getelementptr inbounds %struct.cv, %struct.cv* %200, i32 0, i32 0
  %201 = load %struct.xpvcv*, %struct.xpvcv** %sv_any301, align 8
  %202 = bitcast %struct.xpvcv* %201 to i8*
  %203 = bitcast i8* %202 to %struct.xpvcv*
  %xcv_root_u302 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %203, i32 0, i32 6
  %xcv_xsub303 = bitcast %union.anon.11* %xcv_root_u302 to void (%struct.cv*)**
  %204 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub303, align 8
  %tobool304 = icmp ne void (%struct.cv*)* %204, null
  br i1 %tobool304, label %if.end310, label %land.lhs.true305

land.lhs.true305:                                 ; preds = %lor.lhs.false300
  %205 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any306 = getelementptr inbounds %struct.cv, %struct.cv* %205, i32 0, i32 0
  %206 = load %struct.xpvcv*, %struct.xpvcv** %sv_any306, align 8
  %207 = bitcast %struct.xpvcv* %206 to i8*
  %208 = bitcast i8* %207 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %208, i32 0, i32 5
  %xcv_start = bitcast %union.anon.10* %xcv_start_u to %struct.op**
  %209 = load %struct.op*, %struct.op** %xcv_start, align 8
  %tobool307 = icmp ne %struct.op* %209, null
  br i1 %tobool307, label %if.end310, label %if.then308

if.then308:                                       ; preds = %land.lhs.true305, %if.end298
  %call309 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.41, i64 0, i64 0))
  store %struct.op* %call309, %struct.op** %retval, align 8
  br label %return

if.end310:                                        ; preds = %land.lhs.true305, %lor.lhs.false300
  br label %if.end311

if.end311:                                        ; preds = %if.end310, %cond.false265, %cond.true264
  %210 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags312 = getelementptr inbounds %struct.op, %struct.op* %210, i32 0, i32 5
  %211 = load i8, i8* %op_flags312, align 2
  %conv313 = zext i8 %211 to i32
  %and314 = and i32 %conv313, 3
  %tobool315 = icmp ne i32 %and314, 0
  br i1 %tobool315, label %cond.true316, label %cond.false320

cond.true316:                                     ; preds = %if.end311
  %212 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags317 = getelementptr inbounds %struct.op, %struct.op* %212, i32 0, i32 5
  %213 = load i8, i8* %op_flags317, align 2
  %conv318 = zext i8 %213 to i32
  %and319 = and i32 %conv318, 3
  br label %cond.end322

cond.false320:                                    ; preds = %if.end311
  %call321 = call i32 @Perl_block_gimme()
  br label %cond.end322

cond.end322:                                      ; preds = %cond.false320, %cond.true316
  %cond323 = phi i32 [ %and319, %cond.true316 ], [ %call321, %cond.false320 ]
  store i32 %cond323, i32* %gimme, align 4
  %214 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any324 = getelementptr inbounds %struct.cv, %struct.cv* %214, i32 0, i32 0
  %215 = load %struct.xpvcv*, %struct.xpvcv** %sv_any324, align 8
  %216 = bitcast %struct.xpvcv* %215 to i8*
  %217 = bitcast i8* %216 to %struct.xpvcv*
  %xcv_flags325 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %217, i32 0, i32 12
  %218 = load i32, i32* %xcv_flags325, align 4
  %and326 = and i32 %218, 8
  %tobool327 = icmp ne i32 %and326, 0
  br i1 %tobool327, label %if.else550, label %if.then328

if.then328:                                       ; preds = %cond.end322
  %219 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %220 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr329 = getelementptr inbounds i32, i32* %220, i32 -1
  store i32* %incdec.ptr329, i32** @PL_markstack_ptr, align 8
  %221 = load i32, i32* %220, align 4
  %idx.ext330 = sext i32 %221 to i64
  %add.ptr331 = getelementptr inbounds %struct.sv*, %struct.sv** %219, i64 %idx.ext330
  store %struct.sv** %add.ptr331, %struct.sv*** %mark, align 8
  %222 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any332 = getelementptr inbounds %struct.cv, %struct.cv* %222, i32 0, i32 0
  %223 = load %struct.xpvcv*, %struct.xpvcv** %sv_any332, align 8
  %224 = bitcast %struct.xpvcv* %223 to i8*
  %225 = bitcast i8* %224 to %struct.xpvcv*
  %xcv_padlist_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %225, i32 0, i32 9
  %xcv_padlist = bitcast %union.anon.13* %xcv_padlist_u to %struct.padlist**
  %226 = load %struct.padlist*, %struct.padlist** %xcv_padlist, align 8
  store %struct.padlist* %226, %struct.padlist** %padlist, align 8
  %227 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %227, i32 0, i32 4
  %228 = load i32, i32* %si_cxix, align 8
  %229 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %229, i32 0, i32 5
  %230 = load i32, i32* %si_cxmax, align 4
  %cmp333 = icmp slt i32 %228, %230
  br i1 %cmp333, label %cond.true335, label %cond.false337

cond.true335:                                     ; preds = %if.then328
  %231 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix336 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %231, i32 0, i32 4
  %232 = load i32, i32* %si_cxix336, align 8
  %inc = add nsw i32 %232, 1
  store i32 %inc, i32* %si_cxix336, align 8
  br label %cond.end340

cond.false337:                                    ; preds = %if.then328
  %call338 = call i32 @Perl_cxinc()
  %233 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix339 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %233, i32 0, i32 4
  store i32 %call338, i32* %si_cxix339, align 8
  br label %cond.end340

cond.end340:                                      ; preds = %cond.false337, %cond.true335
  %cond341 = phi i32 [ %inc, %cond.true335 ], [ %call338, %cond.false337 ]
  %234 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %234, i32 0, i32 1
  %235 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %236 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix342 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %236, i32 0, i32 4
  %237 = load i32, i32* %si_cxix342, align 8
  %idxprom = sext i32 %237 to i64
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %235, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %238 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %238, i32 0, i32 0
  %cx_subst = bitcast %union.anon.17* %cx_u to %struct.subst*
  %sbu_type = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst, i32 0, i32 0
  store i8 8, i8* %sbu_type, align 8
  %239 = load %struct.sv**, %struct.sv*** %mark, align 8
  %240 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %239 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %240 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv343 = trunc i64 %sub.ptr.div to i32
  %241 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u344 = getelementptr inbounds %struct.context, %struct.context* %241, i32 0, i32 0
  %cx_blk = bitcast %union.anon.17* %cx_u344 to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 3
  store i32 %conv343, i32* %blku_oldsp, align 4
  %242 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %243 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u345 = getelementptr inbounds %struct.context, %struct.context* %243, i32 0, i32 0
  %cx_blk346 = bitcast %union.anon.17* %cx_u345 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk346, i32 0, i32 4
  store %struct.cop* %242, %struct.cop** %blku_oldcop, align 8
  %244 = load i32*, i32** @PL_markstack_ptr, align 8
  %245 = load i32*, i32** @PL_markstack, align 8
  %sub.ptr.lhs.cast347 = ptrtoint i32* %244 to i64
  %sub.ptr.rhs.cast348 = ptrtoint i32* %245 to i64
  %sub.ptr.sub349 = sub i64 %sub.ptr.lhs.cast347, %sub.ptr.rhs.cast348
  %sub.ptr.div350 = sdiv exact i64 %sub.ptr.sub349, 4
  %conv351 = trunc i64 %sub.ptr.div350 to i32
  %246 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u352 = getelementptr inbounds %struct.context, %struct.context* %246, i32 0, i32 0
  %cx_blk353 = bitcast %union.anon.17* %cx_u352 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk353, i32 0, i32 5
  store i32 %conv351, i32* %blku_oldmarksp, align 8
  %247 = load i32, i32* @PL_scopestack_ix, align 4
  %248 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u354 = getelementptr inbounds %struct.context, %struct.context* %248, i32 0, i32 0
  %cx_blk355 = bitcast %union.anon.17* %cx_u354 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk355, i32 0, i32 6
  store i32 %247, i32* %blku_oldscopesp, align 4
  %249 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %250 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u356 = getelementptr inbounds %struct.context, %struct.context* %250, i32 0, i32 0
  %cx_blk357 = bitcast %union.anon.17* %cx_u356 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk357, i32 0, i32 7
  store %struct.pmop* %249, %struct.pmop** %blku_oldpm, align 8
  %251 = load i32, i32* %gimme, align 4
  %conv358 = trunc i32 %251 to i8
  %252 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u359 = getelementptr inbounds %struct.context, %struct.context* %252, i32 0, i32 0
  %cx_blk360 = bitcast %union.anon.17* %cx_u359 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk360, i32 0, i32 1
  store i8 %conv358, i8* %blku_gimme, align 1
  %253 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags361 = getelementptr inbounds %struct.op, %struct.op* %253, i32 0, i32 5
  %254 = load i8, i8* %op_flags361, align 2
  %conv362 = zext i8 %254 to i32
  %and363 = and i32 %conv362, 3
  %tobool364 = icmp ne i32 %and363, 0
  br i1 %tobool364, label %cond.true365, label %cond.false366

cond.true365:                                     ; preds = %cond.end340
  br label %cond.end378

cond.false366:                                    ; preds = %cond.end340
  %255 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private367 = getelementptr inbounds %struct.op, %struct.op* %255, i32 0, i32 6
  %256 = load i8, i8* %op_private367, align 1
  %conv368 = zext i8 %256 to i32
  %and369 = and i32 %conv368, 129
  %tobool370 = icmp ne i32 %and369, 0
  br i1 %tobool370, label %cond.false372, label %cond.true371

cond.true371:                                     ; preds = %cond.false366
  br label %cond.end376

cond.false372:                                    ; preds = %cond.false366
  %call373 = call i32 @Perl_was_lvalue_sub()
  %conv374 = trunc i32 %call373 to i8
  %conv375 = zext i8 %conv374 to i32
  br label %cond.end376

cond.end376:                                      ; preds = %cond.false372, %cond.true371
  %cond377 = phi i32 [ 0, %cond.true371 ], [ %conv375, %cond.false372 ]
  br label %cond.end378

cond.end378:                                      ; preds = %cond.end376, %cond.true365
  %cond379 = phi i32 [ 129, %cond.true365 ], [ %cond377, %cond.end376 ]
  %conv380 = trunc i32 %cond379 to i8
  store i8 %conv380, i8* %phlags, align 1
  %257 = load %struct.cv*, %struct.cv** %cv, align 8
  %258 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u381 = getelementptr inbounds %struct.context, %struct.context* %258, i32 0, i32 0
  %cx_blk382 = bitcast %union.anon.17* %cx_u381 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk382, i32 0, i32 8
  %blku_sub = bitcast %union.anon.20* %blk_u to %struct.block_sub*
  %cv383 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 1
  store %struct.cv* %257, %struct.cv** %cv383, align 8
  %259 = load %struct.cv*, %struct.cv** %cv, align 8
  %call384 = call i32* @S_CvDEPTHp(%struct.cv* %259)
  %260 = load i32, i32* %call384, align 4
  %261 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u385 = getelementptr inbounds %struct.context, %struct.context* %261, i32 0, i32 0
  %cx_blk386 = bitcast %union.anon.17* %cx_u385 to %struct.block*
  %blk_u387 = getelementptr inbounds %struct.block, %struct.block* %cx_blk386, i32 0, i32 8
  %blku_sub388 = bitcast %union.anon.20* %blk_u387 to %struct.block_sub*
  %olddepth = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub388, i32 0, i32 4
  store i32 %260, i32* %olddepth, align 8
  %262 = load i8, i8* %hasargs, align 1
  %tobool389 = trunc i8 %262 to i1
  %263 = zext i1 %tobool389 to i64
  %cond391 = select i1 %tobool389, i32 32, i32 0
  %264 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u392 = getelementptr inbounds %struct.context, %struct.context* %264, i32 0, i32 0
  %cx_subst393 = bitcast %union.anon.17* %cx_u392 to %struct.subst*
  %sbu_type394 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst393, i32 0, i32 0
  %265 = load i8, i8* %sbu_type394, align 8
  %conv395 = zext i8 %265 to i32
  %or396 = or i32 %conv395, %cond391
  %conv397 = trunc i32 %or396 to i8
  store i8 %conv397, i8* %sbu_type394, align 8
  %266 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u398 = getelementptr inbounds %struct.context, %struct.context* %266, i32 0, i32 0
  %cx_blk399 = bitcast %union.anon.17* %cx_u398 to %struct.block*
  %blk_u400 = getelementptr inbounds %struct.block, %struct.block* %cx_blk399, i32 0, i32 8
  %blku_sub401 = bitcast %union.anon.20* %blk_u400 to %struct.block_sub*
  %retop = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub401, i32 0, i32 0
  store %struct.op* null, %struct.op** %retop, align 8
  %267 = load %struct.cv*, %struct.cv** %cv, align 8
  %call402 = call i32* @S_CvDEPTHp(%struct.cv* %267)
  %268 = load i32, i32* %call402, align 4
  %tobool403 = icmp ne i32 %268, 0
  br i1 %tobool403, label %if.end408, label %if.then404

if.then404:                                       ; preds = %cond.end378
  %269 = load %struct.cv*, %struct.cv** %cv, align 8
  %270 = bitcast %struct.cv* %269 to i8*
  %271 = bitcast i8* %270 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %271, i32 0, i32 1
  %272 = load i32, i32* %sv_refcnt, align 8
  %inc405 = add i32 %272, 1
  store i32 %inc405, i32* %sv_refcnt, align 8
  %273 = load %struct.cv*, %struct.cv** %cv, align 8
  %274 = bitcast %struct.cv* %273 to i8*
  %275 = bitcast i8* %274 to %struct.sv*
  %sv_refcnt406 = getelementptr inbounds %struct.sv, %struct.sv* %275, i32 0, i32 1
  %276 = load i32, i32* %sv_refcnt406, align 8
  %inc407 = add i32 %276, 1
  store i32 %inc407, i32* %sv_refcnt406, align 8
  %277 = load %struct.cv*, %struct.cv** %cv, align 8
  %278 = bitcast %struct.cv* %277 to i8*
  %279 = bitcast i8* %278 to %struct.sv*
  %280 = bitcast %struct.sv* %279 to i8*
  call void @Perl_save_pushptr(i8* %280, i32 11)
  br label %if.end408

if.end408:                                        ; preds = %if.then404, %cond.end378
  %281 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private409 = getelementptr inbounds %struct.op, %struct.op* %281, i32 0, i32 6
  %282 = load i8, i8* %op_private409, align 1
  %conv410 = zext i8 %282 to i32
  %283 = load i8, i8* %phlags, align 1
  %conv411 = zext i8 %283 to i32
  %or412 = or i32 %conv411, 48
  %and413 = and i32 %conv410, %or412
  %conv414 = trunc i32 %and413 to i16
  %284 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u415 = getelementptr inbounds %struct.context, %struct.context* %284, i32 0, i32 0
  %cx_blk416 = bitcast %union.anon.17* %cx_u415 to %struct.block*
  %blku_u16 = getelementptr inbounds %struct.block, %struct.block* %cx_blk416, i32 0, i32 2
  store i16 %conv414, i16* %blku_u16, align 2
  %285 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next417 = getelementptr inbounds %struct.op, %struct.op* %285, i32 0, i32 0
  %286 = load %struct.op*, %struct.op** %op_next417, align 8
  %287 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u418 = getelementptr inbounds %struct.context, %struct.context* %287, i32 0, i32 0
  %cx_blk419 = bitcast %union.anon.17* %cx_u418 to %struct.block*
  %blk_u420 = getelementptr inbounds %struct.block, %struct.block* %cx_blk419, i32 0, i32 8
  %blku_sub421 = bitcast %union.anon.20* %blk_u420 to %struct.block_sub*
  %retop422 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub421, i32 0, i32 0
  store %struct.op* %286, %struct.op** %retop422, align 8
  %288 = load %struct.cv*, %struct.cv** %cv, align 8
  %call423 = call i32* @S_CvDEPTHp(%struct.cv* %288)
  %289 = load i32, i32* %call423, align 4
  %inc424 = add nsw i32 %289, 1
  store i32 %inc424, i32* %call423, align 4
  store i32 %inc424, i32* %depth, align 4
  %cmp425 = icmp sge i32 %inc424, 2
  br i1 %cmp425, label %cond.true427, label %cond.false428

cond.true427:                                     ; preds = %if.end408
  br i1 true, label %if.then429, label %if.end430

cond.false428:                                    ; preds = %if.end408
  br i1 false, label %if.then429, label %if.end430

if.then429:                                       ; preds = %cond.false428, %cond.true427
  %290 = load %struct.padlist*, %struct.padlist** %padlist, align 8
  %291 = load i32, i32* %depth, align 4
  call void @Perl_pad_push(%struct.padlist* %290, i32 %291)
  br label %if.end430

if.end430:                                        ; preds = %if.then429, %cond.false428, %cond.true427
  %292 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %293 = bitcast %struct.av* %292 to i8*
  %294 = bitcast i8* %293 to %struct.sv*
  %295 = bitcast %struct.sv* %294 to i8*
  call void @Perl_save_pushptr(i8* %295, i32 7)
  %296 = load %struct.padlist*, %struct.padlist** %padlist, align 8
  %xpadl_alloc = getelementptr inbounds %struct.padlist, %struct.padlist* %296, i32 0, i32 1
  %297 = load %struct.av**, %struct.av*** %xpadl_alloc, align 8
  %298 = load i32, i32* %depth, align 4
  %idxprom431 = sext i32 %298 to i64
  %arrayidx432 = getelementptr inbounds %struct.av*, %struct.av** %297, i64 %idxprom431
  %299 = load %struct.av*, %struct.av** %arrayidx432, align 8
  store %struct.av* %299, %struct.av** @PL_comppad, align 8
  %300 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %sv_u433 = getelementptr inbounds %struct.av, %struct.av* %300, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u433 to %struct.sv***
  %301 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %301, %struct.sv*** @PL_curpad, align 8
  %302 = load i8, i8* %hasargs, align 1
  %tobool434 = trunc i8 %302 to i1
  br i1 %tobool434, label %cond.true436, label %cond.false437

cond.true436:                                     ; preds = %if.end430
  br i1 true, label %if.then438, label %if.end509

cond.false437:                                    ; preds = %if.end430
  br i1 false, label %if.then438, label %if.end509

if.then438:                                       ; preds = %cond.false437, %cond.true436
  %303 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx439 = getelementptr inbounds %struct.sv*, %struct.sv** %303, i64 0
  %304 = load %struct.sv*, %struct.sv** %arrayidx439, align 8
  %305 = bitcast %struct.sv* %304 to i8*
  %306 = bitcast i8* %305 to %struct.av*
  store %struct.av* %306, %struct.av** %av, align 8
  %307 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags440 = getelementptr inbounds %struct.av, %struct.av* %307, i32 0, i32 2
  %308 = load i32, i32* %sv_flags440, align 4
  %and441 = and i32 %308, 1073741824
  %tobool442 = icmp ne i32 %and441, 0
  br i1 %tobool442, label %cond.true443, label %cond.false444

cond.true443:                                     ; preds = %if.then438
  br i1 true, label %if.then445, label %if.end450

cond.false444:                                    ; preds = %if.then438
  br i1 false, label %if.then445, label %if.end450

if.then445:                                       ; preds = %cond.false444, %cond.true443
  %309 = load %struct.av*, %struct.av** %av, align 8
  call void @Perl_av_clear(%struct.av* %309)
  %310 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags446 = getelementptr inbounds %struct.av, %struct.av* %310, i32 0, i32 2
  %311 = load i32, i32* %sv_flags446, align 4
  %and447 = and i32 %311, -1073741825
  store i32 %and447, i32* %sv_flags446, align 4
  %312 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags448 = getelementptr inbounds %struct.av, %struct.av* %312, i32 0, i32 2
  %313 = load i32, i32* %sv_flags448, align 4
  %or449 = or i32 %313, -2147483648
  store i32 %or449, i32* %sv_flags448, align 4
  br label %if.end450

if.end450:                                        ; preds = %if.then445, %cond.false444, %cond.true443
  %314 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u451 = getelementptr inbounds %struct.gv, %struct.gv* %314, i32 0, i32 3
  %svu_gp452 = bitcast %union.anon.4* %sv_u451 to %struct.gp**
  %315 = load %struct.gp*, %struct.gp** %svu_gp452, align 8
  %add.ptr453 = getelementptr inbounds %struct.gp, %struct.gp* %315, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr453, i32 0, i32 6
  store %struct.av** %gp_av, %struct.av*** %defavp, align 8
  %316 = load %struct.av**, %struct.av*** %defavp, align 8
  %317 = load %struct.av*, %struct.av** %316, align 8
  %318 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u454 = getelementptr inbounds %struct.context, %struct.context* %318, i32 0, i32 0
  %cx_blk455 = bitcast %union.anon.17* %cx_u454 to %struct.block*
  %blk_u456 = getelementptr inbounds %struct.block, %struct.block* %cx_blk455, i32 0, i32 8
  %blku_sub457 = bitcast %union.anon.20* %blk_u456 to %struct.block_sub*
  %savearray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub457, i32 0, i32 2
  store %struct.av* %317, %struct.av** %savearray, align 8
  %319 = load %struct.av*, %struct.av** %av, align 8
  %sv_refcnt458 = getelementptr inbounds %struct.av, %struct.av* %319, i32 0, i32 1
  %320 = load i32, i32* %sv_refcnt458, align 8
  %inc459 = add i32 %320, 1
  store i32 %inc459, i32* %sv_refcnt458, align 8
  %321 = load %struct.av*, %struct.av** %av, align 8
  %322 = bitcast %struct.av* %321 to i8*
  %323 = bitcast i8* %322 to %struct.sv*
  %324 = bitcast %struct.sv* %323 to i8*
  %325 = bitcast i8* %324 to %struct.av*
  %326 = load %struct.av**, %struct.av*** %defavp, align 8
  store %struct.av* %325, %struct.av** %326, align 8
  %327 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %328 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u460 = getelementptr inbounds %struct.context, %struct.context* %328, i32 0, i32 0
  %cx_blk461 = bitcast %union.anon.17* %cx_u460 to %struct.block*
  %blk_u462 = getelementptr inbounds %struct.block, %struct.block* %cx_blk461, i32 0, i32 8
  %blku_sub463 = bitcast %union.anon.20* %blk_u462 to %struct.block_sub*
  %oldcomppad = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub463, i32 0, i32 5
  store %struct.av* %327, %struct.av** %oldcomppad, align 8
  %329 = load %struct.av*, %struct.av** %av, align 8
  %330 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u464 = getelementptr inbounds %struct.context, %struct.context* %330, i32 0, i32 0
  %cx_blk465 = bitcast %union.anon.17* %cx_u464 to %struct.block*
  %blk_u466 = getelementptr inbounds %struct.block, %struct.block* %cx_blk465, i32 0, i32 8
  %blku_sub467 = bitcast %union.anon.20* %blk_u466 to %struct.block_sub*
  %argarray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub467, i32 0, i32 3
  store %struct.av* %329, %struct.av** %argarray, align 8
  %331 = load %struct.sv**, %struct.sv*** %sp, align 8
  %332 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast468 = ptrtoint %struct.sv** %331 to i64
  %sub.ptr.rhs.cast469 = ptrtoint %struct.sv** %332 to i64
  %sub.ptr.sub470 = sub i64 %sub.ptr.lhs.cast468, %sub.ptr.rhs.cast469
  %sub.ptr.div471 = sdiv exact i64 %sub.ptr.sub470, 8
  store i64 %sub.ptr.div471, i64* %items, align 8
  %333 = load i64, i64* %items, align 8
  %sub = sub nsw i64 %333, 1
  %334 = load %struct.av*, %struct.av** %av, align 8
  %sv_any472 = getelementptr inbounds %struct.av, %struct.av* %334, i32 0, i32 0
  %335 = load %struct.xpvav*, %struct.xpvav** %sv_any472, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %335, i32 0, i32 3
  %336 = load i64, i64* %xav_max, align 8
  %cmp473 = icmp sgt i64 %sub, %336
  br i1 %cmp473, label %cond.true475, label %cond.false476

cond.true475:                                     ; preds = %if.end450
  br i1 true, label %if.then477, label %if.end487

cond.false476:                                    ; preds = %if.end450
  br i1 false, label %if.then477, label %if.end487

if.then477:                                       ; preds = %cond.false476, %cond.true475
  %337 = load %struct.av*, %struct.av** %av, align 8
  %sv_any478 = getelementptr inbounds %struct.av, %struct.av* %337, i32 0, i32 0
  %338 = load %struct.xpvav*, %struct.xpvav** %sv_any478, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %338, i32 0, i32 4
  %339 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  store %struct.sv** %339, %struct.sv*** %ary, align 8
  %340 = load i64, i64* %items, align 8
  %sub479 = sub nsw i64 %340, 1
  %341 = load %struct.av*, %struct.av** %av, align 8
  %sv_any480 = getelementptr inbounds %struct.av, %struct.av* %341, i32 0, i32 0
  %342 = load %struct.xpvav*, %struct.xpvav** %sv_any480, align 8
  %xav_max481 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %342, i32 0, i32 3
  store i64 %sub479, i64* %xav_max481, align 8
  %343 = load %struct.sv**, %struct.sv*** %ary, align 8
  %344 = bitcast %struct.sv** %343 to i8*
  %345 = load i64, i64* %items, align 8
  %mul = mul i64 %345, 8
  %call482 = call i8* @Perl_safesysrealloc(i8* %344, i64 %mul)
  %346 = bitcast i8* %call482 to %struct.sv**
  store %struct.sv** %346, %struct.sv*** %ary, align 8
  %347 = load %struct.sv**, %struct.sv*** %ary, align 8
  %348 = load %struct.av*, %struct.av** %av, align 8
  %sv_any483 = getelementptr inbounds %struct.av, %struct.av* %348, i32 0, i32 0
  %349 = load %struct.xpvav*, %struct.xpvav** %sv_any483, align 8
  %xav_alloc484 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %349, i32 0, i32 4
  store %struct.sv** %347, %struct.sv*** %xav_alloc484, align 8
  %350 = load %struct.sv**, %struct.sv*** %ary, align 8
  %351 = load %struct.av*, %struct.av** %av, align 8
  %sv_u485 = getelementptr inbounds %struct.av, %struct.av* %351, i32 0, i32 3
  %svu_array486 = bitcast %union.anon.0* %sv_u485 to %struct.sv***
  store %struct.sv** %350, %struct.sv*** %svu_array486, align 8
  br label %if.end487

if.end487:                                        ; preds = %if.then477, %cond.false476, %cond.true475
  %352 = load %struct.av*, %struct.av** %av, align 8
  %sv_u488 = getelementptr inbounds %struct.av, %struct.av* %352, i32 0, i32 3
  %svu_array489 = bitcast %union.anon.0* %sv_u488 to %struct.sv***
  %353 = load %struct.sv**, %struct.sv*** %svu_array489, align 8
  %354 = bitcast %struct.sv** %353 to i8*
  %355 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr490 = getelementptr inbounds %struct.sv*, %struct.sv** %355, i64 1
  %356 = bitcast %struct.sv** %add.ptr490 to i8*
  %357 = load i64, i64* %items, align 8
  %mul491 = mul i64 %357, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %354, i8* align 1 %356, i64 %mul491, i1 false)
  %358 = load i64, i64* %items, align 8
  %sub492 = sub nsw i64 %358, 1
  %359 = load %struct.av*, %struct.av** %av, align 8
  %sv_any493 = getelementptr inbounds %struct.av, %struct.av* %359, i32 0, i32 0
  %360 = load %struct.xpvav*, %struct.xpvav** %sv_any493, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %360, i32 0, i32 2
  store i64 %sub492, i64* %xav_fill, align 8
  %361 = load %struct.av*, %struct.av** %av, align 8
  %sv_u494 = getelementptr inbounds %struct.av, %struct.av* %361, i32 0, i32 3
  %svu_array495 = bitcast %union.anon.0* %sv_u494 to %struct.sv***
  %362 = load %struct.sv**, %struct.sv*** %svu_array495, align 8
  store %struct.sv** %362, %struct.sv*** %mark, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end507, %if.end487
  %363 = load i64, i64* %items, align 8
  %dec = add nsw i64 %363, -1
  store i64 %dec, i64* %items, align 8
  %tobool496 = icmp ne i64 %363, 0
  br i1 %tobool496, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %364 = load %struct.sv**, %struct.sv*** %mark, align 8
  %365 = load %struct.sv*, %struct.sv** %364, align 8
  %tobool497 = icmp ne %struct.sv* %365, null
  br i1 %tobool497, label %if.then498, label %if.end507

if.then498:                                       ; preds = %while.body
  %366 = load %struct.sv**, %struct.sv*** %mark, align 8
  %367 = load %struct.sv*, %struct.sv** %366, align 8
  %sv_flags499 = getelementptr inbounds %struct.sv, %struct.sv* %367, i32 0, i32 2
  %368 = load i32, i32* %sv_flags499, align 4
  %and500 = and i32 %368, 131072
  %tobool501 = icmp ne i32 %and500, 0
  br i1 %tobool501, label %if.then502, label %if.end504

if.then502:                                       ; preds = %if.then498
  %369 = load %struct.sv**, %struct.sv*** %mark, align 8
  %370 = load %struct.sv*, %struct.sv** %369, align 8
  %call503 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %370, i32 1538)
  %371 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call503, %struct.sv** %371, align 8
  br label %if.end504

if.end504:                                        ; preds = %if.then502, %if.then498
  %372 = load %struct.sv**, %struct.sv*** %mark, align 8
  %373 = load %struct.sv*, %struct.sv** %372, align 8
  %sv_flags505 = getelementptr inbounds %struct.sv, %struct.sv* %373, i32 0, i32 2
  %374 = load i32, i32* %sv_flags505, align 4
  %and506 = and i32 %374, -524289
  store i32 %and506, i32* %sv_flags505, align 4
  br label %if.end507

if.end507:                                        ; preds = %if.end504, %while.body
  %375 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr508 = getelementptr inbounds %struct.sv*, %struct.sv** %375, i32 1
  store %struct.sv** %incdec.ptr508, %struct.sv*** %mark, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end509

if.end509:                                        ; preds = %while.end, %cond.false437, %cond.true436
  call void @Perl_save_strlen(i64* @PL_tmps_floor)
  %376 = load i64, i64* @PL_tmps_ix, align 8
  store i64 %376, i64* @PL_tmps_floor, align 8
  %377 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u510 = getelementptr inbounds %struct.context, %struct.context* %377, i32 0, i32 0
  %cx_blk511 = bitcast %union.anon.17* %cx_u510 to %struct.block*
  %blku_u16512 = getelementptr inbounds %struct.block, %struct.block* %cx_blk511, i32 0, i32 2
  %378 = load i16, i16* %blku_u16512, align 2
  %conv513 = zext i16 %378 to i32
  %and514 = and i32 %conv513, 129
  %cmp515 = icmp eq i32 %and514, 128
  br i1 %cmp515, label %land.lhs.true517, label %cond.false523

land.lhs.true517:                                 ; preds = %if.end509
  %379 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any518 = getelementptr inbounds %struct.cv, %struct.cv* %379, i32 0, i32 0
  %380 = load %struct.xpvcv*, %struct.xpvcv** %sv_any518, align 8
  %381 = bitcast %struct.xpvcv* %380 to i8*
  %382 = bitcast i8* %381 to %struct.xpvcv*
  %xcv_flags519 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %382, i32 0, i32 12
  %383 = load i32, i32* %xcv_flags519, align 4
  %and520 = and i32 %383, 2
  %tobool521 = icmp ne i32 %and520, 0
  br i1 %tobool521, label %cond.false523, label %cond.true522

cond.true522:                                     ; preds = %land.lhs.true517
  br i1 true, label %if.then524, label %if.end526

cond.false523:                                    ; preds = %land.lhs.true517, %if.end509
  br i1 false, label %if.then524, label %if.end526

if.then524:                                       ; preds = %cond.false523, %cond.true522
  %call525 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.42, i64 0, i64 0))
  store %struct.op* %call525, %struct.op** %retval, align 8
  br label %return

if.end526:                                        ; preds = %cond.false523, %cond.true522
  %384 = load i32, i32* %depth, align 4
  %cmp527 = icmp eq i32 %384, 100
  br i1 %cmp527, label %land.lhs.true529, label %cond.false544

land.lhs.true529:                                 ; preds = %if.end526
  %call530 = call zeroext i1 @Perl_ckwarn(i32 18)
  br i1 %call530, label %land.lhs.true532, label %cond.false544

land.lhs.true532:                                 ; preds = %land.lhs.true529
  %385 = load i32, i32* @PL_perldb, align 4
  %and533 = and i32 %385, 1
  %tobool534 = icmp ne i32 %and533, 0
  br i1 %tobool534, label %land.lhs.true535, label %cond.true543

land.lhs.true535:                                 ; preds = %land.lhs.true532
  %386 = load %struct.cv*, %struct.cv** %cv, align 8
  %387 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_u536 = getelementptr inbounds %struct.gv, %struct.gv* %387, i32 0, i32 3
  %svu_gp537 = bitcast %union.anon.4* %sv_u536 to %struct.gp**
  %388 = load %struct.gp*, %struct.gp** %svu_gp537, align 8
  %add.ptr538 = getelementptr inbounds %struct.gp, %struct.gp* %388, i64 0
  %gp_cv539 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr538, i32 0, i32 2
  %389 = load %struct.cv*, %struct.cv** %gp_cv539, align 8
  %add.ptr540 = getelementptr inbounds %struct.cv, %struct.cv* %389, i64 0
  %cmp541 = icmp eq %struct.cv* %386, %add.ptr540
  br i1 %cmp541, label %cond.false544, label %cond.true543

cond.true543:                                     ; preds = %land.lhs.true535, %land.lhs.true532
  br i1 true, label %if.then545, label %if.end546

cond.false544:                                    ; preds = %land.lhs.true535, %land.lhs.true529, %if.end526
  br i1 false, label %if.then545, label %if.end546

if.then545:                                       ; preds = %cond.false544, %cond.true543
  %390 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @Perl_sub_crush_depth(%struct.cv* %390)
  br label %if.end546

if.end546:                                        ; preds = %if.then545, %cond.false544, %cond.true543
  %391 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %391, %struct.sv*** @PL_stack_sp, align 8
  %392 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any547 = getelementptr inbounds %struct.cv, %struct.cv* %392, i32 0, i32 0
  %393 = load %struct.xpvcv*, %struct.xpvcv** %sv_any547, align 8
  %394 = bitcast %struct.xpvcv* %393 to i8*
  %395 = bitcast i8* %394 to %struct.xpvcv*
  %xcv_start_u548 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %395, i32 0, i32 5
  %xcv_start549 = bitcast %union.anon.10* %xcv_start_u548 to %struct.op**
  %396 = load %struct.op*, %struct.op** %xcv_start549, align 8
  store %struct.op* %396, %struct.op** %retval, align 8
  br label %return

if.else550:                                       ; preds = %cond.end322
  %397 = load i32*, i32** @PL_markstack_ptr, align 8
  %398 = load i32, i32* %397, align 4
  %conv551 = sext i32 %398 to i64
  store i64 %conv551, i64* %markix, align 8
  call void @Perl_save_strlen(i64* @PL_tmps_floor)
  %399 = load i64, i64* @PL_tmps_ix, align 8
  store i64 %399, i64* @PL_tmps_floor, align 8
  %400 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %400, %struct.sv*** @PL_stack_sp, align 8
  %401 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private552 = getelementptr inbounds %struct.op, %struct.op* %401, i32 0, i32 6
  %402 = load i8, i8* %op_private552, align 1
  %conv553 = zext i8 %402 to i32
  %403 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags554 = getelementptr inbounds %struct.op, %struct.op* %403, i32 0, i32 5
  %404 = load i8, i8* %op_flags554, align 2
  %conv555 = zext i8 %404 to i32
  %and556 = and i32 %conv555, 3
  %tobool557 = icmp ne i32 %and556, 0
  br i1 %tobool557, label %cond.true558, label %cond.false559

cond.true558:                                     ; preds = %if.else550
  br label %cond.end571

cond.false559:                                    ; preds = %if.else550
  %405 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private560 = getelementptr inbounds %struct.op, %struct.op* %405, i32 0, i32 6
  %406 = load i8, i8* %op_private560, align 1
  %conv561 = zext i8 %406 to i32
  %and562 = and i32 %conv561, 129
  %tobool563 = icmp ne i32 %and562, 0
  br i1 %tobool563, label %cond.false565, label %cond.true564

cond.true564:                                     ; preds = %cond.false559
  br label %cond.end569

cond.false565:                                    ; preds = %cond.false559
  %call566 = call i32 @Perl_is_lvalue_sub()
  %conv567 = trunc i32 %call566 to i8
  %conv568 = zext i8 %conv567 to i32
  br label %cond.end569

cond.end569:                                      ; preds = %cond.false565, %cond.true564
  %cond570 = phi i32 [ 0, %cond.true564 ], [ %conv568, %cond.false565 ]
  br label %cond.end571

cond.end571:                                      ; preds = %cond.end569, %cond.true558
  %cond572 = phi i32 [ 129, %cond.true558 ], [ %cond570, %cond.end569 ]
  %and573 = and i32 %conv553, %cond572
  %and574 = and i32 %and573, 129
  %cmp575 = icmp eq i32 %and574, 128
  br i1 %cmp575, label %land.lhs.true577, label %cond.false583

land.lhs.true577:                                 ; preds = %cond.end571
  %407 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any578 = getelementptr inbounds %struct.cv, %struct.cv* %407, i32 0, i32 0
  %408 = load %struct.xpvcv*, %struct.xpvcv** %sv_any578, align 8
  %409 = bitcast %struct.xpvcv* %408 to i8*
  %410 = bitcast i8* %409 to %struct.xpvcv*
  %xcv_flags579 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %410, i32 0, i32 12
  %411 = load i32, i32* %xcv_flags579, align 4
  %and580 = and i32 %411, 2
  %tobool581 = icmp ne i32 %and580, 0
  br i1 %tobool581, label %cond.false583, label %cond.true582

cond.true582:                                     ; preds = %land.lhs.true577
  br i1 true, label %if.then584, label %if.end586

cond.false583:                                    ; preds = %land.lhs.true577, %cond.end571
  br i1 false, label %if.then584, label %if.end586

if.then584:                                       ; preds = %cond.false583, %cond.true582
  %call585 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.42, i64 0, i64 0))
  store %struct.op* %call585, %struct.op** %retval, align 8
  br label %return

if.end586:                                        ; preds = %cond.false583, %cond.true582
  %412 = load i8, i8* %hasargs, align 1
  %tobool587 = trunc i8 %412 to i1
  br i1 %tobool587, label %cond.false595, label %land.lhs.true588

land.lhs.true588:                                 ; preds = %if.end586
  %413 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u589 = getelementptr inbounds %struct.gv, %struct.gv* %413, i32 0, i32 3
  %svu_gp590 = bitcast %union.anon.4* %sv_u589 to %struct.gp**
  %414 = load %struct.gp*, %struct.gp** %svu_gp590, align 8
  %add.ptr591 = getelementptr inbounds %struct.gp, %struct.gp* %414, i64 0
  %gp_av592 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr591, i32 0, i32 6
  %415 = load %struct.av*, %struct.av** %gp_av592, align 8
  %tobool593 = icmp ne %struct.av* %415, null
  br i1 %tobool593, label %cond.true594, label %cond.false595

cond.true594:                                     ; preds = %land.lhs.true588
  br i1 true, label %if.then596, label %if.else661

cond.false595:                                    ; preds = %land.lhs.true588, %if.end586
  br i1 false, label %if.then596, label %if.else661

if.then596:                                       ; preds = %cond.false595, %cond.true594
  %416 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u598 = getelementptr inbounds %struct.gv, %struct.gv* %416, i32 0, i32 3
  %svu_gp599 = bitcast %union.anon.4* %sv_u598 to %struct.gp**
  %417 = load %struct.gp*, %struct.gp** %svu_gp599, align 8
  %add.ptr600 = getelementptr inbounds %struct.gp, %struct.gp* %417, i64 0
  %gp_av601 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr600, i32 0, i32 6
  %418 = load %struct.av*, %struct.av** %gp_av601, align 8
  store %struct.av* %418, %struct.av** %av597, align 8
  %419 = load %struct.av*, %struct.av** %av597, align 8
  %420 = bitcast %struct.av* %419 to %struct.sv*
  %sv_flags603 = getelementptr inbounds %struct.sv, %struct.sv* %420, i32 0, i32 2
  %421 = load i32, i32* %sv_flags603, align 4
  %and604 = and i32 %421, 8388608
  %tobool605 = icmp ne i32 %and604, 0
  br i1 %tobool605, label %cond.true606, label %cond.false609

cond.true606:                                     ; preds = %if.then596
  %422 = load %struct.av*, %struct.av** %av597, align 8
  %423 = bitcast %struct.av* %422 to i8*
  %424 = bitcast i8* %423 to %struct.sv*
  %call607 = call i32 @Perl_mg_size(%struct.sv* %424)
  %conv608 = sext i32 %call607 to i64
  br label %cond.end612

cond.false609:                                    ; preds = %if.then596
  %425 = load %struct.av*, %struct.av** %av597, align 8
  %sv_any610 = getelementptr inbounds %struct.av, %struct.av* %425, i32 0, i32 0
  %426 = load %struct.xpvav*, %struct.xpvav** %sv_any610, align 8
  %xav_fill611 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %426, i32 0, i32 2
  %427 = load i64, i64* %xav_fill611, align 8
  br label %cond.end612

cond.end612:                                      ; preds = %cond.false609, %cond.true606
  %cond613 = phi i64 [ %conv608, %cond.true606 ], [ %427, %cond.false609 ]
  %add = add nsw i64 %cond613, 1
  store i64 %add, i64* %items602, align 8
  %428 = load i64, i64* %items602, align 8
  %tobool614 = icmp ne i64 %428, 0
  br i1 %tobool614, label %if.then615, label %if.end660

if.then615:                                       ; preds = %cond.end612
  store i64 0, i64* %i, align 8
  %429 = load %struct.av*, %struct.av** %av597, align 8
  %sv_flags616 = getelementptr inbounds %struct.av, %struct.av* %429, i32 0, i32 2
  %430 = load i32, i32* %sv_flags616, align 4
  %and617 = and i32 %430, 8388608
  %tobool618 = icmp ne i32 %and617, 0
  %431 = zext i1 %tobool618 to i64
  %cond619 = select i1 %tobool618, i32 1, i32 0
  %tobool620 = icmp ne i32 %cond619, 0
  %frombool621 = zext i1 %tobool620 to i8
  store i8 %frombool621, i8* %m, align 1
  br label %do.body

do.body:                                          ; preds = %if.then615
  %432 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %433 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast622 = ptrtoint %struct.sv** %432 to i64
  %sub.ptr.rhs.cast623 = ptrtoint %struct.sv** %433 to i64
  %sub.ptr.sub624 = sub i64 %sub.ptr.lhs.cast622, %sub.ptr.rhs.cast623
  %sub.ptr.div625 = sdiv exact i64 %sub.ptr.sub624, 8
  %434 = load i64, i64* %items602, align 8
  %cmp626 = icmp slt i64 %sub.ptr.div625, %434
  br i1 %cmp626, label %cond.true628, label %cond.false629

cond.true628:                                     ; preds = %do.body
  br i1 true, label %if.then630, label %if.end632

cond.false629:                                    ; preds = %do.body
  br i1 false, label %if.then630, label %if.end632

if.then630:                                       ; preds = %cond.false629, %cond.true628
  %435 = load %struct.sv**, %struct.sv*** %sp, align 8
  %436 = load %struct.sv**, %struct.sv*** %sp, align 8
  %437 = load i64, i64* %items602, align 8
  %call631 = call %struct.sv** @Perl_stack_grow(%struct.sv** %435, %struct.sv** %436, i64 %437)
  store %struct.sv** %call631, %struct.sv*** %sp, align 8
  %438 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end632

if.end632:                                        ; preds = %if.then630, %cond.false629, %cond.true628
  br label %do.end

do.end:                                           ; preds = %if.end632
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %439 = load i64, i64* %i, align 8
  %440 = load i64, i64* %items602, align 8
  %cmp633 = icmp slt i64 %439, %440
  br i1 %cmp633, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %441 = load i8, i8* %m, align 1
  %tobool636 = trunc i8 %441 to i1
  br i1 %tobool636, label %if.then637, label %if.else644

if.then637:                                       ; preds = %for.body
  %442 = load %struct.av*, %struct.av** %av597, align 8
  %443 = load i64, i64* %i, align 8
  %call638 = call %struct.sv** @Perl_av_fetch(%struct.av* %442, i64 %443, i32 0)
  store %struct.sv** %call638, %struct.sv*** %svp, align 8
  %444 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool639 = icmp ne %struct.sv** %444, null
  br i1 %tobool639, label %cond.true640, label %cond.false641

cond.true640:                                     ; preds = %if.then637
  %445 = load %struct.sv**, %struct.sv*** %svp, align 8
  %446 = load %struct.sv*, %struct.sv** %445, align 8
  br label %cond.end642

cond.false641:                                    ; preds = %if.then637
  br label %cond.end642

cond.end642:                                      ; preds = %cond.false641, %cond.true640
  %cond643 = phi %struct.sv* [ %446, %cond.true640 ], [ null, %cond.false641 ]
  store %struct.sv* %cond643, %struct.sv** %sv635, align 8
  br label %if.end648

if.else644:                                       ; preds = %for.body
  %447 = load %struct.av*, %struct.av** %av597, align 8
  %sv_u645 = getelementptr inbounds %struct.av, %struct.av* %447, i32 0, i32 3
  %svu_array646 = bitcast %union.anon.0* %sv_u645 to %struct.sv***
  %448 = load %struct.sv**, %struct.sv*** %svu_array646, align 8
  %449 = load i64, i64* %i, align 8
  %arrayidx647 = getelementptr inbounds %struct.sv*, %struct.sv** %448, i64 %449
  %450 = load %struct.sv*, %struct.sv** %arrayidx647, align 8
  store %struct.sv* %450, %struct.sv** %sv635, align 8
  br label %if.end648

if.end648:                                        ; preds = %if.else644, %cond.end642
  %451 = load %struct.sv*, %struct.sv** %sv635, align 8
  %tobool649 = icmp ne %struct.sv* %451, null
  br i1 %tobool649, label %if.then650, label %if.else653

if.then650:                                       ; preds = %if.end648
  %452 = load %struct.sv*, %struct.sv** %sv635, align 8
  %453 = load %struct.sv**, %struct.sv*** %sp, align 8
  %454 = load i64, i64* %i, align 8
  %add651 = add nsw i64 %454, 1
  %arrayidx652 = getelementptr inbounds %struct.sv*, %struct.sv** %453, i64 %add651
  store %struct.sv* %452, %struct.sv** %arrayidx652, align 8
  br label %if.end657

if.else653:                                       ; preds = %if.end648
  %455 = load %struct.av*, %struct.av** %av597, align 8
  %456 = load i64, i64* %i, align 8
  %call654 = call %struct.sv* @Perl_newSVavdefelem(%struct.av* %455, i64 %456, i1 zeroext true)
  %457 = load %struct.sv**, %struct.sv*** %sp, align 8
  %458 = load i64, i64* %i, align 8
  %add655 = add nsw i64 %458, 1
  %arrayidx656 = getelementptr inbounds %struct.sv*, %struct.sv** %457, i64 %add655
  store %struct.sv* %call654, %struct.sv** %arrayidx656, align 8
  br label %if.end657

if.end657:                                        ; preds = %if.else653, %if.then650
  br label %for.inc

for.inc:                                          ; preds = %if.end657
  %459 = load i64, i64* %i, align 8
  %inc658 = add nsw i64 %459, 1
  store i64 %inc658, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %460 = load i64, i64* %items602, align 8
  %461 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr659 = getelementptr inbounds %struct.sv*, %struct.sv** %461, i64 %460
  store %struct.sv** %add.ptr659, %struct.sv*** %sp, align 8
  %462 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %462, %struct.sv*** @PL_stack_sp, align 8
  br label %if.end660

if.end660:                                        ; preds = %for.end, %cond.end612
  br label %if.end683

if.else661:                                       ; preds = %cond.false595, %cond.true594
  %463 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %464 = load i64, i64* %markix, align 8
  %add.ptr663 = getelementptr inbounds %struct.sv*, %struct.sv** %463, i64 %464
  store %struct.sv** %add.ptr663, %struct.sv*** %mark662, align 8
  %465 = load %struct.sv**, %struct.sv*** %sp, align 8
  %466 = load %struct.sv**, %struct.sv*** %mark662, align 8
  %sub.ptr.lhs.cast665 = ptrtoint %struct.sv** %465 to i64
  %sub.ptr.rhs.cast666 = ptrtoint %struct.sv** %466 to i64
  %sub.ptr.sub667 = sub i64 %sub.ptr.lhs.cast665, %sub.ptr.rhs.cast666
  %sub.ptr.div668 = sdiv exact i64 %sub.ptr.sub667, 8
  store i64 %sub.ptr.div668, i64* %items664, align 8
  br label %while.cond669

while.cond669:                                    ; preds = %if.end681, %if.else661
  %467 = load i64, i64* %items664, align 8
  %dec670 = add nsw i64 %467, -1
  store i64 %dec670, i64* %items664, align 8
  %tobool671 = icmp ne i64 %467, 0
  br i1 %tobool671, label %while.body672, label %while.end682

while.body672:                                    ; preds = %while.cond669
  %468 = load %struct.sv**, %struct.sv*** %mark662, align 8
  %incdec.ptr673 = getelementptr inbounds %struct.sv*, %struct.sv** %468, i32 1
  store %struct.sv** %incdec.ptr673, %struct.sv*** %mark662, align 8
  %469 = load %struct.sv**, %struct.sv*** %mark662, align 8
  %470 = load %struct.sv*, %struct.sv** %469, align 8
  %tobool674 = icmp ne %struct.sv* %470, null
  br i1 %tobool674, label %land.lhs.true675, label %if.end681

land.lhs.true675:                                 ; preds = %while.body672
  %471 = load %struct.sv**, %struct.sv*** %mark662, align 8
  %472 = load %struct.sv*, %struct.sv** %471, align 8
  %sv_flags676 = getelementptr inbounds %struct.sv, %struct.sv* %472, i32 0, i32 2
  %473 = load i32, i32* %sv_flags676, align 4
  %and677 = and i32 %473, 131072
  %tobool678 = icmp ne i32 %and677, 0
  br i1 %tobool678, label %if.then679, label %if.end681

if.then679:                                       ; preds = %land.lhs.true675
  %474 = load %struct.sv**, %struct.sv*** %mark662, align 8
  %475 = load %struct.sv*, %struct.sv** %474, align 8
  %call680 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %475, i32 1538)
  %476 = load %struct.sv**, %struct.sv*** %mark662, align 8
  store %struct.sv* %call680, %struct.sv** %476, align 8
  br label %if.end681

if.end681:                                        ; preds = %if.then679, %land.lhs.true675, %while.body672
  br label %while.cond669

while.end682:                                     ; preds = %while.cond669
  br label %if.end683

if.end683:                                        ; preds = %while.end682, %if.end660
  %477 = load %struct.cop*, %struct.cop** @PL_curcopdb, align 8
  %tobool684 = icmp ne %struct.cop* %477, null
  br i1 %tobool684, label %cond.true685, label %cond.false686

cond.true685:                                     ; preds = %if.end683
  br i1 true, label %if.then687, label %if.end688

cond.false686:                                    ; preds = %if.end683
  br i1 false, label %if.then687, label %if.end688

if.then687:                                       ; preds = %cond.false686, %cond.true685
  call void @Perl_save_vptr(i8* bitcast (%struct.cop** @PL_curcop to i8*))
  %478 = load %struct.cop*, %struct.cop** @PL_curcopdb, align 8
  store %struct.cop* %478, %struct.cop** @PL_curcop, align 8
  store %struct.cop* null, %struct.cop** @PL_curcopdb, align 8
  br label %if.end688

if.end688:                                        ; preds = %if.then687, %cond.false686, %cond.true685
  %479 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any689 = getelementptr inbounds %struct.cv, %struct.cv* %479, i32 0, i32 0
  %480 = load %struct.xpvcv*, %struct.xpvcv** %sv_any689, align 8
  %481 = bitcast %struct.xpvcv* %480 to i8*
  %482 = bitcast i8* %481 to %struct.xpvcv*
  %xcv_root_u690 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %482, i32 0, i32 6
  %xcv_xsub691 = bitcast %union.anon.11* %xcv_root_u690 to void (%struct.cv*)**
  %483 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub691, align 8
  %484 = load %struct.cv*, %struct.cv** %cv, align 8
  call void %483(%struct.cv* %484)
  %485 = load i32, i32* %gimme, align 4
  %cmp692 = icmp eq i32 %485, 2
  br i1 %cmp692, label %if.then694, label %if.end708

if.then694:                                       ; preds = %if.end688
  %486 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %487 = load i64, i64* %markix, align 8
  %add.ptr696 = getelementptr inbounds %struct.sv*, %struct.sv** %486, i64 %487
  %add.ptr697 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr696, i64 1
  store %struct.sv** %add.ptr697, %struct.sv*** %svp695, align 8
  %488 = load %struct.sv**, %struct.sv*** %svp695, align 8
  %489 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %cmp698 = icmp ne %struct.sv** %488, %489
  br i1 %cmp698, label %if.then700, label %if.end707

if.then700:                                       ; preds = %if.then694
  %490 = load %struct.sv**, %struct.sv*** %svp695, align 8
  %491 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %cmp701 = icmp ugt %struct.sv** %490, %491
  br i1 %cmp701, label %cond.true703, label %cond.false704

cond.true703:                                     ; preds = %if.then700
  br label %cond.end705

cond.false704:                                    ; preds = %if.then700
  %492 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %493 = load %struct.sv*, %struct.sv** %492, align 8
  br label %cond.end705

cond.end705:                                      ; preds = %cond.false704, %cond.true703
  %cond706 = phi %struct.sv* [ @PL_sv_undef, %cond.true703 ], [ %493, %cond.false704 ]
  %494 = load %struct.sv**, %struct.sv*** %svp695, align 8
  store %struct.sv* %cond706, %struct.sv** %494, align 8
  %495 = load %struct.sv**, %struct.sv*** %svp695, align 8
  store %struct.sv** %495, %struct.sv*** @PL_stack_sp, align 8
  br label %if.end707

if.end707:                                        ; preds = %cond.end705, %if.then694
  br label %if.end708

if.end708:                                        ; preds = %if.end707, %if.end688
  call void @Perl_pop_scope()
  %496 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next709 = getelementptr inbounds %struct.op, %struct.op* %496, i32 0, i32 0
  %497 = load %struct.op*, %struct.op** %op_next709, align 8
  store %struct.op* %497, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end708, %if.then584, %if.end546, %if.then524, %if.then308, %sorry, %if.then191, %if.then176, %if.then155, %sw.bb141, %if.then123, %if.then105, %if.end61, %if.then
  %498 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %498
}

declare dso_local %struct.cv* @Perl_sv_2cv(%struct.sv*, %struct.hv**, %struct.gv**, i32) #1

declare dso_local void @Perl_save_strlen(i64*) #1

declare dso_local %struct.cv* @Perl_get_cvn_flags(i8*, i64, i32) #1

declare dso_local %struct.sv* @Perl_cv_name(%struct.cv*, %struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.gv* @S_CvGV(%struct.cv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.cv*, align 8
  store %struct.cv* %sv, %struct.cv** %sv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %2 = bitcast %struct.xpvcv* %1 to i8*
  %3 = bitcast i8* %2 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %3, i32 0, i32 12
  %4 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %4, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %call = call %struct.gv* @Perl_cvgv_from_hek(%struct.cv* %5)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.cv, %struct.cv* %6, i32 0, i32 0
  %7 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1, align 8
  %8 = bitcast %struct.xpvcv* %7 to i8*
  %9 = bitcast i8* %8 to %struct.xpvcv*
  %xcv_gv_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %9, i32 0, i32 7
  %xcv_gv = bitcast %union.anon.12* %xcv_gv_u to %struct.gv**
  %10 = load %struct.gv*, %struct.gv** %xcv_gv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %call, %cond.true ], [ %10, %cond.false ]
  ret %struct.gv* %cond
}

declare dso_local %struct.gv* @Perl_gv_autoload_pvn(%struct.hv*, i8*, i64, i32) #1

declare dso_local void @Perl_gv_efullname4(%struct.sv*, %struct.gv*, i8*, i1 zeroext) #1

declare dso_local void @Perl_get_db_sub(%struct.sv**, %struct.cv*) #1

declare dso_local %struct.gv* @Perl_gv_fetchpvn_flags(i8*, i64, i32, i32) #1

declare dso_local i32 @Perl_was_lvalue_sub() #1

declare dso_local void @Perl_pad_push(%struct.padlist*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sub_crush_depth(%struct.cv* %cv) #0 {
entry:
  %cv.addr = alloca %struct.cv*, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %2 = bitcast %struct.xpvcv* %1 to i8*
  %3 = bitcast i8* %2 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %3, i32 0, i32 12
  %4 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %4, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void (i32, i8*, ...) @Perl_warner(i32 18, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.43, i64 0, i64 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %call = call %struct.sv* @Perl_cv_name(%struct.cv* %5, %struct.sv* null, i32 0)
  %6 = bitcast %struct.sv* %call to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 18, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.44, i64 0, i64 0), i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_aelem() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %svp = alloca %struct.sv**, align 8
  %elemsv = alloca %struct.sv*, align 8
  %elem = alloca i64, align 8
  %av = alloca %struct.av*, align 8
  %lval = alloca i32, align 4
  %defer = alloca i32, align 4
  %localizing = alloca i8, align 1
  %preeminent = alloca i8, align 1
  %sv = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  %stash = alloca %struct.hv*, align 8
  %len = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %elemsv, align 8
  %3 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2097408
  %cmp = icmp eq i32 %and, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %7, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %8 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %9, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %call, %cond.false ]
  store i64 %cond, i64* %elem, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.av*
  store %struct.av* %13, %struct.av** %av, align 8
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 5
  %15 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %15 to i32
  %and2 = and i32 %conv, 32
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 6
  %17 = load i8, i8* %op_private, align 1
  %conv3 = zext i8 %17 to i32
  %and4 = and i32 %conv3, 8
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %call6 = call i32 @Perl_is_lvalue_sub()
  %tobool7 = icmp ne i32 %call6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %18 = phi i1 [ false, %lor.rhs ], [ %tobool7, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %cond.end
  %19 = phi i1 [ true, %cond.end ], [ %18, %land.end ]
  %lor.ext = zext i1 %19 to i32
  store i32 %lor.ext, i32* %lval, align 4
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private8 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 6
  %21 = load i8, i8* %op_private8, align 1
  %conv9 = zext i8 %21 to i32
  %and10 = and i32 %conv9, 64
  store i32 %and10, i32* %defer, align 4
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private11 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 6
  %23 = load i8, i8* %op_private11, align 1
  %conv12 = zext i8 %23 to i32
  %and13 = and i32 %conv12, 128
  %tobool14 = icmp ne i32 %and13, 0
  %frombool = zext i1 %tobool14 to i8
  store i8 %frombool, i8* %localizing, align 1
  store i8 1, i8* %preeminent, align 1
  %24 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %25, 2048
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.lhs.true, label %cond.false39

land.lhs.true:                                    ; preds = %lor.end
  %26 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %27, 2097152
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %cond.false39, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %28 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %29, 2048
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %land.lhs.true24, label %land.lhs.true35

land.lhs.true24:                                  ; preds = %lor.lhs.false
  %30 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %31 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %32, 1048576
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %land.lhs.true28, label %land.lhs.true35

land.lhs.true28:                                  ; preds = %land.lhs.true24
  %33 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_u29 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 3
  %svu_rv30 = bitcast %union.anon* %sv_u29 to %struct.sv**
  %34 = load %struct.sv*, %struct.sv** %svu_rv30, align 8
  %sv_any31 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any31, align 8
  %36 = bitcast i8* %35 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %36, i32 0, i32 0
  %37 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags32 = getelementptr inbounds %struct.hv, %struct.hv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %38, 268435456
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %cond.false39, label %land.lhs.true35

land.lhs.true35:                                  ; preds = %land.lhs.true28, %land.lhs.true24, %lor.lhs.false
  %call36 = call zeroext i1 @Perl_ckwarn(i32 12)
  br i1 %call36, label %cond.true38, label %cond.false39

cond.true38:                                      ; preds = %land.lhs.true35
  br i1 true, label %if.then, label %if.end

cond.false39:                                     ; preds = %land.lhs.true35, %land.lhs.true28, %land.lhs.true, %lor.end
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false39, %cond.true38
  %39 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %40 = bitcast %struct.sv* %39 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.27, i64 0, i64 0), i8* %40)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false39, %cond.true38
  %41 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags40 = getelementptr inbounds %struct.av, %struct.av* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %42, 255
  %cmp42 = icmp ne i32 %and41, 11
  br i1 %cmp42, label %cond.true44, label %cond.false45

cond.true44:                                      ; preds = %if.end
  br i1 true, label %if.then46, label %if.end48

cond.false45:                                     ; preds = %if.end
  br i1 false, label %if.then46, label %if.end48

if.then46:                                        ; preds = %cond.false45, %cond.true44
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr47 = getelementptr inbounds %struct.sv*, %struct.sv** %43, i32 1
  store %struct.sv** %incdec.ptr47, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr47, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %44, %struct.sv*** @PL_stack_sp, align 8
  %45 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 0
  %46 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %46, %struct.op** %retval, align 8
  br label %return

if.end48:                                         ; preds = %cond.false45, %cond.true44
  %47 = load i8, i8* %localizing, align 1
  %tobool49 = trunc i8 %47 to i1
  br i1 %tobool49, label %cond.true51, label %cond.false52

cond.true51:                                      ; preds = %if.end48
  br i1 true, label %if.then53, label %if.end84

cond.false52:                                     ; preds = %if.end48
  br i1 false, label %if.then53, label %if.end84

if.then53:                                        ; preds = %cond.false52, %cond.true51
  %48 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags54 = getelementptr inbounds %struct.av, %struct.av* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %49, 8388608
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %lor.lhs.false57, label %if.then80

lor.lhs.false57:                                  ; preds = %if.then53
  %50 = load %struct.av*, %struct.av** %av, align 8
  %51 = bitcast %struct.av* %50 to %struct.sv*
  %call58 = call %struct.magic* @Perl_mg_find(%struct.sv* %51, i32 80)
  store %struct.magic* %call58, %struct.magic** %mg, align 8
  %tobool59 = icmp ne %struct.magic* %call58, null
  br i1 %tobool59, label %lor.lhs.false60, label %if.then80

lor.lhs.false60:                                  ; preds = %lor.lhs.false57
  %52 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %52, i32 0, i32 6
  %53 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool61 = icmp ne %struct.sv* %53, null
  br i1 %tobool61, label %cond.true62, label %cond.false64

cond.true62:                                      ; preds = %lor.lhs.false60
  %54 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj63 = getelementptr inbounds %struct.magic, %struct.magic* %54, i32 0, i32 6
  %55 = load %struct.sv*, %struct.sv** %mg_obj63, align 8
  br label %cond.end67

cond.false64:                                     ; preds = %lor.lhs.false60
  %56 = load %struct.av*, %struct.av** %av, align 8
  %57 = bitcast %struct.av* %56 to i8*
  %58 = bitcast i8* %57 to %struct.sv*
  %call65 = call %struct.sv* @Perl_newRV(%struct.sv* %58)
  %call66 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call65)
  br label %cond.end67

cond.end67:                                       ; preds = %cond.false64, %cond.true62
  %cond68 = phi %struct.sv* [ %55, %cond.true62 ], [ %call66, %cond.false64 ]
  %sv_u69 = getelementptr inbounds %struct.sv, %struct.sv* %cond68, i32 0, i32 3
  %svu_rv70 = bitcast %union.anon* %sv_u69 to %struct.sv**
  %59 = load %struct.sv*, %struct.sv** %svu_rv70, align 8
  %sv_any71 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any71, align 8
  %61 = bitcast i8* %60 to %struct.xpvmg*
  %xmg_stash72 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %61, i32 0, i32 0
  %62 = load %struct.hv*, %struct.hv** %xmg_stash72, align 8
  store %struct.hv* %62, %struct.hv** %stash, align 8
  %tobool73 = icmp ne %struct.hv* %62, null
  br i1 %tobool73, label %land.lhs.true74, label %if.end83

land.lhs.true74:                                  ; preds = %cond.end67
  %63 = load %struct.hv*, %struct.hv** %stash, align 8
  %call75 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %63, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0), i32 1)
  %tobool76 = icmp ne %struct.gv* %call75, null
  br i1 %tobool76, label %land.lhs.true77, label %if.end83

land.lhs.true77:                                  ; preds = %land.lhs.true74
  %64 = load %struct.hv*, %struct.hv** %stash, align 8
  %call78 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i64 0, i64 0), i32 1)
  %tobool79 = icmp ne %struct.gv* %call78, null
  br i1 %tobool79, label %if.then80, label %if.end83

if.then80:                                        ; preds = %land.lhs.true77, %lor.lhs.false57, %if.then53
  %65 = load %struct.av*, %struct.av** %av, align 8
  %66 = load i64, i64* %elem, align 8
  %call81 = call zeroext i1 @Perl_av_exists(%struct.av* %65, i64 %66)
  %frombool82 = zext i1 %call81 to i8
  store i8 %frombool82, i8* %preeminent, align 1
  br label %if.end83

if.end83:                                         ; preds = %if.then80, %land.lhs.true77, %land.lhs.true74, %cond.end67
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %cond.false52, %cond.true51
  %67 = load %struct.av*, %struct.av** %av, align 8
  %68 = load i64, i64* %elem, align 8
  %69 = load i32, i32* %lval, align 4
  %tobool85 = icmp ne i32 %69, 0
  br i1 %tobool85, label %land.rhs86, label %land.end88

land.rhs86:                                       ; preds = %if.end84
  %70 = load i32, i32* %defer, align 4
  %tobool87 = icmp ne i32 %70, 0
  %lnot = xor i1 %tobool87, true
  br label %land.end88

land.end88:                                       ; preds = %land.rhs86, %if.end84
  %71 = phi i1 [ false, %if.end84 ], [ %lnot, %land.rhs86 ]
  %land.ext = zext i1 %71 to i32
  %call89 = call %struct.sv** @Perl_av_fetch(%struct.av* %67, i64 %68, i32 %land.ext)
  store %struct.sv** %call89, %struct.sv*** %svp, align 8
  %72 = load i32, i32* %lval, align 4
  %tobool90 = icmp ne i32 %72, 0
  br i1 %tobool90, label %if.then91, label %if.end138

if.then91:                                        ; preds = %land.end88
  %73 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool92 = icmp ne %struct.sv** %73, null
  br i1 %tobool92, label %lor.lhs.false93, label %if.then95

lor.lhs.false93:                                  ; preds = %if.then91
  %74 = load %struct.sv**, %struct.sv*** %svp, align 8
  %75 = load %struct.sv*, %struct.sv** %74, align 8
  %tobool94 = icmp ne %struct.sv* %75, null
  br i1 %tobool94, label %if.end115, label %if.then95

if.then95:                                        ; preds = %lor.lhs.false93, %if.then91
  %76 = load i32, i32* %defer, align 4
  %tobool96 = icmp ne i32 %76, 0
  br i1 %tobool96, label %if.end99, label %if.then97

if.then97:                                        ; preds = %if.then95
  %77 = load i64, i64* %elem, align 8
  %call98 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_aelem, i64 0, i64 0), i64 %77)
  store %struct.op* %call98, %struct.op** %retval, align 8
  br label %return

if.end99:                                         ; preds = %if.then95
  %78 = load %struct.av*, %struct.av** %av, align 8
  %call100 = call i64 @S_av_top_index(%struct.av* %78)
  store i64 %call100, i64* %len, align 8
  %79 = load %struct.av*, %struct.av** %av, align 8
  %80 = load i64, i64* %elem, align 8
  %cmp101 = icmp slt i64 %80, 0
  br i1 %cmp101, label %land.lhs.true103, label %cond.false108

land.lhs.true103:                                 ; preds = %if.end99
  %81 = load i64, i64* %len, align 8
  %82 = load i64, i64* %elem, align 8
  %add = add nsw i64 %81, %82
  %cmp104 = icmp sge i64 %add, 0
  br i1 %cmp104, label %cond.true106, label %cond.false108

cond.true106:                                     ; preds = %land.lhs.true103
  %83 = load i64, i64* %len, align 8
  %84 = load i64, i64* %elem, align 8
  %add107 = add nsw i64 %83, %84
  br label %cond.end109

cond.false108:                                    ; preds = %land.lhs.true103, %if.end99
  %85 = load i64, i64* %elem, align 8
  br label %cond.end109

cond.end109:                                      ; preds = %cond.false108, %cond.true106
  %cond110 = phi i64 [ %add107, %cond.true106 ], [ %85, %cond.false108 ]
  %call111 = call %struct.sv* @Perl_newSVavdefelem(%struct.av* %79, i64 %cond110, i1 zeroext true)
  %call112 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call111)
  %86 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr113 = getelementptr inbounds %struct.sv*, %struct.sv** %86, i32 1
  store %struct.sv** %incdec.ptr113, %struct.sv*** %sp, align 8
  store %struct.sv* %call112, %struct.sv** %incdec.ptr113, align 8
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %87, %struct.sv*** @PL_stack_sp, align 8
  %88 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next114 = getelementptr inbounds %struct.op, %struct.op* %88, i32 0, i32 0
  %89 = load %struct.op*, %struct.op** %op_next114, align 8
  store %struct.op* %89, %struct.op** %retval, align 8
  br label %return

if.end115:                                        ; preds = %lor.lhs.false93
  %90 = load i8, i8* %localizing, align 1
  %tobool116 = trunc i8 %90 to i1
  br i1 %tobool116, label %cond.true118, label %cond.false119

cond.true118:                                     ; preds = %if.end115
  br i1 true, label %if.then120, label %if.else124

cond.false119:                                    ; preds = %if.end115
  br i1 false, label %if.then120, label %if.else124

if.then120:                                       ; preds = %cond.false119, %cond.true118
  %91 = load i8, i8* %preeminent, align 1
  %tobool121 = trunc i8 %91 to i1
  br i1 %tobool121, label %if.then122, label %if.else

if.then122:                                       ; preds = %if.then120
  %92 = load %struct.av*, %struct.av** %av, align 8
  %93 = load i64, i64* %elem, align 8
  %94 = load %struct.sv**, %struct.sv*** %svp, align 8
  call void @Perl_save_aelem_flags(%struct.av* %92, i64 %93, %struct.sv** %94, i32 1)
  br label %if.end123

if.else:                                          ; preds = %if.then120
  %95 = load %struct.av*, %struct.av** %av, align 8
  %96 = bitcast %struct.av* %95 to i8*
  %97 = bitcast i8* %96 to %struct.av*
  %98 = load i64, i64* %elem, align 8
  call void @Perl_save_adelete(%struct.av* %97, i64 %98)
  br label %if.end123

if.end123:                                        ; preds = %if.else, %if.then122
  br label %if.end137

if.else124:                                       ; preds = %cond.false119, %cond.true118
  %99 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private125 = getelementptr inbounds %struct.op, %struct.op* %99, i32 0, i32 6
  %100 = load i8, i8* %op_private125, align 1
  %conv126 = zext i8 %100 to i32
  %and127 = and i32 %conv126, 48
  %tobool128 = icmp ne i32 %and127, 0
  br i1 %tobool128, label %if.then129, label %if.end136

if.then129:                                       ; preds = %if.else124
  %101 = load %struct.sv**, %struct.sv*** %svp, align 8
  %102 = load %struct.sv*, %struct.sv** %101, align 8
  %103 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private130 = getelementptr inbounds %struct.op, %struct.op* %103, i32 0, i32 6
  %104 = load i8, i8* %op_private130, align 1
  %conv131 = zext i8 %104 to i32
  %and132 = and i32 %conv131, 48
  %call133 = call %struct.sv* @Perl_vivify_ref(%struct.sv* %102, i32 %and132)
  %105 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr134 = getelementptr inbounds %struct.sv*, %struct.sv** %105, i32 1
  store %struct.sv** %incdec.ptr134, %struct.sv*** %sp, align 8
  store %struct.sv* %call133, %struct.sv** %incdec.ptr134, align 8
  %106 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %106, %struct.sv*** @PL_stack_sp, align 8
  %107 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next135 = getelementptr inbounds %struct.op, %struct.op* %107, i32 0, i32 0
  %108 = load %struct.op*, %struct.op** %op_next135, align 8
  store %struct.op* %108, %struct.op** %retval, align 8
  br label %return

if.end136:                                        ; preds = %if.else124
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.end123
  br label %if.end138

if.end138:                                        ; preds = %if.end137, %land.end88
  %109 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool139 = icmp ne %struct.sv** %109, null
  br i1 %tobool139, label %cond.true140, label %cond.false141

cond.true140:                                     ; preds = %if.end138
  %110 = load %struct.sv**, %struct.sv*** %svp, align 8
  %111 = load %struct.sv*, %struct.sv** %110, align 8
  br label %cond.end142

cond.false141:                                    ; preds = %if.end138
  br label %cond.end142

cond.end142:                                      ; preds = %cond.false141, %cond.true140
  %cond143 = phi %struct.sv* [ %111, %cond.true140 ], [ @PL_sv_undef, %cond.false141 ]
  store %struct.sv* %cond143, %struct.sv** %sv, align 8
  %112 = load i32, i32* %lval, align 4
  %tobool144 = icmp ne i32 %112, 0
  br i1 %tobool144, label %if.end155, label %land.lhs.true145

land.lhs.true145:                                 ; preds = %cond.end142
  %113 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags146 = getelementptr inbounds %struct.av, %struct.av* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags146, align 4
  %and147 = and i32 %114, 8388608
  %tobool148 = icmp ne i32 %and147, 0
  br i1 %tobool148, label %land.lhs.true149, label %if.end155

land.lhs.true149:                                 ; preds = %land.lhs.true145
  %115 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags150 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags150, align 4
  %and151 = and i32 %116, 2097152
  %tobool152 = icmp ne i32 %and151, 0
  br i1 %tobool152, label %if.then153, label %if.end155

if.then153:                                       ; preds = %land.lhs.true149
  %117 = load %struct.sv*, %struct.sv** %sv, align 8
  %call154 = call i32 @Perl_mg_get(%struct.sv* %117)
  br label %if.end155

if.end155:                                        ; preds = %if.then153, %land.lhs.true149, %land.lhs.true145, %cond.end142
  %118 = load %struct.sv*, %struct.sv** %sv, align 8
  %119 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr156 = getelementptr inbounds %struct.sv*, %struct.sv** %119, i32 1
  store %struct.sv** %incdec.ptr156, %struct.sv*** %sp, align 8
  store %struct.sv* %118, %struct.sv** %incdec.ptr156, align 8
  %120 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %120, %struct.sv*** @PL_stack_sp, align 8
  %121 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next157 = getelementptr inbounds %struct.op, %struct.op* %121, i32 0, i32 0
  %122 = load %struct.op*, %struct.op** %op_next157, align 8
  store %struct.op* %122, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end155, %if.then129, %cond.end109, %if.then97, %if.then46
  %123 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %123
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_method() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %stash = alloca %struct.hv*, align 8
  %meth = alloca %struct.sv*, align 8
  %rmeth = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %meth, align 8
  %3 = load %struct.sv*, %struct.sv** %meth, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2048
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %meth, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %6 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %6, %struct.sv** %rmeth, align 8
  %7 = load %struct.sv*, %struct.sv** %rmeth, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %8, 255
  %cmp = icmp eq i32 %and2, 13
  br i1 %cmp, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %9 = load %struct.sv*, %struct.sv** %rmeth, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %9, %struct.sv** %10, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %11, %struct.sv*** @PL_stack_sp, align 8
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 0
  %13 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %13, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %14 = load %struct.sv*, %struct.sv** %meth, align 8
  %call = call %struct.hv* @S_opmethod_stash(%struct.sv* %14)
  store %struct.hv* %call, %struct.hv** %stash, align 8
  %15 = load %struct.hv*, %struct.hv** %stash, align 8
  %16 = load %struct.sv*, %struct.sv** %meth, align 8
  %call5 = call %struct.gv* @Perl_gv_fetchmethod_sv_flags(%struct.hv* %15, %struct.sv* %16, i32 768)
  store %struct.gv* %call5, %struct.gv** %gv, align 8
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags6 = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %18, 255
  %cmp8 = icmp eq i32 %and7, 9
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end4
  %19 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u9 = getelementptr inbounds %struct.gv, %struct.gv* %19, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u9 to %struct.gp**
  %20 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %20, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %21 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr10 = getelementptr inbounds %struct.cv, %struct.cv* %21, i64 0
  %22 = bitcast %struct.cv* %add.ptr10 to i8*
  %23 = bitcast i8* %22 to %struct.sv*
  br label %cond.end

cond.false:                                       ; preds = %if.end4
  %24 = load %struct.gv*, %struct.gv** %gv, align 8
  %25 = bitcast %struct.gv* %24 to i8*
  %26 = bitcast i8* %25 to %struct.sv*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %23, %cond.true ], [ %26, %cond.false ]
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond, %struct.sv** %27, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %28, %struct.sv*** @PL_stack_sp, align 8
  %29 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next11 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 0
  %30 = load %struct.op*, %struct.op** %op_next11, align 8
  store %struct.op* %30, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then3
  %31 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %31
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.hv* @S_opmethod_stash(%struct.sv* %meth) #0 {
entry:
  %retval = alloca %struct.hv*, align 8
  %meth.addr = alloca %struct.sv*, align 8
  %ob = alloca %struct.sv*, align 8
  %stash = alloca %struct.hv*, align 8
  %sv = alloca %struct.sv*, align 8
  %iogv = alloca %struct.gv*, align 8
  %packlen = alloca i64, align 8
  %packname = alloca i8*, align 8
  %packname_utf8 = alloca i32, align 4
  store %struct.sv* %meth, %struct.sv** %meth.addr, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %1 = load i32*, i32** @PL_markstack_ptr, align 8
  %2 = load i32, i32* %1, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %0, i64 %idx.ext
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %cmp = icmp eq %struct.sv** %add.ptr, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %5 = bitcast %struct.sv* %4 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.47, i64 0, i64 0), i8* %5)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %7 = load i32*, i32** @PL_markstack_ptr, align 8
  %8 = load i32, i32* %7, align 4
  %idx.ext1 = sext i32 %8 to i64
  %add.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %idx.ext1
  %add.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr2, i64 1
  %9 = load %struct.sv*, %struct.sv** %add.ptr3, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ null, %cond.true ], [ %9, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %sv, align 8
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool = icmp ne %struct.sv* %10, null
  br i1 %tobool, label %cond.false5, label %cond.true4

cond.true4:                                       ; preds = %cond.end
  br i1 true, label %if.then, label %if.end

cond.false5:                                      ; preds = %cond.end
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false5, %cond.true4
  br label %undefined

undefined:                                        ; preds = %if.then36, %if.then
  %11 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.48, i64 0, i64 0), i8* %12)
  br label %if.end

if.end:                                           ; preds = %undefined, %cond.false5, %cond.true4
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and = and i32 %14, 2097152
  %tobool6 = icmp ne i32 %and, 0
  br i1 %tobool6, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %if.end
  br i1 true, label %if.then9, label %if.else

cond.false8:                                      ; preds = %if.end
  br i1 false, label %if.then9, label %if.else

if.then9:                                         ; preds = %cond.false8, %cond.true7
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %15)
  br label %if.end20

if.else:                                          ; preds = %cond.false8, %cond.true7
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %17, 268435456
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %if.else
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any, align 8
  %20 = bitcast i8* %19 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.26* %xpv_len_u to i64*
  %21 = load i64, i64* %xpvlenu_len, align 8
  %cmp13 = icmp eq i64 %21, 0
  br i1 %cmp13, label %if.then14, label %if.end19

if.then14:                                        ; preds = %land.lhs.true
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %call15 = call %struct.hv* @Perl_gv_stashsv(%struct.sv* %22, i32 4096)
  store %struct.hv* %call15, %struct.hv** %stash, align 8
  %23 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool16 = icmp ne %struct.hv* %23, null
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.then14
  %24 = load %struct.hv*, %struct.hv** %stash, align 8
  store %struct.hv* %24, %struct.hv** %retval, align 8
  br label %return

if.end18:                                         ; preds = %if.then14
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %land.lhs.true, %if.else
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.then9
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %26, 2048
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %if.then24, label %if.else25

if.then24:                                        ; preds = %if.end20
  %27 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %28 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %29 = bitcast %struct.sv* %28 to i8*
  %30 = bitcast i8* %29 to %struct.sv*
  store %struct.sv* %30, %struct.sv** %ob, align 8
  br label %if.end151

if.else25:                                        ; preds = %if.end20
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %32, 65280
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.else37, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else25
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %34, 255
  %cmp31 = icmp eq i32 %and30, 8
  br i1 %cmp31, label %if.else37, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %lor.lhs.false
  %35 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %36, 16826623
  %cmp35 = icmp eq i32 %and34, 16777226
  br i1 %cmp35, label %if.else37, label %if.then36

if.then36:                                        ; preds = %lor.lhs.false32
  br label %undefined

if.else37:                                        ; preds = %lor.lhs.false32, %lor.lhs.false, %if.else25
  %37 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %38, 49152
  %cmp40 = icmp eq i32 %and39, 32768
  br i1 %cmp40, label %land.lhs.true41, label %if.else86

land.lhs.true41:                                  ; preds = %if.else37
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %40, 255
  %cmp44 = icmp eq i32 %and43, 9
  br i1 %cmp44, label %if.then49, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %land.lhs.true41
  %41 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %42, 255
  %cmp48 = icmp eq i32 %and47, 10
  br i1 %cmp48, label %if.then49, label %if.else86

if.then49:                                        ; preds = %lor.lhs.false45, %land.lhs.true41
  %43 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool50 = icmp ne %struct.sv* %43, null
  br i1 %tobool50, label %land.lhs.true51, label %cond.false68

land.lhs.true51:                                  ; preds = %if.then49
  %44 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %45, 255
  %cmp54 = icmp eq i32 %and53, 9
  br i1 %cmp54, label %land.lhs.true59, label %lor.lhs.false55

lor.lhs.false55:                                  ; preds = %land.lhs.true51
  %46 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %47, 255
  %cmp58 = icmp eq i32 %and57, 10
  br i1 %cmp58, label %land.lhs.true59, label %cond.false68

land.lhs.true59:                                  ; preds = %lor.lhs.false55, %land.lhs.true51
  %48 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u60 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 3
  %svu_gp = bitcast %union.anon* %sv_u60 to %struct.gp**
  %49 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr61 = getelementptr inbounds %struct.gp, %struct.gp* %49, i64 0
  %tobool62 = icmp ne %struct.gp* %add.ptr61, null
  br i1 %tobool62, label %cond.true63, label %cond.false68

cond.true63:                                      ; preds = %land.lhs.true59
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u64 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 3
  %svu_gp65 = bitcast %union.anon* %sv_u64 to %struct.gp**
  %51 = load %struct.gp*, %struct.gp** %svu_gp65, align 8
  %add.ptr66 = getelementptr inbounds %struct.gp, %struct.gp* %51, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr66, i32 0, i32 1
  %52 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool67 = icmp ne %struct.io* %52, null
  br i1 %tobool67, label %if.end70, label %if.then69

cond.false68:                                     ; preds = %land.lhs.true59, %lor.lhs.false55, %if.then49
  br i1 false, label %if.end70, label %if.then69

if.then69:                                        ; preds = %cond.false68, %cond.true63
  %53 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %54 = bitcast %struct.sv* %53 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.47, i64 0, i64 0), i8* %54)
  br label %if.end70

if.end70:                                         ; preds = %if.then69, %cond.false68, %cond.true63
  %55 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %55, %struct.sv** %ob, align 8
  %56 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_flags71 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags71, align 4
  %and72 = and i32 %57, 255
  %cmp73 = icmp eq i32 %and72, 10
  br i1 %cmp73, label %land.lhs.true74, label %if.end80

land.lhs.true74:                                  ; preds = %if.end70
  %58 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_any75 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any75, align 8
  %60 = bitcast i8* %59 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %60, i32 0, i32 9
  %61 = load i8, i8* %xlv_type, align 8
  %conv = sext i8 %61 to i32
  %cmp76 = icmp eq i32 %conv, 121
  br i1 %cmp76, label %if.then78, label %if.end80

if.then78:                                        ; preds = %land.lhs.true74
  %62 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_any79 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any79, align 8
  %64 = bitcast i8* %63 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %64, i32 0, i32 8
  %65 = load %struct.sv*, %struct.sv** %xlv_targ, align 8
  store %struct.sv* %65, %struct.sv** %ob, align 8
  br label %if.end80

if.end80:                                         ; preds = %if.then78, %land.lhs.true74, %if.end70
  %66 = load %struct.sv*, %struct.sv** %ob, align 8
  %call81 = call %struct.sv* @Perl_newRV(%struct.sv* %66)
  %call82 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call81)
  %67 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %68 = load i32*, i32** @PL_markstack_ptr, align 8
  %69 = load i32, i32* %68, align 4
  %idx.ext83 = sext i32 %69 to i64
  %add.ptr84 = getelementptr inbounds %struct.sv*, %struct.sv** %67, i64 %idx.ext83
  %add.ptr85 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr84, i64 1
  store %struct.sv* %call82, %struct.sv** %add.ptr85, align 8
  br label %if.end149

if.else86:                                        ; preds = %lor.lhs.false45, %if.else37
  %70 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags87 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags87, align 4
  %and88 = and i32 %71, 2098176
  %cmp89 = icmp eq i32 %and88, 1024
  br i1 %cmp89, label %cond.true91, label %cond.false95

cond.true91:                                      ; preds = %if.else86
  %72 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any92 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 0
  %73 = load i8*, i8** %sv_any92, align 8
  %74 = bitcast i8* %73 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %74, i32 0, i32 2
  %75 = load i64, i64* %xpv_cur, align 8
  store i64 %75, i64* %packlen, align 8
  %76 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u93 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u93 to i8**
  %77 = load i8*, i8** %svu_pv, align 8
  %add.ptr94 = getelementptr inbounds i8, i8* %77, i64 0
  br label %cond.end97

cond.false95:                                     ; preds = %if.else86
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  %call96 = call i8* @Perl_sv_2pv_flags(%struct.sv* %78, i64* %packlen, i32 32)
  br label %cond.end97

cond.end97:                                       ; preds = %cond.false95, %cond.true91
  %cond98 = phi i8* [ %add.ptr94, %cond.true91 ], [ %call96, %cond.false95 ]
  store i8* %cond98, i8** %packname, align 8
  %79 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags99 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags99, align 4
  %and100 = and i32 %80, 536870912
  store i32 %and100, i32* %packname_utf8, align 4
  %81 = load i8*, i8** %packname, align 8
  %82 = load i64, i64* %packlen, align 8
  %conv101 = trunc i64 %82 to i32
  %83 = load i32, i32* %packname_utf8, align 4
  %or = or i32 %83, 4096
  %call102 = call %struct.hv* @Perl_gv_stashpvn(i8* %81, i32 %conv101, i32 %or)
  store %struct.hv* %call102, %struct.hv** %stash, align 8
  %84 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool103 = icmp ne %struct.hv* %84, null
  br i1 %tobool103, label %if.then104, label %if.end105

if.then104:                                       ; preds = %cond.end97
  %85 = load %struct.hv*, %struct.hv** %stash, align 8
  store %struct.hv* %85, %struct.hv** %retval, align 8
  br label %return

if.end105:                                        ; preds = %cond.end97
  %86 = load i8*, i8** %packname, align 8
  %87 = load i64, i64* %packlen, align 8
  %88 = load i32, i32* %packname_utf8, align 4
  %call106 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* %86, i64 %87, i32 %88, i32 15)
  store %struct.gv* %call106, %struct.gv** %iogv, align 8
  %tobool107 = icmp ne %struct.gv* %call106, null
  br i1 %tobool107, label %lor.lhs.false108, label %if.then134

lor.lhs.false108:                                 ; preds = %if.end105
  %89 = load %struct.gv*, %struct.gv** %iogv, align 8
  %tobool109 = icmp ne %struct.gv* %89, null
  br i1 %tobool109, label %land.lhs.true110, label %cond.false130

land.lhs.true110:                                 ; preds = %lor.lhs.false108
  %90 = load %struct.gv*, %struct.gv** %iogv, align 8
  %91 = bitcast %struct.gv* %90 to %struct.sv*
  %sv_flags111 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 2
  %92 = load i32, i32* %sv_flags111, align 4
  %and112 = and i32 %92, 255
  %cmp113 = icmp eq i32 %and112, 9
  br i1 %cmp113, label %land.lhs.true120, label %lor.lhs.false115

lor.lhs.false115:                                 ; preds = %land.lhs.true110
  %93 = load %struct.gv*, %struct.gv** %iogv, align 8
  %94 = bitcast %struct.gv* %93 to %struct.sv*
  %sv_flags116 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags116, align 4
  %and117 = and i32 %95, 255
  %cmp118 = icmp eq i32 %and117, 10
  br i1 %cmp118, label %land.lhs.true120, label %cond.false130

land.lhs.true120:                                 ; preds = %lor.lhs.false115, %land.lhs.true110
  %96 = load %struct.gv*, %struct.gv** %iogv, align 8
  %sv_u121 = getelementptr inbounds %struct.gv, %struct.gv* %96, i32 0, i32 3
  %svu_gp122 = bitcast %union.anon.4* %sv_u121 to %struct.gp**
  %97 = load %struct.gp*, %struct.gp** %svu_gp122, align 8
  %add.ptr123 = getelementptr inbounds %struct.gp, %struct.gp* %97, i64 0
  %tobool124 = icmp ne %struct.gp* %add.ptr123, null
  br i1 %tobool124, label %cond.true125, label %cond.false130

cond.true125:                                     ; preds = %land.lhs.true120
  %98 = load %struct.gv*, %struct.gv** %iogv, align 8
  %sv_u126 = getelementptr inbounds %struct.gv, %struct.gv* %98, i32 0, i32 3
  %svu_gp127 = bitcast %union.anon.4* %sv_u126 to %struct.gp**
  %99 = load %struct.gp*, %struct.gp** %svu_gp127, align 8
  %add.ptr128 = getelementptr inbounds %struct.gp, %struct.gp* %99, i64 0
  %gp_io129 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr128, i32 0, i32 1
  %100 = load %struct.io*, %struct.io** %gp_io129, align 8
  br label %cond.end131

cond.false130:                                    ; preds = %land.lhs.true120, %lor.lhs.false115, %lor.lhs.false108
  br label %cond.end131

cond.end131:                                      ; preds = %cond.false130, %cond.true125
  %cond132 = phi %struct.io* [ %100, %cond.true125 ], [ null, %cond.false130 ]
  %101 = bitcast %struct.io* %cond132 to i8*
  %102 = bitcast i8* %101 to %struct.sv*
  store %struct.sv* %102, %struct.sv** %ob, align 8
  %tobool133 = icmp ne %struct.sv* %102, null
  br i1 %tobool133, label %if.end143, label %if.then134

if.then134:                                       ; preds = %cond.end131, %if.end105
  %103 = load i64, i64* %packlen, align 8
  %tobool135 = icmp ne i64 %103, 0
  br i1 %tobool135, label %if.end137, label %if.then136

if.then136:                                       ; preds = %if.then134
  %104 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %105 = bitcast %struct.sv* %104 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.47, i64 0, i64 0), i8* %105)
  br label %if.end137

if.end137:                                        ; preds = %if.then136, %if.then134
  %106 = load i8*, i8** %packname, align 8
  %107 = load i64, i64* %packlen, align 8
  %conv138 = trunc i64 %107 to i32
  %108 = load i32, i32* %packname_utf8, align 4
  %call139 = call %struct.hv* @Perl_gv_stashpvn(i8* %106, i32 %conv138, i32 %108)
  store %struct.hv* %call139, %struct.hv** %stash, align 8
  %109 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool140 = icmp ne %struct.hv* %109, null
  br i1 %tobool140, label %if.then141, label %if.else142

if.then141:                                       ; preds = %if.end137
  %110 = load %struct.hv*, %struct.hv** %stash, align 8
  store %struct.hv* %110, %struct.hv** %retval, align 8
  br label %return

if.else142:                                       ; preds = %if.end137
  %111 = load %struct.sv*, %struct.sv** %sv, align 8
  %112 = bitcast %struct.sv* %111 to i8*
  %113 = bitcast i8* %112 to %struct.hv*
  store %struct.hv* %113, %struct.hv** %retval, align 8
  br label %return

if.end143:                                        ; preds = %cond.end131
  %114 = load %struct.gv*, %struct.gv** %iogv, align 8
  %115 = bitcast %struct.gv* %114 to i8*
  %116 = bitcast i8* %115 to %struct.sv*
  %call144 = call %struct.sv* @Perl_newRV(%struct.sv* %116)
  %call145 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call144)
  %117 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %118 = load i32*, i32** @PL_markstack_ptr, align 8
  %119 = load i32, i32* %118, align 4
  %idx.ext146 = sext i32 %119 to i64
  %add.ptr147 = getelementptr inbounds %struct.sv*, %struct.sv** %117, i64 %idx.ext146
  %add.ptr148 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr147, i64 1
  store %struct.sv* %call145, %struct.sv** %add.ptr148, align 8
  br label %if.end149

if.end149:                                        ; preds = %if.end143, %if.end80
  br label %if.end150

if.end150:                                        ; preds = %if.end149
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %if.then24
  %120 = load %struct.sv*, %struct.sv** %ob, align 8
  %tobool152 = icmp ne %struct.sv* %120, null
  br i1 %tobool152, label %lor.lhs.false153, label %if.then202

lor.lhs.false153:                                 ; preds = %if.end151
  %121 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_flags154 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags154, align 4
  %and155 = and i32 %122, 1048576
  %tobool156 = icmp ne i32 %and155, 0
  br i1 %tobool156, label %if.end227, label %lor.lhs.false157

lor.lhs.false157:                                 ; preds = %lor.lhs.false153
  %123 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_flags158 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 2
  %124 = load i32, i32* %sv_flags158, align 4
  %and159 = and i32 %124, 49152
  %cmp160 = icmp eq i32 %and159, 32768
  br i1 %cmp160, label %land.lhs.true162, label %if.then202

land.lhs.true162:                                 ; preds = %lor.lhs.false157
  %125 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_flags163 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 2
  %126 = load i32, i32* %sv_flags163, align 4
  %and164 = and i32 %126, 255
  %cmp165 = icmp eq i32 %and164, 9
  br i1 %cmp165, label %land.lhs.true172, label %lor.lhs.false167

lor.lhs.false167:                                 ; preds = %land.lhs.true162
  %127 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_flags168 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 2
  %128 = load i32, i32* %sv_flags168, align 4
  %and169 = and i32 %128, 255
  %cmp170 = icmp eq i32 %and169, 10
  br i1 %cmp170, label %land.lhs.true172, label %if.then202

land.lhs.true172:                                 ; preds = %lor.lhs.false167, %land.lhs.true162
  %129 = load %struct.sv*, %struct.sv** %ob, align 8
  %130 = bitcast %struct.sv* %129 to %struct.gv*
  %tobool173 = icmp ne %struct.gv* %130, null
  br i1 %tobool173, label %land.lhs.true174, label %cond.false194

land.lhs.true174:                                 ; preds = %land.lhs.true172
  %131 = load %struct.sv*, %struct.sv** %ob, align 8
  %132 = bitcast %struct.sv* %131 to %struct.gv*
  %133 = bitcast %struct.gv* %132 to %struct.sv*
  %sv_flags175 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 2
  %134 = load i32, i32* %sv_flags175, align 4
  %and176 = and i32 %134, 255
  %cmp177 = icmp eq i32 %and176, 9
  br i1 %cmp177, label %land.lhs.true184, label %lor.lhs.false179

lor.lhs.false179:                                 ; preds = %land.lhs.true174
  %135 = load %struct.sv*, %struct.sv** %ob, align 8
  %136 = bitcast %struct.sv* %135 to %struct.gv*
  %137 = bitcast %struct.gv* %136 to %struct.sv*
  %sv_flags180 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 2
  %138 = load i32, i32* %sv_flags180, align 4
  %and181 = and i32 %138, 255
  %cmp182 = icmp eq i32 %and181, 10
  br i1 %cmp182, label %land.lhs.true184, label %cond.false194

land.lhs.true184:                                 ; preds = %lor.lhs.false179, %land.lhs.true174
  %139 = load %struct.sv*, %struct.sv** %ob, align 8
  %140 = bitcast %struct.sv* %139 to %struct.gv*
  %sv_u185 = getelementptr inbounds %struct.gv, %struct.gv* %140, i32 0, i32 3
  %svu_gp186 = bitcast %union.anon.4* %sv_u185 to %struct.gp**
  %141 = load %struct.gp*, %struct.gp** %svu_gp186, align 8
  %add.ptr187 = getelementptr inbounds %struct.gp, %struct.gp* %141, i64 0
  %tobool188 = icmp ne %struct.gp* %add.ptr187, null
  br i1 %tobool188, label %cond.true189, label %cond.false194

cond.true189:                                     ; preds = %land.lhs.true184
  %142 = load %struct.sv*, %struct.sv** %ob, align 8
  %143 = bitcast %struct.sv* %142 to %struct.gv*
  %sv_u190 = getelementptr inbounds %struct.gv, %struct.gv* %143, i32 0, i32 3
  %svu_gp191 = bitcast %union.anon.4* %sv_u190 to %struct.gp**
  %144 = load %struct.gp*, %struct.gp** %svu_gp191, align 8
  %add.ptr192 = getelementptr inbounds %struct.gp, %struct.gp* %144, i64 0
  %gp_io193 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr192, i32 0, i32 1
  %145 = load %struct.io*, %struct.io** %gp_io193, align 8
  br label %cond.end195

cond.false194:                                    ; preds = %land.lhs.true184, %lor.lhs.false179, %land.lhs.true172
  br label %cond.end195

cond.end195:                                      ; preds = %cond.false194, %cond.true189
  %cond196 = phi %struct.io* [ %145, %cond.true189 ], [ null, %cond.false194 ]
  %146 = bitcast %struct.io* %cond196 to i8*
  %147 = bitcast i8* %146 to %struct.sv*
  store %struct.sv* %147, %struct.sv** %ob, align 8
  %tobool197 = icmp ne %struct.sv* %147, null
  br i1 %tobool197, label %land.lhs.true198, label %if.then202

land.lhs.true198:                                 ; preds = %cond.end195
  %148 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_flags199 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 2
  %149 = load i32, i32* %sv_flags199, align 4
  %and200 = and i32 %149, 1048576
  %tobool201 = icmp ne i32 %and200, 0
  br i1 %tobool201, label %if.end227, label %if.then202

if.then202:                                       ; preds = %land.lhs.true198, %cond.end195, %lor.lhs.false167, %lor.lhs.false157, %if.end151
  %150 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %sv_flags203 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 2
  %151 = load i32, i32* %sv_flags203, align 4
  %and204 = and i32 %151, 49152
  %cmp205 = icmp eq i32 %and204, 49152
  br i1 %cmp205, label %land.lhs.true207, label %cond.false224

land.lhs.true207:                                 ; preds = %if.then202
  %152 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %sv_flags208 = getelementptr inbounds %struct.sv, %struct.sv* %152, i32 0, i32 2
  %153 = load i32, i32* %sv_flags208, align 4
  %and209 = and i32 %153, 2098176
  %cmp210 = icmp eq i32 %and209, 1024
  br i1 %cmp210, label %cond.true212, label %cond.false216

cond.true212:                                     ; preds = %land.lhs.true207
  %154 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %sv_u213 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 3
  %svu_pv214 = bitcast %union.anon* %sv_u213 to i8**
  %155 = load i8*, i8** %svu_pv214, align 8
  %add.ptr215 = getelementptr inbounds i8, i8* %155, i64 0
  br label %cond.end218

cond.false216:                                    ; preds = %land.lhs.true207
  %156 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %call217 = call i8* @Perl_sv_2pv_flags(%struct.sv* %156, i64* null, i32 34)
  br label %cond.end218

cond.end218:                                      ; preds = %cond.false216, %cond.true212
  %cond219 = phi i8* [ %add.ptr215, %cond.true212 ], [ %call217, %cond.false216 ]
  %call220 = call i32 @strcmp(i8* %cond219, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0)) #6
  %tobool221 = icmp ne i32 %call220, 0
  br i1 %tobool221, label %cond.false224, label %cond.true222

cond.true222:                                     ; preds = %cond.end218
  %call223 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0), i64 4, i32 524288)
  br label %cond.end225

cond.false224:                                    ; preds = %cond.end218, %if.then202
  %157 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  br label %cond.end225

cond.end225:                                      ; preds = %cond.false224, %cond.true222
  %cond226 = phi %struct.sv* [ %call223, %cond.true222 ], [ %157, %cond.false224 ]
  %158 = bitcast %struct.sv* %cond226 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.49, i64 0, i64 0), i8* %158)
  br label %if.end227

if.end227:                                        ; preds = %cond.end225, %land.lhs.true198, %lor.lhs.false153
  %159 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_any228 = getelementptr inbounds %struct.sv, %struct.sv* %159, i32 0, i32 0
  %160 = load i8*, i8** %sv_any228, align 8
  %161 = bitcast i8* %160 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %161, i32 0, i32 0
  %162 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %162, %struct.hv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end227, %if.else142, %if.then141, %if.then104, %if.then17
  %163 = load %struct.hv*, %struct.hv** %retval, align 8
  ret %struct.hv* %163
}

declare dso_local %struct.gv* @Perl_gv_fetchmethod_sv_flags(%struct.hv*, %struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_method_named() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %meth = alloca %struct.sv*, align 8
  %stash = alloca %struct.hv*, align 8
  %he = alloca %struct.he*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %2, i32 0, i32 7
  %3 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %3, %struct.sv** %meth, align 8
  %4 = load %struct.sv*, %struct.sv** %meth, align 8
  %call = call %struct.hv* @S_opmethod_stash(%struct.sv* %4)
  store %struct.hv* %call, %struct.hv** %stash, align 8
  %5 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %and = and i32 %6, 255
  %cmp = icmp eq i32 %and, 12
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end46

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end46

if.then:                                          ; preds = %cond.false, %cond.true
  %7 = load %struct.hv*, %struct.hv** %stash, align 8
  %8 = load %struct.sv*, %struct.sv** %meth, align 8
  %call1 = call i8* @Perl_hv_common(%struct.hv* %7, %struct.sv* %8, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %9 = bitcast i8* %call1 to %struct.he*
  store %struct.he* %9, %struct.he** %he, align 8
  %10 = load %struct.he*, %struct.he** %he, align 8
  %tobool = icmp ne %struct.he* %10, null
  br i1 %tobool, label %if.then2, label %if.end45

if.then2:                                         ; preds = %if.then
  %11 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %11, i32 0, i32 2
  %hent_val = bitcast %union.anon.1* %he_valu to %struct.sv**
  %12 = load %struct.sv*, %struct.sv** %hent_val, align 8
  %13 = bitcast %struct.sv* %12 to i8*
  %14 = bitcast i8* %13 to %struct.gv*
  store %struct.gv* %14, %struct.gv** %gv, align 8
  %15 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags3 = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %16, 255
  %cmp5 = icmp eq i32 %and4, 9
  br i1 %cmp5, label %land.lhs.true, label %if.end44

land.lhs.true:                                    ; preds = %if.then2
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %18 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %18, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %19 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr6 = getelementptr inbounds %struct.cv, %struct.cv* %19, i64 0
  %tobool7 = icmp ne %struct.cv* %add.ptr6, null
  br i1 %tobool7, label %land.lhs.true8, label %if.end44

land.lhs.true8:                                   ; preds = %land.lhs.true
  %20 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u9 = getelementptr inbounds %struct.gv, %struct.gv* %20, i32 0, i32 3
  %svu_gp10 = bitcast %union.anon.4* %sv_u9 to %struct.gp**
  %21 = load %struct.gp*, %struct.gp** %svu_gp10, align 8
  %add.ptr11 = getelementptr inbounds %struct.gp, %struct.gp* %21, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr11, i32 0, i32 3
  %22 = load i32, i32* %gp_cvgen, align 8
  %tobool12 = icmp ne i32 %22, 0
  br i1 %tobool12, label %lor.lhs.false, label %if.then31

lor.lhs.false:                                    ; preds = %land.lhs.true8
  %23 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u13 = getelementptr inbounds %struct.gv, %struct.gv* %23, i32 0, i32 3
  %svu_gp14 = bitcast %union.anon.4* %sv_u13 to %struct.gp**
  %24 = load %struct.gp*, %struct.gp** %svu_gp14, align 8
  %add.ptr15 = getelementptr inbounds %struct.gp, %struct.gp* %24, i64 0
  %gp_cvgen16 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr15, i32 0, i32 3
  %25 = load i32, i32* %gp_cvgen16, align 8
  %26 = load i32, i32* @PL_sub_generation, align 4
  %27 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u17 = getelementptr inbounds %struct.hv, %struct.hv* %27, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u17 to %struct.he***
  %28 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %29 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %29, i32 0, i32 0
  %30 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %30, i32 0, i32 3
  %31 = load i64, i64* %xhv_max, align 8
  %add = add i64 %31, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %28, i64 %add
  %32 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_mro_meta = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %32, i32 0, i32 5
  %33 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta, align 8
  %tobool18 = icmp ne %struct.mro_meta* %33, null
  br i1 %tobool18, label %cond.true19, label %cond.false27

cond.true19:                                      ; preds = %lor.lhs.false
  %34 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u20 = getelementptr inbounds %struct.hv, %struct.hv* %34, i32 0, i32 3
  %svu_hash21 = bitcast %union.anon.5* %sv_u20 to %struct.he***
  %35 = load %struct.he**, %struct.he*** %svu_hash21, align 8
  %36 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any22 = getelementptr inbounds %struct.hv, %struct.hv* %36, i32 0, i32 0
  %37 = load %struct.xpvhv*, %struct.xpvhv** %sv_any22, align 8
  %xhv_max23 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %37, i32 0, i32 3
  %38 = load i64, i64* %xhv_max23, align 8
  %add24 = add i64 %38, 1
  %arrayidx25 = getelementptr inbounds %struct.he*, %struct.he** %35, i64 %add24
  %39 = bitcast %struct.he** %arrayidx25 to %struct.xpvhv_aux*
  %xhv_mro_meta26 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %39, i32 0, i32 5
  %40 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta26, align 8
  br label %cond.end

cond.false27:                                     ; preds = %lor.lhs.false
  %41 = load %struct.hv*, %struct.hv** %stash, align 8
  %call28 = call %struct.mro_meta* @Perl_mro_meta_init(%struct.hv* %41)
  br label %cond.end

cond.end:                                         ; preds = %cond.false27, %cond.true19
  %cond = phi %struct.mro_meta* [ %40, %cond.true19 ], [ %call28, %cond.false27 ]
  %cache_gen = getelementptr inbounds %struct.mro_meta, %struct.mro_meta* %cond, i32 0, i32 3
  %42 = load i32, i32* %cache_gen, align 8
  %add29 = add i32 %26, %42
  %cmp30 = icmp eq i32 %25, %add29
  br i1 %cmp30, label %if.then31, label %if.end44

if.then31:                                        ; preds = %cond.end, %land.lhs.true8
  br label %do.body

do.body:                                          ; preds = %if.then31
  br label %do.body32

do.body32:                                        ; preds = %do.body
  %43 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %43 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %44 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp33 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp33, label %cond.true34, label %cond.false35

cond.true34:                                      ; preds = %do.body32
  br i1 true, label %if.then36, label %if.end

cond.false35:                                     ; preds = %do.body32
  br i1 false, label %if.then36, label %if.end

if.then36:                                        ; preds = %cond.false35, %cond.true34
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call37 = call %struct.sv** @Perl_stack_grow(%struct.sv** %45, %struct.sv** %46, i64 1)
  store %struct.sv** %call37, %struct.sv*** %sp, align 8
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then36, %cond.false35, %cond.true34
  br label %do.end

do.end:                                           ; preds = %if.end
  %48 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u38 = getelementptr inbounds %struct.gv, %struct.gv* %48, i32 0, i32 3
  %svu_gp39 = bitcast %union.anon.4* %sv_u38 to %struct.gp**
  %49 = load %struct.gp*, %struct.gp** %svu_gp39, align 8
  %add.ptr40 = getelementptr inbounds %struct.gp, %struct.gp* %49, i64 0
  %gp_cv41 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr40, i32 0, i32 2
  %50 = load %struct.cv*, %struct.cv** %gp_cv41, align 8
  %add.ptr42 = getelementptr inbounds %struct.cv, %struct.cv* %50, i64 0
  %51 = bitcast %struct.cv* %add.ptr42 to i8*
  %52 = bitcast i8* %51 to %struct.sv*
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %53, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %52, %struct.sv** %incdec.ptr, align 8
  br label %do.end43

do.end43:                                         ; preds = %do.end
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %54, %struct.sv*** @PL_stack_sp, align 8
  %55 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 0
  %56 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %56, %struct.op** %retval, align 8
  br label %return

if.end44:                                         ; preds = %cond.end, %land.lhs.true, %if.then2
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %cond.false, %cond.true
  %57 = load %struct.hv*, %struct.hv** %stash, align 8
  %58 = load %struct.sv*, %struct.sv** %meth, align 8
  %call47 = call %struct.gv* @Perl_gv_fetchmethod_sv_flags(%struct.hv* %57, %struct.sv* %58, i32 768)
  store %struct.gv* %call47, %struct.gv** %gv, align 8
  br label %do.body48

do.body48:                                        ; preds = %if.end46
  br label %do.body49

do.body49:                                        ; preds = %do.body48
  %59 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast50 = ptrtoint %struct.sv** %59 to i64
  %sub.ptr.rhs.cast51 = ptrtoint %struct.sv** %60 to i64
  %sub.ptr.sub52 = sub i64 %sub.ptr.lhs.cast50, %sub.ptr.rhs.cast51
  %sub.ptr.div53 = sdiv exact i64 %sub.ptr.sub52, 8
  %cmp54 = icmp slt i64 %sub.ptr.div53, 1
  br i1 %cmp54, label %cond.true55, label %cond.false56

cond.true55:                                      ; preds = %do.body49
  br i1 true, label %if.then57, label %if.end59

cond.false56:                                     ; preds = %do.body49
  br i1 false, label %if.then57, label %if.end59

if.then57:                                        ; preds = %cond.false56, %cond.true55
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  %62 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call58 = call %struct.sv** @Perl_stack_grow(%struct.sv** %61, %struct.sv** %62, i64 1)
  store %struct.sv** %call58, %struct.sv*** %sp, align 8
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %cond.false56, %cond.true55
  br label %do.end60

do.end60:                                         ; preds = %if.end59
  %64 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags61 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %65, 255
  %cmp63 = icmp eq i32 %and62, 9
  br i1 %cmp63, label %cond.true64, label %cond.false70

cond.true64:                                      ; preds = %do.end60
  %66 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u65 = getelementptr inbounds %struct.gv, %struct.gv* %66, i32 0, i32 3
  %svu_gp66 = bitcast %union.anon.4* %sv_u65 to %struct.gp**
  %67 = load %struct.gp*, %struct.gp** %svu_gp66, align 8
  %add.ptr67 = getelementptr inbounds %struct.gp, %struct.gp* %67, i64 0
  %gp_cv68 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr67, i32 0, i32 2
  %68 = load %struct.cv*, %struct.cv** %gp_cv68, align 8
  %add.ptr69 = getelementptr inbounds %struct.cv, %struct.cv* %68, i64 0
  %69 = bitcast %struct.cv* %add.ptr69 to i8*
  %70 = bitcast i8* %69 to %struct.sv*
  br label %cond.end71

cond.false70:                                     ; preds = %do.end60
  %71 = load %struct.gv*, %struct.gv** %gv, align 8
  %72 = bitcast %struct.gv* %71 to i8*
  %73 = bitcast i8* %72 to %struct.sv*
  br label %cond.end71

cond.end71:                                       ; preds = %cond.false70, %cond.true64
  %cond72 = phi %struct.sv* [ %70, %cond.true64 ], [ %73, %cond.false70 ]
  %74 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr73 = getelementptr inbounds %struct.sv*, %struct.sv** %74, i32 1
  store %struct.sv** %incdec.ptr73, %struct.sv*** %sp, align 8
  store %struct.sv* %cond72, %struct.sv** %incdec.ptr73, align 8
  br label %do.end74

do.end74:                                         ; preds = %cond.end71
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %75, %struct.sv*** @PL_stack_sp, align 8
  %76 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next75 = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 0
  %77 = load %struct.op*, %struct.op** %op_next75, align 8
  store %struct.op* %77, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end74, %do.end43
  %78 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %78
}

declare dso_local %struct.mro_meta* @Perl_mro_meta_init(%struct.hv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_method_super() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %cache = alloca %struct.hv*, align 8
  %meth = alloca %struct.sv*, align 8
  %stash = alloca %struct.hv*, align 8
  %he = alloca %struct.he*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %2, i32 0, i32 7
  %3 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %3, %struct.sv** %meth, align 8
  %4 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %4, i32 0, i32 8
  %5 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  store %struct.hv* %5, %struct.hv** %stash, align 8
  %6 = load %struct.sv*, %struct.sv** %meth, align 8
  %call = call %struct.hv* @S_opmethod_stash(%struct.sv* %6)
  %7 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u = getelementptr inbounds %struct.hv, %struct.hv* %7, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u to %struct.he***
  %8 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %9 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %9, i32 0, i32 0
  %10 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %10, i32 0, i32 3
  %11 = load i64, i64* %xhv_max, align 8
  %add = add i64 %11, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %8, i64 %add
  %12 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_mro_meta = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %12, i32 0, i32 5
  %13 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta, align 8
  %tobool = icmp ne %struct.mro_meta* %13, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %14 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u1 = getelementptr inbounds %struct.hv, %struct.hv* %14, i32 0, i32 3
  %svu_hash2 = bitcast %union.anon.5* %sv_u1 to %struct.he***
  %15 = load %struct.he**, %struct.he*** %svu_hash2, align 8
  %16 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any3 = getelementptr inbounds %struct.hv, %struct.hv* %16, i32 0, i32 0
  %17 = load %struct.xpvhv*, %struct.xpvhv** %sv_any3, align 8
  %xhv_max4 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %17, i32 0, i32 3
  %18 = load i64, i64* %xhv_max4, align 8
  %add5 = add i64 %18, 1
  %arrayidx6 = getelementptr inbounds %struct.he*, %struct.he** %15, i64 %add5
  %19 = bitcast %struct.he** %arrayidx6 to %struct.xpvhv_aux*
  %xhv_mro_meta7 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %19, i32 0, i32 5
  %20 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta7, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %21 = load %struct.hv*, %struct.hv** %stash, align 8
  %call8 = call %struct.mro_meta* @Perl_mro_meta_init(%struct.hv* %21)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mro_meta* [ %20, %cond.true ], [ %call8, %cond.false ]
  %super = getelementptr inbounds %struct.mro_meta, %struct.mro_meta* %cond, i32 0, i32 7
  %22 = load %struct.hv*, %struct.hv** %super, align 8
  store %struct.hv* %22, %struct.hv** %cache, align 8
  %tobool9 = icmp ne %struct.hv* %22, null
  br i1 %tobool9, label %if.then, label %if.end62

if.then:                                          ; preds = %cond.end
  %23 = load %struct.hv*, %struct.hv** %cache, align 8
  %24 = load %struct.sv*, %struct.sv** %meth, align 8
  %call10 = call i8* @Perl_hv_common(%struct.hv* %23, %struct.sv* %24, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %25 = bitcast i8* %call10 to %struct.he*
  store %struct.he* %25, %struct.he** %he, align 8
  %26 = load %struct.he*, %struct.he** %he, align 8
  %tobool11 = icmp ne %struct.he* %26, null
  br i1 %tobool11, label %if.then12, label %if.end61

if.then12:                                        ; preds = %if.then
  %27 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %27, i32 0, i32 2
  %hent_val = bitcast %union.anon.1* %he_valu to %struct.sv**
  %28 = load %struct.sv*, %struct.sv** %hent_val, align 8
  %29 = bitcast %struct.sv* %28 to i8*
  %30 = bitcast i8* %29 to %struct.gv*
  store %struct.gv* %30, %struct.gv** %gv, align 8
  %31 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags, align 4
  %and = and i32 %32, 255
  %cmp = icmp eq i32 %and, 9
  br i1 %cmp, label %land.lhs.true, label %if.end60

land.lhs.true:                                    ; preds = %if.then12
  %33 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u13 = getelementptr inbounds %struct.gv, %struct.gv* %33, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u13 to %struct.gp**
  %34 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %34, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %35 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr14 = getelementptr inbounds %struct.cv, %struct.cv* %35, i64 0
  %tobool15 = icmp ne %struct.cv* %add.ptr14, null
  br i1 %tobool15, label %land.lhs.true16, label %if.end60

land.lhs.true16:                                  ; preds = %land.lhs.true
  %36 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u17 = getelementptr inbounds %struct.gv, %struct.gv* %36, i32 0, i32 3
  %svu_gp18 = bitcast %union.anon.4* %sv_u17 to %struct.gp**
  %37 = load %struct.gp*, %struct.gp** %svu_gp18, align 8
  %add.ptr19 = getelementptr inbounds %struct.gp, %struct.gp* %37, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr19, i32 0, i32 3
  %38 = load i32, i32* %gp_cvgen, align 8
  %tobool20 = icmp ne i32 %38, 0
  br i1 %tobool20, label %lor.lhs.false, label %if.then47

lor.lhs.false:                                    ; preds = %land.lhs.true16
  %39 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u21 = getelementptr inbounds %struct.gv, %struct.gv* %39, i32 0, i32 3
  %svu_gp22 = bitcast %union.anon.4* %sv_u21 to %struct.gp**
  %40 = load %struct.gp*, %struct.gp** %svu_gp22, align 8
  %add.ptr23 = getelementptr inbounds %struct.gp, %struct.gp* %40, i64 0
  %gp_cvgen24 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr23, i32 0, i32 3
  %41 = load i32, i32* %gp_cvgen24, align 8
  %42 = load i32, i32* @PL_sub_generation, align 4
  %43 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u25 = getelementptr inbounds %struct.hv, %struct.hv* %43, i32 0, i32 3
  %svu_hash26 = bitcast %union.anon.5* %sv_u25 to %struct.he***
  %44 = load %struct.he**, %struct.he*** %svu_hash26, align 8
  %45 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any27 = getelementptr inbounds %struct.hv, %struct.hv* %45, i32 0, i32 0
  %46 = load %struct.xpvhv*, %struct.xpvhv** %sv_any27, align 8
  %xhv_max28 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %46, i32 0, i32 3
  %47 = load i64, i64* %xhv_max28, align 8
  %add29 = add i64 %47, 1
  %arrayidx30 = getelementptr inbounds %struct.he*, %struct.he** %44, i64 %add29
  %48 = bitcast %struct.he** %arrayidx30 to %struct.xpvhv_aux*
  %xhv_mro_meta31 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %48, i32 0, i32 5
  %49 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta31, align 8
  %tobool32 = icmp ne %struct.mro_meta* %49, null
  br i1 %tobool32, label %cond.true33, label %cond.false41

cond.true33:                                      ; preds = %lor.lhs.false
  %50 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u34 = getelementptr inbounds %struct.hv, %struct.hv* %50, i32 0, i32 3
  %svu_hash35 = bitcast %union.anon.5* %sv_u34 to %struct.he***
  %51 = load %struct.he**, %struct.he*** %svu_hash35, align 8
  %52 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any36 = getelementptr inbounds %struct.hv, %struct.hv* %52, i32 0, i32 0
  %53 = load %struct.xpvhv*, %struct.xpvhv** %sv_any36, align 8
  %xhv_max37 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %53, i32 0, i32 3
  %54 = load i64, i64* %xhv_max37, align 8
  %add38 = add i64 %54, 1
  %arrayidx39 = getelementptr inbounds %struct.he*, %struct.he** %51, i64 %add38
  %55 = bitcast %struct.he** %arrayidx39 to %struct.xpvhv_aux*
  %xhv_mro_meta40 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %55, i32 0, i32 5
  %56 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta40, align 8
  br label %cond.end43

cond.false41:                                     ; preds = %lor.lhs.false
  %57 = load %struct.hv*, %struct.hv** %stash, align 8
  %call42 = call %struct.mro_meta* @Perl_mro_meta_init(%struct.hv* %57)
  br label %cond.end43

cond.end43:                                       ; preds = %cond.false41, %cond.true33
  %cond44 = phi %struct.mro_meta* [ %56, %cond.true33 ], [ %call42, %cond.false41 ]
  %cache_gen = getelementptr inbounds %struct.mro_meta, %struct.mro_meta* %cond44, i32 0, i32 3
  %58 = load i32, i32* %cache_gen, align 8
  %add45 = add i32 %42, %58
  %cmp46 = icmp eq i32 %41, %add45
  br i1 %cmp46, label %if.then47, label %if.end60

if.then47:                                        ; preds = %cond.end43, %land.lhs.true16
  br label %do.body

do.body:                                          ; preds = %if.then47
  br label %do.body48

do.body48:                                        ; preds = %do.body
  %59 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %59 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %60 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp49 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp49, label %cond.true50, label %cond.false51

cond.true50:                                      ; preds = %do.body48
  br i1 true, label %if.then52, label %if.end

cond.false51:                                     ; preds = %do.body48
  br i1 false, label %if.then52, label %if.end

if.then52:                                        ; preds = %cond.false51, %cond.true50
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  %62 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call53 = call %struct.sv** @Perl_stack_grow(%struct.sv** %61, %struct.sv** %62, i64 1)
  store %struct.sv** %call53, %struct.sv*** %sp, align 8
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then52, %cond.false51, %cond.true50
  br label %do.end

do.end:                                           ; preds = %if.end
  %64 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u54 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 3
  %svu_gp55 = bitcast %union.anon.4* %sv_u54 to %struct.gp**
  %65 = load %struct.gp*, %struct.gp** %svu_gp55, align 8
  %add.ptr56 = getelementptr inbounds %struct.gp, %struct.gp* %65, i64 0
  %gp_cv57 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr56, i32 0, i32 2
  %66 = load %struct.cv*, %struct.cv** %gp_cv57, align 8
  %add.ptr58 = getelementptr inbounds %struct.cv, %struct.cv* %66, i64 0
  %67 = bitcast %struct.cv* %add.ptr58 to i8*
  %68 = bitcast i8* %67 to %struct.sv*
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %69, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %68, %struct.sv** %incdec.ptr, align 8
  br label %do.end59

do.end59:                                         ; preds = %do.end
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %70, %struct.sv*** @PL_stack_sp, align 8
  %71 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %71, i32 0, i32 0
  %72 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %72, %struct.op** %retval, align 8
  br label %return

if.end60:                                         ; preds = %cond.end43, %land.lhs.true, %if.then12
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %cond.end
  %73 = load %struct.hv*, %struct.hv** %stash, align 8
  %74 = load %struct.sv*, %struct.sv** %meth, align 8
  %call63 = call %struct.gv* @Perl_gv_fetchmethod_sv_flags(%struct.hv* %73, %struct.sv* %74, i32 4864)
  store %struct.gv* %call63, %struct.gv** %gv, align 8
  br label %do.body64

do.body64:                                        ; preds = %if.end62
  br label %do.body65

do.body65:                                        ; preds = %do.body64
  %75 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast66 = ptrtoint %struct.sv** %75 to i64
  %sub.ptr.rhs.cast67 = ptrtoint %struct.sv** %76 to i64
  %sub.ptr.sub68 = sub i64 %sub.ptr.lhs.cast66, %sub.ptr.rhs.cast67
  %sub.ptr.div69 = sdiv exact i64 %sub.ptr.sub68, 8
  %cmp70 = icmp slt i64 %sub.ptr.div69, 1
  br i1 %cmp70, label %cond.true71, label %cond.false72

cond.true71:                                      ; preds = %do.body65
  br i1 true, label %if.then73, label %if.end75

cond.false72:                                     ; preds = %do.body65
  br i1 false, label %if.then73, label %if.end75

if.then73:                                        ; preds = %cond.false72, %cond.true71
  %77 = load %struct.sv**, %struct.sv*** %sp, align 8
  %78 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call74 = call %struct.sv** @Perl_stack_grow(%struct.sv** %77, %struct.sv** %78, i64 1)
  store %struct.sv** %call74, %struct.sv*** %sp, align 8
  %79 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %cond.false72, %cond.true71
  br label %do.end76

do.end76:                                         ; preds = %if.end75
  %80 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags77 = getelementptr inbounds %struct.gv, %struct.gv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags77, align 4
  %and78 = and i32 %81, 255
  %cmp79 = icmp eq i32 %and78, 9
  br i1 %cmp79, label %cond.true80, label %cond.false86

cond.true80:                                      ; preds = %do.end76
  %82 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u81 = getelementptr inbounds %struct.gv, %struct.gv* %82, i32 0, i32 3
  %svu_gp82 = bitcast %union.anon.4* %sv_u81 to %struct.gp**
  %83 = load %struct.gp*, %struct.gp** %svu_gp82, align 8
  %add.ptr83 = getelementptr inbounds %struct.gp, %struct.gp* %83, i64 0
  %gp_cv84 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr83, i32 0, i32 2
  %84 = load %struct.cv*, %struct.cv** %gp_cv84, align 8
  %add.ptr85 = getelementptr inbounds %struct.cv, %struct.cv* %84, i64 0
  %85 = bitcast %struct.cv* %add.ptr85 to i8*
  %86 = bitcast i8* %85 to %struct.sv*
  br label %cond.end87

cond.false86:                                     ; preds = %do.end76
  %87 = load %struct.gv*, %struct.gv** %gv, align 8
  %88 = bitcast %struct.gv* %87 to i8*
  %89 = bitcast i8* %88 to %struct.sv*
  br label %cond.end87

cond.end87:                                       ; preds = %cond.false86, %cond.true80
  %cond88 = phi %struct.sv* [ %86, %cond.true80 ], [ %89, %cond.false86 ]
  %90 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr89 = getelementptr inbounds %struct.sv*, %struct.sv** %90, i32 1
  store %struct.sv** %incdec.ptr89, %struct.sv*** %sp, align 8
  store %struct.sv* %cond88, %struct.sv** %incdec.ptr89, align 8
  br label %do.end90

do.end90:                                         ; preds = %cond.end87
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %91, %struct.sv*** @PL_stack_sp, align 8
  %92 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next91 = getelementptr inbounds %struct.op, %struct.op* %92, i32 0, i32 0
  %93 = load %struct.op*, %struct.op** %op_next91, align 8
  store %struct.op* %93, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end90, %do.end59
  %94 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %94
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_method_redir() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %meth = alloca %struct.sv*, align 8
  %stash = alloca %struct.hv*, align 8
  %he = alloca %struct.he*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %2, i32 0, i32 7
  %3 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %3, %struct.sv** %meth, align 8
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %5 = bitcast %struct.op* %4 to %struct.methop*
  %op_rclass_sv = getelementptr inbounds %struct.methop, %struct.methop* %5, i32 0, i32 8
  %6 = load %struct.sv*, %struct.sv** %op_rclass_sv, align 8
  %call = call %struct.hv* @Perl_gv_stashsv(%struct.sv* %6, i32 0)
  store %struct.hv* %call, %struct.hv** %stash, align 8
  %7 = load %struct.sv*, %struct.sv** %meth, align 8
  %call1 = call %struct.hv* @S_opmethod_stash(%struct.sv* %7)
  %8 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool = icmp ne %struct.hv* %8, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %9 = load %struct.hv*, %struct.hv** %stash, align 8
  %10 = load %struct.sv*, %struct.sv** %meth, align 8
  %call2 = call i8* @Perl_hv_common(%struct.hv* %9, %struct.sv* %10, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %11 = bitcast i8* %call2 to %struct.he*
  store %struct.he* %11, %struct.he** %he, align 8
  %12 = load %struct.he*, %struct.he** %he, align 8
  %tobool3 = icmp ne %struct.he* %12, null
  br i1 %tobool3, label %if.then4, label %if.end42

if.then4:                                         ; preds = %if.then
  %13 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %13, i32 0, i32 2
  %hent_val = bitcast %union.anon.1* %he_valu to %struct.sv**
  %14 = load %struct.sv*, %struct.sv** %hent_val, align 8
  %15 = bitcast %struct.sv* %14 to i8*
  %16 = bitcast i8* %15 to %struct.gv*
  store %struct.gv* %16, %struct.gv** %gv, align 8
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and = and i32 %18, 255
  %cmp = icmp eq i32 %and, 9
  br i1 %cmp, label %land.lhs.true, label %if.end41

land.lhs.true:                                    ; preds = %if.then4
  %19 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %19, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %20 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %20, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %21 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr5 = getelementptr inbounds %struct.cv, %struct.cv* %21, i64 0
  %tobool6 = icmp ne %struct.cv* %add.ptr5, null
  br i1 %tobool6, label %land.lhs.true7, label %if.end41

land.lhs.true7:                                   ; preds = %land.lhs.true
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u8 = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_gp9 = bitcast %union.anon.4* %sv_u8 to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp9, align 8
  %add.ptr10 = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr10, i32 0, i32 3
  %24 = load i32, i32* %gp_cvgen, align 8
  %tobool11 = icmp ne i32 %24, 0
  br i1 %tobool11, label %lor.lhs.false, label %if.then28

lor.lhs.false:                                    ; preds = %land.lhs.true7
  %25 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u12 = getelementptr inbounds %struct.gv, %struct.gv* %25, i32 0, i32 3
  %svu_gp13 = bitcast %union.anon.4* %sv_u12 to %struct.gp**
  %26 = load %struct.gp*, %struct.gp** %svu_gp13, align 8
  %add.ptr14 = getelementptr inbounds %struct.gp, %struct.gp* %26, i64 0
  %gp_cvgen15 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr14, i32 0, i32 3
  %27 = load i32, i32* %gp_cvgen15, align 8
  %28 = load i32, i32* @PL_sub_generation, align 4
  %29 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u16 = getelementptr inbounds %struct.hv, %struct.hv* %29, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u16 to %struct.he***
  %30 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %31 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %31, i32 0, i32 0
  %32 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %32, i32 0, i32 3
  %33 = load i64, i64* %xhv_max, align 8
  %add = add i64 %33, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %30, i64 %add
  %34 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_mro_meta = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %34, i32 0, i32 5
  %35 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta, align 8
  %tobool17 = icmp ne %struct.mro_meta* %35, null
  br i1 %tobool17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false
  %36 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u18 = getelementptr inbounds %struct.hv, %struct.hv* %36, i32 0, i32 3
  %svu_hash19 = bitcast %union.anon.5* %sv_u18 to %struct.he***
  %37 = load %struct.he**, %struct.he*** %svu_hash19, align 8
  %38 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any20 = getelementptr inbounds %struct.hv, %struct.hv* %38, i32 0, i32 0
  %39 = load %struct.xpvhv*, %struct.xpvhv** %sv_any20, align 8
  %xhv_max21 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %39, i32 0, i32 3
  %40 = load i64, i64* %xhv_max21, align 8
  %add22 = add i64 %40, 1
  %arrayidx23 = getelementptr inbounds %struct.he*, %struct.he** %37, i64 %add22
  %41 = bitcast %struct.he** %arrayidx23 to %struct.xpvhv_aux*
  %xhv_mro_meta24 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %41, i32 0, i32 5
  %42 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta24, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %43 = load %struct.hv*, %struct.hv** %stash, align 8
  %call25 = call %struct.mro_meta* @Perl_mro_meta_init(%struct.hv* %43)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mro_meta* [ %42, %cond.true ], [ %call25, %cond.false ]
  %cache_gen = getelementptr inbounds %struct.mro_meta, %struct.mro_meta* %cond, i32 0, i32 3
  %44 = load i32, i32* %cache_gen, align 8
  %add26 = add i32 %28, %44
  %cmp27 = icmp eq i32 %27, %add26
  br i1 %cmp27, label %if.then28, label %if.end41

if.then28:                                        ; preds = %cond.end, %land.lhs.true7
  br label %do.body

do.body:                                          ; preds = %if.then28
  br label %do.body29

do.body29:                                        ; preds = %do.body
  %45 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %45 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %46 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp30 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp30, label %cond.true31, label %cond.false32

cond.true31:                                      ; preds = %do.body29
  br i1 true, label %if.then33, label %if.end

cond.false32:                                     ; preds = %do.body29
  br i1 false, label %if.then33, label %if.end

if.then33:                                        ; preds = %cond.false32, %cond.true31
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call34 = call %struct.sv** @Perl_stack_grow(%struct.sv** %47, %struct.sv** %48, i64 1)
  store %struct.sv** %call34, %struct.sv*** %sp, align 8
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then33, %cond.false32, %cond.true31
  br label %do.end

do.end:                                           ; preds = %if.end
  %50 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u35 = getelementptr inbounds %struct.gv, %struct.gv* %50, i32 0, i32 3
  %svu_gp36 = bitcast %union.anon.4* %sv_u35 to %struct.gp**
  %51 = load %struct.gp*, %struct.gp** %svu_gp36, align 8
  %add.ptr37 = getelementptr inbounds %struct.gp, %struct.gp* %51, i64 0
  %gp_cv38 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr37, i32 0, i32 2
  %52 = load %struct.cv*, %struct.cv** %gp_cv38, align 8
  %add.ptr39 = getelementptr inbounds %struct.cv, %struct.cv* %52, i64 0
  %53 = bitcast %struct.cv* %add.ptr39 to i8*
  %54 = bitcast i8* %53 to %struct.sv*
  %55 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %55, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %54, %struct.sv** %incdec.ptr, align 8
  br label %do.end40

do.end40:                                         ; preds = %do.end
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %56, %struct.sv*** @PL_stack_sp, align 8
  %57 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 0
  %58 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %58, %struct.op** %retval, align 8
  br label %return

if.end41:                                         ; preds = %cond.end, %land.lhs.true, %if.then4
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then
  br label %if.end44

if.else:                                          ; preds = %entry
  %59 = load %struct.op*, %struct.op** @PL_op, align 8
  %60 = bitcast %struct.op* %59 to %struct.methop*
  %op_rclass_sv43 = getelementptr inbounds %struct.methop, %struct.methop* %60, i32 0, i32 8
  %61 = load %struct.sv*, %struct.sv** %op_rclass_sv43, align 8
  %62 = bitcast %struct.sv* %61 to i8*
  %63 = bitcast i8* %62 to %struct.hv*
  store %struct.hv* %63, %struct.hv** %stash, align 8
  br label %if.end44

if.end44:                                         ; preds = %if.else, %if.end42
  %64 = load %struct.hv*, %struct.hv** %stash, align 8
  %65 = load %struct.sv*, %struct.sv** %meth, align 8
  %call45 = call %struct.gv* @Perl_gv_fetchmethod_sv_flags(%struct.hv* %64, %struct.sv* %65, i32 768)
  store %struct.gv* %call45, %struct.gv** %gv, align 8
  br label %do.body46

do.body46:                                        ; preds = %if.end44
  br label %do.body47

do.body47:                                        ; preds = %do.body46
  %66 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast48 = ptrtoint %struct.sv** %66 to i64
  %sub.ptr.rhs.cast49 = ptrtoint %struct.sv** %67 to i64
  %sub.ptr.sub50 = sub i64 %sub.ptr.lhs.cast48, %sub.ptr.rhs.cast49
  %sub.ptr.div51 = sdiv exact i64 %sub.ptr.sub50, 8
  %cmp52 = icmp slt i64 %sub.ptr.div51, 1
  br i1 %cmp52, label %cond.true53, label %cond.false54

cond.true53:                                      ; preds = %do.body47
  br i1 true, label %if.then55, label %if.end57

cond.false54:                                     ; preds = %do.body47
  br i1 false, label %if.then55, label %if.end57

if.then55:                                        ; preds = %cond.false54, %cond.true53
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call56 = call %struct.sv** @Perl_stack_grow(%struct.sv** %68, %struct.sv** %69, i64 1)
  store %struct.sv** %call56, %struct.sv*** %sp, align 8
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end57

if.end57:                                         ; preds = %if.then55, %cond.false54, %cond.true53
  br label %do.end58

do.end58:                                         ; preds = %if.end57
  %71 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags59 = getelementptr inbounds %struct.gv, %struct.gv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %72, 255
  %cmp61 = icmp eq i32 %and60, 9
  br i1 %cmp61, label %cond.true62, label %cond.false68

cond.true62:                                      ; preds = %do.end58
  %73 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u63 = getelementptr inbounds %struct.gv, %struct.gv* %73, i32 0, i32 3
  %svu_gp64 = bitcast %union.anon.4* %sv_u63 to %struct.gp**
  %74 = load %struct.gp*, %struct.gp** %svu_gp64, align 8
  %add.ptr65 = getelementptr inbounds %struct.gp, %struct.gp* %74, i64 0
  %gp_cv66 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr65, i32 0, i32 2
  %75 = load %struct.cv*, %struct.cv** %gp_cv66, align 8
  %add.ptr67 = getelementptr inbounds %struct.cv, %struct.cv* %75, i64 0
  %76 = bitcast %struct.cv* %add.ptr67 to i8*
  %77 = bitcast i8* %76 to %struct.sv*
  br label %cond.end69

cond.false68:                                     ; preds = %do.end58
  %78 = load %struct.gv*, %struct.gv** %gv, align 8
  %79 = bitcast %struct.gv* %78 to i8*
  %80 = bitcast i8* %79 to %struct.sv*
  br label %cond.end69

cond.end69:                                       ; preds = %cond.false68, %cond.true62
  %cond70 = phi %struct.sv* [ %77, %cond.true62 ], [ %80, %cond.false68 ]
  %81 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr71 = getelementptr inbounds %struct.sv*, %struct.sv** %81, i32 1
  store %struct.sv** %incdec.ptr71, %struct.sv*** %sp, align 8
  store %struct.sv* %cond70, %struct.sv** %incdec.ptr71, align 8
  br label %do.end72

do.end72:                                         ; preds = %cond.end69
  %82 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %82, %struct.sv*** @PL_stack_sp, align 8
  %83 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next73 = getelementptr inbounds %struct.op, %struct.op* %83, i32 0, i32 0
  %84 = load %struct.op*, %struct.op** %op_next73, align 8
  store %struct.op* %84, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end72, %do.end40
  %85 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %85
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_method_redir_super() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %cache = alloca %struct.hv*, align 8
  %meth = alloca %struct.sv*, align 8
  %stash = alloca %struct.hv*, align 8
  %he = alloca %struct.he*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %2, i32 0, i32 7
  %3 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %3, %struct.sv** %meth, align 8
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %5 = bitcast %struct.op* %4 to %struct.methop*
  %op_rclass_sv = getelementptr inbounds %struct.methop, %struct.methop* %5, i32 0, i32 8
  %6 = load %struct.sv*, %struct.sv** %op_rclass_sv, align 8
  %call = call %struct.hv* @Perl_gv_stashsv(%struct.sv* %6, i32 0)
  store %struct.hv* %call, %struct.hv** %stash, align 8
  %7 = load %struct.sv*, %struct.sv** %meth, align 8
  %call1 = call %struct.hv* @S_opmethod_stash(%struct.sv* %7)
  %8 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool = icmp ne %struct.hv* %8, null
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.else

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false, %cond.true
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %10 = bitcast %struct.op* %9 to %struct.methop*
  %op_rclass_sv2 = getelementptr inbounds %struct.methop, %struct.methop* %10, i32 0, i32 8
  %11 = load %struct.sv*, %struct.sv** %op_rclass_sv2, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.hv*
  store %struct.hv* %13, %struct.hv** %stash, align 8
  br label %if.end69

if.else:                                          ; preds = %cond.false, %cond.true
  %14 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u = getelementptr inbounds %struct.hv, %struct.hv* %14, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u to %struct.he***
  %15 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %16 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %16, i32 0, i32 0
  %17 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %17, i32 0, i32 3
  %18 = load i64, i64* %xhv_max, align 8
  %add = add i64 %18, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %15, i64 %add
  %19 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_mro_meta = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %19, i32 0, i32 5
  %20 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta, align 8
  %tobool3 = icmp ne %struct.mro_meta* %20, null
  br i1 %tobool3, label %cond.true4, label %cond.false12

cond.true4:                                       ; preds = %if.else
  %21 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u5 = getelementptr inbounds %struct.hv, %struct.hv* %21, i32 0, i32 3
  %svu_hash6 = bitcast %union.anon.5* %sv_u5 to %struct.he***
  %22 = load %struct.he**, %struct.he*** %svu_hash6, align 8
  %23 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any7 = getelementptr inbounds %struct.hv, %struct.hv* %23, i32 0, i32 0
  %24 = load %struct.xpvhv*, %struct.xpvhv** %sv_any7, align 8
  %xhv_max8 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %24, i32 0, i32 3
  %25 = load i64, i64* %xhv_max8, align 8
  %add9 = add i64 %25, 1
  %arrayidx10 = getelementptr inbounds %struct.he*, %struct.he** %22, i64 %add9
  %26 = bitcast %struct.he** %arrayidx10 to %struct.xpvhv_aux*
  %xhv_mro_meta11 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %26, i32 0, i32 5
  %27 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta11, align 8
  br label %cond.end

cond.false12:                                     ; preds = %if.else
  %28 = load %struct.hv*, %struct.hv** %stash, align 8
  %call13 = call %struct.mro_meta* @Perl_mro_meta_init(%struct.hv* %28)
  br label %cond.end

cond.end:                                         ; preds = %cond.false12, %cond.true4
  %cond = phi %struct.mro_meta* [ %27, %cond.true4 ], [ %call13, %cond.false12 ]
  %super = getelementptr inbounds %struct.mro_meta, %struct.mro_meta* %cond, i32 0, i32 7
  %29 = load %struct.hv*, %struct.hv** %super, align 8
  store %struct.hv* %29, %struct.hv** %cache, align 8
  %tobool14 = icmp ne %struct.hv* %29, null
  br i1 %tobool14, label %if.then15, label %if.end68

if.then15:                                        ; preds = %cond.end
  %30 = load %struct.hv*, %struct.hv** %cache, align 8
  %31 = load %struct.sv*, %struct.sv** %meth, align 8
  %call16 = call i8* @Perl_hv_common(%struct.hv* %30, %struct.sv* %31, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %32 = bitcast i8* %call16 to %struct.he*
  store %struct.he* %32, %struct.he** %he, align 8
  %33 = load %struct.he*, %struct.he** %he, align 8
  %tobool17 = icmp ne %struct.he* %33, null
  br i1 %tobool17, label %if.then18, label %if.end67

if.then18:                                        ; preds = %if.then15
  %34 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %34, i32 0, i32 2
  %hent_val = bitcast %union.anon.1* %he_valu to %struct.sv**
  %35 = load %struct.sv*, %struct.sv** %hent_val, align 8
  %36 = bitcast %struct.sv* %35 to i8*
  %37 = bitcast i8* %36 to %struct.gv*
  store %struct.gv* %37, %struct.gv** %gv, align 8
  %38 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags, align 4
  %and = and i32 %39, 255
  %cmp = icmp eq i32 %and, 9
  br i1 %cmp, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %if.then18
  %40 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u19 = getelementptr inbounds %struct.gv, %struct.gv* %40, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u19 to %struct.gp**
  %41 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %41, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %42 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr20 = getelementptr inbounds %struct.cv, %struct.cv* %42, i64 0
  %tobool21 = icmp ne %struct.cv* %add.ptr20, null
  br i1 %tobool21, label %land.lhs.true22, label %if.end66

land.lhs.true22:                                  ; preds = %land.lhs.true
  %43 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u23 = getelementptr inbounds %struct.gv, %struct.gv* %43, i32 0, i32 3
  %svu_gp24 = bitcast %union.anon.4* %sv_u23 to %struct.gp**
  %44 = load %struct.gp*, %struct.gp** %svu_gp24, align 8
  %add.ptr25 = getelementptr inbounds %struct.gp, %struct.gp* %44, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr25, i32 0, i32 3
  %45 = load i32, i32* %gp_cvgen, align 8
  %tobool26 = icmp ne i32 %45, 0
  br i1 %tobool26, label %lor.lhs.false, label %if.then53

lor.lhs.false:                                    ; preds = %land.lhs.true22
  %46 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u27 = getelementptr inbounds %struct.gv, %struct.gv* %46, i32 0, i32 3
  %svu_gp28 = bitcast %union.anon.4* %sv_u27 to %struct.gp**
  %47 = load %struct.gp*, %struct.gp** %svu_gp28, align 8
  %add.ptr29 = getelementptr inbounds %struct.gp, %struct.gp* %47, i64 0
  %gp_cvgen30 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr29, i32 0, i32 3
  %48 = load i32, i32* %gp_cvgen30, align 8
  %49 = load i32, i32* @PL_sub_generation, align 4
  %50 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u31 = getelementptr inbounds %struct.hv, %struct.hv* %50, i32 0, i32 3
  %svu_hash32 = bitcast %union.anon.5* %sv_u31 to %struct.he***
  %51 = load %struct.he**, %struct.he*** %svu_hash32, align 8
  %52 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any33 = getelementptr inbounds %struct.hv, %struct.hv* %52, i32 0, i32 0
  %53 = load %struct.xpvhv*, %struct.xpvhv** %sv_any33, align 8
  %xhv_max34 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %53, i32 0, i32 3
  %54 = load i64, i64* %xhv_max34, align 8
  %add35 = add i64 %54, 1
  %arrayidx36 = getelementptr inbounds %struct.he*, %struct.he** %51, i64 %add35
  %55 = bitcast %struct.he** %arrayidx36 to %struct.xpvhv_aux*
  %xhv_mro_meta37 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %55, i32 0, i32 5
  %56 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta37, align 8
  %tobool38 = icmp ne %struct.mro_meta* %56, null
  br i1 %tobool38, label %cond.true39, label %cond.false47

cond.true39:                                      ; preds = %lor.lhs.false
  %57 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u40 = getelementptr inbounds %struct.hv, %struct.hv* %57, i32 0, i32 3
  %svu_hash41 = bitcast %union.anon.5* %sv_u40 to %struct.he***
  %58 = load %struct.he**, %struct.he*** %svu_hash41, align 8
  %59 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any42 = getelementptr inbounds %struct.hv, %struct.hv* %59, i32 0, i32 0
  %60 = load %struct.xpvhv*, %struct.xpvhv** %sv_any42, align 8
  %xhv_max43 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %60, i32 0, i32 3
  %61 = load i64, i64* %xhv_max43, align 8
  %add44 = add i64 %61, 1
  %arrayidx45 = getelementptr inbounds %struct.he*, %struct.he** %58, i64 %add44
  %62 = bitcast %struct.he** %arrayidx45 to %struct.xpvhv_aux*
  %xhv_mro_meta46 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %62, i32 0, i32 5
  %63 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta46, align 8
  br label %cond.end49

cond.false47:                                     ; preds = %lor.lhs.false
  %64 = load %struct.hv*, %struct.hv** %stash, align 8
  %call48 = call %struct.mro_meta* @Perl_mro_meta_init(%struct.hv* %64)
  br label %cond.end49

cond.end49:                                       ; preds = %cond.false47, %cond.true39
  %cond50 = phi %struct.mro_meta* [ %63, %cond.true39 ], [ %call48, %cond.false47 ]
  %cache_gen = getelementptr inbounds %struct.mro_meta, %struct.mro_meta* %cond50, i32 0, i32 3
  %65 = load i32, i32* %cache_gen, align 8
  %add51 = add i32 %49, %65
  %cmp52 = icmp eq i32 %48, %add51
  br i1 %cmp52, label %if.then53, label %if.end66

if.then53:                                        ; preds = %cond.end49, %land.lhs.true22
  br label %do.body

do.body:                                          ; preds = %if.then53
  br label %do.body54

do.body54:                                        ; preds = %do.body
  %66 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %66 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %67 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp55 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp55, label %cond.true56, label %cond.false57

cond.true56:                                      ; preds = %do.body54
  br i1 true, label %if.then58, label %if.end

cond.false57:                                     ; preds = %do.body54
  br i1 false, label %if.then58, label %if.end

if.then58:                                        ; preds = %cond.false57, %cond.true56
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call59 = call %struct.sv** @Perl_stack_grow(%struct.sv** %68, %struct.sv** %69, i64 1)
  store %struct.sv** %call59, %struct.sv*** %sp, align 8
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then58, %cond.false57, %cond.true56
  br label %do.end

do.end:                                           ; preds = %if.end
  %71 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u60 = getelementptr inbounds %struct.gv, %struct.gv* %71, i32 0, i32 3
  %svu_gp61 = bitcast %union.anon.4* %sv_u60 to %struct.gp**
  %72 = load %struct.gp*, %struct.gp** %svu_gp61, align 8
  %add.ptr62 = getelementptr inbounds %struct.gp, %struct.gp* %72, i64 0
  %gp_cv63 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr62, i32 0, i32 2
  %73 = load %struct.cv*, %struct.cv** %gp_cv63, align 8
  %add.ptr64 = getelementptr inbounds %struct.cv, %struct.cv* %73, i64 0
  %74 = bitcast %struct.cv* %add.ptr64 to i8*
  %75 = bitcast i8* %74 to %struct.sv*
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %76, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %75, %struct.sv** %incdec.ptr, align 8
  br label %do.end65

do.end65:                                         ; preds = %do.end
  %77 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %77, %struct.sv*** @PL_stack_sp, align 8
  %78 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 0
  %79 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %79, %struct.op** %retval, align 8
  br label %return

if.end66:                                         ; preds = %cond.end49, %land.lhs.true, %if.then18
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then15
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %cond.end
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then
  %80 = load %struct.hv*, %struct.hv** %stash, align 8
  %81 = load %struct.sv*, %struct.sv** %meth, align 8
  %call70 = call %struct.gv* @Perl_gv_fetchmethod_sv_flags(%struct.hv* %80, %struct.sv* %81, i32 4864)
  store %struct.gv* %call70, %struct.gv** %gv, align 8
  br label %do.body71

do.body71:                                        ; preds = %if.end69
  br label %do.body72

do.body72:                                        ; preds = %do.body71
  %82 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %83 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast73 = ptrtoint %struct.sv** %82 to i64
  %sub.ptr.rhs.cast74 = ptrtoint %struct.sv** %83 to i64
  %sub.ptr.sub75 = sub i64 %sub.ptr.lhs.cast73, %sub.ptr.rhs.cast74
  %sub.ptr.div76 = sdiv exact i64 %sub.ptr.sub75, 8
  %cmp77 = icmp slt i64 %sub.ptr.div76, 1
  br i1 %cmp77, label %cond.true78, label %cond.false79

cond.true78:                                      ; preds = %do.body72
  br i1 true, label %if.then80, label %if.end82

cond.false79:                                     ; preds = %do.body72
  br i1 false, label %if.then80, label %if.end82

if.then80:                                        ; preds = %cond.false79, %cond.true78
  %84 = load %struct.sv**, %struct.sv*** %sp, align 8
  %85 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call81 = call %struct.sv** @Perl_stack_grow(%struct.sv** %84, %struct.sv** %85, i64 1)
  store %struct.sv** %call81, %struct.sv*** %sp, align 8
  %86 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %cond.false79, %cond.true78
  br label %do.end83

do.end83:                                         ; preds = %if.end82
  %87 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags84 = getelementptr inbounds %struct.gv, %struct.gv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %88, 255
  %cmp86 = icmp eq i32 %and85, 9
  br i1 %cmp86, label %cond.true87, label %cond.false93

cond.true87:                                      ; preds = %do.end83
  %89 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u88 = getelementptr inbounds %struct.gv, %struct.gv* %89, i32 0, i32 3
  %svu_gp89 = bitcast %union.anon.4* %sv_u88 to %struct.gp**
  %90 = load %struct.gp*, %struct.gp** %svu_gp89, align 8
  %add.ptr90 = getelementptr inbounds %struct.gp, %struct.gp* %90, i64 0
  %gp_cv91 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr90, i32 0, i32 2
  %91 = load %struct.cv*, %struct.cv** %gp_cv91, align 8
  %add.ptr92 = getelementptr inbounds %struct.cv, %struct.cv* %91, i64 0
  %92 = bitcast %struct.cv* %add.ptr92 to i8*
  %93 = bitcast i8* %92 to %struct.sv*
  br label %cond.end94

cond.false93:                                     ; preds = %do.end83
  %94 = load %struct.gv*, %struct.gv** %gv, align 8
  %95 = bitcast %struct.gv* %94 to i8*
  %96 = bitcast i8* %95 to %struct.sv*
  br label %cond.end94

cond.end94:                                       ; preds = %cond.false93, %cond.true87
  %cond95 = phi %struct.sv* [ %93, %cond.true87 ], [ %96, %cond.false93 ]
  %97 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr96 = getelementptr inbounds %struct.sv*, %struct.sv** %97, i32 1
  store %struct.sv** %incdec.ptr96, %struct.sv*** %sp, align 8
  store %struct.sv* %cond95, %struct.sv** %incdec.ptr96, align 8
  br label %do.end97

do.end97:                                         ; preds = %cond.end94
  %98 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %98, %struct.sv*** @PL_stack_sp, align 8
  %99 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next98 = getelementptr inbounds %struct.op, %struct.op* %99, i32 0, i32 0
  %100 = load %struct.op*, %struct.op** %op_next98, align 8
  store %struct.op* %100, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end97, %do.end65
  %101 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %101
}

declare dso_local void @Perl_sv_free2(%struct.sv*, i32) #1

declare dso_local i64 @Perl_sv_len_utf8(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_sv_or_pv_pos_u2b(%struct.sv* %sv, i8* %pv, i64 %pos, i64* %lenp) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %pv.addr = alloca i8*, align 8
  %pos.addr = alloca i64, align 8
  %lenp.addr = alloca i64*, align 8
  %hopped = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pv, i8** %pv.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store i64* %lenp, i64** %lenp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 2048
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %5 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %6, 1048576
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.lhs.true7, label %if.end20

land.lhs.true7:                                   ; preds = %land.lhs.true
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u8 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 3
  %svu_rv9 = bitcast %union.anon* %sv_u8 to %struct.sv**
  %8 = load %struct.sv*, %struct.sv** %svu_rv9, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any, align 8
  %10 = bitcast i8* %9 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %10, i32 0, i32 0
  %11 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags10 = getelementptr inbounds %struct.hv, %struct.hv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %12, 268435456
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then, label %if.end20

if.then:                                          ; preds = %land.lhs.true7, %entry
  %13 = load i8*, i8** %pv.addr, align 8
  %14 = load i64, i64* %pos.addr, align 8
  %conv = trunc i64 %14 to i32
  %call = call i8* @Perl_utf8_hop(i8* %13, i32 %conv)
  store i8* %call, i8** %hopped, align 8
  %15 = load i64*, i64** %lenp.addr, align 8
  %tobool13 = icmp ne i64* %15, null
  br i1 %tobool13, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.then
  %16 = load i8*, i8** %hopped, align 8
  %17 = load i64*, i64** %lenp.addr, align 8
  %18 = load i64, i64* %17, align 8
  %conv15 = trunc i64 %18 to i32
  %call16 = call i8* @Perl_utf8_hop(i8* %16, i32 %conv15)
  %19 = load i8*, i8** %hopped, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %call16 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %20 = load i64*, i64** %lenp.addr, align 8
  store i64 %sub.ptr.sub, i64* %20, align 8
  br label %if.end

if.end:                                           ; preds = %if.then14, %if.then
  %21 = load i8*, i8** %hopped, align 8
  %22 = load i8*, i8** %pv.addr, align 8
  %sub.ptr.lhs.cast17 = ptrtoint i8* %21 to i64
  %sub.ptr.rhs.cast18 = ptrtoint i8* %22 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  store i64 %sub.ptr.sub19, i64* %retval, align 8
  br label %return

if.end20:                                         ; preds = %land.lhs.true7, %land.lhs.true, %lor.lhs.false
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %24 = load i64, i64* %pos.addr, align 8
  %25 = load i64*, i64** %lenp.addr, align 8
  %call21 = call i64 @Perl_sv_pos_u2b_flags(%struct.sv* %23, i64 %24, i64* %25, i32 32)
  store i64 %call21, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end20, %if.end
  %26 = load i64, i64* %retval, align 8
  ret i64 %26
}

declare dso_local i8* @Perl_utf8_hop(i8*, i32) #1

declare dso_local i64 @Perl_sv_pos_u2b_flags(%struct.sv*, i64, i64*, i32) #1

declare dso_local %struct.gv* @Perl_cvgv_from_hek(%struct.cv*) #1

declare dso_local %struct.hv* @Perl_gv_stashpvn(i8*, i32, i32) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
